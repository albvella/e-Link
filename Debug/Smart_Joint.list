
Smart_Joint.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00011dd0  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000554  08011f60  08011f60  00012f60  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080124b4  080124b4  00014064  2**0
                  CONTENTS
  4 .ARM          00000008  080124b4  080124b4  000134b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080124bc  080124bc  00014064  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080124bc  080124bc  000134bc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080124c0  080124c0  000134c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000064  20000000  080124c4  00014000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000074a8  20000068  08012528  00014068  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20007510  08012528  00014510  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00014064  2**0
                  CONTENTS, READONLY
 12 .debug_info   00034a82  00000000  00000000  00014094  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000599a  00000000  00000000  00048b16  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002bf0  00000000  00000000  0004e4b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00002235  00000000  00000000  000510a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000303d3  00000000  00000000  000532d5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0003362c  00000000  00000000  000836a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00123a7c  00000000  00000000  000b6cd4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001da750  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000c5b8  00000000  00000000  001da794  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000066  00000000  00000000  001e6d4c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000068 	.word	0x20000068
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08011f48 	.word	0x08011f48

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000006c 	.word	0x2000006c
 80001cc:	08011f48 	.word	0x08011f48

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b988 	b.w	80005a8 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	468e      	mov	lr, r1
 80002b8:	4604      	mov	r4, r0
 80002ba:	4688      	mov	r8, r1
 80002bc:	2b00      	cmp	r3, #0
 80002be:	d14a      	bne.n	8000356 <__udivmoddi4+0xa6>
 80002c0:	428a      	cmp	r2, r1
 80002c2:	4617      	mov	r7, r2
 80002c4:	d962      	bls.n	800038c <__udivmoddi4+0xdc>
 80002c6:	fab2 f682 	clz	r6, r2
 80002ca:	b14e      	cbz	r6, 80002e0 <__udivmoddi4+0x30>
 80002cc:	f1c6 0320 	rsb	r3, r6, #32
 80002d0:	fa01 f806 	lsl.w	r8, r1, r6
 80002d4:	fa20 f303 	lsr.w	r3, r0, r3
 80002d8:	40b7      	lsls	r7, r6
 80002da:	ea43 0808 	orr.w	r8, r3, r8
 80002de:	40b4      	lsls	r4, r6
 80002e0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002e4:	fa1f fc87 	uxth.w	ip, r7
 80002e8:	fbb8 f1fe 	udiv	r1, r8, lr
 80002ec:	0c23      	lsrs	r3, r4, #16
 80002ee:	fb0e 8811 	mls	r8, lr, r1, r8
 80002f2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80002f6:	fb01 f20c 	mul.w	r2, r1, ip
 80002fa:	429a      	cmp	r2, r3
 80002fc:	d909      	bls.n	8000312 <__udivmoddi4+0x62>
 80002fe:	18fb      	adds	r3, r7, r3
 8000300:	f101 30ff 	add.w	r0, r1, #4294967295
 8000304:	f080 80ea 	bcs.w	80004dc <__udivmoddi4+0x22c>
 8000308:	429a      	cmp	r2, r3
 800030a:	f240 80e7 	bls.w	80004dc <__udivmoddi4+0x22c>
 800030e:	3902      	subs	r1, #2
 8000310:	443b      	add	r3, r7
 8000312:	1a9a      	subs	r2, r3, r2
 8000314:	b2a3      	uxth	r3, r4
 8000316:	fbb2 f0fe 	udiv	r0, r2, lr
 800031a:	fb0e 2210 	mls	r2, lr, r0, r2
 800031e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000322:	fb00 fc0c 	mul.w	ip, r0, ip
 8000326:	459c      	cmp	ip, r3
 8000328:	d909      	bls.n	800033e <__udivmoddi4+0x8e>
 800032a:	18fb      	adds	r3, r7, r3
 800032c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000330:	f080 80d6 	bcs.w	80004e0 <__udivmoddi4+0x230>
 8000334:	459c      	cmp	ip, r3
 8000336:	f240 80d3 	bls.w	80004e0 <__udivmoddi4+0x230>
 800033a:	443b      	add	r3, r7
 800033c:	3802      	subs	r0, #2
 800033e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000342:	eba3 030c 	sub.w	r3, r3, ip
 8000346:	2100      	movs	r1, #0
 8000348:	b11d      	cbz	r5, 8000352 <__udivmoddi4+0xa2>
 800034a:	40f3      	lsrs	r3, r6
 800034c:	2200      	movs	r2, #0
 800034e:	e9c5 3200 	strd	r3, r2, [r5]
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	428b      	cmp	r3, r1
 8000358:	d905      	bls.n	8000366 <__udivmoddi4+0xb6>
 800035a:	b10d      	cbz	r5, 8000360 <__udivmoddi4+0xb0>
 800035c:	e9c5 0100 	strd	r0, r1, [r5]
 8000360:	2100      	movs	r1, #0
 8000362:	4608      	mov	r0, r1
 8000364:	e7f5      	b.n	8000352 <__udivmoddi4+0xa2>
 8000366:	fab3 f183 	clz	r1, r3
 800036a:	2900      	cmp	r1, #0
 800036c:	d146      	bne.n	80003fc <__udivmoddi4+0x14c>
 800036e:	4573      	cmp	r3, lr
 8000370:	d302      	bcc.n	8000378 <__udivmoddi4+0xc8>
 8000372:	4282      	cmp	r2, r0
 8000374:	f200 8105 	bhi.w	8000582 <__udivmoddi4+0x2d2>
 8000378:	1a84      	subs	r4, r0, r2
 800037a:	eb6e 0203 	sbc.w	r2, lr, r3
 800037e:	2001      	movs	r0, #1
 8000380:	4690      	mov	r8, r2
 8000382:	2d00      	cmp	r5, #0
 8000384:	d0e5      	beq.n	8000352 <__udivmoddi4+0xa2>
 8000386:	e9c5 4800 	strd	r4, r8, [r5]
 800038a:	e7e2      	b.n	8000352 <__udivmoddi4+0xa2>
 800038c:	2a00      	cmp	r2, #0
 800038e:	f000 8090 	beq.w	80004b2 <__udivmoddi4+0x202>
 8000392:	fab2 f682 	clz	r6, r2
 8000396:	2e00      	cmp	r6, #0
 8000398:	f040 80a4 	bne.w	80004e4 <__udivmoddi4+0x234>
 800039c:	1a8a      	subs	r2, r1, r2
 800039e:	0c03      	lsrs	r3, r0, #16
 80003a0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003a4:	b280      	uxth	r0, r0
 80003a6:	b2bc      	uxth	r4, r7
 80003a8:	2101      	movs	r1, #1
 80003aa:	fbb2 fcfe 	udiv	ip, r2, lr
 80003ae:	fb0e 221c 	mls	r2, lr, ip, r2
 80003b2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80003b6:	fb04 f20c 	mul.w	r2, r4, ip
 80003ba:	429a      	cmp	r2, r3
 80003bc:	d907      	bls.n	80003ce <__udivmoddi4+0x11e>
 80003be:	18fb      	adds	r3, r7, r3
 80003c0:	f10c 38ff 	add.w	r8, ip, #4294967295
 80003c4:	d202      	bcs.n	80003cc <__udivmoddi4+0x11c>
 80003c6:	429a      	cmp	r2, r3
 80003c8:	f200 80e0 	bhi.w	800058c <__udivmoddi4+0x2dc>
 80003cc:	46c4      	mov	ip, r8
 80003ce:	1a9b      	subs	r3, r3, r2
 80003d0:	fbb3 f2fe 	udiv	r2, r3, lr
 80003d4:	fb0e 3312 	mls	r3, lr, r2, r3
 80003d8:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 80003dc:	fb02 f404 	mul.w	r4, r2, r4
 80003e0:	429c      	cmp	r4, r3
 80003e2:	d907      	bls.n	80003f4 <__udivmoddi4+0x144>
 80003e4:	18fb      	adds	r3, r7, r3
 80003e6:	f102 30ff 	add.w	r0, r2, #4294967295
 80003ea:	d202      	bcs.n	80003f2 <__udivmoddi4+0x142>
 80003ec:	429c      	cmp	r4, r3
 80003ee:	f200 80ca 	bhi.w	8000586 <__udivmoddi4+0x2d6>
 80003f2:	4602      	mov	r2, r0
 80003f4:	1b1b      	subs	r3, r3, r4
 80003f6:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 80003fa:	e7a5      	b.n	8000348 <__udivmoddi4+0x98>
 80003fc:	f1c1 0620 	rsb	r6, r1, #32
 8000400:	408b      	lsls	r3, r1
 8000402:	fa22 f706 	lsr.w	r7, r2, r6
 8000406:	431f      	orrs	r7, r3
 8000408:	fa0e f401 	lsl.w	r4, lr, r1
 800040c:	fa20 f306 	lsr.w	r3, r0, r6
 8000410:	fa2e fe06 	lsr.w	lr, lr, r6
 8000414:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000418:	4323      	orrs	r3, r4
 800041a:	fa00 f801 	lsl.w	r8, r0, r1
 800041e:	fa1f fc87 	uxth.w	ip, r7
 8000422:	fbbe f0f9 	udiv	r0, lr, r9
 8000426:	0c1c      	lsrs	r4, r3, #16
 8000428:	fb09 ee10 	mls	lr, r9, r0, lr
 800042c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000430:	fb00 fe0c 	mul.w	lr, r0, ip
 8000434:	45a6      	cmp	lr, r4
 8000436:	fa02 f201 	lsl.w	r2, r2, r1
 800043a:	d909      	bls.n	8000450 <__udivmoddi4+0x1a0>
 800043c:	193c      	adds	r4, r7, r4
 800043e:	f100 3aff 	add.w	sl, r0, #4294967295
 8000442:	f080 809c 	bcs.w	800057e <__udivmoddi4+0x2ce>
 8000446:	45a6      	cmp	lr, r4
 8000448:	f240 8099 	bls.w	800057e <__udivmoddi4+0x2ce>
 800044c:	3802      	subs	r0, #2
 800044e:	443c      	add	r4, r7
 8000450:	eba4 040e 	sub.w	r4, r4, lr
 8000454:	fa1f fe83 	uxth.w	lr, r3
 8000458:	fbb4 f3f9 	udiv	r3, r4, r9
 800045c:	fb09 4413 	mls	r4, r9, r3, r4
 8000460:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000464:	fb03 fc0c 	mul.w	ip, r3, ip
 8000468:	45a4      	cmp	ip, r4
 800046a:	d908      	bls.n	800047e <__udivmoddi4+0x1ce>
 800046c:	193c      	adds	r4, r7, r4
 800046e:	f103 3eff 	add.w	lr, r3, #4294967295
 8000472:	f080 8082 	bcs.w	800057a <__udivmoddi4+0x2ca>
 8000476:	45a4      	cmp	ip, r4
 8000478:	d97f      	bls.n	800057a <__udivmoddi4+0x2ca>
 800047a:	3b02      	subs	r3, #2
 800047c:	443c      	add	r4, r7
 800047e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000482:	eba4 040c 	sub.w	r4, r4, ip
 8000486:	fba0 ec02 	umull	lr, ip, r0, r2
 800048a:	4564      	cmp	r4, ip
 800048c:	4673      	mov	r3, lr
 800048e:	46e1      	mov	r9, ip
 8000490:	d362      	bcc.n	8000558 <__udivmoddi4+0x2a8>
 8000492:	d05f      	beq.n	8000554 <__udivmoddi4+0x2a4>
 8000494:	b15d      	cbz	r5, 80004ae <__udivmoddi4+0x1fe>
 8000496:	ebb8 0203 	subs.w	r2, r8, r3
 800049a:	eb64 0409 	sbc.w	r4, r4, r9
 800049e:	fa04 f606 	lsl.w	r6, r4, r6
 80004a2:	fa22 f301 	lsr.w	r3, r2, r1
 80004a6:	431e      	orrs	r6, r3
 80004a8:	40cc      	lsrs	r4, r1
 80004aa:	e9c5 6400 	strd	r6, r4, [r5]
 80004ae:	2100      	movs	r1, #0
 80004b0:	e74f      	b.n	8000352 <__udivmoddi4+0xa2>
 80004b2:	fbb1 fcf2 	udiv	ip, r1, r2
 80004b6:	0c01      	lsrs	r1, r0, #16
 80004b8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80004bc:	b280      	uxth	r0, r0
 80004be:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 80004c2:	463b      	mov	r3, r7
 80004c4:	4638      	mov	r0, r7
 80004c6:	463c      	mov	r4, r7
 80004c8:	46b8      	mov	r8, r7
 80004ca:	46be      	mov	lr, r7
 80004cc:	2620      	movs	r6, #32
 80004ce:	fbb1 f1f7 	udiv	r1, r1, r7
 80004d2:	eba2 0208 	sub.w	r2, r2, r8
 80004d6:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 80004da:	e766      	b.n	80003aa <__udivmoddi4+0xfa>
 80004dc:	4601      	mov	r1, r0
 80004de:	e718      	b.n	8000312 <__udivmoddi4+0x62>
 80004e0:	4610      	mov	r0, r2
 80004e2:	e72c      	b.n	800033e <__udivmoddi4+0x8e>
 80004e4:	f1c6 0220 	rsb	r2, r6, #32
 80004e8:	fa2e f302 	lsr.w	r3, lr, r2
 80004ec:	40b7      	lsls	r7, r6
 80004ee:	40b1      	lsls	r1, r6
 80004f0:	fa20 f202 	lsr.w	r2, r0, r2
 80004f4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80004f8:	430a      	orrs	r2, r1
 80004fa:	fbb3 f8fe 	udiv	r8, r3, lr
 80004fe:	b2bc      	uxth	r4, r7
 8000500:	fb0e 3318 	mls	r3, lr, r8, r3
 8000504:	0c11      	lsrs	r1, r2, #16
 8000506:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800050a:	fb08 f904 	mul.w	r9, r8, r4
 800050e:	40b0      	lsls	r0, r6
 8000510:	4589      	cmp	r9, r1
 8000512:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000516:	b280      	uxth	r0, r0
 8000518:	d93e      	bls.n	8000598 <__udivmoddi4+0x2e8>
 800051a:	1879      	adds	r1, r7, r1
 800051c:	f108 3cff 	add.w	ip, r8, #4294967295
 8000520:	d201      	bcs.n	8000526 <__udivmoddi4+0x276>
 8000522:	4589      	cmp	r9, r1
 8000524:	d81f      	bhi.n	8000566 <__udivmoddi4+0x2b6>
 8000526:	eba1 0109 	sub.w	r1, r1, r9
 800052a:	fbb1 f9fe 	udiv	r9, r1, lr
 800052e:	fb09 f804 	mul.w	r8, r9, r4
 8000532:	fb0e 1119 	mls	r1, lr, r9, r1
 8000536:	b292      	uxth	r2, r2
 8000538:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800053c:	4542      	cmp	r2, r8
 800053e:	d229      	bcs.n	8000594 <__udivmoddi4+0x2e4>
 8000540:	18ba      	adds	r2, r7, r2
 8000542:	f109 31ff 	add.w	r1, r9, #4294967295
 8000546:	d2c4      	bcs.n	80004d2 <__udivmoddi4+0x222>
 8000548:	4542      	cmp	r2, r8
 800054a:	d2c2      	bcs.n	80004d2 <__udivmoddi4+0x222>
 800054c:	f1a9 0102 	sub.w	r1, r9, #2
 8000550:	443a      	add	r2, r7
 8000552:	e7be      	b.n	80004d2 <__udivmoddi4+0x222>
 8000554:	45f0      	cmp	r8, lr
 8000556:	d29d      	bcs.n	8000494 <__udivmoddi4+0x1e4>
 8000558:	ebbe 0302 	subs.w	r3, lr, r2
 800055c:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000560:	3801      	subs	r0, #1
 8000562:	46e1      	mov	r9, ip
 8000564:	e796      	b.n	8000494 <__udivmoddi4+0x1e4>
 8000566:	eba7 0909 	sub.w	r9, r7, r9
 800056a:	4449      	add	r1, r9
 800056c:	f1a8 0c02 	sub.w	ip, r8, #2
 8000570:	fbb1 f9fe 	udiv	r9, r1, lr
 8000574:	fb09 f804 	mul.w	r8, r9, r4
 8000578:	e7db      	b.n	8000532 <__udivmoddi4+0x282>
 800057a:	4673      	mov	r3, lr
 800057c:	e77f      	b.n	800047e <__udivmoddi4+0x1ce>
 800057e:	4650      	mov	r0, sl
 8000580:	e766      	b.n	8000450 <__udivmoddi4+0x1a0>
 8000582:	4608      	mov	r0, r1
 8000584:	e6fd      	b.n	8000382 <__udivmoddi4+0xd2>
 8000586:	443b      	add	r3, r7
 8000588:	3a02      	subs	r2, #2
 800058a:	e733      	b.n	80003f4 <__udivmoddi4+0x144>
 800058c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000590:	443b      	add	r3, r7
 8000592:	e71c      	b.n	80003ce <__udivmoddi4+0x11e>
 8000594:	4649      	mov	r1, r9
 8000596:	e79c      	b.n	80004d2 <__udivmoddi4+0x222>
 8000598:	eba1 0109 	sub.w	r1, r1, r9
 800059c:	46c4      	mov	ip, r8
 800059e:	fbb1 f9fe 	udiv	r9, r1, lr
 80005a2:	fb09 f804 	mul.w	r8, r9, r4
 80005a6:	e7c4      	b.n	8000532 <__udivmoddi4+0x282>

080005a8 <__aeabi_idiv0>:
 80005a8:	4770      	bx	lr
 80005aa:	bf00      	nop

080005ac <LL_USART_SetBaudRate>:
                                          uint32_t BaudRate)
#else
__STATIC_INLINE void LL_USART_SetBaudRate(USART_TypeDef *USARTx, uint32_t PeriphClk, uint32_t OverSampling,
                                          uint32_t BaudRate)
#endif /* USART_PRESC_PRESCALER */
{
 80005ac:	b480      	push	{r7}
 80005ae:	b087      	sub	sp, #28
 80005b0:	af00      	add	r7, sp, #0
 80005b2:	60f8      	str	r0, [r7, #12]
 80005b4:	60b9      	str	r1, [r7, #8]
 80005b6:	607a      	str	r2, [r7, #4]
 80005b8:	603b      	str	r3, [r7, #0]
  {
    /* Can Not divide per 0 */
  }
  else if (OverSampling == LL_USART_OVERSAMPLING_8)
#else
  if (OverSampling == LL_USART_OVERSAMPLING_8)
 80005ba:	687b      	ldr	r3, [r7, #4]
 80005bc:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80005c0:	d11a      	bne.n	80005f8 <LL_USART_SetBaudRate+0x4c>
#endif /* USART_PRESC_PRESCALER */
  {
#if defined(USART_PRESC_PRESCALER)
    usartdiv = (uint16_t)(__LL_USART_DIV_SAMPLING8(PeriphClk, (uint8_t)PrescalerValue, BaudRate));
#else
    usartdiv = (uint16_t)(__LL_USART_DIV_SAMPLING8(PeriphClk, BaudRate));
 80005c2:	68bb      	ldr	r3, [r7, #8]
 80005c4:	005a      	lsls	r2, r3, #1
 80005c6:	683b      	ldr	r3, [r7, #0]
 80005c8:	085b      	lsrs	r3, r3, #1
 80005ca:	441a      	add	r2, r3
 80005cc:	683b      	ldr	r3, [r7, #0]
 80005ce:	fbb2 f3f3 	udiv	r3, r2, r3
 80005d2:	b29b      	uxth	r3, r3
 80005d4:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
    brrtemp = usartdiv & 0xFFF0U;
 80005d6:	697a      	ldr	r2, [r7, #20]
 80005d8:	f64f 73f0 	movw	r3, #65520	@ 0xfff0
 80005dc:	4013      	ands	r3, r2
 80005de:	613b      	str	r3, [r7, #16]
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80005e0:	697b      	ldr	r3, [r7, #20]
 80005e2:	085b      	lsrs	r3, r3, #1
 80005e4:	b29b      	uxth	r3, r3
 80005e6:	f003 0307 	and.w	r3, r3, #7
 80005ea:	693a      	ldr	r2, [r7, #16]
 80005ec:	4313      	orrs	r3, r2
 80005ee:	613b      	str	r3, [r7, #16]
    USARTx->BRR = brrtemp;
 80005f0:	68fb      	ldr	r3, [r7, #12]
 80005f2:	693a      	ldr	r2, [r7, #16]
 80005f4:	60da      	str	r2, [r3, #12]
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, (uint8_t)PrescalerValue, BaudRate));
#else
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, BaudRate));
#endif /* USART_PRESC_PRESCALER */
  }
}
 80005f6:	e00a      	b.n	800060e <LL_USART_SetBaudRate+0x62>
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, BaudRate));
 80005f8:	683b      	ldr	r3, [r7, #0]
 80005fa:	085a      	lsrs	r2, r3, #1
 80005fc:	68bb      	ldr	r3, [r7, #8]
 80005fe:	441a      	add	r2, r3
 8000600:	683b      	ldr	r3, [r7, #0]
 8000602:	fbb2 f3f3 	udiv	r3, r2, r3
 8000606:	b29b      	uxth	r3, r3
 8000608:	461a      	mov	r2, r3
 800060a:	68fb      	ldr	r3, [r7, #12]
 800060c:	60da      	str	r2, [r3, #12]
}
 800060e:	bf00      	nop
 8000610:	371c      	adds	r7, #28
 8000612:	46bd      	mov	sp, r7
 8000614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000618:	4770      	bx	lr
	...

0800061c <Temp_Sensor_Init>:
#include "stm32l4xx_ll_usart.h"


/*------INIZIALIZZAZIONE SENSORE DI TEMPERATURA------*/
void Temp_Sensor_Init(void)
{
 800061c:	b590      	push	{r4, r7, lr}
 800061e:	b083      	sub	sp, #12
 8000620:	af00      	add	r7, sp, #0
	uint8_t data = 0xF0;
 8000622:	23f0      	movs	r3, #240	@ 0xf0
 8000624:	71fb      	strb	r3, [r7, #7]

	LL_USART_SetBaudRate(huart4.Instance, HAL_RCC_GetPCLK2Freq(), UART_OVERSAMPLING_16, 9600);
 8000626:	4b1a      	ldr	r3, [pc, #104]	@ (8000690 <Temp_Sensor_Init+0x74>)
 8000628:	681c      	ldr	r4, [r3, #0]
 800062a:	f00b fb4b 	bl	800bcc4 <HAL_RCC_GetPCLK2Freq>
 800062e:	4601      	mov	r1, r0
 8000630:	f44f 5316 	mov.w	r3, #9600	@ 0x2580
 8000634:	2200      	movs	r2, #0
 8000636:	4620      	mov	r0, r4
 8000638:	f7ff ffb8 	bl	80005ac <LL_USART_SetBaudRate>

	HAL_UART_Transmit(TEMP_UART, &data, 1, 100);  // low for 500+us
 800063c:	1df9      	adds	r1, r7, #7
 800063e:	2364      	movs	r3, #100	@ 0x64
 8000640:	2201      	movs	r2, #1
 8000642:	4813      	ldr	r0, [pc, #76]	@ (8000690 <Temp_Sensor_Init+0x74>)
 8000644:	f00f f9a2 	bl	800f98c <HAL_UART_Transmit>
	if (HAL_UART_Receive(TEMP_UART, &data, 1, 1000) != HAL_OK)
 8000648:	1df9      	adds	r1, r7, #7
 800064a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800064e:	2201      	movs	r2, #1
 8000650:	480f      	ldr	r0, [pc, #60]	@ (8000690 <Temp_Sensor_Init+0x74>)
 8000652:	f00f fa24 	bl	800fa9e <HAL_UART_Receive>
 8000656:	4603      	mov	r3, r0
 8000658:	2b00      	cmp	r3, #0
 800065a:	d001      	beq.n	8000660 <Temp_Sensor_Init+0x44>
		while(1);
 800065c:	bf00      	nop
 800065e:	e7fd      	b.n	800065c <Temp_Sensor_Init+0x40>

	LL_USART_SetBaudRate(huart4.Instance, HAL_RCC_GetPCLK2Freq(), UART_OVERSAMPLING_16, 115200);
 8000660:	4b0b      	ldr	r3, [pc, #44]	@ (8000690 <Temp_Sensor_Init+0x74>)
 8000662:	681c      	ldr	r4, [r3, #0]
 8000664:	f00b fb2e 	bl	800bcc4 <HAL_RCC_GetPCLK2Freq>
 8000668:	4601      	mov	r1, r0
 800066a:	f44f 33e1 	mov.w	r3, #115200	@ 0x1c200
 800066e:	2200      	movs	r2, #0
 8000670:	4620      	mov	r0, r4
 8000672:	f7ff ff9b 	bl	80005ac <LL_USART_SetBaudRate>

	if (data == 0xF0)
 8000676:	79fb      	ldrb	r3, [r7, #7]
 8000678:	2bf0      	cmp	r3, #240	@ 0xf0
 800067a:	d101      	bne.n	8000680 <Temp_Sensor_Init+0x64>
		while(1);
 800067c:	bf00      	nop
 800067e:	e7fd      	b.n	800067c <Temp_Sensor_Init+0x60>

	Temp_Sensor_Write(0xCC);  // skip ROM
 8000680:	20cc      	movs	r0, #204	@ 0xcc
 8000682:	f000 f807 	bl	8000694 <Temp_Sensor_Write>
}
 8000686:	bf00      	nop
 8000688:	370c      	adds	r7, #12
 800068a:	46bd      	mov	sp, r7
 800068c:	bd90      	pop	{r4, r7, pc}
 800068e:	bf00      	nop
 8000690:	20000414 	.word	0x20000414

08000694 <Temp_Sensor_Write>:

/*------SCRITTURA SU SENSORE DI TEMPERATURA------*/
void Temp_Sensor_Write(uint8_t data)
{
 8000694:	b580      	push	{r7, lr}
 8000696:	b086      	sub	sp, #24
 8000698:	af00      	add	r7, sp, #0
 800069a:	4603      	mov	r3, r0
 800069c:	71fb      	strb	r3, [r7, #7]
	uint8_t buffer[8];

	for (int i=0; i<8; i++)
 800069e:	2300      	movs	r3, #0
 80006a0:	617b      	str	r3, [r7, #20]
 80006a2:	e017      	b.n	80006d4 <Temp_Sensor_Write+0x40>
	{
		if ((data & (1<<i))!=0)  // if the bit is high
 80006a4:	79fa      	ldrb	r2, [r7, #7]
 80006a6:	697b      	ldr	r3, [r7, #20]
 80006a8:	fa42 f303 	asr.w	r3, r2, r3
 80006ac:	f003 0301 	and.w	r3, r3, #1
 80006b0:	2b00      	cmp	r3, #0
 80006b2:	d006      	beq.n	80006c2 <Temp_Sensor_Write+0x2e>
		{
			buffer[i] = 0xFF;  // write 1
 80006b4:	f107 020c 	add.w	r2, r7, #12
 80006b8:	697b      	ldr	r3, [r7, #20]
 80006ba:	4413      	add	r3, r2
 80006bc:	22ff      	movs	r2, #255	@ 0xff
 80006be:	701a      	strb	r2, [r3, #0]
 80006c0:	e005      	b.n	80006ce <Temp_Sensor_Write+0x3a>
		}
		else  // if the bit is low
		{
			buffer[i] = 0;  // write 0
 80006c2:	f107 020c 	add.w	r2, r7, #12
 80006c6:	697b      	ldr	r3, [r7, #20]
 80006c8:	4413      	add	r3, r2
 80006ca:	2200      	movs	r2, #0
 80006cc:	701a      	strb	r2, [r3, #0]
	for (int i=0; i<8; i++)
 80006ce:	697b      	ldr	r3, [r7, #20]
 80006d0:	3301      	adds	r3, #1
 80006d2:	617b      	str	r3, [r7, #20]
 80006d4:	697b      	ldr	r3, [r7, #20]
 80006d6:	2b07      	cmp	r3, #7
 80006d8:	dde4      	ble.n	80006a4 <Temp_Sensor_Write+0x10>
		}
	}

	HAL_UART_Transmit(TEMP_UART, buffer, 8, 100);
 80006da:	f107 010c 	add.w	r1, r7, #12
 80006de:	2364      	movs	r3, #100	@ 0x64
 80006e0:	2208      	movs	r2, #8
 80006e2:	4803      	ldr	r0, [pc, #12]	@ (80006f0 <Temp_Sensor_Write+0x5c>)
 80006e4:	f00f f952 	bl	800f98c <HAL_UART_Transmit>
}
 80006e8:	bf00      	nop
 80006ea:	3718      	adds	r7, #24
 80006ec:	46bd      	mov	sp, r7
 80006ee:	bd80      	pop	{r7, pc}
 80006f0:	20000414 	.word	0x20000414

080006f4 <Temp_Sensor_ReadByte>:

/*------LETTURA BYTE DA SENSORE DI TEMPERATURA------*/
uint8_t Temp_Sensor_ReadByte(void)
{
 80006f4:	b580      	push	{r7, lr}
 80006f6:	b082      	sub	sp, #8
 80006f8:	af00      	add	r7, sp, #0
	uint8_t RxByte = 0;
 80006fa:	2300      	movs	r3, #0
 80006fc:	71fb      	strb	r3, [r7, #7]
	for (uint8_t i = 0; i < 8; i++)
 80006fe:	2300      	movs	r3, #0
 8000700:	71bb      	strb	r3, [r7, #6]
 8000702:	e00e      	b.n	8000722 <Temp_Sensor_ReadByte+0x2e>
	{
		RxByte >>= 1;
 8000704:	79fb      	ldrb	r3, [r7, #7]
 8000706:	085b      	lsrs	r3, r3, #1
 8000708:	71fb      	strb	r3, [r7, #7]
		if (Temp_Sensor_ReadBit())
 800070a:	f000 f813 	bl	8000734 <Temp_Sensor_ReadBit>
 800070e:	4603      	mov	r3, r0
 8000710:	2b00      	cmp	r3, #0
 8000712:	d003      	beq.n	800071c <Temp_Sensor_ReadByte+0x28>
		{
			RxByte |= 0x80;
 8000714:	79fb      	ldrb	r3, [r7, #7]
 8000716:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800071a:	71fb      	strb	r3, [r7, #7]
	for (uint8_t i = 0; i < 8; i++)
 800071c:	79bb      	ldrb	r3, [r7, #6]
 800071e:	3301      	adds	r3, #1
 8000720:	71bb      	strb	r3, [r7, #6]
 8000722:	79bb      	ldrb	r3, [r7, #6]
 8000724:	2b07      	cmp	r3, #7
 8000726:	d9ed      	bls.n	8000704 <Temp_Sensor_ReadByte+0x10>
		}
	}
	return RxByte;
 8000728:	79fb      	ldrb	r3, [r7, #7]
}
 800072a:	4618      	mov	r0, r3
 800072c:	3708      	adds	r7, #8
 800072e:	46bd      	mov	sp, r7
 8000730:	bd80      	pop	{r7, pc}
	...

08000734 <Temp_Sensor_ReadBit>:

/*------LETTURA BIT DA SENSORE DI TEMPERATURA------*/
uint8_t Temp_Sensor_ReadBit(void)
{
 8000734:	b580      	push	{r7, lr}
 8000736:	b082      	sub	sp, #8
 8000738:	af00      	add	r7, sp, #0
    uint8_t ReadBitCMD = 0xFF;
 800073a:	23ff      	movs	r3, #255	@ 0xff
 800073c:	71fb      	strb	r3, [r7, #7]
    uint8_t RxBit;

    // Send Read Bit CMD
    HAL_UART_Transmit(&huart1, &ReadBitCMD, 1, 1);
 800073e:	1df9      	adds	r1, r7, #7
 8000740:	2301      	movs	r3, #1
 8000742:	2201      	movs	r2, #1
 8000744:	4808      	ldr	r0, [pc, #32]	@ (8000768 <Temp_Sensor_ReadBit+0x34>)
 8000746:	f00f f921 	bl	800f98c <HAL_UART_Transmit>
    // Receive The Bit
    HAL_UART_Receive(&huart1, &RxBit, 1, 1);
 800074a:	1db9      	adds	r1, r7, #6
 800074c:	2301      	movs	r3, #1
 800074e:	2201      	movs	r2, #1
 8000750:	4805      	ldr	r0, [pc, #20]	@ (8000768 <Temp_Sensor_ReadBit+0x34>)
 8000752:	f00f f9a4 	bl	800fa9e <HAL_UART_Receive>

    return (RxBit & 0x01);
 8000756:	79bb      	ldrb	r3, [r7, #6]
 8000758:	f003 0301 	and.w	r3, r3, #1
 800075c:	b2db      	uxtb	r3, r3
}
 800075e:	4618      	mov	r0, r3
 8000760:	3708      	adds	r7, #8
 8000762:	46bd      	mov	sp, r7
 8000764:	bd80      	pop	{r7, pc}
 8000766:	bf00      	nop
 8000768:	2000049c 	.word	0x2000049c

0800076c <Read_Temperature>:

/*------LETTURA TEMPERATURA------*/
uint16_t Read_Temperature(void)
{
 800076c:	b580      	push	{r7, lr}
 800076e:	b082      	sub	sp, #8
 8000770:	af00      	add	r7, sp, #0
	uint8_t Temp_LSB = 0;
 8000772:	2300      	movs	r3, #0
 8000774:	71fb      	strb	r3, [r7, #7]
	uint8_t Temp_MSB = 0;
 8000776:	2300      	movs	r3, #0
 8000778:	71bb      	strb	r3, [r7, #6]
	uint16_t Temp = 0;
 800077a:	2300      	movs	r3, #0
 800077c:	80bb      	strh	r3, [r7, #4]

	Temp_Sensor_Init();
 800077e:	f7ff ff4d 	bl	800061c <Temp_Sensor_Init>
	Temp_Sensor_Write(0xCC);  // skip ROM
 8000782:	20cc      	movs	r0, #204	@ 0xcc
 8000784:	f7ff ff86 	bl	8000694 <Temp_Sensor_Write>
	Temp_Sensor_Write(0x44);  // convert t
 8000788:	2044      	movs	r0, #68	@ 0x44
 800078a:	f7ff ff83 	bl	8000694 <Temp_Sensor_Write>

	Temp_Sensor_Init();
 800078e:	f7ff ff45 	bl	800061c <Temp_Sensor_Init>
	Temp_Sensor_Write(0xCC);  // skip ROM
 8000792:	20cc      	movs	r0, #204	@ 0xcc
 8000794:	f7ff ff7e 	bl	8000694 <Temp_Sensor_Write>
	Temp_Sensor_Write(0xBE);  // read Scratch-pad
 8000798:	20be      	movs	r0, #190	@ 0xbe
 800079a:	f7ff ff7b 	bl	8000694 <Temp_Sensor_Write>

	Temp_LSB = Temp_Sensor_ReadByte();
 800079e:	f7ff ffa9 	bl	80006f4 <Temp_Sensor_ReadByte>
 80007a2:	4603      	mov	r3, r0
 80007a4:	71fb      	strb	r3, [r7, #7]
	Temp_MSB = Temp_Sensor_ReadByte();
 80007a6:	f7ff ffa5 	bl	80006f4 <Temp_Sensor_ReadByte>
 80007aa:	4603      	mov	r3, r0
 80007ac:	71bb      	strb	r3, [r7, #6]

	Temp = ((Temp_MSB << 8)) | Temp_LSB;
 80007ae:	79bb      	ldrb	r3, [r7, #6]
 80007b0:	b21b      	sxth	r3, r3
 80007b2:	021b      	lsls	r3, r3, #8
 80007b4:	b21a      	sxth	r2, r3
 80007b6:	79fb      	ldrb	r3, [r7, #7]
 80007b8:	b21b      	sxth	r3, r3
 80007ba:	4313      	orrs	r3, r2
 80007bc:	b21b      	sxth	r3, r3
 80007be:	80bb      	strh	r3, [r7, #4]

	return Temp;
 80007c0:	88bb      	ldrh	r3, [r7, #4]
}
 80007c2:	4618      	mov	r0, r3
 80007c4:	3708      	adds	r7, #8
 80007c6:	46bd      	mov	sp, r7
 80007c8:	bd80      	pop	{r7, pc}

080007ca <INA3221_Init>:
#include "INA3221.h"
#include "INA3221_reg.h"
#include "peripherals.h"

void INA3221_Init()
{
 80007ca:	b580      	push	{r7, lr}
 80007cc:	b082      	sub	sp, #8
 80007ce:	af00      	add	r7, sp, #0
	uint16_t rcheck = 0;
 80007d0:	2300      	movs	r3, #0
 80007d2:	80fb      	strh	r3, [r7, #6]

	INA3221_write_reg(INA3221_REG_CONFIG, 0x8000);   //RESET
 80007d4:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80007d8:	2000      	movs	r0, #0
 80007da:	f000 f879 	bl	80008d0 <INA3221_write_reg>

	HAL_Delay(100);
 80007de:	2064      	movs	r0, #100	@ 0x64
 80007e0:	f007 f87e 	bl	80078e0 <HAL_Delay>

	INA3221_read_reg(INA3221_REG_MID, &rcheck);
 80007e4:	1dbb      	adds	r3, r7, #6
 80007e6:	4619      	mov	r1, r3
 80007e8:	20fe      	movs	r0, #254	@ 0xfe
 80007ea:	f000 f83b 	bl	8000864 <INA3221_read_reg>

	if(rcheck != INA3221_DEFAULT_MID)
 80007ee:	88fb      	ldrh	r3, [r7, #6]
 80007f0:	f245 4249 	movw	r2, #21577	@ 0x5449
 80007f4:	4293      	cmp	r3, r2
 80007f6:	d001      	beq.n	80007fc <INA3221_Init+0x32>
		while(1);
 80007f8:	bf00      	nop
 80007fa:	e7fd      	b.n	80007f8 <INA3221_Init+0x2e>

	INA3221_write_reg(INA3221_REG_CONFIG, 0x7D27);   //CH1 CH2 CH3 Enabled, 512 AVG, 1.1ms conv time, continous mode
 80007fc:	f647 5127 	movw	r1, #32039	@ 0x7d27
 8000800:	2000      	movs	r0, #0
 8000802:	f000 f865 	bl	80008d0 <INA3221_write_reg>
}
 8000806:	bf00      	nop
 8000808:	3708      	adds	r7, #8
 800080a:	46bd      	mov	sp, r7
 800080c:	bd80      	pop	{r7, pc}

0800080e <INA3221_Read_Measure>:

void INA3221_Read_Measure(supply_bus_t *measure)
{
 800080e:	b580      	push	{r7, lr}
 8000810:	b082      	sub	sp, #8
 8000812:	af00      	add	r7, sp, #0
 8000814:	6078      	str	r0, [r7, #4]
	INA3221_read_reg(INA3221_REG_BUSVOLTAGE_1, (uint16_t *)&(measure->v1));
 8000816:	687b      	ldr	r3, [r7, #4]
 8000818:	4619      	mov	r1, r3
 800081a:	2002      	movs	r0, #2
 800081c:	f000 f822 	bl	8000864 <INA3221_read_reg>
	INA3221_read_reg(INA3221_REG_BUSVOLTAGE_2, (uint16_t *)&(measure->v2));
 8000820:	687b      	ldr	r3, [r7, #4]
 8000822:	3302      	adds	r3, #2
 8000824:	4619      	mov	r1, r3
 8000826:	2004      	movs	r0, #4
 8000828:	f000 f81c 	bl	8000864 <INA3221_read_reg>
	INA3221_read_reg(INA3221_REG_BUSVOLTAGE_3, (uint16_t *)&(measure->v3));
 800082c:	687b      	ldr	r3, [r7, #4]
 800082e:	3304      	adds	r3, #4
 8000830:	4619      	mov	r1, r3
 8000832:	2006      	movs	r0, #6
 8000834:	f000 f816 	bl	8000864 <INA3221_read_reg>
	INA3221_read_reg(INA3221_REG_SHUNTVOLTAGE_1, (uint16_t *)&(measure->i1));
 8000838:	687b      	ldr	r3, [r7, #4]
 800083a:	3306      	adds	r3, #6
 800083c:	4619      	mov	r1, r3
 800083e:	2001      	movs	r0, #1
 8000840:	f000 f810 	bl	8000864 <INA3221_read_reg>
	INA3221_read_reg(INA3221_REG_SHUNTVOLTAGE_2, (uint16_t *)&(measure->i2));
 8000844:	687b      	ldr	r3, [r7, #4]
 8000846:	3308      	adds	r3, #8
 8000848:	4619      	mov	r1, r3
 800084a:	2003      	movs	r0, #3
 800084c:	f000 f80a 	bl	8000864 <INA3221_read_reg>
	INA3221_read_reg(INA3221_REG_SHUNTVOLTAGE_3, (uint16_t *)&(measure->i3));
 8000850:	687b      	ldr	r3, [r7, #4]
 8000852:	330a      	adds	r3, #10
 8000854:	4619      	mov	r1, r3
 8000856:	2005      	movs	r0, #5
 8000858:	f000 f804 	bl	8000864 <INA3221_read_reg>
}
 800085c:	bf00      	nop
 800085e:	3708      	adds	r7, #8
 8000860:	46bd      	mov	sp, r7
 8000862:	bd80      	pop	{r7, pc}

08000864 <INA3221_read_reg>:


int INA3221_read_reg(uint8_t reg, uint16_t *rdata)
{
 8000864:	b580      	push	{r7, lr}
 8000866:	b086      	sub	sp, #24
 8000868:	af02      	add	r7, sp, #8
 800086a:	4603      	mov	r3, r0
 800086c:	6039      	str	r1, [r7, #0]
 800086e:	71fb      	strb	r3, [r7, #7]
	int result = -1;
 8000870:	f04f 33ff 	mov.w	r3, #4294967295
 8000874:	60fb      	str	r3, [r7, #12]
	uint8_t data[2] = {0};
 8000876:	2300      	movs	r3, #0
 8000878:	813b      	strh	r3, [r7, #8]

	if(HAL_I2C_Master_Transmit(I2C, INA3221_ADDR_0 << 1, &reg, 1, 100) == HAL_OK)
 800087a:	1dfa      	adds	r2, r7, #7
 800087c:	2364      	movs	r3, #100	@ 0x64
 800087e:	9300      	str	r3, [sp, #0]
 8000880:	2301      	movs	r3, #1
 8000882:	2180      	movs	r1, #128	@ 0x80
 8000884:	4811      	ldr	r0, [pc, #68]	@ (80008cc <INA3221_read_reg+0x68>)
 8000886:	f009 fa81 	bl	8009d8c <HAL_I2C_Master_Transmit>
 800088a:	4603      	mov	r3, r0
 800088c:	2b00      	cmp	r3, #0
 800088e:	d118      	bne.n	80008c2 <INA3221_read_reg+0x5e>
	{

		if(HAL_I2C_Master_Receive(I2C,  INA3221_ADDR_0 << 1, data, 2, 100) == HAL_OK)
 8000890:	f107 0208 	add.w	r2, r7, #8
 8000894:	2364      	movs	r3, #100	@ 0x64
 8000896:	9300      	str	r3, [sp, #0]
 8000898:	2302      	movs	r3, #2
 800089a:	2180      	movs	r1, #128	@ 0x80
 800089c:	480b      	ldr	r0, [pc, #44]	@ (80008cc <INA3221_read_reg+0x68>)
 800089e:	f009 fb8d 	bl	8009fbc <HAL_I2C_Master_Receive>
 80008a2:	4603      	mov	r3, r0
 80008a4:	2b00      	cmp	r3, #0
 80008a6:	d10c      	bne.n	80008c2 <INA3221_read_reg+0x5e>
		{
			result = 0;
 80008a8:	2300      	movs	r3, #0
 80008aa:	60fb      	str	r3, [r7, #12]
			*rdata = (data[0] << 8) | data[1];
 80008ac:	7a3b      	ldrb	r3, [r7, #8]
 80008ae:	b21b      	sxth	r3, r3
 80008b0:	021b      	lsls	r3, r3, #8
 80008b2:	b21a      	sxth	r2, r3
 80008b4:	7a7b      	ldrb	r3, [r7, #9]
 80008b6:	b21b      	sxth	r3, r3
 80008b8:	4313      	orrs	r3, r2
 80008ba:	b21b      	sxth	r3, r3
 80008bc:	b29a      	uxth	r2, r3
 80008be:	683b      	ldr	r3, [r7, #0]
 80008c0:	801a      	strh	r2, [r3, #0]
		}
	}

	return result;
 80008c2:	68fb      	ldr	r3, [r7, #12]
}
 80008c4:	4618      	mov	r0, r3
 80008c6:	3710      	adds	r7, #16
 80008c8:	46bd      	mov	sp, r7
 80008ca:	bd80      	pop	{r7, pc}
 80008cc:	20000160 	.word	0x20000160

080008d0 <INA3221_write_reg>:


int INA3221_write_reg(uint8_t reg, uint16_t wdata)
{
 80008d0:	b580      	push	{r7, lr}
 80008d2:	b086      	sub	sp, #24
 80008d4:	af02      	add	r7, sp, #8
 80008d6:	4603      	mov	r3, r0
 80008d8:	460a      	mov	r2, r1
 80008da:	71fb      	strb	r3, [r7, #7]
 80008dc:	4613      	mov	r3, r2
 80008de:	80bb      	strh	r3, [r7, #4]
    int result = -1;
 80008e0:	f04f 33ff 	mov.w	r3, #4294967295
 80008e4:	60fb      	str	r3, [r7, #12]
    uint8_t data[3];
    
    data[0] = reg;                    
 80008e6:	79fb      	ldrb	r3, [r7, #7]
 80008e8:	723b      	strb	r3, [r7, #8]
    data[1] = (wdata >> 8);          
 80008ea:	88bb      	ldrh	r3, [r7, #4]
 80008ec:	0a1b      	lsrs	r3, r3, #8
 80008ee:	b29b      	uxth	r3, r3
 80008f0:	b2db      	uxtb	r3, r3
 80008f2:	727b      	strb	r3, [r7, #9]
    data[2] = (wdata & 0xFF);        
 80008f4:	88bb      	ldrh	r3, [r7, #4]
 80008f6:	b2db      	uxtb	r3, r3
 80008f8:	72bb      	strb	r3, [r7, #10]

    if(HAL_I2C_Master_Transmit(I2C, INA3221_ADDR_0 << 1, data, 3, 100) == HAL_OK)
 80008fa:	f107 0208 	add.w	r2, r7, #8
 80008fe:	2364      	movs	r3, #100	@ 0x64
 8000900:	9300      	str	r3, [sp, #0]
 8000902:	2303      	movs	r3, #3
 8000904:	2180      	movs	r1, #128	@ 0x80
 8000906:	4806      	ldr	r0, [pc, #24]	@ (8000920 <INA3221_write_reg+0x50>)
 8000908:	f009 fa40 	bl	8009d8c <HAL_I2C_Master_Transmit>
 800090c:	4603      	mov	r3, r0
 800090e:	2b00      	cmp	r3, #0
 8000910:	d101      	bne.n	8000916 <INA3221_write_reg+0x46>
    {
        result = 0;
 8000912:	2300      	movs	r3, #0
 8000914:	60fb      	str	r3, [r7, #12]
    }
    
    return result;
 8000916:	68fb      	ldr	r3, [r7, #12]
}
 8000918:	4618      	mov	r0, r3
 800091a:	3710      	adds	r7, #16
 800091c:	46bd      	mov	sp, r7
 800091e:	bd80      	pop	{r7, pc}
 8000920:	20000160 	.word	0x20000160

08000924 <SIM_Init>:
#include <stdlib.h>
#include <SIM7000.h>

/*------INIZIALIZZAZIONE DEL MODULO LTE------*/
void SIM_Init(void)
{
 8000924:	b580      	push	{r7, lr}
 8000926:	f5ad 7d04 	sub.w	sp, sp, #528	@ 0x210
 800092a:	af00      	add	r7, sp, #0
	char command[256];
	char response[256];
	sprintf(sys.apn, "a");
 800092c:	49ac      	ldr	r1, [pc, #688]	@ (8000be0 <SIM_Init+0x2bc>)
 800092e:	48ad      	ldr	r0, [pc, #692]	@ (8000be4 <SIM_Init+0x2c0>)
 8000930:	f010 f978 	bl	8010c24 <siprintf>
	sprintf(sys.MQTT.clientID, "a");
 8000934:	49aa      	ldr	r1, [pc, #680]	@ (8000be0 <SIM_Init+0x2bc>)
 8000936:	48ac      	ldr	r0, [pc, #688]	@ (8000be8 <SIM_Init+0x2c4>)
 8000938:	f010 f974 	bl	8010c24 <siprintf>
	sprintf(sys.MQTT.server_name, "a");
 800093c:	49a8      	ldr	r1, [pc, #672]	@ (8000be0 <SIM_Init+0x2bc>)
 800093e:	48ab      	ldr	r0, [pc, #684]	@ (8000bec <SIM_Init+0x2c8>)
 8000940:	f010 f970 	bl	8010c24 <siprintf>
	sprintf(sys.MQTT.port, "a");
 8000944:	49a6      	ldr	r1, [pc, #664]	@ (8000be0 <SIM_Init+0x2bc>)
 8000946:	48aa      	ldr	r0, [pc, #680]	@ (8000bf0 <SIM_Init+0x2cc>)
 8000948:	f010 f96c 	bl	8010c24 <siprintf>
	sprintf(sys.MQTT.username, "a");
 800094c:	49a4      	ldr	r1, [pc, #656]	@ (8000be0 <SIM_Init+0x2bc>)
 800094e:	48a9      	ldr	r0, [pc, #676]	@ (8000bf4 <SIM_Init+0x2d0>)
 8000950:	f010 f968 	bl	8010c24 <siprintf>
	sprintf(sys.MQTT.password, "a");
 8000954:	49a2      	ldr	r1, [pc, #648]	@ (8000be0 <SIM_Init+0x2bc>)
 8000956:	48a8      	ldr	r0, [pc, #672]	@ (8000bf8 <SIM_Init+0x2d4>)
 8000958:	f010 f964 	bl	8010c24 <siprintf>
	sprintf(sys.MQTT.Data_Topic, "a");
 800095c:	49a0      	ldr	r1, [pc, #640]	@ (8000be0 <SIM_Init+0x2bc>)
 800095e:	48a7      	ldr	r0, [pc, #668]	@ (8000bfc <SIM_Init+0x2d8>)
 8000960:	f010 f960 	bl	8010c24 <siprintf>
	sprintf(sys.MQTT.Command_Topic, "a");
 8000964:	499e      	ldr	r1, [pc, #632]	@ (8000be0 <SIM_Init+0x2bc>)
 8000966:	48a6      	ldr	r0, [pc, #664]	@ (8000c00 <SIM_Init+0x2dc>)
 8000968:	f010 f95c 	bl	8010c24 <siprintf>

	SIM_Power_On();
 800096c:	f000 f97e 	bl	8000c6c <SIM_Power_On>
	HAL_Delay(5000);
 8000970:	f241 3088 	movw	r0, #5000	@ 0x1388
 8000974:	f006 ffb4 	bl	80078e0 <HAL_Delay>

	SIM_Send_Command("AT+IPR=921600\r");                                                          //baudrate a 921600
 8000978:	48a2      	ldr	r0, [pc, #648]	@ (8000c04 <SIM_Init+0x2e0>)
 800097a:	f000 f98d 	bl	8000c98 <SIM_Send_Command>
	huart1.Init.BaudRate = 921600;
 800097e:	4ba2      	ldr	r3, [pc, #648]	@ (8000c08 <SIM_Init+0x2e4>)
 8000980:	f44f 2261 	mov.w	r2, #921600	@ 0xe1000
 8000984:	605a      	str	r2, [r3, #4]
	HAL_UART_Init(LTE_UART);
 8000986:	48a0      	ldr	r0, [pc, #640]	@ (8000c08 <SIM_Init+0x2e4>)
 8000988:	f00e ff5c 	bl	800f844 <HAL_UART_Init>
	SIM_Send_Command("AT+IFC=0,0\r");                                                             //no flow control
 800098c:	489f      	ldr	r0, [pc, #636]	@ (8000c0c <SIM_Init+0x2e8>)
 800098e:	f000 f983 	bl	8000c98 <SIM_Send_Command>

	SIM_Send_Command("AT+CFUN=1\r");                                                              //full functionality
 8000992:	489f      	ldr	r0, [pc, #636]	@ (8000c10 <SIM_Init+0x2ec>)
 8000994:	f000 f980 	bl	8000c98 <SIM_Send_Command>

	SIM_Send_Command("AT+CNMP=38\r");                                                             //modalità solo LTE o NB-IoT
 8000998:	489e      	ldr	r0, [pc, #632]	@ (8000c14 <SIM_Init+0x2f0>)
 800099a:	f000 f97d 	bl	8000c98 <SIM_Send_Command>

	SIM_Send_Command("AT+CMNB=2\r");                                                              //NB-IoT
 800099e:	489e      	ldr	r0, [pc, #632]	@ (8000c18 <SIM_Init+0x2f4>)
 80009a0:	f000 f97a 	bl	8000c98 <SIM_Send_Command>

	SIM_Send_Command("AT+NBSC=1\r");                                                              //abilitazione scrambling feature DA VEDERE SE L'OPERATORE LA RICHIEDE
 80009a4:	489d      	ldr	r0, [pc, #628]	@ (8000c1c <SIM_Init+0x2f8>)
 80009a6:	f000 f977 	bl	8000c98 <SIM_Send_Command>

	SIM_Send_Command("AT+CEREG?\r");                                                              //controllo registrazione alla rete
 80009aa:	489d      	ldr	r0, [pc, #628]	@ (8000c20 <SIM_Init+0x2fc>)
 80009ac:	f000 f974 	bl	8000c98 <SIM_Send_Command>
	SIM_Receive_Response(response);
 80009b0:	f107 030c 	add.w	r3, r7, #12
 80009b4:	4618      	mov	r0, r3
 80009b6:	f000 f985 	bl	8000cc4 <SIM_Receive_Response>
	int stat = 0;
 80009ba:	2300      	movs	r3, #0
 80009bc:	f8c7 320c 	str.w	r3, [r7, #524]	@ 0x20c
	int n, stat_value;
	if(strstr(response, "+CEREG: ") != NULL)
 80009c0:	f107 030c 	add.w	r3, r7, #12
 80009c4:	4997      	ldr	r1, [pc, #604]	@ (8000c24 <SIM_Init+0x300>)
 80009c6:	4618      	mov	r0, r3
 80009c8:	f010 f9b3 	bl	8010d32 <strstr>
 80009cc:	4603      	mov	r3, r0
 80009ce:	2b00      	cmp	r3, #0
 80009d0:	d03a      	beq.n	8000a48 <SIM_Init+0x124>
	{
		while(stat != 1)
 80009d2:	e035      	b.n	8000a40 <SIM_Init+0x11c>
		{
			if(sscanf(response, "+CEREG: %d,%d", &n, &stat_value) >= 2) 
 80009d4:	1d3b      	adds	r3, r7, #4
 80009d6:	f107 0208 	add.w	r2, r7, #8
 80009da:	f107 000c 	add.w	r0, r7, #12
 80009de:	4992      	ldr	r1, [pc, #584]	@ (8000c28 <SIM_Init+0x304>)
 80009e0:	f010 f942 	bl	8010c68 <siscanf>
 80009e4:	4603      	mov	r3, r0
 80009e6:	2b01      	cmp	r3, #1
 80009e8:	dd1e      	ble.n	8000a28 <SIM_Init+0x104>
			{
				if(stat_value == 1 || stat_value == 5)
 80009ea:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 80009ee:	f5a3 7303 	sub.w	r3, r3, #524	@ 0x20c
 80009f2:	681b      	ldr	r3, [r3, #0]
 80009f4:	2b01      	cmp	r3, #1
 80009f6:	d006      	beq.n	8000a06 <SIM_Init+0xe2>
 80009f8:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 80009fc:	f5a3 7303 	sub.w	r3, r3, #524	@ 0x20c
 8000a00:	681b      	ldr	r3, [r3, #0]
 8000a02:	2b05      	cmp	r3, #5
 8000a04:	d103      	bne.n	8000a0e <SIM_Init+0xea>
			    {
					 stat = 1;
 8000a06:	2301      	movs	r3, #1
 8000a08:	f8c7 320c 	str.w	r3, [r7, #524]	@ 0x20c
 8000a0c:	e018      	b.n	8000a40 <SIM_Init+0x11c>
				}
				 else
				{
					SIM_Send_Command("AT+CEREG?\r");
 8000a0e:	4884      	ldr	r0, [pc, #528]	@ (8000c20 <SIM_Init+0x2fc>)
 8000a10:	f000 f942 	bl	8000c98 <SIM_Send_Command>
					SIM_Receive_Response(response);
 8000a14:	f107 030c 	add.w	r3, r7, #12
 8000a18:	4618      	mov	r0, r3
 8000a1a:	f000 f953 	bl	8000cc4 <SIM_Receive_Response>
					HAL_Delay(1000);
 8000a1e:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000a22:	f006 ff5d 	bl	80078e0 <HAL_Delay>
 8000a26:	e00b      	b.n	8000a40 <SIM_Init+0x11c>
				}
			}
			else  
			{
				SIM_Send_Command("AT+CEREG?\r");
 8000a28:	487d      	ldr	r0, [pc, #500]	@ (8000c20 <SIM_Init+0x2fc>)
 8000a2a:	f000 f935 	bl	8000c98 <SIM_Send_Command>
				SIM_Receive_Response(response);
 8000a2e:	f107 030c 	add.w	r3, r7, #12
 8000a32:	4618      	mov	r0, r3
 8000a34:	f000 f946 	bl	8000cc4 <SIM_Receive_Response>
				HAL_Delay(1000);
 8000a38:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000a3c:	f006 ff50 	bl	80078e0 <HAL_Delay>
		while(stat != 1)
 8000a40:	f8d7 320c 	ldr.w	r3, [r7, #524]	@ 0x20c
 8000a44:	2b01      	cmp	r3, #1
 8000a46:	d1c5      	bne.n	80009d4 <SIM_Init+0xb0>
			}
		}

	}

	sprintf(command, "AT+CGDCONT=1,\"IP\",\"%s\"\r", sys.apn);                                    //configurazione APN
 8000a48:	f507 7386 	add.w	r3, r7, #268	@ 0x10c
 8000a4c:	4a65      	ldr	r2, [pc, #404]	@ (8000be4 <SIM_Init+0x2c0>)
 8000a4e:	4977      	ldr	r1, [pc, #476]	@ (8000c2c <SIM_Init+0x308>)
 8000a50:	4618      	mov	r0, r3
 8000a52:	f010 f8e7 	bl	8010c24 <siprintf>
	SIM_Send_Command(command);
 8000a56:	f507 7386 	add.w	r3, r7, #268	@ 0x10c
 8000a5a:	4618      	mov	r0, r3
 8000a5c:	f000 f91c 	bl	8000c98 <SIM_Send_Command>

	SIM_Send_Command("AT+CNACT=1\r");                                                             //attivazione della rete
 8000a60:	4873      	ldr	r0, [pc, #460]	@ (8000c30 <SIM_Init+0x30c>)
 8000a62:	f000 f919 	bl	8000c98 <SIM_Send_Command>
	SIM_Receive_Response(response);
 8000a66:	f107 030c 	add.w	r3, r7, #12
 8000a6a:	4618      	mov	r0, r3
 8000a6c:	f000 f92a 	bl	8000cc4 <SIM_Receive_Response>
	if(strstr(response, "+APP PDP: ACTIVE") == NULL)
 8000a70:	f107 030c 	add.w	r3, r7, #12
 8000a74:	496f      	ldr	r1, [pc, #444]	@ (8000c34 <SIM_Init+0x310>)
 8000a76:	4618      	mov	r0, r3
 8000a78:	f010 f95b 	bl	8010d32 <strstr>
 8000a7c:	4603      	mov	r3, r0
 8000a7e:	2b00      	cmp	r3, #0
 8000a80:	d115      	bne.n	8000aae <SIM_Init+0x18a>
	{
		while(strstr(response, "+APP PDP: ACTIVE") == NULL)
 8000a82:	e00b      	b.n	8000a9c <SIM_Init+0x178>
		{
			SIM_Send_Command("AT+CNACT=1\r");
 8000a84:	486a      	ldr	r0, [pc, #424]	@ (8000c30 <SIM_Init+0x30c>)
 8000a86:	f000 f907 	bl	8000c98 <SIM_Send_Command>
			SIM_Receive_Response(response);
 8000a8a:	f107 030c 	add.w	r3, r7, #12
 8000a8e:	4618      	mov	r0, r3
 8000a90:	f000 f918 	bl	8000cc4 <SIM_Receive_Response>
			HAL_Delay(1000);
 8000a94:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000a98:	f006 ff22 	bl	80078e0 <HAL_Delay>
		while(strstr(response, "+APP PDP: ACTIVE") == NULL)
 8000a9c:	f107 030c 	add.w	r3, r7, #12
 8000aa0:	4964      	ldr	r1, [pc, #400]	@ (8000c34 <SIM_Init+0x310>)
 8000aa2:	4618      	mov	r0, r3
 8000aa4:	f010 f945 	bl	8010d32 <strstr>
 8000aa8:	4603      	mov	r3, r0
 8000aaa:	2b00      	cmp	r3, #0
 8000aac:	d0ea      	beq.n	8000a84 <SIM_Init+0x160>
		}
	}

	SIM_Send_Command("AT+CNACT?\r");                                                              //verifica indirizzo IP
 8000aae:	4862      	ldr	r0, [pc, #392]	@ (8000c38 <SIM_Init+0x314>)
 8000ab0:	f000 f8f2 	bl	8000c98 <SIM_Send_Command>
	SIM_Receive_Response(response);
 8000ab4:	f107 030c 	add.w	r3, r7, #12
 8000ab8:	4618      	mov	r0, r3
 8000aba:	f000 f903 	bl	8000cc4 <SIM_Receive_Response>
	while(!SIM_Check_IP(response))
 8000abe:	e00b      	b.n	8000ad8 <SIM_Init+0x1b4>
	{
		SIM_Send_Command("AT+CNACT?\r");
 8000ac0:	485d      	ldr	r0, [pc, #372]	@ (8000c38 <SIM_Init+0x314>)
 8000ac2:	f000 f8e9 	bl	8000c98 <SIM_Send_Command>
		SIM_Receive_Response(response);
 8000ac6:	f107 030c 	add.w	r3, r7, #12
 8000aca:	4618      	mov	r0, r3
 8000acc:	f000 f8fa 	bl	8000cc4 <SIM_Receive_Response>
		HAL_Delay(1000);
 8000ad0:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000ad4:	f006 ff04 	bl	80078e0 <HAL_Delay>
	while(!SIM_Check_IP(response))
 8000ad8:	f107 030c 	add.w	r3, r7, #12
 8000adc:	4618      	mov	r0, r3
 8000ade:	f000 f909 	bl	8000cf4 <SIM_Check_IP>
 8000ae2:	4603      	mov	r3, r0
 8000ae4:	2b00      	cmp	r3, #0
 8000ae6:	d0eb      	beq.n	8000ac0 <SIM_Init+0x19c>
	}

	sprintf(command, "AT+SMCONF=\"URL\",\"%s\",%s\r", sys.MQTT.server_name, sys.MQTT.port);       //configurazione MQTT
 8000ae8:	f507 7086 	add.w	r0, r7, #268	@ 0x10c
 8000aec:	4b40      	ldr	r3, [pc, #256]	@ (8000bf0 <SIM_Init+0x2cc>)
 8000aee:	4a3f      	ldr	r2, [pc, #252]	@ (8000bec <SIM_Init+0x2c8>)
 8000af0:	4952      	ldr	r1, [pc, #328]	@ (8000c3c <SIM_Init+0x318>)
 8000af2:	f010 f897 	bl	8010c24 <siprintf>
	SIM_Send_Command(command);
 8000af6:	f507 7386 	add.w	r3, r7, #268	@ 0x10c
 8000afa:	4618      	mov	r0, r3
 8000afc:	f000 f8cc 	bl	8000c98 <SIM_Send_Command>

	sprintf(command, "AT+SMCONF=\"CLIENTID\",\"%s\"\r", sys.MQTT.clientID);
 8000b00:	f507 7386 	add.w	r3, r7, #268	@ 0x10c
 8000b04:	4a38      	ldr	r2, [pc, #224]	@ (8000be8 <SIM_Init+0x2c4>)
 8000b06:	494e      	ldr	r1, [pc, #312]	@ (8000c40 <SIM_Init+0x31c>)
 8000b08:	4618      	mov	r0, r3
 8000b0a:	f010 f88b 	bl	8010c24 <siprintf>
	SIM_Send_Command(command);
 8000b0e:	f507 7386 	add.w	r3, r7, #268	@ 0x10c
 8000b12:	4618      	mov	r0, r3
 8000b14:	f000 f8c0 	bl	8000c98 <SIM_Send_Command>

	SIM_Send_Command("AT+SMCONF=\"KEEPTIME\",60\r");
 8000b18:	484a      	ldr	r0, [pc, #296]	@ (8000c44 <SIM_Init+0x320>)
 8000b1a:	f000 f8bd 	bl	8000c98 <SIM_Send_Command>

	sprintf(command, "AT+SMCONF=\"USERNAME\",\"%s\"\r", sys.MQTT.username);
 8000b1e:	f507 7386 	add.w	r3, r7, #268	@ 0x10c
 8000b22:	4a34      	ldr	r2, [pc, #208]	@ (8000bf4 <SIM_Init+0x2d0>)
 8000b24:	4948      	ldr	r1, [pc, #288]	@ (8000c48 <SIM_Init+0x324>)
 8000b26:	4618      	mov	r0, r3
 8000b28:	f010 f87c 	bl	8010c24 <siprintf>
	SIM_Send_Command(command);
 8000b2c:	f507 7386 	add.w	r3, r7, #268	@ 0x10c
 8000b30:	4618      	mov	r0, r3
 8000b32:	f000 f8b1 	bl	8000c98 <SIM_Send_Command>

	sprintf(command, "AT+SMCONF=\"PASSWORD\",\"%s\"\r", sys.MQTT.password);
 8000b36:	f507 7386 	add.w	r3, r7, #268	@ 0x10c
 8000b3a:	4a2f      	ldr	r2, [pc, #188]	@ (8000bf8 <SIM_Init+0x2d4>)
 8000b3c:	4943      	ldr	r1, [pc, #268]	@ (8000c4c <SIM_Init+0x328>)
 8000b3e:	4618      	mov	r0, r3
 8000b40:	f010 f870 	bl	8010c24 <siprintf>
	SIM_Send_Command(command);
 8000b44:	f507 7386 	add.w	r3, r7, #268	@ 0x10c
 8000b48:	4618      	mov	r0, r3
 8000b4a:	f000 f8a5 	bl	8000c98 <SIM_Send_Command>

	SIM_Send_Command("AT+SMCONF=\"QOS\",1\r");
 8000b4e:	4840      	ldr	r0, [pc, #256]	@ (8000c50 <SIM_Init+0x32c>)
 8000b50:	f000 f8a2 	bl	8000c98 <SIM_Send_Command>

	SIM_Send_Command("AT+SMCONF=\"RETAIN\",0\r");
 8000b54:	483f      	ldr	r0, [pc, #252]	@ (8000c54 <SIM_Init+0x330>)
 8000b56:	f000 f89f 	bl	8000c98 <SIM_Send_Command>

	sprintf(command, "AT+SMCONF=\"TOPIC\",\"%s\"\r", sys.MQTT.Data_Topic);
 8000b5a:	f507 7386 	add.w	r3, r7, #268	@ 0x10c
 8000b5e:	4a27      	ldr	r2, [pc, #156]	@ (8000bfc <SIM_Init+0x2d8>)
 8000b60:	493d      	ldr	r1, [pc, #244]	@ (8000c58 <SIM_Init+0x334>)
 8000b62:	4618      	mov	r0, r3
 8000b64:	f010 f85e 	bl	8010c24 <siprintf>
	SIM_Send_Command(command);
 8000b68:	f507 7386 	add.w	r3, r7, #268	@ 0x10c
 8000b6c:	4618      	mov	r0, r3
 8000b6e:	f000 f893 	bl	8000c98 <SIM_Send_Command>

	SIM_Send_Command("AT+SMCONN\r");                                                              //connessione al server MQTT
 8000b72:	483a      	ldr	r0, [pc, #232]	@ (8000c5c <SIM_Init+0x338>)
 8000b74:	f000 f890 	bl	8000c98 <SIM_Send_Command>

	SIM_Send_Command("AT+SMSTATE?\r");                                                            //verifica connessione al server MQTT
 8000b78:	4839      	ldr	r0, [pc, #228]	@ (8000c60 <SIM_Init+0x33c>)
 8000b7a:	f000 f88d 	bl	8000c98 <SIM_Send_Command>
	SIM_Receive_Response(response);
 8000b7e:	f107 030c 	add.w	r3, r7, #12
 8000b82:	4618      	mov	r0, r3
 8000b84:	f000 f89e 	bl	8000cc4 <SIM_Receive_Response>
	while(!SIM_Check_MQTT_State(response))
 8000b88:	e00b      	b.n	8000ba2 <SIM_Init+0x27e>
	{
		SIM_Send_Command("AT+SMSTATE?\r");
 8000b8a:	4835      	ldr	r0, [pc, #212]	@ (8000c60 <SIM_Init+0x33c>)
 8000b8c:	f000 f884 	bl	8000c98 <SIM_Send_Command>
		SIM_Receive_Response(response);
 8000b90:	f107 030c 	add.w	r3, r7, #12
 8000b94:	4618      	mov	r0, r3
 8000b96:	f000 f895 	bl	8000cc4 <SIM_Receive_Response>
		HAL_Delay(1000);
 8000b9a:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000b9e:	f006 fe9f 	bl	80078e0 <HAL_Delay>
	while(!SIM_Check_MQTT_State(response))
 8000ba2:	f107 030c 	add.w	r3, r7, #12
 8000ba6:	4618      	mov	r0, r3
 8000ba8:	f000 f8ce 	bl	8000d48 <SIM_Check_MQTT_State>
 8000bac:	4603      	mov	r3, r0
 8000bae:	2b00      	cmp	r3, #0
 8000bb0:	d0eb      	beq.n	8000b8a <SIM_Init+0x266>
	}

	sprintf(command, "AT+SMSUB=\"%s\",1\r", sys.MQTT.Command_Topic);                              //iscrizione al topic di richiesta dati dal server
 8000bb2:	f507 7386 	add.w	r3, r7, #268	@ 0x10c
 8000bb6:	4a12      	ldr	r2, [pc, #72]	@ (8000c00 <SIM_Init+0x2dc>)
 8000bb8:	492a      	ldr	r1, [pc, #168]	@ (8000c64 <SIM_Init+0x340>)
 8000bba:	4618      	mov	r0, r3
 8000bbc:	f010 f832 	bl	8010c24 <siprintf>
	SIM_Send_Command(command);
 8000bc0:	f507 7386 	add.w	r3, r7, #268	@ 0x10c
 8000bc4:	4618      	mov	r0, r3
 8000bc6:	f000 f867 	bl	8000c98 <SIM_Send_Command>

	HAL_UARTEx_ReceiveToIdle_DMA(LTE_UART, sim_rx_buffer, SIM_RXBUFFER_SIZE);
 8000bca:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000bce:	4926      	ldr	r1, [pc, #152]	@ (8000c68 <SIM_Init+0x344>)
 8000bd0:	480d      	ldr	r0, [pc, #52]	@ (8000c08 <SIM_Init+0x2e4>)
 8000bd2:	f00f ffd2 	bl	8010b7a <HAL_UARTEx_ReceiveToIdle_DMA>

}
 8000bd6:	bf00      	nop
 8000bd8:	f507 7704 	add.w	r7, r7, #528	@ 0x210
 8000bdc:	46bd      	mov	sp, r7
 8000bde:	bd80      	pop	{r7, pc}
 8000be0:	08011f60 	.word	0x08011f60
 8000be4:	20003608 	.word	0x20003608
 8000be8:	200037fc 	.word	0x200037fc
 8000bec:	2000366c 	.word	0x2000366c
 8000bf0:	200036d0 	.word	0x200036d0
 8000bf4:	20003734 	.word	0x20003734
 8000bf8:	20003798 	.word	0x20003798
 8000bfc:	20003860 	.word	0x20003860
 8000c00:	200038c4 	.word	0x200038c4
 8000c04:	08011f64 	.word	0x08011f64
 8000c08:	2000049c 	.word	0x2000049c
 8000c0c:	08011f74 	.word	0x08011f74
 8000c10:	08011f80 	.word	0x08011f80
 8000c14:	08011f8c 	.word	0x08011f8c
 8000c18:	08011f98 	.word	0x08011f98
 8000c1c:	08011fa4 	.word	0x08011fa4
 8000c20:	08011fb0 	.word	0x08011fb0
 8000c24:	08011fbc 	.word	0x08011fbc
 8000c28:	08011fc8 	.word	0x08011fc8
 8000c2c:	08011fd8 	.word	0x08011fd8
 8000c30:	08011ff0 	.word	0x08011ff0
 8000c34:	08011ffc 	.word	0x08011ffc
 8000c38:	08012010 	.word	0x08012010
 8000c3c:	0801201c 	.word	0x0801201c
 8000c40:	08012038 	.word	0x08012038
 8000c44:	08012054 	.word	0x08012054
 8000c48:	08012070 	.word	0x08012070
 8000c4c:	0801208c 	.word	0x0801208c
 8000c50:	080120a8 	.word	0x080120a8
 8000c54:	080120bc 	.word	0x080120bc
 8000c58:	080120d4 	.word	0x080120d4
 8000c5c:	080120ec 	.word	0x080120ec
 8000c60:	080120f8 	.word	0x080120f8
 8000c64:	08012108 	.word	0x08012108
 8000c68:	20006fa0 	.word	0x20006fa0

08000c6c <SIM_Power_On>:

/*------ACCENSIONE DEL MODULO LTE------*/
void SIM_Power_On(void)
{
 8000c6c:	b580      	push	{r7, lr}
 8000c6e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LTE_POWER_ON_GPIO_Port, LTE_POWER_ON_Pin, GPIO_PIN_SET);
 8000c70:	2201      	movs	r2, #1
 8000c72:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000c76:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000c7a:	f008 ffd3 	bl	8009c24 <HAL_GPIO_WritePin>
	HAL_Delay(1000);
 8000c7e:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000c82:	f006 fe2d 	bl	80078e0 <HAL_Delay>
	HAL_GPIO_WritePin(LTE_POWER_ON_GPIO_Port, LTE_POWER_ON_Pin, GPIO_PIN_RESET);
 8000c86:	2200      	movs	r2, #0
 8000c88:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000c8c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000c90:	f008 ffc8 	bl	8009c24 <HAL_GPIO_WritePin>
}
 8000c94:	bf00      	nop
 8000c96:	bd80      	pop	{r7, pc}

08000c98 <SIM_Send_Command>:
	HAL_GPIO_WritePin(LTE_RESET_GPIO_Port, LTE_RESET_Pin, GPIO_PIN_RESET);
}

/*------INVIO COMANDO AL MODULO LTE------*/
void SIM_Send_Command(char* command)
{
 8000c98:	b580      	push	{r7, lr}
 8000c9a:	b084      	sub	sp, #16
 8000c9c:	af00      	add	r7, sp, #0
 8000c9e:	6078      	str	r0, [r7, #4]
	uint16_t len = (uint16_t)strlen(command);
 8000ca0:	6878      	ldr	r0, [r7, #4]
 8000ca2:	f7ff fa95 	bl	80001d0 <strlen>
 8000ca6:	4603      	mov	r3, r0
 8000ca8:	81fb      	strh	r3, [r7, #14]

	HAL_UART_Transmit(LTE_UART, (uint8_t*)command, len, 100);
 8000caa:	89fa      	ldrh	r2, [r7, #14]
 8000cac:	2364      	movs	r3, #100	@ 0x64
 8000cae:	6879      	ldr	r1, [r7, #4]
 8000cb0:	4803      	ldr	r0, [pc, #12]	@ (8000cc0 <SIM_Send_Command+0x28>)
 8000cb2:	f00e fe6b 	bl	800f98c <HAL_UART_Transmit>
}
 8000cb6:	bf00      	nop
 8000cb8:	3710      	adds	r7, #16
 8000cba:	46bd      	mov	sp, r7
 8000cbc:	bd80      	pop	{r7, pc}
 8000cbe:	bf00      	nop
 8000cc0:	2000049c 	.word	0x2000049c

08000cc4 <SIM_Receive_Response>:

/*------RICEZIONE RISPOSTA DAL MODULO LTE------*/
void SIM_Receive_Response(char* response)
{
 8000cc4:	b580      	push	{r7, lr}
 8000cc6:	b086      	sub	sp, #24
 8000cc8:	af02      	add	r7, sp, #8
 8000cca:	6078      	str	r0, [r7, #4]
	uint16_t max_size = 256;
 8000ccc:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000cd0:	81fb      	strh	r3, [r7, #14]
	uint16_t RxLen = 0;
 8000cd2:	2300      	movs	r3, #0
 8000cd4:	81bb      	strh	r3, [r7, #12]

	HAL_UARTEx_ReceiveToIdle(LTE_UART, (uint8_t *)response, max_size, &RxLen, 200);
 8000cd6:	f107 030c 	add.w	r3, r7, #12
 8000cda:	89fa      	ldrh	r2, [r7, #14]
 8000cdc:	21c8      	movs	r1, #200	@ 0xc8
 8000cde:	9100      	str	r1, [sp, #0]
 8000ce0:	6879      	ldr	r1, [r7, #4]
 8000ce2:	4803      	ldr	r0, [pc, #12]	@ (8000cf0 <SIM_Receive_Response+0x2c>)
 8000ce4:	f00f fe46 	bl	8010974 <HAL_UARTEx_ReceiveToIdle>
}
 8000ce8:	bf00      	nop
 8000cea:	3710      	adds	r7, #16
 8000cec:	46bd      	mov	sp, r7
 8000cee:	bd80      	pop	{r7, pc}
 8000cf0:	2000049c 	.word	0x2000049c

08000cf4 <SIM_Check_IP>:

/*------CONTROLLO INDIRIZZO IP------*/
int SIM_Check_IP(const char* response)
{
 8000cf4:	b580      	push	{r7, lr}
 8000cf6:	b086      	sub	sp, #24
 8000cf8:	af00      	add	r7, sp, #0
 8000cfa:	6078      	str	r0, [r7, #4]
	char* cnact_pos = strstr(response, "+CNACT:");
 8000cfc:	4910      	ldr	r1, [pc, #64]	@ (8000d40 <SIM_Check_IP+0x4c>)
 8000cfe:	6878      	ldr	r0, [r7, #4]
 8000d00:	f010 f817 	bl	8010d32 <strstr>
 8000d04:	6178      	str	r0, [r7, #20]
    if(cnact_pos != NULL) {
 8000d06:	697b      	ldr	r3, [r7, #20]
 8000d08:	2b00      	cmp	r3, #0
 8000d0a:	d014      	beq.n	8000d36 <SIM_Check_IP+0x42>
        int context_id, status;
        if(sscanf(cnact_pos, "+CNACT: %d,%d", &context_id, &status) >= 2) {
 8000d0c:	f107 030c 	add.w	r3, r7, #12
 8000d10:	f107 0210 	add.w	r2, r7, #16
 8000d14:	490b      	ldr	r1, [pc, #44]	@ (8000d44 <SIM_Check_IP+0x50>)
 8000d16:	6978      	ldr	r0, [r7, #20]
 8000d18:	f00f ffa6 	bl	8010c68 <siscanf>
 8000d1c:	4603      	mov	r3, r0
 8000d1e:	2b01      	cmp	r3, #1
 8000d20:	dd09      	ble.n	8000d36 <SIM_Check_IP+0x42>
            return (context_id == 1 && status == 1) ? 1 : 0;
 8000d22:	693b      	ldr	r3, [r7, #16]
 8000d24:	2b01      	cmp	r3, #1
 8000d26:	d104      	bne.n	8000d32 <SIM_Check_IP+0x3e>
 8000d28:	68fb      	ldr	r3, [r7, #12]
 8000d2a:	2b01      	cmp	r3, #1
 8000d2c:	d101      	bne.n	8000d32 <SIM_Check_IP+0x3e>
 8000d2e:	2301      	movs	r3, #1
 8000d30:	e002      	b.n	8000d38 <SIM_Check_IP+0x44>
 8000d32:	2300      	movs	r3, #0
 8000d34:	e000      	b.n	8000d38 <SIM_Check_IP+0x44>
        }
    }
    return 0;
 8000d36:	2300      	movs	r3, #0
}
 8000d38:	4618      	mov	r0, r3
 8000d3a:	3718      	adds	r7, #24
 8000d3c:	46bd      	mov	sp, r7
 8000d3e:	bd80      	pop	{r7, pc}
 8000d40:	0801211c 	.word	0x0801211c
 8000d44:	08012124 	.word	0x08012124

08000d48 <SIM_Check_MQTT_State>:

/*------CONTROLLO STATO CONNESSIONE MQTT------*/
int SIM_Check_MQTT_State(const char* response)
{
 8000d48:	b580      	push	{r7, lr}
 8000d4a:	b084      	sub	sp, #16
 8000d4c:	af00      	add	r7, sp, #0
 8000d4e:	6078      	str	r0, [r7, #4]
    char* smstate_pos = strstr(response, "+SMSTATE:");
 8000d50:	490e      	ldr	r1, [pc, #56]	@ (8000d8c <SIM_Check_MQTT_State+0x44>)
 8000d52:	6878      	ldr	r0, [r7, #4]
 8000d54:	f00f ffed 	bl	8010d32 <strstr>
 8000d58:	60f8      	str	r0, [r7, #12]
    if(smstate_pos != NULL) {
 8000d5a:	68fb      	ldr	r3, [r7, #12]
 8000d5c:	2b00      	cmp	r3, #0
 8000d5e:	d010      	beq.n	8000d82 <SIM_Check_MQTT_State+0x3a>
        int mqtt_state;
        if(sscanf(smstate_pos, "+SMSTATE: %d", &mqtt_state) >= 1) {
 8000d60:	f107 0308 	add.w	r3, r7, #8
 8000d64:	461a      	mov	r2, r3
 8000d66:	490a      	ldr	r1, [pc, #40]	@ (8000d90 <SIM_Check_MQTT_State+0x48>)
 8000d68:	68f8      	ldr	r0, [r7, #12]
 8000d6a:	f00f ff7d 	bl	8010c68 <siscanf>
 8000d6e:	4603      	mov	r3, r0
 8000d70:	2b00      	cmp	r3, #0
 8000d72:	dd06      	ble.n	8000d82 <SIM_Check_MQTT_State+0x3a>
            return (mqtt_state == 1) ? 1 : 0;
 8000d74:	68bb      	ldr	r3, [r7, #8]
 8000d76:	2b01      	cmp	r3, #1
 8000d78:	bf0c      	ite	eq
 8000d7a:	2301      	moveq	r3, #1
 8000d7c:	2300      	movne	r3, #0
 8000d7e:	b2db      	uxtb	r3, r3
 8000d80:	e000      	b.n	8000d84 <SIM_Check_MQTT_State+0x3c>
        }
    }
    return 0;
 8000d82:	2300      	movs	r3, #0
}
 8000d84:	4618      	mov	r0, r3
 8000d86:	3710      	adds	r7, #16
 8000d88:	46bd      	mov	sp, r7
 8000d8a:	bd80      	pop	{r7, pc}
 8000d8c:	08012134 	.word	0x08012134
 8000d90:	08012140 	.word	0x08012140

08000d94 <SIM_Parse_Message>:

/*------PARSING MESSAGGIO MQTT------*/
void SIM_Parse_Message(void)
{
 8000d94:	b580      	push	{r7, lr}
 8000d96:	b088      	sub	sp, #32
 8000d98:	af00      	add	r7, sp, #0
    char* buf = (char*)sim_rx_buffer;
 8000d9a:	4b36      	ldr	r3, [pc, #216]	@ (8000e74 <SIM_Parse_Message+0xe0>)
 8000d9c:	61fb      	str	r3, [r7, #28]

    // Check pattern "+SMSUB: "
    if(strncmp(buf, "+SMSUB: ", 8) == 0)
 8000d9e:	2208      	movs	r2, #8
 8000da0:	4935      	ldr	r1, [pc, #212]	@ (8000e78 <SIM_Parse_Message+0xe4>)
 8000da2:	69f8      	ldr	r0, [r7, #28]
 8000da4:	f00f ffb3 	bl	8010d0e <strncmp>
 8000da8:	4603      	mov	r3, r0
 8000daa:	2b00      	cmp	r3, #0
 8000dac:	d15d      	bne.n	8000e6a <SIM_Parse_Message+0xd6>
    {
        char* pos = buf + 8;  // Inizia dopo "+SMSUB: "
 8000dae:	69fb      	ldr	r3, [r7, #28]
 8000db0:	3308      	adds	r3, #8
 8000db2:	61bb      	str	r3, [r7, #24]

        char* first_quote = strchr(pos, '"');
 8000db4:	2122      	movs	r1, #34	@ 0x22
 8000db6:	69b8      	ldr	r0, [r7, #24]
 8000db8:	f00f ff9c 	bl	8010cf4 <strchr>
 8000dbc:	6178      	str	r0, [r7, #20]
        if(first_quote) {
 8000dbe:	697b      	ldr	r3, [r7, #20]
 8000dc0:	2b00      	cmp	r3, #0
 8000dc2:	d052      	beq.n	8000e6a <SIM_Parse_Message+0xd6>
            char* second_quote = strchr(first_quote + 1, '"');
 8000dc4:	697b      	ldr	r3, [r7, #20]
 8000dc6:	3301      	adds	r3, #1
 8000dc8:	2122      	movs	r1, #34	@ 0x22
 8000dca:	4618      	mov	r0, r3
 8000dcc:	f00f ff92 	bl	8010cf4 <strchr>
 8000dd0:	6138      	str	r0, [r7, #16]

            if(second_quote) {
 8000dd2:	693b      	ldr	r3, [r7, #16]
 8000dd4:	2b00      	cmp	r3, #0
 8000dd6:	d048      	beq.n	8000e6a <SIM_Parse_Message+0xd6>
                char* third_quote = strchr(second_quote + 1, '"');
 8000dd8:	693b      	ldr	r3, [r7, #16]
 8000dda:	3301      	adds	r3, #1
 8000ddc:	2122      	movs	r1, #34	@ 0x22
 8000dde:	4618      	mov	r0, r3
 8000de0:	f00f ff88 	bl	8010cf4 <strchr>
 8000de4:	60f8      	str	r0, [r7, #12]

                if(third_quote) {
 8000de6:	68fb      	ldr	r3, [r7, #12]
 8000de8:	2b00      	cmp	r3, #0
 8000dea:	d03e      	beq.n	8000e6a <SIM_Parse_Message+0xd6>
                    char* cmd_pos = third_quote + 1;
 8000dec:	68fb      	ldr	r3, [r7, #12]
 8000dee:	3301      	adds	r3, #1
 8000df0:	60bb      	str	r3, [r7, #8]
                    char* fourth_quote = strchr(cmd_pos, '"');
 8000df2:	2122      	movs	r1, #34	@ 0x22
 8000df4:	68b8      	ldr	r0, [r7, #8]
 8000df6:	f00f ff7d 	bl	8010cf4 <strchr>
 8000dfa:	6078      	str	r0, [r7, #4]

                    if(fourth_quote && (fourth_quote - cmd_pos) >= 3) {
 8000dfc:	687b      	ldr	r3, [r7, #4]
 8000dfe:	2b00      	cmp	r3, #0
 8000e00:	d033      	beq.n	8000e6a <SIM_Parse_Message+0xd6>
 8000e02:	687a      	ldr	r2, [r7, #4]
 8000e04:	68bb      	ldr	r3, [r7, #8]
 8000e06:	1ad3      	subs	r3, r2, r3
 8000e08:	2b02      	cmp	r3, #2
 8000e0a:	dd2e      	ble.n	8000e6a <SIM_Parse_Message+0xd6>

                        uint32_t cmd_val = (cmd_pos[2] << 16) | (cmd_pos[1] << 8) | cmd_pos[0];
 8000e0c:	68bb      	ldr	r3, [r7, #8]
 8000e0e:	3302      	adds	r3, #2
 8000e10:	781b      	ldrb	r3, [r3, #0]
 8000e12:	041a      	lsls	r2, r3, #16
 8000e14:	68bb      	ldr	r3, [r7, #8]
 8000e16:	3301      	adds	r3, #1
 8000e18:	781b      	ldrb	r3, [r3, #0]
 8000e1a:	021b      	lsls	r3, r3, #8
 8000e1c:	4313      	orrs	r3, r2
 8000e1e:	68ba      	ldr	r2, [r7, #8]
 8000e20:	7812      	ldrb	r2, [r2, #0]
 8000e22:	4313      	orrs	r3, r2
 8000e24:	603b      	str	r3, [r7, #0]

                        switch(cmd_val) {
 8000e26:	683b      	ldr	r3, [r7, #0]
 8000e28:	4a14      	ldr	r2, [pc, #80]	@ (8000e7c <SIM_Parse_Message+0xe8>)
 8000e2a:	4293      	cmp	r3, r2
 8000e2c:	d017      	beq.n	8000e5e <SIM_Parse_Message+0xca>
 8000e2e:	683b      	ldr	r3, [r7, #0]
 8000e30:	4a12      	ldr	r2, [pc, #72]	@ (8000e7c <SIM_Parse_Message+0xe8>)
 8000e32:	4293      	cmp	r3, r2
 8000e34:	d819      	bhi.n	8000e6a <SIM_Parse_Message+0xd6>
 8000e36:	683b      	ldr	r3, [r7, #0]
 8000e38:	4a11      	ldr	r2, [pc, #68]	@ (8000e80 <SIM_Parse_Message+0xec>)
 8000e3a:	4293      	cmp	r3, r2
 8000e3c:	d009      	beq.n	8000e52 <SIM_Parse_Message+0xbe>
 8000e3e:	683b      	ldr	r3, [r7, #0]
 8000e40:	4a10      	ldr	r2, [pc, #64]	@ (8000e84 <SIM_Parse_Message+0xf0>)
 8000e42:	4293      	cmp	r3, r2
 8000e44:	d111      	bne.n	8000e6a <SIM_Parse_Message+0xd6>
                            case 0x444E53: flags.Data_Request = 1; break;  // SND
 8000e46:	4a10      	ldr	r2, [pc, #64]	@ (8000e88 <SIM_Parse_Message+0xf4>)
 8000e48:	7853      	ldrb	r3, [r2, #1]
 8000e4a:	f043 0308 	orr.w	r3, r3, #8
 8000e4e:	7053      	strb	r3, [r2, #1]
 8000e50:	e00b      	b.n	8000e6a <SIM_Parse_Message+0xd6>
                            case 0x41544F: flags.Start_OTA = 1; break;     // OTA
 8000e52:	4a0d      	ldr	r2, [pc, #52]	@ (8000e88 <SIM_Parse_Message+0xf4>)
 8000e54:	7853      	ldrb	r3, [r2, #1]
 8000e56:	f043 0310 	orr.w	r3, r3, #16
 8000e5a:	7053      	strb	r3, [r2, #1]
 8000e5c:	e005      	b.n	8000e6a <SIM_Parse_Message+0xd6>
                            case 0x474E50: flags.Ping = 1; break;  // PNG
 8000e5e:	4a0a      	ldr	r2, [pc, #40]	@ (8000e88 <SIM_Parse_Message+0xf4>)
 8000e60:	7853      	ldrb	r3, [r2, #1]
 8000e62:	f043 0320 	orr.w	r3, r3, #32
 8000e66:	7053      	strb	r3, [r2, #1]
 8000e68:	bf00      	nop
                    }
                }
            }
        }
    }
}
 8000e6a:	bf00      	nop
 8000e6c:	3720      	adds	r7, #32
 8000e6e:	46bd      	mov	sp, r7
 8000e70:	bd80      	pop	{r7, pc}
 8000e72:	bf00      	nop
 8000e74:	20006fa0 	.word	0x20006fa0
 8000e78:	08012150 	.word	0x08012150
 8000e7c:	00474e50 	.word	0x00474e50
 8000e80:	0041544f 	.word	0x0041544f
 8000e84:	00444e53 	.word	0x00444e53
 8000e88:	20003928 	.word	0x20003928

08000e8c <SIM_publish_MQTT_Message>:

/*------PUBBLICAZIONE MESSAGGIO MQTT------*/
void SIM_publish_MQTT_Message(const char* topic, const char* message)
{
 8000e8c:	b580      	push	{r7, lr}
 8000e8e:	b0c4      	sub	sp, #272	@ 0x110
 8000e90:	af00      	add	r7, sp, #0
 8000e92:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8000e96:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8000e9a:	6018      	str	r0, [r3, #0]
 8000e9c:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8000ea0:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8000ea4:	6019      	str	r1, [r3, #0]
    char command[256];
    uint16_t len = (uint16_t)strlen(message);
 8000ea6:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8000eaa:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8000eae:	6818      	ldr	r0, [r3, #0]
 8000eb0:	f7ff f98e 	bl	80001d0 <strlen>
 8000eb4:	4603      	mov	r3, r0
 8000eb6:	f8a7 310e 	strh.w	r3, [r7, #270]	@ 0x10e

    if(topic != NULL && strlen(topic) > 0)
 8000eba:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8000ebe:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8000ec2:	681b      	ldr	r3, [r3, #0]
 8000ec4:	2b00      	cmp	r3, #0
 8000ec6:	d014      	beq.n	8000ef2 <SIM_publish_MQTT_Message+0x66>
 8000ec8:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8000ecc:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8000ed0:	681b      	ldr	r3, [r3, #0]
 8000ed2:	781b      	ldrb	r3, [r3, #0]
 8000ed4:	2b00      	cmp	r3, #0
 8000ed6:	d00c      	beq.n	8000ef2 <SIM_publish_MQTT_Message+0x66>
	{
        sprintf(command, "AT+SMPUB=\"%s\",%d,1,0\r", topic, len);
 8000ed8:	f8b7 310e 	ldrh.w	r3, [r7, #270]	@ 0x10e
 8000edc:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 8000ee0:	f5a2 7286 	sub.w	r2, r2, #268	@ 0x10c
 8000ee4:	f107 000c 	add.w	r0, r7, #12
 8000ee8:	6812      	ldr	r2, [r2, #0]
 8000eea:	4910      	ldr	r1, [pc, #64]	@ (8000f2c <SIM_publish_MQTT_Message+0xa0>)
 8000eec:	f00f fe9a 	bl	8010c24 <siprintf>
 8000ef0:	e007      	b.n	8000f02 <SIM_publish_MQTT_Message+0x76>
    } 
	else 
	{
        sprintf(command, "AT+SMPUB=%d\r", len);
 8000ef2:	f8b7 210e 	ldrh.w	r2, [r7, #270]	@ 0x10e
 8000ef6:	f107 030c 	add.w	r3, r7, #12
 8000efa:	490d      	ldr	r1, [pc, #52]	@ (8000f30 <SIM_publish_MQTT_Message+0xa4>)
 8000efc:	4618      	mov	r0, r3
 8000efe:	f00f fe91 	bl	8010c24 <siprintf>
    }
    
    SIM_Send_Command(command);
 8000f02:	f107 030c 	add.w	r3, r7, #12
 8000f06:	4618      	mov	r0, r3
 8000f08:	f7ff fec6 	bl	8000c98 <SIM_Send_Command>
    SIM_Send_Command((char*)message);
 8000f0c:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8000f10:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8000f14:	6818      	ldr	r0, [r3, #0]
 8000f16:	f7ff febf 	bl	8000c98 <SIM_Send_Command>
    SIM_Send_Command("\x1A");
 8000f1a:	4806      	ldr	r0, [pc, #24]	@ (8000f34 <SIM_publish_MQTT_Message+0xa8>)
 8000f1c:	f7ff febc 	bl	8000c98 <SIM_Send_Command>
}
 8000f20:	bf00      	nop
 8000f22:	f507 7788 	add.w	r7, r7, #272	@ 0x110
 8000f26:	46bd      	mov	sp, r7
 8000f28:	bd80      	pop	{r7, pc}
 8000f2a:	bf00      	nop
 8000f2c:	0801215c 	.word	0x0801215c
 8000f30:	08012174 	.word	0x08012174
 8000f34:	08012184 	.word	0x08012184

08000f38 <BC_Init>:
#include "global_variables.h"


/*------INIZIALIZZAZIONE BATTERY CHARGER------*/
void BC_Init(void)
{
 8000f38:	b580      	push	{r7, lr}
 8000f3a:	af00      	add	r7, sp, #0
	BC_Write_Reg(REG00_MINIMAL_SYSTEM_VOLTAGE, 0x1A);           //Tensione minima di uscita con 3 celle = 9V   <----- Senza Batteria il sistema fornisce questa tensione
 8000f3c:	211a      	movs	r1, #26
 8000f3e:	2000      	movs	r0, #0
 8000f40:	f000 f830 	bl	8000fa4 <BC_Write_Reg>
	BC_MultiWrite_Reg(REG01_CHARGE_VOLTAGE_LIMIT, 0x04EC);      //Limite tensione di carica con 3 celle = 12.6V
 8000f44:	f240 41ec 	movw	r1, #1260	@ 0x4ec
 8000f48:	2001      	movs	r0, #1
 8000f4a:	f000 f877 	bl	800103c <BC_MultiWrite_Reg>
	BC_MultiWrite_Reg(REG03_CHARGE_CURRENT_LIMIT, 0x0064);      //Limite corrente di carica con 3 celle = 1A
 8000f4e:	2164      	movs	r1, #100	@ 0x64
 8000f50:	2003      	movs	r0, #3
 8000f52:	f000 f873 	bl	800103c <BC_MultiWrite_Reg>
	BC_Write_Reg(REG10_CHARGER_CONTROL_1, 0x85);                //Tensione di OVP in ingresso = 26V
 8000f56:	2185      	movs	r1, #133	@ 0x85
 8000f58:	2010      	movs	r0, #16
 8000f5a:	f000 f823 	bl	8000fa4 <BC_Write_Reg>
	BC_Write_Reg(REG14_CHARGER_CONTROL_5, 0x96);                //Informazione sulla presenza dello Ship-FET
 8000f5e:	2196      	movs	r1, #150	@ 0x96
 8000f60:	2014      	movs	r0, #20
 8000f62:	f000 f81f 	bl	8000fa4 <BC_Write_Reg>
	BC_Write_Reg(REG15_MPPT_CONTROL, 0xAB);                     //MPPT attivato, tensione di MPP = 0.875*Vin, misura di 300ms ogni 2 minuti della Vin
 8000f66:	21ab      	movs	r1, #171	@ 0xab
 8000f68:	2015      	movs	r0, #21
 8000f6a:	f000 f81b 	bl	8000fa4 <BC_Write_Reg>
	BC_Write_Reg(REG28_CHARGER_MASK_0, 0xE1);                   //Interrupt attivati: Poor source, Power good, VAC2 present, VAC1 present
 8000f6e:	21e1      	movs	r1, #225	@ 0xe1
 8000f70:	2028      	movs	r0, #40	@ 0x28
 8000f72:	f000 f817 	bl	8000fa4 <BC_Write_Reg>
	BC_Write_Reg(REG29_CHARGER_MASK_1, 0xD7);                   //Interrupt attivati: nessuno
 8000f76:	21d7      	movs	r1, #215	@ 0xd7
 8000f78:	2029      	movs	r0, #41	@ 0x29
 8000f7a:	f000 f813 	bl	8000fa4 <BC_Write_Reg>
	BC_Write_Reg(REG2A_CHARGER_MASK_2, 0x7F);                   //Interrupt attivati: nessuno
 8000f7e:	217f      	movs	r1, #127	@ 0x7f
 8000f80:	202a      	movs	r0, #42	@ 0x2a
 8000f82:	f000 f80f 	bl	8000fa4 <BC_Write_Reg>
	BC_Write_Reg(REG2B_CHARGER_MASK_3, 0x1F);                   //Interrupt attivati: nessuno
 8000f86:	211f      	movs	r1, #31
 8000f88:	202b      	movs	r0, #43	@ 0x2b
 8000f8a:	f000 f80b 	bl	8000fa4 <BC_Write_Reg>
	BC_Write_Reg(REG2C_FAULT_MASK_0, 0xFC);                     //Interrupt attivati: VAC2 over-voltage, VAC1 over-voltage
 8000f8e:	21fc      	movs	r1, #252	@ 0xfc
 8000f90:	202c      	movs	r0, #44	@ 0x2c
 8000f92:	f000 f807 	bl	8000fa4 <BC_Write_Reg>
	BC_Write_Reg(REG2D_FAULT_MASK_1, 0xF4);                     //Interrupt attivati: nessuno
 8000f96:	21f4      	movs	r1, #244	@ 0xf4
 8000f98:	202d      	movs	r0, #45	@ 0x2d
 8000f9a:	f000 f803 	bl	8000fa4 <BC_Write_Reg>
}
 8000f9e:	bf00      	nop
 8000fa0:	bd80      	pop	{r7, pc}
	...

08000fa4 <BC_Write_Reg>:

/*------SCRITTURA REGISTRO 8 BIT------*/
int BC_Write_Reg(uint8_t reg, uint8_t wdata)
{
 8000fa4:	b580      	push	{r7, lr}
 8000fa6:	b086      	sub	sp, #24
 8000fa8:	af02      	add	r7, sp, #8
 8000faa:	4603      	mov	r3, r0
 8000fac:	460a      	mov	r2, r1
 8000fae:	71fb      	strb	r3, [r7, #7]
 8000fb0:	4613      	mov	r3, r2
 8000fb2:	71bb      	strb	r3, [r7, #6]
	int result = -1;
 8000fb4:	f04f 33ff 	mov.w	r3, #4294967295
 8000fb8:	60fb      	str	r3, [r7, #12]
	uint8_t toSend[2];
	toSend[0] = reg;
 8000fba:	79fb      	ldrb	r3, [r7, #7]
 8000fbc:	723b      	strb	r3, [r7, #8]
	toSend[1] = wdata;
 8000fbe:	79bb      	ldrb	r3, [r7, #6]
 8000fc0:	727b      	strb	r3, [r7, #9]

	if(HAL_I2C_Master_Transmit(I2C, BATTERY_CHARGER_ADDR << 1, toSend, 2, 100) == HAL_OK)
 8000fc2:	f107 0208 	add.w	r2, r7, #8
 8000fc6:	2364      	movs	r3, #100	@ 0x64
 8000fc8:	9300      	str	r3, [sp, #0]
 8000fca:	2302      	movs	r3, #2
 8000fcc:	21d6      	movs	r1, #214	@ 0xd6
 8000fce:	4806      	ldr	r0, [pc, #24]	@ (8000fe8 <BC_Write_Reg+0x44>)
 8000fd0:	f008 fedc 	bl	8009d8c <HAL_I2C_Master_Transmit>
 8000fd4:	4603      	mov	r3, r0
 8000fd6:	2b00      	cmp	r3, #0
 8000fd8:	d101      	bne.n	8000fde <BC_Write_Reg+0x3a>
	{
		result = 0;
 8000fda:	2300      	movs	r3, #0
 8000fdc:	60fb      	str	r3, [r7, #12]
	}

	return result;
 8000fde:	68fb      	ldr	r3, [r7, #12]
}
 8000fe0:	4618      	mov	r0, r3
 8000fe2:	3710      	adds	r7, #16
 8000fe4:	46bd      	mov	sp, r7
 8000fe6:	bd80      	pop	{r7, pc}
 8000fe8:	20000160 	.word	0x20000160

08000fec <BC_Read_Reg>:

/*------LETTURA REGISTRO 8 BIT------*/
int BC_Read_Reg(uint8_t reg, uint8_t *rdata)
{
 8000fec:	b580      	push	{r7, lr}
 8000fee:	b086      	sub	sp, #24
 8000ff0:	af02      	add	r7, sp, #8
 8000ff2:	4603      	mov	r3, r0
 8000ff4:	6039      	str	r1, [r7, #0]
 8000ff6:	71fb      	strb	r3, [r7, #7]
	int result = -1;
 8000ff8:	f04f 33ff 	mov.w	r3, #4294967295
 8000ffc:	60fb      	str	r3, [r7, #12]

	if(HAL_I2C_Master_Transmit(I2C, BATTERY_CHARGER_ADDR << 1, &reg, 1, 100) == HAL_OK)
 8000ffe:	1dfa      	adds	r2, r7, #7
 8001000:	2364      	movs	r3, #100	@ 0x64
 8001002:	9300      	str	r3, [sp, #0]
 8001004:	2301      	movs	r3, #1
 8001006:	21d6      	movs	r1, #214	@ 0xd6
 8001008:	480b      	ldr	r0, [pc, #44]	@ (8001038 <BC_Read_Reg+0x4c>)
 800100a:	f008 febf 	bl	8009d8c <HAL_I2C_Master_Transmit>
 800100e:	4603      	mov	r3, r0
 8001010:	2b00      	cmp	r3, #0
 8001012:	d10c      	bne.n	800102e <BC_Read_Reg+0x42>
	{
		if(HAL_I2C_Master_Receive(I2C,  BATTERY_CHARGER_ADDR << 1, rdata, 1, 100) == HAL_OK)
 8001014:	2364      	movs	r3, #100	@ 0x64
 8001016:	9300      	str	r3, [sp, #0]
 8001018:	2301      	movs	r3, #1
 800101a:	683a      	ldr	r2, [r7, #0]
 800101c:	21d6      	movs	r1, #214	@ 0xd6
 800101e:	4806      	ldr	r0, [pc, #24]	@ (8001038 <BC_Read_Reg+0x4c>)
 8001020:	f008 ffcc 	bl	8009fbc <HAL_I2C_Master_Receive>
 8001024:	4603      	mov	r3, r0
 8001026:	2b00      	cmp	r3, #0
 8001028:	d101      	bne.n	800102e <BC_Read_Reg+0x42>
		{
			result = 0;
 800102a:	2300      	movs	r3, #0
 800102c:	60fb      	str	r3, [r7, #12]
		}
	}

	return result;
 800102e:	68fb      	ldr	r3, [r7, #12]
}
 8001030:	4618      	mov	r0, r3
 8001032:	3710      	adds	r7, #16
 8001034:	46bd      	mov	sp, r7
 8001036:	bd80      	pop	{r7, pc}
 8001038:	20000160 	.word	0x20000160

0800103c <BC_MultiWrite_Reg>:

/*------SCRITTURA REGISTRO 16 BIT------*/
int BC_MultiWrite_Reg(uint8_t reg, uint16_t wdata)
{
 800103c:	b580      	push	{r7, lr}
 800103e:	b086      	sub	sp, #24
 8001040:	af02      	add	r7, sp, #8
 8001042:	4603      	mov	r3, r0
 8001044:	460a      	mov	r2, r1
 8001046:	71fb      	strb	r3, [r7, #7]
 8001048:	4613      	mov	r3, r2
 800104a:	80bb      	strh	r3, [r7, #4]
	int result = -1;
 800104c:	f04f 33ff 	mov.w	r3, #4294967295
 8001050:	60fb      	str	r3, [r7, #12]
	uint8_t toSend[3];
	toSend[0] = reg;
 8001052:	79fb      	ldrb	r3, [r7, #7]
 8001054:	723b      	strb	r3, [r7, #8]
	toSend[1] = (wdata & 0xFF00) >> 8;
 8001056:	88bb      	ldrh	r3, [r7, #4]
 8001058:	0a1b      	lsrs	r3, r3, #8
 800105a:	b29b      	uxth	r3, r3
 800105c:	b2db      	uxtb	r3, r3
 800105e:	727b      	strb	r3, [r7, #9]
	toSend[2] = wdata & 0x00FF;
 8001060:	88bb      	ldrh	r3, [r7, #4]
 8001062:	b2db      	uxtb	r3, r3
 8001064:	72bb      	strb	r3, [r7, #10]

	if(HAL_I2C_Master_Transmit(I2C, BATTERY_CHARGER_ADDR << 1, toSend, 3, 100) == HAL_OK)
 8001066:	f107 0208 	add.w	r2, r7, #8
 800106a:	2364      	movs	r3, #100	@ 0x64
 800106c:	9300      	str	r3, [sp, #0]
 800106e:	2303      	movs	r3, #3
 8001070:	21d6      	movs	r1, #214	@ 0xd6
 8001072:	4806      	ldr	r0, [pc, #24]	@ (800108c <BC_MultiWrite_Reg+0x50>)
 8001074:	f008 fe8a 	bl	8009d8c <HAL_I2C_Master_Transmit>
 8001078:	4603      	mov	r3, r0
 800107a:	2b00      	cmp	r3, #0
 800107c:	d101      	bne.n	8001082 <BC_MultiWrite_Reg+0x46>
	{
		result = 0;
 800107e:	2300      	movs	r3, #0
 8001080:	60fb      	str	r3, [r7, #12]
	}

	return result;
 8001082:	68fb      	ldr	r3, [r7, #12]
}
 8001084:	4618      	mov	r0, r3
 8001086:	3710      	adds	r7, #16
 8001088:	46bd      	mov	sp, r7
 800108a:	bd80      	pop	{r7, pc}
 800108c:	20000160 	.word	0x20000160

08001090 <BC_Read_Flags>:
	return result;
}

/*------LETTURA FLAGS DI INTERRUZIONE------*/
int BC_Read_Flags(uint64_t *flags)
{
 8001090:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001094:	b09a      	sub	sp, #104	@ 0x68
 8001096:	af02      	add	r7, sp, #8
 8001098:	61f8      	str	r0, [r7, #28]
	int result = -1;
 800109a:	f04f 33ff 	mov.w	r3, #4294967295
 800109e:	65fb      	str	r3, [r7, #92]	@ 0x5c
	uint64_t data[6] = {0};
 80010a0:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80010a4:	2230      	movs	r2, #48	@ 0x30
 80010a6:	2100      	movs	r1, #0
 80010a8:	4618      	mov	r0, r3
 80010aa:	f00f fe1b 	bl	8010ce4 <memset>
	uint8_t reg = REG22_CHARGER_FLAG_0;
 80010ae:	2322      	movs	r3, #34	@ 0x22
 80010b0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

	if(HAL_I2C_Master_Transmit(I2C, BATTERY_CHARGER_ADDR << 1, &reg, 1, 100) == HAL_OK)
 80010b4:	f107 0227 	add.w	r2, r7, #39	@ 0x27
 80010b8:	2364      	movs	r3, #100	@ 0x64
 80010ba:	9300      	str	r3, [sp, #0]
 80010bc:	2301      	movs	r3, #1
 80010be:	21d6      	movs	r1, #214	@ 0xd6
 80010c0:	4836      	ldr	r0, [pc, #216]	@ (800119c <BC_Read_Flags+0x10c>)
 80010c2:	f008 fe63 	bl	8009d8c <HAL_I2C_Master_Transmit>
 80010c6:	4603      	mov	r3, r0
 80010c8:	2b00      	cmp	r3, #0
 80010ca:	d161      	bne.n	8001190 <BC_Read_Flags+0x100>
	{
		if(HAL_I2C_Master_Receive(I2C,  BATTERY_CHARGER_ADDR << 1 , (uint8_t *)data, 6, 100) == HAL_OK)
 80010cc:	f107 0228 	add.w	r2, r7, #40	@ 0x28
 80010d0:	2364      	movs	r3, #100	@ 0x64
 80010d2:	9300      	str	r3, [sp, #0]
 80010d4:	2306      	movs	r3, #6
 80010d6:	21d6      	movs	r1, #214	@ 0xd6
 80010d8:	4830      	ldr	r0, [pc, #192]	@ (800119c <BC_Read_Flags+0x10c>)
 80010da:	f008 ff6f 	bl	8009fbc <HAL_I2C_Master_Receive>
 80010de:	4603      	mov	r3, r0
 80010e0:	2b00      	cmp	r3, #0
 80010e2:	d155      	bne.n	8001190 <BC_Read_Flags+0x100>
		{
			result = 0;
 80010e4:	2300      	movs	r3, #0
 80010e6:	65fb      	str	r3, [r7, #92]	@ 0x5c
			*flags = (data[0] << 40) | (data[1] << 32) | (data[2] << 24) | (data[3] << 16) | (data[4] << 8) | data[5];
 80010e8:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80010ec:	f04f 0400 	mov.w	r4, #0
 80010f0:	f04f 0500 	mov.w	r5, #0
 80010f4:	0215      	lsls	r5, r2, #8
 80010f6:	2400      	movs	r4, #0
 80010f8:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
 80010fc:	f04f 0200 	mov.w	r2, #0
 8001100:	f04f 0300 	mov.w	r3, #0
 8001104:	0003      	movs	r3, r0
 8001106:	2200      	movs	r2, #0
 8001108:	ea44 0102 	orr.w	r1, r4, r2
 800110c:	6139      	str	r1, [r7, #16]
 800110e:	432b      	orrs	r3, r5
 8001110:	617b      	str	r3, [r7, #20]
 8001112:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	@ 0x38
 8001116:	f04f 0200 	mov.w	r2, #0
 800111a:	f04f 0300 	mov.w	r3, #0
 800111e:	060b      	lsls	r3, r1, #24
 8001120:	ea43 2310 	orr.w	r3, r3, r0, lsr #8
 8001124:	0602      	lsls	r2, r0, #24
 8001126:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 800112a:	4621      	mov	r1, r4
 800112c:	4311      	orrs	r1, r2
 800112e:	60b9      	str	r1, [r7, #8]
 8001130:	4629      	mov	r1, r5
 8001132:	4319      	orrs	r1, r3
 8001134:	60f9      	str	r1, [r7, #12]
 8001136:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	@ 0x40
 800113a:	f04f 0200 	mov.w	r2, #0
 800113e:	f04f 0300 	mov.w	r3, #0
 8001142:	040b      	lsls	r3, r1, #16
 8001144:	ea43 4310 	orr.w	r3, r3, r0, lsr #16
 8001148:	0402      	lsls	r2, r0, #16
 800114a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800114e:	4621      	mov	r1, r4
 8001150:	ea41 0a02 	orr.w	sl, r1, r2
 8001154:	4629      	mov	r1, r5
 8001156:	ea41 0b03 	orr.w	fp, r1, r3
 800115a:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	@ 0x48
 800115e:	f04f 0200 	mov.w	r2, #0
 8001162:	f04f 0300 	mov.w	r3, #0
 8001166:	020b      	lsls	r3, r1, #8
 8001168:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800116c:	0202      	lsls	r2, r0, #8
 800116e:	ea4a 0802 	orr.w	r8, sl, r2
 8001172:	ea4b 0903 	orr.w	r9, fp, r3
 8001176:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 800117a:	ea48 0102 	orr.w	r1, r8, r2
 800117e:	6039      	str	r1, [r7, #0]
 8001180:	ea49 0303 	orr.w	r3, r9, r3
 8001184:	607b      	str	r3, [r7, #4]
 8001186:	69fb      	ldr	r3, [r7, #28]
 8001188:	e9d7 1200 	ldrd	r1, r2, [r7]
 800118c:	e9c3 1200 	strd	r1, r2, [r3]
		}
	}

	return result;
 8001190:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
}
 8001192:	4618      	mov	r0, r3
 8001194:	3760      	adds	r7, #96	@ 0x60
 8001196:	46bd      	mov	sp, r7
 8001198:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800119c:	20000160 	.word	0x20000160

080011a0 <BC_Manage_Interrupts>:

/*------GESTIONE DELLE INTERRUZIONI------*/
void BC_Manage_Interrupts(uint64_t flags)
{
 80011a0:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80011a4:	b084      	sub	sp, #16
 80011a6:	af00      	add	r7, sp, #0
 80011a8:	e9c7 0100 	strd	r0, r1, [r7]
	uint8_t status = 0;
 80011ac:	2100      	movs	r1, #0
 80011ae:	73f9      	strb	r1, [r7, #15]

	if((flags & POOR_SOURCE_MASK) != 0)   //INGRESSO NON BUONO
 80011b0:	e9d7 0100 	ldrd	r0, r1, [r7]
 80011b4:	f04f 0800 	mov.w	r8, #0
 80011b8:	f401 5980 	and.w	r9, r1, #4096	@ 0x1000
	{

	}

	if((flags & VAC2_CHANGE_MASK) != 0)  //PANNELLO INSERITO O RIMOSSO
 80011bc:	e9d7 0100 	ldrd	r0, r1, [r7]
 80011c0:	2200      	movs	r2, #0
 80011c2:	f401 6380 	and.w	r3, r1, #1024	@ 0x400
 80011c6:	4313      	orrs	r3, r2
 80011c8:	d013      	beq.n	80011f2 <BC_Manage_Interrupts+0x52>
	{
		BC_Read_Reg(REG1B_CHARGER_STATUS_0, (uint8_t *)& status);
 80011ca:	f107 030f 	add.w	r3, r7, #15
 80011ce:	4619      	mov	r1, r3
 80011d0:	201b      	movs	r0, #27
 80011d2:	f7ff ff0b 	bl	8000fec <BC_Read_Reg>
		if((status & VAC2_PRESENT_MASK) != 0)
 80011d6:	7bfb      	ldrb	r3, [r7, #15]
 80011d8:	f003 0302 	and.w	r3, r3, #2
 80011dc:	2b00      	cmp	r3, #0
 80011de:	d004      	beq.n	80011ea <BC_Manage_Interrupts+0x4a>
		{
			BC_Write_Reg(REG13_CHARGER_CONTROL_4, 0x80); //INSERITA
 80011e0:	2180      	movs	r1, #128	@ 0x80
 80011e2:	2013      	movs	r0, #19
 80011e4:	f7ff fede 	bl	8000fa4 <BC_Write_Reg>
 80011e8:	e003      	b.n	80011f2 <BC_Manage_Interrupts+0x52>
		}
		else
		{
			BC_Write_Reg(REG13_CHARGER_CONTROL_4, 0x40); //RIMOSSA
 80011ea:	2140      	movs	r1, #64	@ 0x40
 80011ec:	2013      	movs	r0, #19
 80011ee:	f7ff fed9 	bl	8000fa4 <BC_Write_Reg>
		}
	}

	if((flags & VAC1_CHANGE_MASK) != 0)  //TURBINA INSERITA O RIMOSSA
 80011f2:	e9d7 2300 	ldrd	r2, r3, [r7]
 80011f6:	2400      	movs	r4, #0
 80011f8:	f403 7500 	and.w	r5, r3, #512	@ 0x200
	{

	}
}
 80011fc:	bf00      	nop
 80011fe:	3710      	adds	r7, #16
 8001200:	46bd      	mov	sp, r7
 8001202:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
	...

08001208 <HAL_UARTEx_RxEventCallback>:
	}
}

/* ------CALLBACK UART RX IDLE------*/
void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8001208:	b580      	push	{r7, lr}
 800120a:	b082      	sub	sp, #8
 800120c:	af00      	add	r7, sp, #0
 800120e:	6078      	str	r0, [r7, #4]
 8001210:	460b      	mov	r3, r1
 8001212:	807b      	strh	r3, [r7, #2]
    if(huart == LTE_UART && Size > 8)
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	4a0f      	ldr	r2, [pc, #60]	@ (8001254 <HAL_UARTEx_RxEventCallback+0x4c>)
 8001218:	4293      	cmp	r3, r2
 800121a:	d117      	bne.n	800124c <HAL_UARTEx_RxEventCallback+0x44>
 800121c:	887b      	ldrh	r3, [r7, #2]
 800121e:	2b08      	cmp	r3, #8
 8001220:	d914      	bls.n	800124c <HAL_UARTEx_RxEventCallback+0x44>
    {
        // Check velocissimo: pattern "+SMSUB: " all'inizio buffer
        if(*(uint32_t*)sim_rx_buffer == 0x534D532B &&           // "+SMS"
 8001222:	4b0d      	ldr	r3, [pc, #52]	@ (8001258 <HAL_UARTEx_RxEventCallback+0x50>)
 8001224:	681b      	ldr	r3, [r3, #0]
 8001226:	4a0d      	ldr	r2, [pc, #52]	@ (800125c <HAL_UARTEx_RxEventCallback+0x54>)
 8001228:	4293      	cmp	r3, r2
 800122a:	d109      	bne.n	8001240 <HAL_UARTEx_RxEventCallback+0x38>
           *(uint32_t*)(sim_rx_buffer+4) == 0x203A4255) {        // "UB: "
 800122c:	4b0c      	ldr	r3, [pc, #48]	@ (8001260 <HAL_UARTEx_RxEventCallback+0x58>)
 800122e:	681b      	ldr	r3, [r3, #0]
        if(*(uint32_t*)sim_rx_buffer == 0x534D532B &&           // "+SMS"
 8001230:	4a0c      	ldr	r2, [pc, #48]	@ (8001264 <HAL_UARTEx_RxEventCallback+0x5c>)
 8001232:	4293      	cmp	r3, r2
 8001234:	d104      	bne.n	8001240 <HAL_UARTEx_RxEventCallback+0x38>
            flags.MQTT_Message_Rx = 1;
 8001236:	4a0c      	ldr	r2, [pc, #48]	@ (8001268 <HAL_UARTEx_RxEventCallback+0x60>)
 8001238:	7853      	ldrb	r3, [r2, #1]
 800123a:	f043 0304 	orr.w	r3, r3, #4
 800123e:	7053      	strb	r3, [r2, #1]
        }

        HAL_UARTEx_ReceiveToIdle_DMA(LTE_UART, sim_rx_buffer, SIM_RXBUFFER_SIZE);
 8001240:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001244:	4904      	ldr	r1, [pc, #16]	@ (8001258 <HAL_UARTEx_RxEventCallback+0x50>)
 8001246:	4803      	ldr	r0, [pc, #12]	@ (8001254 <HAL_UARTEx_RxEventCallback+0x4c>)
 8001248:	f00f fc97 	bl	8010b7a <HAL_UARTEx_ReceiveToIdle_DMA>
    }
}
 800124c:	bf00      	nop
 800124e:	3708      	adds	r7, #8
 8001250:	46bd      	mov	sp, r7
 8001252:	bd80      	pop	{r7, pc}
 8001254:	2000049c 	.word	0x2000049c
 8001258:	20006fa0 	.word	0x20006fa0
 800125c:	534d532b 	.word	0x534d532b
 8001260:	20006fa4 	.word	0x20006fa4
 8001264:	203a4255 	.word	0x203a4255
 8001268:	20003928 	.word	0x20003928

0800126c <HAL_UART_RxCpltCallback>:

/* ------CALLBACK UART RX COMPLETE------*/
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800126c:	b480      	push	{r7}
 800126e:	b083      	sub	sp, #12
 8001270:	af00      	add	r7, sp, #0
 8001272:	6078      	str	r0, [r7, #4]
	if (huart == LTE_UART)
	{

	}

}
 8001274:	bf00      	nop
 8001276:	370c      	adds	r7, #12
 8001278:	46bd      	mov	sp, r7
 800127a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800127e:	4770      	bx	lr

08001280 <HAL_ADC_ConvHalfCpltCallback>:

}

/* ------CALLBACK HALF ADC------*/
void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8001280:	b480      	push	{r7}
 8001282:	b083      	sub	sp, #12
 8001284:	af00      	add	r7, sp, #0
 8001286:	6078      	str	r0, [r7, #4]
	if(hadc == PRESSURE_ADC)
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	4a09      	ldr	r2, [pc, #36]	@ (80012b0 <HAL_ADC_ConvHalfCpltCallback+0x30>)
 800128c:	4293      	cmp	r3, r2
 800128e:	d109      	bne.n	80012a4 <HAL_ADC_ConvHalfCpltCallback+0x24>
	{
		flags.ADC_Complete = 1;
 8001290:	4a08      	ldr	r2, [pc, #32]	@ (80012b4 <HAL_ADC_ConvHalfCpltCallback+0x34>)
 8001292:	7813      	ldrb	r3, [r2, #0]
 8001294:	f043 0301 	orr.w	r3, r3, #1
 8001298:	7013      	strb	r3, [r2, #0]
		flags.ADC_Half_Buffer = 1;
 800129a:	4a06      	ldr	r2, [pc, #24]	@ (80012b4 <HAL_ADC_ConvHalfCpltCallback+0x34>)
 800129c:	7813      	ldrb	r3, [r2, #0]
 800129e:	f043 0302 	orr.w	r3, r3, #2
 80012a2:	7013      	strb	r3, [r2, #0]
	}
}
 80012a4:	bf00      	nop
 80012a6:	370c      	adds	r7, #12
 80012a8:	46bd      	mov	sp, r7
 80012aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ae:	4770      	bx	lr
 80012b0:	20000090 	.word	0x20000090
 80012b4:	20003928 	.word	0x20003928

080012b8 <HAL_ADC_ConvCpltCallback>:

/*------CALLBACK FULL ADC------*/
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 80012b8:	b480      	push	{r7}
 80012ba:	b083      	sub	sp, #12
 80012bc:	af00      	add	r7, sp, #0
 80012be:	6078      	str	r0, [r7, #4]
	if(hadc == PRESSURE_ADC)
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	4a09      	ldr	r2, [pc, #36]	@ (80012e8 <HAL_ADC_ConvCpltCallback+0x30>)
 80012c4:	4293      	cmp	r3, r2
 80012c6:	d109      	bne.n	80012dc <HAL_ADC_ConvCpltCallback+0x24>
	{
		flags.ADC_Complete = 1;
 80012c8:	4a08      	ldr	r2, [pc, #32]	@ (80012ec <HAL_ADC_ConvCpltCallback+0x34>)
 80012ca:	7813      	ldrb	r3, [r2, #0]
 80012cc:	f043 0301 	orr.w	r3, r3, #1
 80012d0:	7013      	strb	r3, [r2, #0]
		flags.ADC_Full_Buffer = 1;
 80012d2:	4a06      	ldr	r2, [pc, #24]	@ (80012ec <HAL_ADC_ConvCpltCallback+0x34>)
 80012d4:	7813      	ldrb	r3, [r2, #0]
 80012d6:	f043 0304 	orr.w	r3, r3, #4
 80012da:	7013      	strb	r3, [r2, #0]
	}
}
 80012dc:	bf00      	nop
 80012de:	370c      	adds	r7, #12
 80012e0:	46bd      	mov	sp, r7
 80012e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012e6:	4770      	bx	lr
 80012e8:	20000090 	.word	0x20000090
 80012ec:	20003928 	.word	0x20003928

080012f0 <HAL_RTC_AlarmAEventCallback>:

/*------CALLBACK RTC CAMBIO ORA------*/
void HAL_RTC_AlarmAEventCallback(RTC_HandleTypeDef *hrtc)
{
 80012f0:	b580      	push	{r7, lr}
 80012f2:	b088      	sub	sp, #32
 80012f4:	af00      	add	r7, sp, #0
 80012f6:	6078      	str	r0, [r7, #4]
	RTC_TimeTypeDef gTime;

	HAL_RTC_GetTime(hrtc, &gTime, RTC_FORMAT_BIN);
 80012f8:	f107 030c 	add.w	r3, r7, #12
 80012fc:	2200      	movs	r2, #0
 80012fe:	4619      	mov	r1, r3
 8001300:	6878      	ldr	r0, [r7, #4]
 8001302:	f00b fb36 	bl	800c972 <HAL_RTC_GetTime>

	sys.Low_th = Low_TH[gTime.Hours];
 8001306:	7b3b      	ldrb	r3, [r7, #12]
 8001308:	461a      	mov	r2, r3
 800130a:	4b0b      	ldr	r3, [pc, #44]	@ (8001338 <HAL_RTC_AlarmAEventCallback+0x48>)
 800130c:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 8001310:	4b0a      	ldr	r3, [pc, #40]	@ (800133c <HAL_RTC_AlarmAEventCallback+0x4c>)
 8001312:	f503 5340 	add.w	r3, r3, #12288	@ 0x3000
 8001316:	f8a3 2088 	strh.w	r2, [r3, #136]	@ 0x88
	sys.High_th = High_TH[gTime.Hours];
 800131a:	7b3b      	ldrb	r3, [r7, #12]
 800131c:	461a      	mov	r2, r3
 800131e:	4b08      	ldr	r3, [pc, #32]	@ (8001340 <HAL_RTC_AlarmAEventCallback+0x50>)
 8001320:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 8001324:	4b05      	ldr	r3, [pc, #20]	@ (800133c <HAL_RTC_AlarmAEventCallback+0x4c>)
 8001326:	f503 5340 	add.w	r3, r3, #12288	@ 0x3000
 800132a:	f8a3 208a 	strh.w	r2, [r3, #138]	@ 0x8a
}
 800132e:	bf00      	nop
 8001330:	3720      	adds	r7, #32
 8001332:	46bd      	mov	sp, r7
 8001334:	bd80      	pop	{r7, pc}
 8001336:	bf00      	nop
 8001338:	20006f60 	.word	0x20006f60
 800133c:	20000570 	.word	0x20000570
 8001340:	20006f30 	.word	0x20006f30

08001344 <extflash_cs_set>:
uint32_t	exflashNumSectors = 0;
uint8_t		exflashInitDone = 0;


void extflash_cs_set()
{
 8001344:	b580      	push	{r7, lr}
 8001346:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(FLASH_nCS_GPIO_Port, FLASH_nCS_Pin, GPIO_PIN_RESET);
 8001348:	2200      	movs	r2, #0
 800134a:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800134e:	4802      	ldr	r0, [pc, #8]	@ (8001358 <extflash_cs_set+0x14>)
 8001350:	f008 fc68 	bl	8009c24 <HAL_GPIO_WritePin>
}
 8001354:	bf00      	nop
 8001356:	bd80      	pop	{r7, pc}
 8001358:	48000400 	.word	0x48000400

0800135c <extflash_cs_reset>:

void extflash_cs_reset()
{
 800135c:	b580      	push	{r7, lr}
 800135e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(FLASH_nCS_GPIO_Port, FLASH_nCS_Pin, GPIO_PIN_SET);
 8001360:	2201      	movs	r2, #1
 8001362:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001366:	4802      	ldr	r0, [pc, #8]	@ (8001370 <extflash_cs_reset+0x14>)
 8001368:	f008 fc5c 	bl	8009c24 <HAL_GPIO_WritePin>
}
 800136c:	bf00      	nop
 800136e:	bd80      	pop	{r7, pc}
 8001370:	48000400 	.word	0x48000400

08001374 <extflash_wp_reset>:
{
	HAL_GPIO_WritePin(FLASH_nWP_GPIO_Port, FLASH_nWP_Pin, GPIO_PIN_RESET);
}

void extflash_wp_reset()
{
 8001374:	b580      	push	{r7, lr}
 8001376:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(FLASH_nWP_GPIO_Port, FLASH_nWP_Pin, GPIO_PIN_SET);
 8001378:	2201      	movs	r2, #1
 800137a:	2140      	movs	r1, #64	@ 0x40
 800137c:	4802      	ldr	r0, [pc, #8]	@ (8001388 <extflash_wp_reset+0x14>)
 800137e:	f008 fc51 	bl	8009c24 <HAL_GPIO_WritePin>
}
 8001382:	bf00      	nop
 8001384:	bd80      	pop	{r7, pc}
 8001386:	bf00      	nop
 8001388:	48000800 	.word	0x48000800

0800138c <extflash_hard_reset>:


void extflash_hard_reset()
{
 800138c:	b580      	push	{r7, lr}
 800138e:	af00      	add	r7, sp, #0

	HAL_GPIO_WritePin(FLASH_nRESET_GPIO_Port, FLASH_nRESET_Pin, GPIO_PIN_RESET);
 8001390:	2200      	movs	r2, #0
 8001392:	2180      	movs	r1, #128	@ 0x80
 8001394:	4806      	ldr	r0, [pc, #24]	@ (80013b0 <extflash_hard_reset+0x24>)
 8001396:	f008 fc45 	bl	8009c24 <HAL_GPIO_WritePin>

	HAL_Delay(50);
 800139a:	2032      	movs	r0, #50	@ 0x32
 800139c:	f006 faa0 	bl	80078e0 <HAL_Delay>

	HAL_GPIO_WritePin(FLASH_nRESET_GPIO_Port, FLASH_nRESET_Pin, GPIO_PIN_SET);
 80013a0:	2201      	movs	r2, #1
 80013a2:	2180      	movs	r1, #128	@ 0x80
 80013a4:	4802      	ldr	r0, [pc, #8]	@ (80013b0 <extflash_hard_reset+0x24>)
 80013a6:	f008 fc3d 	bl	8009c24 <HAL_GPIO_WritePin>

	return;
 80013aa:	bf00      	nop
}
 80013ac:	bd80      	pop	{r7, pc}
 80013ae:	bf00      	nop
 80013b0:	48000800 	.word	0x48000800

080013b4 <extflash_send_cmd>:


int32_t extflash_send_cmd(extflash_cmd_t command)
{
 80013b4:	b580      	push	{r7, lr}
 80013b6:	b088      	sub	sp, #32
 80013b8:	af00      	add	r7, sp, #0
 80013ba:	6078      	str	r0, [r7, #4]

	uint8_t addr_bytes[4] = {0};
 80013bc:	2300      	movs	r3, #0
 80013be:	61bb      	str	r3, [r7, #24]
	uint8_t dummy_bytes[8] = {0};
 80013c0:	f107 0310 	add.w	r3, r7, #16
 80013c4:	2200      	movs	r2, #0
 80013c6:	601a      	str	r2, [r3, #0]
 80013c8:	605a      	str	r2, [r3, #4]
	uint8_t dummy = 0;
 80013ca:	2300      	movs	r3, #0
 80013cc:	77fb      	strb	r3, [r7, #31]
	uint8_t cmd_data = command->cmd;
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	781b      	ldrb	r3, [r3, #0]
 80013d2:	73fb      	strb	r3, [r7, #15]

	if(command->address_en != 0)
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	785b      	ldrb	r3, [r3, #1]
 80013d8:	2b00      	cmp	r3, #0
 80013da:	d00d      	beq.n	80013f8 <extflash_send_cmd+0x44>
	{
		addr_bytes[0] = (command->address >> 16) & 0xFF;
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	689b      	ldr	r3, [r3, #8]
 80013e0:	0c1b      	lsrs	r3, r3, #16
 80013e2:	b2db      	uxtb	r3, r3
 80013e4:	763b      	strb	r3, [r7, #24]
		addr_bytes[1] = (command->address >> 8) & 0xFF;
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	689b      	ldr	r3, [r3, #8]
 80013ea:	0a1b      	lsrs	r3, r3, #8
 80013ec:	b2db      	uxtb	r3, r3
 80013ee:	767b      	strb	r3, [r7, #25]
		addr_bytes[2] = (command->address) & 0xFF;
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	689b      	ldr	r3, [r3, #8]
 80013f4:	b2db      	uxtb	r3, r3
 80013f6:	76bb      	strb	r3, [r7, #26]
	}

	extflash_cs_set();
 80013f8:	f7ff ffa4 	bl	8001344 <extflash_cs_set>

	HAL_SPI_Transmit(EXTFLASH_SPI, &cmd_data, 1, FLASH_SPI_DEF_TIMEOUT);
 80013fc:	f107 010f 	add.w	r1, r7, #15
 8001400:	2364      	movs	r3, #100	@ 0x64
 8001402:	2201      	movs	r2, #1
 8001404:	4823      	ldr	r0, [pc, #140]	@ (8001494 <extflash_send_cmd+0xe0>)
 8001406:	f00b fe96 	bl	800d136 <HAL_SPI_Transmit>

	if(command->address_en != 0)
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	785b      	ldrb	r3, [r3, #1]
 800140e:	2b00      	cmp	r3, #0
 8001410:	d006      	beq.n	8001420 <extflash_send_cmd+0x6c>
	{
		HAL_SPI_Transmit(EXTFLASH_SPI, addr_bytes, 3, FLASH_SPI_DEF_TIMEOUT);
 8001412:	f107 0118 	add.w	r1, r7, #24
 8001416:	2364      	movs	r3, #100	@ 0x64
 8001418:	2203      	movs	r2, #3
 800141a:	481e      	ldr	r0, [pc, #120]	@ (8001494 <extflash_send_cmd+0xe0>)
 800141c:	f00b fe8b 	bl	800d136 <HAL_SPI_Transmit>
	}

	if(command->dummy_nb > 0)
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	88db      	ldrh	r3, [r3, #6]
 8001424:	2b00      	cmp	r3, #0
 8001426:	d00e      	beq.n	8001446 <extflash_send_cmd+0x92>
	{
		dummy = command->dummy_nb > sizeof(dummy_bytes) ? sizeof(dummy_bytes) : command->dummy_nb;
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	88db      	ldrh	r3, [r3, #6]
 800142c:	2b08      	cmp	r3, #8
 800142e:	bf28      	it	cs
 8001430:	2308      	movcs	r3, #8
 8001432:	b29b      	uxth	r3, r3
 8001434:	77fb      	strb	r3, [r7, #31]
		HAL_SPI_Transmit(EXTFLASH_SPI, dummy_bytes, dummy, FLASH_SPI_DEF_TIMEOUT);
 8001436:	7ffb      	ldrb	r3, [r7, #31]
 8001438:	b29a      	uxth	r2, r3
 800143a:	f107 0110 	add.w	r1, r7, #16
 800143e:	2364      	movs	r3, #100	@ 0x64
 8001440:	4814      	ldr	r0, [pc, #80]	@ (8001494 <extflash_send_cmd+0xe0>)
 8001442:	f00b fe78 	bl	800d136 <HAL_SPI_Transmit>
	}

	if(command->tx_nb > 0 && command->tx_data != NULL)
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	885b      	ldrh	r3, [r3, #2]
 800144a:	2b00      	cmp	r3, #0
 800144c:	d00b      	beq.n	8001466 <extflash_send_cmd+0xb2>
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	68db      	ldr	r3, [r3, #12]
 8001452:	2b00      	cmp	r3, #0
 8001454:	d007      	beq.n	8001466 <extflash_send_cmd+0xb2>
	{
		HAL_SPI_Transmit(EXTFLASH_SPI, command->tx_data, command->tx_nb, FLASH_SPI_DEF_TIMEOUT);
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	68d9      	ldr	r1, [r3, #12]
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	885a      	ldrh	r2, [r3, #2]
 800145e:	2364      	movs	r3, #100	@ 0x64
 8001460:	480c      	ldr	r0, [pc, #48]	@ (8001494 <extflash_send_cmd+0xe0>)
 8001462:	f00b fe68 	bl	800d136 <HAL_SPI_Transmit>
	}

	if(command->rx_nb > 0 && command->rx_data != NULL)
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	889b      	ldrh	r3, [r3, #4]
 800146a:	2b00      	cmp	r3, #0
 800146c:	d00b      	beq.n	8001486 <extflash_send_cmd+0xd2>
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	691b      	ldr	r3, [r3, #16]
 8001472:	2b00      	cmp	r3, #0
 8001474:	d007      	beq.n	8001486 <extflash_send_cmd+0xd2>
	{
		HAL_SPI_Receive(EXTFLASH_SPI, command->rx_data, command->rx_nb, FLASH_SPI_DEF_TIMEOUT);
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	6919      	ldr	r1, [r3, #16]
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	889a      	ldrh	r2, [r3, #4]
 800147e:	2364      	movs	r3, #100	@ 0x64
 8001480:	4804      	ldr	r0, [pc, #16]	@ (8001494 <extflash_send_cmd+0xe0>)
 8001482:	f00b ffce 	bl	800d422 <HAL_SPI_Receive>
	}

	extflash_cs_reset();
 8001486:	f7ff ff69 	bl	800135c <extflash_cs_reset>

	return 0;
 800148a:	2300      	movs	r3, #0
}
 800148c:	4618      	mov	r0, r3
 800148e:	3720      	adds	r7, #32
 8001490:	46bd      	mov	sp, r7
 8001492:	bd80      	pop	{r7, pc}
 8001494:	2000021c 	.word	0x2000021c

08001498 <extflash_read_extended_read_reg>:

}


int extflash_read_extended_read_reg(uint8_t *ereg)
{
 8001498:	b580      	push	{r7, lr}
 800149a:	b088      	sub	sp, #32
 800149c:	af00      	add	r7, sp, #0
 800149e:	6078      	str	r0, [r7, #4]

	extflash_cmd command = {0};
 80014a0:	f107 030c 	add.w	r3, r7, #12
 80014a4:	2200      	movs	r2, #0
 80014a6:	601a      	str	r2, [r3, #0]
 80014a8:	605a      	str	r2, [r3, #4]
 80014aa:	609a      	str	r2, [r3, #8]
 80014ac:	60da      	str	r2, [r3, #12]
 80014ae:	611a      	str	r2, [r3, #16]
	command.cmd = EFLASH_CMD_RDERP;
 80014b0:	2381      	movs	r3, #129	@ 0x81
 80014b2:	733b      	strb	r3, [r7, #12]
	command.address_en = 0;
 80014b4:	2300      	movs	r3, #0
 80014b6:	737b      	strb	r3, [r7, #13]
	command.address = 0;
 80014b8:	2300      	movs	r3, #0
 80014ba:	617b      	str	r3, [r7, #20]
	command.rx_nb = 1;
 80014bc:	2301      	movs	r3, #1
 80014be:	823b      	strh	r3, [r7, #16]
	command.rx_data = ereg;
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	61fb      	str	r3, [r7, #28]

	return extflash_send_cmd(&command);
 80014c4:	f107 030c 	add.w	r3, r7, #12
 80014c8:	4618      	mov	r0, r3
 80014ca:	f7ff ff73 	bl	80013b4 <extflash_send_cmd>
 80014ce:	4603      	mov	r3, r0
}
 80014d0:	4618      	mov	r0, r3
 80014d2:	3720      	adds	r7, #32
 80014d4:	46bd      	mov	sp, r7
 80014d6:	bd80      	pop	{r7, pc}

080014d8 <extflash_clear_extended_read_reg>:


int extflash_clear_extended_read_reg()
{
 80014d8:	b580      	push	{r7, lr}
 80014da:	b086      	sub	sp, #24
 80014dc:	af00      	add	r7, sp, #0
	extflash_cmd command = {0};
 80014de:	1d3b      	adds	r3, r7, #4
 80014e0:	2200      	movs	r2, #0
 80014e2:	601a      	str	r2, [r3, #0]
 80014e4:	605a      	str	r2, [r3, #4]
 80014e6:	609a      	str	r2, [r3, #8]
 80014e8:	60da      	str	r2, [r3, #12]
 80014ea:	611a      	str	r2, [r3, #16]
	command.cmd = EFLASH_CMD_CLERP;
 80014ec:	2382      	movs	r3, #130	@ 0x82
 80014ee:	713b      	strb	r3, [r7, #4]

	return extflash_send_cmd(&command);
 80014f0:	1d3b      	adds	r3, r7, #4
 80014f2:	4618      	mov	r0, r3
 80014f4:	f7ff ff5e 	bl	80013b4 <extflash_send_cmd>
 80014f8:	4603      	mov	r3, r0
}
 80014fa:	4618      	mov	r0, r3
 80014fc:	3718      	adds	r7, #24
 80014fe:	46bd      	mov	sp, r7
 8001500:	bd80      	pop	{r7, pc}

08001502 <extflash_set_write_protection>:
	return extflash_send_cmd(&command);

}

int extflash_set_write_protection(uint8_t enable)
{
 8001502:	b580      	push	{r7, lr}
 8001504:	b088      	sub	sp, #32
 8001506:	af00      	add	r7, sp, #0
 8001508:	4603      	mov	r3, r0
 800150a:	71fb      	strb	r3, [r7, #7]

	extflash_cmd command = {0};
 800150c:	f107 030c 	add.w	r3, r7, #12
 8001510:	2200      	movs	r2, #0
 8001512:	601a      	str	r2, [r3, #0]
 8001514:	605a      	str	r2, [r3, #4]
 8001516:	609a      	str	r2, [r3, #8]
 8001518:	60da      	str	r2, [r3, #12]
 800151a:	611a      	str	r2, [r3, #16]
	command.cmd = enable==0 ? EFLASH_CMD_WREN : EFLASH_CMD_WRDI;
 800151c:	79fb      	ldrb	r3, [r7, #7]
 800151e:	2b00      	cmp	r3, #0
 8001520:	d101      	bne.n	8001526 <extflash_set_write_protection+0x24>
 8001522:	2306      	movs	r3, #6
 8001524:	e000      	b.n	8001528 <extflash_set_write_protection+0x26>
 8001526:	2304      	movs	r3, #4
 8001528:	733b      	strb	r3, [r7, #12]

	return extflash_send_cmd(&command);
 800152a:	f107 030c 	add.w	r3, r7, #12
 800152e:	4618      	mov	r0, r3
 8001530:	f7ff ff40 	bl	80013b4 <extflash_send_cmd>
 8001534:	4603      	mov	r3, r0
}
 8001536:	4618      	mov	r0, r3
 8001538:	3720      	adds	r7, #32
 800153a:	46bd      	mov	sp, r7
 800153c:	bd80      	pop	{r7, pc}

0800153e <extflash_read_sfdp>:

int extflash_read_sfdp(uint32_t regaddr, uint8_t *reg, uint8_t nregs)
{
 800153e:	b580      	push	{r7, lr}
 8001540:	b08a      	sub	sp, #40	@ 0x28
 8001542:	af00      	add	r7, sp, #0
 8001544:	60f8      	str	r0, [r7, #12]
 8001546:	60b9      	str	r1, [r7, #8]
 8001548:	4613      	mov	r3, r2
 800154a:	71fb      	strb	r3, [r7, #7]

	extflash_cmd command = {0};
 800154c:	f107 0314 	add.w	r3, r7, #20
 8001550:	2200      	movs	r2, #0
 8001552:	601a      	str	r2, [r3, #0]
 8001554:	605a      	str	r2, [r3, #4]
 8001556:	609a      	str	r2, [r3, #8]
 8001558:	60da      	str	r2, [r3, #12]
 800155a:	611a      	str	r2, [r3, #16]
	command.cmd = EFLASH_CMD_RDSFDP;
 800155c:	235a      	movs	r3, #90	@ 0x5a
 800155e:	753b      	strb	r3, [r7, #20]
	command.address_en = 1;
 8001560:	2301      	movs	r3, #1
 8001562:	757b      	strb	r3, [r7, #21]
	command.address = regaddr;
 8001564:	68fb      	ldr	r3, [r7, #12]
 8001566:	61fb      	str	r3, [r7, #28]
	command.dummy_nb = 1;
 8001568:	2301      	movs	r3, #1
 800156a:	837b      	strh	r3, [r7, #26]
	command.rx_nb = nregs;
 800156c:	79fb      	ldrb	r3, [r7, #7]
 800156e:	b29b      	uxth	r3, r3
 8001570:	833b      	strh	r3, [r7, #24]
	command.rx_data = reg;
 8001572:	68bb      	ldr	r3, [r7, #8]
 8001574:	627b      	str	r3, [r7, #36]	@ 0x24

	return extflash_send_cmd(&command);
 8001576:	f107 0314 	add.w	r3, r7, #20
 800157a:	4618      	mov	r0, r3
 800157c:	f7ff ff1a 	bl	80013b4 <extflash_send_cmd>
 8001580:	4603      	mov	r3, r0

}
 8001582:	4618      	mov	r0, r3
 8001584:	3728      	adds	r7, #40	@ 0x28
 8001586:	46bd      	mov	sp, r7
 8001588:	bd80      	pop	{r7, pc}

0800158a <extflash_raw_read>:

int extflash_raw_read(uint32_t address, uint8_t *pBuffer, uint16_t nbytes)
{
 800158a:	b580      	push	{r7, lr}
 800158c:	b08a      	sub	sp, #40	@ 0x28
 800158e:	af00      	add	r7, sp, #0
 8001590:	60f8      	str	r0, [r7, #12]
 8001592:	60b9      	str	r1, [r7, #8]
 8001594:	4613      	mov	r3, r2
 8001596:	80fb      	strh	r3, [r7, #6]

	extflash_cmd command = {0};
 8001598:	f107 0314 	add.w	r3, r7, #20
 800159c:	2200      	movs	r2, #0
 800159e:	601a      	str	r2, [r3, #0]
 80015a0:	605a      	str	r2, [r3, #4]
 80015a2:	609a      	str	r2, [r3, #8]
 80015a4:	60da      	str	r2, [r3, #12]
 80015a6:	611a      	str	r2, [r3, #16]
	command.cmd = EFLASH_CMD_FRD;
 80015a8:	230b      	movs	r3, #11
 80015aa:	753b      	strb	r3, [r7, #20]
	command.address_en = 1;
 80015ac:	2301      	movs	r3, #1
 80015ae:	757b      	strb	r3, [r7, #21]
	command.address = address;
 80015b0:	68fb      	ldr	r3, [r7, #12]
 80015b2:	61fb      	str	r3, [r7, #28]
	command.dummy_nb = 1;
 80015b4:	2301      	movs	r3, #1
 80015b6:	837b      	strh	r3, [r7, #26]
	command.rx_nb = nbytes;
 80015b8:	88fb      	ldrh	r3, [r7, #6]
 80015ba:	833b      	strh	r3, [r7, #24]
	command.rx_data = pBuffer;
 80015bc:	68bb      	ldr	r3, [r7, #8]
 80015be:	627b      	str	r3, [r7, #36]	@ 0x24

	return extflash_send_cmd(&command);
 80015c0:	f107 0314 	add.w	r3, r7, #20
 80015c4:	4618      	mov	r0, r3
 80015c6:	f7ff fef5 	bl	80013b4 <extflash_send_cmd>
 80015ca:	4603      	mov	r3, r0

}
 80015cc:	4618      	mov	r0, r3
 80015ce:	3728      	adds	r7, #40	@ 0x28
 80015d0:	46bd      	mov	sp, r7
 80015d2:	bd80      	pop	{r7, pc}

080015d4 <extflash_raw_erase>:

int extflash_raw_erase(uint32_t address)
{
 80015d4:	b580      	push	{r7, lr}
 80015d6:	b088      	sub	sp, #32
 80015d8:	af00      	add	r7, sp, #0
 80015da:	6078      	str	r0, [r7, #4]

	extflash_cmd command = {0};
 80015dc:	f107 030c 	add.w	r3, r7, #12
 80015e0:	2200      	movs	r2, #0
 80015e2:	601a      	str	r2, [r3, #0]
 80015e4:	605a      	str	r2, [r3, #4]
 80015e6:	609a      	str	r2, [r3, #8]
 80015e8:	60da      	str	r2, [r3, #12]
 80015ea:	611a      	str	r2, [r3, #16]
	command.cmd = EFLASH_CMD_SER;
 80015ec:	23d7      	movs	r3, #215	@ 0xd7
 80015ee:	733b      	strb	r3, [r7, #12]
	command.address_en = 1;
 80015f0:	2301      	movs	r3, #1
 80015f2:	737b      	strb	r3, [r7, #13]
	command.address = address;
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	617b      	str	r3, [r7, #20]

	return extflash_send_cmd(&command);
 80015f8:	f107 030c 	add.w	r3, r7, #12
 80015fc:	4618      	mov	r0, r3
 80015fe:	f7ff fed9 	bl	80013b4 <extflash_send_cmd>
 8001602:	4603      	mov	r3, r0
}
 8001604:	4618      	mov	r0, r3
 8001606:	3720      	adds	r7, #32
 8001608:	46bd      	mov	sp, r7
 800160a:	bd80      	pop	{r7, pc}

0800160c <extflash_raw_page_write>:

int extflash_raw_page_write(uint32_t address, const uint8_t *pBuffer)
{
 800160c:	b580      	push	{r7, lr}
 800160e:	b088      	sub	sp, #32
 8001610:	af00      	add	r7, sp, #0
 8001612:	6078      	str	r0, [r7, #4]
 8001614:	6039      	str	r1, [r7, #0]

	extflash_cmd command = {0};
 8001616:	f107 030c 	add.w	r3, r7, #12
 800161a:	2200      	movs	r2, #0
 800161c:	601a      	str	r2, [r3, #0]
 800161e:	605a      	str	r2, [r3, #4]
 8001620:	609a      	str	r2, [r3, #8]
 8001622:	60da      	str	r2, [r3, #12]
 8001624:	611a      	str	r2, [r3, #16]
	command.cmd = EFLASH_CMD_PP;
 8001626:	2302      	movs	r3, #2
 8001628:	733b      	strb	r3, [r7, #12]
	command.address_en = 1;
 800162a:	2301      	movs	r3, #1
 800162c:	737b      	strb	r3, [r7, #13]
	command.address = address;
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	617b      	str	r3, [r7, #20]
	command.tx_nb = EFLASH_DEF_PAGE_SIZE;
 8001632:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001636:	81fb      	strh	r3, [r7, #14]
	command.tx_data = pBuffer;
 8001638:	683b      	ldr	r3, [r7, #0]
 800163a:	61bb      	str	r3, [r7, #24]

	return extflash_send_cmd(&command);
 800163c:	f107 030c 	add.w	r3, r7, #12
 8001640:	4618      	mov	r0, r3
 8001642:	f7ff feb7 	bl	80013b4 <extflash_send_cmd>
 8001646:	4603      	mov	r3, r0
}
 8001648:	4618      	mov	r0, r3
 800164a:	3720      	adds	r7, #32
 800164c:	46bd      	mov	sp, r7
 800164e:	bd80      	pop	{r7, pc}

08001650 <extflash_sector_read>:


int extflash_sector_read(uint32_t sector, uint32_t nsectors, uint8_t *pBuffer)
{
 8001650:	b580      	push	{r7, lr}
 8001652:	b08a      	sub	sp, #40	@ 0x28
 8001654:	af00      	add	r7, sp, #0
 8001656:	60f8      	str	r0, [r7, #12]
 8001658:	60b9      	str	r1, [r7, #8]
 800165a:	607a      	str	r2, [r7, #4]
	int result = 0;
 800165c:	2300      	movs	r3, #0
 800165e:	61fb      	str	r3, [r7, #28]
	uint8_t ereg = 0;
 8001660:	2300      	movs	r3, #0
 8001662:	75fb      	strb	r3, [r7, #23]
	uint32_t tmo = HAL_GetTick();
 8001664:	f006 f930 	bl	80078c8 <HAL_GetTick>
 8001668:	61b8      	str	r0, [r7, #24]
	uint8_t *wPtr = pBuffer;
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	627b      	str	r3, [r7, #36]	@ 0x24
	uint32_t address = sector * EFLASH_DEF_SECTOR_SIZE;
 800166e:	68fb      	ldr	r3, [r7, #12]
 8001670:	031b      	lsls	r3, r3, #12
 8001672:	623b      	str	r3, [r7, #32]

	if(extflash_read_extended_read_reg(&ereg) < 0)return -1;
 8001674:	f107 0317 	add.w	r3, r7, #23
 8001678:	4618      	mov	r0, r3
 800167a:	f7ff ff0d 	bl	8001498 <extflash_read_extended_read_reg>
 800167e:	4603      	mov	r3, r0
 8001680:	2b00      	cmp	r3, #0
 8001682:	da10      	bge.n	80016a6 <extflash_sector_read+0x56>
 8001684:	f04f 33ff 	mov.w	r3, #4294967295
 8001688:	e037      	b.n	80016fa <extflash_sector_read+0xaa>

	while((ereg & ESTATUS_WIP) && (HAL_GetTick() - tmo < FLASH_WRITE_ERASE_TIMEOUT))
	{
		//Scrittura-erase in corso
		if(extflash_read_extended_read_reg(&ereg) < 0)return -1;
 800168a:	f107 0317 	add.w	r3, r7, #23
 800168e:	4618      	mov	r0, r3
 8001690:	f7ff ff02 	bl	8001498 <extflash_read_extended_read_reg>
 8001694:	4603      	mov	r3, r0
 8001696:	2b00      	cmp	r3, #0
 8001698:	da02      	bge.n	80016a0 <extflash_sector_read+0x50>
 800169a:	f04f 33ff 	mov.w	r3, #4294967295
 800169e:	e02c      	b.n	80016fa <extflash_sector_read+0xaa>
		HAL_Delay(FLASH_STATUS_POLL_INTERVAL);
 80016a0:	2001      	movs	r0, #1
 80016a2:	f006 f91d 	bl	80078e0 <HAL_Delay>
	while((ereg & ESTATUS_WIP) && (HAL_GetTick() - tmo < FLASH_WRITE_ERASE_TIMEOUT))
 80016a6:	7dfb      	ldrb	r3, [r7, #23]
 80016a8:	f003 0301 	and.w	r3, r3, #1
 80016ac:	2b00      	cmp	r3, #0
 80016ae:	d020      	beq.n	80016f2 <extflash_sector_read+0xa2>
 80016b0:	f006 f90a 	bl	80078c8 <HAL_GetTick>
 80016b4:	4602      	mov	r2, r0
 80016b6:	69bb      	ldr	r3, [r7, #24]
 80016b8:	1ad3      	subs	r3, r2, r3
 80016ba:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80016be:	d3e4      	bcc.n	800168a <extflash_sector_read+0x3a>
	}

	while(nsectors > 0)
 80016c0:	e017      	b.n	80016f2 <extflash_sector_read+0xa2>
	{
		result = extflash_raw_read(address, wPtr, EFLASH_DEF_SECTOR_SIZE);
 80016c2:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80016c6:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80016c8:	6a38      	ldr	r0, [r7, #32]
 80016ca:	f7ff ff5e 	bl	800158a <extflash_raw_read>
 80016ce:	61f8      	str	r0, [r7, #28]
		if(result < 0)return -1;
 80016d0:	69fb      	ldr	r3, [r7, #28]
 80016d2:	2b00      	cmp	r3, #0
 80016d4:	da02      	bge.n	80016dc <extflash_sector_read+0x8c>
 80016d6:	f04f 33ff 	mov.w	r3, #4294967295
 80016da:	e00e      	b.n	80016fa <extflash_sector_read+0xaa>

		address += EFLASH_DEF_SECTOR_SIZE;
 80016dc:	6a3b      	ldr	r3, [r7, #32]
 80016de:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80016e2:	623b      	str	r3, [r7, #32]
		wPtr += EFLASH_DEF_SECTOR_SIZE;
 80016e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80016e6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80016ea:	627b      	str	r3, [r7, #36]	@ 0x24
		nsectors--;
 80016ec:	68bb      	ldr	r3, [r7, #8]
 80016ee:	3b01      	subs	r3, #1
 80016f0:	60bb      	str	r3, [r7, #8]
	while(nsectors > 0)
 80016f2:	68bb      	ldr	r3, [r7, #8]
 80016f4:	2b00      	cmp	r3, #0
 80016f6:	d1e4      	bne.n	80016c2 <extflash_sector_read+0x72>
	}

	return 0;
 80016f8:	2300      	movs	r3, #0

}
 80016fa:	4618      	mov	r0, r3
 80016fc:	3728      	adds	r7, #40	@ 0x28
 80016fe:	46bd      	mov	sp, r7
 8001700:	bd80      	pop	{r7, pc}

08001702 <extflash_wait_for_wop>:

int extflash_wait_for_wop(uint32_t timeout)
{
 8001702:	b580      	push	{r7, lr}
 8001704:	b084      	sub	sp, #16
 8001706:	af00      	add	r7, sp, #0
 8001708:	6078      	str	r0, [r7, #4]
	uint8_t ereg = 0;
 800170a:	2300      	movs	r3, #0
 800170c:	72fb      	strb	r3, [r7, #11]
	uint32_t tmo = HAL_GetTick();
 800170e:	f006 f8db 	bl	80078c8 <HAL_GetTick>
 8001712:	60f8      	str	r0, [r7, #12]

	if(extflash_read_extended_read_reg(&ereg) < 0)return -1;
 8001714:	f107 030b 	add.w	r3, r7, #11
 8001718:	4618      	mov	r0, r3
 800171a:	f7ff febd 	bl	8001498 <extflash_read_extended_read_reg>
 800171e:	4603      	mov	r3, r0
 8001720:	2b00      	cmp	r3, #0
 8001722:	da10      	bge.n	8001746 <extflash_wait_for_wop+0x44>
 8001724:	f04f 33ff 	mov.w	r3, #4294967295
 8001728:	e023      	b.n	8001772 <extflash_wait_for_wop+0x70>

	while((ereg & ESTATUS_WIP) && (HAL_GetTick() - tmo < timeout))
	{
		//Scrittura-erase in corso
		if(extflash_read_extended_read_reg(&ereg) < 0)return -1;
 800172a:	f107 030b 	add.w	r3, r7, #11
 800172e:	4618      	mov	r0, r3
 8001730:	f7ff feb2 	bl	8001498 <extflash_read_extended_read_reg>
 8001734:	4603      	mov	r3, r0
 8001736:	2b00      	cmp	r3, #0
 8001738:	da02      	bge.n	8001740 <extflash_wait_for_wop+0x3e>
 800173a:	f04f 33ff 	mov.w	r3, #4294967295
 800173e:	e018      	b.n	8001772 <extflash_wait_for_wop+0x70>
		HAL_Delay(FLASH_STATUS_POLL_INTERVAL);
 8001740:	2001      	movs	r0, #1
 8001742:	f006 f8cd 	bl	80078e0 <HAL_Delay>
	while((ereg & ESTATUS_WIP) && (HAL_GetTick() - tmo < timeout))
 8001746:	7afb      	ldrb	r3, [r7, #11]
 8001748:	f003 0301 	and.w	r3, r3, #1
 800174c:	2b00      	cmp	r3, #0
 800174e:	d007      	beq.n	8001760 <extflash_wait_for_wop+0x5e>
 8001750:	f006 f8ba 	bl	80078c8 <HAL_GetTick>
 8001754:	4602      	mov	r2, r0
 8001756:	68fb      	ldr	r3, [r7, #12]
 8001758:	1ad3      	subs	r3, r2, r3
 800175a:	687a      	ldr	r2, [r7, #4]
 800175c:	429a      	cmp	r2, r3
 800175e:	d8e4      	bhi.n	800172a <extflash_wait_for_wop+0x28>
	}

	if(ereg & (ESTATUS_PROT_ERR | ESTATUS_P_ERR | ESTATUS_E_ERR))
 8001760:	7afb      	ldrb	r3, [r7, #11]
 8001762:	f003 030e 	and.w	r3, r3, #14
 8001766:	2b00      	cmp	r3, #0
 8001768:	d002      	beq.n	8001770 <extflash_wait_for_wop+0x6e>
	{
		return -2; //Erase o write error
 800176a:	f06f 0301 	mvn.w	r3, #1
 800176e:	e000      	b.n	8001772 <extflash_wait_for_wop+0x70>
	}

	return 0;
 8001770:	2300      	movs	r3, #0
}
 8001772:	4618      	mov	r0, r3
 8001774:	3710      	adds	r7, #16
 8001776:	46bd      	mov	sp, r7
 8001778:	bd80      	pop	{r7, pc}

0800177a <extflash_sector_write>:

int extflash_sector_write(uint32_t sector, uint32_t nsectors, const uint8_t *pBuffer)
{
 800177a:	b580      	push	{r7, lr}
 800177c:	b088      	sub	sp, #32
 800177e:	af00      	add	r7, sp, #0
 8001780:	60f8      	str	r0, [r7, #12]
 8001782:	60b9      	str	r1, [r7, #8]
 8001784:	607a      	str	r2, [r7, #4]
	int result = 0;
 8001786:	2300      	movs	r3, #0
 8001788:	613b      	str	r3, [r7, #16]
	const uint8_t *wPtr = pBuffer;
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	61fb      	str	r3, [r7, #28]
	uint32_t address = sector * EFLASH_DEF_SECTOR_SIZE;
 800178e:	68fb      	ldr	r3, [r7, #12]
 8001790:	031b      	lsls	r3, r3, #12
 8001792:	61bb      	str	r3, [r7, #24]

	extflash_clear_extended_read_reg();
 8001794:	f7ff fea0 	bl	80014d8 <extflash_clear_extended_read_reg>

	while(nsectors > 0)
 8001798:	e04e      	b.n	8001838 <extflash_sector_write+0xbe>
	{
		//Controllo operazioni in corso
		result = extflash_wait_for_wop(FLASH_WRITE_ERASE_TIMEOUT);
 800179a:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800179e:	f7ff ffb0 	bl	8001702 <extflash_wait_for_wop>
 80017a2:	6138      	str	r0, [r7, #16]
		if(result < 0)break;
 80017a4:	693b      	ldr	r3, [r7, #16]
 80017a6:	2b00      	cmp	r3, #0
 80017a8:	db4a      	blt.n	8001840 <extflash_sector_write+0xc6>

		//Erase del settore
		result = extflash_set_write_protection(0);
 80017aa:	2000      	movs	r0, #0
 80017ac:	f7ff fea9 	bl	8001502 <extflash_set_write_protection>
 80017b0:	6138      	str	r0, [r7, #16]
		if(result < 0)break;
 80017b2:	693b      	ldr	r3, [r7, #16]
 80017b4:	2b00      	cmp	r3, #0
 80017b6:	db45      	blt.n	8001844 <extflash_sector_write+0xca>
		result = extflash_raw_erase(address);
 80017b8:	69b8      	ldr	r0, [r7, #24]
 80017ba:	f7ff ff0b 	bl	80015d4 <extflash_raw_erase>
 80017be:	6138      	str	r0, [r7, #16]
		if(result < 0)break;
 80017c0:	693b      	ldr	r3, [r7, #16]
 80017c2:	2b00      	cmp	r3, #0
 80017c4:	db40      	blt.n	8001848 <extflash_sector_write+0xce>

		//Attesa ERASE
		result = extflash_wait_for_wop(FLASH_WRITE_ERASE_TIMEOUT);
 80017c6:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80017ca:	f7ff ff9a 	bl	8001702 <extflash_wait_for_wop>
 80017ce:	6138      	str	r0, [r7, #16]
		if(result < 0)break;
 80017d0:	693b      	ldr	r3, [r7, #16]
 80017d2:	2b00      	cmp	r3, #0
 80017d4:	db3a      	blt.n	800184c <extflash_sector_write+0xd2>

		for(int i=0; i < EFLASH_PAGES_PER_SECTOR; i++)
 80017d6:	2300      	movs	r3, #0
 80017d8:	617b      	str	r3, [r7, #20]
 80017da:	e021      	b.n	8001820 <extflash_sector_write+0xa6>
		{
			result = extflash_set_write_protection(0);
 80017dc:	2000      	movs	r0, #0
 80017de:	f7ff fe90 	bl	8001502 <extflash_set_write_protection>
 80017e2:	6138      	str	r0, [r7, #16]
			if(result < 0)break;
 80017e4:	693b      	ldr	r3, [r7, #16]
 80017e6:	2b00      	cmp	r3, #0
 80017e8:	db1e      	blt.n	8001828 <extflash_sector_write+0xae>
			result = extflash_raw_page_write(address, wPtr);
 80017ea:	69f9      	ldr	r1, [r7, #28]
 80017ec:	69b8      	ldr	r0, [r7, #24]
 80017ee:	f7ff ff0d 	bl	800160c <extflash_raw_page_write>
 80017f2:	6138      	str	r0, [r7, #16]
			if(result < 0)break;
 80017f4:	693b      	ldr	r3, [r7, #16]
 80017f6:	2b00      	cmp	r3, #0
 80017f8:	db18      	blt.n	800182c <extflash_sector_write+0xb2>

			address += EFLASH_DEF_PAGE_SIZE;
 80017fa:	69bb      	ldr	r3, [r7, #24]
 80017fc:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 8001800:	61bb      	str	r3, [r7, #24]
			wPtr += EFLASH_DEF_PAGE_SIZE;
 8001802:	69fb      	ldr	r3, [r7, #28]
 8001804:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 8001808:	61fb      	str	r3, [r7, #28]
			//Attesa write
			result = extflash_wait_for_wop(FLASH_WRITE_ERASE_TIMEOUT);
 800180a:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800180e:	f7ff ff78 	bl	8001702 <extflash_wait_for_wop>
 8001812:	6138      	str	r0, [r7, #16]
			if(result < 0)break;
 8001814:	693b      	ldr	r3, [r7, #16]
 8001816:	2b00      	cmp	r3, #0
 8001818:	db0a      	blt.n	8001830 <extflash_sector_write+0xb6>
		for(int i=0; i < EFLASH_PAGES_PER_SECTOR; i++)
 800181a:	697b      	ldr	r3, [r7, #20]
 800181c:	3301      	adds	r3, #1
 800181e:	617b      	str	r3, [r7, #20]
 8001820:	697b      	ldr	r3, [r7, #20]
 8001822:	2b0f      	cmp	r3, #15
 8001824:	ddda      	ble.n	80017dc <extflash_sector_write+0x62>
 8001826:	e004      	b.n	8001832 <extflash_sector_write+0xb8>
			if(result < 0)break;
 8001828:	bf00      	nop
 800182a:	e002      	b.n	8001832 <extflash_sector_write+0xb8>
			if(result < 0)break;
 800182c:	bf00      	nop
 800182e:	e000      	b.n	8001832 <extflash_sector_write+0xb8>
			if(result < 0)break;
 8001830:	bf00      	nop
		}

		nsectors--;
 8001832:	68bb      	ldr	r3, [r7, #8]
 8001834:	3b01      	subs	r3, #1
 8001836:	60bb      	str	r3, [r7, #8]
	while(nsectors > 0)
 8001838:	68bb      	ldr	r3, [r7, #8]
 800183a:	2b00      	cmp	r3, #0
 800183c:	d1ad      	bne.n	800179a <extflash_sector_write+0x20>
 800183e:	e006      	b.n	800184e <extflash_sector_write+0xd4>
		if(result < 0)break;
 8001840:	bf00      	nop
 8001842:	e004      	b.n	800184e <extflash_sector_write+0xd4>
		if(result < 0)break;
 8001844:	bf00      	nop
 8001846:	e002      	b.n	800184e <extflash_sector_write+0xd4>
		if(result < 0)break;
 8001848:	bf00      	nop
 800184a:	e000      	b.n	800184e <extflash_sector_write+0xd4>
		if(result < 0)break;
 800184c:	bf00      	nop
	}

	extflash_set_write_protection(1);
 800184e:	2001      	movs	r0, #1
 8001850:	f7ff fe57 	bl	8001502 <extflash_set_write_protection>

	return 0;
 8001854:	2300      	movs	r3, #0

}
 8001856:	4618      	mov	r0, r3
 8001858:	3720      	adds	r7, #32
 800185a:	46bd      	mov	sp, r7
 800185c:	bd80      	pop	{r7, pc}

0800185e <extflash_get_sector_size>:


unsigned int extflash_get_sector_size()
{
 800185e:	b480      	push	{r7}
 8001860:	af00      	add	r7, sp, #0
	return EFLASH_DEF_SECTOR_SIZE;
 8001862:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
}
 8001866:	4618      	mov	r0, r3
 8001868:	46bd      	mov	sp, r7
 800186a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800186e:	4770      	bx	lr

08001870 <extflash_get_sector_count>:

unsigned int extflash_get_sector_count()
{
 8001870:	b480      	push	{r7}
 8001872:	af00      	add	r7, sp, #0
	return exflashNumSectors;
 8001874:	4b03      	ldr	r3, [pc, #12]	@ (8001884 <extflash_get_sector_count+0x14>)
 8001876:	681b      	ldr	r3, [r3, #0]
}
 8001878:	4618      	mov	r0, r3
 800187a:	46bd      	mov	sp, r7
 800187c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001880:	4770      	bx	lr
 8001882:	bf00      	nop
 8001884:	20000088 	.word	0x20000088

08001888 <extflash_is_initialized>:
{
	return exflashSize;
}

int extflash_is_initialized()
{
 8001888:	b480      	push	{r7}
 800188a:	af00      	add	r7, sp, #0
	return exflashInitDone;
 800188c:	4b03      	ldr	r3, [pc, #12]	@ (800189c <extflash_is_initialized+0x14>)
 800188e:	781b      	ldrb	r3, [r3, #0]
}
 8001890:	4618      	mov	r0, r3
 8001892:	46bd      	mov	sp, r7
 8001894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001898:	4770      	bx	lr
 800189a:	bf00      	nop
 800189c:	2000008c 	.word	0x2000008c

080018a0 <extflash_init>:

int extflash_init()
{
 80018a0:	b580      	push	{r7, lr}
 80018a2:	b088      	sub	sp, #32
 80018a4:	af00      	add	r7, sp, #0
	uint8_t manufacturer_id[2] = {0};
 80018a6:	2300      	movs	r3, #0
 80018a8:	83bb      	strh	r3, [r7, #28]
	extflash_cmd command = {0};
 80018aa:	f107 0308 	add.w	r3, r7, #8
 80018ae:	2200      	movs	r2, #0
 80018b0:	601a      	str	r2, [r3, #0]
 80018b2:	605a      	str	r2, [r3, #4]
 80018b4:	609a      	str	r2, [r3, #8]
 80018b6:	60da      	str	r2, [r3, #12]
 80018b8:	611a      	str	r2, [r3, #16]
	uint8_t density[4] = {0};
 80018ba:	2300      	movs	r3, #0
 80018bc:	607b      	str	r3, [r7, #4]

	exflashInitDone = 0;
 80018be:	4b26      	ldr	r3, [pc, #152]	@ (8001958 <extflash_init+0xb8>)
 80018c0:	2200      	movs	r2, #0
 80018c2:	701a      	strb	r2, [r3, #0]
	exflashNumSectors = 0;
 80018c4:	4b25      	ldr	r3, [pc, #148]	@ (800195c <extflash_init+0xbc>)
 80018c6:	2200      	movs	r2, #0
 80018c8:	601a      	str	r2, [r3, #0]

	extflash_hard_reset();
 80018ca:	f7ff fd5f 	bl	800138c <extflash_hard_reset>
	extflash_cs_reset();
 80018ce:	f7ff fd45 	bl	800135c <extflash_cs_reset>
	extflash_wp_reset();
 80018d2:	f7ff fd4f 	bl	8001374 <extflash_wp_reset>

	command.cmd = EFLASH_CMD_RDMDID;
 80018d6:	2390      	movs	r3, #144	@ 0x90
 80018d8:	723b      	strb	r3, [r7, #8]
	command.address_en = 1;
 80018da:	2301      	movs	r3, #1
 80018dc:	727b      	strb	r3, [r7, #9]
	command.address = 0;
 80018de:	2300      	movs	r3, #0
 80018e0:	613b      	str	r3, [r7, #16]
	command.rx_nb = 2;
 80018e2:	2302      	movs	r3, #2
 80018e4:	81bb      	strh	r3, [r7, #12]
	command.rx_data = manufacturer_id;
 80018e6:	f107 031c 	add.w	r3, r7, #28
 80018ea:	61bb      	str	r3, [r7, #24]

	extflash_send_cmd(&command);
 80018ec:	f107 0308 	add.w	r3, r7, #8
 80018f0:	4618      	mov	r0, r3
 80018f2:	f7ff fd5f 	bl	80013b4 <extflash_send_cmd>

	if(manufacturer_id[0] != EFLASH_DEF_MANIFACTURER || manufacturer_id[1] != EFLASH_DEF_DEVID)
 80018f6:	7f3b      	ldrb	r3, [r7, #28]
 80018f8:	2b9d      	cmp	r3, #157	@ 0x9d
 80018fa:	d102      	bne.n	8001902 <extflash_init+0x62>
 80018fc:	7f7b      	ldrb	r3, [r7, #29]
 80018fe:	2b17      	cmp	r3, #23
 8001900:	d002      	beq.n	8001908 <extflash_init+0x68>
	{
		return -1;
 8001902:	f04f 33ff 	mov.w	r3, #4294967295
 8001906:	e022      	b.n	800194e <extflash_init+0xae>
	}

	memset((void *)&command, 0, sizeof(command));
 8001908:	f107 0308 	add.w	r3, r7, #8
 800190c:	2214      	movs	r2, #20
 800190e:	2100      	movs	r1, #0
 8001910:	4618      	mov	r0, r3
 8001912:	f00f f9e7 	bl	8010ce4 <memset>

	extflash_read_sfdp(SFDP_FLASH_DENSITY, density, sizeof(density));
 8001916:	1d3b      	adds	r3, r7, #4
 8001918:	2204      	movs	r2, #4
 800191a:	4619      	mov	r1, r3
 800191c:	2034      	movs	r0, #52	@ 0x34
 800191e:	f7ff fe0e 	bl	800153e <extflash_read_sfdp>

	memcpy(&exflashSize, density, sizeof(uint32_t));
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	4a0e      	ldr	r2, [pc, #56]	@ (8001960 <extflash_init+0xc0>)
 8001926:	6013      	str	r3, [r2, #0]

	exflashSize += 1;
 8001928:	4b0d      	ldr	r3, [pc, #52]	@ (8001960 <extflash_init+0xc0>)
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	3301      	adds	r3, #1
 800192e:	4a0c      	ldr	r2, [pc, #48]	@ (8001960 <extflash_init+0xc0>)
 8001930:	6013      	str	r3, [r2, #0]
	exflashSize >>= 3;
 8001932:	4b0b      	ldr	r3, [pc, #44]	@ (8001960 <extflash_init+0xc0>)
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	08db      	lsrs	r3, r3, #3
 8001938:	4a09      	ldr	r2, [pc, #36]	@ (8001960 <extflash_init+0xc0>)
 800193a:	6013      	str	r3, [r2, #0]

	exflashNumSectors = exflashSize / EFLASH_DEF_SECTOR_SIZE;
 800193c:	4b08      	ldr	r3, [pc, #32]	@ (8001960 <extflash_init+0xc0>)
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	0b1b      	lsrs	r3, r3, #12
 8001942:	4a06      	ldr	r2, [pc, #24]	@ (800195c <extflash_init+0xbc>)
 8001944:	6013      	str	r3, [r2, #0]

	exflashInitDone = 1;
 8001946:	4b04      	ldr	r3, [pc, #16]	@ (8001958 <extflash_init+0xb8>)
 8001948:	2201      	movs	r2, #1
 800194a:	701a      	strb	r2, [r3, #0]

	return 0;
 800194c:	2300      	movs	r3, #0

}
 800194e:	4618      	mov	r0, r3
 8001950:	3720      	adds	r7, #32
 8001952:	46bd      	mov	sp, r7
 8001954:	bd80      	pop	{r7, pc}
 8001956:	bf00      	nop
 8001958:	2000008c 	.word	0x2000008c
 800195c:	20000088 	.word	0x20000088
 8001960:	20000084 	.word	0x20000084

08001964 <System_Init>:
#include "lsm6dsv16x_reg.h"
#include "lsm6dsv16x_rw.h"

/*-----INIZiALIZZAZIONE SISTEMA-----*/
void System_Init(void)
{
 8001964:	b580      	push	{r7, lr}
 8001966:	af00      	add	r7, sp, #0
	acc.write_reg = acc_write;
 8001968:	4b14      	ldr	r3, [pc, #80]	@ (80019bc <System_Init+0x58>)
 800196a:	4a15      	ldr	r2, [pc, #84]	@ (80019c0 <System_Init+0x5c>)
 800196c:	601a      	str	r2, [r3, #0]
	acc.read_reg = acc_read;
 800196e:	4b13      	ldr	r3, [pc, #76]	@ (80019bc <System_Init+0x58>)
 8001970:	4a14      	ldr	r2, [pc, #80]	@ (80019c4 <System_Init+0x60>)
 8001972:	605a      	str	r2, [r3, #4]
	acc.handle = &hspi3;
 8001974:	4b11      	ldr	r3, [pc, #68]	@ (80019bc <System_Init+0x58>)
 8001976:	4a14      	ldr	r2, [pc, #80]	@ (80019c8 <System_Init+0x64>)
 8001978:	60da      	str	r2, [r3, #12]

	LED_Start(ORG_LED, FAST);
 800197a:	2102      	movs	r1, #2
 800197c:	2000      	movs	r0, #0
 800197e:	f000 f9ef 	bl	8001d60 <LED_Start>

	BC_Init();
 8001982:	f7ff fad9 	bl	8000f38 <BC_Init>
	INA3221_Init();
 8001986:	f7fe ff20 	bl	80007ca <INA3221_Init>
	Acc_Init(&acc);
 800198a:	480c      	ldr	r0, [pc, #48]	@ (80019bc <System_Init+0x58>)
 800198c:	f000 f942 	bl	8001c14 <Acc_Init>
	FatFS_Init();
 8001990:	f000 f81c 	bl	80019cc <FatFS_Init>
	SIM_Init();
 8001994:	f7fe ffc6 	bl	8000924 <SIM_Init>
	RTC_Init();
 8001998:	f000 f892 	bl	8001ac0 <RTC_Init>
	LED_Start(RED_LED, ON);
 800199c:	2101      	movs	r1, #1
 800199e:	2004      	movs	r0, #4
 80019a0:	f000 f9de 	bl	8001d60 <LED_Start>
	HAL_Delay(9000);
 80019a4:	f242 3028 	movw	r0, #9000	@ 0x2328
 80019a8:	f005 ff9a 	bl	80078e0 <HAL_Delay>

	LED_Stop(RED_LED);
 80019ac:	2004      	movs	r0, #4
 80019ae:	f000 fa47 	bl	8001e40 <LED_Stop>
	LED_Stop(ORG_LED);
 80019b2:	2000      	movs	r0, #0
 80019b4:	f000 fa44 	bl	8001e40 <LED_Stop>
}
 80019b8:	bf00      	nop
 80019ba:	bd80      	pop	{r7, pc}
 80019bc:	20006f90 	.word	0x20006f90
 80019c0:	08002663 	.word	0x08002663
 80019c4:	080026bb 	.word	0x080026bb
 80019c8:	20000280 	.word	0x20000280

080019cc <FatFS_Init>:

/*-----INIZiALIZZAZIONE MEMORIE-----*/
void FatFS_Init(void)
{
 80019cc:	b580      	push	{r7, lr}
 80019ce:	b086      	sub	sp, #24
 80019d0:	af00      	add	r7, sp, #0
	FRESULT fRes = 0;
 80019d2:	2300      	movs	r3, #0
 80019d4:	75fb      	strb	r3, [r7, #23]
	MKFS_PARM mkfs_opt = {0};
 80019d6:	1d3b      	adds	r3, r7, #4
 80019d8:	2200      	movs	r2, #0
 80019da:	601a      	str	r2, [r3, #0]
 80019dc:	605a      	str	r2, [r3, #4]
 80019de:	609a      	str	r2, [r3, #8]
 80019e0:	60da      	str	r2, [r3, #12]

	do
	{
		flags.RAM_Mounted = 0;
 80019e2:	4a30      	ldr	r2, [pc, #192]	@ (8001aa4 <FatFS_Init+0xd8>)
 80019e4:	7813      	ldrb	r3, [r2, #0]
 80019e6:	f023 0308 	bic.w	r3, r3, #8
 80019ea:	7013      	strb	r3, [r2, #0]
		mkfs_opt.fmt = FM_FAT;
 80019ec:	2301      	movs	r3, #1
 80019ee:	713b      	strb	r3, [r7, #4]

		fRes = f_mkfs("/ram", &mkfs_opt, psram_fs.win, sizeof(psram_fs.win));
 80019f0:	1d39      	adds	r1, r7, #4
 80019f2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80019f6:	4a2c      	ldr	r2, [pc, #176]	@ (8001aa8 <FatFS_Init+0xdc>)
 80019f8:	482c      	ldr	r0, [pc, #176]	@ (8001aac <FatFS_Init+0xe0>)
 80019fa:	f005 fa83 	bl	8006f04 <f_mkfs>
 80019fe:	4603      	mov	r3, r0
 8001a00:	75fb      	strb	r3, [r7, #23]
		if (fRes != FR_OK)
 8001a02:	7dfb      	ldrb	r3, [r7, #23]
 8001a04:	2b00      	cmp	r3, #0
 8001a06:	d10f      	bne.n	8001a28 <FatFS_Init+0x5c>
		{
			break;
		}

		fRes = f_mount(&psram_fs, "/ram", 1);
 8001a08:	2201      	movs	r2, #1
 8001a0a:	4928      	ldr	r1, [pc, #160]	@ (8001aac <FatFS_Init+0xe0>)
 8001a0c:	4828      	ldr	r0, [pc, #160]	@ (8001ab0 <FatFS_Init+0xe4>)
 8001a0e:	f004 fcad 	bl	800636c <f_mount>
 8001a12:	4603      	mov	r3, r0
 8001a14:	75fb      	strb	r3, [r7, #23]

		if (fRes != FR_OK)
 8001a16:	7dfb      	ldrb	r3, [r7, #23]
 8001a18:	2b00      	cmp	r3, #0
 8001a1a:	d107      	bne.n	8001a2c <FatFS_Init+0x60>
		{
			break;
		}

		flags.RAM_Mounted = 1;
 8001a1c:	4a21      	ldr	r2, [pc, #132]	@ (8001aa4 <FatFS_Init+0xd8>)
 8001a1e:	7813      	ldrb	r3, [r2, #0]
 8001a20:	f043 0308 	orr.w	r3, r3, #8
 8001a24:	7013      	strb	r3, [r2, #0]

		break;
 8001a26:	e002      	b.n	8001a2e <FatFS_Init+0x62>
			break;
 8001a28:	bf00      	nop
 8001a2a:	e000      	b.n	8001a2e <FatFS_Init+0x62>
			break;
 8001a2c:	bf00      	nop
	} while (1);

	do
	{
		memset((void *)&mkfs_opt, 0, sizeof(mkfs_opt));
 8001a2e:	1d3b      	adds	r3, r7, #4
 8001a30:	2210      	movs	r2, #16
 8001a32:	2100      	movs	r1, #0
 8001a34:	4618      	mov	r0, r3
 8001a36:	f00f f955 	bl	8010ce4 <memset>

		flags.FLASH_Mounted = 0;
 8001a3a:	4a1a      	ldr	r2, [pc, #104]	@ (8001aa4 <FatFS_Init+0xd8>)
 8001a3c:	7813      	ldrb	r3, [r2, #0]
 8001a3e:	f023 0310 	bic.w	r3, r3, #16
 8001a42:	7013      	strb	r3, [r2, #0]
		fRes = f_mount(&flash_fs, "/flash", 1);
 8001a44:	2201      	movs	r2, #1
 8001a46:	491b      	ldr	r1, [pc, #108]	@ (8001ab4 <FatFS_Init+0xe8>)
 8001a48:	481b      	ldr	r0, [pc, #108]	@ (8001ab8 <FatFS_Init+0xec>)
 8001a4a:	f004 fc8f 	bl	800636c <f_mount>
 8001a4e:	4603      	mov	r3, r0
 8001a50:	75fb      	strb	r3, [r7, #23]

		if (fRes == FR_NO_FILESYSTEM)
 8001a52:	7dfb      	ldrb	r3, [r7, #23]
 8001a54:	2b0d      	cmp	r3, #13
 8001a56:	d117      	bne.n	8001a88 <FatFS_Init+0xbc>
		{
			mkfs_opt.fmt = FM_FAT;
 8001a58:	2301      	movs	r3, #1
 8001a5a:	713b      	strb	r3, [r7, #4]

			fRes = f_mkfs("/flash", &mkfs_opt, flash_fs.win, sizeof(flash_fs.win));
 8001a5c:	1d39      	adds	r1, r7, #4
 8001a5e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001a62:	4a16      	ldr	r2, [pc, #88]	@ (8001abc <FatFS_Init+0xf0>)
 8001a64:	4813      	ldr	r0, [pc, #76]	@ (8001ab4 <FatFS_Init+0xe8>)
 8001a66:	f005 fa4d 	bl	8006f04 <f_mkfs>
 8001a6a:	4603      	mov	r3, r0
 8001a6c:	75fb      	strb	r3, [r7, #23]
			if (fRes != FR_OK)
 8001a6e:	7dfb      	ldrb	r3, [r7, #23]
 8001a70:	2b00      	cmp	r3, #0
 8001a72:	d10f      	bne.n	8001a94 <FatFS_Init+0xc8>
			{
				break;
			}

			fRes = f_mount(&flash_fs, "/flash", 1);
 8001a74:	2201      	movs	r2, #1
 8001a76:	490f      	ldr	r1, [pc, #60]	@ (8001ab4 <FatFS_Init+0xe8>)
 8001a78:	480f      	ldr	r0, [pc, #60]	@ (8001ab8 <FatFS_Init+0xec>)
 8001a7a:	f004 fc77 	bl	800636c <f_mount>
 8001a7e:	4603      	mov	r3, r0
 8001a80:	75fb      	strb	r3, [r7, #23]
			if (fRes != FR_OK)
 8001a82:	7dfb      	ldrb	r3, [r7, #23]
 8001a84:	2b00      	cmp	r3, #0
 8001a86:	d107      	bne.n	8001a98 <FatFS_Init+0xcc>
			{
				break;
			}
		}

		flags.FLASH_Mounted = 1;
 8001a88:	4a06      	ldr	r2, [pc, #24]	@ (8001aa4 <FatFS_Init+0xd8>)
 8001a8a:	7813      	ldrb	r3, [r2, #0]
 8001a8c:	f043 0310 	orr.w	r3, r3, #16
 8001a90:	7013      	strb	r3, [r2, #0]

		break;
 8001a92:	e002      	b.n	8001a9a <FatFS_Init+0xce>
				break;
 8001a94:	bf00      	nop
 8001a96:	e000      	b.n	8001a9a <FatFS_Init+0xce>
				break;
 8001a98:	bf00      	nop
	} while (1);


}
 8001a9a:	bf00      	nop
 8001a9c:	3718      	adds	r7, #24
 8001a9e:	46bd      	mov	sp, r7
 8001aa0:	bd80      	pop	{r7, pc}
 8001aa2:	bf00      	nop
 8001aa4:	20003928 	.word	0x20003928
 8001aa8:	20003960 	.word	0x20003960
 8001aac:	08012188 	.word	0x08012188
 8001ab0:	2000392c 	.word	0x2000392c
 8001ab4:	08012190 	.word	0x08012190
 8001ab8:	20004960 	.word	0x20004960
 8001abc:	20004994 	.word	0x20004994

08001ac0 <RTC_Init>:

/*-----INIZiALIZZAZIONE ORA RTC-----*/
void RTC_Init(void)
{
 8001ac0:	b580      	push	{r7, lr}
 8001ac2:	b090      	sub	sp, #64	@ 0x40
 8001ac4:	af00      	add	r7, sp, #0
	char DateTime[30] = "";
 8001ac6:	f107 031c 	add.w	r3, r7, #28
 8001aca:	221e      	movs	r2, #30
 8001acc:	2100      	movs	r1, #0
 8001ace:	4618      	mov	r0, r3
 8001ad0:	f00f f908 	bl	8010ce4 <memset>
	RTC_DateTypeDef sDate = {0};
 8001ad4:	2300      	movs	r3, #0
 8001ad6:	61bb      	str	r3, [r7, #24]
	RTC_TimeTypeDef sTime = {0};
 8001ad8:	1d3b      	adds	r3, r7, #4
 8001ada:	2200      	movs	r2, #0
 8001adc:	601a      	str	r2, [r3, #0]
 8001ade:	605a      	str	r2, [r3, #4]
 8001ae0:	609a      	str	r2, [r3, #8]
 8001ae2:	60da      	str	r2, [r3, #12]
 8001ae4:	611a      	str	r2, [r3, #16]

	SIM_Send_Command("AT+CCLK?\r");
 8001ae6:	4848      	ldr	r0, [pc, #288]	@ (8001c08 <RTC_Init+0x148>)
 8001ae8:	f7ff f8d6 	bl	8000c98 <SIM_Send_Command>
	for(int i = 0; i < strlen(LTE_Ack_buffer); i++)
 8001aec:	2300      	movs	r3, #0
 8001aee:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8001af0:	e00c      	b.n	8001b0c <RTC_Init+0x4c>
	{
		DateTime[i] = LTE_Ack_buffer[i];
 8001af2:	4a46      	ldr	r2, [pc, #280]	@ (8001c0c <RTC_Init+0x14c>)
 8001af4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001af6:	4413      	add	r3, r2
 8001af8:	7819      	ldrb	r1, [r3, #0]
 8001afa:	f107 021c 	add.w	r2, r7, #28
 8001afe:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001b00:	4413      	add	r3, r2
 8001b02:	460a      	mov	r2, r1
 8001b04:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i < strlen(LTE_Ack_buffer); i++)
 8001b06:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001b08:	3301      	adds	r3, #1
 8001b0a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8001b0c:	483f      	ldr	r0, [pc, #252]	@ (8001c0c <RTC_Init+0x14c>)
 8001b0e:	f7fe fb5f 	bl	80001d0 <strlen>
 8001b12:	4602      	mov	r2, r0
 8001b14:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001b16:	429a      	cmp	r2, r3
 8001b18:	d8eb      	bhi.n	8001af2 <RTC_Init+0x32>
	}

	sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8001b1a:	2301      	movs	r3, #1
 8001b1c:	763b      	strb	r3, [r7, #24]
	sDate.Year = (DateTime[7] - '0') * 10 + (DateTime[8] - '0');
 8001b1e:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8001b22:	3b30      	subs	r3, #48	@ 0x30
 8001b24:	b2db      	uxtb	r3, r3
 8001b26:	461a      	mov	r2, r3
 8001b28:	0092      	lsls	r2, r2, #2
 8001b2a:	4413      	add	r3, r2
 8001b2c:	005b      	lsls	r3, r3, #1
 8001b2e:	b2da      	uxtb	r2, r3
 8001b30:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8001b34:	4413      	add	r3, r2
 8001b36:	b2db      	uxtb	r3, r3
 8001b38:	3b30      	subs	r3, #48	@ 0x30
 8001b3a:	b2db      	uxtb	r3, r3
 8001b3c:	76fb      	strb	r3, [r7, #27]
	sDate.Month = (DateTime[10] - '0') * 10 + (DateTime[11] - '0');
 8001b3e:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8001b42:	3b30      	subs	r3, #48	@ 0x30
 8001b44:	b2db      	uxtb	r3, r3
 8001b46:	461a      	mov	r2, r3
 8001b48:	0092      	lsls	r2, r2, #2
 8001b4a:	4413      	add	r3, r2
 8001b4c:	005b      	lsls	r3, r3, #1
 8001b4e:	b2da      	uxtb	r2, r3
 8001b50:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8001b54:	4413      	add	r3, r2
 8001b56:	b2db      	uxtb	r3, r3
 8001b58:	3b30      	subs	r3, #48	@ 0x30
 8001b5a:	b2db      	uxtb	r3, r3
 8001b5c:	767b      	strb	r3, [r7, #25]
	sDate.Date = (DateTime[13] - '0') * 10 + (DateTime[14] - '0');
 8001b5e:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 8001b62:	3b30      	subs	r3, #48	@ 0x30
 8001b64:	b2db      	uxtb	r3, r3
 8001b66:	461a      	mov	r2, r3
 8001b68:	0092      	lsls	r2, r2, #2
 8001b6a:	4413      	add	r3, r2
 8001b6c:	005b      	lsls	r3, r3, #1
 8001b6e:	b2da      	uxtb	r2, r3
 8001b70:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8001b74:	4413      	add	r3, r2
 8001b76:	b2db      	uxtb	r3, r3
 8001b78:	3b30      	subs	r3, #48	@ 0x30
 8001b7a:	b2db      	uxtb	r3, r3
 8001b7c:	76bb      	strb	r3, [r7, #26]

	sTime.Hours = (DateTime[16] - '0') * 10 + (DateTime[17] - '0');
 8001b7e:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8001b82:	3b30      	subs	r3, #48	@ 0x30
 8001b84:	b2db      	uxtb	r3, r3
 8001b86:	461a      	mov	r2, r3
 8001b88:	0092      	lsls	r2, r2, #2
 8001b8a:	4413      	add	r3, r2
 8001b8c:	005b      	lsls	r3, r3, #1
 8001b8e:	b2da      	uxtb	r2, r3
 8001b90:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 8001b94:	4413      	add	r3, r2
 8001b96:	b2db      	uxtb	r3, r3
 8001b98:	3b30      	subs	r3, #48	@ 0x30
 8001b9a:	b2db      	uxtb	r3, r3
 8001b9c:	713b      	strb	r3, [r7, #4]
	sTime.Minutes = (DateTime[19] - '0') * 10 + (DateTime[20] - '0');
 8001b9e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8001ba2:	3b30      	subs	r3, #48	@ 0x30
 8001ba4:	b2db      	uxtb	r3, r3
 8001ba6:	461a      	mov	r2, r3
 8001ba8:	0092      	lsls	r2, r2, #2
 8001baa:	4413      	add	r3, r2
 8001bac:	005b      	lsls	r3, r3, #1
 8001bae:	b2da      	uxtb	r2, r3
 8001bb0:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 8001bb4:	4413      	add	r3, r2
 8001bb6:	b2db      	uxtb	r3, r3
 8001bb8:	3b30      	subs	r3, #48	@ 0x30
 8001bba:	b2db      	uxtb	r3, r3
 8001bbc:	717b      	strb	r3, [r7, #5]
	sTime.Seconds = (DateTime[22] - '0') * 10 + (DateTime[23] - '0');
 8001bbe:	f897 3032 	ldrb.w	r3, [r7, #50]	@ 0x32
 8001bc2:	3b30      	subs	r3, #48	@ 0x30
 8001bc4:	b2db      	uxtb	r3, r3
 8001bc6:	461a      	mov	r2, r3
 8001bc8:	0092      	lsls	r2, r2, #2
 8001bca:	4413      	add	r3, r2
 8001bcc:	005b      	lsls	r3, r3, #1
 8001bce:	b2da      	uxtb	r2, r3
 8001bd0:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8001bd4:	4413      	add	r3, r2
 8001bd6:	b2db      	uxtb	r3, r3
 8001bd8:	3b30      	subs	r3, #48	@ 0x30
 8001bda:	b2db      	uxtb	r3, r3
 8001bdc:	71bb      	strb	r3, [r7, #6]
	sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8001bde:	2300      	movs	r3, #0
 8001be0:	613b      	str	r3, [r7, #16]
	sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8001be2:	2300      	movs	r3, #0
 8001be4:	617b      	str	r3, [r7, #20]

	HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN);
 8001be6:	f107 0318 	add.w	r3, r7, #24
 8001bea:	2200      	movs	r2, #0
 8001bec:	4619      	mov	r1, r3
 8001bee:	4808      	ldr	r0, [pc, #32]	@ (8001c10 <RTC_Init+0x150>)
 8001bf0:	f00a ff1b 	bl	800ca2a <HAL_RTC_SetDate>
	HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD);
 8001bf4:	1d3b      	adds	r3, r7, #4
 8001bf6:	2201      	movs	r2, #1
 8001bf8:	4619      	mov	r1, r3
 8001bfa:	4805      	ldr	r0, [pc, #20]	@ (8001c10 <RTC_Init+0x150>)
 8001bfc:	f00a fe1c 	bl	800c838 <HAL_RTC_SetTime>
}
 8001c00:	bf00      	nop
 8001c02:	3740      	adds	r7, #64	@ 0x40
 8001c04:	46bd      	mov	sp, r7
 8001c06:	bd80      	pop	{r7, pc}
 8001c08:	08012198 	.word	0x08012198
 8001c0c:	20006ec4 	.word	0x20006ec4
 8001c10:	200001f8 	.word	0x200001f8

08001c14 <Acc_Init>:

/*-----INIZiALIZZAZIONE ACCELEROMETRO-----*/
void Acc_Init(stmdev_ctx_t* acc)
{
 8001c14:	b580      	push	{r7, lr}
 8001c16:	b086      	sub	sp, #24
 8001c18:	af00      	add	r7, sp, #0
 8001c1a:	6078      	str	r0, [r7, #4]
	lsm6dsv16x_reset_t rst;
	lsm6dsv16x_pin_int_route_t pin_int = {0};
 8001c1c:	f107 0310 	add.w	r3, r7, #16
 8001c20:	2100      	movs	r1, #0
 8001c22:	460a      	mov	r2, r1
 8001c24:	801a      	strh	r2, [r3, #0]
 8001c26:	460a      	mov	r2, r1
 8001c28:	709a      	strb	r2, [r3, #2]
	uint8_t acc_whoamI = 0;
 8001c2a:	2300      	movs	r3, #0
 8001c2c:	73fb      	strb	r3, [r7, #15]
	uint8_t wmi_cnt = 0;
 8001c2e:	2300      	movs	r3, #0
 8001c30:	75fb      	strb	r3, [r7, #23]

	pin_int.fifo_th = PROPERTY_ENABLE;
 8001c32:	7c3b      	ldrb	r3, [r7, #16]
 8001c34:	f043 0308 	orr.w	r3, r3, #8
 8001c38:	743b      	strb	r3, [r7, #16]

	lsm6dsv16x_device_id_get(acc, &acc_whoamI);
 8001c3a:	f107 030f 	add.w	r3, r7, #15
 8001c3e:	4619      	mov	r1, r3
 8001c40:	6878      	ldr	r0, [r7, #4]
 8001c42:	f000 f9e1 	bl	8002008 <lsm6dsv16x_device_id_get>
	if (acc_whoamI != LSM6DSV16X_ID)
 8001c46:	7bfb      	ldrb	r3, [r7, #15]
 8001c48:	2b70      	cmp	r3, #112	@ 0x70
 8001c4a:	d01a      	beq.n	8001c82 <Acc_Init+0x6e>
		while (acc_whoamI != LSM6DSV16X_ID)
 8001c4c:	e016      	b.n	8001c7c <Acc_Init+0x68>
		{
			lsm6dsv16x_device_id_get(acc, &acc_whoamI);
 8001c4e:	f107 030f 	add.w	r3, r7, #15
 8001c52:	4619      	mov	r1, r3
 8001c54:	6878      	ldr	r0, [r7, #4]
 8001c56:	f000 f9d7 	bl	8002008 <lsm6dsv16x_device_id_get>
			wmi_cnt++;
 8001c5a:	7dfb      	ldrb	r3, [r7, #23]
 8001c5c:	3301      	adds	r3, #1
 8001c5e:	75fb      	strb	r3, [r7, #23]
			if (wmi_cnt == 3)
 8001c60:	7dfb      	ldrb	r3, [r7, #23]
 8001c62:	2b03      	cmp	r3, #3
 8001c64:	d10a      	bne.n	8001c7c <Acc_Init+0x68>
			{
				flags.ACC_Present = 0;
 8001c66:	4a3b      	ldr	r2, [pc, #236]	@ (8001d54 <Acc_Init+0x140>)
 8001c68:	7853      	ldrb	r3, [r2, #1]
 8001c6a:	f023 0301 	bic.w	r3, r3, #1
 8001c6e:	7053      	strb	r3, [r2, #1]
				flags.ACC_Complete = 1;
 8001c70:	4a38      	ldr	r2, [pc, #224]	@ (8001d54 <Acc_Init+0x140>)
 8001c72:	7853      	ldrb	r3, [r2, #1]
 8001c74:	f043 0302 	orr.w	r3, r3, #2
 8001c78:	7053      	strb	r3, [r2, #1]
 8001c7a:	e068      	b.n	8001d4e <Acc_Init+0x13a>
		while (acc_whoamI != LSM6DSV16X_ID)
 8001c7c:	7bfb      	ldrb	r3, [r7, #15]
 8001c7e:	2b70      	cmp	r3, #112	@ 0x70
 8001c80:	d1e5      	bne.n	8001c4e <Acc_Init+0x3a>
				return;
			}
		}
	flags.ACC_Present = 1;
 8001c82:	4a34      	ldr	r2, [pc, #208]	@ (8001d54 <Acc_Init+0x140>)
 8001c84:	7853      	ldrb	r3, [r2, #1]
 8001c86:	f043 0301 	orr.w	r3, r3, #1
 8001c8a:	7053      	strb	r3, [r2, #1]
	lsm6dsv16x_reset_set(acc, LSM6DSV16X_GLOBAL_RST);
 8001c8c:	2101      	movs	r1, #1
 8001c8e:	6878      	ldr	r0, [r7, #4]
 8001c90:	f000 f914 	bl	8001ebc <lsm6dsv16x_reset_set>
	do {
		lsm6dsv16x_reset_get(acc, &rst);
 8001c94:	f107 0316 	add.w	r3, r7, #22
 8001c98:	4619      	mov	r1, r3
 8001c9a:	6878      	ldr	r0, [r7, #4]
 8001c9c:	f000 f95e 	bl	8001f5c <lsm6dsv16x_reset_get>
		HAL_Delay(10);
 8001ca0:	200a      	movs	r0, #10
 8001ca2:	f005 fe1d 	bl	80078e0 <HAL_Delay>
	} while (rst != LSM6DSV16X_READY);
 8001ca6:	7dbb      	ldrb	r3, [r7, #22]
 8001ca8:	2b00      	cmp	r3, #0
 8001caa:	d1f3      	bne.n	8001c94 <Acc_Init+0x80>

	lsm6dsv16x_block_data_update_set(acc, PROPERTY_ENABLE);
 8001cac:	2101      	movs	r1, #1
 8001cae:	6878      	ldr	r0, [r7, #4]
 8001cb0:	f000 faa7 	bl	8002202 <lsm6dsv16x_block_data_update_set>
	lsm6dsv16x_ui_i2c_i3c_mode_set(acc, LSM6DSV16X_I2C_I3C_DISABLE);
 8001cb4:	2101      	movs	r1, #1
 8001cb6:	6878      	ldr	r0, [r7, #4]
 8001cb8:	f000 fcad 	bl	8002616 <lsm6dsv16x_ui_i2c_i3c_mode_set>
	lsm6dsv16x_xl_mode_set(acc, LSM6DSV16X_XL_HIGH_PERFORMANCE_MD);
 8001cbc:	2100      	movs	r1, #0
 8001cbe:	6878      	ldr	r0, [r7, #4]
 8001cc0:	f000 fa04 	bl	80020cc <lsm6dsv16x_xl_mode_set>
	lsm6dsv16x_gy_mode_set(acc, LSM6DSV16X_GY_HIGH_PERFORMANCE_MD);
 8001cc4:	2100      	movs	r1, #0
 8001cc6:	6878      	ldr	r0, [r7, #4]
 8001cc8:	f000 fa75 	bl	80021b6 <lsm6dsv16x_gy_mode_set>
	lsm6dsv16x_fifo_xl_batch_set(acc, LSM6DSV16X_XL_BATCHED_AT_960Hz);
 8001ccc:	2109      	movs	r1, #9
 8001cce:	6878      	ldr	r0, [r7, #4]
 8001cd0:	f000 fc2f 	bl	8002532 <lsm6dsv16x_fifo_xl_batch_set>
	lsm6dsv16x_fifo_gy_batch_set(acc, LSM6DSV16X_GY_NOT_BATCHED);
 8001cd4:	2100      	movs	r1, #0
 8001cd6:	6878      	ldr	r0, [r7, #4]
 8001cd8:	f000 fc51 	bl	800257e <lsm6dsv16x_fifo_gy_batch_set>
	lsm6dsv16x_fifo_mode_set(acc, LSM6DSV16X_BYPASS_MODE);
 8001cdc:	2100      	movs	r1, #0
 8001cde:	6878      	ldr	r0, [r7, #4]
 8001ce0:	f000 fc73 	bl	80025ca <lsm6dsv16x_fifo_mode_set>
	lsm6dsv16x_xl_data_rate_set(acc, LSM6DSV16X_ODR_OFF);
 8001ce4:	2100      	movs	r1, #0
 8001ce6:	6878      	ldr	r0, [r7, #4]
 8001ce8:	f000 f99f 	bl	800202a <lsm6dsv16x_xl_data_rate_set>
	lsm6dsv16x_gy_data_rate_set(acc, LSM6DSV16X_ODR_OFF);
 8001cec:	2100      	movs	r1, #0
 8001cee:	6878      	ldr	r0, [r7, #4]
 8001cf0:	f000 fa12 	bl	8002118 <lsm6dsv16x_gy_data_rate_set>
	lsm6dsv16x_odr_trig_cfg_set(acc, 16);  //800SPS
 8001cf4:	2110      	movs	r1, #16
 8001cf6:	6878      	ldr	r0, [r7, #4]
 8001cf8:	f000 faa9 	bl	800224e <lsm6dsv16x_odr_trig_cfg_set>
	lsm6dsv16x_xl_mode_set(acc, LSM6DSV16X_XL_ODR_TRIGGERED_MD);
 8001cfc:	2103      	movs	r1, #3
 8001cfe:	6878      	ldr	r0, [r7, #4]
 8001d00:	f000 f9e4 	bl	80020cc <lsm6dsv16x_xl_mode_set>
	lsm6dsv16x_gy_mode_set(acc, LSM6DSV16X_GY_ODR_TRIGGERED_MD);
 8001d04:	2103      	movs	r1, #3
 8001d06:	6878      	ldr	r0, [r7, #4]
 8001d08:	f000 fa55 	bl	80021b6 <lsm6dsv16x_gy_mode_set>
	lsm6dsv16x_den_polarity_set(acc, LSM6DSV16X_DEN_ACT_HIGH);
 8001d0c:	2101      	movs	r1, #1
 8001d0e:	6878      	ldr	r0, [r7, #4]
 8001d10:	f000 fbc9 	bl	80024a6 <lsm6dsv16x_den_polarity_set>
	HAL_TIM_PWM_Start(ACC_TIMER, TIM_CHANNEL_3);
 8001d14:	2108      	movs	r1, #8
 8001d16:	4810      	ldr	r0, [pc, #64]	@ (8001d58 <Acc_Init+0x144>)
 8001d18:	f00c fa46 	bl	800e1a8 <HAL_TIM_PWM_Start>
	lsm6dsv16x_xl_data_rate_set(acc, LSM6DSV16X_ODR_AT_960Hz);
 8001d1c:	2109      	movs	r1, #9
 8001d1e:	6878      	ldr	r0, [r7, #4]
 8001d20:	f000 f983 	bl	800202a <lsm6dsv16x_xl_data_rate_set>
	lsm6dsv16x_xl_full_scale_set(acc, LSM6DSV16X_2g);
 8001d24:	2100      	movs	r1, #0
 8001d26:	6878      	ldr	r0, [r7, #4]
 8001d28:	f000 fae0 	bl	80022ec <lsm6dsv16x_xl_full_scale_set>
	lsm6dsv16x_gy_full_scale_set(acc, LSM6DSV16X_2000dps);
 8001d2c:	2104      	movs	r1, #4
 8001d2e:	6878      	ldr	r0, [r7, #4]
 8001d30:	f000 fab6 	bl	80022a0 <lsm6dsv16x_gy_full_scale_set>
	lsm6dsv16x_fifo_watermark_set(acc, ACC_FIFO_WATERMARK);
 8001d34:	21c8      	movs	r1, #200	@ 0xc8
 8001d36:	6878      	ldr	r0, [r7, #4]
 8001d38:	f000 fbdb 	bl	80024f2 <lsm6dsv16x_fifo_watermark_set>
	lsm6dsv16x_pin_int1_route_set(acc, &pin_int);
 8001d3c:	f107 0310 	add.w	r3, r7, #16
 8001d40:	4619      	mov	r1, r3
 8001d42:	6878      	ldr	r0, [r7, #4]
 8001d44:	f000 faf8 	bl	8002338 <lsm6dsv16x_pin_int1_route_set>

	__HAL_GPIO_EXTI_CLEAR_IT(ACC_INTERRUPT);
 8001d48:	4b04      	ldr	r3, [pc, #16]	@ (8001d5c <Acc_Init+0x148>)
 8001d4a:	2204      	movs	r2, #4
 8001d4c:	615a      	str	r2, [r3, #20]
}
 8001d4e:	3718      	adds	r7, #24
 8001d50:	46bd      	mov	sp, r7
 8001d52:	bd80      	pop	{r7, pc}
 8001d54:	20003928 	.word	0x20003928
 8001d58:	2000037c 	.word	0x2000037c
 8001d5c:	40010400 	.word	0x40010400

08001d60 <LED_Start>:
#include "leds.h"
#include "peripherals.h"

/*------ACCENSIONE LED------*/
void LED_Start(uint32_t LED, uint8_t mode)
{
 8001d60:	b580      	push	{r7, lr}
 8001d62:	b08a      	sub	sp, #40	@ 0x28
 8001d64:	af00      	add	r7, sp, #0
 8001d66:	6078      	str	r0, [r7, #4]
 8001d68:	460b      	mov	r3, r1
 8001d6a:	70fb      	strb	r3, [r7, #3]
	TIM_OC_InitTypeDef sConfigOC = {0};
 8001d6c:	f107 030c 	add.w	r3, r7, #12
 8001d70:	2200      	movs	r2, #0
 8001d72:	601a      	str	r2, [r3, #0]
 8001d74:	605a      	str	r2, [r3, #4]
 8001d76:	609a      	str	r2, [r3, #8]
 8001d78:	60da      	str	r2, [r3, #12]
 8001d7a:	611a      	str	r2, [r3, #16]
 8001d7c:	615a      	str	r2, [r3, #20]
 8001d7e:	619a      	str	r2, [r3, #24]
	sConfigOC.OCMode = TIM_OCMODE_TIMING;
 8001d80:	2300      	movs	r3, #0
 8001d82:	60fb      	str	r3, [r7, #12]
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001d84:	2300      	movs	r3, #0
 8001d86:	617b      	str	r3, [r7, #20]
	sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001d88:	2300      	movs	r3, #0
 8001d8a:	61bb      	str	r3, [r7, #24]
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001d8c:	2300      	movs	r3, #0
 8001d8e:	61fb      	str	r3, [r7, #28]
	sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001d90:	2300      	movs	r3, #0
 8001d92:	623b      	str	r3, [r7, #32]
	sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001d94:	2300      	movs	r3, #0
 8001d96:	627b      	str	r3, [r7, #36]	@ 0x24

	switch(mode)
 8001d98:	78fb      	ldrb	r3, [r7, #3]
 8001d9a:	2b03      	cmp	r3, #3
 8001d9c:	d00e      	beq.n	8001dbc <LED_Start+0x5c>
 8001d9e:	2b03      	cmp	r3, #3
 8001da0:	dc10      	bgt.n	8001dc4 <LED_Start+0x64>
 8001da2:	2b01      	cmp	r3, #1
 8001da4:	d002      	beq.n	8001dac <LED_Start+0x4c>
 8001da6:	2b02      	cmp	r3, #2
 8001da8:	d004      	beq.n	8001db4 <LED_Start+0x54>
 8001daa:	e00b      	b.n	8001dc4 <LED_Start+0x64>
	{
	case ON:
		sConfigOC.Pulse = 49999;
 8001dac:	f24c 334f 	movw	r3, #49999	@ 0xc34f
 8001db0:	613b      	str	r3, [r7, #16]
		break;
 8001db2:	e007      	b.n	8001dc4 <LED_Start+0x64>
	case FAST:
		sConfigOC.Pulse = 24999;
 8001db4:	f246 13a7 	movw	r3, #24999	@ 0x61a7
 8001db8:	613b      	str	r3, [r7, #16]
		break;
 8001dba:	e003      	b.n	8001dc4 <LED_Start+0x64>
	case SLOW:
		sConfigOC.Pulse = 12499;
 8001dbc:	f243 03d3 	movw	r3, #12499	@ 0x30d3
 8001dc0:	613b      	str	r3, [r7, #16]
		break;
 8001dc2:	bf00      	nop
	}

	HAL_TIM_Base_Init(LED_TIMER);
 8001dc4:	481d      	ldr	r0, [pc, #116]	@ (8001e3c <LED_Start+0xdc>)
 8001dc6:	f00c f83f 	bl	800de48 <HAL_TIM_Base_Init>
	HAL_TIM_PWM_Init(LED_TIMER);
 8001dca:	481c      	ldr	r0, [pc, #112]	@ (8001e3c <LED_Start+0xdc>)
 8001dcc:	f00c f98a 	bl	800e0e4 <HAL_TIM_PWM_Init>

	switch(LED)
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	2b08      	cmp	r3, #8
 8001dd4:	d009      	beq.n	8001dea <LED_Start+0x8a>
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	2b08      	cmp	r3, #8
 8001dda:	d82a      	bhi.n	8001e32 <LED_Start+0xd2>
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	d01b      	beq.n	8001e1a <LED_Start+0xba>
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	2b04      	cmp	r3, #4
 8001de6:	d00c      	beq.n	8001e02 <LED_Start+0xa2>
	case ORG_LED:
		HAL_TIM_PWM_ConfigChannel(LED_TIMER, &sConfigOC, LED);
		HAL_TIM_PWM_Start(LED_TIMER, LED);
		break;
	}
}
 8001de8:	e023      	b.n	8001e32 <LED_Start+0xd2>
		HAL_TIM_PWM_ConfigChannel(LED_TIMER, &sConfigOC, LED);
 8001dea:	f107 030c 	add.w	r3, r7, #12
 8001dee:	687a      	ldr	r2, [r7, #4]
 8001df0:	4619      	mov	r1, r3
 8001df2:	4812      	ldr	r0, [pc, #72]	@ (8001e3c <LED_Start+0xdc>)
 8001df4:	f00c fce2 	bl	800e7bc <HAL_TIM_PWM_ConfigChannel>
		HAL_TIM_PWM_Start(LED_TIMER, LED);
 8001df8:	6879      	ldr	r1, [r7, #4]
 8001dfa:	4810      	ldr	r0, [pc, #64]	@ (8001e3c <LED_Start+0xdc>)
 8001dfc:	f00c f9d4 	bl	800e1a8 <HAL_TIM_PWM_Start>
		break;
 8001e00:	e017      	b.n	8001e32 <LED_Start+0xd2>
		HAL_TIM_PWM_ConfigChannel(LED_TIMER, &sConfigOC, LED);
 8001e02:	f107 030c 	add.w	r3, r7, #12
 8001e06:	687a      	ldr	r2, [r7, #4]
 8001e08:	4619      	mov	r1, r3
 8001e0a:	480c      	ldr	r0, [pc, #48]	@ (8001e3c <LED_Start+0xdc>)
 8001e0c:	f00c fcd6 	bl	800e7bc <HAL_TIM_PWM_ConfigChannel>
		HAL_TIM_PWM_Start(LED_TIMER, LED);
 8001e10:	6879      	ldr	r1, [r7, #4]
 8001e12:	480a      	ldr	r0, [pc, #40]	@ (8001e3c <LED_Start+0xdc>)
 8001e14:	f00c f9c8 	bl	800e1a8 <HAL_TIM_PWM_Start>
		break;
 8001e18:	e00b      	b.n	8001e32 <LED_Start+0xd2>
		HAL_TIM_PWM_ConfigChannel(LED_TIMER, &sConfigOC, LED);
 8001e1a:	f107 030c 	add.w	r3, r7, #12
 8001e1e:	687a      	ldr	r2, [r7, #4]
 8001e20:	4619      	mov	r1, r3
 8001e22:	4806      	ldr	r0, [pc, #24]	@ (8001e3c <LED_Start+0xdc>)
 8001e24:	f00c fcca 	bl	800e7bc <HAL_TIM_PWM_ConfigChannel>
		HAL_TIM_PWM_Start(LED_TIMER, LED);
 8001e28:	6879      	ldr	r1, [r7, #4]
 8001e2a:	4804      	ldr	r0, [pc, #16]	@ (8001e3c <LED_Start+0xdc>)
 8001e2c:	f00c f9bc 	bl	800e1a8 <HAL_TIM_PWM_Start>
		break;
 8001e30:	bf00      	nop
}
 8001e32:	bf00      	nop
 8001e34:	3728      	adds	r7, #40	@ 0x28
 8001e36:	46bd      	mov	sp, r7
 8001e38:	bd80      	pop	{r7, pc}
 8001e3a:	bf00      	nop
 8001e3c:	200002e4 	.word	0x200002e4

08001e40 <LED_Stop>:

/*------SPEGNIMENTO LED------*/
void LED_Stop(uint32_t LED)
{
 8001e40:	b580      	push	{r7, lr}
 8001e42:	b082      	sub	sp, #8
 8001e44:	af00      	add	r7, sp, #0
 8001e46:	6078      	str	r0, [r7, #4]
	HAL_TIM_PWM_Stop(LED_TIMER, LED);
 8001e48:	6879      	ldr	r1, [r7, #4]
 8001e4a:	4803      	ldr	r0, [pc, #12]	@ (8001e58 <LED_Stop+0x18>)
 8001e4c:	f00c fab2 	bl	800e3b4 <HAL_TIM_PWM_Stop>
}
 8001e50:	bf00      	nop
 8001e52:	3708      	adds	r7, #8
 8001e54:	46bd      	mov	sp, r7
 8001e56:	bd80      	pop	{r7, pc}
 8001e58:	200002e4 	.word	0x200002e4

08001e5c <lsm6dsv16x_read_reg>:
  *
  */
int32_t __weak lsm6dsv16x_read_reg(stmdev_ctx_t *ctx, uint8_t reg,
                                   uint8_t *data,
                                   uint16_t len)
{
 8001e5c:	b590      	push	{r4, r7, lr}
 8001e5e:	b087      	sub	sp, #28
 8001e60:	af00      	add	r7, sp, #0
 8001e62:	60f8      	str	r0, [r7, #12]
 8001e64:	607a      	str	r2, [r7, #4]
 8001e66:	461a      	mov	r2, r3
 8001e68:	460b      	mov	r3, r1
 8001e6a:	72fb      	strb	r3, [r7, #11]
 8001e6c:	4613      	mov	r3, r2
 8001e6e:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8001e70:	68fb      	ldr	r3, [r7, #12]
 8001e72:	685c      	ldr	r4, [r3, #4]
 8001e74:	68fb      	ldr	r3, [r7, #12]
 8001e76:	68d8      	ldr	r0, [r3, #12]
 8001e78:	893b      	ldrh	r3, [r7, #8]
 8001e7a:	7af9      	ldrb	r1, [r7, #11]
 8001e7c:	687a      	ldr	r2, [r7, #4]
 8001e7e:	47a0      	blx	r4
 8001e80:	6178      	str	r0, [r7, #20]

  return ret;
 8001e82:	697b      	ldr	r3, [r7, #20]
}
 8001e84:	4618      	mov	r0, r3
 8001e86:	371c      	adds	r7, #28
 8001e88:	46bd      	mov	sp, r7
 8001e8a:	bd90      	pop	{r4, r7, pc}

08001e8c <lsm6dsv16x_write_reg>:
  *
  */
int32_t __weak lsm6dsv16x_write_reg(stmdev_ctx_t *ctx, uint8_t reg,
                                    uint8_t *data,
                                    uint16_t len)
{
 8001e8c:	b590      	push	{r4, r7, lr}
 8001e8e:	b087      	sub	sp, #28
 8001e90:	af00      	add	r7, sp, #0
 8001e92:	60f8      	str	r0, [r7, #12]
 8001e94:	607a      	str	r2, [r7, #4]
 8001e96:	461a      	mov	r2, r3
 8001e98:	460b      	mov	r3, r1
 8001e9a:	72fb      	strb	r3, [r7, #11]
 8001e9c:	4613      	mov	r3, r2
 8001e9e:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8001ea0:	68fb      	ldr	r3, [r7, #12]
 8001ea2:	681c      	ldr	r4, [r3, #0]
 8001ea4:	68fb      	ldr	r3, [r7, #12]
 8001ea6:	68d8      	ldr	r0, [r3, #12]
 8001ea8:	893b      	ldrh	r3, [r7, #8]
 8001eaa:	7af9      	ldrb	r1, [r7, #11]
 8001eac:	687a      	ldr	r2, [r7, #4]
 8001eae:	47a0      	blx	r4
 8001eb0:	6178      	str	r0, [r7, #20]

  return ret;
 8001eb2:	697b      	ldr	r3, [r7, #20]
}
 8001eb4:	4618      	mov	r0, r3
 8001eb6:	371c      	adds	r7, #28
 8001eb8:	46bd      	mov	sp, r7
 8001eba:	bd90      	pop	{r4, r7, pc}

08001ebc <lsm6dsv16x_reset_set>:
  * @param  val      Reset of the device.
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dsv16x_reset_set(stmdev_ctx_t *ctx, lsm6dsv16x_reset_t val)
{
 8001ebc:	b580      	push	{r7, lr}
 8001ebe:	b086      	sub	sp, #24
 8001ec0:	af00      	add	r7, sp, #0
 8001ec2:	6078      	str	r0, [r7, #4]
 8001ec4:	460b      	mov	r3, r1
 8001ec6:	70fb      	strb	r3, [r7, #3]
  lsm6dsv16x_func_cfg_access_t func_cfg_access;
  lsm6dsv16x_ctrl3_t ctrl3;
  int32_t ret;

  ret = lsm6dsv16x_read_reg(ctx, LSM6DSV16X_CTRL3, (uint8_t *)&ctrl3, 1);
 8001ec8:	f107 020c 	add.w	r2, r7, #12
 8001ecc:	2301      	movs	r3, #1
 8001ece:	2112      	movs	r1, #18
 8001ed0:	6878      	ldr	r0, [r7, #4]
 8001ed2:	f7ff ffc3 	bl	8001e5c <lsm6dsv16x_read_reg>
 8001ed6:	6178      	str	r0, [r7, #20]
  ret += lsm6dsv16x_read_reg(ctx, LSM6DSV16X_FUNC_CFG_ACCESS, (uint8_t *)&func_cfg_access, 1);
 8001ed8:	f107 0210 	add.w	r2, r7, #16
 8001edc:	2301      	movs	r3, #1
 8001ede:	2101      	movs	r1, #1
 8001ee0:	6878      	ldr	r0, [r7, #4]
 8001ee2:	f7ff ffbb 	bl	8001e5c <lsm6dsv16x_read_reg>
 8001ee6:	4602      	mov	r2, r0
 8001ee8:	697b      	ldr	r3, [r7, #20]
 8001eea:	4413      	add	r3, r2
 8001eec:	617b      	str	r3, [r7, #20]
  if (ret != 0) { return ret; }
 8001eee:	697b      	ldr	r3, [r7, #20]
 8001ef0:	2b00      	cmp	r3, #0
 8001ef2:	d001      	beq.n	8001ef8 <lsm6dsv16x_reset_set+0x3c>
 8001ef4:	697b      	ldr	r3, [r7, #20]
 8001ef6:	e02d      	b.n	8001f54 <lsm6dsv16x_reset_set+0x98>

  ctrl3.boot = ((uint8_t)val & 0x04U) >> 2;
 8001ef8:	78fb      	ldrb	r3, [r7, #3]
 8001efa:	089b      	lsrs	r3, r3, #2
 8001efc:	f003 0301 	and.w	r3, r3, #1
 8001f00:	b2da      	uxtb	r2, r3
 8001f02:	7b3b      	ldrb	r3, [r7, #12]
 8001f04:	f362 13c7 	bfi	r3, r2, #7, #1
 8001f08:	733b      	strb	r3, [r7, #12]
  ctrl3.sw_reset = ((uint8_t)val & 0x02U) >> 1;
 8001f0a:	78fb      	ldrb	r3, [r7, #3]
 8001f0c:	085b      	lsrs	r3, r3, #1
 8001f0e:	f003 0301 	and.w	r3, r3, #1
 8001f12:	b2da      	uxtb	r2, r3
 8001f14:	7b3b      	ldrb	r3, [r7, #12]
 8001f16:	f362 0300 	bfi	r3, r2, #0, #1
 8001f1a:	733b      	strb	r3, [r7, #12]
  func_cfg_access.sw_por = (uint8_t)val & 0x01U;
 8001f1c:	78fb      	ldrb	r3, [r7, #3]
 8001f1e:	f003 0301 	and.w	r3, r3, #1
 8001f22:	b2da      	uxtb	r2, r3
 8001f24:	7c3b      	ldrb	r3, [r7, #16]
 8001f26:	f362 0382 	bfi	r3, r2, #2, #1
 8001f2a:	743b      	strb	r3, [r7, #16]

  ret = lsm6dsv16x_write_reg(ctx, LSM6DSV16X_CTRL3, (uint8_t *)&ctrl3, 1);
 8001f2c:	f107 020c 	add.w	r2, r7, #12
 8001f30:	2301      	movs	r3, #1
 8001f32:	2112      	movs	r1, #18
 8001f34:	6878      	ldr	r0, [r7, #4]
 8001f36:	f7ff ffa9 	bl	8001e8c <lsm6dsv16x_write_reg>
 8001f3a:	6178      	str	r0, [r7, #20]
  ret += lsm6dsv16x_write_reg(ctx, LSM6DSV16X_FUNC_CFG_ACCESS, (uint8_t *)&func_cfg_access, 1);
 8001f3c:	f107 0210 	add.w	r2, r7, #16
 8001f40:	2301      	movs	r3, #1
 8001f42:	2101      	movs	r1, #1
 8001f44:	6878      	ldr	r0, [r7, #4]
 8001f46:	f7ff ffa1 	bl	8001e8c <lsm6dsv16x_write_reg>
 8001f4a:	4602      	mov	r2, r0
 8001f4c:	697b      	ldr	r3, [r7, #20]
 8001f4e:	4413      	add	r3, r2
 8001f50:	617b      	str	r3, [r7, #20]

  return ret;
 8001f52:	697b      	ldr	r3, [r7, #20]
}
 8001f54:	4618      	mov	r0, r3
 8001f56:	3718      	adds	r7, #24
 8001f58:	46bd      	mov	sp, r7
 8001f5a:	bd80      	pop	{r7, pc}

08001f5c <lsm6dsv16x_reset_get>:
  * @param  val      Global reset of the device.
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dsv16x_reset_get(stmdev_ctx_t *ctx, lsm6dsv16x_reset_t *val)
{
 8001f5c:	b580      	push	{r7, lr}
 8001f5e:	b086      	sub	sp, #24
 8001f60:	af00      	add	r7, sp, #0
 8001f62:	6078      	str	r0, [r7, #4]
 8001f64:	6039      	str	r1, [r7, #0]
  lsm6dsv16x_func_cfg_access_t func_cfg_access;
  lsm6dsv16x_ctrl3_t ctrl3;
  int32_t ret;

  ret = lsm6dsv16x_read_reg(ctx, LSM6DSV16X_CTRL3, (uint8_t *)&ctrl3, 1);
 8001f66:	f107 020c 	add.w	r2, r7, #12
 8001f6a:	2301      	movs	r3, #1
 8001f6c:	2112      	movs	r1, #18
 8001f6e:	6878      	ldr	r0, [r7, #4]
 8001f70:	f7ff ff74 	bl	8001e5c <lsm6dsv16x_read_reg>
 8001f74:	6178      	str	r0, [r7, #20]
  ret += lsm6dsv16x_read_reg(ctx, LSM6DSV16X_FUNC_CFG_ACCESS, (uint8_t *)&func_cfg_access, 1);
 8001f76:	f107 0210 	add.w	r2, r7, #16
 8001f7a:	2301      	movs	r3, #1
 8001f7c:	2101      	movs	r1, #1
 8001f7e:	6878      	ldr	r0, [r7, #4]
 8001f80:	f7ff ff6c 	bl	8001e5c <lsm6dsv16x_read_reg>
 8001f84:	4602      	mov	r2, r0
 8001f86:	697b      	ldr	r3, [r7, #20]
 8001f88:	4413      	add	r3, r2
 8001f8a:	617b      	str	r3, [r7, #20]
  if (ret != 0) { return ret; }
 8001f8c:	697b      	ldr	r3, [r7, #20]
 8001f8e:	2b00      	cmp	r3, #0
 8001f90:	d001      	beq.n	8001f96 <lsm6dsv16x_reset_get+0x3a>
 8001f92:	697b      	ldr	r3, [r7, #20]
 8001f94:	e033      	b.n	8001ffe <lsm6dsv16x_reset_get+0xa2>

  switch ((ctrl3.sw_reset << 2) + (ctrl3.boot << 1) + func_cfg_access.sw_por)
 8001f96:	7b3b      	ldrb	r3, [r7, #12]
 8001f98:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8001f9c:	b2db      	uxtb	r3, r3
 8001f9e:	009a      	lsls	r2, r3, #2
 8001fa0:	7b3b      	ldrb	r3, [r7, #12]
 8001fa2:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8001fa6:	b2db      	uxtb	r3, r3
 8001fa8:	005b      	lsls	r3, r3, #1
 8001faa:	4413      	add	r3, r2
 8001fac:	7c3a      	ldrb	r2, [r7, #16]
 8001fae:	f3c2 0280 	ubfx	r2, r2, #2, #1
 8001fb2:	b2d2      	uxtb	r2, r2
 8001fb4:	4413      	add	r3, r2
 8001fb6:	2b04      	cmp	r3, #4
 8001fb8:	d81c      	bhi.n	8001ff4 <lsm6dsv16x_reset_get+0x98>
 8001fba:	a201      	add	r2, pc, #4	@ (adr r2, 8001fc0 <lsm6dsv16x_reset_get+0x64>)
 8001fbc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001fc0:	08001fd5 	.word	0x08001fd5
 8001fc4:	08001fdd 	.word	0x08001fdd
 8001fc8:	08001fe5 	.word	0x08001fe5
 8001fcc:	08001ff5 	.word	0x08001ff5
 8001fd0:	08001fed 	.word	0x08001fed
  {
    case LSM6DSV16X_READY:
      *val = LSM6DSV16X_READY;
 8001fd4:	683b      	ldr	r3, [r7, #0]
 8001fd6:	2200      	movs	r2, #0
 8001fd8:	701a      	strb	r2, [r3, #0]
      break;
 8001fda:	e00f      	b.n	8001ffc <lsm6dsv16x_reset_get+0xa0>

    case LSM6DSV16X_GLOBAL_RST:
      *val = LSM6DSV16X_GLOBAL_RST;
 8001fdc:	683b      	ldr	r3, [r7, #0]
 8001fde:	2201      	movs	r2, #1
 8001fe0:	701a      	strb	r2, [r3, #0]
      break;
 8001fe2:	e00b      	b.n	8001ffc <lsm6dsv16x_reset_get+0xa0>

    case LSM6DSV16X_RESTORE_CAL_PARAM:
      *val = LSM6DSV16X_RESTORE_CAL_PARAM;
 8001fe4:	683b      	ldr	r3, [r7, #0]
 8001fe6:	2202      	movs	r2, #2
 8001fe8:	701a      	strb	r2, [r3, #0]
      break;
 8001fea:	e007      	b.n	8001ffc <lsm6dsv16x_reset_get+0xa0>

    case LSM6DSV16X_RESTORE_CTRL_REGS:
      *val = LSM6DSV16X_RESTORE_CTRL_REGS;
 8001fec:	683b      	ldr	r3, [r7, #0]
 8001fee:	2204      	movs	r2, #4
 8001ff0:	701a      	strb	r2, [r3, #0]
      break;
 8001ff2:	e003      	b.n	8001ffc <lsm6dsv16x_reset_get+0xa0>

    default:
      *val = LSM6DSV16X_GLOBAL_RST;
 8001ff4:	683b      	ldr	r3, [r7, #0]
 8001ff6:	2201      	movs	r2, #1
 8001ff8:	701a      	strb	r2, [r3, #0]
      break;
 8001ffa:	bf00      	nop
  }

  return ret;
 8001ffc:	697b      	ldr	r3, [r7, #20]
}
 8001ffe:	4618      	mov	r0, r3
 8002000:	3718      	adds	r7, #24
 8002002:	46bd      	mov	sp, r7
 8002004:	bd80      	pop	{r7, pc}
 8002006:	bf00      	nop

08002008 <lsm6dsv16x_device_id_get>:
  * @param  val      Device ID.
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dsv16x_device_id_get(stmdev_ctx_t *ctx, uint8_t *val)
{
 8002008:	b580      	push	{r7, lr}
 800200a:	b084      	sub	sp, #16
 800200c:	af00      	add	r7, sp, #0
 800200e:	6078      	str	r0, [r7, #4]
 8002010:	6039      	str	r1, [r7, #0]
  int32_t ret;

  ret = lsm6dsv16x_read_reg(ctx, LSM6DSV16X_WHO_AM_I, val, 1);
 8002012:	2301      	movs	r3, #1
 8002014:	683a      	ldr	r2, [r7, #0]
 8002016:	210f      	movs	r1, #15
 8002018:	6878      	ldr	r0, [r7, #4]
 800201a:	f7ff ff1f 	bl	8001e5c <lsm6dsv16x_read_reg>
 800201e:	60f8      	str	r0, [r7, #12]

  return ret;
 8002020:	68fb      	ldr	r3, [r7, #12]
}
 8002022:	4618      	mov	r0, r3
 8002024:	3710      	adds	r7, #16
 8002026:	46bd      	mov	sp, r7
 8002028:	bd80      	pop	{r7, pc}

0800202a <lsm6dsv16x_xl_data_rate_set>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dsv16x_xl_data_rate_set(stmdev_ctx_t *ctx,
                                    lsm6dsv16x_data_rate_t val)
{
 800202a:	b580      	push	{r7, lr}
 800202c:	b086      	sub	sp, #24
 800202e:	af00      	add	r7, sp, #0
 8002030:	6078      	str	r0, [r7, #4]
 8002032:	460b      	mov	r3, r1
 8002034:	70fb      	strb	r3, [r7, #3]
  lsm6dsv16x_ctrl1_t ctrl1;
  lsm6dsv16x_haodr_cfg_t haodr;
  uint8_t sel;
  int32_t ret;

  ret = lsm6dsv16x_read_reg(ctx, LSM6DSV16X_CTRL1, (uint8_t *)&ctrl1, 1);
 8002036:	f107 0210 	add.w	r2, r7, #16
 800203a:	2301      	movs	r3, #1
 800203c:	2110      	movs	r1, #16
 800203e:	6878      	ldr	r0, [r7, #4]
 8002040:	f7ff ff0c 	bl	8001e5c <lsm6dsv16x_read_reg>
 8002044:	6178      	str	r0, [r7, #20]
  if (ret != 0) { return ret; }
 8002046:	697b      	ldr	r3, [r7, #20]
 8002048:	2b00      	cmp	r3, #0
 800204a:	d001      	beq.n	8002050 <lsm6dsv16x_xl_data_rate_set+0x26>
 800204c:	697b      	ldr	r3, [r7, #20]
 800204e:	e039      	b.n	80020c4 <lsm6dsv16x_xl_data_rate_set+0x9a>

  ctrl1.odr_xl = (uint8_t)val & 0x0Fu;
 8002050:	78fb      	ldrb	r3, [r7, #3]
 8002052:	f003 030f 	and.w	r3, r3, #15
 8002056:	b2da      	uxtb	r2, r3
 8002058:	7c3b      	ldrb	r3, [r7, #16]
 800205a:	f362 0303 	bfi	r3, r2, #0, #4
 800205e:	743b      	strb	r3, [r7, #16]
  ret = lsm6dsv16x_write_reg(ctx, LSM6DSV16X_CTRL1, (uint8_t *)&ctrl1, 1);
 8002060:	f107 0210 	add.w	r2, r7, #16
 8002064:	2301      	movs	r3, #1
 8002066:	2110      	movs	r1, #16
 8002068:	6878      	ldr	r0, [r7, #4]
 800206a:	f7ff ff0f 	bl	8001e8c <lsm6dsv16x_write_reg>
 800206e:	6178      	str	r0, [r7, #20]
  if (ret != 0) { return ret; }
 8002070:	697b      	ldr	r3, [r7, #20]
 8002072:	2b00      	cmp	r3, #0
 8002074:	d001      	beq.n	800207a <lsm6dsv16x_xl_data_rate_set+0x50>
 8002076:	697b      	ldr	r3, [r7, #20]
 8002078:	e024      	b.n	80020c4 <lsm6dsv16x_xl_data_rate_set+0x9a>

  sel = ((uint8_t)val >> 4) & 0xFU;
 800207a:	78fb      	ldrb	r3, [r7, #3]
 800207c:	091b      	lsrs	r3, r3, #4
 800207e:	74fb      	strb	r3, [r7, #19]
  if (sel != 0U)
 8002080:	7cfb      	ldrb	r3, [r7, #19]
 8002082:	2b00      	cmp	r3, #0
 8002084:	d01d      	beq.n	80020c2 <lsm6dsv16x_xl_data_rate_set+0x98>
  {
    ret += lsm6dsv16x_read_reg(ctx, LSM6DSV16X_HAODR_CFG, (uint8_t *)&haodr, 1);
 8002086:	f107 020c 	add.w	r2, r7, #12
 800208a:	2301      	movs	r3, #1
 800208c:	2162      	movs	r1, #98	@ 0x62
 800208e:	6878      	ldr	r0, [r7, #4]
 8002090:	f7ff fee4 	bl	8001e5c <lsm6dsv16x_read_reg>
 8002094:	4602      	mov	r2, r0
 8002096:	697b      	ldr	r3, [r7, #20]
 8002098:	4413      	add	r3, r2
 800209a:	617b      	str	r3, [r7, #20]
    haodr.haodr_sel = sel;
 800209c:	7cfb      	ldrb	r3, [r7, #19]
 800209e:	f003 0303 	and.w	r3, r3, #3
 80020a2:	b2da      	uxtb	r2, r3
 80020a4:	7b3b      	ldrb	r3, [r7, #12]
 80020a6:	f362 0301 	bfi	r3, r2, #0, #2
 80020aa:	733b      	strb	r3, [r7, #12]
    ret += lsm6dsv16x_write_reg(ctx, LSM6DSV16X_HAODR_CFG, (uint8_t *)&haodr, 1);
 80020ac:	f107 020c 	add.w	r2, r7, #12
 80020b0:	2301      	movs	r3, #1
 80020b2:	2162      	movs	r1, #98	@ 0x62
 80020b4:	6878      	ldr	r0, [r7, #4]
 80020b6:	f7ff fee9 	bl	8001e8c <lsm6dsv16x_write_reg>
 80020ba:	4602      	mov	r2, r0
 80020bc:	697b      	ldr	r3, [r7, #20]
 80020be:	4413      	add	r3, r2
 80020c0:	617b      	str	r3, [r7, #20]
  }

  return ret;
 80020c2:	697b      	ldr	r3, [r7, #20]
}
 80020c4:	4618      	mov	r0, r3
 80020c6:	3718      	adds	r7, #24
 80020c8:	46bd      	mov	sp, r7
 80020ca:	bd80      	pop	{r7, pc}

080020cc <lsm6dsv16x_xl_mode_set>:
  * @param  val      XL_HIGH_PERFORMANCE_MD, XL_HIGH_ACCURACY_ODR_MD, XL_LOW_POWER_2_AVG_MD, XL_LOW_POWER_4_AVG_MD, XL_LOW_POWER_8_AVG_MD, XL_NORMAL_MD,
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dsv16x_xl_mode_set(stmdev_ctx_t *ctx, lsm6dsv16x_xl_mode_t val)
{
 80020cc:	b580      	push	{r7, lr}
 80020ce:	b084      	sub	sp, #16
 80020d0:	af00      	add	r7, sp, #0
 80020d2:	6078      	str	r0, [r7, #4]
 80020d4:	460b      	mov	r3, r1
 80020d6:	70fb      	strb	r3, [r7, #3]
  lsm6dsv16x_ctrl1_t ctrl1;
  int32_t ret;

  ret = lsm6dsv16x_read_reg(ctx, LSM6DSV16X_CTRL1, (uint8_t *)&ctrl1, 1);
 80020d8:	f107 0208 	add.w	r2, r7, #8
 80020dc:	2301      	movs	r3, #1
 80020de:	2110      	movs	r1, #16
 80020e0:	6878      	ldr	r0, [r7, #4]
 80020e2:	f7ff febb 	bl	8001e5c <lsm6dsv16x_read_reg>
 80020e6:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 80020e8:	68fb      	ldr	r3, [r7, #12]
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	d10f      	bne.n	800210e <lsm6dsv16x_xl_mode_set+0x42>
  {
    ctrl1.op_mode_xl = (uint8_t)val & 0x07U;
 80020ee:	78fb      	ldrb	r3, [r7, #3]
 80020f0:	f003 0307 	and.w	r3, r3, #7
 80020f4:	b2da      	uxtb	r2, r3
 80020f6:	7a3b      	ldrb	r3, [r7, #8]
 80020f8:	f362 1306 	bfi	r3, r2, #4, #3
 80020fc:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsv16x_write_reg(ctx, LSM6DSV16X_CTRL1, (uint8_t *)&ctrl1, 1);
 80020fe:	f107 0208 	add.w	r2, r7, #8
 8002102:	2301      	movs	r3, #1
 8002104:	2110      	movs	r1, #16
 8002106:	6878      	ldr	r0, [r7, #4]
 8002108:	f7ff fec0 	bl	8001e8c <lsm6dsv16x_write_reg>
 800210c:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 800210e:	68fb      	ldr	r3, [r7, #12]
}
 8002110:	4618      	mov	r0, r3
 8002112:	3710      	adds	r7, #16
 8002114:	46bd      	mov	sp, r7
 8002116:	bd80      	pop	{r7, pc}

08002118 <lsm6dsv16x_gy_data_rate_set>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dsv16x_gy_data_rate_set(stmdev_ctx_t *ctx,
                                    lsm6dsv16x_data_rate_t val)
{
 8002118:	b580      	push	{r7, lr}
 800211a:	b086      	sub	sp, #24
 800211c:	af00      	add	r7, sp, #0
 800211e:	6078      	str	r0, [r7, #4]
 8002120:	460b      	mov	r3, r1
 8002122:	70fb      	strb	r3, [r7, #3]
  lsm6dsv16x_ctrl2_t ctrl2;
  lsm6dsv16x_haodr_cfg_t haodr;
  uint8_t sel;
  int32_t ret;

  ret = lsm6dsv16x_read_reg(ctx, LSM6DSV16X_CTRL2, (uint8_t *)&ctrl2, 1);
 8002124:	f107 0210 	add.w	r2, r7, #16
 8002128:	2301      	movs	r3, #1
 800212a:	2111      	movs	r1, #17
 800212c:	6878      	ldr	r0, [r7, #4]
 800212e:	f7ff fe95 	bl	8001e5c <lsm6dsv16x_read_reg>
 8002132:	6178      	str	r0, [r7, #20]
  ctrl2.odr_g = (uint8_t)val & 0x0Fu;
 8002134:	78fb      	ldrb	r3, [r7, #3]
 8002136:	f003 030f 	and.w	r3, r3, #15
 800213a:	b2da      	uxtb	r2, r3
 800213c:	7c3b      	ldrb	r3, [r7, #16]
 800213e:	f362 0303 	bfi	r3, r2, #0, #4
 8002142:	743b      	strb	r3, [r7, #16]
  ret += lsm6dsv16x_write_reg(ctx, LSM6DSV16X_CTRL2, (uint8_t *)&ctrl2, 1);
 8002144:	f107 0210 	add.w	r2, r7, #16
 8002148:	2301      	movs	r3, #1
 800214a:	2111      	movs	r1, #17
 800214c:	6878      	ldr	r0, [r7, #4]
 800214e:	f7ff fe9d 	bl	8001e8c <lsm6dsv16x_write_reg>
 8002152:	4602      	mov	r2, r0
 8002154:	697b      	ldr	r3, [r7, #20]
 8002156:	4413      	add	r3, r2
 8002158:	617b      	str	r3, [r7, #20]
  if (ret != 0) { return ret; }
 800215a:	697b      	ldr	r3, [r7, #20]
 800215c:	2b00      	cmp	r3, #0
 800215e:	d001      	beq.n	8002164 <lsm6dsv16x_gy_data_rate_set+0x4c>
 8002160:	697b      	ldr	r3, [r7, #20]
 8002162:	e024      	b.n	80021ae <lsm6dsv16x_gy_data_rate_set+0x96>

  sel = ((uint8_t)val >> 4) & 0xFU;
 8002164:	78fb      	ldrb	r3, [r7, #3]
 8002166:	091b      	lsrs	r3, r3, #4
 8002168:	74fb      	strb	r3, [r7, #19]
  if (sel != 0U)
 800216a:	7cfb      	ldrb	r3, [r7, #19]
 800216c:	2b00      	cmp	r3, #0
 800216e:	d01d      	beq.n	80021ac <lsm6dsv16x_gy_data_rate_set+0x94>
  {
    ret += lsm6dsv16x_read_reg(ctx, LSM6DSV16X_HAODR_CFG, (uint8_t *)&haodr, 1);
 8002170:	f107 020c 	add.w	r2, r7, #12
 8002174:	2301      	movs	r3, #1
 8002176:	2162      	movs	r1, #98	@ 0x62
 8002178:	6878      	ldr	r0, [r7, #4]
 800217a:	f7ff fe6f 	bl	8001e5c <lsm6dsv16x_read_reg>
 800217e:	4602      	mov	r2, r0
 8002180:	697b      	ldr	r3, [r7, #20]
 8002182:	4413      	add	r3, r2
 8002184:	617b      	str	r3, [r7, #20]
    haodr.haodr_sel = sel;
 8002186:	7cfb      	ldrb	r3, [r7, #19]
 8002188:	f003 0303 	and.w	r3, r3, #3
 800218c:	b2da      	uxtb	r2, r3
 800218e:	7b3b      	ldrb	r3, [r7, #12]
 8002190:	f362 0301 	bfi	r3, r2, #0, #2
 8002194:	733b      	strb	r3, [r7, #12]
    ret += lsm6dsv16x_write_reg(ctx, LSM6DSV16X_HAODR_CFG, (uint8_t *)&haodr, 1);
 8002196:	f107 020c 	add.w	r2, r7, #12
 800219a:	2301      	movs	r3, #1
 800219c:	2162      	movs	r1, #98	@ 0x62
 800219e:	6878      	ldr	r0, [r7, #4]
 80021a0:	f7ff fe74 	bl	8001e8c <lsm6dsv16x_write_reg>
 80021a4:	4602      	mov	r2, r0
 80021a6:	697b      	ldr	r3, [r7, #20]
 80021a8:	4413      	add	r3, r2
 80021aa:	617b      	str	r3, [r7, #20]
  }

  return ret;
 80021ac:	697b      	ldr	r3, [r7, #20]
}
 80021ae:	4618      	mov	r0, r3
 80021b0:	3718      	adds	r7, #24
 80021b2:	46bd      	mov	sp, r7
 80021b4:	bd80      	pop	{r7, pc}

080021b6 <lsm6dsv16x_gy_mode_set>:
  * @param  val      GY_HIGH_PERFORMANCE_MD, GY_HIGH_ACCURACY_ODR_MD, GY_SLEEP_MD, GY_LOW_POWER_MD,
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dsv16x_gy_mode_set(stmdev_ctx_t *ctx, lsm6dsv16x_gy_mode_t val)
{
 80021b6:	b580      	push	{r7, lr}
 80021b8:	b084      	sub	sp, #16
 80021ba:	af00      	add	r7, sp, #0
 80021bc:	6078      	str	r0, [r7, #4]
 80021be:	460b      	mov	r3, r1
 80021c0:	70fb      	strb	r3, [r7, #3]
  lsm6dsv16x_ctrl2_t ctrl2;
  int32_t ret;

  ret = lsm6dsv16x_read_reg(ctx, LSM6DSV16X_CTRL2, (uint8_t *)&ctrl2, 1);
 80021c2:	f107 0208 	add.w	r2, r7, #8
 80021c6:	2301      	movs	r3, #1
 80021c8:	2111      	movs	r1, #17
 80021ca:	6878      	ldr	r0, [r7, #4]
 80021cc:	f7ff fe46 	bl	8001e5c <lsm6dsv16x_read_reg>
 80021d0:	60f8      	str	r0, [r7, #12]
  if (ret == 0)
 80021d2:	68fb      	ldr	r3, [r7, #12]
 80021d4:	2b00      	cmp	r3, #0
 80021d6:	d10f      	bne.n	80021f8 <lsm6dsv16x_gy_mode_set+0x42>
  {
    ctrl2.op_mode_g = (uint8_t)val & 0x07U;
 80021d8:	78fb      	ldrb	r3, [r7, #3]
 80021da:	f003 0307 	and.w	r3, r3, #7
 80021de:	b2da      	uxtb	r2, r3
 80021e0:	7a3b      	ldrb	r3, [r7, #8]
 80021e2:	f362 1306 	bfi	r3, r2, #4, #3
 80021e6:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsv16x_write_reg(ctx, LSM6DSV16X_CTRL2, (uint8_t *)&ctrl2, 1);
 80021e8:	f107 0208 	add.w	r2, r7, #8
 80021ec:	2301      	movs	r3, #1
 80021ee:	2111      	movs	r1, #17
 80021f0:	6878      	ldr	r0, [r7, #4]
 80021f2:	f7ff fe4b 	bl	8001e8c <lsm6dsv16x_write_reg>
 80021f6:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 80021f8:	68fb      	ldr	r3, [r7, #12]
}
 80021fa:	4618      	mov	r0, r3
 80021fc:	3710      	adds	r7, #16
 80021fe:	46bd      	mov	sp, r7
 8002200:	bd80      	pop	{r7, pc}

08002202 <lsm6dsv16x_block_data_update_set>:
  * @param  val      Block Data Update (BDU): output registers are not updated until LSB and MSB have been read).
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dsv16x_block_data_update_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8002202:	b580      	push	{r7, lr}
 8002204:	b084      	sub	sp, #16
 8002206:	af00      	add	r7, sp, #0
 8002208:	6078      	str	r0, [r7, #4]
 800220a:	460b      	mov	r3, r1
 800220c:	70fb      	strb	r3, [r7, #3]
  lsm6dsv16x_ctrl3_t ctrl3;
  int32_t ret;

  ret = lsm6dsv16x_read_reg(ctx, LSM6DSV16X_CTRL3, (uint8_t *)&ctrl3, 1);
 800220e:	f107 0208 	add.w	r2, r7, #8
 8002212:	2301      	movs	r3, #1
 8002214:	2112      	movs	r1, #18
 8002216:	6878      	ldr	r0, [r7, #4]
 8002218:	f7ff fe20 	bl	8001e5c <lsm6dsv16x_read_reg>
 800221c:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 800221e:	68fb      	ldr	r3, [r7, #12]
 8002220:	2b00      	cmp	r3, #0
 8002222:	d10f      	bne.n	8002244 <lsm6dsv16x_block_data_update_set+0x42>
  {
    ctrl3.bdu = val;
 8002224:	78fb      	ldrb	r3, [r7, #3]
 8002226:	f003 0301 	and.w	r3, r3, #1
 800222a:	b2da      	uxtb	r2, r3
 800222c:	7a3b      	ldrb	r3, [r7, #8]
 800222e:	f362 1386 	bfi	r3, r2, #6, #1
 8002232:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsv16x_write_reg(ctx, LSM6DSV16X_CTRL3, (uint8_t *)&ctrl3, 1);
 8002234:	f107 0208 	add.w	r2, r7, #8
 8002238:	2301      	movs	r3, #1
 800223a:	2112      	movs	r1, #18
 800223c:	6878      	ldr	r0, [r7, #4]
 800223e:	f7ff fe25 	bl	8001e8c <lsm6dsv16x_write_reg>
 8002242:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8002244:	68fb      	ldr	r3, [r7, #12]
}
 8002246:	4618      	mov	r0, r3
 8002248:	3710      	adds	r7, #16
 800224a:	46bd      	mov	sp, r7
 800224c:	bd80      	pop	{r7, pc}

0800224e <lsm6dsv16x_odr_trig_cfg_set>:
  * @param  val      number of data in the reference period.
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dsv16x_odr_trig_cfg_set(stmdev_ctx_t *ctx, uint8_t val)
{
 800224e:	b580      	push	{r7, lr}
 8002250:	b084      	sub	sp, #16
 8002252:	af00      	add	r7, sp, #0
 8002254:	6078      	str	r0, [r7, #4]
 8002256:	460b      	mov	r3, r1
 8002258:	70fb      	strb	r3, [r7, #3]
  lsm6dsv16x_odr_trig_cfg_t odr_trig;
  int32_t ret;

  if (val >= 1U && val <= 3U) {
 800225a:	78fb      	ldrb	r3, [r7, #3]
 800225c:	2b00      	cmp	r3, #0
 800225e:	d005      	beq.n	800226c <lsm6dsv16x_odr_trig_cfg_set+0x1e>
 8002260:	78fb      	ldrb	r3, [r7, #3]
 8002262:	2b03      	cmp	r3, #3
 8002264:	d802      	bhi.n	800226c <lsm6dsv16x_odr_trig_cfg_set+0x1e>
    return -1;
 8002266:	f04f 33ff 	mov.w	r3, #4294967295
 800226a:	e015      	b.n	8002298 <lsm6dsv16x_odr_trig_cfg_set+0x4a>
  }

  ret = lsm6dsv16x_read_reg(ctx, LSM6DSV16X_ODR_TRIG_CFG, (uint8_t *)&odr_trig, 1);
 800226c:	f107 0208 	add.w	r2, r7, #8
 8002270:	2301      	movs	r3, #1
 8002272:	2106      	movs	r1, #6
 8002274:	6878      	ldr	r0, [r7, #4]
 8002276:	f7ff fdf1 	bl	8001e5c <lsm6dsv16x_read_reg>
 800227a:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 800227c:	68fb      	ldr	r3, [r7, #12]
 800227e:	2b00      	cmp	r3, #0
 8002280:	d109      	bne.n	8002296 <lsm6dsv16x_odr_trig_cfg_set+0x48>
  {
    odr_trig.odr_trig_nodr = val;
 8002282:	78fb      	ldrb	r3, [r7, #3]
 8002284:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsv16x_write_reg(ctx, LSM6DSV16X_ODR_TRIG_CFG, (uint8_t *)&odr_trig, 1);
 8002286:	f107 0208 	add.w	r2, r7, #8
 800228a:	2301      	movs	r3, #1
 800228c:	2106      	movs	r1, #6
 800228e:	6878      	ldr	r0, [r7, #4]
 8002290:	f7ff fdfc 	bl	8001e8c <lsm6dsv16x_write_reg>
 8002294:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8002296:	68fb      	ldr	r3, [r7, #12]
}
 8002298:	4618      	mov	r0, r3
 800229a:	3710      	adds	r7, #16
 800229c:	46bd      	mov	sp, r7
 800229e:	bd80      	pop	{r7, pc}

080022a0 <lsm6dsv16x_gy_full_scale_set>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dsv16x_gy_full_scale_set(stmdev_ctx_t *ctx,
                                     lsm6dsv16x_gy_full_scale_t val)
{
 80022a0:	b580      	push	{r7, lr}
 80022a2:	b084      	sub	sp, #16
 80022a4:	af00      	add	r7, sp, #0
 80022a6:	6078      	str	r0, [r7, #4]
 80022a8:	460b      	mov	r3, r1
 80022aa:	70fb      	strb	r3, [r7, #3]
  lsm6dsv16x_ctrl6_t ctrl6;
  int32_t ret;

  ret = lsm6dsv16x_read_reg(ctx, LSM6DSV16X_CTRL6, (uint8_t *)&ctrl6, 1);
 80022ac:	f107 0208 	add.w	r2, r7, #8
 80022b0:	2301      	movs	r3, #1
 80022b2:	2115      	movs	r1, #21
 80022b4:	6878      	ldr	r0, [r7, #4]
 80022b6:	f7ff fdd1 	bl	8001e5c <lsm6dsv16x_read_reg>
 80022ba:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 80022bc:	68fb      	ldr	r3, [r7, #12]
 80022be:	2b00      	cmp	r3, #0
 80022c0:	d10f      	bne.n	80022e2 <lsm6dsv16x_gy_full_scale_set+0x42>
  {
    ctrl6.fs_g = (uint8_t)val & 0xfu;
 80022c2:	78fb      	ldrb	r3, [r7, #3]
 80022c4:	f003 030f 	and.w	r3, r3, #15
 80022c8:	b2da      	uxtb	r2, r3
 80022ca:	7a3b      	ldrb	r3, [r7, #8]
 80022cc:	f362 0303 	bfi	r3, r2, #0, #4
 80022d0:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsv16x_write_reg(ctx, LSM6DSV16X_CTRL6, (uint8_t *)&ctrl6, 1);
 80022d2:	f107 0208 	add.w	r2, r7, #8
 80022d6:	2301      	movs	r3, #1
 80022d8:	2115      	movs	r1, #21
 80022da:	6878      	ldr	r0, [r7, #4]
 80022dc:	f7ff fdd6 	bl	8001e8c <lsm6dsv16x_write_reg>
 80022e0:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 80022e2:	68fb      	ldr	r3, [r7, #12]
}
 80022e4:	4618      	mov	r0, r3
 80022e6:	3710      	adds	r7, #16
 80022e8:	46bd      	mov	sp, r7
 80022ea:	bd80      	pop	{r7, pc}

080022ec <lsm6dsv16x_xl_full_scale_set>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dsv16x_xl_full_scale_set(stmdev_ctx_t *ctx,
                                     lsm6dsv16x_xl_full_scale_t val)
{
 80022ec:	b580      	push	{r7, lr}
 80022ee:	b084      	sub	sp, #16
 80022f0:	af00      	add	r7, sp, #0
 80022f2:	6078      	str	r0, [r7, #4]
 80022f4:	460b      	mov	r3, r1
 80022f6:	70fb      	strb	r3, [r7, #3]
  lsm6dsv16x_ctrl8_t ctrl8;
  int32_t ret;

  ret = lsm6dsv16x_read_reg(ctx, LSM6DSV16X_CTRL8, (uint8_t *)&ctrl8, 1);
 80022f8:	f107 0208 	add.w	r2, r7, #8
 80022fc:	2301      	movs	r3, #1
 80022fe:	2117      	movs	r1, #23
 8002300:	6878      	ldr	r0, [r7, #4]
 8002302:	f7ff fdab 	bl	8001e5c <lsm6dsv16x_read_reg>
 8002306:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8002308:	68fb      	ldr	r3, [r7, #12]
 800230a:	2b00      	cmp	r3, #0
 800230c:	d10f      	bne.n	800232e <lsm6dsv16x_xl_full_scale_set+0x42>
  {
    ctrl8.fs_xl = (uint8_t)val & 0x3U;
 800230e:	78fb      	ldrb	r3, [r7, #3]
 8002310:	f003 0303 	and.w	r3, r3, #3
 8002314:	b2da      	uxtb	r2, r3
 8002316:	7a3b      	ldrb	r3, [r7, #8]
 8002318:	f362 0301 	bfi	r3, r2, #0, #2
 800231c:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsv16x_write_reg(ctx, LSM6DSV16X_CTRL8, (uint8_t *)&ctrl8, 1);
 800231e:	f107 0208 	add.w	r2, r7, #8
 8002322:	2301      	movs	r3, #1
 8002324:	2117      	movs	r1, #23
 8002326:	6878      	ldr	r0, [r7, #4]
 8002328:	f7ff fdb0 	bl	8001e8c <lsm6dsv16x_write_reg>
 800232c:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 800232e:	68fb      	ldr	r3, [r7, #12]
}
 8002330:	4618      	mov	r0, r3
 8002332:	3710      	adds	r7, #16
 8002334:	46bd      	mov	sp, r7
 8002336:	bd80      	pop	{r7, pc}

08002338 <lsm6dsv16x_pin_int1_route_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsv16x_pin_int1_route_set(stmdev_ctx_t *ctx,
                                      lsm6dsv16x_pin_int_route_t *val)
{
 8002338:	b580      	push	{r7, lr}
 800233a:	b086      	sub	sp, #24
 800233c:	af00      	add	r7, sp, #0
 800233e:	6078      	str	r0, [r7, #4]
 8002340:	6039      	str	r1, [r7, #0]
  lsm6dsv16x_int1_ctrl_t          int1_ctrl;
  lsm6dsv16x_md1_cfg_t            md1_cfg;
  int32_t ret;

  ret = lsm6dsv16x_read_reg(ctx, LSM6DSV16X_INT1_CTRL, (uint8_t *)&int1_ctrl, 1);
 8002342:	f107 0210 	add.w	r2, r7, #16
 8002346:	2301      	movs	r3, #1
 8002348:	210d      	movs	r1, #13
 800234a:	6878      	ldr	r0, [r7, #4]
 800234c:	f7ff fd86 	bl	8001e5c <lsm6dsv16x_read_reg>
 8002350:	6178      	str	r0, [r7, #20]
  if (ret != 0) { return ret; }
 8002352:	697b      	ldr	r3, [r7, #20]
 8002354:	2b00      	cmp	r3, #0
 8002356:	d001      	beq.n	800235c <lsm6dsv16x_pin_int1_route_set+0x24>
 8002358:	697b      	ldr	r3, [r7, #20]
 800235a:	e0a0      	b.n	800249e <lsm6dsv16x_pin_int1_route_set+0x166>

  int1_ctrl.int1_drdy_xl       = val->drdy_xl;
 800235c:	683b      	ldr	r3, [r7, #0]
 800235e:	781b      	ldrb	r3, [r3, #0]
 8002360:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8002364:	b2da      	uxtb	r2, r3
 8002366:	7c3b      	ldrb	r3, [r7, #16]
 8002368:	f362 0300 	bfi	r3, r2, #0, #1
 800236c:	743b      	strb	r3, [r7, #16]
  int1_ctrl.int1_drdy_g        = val->drdy_g;
 800236e:	683b      	ldr	r3, [r7, #0]
 8002370:	781b      	ldrb	r3, [r3, #0]
 8002372:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8002376:	b2da      	uxtb	r2, r3
 8002378:	7c3b      	ldrb	r3, [r7, #16]
 800237a:	f362 0341 	bfi	r3, r2, #1, #1
 800237e:	743b      	strb	r3, [r7, #16]
  int1_ctrl.int1_fifo_th       = val->fifo_th;
 8002380:	683b      	ldr	r3, [r7, #0]
 8002382:	781b      	ldrb	r3, [r3, #0]
 8002384:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8002388:	b2da      	uxtb	r2, r3
 800238a:	7c3b      	ldrb	r3, [r7, #16]
 800238c:	f362 03c3 	bfi	r3, r2, #3, #1
 8002390:	743b      	strb	r3, [r7, #16]
  int1_ctrl.int1_fifo_ovr      = val->fifo_ovr;
 8002392:	683b      	ldr	r3, [r7, #0]
 8002394:	781b      	ldrb	r3, [r3, #0]
 8002396:	f3c3 1300 	ubfx	r3, r3, #4, #1
 800239a:	b2da      	uxtb	r2, r3
 800239c:	7c3b      	ldrb	r3, [r7, #16]
 800239e:	f362 1304 	bfi	r3, r2, #4, #1
 80023a2:	743b      	strb	r3, [r7, #16]
  int1_ctrl.int1_fifo_full     = val->fifo_full;
 80023a4:	683b      	ldr	r3, [r7, #0]
 80023a6:	781b      	ldrb	r3, [r3, #0]
 80023a8:	f3c3 1340 	ubfx	r3, r3, #5, #1
 80023ac:	b2da      	uxtb	r2, r3
 80023ae:	7c3b      	ldrb	r3, [r7, #16]
 80023b0:	f362 1345 	bfi	r3, r2, #5, #1
 80023b4:	743b      	strb	r3, [r7, #16]
  int1_ctrl.int1_cnt_bdr       = val->cnt_bdr;
 80023b6:	683b      	ldr	r3, [r7, #0]
 80023b8:	781b      	ldrb	r3, [r3, #0]
 80023ba:	f3c3 1380 	ubfx	r3, r3, #6, #1
 80023be:	b2da      	uxtb	r2, r3
 80023c0:	7c3b      	ldrb	r3, [r7, #16]
 80023c2:	f362 1386 	bfi	r3, r2, #6, #1
 80023c6:	743b      	strb	r3, [r7, #16]

  ret = lsm6dsv16x_write_reg(ctx, LSM6DSV16X_INT1_CTRL, (uint8_t *)&int1_ctrl, 1);
 80023c8:	f107 0210 	add.w	r2, r7, #16
 80023cc:	2301      	movs	r3, #1
 80023ce:	210d      	movs	r1, #13
 80023d0:	6878      	ldr	r0, [r7, #4]
 80023d2:	f7ff fd5b 	bl	8001e8c <lsm6dsv16x_write_reg>
 80023d6:	6178      	str	r0, [r7, #20]
  if (ret != 0) { return ret; }
 80023d8:	697b      	ldr	r3, [r7, #20]
 80023da:	2b00      	cmp	r3, #0
 80023dc:	d001      	beq.n	80023e2 <lsm6dsv16x_pin_int1_route_set+0xaa>
 80023de:	697b      	ldr	r3, [r7, #20]
 80023e0:	e05d      	b.n	800249e <lsm6dsv16x_pin_int1_route_set+0x166>

  ret = lsm6dsv16x_read_reg(ctx, LSM6DSV16X_MD1_CFG, (uint8_t *)&md1_cfg, 1);
 80023e2:	f107 020c 	add.w	r2, r7, #12
 80023e6:	2301      	movs	r3, #1
 80023e8:	215e      	movs	r1, #94	@ 0x5e
 80023ea:	6878      	ldr	r0, [r7, #4]
 80023ec:	f7ff fd36 	bl	8001e5c <lsm6dsv16x_read_reg>
 80023f0:	6178      	str	r0, [r7, #20]
  if (ret != 0) { return ret; }
 80023f2:	697b      	ldr	r3, [r7, #20]
 80023f4:	2b00      	cmp	r3, #0
 80023f6:	d001      	beq.n	80023fc <lsm6dsv16x_pin_int1_route_set+0xc4>
 80023f8:	697b      	ldr	r3, [r7, #20]
 80023fa:	e050      	b.n	800249e <lsm6dsv16x_pin_int1_route_set+0x166>

  md1_cfg.int1_shub            = val->shub;
 80023fc:	683b      	ldr	r3, [r7, #0]
 80023fe:	785b      	ldrb	r3, [r3, #1]
 8002400:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8002404:	b2da      	uxtb	r2, r3
 8002406:	7b3b      	ldrb	r3, [r7, #12]
 8002408:	f362 0300 	bfi	r3, r2, #0, #1
 800240c:	733b      	strb	r3, [r7, #12]
  md1_cfg.int1_emb_func        = val->emb_func;
 800240e:	683b      	ldr	r3, [r7, #0]
 8002410:	785b      	ldrb	r3, [r3, #1]
 8002412:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8002416:	b2da      	uxtb	r2, r3
 8002418:	7b3b      	ldrb	r3, [r7, #12]
 800241a:	f362 0341 	bfi	r3, r2, #1, #1
 800241e:	733b      	strb	r3, [r7, #12]
  md1_cfg.int1_6d              = val->sixd;
 8002420:	683b      	ldr	r3, [r7, #0]
 8002422:	785b      	ldrb	r3, [r3, #1]
 8002424:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8002428:	b2da      	uxtb	r2, r3
 800242a:	7b3b      	ldrb	r3, [r7, #12]
 800242c:	f362 0382 	bfi	r3, r2, #2, #1
 8002430:	733b      	strb	r3, [r7, #12]
  md1_cfg.int1_single_tap      = val->single_tap;
 8002432:	683b      	ldr	r3, [r7, #0]
 8002434:	785b      	ldrb	r3, [r3, #1]
 8002436:	f3c3 1300 	ubfx	r3, r3, #4, #1
 800243a:	b2da      	uxtb	r2, r3
 800243c:	7b3b      	ldrb	r3, [r7, #12]
 800243e:	f362 1386 	bfi	r3, r2, #6, #1
 8002442:	733b      	strb	r3, [r7, #12]
  md1_cfg.int1_double_tap      = val->double_tap;
 8002444:	683b      	ldr	r3, [r7, #0]
 8002446:	785b      	ldrb	r3, [r3, #1]
 8002448:	f3c3 1340 	ubfx	r3, r3, #5, #1
 800244c:	b2da      	uxtb	r2, r3
 800244e:	7b3b      	ldrb	r3, [r7, #12]
 8002450:	f362 03c3 	bfi	r3, r2, #3, #1
 8002454:	733b      	strb	r3, [r7, #12]
  md1_cfg.int1_wu              = val->wakeup;
 8002456:	683b      	ldr	r3, [r7, #0]
 8002458:	785b      	ldrb	r3, [r3, #1]
 800245a:	f3c3 1380 	ubfx	r3, r3, #6, #1
 800245e:	b2da      	uxtb	r2, r3
 8002460:	7b3b      	ldrb	r3, [r7, #12]
 8002462:	f362 1345 	bfi	r3, r2, #5, #1
 8002466:	733b      	strb	r3, [r7, #12]
  md1_cfg.int1_ff              = val->freefall;
 8002468:	683b      	ldr	r3, [r7, #0]
 800246a:	785b      	ldrb	r3, [r3, #1]
 800246c:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8002470:	b2da      	uxtb	r2, r3
 8002472:	7b3b      	ldrb	r3, [r7, #12]
 8002474:	f362 1304 	bfi	r3, r2, #4, #1
 8002478:	733b      	strb	r3, [r7, #12]
  md1_cfg.int1_sleep_change    = val->sleep_change;
 800247a:	683b      	ldr	r3, [r7, #0]
 800247c:	789b      	ldrb	r3, [r3, #2]
 800247e:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8002482:	b2da      	uxtb	r2, r3
 8002484:	7b3b      	ldrb	r3, [r7, #12]
 8002486:	f362 13c7 	bfi	r3, r2, #7, #1
 800248a:	733b      	strb	r3, [r7, #12]

  ret = lsm6dsv16x_write_reg(ctx, LSM6DSV16X_MD1_CFG, (uint8_t *)&md1_cfg, 1);
 800248c:	f107 020c 	add.w	r2, r7, #12
 8002490:	2301      	movs	r3, #1
 8002492:	215e      	movs	r1, #94	@ 0x5e
 8002494:	6878      	ldr	r0, [r7, #4]
 8002496:	f7ff fcf9 	bl	8001e8c <lsm6dsv16x_write_reg>
 800249a:	6178      	str	r0, [r7, #20]

  return ret;
 800249c:	697b      	ldr	r3, [r7, #20]
}
 800249e:	4618      	mov	r0, r3
 80024a0:	3718      	adds	r7, #24
 80024a2:	46bd      	mov	sp, r7
 80024a4:	bd80      	pop	{r7, pc}

080024a6 <lsm6dsv16x_den_polarity_set>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dsv16x_den_polarity_set(stmdev_ctx_t *ctx,
                                    lsm6dsv16x_den_polarity_t val)
{
 80024a6:	b580      	push	{r7, lr}
 80024a8:	b084      	sub	sp, #16
 80024aa:	af00      	add	r7, sp, #0
 80024ac:	6078      	str	r0, [r7, #4]
 80024ae:	460b      	mov	r3, r1
 80024b0:	70fb      	strb	r3, [r7, #3]
  lsm6dsv16x_ctrl4_t ctrl4;
  int32_t ret;

  ret = lsm6dsv16x_read_reg(ctx, LSM6DSV16X_CTRL4, (uint8_t *)&ctrl4, 1);
 80024b2:	f107 0208 	add.w	r2, r7, #8
 80024b6:	2301      	movs	r3, #1
 80024b8:	2113      	movs	r1, #19
 80024ba:	6878      	ldr	r0, [r7, #4]
 80024bc:	f7ff fcce 	bl	8001e5c <lsm6dsv16x_read_reg>
 80024c0:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 80024c2:	68fb      	ldr	r3, [r7, #12]
 80024c4:	2b00      	cmp	r3, #0
 80024c6:	d10f      	bne.n	80024e8 <lsm6dsv16x_den_polarity_set+0x42>
  {
    ctrl4.int2_in_lh = (uint8_t)val & 0x1U;
 80024c8:	78fb      	ldrb	r3, [r7, #3]
 80024ca:	f003 0301 	and.w	r3, r3, #1
 80024ce:	b2da      	uxtb	r2, r3
 80024d0:	7a3b      	ldrb	r3, [r7, #8]
 80024d2:	f362 0300 	bfi	r3, r2, #0, #1
 80024d6:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsv16x_write_reg(ctx, LSM6DSV16X_CTRL4, (uint8_t *)&ctrl4, 1);
 80024d8:	f107 0208 	add.w	r2, r7, #8
 80024dc:	2301      	movs	r3, #1
 80024de:	2113      	movs	r1, #19
 80024e0:	6878      	ldr	r0, [r7, #4]
 80024e2:	f7ff fcd3 	bl	8001e8c <lsm6dsv16x_write_reg>
 80024e6:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 80024e8:	68fb      	ldr	r3, [r7, #12]
}
 80024ea:	4618      	mov	r0, r3
 80024ec:	3710      	adds	r7, #16
 80024ee:	46bd      	mov	sp, r7
 80024f0:	bd80      	pop	{r7, pc}

080024f2 <lsm6dsv16x_fifo_watermark_set>:
  * @param  val      FIFO watermark threshold (1 LSb = TAG (1 Byte) + 1 sensor (6 Bytes) written in FIFO).
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dsv16x_fifo_watermark_set(stmdev_ctx_t *ctx, uint8_t val)
{
 80024f2:	b580      	push	{r7, lr}
 80024f4:	b084      	sub	sp, #16
 80024f6:	af00      	add	r7, sp, #0
 80024f8:	6078      	str	r0, [r7, #4]
 80024fa:	460b      	mov	r3, r1
 80024fc:	70fb      	strb	r3, [r7, #3]
  lsm6dsv16x_fifo_ctrl1_t fifo_ctrl1;
  int32_t ret;

  ret = lsm6dsv16x_read_reg(ctx, LSM6DSV16X_FIFO_CTRL1, (uint8_t *)&fifo_ctrl1, 1);
 80024fe:	f107 0208 	add.w	r2, r7, #8
 8002502:	2301      	movs	r3, #1
 8002504:	2107      	movs	r1, #7
 8002506:	6878      	ldr	r0, [r7, #4]
 8002508:	f7ff fca8 	bl	8001e5c <lsm6dsv16x_read_reg>
 800250c:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 800250e:	68fb      	ldr	r3, [r7, #12]
 8002510:	2b00      	cmp	r3, #0
 8002512:	d109      	bne.n	8002528 <lsm6dsv16x_fifo_watermark_set+0x36>
  {
    fifo_ctrl1.wtm = val;
 8002514:	78fb      	ldrb	r3, [r7, #3]
 8002516:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsv16x_write_reg(ctx, LSM6DSV16X_FIFO_CTRL1, (uint8_t *)&fifo_ctrl1, 1);
 8002518:	f107 0208 	add.w	r2, r7, #8
 800251c:	2301      	movs	r3, #1
 800251e:	2107      	movs	r1, #7
 8002520:	6878      	ldr	r0, [r7, #4]
 8002522:	f7ff fcb3 	bl	8001e8c <lsm6dsv16x_write_reg>
 8002526:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8002528:	68fb      	ldr	r3, [r7, #12]
}
 800252a:	4618      	mov	r0, r3
 800252c:	3710      	adds	r7, #16
 800252e:	46bd      	mov	sp, r7
 8002530:	bd80      	pop	{r7, pc}

08002532 <lsm6dsv16x_fifo_xl_batch_set>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dsv16x_fifo_xl_batch_set(stmdev_ctx_t *ctx,
                                     lsm6dsv16x_fifo_xl_batch_t val)
{
 8002532:	b580      	push	{r7, lr}
 8002534:	b084      	sub	sp, #16
 8002536:	af00      	add	r7, sp, #0
 8002538:	6078      	str	r0, [r7, #4]
 800253a:	460b      	mov	r3, r1
 800253c:	70fb      	strb	r3, [r7, #3]
  lsm6dsv16x_fifo_ctrl3_t fifo_ctrl3;
  int32_t ret;

  ret = lsm6dsv16x_read_reg(ctx, LSM6DSV16X_FIFO_CTRL3, (uint8_t *)&fifo_ctrl3, 1);
 800253e:	f107 0208 	add.w	r2, r7, #8
 8002542:	2301      	movs	r3, #1
 8002544:	2109      	movs	r1, #9
 8002546:	6878      	ldr	r0, [r7, #4]
 8002548:	f7ff fc88 	bl	8001e5c <lsm6dsv16x_read_reg>
 800254c:	60f8      	str	r0, [r7, #12]
  if (ret == 0)
 800254e:	68fb      	ldr	r3, [r7, #12]
 8002550:	2b00      	cmp	r3, #0
 8002552:	d10f      	bne.n	8002574 <lsm6dsv16x_fifo_xl_batch_set+0x42>
  {
    fifo_ctrl3.bdr_xl = (uint8_t)val & 0xFu;
 8002554:	78fb      	ldrb	r3, [r7, #3]
 8002556:	f003 030f 	and.w	r3, r3, #15
 800255a:	b2da      	uxtb	r2, r3
 800255c:	7a3b      	ldrb	r3, [r7, #8]
 800255e:	f362 0303 	bfi	r3, r2, #0, #4
 8002562:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsv16x_write_reg(ctx, LSM6DSV16X_FIFO_CTRL3, (uint8_t *)&fifo_ctrl3, 1);
 8002564:	f107 0208 	add.w	r2, r7, #8
 8002568:	2301      	movs	r3, #1
 800256a:	2109      	movs	r1, #9
 800256c:	6878      	ldr	r0, [r7, #4]
 800256e:	f7ff fc8d 	bl	8001e8c <lsm6dsv16x_write_reg>
 8002572:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8002574:	68fb      	ldr	r3, [r7, #12]
}
 8002576:	4618      	mov	r0, r3
 8002578:	3710      	adds	r7, #16
 800257a:	46bd      	mov	sp, r7
 800257c:	bd80      	pop	{r7, pc}

0800257e <lsm6dsv16x_fifo_gy_batch_set>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dsv16x_fifo_gy_batch_set(stmdev_ctx_t *ctx,
                                     lsm6dsv16x_fifo_gy_batch_t val)
{
 800257e:	b580      	push	{r7, lr}
 8002580:	b084      	sub	sp, #16
 8002582:	af00      	add	r7, sp, #0
 8002584:	6078      	str	r0, [r7, #4]
 8002586:	460b      	mov	r3, r1
 8002588:	70fb      	strb	r3, [r7, #3]
  lsm6dsv16x_fifo_ctrl3_t fifo_ctrl3;
  int32_t ret;

  ret = lsm6dsv16x_read_reg(ctx, LSM6DSV16X_FIFO_CTRL3, (uint8_t *)&fifo_ctrl3, 1);
 800258a:	f107 0208 	add.w	r2, r7, #8
 800258e:	2301      	movs	r3, #1
 8002590:	2109      	movs	r1, #9
 8002592:	6878      	ldr	r0, [r7, #4]
 8002594:	f7ff fc62 	bl	8001e5c <lsm6dsv16x_read_reg>
 8002598:	60f8      	str	r0, [r7, #12]
  if (ret == 0)
 800259a:	68fb      	ldr	r3, [r7, #12]
 800259c:	2b00      	cmp	r3, #0
 800259e:	d10f      	bne.n	80025c0 <lsm6dsv16x_fifo_gy_batch_set+0x42>
  {
    fifo_ctrl3.bdr_gy = (uint8_t)val & 0x0Fu;
 80025a0:	78fb      	ldrb	r3, [r7, #3]
 80025a2:	f003 030f 	and.w	r3, r3, #15
 80025a6:	b2da      	uxtb	r2, r3
 80025a8:	7a3b      	ldrb	r3, [r7, #8]
 80025aa:	f362 1307 	bfi	r3, r2, #4, #4
 80025ae:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsv16x_write_reg(ctx, LSM6DSV16X_FIFO_CTRL3, (uint8_t *)&fifo_ctrl3, 1);
 80025b0:	f107 0208 	add.w	r2, r7, #8
 80025b4:	2301      	movs	r3, #1
 80025b6:	2109      	movs	r1, #9
 80025b8:	6878      	ldr	r0, [r7, #4]
 80025ba:	f7ff fc67 	bl	8001e8c <lsm6dsv16x_write_reg>
 80025be:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 80025c0:	68fb      	ldr	r3, [r7, #12]
}
 80025c2:	4618      	mov	r0, r3
 80025c4:	3710      	adds	r7, #16
 80025c6:	46bd      	mov	sp, r7
 80025c8:	bd80      	pop	{r7, pc}

080025ca <lsm6dsv16x_fifo_mode_set>:
  * @param  val      BYPASS_MODE, FIFO_MODE, STREAM_WTM_TO_FULL_MODE, STREAM_TO_FIFO_MODE, BYPASS_TO_STREAM_MODE, STREAM_MODE, BYPASS_TO_FIFO_MODE,
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dsv16x_fifo_mode_set(stmdev_ctx_t *ctx, lsm6dsv16x_fifo_mode_t val)
{
 80025ca:	b580      	push	{r7, lr}
 80025cc:	b084      	sub	sp, #16
 80025ce:	af00      	add	r7, sp, #0
 80025d0:	6078      	str	r0, [r7, #4]
 80025d2:	460b      	mov	r3, r1
 80025d4:	70fb      	strb	r3, [r7, #3]
  lsm6dsv16x_fifo_ctrl4_t fifo_ctrl4;
  int32_t ret;

  ret = lsm6dsv16x_read_reg(ctx, LSM6DSV16X_FIFO_CTRL4, (uint8_t *)&fifo_ctrl4, 1);
 80025d6:	f107 0208 	add.w	r2, r7, #8
 80025da:	2301      	movs	r3, #1
 80025dc:	210a      	movs	r1, #10
 80025de:	6878      	ldr	r0, [r7, #4]
 80025e0:	f7ff fc3c 	bl	8001e5c <lsm6dsv16x_read_reg>
 80025e4:	60f8      	str	r0, [r7, #12]
  if (ret == 0)
 80025e6:	68fb      	ldr	r3, [r7, #12]
 80025e8:	2b00      	cmp	r3, #0
 80025ea:	d10f      	bne.n	800260c <lsm6dsv16x_fifo_mode_set+0x42>
  {
    fifo_ctrl4.fifo_mode = (uint8_t)val & 0x07U;
 80025ec:	78fb      	ldrb	r3, [r7, #3]
 80025ee:	f003 0307 	and.w	r3, r3, #7
 80025f2:	b2da      	uxtb	r2, r3
 80025f4:	7a3b      	ldrb	r3, [r7, #8]
 80025f6:	f362 0302 	bfi	r3, r2, #0, #3
 80025fa:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsv16x_write_reg(ctx, LSM6DSV16X_FIFO_CTRL4, (uint8_t *)&fifo_ctrl4, 1);
 80025fc:	f107 0208 	add.w	r2, r7, #8
 8002600:	2301      	movs	r3, #1
 8002602:	210a      	movs	r1, #10
 8002604:	6878      	ldr	r0, [r7, #4]
 8002606:	f7ff fc41 	bl	8001e8c <lsm6dsv16x_write_reg>
 800260a:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 800260c:	68fb      	ldr	r3, [r7, #12]
}
 800260e:	4618      	mov	r0, r3
 8002610:	3710      	adds	r7, #16
 8002612:	46bd      	mov	sp, r7
 8002614:	bd80      	pop	{r7, pc}

08002616 <lsm6dsv16x_ui_i2c_i3c_mode_set>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dsv16x_ui_i2c_i3c_mode_set(stmdev_ctx_t *ctx,
                                       lsm6dsv16x_ui_i2c_i3c_mode_t val)
{
 8002616:	b580      	push	{r7, lr}
 8002618:	b084      	sub	sp, #16
 800261a:	af00      	add	r7, sp, #0
 800261c:	6078      	str	r0, [r7, #4]
 800261e:	460b      	mov	r3, r1
 8002620:	70fb      	strb	r3, [r7, #3]
  lsm6dsv16x_if_cfg_t if_cfg;
  int32_t ret;

  ret = lsm6dsv16x_read_reg(ctx, LSM6DSV16X_IF_CFG, (uint8_t *)&if_cfg, 1);
 8002622:	f107 0208 	add.w	r2, r7, #8
 8002626:	2301      	movs	r3, #1
 8002628:	2103      	movs	r1, #3
 800262a:	6878      	ldr	r0, [r7, #4]
 800262c:	f7ff fc16 	bl	8001e5c <lsm6dsv16x_read_reg>
 8002630:	60f8      	str	r0, [r7, #12]
  if (ret == 0)
 8002632:	68fb      	ldr	r3, [r7, #12]
 8002634:	2b00      	cmp	r3, #0
 8002636:	d10f      	bne.n	8002658 <lsm6dsv16x_ui_i2c_i3c_mode_set+0x42>
  {
    if_cfg.i2c_i3c_disable = (uint8_t)val & 0x1U;
 8002638:	78fb      	ldrb	r3, [r7, #3]
 800263a:	f003 0301 	and.w	r3, r3, #1
 800263e:	b2da      	uxtb	r2, r3
 8002640:	7a3b      	ldrb	r3, [r7, #8]
 8002642:	f362 0300 	bfi	r3, r2, #0, #1
 8002646:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsv16x_write_reg(ctx, LSM6DSV16X_IF_CFG, (uint8_t *)&if_cfg, 1);
 8002648:	f107 0208 	add.w	r2, r7, #8
 800264c:	2301      	movs	r3, #1
 800264e:	2103      	movs	r1, #3
 8002650:	6878      	ldr	r0, [r7, #4]
 8002652:	f7ff fc1b 	bl	8001e8c <lsm6dsv16x_write_reg>
 8002656:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8002658:	68fb      	ldr	r3, [r7, #12]
}
 800265a:	4618      	mov	r0, r3
 800265c:	3710      	adds	r7, #16
 800265e:	46bd      	mov	sp, r7
 8002660:	bd80      	pop	{r7, pc}

08002662 <acc_write>:
#include "global_variables.h"
#include "peripherals.h"

/* -------------SCRITTURA ACCELEROMETRO-------------*/
int32_t acc_write(void *handle, uint8_t reg, const uint8_t *bufp, uint16_t len)
{
 8002662:	b580      	push	{r7, lr}
 8002664:	b084      	sub	sp, #16
 8002666:	af00      	add	r7, sp, #0
 8002668:	60f8      	str	r0, [r7, #12]
 800266a:	607a      	str	r2, [r7, #4]
 800266c:	461a      	mov	r2, r3
 800266e:	460b      	mov	r3, r1
 8002670:	72fb      	strb	r3, [r7, #11]
 8002672:	4613      	mov	r3, r2
 8002674:	813b      	strh	r3, [r7, #8]
	HAL_GPIO_WritePin(ACC_nCS_GPIO_Port, ACC_nCS_Pin, GPIO_PIN_RESET);
 8002676:	2200      	movs	r2, #0
 8002678:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800267c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002680:	f007 fad0 	bl	8009c24 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(handle, &reg, 1, 1000);
 8002684:	f107 010b 	add.w	r1, r7, #11
 8002688:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800268c:	2201      	movs	r2, #1
 800268e:	68f8      	ldr	r0, [r7, #12]
 8002690:	f00a fd51 	bl	800d136 <HAL_SPI_Transmit>
	HAL_SPI_Transmit(handle, (uint8_t*) bufp, len, 1000);
 8002694:	893a      	ldrh	r2, [r7, #8]
 8002696:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800269a:	6879      	ldr	r1, [r7, #4]
 800269c:	68f8      	ldr	r0, [r7, #12]
 800269e:	f00a fd4a 	bl	800d136 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(ACC_nCS_GPIO_Port, ACC_nCS_Pin, GPIO_PIN_SET);
 80026a2:	2201      	movs	r2, #1
 80026a4:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80026a8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80026ac:	f007 faba 	bl	8009c24 <HAL_GPIO_WritePin>
	return 0;
 80026b0:	2300      	movs	r3, #0
}
 80026b2:	4618      	mov	r0, r3
 80026b4:	3710      	adds	r7, #16
 80026b6:	46bd      	mov	sp, r7
 80026b8:	bd80      	pop	{r7, pc}

080026ba <acc_read>:

/* -------------LETTURA ACCELEROMETRO-------------*/
int32_t acc_read(void *handle, uint8_t reg, uint8_t *bufp, uint16_t len)
{
 80026ba:	b580      	push	{r7, lr}
 80026bc:	b084      	sub	sp, #16
 80026be:	af00      	add	r7, sp, #0
 80026c0:	60f8      	str	r0, [r7, #12]
 80026c2:	607a      	str	r2, [r7, #4]
 80026c4:	461a      	mov	r2, r3
 80026c6:	460b      	mov	r3, r1
 80026c8:	72fb      	strb	r3, [r7, #11]
 80026ca:	4613      	mov	r3, r2
 80026cc:	813b      	strh	r3, [r7, #8]
	reg |= 0x80;
 80026ce:	7afb      	ldrb	r3, [r7, #11]
 80026d0:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80026d4:	b2db      	uxtb	r3, r3
 80026d6:	72fb      	strb	r3, [r7, #11]
	HAL_GPIO_WritePin(ACC_nCS_GPIO_Port, ACC_nCS_Pin, GPIO_PIN_RESET);
 80026d8:	2200      	movs	r2, #0
 80026da:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80026de:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80026e2:	f007 fa9f 	bl	8009c24 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(handle, &reg, 1, 1000);
 80026e6:	f107 010b 	add.w	r1, r7, #11
 80026ea:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80026ee:	2201      	movs	r2, #1
 80026f0:	68f8      	ldr	r0, [r7, #12]
 80026f2:	f00a fd20 	bl	800d136 <HAL_SPI_Transmit>
	HAL_SPI_Receive(handle, bufp, len, 1000);
 80026f6:	893a      	ldrh	r2, [r7, #8]
 80026f8:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80026fc:	6879      	ldr	r1, [r7, #4]
 80026fe:	68f8      	ldr	r0, [r7, #12]
 8002700:	f00a fe8f 	bl	800d422 <HAL_SPI_Receive>
	HAL_GPIO_WritePin(ACC_nCS_GPIO_Port, ACC_nCS_Pin, GPIO_PIN_SET);
 8002704:	2201      	movs	r2, #1
 8002706:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800270a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800270e:	f007 fa89 	bl	8009c24 <HAL_GPIO_WritePin>
	return 0;
 8002712:	2300      	movs	r3, #0
}
 8002714:	4618      	mov	r0, r3
 8002716:	3710      	adds	r7, #16
 8002718:	46bd      	mov	sp, r7
 800271a:	bd80      	pop	{r7, pc}

0800271c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800271c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800271e:	b08b      	sub	sp, #44	@ 0x2c
 8002720:	af08      	add	r7, sp, #32
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002722:	f005 f868 	bl	80077f6 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002726:	f000 f96b 	bl	8002a00 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800272a:	f000 fe37 	bl	800339c <MX_GPIO_Init>
  MX_DMA_Init();
 800272e:	f000 fe0f 	bl	8003350 <MX_DMA_Init>
  MX_QUADSPI_Init();
 8002732:	f000 fa91 	bl	8002c58 <MX_QUADSPI_Init>
  MX_SPI2_Init();
 8002736:	f000 fb47 	bl	8002dc8 <MX_SPI2_Init>
  MX_USART1_UART_Init();
 800273a:	f000 fdd9 	bl	80032f0 <MX_USART1_UART_Init>
  MX_ADC1_Init();
 800273e:	f000 f9b1 	bl	8002aa4 <MX_ADC1_Init>
  MX_I2C3_Init();
 8002742:	f000 fa49 	bl	8002bd8 <MX_I2C3_Init>
  MX_TIM2_Init();
 8002746:	f000 fc63 	bl	8003010 <MX_TIM2_Init>
  MX_UART4_Init();
 800274a:	f000 fda1 	bl	8003290 <MX_UART4_Init>
  MX_TIM1_Init();
 800274e:	f000 fbb7 	bl	8002ec0 <MX_TIM1_Init>
  MX_CRC_Init();
 8002752:	f000 fa1f 	bl	8002b94 <MX_CRC_Init>
  MX_TIM4_Init();
 8002756:	f000 fd27 	bl	80031a8 <MX_TIM4_Init>
  MX_RTC_Init();
 800275a:	f000 faa3 	bl	8002ca4 <MX_RTC_Init>
  MX_SPI3_Init();
 800275e:	f000 fb71 	bl	8002e44 <MX_SPI3_Init>
  MX_TIM3_Init();
 8002762:	f000 fca9 	bl	80030b8 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  System_Init();
 8002766:	f7ff f8fd 	bl	8001964 <System_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  switch(state)
 800276a:	4b8d      	ldr	r3, [pc, #564]	@ (80029a0 <main+0x284>)
 800276c:	781b      	ldrb	r3, [r3, #0]
 800276e:	2b02      	cmp	r3, #2
 8002770:	f000 80e5 	beq.w	800293e <main+0x222>
 8002774:	2b02      	cmp	r3, #2
 8002776:	f300 810e 	bgt.w	8002996 <main+0x27a>
 800277a:	2b00      	cmp	r3, #0
 800277c:	d002      	beq.n	8002784 <main+0x68>
 800277e:	2b01      	cmp	r3, #1
 8002780:	d04d      	beq.n	800281e <main+0x102>
		  }
		  state = MEASURE_INIT_STATE;
		  break;

	  default:
		  break;
 8002782:	e108      	b.n	8002996 <main+0x27a>
		  res = f_open(&sys.file_meas_1, MEASURE_FILE_NAME_1, FA_READ | FA_WRITE | FA_CREATE_ALWAYS);
 8002784:	220b      	movs	r2, #11
 8002786:	4987      	ldr	r1, [pc, #540]	@ (80029a4 <main+0x288>)
 8002788:	4887      	ldr	r0, [pc, #540]	@ (80029a8 <main+0x28c>)
 800278a:	f003 fe39 	bl	8006400 <f_open>
 800278e:	4603      	mov	r3, r0
 8002790:	461a      	mov	r2, r3
 8002792:	4b86      	ldr	r3, [pc, #536]	@ (80029ac <main+0x290>)
 8002794:	701a      	strb	r2, [r3, #0]
		  sys.file_meas_1_open = 1;
 8002796:	4b86      	ldr	r3, [pc, #536]	@ (80029b0 <main+0x294>)
 8002798:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800279c:	2201      	movs	r2, #1
 800279e:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
		  res = f_open(&sys.file_meas_2, MEASURE_FILE_NAME_2, FA_READ | FA_WRITE | FA_CREATE_ALWAYS);
 80027a2:	220b      	movs	r2, #11
 80027a4:	4983      	ldr	r1, [pc, #524]	@ (80029b4 <main+0x298>)
 80027a6:	4884      	ldr	r0, [pc, #528]	@ (80029b8 <main+0x29c>)
 80027a8:	f003 fe2a 	bl	8006400 <f_open>
 80027ac:	4603      	mov	r3, r0
 80027ae:	461a      	mov	r2, r3
 80027b0:	4b7e      	ldr	r3, [pc, #504]	@ (80029ac <main+0x290>)
 80027b2:	701a      	strb	r2, [r3, #0]
		  sys.file_meas_2_open = 1;
 80027b4:	4b7e      	ldr	r3, [pc, #504]	@ (80029b0 <main+0x294>)
 80027b6:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 80027ba:	2201      	movs	r2, #1
 80027bc:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
		  memset(Pressure, 0, sizeof(Pressure));
 80027c0:	f44f 62c8 	mov.w	r2, #1600	@ 0x640
 80027c4:	2100      	movs	r1, #0
 80027c6:	487d      	ldr	r0, [pc, #500]	@ (80029bc <main+0x2a0>)
 80027c8:	f00e fa8c 	bl	8010ce4 <memset>
		  memset(Volume_Period, 0, sizeof(Volume_Period));
 80027cc:	2228      	movs	r2, #40	@ 0x28
 80027ce:	2100      	movs	r1, #0
 80027d0:	487b      	ldr	r0, [pc, #492]	@ (80029c0 <main+0x2a4>)
 80027d2:	f00e fa87 	bl	8010ce4 <memset>
		  memset(Acceleration, 0, sizeof(Acceleration));
 80027d6:	f44f 62af 	mov.w	r2, #1400	@ 0x578
 80027da:	2100      	movs	r1, #0
 80027dc:	4879      	ldr	r0, [pc, #484]	@ (80029c4 <main+0x2a8>)
 80027de:	f00e fa81 	bl	8010ce4 <memset>
		  memset(&Supply, 0, sizeof(Supply));
 80027e2:	220c      	movs	r2, #12
 80027e4:	2100      	movs	r1, #0
 80027e6:	4878      	ldr	r0, [pc, #480]	@ (80029c8 <main+0x2ac>)
 80027e8:	f00e fa7c 	bl	8010ce4 <memset>
		  Temperature = 0;
 80027ec:	4b77      	ldr	r3, [pc, #476]	@ (80029cc <main+0x2b0>)
 80027ee:	2200      	movs	r2, #0
 80027f0:	801a      	strh	r2, [r3, #0]
		  Saves_cnt = 0;
 80027f2:	4b77      	ldr	r3, [pc, #476]	@ (80029d0 <main+0x2b4>)
 80027f4:	2200      	movs	r2, #0
 80027f6:	801a      	strh	r2, [r3, #0]
		  Address_Offset = 0;
 80027f8:	4b76      	ldr	r3, [pc, #472]	@ (80029d4 <main+0x2b8>)
 80027fa:	2200      	movs	r2, #0
 80027fc:	601a      	str	r2, [r3, #0]
		  Seconds_After_Warning = 0;
 80027fe:	4b76      	ldr	r3, [pc, #472]	@ (80029d8 <main+0x2bc>)
 8002800:	2200      	movs	r2, #0
 8002802:	801a      	strh	r2, [r3, #0]
		  HAL_ADC_Start_DMA(PRESSURE_ADC, (uint32_t*)&Pressure, PRESS_FULL_SAMPLES);
 8002804:	f44f 7248 	mov.w	r2, #800	@ 0x320
 8002808:	496c      	ldr	r1, [pc, #432]	@ (80029bc <main+0x2a0>)
 800280a:	4874      	ldr	r0, [pc, #464]	@ (80029dc <main+0x2c0>)
 800280c:	f005 fc00 	bl	8008010 <HAL_ADC_Start_DMA>
		  HAL_TIM_Base_Start_IT(ADC_TIMER);
 8002810:	4873      	ldr	r0, [pc, #460]	@ (80029e0 <main+0x2c4>)
 8002812:	f00b fb71 	bl	800def8 <HAL_TIM_Base_Start_IT>
		  state = MEASURING_STATE;
 8002816:	4b62      	ldr	r3, [pc, #392]	@ (80029a0 <main+0x284>)
 8002818:	2201      	movs	r2, #1
 800281a:	701a      	strb	r2, [r3, #0]
		  break;
 800281c:	e0be      	b.n	800299c <main+0x280>
		  if(flags.ADC_Complete && flags.ACC_Complete)
 800281e:	4b71      	ldr	r3, [pc, #452]	@ (80029e4 <main+0x2c8>)
 8002820:	781b      	ldrb	r3, [r3, #0]
 8002822:	f003 0301 	and.w	r3, r3, #1
 8002826:	b2db      	uxtb	r3, r3
 8002828:	2b00      	cmp	r3, #0
 800282a:	f000 80b6 	beq.w	800299a <main+0x27e>
 800282e:	4b6d      	ldr	r3, [pc, #436]	@ (80029e4 <main+0x2c8>)
 8002830:	785b      	ldrb	r3, [r3, #1]
 8002832:	f003 0302 	and.w	r3, r3, #2
 8002836:	b2db      	uxtb	r3, r3
 8002838:	2b00      	cmp	r3, #0
 800283a:	f000 80ae 	beq.w	800299a <main+0x27e>
			  Save_Data();
 800283e:	f000 fea9 	bl	8003594 <Save_Data>
			  if(flags.BC_Interrupt)
 8002842:	4b68      	ldr	r3, [pc, #416]	@ (80029e4 <main+0x2c8>)
 8002844:	781b      	ldrb	r3, [r3, #0]
 8002846:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800284a:	b2db      	uxtb	r3, r3
 800284c:	2b00      	cmp	r3, #0
 800284e:	d011      	beq.n	8002874 <main+0x158>
				  BC_Read_Flags(&sys.BC_Flags);
 8002850:	4865      	ldr	r0, [pc, #404]	@ (80029e8 <main+0x2cc>)
 8002852:	f7fe fc1d 	bl	8001090 <BC_Read_Flags>
				  BC_Manage_Interrupts(sys.BC_Flags);
 8002856:	4b56      	ldr	r3, [pc, #344]	@ (80029b0 <main+0x294>)
 8002858:	f503 5342 	add.w	r3, r3, #12416	@ 0x3080
 800285c:	3310      	adds	r3, #16
 800285e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002862:	4610      	mov	r0, r2
 8002864:	4619      	mov	r1, r3
 8002866:	f7fe fc9b 	bl	80011a0 <BC_Manage_Interrupts>
				  flags.BC_Interrupt = 0;
 800286a:	4a5e      	ldr	r2, [pc, #376]	@ (80029e4 <main+0x2c8>)
 800286c:	7813      	ldrb	r3, [r2, #0]
 800286e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002872:	7013      	strb	r3, [r2, #0]
			  if(flags.MQTT_Message_Rx)
 8002874:	4b5b      	ldr	r3, [pc, #364]	@ (80029e4 <main+0x2c8>)
 8002876:	785b      	ldrb	r3, [r3, #1]
 8002878:	f003 0304 	and.w	r3, r3, #4
 800287c:	b2db      	uxtb	r3, r3
 800287e:	2b00      	cmp	r3, #0
 8002880:	d006      	beq.n	8002890 <main+0x174>
				  SIM_Parse_Message();
 8002882:	f7fe fa87 	bl	8000d94 <SIM_Parse_Message>
				  flags.MQTT_Message_Rx = 0;
 8002886:	4a57      	ldr	r2, [pc, #348]	@ (80029e4 <main+0x2c8>)
 8002888:	7853      	ldrb	r3, [r2, #1]
 800288a:	f023 0304 	bic.w	r3, r3, #4
 800288e:	7053      	strb	r3, [r2, #1]
			  if(flags.Data_Request)
 8002890:	4b54      	ldr	r3, [pc, #336]	@ (80029e4 <main+0x2c8>)
 8002892:	785b      	ldrb	r3, [r3, #1]
 8002894:	f003 0308 	and.w	r3, r3, #8
 8002898:	b2db      	uxtb	r3, r3
 800289a:	2b00      	cmp	r3, #0
 800289c:	d035      	beq.n	800290a <main+0x1ee>
				  sprintf(MQTT_Logging, "%u,%u,%u,%u,%u,%u,%u,%u,%u,%u", Last_Pressure, Last_Volume, Last_Acceleration, Supply.i1, Supply.i2, Supply.i3, Supply.v1, Supply.v2, Supply.v3, Temperature);
 800289e:	4b53      	ldr	r3, [pc, #332]	@ (80029ec <main+0x2d0>)
 80028a0:	881b      	ldrh	r3, [r3, #0]
 80028a2:	469c      	mov	ip, r3
 80028a4:	4b52      	ldr	r3, [pc, #328]	@ (80029f0 <main+0x2d4>)
 80028a6:	881b      	ldrh	r3, [r3, #0]
 80028a8:	469e      	mov	lr, r3
 80028aa:	4b52      	ldr	r3, [pc, #328]	@ (80029f4 <main+0x2d8>)
 80028ac:	881b      	ldrh	r3, [r3, #0]
 80028ae:	461a      	mov	r2, r3
 80028b0:	4b45      	ldr	r3, [pc, #276]	@ (80029c8 <main+0x2ac>)
 80028b2:	88db      	ldrh	r3, [r3, #6]
 80028b4:	4619      	mov	r1, r3
 80028b6:	4b44      	ldr	r3, [pc, #272]	@ (80029c8 <main+0x2ac>)
 80028b8:	891b      	ldrh	r3, [r3, #8]
 80028ba:	4618      	mov	r0, r3
 80028bc:	4b42      	ldr	r3, [pc, #264]	@ (80029c8 <main+0x2ac>)
 80028be:	895b      	ldrh	r3, [r3, #10]
 80028c0:	461c      	mov	r4, r3
 80028c2:	4b41      	ldr	r3, [pc, #260]	@ (80029c8 <main+0x2ac>)
 80028c4:	881b      	ldrh	r3, [r3, #0]
 80028c6:	461d      	mov	r5, r3
 80028c8:	4b3f      	ldr	r3, [pc, #252]	@ (80029c8 <main+0x2ac>)
 80028ca:	885b      	ldrh	r3, [r3, #2]
 80028cc:	461e      	mov	r6, r3
 80028ce:	4b3e      	ldr	r3, [pc, #248]	@ (80029c8 <main+0x2ac>)
 80028d0:	889b      	ldrh	r3, [r3, #4]
 80028d2:	607b      	str	r3, [r7, #4]
 80028d4:	4b3d      	ldr	r3, [pc, #244]	@ (80029cc <main+0x2b0>)
 80028d6:	881b      	ldrh	r3, [r3, #0]
 80028d8:	9307      	str	r3, [sp, #28]
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	9306      	str	r3, [sp, #24]
 80028de:	9605      	str	r6, [sp, #20]
 80028e0:	9504      	str	r5, [sp, #16]
 80028e2:	9403      	str	r4, [sp, #12]
 80028e4:	9002      	str	r0, [sp, #8]
 80028e6:	9101      	str	r1, [sp, #4]
 80028e8:	9200      	str	r2, [sp, #0]
 80028ea:	4673      	mov	r3, lr
 80028ec:	4662      	mov	r2, ip
 80028ee:	4942      	ldr	r1, [pc, #264]	@ (80029f8 <main+0x2dc>)
 80028f0:	4842      	ldr	r0, [pc, #264]	@ (80029fc <main+0x2e0>)
 80028f2:	f00e f997 	bl	8010c24 <siprintf>
				  SIM_publish_MQTT_Message(NULL, MQTT_Logging);
 80028f6:	4941      	ldr	r1, [pc, #260]	@ (80029fc <main+0x2e0>)
 80028f8:	2000      	movs	r0, #0
 80028fa:	f7fe fac7 	bl	8000e8c <SIM_publish_MQTT_Message>
				  flags.Data_Request = 0;
 80028fe:	4a39      	ldr	r2, [pc, #228]	@ (80029e4 <main+0x2c8>)
 8002900:	7853      	ldrb	r3, [r2, #1]
 8002902:	f023 0308 	bic.w	r3, r3, #8
 8002906:	7053      	strb	r3, [r2, #1]
		  break;
 8002908:	e047      	b.n	800299a <main+0x27e>
			  else if(flags.Start_OTA)
 800290a:	4b36      	ldr	r3, [pc, #216]	@ (80029e4 <main+0x2c8>)
 800290c:	785b      	ldrb	r3, [r3, #1]
 800290e:	f003 0310 	and.w	r3, r3, #16
 8002912:	b2db      	uxtb	r3, r3
 8002914:	2b00      	cmp	r3, #0
 8002916:	d005      	beq.n	8002924 <main+0x208>
				  flags.Start_OTA = 0;
 8002918:	4a32      	ldr	r2, [pc, #200]	@ (80029e4 <main+0x2c8>)
 800291a:	7853      	ldrb	r3, [r2, #1]
 800291c:	f023 0310 	bic.w	r3, r3, #16
 8002920:	7053      	strb	r3, [r2, #1]
		  break;
 8002922:	e03a      	b.n	800299a <main+0x27e>
			  else if(flags.Ping)
 8002924:	4b2f      	ldr	r3, [pc, #188]	@ (80029e4 <main+0x2c8>)
 8002926:	785b      	ldrb	r3, [r3, #1]
 8002928:	f003 0320 	and.w	r3, r3, #32
 800292c:	b2db      	uxtb	r3, r3
 800292e:	2b00      	cmp	r3, #0
 8002930:	d033      	beq.n	800299a <main+0x27e>
				  flags.Ping = 0;
 8002932:	4a2c      	ldr	r2, [pc, #176]	@ (80029e4 <main+0x2c8>)
 8002934:	7853      	ldrb	r3, [r2, #1]
 8002936:	f023 0320 	bic.w	r3, r3, #32
 800293a:	7053      	strb	r3, [r2, #1]
		  break;
 800293c:	e02d      	b.n	800299a <main+0x27e>
		  HAL_ADC_Stop_DMA(PRESSURE_ADC);
 800293e:	4827      	ldr	r0, [pc, #156]	@ (80029dc <main+0x2c0>)
 8002940:	f005 fc22 	bl	8008188 <HAL_ADC_Stop_DMA>
		  HAL_TIM_Base_Stop_IT(ADC_TIMER);
 8002944:	4826      	ldr	r0, [pc, #152]	@ (80029e0 <main+0x2c4>)
 8002946:	f00b fb47 	bl	800dfd8 <HAL_TIM_Base_Stop_IT>
		  Send_Measure();
 800294a:	f001 f81b 	bl	8003984 <Send_Measure>
		  if(sys.file_meas_1_open == 1)
 800294e:	4b18      	ldr	r3, [pc, #96]	@ (80029b0 <main+0x294>)
 8002950:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002954:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8002958:	2b01      	cmp	r3, #1
 800295a:	d108      	bne.n	800296e <main+0x252>
			  f_unlink(MEASURE_FILE_NAME_1);
 800295c:	4811      	ldr	r0, [pc, #68]	@ (80029a4 <main+0x288>)
 800295e:	f004 f90f 	bl	8006b80 <f_unlink>
			  sys.file_meas_1_open = 0;
 8002962:	4b13      	ldr	r3, [pc, #76]	@ (80029b0 <main+0x294>)
 8002964:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002968:	2200      	movs	r2, #0
 800296a:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
		  if(sys.file_meas_2_open == 1)
 800296e:	4b10      	ldr	r3, [pc, #64]	@ (80029b0 <main+0x294>)
 8002970:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8002974:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8002978:	2b01      	cmp	r3, #1
 800297a:	d108      	bne.n	800298e <main+0x272>
			  f_unlink(MEASURE_FILE_NAME_2);
 800297c:	480d      	ldr	r0, [pc, #52]	@ (80029b4 <main+0x298>)
 800297e:	f004 f8ff 	bl	8006b80 <f_unlink>
			  sys.file_meas_2_open = 0;
 8002982:	4b0b      	ldr	r3, [pc, #44]	@ (80029b0 <main+0x294>)
 8002984:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8002988:	2200      	movs	r2, #0
 800298a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
		  state = MEASURE_INIT_STATE;
 800298e:	4b04      	ldr	r3, [pc, #16]	@ (80029a0 <main+0x284>)
 8002990:	2200      	movs	r2, #0
 8002992:	701a      	strb	r2, [r3, #0]
		  break;
 8002994:	e002      	b.n	800299c <main+0x280>
		  break;
 8002996:	bf00      	nop
 8002998:	e6e7      	b.n	800276a <main+0x4e>
		  break;
 800299a:	bf00      	nop
	  switch(state)
 800299c:	e6e5      	b.n	800276a <main+0x4e>
 800299e:	bf00      	nop
 80029a0:	2000056c 	.word	0x2000056c
 80029a4:	080121a4 	.word	0x080121a4
 80029a8:	200015a4 	.word	0x200015a4
 80029ac:	20006f2c 	.word	0x20006f2c
 80029b0:	20000570 	.word	0x20000570
 80029b4:	080121b4 	.word	0x080121b4
 80029b8:	200025d0 	.word	0x200025d0
 80029bc:	200059a4 	.word	0x200059a4
 80029c0:	20005fe4 	.word	0x20005fe4
 80029c4:	2000600c 	.word	0x2000600c
 80029c8:	20005994 	.word	0x20005994
 80029cc:	2000658a 	.word	0x2000658a
 80029d0:	20006f2a 	.word	0x20006f2a
 80029d4:	20006ec0 	.word	0x20006ec0
 80029d8:	20006f28 	.word	0x20006f28
 80029dc:	20000090 	.word	0x20000090
 80029e0:	200003c8 	.word	0x200003c8
 80029e4:	20003928 	.word	0x20003928
 80029e8:	20003600 	.word	0x20003600
 80029ec:	20006584 	.word	0x20006584
 80029f0:	20006586 	.word	0x20006586
 80029f4:	20006588 	.word	0x20006588
 80029f8:	080121c4 	.word	0x080121c4
 80029fc:	2000658c 	.word	0x2000658c

08002a00 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002a00:	b580      	push	{r7, lr}
 8002a02:	b096      	sub	sp, #88	@ 0x58
 8002a04:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002a06:	f107 0314 	add.w	r3, r7, #20
 8002a0a:	2244      	movs	r2, #68	@ 0x44
 8002a0c:	2100      	movs	r1, #0
 8002a0e:	4618      	mov	r0, r3
 8002a10:	f00e f968 	bl	8010ce4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002a14:	463b      	mov	r3, r7
 8002a16:	2200      	movs	r2, #0
 8002a18:	601a      	str	r2, [r3, #0]
 8002a1a:	605a      	str	r2, [r3, #4]
 8002a1c:	609a      	str	r2, [r3, #8]
 8002a1e:	60da      	str	r2, [r3, #12]
 8002a20:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8002a22:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8002a26:	f007 ff0b 	bl	800a840 <HAL_PWREx_ControlVoltageScaling>
 8002a2a:	4603      	mov	r3, r0
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	d001      	beq.n	8002a34 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8002a30:	f000 fdaa 	bl	8003588 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 8002a34:	2309      	movs	r3, #9
 8002a36:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002a38:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8002a3c:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8002a3e:	2301      	movs	r3, #1
 8002a40:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002a42:	2302      	movs	r3, #2
 8002a44:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002a46:	2303      	movs	r3, #3
 8002a48:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8002a4a:	2301      	movs	r3, #1
 8002a4c:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 20;
 8002a4e:	2314      	movs	r3, #20
 8002a50:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8002a52:	2307      	movs	r3, #7
 8002a54:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8002a56:	2302      	movs	r3, #2
 8002a58:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8002a5a:	2302      	movs	r3, #2
 8002a5c:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002a5e:	f107 0314 	add.w	r3, r7, #20
 8002a62:	4618      	mov	r0, r3
 8002a64:	f008 fba4 	bl	800b1b0 <HAL_RCC_OscConfig>
 8002a68:	4603      	mov	r3, r0
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	d001      	beq.n	8002a72 <SystemClock_Config+0x72>
  {
    Error_Handler();
 8002a6e:	f000 fd8b 	bl	8003588 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002a72:	230f      	movs	r3, #15
 8002a74:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002a76:	2303      	movs	r3, #3
 8002a78:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002a7a:	2300      	movs	r3, #0
 8002a7c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8002a7e:	2300      	movs	r3, #0
 8002a80:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002a82:	2300      	movs	r3, #0
 8002a84:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8002a86:	463b      	mov	r3, r7
 8002a88:	2104      	movs	r1, #4
 8002a8a:	4618      	mov	r0, r3
 8002a8c:	f008 ff6c 	bl	800b968 <HAL_RCC_ClockConfig>
 8002a90:	4603      	mov	r3, r0
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	d001      	beq.n	8002a9a <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8002a96:	f000 fd77 	bl	8003588 <Error_Handler>
  }
}
 8002a9a:	bf00      	nop
 8002a9c:	3758      	adds	r7, #88	@ 0x58
 8002a9e:	46bd      	mov	sp, r7
 8002aa0:	bd80      	pop	{r7, pc}
	...

08002aa4 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8002aa4:	b580      	push	{r7, lr}
 8002aa6:	b08a      	sub	sp, #40	@ 0x28
 8002aa8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8002aaa:	f107 031c 	add.w	r3, r7, #28
 8002aae:	2200      	movs	r2, #0
 8002ab0:	601a      	str	r2, [r3, #0]
 8002ab2:	605a      	str	r2, [r3, #4]
 8002ab4:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8002ab6:	1d3b      	adds	r3, r7, #4
 8002ab8:	2200      	movs	r2, #0
 8002aba:	601a      	str	r2, [r3, #0]
 8002abc:	605a      	str	r2, [r3, #4]
 8002abe:	609a      	str	r2, [r3, #8]
 8002ac0:	60da      	str	r2, [r3, #12]
 8002ac2:	611a      	str	r2, [r3, #16]
 8002ac4:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8002ac6:	4b30      	ldr	r3, [pc, #192]	@ (8002b88 <MX_ADC1_Init+0xe4>)
 8002ac8:	4a30      	ldr	r2, [pc, #192]	@ (8002b8c <MX_ADC1_Init+0xe8>)
 8002aca:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8002acc:	4b2e      	ldr	r3, [pc, #184]	@ (8002b88 <MX_ADC1_Init+0xe4>)
 8002ace:	2200      	movs	r2, #0
 8002ad0:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8002ad2:	4b2d      	ldr	r3, [pc, #180]	@ (8002b88 <MX_ADC1_Init+0xe4>)
 8002ad4:	2200      	movs	r2, #0
 8002ad6:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8002ad8:	4b2b      	ldr	r3, [pc, #172]	@ (8002b88 <MX_ADC1_Init+0xe4>)
 8002ada:	2200      	movs	r2, #0
 8002adc:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8002ade:	4b2a      	ldr	r3, [pc, #168]	@ (8002b88 <MX_ADC1_Init+0xe4>)
 8002ae0:	2200      	movs	r2, #0
 8002ae2:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8002ae4:	4b28      	ldr	r3, [pc, #160]	@ (8002b88 <MX_ADC1_Init+0xe4>)
 8002ae6:	2208      	movs	r2, #8
 8002ae8:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8002aea:	4b27      	ldr	r3, [pc, #156]	@ (8002b88 <MX_ADC1_Init+0xe4>)
 8002aec:	2200      	movs	r2, #0
 8002aee:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8002af0:	4b25      	ldr	r3, [pc, #148]	@ (8002b88 <MX_ADC1_Init+0xe4>)
 8002af2:	2200      	movs	r2, #0
 8002af4:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 8002af6:	4b24      	ldr	r3, [pc, #144]	@ (8002b88 <MX_ADC1_Init+0xe4>)
 8002af8:	2201      	movs	r2, #1
 8002afa:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8002afc:	4b22      	ldr	r3, [pc, #136]	@ (8002b88 <MX_ADC1_Init+0xe4>)
 8002afe:	2200      	movs	r2, #0
 8002b00:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T4_TRGO;
 8002b04:	4b20      	ldr	r3, [pc, #128]	@ (8002b88 <MX_ADC1_Init+0xe4>)
 8002b06:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 8002b0a:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8002b0c:	4b1e      	ldr	r3, [pc, #120]	@ (8002b88 <MX_ADC1_Init+0xe4>)
 8002b0e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002b12:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8002b14:	4b1c      	ldr	r3, [pc, #112]	@ (8002b88 <MX_ADC1_Init+0xe4>)
 8002b16:	2201      	movs	r2, #1
 8002b18:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8002b1c:	4b1a      	ldr	r3, [pc, #104]	@ (8002b88 <MX_ADC1_Init+0xe4>)
 8002b1e:	2200      	movs	r2, #0
 8002b20:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8002b22:	4b19      	ldr	r3, [pc, #100]	@ (8002b88 <MX_ADC1_Init+0xe4>)
 8002b24:	2200      	movs	r2, #0
 8002b26:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8002b2a:	4817      	ldr	r0, [pc, #92]	@ (8002b88 <MX_ADC1_Init+0xe4>)
 8002b2c:	f005 f920 	bl	8007d70 <HAL_ADC_Init>
 8002b30:	4603      	mov	r3, r0
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	d001      	beq.n	8002b3a <MX_ADC1_Init+0x96>
  {
    Error_Handler();
 8002b36:	f000 fd27 	bl	8003588 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8002b3a:	2300      	movs	r3, #0
 8002b3c:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8002b3e:	f107 031c 	add.w	r3, r7, #28
 8002b42:	4619      	mov	r1, r3
 8002b44:	4810      	ldr	r0, [pc, #64]	@ (8002b88 <MX_ADC1_Init+0xe4>)
 8002b46:	f006 f9d9 	bl	8008efc <HAL_ADCEx_MultiModeConfigChannel>
 8002b4a:	4603      	mov	r3, r0
 8002b4c:	2b00      	cmp	r3, #0
 8002b4e:	d001      	beq.n	8002b54 <MX_ADC1_Init+0xb0>
  {
    Error_Handler();
 8002b50:	f000 fd1a 	bl	8003588 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_9;
 8002b54:	4b0e      	ldr	r3, [pc, #56]	@ (8002b90 <MX_ADC1_Init+0xec>)
 8002b56:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8002b58:	2306      	movs	r3, #6
 8002b5a:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8002b5c:	2300      	movs	r3, #0
 8002b5e:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8002b60:	237f      	movs	r3, #127	@ 0x7f
 8002b62:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8002b64:	2304      	movs	r3, #4
 8002b66:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8002b68:	2300      	movs	r3, #0
 8002b6a:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002b6c:	1d3b      	adds	r3, r7, #4
 8002b6e:	4619      	mov	r1, r3
 8002b70:	4805      	ldr	r0, [pc, #20]	@ (8002b88 <MX_ADC1_Init+0xe4>)
 8002b72:	f005 fb75 	bl	8008260 <HAL_ADC_ConfigChannel>
 8002b76:	4603      	mov	r3, r0
 8002b78:	2b00      	cmp	r3, #0
 8002b7a:	d001      	beq.n	8002b80 <MX_ADC1_Init+0xdc>
  {
    Error_Handler();
 8002b7c:	f000 fd04 	bl	8003588 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8002b80:	bf00      	nop
 8002b82:	3728      	adds	r7, #40	@ 0x28
 8002b84:	46bd      	mov	sp, r7
 8002b86:	bd80      	pop	{r7, pc}
 8002b88:	20000090 	.word	0x20000090
 8002b8c:	50040000 	.word	0x50040000
 8002b90:	25b00200 	.word	0x25b00200

08002b94 <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 8002b94:	b580      	push	{r7, lr}
 8002b96:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8002b98:	4b0d      	ldr	r3, [pc, #52]	@ (8002bd0 <MX_CRC_Init+0x3c>)
 8002b9a:	4a0e      	ldr	r2, [pc, #56]	@ (8002bd4 <MX_CRC_Init+0x40>)
 8002b9c:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 8002b9e:	4b0c      	ldr	r3, [pc, #48]	@ (8002bd0 <MX_CRC_Init+0x3c>)
 8002ba0:	2200      	movs	r2, #0
 8002ba2:	711a      	strb	r2, [r3, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 8002ba4:	4b0a      	ldr	r3, [pc, #40]	@ (8002bd0 <MX_CRC_Init+0x3c>)
 8002ba6:	2200      	movs	r2, #0
 8002ba8:	715a      	strb	r2, [r3, #5]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 8002baa:	4b09      	ldr	r3, [pc, #36]	@ (8002bd0 <MX_CRC_Init+0x3c>)
 8002bac:	2200      	movs	r2, #0
 8002bae:	615a      	str	r2, [r3, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 8002bb0:	4b07      	ldr	r3, [pc, #28]	@ (8002bd0 <MX_CRC_Init+0x3c>)
 8002bb2:	2200      	movs	r2, #0
 8002bb4:	619a      	str	r2, [r3, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 8002bb6:	4b06      	ldr	r3, [pc, #24]	@ (8002bd0 <MX_CRC_Init+0x3c>)
 8002bb8:	2201      	movs	r2, #1
 8002bba:	621a      	str	r2, [r3, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8002bbc:	4804      	ldr	r0, [pc, #16]	@ (8002bd0 <MX_CRC_Init+0x3c>)
 8002bbe:	f006 fb5f 	bl	8009280 <HAL_CRC_Init>
 8002bc2:	4603      	mov	r3, r0
 8002bc4:	2b00      	cmp	r3, #0
 8002bc6:	d001      	beq.n	8002bcc <MX_CRC_Init+0x38>
  {
    Error_Handler();
 8002bc8:	f000 fcde 	bl	8003588 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 8002bcc:	bf00      	nop
 8002bce:	bd80      	pop	{r7, pc}
 8002bd0:	2000013c 	.word	0x2000013c
 8002bd4:	40023000 	.word	0x40023000

08002bd8 <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 8002bd8:	b580      	push	{r7, lr}
 8002bda:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8002bdc:	4b1b      	ldr	r3, [pc, #108]	@ (8002c4c <MX_I2C3_Init+0x74>)
 8002bde:	4a1c      	ldr	r2, [pc, #112]	@ (8002c50 <MX_I2C3_Init+0x78>)
 8002be0:	601a      	str	r2, [r3, #0]
  hi2c3.Init.Timing = 0x10909CEC;
 8002be2:	4b1a      	ldr	r3, [pc, #104]	@ (8002c4c <MX_I2C3_Init+0x74>)
 8002be4:	4a1b      	ldr	r2, [pc, #108]	@ (8002c54 <MX_I2C3_Init+0x7c>)
 8002be6:	605a      	str	r2, [r3, #4]
  hi2c3.Init.OwnAddress1 = 0;
 8002be8:	4b18      	ldr	r3, [pc, #96]	@ (8002c4c <MX_I2C3_Init+0x74>)
 8002bea:	2200      	movs	r2, #0
 8002bec:	609a      	str	r2, [r3, #8]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002bee:	4b17      	ldr	r3, [pc, #92]	@ (8002c4c <MX_I2C3_Init+0x74>)
 8002bf0:	2201      	movs	r2, #1
 8002bf2:	60da      	str	r2, [r3, #12]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002bf4:	4b15      	ldr	r3, [pc, #84]	@ (8002c4c <MX_I2C3_Init+0x74>)
 8002bf6:	2200      	movs	r2, #0
 8002bf8:	611a      	str	r2, [r3, #16]
  hi2c3.Init.OwnAddress2 = 0;
 8002bfa:	4b14      	ldr	r3, [pc, #80]	@ (8002c4c <MX_I2C3_Init+0x74>)
 8002bfc:	2200      	movs	r2, #0
 8002bfe:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8002c00:	4b12      	ldr	r3, [pc, #72]	@ (8002c4c <MX_I2C3_Init+0x74>)
 8002c02:	2200      	movs	r2, #0
 8002c04:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002c06:	4b11      	ldr	r3, [pc, #68]	@ (8002c4c <MX_I2C3_Init+0x74>)
 8002c08:	2200      	movs	r2, #0
 8002c0a:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002c0c:	4b0f      	ldr	r3, [pc, #60]	@ (8002c4c <MX_I2C3_Init+0x74>)
 8002c0e:	2200      	movs	r2, #0
 8002c10:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8002c12:	480e      	ldr	r0, [pc, #56]	@ (8002c4c <MX_I2C3_Init+0x74>)
 8002c14:	f007 f81e 	bl	8009c54 <HAL_I2C_Init>
 8002c18:	4603      	mov	r3, r0
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	d001      	beq.n	8002c22 <MX_I2C3_Init+0x4a>
  {
    Error_Handler();
 8002c1e:	f000 fcb3 	bl	8003588 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8002c22:	2100      	movs	r1, #0
 8002c24:	4809      	ldr	r0, [pc, #36]	@ (8002c4c <MX_I2C3_Init+0x74>)
 8002c26:	f007 fd65 	bl	800a6f4 <HAL_I2CEx_ConfigAnalogFilter>
 8002c2a:	4603      	mov	r3, r0
 8002c2c:	2b00      	cmp	r3, #0
 8002c2e:	d001      	beq.n	8002c34 <MX_I2C3_Init+0x5c>
  {
    Error_Handler();
 8002c30:	f000 fcaa 	bl	8003588 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 8002c34:	2100      	movs	r1, #0
 8002c36:	4805      	ldr	r0, [pc, #20]	@ (8002c4c <MX_I2C3_Init+0x74>)
 8002c38:	f007 fda7 	bl	800a78a <HAL_I2CEx_ConfigDigitalFilter>
 8002c3c:	4603      	mov	r3, r0
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	d001      	beq.n	8002c46 <MX_I2C3_Init+0x6e>
  {
    Error_Handler();
 8002c42:	f000 fca1 	bl	8003588 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8002c46:	bf00      	nop
 8002c48:	bd80      	pop	{r7, pc}
 8002c4a:	bf00      	nop
 8002c4c:	20000160 	.word	0x20000160
 8002c50:	40005c00 	.word	0x40005c00
 8002c54:	10909cec 	.word	0x10909cec

08002c58 <MX_QUADSPI_Init>:
  * @brief QUADSPI Initialization Function
  * @param None
  * @retval None
  */
static void MX_QUADSPI_Init(void)
{
 8002c58:	b580      	push	{r7, lr}
 8002c5a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN QUADSPI_Init 1 */

  /* USER CODE END QUADSPI_Init 1 */
  /* QUADSPI parameter configuration*/
  hqspi.Instance = QUADSPI;
 8002c5c:	4b0f      	ldr	r3, [pc, #60]	@ (8002c9c <MX_QUADSPI_Init+0x44>)
 8002c5e:	4a10      	ldr	r2, [pc, #64]	@ (8002ca0 <MX_QUADSPI_Init+0x48>)
 8002c60:	601a      	str	r2, [r3, #0]
  hqspi.Init.ClockPrescaler = 255;
 8002c62:	4b0e      	ldr	r3, [pc, #56]	@ (8002c9c <MX_QUADSPI_Init+0x44>)
 8002c64:	22ff      	movs	r2, #255	@ 0xff
 8002c66:	605a      	str	r2, [r3, #4]
  hqspi.Init.FifoThreshold = 1;
 8002c68:	4b0c      	ldr	r3, [pc, #48]	@ (8002c9c <MX_QUADSPI_Init+0x44>)
 8002c6a:	2201      	movs	r2, #1
 8002c6c:	609a      	str	r2, [r3, #8]
  hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_NONE;
 8002c6e:	4b0b      	ldr	r3, [pc, #44]	@ (8002c9c <MX_QUADSPI_Init+0x44>)
 8002c70:	2200      	movs	r2, #0
 8002c72:	60da      	str	r2, [r3, #12]
  hqspi.Init.FlashSize = 1;
 8002c74:	4b09      	ldr	r3, [pc, #36]	@ (8002c9c <MX_QUADSPI_Init+0x44>)
 8002c76:	2201      	movs	r2, #1
 8002c78:	611a      	str	r2, [r3, #16]
  hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_1_CYCLE;
 8002c7a:	4b08      	ldr	r3, [pc, #32]	@ (8002c9c <MX_QUADSPI_Init+0x44>)
 8002c7c:	2200      	movs	r2, #0
 8002c7e:	615a      	str	r2, [r3, #20]
  hqspi.Init.ClockMode = QSPI_CLOCK_MODE_0;
 8002c80:	4b06      	ldr	r3, [pc, #24]	@ (8002c9c <MX_QUADSPI_Init+0x44>)
 8002c82:	2200      	movs	r2, #0
 8002c84:	619a      	str	r2, [r3, #24]
  if (HAL_QSPI_Init(&hqspi) != HAL_OK)
 8002c86:	4805      	ldr	r0, [pc, #20]	@ (8002c9c <MX_QUADSPI_Init+0x44>)
 8002c88:	f007 fe30 	bl	800a8ec <HAL_QSPI_Init>
 8002c8c:	4603      	mov	r3, r0
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	d001      	beq.n	8002c96 <MX_QUADSPI_Init+0x3e>
  {
    Error_Handler();
 8002c92:	f000 fc79 	bl	8003588 <Error_Handler>
  }
  /* USER CODE BEGIN QUADSPI_Init 2 */

  /* USER CODE END QUADSPI_Init 2 */

}
 8002c96:	bf00      	nop
 8002c98:	bd80      	pop	{r7, pc}
 8002c9a:	bf00      	nop
 8002c9c:	200001b4 	.word	0x200001b4
 8002ca0:	a0001000 	.word	0xa0001000

08002ca4 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8002ca4:	b580      	push	{r7, lr}
 8002ca6:	b092      	sub	sp, #72	@ 0x48
 8002ca8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8002caa:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8002cae:	2200      	movs	r2, #0
 8002cb0:	601a      	str	r2, [r3, #0]
 8002cb2:	605a      	str	r2, [r3, #4]
 8002cb4:	609a      	str	r2, [r3, #8]
 8002cb6:	60da      	str	r2, [r3, #12]
 8002cb8:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 8002cba:	2300      	movs	r3, #0
 8002cbc:	633b      	str	r3, [r7, #48]	@ 0x30
  RTC_AlarmTypeDef sAlarm = {0};
 8002cbe:	1d3b      	adds	r3, r7, #4
 8002cc0:	222c      	movs	r2, #44	@ 0x2c
 8002cc2:	2100      	movs	r1, #0
 8002cc4:	4618      	mov	r0, r3
 8002cc6:	f00e f80d 	bl	8010ce4 <memset>

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8002cca:	4b3c      	ldr	r3, [pc, #240]	@ (8002dbc <MX_RTC_Init+0x118>)
 8002ccc:	4a3c      	ldr	r2, [pc, #240]	@ (8002dc0 <MX_RTC_Init+0x11c>)
 8002cce:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8002cd0:	4b3a      	ldr	r3, [pc, #232]	@ (8002dbc <MX_RTC_Init+0x118>)
 8002cd2:	2200      	movs	r2, #0
 8002cd4:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8002cd6:	4b39      	ldr	r3, [pc, #228]	@ (8002dbc <MX_RTC_Init+0x118>)
 8002cd8:	227f      	movs	r2, #127	@ 0x7f
 8002cda:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8002cdc:	4b37      	ldr	r3, [pc, #220]	@ (8002dbc <MX_RTC_Init+0x118>)
 8002cde:	22ff      	movs	r2, #255	@ 0xff
 8002ce0:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8002ce2:	4b36      	ldr	r3, [pc, #216]	@ (8002dbc <MX_RTC_Init+0x118>)
 8002ce4:	2200      	movs	r2, #0
 8002ce6:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8002ce8:	4b34      	ldr	r3, [pc, #208]	@ (8002dbc <MX_RTC_Init+0x118>)
 8002cea:	2200      	movs	r2, #0
 8002cec:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8002cee:	4b33      	ldr	r3, [pc, #204]	@ (8002dbc <MX_RTC_Init+0x118>)
 8002cf0:	2200      	movs	r2, #0
 8002cf2:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8002cf4:	4b31      	ldr	r3, [pc, #196]	@ (8002dbc <MX_RTC_Init+0x118>)
 8002cf6:	2200      	movs	r2, #0
 8002cf8:	61da      	str	r2, [r3, #28]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8002cfa:	4830      	ldr	r0, [pc, #192]	@ (8002dbc <MX_RTC_Init+0x118>)
 8002cfc:	f009 fd14 	bl	800c728 <HAL_RTC_Init>
 8002d00:	4603      	mov	r3, r0
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	d001      	beq.n	8002d0a <MX_RTC_Init+0x66>
  {
    Error_Handler();
 8002d06:	f000 fc3f 	bl	8003588 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0;
 8002d0a:	2300      	movs	r3, #0
 8002d0c:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
  sTime.Minutes = 0;
 8002d10:	2300      	movs	r3, #0
 8002d12:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
  sTime.Seconds = 0;
 8002d16:	2300      	movs	r3, #0
 8002d18:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8002d1c:	2300      	movs	r3, #0
 8002d1e:	643b      	str	r3, [r7, #64]	@ 0x40
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8002d20:	2300      	movs	r3, #0
 8002d22:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK)
 8002d24:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8002d28:	2200      	movs	r2, #0
 8002d2a:	4619      	mov	r1, r3
 8002d2c:	4823      	ldr	r0, [pc, #140]	@ (8002dbc <MX_RTC_Init+0x118>)
 8002d2e:	f009 fd83 	bl	800c838 <HAL_RTC_SetTime>
 8002d32:	4603      	mov	r3, r0
 8002d34:	2b00      	cmp	r3, #0
 8002d36:	d001      	beq.n	8002d3c <MX_RTC_Init+0x98>
  {
    Error_Handler();
 8002d38:	f000 fc26 	bl	8003588 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8002d3c:	2301      	movs	r3, #1
 8002d3e:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
  sDate.Month = RTC_MONTH_JANUARY;
 8002d42:	2301      	movs	r3, #1
 8002d44:	f887 3031 	strb.w	r3, [r7, #49]	@ 0x31
  sDate.Date = 1;
 8002d48:	2301      	movs	r3, #1
 8002d4a:	f887 3032 	strb.w	r3, [r7, #50]	@ 0x32
  sDate.Year = 0;
 8002d4e:	2300      	movs	r3, #0
 8002d50:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN) != HAL_OK)
 8002d54:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8002d58:	2200      	movs	r2, #0
 8002d5a:	4619      	mov	r1, r3
 8002d5c:	4817      	ldr	r0, [pc, #92]	@ (8002dbc <MX_RTC_Init+0x118>)
 8002d5e:	f009 fe64 	bl	800ca2a <HAL_RTC_SetDate>
 8002d62:	4603      	mov	r3, r0
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	d001      	beq.n	8002d6c <MX_RTC_Init+0xc8>
  {
    Error_Handler();
 8002d68:	f000 fc0e 	bl	8003588 <Error_Handler>
  }

  /** Enable the Alarm A
  */
  sAlarm.AlarmTime.Hours = 0;
 8002d6c:	2300      	movs	r3, #0
 8002d6e:	713b      	strb	r3, [r7, #4]
  sAlarm.AlarmTime.Minutes = 0;
 8002d70:	2300      	movs	r3, #0
 8002d72:	717b      	strb	r3, [r7, #5]
  sAlarm.AlarmTime.Seconds = 0;
 8002d74:	2300      	movs	r3, #0
 8002d76:	71bb      	strb	r3, [r7, #6]
  sAlarm.AlarmTime.SubSeconds = 0;
 8002d78:	2300      	movs	r3, #0
 8002d7a:	60bb      	str	r3, [r7, #8]
  sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8002d7c:	2300      	movs	r3, #0
 8002d7e:	613b      	str	r3, [r7, #16]
  sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8002d80:	2300      	movs	r3, #0
 8002d82:	617b      	str	r3, [r7, #20]
  sAlarm.AlarmMask = RTC_ALARMMASK_DATEWEEKDAY|RTC_ALARMMASK_HOURS
 8002d84:	4b0f      	ldr	r3, [pc, #60]	@ (8002dc4 <MX_RTC_Init+0x120>)
 8002d86:	61bb      	str	r3, [r7, #24]
                              |RTC_ALARMMASK_SECONDS;
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 8002d88:	2300      	movs	r3, #0
 8002d8a:	623b      	str	r3, [r7, #32]
  sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 8002d8c:	2300      	movs	r3, #0
 8002d8e:	627b      	str	r3, [r7, #36]	@ 0x24
  sAlarm.AlarmDateWeekDay = 1;
 8002d90:	2301      	movs	r3, #1
 8002d92:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
  sAlarm.Alarm = RTC_ALARM_A;
 8002d96:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002d9a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BIN) != HAL_OK)
 8002d9c:	1d3b      	adds	r3, r7, #4
 8002d9e:	2200      	movs	r2, #0
 8002da0:	4619      	mov	r1, r3
 8002da2:	4806      	ldr	r0, [pc, #24]	@ (8002dbc <MX_RTC_Init+0x118>)
 8002da4:	f009 fec8 	bl	800cb38 <HAL_RTC_SetAlarm_IT>
 8002da8:	4603      	mov	r3, r0
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	d001      	beq.n	8002db2 <MX_RTC_Init+0x10e>
  {
    Error_Handler();
 8002dae:	f000 fbeb 	bl	8003588 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8002db2:	bf00      	nop
 8002db4:	3748      	adds	r7, #72	@ 0x48
 8002db6:	46bd      	mov	sp, r7
 8002db8:	bd80      	pop	{r7, pc}
 8002dba:	bf00      	nop
 8002dbc:	200001f8 	.word	0x200001f8
 8002dc0:	40002800 	.word	0x40002800
 8002dc4:	80800080 	.word	0x80800080

08002dc8 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8002dc8:	b580      	push	{r7, lr}
 8002dca:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8002dcc:	4b1b      	ldr	r3, [pc, #108]	@ (8002e3c <MX_SPI2_Init+0x74>)
 8002dce:	4a1c      	ldr	r2, [pc, #112]	@ (8002e40 <MX_SPI2_Init+0x78>)
 8002dd0:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8002dd2:	4b1a      	ldr	r3, [pc, #104]	@ (8002e3c <MX_SPI2_Init+0x74>)
 8002dd4:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8002dd8:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8002dda:	4b18      	ldr	r3, [pc, #96]	@ (8002e3c <MX_SPI2_Init+0x74>)
 8002ddc:	2200      	movs	r2, #0
 8002dde:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8002de0:	4b16      	ldr	r3, [pc, #88]	@ (8002e3c <MX_SPI2_Init+0x74>)
 8002de2:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 8002de6:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002de8:	4b14      	ldr	r3, [pc, #80]	@ (8002e3c <MX_SPI2_Init+0x74>)
 8002dea:	2200      	movs	r2, #0
 8002dec:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002dee:	4b13      	ldr	r3, [pc, #76]	@ (8002e3c <MX_SPI2_Init+0x74>)
 8002df0:	2200      	movs	r2, #0
 8002df2:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8002df4:	4b11      	ldr	r3, [pc, #68]	@ (8002e3c <MX_SPI2_Init+0x74>)
 8002df6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002dfa:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002dfc:	4b0f      	ldr	r3, [pc, #60]	@ (8002e3c <MX_SPI2_Init+0x74>)
 8002dfe:	2200      	movs	r2, #0
 8002e00:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002e02:	4b0e      	ldr	r3, [pc, #56]	@ (8002e3c <MX_SPI2_Init+0x74>)
 8002e04:	2200      	movs	r2, #0
 8002e06:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8002e08:	4b0c      	ldr	r3, [pc, #48]	@ (8002e3c <MX_SPI2_Init+0x74>)
 8002e0a:	2200      	movs	r2, #0
 8002e0c:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002e0e:	4b0b      	ldr	r3, [pc, #44]	@ (8002e3c <MX_SPI2_Init+0x74>)
 8002e10:	2200      	movs	r2, #0
 8002e12:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 7;
 8002e14:	4b09      	ldr	r3, [pc, #36]	@ (8002e3c <MX_SPI2_Init+0x74>)
 8002e16:	2207      	movs	r2, #7
 8002e18:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8002e1a:	4b08      	ldr	r3, [pc, #32]	@ (8002e3c <MX_SPI2_Init+0x74>)
 8002e1c:	2200      	movs	r2, #0
 8002e1e:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8002e20:	4b06      	ldr	r3, [pc, #24]	@ (8002e3c <MX_SPI2_Init+0x74>)
 8002e22:	2208      	movs	r2, #8
 8002e24:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8002e26:	4805      	ldr	r0, [pc, #20]	@ (8002e3c <MX_SPI2_Init+0x74>)
 8002e28:	f00a f8e2 	bl	800cff0 <HAL_SPI_Init>
 8002e2c:	4603      	mov	r3, r0
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	d001      	beq.n	8002e36 <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 8002e32:	f000 fba9 	bl	8003588 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8002e36:	bf00      	nop
 8002e38:	bd80      	pop	{r7, pc}
 8002e3a:	bf00      	nop
 8002e3c:	2000021c 	.word	0x2000021c
 8002e40:	40003800 	.word	0x40003800

08002e44 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 8002e44:	b580      	push	{r7, lr}
 8002e46:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 8002e48:	4b1b      	ldr	r3, [pc, #108]	@ (8002eb8 <MX_SPI3_Init+0x74>)
 8002e4a:	4a1c      	ldr	r2, [pc, #112]	@ (8002ebc <MX_SPI3_Init+0x78>)
 8002e4c:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8002e4e:	4b1a      	ldr	r3, [pc, #104]	@ (8002eb8 <MX_SPI3_Init+0x74>)
 8002e50:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8002e54:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8002e56:	4b18      	ldr	r3, [pc, #96]	@ (8002eb8 <MX_SPI3_Init+0x74>)
 8002e58:	2200      	movs	r2, #0
 8002e5a:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_4BIT;
 8002e5c:	4b16      	ldr	r3, [pc, #88]	@ (8002eb8 <MX_SPI3_Init+0x74>)
 8002e5e:	f44f 7240 	mov.w	r2, #768	@ 0x300
 8002e62:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002e64:	4b14      	ldr	r3, [pc, #80]	@ (8002eb8 <MX_SPI3_Init+0x74>)
 8002e66:	2200      	movs	r2, #0
 8002e68:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002e6a:	4b13      	ldr	r3, [pc, #76]	@ (8002eb8 <MX_SPI3_Init+0x74>)
 8002e6c:	2200      	movs	r2, #0
 8002e6e:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8002e70:	4b11      	ldr	r3, [pc, #68]	@ (8002eb8 <MX_SPI3_Init+0x74>)
 8002e72:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002e76:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002e78:	4b0f      	ldr	r3, [pc, #60]	@ (8002eb8 <MX_SPI3_Init+0x74>)
 8002e7a:	2200      	movs	r2, #0
 8002e7c:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002e7e:	4b0e      	ldr	r3, [pc, #56]	@ (8002eb8 <MX_SPI3_Init+0x74>)
 8002e80:	2200      	movs	r2, #0
 8002e82:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8002e84:	4b0c      	ldr	r3, [pc, #48]	@ (8002eb8 <MX_SPI3_Init+0x74>)
 8002e86:	2200      	movs	r2, #0
 8002e88:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002e8a:	4b0b      	ldr	r3, [pc, #44]	@ (8002eb8 <MX_SPI3_Init+0x74>)
 8002e8c:	2200      	movs	r2, #0
 8002e8e:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi3.Init.CRCPolynomial = 7;
 8002e90:	4b09      	ldr	r3, [pc, #36]	@ (8002eb8 <MX_SPI3_Init+0x74>)
 8002e92:	2207      	movs	r2, #7
 8002e94:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8002e96:	4b08      	ldr	r3, [pc, #32]	@ (8002eb8 <MX_SPI3_Init+0x74>)
 8002e98:	2200      	movs	r2, #0
 8002e9a:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8002e9c:	4b06      	ldr	r3, [pc, #24]	@ (8002eb8 <MX_SPI3_Init+0x74>)
 8002e9e:	2208      	movs	r2, #8
 8002ea0:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8002ea2:	4805      	ldr	r0, [pc, #20]	@ (8002eb8 <MX_SPI3_Init+0x74>)
 8002ea4:	f00a f8a4 	bl	800cff0 <HAL_SPI_Init>
 8002ea8:	4603      	mov	r3, r0
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	d001      	beq.n	8002eb2 <MX_SPI3_Init+0x6e>
  {
    Error_Handler();
 8002eae:	f000 fb6b 	bl	8003588 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8002eb2:	bf00      	nop
 8002eb4:	bd80      	pop	{r7, pc}
 8002eb6:	bf00      	nop
 8002eb8:	20000280 	.word	0x20000280
 8002ebc:	40003c00 	.word	0x40003c00

08002ec0 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8002ec0:	b580      	push	{r7, lr}
 8002ec2:	b096      	sub	sp, #88	@ 0x58
 8002ec4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002ec6:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8002eca:	2200      	movs	r2, #0
 8002ecc:	601a      	str	r2, [r3, #0]
 8002ece:	605a      	str	r2, [r3, #4]
 8002ed0:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002ed2:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8002ed6:	2200      	movs	r2, #0
 8002ed8:	601a      	str	r2, [r3, #0]
 8002eda:	605a      	str	r2, [r3, #4]
 8002edc:	609a      	str	r2, [r3, #8]
 8002ede:	60da      	str	r2, [r3, #12]
 8002ee0:	611a      	str	r2, [r3, #16]
 8002ee2:	615a      	str	r2, [r3, #20]
 8002ee4:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8002ee6:	1d3b      	adds	r3, r7, #4
 8002ee8:	222c      	movs	r2, #44	@ 0x2c
 8002eea:	2100      	movs	r1, #0
 8002eec:	4618      	mov	r0, r3
 8002eee:	f00d fef9 	bl	8010ce4 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8002ef2:	4b45      	ldr	r3, [pc, #276]	@ (8003008 <MX_TIM1_Init+0x148>)
 8002ef4:	4a45      	ldr	r2, [pc, #276]	@ (800300c <MX_TIM1_Init+0x14c>)
 8002ef6:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 1599;
 8002ef8:	4b43      	ldr	r3, [pc, #268]	@ (8003008 <MX_TIM1_Init+0x148>)
 8002efa:	f240 623f 	movw	r2, #1599	@ 0x63f
 8002efe:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002f00:	4b41      	ldr	r3, [pc, #260]	@ (8003008 <MX_TIM1_Init+0x148>)
 8002f02:	2200      	movs	r2, #0
 8002f04:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 49999;
 8002f06:	4b40      	ldr	r3, [pc, #256]	@ (8003008 <MX_TIM1_Init+0x148>)
 8002f08:	f24c 324f 	movw	r2, #49999	@ 0xc34f
 8002f0c:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002f0e:	4b3e      	ldr	r3, [pc, #248]	@ (8003008 <MX_TIM1_Init+0x148>)
 8002f10:	2200      	movs	r2, #0
 8002f12:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8002f14:	4b3c      	ldr	r3, [pc, #240]	@ (8003008 <MX_TIM1_Init+0x148>)
 8002f16:	2200      	movs	r2, #0
 8002f18:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002f1a:	4b3b      	ldr	r3, [pc, #236]	@ (8003008 <MX_TIM1_Init+0x148>)
 8002f1c:	2200      	movs	r2, #0
 8002f1e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_OC_Init(&htim1) != HAL_OK)
 8002f20:	4839      	ldr	r0, [pc, #228]	@ (8003008 <MX_TIM1_Init+0x148>)
 8002f22:	f00b f888 	bl	800e036 <HAL_TIM_OC_Init>
 8002f26:	4603      	mov	r3, r0
 8002f28:	2b00      	cmp	r3, #0
 8002f2a:	d001      	beq.n	8002f30 <MX_TIM1_Init+0x70>
  {
    Error_Handler();
 8002f2c:	f000 fb2c 	bl	8003588 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002f30:	2300      	movs	r3, #0
 8002f32:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8002f34:	2300      	movs	r3, #0
 8002f36:	653b      	str	r3, [r7, #80]	@ 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002f38:	2300      	movs	r3, #0
 8002f3a:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8002f3c:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8002f40:	4619      	mov	r1, r3
 8002f42:	4831      	ldr	r0, [pc, #196]	@ (8003008 <MX_TIM1_Init+0x148>)
 8002f44:	f00c fb78 	bl	800f638 <HAL_TIMEx_MasterConfigSynchronization>
 8002f48:	4603      	mov	r3, r0
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	d001      	beq.n	8002f52 <MX_TIM1_Init+0x92>
  {
    Error_Handler();
 8002f4e:	f000 fb1b 	bl	8003588 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 8002f52:	2300      	movs	r3, #0
 8002f54:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.Pulse = 0;
 8002f56:	2300      	movs	r3, #0
 8002f58:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002f5a:	2300      	movs	r3, #0
 8002f5c:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8002f5e:	2300      	movs	r3, #0
 8002f60:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002f62:	2300      	movs	r3, #0
 8002f64:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8002f66:	2300      	movs	r3, #0
 8002f68:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8002f6a:	2300      	movs	r3, #0
 8002f6c:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_OC_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002f6e:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8002f72:	2200      	movs	r2, #0
 8002f74:	4619      	mov	r1, r3
 8002f76:	4824      	ldr	r0, [pc, #144]	@ (8003008 <MX_TIM1_Init+0x148>)
 8002f78:	f00b fb0a 	bl	800e590 <HAL_TIM_OC_ConfigChannel>
 8002f7c:	4603      	mov	r3, r0
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	d001      	beq.n	8002f86 <MX_TIM1_Init+0xc6>
  {
    Error_Handler();
 8002f82:	f000 fb01 	bl	8003588 <Error_Handler>
  }
  if (HAL_TIM_OC_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002f86:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8002f8a:	2204      	movs	r2, #4
 8002f8c:	4619      	mov	r1, r3
 8002f8e:	481e      	ldr	r0, [pc, #120]	@ (8003008 <MX_TIM1_Init+0x148>)
 8002f90:	f00b fafe 	bl	800e590 <HAL_TIM_OC_ConfigChannel>
 8002f94:	4603      	mov	r3, r0
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	d001      	beq.n	8002f9e <MX_TIM1_Init+0xde>
  {
    Error_Handler();
 8002f9a:	f000 faf5 	bl	8003588 <Error_Handler>
  }
  if (HAL_TIM_OC_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8002f9e:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8002fa2:	2208      	movs	r2, #8
 8002fa4:	4619      	mov	r1, r3
 8002fa6:	4818      	ldr	r0, [pc, #96]	@ (8003008 <MX_TIM1_Init+0x148>)
 8002fa8:	f00b faf2 	bl	800e590 <HAL_TIM_OC_ConfigChannel>
 8002fac:	4603      	mov	r3, r0
 8002fae:	2b00      	cmp	r3, #0
 8002fb0:	d001      	beq.n	8002fb6 <MX_TIM1_Init+0xf6>
  {
    Error_Handler();
 8002fb2:	f000 fae9 	bl	8003588 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8002fb6:	2300      	movs	r3, #0
 8002fb8:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8002fba:	2300      	movs	r3, #0
 8002fbc:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8002fbe:	2300      	movs	r3, #0
 8002fc0:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8002fc2:	2300      	movs	r3, #0
 8002fc4:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8002fc6:	2300      	movs	r3, #0
 8002fc8:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8002fca:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002fce:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8002fd0:	2300      	movs	r3, #0
 8002fd2:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8002fd4:	2300      	movs	r3, #0
 8002fd6:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8002fd8:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002fdc:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8002fde:	2300      	movs	r3, #0
 8002fe0:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8002fe2:	2300      	movs	r3, #0
 8002fe4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8002fe6:	1d3b      	adds	r3, r7, #4
 8002fe8:	4619      	mov	r1, r3
 8002fea:	4807      	ldr	r0, [pc, #28]	@ (8003008 <MX_TIM1_Init+0x148>)
 8002fec:	f00c fbac 	bl	800f748 <HAL_TIMEx_ConfigBreakDeadTime>
 8002ff0:	4603      	mov	r3, r0
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	d001      	beq.n	8002ffa <MX_TIM1_Init+0x13a>
  {
    Error_Handler();
 8002ff6:	f000 fac7 	bl	8003588 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8002ffa:	4803      	ldr	r0, [pc, #12]	@ (8003008 <MX_TIM1_Init+0x148>)
 8002ffc:	f001 f9b8 	bl	8004370 <HAL_TIM_MspPostInit>

}
 8003000:	bf00      	nop
 8003002:	3758      	adds	r7, #88	@ 0x58
 8003004:	46bd      	mov	sp, r7
 8003006:	bd80      	pop	{r7, pc}
 8003008:	200002e4 	.word	0x200002e4
 800300c:	40012c00 	.word	0x40012c00

08003010 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8003010:	b580      	push	{r7, lr}
 8003012:	b088      	sub	sp, #32
 8003014:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003016:	f107 0314 	add.w	r3, r7, #20
 800301a:	2200      	movs	r2, #0
 800301c:	601a      	str	r2, [r3, #0]
 800301e:	605a      	str	r2, [r3, #4]
 8003020:	609a      	str	r2, [r3, #8]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8003022:	1d3b      	adds	r3, r7, #4
 8003024:	2200      	movs	r2, #0
 8003026:	601a      	str	r2, [r3, #0]
 8003028:	605a      	str	r2, [r3, #4]
 800302a:	609a      	str	r2, [r3, #8]
 800302c:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800302e:	4b21      	ldr	r3, [pc, #132]	@ (80030b4 <MX_TIM2_Init+0xa4>)
 8003030:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8003034:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8003036:	4b1f      	ldr	r3, [pc, #124]	@ (80030b4 <MX_TIM2_Init+0xa4>)
 8003038:	2200      	movs	r2, #0
 800303a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800303c:	4b1d      	ldr	r3, [pc, #116]	@ (80030b4 <MX_TIM2_Init+0xa4>)
 800303e:	2200      	movs	r2, #0
 8003040:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8003042:	4b1c      	ldr	r3, [pc, #112]	@ (80030b4 <MX_TIM2_Init+0xa4>)
 8003044:	f04f 32ff 	mov.w	r2, #4294967295
 8003048:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800304a:	4b1a      	ldr	r3, [pc, #104]	@ (80030b4 <MX_TIM2_Init+0xa4>)
 800304c:	2200      	movs	r2, #0
 800304e:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003050:	4b18      	ldr	r3, [pc, #96]	@ (80030b4 <MX_TIM2_Init+0xa4>)
 8003052:	2200      	movs	r2, #0
 8003054:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 8003056:	4817      	ldr	r0, [pc, #92]	@ (80030b4 <MX_TIM2_Init+0xa4>)
 8003058:	f00b fa42 	bl	800e4e0 <HAL_TIM_IC_Init>
 800305c:	4603      	mov	r3, r0
 800305e:	2b00      	cmp	r3, #0
 8003060:	d001      	beq.n	8003066 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8003062:	f000 fa91 	bl	8003588 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003066:	2300      	movs	r3, #0
 8003068:	617b      	str	r3, [r7, #20]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800306a:	2300      	movs	r3, #0
 800306c:	61fb      	str	r3, [r7, #28]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800306e:	f107 0314 	add.w	r3, r7, #20
 8003072:	4619      	mov	r1, r3
 8003074:	480f      	ldr	r0, [pc, #60]	@ (80030b4 <MX_TIM2_Init+0xa4>)
 8003076:	f00c fadf 	bl	800f638 <HAL_TIMEx_MasterConfigSynchronization>
 800307a:	4603      	mov	r3, r0
 800307c:	2b00      	cmp	r3, #0
 800307e:	d001      	beq.n	8003084 <MX_TIM2_Init+0x74>
  {
    Error_Handler();
 8003080:	f000 fa82 	bl	8003588 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8003084:	2300      	movs	r3, #0
 8003086:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8003088:	2301      	movs	r3, #1
 800308a:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 800308c:	2300      	movs	r3, #0
 800308e:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICFilter = 0;
 8003090:	2300      	movs	r3, #0
 8003092:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8003094:	1d3b      	adds	r3, r7, #4
 8003096:	2200      	movs	r2, #0
 8003098:	4619      	mov	r1, r3
 800309a:	4806      	ldr	r0, [pc, #24]	@ (80030b4 <MX_TIM2_Init+0xa4>)
 800309c:	f00b faf2 	bl	800e684 <HAL_TIM_IC_ConfigChannel>
 80030a0:	4603      	mov	r3, r0
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	d001      	beq.n	80030aa <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 80030a6:	f000 fa6f 	bl	8003588 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80030aa:	bf00      	nop
 80030ac:	3720      	adds	r7, #32
 80030ae:	46bd      	mov	sp, r7
 80030b0:	bd80      	pop	{r7, pc}
 80030b2:	bf00      	nop
 80030b4:	20000330 	.word	0x20000330

080030b8 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80030b8:	b580      	push	{r7, lr}
 80030ba:	b08e      	sub	sp, #56	@ 0x38
 80030bc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80030be:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80030c2:	2200      	movs	r2, #0
 80030c4:	601a      	str	r2, [r3, #0]
 80030c6:	605a      	str	r2, [r3, #4]
 80030c8:	609a      	str	r2, [r3, #8]
 80030ca:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80030cc:	f107 031c 	add.w	r3, r7, #28
 80030d0:	2200      	movs	r2, #0
 80030d2:	601a      	str	r2, [r3, #0]
 80030d4:	605a      	str	r2, [r3, #4]
 80030d6:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80030d8:	463b      	mov	r3, r7
 80030da:	2200      	movs	r2, #0
 80030dc:	601a      	str	r2, [r3, #0]
 80030de:	605a      	str	r2, [r3, #4]
 80030e0:	609a      	str	r2, [r3, #8]
 80030e2:	60da      	str	r2, [r3, #12]
 80030e4:	611a      	str	r2, [r3, #16]
 80030e6:	615a      	str	r2, [r3, #20]
 80030e8:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80030ea:	4b2d      	ldr	r3, [pc, #180]	@ (80031a0 <MX_TIM3_Init+0xe8>)
 80030ec:	4a2d      	ldr	r2, [pc, #180]	@ (80031a4 <MX_TIM3_Init+0xec>)
 80030ee:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 80030f0:	4b2b      	ldr	r3, [pc, #172]	@ (80031a0 <MX_TIM3_Init+0xe8>)
 80030f2:	2200      	movs	r2, #0
 80030f4:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80030f6:	4b2a      	ldr	r3, [pc, #168]	@ (80031a0 <MX_TIM3_Init+0xe8>)
 80030f8:	2200      	movs	r2, #0
 80030fa:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 80030fc:	4b28      	ldr	r3, [pc, #160]	@ (80031a0 <MX_TIM3_Init+0xe8>)
 80030fe:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8003102:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003104:	4b26      	ldr	r3, [pc, #152]	@ (80031a0 <MX_TIM3_Init+0xe8>)
 8003106:	2200      	movs	r2, #0
 8003108:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800310a:	4b25      	ldr	r3, [pc, #148]	@ (80031a0 <MX_TIM3_Init+0xe8>)
 800310c:	2200      	movs	r2, #0
 800310e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8003110:	4823      	ldr	r0, [pc, #140]	@ (80031a0 <MX_TIM3_Init+0xe8>)
 8003112:	f00a fe99 	bl	800de48 <HAL_TIM_Base_Init>
 8003116:	4603      	mov	r3, r0
 8003118:	2b00      	cmp	r3, #0
 800311a:	d001      	beq.n	8003120 <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 800311c:	f000 fa34 	bl	8003588 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003120:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003124:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8003126:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800312a:	4619      	mov	r1, r3
 800312c:	481c      	ldr	r0, [pc, #112]	@ (80031a0 <MX_TIM3_Init+0xe8>)
 800312e:	f00b fc59 	bl	800e9e4 <HAL_TIM_ConfigClockSource>
 8003132:	4603      	mov	r3, r0
 8003134:	2b00      	cmp	r3, #0
 8003136:	d001      	beq.n	800313c <MX_TIM3_Init+0x84>
  {
    Error_Handler();
 8003138:	f000 fa26 	bl	8003588 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 800313c:	4818      	ldr	r0, [pc, #96]	@ (80031a0 <MX_TIM3_Init+0xe8>)
 800313e:	f00a ffd1 	bl	800e0e4 <HAL_TIM_PWM_Init>
 8003142:	4603      	mov	r3, r0
 8003144:	2b00      	cmp	r3, #0
 8003146:	d001      	beq.n	800314c <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 8003148:	f000 fa1e 	bl	8003588 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800314c:	2300      	movs	r3, #0
 800314e:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003150:	2300      	movs	r3, #0
 8003152:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8003154:	f107 031c 	add.w	r3, r7, #28
 8003158:	4619      	mov	r1, r3
 800315a:	4811      	ldr	r0, [pc, #68]	@ (80031a0 <MX_TIM3_Init+0xe8>)
 800315c:	f00c fa6c 	bl	800f638 <HAL_TIMEx_MasterConfigSynchronization>
 8003160:	4603      	mov	r3, r0
 8003162:	2b00      	cmp	r3, #0
 8003164:	d001      	beq.n	800316a <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 8003166:	f000 fa0f 	bl	8003588 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800316a:	2360      	movs	r3, #96	@ 0x60
 800316c:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 800316e:	2300      	movs	r3, #0
 8003170:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003172:	2300      	movs	r3, #0
 8003174:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003176:	2300      	movs	r3, #0
 8003178:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800317a:	463b      	mov	r3, r7
 800317c:	2208      	movs	r2, #8
 800317e:	4619      	mov	r1, r3
 8003180:	4807      	ldr	r0, [pc, #28]	@ (80031a0 <MX_TIM3_Init+0xe8>)
 8003182:	f00b fb1b 	bl	800e7bc <HAL_TIM_PWM_ConfigChannel>
 8003186:	4603      	mov	r3, r0
 8003188:	2b00      	cmp	r3, #0
 800318a:	d001      	beq.n	8003190 <MX_TIM3_Init+0xd8>
  {
    Error_Handler();
 800318c:	f000 f9fc 	bl	8003588 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8003190:	4803      	ldr	r0, [pc, #12]	@ (80031a0 <MX_TIM3_Init+0xe8>)
 8003192:	f001 f8ed 	bl	8004370 <HAL_TIM_MspPostInit>

}
 8003196:	bf00      	nop
 8003198:	3738      	adds	r7, #56	@ 0x38
 800319a:	46bd      	mov	sp, r7
 800319c:	bd80      	pop	{r7, pc}
 800319e:	bf00      	nop
 80031a0:	2000037c 	.word	0x2000037c
 80031a4:	40000400 	.word	0x40000400

080031a8 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 80031a8:	b580      	push	{r7, lr}
 80031aa:	b08e      	sub	sp, #56	@ 0x38
 80031ac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80031ae:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80031b2:	2200      	movs	r2, #0
 80031b4:	601a      	str	r2, [r3, #0]
 80031b6:	605a      	str	r2, [r3, #4]
 80031b8:	609a      	str	r2, [r3, #8]
 80031ba:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80031bc:	f107 031c 	add.w	r3, r7, #28
 80031c0:	2200      	movs	r2, #0
 80031c2:	601a      	str	r2, [r3, #0]
 80031c4:	605a      	str	r2, [r3, #4]
 80031c6:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80031c8:	463b      	mov	r3, r7
 80031ca:	2200      	movs	r2, #0
 80031cc:	601a      	str	r2, [r3, #0]
 80031ce:	605a      	str	r2, [r3, #4]
 80031d0:	609a      	str	r2, [r3, #8]
 80031d2:	60da      	str	r2, [r3, #12]
 80031d4:	611a      	str	r2, [r3, #16]
 80031d6:	615a      	str	r2, [r3, #20]
 80031d8:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80031da:	4b2b      	ldr	r3, [pc, #172]	@ (8003288 <MX_TIM4_Init+0xe0>)
 80031dc:	4a2b      	ldr	r2, [pc, #172]	@ (800328c <MX_TIM4_Init+0xe4>)
 80031de:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 799;
 80031e0:	4b29      	ldr	r3, [pc, #164]	@ (8003288 <MX_TIM4_Init+0xe0>)
 80031e2:	f240 321f 	movw	r2, #799	@ 0x31f
 80031e6:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80031e8:	4b27      	ldr	r3, [pc, #156]	@ (8003288 <MX_TIM4_Init+0xe0>)
 80031ea:	2200      	movs	r2, #0
 80031ec:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 99;
 80031ee:	4b26      	ldr	r3, [pc, #152]	@ (8003288 <MX_TIM4_Init+0xe0>)
 80031f0:	2263      	movs	r2, #99	@ 0x63
 80031f2:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80031f4:	4b24      	ldr	r3, [pc, #144]	@ (8003288 <MX_TIM4_Init+0xe0>)
 80031f6:	2200      	movs	r2, #0
 80031f8:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80031fa:	4b23      	ldr	r3, [pc, #140]	@ (8003288 <MX_TIM4_Init+0xe0>)
 80031fc:	2280      	movs	r2, #128	@ 0x80
 80031fe:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8003200:	4821      	ldr	r0, [pc, #132]	@ (8003288 <MX_TIM4_Init+0xe0>)
 8003202:	f00a fe21 	bl	800de48 <HAL_TIM_Base_Init>
 8003206:	4603      	mov	r3, r0
 8003208:	2b00      	cmp	r3, #0
 800320a:	d001      	beq.n	8003210 <MX_TIM4_Init+0x68>
  {
    Error_Handler();
 800320c:	f000 f9bc 	bl	8003588 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003210:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003214:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8003216:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800321a:	4619      	mov	r1, r3
 800321c:	481a      	ldr	r0, [pc, #104]	@ (8003288 <MX_TIM4_Init+0xe0>)
 800321e:	f00b fbe1 	bl	800e9e4 <HAL_TIM_ConfigClockSource>
 8003222:	4603      	mov	r3, r0
 8003224:	2b00      	cmp	r3, #0
 8003226:	d001      	beq.n	800322c <MX_TIM4_Init+0x84>
  {
    Error_Handler();
 8003228:	f000 f9ae 	bl	8003588 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim4) != HAL_OK)
 800322c:	4816      	ldr	r0, [pc, #88]	@ (8003288 <MX_TIM4_Init+0xe0>)
 800322e:	f00a ff02 	bl	800e036 <HAL_TIM_OC_Init>
 8003232:	4603      	mov	r3, r0
 8003234:	2b00      	cmp	r3, #0
 8003236:	d001      	beq.n	800323c <MX_TIM4_Init+0x94>
  {
    Error_Handler();
 8003238:	f000 f9a6 	bl	8003588 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 800323c:	2320      	movs	r3, #32
 800323e:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003240:	2300      	movs	r3, #0
 8003242:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8003244:	f107 031c 	add.w	r3, r7, #28
 8003248:	4619      	mov	r1, r3
 800324a:	480f      	ldr	r0, [pc, #60]	@ (8003288 <MX_TIM4_Init+0xe0>)
 800324c:	f00c f9f4 	bl	800f638 <HAL_TIMEx_MasterConfigSynchronization>
 8003250:	4603      	mov	r3, r0
 8003252:	2b00      	cmp	r3, #0
 8003254:	d001      	beq.n	800325a <MX_TIM4_Init+0xb2>
  {
    Error_Handler();
 8003256:	f000 f997 	bl	8003588 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 800325a:	2300      	movs	r3, #0
 800325c:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 800325e:	2300      	movs	r3, #0
 8003260:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003262:	2300      	movs	r3, #0
 8003264:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003266:	2300      	movs	r3, #0
 8003268:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_OC_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800326a:	463b      	mov	r3, r7
 800326c:	2208      	movs	r2, #8
 800326e:	4619      	mov	r1, r3
 8003270:	4805      	ldr	r0, [pc, #20]	@ (8003288 <MX_TIM4_Init+0xe0>)
 8003272:	f00b f98d 	bl	800e590 <HAL_TIM_OC_ConfigChannel>
 8003276:	4603      	mov	r3, r0
 8003278:	2b00      	cmp	r3, #0
 800327a:	d001      	beq.n	8003280 <MX_TIM4_Init+0xd8>
  {
    Error_Handler();
 800327c:	f000 f984 	bl	8003588 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8003280:	bf00      	nop
 8003282:	3738      	adds	r7, #56	@ 0x38
 8003284:	46bd      	mov	sp, r7
 8003286:	bd80      	pop	{r7, pc}
 8003288:	200003c8 	.word	0x200003c8
 800328c:	40000800 	.word	0x40000800

08003290 <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 8003290:	b580      	push	{r7, lr}
 8003292:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8003294:	4b14      	ldr	r3, [pc, #80]	@ (80032e8 <MX_UART4_Init+0x58>)
 8003296:	4a15      	ldr	r2, [pc, #84]	@ (80032ec <MX_UART4_Init+0x5c>)
 8003298:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 800329a:	4b13      	ldr	r3, [pc, #76]	@ (80032e8 <MX_UART4_Init+0x58>)
 800329c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80032a0:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 80032a2:	4b11      	ldr	r3, [pc, #68]	@ (80032e8 <MX_UART4_Init+0x58>)
 80032a4:	2200      	movs	r2, #0
 80032a6:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 80032a8:	4b0f      	ldr	r3, [pc, #60]	@ (80032e8 <MX_UART4_Init+0x58>)
 80032aa:	2200      	movs	r2, #0
 80032ac:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 80032ae:	4b0e      	ldr	r3, [pc, #56]	@ (80032e8 <MX_UART4_Init+0x58>)
 80032b0:	2200      	movs	r2, #0
 80032b2:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 80032b4:	4b0c      	ldr	r3, [pc, #48]	@ (80032e8 <MX_UART4_Init+0x58>)
 80032b6:	220c      	movs	r2, #12
 80032b8:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80032ba:	4b0b      	ldr	r3, [pc, #44]	@ (80032e8 <MX_UART4_Init+0x58>)
 80032bc:	2200      	movs	r2, #0
 80032be:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 80032c0:	4b09      	ldr	r3, [pc, #36]	@ (80032e8 <MX_UART4_Init+0x58>)
 80032c2:	2200      	movs	r2, #0
 80032c4:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80032c6:	4b08      	ldr	r3, [pc, #32]	@ (80032e8 <MX_UART4_Init+0x58>)
 80032c8:	2200      	movs	r2, #0
 80032ca:	621a      	str	r2, [r3, #32]
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80032cc:	4b06      	ldr	r3, [pc, #24]	@ (80032e8 <MX_UART4_Init+0x58>)
 80032ce:	2200      	movs	r2, #0
 80032d0:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_HalfDuplex_Init(&huart4) != HAL_OK)
 80032d2:	4805      	ldr	r0, [pc, #20]	@ (80032e8 <MX_UART4_Init+0x58>)
 80032d4:	f00c fb04 	bl	800f8e0 <HAL_HalfDuplex_Init>
 80032d8:	4603      	mov	r3, r0
 80032da:	2b00      	cmp	r3, #0
 80032dc:	d001      	beq.n	80032e2 <MX_UART4_Init+0x52>
  {
    Error_Handler();
 80032de:	f000 f953 	bl	8003588 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 80032e2:	bf00      	nop
 80032e4:	bd80      	pop	{r7, pc}
 80032e6:	bf00      	nop
 80032e8:	20000414 	.word	0x20000414
 80032ec:	40004c00 	.word	0x40004c00

080032f0 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80032f0:	b580      	push	{r7, lr}
 80032f2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80032f4:	4b14      	ldr	r3, [pc, #80]	@ (8003348 <MX_USART1_UART_Init+0x58>)
 80032f6:	4a15      	ldr	r2, [pc, #84]	@ (800334c <MX_USART1_UART_Init+0x5c>)
 80032f8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80032fa:	4b13      	ldr	r3, [pc, #76]	@ (8003348 <MX_USART1_UART_Init+0x58>)
 80032fc:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8003300:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8003302:	4b11      	ldr	r3, [pc, #68]	@ (8003348 <MX_USART1_UART_Init+0x58>)
 8003304:	2200      	movs	r2, #0
 8003306:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8003308:	4b0f      	ldr	r3, [pc, #60]	@ (8003348 <MX_USART1_UART_Init+0x58>)
 800330a:	2200      	movs	r2, #0
 800330c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800330e:	4b0e      	ldr	r3, [pc, #56]	@ (8003348 <MX_USART1_UART_Init+0x58>)
 8003310:	2200      	movs	r2, #0
 8003312:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8003314:	4b0c      	ldr	r3, [pc, #48]	@ (8003348 <MX_USART1_UART_Init+0x58>)
 8003316:	220c      	movs	r2, #12
 8003318:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_RTS_CTS;
 800331a:	4b0b      	ldr	r3, [pc, #44]	@ (8003348 <MX_USART1_UART_Init+0x58>)
 800331c:	f44f 7240 	mov.w	r2, #768	@ 0x300
 8003320:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8003322:	4b09      	ldr	r3, [pc, #36]	@ (8003348 <MX_USART1_UART_Init+0x58>)
 8003324:	2200      	movs	r2, #0
 8003326:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8003328:	4b07      	ldr	r3, [pc, #28]	@ (8003348 <MX_USART1_UART_Init+0x58>)
 800332a:	2200      	movs	r2, #0
 800332c:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800332e:	4b06      	ldr	r3, [pc, #24]	@ (8003348 <MX_USART1_UART_Init+0x58>)
 8003330:	2200      	movs	r2, #0
 8003332:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8003334:	4804      	ldr	r0, [pc, #16]	@ (8003348 <MX_USART1_UART_Init+0x58>)
 8003336:	f00c fa85 	bl	800f844 <HAL_UART_Init>
 800333a:	4603      	mov	r3, r0
 800333c:	2b00      	cmp	r3, #0
 800333e:	d001      	beq.n	8003344 <MX_USART1_UART_Init+0x54>
  {
    Error_Handler();
 8003340:	f000 f922 	bl	8003588 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8003344:	bf00      	nop
 8003346:	bd80      	pop	{r7, pc}
 8003348:	2000049c 	.word	0x2000049c
 800334c:	40013800 	.word	0x40013800

08003350 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8003350:	b580      	push	{r7, lr}
 8003352:	b082      	sub	sp, #8
 8003354:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8003356:	4b10      	ldr	r3, [pc, #64]	@ (8003398 <MX_DMA_Init+0x48>)
 8003358:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800335a:	4a0f      	ldr	r2, [pc, #60]	@ (8003398 <MX_DMA_Init+0x48>)
 800335c:	f043 0301 	orr.w	r3, r3, #1
 8003360:	6493      	str	r3, [r2, #72]	@ 0x48
 8003362:	4b0d      	ldr	r3, [pc, #52]	@ (8003398 <MX_DMA_Init+0x48>)
 8003364:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003366:	f003 0301 	and.w	r3, r3, #1
 800336a:	607b      	str	r3, [r7, #4]
 800336c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 800336e:	2200      	movs	r2, #0
 8003370:	2100      	movs	r1, #0
 8003372:	200b      	movs	r0, #11
 8003374:	f005 ff4d 	bl	8009212 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8003378:	200b      	movs	r0, #11
 800337a:	f005 ff66 	bl	800924a <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 800337e:	2200      	movs	r2, #0
 8003380:	2100      	movs	r1, #0
 8003382:	200f      	movs	r0, #15
 8003384:	f005 ff45 	bl	8009212 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 8003388:	200f      	movs	r0, #15
 800338a:	f005 ff5e 	bl	800924a <HAL_NVIC_EnableIRQ>

}
 800338e:	bf00      	nop
 8003390:	3708      	adds	r7, #8
 8003392:	46bd      	mov	sp, r7
 8003394:	bd80      	pop	{r7, pc}
 8003396:	bf00      	nop
 8003398:	40021000 	.word	0x40021000

0800339c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800339c:	b580      	push	{r7, lr}
 800339e:	b08a      	sub	sp, #40	@ 0x28
 80033a0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80033a2:	f107 0314 	add.w	r3, r7, #20
 80033a6:	2200      	movs	r2, #0
 80033a8:	601a      	str	r2, [r3, #0]
 80033aa:	605a      	str	r2, [r3, #4]
 80033ac:	609a      	str	r2, [r3, #8]
 80033ae:	60da      	str	r2, [r3, #12]
 80033b0:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */
  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80033b2:	4b71      	ldr	r3, [pc, #452]	@ (8003578 <MX_GPIO_Init+0x1dc>)
 80033b4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80033b6:	4a70      	ldr	r2, [pc, #448]	@ (8003578 <MX_GPIO_Init+0x1dc>)
 80033b8:	f043 0304 	orr.w	r3, r3, #4
 80033bc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80033be:	4b6e      	ldr	r3, [pc, #440]	@ (8003578 <MX_GPIO_Init+0x1dc>)
 80033c0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80033c2:	f003 0304 	and.w	r3, r3, #4
 80033c6:	613b      	str	r3, [r7, #16]
 80033c8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80033ca:	4b6b      	ldr	r3, [pc, #428]	@ (8003578 <MX_GPIO_Init+0x1dc>)
 80033cc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80033ce:	4a6a      	ldr	r2, [pc, #424]	@ (8003578 <MX_GPIO_Init+0x1dc>)
 80033d0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80033d4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80033d6:	4b68      	ldr	r3, [pc, #416]	@ (8003578 <MX_GPIO_Init+0x1dc>)
 80033d8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80033da:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80033de:	60fb      	str	r3, [r7, #12]
 80033e0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80033e2:	4b65      	ldr	r3, [pc, #404]	@ (8003578 <MX_GPIO_Init+0x1dc>)
 80033e4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80033e6:	4a64      	ldr	r2, [pc, #400]	@ (8003578 <MX_GPIO_Init+0x1dc>)
 80033e8:	f043 0301 	orr.w	r3, r3, #1
 80033ec:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80033ee:	4b62      	ldr	r3, [pc, #392]	@ (8003578 <MX_GPIO_Init+0x1dc>)
 80033f0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80033f2:	f003 0301 	and.w	r3, r3, #1
 80033f6:	60bb      	str	r3, [r7, #8]
 80033f8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80033fa:	4b5f      	ldr	r3, [pc, #380]	@ (8003578 <MX_GPIO_Init+0x1dc>)
 80033fc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80033fe:	4a5e      	ldr	r2, [pc, #376]	@ (8003578 <MX_GPIO_Init+0x1dc>)
 8003400:	f043 0302 	orr.w	r3, r3, #2
 8003404:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003406:	4b5c      	ldr	r3, [pc, #368]	@ (8003578 <MX_GPIO_Init+0x1dc>)
 8003408:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800340a:	f003 0302 	and.w	r3, r3, #2
 800340e:	607b      	str	r3, [r7, #4]
 8003410:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8003412:	4b59      	ldr	r3, [pc, #356]	@ (8003578 <MX_GPIO_Init+0x1dc>)
 8003414:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003416:	4a58      	ldr	r2, [pc, #352]	@ (8003578 <MX_GPIO_Init+0x1dc>)
 8003418:	f043 0308 	orr.w	r3, r3, #8
 800341c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800341e:	4b56      	ldr	r3, [pc, #344]	@ (8003578 <MX_GPIO_Init+0x1dc>)
 8003420:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003422:	f003 0308 	and.w	r3, r3, #8
 8003426:	603b      	str	r3, [r7, #0]
 8003428:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DBG_GPIO_Port, DBG_Pin, GPIO_PIN_RESET);
 800342a:	2200      	movs	r2, #0
 800342c:	2108      	movs	r1, #8
 800342e:	4853      	ldr	r0, [pc, #332]	@ (800357c <MX_GPIO_Init+0x1e0>)
 8003430:	f006 fbf8 	bl	8009c24 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(FLASH_nCS_GPIO_Port, FLASH_nCS_Pin, GPIO_PIN_SET);
 8003434:	2201      	movs	r2, #1
 8003436:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800343a:	4851      	ldr	r0, [pc, #324]	@ (8003580 <MX_GPIO_Init+0x1e4>)
 800343c:	f006 fbf2 	bl	8009c24 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, FLASH_nWP_Pin|FLASH_nRESET_Pin, GPIO_PIN_SET);
 8003440:	2201      	movs	r2, #1
 8003442:	21c0      	movs	r1, #192	@ 0xc0
 8003444:	484d      	ldr	r0, [pc, #308]	@ (800357c <MX_GPIO_Init+0x1e0>)
 8003446:	f006 fbed 	bl	8009c24 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LTE_POWER_ON_Pin|LTE_RESET_Pin, GPIO_PIN_SET);
 800344a:	2201      	movs	r2, #1
 800344c:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 8003450:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8003454:	f006 fbe6 	bl	8009c24 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ACC_nCS_GPIO_Port, ACC_nCS_Pin, GPIO_PIN_RESET);
 8003458:	2200      	movs	r2, #0
 800345a:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800345e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8003462:	f006 fbdf 	bl	8009c24 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DTR_GPIO_Port, DTR_Pin, GPIO_PIN_RESET);
 8003466:	2200      	movs	r2, #0
 8003468:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800346c:	4844      	ldr	r0, [pc, #272]	@ (8003580 <MX_GPIO_Init+0x1e4>)
 800346e:	f006 fbd9 	bl	8009c24 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : USR_BTN_Pin PC4 */
  GPIO_InitStruct.Pin = USR_BTN_Pin|GPIO_PIN_4;
 8003472:	f242 0310 	movw	r3, #8208	@ 0x2010
 8003476:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8003478:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 800347c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800347e:	2300      	movs	r3, #0
 8003480:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003482:	f107 0314 	add.w	r3, r7, #20
 8003486:	4619      	mov	r1, r3
 8003488:	483c      	ldr	r0, [pc, #240]	@ (800357c <MX_GPIO_Init+0x1e0>)
 800348a:	f006 fa21 	bl	80098d0 <HAL_GPIO_Init>

  /*Configure GPIO pins : DBG_Pin FLASH_nWP_Pin FLASH_nRESET_Pin */
  GPIO_InitStruct.Pin = DBG_Pin|FLASH_nWP_Pin|FLASH_nRESET_Pin;
 800348e:	23c8      	movs	r3, #200	@ 0xc8
 8003490:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003492:	2301      	movs	r3, #1
 8003494:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003496:	2300      	movs	r3, #0
 8003498:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800349a:	2300      	movs	r3, #0
 800349c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800349e:	f107 0314 	add.w	r3, r7, #20
 80034a2:	4619      	mov	r1, r3
 80034a4:	4835      	ldr	r0, [pc, #212]	@ (800357c <MX_GPIO_Init+0x1e0>)
 80034a6:	f006 fa13 	bl	80098d0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 80034aa:	2308      	movs	r3, #8
 80034ac:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80034ae:	2300      	movs	r3, #0
 80034b0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80034b2:	2300      	movs	r3, #0
 80034b4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80034b6:	f107 0314 	add.w	r3, r7, #20
 80034ba:	4619      	mov	r1, r3
 80034bc:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80034c0:	f006 fa06 	bl	80098d0 <HAL_GPIO_Init>

  /*Configure GPIO pins : FLASH_nCS_Pin DTR_Pin */
  GPIO_InitStruct.Pin = FLASH_nCS_Pin|DTR_Pin;
 80034c4:	f44f 5390 	mov.w	r3, #4608	@ 0x1200
 80034c8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80034ca:	2301      	movs	r3, #1
 80034cc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80034ce:	2300      	movs	r3, #0
 80034d0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80034d2:	2300      	movs	r3, #0
 80034d4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80034d6:	f107 0314 	add.w	r3, r7, #20
 80034da:	4619      	mov	r1, r3
 80034dc:	4828      	ldr	r0, [pc, #160]	@ (8003580 <MX_GPIO_Init+0x1e4>)
 80034de:	f006 f9f7 	bl	80098d0 <HAL_GPIO_Init>

  /*Configure GPIO pins : LTE_POWER_ON_Pin LTE_RESET_Pin */
  GPIO_InitStruct.Pin = LTE_POWER_ON_Pin|LTE_RESET_Pin;
 80034e2:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 80034e6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 80034e8:	2311      	movs	r3, #17
 80034ea:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80034ec:	2300      	movs	r3, #0
 80034ee:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80034f0:	2300      	movs	r3, #0
 80034f2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80034f4:	f107 0314 	add.w	r3, r7, #20
 80034f8:	4619      	mov	r1, r3
 80034fa:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80034fe:	f006 f9e7 	bl	80098d0 <HAL_GPIO_Init>

  /*Configure GPIO pin : ACC_nCS_Pin */
  GPIO_InitStruct.Pin = ACC_nCS_Pin;
 8003502:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003506:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003508:	2301      	movs	r3, #1
 800350a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800350c:	2300      	movs	r3, #0
 800350e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003510:	2300      	movs	r3, #0
 8003512:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(ACC_nCS_GPIO_Port, &GPIO_InitStruct);
 8003514:	f107 0314 	add.w	r3, r7, #20
 8003518:	4619      	mov	r1, r3
 800351a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800351e:	f006 f9d7 	bl	80098d0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8003522:	2304      	movs	r3, #4
 8003524:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8003526:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 800352a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800352c:	2300      	movs	r3, #0
 800352e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003530:	f107 0314 	add.w	r3, r7, #20
 8003534:	4619      	mov	r1, r3
 8003536:	4813      	ldr	r0, [pc, #76]	@ (8003584 <MX_GPIO_Init+0x1e8>)
 8003538:	f006 f9ca 	bl	80098d0 <HAL_GPIO_Init>

  /*Configure GPIO pin : DCD_Pin */
  GPIO_InitStruct.Pin = DCD_Pin;
 800353c:	2320      	movs	r3, #32
 800353e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003540:	2300      	movs	r3, #0
 8003542:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003544:	2300      	movs	r3, #0
 8003546:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(DCD_GPIO_Port, &GPIO_InitStruct);
 8003548:	f107 0314 	add.w	r3, r7, #20
 800354c:	4619      	mov	r1, r3
 800354e:	480c      	ldr	r0, [pc, #48]	@ (8003580 <MX_GPIO_Init+0x1e4>)
 8003550:	f006 f9be 	bl	80098d0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8003554:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8003558:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800355a:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 800355e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003560:	2300      	movs	r3, #0
 8003562:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003564:	f107 0314 	add.w	r3, r7, #20
 8003568:	4619      	mov	r1, r3
 800356a:	4805      	ldr	r0, [pc, #20]	@ (8003580 <MX_GPIO_Init+0x1e4>)
 800356c:	f006 f9b0 	bl	80098d0 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */
  /* USER CODE END MX_GPIO_Init_2 */
}
 8003570:	bf00      	nop
 8003572:	3728      	adds	r7, #40	@ 0x28
 8003574:	46bd      	mov	sp, r7
 8003576:	bd80      	pop	{r7, pc}
 8003578:	40021000 	.word	0x40021000
 800357c:	48000800 	.word	0x48000800
 8003580:	48000400 	.word	0x48000400
 8003584:	48000c00 	.word	0x48000c00

08003588 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003588:	b480      	push	{r7}
 800358a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800358c:	b672      	cpsid	i
}
 800358e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8003590:	bf00      	nop
 8003592:	e7fd      	b.n	8003590 <Error_Handler+0x8>

08003594 <Save_Data>:
#include "string.h"


/*-----ACQUISIZIONE MISURE E LOG DEI DATI-----*/
void Save_Data(void)
{
 8003594:	b580      	push	{r7, lr}
 8003596:	af00      	add	r7, sp, #0
	if(flags.ADC_Half_Buffer)
 8003598:	4b75      	ldr	r3, [pc, #468]	@ (8003770 <Save_Data+0x1dc>)
 800359a:	781b      	ldrb	r3, [r3, #0]
 800359c:	f003 0302 	and.w	r3, r3, #2
 80035a0:	b2db      	uxtb	r3, r3
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	d018      	beq.n	80035d8 <Save_Data+0x44>
	{
		memcpy(Logging_Buffer + Address_Offset, &Pressure[0], PRESS_FULL_SAMPLES);
 80035a6:	4b73      	ldr	r3, [pc, #460]	@ (8003774 <Save_Data+0x1e0>)
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	461a      	mov	r2, r3
 80035ac:	4b72      	ldr	r3, [pc, #456]	@ (8003778 <Save_Data+0x1e4>)
 80035ae:	4413      	add	r3, r2
 80035b0:	f44f 7248 	mov.w	r2, #800	@ 0x320
 80035b4:	4971      	ldr	r1, [pc, #452]	@ (800377c <Save_Data+0x1e8>)
 80035b6:	4618      	mov	r0, r3
 80035b8:	f00d fbfe 	bl	8010db8 <memcpy>
		Last_Pressure = Pressure[PRESS_HALF_SAMPLES - 1];
 80035bc:	4b6f      	ldr	r3, [pc, #444]	@ (800377c <Save_Data+0x1e8>)
 80035be:	f8b3 231e 	ldrh.w	r2, [r3, #798]	@ 0x31e
 80035c2:	4b6f      	ldr	r3, [pc, #444]	@ (8003780 <Save_Data+0x1ec>)
 80035c4:	801a      	strh	r2, [r3, #0]
		Warning_Detection(&Pressure[0]);
 80035c6:	486d      	ldr	r0, [pc, #436]	@ (800377c <Save_Data+0x1e8>)
 80035c8:	f000 f8f0 	bl	80037ac <Warning_Detection>
		flags.ADC_Half_Buffer = 0;
 80035cc:	4a68      	ldr	r2, [pc, #416]	@ (8003770 <Save_Data+0x1dc>)
 80035ce:	7813      	ldrb	r3, [r2, #0]
 80035d0:	f023 0302 	bic.w	r3, r3, #2
 80035d4:	7013      	strb	r3, [r2, #0]
 80035d6:	e01e      	b.n	8003616 <Save_Data+0x82>
	}
	else if(flags.ADC_Full_Buffer)
 80035d8:	4b65      	ldr	r3, [pc, #404]	@ (8003770 <Save_Data+0x1dc>)
 80035da:	781b      	ldrb	r3, [r3, #0]
 80035dc:	f003 0304 	and.w	r3, r3, #4
 80035e0:	b2db      	uxtb	r3, r3
 80035e2:	2b00      	cmp	r3, #0
 80035e4:	d017      	beq.n	8003616 <Save_Data+0x82>
	{
		memcpy(Logging_Buffer + Address_Offset, &Pressure[PRESS_HALF_SAMPLES], PRESS_FULL_SAMPLES);
 80035e6:	4b63      	ldr	r3, [pc, #396]	@ (8003774 <Save_Data+0x1e0>)
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	461a      	mov	r2, r3
 80035ec:	4b62      	ldr	r3, [pc, #392]	@ (8003778 <Save_Data+0x1e4>)
 80035ee:	4413      	add	r3, r2
 80035f0:	f44f 7248 	mov.w	r2, #800	@ 0x320
 80035f4:	4963      	ldr	r1, [pc, #396]	@ (8003784 <Save_Data+0x1f0>)
 80035f6:	4618      	mov	r0, r3
 80035f8:	f00d fbde 	bl	8010db8 <memcpy>
		Last_Pressure = Pressure[PRESS_FULL_SAMPLES - 1];
 80035fc:	4b5f      	ldr	r3, [pc, #380]	@ (800377c <Save_Data+0x1e8>)
 80035fe:	f8b3 263e 	ldrh.w	r2, [r3, #1598]	@ 0x63e
 8003602:	4b5f      	ldr	r3, [pc, #380]	@ (8003780 <Save_Data+0x1ec>)
 8003604:	801a      	strh	r2, [r3, #0]
		Warning_Detection(&Pressure[PRESS_HALF_SAMPLES]);
 8003606:	485f      	ldr	r0, [pc, #380]	@ (8003784 <Save_Data+0x1f0>)
 8003608:	f000 f8d0 	bl	80037ac <Warning_Detection>
		flags.ADC_Full_Buffer = 0;
 800360c:	4a58      	ldr	r2, [pc, #352]	@ (8003770 <Save_Data+0x1dc>)
 800360e:	7813      	ldrb	r3, [r2, #0]
 8003610:	f023 0304 	bic.w	r3, r3, #4
 8003614:	7013      	strb	r3, [r2, #0]
	}
	Address_Offset += PRESS_FULL_SAMPLES;
 8003616:	4b57      	ldr	r3, [pc, #348]	@ (8003774 <Save_Data+0x1e0>)
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	f503 7348 	add.w	r3, r3, #800	@ 0x320
 800361e:	4a55      	ldr	r2, [pc, #340]	@ (8003774 <Save_Data+0x1e0>)
 8003620:	6013      	str	r3, [r2, #0]

	memcpy(Logging_Buffer + Address_Offset, Volume_Period, MAX_VOLUME_LEN);
 8003622:	4b54      	ldr	r3, [pc, #336]	@ (8003774 <Save_Data+0x1e0>)
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	461a      	mov	r2, r3
 8003628:	4b53      	ldr	r3, [pc, #332]	@ (8003778 <Save_Data+0x1e4>)
 800362a:	4413      	add	r3, r2
 800362c:	2228      	movs	r2, #40	@ 0x28
 800362e:	4956      	ldr	r1, [pc, #344]	@ (8003788 <Save_Data+0x1f4>)
 8003630:	4618      	mov	r0, r3
 8003632:	f00d fbc1 	bl	8010db8 <memcpy>
	Last_Volume = Volume_Period[Period_cnt];
 8003636:	4b55      	ldr	r3, [pc, #340]	@ (800378c <Save_Data+0x1f8>)
 8003638:	781b      	ldrb	r3, [r3, #0]
 800363a:	461a      	mov	r2, r3
 800363c:	4b52      	ldr	r3, [pc, #328]	@ (8003788 <Save_Data+0x1f4>)
 800363e:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 8003642:	4b53      	ldr	r3, [pc, #332]	@ (8003790 <Save_Data+0x1fc>)
 8003644:	801a      	strh	r2, [r3, #0]
	Period_cnt = 0;
 8003646:	4b51      	ldr	r3, [pc, #324]	@ (800378c <Save_Data+0x1f8>)
 8003648:	2200      	movs	r2, #0
 800364a:	701a      	strb	r2, [r3, #0]
	memset(Volume_Period, 0, sizeof(Volume_Period));
 800364c:	2228      	movs	r2, #40	@ 0x28
 800364e:	2100      	movs	r1, #0
 8003650:	484d      	ldr	r0, [pc, #308]	@ (8003788 <Save_Data+0x1f4>)
 8003652:	f00d fb47 	bl	8010ce4 <memset>
	Address_Offset += MAX_VOLUME_LEN;
 8003656:	4b47      	ldr	r3, [pc, #284]	@ (8003774 <Save_Data+0x1e0>)
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	3328      	adds	r3, #40	@ 0x28
 800365c:	4a45      	ldr	r2, [pc, #276]	@ (8003774 <Save_Data+0x1e0>)
 800365e:	6013      	str	r3, [r2, #0]

	if(flags.ACC_Present)
 8003660:	4b43      	ldr	r3, [pc, #268]	@ (8003770 <Save_Data+0x1dc>)
 8003662:	785b      	ldrb	r3, [r3, #1]
 8003664:	f003 0301 	and.w	r3, r3, #1
 8003668:	b2db      	uxtb	r3, r3
 800366a:	2b00      	cmp	r3, #0
 800366c:	d017      	beq.n	800369e <Save_Data+0x10a>
	{
		memcpy(Logging_Buffer + Address_Offset, Acceleration, ACCELERATION_LEN);
 800366e:	4b41      	ldr	r3, [pc, #260]	@ (8003774 <Save_Data+0x1e0>)
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	461a      	mov	r2, r3
 8003674:	4b40      	ldr	r3, [pc, #256]	@ (8003778 <Save_Data+0x1e4>)
 8003676:	4413      	add	r3, r2
 8003678:	4a46      	ldr	r2, [pc, #280]	@ (8003794 <Save_Data+0x200>)
 800367a:	4618      	mov	r0, r3
 800367c:	4611      	mov	r1, r2
 800367e:	f44f 63af 	mov.w	r3, #1400	@ 0x578
 8003682:	461a      	mov	r2, r3
 8003684:	f00d fb98 	bl	8010db8 <memcpy>
		Last_Acceleration = Acceleration[ACCELERATION_LEN - 1];
 8003688:	4b42      	ldr	r3, [pc, #264]	@ (8003794 <Save_Data+0x200>)
 800368a:	f893 3577 	ldrb.w	r3, [r3, #1399]	@ 0x577
 800368e:	461a      	mov	r2, r3
 8003690:	4b41      	ldr	r3, [pc, #260]	@ (8003798 <Save_Data+0x204>)
 8003692:	801a      	strh	r2, [r3, #0]
		flags.ACC_Complete = 0;
 8003694:	4a36      	ldr	r2, [pc, #216]	@ (8003770 <Save_Data+0x1dc>)
 8003696:	7853      	ldrb	r3, [r2, #1]
 8003698:	f023 0302 	bic.w	r3, r3, #2
 800369c:	7053      	strb	r3, [r2, #1]
	}
	Address_Offset += ACCELERATION_LEN;
 800369e:	4b35      	ldr	r3, [pc, #212]	@ (8003774 <Save_Data+0x1e0>)
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	f503 63af 	add.w	r3, r3, #1400	@ 0x578
 80036a6:	4a33      	ldr	r2, [pc, #204]	@ (8003774 <Save_Data+0x1e0>)
 80036a8:	6013      	str	r3, [r2, #0]

	INA3221_Read_Measure(&Supply);
 80036aa:	483c      	ldr	r0, [pc, #240]	@ (800379c <Save_Data+0x208>)
 80036ac:	f7fd f8af 	bl	800080e <INA3221_Read_Measure>
	memcpy(Logging_Buffer + Address_Offset, &Supply, SUPPLY_LEN);
 80036b0:	4b30      	ldr	r3, [pc, #192]	@ (8003774 <Save_Data+0x1e0>)
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	461a      	mov	r2, r3
 80036b6:	4b30      	ldr	r3, [pc, #192]	@ (8003778 <Save_Data+0x1e4>)
 80036b8:	4413      	add	r3, r2
 80036ba:	220c      	movs	r2, #12
 80036bc:	4937      	ldr	r1, [pc, #220]	@ (800379c <Save_Data+0x208>)
 80036be:	4618      	mov	r0, r3
 80036c0:	f00d fb7a 	bl	8010db8 <memcpy>
	Address_Offset += SUPPLY_LEN;
 80036c4:	4b2b      	ldr	r3, [pc, #172]	@ (8003774 <Save_Data+0x1e0>)
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	330c      	adds	r3, #12
 80036ca:	4a2a      	ldr	r2, [pc, #168]	@ (8003774 <Save_Data+0x1e0>)
 80036cc:	6013      	str	r3, [r2, #0]

	Temperature = Read_Temperature();
 80036ce:	f7fd f84d 	bl	800076c <Read_Temperature>
 80036d2:	4603      	mov	r3, r0
 80036d4:	461a      	mov	r2, r3
 80036d6:	4b32      	ldr	r3, [pc, #200]	@ (80037a0 <Save_Data+0x20c>)
 80036d8:	801a      	strh	r2, [r3, #0]
	memcpy(Logging_Buffer + Address_Offset, &Temperature, TEMP_LEN);
 80036da:	4b26      	ldr	r3, [pc, #152]	@ (8003774 <Save_Data+0x1e0>)
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	461a      	mov	r2, r3
 80036e0:	4b25      	ldr	r3, [pc, #148]	@ (8003778 <Save_Data+0x1e4>)
 80036e2:	4413      	add	r3, r2
 80036e4:	4a2e      	ldr	r2, [pc, #184]	@ (80037a0 <Save_Data+0x20c>)
 80036e6:	8812      	ldrh	r2, [r2, #0]
 80036e8:	801a      	strh	r2, [r3, #0]

	RAM_Save_Measure(Logging_Buffer);
 80036ea:	4823      	ldr	r0, [pc, #140]	@ (8003778 <Save_Data+0x1e4>)
 80036ec:	f000 f8c2 	bl	8003874 <RAM_Save_Measure>

	flags.ADC_Complete = 0;
 80036f0:	4a1f      	ldr	r2, [pc, #124]	@ (8003770 <Save_Data+0x1dc>)
 80036f2:	7813      	ldrb	r3, [r2, #0]
 80036f4:	f023 0301 	bic.w	r3, r3, #1
 80036f8:	7013      	strb	r3, [r2, #0]
	Address_Offset = 0;
 80036fa:	4b1e      	ldr	r3, [pc, #120]	@ (8003774 <Save_Data+0x1e0>)
 80036fc:	2200      	movs	r2, #0
 80036fe:	601a      	str	r2, [r3, #0]

	if(flags.Hammer_Detected || flags.Threshold_Detected)
 8003700:	4b1b      	ldr	r3, [pc, #108]	@ (8003770 <Save_Data+0x1dc>)
 8003702:	781b      	ldrb	r3, [r3, #0]
 8003704:	f003 0320 	and.w	r3, r3, #32
 8003708:	b2db      	uxtb	r3, r3
 800370a:	2b00      	cmp	r3, #0
 800370c:	d106      	bne.n	800371c <Save_Data+0x188>
 800370e:	4b18      	ldr	r3, [pc, #96]	@ (8003770 <Save_Data+0x1dc>)
 8003710:	781b      	ldrb	r3, [r3, #0]
 8003712:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003716:	b2db      	uxtb	r3, r3
 8003718:	2b00      	cmp	r3, #0
 800371a:	d027      	beq.n	800376c <Save_Data+0x1d8>
	{
		Seconds_After_Warning++;
 800371c:	4b21      	ldr	r3, [pc, #132]	@ (80037a4 <Save_Data+0x210>)
 800371e:	881b      	ldrh	r3, [r3, #0]
 8003720:	3301      	adds	r3, #1
 8003722:	b29a      	uxth	r2, r3
 8003724:	4b1f      	ldr	r3, [pc, #124]	@ (80037a4 <Save_Data+0x210>)
 8003726:	801a      	strh	r2, [r3, #0]
		if(Seconds_After_Warning == 30)
 8003728:	4b1e      	ldr	r3, [pc, #120]	@ (80037a4 <Save_Data+0x210>)
 800372a:	881b      	ldrh	r3, [r3, #0]
 800372c:	2b1e      	cmp	r3, #30
 800372e:	d11d      	bne.n	800376c <Save_Data+0x1d8>
		{
			state = SEND_RECORDING_STATE;
 8003730:	4b1d      	ldr	r3, [pc, #116]	@ (80037a8 <Save_Data+0x214>)
 8003732:	2202      	movs	r2, #2
 8003734:	701a      	strb	r2, [r3, #0]
			Seconds_After_Warning = 0;
 8003736:	4b1b      	ldr	r3, [pc, #108]	@ (80037a4 <Save_Data+0x210>)
 8003738:	2200      	movs	r2, #0
 800373a:	801a      	strh	r2, [r3, #0]
			if(flags.Hammer_Detected)
 800373c:	4b0c      	ldr	r3, [pc, #48]	@ (8003770 <Save_Data+0x1dc>)
 800373e:	781b      	ldrb	r3, [r3, #0]
 8003740:	f003 0320 	and.w	r3, r3, #32
 8003744:	b2db      	uxtb	r3, r3
 8003746:	2b00      	cmp	r3, #0
 8003748:	d004      	beq.n	8003754 <Save_Data+0x1c0>
			{
				flags.Hammer_Detected = 0;
 800374a:	4a09      	ldr	r2, [pc, #36]	@ (8003770 <Save_Data+0x1dc>)
 800374c:	7813      	ldrb	r3, [r2, #0]
 800374e:	f023 0320 	bic.w	r3, r3, #32
 8003752:	7013      	strb	r3, [r2, #0]
			}
			if(flags.Threshold_Detected)
 8003754:	4b06      	ldr	r3, [pc, #24]	@ (8003770 <Save_Data+0x1dc>)
 8003756:	781b      	ldrb	r3, [r3, #0]
 8003758:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800375c:	b2db      	uxtb	r3, r3
 800375e:	2b00      	cmp	r3, #0
 8003760:	d004      	beq.n	800376c <Save_Data+0x1d8>
			{
				flags.Threshold_Detected = 0;
 8003762:	4a03      	ldr	r2, [pc, #12]	@ (8003770 <Save_Data+0x1dc>)
 8003764:	7813      	ldrb	r3, [r2, #0]
 8003766:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800376a:	7013      	strb	r3, [r2, #0]
			}
		}
	}

}
 800376c:	bf00      	nop
 800376e:	bd80      	pop	{r7, pc}
 8003770:	20003928 	.word	0x20003928
 8003774:	20006ec0 	.word	0x20006ec0
 8003778:	200065f0 	.word	0x200065f0
 800377c:	200059a4 	.word	0x200059a4
 8003780:	20006584 	.word	0x20006584
 8003784:	20005cc4 	.word	0x20005cc4
 8003788:	20005fe4 	.word	0x20005fe4
 800378c:	200059a0 	.word	0x200059a0
 8003790:	20006586 	.word	0x20006586
 8003794:	2000600c 	.word	0x2000600c
 8003798:	20006588 	.word	0x20006588
 800379c:	20005994 	.word	0x20005994
 80037a0:	2000658a 	.word	0x2000658a
 80037a4:	20006f28 	.word	0x20006f28
 80037a8:	2000056c 	.word	0x2000056c

080037ac <Warning_Detection>:

/*-----DETECTION COLPO D'ARIETE-----*/
void Warning_Detection(uint16_t* Data)
{
 80037ac:	b480      	push	{r7}
 80037ae:	b085      	sub	sp, #20
 80037b0:	af00      	add	r7, sp, #0
 80037b2:	6078      	str	r0, [r7, #4]
	uint16_t max = Data[0];
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	881b      	ldrh	r3, [r3, #0]
 80037b8:	81fb      	strh	r3, [r7, #14]
	uint16_t min = Data[0];
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	881b      	ldrh	r3, [r3, #0]
 80037be:	81bb      	strh	r3, [r7, #12]

	for(int i = 1; i < PRESS_HALF_SAMPLES; i++)
 80037c0:	2301      	movs	r3, #1
 80037c2:	60bb      	str	r3, [r7, #8]
 80037c4:	e03c      	b.n	8003840 <Warning_Detection+0x94>
	{
		if(Data[i] > max)
 80037c6:	68bb      	ldr	r3, [r7, #8]
 80037c8:	005b      	lsls	r3, r3, #1
 80037ca:	687a      	ldr	r2, [r7, #4]
 80037cc:	4413      	add	r3, r2
 80037ce:	881b      	ldrh	r3, [r3, #0]
 80037d0:	89fa      	ldrh	r2, [r7, #14]
 80037d2:	429a      	cmp	r2, r3
 80037d4:	d206      	bcs.n	80037e4 <Warning_Detection+0x38>
		{
			max = Data[i];
 80037d6:	68bb      	ldr	r3, [r7, #8]
 80037d8:	005b      	lsls	r3, r3, #1
 80037da:	687a      	ldr	r2, [r7, #4]
 80037dc:	4413      	add	r3, r2
 80037de:	881b      	ldrh	r3, [r3, #0]
 80037e0:	81fb      	strh	r3, [r7, #14]
 80037e2:	e00d      	b.n	8003800 <Warning_Detection+0x54>
		}
		else if(Data[i] < min)
 80037e4:	68bb      	ldr	r3, [r7, #8]
 80037e6:	005b      	lsls	r3, r3, #1
 80037e8:	687a      	ldr	r2, [r7, #4]
 80037ea:	4413      	add	r3, r2
 80037ec:	881b      	ldrh	r3, [r3, #0]
 80037ee:	89ba      	ldrh	r2, [r7, #12]
 80037f0:	429a      	cmp	r2, r3
 80037f2:	d905      	bls.n	8003800 <Warning_Detection+0x54>
		{
			min = Data[i];
 80037f4:	68bb      	ldr	r3, [r7, #8]
 80037f6:	005b      	lsls	r3, r3, #1
 80037f8:	687a      	ldr	r2, [r7, #4]
 80037fa:	4413      	add	r3, r2
 80037fc:	881b      	ldrh	r3, [r3, #0]
 80037fe:	81bb      	strh	r3, [r7, #12]
		}

		if(Data[i] < sys.Low_th || Data[i] > sys.High_th)
 8003800:	68bb      	ldr	r3, [r7, #8]
 8003802:	005b      	lsls	r3, r3, #1
 8003804:	687a      	ldr	r2, [r7, #4]
 8003806:	4413      	add	r3, r2
 8003808:	881a      	ldrh	r2, [r3, #0]
 800380a:	4b18      	ldr	r3, [pc, #96]	@ (800386c <Warning_Detection+0xc0>)
 800380c:	f503 5340 	add.w	r3, r3, #12288	@ 0x3000
 8003810:	f8b3 3088 	ldrh.w	r3, [r3, #136]	@ 0x88
 8003814:	429a      	cmp	r2, r3
 8003816:	d30b      	bcc.n	8003830 <Warning_Detection+0x84>
 8003818:	68bb      	ldr	r3, [r7, #8]
 800381a:	005b      	lsls	r3, r3, #1
 800381c:	687a      	ldr	r2, [r7, #4]
 800381e:	4413      	add	r3, r2
 8003820:	881a      	ldrh	r2, [r3, #0]
 8003822:	4b12      	ldr	r3, [pc, #72]	@ (800386c <Warning_Detection+0xc0>)
 8003824:	f503 5340 	add.w	r3, r3, #12288	@ 0x3000
 8003828:	f8b3 308a 	ldrh.w	r3, [r3, #138]	@ 0x8a
 800382c:	429a      	cmp	r2, r3
 800382e:	d904      	bls.n	800383a <Warning_Detection+0x8e>
		{
			flags.Threshold_Detected= 1;
 8003830:	4a0f      	ldr	r2, [pc, #60]	@ (8003870 <Warning_Detection+0xc4>)
 8003832:	7813      	ldrb	r3, [r2, #0]
 8003834:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003838:	7013      	strb	r3, [r2, #0]
	for(int i = 1; i < PRESS_HALF_SAMPLES; i++)
 800383a:	68bb      	ldr	r3, [r7, #8]
 800383c:	3301      	adds	r3, #1
 800383e:	60bb      	str	r3, [r7, #8]
 8003840:	68bb      	ldr	r3, [r7, #8]
 8003842:	f5b3 7fc8 	cmp.w	r3, #400	@ 0x190
 8003846:	dbbe      	blt.n	80037c6 <Warning_Detection+0x1a>
		}
	}

	if(max - min >= HAMMER_THRESHOLD)
 8003848:	89fa      	ldrh	r2, [r7, #14]
 800384a:	89bb      	ldrh	r3, [r7, #12]
 800384c:	1ad3      	subs	r3, r2, r3
 800384e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003852:	db04      	blt.n	800385e <Warning_Detection+0xb2>
	{
		flags.Hammer_Detected = 1;
 8003854:	4a06      	ldr	r2, [pc, #24]	@ (8003870 <Warning_Detection+0xc4>)
 8003856:	7813      	ldrb	r3, [r2, #0]
 8003858:	f043 0320 	orr.w	r3, r3, #32
 800385c:	7013      	strb	r3, [r2, #0]
	}

}
 800385e:	bf00      	nop
 8003860:	3714      	adds	r7, #20
 8003862:	46bd      	mov	sp, r7
 8003864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003868:	4770      	bx	lr
 800386a:	bf00      	nop
 800386c:	20000570 	.word	0x20000570
 8003870:	20003928 	.word	0x20003928

08003874 <RAM_Save_Measure>:

/*-----SALVATAGGIO MISURA IN RAM-----*/
void RAM_Save_Measure(uint8_t* Buffer)
{
 8003874:	b580      	push	{r7, lr}
 8003876:	b084      	sub	sp, #16
 8003878:	af00      	add	r7, sp, #0
 800387a:	6078      	str	r0, [r7, #4]
	UINT written = 0;
 800387c:	2300      	movs	r3, #0
 800387e:	60fb      	str	r3, [r7, #12]

	if(Saves_cnt == 0)
 8003880:	4b39      	ldr	r3, [pc, #228]	@ (8003968 <RAM_Save_Measure+0xf4>)
 8003882:	881b      	ldrh	r3, [r3, #0]
 8003884:	2b00      	cmp	r3, #0
 8003886:	d11a      	bne.n	80038be <RAM_Save_Measure+0x4a>
	{
		f_close(&sys.file_meas_1);
 8003888:	4838      	ldr	r0, [pc, #224]	@ (800396c <RAM_Save_Measure+0xf8>)
 800388a:	f003 f959 	bl	8006b40 <f_close>
		sys.file_meas_1_open = 0;
 800388e:	4b38      	ldr	r3, [pc, #224]	@ (8003970 <RAM_Save_Measure+0xfc>)
 8003890:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003894:	2200      	movs	r2, #0
 8003896:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
		f_unlink(MEASURE_FILE_NAME_1);
 800389a:	4836      	ldr	r0, [pc, #216]	@ (8003974 <RAM_Save_Measure+0x100>)
 800389c:	f003 f970 	bl	8006b80 <f_unlink>
		res = f_open(&sys.file_meas_1, MEASURE_FILE_NAME_1, FA_READ | FA_WRITE | FA_CREATE_ALWAYS);
 80038a0:	220b      	movs	r2, #11
 80038a2:	4934      	ldr	r1, [pc, #208]	@ (8003974 <RAM_Save_Measure+0x100>)
 80038a4:	4831      	ldr	r0, [pc, #196]	@ (800396c <RAM_Save_Measure+0xf8>)
 80038a6:	f002 fdab 	bl	8006400 <f_open>
 80038aa:	4603      	mov	r3, r0
 80038ac:	461a      	mov	r2, r3
 80038ae:	4b32      	ldr	r3, [pc, #200]	@ (8003978 <RAM_Save_Measure+0x104>)
 80038b0:	701a      	strb	r2, [r3, #0]
		sys.file_meas_1_open = 1;
 80038b2:	4b2f      	ldr	r3, [pc, #188]	@ (8003970 <RAM_Save_Measure+0xfc>)
 80038b4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80038b8:	2201      	movs	r2, #1
 80038ba:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
	}

	if(Saves_cnt == 30)
 80038be:	4b2a      	ldr	r3, [pc, #168]	@ (8003968 <RAM_Save_Measure+0xf4>)
 80038c0:	881b      	ldrh	r3, [r3, #0]
 80038c2:	2b1e      	cmp	r3, #30
 80038c4:	d11a      	bne.n	80038fc <RAM_Save_Measure+0x88>
	{
		f_close(&sys.file_meas_2);
 80038c6:	482d      	ldr	r0, [pc, #180]	@ (800397c <RAM_Save_Measure+0x108>)
 80038c8:	f003 f93a 	bl	8006b40 <f_close>
		sys.file_meas_2_open = 0;
 80038cc:	4b28      	ldr	r3, [pc, #160]	@ (8003970 <RAM_Save_Measure+0xfc>)
 80038ce:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 80038d2:	2200      	movs	r2, #0
 80038d4:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
		f_unlink(MEASURE_FILE_NAME_2);
 80038d8:	4829      	ldr	r0, [pc, #164]	@ (8003980 <RAM_Save_Measure+0x10c>)
 80038da:	f003 f951 	bl	8006b80 <f_unlink>
		res = f_open(&sys.file_meas_2, MEASURE_FILE_NAME_2, FA_READ | FA_WRITE | FA_CREATE_ALWAYS);
 80038de:	220b      	movs	r2, #11
 80038e0:	4927      	ldr	r1, [pc, #156]	@ (8003980 <RAM_Save_Measure+0x10c>)
 80038e2:	4826      	ldr	r0, [pc, #152]	@ (800397c <RAM_Save_Measure+0x108>)
 80038e4:	f002 fd8c 	bl	8006400 <f_open>
 80038e8:	4603      	mov	r3, r0
 80038ea:	461a      	mov	r2, r3
 80038ec:	4b22      	ldr	r3, [pc, #136]	@ (8003978 <RAM_Save_Measure+0x104>)
 80038ee:	701a      	strb	r2, [r3, #0]
		sys.file_meas_2_open = 1;
 80038f0:	4b1f      	ldr	r3, [pc, #124]	@ (8003970 <RAM_Save_Measure+0xfc>)
 80038f2:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 80038f6:	2201      	movs	r2, #1
 80038f8:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
	}

	if(Saves_cnt < 30)
 80038fc:	4b1a      	ldr	r3, [pc, #104]	@ (8003968 <RAM_Save_Measure+0xf4>)
 80038fe:	881b      	ldrh	r3, [r3, #0]
 8003900:	2b1d      	cmp	r3, #29
 8003902:	d812      	bhi.n	800392a <RAM_Save_Measure+0xb6>
	{
		res = f_write(&sys.file_meas_1, (uint8_t *)&Buffer, LOGGING_BUFFER_LEN, &written);
 8003904:	f107 030c 	add.w	r3, r7, #12
 8003908:	1d39      	adds	r1, r7, #4
 800390a:	f640 02ce 	movw	r2, #2254	@ 0x8ce
 800390e:	4817      	ldr	r0, [pc, #92]	@ (800396c <RAM_Save_Measure+0xf8>)
 8003910:	f002 ff0e 	bl	8006730 <f_write>
 8003914:	4603      	mov	r3, r0
 8003916:	461a      	mov	r2, r3
 8003918:	4b17      	ldr	r3, [pc, #92]	@ (8003978 <RAM_Save_Measure+0x104>)
 800391a:	701a      	strb	r2, [r3, #0]
		Saves_cnt++;
 800391c:	4b12      	ldr	r3, [pc, #72]	@ (8003968 <RAM_Save_Measure+0xf4>)
 800391e:	881b      	ldrh	r3, [r3, #0]
 8003920:	3301      	adds	r3, #1
 8003922:	b29a      	uxth	r2, r3
 8003924:	4b10      	ldr	r3, [pc, #64]	@ (8003968 <RAM_Save_Measure+0xf4>)
 8003926:	801a      	strh	r2, [r3, #0]
	}
	else
	{
		Saves_cnt = 0;
	}
}
 8003928:	e019      	b.n	800395e <RAM_Save_Measure+0xea>
	else if(Saves_cnt < 60)
 800392a:	4b0f      	ldr	r3, [pc, #60]	@ (8003968 <RAM_Save_Measure+0xf4>)
 800392c:	881b      	ldrh	r3, [r3, #0]
 800392e:	2b3b      	cmp	r3, #59	@ 0x3b
 8003930:	d812      	bhi.n	8003958 <RAM_Save_Measure+0xe4>
		res = f_write(&sys.file_meas_2, (uint8_t *)&Buffer, LOGGING_BUFFER_LEN, &written);
 8003932:	f107 030c 	add.w	r3, r7, #12
 8003936:	1d39      	adds	r1, r7, #4
 8003938:	f640 02ce 	movw	r2, #2254	@ 0x8ce
 800393c:	480f      	ldr	r0, [pc, #60]	@ (800397c <RAM_Save_Measure+0x108>)
 800393e:	f002 fef7 	bl	8006730 <f_write>
 8003942:	4603      	mov	r3, r0
 8003944:	461a      	mov	r2, r3
 8003946:	4b0c      	ldr	r3, [pc, #48]	@ (8003978 <RAM_Save_Measure+0x104>)
 8003948:	701a      	strb	r2, [r3, #0]
		Saves_cnt++;
 800394a:	4b07      	ldr	r3, [pc, #28]	@ (8003968 <RAM_Save_Measure+0xf4>)
 800394c:	881b      	ldrh	r3, [r3, #0]
 800394e:	3301      	adds	r3, #1
 8003950:	b29a      	uxth	r2, r3
 8003952:	4b05      	ldr	r3, [pc, #20]	@ (8003968 <RAM_Save_Measure+0xf4>)
 8003954:	801a      	strh	r2, [r3, #0]
}
 8003956:	e002      	b.n	800395e <RAM_Save_Measure+0xea>
		Saves_cnt = 0;
 8003958:	4b03      	ldr	r3, [pc, #12]	@ (8003968 <RAM_Save_Measure+0xf4>)
 800395a:	2200      	movs	r2, #0
 800395c:	801a      	strh	r2, [r3, #0]
}
 800395e:	bf00      	nop
 8003960:	3710      	adds	r7, #16
 8003962:	46bd      	mov	sp, r7
 8003964:	bd80      	pop	{r7, pc}
 8003966:	bf00      	nop
 8003968:	20006f2a 	.word	0x20006f2a
 800396c:	200015a4 	.word	0x200015a4
 8003970:	20000570 	.word	0x20000570
 8003974:	080121e4 	.word	0x080121e4
 8003978:	20006f2c 	.word	0x20006f2c
 800397c:	200025d0 	.word	0x200025d0
 8003980:	080121f4 	.word	0x080121f4

08003984 <Send_Measure>:

/*-----INVIO MISURA COMPLETA-----*/
void Send_Measure(void)
{
 8003984:	b480      	push	{r7}
 8003986:	af00      	add	r7, sp, #0

}
 8003988:	bf00      	nop
 800398a:	46bd      	mov	sp, r7
 800398c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003990:	4770      	bx	lr
	...

08003994 <psram_reset>:
uint32_t	psramSize = 0;
uint32_t	psramNumPages = 0;


int psram_reset()
{
 8003994:	b580      	push	{r7, lr}
 8003996:	b08e      	sub	sp, #56	@ 0x38
 8003998:	af00      	add	r7, sp, #0

	QSPI_CommandTypeDef sCommand = {0};
 800399a:	463b      	mov	r3, r7
 800399c:	2238      	movs	r2, #56	@ 0x38
 800399e:	2100      	movs	r1, #0
 80039a0:	4618      	mov	r0, r3
 80039a2:	f00d f99f 	bl	8010ce4 <memset>

	sCommand.Instruction = 0x66;
 80039a6:	2366      	movs	r3, #102	@ 0x66
 80039a8:	603b      	str	r3, [r7, #0]
	sCommand.InstructionMode = QSPI_INSTRUCTION_1_LINE;
 80039aa:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80039ae:	61bb      	str	r3, [r7, #24]
	sCommand.AddressSize = QSPI_ADDRESS_NONE;
 80039b0:	2300      	movs	r3, #0
 80039b2:	60fb      	str	r3, [r7, #12]
	sCommand.NbData = 0;
 80039b4:	2300      	movs	r3, #0
 80039b6:	62bb      	str	r3, [r7, #40]	@ 0x28

	if(HAL_QSPI_Command(PSRAM_SPI, &sCommand, HAL_QSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80039b8:	463b      	mov	r3, r7
 80039ba:	f241 3288 	movw	r2, #5000	@ 0x1388
 80039be:	4619      	mov	r1, r3
 80039c0:	480e      	ldr	r0, [pc, #56]	@ (80039fc <psram_reset+0x68>)
 80039c2:	f007 f809 	bl	800a9d8 <HAL_QSPI_Command>
 80039c6:	4603      	mov	r3, r0
 80039c8:	2b00      	cmp	r3, #0
 80039ca:	d002      	beq.n	80039d2 <psram_reset+0x3e>
	{
		return -1;
 80039cc:	f04f 33ff 	mov.w	r3, #4294967295
 80039d0:	e00f      	b.n	80039f2 <psram_reset+0x5e>
	}

	sCommand.Instruction = 0x99;
 80039d2:	2399      	movs	r3, #153	@ 0x99
 80039d4:	603b      	str	r3, [r7, #0]

	if(HAL_QSPI_Command(PSRAM_SPI, &sCommand, HAL_QSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80039d6:	463b      	mov	r3, r7
 80039d8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80039dc:	4619      	mov	r1, r3
 80039de:	4807      	ldr	r0, [pc, #28]	@ (80039fc <psram_reset+0x68>)
 80039e0:	f006 fffa 	bl	800a9d8 <HAL_QSPI_Command>
 80039e4:	4603      	mov	r3, r0
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	d002      	beq.n	80039f0 <psram_reset+0x5c>
	{
		return -1;
 80039ea:	f04f 33ff 	mov.w	r3, #4294967295
 80039ee:	e000      	b.n	80039f2 <psram_reset+0x5e>
	}

	return 0;
 80039f0:	2300      	movs	r3, #0

}
 80039f2:	4618      	mov	r0, r3
 80039f4:	3738      	adds	r7, #56	@ 0x38
 80039f6:	46bd      	mov	sp, r7
 80039f8:	bd80      	pop	{r7, pc}
 80039fa:	bf00      	nop
 80039fc:	200001b4 	.word	0x200001b4

08003a00 <psram_qpi_mode>:
{
	return psramQSPI;
}

int psram_qpi_mode(uint8_t enable)
{
 8003a00:	b580      	push	{r7, lr}
 8003a02:	b090      	sub	sp, #64	@ 0x40
 8003a04:	af00      	add	r7, sp, #0
 8003a06:	4603      	mov	r3, r0
 8003a08:	71fb      	strb	r3, [r7, #7]

	QSPI_CommandTypeDef sCommand = {0};
 8003a0a:	f107 0308 	add.w	r3, r7, #8
 8003a0e:	2238      	movs	r2, #56	@ 0x38
 8003a10:	2100      	movs	r1, #0
 8003a12:	4618      	mov	r0, r3
 8003a14:	f00d f966 	bl	8010ce4 <memset>

	if(!psramInitDone)return -1;
 8003a18:	4b1c      	ldr	r3, [pc, #112]	@ (8003a8c <psram_qpi_mode+0x8c>)
 8003a1a:	781b      	ldrb	r3, [r3, #0]
 8003a1c:	2b00      	cmp	r3, #0
 8003a1e:	d102      	bne.n	8003a26 <psram_qpi_mode+0x26>
 8003a20:	f04f 33ff 	mov.w	r3, #4294967295
 8003a24:	e02d      	b.n	8003a82 <psram_qpi_mode+0x82>

	if(psramQSPI==1 && enable == 0)
 8003a26:	4b1a      	ldr	r3, [pc, #104]	@ (8003a90 <psram_qpi_mode+0x90>)
 8003a28:	781b      	ldrb	r3, [r3, #0]
 8003a2a:	2b01      	cmp	r3, #1
 8003a2c:	d108      	bne.n	8003a40 <psram_qpi_mode+0x40>
 8003a2e:	79fb      	ldrb	r3, [r7, #7]
 8003a30:	2b00      	cmp	r3, #0
 8003a32:	d105      	bne.n	8003a40 <psram_qpi_mode+0x40>
	{
		sCommand.Instruction = PSRAM_CMD_QPI_DISABLE;
 8003a34:	23f5      	movs	r3, #245	@ 0xf5
 8003a36:	60bb      	str	r3, [r7, #8]
		sCommand.InstructionMode = QSPI_INSTRUCTION_4_LINES;
 8003a38:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8003a3c:	623b      	str	r3, [r7, #32]
 8003a3e:	e00e      	b.n	8003a5e <psram_qpi_mode+0x5e>

	}else if(psramQSPI==0 && enable == 1)
 8003a40:	4b13      	ldr	r3, [pc, #76]	@ (8003a90 <psram_qpi_mode+0x90>)
 8003a42:	781b      	ldrb	r3, [r3, #0]
 8003a44:	2b00      	cmp	r3, #0
 8003a46:	d108      	bne.n	8003a5a <psram_qpi_mode+0x5a>
 8003a48:	79fb      	ldrb	r3, [r7, #7]
 8003a4a:	2b01      	cmp	r3, #1
 8003a4c:	d105      	bne.n	8003a5a <psram_qpi_mode+0x5a>
	{
		sCommand.Instruction = PSRAM_CMD_QPI_ENABLE;
 8003a4e:	2335      	movs	r3, #53	@ 0x35
 8003a50:	60bb      	str	r3, [r7, #8]
		sCommand.InstructionMode = QSPI_INSTRUCTION_1_LINE;
 8003a52:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8003a56:	623b      	str	r3, [r7, #32]
 8003a58:	e001      	b.n	8003a5e <psram_qpi_mode+0x5e>

	}else{

		return 0;
 8003a5a:	2300      	movs	r3, #0
 8003a5c:	e011      	b.n	8003a82 <psram_qpi_mode+0x82>

	}

	if(HAL_QSPI_Command(PSRAM_SPI, &sCommand, HAL_QSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8003a5e:	f107 0308 	add.w	r3, r7, #8
 8003a62:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003a66:	4619      	mov	r1, r3
 8003a68:	480a      	ldr	r0, [pc, #40]	@ (8003a94 <psram_qpi_mode+0x94>)
 8003a6a:	f006 ffb5 	bl	800a9d8 <HAL_QSPI_Command>
 8003a6e:	4603      	mov	r3, r0
 8003a70:	2b00      	cmp	r3, #0
 8003a72:	d002      	beq.n	8003a7a <psram_qpi_mode+0x7a>
	{
		return -1;
 8003a74:	f04f 33ff 	mov.w	r3, #4294967295
 8003a78:	e003      	b.n	8003a82 <psram_qpi_mode+0x82>
	}

	psramQSPI = enable;
 8003a7a:	4a05      	ldr	r2, [pc, #20]	@ (8003a90 <psram_qpi_mode+0x90>)
 8003a7c:	79fb      	ldrb	r3, [r7, #7]
 8003a7e:	7013      	strb	r3, [r2, #0]

	return 0;
 8003a80:	2300      	movs	r3, #0
}
 8003a82:	4618      	mov	r0, r3
 8003a84:	3740      	adds	r7, #64	@ 0x40
 8003a86:	46bd      	mov	sp, r7
 8003a88:	bd80      	pop	{r7, pc}
 8003a8a:	bf00      	nop
 8003a8c:	200073a0 	.word	0x200073a0
 8003a90:	200073a1 	.word	0x200073a1
 8003a94:	200001b4 	.word	0x200001b4

08003a98 <psram_read_id>:

int psram_read_id(uint8_t *id_data, int id_data_size)
{
 8003a98:	b580      	push	{r7, lr}
 8003a9a:	b090      	sub	sp, #64	@ 0x40
 8003a9c:	af00      	add	r7, sp, #0
 8003a9e:	6078      	str	r0, [r7, #4]
 8003aa0:	6039      	str	r1, [r7, #0]
	QSPI_CommandTypeDef sCommand = {0};
 8003aa2:	f107 0308 	add.w	r3, r7, #8
 8003aa6:	2238      	movs	r2, #56	@ 0x38
 8003aa8:	2100      	movs	r1, #0
 8003aaa:	4618      	mov	r0, r3
 8003aac:	f00d f91a 	bl	8010ce4 <memset>

	if(id_data == NULL || id_data_size < 8)return -2;
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	d002      	beq.n	8003abc <psram_read_id+0x24>
 8003ab6:	683b      	ldr	r3, [r7, #0]
 8003ab8:	2b07      	cmp	r3, #7
 8003aba:	dc02      	bgt.n	8003ac2 <psram_read_id+0x2a>
 8003abc:	f06f 0301 	mvn.w	r3, #1
 8003ac0:	e034      	b.n	8003b2c <psram_read_id+0x94>

	sCommand.Instruction = 0x9F;
 8003ac2:	239f      	movs	r3, #159	@ 0x9f
 8003ac4:	60bb      	str	r3, [r7, #8]
	sCommand.InstructionMode = QSPI_INSTRUCTION_1_LINE;
 8003ac6:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8003aca:	623b      	str	r3, [r7, #32]
	sCommand.Address = 0;
 8003acc:	2300      	movs	r3, #0
 8003ace:	60fb      	str	r3, [r7, #12]
	sCommand.AddressSize = QSPI_ADDRESS_24_BITS;
 8003ad0:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8003ad4:	617b      	str	r3, [r7, #20]
	sCommand.AddressMode = QSPI_ADDRESS_1_LINE;
 8003ad6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8003ada:	627b      	str	r3, [r7, #36]	@ 0x24
	sCommand.DataMode    = QSPI_DATA_1_LINE;
 8003adc:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8003ae0:	62fb      	str	r3, [r7, #44]	@ 0x2c
	sCommand.NbData = 8;
 8003ae2:	2308      	movs	r3, #8
 8003ae4:	633b      	str	r3, [r7, #48]	@ 0x30
	sCommand.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8003ae6:	2300      	movs	r3, #0
 8003ae8:	62bb      	str	r3, [r7, #40]	@ 0x28
	sCommand.DdrMode           = QSPI_DDR_MODE_DISABLE;
 8003aea:	2300      	movs	r3, #0
 8003aec:	637b      	str	r3, [r7, #52]	@ 0x34
	sCommand.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 8003aee:	2300      	movs	r3, #0
 8003af0:	63bb      	str	r3, [r7, #56]	@ 0x38
	sCommand.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 8003af2:	2300      	movs	r3, #0
 8003af4:	63fb      	str	r3, [r7, #60]	@ 0x3c

	if(HAL_QSPI_Command(PSRAM_SPI, &sCommand, HAL_QSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8003af6:	f107 0308 	add.w	r3, r7, #8
 8003afa:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003afe:	4619      	mov	r1, r3
 8003b00:	480c      	ldr	r0, [pc, #48]	@ (8003b34 <psram_read_id+0x9c>)
 8003b02:	f006 ff69 	bl	800a9d8 <HAL_QSPI_Command>
 8003b06:	4603      	mov	r3, r0
 8003b08:	2b00      	cmp	r3, #0
 8003b0a:	d002      	beq.n	8003b12 <psram_read_id+0x7a>
	{
		return -1;
 8003b0c:	f04f 33ff 	mov.w	r3, #4294967295
 8003b10:	e00c      	b.n	8003b2c <psram_read_id+0x94>
	}

	if (HAL_QSPI_Receive(PSRAM_SPI, id_data, HAL_QSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8003b12:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003b16:	6879      	ldr	r1, [r7, #4]
 8003b18:	4806      	ldr	r0, [pc, #24]	@ (8003b34 <psram_read_id+0x9c>)
 8003b1a:	f007 f852 	bl	800abc2 <HAL_QSPI_Receive>
 8003b1e:	4603      	mov	r3, r0
 8003b20:	2b00      	cmp	r3, #0
 8003b22:	d002      	beq.n	8003b2a <psram_read_id+0x92>
	{
		return -1;
 8003b24:	f04f 33ff 	mov.w	r3, #4294967295
 8003b28:	e000      	b.n	8003b2c <psram_read_id+0x94>
	}


	return 0;
 8003b2a:	2300      	movs	r3, #0

}
 8003b2c:	4618      	mov	r0, r3
 8003b2e:	3740      	adds	r7, #64	@ 0x40
 8003b30:	46bd      	mov	sp, r7
 8003b32:	bd80      	pop	{r7, pc}
 8003b34:	200001b4 	.word	0x200001b4

08003b38 <psram_internal_read_write>:

int psram_internal_read_write(uint8_t write, uint32_t address, uint16_t nbytes, uint8_t *pBuffer)
{
 8003b38:	b580      	push	{r7, lr}
 8003b3a:	b092      	sub	sp, #72	@ 0x48
 8003b3c:	af00      	add	r7, sp, #0
 8003b3e:	60b9      	str	r1, [r7, #8]
 8003b40:	607b      	str	r3, [r7, #4]
 8003b42:	4603      	mov	r3, r0
 8003b44:	73fb      	strb	r3, [r7, #15]
 8003b46:	4613      	mov	r3, r2
 8003b48:	81bb      	strh	r3, [r7, #12]

	QSPI_CommandTypeDef sCommand = {0};
 8003b4a:	f107 0310 	add.w	r3, r7, #16
 8003b4e:	2238      	movs	r2, #56	@ 0x38
 8003b50:	2100      	movs	r1, #0
 8003b52:	4618      	mov	r0, r3
 8003b54:	f00d f8c6 	bl	8010ce4 <memset>

	sCommand.Address = address;
 8003b58:	68bb      	ldr	r3, [r7, #8]
 8003b5a:	617b      	str	r3, [r7, #20]
	sCommand.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8003b5c:	2300      	movs	r3, #0
 8003b5e:	633b      	str	r3, [r7, #48]	@ 0x30
	sCommand.DdrMode           = QSPI_DDR_MODE_DISABLE;
 8003b60:	2300      	movs	r3, #0
 8003b62:	63fb      	str	r3, [r7, #60]	@ 0x3c
	sCommand.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 8003b64:	2300      	movs	r3, #0
 8003b66:	643b      	str	r3, [r7, #64]	@ 0x40
	sCommand.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 8003b68:	2300      	movs	r3, #0
 8003b6a:	647b      	str	r3, [r7, #68]	@ 0x44
	sCommand.NbData = nbytes;
 8003b6c:	89bb      	ldrh	r3, [r7, #12]
 8003b6e:	63bb      	str	r3, [r7, #56]	@ 0x38

	if(psramQSPI)
 8003b70:	4b33      	ldr	r3, [pc, #204]	@ (8003c40 <psram_internal_read_write+0x108>)
 8003b72:	781b      	ldrb	r3, [r3, #0]
 8003b74:	2b00      	cmp	r3, #0
 8003b76:	d01a      	beq.n	8003bae <psram_internal_read_write+0x76>
	{
		//QSPI mode
		sCommand.Instruction = write ? PSRAM_CMD_WRITE_QUAD : PSRAM_CMD_READ_FAST_QIO;
 8003b78:	7bfb      	ldrb	r3, [r7, #15]
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	d001      	beq.n	8003b82 <psram_internal_read_write+0x4a>
 8003b7e:	2338      	movs	r3, #56	@ 0x38
 8003b80:	e000      	b.n	8003b84 <psram_internal_read_write+0x4c>
 8003b82:	23eb      	movs	r3, #235	@ 0xeb
 8003b84:	613b      	str	r3, [r7, #16]
		sCommand.InstructionMode = QSPI_INSTRUCTION_4_LINES;
 8003b86:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8003b8a:	62bb      	str	r3, [r7, #40]	@ 0x28
		sCommand.AddressSize = QSPI_ADDRESS_24_BITS;
 8003b8c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8003b90:	61fb      	str	r3, [r7, #28]
		sCommand.AddressMode = QSPI_ADDRESS_4_LINES;
 8003b92:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8003b96:	62fb      	str	r3, [r7, #44]	@ 0x2c
		sCommand.DataMode    = QSPI_DATA_4_LINES;
 8003b98:	f04f 7340 	mov.w	r3, #50331648	@ 0x3000000
 8003b9c:	637b      	str	r3, [r7, #52]	@ 0x34
		sCommand.DummyCycles = write ? 0 : PSRAM_CMD_QPI_READ_FAST_QIO_WAIT;
 8003b9e:	7bfb      	ldrb	r3, [r7, #15]
 8003ba0:	2b00      	cmp	r3, #0
 8003ba2:	d001      	beq.n	8003ba8 <psram_internal_read_write+0x70>
 8003ba4:	2300      	movs	r3, #0
 8003ba6:	e000      	b.n	8003baa <psram_internal_read_write+0x72>
 8003ba8:	2306      	movs	r3, #6
 8003baa:	627b      	str	r3, [r7, #36]	@ 0x24
 8003bac:	e019      	b.n	8003be2 <psram_internal_read_write+0xaa>
	}else{
		//SPI mode
		sCommand.Instruction = write ? PSRAM_CMD_WRITE : PSRAM_CMD_READ_FAST;
 8003bae:	7bfb      	ldrb	r3, [r7, #15]
 8003bb0:	2b00      	cmp	r3, #0
 8003bb2:	d001      	beq.n	8003bb8 <psram_internal_read_write+0x80>
 8003bb4:	2302      	movs	r3, #2
 8003bb6:	e000      	b.n	8003bba <psram_internal_read_write+0x82>
 8003bb8:	230b      	movs	r3, #11
 8003bba:	613b      	str	r3, [r7, #16]
		sCommand.InstructionMode = QSPI_INSTRUCTION_1_LINE;
 8003bbc:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8003bc0:	62bb      	str	r3, [r7, #40]	@ 0x28
		sCommand.AddressSize = QSPI_ADDRESS_24_BITS;
 8003bc2:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8003bc6:	61fb      	str	r3, [r7, #28]
		sCommand.AddressMode = QSPI_ADDRESS_1_LINE;
 8003bc8:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8003bcc:	62fb      	str	r3, [r7, #44]	@ 0x2c
		sCommand.DataMode    = QSPI_DATA_1_LINE;
 8003bce:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8003bd2:	637b      	str	r3, [r7, #52]	@ 0x34
		sCommand.DummyCycles = write ? 0 : PSRAM_CMD_READ_FAST_WAIT;
 8003bd4:	7bfb      	ldrb	r3, [r7, #15]
 8003bd6:	2b00      	cmp	r3, #0
 8003bd8:	d001      	beq.n	8003bde <psram_internal_read_write+0xa6>
 8003bda:	2300      	movs	r3, #0
 8003bdc:	e000      	b.n	8003be0 <psram_internal_read_write+0xa8>
 8003bde:	2308      	movs	r3, #8
 8003be0:	627b      	str	r3, [r7, #36]	@ 0x24
	}

	if(HAL_QSPI_Command(PSRAM_SPI, &sCommand, HAL_QSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8003be2:	f107 0310 	add.w	r3, r7, #16
 8003be6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003bea:	4619      	mov	r1, r3
 8003bec:	4815      	ldr	r0, [pc, #84]	@ (8003c44 <psram_internal_read_write+0x10c>)
 8003bee:	f006 fef3 	bl	800a9d8 <HAL_QSPI_Command>
 8003bf2:	4603      	mov	r3, r0
 8003bf4:	2b00      	cmp	r3, #0
 8003bf6:	d002      	beq.n	8003bfe <psram_internal_read_write+0xc6>
	{
		return -1;
 8003bf8:	f04f 33ff 	mov.w	r3, #4294967295
 8003bfc:	e01b      	b.n	8003c36 <psram_internal_read_write+0xfe>
	}

	if(write)
 8003bfe:	7bfb      	ldrb	r3, [r7, #15]
 8003c00:	2b00      	cmp	r3, #0
 8003c02:	d00b      	beq.n	8003c1c <psram_internal_read_write+0xe4>
	{
		if (HAL_QSPI_Transmit(PSRAM_SPI, pBuffer, HAL_QSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8003c04:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003c08:	6879      	ldr	r1, [r7, #4]
 8003c0a:	480e      	ldr	r0, [pc, #56]	@ (8003c44 <psram_internal_read_write+0x10c>)
 8003c0c:	f006 ff42 	bl	800aa94 <HAL_QSPI_Transmit>
 8003c10:	4603      	mov	r3, r0
 8003c12:	2b00      	cmp	r3, #0
 8003c14:	d00e      	beq.n	8003c34 <psram_internal_read_write+0xfc>
		{
			return -1;
 8003c16:	f04f 33ff 	mov.w	r3, #4294967295
 8003c1a:	e00c      	b.n	8003c36 <psram_internal_read_write+0xfe>
		}

	}else{

		if (HAL_QSPI_Receive(PSRAM_SPI, pBuffer, HAL_QSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8003c1c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003c20:	6879      	ldr	r1, [r7, #4]
 8003c22:	4808      	ldr	r0, [pc, #32]	@ (8003c44 <psram_internal_read_write+0x10c>)
 8003c24:	f006 ffcd 	bl	800abc2 <HAL_QSPI_Receive>
 8003c28:	4603      	mov	r3, r0
 8003c2a:	2b00      	cmp	r3, #0
 8003c2c:	d002      	beq.n	8003c34 <psram_internal_read_write+0xfc>
		{
			return -1;
 8003c2e:	f04f 33ff 	mov.w	r3, #4294967295
 8003c32:	e000      	b.n	8003c36 <psram_internal_read_write+0xfe>
		}

	}

	return 0;
 8003c34:	2300      	movs	r3, #0
}
 8003c36:	4618      	mov	r0, r3
 8003c38:	3748      	adds	r7, #72	@ 0x48
 8003c3a:	46bd      	mov	sp, r7
 8003c3c:	bd80      	pop	{r7, pc}
 8003c3e:	bf00      	nop
 8003c40:	200073a1 	.word	0x200073a1
 8003c44:	200001b4 	.word	0x200001b4

08003c48 <psram_sector_read_write>:


//Funzione usata da FatFs
int psram_sector_read_write(uint8_t write, uint32_t sector, uint32_t nsectors, uint8_t *pBuffer)
{
 8003c48:	b580      	push	{r7, lr}
 8003c4a:	b088      	sub	sp, #32
 8003c4c:	af00      	add	r7, sp, #0
 8003c4e:	60b9      	str	r1, [r7, #8]
 8003c50:	607a      	str	r2, [r7, #4]
 8003c52:	603b      	str	r3, [r7, #0]
 8003c54:	4603      	mov	r3, r0
 8003c56:	73fb      	strb	r3, [r7, #15]
	int result = 0;
 8003c58:	2300      	movs	r3, #0
 8003c5a:	617b      	str	r3, [r7, #20]
	uint8_t *wPtr = pBuffer;
 8003c5c:	683b      	ldr	r3, [r7, #0]
 8003c5e:	61fb      	str	r3, [r7, #28]
	uint32_t address = sector * PSRAM_PAGE_SIZE;
 8003c60:	68bb      	ldr	r3, [r7, #8]
 8003c62:	029b      	lsls	r3, r3, #10
 8003c64:	61bb      	str	r3, [r7, #24]

	while(nsectors > 0)
 8003c66:	e018      	b.n	8003c9a <psram_sector_read_write+0x52>
	{
		result = psram_internal_read_write(write, address, PSRAM_PAGE_SIZE, wPtr);
 8003c68:	7bf8      	ldrb	r0, [r7, #15]
 8003c6a:	69fb      	ldr	r3, [r7, #28]
 8003c6c:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8003c70:	69b9      	ldr	r1, [r7, #24]
 8003c72:	f7ff ff61 	bl	8003b38 <psram_internal_read_write>
 8003c76:	6178      	str	r0, [r7, #20]
		if(result < 0)return -1;
 8003c78:	697b      	ldr	r3, [r7, #20]
 8003c7a:	2b00      	cmp	r3, #0
 8003c7c:	da02      	bge.n	8003c84 <psram_sector_read_write+0x3c>
 8003c7e:	f04f 33ff 	mov.w	r3, #4294967295
 8003c82:	e00e      	b.n	8003ca2 <psram_sector_read_write+0x5a>
		address += PSRAM_PAGE_SIZE;
 8003c84:	69bb      	ldr	r3, [r7, #24]
 8003c86:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8003c8a:	61bb      	str	r3, [r7, #24]
		wPtr += PSRAM_PAGE_SIZE;
 8003c8c:	69fb      	ldr	r3, [r7, #28]
 8003c8e:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8003c92:	61fb      	str	r3, [r7, #28]
		nsectors--;
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	3b01      	subs	r3, #1
 8003c98:	607b      	str	r3, [r7, #4]
	while(nsectors > 0)
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	2b00      	cmp	r3, #0
 8003c9e:	d1e3      	bne.n	8003c68 <psram_sector_read_write+0x20>
	}

	return 0;
 8003ca0:	2300      	movs	r3, #0
}
 8003ca2:	4618      	mov	r0, r3
 8003ca4:	3720      	adds	r7, #32
 8003ca6:	46bd      	mov	sp, r7
 8003ca8:	bd80      	pop	{r7, pc}
	...

08003cac <psram_is_initialized>:
{
	return psram_read_write(1, address, nbytes, pBuffer);
}

int psram_is_initialized()
{
 8003cac:	b480      	push	{r7}
 8003cae:	af00      	add	r7, sp, #0
	return psramInitDone;
 8003cb0:	4b03      	ldr	r3, [pc, #12]	@ (8003cc0 <psram_is_initialized+0x14>)
 8003cb2:	781b      	ldrb	r3, [r3, #0]
}
 8003cb4:	4618      	mov	r0, r3
 8003cb6:	46bd      	mov	sp, r7
 8003cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cbc:	4770      	bx	lr
 8003cbe:	bf00      	nop
 8003cc0:	200073a0 	.word	0x200073a0

08003cc4 <psram_get_sector_size>:

unsigned int psram_get_sector_size()
{
 8003cc4:	b480      	push	{r7}
 8003cc6:	af00      	add	r7, sp, #0
	return PSRAM_PAGE_SIZE;
 8003cc8:	f44f 6380 	mov.w	r3, #1024	@ 0x400
}
 8003ccc:	4618      	mov	r0, r3
 8003cce:	46bd      	mov	sp, r7
 8003cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cd4:	4770      	bx	lr
	...

08003cd8 <psram_get_sector_count>:

unsigned int psram_get_sector_count()
{
 8003cd8:	b480      	push	{r7}
 8003cda:	af00      	add	r7, sp, #0
	return psramNumPages;
 8003cdc:	4b03      	ldr	r3, [pc, #12]	@ (8003cec <psram_get_sector_count+0x14>)
 8003cde:	681b      	ldr	r3, [r3, #0]
}
 8003ce0:	4618      	mov	r0, r3
 8003ce2:	46bd      	mov	sp, r7
 8003ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ce8:	4770      	bx	lr
 8003cea:	bf00      	nop
 8003cec:	200073b0 	.word	0x200073b0

08003cf0 <psram_init>:
{
	return psramSize;
}

int psram_init()
{
 8003cf0:	b580      	push	{r7, lr}
 8003cf2:	b082      	sub	sp, #8
 8003cf4:	af00      	add	r7, sp, #0

	uint8_t density = 0xFF;
 8003cf6:	23ff      	movs	r3, #255	@ 0xff
 8003cf8:	71fb      	strb	r3, [r7, #7]

	psramInitDone = 0;
 8003cfa:	4b28      	ldr	r3, [pc, #160]	@ (8003d9c <psram_init+0xac>)
 8003cfc:	2200      	movs	r2, #0
 8003cfe:	701a      	strb	r2, [r3, #0]

	if(psram_reset() < 0)return -1;
 8003d00:	f7ff fe48 	bl	8003994 <psram_reset>
 8003d04:	4603      	mov	r3, r0
 8003d06:	2b00      	cmp	r3, #0
 8003d08:	da02      	bge.n	8003d10 <psram_init+0x20>
 8003d0a:	f04f 33ff 	mov.w	r3, #4294967295
 8003d0e:	e040      	b.n	8003d92 <psram_init+0xa2>

	memset(psramId, 0xFF, sizeof(psramId));
 8003d10:	2208      	movs	r2, #8
 8003d12:	21ff      	movs	r1, #255	@ 0xff
 8003d14:	4822      	ldr	r0, [pc, #136]	@ (8003da0 <psram_init+0xb0>)
 8003d16:	f00c ffe5 	bl	8010ce4 <memset>

	if(psram_read_id(psramId, sizeof(psramId)) < 0)return -1;
 8003d1a:	2108      	movs	r1, #8
 8003d1c:	4820      	ldr	r0, [pc, #128]	@ (8003da0 <psram_init+0xb0>)
 8003d1e:	f7ff febb 	bl	8003a98 <psram_read_id>
 8003d22:	4603      	mov	r3, r0
 8003d24:	2b00      	cmp	r3, #0
 8003d26:	da02      	bge.n	8003d2e <psram_init+0x3e>
 8003d28:	f04f 33ff 	mov.w	r3, #4294967295
 8003d2c:	e031      	b.n	8003d92 <psram_init+0xa2>

	density = psramId[2] >> 5;
 8003d2e:	4b1c      	ldr	r3, [pc, #112]	@ (8003da0 <psram_init+0xb0>)
 8003d30:	789b      	ldrb	r3, [r3, #2]
 8003d32:	095b      	lsrs	r3, r3, #5
 8003d34:	71fb      	strb	r3, [r7, #7]

	if(psramId[0] == PSRAM_MANUFACTURER && psramId[1] == PSRAM_KGD && density <= PSRAM_DENSITY_32MB)
 8003d36:	4b1a      	ldr	r3, [pc, #104]	@ (8003da0 <psram_init+0xb0>)
 8003d38:	781b      	ldrb	r3, [r3, #0]
 8003d3a:	2b9d      	cmp	r3, #157	@ 0x9d
 8003d3c:	d127      	bne.n	8003d8e <psram_init+0x9e>
 8003d3e:	4b18      	ldr	r3, [pc, #96]	@ (8003da0 <psram_init+0xb0>)
 8003d40:	785b      	ldrb	r3, [r3, #1]
 8003d42:	2b5d      	cmp	r3, #93	@ 0x5d
 8003d44:	d123      	bne.n	8003d8e <psram_init+0x9e>
 8003d46:	79fb      	ldrb	r3, [r7, #7]
 8003d48:	2b02      	cmp	r3, #2
 8003d4a:	d820      	bhi.n	8003d8e <psram_init+0x9e>
	{
		if(density == PSRAM_DENSITY_32MB)
 8003d4c:	79fb      	ldrb	r3, [r7, #7]
 8003d4e:	2b02      	cmp	r3, #2
 8003d50:	d104      	bne.n	8003d5c <psram_init+0x6c>
		{
			psramSize = PSRAM_DENSITY_32MB_EADDR;
 8003d52:	4b14      	ldr	r3, [pc, #80]	@ (8003da4 <psram_init+0xb4>)
 8003d54:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8003d58:	601a      	str	r2, [r3, #0]
 8003d5a:	e00b      	b.n	8003d74 <psram_init+0x84>
		}else if(density == PSRAM_DENSITY_16MB)
 8003d5c:	79fb      	ldrb	r3, [r7, #7]
 8003d5e:	2b01      	cmp	r3, #1
 8003d60:	d104      	bne.n	8003d6c <psram_init+0x7c>
		{
			psramSize = PSRAM_DENSITY_16MB_EADDR;
 8003d62:	4b10      	ldr	r3, [pc, #64]	@ (8003da4 <psram_init+0xb4>)
 8003d64:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 8003d68:	601a      	str	r2, [r3, #0]
 8003d6a:	e003      	b.n	8003d74 <psram_init+0x84>
		}else{
			psramSize = PSRAM_DENSITY_8MB_EADDR;
 8003d6c:	4b0d      	ldr	r3, [pc, #52]	@ (8003da4 <psram_init+0xb4>)
 8003d6e:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8003d72:	601a      	str	r2, [r3, #0]
		}

		psramNumPages = psramSize / PSRAM_PAGE_SIZE;
 8003d74:	4b0b      	ldr	r3, [pc, #44]	@ (8003da4 <psram_init+0xb4>)
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	0a9b      	lsrs	r3, r3, #10
 8003d7a:	4a0b      	ldr	r2, [pc, #44]	@ (8003da8 <psram_init+0xb8>)
 8003d7c:	6013      	str	r3, [r2, #0]

		psram_qpi_mode(1);
 8003d7e:	2001      	movs	r0, #1
 8003d80:	f7ff fe3e 	bl	8003a00 <psram_qpi_mode>

		psramInitDone = 1;
 8003d84:	4b05      	ldr	r3, [pc, #20]	@ (8003d9c <psram_init+0xac>)
 8003d86:	2201      	movs	r2, #1
 8003d88:	701a      	strb	r2, [r3, #0]
		return 0;
 8003d8a:	2300      	movs	r3, #0
 8003d8c:	e001      	b.n	8003d92 <psram_init+0xa2>
	}else{
		return -1;
 8003d8e:	f04f 33ff 	mov.w	r3, #4294967295
	}

}
 8003d92:	4618      	mov	r0, r3
 8003d94:	3708      	adds	r7, #8
 8003d96:	46bd      	mov	sp, r7
 8003d98:	bd80      	pop	{r7, pc}
 8003d9a:	bf00      	nop
 8003d9c:	200073a0 	.word	0x200073a0
 8003da0:	200073a4 	.word	0x200073a4
 8003da4:	200073ac 	.word	0x200073ac
 8003da8:	200073b0 	.word	0x200073b0

08003dac <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003dac:	b480      	push	{r7}
 8003dae:	b083      	sub	sp, #12
 8003db0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003db2:	4b0f      	ldr	r3, [pc, #60]	@ (8003df0 <HAL_MspInit+0x44>)
 8003db4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003db6:	4a0e      	ldr	r2, [pc, #56]	@ (8003df0 <HAL_MspInit+0x44>)
 8003db8:	f043 0301 	orr.w	r3, r3, #1
 8003dbc:	6613      	str	r3, [r2, #96]	@ 0x60
 8003dbe:	4b0c      	ldr	r3, [pc, #48]	@ (8003df0 <HAL_MspInit+0x44>)
 8003dc0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003dc2:	f003 0301 	and.w	r3, r3, #1
 8003dc6:	607b      	str	r3, [r7, #4]
 8003dc8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003dca:	4b09      	ldr	r3, [pc, #36]	@ (8003df0 <HAL_MspInit+0x44>)
 8003dcc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003dce:	4a08      	ldr	r2, [pc, #32]	@ (8003df0 <HAL_MspInit+0x44>)
 8003dd0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003dd4:	6593      	str	r3, [r2, #88]	@ 0x58
 8003dd6:	4b06      	ldr	r3, [pc, #24]	@ (8003df0 <HAL_MspInit+0x44>)
 8003dd8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003dda:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003dde:	603b      	str	r3, [r7, #0]
 8003de0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003de2:	bf00      	nop
 8003de4:	370c      	adds	r7, #12
 8003de6:	46bd      	mov	sp, r7
 8003de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dec:	4770      	bx	lr
 8003dee:	bf00      	nop
 8003df0:	40021000 	.word	0x40021000

08003df4 <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8003df4:	b580      	push	{r7, lr}
 8003df6:	b0ac      	sub	sp, #176	@ 0xb0
 8003df8:	af00      	add	r7, sp, #0
 8003dfa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003dfc:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8003e00:	2200      	movs	r2, #0
 8003e02:	601a      	str	r2, [r3, #0]
 8003e04:	605a      	str	r2, [r3, #4]
 8003e06:	609a      	str	r2, [r3, #8]
 8003e08:	60da      	str	r2, [r3, #12]
 8003e0a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8003e0c:	f107 0314 	add.w	r3, r7, #20
 8003e10:	2288      	movs	r2, #136	@ 0x88
 8003e12:	2100      	movs	r1, #0
 8003e14:	4618      	mov	r0, r3
 8003e16:	f00c ff65 	bl	8010ce4 <memset>
  if(hadc->Instance==ADC1)
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	4a3d      	ldr	r2, [pc, #244]	@ (8003f14 <HAL_ADC_MspInit+0x120>)
 8003e20:	4293      	cmp	r3, r2
 8003e22:	d172      	bne.n	8003f0a <HAL_ADC_MspInit+0x116>

    /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8003e24:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8003e28:	617b      	str	r3, [r7, #20]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 8003e2a:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8003e2e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_HSE;
 8003e32:	2303      	movs	r3, #3
 8003e34:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8003e36:	2301      	movs	r3, #1
 8003e38:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 8;
 8003e3a:	2308      	movs	r3, #8
 8003e3c:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 8003e3e:	2307      	movs	r3, #7
 8003e40:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8003e42:	2302      	movs	r3, #2
 8003e44:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8003e46:	2302      	movs	r3, #2
 8003e48:	62fb      	str	r3, [r7, #44]	@ 0x2c
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 8003e4a:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8003e4e:	633b      	str	r3, [r7, #48]	@ 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003e50:	f107 0314 	add.w	r3, r7, #20
 8003e54:	4618      	mov	r0, r3
 8003e56:	f007 ffab 	bl	800bdb0 <HAL_RCCEx_PeriphCLKConfig>
 8003e5a:	4603      	mov	r3, r0
 8003e5c:	2b00      	cmp	r3, #0
 8003e5e:	d001      	beq.n	8003e64 <HAL_ADC_MspInit+0x70>
    {
      Error_Handler();
 8003e60:	f7ff fb92 	bl	8003588 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8003e64:	4b2c      	ldr	r3, [pc, #176]	@ (8003f18 <HAL_ADC_MspInit+0x124>)
 8003e66:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003e68:	4a2b      	ldr	r2, [pc, #172]	@ (8003f18 <HAL_ADC_MspInit+0x124>)
 8003e6a:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8003e6e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003e70:	4b29      	ldr	r3, [pc, #164]	@ (8003f18 <HAL_ADC_MspInit+0x124>)
 8003e72:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003e74:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003e78:	613b      	str	r3, [r7, #16]
 8003e7a:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003e7c:	4b26      	ldr	r3, [pc, #152]	@ (8003f18 <HAL_ADC_MspInit+0x124>)
 8003e7e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003e80:	4a25      	ldr	r2, [pc, #148]	@ (8003f18 <HAL_ADC_MspInit+0x124>)
 8003e82:	f043 0301 	orr.w	r3, r3, #1
 8003e86:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003e88:	4b23      	ldr	r3, [pc, #140]	@ (8003f18 <HAL_ADC_MspInit+0x124>)
 8003e8a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003e8c:	f003 0301 	and.w	r3, r3, #1
 8003e90:	60fb      	str	r3, [r7, #12]
 8003e92:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA4     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8003e94:	2310      	movs	r3, #16
 8003e96:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8003e9a:	230b      	movs	r3, #11
 8003e9c:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003ea0:	2300      	movs	r3, #0
 8003ea2:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003ea6:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8003eaa:	4619      	mov	r1, r3
 8003eac:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8003eb0:	f005 fd0e 	bl	80098d0 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8003eb4:	4b19      	ldr	r3, [pc, #100]	@ (8003f1c <HAL_ADC_MspInit+0x128>)
 8003eb6:	4a1a      	ldr	r2, [pc, #104]	@ (8003f20 <HAL_ADC_MspInit+0x12c>)
 8003eb8:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_0;
 8003eba:	4b18      	ldr	r3, [pc, #96]	@ (8003f1c <HAL_ADC_MspInit+0x128>)
 8003ebc:	2200      	movs	r2, #0
 8003ebe:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003ec0:	4b16      	ldr	r3, [pc, #88]	@ (8003f1c <HAL_ADC_MspInit+0x128>)
 8003ec2:	2200      	movs	r2, #0
 8003ec4:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8003ec6:	4b15      	ldr	r3, [pc, #84]	@ (8003f1c <HAL_ADC_MspInit+0x128>)
 8003ec8:	2200      	movs	r2, #0
 8003eca:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8003ecc:	4b13      	ldr	r3, [pc, #76]	@ (8003f1c <HAL_ADC_MspInit+0x128>)
 8003ece:	2280      	movs	r2, #128	@ 0x80
 8003ed0:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8003ed2:	4b12      	ldr	r3, [pc, #72]	@ (8003f1c <HAL_ADC_MspInit+0x128>)
 8003ed4:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8003ed8:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8003eda:	4b10      	ldr	r3, [pc, #64]	@ (8003f1c <HAL_ADC_MspInit+0x128>)
 8003edc:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8003ee0:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8003ee2:	4b0e      	ldr	r3, [pc, #56]	@ (8003f1c <HAL_ADC_MspInit+0x128>)
 8003ee4:	2220      	movs	r2, #32
 8003ee6:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8003ee8:	4b0c      	ldr	r3, [pc, #48]	@ (8003f1c <HAL_ADC_MspInit+0x128>)
 8003eea:	2200      	movs	r2, #0
 8003eec:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8003eee:	480b      	ldr	r0, [pc, #44]	@ (8003f1c <HAL_ADC_MspInit+0x128>)
 8003ef0:	f005 fab8 	bl	8009464 <HAL_DMA_Init>
 8003ef4:	4603      	mov	r3, r0
 8003ef6:	2b00      	cmp	r3, #0
 8003ef8:	d001      	beq.n	8003efe <HAL_ADC_MspInit+0x10a>
    {
      Error_Handler();
 8003efa:	f7ff fb45 	bl	8003588 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	4a06      	ldr	r2, [pc, #24]	@ (8003f1c <HAL_ADC_MspInit+0x128>)
 8003f02:	64da      	str	r2, [r3, #76]	@ 0x4c
 8003f04:	4a05      	ldr	r2, [pc, #20]	@ (8003f1c <HAL_ADC_MspInit+0x128>)
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	6293      	str	r3, [r2, #40]	@ 0x28

    /* USER CODE END ADC1_MspInit 1 */

  }

}
 8003f0a:	bf00      	nop
 8003f0c:	37b0      	adds	r7, #176	@ 0xb0
 8003f0e:	46bd      	mov	sp, r7
 8003f10:	bd80      	pop	{r7, pc}
 8003f12:	bf00      	nop
 8003f14:	50040000 	.word	0x50040000
 8003f18:	40021000 	.word	0x40021000
 8003f1c:	200000f4 	.word	0x200000f4
 8003f20:	40020008 	.word	0x40020008

08003f24 <HAL_CRC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hcrc: CRC handle pointer
  * @retval None
  */
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 8003f24:	b480      	push	{r7}
 8003f26:	b085      	sub	sp, #20
 8003f28:	af00      	add	r7, sp, #0
 8003f2a:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	4a0a      	ldr	r2, [pc, #40]	@ (8003f5c <HAL_CRC_MspInit+0x38>)
 8003f32:	4293      	cmp	r3, r2
 8003f34:	d10b      	bne.n	8003f4e <HAL_CRC_MspInit+0x2a>
  {
    /* USER CODE BEGIN CRC_MspInit 0 */

    /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8003f36:	4b0a      	ldr	r3, [pc, #40]	@ (8003f60 <HAL_CRC_MspInit+0x3c>)
 8003f38:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003f3a:	4a09      	ldr	r2, [pc, #36]	@ (8003f60 <HAL_CRC_MspInit+0x3c>)
 8003f3c:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8003f40:	6493      	str	r3, [r2, #72]	@ 0x48
 8003f42:	4b07      	ldr	r3, [pc, #28]	@ (8003f60 <HAL_CRC_MspInit+0x3c>)
 8003f44:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003f46:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003f4a:	60fb      	str	r3, [r7, #12]
 8003f4c:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END CRC_MspInit 1 */

  }

}
 8003f4e:	bf00      	nop
 8003f50:	3714      	adds	r7, #20
 8003f52:	46bd      	mov	sp, r7
 8003f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f58:	4770      	bx	lr
 8003f5a:	bf00      	nop
 8003f5c:	40023000 	.word	0x40023000
 8003f60:	40021000 	.word	0x40021000

08003f64 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8003f64:	b580      	push	{r7, lr}
 8003f66:	b0ac      	sub	sp, #176	@ 0xb0
 8003f68:	af00      	add	r7, sp, #0
 8003f6a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003f6c:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8003f70:	2200      	movs	r2, #0
 8003f72:	601a      	str	r2, [r3, #0]
 8003f74:	605a      	str	r2, [r3, #4]
 8003f76:	609a      	str	r2, [r3, #8]
 8003f78:	60da      	str	r2, [r3, #12]
 8003f7a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8003f7c:	f107 0314 	add.w	r3, r7, #20
 8003f80:	2288      	movs	r2, #136	@ 0x88
 8003f82:	2100      	movs	r1, #0
 8003f84:	4618      	mov	r0, r3
 8003f86:	f00c fead 	bl	8010ce4 <memset>
  if(hi2c->Instance==I2C3)
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	4a21      	ldr	r2, [pc, #132]	@ (8004014 <HAL_I2C_MspInit+0xb0>)
 8003f90:	4293      	cmp	r3, r2
 8003f92:	d13b      	bne.n	800400c <HAL_I2C_MspInit+0xa8>

    /* USER CODE END I2C3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C3;
 8003f94:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8003f98:	617b      	str	r3, [r7, #20]
    PeriphClkInit.I2c3ClockSelection = RCC_I2C3CLKSOURCE_PCLK1;
 8003f9a:	2300      	movs	r3, #0
 8003f9c:	66fb      	str	r3, [r7, #108]	@ 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003f9e:	f107 0314 	add.w	r3, r7, #20
 8003fa2:	4618      	mov	r0, r3
 8003fa4:	f007 ff04 	bl	800bdb0 <HAL_RCCEx_PeriphCLKConfig>
 8003fa8:	4603      	mov	r3, r0
 8003faa:	2b00      	cmp	r3, #0
 8003fac:	d001      	beq.n	8003fb2 <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8003fae:	f7ff faeb 	bl	8003588 <Error_Handler>
    }

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003fb2:	4b19      	ldr	r3, [pc, #100]	@ (8004018 <HAL_I2C_MspInit+0xb4>)
 8003fb4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003fb6:	4a18      	ldr	r2, [pc, #96]	@ (8004018 <HAL_I2C_MspInit+0xb4>)
 8003fb8:	f043 0304 	orr.w	r3, r3, #4
 8003fbc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003fbe:	4b16      	ldr	r3, [pc, #88]	@ (8004018 <HAL_I2C_MspInit+0xb4>)
 8003fc0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003fc2:	f003 0304 	and.w	r3, r3, #4
 8003fc6:	613b      	str	r3, [r7, #16]
 8003fc8:	693b      	ldr	r3, [r7, #16]
    /**I2C3 GPIO Configuration
    PC0     ------> I2C3_SCL
    PC1     ------> I2C3_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8003fca:	2303      	movs	r3, #3
 8003fcc:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003fd0:	2312      	movs	r3, #18
 8003fd2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003fd6:	2300      	movs	r3, #0
 8003fd8:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003fdc:	2303      	movs	r3, #3
 8003fde:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8003fe2:	2304      	movs	r3, #4
 8003fe4:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003fe8:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8003fec:	4619      	mov	r1, r3
 8003fee:	480b      	ldr	r0, [pc, #44]	@ (800401c <HAL_I2C_MspInit+0xb8>)
 8003ff0:	f005 fc6e 	bl	80098d0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 8003ff4:	4b08      	ldr	r3, [pc, #32]	@ (8004018 <HAL_I2C_MspInit+0xb4>)
 8003ff6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003ff8:	4a07      	ldr	r2, [pc, #28]	@ (8004018 <HAL_I2C_MspInit+0xb4>)
 8003ffa:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8003ffe:	6593      	str	r3, [r2, #88]	@ 0x58
 8004000:	4b05      	ldr	r3, [pc, #20]	@ (8004018 <HAL_I2C_MspInit+0xb4>)
 8004002:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004004:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004008:	60fb      	str	r3, [r7, #12]
 800400a:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END I2C3_MspInit 1 */

  }

}
 800400c:	bf00      	nop
 800400e:	37b0      	adds	r7, #176	@ 0xb0
 8004010:	46bd      	mov	sp, r7
 8004012:	bd80      	pop	{r7, pc}
 8004014:	40005c00 	.word	0x40005c00
 8004018:	40021000 	.word	0x40021000
 800401c:	48000800 	.word	0x48000800

08004020 <HAL_QSPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hqspi: QSPI handle pointer
  * @retval None
  */
void HAL_QSPI_MspInit(QSPI_HandleTypeDef* hqspi)
{
 8004020:	b580      	push	{r7, lr}
 8004022:	b08a      	sub	sp, #40	@ 0x28
 8004024:	af00      	add	r7, sp, #0
 8004026:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004028:	f107 0314 	add.w	r3, r7, #20
 800402c:	2200      	movs	r2, #0
 800402e:	601a      	str	r2, [r3, #0]
 8004030:	605a      	str	r2, [r3, #4]
 8004032:	609a      	str	r2, [r3, #8]
 8004034:	60da      	str	r2, [r3, #12]
 8004036:	611a      	str	r2, [r3, #16]
  if(hqspi->Instance==QUADSPI)
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	4a26      	ldr	r2, [pc, #152]	@ (80040d8 <HAL_QSPI_MspInit+0xb8>)
 800403e:	4293      	cmp	r3, r2
 8004040:	d145      	bne.n	80040ce <HAL_QSPI_MspInit+0xae>
  {
    /* USER CODE BEGIN QUADSPI_MspInit 0 */

    /* USER CODE END QUADSPI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_QSPI_CLK_ENABLE();
 8004042:	4b26      	ldr	r3, [pc, #152]	@ (80040dc <HAL_QSPI_MspInit+0xbc>)
 8004044:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004046:	4a25      	ldr	r2, [pc, #148]	@ (80040dc <HAL_QSPI_MspInit+0xbc>)
 8004048:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800404c:	6513      	str	r3, [r2, #80]	@ 0x50
 800404e:	4b23      	ldr	r3, [pc, #140]	@ (80040dc <HAL_QSPI_MspInit+0xbc>)
 8004050:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004052:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004056:	613b      	str	r3, [r7, #16]
 8004058:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800405a:	4b20      	ldr	r3, [pc, #128]	@ (80040dc <HAL_QSPI_MspInit+0xbc>)
 800405c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800405e:	4a1f      	ldr	r2, [pc, #124]	@ (80040dc <HAL_QSPI_MspInit+0xbc>)
 8004060:	f043 0301 	orr.w	r3, r3, #1
 8004064:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8004066:	4b1d      	ldr	r3, [pc, #116]	@ (80040dc <HAL_QSPI_MspInit+0xbc>)
 8004068:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800406a:	f003 0301 	and.w	r3, r3, #1
 800406e:	60fb      	str	r3, [r7, #12]
 8004070:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004072:	4b1a      	ldr	r3, [pc, #104]	@ (80040dc <HAL_QSPI_MspInit+0xbc>)
 8004074:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004076:	4a19      	ldr	r2, [pc, #100]	@ (80040dc <HAL_QSPI_MspInit+0xbc>)
 8004078:	f043 0302 	orr.w	r3, r3, #2
 800407c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800407e:	4b17      	ldr	r3, [pc, #92]	@ (80040dc <HAL_QSPI_MspInit+0xbc>)
 8004080:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004082:	f003 0302 	and.w	r3, r3, #2
 8004086:	60bb      	str	r3, [r7, #8]
 8004088:	68bb      	ldr	r3, [r7, #8]
    PB0     ------> QUADSPI_BK1_IO1
    PB1     ------> QUADSPI_BK1_IO0
    PB10     ------> QUADSPI_CLK
    PB11     ------> QUADSPI_NCS
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800408a:	23c0      	movs	r3, #192	@ 0xc0
 800408c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800408e:	2302      	movs	r3, #2
 8004090:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004092:	2300      	movs	r3, #0
 8004094:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004096:	2303      	movs	r3, #3
 8004098:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 800409a:	230a      	movs	r3, #10
 800409c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800409e:	f107 0314 	add.w	r3, r7, #20
 80040a2:	4619      	mov	r1, r3
 80040a4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80040a8:	f005 fc12 	bl	80098d0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_10|GPIO_PIN_11;
 80040ac:	f640 4303 	movw	r3, #3075	@ 0xc03
 80040b0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80040b2:	2302      	movs	r3, #2
 80040b4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80040b6:	2300      	movs	r3, #0
 80040b8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80040ba:	2303      	movs	r3, #3
 80040bc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 80040be:	230a      	movs	r3, #10
 80040c0:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80040c2:	f107 0314 	add.w	r3, r7, #20
 80040c6:	4619      	mov	r1, r3
 80040c8:	4805      	ldr	r0, [pc, #20]	@ (80040e0 <HAL_QSPI_MspInit+0xc0>)
 80040ca:	f005 fc01 	bl	80098d0 <HAL_GPIO_Init>

    /* USER CODE END QUADSPI_MspInit 1 */

  }

}
 80040ce:	bf00      	nop
 80040d0:	3728      	adds	r7, #40	@ 0x28
 80040d2:	46bd      	mov	sp, r7
 80040d4:	bd80      	pop	{r7, pc}
 80040d6:	bf00      	nop
 80040d8:	a0001000 	.word	0xa0001000
 80040dc:	40021000 	.word	0x40021000
 80040e0:	48000400 	.word	0x48000400

080040e4 <HAL_RTC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hrtc: RTC handle pointer
  * @retval None
  */
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 80040e4:	b580      	push	{r7, lr}
 80040e6:	b0a4      	sub	sp, #144	@ 0x90
 80040e8:	af00      	add	r7, sp, #0
 80040ea:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80040ec:	f107 0308 	add.w	r3, r7, #8
 80040f0:	2288      	movs	r2, #136	@ 0x88
 80040f2:	2100      	movs	r1, #0
 80040f4:	4618      	mov	r0, r3
 80040f6:	f00c fdf5 	bl	8010ce4 <memset>
  if(hrtc->Instance==RTC)
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	4a14      	ldr	r2, [pc, #80]	@ (8004150 <HAL_RTC_MspInit+0x6c>)
 8004100:	4293      	cmp	r3, r2
 8004102:	d120      	bne.n	8004146 <HAL_RTC_MspInit+0x62>

    /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8004104:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8004108:	60bb      	str	r3, [r7, #8]
    PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 800410a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800410e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8004112:	f107 0308 	add.w	r3, r7, #8
 8004116:	4618      	mov	r0, r3
 8004118:	f007 fe4a 	bl	800bdb0 <HAL_RCCEx_PeriphCLKConfig>
 800411c:	4603      	mov	r3, r0
 800411e:	2b00      	cmp	r3, #0
 8004120:	d001      	beq.n	8004126 <HAL_RTC_MspInit+0x42>
    {
      Error_Handler();
 8004122:	f7ff fa31 	bl	8003588 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8004126:	4b0b      	ldr	r3, [pc, #44]	@ (8004154 <HAL_RTC_MspInit+0x70>)
 8004128:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800412c:	4a09      	ldr	r2, [pc, #36]	@ (8004154 <HAL_RTC_MspInit+0x70>)
 800412e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004132:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_Alarm_IRQn, 0, 0);
 8004136:	2200      	movs	r2, #0
 8004138:	2100      	movs	r1, #0
 800413a:	2029      	movs	r0, #41	@ 0x29
 800413c:	f005 f869 	bl	8009212 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_Alarm_IRQn);
 8004140:	2029      	movs	r0, #41	@ 0x29
 8004142:	f005 f882 	bl	800924a <HAL_NVIC_EnableIRQ>

    /* USER CODE END RTC_MspInit 1 */

  }

}
 8004146:	bf00      	nop
 8004148:	3790      	adds	r7, #144	@ 0x90
 800414a:	46bd      	mov	sp, r7
 800414c:	bd80      	pop	{r7, pc}
 800414e:	bf00      	nop
 8004150:	40002800 	.word	0x40002800
 8004154:	40021000 	.word	0x40021000

08004158 <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8004158:	b580      	push	{r7, lr}
 800415a:	b08c      	sub	sp, #48	@ 0x30
 800415c:	af00      	add	r7, sp, #0
 800415e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004160:	f107 031c 	add.w	r3, r7, #28
 8004164:	2200      	movs	r2, #0
 8004166:	601a      	str	r2, [r3, #0]
 8004168:	605a      	str	r2, [r3, #4]
 800416a:	609a      	str	r2, [r3, #8]
 800416c:	60da      	str	r2, [r3, #12]
 800416e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	4a2f      	ldr	r2, [pc, #188]	@ (8004234 <HAL_SPI_MspInit+0xdc>)
 8004176:	4293      	cmp	r3, r2
 8004178:	d129      	bne.n	80041ce <HAL_SPI_MspInit+0x76>
  {
    /* USER CODE BEGIN SPI2_MspInit 0 */

    /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 800417a:	4b2f      	ldr	r3, [pc, #188]	@ (8004238 <HAL_SPI_MspInit+0xe0>)
 800417c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800417e:	4a2e      	ldr	r2, [pc, #184]	@ (8004238 <HAL_SPI_MspInit+0xe0>)
 8004180:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8004184:	6593      	str	r3, [r2, #88]	@ 0x58
 8004186:	4b2c      	ldr	r3, [pc, #176]	@ (8004238 <HAL_SPI_MspInit+0xe0>)
 8004188:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800418a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800418e:	61bb      	str	r3, [r7, #24]
 8004190:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004192:	4b29      	ldr	r3, [pc, #164]	@ (8004238 <HAL_SPI_MspInit+0xe0>)
 8004194:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004196:	4a28      	ldr	r2, [pc, #160]	@ (8004238 <HAL_SPI_MspInit+0xe0>)
 8004198:	f043 0302 	orr.w	r3, r3, #2
 800419c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800419e:	4b26      	ldr	r3, [pc, #152]	@ (8004238 <HAL_SPI_MspInit+0xe0>)
 80041a0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80041a2:	f003 0302 	and.w	r3, r3, #2
 80041a6:	617b      	str	r3, [r7, #20]
 80041a8:	697b      	ldr	r3, [r7, #20]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 80041aa:	f44f 4360 	mov.w	r3, #57344	@ 0xe000
 80041ae:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80041b0:	2302      	movs	r3, #2
 80041b2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80041b4:	2300      	movs	r3, #0
 80041b6:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80041b8:	2303      	movs	r3, #3
 80041ba:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80041bc:	2305      	movs	r3, #5
 80041be:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80041c0:	f107 031c 	add.w	r3, r7, #28
 80041c4:	4619      	mov	r1, r3
 80041c6:	481d      	ldr	r0, [pc, #116]	@ (800423c <HAL_SPI_MspInit+0xe4>)
 80041c8:	f005 fb82 	bl	80098d0 <HAL_GPIO_Init>
    /* USER CODE BEGIN SPI3_MspInit 1 */

    /* USER CODE END SPI3_MspInit 1 */
  }

}
 80041cc:	e02d      	b.n	800422a <HAL_SPI_MspInit+0xd2>
  else if(hspi->Instance==SPI3)
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	4a1b      	ldr	r2, [pc, #108]	@ (8004240 <HAL_SPI_MspInit+0xe8>)
 80041d4:	4293      	cmp	r3, r2
 80041d6:	d128      	bne.n	800422a <HAL_SPI_MspInit+0xd2>
    __HAL_RCC_SPI3_CLK_ENABLE();
 80041d8:	4b17      	ldr	r3, [pc, #92]	@ (8004238 <HAL_SPI_MspInit+0xe0>)
 80041da:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80041dc:	4a16      	ldr	r2, [pc, #88]	@ (8004238 <HAL_SPI_MspInit+0xe0>)
 80041de:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80041e2:	6593      	str	r3, [r2, #88]	@ 0x58
 80041e4:	4b14      	ldr	r3, [pc, #80]	@ (8004238 <HAL_SPI_MspInit+0xe0>)
 80041e6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80041e8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80041ec:	613b      	str	r3, [r7, #16]
 80041ee:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80041f0:	4b11      	ldr	r3, [pc, #68]	@ (8004238 <HAL_SPI_MspInit+0xe0>)
 80041f2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80041f4:	4a10      	ldr	r2, [pc, #64]	@ (8004238 <HAL_SPI_MspInit+0xe0>)
 80041f6:	f043 0304 	orr.w	r3, r3, #4
 80041fa:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80041fc:	4b0e      	ldr	r3, [pc, #56]	@ (8004238 <HAL_SPI_MspInit+0xe0>)
 80041fe:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004200:	f003 0304 	and.w	r3, r3, #4
 8004204:	60fb      	str	r3, [r7, #12]
 8004206:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 8004208:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 800420c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800420e:	2302      	movs	r3, #2
 8004210:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004212:	2300      	movs	r3, #0
 8004214:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004216:	2303      	movs	r3, #3
 8004218:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 800421a:	2306      	movs	r3, #6
 800421c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800421e:	f107 031c 	add.w	r3, r7, #28
 8004222:	4619      	mov	r1, r3
 8004224:	4807      	ldr	r0, [pc, #28]	@ (8004244 <HAL_SPI_MspInit+0xec>)
 8004226:	f005 fb53 	bl	80098d0 <HAL_GPIO_Init>
}
 800422a:	bf00      	nop
 800422c:	3730      	adds	r7, #48	@ 0x30
 800422e:	46bd      	mov	sp, r7
 8004230:	bd80      	pop	{r7, pc}
 8004232:	bf00      	nop
 8004234:	40003800 	.word	0x40003800
 8004238:	40021000 	.word	0x40021000
 800423c:	48000400 	.word	0x48000400
 8004240:	40003c00 	.word	0x40003c00
 8004244:	48000800 	.word	0x48000800

08004248 <HAL_TIM_OC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_oc: TIM_OC handle pointer
  * @retval None
  */
void HAL_TIM_OC_MspInit(TIM_HandleTypeDef* htim_oc)
{
 8004248:	b480      	push	{r7}
 800424a:	b085      	sub	sp, #20
 800424c:	af00      	add	r7, sp, #0
 800424e:	6078      	str	r0, [r7, #4]
  if(htim_oc->Instance==TIM1)
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	4a0a      	ldr	r2, [pc, #40]	@ (8004280 <HAL_TIM_OC_MspInit+0x38>)
 8004256:	4293      	cmp	r3, r2
 8004258:	d10b      	bne.n	8004272 <HAL_TIM_OC_MspInit+0x2a>
  {
    /* USER CODE BEGIN TIM1_MspInit 0 */

    /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800425a:	4b0a      	ldr	r3, [pc, #40]	@ (8004284 <HAL_TIM_OC_MspInit+0x3c>)
 800425c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800425e:	4a09      	ldr	r2, [pc, #36]	@ (8004284 <HAL_TIM_OC_MspInit+0x3c>)
 8004260:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8004264:	6613      	str	r3, [r2, #96]	@ 0x60
 8004266:	4b07      	ldr	r3, [pc, #28]	@ (8004284 <HAL_TIM_OC_MspInit+0x3c>)
 8004268:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800426a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800426e:	60fb      	str	r3, [r7, #12]
 8004270:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END TIM1_MspInit 1 */

  }

}
 8004272:	bf00      	nop
 8004274:	3714      	adds	r7, #20
 8004276:	46bd      	mov	sp, r7
 8004278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800427c:	4770      	bx	lr
 800427e:	bf00      	nop
 8004280:	40012c00 	.word	0x40012c00
 8004284:	40021000 	.word	0x40021000

08004288 <HAL_TIM_IC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_ic: TIM_IC handle pointer
  * @retval None
  */
void HAL_TIM_IC_MspInit(TIM_HandleTypeDef* htim_ic)
{
 8004288:	b580      	push	{r7, lr}
 800428a:	b08a      	sub	sp, #40	@ 0x28
 800428c:	af00      	add	r7, sp, #0
 800428e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004290:	f107 0314 	add.w	r3, r7, #20
 8004294:	2200      	movs	r2, #0
 8004296:	601a      	str	r2, [r3, #0]
 8004298:	605a      	str	r2, [r3, #4]
 800429a:	609a      	str	r2, [r3, #8]
 800429c:	60da      	str	r2, [r3, #12]
 800429e:	611a      	str	r2, [r3, #16]
  if(htim_ic->Instance==TIM2)
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80042a8:	d128      	bne.n	80042fc <HAL_TIM_IC_MspInit+0x74>
  {
    /* USER CODE BEGIN TIM2_MspInit 0 */

    /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80042aa:	4b16      	ldr	r3, [pc, #88]	@ (8004304 <HAL_TIM_IC_MspInit+0x7c>)
 80042ac:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80042ae:	4a15      	ldr	r2, [pc, #84]	@ (8004304 <HAL_TIM_IC_MspInit+0x7c>)
 80042b0:	f043 0301 	orr.w	r3, r3, #1
 80042b4:	6593      	str	r3, [r2, #88]	@ 0x58
 80042b6:	4b13      	ldr	r3, [pc, #76]	@ (8004304 <HAL_TIM_IC_MspInit+0x7c>)
 80042b8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80042ba:	f003 0301 	and.w	r3, r3, #1
 80042be:	613b      	str	r3, [r7, #16]
 80042c0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80042c2:	4b10      	ldr	r3, [pc, #64]	@ (8004304 <HAL_TIM_IC_MspInit+0x7c>)
 80042c4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80042c6:	4a0f      	ldr	r2, [pc, #60]	@ (8004304 <HAL_TIM_IC_MspInit+0x7c>)
 80042c8:	f043 0301 	orr.w	r3, r3, #1
 80042cc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80042ce:	4b0d      	ldr	r3, [pc, #52]	@ (8004304 <HAL_TIM_IC_MspInit+0x7c>)
 80042d0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80042d2:	f003 0301 	and.w	r3, r3, #1
 80042d6:	60fb      	str	r3, [r7, #12]
 80042d8:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA5     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 80042da:	2320      	movs	r3, #32
 80042dc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80042de:	2302      	movs	r3, #2
 80042e0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80042e2:	2301      	movs	r3, #1
 80042e4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80042e6:	2300      	movs	r3, #0
 80042e8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80042ea:	2301      	movs	r3, #1
 80042ec:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80042ee:	f107 0314 	add.w	r3, r7, #20
 80042f2:	4619      	mov	r1, r3
 80042f4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80042f8:	f005 faea 	bl	80098d0 <HAL_GPIO_Init>

    /* USER CODE END TIM2_MspInit 1 */

  }

}
 80042fc:	bf00      	nop
 80042fe:	3728      	adds	r7, #40	@ 0x28
 8004300:	46bd      	mov	sp, r7
 8004302:	bd80      	pop	{r7, pc}
 8004304:	40021000 	.word	0x40021000

08004308 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8004308:	b480      	push	{r7}
 800430a:	b085      	sub	sp, #20
 800430c:	af00      	add	r7, sp, #0
 800430e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	4a13      	ldr	r2, [pc, #76]	@ (8004364 <HAL_TIM_Base_MspInit+0x5c>)
 8004316:	4293      	cmp	r3, r2
 8004318:	d10c      	bne.n	8004334 <HAL_TIM_Base_MspInit+0x2c>
  {
    /* USER CODE BEGIN TIM3_MspInit 0 */

    /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 800431a:	4b13      	ldr	r3, [pc, #76]	@ (8004368 <HAL_TIM_Base_MspInit+0x60>)
 800431c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800431e:	4a12      	ldr	r2, [pc, #72]	@ (8004368 <HAL_TIM_Base_MspInit+0x60>)
 8004320:	f043 0302 	orr.w	r3, r3, #2
 8004324:	6593      	str	r3, [r2, #88]	@ 0x58
 8004326:	4b10      	ldr	r3, [pc, #64]	@ (8004368 <HAL_TIM_Base_MspInit+0x60>)
 8004328:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800432a:	f003 0302 	and.w	r3, r3, #2
 800432e:	60fb      	str	r3, [r7, #12]
 8004330:	68fb      	ldr	r3, [r7, #12]
    /* USER CODE BEGIN TIM4_MspInit 1 */

    /* USER CODE END TIM4_MspInit 1 */
  }

}
 8004332:	e010      	b.n	8004356 <HAL_TIM_Base_MspInit+0x4e>
  else if(htim_base->Instance==TIM4)
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	4a0c      	ldr	r2, [pc, #48]	@ (800436c <HAL_TIM_Base_MspInit+0x64>)
 800433a:	4293      	cmp	r3, r2
 800433c:	d10b      	bne.n	8004356 <HAL_TIM_Base_MspInit+0x4e>
    __HAL_RCC_TIM4_CLK_ENABLE();
 800433e:	4b0a      	ldr	r3, [pc, #40]	@ (8004368 <HAL_TIM_Base_MspInit+0x60>)
 8004340:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004342:	4a09      	ldr	r2, [pc, #36]	@ (8004368 <HAL_TIM_Base_MspInit+0x60>)
 8004344:	f043 0304 	orr.w	r3, r3, #4
 8004348:	6593      	str	r3, [r2, #88]	@ 0x58
 800434a:	4b07      	ldr	r3, [pc, #28]	@ (8004368 <HAL_TIM_Base_MspInit+0x60>)
 800434c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800434e:	f003 0304 	and.w	r3, r3, #4
 8004352:	60bb      	str	r3, [r7, #8]
 8004354:	68bb      	ldr	r3, [r7, #8]
}
 8004356:	bf00      	nop
 8004358:	3714      	adds	r7, #20
 800435a:	46bd      	mov	sp, r7
 800435c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004360:	4770      	bx	lr
 8004362:	bf00      	nop
 8004364:	40000400 	.word	0x40000400
 8004368:	40021000 	.word	0x40021000
 800436c:	40000800 	.word	0x40000800

08004370 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8004370:	b580      	push	{r7, lr}
 8004372:	b08a      	sub	sp, #40	@ 0x28
 8004374:	af00      	add	r7, sp, #0
 8004376:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004378:	f107 0314 	add.w	r3, r7, #20
 800437c:	2200      	movs	r2, #0
 800437e:	601a      	str	r2, [r3, #0]
 8004380:	605a      	str	r2, [r3, #4]
 8004382:	609a      	str	r2, [r3, #8]
 8004384:	60da      	str	r2, [r3, #12]
 8004386:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	4a23      	ldr	r2, [pc, #140]	@ (800441c <HAL_TIM_MspPostInit+0xac>)
 800438e:	4293      	cmp	r3, r2
 8004390:	d11e      	bne.n	80043d0 <HAL_TIM_MspPostInit+0x60>
  {
    /* USER CODE BEGIN TIM1_MspPostInit 0 */

    /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004392:	4b23      	ldr	r3, [pc, #140]	@ (8004420 <HAL_TIM_MspPostInit+0xb0>)
 8004394:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004396:	4a22      	ldr	r2, [pc, #136]	@ (8004420 <HAL_TIM_MspPostInit+0xb0>)
 8004398:	f043 0301 	orr.w	r3, r3, #1
 800439c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800439e:	4b20      	ldr	r3, [pc, #128]	@ (8004420 <HAL_TIM_MspPostInit+0xb0>)
 80043a0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80043a2:	f003 0301 	and.w	r3, r3, #1
 80043a6:	613b      	str	r3, [r7, #16]
 80043a8:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10;
 80043aa:	f44f 63e0 	mov.w	r3, #1792	@ 0x700
 80043ae:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80043b0:	2302      	movs	r3, #2
 80043b2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80043b4:	2300      	movs	r3, #0
 80043b6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80043b8:	2300      	movs	r3, #0
 80043ba:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80043bc:	2301      	movs	r3, #1
 80043be:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80043c0:	f107 0314 	add.w	r3, r7, #20
 80043c4:	4619      	mov	r1, r3
 80043c6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80043ca:	f005 fa81 	bl	80098d0 <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM3_MspPostInit 1 */

    /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 80043ce:	e021      	b.n	8004414 <HAL_TIM_MspPostInit+0xa4>
  else if(htim->Instance==TIM3)
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	4a13      	ldr	r2, [pc, #76]	@ (8004424 <HAL_TIM_MspPostInit+0xb4>)
 80043d6:	4293      	cmp	r3, r2
 80043d8:	d11c      	bne.n	8004414 <HAL_TIM_MspPostInit+0xa4>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80043da:	4b11      	ldr	r3, [pc, #68]	@ (8004420 <HAL_TIM_MspPostInit+0xb0>)
 80043dc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80043de:	4a10      	ldr	r2, [pc, #64]	@ (8004420 <HAL_TIM_MspPostInit+0xb0>)
 80043e0:	f043 0304 	orr.w	r3, r3, #4
 80043e4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80043e6:	4b0e      	ldr	r3, [pc, #56]	@ (8004420 <HAL_TIM_MspPostInit+0xb0>)
 80043e8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80043ea:	f003 0304 	and.w	r3, r3, #4
 80043ee:	60fb      	str	r3, [r7, #12]
 80043f0:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 80043f2:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80043f6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80043f8:	2302      	movs	r3, #2
 80043fa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80043fc:	2300      	movs	r3, #0
 80043fe:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004400:	2300      	movs	r3, #0
 8004402:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8004404:	2302      	movs	r3, #2
 8004406:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004408:	f107 0314 	add.w	r3, r7, #20
 800440c:	4619      	mov	r1, r3
 800440e:	4806      	ldr	r0, [pc, #24]	@ (8004428 <HAL_TIM_MspPostInit+0xb8>)
 8004410:	f005 fa5e 	bl	80098d0 <HAL_GPIO_Init>
}
 8004414:	bf00      	nop
 8004416:	3728      	adds	r7, #40	@ 0x28
 8004418:	46bd      	mov	sp, r7
 800441a:	bd80      	pop	{r7, pc}
 800441c:	40012c00 	.word	0x40012c00
 8004420:	40021000 	.word	0x40021000
 8004424:	40000400 	.word	0x40000400
 8004428:	48000800 	.word	0x48000800

0800442c <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800442c:	b580      	push	{r7, lr}
 800442e:	b0ae      	sub	sp, #184	@ 0xb8
 8004430:	af00      	add	r7, sp, #0
 8004432:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004434:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8004438:	2200      	movs	r2, #0
 800443a:	601a      	str	r2, [r3, #0]
 800443c:	605a      	str	r2, [r3, #4]
 800443e:	609a      	str	r2, [r3, #8]
 8004440:	60da      	str	r2, [r3, #12]
 8004442:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8004444:	f107 031c 	add.w	r3, r7, #28
 8004448:	2288      	movs	r2, #136	@ 0x88
 800444a:	2100      	movs	r1, #0
 800444c:	4618      	mov	r0, r3
 800444e:	f00c fc49 	bl	8010ce4 <memset>
  if(huart->Instance==UART4)
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	4a56      	ldr	r2, [pc, #344]	@ (80045b0 <HAL_UART_MspInit+0x184>)
 8004458:	4293      	cmp	r3, r2
 800445a:	d13c      	bne.n	80044d6 <HAL_UART_MspInit+0xaa>

    /* USER CODE END UART4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 800445c:	2308      	movs	r3, #8
 800445e:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.Uart4ClockSelection = RCC_UART4CLKSOURCE_PCLK1;
 8004460:	2300      	movs	r3, #0
 8004462:	663b      	str	r3, [r7, #96]	@ 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8004464:	f107 031c 	add.w	r3, r7, #28
 8004468:	4618      	mov	r0, r3
 800446a:	f007 fca1 	bl	800bdb0 <HAL_RCCEx_PeriphCLKConfig>
 800446e:	4603      	mov	r3, r0
 8004470:	2b00      	cmp	r3, #0
 8004472:	d001      	beq.n	8004478 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8004474:	f7ff f888 	bl	8003588 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8004478:	4b4e      	ldr	r3, [pc, #312]	@ (80045b4 <HAL_UART_MspInit+0x188>)
 800447a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800447c:	4a4d      	ldr	r2, [pc, #308]	@ (80045b4 <HAL_UART_MspInit+0x188>)
 800447e:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8004482:	6593      	str	r3, [r2, #88]	@ 0x58
 8004484:	4b4b      	ldr	r3, [pc, #300]	@ (80045b4 <HAL_UART_MspInit+0x188>)
 8004486:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004488:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800448c:	61bb      	str	r3, [r7, #24]
 800448e:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004490:	4b48      	ldr	r3, [pc, #288]	@ (80045b4 <HAL_UART_MspInit+0x188>)
 8004492:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004494:	4a47      	ldr	r2, [pc, #284]	@ (80045b4 <HAL_UART_MspInit+0x188>)
 8004496:	f043 0301 	orr.w	r3, r3, #1
 800449a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800449c:	4b45      	ldr	r3, [pc, #276]	@ (80045b4 <HAL_UART_MspInit+0x188>)
 800449e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80044a0:	f003 0301 	and.w	r3, r3, #1
 80044a4:	617b      	str	r3, [r7, #20]
 80044a6:	697b      	ldr	r3, [r7, #20]
    /**UART4 GPIO Configuration
    PA0     ------> UART4_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80044a8:	2301      	movs	r3, #1
 80044aa:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80044ae:	2312      	movs	r3, #18
 80044b0:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80044b4:	2301      	movs	r3, #1
 80044b6:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80044ba:	2303      	movs	r3, #3
 80044bc:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 80044c0:	2308      	movs	r3, #8
 80044c2:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80044c6:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 80044ca:	4619      	mov	r1, r3
 80044cc:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80044d0:	f005 f9fe 	bl	80098d0 <HAL_GPIO_Init>
    /* USER CODE BEGIN USART1_MspInit 1 */

    /* USER CODE END USART1_MspInit 1 */
  }

}
 80044d4:	e068      	b.n	80045a8 <HAL_UART_MspInit+0x17c>
  else if(huart->Instance==USART1)
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	4a37      	ldr	r2, [pc, #220]	@ (80045b8 <HAL_UART_MspInit+0x18c>)
 80044dc:	4293      	cmp	r3, r2
 80044de:	d163      	bne.n	80045a8 <HAL_UART_MspInit+0x17c>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80044e0:	2301      	movs	r3, #1
 80044e2:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80044e4:	2300      	movs	r3, #0
 80044e6:	657b      	str	r3, [r7, #84]	@ 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80044e8:	f107 031c 	add.w	r3, r7, #28
 80044ec:	4618      	mov	r0, r3
 80044ee:	f007 fc5f 	bl	800bdb0 <HAL_RCCEx_PeriphCLKConfig>
 80044f2:	4603      	mov	r3, r0
 80044f4:	2b00      	cmp	r3, #0
 80044f6:	d001      	beq.n	80044fc <HAL_UART_MspInit+0xd0>
      Error_Handler();
 80044f8:	f7ff f846 	bl	8003588 <Error_Handler>
    __HAL_RCC_USART1_CLK_ENABLE();
 80044fc:	4b2d      	ldr	r3, [pc, #180]	@ (80045b4 <HAL_UART_MspInit+0x188>)
 80044fe:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004500:	4a2c      	ldr	r2, [pc, #176]	@ (80045b4 <HAL_UART_MspInit+0x188>)
 8004502:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8004506:	6613      	str	r3, [r2, #96]	@ 0x60
 8004508:	4b2a      	ldr	r3, [pc, #168]	@ (80045b4 <HAL_UART_MspInit+0x188>)
 800450a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800450c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004510:	613b      	str	r3, [r7, #16]
 8004512:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004514:	4b27      	ldr	r3, [pc, #156]	@ (80045b4 <HAL_UART_MspInit+0x188>)
 8004516:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004518:	4a26      	ldr	r2, [pc, #152]	@ (80045b4 <HAL_UART_MspInit+0x188>)
 800451a:	f043 0302 	orr.w	r3, r3, #2
 800451e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8004520:	4b24      	ldr	r3, [pc, #144]	@ (80045b4 <HAL_UART_MspInit+0x188>)
 8004522:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004524:	f003 0302 	and.w	r3, r3, #2
 8004528:	60fb      	str	r3, [r7, #12]
 800452a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_6|GPIO_PIN_7;
 800452c:	23d8      	movs	r3, #216	@ 0xd8
 800452e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004532:	2302      	movs	r3, #2
 8004534:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004538:	2300      	movs	r3, #0
 800453a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800453e:	2303      	movs	r3, #3
 8004540:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8004544:	2307      	movs	r3, #7
 8004546:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800454a:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 800454e:	4619      	mov	r1, r3
 8004550:	481a      	ldr	r0, [pc, #104]	@ (80045bc <HAL_UART_MspInit+0x190>)
 8004552:	f005 f9bd 	bl	80098d0 <HAL_GPIO_Init>
    hdma_usart1_rx.Instance = DMA1_Channel5;
 8004556:	4b1a      	ldr	r3, [pc, #104]	@ (80045c0 <HAL_UART_MspInit+0x194>)
 8004558:	4a1a      	ldr	r2, [pc, #104]	@ (80045c4 <HAL_UART_MspInit+0x198>)
 800455a:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Request = DMA_REQUEST_2;
 800455c:	4b18      	ldr	r3, [pc, #96]	@ (80045c0 <HAL_UART_MspInit+0x194>)
 800455e:	2202      	movs	r2, #2
 8004560:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8004562:	4b17      	ldr	r3, [pc, #92]	@ (80045c0 <HAL_UART_MspInit+0x194>)
 8004564:	2200      	movs	r2, #0
 8004566:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004568:	4b15      	ldr	r3, [pc, #84]	@ (80045c0 <HAL_UART_MspInit+0x194>)
 800456a:	2200      	movs	r2, #0
 800456c:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 800456e:	4b14      	ldr	r3, [pc, #80]	@ (80045c0 <HAL_UART_MspInit+0x194>)
 8004570:	2280      	movs	r2, #128	@ 0x80
 8004572:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8004574:	4b12      	ldr	r3, [pc, #72]	@ (80045c0 <HAL_UART_MspInit+0x194>)
 8004576:	2200      	movs	r2, #0
 8004578:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800457a:	4b11      	ldr	r3, [pc, #68]	@ (80045c0 <HAL_UART_MspInit+0x194>)
 800457c:	2200      	movs	r2, #0
 800457e:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 8004580:	4b0f      	ldr	r3, [pc, #60]	@ (80045c0 <HAL_UART_MspInit+0x194>)
 8004582:	2200      	movs	r2, #0
 8004584:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8004586:	4b0e      	ldr	r3, [pc, #56]	@ (80045c0 <HAL_UART_MspInit+0x194>)
 8004588:	2200      	movs	r2, #0
 800458a:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 800458c:	480c      	ldr	r0, [pc, #48]	@ (80045c0 <HAL_UART_MspInit+0x194>)
 800458e:	f004 ff69 	bl	8009464 <HAL_DMA_Init>
 8004592:	4603      	mov	r3, r0
 8004594:	2b00      	cmp	r3, #0
 8004596:	d001      	beq.n	800459c <HAL_UART_MspInit+0x170>
      Error_Handler();
 8004598:	f7fe fff6 	bl	8003588 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	4a08      	ldr	r2, [pc, #32]	@ (80045c0 <HAL_UART_MspInit+0x194>)
 80045a0:	675a      	str	r2, [r3, #116]	@ 0x74
 80045a2:	4a07      	ldr	r2, [pc, #28]	@ (80045c0 <HAL_UART_MspInit+0x194>)
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	6293      	str	r3, [r2, #40]	@ 0x28
}
 80045a8:	bf00      	nop
 80045aa:	37b8      	adds	r7, #184	@ 0xb8
 80045ac:	46bd      	mov	sp, r7
 80045ae:	bd80      	pop	{r7, pc}
 80045b0:	40004c00 	.word	0x40004c00
 80045b4:	40021000 	.word	0x40021000
 80045b8:	40013800 	.word	0x40013800
 80045bc:	48000400 	.word	0x48000400
 80045c0:	20000524 	.word	0x20000524
 80045c4:	40020058 	.word	0x40020058

080045c8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80045c8:	b480      	push	{r7}
 80045ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80045cc:	bf00      	nop
 80045ce:	e7fd      	b.n	80045cc <NMI_Handler+0x4>

080045d0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80045d0:	b480      	push	{r7}
 80045d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80045d4:	bf00      	nop
 80045d6:	e7fd      	b.n	80045d4 <HardFault_Handler+0x4>

080045d8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80045d8:	b480      	push	{r7}
 80045da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80045dc:	bf00      	nop
 80045de:	e7fd      	b.n	80045dc <MemManage_Handler+0x4>

080045e0 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80045e0:	b480      	push	{r7}
 80045e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80045e4:	bf00      	nop
 80045e6:	e7fd      	b.n	80045e4 <BusFault_Handler+0x4>

080045e8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80045e8:	b480      	push	{r7}
 80045ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80045ec:	bf00      	nop
 80045ee:	e7fd      	b.n	80045ec <UsageFault_Handler+0x4>

080045f0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80045f0:	b480      	push	{r7}
 80045f2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80045f4:	bf00      	nop
 80045f6:	46bd      	mov	sp, r7
 80045f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045fc:	4770      	bx	lr

080045fe <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80045fe:	b480      	push	{r7}
 8004600:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8004602:	bf00      	nop
 8004604:	46bd      	mov	sp, r7
 8004606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800460a:	4770      	bx	lr

0800460c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800460c:	b480      	push	{r7}
 800460e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8004610:	bf00      	nop
 8004612:	46bd      	mov	sp, r7
 8004614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004618:	4770      	bx	lr

0800461a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800461a:	b580      	push	{r7, lr}
 800461c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800461e:	f003 f93f 	bl	80078a0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8004622:	bf00      	nop
 8004624:	bd80      	pop	{r7, pc}
	...

08004628 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8004628:	b580      	push	{r7, lr}
 800462a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 800462c:	4802      	ldr	r0, [pc, #8]	@ (8004638 <DMA1_Channel1_IRQHandler+0x10>)
 800462e:	f005 f86f 	bl	8009710 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8004632:	bf00      	nop
 8004634:	bd80      	pop	{r7, pc}
 8004636:	bf00      	nop
 8004638:	200000f4 	.word	0x200000f4

0800463c <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 800463c:	b580      	push	{r7, lr}
 800463e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8004640:	4802      	ldr	r0, [pc, #8]	@ (800464c <DMA1_Channel5_IRQHandler+0x10>)
 8004642:	f005 f865 	bl	8009710 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 8004646:	bf00      	nop
 8004648:	bd80      	pop	{r7, pc}
 800464a:	bf00      	nop
 800464c:	20000524 	.word	0x20000524

08004650 <RTC_Alarm_IRQHandler>:

/**
  * @brief This function handles RTC alarm interrupt through EXTI line 18.
  */
void RTC_Alarm_IRQHandler(void)
{
 8004650:	b580      	push	{r7, lr}
 8004652:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_Alarm_IRQn 0 */

  /* USER CODE END RTC_Alarm_IRQn 0 */
  HAL_RTC_AlarmIRQHandler(&hrtc);
 8004654:	4802      	ldr	r0, [pc, #8]	@ (8004660 <RTC_Alarm_IRQHandler+0x10>)
 8004656:	f008 fbab 	bl	800cdb0 <HAL_RTC_AlarmIRQHandler>
  /* USER CODE BEGIN RTC_Alarm_IRQn 1 */

  /* USER CODE END RTC_Alarm_IRQn 1 */
}
 800465a:	bf00      	nop
 800465c:	bd80      	pop	{r7, pc}
 800465e:	bf00      	nop
 8004660:	200001f8 	.word	0x200001f8

08004664 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8004664:	b580      	push	{r7, lr}
 8004666:	b086      	sub	sp, #24
 8004668:	af00      	add	r7, sp, #0
 800466a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800466c:	4a14      	ldr	r2, [pc, #80]	@ (80046c0 <_sbrk+0x5c>)
 800466e:	4b15      	ldr	r3, [pc, #84]	@ (80046c4 <_sbrk+0x60>)
 8004670:	1ad3      	subs	r3, r2, r3
 8004672:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8004674:	697b      	ldr	r3, [r7, #20]
 8004676:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8004678:	4b13      	ldr	r3, [pc, #76]	@ (80046c8 <_sbrk+0x64>)
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	2b00      	cmp	r3, #0
 800467e:	d102      	bne.n	8004686 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8004680:	4b11      	ldr	r3, [pc, #68]	@ (80046c8 <_sbrk+0x64>)
 8004682:	4a12      	ldr	r2, [pc, #72]	@ (80046cc <_sbrk+0x68>)
 8004684:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8004686:	4b10      	ldr	r3, [pc, #64]	@ (80046c8 <_sbrk+0x64>)
 8004688:	681a      	ldr	r2, [r3, #0]
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	4413      	add	r3, r2
 800468e:	693a      	ldr	r2, [r7, #16]
 8004690:	429a      	cmp	r2, r3
 8004692:	d207      	bcs.n	80046a4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8004694:	f00c fb64 	bl	8010d60 <__errno>
 8004698:	4603      	mov	r3, r0
 800469a:	220c      	movs	r2, #12
 800469c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800469e:	f04f 33ff 	mov.w	r3, #4294967295
 80046a2:	e009      	b.n	80046b8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80046a4:	4b08      	ldr	r3, [pc, #32]	@ (80046c8 <_sbrk+0x64>)
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80046aa:	4b07      	ldr	r3, [pc, #28]	@ (80046c8 <_sbrk+0x64>)
 80046ac:	681a      	ldr	r2, [r3, #0]
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	4413      	add	r3, r2
 80046b2:	4a05      	ldr	r2, [pc, #20]	@ (80046c8 <_sbrk+0x64>)
 80046b4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80046b6:	68fb      	ldr	r3, [r7, #12]
}
 80046b8:	4618      	mov	r0, r3
 80046ba:	3718      	adds	r7, #24
 80046bc:	46bd      	mov	sp, r7
 80046be:	bd80      	pop	{r7, pc}
 80046c0:	20018000 	.word	0x20018000
 80046c4:	00000400 	.word	0x00000400
 80046c8:	200073b4 	.word	0x200073b4
 80046cc:	20007510 	.word	0x20007510

080046d0 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80046d0:	b480      	push	{r7}
 80046d2:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80046d4:	4b06      	ldr	r3, [pc, #24]	@ (80046f0 <SystemInit+0x20>)
 80046d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80046da:	4a05      	ldr	r2, [pc, #20]	@ (80046f0 <SystemInit+0x20>)
 80046dc:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80046e0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 80046e4:	bf00      	nop
 80046e6:	46bd      	mov	sp, r7
 80046e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046ec:	4770      	bx	lr
 80046ee:	bf00      	nop
 80046f0:	e000ed00 	.word	0xe000ed00

080046f4 <disk_status>:
/*-----------------------------------------------------------------------*/

DSTATUS disk_status (
	BYTE pdrv		/* Physical drive nmuber to identify the drive */
)
{
 80046f4:	b580      	push	{r7, lr}
 80046f6:	b084      	sub	sp, #16
 80046f8:	af00      	add	r7, sp, #0
 80046fa:	4603      	mov	r3, r0
 80046fc:	71fb      	strb	r3, [r7, #7]
	DSTATUS stat;

	switch (pdrv) {
 80046fe:	79fb      	ldrb	r3, [r7, #7]
 8004700:	2b00      	cmp	r3, #0
 8004702:	d002      	beq.n	800470a <disk_status+0x16>
 8004704:	2b01      	cmp	r3, #1
 8004706:	d00c      	beq.n	8004722 <disk_status+0x2e>
 8004708:	e017      	b.n	800473a <disk_status+0x46>
	case DEV_RAM :

		if(!psram_is_initialized())
 800470a:	f7ff facf 	bl	8003cac <psram_is_initialized>
 800470e:	4603      	mov	r3, r0
 8004710:	2b00      	cmp	r3, #0
 8004712:	d102      	bne.n	800471a <disk_status+0x26>
		{
			stat = STA_NOINIT;
 8004714:	2301      	movs	r3, #1
 8004716:	73fb      	strb	r3, [r7, #15]
 8004718:	e001      	b.n	800471e <disk_status+0x2a>
		}else{
			stat = 0;
 800471a:	2300      	movs	r3, #0
 800471c:	73fb      	strb	r3, [r7, #15]
		}

		return stat;
 800471e:	7bfb      	ldrb	r3, [r7, #15]
 8004720:	e00c      	b.n	800473c <disk_status+0x48>

	case DEV_MMC :

		if(!extflash_is_initialized())
 8004722:	f7fd f8b1 	bl	8001888 <extflash_is_initialized>
 8004726:	4603      	mov	r3, r0
 8004728:	2b00      	cmp	r3, #0
 800472a:	d102      	bne.n	8004732 <disk_status+0x3e>
		{
			stat = STA_NOINIT;
 800472c:	2301      	movs	r3, #1
 800472e:	73fb      	strb	r3, [r7, #15]
 8004730:	e001      	b.n	8004736 <disk_status+0x42>
		}else{
			stat = 0;
 8004732:	2300      	movs	r3, #0
 8004734:	73fb      	strb	r3, [r7, #15]
		}

		return stat;
 8004736:	7bfb      	ldrb	r3, [r7, #15]
 8004738:	e000      	b.n	800473c <disk_status+0x48>

	}
	return STA_NOINIT;
 800473a:	2301      	movs	r3, #1
}
 800473c:	4618      	mov	r0, r3
 800473e:	3710      	adds	r7, #16
 8004740:	46bd      	mov	sp, r7
 8004742:	bd80      	pop	{r7, pc}

08004744 <disk_initialize>:
/*-----------------------------------------------------------------------*/

DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8004744:	b580      	push	{r7, lr}
 8004746:	b084      	sub	sp, #16
 8004748:	af00      	add	r7, sp, #0
 800474a:	4603      	mov	r3, r0
 800474c:	71fb      	strb	r3, [r7, #7]
	DSTATUS stat;
	switch (pdrv) {
 800474e:	79fb      	ldrb	r3, [r7, #7]
 8004750:	2b00      	cmp	r3, #0
 8004752:	d002      	beq.n	800475a <disk_initialize+0x16>
 8004754:	2b01      	cmp	r3, #1
 8004756:	d00c      	beq.n	8004772 <disk_initialize+0x2e>
 8004758:	e017      	b.n	800478a <disk_initialize+0x46>
	case DEV_RAM :

		if(psram_init() < 0)
 800475a:	f7ff fac9 	bl	8003cf0 <psram_init>
 800475e:	4603      	mov	r3, r0
 8004760:	2b00      	cmp	r3, #0
 8004762:	da02      	bge.n	800476a <disk_initialize+0x26>
		{
			stat = STA_NODISK;
 8004764:	2302      	movs	r3, #2
 8004766:	73fb      	strb	r3, [r7, #15]
 8004768:	e001      	b.n	800476e <disk_initialize+0x2a>
		}else{
			stat = 0;
 800476a:	2300      	movs	r3, #0
 800476c:	73fb      	strb	r3, [r7, #15]
		}

		return stat;
 800476e:	7bfb      	ldrb	r3, [r7, #15]
 8004770:	e00c      	b.n	800478c <disk_initialize+0x48>

	case DEV_MMC :

		if(extflash_init() < 0)
 8004772:	f7fd f895 	bl	80018a0 <extflash_init>
 8004776:	4603      	mov	r3, r0
 8004778:	2b00      	cmp	r3, #0
 800477a:	da02      	bge.n	8004782 <disk_initialize+0x3e>
		{
			stat = STA_NODISK;
 800477c:	2302      	movs	r3, #2
 800477e:	73fb      	strb	r3, [r7, #15]
 8004780:	e001      	b.n	8004786 <disk_initialize+0x42>
		}else{
			stat = 0;
 8004782:	2300      	movs	r3, #0
 8004784:	73fb      	strb	r3, [r7, #15]
		}

		return stat;
 8004786:	7bfb      	ldrb	r3, [r7, #15]
 8004788:	e000      	b.n	800478c <disk_initialize+0x48>

	}
	return STA_NOINIT;
 800478a:	2301      	movs	r3, #1
}
 800478c:	4618      	mov	r0, r3
 800478e:	3710      	adds	r7, #16
 8004790:	46bd      	mov	sp, r7
 8004792:	bd80      	pop	{r7, pc}

08004794 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	LBA_t sector,	/* Start sector in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8004794:	b580      	push	{r7, lr}
 8004796:	b086      	sub	sp, #24
 8004798:	af00      	add	r7, sp, #0
 800479a:	60b9      	str	r1, [r7, #8]
 800479c:	607a      	str	r2, [r7, #4]
 800479e:	603b      	str	r3, [r7, #0]
 80047a0:	4603      	mov	r3, r0
 80047a2:	73fb      	strb	r3, [r7, #15]
	DRESULT res;
	int result;

	switch (pdrv) {
 80047a4:	7bfb      	ldrb	r3, [r7, #15]
 80047a6:	2b00      	cmp	r3, #0
 80047a8:	d002      	beq.n	80047b0 <disk_read+0x1c>
 80047aa:	2b01      	cmp	r3, #1
 80047ac:	d010      	beq.n	80047d0 <disk_read+0x3c>
 80047ae:	e01e      	b.n	80047ee <disk_read+0x5a>
	case DEV_RAM :

		if(psram_sector_read_write(0, sector, count, buff) < 0)
 80047b0:	68bb      	ldr	r3, [r7, #8]
 80047b2:	683a      	ldr	r2, [r7, #0]
 80047b4:	6879      	ldr	r1, [r7, #4]
 80047b6:	2000      	movs	r0, #0
 80047b8:	f7ff fa46 	bl	8003c48 <psram_sector_read_write>
 80047bc:	4603      	mov	r3, r0
 80047be:	2b00      	cmp	r3, #0
 80047c0:	da02      	bge.n	80047c8 <disk_read+0x34>
		{
			res = RES_ERROR;
 80047c2:	2301      	movs	r3, #1
 80047c4:	75fb      	strb	r3, [r7, #23]
 80047c6:	e001      	b.n	80047cc <disk_read+0x38>
		}else{

			res = 0;
 80047c8:	2300      	movs	r3, #0
 80047ca:	75fb      	strb	r3, [r7, #23]
		}

		return res;
 80047cc:	7dfb      	ldrb	r3, [r7, #23]
 80047ce:	e00f      	b.n	80047f0 <disk_read+0x5c>

	case DEV_MMC :

		if(extflash_sector_read(sector, count, buff) < 0)
 80047d0:	68ba      	ldr	r2, [r7, #8]
 80047d2:	6839      	ldr	r1, [r7, #0]
 80047d4:	6878      	ldr	r0, [r7, #4]
 80047d6:	f7fc ff3b 	bl	8001650 <extflash_sector_read>
 80047da:	4603      	mov	r3, r0
 80047dc:	2b00      	cmp	r3, #0
 80047de:	da02      	bge.n	80047e6 <disk_read+0x52>
		{
			res = RES_ERROR;
 80047e0:	2301      	movs	r3, #1
 80047e2:	75fb      	strb	r3, [r7, #23]
 80047e4:	e001      	b.n	80047ea <disk_read+0x56>
		}else{

			res = 0;
 80047e6:	2300      	movs	r3, #0
 80047e8:	75fb      	strb	r3, [r7, #23]
		}

		return res;
 80047ea:	7dfb      	ldrb	r3, [r7, #23]
 80047ec:	e000      	b.n	80047f0 <disk_read+0x5c>

	}

	return RES_PARERR;
 80047ee:	2304      	movs	r3, #4
}
 80047f0:	4618      	mov	r0, r3
 80047f2:	3718      	adds	r7, #24
 80047f4:	46bd      	mov	sp, r7
 80047f6:	bd80      	pop	{r7, pc}

080047f8 <disk_write>:
	BYTE pdrv,			/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	LBA_t sector,		/* Start sector in LBA */
	UINT count			/* Number of sectors to write */
)
{
 80047f8:	b580      	push	{r7, lr}
 80047fa:	b086      	sub	sp, #24
 80047fc:	af00      	add	r7, sp, #0
 80047fe:	60b9      	str	r1, [r7, #8]
 8004800:	607a      	str	r2, [r7, #4]
 8004802:	603b      	str	r3, [r7, #0]
 8004804:	4603      	mov	r3, r0
 8004806:	73fb      	strb	r3, [r7, #15]
	DRESULT res = RES_ERROR;
 8004808:	2301      	movs	r3, #1
 800480a:	75fb      	strb	r3, [r7, #23]

	switch (pdrv) {
 800480c:	7bfb      	ldrb	r3, [r7, #15]
 800480e:	2b00      	cmp	r3, #0
 8004810:	d002      	beq.n	8004818 <disk_write+0x20>
 8004812:	2b01      	cmp	r3, #1
 8004814:	d010      	beq.n	8004838 <disk_write+0x40>
 8004816:	e01e      	b.n	8004856 <disk_write+0x5e>
	case DEV_RAM :

		if(psram_sector_read_write(1, sector, count, (const uint8_t *)buff) < 0)
 8004818:	68bb      	ldr	r3, [r7, #8]
 800481a:	683a      	ldr	r2, [r7, #0]
 800481c:	6879      	ldr	r1, [r7, #4]
 800481e:	2001      	movs	r0, #1
 8004820:	f7ff fa12 	bl	8003c48 <psram_sector_read_write>
 8004824:	4603      	mov	r3, r0
 8004826:	2b00      	cmp	r3, #0
 8004828:	da02      	bge.n	8004830 <disk_write+0x38>
		{
			res = RES_ERROR;
 800482a:	2301      	movs	r3, #1
 800482c:	75fb      	strb	r3, [r7, #23]
 800482e:	e001      	b.n	8004834 <disk_write+0x3c>
		}else{

			res = 0;
 8004830:	2300      	movs	r3, #0
 8004832:	75fb      	strb	r3, [r7, #23]
		}

		return res;
 8004834:	7dfb      	ldrb	r3, [r7, #23]
 8004836:	e00f      	b.n	8004858 <disk_write+0x60>

	case DEV_MMC :

		if(extflash_sector_write(sector, count, buff) < 0)
 8004838:	68ba      	ldr	r2, [r7, #8]
 800483a:	6839      	ldr	r1, [r7, #0]
 800483c:	6878      	ldr	r0, [r7, #4]
 800483e:	f7fc ff9c 	bl	800177a <extflash_sector_write>
 8004842:	4603      	mov	r3, r0
 8004844:	2b00      	cmp	r3, #0
 8004846:	da02      	bge.n	800484e <disk_write+0x56>
		{
			res = RES_ERROR;
 8004848:	2301      	movs	r3, #1
 800484a:	75fb      	strb	r3, [r7, #23]
 800484c:	e001      	b.n	8004852 <disk_write+0x5a>
		}else{

			res = 0;
 800484e:	2300      	movs	r3, #0
 8004850:	75fb      	strb	r3, [r7, #23]
		}

		return res;
 8004852:	7dfb      	ldrb	r3, [r7, #23]
 8004854:	e000      	b.n	8004858 <disk_write+0x60>

	}

	return RES_PARERR;
 8004856:	2304      	movs	r3, #4
}
 8004858:	4618      	mov	r0, r3
 800485a:	3718      	adds	r7, #24
 800485c:	46bd      	mov	sp, r7
 800485e:	bd80      	pop	{r7, pc}

08004860 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 8004860:	b580      	push	{r7, lr}
 8004862:	b084      	sub	sp, #16
 8004864:	af00      	add	r7, sp, #0
 8004866:	4603      	mov	r3, r0
 8004868:	603a      	str	r2, [r7, #0]
 800486a:	71fb      	strb	r3, [r7, #7]
 800486c:	460b      	mov	r3, r1
 800486e:	71bb      	strb	r3, [r7, #6]
	DRESULT res = RES_PARERR;
 8004870:	2304      	movs	r3, #4
 8004872:	73fb      	strb	r3, [r7, #15]

	switch (pdrv) {
 8004874:	79fb      	ldrb	r3, [r7, #7]
 8004876:	2b00      	cmp	r3, #0
 8004878:	d002      	beq.n	8004880 <disk_ioctl+0x20>
 800487a:	2b01      	cmp	r3, #1
 800487c:	d036      	beq.n	80048ec <disk_ioctl+0x8c>
 800487e:	e06b      	b.n	8004958 <disk_ioctl+0xf8>
	case DEV_RAM :

		if(!psram_is_initialized())return RES_NOTRDY;
 8004880:	f7ff fa14 	bl	8003cac <psram_is_initialized>
 8004884:	4603      	mov	r3, r0
 8004886:	2b00      	cmp	r3, #0
 8004888:	d101      	bne.n	800488e <disk_ioctl+0x2e>
 800488a:	2303      	movs	r3, #3
 800488c:	e065      	b.n	800495a <disk_ioctl+0xfa>

		switch(cmd)
 800488e:	79bb      	ldrb	r3, [r7, #6]
 8004890:	2b04      	cmp	r3, #4
 8004892:	d826      	bhi.n	80048e2 <disk_ioctl+0x82>
 8004894:	a201      	add	r2, pc, #4	@ (adr r2, 800489c <disk_ioctl+0x3c>)
 8004896:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800489a:	bf00      	nop
 800489c:	080048dd 	.word	0x080048dd
 80048a0:	080048b1 	.word	0x080048b1
 80048a4:	080048c1 	.word	0x080048c1
 80048a8:	080048d1 	.word	0x080048d1
 80048ac:	080048dd 	.word	0x080048dd
		{
			case GET_SECTOR_COUNT:

				*((uint32_t *)buff) = psram_get_sector_count();
 80048b0:	f7ff fa12 	bl	8003cd8 <psram_get_sector_count>
 80048b4:	4602      	mov	r2, r0
 80048b6:	683b      	ldr	r3, [r7, #0]
 80048b8:	601a      	str	r2, [r3, #0]
				res = 0;
 80048ba:	2300      	movs	r3, #0
 80048bc:	73fb      	strb	r3, [r7, #15]
				break;
 80048be:	e013      	b.n	80048e8 <disk_ioctl+0x88>

			case GET_SECTOR_SIZE:

				*((uint32_t *)buff) = psram_get_sector_size();
 80048c0:	f7ff fa00 	bl	8003cc4 <psram_get_sector_size>
 80048c4:	4602      	mov	r2, r0
 80048c6:	683b      	ldr	r3, [r7, #0]
 80048c8:	601a      	str	r2, [r3, #0]
				res = 0;
 80048ca:	2300      	movs	r3, #0
 80048cc:	73fb      	strb	r3, [r7, #15]
				break;
 80048ce:	e00b      	b.n	80048e8 <disk_ioctl+0x88>

			case GET_BLOCK_SIZE:

				*((uint32_t *)buff) = 1; //Default
 80048d0:	683b      	ldr	r3, [r7, #0]
 80048d2:	2201      	movs	r2, #1
 80048d4:	601a      	str	r2, [r3, #0]
				res = 0;
 80048d6:	2300      	movs	r3, #0
 80048d8:	73fb      	strb	r3, [r7, #15]
				break;
 80048da:	e005      	b.n	80048e8 <disk_ioctl+0x88>

			case CTRL_TRIM:
			case CTRL_SYNC:

				res = 0;
 80048dc:	2300      	movs	r3, #0
 80048de:	73fb      	strb	r3, [r7, #15]
				break;
 80048e0:	e002      	b.n	80048e8 <disk_ioctl+0x88>

			default:
				res = RES_PARERR;
 80048e2:	2304      	movs	r3, #4
 80048e4:	73fb      	strb	r3, [r7, #15]
				break;
 80048e6:	bf00      	nop
		}

		return res;
 80048e8:	7bfb      	ldrb	r3, [r7, #15]
 80048ea:	e036      	b.n	800495a <disk_ioctl+0xfa>

	case DEV_MMC :

		if(!extflash_is_initialized())return RES_NOTRDY;
 80048ec:	f7fc ffcc 	bl	8001888 <extflash_is_initialized>
 80048f0:	4603      	mov	r3, r0
 80048f2:	2b00      	cmp	r3, #0
 80048f4:	d101      	bne.n	80048fa <disk_ioctl+0x9a>
 80048f6:	2303      	movs	r3, #3
 80048f8:	e02f      	b.n	800495a <disk_ioctl+0xfa>

		switch(cmd)
 80048fa:	79bb      	ldrb	r3, [r7, #6]
 80048fc:	2b04      	cmp	r3, #4
 80048fe:	d826      	bhi.n	800494e <disk_ioctl+0xee>
 8004900:	a201      	add	r2, pc, #4	@ (adr r2, 8004908 <disk_ioctl+0xa8>)
 8004902:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004906:	bf00      	nop
 8004908:	08004949 	.word	0x08004949
 800490c:	0800491d 	.word	0x0800491d
 8004910:	0800492d 	.word	0x0800492d
 8004914:	0800493d 	.word	0x0800493d
 8004918:	08004949 	.word	0x08004949
		{
			case GET_SECTOR_COUNT:

				*((uint32_t *)buff) = extflash_get_sector_count();
 800491c:	f7fc ffa8 	bl	8001870 <extflash_get_sector_count>
 8004920:	4602      	mov	r2, r0
 8004922:	683b      	ldr	r3, [r7, #0]
 8004924:	601a      	str	r2, [r3, #0]
				res = 0;
 8004926:	2300      	movs	r3, #0
 8004928:	73fb      	strb	r3, [r7, #15]
				break;
 800492a:	e013      	b.n	8004954 <disk_ioctl+0xf4>

			case GET_SECTOR_SIZE:

				*((uint32_t *)buff) = extflash_get_sector_size();
 800492c:	f7fc ff97 	bl	800185e <extflash_get_sector_size>
 8004930:	4602      	mov	r2, r0
 8004932:	683b      	ldr	r3, [r7, #0]
 8004934:	601a      	str	r2, [r3, #0]
				res = 0;
 8004936:	2300      	movs	r3, #0
 8004938:	73fb      	strb	r3, [r7, #15]
				break;
 800493a:	e00b      	b.n	8004954 <disk_ioctl+0xf4>

			case GET_BLOCK_SIZE:

				*((uint32_t *)buff) = 1; //Default
 800493c:	683b      	ldr	r3, [r7, #0]
 800493e:	2201      	movs	r2, #1
 8004940:	601a      	str	r2, [r3, #0]
				res = 0;
 8004942:	2300      	movs	r3, #0
 8004944:	73fb      	strb	r3, [r7, #15]
				break;
 8004946:	e005      	b.n	8004954 <disk_ioctl+0xf4>

			case CTRL_TRIM:
			case CTRL_SYNC:

				res = 0;
 8004948:	2300      	movs	r3, #0
 800494a:	73fb      	strb	r3, [r7, #15]
				break;
 800494c:	e002      	b.n	8004954 <disk_ioctl+0xf4>

			default:
				res = RES_PARERR;
 800494e:	2304      	movs	r3, #4
 8004950:	73fb      	strb	r3, [r7, #15]
				break;
 8004952:	bf00      	nop
		}

		return res;
 8004954:	7bfb      	ldrb	r3, [r7, #15]
 8004956:	e000      	b.n	800495a <disk_ioctl+0xfa>

	}

	return RES_PARERR;
 8004958:	2304      	movs	r3, #4
}
 800495a:	4618      	mov	r0, r3
 800495c:	3710      	adds	r7, #16
 800495e:	46bd      	mov	sp, r7
 8004960:	bd80      	pop	{r7, pc}
 8004962:	bf00      	nop

08004964 <ld_word>:
/*-----------------------------------------------------------------------*/
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 8004964:	b480      	push	{r7}
 8004966:	b085      	sub	sp, #20
 8004968:	af00      	add	r7, sp, #0
 800496a:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	3301      	adds	r3, #1
 8004970:	781b      	ldrb	r3, [r3, #0]
 8004972:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 8004974:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8004978:	021b      	lsls	r3, r3, #8
 800497a:	b21a      	sxth	r2, r3
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	781b      	ldrb	r3, [r3, #0]
 8004980:	b21b      	sxth	r3, r3
 8004982:	4313      	orrs	r3, r2
 8004984:	b21b      	sxth	r3, r3
 8004986:	81fb      	strh	r3, [r7, #14]
	return rv;
 8004988:	89fb      	ldrh	r3, [r7, #14]
}
 800498a:	4618      	mov	r0, r3
 800498c:	3714      	adds	r7, #20
 800498e:	46bd      	mov	sp, r7
 8004990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004994:	4770      	bx	lr

08004996 <ld_dword>:

static DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 8004996:	b480      	push	{r7}
 8004998:	b085      	sub	sp, #20
 800499a:	af00      	add	r7, sp, #0
 800499c:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	3303      	adds	r3, #3
 80049a2:	781b      	ldrb	r3, [r3, #0]
 80049a4:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 80049a6:	68fb      	ldr	r3, [r7, #12]
 80049a8:	021b      	lsls	r3, r3, #8
 80049aa:	687a      	ldr	r2, [r7, #4]
 80049ac:	3202      	adds	r2, #2
 80049ae:	7812      	ldrb	r2, [r2, #0]
 80049b0:	4313      	orrs	r3, r2
 80049b2:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 80049b4:	68fb      	ldr	r3, [r7, #12]
 80049b6:	021b      	lsls	r3, r3, #8
 80049b8:	687a      	ldr	r2, [r7, #4]
 80049ba:	3201      	adds	r2, #1
 80049bc:	7812      	ldrb	r2, [r2, #0]
 80049be:	4313      	orrs	r3, r2
 80049c0:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 80049c2:	68fb      	ldr	r3, [r7, #12]
 80049c4:	021b      	lsls	r3, r3, #8
 80049c6:	687a      	ldr	r2, [r7, #4]
 80049c8:	7812      	ldrb	r2, [r2, #0]
 80049ca:	4313      	orrs	r3, r2
 80049cc:	60fb      	str	r3, [r7, #12]
	return rv;
 80049ce:	68fb      	ldr	r3, [r7, #12]
}
 80049d0:	4618      	mov	r0, r3
 80049d2:	3714      	adds	r7, #20
 80049d4:	46bd      	mov	sp, r7
 80049d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049da:	4770      	bx	lr

080049dc <st_word>:
}
#endif

#if !FF_FS_READONLY
static void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 80049dc:	b480      	push	{r7}
 80049de:	b083      	sub	sp, #12
 80049e0:	af00      	add	r7, sp, #0
 80049e2:	6078      	str	r0, [r7, #4]
 80049e4:	460b      	mov	r3, r1
 80049e6:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	1c5a      	adds	r2, r3, #1
 80049ec:	607a      	str	r2, [r7, #4]
 80049ee:	887a      	ldrh	r2, [r7, #2]
 80049f0:	b2d2      	uxtb	r2, r2
 80049f2:	701a      	strb	r2, [r3, #0]
 80049f4:	887b      	ldrh	r3, [r7, #2]
 80049f6:	0a1b      	lsrs	r3, r3, #8
 80049f8:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	1c5a      	adds	r2, r3, #1
 80049fe:	607a      	str	r2, [r7, #4]
 8004a00:	887a      	ldrh	r2, [r7, #2]
 8004a02:	b2d2      	uxtb	r2, r2
 8004a04:	701a      	strb	r2, [r3, #0]
}
 8004a06:	bf00      	nop
 8004a08:	370c      	adds	r7, #12
 8004a0a:	46bd      	mov	sp, r7
 8004a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a10:	4770      	bx	lr

08004a12 <st_dword>:

static void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 8004a12:	b480      	push	{r7}
 8004a14:	b083      	sub	sp, #12
 8004a16:	af00      	add	r7, sp, #0
 8004a18:	6078      	str	r0, [r7, #4]
 8004a1a:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	1c5a      	adds	r2, r3, #1
 8004a20:	607a      	str	r2, [r7, #4]
 8004a22:	683a      	ldr	r2, [r7, #0]
 8004a24:	b2d2      	uxtb	r2, r2
 8004a26:	701a      	strb	r2, [r3, #0]
 8004a28:	683b      	ldr	r3, [r7, #0]
 8004a2a:	0a1b      	lsrs	r3, r3, #8
 8004a2c:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	1c5a      	adds	r2, r3, #1
 8004a32:	607a      	str	r2, [r7, #4]
 8004a34:	683a      	ldr	r2, [r7, #0]
 8004a36:	b2d2      	uxtb	r2, r2
 8004a38:	701a      	strb	r2, [r3, #0]
 8004a3a:	683b      	ldr	r3, [r7, #0]
 8004a3c:	0a1b      	lsrs	r3, r3, #8
 8004a3e:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	1c5a      	adds	r2, r3, #1
 8004a44:	607a      	str	r2, [r7, #4]
 8004a46:	683a      	ldr	r2, [r7, #0]
 8004a48:	b2d2      	uxtb	r2, r2
 8004a4a:	701a      	strb	r2, [r3, #0]
 8004a4c:	683b      	ldr	r3, [r7, #0]
 8004a4e:	0a1b      	lsrs	r3, r3, #8
 8004a50:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	1c5a      	adds	r2, r3, #1
 8004a56:	607a      	str	r2, [r7, #4]
 8004a58:	683a      	ldr	r2, [r7, #0]
 8004a5a:	b2d2      	uxtb	r2, r2
 8004a5c:	701a      	strb	r2, [r3, #0]
}
 8004a5e:	bf00      	nop
 8004a60:	370c      	adds	r7, #12
 8004a62:	46bd      	mov	sp, r7
 8004a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a68:	4770      	bx	lr

08004a6a <dbc_1st>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Test if the byte is DBC 1st byte */
static int dbc_1st (BYTE c)
{
 8004a6a:	b480      	push	{r7}
 8004a6c:	b083      	sub	sp, #12
 8004a6e:	af00      	add	r7, sp, #0
 8004a70:	4603      	mov	r3, r0
 8004a72:	71fb      	strb	r3, [r7, #7]
	if (c >= DbcTbl[0]) {
		if (c <= DbcTbl[1]) return 1;
		if (c >= DbcTbl[2] && c <= DbcTbl[3]) return 1;
	}
#else						/* SBCS fixed code page */
	if (c != 0) return 0;	/* Always false */
 8004a74:	79fb      	ldrb	r3, [r7, #7]
 8004a76:	2b00      	cmp	r3, #0
 8004a78:	d001      	beq.n	8004a7e <dbc_1st+0x14>
 8004a7a:	2300      	movs	r3, #0
 8004a7c:	e000      	b.n	8004a80 <dbc_1st+0x16>
#endif
	return 0;
 8004a7e:	2300      	movs	r3, #0
}
 8004a80:	4618      	mov	r0, r3
 8004a82:	370c      	adds	r7, #12
 8004a84:	46bd      	mov	sp, r7
 8004a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a8a:	4770      	bx	lr

08004a8c <dbc_2nd>:


/* Test if the byte is DBC 2nd byte */
static int dbc_2nd (BYTE c)
{
 8004a8c:	b480      	push	{r7}
 8004a8e:	b083      	sub	sp, #12
 8004a90:	af00      	add	r7, sp, #0
 8004a92:	4603      	mov	r3, r0
 8004a94:	71fb      	strb	r3, [r7, #7]
		if (c <= DbcTbl[5]) return 1;
		if (c >= DbcTbl[6] && c <= DbcTbl[7]) return 1;
		if (c >= DbcTbl[8] && c <= DbcTbl[9]) return 1;
	}
#else						/* SBCS fixed code page */
	if (c != 0) return 0;	/* Always false */
 8004a96:	79fb      	ldrb	r3, [r7, #7]
 8004a98:	2b00      	cmp	r3, #0
 8004a9a:	d001      	beq.n	8004aa0 <dbc_2nd+0x14>
 8004a9c:	2300      	movs	r3, #0
 8004a9e:	e000      	b.n	8004aa2 <dbc_2nd+0x16>
#endif
	return 0;
 8004aa0:	2300      	movs	r3, #0
}
 8004aa2:	4618      	mov	r0, r3
 8004aa4:	370c      	adds	r7, #12
 8004aa6:	46bd      	mov	sp, r7
 8004aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aac:	4770      	bx	lr

08004aae <sync_window>:
/*-----------------------------------------------------------------------*/
#if !FF_FS_READONLY
static FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERR */
	FATFS* fs			/* Filesystem object */
)
{
 8004aae:	b580      	push	{r7, lr}
 8004ab0:	b084      	sub	sp, #16
 8004ab2:	af00      	add	r7, sp, #0
 8004ab4:	6078      	str	r0, [r7, #4]
	FRESULT res = FR_OK;
 8004ab6:	2300      	movs	r3, #0
 8004ab8:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Is the disk access window dirty? */
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	791b      	ldrb	r3, [r3, #4]
 8004abe:	2b00      	cmp	r3, #0
 8004ac0:	d02c      	beq.n	8004b1c <sync_window+0x6e>
		if (disk_write(fs->pdrv, fs->win, fs->winsect, 1) == RES_OK) {	/* Write it back into the volume */
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	7858      	ldrb	r0, [r3, #1]
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004ad0:	2301      	movs	r3, #1
 8004ad2:	f7ff fe91 	bl	80047f8 <disk_write>
 8004ad6:	4603      	mov	r3, r0
 8004ad8:	2b00      	cmp	r3, #0
 8004ada:	d11d      	bne.n	8004b18 <sync_window+0x6a>
			fs->wflag = 0;	/* Clear window dirty flag */
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	2200      	movs	r2, #0
 8004ae0:	711a      	strb	r2, [r3, #4]
			if (fs->winsect - fs->fatbase < fs->fsize) {	/* Is it in the 1st FAT? */
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004aea:	1ad2      	subs	r2, r2, r3
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	69db      	ldr	r3, [r3, #28]
 8004af0:	429a      	cmp	r2, r3
 8004af2:	d213      	bcs.n	8004b1c <sync_window+0x6e>
				if (fs->n_fats == 2) disk_write(fs->pdrv, fs->win, fs->winsect + fs->fsize, 1);	/* Reflect it to 2nd FAT if needed */
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	78db      	ldrb	r3, [r3, #3]
 8004af8:	2b02      	cmp	r3, #2
 8004afa:	d10f      	bne.n	8004b1c <sync_window+0x6e>
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	7858      	ldrb	r0, [r3, #1]
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	69db      	ldr	r3, [r3, #28]
 8004b0e:	441a      	add	r2, r3
 8004b10:	2301      	movs	r3, #1
 8004b12:	f7ff fe71 	bl	80047f8 <disk_write>
 8004b16:	e001      	b.n	8004b1c <sync_window+0x6e>
			}
		} else {
			res = FR_DISK_ERR;
 8004b18:	2301      	movs	r3, #1
 8004b1a:	73fb      	strb	r3, [r7, #15]
		}
	}
	return res;
 8004b1c:	7bfb      	ldrb	r3, [r7, #15]
}
 8004b1e:	4618      	mov	r0, r3
 8004b20:	3710      	adds	r7, #16
 8004b22:	46bd      	mov	sp, r7
 8004b24:	bd80      	pop	{r7, pc}

08004b26 <move_window>:

static FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERR */
	FATFS* fs,		/* Filesystem object */
	LBA_t sect		/* Sector LBA to make appearance in the fs->win[] */
)
{
 8004b26:	b580      	push	{r7, lr}
 8004b28:	b084      	sub	sp, #16
 8004b2a:	af00      	add	r7, sp, #0
 8004b2c:	6078      	str	r0, [r7, #4]
 8004b2e:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 8004b30:	2300      	movs	r3, #0
 8004b32:	73fb      	strb	r3, [r7, #15]


	if (sect != fs->winsect) {	/* Window offset changed? */
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004b38:	683a      	ldr	r2, [r7, #0]
 8004b3a:	429a      	cmp	r2, r3
 8004b3c:	d01b      	beq.n	8004b76 <move_window+0x50>
#if !FF_FS_READONLY
		res = sync_window(fs);		/* Flush the window */
 8004b3e:	6878      	ldr	r0, [r7, #4]
 8004b40:	f7ff ffb5 	bl	8004aae <sync_window>
 8004b44:	4603      	mov	r3, r0
 8004b46:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 8004b48:	7bfb      	ldrb	r3, [r7, #15]
 8004b4a:	2b00      	cmp	r3, #0
 8004b4c:	d113      	bne.n	8004b76 <move_window+0x50>
			if (disk_read(fs->pdrv, fs->win, sect, 1) != RES_OK) {
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	7858      	ldrb	r0, [r3, #1]
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 8004b58:	2301      	movs	r3, #1
 8004b5a:	683a      	ldr	r2, [r7, #0]
 8004b5c:	f7ff fe1a 	bl	8004794 <disk_read>
 8004b60:	4603      	mov	r3, r0
 8004b62:	2b00      	cmp	r3, #0
 8004b64:	d004      	beq.n	8004b70 <move_window+0x4a>
				sect = (LBA_t)0 - 1;	/* Invalidate window if read data is not valid */
 8004b66:	f04f 33ff 	mov.w	r3, #4294967295
 8004b6a:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 8004b6c:	2301      	movs	r3, #1
 8004b6e:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sect;
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	683a      	ldr	r2, [r7, #0]
 8004b74:	631a      	str	r2, [r3, #48]	@ 0x30
		}
	}
	return res;
 8004b76:	7bfb      	ldrb	r3, [r7, #15]
}
 8004b78:	4618      	mov	r0, r3
 8004b7a:	3710      	adds	r7, #16
 8004b7c:	46bd      	mov	sp, r7
 8004b7e:	bd80      	pop	{r7, pc}

08004b80 <sync_fs>:
/*-----------------------------------------------------------------------*/

static FRESULT sync_fs (	/* Returns FR_OK or FR_DISK_ERR */
	FATFS* fs		/* Filesystem object */
)
{
 8004b80:	b580      	push	{r7, lr}
 8004b82:	b084      	sub	sp, #16
 8004b84:	af00      	add	r7, sp, #0
 8004b86:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 8004b88:	6878      	ldr	r0, [r7, #4]
 8004b8a:	f7ff ff90 	bl	8004aae <sync_window>
 8004b8e:	4603      	mov	r3, r0
 8004b90:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8004b92:	7bfb      	ldrb	r3, [r7, #15]
 8004b94:	2b00      	cmp	r3, #0
 8004b96:	d158      	bne.n	8004c4a <sync_fs+0xca>
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {	/* FAT32: Update FSInfo sector if needed */
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	781b      	ldrb	r3, [r3, #0]
 8004b9c:	2b03      	cmp	r3, #3
 8004b9e:	d148      	bne.n	8004c32 <sync_fs+0xb2>
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	795b      	ldrb	r3, [r3, #5]
 8004ba4:	2b01      	cmp	r3, #1
 8004ba6:	d144      	bne.n	8004c32 <sync_fs+0xb2>
			/* Create FSInfo structure */
			memset(fs->win, 0, sizeof fs->win);
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	3334      	adds	r3, #52	@ 0x34
 8004bac:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8004bb0:	2100      	movs	r1, #0
 8004bb2:	4618      	mov	r0, r3
 8004bb4:	f00c f896 	bl	8010ce4 <memset>
			st_word(fs->win + BS_55AA, 0xAA55);					/* Boot signature */
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	3334      	adds	r3, #52	@ 0x34
 8004bbc:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 8004bc0:	f64a 2155 	movw	r1, #43605	@ 0xaa55
 8004bc4:	4618      	mov	r0, r3
 8004bc6:	f7ff ff09 	bl	80049dc <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);		/* Leading signature */
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	3334      	adds	r3, #52	@ 0x34
 8004bce:	4921      	ldr	r1, [pc, #132]	@ (8004c54 <sync_fs+0xd4>)
 8004bd0:	4618      	mov	r0, r3
 8004bd2:	f7ff ff1e 	bl	8004a12 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);		/* Structure signature */
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	3334      	adds	r3, #52	@ 0x34
 8004bda:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 8004bde:	491e      	ldr	r1, [pc, #120]	@ (8004c58 <sync_fs+0xd8>)
 8004be0:	4618      	mov	r0, r3
 8004be2:	f7ff ff16 	bl	8004a12 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);	/* Number of free clusters */
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	3334      	adds	r3, #52	@ 0x34
 8004bea:	f503 72f4 	add.w	r2, r3, #488	@ 0x1e8
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	695b      	ldr	r3, [r3, #20]
 8004bf2:	4619      	mov	r1, r3
 8004bf4:	4610      	mov	r0, r2
 8004bf6:	f7ff ff0c 	bl	8004a12 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);	/* Last allocated culuster */
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	3334      	adds	r3, #52	@ 0x34
 8004bfe:	f503 72f6 	add.w	r2, r3, #492	@ 0x1ec
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	691b      	ldr	r3, [r3, #16]
 8004c06:	4619      	mov	r1, r3
 8004c08:	4610      	mov	r0, r2
 8004c0a:	f7ff ff02 	bl	8004a12 <st_dword>
			fs->winsect = fs->volbase + 1;						/* Write it into the FSInfo sector (Next to VBR) */
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	6a1b      	ldr	r3, [r3, #32]
 8004c12:	1c5a      	adds	r2, r3, #1
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	631a      	str	r2, [r3, #48]	@ 0x30
			disk_write(fs->pdrv, fs->win, fs->winsect, 1);
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	7858      	ldrb	r0, [r3, #1]
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004c26:	2301      	movs	r3, #1
 8004c28:	f7ff fde6 	bl	80047f8 <disk_write>
			fs->fsi_flag = 0;
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	2200      	movs	r2, #0
 8004c30:	715a      	strb	r2, [r3, #5]
		}
		/* Make sure that no pending write process in the lower layer */
		if (disk_ioctl(fs->pdrv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	785b      	ldrb	r3, [r3, #1]
 8004c36:	2200      	movs	r2, #0
 8004c38:	2100      	movs	r1, #0
 8004c3a:	4618      	mov	r0, r3
 8004c3c:	f7ff fe10 	bl	8004860 <disk_ioctl>
 8004c40:	4603      	mov	r3, r0
 8004c42:	2b00      	cmp	r3, #0
 8004c44:	d001      	beq.n	8004c4a <sync_fs+0xca>
 8004c46:	2301      	movs	r3, #1
 8004c48:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 8004c4a:	7bfb      	ldrb	r3, [r7, #15]
}
 8004c4c:	4618      	mov	r0, r3
 8004c4e:	3710      	adds	r7, #16
 8004c50:	46bd      	mov	sp, r7
 8004c52:	bd80      	pop	{r7, pc}
 8004c54:	41615252 	.word	0x41615252
 8004c58:	61417272 	.word	0x61417272

08004c5c <clst2sect>:

static LBA_t clst2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* Filesystem object */
	DWORD clst		/* Cluster# to be converted */
)
{
 8004c5c:	b480      	push	{r7}
 8004c5e:	b083      	sub	sp, #12
 8004c60:	af00      	add	r7, sp, #0
 8004c62:	6078      	str	r0, [r7, #4]
 8004c64:	6039      	str	r1, [r7, #0]
	clst -= 2;		/* Cluster number is origin from 2 */
 8004c66:	683b      	ldr	r3, [r7, #0]
 8004c68:	3b02      	subs	r3, #2
 8004c6a:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Is it invalid cluster number? */
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	699b      	ldr	r3, [r3, #24]
 8004c70:	3b02      	subs	r3, #2
 8004c72:	683a      	ldr	r2, [r7, #0]
 8004c74:	429a      	cmp	r2, r3
 8004c76:	d301      	bcc.n	8004c7c <clst2sect+0x20>
 8004c78:	2300      	movs	r3, #0
 8004c7a:	e008      	b.n	8004c8e <clst2sect+0x32>
	return fs->database + (LBA_t)fs->csize * clst;	/* Start sector number of the cluster */
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	895b      	ldrh	r3, [r3, #10]
 8004c84:	4619      	mov	r1, r3
 8004c86:	683b      	ldr	r3, [r7, #0]
 8004c88:	fb01 f303 	mul.w	r3, r1, r3
 8004c8c:	4413      	add	r3, r2
}
 8004c8e:	4618      	mov	r0, r3
 8004c90:	370c      	adds	r7, #12
 8004c92:	46bd      	mov	sp, r7
 8004c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c98:	4770      	bx	lr

08004c9a <get_fat>:

static DWORD get_fat (		/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	FFOBJID* obj,	/* Corresponding object */
	DWORD clst		/* Cluster number to get the value */
)
{
 8004c9a:	b580      	push	{r7, lr}
 8004c9c:	b086      	sub	sp, #24
 8004c9e:	af00      	add	r7, sp, #0
 8004ca0:	6078      	str	r0, [r7, #4]
 8004ca2:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 8004caa:	683b      	ldr	r3, [r7, #0]
 8004cac:	2b01      	cmp	r3, #1
 8004cae:	d904      	bls.n	8004cba <get_fat+0x20>
 8004cb0:	693b      	ldr	r3, [r7, #16]
 8004cb2:	699b      	ldr	r3, [r3, #24]
 8004cb4:	683a      	ldr	r2, [r7, #0]
 8004cb6:	429a      	cmp	r2, r3
 8004cb8:	d302      	bcc.n	8004cc0 <get_fat+0x26>
		val = 1;	/* Internal error */
 8004cba:	2301      	movs	r3, #1
 8004cbc:	617b      	str	r3, [r7, #20]
 8004cbe:	e0ba      	b.n	8004e36 <get_fat+0x19c>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8004cc0:	f04f 33ff 	mov.w	r3, #4294967295
 8004cc4:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 8004cc6:	693b      	ldr	r3, [r7, #16]
 8004cc8:	781b      	ldrb	r3, [r3, #0]
 8004cca:	2b03      	cmp	r3, #3
 8004ccc:	f000 8082 	beq.w	8004dd4 <get_fat+0x13a>
 8004cd0:	2b03      	cmp	r3, #3
 8004cd2:	f300 80a6 	bgt.w	8004e22 <get_fat+0x188>
 8004cd6:	2b01      	cmp	r3, #1
 8004cd8:	d002      	beq.n	8004ce0 <get_fat+0x46>
 8004cda:	2b02      	cmp	r3, #2
 8004cdc:	d055      	beq.n	8004d8a <get_fat+0xf0>
 8004cde:	e0a0      	b.n	8004e22 <get_fat+0x188>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8004ce0:	683b      	ldr	r3, [r7, #0]
 8004ce2:	60fb      	str	r3, [r7, #12]
 8004ce4:	68fb      	ldr	r3, [r7, #12]
 8004ce6:	085b      	lsrs	r3, r3, #1
 8004ce8:	68fa      	ldr	r2, [r7, #12]
 8004cea:	4413      	add	r3, r2
 8004cec:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8004cee:	693b      	ldr	r3, [r7, #16]
 8004cf0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004cf2:	693b      	ldr	r3, [r7, #16]
 8004cf4:	899b      	ldrh	r3, [r3, #12]
 8004cf6:	4619      	mov	r1, r3
 8004cf8:	68fb      	ldr	r3, [r7, #12]
 8004cfa:	fbb3 f3f1 	udiv	r3, r3, r1
 8004cfe:	4413      	add	r3, r2
 8004d00:	4619      	mov	r1, r3
 8004d02:	6938      	ldr	r0, [r7, #16]
 8004d04:	f7ff ff0f 	bl	8004b26 <move_window>
 8004d08:	4603      	mov	r3, r0
 8004d0a:	2b00      	cmp	r3, #0
 8004d0c:	f040 808c 	bne.w	8004e28 <get_fat+0x18e>
			wc = fs->win[bc++ % SS(fs)];		/* Get 1st byte of the entry */
 8004d10:	68fb      	ldr	r3, [r7, #12]
 8004d12:	1c5a      	adds	r2, r3, #1
 8004d14:	60fa      	str	r2, [r7, #12]
 8004d16:	693a      	ldr	r2, [r7, #16]
 8004d18:	8992      	ldrh	r2, [r2, #12]
 8004d1a:	fbb3 f1f2 	udiv	r1, r3, r2
 8004d1e:	fb01 f202 	mul.w	r2, r1, r2
 8004d22:	1a9b      	subs	r3, r3, r2
 8004d24:	693a      	ldr	r2, [r7, #16]
 8004d26:	4413      	add	r3, r2
 8004d28:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8004d2c:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8004d2e:	693b      	ldr	r3, [r7, #16]
 8004d30:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004d32:	693b      	ldr	r3, [r7, #16]
 8004d34:	899b      	ldrh	r3, [r3, #12]
 8004d36:	4619      	mov	r1, r3
 8004d38:	68fb      	ldr	r3, [r7, #12]
 8004d3a:	fbb3 f3f1 	udiv	r3, r3, r1
 8004d3e:	4413      	add	r3, r2
 8004d40:	4619      	mov	r1, r3
 8004d42:	6938      	ldr	r0, [r7, #16]
 8004d44:	f7ff feef 	bl	8004b26 <move_window>
 8004d48:	4603      	mov	r3, r0
 8004d4a:	2b00      	cmp	r3, #0
 8004d4c:	d16e      	bne.n	8004e2c <get_fat+0x192>
			wc |= fs->win[bc % SS(fs)] << 8;	/* Merge 2nd byte of the entry */
 8004d4e:	693b      	ldr	r3, [r7, #16]
 8004d50:	899b      	ldrh	r3, [r3, #12]
 8004d52:	461a      	mov	r2, r3
 8004d54:	68fb      	ldr	r3, [r7, #12]
 8004d56:	fbb3 f1f2 	udiv	r1, r3, r2
 8004d5a:	fb01 f202 	mul.w	r2, r1, r2
 8004d5e:	1a9b      	subs	r3, r3, r2
 8004d60:	693a      	ldr	r2, [r7, #16]
 8004d62:	4413      	add	r3, r2
 8004d64:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8004d68:	021b      	lsls	r3, r3, #8
 8004d6a:	68ba      	ldr	r2, [r7, #8]
 8004d6c:	4313      	orrs	r3, r2
 8004d6e:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);	/* Adjust bit position */
 8004d70:	683b      	ldr	r3, [r7, #0]
 8004d72:	f003 0301 	and.w	r3, r3, #1
 8004d76:	2b00      	cmp	r3, #0
 8004d78:	d002      	beq.n	8004d80 <get_fat+0xe6>
 8004d7a:	68bb      	ldr	r3, [r7, #8]
 8004d7c:	091b      	lsrs	r3, r3, #4
 8004d7e:	e002      	b.n	8004d86 <get_fat+0xec>
 8004d80:	68bb      	ldr	r3, [r7, #8]
 8004d82:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004d86:	617b      	str	r3, [r7, #20]
			break;
 8004d88:	e055      	b.n	8004e36 <get_fat+0x19c>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8004d8a:	693b      	ldr	r3, [r7, #16]
 8004d8c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004d8e:	693b      	ldr	r3, [r7, #16]
 8004d90:	899b      	ldrh	r3, [r3, #12]
 8004d92:	085b      	lsrs	r3, r3, #1
 8004d94:	b29b      	uxth	r3, r3
 8004d96:	4619      	mov	r1, r3
 8004d98:	683b      	ldr	r3, [r7, #0]
 8004d9a:	fbb3 f3f1 	udiv	r3, r3, r1
 8004d9e:	4413      	add	r3, r2
 8004da0:	4619      	mov	r1, r3
 8004da2:	6938      	ldr	r0, [r7, #16]
 8004da4:	f7ff febf 	bl	8004b26 <move_window>
 8004da8:	4603      	mov	r3, r0
 8004daa:	2b00      	cmp	r3, #0
 8004dac:	d140      	bne.n	8004e30 <get_fat+0x196>
			val = ld_word(fs->win + clst * 2 % SS(fs));		/* Simple WORD array */
 8004dae:	693b      	ldr	r3, [r7, #16]
 8004db0:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 8004db4:	683b      	ldr	r3, [r7, #0]
 8004db6:	005b      	lsls	r3, r3, #1
 8004db8:	693a      	ldr	r2, [r7, #16]
 8004dba:	8992      	ldrh	r2, [r2, #12]
 8004dbc:	fbb3 f0f2 	udiv	r0, r3, r2
 8004dc0:	fb00 f202 	mul.w	r2, r0, r2
 8004dc4:	1a9b      	subs	r3, r3, r2
 8004dc6:	440b      	add	r3, r1
 8004dc8:	4618      	mov	r0, r3
 8004dca:	f7ff fdcb 	bl	8004964 <ld_word>
 8004dce:	4603      	mov	r3, r0
 8004dd0:	617b      	str	r3, [r7, #20]
			break;
 8004dd2:	e030      	b.n	8004e36 <get_fat+0x19c>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8004dd4:	693b      	ldr	r3, [r7, #16]
 8004dd6:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004dd8:	693b      	ldr	r3, [r7, #16]
 8004dda:	899b      	ldrh	r3, [r3, #12]
 8004ddc:	089b      	lsrs	r3, r3, #2
 8004dde:	b29b      	uxth	r3, r3
 8004de0:	4619      	mov	r1, r3
 8004de2:	683b      	ldr	r3, [r7, #0]
 8004de4:	fbb3 f3f1 	udiv	r3, r3, r1
 8004de8:	4413      	add	r3, r2
 8004dea:	4619      	mov	r1, r3
 8004dec:	6938      	ldr	r0, [r7, #16]
 8004dee:	f7ff fe9a 	bl	8004b26 <move_window>
 8004df2:	4603      	mov	r3, r0
 8004df4:	2b00      	cmp	r3, #0
 8004df6:	d11d      	bne.n	8004e34 <get_fat+0x19a>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;	/* Simple DWORD array but mask out upper 4 bits */
 8004df8:	693b      	ldr	r3, [r7, #16]
 8004dfa:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 8004dfe:	683b      	ldr	r3, [r7, #0]
 8004e00:	009b      	lsls	r3, r3, #2
 8004e02:	693a      	ldr	r2, [r7, #16]
 8004e04:	8992      	ldrh	r2, [r2, #12]
 8004e06:	fbb3 f0f2 	udiv	r0, r3, r2
 8004e0a:	fb00 f202 	mul.w	r2, r0, r2
 8004e0e:	1a9b      	subs	r3, r3, r2
 8004e10:	440b      	add	r3, r1
 8004e12:	4618      	mov	r0, r3
 8004e14:	f7ff fdbf 	bl	8004996 <ld_dword>
 8004e18:	4603      	mov	r3, r0
 8004e1a:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8004e1e:	617b      	str	r3, [r7, #20]
			break;
 8004e20:	e009      	b.n	8004e36 <get_fat+0x19c>
			}
			val = 1;	/* Internal error */
			break;
#endif
		default:
			val = 1;	/* Internal error */
 8004e22:	2301      	movs	r3, #1
 8004e24:	617b      	str	r3, [r7, #20]
 8004e26:	e006      	b.n	8004e36 <get_fat+0x19c>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8004e28:	bf00      	nop
 8004e2a:	e004      	b.n	8004e36 <get_fat+0x19c>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8004e2c:	bf00      	nop
 8004e2e:	e002      	b.n	8004e36 <get_fat+0x19c>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8004e30:	bf00      	nop
 8004e32:	e000      	b.n	8004e36 <get_fat+0x19c>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8004e34:	bf00      	nop
		}
	}

	return val;
 8004e36:	697b      	ldr	r3, [r7, #20]
}
 8004e38:	4618      	mov	r0, r3
 8004e3a:	3718      	adds	r7, #24
 8004e3c:	46bd      	mov	sp, r7
 8004e3e:	bd80      	pop	{r7, pc}

08004e40 <put_fat>:
static FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding filesystem object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 8004e40:	b590      	push	{r4, r7, lr}
 8004e42:	b089      	sub	sp, #36	@ 0x24
 8004e44:	af00      	add	r7, sp, #0
 8004e46:	60f8      	str	r0, [r7, #12]
 8004e48:	60b9      	str	r1, [r7, #8]
 8004e4a:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 8004e4c:	2302      	movs	r3, #2
 8004e4e:	77fb      	strb	r3, [r7, #31]


	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 8004e50:	68bb      	ldr	r3, [r7, #8]
 8004e52:	2b01      	cmp	r3, #1
 8004e54:	f240 8109 	bls.w	800506a <put_fat+0x22a>
 8004e58:	68fb      	ldr	r3, [r7, #12]
 8004e5a:	699b      	ldr	r3, [r3, #24]
 8004e5c:	68ba      	ldr	r2, [r7, #8]
 8004e5e:	429a      	cmp	r2, r3
 8004e60:	f080 8103 	bcs.w	800506a <put_fat+0x22a>
		switch (fs->fs_type) {
 8004e64:	68fb      	ldr	r3, [r7, #12]
 8004e66:	781b      	ldrb	r3, [r3, #0]
 8004e68:	2b03      	cmp	r3, #3
 8004e6a:	f000 80b6 	beq.w	8004fda <put_fat+0x19a>
 8004e6e:	2b03      	cmp	r3, #3
 8004e70:	f300 80fb 	bgt.w	800506a <put_fat+0x22a>
 8004e74:	2b01      	cmp	r3, #1
 8004e76:	d003      	beq.n	8004e80 <put_fat+0x40>
 8004e78:	2b02      	cmp	r3, #2
 8004e7a:	f000 8083 	beq.w	8004f84 <put_fat+0x144>
 8004e7e:	e0f4      	b.n	800506a <put_fat+0x22a>
		case FS_FAT12:
			bc = (UINT)clst; bc += bc / 2;	/* bc: byte offset of the entry */
 8004e80:	68bb      	ldr	r3, [r7, #8]
 8004e82:	61bb      	str	r3, [r7, #24]
 8004e84:	69bb      	ldr	r3, [r7, #24]
 8004e86:	085b      	lsrs	r3, r3, #1
 8004e88:	69ba      	ldr	r2, [r7, #24]
 8004e8a:	4413      	add	r3, r2
 8004e8c:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8004e8e:	68fb      	ldr	r3, [r7, #12]
 8004e90:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004e92:	68fb      	ldr	r3, [r7, #12]
 8004e94:	899b      	ldrh	r3, [r3, #12]
 8004e96:	4619      	mov	r1, r3
 8004e98:	69bb      	ldr	r3, [r7, #24]
 8004e9a:	fbb3 f3f1 	udiv	r3, r3, r1
 8004e9e:	4413      	add	r3, r2
 8004ea0:	4619      	mov	r1, r3
 8004ea2:	68f8      	ldr	r0, [r7, #12]
 8004ea4:	f7ff fe3f 	bl	8004b26 <move_window>
 8004ea8:	4603      	mov	r3, r0
 8004eaa:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8004eac:	7ffb      	ldrb	r3, [r7, #31]
 8004eae:	2b00      	cmp	r3, #0
 8004eb0:	f040 80d4 	bne.w	800505c <put_fat+0x21c>
			p = fs->win + bc++ % SS(fs);
 8004eb4:	68fb      	ldr	r3, [r7, #12]
 8004eb6:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 8004eba:	69bb      	ldr	r3, [r7, #24]
 8004ebc:	1c5a      	adds	r2, r3, #1
 8004ebe:	61ba      	str	r2, [r7, #24]
 8004ec0:	68fa      	ldr	r2, [r7, #12]
 8004ec2:	8992      	ldrh	r2, [r2, #12]
 8004ec4:	fbb3 f0f2 	udiv	r0, r3, r2
 8004ec8:	fb00 f202 	mul.w	r2, r0, r2
 8004ecc:	1a9b      	subs	r3, r3, r2
 8004ece:	440b      	add	r3, r1
 8004ed0:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;	/* Update 1st byte */
 8004ed2:	68bb      	ldr	r3, [r7, #8]
 8004ed4:	f003 0301 	and.w	r3, r3, #1
 8004ed8:	2b00      	cmp	r3, #0
 8004eda:	d00d      	beq.n	8004ef8 <put_fat+0xb8>
 8004edc:	697b      	ldr	r3, [r7, #20]
 8004ede:	781b      	ldrb	r3, [r3, #0]
 8004ee0:	b25b      	sxtb	r3, r3
 8004ee2:	f003 030f 	and.w	r3, r3, #15
 8004ee6:	b25a      	sxtb	r2, r3
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	b25b      	sxtb	r3, r3
 8004eec:	011b      	lsls	r3, r3, #4
 8004eee:	b25b      	sxtb	r3, r3
 8004ef0:	4313      	orrs	r3, r2
 8004ef2:	b25b      	sxtb	r3, r3
 8004ef4:	b2db      	uxtb	r3, r3
 8004ef6:	e001      	b.n	8004efc <put_fat+0xbc>
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	b2db      	uxtb	r3, r3
 8004efc:	697a      	ldr	r2, [r7, #20]
 8004efe:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8004f00:	68fb      	ldr	r3, [r7, #12]
 8004f02:	2201      	movs	r2, #1
 8004f04:	711a      	strb	r2, [r3, #4]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8004f06:	68fb      	ldr	r3, [r7, #12]
 8004f08:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004f0a:	68fb      	ldr	r3, [r7, #12]
 8004f0c:	899b      	ldrh	r3, [r3, #12]
 8004f0e:	4619      	mov	r1, r3
 8004f10:	69bb      	ldr	r3, [r7, #24]
 8004f12:	fbb3 f3f1 	udiv	r3, r3, r1
 8004f16:	4413      	add	r3, r2
 8004f18:	4619      	mov	r1, r3
 8004f1a:	68f8      	ldr	r0, [r7, #12]
 8004f1c:	f7ff fe03 	bl	8004b26 <move_window>
 8004f20:	4603      	mov	r3, r0
 8004f22:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8004f24:	7ffb      	ldrb	r3, [r7, #31]
 8004f26:	2b00      	cmp	r3, #0
 8004f28:	f040 809a 	bne.w	8005060 <put_fat+0x220>
			p = fs->win + bc % SS(fs);
 8004f2c:	68fb      	ldr	r3, [r7, #12]
 8004f2e:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 8004f32:	68fb      	ldr	r3, [r7, #12]
 8004f34:	899b      	ldrh	r3, [r3, #12]
 8004f36:	461a      	mov	r2, r3
 8004f38:	69bb      	ldr	r3, [r7, #24]
 8004f3a:	fbb3 f0f2 	udiv	r0, r3, r2
 8004f3e:	fb00 f202 	mul.w	r2, r0, r2
 8004f42:	1a9b      	subs	r3, r3, r2
 8004f44:	440b      	add	r3, r1
 8004f46:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));	/* Update 2nd byte */
 8004f48:	68bb      	ldr	r3, [r7, #8]
 8004f4a:	f003 0301 	and.w	r3, r3, #1
 8004f4e:	2b00      	cmp	r3, #0
 8004f50:	d003      	beq.n	8004f5a <put_fat+0x11a>
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	091b      	lsrs	r3, r3, #4
 8004f56:	b2db      	uxtb	r3, r3
 8004f58:	e00e      	b.n	8004f78 <put_fat+0x138>
 8004f5a:	697b      	ldr	r3, [r7, #20]
 8004f5c:	781b      	ldrb	r3, [r3, #0]
 8004f5e:	b25b      	sxtb	r3, r3
 8004f60:	f023 030f 	bic.w	r3, r3, #15
 8004f64:	b25a      	sxtb	r2, r3
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	0a1b      	lsrs	r3, r3, #8
 8004f6a:	b25b      	sxtb	r3, r3
 8004f6c:	f003 030f 	and.w	r3, r3, #15
 8004f70:	b25b      	sxtb	r3, r3
 8004f72:	4313      	orrs	r3, r2
 8004f74:	b25b      	sxtb	r3, r3
 8004f76:	b2db      	uxtb	r3, r3
 8004f78:	697a      	ldr	r2, [r7, #20]
 8004f7a:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8004f7c:	68fb      	ldr	r3, [r7, #12]
 8004f7e:	2201      	movs	r2, #1
 8004f80:	711a      	strb	r2, [r3, #4]
			break;
 8004f82:	e072      	b.n	800506a <put_fat+0x22a>

		case FS_FAT16:
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8004f84:	68fb      	ldr	r3, [r7, #12]
 8004f86:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004f88:	68fb      	ldr	r3, [r7, #12]
 8004f8a:	899b      	ldrh	r3, [r3, #12]
 8004f8c:	085b      	lsrs	r3, r3, #1
 8004f8e:	b29b      	uxth	r3, r3
 8004f90:	4619      	mov	r1, r3
 8004f92:	68bb      	ldr	r3, [r7, #8]
 8004f94:	fbb3 f3f1 	udiv	r3, r3, r1
 8004f98:	4413      	add	r3, r2
 8004f9a:	4619      	mov	r1, r3
 8004f9c:	68f8      	ldr	r0, [r7, #12]
 8004f9e:	f7ff fdc2 	bl	8004b26 <move_window>
 8004fa2:	4603      	mov	r3, r0
 8004fa4:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8004fa6:	7ffb      	ldrb	r3, [r7, #31]
 8004fa8:	2b00      	cmp	r3, #0
 8004faa:	d15b      	bne.n	8005064 <put_fat+0x224>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);	/* Simple WORD array */
 8004fac:	68fb      	ldr	r3, [r7, #12]
 8004fae:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 8004fb2:	68bb      	ldr	r3, [r7, #8]
 8004fb4:	005b      	lsls	r3, r3, #1
 8004fb6:	68fa      	ldr	r2, [r7, #12]
 8004fb8:	8992      	ldrh	r2, [r2, #12]
 8004fba:	fbb3 f0f2 	udiv	r0, r3, r2
 8004fbe:	fb00 f202 	mul.w	r2, r0, r2
 8004fc2:	1a9b      	subs	r3, r3, r2
 8004fc4:	440b      	add	r3, r1
 8004fc6:	687a      	ldr	r2, [r7, #4]
 8004fc8:	b292      	uxth	r2, r2
 8004fca:	4611      	mov	r1, r2
 8004fcc:	4618      	mov	r0, r3
 8004fce:	f7ff fd05 	bl	80049dc <st_word>
			fs->wflag = 1;
 8004fd2:	68fb      	ldr	r3, [r7, #12]
 8004fd4:	2201      	movs	r2, #1
 8004fd6:	711a      	strb	r2, [r3, #4]
			break;
 8004fd8:	e047      	b.n	800506a <put_fat+0x22a>

		case FS_FAT32:
#if FF_FS_EXFAT
		case FS_EXFAT:
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8004fda:	68fb      	ldr	r3, [r7, #12]
 8004fdc:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004fde:	68fb      	ldr	r3, [r7, #12]
 8004fe0:	899b      	ldrh	r3, [r3, #12]
 8004fe2:	089b      	lsrs	r3, r3, #2
 8004fe4:	b29b      	uxth	r3, r3
 8004fe6:	4619      	mov	r1, r3
 8004fe8:	68bb      	ldr	r3, [r7, #8]
 8004fea:	fbb3 f3f1 	udiv	r3, r3, r1
 8004fee:	4413      	add	r3, r2
 8004ff0:	4619      	mov	r1, r3
 8004ff2:	68f8      	ldr	r0, [r7, #12]
 8004ff4:	f7ff fd97 	bl	8004b26 <move_window>
 8004ff8:	4603      	mov	r3, r0
 8004ffa:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8004ffc:	7ffb      	ldrb	r3, [r7, #31]
 8004ffe:	2b00      	cmp	r3, #0
 8005000:	d132      	bne.n	8005068 <put_fat+0x228>
			if (!FF_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	f023 4470 	bic.w	r4, r3, #4026531840	@ 0xf0000000
 8005008:	68fb      	ldr	r3, [r7, #12]
 800500a:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 800500e:	68bb      	ldr	r3, [r7, #8]
 8005010:	009b      	lsls	r3, r3, #2
 8005012:	68fa      	ldr	r2, [r7, #12]
 8005014:	8992      	ldrh	r2, [r2, #12]
 8005016:	fbb3 f0f2 	udiv	r0, r3, r2
 800501a:	fb00 f202 	mul.w	r2, r0, r2
 800501e:	1a9b      	subs	r3, r3, r2
 8005020:	440b      	add	r3, r1
 8005022:	4618      	mov	r0, r3
 8005024:	f7ff fcb7 	bl	8004996 <ld_dword>
 8005028:	4603      	mov	r3, r0
 800502a:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 800502e:	4323      	orrs	r3, r4
 8005030:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 8005032:	68fb      	ldr	r3, [r7, #12]
 8005034:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 8005038:	68bb      	ldr	r3, [r7, #8]
 800503a:	009b      	lsls	r3, r3, #2
 800503c:	68fa      	ldr	r2, [r7, #12]
 800503e:	8992      	ldrh	r2, [r2, #12]
 8005040:	fbb3 f0f2 	udiv	r0, r3, r2
 8005044:	fb00 f202 	mul.w	r2, r0, r2
 8005048:	1a9b      	subs	r3, r3, r2
 800504a:	440b      	add	r3, r1
 800504c:	6879      	ldr	r1, [r7, #4]
 800504e:	4618      	mov	r0, r3
 8005050:	f7ff fcdf 	bl	8004a12 <st_dword>
			fs->wflag = 1;
 8005054:	68fb      	ldr	r3, [r7, #12]
 8005056:	2201      	movs	r2, #1
 8005058:	711a      	strb	r2, [r3, #4]
			break;
 800505a:	e006      	b.n	800506a <put_fat+0x22a>
			if (res != FR_OK) break;
 800505c:	bf00      	nop
 800505e:	e004      	b.n	800506a <put_fat+0x22a>
			if (res != FR_OK) break;
 8005060:	bf00      	nop
 8005062:	e002      	b.n	800506a <put_fat+0x22a>
			if (res != FR_OK) break;
 8005064:	bf00      	nop
 8005066:	e000      	b.n	800506a <put_fat+0x22a>
			if (res != FR_OK) break;
 8005068:	bf00      	nop
		}
	}
	return res;
 800506a:	7ffb      	ldrb	r3, [r7, #31]
}
 800506c:	4618      	mov	r0, r3
 800506e:	3724      	adds	r7, #36	@ 0x24
 8005070:	46bd      	mov	sp, r7
 8005072:	bd90      	pop	{r4, r7, pc}

08005074 <remove_chain>:
static FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	FFOBJID* obj,		/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0 if entire chain) */
)
{
 8005074:	b580      	push	{r7, lr}
 8005076:	b088      	sub	sp, #32
 8005078:	af00      	add	r7, sp, #0
 800507a:	60f8      	str	r0, [r7, #12]
 800507c:	60b9      	str	r1, [r7, #8]
 800507e:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 8005080:	2300      	movs	r3, #0
 8005082:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 8005084:	68fb      	ldr	r3, [r7, #12]
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	61bb      	str	r3, [r7, #24]
#endif
#if FF_USE_TRIM
	LBA_t rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 800508a:	68bb      	ldr	r3, [r7, #8]
 800508c:	2b01      	cmp	r3, #1
 800508e:	d904      	bls.n	800509a <remove_chain+0x26>
 8005090:	69bb      	ldr	r3, [r7, #24]
 8005092:	699b      	ldr	r3, [r3, #24]
 8005094:	68ba      	ldr	r2, [r7, #8]
 8005096:	429a      	cmp	r2, r3
 8005098:	d301      	bcc.n	800509e <remove_chain+0x2a>
 800509a:	2302      	movs	r3, #2
 800509c:	e04b      	b.n	8005136 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst != 0 && (!FF_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	2b00      	cmp	r3, #0
 80050a2:	d00c      	beq.n	80050be <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 80050a4:	f04f 32ff 	mov.w	r2, #4294967295
 80050a8:	6879      	ldr	r1, [r7, #4]
 80050aa:	69b8      	ldr	r0, [r7, #24]
 80050ac:	f7ff fec8 	bl	8004e40 <put_fat>
 80050b0:	4603      	mov	r3, r0
 80050b2:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 80050b4:	7ffb      	ldrb	r3, [r7, #31]
 80050b6:	2b00      	cmp	r3, #0
 80050b8:	d001      	beq.n	80050be <remove_chain+0x4a>
 80050ba:	7ffb      	ldrb	r3, [r7, #31]
 80050bc:	e03b      	b.n	8005136 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 80050be:	68b9      	ldr	r1, [r7, #8]
 80050c0:	68f8      	ldr	r0, [r7, #12]
 80050c2:	f7ff fdea 	bl	8004c9a <get_fat>
 80050c6:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 80050c8:	697b      	ldr	r3, [r7, #20]
 80050ca:	2b00      	cmp	r3, #0
 80050cc:	d031      	beq.n	8005132 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 80050ce:	697b      	ldr	r3, [r7, #20]
 80050d0:	2b01      	cmp	r3, #1
 80050d2:	d101      	bne.n	80050d8 <remove_chain+0x64>
 80050d4:	2302      	movs	r3, #2
 80050d6:	e02e      	b.n	8005136 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 80050d8:	697b      	ldr	r3, [r7, #20]
 80050da:	f1b3 3fff 	cmp.w	r3, #4294967295
 80050de:	d101      	bne.n	80050e4 <remove_chain+0x70>
 80050e0:	2301      	movs	r3, #1
 80050e2:	e028      	b.n	8005136 <remove_chain+0xc2>
		if (!FF_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 80050e4:	2200      	movs	r2, #0
 80050e6:	68b9      	ldr	r1, [r7, #8]
 80050e8:	69b8      	ldr	r0, [r7, #24]
 80050ea:	f7ff fea9 	bl	8004e40 <put_fat>
 80050ee:	4603      	mov	r3, r0
 80050f0:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 80050f2:	7ffb      	ldrb	r3, [r7, #31]
 80050f4:	2b00      	cmp	r3, #0
 80050f6:	d001      	beq.n	80050fc <remove_chain+0x88>
 80050f8:	7ffb      	ldrb	r3, [r7, #31]
 80050fa:	e01c      	b.n	8005136 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 80050fc:	69bb      	ldr	r3, [r7, #24]
 80050fe:	695a      	ldr	r2, [r3, #20]
 8005100:	69bb      	ldr	r3, [r7, #24]
 8005102:	699b      	ldr	r3, [r3, #24]
 8005104:	3b02      	subs	r3, #2
 8005106:	429a      	cmp	r2, r3
 8005108:	d20b      	bcs.n	8005122 <remove_chain+0xae>
			fs->free_clst++;
 800510a:	69bb      	ldr	r3, [r7, #24]
 800510c:	695b      	ldr	r3, [r3, #20]
 800510e:	1c5a      	adds	r2, r3, #1
 8005110:	69bb      	ldr	r3, [r7, #24]
 8005112:	615a      	str	r2, [r3, #20]
			fs->fsi_flag |= 1;
 8005114:	69bb      	ldr	r3, [r7, #24]
 8005116:	795b      	ldrb	r3, [r3, #5]
 8005118:	f043 0301 	orr.w	r3, r3, #1
 800511c:	b2da      	uxtb	r2, r3
 800511e:	69bb      	ldr	r3, [r7, #24]
 8005120:	715a      	strb	r2, [r3, #5]
			disk_ioctl(fs->pdrv, CTRL_TRIM, rt);		/* Inform storage device that the data in the block may be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 8005122:	697b      	ldr	r3, [r7, #20]
 8005124:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 8005126:	69bb      	ldr	r3, [r7, #24]
 8005128:	699b      	ldr	r3, [r3, #24]
 800512a:	68ba      	ldr	r2, [r7, #8]
 800512c:	429a      	cmp	r2, r3
 800512e:	d3c6      	bcc.n	80050be <remove_chain+0x4a>
 8005130:	e000      	b.n	8005134 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 8005132:	bf00      	nop
				}
			}
		}
	}
#endif
	return FR_OK;
 8005134:	2300      	movs	r3, #0
}
 8005136:	4618      	mov	r0, r3
 8005138:	3720      	adds	r7, #32
 800513a:	46bd      	mov	sp, r7
 800513c:	bd80      	pop	{r7, pc}

0800513e <create_chain>:

static DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	FFOBJID* obj,		/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 800513e:	b580      	push	{r7, lr}
 8005140:	b088      	sub	sp, #32
 8005142:	af00      	add	r7, sp, #0
 8005144:	6078      	str	r0, [r7, #4]
 8005146:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 800514e:	683b      	ldr	r3, [r7, #0]
 8005150:	2b00      	cmp	r3, #0
 8005152:	d10d      	bne.n	8005170 <create_chain+0x32>
		scl = fs->last_clst;				/* Suggested cluster to start to find */
 8005154:	693b      	ldr	r3, [r7, #16]
 8005156:	691b      	ldr	r3, [r3, #16]
 8005158:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 800515a:	69bb      	ldr	r3, [r7, #24]
 800515c:	2b00      	cmp	r3, #0
 800515e:	d004      	beq.n	800516a <create_chain+0x2c>
 8005160:	693b      	ldr	r3, [r7, #16]
 8005162:	699b      	ldr	r3, [r3, #24]
 8005164:	69ba      	ldr	r2, [r7, #24]
 8005166:	429a      	cmp	r2, r3
 8005168:	d31b      	bcc.n	80051a2 <create_chain+0x64>
 800516a:	2301      	movs	r3, #1
 800516c:	61bb      	str	r3, [r7, #24]
 800516e:	e018      	b.n	80051a2 <create_chain+0x64>
	}
	else {				/* Stretch a chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 8005170:	6839      	ldr	r1, [r7, #0]
 8005172:	6878      	ldr	r0, [r7, #4]
 8005174:	f7ff fd91 	bl	8004c9a <get_fat>
 8005178:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Test for insanity */
 800517a:	68fb      	ldr	r3, [r7, #12]
 800517c:	2b01      	cmp	r3, #1
 800517e:	d801      	bhi.n	8005184 <create_chain+0x46>
 8005180:	2301      	movs	r3, #1
 8005182:	e0a9      	b.n	80052d8 <create_chain+0x19a>
		if (cs == 0xFFFFFFFF) return cs;	/* Test for disk error */
 8005184:	68fb      	ldr	r3, [r7, #12]
 8005186:	f1b3 3fff 	cmp.w	r3, #4294967295
 800518a:	d101      	bne.n	8005190 <create_chain+0x52>
 800518c:	68fb      	ldr	r3, [r7, #12]
 800518e:	e0a3      	b.n	80052d8 <create_chain+0x19a>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 8005190:	693b      	ldr	r3, [r7, #16]
 8005192:	699b      	ldr	r3, [r3, #24]
 8005194:	68fa      	ldr	r2, [r7, #12]
 8005196:	429a      	cmp	r2, r3
 8005198:	d201      	bcs.n	800519e <create_chain+0x60>
 800519a:	68fb      	ldr	r3, [r7, #12]
 800519c:	e09c      	b.n	80052d8 <create_chain+0x19a>
		scl = clst;							/* Cluster to start to find */
 800519e:	683b      	ldr	r3, [r7, #0]
 80051a0:	61bb      	str	r3, [r7, #24]
	}
	if (fs->free_clst == 0) return 0;		/* No free cluster */
 80051a2:	693b      	ldr	r3, [r7, #16]
 80051a4:	695b      	ldr	r3, [r3, #20]
 80051a6:	2b00      	cmp	r3, #0
 80051a8:	d101      	bne.n	80051ae <create_chain+0x70>
 80051aa:	2300      	movs	r3, #0
 80051ac:	e094      	b.n	80052d8 <create_chain+0x19a>
			}
		}
	} else
#endif
	{	/* On the FAT/FAT32 volume */
		ncl = 0;
 80051ae:	2300      	movs	r3, #0
 80051b0:	61fb      	str	r3, [r7, #28]
		if (scl == clst) {						/* Stretching an existing chain? */
 80051b2:	69ba      	ldr	r2, [r7, #24]
 80051b4:	683b      	ldr	r3, [r7, #0]
 80051b6:	429a      	cmp	r2, r3
 80051b8:	d129      	bne.n	800520e <create_chain+0xd0>
			ncl = scl + 1;						/* Test if next cluster is free */
 80051ba:	69bb      	ldr	r3, [r7, #24]
 80051bc:	3301      	adds	r3, #1
 80051be:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) ncl = 2;
 80051c0:	693b      	ldr	r3, [r7, #16]
 80051c2:	699b      	ldr	r3, [r3, #24]
 80051c4:	69fa      	ldr	r2, [r7, #28]
 80051c6:	429a      	cmp	r2, r3
 80051c8:	d301      	bcc.n	80051ce <create_chain+0x90>
 80051ca:	2302      	movs	r3, #2
 80051cc:	61fb      	str	r3, [r7, #28]
			cs = get_fat(obj, ncl);				/* Get next cluster status */
 80051ce:	69f9      	ldr	r1, [r7, #28]
 80051d0:	6878      	ldr	r0, [r7, #4]
 80051d2:	f7ff fd62 	bl	8004c9a <get_fat>
 80051d6:	60f8      	str	r0, [r7, #12]
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* Test for error */
 80051d8:	68fb      	ldr	r3, [r7, #12]
 80051da:	2b01      	cmp	r3, #1
 80051dc:	d003      	beq.n	80051e6 <create_chain+0xa8>
 80051de:	68fb      	ldr	r3, [r7, #12]
 80051e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80051e4:	d101      	bne.n	80051ea <create_chain+0xac>
 80051e6:	68fb      	ldr	r3, [r7, #12]
 80051e8:	e076      	b.n	80052d8 <create_chain+0x19a>
			if (cs != 0) {						/* Not free? */
 80051ea:	68fb      	ldr	r3, [r7, #12]
 80051ec:	2b00      	cmp	r3, #0
 80051ee:	d00e      	beq.n	800520e <create_chain+0xd0>
				cs = fs->last_clst;				/* Start at suggested cluster if it is valid */
 80051f0:	693b      	ldr	r3, [r7, #16]
 80051f2:	691b      	ldr	r3, [r3, #16]
 80051f4:	60fb      	str	r3, [r7, #12]
				if (cs >= 2 && cs < fs->n_fatent) scl = cs;
 80051f6:	68fb      	ldr	r3, [r7, #12]
 80051f8:	2b01      	cmp	r3, #1
 80051fa:	d906      	bls.n	800520a <create_chain+0xcc>
 80051fc:	693b      	ldr	r3, [r7, #16]
 80051fe:	699b      	ldr	r3, [r3, #24]
 8005200:	68fa      	ldr	r2, [r7, #12]
 8005202:	429a      	cmp	r2, r3
 8005204:	d201      	bcs.n	800520a <create_chain+0xcc>
 8005206:	68fb      	ldr	r3, [r7, #12]
 8005208:	61bb      	str	r3, [r7, #24]
				ncl = 0;
 800520a:	2300      	movs	r3, #0
 800520c:	61fb      	str	r3, [r7, #28]
			}
		}
		if (ncl == 0) {	/* The new cluster cannot be contiguous and find another fragment */
 800520e:	69fb      	ldr	r3, [r7, #28]
 8005210:	2b00      	cmp	r3, #0
 8005212:	d129      	bne.n	8005268 <create_chain+0x12a>
			ncl = scl;	/* Start cluster */
 8005214:	69bb      	ldr	r3, [r7, #24]
 8005216:	61fb      	str	r3, [r7, #28]
			for (;;) {
				ncl++;							/* Next cluster */
 8005218:	69fb      	ldr	r3, [r7, #28]
 800521a:	3301      	adds	r3, #1
 800521c:	61fb      	str	r3, [r7, #28]
				if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 800521e:	693b      	ldr	r3, [r7, #16]
 8005220:	699b      	ldr	r3, [r3, #24]
 8005222:	69fa      	ldr	r2, [r7, #28]
 8005224:	429a      	cmp	r2, r3
 8005226:	d307      	bcc.n	8005238 <create_chain+0xfa>
					ncl = 2;
 8005228:	2302      	movs	r3, #2
 800522a:	61fb      	str	r3, [r7, #28]
					if (ncl > scl) return 0;	/* No free cluster found? */
 800522c:	69fa      	ldr	r2, [r7, #28]
 800522e:	69bb      	ldr	r3, [r7, #24]
 8005230:	429a      	cmp	r2, r3
 8005232:	d901      	bls.n	8005238 <create_chain+0xfa>
 8005234:	2300      	movs	r3, #0
 8005236:	e04f      	b.n	80052d8 <create_chain+0x19a>
				}
				cs = get_fat(obj, ncl);			/* Get the cluster status */
 8005238:	69f9      	ldr	r1, [r7, #28]
 800523a:	6878      	ldr	r0, [r7, #4]
 800523c:	f7ff fd2d 	bl	8004c9a <get_fat>
 8005240:	60f8      	str	r0, [r7, #12]
				if (cs == 0) break;				/* Found a free cluster? */
 8005242:	68fb      	ldr	r3, [r7, #12]
 8005244:	2b00      	cmp	r3, #0
 8005246:	d00e      	beq.n	8005266 <create_chain+0x128>
				if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* Test for error */
 8005248:	68fb      	ldr	r3, [r7, #12]
 800524a:	2b01      	cmp	r3, #1
 800524c:	d003      	beq.n	8005256 <create_chain+0x118>
 800524e:	68fb      	ldr	r3, [r7, #12]
 8005250:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005254:	d101      	bne.n	800525a <create_chain+0x11c>
 8005256:	68fb      	ldr	r3, [r7, #12]
 8005258:	e03e      	b.n	80052d8 <create_chain+0x19a>
				if (ncl == scl) return 0;		/* No free cluster found? */
 800525a:	69fa      	ldr	r2, [r7, #28]
 800525c:	69bb      	ldr	r3, [r7, #24]
 800525e:	429a      	cmp	r2, r3
 8005260:	d1da      	bne.n	8005218 <create_chain+0xda>
 8005262:	2300      	movs	r3, #0
 8005264:	e038      	b.n	80052d8 <create_chain+0x19a>
				if (cs == 0) break;				/* Found a free cluster? */
 8005266:	bf00      	nop
			}
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);		/* Mark the new cluster 'EOC' */
 8005268:	f04f 32ff 	mov.w	r2, #4294967295
 800526c:	69f9      	ldr	r1, [r7, #28]
 800526e:	6938      	ldr	r0, [r7, #16]
 8005270:	f7ff fde6 	bl	8004e40 <put_fat>
 8005274:	4603      	mov	r3, r0
 8005276:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 8005278:	7dfb      	ldrb	r3, [r7, #23]
 800527a:	2b00      	cmp	r3, #0
 800527c:	d109      	bne.n	8005292 <create_chain+0x154>
 800527e:	683b      	ldr	r3, [r7, #0]
 8005280:	2b00      	cmp	r3, #0
 8005282:	d006      	beq.n	8005292 <create_chain+0x154>
			res = put_fat(fs, clst, ncl);		/* Link it from the previous one if needed */
 8005284:	69fa      	ldr	r2, [r7, #28]
 8005286:	6839      	ldr	r1, [r7, #0]
 8005288:	6938      	ldr	r0, [r7, #16]
 800528a:	f7ff fdd9 	bl	8004e40 <put_fat>
 800528e:	4603      	mov	r3, r0
 8005290:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 8005292:	7dfb      	ldrb	r3, [r7, #23]
 8005294:	2b00      	cmp	r3, #0
 8005296:	d116      	bne.n	80052c6 <create_chain+0x188>
		fs->last_clst = ncl;
 8005298:	693b      	ldr	r3, [r7, #16]
 800529a:	69fa      	ldr	r2, [r7, #28]
 800529c:	611a      	str	r2, [r3, #16]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 800529e:	693b      	ldr	r3, [r7, #16]
 80052a0:	695a      	ldr	r2, [r3, #20]
 80052a2:	693b      	ldr	r3, [r7, #16]
 80052a4:	699b      	ldr	r3, [r3, #24]
 80052a6:	3b02      	subs	r3, #2
 80052a8:	429a      	cmp	r2, r3
 80052aa:	d804      	bhi.n	80052b6 <create_chain+0x178>
 80052ac:	693b      	ldr	r3, [r7, #16]
 80052ae:	695b      	ldr	r3, [r3, #20]
 80052b0:	1e5a      	subs	r2, r3, #1
 80052b2:	693b      	ldr	r3, [r7, #16]
 80052b4:	615a      	str	r2, [r3, #20]
		fs->fsi_flag |= 1;
 80052b6:	693b      	ldr	r3, [r7, #16]
 80052b8:	795b      	ldrb	r3, [r3, #5]
 80052ba:	f043 0301 	orr.w	r3, r3, #1
 80052be:	b2da      	uxtb	r2, r3
 80052c0:	693b      	ldr	r3, [r7, #16]
 80052c2:	715a      	strb	r2, [r3, #5]
 80052c4:	e007      	b.n	80052d6 <create_chain+0x198>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 80052c6:	7dfb      	ldrb	r3, [r7, #23]
 80052c8:	2b01      	cmp	r3, #1
 80052ca:	d102      	bne.n	80052d2 <create_chain+0x194>
 80052cc:	f04f 33ff 	mov.w	r3, #4294967295
 80052d0:	e000      	b.n	80052d4 <create_chain+0x196>
 80052d2:	2301      	movs	r3, #1
 80052d4:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 80052d6:	69fb      	ldr	r3, [r7, #28]
}
 80052d8:	4618      	mov	r0, r3
 80052da:	3720      	adds	r7, #32
 80052dc:	46bd      	mov	sp, r7
 80052de:	bd80      	pop	{r7, pc}

080052e0 <dir_clear>:
#if !FF_FS_READONLY
static FRESULT dir_clear (	/* Returns FR_OK or FR_DISK_ERR */
	FATFS *fs,		/* Filesystem object */
	DWORD clst		/* Directory table to clear */
)
{
 80052e0:	b580      	push	{r7, lr}
 80052e2:	b086      	sub	sp, #24
 80052e4:	af00      	add	r7, sp, #0
 80052e6:	6078      	str	r0, [r7, #4]
 80052e8:	6039      	str	r1, [r7, #0]
	LBA_t sect;
	UINT n, szb;
	BYTE *ibuf;


	if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 80052ea:	6878      	ldr	r0, [r7, #4]
 80052ec:	f7ff fbdf 	bl	8004aae <sync_window>
 80052f0:	4603      	mov	r3, r0
 80052f2:	2b00      	cmp	r3, #0
 80052f4:	d001      	beq.n	80052fa <dir_clear+0x1a>
 80052f6:	2301      	movs	r3, #1
 80052f8:	e036      	b.n	8005368 <dir_clear+0x88>
	sect = clst2sect(fs, clst);		/* Top of the cluster */
 80052fa:	6839      	ldr	r1, [r7, #0]
 80052fc:	6878      	ldr	r0, [r7, #4]
 80052fe:	f7ff fcad 	bl	8004c5c <clst2sect>
 8005302:	6138      	str	r0, [r7, #16]
	fs->winsect = sect;				/* Set window to top of the cluster */
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	693a      	ldr	r2, [r7, #16]
 8005308:	631a      	str	r2, [r3, #48]	@ 0x30
	memset(fs->win, 0, sizeof fs->win);	/* Clear window buffer */
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	3334      	adds	r3, #52	@ 0x34
 800530e:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8005312:	2100      	movs	r1, #0
 8005314:	4618      	mov	r0, r3
 8005316:	f00b fce5 	bl	8010ce4 <memset>
		for (n = 0; n < fs->csize && disk_write(fs->pdrv, ibuf, sect + n, szb) == RES_OK; n += szb) ;	/* Fill the cluster with 0 */
		ff_memfree(ibuf);
	} else
#endif
	{
		ibuf = fs->win; szb = 1;	/* Use window buffer (many single-sector writes may take a time) */
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	3334      	adds	r3, #52	@ 0x34
 800531e:	60fb      	str	r3, [r7, #12]
 8005320:	2301      	movs	r3, #1
 8005322:	60bb      	str	r3, [r7, #8]
		for (n = 0; n < fs->csize && disk_write(fs->pdrv, ibuf, sect + n, szb) == RES_OK; n += szb) ;	/* Fill the cluster with 0 */
 8005324:	2300      	movs	r3, #0
 8005326:	617b      	str	r3, [r7, #20]
 8005328:	e003      	b.n	8005332 <dir_clear+0x52>
 800532a:	697a      	ldr	r2, [r7, #20]
 800532c:	68bb      	ldr	r3, [r7, #8]
 800532e:	4413      	add	r3, r2
 8005330:	617b      	str	r3, [r7, #20]
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	895b      	ldrh	r3, [r3, #10]
 8005336:	461a      	mov	r2, r3
 8005338:	697b      	ldr	r3, [r7, #20]
 800533a:	4293      	cmp	r3, r2
 800533c:	d20b      	bcs.n	8005356 <dir_clear+0x76>
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	7858      	ldrb	r0, [r3, #1]
 8005342:	693a      	ldr	r2, [r7, #16]
 8005344:	697b      	ldr	r3, [r7, #20]
 8005346:	441a      	add	r2, r3
 8005348:	68bb      	ldr	r3, [r7, #8]
 800534a:	68f9      	ldr	r1, [r7, #12]
 800534c:	f7ff fa54 	bl	80047f8 <disk_write>
 8005350:	4603      	mov	r3, r0
 8005352:	2b00      	cmp	r3, #0
 8005354:	d0e9      	beq.n	800532a <dir_clear+0x4a>
	}
	return (n == fs->csize) ? FR_OK : FR_DISK_ERR;
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	895b      	ldrh	r3, [r3, #10]
 800535a:	461a      	mov	r2, r3
 800535c:	697b      	ldr	r3, [r7, #20]
 800535e:	4293      	cmp	r3, r2
 8005360:	bf14      	ite	ne
 8005362:	2301      	movne	r3, #1
 8005364:	2300      	moveq	r3, #0
 8005366:	b2db      	uxtb	r3, r3
}
 8005368:	4618      	mov	r0, r3
 800536a:	3718      	adds	r7, #24
 800536c:	46bd      	mov	sp, r7
 800536e:	bd80      	pop	{r7, pc}

08005370 <dir_sdi>:

static FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 8005370:	b580      	push	{r7, lr}
 8005372:	b086      	sub	sp, #24
 8005374:	af00      	add	r7, sp, #0
 8005376:	6078      	str	r0, [r7, #4]
 8005378:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((FF_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 8005380:	683b      	ldr	r3, [r7, #0]
 8005382:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8005386:	d204      	bcs.n	8005392 <dir_sdi+0x22>
 8005388:	683b      	ldr	r3, [r7, #0]
 800538a:	f003 031f 	and.w	r3, r3, #31
 800538e:	2b00      	cmp	r3, #0
 8005390:	d001      	beq.n	8005396 <dir_sdi+0x26>
		return FR_INT_ERR;
 8005392:	2302      	movs	r3, #2
 8005394:	e071      	b.n	800547a <dir_sdi+0x10a>
	}
	dp->dptr = ofs;				/* Set current offset */
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	683a      	ldr	r2, [r7, #0]
 800539a:	611a      	str	r2, [r3, #16]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	689b      	ldr	r3, [r3, #8]
 80053a0:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 80053a2:	697b      	ldr	r3, [r7, #20]
 80053a4:	2b00      	cmp	r3, #0
 80053a6:	d106      	bne.n	80053b6 <dir_sdi+0x46>
 80053a8:	693b      	ldr	r3, [r7, #16]
 80053aa:	781b      	ldrb	r3, [r3, #0]
 80053ac:	2b02      	cmp	r3, #2
 80053ae:	d902      	bls.n	80053b6 <dir_sdi+0x46>
		clst = (DWORD)fs->dirbase;
 80053b0:	693b      	ldr	r3, [r7, #16]
 80053b2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80053b4:	617b      	str	r3, [r7, #20]
		if (FF_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory on the FAT volume) */
 80053b6:	697b      	ldr	r3, [r7, #20]
 80053b8:	2b00      	cmp	r3, #0
 80053ba:	d10c      	bne.n	80053d6 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir) return FR_INT_ERR;	/* Is index out of range? */
 80053bc:	683b      	ldr	r3, [r7, #0]
 80053be:	095b      	lsrs	r3, r3, #5
 80053c0:	693a      	ldr	r2, [r7, #16]
 80053c2:	8912      	ldrh	r2, [r2, #8]
 80053c4:	4293      	cmp	r3, r2
 80053c6:	d301      	bcc.n	80053cc <dir_sdi+0x5c>
 80053c8:	2302      	movs	r3, #2
 80053ca:	e056      	b.n	800547a <dir_sdi+0x10a>
		dp->sect = fs->dirbase;
 80053cc:	693b      	ldr	r3, [r7, #16]
 80053ce:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	619a      	str	r2, [r3, #24]
 80053d4:	e02d      	b.n	8005432 <dir_sdi+0xc2>

	} else {			/* Dynamic table (sub-directory or root-directory on the FAT32/exFAT volume) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 80053d6:	693b      	ldr	r3, [r7, #16]
 80053d8:	895b      	ldrh	r3, [r3, #10]
 80053da:	461a      	mov	r2, r3
 80053dc:	693b      	ldr	r3, [r7, #16]
 80053de:	899b      	ldrh	r3, [r3, #12]
 80053e0:	fb02 f303 	mul.w	r3, r2, r3
 80053e4:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 80053e6:	e019      	b.n	800541c <dir_sdi+0xac>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	6979      	ldr	r1, [r7, #20]
 80053ec:	4618      	mov	r0, r3
 80053ee:	f7ff fc54 	bl	8004c9a <get_fat>
 80053f2:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 80053f4:	697b      	ldr	r3, [r7, #20]
 80053f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80053fa:	d101      	bne.n	8005400 <dir_sdi+0x90>
 80053fc:	2301      	movs	r3, #1
 80053fe:	e03c      	b.n	800547a <dir_sdi+0x10a>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 8005400:	697b      	ldr	r3, [r7, #20]
 8005402:	2b01      	cmp	r3, #1
 8005404:	d904      	bls.n	8005410 <dir_sdi+0xa0>
 8005406:	693b      	ldr	r3, [r7, #16]
 8005408:	699b      	ldr	r3, [r3, #24]
 800540a:	697a      	ldr	r2, [r7, #20]
 800540c:	429a      	cmp	r2, r3
 800540e:	d301      	bcc.n	8005414 <dir_sdi+0xa4>
 8005410:	2302      	movs	r3, #2
 8005412:	e032      	b.n	800547a <dir_sdi+0x10a>
			ofs -= csz;
 8005414:	683a      	ldr	r2, [r7, #0]
 8005416:	68fb      	ldr	r3, [r7, #12]
 8005418:	1ad3      	subs	r3, r2, r3
 800541a:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 800541c:	683a      	ldr	r2, [r7, #0]
 800541e:	68fb      	ldr	r3, [r7, #12]
 8005420:	429a      	cmp	r2, r3
 8005422:	d2e1      	bcs.n	80053e8 <dir_sdi+0x78>
		}
		dp->sect = clst2sect(fs, clst);
 8005424:	6979      	ldr	r1, [r7, #20]
 8005426:	6938      	ldr	r0, [r7, #16]
 8005428:	f7ff fc18 	bl	8004c5c <clst2sect>
 800542c:	4602      	mov	r2, r0
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	619a      	str	r2, [r3, #24]
	}
	dp->clust = clst;					/* Current cluster# */
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	697a      	ldr	r2, [r7, #20]
 8005436:	615a      	str	r2, [r3, #20]
	if (dp->sect == 0) return FR_INT_ERR;
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	699b      	ldr	r3, [r3, #24]
 800543c:	2b00      	cmp	r3, #0
 800543e:	d101      	bne.n	8005444 <dir_sdi+0xd4>
 8005440:	2302      	movs	r3, #2
 8005442:	e01a      	b.n	800547a <dir_sdi+0x10a>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	699a      	ldr	r2, [r3, #24]
 8005448:	693b      	ldr	r3, [r7, #16]
 800544a:	899b      	ldrh	r3, [r3, #12]
 800544c:	4619      	mov	r1, r3
 800544e:	683b      	ldr	r3, [r7, #0]
 8005450:	fbb3 f3f1 	udiv	r3, r3, r1
 8005454:	441a      	add	r2, r3
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	619a      	str	r2, [r3, #24]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 800545a:	693b      	ldr	r3, [r7, #16]
 800545c:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 8005460:	693b      	ldr	r3, [r7, #16]
 8005462:	899b      	ldrh	r3, [r3, #12]
 8005464:	461a      	mov	r2, r3
 8005466:	683b      	ldr	r3, [r7, #0]
 8005468:	fbb3 f0f2 	udiv	r0, r3, r2
 800546c:	fb00 f202 	mul.w	r2, r0, r2
 8005470:	1a9b      	subs	r3, r3, r2
 8005472:	18ca      	adds	r2, r1, r3
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	61da      	str	r2, [r3, #28]

	return FR_OK;
 8005478:	2300      	movs	r3, #0
}
 800547a:	4618      	mov	r0, r3
 800547c:	3718      	adds	r7, #24
 800547e:	46bd      	mov	sp, r7
 8005480:	bd80      	pop	{r7, pc}

08005482 <dir_next>:

static FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,				/* Pointer to the directory object */
	int stretch				/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 8005482:	b580      	push	{r7, lr}
 8005484:	b086      	sub	sp, #24
 8005486:	af00      	add	r7, sp, #0
 8005488:	6078      	str	r0, [r7, #4]
 800548a:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	613b      	str	r3, [r7, #16]


	ofs = dp->dptr + SZDIRE;	/* Next entry */
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	691b      	ldr	r3, [r3, #16]
 8005496:	3320      	adds	r3, #32
 8005498:	60fb      	str	r3, [r7, #12]
	if (ofs >= (DWORD)((FF_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) dp->sect = 0;	/* Disable it if the offset reached the max value */
 800549a:	68fb      	ldr	r3, [r7, #12]
 800549c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80054a0:	d302      	bcc.n	80054a8 <dir_next+0x26>
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	2200      	movs	r2, #0
 80054a6:	619a      	str	r2, [r3, #24]
	if (dp->sect == 0) return FR_NO_FILE;	/* Report EOT if it has been disabled */
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	699b      	ldr	r3, [r3, #24]
 80054ac:	2b00      	cmp	r3, #0
 80054ae:	d101      	bne.n	80054b4 <dir_next+0x32>
 80054b0:	2304      	movs	r3, #4
 80054b2:	e088      	b.n	80055c6 <dir_next+0x144>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 80054b4:	693b      	ldr	r3, [r7, #16]
 80054b6:	899b      	ldrh	r3, [r3, #12]
 80054b8:	461a      	mov	r2, r3
 80054ba:	68fb      	ldr	r3, [r7, #12]
 80054bc:	fbb3 f1f2 	udiv	r1, r3, r2
 80054c0:	fb01 f202 	mul.w	r2, r1, r2
 80054c4:	1a9b      	subs	r3, r3, r2
 80054c6:	2b00      	cmp	r3, #0
 80054c8:	d16a      	bne.n	80055a0 <dir_next+0x11e>
		dp->sect++;				/* Next sector */
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	699b      	ldr	r3, [r3, #24]
 80054ce:	1c5a      	adds	r2, r3, #1
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	619a      	str	r2, [r3, #24]

		if (dp->clust == 0) {	/* Static table */
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	695b      	ldr	r3, [r3, #20]
 80054d8:	2b00      	cmp	r3, #0
 80054da:	d10a      	bne.n	80054f2 <dir_next+0x70>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 80054dc:	68fb      	ldr	r3, [r7, #12]
 80054de:	095b      	lsrs	r3, r3, #5
 80054e0:	693a      	ldr	r2, [r7, #16]
 80054e2:	8912      	ldrh	r2, [r2, #8]
 80054e4:	4293      	cmp	r3, r2
 80054e6:	d35b      	bcc.n	80055a0 <dir_next+0x11e>
				dp->sect = 0; return FR_NO_FILE;
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	2200      	movs	r2, #0
 80054ec:	619a      	str	r2, [r3, #24]
 80054ee:	2304      	movs	r3, #4
 80054f0:	e069      	b.n	80055c6 <dir_next+0x144>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {	/* Cluster changed? */
 80054f2:	693b      	ldr	r3, [r7, #16]
 80054f4:	899b      	ldrh	r3, [r3, #12]
 80054f6:	461a      	mov	r2, r3
 80054f8:	68fb      	ldr	r3, [r7, #12]
 80054fa:	fbb3 f3f2 	udiv	r3, r3, r2
 80054fe:	693a      	ldr	r2, [r7, #16]
 8005500:	8952      	ldrh	r2, [r2, #10]
 8005502:	3a01      	subs	r2, #1
 8005504:	4013      	ands	r3, r2
 8005506:	2b00      	cmp	r3, #0
 8005508:	d14a      	bne.n	80055a0 <dir_next+0x11e>
				clst = get_fat(&dp->obj, dp->clust);		/* Get next cluster */
 800550a:	687a      	ldr	r2, [r7, #4]
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	695b      	ldr	r3, [r3, #20]
 8005510:	4619      	mov	r1, r3
 8005512:	4610      	mov	r0, r2
 8005514:	f7ff fbc1 	bl	8004c9a <get_fat>
 8005518:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;			/* Internal error */
 800551a:	697b      	ldr	r3, [r7, #20]
 800551c:	2b01      	cmp	r3, #1
 800551e:	d801      	bhi.n	8005524 <dir_next+0xa2>
 8005520:	2302      	movs	r3, #2
 8005522:	e050      	b.n	80055c6 <dir_next+0x144>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8005524:	697b      	ldr	r3, [r7, #20]
 8005526:	f1b3 3fff 	cmp.w	r3, #4294967295
 800552a:	d101      	bne.n	8005530 <dir_next+0xae>
 800552c:	2301      	movs	r3, #1
 800552e:	e04a      	b.n	80055c6 <dir_next+0x144>
				if (clst >= fs->n_fatent) {					/* It reached end of dynamic table */
 8005530:	693b      	ldr	r3, [r7, #16]
 8005532:	699b      	ldr	r3, [r3, #24]
 8005534:	697a      	ldr	r2, [r7, #20]
 8005536:	429a      	cmp	r2, r3
 8005538:	d328      	bcc.n	800558c <dir_next+0x10a>
#if !FF_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 800553a:	683b      	ldr	r3, [r7, #0]
 800553c:	2b00      	cmp	r3, #0
 800553e:	d104      	bne.n	800554a <dir_next+0xc8>
						dp->sect = 0; return FR_NO_FILE;
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	2200      	movs	r2, #0
 8005544:	619a      	str	r2, [r3, #24]
 8005546:	2304      	movs	r3, #4
 8005548:	e03d      	b.n	80055c6 <dir_next+0x144>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 800554a:	687a      	ldr	r2, [r7, #4]
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	695b      	ldr	r3, [r3, #20]
 8005550:	4619      	mov	r1, r3
 8005552:	4610      	mov	r0, r2
 8005554:	f7ff fdf3 	bl	800513e <create_chain>
 8005558:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 800555a:	697b      	ldr	r3, [r7, #20]
 800555c:	2b00      	cmp	r3, #0
 800555e:	d101      	bne.n	8005564 <dir_next+0xe2>
 8005560:	2307      	movs	r3, #7
 8005562:	e030      	b.n	80055c6 <dir_next+0x144>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 8005564:	697b      	ldr	r3, [r7, #20]
 8005566:	2b01      	cmp	r3, #1
 8005568:	d101      	bne.n	800556e <dir_next+0xec>
 800556a:	2302      	movs	r3, #2
 800556c:	e02b      	b.n	80055c6 <dir_next+0x144>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800556e:	697b      	ldr	r3, [r7, #20]
 8005570:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005574:	d101      	bne.n	800557a <dir_next+0xf8>
 8005576:	2301      	movs	r3, #1
 8005578:	e025      	b.n	80055c6 <dir_next+0x144>
					if (dir_clear(fs, clst) != FR_OK) return FR_DISK_ERR;	/* Clean up the stretched table */
 800557a:	6979      	ldr	r1, [r7, #20]
 800557c:	6938      	ldr	r0, [r7, #16]
 800557e:	f7ff feaf 	bl	80052e0 <dir_clear>
 8005582:	4603      	mov	r3, r0
 8005584:	2b00      	cmp	r3, #0
 8005586:	d001      	beq.n	800558c <dir_next+0x10a>
 8005588:	2301      	movs	r3, #1
 800558a:	e01c      	b.n	80055c6 <dir_next+0x144>
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	697a      	ldr	r2, [r7, #20]
 8005590:	615a      	str	r2, [r3, #20]
				dp->sect = clst2sect(fs, clst);
 8005592:	6979      	ldr	r1, [r7, #20]
 8005594:	6938      	ldr	r0, [r7, #16]
 8005596:	f7ff fb61 	bl	8004c5c <clst2sect>
 800559a:	4602      	mov	r2, r0
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	619a      	str	r2, [r3, #24]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	68fa      	ldr	r2, [r7, #12]
 80055a4:	611a      	str	r2, [r3, #16]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 80055a6:	693b      	ldr	r3, [r7, #16]
 80055a8:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 80055ac:	693b      	ldr	r3, [r7, #16]
 80055ae:	899b      	ldrh	r3, [r3, #12]
 80055b0:	461a      	mov	r2, r3
 80055b2:	68fb      	ldr	r3, [r7, #12]
 80055b4:	fbb3 f0f2 	udiv	r0, r3, r2
 80055b8:	fb00 f202 	mul.w	r2, r0, r2
 80055bc:	1a9b      	subs	r3, r3, r2
 80055be:	18ca      	adds	r2, r1, r3
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	61da      	str	r2, [r3, #28]

	return FR_OK;
 80055c4:	2300      	movs	r3, #0
}
 80055c6:	4618      	mov	r0, r3
 80055c8:	3718      	adds	r7, #24
 80055ca:	46bd      	mov	sp, r7
 80055cc:	bd80      	pop	{r7, pc}

080055ce <dir_alloc>:

static FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,				/* Pointer to the directory object */
	UINT n_ent				/* Number of contiguous entries to allocate */
)
{
 80055ce:	b580      	push	{r7, lr}
 80055d0:	b086      	sub	sp, #24
 80055d2:	af00      	add	r7, sp, #0
 80055d4:	6078      	str	r0, [r7, #4]
 80055d6:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 80055de:	2100      	movs	r1, #0
 80055e0:	6878      	ldr	r0, [r7, #4]
 80055e2:	f7ff fec5 	bl	8005370 <dir_sdi>
 80055e6:	4603      	mov	r3, r0
 80055e8:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 80055ea:	7dfb      	ldrb	r3, [r7, #23]
 80055ec:	2b00      	cmp	r3, #0
 80055ee:	d12b      	bne.n	8005648 <dir_alloc+0x7a>
		n = 0;
 80055f0:	2300      	movs	r3, #0
 80055f2:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	699b      	ldr	r3, [r3, #24]
 80055f8:	4619      	mov	r1, r3
 80055fa:	68f8      	ldr	r0, [r7, #12]
 80055fc:	f7ff fa93 	bl	8004b26 <move_window>
 8005600:	4603      	mov	r3, r0
 8005602:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8005604:	7dfb      	ldrb	r3, [r7, #23]
 8005606:	2b00      	cmp	r3, #0
 8005608:	d11d      	bne.n	8005646 <dir_alloc+0x78>
#if FF_FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {	/* Is the entry free? */
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {	/* Is the entry free? */
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	69db      	ldr	r3, [r3, #28]
 800560e:	781b      	ldrb	r3, [r3, #0]
 8005610:	2be5      	cmp	r3, #229	@ 0xe5
 8005612:	d004      	beq.n	800561e <dir_alloc+0x50>
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	69db      	ldr	r3, [r3, #28]
 8005618:	781b      	ldrb	r3, [r3, #0]
 800561a:	2b00      	cmp	r3, #0
 800561c:	d107      	bne.n	800562e <dir_alloc+0x60>
#endif
				if (++n == n_ent) break;	/* Is a block of contiguous free entries found? */
 800561e:	693b      	ldr	r3, [r7, #16]
 8005620:	3301      	adds	r3, #1
 8005622:	613b      	str	r3, [r7, #16]
 8005624:	693a      	ldr	r2, [r7, #16]
 8005626:	683b      	ldr	r3, [r7, #0]
 8005628:	429a      	cmp	r2, r3
 800562a:	d102      	bne.n	8005632 <dir_alloc+0x64>
 800562c:	e00c      	b.n	8005648 <dir_alloc+0x7a>
			} else {
				n = 0;				/* Not a free entry, restart to search */
 800562e:	2300      	movs	r3, #0
 8005630:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);	/* Next entry with table stretch enabled */
 8005632:	2101      	movs	r1, #1
 8005634:	6878      	ldr	r0, [r7, #4]
 8005636:	f7ff ff24 	bl	8005482 <dir_next>
 800563a:	4603      	mov	r3, r0
 800563c:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);
 800563e:	7dfb      	ldrb	r3, [r7, #23]
 8005640:	2b00      	cmp	r3, #0
 8005642:	d0d7      	beq.n	80055f4 <dir_alloc+0x26>
 8005644:	e000      	b.n	8005648 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 8005646:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 8005648:	7dfb      	ldrb	r3, [r7, #23]
 800564a:	2b04      	cmp	r3, #4
 800564c:	d101      	bne.n	8005652 <dir_alloc+0x84>
 800564e:	2307      	movs	r3, #7
 8005650:	75fb      	strb	r3, [r7, #23]
	return res;
 8005652:	7dfb      	ldrb	r3, [r7, #23]
}
 8005654:	4618      	mov	r0, r3
 8005656:	3718      	adds	r7, #24
 8005658:	46bd      	mov	sp, r7
 800565a:	bd80      	pop	{r7, pc}

0800565c <ld_clust>:

static DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,			/* Pointer to the fs object */
	const BYTE* dir		/* Pointer to the key entry */
)
{
 800565c:	b580      	push	{r7, lr}
 800565e:	b084      	sub	sp, #16
 8005660:	af00      	add	r7, sp, #0
 8005662:	6078      	str	r0, [r7, #4]
 8005664:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 8005666:	683b      	ldr	r3, [r7, #0]
 8005668:	331a      	adds	r3, #26
 800566a:	4618      	mov	r0, r3
 800566c:	f7ff f97a 	bl	8004964 <ld_word>
 8005670:	4603      	mov	r3, r0
 8005672:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	781b      	ldrb	r3, [r3, #0]
 8005678:	2b03      	cmp	r3, #3
 800567a:	d109      	bne.n	8005690 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 800567c:	683b      	ldr	r3, [r7, #0]
 800567e:	3314      	adds	r3, #20
 8005680:	4618      	mov	r0, r3
 8005682:	f7ff f96f 	bl	8004964 <ld_word>
 8005686:	4603      	mov	r3, r0
 8005688:	041b      	lsls	r3, r3, #16
 800568a:	68fa      	ldr	r2, [r7, #12]
 800568c:	4313      	orrs	r3, r2
 800568e:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 8005690:	68fb      	ldr	r3, [r7, #12]
}
 8005692:	4618      	mov	r0, r3
 8005694:	3710      	adds	r7, #16
 8005696:	46bd      	mov	sp, r7
 8005698:	bd80      	pop	{r7, pc}

0800569a <st_clust>:
static void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 800569a:	b580      	push	{r7, lr}
 800569c:	b084      	sub	sp, #16
 800569e:	af00      	add	r7, sp, #0
 80056a0:	60f8      	str	r0, [r7, #12]
 80056a2:	60b9      	str	r1, [r7, #8]
 80056a4:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 80056a6:	68bb      	ldr	r3, [r7, #8]
 80056a8:	331a      	adds	r3, #26
 80056aa:	687a      	ldr	r2, [r7, #4]
 80056ac:	b292      	uxth	r2, r2
 80056ae:	4611      	mov	r1, r2
 80056b0:	4618      	mov	r0, r3
 80056b2:	f7ff f993 	bl	80049dc <st_word>
	if (fs->fs_type == FS_FAT32) {
 80056b6:	68fb      	ldr	r3, [r7, #12]
 80056b8:	781b      	ldrb	r3, [r3, #0]
 80056ba:	2b03      	cmp	r3, #3
 80056bc:	d109      	bne.n	80056d2 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 80056be:	68bb      	ldr	r3, [r7, #8]
 80056c0:	f103 0214 	add.w	r2, r3, #20
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	0c1b      	lsrs	r3, r3, #16
 80056c8:	b29b      	uxth	r3, r3
 80056ca:	4619      	mov	r1, r3
 80056cc:	4610      	mov	r0, r2
 80056ce:	f7ff f985 	bl	80049dc <st_word>
	}
}
 80056d2:	bf00      	nop
 80056d4:	3710      	adds	r7, #16
 80056d6:	46bd      	mov	sp, r7
 80056d8:	bd80      	pop	{r7, pc}

080056da <dir_read>:

static FRESULT dir_read (
	DIR* dp,		/* Pointer to the directory object */
	int vol			/* Filtered by 0:file/directory or 1:volume label */
)
{
 80056da:	b580      	push	{r7, lr}
 80056dc:	b086      	sub	sp, #24
 80056de:	af00      	add	r7, sp, #0
 80056e0:	6078      	str	r0, [r7, #4]
 80056e2:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_NO_FILE;
 80056e4:	2304      	movs	r3, #4
 80056e6:	75fb      	strb	r3, [r7, #23]
	FATFS *fs = dp->obj.fs;
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	613b      	str	r3, [r7, #16]
	BYTE attr, b;
#if FF_USE_LFN
	BYTE ord = 0xFF, sum = 0xFF;
#endif

	while (dp->sect) {
 80056ee:	e03c      	b.n	800576a <dir_read+0x90>
		res = move_window(fs, dp->sect);
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	699b      	ldr	r3, [r3, #24]
 80056f4:	4619      	mov	r1, r3
 80056f6:	6938      	ldr	r0, [r7, #16]
 80056f8:	f7ff fa15 	bl	8004b26 <move_window>
 80056fc:	4603      	mov	r3, r0
 80056fe:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8005700:	7dfb      	ldrb	r3, [r7, #23]
 8005702:	2b00      	cmp	r3, #0
 8005704:	d136      	bne.n	8005774 <dir_read+0x9a>
		b = dp->dir[DIR_Name];	/* Test for the entry type */
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	69db      	ldr	r3, [r3, #28]
 800570a:	781b      	ldrb	r3, [r3, #0]
 800570c:	73fb      	strb	r3, [r7, #15]
		if (b == 0) {
 800570e:	7bfb      	ldrb	r3, [r7, #15]
 8005710:	2b00      	cmp	r3, #0
 8005712:	d102      	bne.n	800571a <dir_read+0x40>
			res = FR_NO_FILE; break; /* Reached to end of the directory */
 8005714:	2304      	movs	r3, #4
 8005716:	75fb      	strb	r3, [r7, #23]
 8005718:	e031      	b.n	800577e <dir_read+0xa4>
				}
			}
		} else
#endif
		{	/* On the FAT/FAT32 volume */
			dp->obj.attr = attr = dp->dir[DIR_Attr] & AM_MASK;	/* Get attribute */
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	69db      	ldr	r3, [r3, #28]
 800571e:	330b      	adds	r3, #11
 8005720:	781b      	ldrb	r3, [r3, #0]
 8005722:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005726:	73bb      	strb	r3, [r7, #14]
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	7bba      	ldrb	r2, [r7, #14]
 800572c:	719a      	strb	r2, [r3, #6]
					}
					break;
				}
			}
#else		/* Non LFN configuration */
			if (b != DDEM && b != '.' && attr != AM_LFN && (int)((attr & ~AM_ARC) == AM_VOL) == vol) {	/* Is it a valid entry? */
 800572e:	7bfb      	ldrb	r3, [r7, #15]
 8005730:	2be5      	cmp	r3, #229	@ 0xe5
 8005732:	d011      	beq.n	8005758 <dir_read+0x7e>
 8005734:	7bfb      	ldrb	r3, [r7, #15]
 8005736:	2b2e      	cmp	r3, #46	@ 0x2e
 8005738:	d00e      	beq.n	8005758 <dir_read+0x7e>
 800573a:	7bbb      	ldrb	r3, [r7, #14]
 800573c:	2b0f      	cmp	r3, #15
 800573e:	d00b      	beq.n	8005758 <dir_read+0x7e>
 8005740:	7bbb      	ldrb	r3, [r7, #14]
 8005742:	f023 0320 	bic.w	r3, r3, #32
 8005746:	2b08      	cmp	r3, #8
 8005748:	bf0c      	ite	eq
 800574a:	2301      	moveq	r3, #1
 800574c:	2300      	movne	r3, #0
 800574e:	b2db      	uxtb	r3, r3
 8005750:	461a      	mov	r2, r3
 8005752:	683b      	ldr	r3, [r7, #0]
 8005754:	4293      	cmp	r3, r2
 8005756:	d00f      	beq.n	8005778 <dir_read+0x9e>
				break;
			}
#endif
		}
		res = dir_next(dp, 0);		/* Next entry */
 8005758:	2100      	movs	r1, #0
 800575a:	6878      	ldr	r0, [r7, #4]
 800575c:	f7ff fe91 	bl	8005482 <dir_next>
 8005760:	4603      	mov	r3, r0
 8005762:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8005764:	7dfb      	ldrb	r3, [r7, #23]
 8005766:	2b00      	cmp	r3, #0
 8005768:	d108      	bne.n	800577c <dir_read+0xa2>
	while (dp->sect) {
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	699b      	ldr	r3, [r3, #24]
 800576e:	2b00      	cmp	r3, #0
 8005770:	d1be      	bne.n	80056f0 <dir_read+0x16>
 8005772:	e004      	b.n	800577e <dir_read+0xa4>
		if (res != FR_OK) break;
 8005774:	bf00      	nop
 8005776:	e002      	b.n	800577e <dir_read+0xa4>
				break;
 8005778:	bf00      	nop
 800577a:	e000      	b.n	800577e <dir_read+0xa4>
		if (res != FR_OK) break;
 800577c:	bf00      	nop
	}

	if (res != FR_OK) dp->sect = 0;		/* Terminate the read operation on error or EOT */
 800577e:	7dfb      	ldrb	r3, [r7, #23]
 8005780:	2b00      	cmp	r3, #0
 8005782:	d002      	beq.n	800578a <dir_read+0xb0>
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	2200      	movs	r2, #0
 8005788:	619a      	str	r2, [r3, #24]
	return res;
 800578a:	7dfb      	ldrb	r3, [r7, #23]
}
 800578c:	4618      	mov	r0, r3
 800578e:	3718      	adds	r7, #24
 8005790:	46bd      	mov	sp, r7
 8005792:	bd80      	pop	{r7, pc}

08005794 <dir_find>:
/*-----------------------------------------------------------------------*/

static FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp					/* Pointer to the directory object with the file name */
)
{
 8005794:	b580      	push	{r7, lr}
 8005796:	b086      	sub	sp, #24
 8005798:	af00      	add	r7, sp, #0
 800579a:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	613b      	str	r3, [r7, #16]
	BYTE c;
#if FF_USE_LFN
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 80057a2:	2100      	movs	r1, #0
 80057a4:	6878      	ldr	r0, [r7, #4]
 80057a6:	f7ff fde3 	bl	8005370 <dir_sdi>
 80057aa:	4603      	mov	r3, r0
 80057ac:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 80057ae:	7dfb      	ldrb	r3, [r7, #23]
 80057b0:	2b00      	cmp	r3, #0
 80057b2:	d001      	beq.n	80057b8 <dir_find+0x24>
 80057b4:	7dfb      	ldrb	r3, [r7, #23]
 80057b6:	e03e      	b.n	8005836 <dir_find+0xa2>
	/* On the FAT/FAT32 volume */
#if FF_USE_LFN
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	699b      	ldr	r3, [r3, #24]
 80057bc:	4619      	mov	r1, r3
 80057be:	6938      	ldr	r0, [r7, #16]
 80057c0:	f7ff f9b1 	bl	8004b26 <move_window>
 80057c4:	4603      	mov	r3, r0
 80057c6:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 80057c8:	7dfb      	ldrb	r3, [r7, #23]
 80057ca:	2b00      	cmp	r3, #0
 80057cc:	d12f      	bne.n	800582e <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	69db      	ldr	r3, [r3, #28]
 80057d2:	781b      	ldrb	r3, [r3, #0]
 80057d4:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 80057d6:	7bfb      	ldrb	r3, [r7, #15]
 80057d8:	2b00      	cmp	r3, #0
 80057da:	d102      	bne.n	80057e2 <dir_find+0x4e>
 80057dc:	2304      	movs	r3, #4
 80057de:	75fb      	strb	r3, [r7, #23]
 80057e0:	e028      	b.n	8005834 <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !memcmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	69db      	ldr	r3, [r3, #28]
 80057e6:	330b      	adds	r3, #11
 80057e8:	781b      	ldrb	r3, [r3, #0]
 80057ea:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80057ee:	b2da      	uxtb	r2, r3
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !memcmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	69db      	ldr	r3, [r3, #28]
 80057f8:	330b      	adds	r3, #11
 80057fa:	781b      	ldrb	r3, [r3, #0]
 80057fc:	f003 0308 	and.w	r3, r3, #8
 8005800:	2b00      	cmp	r3, #0
 8005802:	d10a      	bne.n	800581a <dir_find+0x86>
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	69d8      	ldr	r0, [r3, #28]
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	3320      	adds	r3, #32
 800580c:	220b      	movs	r2, #11
 800580e:	4619      	mov	r1, r3
 8005810:	f00b fa58 	bl	8010cc4 <memcmp>
 8005814:	4603      	mov	r3, r0
 8005816:	2b00      	cmp	r3, #0
 8005818:	d00b      	beq.n	8005832 <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 800581a:	2100      	movs	r1, #0
 800581c:	6878      	ldr	r0, [r7, #4]
 800581e:	f7ff fe30 	bl	8005482 <dir_next>
 8005822:	4603      	mov	r3, r0
 8005824:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 8005826:	7dfb      	ldrb	r3, [r7, #23]
 8005828:	2b00      	cmp	r3, #0
 800582a:	d0c5      	beq.n	80057b8 <dir_find+0x24>
 800582c:	e002      	b.n	8005834 <dir_find+0xa0>
		if (res != FR_OK) break;
 800582e:	bf00      	nop
 8005830:	e000      	b.n	8005834 <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !memcmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 8005832:	bf00      	nop

	return res;
 8005834:	7dfb      	ldrb	r3, [r7, #23]
}
 8005836:	4618      	mov	r0, r3
 8005838:	3718      	adds	r7, #24
 800583a:	46bd      	mov	sp, r7
 800583c:	bd80      	pop	{r7, pc}

0800583e <dir_register>:
/*-----------------------------------------------------------------------*/

static FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp						/* Target directory with object name to be created */
)
{
 800583e:	b580      	push	{r7, lr}
 8005840:	b084      	sub	sp, #16
 8005842:	af00      	add	r7, sp, #0
 8005844:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	681b      	ldr	r3, [r3, #0]
 800584a:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --n_ent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 800584c:	2101      	movs	r1, #1
 800584e:	6878      	ldr	r0, [r7, #4]
 8005850:	f7ff febd 	bl	80055ce <dir_alloc>
 8005854:	4603      	mov	r3, r0
 8005856:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 8005858:	7bfb      	ldrb	r3, [r7, #15]
 800585a:	2b00      	cmp	r3, #0
 800585c:	d11c      	bne.n	8005898 <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	699b      	ldr	r3, [r3, #24]
 8005862:	4619      	mov	r1, r3
 8005864:	68b8      	ldr	r0, [r7, #8]
 8005866:	f7ff f95e 	bl	8004b26 <move_window>
 800586a:	4603      	mov	r3, r0
 800586c:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800586e:	7bfb      	ldrb	r3, [r7, #15]
 8005870:	2b00      	cmp	r3, #0
 8005872:	d111      	bne.n	8005898 <dir_register+0x5a>
			memset(dp->dir, 0, SZDIRE);	/* Clean the entry */
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	69db      	ldr	r3, [r3, #28]
 8005878:	2220      	movs	r2, #32
 800587a:	2100      	movs	r1, #0
 800587c:	4618      	mov	r0, r3
 800587e:	f00b fa31 	bl	8010ce4 <memset>
			memcpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	69d8      	ldr	r0, [r3, #28]
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	3320      	adds	r3, #32
 800588a:	220b      	movs	r2, #11
 800588c:	4619      	mov	r1, r3
 800588e:	f00b fa93 	bl	8010db8 <memcpy>
#if FF_USE_LFN
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 8005892:	68bb      	ldr	r3, [r7, #8]
 8005894:	2201      	movs	r2, #1
 8005896:	711a      	strb	r2, [r3, #4]
		}
	}

	return res;
 8005898:	7bfb      	ldrb	r3, [r7, #15]
}
 800589a:	4618      	mov	r0, r3
 800589c:	3710      	adds	r7, #16
 800589e:	46bd      	mov	sp, r7
 80058a0:	bd80      	pop	{r7, pc}

080058a2 <dir_remove>:
/*-----------------------------------------------------------------------*/

static FRESULT dir_remove (	/* FR_OK:Succeeded, FR_DISK_ERR:A disk error */
	DIR* dp					/* Directory object pointing the entry to be removed */
)
{
 80058a2:	b580      	push	{r7, lr}
 80058a4:	b084      	sub	sp, #16
 80058a6:	af00      	add	r7, sp, #0
 80058a8:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	681b      	ldr	r3, [r3, #0]
 80058ae:	60fb      	str	r3, [r7, #12]
		} while (res == FR_OK);
		if (res == FR_NO_FILE) res = FR_INT_ERR;
	}
#else			/* Non LFN configuration */

	res = move_window(fs, dp->sect);
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	699b      	ldr	r3, [r3, #24]
 80058b4:	4619      	mov	r1, r3
 80058b6:	68f8      	ldr	r0, [r7, #12]
 80058b8:	f7ff f935 	bl	8004b26 <move_window>
 80058bc:	4603      	mov	r3, r0
 80058be:	72fb      	strb	r3, [r7, #11]
	if (res == FR_OK) {
 80058c0:	7afb      	ldrb	r3, [r7, #11]
 80058c2:	2b00      	cmp	r3, #0
 80058c4:	d106      	bne.n	80058d4 <dir_remove+0x32>
		dp->dir[DIR_Name] = DDEM;	/* Mark the entry 'deleted'.*/
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	69db      	ldr	r3, [r3, #28]
 80058ca:	22e5      	movs	r2, #229	@ 0xe5
 80058cc:	701a      	strb	r2, [r3, #0]
		fs->wflag = 1;
 80058ce:	68fb      	ldr	r3, [r7, #12]
 80058d0:	2201      	movs	r2, #1
 80058d2:	711a      	strb	r2, [r3, #4]
	}
#endif

	return res;
 80058d4:	7afb      	ldrb	r3, [r7, #11]
}
 80058d6:	4618      	mov	r0, r3
 80058d8:	3710      	adds	r7, #16
 80058da:	46bd      	mov	sp, r7
 80058dc:	bd80      	pop	{r7, pc}
	...

080058e0 <create_name>:

static FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,					/* Pointer to the directory object */
	const TCHAR** path			/* Pointer to pointer to the segment in the path string */
)
{
 80058e0:	b580      	push	{r7, lr}
 80058e2:	b08a      	sub	sp, #40	@ 0x28
 80058e4:	af00      	add	r7, sp, #0
 80058e6:	6078      	str	r0, [r7, #4]
 80058e8:	6039      	str	r1, [r7, #0]
	BYTE *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 80058ea:	683b      	ldr	r3, [r7, #0]
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	617b      	str	r3, [r7, #20]
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	3320      	adds	r3, #32
 80058f4:	613b      	str	r3, [r7, #16]
	memset(sfn, ' ', 11);
 80058f6:	220b      	movs	r2, #11
 80058f8:	2120      	movs	r1, #32
 80058fa:	6938      	ldr	r0, [r7, #16]
 80058fc:	f00b f9f2 	bl	8010ce4 <memset>
	si = i = 0; ni = 8;
 8005900:	2300      	movs	r3, #0
 8005902:	61bb      	str	r3, [r7, #24]
 8005904:	69bb      	ldr	r3, [r7, #24]
 8005906:	61fb      	str	r3, [r7, #28]
 8005908:	2308      	movs	r3, #8
 800590a:	623b      	str	r3, [r7, #32]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];				/* Get a byte */
 800590c:	69fb      	ldr	r3, [r7, #28]
 800590e:	1c5a      	adds	r2, r3, #1
 8005910:	61fa      	str	r2, [r7, #28]
 8005912:	697a      	ldr	r2, [r7, #20]
 8005914:	4413      	add	r3, r2
 8005916:	781b      	ldrb	r3, [r3, #0]
 8005918:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
		if (c <= ' ') break; 			/* Break if end of the path name */
 800591c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8005920:	2b20      	cmp	r3, #32
 8005922:	f240 8089 	bls.w	8005a38 <create_name+0x158>
		if (IsSeparator(c)) {			/* Break if a separator is found */
 8005926:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800592a:	2b2f      	cmp	r3, #47	@ 0x2f
 800592c:	d007      	beq.n	800593e <create_name+0x5e>
 800592e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8005932:	2b5c      	cmp	r3, #92	@ 0x5c
 8005934:	d110      	bne.n	8005958 <create_name+0x78>
			while (IsSeparator(p[si])) si++;	/* Skip duplicated separator if exist */
 8005936:	e002      	b.n	800593e <create_name+0x5e>
 8005938:	69fb      	ldr	r3, [r7, #28]
 800593a:	3301      	adds	r3, #1
 800593c:	61fb      	str	r3, [r7, #28]
 800593e:	697a      	ldr	r2, [r7, #20]
 8005940:	69fb      	ldr	r3, [r7, #28]
 8005942:	4413      	add	r3, r2
 8005944:	781b      	ldrb	r3, [r3, #0]
 8005946:	2b2f      	cmp	r3, #47	@ 0x2f
 8005948:	d0f6      	beq.n	8005938 <create_name+0x58>
 800594a:	697a      	ldr	r2, [r7, #20]
 800594c:	69fb      	ldr	r3, [r7, #28]
 800594e:	4413      	add	r3, r2
 8005950:	781b      	ldrb	r3, [r3, #0]
 8005952:	2b5c      	cmp	r3, #92	@ 0x5c
 8005954:	d0f0      	beq.n	8005938 <create_name+0x58>
			break;
 8005956:	e070      	b.n	8005a3a <create_name+0x15a>
		}
		if (c == '.' || i >= ni) {		/* End of body or field overflow? */
 8005958:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800595c:	2b2e      	cmp	r3, #46	@ 0x2e
 800595e:	d003      	beq.n	8005968 <create_name+0x88>
 8005960:	69ba      	ldr	r2, [r7, #24]
 8005962:	6a3b      	ldr	r3, [r7, #32]
 8005964:	429a      	cmp	r2, r3
 8005966:	d30d      	bcc.n	8005984 <create_name+0xa4>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Field overflow or invalid dot? */
 8005968:	6a3b      	ldr	r3, [r7, #32]
 800596a:	2b0b      	cmp	r3, #11
 800596c:	d003      	beq.n	8005976 <create_name+0x96>
 800596e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8005972:	2b2e      	cmp	r3, #46	@ 0x2e
 8005974:	d001      	beq.n	800597a <create_name+0x9a>
 8005976:	2306      	movs	r3, #6
 8005978:	e081      	b.n	8005a7e <create_name+0x19e>
			i = 8; ni = 11;				/* Enter file extension field */
 800597a:	2308      	movs	r3, #8
 800597c:	61bb      	str	r3, [r7, #24]
 800597e:	230b      	movs	r3, #11
 8005980:	623b      	str	r3, [r7, #32]
			continue;
 8005982:	e058      	b.n	8005a36 <create_name+0x156>
#if FF_CODE_PAGE == 0
		if (ExCvt && c >= 0x80) {		/* Is SBC extended character? */
			c = ExCvt[c & 0x7F];		/* To upper SBC extended character */
		}
#elif FF_CODE_PAGE < 900
		if (c >= 0x80) {				/* Is SBC extended character? */
 8005984:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8005988:	2b00      	cmp	r3, #0
 800598a:	da07      	bge.n	800599c <create_name+0xbc>
			c = ExCvt[c & 0x7F];		/* To upper SBC extended character */
 800598c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8005990:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005994:	4a3c      	ldr	r2, [pc, #240]	@ (8005a88 <create_name+0x1a8>)
 8005996:	5cd3      	ldrb	r3, [r2, r3]
 8005998:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
		}
#endif
		if (dbc_1st(c)) {				/* Check if it is a DBC 1st byte */
 800599c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80059a0:	4618      	mov	r0, r3
 80059a2:	f7ff f862 	bl	8004a6a <dbc_1st>
 80059a6:	4603      	mov	r3, r0
 80059a8:	2b00      	cmp	r3, #0
 80059aa:	d024      	beq.n	80059f6 <create_name+0x116>
			d = (BYTE)p[si++];			/* Get 2nd byte */
 80059ac:	69fb      	ldr	r3, [r7, #28]
 80059ae:	1c5a      	adds	r2, r3, #1
 80059b0:	61fa      	str	r2, [r7, #28]
 80059b2:	697a      	ldr	r2, [r7, #20]
 80059b4:	4413      	add	r3, r2
 80059b6:	781b      	ldrb	r3, [r3, #0]
 80059b8:	73fb      	strb	r3, [r7, #15]
			if (!dbc_2nd(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
 80059ba:	7bfb      	ldrb	r3, [r7, #15]
 80059bc:	4618      	mov	r0, r3
 80059be:	f7ff f865 	bl	8004a8c <dbc_2nd>
 80059c2:	4603      	mov	r3, r0
 80059c4:	2b00      	cmp	r3, #0
 80059c6:	d004      	beq.n	80059d2 <create_name+0xf2>
 80059c8:	6a3b      	ldr	r3, [r7, #32]
 80059ca:	3b01      	subs	r3, #1
 80059cc:	69ba      	ldr	r2, [r7, #24]
 80059ce:	429a      	cmp	r2, r3
 80059d0:	d301      	bcc.n	80059d6 <create_name+0xf6>
 80059d2:	2306      	movs	r3, #6
 80059d4:	e053      	b.n	8005a7e <create_name+0x19e>
			sfn[i++] = c;
 80059d6:	69bb      	ldr	r3, [r7, #24]
 80059d8:	1c5a      	adds	r2, r3, #1
 80059da:	61ba      	str	r2, [r7, #24]
 80059dc:	693a      	ldr	r2, [r7, #16]
 80059de:	4413      	add	r3, r2
 80059e0:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 80059e4:	701a      	strb	r2, [r3, #0]
			sfn[i++] = d;
 80059e6:	69bb      	ldr	r3, [r7, #24]
 80059e8:	1c5a      	adds	r2, r3, #1
 80059ea:	61ba      	str	r2, [r7, #24]
 80059ec:	693a      	ldr	r2, [r7, #16]
 80059ee:	4413      	add	r3, r2
 80059f0:	7bfa      	ldrb	r2, [r7, #15]
 80059f2:	701a      	strb	r2, [r3, #0]
 80059f4:	e78a      	b.n	800590c <create_name+0x2c>
		} else {						/* SBC */
			if (strchr("*+,:;<=>[]|\"\?\x7F", (int)c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 80059f6:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80059fa:	4619      	mov	r1, r3
 80059fc:	4823      	ldr	r0, [pc, #140]	@ (8005a8c <create_name+0x1ac>)
 80059fe:	f00b f979 	bl	8010cf4 <strchr>
 8005a02:	4603      	mov	r3, r0
 8005a04:	2b00      	cmp	r3, #0
 8005a06:	d001      	beq.n	8005a0c <create_name+0x12c>
 8005a08:	2306      	movs	r3, #6
 8005a0a:	e038      	b.n	8005a7e <create_name+0x19e>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 8005a0c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8005a10:	2b60      	cmp	r3, #96	@ 0x60
 8005a12:	d908      	bls.n	8005a26 <create_name+0x146>
 8005a14:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8005a18:	2b7a      	cmp	r3, #122	@ 0x7a
 8005a1a:	d804      	bhi.n	8005a26 <create_name+0x146>
 8005a1c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8005a20:	3b20      	subs	r3, #32
 8005a22:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			sfn[i++] = c;
 8005a26:	69bb      	ldr	r3, [r7, #24]
 8005a28:	1c5a      	adds	r2, r3, #1
 8005a2a:	61ba      	str	r2, [r7, #24]
 8005a2c:	693a      	ldr	r2, [r7, #16]
 8005a2e:	4413      	add	r3, r2
 8005a30:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 8005a34:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];				/* Get a byte */
 8005a36:	e769      	b.n	800590c <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 8005a38:	bf00      	nop
		}
	}
	*path = &p[si];						/* Return pointer to the next segment */
 8005a3a:	697a      	ldr	r2, [r7, #20]
 8005a3c:	69fb      	ldr	r3, [r7, #28]
 8005a3e:	441a      	add	r2, r3
 8005a40:	683b      	ldr	r3, [r7, #0]
 8005a42:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 8005a44:	69bb      	ldr	r3, [r7, #24]
 8005a46:	2b00      	cmp	r3, #0
 8005a48:	d101      	bne.n	8005a4e <create_name+0x16e>
 8005a4a:	2306      	movs	r3, #6
 8005a4c:	e017      	b.n	8005a7e <create_name+0x19e>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 8005a4e:	693b      	ldr	r3, [r7, #16]
 8005a50:	781b      	ldrb	r3, [r3, #0]
 8005a52:	2be5      	cmp	r3, #229	@ 0xe5
 8005a54:	d102      	bne.n	8005a5c <create_name+0x17c>
 8005a56:	693b      	ldr	r3, [r7, #16]
 8005a58:	2205      	movs	r2, #5
 8005a5a:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ' || p[si] <= ' ') ? NS_LAST : 0;	/* Set last segment flag if end of the path */
 8005a5c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8005a60:	2b20      	cmp	r3, #32
 8005a62:	d905      	bls.n	8005a70 <create_name+0x190>
 8005a64:	697a      	ldr	r2, [r7, #20]
 8005a66:	69fb      	ldr	r3, [r7, #28]
 8005a68:	4413      	add	r3, r2
 8005a6a:	781b      	ldrb	r3, [r3, #0]
 8005a6c:	2b20      	cmp	r3, #32
 8005a6e:	d801      	bhi.n	8005a74 <create_name+0x194>
 8005a70:	2204      	movs	r2, #4
 8005a72:	e000      	b.n	8005a76 <create_name+0x196>
 8005a74:	2200      	movs	r2, #0
 8005a76:	693b      	ldr	r3, [r7, #16]
 8005a78:	330b      	adds	r3, #11
 8005a7a:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 8005a7c:	2300      	movs	r3, #0
#endif /* FF_USE_LFN */
}
 8005a7e:	4618      	mov	r0, r3
 8005a80:	3728      	adds	r7, #40	@ 0x28
 8005a82:	46bd      	mov	sp, r7
 8005a84:	bd80      	pop	{r7, pc}
 8005a86:	bf00      	nop
 8005a88:	080122b4 	.word	0x080122b4
 8005a8c:	08012210 	.word	0x08012210

08005a90 <follow_path>:

static FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,					/* Directory object to return last directory and found object */
	const TCHAR* path			/* Full-path string to find a file or directory */
)
{
 8005a90:	b580      	push	{r7, lr}
 8005a92:	b086      	sub	sp, #24
 8005a94:	af00      	add	r7, sp, #0
 8005a96:	6078      	str	r0, [r7, #4]
 8005a98:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	FATFS *fs = dp->obj.fs;
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	681b      	ldr	r3, [r3, #0]
 8005a9e:	613b      	str	r3, [r7, #16]
	if (!IsSeparator(*path) && (FF_STR_VOLUME_ID != 2 || !IsTerminator(*path))) {	/* Without heading separator */
		dp->obj.sclust = fs->cdir;			/* Start at the current directory */
	} else
#endif
	{										/* With heading separator */
		while (IsSeparator(*path)) path++;	/* Strip separators */
 8005aa0:	e002      	b.n	8005aa8 <follow_path+0x18>
 8005aa2:	683b      	ldr	r3, [r7, #0]
 8005aa4:	3301      	adds	r3, #1
 8005aa6:	603b      	str	r3, [r7, #0]
 8005aa8:	683b      	ldr	r3, [r7, #0]
 8005aaa:	781b      	ldrb	r3, [r3, #0]
 8005aac:	2b2f      	cmp	r3, #47	@ 0x2f
 8005aae:	d0f8      	beq.n	8005aa2 <follow_path+0x12>
 8005ab0:	683b      	ldr	r3, [r7, #0]
 8005ab2:	781b      	ldrb	r3, [r3, #0]
 8005ab4:	2b5c      	cmp	r3, #92	@ 0x5c
 8005ab6:	d0f4      	beq.n	8005aa2 <follow_path+0x12>
		dp->obj.sclust = 0;					/* Start from the root directory */
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	2200      	movs	r2, #0
 8005abc:	609a      	str	r2, [r3, #8]
		dp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 8005abe:	683b      	ldr	r3, [r7, #0]
 8005ac0:	781b      	ldrb	r3, [r3, #0]
 8005ac2:	2b1f      	cmp	r3, #31
 8005ac4:	d80a      	bhi.n	8005adc <follow_path+0x4c>
		dp->fn[NSFLAG] = NS_NONAME;
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	2280      	movs	r2, #128	@ 0x80
 8005aca:	f883 202b 	strb.w	r2, [r3, #43]	@ 0x2b
		res = dir_sdi(dp, 0);
 8005ace:	2100      	movs	r1, #0
 8005ad0:	6878      	ldr	r0, [r7, #4]
 8005ad2:	f7ff fc4d 	bl	8005370 <dir_sdi>
 8005ad6:	4603      	mov	r3, r0
 8005ad8:	75fb      	strb	r3, [r7, #23]
 8005ada:	e048      	b.n	8005b6e <follow_path+0xde>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8005adc:	463b      	mov	r3, r7
 8005ade:	4619      	mov	r1, r3
 8005ae0:	6878      	ldr	r0, [r7, #4]
 8005ae2:	f7ff fefd 	bl	80058e0 <create_name>
 8005ae6:	4603      	mov	r3, r0
 8005ae8:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8005aea:	7dfb      	ldrb	r3, [r7, #23]
 8005aec:	2b00      	cmp	r3, #0
 8005aee:	d139      	bne.n	8005b64 <follow_path+0xd4>
			res = dir_find(dp);				/* Find an object with the segment name */
 8005af0:	6878      	ldr	r0, [r7, #4]
 8005af2:	f7ff fe4f 	bl	8005794 <dir_find>
 8005af6:	4603      	mov	r3, r0
 8005af8:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	f893 302b 	ldrb.w	r3, [r3, #43]	@ 0x2b
 8005b00:	73fb      	strb	r3, [r7, #15]
			if (res != FR_OK) {				/* Failed to find the object */
 8005b02:	7dfb      	ldrb	r3, [r7, #23]
 8005b04:	2b00      	cmp	r3, #0
 8005b06:	d00a      	beq.n	8005b1e <follow_path+0x8e>
				if (res == FR_NO_FILE) {	/* Object is not found */
 8005b08:	7dfb      	ldrb	r3, [r7, #23]
 8005b0a:	2b04      	cmp	r3, #4
 8005b0c:	d12c      	bne.n	8005b68 <follow_path+0xd8>
					if (FF_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 8005b0e:	7bfb      	ldrb	r3, [r7, #15]
 8005b10:	f003 0304 	and.w	r3, r3, #4
 8005b14:	2b00      	cmp	r3, #0
 8005b16:	d127      	bne.n	8005b68 <follow_path+0xd8>
 8005b18:	2305      	movs	r3, #5
 8005b1a:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 8005b1c:	e024      	b.n	8005b68 <follow_path+0xd8>
			}
			if (ns & NS_LAST) break;		/* Last segment matched. Function completed. */
 8005b1e:	7bfb      	ldrb	r3, [r7, #15]
 8005b20:	f003 0304 	and.w	r3, r3, #4
 8005b24:	2b00      	cmp	r3, #0
 8005b26:	d121      	bne.n	8005b6c <follow_path+0xdc>
			/* Get into the sub-directory */
			if (!(dp->obj.attr & AM_DIR)) {	/* It is not a sub-directory and cannot follow */
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	799b      	ldrb	r3, [r3, #6]
 8005b2c:	f003 0310 	and.w	r3, r3, #16
 8005b30:	2b00      	cmp	r3, #0
 8005b32:	d102      	bne.n	8005b3a <follow_path+0xaa>
				res = FR_NO_PATH; break;
 8005b34:	2305      	movs	r3, #5
 8005b36:	75fb      	strb	r3, [r7, #23]
 8005b38:	e019      	b.n	8005b6e <follow_path+0xde>
				dp->obj.c_ofs = dp->blk_ofs;
				init_alloc_info(fs, &dp->obj);	/* Open next directory */
			} else
#endif
			{
				dp->obj.sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 8005b3a:	693b      	ldr	r3, [r7, #16]
 8005b3c:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	691b      	ldr	r3, [r3, #16]
 8005b44:	693a      	ldr	r2, [r7, #16]
 8005b46:	8992      	ldrh	r2, [r2, #12]
 8005b48:	fbb3 f0f2 	udiv	r0, r3, r2
 8005b4c:	fb00 f202 	mul.w	r2, r0, r2
 8005b50:	1a9b      	subs	r3, r3, r2
 8005b52:	440b      	add	r3, r1
 8005b54:	4619      	mov	r1, r3
 8005b56:	6938      	ldr	r0, [r7, #16]
 8005b58:	f7ff fd80 	bl	800565c <ld_clust>
 8005b5c:	4602      	mov	r2, r0
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8005b62:	e7bb      	b.n	8005adc <follow_path+0x4c>
			if (res != FR_OK) break;
 8005b64:	bf00      	nop
 8005b66:	e002      	b.n	8005b6e <follow_path+0xde>
				break;
 8005b68:	bf00      	nop
 8005b6a:	e000      	b.n	8005b6e <follow_path+0xde>
			if (ns & NS_LAST) break;		/* Last segment matched. Function completed. */
 8005b6c:	bf00      	nop
			}
		}
	}

	return res;
 8005b6e:	7dfb      	ldrb	r3, [r7, #23]
}
 8005b70:	4618      	mov	r0, r3
 8005b72:	3718      	adds	r7, #24
 8005b74:	46bd      	mov	sp, r7
 8005b76:	bd80      	pop	{r7, pc}

08005b78 <get_ldnumber>:
/*-----------------------------------------------------------------------*/

static int get_ldnumber (	/* Returns logical drive number (-1:invalid drive number or null pointer) */
	const TCHAR** path		/* Pointer to pointer to the path name */
)
{
 8005b78:	b480      	push	{r7}
 8005b7a:	b08b      	sub	sp, #44	@ 0x2c
 8005b7c:	af00      	add	r7, sp, #0
 8005b7e:	6078      	str	r0, [r7, #4]
	const TCHAR *tp;
	const TCHAR *tt;
	TCHAR tc;
	int i;
	int vol = -1;
 8005b80:	f04f 33ff 	mov.w	r3, #4294967295
 8005b84:	617b      	str	r3, [r7, #20]
#if FF_STR_VOLUME_ID		/* Find string volume ID */
	const char *sp;
	char c;
#endif

	tt = tp = *path;
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	627b      	str	r3, [r7, #36]	@ 0x24
 8005b8c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b8e:	623b      	str	r3, [r7, #32]
	if (!tp) return vol;	/* Invalid path name? */
 8005b90:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b92:	2b00      	cmp	r3, #0
 8005b94:	d101      	bne.n	8005b9a <get_ldnumber+0x22>
 8005b96:	697b      	ldr	r3, [r7, #20]
 8005b98:	e080      	b.n	8005c9c <get_ldnumber+0x124>
	do {					/* Find a colon in the path */
		tc = *tt++;
 8005b9a:	6a3b      	ldr	r3, [r7, #32]
 8005b9c:	1c5a      	adds	r2, r3, #1
 8005b9e:	623a      	str	r2, [r7, #32]
 8005ba0:	781b      	ldrb	r3, [r3, #0]
 8005ba2:	77fb      	strb	r3, [r7, #31]
	} while (!IsTerminator(tc) && tc != ':');
 8005ba4:	7ffb      	ldrb	r3, [r7, #31]
 8005ba6:	2b20      	cmp	r3, #32
 8005ba8:	d902      	bls.n	8005bb0 <get_ldnumber+0x38>
 8005baa:	7ffb      	ldrb	r3, [r7, #31]
 8005bac:	2b3a      	cmp	r3, #58	@ 0x3a
 8005bae:	d1f4      	bne.n	8005b9a <get_ldnumber+0x22>

	if (tc == ':') {	/* DOS/Windows style volume ID? */
 8005bb0:	7ffb      	ldrb	r3, [r7, #31]
 8005bb2:	2b3a      	cmp	r3, #58	@ 0x3a
 8005bb4:	d11c      	bne.n	8005bf0 <get_ldnumber+0x78>
		i = FF_VOLUMES;
 8005bb6:	2302      	movs	r3, #2
 8005bb8:	61bb      	str	r3, [r7, #24]
		if (IsDigit(*tp) && tp + 2 == tt) {	/* Is there a numeric volume ID + colon? */
 8005bba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005bbc:	781b      	ldrb	r3, [r3, #0]
 8005bbe:	2b2f      	cmp	r3, #47	@ 0x2f
 8005bc0:	d90c      	bls.n	8005bdc <get_ldnumber+0x64>
 8005bc2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005bc4:	781b      	ldrb	r3, [r3, #0]
 8005bc6:	2b39      	cmp	r3, #57	@ 0x39
 8005bc8:	d808      	bhi.n	8005bdc <get_ldnumber+0x64>
 8005bca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005bcc:	3302      	adds	r3, #2
 8005bce:	6a3a      	ldr	r2, [r7, #32]
 8005bd0:	429a      	cmp	r2, r3
 8005bd2:	d103      	bne.n	8005bdc <get_ldnumber+0x64>
			i = (int)*tp - '0';	/* Get the LD number */
 8005bd4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005bd6:	781b      	ldrb	r3, [r3, #0]
 8005bd8:	3b30      	subs	r3, #48	@ 0x30
 8005bda:	61bb      	str	r3, [r7, #24]
					if (IsLower(tc)) tc -= 0x20;
				} while (c && (TCHAR)c == tc);
			} while ((c || tp != tt) && ++i < FF_VOLUMES);	/* Repeat for each id until pattern match */
		}
#endif
		if (i < FF_VOLUMES) {	/* If a volume ID is found, get the drive number and strip it */
 8005bdc:	69bb      	ldr	r3, [r7, #24]
 8005bde:	2b01      	cmp	r3, #1
 8005be0:	dc04      	bgt.n	8005bec <get_ldnumber+0x74>
			vol = i;		/* Drive number */
 8005be2:	69bb      	ldr	r3, [r7, #24]
 8005be4:	617b      	str	r3, [r7, #20]
			*path = tt;		/* Snip the drive prefix off */
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	6a3a      	ldr	r2, [r7, #32]
 8005bea:	601a      	str	r2, [r3, #0]
		}
		return vol;
 8005bec:	697b      	ldr	r3, [r7, #20]
 8005bee:	e055      	b.n	8005c9c <get_ldnumber+0x124>
	}
#if FF_STR_VOLUME_ID == 2		/* Unix style volume ID is enabled */
	if (*tp == '/') {			/* Is there a volume ID? */
 8005bf0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005bf2:	781b      	ldrb	r3, [r3, #0]
 8005bf4:	2b2f      	cmp	r3, #47	@ 0x2f
 8005bf6:	d14e      	bne.n	8005c96 <get_ldnumber+0x11e>
		while (*(tp + 1) == '/') tp++;	/* Skip duplicated separator */
 8005bf8:	e002      	b.n	8005c00 <get_ldnumber+0x88>
 8005bfa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005bfc:	3301      	adds	r3, #1
 8005bfe:	627b      	str	r3, [r7, #36]	@ 0x24
 8005c00:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c02:	3301      	adds	r3, #1
 8005c04:	781b      	ldrb	r3, [r3, #0]
 8005c06:	2b2f      	cmp	r3, #47	@ 0x2f
 8005c08:	d0f7      	beq.n	8005bfa <get_ldnumber+0x82>
		i = 0;
 8005c0a:	2300      	movs	r3, #0
 8005c0c:	61bb      	str	r3, [r7, #24]
		do {
			tt = tp; sp = VolumeStr[i]; /* Path name and this string volume ID */
 8005c0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c10:	623b      	str	r3, [r7, #32]
 8005c12:	4a25      	ldr	r2, [pc, #148]	@ (8005ca8 <get_ldnumber+0x130>)
 8005c14:	69bb      	ldr	r3, [r7, #24]
 8005c16:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005c1a:	613b      	str	r3, [r7, #16]
			do {	/* Compare the volume ID with path name */
				c = *sp++; tc = *(++tt);
 8005c1c:	693b      	ldr	r3, [r7, #16]
 8005c1e:	1c5a      	adds	r2, r3, #1
 8005c20:	613a      	str	r2, [r7, #16]
 8005c22:	781b      	ldrb	r3, [r3, #0]
 8005c24:	73fb      	strb	r3, [r7, #15]
 8005c26:	6a3b      	ldr	r3, [r7, #32]
 8005c28:	3301      	adds	r3, #1
 8005c2a:	623b      	str	r3, [r7, #32]
 8005c2c:	6a3b      	ldr	r3, [r7, #32]
 8005c2e:	781b      	ldrb	r3, [r3, #0]
 8005c30:	77fb      	strb	r3, [r7, #31]
				if (IsLower(c)) c -= 0x20;
 8005c32:	7bfb      	ldrb	r3, [r7, #15]
 8005c34:	2b60      	cmp	r3, #96	@ 0x60
 8005c36:	d905      	bls.n	8005c44 <get_ldnumber+0xcc>
 8005c38:	7bfb      	ldrb	r3, [r7, #15]
 8005c3a:	2b7a      	cmp	r3, #122	@ 0x7a
 8005c3c:	d802      	bhi.n	8005c44 <get_ldnumber+0xcc>
 8005c3e:	7bfb      	ldrb	r3, [r7, #15]
 8005c40:	3b20      	subs	r3, #32
 8005c42:	73fb      	strb	r3, [r7, #15]
				if (IsLower(tc)) tc -= 0x20;
 8005c44:	7ffb      	ldrb	r3, [r7, #31]
 8005c46:	2b60      	cmp	r3, #96	@ 0x60
 8005c48:	d905      	bls.n	8005c56 <get_ldnumber+0xde>
 8005c4a:	7ffb      	ldrb	r3, [r7, #31]
 8005c4c:	2b7a      	cmp	r3, #122	@ 0x7a
 8005c4e:	d802      	bhi.n	8005c56 <get_ldnumber+0xde>
 8005c50:	7ffb      	ldrb	r3, [r7, #31]
 8005c52:	3b20      	subs	r3, #32
 8005c54:	77fb      	strb	r3, [r7, #31]
			} while (c && (TCHAR)c == tc);
 8005c56:	7bfb      	ldrb	r3, [r7, #15]
 8005c58:	2b00      	cmp	r3, #0
 8005c5a:	d003      	beq.n	8005c64 <get_ldnumber+0xec>
 8005c5c:	7bfa      	ldrb	r2, [r7, #15]
 8005c5e:	7ffb      	ldrb	r3, [r7, #31]
 8005c60:	429a      	cmp	r2, r3
 8005c62:	d0db      	beq.n	8005c1c <get_ldnumber+0xa4>
		} while ((c || (tc != '/' && !IsTerminator(tc))) && ++i < FF_VOLUMES);	/* Repeat for each ID until pattern match */
 8005c64:	7bfb      	ldrb	r3, [r7, #15]
 8005c66:	2b00      	cmp	r3, #0
 8005c68:	d105      	bne.n	8005c76 <get_ldnumber+0xfe>
 8005c6a:	7ffb      	ldrb	r3, [r7, #31]
 8005c6c:	2b2f      	cmp	r3, #47	@ 0x2f
 8005c6e:	d008      	beq.n	8005c82 <get_ldnumber+0x10a>
 8005c70:	7ffb      	ldrb	r3, [r7, #31]
 8005c72:	2b20      	cmp	r3, #32
 8005c74:	d905      	bls.n	8005c82 <get_ldnumber+0x10a>
 8005c76:	69bb      	ldr	r3, [r7, #24]
 8005c78:	3301      	adds	r3, #1
 8005c7a:	61bb      	str	r3, [r7, #24]
 8005c7c:	69bb      	ldr	r3, [r7, #24]
 8005c7e:	2b01      	cmp	r3, #1
 8005c80:	ddc5      	ble.n	8005c0e <get_ldnumber+0x96>
		if (i < FF_VOLUMES) {	/* If a volume ID is found, get the drive number and strip it */
 8005c82:	69bb      	ldr	r3, [r7, #24]
 8005c84:	2b01      	cmp	r3, #1
 8005c86:	dc04      	bgt.n	8005c92 <get_ldnumber+0x11a>
			vol = i;		/* Drive number */
 8005c88:	69bb      	ldr	r3, [r7, #24]
 8005c8a:	617b      	str	r3, [r7, #20]
			*path = tt;		/* Snip the drive prefix off */
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	6a3a      	ldr	r2, [r7, #32]
 8005c90:	601a      	str	r2, [r3, #0]
		}
		return vol;
 8005c92:	697b      	ldr	r3, [r7, #20]
 8005c94:	e002      	b.n	8005c9c <get_ldnumber+0x124>
#endif
	/* No drive prefix is found */
#if FF_FS_RPATH != 0
	vol = CurrVol;	/* Default drive is current drive */
#else
	vol = 0;		/* Default drive is 0 */
 8005c96:	2300      	movs	r3, #0
 8005c98:	617b      	str	r3, [r7, #20]
#endif
	return vol;		/* Return the default drive */
 8005c9a:	697b      	ldr	r3, [r7, #20]
}
 8005c9c:	4618      	mov	r0, r3
 8005c9e:	372c      	adds	r7, #44	@ 0x2c
 8005ca0:	46bd      	mov	sp, r7
 8005ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ca6:	4770      	bx	lr
 8005ca8:	20000004 	.word	0x20000004

08005cac <check_fs>:

static UINT check_fs (	/* 0:FAT/FAT32 VBR, 1:exFAT VBR, 2:Not FAT and valid BS, 3:Not FAT and invalid BS, 4:Disk error */
	FATFS* fs,			/* Filesystem object */
	LBA_t sect			/* Sector to load and check if it is an FAT-VBR or not */
)
{
 8005cac:	b580      	push	{r7, lr}
 8005cae:	b084      	sub	sp, #16
 8005cb0:	af00      	add	r7, sp, #0
 8005cb2:	6078      	str	r0, [r7, #4]
 8005cb4:	6039      	str	r1, [r7, #0]
	WORD w, sign;
	BYTE b;


	fs->wflag = 0; fs->winsect = (LBA_t)0 - 1;		/* Invaidate window */
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	2200      	movs	r2, #0
 8005cba:	711a      	strb	r2, [r3, #4]
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	f04f 32ff 	mov.w	r2, #4294967295
 8005cc2:	631a      	str	r2, [r3, #48]	@ 0x30
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load the boot sector */
 8005cc4:	6839      	ldr	r1, [r7, #0]
 8005cc6:	6878      	ldr	r0, [r7, #4]
 8005cc8:	f7fe ff2d 	bl	8004b26 <move_window>
 8005ccc:	4603      	mov	r3, r0
 8005cce:	2b00      	cmp	r3, #0
 8005cd0:	d001      	beq.n	8005cd6 <check_fs+0x2a>
 8005cd2:	2304      	movs	r3, #4
 8005cd4:	e088      	b.n	8005de8 <check_fs+0x13c>
	sign = ld_word(fs->win + BS_55AA);
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	3334      	adds	r3, #52	@ 0x34
 8005cda:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 8005cde:	4618      	mov	r0, r3
 8005ce0:	f7fe fe40 	bl	8004964 <ld_word>
 8005ce4:	4603      	mov	r3, r0
 8005ce6:	81fb      	strh	r3, [r7, #14]
#if FF_FS_EXFAT
	if (sign == 0xAA55 && !memcmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;	/* It is an exFAT VBR */
#endif
	b = fs->win[BS_JmpBoot];
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8005cee:	737b      	strb	r3, [r7, #13]
	if (b == 0xEB || b == 0xE9 || b == 0xE8) {	/* Valid JumpBoot code? (short jump, near jump or near call) */
 8005cf0:	7b7b      	ldrb	r3, [r7, #13]
 8005cf2:	2beb      	cmp	r3, #235	@ 0xeb
 8005cf4:	d005      	beq.n	8005d02 <check_fs+0x56>
 8005cf6:	7b7b      	ldrb	r3, [r7, #13]
 8005cf8:	2be9      	cmp	r3, #233	@ 0xe9
 8005cfa:	d002      	beq.n	8005d02 <check_fs+0x56>
 8005cfc:	7b7b      	ldrb	r3, [r7, #13]
 8005cfe:	2be8      	cmp	r3, #232	@ 0xe8
 8005d00:	d16a      	bne.n	8005dd8 <check_fs+0x12c>
		if (sign == 0xAA55 && !memcmp(fs->win + BS_FilSysType32, "FAT32   ", 8)) {
 8005d02:	89fb      	ldrh	r3, [r7, #14]
 8005d04:	f64a 2255 	movw	r2, #43605	@ 0xaa55
 8005d08:	4293      	cmp	r3, r2
 8005d0a:	d10c      	bne.n	8005d26 <check_fs+0x7a>
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	3334      	adds	r3, #52	@ 0x34
 8005d10:	3352      	adds	r3, #82	@ 0x52
 8005d12:	2208      	movs	r2, #8
 8005d14:	4936      	ldr	r1, [pc, #216]	@ (8005df0 <check_fs+0x144>)
 8005d16:	4618      	mov	r0, r3
 8005d18:	f00a ffd4 	bl	8010cc4 <memcmp>
 8005d1c:	4603      	mov	r3, r0
 8005d1e:	2b00      	cmp	r3, #0
 8005d20:	d101      	bne.n	8005d26 <check_fs+0x7a>
			return 0;	/* It is an FAT32 VBR */
 8005d22:	2300      	movs	r3, #0
 8005d24:	e060      	b.n	8005de8 <check_fs+0x13c>
		}
		/* FAT volumes formatted with early MS-DOS lack BS_55AA and BS_FilSysType, so FAT VBR needs to be identified without them. */
		w = ld_word(fs->win + BPB_BytsPerSec);
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	3334      	adds	r3, #52	@ 0x34
 8005d2a:	330b      	adds	r3, #11
 8005d2c:	4618      	mov	r0, r3
 8005d2e:	f7fe fe19 	bl	8004964 <ld_word>
 8005d32:	4603      	mov	r3, r0
 8005d34:	817b      	strh	r3, [r7, #10]
		b = fs->win[BPB_SecPerClus];
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005d3c:	737b      	strb	r3, [r7, #13]
		if ((w & (w - 1)) == 0 && w >= FF_MIN_SS && w <= FF_MAX_SS	/* Properness of sector size (512-4096 and 2^n) */
 8005d3e:	897a      	ldrh	r2, [r7, #10]
 8005d40:	897b      	ldrh	r3, [r7, #10]
 8005d42:	3b01      	subs	r3, #1
 8005d44:	4013      	ands	r3, r2
 8005d46:	2b00      	cmp	r3, #0
 8005d48:	d146      	bne.n	8005dd8 <check_fs+0x12c>
 8005d4a:	897b      	ldrh	r3, [r7, #10]
 8005d4c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005d50:	d342      	bcc.n	8005dd8 <check_fs+0x12c>
 8005d52:	897b      	ldrh	r3, [r7, #10]
 8005d54:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005d58:	d83e      	bhi.n	8005dd8 <check_fs+0x12c>
			&& b != 0 && (b & (b - 1)) == 0				/* Properness of cluster size (2^n) */
 8005d5a:	7b7b      	ldrb	r3, [r7, #13]
 8005d5c:	2b00      	cmp	r3, #0
 8005d5e:	d03b      	beq.n	8005dd8 <check_fs+0x12c>
 8005d60:	7b7a      	ldrb	r2, [r7, #13]
 8005d62:	7b7b      	ldrb	r3, [r7, #13]
 8005d64:	3b01      	subs	r3, #1
 8005d66:	4013      	ands	r3, r2
 8005d68:	2b00      	cmp	r3, #0
 8005d6a:	d135      	bne.n	8005dd8 <check_fs+0x12c>
			&& ld_word(fs->win + BPB_RsvdSecCnt) != 0	/* Properness of reserved sectors (MNBZ) */
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	3334      	adds	r3, #52	@ 0x34
 8005d70:	330e      	adds	r3, #14
 8005d72:	4618      	mov	r0, r3
 8005d74:	f7fe fdf6 	bl	8004964 <ld_word>
 8005d78:	4603      	mov	r3, r0
 8005d7a:	2b00      	cmp	r3, #0
 8005d7c:	d02c      	beq.n	8005dd8 <check_fs+0x12c>
			&& (UINT)fs->win[BPB_NumFATs] - 1 <= 1		/* Properness of FATs (1 or 2) */
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8005d84:	3b01      	subs	r3, #1
 8005d86:	2b01      	cmp	r3, #1
 8005d88:	d826      	bhi.n	8005dd8 <check_fs+0x12c>
			&& ld_word(fs->win + BPB_RootEntCnt) != 0	/* Properness of root dir entries (MNBZ) */
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	3334      	adds	r3, #52	@ 0x34
 8005d8e:	3311      	adds	r3, #17
 8005d90:	4618      	mov	r0, r3
 8005d92:	f7fe fde7 	bl	8004964 <ld_word>
 8005d96:	4603      	mov	r3, r0
 8005d98:	2b00      	cmp	r3, #0
 8005d9a:	d01d      	beq.n	8005dd8 <check_fs+0x12c>
			&& (ld_word(fs->win + BPB_TotSec16) >= 128 || ld_dword(fs->win + BPB_TotSec32) >= 0x10000)	/* Properness of volume sectors (>=128) */
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	3334      	adds	r3, #52	@ 0x34
 8005da0:	3313      	adds	r3, #19
 8005da2:	4618      	mov	r0, r3
 8005da4:	f7fe fdde 	bl	8004964 <ld_word>
 8005da8:	4603      	mov	r3, r0
 8005daa:	2b7f      	cmp	r3, #127	@ 0x7f
 8005dac:	d809      	bhi.n	8005dc2 <check_fs+0x116>
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	3334      	adds	r3, #52	@ 0x34
 8005db2:	3320      	adds	r3, #32
 8005db4:	4618      	mov	r0, r3
 8005db6:	f7fe fdee 	bl	8004996 <ld_dword>
 8005dba:	4603      	mov	r3, r0
 8005dbc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005dc0:	d30a      	bcc.n	8005dd8 <check_fs+0x12c>
			&& ld_word(fs->win + BPB_FATSz16) != 0) {	/* Properness of FAT size (MNBZ) */
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	3334      	adds	r3, #52	@ 0x34
 8005dc6:	3316      	adds	r3, #22
 8005dc8:	4618      	mov	r0, r3
 8005dca:	f7fe fdcb 	bl	8004964 <ld_word>
 8005dce:	4603      	mov	r3, r0
 8005dd0:	2b00      	cmp	r3, #0
 8005dd2:	d001      	beq.n	8005dd8 <check_fs+0x12c>
				return 0;	/* It can be presumed an FAT VBR */
 8005dd4:	2300      	movs	r3, #0
 8005dd6:	e007      	b.n	8005de8 <check_fs+0x13c>
		}
	}
	return sign == 0xAA55 ? 2 : 3;	/* Not an FAT VBR (valid or invalid BS) */
 8005dd8:	89fb      	ldrh	r3, [r7, #14]
 8005dda:	f64a 2255 	movw	r2, #43605	@ 0xaa55
 8005dde:	4293      	cmp	r3, r2
 8005de0:	d101      	bne.n	8005de6 <check_fs+0x13a>
 8005de2:	2302      	movs	r3, #2
 8005de4:	e000      	b.n	8005de8 <check_fs+0x13c>
 8005de6:	2303      	movs	r3, #3
}
 8005de8:	4618      	mov	r0, r3
 8005dea:	3710      	adds	r7, #16
 8005dec:	46bd      	mov	sp, r7
 8005dee:	bd80      	pop	{r7, pc}
 8005df0:	08012220 	.word	0x08012220

08005df4 <find_volume>:

static UINT find_volume (	/* Returns BS status found in the hosting drive */
	FATFS* fs,		/* Filesystem object */
	UINT part		/* Partition to fined = 0:find as SFD and partitions, >0:forced partition number */
)
{
 8005df4:	b580      	push	{r7, lr}
 8005df6:	b088      	sub	sp, #32
 8005df8:	af00      	add	r7, sp, #0
 8005dfa:	6078      	str	r0, [r7, #4]
 8005dfc:	6039      	str	r1, [r7, #0]
	UINT fmt, i;
	DWORD mbr_pt[4];


	fmt = check_fs(fs, 0);				/* Load sector 0 and check if it is an FAT VBR as SFD format */
 8005dfe:	2100      	movs	r1, #0
 8005e00:	6878      	ldr	r0, [r7, #4]
 8005e02:	f7ff ff53 	bl	8005cac <check_fs>
 8005e06:	61b8      	str	r0, [r7, #24]
	if (fmt != 2 && (fmt >= 3 || part == 0)) return fmt;	/* Returns if it is an FAT VBR as auto scan, not a BS or disk error */
 8005e08:	69bb      	ldr	r3, [r7, #24]
 8005e0a:	2b02      	cmp	r3, #2
 8005e0c:	d007      	beq.n	8005e1e <find_volume+0x2a>
 8005e0e:	69bb      	ldr	r3, [r7, #24]
 8005e10:	2b02      	cmp	r3, #2
 8005e12:	d802      	bhi.n	8005e1a <find_volume+0x26>
 8005e14:	683b      	ldr	r3, [r7, #0]
 8005e16:	2b00      	cmp	r3, #0
 8005e18:	d101      	bne.n	8005e1e <find_volume+0x2a>
 8005e1a:	69bb      	ldr	r3, [r7, #24]
 8005e1c:	e045      	b.n	8005eaa <find_volume+0xb6>
		}
		return 3;	/* Not found */
	}
#endif
	if (FF_MULTI_PARTITION && part > 4) return 3;	/* MBR has 4 partitions max */
	for (i = 0; i < 4; i++) {		/* Load partition offset in the MBR */
 8005e1e:	2300      	movs	r3, #0
 8005e20:	61fb      	str	r3, [r7, #28]
 8005e22:	e014      	b.n	8005e4e <find_volume+0x5a>
		mbr_pt[i] = ld_dword(fs->win + MBR_Table + i * SZ_PTE + PTE_StLba);
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 8005e2a:	69fb      	ldr	r3, [r7, #28]
 8005e2c:	011b      	lsls	r3, r3, #4
 8005e2e:	f503 73e3 	add.w	r3, r3, #454	@ 0x1c6
 8005e32:	4413      	add	r3, r2
 8005e34:	4618      	mov	r0, r3
 8005e36:	f7fe fdae 	bl	8004996 <ld_dword>
 8005e3a:	4602      	mov	r2, r0
 8005e3c:	69fb      	ldr	r3, [r7, #28]
 8005e3e:	009b      	lsls	r3, r3, #2
 8005e40:	3320      	adds	r3, #32
 8005e42:	443b      	add	r3, r7
 8005e44:	f843 2c18 	str.w	r2, [r3, #-24]
	for (i = 0; i < 4; i++) {		/* Load partition offset in the MBR */
 8005e48:	69fb      	ldr	r3, [r7, #28]
 8005e4a:	3301      	adds	r3, #1
 8005e4c:	61fb      	str	r3, [r7, #28]
 8005e4e:	69fb      	ldr	r3, [r7, #28]
 8005e50:	2b03      	cmp	r3, #3
 8005e52:	d9e7      	bls.n	8005e24 <find_volume+0x30>
	}
	i = part ? part - 1 : 0;		/* Table index to find first */
 8005e54:	683b      	ldr	r3, [r7, #0]
 8005e56:	2b00      	cmp	r3, #0
 8005e58:	d002      	beq.n	8005e60 <find_volume+0x6c>
 8005e5a:	683b      	ldr	r3, [r7, #0]
 8005e5c:	3b01      	subs	r3, #1
 8005e5e:	e000      	b.n	8005e62 <find_volume+0x6e>
 8005e60:	2300      	movs	r3, #0
 8005e62:	61fb      	str	r3, [r7, #28]
	do {							/* Find an FAT volume */
		fmt = mbr_pt[i] ? check_fs(fs, mbr_pt[i]) : 3;	/* Check if the partition is FAT */
 8005e64:	69fb      	ldr	r3, [r7, #28]
 8005e66:	009b      	lsls	r3, r3, #2
 8005e68:	3320      	adds	r3, #32
 8005e6a:	443b      	add	r3, r7
 8005e6c:	f853 3c18 	ldr.w	r3, [r3, #-24]
 8005e70:	2b00      	cmp	r3, #0
 8005e72:	d00b      	beq.n	8005e8c <find_volume+0x98>
 8005e74:	69fb      	ldr	r3, [r7, #28]
 8005e76:	009b      	lsls	r3, r3, #2
 8005e78:	3320      	adds	r3, #32
 8005e7a:	443b      	add	r3, r7
 8005e7c:	f853 3c18 	ldr.w	r3, [r3, #-24]
 8005e80:	4619      	mov	r1, r3
 8005e82:	6878      	ldr	r0, [r7, #4]
 8005e84:	f7ff ff12 	bl	8005cac <check_fs>
 8005e88:	4603      	mov	r3, r0
 8005e8a:	e000      	b.n	8005e8e <find_volume+0x9a>
 8005e8c:	2303      	movs	r3, #3
 8005e8e:	61bb      	str	r3, [r7, #24]
	} while (part == 0 && fmt >= 2 && ++i < 4);
 8005e90:	683b      	ldr	r3, [r7, #0]
 8005e92:	2b00      	cmp	r3, #0
 8005e94:	d108      	bne.n	8005ea8 <find_volume+0xb4>
 8005e96:	69bb      	ldr	r3, [r7, #24]
 8005e98:	2b01      	cmp	r3, #1
 8005e9a:	d905      	bls.n	8005ea8 <find_volume+0xb4>
 8005e9c:	69fb      	ldr	r3, [r7, #28]
 8005e9e:	3301      	adds	r3, #1
 8005ea0:	61fb      	str	r3, [r7, #28]
 8005ea2:	69fb      	ldr	r3, [r7, #28]
 8005ea4:	2b03      	cmp	r3, #3
 8005ea6:	d9dd      	bls.n	8005e64 <find_volume+0x70>
	return fmt;
 8005ea8:	69bb      	ldr	r3, [r7, #24]
}
 8005eaa:	4618      	mov	r0, r3
 8005eac:	3720      	adds	r7, #32
 8005eae:	46bd      	mov	sp, r7
 8005eb0:	bd80      	pop	{r7, pc}
	...

08005eb4 <mount_volume>:
static FRESULT mount_volume (	/* FR_OK(0): successful, !=0: an error occurred */
	const TCHAR** path,			/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,				/* Pointer to pointer to the found filesystem object */
	BYTE mode					/* Desiered access mode to check write protection */
)
{
 8005eb4:	b580      	push	{r7, lr}
 8005eb6:	b090      	sub	sp, #64	@ 0x40
 8005eb8:	af00      	add	r7, sp, #0
 8005eba:	60f8      	str	r0, [r7, #12]
 8005ebc:	60b9      	str	r1, [r7, #8]
 8005ebe:	4613      	mov	r3, r2
 8005ec0:	71fb      	strb	r3, [r7, #7]
	WORD nrsv;
	UINT fmt;


	/* Get logical drive number */
	*rfs = 0;
 8005ec2:	68bb      	ldr	r3, [r7, #8]
 8005ec4:	2200      	movs	r2, #0
 8005ec6:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 8005ec8:	68f8      	ldr	r0, [r7, #12]
 8005eca:	f7ff fe55 	bl	8005b78 <get_ldnumber>
 8005ece:	62f8      	str	r0, [r7, #44]	@ 0x2c
	if (vol < 0) return FR_INVALID_DRIVE;
 8005ed0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005ed2:	2b00      	cmp	r3, #0
 8005ed4:	da01      	bge.n	8005eda <mount_volume+0x26>
 8005ed6:	230b      	movs	r3, #11
 8005ed8:	e207      	b.n	80062ea <mount_volume+0x436>

	/* Check if the filesystem object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the filesystem object */
 8005eda:	4aa2      	ldr	r2, [pc, #648]	@ (8006164 <mount_volume+0x2b0>)
 8005edc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005ede:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005ee2:	62bb      	str	r3, [r7, #40]	@ 0x28
	if (!fs) return FR_NOT_ENABLED;		/* Is the filesystem object available? */
 8005ee4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005ee6:	2b00      	cmp	r3, #0
 8005ee8:	d101      	bne.n	8005eee <mount_volume+0x3a>
 8005eea:	230c      	movs	r3, #12
 8005eec:	e1fd      	b.n	80062ea <mount_volume+0x436>
#if FF_FS_REENTRANT
	if (!lock_volume(fs, 1)) return FR_TIMEOUT;	/* Lock the volume, and system if needed */
#endif
	*rfs = fs;							/* Return pointer to the filesystem object */
 8005eee:	68bb      	ldr	r3, [r7, #8]
 8005ef0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005ef2:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 8005ef4:	79fb      	ldrb	r3, [r7, #7]
 8005ef6:	f023 0301 	bic.w	r3, r3, #1
 8005efa:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type != 0) {				/* If the volume has been mounted */
 8005efc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005efe:	781b      	ldrb	r3, [r3, #0]
 8005f00:	2b00      	cmp	r3, #0
 8005f02:	d01a      	beq.n	8005f3a <mount_volume+0x86>
		stat = disk_status(fs->pdrv);
 8005f04:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005f06:	785b      	ldrb	r3, [r3, #1]
 8005f08:	4618      	mov	r0, r3
 8005f0a:	f7fe fbf3 	bl	80046f4 <disk_status>
 8005f0e:	4603      	mov	r3, r0
 8005f10:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8005f14:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8005f18:	f003 0301 	and.w	r3, r3, #1
 8005f1c:	2b00      	cmp	r3, #0
 8005f1e:	d10c      	bne.n	8005f3a <mount_volume+0x86>
			if (!FF_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 8005f20:	79fb      	ldrb	r3, [r7, #7]
 8005f22:	2b00      	cmp	r3, #0
 8005f24:	d007      	beq.n	8005f36 <mount_volume+0x82>
 8005f26:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8005f2a:	f003 0304 	and.w	r3, r3, #4
 8005f2e:	2b00      	cmp	r3, #0
 8005f30:	d001      	beq.n	8005f36 <mount_volume+0x82>
				return FR_WRITE_PROTECTED;
 8005f32:	230a      	movs	r3, #10
 8005f34:	e1d9      	b.n	80062ea <mount_volume+0x436>
			}
			return FR_OK;				/* The filesystem object is already valid */
 8005f36:	2300      	movs	r3, #0
 8005f38:	e1d7      	b.n	80062ea <mount_volume+0x436>
	}

	/* The filesystem object is not valid. */
	/* Following code attempts to mount the volume. (find an FAT volume, analyze the BPB and initialize the filesystem object) */

	fs->fs_type = 0;					/* Invalidate the filesystem object */
 8005f3a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005f3c:	2200      	movs	r2, #0
 8005f3e:	701a      	strb	r2, [r3, #0]
	stat = disk_initialize(fs->pdrv);	/* Initialize the volume hosting physical drive */
 8005f40:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005f42:	785b      	ldrb	r3, [r3, #1]
 8005f44:	4618      	mov	r0, r3
 8005f46:	f7fe fbfd 	bl	8004744 <disk_initialize>
 8005f4a:	4603      	mov	r3, r0
 8005f4c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 8005f50:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8005f54:	f003 0301 	and.w	r3, r3, #1
 8005f58:	2b00      	cmp	r3, #0
 8005f5a:	d001      	beq.n	8005f60 <mount_volume+0xac>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8005f5c:	2303      	movs	r3, #3
 8005f5e:	e1c4      	b.n	80062ea <mount_volume+0x436>
	}
	if (!FF_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 8005f60:	79fb      	ldrb	r3, [r7, #7]
 8005f62:	2b00      	cmp	r3, #0
 8005f64:	d007      	beq.n	8005f76 <mount_volume+0xc2>
 8005f66:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8005f6a:	f003 0304 	and.w	r3, r3, #4
 8005f6e:	2b00      	cmp	r3, #0
 8005f70:	d001      	beq.n	8005f76 <mount_volume+0xc2>
		return FR_WRITE_PROTECTED;
 8005f72:	230a      	movs	r3, #10
 8005f74:	e1b9      	b.n	80062ea <mount_volume+0x436>
	}
#if FF_MAX_SS != FF_MIN_SS				/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->pdrv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
 8005f76:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005f78:	7858      	ldrb	r0, [r3, #1]
 8005f7a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005f7c:	330c      	adds	r3, #12
 8005f7e:	461a      	mov	r2, r3
 8005f80:	2102      	movs	r1, #2
 8005f82:	f7fe fc6d 	bl	8004860 <disk_ioctl>
 8005f86:	4603      	mov	r3, r0
 8005f88:	2b00      	cmp	r3, #0
 8005f8a:	d001      	beq.n	8005f90 <mount_volume+0xdc>
 8005f8c:	2301      	movs	r3, #1
 8005f8e:	e1ac      	b.n	80062ea <mount_volume+0x436>
	if (SS(fs) > FF_MAX_SS || SS(fs) < FF_MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
 8005f90:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005f92:	899b      	ldrh	r3, [r3, #12]
 8005f94:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005f98:	d80d      	bhi.n	8005fb6 <mount_volume+0x102>
 8005f9a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005f9c:	899b      	ldrh	r3, [r3, #12]
 8005f9e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005fa2:	d308      	bcc.n	8005fb6 <mount_volume+0x102>
 8005fa4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005fa6:	899b      	ldrh	r3, [r3, #12]
 8005fa8:	461a      	mov	r2, r3
 8005faa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005fac:	899b      	ldrh	r3, [r3, #12]
 8005fae:	3b01      	subs	r3, #1
 8005fb0:	4013      	ands	r3, r2
 8005fb2:	2b00      	cmp	r3, #0
 8005fb4:	d001      	beq.n	8005fba <mount_volume+0x106>
 8005fb6:	2301      	movs	r3, #1
 8005fb8:	e197      	b.n	80062ea <mount_volume+0x436>
#endif

	/* Find an FAT volume on the hosting drive */
	fmt = find_volume(fs, LD2PT(vol));
 8005fba:	2100      	movs	r1, #0
 8005fbc:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005fbe:	f7ff ff19 	bl	8005df4 <find_volume>
 8005fc2:	6338      	str	r0, [r7, #48]	@ 0x30
	if (fmt == 4) return FR_DISK_ERR;		/* An error occurred in the disk I/O layer */
 8005fc4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005fc6:	2b04      	cmp	r3, #4
 8005fc8:	d101      	bne.n	8005fce <mount_volume+0x11a>
 8005fca:	2301      	movs	r3, #1
 8005fcc:	e18d      	b.n	80062ea <mount_volume+0x436>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 8005fce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005fd0:	2b01      	cmp	r3, #1
 8005fd2:	d901      	bls.n	8005fd8 <mount_volume+0x124>
 8005fd4:	230d      	movs	r3, #13
 8005fd6:	e188      	b.n	80062ea <mount_volume+0x436>
	bsect = fs->winsect;					/* Volume offset in the hosting physical drive */
 8005fd8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005fda:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005fdc:	623b      	str	r3, [r7, #32]
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* FF_FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8005fde:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005fe0:	3334      	adds	r3, #52	@ 0x34
 8005fe2:	330b      	adds	r3, #11
 8005fe4:	4618      	mov	r0, r3
 8005fe6:	f7fe fcbd 	bl	8004964 <ld_word>
 8005fea:	4603      	mov	r3, r0
 8005fec:	461a      	mov	r2, r3
 8005fee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005ff0:	899b      	ldrh	r3, [r3, #12]
 8005ff2:	429a      	cmp	r2, r3
 8005ff4:	d001      	beq.n	8005ffa <mount_volume+0x146>
 8005ff6:	230d      	movs	r3, #13
 8005ff8:	e177      	b.n	80062ea <mount_volume+0x436>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 8005ffa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005ffc:	3334      	adds	r3, #52	@ 0x34
 8005ffe:	3316      	adds	r3, #22
 8006000:	4618      	mov	r0, r3
 8006002:	f7fe fcaf 	bl	8004964 <ld_word>
 8006006:	4603      	mov	r3, r0
 8006008:	63bb      	str	r3, [r7, #56]	@ 0x38
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 800600a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800600c:	2b00      	cmp	r3, #0
 800600e:	d106      	bne.n	800601e <mount_volume+0x16a>
 8006010:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006012:	3334      	adds	r3, #52	@ 0x34
 8006014:	3324      	adds	r3, #36	@ 0x24
 8006016:	4618      	mov	r0, r3
 8006018:	f7fe fcbd 	bl	8004996 <ld_dword>
 800601c:	63b8      	str	r0, [r7, #56]	@ 0x38
		fs->fsize = fasize;
 800601e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006020:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8006022:	61da      	str	r2, [r3, #28]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 8006024:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006026:	f893 2044 	ldrb.w	r2, [r3, #68]	@ 0x44
 800602a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800602c:	70da      	strb	r2, [r3, #3]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 800602e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006030:	78db      	ldrb	r3, [r3, #3]
 8006032:	2b01      	cmp	r3, #1
 8006034:	d005      	beq.n	8006042 <mount_volume+0x18e>
 8006036:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006038:	78db      	ldrb	r3, [r3, #3]
 800603a:	2b02      	cmp	r3, #2
 800603c:	d001      	beq.n	8006042 <mount_volume+0x18e>
 800603e:	230d      	movs	r3, #13
 8006040:	e153      	b.n	80062ea <mount_volume+0x436>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 8006042:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006044:	78db      	ldrb	r3, [r3, #3]
 8006046:	461a      	mov	r2, r3
 8006048:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800604a:	fb02 f303 	mul.w	r3, r2, r3
 800604e:	63bb      	str	r3, [r7, #56]	@ 0x38

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 8006050:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006052:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006056:	461a      	mov	r2, r3
 8006058:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800605a:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 800605c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800605e:	895b      	ldrh	r3, [r3, #10]
 8006060:	2b00      	cmp	r3, #0
 8006062:	d008      	beq.n	8006076 <mount_volume+0x1c2>
 8006064:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006066:	895b      	ldrh	r3, [r3, #10]
 8006068:	461a      	mov	r2, r3
 800606a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800606c:	895b      	ldrh	r3, [r3, #10]
 800606e:	3b01      	subs	r3, #1
 8006070:	4013      	ands	r3, r2
 8006072:	2b00      	cmp	r3, #0
 8006074:	d001      	beq.n	800607a <mount_volume+0x1c6>
 8006076:	230d      	movs	r3, #13
 8006078:	e137      	b.n	80062ea <mount_volume+0x436>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 800607a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800607c:	3334      	adds	r3, #52	@ 0x34
 800607e:	3311      	adds	r3, #17
 8006080:	4618      	mov	r0, r3
 8006082:	f7fe fc6f 	bl	8004964 <ld_word>
 8006086:	4603      	mov	r3, r0
 8006088:	461a      	mov	r2, r3
 800608a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800608c:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 800608e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006090:	891b      	ldrh	r3, [r3, #8]
 8006092:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006094:	8992      	ldrh	r2, [r2, #12]
 8006096:	0952      	lsrs	r2, r2, #5
 8006098:	b292      	uxth	r2, r2
 800609a:	fbb3 f1f2 	udiv	r1, r3, r2
 800609e:	fb01 f202 	mul.w	r2, r1, r2
 80060a2:	1a9b      	subs	r3, r3, r2
 80060a4:	b29b      	uxth	r3, r3
 80060a6:	2b00      	cmp	r3, #0
 80060a8:	d001      	beq.n	80060ae <mount_volume+0x1fa>
 80060aa:	230d      	movs	r3, #13
 80060ac:	e11d      	b.n	80062ea <mount_volume+0x436>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 80060ae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80060b0:	3334      	adds	r3, #52	@ 0x34
 80060b2:	3313      	adds	r3, #19
 80060b4:	4618      	mov	r0, r3
 80060b6:	f7fe fc55 	bl	8004964 <ld_word>
 80060ba:	4603      	mov	r3, r0
 80060bc:	63fb      	str	r3, [r7, #60]	@ 0x3c
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 80060be:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80060c0:	2b00      	cmp	r3, #0
 80060c2:	d106      	bne.n	80060d2 <mount_volume+0x21e>
 80060c4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80060c6:	3334      	adds	r3, #52	@ 0x34
 80060c8:	3320      	adds	r3, #32
 80060ca:	4618      	mov	r0, r3
 80060cc:	f7fe fc63 	bl	8004996 <ld_dword>
 80060d0:	63f8      	str	r0, [r7, #60]	@ 0x3c

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 80060d2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80060d4:	3334      	adds	r3, #52	@ 0x34
 80060d6:	330e      	adds	r3, #14
 80060d8:	4618      	mov	r0, r3
 80060da:	f7fe fc43 	bl	8004964 <ld_word>
 80060de:	4603      	mov	r3, r0
 80060e0:	83fb      	strh	r3, [r7, #30]
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 80060e2:	8bfb      	ldrh	r3, [r7, #30]
 80060e4:	2b00      	cmp	r3, #0
 80060e6:	d101      	bne.n	80060ec <mount_volume+0x238>
 80060e8:	230d      	movs	r3, #13
 80060ea:	e0fe      	b.n	80062ea <mount_volume+0x436>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 80060ec:	8bfa      	ldrh	r2, [r7, #30]
 80060ee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80060f0:	4413      	add	r3, r2
 80060f2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80060f4:	8911      	ldrh	r1, [r2, #8]
 80060f6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80060f8:	8992      	ldrh	r2, [r2, #12]
 80060fa:	0952      	lsrs	r2, r2, #5
 80060fc:	b292      	uxth	r2, r2
 80060fe:	fbb1 f2f2 	udiv	r2, r1, r2
 8006102:	b292      	uxth	r2, r2
 8006104:	4413      	add	r3, r2
 8006106:	61bb      	str	r3, [r7, #24]
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 8006108:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800610a:	69bb      	ldr	r3, [r7, #24]
 800610c:	429a      	cmp	r2, r3
 800610e:	d201      	bcs.n	8006114 <mount_volume+0x260>
 8006110:	230d      	movs	r3, #13
 8006112:	e0ea      	b.n	80062ea <mount_volume+0x436>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 8006114:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8006116:	69bb      	ldr	r3, [r7, #24]
 8006118:	1ad3      	subs	r3, r2, r3
 800611a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800611c:	8952      	ldrh	r2, [r2, #10]
 800611e:	fbb3 f3f2 	udiv	r3, r3, r2
 8006122:	617b      	str	r3, [r7, #20]
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8006124:	697b      	ldr	r3, [r7, #20]
 8006126:	2b00      	cmp	r3, #0
 8006128:	d101      	bne.n	800612e <mount_volume+0x27a>
 800612a:	230d      	movs	r3, #13
 800612c:	e0dd      	b.n	80062ea <mount_volume+0x436>
		fmt = 0;
 800612e:	2300      	movs	r3, #0
 8006130:	633b      	str	r3, [r7, #48]	@ 0x30
		if (nclst <= MAX_FAT32) fmt = FS_FAT32;
 8006132:	697b      	ldr	r3, [r7, #20]
 8006134:	4a0c      	ldr	r2, [pc, #48]	@ (8006168 <mount_volume+0x2b4>)
 8006136:	4293      	cmp	r3, r2
 8006138:	d801      	bhi.n	800613e <mount_volume+0x28a>
 800613a:	2303      	movs	r3, #3
 800613c:	633b      	str	r3, [r7, #48]	@ 0x30
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 800613e:	697b      	ldr	r3, [r7, #20]
 8006140:	f64f 72f5 	movw	r2, #65525	@ 0xfff5
 8006144:	4293      	cmp	r3, r2
 8006146:	d801      	bhi.n	800614c <mount_volume+0x298>
 8006148:	2302      	movs	r3, #2
 800614a:	633b      	str	r3, [r7, #48]	@ 0x30
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 800614c:	697b      	ldr	r3, [r7, #20]
 800614e:	f640 72f5 	movw	r2, #4085	@ 0xff5
 8006152:	4293      	cmp	r3, r2
 8006154:	d801      	bhi.n	800615a <mount_volume+0x2a6>
 8006156:	2301      	movs	r3, #1
 8006158:	633b      	str	r3, [r7, #48]	@ 0x30
		if (fmt == 0) return FR_NO_FILESYSTEM;
 800615a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800615c:	2b00      	cmp	r3, #0
 800615e:	d105      	bne.n	800616c <mount_volume+0x2b8>
 8006160:	230d      	movs	r3, #13
 8006162:	e0c2      	b.n	80062ea <mount_volume+0x436>
 8006164:	200073b8 	.word	0x200073b8
 8006168:	0ffffff5 	.word	0x0ffffff5

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800616c:	697b      	ldr	r3, [r7, #20]
 800616e:	1c9a      	adds	r2, r3, #2
 8006170:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006172:	619a      	str	r2, [r3, #24]
		fs->volbase = bsect;							/* Volume start sector */
 8006174:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006176:	6a3a      	ldr	r2, [r7, #32]
 8006178:	621a      	str	r2, [r3, #32]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800617a:	8bfa      	ldrh	r2, [r7, #30]
 800617c:	6a3b      	ldr	r3, [r7, #32]
 800617e:	441a      	add	r2, r3
 8006180:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006182:	625a      	str	r2, [r3, #36]	@ 0x24
		fs->database = bsect + sysect;					/* Data start sector */
 8006184:	6a3a      	ldr	r2, [r7, #32]
 8006186:	69bb      	ldr	r3, [r7, #24]
 8006188:	441a      	add	r2, r3
 800618a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800618c:	62da      	str	r2, [r3, #44]	@ 0x2c
		if (fmt == FS_FAT32) {
 800618e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006190:	2b03      	cmp	r3, #3
 8006192:	d11e      	bne.n	80061d2 <mount_volume+0x31e>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 8006194:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006196:	3334      	adds	r3, #52	@ 0x34
 8006198:	332a      	adds	r3, #42	@ 0x2a
 800619a:	4618      	mov	r0, r3
 800619c:	f7fe fbe2 	bl	8004964 <ld_word>
 80061a0:	4603      	mov	r3, r0
 80061a2:	2b00      	cmp	r3, #0
 80061a4:	d001      	beq.n	80061aa <mount_volume+0x2f6>
 80061a6:	230d      	movs	r3, #13
 80061a8:	e09f      	b.n	80062ea <mount_volume+0x436>
			if (fs->n_rootdir != 0) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 80061aa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80061ac:	891b      	ldrh	r3, [r3, #8]
 80061ae:	2b00      	cmp	r3, #0
 80061b0:	d001      	beq.n	80061b6 <mount_volume+0x302>
 80061b2:	230d      	movs	r3, #13
 80061b4:	e099      	b.n	80062ea <mount_volume+0x436>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 80061b6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80061b8:	3334      	adds	r3, #52	@ 0x34
 80061ba:	332c      	adds	r3, #44	@ 0x2c
 80061bc:	4618      	mov	r0, r3
 80061be:	f7fe fbea 	bl	8004996 <ld_dword>
 80061c2:	4602      	mov	r2, r0
 80061c4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80061c6:	629a      	str	r2, [r3, #40]	@ 0x28
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 80061c8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80061ca:	699b      	ldr	r3, [r3, #24]
 80061cc:	009b      	lsls	r3, r3, #2
 80061ce:	637b      	str	r3, [r7, #52]	@ 0x34
 80061d0:	e01e      	b.n	8006210 <mount_volume+0x35c>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must not be 0) */
 80061d2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80061d4:	891b      	ldrh	r3, [r3, #8]
 80061d6:	2b00      	cmp	r3, #0
 80061d8:	d101      	bne.n	80061de <mount_volume+0x32a>
 80061da:	230d      	movs	r3, #13
 80061dc:	e085      	b.n	80062ea <mount_volume+0x436>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 80061de:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80061e0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80061e2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80061e4:	441a      	add	r2, r3
 80061e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80061e8:	629a      	str	r2, [r3, #40]	@ 0x28
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 80061ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80061ec:	2b02      	cmp	r3, #2
 80061ee:	d103      	bne.n	80061f8 <mount_volume+0x344>
 80061f0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80061f2:	699b      	ldr	r3, [r3, #24]
 80061f4:	005b      	lsls	r3, r3, #1
 80061f6:	e00a      	b.n	800620e <mount_volume+0x35a>
 80061f8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80061fa:	699a      	ldr	r2, [r3, #24]
 80061fc:	4613      	mov	r3, r2
 80061fe:	005b      	lsls	r3, r3, #1
 8006200:	4413      	add	r3, r2
 8006202:	085a      	lsrs	r2, r3, #1
 8006204:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006206:	699b      	ldr	r3, [r3, #24]
 8006208:	f003 0301 	and.w	r3, r3, #1
 800620c:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 800620e:	637b      	str	r3, [r7, #52]	@ 0x34
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 8006210:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006212:	69da      	ldr	r2, [r3, #28]
 8006214:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006216:	899b      	ldrh	r3, [r3, #12]
 8006218:	4619      	mov	r1, r3
 800621a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800621c:	440b      	add	r3, r1
 800621e:	3b01      	subs	r3, #1
 8006220:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006222:	8989      	ldrh	r1, [r1, #12]
 8006224:	fbb3 f3f1 	udiv	r3, r3, r1
 8006228:	429a      	cmp	r2, r3
 800622a:	d201      	bcs.n	8006230 <mount_volume+0x37c>
 800622c:	230d      	movs	r3, #13
 800622e:	e05c      	b.n	80062ea <mount_volume+0x436>

#if !FF_FS_READONLY
		/* Get FSInfo if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 8006230:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006232:	f04f 32ff 	mov.w	r2, #4294967295
 8006236:	615a      	str	r2, [r3, #20]
 8006238:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800623a:	695a      	ldr	r2, [r3, #20]
 800623c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800623e:	611a      	str	r2, [r3, #16]
		fs->fsi_flag = 0x80;
 8006240:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006242:	2280      	movs	r2, #128	@ 0x80
 8006244:	715a      	strb	r2, [r3, #5]
#if (FF_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Allow to update FSInfo only if BPB_FSInfo32 == 1 */
 8006246:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006248:	2b03      	cmp	r3, #3
 800624a:	d13f      	bne.n	80062cc <mount_volume+0x418>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 800624c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800624e:	3334      	adds	r3, #52	@ 0x34
 8006250:	3330      	adds	r3, #48	@ 0x30
 8006252:	4618      	mov	r0, r3
 8006254:	f7fe fb86 	bl	8004964 <ld_word>
 8006258:	4603      	mov	r3, r0
 800625a:	2b01      	cmp	r3, #1
 800625c:	d136      	bne.n	80062cc <mount_volume+0x418>
			&& move_window(fs, bsect + 1) == FR_OK)
 800625e:	6a3b      	ldr	r3, [r7, #32]
 8006260:	3301      	adds	r3, #1
 8006262:	4619      	mov	r1, r3
 8006264:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006266:	f7fe fc5e 	bl	8004b26 <move_window>
 800626a:	4603      	mov	r3, r0
 800626c:	2b00      	cmp	r3, #0
 800626e:	d12d      	bne.n	80062cc <mount_volume+0x418>
		{
			fs->fsi_flag = 0;
 8006270:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006272:	2200      	movs	r2, #0
 8006274:	715a      	strb	r2, [r3, #5]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSInfo data if available */
 8006276:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006278:	3334      	adds	r3, #52	@ 0x34
 800627a:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 800627e:	4618      	mov	r0, r3
 8006280:	f7fe fb70 	bl	8004964 <ld_word>
 8006284:	4603      	mov	r3, r0
 8006286:	461a      	mov	r2, r3
 8006288:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 800628c:	429a      	cmp	r2, r3
 800628e:	d11d      	bne.n	80062cc <mount_volume+0x418>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 8006290:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006292:	3334      	adds	r3, #52	@ 0x34
 8006294:	4618      	mov	r0, r3
 8006296:	f7fe fb7e 	bl	8004996 <ld_dword>
 800629a:	4603      	mov	r3, r0
 800629c:	4a15      	ldr	r2, [pc, #84]	@ (80062f4 <mount_volume+0x440>)
 800629e:	4293      	cmp	r3, r2
 80062a0:	d114      	bne.n	80062cc <mount_volume+0x418>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 80062a2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80062a4:	3334      	adds	r3, #52	@ 0x34
 80062a6:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 80062aa:	4618      	mov	r0, r3
 80062ac:	f7fe fb73 	bl	8004996 <ld_dword>
 80062b0:	4603      	mov	r3, r0
 80062b2:	4a11      	ldr	r2, [pc, #68]	@ (80062f8 <mount_volume+0x444>)
 80062b4:	4293      	cmp	r3, r2
 80062b6:	d109      	bne.n	80062cc <mount_volume+0x418>
			{
#if (FF_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
#endif
#if (FF_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 80062b8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80062ba:	3334      	adds	r3, #52	@ 0x34
 80062bc:	f503 73f6 	add.w	r3, r3, #492	@ 0x1ec
 80062c0:	4618      	mov	r0, r3
 80062c2:	f7fe fb68 	bl	8004996 <ld_dword>
 80062c6:	4602      	mov	r2, r0
 80062c8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80062ca:	611a      	str	r2, [r3, #16]
		}
#endif	/* (FF_FS_NOFSINFO & 3) != 3 */
#endif	/* !FF_FS_READONLY */
	}

	fs->fs_type = (BYTE)fmt;/* FAT sub-type (the filesystem object gets valid) */
 80062cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80062ce:	b2da      	uxtb	r2, r3
 80062d0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80062d2:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* Volume mount ID */
 80062d4:	4b09      	ldr	r3, [pc, #36]	@ (80062fc <mount_volume+0x448>)
 80062d6:	881b      	ldrh	r3, [r3, #0]
 80062d8:	3301      	adds	r3, #1
 80062da:	b29a      	uxth	r2, r3
 80062dc:	4b07      	ldr	r3, [pc, #28]	@ (80062fc <mount_volume+0x448>)
 80062de:	801a      	strh	r2, [r3, #0]
 80062e0:	4b06      	ldr	r3, [pc, #24]	@ (80062fc <mount_volume+0x448>)
 80062e2:	881a      	ldrh	r2, [r3, #0]
 80062e4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80062e6:	80da      	strh	r2, [r3, #6]
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if FF_FS_LOCK				/* Clear file lock semaphores */
	clear_share(fs);
#endif
	return FR_OK;
 80062e8:	2300      	movs	r3, #0
}
 80062ea:	4618      	mov	r0, r3
 80062ec:	3740      	adds	r7, #64	@ 0x40
 80062ee:	46bd      	mov	sp, r7
 80062f0:	bd80      	pop	{r7, pc}
 80062f2:	bf00      	nop
 80062f4:	41615252 	.word	0x41615252
 80062f8:	61417272 	.word	0x61417272
 80062fc:	200073c0 	.word	0x200073c0

08006300 <validate>:

static FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	FFOBJID* obj,			/* Pointer to the FFOBJID, the 1st member in the FIL/DIR structure, to check validity */
	FATFS** rfs				/* Pointer to pointer to the owner filesystem object to return */
)
{
 8006300:	b580      	push	{r7, lr}
 8006302:	b084      	sub	sp, #16
 8006304:	af00      	add	r7, sp, #0
 8006306:	6078      	str	r0, [r7, #4]
 8006308:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 800630a:	2309      	movs	r3, #9
 800630c:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	2b00      	cmp	r3, #0
 8006312:	d01c      	beq.n	800634e <validate+0x4e>
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	681b      	ldr	r3, [r3, #0]
 8006318:	2b00      	cmp	r3, #0
 800631a:	d018      	beq.n	800634e <validate+0x4e>
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	681b      	ldr	r3, [r3, #0]
 8006320:	781b      	ldrb	r3, [r3, #0]
 8006322:	2b00      	cmp	r3, #0
 8006324:	d013      	beq.n	800634e <validate+0x4e>
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	889a      	ldrh	r2, [r3, #4]
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	681b      	ldr	r3, [r3, #0]
 800632e:	88db      	ldrh	r3, [r3, #6]
 8006330:	429a      	cmp	r2, r3
 8006332:	d10c      	bne.n	800634e <validate+0x4e>
			}
		} else {	/* Could not take */
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->pdrv) & STA_NOINIT)) { /* Test if the hosting phsical drive is kept initialized */
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	681b      	ldr	r3, [r3, #0]
 8006338:	785b      	ldrb	r3, [r3, #1]
 800633a:	4618      	mov	r0, r3
 800633c:	f7fe f9da 	bl	80046f4 <disk_status>
 8006340:	4603      	mov	r3, r0
 8006342:	f003 0301 	and.w	r3, r3, #1
 8006346:	2b00      	cmp	r3, #0
 8006348:	d101      	bne.n	800634e <validate+0x4e>
			res = FR_OK;
 800634a:	2300      	movs	r3, #0
 800634c:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*rfs = (res == FR_OK) ? obj->fs : 0;	/* Return corresponding filesystem object if it is valid */
 800634e:	7bfb      	ldrb	r3, [r7, #15]
 8006350:	2b00      	cmp	r3, #0
 8006352:	d102      	bne.n	800635a <validate+0x5a>
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	681b      	ldr	r3, [r3, #0]
 8006358:	e000      	b.n	800635c <validate+0x5c>
 800635a:	2300      	movs	r3, #0
 800635c:	683a      	ldr	r2, [r7, #0]
 800635e:	6013      	str	r3, [r2, #0]
	return res;
 8006360:	7bfb      	ldrb	r3, [r7, #15]
}
 8006362:	4618      	mov	r0, r3
 8006364:	3710      	adds	r7, #16
 8006366:	46bd      	mov	sp, r7
 8006368:	bd80      	pop	{r7, pc}
	...

0800636c <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the filesystem object to be registered (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mount option: 0=Do not mount (delayed mount), 1=Mount immediately */
)
{
 800636c:	b580      	push	{r7, lr}
 800636e:	b088      	sub	sp, #32
 8006370:	af00      	add	r7, sp, #0
 8006372:	60f8      	str	r0, [r7, #12]
 8006374:	60b9      	str	r1, [r7, #8]
 8006376:	4613      	mov	r3, r2
 8006378:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800637a:	68bb      	ldr	r3, [r7, #8]
 800637c:	613b      	str	r3, [r7, #16]


	/* Get volume ID (logical drive number) */
	vol = get_ldnumber(&rp);
 800637e:	f107 0310 	add.w	r3, r7, #16
 8006382:	4618      	mov	r0, r3
 8006384:	f7ff fbf8 	bl	8005b78 <get_ldnumber>
 8006388:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 800638a:	69fb      	ldr	r3, [r7, #28]
 800638c:	2b00      	cmp	r3, #0
 800638e:	da01      	bge.n	8006394 <f_mount+0x28>
 8006390:	230b      	movs	r3, #11
 8006392:	e02e      	b.n	80063f2 <f_mount+0x86>
	cfs = FatFs[vol];			/* Pointer to the filesystem object of the volume */
 8006394:	4a19      	ldr	r2, [pc, #100]	@ (80063fc <f_mount+0x90>)
 8006396:	69fb      	ldr	r3, [r7, #28]
 8006398:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800639c:	61bb      	str	r3, [r7, #24]

	if (cfs) {					/* Unregister current filesystem object if regsitered */
 800639e:	69bb      	ldr	r3, [r7, #24]
 80063a0:	2b00      	cmp	r3, #0
 80063a2:	d007      	beq.n	80063b4 <f_mount+0x48>
		FatFs[vol] = 0;
 80063a4:	4a15      	ldr	r2, [pc, #84]	@ (80063fc <f_mount+0x90>)
 80063a6:	69fb      	ldr	r3, [r7, #28]
 80063a8:	2100      	movs	r1, #0
 80063aa:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		clear_share(cfs);
#endif
#if FF_FS_REENTRANT				/* Discard mutex of the current volume */
		ff_mutex_delete(vol);
#endif
		cfs->fs_type = 0;		/* Invalidate the filesystem object to be unregistered */
 80063ae:	69bb      	ldr	r3, [r7, #24]
 80063b0:	2200      	movs	r2, #0
 80063b2:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {					/* Register new filesystem object */
 80063b4:	68fb      	ldr	r3, [r7, #12]
 80063b6:	2b00      	cmp	r3, #0
 80063b8:	d00b      	beq.n	80063d2 <f_mount+0x66>
		fs->pdrv = LD2PD(vol);	/* Volume hosting physical drive */
 80063ba:	68fb      	ldr	r3, [r7, #12]
 80063bc:	69fa      	ldr	r2, [r7, #28]
 80063be:	b2d2      	uxtb	r2, r2
 80063c0:	705a      	strb	r2, [r3, #1]
			}
			SysLock = 1;		/* System mutex is ready */
		}
#endif
#endif
		fs->fs_type = 0;		/* Invalidate the new filesystem object */
 80063c2:	68fb      	ldr	r3, [r7, #12]
 80063c4:	2200      	movs	r2, #0
 80063c6:	701a      	strb	r2, [r3, #0]
		FatFs[vol] = fs;		/* Register new fs object */
 80063c8:	68fa      	ldr	r2, [r7, #12]
 80063ca:	490c      	ldr	r1, [pc, #48]	@ (80063fc <f_mount+0x90>)
 80063cc:	69fb      	ldr	r3, [r7, #28]
 80063ce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	}

	if (opt == 0) return FR_OK;	/* Do not mount now, it will be mounted in subsequent file functions */
 80063d2:	79fb      	ldrb	r3, [r7, #7]
 80063d4:	2b00      	cmp	r3, #0
 80063d6:	d101      	bne.n	80063dc <f_mount+0x70>
 80063d8:	2300      	movs	r3, #0
 80063da:	e00a      	b.n	80063f2 <f_mount+0x86>

	res = mount_volume(&path, &fs, 0);	/* Force mounted the volume */
 80063dc:	f107 010c 	add.w	r1, r7, #12
 80063e0:	f107 0308 	add.w	r3, r7, #8
 80063e4:	2200      	movs	r2, #0
 80063e6:	4618      	mov	r0, r3
 80063e8:	f7ff fd64 	bl	8005eb4 <mount_volume>
 80063ec:	4603      	mov	r3, r0
 80063ee:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 80063f0:	7dfb      	ldrb	r3, [r7, #23]
}
 80063f2:	4618      	mov	r0, r3
 80063f4:	3720      	adds	r7, #32
 80063f6:	46bd      	mov	sp, r7
 80063f8:	bd80      	pop	{r7, pc}
 80063fa:	bf00      	nop
 80063fc:	200073b8 	.word	0x200073b8

08006400 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and open mode flags */
)
{
 8006400:	b580      	push	{r7, lr}
 8006402:	b098      	sub	sp, #96	@ 0x60
 8006404:	af00      	add	r7, sp, #0
 8006406:	60f8      	str	r0, [r7, #12]
 8006408:	60b9      	str	r1, [r7, #8]
 800640a:	4613      	mov	r3, r2
 800640c:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 800640e:	68fb      	ldr	r3, [r7, #12]
 8006410:	2b00      	cmp	r3, #0
 8006412:	d101      	bne.n	8006418 <f_open+0x18>
 8006414:	2309      	movs	r3, #9
 8006416:	e184      	b.n	8006722 <f_open+0x322>

	/* Get logical drive number */
	mode &= FF_FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND;
 8006418:	79fb      	ldrb	r3, [r7, #7]
 800641a:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800641e:	71fb      	strb	r3, [r7, #7]
	res = mount_volume(&path, &fs, mode);
 8006420:	79fa      	ldrb	r2, [r7, #7]
 8006422:	f107 0114 	add.w	r1, r7, #20
 8006426:	f107 0308 	add.w	r3, r7, #8
 800642a:	4618      	mov	r0, r3
 800642c:	f7ff fd42 	bl	8005eb4 <mount_volume>
 8006430:	4603      	mov	r3, r0
 8006432:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
	if (res == FR_OK) {
 8006436:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800643a:	2b00      	cmp	r3, #0
 800643c:	f040 8168 	bne.w	8006710 <f_open+0x310>
		dj.obj.fs = fs;
 8006440:	697b      	ldr	r3, [r7, #20]
 8006442:	61bb      	str	r3, [r7, #24]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 8006444:	68ba      	ldr	r2, [r7, #8]
 8006446:	f107 0318 	add.w	r3, r7, #24
 800644a:	4611      	mov	r1, r2
 800644c:	4618      	mov	r0, r3
 800644e:	f7ff fb1f 	bl	8005a90 <follow_path>
 8006452:	4603      	mov	r3, r0
 8006454:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
#if !FF_FS_READONLY	/* Read/Write configuration */
		if (res == FR_OK) {
 8006458:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800645c:	2b00      	cmp	r3, #0
 800645e:	d107      	bne.n	8006470 <f_open+0x70>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 8006460:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8006464:	b25b      	sxtb	r3, r3
 8006466:	2b00      	cmp	r3, #0
 8006468:	da02      	bge.n	8006470 <f_open+0x70>
				res = FR_INVALID_NAME;
 800646a:	2306      	movs	r3, #6
 800646c:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
				res = chk_share(&dj, (mode & ~FA_READ) ? 1 : 0);	/* Check if the file can be used */
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 8006470:	79fb      	ldrb	r3, [r7, #7]
 8006472:	f003 031c 	and.w	r3, r3, #28
 8006476:	2b00      	cmp	r3, #0
 8006478:	d077      	beq.n	800656a <f_open+0x16a>
			if (res != FR_OK) {					/* No file, create new */
 800647a:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800647e:	2b00      	cmp	r3, #0
 8006480:	d010      	beq.n	80064a4 <f_open+0xa4>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 8006482:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8006486:	2b04      	cmp	r3, #4
 8006488:	d107      	bne.n	800649a <f_open+0x9a>
#if FF_FS_LOCK
					res = enq_share() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
#else
					res = dir_register(&dj);
 800648a:	f107 0318 	add.w	r3, r7, #24
 800648e:	4618      	mov	r0, r3
 8006490:	f7ff f9d5 	bl	800583e <dir_register>
 8006494:	4603      	mov	r3, r0
 8006496:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 800649a:	79fb      	ldrb	r3, [r7, #7]
 800649c:	f043 0308 	orr.w	r3, r3, #8
 80064a0:	71fb      	strb	r3, [r7, #7]
 80064a2:	e010      	b.n	80064c6 <f_open+0xc6>
			}
			else {								/* Any object with the same name is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 80064a4:	7fbb      	ldrb	r3, [r7, #30]
 80064a6:	f003 0311 	and.w	r3, r3, #17
 80064aa:	2b00      	cmp	r3, #0
 80064ac:	d003      	beq.n	80064b6 <f_open+0xb6>
					res = FR_DENIED;
 80064ae:	2307      	movs	r3, #7
 80064b0:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 80064b4:	e007      	b.n	80064c6 <f_open+0xc6>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 80064b6:	79fb      	ldrb	r3, [r7, #7]
 80064b8:	f003 0304 	and.w	r3, r3, #4
 80064bc:	2b00      	cmp	r3, #0
 80064be:	d002      	beq.n	80064c6 <f_open+0xc6>
 80064c0:	2308      	movs	r3, #8
 80064c2:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate the file if overwrite mode */
 80064c6:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 80064ca:	2b00      	cmp	r3, #0
 80064cc:	d167      	bne.n	800659e <f_open+0x19e>
 80064ce:	79fb      	ldrb	r3, [r7, #7]
 80064d0:	f003 0308 	and.w	r3, r3, #8
 80064d4:	2b00      	cmp	r3, #0
 80064d6:	d062      	beq.n	800659e <f_open+0x19e>
					}
				} else
#endif
				{
					/* Set directory entry initial state */
					tm = GET_FATTIME();					/* Set created time */
 80064d8:	4b94      	ldr	r3, [pc, #592]	@ (800672c <f_open+0x32c>)
 80064da:	653b      	str	r3, [r7, #80]	@ 0x50
					st_dword(dj.dir + DIR_CrtTime, tm);
 80064dc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80064de:	330e      	adds	r3, #14
 80064e0:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 80064e2:	4618      	mov	r0, r3
 80064e4:	f7fe fa95 	bl	8004a12 <st_dword>
					st_dword(dj.dir + DIR_ModTime, tm);
 80064e8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80064ea:	3316      	adds	r3, #22
 80064ec:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 80064ee:	4618      	mov	r0, r3
 80064f0:	f7fe fa8f 	bl	8004a12 <st_dword>
					cl = ld_clust(fs, dj.dir);			/* Get current cluster chain */
 80064f4:	697b      	ldr	r3, [r7, #20]
 80064f6:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80064f8:	4611      	mov	r1, r2
 80064fa:	4618      	mov	r0, r3
 80064fc:	f7ff f8ae 	bl	800565c <ld_clust>
 8006500:	64f8      	str	r0, [r7, #76]	@ 0x4c
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 8006502:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006504:	330b      	adds	r3, #11
 8006506:	2220      	movs	r2, #32
 8006508:	701a      	strb	r2, [r3, #0]
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 800650a:	697b      	ldr	r3, [r7, #20]
 800650c:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 800650e:	2200      	movs	r2, #0
 8006510:	4618      	mov	r0, r3
 8006512:	f7ff f8c2 	bl	800569a <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 8006516:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006518:	331c      	adds	r3, #28
 800651a:	2100      	movs	r1, #0
 800651c:	4618      	mov	r0, r3
 800651e:	f7fe fa78 	bl	8004a12 <st_dword>
					fs->wflag = 1;
 8006522:	697b      	ldr	r3, [r7, #20]
 8006524:	2201      	movs	r2, #1
 8006526:	711a      	strb	r2, [r3, #4]
					if (cl != 0) {						/* Remove the cluster chain if exist */
 8006528:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800652a:	2b00      	cmp	r3, #0
 800652c:	d037      	beq.n	800659e <f_open+0x19e>
						sc = fs->winsect;
 800652e:	697b      	ldr	r3, [r7, #20]
 8006530:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006532:	64bb      	str	r3, [r7, #72]	@ 0x48
						res = remove_chain(&dj.obj, cl, 0);
 8006534:	f107 0318 	add.w	r3, r7, #24
 8006538:	2200      	movs	r2, #0
 800653a:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 800653c:	4618      	mov	r0, r3
 800653e:	f7fe fd99 	bl	8005074 <remove_chain>
 8006542:	4603      	mov	r3, r0
 8006544:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
						if (res == FR_OK) {
 8006548:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800654c:	2b00      	cmp	r3, #0
 800654e:	d126      	bne.n	800659e <f_open+0x19e>
							res = move_window(fs, sc);
 8006550:	697b      	ldr	r3, [r7, #20]
 8006552:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 8006554:	4618      	mov	r0, r3
 8006556:	f7fe fae6 	bl	8004b26 <move_window>
 800655a:	4603      	mov	r3, r0
 800655c:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 8006560:	697b      	ldr	r3, [r7, #20]
 8006562:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8006564:	3a01      	subs	r2, #1
 8006566:	611a      	str	r2, [r3, #16]
 8006568:	e019      	b.n	800659e <f_open+0x19e>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Is the object exsiting? */
 800656a:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800656e:	2b00      	cmp	r3, #0
 8006570:	d115      	bne.n	800659e <f_open+0x19e>
				if (dj.obj.attr & AM_DIR) {		/* File open against a directory */
 8006572:	7fbb      	ldrb	r3, [r7, #30]
 8006574:	f003 0310 	and.w	r3, r3, #16
 8006578:	2b00      	cmp	r3, #0
 800657a:	d003      	beq.n	8006584 <f_open+0x184>
					res = FR_NO_FILE;
 800657c:	2304      	movs	r3, #4
 800657e:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 8006582:	e00c      	b.n	800659e <f_open+0x19e>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* Write mode open against R/O file */
 8006584:	79fb      	ldrb	r3, [r7, #7]
 8006586:	f003 0302 	and.w	r3, r3, #2
 800658a:	2b00      	cmp	r3, #0
 800658c:	d007      	beq.n	800659e <f_open+0x19e>
 800658e:	7fbb      	ldrb	r3, [r7, #30]
 8006590:	f003 0301 	and.w	r3, r3, #1
 8006594:	2b00      	cmp	r3, #0
 8006596:	d002      	beq.n	800659e <f_open+0x19e>
						res = FR_DENIED;
 8006598:	2307      	movs	r3, #7
 800659a:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 800659e:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 80065a2:	2b00      	cmp	r3, #0
 80065a4:	d10f      	bne.n	80065c6 <f_open+0x1c6>
			if (mode & FA_CREATE_ALWAYS) mode |= FA_MODIFIED;	/* Set file change flag if created or overwritten */
 80065a6:	79fb      	ldrb	r3, [r7, #7]
 80065a8:	f003 0308 	and.w	r3, r3, #8
 80065ac:	2b00      	cmp	r3, #0
 80065ae:	d003      	beq.n	80065b8 <f_open+0x1b8>
 80065b0:	79fb      	ldrb	r3, [r7, #7]
 80065b2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80065b6:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 80065b8:	697b      	ldr	r3, [r7, #20]
 80065ba:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80065bc:	68fb      	ldr	r3, [r7, #12]
 80065be:	621a      	str	r2, [r3, #32]
			fp->dir_ptr = dj.dir;
 80065c0:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80065c2:	68fb      	ldr	r3, [r7, #12]
 80065c4:	625a      	str	r2, [r3, #36]	@ 0x24
				}
			}
		}
#endif

		if (res == FR_OK) {
 80065c6:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 80065ca:	2b00      	cmp	r3, #0
 80065cc:	f040 80a0 	bne.w	8006710 <f_open+0x310>
				fp->obj.c_ofs = dj.blk_ofs;
				init_alloc_info(fs, &fp->obj);
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 80065d0:	697b      	ldr	r3, [r7, #20]
 80065d2:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80065d4:	4611      	mov	r1, r2
 80065d6:	4618      	mov	r0, r3
 80065d8:	f7ff f840 	bl	800565c <ld_clust>
 80065dc:	4602      	mov	r2, r0
 80065de:	68fb      	ldr	r3, [r7, #12]
 80065e0:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 80065e2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80065e4:	331c      	adds	r3, #28
 80065e6:	4618      	mov	r0, r3
 80065e8:	f7fe f9d5 	bl	8004996 <ld_dword>
 80065ec:	4602      	mov	r2, r0
 80065ee:	68fb      	ldr	r3, [r7, #12]
 80065f0:	60da      	str	r2, [r3, #12]
			}
#if FF_USE_FASTSEEK
			fp->cltbl = 0;		/* Disable fast seek mode */
#endif
			fp->obj.fs = fs;	/* Validate the file object */
 80065f2:	697a      	ldr	r2, [r7, #20]
 80065f4:	68fb      	ldr	r3, [r7, #12]
 80065f6:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 80065f8:	697b      	ldr	r3, [r7, #20]
 80065fa:	88da      	ldrh	r2, [r3, #6]
 80065fc:	68fb      	ldr	r3, [r7, #12]
 80065fe:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;	/* Set file access mode */
 8006600:	68fb      	ldr	r3, [r7, #12]
 8006602:	79fa      	ldrb	r2, [r7, #7]
 8006604:	741a      	strb	r2, [r3, #16]
			fp->err = 0;		/* Clear error flag */
 8006606:	68fb      	ldr	r3, [r7, #12]
 8006608:	2200      	movs	r2, #0
 800660a:	745a      	strb	r2, [r3, #17]
			fp->sect = 0;		/* Invalidate current data sector */
 800660c:	68fb      	ldr	r3, [r7, #12]
 800660e:	2200      	movs	r2, #0
 8006610:	61da      	str	r2, [r3, #28]
			fp->fptr = 0;		/* Set file pointer top of the file */
 8006612:	68fb      	ldr	r3, [r7, #12]
 8006614:	2200      	movs	r2, #0
 8006616:	615a      	str	r2, [r3, #20]
#if !FF_FS_READONLY
#if !FF_FS_TINY
			memset(fp->buf, 0, sizeof fp->buf);	/* Clear sector buffer */
 8006618:	68fb      	ldr	r3, [r7, #12]
 800661a:	3328      	adds	r3, #40	@ 0x28
 800661c:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8006620:	2100      	movs	r1, #0
 8006622:	4618      	mov	r0, r3
 8006624:	f00a fb5e 	bl	8010ce4 <memset>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 8006628:	79fb      	ldrb	r3, [r7, #7]
 800662a:	f003 0320 	and.w	r3, r3, #32
 800662e:	2b00      	cmp	r3, #0
 8006630:	d06e      	beq.n	8006710 <f_open+0x310>
 8006632:	68fb      	ldr	r3, [r7, #12]
 8006634:	68db      	ldr	r3, [r3, #12]
 8006636:	2b00      	cmp	r3, #0
 8006638:	d06a      	beq.n	8006710 <f_open+0x310>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 800663a:	68fb      	ldr	r3, [r7, #12]
 800663c:	68da      	ldr	r2, [r3, #12]
 800663e:	68fb      	ldr	r3, [r7, #12]
 8006640:	615a      	str	r2, [r3, #20]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 8006642:	697b      	ldr	r3, [r7, #20]
 8006644:	895b      	ldrh	r3, [r3, #10]
 8006646:	461a      	mov	r2, r3
 8006648:	697b      	ldr	r3, [r7, #20]
 800664a:	899b      	ldrh	r3, [r3, #12]
 800664c:	fb02 f303 	mul.w	r3, r2, r3
 8006650:	647b      	str	r3, [r7, #68]	@ 0x44
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 8006652:	68fb      	ldr	r3, [r7, #12]
 8006654:	689b      	ldr	r3, [r3, #8]
 8006656:	65bb      	str	r3, [r7, #88]	@ 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8006658:	68fb      	ldr	r3, [r7, #12]
 800665a:	68db      	ldr	r3, [r3, #12]
 800665c:	657b      	str	r3, [r7, #84]	@ 0x54
 800665e:	e016      	b.n	800668e <f_open+0x28e>
					clst = get_fat(&fp->obj, clst);
 8006660:	68fb      	ldr	r3, [r7, #12]
 8006662:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8006664:	4618      	mov	r0, r3
 8006666:	f7fe fb18 	bl	8004c9a <get_fat>
 800666a:	65b8      	str	r0, [r7, #88]	@ 0x58
					if (clst <= 1) res = FR_INT_ERR;
 800666c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800666e:	2b01      	cmp	r3, #1
 8006670:	d802      	bhi.n	8006678 <f_open+0x278>
 8006672:	2302      	movs	r3, #2
 8006674:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 8006678:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800667a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800667e:	d102      	bne.n	8006686 <f_open+0x286>
 8006680:	2301      	movs	r3, #1
 8006682:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8006686:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8006688:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800668a:	1ad3      	subs	r3, r2, r3
 800668c:	657b      	str	r3, [r7, #84]	@ 0x54
 800668e:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8006692:	2b00      	cmp	r3, #0
 8006694:	d103      	bne.n	800669e <f_open+0x29e>
 8006696:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8006698:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800669a:	429a      	cmp	r2, r3
 800669c:	d8e0      	bhi.n	8006660 <f_open+0x260>
				}
				fp->clust = clst;
 800669e:	68fb      	ldr	r3, [r7, #12]
 80066a0:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80066a2:	619a      	str	r2, [r3, #24]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 80066a4:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 80066a8:	2b00      	cmp	r3, #0
 80066aa:	d131      	bne.n	8006710 <f_open+0x310>
 80066ac:	697b      	ldr	r3, [r7, #20]
 80066ae:	899b      	ldrh	r3, [r3, #12]
 80066b0:	461a      	mov	r2, r3
 80066b2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80066b4:	fbb3 f1f2 	udiv	r1, r3, r2
 80066b8:	fb01 f202 	mul.w	r2, r1, r2
 80066bc:	1a9b      	subs	r3, r3, r2
 80066be:	2b00      	cmp	r3, #0
 80066c0:	d026      	beq.n	8006710 <f_open+0x310>
					sc = clst2sect(fs, clst);
 80066c2:	697b      	ldr	r3, [r7, #20]
 80066c4:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 80066c6:	4618      	mov	r0, r3
 80066c8:	f7fe fac8 	bl	8004c5c <clst2sect>
 80066cc:	64b8      	str	r0, [r7, #72]	@ 0x48
					if (sc == 0) {
 80066ce:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80066d0:	2b00      	cmp	r3, #0
 80066d2:	d103      	bne.n	80066dc <f_open+0x2dc>
						res = FR_INT_ERR;
 80066d4:	2302      	movs	r3, #2
 80066d6:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 80066da:	e019      	b.n	8006710 <f_open+0x310>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 80066dc:	697b      	ldr	r3, [r7, #20]
 80066de:	899b      	ldrh	r3, [r3, #12]
 80066e0:	461a      	mov	r2, r3
 80066e2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80066e4:	fbb3 f2f2 	udiv	r2, r3, r2
 80066e8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80066ea:	441a      	add	r2, r3
 80066ec:	68fb      	ldr	r3, [r7, #12]
 80066ee:	61da      	str	r2, [r3, #28]
#if !FF_FS_TINY
						if (disk_read(fs->pdrv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 80066f0:	697b      	ldr	r3, [r7, #20]
 80066f2:	7858      	ldrb	r0, [r3, #1]
 80066f4:	68fb      	ldr	r3, [r7, #12]
 80066f6:	f103 0128 	add.w	r1, r3, #40	@ 0x28
 80066fa:	68fb      	ldr	r3, [r7, #12]
 80066fc:	69da      	ldr	r2, [r3, #28]
 80066fe:	2301      	movs	r3, #1
 8006700:	f7fe f848 	bl	8004794 <disk_read>
 8006704:	4603      	mov	r3, r0
 8006706:	2b00      	cmp	r3, #0
 8006708:	d002      	beq.n	8006710 <f_open+0x310>
 800670a:	2301      	movs	r3, #1
 800670c:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 8006710:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8006714:	2b00      	cmp	r3, #0
 8006716:	d002      	beq.n	800671e <f_open+0x31e>
 8006718:	68fb      	ldr	r3, [r7, #12]
 800671a:	2200      	movs	r2, #0
 800671c:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 800671e:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
}
 8006722:	4618      	mov	r0, r3
 8006724:	3760      	adds	r7, #96	@ 0x60
 8006726:	46bd      	mov	sp, r7
 8006728:	bd80      	pop	{r7, pc}
 800672a:	bf00      	nop
 800672c:	54210000 	.word	0x54210000

08006730 <f_write>:
	FIL* fp,			/* Open file to be written */
	const void* buff,	/* Data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Number of bytes written */
)
{
 8006730:	b580      	push	{r7, lr}
 8006732:	b08c      	sub	sp, #48	@ 0x30
 8006734:	af00      	add	r7, sp, #0
 8006736:	60f8      	str	r0, [r7, #12]
 8006738:	60b9      	str	r1, [r7, #8]
 800673a:	607a      	str	r2, [r7, #4]
 800673c:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst;
	LBA_t sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 800673e:	68bb      	ldr	r3, [r7, #8]
 8006740:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 8006742:	683b      	ldr	r3, [r7, #0]
 8006744:	2200      	movs	r2, #0
 8006746:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 8006748:	68fb      	ldr	r3, [r7, #12]
 800674a:	f107 0210 	add.w	r2, r7, #16
 800674e:	4611      	mov	r1, r2
 8006750:	4618      	mov	r0, r3
 8006752:	f7ff fdd5 	bl	8006300 <validate>
 8006756:	4603      	mov	r3, r0
 8006758:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800675c:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8006760:	2b00      	cmp	r3, #0
 8006762:	d107      	bne.n	8006774 <f_write+0x44>
 8006764:	68fb      	ldr	r3, [r7, #12]
 8006766:	7c5b      	ldrb	r3, [r3, #17]
 8006768:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 800676c:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8006770:	2b00      	cmp	r3, #0
 8006772:	d002      	beq.n	800677a <f_write+0x4a>
 8006774:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8006778:	e15e      	b.n	8006a38 <f_write+0x308>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 800677a:	68fb      	ldr	r3, [r7, #12]
 800677c:	7c1b      	ldrb	r3, [r3, #16]
 800677e:	f003 0302 	and.w	r3, r3, #2
 8006782:	2b00      	cmp	r3, #0
 8006784:	d101      	bne.n	800678a <f_write+0x5a>
 8006786:	2307      	movs	r3, #7
 8006788:	e156      	b.n	8006a38 <f_write+0x308>

	/* Check fptr wrap-around (file size cannot reach 4 GiB at FAT volume) */
	if ((!FF_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 800678a:	68fb      	ldr	r3, [r7, #12]
 800678c:	695a      	ldr	r2, [r3, #20]
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	441a      	add	r2, r3
 8006792:	68fb      	ldr	r3, [r7, #12]
 8006794:	695b      	ldr	r3, [r3, #20]
 8006796:	429a      	cmp	r2, r3
 8006798:	f080 8140 	bcs.w	8006a1c <f_write+0x2ec>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 800679c:	68fb      	ldr	r3, [r7, #12]
 800679e:	695b      	ldr	r3, [r3, #20]
 80067a0:	43db      	mvns	r3, r3
 80067a2:	607b      	str	r3, [r7, #4]
	}

	for ( ; btw > 0; btw -= wcnt, *bw += wcnt, wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize) {	/* Repeat until all data written */
 80067a4:	e13a      	b.n	8006a1c <f_write+0x2ec>
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 80067a6:	68fb      	ldr	r3, [r7, #12]
 80067a8:	695b      	ldr	r3, [r3, #20]
 80067aa:	693a      	ldr	r2, [r7, #16]
 80067ac:	8992      	ldrh	r2, [r2, #12]
 80067ae:	fbb3 f1f2 	udiv	r1, r3, r2
 80067b2:	fb01 f202 	mul.w	r2, r1, r2
 80067b6:	1a9b      	subs	r3, r3, r2
 80067b8:	2b00      	cmp	r3, #0
 80067ba:	f040 80e5 	bne.w	8006988 <f_write+0x258>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 80067be:	68fb      	ldr	r3, [r7, #12]
 80067c0:	695b      	ldr	r3, [r3, #20]
 80067c2:	693a      	ldr	r2, [r7, #16]
 80067c4:	8992      	ldrh	r2, [r2, #12]
 80067c6:	fbb3 f3f2 	udiv	r3, r3, r2
 80067ca:	693a      	ldr	r2, [r7, #16]
 80067cc:	8952      	ldrh	r2, [r2, #10]
 80067ce:	3a01      	subs	r2, #1
 80067d0:	4013      	ands	r3, r2
 80067d2:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 80067d4:	69bb      	ldr	r3, [r7, #24]
 80067d6:	2b00      	cmp	r3, #0
 80067d8:	d137      	bne.n	800684a <f_write+0x11a>
				if (fp->fptr == 0) {		/* On the top of the file? */
 80067da:	68fb      	ldr	r3, [r7, #12]
 80067dc:	695b      	ldr	r3, [r3, #20]
 80067de:	2b00      	cmp	r3, #0
 80067e0:	d10c      	bne.n	80067fc <f_write+0xcc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 80067e2:	68fb      	ldr	r3, [r7, #12]
 80067e4:	689b      	ldr	r3, [r3, #8]
 80067e6:	62bb      	str	r3, [r7, #40]	@ 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 80067e8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80067ea:	2b00      	cmp	r3, #0
 80067ec:	d10e      	bne.n	800680c <f_write+0xdc>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 80067ee:	68fb      	ldr	r3, [r7, #12]
 80067f0:	2100      	movs	r1, #0
 80067f2:	4618      	mov	r0, r3
 80067f4:	f7fe fca3 	bl	800513e <create_chain>
 80067f8:	62b8      	str	r0, [r7, #40]	@ 0x28
 80067fa:	e007      	b.n	800680c <f_write+0xdc>
					if (fp->cltbl) {
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 80067fc:	68fa      	ldr	r2, [r7, #12]
 80067fe:	68fb      	ldr	r3, [r7, #12]
 8006800:	699b      	ldr	r3, [r3, #24]
 8006802:	4619      	mov	r1, r3
 8006804:	4610      	mov	r0, r2
 8006806:	f7fe fc9a 	bl	800513e <create_chain>
 800680a:	62b8      	str	r0, [r7, #40]	@ 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800680c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800680e:	2b00      	cmp	r3, #0
 8006810:	f000 8109 	beq.w	8006a26 <f_write+0x2f6>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 8006814:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006816:	2b01      	cmp	r3, #1
 8006818:	d104      	bne.n	8006824 <f_write+0xf4>
 800681a:	68fb      	ldr	r3, [r7, #12]
 800681c:	2202      	movs	r2, #2
 800681e:	745a      	strb	r2, [r3, #17]
 8006820:	2302      	movs	r3, #2
 8006822:	e109      	b.n	8006a38 <f_write+0x308>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8006824:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006826:	f1b3 3fff 	cmp.w	r3, #4294967295
 800682a:	d104      	bne.n	8006836 <f_write+0x106>
 800682c:	68fb      	ldr	r3, [r7, #12]
 800682e:	2201      	movs	r2, #1
 8006830:	745a      	strb	r2, [r3, #17]
 8006832:	2301      	movs	r3, #1
 8006834:	e100      	b.n	8006a38 <f_write+0x308>
				fp->clust = clst;			/* Update current cluster */
 8006836:	68fb      	ldr	r3, [r7, #12]
 8006838:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800683a:	619a      	str	r2, [r3, #24]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 800683c:	68fb      	ldr	r3, [r7, #12]
 800683e:	689b      	ldr	r3, [r3, #8]
 8006840:	2b00      	cmp	r3, #0
 8006842:	d102      	bne.n	800684a <f_write+0x11a>
 8006844:	68fb      	ldr	r3, [r7, #12]
 8006846:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006848:	609a      	str	r2, [r3, #8]
			}
#if FF_FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 800684a:	68fb      	ldr	r3, [r7, #12]
 800684c:	7c1b      	ldrb	r3, [r3, #16]
 800684e:	b25b      	sxtb	r3, r3
 8006850:	2b00      	cmp	r3, #0
 8006852:	da18      	bge.n	8006886 <f_write+0x156>
				if (disk_write(fs->pdrv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8006854:	693b      	ldr	r3, [r7, #16]
 8006856:	7858      	ldrb	r0, [r3, #1]
 8006858:	68fb      	ldr	r3, [r7, #12]
 800685a:	f103 0128 	add.w	r1, r3, #40	@ 0x28
 800685e:	68fb      	ldr	r3, [r7, #12]
 8006860:	69da      	ldr	r2, [r3, #28]
 8006862:	2301      	movs	r3, #1
 8006864:	f7fd ffc8 	bl	80047f8 <disk_write>
 8006868:	4603      	mov	r3, r0
 800686a:	2b00      	cmp	r3, #0
 800686c:	d004      	beq.n	8006878 <f_write+0x148>
 800686e:	68fb      	ldr	r3, [r7, #12]
 8006870:	2201      	movs	r2, #1
 8006872:	745a      	strb	r2, [r3, #17]
 8006874:	2301      	movs	r3, #1
 8006876:	e0df      	b.n	8006a38 <f_write+0x308>
				fp->flag &= (BYTE)~FA_DIRTY;
 8006878:	68fb      	ldr	r3, [r7, #12]
 800687a:	7c1b      	ldrb	r3, [r3, #16]
 800687c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006880:	b2da      	uxtb	r2, r3
 8006882:	68fb      	ldr	r3, [r7, #12]
 8006884:	741a      	strb	r2, [r3, #16]
			}
#endif
			sect = clst2sect(fs, fp->clust);	/* Get current sector */
 8006886:	693a      	ldr	r2, [r7, #16]
 8006888:	68fb      	ldr	r3, [r7, #12]
 800688a:	699b      	ldr	r3, [r3, #24]
 800688c:	4619      	mov	r1, r3
 800688e:	4610      	mov	r0, r2
 8006890:	f7fe f9e4 	bl	8004c5c <clst2sect>
 8006894:	6178      	str	r0, [r7, #20]
			if (sect == 0) ABORT(fs, FR_INT_ERR);
 8006896:	697b      	ldr	r3, [r7, #20]
 8006898:	2b00      	cmp	r3, #0
 800689a:	d104      	bne.n	80068a6 <f_write+0x176>
 800689c:	68fb      	ldr	r3, [r7, #12]
 800689e:	2202      	movs	r2, #2
 80068a0:	745a      	strb	r2, [r3, #17]
 80068a2:	2302      	movs	r3, #2
 80068a4:	e0c8      	b.n	8006a38 <f_write+0x308>
			sect += csect;
 80068a6:	697a      	ldr	r2, [r7, #20]
 80068a8:	69bb      	ldr	r3, [r7, #24]
 80068aa:	4413      	add	r3, r2
 80068ac:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 80068ae:	693b      	ldr	r3, [r7, #16]
 80068b0:	899b      	ldrh	r3, [r3, #12]
 80068b2:	461a      	mov	r2, r3
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	fbb3 f3f2 	udiv	r3, r3, r2
 80068ba:	623b      	str	r3, [r7, #32]
			if (cc > 0) {					/* Write maximum contiguous sectors directly */
 80068bc:	6a3b      	ldr	r3, [r7, #32]
 80068be:	2b00      	cmp	r3, #0
 80068c0:	d043      	beq.n	800694a <f_write+0x21a>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 80068c2:	69ba      	ldr	r2, [r7, #24]
 80068c4:	6a3b      	ldr	r3, [r7, #32]
 80068c6:	4413      	add	r3, r2
 80068c8:	693a      	ldr	r2, [r7, #16]
 80068ca:	8952      	ldrh	r2, [r2, #10]
 80068cc:	4293      	cmp	r3, r2
 80068ce:	d905      	bls.n	80068dc <f_write+0x1ac>
					cc = fs->csize - csect;
 80068d0:	693b      	ldr	r3, [r7, #16]
 80068d2:	895b      	ldrh	r3, [r3, #10]
 80068d4:	461a      	mov	r2, r3
 80068d6:	69bb      	ldr	r3, [r7, #24]
 80068d8:	1ad3      	subs	r3, r2, r3
 80068da:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->pdrv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 80068dc:	693b      	ldr	r3, [r7, #16]
 80068de:	7858      	ldrb	r0, [r3, #1]
 80068e0:	6a3b      	ldr	r3, [r7, #32]
 80068e2:	697a      	ldr	r2, [r7, #20]
 80068e4:	69f9      	ldr	r1, [r7, #28]
 80068e6:	f7fd ff87 	bl	80047f8 <disk_write>
 80068ea:	4603      	mov	r3, r0
 80068ec:	2b00      	cmp	r3, #0
 80068ee:	d004      	beq.n	80068fa <f_write+0x1ca>
 80068f0:	68fb      	ldr	r3, [r7, #12]
 80068f2:	2201      	movs	r2, #1
 80068f4:	745a      	strb	r2, [r3, #17]
 80068f6:	2301      	movs	r3, #1
 80068f8:	e09e      	b.n	8006a38 <f_write+0x308>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					memcpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 80068fa:	68fb      	ldr	r3, [r7, #12]
 80068fc:	69da      	ldr	r2, [r3, #28]
 80068fe:	697b      	ldr	r3, [r7, #20]
 8006900:	1ad3      	subs	r3, r2, r3
 8006902:	6a3a      	ldr	r2, [r7, #32]
 8006904:	429a      	cmp	r2, r3
 8006906:	d918      	bls.n	800693a <f_write+0x20a>
					memcpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 8006908:	68fb      	ldr	r3, [r7, #12]
 800690a:	f103 0028 	add.w	r0, r3, #40	@ 0x28
 800690e:	68fb      	ldr	r3, [r7, #12]
 8006910:	69da      	ldr	r2, [r3, #28]
 8006912:	697b      	ldr	r3, [r7, #20]
 8006914:	1ad3      	subs	r3, r2, r3
 8006916:	693a      	ldr	r2, [r7, #16]
 8006918:	8992      	ldrh	r2, [r2, #12]
 800691a:	fb02 f303 	mul.w	r3, r2, r3
 800691e:	69fa      	ldr	r2, [r7, #28]
 8006920:	18d1      	adds	r1, r2, r3
 8006922:	693b      	ldr	r3, [r7, #16]
 8006924:	899b      	ldrh	r3, [r3, #12]
 8006926:	461a      	mov	r2, r3
 8006928:	f00a fa46 	bl	8010db8 <memcpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 800692c:	68fb      	ldr	r3, [r7, #12]
 800692e:	7c1b      	ldrb	r3, [r3, #16]
 8006930:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006934:	b2da      	uxtb	r2, r3
 8006936:	68fb      	ldr	r3, [r7, #12]
 8006938:	741a      	strb	r2, [r3, #16]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 800693a:	693b      	ldr	r3, [r7, #16]
 800693c:	899b      	ldrh	r3, [r3, #12]
 800693e:	461a      	mov	r2, r3
 8006940:	6a3b      	ldr	r3, [r7, #32]
 8006942:	fb02 f303 	mul.w	r3, r2, r3
 8006946:	627b      	str	r3, [r7, #36]	@ 0x24
				continue;
 8006948:	e04b      	b.n	80069e2 <f_write+0x2b2>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800694a:	68fb      	ldr	r3, [r7, #12]
 800694c:	69db      	ldr	r3, [r3, #28]
 800694e:	697a      	ldr	r2, [r7, #20]
 8006950:	429a      	cmp	r2, r3
 8006952:	d016      	beq.n	8006982 <f_write+0x252>
				fp->fptr < fp->obj.objsize &&
 8006954:	68fb      	ldr	r3, [r7, #12]
 8006956:	695a      	ldr	r2, [r3, #20]
 8006958:	68fb      	ldr	r3, [r7, #12]
 800695a:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800695c:	429a      	cmp	r2, r3
 800695e:	d210      	bcs.n	8006982 <f_write+0x252>
				disk_read(fs->pdrv, fp->buf, sect, 1) != RES_OK) {
 8006960:	693b      	ldr	r3, [r7, #16]
 8006962:	7858      	ldrb	r0, [r3, #1]
 8006964:	68fb      	ldr	r3, [r7, #12]
 8006966:	f103 0128 	add.w	r1, r3, #40	@ 0x28
 800696a:	2301      	movs	r3, #1
 800696c:	697a      	ldr	r2, [r7, #20]
 800696e:	f7fd ff11 	bl	8004794 <disk_read>
 8006972:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 8006974:	2b00      	cmp	r3, #0
 8006976:	d004      	beq.n	8006982 <f_write+0x252>
					ABORT(fs, FR_DISK_ERR);
 8006978:	68fb      	ldr	r3, [r7, #12]
 800697a:	2201      	movs	r2, #1
 800697c:	745a      	strb	r2, [r3, #17]
 800697e:	2301      	movs	r3, #1
 8006980:	e05a      	b.n	8006a38 <f_write+0x308>
			}
#endif
			fp->sect = sect;
 8006982:	68fb      	ldr	r3, [r7, #12]
 8006984:	697a      	ldr	r2, [r7, #20]
 8006986:	61da      	str	r2, [r3, #28]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes remains in the sector */
 8006988:	693b      	ldr	r3, [r7, #16]
 800698a:	899b      	ldrh	r3, [r3, #12]
 800698c:	4618      	mov	r0, r3
 800698e:	68fb      	ldr	r3, [r7, #12]
 8006990:	695b      	ldr	r3, [r3, #20]
 8006992:	693a      	ldr	r2, [r7, #16]
 8006994:	8992      	ldrh	r2, [r2, #12]
 8006996:	fbb3 f1f2 	udiv	r1, r3, r2
 800699a:	fb01 f202 	mul.w	r2, r1, r2
 800699e:	1a9b      	subs	r3, r3, r2
 80069a0:	1ac3      	subs	r3, r0, r3
 80069a2:	627b      	str	r3, [r7, #36]	@ 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 80069a4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	429a      	cmp	r2, r3
 80069aa:	d901      	bls.n	80069b0 <f_write+0x280>
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	627b      	str	r3, [r7, #36]	@ 0x24
#if FF_FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		memcpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		memcpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 80069b0:	68fb      	ldr	r3, [r7, #12]
 80069b2:	f103 0128 	add.w	r1, r3, #40	@ 0x28
 80069b6:	68fb      	ldr	r3, [r7, #12]
 80069b8:	695b      	ldr	r3, [r3, #20]
 80069ba:	693a      	ldr	r2, [r7, #16]
 80069bc:	8992      	ldrh	r2, [r2, #12]
 80069be:	fbb3 f0f2 	udiv	r0, r3, r2
 80069c2:	fb00 f202 	mul.w	r2, r0, r2
 80069c6:	1a9b      	subs	r3, r3, r2
 80069c8:	440b      	add	r3, r1
 80069ca:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80069cc:	69f9      	ldr	r1, [r7, #28]
 80069ce:	4618      	mov	r0, r3
 80069d0:	f00a f9f2 	bl	8010db8 <memcpy>
		fp->flag |= FA_DIRTY;
 80069d4:	68fb      	ldr	r3, [r7, #12]
 80069d6:	7c1b      	ldrb	r3, [r3, #16]
 80069d8:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80069dc:	b2da      	uxtb	r2, r3
 80069de:	68fb      	ldr	r3, [r7, #12]
 80069e0:	741a      	strb	r2, [r3, #16]
	for ( ; btw > 0; btw -= wcnt, *bw += wcnt, wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize) {	/* Repeat until all data written */
 80069e2:	687a      	ldr	r2, [r7, #4]
 80069e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80069e6:	1ad3      	subs	r3, r2, r3
 80069e8:	607b      	str	r3, [r7, #4]
 80069ea:	683b      	ldr	r3, [r7, #0]
 80069ec:	681a      	ldr	r2, [r3, #0]
 80069ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80069f0:	441a      	add	r2, r3
 80069f2:	683b      	ldr	r3, [r7, #0]
 80069f4:	601a      	str	r2, [r3, #0]
 80069f6:	69fa      	ldr	r2, [r7, #28]
 80069f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80069fa:	4413      	add	r3, r2
 80069fc:	61fb      	str	r3, [r7, #28]
 80069fe:	68fb      	ldr	r3, [r7, #12]
 8006a00:	695a      	ldr	r2, [r3, #20]
 8006a02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a04:	441a      	add	r2, r3
 8006a06:	68fb      	ldr	r3, [r7, #12]
 8006a08:	615a      	str	r2, [r3, #20]
 8006a0a:	68fb      	ldr	r3, [r7, #12]
 8006a0c:	68da      	ldr	r2, [r3, #12]
 8006a0e:	68fb      	ldr	r3, [r7, #12]
 8006a10:	695b      	ldr	r3, [r3, #20]
 8006a12:	429a      	cmp	r2, r3
 8006a14:	bf38      	it	cc
 8006a16:	461a      	movcc	r2, r3
 8006a18:	68fb      	ldr	r3, [r7, #12]
 8006a1a:	60da      	str	r2, [r3, #12]
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	2b00      	cmp	r3, #0
 8006a20:	f47f aec1 	bne.w	80067a6 <f_write+0x76>
 8006a24:	e000      	b.n	8006a28 <f_write+0x2f8>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8006a26:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 8006a28:	68fb      	ldr	r3, [r7, #12]
 8006a2a:	7c1b      	ldrb	r3, [r3, #16]
 8006a2c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006a30:	b2da      	uxtb	r2, r3
 8006a32:	68fb      	ldr	r3, [r7, #12]
 8006a34:	741a      	strb	r2, [r3, #16]

	LEAVE_FF(fs, FR_OK);
 8006a36:	2300      	movs	r3, #0
}
 8006a38:	4618      	mov	r0, r3
 8006a3a:	3730      	adds	r7, #48	@ 0x30
 8006a3c:	46bd      	mov	sp, r7
 8006a3e:	bd80      	pop	{r7, pc}

08006a40 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Open file to be synced */
)
{
 8006a40:	b580      	push	{r7, lr}
 8006a42:	b086      	sub	sp, #24
 8006a44:	af00      	add	r7, sp, #0
 8006a46:	6078      	str	r0, [r7, #4]
	FATFS *fs;
	DWORD tm;
	BYTE *dir;


	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	f107 0208 	add.w	r2, r7, #8
 8006a4e:	4611      	mov	r1, r2
 8006a50:	4618      	mov	r0, r3
 8006a52:	f7ff fc55 	bl	8006300 <validate>
 8006a56:	4603      	mov	r3, r0
 8006a58:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8006a5a:	7dfb      	ldrb	r3, [r7, #23]
 8006a5c:	2b00      	cmp	r3, #0
 8006a5e:	d167      	bne.n	8006b30 <f_sync+0xf0>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	7c1b      	ldrb	r3, [r3, #16]
 8006a64:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006a68:	2b00      	cmp	r3, #0
 8006a6a:	d061      	beq.n	8006b30 <f_sync+0xf0>
#if !FF_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	7c1b      	ldrb	r3, [r3, #16]
 8006a70:	b25b      	sxtb	r3, r3
 8006a72:	2b00      	cmp	r3, #0
 8006a74:	da15      	bge.n	8006aa2 <f_sync+0x62>
				if (disk_write(fs->pdrv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 8006a76:	68bb      	ldr	r3, [r7, #8]
 8006a78:	7858      	ldrb	r0, [r3, #1]
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	f103 0128 	add.w	r1, r3, #40	@ 0x28
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	69da      	ldr	r2, [r3, #28]
 8006a84:	2301      	movs	r3, #1
 8006a86:	f7fd feb7 	bl	80047f8 <disk_write>
 8006a8a:	4603      	mov	r3, r0
 8006a8c:	2b00      	cmp	r3, #0
 8006a8e:	d001      	beq.n	8006a94 <f_sync+0x54>
 8006a90:	2301      	movs	r3, #1
 8006a92:	e04e      	b.n	8006b32 <f_sync+0xf2>
				fp->flag &= (BYTE)~FA_DIRTY;
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	7c1b      	ldrb	r3, [r3, #16]
 8006a98:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006a9c:	b2da      	uxtb	r2, r3
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	741a      	strb	r2, [r3, #16]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 8006aa2:	4b26      	ldr	r3, [pc, #152]	@ (8006b3c <f_sync+0xfc>)
 8006aa4:	613b      	str	r3, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 8006aa6:	68ba      	ldr	r2, [r7, #8]
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	6a1b      	ldr	r3, [r3, #32]
 8006aac:	4619      	mov	r1, r3
 8006aae:	4610      	mov	r0, r2
 8006ab0:	f7fe f839 	bl	8004b26 <move_window>
 8006ab4:	4603      	mov	r3, r0
 8006ab6:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 8006ab8:	7dfb      	ldrb	r3, [r7, #23]
 8006aba:	2b00      	cmp	r3, #0
 8006abc:	d138      	bne.n	8006b30 <f_sync+0xf0>
					dir = fp->dir_ptr;
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006ac2:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive attribute to indicate that the file has been changed */
 8006ac4:	68fb      	ldr	r3, [r7, #12]
 8006ac6:	330b      	adds	r3, #11
 8006ac8:	781a      	ldrb	r2, [r3, #0]
 8006aca:	68fb      	ldr	r3, [r7, #12]
 8006acc:	330b      	adds	r3, #11
 8006ace:	f042 0220 	orr.w	r2, r2, #32
 8006ad2:	b2d2      	uxtb	r2, r2
 8006ad4:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation information  */
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	6818      	ldr	r0, [r3, #0]
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	689b      	ldr	r3, [r3, #8]
 8006ade:	461a      	mov	r2, r3
 8006ae0:	68f9      	ldr	r1, [r7, #12]
 8006ae2:	f7fe fdda 	bl	800569a <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 8006ae6:	68fb      	ldr	r3, [r7, #12]
 8006ae8:	f103 021c 	add.w	r2, r3, #28
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	68db      	ldr	r3, [r3, #12]
 8006af0:	4619      	mov	r1, r3
 8006af2:	4610      	mov	r0, r2
 8006af4:	f7fd ff8d 	bl	8004a12 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 8006af8:	68fb      	ldr	r3, [r7, #12]
 8006afa:	3316      	adds	r3, #22
 8006afc:	6939      	ldr	r1, [r7, #16]
 8006afe:	4618      	mov	r0, r3
 8006b00:	f7fd ff87 	bl	8004a12 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 8006b04:	68fb      	ldr	r3, [r7, #12]
 8006b06:	3312      	adds	r3, #18
 8006b08:	2100      	movs	r1, #0
 8006b0a:	4618      	mov	r0, r3
 8006b0c:	f7fd ff66 	bl	80049dc <st_word>
					fs->wflag = 1;
 8006b10:	68bb      	ldr	r3, [r7, #8]
 8006b12:	2201      	movs	r2, #1
 8006b14:	711a      	strb	r2, [r3, #4]
					res = sync_fs(fs);					/* Restore it to the directory */
 8006b16:	68bb      	ldr	r3, [r7, #8]
 8006b18:	4618      	mov	r0, r3
 8006b1a:	f7fe f831 	bl	8004b80 <sync_fs>
 8006b1e:	4603      	mov	r3, r0
 8006b20:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	7c1b      	ldrb	r3, [r3, #16]
 8006b26:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006b2a:	b2da      	uxtb	r2, r3
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	741a      	strb	r2, [r3, #16]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 8006b30:	7dfb      	ldrb	r3, [r7, #23]
}
 8006b32:	4618      	mov	r0, r3
 8006b34:	3718      	adds	r7, #24
 8006b36:	46bd      	mov	sp, r7
 8006b38:	bd80      	pop	{r7, pc}
 8006b3a:	bf00      	nop
 8006b3c:	54210000 	.word	0x54210000

08006b40 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Open file to be closed */
)
{
 8006b40:	b580      	push	{r7, lr}
 8006b42:	b084      	sub	sp, #16
 8006b44:	af00      	add	r7, sp, #0
 8006b46:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !FF_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 8006b48:	6878      	ldr	r0, [r7, #4]
 8006b4a:	f7ff ff79 	bl	8006a40 <f_sync>
 8006b4e:	4603      	mov	r3, r0
 8006b50:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 8006b52:	7bfb      	ldrb	r3, [r7, #15]
 8006b54:	2b00      	cmp	r3, #0
 8006b56:	d10e      	bne.n	8006b76 <f_close+0x36>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	f107 0208 	add.w	r2, r7, #8
 8006b5e:	4611      	mov	r1, r2
 8006b60:	4618      	mov	r0, r3
 8006b62:	f7ff fbcd 	bl	8006300 <validate>
 8006b66:	4603      	mov	r3, r0
 8006b68:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8006b6a:	7bfb      	ldrb	r3, [r7, #15]
 8006b6c:	2b00      	cmp	r3, #0
 8006b6e:	d102      	bne.n	8006b76 <f_close+0x36>
#if FF_FS_LOCK
			res = dec_share(fp->obj.lockid);		/* Decrement file open counter */
			if (res == FR_OK) fp->obj.fs = 0;	/* Invalidate file object */
#else
			fp->obj.fs = 0;	/* Invalidate file object */
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	2200      	movs	r2, #0
 8006b74:	601a      	str	r2, [r3, #0]
#if FF_FS_REENTRANT
			unlock_volume(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 8006b76:	7bfb      	ldrb	r3, [r7, #15]
}
 8006b78:	4618      	mov	r0, r3
 8006b7a:	3710      	adds	r7, #16
 8006b7c:	46bd      	mov	sp, r7
 8006b7e:	bd80      	pop	{r7, pc}

08006b80 <f_unlink>:
/*-----------------------------------------------------------------------*/

FRESULT f_unlink (
	const TCHAR* path		/* Pointer to the file or directory path */
)
{
 8006b80:	b580      	push	{r7, lr}
 8006b82:	b09c      	sub	sp, #112	@ 0x70
 8006b84:	af00      	add	r7, sp, #0
 8006b86:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;
	DIR dj, sdj;
	DWORD dclst = 0;
 8006b88:	2300      	movs	r3, #0
 8006b8a:	66bb      	str	r3, [r7, #104]	@ 0x68
#endif
	DEF_NAMBUF


	/* Get logical drive */
	res = mount_volume(&path, &fs, FA_WRITE);
 8006b8c:	f107 0164 	add.w	r1, r7, #100	@ 0x64
 8006b90:	1d3b      	adds	r3, r7, #4
 8006b92:	2202      	movs	r2, #2
 8006b94:	4618      	mov	r0, r3
 8006b96:	f7ff f98d 	bl	8005eb4 <mount_volume>
 8006b9a:	4603      	mov	r3, r0
 8006b9c:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
	if (res == FR_OK) {
 8006ba0:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 8006ba4:	2b00      	cmp	r3, #0
 8006ba6:	f040 8083 	bne.w	8006cb0 <f_unlink+0x130>
		dj.obj.fs = fs;
 8006baa:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006bac:	63bb      	str	r3, [r7, #56]	@ 0x38
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);		/* Follow the file path */
 8006bae:	687a      	ldr	r2, [r7, #4]
 8006bb0:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8006bb4:	4611      	mov	r1, r2
 8006bb6:	4618      	mov	r0, r3
 8006bb8:	f7fe ff6a 	bl	8005a90 <follow_path>
 8006bbc:	4603      	mov	r3, r0
 8006bbe:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
			res = FR_INVALID_NAME;			/* Cannot remove dot entry */
		}
#if FF_FS_LOCK
		if (res == FR_OK) res = chk_share(&dj, 2);	/* Check if it is an open object */
#endif
		if (res == FR_OK) {					/* The object is accessible */
 8006bc2:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 8006bc6:	2b00      	cmp	r3, #0
 8006bc8:	d172      	bne.n	8006cb0 <f_unlink+0x130>
			if (dj.fn[NSFLAG] & NS_NONAME) {
 8006bca:	f897 3063 	ldrb.w	r3, [r7, #99]	@ 0x63
 8006bce:	b25b      	sxtb	r3, r3
 8006bd0:	2b00      	cmp	r3, #0
 8006bd2:	da03      	bge.n	8006bdc <f_unlink+0x5c>
				res = FR_INVALID_NAME;		/* Cannot remove the origin directory */
 8006bd4:	2306      	movs	r3, #6
 8006bd6:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
 8006bda:	e008      	b.n	8006bee <f_unlink+0x6e>
			} else {
				if (dj.obj.attr & AM_RDO) {
 8006bdc:	f897 303e 	ldrb.w	r3, [r7, #62]	@ 0x3e
 8006be0:	f003 0301 	and.w	r3, r3, #1
 8006be4:	2b00      	cmp	r3, #0
 8006be6:	d002      	beq.n	8006bee <f_unlink+0x6e>
					res = FR_DENIED;		/* Cannot remove R/O object */
 8006be8:	2307      	movs	r3, #7
 8006bea:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
				}
			}
			if (res == FR_OK) {
 8006bee:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 8006bf2:	2b00      	cmp	r3, #0
 8006bf4:	d134      	bne.n	8006c60 <f_unlink+0xe0>
					init_alloc_info(fs, &obj);
					dclst = obj.sclust;
				} else
#endif
				{
					dclst = ld_clust(fs, dj.dir);
 8006bf6:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006bf8:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8006bfa:	4611      	mov	r1, r2
 8006bfc:	4618      	mov	r0, r3
 8006bfe:	f7fe fd2d 	bl	800565c <ld_clust>
 8006c02:	66b8      	str	r0, [r7, #104]	@ 0x68
				}
				if (dj.obj.attr & AM_DIR) {			/* Is it a sub-directory? */
 8006c04:	f897 303e 	ldrb.w	r3, [r7, #62]	@ 0x3e
 8006c08:	f003 0310 	and.w	r3, r3, #16
 8006c0c:	2b00      	cmp	r3, #0
 8006c0e:	d027      	beq.n	8006c60 <f_unlink+0xe0>
					if (dclst == fs->cdir) {	 	/* Is it the current directory? */
						res = FR_DENIED;
					} else
#endif
					{
						sdj.obj.fs = fs;			/* Open the sub-directory */
 8006c10:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006c12:	60fb      	str	r3, [r7, #12]
						sdj.obj.sclust = dclst;
 8006c14:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8006c16:	617b      	str	r3, [r7, #20]
						if (fs->fs_type == FS_EXFAT) {
							sdj.obj.objsize = obj.objsize;
							sdj.obj.stat = obj.stat;
						}
#endif
						res = dir_sdi(&sdj, 0);
 8006c18:	f107 030c 	add.w	r3, r7, #12
 8006c1c:	2100      	movs	r1, #0
 8006c1e:	4618      	mov	r0, r3
 8006c20:	f7fe fba6 	bl	8005370 <dir_sdi>
 8006c24:	4603      	mov	r3, r0
 8006c26:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
						if (res == FR_OK) {
 8006c2a:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 8006c2e:	2b00      	cmp	r3, #0
 8006c30:	d116      	bne.n	8006c60 <f_unlink+0xe0>
							res = DIR_READ_FILE(&sdj);			/* Test if the directory is empty */
 8006c32:	f107 030c 	add.w	r3, r7, #12
 8006c36:	2100      	movs	r1, #0
 8006c38:	4618      	mov	r0, r3
 8006c3a:	f7fe fd4e 	bl	80056da <dir_read>
 8006c3e:	4603      	mov	r3, r0
 8006c40:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
							if (res == FR_OK) res = FR_DENIED;	/* Not empty? */
 8006c44:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 8006c48:	2b00      	cmp	r3, #0
 8006c4a:	d102      	bne.n	8006c52 <f_unlink+0xd2>
 8006c4c:	2307      	movs	r3, #7
 8006c4e:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
							if (res == FR_NO_FILE) res = FR_OK;	/* Empty? */
 8006c52:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 8006c56:	2b04      	cmp	r3, #4
 8006c58:	d102      	bne.n	8006c60 <f_unlink+0xe0>
 8006c5a:	2300      	movs	r3, #0
 8006c5c:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
						}
					}
				}
			}
			if (res == FR_OK) {
 8006c60:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 8006c64:	2b00      	cmp	r3, #0
 8006c66:	d123      	bne.n	8006cb0 <f_unlink+0x130>
				res = dir_remove(&dj);			/* Remove the directory entry */
 8006c68:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8006c6c:	4618      	mov	r0, r3
 8006c6e:	f7fe fe18 	bl	80058a2 <dir_remove>
 8006c72:	4603      	mov	r3, r0
 8006c74:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
				if (res == FR_OK && dclst != 0) {	/* Remove the cluster chain if exist */
 8006c78:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 8006c7c:	2b00      	cmp	r3, #0
 8006c7e:	d10c      	bne.n	8006c9a <f_unlink+0x11a>
 8006c80:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8006c82:	2b00      	cmp	r3, #0
 8006c84:	d009      	beq.n	8006c9a <f_unlink+0x11a>
#if FF_FS_EXFAT
					res = remove_chain(&obj, dclst, 0);
#else
					res = remove_chain(&dj.obj, dclst, 0);
 8006c86:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8006c8a:	2200      	movs	r2, #0
 8006c8c:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8006c8e:	4618      	mov	r0, r3
 8006c90:	f7fe f9f0 	bl	8005074 <remove_chain>
 8006c94:	4603      	mov	r3, r0
 8006c96:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
#endif
				}
				if (res == FR_OK) res = sync_fs(fs);
 8006c9a:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 8006c9e:	2b00      	cmp	r3, #0
 8006ca0:	d106      	bne.n	8006cb0 <f_unlink+0x130>
 8006ca2:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006ca4:	4618      	mov	r0, r3
 8006ca6:	f7fd ff6b 	bl	8004b80 <sync_fs>
 8006caa:	4603      	mov	r3, r0
 8006cac:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
			}
		}
		FREE_NAMBUF();
	}

	LEAVE_FF(fs, res);
 8006cb0:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
}
 8006cb4:	4618      	mov	r0, r3
 8006cb6:	3770      	adds	r7, #112	@ 0x70
 8006cb8:	46bd      	mov	sp, r7
 8006cba:	bd80      	pop	{r7, pc}

08006cbc <create_partition>:
	BYTE drv,			/* Physical drive number */
	const LBA_t plst[],	/* Partition list */
	BYTE sys,			/* System ID for each partition (for only MBR) */
	BYTE *buf			/* Working buffer for a sector */
)
{
 8006cbc:	b580      	push	{r7, lr}
 8006cbe:	b08e      	sub	sp, #56	@ 0x38
 8006cc0:	af00      	add	r7, sp, #0
 8006cc2:	60b9      	str	r1, [r7, #8]
 8006cc4:	607b      	str	r3, [r7, #4]
 8006cc6:	4603      	mov	r3, r0
 8006cc8:	73fb      	strb	r3, [r7, #15]
 8006cca:	4613      	mov	r3, r2
 8006ccc:	73bb      	strb	r3, [r7, #14]
	DWORD sz_drv32, nxt_alloc32, sz_part32;
	BYTE *pte;
	BYTE hd, n_hd, sc, n_sc;

	/* Get physical drive size */
	if (disk_ioctl(drv, GET_SECTOR_COUNT, &sz_drv) != RES_OK) return FR_DISK_ERR;
 8006cce:	f107 0210 	add.w	r2, r7, #16
 8006cd2:	7bfb      	ldrb	r3, [r7, #15]
 8006cd4:	2101      	movs	r1, #1
 8006cd6:	4618      	mov	r0, r3
 8006cd8:	f7fd fdc2 	bl	8004860 <disk_ioctl>
 8006cdc:	4603      	mov	r3, r0
 8006cde:	2b00      	cmp	r3, #0
 8006ce0:	d001      	beq.n	8006ce6 <create_partition+0x2a>
 8006ce2:	2301      	movs	r3, #1
 8006ce4:	e108      	b.n	8006ef8 <create_partition+0x23c>
		if (disk_write(drv, buf, 0, 1) != RES_OK) return FR_DISK_ERR;

	} else
#endif
	{	/* Create partitions in MBR format */
		sz_drv32 = (DWORD)sz_drv;
 8006ce6:	693b      	ldr	r3, [r7, #16]
 8006ce8:	623b      	str	r3, [r7, #32]
		n_sc = N_SEC_TRACK;				/* Determine drive CHS without any consideration of the drive geometry */
 8006cea:	233f      	movs	r3, #63	@ 0x3f
 8006cec:	77fb      	strb	r3, [r7, #31]
		for (n_hd = 8; n_hd != 0 && sz_drv32 / n_hd / n_sc > 1024; n_hd *= 2) ;
 8006cee:	2308      	movs	r3, #8
 8006cf0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8006cf4:	e004      	b.n	8006d00 <create_partition+0x44>
 8006cf6:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8006cfa:	005b      	lsls	r3, r3, #1
 8006cfc:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8006d00:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8006d04:	2b00      	cmp	r3, #0
 8006d06:	d00a      	beq.n	8006d1e <create_partition+0x62>
 8006d08:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8006d0c:	6a3a      	ldr	r2, [r7, #32]
 8006d0e:	fbb2 f2f3 	udiv	r2, r2, r3
 8006d12:	7ffb      	ldrb	r3, [r7, #31]
 8006d14:	fbb2 f3f3 	udiv	r3, r2, r3
 8006d18:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006d1c:	d8eb      	bhi.n	8006cf6 <create_partition+0x3a>
		if (n_hd == 0) n_hd = 255;		/* Number of heads needs to be <256 */
 8006d1e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8006d22:	2b00      	cmp	r3, #0
 8006d24:	d102      	bne.n	8006d2c <create_partition+0x70>
 8006d26:	23ff      	movs	r3, #255	@ 0xff
 8006d28:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

		memset(buf, 0, FF_MAX_SS);		/* Clear MBR */
 8006d2c:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8006d30:	2100      	movs	r1, #0
 8006d32:	6878      	ldr	r0, [r7, #4]
 8006d34:	f009 ffd6 	bl	8010ce4 <memset>
		pte = buf + MBR_Table;	/* Partition table in the MBR */
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	f503 73df 	add.w	r3, r3, #446	@ 0x1be
 8006d3e:	62bb      	str	r3, [r7, #40]	@ 0x28
		for (i = 0, nxt_alloc32 = n_sc; i < 4 && nxt_alloc32 != 0 && nxt_alloc32 < sz_drv32; i++, nxt_alloc32 += sz_part32) {
 8006d40:	2300      	movs	r3, #0
 8006d42:	637b      	str	r3, [r7, #52]	@ 0x34
 8006d44:	7ffb      	ldrb	r3, [r7, #31]
 8006d46:	633b      	str	r3, [r7, #48]	@ 0x30
 8006d48:	e0b5      	b.n	8006eb6 <create_partition+0x1fa>
			sz_part32 = (DWORD)plst[i];	/* Get partition size */
 8006d4a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006d4c:	009b      	lsls	r3, r3, #2
 8006d4e:	68ba      	ldr	r2, [r7, #8]
 8006d50:	4413      	add	r3, r2
 8006d52:	681b      	ldr	r3, [r3, #0]
 8006d54:	62fb      	str	r3, [r7, #44]	@ 0x2c
			if (sz_part32 <= 100) sz_part32 = (sz_part32 == 100) ? sz_drv32 : sz_drv32 / 100 * sz_part32;	/* Size in percentage? */
 8006d56:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006d58:	2b64      	cmp	r3, #100	@ 0x64
 8006d5a:	d80d      	bhi.n	8006d78 <create_partition+0xbc>
 8006d5c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006d5e:	2b64      	cmp	r3, #100	@ 0x64
 8006d60:	d008      	beq.n	8006d74 <create_partition+0xb8>
 8006d62:	6a3b      	ldr	r3, [r7, #32]
 8006d64:	4a66      	ldr	r2, [pc, #408]	@ (8006f00 <create_partition+0x244>)
 8006d66:	fba2 2303 	umull	r2, r3, r2, r3
 8006d6a:	095b      	lsrs	r3, r3, #5
 8006d6c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006d6e:	fb02 f303 	mul.w	r3, r2, r3
 8006d72:	e000      	b.n	8006d76 <create_partition+0xba>
 8006d74:	6a3b      	ldr	r3, [r7, #32]
 8006d76:	62fb      	str	r3, [r7, #44]	@ 0x2c
			if (nxt_alloc32 + sz_part32 > sz_drv32 || nxt_alloc32 + sz_part32 < nxt_alloc32) sz_part32 = sz_drv32 - nxt_alloc32;	/* Clip at drive size */
 8006d78:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006d7a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006d7c:	4413      	add	r3, r2
 8006d7e:	6a3a      	ldr	r2, [r7, #32]
 8006d80:	429a      	cmp	r2, r3
 8006d82:	d305      	bcc.n	8006d90 <create_partition+0xd4>
 8006d84:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006d86:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006d88:	4413      	add	r3, r2
 8006d8a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006d8c:	429a      	cmp	r2, r3
 8006d8e:	d903      	bls.n	8006d98 <create_partition+0xdc>
 8006d90:	6a3a      	ldr	r2, [r7, #32]
 8006d92:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006d94:	1ad3      	subs	r3, r2, r3
 8006d96:	62fb      	str	r3, [r7, #44]	@ 0x2c
			if (sz_part32 == 0) break;	/* End of table or no sector to allocate? */
 8006d98:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006d9a:	2b00      	cmp	r3, #0
 8006d9c:	f000 8097 	beq.w	8006ece <create_partition+0x212>

			st_dword(pte + PTE_StLba, nxt_alloc32);	/* Start LBA */
 8006da0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006da2:	3308      	adds	r3, #8
 8006da4:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8006da6:	4618      	mov	r0, r3
 8006da8:	f7fd fe33 	bl	8004a12 <st_dword>
			st_dword(pte + PTE_SizLba, sz_part32);	/* Number of sectors */
 8006dac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006dae:	330c      	adds	r3, #12
 8006db0:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006db2:	4618      	mov	r0, r3
 8006db4:	f7fd fe2d 	bl	8004a12 <st_dword>
			pte[PTE_System] = sys;					/* System type */
 8006db8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006dba:	3304      	adds	r3, #4
 8006dbc:	7bba      	ldrb	r2, [r7, #14]
 8006dbe:	701a      	strb	r2, [r3, #0]

			cy = (UINT)(nxt_alloc32 / n_sc / n_hd);	/* Start cylinder */
 8006dc0:	7ffb      	ldrb	r3, [r7, #31]
 8006dc2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006dc4:	fbb2 f2f3 	udiv	r2, r2, r3
 8006dc8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8006dcc:	fbb2 f3f3 	udiv	r3, r2, r3
 8006dd0:	61bb      	str	r3, [r7, #24]
			hd = (BYTE)(nxt_alloc32 / n_sc % n_hd);	/* Start head */
 8006dd2:	7ffb      	ldrb	r3, [r7, #31]
 8006dd4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006dd6:	fbb2 f3f3 	udiv	r3, r2, r3
 8006dda:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 8006dde:	fbb3 f1f2 	udiv	r1, r3, r2
 8006de2:	fb01 f202 	mul.w	r2, r1, r2
 8006de6:	1a9b      	subs	r3, r3, r2
 8006de8:	75fb      	strb	r3, [r7, #23]
			sc = (BYTE)(nxt_alloc32 % n_sc + 1);	/* Start sector */
 8006dea:	7ffa      	ldrb	r2, [r7, #31]
 8006dec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006dee:	fbb3 f1f2 	udiv	r1, r3, r2
 8006df2:	fb01 f202 	mul.w	r2, r1, r2
 8006df6:	1a9b      	subs	r3, r3, r2
 8006df8:	b2db      	uxtb	r3, r3
 8006dfa:	3301      	adds	r3, #1
 8006dfc:	75bb      	strb	r3, [r7, #22]
			pte[PTE_StHead] = hd;
 8006dfe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006e00:	3301      	adds	r3, #1
 8006e02:	7dfa      	ldrb	r2, [r7, #23]
 8006e04:	701a      	strb	r2, [r3, #0]
			pte[PTE_StSec] = (BYTE)((cy >> 2 & 0xC0) | sc);
 8006e06:	69bb      	ldr	r3, [r7, #24]
 8006e08:	089b      	lsrs	r3, r3, #2
 8006e0a:	b2db      	uxtb	r3, r3
 8006e0c:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8006e10:	b2d9      	uxtb	r1, r3
 8006e12:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006e14:	3302      	adds	r3, #2
 8006e16:	7dba      	ldrb	r2, [r7, #22]
 8006e18:	430a      	orrs	r2, r1
 8006e1a:	b2d2      	uxtb	r2, r2
 8006e1c:	701a      	strb	r2, [r3, #0]
			pte[PTE_StCyl] = (BYTE)cy;
 8006e1e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006e20:	3303      	adds	r3, #3
 8006e22:	69ba      	ldr	r2, [r7, #24]
 8006e24:	b2d2      	uxtb	r2, r2
 8006e26:	701a      	strb	r2, [r3, #0]

			cy = (UINT)((nxt_alloc32 + sz_part32 - 1) / n_sc / n_hd);	/* End cylinder */
 8006e28:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006e2a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006e2c:	4413      	add	r3, r2
 8006e2e:	1e5a      	subs	r2, r3, #1
 8006e30:	7ffb      	ldrb	r3, [r7, #31]
 8006e32:	fbb2 f2f3 	udiv	r2, r2, r3
 8006e36:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8006e3a:	fbb2 f3f3 	udiv	r3, r2, r3
 8006e3e:	61bb      	str	r3, [r7, #24]
			hd = (BYTE)((nxt_alloc32 + sz_part32 - 1) / n_sc % n_hd);	/* End head */
 8006e40:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006e42:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006e44:	4413      	add	r3, r2
 8006e46:	1e5a      	subs	r2, r3, #1
 8006e48:	7ffb      	ldrb	r3, [r7, #31]
 8006e4a:	fbb2 f3f3 	udiv	r3, r2, r3
 8006e4e:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 8006e52:	fbb3 f1f2 	udiv	r1, r3, r2
 8006e56:	fb01 f202 	mul.w	r2, r1, r2
 8006e5a:	1a9b      	subs	r3, r3, r2
 8006e5c:	75fb      	strb	r3, [r7, #23]
			sc = (BYTE)((nxt_alloc32 + sz_part32 - 1) % n_sc + 1);		/* End sector */
 8006e5e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006e60:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006e62:	4413      	add	r3, r2
 8006e64:	3b01      	subs	r3, #1
 8006e66:	7ffa      	ldrb	r2, [r7, #31]
 8006e68:	fbb3 f1f2 	udiv	r1, r3, r2
 8006e6c:	fb01 f202 	mul.w	r2, r1, r2
 8006e70:	1a9b      	subs	r3, r3, r2
 8006e72:	b2db      	uxtb	r3, r3
 8006e74:	3301      	adds	r3, #1
 8006e76:	75bb      	strb	r3, [r7, #22]
			pte[PTE_EdHead] = hd;
 8006e78:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006e7a:	3305      	adds	r3, #5
 8006e7c:	7dfa      	ldrb	r2, [r7, #23]
 8006e7e:	701a      	strb	r2, [r3, #0]
			pte[PTE_EdSec] = (BYTE)((cy >> 2 & 0xC0) | sc);
 8006e80:	69bb      	ldr	r3, [r7, #24]
 8006e82:	089b      	lsrs	r3, r3, #2
 8006e84:	b2db      	uxtb	r3, r3
 8006e86:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8006e8a:	b2d9      	uxtb	r1, r3
 8006e8c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006e8e:	3306      	adds	r3, #6
 8006e90:	7dba      	ldrb	r2, [r7, #22]
 8006e92:	430a      	orrs	r2, r1
 8006e94:	b2d2      	uxtb	r2, r2
 8006e96:	701a      	strb	r2, [r3, #0]
			pte[PTE_EdCyl] = (BYTE)cy;
 8006e98:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006e9a:	3307      	adds	r3, #7
 8006e9c:	69ba      	ldr	r2, [r7, #24]
 8006e9e:	b2d2      	uxtb	r2, r2
 8006ea0:	701a      	strb	r2, [r3, #0]

			pte += SZ_PTE;		/* Next entry */
 8006ea2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006ea4:	3310      	adds	r3, #16
 8006ea6:	62bb      	str	r3, [r7, #40]	@ 0x28
		for (i = 0, nxt_alloc32 = n_sc; i < 4 && nxt_alloc32 != 0 && nxt_alloc32 < sz_drv32; i++, nxt_alloc32 += sz_part32) {
 8006ea8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006eaa:	3301      	adds	r3, #1
 8006eac:	637b      	str	r3, [r7, #52]	@ 0x34
 8006eae:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006eb0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006eb2:	4413      	add	r3, r2
 8006eb4:	633b      	str	r3, [r7, #48]	@ 0x30
 8006eb6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006eb8:	2b03      	cmp	r3, #3
 8006eba:	d809      	bhi.n	8006ed0 <create_partition+0x214>
 8006ebc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006ebe:	2b00      	cmp	r3, #0
 8006ec0:	d006      	beq.n	8006ed0 <create_partition+0x214>
 8006ec2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006ec4:	6a3b      	ldr	r3, [r7, #32]
 8006ec6:	429a      	cmp	r2, r3
 8006ec8:	f4ff af3f 	bcc.w	8006d4a <create_partition+0x8e>
 8006ecc:	e000      	b.n	8006ed0 <create_partition+0x214>
			if (sz_part32 == 0) break;	/* End of table or no sector to allocate? */
 8006ece:	bf00      	nop
		}

		st_word(buf + BS_55AA, 0xAA55);		/* MBR signature */
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 8006ed6:	f64a 2155 	movw	r1, #43605	@ 0xaa55
 8006eda:	4618      	mov	r0, r3
 8006edc:	f7fd fd7e 	bl	80049dc <st_word>
		if (disk_write(drv, buf, 0, 1) != RES_OK) return FR_DISK_ERR;	/* Write it to the MBR */
 8006ee0:	7bf8      	ldrb	r0, [r7, #15]
 8006ee2:	2301      	movs	r3, #1
 8006ee4:	2200      	movs	r2, #0
 8006ee6:	6879      	ldr	r1, [r7, #4]
 8006ee8:	f7fd fc86 	bl	80047f8 <disk_write>
 8006eec:	4603      	mov	r3, r0
 8006eee:	2b00      	cmp	r3, #0
 8006ef0:	d001      	beq.n	8006ef6 <create_partition+0x23a>
 8006ef2:	2301      	movs	r3, #1
 8006ef4:	e000      	b.n	8006ef8 <create_partition+0x23c>
	}

	return FR_OK;
 8006ef6:	2300      	movs	r3, #0
}
 8006ef8:	4618      	mov	r0, r3
 8006efa:	3738      	adds	r7, #56	@ 0x38
 8006efc:	46bd      	mov	sp, r7
 8006efe:	bd80      	pop	{r7, pc}
 8006f00:	51eb851f 	.word	0x51eb851f

08006f04 <f_mkfs>:
	const TCHAR* path,		/* Logical drive number */
	const MKFS_PARM* opt,	/* Format options */
	void* work,				/* Pointer to working buffer (null: use len bytes of heap memory) */
	UINT len				/* Size of working buffer [byte] */
)
{
 8006f04:	b580      	push	{r7, lr}
 8006f06:	b09e      	sub	sp, #120	@ 0x78
 8006f08:	af00      	add	r7, sp, #0
 8006f0a:	60f8      	str	r0, [r7, #12]
 8006f0c:	60b9      	str	r1, [r7, #8]
 8006f0e:	607a      	str	r2, [r7, #4]
 8006f10:	603b      	str	r3, [r7, #0]
	DSTATUS ds;
	FRESULT res;


	/* Check mounted drive and clear work area */
	vol = get_ldnumber(&path);					/* Get target logical drive */
 8006f12:	f107 030c 	add.w	r3, r7, #12
 8006f16:	4618      	mov	r0, r3
 8006f18:	f7fe fe2e 	bl	8005b78 <get_ldnumber>
 8006f1c:	6478      	str	r0, [r7, #68]	@ 0x44
	if (vol < 0) return FR_INVALID_DRIVE;
 8006f1e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006f20:	2b00      	cmp	r3, #0
 8006f22:	da02      	bge.n	8006f2a <f_mkfs+0x26>
 8006f24:	230b      	movs	r3, #11
 8006f26:	f000 bc39 	b.w	800779c <f_mkfs+0x898>
	if (FatFs[vol]) FatFs[vol]->fs_type = 0;	/* Clear the fs object if mounted */
 8006f2a:	4a90      	ldr	r2, [pc, #576]	@ (800716c <f_mkfs+0x268>)
 8006f2c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006f2e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006f32:	2b00      	cmp	r3, #0
 8006f34:	d005      	beq.n	8006f42 <f_mkfs+0x3e>
 8006f36:	4a8d      	ldr	r2, [pc, #564]	@ (800716c <f_mkfs+0x268>)
 8006f38:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006f3a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006f3e:	2200      	movs	r2, #0
 8006f40:	701a      	strb	r2, [r3, #0]
	pdrv = LD2PD(vol);		/* Hosting physical drive */
 8006f42:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006f44:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
	ipart = LD2PT(vol);		/* Hosting partition (0:create as new, 1..:existing partition) */
 8006f48:	2300      	movs	r3, #0
 8006f4a:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42

	/* Initialize the hosting physical drive */
	ds = disk_initialize(pdrv);
 8006f4e:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8006f52:	4618      	mov	r0, r3
 8006f54:	f7fd fbf6 	bl	8004744 <disk_initialize>
 8006f58:	4603      	mov	r3, r0
 8006f5a:	f887 3041 	strb.w	r3, [r7, #65]	@ 0x41
	if (ds & STA_NOINIT) return FR_NOT_READY;
 8006f5e:	f897 3041 	ldrb.w	r3, [r7, #65]	@ 0x41
 8006f62:	f003 0301 	and.w	r3, r3, #1
 8006f66:	2b00      	cmp	r3, #0
 8006f68:	d002      	beq.n	8006f70 <f_mkfs+0x6c>
 8006f6a:	2303      	movs	r3, #3
 8006f6c:	f000 bc16 	b.w	800779c <f_mkfs+0x898>
	if (ds & STA_PROTECT) return FR_WRITE_PROTECTED;
 8006f70:	f897 3041 	ldrb.w	r3, [r7, #65]	@ 0x41
 8006f74:	f003 0304 	and.w	r3, r3, #4
 8006f78:	2b00      	cmp	r3, #0
 8006f7a:	d002      	beq.n	8006f82 <f_mkfs+0x7e>
 8006f7c:	230a      	movs	r3, #10
 8006f7e:	f000 bc0d 	b.w	800779c <f_mkfs+0x898>

	/* Get physical drive parameters (sz_drv, sz_blk and ss) */
	if (!opt) opt = &defopt;	/* Use default parameter if it is not given */
 8006f82:	68bb      	ldr	r3, [r7, #8]
 8006f84:	2b00      	cmp	r3, #0
 8006f86:	d101      	bne.n	8006f8c <f_mkfs+0x88>
 8006f88:	4b79      	ldr	r3, [pc, #484]	@ (8007170 <f_mkfs+0x26c>)
 8006f8a:	60bb      	str	r3, [r7, #8]
	sz_blk = opt->align;
 8006f8c:	68bb      	ldr	r3, [r7, #8]
 8006f8e:	685b      	ldr	r3, [r3, #4]
 8006f90:	61fb      	str	r3, [r7, #28]
	if (sz_blk == 0) disk_ioctl(pdrv, GET_BLOCK_SIZE, &sz_blk);					/* Block size from the paramter or lower layer */
 8006f92:	69fb      	ldr	r3, [r7, #28]
 8006f94:	2b00      	cmp	r3, #0
 8006f96:	d107      	bne.n	8006fa8 <f_mkfs+0xa4>
 8006f98:	f107 021c 	add.w	r2, r7, #28
 8006f9c:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8006fa0:	2103      	movs	r1, #3
 8006fa2:	4618      	mov	r0, r3
 8006fa4:	f7fd fc5c 	bl	8004860 <disk_ioctl>
 	if (sz_blk == 0 || sz_blk > 0x8000 || (sz_blk & (sz_blk - 1))) sz_blk = 1;	/* Use default if the block size is invalid */
 8006fa8:	69fb      	ldr	r3, [r7, #28]
 8006faa:	2b00      	cmp	r3, #0
 8006fac:	d009      	beq.n	8006fc2 <f_mkfs+0xbe>
 8006fae:	69fb      	ldr	r3, [r7, #28]
 8006fb0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006fb4:	d805      	bhi.n	8006fc2 <f_mkfs+0xbe>
 8006fb6:	69fb      	ldr	r3, [r7, #28]
 8006fb8:	1e5a      	subs	r2, r3, #1
 8006fba:	69fb      	ldr	r3, [r7, #28]
 8006fbc:	4013      	ands	r3, r2
 8006fbe:	2b00      	cmp	r3, #0
 8006fc0:	d001      	beq.n	8006fc6 <f_mkfs+0xc2>
 8006fc2:	2301      	movs	r3, #1
 8006fc4:	61fb      	str	r3, [r7, #28]
#if FF_MAX_SS != FF_MIN_SS
	if (disk_ioctl(pdrv, GET_SECTOR_SIZE, &ss) != RES_OK) return FR_DISK_ERR;
 8006fc6:	f107 0220 	add.w	r2, r7, #32
 8006fca:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8006fce:	2102      	movs	r1, #2
 8006fd0:	4618      	mov	r0, r3
 8006fd2:	f7fd fc45 	bl	8004860 <disk_ioctl>
 8006fd6:	4603      	mov	r3, r0
 8006fd8:	2b00      	cmp	r3, #0
 8006fda:	d001      	beq.n	8006fe0 <f_mkfs+0xdc>
 8006fdc:	2301      	movs	r3, #1
 8006fde:	e3dd      	b.n	800779c <f_mkfs+0x898>
	if (ss > FF_MAX_SS || ss < FF_MIN_SS || (ss & (ss - 1))) return FR_DISK_ERR;
 8006fe0:	8c3b      	ldrh	r3, [r7, #32]
 8006fe2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006fe6:	d80a      	bhi.n	8006ffe <f_mkfs+0xfa>
 8006fe8:	8c3b      	ldrh	r3, [r7, #32]
 8006fea:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006fee:	d306      	bcc.n	8006ffe <f_mkfs+0xfa>
 8006ff0:	8c3b      	ldrh	r3, [r7, #32]
 8006ff2:	461a      	mov	r2, r3
 8006ff4:	8c3b      	ldrh	r3, [r7, #32]
 8006ff6:	3b01      	subs	r3, #1
 8006ff8:	4013      	ands	r3, r2
 8006ffa:	2b00      	cmp	r3, #0
 8006ffc:	d001      	beq.n	8007002 <f_mkfs+0xfe>
 8006ffe:	2301      	movs	r3, #1
 8007000:	e3cc      	b.n	800779c <f_mkfs+0x898>
#else
	ss = FF_MAX_SS;
#endif

	/* Options for FAT sub-type and FAT parameters */
	fsopt = opt->fmt & (FM_ANY | FM_SFD);
 8007002:	68bb      	ldr	r3, [r7, #8]
 8007004:	781b      	ldrb	r3, [r3, #0]
 8007006:	f003 030f 	and.w	r3, r3, #15
 800700a:	f887 3040 	strb.w	r3, [r7, #64]	@ 0x40
	n_fat = (opt->n_fat >= 1 && opt->n_fat <= 2) ? opt->n_fat : 1;
 800700e:	68bb      	ldr	r3, [r7, #8]
 8007010:	785b      	ldrb	r3, [r3, #1]
 8007012:	2b00      	cmp	r3, #0
 8007014:	d006      	beq.n	8007024 <f_mkfs+0x120>
 8007016:	68bb      	ldr	r3, [r7, #8]
 8007018:	785b      	ldrb	r3, [r3, #1]
 800701a:	2b02      	cmp	r3, #2
 800701c:	d802      	bhi.n	8007024 <f_mkfs+0x120>
 800701e:	68bb      	ldr	r3, [r7, #8]
 8007020:	785b      	ldrb	r3, [r3, #1]
 8007022:	e000      	b.n	8007026 <f_mkfs+0x122>
 8007024:	2301      	movs	r3, #1
 8007026:	63fb      	str	r3, [r7, #60]	@ 0x3c
	n_root = (opt->n_root >= 1 && opt->n_root <= 32768 && (opt->n_root % (ss / SZDIRE)) == 0) ? opt->n_root : 512;
 8007028:	68bb      	ldr	r3, [r7, #8]
 800702a:	689b      	ldr	r3, [r3, #8]
 800702c:	2b00      	cmp	r3, #0
 800702e:	d013      	beq.n	8007058 <f_mkfs+0x154>
 8007030:	68bb      	ldr	r3, [r7, #8]
 8007032:	689b      	ldr	r3, [r3, #8]
 8007034:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007038:	d80e      	bhi.n	8007058 <f_mkfs+0x154>
 800703a:	68bb      	ldr	r3, [r7, #8]
 800703c:	689b      	ldr	r3, [r3, #8]
 800703e:	8c3a      	ldrh	r2, [r7, #32]
 8007040:	0952      	lsrs	r2, r2, #5
 8007042:	b292      	uxth	r2, r2
 8007044:	fbb3 f1f2 	udiv	r1, r3, r2
 8007048:	fb01 f202 	mul.w	r2, r1, r2
 800704c:	1a9b      	subs	r3, r3, r2
 800704e:	2b00      	cmp	r3, #0
 8007050:	d102      	bne.n	8007058 <f_mkfs+0x154>
 8007052:	68bb      	ldr	r3, [r7, #8]
 8007054:	689b      	ldr	r3, [r3, #8]
 8007056:	e001      	b.n	800705c <f_mkfs+0x158>
 8007058:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800705c:	63bb      	str	r3, [r7, #56]	@ 0x38
	sz_au = (opt->au_size <= 0x1000000 && (opt->au_size & (opt->au_size - 1)) == 0) ? opt->au_size : 0;
 800705e:	68bb      	ldr	r3, [r7, #8]
 8007060:	68db      	ldr	r3, [r3, #12]
 8007062:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8007066:	d80a      	bhi.n	800707e <f_mkfs+0x17a>
 8007068:	68bb      	ldr	r3, [r7, #8]
 800706a:	68da      	ldr	r2, [r3, #12]
 800706c:	68bb      	ldr	r3, [r7, #8]
 800706e:	68db      	ldr	r3, [r3, #12]
 8007070:	3b01      	subs	r3, #1
 8007072:	4013      	ands	r3, r2
 8007074:	2b00      	cmp	r3, #0
 8007076:	d102      	bne.n	800707e <f_mkfs+0x17a>
 8007078:	68bb      	ldr	r3, [r7, #8]
 800707a:	68db      	ldr	r3, [r3, #12]
 800707c:	e000      	b.n	8007080 <f_mkfs+0x17c>
 800707e:	2300      	movs	r3, #0
 8007080:	64fb      	str	r3, [r7, #76]	@ 0x4c
	sz_au /= ss;	/* Byte --> Sector */
 8007082:	8c3b      	ldrh	r3, [r7, #32]
 8007084:	461a      	mov	r2, r3
 8007086:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007088:	fbb3 f3f2 	udiv	r3, r3, r2
 800708c:	64fb      	str	r3, [r7, #76]	@ 0x4c

	/* Get working buffer */
	sz_buf = len / ss;		/* Size of working buffer [sector] */
 800708e:	8c3b      	ldrh	r3, [r7, #32]
 8007090:	461a      	mov	r2, r3
 8007092:	683b      	ldr	r3, [r7, #0]
 8007094:	fbb3 f3f2 	udiv	r3, r3, r2
 8007098:	637b      	str	r3, [r7, #52]	@ 0x34
	if (sz_buf == 0) return FR_NOT_ENOUGH_CORE;
 800709a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800709c:	2b00      	cmp	r3, #0
 800709e:	d101      	bne.n	80070a4 <f_mkfs+0x1a0>
 80070a0:	2311      	movs	r3, #17
 80070a2:	e37b      	b.n	800779c <f_mkfs+0x898>
	buf = (BYTE*)work;		/* Working buffer */
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	633b      	str	r3, [r7, #48]	@ 0x30
#if FF_USE_LFN == 3
	if (!buf) buf = ff_memalloc(sz_buf * ss);	/* Use heap memory for working buffer */
#endif
	if (!buf) return FR_NOT_ENOUGH_CORE;
 80070a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80070aa:	2b00      	cmp	r3, #0
 80070ac:	d101      	bne.n	80070b2 <f_mkfs+0x1ae>
 80070ae:	2311      	movs	r3, #17
 80070b0:	e374      	b.n	800779c <f_mkfs+0x898>

	/* Determine where the volume to be located (b_vol, sz_vol) */
	b_vol = sz_vol = 0;
 80070b2:	2300      	movs	r3, #0
 80070b4:	61bb      	str	r3, [r7, #24]
 80070b6:	69bb      	ldr	r3, [r7, #24]
 80070b8:	66fb      	str	r3, [r7, #108]	@ 0x6c
			if (ipart > 4 || pte[PTE_System] == 0) LEAVE_MKFS(FR_MKFS_ABORTED);	/* No partition? */
			b_vol = ld_dword(pte + PTE_StLba);		/* Get volume start sector */
			sz_vol = ld_dword(pte + PTE_SizLba);	/* Get volume size */
		}
	} else {	/* The volume is associated with a physical drive */
		if (disk_ioctl(pdrv, GET_SECTOR_COUNT, &sz_vol) != RES_OK) LEAVE_MKFS(FR_DISK_ERR);
 80070ba:	f107 0218 	add.w	r2, r7, #24
 80070be:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 80070c2:	2101      	movs	r1, #1
 80070c4:	4618      	mov	r0, r3
 80070c6:	f7fd fbcb 	bl	8004860 <disk_ioctl>
 80070ca:	4603      	mov	r3, r0
 80070cc:	2b00      	cmp	r3, #0
 80070ce:	d001      	beq.n	80070d4 <f_mkfs+0x1d0>
 80070d0:	2301      	movs	r3, #1
 80070d2:	e363      	b.n	800779c <f_mkfs+0x898>
		if (!(fsopt & FM_SFD)) {	/* To be partitioned? */
 80070d4:	f897 3040 	ldrb.w	r3, [r7, #64]	@ 0x40
 80070d8:	f003 0308 	and.w	r3, r3, #8
 80070dc:	2b00      	cmp	r3, #0
 80070de:	d108      	bne.n	80070f2 <f_mkfs+0x1ee>
				fsopt |= 0x80;		/* Partitioning is in GPT */
				b_vol = GPT_ALIGN / ss; sz_vol -= b_vol + GPT_ITEMS * SZ_GPTE / ss + 1;	/* Estimated partition offset and size */
			} else
#endif
			{	/* Partitioning is in MBR */
				if (sz_vol > N_SEC_TRACK) {
 80070e0:	69bb      	ldr	r3, [r7, #24]
 80070e2:	2b3f      	cmp	r3, #63	@ 0x3f
 80070e4:	d905      	bls.n	80070f2 <f_mkfs+0x1ee>
					b_vol = N_SEC_TRACK; sz_vol -= b_vol;	/* Estimated partition offset and size */
 80070e6:	233f      	movs	r3, #63	@ 0x3f
 80070e8:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80070ea:	69ba      	ldr	r2, [r7, #24]
 80070ec:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80070ee:	1ad3      	subs	r3, r2, r3
 80070f0:	61bb      	str	r3, [r7, #24]
				}
			}
		}
	}
	if (sz_vol < 128) LEAVE_MKFS(FR_MKFS_ABORTED);	/* Check if volume size is >=128s */
 80070f2:	69bb      	ldr	r3, [r7, #24]
 80070f4:	2b7f      	cmp	r3, #127	@ 0x7f
 80070f6:	d801      	bhi.n	80070fc <f_mkfs+0x1f8>
 80070f8:	230e      	movs	r3, #14
 80070fa:	e34f      	b.n	800779c <f_mkfs+0x898>
			}
		}
#if FF_LBA64
		if (sz_vol >= 0x100000000) LEAVE_MKFS(FR_MKFS_ABORTED);	/* Too large volume for FAT/FAT32 */
#endif
		if (sz_au > 128) sz_au = 128;	/* Invalid AU for FAT/FAT32? */
 80070fc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80070fe:	2b80      	cmp	r3, #128	@ 0x80
 8007100:	d901      	bls.n	8007106 <f_mkfs+0x202>
 8007102:	2380      	movs	r3, #128	@ 0x80
 8007104:	64fb      	str	r3, [r7, #76]	@ 0x4c
		if (fsopt & FM_FAT32) {	/* FAT32 possible? */
 8007106:	f897 3040 	ldrb.w	r3, [r7, #64]	@ 0x40
 800710a:	f003 0302 	and.w	r3, r3, #2
 800710e:	2b00      	cmp	r3, #0
 8007110:	d009      	beq.n	8007126 <f_mkfs+0x222>
			if (!(fsopt & FM_FAT)) {	/* no-FAT? */
 8007112:	f897 3040 	ldrb.w	r3, [r7, #64]	@ 0x40
 8007116:	f003 0301 	and.w	r3, r3, #1
 800711a:	2b00      	cmp	r3, #0
 800711c:	d103      	bne.n	8007126 <f_mkfs+0x222>
				fsty = FS_FAT32; break;
 800711e:	2303      	movs	r3, #3
 8007120:	f887 305b 	strb.w	r3, [r7, #91]	@ 0x5b
 8007124:	e00a      	b.n	800713c <f_mkfs+0x238>
			}
		}
		if (!(fsopt & FM_FAT)) LEAVE_MKFS(FR_INVALID_PARAMETER);	/* no-FAT? */
 8007126:	f897 3040 	ldrb.w	r3, [r7, #64]	@ 0x40
 800712a:	f003 0301 	and.w	r3, r3, #1
 800712e:	2b00      	cmp	r3, #0
 8007130:	d101      	bne.n	8007136 <f_mkfs+0x232>
 8007132:	2313      	movs	r3, #19
 8007134:	e332      	b.n	800779c <f_mkfs+0x898>
		fsty = FS_FAT16;
 8007136:	2302      	movs	r3, #2
 8007138:	f887 305b 	strb.w	r3, [r7, #91]	@ 0x5b
	} while (0);

	vsn = (DWORD)sz_vol + GET_FATTIME();	/* VSN generated from current time and partitiion size */
 800713c:	69bb      	ldr	r3, [r7, #24]
 800713e:	f103 43a8 	add.w	r3, r3, #1409286144	@ 0x54000000
 8007142:	f503 1304 	add.w	r3, r3, #2162688	@ 0x210000
 8007146:	62fb      	str	r3, [r7, #44]	@ 0x2c

	} else
#endif	/* FF_FS_EXFAT */
	{	/* Create an FAT/FAT32 volume */
		do {
			pau = sz_au;
 8007148:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800714a:	663b      	str	r3, [r7, #96]	@ 0x60
			/* Pre-determine number of clusters and FAT sub-type */
			if (fsty == FS_FAT32) {	/* FAT32 volume */
 800714c:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 8007150:	2b03      	cmp	r3, #3
 8007152:	d141      	bne.n	80071d8 <f_mkfs+0x2d4>
				if (pau == 0) {	/* AU auto-selection */
 8007154:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8007156:	2b00      	cmp	r3, #0
 8007158:	d120      	bne.n	800719c <f_mkfs+0x298>
					n = (DWORD)sz_vol / 0x20000;	/* Volume size in unit of 128KS */
 800715a:	69bb      	ldr	r3, [r7, #24]
 800715c:	0c5b      	lsrs	r3, r3, #17
 800715e:	667b      	str	r3, [r7, #100]	@ 0x64
					for (i = 0, pau = 1; cst32[i] && cst32[i] <= n; i++, pau <<= 1) ;	/* Get from table */
 8007160:	2300      	movs	r3, #0
 8007162:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007164:	2301      	movs	r3, #1
 8007166:	663b      	str	r3, [r7, #96]	@ 0x60
 8007168:	e00a      	b.n	8007180 <f_mkfs+0x27c>
 800716a:	bf00      	nop
 800716c:	200073b8 	.word	0x200073b8
 8007170:	08012334 	.word	0x08012334
 8007174:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007176:	3301      	adds	r3, #1
 8007178:	64bb      	str	r3, [r7, #72]	@ 0x48
 800717a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800717c:	005b      	lsls	r3, r3, #1
 800717e:	663b      	str	r3, [r7, #96]	@ 0x60
 8007180:	4a95      	ldr	r2, [pc, #596]	@ (80073d8 <f_mkfs+0x4d4>)
 8007182:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007184:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007188:	2b00      	cmp	r3, #0
 800718a:	d007      	beq.n	800719c <f_mkfs+0x298>
 800718c:	4a92      	ldr	r2, [pc, #584]	@ (80073d8 <f_mkfs+0x4d4>)
 800718e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007190:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007194:	461a      	mov	r2, r3
 8007196:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007198:	4293      	cmp	r3, r2
 800719a:	d2eb      	bcs.n	8007174 <f_mkfs+0x270>
				}
				n_clst = (DWORD)sz_vol / pau;	/* Number of clusters */
 800719c:	69ba      	ldr	r2, [r7, #24]
 800719e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80071a0:	fbb2 f3f3 	udiv	r3, r2, r3
 80071a4:	62bb      	str	r3, [r7, #40]	@ 0x28
				sz_fat = (n_clst * 4 + 8 + ss - 1) / ss;	/* FAT size [sector] */
 80071a6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80071a8:	3302      	adds	r3, #2
 80071aa:	009b      	lsls	r3, r3, #2
 80071ac:	8c3a      	ldrh	r2, [r7, #32]
 80071ae:	4413      	add	r3, r2
 80071b0:	3b01      	subs	r3, #1
 80071b2:	8c3a      	ldrh	r2, [r7, #32]
 80071b4:	fbb3 f3f2 	udiv	r3, r3, r2
 80071b8:	657b      	str	r3, [r7, #84]	@ 0x54
				sz_rsv = 32;	/* Number of reserved sectors */
 80071ba:	2320      	movs	r3, #32
 80071bc:	677b      	str	r3, [r7, #116]	@ 0x74
				sz_dir = 0;		/* No static directory */
 80071be:	2300      	movs	r3, #0
 80071c0:	653b      	str	r3, [r7, #80]	@ 0x50
				if (n_clst <= MAX_FAT16 || n_clst > MAX_FAT32) LEAVE_MKFS(FR_MKFS_ABORTED);
 80071c2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80071c4:	f64f 72f5 	movw	r2, #65525	@ 0xfff5
 80071c8:	4293      	cmp	r3, r2
 80071ca:	d903      	bls.n	80071d4 <f_mkfs+0x2d0>
 80071cc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80071ce:	4a83      	ldr	r2, [pc, #524]	@ (80073dc <f_mkfs+0x4d8>)
 80071d0:	4293      	cmp	r3, r2
 80071d2:	d94b      	bls.n	800726c <f_mkfs+0x368>
 80071d4:	230e      	movs	r3, #14
 80071d6:	e2e1      	b.n	800779c <f_mkfs+0x898>
			} else {				/* FAT volume */
				if (pau == 0) {	/* au auto-selection */
 80071d8:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80071da:	2b00      	cmp	r3, #0
 80071dc:	d11b      	bne.n	8007216 <f_mkfs+0x312>
					n = (DWORD)sz_vol / 0x1000;	/* Volume size in unit of 4KS */
 80071de:	69bb      	ldr	r3, [r7, #24]
 80071e0:	0b1b      	lsrs	r3, r3, #12
 80071e2:	667b      	str	r3, [r7, #100]	@ 0x64
					for (i = 0, pau = 1; cst[i] && cst[i] <= n; i++, pau <<= 1) ;	/* Get from table */
 80071e4:	2300      	movs	r3, #0
 80071e6:	64bb      	str	r3, [r7, #72]	@ 0x48
 80071e8:	2301      	movs	r3, #1
 80071ea:	663b      	str	r3, [r7, #96]	@ 0x60
 80071ec:	e005      	b.n	80071fa <f_mkfs+0x2f6>
 80071ee:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80071f0:	3301      	adds	r3, #1
 80071f2:	64bb      	str	r3, [r7, #72]	@ 0x48
 80071f4:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80071f6:	005b      	lsls	r3, r3, #1
 80071f8:	663b      	str	r3, [r7, #96]	@ 0x60
 80071fa:	4a79      	ldr	r2, [pc, #484]	@ (80073e0 <f_mkfs+0x4dc>)
 80071fc:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80071fe:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007202:	2b00      	cmp	r3, #0
 8007204:	d007      	beq.n	8007216 <f_mkfs+0x312>
 8007206:	4a76      	ldr	r2, [pc, #472]	@ (80073e0 <f_mkfs+0x4dc>)
 8007208:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800720a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800720e:	461a      	mov	r2, r3
 8007210:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007212:	4293      	cmp	r3, r2
 8007214:	d2eb      	bcs.n	80071ee <f_mkfs+0x2ea>
				}
				n_clst = (DWORD)sz_vol / pau;
 8007216:	69ba      	ldr	r2, [r7, #24]
 8007218:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800721a:	fbb2 f3f3 	udiv	r3, r2, r3
 800721e:	62bb      	str	r3, [r7, #40]	@ 0x28
				if (n_clst > MAX_FAT12) {
 8007220:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007222:	f640 72f5 	movw	r2, #4085	@ 0xff5
 8007226:	4293      	cmp	r3, r2
 8007228:	d904      	bls.n	8007234 <f_mkfs+0x330>
					n = n_clst * 2 + 4;		/* FAT size [byte] */
 800722a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800722c:	3302      	adds	r3, #2
 800722e:	005b      	lsls	r3, r3, #1
 8007230:	667b      	str	r3, [r7, #100]	@ 0x64
 8007232:	e00a      	b.n	800724a <f_mkfs+0x346>
				} else {
					fsty = FS_FAT12;
 8007234:	2301      	movs	r3, #1
 8007236:	f887 305b 	strb.w	r3, [r7, #91]	@ 0x5b
					n = (n_clst * 3 + 1) / 2 + 3;	/* FAT size [byte] */
 800723a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800723c:	4613      	mov	r3, r2
 800723e:	005b      	lsls	r3, r3, #1
 8007240:	4413      	add	r3, r2
 8007242:	3301      	adds	r3, #1
 8007244:	085b      	lsrs	r3, r3, #1
 8007246:	3303      	adds	r3, #3
 8007248:	667b      	str	r3, [r7, #100]	@ 0x64
				}
				sz_fat = (n + ss - 1) / ss;		/* FAT size [sector] */
 800724a:	8c3b      	ldrh	r3, [r7, #32]
 800724c:	461a      	mov	r2, r3
 800724e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007250:	4413      	add	r3, r2
 8007252:	3b01      	subs	r3, #1
 8007254:	8c3a      	ldrh	r2, [r7, #32]
 8007256:	fbb3 f3f2 	udiv	r3, r3, r2
 800725a:	657b      	str	r3, [r7, #84]	@ 0x54
				sz_rsv = 1;						/* Number of reserved sectors */
 800725c:	2301      	movs	r3, #1
 800725e:	677b      	str	r3, [r7, #116]	@ 0x74
				sz_dir = (DWORD)n_root * SZDIRE / ss;	/* Root dir size [sector] */
 8007260:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007262:	015b      	lsls	r3, r3, #5
 8007264:	8c3a      	ldrh	r2, [r7, #32]
 8007266:	fbb3 f3f2 	udiv	r3, r3, r2
 800726a:	653b      	str	r3, [r7, #80]	@ 0x50
			}
			b_fat = b_vol + sz_rsv;						/* FAT base */
 800726c:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800726e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8007270:	4413      	add	r3, r2
 8007272:	66bb      	str	r3, [r7, #104]	@ 0x68
			b_data = b_fat + sz_fat * n_fat + sz_dir;	/* Data base */
 8007274:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007276:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8007278:	fb03 f202 	mul.w	r2, r3, r2
 800727c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800727e:	4413      	add	r3, r2
 8007280:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8007282:	4413      	add	r3, r2
 8007284:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Align data area to erase block boundary (for flash memory media) */
			n = (DWORD)(((b_data + sz_blk - 1) & ~(sz_blk - 1)) - b_data);	/* Sectors to next nearest from current data base */
 8007286:	69fa      	ldr	r2, [r7, #28]
 8007288:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800728a:	4413      	add	r3, r2
 800728c:	1e5a      	subs	r2, r3, #1
 800728e:	69fb      	ldr	r3, [r7, #28]
 8007290:	425b      	negs	r3, r3
 8007292:	401a      	ands	r2, r3
 8007294:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007296:	1ad3      	subs	r3, r2, r3
 8007298:	667b      	str	r3, [r7, #100]	@ 0x64
			if (fsty == FS_FAT32) {		/* FAT32: Move FAT */
 800729a:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 800729e:	2b03      	cmp	r3, #3
 80072a0:	d108      	bne.n	80072b4 <f_mkfs+0x3b0>
				sz_rsv += n; b_fat += n;
 80072a2:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 80072a4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80072a6:	4413      	add	r3, r2
 80072a8:	677b      	str	r3, [r7, #116]	@ 0x74
 80072aa:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 80072ac:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80072ae:	4413      	add	r3, r2
 80072b0:	66bb      	str	r3, [r7, #104]	@ 0x68
 80072b2:	e019      	b.n	80072e8 <f_mkfs+0x3e4>
			} else {					/* FAT: Expand FAT */
				if (n % n_fat) {	/* Adjust fractional error if needed */
 80072b4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80072b6:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80072b8:	fbb3 f2f2 	udiv	r2, r3, r2
 80072bc:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80072be:	fb01 f202 	mul.w	r2, r1, r2
 80072c2:	1a9b      	subs	r3, r3, r2
 80072c4:	2b00      	cmp	r3, #0
 80072c6:	d008      	beq.n	80072da <f_mkfs+0x3d6>
					n--; sz_rsv++; b_fat++;
 80072c8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80072ca:	3b01      	subs	r3, #1
 80072cc:	667b      	str	r3, [r7, #100]	@ 0x64
 80072ce:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80072d0:	3301      	adds	r3, #1
 80072d2:	677b      	str	r3, [r7, #116]	@ 0x74
 80072d4:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80072d6:	3301      	adds	r3, #1
 80072d8:	66bb      	str	r3, [r7, #104]	@ 0x68
				}
				sz_fat += n / n_fat;
 80072da:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 80072dc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80072de:	fbb2 f3f3 	udiv	r3, r2, r3
 80072e2:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80072e4:	4413      	add	r3, r2
 80072e6:	657b      	str	r3, [r7, #84]	@ 0x54
			}

			/* Determine number of clusters and final check of validity of the FAT sub-type */
			if (sz_vol < b_data + pau * 16 - b_vol) LEAVE_MKFS(FR_MKFS_ABORTED);	/* Too small volume? */
 80072e8:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80072ea:	011a      	lsls	r2, r3, #4
 80072ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80072ee:	441a      	add	r2, r3
 80072f0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80072f2:	1ad2      	subs	r2, r2, r3
 80072f4:	69bb      	ldr	r3, [r7, #24]
 80072f6:	429a      	cmp	r2, r3
 80072f8:	d901      	bls.n	80072fe <f_mkfs+0x3fa>
 80072fa:	230e      	movs	r3, #14
 80072fc:	e24e      	b.n	800779c <f_mkfs+0x898>
			n_clst = ((DWORD)sz_vol - sz_rsv - sz_fat * n_fat - sz_dir) / pau;
 80072fe:	69ba      	ldr	r2, [r7, #24]
 8007300:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8007302:	1ad2      	subs	r2, r2, r3
 8007304:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007306:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8007308:	fb01 f303 	mul.w	r3, r1, r3
 800730c:	1ad2      	subs	r2, r2, r3
 800730e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007310:	1ad2      	subs	r2, r2, r3
 8007312:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8007314:	fbb2 f3f3 	udiv	r3, r2, r3
 8007318:	62bb      	str	r3, [r7, #40]	@ 0x28
			if (fsty == FS_FAT32) {
 800731a:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 800731e:	2b03      	cmp	r3, #3
 8007320:	d10f      	bne.n	8007342 <f_mkfs+0x43e>
				if (n_clst <= MAX_FAT16) {	/* Too few clusters for FAT32? */
 8007322:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007324:	f64f 72f5 	movw	r2, #65525	@ 0xfff5
 8007328:	4293      	cmp	r3, r2
 800732a:	d80a      	bhi.n	8007342 <f_mkfs+0x43e>
					if (sz_au == 0 && (sz_au = pau / 2) != 0) continue;	/* Adjust cluster size and retry */
 800732c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800732e:	2b00      	cmp	r3, #0
 8007330:	d105      	bne.n	800733e <f_mkfs+0x43a>
 8007332:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8007334:	085b      	lsrs	r3, r3, #1
 8007336:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007338:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800733a:	2b00      	cmp	r3, #0
 800733c:	d145      	bne.n	80073ca <f_mkfs+0x4c6>
					LEAVE_MKFS(FR_MKFS_ABORTED);
 800733e:	230e      	movs	r3, #14
 8007340:	e22c      	b.n	800779c <f_mkfs+0x898>
				}
			}
			if (fsty == FS_FAT16) {
 8007342:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 8007346:	2b02      	cmp	r3, #2
 8007348:	d134      	bne.n	80073b4 <f_mkfs+0x4b0>
				if (n_clst > MAX_FAT16) {	/* Too many clusters for FAT16 */
 800734a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800734c:	f64f 72f5 	movw	r2, #65525	@ 0xfff5
 8007350:	4293      	cmp	r3, r2
 8007352:	d91f      	bls.n	8007394 <f_mkfs+0x490>
					if (sz_au == 0 && (pau * 2) <= 64) {
 8007354:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007356:	2b00      	cmp	r3, #0
 8007358:	d107      	bne.n	800736a <f_mkfs+0x466>
 800735a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800735c:	005b      	lsls	r3, r3, #1
 800735e:	2b40      	cmp	r3, #64	@ 0x40
 8007360:	d803      	bhi.n	800736a <f_mkfs+0x466>
						sz_au = pau * 2; continue;	/* Adjust cluster size and retry */
 8007362:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8007364:	005b      	lsls	r3, r3, #1
 8007366:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007368:	e034      	b.n	80073d4 <f_mkfs+0x4d0>
					}
					if ((fsopt & FM_FAT32)) {
 800736a:	f897 3040 	ldrb.w	r3, [r7, #64]	@ 0x40
 800736e:	f003 0302 	and.w	r3, r3, #2
 8007372:	2b00      	cmp	r3, #0
 8007374:	d003      	beq.n	800737e <f_mkfs+0x47a>
						fsty = FS_FAT32; continue;	/* Switch type to FAT32 and retry */
 8007376:	2303      	movs	r3, #3
 8007378:	f887 305b 	strb.w	r3, [r7, #91]	@ 0x5b
 800737c:	e02a      	b.n	80073d4 <f_mkfs+0x4d0>
					}
					if (sz_au == 0 && (sz_au = pau * 2) <= 128) continue;	/* Adjust cluster size and retry */
 800737e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007380:	2b00      	cmp	r3, #0
 8007382:	d105      	bne.n	8007390 <f_mkfs+0x48c>
 8007384:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8007386:	005b      	lsls	r3, r3, #1
 8007388:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800738a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800738c:	2b80      	cmp	r3, #128	@ 0x80
 800738e:	d91e      	bls.n	80073ce <f_mkfs+0x4ca>
					LEAVE_MKFS(FR_MKFS_ABORTED);
 8007390:	230e      	movs	r3, #14
 8007392:	e203      	b.n	800779c <f_mkfs+0x898>
				}
				if  (n_clst <= MAX_FAT12) {	/* Too few clusters for FAT16 */
 8007394:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007396:	f640 72f5 	movw	r2, #4085	@ 0xff5
 800739a:	4293      	cmp	r3, r2
 800739c:	d80a      	bhi.n	80073b4 <f_mkfs+0x4b0>
					if (sz_au == 0 && (sz_au = pau * 2) <= 128) continue;	/* Adjust cluster size and retry */
 800739e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80073a0:	2b00      	cmp	r3, #0
 80073a2:	d105      	bne.n	80073b0 <f_mkfs+0x4ac>
 80073a4:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80073a6:	005b      	lsls	r3, r3, #1
 80073a8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80073aa:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80073ac:	2b80      	cmp	r3, #128	@ 0x80
 80073ae:	d910      	bls.n	80073d2 <f_mkfs+0x4ce>
					LEAVE_MKFS(FR_MKFS_ABORTED);
 80073b0:	230e      	movs	r3, #14
 80073b2:	e1f3      	b.n	800779c <f_mkfs+0x898>
				}
			}
			if (fsty == FS_FAT12 && n_clst > MAX_FAT12) LEAVE_MKFS(FR_MKFS_ABORTED);	/* Too many clusters for FAT12 */
 80073b4:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 80073b8:	2b01      	cmp	r3, #1
 80073ba:	d113      	bne.n	80073e4 <f_mkfs+0x4e0>
 80073bc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80073be:	f640 72f5 	movw	r2, #4085	@ 0xff5
 80073c2:	4293      	cmp	r3, r2
 80073c4:	d90e      	bls.n	80073e4 <f_mkfs+0x4e0>
 80073c6:	230e      	movs	r3, #14
 80073c8:	e1e8      	b.n	800779c <f_mkfs+0x898>
					if (sz_au == 0 && (sz_au = pau / 2) != 0) continue;	/* Adjust cluster size and retry */
 80073ca:	bf00      	nop
 80073cc:	e6bc      	b.n	8007148 <f_mkfs+0x244>
					if (sz_au == 0 && (sz_au = pau * 2) <= 128) continue;	/* Adjust cluster size and retry */
 80073ce:	bf00      	nop
 80073d0:	e6ba      	b.n	8007148 <f_mkfs+0x244>
					if (sz_au == 0 && (sz_au = pau * 2) <= 128) continue;	/* Adjust cluster size and retry */
 80073d2:	bf00      	nop
			pau = sz_au;
 80073d4:	e6b8      	b.n	8007148 <f_mkfs+0x244>
 80073d6:	bf00      	nop
 80073d8:	08012344 	.word	0x08012344
 80073dc:	0ffffff5 	.word	0x0ffffff5
 80073e0:	08012354 	.word	0x08012354

			/* Ok, it is the valid cluster configuration */
			break;
 80073e4:	bf00      	nop
#if FF_USE_TRIM
		lba[0] = b_vol; lba[1] = b_vol + sz_vol - 1;	/* Inform storage device that the volume area may be erased */
		disk_ioctl(pdrv, CTRL_TRIM, lba);
#endif
		/* Create FAT VBR */
		memset(buf, 0, ss);
 80073e6:	8c3b      	ldrh	r3, [r7, #32]
 80073e8:	461a      	mov	r2, r3
 80073ea:	2100      	movs	r1, #0
 80073ec:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80073ee:	f009 fc79 	bl	8010ce4 <memset>
		memcpy(buf + BS_JmpBoot, "\xEB\xFE\x90" "MSDOS5.0", 11);	/* Boot jump code (x86), OEM name */
 80073f2:	220b      	movs	r2, #11
 80073f4:	49b1      	ldr	r1, [pc, #708]	@ (80076bc <f_mkfs+0x7b8>)
 80073f6:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80073f8:	f009 fcde 	bl	8010db8 <memcpy>
		st_word(buf + BPB_BytsPerSec, ss);				/* Sector size [byte] */
 80073fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80073fe:	330b      	adds	r3, #11
 8007400:	8c3a      	ldrh	r2, [r7, #32]
 8007402:	4611      	mov	r1, r2
 8007404:	4618      	mov	r0, r3
 8007406:	f7fd fae9 	bl	80049dc <st_word>
		buf[BPB_SecPerClus] = (BYTE)pau;				/* Cluster size [sector] */
 800740a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800740c:	330d      	adds	r3, #13
 800740e:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8007410:	b2d2      	uxtb	r2, r2
 8007412:	701a      	strb	r2, [r3, #0]
		st_word(buf + BPB_RsvdSecCnt, (WORD)sz_rsv);	/* Size of reserved area */
 8007414:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007416:	330e      	adds	r3, #14
 8007418:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 800741a:	b292      	uxth	r2, r2
 800741c:	4611      	mov	r1, r2
 800741e:	4618      	mov	r0, r3
 8007420:	f7fd fadc 	bl	80049dc <st_word>
		buf[BPB_NumFATs] = (BYTE)n_fat;					/* Number of FATs */
 8007424:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007426:	3310      	adds	r3, #16
 8007428:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800742a:	b2d2      	uxtb	r2, r2
 800742c:	701a      	strb	r2, [r3, #0]
		st_word(buf + BPB_RootEntCnt, (WORD)((fsty == FS_FAT32) ? 0 : n_root));	/* Number of root directory entries */
 800742e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007430:	f103 0211 	add.w	r2, r3, #17
 8007434:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 8007438:	2b03      	cmp	r3, #3
 800743a:	d002      	beq.n	8007442 <f_mkfs+0x53e>
 800743c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800743e:	b29b      	uxth	r3, r3
 8007440:	e000      	b.n	8007444 <f_mkfs+0x540>
 8007442:	2300      	movs	r3, #0
 8007444:	4619      	mov	r1, r3
 8007446:	4610      	mov	r0, r2
 8007448:	f7fd fac8 	bl	80049dc <st_word>
		if (sz_vol < 0x10000) {
 800744c:	69bb      	ldr	r3, [r7, #24]
 800744e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007452:	d208      	bcs.n	8007466 <f_mkfs+0x562>
			st_word(buf + BPB_TotSec16, (WORD)sz_vol);	/* Volume size in 16-bit LBA */
 8007454:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007456:	3313      	adds	r3, #19
 8007458:	69ba      	ldr	r2, [r7, #24]
 800745a:	b292      	uxth	r2, r2
 800745c:	4611      	mov	r1, r2
 800745e:	4618      	mov	r0, r3
 8007460:	f7fd fabc 	bl	80049dc <st_word>
 8007464:	e006      	b.n	8007474 <f_mkfs+0x570>
		} else {
			st_dword(buf + BPB_TotSec32, (DWORD)sz_vol);	/* Volume size in 32-bit LBA */
 8007466:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007468:	3320      	adds	r3, #32
 800746a:	69ba      	ldr	r2, [r7, #24]
 800746c:	4611      	mov	r1, r2
 800746e:	4618      	mov	r0, r3
 8007470:	f7fd facf 	bl	8004a12 <st_dword>
		}
		buf[BPB_Media] = 0xF8;							/* Media descriptor byte */
 8007474:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007476:	3315      	adds	r3, #21
 8007478:	22f8      	movs	r2, #248	@ 0xf8
 800747a:	701a      	strb	r2, [r3, #0]
		st_word(buf + BPB_SecPerTrk, 63);				/* Number of sectors per track (for int13) */
 800747c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800747e:	3318      	adds	r3, #24
 8007480:	213f      	movs	r1, #63	@ 0x3f
 8007482:	4618      	mov	r0, r3
 8007484:	f7fd faaa 	bl	80049dc <st_word>
		st_word(buf + BPB_NumHeads, 255);				/* Number of heads (for int13) */
 8007488:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800748a:	331a      	adds	r3, #26
 800748c:	21ff      	movs	r1, #255	@ 0xff
 800748e:	4618      	mov	r0, r3
 8007490:	f7fd faa4 	bl	80049dc <st_word>
		st_dword(buf + BPB_HiddSec, (DWORD)b_vol);		/* Volume offset in the physical drive [sector] */
 8007494:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007496:	331c      	adds	r3, #28
 8007498:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 800749a:	4618      	mov	r0, r3
 800749c:	f7fd fab9 	bl	8004a12 <st_dword>
		if (fsty == FS_FAT32) {
 80074a0:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 80074a4:	2b03      	cmp	r3, #3
 80074a6:	d12d      	bne.n	8007504 <f_mkfs+0x600>
			st_dword(buf + BS_VolID32, vsn);			/* VSN */
 80074a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80074aa:	3343      	adds	r3, #67	@ 0x43
 80074ac:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80074ae:	4618      	mov	r0, r3
 80074b0:	f7fd faaf 	bl	8004a12 <st_dword>
			st_dword(buf + BPB_FATSz32, sz_fat);		/* FAT size [sector] */
 80074b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80074b6:	3324      	adds	r3, #36	@ 0x24
 80074b8:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80074ba:	4618      	mov	r0, r3
 80074bc:	f7fd faa9 	bl	8004a12 <st_dword>
			st_dword(buf + BPB_RootClus32, 2);			/* Root directory cluster # (2) */
 80074c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80074c2:	332c      	adds	r3, #44	@ 0x2c
 80074c4:	2102      	movs	r1, #2
 80074c6:	4618      	mov	r0, r3
 80074c8:	f7fd faa3 	bl	8004a12 <st_dword>
			st_word(buf + BPB_FSInfo32, 1);				/* Offset of FSINFO sector (VBR + 1) */
 80074cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80074ce:	3330      	adds	r3, #48	@ 0x30
 80074d0:	2101      	movs	r1, #1
 80074d2:	4618      	mov	r0, r3
 80074d4:	f7fd fa82 	bl	80049dc <st_word>
			st_word(buf + BPB_BkBootSec32, 6);			/* Offset of backup VBR (VBR + 6) */
 80074d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80074da:	3332      	adds	r3, #50	@ 0x32
 80074dc:	2106      	movs	r1, #6
 80074de:	4618      	mov	r0, r3
 80074e0:	f7fd fa7c 	bl	80049dc <st_word>
			buf[BS_DrvNum32] = 0x80;					/* Drive number (for int13) */
 80074e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80074e6:	3340      	adds	r3, #64	@ 0x40
 80074e8:	2280      	movs	r2, #128	@ 0x80
 80074ea:	701a      	strb	r2, [r3, #0]
			buf[BS_BootSig32] = 0x29;					/* Extended boot signature */
 80074ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80074ee:	3342      	adds	r3, #66	@ 0x42
 80074f0:	2229      	movs	r2, #41	@ 0x29
 80074f2:	701a      	strb	r2, [r3, #0]
			memcpy(buf + BS_VolLab32, "NO NAME    " "FAT32   ", 19);	/* Volume label, FAT signature */
 80074f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80074f6:	3347      	adds	r3, #71	@ 0x47
 80074f8:	2213      	movs	r2, #19
 80074fa:	4971      	ldr	r1, [pc, #452]	@ (80076c0 <f_mkfs+0x7bc>)
 80074fc:	4618      	mov	r0, r3
 80074fe:	f009 fc5b 	bl	8010db8 <memcpy>
 8007502:	e01c      	b.n	800753e <f_mkfs+0x63a>
		} else {
			st_dword(buf + BS_VolID, vsn);				/* VSN */
 8007504:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007506:	3327      	adds	r3, #39	@ 0x27
 8007508:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800750a:	4618      	mov	r0, r3
 800750c:	f7fd fa81 	bl	8004a12 <st_dword>
			st_word(buf + BPB_FATSz16, (WORD)sz_fat);	/* FAT size [sector] */
 8007510:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007512:	3316      	adds	r3, #22
 8007514:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8007516:	b292      	uxth	r2, r2
 8007518:	4611      	mov	r1, r2
 800751a:	4618      	mov	r0, r3
 800751c:	f7fd fa5e 	bl	80049dc <st_word>
			buf[BS_DrvNum] = 0x80;						/* Drive number (for int13) */
 8007520:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007522:	3324      	adds	r3, #36	@ 0x24
 8007524:	2280      	movs	r2, #128	@ 0x80
 8007526:	701a      	strb	r2, [r3, #0]
			buf[BS_BootSig] = 0x29;						/* Extended boot signature */
 8007528:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800752a:	3326      	adds	r3, #38	@ 0x26
 800752c:	2229      	movs	r2, #41	@ 0x29
 800752e:	701a      	strb	r2, [r3, #0]
			memcpy(buf + BS_VolLab, "NO NAME    " "FAT     ", 19);	/* Volume label, FAT signature */
 8007530:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007532:	332b      	adds	r3, #43	@ 0x2b
 8007534:	2213      	movs	r2, #19
 8007536:	4963      	ldr	r1, [pc, #396]	@ (80076c4 <f_mkfs+0x7c0>)
 8007538:	4618      	mov	r0, r3
 800753a:	f009 fc3d 	bl	8010db8 <memcpy>
		}
		st_word(buf + BS_55AA, 0xAA55);					/* Signature (offset is fixed here regardless of sector size) */
 800753e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007540:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 8007544:	f64a 2155 	movw	r1, #43605	@ 0xaa55
 8007548:	4618      	mov	r0, r3
 800754a:	f7fd fa47 	bl	80049dc <st_word>
		if (disk_write(pdrv, buf, b_vol, 1) != RES_OK) LEAVE_MKFS(FR_DISK_ERR);	/* Write it to the VBR sector */
 800754e:	f897 0043 	ldrb.w	r0, [r7, #67]	@ 0x43
 8007552:	2301      	movs	r3, #1
 8007554:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8007556:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8007558:	f7fd f94e 	bl	80047f8 <disk_write>
 800755c:	4603      	mov	r3, r0
 800755e:	2b00      	cmp	r3, #0
 8007560:	d001      	beq.n	8007566 <f_mkfs+0x662>
 8007562:	2301      	movs	r3, #1
 8007564:	e11a      	b.n	800779c <f_mkfs+0x898>

		/* Create FSINFO record if needed */
		if (fsty == FS_FAT32) {
 8007566:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 800756a:	2b03      	cmp	r3, #3
 800756c:	d140      	bne.n	80075f0 <f_mkfs+0x6ec>
			disk_write(pdrv, buf, b_vol + 6, 1);		/* Write backup VBR (VBR + 6) */
 800756e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007570:	1d9a      	adds	r2, r3, #6
 8007572:	f897 0043 	ldrb.w	r0, [r7, #67]	@ 0x43
 8007576:	2301      	movs	r3, #1
 8007578:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800757a:	f7fd f93d 	bl	80047f8 <disk_write>
			memset(buf, 0, ss);
 800757e:	8c3b      	ldrh	r3, [r7, #32]
 8007580:	461a      	mov	r2, r3
 8007582:	2100      	movs	r1, #0
 8007584:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8007586:	f009 fbad 	bl	8010ce4 <memset>
			st_dword(buf + FSI_LeadSig, 0x41615252);
 800758a:	494f      	ldr	r1, [pc, #316]	@ (80076c8 <f_mkfs+0x7c4>)
 800758c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800758e:	f7fd fa40 	bl	8004a12 <st_dword>
			st_dword(buf + FSI_StrucSig, 0x61417272);
 8007592:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007594:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 8007598:	494c      	ldr	r1, [pc, #304]	@ (80076cc <f_mkfs+0x7c8>)
 800759a:	4618      	mov	r0, r3
 800759c:	f7fd fa39 	bl	8004a12 <st_dword>
			st_dword(buf + FSI_Free_Count, n_clst - 1);	/* Number of free clusters */
 80075a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80075a2:	f503 72f4 	add.w	r2, r3, #488	@ 0x1e8
 80075a6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80075a8:	3b01      	subs	r3, #1
 80075aa:	4619      	mov	r1, r3
 80075ac:	4610      	mov	r0, r2
 80075ae:	f7fd fa30 	bl	8004a12 <st_dword>
			st_dword(buf + FSI_Nxt_Free, 2);			/* Last allocated cluster# */
 80075b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80075b4:	f503 73f6 	add.w	r3, r3, #492	@ 0x1ec
 80075b8:	2102      	movs	r1, #2
 80075ba:	4618      	mov	r0, r3
 80075bc:	f7fd fa29 	bl	8004a12 <st_dword>
			st_word(buf + BS_55AA, 0xAA55);
 80075c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80075c2:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 80075c6:	f64a 2155 	movw	r1, #43605	@ 0xaa55
 80075ca:	4618      	mov	r0, r3
 80075cc:	f7fd fa06 	bl	80049dc <st_word>
			disk_write(pdrv, buf, b_vol + 7, 1);		/* Write backup FSINFO (VBR + 7) */
 80075d0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80075d2:	1dda      	adds	r2, r3, #7
 80075d4:	f897 0043 	ldrb.w	r0, [r7, #67]	@ 0x43
 80075d8:	2301      	movs	r3, #1
 80075da:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80075dc:	f7fd f90c 	bl	80047f8 <disk_write>
			disk_write(pdrv, buf, b_vol + 1, 1);		/* Write original FSINFO (VBR + 1) */
 80075e0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80075e2:	1c5a      	adds	r2, r3, #1
 80075e4:	f897 0043 	ldrb.w	r0, [r7, #67]	@ 0x43
 80075e8:	2301      	movs	r3, #1
 80075ea:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80075ec:	f7fd f904 	bl	80047f8 <disk_write>
		}

		/* Initialize FAT area */
		memset(buf, 0, sz_buf * ss);
 80075f0:	8c3b      	ldrh	r3, [r7, #32]
 80075f2:	461a      	mov	r2, r3
 80075f4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80075f6:	fb02 f303 	mul.w	r3, r2, r3
 80075fa:	461a      	mov	r2, r3
 80075fc:	2100      	movs	r1, #0
 80075fe:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8007600:	f009 fb70 	bl	8010ce4 <memset>
		sect = b_fat;		/* FAT start sector */
 8007604:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8007606:	673b      	str	r3, [r7, #112]	@ 0x70
		for (i = 0; i < n_fat; i++) {			/* Initialize FATs each */
 8007608:	2300      	movs	r3, #0
 800760a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800760c:	e04b      	b.n	80076a6 <f_mkfs+0x7a2>
			if (fsty == FS_FAT32) {
 800760e:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 8007612:	2b03      	cmp	r3, #3
 8007614:	d113      	bne.n	800763e <f_mkfs+0x73a>
				st_dword(buf + 0, 0xFFFFFFF8);	/* FAT[0] */
 8007616:	f06f 0107 	mvn.w	r1, #7
 800761a:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800761c:	f7fd f9f9 	bl	8004a12 <st_dword>
				st_dword(buf + 4, 0xFFFFFFFF);	/* FAT[1] */
 8007620:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007622:	3304      	adds	r3, #4
 8007624:	f04f 31ff 	mov.w	r1, #4294967295
 8007628:	4618      	mov	r0, r3
 800762a:	f7fd f9f2 	bl	8004a12 <st_dword>
				st_dword(buf + 8, 0x0FFFFFFF);	/* FAT[2] (root directory) */
 800762e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007630:	3308      	adds	r3, #8
 8007632:	f06f 4170 	mvn.w	r1, #4026531840	@ 0xf0000000
 8007636:	4618      	mov	r0, r3
 8007638:	f7fd f9eb 	bl	8004a12 <st_dword>
 800763c:	e00b      	b.n	8007656 <f_mkfs+0x752>
			} else {
				st_dword(buf + 0, (fsty == FS_FAT12) ? 0xFFFFF8 : 0xFFFFFFF8);	/* FAT[0] and FAT[1] */
 800763e:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 8007642:	2b01      	cmp	r3, #1
 8007644:	d101      	bne.n	800764a <f_mkfs+0x746>
 8007646:	4b22      	ldr	r3, [pc, #136]	@ (80076d0 <f_mkfs+0x7cc>)
 8007648:	e001      	b.n	800764e <f_mkfs+0x74a>
 800764a:	f06f 0307 	mvn.w	r3, #7
 800764e:	4619      	mov	r1, r3
 8007650:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8007652:	f7fd f9de 	bl	8004a12 <st_dword>
			}
			nsect = sz_fat;		/* Number of FAT sectors */
 8007656:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007658:	65fb      	str	r3, [r7, #92]	@ 0x5c
			do {	/* Fill FAT sectors */
				n = (nsect > sz_buf) ? sz_buf : nsect;
 800765a:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800765c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800765e:	4293      	cmp	r3, r2
 8007660:	bf28      	it	cs
 8007662:	4613      	movcs	r3, r2
 8007664:	667b      	str	r3, [r7, #100]	@ 0x64
				if (disk_write(pdrv, buf, sect, (UINT)n) != RES_OK) LEAVE_MKFS(FR_DISK_ERR);
 8007666:	f897 0043 	ldrb.w	r0, [r7, #67]	@ 0x43
 800766a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800766c:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 800766e:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8007670:	f7fd f8c2 	bl	80047f8 <disk_write>
 8007674:	4603      	mov	r3, r0
 8007676:	2b00      	cmp	r3, #0
 8007678:	d001      	beq.n	800767e <f_mkfs+0x77a>
 800767a:	2301      	movs	r3, #1
 800767c:	e08e      	b.n	800779c <f_mkfs+0x898>
				memset(buf, 0, ss);	/* Rest of FAT all are cleared */
 800767e:	8c3b      	ldrh	r3, [r7, #32]
 8007680:	461a      	mov	r2, r3
 8007682:	2100      	movs	r1, #0
 8007684:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8007686:	f009 fb2d 	bl	8010ce4 <memset>
				sect += n; nsect -= n;
 800768a:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 800768c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800768e:	4413      	add	r3, r2
 8007690:	673b      	str	r3, [r7, #112]	@ 0x70
 8007692:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8007694:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007696:	1ad3      	subs	r3, r2, r3
 8007698:	65fb      	str	r3, [r7, #92]	@ 0x5c
			} while (nsect);
 800769a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800769c:	2b00      	cmp	r3, #0
 800769e:	d1dc      	bne.n	800765a <f_mkfs+0x756>
		for (i = 0; i < n_fat; i++) {			/* Initialize FATs each */
 80076a0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80076a2:	3301      	adds	r3, #1
 80076a4:	64bb      	str	r3, [r7, #72]	@ 0x48
 80076a6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80076a8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80076aa:	429a      	cmp	r2, r3
 80076ac:	d3af      	bcc.n	800760e <f_mkfs+0x70a>
		}

		/* Initialize root directory (fill with zero) */
		nsect = (fsty == FS_FAT32) ? pau : sz_dir;	/* Number of root directory sectors */
 80076ae:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 80076b2:	2b03      	cmp	r3, #3
 80076b4:	d10e      	bne.n	80076d4 <f_mkfs+0x7d0>
 80076b6:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80076b8:	e00d      	b.n	80076d6 <f_mkfs+0x7d2>
 80076ba:	bf00      	nop
 80076bc:	0801222c 	.word	0x0801222c
 80076c0:	08012238 	.word	0x08012238
 80076c4:	0801224c 	.word	0x0801224c
 80076c8:	41615252 	.word	0x41615252
 80076cc:	61417272 	.word	0x61417272
 80076d0:	00fffff8 	.word	0x00fffff8
 80076d4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80076d6:	65fb      	str	r3, [r7, #92]	@ 0x5c
		do {
			n = (nsect > sz_buf) ? sz_buf : nsect;
 80076d8:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 80076da:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80076dc:	4293      	cmp	r3, r2
 80076de:	bf28      	it	cs
 80076e0:	4613      	movcs	r3, r2
 80076e2:	667b      	str	r3, [r7, #100]	@ 0x64
			if (disk_write(pdrv, buf, sect, (UINT)n) != RES_OK) LEAVE_MKFS(FR_DISK_ERR);
 80076e4:	f897 0043 	ldrb.w	r0, [r7, #67]	@ 0x43
 80076e8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80076ea:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 80076ec:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80076ee:	f7fd f883 	bl	80047f8 <disk_write>
 80076f2:	4603      	mov	r3, r0
 80076f4:	2b00      	cmp	r3, #0
 80076f6:	d001      	beq.n	80076fc <f_mkfs+0x7f8>
 80076f8:	2301      	movs	r3, #1
 80076fa:	e04f      	b.n	800779c <f_mkfs+0x898>
			sect += n; nsect -= n;
 80076fc:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 80076fe:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007700:	4413      	add	r3, r2
 8007702:	673b      	str	r3, [r7, #112]	@ 0x70
 8007704:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8007706:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007708:	1ad3      	subs	r3, r2, r3
 800770a:	65fb      	str	r3, [r7, #92]	@ 0x5c
		} while (nsect);
 800770c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800770e:	2b00      	cmp	r3, #0
 8007710:	d1e2      	bne.n	80076d8 <f_mkfs+0x7d4>
	/* A FAT volume has been created here */

	/* Determine system ID in the MBR partition table */
	if (FF_FS_EXFAT && fsty == FS_EXFAT) {
		sys = 0x07;		/* exFAT */
	} else if (fsty == FS_FAT32) {
 8007712:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 8007716:	2b03      	cmp	r3, #3
 8007718:	d103      	bne.n	8007722 <f_mkfs+0x81e>
		sys = 0x0C;		/* FAT32X */
 800771a:	230c      	movs	r3, #12
 800771c:	f887 305a 	strb.w	r3, [r7, #90]	@ 0x5a
 8007720:	e012      	b.n	8007748 <f_mkfs+0x844>
	} else if (sz_vol >= 0x10000) {
 8007722:	69bb      	ldr	r3, [r7, #24]
 8007724:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007728:	d303      	bcc.n	8007732 <f_mkfs+0x82e>
		sys = 0x06;		/* FAT12/16 (large) */
 800772a:	2306      	movs	r3, #6
 800772c:	f887 305a 	strb.w	r3, [r7, #90]	@ 0x5a
 8007730:	e00a      	b.n	8007748 <f_mkfs+0x844>
	} else if (fsty == FS_FAT16) {
 8007732:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 8007736:	2b02      	cmp	r3, #2
 8007738:	d103      	bne.n	8007742 <f_mkfs+0x83e>
		sys = 0x04;		/* FAT16 */
 800773a:	2304      	movs	r3, #4
 800773c:	f887 305a 	strb.w	r3, [r7, #90]	@ 0x5a
 8007740:	e002      	b.n	8007748 <f_mkfs+0x844>
	} else {
		sys = 0x01;		/* FAT12 */
 8007742:	2301      	movs	r3, #1
 8007744:	f887 305a 	strb.w	r3, [r7, #90]	@ 0x5a
			if (disk_read(pdrv, buf, 0, 1) != RES_OK) LEAVE_MKFS(FR_DISK_ERR);	/* Read the MBR */
			buf[MBR_Table + (ipart - 1) * SZ_PTE + PTE_System] = sys;			/* Set system ID */
			if (disk_write(pdrv, buf, 0, 1) != RES_OK) LEAVE_MKFS(FR_DISK_ERR);	/* Write it back to the MBR */
		}
	} else {								/* Volume as a new single partition */
		if (!(fsopt & FM_SFD)) {			/* Create partition table if not in SFD format */
 8007748:	f897 3040 	ldrb.w	r3, [r7, #64]	@ 0x40
 800774c:	f003 0308 	and.w	r3, r3, #8
 8007750:	2b00      	cmp	r3, #0
 8007752:	d116      	bne.n	8007782 <f_mkfs+0x87e>
			lba[0] = sz_vol; lba[1] = 0;
 8007754:	69bb      	ldr	r3, [r7, #24]
 8007756:	613b      	str	r3, [r7, #16]
 8007758:	2300      	movs	r3, #0
 800775a:	617b      	str	r3, [r7, #20]
			res = create_partition(pdrv, lba, sys, buf);
 800775c:	f897 205a 	ldrb.w	r2, [r7, #90]	@ 0x5a
 8007760:	f107 0110 	add.w	r1, r7, #16
 8007764:	f897 0043 	ldrb.w	r0, [r7, #67]	@ 0x43
 8007768:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800776a:	f7ff faa7 	bl	8006cbc <create_partition>
 800776e:	4603      	mov	r3, r0
 8007770:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
			if (res != FR_OK) LEAVE_MKFS(res);
 8007774:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8007778:	2b00      	cmp	r3, #0
 800777a:	d002      	beq.n	8007782 <f_mkfs+0x87e>
 800777c:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8007780:	e00c      	b.n	800779c <f_mkfs+0x898>
		}
	}

	if (disk_ioctl(pdrv, CTRL_SYNC, 0) != RES_OK) LEAVE_MKFS(FR_DISK_ERR);
 8007782:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8007786:	2200      	movs	r2, #0
 8007788:	2100      	movs	r1, #0
 800778a:	4618      	mov	r0, r3
 800778c:	f7fd f868 	bl	8004860 <disk_ioctl>
 8007790:	4603      	mov	r3, r0
 8007792:	2b00      	cmp	r3, #0
 8007794:	d001      	beq.n	800779a <f_mkfs+0x896>
 8007796:	2301      	movs	r3, #1
 8007798:	e000      	b.n	800779c <f_mkfs+0x898>

	LEAVE_MKFS(FR_OK);
 800779a:	2300      	movs	r3, #0
}
 800779c:	4618      	mov	r0, r3
 800779e:	3778      	adds	r7, #120	@ 0x78
 80077a0:	46bd      	mov	sp, r7
 80077a2:	bd80      	pop	{r7, pc}

080077a4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80077a4:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80077dc <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80077a8:	f7fc ff92 	bl	80046d0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80077ac:	480c      	ldr	r0, [pc, #48]	@ (80077e0 <LoopForever+0x6>)
  ldr r1, =_edata
 80077ae:	490d      	ldr	r1, [pc, #52]	@ (80077e4 <LoopForever+0xa>)
  ldr r2, =_sidata
 80077b0:	4a0d      	ldr	r2, [pc, #52]	@ (80077e8 <LoopForever+0xe>)
  movs r3, #0
 80077b2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80077b4:	e002      	b.n	80077bc <LoopCopyDataInit>

080077b6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80077b6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80077b8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80077ba:	3304      	adds	r3, #4

080077bc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80077bc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80077be:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80077c0:	d3f9      	bcc.n	80077b6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80077c2:	4a0a      	ldr	r2, [pc, #40]	@ (80077ec <LoopForever+0x12>)
  ldr r4, =_ebss
 80077c4:	4c0a      	ldr	r4, [pc, #40]	@ (80077f0 <LoopForever+0x16>)
  movs r3, #0
 80077c6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80077c8:	e001      	b.n	80077ce <LoopFillZerobss>

080077ca <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80077ca:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80077cc:	3204      	adds	r2, #4

080077ce <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80077ce:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80077d0:	d3fb      	bcc.n	80077ca <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80077d2:	f009 facb 	bl	8010d6c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80077d6:	f7fa ffa1 	bl	800271c <main>

080077da <LoopForever>:

LoopForever:
    b LoopForever
 80077da:	e7fe      	b.n	80077da <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80077dc:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 80077e0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80077e4:	20000064 	.word	0x20000064
  ldr r2, =_sidata
 80077e8:	080124c4 	.word	0x080124c4
  ldr r2, =_sbss
 80077ec:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 80077f0:	20007510 	.word	0x20007510

080077f4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80077f4:	e7fe      	b.n	80077f4 <ADC1_2_IRQHandler>

080077f6 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80077f6:	b580      	push	{r7, lr}
 80077f8:	b082      	sub	sp, #8
 80077fa:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80077fc:	2300      	movs	r3, #0
 80077fe:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8007800:	2003      	movs	r0, #3
 8007802:	f001 fcfb 	bl	80091fc <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8007806:	200f      	movs	r0, #15
 8007808:	f000 f80e 	bl	8007828 <HAL_InitTick>
 800780c:	4603      	mov	r3, r0
 800780e:	2b00      	cmp	r3, #0
 8007810:	d002      	beq.n	8007818 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8007812:	2301      	movs	r3, #1
 8007814:	71fb      	strb	r3, [r7, #7]
 8007816:	e001      	b.n	800781c <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8007818:	f7fc fac8 	bl	8003dac <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800781c:	79fb      	ldrb	r3, [r7, #7]
}
 800781e:	4618      	mov	r0, r3
 8007820:	3708      	adds	r7, #8
 8007822:	46bd      	mov	sp, r7
 8007824:	bd80      	pop	{r7, pc}
	...

08007828 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8007828:	b580      	push	{r7, lr}
 800782a:	b084      	sub	sp, #16
 800782c:	af00      	add	r7, sp, #0
 800782e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8007830:	2300      	movs	r3, #0
 8007832:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8007834:	4b17      	ldr	r3, [pc, #92]	@ (8007894 <HAL_InitTick+0x6c>)
 8007836:	781b      	ldrb	r3, [r3, #0]
 8007838:	2b00      	cmp	r3, #0
 800783a:	d023      	beq.n	8007884 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 800783c:	4b16      	ldr	r3, [pc, #88]	@ (8007898 <HAL_InitTick+0x70>)
 800783e:	681a      	ldr	r2, [r3, #0]
 8007840:	4b14      	ldr	r3, [pc, #80]	@ (8007894 <HAL_InitTick+0x6c>)
 8007842:	781b      	ldrb	r3, [r3, #0]
 8007844:	4619      	mov	r1, r3
 8007846:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800784a:	fbb3 f3f1 	udiv	r3, r3, r1
 800784e:	fbb2 f3f3 	udiv	r3, r2, r3
 8007852:	4618      	mov	r0, r3
 8007854:	f001 fd07 	bl	8009266 <HAL_SYSTICK_Config>
 8007858:	4603      	mov	r3, r0
 800785a:	2b00      	cmp	r3, #0
 800785c:	d10f      	bne.n	800787e <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800785e:	687b      	ldr	r3, [r7, #4]
 8007860:	2b0f      	cmp	r3, #15
 8007862:	d809      	bhi.n	8007878 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8007864:	2200      	movs	r2, #0
 8007866:	6879      	ldr	r1, [r7, #4]
 8007868:	f04f 30ff 	mov.w	r0, #4294967295
 800786c:	f001 fcd1 	bl	8009212 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8007870:	4a0a      	ldr	r2, [pc, #40]	@ (800789c <HAL_InitTick+0x74>)
 8007872:	687b      	ldr	r3, [r7, #4]
 8007874:	6013      	str	r3, [r2, #0]
 8007876:	e007      	b.n	8007888 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8007878:	2301      	movs	r3, #1
 800787a:	73fb      	strb	r3, [r7, #15]
 800787c:	e004      	b.n	8007888 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 800787e:	2301      	movs	r3, #1
 8007880:	73fb      	strb	r3, [r7, #15]
 8007882:	e001      	b.n	8007888 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8007884:	2301      	movs	r3, #1
 8007886:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8007888:	7bfb      	ldrb	r3, [r7, #15]
}
 800788a:	4618      	mov	r0, r3
 800788c:	3710      	adds	r7, #16
 800788e:	46bd      	mov	sp, r7
 8007890:	bd80      	pop	{r7, pc}
 8007892:	bf00      	nop
 8007894:	20000010 	.word	0x20000010
 8007898:	20000000 	.word	0x20000000
 800789c:	2000000c 	.word	0x2000000c

080078a0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80078a0:	b480      	push	{r7}
 80078a2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80078a4:	4b06      	ldr	r3, [pc, #24]	@ (80078c0 <HAL_IncTick+0x20>)
 80078a6:	781b      	ldrb	r3, [r3, #0]
 80078a8:	461a      	mov	r2, r3
 80078aa:	4b06      	ldr	r3, [pc, #24]	@ (80078c4 <HAL_IncTick+0x24>)
 80078ac:	681b      	ldr	r3, [r3, #0]
 80078ae:	4413      	add	r3, r2
 80078b0:	4a04      	ldr	r2, [pc, #16]	@ (80078c4 <HAL_IncTick+0x24>)
 80078b2:	6013      	str	r3, [r2, #0]
}
 80078b4:	bf00      	nop
 80078b6:	46bd      	mov	sp, r7
 80078b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078bc:	4770      	bx	lr
 80078be:	bf00      	nop
 80078c0:	20000010 	.word	0x20000010
 80078c4:	200073c4 	.word	0x200073c4

080078c8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80078c8:	b480      	push	{r7}
 80078ca:	af00      	add	r7, sp, #0
  return uwTick;
 80078cc:	4b03      	ldr	r3, [pc, #12]	@ (80078dc <HAL_GetTick+0x14>)
 80078ce:	681b      	ldr	r3, [r3, #0]
}
 80078d0:	4618      	mov	r0, r3
 80078d2:	46bd      	mov	sp, r7
 80078d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078d8:	4770      	bx	lr
 80078da:	bf00      	nop
 80078dc:	200073c4 	.word	0x200073c4

080078e0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80078e0:	b580      	push	{r7, lr}
 80078e2:	b084      	sub	sp, #16
 80078e4:	af00      	add	r7, sp, #0
 80078e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80078e8:	f7ff ffee 	bl	80078c8 <HAL_GetTick>
 80078ec:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80078ee:	687b      	ldr	r3, [r7, #4]
 80078f0:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 80078f2:	68fb      	ldr	r3, [r7, #12]
 80078f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80078f8:	d005      	beq.n	8007906 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 80078fa:	4b0a      	ldr	r3, [pc, #40]	@ (8007924 <HAL_Delay+0x44>)
 80078fc:	781b      	ldrb	r3, [r3, #0]
 80078fe:	461a      	mov	r2, r3
 8007900:	68fb      	ldr	r3, [r7, #12]
 8007902:	4413      	add	r3, r2
 8007904:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8007906:	bf00      	nop
 8007908:	f7ff ffde 	bl	80078c8 <HAL_GetTick>
 800790c:	4602      	mov	r2, r0
 800790e:	68bb      	ldr	r3, [r7, #8]
 8007910:	1ad3      	subs	r3, r2, r3
 8007912:	68fa      	ldr	r2, [r7, #12]
 8007914:	429a      	cmp	r2, r3
 8007916:	d8f7      	bhi.n	8007908 <HAL_Delay+0x28>
  {
  }
}
 8007918:	bf00      	nop
 800791a:	bf00      	nop
 800791c:	3710      	adds	r7, #16
 800791e:	46bd      	mov	sp, r7
 8007920:	bd80      	pop	{r7, pc}
 8007922:	bf00      	nop
 8007924:	20000010 	.word	0x20000010

08007928 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8007928:	b480      	push	{r7}
 800792a:	b083      	sub	sp, #12
 800792c:	af00      	add	r7, sp, #0
 800792e:	6078      	str	r0, [r7, #4]
 8007930:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	689b      	ldr	r3, [r3, #8]
 8007936:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 800793a:	683b      	ldr	r3, [r7, #0]
 800793c:	431a      	orrs	r2, r3
 800793e:	687b      	ldr	r3, [r7, #4]
 8007940:	609a      	str	r2, [r3, #8]
}
 8007942:	bf00      	nop
 8007944:	370c      	adds	r7, #12
 8007946:	46bd      	mov	sp, r7
 8007948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800794c:	4770      	bx	lr

0800794e <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 800794e:	b480      	push	{r7}
 8007950:	b083      	sub	sp, #12
 8007952:	af00      	add	r7, sp, #0
 8007954:	6078      	str	r0, [r7, #4]
 8007956:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	689b      	ldr	r3, [r3, #8]
 800795c:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8007960:	683b      	ldr	r3, [r7, #0]
 8007962:	431a      	orrs	r2, r3
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	609a      	str	r2, [r3, #8]
}
 8007968:	bf00      	nop
 800796a:	370c      	adds	r7, #12
 800796c:	46bd      	mov	sp, r7
 800796e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007972:	4770      	bx	lr

08007974 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8007974:	b480      	push	{r7}
 8007976:	b083      	sub	sp, #12
 8007978:	af00      	add	r7, sp, #0
 800797a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	689b      	ldr	r3, [r3, #8]
 8007980:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8007984:	4618      	mov	r0, r3
 8007986:	370c      	adds	r7, #12
 8007988:	46bd      	mov	sp, r7
 800798a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800798e:	4770      	bx	lr

08007990 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8007990:	b480      	push	{r7}
 8007992:	b087      	sub	sp, #28
 8007994:	af00      	add	r7, sp, #0
 8007996:	60f8      	str	r0, [r7, #12]
 8007998:	60b9      	str	r1, [r7, #8]
 800799a:	607a      	str	r2, [r7, #4]
 800799c:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800799e:	68fb      	ldr	r3, [r7, #12]
 80079a0:	3360      	adds	r3, #96	@ 0x60
 80079a2:	461a      	mov	r2, r3
 80079a4:	68bb      	ldr	r3, [r7, #8]
 80079a6:	009b      	lsls	r3, r3, #2
 80079a8:	4413      	add	r3, r2
 80079aa:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80079ac:	697b      	ldr	r3, [r7, #20]
 80079ae:	681a      	ldr	r2, [r3, #0]
 80079b0:	4b08      	ldr	r3, [pc, #32]	@ (80079d4 <LL_ADC_SetOffset+0x44>)
 80079b2:	4013      	ands	r3, r2
 80079b4:	687a      	ldr	r2, [r7, #4]
 80079b6:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 80079ba:	683a      	ldr	r2, [r7, #0]
 80079bc:	430a      	orrs	r2, r1
 80079be:	4313      	orrs	r3, r2
 80079c0:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 80079c4:	697b      	ldr	r3, [r7, #20]
 80079c6:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 80079c8:	bf00      	nop
 80079ca:	371c      	adds	r7, #28
 80079cc:	46bd      	mov	sp, r7
 80079ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079d2:	4770      	bx	lr
 80079d4:	03fff000 	.word	0x03fff000

080079d8 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 80079d8:	b480      	push	{r7}
 80079da:	b085      	sub	sp, #20
 80079dc:	af00      	add	r7, sp, #0
 80079de:	6078      	str	r0, [r7, #4]
 80079e0:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80079e2:	687b      	ldr	r3, [r7, #4]
 80079e4:	3360      	adds	r3, #96	@ 0x60
 80079e6:	461a      	mov	r2, r3
 80079e8:	683b      	ldr	r3, [r7, #0]
 80079ea:	009b      	lsls	r3, r3, #2
 80079ec:	4413      	add	r3, r2
 80079ee:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80079f0:	68fb      	ldr	r3, [r7, #12]
 80079f2:	681b      	ldr	r3, [r3, #0]
 80079f4:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 80079f8:	4618      	mov	r0, r3
 80079fa:	3714      	adds	r7, #20
 80079fc:	46bd      	mov	sp, r7
 80079fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a02:	4770      	bx	lr

08007a04 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8007a04:	b480      	push	{r7}
 8007a06:	b087      	sub	sp, #28
 8007a08:	af00      	add	r7, sp, #0
 8007a0a:	60f8      	str	r0, [r7, #12]
 8007a0c:	60b9      	str	r1, [r7, #8]
 8007a0e:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8007a10:	68fb      	ldr	r3, [r7, #12]
 8007a12:	3360      	adds	r3, #96	@ 0x60
 8007a14:	461a      	mov	r2, r3
 8007a16:	68bb      	ldr	r3, [r7, #8]
 8007a18:	009b      	lsls	r3, r3, #2
 8007a1a:	4413      	add	r3, r2
 8007a1c:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8007a1e:	697b      	ldr	r3, [r7, #20]
 8007a20:	681b      	ldr	r3, [r3, #0]
 8007a22:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	431a      	orrs	r2, r3
 8007a2a:	697b      	ldr	r3, [r7, #20]
 8007a2c:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8007a2e:	bf00      	nop
 8007a30:	371c      	adds	r7, #28
 8007a32:	46bd      	mov	sp, r7
 8007a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a38:	4770      	bx	lr

08007a3a <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8007a3a:	b480      	push	{r7}
 8007a3c:	b083      	sub	sp, #12
 8007a3e:	af00      	add	r7, sp, #0
 8007a40:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	68db      	ldr	r3, [r3, #12]
 8007a46:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8007a4a:	2b00      	cmp	r3, #0
 8007a4c:	d101      	bne.n	8007a52 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8007a4e:	2301      	movs	r3, #1
 8007a50:	e000      	b.n	8007a54 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8007a52:	2300      	movs	r3, #0
}
 8007a54:	4618      	mov	r0, r3
 8007a56:	370c      	adds	r7, #12
 8007a58:	46bd      	mov	sp, r7
 8007a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a5e:	4770      	bx	lr

08007a60 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8007a60:	b480      	push	{r7}
 8007a62:	b087      	sub	sp, #28
 8007a64:	af00      	add	r7, sp, #0
 8007a66:	60f8      	str	r0, [r7, #12]
 8007a68:	60b9      	str	r1, [r7, #8]
 8007a6a:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8007a6c:	68fb      	ldr	r3, [r7, #12]
 8007a6e:	3330      	adds	r3, #48	@ 0x30
 8007a70:	461a      	mov	r2, r3
 8007a72:	68bb      	ldr	r3, [r7, #8]
 8007a74:	0a1b      	lsrs	r3, r3, #8
 8007a76:	009b      	lsls	r3, r3, #2
 8007a78:	f003 030c 	and.w	r3, r3, #12
 8007a7c:	4413      	add	r3, r2
 8007a7e:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8007a80:	697b      	ldr	r3, [r7, #20]
 8007a82:	681a      	ldr	r2, [r3, #0]
 8007a84:	68bb      	ldr	r3, [r7, #8]
 8007a86:	f003 031f 	and.w	r3, r3, #31
 8007a8a:	211f      	movs	r1, #31
 8007a8c:	fa01 f303 	lsl.w	r3, r1, r3
 8007a90:	43db      	mvns	r3, r3
 8007a92:	401a      	ands	r2, r3
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	0e9b      	lsrs	r3, r3, #26
 8007a98:	f003 011f 	and.w	r1, r3, #31
 8007a9c:	68bb      	ldr	r3, [r7, #8]
 8007a9e:	f003 031f 	and.w	r3, r3, #31
 8007aa2:	fa01 f303 	lsl.w	r3, r1, r3
 8007aa6:	431a      	orrs	r2, r3
 8007aa8:	697b      	ldr	r3, [r7, #20]
 8007aaa:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8007aac:	bf00      	nop
 8007aae:	371c      	adds	r7, #28
 8007ab0:	46bd      	mov	sp, r7
 8007ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ab6:	4770      	bx	lr

08007ab8 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8007ab8:	b480      	push	{r7}
 8007aba:	b087      	sub	sp, #28
 8007abc:	af00      	add	r7, sp, #0
 8007abe:	60f8      	str	r0, [r7, #12]
 8007ac0:	60b9      	str	r1, [r7, #8]
 8007ac2:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8007ac4:	68fb      	ldr	r3, [r7, #12]
 8007ac6:	3314      	adds	r3, #20
 8007ac8:	461a      	mov	r2, r3
 8007aca:	68bb      	ldr	r3, [r7, #8]
 8007acc:	0e5b      	lsrs	r3, r3, #25
 8007ace:	009b      	lsls	r3, r3, #2
 8007ad0:	f003 0304 	and.w	r3, r3, #4
 8007ad4:	4413      	add	r3, r2
 8007ad6:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8007ad8:	697b      	ldr	r3, [r7, #20]
 8007ada:	681a      	ldr	r2, [r3, #0]
 8007adc:	68bb      	ldr	r3, [r7, #8]
 8007ade:	0d1b      	lsrs	r3, r3, #20
 8007ae0:	f003 031f 	and.w	r3, r3, #31
 8007ae4:	2107      	movs	r1, #7
 8007ae6:	fa01 f303 	lsl.w	r3, r1, r3
 8007aea:	43db      	mvns	r3, r3
 8007aec:	401a      	ands	r2, r3
 8007aee:	68bb      	ldr	r3, [r7, #8]
 8007af0:	0d1b      	lsrs	r3, r3, #20
 8007af2:	f003 031f 	and.w	r3, r3, #31
 8007af6:	6879      	ldr	r1, [r7, #4]
 8007af8:	fa01 f303 	lsl.w	r3, r1, r3
 8007afc:	431a      	orrs	r2, r3
 8007afe:	697b      	ldr	r3, [r7, #20]
 8007b00:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8007b02:	bf00      	nop
 8007b04:	371c      	adds	r7, #28
 8007b06:	46bd      	mov	sp, r7
 8007b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b0c:	4770      	bx	lr
	...

08007b10 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8007b10:	b480      	push	{r7}
 8007b12:	b085      	sub	sp, #20
 8007b14:	af00      	add	r7, sp, #0
 8007b16:	60f8      	str	r0, [r7, #12]
 8007b18:	60b9      	str	r1, [r7, #8]
 8007b1a:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8007b1c:	68fb      	ldr	r3, [r7, #12]
 8007b1e:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 8007b22:	68bb      	ldr	r3, [r7, #8]
 8007b24:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007b28:	43db      	mvns	r3, r3
 8007b2a:	401a      	ands	r2, r3
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	f003 0318 	and.w	r3, r3, #24
 8007b32:	4908      	ldr	r1, [pc, #32]	@ (8007b54 <LL_ADC_SetChannelSingleDiff+0x44>)
 8007b34:	40d9      	lsrs	r1, r3
 8007b36:	68bb      	ldr	r3, [r7, #8]
 8007b38:	400b      	ands	r3, r1
 8007b3a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007b3e:	431a      	orrs	r2, r3
 8007b40:	68fb      	ldr	r3, [r7, #12]
 8007b42:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8007b46:	bf00      	nop
 8007b48:	3714      	adds	r7, #20
 8007b4a:	46bd      	mov	sp, r7
 8007b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b50:	4770      	bx	lr
 8007b52:	bf00      	nop
 8007b54:	0007ffff 	.word	0x0007ffff

08007b58 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8007b58:	b480      	push	{r7}
 8007b5a:	b083      	sub	sp, #12
 8007b5c:	af00      	add	r7, sp, #0
 8007b5e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	689b      	ldr	r3, [r3, #8]
 8007b64:	f003 031f 	and.w	r3, r3, #31
}
 8007b68:	4618      	mov	r0, r3
 8007b6a:	370c      	adds	r7, #12
 8007b6c:	46bd      	mov	sp, r7
 8007b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b72:	4770      	bx	lr

08007b74 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8007b74:	b480      	push	{r7}
 8007b76:	b083      	sub	sp, #12
 8007b78:	af00      	add	r7, sp, #0
 8007b7a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8007b7c:	687b      	ldr	r3, [r7, #4]
 8007b7e:	689b      	ldr	r3, [r3, #8]
 8007b80:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 8007b84:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8007b88:	687a      	ldr	r2, [r7, #4]
 8007b8a:	6093      	str	r3, [r2, #8]
}
 8007b8c:	bf00      	nop
 8007b8e:	370c      	adds	r7, #12
 8007b90:	46bd      	mov	sp, r7
 8007b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b96:	4770      	bx	lr

08007b98 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8007b98:	b480      	push	{r7}
 8007b9a:	b083      	sub	sp, #12
 8007b9c:	af00      	add	r7, sp, #0
 8007b9e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	689b      	ldr	r3, [r3, #8]
 8007ba4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8007ba8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007bac:	d101      	bne.n	8007bb2 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8007bae:	2301      	movs	r3, #1
 8007bb0:	e000      	b.n	8007bb4 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8007bb2:	2300      	movs	r3, #0
}
 8007bb4:	4618      	mov	r0, r3
 8007bb6:	370c      	adds	r7, #12
 8007bb8:	46bd      	mov	sp, r7
 8007bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bbe:	4770      	bx	lr

08007bc0 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8007bc0:	b480      	push	{r7}
 8007bc2:	b083      	sub	sp, #12
 8007bc4:	af00      	add	r7, sp, #0
 8007bc6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	689b      	ldr	r3, [r3, #8]
 8007bcc:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 8007bd0:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8007bd4:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8007bd8:	687b      	ldr	r3, [r7, #4]
 8007bda:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8007bdc:	bf00      	nop
 8007bde:	370c      	adds	r7, #12
 8007be0:	46bd      	mov	sp, r7
 8007be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007be6:	4770      	bx	lr

08007be8 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8007be8:	b480      	push	{r7}
 8007bea:	b083      	sub	sp, #12
 8007bec:	af00      	add	r7, sp, #0
 8007bee:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	689b      	ldr	r3, [r3, #8]
 8007bf4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007bf8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007bfc:	d101      	bne.n	8007c02 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8007bfe:	2301      	movs	r3, #1
 8007c00:	e000      	b.n	8007c04 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8007c02:	2300      	movs	r3, #0
}
 8007c04:	4618      	mov	r0, r3
 8007c06:	370c      	adds	r7, #12
 8007c08:	46bd      	mov	sp, r7
 8007c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c0e:	4770      	bx	lr

08007c10 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8007c10:	b480      	push	{r7}
 8007c12:	b083      	sub	sp, #12
 8007c14:	af00      	add	r7, sp, #0
 8007c16:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	689b      	ldr	r3, [r3, #8]
 8007c1c:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8007c20:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8007c24:	f043 0201 	orr.w	r2, r3, #1
 8007c28:	687b      	ldr	r3, [r7, #4]
 8007c2a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8007c2c:	bf00      	nop
 8007c2e:	370c      	adds	r7, #12
 8007c30:	46bd      	mov	sp, r7
 8007c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c36:	4770      	bx	lr

08007c38 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8007c38:	b480      	push	{r7}
 8007c3a:	b083      	sub	sp, #12
 8007c3c:	af00      	add	r7, sp, #0
 8007c3e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8007c40:	687b      	ldr	r3, [r7, #4]
 8007c42:	689b      	ldr	r3, [r3, #8]
 8007c44:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8007c48:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8007c4c:	f043 0202 	orr.w	r2, r3, #2
 8007c50:	687b      	ldr	r3, [r7, #4]
 8007c52:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8007c54:	bf00      	nop
 8007c56:	370c      	adds	r7, #12
 8007c58:	46bd      	mov	sp, r7
 8007c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c5e:	4770      	bx	lr

08007c60 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8007c60:	b480      	push	{r7}
 8007c62:	b083      	sub	sp, #12
 8007c64:	af00      	add	r7, sp, #0
 8007c66:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	689b      	ldr	r3, [r3, #8]
 8007c6c:	f003 0301 	and.w	r3, r3, #1
 8007c70:	2b01      	cmp	r3, #1
 8007c72:	d101      	bne.n	8007c78 <LL_ADC_IsEnabled+0x18>
 8007c74:	2301      	movs	r3, #1
 8007c76:	e000      	b.n	8007c7a <LL_ADC_IsEnabled+0x1a>
 8007c78:	2300      	movs	r3, #0
}
 8007c7a:	4618      	mov	r0, r3
 8007c7c:	370c      	adds	r7, #12
 8007c7e:	46bd      	mov	sp, r7
 8007c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c84:	4770      	bx	lr

08007c86 <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(const ADC_TypeDef *ADCx)
{
 8007c86:	b480      	push	{r7}
 8007c88:	b083      	sub	sp, #12
 8007c8a:	af00      	add	r7, sp, #0
 8007c8c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8007c8e:	687b      	ldr	r3, [r7, #4]
 8007c90:	689b      	ldr	r3, [r3, #8]
 8007c92:	f003 0302 	and.w	r3, r3, #2
 8007c96:	2b02      	cmp	r3, #2
 8007c98:	d101      	bne.n	8007c9e <LL_ADC_IsDisableOngoing+0x18>
 8007c9a:	2301      	movs	r3, #1
 8007c9c:	e000      	b.n	8007ca0 <LL_ADC_IsDisableOngoing+0x1a>
 8007c9e:	2300      	movs	r3, #0
}
 8007ca0:	4618      	mov	r0, r3
 8007ca2:	370c      	adds	r7, #12
 8007ca4:	46bd      	mov	sp, r7
 8007ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007caa:	4770      	bx	lr

08007cac <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8007cac:	b480      	push	{r7}
 8007cae:	b083      	sub	sp, #12
 8007cb0:	af00      	add	r7, sp, #0
 8007cb2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8007cb4:	687b      	ldr	r3, [r7, #4]
 8007cb6:	689b      	ldr	r3, [r3, #8]
 8007cb8:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8007cbc:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8007cc0:	f043 0204 	orr.w	r2, r3, #4
 8007cc4:	687b      	ldr	r3, [r7, #4]
 8007cc6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8007cc8:	bf00      	nop
 8007cca:	370c      	adds	r7, #12
 8007ccc:	46bd      	mov	sp, r7
 8007cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cd2:	4770      	bx	lr

08007cd4 <LL_ADC_REG_StopConversion>:
  * @rmtoll CR       ADSTP          LL_ADC_REG_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StopConversion(ADC_TypeDef *ADCx)
{
 8007cd4:	b480      	push	{r7}
 8007cd6:	b083      	sub	sp, #12
 8007cd8:	af00      	add	r7, sp, #0
 8007cda:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8007cdc:	687b      	ldr	r3, [r7, #4]
 8007cde:	689b      	ldr	r3, [r3, #8]
 8007ce0:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8007ce4:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8007ce8:	f043 0210 	orr.w	r2, r3, #16
 8007cec:	687b      	ldr	r3, [r7, #4]
 8007cee:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTP);
}
 8007cf0:	bf00      	nop
 8007cf2:	370c      	adds	r7, #12
 8007cf4:	46bd      	mov	sp, r7
 8007cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cfa:	4770      	bx	lr

08007cfc <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8007cfc:	b480      	push	{r7}
 8007cfe:	b083      	sub	sp, #12
 8007d00:	af00      	add	r7, sp, #0
 8007d02:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8007d04:	687b      	ldr	r3, [r7, #4]
 8007d06:	689b      	ldr	r3, [r3, #8]
 8007d08:	f003 0304 	and.w	r3, r3, #4
 8007d0c:	2b04      	cmp	r3, #4
 8007d0e:	d101      	bne.n	8007d14 <LL_ADC_REG_IsConversionOngoing+0x18>
 8007d10:	2301      	movs	r3, #1
 8007d12:	e000      	b.n	8007d16 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8007d14:	2300      	movs	r3, #0
}
 8007d16:	4618      	mov	r0, r3
 8007d18:	370c      	adds	r7, #12
 8007d1a:	46bd      	mov	sp, r7
 8007d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d20:	4770      	bx	lr

08007d22 <LL_ADC_INJ_StopConversion>:
  * @rmtoll CR       JADSTP         LL_ADC_INJ_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_INJ_StopConversion(ADC_TypeDef *ADCx)
{
 8007d22:	b480      	push	{r7}
 8007d24:	b083      	sub	sp, #12
 8007d26:	af00      	add	r7, sp, #0
 8007d28:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8007d2a:	687b      	ldr	r3, [r7, #4]
 8007d2c:	689b      	ldr	r3, [r3, #8]
 8007d2e:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8007d32:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8007d36:	f043 0220 	orr.w	r2, r3, #32
 8007d3a:	687b      	ldr	r3, [r7, #4]
 8007d3c:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_JADSTP);
}
 8007d3e:	bf00      	nop
 8007d40:	370c      	adds	r7, #12
 8007d42:	46bd      	mov	sp, r7
 8007d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d48:	4770      	bx	lr

08007d4a <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8007d4a:	b480      	push	{r7}
 8007d4c:	b083      	sub	sp, #12
 8007d4e:	af00      	add	r7, sp, #0
 8007d50:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8007d52:	687b      	ldr	r3, [r7, #4]
 8007d54:	689b      	ldr	r3, [r3, #8]
 8007d56:	f003 0308 	and.w	r3, r3, #8
 8007d5a:	2b08      	cmp	r3, #8
 8007d5c:	d101      	bne.n	8007d62 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8007d5e:	2301      	movs	r3, #1
 8007d60:	e000      	b.n	8007d64 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8007d62:	2300      	movs	r3, #0
}
 8007d64:	4618      	mov	r0, r3
 8007d66:	370c      	adds	r7, #12
 8007d68:	46bd      	mov	sp, r7
 8007d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d6e:	4770      	bx	lr

08007d70 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8007d70:	b590      	push	{r4, r7, lr}
 8007d72:	b089      	sub	sp, #36	@ 0x24
 8007d74:	af00      	add	r7, sp, #0
 8007d76:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8007d78:	2300      	movs	r3, #0
 8007d7a:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8007d7c:	2300      	movs	r3, #0
 8007d7e:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8007d80:	687b      	ldr	r3, [r7, #4]
 8007d82:	2b00      	cmp	r3, #0
 8007d84:	d101      	bne.n	8007d8a <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8007d86:	2301      	movs	r3, #1
 8007d88:	e130      	b.n	8007fec <HAL_ADC_Init+0x27c>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8007d8a:	687b      	ldr	r3, [r7, #4]
 8007d8c:	691b      	ldr	r3, [r3, #16]
 8007d8e:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8007d90:	687b      	ldr	r3, [r7, #4]
 8007d92:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007d94:	2b00      	cmp	r3, #0
 8007d96:	d109      	bne.n	8007dac <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8007d98:	6878      	ldr	r0, [r7, #4]
 8007d9a:	f7fc f82b 	bl	8003df4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8007d9e:	687b      	ldr	r3, [r7, #4]
 8007da0:	2200      	movs	r2, #0
 8007da2:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8007da4:	687b      	ldr	r3, [r7, #4]
 8007da6:	2200      	movs	r2, #0
 8007da8:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8007dac:	687b      	ldr	r3, [r7, #4]
 8007dae:	681b      	ldr	r3, [r3, #0]
 8007db0:	4618      	mov	r0, r3
 8007db2:	f7ff fef1 	bl	8007b98 <LL_ADC_IsDeepPowerDownEnabled>
 8007db6:	4603      	mov	r3, r0
 8007db8:	2b00      	cmp	r3, #0
 8007dba:	d004      	beq.n	8007dc6 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8007dbc:	687b      	ldr	r3, [r7, #4]
 8007dbe:	681b      	ldr	r3, [r3, #0]
 8007dc0:	4618      	mov	r0, r3
 8007dc2:	f7ff fed7 	bl	8007b74 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8007dc6:	687b      	ldr	r3, [r7, #4]
 8007dc8:	681b      	ldr	r3, [r3, #0]
 8007dca:	4618      	mov	r0, r3
 8007dcc:	f7ff ff0c 	bl	8007be8 <LL_ADC_IsInternalRegulatorEnabled>
 8007dd0:	4603      	mov	r3, r0
 8007dd2:	2b00      	cmp	r3, #0
 8007dd4:	d115      	bne.n	8007e02 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8007dd6:	687b      	ldr	r3, [r7, #4]
 8007dd8:	681b      	ldr	r3, [r3, #0]
 8007dda:	4618      	mov	r0, r3
 8007ddc:	f7ff fef0 	bl	8007bc0 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8007de0:	4b84      	ldr	r3, [pc, #528]	@ (8007ff4 <HAL_ADC_Init+0x284>)
 8007de2:	681b      	ldr	r3, [r3, #0]
 8007de4:	099b      	lsrs	r3, r3, #6
 8007de6:	4a84      	ldr	r2, [pc, #528]	@ (8007ff8 <HAL_ADC_Init+0x288>)
 8007de8:	fba2 2303 	umull	r2, r3, r2, r3
 8007dec:	099b      	lsrs	r3, r3, #6
 8007dee:	3301      	adds	r3, #1
 8007df0:	005b      	lsls	r3, r3, #1
 8007df2:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8007df4:	e002      	b.n	8007dfc <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8007df6:	68fb      	ldr	r3, [r7, #12]
 8007df8:	3b01      	subs	r3, #1
 8007dfa:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8007dfc:	68fb      	ldr	r3, [r7, #12]
 8007dfe:	2b00      	cmp	r3, #0
 8007e00:	d1f9      	bne.n	8007df6 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8007e02:	687b      	ldr	r3, [r7, #4]
 8007e04:	681b      	ldr	r3, [r3, #0]
 8007e06:	4618      	mov	r0, r3
 8007e08:	f7ff feee 	bl	8007be8 <LL_ADC_IsInternalRegulatorEnabled>
 8007e0c:	4603      	mov	r3, r0
 8007e0e:	2b00      	cmp	r3, #0
 8007e10:	d10d      	bne.n	8007e2e <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8007e12:	687b      	ldr	r3, [r7, #4]
 8007e14:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007e16:	f043 0210 	orr.w	r2, r3, #16
 8007e1a:	687b      	ldr	r3, [r7, #4]
 8007e1c:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8007e1e:	687b      	ldr	r3, [r7, #4]
 8007e20:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007e22:	f043 0201 	orr.w	r2, r3, #1
 8007e26:	687b      	ldr	r3, [r7, #4]
 8007e28:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 8007e2a:	2301      	movs	r3, #1
 8007e2c:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8007e2e:	687b      	ldr	r3, [r7, #4]
 8007e30:	681b      	ldr	r3, [r3, #0]
 8007e32:	4618      	mov	r0, r3
 8007e34:	f7ff ff62 	bl	8007cfc <LL_ADC_REG_IsConversionOngoing>
 8007e38:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8007e3a:	687b      	ldr	r3, [r7, #4]
 8007e3c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007e3e:	f003 0310 	and.w	r3, r3, #16
 8007e42:	2b00      	cmp	r3, #0
 8007e44:	f040 80c9 	bne.w	8007fda <HAL_ADC_Init+0x26a>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 8007e48:	697b      	ldr	r3, [r7, #20]
 8007e4a:	2b00      	cmp	r3, #0
 8007e4c:	f040 80c5 	bne.w	8007fda <HAL_ADC_Init+0x26a>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8007e50:	687b      	ldr	r3, [r7, #4]
 8007e52:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007e54:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8007e58:	f043 0202 	orr.w	r2, r3, #2
 8007e5c:	687b      	ldr	r3, [r7, #4]
 8007e5e:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8007e60:	687b      	ldr	r3, [r7, #4]
 8007e62:	681b      	ldr	r3, [r3, #0]
 8007e64:	4618      	mov	r0, r3
 8007e66:	f7ff fefb 	bl	8007c60 <LL_ADC_IsEnabled>
 8007e6a:	4603      	mov	r3, r0
 8007e6c:	2b00      	cmp	r3, #0
 8007e6e:	d115      	bne.n	8007e9c <HAL_ADC_Init+0x12c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8007e70:	4862      	ldr	r0, [pc, #392]	@ (8007ffc <HAL_ADC_Init+0x28c>)
 8007e72:	f7ff fef5 	bl	8007c60 <LL_ADC_IsEnabled>
 8007e76:	4604      	mov	r4, r0
 8007e78:	4861      	ldr	r0, [pc, #388]	@ (8008000 <HAL_ADC_Init+0x290>)
 8007e7a:	f7ff fef1 	bl	8007c60 <LL_ADC_IsEnabled>
 8007e7e:	4603      	mov	r3, r0
 8007e80:	431c      	orrs	r4, r3
 8007e82:	4860      	ldr	r0, [pc, #384]	@ (8008004 <HAL_ADC_Init+0x294>)
 8007e84:	f7ff feec 	bl	8007c60 <LL_ADC_IsEnabled>
 8007e88:	4603      	mov	r3, r0
 8007e8a:	4323      	orrs	r3, r4
 8007e8c:	2b00      	cmp	r3, #0
 8007e8e:	d105      	bne.n	8007e9c <HAL_ADC_Init+0x12c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8007e90:	687b      	ldr	r3, [r7, #4]
 8007e92:	685b      	ldr	r3, [r3, #4]
 8007e94:	4619      	mov	r1, r3
 8007e96:	485c      	ldr	r0, [pc, #368]	@ (8008008 <HAL_ADC_Init+0x298>)
 8007e98:	f7ff fd46 	bl	8007928 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8007e9c:	687b      	ldr	r3, [r7, #4]
 8007e9e:	7e5b      	ldrb	r3, [r3, #25]
 8007ea0:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 8007ea2:	687b      	ldr	r3, [r7, #4]
 8007ea4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8007ea6:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8007eac:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 8007eae:	687b      	ldr	r3, [r7, #4]
 8007eb0:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 8007eb2:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8007eb4:	687b      	ldr	r3, [r7, #4]
 8007eb6:	f893 3020 	ldrb.w	r3, [r3, #32]
 8007eba:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8007ebc:	4313      	orrs	r3, r2
 8007ebe:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8007ec0:	687b      	ldr	r3, [r7, #4]
 8007ec2:	f893 3020 	ldrb.w	r3, [r3, #32]
 8007ec6:	2b01      	cmp	r3, #1
 8007ec8:	d106      	bne.n	8007ed8 <HAL_ADC_Init+0x168>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8007eca:	687b      	ldr	r3, [r7, #4]
 8007ecc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007ece:	3b01      	subs	r3, #1
 8007ed0:	045b      	lsls	r3, r3, #17
 8007ed2:	69ba      	ldr	r2, [r7, #24]
 8007ed4:	4313      	orrs	r3, r2
 8007ed6:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8007ed8:	687b      	ldr	r3, [r7, #4]
 8007eda:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007edc:	2b00      	cmp	r3, #0
 8007ede:	d009      	beq.n	8007ef4 <HAL_ADC_Init+0x184>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8007ee0:	687b      	ldr	r3, [r7, #4]
 8007ee2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007ee4:	f403 7270 	and.w	r2, r3, #960	@ 0x3c0
                   | hadc->Init.ExternalTrigConvEdge
 8007ee8:	687b      	ldr	r3, [r7, #4]
 8007eea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007eec:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8007eee:	69ba      	ldr	r2, [r7, #24]
 8007ef0:	4313      	orrs	r3, r2
 8007ef2:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8007ef4:	687b      	ldr	r3, [r7, #4]
 8007ef6:	681b      	ldr	r3, [r3, #0]
 8007ef8:	68da      	ldr	r2, [r3, #12]
 8007efa:	4b44      	ldr	r3, [pc, #272]	@ (800800c <HAL_ADC_Init+0x29c>)
 8007efc:	4013      	ands	r3, r2
 8007efe:	687a      	ldr	r2, [r7, #4]
 8007f00:	6812      	ldr	r2, [r2, #0]
 8007f02:	69b9      	ldr	r1, [r7, #24]
 8007f04:	430b      	orrs	r3, r1
 8007f06:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8007f08:	687b      	ldr	r3, [r7, #4]
 8007f0a:	681b      	ldr	r3, [r3, #0]
 8007f0c:	4618      	mov	r0, r3
 8007f0e:	f7ff ff1c 	bl	8007d4a <LL_ADC_INJ_IsConversionOngoing>
 8007f12:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8007f14:	697b      	ldr	r3, [r7, #20]
 8007f16:	2b00      	cmp	r3, #0
 8007f18:	d13d      	bne.n	8007f96 <HAL_ADC_Init+0x226>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8007f1a:	693b      	ldr	r3, [r7, #16]
 8007f1c:	2b00      	cmp	r3, #0
 8007f1e:	d13a      	bne.n	8007f96 <HAL_ADC_Init+0x226>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8007f20:	687b      	ldr	r3, [r7, #4]
 8007f22:	7e1b      	ldrb	r3, [r3, #24]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8007f24:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8007f26:	687b      	ldr	r3, [r7, #4]
 8007f28:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8007f2c:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8007f2e:	4313      	orrs	r3, r2
 8007f30:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8007f32:	687b      	ldr	r3, [r7, #4]
 8007f34:	681b      	ldr	r3, [r3, #0]
 8007f36:	68db      	ldr	r3, [r3, #12]
 8007f38:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8007f3c:	f023 0302 	bic.w	r3, r3, #2
 8007f40:	687a      	ldr	r2, [r7, #4]
 8007f42:	6812      	ldr	r2, [r2, #0]
 8007f44:	69b9      	ldr	r1, [r7, #24]
 8007f46:	430b      	orrs	r3, r1
 8007f48:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8007f4a:	687b      	ldr	r3, [r7, #4]
 8007f4c:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8007f50:	2b01      	cmp	r3, #1
 8007f52:	d118      	bne.n	8007f86 <HAL_ADC_Init+0x216>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8007f54:	687b      	ldr	r3, [r7, #4]
 8007f56:	681b      	ldr	r3, [r3, #0]
 8007f58:	691b      	ldr	r3, [r3, #16]
 8007f5a:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8007f5e:	f023 0304 	bic.w	r3, r3, #4
 8007f62:	687a      	ldr	r2, [r7, #4]
 8007f64:	6bd1      	ldr	r1, [r2, #60]	@ 0x3c
 8007f66:	687a      	ldr	r2, [r7, #4]
 8007f68:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8007f6a:	4311      	orrs	r1, r2
 8007f6c:	687a      	ldr	r2, [r7, #4]
 8007f6e:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8007f70:	4311      	orrs	r1, r2
 8007f72:	687a      	ldr	r2, [r7, #4]
 8007f74:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8007f76:	430a      	orrs	r2, r1
 8007f78:	431a      	orrs	r2, r3
 8007f7a:	687b      	ldr	r3, [r7, #4]
 8007f7c:	681b      	ldr	r3, [r3, #0]
 8007f7e:	f042 0201 	orr.w	r2, r2, #1
 8007f82:	611a      	str	r2, [r3, #16]
 8007f84:	e007      	b.n	8007f96 <HAL_ADC_Init+0x226>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8007f86:	687b      	ldr	r3, [r7, #4]
 8007f88:	681b      	ldr	r3, [r3, #0]
 8007f8a:	691a      	ldr	r2, [r3, #16]
 8007f8c:	687b      	ldr	r3, [r7, #4]
 8007f8e:	681b      	ldr	r3, [r3, #0]
 8007f90:	f022 0201 	bic.w	r2, r2, #1
 8007f94:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8007f96:	687b      	ldr	r3, [r7, #4]
 8007f98:	691b      	ldr	r3, [r3, #16]
 8007f9a:	2b01      	cmp	r3, #1
 8007f9c:	d10c      	bne.n	8007fb8 <HAL_ADC_Init+0x248>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8007f9e:	687b      	ldr	r3, [r7, #4]
 8007fa0:	681b      	ldr	r3, [r3, #0]
 8007fa2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007fa4:	f023 010f 	bic.w	r1, r3, #15
 8007fa8:	687b      	ldr	r3, [r7, #4]
 8007faa:	69db      	ldr	r3, [r3, #28]
 8007fac:	1e5a      	subs	r2, r3, #1
 8007fae:	687b      	ldr	r3, [r7, #4]
 8007fb0:	681b      	ldr	r3, [r3, #0]
 8007fb2:	430a      	orrs	r2, r1
 8007fb4:	631a      	str	r2, [r3, #48]	@ 0x30
 8007fb6:	e007      	b.n	8007fc8 <HAL_ADC_Init+0x258>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8007fb8:	687b      	ldr	r3, [r7, #4]
 8007fba:	681b      	ldr	r3, [r3, #0]
 8007fbc:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007fbe:	687b      	ldr	r3, [r7, #4]
 8007fc0:	681b      	ldr	r3, [r3, #0]
 8007fc2:	f022 020f 	bic.w	r2, r2, #15
 8007fc6:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8007fc8:	687b      	ldr	r3, [r7, #4]
 8007fca:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007fcc:	f023 0303 	bic.w	r3, r3, #3
 8007fd0:	f043 0201 	orr.w	r2, r3, #1
 8007fd4:	687b      	ldr	r3, [r7, #4]
 8007fd6:	655a      	str	r2, [r3, #84]	@ 0x54
 8007fd8:	e007      	b.n	8007fea <HAL_ADC_Init+0x27a>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8007fda:	687b      	ldr	r3, [r7, #4]
 8007fdc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007fde:	f043 0210 	orr.w	r2, r3, #16
 8007fe2:	687b      	ldr	r3, [r7, #4]
 8007fe4:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 8007fe6:	2301      	movs	r3, #1
 8007fe8:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8007fea:	7ffb      	ldrb	r3, [r7, #31]
}
 8007fec:	4618      	mov	r0, r3
 8007fee:	3724      	adds	r7, #36	@ 0x24
 8007ff0:	46bd      	mov	sp, r7
 8007ff2:	bd90      	pop	{r4, r7, pc}
 8007ff4:	20000000 	.word	0x20000000
 8007ff8:	053e2d63 	.word	0x053e2d63
 8007ffc:	50040000 	.word	0x50040000
 8008000:	50040100 	.word	0x50040100
 8008004:	50040200 	.word	0x50040200
 8008008:	50040300 	.word	0x50040300
 800800c:	fff0c007 	.word	0xfff0c007

08008010 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8008010:	b580      	push	{r7, lr}
 8008012:	b086      	sub	sp, #24
 8008014:	af00      	add	r7, sp, #0
 8008016:	60f8      	str	r0, [r7, #12]
 8008018:	60b9      	str	r1, [r7, #8]
 800801a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800801c:	4853      	ldr	r0, [pc, #332]	@ (800816c <HAL_ADC_Start_DMA+0x15c>)
 800801e:	f7ff fd9b 	bl	8007b58 <LL_ADC_GetMultimode>
 8008022:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8008024:	68fb      	ldr	r3, [r7, #12]
 8008026:	681b      	ldr	r3, [r3, #0]
 8008028:	4618      	mov	r0, r3
 800802a:	f7ff fe67 	bl	8007cfc <LL_ADC_REG_IsConversionOngoing>
 800802e:	4603      	mov	r3, r0
 8008030:	2b00      	cmp	r3, #0
 8008032:	f040 8093 	bne.w	800815c <HAL_ADC_Start_DMA+0x14c>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8008036:	68fb      	ldr	r3, [r7, #12]
 8008038:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800803c:	2b01      	cmp	r3, #1
 800803e:	d101      	bne.n	8008044 <HAL_ADC_Start_DMA+0x34>
 8008040:	2302      	movs	r3, #2
 8008042:	e08e      	b.n	8008162 <HAL_ADC_Start_DMA+0x152>
 8008044:	68fb      	ldr	r3, [r7, #12]
 8008046:	2201      	movs	r2, #1
 8008048:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

#if defined(ADC_MULTIMODE_SUPPORT)
    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((ADC_IS_INDEPENDENT(hadc) != RESET)
 800804c:	68fb      	ldr	r3, [r7, #12]
 800804e:	681b      	ldr	r3, [r3, #0]
 8008050:	4a47      	ldr	r2, [pc, #284]	@ (8008170 <HAL_ADC_Start_DMA+0x160>)
 8008052:	4293      	cmp	r3, r2
 8008054:	d008      	beq.n	8008068 <HAL_ADC_Start_DMA+0x58>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8008056:	693b      	ldr	r3, [r7, #16]
 8008058:	2b00      	cmp	r3, #0
 800805a:	d005      	beq.n	8008068 <HAL_ADC_Start_DMA+0x58>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 800805c:	693b      	ldr	r3, [r7, #16]
 800805e:	2b05      	cmp	r3, #5
 8008060:	d002      	beq.n	8008068 <HAL_ADC_Start_DMA+0x58>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8008062:	693b      	ldr	r3, [r7, #16]
 8008064:	2b09      	cmp	r3, #9
 8008066:	d172      	bne.n	800814e <HAL_ADC_Start_DMA+0x13e>
       )
#endif /* ADC_MULTIMODE_SUPPORT */
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8008068:	68f8      	ldr	r0, [r7, #12]
 800806a:	f000 fda7 	bl	8008bbc <ADC_Enable>
 800806e:	4603      	mov	r3, r0
 8008070:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8008072:	7dfb      	ldrb	r3, [r7, #23]
 8008074:	2b00      	cmp	r3, #0
 8008076:	d165      	bne.n	8008144 <HAL_ADC_Start_DMA+0x134>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 8008078:	68fb      	ldr	r3, [r7, #12]
 800807a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800807c:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8008080:	f023 0301 	bic.w	r3, r3, #1
 8008084:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8008088:	68fb      	ldr	r3, [r7, #12]
 800808a:	655a      	str	r2, [r3, #84]	@ 0x54

#if defined(ADC_MULTIMODE_SUPPORT)
        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800808c:	68fb      	ldr	r3, [r7, #12]
 800808e:	681b      	ldr	r3, [r3, #0]
 8008090:	4a38      	ldr	r2, [pc, #224]	@ (8008174 <HAL_ADC_Start_DMA+0x164>)
 8008092:	4293      	cmp	r3, r2
 8008094:	d002      	beq.n	800809c <HAL_ADC_Start_DMA+0x8c>
 8008096:	68fb      	ldr	r3, [r7, #12]
 8008098:	681b      	ldr	r3, [r3, #0]
 800809a:	e000      	b.n	800809e <HAL_ADC_Start_DMA+0x8e>
 800809c:	4b36      	ldr	r3, [pc, #216]	@ (8008178 <HAL_ADC_Start_DMA+0x168>)
 800809e:	68fa      	ldr	r2, [r7, #12]
 80080a0:	6812      	ldr	r2, [r2, #0]
 80080a2:	4293      	cmp	r3, r2
 80080a4:	d002      	beq.n	80080ac <HAL_ADC_Start_DMA+0x9c>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80080a6:	693b      	ldr	r3, [r7, #16]
 80080a8:	2b00      	cmp	r3, #0
 80080aa:	d105      	bne.n	80080b8 <HAL_ADC_Start_DMA+0xa8>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80080ac:	68fb      	ldr	r3, [r7, #12]
 80080ae:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80080b0:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 80080b4:	68fb      	ldr	r3, [r7, #12]
 80080b6:	655a      	str	r2, [r3, #84]	@ 0x54
        }
#endif /* ADC_MULTIMODE_SUPPORT */

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 80080b8:	68fb      	ldr	r3, [r7, #12]
 80080ba:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80080bc:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80080c0:	2b00      	cmp	r3, #0
 80080c2:	d006      	beq.n	80080d2 <HAL_ADC_Start_DMA+0xc2>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80080c4:	68fb      	ldr	r3, [r7, #12]
 80080c6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80080c8:	f023 0206 	bic.w	r2, r3, #6
 80080cc:	68fb      	ldr	r3, [r7, #12]
 80080ce:	659a      	str	r2, [r3, #88]	@ 0x58
 80080d0:	e002      	b.n	80080d8 <HAL_ADC_Start_DMA+0xc8>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 80080d2:	68fb      	ldr	r3, [r7, #12]
 80080d4:	2200      	movs	r2, #0
 80080d6:	659a      	str	r2, [r3, #88]	@ 0x58
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80080d8:	68fb      	ldr	r3, [r7, #12]
 80080da:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80080dc:	4a27      	ldr	r2, [pc, #156]	@ (800817c <HAL_ADC_Start_DMA+0x16c>)
 80080de:	62da      	str	r2, [r3, #44]	@ 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80080e0:	68fb      	ldr	r3, [r7, #12]
 80080e2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80080e4:	4a26      	ldr	r2, [pc, #152]	@ (8008180 <HAL_ADC_Start_DMA+0x170>)
 80080e6:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80080e8:	68fb      	ldr	r3, [r7, #12]
 80080ea:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80080ec:	4a25      	ldr	r2, [pc, #148]	@ (8008184 <HAL_ADC_Start_DMA+0x174>)
 80080ee:	635a      	str	r2, [r3, #52]	@ 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80080f0:	68fb      	ldr	r3, [r7, #12]
 80080f2:	681b      	ldr	r3, [r3, #0]
 80080f4:	221c      	movs	r2, #28
 80080f6:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 80080f8:	68fb      	ldr	r3, [r7, #12]
 80080fa:	2200      	movs	r2, #0
 80080fc:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8008100:	68fb      	ldr	r3, [r7, #12]
 8008102:	681b      	ldr	r3, [r3, #0]
 8008104:	685a      	ldr	r2, [r3, #4]
 8008106:	68fb      	ldr	r3, [r7, #12]
 8008108:	681b      	ldr	r3, [r3, #0]
 800810a:	f042 0210 	orr.w	r2, r2, #16
 800810e:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8008110:	68fb      	ldr	r3, [r7, #12]
 8008112:	681b      	ldr	r3, [r3, #0]
 8008114:	68da      	ldr	r2, [r3, #12]
 8008116:	68fb      	ldr	r3, [r7, #12]
 8008118:	681b      	ldr	r3, [r3, #0]
 800811a:	f042 0201 	orr.w	r2, r2, #1
 800811e:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8008120:	68fb      	ldr	r3, [r7, #12]
 8008122:	6cd8      	ldr	r0, [r3, #76]	@ 0x4c
 8008124:	68fb      	ldr	r3, [r7, #12]
 8008126:	681b      	ldr	r3, [r3, #0]
 8008128:	3340      	adds	r3, #64	@ 0x40
 800812a:	4619      	mov	r1, r3
 800812c:	68ba      	ldr	r2, [r7, #8]
 800812e:	687b      	ldr	r3, [r7, #4]
 8008130:	f001 fa50 	bl	80095d4 <HAL_DMA_Start_IT>
 8008134:	4603      	mov	r3, r0
 8008136:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8008138:	68fb      	ldr	r3, [r7, #12]
 800813a:	681b      	ldr	r3, [r3, #0]
 800813c:	4618      	mov	r0, r3
 800813e:	f7ff fdb5 	bl	8007cac <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 8008142:	e00d      	b.n	8008160 <HAL_ADC_Start_DMA+0x150>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8008144:	68fb      	ldr	r3, [r7, #12]
 8008146:	2200      	movs	r2, #0
 8008148:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
      if (tmp_hal_status == HAL_OK)
 800814c:	e008      	b.n	8008160 <HAL_ADC_Start_DMA+0x150>

    }
#if defined(ADC_MULTIMODE_SUPPORT)
    else
    {
      tmp_hal_status = HAL_ERROR;
 800814e:	2301      	movs	r3, #1
 8008150:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8008152:	68fb      	ldr	r3, [r7, #12]
 8008154:	2200      	movs	r2, #0
 8008156:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
 800815a:	e001      	b.n	8008160 <HAL_ADC_Start_DMA+0x150>
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 800815c:	2302      	movs	r3, #2
 800815e:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8008160:	7dfb      	ldrb	r3, [r7, #23]
}
 8008162:	4618      	mov	r0, r3
 8008164:	3718      	adds	r7, #24
 8008166:	46bd      	mov	sp, r7
 8008168:	bd80      	pop	{r7, pc}
 800816a:	bf00      	nop
 800816c:	50040300 	.word	0x50040300
 8008170:	50040200 	.word	0x50040200
 8008174:	50040100 	.word	0x50040100
 8008178:	50040000 	.word	0x50040000
 800817c:	08008d87 	.word	0x08008d87
 8008180:	08008e5f 	.word	0x08008e5f
 8008184:	08008e7b 	.word	0x08008e7b

08008188 <HAL_ADC_Stop_DMA>:
  *         For multimode, the dedicated HAL_ADCEx_MultiModeStop_DMA() API must be used.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop_DMA(ADC_HandleTypeDef *hadc)
{
 8008188:	b580      	push	{r7, lr}
 800818a:	b084      	sub	sp, #16
 800818c:	af00      	add	r7, sp, #0
 800818e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8008190:	687b      	ldr	r3, [r7, #4]
 8008192:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8008196:	2b01      	cmp	r3, #1
 8008198:	d101      	bne.n	800819e <HAL_ADC_Stop_DMA+0x16>
 800819a:	2302      	movs	r3, #2
 800819c:	e051      	b.n	8008242 <HAL_ADC_Stop_DMA+0xba>
 800819e:	687b      	ldr	r3, [r7, #4]
 80081a0:	2201      	movs	r2, #1
 80081a2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* 1. Stop potential ADC group regular conversion on going */
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 80081a6:	2103      	movs	r1, #3
 80081a8:	6878      	ldr	r0, [r7, #4]
 80081aa:	f000 fc4b 	bl	8008a44 <ADC_ConversionStop>
 80081ae:	4603      	mov	r3, r0
 80081b0:	73fb      	strb	r3, [r7, #15]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 80081b2:	7bfb      	ldrb	r3, [r7, #15]
 80081b4:	2b00      	cmp	r3, #0
 80081b6:	d13f      	bne.n	8008238 <HAL_ADC_Stop_DMA+0xb0>
  {
    /* Disable ADC DMA (ADC DMA configuration of continuous requests is kept) */
    CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 80081b8:	687b      	ldr	r3, [r7, #4]
 80081ba:	681b      	ldr	r3, [r3, #0]
 80081bc:	68da      	ldr	r2, [r3, #12]
 80081be:	687b      	ldr	r3, [r7, #4]
 80081c0:	681b      	ldr	r3, [r3, #0]
 80081c2:	f022 0201 	bic.w	r2, r2, #1
 80081c6:	60da      	str	r2, [r3, #12]

    /* Disable the DMA channel (in case of DMA in circular mode or stop       */
    /* while DMA transfer is on going)                                        */
    if (hadc->DMA_Handle->State == HAL_DMA_STATE_BUSY)
 80081c8:	687b      	ldr	r3, [r7, #4]
 80081ca:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80081cc:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80081d0:	b2db      	uxtb	r3, r3
 80081d2:	2b02      	cmp	r3, #2
 80081d4:	d10f      	bne.n	80081f6 <HAL_ADC_Stop_DMA+0x6e>
    {
      tmp_hal_status = HAL_DMA_Abort(hadc->DMA_Handle);
 80081d6:	687b      	ldr	r3, [r7, #4]
 80081d8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80081da:	4618      	mov	r0, r3
 80081dc:	f001 fa5a 	bl	8009694 <HAL_DMA_Abort>
 80081e0:	4603      	mov	r3, r0
 80081e2:	73fb      	strb	r3, [r7, #15]

      /* Check if DMA channel effectively disabled */
      if (tmp_hal_status != HAL_OK)
 80081e4:	7bfb      	ldrb	r3, [r7, #15]
 80081e6:	2b00      	cmp	r3, #0
 80081e8:	d005      	beq.n	80081f6 <HAL_ADC_Stop_DMA+0x6e>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 80081ea:	687b      	ldr	r3, [r7, #4]
 80081ec:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80081ee:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80081f2:	687b      	ldr	r3, [r7, #4]
 80081f4:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }

    /* Disable ADC overrun interrupt */
    __HAL_ADC_DISABLE_IT(hadc, ADC_IT_OVR);
 80081f6:	687b      	ldr	r3, [r7, #4]
 80081f8:	681b      	ldr	r3, [r3, #0]
 80081fa:	685a      	ldr	r2, [r3, #4]
 80081fc:	687b      	ldr	r3, [r7, #4]
 80081fe:	681b      	ldr	r3, [r3, #0]
 8008200:	f022 0210 	bic.w	r2, r2, #16
 8008204:	605a      	str	r2, [r3, #4]

    /* 2. Disable the ADC peripheral */
    /* Update "tmp_hal_status" only if DMA channel disabling passed,          */
    /* to keep in memory a potential failing status.                          */
    if (tmp_hal_status == HAL_OK)
 8008206:	7bfb      	ldrb	r3, [r7, #15]
 8008208:	2b00      	cmp	r3, #0
 800820a:	d105      	bne.n	8008218 <HAL_ADC_Stop_DMA+0x90>
    {
      tmp_hal_status = ADC_Disable(hadc);
 800820c:	6878      	ldr	r0, [r7, #4]
 800820e:	f000 fd5b 	bl	8008cc8 <ADC_Disable>
 8008212:	4603      	mov	r3, r0
 8008214:	73fb      	strb	r3, [r7, #15]
 8008216:	e002      	b.n	800821e <HAL_ADC_Stop_DMA+0x96>
    }
    else
    {
      (void)ADC_Disable(hadc);
 8008218:	6878      	ldr	r0, [r7, #4]
 800821a:	f000 fd55 	bl	8008cc8 <ADC_Disable>
    }

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 800821e:	7bfb      	ldrb	r3, [r7, #15]
 8008220:	2b00      	cmp	r3, #0
 8008222:	d109      	bne.n	8008238 <HAL_ADC_Stop_DMA+0xb0>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8008224:	687b      	ldr	r3, [r7, #4]
 8008226:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008228:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 800822c:	f023 0301 	bic.w	r3, r3, #1
 8008230:	f043 0201 	orr.w	r2, r3, #1
 8008234:	687b      	ldr	r3, [r7, #4]
 8008236:	655a      	str	r2, [r3, #84]	@ 0x54
    }

  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8008238:	687b      	ldr	r3, [r7, #4]
 800823a:	2200      	movs	r2, #0
 800823c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 8008240:	7bfb      	ldrb	r3, [r7, #15]
}
 8008242:	4618      	mov	r0, r3
 8008244:	3710      	adds	r7, #16
 8008246:	46bd      	mov	sp, r7
 8008248:	bd80      	pop	{r7, pc}

0800824a <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 800824a:	b480      	push	{r7}
 800824c:	b083      	sub	sp, #12
 800824e:	af00      	add	r7, sp, #0
 8008250:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8008252:	bf00      	nop
 8008254:	370c      	adds	r7, #12
 8008256:	46bd      	mov	sp, r7
 8008258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800825c:	4770      	bx	lr
	...

08008260 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8008260:	b580      	push	{r7, lr}
 8008262:	b0b6      	sub	sp, #216	@ 0xd8
 8008264:	af00      	add	r7, sp, #0
 8008266:	6078      	str	r0, [r7, #4]
 8008268:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800826a:	2300      	movs	r3, #0
 800826c:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8008270:	2300      	movs	r3, #0
 8008272:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8008274:	687b      	ldr	r3, [r7, #4]
 8008276:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800827a:	2b01      	cmp	r3, #1
 800827c:	d101      	bne.n	8008282 <HAL_ADC_ConfigChannel+0x22>
 800827e:	2302      	movs	r3, #2
 8008280:	e3c9      	b.n	8008a16 <HAL_ADC_ConfigChannel+0x7b6>
 8008282:	687b      	ldr	r3, [r7, #4]
 8008284:	2201      	movs	r2, #1
 8008286:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800828a:	687b      	ldr	r3, [r7, #4]
 800828c:	681b      	ldr	r3, [r3, #0]
 800828e:	4618      	mov	r0, r3
 8008290:	f7ff fd34 	bl	8007cfc <LL_ADC_REG_IsConversionOngoing>
 8008294:	4603      	mov	r3, r0
 8008296:	2b00      	cmp	r3, #0
 8008298:	f040 83aa 	bne.w	80089f0 <HAL_ADC_ConfigChannel+0x790>
  {
#if !defined (USE_FULL_ASSERT)
    uint32_t config_rank = pConfig->Rank;
 800829c:	683b      	ldr	r3, [r7, #0]
 800829e:	685b      	ldr	r3, [r3, #4]
 80082a0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (pConfig->Rank <= 5U)
 80082a4:	683b      	ldr	r3, [r7, #0]
 80082a6:	685b      	ldr	r3, [r3, #4]
 80082a8:	2b05      	cmp	r3, #5
 80082aa:	d824      	bhi.n	80082f6 <HAL_ADC_ConfigChannel+0x96>
    {
      switch (pConfig->Rank)
 80082ac:	683b      	ldr	r3, [r7, #0]
 80082ae:	685b      	ldr	r3, [r3, #4]
 80082b0:	3b02      	subs	r3, #2
 80082b2:	2b03      	cmp	r3, #3
 80082b4:	d81b      	bhi.n	80082ee <HAL_ADC_ConfigChannel+0x8e>
 80082b6:	a201      	add	r2, pc, #4	@ (adr r2, 80082bc <HAL_ADC_ConfigChannel+0x5c>)
 80082b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80082bc:	080082cd 	.word	0x080082cd
 80082c0:	080082d5 	.word	0x080082d5
 80082c4:	080082dd 	.word	0x080082dd
 80082c8:	080082e5 	.word	0x080082e5
      {
        case 2U:
          config_rank = ADC_REGULAR_RANK_2;
 80082cc:	230c      	movs	r3, #12
 80082ce:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 80082d2:	e010      	b.n	80082f6 <HAL_ADC_ConfigChannel+0x96>
        case 3U:
          config_rank = ADC_REGULAR_RANK_3;
 80082d4:	2312      	movs	r3, #18
 80082d6:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 80082da:	e00c      	b.n	80082f6 <HAL_ADC_ConfigChannel+0x96>
        case 4U:
          config_rank = ADC_REGULAR_RANK_4;
 80082dc:	2318      	movs	r3, #24
 80082de:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 80082e2:	e008      	b.n	80082f6 <HAL_ADC_ConfigChannel+0x96>
        case 5U:
          config_rank = ADC_REGULAR_RANK_5;
 80082e4:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80082e8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 80082ec:	e003      	b.n	80082f6 <HAL_ADC_ConfigChannel+0x96>
        /* case 1U */
        default:
          config_rank = ADC_REGULAR_RANK_1;
 80082ee:	2306      	movs	r3, #6
 80082f0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 80082f4:	bf00      	nop
      }
    }
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, config_rank, pConfig->Channel);
 80082f6:	687b      	ldr	r3, [r7, #4]
 80082f8:	6818      	ldr	r0, [r3, #0]
 80082fa:	683b      	ldr	r3, [r7, #0]
 80082fc:	681b      	ldr	r3, [r3, #0]
 80082fe:	461a      	mov	r2, r3
 8008300:	f8d7 10d0 	ldr.w	r1, [r7, #208]	@ 0xd0
 8008304:	f7ff fbac 	bl	8007a60 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8008308:	687b      	ldr	r3, [r7, #4]
 800830a:	681b      	ldr	r3, [r3, #0]
 800830c:	4618      	mov	r0, r3
 800830e:	f7ff fcf5 	bl	8007cfc <LL_ADC_REG_IsConversionOngoing>
 8008312:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8008316:	687b      	ldr	r3, [r7, #4]
 8008318:	681b      	ldr	r3, [r3, #0]
 800831a:	4618      	mov	r0, r3
 800831c:	f7ff fd15 	bl	8007d4a <LL_ADC_INJ_IsConversionOngoing>
 8008320:	f8c7 00c8 	str.w	r0, [r7, #200]	@ 0xc8
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8008324:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8008328:	2b00      	cmp	r3, #0
 800832a:	f040 81a4 	bne.w	8008676 <HAL_ADC_ConfigChannel+0x416>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800832e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8008332:	2b00      	cmp	r3, #0
 8008334:	f040 819f 	bne.w	8008676 <HAL_ADC_ConfigChannel+0x416>
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8008338:	687b      	ldr	r3, [r7, #4]
 800833a:	6818      	ldr	r0, [r3, #0]
 800833c:	683b      	ldr	r3, [r7, #0]
 800833e:	6819      	ldr	r1, [r3, #0]
 8008340:	683b      	ldr	r3, [r7, #0]
 8008342:	689b      	ldr	r3, [r3, #8]
 8008344:	461a      	mov	r2, r3
 8008346:	f7ff fbb7 	bl	8007ab8 <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 800834a:	683b      	ldr	r3, [r7, #0]
 800834c:	695a      	ldr	r2, [r3, #20]
 800834e:	687b      	ldr	r3, [r7, #4]
 8008350:	681b      	ldr	r3, [r3, #0]
 8008352:	68db      	ldr	r3, [r3, #12]
 8008354:	08db      	lsrs	r3, r3, #3
 8008356:	f003 0303 	and.w	r3, r3, #3
 800835a:	005b      	lsls	r3, r3, #1
 800835c:	fa02 f303 	lsl.w	r3, r2, r3
 8008360:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8008364:	683b      	ldr	r3, [r7, #0]
 8008366:	691b      	ldr	r3, [r3, #16]
 8008368:	2b04      	cmp	r3, #4
 800836a:	d00a      	beq.n	8008382 <HAL_ADC_ConfigChannel+0x122>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 800836c:	687b      	ldr	r3, [r7, #4]
 800836e:	6818      	ldr	r0, [r3, #0]
 8008370:	683b      	ldr	r3, [r7, #0]
 8008372:	6919      	ldr	r1, [r3, #16]
 8008374:	683b      	ldr	r3, [r7, #0]
 8008376:	681a      	ldr	r2, [r3, #0]
 8008378:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800837c:	f7ff fb08 	bl	8007990 <LL_ADC_SetOffset>
 8008380:	e179      	b.n	8008676 <HAL_ADC_ConfigChannel+0x416>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8008382:	687b      	ldr	r3, [r7, #4]
 8008384:	681b      	ldr	r3, [r3, #0]
 8008386:	2100      	movs	r1, #0
 8008388:	4618      	mov	r0, r3
 800838a:	f7ff fb25 	bl	80079d8 <LL_ADC_GetOffsetChannel>
 800838e:	4603      	mov	r3, r0
 8008390:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008394:	2b00      	cmp	r3, #0
 8008396:	d10a      	bne.n	80083ae <HAL_ADC_ConfigChannel+0x14e>
 8008398:	687b      	ldr	r3, [r7, #4]
 800839a:	681b      	ldr	r3, [r3, #0]
 800839c:	2100      	movs	r1, #0
 800839e:	4618      	mov	r0, r3
 80083a0:	f7ff fb1a 	bl	80079d8 <LL_ADC_GetOffsetChannel>
 80083a4:	4603      	mov	r3, r0
 80083a6:	0e9b      	lsrs	r3, r3, #26
 80083a8:	f003 021f 	and.w	r2, r3, #31
 80083ac:	e01e      	b.n	80083ec <HAL_ADC_ConfigChannel+0x18c>
 80083ae:	687b      	ldr	r3, [r7, #4]
 80083b0:	681b      	ldr	r3, [r3, #0]
 80083b2:	2100      	movs	r1, #0
 80083b4:	4618      	mov	r0, r3
 80083b6:	f7ff fb0f 	bl	80079d8 <LL_ADC_GetOffsetChannel>
 80083ba:	4603      	mov	r3, r0
 80083bc:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80083c0:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80083c4:	fa93 f3a3 	rbit	r3, r3
 80083c8:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80083cc:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 80083d0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80083d4:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80083d8:	2b00      	cmp	r3, #0
 80083da:	d101      	bne.n	80083e0 <HAL_ADC_ConfigChannel+0x180>
  {
    return 32U;
 80083dc:	2320      	movs	r3, #32
 80083de:	e004      	b.n	80083ea <HAL_ADC_ConfigChannel+0x18a>
  }
  return __builtin_clz(value);
 80083e0:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80083e4:	fab3 f383 	clz	r3, r3
 80083e8:	b2db      	uxtb	r3, r3
 80083ea:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80083ec:	683b      	ldr	r3, [r7, #0]
 80083ee:	681b      	ldr	r3, [r3, #0]
 80083f0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80083f4:	2b00      	cmp	r3, #0
 80083f6:	d105      	bne.n	8008404 <HAL_ADC_ConfigChannel+0x1a4>
 80083f8:	683b      	ldr	r3, [r7, #0]
 80083fa:	681b      	ldr	r3, [r3, #0]
 80083fc:	0e9b      	lsrs	r3, r3, #26
 80083fe:	f003 031f 	and.w	r3, r3, #31
 8008402:	e018      	b.n	8008436 <HAL_ADC_ConfigChannel+0x1d6>
 8008404:	683b      	ldr	r3, [r7, #0]
 8008406:	681b      	ldr	r3, [r3, #0]
 8008408:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800840c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008410:	fa93 f3a3 	rbit	r3, r3
 8008414:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  return result;
 8008418:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800841c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
  if (value == 0U)
 8008420:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8008424:	2b00      	cmp	r3, #0
 8008426:	d101      	bne.n	800842c <HAL_ADC_ConfigChannel+0x1cc>
    return 32U;
 8008428:	2320      	movs	r3, #32
 800842a:	e004      	b.n	8008436 <HAL_ADC_ConfigChannel+0x1d6>
  return __builtin_clz(value);
 800842c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8008430:	fab3 f383 	clz	r3, r3
 8008434:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8008436:	429a      	cmp	r2, r3
 8008438:	d106      	bne.n	8008448 <HAL_ADC_ConfigChannel+0x1e8>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 800843a:	687b      	ldr	r3, [r7, #4]
 800843c:	681b      	ldr	r3, [r3, #0]
 800843e:	2200      	movs	r2, #0
 8008440:	2100      	movs	r1, #0
 8008442:	4618      	mov	r0, r3
 8008444:	f7ff fade 	bl	8007a04 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8008448:	687b      	ldr	r3, [r7, #4]
 800844a:	681b      	ldr	r3, [r3, #0]
 800844c:	2101      	movs	r1, #1
 800844e:	4618      	mov	r0, r3
 8008450:	f7ff fac2 	bl	80079d8 <LL_ADC_GetOffsetChannel>
 8008454:	4603      	mov	r3, r0
 8008456:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800845a:	2b00      	cmp	r3, #0
 800845c:	d10a      	bne.n	8008474 <HAL_ADC_ConfigChannel+0x214>
 800845e:	687b      	ldr	r3, [r7, #4]
 8008460:	681b      	ldr	r3, [r3, #0]
 8008462:	2101      	movs	r1, #1
 8008464:	4618      	mov	r0, r3
 8008466:	f7ff fab7 	bl	80079d8 <LL_ADC_GetOffsetChannel>
 800846a:	4603      	mov	r3, r0
 800846c:	0e9b      	lsrs	r3, r3, #26
 800846e:	f003 021f 	and.w	r2, r3, #31
 8008472:	e01e      	b.n	80084b2 <HAL_ADC_ConfigChannel+0x252>
 8008474:	687b      	ldr	r3, [r7, #4]
 8008476:	681b      	ldr	r3, [r3, #0]
 8008478:	2101      	movs	r1, #1
 800847a:	4618      	mov	r0, r3
 800847c:	f7ff faac 	bl	80079d8 <LL_ADC_GetOffsetChannel>
 8008480:	4603      	mov	r3, r0
 8008482:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008486:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800848a:	fa93 f3a3 	rbit	r3, r3
 800848e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  return result;
 8008492:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8008496:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  if (value == 0U)
 800849a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800849e:	2b00      	cmp	r3, #0
 80084a0:	d101      	bne.n	80084a6 <HAL_ADC_ConfigChannel+0x246>
    return 32U;
 80084a2:	2320      	movs	r3, #32
 80084a4:	e004      	b.n	80084b0 <HAL_ADC_ConfigChannel+0x250>
  return __builtin_clz(value);
 80084a6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80084aa:	fab3 f383 	clz	r3, r3
 80084ae:	b2db      	uxtb	r3, r3
 80084b0:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80084b2:	683b      	ldr	r3, [r7, #0]
 80084b4:	681b      	ldr	r3, [r3, #0]
 80084b6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80084ba:	2b00      	cmp	r3, #0
 80084bc:	d105      	bne.n	80084ca <HAL_ADC_ConfigChannel+0x26a>
 80084be:	683b      	ldr	r3, [r7, #0]
 80084c0:	681b      	ldr	r3, [r3, #0]
 80084c2:	0e9b      	lsrs	r3, r3, #26
 80084c4:	f003 031f 	and.w	r3, r3, #31
 80084c8:	e018      	b.n	80084fc <HAL_ADC_ConfigChannel+0x29c>
 80084ca:	683b      	ldr	r3, [r7, #0]
 80084cc:	681b      	ldr	r3, [r3, #0]
 80084ce:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80084d2:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80084d6:	fa93 f3a3 	rbit	r3, r3
 80084da:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  return result;
 80084de:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80084e2:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
  if (value == 0U)
 80084e6:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80084ea:	2b00      	cmp	r3, #0
 80084ec:	d101      	bne.n	80084f2 <HAL_ADC_ConfigChannel+0x292>
    return 32U;
 80084ee:	2320      	movs	r3, #32
 80084f0:	e004      	b.n	80084fc <HAL_ADC_ConfigChannel+0x29c>
  return __builtin_clz(value);
 80084f2:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80084f6:	fab3 f383 	clz	r3, r3
 80084fa:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80084fc:	429a      	cmp	r2, r3
 80084fe:	d106      	bne.n	800850e <HAL_ADC_ConfigChannel+0x2ae>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8008500:	687b      	ldr	r3, [r7, #4]
 8008502:	681b      	ldr	r3, [r3, #0]
 8008504:	2200      	movs	r2, #0
 8008506:	2101      	movs	r1, #1
 8008508:	4618      	mov	r0, r3
 800850a:	f7ff fa7b 	bl	8007a04 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 800850e:	687b      	ldr	r3, [r7, #4]
 8008510:	681b      	ldr	r3, [r3, #0]
 8008512:	2102      	movs	r1, #2
 8008514:	4618      	mov	r0, r3
 8008516:	f7ff fa5f 	bl	80079d8 <LL_ADC_GetOffsetChannel>
 800851a:	4603      	mov	r3, r0
 800851c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008520:	2b00      	cmp	r3, #0
 8008522:	d10a      	bne.n	800853a <HAL_ADC_ConfigChannel+0x2da>
 8008524:	687b      	ldr	r3, [r7, #4]
 8008526:	681b      	ldr	r3, [r3, #0]
 8008528:	2102      	movs	r1, #2
 800852a:	4618      	mov	r0, r3
 800852c:	f7ff fa54 	bl	80079d8 <LL_ADC_GetOffsetChannel>
 8008530:	4603      	mov	r3, r0
 8008532:	0e9b      	lsrs	r3, r3, #26
 8008534:	f003 021f 	and.w	r2, r3, #31
 8008538:	e01e      	b.n	8008578 <HAL_ADC_ConfigChannel+0x318>
 800853a:	687b      	ldr	r3, [r7, #4]
 800853c:	681b      	ldr	r3, [r3, #0]
 800853e:	2102      	movs	r1, #2
 8008540:	4618      	mov	r0, r3
 8008542:	f7ff fa49 	bl	80079d8 <LL_ADC_GetOffsetChannel>
 8008546:	4603      	mov	r3, r0
 8008548:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800854c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8008550:	fa93 f3a3 	rbit	r3, r3
 8008554:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  return result;
 8008558:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800855c:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  if (value == 0U)
 8008560:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8008564:	2b00      	cmp	r3, #0
 8008566:	d101      	bne.n	800856c <HAL_ADC_ConfigChannel+0x30c>
    return 32U;
 8008568:	2320      	movs	r3, #32
 800856a:	e004      	b.n	8008576 <HAL_ADC_ConfigChannel+0x316>
  return __builtin_clz(value);
 800856c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8008570:	fab3 f383 	clz	r3, r3
 8008574:	b2db      	uxtb	r3, r3
 8008576:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8008578:	683b      	ldr	r3, [r7, #0]
 800857a:	681b      	ldr	r3, [r3, #0]
 800857c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008580:	2b00      	cmp	r3, #0
 8008582:	d105      	bne.n	8008590 <HAL_ADC_ConfigChannel+0x330>
 8008584:	683b      	ldr	r3, [r7, #0]
 8008586:	681b      	ldr	r3, [r3, #0]
 8008588:	0e9b      	lsrs	r3, r3, #26
 800858a:	f003 031f 	and.w	r3, r3, #31
 800858e:	e014      	b.n	80085ba <HAL_ADC_ConfigChannel+0x35a>
 8008590:	683b      	ldr	r3, [r7, #0]
 8008592:	681b      	ldr	r3, [r3, #0]
 8008594:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008596:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8008598:	fa93 f3a3 	rbit	r3, r3
 800859c:	67bb      	str	r3, [r7, #120]	@ 0x78
  return result;
 800859e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80085a0:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  if (value == 0U)
 80085a4:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80085a8:	2b00      	cmp	r3, #0
 80085aa:	d101      	bne.n	80085b0 <HAL_ADC_ConfigChannel+0x350>
    return 32U;
 80085ac:	2320      	movs	r3, #32
 80085ae:	e004      	b.n	80085ba <HAL_ADC_ConfigChannel+0x35a>
  return __builtin_clz(value);
 80085b0:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80085b4:	fab3 f383 	clz	r3, r3
 80085b8:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80085ba:	429a      	cmp	r2, r3
 80085bc:	d106      	bne.n	80085cc <HAL_ADC_ConfigChannel+0x36c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 80085be:	687b      	ldr	r3, [r7, #4]
 80085c0:	681b      	ldr	r3, [r3, #0]
 80085c2:	2200      	movs	r2, #0
 80085c4:	2102      	movs	r1, #2
 80085c6:	4618      	mov	r0, r3
 80085c8:	f7ff fa1c 	bl	8007a04 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80085cc:	687b      	ldr	r3, [r7, #4]
 80085ce:	681b      	ldr	r3, [r3, #0]
 80085d0:	2103      	movs	r1, #3
 80085d2:	4618      	mov	r0, r3
 80085d4:	f7ff fa00 	bl	80079d8 <LL_ADC_GetOffsetChannel>
 80085d8:	4603      	mov	r3, r0
 80085da:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80085de:	2b00      	cmp	r3, #0
 80085e0:	d10a      	bne.n	80085f8 <HAL_ADC_ConfigChannel+0x398>
 80085e2:	687b      	ldr	r3, [r7, #4]
 80085e4:	681b      	ldr	r3, [r3, #0]
 80085e6:	2103      	movs	r1, #3
 80085e8:	4618      	mov	r0, r3
 80085ea:	f7ff f9f5 	bl	80079d8 <LL_ADC_GetOffsetChannel>
 80085ee:	4603      	mov	r3, r0
 80085f0:	0e9b      	lsrs	r3, r3, #26
 80085f2:	f003 021f 	and.w	r2, r3, #31
 80085f6:	e017      	b.n	8008628 <HAL_ADC_ConfigChannel+0x3c8>
 80085f8:	687b      	ldr	r3, [r7, #4]
 80085fa:	681b      	ldr	r3, [r3, #0]
 80085fc:	2103      	movs	r1, #3
 80085fe:	4618      	mov	r0, r3
 8008600:	f7ff f9ea 	bl	80079d8 <LL_ADC_GetOffsetChannel>
 8008604:	4603      	mov	r3, r0
 8008606:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008608:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800860a:	fa93 f3a3 	rbit	r3, r3
 800860e:	66fb      	str	r3, [r7, #108]	@ 0x6c
  return result;
 8008610:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008612:	677b      	str	r3, [r7, #116]	@ 0x74
  if (value == 0U)
 8008614:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8008616:	2b00      	cmp	r3, #0
 8008618:	d101      	bne.n	800861e <HAL_ADC_ConfigChannel+0x3be>
    return 32U;
 800861a:	2320      	movs	r3, #32
 800861c:	e003      	b.n	8008626 <HAL_ADC_ConfigChannel+0x3c6>
  return __builtin_clz(value);
 800861e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8008620:	fab3 f383 	clz	r3, r3
 8008624:	b2db      	uxtb	r3, r3
 8008626:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8008628:	683b      	ldr	r3, [r7, #0]
 800862a:	681b      	ldr	r3, [r3, #0]
 800862c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008630:	2b00      	cmp	r3, #0
 8008632:	d105      	bne.n	8008640 <HAL_ADC_ConfigChannel+0x3e0>
 8008634:	683b      	ldr	r3, [r7, #0]
 8008636:	681b      	ldr	r3, [r3, #0]
 8008638:	0e9b      	lsrs	r3, r3, #26
 800863a:	f003 031f 	and.w	r3, r3, #31
 800863e:	e011      	b.n	8008664 <HAL_ADC_ConfigChannel+0x404>
 8008640:	683b      	ldr	r3, [r7, #0]
 8008642:	681b      	ldr	r3, [r3, #0]
 8008644:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008646:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8008648:	fa93 f3a3 	rbit	r3, r3
 800864c:	663b      	str	r3, [r7, #96]	@ 0x60
  return result;
 800864e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8008650:	66bb      	str	r3, [r7, #104]	@ 0x68
  if (value == 0U)
 8008652:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8008654:	2b00      	cmp	r3, #0
 8008656:	d101      	bne.n	800865c <HAL_ADC_ConfigChannel+0x3fc>
    return 32U;
 8008658:	2320      	movs	r3, #32
 800865a:	e003      	b.n	8008664 <HAL_ADC_ConfigChannel+0x404>
  return __builtin_clz(value);
 800865c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800865e:	fab3 f383 	clz	r3, r3
 8008662:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8008664:	429a      	cmp	r2, r3
 8008666:	d106      	bne.n	8008676 <HAL_ADC_ConfigChannel+0x416>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8008668:	687b      	ldr	r3, [r7, #4]
 800866a:	681b      	ldr	r3, [r3, #0]
 800866c:	2200      	movs	r2, #0
 800866e:	2103      	movs	r1, #3
 8008670:	4618      	mov	r0, r3
 8008672:	f7ff f9c7 	bl	8007a04 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8008676:	687b      	ldr	r3, [r7, #4]
 8008678:	681b      	ldr	r3, [r3, #0]
 800867a:	4618      	mov	r0, r3
 800867c:	f7ff faf0 	bl	8007c60 <LL_ADC_IsEnabled>
 8008680:	4603      	mov	r3, r0
 8008682:	2b00      	cmp	r3, #0
 8008684:	f040 8140 	bne.w	8008908 <HAL_ADC_ConfigChannel+0x6a8>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8008688:	687b      	ldr	r3, [r7, #4]
 800868a:	6818      	ldr	r0, [r3, #0]
 800868c:	683b      	ldr	r3, [r7, #0]
 800868e:	6819      	ldr	r1, [r3, #0]
 8008690:	683b      	ldr	r3, [r7, #0]
 8008692:	68db      	ldr	r3, [r3, #12]
 8008694:	461a      	mov	r2, r3
 8008696:	f7ff fa3b 	bl	8007b10 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 800869a:	683b      	ldr	r3, [r7, #0]
 800869c:	68db      	ldr	r3, [r3, #12]
 800869e:	4a8f      	ldr	r2, [pc, #572]	@ (80088dc <HAL_ADC_ConfigChannel+0x67c>)
 80086a0:	4293      	cmp	r3, r2
 80086a2:	f040 8131 	bne.w	8008908 <HAL_ADC_ConfigChannel+0x6a8>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80086a6:	687b      	ldr	r3, [r7, #4]
 80086a8:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80086aa:	683b      	ldr	r3, [r7, #0]
 80086ac:	681b      	ldr	r3, [r3, #0]
 80086ae:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80086b2:	2b00      	cmp	r3, #0
 80086b4:	d10b      	bne.n	80086ce <HAL_ADC_ConfigChannel+0x46e>
 80086b6:	683b      	ldr	r3, [r7, #0]
 80086b8:	681b      	ldr	r3, [r3, #0]
 80086ba:	0e9b      	lsrs	r3, r3, #26
 80086bc:	3301      	adds	r3, #1
 80086be:	f003 031f 	and.w	r3, r3, #31
 80086c2:	2b09      	cmp	r3, #9
 80086c4:	bf94      	ite	ls
 80086c6:	2301      	movls	r3, #1
 80086c8:	2300      	movhi	r3, #0
 80086ca:	b2db      	uxtb	r3, r3
 80086cc:	e019      	b.n	8008702 <HAL_ADC_ConfigChannel+0x4a2>
 80086ce:	683b      	ldr	r3, [r7, #0]
 80086d0:	681b      	ldr	r3, [r3, #0]
 80086d2:	65bb      	str	r3, [r7, #88]	@ 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80086d4:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80086d6:	fa93 f3a3 	rbit	r3, r3
 80086da:	657b      	str	r3, [r7, #84]	@ 0x54
  return result;
 80086dc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80086de:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (value == 0U)
 80086e0:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80086e2:	2b00      	cmp	r3, #0
 80086e4:	d101      	bne.n	80086ea <HAL_ADC_ConfigChannel+0x48a>
    return 32U;
 80086e6:	2320      	movs	r3, #32
 80086e8:	e003      	b.n	80086f2 <HAL_ADC_ConfigChannel+0x492>
  return __builtin_clz(value);
 80086ea:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80086ec:	fab3 f383 	clz	r3, r3
 80086f0:	b2db      	uxtb	r3, r3
 80086f2:	3301      	adds	r3, #1
 80086f4:	f003 031f 	and.w	r3, r3, #31
 80086f8:	2b09      	cmp	r3, #9
 80086fa:	bf94      	ite	ls
 80086fc:	2301      	movls	r3, #1
 80086fe:	2300      	movhi	r3, #0
 8008700:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8008702:	2b00      	cmp	r3, #0
 8008704:	d079      	beq.n	80087fa <HAL_ADC_ConfigChannel+0x59a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8008706:	683b      	ldr	r3, [r7, #0]
 8008708:	681b      	ldr	r3, [r3, #0]
 800870a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800870e:	2b00      	cmp	r3, #0
 8008710:	d107      	bne.n	8008722 <HAL_ADC_ConfigChannel+0x4c2>
 8008712:	683b      	ldr	r3, [r7, #0]
 8008714:	681b      	ldr	r3, [r3, #0]
 8008716:	0e9b      	lsrs	r3, r3, #26
 8008718:	3301      	adds	r3, #1
 800871a:	069b      	lsls	r3, r3, #26
 800871c:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8008720:	e015      	b.n	800874e <HAL_ADC_ConfigChannel+0x4ee>
 8008722:	683b      	ldr	r3, [r7, #0]
 8008724:	681b      	ldr	r3, [r3, #0]
 8008726:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008728:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800872a:	fa93 f3a3 	rbit	r3, r3
 800872e:	64bb      	str	r3, [r7, #72]	@ 0x48
  return result;
 8008730:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008732:	653b      	str	r3, [r7, #80]	@ 0x50
  if (value == 0U)
 8008734:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008736:	2b00      	cmp	r3, #0
 8008738:	d101      	bne.n	800873e <HAL_ADC_ConfigChannel+0x4de>
    return 32U;
 800873a:	2320      	movs	r3, #32
 800873c:	e003      	b.n	8008746 <HAL_ADC_ConfigChannel+0x4e6>
  return __builtin_clz(value);
 800873e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008740:	fab3 f383 	clz	r3, r3
 8008744:	b2db      	uxtb	r3, r3
 8008746:	3301      	adds	r3, #1
 8008748:	069b      	lsls	r3, r3, #26
 800874a:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800874e:	683b      	ldr	r3, [r7, #0]
 8008750:	681b      	ldr	r3, [r3, #0]
 8008752:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008756:	2b00      	cmp	r3, #0
 8008758:	d109      	bne.n	800876e <HAL_ADC_ConfigChannel+0x50e>
 800875a:	683b      	ldr	r3, [r7, #0]
 800875c:	681b      	ldr	r3, [r3, #0]
 800875e:	0e9b      	lsrs	r3, r3, #26
 8008760:	3301      	adds	r3, #1
 8008762:	f003 031f 	and.w	r3, r3, #31
 8008766:	2101      	movs	r1, #1
 8008768:	fa01 f303 	lsl.w	r3, r1, r3
 800876c:	e017      	b.n	800879e <HAL_ADC_ConfigChannel+0x53e>
 800876e:	683b      	ldr	r3, [r7, #0]
 8008770:	681b      	ldr	r3, [r3, #0]
 8008772:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008774:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008776:	fa93 f3a3 	rbit	r3, r3
 800877a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return result;
 800877c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800877e:	647b      	str	r3, [r7, #68]	@ 0x44
  if (value == 0U)
 8008780:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008782:	2b00      	cmp	r3, #0
 8008784:	d101      	bne.n	800878a <HAL_ADC_ConfigChannel+0x52a>
    return 32U;
 8008786:	2320      	movs	r3, #32
 8008788:	e003      	b.n	8008792 <HAL_ADC_ConfigChannel+0x532>
  return __builtin_clz(value);
 800878a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800878c:	fab3 f383 	clz	r3, r3
 8008790:	b2db      	uxtb	r3, r3
 8008792:	3301      	adds	r3, #1
 8008794:	f003 031f 	and.w	r3, r3, #31
 8008798:	2101      	movs	r1, #1
 800879a:	fa01 f303 	lsl.w	r3, r1, r3
 800879e:	ea42 0103 	orr.w	r1, r2, r3
 80087a2:	683b      	ldr	r3, [r7, #0]
 80087a4:	681b      	ldr	r3, [r3, #0]
 80087a6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80087aa:	2b00      	cmp	r3, #0
 80087ac:	d10a      	bne.n	80087c4 <HAL_ADC_ConfigChannel+0x564>
 80087ae:	683b      	ldr	r3, [r7, #0]
 80087b0:	681b      	ldr	r3, [r3, #0]
 80087b2:	0e9b      	lsrs	r3, r3, #26
 80087b4:	3301      	adds	r3, #1
 80087b6:	f003 021f 	and.w	r2, r3, #31
 80087ba:	4613      	mov	r3, r2
 80087bc:	005b      	lsls	r3, r3, #1
 80087be:	4413      	add	r3, r2
 80087c0:	051b      	lsls	r3, r3, #20
 80087c2:	e018      	b.n	80087f6 <HAL_ADC_ConfigChannel+0x596>
 80087c4:	683b      	ldr	r3, [r7, #0]
 80087c6:	681b      	ldr	r3, [r3, #0]
 80087c8:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80087ca:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80087cc:	fa93 f3a3 	rbit	r3, r3
 80087d0:	633b      	str	r3, [r7, #48]	@ 0x30
  return result;
 80087d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80087d4:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (value == 0U)
 80087d6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80087d8:	2b00      	cmp	r3, #0
 80087da:	d101      	bne.n	80087e0 <HAL_ADC_ConfigChannel+0x580>
    return 32U;
 80087dc:	2320      	movs	r3, #32
 80087de:	e003      	b.n	80087e8 <HAL_ADC_ConfigChannel+0x588>
  return __builtin_clz(value);
 80087e0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80087e2:	fab3 f383 	clz	r3, r3
 80087e6:	b2db      	uxtb	r3, r3
 80087e8:	3301      	adds	r3, #1
 80087ea:	f003 021f 	and.w	r2, r3, #31
 80087ee:	4613      	mov	r3, r2
 80087f0:	005b      	lsls	r3, r3, #1
 80087f2:	4413      	add	r3, r2
 80087f4:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80087f6:	430b      	orrs	r3, r1
 80087f8:	e081      	b.n	80088fe <HAL_ADC_ConfigChannel+0x69e>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80087fa:	683b      	ldr	r3, [r7, #0]
 80087fc:	681b      	ldr	r3, [r3, #0]
 80087fe:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008802:	2b00      	cmp	r3, #0
 8008804:	d107      	bne.n	8008816 <HAL_ADC_ConfigChannel+0x5b6>
 8008806:	683b      	ldr	r3, [r7, #0]
 8008808:	681b      	ldr	r3, [r3, #0]
 800880a:	0e9b      	lsrs	r3, r3, #26
 800880c:	3301      	adds	r3, #1
 800880e:	069b      	lsls	r3, r3, #26
 8008810:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8008814:	e015      	b.n	8008842 <HAL_ADC_ConfigChannel+0x5e2>
 8008816:	683b      	ldr	r3, [r7, #0]
 8008818:	681b      	ldr	r3, [r3, #0]
 800881a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800881c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800881e:	fa93 f3a3 	rbit	r3, r3
 8008822:	627b      	str	r3, [r7, #36]	@ 0x24
  return result;
 8008824:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008826:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (value == 0U)
 8008828:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800882a:	2b00      	cmp	r3, #0
 800882c:	d101      	bne.n	8008832 <HAL_ADC_ConfigChannel+0x5d2>
    return 32U;
 800882e:	2320      	movs	r3, #32
 8008830:	e003      	b.n	800883a <HAL_ADC_ConfigChannel+0x5da>
  return __builtin_clz(value);
 8008832:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008834:	fab3 f383 	clz	r3, r3
 8008838:	b2db      	uxtb	r3, r3
 800883a:	3301      	adds	r3, #1
 800883c:	069b      	lsls	r3, r3, #26
 800883e:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8008842:	683b      	ldr	r3, [r7, #0]
 8008844:	681b      	ldr	r3, [r3, #0]
 8008846:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800884a:	2b00      	cmp	r3, #0
 800884c:	d109      	bne.n	8008862 <HAL_ADC_ConfigChannel+0x602>
 800884e:	683b      	ldr	r3, [r7, #0]
 8008850:	681b      	ldr	r3, [r3, #0]
 8008852:	0e9b      	lsrs	r3, r3, #26
 8008854:	3301      	adds	r3, #1
 8008856:	f003 031f 	and.w	r3, r3, #31
 800885a:	2101      	movs	r1, #1
 800885c:	fa01 f303 	lsl.w	r3, r1, r3
 8008860:	e017      	b.n	8008892 <HAL_ADC_ConfigChannel+0x632>
 8008862:	683b      	ldr	r3, [r7, #0]
 8008864:	681b      	ldr	r3, [r3, #0]
 8008866:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008868:	69fb      	ldr	r3, [r7, #28]
 800886a:	fa93 f3a3 	rbit	r3, r3
 800886e:	61bb      	str	r3, [r7, #24]
  return result;
 8008870:	69bb      	ldr	r3, [r7, #24]
 8008872:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8008874:	6a3b      	ldr	r3, [r7, #32]
 8008876:	2b00      	cmp	r3, #0
 8008878:	d101      	bne.n	800887e <HAL_ADC_ConfigChannel+0x61e>
    return 32U;
 800887a:	2320      	movs	r3, #32
 800887c:	e003      	b.n	8008886 <HAL_ADC_ConfigChannel+0x626>
  return __builtin_clz(value);
 800887e:	6a3b      	ldr	r3, [r7, #32]
 8008880:	fab3 f383 	clz	r3, r3
 8008884:	b2db      	uxtb	r3, r3
 8008886:	3301      	adds	r3, #1
 8008888:	f003 031f 	and.w	r3, r3, #31
 800888c:	2101      	movs	r1, #1
 800888e:	fa01 f303 	lsl.w	r3, r1, r3
 8008892:	ea42 0103 	orr.w	r1, r2, r3
 8008896:	683b      	ldr	r3, [r7, #0]
 8008898:	681b      	ldr	r3, [r3, #0]
 800889a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800889e:	2b00      	cmp	r3, #0
 80088a0:	d10d      	bne.n	80088be <HAL_ADC_ConfigChannel+0x65e>
 80088a2:	683b      	ldr	r3, [r7, #0]
 80088a4:	681b      	ldr	r3, [r3, #0]
 80088a6:	0e9b      	lsrs	r3, r3, #26
 80088a8:	3301      	adds	r3, #1
 80088aa:	f003 021f 	and.w	r2, r3, #31
 80088ae:	4613      	mov	r3, r2
 80088b0:	005b      	lsls	r3, r3, #1
 80088b2:	4413      	add	r3, r2
 80088b4:	3b1e      	subs	r3, #30
 80088b6:	051b      	lsls	r3, r3, #20
 80088b8:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80088bc:	e01e      	b.n	80088fc <HAL_ADC_ConfigChannel+0x69c>
 80088be:	683b      	ldr	r3, [r7, #0]
 80088c0:	681b      	ldr	r3, [r3, #0]
 80088c2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80088c4:	693b      	ldr	r3, [r7, #16]
 80088c6:	fa93 f3a3 	rbit	r3, r3
 80088ca:	60fb      	str	r3, [r7, #12]
  return result;
 80088cc:	68fb      	ldr	r3, [r7, #12]
 80088ce:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 80088d0:	697b      	ldr	r3, [r7, #20]
 80088d2:	2b00      	cmp	r3, #0
 80088d4:	d104      	bne.n	80088e0 <HAL_ADC_ConfigChannel+0x680>
    return 32U;
 80088d6:	2320      	movs	r3, #32
 80088d8:	e006      	b.n	80088e8 <HAL_ADC_ConfigChannel+0x688>
 80088da:	bf00      	nop
 80088dc:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 80088e0:	697b      	ldr	r3, [r7, #20]
 80088e2:	fab3 f383 	clz	r3, r3
 80088e6:	b2db      	uxtb	r3, r3
 80088e8:	3301      	adds	r3, #1
 80088ea:	f003 021f 	and.w	r2, r3, #31
 80088ee:	4613      	mov	r3, r2
 80088f0:	005b      	lsls	r3, r3, #1
 80088f2:	4413      	add	r3, r2
 80088f4:	3b1e      	subs	r3, #30
 80088f6:	051b      	lsls	r3, r3, #20
 80088f8:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80088fc:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 80088fe:	683a      	ldr	r2, [r7, #0]
 8008900:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8008902:	4619      	mov	r1, r3
 8008904:	f7ff f8d8 	bl	8007ab8 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8008908:	683b      	ldr	r3, [r7, #0]
 800890a:	681a      	ldr	r2, [r3, #0]
 800890c:	4b44      	ldr	r3, [pc, #272]	@ (8008a20 <HAL_ADC_ConfigChannel+0x7c0>)
 800890e:	4013      	ands	r3, r2
 8008910:	2b00      	cmp	r3, #0
 8008912:	d07a      	beq.n	8008a0a <HAL_ADC_ConfigChannel+0x7aa>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8008914:	4843      	ldr	r0, [pc, #268]	@ (8008a24 <HAL_ADC_ConfigChannel+0x7c4>)
 8008916:	f7ff f82d 	bl	8007974 <LL_ADC_GetCommonPathInternalCh>
 800891a:	f8c7 00c0 	str.w	r0, [r7, #192]	@ 0xc0

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800891e:	683b      	ldr	r3, [r7, #0]
 8008920:	681b      	ldr	r3, [r3, #0]
 8008922:	4a41      	ldr	r2, [pc, #260]	@ (8008a28 <HAL_ADC_ConfigChannel+0x7c8>)
 8008924:	4293      	cmp	r3, r2
 8008926:	d12c      	bne.n	8008982 <HAL_ADC_ConfigChannel+0x722>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8008928:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800892c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8008930:	2b00      	cmp	r3, #0
 8008932:	d126      	bne.n	8008982 <HAL_ADC_ConfigChannel+0x722>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8008934:	687b      	ldr	r3, [r7, #4]
 8008936:	681b      	ldr	r3, [r3, #0]
 8008938:	4a3c      	ldr	r2, [pc, #240]	@ (8008a2c <HAL_ADC_ConfigChannel+0x7cc>)
 800893a:	4293      	cmp	r3, r2
 800893c:	d004      	beq.n	8008948 <HAL_ADC_ConfigChannel+0x6e8>
 800893e:	687b      	ldr	r3, [r7, #4]
 8008940:	681b      	ldr	r3, [r3, #0]
 8008942:	4a3b      	ldr	r2, [pc, #236]	@ (8008a30 <HAL_ADC_ConfigChannel+0x7d0>)
 8008944:	4293      	cmp	r3, r2
 8008946:	d15d      	bne.n	8008a04 <HAL_ADC_ConfigChannel+0x7a4>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8008948:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800894c:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8008950:	4619      	mov	r1, r3
 8008952:	4834      	ldr	r0, [pc, #208]	@ (8008a24 <HAL_ADC_ConfigChannel+0x7c4>)
 8008954:	f7fe fffb 	bl	800794e <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8008958:	4b36      	ldr	r3, [pc, #216]	@ (8008a34 <HAL_ADC_ConfigChannel+0x7d4>)
 800895a:	681b      	ldr	r3, [r3, #0]
 800895c:	099b      	lsrs	r3, r3, #6
 800895e:	4a36      	ldr	r2, [pc, #216]	@ (8008a38 <HAL_ADC_ConfigChannel+0x7d8>)
 8008960:	fba2 2303 	umull	r2, r3, r2, r3
 8008964:	099b      	lsrs	r3, r3, #6
 8008966:	1c5a      	adds	r2, r3, #1
 8008968:	4613      	mov	r3, r2
 800896a:	005b      	lsls	r3, r3, #1
 800896c:	4413      	add	r3, r2
 800896e:	009b      	lsls	r3, r3, #2
 8008970:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8008972:	e002      	b.n	800897a <HAL_ADC_ConfigChannel+0x71a>
          {
            wait_loop_index--;
 8008974:	68bb      	ldr	r3, [r7, #8]
 8008976:	3b01      	subs	r3, #1
 8008978:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 800897a:	68bb      	ldr	r3, [r7, #8]
 800897c:	2b00      	cmp	r3, #0
 800897e:	d1f9      	bne.n	8008974 <HAL_ADC_ConfigChannel+0x714>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8008980:	e040      	b.n	8008a04 <HAL_ADC_ConfigChannel+0x7a4>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8008982:	683b      	ldr	r3, [r7, #0]
 8008984:	681b      	ldr	r3, [r3, #0]
 8008986:	4a2d      	ldr	r2, [pc, #180]	@ (8008a3c <HAL_ADC_ConfigChannel+0x7dc>)
 8008988:	4293      	cmp	r3, r2
 800898a:	d118      	bne.n	80089be <HAL_ADC_ConfigChannel+0x75e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 800898c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8008990:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8008994:	2b00      	cmp	r3, #0
 8008996:	d112      	bne.n	80089be <HAL_ADC_ConfigChannel+0x75e>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8008998:	687b      	ldr	r3, [r7, #4]
 800899a:	681b      	ldr	r3, [r3, #0]
 800899c:	4a23      	ldr	r2, [pc, #140]	@ (8008a2c <HAL_ADC_ConfigChannel+0x7cc>)
 800899e:	4293      	cmp	r3, r2
 80089a0:	d004      	beq.n	80089ac <HAL_ADC_ConfigChannel+0x74c>
 80089a2:	687b      	ldr	r3, [r7, #4]
 80089a4:	681b      	ldr	r3, [r3, #0]
 80089a6:	4a22      	ldr	r2, [pc, #136]	@ (8008a30 <HAL_ADC_ConfigChannel+0x7d0>)
 80089a8:	4293      	cmp	r3, r2
 80089aa:	d12d      	bne.n	8008a08 <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80089ac:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80089b0:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80089b4:	4619      	mov	r1, r3
 80089b6:	481b      	ldr	r0, [pc, #108]	@ (8008a24 <HAL_ADC_ConfigChannel+0x7c4>)
 80089b8:	f7fe ffc9 	bl	800794e <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80089bc:	e024      	b.n	8008a08 <HAL_ADC_ConfigChannel+0x7a8>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 80089be:	683b      	ldr	r3, [r7, #0]
 80089c0:	681b      	ldr	r3, [r3, #0]
 80089c2:	4a1f      	ldr	r2, [pc, #124]	@ (8008a40 <HAL_ADC_ConfigChannel+0x7e0>)
 80089c4:	4293      	cmp	r3, r2
 80089c6:	d120      	bne.n	8008a0a <HAL_ADC_ConfigChannel+0x7aa>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80089c8:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80089cc:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80089d0:	2b00      	cmp	r3, #0
 80089d2:	d11a      	bne.n	8008a0a <HAL_ADC_ConfigChannel+0x7aa>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 80089d4:	687b      	ldr	r3, [r7, #4]
 80089d6:	681b      	ldr	r3, [r3, #0]
 80089d8:	4a14      	ldr	r2, [pc, #80]	@ (8008a2c <HAL_ADC_ConfigChannel+0x7cc>)
 80089da:	4293      	cmp	r3, r2
 80089dc:	d115      	bne.n	8008a0a <HAL_ADC_ConfigChannel+0x7aa>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80089de:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80089e2:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80089e6:	4619      	mov	r1, r3
 80089e8:	480e      	ldr	r0, [pc, #56]	@ (8008a24 <HAL_ADC_ConfigChannel+0x7c4>)
 80089ea:	f7fe ffb0 	bl	800794e <LL_ADC_SetCommonPathInternalCh>
 80089ee:	e00c      	b.n	8008a0a <HAL_ADC_ConfigChannel+0x7aa>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80089f0:	687b      	ldr	r3, [r7, #4]
 80089f2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80089f4:	f043 0220 	orr.w	r2, r3, #32
 80089f8:	687b      	ldr	r3, [r7, #4]
 80089fa:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 80089fc:	2301      	movs	r3, #1
 80089fe:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
 8008a02:	e002      	b.n	8008a0a <HAL_ADC_ConfigChannel+0x7aa>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8008a04:	bf00      	nop
 8008a06:	e000      	b.n	8008a0a <HAL_ADC_ConfigChannel+0x7aa>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8008a08:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8008a0a:	687b      	ldr	r3, [r7, #4]
 8008a0c:	2200      	movs	r2, #0
 8008a0e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 8008a12:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 8008a16:	4618      	mov	r0, r3
 8008a18:	37d8      	adds	r7, #216	@ 0xd8
 8008a1a:	46bd      	mov	sp, r7
 8008a1c:	bd80      	pop	{r7, pc}
 8008a1e:	bf00      	nop
 8008a20:	80080000 	.word	0x80080000
 8008a24:	50040300 	.word	0x50040300
 8008a28:	c7520000 	.word	0xc7520000
 8008a2c:	50040000 	.word	0x50040000
 8008a30:	50040200 	.word	0x50040200
 8008a34:	20000000 	.word	0x20000000
 8008a38:	053e2d63 	.word	0x053e2d63
 8008a3c:	cb840000 	.word	0xcb840000
 8008a40:	80000001 	.word	0x80000001

08008a44 <ADC_ConversionStop>:
  *            @arg @ref ADC_INJECTED_GROUP          ADC injected conversion type.
  *            @arg @ref ADC_REGULAR_INJECTED_GROUP  ADC regular and injected conversion type.
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc, uint32_t ConversionGroup)
{
 8008a44:	b580      	push	{r7, lr}
 8008a46:	b088      	sub	sp, #32
 8008a48:	af00      	add	r7, sp, #0
 8008a4a:	6078      	str	r0, [r7, #4]
 8008a4c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t Conversion_Timeout_CPU_cycles = 0UL;
 8008a4e:	2300      	movs	r3, #0
 8008a50:	61fb      	str	r3, [r7, #28]
  uint32_t conversion_group_reassigned = ConversionGroup;
 8008a52:	683b      	ldr	r3, [r7, #0]
 8008a54:	61bb      	str	r3, [r7, #24]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CONVERSION_GROUP(ConversionGroup));

  /* Verification if ADC is not already stopped (on regular and injected      */
  /* groups) to bypass this function if not needed.                           */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8008a56:	687b      	ldr	r3, [r7, #4]
 8008a58:	681b      	ldr	r3, [r3, #0]
 8008a5a:	4618      	mov	r0, r3
 8008a5c:	f7ff f94e 	bl	8007cfc <LL_ADC_REG_IsConversionOngoing>
 8008a60:	6138      	str	r0, [r7, #16]
  tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8008a62:	687b      	ldr	r3, [r7, #4]
 8008a64:	681b      	ldr	r3, [r3, #0]
 8008a66:	4618      	mov	r0, r3
 8008a68:	f7ff f96f 	bl	8007d4a <LL_ADC_INJ_IsConversionOngoing>
 8008a6c:	60f8      	str	r0, [r7, #12]
  if ((tmp_adc_is_conversion_on_going_regular != 0UL)
 8008a6e:	693b      	ldr	r3, [r7, #16]
 8008a70:	2b00      	cmp	r3, #0
 8008a72:	d103      	bne.n	8008a7c <ADC_ConversionStop+0x38>
      || (tmp_adc_is_conversion_on_going_injected != 0UL)
 8008a74:	68fb      	ldr	r3, [r7, #12]
 8008a76:	2b00      	cmp	r3, #0
 8008a78:	f000 8098 	beq.w	8008bac <ADC_ConversionStop+0x168>
    /* auto-delay mode.                                                       */
    /* In auto-injection mode, regular group stop ADC_CR_ADSTP is used (not   */
    /* injected group stop ADC_CR_JADSTP).                                    */
    /* Procedure to be followed: Wait until JEOS=1, clear JEOS, set ADSTP=1   */
    /* (see reference manual).                                                */
    if (((hadc->Instance->CFGR & ADC_CFGR_JAUTO) != 0UL)
 8008a7c:	687b      	ldr	r3, [r7, #4]
 8008a7e:	681b      	ldr	r3, [r3, #0]
 8008a80:	68db      	ldr	r3, [r3, #12]
 8008a82:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008a86:	2b00      	cmp	r3, #0
 8008a88:	d02a      	beq.n	8008ae0 <ADC_ConversionStop+0x9c>
        && (hadc->Init.ContinuousConvMode == ENABLE)
 8008a8a:	687b      	ldr	r3, [r7, #4]
 8008a8c:	7e5b      	ldrb	r3, [r3, #25]
 8008a8e:	2b01      	cmp	r3, #1
 8008a90:	d126      	bne.n	8008ae0 <ADC_ConversionStop+0x9c>
        && (hadc->Init.LowPowerAutoWait == ENABLE)
 8008a92:	687b      	ldr	r3, [r7, #4]
 8008a94:	7e1b      	ldrb	r3, [r3, #24]
 8008a96:	2b01      	cmp	r3, #1
 8008a98:	d122      	bne.n	8008ae0 <ADC_ConversionStop+0x9c>
       )
    {
      /* Use stop of regular group */
      conversion_group_reassigned = ADC_REGULAR_GROUP;
 8008a9a:	2301      	movs	r3, #1
 8008a9c:	61bb      	str	r3, [r7, #24]

      /* Wait until JEOS=1 (maximum Timeout: 4 injected conversions) */
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 8008a9e:	e014      	b.n	8008aca <ADC_ConversionStop+0x86>
      {
        if (Conversion_Timeout_CPU_cycles >= (ADC_CONVERSION_TIME_MAX_CPU_CYCLES * 4UL))
 8008aa0:	69fb      	ldr	r3, [r7, #28]
 8008aa2:	4a45      	ldr	r2, [pc, #276]	@ (8008bb8 <ADC_ConversionStop+0x174>)
 8008aa4:	4293      	cmp	r3, r2
 8008aa6:	d90d      	bls.n	8008ac4 <ADC_ConversionStop+0x80>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8008aa8:	687b      	ldr	r3, [r7, #4]
 8008aaa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008aac:	f043 0210 	orr.w	r2, r3, #16
 8008ab0:	687b      	ldr	r3, [r7, #4]
 8008ab2:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8008ab4:	687b      	ldr	r3, [r7, #4]
 8008ab6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008ab8:	f043 0201 	orr.w	r2, r3, #1
 8008abc:	687b      	ldr	r3, [r7, #4]
 8008abe:	659a      	str	r2, [r3, #88]	@ 0x58

          return HAL_ERROR;
 8008ac0:	2301      	movs	r3, #1
 8008ac2:	e074      	b.n	8008bae <ADC_ConversionStop+0x16a>
        }
        Conversion_Timeout_CPU_cycles ++;
 8008ac4:	69fb      	ldr	r3, [r7, #28]
 8008ac6:	3301      	adds	r3, #1
 8008ac8:	61fb      	str	r3, [r7, #28]
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 8008aca:	687b      	ldr	r3, [r7, #4]
 8008acc:	681b      	ldr	r3, [r3, #0]
 8008ace:	681b      	ldr	r3, [r3, #0]
 8008ad0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008ad4:	2b40      	cmp	r3, #64	@ 0x40
 8008ad6:	d1e3      	bne.n	8008aa0 <ADC_ConversionStop+0x5c>
      }

      /* Clear JEOS */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
 8008ad8:	687b      	ldr	r3, [r7, #4]
 8008ada:	681b      	ldr	r3, [r3, #0]
 8008adc:	2240      	movs	r2, #64	@ 0x40
 8008ade:	601a      	str	r2, [r3, #0]
    }

    /* Stop potential conversion on going on ADC group regular */
    if (conversion_group_reassigned != ADC_INJECTED_GROUP)
 8008ae0:	69bb      	ldr	r3, [r7, #24]
 8008ae2:	2b02      	cmp	r3, #2
 8008ae4:	d014      	beq.n	8008b10 <ADC_ConversionStop+0xcc>
    {
      /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 8008ae6:	687b      	ldr	r3, [r7, #4]
 8008ae8:	681b      	ldr	r3, [r3, #0]
 8008aea:	4618      	mov	r0, r3
 8008aec:	f7ff f906 	bl	8007cfc <LL_ADC_REG_IsConversionOngoing>
 8008af0:	4603      	mov	r3, r0
 8008af2:	2b00      	cmp	r3, #0
 8008af4:	d00c      	beq.n	8008b10 <ADC_ConversionStop+0xcc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 8008af6:	687b      	ldr	r3, [r7, #4]
 8008af8:	681b      	ldr	r3, [r3, #0]
 8008afa:	4618      	mov	r0, r3
 8008afc:	f7ff f8c3 	bl	8007c86 <LL_ADC_IsDisableOngoing>
 8008b00:	4603      	mov	r3, r0
 8008b02:	2b00      	cmp	r3, #0
 8008b04:	d104      	bne.n	8008b10 <ADC_ConversionStop+0xcc>
        {
          /* Stop ADC group regular conversion */
          LL_ADC_REG_StopConversion(hadc->Instance);
 8008b06:	687b      	ldr	r3, [r7, #4]
 8008b08:	681b      	ldr	r3, [r3, #0]
 8008b0a:	4618      	mov	r0, r3
 8008b0c:	f7ff f8e2 	bl	8007cd4 <LL_ADC_REG_StopConversion>
        }
      }
    }

    /* Stop potential conversion on going on ADC group injected */
    if (conversion_group_reassigned != ADC_REGULAR_GROUP)
 8008b10:	69bb      	ldr	r3, [r7, #24]
 8008b12:	2b01      	cmp	r3, #1
 8008b14:	d014      	beq.n	8008b40 <ADC_ConversionStop+0xfc>
    {
      /* Software is allowed to set JADSTP only when JADSTART=1 and ADDIS=0 */
      if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) != 0UL)
 8008b16:	687b      	ldr	r3, [r7, #4]
 8008b18:	681b      	ldr	r3, [r3, #0]
 8008b1a:	4618      	mov	r0, r3
 8008b1c:	f7ff f915 	bl	8007d4a <LL_ADC_INJ_IsConversionOngoing>
 8008b20:	4603      	mov	r3, r0
 8008b22:	2b00      	cmp	r3, #0
 8008b24:	d00c      	beq.n	8008b40 <ADC_ConversionStop+0xfc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 8008b26:	687b      	ldr	r3, [r7, #4]
 8008b28:	681b      	ldr	r3, [r3, #0]
 8008b2a:	4618      	mov	r0, r3
 8008b2c:	f7ff f8ab 	bl	8007c86 <LL_ADC_IsDisableOngoing>
 8008b30:	4603      	mov	r3, r0
 8008b32:	2b00      	cmp	r3, #0
 8008b34:	d104      	bne.n	8008b40 <ADC_ConversionStop+0xfc>
        {
          /* Stop ADC group injected conversion */
          LL_ADC_INJ_StopConversion(hadc->Instance);
 8008b36:	687b      	ldr	r3, [r7, #4]
 8008b38:	681b      	ldr	r3, [r3, #0]
 8008b3a:	4618      	mov	r0, r3
 8008b3c:	f7ff f8f1 	bl	8007d22 <LL_ADC_INJ_StopConversion>
        }
      }
    }

    /* Selection of start and stop bits with respect to the regular or injected group */
    switch (conversion_group_reassigned)
 8008b40:	69bb      	ldr	r3, [r7, #24]
 8008b42:	2b02      	cmp	r3, #2
 8008b44:	d005      	beq.n	8008b52 <ADC_ConversionStop+0x10e>
 8008b46:	69bb      	ldr	r3, [r7, #24]
 8008b48:	2b03      	cmp	r3, #3
 8008b4a:	d105      	bne.n	8008b58 <ADC_ConversionStop+0x114>
    {
      case ADC_REGULAR_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = (ADC_CR_ADSTART | ADC_CR_JADSTART);
 8008b4c:	230c      	movs	r3, #12
 8008b4e:	617b      	str	r3, [r7, #20]
        break;
 8008b50:	e005      	b.n	8008b5e <ADC_ConversionStop+0x11a>
      case ADC_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_JADSTART;
 8008b52:	2308      	movs	r3, #8
 8008b54:	617b      	str	r3, [r7, #20]
        break;
 8008b56:	e002      	b.n	8008b5e <ADC_ConversionStop+0x11a>
      /* Case ADC_REGULAR_GROUP only*/
      default:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
 8008b58:	2304      	movs	r3, #4
 8008b5a:	617b      	str	r3, [r7, #20]
        break;
 8008b5c:	bf00      	nop
    }

    /* Wait for conversion effectively stopped */
    tickstart = HAL_GetTick();
 8008b5e:	f7fe feb3 	bl	80078c8 <HAL_GetTick>
 8008b62:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8008b64:	e01b      	b.n	8008b9e <ADC_ConversionStop+0x15a>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 8008b66:	f7fe feaf 	bl	80078c8 <HAL_GetTick>
 8008b6a:	4602      	mov	r2, r0
 8008b6c:	68bb      	ldr	r3, [r7, #8]
 8008b6e:	1ad3      	subs	r3, r2, r3
 8008b70:	2b05      	cmp	r3, #5
 8008b72:	d914      	bls.n	8008b9e <ADC_ConversionStop+0x15a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8008b74:	687b      	ldr	r3, [r7, #4]
 8008b76:	681b      	ldr	r3, [r3, #0]
 8008b78:	689a      	ldr	r2, [r3, #8]
 8008b7a:	697b      	ldr	r3, [r7, #20]
 8008b7c:	4013      	ands	r3, r2
 8008b7e:	2b00      	cmp	r3, #0
 8008b80:	d00d      	beq.n	8008b9e <ADC_ConversionStop+0x15a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8008b82:	687b      	ldr	r3, [r7, #4]
 8008b84:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008b86:	f043 0210 	orr.w	r2, r3, #16
 8008b8a:	687b      	ldr	r3, [r7, #4]
 8008b8c:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8008b8e:	687b      	ldr	r3, [r7, #4]
 8008b90:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008b92:	f043 0201 	orr.w	r2, r3, #1
 8008b96:	687b      	ldr	r3, [r7, #4]
 8008b98:	659a      	str	r2, [r3, #88]	@ 0x58

          return HAL_ERROR;
 8008b9a:	2301      	movs	r3, #1
 8008b9c:	e007      	b.n	8008bae <ADC_ConversionStop+0x16a>
    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8008b9e:	687b      	ldr	r3, [r7, #4]
 8008ba0:	681b      	ldr	r3, [r3, #0]
 8008ba2:	689a      	ldr	r2, [r3, #8]
 8008ba4:	697b      	ldr	r3, [r7, #20]
 8008ba6:	4013      	ands	r3, r2
 8008ba8:	2b00      	cmp	r3, #0
 8008baa:	d1dc      	bne.n	8008b66 <ADC_ConversionStop+0x122>
    }

  }

  /* Return HAL status */
  return HAL_OK;
 8008bac:	2300      	movs	r3, #0
}
 8008bae:	4618      	mov	r0, r3
 8008bb0:	3720      	adds	r7, #32
 8008bb2:	46bd      	mov	sp, r7
 8008bb4:	bd80      	pop	{r7, pc}
 8008bb6:	bf00      	nop
 8008bb8:	a33fffff 	.word	0xa33fffff

08008bbc <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8008bbc:	b580      	push	{r7, lr}
 8008bbe:	b084      	sub	sp, #16
 8008bc0:	af00      	add	r7, sp, #0
 8008bc2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8008bc4:	2300      	movs	r3, #0
 8008bc6:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8008bc8:	687b      	ldr	r3, [r7, #4]
 8008bca:	681b      	ldr	r3, [r3, #0]
 8008bcc:	4618      	mov	r0, r3
 8008bce:	f7ff f847 	bl	8007c60 <LL_ADC_IsEnabled>
 8008bd2:	4603      	mov	r3, r0
 8008bd4:	2b00      	cmp	r3, #0
 8008bd6:	d169      	bne.n	8008cac <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8008bd8:	687b      	ldr	r3, [r7, #4]
 8008bda:	681b      	ldr	r3, [r3, #0]
 8008bdc:	689a      	ldr	r2, [r3, #8]
 8008bde:	4b36      	ldr	r3, [pc, #216]	@ (8008cb8 <ADC_Enable+0xfc>)
 8008be0:	4013      	ands	r3, r2
 8008be2:	2b00      	cmp	r3, #0
 8008be4:	d00d      	beq.n	8008c02 <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8008be6:	687b      	ldr	r3, [r7, #4]
 8008be8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008bea:	f043 0210 	orr.w	r2, r3, #16
 8008bee:	687b      	ldr	r3, [r7, #4]
 8008bf0:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8008bf2:	687b      	ldr	r3, [r7, #4]
 8008bf4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008bf6:	f043 0201 	orr.w	r2, r3, #1
 8008bfa:	687b      	ldr	r3, [r7, #4]
 8008bfc:	659a      	str	r2, [r3, #88]	@ 0x58

      return HAL_ERROR;
 8008bfe:	2301      	movs	r3, #1
 8008c00:	e055      	b.n	8008cae <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8008c02:	687b      	ldr	r3, [r7, #4]
 8008c04:	681b      	ldr	r3, [r3, #0]
 8008c06:	4618      	mov	r0, r3
 8008c08:	f7ff f802 	bl	8007c10 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8008c0c:	482b      	ldr	r0, [pc, #172]	@ (8008cbc <ADC_Enable+0x100>)
 8008c0e:	f7fe feb1 	bl	8007974 <LL_ADC_GetCommonPathInternalCh>
 8008c12:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8008c14:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8008c18:	2b00      	cmp	r3, #0
 8008c1a:	d013      	beq.n	8008c44 <ADC_Enable+0x88>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8008c1c:	4b28      	ldr	r3, [pc, #160]	@ (8008cc0 <ADC_Enable+0x104>)
 8008c1e:	681b      	ldr	r3, [r3, #0]
 8008c20:	099b      	lsrs	r3, r3, #6
 8008c22:	4a28      	ldr	r2, [pc, #160]	@ (8008cc4 <ADC_Enable+0x108>)
 8008c24:	fba2 2303 	umull	r2, r3, r2, r3
 8008c28:	099b      	lsrs	r3, r3, #6
 8008c2a:	1c5a      	adds	r2, r3, #1
 8008c2c:	4613      	mov	r3, r2
 8008c2e:	005b      	lsls	r3, r3, #1
 8008c30:	4413      	add	r3, r2
 8008c32:	009b      	lsls	r3, r3, #2
 8008c34:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8008c36:	e002      	b.n	8008c3e <ADC_Enable+0x82>
      {
        wait_loop_index--;
 8008c38:	68bb      	ldr	r3, [r7, #8]
 8008c3a:	3b01      	subs	r3, #1
 8008c3c:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8008c3e:	68bb      	ldr	r3, [r7, #8]
 8008c40:	2b00      	cmp	r3, #0
 8008c42:	d1f9      	bne.n	8008c38 <ADC_Enable+0x7c>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8008c44:	f7fe fe40 	bl	80078c8 <HAL_GetTick>
 8008c48:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8008c4a:	e028      	b.n	8008c9e <ADC_Enable+0xe2>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8008c4c:	687b      	ldr	r3, [r7, #4]
 8008c4e:	681b      	ldr	r3, [r3, #0]
 8008c50:	4618      	mov	r0, r3
 8008c52:	f7ff f805 	bl	8007c60 <LL_ADC_IsEnabled>
 8008c56:	4603      	mov	r3, r0
 8008c58:	2b00      	cmp	r3, #0
 8008c5a:	d104      	bne.n	8008c66 <ADC_Enable+0xaa>
      {
        LL_ADC_Enable(hadc->Instance);
 8008c5c:	687b      	ldr	r3, [r7, #4]
 8008c5e:	681b      	ldr	r3, [r3, #0]
 8008c60:	4618      	mov	r0, r3
 8008c62:	f7fe ffd5 	bl	8007c10 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8008c66:	f7fe fe2f 	bl	80078c8 <HAL_GetTick>
 8008c6a:	4602      	mov	r2, r0
 8008c6c:	68fb      	ldr	r3, [r7, #12]
 8008c6e:	1ad3      	subs	r3, r2, r3
 8008c70:	2b02      	cmp	r3, #2
 8008c72:	d914      	bls.n	8008c9e <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8008c74:	687b      	ldr	r3, [r7, #4]
 8008c76:	681b      	ldr	r3, [r3, #0]
 8008c78:	681b      	ldr	r3, [r3, #0]
 8008c7a:	f003 0301 	and.w	r3, r3, #1
 8008c7e:	2b01      	cmp	r3, #1
 8008c80:	d00d      	beq.n	8008c9e <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8008c82:	687b      	ldr	r3, [r7, #4]
 8008c84:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008c86:	f043 0210 	orr.w	r2, r3, #16
 8008c8a:	687b      	ldr	r3, [r7, #4]
 8008c8c:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8008c8e:	687b      	ldr	r3, [r7, #4]
 8008c90:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008c92:	f043 0201 	orr.w	r2, r3, #1
 8008c96:	687b      	ldr	r3, [r7, #4]
 8008c98:	659a      	str	r2, [r3, #88]	@ 0x58

          return HAL_ERROR;
 8008c9a:	2301      	movs	r3, #1
 8008c9c:	e007      	b.n	8008cae <ADC_Enable+0xf2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8008c9e:	687b      	ldr	r3, [r7, #4]
 8008ca0:	681b      	ldr	r3, [r3, #0]
 8008ca2:	681b      	ldr	r3, [r3, #0]
 8008ca4:	f003 0301 	and.w	r3, r3, #1
 8008ca8:	2b01      	cmp	r3, #1
 8008caa:	d1cf      	bne.n	8008c4c <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8008cac:	2300      	movs	r3, #0
}
 8008cae:	4618      	mov	r0, r3
 8008cb0:	3710      	adds	r7, #16
 8008cb2:	46bd      	mov	sp, r7
 8008cb4:	bd80      	pop	{r7, pc}
 8008cb6:	bf00      	nop
 8008cb8:	8000003f 	.word	0x8000003f
 8008cbc:	50040300 	.word	0x50040300
 8008cc0:	20000000 	.word	0x20000000
 8008cc4:	053e2d63 	.word	0x053e2d63

08008cc8 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8008cc8:	b580      	push	{r7, lr}
 8008cca:	b084      	sub	sp, #16
 8008ccc:	af00      	add	r7, sp, #0
 8008cce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8008cd0:	687b      	ldr	r3, [r7, #4]
 8008cd2:	681b      	ldr	r3, [r3, #0]
 8008cd4:	4618      	mov	r0, r3
 8008cd6:	f7fe ffd6 	bl	8007c86 <LL_ADC_IsDisableOngoing>
 8008cda:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8008cdc:	687b      	ldr	r3, [r7, #4]
 8008cde:	681b      	ldr	r3, [r3, #0]
 8008ce0:	4618      	mov	r0, r3
 8008ce2:	f7fe ffbd 	bl	8007c60 <LL_ADC_IsEnabled>
 8008ce6:	4603      	mov	r3, r0
 8008ce8:	2b00      	cmp	r3, #0
 8008cea:	d047      	beq.n	8008d7c <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 8008cec:	68fb      	ldr	r3, [r7, #12]
 8008cee:	2b00      	cmp	r3, #0
 8008cf0:	d144      	bne.n	8008d7c <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8008cf2:	687b      	ldr	r3, [r7, #4]
 8008cf4:	681b      	ldr	r3, [r3, #0]
 8008cf6:	689b      	ldr	r3, [r3, #8]
 8008cf8:	f003 030d 	and.w	r3, r3, #13
 8008cfc:	2b01      	cmp	r3, #1
 8008cfe:	d10c      	bne.n	8008d1a <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8008d00:	687b      	ldr	r3, [r7, #4]
 8008d02:	681b      	ldr	r3, [r3, #0]
 8008d04:	4618      	mov	r0, r3
 8008d06:	f7fe ff97 	bl	8007c38 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8008d0a:	687b      	ldr	r3, [r7, #4]
 8008d0c:	681b      	ldr	r3, [r3, #0]
 8008d0e:	2203      	movs	r2, #3
 8008d10:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8008d12:	f7fe fdd9 	bl	80078c8 <HAL_GetTick>
 8008d16:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8008d18:	e029      	b.n	8008d6e <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8008d1a:	687b      	ldr	r3, [r7, #4]
 8008d1c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008d1e:	f043 0210 	orr.w	r2, r3, #16
 8008d22:	687b      	ldr	r3, [r7, #4]
 8008d24:	655a      	str	r2, [r3, #84]	@ 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8008d26:	687b      	ldr	r3, [r7, #4]
 8008d28:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008d2a:	f043 0201 	orr.w	r2, r3, #1
 8008d2e:	687b      	ldr	r3, [r7, #4]
 8008d30:	659a      	str	r2, [r3, #88]	@ 0x58
      return HAL_ERROR;
 8008d32:	2301      	movs	r3, #1
 8008d34:	e023      	b.n	8008d7e <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8008d36:	f7fe fdc7 	bl	80078c8 <HAL_GetTick>
 8008d3a:	4602      	mov	r2, r0
 8008d3c:	68bb      	ldr	r3, [r7, #8]
 8008d3e:	1ad3      	subs	r3, r2, r3
 8008d40:	2b02      	cmp	r3, #2
 8008d42:	d914      	bls.n	8008d6e <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8008d44:	687b      	ldr	r3, [r7, #4]
 8008d46:	681b      	ldr	r3, [r3, #0]
 8008d48:	689b      	ldr	r3, [r3, #8]
 8008d4a:	f003 0301 	and.w	r3, r3, #1
 8008d4e:	2b00      	cmp	r3, #0
 8008d50:	d00d      	beq.n	8008d6e <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8008d52:	687b      	ldr	r3, [r7, #4]
 8008d54:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008d56:	f043 0210 	orr.w	r2, r3, #16
 8008d5a:	687b      	ldr	r3, [r7, #4]
 8008d5c:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8008d5e:	687b      	ldr	r3, [r7, #4]
 8008d60:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008d62:	f043 0201 	orr.w	r2, r3, #1
 8008d66:	687b      	ldr	r3, [r7, #4]
 8008d68:	659a      	str	r2, [r3, #88]	@ 0x58

          return HAL_ERROR;
 8008d6a:	2301      	movs	r3, #1
 8008d6c:	e007      	b.n	8008d7e <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8008d6e:	687b      	ldr	r3, [r7, #4]
 8008d70:	681b      	ldr	r3, [r3, #0]
 8008d72:	689b      	ldr	r3, [r3, #8]
 8008d74:	f003 0301 	and.w	r3, r3, #1
 8008d78:	2b00      	cmp	r3, #0
 8008d7a:	d1dc      	bne.n	8008d36 <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8008d7c:	2300      	movs	r3, #0
}
 8008d7e:	4618      	mov	r0, r3
 8008d80:	3710      	adds	r7, #16
 8008d82:	46bd      	mov	sp, r7
 8008d84:	bd80      	pop	{r7, pc}

08008d86 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8008d86:	b580      	push	{r7, lr}
 8008d88:	b084      	sub	sp, #16
 8008d8a:	af00      	add	r7, sp, #0
 8008d8c:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008d8e:	687b      	ldr	r3, [r7, #4]
 8008d90:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008d92:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8008d94:	68fb      	ldr	r3, [r7, #12]
 8008d96:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008d98:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8008d9c:	2b00      	cmp	r3, #0
 8008d9e:	d14b      	bne.n	8008e38 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8008da0:	68fb      	ldr	r3, [r7, #12]
 8008da2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008da4:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8008da8:	68fb      	ldr	r3, [r7, #12]
 8008daa:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8008dac:	68fb      	ldr	r3, [r7, #12]
 8008dae:	681b      	ldr	r3, [r3, #0]
 8008db0:	681b      	ldr	r3, [r3, #0]
 8008db2:	f003 0308 	and.w	r3, r3, #8
 8008db6:	2b00      	cmp	r3, #0
 8008db8:	d021      	beq.n	8008dfe <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8008dba:	68fb      	ldr	r3, [r7, #12]
 8008dbc:	681b      	ldr	r3, [r3, #0]
 8008dbe:	4618      	mov	r0, r3
 8008dc0:	f7fe fe3b 	bl	8007a3a <LL_ADC_REG_IsTriggerSourceSWStart>
 8008dc4:	4603      	mov	r3, r0
 8008dc6:	2b00      	cmp	r3, #0
 8008dc8:	d032      	beq.n	8008e30 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8008dca:	68fb      	ldr	r3, [r7, #12]
 8008dcc:	681b      	ldr	r3, [r3, #0]
 8008dce:	68db      	ldr	r3, [r3, #12]
 8008dd0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8008dd4:	2b00      	cmp	r3, #0
 8008dd6:	d12b      	bne.n	8008e30 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8008dd8:	68fb      	ldr	r3, [r7, #12]
 8008dda:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008ddc:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8008de0:	68fb      	ldr	r3, [r7, #12]
 8008de2:	655a      	str	r2, [r3, #84]	@ 0x54
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8008de4:	68fb      	ldr	r3, [r7, #12]
 8008de6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008de8:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8008dec:	2b00      	cmp	r3, #0
 8008dee:	d11f      	bne.n	8008e30 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8008df0:	68fb      	ldr	r3, [r7, #12]
 8008df2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008df4:	f043 0201 	orr.w	r2, r3, #1
 8008df8:	68fb      	ldr	r3, [r7, #12]
 8008dfa:	655a      	str	r2, [r3, #84]	@ 0x54
 8008dfc:	e018      	b.n	8008e30 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 8008dfe:	68fb      	ldr	r3, [r7, #12]
 8008e00:	681b      	ldr	r3, [r3, #0]
 8008e02:	68db      	ldr	r3, [r3, #12]
 8008e04:	f003 0302 	and.w	r3, r3, #2
 8008e08:	2b00      	cmp	r3, #0
 8008e0a:	d111      	bne.n	8008e30 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8008e0c:	68fb      	ldr	r3, [r7, #12]
 8008e0e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008e10:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8008e14:	68fb      	ldr	r3, [r7, #12]
 8008e16:	655a      	str	r2, [r3, #84]	@ 0x54
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8008e18:	68fb      	ldr	r3, [r7, #12]
 8008e1a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008e1c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8008e20:	2b00      	cmp	r3, #0
 8008e22:	d105      	bne.n	8008e30 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8008e24:	68fb      	ldr	r3, [r7, #12]
 8008e26:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008e28:	f043 0201 	orr.w	r2, r3, #1
 8008e2c:	68fb      	ldr	r3, [r7, #12]
 8008e2e:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8008e30:	68f8      	ldr	r0, [r7, #12]
 8008e32:	f7f8 fa41 	bl	80012b8 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8008e36:	e00e      	b.n	8008e56 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8008e38:	68fb      	ldr	r3, [r7, #12]
 8008e3a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008e3c:	f003 0310 	and.w	r3, r3, #16
 8008e40:	2b00      	cmp	r3, #0
 8008e42:	d003      	beq.n	8008e4c <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8008e44:	68f8      	ldr	r0, [r7, #12]
 8008e46:	f7ff fa00 	bl	800824a <HAL_ADC_ErrorCallback>
}
 8008e4a:	e004      	b.n	8008e56 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8008e4c:	68fb      	ldr	r3, [r7, #12]
 8008e4e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008e50:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008e52:	6878      	ldr	r0, [r7, #4]
 8008e54:	4798      	blx	r3
}
 8008e56:	bf00      	nop
 8008e58:	3710      	adds	r7, #16
 8008e5a:	46bd      	mov	sp, r7
 8008e5c:	bd80      	pop	{r7, pc}

08008e5e <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8008e5e:	b580      	push	{r7, lr}
 8008e60:	b084      	sub	sp, #16
 8008e62:	af00      	add	r7, sp, #0
 8008e64:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008e66:	687b      	ldr	r3, [r7, #4]
 8008e68:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008e6a:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8008e6c:	68f8      	ldr	r0, [r7, #12]
 8008e6e:	f7f8 fa07 	bl	8001280 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8008e72:	bf00      	nop
 8008e74:	3710      	adds	r7, #16
 8008e76:	46bd      	mov	sp, r7
 8008e78:	bd80      	pop	{r7, pc}

08008e7a <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8008e7a:	b580      	push	{r7, lr}
 8008e7c:	b084      	sub	sp, #16
 8008e7e:	af00      	add	r7, sp, #0
 8008e80:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008e82:	687b      	ldr	r3, [r7, #4]
 8008e84:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008e86:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8008e88:	68fb      	ldr	r3, [r7, #12]
 8008e8a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008e8c:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8008e90:	68fb      	ldr	r3, [r7, #12]
 8008e92:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8008e94:	68fb      	ldr	r3, [r7, #12]
 8008e96:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008e98:	f043 0204 	orr.w	r2, r3, #4
 8008e9c:	68fb      	ldr	r3, [r7, #12]
 8008e9e:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8008ea0:	68f8      	ldr	r0, [r7, #12]
 8008ea2:	f7ff f9d2 	bl	800824a <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8008ea6:	bf00      	nop
 8008ea8:	3710      	adds	r7, #16
 8008eaa:	46bd      	mov	sp, r7
 8008eac:	bd80      	pop	{r7, pc}

08008eae <LL_ADC_IsEnabled>:
{
 8008eae:	b480      	push	{r7}
 8008eb0:	b083      	sub	sp, #12
 8008eb2:	af00      	add	r7, sp, #0
 8008eb4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8008eb6:	687b      	ldr	r3, [r7, #4]
 8008eb8:	689b      	ldr	r3, [r3, #8]
 8008eba:	f003 0301 	and.w	r3, r3, #1
 8008ebe:	2b01      	cmp	r3, #1
 8008ec0:	d101      	bne.n	8008ec6 <LL_ADC_IsEnabled+0x18>
 8008ec2:	2301      	movs	r3, #1
 8008ec4:	e000      	b.n	8008ec8 <LL_ADC_IsEnabled+0x1a>
 8008ec6:	2300      	movs	r3, #0
}
 8008ec8:	4618      	mov	r0, r3
 8008eca:	370c      	adds	r7, #12
 8008ecc:	46bd      	mov	sp, r7
 8008ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ed2:	4770      	bx	lr

08008ed4 <LL_ADC_REG_IsConversionOngoing>:
{
 8008ed4:	b480      	push	{r7}
 8008ed6:	b083      	sub	sp, #12
 8008ed8:	af00      	add	r7, sp, #0
 8008eda:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8008edc:	687b      	ldr	r3, [r7, #4]
 8008ede:	689b      	ldr	r3, [r3, #8]
 8008ee0:	f003 0304 	and.w	r3, r3, #4
 8008ee4:	2b04      	cmp	r3, #4
 8008ee6:	d101      	bne.n	8008eec <LL_ADC_REG_IsConversionOngoing+0x18>
 8008ee8:	2301      	movs	r3, #1
 8008eea:	e000      	b.n	8008eee <LL_ADC_REG_IsConversionOngoing+0x1a>
 8008eec:	2300      	movs	r3, #0
}
 8008eee:	4618      	mov	r0, r3
 8008ef0:	370c      	adds	r7, #12
 8008ef2:	46bd      	mov	sp, r7
 8008ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ef8:	4770      	bx	lr
	...

08008efc <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 8008efc:	b590      	push	{r4, r7, lr}
 8008efe:	b09f      	sub	sp, #124	@ 0x7c
 8008f00:	af00      	add	r7, sp, #0
 8008f02:	6078      	str	r0, [r7, #4]
 8008f04:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8008f06:	2300      	movs	r3, #0
 8008f08:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8008f0c:	687b      	ldr	r3, [r7, #4]
 8008f0e:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8008f12:	2b01      	cmp	r3, #1
 8008f14:	d101      	bne.n	8008f1a <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8008f16:	2302      	movs	r3, #2
 8008f18:	e093      	b.n	8009042 <HAL_ADCEx_MultiModeConfigChannel+0x146>
 8008f1a:	687b      	ldr	r3, [r7, #4]
 8008f1c:	2201      	movs	r2, #1
 8008f1e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 8008f22:	2300      	movs	r3, #0
 8008f24:	65fb      	str	r3, [r7, #92]	@ 0x5c
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 8008f26:	2300      	movs	r3, #0
 8008f28:	663b      	str	r3, [r7, #96]	@ 0x60

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 8008f2a:	687b      	ldr	r3, [r7, #4]
 8008f2c:	681b      	ldr	r3, [r3, #0]
 8008f2e:	4a47      	ldr	r2, [pc, #284]	@ (800904c <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8008f30:	4293      	cmp	r3, r2
 8008f32:	d102      	bne.n	8008f3a <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8008f34:	4b46      	ldr	r3, [pc, #280]	@ (8009050 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8008f36:	60bb      	str	r3, [r7, #8]
 8008f38:	e001      	b.n	8008f3e <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8008f3a:	2300      	movs	r3, #0
 8008f3c:	60bb      	str	r3, [r7, #8]

  if (tmp_hadc_slave.Instance == NULL)
 8008f3e:	68bb      	ldr	r3, [r7, #8]
 8008f40:	2b00      	cmp	r3, #0
 8008f42:	d10b      	bne.n	8008f5c <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8008f44:	687b      	ldr	r3, [r7, #4]
 8008f46:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008f48:	f043 0220 	orr.w	r2, r3, #32
 8008f4c:	687b      	ldr	r3, [r7, #4]
 8008f4e:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8008f50:	687b      	ldr	r3, [r7, #4]
 8008f52:	2200      	movs	r2, #0
 8008f54:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    return HAL_ERROR;
 8008f58:	2301      	movs	r3, #1
 8008f5a:	e072      	b.n	8009042 <HAL_ADCEx_MultiModeConfigChannel+0x146>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 8008f5c:	68bb      	ldr	r3, [r7, #8]
 8008f5e:	4618      	mov	r0, r3
 8008f60:	f7ff ffb8 	bl	8008ed4 <LL_ADC_REG_IsConversionOngoing>
 8008f64:	6738      	str	r0, [r7, #112]	@ 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8008f66:	687b      	ldr	r3, [r7, #4]
 8008f68:	681b      	ldr	r3, [r3, #0]
 8008f6a:	4618      	mov	r0, r3
 8008f6c:	f7ff ffb2 	bl	8008ed4 <LL_ADC_REG_IsConversionOngoing>
 8008f70:	4603      	mov	r3, r0
 8008f72:	2b00      	cmp	r3, #0
 8008f74:	d154      	bne.n	8009020 <HAL_ADCEx_MultiModeConfigChannel+0x124>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 8008f76:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8008f78:	2b00      	cmp	r3, #0
 8008f7a:	d151      	bne.n	8009020 <HAL_ADCEx_MultiModeConfigChannel+0x124>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8008f7c:	4b35      	ldr	r3, [pc, #212]	@ (8009054 <HAL_ADCEx_MultiModeConfigChannel+0x158>)
 8008f7e:	66fb      	str	r3, [r7, #108]	@ 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8008f80:	683b      	ldr	r3, [r7, #0]
 8008f82:	681b      	ldr	r3, [r3, #0]
 8008f84:	2b00      	cmp	r3, #0
 8008f86:	d02c      	beq.n	8008fe2 <HAL_ADCEx_MultiModeConfigChannel+0xe6>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8008f88:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008f8a:	689b      	ldr	r3, [r3, #8]
 8008f8c:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8008f90:	683b      	ldr	r3, [r7, #0]
 8008f92:	6859      	ldr	r1, [r3, #4]
 8008f94:	687b      	ldr	r3, [r7, #4]
 8008f96:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8008f9a:	035b      	lsls	r3, r3, #13
 8008f9c:	430b      	orrs	r3, r1
 8008f9e:	431a      	orrs	r2, r3
 8008fa0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008fa2:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8008fa4:	4829      	ldr	r0, [pc, #164]	@ (800904c <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8008fa6:	f7ff ff82 	bl	8008eae <LL_ADC_IsEnabled>
 8008faa:	4604      	mov	r4, r0
 8008fac:	4828      	ldr	r0, [pc, #160]	@ (8009050 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8008fae:	f7ff ff7e 	bl	8008eae <LL_ADC_IsEnabled>
 8008fb2:	4603      	mov	r3, r0
 8008fb4:	431c      	orrs	r4, r3
 8008fb6:	4828      	ldr	r0, [pc, #160]	@ (8009058 <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 8008fb8:	f7ff ff79 	bl	8008eae <LL_ADC_IsEnabled>
 8008fbc:	4603      	mov	r3, r0
 8008fbe:	4323      	orrs	r3, r4
 8008fc0:	2b00      	cmp	r3, #0
 8008fc2:	d137      	bne.n	8009034 <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8008fc4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008fc6:	689b      	ldr	r3, [r3, #8]
 8008fc8:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8008fcc:	f023 030f 	bic.w	r3, r3, #15
 8008fd0:	683a      	ldr	r2, [r7, #0]
 8008fd2:	6811      	ldr	r1, [r2, #0]
 8008fd4:	683a      	ldr	r2, [r7, #0]
 8008fd6:	6892      	ldr	r2, [r2, #8]
 8008fd8:	430a      	orrs	r2, r1
 8008fda:	431a      	orrs	r2, r3
 8008fdc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008fde:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8008fe0:	e028      	b.n	8009034 <HAL_ADCEx_MultiModeConfigChannel+0x138>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8008fe2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008fe4:	689b      	ldr	r3, [r3, #8]
 8008fe6:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8008fea:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008fec:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8008fee:	4817      	ldr	r0, [pc, #92]	@ (800904c <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8008ff0:	f7ff ff5d 	bl	8008eae <LL_ADC_IsEnabled>
 8008ff4:	4604      	mov	r4, r0
 8008ff6:	4816      	ldr	r0, [pc, #88]	@ (8009050 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8008ff8:	f7ff ff59 	bl	8008eae <LL_ADC_IsEnabled>
 8008ffc:	4603      	mov	r3, r0
 8008ffe:	431c      	orrs	r4, r3
 8009000:	4815      	ldr	r0, [pc, #84]	@ (8009058 <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 8009002:	f7ff ff54 	bl	8008eae <LL_ADC_IsEnabled>
 8009006:	4603      	mov	r3, r0
 8009008:	4323      	orrs	r3, r4
 800900a:	2b00      	cmp	r3, #0
 800900c:	d112      	bne.n	8009034 <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 800900e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009010:	689b      	ldr	r3, [r3, #8]
 8009012:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8009016:	f023 030f 	bic.w	r3, r3, #15
 800901a:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800901c:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 800901e:	e009      	b.n	8009034 <HAL_ADCEx_MultiModeConfigChannel+0x138>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8009020:	687b      	ldr	r3, [r7, #4]
 8009022:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009024:	f043 0220 	orr.w	r2, r3, #32
 8009028:	687b      	ldr	r3, [r7, #4]
 800902a:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 800902c:	2301      	movs	r3, #1
 800902e:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
 8009032:	e000      	b.n	8009036 <HAL_ADCEx_MultiModeConfigChannel+0x13a>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8009034:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8009036:	687b      	ldr	r3, [r7, #4]
 8009038:	2200      	movs	r2, #0
 800903a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 800903e:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
}
 8009042:	4618      	mov	r0, r3
 8009044:	377c      	adds	r7, #124	@ 0x7c
 8009046:	46bd      	mov	sp, r7
 8009048:	bd90      	pop	{r4, r7, pc}
 800904a:	bf00      	nop
 800904c:	50040000 	.word	0x50040000
 8009050:	50040100 	.word	0x50040100
 8009054:	50040300 	.word	0x50040300
 8009058:	50040200 	.word	0x50040200

0800905c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800905c:	b480      	push	{r7}
 800905e:	b085      	sub	sp, #20
 8009060:	af00      	add	r7, sp, #0
 8009062:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8009064:	687b      	ldr	r3, [r7, #4]
 8009066:	f003 0307 	and.w	r3, r3, #7
 800906a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800906c:	4b0c      	ldr	r3, [pc, #48]	@ (80090a0 <__NVIC_SetPriorityGrouping+0x44>)
 800906e:	68db      	ldr	r3, [r3, #12]
 8009070:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8009072:	68ba      	ldr	r2, [r7, #8]
 8009074:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8009078:	4013      	ands	r3, r2
 800907a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800907c:	68fb      	ldr	r3, [r7, #12]
 800907e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8009080:	68bb      	ldr	r3, [r7, #8]
 8009082:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8009084:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8009088:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800908c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800908e:	4a04      	ldr	r2, [pc, #16]	@ (80090a0 <__NVIC_SetPriorityGrouping+0x44>)
 8009090:	68bb      	ldr	r3, [r7, #8]
 8009092:	60d3      	str	r3, [r2, #12]
}
 8009094:	bf00      	nop
 8009096:	3714      	adds	r7, #20
 8009098:	46bd      	mov	sp, r7
 800909a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800909e:	4770      	bx	lr
 80090a0:	e000ed00 	.word	0xe000ed00

080090a4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80090a4:	b480      	push	{r7}
 80090a6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80090a8:	4b04      	ldr	r3, [pc, #16]	@ (80090bc <__NVIC_GetPriorityGrouping+0x18>)
 80090aa:	68db      	ldr	r3, [r3, #12]
 80090ac:	0a1b      	lsrs	r3, r3, #8
 80090ae:	f003 0307 	and.w	r3, r3, #7
}
 80090b2:	4618      	mov	r0, r3
 80090b4:	46bd      	mov	sp, r7
 80090b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090ba:	4770      	bx	lr
 80090bc:	e000ed00 	.word	0xe000ed00

080090c0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80090c0:	b480      	push	{r7}
 80090c2:	b083      	sub	sp, #12
 80090c4:	af00      	add	r7, sp, #0
 80090c6:	4603      	mov	r3, r0
 80090c8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80090ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80090ce:	2b00      	cmp	r3, #0
 80090d0:	db0b      	blt.n	80090ea <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80090d2:	79fb      	ldrb	r3, [r7, #7]
 80090d4:	f003 021f 	and.w	r2, r3, #31
 80090d8:	4907      	ldr	r1, [pc, #28]	@ (80090f8 <__NVIC_EnableIRQ+0x38>)
 80090da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80090de:	095b      	lsrs	r3, r3, #5
 80090e0:	2001      	movs	r0, #1
 80090e2:	fa00 f202 	lsl.w	r2, r0, r2
 80090e6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80090ea:	bf00      	nop
 80090ec:	370c      	adds	r7, #12
 80090ee:	46bd      	mov	sp, r7
 80090f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090f4:	4770      	bx	lr
 80090f6:	bf00      	nop
 80090f8:	e000e100 	.word	0xe000e100

080090fc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80090fc:	b480      	push	{r7}
 80090fe:	b083      	sub	sp, #12
 8009100:	af00      	add	r7, sp, #0
 8009102:	4603      	mov	r3, r0
 8009104:	6039      	str	r1, [r7, #0]
 8009106:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8009108:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800910c:	2b00      	cmp	r3, #0
 800910e:	db0a      	blt.n	8009126 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8009110:	683b      	ldr	r3, [r7, #0]
 8009112:	b2da      	uxtb	r2, r3
 8009114:	490c      	ldr	r1, [pc, #48]	@ (8009148 <__NVIC_SetPriority+0x4c>)
 8009116:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800911a:	0112      	lsls	r2, r2, #4
 800911c:	b2d2      	uxtb	r2, r2
 800911e:	440b      	add	r3, r1
 8009120:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8009124:	e00a      	b.n	800913c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8009126:	683b      	ldr	r3, [r7, #0]
 8009128:	b2da      	uxtb	r2, r3
 800912a:	4908      	ldr	r1, [pc, #32]	@ (800914c <__NVIC_SetPriority+0x50>)
 800912c:	79fb      	ldrb	r3, [r7, #7]
 800912e:	f003 030f 	and.w	r3, r3, #15
 8009132:	3b04      	subs	r3, #4
 8009134:	0112      	lsls	r2, r2, #4
 8009136:	b2d2      	uxtb	r2, r2
 8009138:	440b      	add	r3, r1
 800913a:	761a      	strb	r2, [r3, #24]
}
 800913c:	bf00      	nop
 800913e:	370c      	adds	r7, #12
 8009140:	46bd      	mov	sp, r7
 8009142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009146:	4770      	bx	lr
 8009148:	e000e100 	.word	0xe000e100
 800914c:	e000ed00 	.word	0xe000ed00

08009150 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8009150:	b480      	push	{r7}
 8009152:	b089      	sub	sp, #36	@ 0x24
 8009154:	af00      	add	r7, sp, #0
 8009156:	60f8      	str	r0, [r7, #12]
 8009158:	60b9      	str	r1, [r7, #8]
 800915a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800915c:	68fb      	ldr	r3, [r7, #12]
 800915e:	f003 0307 	and.w	r3, r3, #7
 8009162:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8009164:	69fb      	ldr	r3, [r7, #28]
 8009166:	f1c3 0307 	rsb	r3, r3, #7
 800916a:	2b04      	cmp	r3, #4
 800916c:	bf28      	it	cs
 800916e:	2304      	movcs	r3, #4
 8009170:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8009172:	69fb      	ldr	r3, [r7, #28]
 8009174:	3304      	adds	r3, #4
 8009176:	2b06      	cmp	r3, #6
 8009178:	d902      	bls.n	8009180 <NVIC_EncodePriority+0x30>
 800917a:	69fb      	ldr	r3, [r7, #28]
 800917c:	3b03      	subs	r3, #3
 800917e:	e000      	b.n	8009182 <NVIC_EncodePriority+0x32>
 8009180:	2300      	movs	r3, #0
 8009182:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8009184:	f04f 32ff 	mov.w	r2, #4294967295
 8009188:	69bb      	ldr	r3, [r7, #24]
 800918a:	fa02 f303 	lsl.w	r3, r2, r3
 800918e:	43da      	mvns	r2, r3
 8009190:	68bb      	ldr	r3, [r7, #8]
 8009192:	401a      	ands	r2, r3
 8009194:	697b      	ldr	r3, [r7, #20]
 8009196:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8009198:	f04f 31ff 	mov.w	r1, #4294967295
 800919c:	697b      	ldr	r3, [r7, #20]
 800919e:	fa01 f303 	lsl.w	r3, r1, r3
 80091a2:	43d9      	mvns	r1, r3
 80091a4:	687b      	ldr	r3, [r7, #4]
 80091a6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80091a8:	4313      	orrs	r3, r2
         );
}
 80091aa:	4618      	mov	r0, r3
 80091ac:	3724      	adds	r7, #36	@ 0x24
 80091ae:	46bd      	mov	sp, r7
 80091b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091b4:	4770      	bx	lr
	...

080091b8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80091b8:	b580      	push	{r7, lr}
 80091ba:	b082      	sub	sp, #8
 80091bc:	af00      	add	r7, sp, #0
 80091be:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80091c0:	687b      	ldr	r3, [r7, #4]
 80091c2:	3b01      	subs	r3, #1
 80091c4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80091c8:	d301      	bcc.n	80091ce <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80091ca:	2301      	movs	r3, #1
 80091cc:	e00f      	b.n	80091ee <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80091ce:	4a0a      	ldr	r2, [pc, #40]	@ (80091f8 <SysTick_Config+0x40>)
 80091d0:	687b      	ldr	r3, [r7, #4]
 80091d2:	3b01      	subs	r3, #1
 80091d4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80091d6:	210f      	movs	r1, #15
 80091d8:	f04f 30ff 	mov.w	r0, #4294967295
 80091dc:	f7ff ff8e 	bl	80090fc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80091e0:	4b05      	ldr	r3, [pc, #20]	@ (80091f8 <SysTick_Config+0x40>)
 80091e2:	2200      	movs	r2, #0
 80091e4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80091e6:	4b04      	ldr	r3, [pc, #16]	@ (80091f8 <SysTick_Config+0x40>)
 80091e8:	2207      	movs	r2, #7
 80091ea:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80091ec:	2300      	movs	r3, #0
}
 80091ee:	4618      	mov	r0, r3
 80091f0:	3708      	adds	r7, #8
 80091f2:	46bd      	mov	sp, r7
 80091f4:	bd80      	pop	{r7, pc}
 80091f6:	bf00      	nop
 80091f8:	e000e010 	.word	0xe000e010

080091fc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80091fc:	b580      	push	{r7, lr}
 80091fe:	b082      	sub	sp, #8
 8009200:	af00      	add	r7, sp, #0
 8009202:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8009204:	6878      	ldr	r0, [r7, #4]
 8009206:	f7ff ff29 	bl	800905c <__NVIC_SetPriorityGrouping>
}
 800920a:	bf00      	nop
 800920c:	3708      	adds	r7, #8
 800920e:	46bd      	mov	sp, r7
 8009210:	bd80      	pop	{r7, pc}

08009212 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8009212:	b580      	push	{r7, lr}
 8009214:	b086      	sub	sp, #24
 8009216:	af00      	add	r7, sp, #0
 8009218:	4603      	mov	r3, r0
 800921a:	60b9      	str	r1, [r7, #8]
 800921c:	607a      	str	r2, [r7, #4]
 800921e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8009220:	2300      	movs	r3, #0
 8009222:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8009224:	f7ff ff3e 	bl	80090a4 <__NVIC_GetPriorityGrouping>
 8009228:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800922a:	687a      	ldr	r2, [r7, #4]
 800922c:	68b9      	ldr	r1, [r7, #8]
 800922e:	6978      	ldr	r0, [r7, #20]
 8009230:	f7ff ff8e 	bl	8009150 <NVIC_EncodePriority>
 8009234:	4602      	mov	r2, r0
 8009236:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800923a:	4611      	mov	r1, r2
 800923c:	4618      	mov	r0, r3
 800923e:	f7ff ff5d 	bl	80090fc <__NVIC_SetPriority>
}
 8009242:	bf00      	nop
 8009244:	3718      	adds	r7, #24
 8009246:	46bd      	mov	sp, r7
 8009248:	bd80      	pop	{r7, pc}

0800924a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800924a:	b580      	push	{r7, lr}
 800924c:	b082      	sub	sp, #8
 800924e:	af00      	add	r7, sp, #0
 8009250:	4603      	mov	r3, r0
 8009252:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8009254:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009258:	4618      	mov	r0, r3
 800925a:	f7ff ff31 	bl	80090c0 <__NVIC_EnableIRQ>
}
 800925e:	bf00      	nop
 8009260:	3708      	adds	r7, #8
 8009262:	46bd      	mov	sp, r7
 8009264:	bd80      	pop	{r7, pc}

08009266 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8009266:	b580      	push	{r7, lr}
 8009268:	b082      	sub	sp, #8
 800926a:	af00      	add	r7, sp, #0
 800926c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800926e:	6878      	ldr	r0, [r7, #4]
 8009270:	f7ff ffa2 	bl	80091b8 <SysTick_Config>
 8009274:	4603      	mov	r3, r0
}
 8009276:	4618      	mov	r0, r3
 8009278:	3708      	adds	r7, #8
 800927a:	46bd      	mov	sp, r7
 800927c:	bd80      	pop	{r7, pc}
	...

08009280 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8009280:	b580      	push	{r7, lr}
 8009282:	b082      	sub	sp, #8
 8009284:	af00      	add	r7, sp, #0
 8009286:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8009288:	687b      	ldr	r3, [r7, #4]
 800928a:	2b00      	cmp	r3, #0
 800928c:	d101      	bne.n	8009292 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 800928e:	2301      	movs	r3, #1
 8009290:	e054      	b.n	800933c <HAL_CRC_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8009292:	687b      	ldr	r3, [r7, #4]
 8009294:	7f5b      	ldrb	r3, [r3, #29]
 8009296:	b2db      	uxtb	r3, r3
 8009298:	2b00      	cmp	r3, #0
 800929a:	d105      	bne.n	80092a8 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 800929c:	687b      	ldr	r3, [r7, #4]
 800929e:	2200      	movs	r2, #0
 80092a0:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 80092a2:	6878      	ldr	r0, [r7, #4]
 80092a4:	f7fa fe3e 	bl	8003f24 <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 80092a8:	687b      	ldr	r3, [r7, #4]
 80092aa:	2202      	movs	r2, #2
 80092ac:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 80092ae:	687b      	ldr	r3, [r7, #4]
 80092b0:	791b      	ldrb	r3, [r3, #4]
 80092b2:	2b00      	cmp	r3, #0
 80092b4:	d10c      	bne.n	80092d0 <HAL_CRC_Init+0x50>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 80092b6:	687b      	ldr	r3, [r7, #4]
 80092b8:	681b      	ldr	r3, [r3, #0]
 80092ba:	4a22      	ldr	r2, [pc, #136]	@ (8009344 <HAL_CRC_Init+0xc4>)
 80092bc:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 80092be:	687b      	ldr	r3, [r7, #4]
 80092c0:	681b      	ldr	r3, [r3, #0]
 80092c2:	689a      	ldr	r2, [r3, #8]
 80092c4:	687b      	ldr	r3, [r7, #4]
 80092c6:	681b      	ldr	r3, [r3, #0]
 80092c8:	f022 0218 	bic.w	r2, r2, #24
 80092cc:	609a      	str	r2, [r3, #8]
 80092ce:	e00c      	b.n	80092ea <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 80092d0:	687b      	ldr	r3, [r7, #4]
 80092d2:	6899      	ldr	r1, [r3, #8]
 80092d4:	687b      	ldr	r3, [r7, #4]
 80092d6:	68db      	ldr	r3, [r3, #12]
 80092d8:	461a      	mov	r2, r3
 80092da:	6878      	ldr	r0, [r7, #4]
 80092dc:	f000 f834 	bl	8009348 <HAL_CRCEx_Polynomial_Set>
 80092e0:	4603      	mov	r3, r0
 80092e2:	2b00      	cmp	r3, #0
 80092e4:	d001      	beq.n	80092ea <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 80092e6:	2301      	movs	r3, #1
 80092e8:	e028      	b.n	800933c <HAL_CRC_Init+0xbc>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 80092ea:	687b      	ldr	r3, [r7, #4]
 80092ec:	795b      	ldrb	r3, [r3, #5]
 80092ee:	2b00      	cmp	r3, #0
 80092f0:	d105      	bne.n	80092fe <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 80092f2:	687b      	ldr	r3, [r7, #4]
 80092f4:	681b      	ldr	r3, [r3, #0]
 80092f6:	f04f 32ff 	mov.w	r2, #4294967295
 80092fa:	611a      	str	r2, [r3, #16]
 80092fc:	e004      	b.n	8009308 <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 80092fe:	687b      	ldr	r3, [r7, #4]
 8009300:	681b      	ldr	r3, [r3, #0]
 8009302:	687a      	ldr	r2, [r7, #4]
 8009304:	6912      	ldr	r2, [r2, #16]
 8009306:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 8009308:	687b      	ldr	r3, [r7, #4]
 800930a:	681b      	ldr	r3, [r3, #0]
 800930c:	689b      	ldr	r3, [r3, #8]
 800930e:	f023 0160 	bic.w	r1, r3, #96	@ 0x60
 8009312:	687b      	ldr	r3, [r7, #4]
 8009314:	695a      	ldr	r2, [r3, #20]
 8009316:	687b      	ldr	r3, [r7, #4]
 8009318:	681b      	ldr	r3, [r3, #0]
 800931a:	430a      	orrs	r2, r1
 800931c:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 800931e:	687b      	ldr	r3, [r7, #4]
 8009320:	681b      	ldr	r3, [r3, #0]
 8009322:	689b      	ldr	r3, [r3, #8]
 8009324:	f023 0180 	bic.w	r1, r3, #128	@ 0x80
 8009328:	687b      	ldr	r3, [r7, #4]
 800932a:	699a      	ldr	r2, [r3, #24]
 800932c:	687b      	ldr	r3, [r7, #4]
 800932e:	681b      	ldr	r3, [r3, #0]
 8009330:	430a      	orrs	r2, r1
 8009332:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8009334:	687b      	ldr	r3, [r7, #4]
 8009336:	2201      	movs	r2, #1
 8009338:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 800933a:	2300      	movs	r3, #0
}
 800933c:	4618      	mov	r0, r3
 800933e:	3708      	adds	r7, #8
 8009340:	46bd      	mov	sp, r7
 8009342:	bd80      	pop	{r7, pc}
 8009344:	04c11db7 	.word	0x04c11db7

08009348 <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 8009348:	b480      	push	{r7}
 800934a:	b087      	sub	sp, #28
 800934c:	af00      	add	r7, sp, #0
 800934e:	60f8      	str	r0, [r7, #12]
 8009350:	60b9      	str	r1, [r7, #8]
 8009352:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8009354:	2300      	movs	r3, #0
 8009356:	75fb      	strb	r3, [r7, #23]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 8009358:	231f      	movs	r3, #31
 800935a:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_CRC_POL_LENGTH(PolyLength));

  /* Ensure that the generating polynomial is odd */
  if ((Pol & (uint32_t)(0x1U)) ==  0U)
 800935c:	68bb      	ldr	r3, [r7, #8]
 800935e:	f003 0301 	and.w	r3, r3, #1
 8009362:	2b00      	cmp	r3, #0
 8009364:	d102      	bne.n	800936c <HAL_CRCEx_Polynomial_Set+0x24>
  {
    status =  HAL_ERROR;
 8009366:	2301      	movs	r3, #1
 8009368:	75fb      	strb	r3, [r7, #23]
 800936a:	e063      	b.n	8009434 <HAL_CRCEx_Polynomial_Set+0xec>
     * definition. HAL_ERROR is reported if Pol degree is
     * larger than that indicated by PolyLength.
     * Look for MSB position: msb will contain the degree of
     *  the second to the largest polynomial member. E.g., for
     *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
    while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 800936c:	bf00      	nop
 800936e:	693b      	ldr	r3, [r7, #16]
 8009370:	1e5a      	subs	r2, r3, #1
 8009372:	613a      	str	r2, [r7, #16]
 8009374:	2b00      	cmp	r3, #0
 8009376:	d009      	beq.n	800938c <HAL_CRCEx_Polynomial_Set+0x44>
 8009378:	693b      	ldr	r3, [r7, #16]
 800937a:	f003 031f 	and.w	r3, r3, #31
 800937e:	68ba      	ldr	r2, [r7, #8]
 8009380:	fa22 f303 	lsr.w	r3, r2, r3
 8009384:	f003 0301 	and.w	r3, r3, #1
 8009388:	2b00      	cmp	r3, #0
 800938a:	d0f0      	beq.n	800936e <HAL_CRCEx_Polynomial_Set+0x26>
    {
    }

    switch (PolyLength)
 800938c:	687b      	ldr	r3, [r7, #4]
 800938e:	2b18      	cmp	r3, #24
 8009390:	d846      	bhi.n	8009420 <HAL_CRCEx_Polynomial_Set+0xd8>
 8009392:	a201      	add	r2, pc, #4	@ (adr r2, 8009398 <HAL_CRCEx_Polynomial_Set+0x50>)
 8009394:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009398:	08009427 	.word	0x08009427
 800939c:	08009421 	.word	0x08009421
 80093a0:	08009421 	.word	0x08009421
 80093a4:	08009421 	.word	0x08009421
 80093a8:	08009421 	.word	0x08009421
 80093ac:	08009421 	.word	0x08009421
 80093b0:	08009421 	.word	0x08009421
 80093b4:	08009421 	.word	0x08009421
 80093b8:	08009415 	.word	0x08009415
 80093bc:	08009421 	.word	0x08009421
 80093c0:	08009421 	.word	0x08009421
 80093c4:	08009421 	.word	0x08009421
 80093c8:	08009421 	.word	0x08009421
 80093cc:	08009421 	.word	0x08009421
 80093d0:	08009421 	.word	0x08009421
 80093d4:	08009421 	.word	0x08009421
 80093d8:	08009409 	.word	0x08009409
 80093dc:	08009421 	.word	0x08009421
 80093e0:	08009421 	.word	0x08009421
 80093e4:	08009421 	.word	0x08009421
 80093e8:	08009421 	.word	0x08009421
 80093ec:	08009421 	.word	0x08009421
 80093f0:	08009421 	.word	0x08009421
 80093f4:	08009421 	.word	0x08009421
 80093f8:	080093fd 	.word	0x080093fd
    {

      case CRC_POLYLENGTH_7B:
        if (msb >= HAL_CRC_LENGTH_7B)
 80093fc:	693b      	ldr	r3, [r7, #16]
 80093fe:	2b06      	cmp	r3, #6
 8009400:	d913      	bls.n	800942a <HAL_CRCEx_Polynomial_Set+0xe2>
        {
          status =   HAL_ERROR;
 8009402:	2301      	movs	r3, #1
 8009404:	75fb      	strb	r3, [r7, #23]
        }
        break;
 8009406:	e010      	b.n	800942a <HAL_CRCEx_Polynomial_Set+0xe2>
      case CRC_POLYLENGTH_8B:
        if (msb >= HAL_CRC_LENGTH_8B)
 8009408:	693b      	ldr	r3, [r7, #16]
 800940a:	2b07      	cmp	r3, #7
 800940c:	d90f      	bls.n	800942e <HAL_CRCEx_Polynomial_Set+0xe6>
        {
          status =   HAL_ERROR;
 800940e:	2301      	movs	r3, #1
 8009410:	75fb      	strb	r3, [r7, #23]
        }
        break;
 8009412:	e00c      	b.n	800942e <HAL_CRCEx_Polynomial_Set+0xe6>
      case CRC_POLYLENGTH_16B:
        if (msb >= HAL_CRC_LENGTH_16B)
 8009414:	693b      	ldr	r3, [r7, #16]
 8009416:	2b0f      	cmp	r3, #15
 8009418:	d90b      	bls.n	8009432 <HAL_CRCEx_Polynomial_Set+0xea>
        {
          status =   HAL_ERROR;
 800941a:	2301      	movs	r3, #1
 800941c:	75fb      	strb	r3, [r7, #23]
        }
        break;
 800941e:	e008      	b.n	8009432 <HAL_CRCEx_Polynomial_Set+0xea>

      case CRC_POLYLENGTH_32B:
        /* no polynomial definition vs. polynomial length issue possible */
        break;
      default:
        status =  HAL_ERROR;
 8009420:	2301      	movs	r3, #1
 8009422:	75fb      	strb	r3, [r7, #23]
        break;
 8009424:	e006      	b.n	8009434 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 8009426:	bf00      	nop
 8009428:	e004      	b.n	8009434 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 800942a:	bf00      	nop
 800942c:	e002      	b.n	8009434 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 800942e:	bf00      	nop
 8009430:	e000      	b.n	8009434 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 8009432:	bf00      	nop
    }
  }
  if (status == HAL_OK)
 8009434:	7dfb      	ldrb	r3, [r7, #23]
 8009436:	2b00      	cmp	r3, #0
 8009438:	d10d      	bne.n	8009456 <HAL_CRCEx_Polynomial_Set+0x10e>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 800943a:	68fb      	ldr	r3, [r7, #12]
 800943c:	681b      	ldr	r3, [r3, #0]
 800943e:	68ba      	ldr	r2, [r7, #8]
 8009440:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 8009442:	68fb      	ldr	r3, [r7, #12]
 8009444:	681b      	ldr	r3, [r3, #0]
 8009446:	689b      	ldr	r3, [r3, #8]
 8009448:	f023 0118 	bic.w	r1, r3, #24
 800944c:	68fb      	ldr	r3, [r7, #12]
 800944e:	681b      	ldr	r3, [r3, #0]
 8009450:	687a      	ldr	r2, [r7, #4]
 8009452:	430a      	orrs	r2, r1
 8009454:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 8009456:	7dfb      	ldrb	r3, [r7, #23]
}
 8009458:	4618      	mov	r0, r3
 800945a:	371c      	adds	r7, #28
 800945c:	46bd      	mov	sp, r7
 800945e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009462:	4770      	bx	lr

08009464 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8009464:	b480      	push	{r7}
 8009466:	b085      	sub	sp, #20
 8009468:	af00      	add	r7, sp, #0
 800946a:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 800946c:	687b      	ldr	r3, [r7, #4]
 800946e:	2b00      	cmp	r3, #0
 8009470:	d101      	bne.n	8009476 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8009472:	2301      	movs	r3, #1
 8009474:	e098      	b.n	80095a8 <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8009476:	687b      	ldr	r3, [r7, #4]
 8009478:	681b      	ldr	r3, [r3, #0]
 800947a:	461a      	mov	r2, r3
 800947c:	4b4d      	ldr	r3, [pc, #308]	@ (80095b4 <HAL_DMA_Init+0x150>)
 800947e:	429a      	cmp	r2, r3
 8009480:	d80f      	bhi.n	80094a2 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8009482:	687b      	ldr	r3, [r7, #4]
 8009484:	681b      	ldr	r3, [r3, #0]
 8009486:	461a      	mov	r2, r3
 8009488:	4b4b      	ldr	r3, [pc, #300]	@ (80095b8 <HAL_DMA_Init+0x154>)
 800948a:	4413      	add	r3, r2
 800948c:	4a4b      	ldr	r2, [pc, #300]	@ (80095bc <HAL_DMA_Init+0x158>)
 800948e:	fba2 2303 	umull	r2, r3, r2, r3
 8009492:	091b      	lsrs	r3, r3, #4
 8009494:	009a      	lsls	r2, r3, #2
 8009496:	687b      	ldr	r3, [r7, #4]
 8009498:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 800949a:	687b      	ldr	r3, [r7, #4]
 800949c:	4a48      	ldr	r2, [pc, #288]	@ (80095c0 <HAL_DMA_Init+0x15c>)
 800949e:	641a      	str	r2, [r3, #64]	@ 0x40
 80094a0:	e00e      	b.n	80094c0 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 80094a2:	687b      	ldr	r3, [r7, #4]
 80094a4:	681b      	ldr	r3, [r3, #0]
 80094a6:	461a      	mov	r2, r3
 80094a8:	4b46      	ldr	r3, [pc, #280]	@ (80095c4 <HAL_DMA_Init+0x160>)
 80094aa:	4413      	add	r3, r2
 80094ac:	4a43      	ldr	r2, [pc, #268]	@ (80095bc <HAL_DMA_Init+0x158>)
 80094ae:	fba2 2303 	umull	r2, r3, r2, r3
 80094b2:	091b      	lsrs	r3, r3, #4
 80094b4:	009a      	lsls	r2, r3, #2
 80094b6:	687b      	ldr	r3, [r7, #4]
 80094b8:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 80094ba:	687b      	ldr	r3, [r7, #4]
 80094bc:	4a42      	ldr	r2, [pc, #264]	@ (80095c8 <HAL_DMA_Init+0x164>)
 80094be:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80094c0:	687b      	ldr	r3, [r7, #4]
 80094c2:	2202      	movs	r2, #2
 80094c4:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80094c8:	687b      	ldr	r3, [r7, #4]
 80094ca:	681b      	ldr	r3, [r3, #0]
 80094cc:	681b      	ldr	r3, [r3, #0]
 80094ce:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 80094d0:	68fb      	ldr	r3, [r7, #12]
 80094d2:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 80094d6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80094da:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80094dc:	687b      	ldr	r3, [r7, #4]
 80094de:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80094e0:	687b      	ldr	r3, [r7, #4]
 80094e2:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 80094e4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80094e6:	687b      	ldr	r3, [r7, #4]
 80094e8:	691b      	ldr	r3, [r3, #16]
 80094ea:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80094ec:	687b      	ldr	r3, [r7, #4]
 80094ee:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80094f0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80094f2:	687b      	ldr	r3, [r7, #4]
 80094f4:	699b      	ldr	r3, [r3, #24]
 80094f6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80094f8:	687b      	ldr	r3, [r7, #4]
 80094fa:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80094fc:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80094fe:	687b      	ldr	r3, [r7, #4]
 8009500:	6a1b      	ldr	r3, [r3, #32]
 8009502:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8009504:	68fa      	ldr	r2, [r7, #12]
 8009506:	4313      	orrs	r3, r2
 8009508:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800950a:	687b      	ldr	r3, [r7, #4]
 800950c:	681b      	ldr	r3, [r3, #0]
 800950e:	68fa      	ldr	r2, [r7, #12]
 8009510:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if (hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 8009512:	687b      	ldr	r3, [r7, #4]
 8009514:	689b      	ldr	r3, [r3, #8]
 8009516:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800951a:	d039      	beq.n	8009590 <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 800951c:	687b      	ldr	r3, [r7, #4]
 800951e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009520:	4a27      	ldr	r2, [pc, #156]	@ (80095c0 <HAL_DMA_Init+0x15c>)
 8009522:	4293      	cmp	r3, r2
 8009524:	d11a      	bne.n	800955c <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8009526:	4b29      	ldr	r3, [pc, #164]	@ (80095cc <HAL_DMA_Init+0x168>)
 8009528:	681a      	ldr	r2, [r3, #0]
 800952a:	687b      	ldr	r3, [r7, #4]
 800952c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800952e:	f003 031c 	and.w	r3, r3, #28
 8009532:	210f      	movs	r1, #15
 8009534:	fa01 f303 	lsl.w	r3, r1, r3
 8009538:	43db      	mvns	r3, r3
 800953a:	4924      	ldr	r1, [pc, #144]	@ (80095cc <HAL_DMA_Init+0x168>)
 800953c:	4013      	ands	r3, r2
 800953e:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8009540:	4b22      	ldr	r3, [pc, #136]	@ (80095cc <HAL_DMA_Init+0x168>)
 8009542:	681a      	ldr	r2, [r3, #0]
 8009544:	687b      	ldr	r3, [r7, #4]
 8009546:	6859      	ldr	r1, [r3, #4]
 8009548:	687b      	ldr	r3, [r7, #4]
 800954a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800954c:	f003 031c 	and.w	r3, r3, #28
 8009550:	fa01 f303 	lsl.w	r3, r1, r3
 8009554:	491d      	ldr	r1, [pc, #116]	@ (80095cc <HAL_DMA_Init+0x168>)
 8009556:	4313      	orrs	r3, r2
 8009558:	600b      	str	r3, [r1, #0]
 800955a:	e019      	b.n	8009590 <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 800955c:	4b1c      	ldr	r3, [pc, #112]	@ (80095d0 <HAL_DMA_Init+0x16c>)
 800955e:	681a      	ldr	r2, [r3, #0]
 8009560:	687b      	ldr	r3, [r7, #4]
 8009562:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009564:	f003 031c 	and.w	r3, r3, #28
 8009568:	210f      	movs	r1, #15
 800956a:	fa01 f303 	lsl.w	r3, r1, r3
 800956e:	43db      	mvns	r3, r3
 8009570:	4917      	ldr	r1, [pc, #92]	@ (80095d0 <HAL_DMA_Init+0x16c>)
 8009572:	4013      	ands	r3, r2
 8009574:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8009576:	4b16      	ldr	r3, [pc, #88]	@ (80095d0 <HAL_DMA_Init+0x16c>)
 8009578:	681a      	ldr	r2, [r3, #0]
 800957a:	687b      	ldr	r3, [r7, #4]
 800957c:	6859      	ldr	r1, [r3, #4]
 800957e:	687b      	ldr	r3, [r7, #4]
 8009580:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009582:	f003 031c 	and.w	r3, r3, #28
 8009586:	fa01 f303 	lsl.w	r3, r1, r3
 800958a:	4911      	ldr	r1, [pc, #68]	@ (80095d0 <HAL_DMA_Init+0x16c>)
 800958c:	4313      	orrs	r3, r2
 800958e:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
  /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
  /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8009590:	687b      	ldr	r3, [r7, #4]
 8009592:	2200      	movs	r2, #0
 8009594:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8009596:	687b      	ldr	r3, [r7, #4]
 8009598:	2201      	movs	r2, #1
 800959a:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 800959e:	687b      	ldr	r3, [r7, #4]
 80095a0:	2200      	movs	r2, #0
 80095a2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 80095a6:	2300      	movs	r3, #0
}
 80095a8:	4618      	mov	r0, r3
 80095aa:	3714      	adds	r7, #20
 80095ac:	46bd      	mov	sp, r7
 80095ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095b2:	4770      	bx	lr
 80095b4:	40020407 	.word	0x40020407
 80095b8:	bffdfff8 	.word	0xbffdfff8
 80095bc:	cccccccd 	.word	0xcccccccd
 80095c0:	40020000 	.word	0x40020000
 80095c4:	bffdfbf8 	.word	0xbffdfbf8
 80095c8:	40020400 	.word	0x40020400
 80095cc:	400200a8 	.word	0x400200a8
 80095d0:	400204a8 	.word	0x400204a8

080095d4 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80095d4:	b580      	push	{r7, lr}
 80095d6:	b086      	sub	sp, #24
 80095d8:	af00      	add	r7, sp, #0
 80095da:	60f8      	str	r0, [r7, #12]
 80095dc:	60b9      	str	r1, [r7, #8]
 80095de:	607a      	str	r2, [r7, #4]
 80095e0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80095e2:	2300      	movs	r3, #0
 80095e4:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80095e6:	68fb      	ldr	r3, [r7, #12]
 80095e8:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80095ec:	2b01      	cmp	r3, #1
 80095ee:	d101      	bne.n	80095f4 <HAL_DMA_Start_IT+0x20>
 80095f0:	2302      	movs	r3, #2
 80095f2:	e04b      	b.n	800968c <HAL_DMA_Start_IT+0xb8>
 80095f4:	68fb      	ldr	r3, [r7, #12]
 80095f6:	2201      	movs	r2, #1
 80095f8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 80095fc:	68fb      	ldr	r3, [r7, #12]
 80095fe:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8009602:	b2db      	uxtb	r3, r3
 8009604:	2b01      	cmp	r3, #1
 8009606:	d13a      	bne.n	800967e <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8009608:	68fb      	ldr	r3, [r7, #12]
 800960a:	2202      	movs	r2, #2
 800960c:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8009610:	68fb      	ldr	r3, [r7, #12]
 8009612:	2200      	movs	r2, #0
 8009614:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8009616:	68fb      	ldr	r3, [r7, #12]
 8009618:	681b      	ldr	r3, [r3, #0]
 800961a:	681a      	ldr	r2, [r3, #0]
 800961c:	68fb      	ldr	r3, [r7, #12]
 800961e:	681b      	ldr	r3, [r3, #0]
 8009620:	f022 0201 	bic.w	r2, r2, #1
 8009624:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8009626:	683b      	ldr	r3, [r7, #0]
 8009628:	687a      	ldr	r2, [r7, #4]
 800962a:	68b9      	ldr	r1, [r7, #8]
 800962c:	68f8      	ldr	r0, [r7, #12]
 800962e:	f000 f91e 	bl	800986e <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8009632:	68fb      	ldr	r3, [r7, #12]
 8009634:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009636:	2b00      	cmp	r3, #0
 8009638:	d008      	beq.n	800964c <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800963a:	68fb      	ldr	r3, [r7, #12]
 800963c:	681b      	ldr	r3, [r3, #0]
 800963e:	681a      	ldr	r2, [r3, #0]
 8009640:	68fb      	ldr	r3, [r7, #12]
 8009642:	681b      	ldr	r3, [r3, #0]
 8009644:	f042 020e 	orr.w	r2, r2, #14
 8009648:	601a      	str	r2, [r3, #0]
 800964a:	e00f      	b.n	800966c <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800964c:	68fb      	ldr	r3, [r7, #12]
 800964e:	681b      	ldr	r3, [r3, #0]
 8009650:	681a      	ldr	r2, [r3, #0]
 8009652:	68fb      	ldr	r3, [r7, #12]
 8009654:	681b      	ldr	r3, [r3, #0]
 8009656:	f022 0204 	bic.w	r2, r2, #4
 800965a:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 800965c:	68fb      	ldr	r3, [r7, #12]
 800965e:	681b      	ldr	r3, [r3, #0]
 8009660:	681a      	ldr	r2, [r3, #0]
 8009662:	68fb      	ldr	r3, [r7, #12]
 8009664:	681b      	ldr	r3, [r3, #0]
 8009666:	f042 020a 	orr.w	r2, r2, #10
 800966a:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800966c:	68fb      	ldr	r3, [r7, #12]
 800966e:	681b      	ldr	r3, [r3, #0]
 8009670:	681a      	ldr	r2, [r3, #0]
 8009672:	68fb      	ldr	r3, [r7, #12]
 8009674:	681b      	ldr	r3, [r3, #0]
 8009676:	f042 0201 	orr.w	r2, r2, #1
 800967a:	601a      	str	r2, [r3, #0]
 800967c:	e005      	b.n	800968a <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800967e:	68fb      	ldr	r3, [r7, #12]
 8009680:	2200      	movs	r2, #0
 8009682:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8009686:	2302      	movs	r3, #2
 8009688:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 800968a:	7dfb      	ldrb	r3, [r7, #23]
}
 800968c:	4618      	mov	r0, r3
 800968e:	3718      	adds	r7, #24
 8009690:	46bd      	mov	sp, r7
 8009692:	bd80      	pop	{r7, pc}

08009694 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8009694:	b480      	push	{r7}
 8009696:	b085      	sub	sp, #20
 8009698:	af00      	add	r7, sp, #0
 800969a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800969c:	2300      	movs	r3, #0
 800969e:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 80096a0:	687b      	ldr	r3, [r7, #4]
 80096a2:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80096a6:	b2db      	uxtb	r3, r3
 80096a8:	2b02      	cmp	r3, #2
 80096aa:	d008      	beq.n	80096be <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80096ac:	687b      	ldr	r3, [r7, #4]
 80096ae:	2204      	movs	r2, #4
 80096b0:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80096b2:	687b      	ldr	r3, [r7, #4]
 80096b4:	2200      	movs	r2, #0
 80096b6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 80096ba:	2301      	movs	r3, #1
 80096bc:	e022      	b.n	8009704 <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80096be:	687b      	ldr	r3, [r7, #4]
 80096c0:	681b      	ldr	r3, [r3, #0]
 80096c2:	681a      	ldr	r2, [r3, #0]
 80096c4:	687b      	ldr	r3, [r7, #4]
 80096c6:	681b      	ldr	r3, [r3, #0]
 80096c8:	f022 020e 	bic.w	r2, r2, #14
 80096cc:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80096ce:	687b      	ldr	r3, [r7, #4]
 80096d0:	681b      	ldr	r3, [r3, #0]
 80096d2:	681a      	ldr	r2, [r3, #0]
 80096d4:	687b      	ldr	r3, [r7, #4]
 80096d6:	681b      	ldr	r3, [r3, #0]
 80096d8:	f022 0201 	bic.w	r2, r2, #1
 80096dc:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80096de:	687b      	ldr	r3, [r7, #4]
 80096e0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80096e2:	f003 021c 	and.w	r2, r3, #28
 80096e6:	687b      	ldr	r3, [r7, #4]
 80096e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80096ea:	2101      	movs	r1, #1
 80096ec:	fa01 f202 	lsl.w	r2, r1, r2
 80096f0:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80096f2:	687b      	ldr	r3, [r7, #4]
 80096f4:	2201      	movs	r2, #1
 80096f6:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80096fa:	687b      	ldr	r3, [r7, #4]
 80096fc:	2200      	movs	r2, #0
 80096fe:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return status;
 8009702:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8009704:	4618      	mov	r0, r3
 8009706:	3714      	adds	r7, #20
 8009708:	46bd      	mov	sp, r7
 800970a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800970e:	4770      	bx	lr

08009710 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8009710:	b580      	push	{r7, lr}
 8009712:	b084      	sub	sp, #16
 8009714:	af00      	add	r7, sp, #0
 8009716:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8009718:	687b      	ldr	r3, [r7, #4]
 800971a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800971c:	681b      	ldr	r3, [r3, #0]
 800971e:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8009720:	687b      	ldr	r3, [r7, #4]
 8009722:	681b      	ldr	r3, [r3, #0]
 8009724:	681b      	ldr	r3, [r3, #0]
 8009726:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8009728:	687b      	ldr	r3, [r7, #4]
 800972a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800972c:	f003 031c 	and.w	r3, r3, #28
 8009730:	2204      	movs	r2, #4
 8009732:	409a      	lsls	r2, r3
 8009734:	68fb      	ldr	r3, [r7, #12]
 8009736:	4013      	ands	r3, r2
 8009738:	2b00      	cmp	r3, #0
 800973a:	d026      	beq.n	800978a <HAL_DMA_IRQHandler+0x7a>
 800973c:	68bb      	ldr	r3, [r7, #8]
 800973e:	f003 0304 	and.w	r3, r3, #4
 8009742:	2b00      	cmp	r3, #0
 8009744:	d021      	beq.n	800978a <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8009746:	687b      	ldr	r3, [r7, #4]
 8009748:	681b      	ldr	r3, [r3, #0]
 800974a:	681b      	ldr	r3, [r3, #0]
 800974c:	f003 0320 	and.w	r3, r3, #32
 8009750:	2b00      	cmp	r3, #0
 8009752:	d107      	bne.n	8009764 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8009754:	687b      	ldr	r3, [r7, #4]
 8009756:	681b      	ldr	r3, [r3, #0]
 8009758:	681a      	ldr	r2, [r3, #0]
 800975a:	687b      	ldr	r3, [r7, #4]
 800975c:	681b      	ldr	r3, [r3, #0]
 800975e:	f022 0204 	bic.w	r2, r2, #4
 8009762:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8009764:	687b      	ldr	r3, [r7, #4]
 8009766:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009768:	f003 021c 	and.w	r2, r3, #28
 800976c:	687b      	ldr	r3, [r7, #4]
 800976e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009770:	2104      	movs	r1, #4
 8009772:	fa01 f202 	lsl.w	r2, r1, r2
 8009776:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8009778:	687b      	ldr	r3, [r7, #4]
 800977a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800977c:	2b00      	cmp	r3, #0
 800977e:	d071      	beq.n	8009864 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8009780:	687b      	ldr	r3, [r7, #4]
 8009782:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009784:	6878      	ldr	r0, [r7, #4]
 8009786:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8009788:	e06c      	b.n	8009864 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 800978a:	687b      	ldr	r3, [r7, #4]
 800978c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800978e:	f003 031c 	and.w	r3, r3, #28
 8009792:	2202      	movs	r2, #2
 8009794:	409a      	lsls	r2, r3
 8009796:	68fb      	ldr	r3, [r7, #12]
 8009798:	4013      	ands	r3, r2
 800979a:	2b00      	cmp	r3, #0
 800979c:	d02e      	beq.n	80097fc <HAL_DMA_IRQHandler+0xec>
 800979e:	68bb      	ldr	r3, [r7, #8]
 80097a0:	f003 0302 	and.w	r3, r3, #2
 80097a4:	2b00      	cmp	r3, #0
 80097a6:	d029      	beq.n	80097fc <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80097a8:	687b      	ldr	r3, [r7, #4]
 80097aa:	681b      	ldr	r3, [r3, #0]
 80097ac:	681b      	ldr	r3, [r3, #0]
 80097ae:	f003 0320 	and.w	r3, r3, #32
 80097b2:	2b00      	cmp	r3, #0
 80097b4:	d10b      	bne.n	80097ce <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80097b6:	687b      	ldr	r3, [r7, #4]
 80097b8:	681b      	ldr	r3, [r3, #0]
 80097ba:	681a      	ldr	r2, [r3, #0]
 80097bc:	687b      	ldr	r3, [r7, #4]
 80097be:	681b      	ldr	r3, [r3, #0]
 80097c0:	f022 020a 	bic.w	r2, r2, #10
 80097c4:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80097c6:	687b      	ldr	r3, [r7, #4]
 80097c8:	2201      	movs	r2, #1
 80097ca:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 80097ce:	687b      	ldr	r3, [r7, #4]
 80097d0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80097d2:	f003 021c 	and.w	r2, r3, #28
 80097d6:	687b      	ldr	r3, [r7, #4]
 80097d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80097da:	2102      	movs	r1, #2
 80097dc:	fa01 f202 	lsl.w	r2, r1, r2
 80097e0:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80097e2:	687b      	ldr	r3, [r7, #4]
 80097e4:	2200      	movs	r2, #0
 80097e6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 80097ea:	687b      	ldr	r3, [r7, #4]
 80097ec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80097ee:	2b00      	cmp	r3, #0
 80097f0:	d038      	beq.n	8009864 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80097f2:	687b      	ldr	r3, [r7, #4]
 80097f4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80097f6:	6878      	ldr	r0, [r7, #4]
 80097f8:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 80097fa:	e033      	b.n	8009864 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 80097fc:	687b      	ldr	r3, [r7, #4]
 80097fe:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009800:	f003 031c 	and.w	r3, r3, #28
 8009804:	2208      	movs	r2, #8
 8009806:	409a      	lsls	r2, r3
 8009808:	68fb      	ldr	r3, [r7, #12]
 800980a:	4013      	ands	r3, r2
 800980c:	2b00      	cmp	r3, #0
 800980e:	d02a      	beq.n	8009866 <HAL_DMA_IRQHandler+0x156>
 8009810:	68bb      	ldr	r3, [r7, #8]
 8009812:	f003 0308 	and.w	r3, r3, #8
 8009816:	2b00      	cmp	r3, #0
 8009818:	d025      	beq.n	8009866 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800981a:	687b      	ldr	r3, [r7, #4]
 800981c:	681b      	ldr	r3, [r3, #0]
 800981e:	681a      	ldr	r2, [r3, #0]
 8009820:	687b      	ldr	r3, [r7, #4]
 8009822:	681b      	ldr	r3, [r3, #0]
 8009824:	f022 020e 	bic.w	r2, r2, #14
 8009828:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800982a:	687b      	ldr	r3, [r7, #4]
 800982c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800982e:	f003 021c 	and.w	r2, r3, #28
 8009832:	687b      	ldr	r3, [r7, #4]
 8009834:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009836:	2101      	movs	r1, #1
 8009838:	fa01 f202 	lsl.w	r2, r1, r2
 800983c:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800983e:	687b      	ldr	r3, [r7, #4]
 8009840:	2201      	movs	r2, #1
 8009842:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8009844:	687b      	ldr	r3, [r7, #4]
 8009846:	2201      	movs	r2, #1
 8009848:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800984c:	687b      	ldr	r3, [r7, #4]
 800984e:	2200      	movs	r2, #0
 8009850:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 8009854:	687b      	ldr	r3, [r7, #4]
 8009856:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009858:	2b00      	cmp	r3, #0
 800985a:	d004      	beq.n	8009866 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800985c:	687b      	ldr	r3, [r7, #4]
 800985e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009860:	6878      	ldr	r0, [r7, #4]
 8009862:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8009864:	bf00      	nop
 8009866:	bf00      	nop
}
 8009868:	3710      	adds	r7, #16
 800986a:	46bd      	mov	sp, r7
 800986c:	bd80      	pop	{r7, pc}

0800986e <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800986e:	b480      	push	{r7}
 8009870:	b085      	sub	sp, #20
 8009872:	af00      	add	r7, sp, #0
 8009874:	60f8      	str	r0, [r7, #12]
 8009876:	60b9      	str	r1, [r7, #8]
 8009878:	607a      	str	r2, [r7, #4]
 800987a:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800987c:	68fb      	ldr	r3, [r7, #12]
 800987e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009880:	f003 021c 	and.w	r2, r3, #28
 8009884:	68fb      	ldr	r3, [r7, #12]
 8009886:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009888:	2101      	movs	r1, #1
 800988a:	fa01 f202 	lsl.w	r2, r1, r2
 800988e:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8009890:	68fb      	ldr	r3, [r7, #12]
 8009892:	681b      	ldr	r3, [r3, #0]
 8009894:	683a      	ldr	r2, [r7, #0]
 8009896:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8009898:	68fb      	ldr	r3, [r7, #12]
 800989a:	689b      	ldr	r3, [r3, #8]
 800989c:	2b10      	cmp	r3, #16
 800989e:	d108      	bne.n	80098b2 <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80098a0:	68fb      	ldr	r3, [r7, #12]
 80098a2:	681b      	ldr	r3, [r3, #0]
 80098a4:	687a      	ldr	r2, [r7, #4]
 80098a6:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80098a8:	68fb      	ldr	r3, [r7, #12]
 80098aa:	681b      	ldr	r3, [r3, #0]
 80098ac:	68ba      	ldr	r2, [r7, #8]
 80098ae:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80098b0:	e007      	b.n	80098c2 <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 80098b2:	68fb      	ldr	r3, [r7, #12]
 80098b4:	681b      	ldr	r3, [r3, #0]
 80098b6:	68ba      	ldr	r2, [r7, #8]
 80098b8:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80098ba:	68fb      	ldr	r3, [r7, #12]
 80098bc:	681b      	ldr	r3, [r3, #0]
 80098be:	687a      	ldr	r2, [r7, #4]
 80098c0:	60da      	str	r2, [r3, #12]
}
 80098c2:	bf00      	nop
 80098c4:	3714      	adds	r7, #20
 80098c6:	46bd      	mov	sp, r7
 80098c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098cc:	4770      	bx	lr
	...

080098d0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80098d0:	b480      	push	{r7}
 80098d2:	b087      	sub	sp, #28
 80098d4:	af00      	add	r7, sp, #0
 80098d6:	6078      	str	r0, [r7, #4]
 80098d8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80098da:	2300      	movs	r3, #0
 80098dc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80098de:	e17f      	b.n	8009be0 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80098e0:	683b      	ldr	r3, [r7, #0]
 80098e2:	681a      	ldr	r2, [r3, #0]
 80098e4:	2101      	movs	r1, #1
 80098e6:	697b      	ldr	r3, [r7, #20]
 80098e8:	fa01 f303 	lsl.w	r3, r1, r3
 80098ec:	4013      	ands	r3, r2
 80098ee:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80098f0:	68fb      	ldr	r3, [r7, #12]
 80098f2:	2b00      	cmp	r3, #0
 80098f4:	f000 8171 	beq.w	8009bda <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80098f8:	683b      	ldr	r3, [r7, #0]
 80098fa:	685b      	ldr	r3, [r3, #4]
 80098fc:	f003 0303 	and.w	r3, r3, #3
 8009900:	2b01      	cmp	r3, #1
 8009902:	d005      	beq.n	8009910 <HAL_GPIO_Init+0x40>
 8009904:	683b      	ldr	r3, [r7, #0]
 8009906:	685b      	ldr	r3, [r3, #4]
 8009908:	f003 0303 	and.w	r3, r3, #3
 800990c:	2b02      	cmp	r3, #2
 800990e:	d130      	bne.n	8009972 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8009910:	687b      	ldr	r3, [r7, #4]
 8009912:	689b      	ldr	r3, [r3, #8]
 8009914:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8009916:	697b      	ldr	r3, [r7, #20]
 8009918:	005b      	lsls	r3, r3, #1
 800991a:	2203      	movs	r2, #3
 800991c:	fa02 f303 	lsl.w	r3, r2, r3
 8009920:	43db      	mvns	r3, r3
 8009922:	693a      	ldr	r2, [r7, #16]
 8009924:	4013      	ands	r3, r2
 8009926:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8009928:	683b      	ldr	r3, [r7, #0]
 800992a:	68da      	ldr	r2, [r3, #12]
 800992c:	697b      	ldr	r3, [r7, #20]
 800992e:	005b      	lsls	r3, r3, #1
 8009930:	fa02 f303 	lsl.w	r3, r2, r3
 8009934:	693a      	ldr	r2, [r7, #16]
 8009936:	4313      	orrs	r3, r2
 8009938:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800993a:	687b      	ldr	r3, [r7, #4]
 800993c:	693a      	ldr	r2, [r7, #16]
 800993e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8009940:	687b      	ldr	r3, [r7, #4]
 8009942:	685b      	ldr	r3, [r3, #4]
 8009944:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8009946:	2201      	movs	r2, #1
 8009948:	697b      	ldr	r3, [r7, #20]
 800994a:	fa02 f303 	lsl.w	r3, r2, r3
 800994e:	43db      	mvns	r3, r3
 8009950:	693a      	ldr	r2, [r7, #16]
 8009952:	4013      	ands	r3, r2
 8009954:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8009956:	683b      	ldr	r3, [r7, #0]
 8009958:	685b      	ldr	r3, [r3, #4]
 800995a:	091b      	lsrs	r3, r3, #4
 800995c:	f003 0201 	and.w	r2, r3, #1
 8009960:	697b      	ldr	r3, [r7, #20]
 8009962:	fa02 f303 	lsl.w	r3, r2, r3
 8009966:	693a      	ldr	r2, [r7, #16]
 8009968:	4313      	orrs	r3, r2
 800996a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800996c:	687b      	ldr	r3, [r7, #4]
 800996e:	693a      	ldr	r2, [r7, #16]
 8009970:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8009972:	683b      	ldr	r3, [r7, #0]
 8009974:	685b      	ldr	r3, [r3, #4]
 8009976:	f003 0303 	and.w	r3, r3, #3
 800997a:	2b03      	cmp	r3, #3
 800997c:	d118      	bne.n	80099b0 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 800997e:	687b      	ldr	r3, [r7, #4]
 8009980:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009982:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8009984:	2201      	movs	r2, #1
 8009986:	697b      	ldr	r3, [r7, #20]
 8009988:	fa02 f303 	lsl.w	r3, r2, r3
 800998c:	43db      	mvns	r3, r3
 800998e:	693a      	ldr	r2, [r7, #16]
 8009990:	4013      	ands	r3, r2
 8009992:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8009994:	683b      	ldr	r3, [r7, #0]
 8009996:	685b      	ldr	r3, [r3, #4]
 8009998:	08db      	lsrs	r3, r3, #3
 800999a:	f003 0201 	and.w	r2, r3, #1
 800999e:	697b      	ldr	r3, [r7, #20]
 80099a0:	fa02 f303 	lsl.w	r3, r2, r3
 80099a4:	693a      	ldr	r2, [r7, #16]
 80099a6:	4313      	orrs	r3, r2
 80099a8:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 80099aa:	687b      	ldr	r3, [r7, #4]
 80099ac:	693a      	ldr	r2, [r7, #16]
 80099ae:	62da      	str	r2, [r3, #44]	@ 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80099b0:	683b      	ldr	r3, [r7, #0]
 80099b2:	685b      	ldr	r3, [r3, #4]
 80099b4:	f003 0303 	and.w	r3, r3, #3
 80099b8:	2b03      	cmp	r3, #3
 80099ba:	d017      	beq.n	80099ec <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 80099bc:	687b      	ldr	r3, [r7, #4]
 80099be:	68db      	ldr	r3, [r3, #12]
 80099c0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80099c2:	697b      	ldr	r3, [r7, #20]
 80099c4:	005b      	lsls	r3, r3, #1
 80099c6:	2203      	movs	r2, #3
 80099c8:	fa02 f303 	lsl.w	r3, r2, r3
 80099cc:	43db      	mvns	r3, r3
 80099ce:	693a      	ldr	r2, [r7, #16]
 80099d0:	4013      	ands	r3, r2
 80099d2:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80099d4:	683b      	ldr	r3, [r7, #0]
 80099d6:	689a      	ldr	r2, [r3, #8]
 80099d8:	697b      	ldr	r3, [r7, #20]
 80099da:	005b      	lsls	r3, r3, #1
 80099dc:	fa02 f303 	lsl.w	r3, r2, r3
 80099e0:	693a      	ldr	r2, [r7, #16]
 80099e2:	4313      	orrs	r3, r2
 80099e4:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80099e6:	687b      	ldr	r3, [r7, #4]
 80099e8:	693a      	ldr	r2, [r7, #16]
 80099ea:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80099ec:	683b      	ldr	r3, [r7, #0]
 80099ee:	685b      	ldr	r3, [r3, #4]
 80099f0:	f003 0303 	and.w	r3, r3, #3
 80099f4:	2b02      	cmp	r3, #2
 80099f6:	d123      	bne.n	8009a40 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80099f8:	697b      	ldr	r3, [r7, #20]
 80099fa:	08da      	lsrs	r2, r3, #3
 80099fc:	687b      	ldr	r3, [r7, #4]
 80099fe:	3208      	adds	r2, #8
 8009a00:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009a04:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8009a06:	697b      	ldr	r3, [r7, #20]
 8009a08:	f003 0307 	and.w	r3, r3, #7
 8009a0c:	009b      	lsls	r3, r3, #2
 8009a0e:	220f      	movs	r2, #15
 8009a10:	fa02 f303 	lsl.w	r3, r2, r3
 8009a14:	43db      	mvns	r3, r3
 8009a16:	693a      	ldr	r2, [r7, #16]
 8009a18:	4013      	ands	r3, r2
 8009a1a:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8009a1c:	683b      	ldr	r3, [r7, #0]
 8009a1e:	691a      	ldr	r2, [r3, #16]
 8009a20:	697b      	ldr	r3, [r7, #20]
 8009a22:	f003 0307 	and.w	r3, r3, #7
 8009a26:	009b      	lsls	r3, r3, #2
 8009a28:	fa02 f303 	lsl.w	r3, r2, r3
 8009a2c:	693a      	ldr	r2, [r7, #16]
 8009a2e:	4313      	orrs	r3, r2
 8009a30:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8009a32:	697b      	ldr	r3, [r7, #20]
 8009a34:	08da      	lsrs	r2, r3, #3
 8009a36:	687b      	ldr	r3, [r7, #4]
 8009a38:	3208      	adds	r2, #8
 8009a3a:	6939      	ldr	r1, [r7, #16]
 8009a3c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8009a40:	687b      	ldr	r3, [r7, #4]
 8009a42:	681b      	ldr	r3, [r3, #0]
 8009a44:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8009a46:	697b      	ldr	r3, [r7, #20]
 8009a48:	005b      	lsls	r3, r3, #1
 8009a4a:	2203      	movs	r2, #3
 8009a4c:	fa02 f303 	lsl.w	r3, r2, r3
 8009a50:	43db      	mvns	r3, r3
 8009a52:	693a      	ldr	r2, [r7, #16]
 8009a54:	4013      	ands	r3, r2
 8009a56:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8009a58:	683b      	ldr	r3, [r7, #0]
 8009a5a:	685b      	ldr	r3, [r3, #4]
 8009a5c:	f003 0203 	and.w	r2, r3, #3
 8009a60:	697b      	ldr	r3, [r7, #20]
 8009a62:	005b      	lsls	r3, r3, #1
 8009a64:	fa02 f303 	lsl.w	r3, r2, r3
 8009a68:	693a      	ldr	r2, [r7, #16]
 8009a6a:	4313      	orrs	r3, r2
 8009a6c:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8009a6e:	687b      	ldr	r3, [r7, #4]
 8009a70:	693a      	ldr	r2, [r7, #16]
 8009a72:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8009a74:	683b      	ldr	r3, [r7, #0]
 8009a76:	685b      	ldr	r3, [r3, #4]
 8009a78:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8009a7c:	2b00      	cmp	r3, #0
 8009a7e:	f000 80ac 	beq.w	8009bda <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8009a82:	4b5f      	ldr	r3, [pc, #380]	@ (8009c00 <HAL_GPIO_Init+0x330>)
 8009a84:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009a86:	4a5e      	ldr	r2, [pc, #376]	@ (8009c00 <HAL_GPIO_Init+0x330>)
 8009a88:	f043 0301 	orr.w	r3, r3, #1
 8009a8c:	6613      	str	r3, [r2, #96]	@ 0x60
 8009a8e:	4b5c      	ldr	r3, [pc, #368]	@ (8009c00 <HAL_GPIO_Init+0x330>)
 8009a90:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009a92:	f003 0301 	and.w	r3, r3, #1
 8009a96:	60bb      	str	r3, [r7, #8]
 8009a98:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8009a9a:	4a5a      	ldr	r2, [pc, #360]	@ (8009c04 <HAL_GPIO_Init+0x334>)
 8009a9c:	697b      	ldr	r3, [r7, #20]
 8009a9e:	089b      	lsrs	r3, r3, #2
 8009aa0:	3302      	adds	r3, #2
 8009aa2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009aa6:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8009aa8:	697b      	ldr	r3, [r7, #20]
 8009aaa:	f003 0303 	and.w	r3, r3, #3
 8009aae:	009b      	lsls	r3, r3, #2
 8009ab0:	220f      	movs	r2, #15
 8009ab2:	fa02 f303 	lsl.w	r3, r2, r3
 8009ab6:	43db      	mvns	r3, r3
 8009ab8:	693a      	ldr	r2, [r7, #16]
 8009aba:	4013      	ands	r3, r2
 8009abc:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8009abe:	687b      	ldr	r3, [r7, #4]
 8009ac0:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8009ac4:	d025      	beq.n	8009b12 <HAL_GPIO_Init+0x242>
 8009ac6:	687b      	ldr	r3, [r7, #4]
 8009ac8:	4a4f      	ldr	r2, [pc, #316]	@ (8009c08 <HAL_GPIO_Init+0x338>)
 8009aca:	4293      	cmp	r3, r2
 8009acc:	d01f      	beq.n	8009b0e <HAL_GPIO_Init+0x23e>
 8009ace:	687b      	ldr	r3, [r7, #4]
 8009ad0:	4a4e      	ldr	r2, [pc, #312]	@ (8009c0c <HAL_GPIO_Init+0x33c>)
 8009ad2:	4293      	cmp	r3, r2
 8009ad4:	d019      	beq.n	8009b0a <HAL_GPIO_Init+0x23a>
 8009ad6:	687b      	ldr	r3, [r7, #4]
 8009ad8:	4a4d      	ldr	r2, [pc, #308]	@ (8009c10 <HAL_GPIO_Init+0x340>)
 8009ada:	4293      	cmp	r3, r2
 8009adc:	d013      	beq.n	8009b06 <HAL_GPIO_Init+0x236>
 8009ade:	687b      	ldr	r3, [r7, #4]
 8009ae0:	4a4c      	ldr	r2, [pc, #304]	@ (8009c14 <HAL_GPIO_Init+0x344>)
 8009ae2:	4293      	cmp	r3, r2
 8009ae4:	d00d      	beq.n	8009b02 <HAL_GPIO_Init+0x232>
 8009ae6:	687b      	ldr	r3, [r7, #4]
 8009ae8:	4a4b      	ldr	r2, [pc, #300]	@ (8009c18 <HAL_GPIO_Init+0x348>)
 8009aea:	4293      	cmp	r3, r2
 8009aec:	d007      	beq.n	8009afe <HAL_GPIO_Init+0x22e>
 8009aee:	687b      	ldr	r3, [r7, #4]
 8009af0:	4a4a      	ldr	r2, [pc, #296]	@ (8009c1c <HAL_GPIO_Init+0x34c>)
 8009af2:	4293      	cmp	r3, r2
 8009af4:	d101      	bne.n	8009afa <HAL_GPIO_Init+0x22a>
 8009af6:	2306      	movs	r3, #6
 8009af8:	e00c      	b.n	8009b14 <HAL_GPIO_Init+0x244>
 8009afa:	2307      	movs	r3, #7
 8009afc:	e00a      	b.n	8009b14 <HAL_GPIO_Init+0x244>
 8009afe:	2305      	movs	r3, #5
 8009b00:	e008      	b.n	8009b14 <HAL_GPIO_Init+0x244>
 8009b02:	2304      	movs	r3, #4
 8009b04:	e006      	b.n	8009b14 <HAL_GPIO_Init+0x244>
 8009b06:	2303      	movs	r3, #3
 8009b08:	e004      	b.n	8009b14 <HAL_GPIO_Init+0x244>
 8009b0a:	2302      	movs	r3, #2
 8009b0c:	e002      	b.n	8009b14 <HAL_GPIO_Init+0x244>
 8009b0e:	2301      	movs	r3, #1
 8009b10:	e000      	b.n	8009b14 <HAL_GPIO_Init+0x244>
 8009b12:	2300      	movs	r3, #0
 8009b14:	697a      	ldr	r2, [r7, #20]
 8009b16:	f002 0203 	and.w	r2, r2, #3
 8009b1a:	0092      	lsls	r2, r2, #2
 8009b1c:	4093      	lsls	r3, r2
 8009b1e:	693a      	ldr	r2, [r7, #16]
 8009b20:	4313      	orrs	r3, r2
 8009b22:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8009b24:	4937      	ldr	r1, [pc, #220]	@ (8009c04 <HAL_GPIO_Init+0x334>)
 8009b26:	697b      	ldr	r3, [r7, #20]
 8009b28:	089b      	lsrs	r3, r3, #2
 8009b2a:	3302      	adds	r3, #2
 8009b2c:	693a      	ldr	r2, [r7, #16]
 8009b2e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8009b32:	4b3b      	ldr	r3, [pc, #236]	@ (8009c20 <HAL_GPIO_Init+0x350>)
 8009b34:	689b      	ldr	r3, [r3, #8]
 8009b36:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8009b38:	68fb      	ldr	r3, [r7, #12]
 8009b3a:	43db      	mvns	r3, r3
 8009b3c:	693a      	ldr	r2, [r7, #16]
 8009b3e:	4013      	ands	r3, r2
 8009b40:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8009b42:	683b      	ldr	r3, [r7, #0]
 8009b44:	685b      	ldr	r3, [r3, #4]
 8009b46:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8009b4a:	2b00      	cmp	r3, #0
 8009b4c:	d003      	beq.n	8009b56 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8009b4e:	693a      	ldr	r2, [r7, #16]
 8009b50:	68fb      	ldr	r3, [r7, #12]
 8009b52:	4313      	orrs	r3, r2
 8009b54:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8009b56:	4a32      	ldr	r2, [pc, #200]	@ (8009c20 <HAL_GPIO_Init+0x350>)
 8009b58:	693b      	ldr	r3, [r7, #16]
 8009b5a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8009b5c:	4b30      	ldr	r3, [pc, #192]	@ (8009c20 <HAL_GPIO_Init+0x350>)
 8009b5e:	68db      	ldr	r3, [r3, #12]
 8009b60:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8009b62:	68fb      	ldr	r3, [r7, #12]
 8009b64:	43db      	mvns	r3, r3
 8009b66:	693a      	ldr	r2, [r7, #16]
 8009b68:	4013      	ands	r3, r2
 8009b6a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8009b6c:	683b      	ldr	r3, [r7, #0]
 8009b6e:	685b      	ldr	r3, [r3, #4]
 8009b70:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8009b74:	2b00      	cmp	r3, #0
 8009b76:	d003      	beq.n	8009b80 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8009b78:	693a      	ldr	r2, [r7, #16]
 8009b7a:	68fb      	ldr	r3, [r7, #12]
 8009b7c:	4313      	orrs	r3, r2
 8009b7e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8009b80:	4a27      	ldr	r2, [pc, #156]	@ (8009c20 <HAL_GPIO_Init+0x350>)
 8009b82:	693b      	ldr	r3, [r7, #16]
 8009b84:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8009b86:	4b26      	ldr	r3, [pc, #152]	@ (8009c20 <HAL_GPIO_Init+0x350>)
 8009b88:	685b      	ldr	r3, [r3, #4]
 8009b8a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8009b8c:	68fb      	ldr	r3, [r7, #12]
 8009b8e:	43db      	mvns	r3, r3
 8009b90:	693a      	ldr	r2, [r7, #16]
 8009b92:	4013      	ands	r3, r2
 8009b94:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8009b96:	683b      	ldr	r3, [r7, #0]
 8009b98:	685b      	ldr	r3, [r3, #4]
 8009b9a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009b9e:	2b00      	cmp	r3, #0
 8009ba0:	d003      	beq.n	8009baa <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8009ba2:	693a      	ldr	r2, [r7, #16]
 8009ba4:	68fb      	ldr	r3, [r7, #12]
 8009ba6:	4313      	orrs	r3, r2
 8009ba8:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8009baa:	4a1d      	ldr	r2, [pc, #116]	@ (8009c20 <HAL_GPIO_Init+0x350>)
 8009bac:	693b      	ldr	r3, [r7, #16]
 8009bae:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8009bb0:	4b1b      	ldr	r3, [pc, #108]	@ (8009c20 <HAL_GPIO_Init+0x350>)
 8009bb2:	681b      	ldr	r3, [r3, #0]
 8009bb4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8009bb6:	68fb      	ldr	r3, [r7, #12]
 8009bb8:	43db      	mvns	r3, r3
 8009bba:	693a      	ldr	r2, [r7, #16]
 8009bbc:	4013      	ands	r3, r2
 8009bbe:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8009bc0:	683b      	ldr	r3, [r7, #0]
 8009bc2:	685b      	ldr	r3, [r3, #4]
 8009bc4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8009bc8:	2b00      	cmp	r3, #0
 8009bca:	d003      	beq.n	8009bd4 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8009bcc:	693a      	ldr	r2, [r7, #16]
 8009bce:	68fb      	ldr	r3, [r7, #12]
 8009bd0:	4313      	orrs	r3, r2
 8009bd2:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8009bd4:	4a12      	ldr	r2, [pc, #72]	@ (8009c20 <HAL_GPIO_Init+0x350>)
 8009bd6:	693b      	ldr	r3, [r7, #16]
 8009bd8:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8009bda:	697b      	ldr	r3, [r7, #20]
 8009bdc:	3301      	adds	r3, #1
 8009bde:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8009be0:	683b      	ldr	r3, [r7, #0]
 8009be2:	681a      	ldr	r2, [r3, #0]
 8009be4:	697b      	ldr	r3, [r7, #20]
 8009be6:	fa22 f303 	lsr.w	r3, r2, r3
 8009bea:	2b00      	cmp	r3, #0
 8009bec:	f47f ae78 	bne.w	80098e0 <HAL_GPIO_Init+0x10>
  }
}
 8009bf0:	bf00      	nop
 8009bf2:	bf00      	nop
 8009bf4:	371c      	adds	r7, #28
 8009bf6:	46bd      	mov	sp, r7
 8009bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bfc:	4770      	bx	lr
 8009bfe:	bf00      	nop
 8009c00:	40021000 	.word	0x40021000
 8009c04:	40010000 	.word	0x40010000
 8009c08:	48000400 	.word	0x48000400
 8009c0c:	48000800 	.word	0x48000800
 8009c10:	48000c00 	.word	0x48000c00
 8009c14:	48001000 	.word	0x48001000
 8009c18:	48001400 	.word	0x48001400
 8009c1c:	48001800 	.word	0x48001800
 8009c20:	40010400 	.word	0x40010400

08009c24 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8009c24:	b480      	push	{r7}
 8009c26:	b083      	sub	sp, #12
 8009c28:	af00      	add	r7, sp, #0
 8009c2a:	6078      	str	r0, [r7, #4]
 8009c2c:	460b      	mov	r3, r1
 8009c2e:	807b      	strh	r3, [r7, #2]
 8009c30:	4613      	mov	r3, r2
 8009c32:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8009c34:	787b      	ldrb	r3, [r7, #1]
 8009c36:	2b00      	cmp	r3, #0
 8009c38:	d003      	beq.n	8009c42 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8009c3a:	887a      	ldrh	r2, [r7, #2]
 8009c3c:	687b      	ldr	r3, [r7, #4]
 8009c3e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8009c40:	e002      	b.n	8009c48 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8009c42:	887a      	ldrh	r2, [r7, #2]
 8009c44:	687b      	ldr	r3, [r7, #4]
 8009c46:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8009c48:	bf00      	nop
 8009c4a:	370c      	adds	r7, #12
 8009c4c:	46bd      	mov	sp, r7
 8009c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c52:	4770      	bx	lr

08009c54 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8009c54:	b580      	push	{r7, lr}
 8009c56:	b082      	sub	sp, #8
 8009c58:	af00      	add	r7, sp, #0
 8009c5a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8009c5c:	687b      	ldr	r3, [r7, #4]
 8009c5e:	2b00      	cmp	r3, #0
 8009c60:	d101      	bne.n	8009c66 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8009c62:	2301      	movs	r3, #1
 8009c64:	e08d      	b.n	8009d82 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8009c66:	687b      	ldr	r3, [r7, #4]
 8009c68:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8009c6c:	b2db      	uxtb	r3, r3
 8009c6e:	2b00      	cmp	r3, #0
 8009c70:	d106      	bne.n	8009c80 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8009c72:	687b      	ldr	r3, [r7, #4]
 8009c74:	2200      	movs	r2, #0
 8009c76:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8009c7a:	6878      	ldr	r0, [r7, #4]
 8009c7c:	f7fa f972 	bl	8003f64 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8009c80:	687b      	ldr	r3, [r7, #4]
 8009c82:	2224      	movs	r2, #36	@ 0x24
 8009c84:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8009c88:	687b      	ldr	r3, [r7, #4]
 8009c8a:	681b      	ldr	r3, [r3, #0]
 8009c8c:	681a      	ldr	r2, [r3, #0]
 8009c8e:	687b      	ldr	r3, [r7, #4]
 8009c90:	681b      	ldr	r3, [r3, #0]
 8009c92:	f022 0201 	bic.w	r2, r2, #1
 8009c96:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8009c98:	687b      	ldr	r3, [r7, #4]
 8009c9a:	685a      	ldr	r2, [r3, #4]
 8009c9c:	687b      	ldr	r3, [r7, #4]
 8009c9e:	681b      	ldr	r3, [r3, #0]
 8009ca0:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8009ca4:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8009ca6:	687b      	ldr	r3, [r7, #4]
 8009ca8:	681b      	ldr	r3, [r3, #0]
 8009caa:	689a      	ldr	r2, [r3, #8]
 8009cac:	687b      	ldr	r3, [r7, #4]
 8009cae:	681b      	ldr	r3, [r3, #0]
 8009cb0:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8009cb4:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8009cb6:	687b      	ldr	r3, [r7, #4]
 8009cb8:	68db      	ldr	r3, [r3, #12]
 8009cba:	2b01      	cmp	r3, #1
 8009cbc:	d107      	bne.n	8009cce <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8009cbe:	687b      	ldr	r3, [r7, #4]
 8009cc0:	689a      	ldr	r2, [r3, #8]
 8009cc2:	687b      	ldr	r3, [r7, #4]
 8009cc4:	681b      	ldr	r3, [r3, #0]
 8009cc6:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8009cca:	609a      	str	r2, [r3, #8]
 8009ccc:	e006      	b.n	8009cdc <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8009cce:	687b      	ldr	r3, [r7, #4]
 8009cd0:	689a      	ldr	r2, [r3, #8]
 8009cd2:	687b      	ldr	r3, [r7, #4]
 8009cd4:	681b      	ldr	r3, [r3, #0]
 8009cd6:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8009cda:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8009cdc:	687b      	ldr	r3, [r7, #4]
 8009cde:	68db      	ldr	r3, [r3, #12]
 8009ce0:	2b02      	cmp	r3, #2
 8009ce2:	d108      	bne.n	8009cf6 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8009ce4:	687b      	ldr	r3, [r7, #4]
 8009ce6:	681b      	ldr	r3, [r3, #0]
 8009ce8:	685a      	ldr	r2, [r3, #4]
 8009cea:	687b      	ldr	r3, [r7, #4]
 8009cec:	681b      	ldr	r3, [r3, #0]
 8009cee:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8009cf2:	605a      	str	r2, [r3, #4]
 8009cf4:	e007      	b.n	8009d06 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8009cf6:	687b      	ldr	r3, [r7, #4]
 8009cf8:	681b      	ldr	r3, [r3, #0]
 8009cfa:	685a      	ldr	r2, [r3, #4]
 8009cfc:	687b      	ldr	r3, [r7, #4]
 8009cfe:	681b      	ldr	r3, [r3, #0]
 8009d00:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8009d04:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8009d06:	687b      	ldr	r3, [r7, #4]
 8009d08:	681b      	ldr	r3, [r3, #0]
 8009d0a:	685b      	ldr	r3, [r3, #4]
 8009d0c:	687a      	ldr	r2, [r7, #4]
 8009d0e:	6812      	ldr	r2, [r2, #0]
 8009d10:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8009d14:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8009d18:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8009d1a:	687b      	ldr	r3, [r7, #4]
 8009d1c:	681b      	ldr	r3, [r3, #0]
 8009d1e:	68da      	ldr	r2, [r3, #12]
 8009d20:	687b      	ldr	r3, [r7, #4]
 8009d22:	681b      	ldr	r3, [r3, #0]
 8009d24:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8009d28:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8009d2a:	687b      	ldr	r3, [r7, #4]
 8009d2c:	691a      	ldr	r2, [r3, #16]
 8009d2e:	687b      	ldr	r3, [r7, #4]
 8009d30:	695b      	ldr	r3, [r3, #20]
 8009d32:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8009d36:	687b      	ldr	r3, [r7, #4]
 8009d38:	699b      	ldr	r3, [r3, #24]
 8009d3a:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8009d3c:	687b      	ldr	r3, [r7, #4]
 8009d3e:	681b      	ldr	r3, [r3, #0]
 8009d40:	430a      	orrs	r2, r1
 8009d42:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8009d44:	687b      	ldr	r3, [r7, #4]
 8009d46:	69d9      	ldr	r1, [r3, #28]
 8009d48:	687b      	ldr	r3, [r7, #4]
 8009d4a:	6a1a      	ldr	r2, [r3, #32]
 8009d4c:	687b      	ldr	r3, [r7, #4]
 8009d4e:	681b      	ldr	r3, [r3, #0]
 8009d50:	430a      	orrs	r2, r1
 8009d52:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8009d54:	687b      	ldr	r3, [r7, #4]
 8009d56:	681b      	ldr	r3, [r3, #0]
 8009d58:	681a      	ldr	r2, [r3, #0]
 8009d5a:	687b      	ldr	r3, [r7, #4]
 8009d5c:	681b      	ldr	r3, [r3, #0]
 8009d5e:	f042 0201 	orr.w	r2, r2, #1
 8009d62:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8009d64:	687b      	ldr	r3, [r7, #4]
 8009d66:	2200      	movs	r2, #0
 8009d68:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8009d6a:	687b      	ldr	r3, [r7, #4]
 8009d6c:	2220      	movs	r2, #32
 8009d6e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8009d72:	687b      	ldr	r3, [r7, #4]
 8009d74:	2200      	movs	r2, #0
 8009d76:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8009d78:	687b      	ldr	r3, [r7, #4]
 8009d7a:	2200      	movs	r2, #0
 8009d7c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8009d80:	2300      	movs	r3, #0
}
 8009d82:	4618      	mov	r0, r3
 8009d84:	3708      	adds	r7, #8
 8009d86:	46bd      	mov	sp, r7
 8009d88:	bd80      	pop	{r7, pc}
	...

08009d8c <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8009d8c:	b580      	push	{r7, lr}
 8009d8e:	b088      	sub	sp, #32
 8009d90:	af02      	add	r7, sp, #8
 8009d92:	60f8      	str	r0, [r7, #12]
 8009d94:	607a      	str	r2, [r7, #4]
 8009d96:	461a      	mov	r2, r3
 8009d98:	460b      	mov	r3, r1
 8009d9a:	817b      	strh	r3, [r7, #10]
 8009d9c:	4613      	mov	r3, r2
 8009d9e:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8009da0:	68fb      	ldr	r3, [r7, #12]
 8009da2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8009da6:	b2db      	uxtb	r3, r3
 8009da8:	2b20      	cmp	r3, #32
 8009daa:	f040 80fd 	bne.w	8009fa8 <HAL_I2C_Master_Transmit+0x21c>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8009dae:	68fb      	ldr	r3, [r7, #12]
 8009db0:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8009db4:	2b01      	cmp	r3, #1
 8009db6:	d101      	bne.n	8009dbc <HAL_I2C_Master_Transmit+0x30>
 8009db8:	2302      	movs	r3, #2
 8009dba:	e0f6      	b.n	8009faa <HAL_I2C_Master_Transmit+0x21e>
 8009dbc:	68fb      	ldr	r3, [r7, #12]
 8009dbe:	2201      	movs	r2, #1
 8009dc0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8009dc4:	f7fd fd80 	bl	80078c8 <HAL_GetTick>
 8009dc8:	6138      	str	r0, [r7, #16]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8009dca:	693b      	ldr	r3, [r7, #16]
 8009dcc:	9300      	str	r3, [sp, #0]
 8009dce:	2319      	movs	r3, #25
 8009dd0:	2201      	movs	r2, #1
 8009dd2:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8009dd6:	68f8      	ldr	r0, [r7, #12]
 8009dd8:	f000 fa0a 	bl	800a1f0 <I2C_WaitOnFlagUntilTimeout>
 8009ddc:	4603      	mov	r3, r0
 8009dde:	2b00      	cmp	r3, #0
 8009de0:	d001      	beq.n	8009de6 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8009de2:	2301      	movs	r3, #1
 8009de4:	e0e1      	b.n	8009faa <HAL_I2C_Master_Transmit+0x21e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8009de6:	68fb      	ldr	r3, [r7, #12]
 8009de8:	2221      	movs	r2, #33	@ 0x21
 8009dea:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8009dee:	68fb      	ldr	r3, [r7, #12]
 8009df0:	2210      	movs	r2, #16
 8009df2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8009df6:	68fb      	ldr	r3, [r7, #12]
 8009df8:	2200      	movs	r2, #0
 8009dfa:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8009dfc:	68fb      	ldr	r3, [r7, #12]
 8009dfe:	687a      	ldr	r2, [r7, #4]
 8009e00:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8009e02:	68fb      	ldr	r3, [r7, #12]
 8009e04:	893a      	ldrh	r2, [r7, #8]
 8009e06:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8009e08:	68fb      	ldr	r3, [r7, #12]
 8009e0a:	2200      	movs	r2, #0
 8009e0c:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8009e0e:	68fb      	ldr	r3, [r7, #12]
 8009e10:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009e12:	b29b      	uxth	r3, r3
 8009e14:	2bff      	cmp	r3, #255	@ 0xff
 8009e16:	d906      	bls.n	8009e26 <HAL_I2C_Master_Transmit+0x9a>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8009e18:	68fb      	ldr	r3, [r7, #12]
 8009e1a:	22ff      	movs	r2, #255	@ 0xff
 8009e1c:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 8009e1e:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8009e22:	617b      	str	r3, [r7, #20]
 8009e24:	e007      	b.n	8009e36 <HAL_I2C_Master_Transmit+0xaa>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8009e26:	68fb      	ldr	r3, [r7, #12]
 8009e28:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009e2a:	b29a      	uxth	r2, r3
 8009e2c:	68fb      	ldr	r3, [r7, #12]
 8009e2e:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 8009e30:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8009e34:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 8009e36:	68fb      	ldr	r3, [r7, #12]
 8009e38:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8009e3a:	2b00      	cmp	r3, #0
 8009e3c:	d024      	beq.n	8009e88 <HAL_I2C_Master_Transmit+0xfc>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8009e3e:	68fb      	ldr	r3, [r7, #12]
 8009e40:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009e42:	781a      	ldrb	r2, [r3, #0]
 8009e44:	68fb      	ldr	r3, [r7, #12]
 8009e46:	681b      	ldr	r3, [r3, #0]
 8009e48:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8009e4a:	68fb      	ldr	r3, [r7, #12]
 8009e4c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009e4e:	1c5a      	adds	r2, r3, #1
 8009e50:	68fb      	ldr	r3, [r7, #12]
 8009e52:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8009e54:	68fb      	ldr	r3, [r7, #12]
 8009e56:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009e58:	b29b      	uxth	r3, r3
 8009e5a:	3b01      	subs	r3, #1
 8009e5c:	b29a      	uxth	r2, r3
 8009e5e:	68fb      	ldr	r3, [r7, #12]
 8009e60:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8009e62:	68fb      	ldr	r3, [r7, #12]
 8009e64:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8009e66:	3b01      	subs	r3, #1
 8009e68:	b29a      	uxth	r2, r3
 8009e6a:	68fb      	ldr	r3, [r7, #12]
 8009e6c:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U), xfermode,
 8009e6e:	68fb      	ldr	r3, [r7, #12]
 8009e70:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8009e72:	b2db      	uxtb	r3, r3
 8009e74:	3301      	adds	r3, #1
 8009e76:	b2da      	uxtb	r2, r3
 8009e78:	8979      	ldrh	r1, [r7, #10]
 8009e7a:	4b4e      	ldr	r3, [pc, #312]	@ (8009fb4 <HAL_I2C_Master_Transmit+0x228>)
 8009e7c:	9300      	str	r3, [sp, #0]
 8009e7e:	697b      	ldr	r3, [r7, #20]
 8009e80:	68f8      	ldr	r0, [r7, #12]
 8009e82:	f000 fc05 	bl	800a690 <I2C_TransferConfig>
 8009e86:	e066      	b.n	8009f56 <HAL_I2C_Master_Transmit+0x1ca>
    }
    else
    {
      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode,
 8009e88:	68fb      	ldr	r3, [r7, #12]
 8009e8a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8009e8c:	b2da      	uxtb	r2, r3
 8009e8e:	8979      	ldrh	r1, [r7, #10]
 8009e90:	4b48      	ldr	r3, [pc, #288]	@ (8009fb4 <HAL_I2C_Master_Transmit+0x228>)
 8009e92:	9300      	str	r3, [sp, #0]
 8009e94:	697b      	ldr	r3, [r7, #20]
 8009e96:	68f8      	ldr	r0, [r7, #12]
 8009e98:	f000 fbfa 	bl	800a690 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8009e9c:	e05b      	b.n	8009f56 <HAL_I2C_Master_Transmit+0x1ca>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8009e9e:	693a      	ldr	r2, [r7, #16]
 8009ea0:	6a39      	ldr	r1, [r7, #32]
 8009ea2:	68f8      	ldr	r0, [r7, #12]
 8009ea4:	f000 f9fd 	bl	800a2a2 <I2C_WaitOnTXISFlagUntilTimeout>
 8009ea8:	4603      	mov	r3, r0
 8009eaa:	2b00      	cmp	r3, #0
 8009eac:	d001      	beq.n	8009eb2 <HAL_I2C_Master_Transmit+0x126>
      {
        return HAL_ERROR;
 8009eae:	2301      	movs	r3, #1
 8009eb0:	e07b      	b.n	8009faa <HAL_I2C_Master_Transmit+0x21e>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8009eb2:	68fb      	ldr	r3, [r7, #12]
 8009eb4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009eb6:	781a      	ldrb	r2, [r3, #0]
 8009eb8:	68fb      	ldr	r3, [r7, #12]
 8009eba:	681b      	ldr	r3, [r3, #0]
 8009ebc:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8009ebe:	68fb      	ldr	r3, [r7, #12]
 8009ec0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009ec2:	1c5a      	adds	r2, r3, #1
 8009ec4:	68fb      	ldr	r3, [r7, #12]
 8009ec6:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8009ec8:	68fb      	ldr	r3, [r7, #12]
 8009eca:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009ecc:	b29b      	uxth	r3, r3
 8009ece:	3b01      	subs	r3, #1
 8009ed0:	b29a      	uxth	r2, r3
 8009ed2:	68fb      	ldr	r3, [r7, #12]
 8009ed4:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8009ed6:	68fb      	ldr	r3, [r7, #12]
 8009ed8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8009eda:	3b01      	subs	r3, #1
 8009edc:	b29a      	uxth	r2, r3
 8009ede:	68fb      	ldr	r3, [r7, #12]
 8009ee0:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8009ee2:	68fb      	ldr	r3, [r7, #12]
 8009ee4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009ee6:	b29b      	uxth	r3, r3
 8009ee8:	2b00      	cmp	r3, #0
 8009eea:	d034      	beq.n	8009f56 <HAL_I2C_Master_Transmit+0x1ca>
 8009eec:	68fb      	ldr	r3, [r7, #12]
 8009eee:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8009ef0:	2b00      	cmp	r3, #0
 8009ef2:	d130      	bne.n	8009f56 <HAL_I2C_Master_Transmit+0x1ca>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8009ef4:	693b      	ldr	r3, [r7, #16]
 8009ef6:	9300      	str	r3, [sp, #0]
 8009ef8:	6a3b      	ldr	r3, [r7, #32]
 8009efa:	2200      	movs	r2, #0
 8009efc:	2180      	movs	r1, #128	@ 0x80
 8009efe:	68f8      	ldr	r0, [r7, #12]
 8009f00:	f000 f976 	bl	800a1f0 <I2C_WaitOnFlagUntilTimeout>
 8009f04:	4603      	mov	r3, r0
 8009f06:	2b00      	cmp	r3, #0
 8009f08:	d001      	beq.n	8009f0e <HAL_I2C_Master_Transmit+0x182>
        {
          return HAL_ERROR;
 8009f0a:	2301      	movs	r3, #1
 8009f0c:	e04d      	b.n	8009faa <HAL_I2C_Master_Transmit+0x21e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8009f0e:	68fb      	ldr	r3, [r7, #12]
 8009f10:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009f12:	b29b      	uxth	r3, r3
 8009f14:	2bff      	cmp	r3, #255	@ 0xff
 8009f16:	d90e      	bls.n	8009f36 <HAL_I2C_Master_Transmit+0x1aa>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8009f18:	68fb      	ldr	r3, [r7, #12]
 8009f1a:	22ff      	movs	r2, #255	@ 0xff
 8009f1c:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8009f1e:	68fb      	ldr	r3, [r7, #12]
 8009f20:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8009f22:	b2da      	uxtb	r2, r3
 8009f24:	8979      	ldrh	r1, [r7, #10]
 8009f26:	2300      	movs	r3, #0
 8009f28:	9300      	str	r3, [sp, #0]
 8009f2a:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8009f2e:	68f8      	ldr	r0, [r7, #12]
 8009f30:	f000 fbae 	bl	800a690 <I2C_TransferConfig>
 8009f34:	e00f      	b.n	8009f56 <HAL_I2C_Master_Transmit+0x1ca>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8009f36:	68fb      	ldr	r3, [r7, #12]
 8009f38:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009f3a:	b29a      	uxth	r2, r3
 8009f3c:	68fb      	ldr	r3, [r7, #12]
 8009f3e:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8009f40:	68fb      	ldr	r3, [r7, #12]
 8009f42:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8009f44:	b2da      	uxtb	r2, r3
 8009f46:	8979      	ldrh	r1, [r7, #10]
 8009f48:	2300      	movs	r3, #0
 8009f4a:	9300      	str	r3, [sp, #0]
 8009f4c:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8009f50:	68f8      	ldr	r0, [r7, #12]
 8009f52:	f000 fb9d 	bl	800a690 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8009f56:	68fb      	ldr	r3, [r7, #12]
 8009f58:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009f5a:	b29b      	uxth	r3, r3
 8009f5c:	2b00      	cmp	r3, #0
 8009f5e:	d19e      	bne.n	8009e9e <HAL_I2C_Master_Transmit+0x112>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8009f60:	693a      	ldr	r2, [r7, #16]
 8009f62:	6a39      	ldr	r1, [r7, #32]
 8009f64:	68f8      	ldr	r0, [r7, #12]
 8009f66:	f000 f9e3 	bl	800a330 <I2C_WaitOnSTOPFlagUntilTimeout>
 8009f6a:	4603      	mov	r3, r0
 8009f6c:	2b00      	cmp	r3, #0
 8009f6e:	d001      	beq.n	8009f74 <HAL_I2C_Master_Transmit+0x1e8>
    {
      return HAL_ERROR;
 8009f70:	2301      	movs	r3, #1
 8009f72:	e01a      	b.n	8009faa <HAL_I2C_Master_Transmit+0x21e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8009f74:	68fb      	ldr	r3, [r7, #12]
 8009f76:	681b      	ldr	r3, [r3, #0]
 8009f78:	2220      	movs	r2, #32
 8009f7a:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8009f7c:	68fb      	ldr	r3, [r7, #12]
 8009f7e:	681b      	ldr	r3, [r3, #0]
 8009f80:	6859      	ldr	r1, [r3, #4]
 8009f82:	68fb      	ldr	r3, [r7, #12]
 8009f84:	681a      	ldr	r2, [r3, #0]
 8009f86:	4b0c      	ldr	r3, [pc, #48]	@ (8009fb8 <HAL_I2C_Master_Transmit+0x22c>)
 8009f88:	400b      	ands	r3, r1
 8009f8a:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8009f8c:	68fb      	ldr	r3, [r7, #12]
 8009f8e:	2220      	movs	r2, #32
 8009f90:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8009f94:	68fb      	ldr	r3, [r7, #12]
 8009f96:	2200      	movs	r2, #0
 8009f98:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009f9c:	68fb      	ldr	r3, [r7, #12]
 8009f9e:	2200      	movs	r2, #0
 8009fa0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8009fa4:	2300      	movs	r3, #0
 8009fa6:	e000      	b.n	8009faa <HAL_I2C_Master_Transmit+0x21e>
  }
  else
  {
    return HAL_BUSY;
 8009fa8:	2302      	movs	r3, #2
  }
}
 8009faa:	4618      	mov	r0, r3
 8009fac:	3718      	adds	r7, #24
 8009fae:	46bd      	mov	sp, r7
 8009fb0:	bd80      	pop	{r7, pc}
 8009fb2:	bf00      	nop
 8009fb4:	80002000 	.word	0x80002000
 8009fb8:	fe00e800 	.word	0xfe00e800

08009fbc <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 8009fbc:	b580      	push	{r7, lr}
 8009fbe:	b088      	sub	sp, #32
 8009fc0:	af02      	add	r7, sp, #8
 8009fc2:	60f8      	str	r0, [r7, #12]
 8009fc4:	607a      	str	r2, [r7, #4]
 8009fc6:	461a      	mov	r2, r3
 8009fc8:	460b      	mov	r3, r1
 8009fca:	817b      	strh	r3, [r7, #10]
 8009fcc:	4613      	mov	r3, r2
 8009fce:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8009fd0:	68fb      	ldr	r3, [r7, #12]
 8009fd2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8009fd6:	b2db      	uxtb	r3, r3
 8009fd8:	2b20      	cmp	r3, #32
 8009fda:	f040 80db 	bne.w	800a194 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8009fde:	68fb      	ldr	r3, [r7, #12]
 8009fe0:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8009fe4:	2b01      	cmp	r3, #1
 8009fe6:	d101      	bne.n	8009fec <HAL_I2C_Master_Receive+0x30>
 8009fe8:	2302      	movs	r3, #2
 8009fea:	e0d4      	b.n	800a196 <HAL_I2C_Master_Receive+0x1da>
 8009fec:	68fb      	ldr	r3, [r7, #12]
 8009fee:	2201      	movs	r2, #1
 8009ff0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8009ff4:	f7fd fc68 	bl	80078c8 <HAL_GetTick>
 8009ff8:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8009ffa:	697b      	ldr	r3, [r7, #20]
 8009ffc:	9300      	str	r3, [sp, #0]
 8009ffe:	2319      	movs	r3, #25
 800a000:	2201      	movs	r2, #1
 800a002:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800a006:	68f8      	ldr	r0, [r7, #12]
 800a008:	f000 f8f2 	bl	800a1f0 <I2C_WaitOnFlagUntilTimeout>
 800a00c:	4603      	mov	r3, r0
 800a00e:	2b00      	cmp	r3, #0
 800a010:	d001      	beq.n	800a016 <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 800a012:	2301      	movs	r3, #1
 800a014:	e0bf      	b.n	800a196 <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800a016:	68fb      	ldr	r3, [r7, #12]
 800a018:	2222      	movs	r2, #34	@ 0x22
 800a01a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800a01e:	68fb      	ldr	r3, [r7, #12]
 800a020:	2210      	movs	r2, #16
 800a022:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800a026:	68fb      	ldr	r3, [r7, #12]
 800a028:	2200      	movs	r2, #0
 800a02a:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800a02c:	68fb      	ldr	r3, [r7, #12]
 800a02e:	687a      	ldr	r2, [r7, #4]
 800a030:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 800a032:	68fb      	ldr	r3, [r7, #12]
 800a034:	893a      	ldrh	r2, [r7, #8]
 800a036:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 800a038:	68fb      	ldr	r3, [r7, #12]
 800a03a:	2200      	movs	r2, #0
 800a03c:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800a03e:	68fb      	ldr	r3, [r7, #12]
 800a040:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800a042:	b29b      	uxth	r3, r3
 800a044:	2bff      	cmp	r3, #255	@ 0xff
 800a046:	d90e      	bls.n	800a066 <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = 1U;
 800a048:	68fb      	ldr	r3, [r7, #12]
 800a04a:	2201      	movs	r2, #1
 800a04c:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800a04e:	68fb      	ldr	r3, [r7, #12]
 800a050:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800a052:	b2da      	uxtb	r2, r3
 800a054:	8979      	ldrh	r1, [r7, #10]
 800a056:	4b52      	ldr	r3, [pc, #328]	@ (800a1a0 <HAL_I2C_Master_Receive+0x1e4>)
 800a058:	9300      	str	r3, [sp, #0]
 800a05a:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800a05e:	68f8      	ldr	r0, [r7, #12]
 800a060:	f000 fb16 	bl	800a690 <I2C_TransferConfig>
 800a064:	e06d      	b.n	800a142 <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800a066:	68fb      	ldr	r3, [r7, #12]
 800a068:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800a06a:	b29a      	uxth	r2, r3
 800a06c:	68fb      	ldr	r3, [r7, #12]
 800a06e:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800a070:	68fb      	ldr	r3, [r7, #12]
 800a072:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800a074:	b2da      	uxtb	r2, r3
 800a076:	8979      	ldrh	r1, [r7, #10]
 800a078:	4b49      	ldr	r3, [pc, #292]	@ (800a1a0 <HAL_I2C_Master_Receive+0x1e4>)
 800a07a:	9300      	str	r3, [sp, #0]
 800a07c:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800a080:	68f8      	ldr	r0, [r7, #12]
 800a082:	f000 fb05 	bl	800a690 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 800a086:	e05c      	b.n	800a142 <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800a088:	697a      	ldr	r2, [r7, #20]
 800a08a:	6a39      	ldr	r1, [r7, #32]
 800a08c:	68f8      	ldr	r0, [r7, #12]
 800a08e:	f000 f993 	bl	800a3b8 <I2C_WaitOnRXNEFlagUntilTimeout>
 800a092:	4603      	mov	r3, r0
 800a094:	2b00      	cmp	r3, #0
 800a096:	d001      	beq.n	800a09c <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 800a098:	2301      	movs	r3, #1
 800a09a:	e07c      	b.n	800a196 <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800a09c:	68fb      	ldr	r3, [r7, #12]
 800a09e:	681b      	ldr	r3, [r3, #0]
 800a0a0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800a0a2:	68fb      	ldr	r3, [r7, #12]
 800a0a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a0a6:	b2d2      	uxtb	r2, r2
 800a0a8:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800a0aa:	68fb      	ldr	r3, [r7, #12]
 800a0ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a0ae:	1c5a      	adds	r2, r3, #1
 800a0b0:	68fb      	ldr	r3, [r7, #12]
 800a0b2:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 800a0b4:	68fb      	ldr	r3, [r7, #12]
 800a0b6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800a0b8:	3b01      	subs	r3, #1
 800a0ba:	b29a      	uxth	r2, r3
 800a0bc:	68fb      	ldr	r3, [r7, #12]
 800a0be:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 800a0c0:	68fb      	ldr	r3, [r7, #12]
 800a0c2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800a0c4:	b29b      	uxth	r3, r3
 800a0c6:	3b01      	subs	r3, #1
 800a0c8:	b29a      	uxth	r2, r3
 800a0ca:	68fb      	ldr	r3, [r7, #12]
 800a0cc:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800a0ce:	68fb      	ldr	r3, [r7, #12]
 800a0d0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800a0d2:	b29b      	uxth	r3, r3
 800a0d4:	2b00      	cmp	r3, #0
 800a0d6:	d034      	beq.n	800a142 <HAL_I2C_Master_Receive+0x186>
 800a0d8:	68fb      	ldr	r3, [r7, #12]
 800a0da:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800a0dc:	2b00      	cmp	r3, #0
 800a0de:	d130      	bne.n	800a142 <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800a0e0:	697b      	ldr	r3, [r7, #20]
 800a0e2:	9300      	str	r3, [sp, #0]
 800a0e4:	6a3b      	ldr	r3, [r7, #32]
 800a0e6:	2200      	movs	r2, #0
 800a0e8:	2180      	movs	r1, #128	@ 0x80
 800a0ea:	68f8      	ldr	r0, [r7, #12]
 800a0ec:	f000 f880 	bl	800a1f0 <I2C_WaitOnFlagUntilTimeout>
 800a0f0:	4603      	mov	r3, r0
 800a0f2:	2b00      	cmp	r3, #0
 800a0f4:	d001      	beq.n	800a0fa <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 800a0f6:	2301      	movs	r3, #1
 800a0f8:	e04d      	b.n	800a196 <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800a0fa:	68fb      	ldr	r3, [r7, #12]
 800a0fc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800a0fe:	b29b      	uxth	r3, r3
 800a100:	2bff      	cmp	r3, #255	@ 0xff
 800a102:	d90e      	bls.n	800a122 <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800a104:	68fb      	ldr	r3, [r7, #12]
 800a106:	22ff      	movs	r2, #255	@ 0xff
 800a108:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800a10a:	68fb      	ldr	r3, [r7, #12]
 800a10c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800a10e:	b2da      	uxtb	r2, r3
 800a110:	8979      	ldrh	r1, [r7, #10]
 800a112:	2300      	movs	r3, #0
 800a114:	9300      	str	r3, [sp, #0]
 800a116:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800a11a:	68f8      	ldr	r0, [r7, #12]
 800a11c:	f000 fab8 	bl	800a690 <I2C_TransferConfig>
 800a120:	e00f      	b.n	800a142 <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800a122:	68fb      	ldr	r3, [r7, #12]
 800a124:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800a126:	b29a      	uxth	r2, r3
 800a128:	68fb      	ldr	r3, [r7, #12]
 800a12a:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800a12c:	68fb      	ldr	r3, [r7, #12]
 800a12e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800a130:	b2da      	uxtb	r2, r3
 800a132:	8979      	ldrh	r1, [r7, #10]
 800a134:	2300      	movs	r3, #0
 800a136:	9300      	str	r3, [sp, #0]
 800a138:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800a13c:	68f8      	ldr	r0, [r7, #12]
 800a13e:	f000 faa7 	bl	800a690 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 800a142:	68fb      	ldr	r3, [r7, #12]
 800a144:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800a146:	b29b      	uxth	r3, r3
 800a148:	2b00      	cmp	r3, #0
 800a14a:	d19d      	bne.n	800a088 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800a14c:	697a      	ldr	r2, [r7, #20]
 800a14e:	6a39      	ldr	r1, [r7, #32]
 800a150:	68f8      	ldr	r0, [r7, #12]
 800a152:	f000 f8ed 	bl	800a330 <I2C_WaitOnSTOPFlagUntilTimeout>
 800a156:	4603      	mov	r3, r0
 800a158:	2b00      	cmp	r3, #0
 800a15a:	d001      	beq.n	800a160 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 800a15c:	2301      	movs	r3, #1
 800a15e:	e01a      	b.n	800a196 <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800a160:	68fb      	ldr	r3, [r7, #12]
 800a162:	681b      	ldr	r3, [r3, #0]
 800a164:	2220      	movs	r2, #32
 800a166:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800a168:	68fb      	ldr	r3, [r7, #12]
 800a16a:	681b      	ldr	r3, [r3, #0]
 800a16c:	6859      	ldr	r1, [r3, #4]
 800a16e:	68fb      	ldr	r3, [r7, #12]
 800a170:	681a      	ldr	r2, [r3, #0]
 800a172:	4b0c      	ldr	r3, [pc, #48]	@ (800a1a4 <HAL_I2C_Master_Receive+0x1e8>)
 800a174:	400b      	ands	r3, r1
 800a176:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800a178:	68fb      	ldr	r3, [r7, #12]
 800a17a:	2220      	movs	r2, #32
 800a17c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800a180:	68fb      	ldr	r3, [r7, #12]
 800a182:	2200      	movs	r2, #0
 800a184:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800a188:	68fb      	ldr	r3, [r7, #12]
 800a18a:	2200      	movs	r2, #0
 800a18c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800a190:	2300      	movs	r3, #0
 800a192:	e000      	b.n	800a196 <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 800a194:	2302      	movs	r3, #2
  }
}
 800a196:	4618      	mov	r0, r3
 800a198:	3718      	adds	r7, #24
 800a19a:	46bd      	mov	sp, r7
 800a19c:	bd80      	pop	{r7, pc}
 800a19e:	bf00      	nop
 800a1a0:	80002400 	.word	0x80002400
 800a1a4:	fe00e800 	.word	0xfe00e800

0800a1a8 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 800a1a8:	b480      	push	{r7}
 800a1aa:	b083      	sub	sp, #12
 800a1ac:	af00      	add	r7, sp, #0
 800a1ae:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800a1b0:	687b      	ldr	r3, [r7, #4]
 800a1b2:	681b      	ldr	r3, [r3, #0]
 800a1b4:	699b      	ldr	r3, [r3, #24]
 800a1b6:	f003 0302 	and.w	r3, r3, #2
 800a1ba:	2b02      	cmp	r3, #2
 800a1bc:	d103      	bne.n	800a1c6 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800a1be:	687b      	ldr	r3, [r7, #4]
 800a1c0:	681b      	ldr	r3, [r3, #0]
 800a1c2:	2200      	movs	r2, #0
 800a1c4:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800a1c6:	687b      	ldr	r3, [r7, #4]
 800a1c8:	681b      	ldr	r3, [r3, #0]
 800a1ca:	699b      	ldr	r3, [r3, #24]
 800a1cc:	f003 0301 	and.w	r3, r3, #1
 800a1d0:	2b01      	cmp	r3, #1
 800a1d2:	d007      	beq.n	800a1e4 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800a1d4:	687b      	ldr	r3, [r7, #4]
 800a1d6:	681b      	ldr	r3, [r3, #0]
 800a1d8:	699a      	ldr	r2, [r3, #24]
 800a1da:	687b      	ldr	r3, [r7, #4]
 800a1dc:	681b      	ldr	r3, [r3, #0]
 800a1de:	f042 0201 	orr.w	r2, r2, #1
 800a1e2:	619a      	str	r2, [r3, #24]
  }
}
 800a1e4:	bf00      	nop
 800a1e6:	370c      	adds	r7, #12
 800a1e8:	46bd      	mov	sp, r7
 800a1ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1ee:	4770      	bx	lr

0800a1f0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 800a1f0:	b580      	push	{r7, lr}
 800a1f2:	b084      	sub	sp, #16
 800a1f4:	af00      	add	r7, sp, #0
 800a1f6:	60f8      	str	r0, [r7, #12]
 800a1f8:	60b9      	str	r1, [r7, #8]
 800a1fa:	603b      	str	r3, [r7, #0]
 800a1fc:	4613      	mov	r3, r2
 800a1fe:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800a200:	e03b      	b.n	800a27a <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800a202:	69ba      	ldr	r2, [r7, #24]
 800a204:	6839      	ldr	r1, [r7, #0]
 800a206:	68f8      	ldr	r0, [r7, #12]
 800a208:	f000 f962 	bl	800a4d0 <I2C_IsErrorOccurred>
 800a20c:	4603      	mov	r3, r0
 800a20e:	2b00      	cmp	r3, #0
 800a210:	d001      	beq.n	800a216 <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 800a212:	2301      	movs	r3, #1
 800a214:	e041      	b.n	800a29a <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a216:	683b      	ldr	r3, [r7, #0]
 800a218:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a21c:	d02d      	beq.n	800a27a <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a21e:	f7fd fb53 	bl	80078c8 <HAL_GetTick>
 800a222:	4602      	mov	r2, r0
 800a224:	69bb      	ldr	r3, [r7, #24]
 800a226:	1ad3      	subs	r3, r2, r3
 800a228:	683a      	ldr	r2, [r7, #0]
 800a22a:	429a      	cmp	r2, r3
 800a22c:	d302      	bcc.n	800a234 <I2C_WaitOnFlagUntilTimeout+0x44>
 800a22e:	683b      	ldr	r3, [r7, #0]
 800a230:	2b00      	cmp	r3, #0
 800a232:	d122      	bne.n	800a27a <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 800a234:	68fb      	ldr	r3, [r7, #12]
 800a236:	681b      	ldr	r3, [r3, #0]
 800a238:	699a      	ldr	r2, [r3, #24]
 800a23a:	68bb      	ldr	r3, [r7, #8]
 800a23c:	4013      	ands	r3, r2
 800a23e:	68ba      	ldr	r2, [r7, #8]
 800a240:	429a      	cmp	r2, r3
 800a242:	bf0c      	ite	eq
 800a244:	2301      	moveq	r3, #1
 800a246:	2300      	movne	r3, #0
 800a248:	b2db      	uxtb	r3, r3
 800a24a:	461a      	mov	r2, r3
 800a24c:	79fb      	ldrb	r3, [r7, #7]
 800a24e:	429a      	cmp	r2, r3
 800a250:	d113      	bne.n	800a27a <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800a252:	68fb      	ldr	r3, [r7, #12]
 800a254:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a256:	f043 0220 	orr.w	r2, r3, #32
 800a25a:	68fb      	ldr	r3, [r7, #12]
 800a25c:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800a25e:	68fb      	ldr	r3, [r7, #12]
 800a260:	2220      	movs	r2, #32
 800a262:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800a266:	68fb      	ldr	r3, [r7, #12]
 800a268:	2200      	movs	r2, #0
 800a26a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800a26e:	68fb      	ldr	r3, [r7, #12]
 800a270:	2200      	movs	r2, #0
 800a272:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 800a276:	2301      	movs	r3, #1
 800a278:	e00f      	b.n	800a29a <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800a27a:	68fb      	ldr	r3, [r7, #12]
 800a27c:	681b      	ldr	r3, [r3, #0]
 800a27e:	699a      	ldr	r2, [r3, #24]
 800a280:	68bb      	ldr	r3, [r7, #8]
 800a282:	4013      	ands	r3, r2
 800a284:	68ba      	ldr	r2, [r7, #8]
 800a286:	429a      	cmp	r2, r3
 800a288:	bf0c      	ite	eq
 800a28a:	2301      	moveq	r3, #1
 800a28c:	2300      	movne	r3, #0
 800a28e:	b2db      	uxtb	r3, r3
 800a290:	461a      	mov	r2, r3
 800a292:	79fb      	ldrb	r3, [r7, #7]
 800a294:	429a      	cmp	r2, r3
 800a296:	d0b4      	beq.n	800a202 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800a298:	2300      	movs	r3, #0
}
 800a29a:	4618      	mov	r0, r3
 800a29c:	3710      	adds	r7, #16
 800a29e:	46bd      	mov	sp, r7
 800a2a0:	bd80      	pop	{r7, pc}

0800a2a2 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800a2a2:	b580      	push	{r7, lr}
 800a2a4:	b084      	sub	sp, #16
 800a2a6:	af00      	add	r7, sp, #0
 800a2a8:	60f8      	str	r0, [r7, #12]
 800a2aa:	60b9      	str	r1, [r7, #8]
 800a2ac:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800a2ae:	e033      	b.n	800a318 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800a2b0:	687a      	ldr	r2, [r7, #4]
 800a2b2:	68b9      	ldr	r1, [r7, #8]
 800a2b4:	68f8      	ldr	r0, [r7, #12]
 800a2b6:	f000 f90b 	bl	800a4d0 <I2C_IsErrorOccurred>
 800a2ba:	4603      	mov	r3, r0
 800a2bc:	2b00      	cmp	r3, #0
 800a2be:	d001      	beq.n	800a2c4 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800a2c0:	2301      	movs	r3, #1
 800a2c2:	e031      	b.n	800a328 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a2c4:	68bb      	ldr	r3, [r7, #8]
 800a2c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a2ca:	d025      	beq.n	800a318 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a2cc:	f7fd fafc 	bl	80078c8 <HAL_GetTick>
 800a2d0:	4602      	mov	r2, r0
 800a2d2:	687b      	ldr	r3, [r7, #4]
 800a2d4:	1ad3      	subs	r3, r2, r3
 800a2d6:	68ba      	ldr	r2, [r7, #8]
 800a2d8:	429a      	cmp	r2, r3
 800a2da:	d302      	bcc.n	800a2e2 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 800a2dc:	68bb      	ldr	r3, [r7, #8]
 800a2de:	2b00      	cmp	r3, #0
 800a2e0:	d11a      	bne.n	800a318 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 800a2e2:	68fb      	ldr	r3, [r7, #12]
 800a2e4:	681b      	ldr	r3, [r3, #0]
 800a2e6:	699b      	ldr	r3, [r3, #24]
 800a2e8:	f003 0302 	and.w	r3, r3, #2
 800a2ec:	2b02      	cmp	r3, #2
 800a2ee:	d013      	beq.n	800a318 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800a2f0:	68fb      	ldr	r3, [r7, #12]
 800a2f2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a2f4:	f043 0220 	orr.w	r2, r3, #32
 800a2f8:	68fb      	ldr	r3, [r7, #12]
 800a2fa:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800a2fc:	68fb      	ldr	r3, [r7, #12]
 800a2fe:	2220      	movs	r2, #32
 800a300:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800a304:	68fb      	ldr	r3, [r7, #12]
 800a306:	2200      	movs	r2, #0
 800a308:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800a30c:	68fb      	ldr	r3, [r7, #12]
 800a30e:	2200      	movs	r2, #0
 800a310:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 800a314:	2301      	movs	r3, #1
 800a316:	e007      	b.n	800a328 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800a318:	68fb      	ldr	r3, [r7, #12]
 800a31a:	681b      	ldr	r3, [r3, #0]
 800a31c:	699b      	ldr	r3, [r3, #24]
 800a31e:	f003 0302 	and.w	r3, r3, #2
 800a322:	2b02      	cmp	r3, #2
 800a324:	d1c4      	bne.n	800a2b0 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800a326:	2300      	movs	r3, #0
}
 800a328:	4618      	mov	r0, r3
 800a32a:	3710      	adds	r7, #16
 800a32c:	46bd      	mov	sp, r7
 800a32e:	bd80      	pop	{r7, pc}

0800a330 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800a330:	b580      	push	{r7, lr}
 800a332:	b084      	sub	sp, #16
 800a334:	af00      	add	r7, sp, #0
 800a336:	60f8      	str	r0, [r7, #12]
 800a338:	60b9      	str	r1, [r7, #8]
 800a33a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800a33c:	e02f      	b.n	800a39e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800a33e:	687a      	ldr	r2, [r7, #4]
 800a340:	68b9      	ldr	r1, [r7, #8]
 800a342:	68f8      	ldr	r0, [r7, #12]
 800a344:	f000 f8c4 	bl	800a4d0 <I2C_IsErrorOccurred>
 800a348:	4603      	mov	r3, r0
 800a34a:	2b00      	cmp	r3, #0
 800a34c:	d001      	beq.n	800a352 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800a34e:	2301      	movs	r3, #1
 800a350:	e02d      	b.n	800a3ae <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a352:	f7fd fab9 	bl	80078c8 <HAL_GetTick>
 800a356:	4602      	mov	r2, r0
 800a358:	687b      	ldr	r3, [r7, #4]
 800a35a:	1ad3      	subs	r3, r2, r3
 800a35c:	68ba      	ldr	r2, [r7, #8]
 800a35e:	429a      	cmp	r2, r3
 800a360:	d302      	bcc.n	800a368 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800a362:	68bb      	ldr	r3, [r7, #8]
 800a364:	2b00      	cmp	r3, #0
 800a366:	d11a      	bne.n	800a39e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 800a368:	68fb      	ldr	r3, [r7, #12]
 800a36a:	681b      	ldr	r3, [r3, #0]
 800a36c:	699b      	ldr	r3, [r3, #24]
 800a36e:	f003 0320 	and.w	r3, r3, #32
 800a372:	2b20      	cmp	r3, #32
 800a374:	d013      	beq.n	800a39e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800a376:	68fb      	ldr	r3, [r7, #12]
 800a378:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a37a:	f043 0220 	orr.w	r2, r3, #32
 800a37e:	68fb      	ldr	r3, [r7, #12]
 800a380:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800a382:	68fb      	ldr	r3, [r7, #12]
 800a384:	2220      	movs	r2, #32
 800a386:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800a38a:	68fb      	ldr	r3, [r7, #12]
 800a38c:	2200      	movs	r2, #0
 800a38e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800a392:	68fb      	ldr	r3, [r7, #12]
 800a394:	2200      	movs	r2, #0
 800a396:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 800a39a:	2301      	movs	r3, #1
 800a39c:	e007      	b.n	800a3ae <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800a39e:	68fb      	ldr	r3, [r7, #12]
 800a3a0:	681b      	ldr	r3, [r3, #0]
 800a3a2:	699b      	ldr	r3, [r3, #24]
 800a3a4:	f003 0320 	and.w	r3, r3, #32
 800a3a8:	2b20      	cmp	r3, #32
 800a3aa:	d1c8      	bne.n	800a33e <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800a3ac:	2300      	movs	r3, #0
}
 800a3ae:	4618      	mov	r0, r3
 800a3b0:	3710      	adds	r7, #16
 800a3b2:	46bd      	mov	sp, r7
 800a3b4:	bd80      	pop	{r7, pc}
	...

0800a3b8 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800a3b8:	b580      	push	{r7, lr}
 800a3ba:	b086      	sub	sp, #24
 800a3bc:	af00      	add	r7, sp, #0
 800a3be:	60f8      	str	r0, [r7, #12]
 800a3c0:	60b9      	str	r1, [r7, #8]
 800a3c2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800a3c4:	2300      	movs	r3, #0
 800a3c6:	75fb      	strb	r3, [r7, #23]

  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 800a3c8:	e071      	b.n	800a4ae <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800a3ca:	687a      	ldr	r2, [r7, #4]
 800a3cc:	68b9      	ldr	r1, [r7, #8]
 800a3ce:	68f8      	ldr	r0, [r7, #12]
 800a3d0:	f000 f87e 	bl	800a4d0 <I2C_IsErrorOccurred>
 800a3d4:	4603      	mov	r3, r0
 800a3d6:	2b00      	cmp	r3, #0
 800a3d8:	d001      	beq.n	800a3de <I2C_WaitOnRXNEFlagUntilTimeout+0x26>
    {
      status = HAL_ERROR;
 800a3da:	2301      	movs	r3, #1
 800a3dc:	75fb      	strb	r3, [r7, #23]
    }

    /* Check if a STOPF is detected */
    if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET) && (status == HAL_OK))
 800a3de:	68fb      	ldr	r3, [r7, #12]
 800a3e0:	681b      	ldr	r3, [r3, #0]
 800a3e2:	699b      	ldr	r3, [r3, #24]
 800a3e4:	f003 0320 	and.w	r3, r3, #32
 800a3e8:	2b20      	cmp	r3, #32
 800a3ea:	d13b      	bne.n	800a464 <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
 800a3ec:	7dfb      	ldrb	r3, [r7, #23]
 800a3ee:	2b00      	cmp	r3, #0
 800a3f0:	d138      	bne.n	800a464 <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 800a3f2:	68fb      	ldr	r3, [r7, #12]
 800a3f4:	681b      	ldr	r3, [r3, #0]
 800a3f6:	699b      	ldr	r3, [r3, #24]
 800a3f8:	f003 0304 	and.w	r3, r3, #4
 800a3fc:	2b04      	cmp	r3, #4
 800a3fe:	d105      	bne.n	800a40c <I2C_WaitOnRXNEFlagUntilTimeout+0x54>
 800a400:	68fb      	ldr	r3, [r7, #12]
 800a402:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800a404:	2b00      	cmp	r3, #0
 800a406:	d001      	beq.n	800a40c <I2C_WaitOnRXNEFlagUntilTimeout+0x54>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        status = HAL_OK;
 800a408:	2300      	movs	r3, #0
 800a40a:	75fb      	strb	r3, [r7, #23]
      }

      /* Check a no-acknowledge have been detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800a40c:	68fb      	ldr	r3, [r7, #12]
 800a40e:	681b      	ldr	r3, [r3, #0]
 800a410:	699b      	ldr	r3, [r3, #24]
 800a412:	f003 0310 	and.w	r3, r3, #16
 800a416:	2b10      	cmp	r3, #16
 800a418:	d121      	bne.n	800a45e <I2C_WaitOnRXNEFlagUntilTimeout+0xa6>
      {
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800a41a:	68fb      	ldr	r3, [r7, #12]
 800a41c:	681b      	ldr	r3, [r3, #0]
 800a41e:	2210      	movs	r2, #16
 800a420:	61da      	str	r2, [r3, #28]
        hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 800a422:	68fb      	ldr	r3, [r7, #12]
 800a424:	2204      	movs	r2, #4
 800a426:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800a428:	68fb      	ldr	r3, [r7, #12]
 800a42a:	681b      	ldr	r3, [r3, #0]
 800a42c:	2220      	movs	r2, #32
 800a42e:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 800a430:	68fb      	ldr	r3, [r7, #12]
 800a432:	681b      	ldr	r3, [r3, #0]
 800a434:	6859      	ldr	r1, [r3, #4]
 800a436:	68fb      	ldr	r3, [r7, #12]
 800a438:	681a      	ldr	r2, [r3, #0]
 800a43a:	4b24      	ldr	r3, [pc, #144]	@ (800a4cc <I2C_WaitOnRXNEFlagUntilTimeout+0x114>)
 800a43c:	400b      	ands	r3, r1
 800a43e:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 800a440:	68fb      	ldr	r3, [r7, #12]
 800a442:	2220      	movs	r2, #32
 800a444:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800a448:	68fb      	ldr	r3, [r7, #12]
 800a44a:	2200      	movs	r2, #0
 800a44c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800a450:	68fb      	ldr	r3, [r7, #12]
 800a452:	2200      	movs	r2, #0
 800a454:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        status = HAL_ERROR;
 800a458:	2301      	movs	r3, #1
 800a45a:	75fb      	strb	r3, [r7, #23]
 800a45c:	e002      	b.n	800a464 <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
      }
      else
      {
        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800a45e:	68fb      	ldr	r3, [r7, #12]
 800a460:	2200      	movs	r2, #0
 800a462:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }

    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U)) && (status == HAL_OK))
 800a464:	f7fd fa30 	bl	80078c8 <HAL_GetTick>
 800a468:	4602      	mov	r2, r0
 800a46a:	687b      	ldr	r3, [r7, #4]
 800a46c:	1ad3      	subs	r3, r2, r3
 800a46e:	68ba      	ldr	r2, [r7, #8]
 800a470:	429a      	cmp	r2, r3
 800a472:	d302      	bcc.n	800a47a <I2C_WaitOnRXNEFlagUntilTimeout+0xc2>
 800a474:	68bb      	ldr	r3, [r7, #8]
 800a476:	2b00      	cmp	r3, #0
 800a478:	d119      	bne.n	800a4ae <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
 800a47a:	7dfb      	ldrb	r3, [r7, #23]
 800a47c:	2b00      	cmp	r3, #0
 800a47e:	d116      	bne.n	800a4ae <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 800a480:	68fb      	ldr	r3, [r7, #12]
 800a482:	681b      	ldr	r3, [r3, #0]
 800a484:	699b      	ldr	r3, [r3, #24]
 800a486:	f003 0304 	and.w	r3, r3, #4
 800a48a:	2b04      	cmp	r3, #4
 800a48c:	d00f      	beq.n	800a4ae <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800a48e:	68fb      	ldr	r3, [r7, #12]
 800a490:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a492:	f043 0220 	orr.w	r2, r3, #32
 800a496:	68fb      	ldr	r3, [r7, #12]
 800a498:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800a49a:	68fb      	ldr	r3, [r7, #12]
 800a49c:	2220      	movs	r2, #32
 800a49e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800a4a2:	68fb      	ldr	r3, [r7, #12]
 800a4a4:	2200      	movs	r2, #0
 800a4a6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        status = HAL_ERROR;
 800a4aa:	2301      	movs	r3, #1
 800a4ac:	75fb      	strb	r3, [r7, #23]
  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 800a4ae:	68fb      	ldr	r3, [r7, #12]
 800a4b0:	681b      	ldr	r3, [r3, #0]
 800a4b2:	699b      	ldr	r3, [r3, #24]
 800a4b4:	f003 0304 	and.w	r3, r3, #4
 800a4b8:	2b04      	cmp	r3, #4
 800a4ba:	d002      	beq.n	800a4c2 <I2C_WaitOnRXNEFlagUntilTimeout+0x10a>
 800a4bc:	7dfb      	ldrb	r3, [r7, #23]
 800a4be:	2b00      	cmp	r3, #0
 800a4c0:	d083      	beq.n	800a3ca <I2C_WaitOnRXNEFlagUntilTimeout+0x12>
      }
    }
  }
  return status;
 800a4c2:	7dfb      	ldrb	r3, [r7, #23]
}
 800a4c4:	4618      	mov	r0, r3
 800a4c6:	3718      	adds	r7, #24
 800a4c8:	46bd      	mov	sp, r7
 800a4ca:	bd80      	pop	{r7, pc}
 800a4cc:	fe00e800 	.word	0xfe00e800

0800a4d0 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800a4d0:	b580      	push	{r7, lr}
 800a4d2:	b08a      	sub	sp, #40	@ 0x28
 800a4d4:	af00      	add	r7, sp, #0
 800a4d6:	60f8      	str	r0, [r7, #12]
 800a4d8:	60b9      	str	r1, [r7, #8]
 800a4da:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800a4dc:	2300      	movs	r3, #0
 800a4de:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 800a4e2:	68fb      	ldr	r3, [r7, #12]
 800a4e4:	681b      	ldr	r3, [r3, #0]
 800a4e6:	699b      	ldr	r3, [r3, #24]
 800a4e8:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 800a4ea:	2300      	movs	r3, #0
 800a4ec:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 800a4ee:	687b      	ldr	r3, [r7, #4]
 800a4f0:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 800a4f2:	69bb      	ldr	r3, [r7, #24]
 800a4f4:	f003 0310 	and.w	r3, r3, #16
 800a4f8:	2b00      	cmp	r3, #0
 800a4fa:	d068      	beq.n	800a5ce <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800a4fc:	68fb      	ldr	r3, [r7, #12]
 800a4fe:	681b      	ldr	r3, [r3, #0]
 800a500:	2210      	movs	r2, #16
 800a502:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800a504:	e049      	b.n	800a59a <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800a506:	68bb      	ldr	r3, [r7, #8]
 800a508:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a50c:	d045      	beq.n	800a59a <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800a50e:	f7fd f9db 	bl	80078c8 <HAL_GetTick>
 800a512:	4602      	mov	r2, r0
 800a514:	69fb      	ldr	r3, [r7, #28]
 800a516:	1ad3      	subs	r3, r2, r3
 800a518:	68ba      	ldr	r2, [r7, #8]
 800a51a:	429a      	cmp	r2, r3
 800a51c:	d302      	bcc.n	800a524 <I2C_IsErrorOccurred+0x54>
 800a51e:	68bb      	ldr	r3, [r7, #8]
 800a520:	2b00      	cmp	r3, #0
 800a522:	d13a      	bne.n	800a59a <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 800a524:	68fb      	ldr	r3, [r7, #12]
 800a526:	681b      	ldr	r3, [r3, #0]
 800a528:	685b      	ldr	r3, [r3, #4]
 800a52a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800a52e:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 800a530:	68fb      	ldr	r3, [r7, #12]
 800a532:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800a536:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 800a538:	68fb      	ldr	r3, [r7, #12]
 800a53a:	681b      	ldr	r3, [r3, #0]
 800a53c:	699b      	ldr	r3, [r3, #24]
 800a53e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800a542:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800a546:	d121      	bne.n	800a58c <I2C_IsErrorOccurred+0xbc>
 800a548:	697b      	ldr	r3, [r7, #20]
 800a54a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800a54e:	d01d      	beq.n	800a58c <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 800a550:	7cfb      	ldrb	r3, [r7, #19]
 800a552:	2b20      	cmp	r3, #32
 800a554:	d01a      	beq.n	800a58c <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800a556:	68fb      	ldr	r3, [r7, #12]
 800a558:	681b      	ldr	r3, [r3, #0]
 800a55a:	685a      	ldr	r2, [r3, #4]
 800a55c:	68fb      	ldr	r3, [r7, #12]
 800a55e:	681b      	ldr	r3, [r3, #0]
 800a560:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800a564:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 800a566:	f7fd f9af 	bl	80078c8 <HAL_GetTick>
 800a56a:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800a56c:	e00e      	b.n	800a58c <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800a56e:	f7fd f9ab 	bl	80078c8 <HAL_GetTick>
 800a572:	4602      	mov	r2, r0
 800a574:	69fb      	ldr	r3, [r7, #28]
 800a576:	1ad3      	subs	r3, r2, r3
 800a578:	2b19      	cmp	r3, #25
 800a57a:	d907      	bls.n	800a58c <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 800a57c:	6a3b      	ldr	r3, [r7, #32]
 800a57e:	f043 0320 	orr.w	r3, r3, #32
 800a582:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 800a584:	2301      	movs	r3, #1
 800a586:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 800a58a:	e006      	b.n	800a59a <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800a58c:	68fb      	ldr	r3, [r7, #12]
 800a58e:	681b      	ldr	r3, [r3, #0]
 800a590:	699b      	ldr	r3, [r3, #24]
 800a592:	f003 0320 	and.w	r3, r3, #32
 800a596:	2b20      	cmp	r3, #32
 800a598:	d1e9      	bne.n	800a56e <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800a59a:	68fb      	ldr	r3, [r7, #12]
 800a59c:	681b      	ldr	r3, [r3, #0]
 800a59e:	699b      	ldr	r3, [r3, #24]
 800a5a0:	f003 0320 	and.w	r3, r3, #32
 800a5a4:	2b20      	cmp	r3, #32
 800a5a6:	d003      	beq.n	800a5b0 <I2C_IsErrorOccurred+0xe0>
 800a5a8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800a5ac:	2b00      	cmp	r3, #0
 800a5ae:	d0aa      	beq.n	800a506 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 800a5b0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800a5b4:	2b00      	cmp	r3, #0
 800a5b6:	d103      	bne.n	800a5c0 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800a5b8:	68fb      	ldr	r3, [r7, #12]
 800a5ba:	681b      	ldr	r3, [r3, #0]
 800a5bc:	2220      	movs	r2, #32
 800a5be:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 800a5c0:	6a3b      	ldr	r3, [r7, #32]
 800a5c2:	f043 0304 	orr.w	r3, r3, #4
 800a5c6:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 800a5c8:	2301      	movs	r3, #1
 800a5ca:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 800a5ce:	68fb      	ldr	r3, [r7, #12]
 800a5d0:	681b      	ldr	r3, [r3, #0]
 800a5d2:	699b      	ldr	r3, [r3, #24]
 800a5d4:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 800a5d6:	69bb      	ldr	r3, [r7, #24]
 800a5d8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a5dc:	2b00      	cmp	r3, #0
 800a5de:	d00b      	beq.n	800a5f8 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 800a5e0:	6a3b      	ldr	r3, [r7, #32]
 800a5e2:	f043 0301 	orr.w	r3, r3, #1
 800a5e6:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800a5e8:	68fb      	ldr	r3, [r7, #12]
 800a5ea:	681b      	ldr	r3, [r3, #0]
 800a5ec:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800a5f0:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800a5f2:	2301      	movs	r3, #1
 800a5f4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 800a5f8:	69bb      	ldr	r3, [r7, #24]
 800a5fa:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800a5fe:	2b00      	cmp	r3, #0
 800a600:	d00b      	beq.n	800a61a <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 800a602:	6a3b      	ldr	r3, [r7, #32]
 800a604:	f043 0308 	orr.w	r3, r3, #8
 800a608:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800a60a:	68fb      	ldr	r3, [r7, #12]
 800a60c:	681b      	ldr	r3, [r3, #0]
 800a60e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800a612:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800a614:	2301      	movs	r3, #1
 800a616:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 800a61a:	69bb      	ldr	r3, [r7, #24]
 800a61c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800a620:	2b00      	cmp	r3, #0
 800a622:	d00b      	beq.n	800a63c <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 800a624:	6a3b      	ldr	r3, [r7, #32]
 800a626:	f043 0302 	orr.w	r3, r3, #2
 800a62a:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800a62c:	68fb      	ldr	r3, [r7, #12]
 800a62e:	681b      	ldr	r3, [r3, #0]
 800a630:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800a634:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800a636:	2301      	movs	r3, #1
 800a638:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 800a63c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800a640:	2b00      	cmp	r3, #0
 800a642:	d01c      	beq.n	800a67e <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800a644:	68f8      	ldr	r0, [r7, #12]
 800a646:	f7ff fdaf 	bl	800a1a8 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800a64a:	68fb      	ldr	r3, [r7, #12]
 800a64c:	681b      	ldr	r3, [r3, #0]
 800a64e:	6859      	ldr	r1, [r3, #4]
 800a650:	68fb      	ldr	r3, [r7, #12]
 800a652:	681a      	ldr	r2, [r3, #0]
 800a654:	4b0d      	ldr	r3, [pc, #52]	@ (800a68c <I2C_IsErrorOccurred+0x1bc>)
 800a656:	400b      	ands	r3, r1
 800a658:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 800a65a:	68fb      	ldr	r3, [r7, #12]
 800a65c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800a65e:	6a3b      	ldr	r3, [r7, #32]
 800a660:	431a      	orrs	r2, r3
 800a662:	68fb      	ldr	r3, [r7, #12]
 800a664:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800a666:	68fb      	ldr	r3, [r7, #12]
 800a668:	2220      	movs	r2, #32
 800a66a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800a66e:	68fb      	ldr	r3, [r7, #12]
 800a670:	2200      	movs	r2, #0
 800a672:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800a676:	68fb      	ldr	r3, [r7, #12]
 800a678:	2200      	movs	r2, #0
 800a67a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 800a67e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 800a682:	4618      	mov	r0, r3
 800a684:	3728      	adds	r7, #40	@ 0x28
 800a686:	46bd      	mov	sp, r7
 800a688:	bd80      	pop	{r7, pc}
 800a68a:	bf00      	nop
 800a68c:	fe00e800 	.word	0xfe00e800

0800a690 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 800a690:	b480      	push	{r7}
 800a692:	b087      	sub	sp, #28
 800a694:	af00      	add	r7, sp, #0
 800a696:	60f8      	str	r0, [r7, #12]
 800a698:	607b      	str	r3, [r7, #4]
 800a69a:	460b      	mov	r3, r1
 800a69c:	817b      	strh	r3, [r7, #10]
 800a69e:	4613      	mov	r3, r2
 800a6a0:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800a6a2:	897b      	ldrh	r3, [r7, #10]
 800a6a4:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800a6a8:	7a7b      	ldrb	r3, [r7, #9]
 800a6aa:	041b      	lsls	r3, r3, #16
 800a6ac:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800a6b0:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800a6b2:	687b      	ldr	r3, [r7, #4]
 800a6b4:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800a6b6:	6a3b      	ldr	r3, [r7, #32]
 800a6b8:	4313      	orrs	r3, r2
 800a6ba:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800a6be:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 800a6c0:	68fb      	ldr	r3, [r7, #12]
 800a6c2:	681b      	ldr	r3, [r3, #0]
 800a6c4:	685a      	ldr	r2, [r3, #4]
 800a6c6:	6a3b      	ldr	r3, [r7, #32]
 800a6c8:	0d5b      	lsrs	r3, r3, #21
 800a6ca:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 800a6ce:	4b08      	ldr	r3, [pc, #32]	@ (800a6f0 <I2C_TransferConfig+0x60>)
 800a6d0:	430b      	orrs	r3, r1
 800a6d2:	43db      	mvns	r3, r3
 800a6d4:	ea02 0103 	and.w	r1, r2, r3
 800a6d8:	68fb      	ldr	r3, [r7, #12]
 800a6da:	681b      	ldr	r3, [r3, #0]
 800a6dc:	697a      	ldr	r2, [r7, #20]
 800a6de:	430a      	orrs	r2, r1
 800a6e0:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800a6e2:	bf00      	nop
 800a6e4:	371c      	adds	r7, #28
 800a6e6:	46bd      	mov	sp, r7
 800a6e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6ec:	4770      	bx	lr
 800a6ee:	bf00      	nop
 800a6f0:	03ff63ff 	.word	0x03ff63ff

0800a6f4 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800a6f4:	b480      	push	{r7}
 800a6f6:	b083      	sub	sp, #12
 800a6f8:	af00      	add	r7, sp, #0
 800a6fa:	6078      	str	r0, [r7, #4]
 800a6fc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800a6fe:	687b      	ldr	r3, [r7, #4]
 800a700:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800a704:	b2db      	uxtb	r3, r3
 800a706:	2b20      	cmp	r3, #32
 800a708:	d138      	bne.n	800a77c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800a70a:	687b      	ldr	r3, [r7, #4]
 800a70c:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800a710:	2b01      	cmp	r3, #1
 800a712:	d101      	bne.n	800a718 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800a714:	2302      	movs	r3, #2
 800a716:	e032      	b.n	800a77e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800a718:	687b      	ldr	r3, [r7, #4]
 800a71a:	2201      	movs	r2, #1
 800a71c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800a720:	687b      	ldr	r3, [r7, #4]
 800a722:	2224      	movs	r2, #36	@ 0x24
 800a724:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800a728:	687b      	ldr	r3, [r7, #4]
 800a72a:	681b      	ldr	r3, [r3, #0]
 800a72c:	681a      	ldr	r2, [r3, #0]
 800a72e:	687b      	ldr	r3, [r7, #4]
 800a730:	681b      	ldr	r3, [r3, #0]
 800a732:	f022 0201 	bic.w	r2, r2, #1
 800a736:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800a738:	687b      	ldr	r3, [r7, #4]
 800a73a:	681b      	ldr	r3, [r3, #0]
 800a73c:	681a      	ldr	r2, [r3, #0]
 800a73e:	687b      	ldr	r3, [r7, #4]
 800a740:	681b      	ldr	r3, [r3, #0]
 800a742:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800a746:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800a748:	687b      	ldr	r3, [r7, #4]
 800a74a:	681b      	ldr	r3, [r3, #0]
 800a74c:	6819      	ldr	r1, [r3, #0]
 800a74e:	687b      	ldr	r3, [r7, #4]
 800a750:	681b      	ldr	r3, [r3, #0]
 800a752:	683a      	ldr	r2, [r7, #0]
 800a754:	430a      	orrs	r2, r1
 800a756:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800a758:	687b      	ldr	r3, [r7, #4]
 800a75a:	681b      	ldr	r3, [r3, #0]
 800a75c:	681a      	ldr	r2, [r3, #0]
 800a75e:	687b      	ldr	r3, [r7, #4]
 800a760:	681b      	ldr	r3, [r3, #0]
 800a762:	f042 0201 	orr.w	r2, r2, #1
 800a766:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800a768:	687b      	ldr	r3, [r7, #4]
 800a76a:	2220      	movs	r2, #32
 800a76c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800a770:	687b      	ldr	r3, [r7, #4]
 800a772:	2200      	movs	r2, #0
 800a774:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800a778:	2300      	movs	r3, #0
 800a77a:	e000      	b.n	800a77e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800a77c:	2302      	movs	r3, #2
  }
}
 800a77e:	4618      	mov	r0, r3
 800a780:	370c      	adds	r7, #12
 800a782:	46bd      	mov	sp, r7
 800a784:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a788:	4770      	bx	lr

0800a78a <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800a78a:	b480      	push	{r7}
 800a78c:	b085      	sub	sp, #20
 800a78e:	af00      	add	r7, sp, #0
 800a790:	6078      	str	r0, [r7, #4]
 800a792:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800a794:	687b      	ldr	r3, [r7, #4]
 800a796:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800a79a:	b2db      	uxtb	r3, r3
 800a79c:	2b20      	cmp	r3, #32
 800a79e:	d139      	bne.n	800a814 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800a7a0:	687b      	ldr	r3, [r7, #4]
 800a7a2:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800a7a6:	2b01      	cmp	r3, #1
 800a7a8:	d101      	bne.n	800a7ae <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800a7aa:	2302      	movs	r3, #2
 800a7ac:	e033      	b.n	800a816 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800a7ae:	687b      	ldr	r3, [r7, #4]
 800a7b0:	2201      	movs	r2, #1
 800a7b2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800a7b6:	687b      	ldr	r3, [r7, #4]
 800a7b8:	2224      	movs	r2, #36	@ 0x24
 800a7ba:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800a7be:	687b      	ldr	r3, [r7, #4]
 800a7c0:	681b      	ldr	r3, [r3, #0]
 800a7c2:	681a      	ldr	r2, [r3, #0]
 800a7c4:	687b      	ldr	r3, [r7, #4]
 800a7c6:	681b      	ldr	r3, [r3, #0]
 800a7c8:	f022 0201 	bic.w	r2, r2, #1
 800a7cc:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800a7ce:	687b      	ldr	r3, [r7, #4]
 800a7d0:	681b      	ldr	r3, [r3, #0]
 800a7d2:	681b      	ldr	r3, [r3, #0]
 800a7d4:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800a7d6:	68fb      	ldr	r3, [r7, #12]
 800a7d8:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 800a7dc:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800a7de:	683b      	ldr	r3, [r7, #0]
 800a7e0:	021b      	lsls	r3, r3, #8
 800a7e2:	68fa      	ldr	r2, [r7, #12]
 800a7e4:	4313      	orrs	r3, r2
 800a7e6:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800a7e8:	687b      	ldr	r3, [r7, #4]
 800a7ea:	681b      	ldr	r3, [r3, #0]
 800a7ec:	68fa      	ldr	r2, [r7, #12]
 800a7ee:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800a7f0:	687b      	ldr	r3, [r7, #4]
 800a7f2:	681b      	ldr	r3, [r3, #0]
 800a7f4:	681a      	ldr	r2, [r3, #0]
 800a7f6:	687b      	ldr	r3, [r7, #4]
 800a7f8:	681b      	ldr	r3, [r3, #0]
 800a7fa:	f042 0201 	orr.w	r2, r2, #1
 800a7fe:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800a800:	687b      	ldr	r3, [r7, #4]
 800a802:	2220      	movs	r2, #32
 800a804:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800a808:	687b      	ldr	r3, [r7, #4]
 800a80a:	2200      	movs	r2, #0
 800a80c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800a810:	2300      	movs	r3, #0
 800a812:	e000      	b.n	800a816 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800a814:	2302      	movs	r3, #2
  }
}
 800a816:	4618      	mov	r0, r3
 800a818:	3714      	adds	r7, #20
 800a81a:	46bd      	mov	sp, r7
 800a81c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a820:	4770      	bx	lr
	...

0800a824 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 800a824:	b480      	push	{r7}
 800a826:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 800a828:	4b04      	ldr	r3, [pc, #16]	@ (800a83c <HAL_PWREx_GetVoltageRange+0x18>)
 800a82a:	681b      	ldr	r3, [r3, #0]
 800a82c:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 800a830:	4618      	mov	r0, r3
 800a832:	46bd      	mov	sp, r7
 800a834:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a838:	4770      	bx	lr
 800a83a:	bf00      	nop
 800a83c:	40007000 	.word	0x40007000

0800a840 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800a840:	b480      	push	{r7}
 800a842:	b085      	sub	sp, #20
 800a844:	af00      	add	r7, sp, #0
 800a846:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800a848:	687b      	ldr	r3, [r7, #4]
 800a84a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a84e:	d130      	bne.n	800a8b2 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 800a850:	4b23      	ldr	r3, [pc, #140]	@ (800a8e0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800a852:	681b      	ldr	r3, [r3, #0]
 800a854:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800a858:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a85c:	d038      	beq.n	800a8d0 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800a85e:	4b20      	ldr	r3, [pc, #128]	@ (800a8e0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800a860:	681b      	ldr	r3, [r3, #0]
 800a862:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800a866:	4a1e      	ldr	r2, [pc, #120]	@ (800a8e0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800a868:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800a86c:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800a86e:	4b1d      	ldr	r3, [pc, #116]	@ (800a8e4 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 800a870:	681b      	ldr	r3, [r3, #0]
 800a872:	2232      	movs	r2, #50	@ 0x32
 800a874:	fb02 f303 	mul.w	r3, r2, r3
 800a878:	4a1b      	ldr	r2, [pc, #108]	@ (800a8e8 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800a87a:	fba2 2303 	umull	r2, r3, r2, r3
 800a87e:	0c9b      	lsrs	r3, r3, #18
 800a880:	3301      	adds	r3, #1
 800a882:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800a884:	e002      	b.n	800a88c <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800a886:	68fb      	ldr	r3, [r7, #12]
 800a888:	3b01      	subs	r3, #1
 800a88a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800a88c:	4b14      	ldr	r3, [pc, #80]	@ (800a8e0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800a88e:	695b      	ldr	r3, [r3, #20]
 800a890:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800a894:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800a898:	d102      	bne.n	800a8a0 <HAL_PWREx_ControlVoltageScaling+0x60>
 800a89a:	68fb      	ldr	r3, [r7, #12]
 800a89c:	2b00      	cmp	r3, #0
 800a89e:	d1f2      	bne.n	800a886 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800a8a0:	4b0f      	ldr	r3, [pc, #60]	@ (800a8e0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800a8a2:	695b      	ldr	r3, [r3, #20]
 800a8a4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800a8a8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800a8ac:	d110      	bne.n	800a8d0 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800a8ae:	2303      	movs	r3, #3
 800a8b0:	e00f      	b.n	800a8d2 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800a8b2:	4b0b      	ldr	r3, [pc, #44]	@ (800a8e0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800a8b4:	681b      	ldr	r3, [r3, #0]
 800a8b6:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800a8ba:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800a8be:	d007      	beq.n	800a8d0 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800a8c0:	4b07      	ldr	r3, [pc, #28]	@ (800a8e0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800a8c2:	681b      	ldr	r3, [r3, #0]
 800a8c4:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800a8c8:	4a05      	ldr	r2, [pc, #20]	@ (800a8e0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800a8ca:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800a8ce:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 800a8d0:	2300      	movs	r3, #0
}
 800a8d2:	4618      	mov	r0, r3
 800a8d4:	3714      	adds	r7, #20
 800a8d6:	46bd      	mov	sp, r7
 800a8d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8dc:	4770      	bx	lr
 800a8de:	bf00      	nop
 800a8e0:	40007000 	.word	0x40007000
 800a8e4:	20000000 	.word	0x20000000
 800a8e8:	431bde83 	.word	0x431bde83

0800a8ec <HAL_QSPI_Init>:
  *        in the QSPI_InitTypeDef and initialize the associated handle.
  * @param hqspi QSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Init(QSPI_HandleTypeDef *hqspi)
{
 800a8ec:	b580      	push	{r7, lr}
 800a8ee:	b086      	sub	sp, #24
 800a8f0:	af02      	add	r7, sp, #8
 800a8f2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 800a8f4:	f7fc ffe8 	bl	80078c8 <HAL_GetTick>
 800a8f8:	60f8      	str	r0, [r7, #12]

  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 800a8fa:	687b      	ldr	r3, [r7, #4]
 800a8fc:	2b00      	cmp	r3, #0
 800a8fe:	d101      	bne.n	800a904 <HAL_QSPI_Init+0x18>
  {
    return HAL_ERROR;
 800a900:	2301      	movs	r3, #1
 800a902:	e063      	b.n	800a9cc <HAL_QSPI_Init+0xe0>
  {
    assert_param(IS_QSPI_FLASH_ID(hqspi->Init.FlashID));
  }
#endif

  if(hqspi->State == HAL_QSPI_STATE_RESET)
 800a904:	687b      	ldr	r3, [r7, #4]
 800a906:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 800a90a:	b2db      	uxtb	r3, r3
 800a90c:	2b00      	cmp	r3, #0
 800a90e:	d10b      	bne.n	800a928 <HAL_QSPI_Init+0x3c>
  {
    /* Allocate lock resource and initialize it */
    hqspi->Lock = HAL_UNLOCKED;
 800a910:	687b      	ldr	r3, [r7, #4]
 800a912:	2200      	movs	r2, #0
 800a914:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

    /* Init the low level hardware */
    hqspi->MspInitCallback(hqspi);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_QSPI_MspInit(hqspi);
 800a918:	6878      	ldr	r0, [r7, #4]
 800a91a:	f7f9 fb81 	bl	8004020 <HAL_QSPI_MspInit>
#endif

    /* Configure the default timeout for the QSPI memory access */
    HAL_QSPI_SetTimeout(hqspi, HAL_QSPI_TIMEOUT_DEFAULT_VALUE);
 800a91e:	f241 3188 	movw	r1, #5000	@ 0x1388
 800a922:	6878      	ldr	r0, [r7, #4]
 800a924:	f000 fa68 	bl	800adf8 <HAL_QSPI_SetTimeout>
  }

  /* Configure QSPI FIFO Threshold */
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 800a928:	687b      	ldr	r3, [r7, #4]
 800a92a:	681b      	ldr	r3, [r3, #0]
 800a92c:	681b      	ldr	r3, [r3, #0]
 800a92e:	f423 6170 	bic.w	r1, r3, #3840	@ 0xf00
 800a932:	687b      	ldr	r3, [r7, #4]
 800a934:	689b      	ldr	r3, [r3, #8]
 800a936:	3b01      	subs	r3, #1
 800a938:	021a      	lsls	r2, r3, #8
 800a93a:	687b      	ldr	r3, [r7, #4]
 800a93c:	681b      	ldr	r3, [r3, #0]
 800a93e:	430a      	orrs	r2, r1
 800a940:	601a      	str	r2, [r3, #0]
             ((hqspi->Init.FifoThreshold - 1U) << QUADSPI_CR_FTHRES_Pos));

  /* Wait till BUSY flag reset */
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 800a942:	687b      	ldr	r3, [r7, #4]
 800a944:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a946:	9300      	str	r3, [sp, #0]
 800a948:	68fb      	ldr	r3, [r7, #12]
 800a94a:	2200      	movs	r2, #0
 800a94c:	2120      	movs	r1, #32
 800a94e:	6878      	ldr	r0, [r7, #4]
 800a950:	f000 fa60 	bl	800ae14 <QSPI_WaitFlagStateUntilTimeout>
 800a954:	4603      	mov	r3, r0
 800a956:	72fb      	strb	r3, [r7, #11]

  if(status == HAL_OK)
 800a958:	7afb      	ldrb	r3, [r7, #11]
 800a95a:	2b00      	cmp	r3, #0
 800a95c:	d131      	bne.n	800a9c2 <HAL_QSPI_Init+0xd6>
#if defined(QUADSPI_CR_DFM)
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM),
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting  | hqspi->Init.FlashID | hqspi->Init.DualFlash));
#else
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT),
 800a95e:	687b      	ldr	r3, [r7, #4]
 800a960:	681b      	ldr	r3, [r3, #0]
 800a962:	681b      	ldr	r3, [r3, #0]
 800a964:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 800a968:	f023 0310 	bic.w	r3, r3, #16
 800a96c:	687a      	ldr	r2, [r7, #4]
 800a96e:	6852      	ldr	r2, [r2, #4]
 800a970:	0611      	lsls	r1, r2, #24
 800a972:	687a      	ldr	r2, [r7, #4]
 800a974:	68d2      	ldr	r2, [r2, #12]
 800a976:	4311      	orrs	r1, r2
 800a978:	687a      	ldr	r2, [r7, #4]
 800a97a:	6812      	ldr	r2, [r2, #0]
 800a97c:	430b      	orrs	r3, r1
 800a97e:	6013      	str	r3, [r2, #0]
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting));
#endif

    /* Configure QSPI Flash Size, CS High Time and Clock Mode */
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
 800a980:	687b      	ldr	r3, [r7, #4]
 800a982:	681b      	ldr	r3, [r3, #0]
 800a984:	685a      	ldr	r2, [r3, #4]
 800a986:	4b13      	ldr	r3, [pc, #76]	@ (800a9d4 <HAL_QSPI_Init+0xe8>)
 800a988:	4013      	ands	r3, r2
 800a98a:	687a      	ldr	r2, [r7, #4]
 800a98c:	6912      	ldr	r2, [r2, #16]
 800a98e:	0411      	lsls	r1, r2, #16
 800a990:	687a      	ldr	r2, [r7, #4]
 800a992:	6952      	ldr	r2, [r2, #20]
 800a994:	4311      	orrs	r1, r2
 800a996:	687a      	ldr	r2, [r7, #4]
 800a998:	6992      	ldr	r2, [r2, #24]
 800a99a:	4311      	orrs	r1, r2
 800a99c:	687a      	ldr	r2, [r7, #4]
 800a99e:	6812      	ldr	r2, [r2, #0]
 800a9a0:	430b      	orrs	r3, r1
 800a9a2:	6053      	str	r3, [r2, #4]
               ((hqspi->Init.FlashSize << QUADSPI_DCR_FSIZE_Pos) |
                hqspi->Init.ChipSelectHighTime | hqspi->Init.ClockMode));

    /* Enable the QSPI peripheral */
    __HAL_QSPI_ENABLE(hqspi);
 800a9a4:	687b      	ldr	r3, [r7, #4]
 800a9a6:	681b      	ldr	r3, [r3, #0]
 800a9a8:	681a      	ldr	r2, [r3, #0]
 800a9aa:	687b      	ldr	r3, [r7, #4]
 800a9ac:	681b      	ldr	r3, [r3, #0]
 800a9ae:	f042 0201 	orr.w	r2, r2, #1
 800a9b2:	601a      	str	r2, [r3, #0]

    /* Set QSPI error code to none */
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 800a9b4:	687b      	ldr	r3, [r7, #4]
 800a9b6:	2200      	movs	r2, #0
 800a9b8:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Initialize the QSPI state */
    hqspi->State = HAL_QSPI_STATE_READY;
 800a9ba:	687b      	ldr	r3, [r7, #4]
 800a9bc:	2201      	movs	r2, #1
 800a9be:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
  }

  /* Release Lock */
  __HAL_UNLOCK(hqspi);
 800a9c2:	687b      	ldr	r3, [r7, #4]
 800a9c4:	2200      	movs	r2, #0
 800a9c6:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  /* Return function status */
  return status;
 800a9ca:	7afb      	ldrb	r3, [r7, #11]
}
 800a9cc:	4618      	mov	r0, r3
 800a9ce:	3710      	adds	r7, #16
 800a9d0:	46bd      	mov	sp, r7
 800a9d2:	bd80      	pop	{r7, pc}
 800a9d4:	ffe0f8fe 	.word	0xffe0f8fe

0800a9d8 <HAL_QSPI_Command>:
  * @param Timeout Timeout duration
  * @note   This function is used only in Indirect Read or Write Modes
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Command(QSPI_HandleTypeDef *hqspi, QSPI_CommandTypeDef *cmd, uint32_t Timeout)
{
 800a9d8:	b580      	push	{r7, lr}
 800a9da:	b088      	sub	sp, #32
 800a9dc:	af02      	add	r7, sp, #8
 800a9de:	60f8      	str	r0, [r7, #12]
 800a9e0:	60b9      	str	r1, [r7, #8]
 800a9e2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 800a9e4:	f7fc ff70 	bl	80078c8 <HAL_GetTick>
 800a9e8:	6138      	str	r0, [r7, #16]
  assert_param(IS_QSPI_DDR_MODE(cmd->DdrMode));
  assert_param(IS_QSPI_DDR_HHC(cmd->DdrHoldHalfCycle));
  assert_param(IS_QSPI_SIOO_MODE(cmd->SIOOMode));

  /* Process locked */
  __HAL_LOCK(hqspi);
 800a9ea:	68fb      	ldr	r3, [r7, #12]
 800a9ec:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800a9f0:	b2db      	uxtb	r3, r3
 800a9f2:	2b01      	cmp	r3, #1
 800a9f4:	d101      	bne.n	800a9fa <HAL_QSPI_Command+0x22>
 800a9f6:	2302      	movs	r3, #2
 800a9f8:	e048      	b.n	800aa8c <HAL_QSPI_Command+0xb4>
 800a9fa:	68fb      	ldr	r3, [r7, #12]
 800a9fc:	2201      	movs	r2, #1
 800a9fe:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  if(hqspi->State == HAL_QSPI_STATE_READY)
 800aa02:	68fb      	ldr	r3, [r7, #12]
 800aa04:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 800aa08:	b2db      	uxtb	r3, r3
 800aa0a:	2b01      	cmp	r3, #1
 800aa0c:	d137      	bne.n	800aa7e <HAL_QSPI_Command+0xa6>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 800aa0e:	68fb      	ldr	r3, [r7, #12]
 800aa10:	2200      	movs	r2, #0
 800aa12:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Update QSPI state */
    hqspi->State = HAL_QSPI_STATE_BUSY;
 800aa14:	68fb      	ldr	r3, [r7, #12]
 800aa16:	2202      	movs	r2, #2
 800aa18:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

    /* Wait till BUSY flag reset */
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 800aa1c:	687b      	ldr	r3, [r7, #4]
 800aa1e:	9300      	str	r3, [sp, #0]
 800aa20:	693b      	ldr	r3, [r7, #16]
 800aa22:	2200      	movs	r2, #0
 800aa24:	2120      	movs	r1, #32
 800aa26:	68f8      	ldr	r0, [r7, #12]
 800aa28:	f000 f9f4 	bl	800ae14 <QSPI_WaitFlagStateUntilTimeout>
 800aa2c:	4603      	mov	r3, r0
 800aa2e:	75fb      	strb	r3, [r7, #23]

    if (status == HAL_OK)
 800aa30:	7dfb      	ldrb	r3, [r7, #23]
 800aa32:	2b00      	cmp	r3, #0
 800aa34:	d125      	bne.n	800aa82 <HAL_QSPI_Command+0xaa>
    {
      /* Call the configuration function */
      QSPI_Config(hqspi, cmd, QSPI_FUNCTIONAL_MODE_INDIRECT_WRITE);
 800aa36:	2200      	movs	r2, #0
 800aa38:	68b9      	ldr	r1, [r7, #8]
 800aa3a:	68f8      	ldr	r0, [r7, #12]
 800aa3c:	f000 fa21 	bl	800ae82 <QSPI_Config>

      if (cmd->DataMode == QSPI_DATA_NONE)
 800aa40:	68bb      	ldr	r3, [r7, #8]
 800aa42:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800aa44:	2b00      	cmp	r3, #0
 800aa46:	d115      	bne.n	800aa74 <HAL_QSPI_Command+0x9c>
      {
        /* When there is no data phase, the transfer start as soon as the configuration is done
        so wait until TC flag is set to go back in idle state */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, Timeout);
 800aa48:	687b      	ldr	r3, [r7, #4]
 800aa4a:	9300      	str	r3, [sp, #0]
 800aa4c:	693b      	ldr	r3, [r7, #16]
 800aa4e:	2201      	movs	r2, #1
 800aa50:	2102      	movs	r1, #2
 800aa52:	68f8      	ldr	r0, [r7, #12]
 800aa54:	f000 f9de 	bl	800ae14 <QSPI_WaitFlagStateUntilTimeout>
 800aa58:	4603      	mov	r3, r0
 800aa5a:	75fb      	strb	r3, [r7, #23]

        if (status == HAL_OK)
 800aa5c:	7dfb      	ldrb	r3, [r7, #23]
 800aa5e:	2b00      	cmp	r3, #0
 800aa60:	d10f      	bne.n	800aa82 <HAL_QSPI_Command+0xaa>
        {
          __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 800aa62:	68fb      	ldr	r3, [r7, #12]
 800aa64:	681b      	ldr	r3, [r3, #0]
 800aa66:	2202      	movs	r2, #2
 800aa68:	60da      	str	r2, [r3, #12]

          /* Update QSPI state */
          hqspi->State = HAL_QSPI_STATE_READY;
 800aa6a:	68fb      	ldr	r3, [r7, #12]
 800aa6c:	2201      	movs	r2, #1
 800aa6e:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
 800aa72:	e006      	b.n	800aa82 <HAL_QSPI_Command+0xaa>
        }
      }
      else
      {
        /* Update QSPI state */
        hqspi->State = HAL_QSPI_STATE_READY;
 800aa74:	68fb      	ldr	r3, [r7, #12]
 800aa76:	2201      	movs	r2, #1
 800aa78:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
 800aa7c:	e001      	b.n	800aa82 <HAL_QSPI_Command+0xaa>
      }
    }
  }
  else
  {
    status = HAL_BUSY;
 800aa7e:	2302      	movs	r3, #2
 800aa80:	75fb      	strb	r3, [r7, #23]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hqspi);
 800aa82:	68fb      	ldr	r3, [r7, #12]
 800aa84:	2200      	movs	r2, #0
 800aa86:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  /* Return function status */
  return status;
 800aa8a:	7dfb      	ldrb	r3, [r7, #23]
}
 800aa8c:	4618      	mov	r0, r3
 800aa8e:	3718      	adds	r7, #24
 800aa90:	46bd      	mov	sp, r7
 800aa92:	bd80      	pop	{r7, pc}

0800aa94 <HAL_QSPI_Transmit>:
  * @param Timeout Timeout duration
  * @note   This function is used only in Indirect Write Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Transmit(QSPI_HandleTypeDef *hqspi, uint8_t *pData, uint32_t Timeout)
{
 800aa94:	b580      	push	{r7, lr}
 800aa96:	b08a      	sub	sp, #40	@ 0x28
 800aa98:	af02      	add	r7, sp, #8
 800aa9a:	60f8      	str	r0, [r7, #12]
 800aa9c:	60b9      	str	r1, [r7, #8]
 800aa9e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800aaa0:	2300      	movs	r3, #0
 800aaa2:	77fb      	strb	r3, [r7, #31]
  uint32_t tickstart = HAL_GetTick();
 800aaa4:	f7fc ff10 	bl	80078c8 <HAL_GetTick>
 800aaa8:	61b8      	str	r0, [r7, #24]
  __IO uint32_t *data_reg = &hqspi->Instance->DR;
 800aaaa:	68fb      	ldr	r3, [r7, #12]
 800aaac:	681b      	ldr	r3, [r3, #0]
 800aaae:	3320      	adds	r3, #32
 800aab0:	617b      	str	r3, [r7, #20]

  /* Process locked */
  __HAL_LOCK(hqspi);
 800aab2:	68fb      	ldr	r3, [r7, #12]
 800aab4:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800aab8:	b2db      	uxtb	r3, r3
 800aaba:	2b01      	cmp	r3, #1
 800aabc:	d101      	bne.n	800aac2 <HAL_QSPI_Transmit+0x2e>
 800aabe:	2302      	movs	r3, #2
 800aac0:	e07b      	b.n	800abba <HAL_QSPI_Transmit+0x126>
 800aac2:	68fb      	ldr	r3, [r7, #12]
 800aac4:	2201      	movs	r2, #1
 800aac6:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  if(hqspi->State == HAL_QSPI_STATE_READY)
 800aaca:	68fb      	ldr	r3, [r7, #12]
 800aacc:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 800aad0:	b2db      	uxtb	r3, r3
 800aad2:	2b01      	cmp	r3, #1
 800aad4:	d16a      	bne.n	800abac <HAL_QSPI_Transmit+0x118>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 800aad6:	68fb      	ldr	r3, [r7, #12]
 800aad8:	2200      	movs	r2, #0
 800aada:	63da      	str	r2, [r3, #60]	@ 0x3c

    if(pData != NULL )
 800aadc:	68bb      	ldr	r3, [r7, #8]
 800aade:	2b00      	cmp	r3, #0
 800aae0:	d05b      	beq.n	800ab9a <HAL_QSPI_Transmit+0x106>
    {
      /* Update state */
      hqspi->State = HAL_QSPI_STATE_BUSY_INDIRECT_TX;
 800aae2:	68fb      	ldr	r3, [r7, #12]
 800aae4:	2212      	movs	r2, #18
 800aae6:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

      /* Configure counters and size of the handle */
      hqspi->TxXferCount = READ_REG(hqspi->Instance->DLR) + 1U;
 800aaea:	68fb      	ldr	r3, [r7, #12]
 800aaec:	681b      	ldr	r3, [r3, #0]
 800aaee:	691b      	ldr	r3, [r3, #16]
 800aaf0:	1c5a      	adds	r2, r3, #1
 800aaf2:	68fb      	ldr	r3, [r7, #12]
 800aaf4:	625a      	str	r2, [r3, #36]	@ 0x24
      hqspi->TxXferSize = READ_REG(hqspi->Instance->DLR) + 1U;
 800aaf6:	68fb      	ldr	r3, [r7, #12]
 800aaf8:	681b      	ldr	r3, [r3, #0]
 800aafa:	691b      	ldr	r3, [r3, #16]
 800aafc:	1c5a      	adds	r2, r3, #1
 800aafe:	68fb      	ldr	r3, [r7, #12]
 800ab00:	621a      	str	r2, [r3, #32]
      hqspi->pTxBuffPtr = pData;
 800ab02:	68fb      	ldr	r3, [r7, #12]
 800ab04:	68ba      	ldr	r2, [r7, #8]
 800ab06:	61da      	str	r2, [r3, #28]

      /* Configure QSPI: CCR register with functional as indirect write */
      MODIFY_REG(hqspi->Instance->CCR, QUADSPI_CCR_FMODE, QSPI_FUNCTIONAL_MODE_INDIRECT_WRITE);
 800ab08:	68fb      	ldr	r3, [r7, #12]
 800ab0a:	681b      	ldr	r3, [r3, #0]
 800ab0c:	695a      	ldr	r2, [r3, #20]
 800ab0e:	68fb      	ldr	r3, [r7, #12]
 800ab10:	681b      	ldr	r3, [r3, #0]
 800ab12:	f022 6240 	bic.w	r2, r2, #201326592	@ 0xc000000
 800ab16:	615a      	str	r2, [r3, #20]

      while(hqspi->TxXferCount > 0U)
 800ab18:	e01b      	b.n	800ab52 <HAL_QSPI_Transmit+0xbe>
      {
        /* Wait until FT flag is set to send data */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_FT, SET, tickstart, Timeout);
 800ab1a:	687b      	ldr	r3, [r7, #4]
 800ab1c:	9300      	str	r3, [sp, #0]
 800ab1e:	69bb      	ldr	r3, [r7, #24]
 800ab20:	2201      	movs	r2, #1
 800ab22:	2104      	movs	r1, #4
 800ab24:	68f8      	ldr	r0, [r7, #12]
 800ab26:	f000 f975 	bl	800ae14 <QSPI_WaitFlagStateUntilTimeout>
 800ab2a:	4603      	mov	r3, r0
 800ab2c:	77fb      	strb	r3, [r7, #31]

        if (status != HAL_OK)
 800ab2e:	7ffb      	ldrb	r3, [r7, #31]
 800ab30:	2b00      	cmp	r3, #0
 800ab32:	d113      	bne.n	800ab5c <HAL_QSPI_Transmit+0xc8>
        {
          break;
        }

        *((__IO uint8_t *)data_reg) = *hqspi->pTxBuffPtr;
 800ab34:	68fb      	ldr	r3, [r7, #12]
 800ab36:	69db      	ldr	r3, [r3, #28]
 800ab38:	781a      	ldrb	r2, [r3, #0]
 800ab3a:	697b      	ldr	r3, [r7, #20]
 800ab3c:	701a      	strb	r2, [r3, #0]
        hqspi->pTxBuffPtr++;
 800ab3e:	68fb      	ldr	r3, [r7, #12]
 800ab40:	69db      	ldr	r3, [r3, #28]
 800ab42:	1c5a      	adds	r2, r3, #1
 800ab44:	68fb      	ldr	r3, [r7, #12]
 800ab46:	61da      	str	r2, [r3, #28]
        hqspi->TxXferCount--;
 800ab48:	68fb      	ldr	r3, [r7, #12]
 800ab4a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ab4c:	1e5a      	subs	r2, r3, #1
 800ab4e:	68fb      	ldr	r3, [r7, #12]
 800ab50:	625a      	str	r2, [r3, #36]	@ 0x24
      while(hqspi->TxXferCount > 0U)
 800ab52:	68fb      	ldr	r3, [r7, #12]
 800ab54:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ab56:	2b00      	cmp	r3, #0
 800ab58:	d1df      	bne.n	800ab1a <HAL_QSPI_Transmit+0x86>
 800ab5a:	e000      	b.n	800ab5e <HAL_QSPI_Transmit+0xca>
          break;
 800ab5c:	bf00      	nop
      }

      if (status == HAL_OK)
 800ab5e:	7ffb      	ldrb	r3, [r7, #31]
 800ab60:	2b00      	cmp	r3, #0
 800ab62:	d115      	bne.n	800ab90 <HAL_QSPI_Transmit+0xfc>
      {
        /* Wait until TC flag is set to go back in idle state */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, Timeout);
 800ab64:	687b      	ldr	r3, [r7, #4]
 800ab66:	9300      	str	r3, [sp, #0]
 800ab68:	69bb      	ldr	r3, [r7, #24]
 800ab6a:	2201      	movs	r2, #1
 800ab6c:	2102      	movs	r1, #2
 800ab6e:	68f8      	ldr	r0, [r7, #12]
 800ab70:	f000 f950 	bl	800ae14 <QSPI_WaitFlagStateUntilTimeout>
 800ab74:	4603      	mov	r3, r0
 800ab76:	77fb      	strb	r3, [r7, #31]

        if (status == HAL_OK)
 800ab78:	7ffb      	ldrb	r3, [r7, #31]
 800ab7a:	2b00      	cmp	r3, #0
 800ab7c:	d108      	bne.n	800ab90 <HAL_QSPI_Transmit+0xfc>
        {
          /* Clear Transfer Complete bit */
          __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 800ab7e:	68fb      	ldr	r3, [r7, #12]
 800ab80:	681b      	ldr	r3, [r3, #0]
 800ab82:	2202      	movs	r2, #2
 800ab84:	60da      	str	r2, [r3, #12]

#if  (defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx))
          /* Clear Busy bit */
          status = HAL_QSPI_Abort(hqspi);
 800ab86:	68f8      	ldr	r0, [r7, #12]
 800ab88:	f000 f8bd 	bl	800ad06 <HAL_QSPI_Abort>
 800ab8c:	4603      	mov	r3, r0
 800ab8e:	77fb      	strb	r3, [r7, #31]
#endif
        }
      }

      /* Update QSPI state */
      hqspi->State = HAL_QSPI_STATE_READY;
 800ab90:	68fb      	ldr	r3, [r7, #12]
 800ab92:	2201      	movs	r2, #1
 800ab94:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
 800ab98:	e00a      	b.n	800abb0 <HAL_QSPI_Transmit+0x11c>
    }
    else
    {
      hqspi->ErrorCode |= HAL_QSPI_ERROR_INVALID_PARAM;
 800ab9a:	68fb      	ldr	r3, [r7, #12]
 800ab9c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ab9e:	f043 0208 	orr.w	r2, r3, #8
 800aba2:	68fb      	ldr	r3, [r7, #12]
 800aba4:	63da      	str	r2, [r3, #60]	@ 0x3c
      status = HAL_ERROR;
 800aba6:	2301      	movs	r3, #1
 800aba8:	77fb      	strb	r3, [r7, #31]
 800abaa:	e001      	b.n	800abb0 <HAL_QSPI_Transmit+0x11c>
    }
  }
  else
  {
    status = HAL_BUSY;
 800abac:	2302      	movs	r3, #2
 800abae:	77fb      	strb	r3, [r7, #31]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hqspi);
 800abb0:	68fb      	ldr	r3, [r7, #12]
 800abb2:	2200      	movs	r2, #0
 800abb4:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  return status;
 800abb8:	7ffb      	ldrb	r3, [r7, #31]
}
 800abba:	4618      	mov	r0, r3
 800abbc:	3720      	adds	r7, #32
 800abbe:	46bd      	mov	sp, r7
 800abc0:	bd80      	pop	{r7, pc}

0800abc2 <HAL_QSPI_Receive>:
  * @param Timeout Timeout duration
  * @note   This function is used only in Indirect Read Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Receive(QSPI_HandleTypeDef *hqspi, uint8_t *pData, uint32_t Timeout)
{
 800abc2:	b580      	push	{r7, lr}
 800abc4:	b08a      	sub	sp, #40	@ 0x28
 800abc6:	af02      	add	r7, sp, #8
 800abc8:	60f8      	str	r0, [r7, #12]
 800abca:	60b9      	str	r1, [r7, #8]
 800abcc:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800abce:	2300      	movs	r3, #0
 800abd0:	77fb      	strb	r3, [r7, #31]
  uint32_t tickstart = HAL_GetTick();
 800abd2:	f7fc fe79 	bl	80078c8 <HAL_GetTick>
 800abd6:	61b8      	str	r0, [r7, #24]
  uint32_t addr_reg = READ_REG(hqspi->Instance->AR);
 800abd8:	68fb      	ldr	r3, [r7, #12]
 800abda:	681b      	ldr	r3, [r3, #0]
 800abdc:	699b      	ldr	r3, [r3, #24]
 800abde:	617b      	str	r3, [r7, #20]
  __IO uint32_t *data_reg = &hqspi->Instance->DR;
 800abe0:	68fb      	ldr	r3, [r7, #12]
 800abe2:	681b      	ldr	r3, [r3, #0]
 800abe4:	3320      	adds	r3, #32
 800abe6:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hqspi);
 800abe8:	68fb      	ldr	r3, [r7, #12]
 800abea:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800abee:	b2db      	uxtb	r3, r3
 800abf0:	2b01      	cmp	r3, #1
 800abf2:	d101      	bne.n	800abf8 <HAL_QSPI_Receive+0x36>
 800abf4:	2302      	movs	r3, #2
 800abf6:	e082      	b.n	800acfe <HAL_QSPI_Receive+0x13c>
 800abf8:	68fb      	ldr	r3, [r7, #12]
 800abfa:	2201      	movs	r2, #1
 800abfc:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  if(hqspi->State == HAL_QSPI_STATE_READY)
 800ac00:	68fb      	ldr	r3, [r7, #12]
 800ac02:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 800ac06:	b2db      	uxtb	r3, r3
 800ac08:	2b01      	cmp	r3, #1
 800ac0a:	d171      	bne.n	800acf0 <HAL_QSPI_Receive+0x12e>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 800ac0c:	68fb      	ldr	r3, [r7, #12]
 800ac0e:	2200      	movs	r2, #0
 800ac10:	63da      	str	r2, [r3, #60]	@ 0x3c

    if(pData != NULL )
 800ac12:	68bb      	ldr	r3, [r7, #8]
 800ac14:	2b00      	cmp	r3, #0
 800ac16:	d062      	beq.n	800acde <HAL_QSPI_Receive+0x11c>
    {
      /* Update state */
      hqspi->State = HAL_QSPI_STATE_BUSY_INDIRECT_RX;
 800ac18:	68fb      	ldr	r3, [r7, #12]
 800ac1a:	2222      	movs	r2, #34	@ 0x22
 800ac1c:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

      /* Configure counters and size of the handle */
      hqspi->RxXferCount = READ_REG(hqspi->Instance->DLR) + 1U;
 800ac20:	68fb      	ldr	r3, [r7, #12]
 800ac22:	681b      	ldr	r3, [r3, #0]
 800ac24:	691b      	ldr	r3, [r3, #16]
 800ac26:	1c5a      	adds	r2, r3, #1
 800ac28:	68fb      	ldr	r3, [r7, #12]
 800ac2a:	631a      	str	r2, [r3, #48]	@ 0x30
      hqspi->RxXferSize = READ_REG(hqspi->Instance->DLR) + 1U;
 800ac2c:	68fb      	ldr	r3, [r7, #12]
 800ac2e:	681b      	ldr	r3, [r3, #0]
 800ac30:	691b      	ldr	r3, [r3, #16]
 800ac32:	1c5a      	adds	r2, r3, #1
 800ac34:	68fb      	ldr	r3, [r7, #12]
 800ac36:	62da      	str	r2, [r3, #44]	@ 0x2c
      hqspi->pRxBuffPtr = pData;
 800ac38:	68fb      	ldr	r3, [r7, #12]
 800ac3a:	68ba      	ldr	r2, [r7, #8]
 800ac3c:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Configure QSPI: CCR register with functional as indirect read */
      MODIFY_REG(hqspi->Instance->CCR, QUADSPI_CCR_FMODE, QSPI_FUNCTIONAL_MODE_INDIRECT_READ);
 800ac3e:	68fb      	ldr	r3, [r7, #12]
 800ac40:	681b      	ldr	r3, [r3, #0]
 800ac42:	695b      	ldr	r3, [r3, #20]
 800ac44:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800ac48:	68fb      	ldr	r3, [r7, #12]
 800ac4a:	681b      	ldr	r3, [r3, #0]
 800ac4c:	f042 6280 	orr.w	r2, r2, #67108864	@ 0x4000000
 800ac50:	615a      	str	r2, [r3, #20]

      /* Start the transfer by re-writing the address in AR register */
      WRITE_REG(hqspi->Instance->AR, addr_reg);
 800ac52:	68fb      	ldr	r3, [r7, #12]
 800ac54:	681b      	ldr	r3, [r3, #0]
 800ac56:	697a      	ldr	r2, [r7, #20]
 800ac58:	619a      	str	r2, [r3, #24]

      while(hqspi->RxXferCount > 0U)
 800ac5a:	e01c      	b.n	800ac96 <HAL_QSPI_Receive+0xd4>
      {
        /* Wait until FT or TC flag is set to read received data */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, (QSPI_FLAG_FT | QSPI_FLAG_TC), SET, tickstart, Timeout);
 800ac5c:	687b      	ldr	r3, [r7, #4]
 800ac5e:	9300      	str	r3, [sp, #0]
 800ac60:	69bb      	ldr	r3, [r7, #24]
 800ac62:	2201      	movs	r2, #1
 800ac64:	2106      	movs	r1, #6
 800ac66:	68f8      	ldr	r0, [r7, #12]
 800ac68:	f000 f8d4 	bl	800ae14 <QSPI_WaitFlagStateUntilTimeout>
 800ac6c:	4603      	mov	r3, r0
 800ac6e:	77fb      	strb	r3, [r7, #31]

        if  (status != HAL_OK)
 800ac70:	7ffb      	ldrb	r3, [r7, #31]
 800ac72:	2b00      	cmp	r3, #0
 800ac74:	d114      	bne.n	800aca0 <HAL_QSPI_Receive+0xde>
        {
          break;
        }

        *hqspi->pRxBuffPtr = *((__IO uint8_t *)data_reg);
 800ac76:	68fb      	ldr	r3, [r7, #12]
 800ac78:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ac7a:	693a      	ldr	r2, [r7, #16]
 800ac7c:	7812      	ldrb	r2, [r2, #0]
 800ac7e:	b2d2      	uxtb	r2, r2
 800ac80:	701a      	strb	r2, [r3, #0]
        hqspi->pRxBuffPtr++;
 800ac82:	68fb      	ldr	r3, [r7, #12]
 800ac84:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ac86:	1c5a      	adds	r2, r3, #1
 800ac88:	68fb      	ldr	r3, [r7, #12]
 800ac8a:	629a      	str	r2, [r3, #40]	@ 0x28
        hqspi->RxXferCount--;
 800ac8c:	68fb      	ldr	r3, [r7, #12]
 800ac8e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ac90:	1e5a      	subs	r2, r3, #1
 800ac92:	68fb      	ldr	r3, [r7, #12]
 800ac94:	631a      	str	r2, [r3, #48]	@ 0x30
      while(hqspi->RxXferCount > 0U)
 800ac96:	68fb      	ldr	r3, [r7, #12]
 800ac98:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ac9a:	2b00      	cmp	r3, #0
 800ac9c:	d1de      	bne.n	800ac5c <HAL_QSPI_Receive+0x9a>
 800ac9e:	e000      	b.n	800aca2 <HAL_QSPI_Receive+0xe0>
          break;
 800aca0:	bf00      	nop
      }

      if (status == HAL_OK)
 800aca2:	7ffb      	ldrb	r3, [r7, #31]
 800aca4:	2b00      	cmp	r3, #0
 800aca6:	d115      	bne.n	800acd4 <HAL_QSPI_Receive+0x112>
      {
        /* Wait until TC flag is set to go back in idle state */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, Timeout);
 800aca8:	687b      	ldr	r3, [r7, #4]
 800acaa:	9300      	str	r3, [sp, #0]
 800acac:	69bb      	ldr	r3, [r7, #24]
 800acae:	2201      	movs	r2, #1
 800acb0:	2102      	movs	r1, #2
 800acb2:	68f8      	ldr	r0, [r7, #12]
 800acb4:	f000 f8ae 	bl	800ae14 <QSPI_WaitFlagStateUntilTimeout>
 800acb8:	4603      	mov	r3, r0
 800acba:	77fb      	strb	r3, [r7, #31]

        if  (status == HAL_OK)
 800acbc:	7ffb      	ldrb	r3, [r7, #31]
 800acbe:	2b00      	cmp	r3, #0
 800acc0:	d108      	bne.n	800acd4 <HAL_QSPI_Receive+0x112>
        {
          /* Clear Transfer Complete bit */
          __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 800acc2:	68fb      	ldr	r3, [r7, #12]
 800acc4:	681b      	ldr	r3, [r3, #0]
 800acc6:	2202      	movs	r2, #2
 800acc8:	60da      	str	r2, [r3, #12]

#if  (defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx))
          /* Workaround - Extra data written in the FIFO at the end of a read transfer */
          status = HAL_QSPI_Abort(hqspi);
 800acca:	68f8      	ldr	r0, [r7, #12]
 800accc:	f000 f81b 	bl	800ad06 <HAL_QSPI_Abort>
 800acd0:	4603      	mov	r3, r0
 800acd2:	77fb      	strb	r3, [r7, #31]
#endif
        }
      }

      /* Update QSPI state */
      hqspi->State = HAL_QSPI_STATE_READY;
 800acd4:	68fb      	ldr	r3, [r7, #12]
 800acd6:	2201      	movs	r2, #1
 800acd8:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
 800acdc:	e00a      	b.n	800acf4 <HAL_QSPI_Receive+0x132>
    }
    else
    {
      hqspi->ErrorCode |= HAL_QSPI_ERROR_INVALID_PARAM;
 800acde:	68fb      	ldr	r3, [r7, #12]
 800ace0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ace2:	f043 0208 	orr.w	r2, r3, #8
 800ace6:	68fb      	ldr	r3, [r7, #12]
 800ace8:	63da      	str	r2, [r3, #60]	@ 0x3c
      status = HAL_ERROR;
 800acea:	2301      	movs	r3, #1
 800acec:	77fb      	strb	r3, [r7, #31]
 800acee:	e001      	b.n	800acf4 <HAL_QSPI_Receive+0x132>
    }
  }
  else
  {
    status = HAL_BUSY;
 800acf0:	2302      	movs	r3, #2
 800acf2:	77fb      	strb	r3, [r7, #31]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hqspi);
 800acf4:	68fb      	ldr	r3, [r7, #12]
 800acf6:	2200      	movs	r2, #0
 800acf8:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  return status;
 800acfc:	7ffb      	ldrb	r3, [r7, #31]
}
 800acfe:	4618      	mov	r0, r3
 800ad00:	3720      	adds	r7, #32
 800ad02:	46bd      	mov	sp, r7
 800ad04:	bd80      	pop	{r7, pc}

0800ad06 <HAL_QSPI_Abort>:
* @brief  Abort the current transmission.
* @param  hqspi QSPI handle
* @retval HAL status
*/
HAL_StatusTypeDef HAL_QSPI_Abort(QSPI_HandleTypeDef *hqspi)
{
 800ad06:	b580      	push	{r7, lr}
 800ad08:	b086      	sub	sp, #24
 800ad0a:	af02      	add	r7, sp, #8
 800ad0c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800ad0e:	2300      	movs	r3, #0
 800ad10:	73fb      	strb	r3, [r7, #15]
  uint32_t tickstart = HAL_GetTick();
 800ad12:	f7fc fdd9 	bl	80078c8 <HAL_GetTick>
 800ad16:	60b8      	str	r0, [r7, #8]

  /* Check if the state is in one of the busy states */
  if (((uint32_t)hqspi->State & 0x2U) != 0U)
 800ad18:	687b      	ldr	r3, [r7, #4]
 800ad1a:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 800ad1e:	b2db      	uxtb	r3, r3
 800ad20:	f003 0302 	and.w	r3, r3, #2
 800ad24:	2b00      	cmp	r3, #0
 800ad26:	d062      	beq.n	800adee <HAL_QSPI_Abort+0xe8>
  {
    /* Process unlocked */
    __HAL_UNLOCK(hqspi);
 800ad28:	687b      	ldr	r3, [r7, #4]
 800ad2a:	2200      	movs	r2, #0
 800ad2c:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

    if ((hqspi->Instance->CR & QUADSPI_CR_DMAEN) != 0U)
 800ad30:	687b      	ldr	r3, [r7, #4]
 800ad32:	681b      	ldr	r3, [r3, #0]
 800ad34:	681b      	ldr	r3, [r3, #0]
 800ad36:	f003 0304 	and.w	r3, r3, #4
 800ad3a:	2b00      	cmp	r3, #0
 800ad3c:	d017      	beq.n	800ad6e <HAL_QSPI_Abort+0x68>
    {
      /* Disable the DMA transfer by clearing the DMAEN bit in the QSPI CR register */
      CLEAR_BIT(hqspi->Instance->CR, QUADSPI_CR_DMAEN);
 800ad3e:	687b      	ldr	r3, [r7, #4]
 800ad40:	681b      	ldr	r3, [r3, #0]
 800ad42:	681a      	ldr	r2, [r3, #0]
 800ad44:	687b      	ldr	r3, [r7, #4]
 800ad46:	681b      	ldr	r3, [r3, #0]
 800ad48:	f022 0204 	bic.w	r2, r2, #4
 800ad4c:	601a      	str	r2, [r3, #0]

      /* Abort DMA channel */
      status = HAL_DMA_Abort(hqspi->hdma);
 800ad4e:	687b      	ldr	r3, [r7, #4]
 800ad50:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ad52:	4618      	mov	r0, r3
 800ad54:	f7fe fc9e 	bl	8009694 <HAL_DMA_Abort>
 800ad58:	4603      	mov	r3, r0
 800ad5a:	73fb      	strb	r3, [r7, #15]
      if(status != HAL_OK)
 800ad5c:	7bfb      	ldrb	r3, [r7, #15]
 800ad5e:	2b00      	cmp	r3, #0
 800ad60:	d005      	beq.n	800ad6e <HAL_QSPI_Abort+0x68>
      {
        hqspi->ErrorCode |= HAL_QSPI_ERROR_DMA;
 800ad62:	687b      	ldr	r3, [r7, #4]
 800ad64:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ad66:	f043 0204 	orr.w	r2, r3, #4
 800ad6a:	687b      	ldr	r3, [r7, #4]
 800ad6c:	63da      	str	r2, [r3, #60]	@ 0x3c
      }
    }

    if (__HAL_QSPI_GET_FLAG(hqspi, QSPI_FLAG_BUSY) != RESET)
 800ad6e:	687b      	ldr	r3, [r7, #4]
 800ad70:	681b      	ldr	r3, [r3, #0]
 800ad72:	689b      	ldr	r3, [r3, #8]
 800ad74:	f003 0320 	and.w	r3, r3, #32
 800ad78:	2b00      	cmp	r3, #0
 800ad7a:	d034      	beq.n	800ade6 <HAL_QSPI_Abort+0xe0>
    {
      /* Configure QSPI: CR register with Abort request */
      SET_BIT(hqspi->Instance->CR, QUADSPI_CR_ABORT);
 800ad7c:	687b      	ldr	r3, [r7, #4]
 800ad7e:	681b      	ldr	r3, [r3, #0]
 800ad80:	681a      	ldr	r2, [r3, #0]
 800ad82:	687b      	ldr	r3, [r7, #4]
 800ad84:	681b      	ldr	r3, [r3, #0]
 800ad86:	f042 0202 	orr.w	r2, r2, #2
 800ad8a:	601a      	str	r2, [r3, #0]
      
      /* Wait until TC flag is set to go back in idle state */
      status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, hqspi->Timeout);
 800ad8c:	687b      	ldr	r3, [r7, #4]
 800ad8e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ad90:	9300      	str	r3, [sp, #0]
 800ad92:	68bb      	ldr	r3, [r7, #8]
 800ad94:	2201      	movs	r2, #1
 800ad96:	2102      	movs	r1, #2
 800ad98:	6878      	ldr	r0, [r7, #4]
 800ad9a:	f000 f83b 	bl	800ae14 <QSPI_WaitFlagStateUntilTimeout>
 800ad9e:	4603      	mov	r3, r0
 800ada0:	73fb      	strb	r3, [r7, #15]
      
      if (status == HAL_OK)
 800ada2:	7bfb      	ldrb	r3, [r7, #15]
 800ada4:	2b00      	cmp	r3, #0
 800ada6:	d10e      	bne.n	800adc6 <HAL_QSPI_Abort+0xc0>
      {
        __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 800ada8:	687b      	ldr	r3, [r7, #4]
 800adaa:	681b      	ldr	r3, [r3, #0]
 800adac:	2202      	movs	r2, #2
 800adae:	60da      	str	r2, [r3, #12]
        
        /* Wait until BUSY flag is reset */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 800adb0:	687b      	ldr	r3, [r7, #4]
 800adb2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800adb4:	9300      	str	r3, [sp, #0]
 800adb6:	68bb      	ldr	r3, [r7, #8]
 800adb8:	2200      	movs	r2, #0
 800adba:	2120      	movs	r1, #32
 800adbc:	6878      	ldr	r0, [r7, #4]
 800adbe:	f000 f829 	bl	800ae14 <QSPI_WaitFlagStateUntilTimeout>
 800adc2:	4603      	mov	r3, r0
 800adc4:	73fb      	strb	r3, [r7, #15]
      }

      if (status == HAL_OK)
 800adc6:	7bfb      	ldrb	r3, [r7, #15]
 800adc8:	2b00      	cmp	r3, #0
 800adca:	d110      	bne.n	800adee <HAL_QSPI_Abort+0xe8>
      {
        /* Reset functional mode configuration to indirect write mode by default */
        CLEAR_BIT(hqspi->Instance->CCR, QUADSPI_CCR_FMODE);
 800adcc:	687b      	ldr	r3, [r7, #4]
 800adce:	681b      	ldr	r3, [r3, #0]
 800add0:	695a      	ldr	r2, [r3, #20]
 800add2:	687b      	ldr	r3, [r7, #4]
 800add4:	681b      	ldr	r3, [r3, #0]
 800add6:	f022 6240 	bic.w	r2, r2, #201326592	@ 0xc000000
 800adda:	615a      	str	r2, [r3, #20]
        
        /* Update state */
        hqspi->State = HAL_QSPI_STATE_READY;
 800addc:	687b      	ldr	r3, [r7, #4]
 800adde:	2201      	movs	r2, #1
 800ade0:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
 800ade4:	e003      	b.n	800adee <HAL_QSPI_Abort+0xe8>
      }
    }
    else
    {
      /* Update state */
      hqspi->State = HAL_QSPI_STATE_READY;
 800ade6:	687b      	ldr	r3, [r7, #4]
 800ade8:	2201      	movs	r2, #1
 800adea:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
    }
  }

  return status;
 800adee:	7bfb      	ldrb	r3, [r7, #15]
}
 800adf0:	4618      	mov	r0, r3
 800adf2:	3710      	adds	r7, #16
 800adf4:	46bd      	mov	sp, r7
 800adf6:	bd80      	pop	{r7, pc}

0800adf8 <HAL_QSPI_SetTimeout>:
  * @param  hqspi QSPI handle.
  * @param  Timeout Timeout for the QSPI memory access.
  * @retval None
  */
void HAL_QSPI_SetTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
{
 800adf8:	b480      	push	{r7}
 800adfa:	b083      	sub	sp, #12
 800adfc:	af00      	add	r7, sp, #0
 800adfe:	6078      	str	r0, [r7, #4]
 800ae00:	6039      	str	r1, [r7, #0]
  hqspi->Timeout = Timeout;
 800ae02:	687b      	ldr	r3, [r7, #4]
 800ae04:	683a      	ldr	r2, [r7, #0]
 800ae06:	641a      	str	r2, [r3, #64]	@ 0x40
}
 800ae08:	bf00      	nop
 800ae0a:	370c      	adds	r7, #12
 800ae0c:	46bd      	mov	sp, r7
 800ae0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae12:	4770      	bx	lr

0800ae14 <QSPI_WaitFlagStateUntilTimeout>:
  * @param  Timeout Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef QSPI_WaitFlagStateUntilTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 800ae14:	b580      	push	{r7, lr}
 800ae16:	b084      	sub	sp, #16
 800ae18:	af00      	add	r7, sp, #0
 800ae1a:	60f8      	str	r0, [r7, #12]
 800ae1c:	60b9      	str	r1, [r7, #8]
 800ae1e:	603b      	str	r3, [r7, #0]
 800ae20:	4613      	mov	r3, r2
 800ae22:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 800ae24:	e01a      	b.n	800ae5c <QSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800ae26:	69bb      	ldr	r3, [r7, #24]
 800ae28:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ae2c:	d016      	beq.n	800ae5c <QSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800ae2e:	f7fc fd4b 	bl	80078c8 <HAL_GetTick>
 800ae32:	4602      	mov	r2, r0
 800ae34:	683b      	ldr	r3, [r7, #0]
 800ae36:	1ad3      	subs	r3, r2, r3
 800ae38:	69ba      	ldr	r2, [r7, #24]
 800ae3a:	429a      	cmp	r2, r3
 800ae3c:	d302      	bcc.n	800ae44 <QSPI_WaitFlagStateUntilTimeout+0x30>
 800ae3e:	69bb      	ldr	r3, [r7, #24]
 800ae40:	2b00      	cmp	r3, #0
 800ae42:	d10b      	bne.n	800ae5c <QSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 800ae44:	68fb      	ldr	r3, [r7, #12]
 800ae46:	2204      	movs	r2, #4
 800ae48:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 800ae4c:	68fb      	ldr	r3, [r7, #12]
 800ae4e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ae50:	f043 0201 	orr.w	r2, r3, #1
 800ae54:	68fb      	ldr	r3, [r7, #12]
 800ae56:	63da      	str	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 800ae58:	2301      	movs	r3, #1
 800ae5a:	e00e      	b.n	800ae7a <QSPI_WaitFlagStateUntilTimeout+0x66>
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 800ae5c:	68fb      	ldr	r3, [r7, #12]
 800ae5e:	681b      	ldr	r3, [r3, #0]
 800ae60:	689a      	ldr	r2, [r3, #8]
 800ae62:	68bb      	ldr	r3, [r7, #8]
 800ae64:	4013      	ands	r3, r2
 800ae66:	2b00      	cmp	r3, #0
 800ae68:	bf14      	ite	ne
 800ae6a:	2301      	movne	r3, #1
 800ae6c:	2300      	moveq	r3, #0
 800ae6e:	b2db      	uxtb	r3, r3
 800ae70:	461a      	mov	r2, r3
 800ae72:	79fb      	ldrb	r3, [r7, #7]
 800ae74:	429a      	cmp	r2, r3
 800ae76:	d1d6      	bne.n	800ae26 <QSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800ae78:	2300      	movs	r3, #0
}
 800ae7a:	4618      	mov	r0, r3
 800ae7c:	3710      	adds	r7, #16
 800ae7e:	46bd      	mov	sp, r7
 800ae80:	bd80      	pop	{r7, pc}

0800ae82 <QSPI_Config>:
  *            @arg QSPI_FUNCTIONAL_MODE_AUTO_POLLING: Automatic polling mode
  *            @arg QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED: Memory-mapped mode
  * @retval None
  */
static void QSPI_Config(QSPI_HandleTypeDef *hqspi, QSPI_CommandTypeDef *cmd, uint32_t FunctionalMode)
{
 800ae82:	b480      	push	{r7}
 800ae84:	b085      	sub	sp, #20
 800ae86:	af00      	add	r7, sp, #0
 800ae88:	60f8      	str	r0, [r7, #12]
 800ae8a:	60b9      	str	r1, [r7, #8]
 800ae8c:	607a      	str	r2, [r7, #4]
  assert_param(IS_QSPI_FUNCTIONAL_MODE(FunctionalMode));

  if ((cmd->DataMode != QSPI_DATA_NONE) && (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED))
 800ae8e:	68bb      	ldr	r3, [r7, #8]
 800ae90:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ae92:	2b00      	cmp	r3, #0
 800ae94:	d009      	beq.n	800aeaa <QSPI_Config+0x28>
 800ae96:	687b      	ldr	r3, [r7, #4]
 800ae98:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 800ae9c:	d005      	beq.n	800aeaa <QSPI_Config+0x28>
  {
    /* Configure QSPI: DLR register with the number of data to read or write */
    WRITE_REG(hqspi->Instance->DLR, (cmd->NbData - 1U));
 800ae9e:	68bb      	ldr	r3, [r7, #8]
 800aea0:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800aea2:	68fb      	ldr	r3, [r7, #12]
 800aea4:	681b      	ldr	r3, [r3, #0]
 800aea6:	3a01      	subs	r2, #1
 800aea8:	611a      	str	r2, [r3, #16]
  }

  if (cmd->InstructionMode != QSPI_INSTRUCTION_NONE)
 800aeaa:	68bb      	ldr	r3, [r7, #8]
 800aeac:	699b      	ldr	r3, [r3, #24]
 800aeae:	2b00      	cmp	r3, #0
 800aeb0:	f000 80c1 	beq.w	800b036 <QSPI_Config+0x1b4>
  {
    if (cmd->AlternateByteMode != QSPI_ALTERNATE_BYTES_NONE)
 800aeb4:	68bb      	ldr	r3, [r7, #8]
 800aeb6:	6a1b      	ldr	r3, [r3, #32]
 800aeb8:	2b00      	cmp	r3, #0
 800aeba:	d063      	beq.n	800af84 <QSPI_Config+0x102>
    {
      /* Configure QSPI: ABR register with alternate bytes value */
      WRITE_REG(hqspi->Instance->ABR, cmd->AlternateBytes);
 800aebc:	68fb      	ldr	r3, [r7, #12]
 800aebe:	681b      	ldr	r3, [r3, #0]
 800aec0:	68ba      	ldr	r2, [r7, #8]
 800aec2:	6892      	ldr	r2, [r2, #8]
 800aec4:	61da      	str	r2, [r3, #28]

      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 800aec6:	68bb      	ldr	r3, [r7, #8]
 800aec8:	69db      	ldr	r3, [r3, #28]
 800aeca:	2b00      	cmp	r3, #0
 800aecc:	d031      	beq.n	800af32 <QSPI_Config+0xb0>
      {
        /*---- Command with instruction, address and alternate bytes ----*/
        /* Configure QSPI: CCR register with all communications parameters */
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800aece:	68bb      	ldr	r3, [r7, #8]
 800aed0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800aed2:	68bb      	ldr	r3, [r7, #8]
 800aed4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800aed6:	431a      	orrs	r2, r3
 800aed8:	68bb      	ldr	r3, [r7, #8]
 800aeda:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800aedc:	431a      	orrs	r2, r3
 800aede:	68bb      	ldr	r3, [r7, #8]
 800aee0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800aee2:	431a      	orrs	r2, r3
 800aee4:	68bb      	ldr	r3, [r7, #8]
 800aee6:	695b      	ldr	r3, [r3, #20]
 800aee8:	049b      	lsls	r3, r3, #18
 800aeea:	431a      	orrs	r2, r3
 800aeec:	68bb      	ldr	r3, [r7, #8]
 800aeee:	691b      	ldr	r3, [r3, #16]
 800aef0:	431a      	orrs	r2, r3
 800aef2:	68bb      	ldr	r3, [r7, #8]
 800aef4:	6a1b      	ldr	r3, [r3, #32]
 800aef6:	431a      	orrs	r2, r3
 800aef8:	68bb      	ldr	r3, [r7, #8]
 800aefa:	68db      	ldr	r3, [r3, #12]
 800aefc:	431a      	orrs	r2, r3
 800aefe:	68bb      	ldr	r3, [r7, #8]
 800af00:	69db      	ldr	r3, [r3, #28]
 800af02:	431a      	orrs	r2, r3
 800af04:	68bb      	ldr	r3, [r7, #8]
 800af06:	699b      	ldr	r3, [r3, #24]
 800af08:	431a      	orrs	r2, r3
 800af0a:	68bb      	ldr	r3, [r7, #8]
 800af0c:	681b      	ldr	r3, [r3, #0]
 800af0e:	ea42 0103 	orr.w	r1, r2, r3
 800af12:	68fb      	ldr	r3, [r7, #12]
 800af14:	681b      	ldr	r3, [r3, #0]
 800af16:	687a      	ldr	r2, [r7, #4]
 800af18:	430a      	orrs	r2, r1
 800af1a:	615a      	str	r2, [r3, #20]
                                         cmd->DataMode | (cmd->DummyCycles << QUADSPI_CCR_DCYC_Pos) |
                                         cmd->AlternateBytesSize | cmd->AlternateByteMode |
                                         cmd->AddressSize | cmd->AddressMode | cmd->InstructionMode |
                                         cmd->Instruction | FunctionalMode));

        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 800af1c:	687b      	ldr	r3, [r7, #4]
 800af1e:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 800af22:	f000 813f 	beq.w	800b1a4 <QSPI_Config+0x322>
        {
          /* Configure QSPI: AR register with address value */
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 800af26:	68fb      	ldr	r3, [r7, #12]
 800af28:	681b      	ldr	r3, [r3, #0]
 800af2a:	68ba      	ldr	r2, [r7, #8]
 800af2c:	6852      	ldr	r2, [r2, #4]
 800af2e:	619a      	str	r2, [r3, #24]
          CLEAR_REG(hqspi->Instance->AR);
        }
      }
    }
  }
}
 800af30:	e138      	b.n	800b1a4 <QSPI_Config+0x322>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800af32:	68bb      	ldr	r3, [r7, #8]
 800af34:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800af36:	68bb      	ldr	r3, [r7, #8]
 800af38:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800af3a:	431a      	orrs	r2, r3
 800af3c:	68bb      	ldr	r3, [r7, #8]
 800af3e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800af40:	431a      	orrs	r2, r3
 800af42:	68bb      	ldr	r3, [r7, #8]
 800af44:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800af46:	431a      	orrs	r2, r3
 800af48:	68bb      	ldr	r3, [r7, #8]
 800af4a:	695b      	ldr	r3, [r3, #20]
 800af4c:	049b      	lsls	r3, r3, #18
 800af4e:	431a      	orrs	r2, r3
 800af50:	68bb      	ldr	r3, [r7, #8]
 800af52:	691b      	ldr	r3, [r3, #16]
 800af54:	431a      	orrs	r2, r3
 800af56:	68bb      	ldr	r3, [r7, #8]
 800af58:	6a1b      	ldr	r3, [r3, #32]
 800af5a:	431a      	orrs	r2, r3
 800af5c:	68bb      	ldr	r3, [r7, #8]
 800af5e:	69db      	ldr	r3, [r3, #28]
 800af60:	431a      	orrs	r2, r3
 800af62:	68bb      	ldr	r3, [r7, #8]
 800af64:	699b      	ldr	r3, [r3, #24]
 800af66:	431a      	orrs	r2, r3
 800af68:	68bb      	ldr	r3, [r7, #8]
 800af6a:	681b      	ldr	r3, [r3, #0]
 800af6c:	ea42 0103 	orr.w	r1, r2, r3
 800af70:	68fb      	ldr	r3, [r7, #12]
 800af72:	681b      	ldr	r3, [r3, #0]
 800af74:	687a      	ldr	r2, [r7, #4]
 800af76:	430a      	orrs	r2, r1
 800af78:	615a      	str	r2, [r3, #20]
        CLEAR_REG(hqspi->Instance->AR);
 800af7a:	68fb      	ldr	r3, [r7, #12]
 800af7c:	681b      	ldr	r3, [r3, #0]
 800af7e:	2200      	movs	r2, #0
 800af80:	619a      	str	r2, [r3, #24]
}
 800af82:	e10f      	b.n	800b1a4 <QSPI_Config+0x322>
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 800af84:	68bb      	ldr	r3, [r7, #8]
 800af86:	69db      	ldr	r3, [r3, #28]
 800af88:	2b00      	cmp	r3, #0
 800af8a:	d02e      	beq.n	800afea <QSPI_Config+0x168>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800af8c:	68bb      	ldr	r3, [r7, #8]
 800af8e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800af90:	68bb      	ldr	r3, [r7, #8]
 800af92:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800af94:	431a      	orrs	r2, r3
 800af96:	68bb      	ldr	r3, [r7, #8]
 800af98:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800af9a:	431a      	orrs	r2, r3
 800af9c:	68bb      	ldr	r3, [r7, #8]
 800af9e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800afa0:	431a      	orrs	r2, r3
 800afa2:	68bb      	ldr	r3, [r7, #8]
 800afa4:	695b      	ldr	r3, [r3, #20]
 800afa6:	049b      	lsls	r3, r3, #18
 800afa8:	431a      	orrs	r2, r3
 800afaa:	68bb      	ldr	r3, [r7, #8]
 800afac:	6a1b      	ldr	r3, [r3, #32]
 800afae:	431a      	orrs	r2, r3
 800afb0:	68bb      	ldr	r3, [r7, #8]
 800afb2:	68db      	ldr	r3, [r3, #12]
 800afb4:	431a      	orrs	r2, r3
 800afb6:	68bb      	ldr	r3, [r7, #8]
 800afb8:	69db      	ldr	r3, [r3, #28]
 800afba:	431a      	orrs	r2, r3
 800afbc:	68bb      	ldr	r3, [r7, #8]
 800afbe:	699b      	ldr	r3, [r3, #24]
 800afc0:	431a      	orrs	r2, r3
 800afc2:	68bb      	ldr	r3, [r7, #8]
 800afc4:	681b      	ldr	r3, [r3, #0]
 800afc6:	ea42 0103 	orr.w	r1, r2, r3
 800afca:	68fb      	ldr	r3, [r7, #12]
 800afcc:	681b      	ldr	r3, [r3, #0]
 800afce:	687a      	ldr	r2, [r7, #4]
 800afd0:	430a      	orrs	r2, r1
 800afd2:	615a      	str	r2, [r3, #20]
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 800afd4:	687b      	ldr	r3, [r7, #4]
 800afd6:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 800afda:	f000 80e3 	beq.w	800b1a4 <QSPI_Config+0x322>
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 800afde:	68fb      	ldr	r3, [r7, #12]
 800afe0:	681b      	ldr	r3, [r3, #0]
 800afe2:	68ba      	ldr	r2, [r7, #8]
 800afe4:	6852      	ldr	r2, [r2, #4]
 800afe6:	619a      	str	r2, [r3, #24]
}
 800afe8:	e0dc      	b.n	800b1a4 <QSPI_Config+0x322>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800afea:	68bb      	ldr	r3, [r7, #8]
 800afec:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800afee:	68bb      	ldr	r3, [r7, #8]
 800aff0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800aff2:	431a      	orrs	r2, r3
 800aff4:	68bb      	ldr	r3, [r7, #8]
 800aff6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800aff8:	431a      	orrs	r2, r3
 800affa:	68bb      	ldr	r3, [r7, #8]
 800affc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800affe:	431a      	orrs	r2, r3
 800b000:	68bb      	ldr	r3, [r7, #8]
 800b002:	695b      	ldr	r3, [r3, #20]
 800b004:	049b      	lsls	r3, r3, #18
 800b006:	431a      	orrs	r2, r3
 800b008:	68bb      	ldr	r3, [r7, #8]
 800b00a:	6a1b      	ldr	r3, [r3, #32]
 800b00c:	431a      	orrs	r2, r3
 800b00e:	68bb      	ldr	r3, [r7, #8]
 800b010:	69db      	ldr	r3, [r3, #28]
 800b012:	431a      	orrs	r2, r3
 800b014:	68bb      	ldr	r3, [r7, #8]
 800b016:	699b      	ldr	r3, [r3, #24]
 800b018:	431a      	orrs	r2, r3
 800b01a:	68bb      	ldr	r3, [r7, #8]
 800b01c:	681b      	ldr	r3, [r3, #0]
 800b01e:	ea42 0103 	orr.w	r1, r2, r3
 800b022:	68fb      	ldr	r3, [r7, #12]
 800b024:	681b      	ldr	r3, [r3, #0]
 800b026:	687a      	ldr	r2, [r7, #4]
 800b028:	430a      	orrs	r2, r1
 800b02a:	615a      	str	r2, [r3, #20]
        CLEAR_REG(hqspi->Instance->AR);
 800b02c:	68fb      	ldr	r3, [r7, #12]
 800b02e:	681b      	ldr	r3, [r3, #0]
 800b030:	2200      	movs	r2, #0
 800b032:	619a      	str	r2, [r3, #24]
}
 800b034:	e0b6      	b.n	800b1a4 <QSPI_Config+0x322>
    if (cmd->AlternateByteMode != QSPI_ALTERNATE_BYTES_NONE)
 800b036:	68bb      	ldr	r3, [r7, #8]
 800b038:	6a1b      	ldr	r3, [r3, #32]
 800b03a:	2b00      	cmp	r3, #0
 800b03c:	d05d      	beq.n	800b0fa <QSPI_Config+0x278>
      WRITE_REG(hqspi->Instance->ABR, cmd->AlternateBytes);
 800b03e:	68fb      	ldr	r3, [r7, #12]
 800b040:	681b      	ldr	r3, [r3, #0]
 800b042:	68ba      	ldr	r2, [r7, #8]
 800b044:	6892      	ldr	r2, [r2, #8]
 800b046:	61da      	str	r2, [r3, #28]
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 800b048:	68bb      	ldr	r3, [r7, #8]
 800b04a:	69db      	ldr	r3, [r3, #28]
 800b04c:	2b00      	cmp	r3, #0
 800b04e:	d02e      	beq.n	800b0ae <QSPI_Config+0x22c>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800b050:	68bb      	ldr	r3, [r7, #8]
 800b052:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b054:	68bb      	ldr	r3, [r7, #8]
 800b056:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b058:	431a      	orrs	r2, r3
 800b05a:	68bb      	ldr	r3, [r7, #8]
 800b05c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b05e:	431a      	orrs	r2, r3
 800b060:	68bb      	ldr	r3, [r7, #8]
 800b062:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b064:	431a      	orrs	r2, r3
 800b066:	68bb      	ldr	r3, [r7, #8]
 800b068:	695b      	ldr	r3, [r3, #20]
 800b06a:	049b      	lsls	r3, r3, #18
 800b06c:	431a      	orrs	r2, r3
 800b06e:	68bb      	ldr	r3, [r7, #8]
 800b070:	691b      	ldr	r3, [r3, #16]
 800b072:	431a      	orrs	r2, r3
 800b074:	68bb      	ldr	r3, [r7, #8]
 800b076:	6a1b      	ldr	r3, [r3, #32]
 800b078:	431a      	orrs	r2, r3
 800b07a:	68bb      	ldr	r3, [r7, #8]
 800b07c:	68db      	ldr	r3, [r3, #12]
 800b07e:	431a      	orrs	r2, r3
 800b080:	68bb      	ldr	r3, [r7, #8]
 800b082:	69db      	ldr	r3, [r3, #28]
 800b084:	431a      	orrs	r2, r3
 800b086:	68bb      	ldr	r3, [r7, #8]
 800b088:	699b      	ldr	r3, [r3, #24]
 800b08a:	ea42 0103 	orr.w	r1, r2, r3
 800b08e:	68fb      	ldr	r3, [r7, #12]
 800b090:	681b      	ldr	r3, [r3, #0]
 800b092:	687a      	ldr	r2, [r7, #4]
 800b094:	430a      	orrs	r2, r1
 800b096:	615a      	str	r2, [r3, #20]
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 800b098:	687b      	ldr	r3, [r7, #4]
 800b09a:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 800b09e:	f000 8081 	beq.w	800b1a4 <QSPI_Config+0x322>
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 800b0a2:	68fb      	ldr	r3, [r7, #12]
 800b0a4:	681b      	ldr	r3, [r3, #0]
 800b0a6:	68ba      	ldr	r2, [r7, #8]
 800b0a8:	6852      	ldr	r2, [r2, #4]
 800b0aa:	619a      	str	r2, [r3, #24]
}
 800b0ac:	e07a      	b.n	800b1a4 <QSPI_Config+0x322>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800b0ae:	68bb      	ldr	r3, [r7, #8]
 800b0b0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b0b2:	68bb      	ldr	r3, [r7, #8]
 800b0b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b0b6:	431a      	orrs	r2, r3
 800b0b8:	68bb      	ldr	r3, [r7, #8]
 800b0ba:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b0bc:	431a      	orrs	r2, r3
 800b0be:	68bb      	ldr	r3, [r7, #8]
 800b0c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b0c2:	431a      	orrs	r2, r3
 800b0c4:	68bb      	ldr	r3, [r7, #8]
 800b0c6:	695b      	ldr	r3, [r3, #20]
 800b0c8:	049b      	lsls	r3, r3, #18
 800b0ca:	431a      	orrs	r2, r3
 800b0cc:	68bb      	ldr	r3, [r7, #8]
 800b0ce:	691b      	ldr	r3, [r3, #16]
 800b0d0:	431a      	orrs	r2, r3
 800b0d2:	68bb      	ldr	r3, [r7, #8]
 800b0d4:	6a1b      	ldr	r3, [r3, #32]
 800b0d6:	431a      	orrs	r2, r3
 800b0d8:	68bb      	ldr	r3, [r7, #8]
 800b0da:	69db      	ldr	r3, [r3, #28]
 800b0dc:	431a      	orrs	r2, r3
 800b0de:	68bb      	ldr	r3, [r7, #8]
 800b0e0:	699b      	ldr	r3, [r3, #24]
 800b0e2:	ea42 0103 	orr.w	r1, r2, r3
 800b0e6:	68fb      	ldr	r3, [r7, #12]
 800b0e8:	681b      	ldr	r3, [r3, #0]
 800b0ea:	687a      	ldr	r2, [r7, #4]
 800b0ec:	430a      	orrs	r2, r1
 800b0ee:	615a      	str	r2, [r3, #20]
        CLEAR_REG(hqspi->Instance->AR);
 800b0f0:	68fb      	ldr	r3, [r7, #12]
 800b0f2:	681b      	ldr	r3, [r3, #0]
 800b0f4:	2200      	movs	r2, #0
 800b0f6:	619a      	str	r2, [r3, #24]
}
 800b0f8:	e054      	b.n	800b1a4 <QSPI_Config+0x322>
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 800b0fa:	68bb      	ldr	r3, [r7, #8]
 800b0fc:	69db      	ldr	r3, [r3, #28]
 800b0fe:	2b00      	cmp	r3, #0
 800b100:	d02a      	beq.n	800b158 <QSPI_Config+0x2d6>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800b102:	68bb      	ldr	r3, [r7, #8]
 800b104:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b106:	68bb      	ldr	r3, [r7, #8]
 800b108:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b10a:	431a      	orrs	r2, r3
 800b10c:	68bb      	ldr	r3, [r7, #8]
 800b10e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b110:	431a      	orrs	r2, r3
 800b112:	68bb      	ldr	r3, [r7, #8]
 800b114:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b116:	431a      	orrs	r2, r3
 800b118:	68bb      	ldr	r3, [r7, #8]
 800b11a:	695b      	ldr	r3, [r3, #20]
 800b11c:	049b      	lsls	r3, r3, #18
 800b11e:	431a      	orrs	r2, r3
 800b120:	68bb      	ldr	r3, [r7, #8]
 800b122:	6a1b      	ldr	r3, [r3, #32]
 800b124:	431a      	orrs	r2, r3
 800b126:	68bb      	ldr	r3, [r7, #8]
 800b128:	68db      	ldr	r3, [r3, #12]
 800b12a:	431a      	orrs	r2, r3
 800b12c:	68bb      	ldr	r3, [r7, #8]
 800b12e:	69db      	ldr	r3, [r3, #28]
 800b130:	431a      	orrs	r2, r3
 800b132:	68bb      	ldr	r3, [r7, #8]
 800b134:	699b      	ldr	r3, [r3, #24]
 800b136:	ea42 0103 	orr.w	r1, r2, r3
 800b13a:	68fb      	ldr	r3, [r7, #12]
 800b13c:	681b      	ldr	r3, [r3, #0]
 800b13e:	687a      	ldr	r2, [r7, #4]
 800b140:	430a      	orrs	r2, r1
 800b142:	615a      	str	r2, [r3, #20]
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 800b144:	687b      	ldr	r3, [r7, #4]
 800b146:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 800b14a:	d02b      	beq.n	800b1a4 <QSPI_Config+0x322>
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 800b14c:	68fb      	ldr	r3, [r7, #12]
 800b14e:	681b      	ldr	r3, [r3, #0]
 800b150:	68ba      	ldr	r2, [r7, #8]
 800b152:	6852      	ldr	r2, [r2, #4]
 800b154:	619a      	str	r2, [r3, #24]
}
 800b156:	e025      	b.n	800b1a4 <QSPI_Config+0x322>
        if (cmd->DataMode != QSPI_DATA_NONE)
 800b158:	68bb      	ldr	r3, [r7, #8]
 800b15a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b15c:	2b00      	cmp	r3, #0
 800b15e:	d021      	beq.n	800b1a4 <QSPI_Config+0x322>
          WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800b160:	68bb      	ldr	r3, [r7, #8]
 800b162:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b164:	68bb      	ldr	r3, [r7, #8]
 800b166:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b168:	431a      	orrs	r2, r3
 800b16a:	68bb      	ldr	r3, [r7, #8]
 800b16c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b16e:	431a      	orrs	r2, r3
 800b170:	68bb      	ldr	r3, [r7, #8]
 800b172:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b174:	431a      	orrs	r2, r3
 800b176:	68bb      	ldr	r3, [r7, #8]
 800b178:	695b      	ldr	r3, [r3, #20]
 800b17a:	049b      	lsls	r3, r3, #18
 800b17c:	431a      	orrs	r2, r3
 800b17e:	68bb      	ldr	r3, [r7, #8]
 800b180:	6a1b      	ldr	r3, [r3, #32]
 800b182:	431a      	orrs	r2, r3
 800b184:	68bb      	ldr	r3, [r7, #8]
 800b186:	69db      	ldr	r3, [r3, #28]
 800b188:	431a      	orrs	r2, r3
 800b18a:	68bb      	ldr	r3, [r7, #8]
 800b18c:	699b      	ldr	r3, [r3, #24]
 800b18e:	ea42 0103 	orr.w	r1, r2, r3
 800b192:	68fb      	ldr	r3, [r7, #12]
 800b194:	681b      	ldr	r3, [r3, #0]
 800b196:	687a      	ldr	r2, [r7, #4]
 800b198:	430a      	orrs	r2, r1
 800b19a:	615a      	str	r2, [r3, #20]
          CLEAR_REG(hqspi->Instance->AR);
 800b19c:	68fb      	ldr	r3, [r7, #12]
 800b19e:	681b      	ldr	r3, [r3, #0]
 800b1a0:	2200      	movs	r2, #0
 800b1a2:	619a      	str	r2, [r3, #24]
}
 800b1a4:	bf00      	nop
 800b1a6:	3714      	adds	r7, #20
 800b1a8:	46bd      	mov	sp, r7
 800b1aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1ae:	4770      	bx	lr

0800b1b0 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800b1b0:	b580      	push	{r7, lr}
 800b1b2:	b088      	sub	sp, #32
 800b1b4:	af00      	add	r7, sp, #0
 800b1b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800b1b8:	687b      	ldr	r3, [r7, #4]
 800b1ba:	2b00      	cmp	r3, #0
 800b1bc:	d101      	bne.n	800b1c2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800b1be:	2301      	movs	r3, #1
 800b1c0:	e3ca      	b.n	800b958 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800b1c2:	4b97      	ldr	r3, [pc, #604]	@ (800b420 <HAL_RCC_OscConfig+0x270>)
 800b1c4:	689b      	ldr	r3, [r3, #8]
 800b1c6:	f003 030c 	and.w	r3, r3, #12
 800b1ca:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800b1cc:	4b94      	ldr	r3, [pc, #592]	@ (800b420 <HAL_RCC_OscConfig+0x270>)
 800b1ce:	68db      	ldr	r3, [r3, #12]
 800b1d0:	f003 0303 	and.w	r3, r3, #3
 800b1d4:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800b1d6:	687b      	ldr	r3, [r7, #4]
 800b1d8:	681b      	ldr	r3, [r3, #0]
 800b1da:	f003 0310 	and.w	r3, r3, #16
 800b1de:	2b00      	cmp	r3, #0
 800b1e0:	f000 80e4 	beq.w	800b3ac <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800b1e4:	69bb      	ldr	r3, [r7, #24]
 800b1e6:	2b00      	cmp	r3, #0
 800b1e8:	d007      	beq.n	800b1fa <HAL_RCC_OscConfig+0x4a>
 800b1ea:	69bb      	ldr	r3, [r7, #24]
 800b1ec:	2b0c      	cmp	r3, #12
 800b1ee:	f040 808b 	bne.w	800b308 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800b1f2:	697b      	ldr	r3, [r7, #20]
 800b1f4:	2b01      	cmp	r3, #1
 800b1f6:	f040 8087 	bne.w	800b308 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800b1fa:	4b89      	ldr	r3, [pc, #548]	@ (800b420 <HAL_RCC_OscConfig+0x270>)
 800b1fc:	681b      	ldr	r3, [r3, #0]
 800b1fe:	f003 0302 	and.w	r3, r3, #2
 800b202:	2b00      	cmp	r3, #0
 800b204:	d005      	beq.n	800b212 <HAL_RCC_OscConfig+0x62>
 800b206:	687b      	ldr	r3, [r7, #4]
 800b208:	699b      	ldr	r3, [r3, #24]
 800b20a:	2b00      	cmp	r3, #0
 800b20c:	d101      	bne.n	800b212 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 800b20e:	2301      	movs	r3, #1
 800b210:	e3a2      	b.n	800b958 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800b212:	687b      	ldr	r3, [r7, #4]
 800b214:	6a1a      	ldr	r2, [r3, #32]
 800b216:	4b82      	ldr	r3, [pc, #520]	@ (800b420 <HAL_RCC_OscConfig+0x270>)
 800b218:	681b      	ldr	r3, [r3, #0]
 800b21a:	f003 0308 	and.w	r3, r3, #8
 800b21e:	2b00      	cmp	r3, #0
 800b220:	d004      	beq.n	800b22c <HAL_RCC_OscConfig+0x7c>
 800b222:	4b7f      	ldr	r3, [pc, #508]	@ (800b420 <HAL_RCC_OscConfig+0x270>)
 800b224:	681b      	ldr	r3, [r3, #0]
 800b226:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800b22a:	e005      	b.n	800b238 <HAL_RCC_OscConfig+0x88>
 800b22c:	4b7c      	ldr	r3, [pc, #496]	@ (800b420 <HAL_RCC_OscConfig+0x270>)
 800b22e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800b232:	091b      	lsrs	r3, r3, #4
 800b234:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800b238:	4293      	cmp	r3, r2
 800b23a:	d223      	bcs.n	800b284 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800b23c:	687b      	ldr	r3, [r7, #4]
 800b23e:	6a1b      	ldr	r3, [r3, #32]
 800b240:	4618      	mov	r0, r3
 800b242:	f000 fd55 	bl	800bcf0 <RCC_SetFlashLatencyFromMSIRange>
 800b246:	4603      	mov	r3, r0
 800b248:	2b00      	cmp	r3, #0
 800b24a:	d001      	beq.n	800b250 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 800b24c:	2301      	movs	r3, #1
 800b24e:	e383      	b.n	800b958 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800b250:	4b73      	ldr	r3, [pc, #460]	@ (800b420 <HAL_RCC_OscConfig+0x270>)
 800b252:	681b      	ldr	r3, [r3, #0]
 800b254:	4a72      	ldr	r2, [pc, #456]	@ (800b420 <HAL_RCC_OscConfig+0x270>)
 800b256:	f043 0308 	orr.w	r3, r3, #8
 800b25a:	6013      	str	r3, [r2, #0]
 800b25c:	4b70      	ldr	r3, [pc, #448]	@ (800b420 <HAL_RCC_OscConfig+0x270>)
 800b25e:	681b      	ldr	r3, [r3, #0]
 800b260:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800b264:	687b      	ldr	r3, [r7, #4]
 800b266:	6a1b      	ldr	r3, [r3, #32]
 800b268:	496d      	ldr	r1, [pc, #436]	@ (800b420 <HAL_RCC_OscConfig+0x270>)
 800b26a:	4313      	orrs	r3, r2
 800b26c:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800b26e:	4b6c      	ldr	r3, [pc, #432]	@ (800b420 <HAL_RCC_OscConfig+0x270>)
 800b270:	685b      	ldr	r3, [r3, #4]
 800b272:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 800b276:	687b      	ldr	r3, [r7, #4]
 800b278:	69db      	ldr	r3, [r3, #28]
 800b27a:	021b      	lsls	r3, r3, #8
 800b27c:	4968      	ldr	r1, [pc, #416]	@ (800b420 <HAL_RCC_OscConfig+0x270>)
 800b27e:	4313      	orrs	r3, r2
 800b280:	604b      	str	r3, [r1, #4]
 800b282:	e025      	b.n	800b2d0 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800b284:	4b66      	ldr	r3, [pc, #408]	@ (800b420 <HAL_RCC_OscConfig+0x270>)
 800b286:	681b      	ldr	r3, [r3, #0]
 800b288:	4a65      	ldr	r2, [pc, #404]	@ (800b420 <HAL_RCC_OscConfig+0x270>)
 800b28a:	f043 0308 	orr.w	r3, r3, #8
 800b28e:	6013      	str	r3, [r2, #0]
 800b290:	4b63      	ldr	r3, [pc, #396]	@ (800b420 <HAL_RCC_OscConfig+0x270>)
 800b292:	681b      	ldr	r3, [r3, #0]
 800b294:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800b298:	687b      	ldr	r3, [r7, #4]
 800b29a:	6a1b      	ldr	r3, [r3, #32]
 800b29c:	4960      	ldr	r1, [pc, #384]	@ (800b420 <HAL_RCC_OscConfig+0x270>)
 800b29e:	4313      	orrs	r3, r2
 800b2a0:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800b2a2:	4b5f      	ldr	r3, [pc, #380]	@ (800b420 <HAL_RCC_OscConfig+0x270>)
 800b2a4:	685b      	ldr	r3, [r3, #4]
 800b2a6:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 800b2aa:	687b      	ldr	r3, [r7, #4]
 800b2ac:	69db      	ldr	r3, [r3, #28]
 800b2ae:	021b      	lsls	r3, r3, #8
 800b2b0:	495b      	ldr	r1, [pc, #364]	@ (800b420 <HAL_RCC_OscConfig+0x270>)
 800b2b2:	4313      	orrs	r3, r2
 800b2b4:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 800b2b6:	69bb      	ldr	r3, [r7, #24]
 800b2b8:	2b00      	cmp	r3, #0
 800b2ba:	d109      	bne.n	800b2d0 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800b2bc:	687b      	ldr	r3, [r7, #4]
 800b2be:	6a1b      	ldr	r3, [r3, #32]
 800b2c0:	4618      	mov	r0, r3
 800b2c2:	f000 fd15 	bl	800bcf0 <RCC_SetFlashLatencyFromMSIRange>
 800b2c6:	4603      	mov	r3, r0
 800b2c8:	2b00      	cmp	r3, #0
 800b2ca:	d001      	beq.n	800b2d0 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 800b2cc:	2301      	movs	r3, #1
 800b2ce:	e343      	b.n	800b958 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800b2d0:	f000 fc4a 	bl	800bb68 <HAL_RCC_GetSysClockFreq>
 800b2d4:	4602      	mov	r2, r0
 800b2d6:	4b52      	ldr	r3, [pc, #328]	@ (800b420 <HAL_RCC_OscConfig+0x270>)
 800b2d8:	689b      	ldr	r3, [r3, #8]
 800b2da:	091b      	lsrs	r3, r3, #4
 800b2dc:	f003 030f 	and.w	r3, r3, #15
 800b2e0:	4950      	ldr	r1, [pc, #320]	@ (800b424 <HAL_RCC_OscConfig+0x274>)
 800b2e2:	5ccb      	ldrb	r3, [r1, r3]
 800b2e4:	f003 031f 	and.w	r3, r3, #31
 800b2e8:	fa22 f303 	lsr.w	r3, r2, r3
 800b2ec:	4a4e      	ldr	r2, [pc, #312]	@ (800b428 <HAL_RCC_OscConfig+0x278>)
 800b2ee:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800b2f0:	4b4e      	ldr	r3, [pc, #312]	@ (800b42c <HAL_RCC_OscConfig+0x27c>)
 800b2f2:	681b      	ldr	r3, [r3, #0]
 800b2f4:	4618      	mov	r0, r3
 800b2f6:	f7fc fa97 	bl	8007828 <HAL_InitTick>
 800b2fa:	4603      	mov	r3, r0
 800b2fc:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 800b2fe:	7bfb      	ldrb	r3, [r7, #15]
 800b300:	2b00      	cmp	r3, #0
 800b302:	d052      	beq.n	800b3aa <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 800b304:	7bfb      	ldrb	r3, [r7, #15]
 800b306:	e327      	b.n	800b958 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800b308:	687b      	ldr	r3, [r7, #4]
 800b30a:	699b      	ldr	r3, [r3, #24]
 800b30c:	2b00      	cmp	r3, #0
 800b30e:	d032      	beq.n	800b376 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800b310:	4b43      	ldr	r3, [pc, #268]	@ (800b420 <HAL_RCC_OscConfig+0x270>)
 800b312:	681b      	ldr	r3, [r3, #0]
 800b314:	4a42      	ldr	r2, [pc, #264]	@ (800b420 <HAL_RCC_OscConfig+0x270>)
 800b316:	f043 0301 	orr.w	r3, r3, #1
 800b31a:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800b31c:	f7fc fad4 	bl	80078c8 <HAL_GetTick>
 800b320:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800b322:	e008      	b.n	800b336 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800b324:	f7fc fad0 	bl	80078c8 <HAL_GetTick>
 800b328:	4602      	mov	r2, r0
 800b32a:	693b      	ldr	r3, [r7, #16]
 800b32c:	1ad3      	subs	r3, r2, r3
 800b32e:	2b02      	cmp	r3, #2
 800b330:	d901      	bls.n	800b336 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 800b332:	2303      	movs	r3, #3
 800b334:	e310      	b.n	800b958 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800b336:	4b3a      	ldr	r3, [pc, #232]	@ (800b420 <HAL_RCC_OscConfig+0x270>)
 800b338:	681b      	ldr	r3, [r3, #0]
 800b33a:	f003 0302 	and.w	r3, r3, #2
 800b33e:	2b00      	cmp	r3, #0
 800b340:	d0f0      	beq.n	800b324 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800b342:	4b37      	ldr	r3, [pc, #220]	@ (800b420 <HAL_RCC_OscConfig+0x270>)
 800b344:	681b      	ldr	r3, [r3, #0]
 800b346:	4a36      	ldr	r2, [pc, #216]	@ (800b420 <HAL_RCC_OscConfig+0x270>)
 800b348:	f043 0308 	orr.w	r3, r3, #8
 800b34c:	6013      	str	r3, [r2, #0]
 800b34e:	4b34      	ldr	r3, [pc, #208]	@ (800b420 <HAL_RCC_OscConfig+0x270>)
 800b350:	681b      	ldr	r3, [r3, #0]
 800b352:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800b356:	687b      	ldr	r3, [r7, #4]
 800b358:	6a1b      	ldr	r3, [r3, #32]
 800b35a:	4931      	ldr	r1, [pc, #196]	@ (800b420 <HAL_RCC_OscConfig+0x270>)
 800b35c:	4313      	orrs	r3, r2
 800b35e:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800b360:	4b2f      	ldr	r3, [pc, #188]	@ (800b420 <HAL_RCC_OscConfig+0x270>)
 800b362:	685b      	ldr	r3, [r3, #4]
 800b364:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 800b368:	687b      	ldr	r3, [r7, #4]
 800b36a:	69db      	ldr	r3, [r3, #28]
 800b36c:	021b      	lsls	r3, r3, #8
 800b36e:	492c      	ldr	r1, [pc, #176]	@ (800b420 <HAL_RCC_OscConfig+0x270>)
 800b370:	4313      	orrs	r3, r2
 800b372:	604b      	str	r3, [r1, #4]
 800b374:	e01a      	b.n	800b3ac <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800b376:	4b2a      	ldr	r3, [pc, #168]	@ (800b420 <HAL_RCC_OscConfig+0x270>)
 800b378:	681b      	ldr	r3, [r3, #0]
 800b37a:	4a29      	ldr	r2, [pc, #164]	@ (800b420 <HAL_RCC_OscConfig+0x270>)
 800b37c:	f023 0301 	bic.w	r3, r3, #1
 800b380:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800b382:	f7fc faa1 	bl	80078c8 <HAL_GetTick>
 800b386:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800b388:	e008      	b.n	800b39c <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800b38a:	f7fc fa9d 	bl	80078c8 <HAL_GetTick>
 800b38e:	4602      	mov	r2, r0
 800b390:	693b      	ldr	r3, [r7, #16]
 800b392:	1ad3      	subs	r3, r2, r3
 800b394:	2b02      	cmp	r3, #2
 800b396:	d901      	bls.n	800b39c <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 800b398:	2303      	movs	r3, #3
 800b39a:	e2dd      	b.n	800b958 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800b39c:	4b20      	ldr	r3, [pc, #128]	@ (800b420 <HAL_RCC_OscConfig+0x270>)
 800b39e:	681b      	ldr	r3, [r3, #0]
 800b3a0:	f003 0302 	and.w	r3, r3, #2
 800b3a4:	2b00      	cmp	r3, #0
 800b3a6:	d1f0      	bne.n	800b38a <HAL_RCC_OscConfig+0x1da>
 800b3a8:	e000      	b.n	800b3ac <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800b3aa:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800b3ac:	687b      	ldr	r3, [r7, #4]
 800b3ae:	681b      	ldr	r3, [r3, #0]
 800b3b0:	f003 0301 	and.w	r3, r3, #1
 800b3b4:	2b00      	cmp	r3, #0
 800b3b6:	d074      	beq.n	800b4a2 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 800b3b8:	69bb      	ldr	r3, [r7, #24]
 800b3ba:	2b08      	cmp	r3, #8
 800b3bc:	d005      	beq.n	800b3ca <HAL_RCC_OscConfig+0x21a>
 800b3be:	69bb      	ldr	r3, [r7, #24]
 800b3c0:	2b0c      	cmp	r3, #12
 800b3c2:	d10e      	bne.n	800b3e2 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 800b3c4:	697b      	ldr	r3, [r7, #20]
 800b3c6:	2b03      	cmp	r3, #3
 800b3c8:	d10b      	bne.n	800b3e2 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800b3ca:	4b15      	ldr	r3, [pc, #84]	@ (800b420 <HAL_RCC_OscConfig+0x270>)
 800b3cc:	681b      	ldr	r3, [r3, #0]
 800b3ce:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800b3d2:	2b00      	cmp	r3, #0
 800b3d4:	d064      	beq.n	800b4a0 <HAL_RCC_OscConfig+0x2f0>
 800b3d6:	687b      	ldr	r3, [r7, #4]
 800b3d8:	685b      	ldr	r3, [r3, #4]
 800b3da:	2b00      	cmp	r3, #0
 800b3dc:	d160      	bne.n	800b4a0 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 800b3de:	2301      	movs	r3, #1
 800b3e0:	e2ba      	b.n	800b958 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800b3e2:	687b      	ldr	r3, [r7, #4]
 800b3e4:	685b      	ldr	r3, [r3, #4]
 800b3e6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800b3ea:	d106      	bne.n	800b3fa <HAL_RCC_OscConfig+0x24a>
 800b3ec:	4b0c      	ldr	r3, [pc, #48]	@ (800b420 <HAL_RCC_OscConfig+0x270>)
 800b3ee:	681b      	ldr	r3, [r3, #0]
 800b3f0:	4a0b      	ldr	r2, [pc, #44]	@ (800b420 <HAL_RCC_OscConfig+0x270>)
 800b3f2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800b3f6:	6013      	str	r3, [r2, #0]
 800b3f8:	e026      	b.n	800b448 <HAL_RCC_OscConfig+0x298>
 800b3fa:	687b      	ldr	r3, [r7, #4]
 800b3fc:	685b      	ldr	r3, [r3, #4]
 800b3fe:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800b402:	d115      	bne.n	800b430 <HAL_RCC_OscConfig+0x280>
 800b404:	4b06      	ldr	r3, [pc, #24]	@ (800b420 <HAL_RCC_OscConfig+0x270>)
 800b406:	681b      	ldr	r3, [r3, #0]
 800b408:	4a05      	ldr	r2, [pc, #20]	@ (800b420 <HAL_RCC_OscConfig+0x270>)
 800b40a:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800b40e:	6013      	str	r3, [r2, #0]
 800b410:	4b03      	ldr	r3, [pc, #12]	@ (800b420 <HAL_RCC_OscConfig+0x270>)
 800b412:	681b      	ldr	r3, [r3, #0]
 800b414:	4a02      	ldr	r2, [pc, #8]	@ (800b420 <HAL_RCC_OscConfig+0x270>)
 800b416:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800b41a:	6013      	str	r3, [r2, #0]
 800b41c:	e014      	b.n	800b448 <HAL_RCC_OscConfig+0x298>
 800b41e:	bf00      	nop
 800b420:	40021000 	.word	0x40021000
 800b424:	0801226c 	.word	0x0801226c
 800b428:	20000000 	.word	0x20000000
 800b42c:	2000000c 	.word	0x2000000c
 800b430:	4ba0      	ldr	r3, [pc, #640]	@ (800b6b4 <HAL_RCC_OscConfig+0x504>)
 800b432:	681b      	ldr	r3, [r3, #0]
 800b434:	4a9f      	ldr	r2, [pc, #636]	@ (800b6b4 <HAL_RCC_OscConfig+0x504>)
 800b436:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800b43a:	6013      	str	r3, [r2, #0]
 800b43c:	4b9d      	ldr	r3, [pc, #628]	@ (800b6b4 <HAL_RCC_OscConfig+0x504>)
 800b43e:	681b      	ldr	r3, [r3, #0]
 800b440:	4a9c      	ldr	r2, [pc, #624]	@ (800b6b4 <HAL_RCC_OscConfig+0x504>)
 800b442:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800b446:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800b448:	687b      	ldr	r3, [r7, #4]
 800b44a:	685b      	ldr	r3, [r3, #4]
 800b44c:	2b00      	cmp	r3, #0
 800b44e:	d013      	beq.n	800b478 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b450:	f7fc fa3a 	bl	80078c8 <HAL_GetTick>
 800b454:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800b456:	e008      	b.n	800b46a <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800b458:	f7fc fa36 	bl	80078c8 <HAL_GetTick>
 800b45c:	4602      	mov	r2, r0
 800b45e:	693b      	ldr	r3, [r7, #16]
 800b460:	1ad3      	subs	r3, r2, r3
 800b462:	2b64      	cmp	r3, #100	@ 0x64
 800b464:	d901      	bls.n	800b46a <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800b466:	2303      	movs	r3, #3
 800b468:	e276      	b.n	800b958 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800b46a:	4b92      	ldr	r3, [pc, #584]	@ (800b6b4 <HAL_RCC_OscConfig+0x504>)
 800b46c:	681b      	ldr	r3, [r3, #0]
 800b46e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800b472:	2b00      	cmp	r3, #0
 800b474:	d0f0      	beq.n	800b458 <HAL_RCC_OscConfig+0x2a8>
 800b476:	e014      	b.n	800b4a2 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b478:	f7fc fa26 	bl	80078c8 <HAL_GetTick>
 800b47c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800b47e:	e008      	b.n	800b492 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800b480:	f7fc fa22 	bl	80078c8 <HAL_GetTick>
 800b484:	4602      	mov	r2, r0
 800b486:	693b      	ldr	r3, [r7, #16]
 800b488:	1ad3      	subs	r3, r2, r3
 800b48a:	2b64      	cmp	r3, #100	@ 0x64
 800b48c:	d901      	bls.n	800b492 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800b48e:	2303      	movs	r3, #3
 800b490:	e262      	b.n	800b958 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800b492:	4b88      	ldr	r3, [pc, #544]	@ (800b6b4 <HAL_RCC_OscConfig+0x504>)
 800b494:	681b      	ldr	r3, [r3, #0]
 800b496:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800b49a:	2b00      	cmp	r3, #0
 800b49c:	d1f0      	bne.n	800b480 <HAL_RCC_OscConfig+0x2d0>
 800b49e:	e000      	b.n	800b4a2 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800b4a0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800b4a2:	687b      	ldr	r3, [r7, #4]
 800b4a4:	681b      	ldr	r3, [r3, #0]
 800b4a6:	f003 0302 	and.w	r3, r3, #2
 800b4aa:	2b00      	cmp	r3, #0
 800b4ac:	d060      	beq.n	800b570 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800b4ae:	69bb      	ldr	r3, [r7, #24]
 800b4b0:	2b04      	cmp	r3, #4
 800b4b2:	d005      	beq.n	800b4c0 <HAL_RCC_OscConfig+0x310>
 800b4b4:	69bb      	ldr	r3, [r7, #24]
 800b4b6:	2b0c      	cmp	r3, #12
 800b4b8:	d119      	bne.n	800b4ee <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800b4ba:	697b      	ldr	r3, [r7, #20]
 800b4bc:	2b02      	cmp	r3, #2
 800b4be:	d116      	bne.n	800b4ee <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800b4c0:	4b7c      	ldr	r3, [pc, #496]	@ (800b6b4 <HAL_RCC_OscConfig+0x504>)
 800b4c2:	681b      	ldr	r3, [r3, #0]
 800b4c4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800b4c8:	2b00      	cmp	r3, #0
 800b4ca:	d005      	beq.n	800b4d8 <HAL_RCC_OscConfig+0x328>
 800b4cc:	687b      	ldr	r3, [r7, #4]
 800b4ce:	68db      	ldr	r3, [r3, #12]
 800b4d0:	2b00      	cmp	r3, #0
 800b4d2:	d101      	bne.n	800b4d8 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 800b4d4:	2301      	movs	r3, #1
 800b4d6:	e23f      	b.n	800b958 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800b4d8:	4b76      	ldr	r3, [pc, #472]	@ (800b6b4 <HAL_RCC_OscConfig+0x504>)
 800b4da:	685b      	ldr	r3, [r3, #4]
 800b4dc:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 800b4e0:	687b      	ldr	r3, [r7, #4]
 800b4e2:	691b      	ldr	r3, [r3, #16]
 800b4e4:	061b      	lsls	r3, r3, #24
 800b4e6:	4973      	ldr	r1, [pc, #460]	@ (800b6b4 <HAL_RCC_OscConfig+0x504>)
 800b4e8:	4313      	orrs	r3, r2
 800b4ea:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800b4ec:	e040      	b.n	800b570 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800b4ee:	687b      	ldr	r3, [r7, #4]
 800b4f0:	68db      	ldr	r3, [r3, #12]
 800b4f2:	2b00      	cmp	r3, #0
 800b4f4:	d023      	beq.n	800b53e <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800b4f6:	4b6f      	ldr	r3, [pc, #444]	@ (800b6b4 <HAL_RCC_OscConfig+0x504>)
 800b4f8:	681b      	ldr	r3, [r3, #0]
 800b4fa:	4a6e      	ldr	r2, [pc, #440]	@ (800b6b4 <HAL_RCC_OscConfig+0x504>)
 800b4fc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800b500:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b502:	f7fc f9e1 	bl	80078c8 <HAL_GetTick>
 800b506:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800b508:	e008      	b.n	800b51c <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800b50a:	f7fc f9dd 	bl	80078c8 <HAL_GetTick>
 800b50e:	4602      	mov	r2, r0
 800b510:	693b      	ldr	r3, [r7, #16]
 800b512:	1ad3      	subs	r3, r2, r3
 800b514:	2b02      	cmp	r3, #2
 800b516:	d901      	bls.n	800b51c <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 800b518:	2303      	movs	r3, #3
 800b51a:	e21d      	b.n	800b958 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800b51c:	4b65      	ldr	r3, [pc, #404]	@ (800b6b4 <HAL_RCC_OscConfig+0x504>)
 800b51e:	681b      	ldr	r3, [r3, #0]
 800b520:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800b524:	2b00      	cmp	r3, #0
 800b526:	d0f0      	beq.n	800b50a <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800b528:	4b62      	ldr	r3, [pc, #392]	@ (800b6b4 <HAL_RCC_OscConfig+0x504>)
 800b52a:	685b      	ldr	r3, [r3, #4]
 800b52c:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 800b530:	687b      	ldr	r3, [r7, #4]
 800b532:	691b      	ldr	r3, [r3, #16]
 800b534:	061b      	lsls	r3, r3, #24
 800b536:	495f      	ldr	r1, [pc, #380]	@ (800b6b4 <HAL_RCC_OscConfig+0x504>)
 800b538:	4313      	orrs	r3, r2
 800b53a:	604b      	str	r3, [r1, #4]
 800b53c:	e018      	b.n	800b570 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800b53e:	4b5d      	ldr	r3, [pc, #372]	@ (800b6b4 <HAL_RCC_OscConfig+0x504>)
 800b540:	681b      	ldr	r3, [r3, #0]
 800b542:	4a5c      	ldr	r2, [pc, #368]	@ (800b6b4 <HAL_RCC_OscConfig+0x504>)
 800b544:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800b548:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b54a:	f7fc f9bd 	bl	80078c8 <HAL_GetTick>
 800b54e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800b550:	e008      	b.n	800b564 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800b552:	f7fc f9b9 	bl	80078c8 <HAL_GetTick>
 800b556:	4602      	mov	r2, r0
 800b558:	693b      	ldr	r3, [r7, #16]
 800b55a:	1ad3      	subs	r3, r2, r3
 800b55c:	2b02      	cmp	r3, #2
 800b55e:	d901      	bls.n	800b564 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 800b560:	2303      	movs	r3, #3
 800b562:	e1f9      	b.n	800b958 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800b564:	4b53      	ldr	r3, [pc, #332]	@ (800b6b4 <HAL_RCC_OscConfig+0x504>)
 800b566:	681b      	ldr	r3, [r3, #0]
 800b568:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800b56c:	2b00      	cmp	r3, #0
 800b56e:	d1f0      	bne.n	800b552 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800b570:	687b      	ldr	r3, [r7, #4]
 800b572:	681b      	ldr	r3, [r3, #0]
 800b574:	f003 0308 	and.w	r3, r3, #8
 800b578:	2b00      	cmp	r3, #0
 800b57a:	d03c      	beq.n	800b5f6 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800b57c:	687b      	ldr	r3, [r7, #4]
 800b57e:	695b      	ldr	r3, [r3, #20]
 800b580:	2b00      	cmp	r3, #0
 800b582:	d01c      	beq.n	800b5be <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800b584:	4b4b      	ldr	r3, [pc, #300]	@ (800b6b4 <HAL_RCC_OscConfig+0x504>)
 800b586:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800b58a:	4a4a      	ldr	r2, [pc, #296]	@ (800b6b4 <HAL_RCC_OscConfig+0x504>)
 800b58c:	f043 0301 	orr.w	r3, r3, #1
 800b590:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800b594:	f7fc f998 	bl	80078c8 <HAL_GetTick>
 800b598:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800b59a:	e008      	b.n	800b5ae <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800b59c:	f7fc f994 	bl	80078c8 <HAL_GetTick>
 800b5a0:	4602      	mov	r2, r0
 800b5a2:	693b      	ldr	r3, [r7, #16]
 800b5a4:	1ad3      	subs	r3, r2, r3
 800b5a6:	2b02      	cmp	r3, #2
 800b5a8:	d901      	bls.n	800b5ae <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800b5aa:	2303      	movs	r3, #3
 800b5ac:	e1d4      	b.n	800b958 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800b5ae:	4b41      	ldr	r3, [pc, #260]	@ (800b6b4 <HAL_RCC_OscConfig+0x504>)
 800b5b0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800b5b4:	f003 0302 	and.w	r3, r3, #2
 800b5b8:	2b00      	cmp	r3, #0
 800b5ba:	d0ef      	beq.n	800b59c <HAL_RCC_OscConfig+0x3ec>
 800b5bc:	e01b      	b.n	800b5f6 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800b5be:	4b3d      	ldr	r3, [pc, #244]	@ (800b6b4 <HAL_RCC_OscConfig+0x504>)
 800b5c0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800b5c4:	4a3b      	ldr	r2, [pc, #236]	@ (800b6b4 <HAL_RCC_OscConfig+0x504>)
 800b5c6:	f023 0301 	bic.w	r3, r3, #1
 800b5ca:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800b5ce:	f7fc f97b 	bl	80078c8 <HAL_GetTick>
 800b5d2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800b5d4:	e008      	b.n	800b5e8 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800b5d6:	f7fc f977 	bl	80078c8 <HAL_GetTick>
 800b5da:	4602      	mov	r2, r0
 800b5dc:	693b      	ldr	r3, [r7, #16]
 800b5de:	1ad3      	subs	r3, r2, r3
 800b5e0:	2b02      	cmp	r3, #2
 800b5e2:	d901      	bls.n	800b5e8 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 800b5e4:	2303      	movs	r3, #3
 800b5e6:	e1b7      	b.n	800b958 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800b5e8:	4b32      	ldr	r3, [pc, #200]	@ (800b6b4 <HAL_RCC_OscConfig+0x504>)
 800b5ea:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800b5ee:	f003 0302 	and.w	r3, r3, #2
 800b5f2:	2b00      	cmp	r3, #0
 800b5f4:	d1ef      	bne.n	800b5d6 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800b5f6:	687b      	ldr	r3, [r7, #4]
 800b5f8:	681b      	ldr	r3, [r3, #0]
 800b5fa:	f003 0304 	and.w	r3, r3, #4
 800b5fe:	2b00      	cmp	r3, #0
 800b600:	f000 80a6 	beq.w	800b750 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 800b604:	2300      	movs	r3, #0
 800b606:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 800b608:	4b2a      	ldr	r3, [pc, #168]	@ (800b6b4 <HAL_RCC_OscConfig+0x504>)
 800b60a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800b60c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800b610:	2b00      	cmp	r3, #0
 800b612:	d10d      	bne.n	800b630 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800b614:	4b27      	ldr	r3, [pc, #156]	@ (800b6b4 <HAL_RCC_OscConfig+0x504>)
 800b616:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800b618:	4a26      	ldr	r2, [pc, #152]	@ (800b6b4 <HAL_RCC_OscConfig+0x504>)
 800b61a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800b61e:	6593      	str	r3, [r2, #88]	@ 0x58
 800b620:	4b24      	ldr	r3, [pc, #144]	@ (800b6b4 <HAL_RCC_OscConfig+0x504>)
 800b622:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800b624:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800b628:	60bb      	str	r3, [r7, #8]
 800b62a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800b62c:	2301      	movs	r3, #1
 800b62e:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800b630:	4b21      	ldr	r3, [pc, #132]	@ (800b6b8 <HAL_RCC_OscConfig+0x508>)
 800b632:	681b      	ldr	r3, [r3, #0]
 800b634:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800b638:	2b00      	cmp	r3, #0
 800b63a:	d118      	bne.n	800b66e <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800b63c:	4b1e      	ldr	r3, [pc, #120]	@ (800b6b8 <HAL_RCC_OscConfig+0x508>)
 800b63e:	681b      	ldr	r3, [r3, #0]
 800b640:	4a1d      	ldr	r2, [pc, #116]	@ (800b6b8 <HAL_RCC_OscConfig+0x508>)
 800b642:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800b646:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800b648:	f7fc f93e 	bl	80078c8 <HAL_GetTick>
 800b64c:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800b64e:	e008      	b.n	800b662 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800b650:	f7fc f93a 	bl	80078c8 <HAL_GetTick>
 800b654:	4602      	mov	r2, r0
 800b656:	693b      	ldr	r3, [r7, #16]
 800b658:	1ad3      	subs	r3, r2, r3
 800b65a:	2b02      	cmp	r3, #2
 800b65c:	d901      	bls.n	800b662 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800b65e:	2303      	movs	r3, #3
 800b660:	e17a      	b.n	800b958 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800b662:	4b15      	ldr	r3, [pc, #84]	@ (800b6b8 <HAL_RCC_OscConfig+0x508>)
 800b664:	681b      	ldr	r3, [r3, #0]
 800b666:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800b66a:	2b00      	cmp	r3, #0
 800b66c:	d0f0      	beq.n	800b650 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800b66e:	687b      	ldr	r3, [r7, #4]
 800b670:	689b      	ldr	r3, [r3, #8]
 800b672:	2b01      	cmp	r3, #1
 800b674:	d108      	bne.n	800b688 <HAL_RCC_OscConfig+0x4d8>
 800b676:	4b0f      	ldr	r3, [pc, #60]	@ (800b6b4 <HAL_RCC_OscConfig+0x504>)
 800b678:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b67c:	4a0d      	ldr	r2, [pc, #52]	@ (800b6b4 <HAL_RCC_OscConfig+0x504>)
 800b67e:	f043 0301 	orr.w	r3, r3, #1
 800b682:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800b686:	e029      	b.n	800b6dc <HAL_RCC_OscConfig+0x52c>
 800b688:	687b      	ldr	r3, [r7, #4]
 800b68a:	689b      	ldr	r3, [r3, #8]
 800b68c:	2b05      	cmp	r3, #5
 800b68e:	d115      	bne.n	800b6bc <HAL_RCC_OscConfig+0x50c>
 800b690:	4b08      	ldr	r3, [pc, #32]	@ (800b6b4 <HAL_RCC_OscConfig+0x504>)
 800b692:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b696:	4a07      	ldr	r2, [pc, #28]	@ (800b6b4 <HAL_RCC_OscConfig+0x504>)
 800b698:	f043 0304 	orr.w	r3, r3, #4
 800b69c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800b6a0:	4b04      	ldr	r3, [pc, #16]	@ (800b6b4 <HAL_RCC_OscConfig+0x504>)
 800b6a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b6a6:	4a03      	ldr	r2, [pc, #12]	@ (800b6b4 <HAL_RCC_OscConfig+0x504>)
 800b6a8:	f043 0301 	orr.w	r3, r3, #1
 800b6ac:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800b6b0:	e014      	b.n	800b6dc <HAL_RCC_OscConfig+0x52c>
 800b6b2:	bf00      	nop
 800b6b4:	40021000 	.word	0x40021000
 800b6b8:	40007000 	.word	0x40007000
 800b6bc:	4b9c      	ldr	r3, [pc, #624]	@ (800b930 <HAL_RCC_OscConfig+0x780>)
 800b6be:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b6c2:	4a9b      	ldr	r2, [pc, #620]	@ (800b930 <HAL_RCC_OscConfig+0x780>)
 800b6c4:	f023 0301 	bic.w	r3, r3, #1
 800b6c8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800b6cc:	4b98      	ldr	r3, [pc, #608]	@ (800b930 <HAL_RCC_OscConfig+0x780>)
 800b6ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b6d2:	4a97      	ldr	r2, [pc, #604]	@ (800b930 <HAL_RCC_OscConfig+0x780>)
 800b6d4:	f023 0304 	bic.w	r3, r3, #4
 800b6d8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800b6dc:	687b      	ldr	r3, [r7, #4]
 800b6de:	689b      	ldr	r3, [r3, #8]
 800b6e0:	2b00      	cmp	r3, #0
 800b6e2:	d016      	beq.n	800b712 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800b6e4:	f7fc f8f0 	bl	80078c8 <HAL_GetTick>
 800b6e8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800b6ea:	e00a      	b.n	800b702 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800b6ec:	f7fc f8ec 	bl	80078c8 <HAL_GetTick>
 800b6f0:	4602      	mov	r2, r0
 800b6f2:	693b      	ldr	r3, [r7, #16]
 800b6f4:	1ad3      	subs	r3, r2, r3
 800b6f6:	f241 3288 	movw	r2, #5000	@ 0x1388
 800b6fa:	4293      	cmp	r3, r2
 800b6fc:	d901      	bls.n	800b702 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 800b6fe:	2303      	movs	r3, #3
 800b700:	e12a      	b.n	800b958 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800b702:	4b8b      	ldr	r3, [pc, #556]	@ (800b930 <HAL_RCC_OscConfig+0x780>)
 800b704:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b708:	f003 0302 	and.w	r3, r3, #2
 800b70c:	2b00      	cmp	r3, #0
 800b70e:	d0ed      	beq.n	800b6ec <HAL_RCC_OscConfig+0x53c>
 800b710:	e015      	b.n	800b73e <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800b712:	f7fc f8d9 	bl	80078c8 <HAL_GetTick>
 800b716:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800b718:	e00a      	b.n	800b730 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800b71a:	f7fc f8d5 	bl	80078c8 <HAL_GetTick>
 800b71e:	4602      	mov	r2, r0
 800b720:	693b      	ldr	r3, [r7, #16]
 800b722:	1ad3      	subs	r3, r2, r3
 800b724:	f241 3288 	movw	r2, #5000	@ 0x1388
 800b728:	4293      	cmp	r3, r2
 800b72a:	d901      	bls.n	800b730 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 800b72c:	2303      	movs	r3, #3
 800b72e:	e113      	b.n	800b958 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800b730:	4b7f      	ldr	r3, [pc, #508]	@ (800b930 <HAL_RCC_OscConfig+0x780>)
 800b732:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b736:	f003 0302 	and.w	r3, r3, #2
 800b73a:	2b00      	cmp	r3, #0
 800b73c:	d1ed      	bne.n	800b71a <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800b73e:	7ffb      	ldrb	r3, [r7, #31]
 800b740:	2b01      	cmp	r3, #1
 800b742:	d105      	bne.n	800b750 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800b744:	4b7a      	ldr	r3, [pc, #488]	@ (800b930 <HAL_RCC_OscConfig+0x780>)
 800b746:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800b748:	4a79      	ldr	r2, [pc, #484]	@ (800b930 <HAL_RCC_OscConfig+0x780>)
 800b74a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800b74e:	6593      	str	r3, [r2, #88]	@ 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800b750:	687b      	ldr	r3, [r7, #4]
 800b752:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b754:	2b00      	cmp	r3, #0
 800b756:	f000 80fe 	beq.w	800b956 <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800b75a:	687b      	ldr	r3, [r7, #4]
 800b75c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b75e:	2b02      	cmp	r3, #2
 800b760:	f040 80d0 	bne.w	800b904 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 800b764:	4b72      	ldr	r3, [pc, #456]	@ (800b930 <HAL_RCC_OscConfig+0x780>)
 800b766:	68db      	ldr	r3, [r3, #12]
 800b768:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800b76a:	697b      	ldr	r3, [r7, #20]
 800b76c:	f003 0203 	and.w	r2, r3, #3
 800b770:	687b      	ldr	r3, [r7, #4]
 800b772:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b774:	429a      	cmp	r2, r3
 800b776:	d130      	bne.n	800b7da <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800b778:	697b      	ldr	r3, [r7, #20]
 800b77a:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 800b77e:	687b      	ldr	r3, [r7, #4]
 800b780:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b782:	3b01      	subs	r3, #1
 800b784:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800b786:	429a      	cmp	r2, r3
 800b788:	d127      	bne.n	800b7da <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800b78a:	697b      	ldr	r3, [r7, #20]
 800b78c:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 800b790:	687b      	ldr	r3, [r7, #4]
 800b792:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b794:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800b796:	429a      	cmp	r2, r3
 800b798:	d11f      	bne.n	800b7da <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800b79a:	697b      	ldr	r3, [r7, #20]
 800b79c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800b7a0:	687a      	ldr	r2, [r7, #4]
 800b7a2:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 800b7a4:	2a07      	cmp	r2, #7
 800b7a6:	bf14      	ite	ne
 800b7a8:	2201      	movne	r2, #1
 800b7aa:	2200      	moveq	r2, #0
 800b7ac:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800b7ae:	4293      	cmp	r3, r2
 800b7b0:	d113      	bne.n	800b7da <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800b7b2:	697b      	ldr	r3, [r7, #20]
 800b7b4:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 800b7b8:	687b      	ldr	r3, [r7, #4]
 800b7ba:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b7bc:	085b      	lsrs	r3, r3, #1
 800b7be:	3b01      	subs	r3, #1
 800b7c0:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800b7c2:	429a      	cmp	r2, r3
 800b7c4:	d109      	bne.n	800b7da <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800b7c6:	697b      	ldr	r3, [r7, #20]
 800b7c8:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 800b7cc:	687b      	ldr	r3, [r7, #4]
 800b7ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b7d0:	085b      	lsrs	r3, r3, #1
 800b7d2:	3b01      	subs	r3, #1
 800b7d4:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800b7d6:	429a      	cmp	r2, r3
 800b7d8:	d06e      	beq.n	800b8b8 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800b7da:	69bb      	ldr	r3, [r7, #24]
 800b7dc:	2b0c      	cmp	r3, #12
 800b7de:	d069      	beq.n	800b8b4 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 800b7e0:	4b53      	ldr	r3, [pc, #332]	@ (800b930 <HAL_RCC_OscConfig+0x780>)
 800b7e2:	681b      	ldr	r3, [r3, #0]
 800b7e4:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800b7e8:	2b00      	cmp	r3, #0
 800b7ea:	d105      	bne.n	800b7f8 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 800b7ec:	4b50      	ldr	r3, [pc, #320]	@ (800b930 <HAL_RCC_OscConfig+0x780>)
 800b7ee:	681b      	ldr	r3, [r3, #0]
 800b7f0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800b7f4:	2b00      	cmp	r3, #0
 800b7f6:	d001      	beq.n	800b7fc <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 800b7f8:	2301      	movs	r3, #1
 800b7fa:	e0ad      	b.n	800b958 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800b7fc:	4b4c      	ldr	r3, [pc, #304]	@ (800b930 <HAL_RCC_OscConfig+0x780>)
 800b7fe:	681b      	ldr	r3, [r3, #0]
 800b800:	4a4b      	ldr	r2, [pc, #300]	@ (800b930 <HAL_RCC_OscConfig+0x780>)
 800b802:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800b806:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800b808:	f7fc f85e 	bl	80078c8 <HAL_GetTick>
 800b80c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800b80e:	e008      	b.n	800b822 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800b810:	f7fc f85a 	bl	80078c8 <HAL_GetTick>
 800b814:	4602      	mov	r2, r0
 800b816:	693b      	ldr	r3, [r7, #16]
 800b818:	1ad3      	subs	r3, r2, r3
 800b81a:	2b02      	cmp	r3, #2
 800b81c:	d901      	bls.n	800b822 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 800b81e:	2303      	movs	r3, #3
 800b820:	e09a      	b.n	800b958 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800b822:	4b43      	ldr	r3, [pc, #268]	@ (800b930 <HAL_RCC_OscConfig+0x780>)
 800b824:	681b      	ldr	r3, [r3, #0]
 800b826:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800b82a:	2b00      	cmp	r3, #0
 800b82c:	d1f0      	bne.n	800b810 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800b82e:	4b40      	ldr	r3, [pc, #256]	@ (800b930 <HAL_RCC_OscConfig+0x780>)
 800b830:	68da      	ldr	r2, [r3, #12]
 800b832:	4b40      	ldr	r3, [pc, #256]	@ (800b934 <HAL_RCC_OscConfig+0x784>)
 800b834:	4013      	ands	r3, r2
 800b836:	687a      	ldr	r2, [r7, #4]
 800b838:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 800b83a:	687a      	ldr	r2, [r7, #4]
 800b83c:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800b83e:	3a01      	subs	r2, #1
 800b840:	0112      	lsls	r2, r2, #4
 800b842:	4311      	orrs	r1, r2
 800b844:	687a      	ldr	r2, [r7, #4]
 800b846:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 800b848:	0212      	lsls	r2, r2, #8
 800b84a:	4311      	orrs	r1, r2
 800b84c:	687a      	ldr	r2, [r7, #4]
 800b84e:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 800b850:	0852      	lsrs	r2, r2, #1
 800b852:	3a01      	subs	r2, #1
 800b854:	0552      	lsls	r2, r2, #21
 800b856:	4311      	orrs	r1, r2
 800b858:	687a      	ldr	r2, [r7, #4]
 800b85a:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 800b85c:	0852      	lsrs	r2, r2, #1
 800b85e:	3a01      	subs	r2, #1
 800b860:	0652      	lsls	r2, r2, #25
 800b862:	4311      	orrs	r1, r2
 800b864:	687a      	ldr	r2, [r7, #4]
 800b866:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 800b868:	0912      	lsrs	r2, r2, #4
 800b86a:	0452      	lsls	r2, r2, #17
 800b86c:	430a      	orrs	r2, r1
 800b86e:	4930      	ldr	r1, [pc, #192]	@ (800b930 <HAL_RCC_OscConfig+0x780>)
 800b870:	4313      	orrs	r3, r2
 800b872:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 800b874:	4b2e      	ldr	r3, [pc, #184]	@ (800b930 <HAL_RCC_OscConfig+0x780>)
 800b876:	681b      	ldr	r3, [r3, #0]
 800b878:	4a2d      	ldr	r2, [pc, #180]	@ (800b930 <HAL_RCC_OscConfig+0x780>)
 800b87a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800b87e:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800b880:	4b2b      	ldr	r3, [pc, #172]	@ (800b930 <HAL_RCC_OscConfig+0x780>)
 800b882:	68db      	ldr	r3, [r3, #12]
 800b884:	4a2a      	ldr	r2, [pc, #168]	@ (800b930 <HAL_RCC_OscConfig+0x780>)
 800b886:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800b88a:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800b88c:	f7fc f81c 	bl	80078c8 <HAL_GetTick>
 800b890:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800b892:	e008      	b.n	800b8a6 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800b894:	f7fc f818 	bl	80078c8 <HAL_GetTick>
 800b898:	4602      	mov	r2, r0
 800b89a:	693b      	ldr	r3, [r7, #16]
 800b89c:	1ad3      	subs	r3, r2, r3
 800b89e:	2b02      	cmp	r3, #2
 800b8a0:	d901      	bls.n	800b8a6 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 800b8a2:	2303      	movs	r3, #3
 800b8a4:	e058      	b.n	800b958 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800b8a6:	4b22      	ldr	r3, [pc, #136]	@ (800b930 <HAL_RCC_OscConfig+0x780>)
 800b8a8:	681b      	ldr	r3, [r3, #0]
 800b8aa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800b8ae:	2b00      	cmp	r3, #0
 800b8b0:	d0f0      	beq.n	800b894 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800b8b2:	e050      	b.n	800b956 <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 800b8b4:	2301      	movs	r3, #1
 800b8b6:	e04f      	b.n	800b958 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800b8b8:	4b1d      	ldr	r3, [pc, #116]	@ (800b930 <HAL_RCC_OscConfig+0x780>)
 800b8ba:	681b      	ldr	r3, [r3, #0]
 800b8bc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800b8c0:	2b00      	cmp	r3, #0
 800b8c2:	d148      	bne.n	800b956 <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 800b8c4:	4b1a      	ldr	r3, [pc, #104]	@ (800b930 <HAL_RCC_OscConfig+0x780>)
 800b8c6:	681b      	ldr	r3, [r3, #0]
 800b8c8:	4a19      	ldr	r2, [pc, #100]	@ (800b930 <HAL_RCC_OscConfig+0x780>)
 800b8ca:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800b8ce:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800b8d0:	4b17      	ldr	r3, [pc, #92]	@ (800b930 <HAL_RCC_OscConfig+0x780>)
 800b8d2:	68db      	ldr	r3, [r3, #12]
 800b8d4:	4a16      	ldr	r2, [pc, #88]	@ (800b930 <HAL_RCC_OscConfig+0x780>)
 800b8d6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800b8da:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800b8dc:	f7fb fff4 	bl	80078c8 <HAL_GetTick>
 800b8e0:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800b8e2:	e008      	b.n	800b8f6 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800b8e4:	f7fb fff0 	bl	80078c8 <HAL_GetTick>
 800b8e8:	4602      	mov	r2, r0
 800b8ea:	693b      	ldr	r3, [r7, #16]
 800b8ec:	1ad3      	subs	r3, r2, r3
 800b8ee:	2b02      	cmp	r3, #2
 800b8f0:	d901      	bls.n	800b8f6 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 800b8f2:	2303      	movs	r3, #3
 800b8f4:	e030      	b.n	800b958 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800b8f6:	4b0e      	ldr	r3, [pc, #56]	@ (800b930 <HAL_RCC_OscConfig+0x780>)
 800b8f8:	681b      	ldr	r3, [r3, #0]
 800b8fa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800b8fe:	2b00      	cmp	r3, #0
 800b900:	d0f0      	beq.n	800b8e4 <HAL_RCC_OscConfig+0x734>
 800b902:	e028      	b.n	800b956 <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 800b904:	69bb      	ldr	r3, [r7, #24]
 800b906:	2b0c      	cmp	r3, #12
 800b908:	d023      	beq.n	800b952 <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800b90a:	4b09      	ldr	r3, [pc, #36]	@ (800b930 <HAL_RCC_OscConfig+0x780>)
 800b90c:	681b      	ldr	r3, [r3, #0]
 800b90e:	4a08      	ldr	r2, [pc, #32]	@ (800b930 <HAL_RCC_OscConfig+0x780>)
 800b910:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800b914:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b916:	f7fb ffd7 	bl	80078c8 <HAL_GetTick>
 800b91a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800b91c:	e00c      	b.n	800b938 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800b91e:	f7fb ffd3 	bl	80078c8 <HAL_GetTick>
 800b922:	4602      	mov	r2, r0
 800b924:	693b      	ldr	r3, [r7, #16]
 800b926:	1ad3      	subs	r3, r2, r3
 800b928:	2b02      	cmp	r3, #2
 800b92a:	d905      	bls.n	800b938 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 800b92c:	2303      	movs	r3, #3
 800b92e:	e013      	b.n	800b958 <HAL_RCC_OscConfig+0x7a8>
 800b930:	40021000 	.word	0x40021000
 800b934:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800b938:	4b09      	ldr	r3, [pc, #36]	@ (800b960 <HAL_RCC_OscConfig+0x7b0>)
 800b93a:	681b      	ldr	r3, [r3, #0]
 800b93c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800b940:	2b00      	cmp	r3, #0
 800b942:	d1ec      	bne.n	800b91e <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 800b944:	4b06      	ldr	r3, [pc, #24]	@ (800b960 <HAL_RCC_OscConfig+0x7b0>)
 800b946:	68da      	ldr	r2, [r3, #12]
 800b948:	4905      	ldr	r1, [pc, #20]	@ (800b960 <HAL_RCC_OscConfig+0x7b0>)
 800b94a:	4b06      	ldr	r3, [pc, #24]	@ (800b964 <HAL_RCC_OscConfig+0x7b4>)
 800b94c:	4013      	ands	r3, r2
 800b94e:	60cb      	str	r3, [r1, #12]
 800b950:	e001      	b.n	800b956 <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800b952:	2301      	movs	r3, #1
 800b954:	e000      	b.n	800b958 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 800b956:	2300      	movs	r3, #0
}
 800b958:	4618      	mov	r0, r3
 800b95a:	3720      	adds	r7, #32
 800b95c:	46bd      	mov	sp, r7
 800b95e:	bd80      	pop	{r7, pc}
 800b960:	40021000 	.word	0x40021000
 800b964:	feeefffc 	.word	0xfeeefffc

0800b968 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800b968:	b580      	push	{r7, lr}
 800b96a:	b084      	sub	sp, #16
 800b96c:	af00      	add	r7, sp, #0
 800b96e:	6078      	str	r0, [r7, #4]
 800b970:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800b972:	687b      	ldr	r3, [r7, #4]
 800b974:	2b00      	cmp	r3, #0
 800b976:	d101      	bne.n	800b97c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800b978:	2301      	movs	r3, #1
 800b97a:	e0e7      	b.n	800bb4c <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800b97c:	4b75      	ldr	r3, [pc, #468]	@ (800bb54 <HAL_RCC_ClockConfig+0x1ec>)
 800b97e:	681b      	ldr	r3, [r3, #0]
 800b980:	f003 0307 	and.w	r3, r3, #7
 800b984:	683a      	ldr	r2, [r7, #0]
 800b986:	429a      	cmp	r2, r3
 800b988:	d910      	bls.n	800b9ac <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800b98a:	4b72      	ldr	r3, [pc, #456]	@ (800bb54 <HAL_RCC_ClockConfig+0x1ec>)
 800b98c:	681b      	ldr	r3, [r3, #0]
 800b98e:	f023 0207 	bic.w	r2, r3, #7
 800b992:	4970      	ldr	r1, [pc, #448]	@ (800bb54 <HAL_RCC_ClockConfig+0x1ec>)
 800b994:	683b      	ldr	r3, [r7, #0]
 800b996:	4313      	orrs	r3, r2
 800b998:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800b99a:	4b6e      	ldr	r3, [pc, #440]	@ (800bb54 <HAL_RCC_ClockConfig+0x1ec>)
 800b99c:	681b      	ldr	r3, [r3, #0]
 800b99e:	f003 0307 	and.w	r3, r3, #7
 800b9a2:	683a      	ldr	r2, [r7, #0]
 800b9a4:	429a      	cmp	r2, r3
 800b9a6:	d001      	beq.n	800b9ac <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800b9a8:	2301      	movs	r3, #1
 800b9aa:	e0cf      	b.n	800bb4c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800b9ac:	687b      	ldr	r3, [r7, #4]
 800b9ae:	681b      	ldr	r3, [r3, #0]
 800b9b0:	f003 0302 	and.w	r3, r3, #2
 800b9b4:	2b00      	cmp	r3, #0
 800b9b6:	d010      	beq.n	800b9da <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 800b9b8:	687b      	ldr	r3, [r7, #4]
 800b9ba:	689a      	ldr	r2, [r3, #8]
 800b9bc:	4b66      	ldr	r3, [pc, #408]	@ (800bb58 <HAL_RCC_ClockConfig+0x1f0>)
 800b9be:	689b      	ldr	r3, [r3, #8]
 800b9c0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800b9c4:	429a      	cmp	r2, r3
 800b9c6:	d908      	bls.n	800b9da <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800b9c8:	4b63      	ldr	r3, [pc, #396]	@ (800bb58 <HAL_RCC_ClockConfig+0x1f0>)
 800b9ca:	689b      	ldr	r3, [r3, #8]
 800b9cc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800b9d0:	687b      	ldr	r3, [r7, #4]
 800b9d2:	689b      	ldr	r3, [r3, #8]
 800b9d4:	4960      	ldr	r1, [pc, #384]	@ (800bb58 <HAL_RCC_ClockConfig+0x1f0>)
 800b9d6:	4313      	orrs	r3, r2
 800b9d8:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800b9da:	687b      	ldr	r3, [r7, #4]
 800b9dc:	681b      	ldr	r3, [r3, #0]
 800b9de:	f003 0301 	and.w	r3, r3, #1
 800b9e2:	2b00      	cmp	r3, #0
 800b9e4:	d04c      	beq.n	800ba80 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800b9e6:	687b      	ldr	r3, [r7, #4]
 800b9e8:	685b      	ldr	r3, [r3, #4]
 800b9ea:	2b03      	cmp	r3, #3
 800b9ec:	d107      	bne.n	800b9fe <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800b9ee:	4b5a      	ldr	r3, [pc, #360]	@ (800bb58 <HAL_RCC_ClockConfig+0x1f0>)
 800b9f0:	681b      	ldr	r3, [r3, #0]
 800b9f2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800b9f6:	2b00      	cmp	r3, #0
 800b9f8:	d121      	bne.n	800ba3e <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 800b9fa:	2301      	movs	r3, #1
 800b9fc:	e0a6      	b.n	800bb4c <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800b9fe:	687b      	ldr	r3, [r7, #4]
 800ba00:	685b      	ldr	r3, [r3, #4]
 800ba02:	2b02      	cmp	r3, #2
 800ba04:	d107      	bne.n	800ba16 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800ba06:	4b54      	ldr	r3, [pc, #336]	@ (800bb58 <HAL_RCC_ClockConfig+0x1f0>)
 800ba08:	681b      	ldr	r3, [r3, #0]
 800ba0a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800ba0e:	2b00      	cmp	r3, #0
 800ba10:	d115      	bne.n	800ba3e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800ba12:	2301      	movs	r3, #1
 800ba14:	e09a      	b.n	800bb4c <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800ba16:	687b      	ldr	r3, [r7, #4]
 800ba18:	685b      	ldr	r3, [r3, #4]
 800ba1a:	2b00      	cmp	r3, #0
 800ba1c:	d107      	bne.n	800ba2e <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800ba1e:	4b4e      	ldr	r3, [pc, #312]	@ (800bb58 <HAL_RCC_ClockConfig+0x1f0>)
 800ba20:	681b      	ldr	r3, [r3, #0]
 800ba22:	f003 0302 	and.w	r3, r3, #2
 800ba26:	2b00      	cmp	r3, #0
 800ba28:	d109      	bne.n	800ba3e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800ba2a:	2301      	movs	r3, #1
 800ba2c:	e08e      	b.n	800bb4c <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800ba2e:	4b4a      	ldr	r3, [pc, #296]	@ (800bb58 <HAL_RCC_ClockConfig+0x1f0>)
 800ba30:	681b      	ldr	r3, [r3, #0]
 800ba32:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800ba36:	2b00      	cmp	r3, #0
 800ba38:	d101      	bne.n	800ba3e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800ba3a:	2301      	movs	r3, #1
 800ba3c:	e086      	b.n	800bb4c <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800ba3e:	4b46      	ldr	r3, [pc, #280]	@ (800bb58 <HAL_RCC_ClockConfig+0x1f0>)
 800ba40:	689b      	ldr	r3, [r3, #8]
 800ba42:	f023 0203 	bic.w	r2, r3, #3
 800ba46:	687b      	ldr	r3, [r7, #4]
 800ba48:	685b      	ldr	r3, [r3, #4]
 800ba4a:	4943      	ldr	r1, [pc, #268]	@ (800bb58 <HAL_RCC_ClockConfig+0x1f0>)
 800ba4c:	4313      	orrs	r3, r2
 800ba4e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800ba50:	f7fb ff3a 	bl	80078c8 <HAL_GetTick>
 800ba54:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800ba56:	e00a      	b.n	800ba6e <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800ba58:	f7fb ff36 	bl	80078c8 <HAL_GetTick>
 800ba5c:	4602      	mov	r2, r0
 800ba5e:	68fb      	ldr	r3, [r7, #12]
 800ba60:	1ad3      	subs	r3, r2, r3
 800ba62:	f241 3288 	movw	r2, #5000	@ 0x1388
 800ba66:	4293      	cmp	r3, r2
 800ba68:	d901      	bls.n	800ba6e <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 800ba6a:	2303      	movs	r3, #3
 800ba6c:	e06e      	b.n	800bb4c <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800ba6e:	4b3a      	ldr	r3, [pc, #232]	@ (800bb58 <HAL_RCC_ClockConfig+0x1f0>)
 800ba70:	689b      	ldr	r3, [r3, #8]
 800ba72:	f003 020c 	and.w	r2, r3, #12
 800ba76:	687b      	ldr	r3, [r7, #4]
 800ba78:	685b      	ldr	r3, [r3, #4]
 800ba7a:	009b      	lsls	r3, r3, #2
 800ba7c:	429a      	cmp	r2, r3
 800ba7e:	d1eb      	bne.n	800ba58 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800ba80:	687b      	ldr	r3, [r7, #4]
 800ba82:	681b      	ldr	r3, [r3, #0]
 800ba84:	f003 0302 	and.w	r3, r3, #2
 800ba88:	2b00      	cmp	r3, #0
 800ba8a:	d010      	beq.n	800baae <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 800ba8c:	687b      	ldr	r3, [r7, #4]
 800ba8e:	689a      	ldr	r2, [r3, #8]
 800ba90:	4b31      	ldr	r3, [pc, #196]	@ (800bb58 <HAL_RCC_ClockConfig+0x1f0>)
 800ba92:	689b      	ldr	r3, [r3, #8]
 800ba94:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800ba98:	429a      	cmp	r2, r3
 800ba9a:	d208      	bcs.n	800baae <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800ba9c:	4b2e      	ldr	r3, [pc, #184]	@ (800bb58 <HAL_RCC_ClockConfig+0x1f0>)
 800ba9e:	689b      	ldr	r3, [r3, #8]
 800baa0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800baa4:	687b      	ldr	r3, [r7, #4]
 800baa6:	689b      	ldr	r3, [r3, #8]
 800baa8:	492b      	ldr	r1, [pc, #172]	@ (800bb58 <HAL_RCC_ClockConfig+0x1f0>)
 800baaa:	4313      	orrs	r3, r2
 800baac:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800baae:	4b29      	ldr	r3, [pc, #164]	@ (800bb54 <HAL_RCC_ClockConfig+0x1ec>)
 800bab0:	681b      	ldr	r3, [r3, #0]
 800bab2:	f003 0307 	and.w	r3, r3, #7
 800bab6:	683a      	ldr	r2, [r7, #0]
 800bab8:	429a      	cmp	r2, r3
 800baba:	d210      	bcs.n	800bade <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800babc:	4b25      	ldr	r3, [pc, #148]	@ (800bb54 <HAL_RCC_ClockConfig+0x1ec>)
 800babe:	681b      	ldr	r3, [r3, #0]
 800bac0:	f023 0207 	bic.w	r2, r3, #7
 800bac4:	4923      	ldr	r1, [pc, #140]	@ (800bb54 <HAL_RCC_ClockConfig+0x1ec>)
 800bac6:	683b      	ldr	r3, [r7, #0]
 800bac8:	4313      	orrs	r3, r2
 800baca:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800bacc:	4b21      	ldr	r3, [pc, #132]	@ (800bb54 <HAL_RCC_ClockConfig+0x1ec>)
 800bace:	681b      	ldr	r3, [r3, #0]
 800bad0:	f003 0307 	and.w	r3, r3, #7
 800bad4:	683a      	ldr	r2, [r7, #0]
 800bad6:	429a      	cmp	r2, r3
 800bad8:	d001      	beq.n	800bade <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 800bada:	2301      	movs	r3, #1
 800badc:	e036      	b.n	800bb4c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800bade:	687b      	ldr	r3, [r7, #4]
 800bae0:	681b      	ldr	r3, [r3, #0]
 800bae2:	f003 0304 	and.w	r3, r3, #4
 800bae6:	2b00      	cmp	r3, #0
 800bae8:	d008      	beq.n	800bafc <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800baea:	4b1b      	ldr	r3, [pc, #108]	@ (800bb58 <HAL_RCC_ClockConfig+0x1f0>)
 800baec:	689b      	ldr	r3, [r3, #8]
 800baee:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800baf2:	687b      	ldr	r3, [r7, #4]
 800baf4:	68db      	ldr	r3, [r3, #12]
 800baf6:	4918      	ldr	r1, [pc, #96]	@ (800bb58 <HAL_RCC_ClockConfig+0x1f0>)
 800baf8:	4313      	orrs	r3, r2
 800bafa:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800bafc:	687b      	ldr	r3, [r7, #4]
 800bafe:	681b      	ldr	r3, [r3, #0]
 800bb00:	f003 0308 	and.w	r3, r3, #8
 800bb04:	2b00      	cmp	r3, #0
 800bb06:	d009      	beq.n	800bb1c <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800bb08:	4b13      	ldr	r3, [pc, #76]	@ (800bb58 <HAL_RCC_ClockConfig+0x1f0>)
 800bb0a:	689b      	ldr	r3, [r3, #8]
 800bb0c:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800bb10:	687b      	ldr	r3, [r7, #4]
 800bb12:	691b      	ldr	r3, [r3, #16]
 800bb14:	00db      	lsls	r3, r3, #3
 800bb16:	4910      	ldr	r1, [pc, #64]	@ (800bb58 <HAL_RCC_ClockConfig+0x1f0>)
 800bb18:	4313      	orrs	r3, r2
 800bb1a:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800bb1c:	f000 f824 	bl	800bb68 <HAL_RCC_GetSysClockFreq>
 800bb20:	4602      	mov	r2, r0
 800bb22:	4b0d      	ldr	r3, [pc, #52]	@ (800bb58 <HAL_RCC_ClockConfig+0x1f0>)
 800bb24:	689b      	ldr	r3, [r3, #8]
 800bb26:	091b      	lsrs	r3, r3, #4
 800bb28:	f003 030f 	and.w	r3, r3, #15
 800bb2c:	490b      	ldr	r1, [pc, #44]	@ (800bb5c <HAL_RCC_ClockConfig+0x1f4>)
 800bb2e:	5ccb      	ldrb	r3, [r1, r3]
 800bb30:	f003 031f 	and.w	r3, r3, #31
 800bb34:	fa22 f303 	lsr.w	r3, r2, r3
 800bb38:	4a09      	ldr	r2, [pc, #36]	@ (800bb60 <HAL_RCC_ClockConfig+0x1f8>)
 800bb3a:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800bb3c:	4b09      	ldr	r3, [pc, #36]	@ (800bb64 <HAL_RCC_ClockConfig+0x1fc>)
 800bb3e:	681b      	ldr	r3, [r3, #0]
 800bb40:	4618      	mov	r0, r3
 800bb42:	f7fb fe71 	bl	8007828 <HAL_InitTick>
 800bb46:	4603      	mov	r3, r0
 800bb48:	72fb      	strb	r3, [r7, #11]

  return status;
 800bb4a:	7afb      	ldrb	r3, [r7, #11]
}
 800bb4c:	4618      	mov	r0, r3
 800bb4e:	3710      	adds	r7, #16
 800bb50:	46bd      	mov	sp, r7
 800bb52:	bd80      	pop	{r7, pc}
 800bb54:	40022000 	.word	0x40022000
 800bb58:	40021000 	.word	0x40021000
 800bb5c:	0801226c 	.word	0x0801226c
 800bb60:	20000000 	.word	0x20000000
 800bb64:	2000000c 	.word	0x2000000c

0800bb68 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800bb68:	b480      	push	{r7}
 800bb6a:	b089      	sub	sp, #36	@ 0x24
 800bb6c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800bb6e:	2300      	movs	r3, #0
 800bb70:	61fb      	str	r3, [r7, #28]
 800bb72:	2300      	movs	r3, #0
 800bb74:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800bb76:	4b3e      	ldr	r3, [pc, #248]	@ (800bc70 <HAL_RCC_GetSysClockFreq+0x108>)
 800bb78:	689b      	ldr	r3, [r3, #8]
 800bb7a:	f003 030c 	and.w	r3, r3, #12
 800bb7e:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 800bb80:	4b3b      	ldr	r3, [pc, #236]	@ (800bc70 <HAL_RCC_GetSysClockFreq+0x108>)
 800bb82:	68db      	ldr	r3, [r3, #12]
 800bb84:	f003 0303 	and.w	r3, r3, #3
 800bb88:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800bb8a:	693b      	ldr	r3, [r7, #16]
 800bb8c:	2b00      	cmp	r3, #0
 800bb8e:	d005      	beq.n	800bb9c <HAL_RCC_GetSysClockFreq+0x34>
 800bb90:	693b      	ldr	r3, [r7, #16]
 800bb92:	2b0c      	cmp	r3, #12
 800bb94:	d121      	bne.n	800bbda <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800bb96:	68fb      	ldr	r3, [r7, #12]
 800bb98:	2b01      	cmp	r3, #1
 800bb9a:	d11e      	bne.n	800bbda <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 800bb9c:	4b34      	ldr	r3, [pc, #208]	@ (800bc70 <HAL_RCC_GetSysClockFreq+0x108>)
 800bb9e:	681b      	ldr	r3, [r3, #0]
 800bba0:	f003 0308 	and.w	r3, r3, #8
 800bba4:	2b00      	cmp	r3, #0
 800bba6:	d107      	bne.n	800bbb8 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 800bba8:	4b31      	ldr	r3, [pc, #196]	@ (800bc70 <HAL_RCC_GetSysClockFreq+0x108>)
 800bbaa:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800bbae:	0a1b      	lsrs	r3, r3, #8
 800bbb0:	f003 030f 	and.w	r3, r3, #15
 800bbb4:	61fb      	str	r3, [r7, #28]
 800bbb6:	e005      	b.n	800bbc4 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 800bbb8:	4b2d      	ldr	r3, [pc, #180]	@ (800bc70 <HAL_RCC_GetSysClockFreq+0x108>)
 800bbba:	681b      	ldr	r3, [r3, #0]
 800bbbc:	091b      	lsrs	r3, r3, #4
 800bbbe:	f003 030f 	and.w	r3, r3, #15
 800bbc2:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 800bbc4:	4a2b      	ldr	r2, [pc, #172]	@ (800bc74 <HAL_RCC_GetSysClockFreq+0x10c>)
 800bbc6:	69fb      	ldr	r3, [r7, #28]
 800bbc8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800bbcc:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800bbce:	693b      	ldr	r3, [r7, #16]
 800bbd0:	2b00      	cmp	r3, #0
 800bbd2:	d10d      	bne.n	800bbf0 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 800bbd4:	69fb      	ldr	r3, [r7, #28]
 800bbd6:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800bbd8:	e00a      	b.n	800bbf0 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800bbda:	693b      	ldr	r3, [r7, #16]
 800bbdc:	2b04      	cmp	r3, #4
 800bbde:	d102      	bne.n	800bbe6 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800bbe0:	4b25      	ldr	r3, [pc, #148]	@ (800bc78 <HAL_RCC_GetSysClockFreq+0x110>)
 800bbe2:	61bb      	str	r3, [r7, #24]
 800bbe4:	e004      	b.n	800bbf0 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800bbe6:	693b      	ldr	r3, [r7, #16]
 800bbe8:	2b08      	cmp	r3, #8
 800bbea:	d101      	bne.n	800bbf0 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800bbec:	4b23      	ldr	r3, [pc, #140]	@ (800bc7c <HAL_RCC_GetSysClockFreq+0x114>)
 800bbee:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 800bbf0:	693b      	ldr	r3, [r7, #16]
 800bbf2:	2b0c      	cmp	r3, #12
 800bbf4:	d134      	bne.n	800bc60 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800bbf6:	4b1e      	ldr	r3, [pc, #120]	@ (800bc70 <HAL_RCC_GetSysClockFreq+0x108>)
 800bbf8:	68db      	ldr	r3, [r3, #12]
 800bbfa:	f003 0303 	and.w	r3, r3, #3
 800bbfe:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800bc00:	68bb      	ldr	r3, [r7, #8]
 800bc02:	2b02      	cmp	r3, #2
 800bc04:	d003      	beq.n	800bc0e <HAL_RCC_GetSysClockFreq+0xa6>
 800bc06:	68bb      	ldr	r3, [r7, #8]
 800bc08:	2b03      	cmp	r3, #3
 800bc0a:	d003      	beq.n	800bc14 <HAL_RCC_GetSysClockFreq+0xac>
 800bc0c:	e005      	b.n	800bc1a <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800bc0e:	4b1a      	ldr	r3, [pc, #104]	@ (800bc78 <HAL_RCC_GetSysClockFreq+0x110>)
 800bc10:	617b      	str	r3, [r7, #20]
      break;
 800bc12:	e005      	b.n	800bc20 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 800bc14:	4b19      	ldr	r3, [pc, #100]	@ (800bc7c <HAL_RCC_GetSysClockFreq+0x114>)
 800bc16:	617b      	str	r3, [r7, #20]
      break;
 800bc18:	e002      	b.n	800bc20 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800bc1a:	69fb      	ldr	r3, [r7, #28]
 800bc1c:	617b      	str	r3, [r7, #20]
      break;
 800bc1e:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800bc20:	4b13      	ldr	r3, [pc, #76]	@ (800bc70 <HAL_RCC_GetSysClockFreq+0x108>)
 800bc22:	68db      	ldr	r3, [r3, #12]
 800bc24:	091b      	lsrs	r3, r3, #4
 800bc26:	f003 0307 	and.w	r3, r3, #7
 800bc2a:	3301      	adds	r3, #1
 800bc2c:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800bc2e:	4b10      	ldr	r3, [pc, #64]	@ (800bc70 <HAL_RCC_GetSysClockFreq+0x108>)
 800bc30:	68db      	ldr	r3, [r3, #12]
 800bc32:	0a1b      	lsrs	r3, r3, #8
 800bc34:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800bc38:	697a      	ldr	r2, [r7, #20]
 800bc3a:	fb03 f202 	mul.w	r2, r3, r2
 800bc3e:	687b      	ldr	r3, [r7, #4]
 800bc40:	fbb2 f3f3 	udiv	r3, r2, r3
 800bc44:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800bc46:	4b0a      	ldr	r3, [pc, #40]	@ (800bc70 <HAL_RCC_GetSysClockFreq+0x108>)
 800bc48:	68db      	ldr	r3, [r3, #12]
 800bc4a:	0e5b      	lsrs	r3, r3, #25
 800bc4c:	f003 0303 	and.w	r3, r3, #3
 800bc50:	3301      	adds	r3, #1
 800bc52:	005b      	lsls	r3, r3, #1
 800bc54:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800bc56:	697a      	ldr	r2, [r7, #20]
 800bc58:	683b      	ldr	r3, [r7, #0]
 800bc5a:	fbb2 f3f3 	udiv	r3, r2, r3
 800bc5e:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 800bc60:	69bb      	ldr	r3, [r7, #24]
}
 800bc62:	4618      	mov	r0, r3
 800bc64:	3724      	adds	r7, #36	@ 0x24
 800bc66:	46bd      	mov	sp, r7
 800bc68:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc6c:	4770      	bx	lr
 800bc6e:	bf00      	nop
 800bc70:	40021000 	.word	0x40021000
 800bc74:	08012284 	.word	0x08012284
 800bc78:	00f42400 	.word	0x00f42400
 800bc7c:	007a1200 	.word	0x007a1200

0800bc80 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800bc80:	b480      	push	{r7}
 800bc82:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800bc84:	4b03      	ldr	r3, [pc, #12]	@ (800bc94 <HAL_RCC_GetHCLKFreq+0x14>)
 800bc86:	681b      	ldr	r3, [r3, #0]
}
 800bc88:	4618      	mov	r0, r3
 800bc8a:	46bd      	mov	sp, r7
 800bc8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc90:	4770      	bx	lr
 800bc92:	bf00      	nop
 800bc94:	20000000 	.word	0x20000000

0800bc98 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800bc98:	b580      	push	{r7, lr}
 800bc9a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 800bc9c:	f7ff fff0 	bl	800bc80 <HAL_RCC_GetHCLKFreq>
 800bca0:	4602      	mov	r2, r0
 800bca2:	4b06      	ldr	r3, [pc, #24]	@ (800bcbc <HAL_RCC_GetPCLK1Freq+0x24>)
 800bca4:	689b      	ldr	r3, [r3, #8]
 800bca6:	0a1b      	lsrs	r3, r3, #8
 800bca8:	f003 0307 	and.w	r3, r3, #7
 800bcac:	4904      	ldr	r1, [pc, #16]	@ (800bcc0 <HAL_RCC_GetPCLK1Freq+0x28>)
 800bcae:	5ccb      	ldrb	r3, [r1, r3]
 800bcb0:	f003 031f 	and.w	r3, r3, #31
 800bcb4:	fa22 f303 	lsr.w	r3, r2, r3
}
 800bcb8:	4618      	mov	r0, r3
 800bcba:	bd80      	pop	{r7, pc}
 800bcbc:	40021000 	.word	0x40021000
 800bcc0:	0801227c 	.word	0x0801227c

0800bcc4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800bcc4:	b580      	push	{r7, lr}
 800bcc6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 800bcc8:	f7ff ffda 	bl	800bc80 <HAL_RCC_GetHCLKFreq>
 800bccc:	4602      	mov	r2, r0
 800bcce:	4b06      	ldr	r3, [pc, #24]	@ (800bce8 <HAL_RCC_GetPCLK2Freq+0x24>)
 800bcd0:	689b      	ldr	r3, [r3, #8]
 800bcd2:	0adb      	lsrs	r3, r3, #11
 800bcd4:	f003 0307 	and.w	r3, r3, #7
 800bcd8:	4904      	ldr	r1, [pc, #16]	@ (800bcec <HAL_RCC_GetPCLK2Freq+0x28>)
 800bcda:	5ccb      	ldrb	r3, [r1, r3]
 800bcdc:	f003 031f 	and.w	r3, r3, #31
 800bce0:	fa22 f303 	lsr.w	r3, r2, r3
}
 800bce4:	4618      	mov	r0, r3
 800bce6:	bd80      	pop	{r7, pc}
 800bce8:	40021000 	.word	0x40021000
 800bcec:	0801227c 	.word	0x0801227c

0800bcf0 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 800bcf0:	b580      	push	{r7, lr}
 800bcf2:	b086      	sub	sp, #24
 800bcf4:	af00      	add	r7, sp, #0
 800bcf6:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 800bcf8:	2300      	movs	r3, #0
 800bcfa:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 800bcfc:	4b2a      	ldr	r3, [pc, #168]	@ (800bda8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800bcfe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800bd00:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800bd04:	2b00      	cmp	r3, #0
 800bd06:	d003      	beq.n	800bd10 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 800bd08:	f7fe fd8c 	bl	800a824 <HAL_PWREx_GetVoltageRange>
 800bd0c:	6178      	str	r0, [r7, #20]
 800bd0e:	e014      	b.n	800bd3a <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 800bd10:	4b25      	ldr	r3, [pc, #148]	@ (800bda8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800bd12:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800bd14:	4a24      	ldr	r2, [pc, #144]	@ (800bda8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800bd16:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800bd1a:	6593      	str	r3, [r2, #88]	@ 0x58
 800bd1c:	4b22      	ldr	r3, [pc, #136]	@ (800bda8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800bd1e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800bd20:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800bd24:	60fb      	str	r3, [r7, #12]
 800bd26:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 800bd28:	f7fe fd7c 	bl	800a824 <HAL_PWREx_GetVoltageRange>
 800bd2c:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800bd2e:	4b1e      	ldr	r3, [pc, #120]	@ (800bda8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800bd30:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800bd32:	4a1d      	ldr	r2, [pc, #116]	@ (800bda8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800bd34:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800bd38:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800bd3a:	697b      	ldr	r3, [r7, #20]
 800bd3c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800bd40:	d10b      	bne.n	800bd5a <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800bd42:	687b      	ldr	r3, [r7, #4]
 800bd44:	2b80      	cmp	r3, #128	@ 0x80
 800bd46:	d919      	bls.n	800bd7c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 800bd48:	687b      	ldr	r3, [r7, #4]
 800bd4a:	2ba0      	cmp	r3, #160	@ 0xa0
 800bd4c:	d902      	bls.n	800bd54 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800bd4e:	2302      	movs	r3, #2
 800bd50:	613b      	str	r3, [r7, #16]
 800bd52:	e013      	b.n	800bd7c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800bd54:	2301      	movs	r3, #1
 800bd56:	613b      	str	r3, [r7, #16]
 800bd58:	e010      	b.n	800bd7c <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800bd5a:	687b      	ldr	r3, [r7, #4]
 800bd5c:	2b80      	cmp	r3, #128	@ 0x80
 800bd5e:	d902      	bls.n	800bd66 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 800bd60:	2303      	movs	r3, #3
 800bd62:	613b      	str	r3, [r7, #16]
 800bd64:	e00a      	b.n	800bd7c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800bd66:	687b      	ldr	r3, [r7, #4]
 800bd68:	2b80      	cmp	r3, #128	@ 0x80
 800bd6a:	d102      	bne.n	800bd72 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800bd6c:	2302      	movs	r3, #2
 800bd6e:	613b      	str	r3, [r7, #16]
 800bd70:	e004      	b.n	800bd7c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800bd72:	687b      	ldr	r3, [r7, #4]
 800bd74:	2b70      	cmp	r3, #112	@ 0x70
 800bd76:	d101      	bne.n	800bd7c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800bd78:	2301      	movs	r3, #1
 800bd7a:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 800bd7c:	4b0b      	ldr	r3, [pc, #44]	@ (800bdac <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800bd7e:	681b      	ldr	r3, [r3, #0]
 800bd80:	f023 0207 	bic.w	r2, r3, #7
 800bd84:	4909      	ldr	r1, [pc, #36]	@ (800bdac <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800bd86:	693b      	ldr	r3, [r7, #16]
 800bd88:	4313      	orrs	r3, r2
 800bd8a:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 800bd8c:	4b07      	ldr	r3, [pc, #28]	@ (800bdac <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800bd8e:	681b      	ldr	r3, [r3, #0]
 800bd90:	f003 0307 	and.w	r3, r3, #7
 800bd94:	693a      	ldr	r2, [r7, #16]
 800bd96:	429a      	cmp	r2, r3
 800bd98:	d001      	beq.n	800bd9e <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 800bd9a:	2301      	movs	r3, #1
 800bd9c:	e000      	b.n	800bda0 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800bd9e:	2300      	movs	r3, #0
}
 800bda0:	4618      	mov	r0, r3
 800bda2:	3718      	adds	r7, #24
 800bda4:	46bd      	mov	sp, r7
 800bda6:	bd80      	pop	{r7, pc}
 800bda8:	40021000 	.word	0x40021000
 800bdac:	40022000 	.word	0x40022000

0800bdb0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800bdb0:	b580      	push	{r7, lr}
 800bdb2:	b086      	sub	sp, #24
 800bdb4:	af00      	add	r7, sp, #0
 800bdb6:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800bdb8:	2300      	movs	r3, #0
 800bdba:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800bdbc:	2300      	movs	r3, #0
 800bdbe:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 800bdc0:	687b      	ldr	r3, [r7, #4]
 800bdc2:	681b      	ldr	r3, [r3, #0]
 800bdc4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800bdc8:	2b00      	cmp	r3, #0
 800bdca:	d041      	beq.n	800be50 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 800bdcc:	687b      	ldr	r3, [r7, #4]
 800bdce:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800bdd0:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 800bdd4:	d02a      	beq.n	800be2c <HAL_RCCEx_PeriphCLKConfig+0x7c>
 800bdd6:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 800bdda:	d824      	bhi.n	800be26 <HAL_RCCEx_PeriphCLKConfig+0x76>
 800bddc:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800bde0:	d008      	beq.n	800bdf4 <HAL_RCCEx_PeriphCLKConfig+0x44>
 800bde2:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800bde6:	d81e      	bhi.n	800be26 <HAL_RCCEx_PeriphCLKConfig+0x76>
 800bde8:	2b00      	cmp	r3, #0
 800bdea:	d00a      	beq.n	800be02 <HAL_RCCEx_PeriphCLKConfig+0x52>
 800bdec:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800bdf0:	d010      	beq.n	800be14 <HAL_RCCEx_PeriphCLKConfig+0x64>
 800bdf2:	e018      	b.n	800be26 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800bdf4:	4b86      	ldr	r3, [pc, #536]	@ (800c010 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800bdf6:	68db      	ldr	r3, [r3, #12]
 800bdf8:	4a85      	ldr	r2, [pc, #532]	@ (800c010 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800bdfa:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800bdfe:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 800be00:	e015      	b.n	800be2e <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800be02:	687b      	ldr	r3, [r7, #4]
 800be04:	3304      	adds	r3, #4
 800be06:	2100      	movs	r1, #0
 800be08:	4618      	mov	r0, r3
 800be0a:	f000 fabb 	bl	800c384 <RCCEx_PLLSAI1_Config>
 800be0e:	4603      	mov	r3, r0
 800be10:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800be12:	e00c      	b.n	800be2e <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800be14:	687b      	ldr	r3, [r7, #4]
 800be16:	3320      	adds	r3, #32
 800be18:	2100      	movs	r1, #0
 800be1a:	4618      	mov	r0, r3
 800be1c:	f000 fba6 	bl	800c56c <RCCEx_PLLSAI2_Config>
 800be20:	4603      	mov	r3, r0
 800be22:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800be24:	e003      	b.n	800be2e <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800be26:	2301      	movs	r3, #1
 800be28:	74fb      	strb	r3, [r7, #19]
      break;
 800be2a:	e000      	b.n	800be2e <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 800be2c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800be2e:	7cfb      	ldrb	r3, [r7, #19]
 800be30:	2b00      	cmp	r3, #0
 800be32:	d10b      	bne.n	800be4c <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800be34:	4b76      	ldr	r3, [pc, #472]	@ (800c010 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800be36:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800be3a:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 800be3e:	687b      	ldr	r3, [r7, #4]
 800be40:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800be42:	4973      	ldr	r1, [pc, #460]	@ (800c010 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800be44:	4313      	orrs	r3, r2
 800be46:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 800be4a:	e001      	b.n	800be50 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800be4c:	7cfb      	ldrb	r3, [r7, #19]
 800be4e:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 800be50:	687b      	ldr	r3, [r7, #4]
 800be52:	681b      	ldr	r3, [r3, #0]
 800be54:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800be58:	2b00      	cmp	r3, #0
 800be5a:	d041      	beq.n	800bee0 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 800be5c:	687b      	ldr	r3, [r7, #4]
 800be5e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800be60:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800be64:	d02a      	beq.n	800bebc <HAL_RCCEx_PeriphCLKConfig+0x10c>
 800be66:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800be6a:	d824      	bhi.n	800beb6 <HAL_RCCEx_PeriphCLKConfig+0x106>
 800be6c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800be70:	d008      	beq.n	800be84 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800be72:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800be76:	d81e      	bhi.n	800beb6 <HAL_RCCEx_PeriphCLKConfig+0x106>
 800be78:	2b00      	cmp	r3, #0
 800be7a:	d00a      	beq.n	800be92 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 800be7c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800be80:	d010      	beq.n	800bea4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800be82:	e018      	b.n	800beb6 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800be84:	4b62      	ldr	r3, [pc, #392]	@ (800c010 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800be86:	68db      	ldr	r3, [r3, #12]
 800be88:	4a61      	ldr	r2, [pc, #388]	@ (800c010 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800be8a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800be8e:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800be90:	e015      	b.n	800bebe <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800be92:	687b      	ldr	r3, [r7, #4]
 800be94:	3304      	adds	r3, #4
 800be96:	2100      	movs	r1, #0
 800be98:	4618      	mov	r0, r3
 800be9a:	f000 fa73 	bl	800c384 <RCCEx_PLLSAI1_Config>
 800be9e:	4603      	mov	r3, r0
 800bea0:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800bea2:	e00c      	b.n	800bebe <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800bea4:	687b      	ldr	r3, [r7, #4]
 800bea6:	3320      	adds	r3, #32
 800bea8:	2100      	movs	r1, #0
 800beaa:	4618      	mov	r0, r3
 800beac:	f000 fb5e 	bl	800c56c <RCCEx_PLLSAI2_Config>
 800beb0:	4603      	mov	r3, r0
 800beb2:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800beb4:	e003      	b.n	800bebe <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800beb6:	2301      	movs	r3, #1
 800beb8:	74fb      	strb	r3, [r7, #19]
      break;
 800beba:	e000      	b.n	800bebe <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 800bebc:	bf00      	nop
    }

    if(ret == HAL_OK)
 800bebe:	7cfb      	ldrb	r3, [r7, #19]
 800bec0:	2b00      	cmp	r3, #0
 800bec2:	d10b      	bne.n	800bedc <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800bec4:	4b52      	ldr	r3, [pc, #328]	@ (800c010 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800bec6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800beca:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 800bece:	687b      	ldr	r3, [r7, #4]
 800bed0:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800bed2:	494f      	ldr	r1, [pc, #316]	@ (800c010 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800bed4:	4313      	orrs	r3, r2
 800bed6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 800beda:	e001      	b.n	800bee0 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bedc:	7cfb      	ldrb	r3, [r7, #19]
 800bede:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800bee0:	687b      	ldr	r3, [r7, #4]
 800bee2:	681b      	ldr	r3, [r3, #0]
 800bee4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800bee8:	2b00      	cmp	r3, #0
 800beea:	f000 80a0 	beq.w	800c02e <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800beee:	2300      	movs	r3, #0
 800bef0:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800bef2:	4b47      	ldr	r3, [pc, #284]	@ (800c010 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800bef4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800bef6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800befa:	2b00      	cmp	r3, #0
 800befc:	d101      	bne.n	800bf02 <HAL_RCCEx_PeriphCLKConfig+0x152>
 800befe:	2301      	movs	r3, #1
 800bf00:	e000      	b.n	800bf04 <HAL_RCCEx_PeriphCLKConfig+0x154>
 800bf02:	2300      	movs	r3, #0
 800bf04:	2b00      	cmp	r3, #0
 800bf06:	d00d      	beq.n	800bf24 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800bf08:	4b41      	ldr	r3, [pc, #260]	@ (800c010 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800bf0a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800bf0c:	4a40      	ldr	r2, [pc, #256]	@ (800c010 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800bf0e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800bf12:	6593      	str	r3, [r2, #88]	@ 0x58
 800bf14:	4b3e      	ldr	r3, [pc, #248]	@ (800c010 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800bf16:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800bf18:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800bf1c:	60bb      	str	r3, [r7, #8]
 800bf1e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800bf20:	2301      	movs	r3, #1
 800bf22:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800bf24:	4b3b      	ldr	r3, [pc, #236]	@ (800c014 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800bf26:	681b      	ldr	r3, [r3, #0]
 800bf28:	4a3a      	ldr	r2, [pc, #232]	@ (800c014 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800bf2a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800bf2e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800bf30:	f7fb fcca 	bl	80078c8 <HAL_GetTick>
 800bf34:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800bf36:	e009      	b.n	800bf4c <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800bf38:	f7fb fcc6 	bl	80078c8 <HAL_GetTick>
 800bf3c:	4602      	mov	r2, r0
 800bf3e:	68fb      	ldr	r3, [r7, #12]
 800bf40:	1ad3      	subs	r3, r2, r3
 800bf42:	2b02      	cmp	r3, #2
 800bf44:	d902      	bls.n	800bf4c <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 800bf46:	2303      	movs	r3, #3
 800bf48:	74fb      	strb	r3, [r7, #19]
        break;
 800bf4a:	e005      	b.n	800bf58 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800bf4c:	4b31      	ldr	r3, [pc, #196]	@ (800c014 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800bf4e:	681b      	ldr	r3, [r3, #0]
 800bf50:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800bf54:	2b00      	cmp	r3, #0
 800bf56:	d0ef      	beq.n	800bf38 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 800bf58:	7cfb      	ldrb	r3, [r7, #19]
 800bf5a:	2b00      	cmp	r3, #0
 800bf5c:	d15c      	bne.n	800c018 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800bf5e:	4b2c      	ldr	r3, [pc, #176]	@ (800c010 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800bf60:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800bf64:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800bf68:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800bf6a:	697b      	ldr	r3, [r7, #20]
 800bf6c:	2b00      	cmp	r3, #0
 800bf6e:	d01f      	beq.n	800bfb0 <HAL_RCCEx_PeriphCLKConfig+0x200>
 800bf70:	687b      	ldr	r3, [r7, #4]
 800bf72:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800bf76:	697a      	ldr	r2, [r7, #20]
 800bf78:	429a      	cmp	r2, r3
 800bf7a:	d019      	beq.n	800bfb0 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800bf7c:	4b24      	ldr	r3, [pc, #144]	@ (800c010 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800bf7e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800bf82:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800bf86:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800bf88:	4b21      	ldr	r3, [pc, #132]	@ (800c010 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800bf8a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800bf8e:	4a20      	ldr	r2, [pc, #128]	@ (800c010 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800bf90:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800bf94:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800bf98:	4b1d      	ldr	r3, [pc, #116]	@ (800c010 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800bf9a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800bf9e:	4a1c      	ldr	r2, [pc, #112]	@ (800c010 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800bfa0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800bfa4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800bfa8:	4a19      	ldr	r2, [pc, #100]	@ (800c010 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800bfaa:	697b      	ldr	r3, [r7, #20]
 800bfac:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800bfb0:	697b      	ldr	r3, [r7, #20]
 800bfb2:	f003 0301 	and.w	r3, r3, #1
 800bfb6:	2b00      	cmp	r3, #0
 800bfb8:	d016      	beq.n	800bfe8 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800bfba:	f7fb fc85 	bl	80078c8 <HAL_GetTick>
 800bfbe:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800bfc0:	e00b      	b.n	800bfda <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800bfc2:	f7fb fc81 	bl	80078c8 <HAL_GetTick>
 800bfc6:	4602      	mov	r2, r0
 800bfc8:	68fb      	ldr	r3, [r7, #12]
 800bfca:	1ad3      	subs	r3, r2, r3
 800bfcc:	f241 3288 	movw	r2, #5000	@ 0x1388
 800bfd0:	4293      	cmp	r3, r2
 800bfd2:	d902      	bls.n	800bfda <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 800bfd4:	2303      	movs	r3, #3
 800bfd6:	74fb      	strb	r3, [r7, #19]
            break;
 800bfd8:	e006      	b.n	800bfe8 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800bfda:	4b0d      	ldr	r3, [pc, #52]	@ (800c010 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800bfdc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800bfe0:	f003 0302 	and.w	r3, r3, #2
 800bfe4:	2b00      	cmp	r3, #0
 800bfe6:	d0ec      	beq.n	800bfc2 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 800bfe8:	7cfb      	ldrb	r3, [r7, #19]
 800bfea:	2b00      	cmp	r3, #0
 800bfec:	d10c      	bne.n	800c008 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800bfee:	4b08      	ldr	r3, [pc, #32]	@ (800c010 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800bff0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800bff4:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800bff8:	687b      	ldr	r3, [r7, #4]
 800bffa:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800bffe:	4904      	ldr	r1, [pc, #16]	@ (800c010 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800c000:	4313      	orrs	r3, r2
 800c002:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 800c006:	e009      	b.n	800c01c <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800c008:	7cfb      	ldrb	r3, [r7, #19]
 800c00a:	74bb      	strb	r3, [r7, #18]
 800c00c:	e006      	b.n	800c01c <HAL_RCCEx_PeriphCLKConfig+0x26c>
 800c00e:	bf00      	nop
 800c010:	40021000 	.word	0x40021000
 800c014:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c018:	7cfb      	ldrb	r3, [r7, #19]
 800c01a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800c01c:	7c7b      	ldrb	r3, [r7, #17]
 800c01e:	2b01      	cmp	r3, #1
 800c020:	d105      	bne.n	800c02e <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800c022:	4b9e      	ldr	r3, [pc, #632]	@ (800c29c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800c024:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800c026:	4a9d      	ldr	r2, [pc, #628]	@ (800c29c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800c028:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800c02c:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800c02e:	687b      	ldr	r3, [r7, #4]
 800c030:	681b      	ldr	r3, [r3, #0]
 800c032:	f003 0301 	and.w	r3, r3, #1
 800c036:	2b00      	cmp	r3, #0
 800c038:	d00a      	beq.n	800c050 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800c03a:	4b98      	ldr	r3, [pc, #608]	@ (800c29c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800c03c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800c040:	f023 0203 	bic.w	r2, r3, #3
 800c044:	687b      	ldr	r3, [r7, #4]
 800c046:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c048:	4994      	ldr	r1, [pc, #592]	@ (800c29c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800c04a:	4313      	orrs	r3, r2
 800c04c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800c050:	687b      	ldr	r3, [r7, #4]
 800c052:	681b      	ldr	r3, [r3, #0]
 800c054:	f003 0302 	and.w	r3, r3, #2
 800c058:	2b00      	cmp	r3, #0
 800c05a:	d00a      	beq.n	800c072 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800c05c:	4b8f      	ldr	r3, [pc, #572]	@ (800c29c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800c05e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800c062:	f023 020c 	bic.w	r2, r3, #12
 800c066:	687b      	ldr	r3, [r7, #4]
 800c068:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c06a:	498c      	ldr	r1, [pc, #560]	@ (800c29c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800c06c:	4313      	orrs	r3, r2
 800c06e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800c072:	687b      	ldr	r3, [r7, #4]
 800c074:	681b      	ldr	r3, [r3, #0]
 800c076:	f003 0304 	and.w	r3, r3, #4
 800c07a:	2b00      	cmp	r3, #0
 800c07c:	d00a      	beq.n	800c094 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800c07e:	4b87      	ldr	r3, [pc, #540]	@ (800c29c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800c080:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800c084:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 800c088:	687b      	ldr	r3, [r7, #4]
 800c08a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c08c:	4983      	ldr	r1, [pc, #524]	@ (800c29c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800c08e:	4313      	orrs	r3, r2
 800c090:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800c094:	687b      	ldr	r3, [r7, #4]
 800c096:	681b      	ldr	r3, [r3, #0]
 800c098:	f003 0308 	and.w	r3, r3, #8
 800c09c:	2b00      	cmp	r3, #0
 800c09e:	d00a      	beq.n	800c0b6 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800c0a0:	4b7e      	ldr	r3, [pc, #504]	@ (800c29c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800c0a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800c0a6:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800c0aa:	687b      	ldr	r3, [r7, #4]
 800c0ac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c0ae:	497b      	ldr	r1, [pc, #492]	@ (800c29c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800c0b0:	4313      	orrs	r3, r2
 800c0b2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800c0b6:	687b      	ldr	r3, [r7, #4]
 800c0b8:	681b      	ldr	r3, [r3, #0]
 800c0ba:	f003 0310 	and.w	r3, r3, #16
 800c0be:	2b00      	cmp	r3, #0
 800c0c0:	d00a      	beq.n	800c0d8 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800c0c2:	4b76      	ldr	r3, [pc, #472]	@ (800c29c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800c0c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800c0c8:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800c0cc:	687b      	ldr	r3, [r7, #4]
 800c0ce:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800c0d0:	4972      	ldr	r1, [pc, #456]	@ (800c29c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800c0d2:	4313      	orrs	r3, r2
 800c0d4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800c0d8:	687b      	ldr	r3, [r7, #4]
 800c0da:	681b      	ldr	r3, [r3, #0]
 800c0dc:	f003 0320 	and.w	r3, r3, #32
 800c0e0:	2b00      	cmp	r3, #0
 800c0e2:	d00a      	beq.n	800c0fa <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800c0e4:	4b6d      	ldr	r3, [pc, #436]	@ (800c29c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800c0e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800c0ea:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800c0ee:	687b      	ldr	r3, [r7, #4]
 800c0f0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800c0f2:	496a      	ldr	r1, [pc, #424]	@ (800c29c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800c0f4:	4313      	orrs	r3, r2
 800c0f6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800c0fa:	687b      	ldr	r3, [r7, #4]
 800c0fc:	681b      	ldr	r3, [r3, #0]
 800c0fe:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800c102:	2b00      	cmp	r3, #0
 800c104:	d00a      	beq.n	800c11c <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800c106:	4b65      	ldr	r3, [pc, #404]	@ (800c29c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800c108:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800c10c:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 800c110:	687b      	ldr	r3, [r7, #4]
 800c112:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800c114:	4961      	ldr	r1, [pc, #388]	@ (800c29c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800c116:	4313      	orrs	r3, r2
 800c118:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800c11c:	687b      	ldr	r3, [r7, #4]
 800c11e:	681b      	ldr	r3, [r3, #0]
 800c120:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800c124:	2b00      	cmp	r3, #0
 800c126:	d00a      	beq.n	800c13e <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800c128:	4b5c      	ldr	r3, [pc, #368]	@ (800c29c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800c12a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800c12e:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800c132:	687b      	ldr	r3, [r7, #4]
 800c134:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800c136:	4959      	ldr	r1, [pc, #356]	@ (800c29c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800c138:	4313      	orrs	r3, r2
 800c13a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800c13e:	687b      	ldr	r3, [r7, #4]
 800c140:	681b      	ldr	r3, [r3, #0]
 800c142:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c146:	2b00      	cmp	r3, #0
 800c148:	d00a      	beq.n	800c160 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800c14a:	4b54      	ldr	r3, [pc, #336]	@ (800c29c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800c14c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800c150:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 800c154:	687b      	ldr	r3, [r7, #4]
 800c156:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800c158:	4950      	ldr	r1, [pc, #320]	@ (800c29c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800c15a:	4313      	orrs	r3, r2
 800c15c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800c160:	687b      	ldr	r3, [r7, #4]
 800c162:	681b      	ldr	r3, [r3, #0]
 800c164:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800c168:	2b00      	cmp	r3, #0
 800c16a:	d00a      	beq.n	800c182 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800c16c:	4b4b      	ldr	r3, [pc, #300]	@ (800c29c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800c16e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800c172:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 800c176:	687b      	ldr	r3, [r7, #4]
 800c178:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c17a:	4948      	ldr	r1, [pc, #288]	@ (800c29c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800c17c:	4313      	orrs	r3, r2
 800c17e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800c182:	687b      	ldr	r3, [r7, #4]
 800c184:	681b      	ldr	r3, [r3, #0]
 800c186:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800c18a:	2b00      	cmp	r3, #0
 800c18c:	d00a      	beq.n	800c1a4 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800c18e:	4b43      	ldr	r3, [pc, #268]	@ (800c29c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800c190:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800c194:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 800c198:	687b      	ldr	r3, [r7, #4]
 800c19a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800c19c:	493f      	ldr	r1, [pc, #252]	@ (800c29c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800c19e:	4313      	orrs	r3, r2
 800c1a0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800c1a4:	687b      	ldr	r3, [r7, #4]
 800c1a6:	681b      	ldr	r3, [r3, #0]
 800c1a8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800c1ac:	2b00      	cmp	r3, #0
 800c1ae:	d028      	beq.n	800c202 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800c1b0:	4b3a      	ldr	r3, [pc, #232]	@ (800c29c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800c1b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800c1b6:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800c1ba:	687b      	ldr	r3, [r7, #4]
 800c1bc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800c1be:	4937      	ldr	r1, [pc, #220]	@ (800c29c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800c1c0:	4313      	orrs	r3, r2
 800c1c2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800c1c6:	687b      	ldr	r3, [r7, #4]
 800c1c8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800c1ca:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800c1ce:	d106      	bne.n	800c1de <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800c1d0:	4b32      	ldr	r3, [pc, #200]	@ (800c29c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800c1d2:	68db      	ldr	r3, [r3, #12]
 800c1d4:	4a31      	ldr	r2, [pc, #196]	@ (800c29c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800c1d6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800c1da:	60d3      	str	r3, [r2, #12]
 800c1dc:	e011      	b.n	800c202 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800c1de:	687b      	ldr	r3, [r7, #4]
 800c1e0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800c1e2:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800c1e6:	d10c      	bne.n	800c202 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800c1e8:	687b      	ldr	r3, [r7, #4]
 800c1ea:	3304      	adds	r3, #4
 800c1ec:	2101      	movs	r1, #1
 800c1ee:	4618      	mov	r0, r3
 800c1f0:	f000 f8c8 	bl	800c384 <RCCEx_PLLSAI1_Config>
 800c1f4:	4603      	mov	r3, r0
 800c1f6:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 800c1f8:	7cfb      	ldrb	r3, [r7, #19]
 800c1fa:	2b00      	cmp	r3, #0
 800c1fc:	d001      	beq.n	800c202 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 800c1fe:	7cfb      	ldrb	r3, [r7, #19]
 800c200:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 800c202:	687b      	ldr	r3, [r7, #4]
 800c204:	681b      	ldr	r3, [r3, #0]
 800c206:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800c20a:	2b00      	cmp	r3, #0
 800c20c:	d028      	beq.n	800c260 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800c20e:	4b23      	ldr	r3, [pc, #140]	@ (800c29c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800c210:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800c214:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800c218:	687b      	ldr	r3, [r7, #4]
 800c21a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800c21c:	491f      	ldr	r1, [pc, #124]	@ (800c29c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800c21e:	4313      	orrs	r3, r2
 800c220:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 800c224:	687b      	ldr	r3, [r7, #4]
 800c226:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800c228:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800c22c:	d106      	bne.n	800c23c <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800c22e:	4b1b      	ldr	r3, [pc, #108]	@ (800c29c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800c230:	68db      	ldr	r3, [r3, #12]
 800c232:	4a1a      	ldr	r2, [pc, #104]	@ (800c29c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800c234:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800c238:	60d3      	str	r3, [r2, #12]
 800c23a:	e011      	b.n	800c260 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 800c23c:	687b      	ldr	r3, [r7, #4]
 800c23e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800c240:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800c244:	d10c      	bne.n	800c260 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800c246:	687b      	ldr	r3, [r7, #4]
 800c248:	3304      	adds	r3, #4
 800c24a:	2101      	movs	r1, #1
 800c24c:	4618      	mov	r0, r3
 800c24e:	f000 f899 	bl	800c384 <RCCEx_PLLSAI1_Config>
 800c252:	4603      	mov	r3, r0
 800c254:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800c256:	7cfb      	ldrb	r3, [r7, #19]
 800c258:	2b00      	cmp	r3, #0
 800c25a:	d001      	beq.n	800c260 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 800c25c:	7cfb      	ldrb	r3, [r7, #19]
 800c25e:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800c260:	687b      	ldr	r3, [r7, #4]
 800c262:	681b      	ldr	r3, [r3, #0]
 800c264:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800c268:	2b00      	cmp	r3, #0
 800c26a:	d02b      	beq.n	800c2c4 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800c26c:	4b0b      	ldr	r3, [pc, #44]	@ (800c29c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800c26e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800c272:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800c276:	687b      	ldr	r3, [r7, #4]
 800c278:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800c27a:	4908      	ldr	r1, [pc, #32]	@ (800c29c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800c27c:	4313      	orrs	r3, r2
 800c27e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800c282:	687b      	ldr	r3, [r7, #4]
 800c284:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800c286:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800c28a:	d109      	bne.n	800c2a0 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800c28c:	4b03      	ldr	r3, [pc, #12]	@ (800c29c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800c28e:	68db      	ldr	r3, [r3, #12]
 800c290:	4a02      	ldr	r2, [pc, #8]	@ (800c29c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800c292:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800c296:	60d3      	str	r3, [r2, #12]
 800c298:	e014      	b.n	800c2c4 <HAL_RCCEx_PeriphCLKConfig+0x514>
 800c29a:	bf00      	nop
 800c29c:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 800c2a0:	687b      	ldr	r3, [r7, #4]
 800c2a2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800c2a4:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800c2a8:	d10c      	bne.n	800c2c4 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800c2aa:	687b      	ldr	r3, [r7, #4]
 800c2ac:	3304      	adds	r3, #4
 800c2ae:	2101      	movs	r1, #1
 800c2b0:	4618      	mov	r0, r3
 800c2b2:	f000 f867 	bl	800c384 <RCCEx_PLLSAI1_Config>
 800c2b6:	4603      	mov	r3, r0
 800c2b8:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800c2ba:	7cfb      	ldrb	r3, [r7, #19]
 800c2bc:	2b00      	cmp	r3, #0
 800c2be:	d001      	beq.n	800c2c4 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 800c2c0:	7cfb      	ldrb	r3, [r7, #19]
 800c2c2:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800c2c4:	687b      	ldr	r3, [r7, #4]
 800c2c6:	681b      	ldr	r3, [r3, #0]
 800c2c8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800c2cc:	2b00      	cmp	r3, #0
 800c2ce:	d02f      	beq.n	800c330 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800c2d0:	4b2b      	ldr	r3, [pc, #172]	@ (800c380 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800c2d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800c2d6:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 800c2da:	687b      	ldr	r3, [r7, #4]
 800c2dc:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800c2de:	4928      	ldr	r1, [pc, #160]	@ (800c380 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800c2e0:	4313      	orrs	r3, r2
 800c2e2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800c2e6:	687b      	ldr	r3, [r7, #4]
 800c2e8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800c2ea:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800c2ee:	d10d      	bne.n	800c30c <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 800c2f0:	687b      	ldr	r3, [r7, #4]
 800c2f2:	3304      	adds	r3, #4
 800c2f4:	2102      	movs	r1, #2
 800c2f6:	4618      	mov	r0, r3
 800c2f8:	f000 f844 	bl	800c384 <RCCEx_PLLSAI1_Config>
 800c2fc:	4603      	mov	r3, r0
 800c2fe:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800c300:	7cfb      	ldrb	r3, [r7, #19]
 800c302:	2b00      	cmp	r3, #0
 800c304:	d014      	beq.n	800c330 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 800c306:	7cfb      	ldrb	r3, [r7, #19]
 800c308:	74bb      	strb	r3, [r7, #18]
 800c30a:	e011      	b.n	800c330 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 800c30c:	687b      	ldr	r3, [r7, #4]
 800c30e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800c310:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800c314:	d10c      	bne.n	800c330 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 800c316:	687b      	ldr	r3, [r7, #4]
 800c318:	3320      	adds	r3, #32
 800c31a:	2102      	movs	r1, #2
 800c31c:	4618      	mov	r0, r3
 800c31e:	f000 f925 	bl	800c56c <RCCEx_PLLSAI2_Config>
 800c322:	4603      	mov	r3, r0
 800c324:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800c326:	7cfb      	ldrb	r3, [r7, #19]
 800c328:	2b00      	cmp	r3, #0
 800c32a:	d001      	beq.n	800c330 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 800c32c:	7cfb      	ldrb	r3, [r7, #19]
 800c32e:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800c330:	687b      	ldr	r3, [r7, #4]
 800c332:	681b      	ldr	r3, [r3, #0]
 800c334:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800c338:	2b00      	cmp	r3, #0
 800c33a:	d00a      	beq.n	800c352 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800c33c:	4b10      	ldr	r3, [pc, #64]	@ (800c380 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800c33e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800c342:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 800c346:	687b      	ldr	r3, [r7, #4]
 800c348:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800c34a:	490d      	ldr	r1, [pc, #52]	@ (800c380 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800c34c:	4313      	orrs	r3, r2
 800c34e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800c352:	687b      	ldr	r3, [r7, #4]
 800c354:	681b      	ldr	r3, [r3, #0]
 800c356:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800c35a:	2b00      	cmp	r3, #0
 800c35c:	d00b      	beq.n	800c376 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800c35e:	4b08      	ldr	r3, [pc, #32]	@ (800c380 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800c360:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800c364:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800c368:	687b      	ldr	r3, [r7, #4]
 800c36a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c36e:	4904      	ldr	r1, [pc, #16]	@ (800c380 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800c370:	4313      	orrs	r3, r2
 800c372:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 800c376:	7cbb      	ldrb	r3, [r7, #18]
}
 800c378:	4618      	mov	r0, r3
 800c37a:	3718      	adds	r7, #24
 800c37c:	46bd      	mov	sp, r7
 800c37e:	bd80      	pop	{r7, pc}
 800c380:	40021000 	.word	0x40021000

0800c384 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 800c384:	b580      	push	{r7, lr}
 800c386:	b084      	sub	sp, #16
 800c388:	af00      	add	r7, sp, #0
 800c38a:	6078      	str	r0, [r7, #4]
 800c38c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800c38e:	2300      	movs	r3, #0
 800c390:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800c392:	4b75      	ldr	r3, [pc, #468]	@ (800c568 <RCCEx_PLLSAI1_Config+0x1e4>)
 800c394:	68db      	ldr	r3, [r3, #12]
 800c396:	f003 0303 	and.w	r3, r3, #3
 800c39a:	2b00      	cmp	r3, #0
 800c39c:	d018      	beq.n	800c3d0 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800c39e:	4b72      	ldr	r3, [pc, #456]	@ (800c568 <RCCEx_PLLSAI1_Config+0x1e4>)
 800c3a0:	68db      	ldr	r3, [r3, #12]
 800c3a2:	f003 0203 	and.w	r2, r3, #3
 800c3a6:	687b      	ldr	r3, [r7, #4]
 800c3a8:	681b      	ldr	r3, [r3, #0]
 800c3aa:	429a      	cmp	r2, r3
 800c3ac:	d10d      	bne.n	800c3ca <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800c3ae:	687b      	ldr	r3, [r7, #4]
 800c3b0:	681b      	ldr	r3, [r3, #0]
       ||
 800c3b2:	2b00      	cmp	r3, #0
 800c3b4:	d009      	beq.n	800c3ca <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 800c3b6:	4b6c      	ldr	r3, [pc, #432]	@ (800c568 <RCCEx_PLLSAI1_Config+0x1e4>)
 800c3b8:	68db      	ldr	r3, [r3, #12]
 800c3ba:	091b      	lsrs	r3, r3, #4
 800c3bc:	f003 0307 	and.w	r3, r3, #7
 800c3c0:	1c5a      	adds	r2, r3, #1
 800c3c2:	687b      	ldr	r3, [r7, #4]
 800c3c4:	685b      	ldr	r3, [r3, #4]
       ||
 800c3c6:	429a      	cmp	r2, r3
 800c3c8:	d047      	beq.n	800c45a <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800c3ca:	2301      	movs	r3, #1
 800c3cc:	73fb      	strb	r3, [r7, #15]
 800c3ce:	e044      	b.n	800c45a <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 800c3d0:	687b      	ldr	r3, [r7, #4]
 800c3d2:	681b      	ldr	r3, [r3, #0]
 800c3d4:	2b03      	cmp	r3, #3
 800c3d6:	d018      	beq.n	800c40a <RCCEx_PLLSAI1_Config+0x86>
 800c3d8:	2b03      	cmp	r3, #3
 800c3da:	d825      	bhi.n	800c428 <RCCEx_PLLSAI1_Config+0xa4>
 800c3dc:	2b01      	cmp	r3, #1
 800c3de:	d002      	beq.n	800c3e6 <RCCEx_PLLSAI1_Config+0x62>
 800c3e0:	2b02      	cmp	r3, #2
 800c3e2:	d009      	beq.n	800c3f8 <RCCEx_PLLSAI1_Config+0x74>
 800c3e4:	e020      	b.n	800c428 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800c3e6:	4b60      	ldr	r3, [pc, #384]	@ (800c568 <RCCEx_PLLSAI1_Config+0x1e4>)
 800c3e8:	681b      	ldr	r3, [r3, #0]
 800c3ea:	f003 0302 	and.w	r3, r3, #2
 800c3ee:	2b00      	cmp	r3, #0
 800c3f0:	d11d      	bne.n	800c42e <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 800c3f2:	2301      	movs	r3, #1
 800c3f4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800c3f6:	e01a      	b.n	800c42e <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800c3f8:	4b5b      	ldr	r3, [pc, #364]	@ (800c568 <RCCEx_PLLSAI1_Config+0x1e4>)
 800c3fa:	681b      	ldr	r3, [r3, #0]
 800c3fc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800c400:	2b00      	cmp	r3, #0
 800c402:	d116      	bne.n	800c432 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 800c404:	2301      	movs	r3, #1
 800c406:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800c408:	e013      	b.n	800c432 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800c40a:	4b57      	ldr	r3, [pc, #348]	@ (800c568 <RCCEx_PLLSAI1_Config+0x1e4>)
 800c40c:	681b      	ldr	r3, [r3, #0]
 800c40e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800c412:	2b00      	cmp	r3, #0
 800c414:	d10f      	bne.n	800c436 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800c416:	4b54      	ldr	r3, [pc, #336]	@ (800c568 <RCCEx_PLLSAI1_Config+0x1e4>)
 800c418:	681b      	ldr	r3, [r3, #0]
 800c41a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800c41e:	2b00      	cmp	r3, #0
 800c420:	d109      	bne.n	800c436 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 800c422:	2301      	movs	r3, #1
 800c424:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800c426:	e006      	b.n	800c436 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 800c428:	2301      	movs	r3, #1
 800c42a:	73fb      	strb	r3, [r7, #15]
      break;
 800c42c:	e004      	b.n	800c438 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800c42e:	bf00      	nop
 800c430:	e002      	b.n	800c438 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800c432:	bf00      	nop
 800c434:	e000      	b.n	800c438 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800c436:	bf00      	nop
    }

    if(status == HAL_OK)
 800c438:	7bfb      	ldrb	r3, [r7, #15]
 800c43a:	2b00      	cmp	r3, #0
 800c43c:	d10d      	bne.n	800c45a <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800c43e:	4b4a      	ldr	r3, [pc, #296]	@ (800c568 <RCCEx_PLLSAI1_Config+0x1e4>)
 800c440:	68db      	ldr	r3, [r3, #12]
 800c442:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 800c446:	687b      	ldr	r3, [r7, #4]
 800c448:	6819      	ldr	r1, [r3, #0]
 800c44a:	687b      	ldr	r3, [r7, #4]
 800c44c:	685b      	ldr	r3, [r3, #4]
 800c44e:	3b01      	subs	r3, #1
 800c450:	011b      	lsls	r3, r3, #4
 800c452:	430b      	orrs	r3, r1
 800c454:	4944      	ldr	r1, [pc, #272]	@ (800c568 <RCCEx_PLLSAI1_Config+0x1e4>)
 800c456:	4313      	orrs	r3, r2
 800c458:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800c45a:	7bfb      	ldrb	r3, [r7, #15]
 800c45c:	2b00      	cmp	r3, #0
 800c45e:	d17d      	bne.n	800c55c <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 800c460:	4b41      	ldr	r3, [pc, #260]	@ (800c568 <RCCEx_PLLSAI1_Config+0x1e4>)
 800c462:	681b      	ldr	r3, [r3, #0]
 800c464:	4a40      	ldr	r2, [pc, #256]	@ (800c568 <RCCEx_PLLSAI1_Config+0x1e4>)
 800c466:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800c46a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800c46c:	f7fb fa2c 	bl	80078c8 <HAL_GetTick>
 800c470:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800c472:	e009      	b.n	800c488 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800c474:	f7fb fa28 	bl	80078c8 <HAL_GetTick>
 800c478:	4602      	mov	r2, r0
 800c47a:	68bb      	ldr	r3, [r7, #8]
 800c47c:	1ad3      	subs	r3, r2, r3
 800c47e:	2b02      	cmp	r3, #2
 800c480:	d902      	bls.n	800c488 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800c482:	2303      	movs	r3, #3
 800c484:	73fb      	strb	r3, [r7, #15]
        break;
 800c486:	e005      	b.n	800c494 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800c488:	4b37      	ldr	r3, [pc, #220]	@ (800c568 <RCCEx_PLLSAI1_Config+0x1e4>)
 800c48a:	681b      	ldr	r3, [r3, #0]
 800c48c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800c490:	2b00      	cmp	r3, #0
 800c492:	d1ef      	bne.n	800c474 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 800c494:	7bfb      	ldrb	r3, [r7, #15]
 800c496:	2b00      	cmp	r3, #0
 800c498:	d160      	bne.n	800c55c <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800c49a:	683b      	ldr	r3, [r7, #0]
 800c49c:	2b00      	cmp	r3, #0
 800c49e:	d111      	bne.n	800c4c4 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800c4a0:	4b31      	ldr	r3, [pc, #196]	@ (800c568 <RCCEx_PLLSAI1_Config+0x1e4>)
 800c4a2:	691b      	ldr	r3, [r3, #16]
 800c4a4:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 800c4a8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800c4ac:	687a      	ldr	r2, [r7, #4]
 800c4ae:	6892      	ldr	r2, [r2, #8]
 800c4b0:	0211      	lsls	r1, r2, #8
 800c4b2:	687a      	ldr	r2, [r7, #4]
 800c4b4:	68d2      	ldr	r2, [r2, #12]
 800c4b6:	0912      	lsrs	r2, r2, #4
 800c4b8:	0452      	lsls	r2, r2, #17
 800c4ba:	430a      	orrs	r2, r1
 800c4bc:	492a      	ldr	r1, [pc, #168]	@ (800c568 <RCCEx_PLLSAI1_Config+0x1e4>)
 800c4be:	4313      	orrs	r3, r2
 800c4c0:	610b      	str	r3, [r1, #16]
 800c4c2:	e027      	b.n	800c514 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 800c4c4:	683b      	ldr	r3, [r7, #0]
 800c4c6:	2b01      	cmp	r3, #1
 800c4c8:	d112      	bne.n	800c4f0 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800c4ca:	4b27      	ldr	r3, [pc, #156]	@ (800c568 <RCCEx_PLLSAI1_Config+0x1e4>)
 800c4cc:	691b      	ldr	r3, [r3, #16]
 800c4ce:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 800c4d2:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 800c4d6:	687a      	ldr	r2, [r7, #4]
 800c4d8:	6892      	ldr	r2, [r2, #8]
 800c4da:	0211      	lsls	r1, r2, #8
 800c4dc:	687a      	ldr	r2, [r7, #4]
 800c4de:	6912      	ldr	r2, [r2, #16]
 800c4e0:	0852      	lsrs	r2, r2, #1
 800c4e2:	3a01      	subs	r2, #1
 800c4e4:	0552      	lsls	r2, r2, #21
 800c4e6:	430a      	orrs	r2, r1
 800c4e8:	491f      	ldr	r1, [pc, #124]	@ (800c568 <RCCEx_PLLSAI1_Config+0x1e4>)
 800c4ea:	4313      	orrs	r3, r2
 800c4ec:	610b      	str	r3, [r1, #16]
 800c4ee:	e011      	b.n	800c514 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800c4f0:	4b1d      	ldr	r3, [pc, #116]	@ (800c568 <RCCEx_PLLSAI1_Config+0x1e4>)
 800c4f2:	691b      	ldr	r3, [r3, #16]
 800c4f4:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 800c4f8:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 800c4fc:	687a      	ldr	r2, [r7, #4]
 800c4fe:	6892      	ldr	r2, [r2, #8]
 800c500:	0211      	lsls	r1, r2, #8
 800c502:	687a      	ldr	r2, [r7, #4]
 800c504:	6952      	ldr	r2, [r2, #20]
 800c506:	0852      	lsrs	r2, r2, #1
 800c508:	3a01      	subs	r2, #1
 800c50a:	0652      	lsls	r2, r2, #25
 800c50c:	430a      	orrs	r2, r1
 800c50e:	4916      	ldr	r1, [pc, #88]	@ (800c568 <RCCEx_PLLSAI1_Config+0x1e4>)
 800c510:	4313      	orrs	r3, r2
 800c512:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 800c514:	4b14      	ldr	r3, [pc, #80]	@ (800c568 <RCCEx_PLLSAI1_Config+0x1e4>)
 800c516:	681b      	ldr	r3, [r3, #0]
 800c518:	4a13      	ldr	r2, [pc, #76]	@ (800c568 <RCCEx_PLLSAI1_Config+0x1e4>)
 800c51a:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800c51e:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800c520:	f7fb f9d2 	bl	80078c8 <HAL_GetTick>
 800c524:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800c526:	e009      	b.n	800c53c <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800c528:	f7fb f9ce 	bl	80078c8 <HAL_GetTick>
 800c52c:	4602      	mov	r2, r0
 800c52e:	68bb      	ldr	r3, [r7, #8]
 800c530:	1ad3      	subs	r3, r2, r3
 800c532:	2b02      	cmp	r3, #2
 800c534:	d902      	bls.n	800c53c <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 800c536:	2303      	movs	r3, #3
 800c538:	73fb      	strb	r3, [r7, #15]
          break;
 800c53a:	e005      	b.n	800c548 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800c53c:	4b0a      	ldr	r3, [pc, #40]	@ (800c568 <RCCEx_PLLSAI1_Config+0x1e4>)
 800c53e:	681b      	ldr	r3, [r3, #0]
 800c540:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800c544:	2b00      	cmp	r3, #0
 800c546:	d0ef      	beq.n	800c528 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 800c548:	7bfb      	ldrb	r3, [r7, #15]
 800c54a:	2b00      	cmp	r3, #0
 800c54c:	d106      	bne.n	800c55c <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 800c54e:	4b06      	ldr	r3, [pc, #24]	@ (800c568 <RCCEx_PLLSAI1_Config+0x1e4>)
 800c550:	691a      	ldr	r2, [r3, #16]
 800c552:	687b      	ldr	r3, [r7, #4]
 800c554:	699b      	ldr	r3, [r3, #24]
 800c556:	4904      	ldr	r1, [pc, #16]	@ (800c568 <RCCEx_PLLSAI1_Config+0x1e4>)
 800c558:	4313      	orrs	r3, r2
 800c55a:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 800c55c:	7bfb      	ldrb	r3, [r7, #15]
}
 800c55e:	4618      	mov	r0, r3
 800c560:	3710      	adds	r7, #16
 800c562:	46bd      	mov	sp, r7
 800c564:	bd80      	pop	{r7, pc}
 800c566:	bf00      	nop
 800c568:	40021000 	.word	0x40021000

0800c56c <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 800c56c:	b580      	push	{r7, lr}
 800c56e:	b084      	sub	sp, #16
 800c570:	af00      	add	r7, sp, #0
 800c572:	6078      	str	r0, [r7, #4]
 800c574:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800c576:	2300      	movs	r3, #0
 800c578:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800c57a:	4b6a      	ldr	r3, [pc, #424]	@ (800c724 <RCCEx_PLLSAI2_Config+0x1b8>)
 800c57c:	68db      	ldr	r3, [r3, #12]
 800c57e:	f003 0303 	and.w	r3, r3, #3
 800c582:	2b00      	cmp	r3, #0
 800c584:	d018      	beq.n	800c5b8 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 800c586:	4b67      	ldr	r3, [pc, #412]	@ (800c724 <RCCEx_PLLSAI2_Config+0x1b8>)
 800c588:	68db      	ldr	r3, [r3, #12]
 800c58a:	f003 0203 	and.w	r2, r3, #3
 800c58e:	687b      	ldr	r3, [r7, #4]
 800c590:	681b      	ldr	r3, [r3, #0]
 800c592:	429a      	cmp	r2, r3
 800c594:	d10d      	bne.n	800c5b2 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 800c596:	687b      	ldr	r3, [r7, #4]
 800c598:	681b      	ldr	r3, [r3, #0]
       ||
 800c59a:	2b00      	cmp	r3, #0
 800c59c:	d009      	beq.n	800c5b2 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 800c59e:	4b61      	ldr	r3, [pc, #388]	@ (800c724 <RCCEx_PLLSAI2_Config+0x1b8>)
 800c5a0:	68db      	ldr	r3, [r3, #12]
 800c5a2:	091b      	lsrs	r3, r3, #4
 800c5a4:	f003 0307 	and.w	r3, r3, #7
 800c5a8:	1c5a      	adds	r2, r3, #1
 800c5aa:	687b      	ldr	r3, [r7, #4]
 800c5ac:	685b      	ldr	r3, [r3, #4]
       ||
 800c5ae:	429a      	cmp	r2, r3
 800c5b0:	d047      	beq.n	800c642 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800c5b2:	2301      	movs	r3, #1
 800c5b4:	73fb      	strb	r3, [r7, #15]
 800c5b6:	e044      	b.n	800c642 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 800c5b8:	687b      	ldr	r3, [r7, #4]
 800c5ba:	681b      	ldr	r3, [r3, #0]
 800c5bc:	2b03      	cmp	r3, #3
 800c5be:	d018      	beq.n	800c5f2 <RCCEx_PLLSAI2_Config+0x86>
 800c5c0:	2b03      	cmp	r3, #3
 800c5c2:	d825      	bhi.n	800c610 <RCCEx_PLLSAI2_Config+0xa4>
 800c5c4:	2b01      	cmp	r3, #1
 800c5c6:	d002      	beq.n	800c5ce <RCCEx_PLLSAI2_Config+0x62>
 800c5c8:	2b02      	cmp	r3, #2
 800c5ca:	d009      	beq.n	800c5e0 <RCCEx_PLLSAI2_Config+0x74>
 800c5cc:	e020      	b.n	800c610 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800c5ce:	4b55      	ldr	r3, [pc, #340]	@ (800c724 <RCCEx_PLLSAI2_Config+0x1b8>)
 800c5d0:	681b      	ldr	r3, [r3, #0]
 800c5d2:	f003 0302 	and.w	r3, r3, #2
 800c5d6:	2b00      	cmp	r3, #0
 800c5d8:	d11d      	bne.n	800c616 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 800c5da:	2301      	movs	r3, #1
 800c5dc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800c5de:	e01a      	b.n	800c616 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800c5e0:	4b50      	ldr	r3, [pc, #320]	@ (800c724 <RCCEx_PLLSAI2_Config+0x1b8>)
 800c5e2:	681b      	ldr	r3, [r3, #0]
 800c5e4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800c5e8:	2b00      	cmp	r3, #0
 800c5ea:	d116      	bne.n	800c61a <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 800c5ec:	2301      	movs	r3, #1
 800c5ee:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800c5f0:	e013      	b.n	800c61a <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800c5f2:	4b4c      	ldr	r3, [pc, #304]	@ (800c724 <RCCEx_PLLSAI2_Config+0x1b8>)
 800c5f4:	681b      	ldr	r3, [r3, #0]
 800c5f6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800c5fa:	2b00      	cmp	r3, #0
 800c5fc:	d10f      	bne.n	800c61e <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800c5fe:	4b49      	ldr	r3, [pc, #292]	@ (800c724 <RCCEx_PLLSAI2_Config+0x1b8>)
 800c600:	681b      	ldr	r3, [r3, #0]
 800c602:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800c606:	2b00      	cmp	r3, #0
 800c608:	d109      	bne.n	800c61e <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 800c60a:	2301      	movs	r3, #1
 800c60c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800c60e:	e006      	b.n	800c61e <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 800c610:	2301      	movs	r3, #1
 800c612:	73fb      	strb	r3, [r7, #15]
      break;
 800c614:	e004      	b.n	800c620 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800c616:	bf00      	nop
 800c618:	e002      	b.n	800c620 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800c61a:	bf00      	nop
 800c61c:	e000      	b.n	800c620 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800c61e:	bf00      	nop
    }

    if(status == HAL_OK)
 800c620:	7bfb      	ldrb	r3, [r7, #15]
 800c622:	2b00      	cmp	r3, #0
 800c624:	d10d      	bne.n	800c642 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800c626:	4b3f      	ldr	r3, [pc, #252]	@ (800c724 <RCCEx_PLLSAI2_Config+0x1b8>)
 800c628:	68db      	ldr	r3, [r3, #12]
 800c62a:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 800c62e:	687b      	ldr	r3, [r7, #4]
 800c630:	6819      	ldr	r1, [r3, #0]
 800c632:	687b      	ldr	r3, [r7, #4]
 800c634:	685b      	ldr	r3, [r3, #4]
 800c636:	3b01      	subs	r3, #1
 800c638:	011b      	lsls	r3, r3, #4
 800c63a:	430b      	orrs	r3, r1
 800c63c:	4939      	ldr	r1, [pc, #228]	@ (800c724 <RCCEx_PLLSAI2_Config+0x1b8>)
 800c63e:	4313      	orrs	r3, r2
 800c640:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800c642:	7bfb      	ldrb	r3, [r7, #15]
 800c644:	2b00      	cmp	r3, #0
 800c646:	d167      	bne.n	800c718 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 800c648:	4b36      	ldr	r3, [pc, #216]	@ (800c724 <RCCEx_PLLSAI2_Config+0x1b8>)
 800c64a:	681b      	ldr	r3, [r3, #0]
 800c64c:	4a35      	ldr	r2, [pc, #212]	@ (800c724 <RCCEx_PLLSAI2_Config+0x1b8>)
 800c64e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800c652:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800c654:	f7fb f938 	bl	80078c8 <HAL_GetTick>
 800c658:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800c65a:	e009      	b.n	800c670 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800c65c:	f7fb f934 	bl	80078c8 <HAL_GetTick>
 800c660:	4602      	mov	r2, r0
 800c662:	68bb      	ldr	r3, [r7, #8]
 800c664:	1ad3      	subs	r3, r2, r3
 800c666:	2b02      	cmp	r3, #2
 800c668:	d902      	bls.n	800c670 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800c66a:	2303      	movs	r3, #3
 800c66c:	73fb      	strb	r3, [r7, #15]
        break;
 800c66e:	e005      	b.n	800c67c <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800c670:	4b2c      	ldr	r3, [pc, #176]	@ (800c724 <RCCEx_PLLSAI2_Config+0x1b8>)
 800c672:	681b      	ldr	r3, [r3, #0]
 800c674:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800c678:	2b00      	cmp	r3, #0
 800c67a:	d1ef      	bne.n	800c65c <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 800c67c:	7bfb      	ldrb	r3, [r7, #15]
 800c67e:	2b00      	cmp	r3, #0
 800c680:	d14a      	bne.n	800c718 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800c682:	683b      	ldr	r3, [r7, #0]
 800c684:	2b00      	cmp	r3, #0
 800c686:	d111      	bne.n	800c6ac <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800c688:	4b26      	ldr	r3, [pc, #152]	@ (800c724 <RCCEx_PLLSAI2_Config+0x1b8>)
 800c68a:	695b      	ldr	r3, [r3, #20]
 800c68c:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 800c690:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800c694:	687a      	ldr	r2, [r7, #4]
 800c696:	6892      	ldr	r2, [r2, #8]
 800c698:	0211      	lsls	r1, r2, #8
 800c69a:	687a      	ldr	r2, [r7, #4]
 800c69c:	68d2      	ldr	r2, [r2, #12]
 800c69e:	0912      	lsrs	r2, r2, #4
 800c6a0:	0452      	lsls	r2, r2, #17
 800c6a2:	430a      	orrs	r2, r1
 800c6a4:	491f      	ldr	r1, [pc, #124]	@ (800c724 <RCCEx_PLLSAI2_Config+0x1b8>)
 800c6a6:	4313      	orrs	r3, r2
 800c6a8:	614b      	str	r3, [r1, #20]
 800c6aa:	e011      	b.n	800c6d0 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800c6ac:	4b1d      	ldr	r3, [pc, #116]	@ (800c724 <RCCEx_PLLSAI2_Config+0x1b8>)
 800c6ae:	695b      	ldr	r3, [r3, #20]
 800c6b0:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 800c6b4:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 800c6b8:	687a      	ldr	r2, [r7, #4]
 800c6ba:	6892      	ldr	r2, [r2, #8]
 800c6bc:	0211      	lsls	r1, r2, #8
 800c6be:	687a      	ldr	r2, [r7, #4]
 800c6c0:	6912      	ldr	r2, [r2, #16]
 800c6c2:	0852      	lsrs	r2, r2, #1
 800c6c4:	3a01      	subs	r2, #1
 800c6c6:	0652      	lsls	r2, r2, #25
 800c6c8:	430a      	orrs	r2, r1
 800c6ca:	4916      	ldr	r1, [pc, #88]	@ (800c724 <RCCEx_PLLSAI2_Config+0x1b8>)
 800c6cc:	4313      	orrs	r3, r2
 800c6ce:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 800c6d0:	4b14      	ldr	r3, [pc, #80]	@ (800c724 <RCCEx_PLLSAI2_Config+0x1b8>)
 800c6d2:	681b      	ldr	r3, [r3, #0]
 800c6d4:	4a13      	ldr	r2, [pc, #76]	@ (800c724 <RCCEx_PLLSAI2_Config+0x1b8>)
 800c6d6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800c6da:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800c6dc:	f7fb f8f4 	bl	80078c8 <HAL_GetTick>
 800c6e0:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800c6e2:	e009      	b.n	800c6f8 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800c6e4:	f7fb f8f0 	bl	80078c8 <HAL_GetTick>
 800c6e8:	4602      	mov	r2, r0
 800c6ea:	68bb      	ldr	r3, [r7, #8]
 800c6ec:	1ad3      	subs	r3, r2, r3
 800c6ee:	2b02      	cmp	r3, #2
 800c6f0:	d902      	bls.n	800c6f8 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 800c6f2:	2303      	movs	r3, #3
 800c6f4:	73fb      	strb	r3, [r7, #15]
          break;
 800c6f6:	e005      	b.n	800c704 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800c6f8:	4b0a      	ldr	r3, [pc, #40]	@ (800c724 <RCCEx_PLLSAI2_Config+0x1b8>)
 800c6fa:	681b      	ldr	r3, [r3, #0]
 800c6fc:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800c700:	2b00      	cmp	r3, #0
 800c702:	d0ef      	beq.n	800c6e4 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 800c704:	7bfb      	ldrb	r3, [r7, #15]
 800c706:	2b00      	cmp	r3, #0
 800c708:	d106      	bne.n	800c718 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 800c70a:	4b06      	ldr	r3, [pc, #24]	@ (800c724 <RCCEx_PLLSAI2_Config+0x1b8>)
 800c70c:	695a      	ldr	r2, [r3, #20]
 800c70e:	687b      	ldr	r3, [r7, #4]
 800c710:	695b      	ldr	r3, [r3, #20]
 800c712:	4904      	ldr	r1, [pc, #16]	@ (800c724 <RCCEx_PLLSAI2_Config+0x1b8>)
 800c714:	4313      	orrs	r3, r2
 800c716:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 800c718:	7bfb      	ldrb	r3, [r7, #15]
}
 800c71a:	4618      	mov	r0, r3
 800c71c:	3710      	adds	r7, #16
 800c71e:	46bd      	mov	sp, r7
 800c720:	bd80      	pop	{r7, pc}
 800c722:	bf00      	nop
 800c724:	40021000 	.word	0x40021000

0800c728 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 800c728:	b580      	push	{r7, lr}
 800c72a:	b084      	sub	sp, #16
 800c72c:	af00      	add	r7, sp, #0
 800c72e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 800c730:	2301      	movs	r3, #1
 800c732:	73fb      	strb	r3, [r7, #15]

  /* Check the RTC peripheral state */
  if (hrtc != NULL)
 800c734:	687b      	ldr	r3, [r7, #4]
 800c736:	2b00      	cmp	r3, #0
 800c738:	d079      	beq.n	800c82e <HAL_RTC_Init+0x106>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else /* #if (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */
    if (hrtc->State == HAL_RTC_STATE_RESET)
 800c73a:	687b      	ldr	r3, [r7, #4]
 800c73c:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 800c740:	b2db      	uxtb	r3, r3
 800c742:	2b00      	cmp	r3, #0
 800c744:	d106      	bne.n	800c754 <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 800c746:	687b      	ldr	r3, [r7, #4]
 800c748:	2200      	movs	r2, #0
 800c74a:	f883 2020 	strb.w	r2, [r3, #32]

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 800c74e:	6878      	ldr	r0, [r7, #4]
 800c750:	f7f7 fcc8 	bl	80040e4 <HAL_RTC_MspInit>
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
    /* Process TAMP ip offset from RTC one */
    hrtc->TampOffset = (TAMP_BASE - RTC_BASE);
#endif
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 800c754:	687b      	ldr	r3, [r7, #4]
 800c756:	2202      	movs	r2, #2
 800c758:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Check whether the calendar needs to be initialized */
    if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 800c75c:	687b      	ldr	r3, [r7, #4]
 800c75e:	681b      	ldr	r3, [r3, #0]
 800c760:	68db      	ldr	r3, [r3, #12]
 800c762:	f003 0310 	and.w	r3, r3, #16
 800c766:	2b10      	cmp	r3, #16
 800c768:	d058      	beq.n	800c81c <HAL_RTC_Init+0xf4>
    {
      /* Disable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800c76a:	687b      	ldr	r3, [r7, #4]
 800c76c:	681b      	ldr	r3, [r3, #0]
 800c76e:	22ca      	movs	r2, #202	@ 0xca
 800c770:	625a      	str	r2, [r3, #36]	@ 0x24
 800c772:	687b      	ldr	r3, [r7, #4]
 800c774:	681b      	ldr	r3, [r3, #0]
 800c776:	2253      	movs	r2, #83	@ 0x53
 800c778:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Enter Initialization mode */
      status = RTC_EnterInitMode(hrtc);
 800c77a:	6878      	ldr	r0, [r7, #4]
 800c77c:	f000 fb82 	bl	800ce84 <RTC_EnterInitMode>
 800c780:	4603      	mov	r3, r0
 800c782:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 800c784:	7bfb      	ldrb	r3, [r7, #15]
 800c786:	2b00      	cmp	r3, #0
 800c788:	d127      	bne.n	800c7da <HAL_RTC_Init+0xb2>
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
        /* Clear RTC_CR FMT, OSEL, POL and TAMPOE Bits */
        hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
#else
        /* Clear RTC_CR FMT, OSEL and POL Bits */
        hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL);
 800c78a:	687b      	ldr	r3, [r7, #4]
 800c78c:	681b      	ldr	r3, [r3, #0]
 800c78e:	689b      	ldr	r3, [r3, #8]
 800c790:	687a      	ldr	r2, [r7, #4]
 800c792:	6812      	ldr	r2, [r2, #0]
 800c794:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 800c798:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800c79c:	6093      	str	r3, [r2, #8]
#endif
        /* Set RTC_CR register */
        hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 800c79e:	687b      	ldr	r3, [r7, #4]
 800c7a0:	681b      	ldr	r3, [r3, #0]
 800c7a2:	6899      	ldr	r1, [r3, #8]
 800c7a4:	687b      	ldr	r3, [r7, #4]
 800c7a6:	685a      	ldr	r2, [r3, #4]
 800c7a8:	687b      	ldr	r3, [r7, #4]
 800c7aa:	691b      	ldr	r3, [r3, #16]
 800c7ac:	431a      	orrs	r2, r3
 800c7ae:	687b      	ldr	r3, [r7, #4]
 800c7b0:	699b      	ldr	r3, [r3, #24]
 800c7b2:	431a      	orrs	r2, r3
 800c7b4:	687b      	ldr	r3, [r7, #4]
 800c7b6:	681b      	ldr	r3, [r3, #0]
 800c7b8:	430a      	orrs	r2, r1
 800c7ba:	609a      	str	r2, [r3, #8]

        /* Configure the RTC PRER */
        hrtc->Instance->PRER = (hrtc->Init.SynchPrediv);
 800c7bc:	687b      	ldr	r3, [r7, #4]
 800c7be:	681b      	ldr	r3, [r3, #0]
 800c7c0:	687a      	ldr	r2, [r7, #4]
 800c7c2:	68d2      	ldr	r2, [r2, #12]
 800c7c4:	611a      	str	r2, [r3, #16]
        hrtc->Instance->PRER |= (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 800c7c6:	687b      	ldr	r3, [r7, #4]
 800c7c8:	681b      	ldr	r3, [r3, #0]
 800c7ca:	6919      	ldr	r1, [r3, #16]
 800c7cc:	687b      	ldr	r3, [r7, #4]
 800c7ce:	689b      	ldr	r3, [r3, #8]
 800c7d0:	041a      	lsls	r2, r3, #16
 800c7d2:	687b      	ldr	r3, [r7, #4]
 800c7d4:	681b      	ldr	r3, [r3, #0]
 800c7d6:	430a      	orrs	r2, r1
 800c7d8:	611a      	str	r2, [r3, #16]
        MODIFY_REG(RTC->ICSR, RTC_ICSR_BIN | RTC_ICSR_BCDU, hrtc->Init.BinMode | hrtc->Init.BinMixBcdU);
#endif
      }

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 800c7da:	6878      	ldr	r0, [r7, #4]
 800c7dc:	f000 fb86 	bl	800ceec <RTC_ExitInitMode>
 800c7e0:	4603      	mov	r3, r0
 800c7e2:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 800c7e4:	7bfb      	ldrb	r3, [r7, #15]
 800c7e6:	2b00      	cmp	r3, #0
 800c7e8:	d113      	bne.n	800c812 <HAL_RTC_Init+0xea>
      {
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU | RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
#else
        hrtc->Instance->OR &= ~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 800c7ea:	687b      	ldr	r3, [r7, #4]
 800c7ec:	681b      	ldr	r3, [r3, #0]
 800c7ee:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800c7f0:	687b      	ldr	r3, [r7, #4]
 800c7f2:	681b      	ldr	r3, [r3, #0]
 800c7f4:	f022 0203 	bic.w	r2, r2, #3
 800c7f8:	64da      	str	r2, [r3, #76]	@ 0x4c
        hrtc->Instance->OR |= (hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 800c7fa:	687b      	ldr	r3, [r7, #4]
 800c7fc:	681b      	ldr	r3, [r3, #0]
 800c7fe:	6cd9      	ldr	r1, [r3, #76]	@ 0x4c
 800c800:	687b      	ldr	r3, [r7, #4]
 800c802:	69da      	ldr	r2, [r3, #28]
 800c804:	687b      	ldr	r3, [r7, #4]
 800c806:	695b      	ldr	r3, [r3, #20]
 800c808:	431a      	orrs	r2, r3
 800c80a:	687b      	ldr	r3, [r7, #4]
 800c80c:	681b      	ldr	r3, [r3, #0]
 800c80e:	430a      	orrs	r2, r1
 800c810:	64da      	str	r2, [r3, #76]	@ 0x4c
#endif
      }

      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800c812:	687b      	ldr	r3, [r7, #4]
 800c814:	681b      	ldr	r3, [r3, #0]
 800c816:	22ff      	movs	r2, #255	@ 0xff
 800c818:	625a      	str	r2, [r3, #36]	@ 0x24
 800c81a:	e001      	b.n	800c820 <HAL_RTC_Init+0xf8>
    }
    else
    {
      /* The calendar is already initialized */
      status = HAL_OK;
 800c81c:	2300      	movs	r3, #0
 800c81e:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 800c820:	7bfb      	ldrb	r3, [r7, #15]
 800c822:	2b00      	cmp	r3, #0
 800c824:	d103      	bne.n	800c82e <HAL_RTC_Init+0x106>
    {
        hrtc->State = HAL_RTC_STATE_READY;
 800c826:	687b      	ldr	r3, [r7, #4]
 800c828:	2201      	movs	r2, #1
 800c82a:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    }
  }

  return status;
 800c82e:	7bfb      	ldrb	r3, [r7, #15]
}
 800c830:	4618      	mov	r0, r3
 800c832:	3710      	adds	r7, #16
 800c834:	46bd      	mov	sp, r7
 800c836:	bd80      	pop	{r7, pc}

0800c838 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800c838:	b590      	push	{r4, r7, lr}
 800c83a:	b087      	sub	sp, #28
 800c83c:	af00      	add	r7, sp, #0
 800c83e:	60f8      	str	r0, [r7, #12]
 800c840:	60b9      	str	r1, [r7, #8]
 800c842:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800c844:	68fb      	ldr	r3, [r7, #12]
 800c846:	f893 3020 	ldrb.w	r3, [r3, #32]
 800c84a:	2b01      	cmp	r3, #1
 800c84c:	d101      	bne.n	800c852 <HAL_RTC_SetTime+0x1a>
 800c84e:	2302      	movs	r3, #2
 800c850:	e08b      	b.n	800c96a <HAL_RTC_SetTime+0x132>
 800c852:	68fb      	ldr	r3, [r7, #12]
 800c854:	2201      	movs	r2, #1
 800c856:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800c85a:	68fb      	ldr	r3, [r7, #12]
 800c85c:	2202      	movs	r2, #2
 800c85e:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800c862:	68fb      	ldr	r3, [r7, #12]
 800c864:	681b      	ldr	r3, [r3, #0]
 800c866:	22ca      	movs	r2, #202	@ 0xca
 800c868:	625a      	str	r2, [r3, #36]	@ 0x24
 800c86a:	68fb      	ldr	r3, [r7, #12]
 800c86c:	681b      	ldr	r3, [r3, #0]
 800c86e:	2253      	movs	r2, #83	@ 0x53
 800c870:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800c872:	68f8      	ldr	r0, [r7, #12]
 800c874:	f000 fb06 	bl	800ce84 <RTC_EnterInitMode>
 800c878:	4603      	mov	r3, r0
 800c87a:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 800c87c:	7cfb      	ldrb	r3, [r7, #19]
 800c87e:	2b00      	cmp	r3, #0
 800c880:	d163      	bne.n	800c94a <HAL_RTC_SetTime+0x112>
  {
    if (Format == RTC_FORMAT_BIN)
 800c882:	687b      	ldr	r3, [r7, #4]
 800c884:	2b00      	cmp	r3, #0
 800c886:	d126      	bne.n	800c8d6 <HAL_RTC_SetTime+0x9e>
    {
      if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800c888:	68fb      	ldr	r3, [r7, #12]
 800c88a:	681b      	ldr	r3, [r3, #0]
 800c88c:	689b      	ldr	r3, [r3, #8]
 800c88e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c892:	2b00      	cmp	r3, #0
 800c894:	d102      	bne.n	800c89c <HAL_RTC_SetTime+0x64>
        assert_param(IS_RTC_HOUR12(sTime->Hours));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 800c896:	68bb      	ldr	r3, [r7, #8]
 800c898:	2200      	movs	r2, #0
 800c89a:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(sTime->Hours));
      }
      assert_param(IS_RTC_MINUTES(sTime->Minutes));
      assert_param(IS_RTC_SECONDS(sTime->Seconds));

      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 800c89c:	68bb      	ldr	r3, [r7, #8]
 800c89e:	781b      	ldrb	r3, [r3, #0]
 800c8a0:	4618      	mov	r0, r3
 800c8a2:	f000 fb61 	bl	800cf68 <RTC_ByteToBcd2>
 800c8a6:	4603      	mov	r3, r0
 800c8a8:	041c      	lsls	r4, r3, #16
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800c8aa:	68bb      	ldr	r3, [r7, #8]
 800c8ac:	785b      	ldrb	r3, [r3, #1]
 800c8ae:	4618      	mov	r0, r3
 800c8b0:	f000 fb5a 	bl	800cf68 <RTC_ByteToBcd2>
 800c8b4:	4603      	mov	r3, r0
 800c8b6:	021b      	lsls	r3, r3, #8
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 800c8b8:	431c      	orrs	r4, r3
                          ((uint32_t)RTC_ByteToBcd2(sTime->Seconds) << RTC_TR_SU_Pos) | \
 800c8ba:	68bb      	ldr	r3, [r7, #8]
 800c8bc:	789b      	ldrb	r3, [r3, #2]
 800c8be:	4618      	mov	r0, r3
 800c8c0:	f000 fb52 	bl	800cf68 <RTC_ByteToBcd2>
 800c8c4:	4603      	mov	r3, r0
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800c8c6:	ea44 0203 	orr.w	r2, r4, r3
                          (((uint32_t)sTime->TimeFormat) << RTC_TR_PM_Pos));
 800c8ca:	68bb      	ldr	r3, [r7, #8]
 800c8cc:	78db      	ldrb	r3, [r3, #3]
 800c8ce:	059b      	lsls	r3, r3, #22
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 800c8d0:	4313      	orrs	r3, r2
 800c8d2:	617b      	str	r3, [r7, #20]
 800c8d4:	e018      	b.n	800c908 <HAL_RTC_SetTime+0xd0>
    }
    else
    {
      if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800c8d6:	68fb      	ldr	r3, [r7, #12]
 800c8d8:	681b      	ldr	r3, [r3, #0]
 800c8da:	689b      	ldr	r3, [r3, #8]
 800c8dc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c8e0:	2b00      	cmp	r3, #0
 800c8e2:	d102      	bne.n	800c8ea <HAL_RTC_SetTime+0xb2>
        assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 800c8e4:	68bb      	ldr	r3, [r7, #8]
 800c8e6:	2200      	movs	r2, #0
 800c8e8:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
      }
      assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
      assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 800c8ea:	68bb      	ldr	r3, [r7, #8]
 800c8ec:	781b      	ldrb	r3, [r3, #0]
 800c8ee:	041a      	lsls	r2, r3, #16
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800c8f0:	68bb      	ldr	r3, [r7, #8]
 800c8f2:	785b      	ldrb	r3, [r3, #1]
 800c8f4:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 800c8f6:	4313      	orrs	r3, r2
                ((uint32_t)(sTime->Seconds) << RTC_TR_SU_Pos) | \
 800c8f8:	68ba      	ldr	r2, [r7, #8]
 800c8fa:	7892      	ldrb	r2, [r2, #2]
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800c8fc:	431a      	orrs	r2, r3
                ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 800c8fe:	68bb      	ldr	r3, [r7, #8]
 800c900:	78db      	ldrb	r3, [r3, #3]
 800c902:	059b      	lsls	r3, r3, #22
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 800c904:	4313      	orrs	r3, r2
 800c906:	617b      	str	r3, [r7, #20]
    }

    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 800c908:	68fb      	ldr	r3, [r7, #12]
 800c90a:	681a      	ldr	r2, [r3, #0]
 800c90c:	697b      	ldr	r3, [r7, #20]
 800c90e:	f003 337f 	and.w	r3, r3, #2139062143	@ 0x7f7f7f7f
 800c912:	f023 43fe 	bic.w	r3, r3, #2130706432	@ 0x7f000000
 800c916:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured */
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 800c918:	68fb      	ldr	r3, [r7, #12]
 800c91a:	681b      	ldr	r3, [r3, #0]
 800c91c:	689a      	ldr	r2, [r3, #8]
 800c91e:	68fb      	ldr	r3, [r7, #12]
 800c920:	681b      	ldr	r3, [r3, #0]
 800c922:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 800c926:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 800c928:	68fb      	ldr	r3, [r7, #12]
 800c92a:	681b      	ldr	r3, [r3, #0]
 800c92c:	6899      	ldr	r1, [r3, #8]
 800c92e:	68bb      	ldr	r3, [r7, #8]
 800c930:	68da      	ldr	r2, [r3, #12]
 800c932:	68bb      	ldr	r3, [r7, #8]
 800c934:	691b      	ldr	r3, [r3, #16]
 800c936:	431a      	orrs	r2, r3
 800c938:	68fb      	ldr	r3, [r7, #12]
 800c93a:	681b      	ldr	r3, [r3, #0]
 800c93c:	430a      	orrs	r2, r1
 800c93e:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 800c940:	68f8      	ldr	r0, [r7, #12]
 800c942:	f000 fad3 	bl	800ceec <RTC_ExitInitMode>
 800c946:	4603      	mov	r3, r0
 800c948:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800c94a:	68fb      	ldr	r3, [r7, #12]
 800c94c:	681b      	ldr	r3, [r3, #0]
 800c94e:	22ff      	movs	r2, #255	@ 0xff
 800c950:	625a      	str	r2, [r3, #36]	@ 0x24

  if (status == HAL_OK)
 800c952:	7cfb      	ldrb	r3, [r7, #19]
 800c954:	2b00      	cmp	r3, #0
 800c956:	d103      	bne.n	800c960 <HAL_RTC_SetTime+0x128>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 800c958:	68fb      	ldr	r3, [r7, #12]
 800c95a:	2201      	movs	r2, #1
 800c95c:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800c960:	68fb      	ldr	r3, [r7, #12]
 800c962:	2200      	movs	r2, #0
 800c964:	f883 2020 	strb.w	r2, [r3, #32]

  return status;
 800c968:	7cfb      	ldrb	r3, [r7, #19]
}
 800c96a:	4618      	mov	r0, r3
 800c96c:	371c      	adds	r7, #28
 800c96e:	46bd      	mov	sp, r7
 800c970:	bd90      	pop	{r4, r7, pc}

0800c972 <HAL_RTC_GetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800c972:	b580      	push	{r7, lr}
 800c974:	b086      	sub	sp, #24
 800c976:	af00      	add	r7, sp, #0
 800c978:	60f8      	str	r0, [r7, #12]
 800c97a:	60b9      	str	r1, [r7, #8]
 800c97c:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds structure field from the corresponding register*/
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 800c97e:	68fb      	ldr	r3, [r7, #12]
 800c980:	681b      	ldr	r3, [r3, #0]
 800c982:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800c984:	68bb      	ldr	r3, [r7, #8]
 800c986:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 800c988:	68fb      	ldr	r3, [r7, #12]
 800c98a:	681b      	ldr	r3, [r3, #0]
 800c98c:	691b      	ldr	r3, [r3, #16]
 800c98e:	f3c3 020e 	ubfx	r2, r3, #0, #15
 800c992:	68bb      	ldr	r3, [r7, #8]
 800c994:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 800c996:	68fb      	ldr	r3, [r7, #12]
 800c998:	681b      	ldr	r3, [r3, #0]
 800c99a:	681b      	ldr	r3, [r3, #0]
 800c99c:	f003 337f 	and.w	r3, r3, #2139062143	@ 0x7f7f7f7f
 800c9a0:	f023 43fe 	bic.w	r3, r3, #2130706432	@ 0x7f000000
 800c9a4:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> RTC_TR_HU_Pos);
 800c9a6:	697b      	ldr	r3, [r7, #20]
 800c9a8:	0c1b      	lsrs	r3, r3, #16
 800c9aa:	b2db      	uxtb	r3, r3
 800c9ac:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800c9b0:	b2da      	uxtb	r2, r3
 800c9b2:	68bb      	ldr	r3, [r7, #8]
 800c9b4:	701a      	strb	r2, [r3, #0]
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 800c9b6:	697b      	ldr	r3, [r7, #20]
 800c9b8:	0a1b      	lsrs	r3, r3, #8
 800c9ba:	b2db      	uxtb	r3, r3
 800c9bc:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800c9c0:	b2da      	uxtb	r2, r3
 800c9c2:	68bb      	ldr	r3, [r7, #8]
 800c9c4:	705a      	strb	r2, [r3, #1]
  sTime->Seconds = (uint8_t)((tmpreg & (RTC_TR_ST | RTC_TR_SU)) >> RTC_TR_SU_Pos);
 800c9c6:	697b      	ldr	r3, [r7, #20]
 800c9c8:	b2db      	uxtb	r3, r3
 800c9ca:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800c9ce:	b2da      	uxtb	r2, r3
 800c9d0:	68bb      	ldr	r3, [r7, #8]
 800c9d2:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> RTC_TR_PM_Pos);
 800c9d4:	697b      	ldr	r3, [r7, #20]
 800c9d6:	0d9b      	lsrs	r3, r3, #22
 800c9d8:	b2db      	uxtb	r3, r3
 800c9da:	f003 0301 	and.w	r3, r3, #1
 800c9de:	b2da      	uxtb	r2, r3
 800c9e0:	68bb      	ldr	r3, [r7, #8]
 800c9e2:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 800c9e4:	687b      	ldr	r3, [r7, #4]
 800c9e6:	2b00      	cmp	r3, #0
 800c9e8:	d11a      	bne.n	800ca20 <HAL_RTC_GetTime+0xae>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 800c9ea:	68bb      	ldr	r3, [r7, #8]
 800c9ec:	781b      	ldrb	r3, [r3, #0]
 800c9ee:	4618      	mov	r0, r3
 800c9f0:	f000 fada 	bl	800cfa8 <RTC_Bcd2ToByte>
 800c9f4:	4603      	mov	r3, r0
 800c9f6:	461a      	mov	r2, r3
 800c9f8:	68bb      	ldr	r3, [r7, #8]
 800c9fa:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 800c9fc:	68bb      	ldr	r3, [r7, #8]
 800c9fe:	785b      	ldrb	r3, [r3, #1]
 800ca00:	4618      	mov	r0, r3
 800ca02:	f000 fad1 	bl	800cfa8 <RTC_Bcd2ToByte>
 800ca06:	4603      	mov	r3, r0
 800ca08:	461a      	mov	r2, r3
 800ca0a:	68bb      	ldr	r3, [r7, #8]
 800ca0c:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 800ca0e:	68bb      	ldr	r3, [r7, #8]
 800ca10:	789b      	ldrb	r3, [r3, #2]
 800ca12:	4618      	mov	r0, r3
 800ca14:	f000 fac8 	bl	800cfa8 <RTC_Bcd2ToByte>
 800ca18:	4603      	mov	r3, r0
 800ca1a:	461a      	mov	r2, r3
 800ca1c:	68bb      	ldr	r3, [r7, #8]
 800ca1e:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 800ca20:	2300      	movs	r3, #0
}
 800ca22:	4618      	mov	r0, r3
 800ca24:	3718      	adds	r7, #24
 800ca26:	46bd      	mov	sp, r7
 800ca28:	bd80      	pop	{r7, pc}

0800ca2a <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800ca2a:	b590      	push	{r4, r7, lr}
 800ca2c:	b087      	sub	sp, #28
 800ca2e:	af00      	add	r7, sp, #0
 800ca30:	60f8      	str	r0, [r7, #12]
 800ca32:	60b9      	str	r1, [r7, #8]
 800ca34:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800ca36:	68fb      	ldr	r3, [r7, #12]
 800ca38:	f893 3020 	ldrb.w	r3, [r3, #32]
 800ca3c:	2b01      	cmp	r3, #1
 800ca3e:	d101      	bne.n	800ca44 <HAL_RTC_SetDate+0x1a>
 800ca40:	2302      	movs	r3, #2
 800ca42:	e075      	b.n	800cb30 <HAL_RTC_SetDate+0x106>
 800ca44:	68fb      	ldr	r3, [r7, #12]
 800ca46:	2201      	movs	r2, #1
 800ca48:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800ca4c:	68fb      	ldr	r3, [r7, #12]
 800ca4e:	2202      	movs	r2, #2
 800ca50:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 800ca54:	687b      	ldr	r3, [r7, #4]
 800ca56:	2b00      	cmp	r3, #0
 800ca58:	d10e      	bne.n	800ca78 <HAL_RTC_SetDate+0x4e>
 800ca5a:	68bb      	ldr	r3, [r7, #8]
 800ca5c:	785b      	ldrb	r3, [r3, #1]
 800ca5e:	f003 0310 	and.w	r3, r3, #16
 800ca62:	2b00      	cmp	r3, #0
 800ca64:	d008      	beq.n	800ca78 <HAL_RTC_SetDate+0x4e>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 800ca66:	68bb      	ldr	r3, [r7, #8]
 800ca68:	785b      	ldrb	r3, [r3, #1]
 800ca6a:	f023 0310 	bic.w	r3, r3, #16
 800ca6e:	b2db      	uxtb	r3, r3
 800ca70:	330a      	adds	r3, #10
 800ca72:	b2da      	uxtb	r2, r3
 800ca74:	68bb      	ldr	r3, [r7, #8]
 800ca76:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 800ca78:	687b      	ldr	r3, [r7, #4]
 800ca7a:	2b00      	cmp	r3, #0
 800ca7c:	d11c      	bne.n	800cab8 <HAL_RTC_SetDate+0x8e>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 800ca7e:	68bb      	ldr	r3, [r7, #8]
 800ca80:	78db      	ldrb	r3, [r3, #3]
 800ca82:	4618      	mov	r0, r3
 800ca84:	f000 fa70 	bl	800cf68 <RTC_ByteToBcd2>
 800ca88:	4603      	mov	r3, r0
 800ca8a:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 800ca8c:	68bb      	ldr	r3, [r7, #8]
 800ca8e:	785b      	ldrb	r3, [r3, #1]
 800ca90:	4618      	mov	r0, r3
 800ca92:	f000 fa69 	bl	800cf68 <RTC_ByteToBcd2>
 800ca96:	4603      	mov	r3, r0
 800ca98:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 800ca9a:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date) << RTC_DR_DU_Pos) | \
 800ca9c:	68bb      	ldr	r3, [r7, #8]
 800ca9e:	789b      	ldrb	r3, [r3, #2]
 800caa0:	4618      	mov	r0, r3
 800caa2:	f000 fa61 	bl	800cf68 <RTC_ByteToBcd2>
 800caa6:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 800caa8:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay << RTC_DR_WDU_Pos));
 800caac:	68bb      	ldr	r3, [r7, #8]
 800caae:	781b      	ldrb	r3, [r3, #0]
 800cab0:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 800cab2:	4313      	orrs	r3, r2
 800cab4:	617b      	str	r3, [r7, #20]
 800cab6:	e00e      	b.n	800cad6 <HAL_RTC_SetDate+0xac>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 800cab8:	68bb      	ldr	r3, [r7, #8]
 800caba:	78db      	ldrb	r3, [r3, #3]
 800cabc:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 800cabe:	68bb      	ldr	r3, [r7, #8]
 800cac0:	785b      	ldrb	r3, [r3, #1]
 800cac2:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 800cac4:	4313      	orrs	r3, r2
                  (((uint32_t)sDate->Date) << RTC_DR_DU_Pos) | \
 800cac6:	68ba      	ldr	r2, [r7, #8]
 800cac8:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 800caca:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 800cacc:	68bb      	ldr	r3, [r7, #8]
 800cace:	781b      	ldrb	r3, [r3, #0]
 800cad0:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 800cad2:	4313      	orrs	r3, r2
 800cad4:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800cad6:	68fb      	ldr	r3, [r7, #12]
 800cad8:	681b      	ldr	r3, [r3, #0]
 800cada:	22ca      	movs	r2, #202	@ 0xca
 800cadc:	625a      	str	r2, [r3, #36]	@ 0x24
 800cade:	68fb      	ldr	r3, [r7, #12]
 800cae0:	681b      	ldr	r3, [r3, #0]
 800cae2:	2253      	movs	r2, #83	@ 0x53
 800cae4:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800cae6:	68f8      	ldr	r0, [r7, #12]
 800cae8:	f000 f9cc 	bl	800ce84 <RTC_EnterInitMode>
 800caec:	4603      	mov	r3, r0
 800caee:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 800caf0:	7cfb      	ldrb	r3, [r7, #19]
 800caf2:	2b00      	cmp	r3, #0
 800caf4:	d10c      	bne.n	800cb10 <HAL_RTC_SetDate+0xe6>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 800caf6:	68fb      	ldr	r3, [r7, #12]
 800caf8:	681a      	ldr	r2, [r3, #0]
 800cafa:	697b      	ldr	r3, [r7, #20]
 800cafc:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 800cb00:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 800cb04:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 800cb06:	68f8      	ldr	r0, [r7, #12]
 800cb08:	f000 f9f0 	bl	800ceec <RTC_ExitInitMode>
 800cb0c:	4603      	mov	r3, r0
 800cb0e:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800cb10:	68fb      	ldr	r3, [r7, #12]
 800cb12:	681b      	ldr	r3, [r3, #0]
 800cb14:	22ff      	movs	r2, #255	@ 0xff
 800cb16:	625a      	str	r2, [r3, #36]	@ 0x24

  if (status == HAL_OK)
 800cb18:	7cfb      	ldrb	r3, [r7, #19]
 800cb1a:	2b00      	cmp	r3, #0
 800cb1c:	d103      	bne.n	800cb26 <HAL_RTC_SetDate+0xfc>
  {
    hrtc->State = HAL_RTC_STATE_READY ;
 800cb1e:	68fb      	ldr	r3, [r7, #12]
 800cb20:	2201      	movs	r2, #1
 800cb22:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800cb26:	68fb      	ldr	r3, [r7, #12]
 800cb28:	2200      	movs	r2, #0
 800cb2a:	f883 2020 	strb.w	r2, [r3, #32]

  return status;
 800cb2e:	7cfb      	ldrb	r3, [r7, #19]
}
 800cb30:	4618      	mov	r0, r3
 800cb32:	371c      	adds	r7, #28
 800cb34:	46bd      	mov	sp, r7
 800cb36:	bd90      	pop	{r4, r7, pc}

0800cb38 <HAL_RTC_SetAlarm_IT>:
  *             @arg RTC_FORMAT_BIN: Binary data format
  *             @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm_IT(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 800cb38:	b590      	push	{r4, r7, lr}
 800cb3a:	b089      	sub	sp, #36	@ 0x24
 800cb3c:	af00      	add	r7, sp, #0
 800cb3e:	60f8      	str	r0, [r7, #12]
 800cb40:	60b9      	str	r1, [r7, #8]
 800cb42:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_ALARM_DATE_WEEKDAY_SEL(sAlarm->AlarmDateWeekDaySel));
  assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(sAlarm->AlarmTime.SubSeconds));
  assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(sAlarm->AlarmSubSecondMask));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800cb44:	68fb      	ldr	r3, [r7, #12]
 800cb46:	f893 3020 	ldrb.w	r3, [r3, #32]
 800cb4a:	2b01      	cmp	r3, #1
 800cb4c:	d101      	bne.n	800cb52 <HAL_RTC_SetAlarm_IT+0x1a>
 800cb4e:	2302      	movs	r3, #2
 800cb50:	e127      	b.n	800cda2 <HAL_RTC_SetAlarm_IT+0x26a>
 800cb52:	68fb      	ldr	r3, [r7, #12]
 800cb54:	2201      	movs	r2, #1
 800cb56:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800cb5a:	68fb      	ldr	r3, [r7, #12]
 800cb5c:	2202      	movs	r2, #2
 800cb5e:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  if (Format == RTC_FORMAT_BIN)
 800cb62:	687b      	ldr	r3, [r7, #4]
 800cb64:	2b00      	cmp	r3, #0
 800cb66:	d137      	bne.n	800cbd8 <HAL_RTC_SetAlarm_IT+0xa0>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800cb68:	68fb      	ldr	r3, [r7, #12]
 800cb6a:	681b      	ldr	r3, [r3, #0]
 800cb6c:	689b      	ldr	r3, [r3, #8]
 800cb6e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800cb72:	2b00      	cmp	r3, #0
 800cb74:	d102      	bne.n	800cb7c <HAL_RTC_SetAlarm_IT+0x44>
      assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 800cb76:	68bb      	ldr	r3, [r7, #8]
 800cb78:	2200      	movs	r2, #0
 800cb7a:	70da      	strb	r2, [r3, #3]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
    }

    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 800cb7c:	68bb      	ldr	r3, [r7, #8]
 800cb7e:	781b      	ldrb	r3, [r3, #0]
 800cb80:	4618      	mov	r0, r3
 800cb82:	f000 f9f1 	bl	800cf68 <RTC_ByteToBcd2>
 800cb86:	4603      	mov	r3, r0
 800cb88:	041c      	lsls	r4, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 800cb8a:	68bb      	ldr	r3, [r7, #8]
 800cb8c:	785b      	ldrb	r3, [r3, #1]
 800cb8e:	4618      	mov	r0, r3
 800cb90:	f000 f9ea 	bl	800cf68 <RTC_ByteToBcd2>
 800cb94:	4603      	mov	r3, r0
 800cb96:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 800cb98:	431c      	orrs	r4, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 800cb9a:	68bb      	ldr	r3, [r7, #8]
 800cb9c:	789b      	ldrb	r3, [r3, #2]
 800cb9e:	4618      	mov	r0, r3
 800cba0:	f000 f9e2 	bl	800cf68 <RTC_ByteToBcd2>
 800cba4:	4603      	mov	r3, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 800cba6:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 800cbaa:	68bb      	ldr	r3, [r7, #8]
 800cbac:	78db      	ldrb	r3, [r3, #3]
 800cbae:	059b      	lsls	r3, r3, #22
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 800cbb0:	ea42 0403 	orr.w	r4, r2, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 800cbb4:	68bb      	ldr	r3, [r7, #8]
 800cbb6:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800cbba:	4618      	mov	r0, r3
 800cbbc:	f000 f9d4 	bl	800cf68 <RTC_ByteToBcd2>
 800cbc0:	4603      	mov	r3, r0
 800cbc2:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 800cbc4:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 800cbc8:	68bb      	ldr	r3, [r7, #8]
 800cbca:	6a1b      	ldr	r3, [r3, #32]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 800cbcc:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 800cbce:	68bb      	ldr	r3, [r7, #8]
 800cbd0:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 800cbd2:	4313      	orrs	r3, r2
 800cbd4:	61fb      	str	r3, [r7, #28]
 800cbd6:	e023      	b.n	800cc20 <HAL_RTC_SetAlarm_IT+0xe8>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800cbd8:	68fb      	ldr	r3, [r7, #12]
 800cbda:	681b      	ldr	r3, [r3, #0]
 800cbdc:	689b      	ldr	r3, [r3, #8]
 800cbde:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800cbe2:	2b00      	cmp	r3, #0
 800cbe4:	d102      	bne.n	800cbec <HAL_RTC_SetAlarm_IT+0xb4>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 800cbe6:	68bb      	ldr	r3, [r7, #8]
 800cbe8:	2200      	movs	r2, #0
 800cbea:	70da      	strb	r2, [r3, #3]
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
    }

#endif /* USE_FULL_ASSERT */
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 800cbec:	68bb      	ldr	r3, [r7, #8]
 800cbee:	781b      	ldrb	r3, [r3, #0]
 800cbf0:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 800cbf2:	68bb      	ldr	r3, [r7, #8]
 800cbf4:	785b      	ldrb	r3, [r3, #1]
 800cbf6:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 800cbf8:	4313      	orrs	r3, r2
              ((uint32_t)(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 800cbfa:	68ba      	ldr	r2, [r7, #8]
 800cbfc:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 800cbfe:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 800cc00:	68bb      	ldr	r3, [r7, #8]
 800cc02:	78db      	ldrb	r3, [r3, #3]
 800cc04:	059b      	lsls	r3, r3, #22
              ((uint32_t)(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 800cc06:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 800cc08:	68bb      	ldr	r3, [r7, #8]
 800cc0a:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800cc0e:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 800cc10:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 800cc12:	68bb      	ldr	r3, [r7, #8]
 800cc14:	6a1b      	ldr	r3, [r3, #32]
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 800cc16:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 800cc18:	68bb      	ldr	r3, [r7, #8]
 800cc1a:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 800cc1c:	4313      	orrs	r3, r2
 800cc1e:	61fb      	str	r3, [r7, #28]
  }
  /* Configure the Alarm A or Alarm B Sub Second registers */
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | (uint32_t)(sAlarm->AlarmSubSecondMask));
 800cc20:	68bb      	ldr	r3, [r7, #8]
 800cc22:	685a      	ldr	r2, [r3, #4]
 800cc24:	68bb      	ldr	r3, [r7, #8]
 800cc26:	69db      	ldr	r3, [r3, #28]
 800cc28:	4313      	orrs	r3, r2
 800cc2a:	61bb      	str	r3, [r7, #24]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800cc2c:	68fb      	ldr	r3, [r7, #12]
 800cc2e:	681b      	ldr	r3, [r3, #0]
 800cc30:	22ca      	movs	r2, #202	@ 0xca
 800cc32:	625a      	str	r2, [r3, #36]	@ 0x24
 800cc34:	68fb      	ldr	r3, [r7, #12]
 800cc36:	681b      	ldr	r3, [r3, #0]
 800cc38:	2253      	movs	r2, #83	@ 0x53
 800cc3a:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Configure the Alarm register */
  if (sAlarm->Alarm == RTC_ALARM_A)
 800cc3c:	68bb      	ldr	r3, [r7, #8]
 800cc3e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800cc40:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800cc44:	d14a      	bne.n	800ccdc <HAL_RTC_SetAlarm_IT+0x1a4>
  {
    /* Disable the Alarm A interrupt */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 800cc46:	68fb      	ldr	r3, [r7, #12]
 800cc48:	681b      	ldr	r3, [r3, #0]
 800cc4a:	689a      	ldr	r2, [r3, #8]
 800cc4c:	68fb      	ldr	r3, [r7, #12]
 800cc4e:	681b      	ldr	r3, [r3, #0]
 800cc50:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800cc54:	609a      	str	r2, [r3, #8]

    /* Clear flag alarm A */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 800cc56:	68fb      	ldr	r3, [r7, #12]
 800cc58:	681b      	ldr	r3, [r3, #0]
 800cc5a:	68db      	ldr	r3, [r3, #12]
 800cc5c:	b2da      	uxtb	r2, r3
 800cc5e:	68fb      	ldr	r3, [r7, #12]
 800cc60:	681b      	ldr	r3, [r3, #0]
 800cc62:	f462 72c0 	orn	r2, r2, #384	@ 0x180
 800cc66:	60da      	str	r2, [r3, #12]

#if defined (RTC_FLAG_ALRAWF)
    uint32_t tickstart = HAL_GetTick();
 800cc68:	f7fa fe2e 	bl	80078c8 <HAL_GetTick>
 800cc6c:	6138      	str	r0, [r7, #16]
    /* Wait till RTC ALRAWF flag is set and if Time out is reached exit */
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 800cc6e:	e015      	b.n	800cc9c <HAL_RTC_SetAlarm_IT+0x164>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800cc70:	f7fa fe2a 	bl	80078c8 <HAL_GetTick>
 800cc74:	4602      	mov	r2, r0
 800cc76:	693b      	ldr	r3, [r7, #16]
 800cc78:	1ad3      	subs	r3, r2, r3
 800cc7a:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800cc7e:	d90d      	bls.n	800cc9c <HAL_RTC_SetAlarm_IT+0x164>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800cc80:	68fb      	ldr	r3, [r7, #12]
 800cc82:	681b      	ldr	r3, [r3, #0]
 800cc84:	22ff      	movs	r2, #255	@ 0xff
 800cc86:	625a      	str	r2, [r3, #36]	@ 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800cc88:	68fb      	ldr	r3, [r7, #12]
 800cc8a:	2203      	movs	r2, #3
 800cc8c:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800cc90:	68fb      	ldr	r3, [r7, #12]
 800cc92:	2200      	movs	r2, #0
 800cc94:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_TIMEOUT;
 800cc98:	2303      	movs	r3, #3
 800cc9a:	e082      	b.n	800cda2 <HAL_RTC_SetAlarm_IT+0x26a>
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 800cc9c:	68fb      	ldr	r3, [r7, #12]
 800cc9e:	681b      	ldr	r3, [r3, #0]
 800cca0:	68db      	ldr	r3, [r3, #12]
 800cca2:	f003 0301 	and.w	r3, r3, #1
 800cca6:	2b00      	cmp	r3, #0
 800cca8:	d0e2      	beq.n	800cc70 <HAL_RTC_SetAlarm_IT+0x138>
      }
    }
#endif

    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 800ccaa:	68fb      	ldr	r3, [r7, #12]
 800ccac:	681b      	ldr	r3, [r3, #0]
 800ccae:	69fa      	ldr	r2, [r7, #28]
 800ccb0:	61da      	str	r2, [r3, #28]
    /* Configure the Alarm A Sub Second register */
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 800ccb2:	68fb      	ldr	r3, [r7, #12]
 800ccb4:	681b      	ldr	r3, [r3, #0]
 800ccb6:	69ba      	ldr	r2, [r7, #24]
 800ccb8:	645a      	str	r2, [r3, #68]	@ 0x44
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 800ccba:	68fb      	ldr	r3, [r7, #12]
 800ccbc:	681b      	ldr	r3, [r3, #0]
 800ccbe:	689a      	ldr	r2, [r3, #8]
 800ccc0:	68fb      	ldr	r3, [r7, #12]
 800ccc2:	681b      	ldr	r3, [r3, #0]
 800ccc4:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800ccc8:	609a      	str	r2, [r3, #8]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRA);
 800ccca:	68fb      	ldr	r3, [r7, #12]
 800cccc:	681b      	ldr	r3, [r3, #0]
 800ccce:	689a      	ldr	r2, [r3, #8]
 800ccd0:	68fb      	ldr	r3, [r7, #12]
 800ccd2:	681b      	ldr	r3, [r3, #0]
 800ccd4:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800ccd8:	609a      	str	r2, [r3, #8]
 800ccda:	e049      	b.n	800cd70 <HAL_RTC_SetAlarm_IT+0x238>
  }
  else
  {
    /* Disable the Alarm B interrupt */
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 800ccdc:	68fb      	ldr	r3, [r7, #12]
 800ccde:	681b      	ldr	r3, [r3, #0]
 800cce0:	689a      	ldr	r2, [r3, #8]
 800cce2:	68fb      	ldr	r3, [r7, #12]
 800cce4:	681b      	ldr	r3, [r3, #0]
 800cce6:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 800ccea:	609a      	str	r2, [r3, #8]

    /* Clear flag alarm B */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 800ccec:	68fb      	ldr	r3, [r7, #12]
 800ccee:	681b      	ldr	r3, [r3, #0]
 800ccf0:	68db      	ldr	r3, [r3, #12]
 800ccf2:	b2da      	uxtb	r2, r3
 800ccf4:	68fb      	ldr	r3, [r7, #12]
 800ccf6:	681b      	ldr	r3, [r3, #0]
 800ccf8:	f462 7220 	orn	r2, r2, #640	@ 0x280
 800ccfc:	60da      	str	r2, [r3, #12]

#if defined (RTC_FLAG_ALRBWF)
    uint32_t tickstart = HAL_GetTick();
 800ccfe:	f7fa fde3 	bl	80078c8 <HAL_GetTick>
 800cd02:	6178      	str	r0, [r7, #20]
    /* Wait till RTC ALRBWF flag is set and if Time out is reached exit */
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 800cd04:	e015      	b.n	800cd32 <HAL_RTC_SetAlarm_IT+0x1fa>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800cd06:	f7fa fddf 	bl	80078c8 <HAL_GetTick>
 800cd0a:	4602      	mov	r2, r0
 800cd0c:	697b      	ldr	r3, [r7, #20]
 800cd0e:	1ad3      	subs	r3, r2, r3
 800cd10:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800cd14:	d90d      	bls.n	800cd32 <HAL_RTC_SetAlarm_IT+0x1fa>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800cd16:	68fb      	ldr	r3, [r7, #12]
 800cd18:	681b      	ldr	r3, [r3, #0]
 800cd1a:	22ff      	movs	r2, #255	@ 0xff
 800cd1c:	625a      	str	r2, [r3, #36]	@ 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800cd1e:	68fb      	ldr	r3, [r7, #12]
 800cd20:	2203      	movs	r2, #3
 800cd22:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800cd26:	68fb      	ldr	r3, [r7, #12]
 800cd28:	2200      	movs	r2, #0
 800cd2a:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_TIMEOUT;
 800cd2e:	2303      	movs	r3, #3
 800cd30:	e037      	b.n	800cda2 <HAL_RTC_SetAlarm_IT+0x26a>
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 800cd32:	68fb      	ldr	r3, [r7, #12]
 800cd34:	681b      	ldr	r3, [r3, #0]
 800cd36:	68db      	ldr	r3, [r3, #12]
 800cd38:	f003 0302 	and.w	r3, r3, #2
 800cd3c:	2b00      	cmp	r3, #0
 800cd3e:	d0e2      	beq.n	800cd06 <HAL_RTC_SetAlarm_IT+0x1ce>
      }
    }
#endif

    hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 800cd40:	68fb      	ldr	r3, [r7, #12]
 800cd42:	681b      	ldr	r3, [r3, #0]
 800cd44:	69fa      	ldr	r2, [r7, #28]
 800cd46:	621a      	str	r2, [r3, #32]
    /* Configure the Alarm B Sub Second register */
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 800cd48:	68fb      	ldr	r3, [r7, #12]
 800cd4a:	681b      	ldr	r3, [r3, #0]
 800cd4c:	69ba      	ldr	r2, [r7, #24]
 800cd4e:	649a      	str	r2, [r3, #72]	@ 0x48
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMB_ENABLE(hrtc);
 800cd50:	68fb      	ldr	r3, [r7, #12]
 800cd52:	681b      	ldr	r3, [r3, #0]
 800cd54:	689a      	ldr	r2, [r3, #8]
 800cd56:	68fb      	ldr	r3, [r7, #12]
 800cd58:	681b      	ldr	r3, [r3, #0]
 800cd5a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800cd5e:	609a      	str	r2, [r3, #8]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRB);
 800cd60:	68fb      	ldr	r3, [r7, #12]
 800cd62:	681b      	ldr	r3, [r3, #0]
 800cd64:	689a      	ldr	r2, [r3, #8]
 800cd66:	68fb      	ldr	r3, [r7, #12]
 800cd68:	681b      	ldr	r3, [r3, #0]
 800cd6a:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800cd6e:	609a      	str	r2, [r3, #8]
  }

  /* RTC Alarm Interrupt Configuration: EXTI configuration */
  __HAL_RTC_ALARM_EXTI_ENABLE_IT();
 800cd70:	4b0e      	ldr	r3, [pc, #56]	@ (800cdac <HAL_RTC_SetAlarm_IT+0x274>)
 800cd72:	681b      	ldr	r3, [r3, #0]
 800cd74:	4a0d      	ldr	r2, [pc, #52]	@ (800cdac <HAL_RTC_SetAlarm_IT+0x274>)
 800cd76:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800cd7a:	6013      	str	r3, [r2, #0]
  __HAL_RTC_ALARM_EXTI_ENABLE_RISING_EDGE();
 800cd7c:	4b0b      	ldr	r3, [pc, #44]	@ (800cdac <HAL_RTC_SetAlarm_IT+0x274>)
 800cd7e:	689b      	ldr	r3, [r3, #8]
 800cd80:	4a0a      	ldr	r2, [pc, #40]	@ (800cdac <HAL_RTC_SetAlarm_IT+0x274>)
 800cd82:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800cd86:	6093      	str	r3, [r2, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800cd88:	68fb      	ldr	r3, [r7, #12]
 800cd8a:	681b      	ldr	r3, [r3, #0]
 800cd8c:	22ff      	movs	r2, #255	@ 0xff
 800cd8e:	625a      	str	r2, [r3, #36]	@ 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 800cd90:	68fb      	ldr	r3, [r7, #12]
 800cd92:	2201      	movs	r2, #1
 800cd94:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800cd98:	68fb      	ldr	r3, [r7, #12]
 800cd9a:	2200      	movs	r2, #0
 800cd9c:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 800cda0:	2300      	movs	r3, #0
}
 800cda2:	4618      	mov	r0, r3
 800cda4:	3724      	adds	r7, #36	@ 0x24
 800cda6:	46bd      	mov	sp, r7
 800cda8:	bd90      	pop	{r4, r7, pc}
 800cdaa:	bf00      	nop
 800cdac:	40010400 	.word	0x40010400

0800cdb0 <HAL_RTC_AlarmIRQHandler>:
  * @brief  Handle Alarm interrupt request.
  * @param  hrtc RTC handle
  * @retval None
  */
void HAL_RTC_AlarmIRQHandler(RTC_HandleTypeDef *hrtc)
{
 800cdb0:	b580      	push	{r7, lr}
 800cdb2:	b082      	sub	sp, #8
 800cdb4:	af00      	add	r7, sp, #0
 800cdb6:	6078      	str	r0, [r7, #4]
  /* Clear the EXTI's line Flag for RTC Alarm */
  __HAL_RTC_ALARM_EXTI_CLEAR_FLAG();
 800cdb8:	4b1f      	ldr	r3, [pc, #124]	@ (800ce38 <HAL_RTC_AlarmIRQHandler+0x88>)
 800cdba:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 800cdbe:	615a      	str	r2, [r3, #20]
  }

#else /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */

  /* Get the AlarmA interrupt source enable status */
  if (__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRA) != 0U)
 800cdc0:	687b      	ldr	r3, [r7, #4]
 800cdc2:	681b      	ldr	r3, [r3, #0]
 800cdc4:	689b      	ldr	r3, [r3, #8]
 800cdc6:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800cdca:	2b00      	cmp	r3, #0
 800cdcc:	d012      	beq.n	800cdf4 <HAL_RTC_AlarmIRQHandler+0x44>
  {
    /* Get the pending status of the AlarmA Interrupt */
    if (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAF) != 0U)
 800cdce:	687b      	ldr	r3, [r7, #4]
 800cdd0:	681b      	ldr	r3, [r3, #0]
 800cdd2:	68db      	ldr	r3, [r3, #12]
 800cdd4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800cdd8:	2b00      	cmp	r3, #0
 800cdda:	d00b      	beq.n	800cdf4 <HAL_RTC_AlarmIRQHandler+0x44>
    {
      /* Clear the AlarmA interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 800cddc:	687b      	ldr	r3, [r7, #4]
 800cdde:	681b      	ldr	r3, [r3, #0]
 800cde0:	68db      	ldr	r3, [r3, #12]
 800cde2:	b2da      	uxtb	r2, r3
 800cde4:	687b      	ldr	r3, [r7, #4]
 800cde6:	681b      	ldr	r3, [r3, #0]
 800cde8:	f462 72c0 	orn	r2, r2, #384	@ 0x180
 800cdec:	60da      	str	r2, [r3, #12]

#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->AlarmAEventCallback(hrtc);
#else
      HAL_RTC_AlarmAEventCallback(hrtc);
 800cdee:	6878      	ldr	r0, [r7, #4]
 800cdf0:	f7f4 fa7e 	bl	80012f0 <HAL_RTC_AlarmAEventCallback>
#endif
    }
  }

  /* Get the AlarmB interrupt source enable status */
  if (__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRB) != 0U)
 800cdf4:	687b      	ldr	r3, [r7, #4]
 800cdf6:	681b      	ldr	r3, [r3, #0]
 800cdf8:	689b      	ldr	r3, [r3, #8]
 800cdfa:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800cdfe:	2b00      	cmp	r3, #0
 800ce00:	d012      	beq.n	800ce28 <HAL_RTC_AlarmIRQHandler+0x78>
  {
    /* Get the pending status of the AlarmB Interrupt */
    if (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBF) != 0U)
 800ce02:	687b      	ldr	r3, [r7, #4]
 800ce04:	681b      	ldr	r3, [r3, #0]
 800ce06:	68db      	ldr	r3, [r3, #12]
 800ce08:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800ce0c:	2b00      	cmp	r3, #0
 800ce0e:	d00b      	beq.n	800ce28 <HAL_RTC_AlarmIRQHandler+0x78>
    {
      /* Clear the AlarmB interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 800ce10:	687b      	ldr	r3, [r7, #4]
 800ce12:	681b      	ldr	r3, [r3, #0]
 800ce14:	68db      	ldr	r3, [r3, #12]
 800ce16:	b2da      	uxtb	r2, r3
 800ce18:	687b      	ldr	r3, [r7, #4]
 800ce1a:	681b      	ldr	r3, [r3, #0]
 800ce1c:	f462 7220 	orn	r2, r2, #640	@ 0x280
 800ce20:	60da      	str	r2, [r3, #12]

#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->AlarmBEventCallback(hrtc);
#else
      HAL_RTCEx_AlarmBEventCallback(hrtc);
 800ce22:	6878      	ldr	r0, [r7, #4]
 800ce24:	f000 f8da 	bl	800cfdc <HAL_RTCEx_AlarmBEventCallback>
    }
  }
#endif /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 800ce28:	687b      	ldr	r3, [r7, #4]
 800ce2a:	2201      	movs	r2, #1
 800ce2c:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
}
 800ce30:	bf00      	nop
 800ce32:	3708      	adds	r7, #8
 800ce34:	46bd      	mov	sp, r7
 800ce36:	bd80      	pop	{r7, pc}
 800ce38:	40010400 	.word	0x40010400

0800ce3c <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 800ce3c:	b580      	push	{r7, lr}
 800ce3e:	b084      	sub	sp, #16
 800ce40:	af00      	add	r7, sp, #0
 800ce42:	6078      	str	r0, [r7, #4]
#elif defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  /* Clear RSF flag (use a read-modify-write sequence to preserve the other read-write bits) */
  hrtc->Instance->ICSR &= (uint32_t)RTC_RSF_MASK;
#else
  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 800ce44:	687b      	ldr	r3, [r7, #4]
 800ce46:	681b      	ldr	r3, [r3, #0]
 800ce48:	4a0d      	ldr	r2, [pc, #52]	@ (800ce80 <HAL_RTC_WaitForSynchro+0x44>)
 800ce4a:	60da      	str	r2, [r3, #12]
#endif

  tickstart = HAL_GetTick();
 800ce4c:	f7fa fd3c 	bl	80078c8 <HAL_GetTick>
 800ce50:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  while ((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
#else
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800ce52:	e009      	b.n	800ce68 <HAL_RTC_WaitForSynchro+0x2c>
#endif
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800ce54:	f7fa fd38 	bl	80078c8 <HAL_GetTick>
 800ce58:	4602      	mov	r2, r0
 800ce5a:	68fb      	ldr	r3, [r7, #12]
 800ce5c:	1ad3      	subs	r3, r2, r3
 800ce5e:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800ce62:	d901      	bls.n	800ce68 <HAL_RTC_WaitForSynchro+0x2c>
    {
      return HAL_TIMEOUT;
 800ce64:	2303      	movs	r3, #3
 800ce66:	e007      	b.n	800ce78 <HAL_RTC_WaitForSynchro+0x3c>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800ce68:	687b      	ldr	r3, [r7, #4]
 800ce6a:	681b      	ldr	r3, [r3, #0]
 800ce6c:	68db      	ldr	r3, [r3, #12]
 800ce6e:	f003 0320 	and.w	r3, r3, #32
 800ce72:	2b00      	cmp	r3, #0
 800ce74:	d0ee      	beq.n	800ce54 <HAL_RTC_WaitForSynchro+0x18>
    }
  }

  return HAL_OK;
 800ce76:	2300      	movs	r3, #0
}
 800ce78:	4618      	mov	r0, r3
 800ce7a:	3710      	adds	r7, #16
 800ce7c:	46bd      	mov	sp, r7
 800ce7e:	bd80      	pop	{r7, pc}
 800ce80:	0003ff5f 	.word	0x0003ff5f

0800ce84 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 800ce84:	b580      	push	{r7, lr}
 800ce86:	b084      	sub	sp, #16
 800ce88:	af00      	add	r7, sp, #0
 800ce8a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800ce8c:	2300      	movs	r3, #0
 800ce8e:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
      }
    }
  }
#else /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 800ce90:	687b      	ldr	r3, [r7, #4]
 800ce92:	681b      	ldr	r3, [r3, #0]
 800ce94:	68db      	ldr	r3, [r3, #12]
 800ce96:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ce9a:	2b00      	cmp	r3, #0
 800ce9c:	d120      	bne.n	800cee0 <RTC_EnterInitMode+0x5c>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 800ce9e:	687b      	ldr	r3, [r7, #4]
 800cea0:	681b      	ldr	r3, [r3, #0]
 800cea2:	f04f 32ff 	mov.w	r2, #4294967295
 800cea6:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 800cea8:	f7fa fd0e 	bl	80078c8 <HAL_GetTick>
 800ceac:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 800ceae:	e00d      	b.n	800cecc <RTC_EnterInitMode+0x48>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 800ceb0:	f7fa fd0a 	bl	80078c8 <HAL_GetTick>
 800ceb4:	4602      	mov	r2, r0
 800ceb6:	68bb      	ldr	r3, [r7, #8]
 800ceb8:	1ad3      	subs	r3, r2, r3
 800ceba:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800cebe:	d905      	bls.n	800cecc <RTC_EnterInitMode+0x48>
      {
        status = HAL_TIMEOUT;
 800cec0:	2303      	movs	r3, #3
 800cec2:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800cec4:	687b      	ldr	r3, [r7, #4]
 800cec6:	2203      	movs	r2, #3
 800cec8:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 800cecc:	687b      	ldr	r3, [r7, #4]
 800cece:	681b      	ldr	r3, [r3, #0]
 800ced0:	68db      	ldr	r3, [r3, #12]
 800ced2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ced6:	2b00      	cmp	r3, #0
 800ced8:	d102      	bne.n	800cee0 <RTC_EnterInitMode+0x5c>
 800ceda:	7bfb      	ldrb	r3, [r7, #15]
 800cedc:	2b03      	cmp	r3, #3
 800cede:	d1e7      	bne.n	800ceb0 <RTC_EnterInitMode+0x2c>
      }
    }
  }
#endif /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */

  return status;
 800cee0:	7bfb      	ldrb	r3, [r7, #15]
}
 800cee2:	4618      	mov	r0, r3
 800cee4:	3710      	adds	r7, #16
 800cee6:	46bd      	mov	sp, r7
 800cee8:	bd80      	pop	{r7, pc}
	...

0800ceec <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 800ceec:	b580      	push	{r7, lr}
 800ceee:	b084      	sub	sp, #16
 800cef0:	af00      	add	r7, sp, #0
 800cef2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800cef4:	2300      	movs	r3, #0
 800cef6:	73fb      	strb	r3, [r7, #15]
  /* Exit Initialization mode */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined(STM32L4P5xx) || defined(STM32L4Q5xx)
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
#else
  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ISR, RTC_ISR_INIT);
 800cef8:	4b1a      	ldr	r3, [pc, #104]	@ (800cf64 <RTC_ExitInitMode+0x78>)
 800cefa:	68db      	ldr	r3, [r3, #12]
 800cefc:	4a19      	ldr	r2, [pc, #100]	@ (800cf64 <RTC_ExitInitMode+0x78>)
 800cefe:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800cf02:	60d3      	str	r3, [r2, #12]
#endif

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 800cf04:	4b17      	ldr	r3, [pc, #92]	@ (800cf64 <RTC_ExitInitMode+0x78>)
 800cf06:	689b      	ldr	r3, [r3, #8]
 800cf08:	f003 0320 	and.w	r3, r3, #32
 800cf0c:	2b00      	cmp	r3, #0
 800cf0e:	d10c      	bne.n	800cf2a <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800cf10:	6878      	ldr	r0, [r7, #4]
 800cf12:	f7ff ff93 	bl	800ce3c <HAL_RTC_WaitForSynchro>
 800cf16:	4603      	mov	r3, r0
 800cf18:	2b00      	cmp	r3, #0
 800cf1a:	d01e      	beq.n	800cf5a <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800cf1c:	687b      	ldr	r3, [r7, #4]
 800cf1e:	2203      	movs	r2, #3
 800cf20:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
      status = HAL_TIMEOUT;
 800cf24:	2303      	movs	r3, #3
 800cf26:	73fb      	strb	r3, [r7, #15]
 800cf28:	e017      	b.n	800cf5a <RTC_ExitInitMode+0x6e>
    }
  }
  else /* WA 2.9.6 Calendar initialization may fail in case of consecutive INIT mode entry */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800cf2a:	4b0e      	ldr	r3, [pc, #56]	@ (800cf64 <RTC_ExitInitMode+0x78>)
 800cf2c:	689b      	ldr	r3, [r3, #8]
 800cf2e:	4a0d      	ldr	r2, [pc, #52]	@ (800cf64 <RTC_ExitInitMode+0x78>)
 800cf30:	f023 0320 	bic.w	r3, r3, #32
 800cf34:	6093      	str	r3, [r2, #8]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800cf36:	6878      	ldr	r0, [r7, #4]
 800cf38:	f7ff ff80 	bl	800ce3c <HAL_RTC_WaitForSynchro>
 800cf3c:	4603      	mov	r3, r0
 800cf3e:	2b00      	cmp	r3, #0
 800cf40:	d005      	beq.n	800cf4e <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800cf42:	687b      	ldr	r3, [r7, #4]
 800cf44:	2203      	movs	r2, #3
 800cf46:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
      status = HAL_TIMEOUT;
 800cf4a:	2303      	movs	r3, #3
 800cf4c:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800cf4e:	4b05      	ldr	r3, [pc, #20]	@ (800cf64 <RTC_ExitInitMode+0x78>)
 800cf50:	689b      	ldr	r3, [r3, #8]
 800cf52:	4a04      	ldr	r2, [pc, #16]	@ (800cf64 <RTC_ExitInitMode+0x78>)
 800cf54:	f043 0320 	orr.w	r3, r3, #32
 800cf58:	6093      	str	r3, [r2, #8]
  }

  return status;
 800cf5a:	7bfb      	ldrb	r3, [r7, #15]
}
 800cf5c:	4618      	mov	r0, r3
 800cf5e:	3710      	adds	r7, #16
 800cf60:	46bd      	mov	sp, r7
 800cf62:	bd80      	pop	{r7, pc}
 800cf64:	40002800 	.word	0x40002800

0800cf68 <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 800cf68:	b480      	push	{r7}
 800cf6a:	b085      	sub	sp, #20
 800cf6c:	af00      	add	r7, sp, #0
 800cf6e:	4603      	mov	r3, r0
 800cf70:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 800cf72:	2300      	movs	r3, #0
 800cf74:	60fb      	str	r3, [r7, #12]
  uint8_t temp = Value;
 800cf76:	79fb      	ldrb	r3, [r7, #7]
 800cf78:	72fb      	strb	r3, [r7, #11]

  while (temp >= 10U)
 800cf7a:	e005      	b.n	800cf88 <RTC_ByteToBcd2+0x20>
  {
    bcdhigh++;
 800cf7c:	68fb      	ldr	r3, [r7, #12]
 800cf7e:	3301      	adds	r3, #1
 800cf80:	60fb      	str	r3, [r7, #12]
    temp -= 10U;
 800cf82:	7afb      	ldrb	r3, [r7, #11]
 800cf84:	3b0a      	subs	r3, #10
 800cf86:	72fb      	strb	r3, [r7, #11]
  while (temp >= 10U)
 800cf88:	7afb      	ldrb	r3, [r7, #11]
 800cf8a:	2b09      	cmp	r3, #9
 800cf8c:	d8f6      	bhi.n	800cf7c <RTC_ByteToBcd2+0x14>
  }

  return ((uint8_t)(bcdhigh << 4U) | temp);
 800cf8e:	68fb      	ldr	r3, [r7, #12]
 800cf90:	b2db      	uxtb	r3, r3
 800cf92:	011b      	lsls	r3, r3, #4
 800cf94:	b2da      	uxtb	r2, r3
 800cf96:	7afb      	ldrb	r3, [r7, #11]
 800cf98:	4313      	orrs	r3, r2
 800cf9a:	b2db      	uxtb	r3, r3
}
 800cf9c:	4618      	mov	r0, r3
 800cf9e:	3714      	adds	r7, #20
 800cfa0:	46bd      	mov	sp, r7
 800cfa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfa6:	4770      	bx	lr

0800cfa8 <RTC_Bcd2ToByte>:
  * @brief  Convert from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 800cfa8:	b480      	push	{r7}
 800cfaa:	b085      	sub	sp, #20
 800cfac:	af00      	add	r7, sp, #0
 800cfae:	4603      	mov	r3, r0
 800cfb0:	71fb      	strb	r3, [r7, #7]
  uint8_t tmp;
  tmp = ((Value & 0xF0U) >> 4U) * 10U;
 800cfb2:	79fb      	ldrb	r3, [r7, #7]
 800cfb4:	091b      	lsrs	r3, r3, #4
 800cfb6:	b2db      	uxtb	r3, r3
 800cfb8:	461a      	mov	r2, r3
 800cfba:	0092      	lsls	r2, r2, #2
 800cfbc:	4413      	add	r3, r2
 800cfbe:	005b      	lsls	r3, r3, #1
 800cfc0:	73fb      	strb	r3, [r7, #15]
  return (tmp + (Value & 0x0FU));
 800cfc2:	79fb      	ldrb	r3, [r7, #7]
 800cfc4:	f003 030f 	and.w	r3, r3, #15
 800cfc8:	b2da      	uxtb	r2, r3
 800cfca:	7bfb      	ldrb	r3, [r7, #15]
 800cfcc:	4413      	add	r3, r2
 800cfce:	b2db      	uxtb	r3, r3
}
 800cfd0:	4618      	mov	r0, r3
 800cfd2:	3714      	adds	r7, #20
 800cfd4:	46bd      	mov	sp, r7
 800cfd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfda:	4770      	bx	lr

0800cfdc <HAL_RTCEx_AlarmBEventCallback>:
  * @brief  Alarm B callback.
  * @param  hrtc RTC handle
  * @retval None
  */
__weak void HAL_RTCEx_AlarmBEventCallback(RTC_HandleTypeDef *hrtc)
{
 800cfdc:	b480      	push	{r7}
 800cfde:	b083      	sub	sp, #12
 800cfe0:	af00      	add	r7, sp, #0
 800cfe2:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RTCEx_AlarmBEventCallback could be implemented in the user file
   */
}
 800cfe4:	bf00      	nop
 800cfe6:	370c      	adds	r7, #12
 800cfe8:	46bd      	mov	sp, r7
 800cfea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfee:	4770      	bx	lr

0800cff0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800cff0:	b580      	push	{r7, lr}
 800cff2:	b084      	sub	sp, #16
 800cff4:	af00      	add	r7, sp, #0
 800cff6:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800cff8:	687b      	ldr	r3, [r7, #4]
 800cffa:	2b00      	cmp	r3, #0
 800cffc:	d101      	bne.n	800d002 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800cffe:	2301      	movs	r3, #1
 800d000:	e095      	b.n	800d12e <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800d002:	687b      	ldr	r3, [r7, #4]
 800d004:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d006:	2b00      	cmp	r3, #0
 800d008:	d108      	bne.n	800d01c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800d00a:	687b      	ldr	r3, [r7, #4]
 800d00c:	685b      	ldr	r3, [r3, #4]
 800d00e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800d012:	d009      	beq.n	800d028 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800d014:	687b      	ldr	r3, [r7, #4]
 800d016:	2200      	movs	r2, #0
 800d018:	61da      	str	r2, [r3, #28]
 800d01a:	e005      	b.n	800d028 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800d01c:	687b      	ldr	r3, [r7, #4]
 800d01e:	2200      	movs	r2, #0
 800d020:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800d022:	687b      	ldr	r3, [r7, #4]
 800d024:	2200      	movs	r2, #0
 800d026:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800d028:	687b      	ldr	r3, [r7, #4]
 800d02a:	2200      	movs	r2, #0
 800d02c:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800d02e:	687b      	ldr	r3, [r7, #4]
 800d030:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800d034:	b2db      	uxtb	r3, r3
 800d036:	2b00      	cmp	r3, #0
 800d038:	d106      	bne.n	800d048 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800d03a:	687b      	ldr	r3, [r7, #4]
 800d03c:	2200      	movs	r2, #0
 800d03e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800d042:	6878      	ldr	r0, [r7, #4]
 800d044:	f7f7 f888 	bl	8004158 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800d048:	687b      	ldr	r3, [r7, #4]
 800d04a:	2202      	movs	r2, #2
 800d04c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800d050:	687b      	ldr	r3, [r7, #4]
 800d052:	681b      	ldr	r3, [r3, #0]
 800d054:	681a      	ldr	r2, [r3, #0]
 800d056:	687b      	ldr	r3, [r7, #4]
 800d058:	681b      	ldr	r3, [r3, #0]
 800d05a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800d05e:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800d060:	687b      	ldr	r3, [r7, #4]
 800d062:	68db      	ldr	r3, [r3, #12]
 800d064:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800d068:	d902      	bls.n	800d070 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800d06a:	2300      	movs	r3, #0
 800d06c:	60fb      	str	r3, [r7, #12]
 800d06e:	e002      	b.n	800d076 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800d070:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800d074:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800d076:	687b      	ldr	r3, [r7, #4]
 800d078:	68db      	ldr	r3, [r3, #12]
 800d07a:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 800d07e:	d007      	beq.n	800d090 <HAL_SPI_Init+0xa0>
 800d080:	687b      	ldr	r3, [r7, #4]
 800d082:	68db      	ldr	r3, [r3, #12]
 800d084:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800d088:	d002      	beq.n	800d090 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800d08a:	687b      	ldr	r3, [r7, #4]
 800d08c:	2200      	movs	r2, #0
 800d08e:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800d090:	687b      	ldr	r3, [r7, #4]
 800d092:	685b      	ldr	r3, [r3, #4]
 800d094:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 800d098:	687b      	ldr	r3, [r7, #4]
 800d09a:	689b      	ldr	r3, [r3, #8]
 800d09c:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 800d0a0:	431a      	orrs	r2, r3
 800d0a2:	687b      	ldr	r3, [r7, #4]
 800d0a4:	691b      	ldr	r3, [r3, #16]
 800d0a6:	f003 0302 	and.w	r3, r3, #2
 800d0aa:	431a      	orrs	r2, r3
 800d0ac:	687b      	ldr	r3, [r7, #4]
 800d0ae:	695b      	ldr	r3, [r3, #20]
 800d0b0:	f003 0301 	and.w	r3, r3, #1
 800d0b4:	431a      	orrs	r2, r3
 800d0b6:	687b      	ldr	r3, [r7, #4]
 800d0b8:	699b      	ldr	r3, [r3, #24]
 800d0ba:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800d0be:	431a      	orrs	r2, r3
 800d0c0:	687b      	ldr	r3, [r7, #4]
 800d0c2:	69db      	ldr	r3, [r3, #28]
 800d0c4:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800d0c8:	431a      	orrs	r2, r3
 800d0ca:	687b      	ldr	r3, [r7, #4]
 800d0cc:	6a1b      	ldr	r3, [r3, #32]
 800d0ce:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800d0d2:	ea42 0103 	orr.w	r1, r2, r3
 800d0d6:	687b      	ldr	r3, [r7, #4]
 800d0d8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d0da:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 800d0de:	687b      	ldr	r3, [r7, #4]
 800d0e0:	681b      	ldr	r3, [r3, #0]
 800d0e2:	430a      	orrs	r2, r1
 800d0e4:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800d0e6:	687b      	ldr	r3, [r7, #4]
 800d0e8:	699b      	ldr	r3, [r3, #24]
 800d0ea:	0c1b      	lsrs	r3, r3, #16
 800d0ec:	f003 0204 	and.w	r2, r3, #4
 800d0f0:	687b      	ldr	r3, [r7, #4]
 800d0f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d0f4:	f003 0310 	and.w	r3, r3, #16
 800d0f8:	431a      	orrs	r2, r3
 800d0fa:	687b      	ldr	r3, [r7, #4]
 800d0fc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d0fe:	f003 0308 	and.w	r3, r3, #8
 800d102:	431a      	orrs	r2, r3
 800d104:	687b      	ldr	r3, [r7, #4]
 800d106:	68db      	ldr	r3, [r3, #12]
 800d108:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 800d10c:	ea42 0103 	orr.w	r1, r2, r3
 800d110:	68fb      	ldr	r3, [r7, #12]
 800d112:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 800d116:	687b      	ldr	r3, [r7, #4]
 800d118:	681b      	ldr	r3, [r3, #0]
 800d11a:	430a      	orrs	r2, r1
 800d11c:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800d11e:	687b      	ldr	r3, [r7, #4]
 800d120:	2200      	movs	r2, #0
 800d122:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800d124:	687b      	ldr	r3, [r7, #4]
 800d126:	2201      	movs	r2, #1
 800d128:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 800d12c:	2300      	movs	r3, #0
}
 800d12e:	4618      	mov	r0, r3
 800d130:	3710      	adds	r7, #16
 800d132:	46bd      	mov	sp, r7
 800d134:	bd80      	pop	{r7, pc}

0800d136 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800d136:	b580      	push	{r7, lr}
 800d138:	b088      	sub	sp, #32
 800d13a:	af00      	add	r7, sp, #0
 800d13c:	60f8      	str	r0, [r7, #12]
 800d13e:	60b9      	str	r1, [r7, #8]
 800d140:	603b      	str	r3, [r7, #0]
 800d142:	4613      	mov	r3, r2
 800d144:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800d146:	f7fa fbbf 	bl	80078c8 <HAL_GetTick>
 800d14a:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 800d14c:	88fb      	ldrh	r3, [r7, #6]
 800d14e:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 800d150:	68fb      	ldr	r3, [r7, #12]
 800d152:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800d156:	b2db      	uxtb	r3, r3
 800d158:	2b01      	cmp	r3, #1
 800d15a:	d001      	beq.n	800d160 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 800d15c:	2302      	movs	r3, #2
 800d15e:	e15c      	b.n	800d41a <HAL_SPI_Transmit+0x2e4>
  }

  if ((pData == NULL) || (Size == 0U))
 800d160:	68bb      	ldr	r3, [r7, #8]
 800d162:	2b00      	cmp	r3, #0
 800d164:	d002      	beq.n	800d16c <HAL_SPI_Transmit+0x36>
 800d166:	88fb      	ldrh	r3, [r7, #6]
 800d168:	2b00      	cmp	r3, #0
 800d16a:	d101      	bne.n	800d170 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 800d16c:	2301      	movs	r3, #1
 800d16e:	e154      	b.n	800d41a <HAL_SPI_Transmit+0x2e4>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800d170:	68fb      	ldr	r3, [r7, #12]
 800d172:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 800d176:	2b01      	cmp	r3, #1
 800d178:	d101      	bne.n	800d17e <HAL_SPI_Transmit+0x48>
 800d17a:	2302      	movs	r3, #2
 800d17c:	e14d      	b.n	800d41a <HAL_SPI_Transmit+0x2e4>
 800d17e:	68fb      	ldr	r3, [r7, #12]
 800d180:	2201      	movs	r2, #1
 800d182:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800d186:	68fb      	ldr	r3, [r7, #12]
 800d188:	2203      	movs	r2, #3
 800d18a:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800d18e:	68fb      	ldr	r3, [r7, #12]
 800d190:	2200      	movs	r2, #0
 800d192:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 800d194:	68fb      	ldr	r3, [r7, #12]
 800d196:	68ba      	ldr	r2, [r7, #8]
 800d198:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 800d19a:	68fb      	ldr	r3, [r7, #12]
 800d19c:	88fa      	ldrh	r2, [r7, #6]
 800d19e:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 800d1a0:	68fb      	ldr	r3, [r7, #12]
 800d1a2:	88fa      	ldrh	r2, [r7, #6]
 800d1a4:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800d1a6:	68fb      	ldr	r3, [r7, #12]
 800d1a8:	2200      	movs	r2, #0
 800d1aa:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 800d1ac:	68fb      	ldr	r3, [r7, #12]
 800d1ae:	2200      	movs	r2, #0
 800d1b0:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = 0U;
 800d1b4:	68fb      	ldr	r3, [r7, #12]
 800d1b6:	2200      	movs	r2, #0
 800d1b8:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxISR       = NULL;
 800d1bc:	68fb      	ldr	r3, [r7, #12]
 800d1be:	2200      	movs	r2, #0
 800d1c0:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->RxISR       = NULL;
 800d1c2:	68fb      	ldr	r3, [r7, #12]
 800d1c4:	2200      	movs	r2, #0
 800d1c6:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800d1c8:	68fb      	ldr	r3, [r7, #12]
 800d1ca:	689b      	ldr	r3, [r3, #8]
 800d1cc:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800d1d0:	d10f      	bne.n	800d1f2 <HAL_SPI_Transmit+0xbc>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800d1d2:	68fb      	ldr	r3, [r7, #12]
 800d1d4:	681b      	ldr	r3, [r3, #0]
 800d1d6:	681a      	ldr	r2, [r3, #0]
 800d1d8:	68fb      	ldr	r3, [r7, #12]
 800d1da:	681b      	ldr	r3, [r3, #0]
 800d1dc:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800d1e0:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800d1e2:	68fb      	ldr	r3, [r7, #12]
 800d1e4:	681b      	ldr	r3, [r3, #0]
 800d1e6:	681a      	ldr	r2, [r3, #0]
 800d1e8:	68fb      	ldr	r3, [r7, #12]
 800d1ea:	681b      	ldr	r3, [r3, #0]
 800d1ec:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800d1f0:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800d1f2:	68fb      	ldr	r3, [r7, #12]
 800d1f4:	681b      	ldr	r3, [r3, #0]
 800d1f6:	681b      	ldr	r3, [r3, #0]
 800d1f8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d1fc:	2b40      	cmp	r3, #64	@ 0x40
 800d1fe:	d007      	beq.n	800d210 <HAL_SPI_Transmit+0xda>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800d200:	68fb      	ldr	r3, [r7, #12]
 800d202:	681b      	ldr	r3, [r3, #0]
 800d204:	681a      	ldr	r2, [r3, #0]
 800d206:	68fb      	ldr	r3, [r7, #12]
 800d208:	681b      	ldr	r3, [r3, #0]
 800d20a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800d20e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800d210:	68fb      	ldr	r3, [r7, #12]
 800d212:	68db      	ldr	r3, [r3, #12]
 800d214:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800d218:	d952      	bls.n	800d2c0 <HAL_SPI_Transmit+0x18a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800d21a:	68fb      	ldr	r3, [r7, #12]
 800d21c:	685b      	ldr	r3, [r3, #4]
 800d21e:	2b00      	cmp	r3, #0
 800d220:	d002      	beq.n	800d228 <HAL_SPI_Transmit+0xf2>
 800d222:	8b7b      	ldrh	r3, [r7, #26]
 800d224:	2b01      	cmp	r3, #1
 800d226:	d145      	bne.n	800d2b4 <HAL_SPI_Transmit+0x17e>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800d228:	68fb      	ldr	r3, [r7, #12]
 800d22a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d22c:	881a      	ldrh	r2, [r3, #0]
 800d22e:	68fb      	ldr	r3, [r7, #12]
 800d230:	681b      	ldr	r3, [r3, #0]
 800d232:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800d234:	68fb      	ldr	r3, [r7, #12]
 800d236:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d238:	1c9a      	adds	r2, r3, #2
 800d23a:	68fb      	ldr	r3, [r7, #12]
 800d23c:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 800d23e:	68fb      	ldr	r3, [r7, #12]
 800d240:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800d242:	b29b      	uxth	r3, r3
 800d244:	3b01      	subs	r3, #1
 800d246:	b29a      	uxth	r2, r3
 800d248:	68fb      	ldr	r3, [r7, #12]
 800d24a:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800d24c:	e032      	b.n	800d2b4 <HAL_SPI_Transmit+0x17e>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800d24e:	68fb      	ldr	r3, [r7, #12]
 800d250:	681b      	ldr	r3, [r3, #0]
 800d252:	689b      	ldr	r3, [r3, #8]
 800d254:	f003 0302 	and.w	r3, r3, #2
 800d258:	2b02      	cmp	r3, #2
 800d25a:	d112      	bne.n	800d282 <HAL_SPI_Transmit+0x14c>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800d25c:	68fb      	ldr	r3, [r7, #12]
 800d25e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d260:	881a      	ldrh	r2, [r3, #0]
 800d262:	68fb      	ldr	r3, [r7, #12]
 800d264:	681b      	ldr	r3, [r3, #0]
 800d266:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800d268:	68fb      	ldr	r3, [r7, #12]
 800d26a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d26c:	1c9a      	adds	r2, r3, #2
 800d26e:	68fb      	ldr	r3, [r7, #12]
 800d270:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 800d272:	68fb      	ldr	r3, [r7, #12]
 800d274:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800d276:	b29b      	uxth	r3, r3
 800d278:	3b01      	subs	r3, #1
 800d27a:	b29a      	uxth	r2, r3
 800d27c:	68fb      	ldr	r3, [r7, #12]
 800d27e:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800d280:	e018      	b.n	800d2b4 <HAL_SPI_Transmit+0x17e>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800d282:	f7fa fb21 	bl	80078c8 <HAL_GetTick>
 800d286:	4602      	mov	r2, r0
 800d288:	69fb      	ldr	r3, [r7, #28]
 800d28a:	1ad3      	subs	r3, r2, r3
 800d28c:	683a      	ldr	r2, [r7, #0]
 800d28e:	429a      	cmp	r2, r3
 800d290:	d803      	bhi.n	800d29a <HAL_SPI_Transmit+0x164>
 800d292:	683b      	ldr	r3, [r7, #0]
 800d294:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d298:	d102      	bne.n	800d2a0 <HAL_SPI_Transmit+0x16a>
 800d29a:	683b      	ldr	r3, [r7, #0]
 800d29c:	2b00      	cmp	r3, #0
 800d29e:	d109      	bne.n	800d2b4 <HAL_SPI_Transmit+0x17e>
        {
          hspi->State = HAL_SPI_STATE_READY;
 800d2a0:	68fb      	ldr	r3, [r7, #12]
 800d2a2:	2201      	movs	r2, #1
 800d2a4:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 800d2a8:	68fb      	ldr	r3, [r7, #12]
 800d2aa:	2200      	movs	r2, #0
 800d2ac:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 800d2b0:	2303      	movs	r3, #3
 800d2b2:	e0b2      	b.n	800d41a <HAL_SPI_Transmit+0x2e4>
    while (hspi->TxXferCount > 0U)
 800d2b4:	68fb      	ldr	r3, [r7, #12]
 800d2b6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800d2b8:	b29b      	uxth	r3, r3
 800d2ba:	2b00      	cmp	r3, #0
 800d2bc:	d1c7      	bne.n	800d24e <HAL_SPI_Transmit+0x118>
 800d2be:	e083      	b.n	800d3c8 <HAL_SPI_Transmit+0x292>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800d2c0:	68fb      	ldr	r3, [r7, #12]
 800d2c2:	685b      	ldr	r3, [r3, #4]
 800d2c4:	2b00      	cmp	r3, #0
 800d2c6:	d002      	beq.n	800d2ce <HAL_SPI_Transmit+0x198>
 800d2c8:	8b7b      	ldrh	r3, [r7, #26]
 800d2ca:	2b01      	cmp	r3, #1
 800d2cc:	d177      	bne.n	800d3be <HAL_SPI_Transmit+0x288>
    {
      if (hspi->TxXferCount > 1U)
 800d2ce:	68fb      	ldr	r3, [r7, #12]
 800d2d0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800d2d2:	b29b      	uxth	r3, r3
 800d2d4:	2b01      	cmp	r3, #1
 800d2d6:	d912      	bls.n	800d2fe <HAL_SPI_Transmit+0x1c8>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800d2d8:	68fb      	ldr	r3, [r7, #12]
 800d2da:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d2dc:	881a      	ldrh	r2, [r3, #0]
 800d2de:	68fb      	ldr	r3, [r7, #12]
 800d2e0:	681b      	ldr	r3, [r3, #0]
 800d2e2:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800d2e4:	68fb      	ldr	r3, [r7, #12]
 800d2e6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d2e8:	1c9a      	adds	r2, r3, #2
 800d2ea:	68fb      	ldr	r3, [r7, #12]
 800d2ec:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 800d2ee:	68fb      	ldr	r3, [r7, #12]
 800d2f0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800d2f2:	b29b      	uxth	r3, r3
 800d2f4:	3b02      	subs	r3, #2
 800d2f6:	b29a      	uxth	r2, r3
 800d2f8:	68fb      	ldr	r3, [r7, #12]
 800d2fa:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800d2fc:	e05f      	b.n	800d3be <HAL_SPI_Transmit+0x288>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800d2fe:	68fb      	ldr	r3, [r7, #12]
 800d300:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800d302:	68fb      	ldr	r3, [r7, #12]
 800d304:	681b      	ldr	r3, [r3, #0]
 800d306:	330c      	adds	r3, #12
 800d308:	7812      	ldrb	r2, [r2, #0]
 800d30a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 800d30c:	68fb      	ldr	r3, [r7, #12]
 800d30e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d310:	1c5a      	adds	r2, r3, #1
 800d312:	68fb      	ldr	r3, [r7, #12]
 800d314:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 800d316:	68fb      	ldr	r3, [r7, #12]
 800d318:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800d31a:	b29b      	uxth	r3, r3
 800d31c:	3b01      	subs	r3, #1
 800d31e:	b29a      	uxth	r2, r3
 800d320:	68fb      	ldr	r3, [r7, #12]
 800d322:	87da      	strh	r2, [r3, #62]	@ 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 800d324:	e04b      	b.n	800d3be <HAL_SPI_Transmit+0x288>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800d326:	68fb      	ldr	r3, [r7, #12]
 800d328:	681b      	ldr	r3, [r3, #0]
 800d32a:	689b      	ldr	r3, [r3, #8]
 800d32c:	f003 0302 	and.w	r3, r3, #2
 800d330:	2b02      	cmp	r3, #2
 800d332:	d12b      	bne.n	800d38c <HAL_SPI_Transmit+0x256>
      {
        if (hspi->TxXferCount > 1U)
 800d334:	68fb      	ldr	r3, [r7, #12]
 800d336:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800d338:	b29b      	uxth	r3, r3
 800d33a:	2b01      	cmp	r3, #1
 800d33c:	d912      	bls.n	800d364 <HAL_SPI_Transmit+0x22e>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800d33e:	68fb      	ldr	r3, [r7, #12]
 800d340:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d342:	881a      	ldrh	r2, [r3, #0]
 800d344:	68fb      	ldr	r3, [r7, #12]
 800d346:	681b      	ldr	r3, [r3, #0]
 800d348:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800d34a:	68fb      	ldr	r3, [r7, #12]
 800d34c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d34e:	1c9a      	adds	r2, r3, #2
 800d350:	68fb      	ldr	r3, [r7, #12]
 800d352:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 800d354:	68fb      	ldr	r3, [r7, #12]
 800d356:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800d358:	b29b      	uxth	r3, r3
 800d35a:	3b02      	subs	r3, #2
 800d35c:	b29a      	uxth	r2, r3
 800d35e:	68fb      	ldr	r3, [r7, #12]
 800d360:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800d362:	e02c      	b.n	800d3be <HAL_SPI_Transmit+0x288>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800d364:	68fb      	ldr	r3, [r7, #12]
 800d366:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800d368:	68fb      	ldr	r3, [r7, #12]
 800d36a:	681b      	ldr	r3, [r3, #0]
 800d36c:	330c      	adds	r3, #12
 800d36e:	7812      	ldrb	r2, [r2, #0]
 800d370:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 800d372:	68fb      	ldr	r3, [r7, #12]
 800d374:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d376:	1c5a      	adds	r2, r3, #1
 800d378:	68fb      	ldr	r3, [r7, #12]
 800d37a:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 800d37c:	68fb      	ldr	r3, [r7, #12]
 800d37e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800d380:	b29b      	uxth	r3, r3
 800d382:	3b01      	subs	r3, #1
 800d384:	b29a      	uxth	r2, r3
 800d386:	68fb      	ldr	r3, [r7, #12]
 800d388:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800d38a:	e018      	b.n	800d3be <HAL_SPI_Transmit+0x288>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800d38c:	f7fa fa9c 	bl	80078c8 <HAL_GetTick>
 800d390:	4602      	mov	r2, r0
 800d392:	69fb      	ldr	r3, [r7, #28]
 800d394:	1ad3      	subs	r3, r2, r3
 800d396:	683a      	ldr	r2, [r7, #0]
 800d398:	429a      	cmp	r2, r3
 800d39a:	d803      	bhi.n	800d3a4 <HAL_SPI_Transmit+0x26e>
 800d39c:	683b      	ldr	r3, [r7, #0]
 800d39e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d3a2:	d102      	bne.n	800d3aa <HAL_SPI_Transmit+0x274>
 800d3a4:	683b      	ldr	r3, [r7, #0]
 800d3a6:	2b00      	cmp	r3, #0
 800d3a8:	d109      	bne.n	800d3be <HAL_SPI_Transmit+0x288>
        {
          hspi->State = HAL_SPI_STATE_READY;
 800d3aa:	68fb      	ldr	r3, [r7, #12]
 800d3ac:	2201      	movs	r2, #1
 800d3ae:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 800d3b2:	68fb      	ldr	r3, [r7, #12]
 800d3b4:	2200      	movs	r2, #0
 800d3b6:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 800d3ba:	2303      	movs	r3, #3
 800d3bc:	e02d      	b.n	800d41a <HAL_SPI_Transmit+0x2e4>
    while (hspi->TxXferCount > 0U)
 800d3be:	68fb      	ldr	r3, [r7, #12]
 800d3c0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800d3c2:	b29b      	uxth	r3, r3
 800d3c4:	2b00      	cmp	r3, #0
 800d3c6:	d1ae      	bne.n	800d326 <HAL_SPI_Transmit+0x1f0>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800d3c8:	69fa      	ldr	r2, [r7, #28]
 800d3ca:	6839      	ldr	r1, [r7, #0]
 800d3cc:	68f8      	ldr	r0, [r7, #12]
 800d3ce:	f000 fcf5 	bl	800ddbc <SPI_EndRxTxTransaction>
 800d3d2:	4603      	mov	r3, r0
 800d3d4:	2b00      	cmp	r3, #0
 800d3d6:	d002      	beq.n	800d3de <HAL_SPI_Transmit+0x2a8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800d3d8:	68fb      	ldr	r3, [r7, #12]
 800d3da:	2220      	movs	r2, #32
 800d3dc:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800d3de:	68fb      	ldr	r3, [r7, #12]
 800d3e0:	689b      	ldr	r3, [r3, #8]
 800d3e2:	2b00      	cmp	r3, #0
 800d3e4:	d10a      	bne.n	800d3fc <HAL_SPI_Transmit+0x2c6>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800d3e6:	2300      	movs	r3, #0
 800d3e8:	617b      	str	r3, [r7, #20]
 800d3ea:	68fb      	ldr	r3, [r7, #12]
 800d3ec:	681b      	ldr	r3, [r3, #0]
 800d3ee:	68db      	ldr	r3, [r3, #12]
 800d3f0:	617b      	str	r3, [r7, #20]
 800d3f2:	68fb      	ldr	r3, [r7, #12]
 800d3f4:	681b      	ldr	r3, [r3, #0]
 800d3f6:	689b      	ldr	r3, [r3, #8]
 800d3f8:	617b      	str	r3, [r7, #20]
 800d3fa:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 800d3fc:	68fb      	ldr	r3, [r7, #12]
 800d3fe:	2201      	movs	r2, #1
 800d400:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800d404:	68fb      	ldr	r3, [r7, #12]
 800d406:	2200      	movs	r2, #0
 800d408:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800d40c:	68fb      	ldr	r3, [r7, #12]
 800d40e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800d410:	2b00      	cmp	r3, #0
 800d412:	d001      	beq.n	800d418 <HAL_SPI_Transmit+0x2e2>
  {
    return HAL_ERROR;
 800d414:	2301      	movs	r3, #1
 800d416:	e000      	b.n	800d41a <HAL_SPI_Transmit+0x2e4>
  }
  else
  {
    return HAL_OK;
 800d418:	2300      	movs	r3, #0
  }
}
 800d41a:	4618      	mov	r0, r3
 800d41c:	3720      	adds	r7, #32
 800d41e:	46bd      	mov	sp, r7
 800d420:	bd80      	pop	{r7, pc}

0800d422 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800d422:	b580      	push	{r7, lr}
 800d424:	b088      	sub	sp, #32
 800d426:	af02      	add	r7, sp, #8
 800d428:	60f8      	str	r0, [r7, #12]
 800d42a:	60b9      	str	r1, [r7, #8]
 800d42c:	603b      	str	r3, [r7, #0]
 800d42e:	4613      	mov	r3, r2
 800d430:	80fb      	strh	r3, [r7, #6]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;

  if (hspi->State != HAL_SPI_STATE_READY)
 800d432:	68fb      	ldr	r3, [r7, #12]
 800d434:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800d438:	b2db      	uxtb	r3, r3
 800d43a:	2b01      	cmp	r3, #1
 800d43c:	d001      	beq.n	800d442 <HAL_SPI_Receive+0x20>
  {
    return HAL_BUSY;
 800d43e:	2302      	movs	r3, #2
 800d440:	e123      	b.n	800d68a <HAL_SPI_Receive+0x268>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800d442:	68fb      	ldr	r3, [r7, #12]
 800d444:	685b      	ldr	r3, [r3, #4]
 800d446:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800d44a:	d112      	bne.n	800d472 <HAL_SPI_Receive+0x50>
 800d44c:	68fb      	ldr	r3, [r7, #12]
 800d44e:	689b      	ldr	r3, [r3, #8]
 800d450:	2b00      	cmp	r3, #0
 800d452:	d10e      	bne.n	800d472 <HAL_SPI_Receive+0x50>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800d454:	68fb      	ldr	r3, [r7, #12]
 800d456:	2204      	movs	r2, #4
 800d458:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 800d45c:	88fa      	ldrh	r2, [r7, #6]
 800d45e:	683b      	ldr	r3, [r7, #0]
 800d460:	9300      	str	r3, [sp, #0]
 800d462:	4613      	mov	r3, r2
 800d464:	68ba      	ldr	r2, [r7, #8]
 800d466:	68b9      	ldr	r1, [r7, #8]
 800d468:	68f8      	ldr	r0, [r7, #12]
 800d46a:	f000 f912 	bl	800d692 <HAL_SPI_TransmitReceive>
 800d46e:	4603      	mov	r3, r0
 800d470:	e10b      	b.n	800d68a <HAL_SPI_Receive+0x268>
  }

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800d472:	f7fa fa29 	bl	80078c8 <HAL_GetTick>
 800d476:	6178      	str	r0, [r7, #20]

  if ((pData == NULL) || (Size == 0U))
 800d478:	68bb      	ldr	r3, [r7, #8]
 800d47a:	2b00      	cmp	r3, #0
 800d47c:	d002      	beq.n	800d484 <HAL_SPI_Receive+0x62>
 800d47e:	88fb      	ldrh	r3, [r7, #6]
 800d480:	2b00      	cmp	r3, #0
 800d482:	d101      	bne.n	800d488 <HAL_SPI_Receive+0x66>
  {
    return HAL_ERROR;
 800d484:	2301      	movs	r3, #1
 800d486:	e100      	b.n	800d68a <HAL_SPI_Receive+0x268>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800d488:	68fb      	ldr	r3, [r7, #12]
 800d48a:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 800d48e:	2b01      	cmp	r3, #1
 800d490:	d101      	bne.n	800d496 <HAL_SPI_Receive+0x74>
 800d492:	2302      	movs	r3, #2
 800d494:	e0f9      	b.n	800d68a <HAL_SPI_Receive+0x268>
 800d496:	68fb      	ldr	r3, [r7, #12]
 800d498:	2201      	movs	r2, #1
 800d49a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800d49e:	68fb      	ldr	r3, [r7, #12]
 800d4a0:	2204      	movs	r2, #4
 800d4a2:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800d4a6:	68fb      	ldr	r3, [r7, #12]
 800d4a8:	2200      	movs	r2, #0
 800d4aa:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800d4ac:	68fb      	ldr	r3, [r7, #12]
 800d4ae:	68ba      	ldr	r2, [r7, #8]
 800d4b0:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = Size;
 800d4b2:	68fb      	ldr	r3, [r7, #12]
 800d4b4:	88fa      	ldrh	r2, [r7, #6]
 800d4b6:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = Size;
 800d4ba:	68fb      	ldr	r3, [r7, #12]
 800d4bc:	88fa      	ldrh	r2, [r7, #6]
 800d4be:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 800d4c2:	68fb      	ldr	r3, [r7, #12]
 800d4c4:	2200      	movs	r2, #0
 800d4c6:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = 0U;
 800d4c8:	68fb      	ldr	r3, [r7, #12]
 800d4ca:	2200      	movs	r2, #0
 800d4cc:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = 0U;
 800d4ce:	68fb      	ldr	r3, [r7, #12]
 800d4d0:	2200      	movs	r2, #0
 800d4d2:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxISR       = NULL;
 800d4d4:	68fb      	ldr	r3, [r7, #12]
 800d4d6:	2200      	movs	r2, #0
 800d4d8:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 800d4da:	68fb      	ldr	r3, [r7, #12]
 800d4dc:	2200      	movs	r2, #0
 800d4de:	651a      	str	r2, [r3, #80]	@ 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800d4e0:	68fb      	ldr	r3, [r7, #12]
 800d4e2:	68db      	ldr	r3, [r3, #12]
 800d4e4:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800d4e8:	d908      	bls.n	800d4fc <HAL_SPI_Receive+0xda>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800d4ea:	68fb      	ldr	r3, [r7, #12]
 800d4ec:	681b      	ldr	r3, [r3, #0]
 800d4ee:	685a      	ldr	r2, [r3, #4]
 800d4f0:	68fb      	ldr	r3, [r7, #12]
 800d4f2:	681b      	ldr	r3, [r3, #0]
 800d4f4:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800d4f8:	605a      	str	r2, [r3, #4]
 800d4fa:	e007      	b.n	800d50c <HAL_SPI_Receive+0xea>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800d4fc:	68fb      	ldr	r3, [r7, #12]
 800d4fe:	681b      	ldr	r3, [r3, #0]
 800d500:	685a      	ldr	r2, [r3, #4]
 800d502:	68fb      	ldr	r3, [r7, #12]
 800d504:	681b      	ldr	r3, [r3, #0]
 800d506:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800d50a:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800d50c:	68fb      	ldr	r3, [r7, #12]
 800d50e:	689b      	ldr	r3, [r3, #8]
 800d510:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800d514:	d10f      	bne.n	800d536 <HAL_SPI_Receive+0x114>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800d516:	68fb      	ldr	r3, [r7, #12]
 800d518:	681b      	ldr	r3, [r3, #0]
 800d51a:	681a      	ldr	r2, [r3, #0]
 800d51c:	68fb      	ldr	r3, [r7, #12]
 800d51e:	681b      	ldr	r3, [r3, #0]
 800d520:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800d524:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 800d526:	68fb      	ldr	r3, [r7, #12]
 800d528:	681b      	ldr	r3, [r3, #0]
 800d52a:	681a      	ldr	r2, [r3, #0]
 800d52c:	68fb      	ldr	r3, [r7, #12]
 800d52e:	681b      	ldr	r3, [r3, #0]
 800d530:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 800d534:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800d536:	68fb      	ldr	r3, [r7, #12]
 800d538:	681b      	ldr	r3, [r3, #0]
 800d53a:	681b      	ldr	r3, [r3, #0]
 800d53c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d540:	2b40      	cmp	r3, #64	@ 0x40
 800d542:	d007      	beq.n	800d554 <HAL_SPI_Receive+0x132>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800d544:	68fb      	ldr	r3, [r7, #12]
 800d546:	681b      	ldr	r3, [r3, #0]
 800d548:	681a      	ldr	r2, [r3, #0]
 800d54a:	68fb      	ldr	r3, [r7, #12]
 800d54c:	681b      	ldr	r3, [r3, #0]
 800d54e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800d552:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 800d554:	68fb      	ldr	r3, [r7, #12]
 800d556:	68db      	ldr	r3, [r3, #12]
 800d558:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800d55c:	d875      	bhi.n	800d64a <HAL_SPI_Receive+0x228>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 800d55e:	e037      	b.n	800d5d0 <HAL_SPI_Receive+0x1ae>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800d560:	68fb      	ldr	r3, [r7, #12]
 800d562:	681b      	ldr	r3, [r3, #0]
 800d564:	689b      	ldr	r3, [r3, #8]
 800d566:	f003 0301 	and.w	r3, r3, #1
 800d56a:	2b01      	cmp	r3, #1
 800d56c:	d117      	bne.n	800d59e <HAL_SPI_Receive+0x17c>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800d56e:	68fb      	ldr	r3, [r7, #12]
 800d570:	681b      	ldr	r3, [r3, #0]
 800d572:	f103 020c 	add.w	r2, r3, #12
 800d576:	68fb      	ldr	r3, [r7, #12]
 800d578:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d57a:	7812      	ldrb	r2, [r2, #0]
 800d57c:	b2d2      	uxtb	r2, r2
 800d57e:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800d580:	68fb      	ldr	r3, [r7, #12]
 800d582:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d584:	1c5a      	adds	r2, r3, #1
 800d586:	68fb      	ldr	r3, [r7, #12]
 800d588:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 800d58a:	68fb      	ldr	r3, [r7, #12]
 800d58c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800d590:	b29b      	uxth	r3, r3
 800d592:	3b01      	subs	r3, #1
 800d594:	b29a      	uxth	r2, r3
 800d596:	68fb      	ldr	r3, [r7, #12]
 800d598:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
 800d59c:	e018      	b.n	800d5d0 <HAL_SPI_Receive+0x1ae>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800d59e:	f7fa f993 	bl	80078c8 <HAL_GetTick>
 800d5a2:	4602      	mov	r2, r0
 800d5a4:	697b      	ldr	r3, [r7, #20]
 800d5a6:	1ad3      	subs	r3, r2, r3
 800d5a8:	683a      	ldr	r2, [r7, #0]
 800d5aa:	429a      	cmp	r2, r3
 800d5ac:	d803      	bhi.n	800d5b6 <HAL_SPI_Receive+0x194>
 800d5ae:	683b      	ldr	r3, [r7, #0]
 800d5b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d5b4:	d102      	bne.n	800d5bc <HAL_SPI_Receive+0x19a>
 800d5b6:	683b      	ldr	r3, [r7, #0]
 800d5b8:	2b00      	cmp	r3, #0
 800d5ba:	d109      	bne.n	800d5d0 <HAL_SPI_Receive+0x1ae>
        {
          hspi->State = HAL_SPI_STATE_READY;
 800d5bc:	68fb      	ldr	r3, [r7, #12]
 800d5be:	2201      	movs	r2, #1
 800d5c0:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 800d5c4:	68fb      	ldr	r3, [r7, #12]
 800d5c6:	2200      	movs	r2, #0
 800d5c8:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 800d5cc:	2303      	movs	r3, #3
 800d5ce:	e05c      	b.n	800d68a <HAL_SPI_Receive+0x268>
    while (hspi->RxXferCount > 0U)
 800d5d0:	68fb      	ldr	r3, [r7, #12]
 800d5d2:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800d5d6:	b29b      	uxth	r3, r3
 800d5d8:	2b00      	cmp	r3, #0
 800d5da:	d1c1      	bne.n	800d560 <HAL_SPI_Receive+0x13e>
 800d5dc:	e03b      	b.n	800d656 <HAL_SPI_Receive+0x234>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800d5de:	68fb      	ldr	r3, [r7, #12]
 800d5e0:	681b      	ldr	r3, [r3, #0]
 800d5e2:	689b      	ldr	r3, [r3, #8]
 800d5e4:	f003 0301 	and.w	r3, r3, #1
 800d5e8:	2b01      	cmp	r3, #1
 800d5ea:	d115      	bne.n	800d618 <HAL_SPI_Receive+0x1f6>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800d5ec:	68fb      	ldr	r3, [r7, #12]
 800d5ee:	681b      	ldr	r3, [r3, #0]
 800d5f0:	68da      	ldr	r2, [r3, #12]
 800d5f2:	68fb      	ldr	r3, [r7, #12]
 800d5f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d5f6:	b292      	uxth	r2, r2
 800d5f8:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800d5fa:	68fb      	ldr	r3, [r7, #12]
 800d5fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d5fe:	1c9a      	adds	r2, r3, #2
 800d600:	68fb      	ldr	r3, [r7, #12]
 800d602:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 800d604:	68fb      	ldr	r3, [r7, #12]
 800d606:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800d60a:	b29b      	uxth	r3, r3
 800d60c:	3b01      	subs	r3, #1
 800d60e:	b29a      	uxth	r2, r3
 800d610:	68fb      	ldr	r3, [r7, #12]
 800d612:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
 800d616:	e018      	b.n	800d64a <HAL_SPI_Receive+0x228>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800d618:	f7fa f956 	bl	80078c8 <HAL_GetTick>
 800d61c:	4602      	mov	r2, r0
 800d61e:	697b      	ldr	r3, [r7, #20]
 800d620:	1ad3      	subs	r3, r2, r3
 800d622:	683a      	ldr	r2, [r7, #0]
 800d624:	429a      	cmp	r2, r3
 800d626:	d803      	bhi.n	800d630 <HAL_SPI_Receive+0x20e>
 800d628:	683b      	ldr	r3, [r7, #0]
 800d62a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d62e:	d102      	bne.n	800d636 <HAL_SPI_Receive+0x214>
 800d630:	683b      	ldr	r3, [r7, #0]
 800d632:	2b00      	cmp	r3, #0
 800d634:	d109      	bne.n	800d64a <HAL_SPI_Receive+0x228>
        {
          hspi->State = HAL_SPI_STATE_READY;
 800d636:	68fb      	ldr	r3, [r7, #12]
 800d638:	2201      	movs	r2, #1
 800d63a:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 800d63e:	68fb      	ldr	r3, [r7, #12]
 800d640:	2200      	movs	r2, #0
 800d642:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 800d646:	2303      	movs	r3, #3
 800d648:	e01f      	b.n	800d68a <HAL_SPI_Receive+0x268>
    while (hspi->RxXferCount > 0U)
 800d64a:	68fb      	ldr	r3, [r7, #12]
 800d64c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800d650:	b29b      	uxth	r3, r3
 800d652:	2b00      	cmp	r3, #0
 800d654:	d1c3      	bne.n	800d5de <HAL_SPI_Receive+0x1bc>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800d656:	697a      	ldr	r2, [r7, #20]
 800d658:	6839      	ldr	r1, [r7, #0]
 800d65a:	68f8      	ldr	r0, [r7, #12]
 800d65c:	f000 fb56 	bl	800dd0c <SPI_EndRxTransaction>
 800d660:	4603      	mov	r3, r0
 800d662:	2b00      	cmp	r3, #0
 800d664:	d002      	beq.n	800d66c <HAL_SPI_Receive+0x24a>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800d666:	68fb      	ldr	r3, [r7, #12]
 800d668:	2220      	movs	r2, #32
 800d66a:	661a      	str	r2, [r3, #96]	@ 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  hspi->State = HAL_SPI_STATE_READY;
 800d66c:	68fb      	ldr	r3, [r7, #12]
 800d66e:	2201      	movs	r2, #1
 800d670:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800d674:	68fb      	ldr	r3, [r7, #12]
 800d676:	2200      	movs	r2, #0
 800d678:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800d67c:	68fb      	ldr	r3, [r7, #12]
 800d67e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800d680:	2b00      	cmp	r3, #0
 800d682:	d001      	beq.n	800d688 <HAL_SPI_Receive+0x266>
  {
    return HAL_ERROR;
 800d684:	2301      	movs	r3, #1
 800d686:	e000      	b.n	800d68a <HAL_SPI_Receive+0x268>
  }
  else
  {
    return HAL_OK;
 800d688:	2300      	movs	r3, #0
  }
}
 800d68a:	4618      	mov	r0, r3
 800d68c:	3718      	adds	r7, #24
 800d68e:	46bd      	mov	sp, r7
 800d690:	bd80      	pop	{r7, pc}

0800d692 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 800d692:	b580      	push	{r7, lr}
 800d694:	b08a      	sub	sp, #40	@ 0x28
 800d696:	af00      	add	r7, sp, #0
 800d698:	60f8      	str	r0, [r7, #12]
 800d69a:	60b9      	str	r1, [r7, #8]
 800d69c:	607a      	str	r2, [r7, #4]
 800d69e:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800d6a0:	2301      	movs	r3, #1
 800d6a2:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800d6a4:	f7fa f910 	bl	80078c8 <HAL_GetTick>
 800d6a8:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800d6aa:	68fb      	ldr	r3, [r7, #12]
 800d6ac:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800d6b0:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 800d6b2:	68fb      	ldr	r3, [r7, #12]
 800d6b4:	685b      	ldr	r3, [r3, #4]
 800d6b6:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 800d6b8:	887b      	ldrh	r3, [r7, #2]
 800d6ba:	82fb      	strh	r3, [r7, #22]
  initial_RxXferCount = Size;
 800d6bc:	887b      	ldrh	r3, [r7, #2]
 800d6be:	82bb      	strh	r3, [r7, #20]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800d6c0:	7ffb      	ldrb	r3, [r7, #31]
 800d6c2:	2b01      	cmp	r3, #1
 800d6c4:	d00c      	beq.n	800d6e0 <HAL_SPI_TransmitReceive+0x4e>
 800d6c6:	69bb      	ldr	r3, [r7, #24]
 800d6c8:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800d6cc:	d106      	bne.n	800d6dc <HAL_SPI_TransmitReceive+0x4a>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) &&
 800d6ce:	68fb      	ldr	r3, [r7, #12]
 800d6d0:	689b      	ldr	r3, [r3, #8]
 800d6d2:	2b00      	cmp	r3, #0
 800d6d4:	d102      	bne.n	800d6dc <HAL_SPI_TransmitReceive+0x4a>
 800d6d6:	7ffb      	ldrb	r3, [r7, #31]
 800d6d8:	2b04      	cmp	r3, #4
 800d6da:	d001      	beq.n	800d6e0 <HAL_SPI_TransmitReceive+0x4e>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    return HAL_BUSY;
 800d6dc:	2302      	movs	r3, #2
 800d6de:	e1f3      	b.n	800dac8 <HAL_SPI_TransmitReceive+0x436>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800d6e0:	68bb      	ldr	r3, [r7, #8]
 800d6e2:	2b00      	cmp	r3, #0
 800d6e4:	d005      	beq.n	800d6f2 <HAL_SPI_TransmitReceive+0x60>
 800d6e6:	687b      	ldr	r3, [r7, #4]
 800d6e8:	2b00      	cmp	r3, #0
 800d6ea:	d002      	beq.n	800d6f2 <HAL_SPI_TransmitReceive+0x60>
 800d6ec:	887b      	ldrh	r3, [r7, #2]
 800d6ee:	2b00      	cmp	r3, #0
 800d6f0:	d101      	bne.n	800d6f6 <HAL_SPI_TransmitReceive+0x64>
  {
    return HAL_ERROR;
 800d6f2:	2301      	movs	r3, #1
 800d6f4:	e1e8      	b.n	800dac8 <HAL_SPI_TransmitReceive+0x436>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800d6f6:	68fb      	ldr	r3, [r7, #12]
 800d6f8:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 800d6fc:	2b01      	cmp	r3, #1
 800d6fe:	d101      	bne.n	800d704 <HAL_SPI_TransmitReceive+0x72>
 800d700:	2302      	movs	r3, #2
 800d702:	e1e1      	b.n	800dac8 <HAL_SPI_TransmitReceive+0x436>
 800d704:	68fb      	ldr	r3, [r7, #12]
 800d706:	2201      	movs	r2, #1
 800d708:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800d70c:	68fb      	ldr	r3, [r7, #12]
 800d70e:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800d712:	b2db      	uxtb	r3, r3
 800d714:	2b04      	cmp	r3, #4
 800d716:	d003      	beq.n	800d720 <HAL_SPI_TransmitReceive+0x8e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800d718:	68fb      	ldr	r3, [r7, #12]
 800d71a:	2205      	movs	r2, #5
 800d71c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800d720:	68fb      	ldr	r3, [r7, #12]
 800d722:	2200      	movs	r2, #0
 800d724:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800d726:	68fb      	ldr	r3, [r7, #12]
 800d728:	687a      	ldr	r2, [r7, #4]
 800d72a:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferCount = Size;
 800d72c:	68fb      	ldr	r3, [r7, #12]
 800d72e:	887a      	ldrh	r2, [r7, #2]
 800d730:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->RxXferSize  = Size;
 800d734:	68fb      	ldr	r3, [r7, #12]
 800d736:	887a      	ldrh	r2, [r7, #2]
 800d738:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 800d73c:	68fb      	ldr	r3, [r7, #12]
 800d73e:	68ba      	ldr	r2, [r7, #8]
 800d740:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferCount = Size;
 800d742:	68fb      	ldr	r3, [r7, #12]
 800d744:	887a      	ldrh	r2, [r7, #2]
 800d746:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferSize  = Size;
 800d748:	68fb      	ldr	r3, [r7, #12]
 800d74a:	887a      	ldrh	r2, [r7, #2]
 800d74c:	879a      	strh	r2, [r3, #60]	@ 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800d74e:	68fb      	ldr	r3, [r7, #12]
 800d750:	2200      	movs	r2, #0
 800d752:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 800d754:	68fb      	ldr	r3, [r7, #12]
 800d756:	2200      	movs	r2, #0
 800d758:	651a      	str	r2, [r3, #80]	@ 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 800d75a:	68fb      	ldr	r3, [r7, #12]
 800d75c:	68db      	ldr	r3, [r3, #12]
 800d75e:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800d762:	d802      	bhi.n	800d76a <HAL_SPI_TransmitReceive+0xd8>
 800d764:	8abb      	ldrh	r3, [r7, #20]
 800d766:	2b01      	cmp	r3, #1
 800d768:	d908      	bls.n	800d77c <HAL_SPI_TransmitReceive+0xea>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800d76a:	68fb      	ldr	r3, [r7, #12]
 800d76c:	681b      	ldr	r3, [r3, #0]
 800d76e:	685a      	ldr	r2, [r3, #4]
 800d770:	68fb      	ldr	r3, [r7, #12]
 800d772:	681b      	ldr	r3, [r3, #0]
 800d774:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800d778:	605a      	str	r2, [r3, #4]
 800d77a:	e007      	b.n	800d78c <HAL_SPI_TransmitReceive+0xfa>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800d77c:	68fb      	ldr	r3, [r7, #12]
 800d77e:	681b      	ldr	r3, [r3, #0]
 800d780:	685a      	ldr	r2, [r3, #4]
 800d782:	68fb      	ldr	r3, [r7, #12]
 800d784:	681b      	ldr	r3, [r3, #0]
 800d786:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800d78a:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800d78c:	68fb      	ldr	r3, [r7, #12]
 800d78e:	681b      	ldr	r3, [r3, #0]
 800d790:	681b      	ldr	r3, [r3, #0]
 800d792:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d796:	2b40      	cmp	r3, #64	@ 0x40
 800d798:	d007      	beq.n	800d7aa <HAL_SPI_TransmitReceive+0x118>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800d79a:	68fb      	ldr	r3, [r7, #12]
 800d79c:	681b      	ldr	r3, [r3, #0]
 800d79e:	681a      	ldr	r2, [r3, #0]
 800d7a0:	68fb      	ldr	r3, [r7, #12]
 800d7a2:	681b      	ldr	r3, [r3, #0]
 800d7a4:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800d7a8:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800d7aa:	68fb      	ldr	r3, [r7, #12]
 800d7ac:	68db      	ldr	r3, [r3, #12]
 800d7ae:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800d7b2:	f240 8083 	bls.w	800d8bc <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800d7b6:	68fb      	ldr	r3, [r7, #12]
 800d7b8:	685b      	ldr	r3, [r3, #4]
 800d7ba:	2b00      	cmp	r3, #0
 800d7bc:	d002      	beq.n	800d7c4 <HAL_SPI_TransmitReceive+0x132>
 800d7be:	8afb      	ldrh	r3, [r7, #22]
 800d7c0:	2b01      	cmp	r3, #1
 800d7c2:	d16f      	bne.n	800d8a4 <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800d7c4:	68fb      	ldr	r3, [r7, #12]
 800d7c6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d7c8:	881a      	ldrh	r2, [r3, #0]
 800d7ca:	68fb      	ldr	r3, [r7, #12]
 800d7cc:	681b      	ldr	r3, [r3, #0]
 800d7ce:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800d7d0:	68fb      	ldr	r3, [r7, #12]
 800d7d2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d7d4:	1c9a      	adds	r2, r3, #2
 800d7d6:	68fb      	ldr	r3, [r7, #12]
 800d7d8:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 800d7da:	68fb      	ldr	r3, [r7, #12]
 800d7dc:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800d7de:	b29b      	uxth	r3, r3
 800d7e0:	3b01      	subs	r3, #1
 800d7e2:	b29a      	uxth	r2, r3
 800d7e4:	68fb      	ldr	r3, [r7, #12]
 800d7e6:	87da      	strh	r2, [r3, #62]	@ 0x3e
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800d7e8:	e05c      	b.n	800d8a4 <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800d7ea:	68fb      	ldr	r3, [r7, #12]
 800d7ec:	681b      	ldr	r3, [r3, #0]
 800d7ee:	689b      	ldr	r3, [r3, #8]
 800d7f0:	f003 0302 	and.w	r3, r3, #2
 800d7f4:	2b02      	cmp	r3, #2
 800d7f6:	d11b      	bne.n	800d830 <HAL_SPI_TransmitReceive+0x19e>
 800d7f8:	68fb      	ldr	r3, [r7, #12]
 800d7fa:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800d7fc:	b29b      	uxth	r3, r3
 800d7fe:	2b00      	cmp	r3, #0
 800d800:	d016      	beq.n	800d830 <HAL_SPI_TransmitReceive+0x19e>
 800d802:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d804:	2b01      	cmp	r3, #1
 800d806:	d113      	bne.n	800d830 <HAL_SPI_TransmitReceive+0x19e>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800d808:	68fb      	ldr	r3, [r7, #12]
 800d80a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d80c:	881a      	ldrh	r2, [r3, #0]
 800d80e:	68fb      	ldr	r3, [r7, #12]
 800d810:	681b      	ldr	r3, [r3, #0]
 800d812:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800d814:	68fb      	ldr	r3, [r7, #12]
 800d816:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d818:	1c9a      	adds	r2, r3, #2
 800d81a:	68fb      	ldr	r3, [r7, #12]
 800d81c:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 800d81e:	68fb      	ldr	r3, [r7, #12]
 800d820:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800d822:	b29b      	uxth	r3, r3
 800d824:	3b01      	subs	r3, #1
 800d826:	b29a      	uxth	r2, r3
 800d828:	68fb      	ldr	r3, [r7, #12]
 800d82a:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800d82c:	2300      	movs	r3, #0
 800d82e:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800d830:	68fb      	ldr	r3, [r7, #12]
 800d832:	681b      	ldr	r3, [r3, #0]
 800d834:	689b      	ldr	r3, [r3, #8]
 800d836:	f003 0301 	and.w	r3, r3, #1
 800d83a:	2b01      	cmp	r3, #1
 800d83c:	d11c      	bne.n	800d878 <HAL_SPI_TransmitReceive+0x1e6>
 800d83e:	68fb      	ldr	r3, [r7, #12]
 800d840:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800d844:	b29b      	uxth	r3, r3
 800d846:	2b00      	cmp	r3, #0
 800d848:	d016      	beq.n	800d878 <HAL_SPI_TransmitReceive+0x1e6>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800d84a:	68fb      	ldr	r3, [r7, #12]
 800d84c:	681b      	ldr	r3, [r3, #0]
 800d84e:	68da      	ldr	r2, [r3, #12]
 800d850:	68fb      	ldr	r3, [r7, #12]
 800d852:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d854:	b292      	uxth	r2, r2
 800d856:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800d858:	68fb      	ldr	r3, [r7, #12]
 800d85a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d85c:	1c9a      	adds	r2, r3, #2
 800d85e:	68fb      	ldr	r3, [r7, #12]
 800d860:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 800d862:	68fb      	ldr	r3, [r7, #12]
 800d864:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800d868:	b29b      	uxth	r3, r3
 800d86a:	3b01      	subs	r3, #1
 800d86c:	b29a      	uxth	r2, r3
 800d86e:	68fb      	ldr	r3, [r7, #12]
 800d870:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800d874:	2301      	movs	r3, #1
 800d876:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800d878:	f7fa f826 	bl	80078c8 <HAL_GetTick>
 800d87c:	4602      	mov	r2, r0
 800d87e:	6a3b      	ldr	r3, [r7, #32]
 800d880:	1ad3      	subs	r3, r2, r3
 800d882:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800d884:	429a      	cmp	r2, r3
 800d886:	d80d      	bhi.n	800d8a4 <HAL_SPI_TransmitReceive+0x212>
 800d888:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d88a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d88e:	d009      	beq.n	800d8a4 <HAL_SPI_TransmitReceive+0x212>
      {
        hspi->State = HAL_SPI_STATE_READY;
 800d890:	68fb      	ldr	r3, [r7, #12]
 800d892:	2201      	movs	r2, #1
 800d894:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        __HAL_UNLOCK(hspi);
 800d898:	68fb      	ldr	r3, [r7, #12]
 800d89a:	2200      	movs	r2, #0
 800d89c:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
        return HAL_TIMEOUT;
 800d8a0:	2303      	movs	r3, #3
 800d8a2:	e111      	b.n	800dac8 <HAL_SPI_TransmitReceive+0x436>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800d8a4:	68fb      	ldr	r3, [r7, #12]
 800d8a6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800d8a8:	b29b      	uxth	r3, r3
 800d8aa:	2b00      	cmp	r3, #0
 800d8ac:	d19d      	bne.n	800d7ea <HAL_SPI_TransmitReceive+0x158>
 800d8ae:	68fb      	ldr	r3, [r7, #12]
 800d8b0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800d8b4:	b29b      	uxth	r3, r3
 800d8b6:	2b00      	cmp	r3, #0
 800d8b8:	d197      	bne.n	800d7ea <HAL_SPI_TransmitReceive+0x158>
 800d8ba:	e0e5      	b.n	800da88 <HAL_SPI_TransmitReceive+0x3f6>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800d8bc:	68fb      	ldr	r3, [r7, #12]
 800d8be:	685b      	ldr	r3, [r3, #4]
 800d8c0:	2b00      	cmp	r3, #0
 800d8c2:	d003      	beq.n	800d8cc <HAL_SPI_TransmitReceive+0x23a>
 800d8c4:	8afb      	ldrh	r3, [r7, #22]
 800d8c6:	2b01      	cmp	r3, #1
 800d8c8:	f040 80d1 	bne.w	800da6e <HAL_SPI_TransmitReceive+0x3dc>
    {
      if (hspi->TxXferCount > 1U)
 800d8cc:	68fb      	ldr	r3, [r7, #12]
 800d8ce:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800d8d0:	b29b      	uxth	r3, r3
 800d8d2:	2b01      	cmp	r3, #1
 800d8d4:	d912      	bls.n	800d8fc <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800d8d6:	68fb      	ldr	r3, [r7, #12]
 800d8d8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d8da:	881a      	ldrh	r2, [r3, #0]
 800d8dc:	68fb      	ldr	r3, [r7, #12]
 800d8de:	681b      	ldr	r3, [r3, #0]
 800d8e0:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800d8e2:	68fb      	ldr	r3, [r7, #12]
 800d8e4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d8e6:	1c9a      	adds	r2, r3, #2
 800d8e8:	68fb      	ldr	r3, [r7, #12]
 800d8ea:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 800d8ec:	68fb      	ldr	r3, [r7, #12]
 800d8ee:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800d8f0:	b29b      	uxth	r3, r3
 800d8f2:	3b02      	subs	r3, #2
 800d8f4:	b29a      	uxth	r2, r3
 800d8f6:	68fb      	ldr	r3, [r7, #12]
 800d8f8:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800d8fa:	e0b8      	b.n	800da6e <HAL_SPI_TransmitReceive+0x3dc>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 800d8fc:	68fb      	ldr	r3, [r7, #12]
 800d8fe:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800d900:	68fb      	ldr	r3, [r7, #12]
 800d902:	681b      	ldr	r3, [r3, #0]
 800d904:	330c      	adds	r3, #12
 800d906:	7812      	ldrb	r2, [r2, #0]
 800d908:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800d90a:	68fb      	ldr	r3, [r7, #12]
 800d90c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d90e:	1c5a      	adds	r2, r3, #1
 800d910:	68fb      	ldr	r3, [r7, #12]
 800d912:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 800d914:	68fb      	ldr	r3, [r7, #12]
 800d916:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800d918:	b29b      	uxth	r3, r3
 800d91a:	3b01      	subs	r3, #1
 800d91c:	b29a      	uxth	r2, r3
 800d91e:	68fb      	ldr	r3, [r7, #12]
 800d920:	87da      	strh	r2, [r3, #62]	@ 0x3e
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
        }
#endif /* USE_SPI_CRC */
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800d922:	e0a4      	b.n	800da6e <HAL_SPI_TransmitReceive+0x3dc>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800d924:	68fb      	ldr	r3, [r7, #12]
 800d926:	681b      	ldr	r3, [r3, #0]
 800d928:	689b      	ldr	r3, [r3, #8]
 800d92a:	f003 0302 	and.w	r3, r3, #2
 800d92e:	2b02      	cmp	r3, #2
 800d930:	d134      	bne.n	800d99c <HAL_SPI_TransmitReceive+0x30a>
 800d932:	68fb      	ldr	r3, [r7, #12]
 800d934:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800d936:	b29b      	uxth	r3, r3
 800d938:	2b00      	cmp	r3, #0
 800d93a:	d02f      	beq.n	800d99c <HAL_SPI_TransmitReceive+0x30a>
 800d93c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d93e:	2b01      	cmp	r3, #1
 800d940:	d12c      	bne.n	800d99c <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 800d942:	68fb      	ldr	r3, [r7, #12]
 800d944:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800d946:	b29b      	uxth	r3, r3
 800d948:	2b01      	cmp	r3, #1
 800d94a:	d912      	bls.n	800d972 <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800d94c:	68fb      	ldr	r3, [r7, #12]
 800d94e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d950:	881a      	ldrh	r2, [r3, #0]
 800d952:	68fb      	ldr	r3, [r7, #12]
 800d954:	681b      	ldr	r3, [r3, #0]
 800d956:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800d958:	68fb      	ldr	r3, [r7, #12]
 800d95a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d95c:	1c9a      	adds	r2, r3, #2
 800d95e:	68fb      	ldr	r3, [r7, #12]
 800d960:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 800d962:	68fb      	ldr	r3, [r7, #12]
 800d964:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800d966:	b29b      	uxth	r3, r3
 800d968:	3b02      	subs	r3, #2
 800d96a:	b29a      	uxth	r2, r3
 800d96c:	68fb      	ldr	r3, [r7, #12]
 800d96e:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800d970:	e012      	b.n	800d998 <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 800d972:	68fb      	ldr	r3, [r7, #12]
 800d974:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800d976:	68fb      	ldr	r3, [r7, #12]
 800d978:	681b      	ldr	r3, [r3, #0]
 800d97a:	330c      	adds	r3, #12
 800d97c:	7812      	ldrb	r2, [r2, #0]
 800d97e:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 800d980:	68fb      	ldr	r3, [r7, #12]
 800d982:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d984:	1c5a      	adds	r2, r3, #1
 800d986:	68fb      	ldr	r3, [r7, #12]
 800d988:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 800d98a:	68fb      	ldr	r3, [r7, #12]
 800d98c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800d98e:	b29b      	uxth	r3, r3
 800d990:	3b01      	subs	r3, #1
 800d992:	b29a      	uxth	r2, r3
 800d994:	68fb      	ldr	r3, [r7, #12]
 800d996:	87da      	strh	r2, [r3, #62]	@ 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800d998:	2300      	movs	r3, #0
 800d99a:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800d99c:	68fb      	ldr	r3, [r7, #12]
 800d99e:	681b      	ldr	r3, [r3, #0]
 800d9a0:	689b      	ldr	r3, [r3, #8]
 800d9a2:	f003 0301 	and.w	r3, r3, #1
 800d9a6:	2b01      	cmp	r3, #1
 800d9a8:	d148      	bne.n	800da3c <HAL_SPI_TransmitReceive+0x3aa>
 800d9aa:	68fb      	ldr	r3, [r7, #12]
 800d9ac:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800d9b0:	b29b      	uxth	r3, r3
 800d9b2:	2b00      	cmp	r3, #0
 800d9b4:	d042      	beq.n	800da3c <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 800d9b6:	68fb      	ldr	r3, [r7, #12]
 800d9b8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800d9bc:	b29b      	uxth	r3, r3
 800d9be:	2b01      	cmp	r3, #1
 800d9c0:	d923      	bls.n	800da0a <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800d9c2:	68fb      	ldr	r3, [r7, #12]
 800d9c4:	681b      	ldr	r3, [r3, #0]
 800d9c6:	68da      	ldr	r2, [r3, #12]
 800d9c8:	68fb      	ldr	r3, [r7, #12]
 800d9ca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d9cc:	b292      	uxth	r2, r2
 800d9ce:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800d9d0:	68fb      	ldr	r3, [r7, #12]
 800d9d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d9d4:	1c9a      	adds	r2, r3, #2
 800d9d6:	68fb      	ldr	r3, [r7, #12]
 800d9d8:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount -= 2U;
 800d9da:	68fb      	ldr	r3, [r7, #12]
 800d9dc:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800d9e0:	b29b      	uxth	r3, r3
 800d9e2:	3b02      	subs	r3, #2
 800d9e4:	b29a      	uxth	r2, r3
 800d9e6:	68fb      	ldr	r3, [r7, #12]
 800d9e8:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
          if (hspi->RxXferCount <= 1U)
 800d9ec:	68fb      	ldr	r3, [r7, #12]
 800d9ee:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800d9f2:	b29b      	uxth	r3, r3
 800d9f4:	2b01      	cmp	r3, #1
 800d9f6:	d81f      	bhi.n	800da38 <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800d9f8:	68fb      	ldr	r3, [r7, #12]
 800d9fa:	681b      	ldr	r3, [r3, #0]
 800d9fc:	685a      	ldr	r2, [r3, #4]
 800d9fe:	68fb      	ldr	r3, [r7, #12]
 800da00:	681b      	ldr	r3, [r3, #0]
 800da02:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800da06:	605a      	str	r2, [r3, #4]
 800da08:	e016      	b.n	800da38 <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800da0a:	68fb      	ldr	r3, [r7, #12]
 800da0c:	681b      	ldr	r3, [r3, #0]
 800da0e:	f103 020c 	add.w	r2, r3, #12
 800da12:	68fb      	ldr	r3, [r7, #12]
 800da14:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800da16:	7812      	ldrb	r2, [r2, #0]
 800da18:	b2d2      	uxtb	r2, r2
 800da1a:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 800da1c:	68fb      	ldr	r3, [r7, #12]
 800da1e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800da20:	1c5a      	adds	r2, r3, #1
 800da22:	68fb      	ldr	r3, [r7, #12]
 800da24:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount--;
 800da26:	68fb      	ldr	r3, [r7, #12]
 800da28:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800da2c:	b29b      	uxth	r3, r3
 800da2e:	3b01      	subs	r3, #1
 800da30:	b29a      	uxth	r2, r3
 800da32:	68fb      	ldr	r3, [r7, #12]
 800da34:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800da38:	2301      	movs	r3, #1
 800da3a:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800da3c:	f7f9 ff44 	bl	80078c8 <HAL_GetTick>
 800da40:	4602      	mov	r2, r0
 800da42:	6a3b      	ldr	r3, [r7, #32]
 800da44:	1ad3      	subs	r3, r2, r3
 800da46:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800da48:	429a      	cmp	r2, r3
 800da4a:	d803      	bhi.n	800da54 <HAL_SPI_TransmitReceive+0x3c2>
 800da4c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800da4e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800da52:	d102      	bne.n	800da5a <HAL_SPI_TransmitReceive+0x3c8>
 800da54:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800da56:	2b00      	cmp	r3, #0
 800da58:	d109      	bne.n	800da6e <HAL_SPI_TransmitReceive+0x3dc>
      {
        hspi->State = HAL_SPI_STATE_READY;
 800da5a:	68fb      	ldr	r3, [r7, #12]
 800da5c:	2201      	movs	r2, #1
 800da5e:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        __HAL_UNLOCK(hspi);
 800da62:	68fb      	ldr	r3, [r7, #12]
 800da64:	2200      	movs	r2, #0
 800da66:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
        return HAL_TIMEOUT;
 800da6a:	2303      	movs	r3, #3
 800da6c:	e02c      	b.n	800dac8 <HAL_SPI_TransmitReceive+0x436>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800da6e:	68fb      	ldr	r3, [r7, #12]
 800da70:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800da72:	b29b      	uxth	r3, r3
 800da74:	2b00      	cmp	r3, #0
 800da76:	f47f af55 	bne.w	800d924 <HAL_SPI_TransmitReceive+0x292>
 800da7a:	68fb      	ldr	r3, [r7, #12]
 800da7c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800da80:	b29b      	uxth	r3, r3
 800da82:	2b00      	cmp	r3, #0
 800da84:	f47f af4e 	bne.w	800d924 <HAL_SPI_TransmitReceive+0x292>
    return HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800da88:	6a3a      	ldr	r2, [r7, #32]
 800da8a:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800da8c:	68f8      	ldr	r0, [r7, #12]
 800da8e:	f000 f995 	bl	800ddbc <SPI_EndRxTxTransaction>
 800da92:	4603      	mov	r3, r0
 800da94:	2b00      	cmp	r3, #0
 800da96:	d008      	beq.n	800daaa <HAL_SPI_TransmitReceive+0x418>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800da98:	68fb      	ldr	r3, [r7, #12]
 800da9a:	2220      	movs	r2, #32
 800da9c:	661a      	str	r2, [r3, #96]	@ 0x60
    __HAL_UNLOCK(hspi);
 800da9e:	68fb      	ldr	r3, [r7, #12]
 800daa0:	2200      	movs	r2, #0
 800daa2:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
    return HAL_ERROR;
 800daa6:	2301      	movs	r3, #1
 800daa8:	e00e      	b.n	800dac8 <HAL_SPI_TransmitReceive+0x436>
  }


  hspi->State = HAL_SPI_STATE_READY;
 800daaa:	68fb      	ldr	r3, [r7, #12]
 800daac:	2201      	movs	r2, #1
 800daae:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800dab2:	68fb      	ldr	r3, [r7, #12]
 800dab4:	2200      	movs	r2, #0
 800dab6:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800daba:	68fb      	ldr	r3, [r7, #12]
 800dabc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800dabe:	2b00      	cmp	r3, #0
 800dac0:	d001      	beq.n	800dac6 <HAL_SPI_TransmitReceive+0x434>
  {
    return HAL_ERROR;
 800dac2:	2301      	movs	r3, #1
 800dac4:	e000      	b.n	800dac8 <HAL_SPI_TransmitReceive+0x436>
  }
  else
  {
    return HAL_OK;
 800dac6:	2300      	movs	r3, #0
  }
}
 800dac8:	4618      	mov	r0, r3
 800daca:	3728      	adds	r7, #40	@ 0x28
 800dacc:	46bd      	mov	sp, r7
 800dace:	bd80      	pop	{r7, pc}

0800dad0 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800dad0:	b580      	push	{r7, lr}
 800dad2:	b088      	sub	sp, #32
 800dad4:	af00      	add	r7, sp, #0
 800dad6:	60f8      	str	r0, [r7, #12]
 800dad8:	60b9      	str	r1, [r7, #8]
 800dada:	603b      	str	r3, [r7, #0]
 800dadc:	4613      	mov	r3, r2
 800dade:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800dae0:	f7f9 fef2 	bl	80078c8 <HAL_GetTick>
 800dae4:	4602      	mov	r2, r0
 800dae6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800dae8:	1a9b      	subs	r3, r3, r2
 800daea:	683a      	ldr	r2, [r7, #0]
 800daec:	4413      	add	r3, r2
 800daee:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800daf0:	f7f9 feea 	bl	80078c8 <HAL_GetTick>
 800daf4:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800daf6:	4b39      	ldr	r3, [pc, #228]	@ (800dbdc <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800daf8:	681b      	ldr	r3, [r3, #0]
 800dafa:	015b      	lsls	r3, r3, #5
 800dafc:	0d1b      	lsrs	r3, r3, #20
 800dafe:	69fa      	ldr	r2, [r7, #28]
 800db00:	fb02 f303 	mul.w	r3, r2, r3
 800db04:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800db06:	e054      	b.n	800dbb2 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800db08:	683b      	ldr	r3, [r7, #0]
 800db0a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800db0e:	d050      	beq.n	800dbb2 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800db10:	f7f9 feda 	bl	80078c8 <HAL_GetTick>
 800db14:	4602      	mov	r2, r0
 800db16:	69bb      	ldr	r3, [r7, #24]
 800db18:	1ad3      	subs	r3, r2, r3
 800db1a:	69fa      	ldr	r2, [r7, #28]
 800db1c:	429a      	cmp	r2, r3
 800db1e:	d902      	bls.n	800db26 <SPI_WaitFlagStateUntilTimeout+0x56>
 800db20:	69fb      	ldr	r3, [r7, #28]
 800db22:	2b00      	cmp	r3, #0
 800db24:	d13d      	bne.n	800dba2 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800db26:	68fb      	ldr	r3, [r7, #12]
 800db28:	681b      	ldr	r3, [r3, #0]
 800db2a:	685a      	ldr	r2, [r3, #4]
 800db2c:	68fb      	ldr	r3, [r7, #12]
 800db2e:	681b      	ldr	r3, [r3, #0]
 800db30:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 800db34:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800db36:	68fb      	ldr	r3, [r7, #12]
 800db38:	685b      	ldr	r3, [r3, #4]
 800db3a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800db3e:	d111      	bne.n	800db64 <SPI_WaitFlagStateUntilTimeout+0x94>
 800db40:	68fb      	ldr	r3, [r7, #12]
 800db42:	689b      	ldr	r3, [r3, #8]
 800db44:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800db48:	d004      	beq.n	800db54 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800db4a:	68fb      	ldr	r3, [r7, #12]
 800db4c:	689b      	ldr	r3, [r3, #8]
 800db4e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800db52:	d107      	bne.n	800db64 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800db54:	68fb      	ldr	r3, [r7, #12]
 800db56:	681b      	ldr	r3, [r3, #0]
 800db58:	681a      	ldr	r2, [r3, #0]
 800db5a:	68fb      	ldr	r3, [r7, #12]
 800db5c:	681b      	ldr	r3, [r3, #0]
 800db5e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800db62:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800db64:	68fb      	ldr	r3, [r7, #12]
 800db66:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800db68:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800db6c:	d10f      	bne.n	800db8e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800db6e:	68fb      	ldr	r3, [r7, #12]
 800db70:	681b      	ldr	r3, [r3, #0]
 800db72:	681a      	ldr	r2, [r3, #0]
 800db74:	68fb      	ldr	r3, [r7, #12]
 800db76:	681b      	ldr	r3, [r3, #0]
 800db78:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800db7c:	601a      	str	r2, [r3, #0]
 800db7e:	68fb      	ldr	r3, [r7, #12]
 800db80:	681b      	ldr	r3, [r3, #0]
 800db82:	681a      	ldr	r2, [r3, #0]
 800db84:	68fb      	ldr	r3, [r7, #12]
 800db86:	681b      	ldr	r3, [r3, #0]
 800db88:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800db8c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800db8e:	68fb      	ldr	r3, [r7, #12]
 800db90:	2201      	movs	r2, #1
 800db92:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800db96:	68fb      	ldr	r3, [r7, #12]
 800db98:	2200      	movs	r2, #0
 800db9a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 800db9e:	2303      	movs	r3, #3
 800dba0:	e017      	b.n	800dbd2 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800dba2:	697b      	ldr	r3, [r7, #20]
 800dba4:	2b00      	cmp	r3, #0
 800dba6:	d101      	bne.n	800dbac <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800dba8:	2300      	movs	r3, #0
 800dbaa:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800dbac:	697b      	ldr	r3, [r7, #20]
 800dbae:	3b01      	subs	r3, #1
 800dbb0:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800dbb2:	68fb      	ldr	r3, [r7, #12]
 800dbb4:	681b      	ldr	r3, [r3, #0]
 800dbb6:	689a      	ldr	r2, [r3, #8]
 800dbb8:	68bb      	ldr	r3, [r7, #8]
 800dbba:	4013      	ands	r3, r2
 800dbbc:	68ba      	ldr	r2, [r7, #8]
 800dbbe:	429a      	cmp	r2, r3
 800dbc0:	bf0c      	ite	eq
 800dbc2:	2301      	moveq	r3, #1
 800dbc4:	2300      	movne	r3, #0
 800dbc6:	b2db      	uxtb	r3, r3
 800dbc8:	461a      	mov	r2, r3
 800dbca:	79fb      	ldrb	r3, [r7, #7]
 800dbcc:	429a      	cmp	r2, r3
 800dbce:	d19b      	bne.n	800db08 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800dbd0:	2300      	movs	r3, #0
}
 800dbd2:	4618      	mov	r0, r3
 800dbd4:	3720      	adds	r7, #32
 800dbd6:	46bd      	mov	sp, r7
 800dbd8:	bd80      	pop	{r7, pc}
 800dbda:	bf00      	nop
 800dbdc:	20000000 	.word	0x20000000

0800dbe0 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800dbe0:	b580      	push	{r7, lr}
 800dbe2:	b08a      	sub	sp, #40	@ 0x28
 800dbe4:	af00      	add	r7, sp, #0
 800dbe6:	60f8      	str	r0, [r7, #12]
 800dbe8:	60b9      	str	r1, [r7, #8]
 800dbea:	607a      	str	r2, [r7, #4]
 800dbec:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO const uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 800dbee:	2300      	movs	r3, #0
 800dbf0:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 800dbf2:	f7f9 fe69 	bl	80078c8 <HAL_GetTick>
 800dbf6:	4602      	mov	r2, r0
 800dbf8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dbfa:	1a9b      	subs	r3, r3, r2
 800dbfc:	683a      	ldr	r2, [r7, #0]
 800dbfe:	4413      	add	r3, r2
 800dc00:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 800dc02:	f7f9 fe61 	bl	80078c8 <HAL_GetTick>
 800dc06:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 800dc08:	68fb      	ldr	r3, [r7, #12]
 800dc0a:	681b      	ldr	r3, [r3, #0]
 800dc0c:	330c      	adds	r3, #12
 800dc0e:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 800dc10:	4b3d      	ldr	r3, [pc, #244]	@ (800dd08 <SPI_WaitFifoStateUntilTimeout+0x128>)
 800dc12:	681a      	ldr	r2, [r3, #0]
 800dc14:	4613      	mov	r3, r2
 800dc16:	009b      	lsls	r3, r3, #2
 800dc18:	4413      	add	r3, r2
 800dc1a:	00da      	lsls	r2, r3, #3
 800dc1c:	1ad3      	subs	r3, r2, r3
 800dc1e:	0d1b      	lsrs	r3, r3, #20
 800dc20:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800dc22:	fb02 f303 	mul.w	r3, r2, r3
 800dc26:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 800dc28:	e060      	b.n	800dcec <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800dc2a:	68bb      	ldr	r3, [r7, #8]
 800dc2c:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 800dc30:	d107      	bne.n	800dc42 <SPI_WaitFifoStateUntilTimeout+0x62>
 800dc32:	687b      	ldr	r3, [r7, #4]
 800dc34:	2b00      	cmp	r3, #0
 800dc36:	d104      	bne.n	800dc42 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 800dc38:	69fb      	ldr	r3, [r7, #28]
 800dc3a:	781b      	ldrb	r3, [r3, #0]
 800dc3c:	b2db      	uxtb	r3, r3
 800dc3e:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 800dc40:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 800dc42:	683b      	ldr	r3, [r7, #0]
 800dc44:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dc48:	d050      	beq.n	800dcec <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800dc4a:	f7f9 fe3d 	bl	80078c8 <HAL_GetTick>
 800dc4e:	4602      	mov	r2, r0
 800dc50:	6a3b      	ldr	r3, [r7, #32]
 800dc52:	1ad3      	subs	r3, r2, r3
 800dc54:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800dc56:	429a      	cmp	r2, r3
 800dc58:	d902      	bls.n	800dc60 <SPI_WaitFifoStateUntilTimeout+0x80>
 800dc5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dc5c:	2b00      	cmp	r3, #0
 800dc5e:	d13d      	bne.n	800dcdc <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800dc60:	68fb      	ldr	r3, [r7, #12]
 800dc62:	681b      	ldr	r3, [r3, #0]
 800dc64:	685a      	ldr	r2, [r3, #4]
 800dc66:	68fb      	ldr	r3, [r7, #12]
 800dc68:	681b      	ldr	r3, [r3, #0]
 800dc6a:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 800dc6e:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800dc70:	68fb      	ldr	r3, [r7, #12]
 800dc72:	685b      	ldr	r3, [r3, #4]
 800dc74:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800dc78:	d111      	bne.n	800dc9e <SPI_WaitFifoStateUntilTimeout+0xbe>
 800dc7a:	68fb      	ldr	r3, [r7, #12]
 800dc7c:	689b      	ldr	r3, [r3, #8]
 800dc7e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800dc82:	d004      	beq.n	800dc8e <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800dc84:	68fb      	ldr	r3, [r7, #12]
 800dc86:	689b      	ldr	r3, [r3, #8]
 800dc88:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800dc8c:	d107      	bne.n	800dc9e <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800dc8e:	68fb      	ldr	r3, [r7, #12]
 800dc90:	681b      	ldr	r3, [r3, #0]
 800dc92:	681a      	ldr	r2, [r3, #0]
 800dc94:	68fb      	ldr	r3, [r7, #12]
 800dc96:	681b      	ldr	r3, [r3, #0]
 800dc98:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800dc9c:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800dc9e:	68fb      	ldr	r3, [r7, #12]
 800dca0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800dca2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800dca6:	d10f      	bne.n	800dcc8 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 800dca8:	68fb      	ldr	r3, [r7, #12]
 800dcaa:	681b      	ldr	r3, [r3, #0]
 800dcac:	681a      	ldr	r2, [r3, #0]
 800dcae:	68fb      	ldr	r3, [r7, #12]
 800dcb0:	681b      	ldr	r3, [r3, #0]
 800dcb2:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800dcb6:	601a      	str	r2, [r3, #0]
 800dcb8:	68fb      	ldr	r3, [r7, #12]
 800dcba:	681b      	ldr	r3, [r3, #0]
 800dcbc:	681a      	ldr	r2, [r3, #0]
 800dcbe:	68fb      	ldr	r3, [r7, #12]
 800dcc0:	681b      	ldr	r3, [r3, #0]
 800dcc2:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800dcc6:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800dcc8:	68fb      	ldr	r3, [r7, #12]
 800dcca:	2201      	movs	r2, #1
 800dccc:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800dcd0:	68fb      	ldr	r3, [r7, #12]
 800dcd2:	2200      	movs	r2, #0
 800dcd4:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 800dcd8:	2303      	movs	r3, #3
 800dcda:	e010      	b.n	800dcfe <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800dcdc:	69bb      	ldr	r3, [r7, #24]
 800dcde:	2b00      	cmp	r3, #0
 800dce0:	d101      	bne.n	800dce6 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 800dce2:	2300      	movs	r3, #0
 800dce4:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 800dce6:	69bb      	ldr	r3, [r7, #24]
 800dce8:	3b01      	subs	r3, #1
 800dcea:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 800dcec:	68fb      	ldr	r3, [r7, #12]
 800dcee:	681b      	ldr	r3, [r3, #0]
 800dcf0:	689a      	ldr	r2, [r3, #8]
 800dcf2:	68bb      	ldr	r3, [r7, #8]
 800dcf4:	4013      	ands	r3, r2
 800dcf6:	687a      	ldr	r2, [r7, #4]
 800dcf8:	429a      	cmp	r2, r3
 800dcfa:	d196      	bne.n	800dc2a <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 800dcfc:	2300      	movs	r3, #0
}
 800dcfe:	4618      	mov	r0, r3
 800dd00:	3728      	adds	r7, #40	@ 0x28
 800dd02:	46bd      	mov	sp, r7
 800dd04:	bd80      	pop	{r7, pc}
 800dd06:	bf00      	nop
 800dd08:	20000000 	.word	0x20000000

0800dd0c <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 800dd0c:	b580      	push	{r7, lr}
 800dd0e:	b086      	sub	sp, #24
 800dd10:	af02      	add	r7, sp, #8
 800dd12:	60f8      	str	r0, [r7, #12]
 800dd14:	60b9      	str	r1, [r7, #8]
 800dd16:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800dd18:	68fb      	ldr	r3, [r7, #12]
 800dd1a:	685b      	ldr	r3, [r3, #4]
 800dd1c:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800dd20:	d111      	bne.n	800dd46 <SPI_EndRxTransaction+0x3a>
 800dd22:	68fb      	ldr	r3, [r7, #12]
 800dd24:	689b      	ldr	r3, [r3, #8]
 800dd26:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800dd2a:	d004      	beq.n	800dd36 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800dd2c:	68fb      	ldr	r3, [r7, #12]
 800dd2e:	689b      	ldr	r3, [r3, #8]
 800dd30:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800dd34:	d107      	bne.n	800dd46 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800dd36:	68fb      	ldr	r3, [r7, #12]
 800dd38:	681b      	ldr	r3, [r3, #0]
 800dd3a:	681a      	ldr	r2, [r3, #0]
 800dd3c:	68fb      	ldr	r3, [r7, #12]
 800dd3e:	681b      	ldr	r3, [r3, #0]
 800dd40:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800dd44:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800dd46:	687b      	ldr	r3, [r7, #4]
 800dd48:	9300      	str	r3, [sp, #0]
 800dd4a:	68bb      	ldr	r3, [r7, #8]
 800dd4c:	2200      	movs	r2, #0
 800dd4e:	2180      	movs	r1, #128	@ 0x80
 800dd50:	68f8      	ldr	r0, [r7, #12]
 800dd52:	f7ff febd 	bl	800dad0 <SPI_WaitFlagStateUntilTimeout>
 800dd56:	4603      	mov	r3, r0
 800dd58:	2b00      	cmp	r3, #0
 800dd5a:	d007      	beq.n	800dd6c <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800dd5c:	68fb      	ldr	r3, [r7, #12]
 800dd5e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800dd60:	f043 0220 	orr.w	r2, r3, #32
 800dd64:	68fb      	ldr	r3, [r7, #12]
 800dd66:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 800dd68:	2303      	movs	r3, #3
 800dd6a:	e023      	b.n	800ddb4 <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800dd6c:	68fb      	ldr	r3, [r7, #12]
 800dd6e:	685b      	ldr	r3, [r3, #4]
 800dd70:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800dd74:	d11d      	bne.n	800ddb2 <SPI_EndRxTransaction+0xa6>
 800dd76:	68fb      	ldr	r3, [r7, #12]
 800dd78:	689b      	ldr	r3, [r3, #8]
 800dd7a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800dd7e:	d004      	beq.n	800dd8a <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800dd80:	68fb      	ldr	r3, [r7, #12]
 800dd82:	689b      	ldr	r3, [r3, #8]
 800dd84:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800dd88:	d113      	bne.n	800ddb2 <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800dd8a:	687b      	ldr	r3, [r7, #4]
 800dd8c:	9300      	str	r3, [sp, #0]
 800dd8e:	68bb      	ldr	r3, [r7, #8]
 800dd90:	2200      	movs	r2, #0
 800dd92:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 800dd96:	68f8      	ldr	r0, [r7, #12]
 800dd98:	f7ff ff22 	bl	800dbe0 <SPI_WaitFifoStateUntilTimeout>
 800dd9c:	4603      	mov	r3, r0
 800dd9e:	2b00      	cmp	r3, #0
 800dda0:	d007      	beq.n	800ddb2 <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800dda2:	68fb      	ldr	r3, [r7, #12]
 800dda4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800dda6:	f043 0220 	orr.w	r2, r3, #32
 800ddaa:	68fb      	ldr	r3, [r7, #12]
 800ddac:	661a      	str	r2, [r3, #96]	@ 0x60
      return HAL_TIMEOUT;
 800ddae:	2303      	movs	r3, #3
 800ddb0:	e000      	b.n	800ddb4 <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 800ddb2:	2300      	movs	r3, #0
}
 800ddb4:	4618      	mov	r0, r3
 800ddb6:	3710      	adds	r7, #16
 800ddb8:	46bd      	mov	sp, r7
 800ddba:	bd80      	pop	{r7, pc}

0800ddbc <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800ddbc:	b580      	push	{r7, lr}
 800ddbe:	b086      	sub	sp, #24
 800ddc0:	af02      	add	r7, sp, #8
 800ddc2:	60f8      	str	r0, [r7, #12]
 800ddc4:	60b9      	str	r1, [r7, #8]
 800ddc6:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800ddc8:	687b      	ldr	r3, [r7, #4]
 800ddca:	9300      	str	r3, [sp, #0]
 800ddcc:	68bb      	ldr	r3, [r7, #8]
 800ddce:	2200      	movs	r2, #0
 800ddd0:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 800ddd4:	68f8      	ldr	r0, [r7, #12]
 800ddd6:	f7ff ff03 	bl	800dbe0 <SPI_WaitFifoStateUntilTimeout>
 800ddda:	4603      	mov	r3, r0
 800dddc:	2b00      	cmp	r3, #0
 800ddde:	d007      	beq.n	800ddf0 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800dde0:	68fb      	ldr	r3, [r7, #12]
 800dde2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800dde4:	f043 0220 	orr.w	r2, r3, #32
 800dde8:	68fb      	ldr	r3, [r7, #12]
 800ddea:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 800ddec:	2303      	movs	r3, #3
 800ddee:	e027      	b.n	800de40 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800ddf0:	687b      	ldr	r3, [r7, #4]
 800ddf2:	9300      	str	r3, [sp, #0]
 800ddf4:	68bb      	ldr	r3, [r7, #8]
 800ddf6:	2200      	movs	r2, #0
 800ddf8:	2180      	movs	r1, #128	@ 0x80
 800ddfa:	68f8      	ldr	r0, [r7, #12]
 800ddfc:	f7ff fe68 	bl	800dad0 <SPI_WaitFlagStateUntilTimeout>
 800de00:	4603      	mov	r3, r0
 800de02:	2b00      	cmp	r3, #0
 800de04:	d007      	beq.n	800de16 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800de06:	68fb      	ldr	r3, [r7, #12]
 800de08:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800de0a:	f043 0220 	orr.w	r2, r3, #32
 800de0e:	68fb      	ldr	r3, [r7, #12]
 800de10:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 800de12:	2303      	movs	r3, #3
 800de14:	e014      	b.n	800de40 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800de16:	687b      	ldr	r3, [r7, #4]
 800de18:	9300      	str	r3, [sp, #0]
 800de1a:	68bb      	ldr	r3, [r7, #8]
 800de1c:	2200      	movs	r2, #0
 800de1e:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 800de22:	68f8      	ldr	r0, [r7, #12]
 800de24:	f7ff fedc 	bl	800dbe0 <SPI_WaitFifoStateUntilTimeout>
 800de28:	4603      	mov	r3, r0
 800de2a:	2b00      	cmp	r3, #0
 800de2c:	d007      	beq.n	800de3e <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800de2e:	68fb      	ldr	r3, [r7, #12]
 800de30:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800de32:	f043 0220 	orr.w	r2, r3, #32
 800de36:	68fb      	ldr	r3, [r7, #12]
 800de38:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 800de3a:	2303      	movs	r3, #3
 800de3c:	e000      	b.n	800de40 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 800de3e:	2300      	movs	r3, #0
}
 800de40:	4618      	mov	r0, r3
 800de42:	3710      	adds	r7, #16
 800de44:	46bd      	mov	sp, r7
 800de46:	bd80      	pop	{r7, pc}

0800de48 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800de48:	b580      	push	{r7, lr}
 800de4a:	b082      	sub	sp, #8
 800de4c:	af00      	add	r7, sp, #0
 800de4e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800de50:	687b      	ldr	r3, [r7, #4]
 800de52:	2b00      	cmp	r3, #0
 800de54:	d101      	bne.n	800de5a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800de56:	2301      	movs	r3, #1
 800de58:	e049      	b.n	800deee <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800de5a:	687b      	ldr	r3, [r7, #4]
 800de5c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800de60:	b2db      	uxtb	r3, r3
 800de62:	2b00      	cmp	r3, #0
 800de64:	d106      	bne.n	800de74 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800de66:	687b      	ldr	r3, [r7, #4]
 800de68:	2200      	movs	r2, #0
 800de6a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800de6e:	6878      	ldr	r0, [r7, #4]
 800de70:	f7f6 fa4a 	bl	8004308 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800de74:	687b      	ldr	r3, [r7, #4]
 800de76:	2202      	movs	r2, #2
 800de78:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800de7c:	687b      	ldr	r3, [r7, #4]
 800de7e:	681a      	ldr	r2, [r3, #0]
 800de80:	687b      	ldr	r3, [r7, #4]
 800de82:	3304      	adds	r3, #4
 800de84:	4619      	mov	r1, r3
 800de86:	4610      	mov	r0, r2
 800de88:	f000 fe76 	bl	800eb78 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800de8c:	687b      	ldr	r3, [r7, #4]
 800de8e:	2201      	movs	r2, #1
 800de90:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800de94:	687b      	ldr	r3, [r7, #4]
 800de96:	2201      	movs	r2, #1
 800de98:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800de9c:	687b      	ldr	r3, [r7, #4]
 800de9e:	2201      	movs	r2, #1
 800dea0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800dea4:	687b      	ldr	r3, [r7, #4]
 800dea6:	2201      	movs	r2, #1
 800dea8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800deac:	687b      	ldr	r3, [r7, #4]
 800deae:	2201      	movs	r2, #1
 800deb0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800deb4:	687b      	ldr	r3, [r7, #4]
 800deb6:	2201      	movs	r2, #1
 800deb8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800debc:	687b      	ldr	r3, [r7, #4]
 800debe:	2201      	movs	r2, #1
 800dec0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800dec4:	687b      	ldr	r3, [r7, #4]
 800dec6:	2201      	movs	r2, #1
 800dec8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800decc:	687b      	ldr	r3, [r7, #4]
 800dece:	2201      	movs	r2, #1
 800ded0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800ded4:	687b      	ldr	r3, [r7, #4]
 800ded6:	2201      	movs	r2, #1
 800ded8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800dedc:	687b      	ldr	r3, [r7, #4]
 800dede:	2201      	movs	r2, #1
 800dee0:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800dee4:	687b      	ldr	r3, [r7, #4]
 800dee6:	2201      	movs	r2, #1
 800dee8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800deec:	2300      	movs	r3, #0
}
 800deee:	4618      	mov	r0, r3
 800def0:	3708      	adds	r7, #8
 800def2:	46bd      	mov	sp, r7
 800def4:	bd80      	pop	{r7, pc}
	...

0800def8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800def8:	b480      	push	{r7}
 800defa:	b085      	sub	sp, #20
 800defc:	af00      	add	r7, sp, #0
 800defe:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800df00:	687b      	ldr	r3, [r7, #4]
 800df02:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800df06:	b2db      	uxtb	r3, r3
 800df08:	2b01      	cmp	r3, #1
 800df0a:	d001      	beq.n	800df10 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800df0c:	2301      	movs	r3, #1
 800df0e:	e04f      	b.n	800dfb0 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800df10:	687b      	ldr	r3, [r7, #4]
 800df12:	2202      	movs	r2, #2
 800df14:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800df18:	687b      	ldr	r3, [r7, #4]
 800df1a:	681b      	ldr	r3, [r3, #0]
 800df1c:	68da      	ldr	r2, [r3, #12]
 800df1e:	687b      	ldr	r3, [r7, #4]
 800df20:	681b      	ldr	r3, [r3, #0]
 800df22:	f042 0201 	orr.w	r2, r2, #1
 800df26:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800df28:	687b      	ldr	r3, [r7, #4]
 800df2a:	681b      	ldr	r3, [r3, #0]
 800df2c:	4a23      	ldr	r2, [pc, #140]	@ (800dfbc <HAL_TIM_Base_Start_IT+0xc4>)
 800df2e:	4293      	cmp	r3, r2
 800df30:	d01d      	beq.n	800df6e <HAL_TIM_Base_Start_IT+0x76>
 800df32:	687b      	ldr	r3, [r7, #4]
 800df34:	681b      	ldr	r3, [r3, #0]
 800df36:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800df3a:	d018      	beq.n	800df6e <HAL_TIM_Base_Start_IT+0x76>
 800df3c:	687b      	ldr	r3, [r7, #4]
 800df3e:	681b      	ldr	r3, [r3, #0]
 800df40:	4a1f      	ldr	r2, [pc, #124]	@ (800dfc0 <HAL_TIM_Base_Start_IT+0xc8>)
 800df42:	4293      	cmp	r3, r2
 800df44:	d013      	beq.n	800df6e <HAL_TIM_Base_Start_IT+0x76>
 800df46:	687b      	ldr	r3, [r7, #4]
 800df48:	681b      	ldr	r3, [r3, #0]
 800df4a:	4a1e      	ldr	r2, [pc, #120]	@ (800dfc4 <HAL_TIM_Base_Start_IT+0xcc>)
 800df4c:	4293      	cmp	r3, r2
 800df4e:	d00e      	beq.n	800df6e <HAL_TIM_Base_Start_IT+0x76>
 800df50:	687b      	ldr	r3, [r7, #4]
 800df52:	681b      	ldr	r3, [r3, #0]
 800df54:	4a1c      	ldr	r2, [pc, #112]	@ (800dfc8 <HAL_TIM_Base_Start_IT+0xd0>)
 800df56:	4293      	cmp	r3, r2
 800df58:	d009      	beq.n	800df6e <HAL_TIM_Base_Start_IT+0x76>
 800df5a:	687b      	ldr	r3, [r7, #4]
 800df5c:	681b      	ldr	r3, [r3, #0]
 800df5e:	4a1b      	ldr	r2, [pc, #108]	@ (800dfcc <HAL_TIM_Base_Start_IT+0xd4>)
 800df60:	4293      	cmp	r3, r2
 800df62:	d004      	beq.n	800df6e <HAL_TIM_Base_Start_IT+0x76>
 800df64:	687b      	ldr	r3, [r7, #4]
 800df66:	681b      	ldr	r3, [r3, #0]
 800df68:	4a19      	ldr	r2, [pc, #100]	@ (800dfd0 <HAL_TIM_Base_Start_IT+0xd8>)
 800df6a:	4293      	cmp	r3, r2
 800df6c:	d115      	bne.n	800df9a <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800df6e:	687b      	ldr	r3, [r7, #4]
 800df70:	681b      	ldr	r3, [r3, #0]
 800df72:	689a      	ldr	r2, [r3, #8]
 800df74:	4b17      	ldr	r3, [pc, #92]	@ (800dfd4 <HAL_TIM_Base_Start_IT+0xdc>)
 800df76:	4013      	ands	r3, r2
 800df78:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800df7a:	68fb      	ldr	r3, [r7, #12]
 800df7c:	2b06      	cmp	r3, #6
 800df7e:	d015      	beq.n	800dfac <HAL_TIM_Base_Start_IT+0xb4>
 800df80:	68fb      	ldr	r3, [r7, #12]
 800df82:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800df86:	d011      	beq.n	800dfac <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800df88:	687b      	ldr	r3, [r7, #4]
 800df8a:	681b      	ldr	r3, [r3, #0]
 800df8c:	681a      	ldr	r2, [r3, #0]
 800df8e:	687b      	ldr	r3, [r7, #4]
 800df90:	681b      	ldr	r3, [r3, #0]
 800df92:	f042 0201 	orr.w	r2, r2, #1
 800df96:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800df98:	e008      	b.n	800dfac <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800df9a:	687b      	ldr	r3, [r7, #4]
 800df9c:	681b      	ldr	r3, [r3, #0]
 800df9e:	681a      	ldr	r2, [r3, #0]
 800dfa0:	687b      	ldr	r3, [r7, #4]
 800dfa2:	681b      	ldr	r3, [r3, #0]
 800dfa4:	f042 0201 	orr.w	r2, r2, #1
 800dfa8:	601a      	str	r2, [r3, #0]
 800dfaa:	e000      	b.n	800dfae <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800dfac:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800dfae:	2300      	movs	r3, #0
}
 800dfb0:	4618      	mov	r0, r3
 800dfb2:	3714      	adds	r7, #20
 800dfb4:	46bd      	mov	sp, r7
 800dfb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dfba:	4770      	bx	lr
 800dfbc:	40012c00 	.word	0x40012c00
 800dfc0:	40000400 	.word	0x40000400
 800dfc4:	40000800 	.word	0x40000800
 800dfc8:	40000c00 	.word	0x40000c00
 800dfcc:	40013400 	.word	0x40013400
 800dfd0:	40014000 	.word	0x40014000
 800dfd4:	00010007 	.word	0x00010007

0800dfd8 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 800dfd8:	b480      	push	{r7}
 800dfda:	b083      	sub	sp, #12
 800dfdc:	af00      	add	r7, sp, #0
 800dfde:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 800dfe0:	687b      	ldr	r3, [r7, #4]
 800dfe2:	681b      	ldr	r3, [r3, #0]
 800dfe4:	68da      	ldr	r2, [r3, #12]
 800dfe6:	687b      	ldr	r3, [r7, #4]
 800dfe8:	681b      	ldr	r3, [r3, #0]
 800dfea:	f022 0201 	bic.w	r2, r2, #1
 800dfee:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800dff0:	687b      	ldr	r3, [r7, #4]
 800dff2:	681b      	ldr	r3, [r3, #0]
 800dff4:	6a1a      	ldr	r2, [r3, #32]
 800dff6:	f241 1311 	movw	r3, #4369	@ 0x1111
 800dffa:	4013      	ands	r3, r2
 800dffc:	2b00      	cmp	r3, #0
 800dffe:	d10f      	bne.n	800e020 <HAL_TIM_Base_Stop_IT+0x48>
 800e000:	687b      	ldr	r3, [r7, #4]
 800e002:	681b      	ldr	r3, [r3, #0]
 800e004:	6a1a      	ldr	r2, [r3, #32]
 800e006:	f240 4344 	movw	r3, #1092	@ 0x444
 800e00a:	4013      	ands	r3, r2
 800e00c:	2b00      	cmp	r3, #0
 800e00e:	d107      	bne.n	800e020 <HAL_TIM_Base_Stop_IT+0x48>
 800e010:	687b      	ldr	r3, [r7, #4]
 800e012:	681b      	ldr	r3, [r3, #0]
 800e014:	681a      	ldr	r2, [r3, #0]
 800e016:	687b      	ldr	r3, [r7, #4]
 800e018:	681b      	ldr	r3, [r3, #0]
 800e01a:	f022 0201 	bic.w	r2, r2, #1
 800e01e:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 800e020:	687b      	ldr	r3, [r7, #4]
 800e022:	2201      	movs	r2, #1
 800e024:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Return function status */
  return HAL_OK;
 800e028:	2300      	movs	r3, #0
}
 800e02a:	4618      	mov	r0, r3
 800e02c:	370c      	adds	r7, #12
 800e02e:	46bd      	mov	sp, r7
 800e030:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e034:	4770      	bx	lr

0800e036 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 800e036:	b580      	push	{r7, lr}
 800e038:	b082      	sub	sp, #8
 800e03a:	af00      	add	r7, sp, #0
 800e03c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800e03e:	687b      	ldr	r3, [r7, #4]
 800e040:	2b00      	cmp	r3, #0
 800e042:	d101      	bne.n	800e048 <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 800e044:	2301      	movs	r3, #1
 800e046:	e049      	b.n	800e0dc <HAL_TIM_OC_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800e048:	687b      	ldr	r3, [r7, #4]
 800e04a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800e04e:	b2db      	uxtb	r3, r3
 800e050:	2b00      	cmp	r3, #0
 800e052:	d106      	bne.n	800e062 <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800e054:	687b      	ldr	r3, [r7, #4]
 800e056:	2200      	movs	r2, #0
 800e058:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 800e05c:	6878      	ldr	r0, [r7, #4]
 800e05e:	f7f6 f8f3 	bl	8004248 <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800e062:	687b      	ldr	r3, [r7, #4]
 800e064:	2202      	movs	r2, #2
 800e066:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 800e06a:	687b      	ldr	r3, [r7, #4]
 800e06c:	681a      	ldr	r2, [r3, #0]
 800e06e:	687b      	ldr	r3, [r7, #4]
 800e070:	3304      	adds	r3, #4
 800e072:	4619      	mov	r1, r3
 800e074:	4610      	mov	r0, r2
 800e076:	f000 fd7f 	bl	800eb78 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800e07a:	687b      	ldr	r3, [r7, #4]
 800e07c:	2201      	movs	r2, #1
 800e07e:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800e082:	687b      	ldr	r3, [r7, #4]
 800e084:	2201      	movs	r2, #1
 800e086:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800e08a:	687b      	ldr	r3, [r7, #4]
 800e08c:	2201      	movs	r2, #1
 800e08e:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800e092:	687b      	ldr	r3, [r7, #4]
 800e094:	2201      	movs	r2, #1
 800e096:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800e09a:	687b      	ldr	r3, [r7, #4]
 800e09c:	2201      	movs	r2, #1
 800e09e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800e0a2:	687b      	ldr	r3, [r7, #4]
 800e0a4:	2201      	movs	r2, #1
 800e0a6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800e0aa:	687b      	ldr	r3, [r7, #4]
 800e0ac:	2201      	movs	r2, #1
 800e0ae:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800e0b2:	687b      	ldr	r3, [r7, #4]
 800e0b4:	2201      	movs	r2, #1
 800e0b6:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800e0ba:	687b      	ldr	r3, [r7, #4]
 800e0bc:	2201      	movs	r2, #1
 800e0be:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800e0c2:	687b      	ldr	r3, [r7, #4]
 800e0c4:	2201      	movs	r2, #1
 800e0c6:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800e0ca:	687b      	ldr	r3, [r7, #4]
 800e0cc:	2201      	movs	r2, #1
 800e0ce:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800e0d2:	687b      	ldr	r3, [r7, #4]
 800e0d4:	2201      	movs	r2, #1
 800e0d6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800e0da:	2300      	movs	r3, #0
}
 800e0dc:	4618      	mov	r0, r3
 800e0de:	3708      	adds	r7, #8
 800e0e0:	46bd      	mov	sp, r7
 800e0e2:	bd80      	pop	{r7, pc}

0800e0e4 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800e0e4:	b580      	push	{r7, lr}
 800e0e6:	b082      	sub	sp, #8
 800e0e8:	af00      	add	r7, sp, #0
 800e0ea:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800e0ec:	687b      	ldr	r3, [r7, #4]
 800e0ee:	2b00      	cmp	r3, #0
 800e0f0:	d101      	bne.n	800e0f6 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800e0f2:	2301      	movs	r3, #1
 800e0f4:	e049      	b.n	800e18a <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800e0f6:	687b      	ldr	r3, [r7, #4]
 800e0f8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800e0fc:	b2db      	uxtb	r3, r3
 800e0fe:	2b00      	cmp	r3, #0
 800e100:	d106      	bne.n	800e110 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800e102:	687b      	ldr	r3, [r7, #4]
 800e104:	2200      	movs	r2, #0
 800e106:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800e10a:	6878      	ldr	r0, [r7, #4]
 800e10c:	f000 f841 	bl	800e192 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800e110:	687b      	ldr	r3, [r7, #4]
 800e112:	2202      	movs	r2, #2
 800e114:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800e118:	687b      	ldr	r3, [r7, #4]
 800e11a:	681a      	ldr	r2, [r3, #0]
 800e11c:	687b      	ldr	r3, [r7, #4]
 800e11e:	3304      	adds	r3, #4
 800e120:	4619      	mov	r1, r3
 800e122:	4610      	mov	r0, r2
 800e124:	f000 fd28 	bl	800eb78 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800e128:	687b      	ldr	r3, [r7, #4]
 800e12a:	2201      	movs	r2, #1
 800e12c:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800e130:	687b      	ldr	r3, [r7, #4]
 800e132:	2201      	movs	r2, #1
 800e134:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800e138:	687b      	ldr	r3, [r7, #4]
 800e13a:	2201      	movs	r2, #1
 800e13c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800e140:	687b      	ldr	r3, [r7, #4]
 800e142:	2201      	movs	r2, #1
 800e144:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800e148:	687b      	ldr	r3, [r7, #4]
 800e14a:	2201      	movs	r2, #1
 800e14c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800e150:	687b      	ldr	r3, [r7, #4]
 800e152:	2201      	movs	r2, #1
 800e154:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800e158:	687b      	ldr	r3, [r7, #4]
 800e15a:	2201      	movs	r2, #1
 800e15c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800e160:	687b      	ldr	r3, [r7, #4]
 800e162:	2201      	movs	r2, #1
 800e164:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800e168:	687b      	ldr	r3, [r7, #4]
 800e16a:	2201      	movs	r2, #1
 800e16c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800e170:	687b      	ldr	r3, [r7, #4]
 800e172:	2201      	movs	r2, #1
 800e174:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800e178:	687b      	ldr	r3, [r7, #4]
 800e17a:	2201      	movs	r2, #1
 800e17c:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800e180:	687b      	ldr	r3, [r7, #4]
 800e182:	2201      	movs	r2, #1
 800e184:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800e188:	2300      	movs	r3, #0
}
 800e18a:	4618      	mov	r0, r3
 800e18c:	3708      	adds	r7, #8
 800e18e:	46bd      	mov	sp, r7
 800e190:	bd80      	pop	{r7, pc}

0800e192 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800e192:	b480      	push	{r7}
 800e194:	b083      	sub	sp, #12
 800e196:	af00      	add	r7, sp, #0
 800e198:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800e19a:	bf00      	nop
 800e19c:	370c      	adds	r7, #12
 800e19e:	46bd      	mov	sp, r7
 800e1a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e1a4:	4770      	bx	lr
	...

0800e1a8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800e1a8:	b580      	push	{r7, lr}
 800e1aa:	b084      	sub	sp, #16
 800e1ac:	af00      	add	r7, sp, #0
 800e1ae:	6078      	str	r0, [r7, #4]
 800e1b0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800e1b2:	683b      	ldr	r3, [r7, #0]
 800e1b4:	2b00      	cmp	r3, #0
 800e1b6:	d109      	bne.n	800e1cc <HAL_TIM_PWM_Start+0x24>
 800e1b8:	687b      	ldr	r3, [r7, #4]
 800e1ba:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800e1be:	b2db      	uxtb	r3, r3
 800e1c0:	2b01      	cmp	r3, #1
 800e1c2:	bf14      	ite	ne
 800e1c4:	2301      	movne	r3, #1
 800e1c6:	2300      	moveq	r3, #0
 800e1c8:	b2db      	uxtb	r3, r3
 800e1ca:	e03c      	b.n	800e246 <HAL_TIM_PWM_Start+0x9e>
 800e1cc:	683b      	ldr	r3, [r7, #0]
 800e1ce:	2b04      	cmp	r3, #4
 800e1d0:	d109      	bne.n	800e1e6 <HAL_TIM_PWM_Start+0x3e>
 800e1d2:	687b      	ldr	r3, [r7, #4]
 800e1d4:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800e1d8:	b2db      	uxtb	r3, r3
 800e1da:	2b01      	cmp	r3, #1
 800e1dc:	bf14      	ite	ne
 800e1de:	2301      	movne	r3, #1
 800e1e0:	2300      	moveq	r3, #0
 800e1e2:	b2db      	uxtb	r3, r3
 800e1e4:	e02f      	b.n	800e246 <HAL_TIM_PWM_Start+0x9e>
 800e1e6:	683b      	ldr	r3, [r7, #0]
 800e1e8:	2b08      	cmp	r3, #8
 800e1ea:	d109      	bne.n	800e200 <HAL_TIM_PWM_Start+0x58>
 800e1ec:	687b      	ldr	r3, [r7, #4]
 800e1ee:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800e1f2:	b2db      	uxtb	r3, r3
 800e1f4:	2b01      	cmp	r3, #1
 800e1f6:	bf14      	ite	ne
 800e1f8:	2301      	movne	r3, #1
 800e1fa:	2300      	moveq	r3, #0
 800e1fc:	b2db      	uxtb	r3, r3
 800e1fe:	e022      	b.n	800e246 <HAL_TIM_PWM_Start+0x9e>
 800e200:	683b      	ldr	r3, [r7, #0]
 800e202:	2b0c      	cmp	r3, #12
 800e204:	d109      	bne.n	800e21a <HAL_TIM_PWM_Start+0x72>
 800e206:	687b      	ldr	r3, [r7, #4]
 800e208:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800e20c:	b2db      	uxtb	r3, r3
 800e20e:	2b01      	cmp	r3, #1
 800e210:	bf14      	ite	ne
 800e212:	2301      	movne	r3, #1
 800e214:	2300      	moveq	r3, #0
 800e216:	b2db      	uxtb	r3, r3
 800e218:	e015      	b.n	800e246 <HAL_TIM_PWM_Start+0x9e>
 800e21a:	683b      	ldr	r3, [r7, #0]
 800e21c:	2b10      	cmp	r3, #16
 800e21e:	d109      	bne.n	800e234 <HAL_TIM_PWM_Start+0x8c>
 800e220:	687b      	ldr	r3, [r7, #4]
 800e222:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800e226:	b2db      	uxtb	r3, r3
 800e228:	2b01      	cmp	r3, #1
 800e22a:	bf14      	ite	ne
 800e22c:	2301      	movne	r3, #1
 800e22e:	2300      	moveq	r3, #0
 800e230:	b2db      	uxtb	r3, r3
 800e232:	e008      	b.n	800e246 <HAL_TIM_PWM_Start+0x9e>
 800e234:	687b      	ldr	r3, [r7, #4]
 800e236:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800e23a:	b2db      	uxtb	r3, r3
 800e23c:	2b01      	cmp	r3, #1
 800e23e:	bf14      	ite	ne
 800e240:	2301      	movne	r3, #1
 800e242:	2300      	moveq	r3, #0
 800e244:	b2db      	uxtb	r3, r3
 800e246:	2b00      	cmp	r3, #0
 800e248:	d001      	beq.n	800e24e <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800e24a:	2301      	movs	r3, #1
 800e24c:	e09c      	b.n	800e388 <HAL_TIM_PWM_Start+0x1e0>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800e24e:	683b      	ldr	r3, [r7, #0]
 800e250:	2b00      	cmp	r3, #0
 800e252:	d104      	bne.n	800e25e <HAL_TIM_PWM_Start+0xb6>
 800e254:	687b      	ldr	r3, [r7, #4]
 800e256:	2202      	movs	r2, #2
 800e258:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800e25c:	e023      	b.n	800e2a6 <HAL_TIM_PWM_Start+0xfe>
 800e25e:	683b      	ldr	r3, [r7, #0]
 800e260:	2b04      	cmp	r3, #4
 800e262:	d104      	bne.n	800e26e <HAL_TIM_PWM_Start+0xc6>
 800e264:	687b      	ldr	r3, [r7, #4]
 800e266:	2202      	movs	r2, #2
 800e268:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800e26c:	e01b      	b.n	800e2a6 <HAL_TIM_PWM_Start+0xfe>
 800e26e:	683b      	ldr	r3, [r7, #0]
 800e270:	2b08      	cmp	r3, #8
 800e272:	d104      	bne.n	800e27e <HAL_TIM_PWM_Start+0xd6>
 800e274:	687b      	ldr	r3, [r7, #4]
 800e276:	2202      	movs	r2, #2
 800e278:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800e27c:	e013      	b.n	800e2a6 <HAL_TIM_PWM_Start+0xfe>
 800e27e:	683b      	ldr	r3, [r7, #0]
 800e280:	2b0c      	cmp	r3, #12
 800e282:	d104      	bne.n	800e28e <HAL_TIM_PWM_Start+0xe6>
 800e284:	687b      	ldr	r3, [r7, #4]
 800e286:	2202      	movs	r2, #2
 800e288:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800e28c:	e00b      	b.n	800e2a6 <HAL_TIM_PWM_Start+0xfe>
 800e28e:	683b      	ldr	r3, [r7, #0]
 800e290:	2b10      	cmp	r3, #16
 800e292:	d104      	bne.n	800e29e <HAL_TIM_PWM_Start+0xf6>
 800e294:	687b      	ldr	r3, [r7, #4]
 800e296:	2202      	movs	r2, #2
 800e298:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800e29c:	e003      	b.n	800e2a6 <HAL_TIM_PWM_Start+0xfe>
 800e29e:	687b      	ldr	r3, [r7, #4]
 800e2a0:	2202      	movs	r2, #2
 800e2a2:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800e2a6:	687b      	ldr	r3, [r7, #4]
 800e2a8:	681b      	ldr	r3, [r3, #0]
 800e2aa:	2201      	movs	r2, #1
 800e2ac:	6839      	ldr	r1, [r7, #0]
 800e2ae:	4618      	mov	r0, r3
 800e2b0:	f001 f99c 	bl	800f5ec <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800e2b4:	687b      	ldr	r3, [r7, #4]
 800e2b6:	681b      	ldr	r3, [r3, #0]
 800e2b8:	4a35      	ldr	r2, [pc, #212]	@ (800e390 <HAL_TIM_PWM_Start+0x1e8>)
 800e2ba:	4293      	cmp	r3, r2
 800e2bc:	d013      	beq.n	800e2e6 <HAL_TIM_PWM_Start+0x13e>
 800e2be:	687b      	ldr	r3, [r7, #4]
 800e2c0:	681b      	ldr	r3, [r3, #0]
 800e2c2:	4a34      	ldr	r2, [pc, #208]	@ (800e394 <HAL_TIM_PWM_Start+0x1ec>)
 800e2c4:	4293      	cmp	r3, r2
 800e2c6:	d00e      	beq.n	800e2e6 <HAL_TIM_PWM_Start+0x13e>
 800e2c8:	687b      	ldr	r3, [r7, #4]
 800e2ca:	681b      	ldr	r3, [r3, #0]
 800e2cc:	4a32      	ldr	r2, [pc, #200]	@ (800e398 <HAL_TIM_PWM_Start+0x1f0>)
 800e2ce:	4293      	cmp	r3, r2
 800e2d0:	d009      	beq.n	800e2e6 <HAL_TIM_PWM_Start+0x13e>
 800e2d2:	687b      	ldr	r3, [r7, #4]
 800e2d4:	681b      	ldr	r3, [r3, #0]
 800e2d6:	4a31      	ldr	r2, [pc, #196]	@ (800e39c <HAL_TIM_PWM_Start+0x1f4>)
 800e2d8:	4293      	cmp	r3, r2
 800e2da:	d004      	beq.n	800e2e6 <HAL_TIM_PWM_Start+0x13e>
 800e2dc:	687b      	ldr	r3, [r7, #4]
 800e2de:	681b      	ldr	r3, [r3, #0]
 800e2e0:	4a2f      	ldr	r2, [pc, #188]	@ (800e3a0 <HAL_TIM_PWM_Start+0x1f8>)
 800e2e2:	4293      	cmp	r3, r2
 800e2e4:	d101      	bne.n	800e2ea <HAL_TIM_PWM_Start+0x142>
 800e2e6:	2301      	movs	r3, #1
 800e2e8:	e000      	b.n	800e2ec <HAL_TIM_PWM_Start+0x144>
 800e2ea:	2300      	movs	r3, #0
 800e2ec:	2b00      	cmp	r3, #0
 800e2ee:	d007      	beq.n	800e300 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800e2f0:	687b      	ldr	r3, [r7, #4]
 800e2f2:	681b      	ldr	r3, [r3, #0]
 800e2f4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800e2f6:	687b      	ldr	r3, [r7, #4]
 800e2f8:	681b      	ldr	r3, [r3, #0]
 800e2fa:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800e2fe:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800e300:	687b      	ldr	r3, [r7, #4]
 800e302:	681b      	ldr	r3, [r3, #0]
 800e304:	4a22      	ldr	r2, [pc, #136]	@ (800e390 <HAL_TIM_PWM_Start+0x1e8>)
 800e306:	4293      	cmp	r3, r2
 800e308:	d01d      	beq.n	800e346 <HAL_TIM_PWM_Start+0x19e>
 800e30a:	687b      	ldr	r3, [r7, #4]
 800e30c:	681b      	ldr	r3, [r3, #0]
 800e30e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800e312:	d018      	beq.n	800e346 <HAL_TIM_PWM_Start+0x19e>
 800e314:	687b      	ldr	r3, [r7, #4]
 800e316:	681b      	ldr	r3, [r3, #0]
 800e318:	4a22      	ldr	r2, [pc, #136]	@ (800e3a4 <HAL_TIM_PWM_Start+0x1fc>)
 800e31a:	4293      	cmp	r3, r2
 800e31c:	d013      	beq.n	800e346 <HAL_TIM_PWM_Start+0x19e>
 800e31e:	687b      	ldr	r3, [r7, #4]
 800e320:	681b      	ldr	r3, [r3, #0]
 800e322:	4a21      	ldr	r2, [pc, #132]	@ (800e3a8 <HAL_TIM_PWM_Start+0x200>)
 800e324:	4293      	cmp	r3, r2
 800e326:	d00e      	beq.n	800e346 <HAL_TIM_PWM_Start+0x19e>
 800e328:	687b      	ldr	r3, [r7, #4]
 800e32a:	681b      	ldr	r3, [r3, #0]
 800e32c:	4a1f      	ldr	r2, [pc, #124]	@ (800e3ac <HAL_TIM_PWM_Start+0x204>)
 800e32e:	4293      	cmp	r3, r2
 800e330:	d009      	beq.n	800e346 <HAL_TIM_PWM_Start+0x19e>
 800e332:	687b      	ldr	r3, [r7, #4]
 800e334:	681b      	ldr	r3, [r3, #0]
 800e336:	4a17      	ldr	r2, [pc, #92]	@ (800e394 <HAL_TIM_PWM_Start+0x1ec>)
 800e338:	4293      	cmp	r3, r2
 800e33a:	d004      	beq.n	800e346 <HAL_TIM_PWM_Start+0x19e>
 800e33c:	687b      	ldr	r3, [r7, #4]
 800e33e:	681b      	ldr	r3, [r3, #0]
 800e340:	4a15      	ldr	r2, [pc, #84]	@ (800e398 <HAL_TIM_PWM_Start+0x1f0>)
 800e342:	4293      	cmp	r3, r2
 800e344:	d115      	bne.n	800e372 <HAL_TIM_PWM_Start+0x1ca>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800e346:	687b      	ldr	r3, [r7, #4]
 800e348:	681b      	ldr	r3, [r3, #0]
 800e34a:	689a      	ldr	r2, [r3, #8]
 800e34c:	4b18      	ldr	r3, [pc, #96]	@ (800e3b0 <HAL_TIM_PWM_Start+0x208>)
 800e34e:	4013      	ands	r3, r2
 800e350:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800e352:	68fb      	ldr	r3, [r7, #12]
 800e354:	2b06      	cmp	r3, #6
 800e356:	d015      	beq.n	800e384 <HAL_TIM_PWM_Start+0x1dc>
 800e358:	68fb      	ldr	r3, [r7, #12]
 800e35a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800e35e:	d011      	beq.n	800e384 <HAL_TIM_PWM_Start+0x1dc>
    {
      __HAL_TIM_ENABLE(htim);
 800e360:	687b      	ldr	r3, [r7, #4]
 800e362:	681b      	ldr	r3, [r3, #0]
 800e364:	681a      	ldr	r2, [r3, #0]
 800e366:	687b      	ldr	r3, [r7, #4]
 800e368:	681b      	ldr	r3, [r3, #0]
 800e36a:	f042 0201 	orr.w	r2, r2, #1
 800e36e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800e370:	e008      	b.n	800e384 <HAL_TIM_PWM_Start+0x1dc>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800e372:	687b      	ldr	r3, [r7, #4]
 800e374:	681b      	ldr	r3, [r3, #0]
 800e376:	681a      	ldr	r2, [r3, #0]
 800e378:	687b      	ldr	r3, [r7, #4]
 800e37a:	681b      	ldr	r3, [r3, #0]
 800e37c:	f042 0201 	orr.w	r2, r2, #1
 800e380:	601a      	str	r2, [r3, #0]
 800e382:	e000      	b.n	800e386 <HAL_TIM_PWM_Start+0x1de>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800e384:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800e386:	2300      	movs	r3, #0
}
 800e388:	4618      	mov	r0, r3
 800e38a:	3710      	adds	r7, #16
 800e38c:	46bd      	mov	sp, r7
 800e38e:	bd80      	pop	{r7, pc}
 800e390:	40012c00 	.word	0x40012c00
 800e394:	40013400 	.word	0x40013400
 800e398:	40014000 	.word	0x40014000
 800e39c:	40014400 	.word	0x40014400
 800e3a0:	40014800 	.word	0x40014800
 800e3a4:	40000400 	.word	0x40000400
 800e3a8:	40000800 	.word	0x40000800
 800e3ac:	40000c00 	.word	0x40000c00
 800e3b0:	00010007 	.word	0x00010007

0800e3b4 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800e3b4:	b580      	push	{r7, lr}
 800e3b6:	b082      	sub	sp, #8
 800e3b8:	af00      	add	r7, sp, #0
 800e3ba:	6078      	str	r0, [r7, #4]
 800e3bc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 800e3be:	687b      	ldr	r3, [r7, #4]
 800e3c0:	681b      	ldr	r3, [r3, #0]
 800e3c2:	2200      	movs	r2, #0
 800e3c4:	6839      	ldr	r1, [r7, #0]
 800e3c6:	4618      	mov	r0, r3
 800e3c8:	f001 f910 	bl	800f5ec <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800e3cc:	687b      	ldr	r3, [r7, #4]
 800e3ce:	681b      	ldr	r3, [r3, #0]
 800e3d0:	4a3e      	ldr	r2, [pc, #248]	@ (800e4cc <HAL_TIM_PWM_Stop+0x118>)
 800e3d2:	4293      	cmp	r3, r2
 800e3d4:	d013      	beq.n	800e3fe <HAL_TIM_PWM_Stop+0x4a>
 800e3d6:	687b      	ldr	r3, [r7, #4]
 800e3d8:	681b      	ldr	r3, [r3, #0]
 800e3da:	4a3d      	ldr	r2, [pc, #244]	@ (800e4d0 <HAL_TIM_PWM_Stop+0x11c>)
 800e3dc:	4293      	cmp	r3, r2
 800e3de:	d00e      	beq.n	800e3fe <HAL_TIM_PWM_Stop+0x4a>
 800e3e0:	687b      	ldr	r3, [r7, #4]
 800e3e2:	681b      	ldr	r3, [r3, #0]
 800e3e4:	4a3b      	ldr	r2, [pc, #236]	@ (800e4d4 <HAL_TIM_PWM_Stop+0x120>)
 800e3e6:	4293      	cmp	r3, r2
 800e3e8:	d009      	beq.n	800e3fe <HAL_TIM_PWM_Stop+0x4a>
 800e3ea:	687b      	ldr	r3, [r7, #4]
 800e3ec:	681b      	ldr	r3, [r3, #0]
 800e3ee:	4a3a      	ldr	r2, [pc, #232]	@ (800e4d8 <HAL_TIM_PWM_Stop+0x124>)
 800e3f0:	4293      	cmp	r3, r2
 800e3f2:	d004      	beq.n	800e3fe <HAL_TIM_PWM_Stop+0x4a>
 800e3f4:	687b      	ldr	r3, [r7, #4]
 800e3f6:	681b      	ldr	r3, [r3, #0]
 800e3f8:	4a38      	ldr	r2, [pc, #224]	@ (800e4dc <HAL_TIM_PWM_Stop+0x128>)
 800e3fa:	4293      	cmp	r3, r2
 800e3fc:	d101      	bne.n	800e402 <HAL_TIM_PWM_Stop+0x4e>
 800e3fe:	2301      	movs	r3, #1
 800e400:	e000      	b.n	800e404 <HAL_TIM_PWM_Stop+0x50>
 800e402:	2300      	movs	r3, #0
 800e404:	2b00      	cmp	r3, #0
 800e406:	d017      	beq.n	800e438 <HAL_TIM_PWM_Stop+0x84>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 800e408:	687b      	ldr	r3, [r7, #4]
 800e40a:	681b      	ldr	r3, [r3, #0]
 800e40c:	6a1a      	ldr	r2, [r3, #32]
 800e40e:	f241 1311 	movw	r3, #4369	@ 0x1111
 800e412:	4013      	ands	r3, r2
 800e414:	2b00      	cmp	r3, #0
 800e416:	d10f      	bne.n	800e438 <HAL_TIM_PWM_Stop+0x84>
 800e418:	687b      	ldr	r3, [r7, #4]
 800e41a:	681b      	ldr	r3, [r3, #0]
 800e41c:	6a1a      	ldr	r2, [r3, #32]
 800e41e:	f240 4344 	movw	r3, #1092	@ 0x444
 800e422:	4013      	ands	r3, r2
 800e424:	2b00      	cmp	r3, #0
 800e426:	d107      	bne.n	800e438 <HAL_TIM_PWM_Stop+0x84>
 800e428:	687b      	ldr	r3, [r7, #4]
 800e42a:	681b      	ldr	r3, [r3, #0]
 800e42c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800e42e:	687b      	ldr	r3, [r7, #4]
 800e430:	681b      	ldr	r3, [r3, #0]
 800e432:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800e436:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800e438:	687b      	ldr	r3, [r7, #4]
 800e43a:	681b      	ldr	r3, [r3, #0]
 800e43c:	6a1a      	ldr	r2, [r3, #32]
 800e43e:	f241 1311 	movw	r3, #4369	@ 0x1111
 800e442:	4013      	ands	r3, r2
 800e444:	2b00      	cmp	r3, #0
 800e446:	d10f      	bne.n	800e468 <HAL_TIM_PWM_Stop+0xb4>
 800e448:	687b      	ldr	r3, [r7, #4]
 800e44a:	681b      	ldr	r3, [r3, #0]
 800e44c:	6a1a      	ldr	r2, [r3, #32]
 800e44e:	f240 4344 	movw	r3, #1092	@ 0x444
 800e452:	4013      	ands	r3, r2
 800e454:	2b00      	cmp	r3, #0
 800e456:	d107      	bne.n	800e468 <HAL_TIM_PWM_Stop+0xb4>
 800e458:	687b      	ldr	r3, [r7, #4]
 800e45a:	681b      	ldr	r3, [r3, #0]
 800e45c:	681a      	ldr	r2, [r3, #0]
 800e45e:	687b      	ldr	r3, [r7, #4]
 800e460:	681b      	ldr	r3, [r3, #0]
 800e462:	f022 0201 	bic.w	r2, r2, #1
 800e466:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800e468:	683b      	ldr	r3, [r7, #0]
 800e46a:	2b00      	cmp	r3, #0
 800e46c:	d104      	bne.n	800e478 <HAL_TIM_PWM_Stop+0xc4>
 800e46e:	687b      	ldr	r3, [r7, #4]
 800e470:	2201      	movs	r2, #1
 800e472:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800e476:	e023      	b.n	800e4c0 <HAL_TIM_PWM_Stop+0x10c>
 800e478:	683b      	ldr	r3, [r7, #0]
 800e47a:	2b04      	cmp	r3, #4
 800e47c:	d104      	bne.n	800e488 <HAL_TIM_PWM_Stop+0xd4>
 800e47e:	687b      	ldr	r3, [r7, #4]
 800e480:	2201      	movs	r2, #1
 800e482:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800e486:	e01b      	b.n	800e4c0 <HAL_TIM_PWM_Stop+0x10c>
 800e488:	683b      	ldr	r3, [r7, #0]
 800e48a:	2b08      	cmp	r3, #8
 800e48c:	d104      	bne.n	800e498 <HAL_TIM_PWM_Stop+0xe4>
 800e48e:	687b      	ldr	r3, [r7, #4]
 800e490:	2201      	movs	r2, #1
 800e492:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800e496:	e013      	b.n	800e4c0 <HAL_TIM_PWM_Stop+0x10c>
 800e498:	683b      	ldr	r3, [r7, #0]
 800e49a:	2b0c      	cmp	r3, #12
 800e49c:	d104      	bne.n	800e4a8 <HAL_TIM_PWM_Stop+0xf4>
 800e49e:	687b      	ldr	r3, [r7, #4]
 800e4a0:	2201      	movs	r2, #1
 800e4a2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800e4a6:	e00b      	b.n	800e4c0 <HAL_TIM_PWM_Stop+0x10c>
 800e4a8:	683b      	ldr	r3, [r7, #0]
 800e4aa:	2b10      	cmp	r3, #16
 800e4ac:	d104      	bne.n	800e4b8 <HAL_TIM_PWM_Stop+0x104>
 800e4ae:	687b      	ldr	r3, [r7, #4]
 800e4b0:	2201      	movs	r2, #1
 800e4b2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800e4b6:	e003      	b.n	800e4c0 <HAL_TIM_PWM_Stop+0x10c>
 800e4b8:	687b      	ldr	r3, [r7, #4]
 800e4ba:	2201      	movs	r2, #1
 800e4bc:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Return function status */
  return HAL_OK;
 800e4c0:	2300      	movs	r3, #0
}
 800e4c2:	4618      	mov	r0, r3
 800e4c4:	3708      	adds	r7, #8
 800e4c6:	46bd      	mov	sp, r7
 800e4c8:	bd80      	pop	{r7, pc}
 800e4ca:	bf00      	nop
 800e4cc:	40012c00 	.word	0x40012c00
 800e4d0:	40013400 	.word	0x40013400
 800e4d4:	40014000 	.word	0x40014000
 800e4d8:	40014400 	.word	0x40014400
 800e4dc:	40014800 	.word	0x40014800

0800e4e0 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 800e4e0:	b580      	push	{r7, lr}
 800e4e2:	b082      	sub	sp, #8
 800e4e4:	af00      	add	r7, sp, #0
 800e4e6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800e4e8:	687b      	ldr	r3, [r7, #4]
 800e4ea:	2b00      	cmp	r3, #0
 800e4ec:	d101      	bne.n	800e4f2 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 800e4ee:	2301      	movs	r3, #1
 800e4f0:	e049      	b.n	800e586 <HAL_TIM_IC_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800e4f2:	687b      	ldr	r3, [r7, #4]
 800e4f4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800e4f8:	b2db      	uxtb	r3, r3
 800e4fa:	2b00      	cmp	r3, #0
 800e4fc:	d106      	bne.n	800e50c <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800e4fe:	687b      	ldr	r3, [r7, #4]
 800e500:	2200      	movs	r2, #0
 800e502:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 800e506:	6878      	ldr	r0, [r7, #4]
 800e508:	f7f5 febe 	bl	8004288 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800e50c:	687b      	ldr	r3, [r7, #4]
 800e50e:	2202      	movs	r2, #2
 800e510:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800e514:	687b      	ldr	r3, [r7, #4]
 800e516:	681a      	ldr	r2, [r3, #0]
 800e518:	687b      	ldr	r3, [r7, #4]
 800e51a:	3304      	adds	r3, #4
 800e51c:	4619      	mov	r1, r3
 800e51e:	4610      	mov	r0, r2
 800e520:	f000 fb2a 	bl	800eb78 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800e524:	687b      	ldr	r3, [r7, #4]
 800e526:	2201      	movs	r2, #1
 800e528:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800e52c:	687b      	ldr	r3, [r7, #4]
 800e52e:	2201      	movs	r2, #1
 800e530:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800e534:	687b      	ldr	r3, [r7, #4]
 800e536:	2201      	movs	r2, #1
 800e538:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800e53c:	687b      	ldr	r3, [r7, #4]
 800e53e:	2201      	movs	r2, #1
 800e540:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800e544:	687b      	ldr	r3, [r7, #4]
 800e546:	2201      	movs	r2, #1
 800e548:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800e54c:	687b      	ldr	r3, [r7, #4]
 800e54e:	2201      	movs	r2, #1
 800e550:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800e554:	687b      	ldr	r3, [r7, #4]
 800e556:	2201      	movs	r2, #1
 800e558:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800e55c:	687b      	ldr	r3, [r7, #4]
 800e55e:	2201      	movs	r2, #1
 800e560:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800e564:	687b      	ldr	r3, [r7, #4]
 800e566:	2201      	movs	r2, #1
 800e568:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800e56c:	687b      	ldr	r3, [r7, #4]
 800e56e:	2201      	movs	r2, #1
 800e570:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800e574:	687b      	ldr	r3, [r7, #4]
 800e576:	2201      	movs	r2, #1
 800e578:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800e57c:	687b      	ldr	r3, [r7, #4]
 800e57e:	2201      	movs	r2, #1
 800e580:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800e584:	2300      	movs	r3, #0
}
 800e586:	4618      	mov	r0, r3
 800e588:	3708      	adds	r7, #8
 800e58a:	46bd      	mov	sp, r7
 800e58c:	bd80      	pop	{r7, pc}
	...

0800e590 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           const TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 800e590:	b580      	push	{r7, lr}
 800e592:	b086      	sub	sp, #24
 800e594:	af00      	add	r7, sp, #0
 800e596:	60f8      	str	r0, [r7, #12]
 800e598:	60b9      	str	r1, [r7, #8]
 800e59a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800e59c:	2300      	movs	r3, #0
 800e59e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 800e5a0:	68fb      	ldr	r3, [r7, #12]
 800e5a2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800e5a6:	2b01      	cmp	r3, #1
 800e5a8:	d101      	bne.n	800e5ae <HAL_TIM_OC_ConfigChannel+0x1e>
 800e5aa:	2302      	movs	r3, #2
 800e5ac:	e066      	b.n	800e67c <HAL_TIM_OC_ConfigChannel+0xec>
 800e5ae:	68fb      	ldr	r3, [r7, #12]
 800e5b0:	2201      	movs	r2, #1
 800e5b2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800e5b6:	687b      	ldr	r3, [r7, #4]
 800e5b8:	2b14      	cmp	r3, #20
 800e5ba:	d857      	bhi.n	800e66c <HAL_TIM_OC_ConfigChannel+0xdc>
 800e5bc:	a201      	add	r2, pc, #4	@ (adr r2, 800e5c4 <HAL_TIM_OC_ConfigChannel+0x34>)
 800e5be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e5c2:	bf00      	nop
 800e5c4:	0800e619 	.word	0x0800e619
 800e5c8:	0800e66d 	.word	0x0800e66d
 800e5cc:	0800e66d 	.word	0x0800e66d
 800e5d0:	0800e66d 	.word	0x0800e66d
 800e5d4:	0800e627 	.word	0x0800e627
 800e5d8:	0800e66d 	.word	0x0800e66d
 800e5dc:	0800e66d 	.word	0x0800e66d
 800e5e0:	0800e66d 	.word	0x0800e66d
 800e5e4:	0800e635 	.word	0x0800e635
 800e5e8:	0800e66d 	.word	0x0800e66d
 800e5ec:	0800e66d 	.word	0x0800e66d
 800e5f0:	0800e66d 	.word	0x0800e66d
 800e5f4:	0800e643 	.word	0x0800e643
 800e5f8:	0800e66d 	.word	0x0800e66d
 800e5fc:	0800e66d 	.word	0x0800e66d
 800e600:	0800e66d 	.word	0x0800e66d
 800e604:	0800e651 	.word	0x0800e651
 800e608:	0800e66d 	.word	0x0800e66d
 800e60c:	0800e66d 	.word	0x0800e66d
 800e610:	0800e66d 	.word	0x0800e66d
 800e614:	0800e65f 	.word	0x0800e65f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800e618:	68fb      	ldr	r3, [r7, #12]
 800e61a:	681b      	ldr	r3, [r3, #0]
 800e61c:	68b9      	ldr	r1, [r7, #8]
 800e61e:	4618      	mov	r0, r3
 800e620:	f000 fb50 	bl	800ecc4 <TIM_OC1_SetConfig>
      break;
 800e624:	e025      	b.n	800e672 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800e626:	68fb      	ldr	r3, [r7, #12]
 800e628:	681b      	ldr	r3, [r3, #0]
 800e62a:	68b9      	ldr	r1, [r7, #8]
 800e62c:	4618      	mov	r0, r3
 800e62e:	f000 fbd9 	bl	800ede4 <TIM_OC2_SetConfig>
      break;
 800e632:	e01e      	b.n	800e672 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800e634:	68fb      	ldr	r3, [r7, #12]
 800e636:	681b      	ldr	r3, [r3, #0]
 800e638:	68b9      	ldr	r1, [r7, #8]
 800e63a:	4618      	mov	r0, r3
 800e63c:	f000 fc5c 	bl	800eef8 <TIM_OC3_SetConfig>
      break;
 800e640:	e017      	b.n	800e672 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800e642:	68fb      	ldr	r3, [r7, #12]
 800e644:	681b      	ldr	r3, [r3, #0]
 800e646:	68b9      	ldr	r1, [r7, #8]
 800e648:	4618      	mov	r0, r3
 800e64a:	f000 fcdd 	bl	800f008 <TIM_OC4_SetConfig>
      break;
 800e64e:	e010      	b.n	800e672 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 5 in Output Compare */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800e650:	68fb      	ldr	r3, [r7, #12]
 800e652:	681b      	ldr	r3, [r3, #0]
 800e654:	68b9      	ldr	r1, [r7, #8]
 800e656:	4618      	mov	r0, r3
 800e658:	f000 fd40 	bl	800f0dc <TIM_OC5_SetConfig>
      break;
 800e65c:	e009      	b.n	800e672 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 6 in Output Compare */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800e65e:	68fb      	ldr	r3, [r7, #12]
 800e660:	681b      	ldr	r3, [r3, #0]
 800e662:	68b9      	ldr	r1, [r7, #8]
 800e664:	4618      	mov	r0, r3
 800e666:	f000 fd9d 	bl	800f1a4 <TIM_OC6_SetConfig>
      break;
 800e66a:	e002      	b.n	800e672 <HAL_TIM_OC_ConfigChannel+0xe2>
    }

    default:
      status = HAL_ERROR;
 800e66c:	2301      	movs	r3, #1
 800e66e:	75fb      	strb	r3, [r7, #23]
      break;
 800e670:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800e672:	68fb      	ldr	r3, [r7, #12]
 800e674:	2200      	movs	r2, #0
 800e676:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800e67a:	7dfb      	ldrb	r3, [r7, #23]
}
 800e67c:	4618      	mov	r0, r3
 800e67e:	3718      	adds	r7, #24
 800e680:	46bd      	mov	sp, r7
 800e682:	bd80      	pop	{r7, pc}

0800e684 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 800e684:	b580      	push	{r7, lr}
 800e686:	b086      	sub	sp, #24
 800e688:	af00      	add	r7, sp, #0
 800e68a:	60f8      	str	r0, [r7, #12]
 800e68c:	60b9      	str	r1, [r7, #8]
 800e68e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800e690:	2300      	movs	r3, #0
 800e692:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 800e694:	68fb      	ldr	r3, [r7, #12]
 800e696:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800e69a:	2b01      	cmp	r3, #1
 800e69c:	d101      	bne.n	800e6a2 <HAL_TIM_IC_ConfigChannel+0x1e>
 800e69e:	2302      	movs	r3, #2
 800e6a0:	e088      	b.n	800e7b4 <HAL_TIM_IC_ConfigChannel+0x130>
 800e6a2:	68fb      	ldr	r3, [r7, #12]
 800e6a4:	2201      	movs	r2, #1
 800e6a6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  if (Channel == TIM_CHANNEL_1)
 800e6aa:	687b      	ldr	r3, [r7, #4]
 800e6ac:	2b00      	cmp	r3, #0
 800e6ae:	d11b      	bne.n	800e6e8 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 800e6b0:	68fb      	ldr	r3, [r7, #12]
 800e6b2:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 800e6b4:	68bb      	ldr	r3, [r7, #8]
 800e6b6:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 800e6b8:	68bb      	ldr	r3, [r7, #8]
 800e6ba:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 800e6bc:	68bb      	ldr	r3, [r7, #8]
 800e6be:	68db      	ldr	r3, [r3, #12]
    TIM_TI1_SetConfig(htim->Instance,
 800e6c0:	f000 fdd6 	bl	800f270 <TIM_TI1_SetConfig>

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 800e6c4:	68fb      	ldr	r3, [r7, #12]
 800e6c6:	681b      	ldr	r3, [r3, #0]
 800e6c8:	699a      	ldr	r2, [r3, #24]
 800e6ca:	68fb      	ldr	r3, [r7, #12]
 800e6cc:	681b      	ldr	r3, [r3, #0]
 800e6ce:	f022 020c 	bic.w	r2, r2, #12
 800e6d2:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 800e6d4:	68fb      	ldr	r3, [r7, #12]
 800e6d6:	681b      	ldr	r3, [r3, #0]
 800e6d8:	6999      	ldr	r1, [r3, #24]
 800e6da:	68bb      	ldr	r3, [r7, #8]
 800e6dc:	689a      	ldr	r2, [r3, #8]
 800e6de:	68fb      	ldr	r3, [r7, #12]
 800e6e0:	681b      	ldr	r3, [r3, #0]
 800e6e2:	430a      	orrs	r2, r1
 800e6e4:	619a      	str	r2, [r3, #24]
 800e6e6:	e060      	b.n	800e7aa <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 800e6e8:	687b      	ldr	r3, [r7, #4]
 800e6ea:	2b04      	cmp	r3, #4
 800e6ec:	d11c      	bne.n	800e728 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 800e6ee:	68fb      	ldr	r3, [r7, #12]
 800e6f0:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 800e6f2:	68bb      	ldr	r3, [r7, #8]
 800e6f4:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 800e6f6:	68bb      	ldr	r3, [r7, #8]
 800e6f8:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 800e6fa:	68bb      	ldr	r3, [r7, #8]
 800e6fc:	68db      	ldr	r3, [r3, #12]
    TIM_TI2_SetConfig(htim->Instance,
 800e6fe:	f000 fe54 	bl	800f3aa <TIM_TI2_SetConfig>

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 800e702:	68fb      	ldr	r3, [r7, #12]
 800e704:	681b      	ldr	r3, [r3, #0]
 800e706:	699a      	ldr	r2, [r3, #24]
 800e708:	68fb      	ldr	r3, [r7, #12]
 800e70a:	681b      	ldr	r3, [r3, #0]
 800e70c:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 800e710:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 800e712:	68fb      	ldr	r3, [r7, #12]
 800e714:	681b      	ldr	r3, [r3, #0]
 800e716:	6999      	ldr	r1, [r3, #24]
 800e718:	68bb      	ldr	r3, [r7, #8]
 800e71a:	689b      	ldr	r3, [r3, #8]
 800e71c:	021a      	lsls	r2, r3, #8
 800e71e:	68fb      	ldr	r3, [r7, #12]
 800e720:	681b      	ldr	r3, [r3, #0]
 800e722:	430a      	orrs	r2, r1
 800e724:	619a      	str	r2, [r3, #24]
 800e726:	e040      	b.n	800e7aa <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 800e728:	687b      	ldr	r3, [r7, #4]
 800e72a:	2b08      	cmp	r3, #8
 800e72c:	d11b      	bne.n	800e766 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 800e72e:	68fb      	ldr	r3, [r7, #12]
 800e730:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 800e732:	68bb      	ldr	r3, [r7, #8]
 800e734:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 800e736:	68bb      	ldr	r3, [r7, #8]
 800e738:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 800e73a:	68bb      	ldr	r3, [r7, #8]
 800e73c:	68db      	ldr	r3, [r3, #12]
    TIM_TI3_SetConfig(htim->Instance,
 800e73e:	f000 fea1 	bl	800f484 <TIM_TI3_SetConfig>

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 800e742:	68fb      	ldr	r3, [r7, #12]
 800e744:	681b      	ldr	r3, [r3, #0]
 800e746:	69da      	ldr	r2, [r3, #28]
 800e748:	68fb      	ldr	r3, [r7, #12]
 800e74a:	681b      	ldr	r3, [r3, #0]
 800e74c:	f022 020c 	bic.w	r2, r2, #12
 800e750:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 800e752:	68fb      	ldr	r3, [r7, #12]
 800e754:	681b      	ldr	r3, [r3, #0]
 800e756:	69d9      	ldr	r1, [r3, #28]
 800e758:	68bb      	ldr	r3, [r7, #8]
 800e75a:	689a      	ldr	r2, [r3, #8]
 800e75c:	68fb      	ldr	r3, [r7, #12]
 800e75e:	681b      	ldr	r3, [r3, #0]
 800e760:	430a      	orrs	r2, r1
 800e762:	61da      	str	r2, [r3, #28]
 800e764:	e021      	b.n	800e7aa <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 800e766:	687b      	ldr	r3, [r7, #4]
 800e768:	2b0c      	cmp	r3, #12
 800e76a:	d11c      	bne.n	800e7a6 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 800e76c:	68fb      	ldr	r3, [r7, #12]
 800e76e:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 800e770:	68bb      	ldr	r3, [r7, #8]
 800e772:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 800e774:	68bb      	ldr	r3, [r7, #8]
 800e776:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 800e778:	68bb      	ldr	r3, [r7, #8]
 800e77a:	68db      	ldr	r3, [r3, #12]
    TIM_TI4_SetConfig(htim->Instance,
 800e77c:	f000 febe 	bl	800f4fc <TIM_TI4_SetConfig>

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 800e780:	68fb      	ldr	r3, [r7, #12]
 800e782:	681b      	ldr	r3, [r3, #0]
 800e784:	69da      	ldr	r2, [r3, #28]
 800e786:	68fb      	ldr	r3, [r7, #12]
 800e788:	681b      	ldr	r3, [r3, #0]
 800e78a:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 800e78e:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 800e790:	68fb      	ldr	r3, [r7, #12]
 800e792:	681b      	ldr	r3, [r3, #0]
 800e794:	69d9      	ldr	r1, [r3, #28]
 800e796:	68bb      	ldr	r3, [r7, #8]
 800e798:	689b      	ldr	r3, [r3, #8]
 800e79a:	021a      	lsls	r2, r3, #8
 800e79c:	68fb      	ldr	r3, [r7, #12]
 800e79e:	681b      	ldr	r3, [r3, #0]
 800e7a0:	430a      	orrs	r2, r1
 800e7a2:	61da      	str	r2, [r3, #28]
 800e7a4:	e001      	b.n	800e7aa <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 800e7a6:	2301      	movs	r3, #1
 800e7a8:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 800e7aa:	68fb      	ldr	r3, [r7, #12]
 800e7ac:	2200      	movs	r2, #0
 800e7ae:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800e7b2:	7dfb      	ldrb	r3, [r7, #23]
}
 800e7b4:	4618      	mov	r0, r3
 800e7b6:	3718      	adds	r7, #24
 800e7b8:	46bd      	mov	sp, r7
 800e7ba:	bd80      	pop	{r7, pc}

0800e7bc <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800e7bc:	b580      	push	{r7, lr}
 800e7be:	b086      	sub	sp, #24
 800e7c0:	af00      	add	r7, sp, #0
 800e7c2:	60f8      	str	r0, [r7, #12]
 800e7c4:	60b9      	str	r1, [r7, #8]
 800e7c6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800e7c8:	2300      	movs	r3, #0
 800e7ca:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800e7cc:	68fb      	ldr	r3, [r7, #12]
 800e7ce:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800e7d2:	2b01      	cmp	r3, #1
 800e7d4:	d101      	bne.n	800e7da <HAL_TIM_PWM_ConfigChannel+0x1e>
 800e7d6:	2302      	movs	r3, #2
 800e7d8:	e0ff      	b.n	800e9da <HAL_TIM_PWM_ConfigChannel+0x21e>
 800e7da:	68fb      	ldr	r3, [r7, #12]
 800e7dc:	2201      	movs	r2, #1
 800e7de:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800e7e2:	687b      	ldr	r3, [r7, #4]
 800e7e4:	2b14      	cmp	r3, #20
 800e7e6:	f200 80f0 	bhi.w	800e9ca <HAL_TIM_PWM_ConfigChannel+0x20e>
 800e7ea:	a201      	add	r2, pc, #4	@ (adr r2, 800e7f0 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800e7ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e7f0:	0800e845 	.word	0x0800e845
 800e7f4:	0800e9cb 	.word	0x0800e9cb
 800e7f8:	0800e9cb 	.word	0x0800e9cb
 800e7fc:	0800e9cb 	.word	0x0800e9cb
 800e800:	0800e885 	.word	0x0800e885
 800e804:	0800e9cb 	.word	0x0800e9cb
 800e808:	0800e9cb 	.word	0x0800e9cb
 800e80c:	0800e9cb 	.word	0x0800e9cb
 800e810:	0800e8c7 	.word	0x0800e8c7
 800e814:	0800e9cb 	.word	0x0800e9cb
 800e818:	0800e9cb 	.word	0x0800e9cb
 800e81c:	0800e9cb 	.word	0x0800e9cb
 800e820:	0800e907 	.word	0x0800e907
 800e824:	0800e9cb 	.word	0x0800e9cb
 800e828:	0800e9cb 	.word	0x0800e9cb
 800e82c:	0800e9cb 	.word	0x0800e9cb
 800e830:	0800e949 	.word	0x0800e949
 800e834:	0800e9cb 	.word	0x0800e9cb
 800e838:	0800e9cb 	.word	0x0800e9cb
 800e83c:	0800e9cb 	.word	0x0800e9cb
 800e840:	0800e989 	.word	0x0800e989
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800e844:	68fb      	ldr	r3, [r7, #12]
 800e846:	681b      	ldr	r3, [r3, #0]
 800e848:	68b9      	ldr	r1, [r7, #8]
 800e84a:	4618      	mov	r0, r3
 800e84c:	f000 fa3a 	bl	800ecc4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800e850:	68fb      	ldr	r3, [r7, #12]
 800e852:	681b      	ldr	r3, [r3, #0]
 800e854:	699a      	ldr	r2, [r3, #24]
 800e856:	68fb      	ldr	r3, [r7, #12]
 800e858:	681b      	ldr	r3, [r3, #0]
 800e85a:	f042 0208 	orr.w	r2, r2, #8
 800e85e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800e860:	68fb      	ldr	r3, [r7, #12]
 800e862:	681b      	ldr	r3, [r3, #0]
 800e864:	699a      	ldr	r2, [r3, #24]
 800e866:	68fb      	ldr	r3, [r7, #12]
 800e868:	681b      	ldr	r3, [r3, #0]
 800e86a:	f022 0204 	bic.w	r2, r2, #4
 800e86e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800e870:	68fb      	ldr	r3, [r7, #12]
 800e872:	681b      	ldr	r3, [r3, #0]
 800e874:	6999      	ldr	r1, [r3, #24]
 800e876:	68bb      	ldr	r3, [r7, #8]
 800e878:	691a      	ldr	r2, [r3, #16]
 800e87a:	68fb      	ldr	r3, [r7, #12]
 800e87c:	681b      	ldr	r3, [r3, #0]
 800e87e:	430a      	orrs	r2, r1
 800e880:	619a      	str	r2, [r3, #24]
      break;
 800e882:	e0a5      	b.n	800e9d0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800e884:	68fb      	ldr	r3, [r7, #12]
 800e886:	681b      	ldr	r3, [r3, #0]
 800e888:	68b9      	ldr	r1, [r7, #8]
 800e88a:	4618      	mov	r0, r3
 800e88c:	f000 faaa 	bl	800ede4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800e890:	68fb      	ldr	r3, [r7, #12]
 800e892:	681b      	ldr	r3, [r3, #0]
 800e894:	699a      	ldr	r2, [r3, #24]
 800e896:	68fb      	ldr	r3, [r7, #12]
 800e898:	681b      	ldr	r3, [r3, #0]
 800e89a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800e89e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800e8a0:	68fb      	ldr	r3, [r7, #12]
 800e8a2:	681b      	ldr	r3, [r3, #0]
 800e8a4:	699a      	ldr	r2, [r3, #24]
 800e8a6:	68fb      	ldr	r3, [r7, #12]
 800e8a8:	681b      	ldr	r3, [r3, #0]
 800e8aa:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800e8ae:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800e8b0:	68fb      	ldr	r3, [r7, #12]
 800e8b2:	681b      	ldr	r3, [r3, #0]
 800e8b4:	6999      	ldr	r1, [r3, #24]
 800e8b6:	68bb      	ldr	r3, [r7, #8]
 800e8b8:	691b      	ldr	r3, [r3, #16]
 800e8ba:	021a      	lsls	r2, r3, #8
 800e8bc:	68fb      	ldr	r3, [r7, #12]
 800e8be:	681b      	ldr	r3, [r3, #0]
 800e8c0:	430a      	orrs	r2, r1
 800e8c2:	619a      	str	r2, [r3, #24]
      break;
 800e8c4:	e084      	b.n	800e9d0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800e8c6:	68fb      	ldr	r3, [r7, #12]
 800e8c8:	681b      	ldr	r3, [r3, #0]
 800e8ca:	68b9      	ldr	r1, [r7, #8]
 800e8cc:	4618      	mov	r0, r3
 800e8ce:	f000 fb13 	bl	800eef8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800e8d2:	68fb      	ldr	r3, [r7, #12]
 800e8d4:	681b      	ldr	r3, [r3, #0]
 800e8d6:	69da      	ldr	r2, [r3, #28]
 800e8d8:	68fb      	ldr	r3, [r7, #12]
 800e8da:	681b      	ldr	r3, [r3, #0]
 800e8dc:	f042 0208 	orr.w	r2, r2, #8
 800e8e0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800e8e2:	68fb      	ldr	r3, [r7, #12]
 800e8e4:	681b      	ldr	r3, [r3, #0]
 800e8e6:	69da      	ldr	r2, [r3, #28]
 800e8e8:	68fb      	ldr	r3, [r7, #12]
 800e8ea:	681b      	ldr	r3, [r3, #0]
 800e8ec:	f022 0204 	bic.w	r2, r2, #4
 800e8f0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800e8f2:	68fb      	ldr	r3, [r7, #12]
 800e8f4:	681b      	ldr	r3, [r3, #0]
 800e8f6:	69d9      	ldr	r1, [r3, #28]
 800e8f8:	68bb      	ldr	r3, [r7, #8]
 800e8fa:	691a      	ldr	r2, [r3, #16]
 800e8fc:	68fb      	ldr	r3, [r7, #12]
 800e8fe:	681b      	ldr	r3, [r3, #0]
 800e900:	430a      	orrs	r2, r1
 800e902:	61da      	str	r2, [r3, #28]
      break;
 800e904:	e064      	b.n	800e9d0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800e906:	68fb      	ldr	r3, [r7, #12]
 800e908:	681b      	ldr	r3, [r3, #0]
 800e90a:	68b9      	ldr	r1, [r7, #8]
 800e90c:	4618      	mov	r0, r3
 800e90e:	f000 fb7b 	bl	800f008 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800e912:	68fb      	ldr	r3, [r7, #12]
 800e914:	681b      	ldr	r3, [r3, #0]
 800e916:	69da      	ldr	r2, [r3, #28]
 800e918:	68fb      	ldr	r3, [r7, #12]
 800e91a:	681b      	ldr	r3, [r3, #0]
 800e91c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800e920:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800e922:	68fb      	ldr	r3, [r7, #12]
 800e924:	681b      	ldr	r3, [r3, #0]
 800e926:	69da      	ldr	r2, [r3, #28]
 800e928:	68fb      	ldr	r3, [r7, #12]
 800e92a:	681b      	ldr	r3, [r3, #0]
 800e92c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800e930:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800e932:	68fb      	ldr	r3, [r7, #12]
 800e934:	681b      	ldr	r3, [r3, #0]
 800e936:	69d9      	ldr	r1, [r3, #28]
 800e938:	68bb      	ldr	r3, [r7, #8]
 800e93a:	691b      	ldr	r3, [r3, #16]
 800e93c:	021a      	lsls	r2, r3, #8
 800e93e:	68fb      	ldr	r3, [r7, #12]
 800e940:	681b      	ldr	r3, [r3, #0]
 800e942:	430a      	orrs	r2, r1
 800e944:	61da      	str	r2, [r3, #28]
      break;
 800e946:	e043      	b.n	800e9d0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800e948:	68fb      	ldr	r3, [r7, #12]
 800e94a:	681b      	ldr	r3, [r3, #0]
 800e94c:	68b9      	ldr	r1, [r7, #8]
 800e94e:	4618      	mov	r0, r3
 800e950:	f000 fbc4 	bl	800f0dc <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800e954:	68fb      	ldr	r3, [r7, #12]
 800e956:	681b      	ldr	r3, [r3, #0]
 800e958:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800e95a:	68fb      	ldr	r3, [r7, #12]
 800e95c:	681b      	ldr	r3, [r3, #0]
 800e95e:	f042 0208 	orr.w	r2, r2, #8
 800e962:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800e964:	68fb      	ldr	r3, [r7, #12]
 800e966:	681b      	ldr	r3, [r3, #0]
 800e968:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800e96a:	68fb      	ldr	r3, [r7, #12]
 800e96c:	681b      	ldr	r3, [r3, #0]
 800e96e:	f022 0204 	bic.w	r2, r2, #4
 800e972:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800e974:	68fb      	ldr	r3, [r7, #12]
 800e976:	681b      	ldr	r3, [r3, #0]
 800e978:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800e97a:	68bb      	ldr	r3, [r7, #8]
 800e97c:	691a      	ldr	r2, [r3, #16]
 800e97e:	68fb      	ldr	r3, [r7, #12]
 800e980:	681b      	ldr	r3, [r3, #0]
 800e982:	430a      	orrs	r2, r1
 800e984:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 800e986:	e023      	b.n	800e9d0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800e988:	68fb      	ldr	r3, [r7, #12]
 800e98a:	681b      	ldr	r3, [r3, #0]
 800e98c:	68b9      	ldr	r1, [r7, #8]
 800e98e:	4618      	mov	r0, r3
 800e990:	f000 fc08 	bl	800f1a4 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800e994:	68fb      	ldr	r3, [r7, #12]
 800e996:	681b      	ldr	r3, [r3, #0]
 800e998:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800e99a:	68fb      	ldr	r3, [r7, #12]
 800e99c:	681b      	ldr	r3, [r3, #0]
 800e99e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800e9a2:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800e9a4:	68fb      	ldr	r3, [r7, #12]
 800e9a6:	681b      	ldr	r3, [r3, #0]
 800e9a8:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800e9aa:	68fb      	ldr	r3, [r7, #12]
 800e9ac:	681b      	ldr	r3, [r3, #0]
 800e9ae:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800e9b2:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800e9b4:	68fb      	ldr	r3, [r7, #12]
 800e9b6:	681b      	ldr	r3, [r3, #0]
 800e9b8:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800e9ba:	68bb      	ldr	r3, [r7, #8]
 800e9bc:	691b      	ldr	r3, [r3, #16]
 800e9be:	021a      	lsls	r2, r3, #8
 800e9c0:	68fb      	ldr	r3, [r7, #12]
 800e9c2:	681b      	ldr	r3, [r3, #0]
 800e9c4:	430a      	orrs	r2, r1
 800e9c6:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 800e9c8:	e002      	b.n	800e9d0 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800e9ca:	2301      	movs	r3, #1
 800e9cc:	75fb      	strb	r3, [r7, #23]
      break;
 800e9ce:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800e9d0:	68fb      	ldr	r3, [r7, #12]
 800e9d2:	2200      	movs	r2, #0
 800e9d4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800e9d8:	7dfb      	ldrb	r3, [r7, #23]
}
 800e9da:	4618      	mov	r0, r3
 800e9dc:	3718      	adds	r7, #24
 800e9de:	46bd      	mov	sp, r7
 800e9e0:	bd80      	pop	{r7, pc}
 800e9e2:	bf00      	nop

0800e9e4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800e9e4:	b580      	push	{r7, lr}
 800e9e6:	b084      	sub	sp, #16
 800e9e8:	af00      	add	r7, sp, #0
 800e9ea:	6078      	str	r0, [r7, #4]
 800e9ec:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800e9ee:	2300      	movs	r3, #0
 800e9f0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800e9f2:	687b      	ldr	r3, [r7, #4]
 800e9f4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800e9f8:	2b01      	cmp	r3, #1
 800e9fa:	d101      	bne.n	800ea00 <HAL_TIM_ConfigClockSource+0x1c>
 800e9fc:	2302      	movs	r3, #2
 800e9fe:	e0b6      	b.n	800eb6e <HAL_TIM_ConfigClockSource+0x18a>
 800ea00:	687b      	ldr	r3, [r7, #4]
 800ea02:	2201      	movs	r2, #1
 800ea04:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800ea08:	687b      	ldr	r3, [r7, #4]
 800ea0a:	2202      	movs	r2, #2
 800ea0c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800ea10:	687b      	ldr	r3, [r7, #4]
 800ea12:	681b      	ldr	r3, [r3, #0]
 800ea14:	689b      	ldr	r3, [r3, #8]
 800ea16:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800ea18:	68bb      	ldr	r3, [r7, #8]
 800ea1a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800ea1e:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800ea22:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800ea24:	68bb      	ldr	r3, [r7, #8]
 800ea26:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800ea2a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800ea2c:	687b      	ldr	r3, [r7, #4]
 800ea2e:	681b      	ldr	r3, [r3, #0]
 800ea30:	68ba      	ldr	r2, [r7, #8]
 800ea32:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800ea34:	683b      	ldr	r3, [r7, #0]
 800ea36:	681b      	ldr	r3, [r3, #0]
 800ea38:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800ea3c:	d03e      	beq.n	800eabc <HAL_TIM_ConfigClockSource+0xd8>
 800ea3e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800ea42:	f200 8087 	bhi.w	800eb54 <HAL_TIM_ConfigClockSource+0x170>
 800ea46:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800ea4a:	f000 8086 	beq.w	800eb5a <HAL_TIM_ConfigClockSource+0x176>
 800ea4e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800ea52:	d87f      	bhi.n	800eb54 <HAL_TIM_ConfigClockSource+0x170>
 800ea54:	2b70      	cmp	r3, #112	@ 0x70
 800ea56:	d01a      	beq.n	800ea8e <HAL_TIM_ConfigClockSource+0xaa>
 800ea58:	2b70      	cmp	r3, #112	@ 0x70
 800ea5a:	d87b      	bhi.n	800eb54 <HAL_TIM_ConfigClockSource+0x170>
 800ea5c:	2b60      	cmp	r3, #96	@ 0x60
 800ea5e:	d050      	beq.n	800eb02 <HAL_TIM_ConfigClockSource+0x11e>
 800ea60:	2b60      	cmp	r3, #96	@ 0x60
 800ea62:	d877      	bhi.n	800eb54 <HAL_TIM_ConfigClockSource+0x170>
 800ea64:	2b50      	cmp	r3, #80	@ 0x50
 800ea66:	d03c      	beq.n	800eae2 <HAL_TIM_ConfigClockSource+0xfe>
 800ea68:	2b50      	cmp	r3, #80	@ 0x50
 800ea6a:	d873      	bhi.n	800eb54 <HAL_TIM_ConfigClockSource+0x170>
 800ea6c:	2b40      	cmp	r3, #64	@ 0x40
 800ea6e:	d058      	beq.n	800eb22 <HAL_TIM_ConfigClockSource+0x13e>
 800ea70:	2b40      	cmp	r3, #64	@ 0x40
 800ea72:	d86f      	bhi.n	800eb54 <HAL_TIM_ConfigClockSource+0x170>
 800ea74:	2b30      	cmp	r3, #48	@ 0x30
 800ea76:	d064      	beq.n	800eb42 <HAL_TIM_ConfigClockSource+0x15e>
 800ea78:	2b30      	cmp	r3, #48	@ 0x30
 800ea7a:	d86b      	bhi.n	800eb54 <HAL_TIM_ConfigClockSource+0x170>
 800ea7c:	2b20      	cmp	r3, #32
 800ea7e:	d060      	beq.n	800eb42 <HAL_TIM_ConfigClockSource+0x15e>
 800ea80:	2b20      	cmp	r3, #32
 800ea82:	d867      	bhi.n	800eb54 <HAL_TIM_ConfigClockSource+0x170>
 800ea84:	2b00      	cmp	r3, #0
 800ea86:	d05c      	beq.n	800eb42 <HAL_TIM_ConfigClockSource+0x15e>
 800ea88:	2b10      	cmp	r3, #16
 800ea8a:	d05a      	beq.n	800eb42 <HAL_TIM_ConfigClockSource+0x15e>
 800ea8c:	e062      	b.n	800eb54 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800ea8e:	687b      	ldr	r3, [r7, #4]
 800ea90:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800ea92:	683b      	ldr	r3, [r7, #0]
 800ea94:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800ea96:	683b      	ldr	r3, [r7, #0]
 800ea98:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800ea9a:	683b      	ldr	r3, [r7, #0]
 800ea9c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800ea9e:	f000 fd85 	bl	800f5ac <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800eaa2:	687b      	ldr	r3, [r7, #4]
 800eaa4:	681b      	ldr	r3, [r3, #0]
 800eaa6:	689b      	ldr	r3, [r3, #8]
 800eaa8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800eaaa:	68bb      	ldr	r3, [r7, #8]
 800eaac:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800eab0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800eab2:	687b      	ldr	r3, [r7, #4]
 800eab4:	681b      	ldr	r3, [r3, #0]
 800eab6:	68ba      	ldr	r2, [r7, #8]
 800eab8:	609a      	str	r2, [r3, #8]
      break;
 800eaba:	e04f      	b.n	800eb5c <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800eabc:	687b      	ldr	r3, [r7, #4]
 800eabe:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800eac0:	683b      	ldr	r3, [r7, #0]
 800eac2:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800eac4:	683b      	ldr	r3, [r7, #0]
 800eac6:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800eac8:	683b      	ldr	r3, [r7, #0]
 800eaca:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800eacc:	f000 fd6e 	bl	800f5ac <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800ead0:	687b      	ldr	r3, [r7, #4]
 800ead2:	681b      	ldr	r3, [r3, #0]
 800ead4:	689a      	ldr	r2, [r3, #8]
 800ead6:	687b      	ldr	r3, [r7, #4]
 800ead8:	681b      	ldr	r3, [r3, #0]
 800eada:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800eade:	609a      	str	r2, [r3, #8]
      break;
 800eae0:	e03c      	b.n	800eb5c <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800eae2:	687b      	ldr	r3, [r7, #4]
 800eae4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800eae6:	683b      	ldr	r3, [r7, #0]
 800eae8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800eaea:	683b      	ldr	r3, [r7, #0]
 800eaec:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800eaee:	461a      	mov	r2, r3
 800eaf0:	f000 fc2c 	bl	800f34c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800eaf4:	687b      	ldr	r3, [r7, #4]
 800eaf6:	681b      	ldr	r3, [r3, #0]
 800eaf8:	2150      	movs	r1, #80	@ 0x50
 800eafa:	4618      	mov	r0, r3
 800eafc:	f000 fd3b 	bl	800f576 <TIM_ITRx_SetConfig>
      break;
 800eb00:	e02c      	b.n	800eb5c <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800eb02:	687b      	ldr	r3, [r7, #4]
 800eb04:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800eb06:	683b      	ldr	r3, [r7, #0]
 800eb08:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800eb0a:	683b      	ldr	r3, [r7, #0]
 800eb0c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800eb0e:	461a      	mov	r2, r3
 800eb10:	f000 fc88 	bl	800f424 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800eb14:	687b      	ldr	r3, [r7, #4]
 800eb16:	681b      	ldr	r3, [r3, #0]
 800eb18:	2160      	movs	r1, #96	@ 0x60
 800eb1a:	4618      	mov	r0, r3
 800eb1c:	f000 fd2b 	bl	800f576 <TIM_ITRx_SetConfig>
      break;
 800eb20:	e01c      	b.n	800eb5c <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800eb22:	687b      	ldr	r3, [r7, #4]
 800eb24:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800eb26:	683b      	ldr	r3, [r7, #0]
 800eb28:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800eb2a:	683b      	ldr	r3, [r7, #0]
 800eb2c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800eb2e:	461a      	mov	r2, r3
 800eb30:	f000 fc0c 	bl	800f34c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800eb34:	687b      	ldr	r3, [r7, #4]
 800eb36:	681b      	ldr	r3, [r3, #0]
 800eb38:	2140      	movs	r1, #64	@ 0x40
 800eb3a:	4618      	mov	r0, r3
 800eb3c:	f000 fd1b 	bl	800f576 <TIM_ITRx_SetConfig>
      break;
 800eb40:	e00c      	b.n	800eb5c <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800eb42:	687b      	ldr	r3, [r7, #4]
 800eb44:	681a      	ldr	r2, [r3, #0]
 800eb46:	683b      	ldr	r3, [r7, #0]
 800eb48:	681b      	ldr	r3, [r3, #0]
 800eb4a:	4619      	mov	r1, r3
 800eb4c:	4610      	mov	r0, r2
 800eb4e:	f000 fd12 	bl	800f576 <TIM_ITRx_SetConfig>
      break;
 800eb52:	e003      	b.n	800eb5c <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 800eb54:	2301      	movs	r3, #1
 800eb56:	73fb      	strb	r3, [r7, #15]
      break;
 800eb58:	e000      	b.n	800eb5c <HAL_TIM_ConfigClockSource+0x178>
      break;
 800eb5a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800eb5c:	687b      	ldr	r3, [r7, #4]
 800eb5e:	2201      	movs	r2, #1
 800eb60:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800eb64:	687b      	ldr	r3, [r7, #4]
 800eb66:	2200      	movs	r2, #0
 800eb68:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800eb6c:	7bfb      	ldrb	r3, [r7, #15]
}
 800eb6e:	4618      	mov	r0, r3
 800eb70:	3710      	adds	r7, #16
 800eb72:	46bd      	mov	sp, r7
 800eb74:	bd80      	pop	{r7, pc}
	...

0800eb78 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800eb78:	b480      	push	{r7}
 800eb7a:	b085      	sub	sp, #20
 800eb7c:	af00      	add	r7, sp, #0
 800eb7e:	6078      	str	r0, [r7, #4]
 800eb80:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800eb82:	687b      	ldr	r3, [r7, #4]
 800eb84:	681b      	ldr	r3, [r3, #0]
 800eb86:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800eb88:	687b      	ldr	r3, [r7, #4]
 800eb8a:	4a46      	ldr	r2, [pc, #280]	@ (800eca4 <TIM_Base_SetConfig+0x12c>)
 800eb8c:	4293      	cmp	r3, r2
 800eb8e:	d013      	beq.n	800ebb8 <TIM_Base_SetConfig+0x40>
 800eb90:	687b      	ldr	r3, [r7, #4]
 800eb92:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800eb96:	d00f      	beq.n	800ebb8 <TIM_Base_SetConfig+0x40>
 800eb98:	687b      	ldr	r3, [r7, #4]
 800eb9a:	4a43      	ldr	r2, [pc, #268]	@ (800eca8 <TIM_Base_SetConfig+0x130>)
 800eb9c:	4293      	cmp	r3, r2
 800eb9e:	d00b      	beq.n	800ebb8 <TIM_Base_SetConfig+0x40>
 800eba0:	687b      	ldr	r3, [r7, #4]
 800eba2:	4a42      	ldr	r2, [pc, #264]	@ (800ecac <TIM_Base_SetConfig+0x134>)
 800eba4:	4293      	cmp	r3, r2
 800eba6:	d007      	beq.n	800ebb8 <TIM_Base_SetConfig+0x40>
 800eba8:	687b      	ldr	r3, [r7, #4]
 800ebaa:	4a41      	ldr	r2, [pc, #260]	@ (800ecb0 <TIM_Base_SetConfig+0x138>)
 800ebac:	4293      	cmp	r3, r2
 800ebae:	d003      	beq.n	800ebb8 <TIM_Base_SetConfig+0x40>
 800ebb0:	687b      	ldr	r3, [r7, #4]
 800ebb2:	4a40      	ldr	r2, [pc, #256]	@ (800ecb4 <TIM_Base_SetConfig+0x13c>)
 800ebb4:	4293      	cmp	r3, r2
 800ebb6:	d108      	bne.n	800ebca <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800ebb8:	68fb      	ldr	r3, [r7, #12]
 800ebba:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800ebbe:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800ebc0:	683b      	ldr	r3, [r7, #0]
 800ebc2:	685b      	ldr	r3, [r3, #4]
 800ebc4:	68fa      	ldr	r2, [r7, #12]
 800ebc6:	4313      	orrs	r3, r2
 800ebc8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800ebca:	687b      	ldr	r3, [r7, #4]
 800ebcc:	4a35      	ldr	r2, [pc, #212]	@ (800eca4 <TIM_Base_SetConfig+0x12c>)
 800ebce:	4293      	cmp	r3, r2
 800ebd0:	d01f      	beq.n	800ec12 <TIM_Base_SetConfig+0x9a>
 800ebd2:	687b      	ldr	r3, [r7, #4]
 800ebd4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800ebd8:	d01b      	beq.n	800ec12 <TIM_Base_SetConfig+0x9a>
 800ebda:	687b      	ldr	r3, [r7, #4]
 800ebdc:	4a32      	ldr	r2, [pc, #200]	@ (800eca8 <TIM_Base_SetConfig+0x130>)
 800ebde:	4293      	cmp	r3, r2
 800ebe0:	d017      	beq.n	800ec12 <TIM_Base_SetConfig+0x9a>
 800ebe2:	687b      	ldr	r3, [r7, #4]
 800ebe4:	4a31      	ldr	r2, [pc, #196]	@ (800ecac <TIM_Base_SetConfig+0x134>)
 800ebe6:	4293      	cmp	r3, r2
 800ebe8:	d013      	beq.n	800ec12 <TIM_Base_SetConfig+0x9a>
 800ebea:	687b      	ldr	r3, [r7, #4]
 800ebec:	4a30      	ldr	r2, [pc, #192]	@ (800ecb0 <TIM_Base_SetConfig+0x138>)
 800ebee:	4293      	cmp	r3, r2
 800ebf0:	d00f      	beq.n	800ec12 <TIM_Base_SetConfig+0x9a>
 800ebf2:	687b      	ldr	r3, [r7, #4]
 800ebf4:	4a2f      	ldr	r2, [pc, #188]	@ (800ecb4 <TIM_Base_SetConfig+0x13c>)
 800ebf6:	4293      	cmp	r3, r2
 800ebf8:	d00b      	beq.n	800ec12 <TIM_Base_SetConfig+0x9a>
 800ebfa:	687b      	ldr	r3, [r7, #4]
 800ebfc:	4a2e      	ldr	r2, [pc, #184]	@ (800ecb8 <TIM_Base_SetConfig+0x140>)
 800ebfe:	4293      	cmp	r3, r2
 800ec00:	d007      	beq.n	800ec12 <TIM_Base_SetConfig+0x9a>
 800ec02:	687b      	ldr	r3, [r7, #4]
 800ec04:	4a2d      	ldr	r2, [pc, #180]	@ (800ecbc <TIM_Base_SetConfig+0x144>)
 800ec06:	4293      	cmp	r3, r2
 800ec08:	d003      	beq.n	800ec12 <TIM_Base_SetConfig+0x9a>
 800ec0a:	687b      	ldr	r3, [r7, #4]
 800ec0c:	4a2c      	ldr	r2, [pc, #176]	@ (800ecc0 <TIM_Base_SetConfig+0x148>)
 800ec0e:	4293      	cmp	r3, r2
 800ec10:	d108      	bne.n	800ec24 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800ec12:	68fb      	ldr	r3, [r7, #12]
 800ec14:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800ec18:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800ec1a:	683b      	ldr	r3, [r7, #0]
 800ec1c:	68db      	ldr	r3, [r3, #12]
 800ec1e:	68fa      	ldr	r2, [r7, #12]
 800ec20:	4313      	orrs	r3, r2
 800ec22:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800ec24:	68fb      	ldr	r3, [r7, #12]
 800ec26:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800ec2a:	683b      	ldr	r3, [r7, #0]
 800ec2c:	695b      	ldr	r3, [r3, #20]
 800ec2e:	4313      	orrs	r3, r2
 800ec30:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800ec32:	687b      	ldr	r3, [r7, #4]
 800ec34:	68fa      	ldr	r2, [r7, #12]
 800ec36:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800ec38:	683b      	ldr	r3, [r7, #0]
 800ec3a:	689a      	ldr	r2, [r3, #8]
 800ec3c:	687b      	ldr	r3, [r7, #4]
 800ec3e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800ec40:	683b      	ldr	r3, [r7, #0]
 800ec42:	681a      	ldr	r2, [r3, #0]
 800ec44:	687b      	ldr	r3, [r7, #4]
 800ec46:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800ec48:	687b      	ldr	r3, [r7, #4]
 800ec4a:	4a16      	ldr	r2, [pc, #88]	@ (800eca4 <TIM_Base_SetConfig+0x12c>)
 800ec4c:	4293      	cmp	r3, r2
 800ec4e:	d00f      	beq.n	800ec70 <TIM_Base_SetConfig+0xf8>
 800ec50:	687b      	ldr	r3, [r7, #4]
 800ec52:	4a18      	ldr	r2, [pc, #96]	@ (800ecb4 <TIM_Base_SetConfig+0x13c>)
 800ec54:	4293      	cmp	r3, r2
 800ec56:	d00b      	beq.n	800ec70 <TIM_Base_SetConfig+0xf8>
 800ec58:	687b      	ldr	r3, [r7, #4]
 800ec5a:	4a17      	ldr	r2, [pc, #92]	@ (800ecb8 <TIM_Base_SetConfig+0x140>)
 800ec5c:	4293      	cmp	r3, r2
 800ec5e:	d007      	beq.n	800ec70 <TIM_Base_SetConfig+0xf8>
 800ec60:	687b      	ldr	r3, [r7, #4]
 800ec62:	4a16      	ldr	r2, [pc, #88]	@ (800ecbc <TIM_Base_SetConfig+0x144>)
 800ec64:	4293      	cmp	r3, r2
 800ec66:	d003      	beq.n	800ec70 <TIM_Base_SetConfig+0xf8>
 800ec68:	687b      	ldr	r3, [r7, #4]
 800ec6a:	4a15      	ldr	r2, [pc, #84]	@ (800ecc0 <TIM_Base_SetConfig+0x148>)
 800ec6c:	4293      	cmp	r3, r2
 800ec6e:	d103      	bne.n	800ec78 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800ec70:	683b      	ldr	r3, [r7, #0]
 800ec72:	691a      	ldr	r2, [r3, #16]
 800ec74:	687b      	ldr	r3, [r7, #4]
 800ec76:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800ec78:	687b      	ldr	r3, [r7, #4]
 800ec7a:	2201      	movs	r2, #1
 800ec7c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800ec7e:	687b      	ldr	r3, [r7, #4]
 800ec80:	691b      	ldr	r3, [r3, #16]
 800ec82:	f003 0301 	and.w	r3, r3, #1
 800ec86:	2b01      	cmp	r3, #1
 800ec88:	d105      	bne.n	800ec96 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800ec8a:	687b      	ldr	r3, [r7, #4]
 800ec8c:	691b      	ldr	r3, [r3, #16]
 800ec8e:	f023 0201 	bic.w	r2, r3, #1
 800ec92:	687b      	ldr	r3, [r7, #4]
 800ec94:	611a      	str	r2, [r3, #16]
  }
}
 800ec96:	bf00      	nop
 800ec98:	3714      	adds	r7, #20
 800ec9a:	46bd      	mov	sp, r7
 800ec9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eca0:	4770      	bx	lr
 800eca2:	bf00      	nop
 800eca4:	40012c00 	.word	0x40012c00
 800eca8:	40000400 	.word	0x40000400
 800ecac:	40000800 	.word	0x40000800
 800ecb0:	40000c00 	.word	0x40000c00
 800ecb4:	40013400 	.word	0x40013400
 800ecb8:	40014000 	.word	0x40014000
 800ecbc:	40014400 	.word	0x40014400
 800ecc0:	40014800 	.word	0x40014800

0800ecc4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800ecc4:	b480      	push	{r7}
 800ecc6:	b087      	sub	sp, #28
 800ecc8:	af00      	add	r7, sp, #0
 800ecca:	6078      	str	r0, [r7, #4]
 800eccc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ecce:	687b      	ldr	r3, [r7, #4]
 800ecd0:	6a1b      	ldr	r3, [r3, #32]
 800ecd2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800ecd4:	687b      	ldr	r3, [r7, #4]
 800ecd6:	6a1b      	ldr	r3, [r3, #32]
 800ecd8:	f023 0201 	bic.w	r2, r3, #1
 800ecdc:	687b      	ldr	r3, [r7, #4]
 800ecde:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ece0:	687b      	ldr	r3, [r7, #4]
 800ece2:	685b      	ldr	r3, [r3, #4]
 800ece4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800ece6:	687b      	ldr	r3, [r7, #4]
 800ece8:	699b      	ldr	r3, [r3, #24]
 800ecea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800ecec:	68fb      	ldr	r3, [r7, #12]
 800ecee:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800ecf2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800ecf6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800ecf8:	68fb      	ldr	r3, [r7, #12]
 800ecfa:	f023 0303 	bic.w	r3, r3, #3
 800ecfe:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800ed00:	683b      	ldr	r3, [r7, #0]
 800ed02:	681b      	ldr	r3, [r3, #0]
 800ed04:	68fa      	ldr	r2, [r7, #12]
 800ed06:	4313      	orrs	r3, r2
 800ed08:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800ed0a:	697b      	ldr	r3, [r7, #20]
 800ed0c:	f023 0302 	bic.w	r3, r3, #2
 800ed10:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800ed12:	683b      	ldr	r3, [r7, #0]
 800ed14:	689b      	ldr	r3, [r3, #8]
 800ed16:	697a      	ldr	r2, [r7, #20]
 800ed18:	4313      	orrs	r3, r2
 800ed1a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800ed1c:	687b      	ldr	r3, [r7, #4]
 800ed1e:	4a2c      	ldr	r2, [pc, #176]	@ (800edd0 <TIM_OC1_SetConfig+0x10c>)
 800ed20:	4293      	cmp	r3, r2
 800ed22:	d00f      	beq.n	800ed44 <TIM_OC1_SetConfig+0x80>
 800ed24:	687b      	ldr	r3, [r7, #4]
 800ed26:	4a2b      	ldr	r2, [pc, #172]	@ (800edd4 <TIM_OC1_SetConfig+0x110>)
 800ed28:	4293      	cmp	r3, r2
 800ed2a:	d00b      	beq.n	800ed44 <TIM_OC1_SetConfig+0x80>
 800ed2c:	687b      	ldr	r3, [r7, #4]
 800ed2e:	4a2a      	ldr	r2, [pc, #168]	@ (800edd8 <TIM_OC1_SetConfig+0x114>)
 800ed30:	4293      	cmp	r3, r2
 800ed32:	d007      	beq.n	800ed44 <TIM_OC1_SetConfig+0x80>
 800ed34:	687b      	ldr	r3, [r7, #4]
 800ed36:	4a29      	ldr	r2, [pc, #164]	@ (800eddc <TIM_OC1_SetConfig+0x118>)
 800ed38:	4293      	cmp	r3, r2
 800ed3a:	d003      	beq.n	800ed44 <TIM_OC1_SetConfig+0x80>
 800ed3c:	687b      	ldr	r3, [r7, #4]
 800ed3e:	4a28      	ldr	r2, [pc, #160]	@ (800ede0 <TIM_OC1_SetConfig+0x11c>)
 800ed40:	4293      	cmp	r3, r2
 800ed42:	d10c      	bne.n	800ed5e <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800ed44:	697b      	ldr	r3, [r7, #20]
 800ed46:	f023 0308 	bic.w	r3, r3, #8
 800ed4a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800ed4c:	683b      	ldr	r3, [r7, #0]
 800ed4e:	68db      	ldr	r3, [r3, #12]
 800ed50:	697a      	ldr	r2, [r7, #20]
 800ed52:	4313      	orrs	r3, r2
 800ed54:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800ed56:	697b      	ldr	r3, [r7, #20]
 800ed58:	f023 0304 	bic.w	r3, r3, #4
 800ed5c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ed5e:	687b      	ldr	r3, [r7, #4]
 800ed60:	4a1b      	ldr	r2, [pc, #108]	@ (800edd0 <TIM_OC1_SetConfig+0x10c>)
 800ed62:	4293      	cmp	r3, r2
 800ed64:	d00f      	beq.n	800ed86 <TIM_OC1_SetConfig+0xc2>
 800ed66:	687b      	ldr	r3, [r7, #4]
 800ed68:	4a1a      	ldr	r2, [pc, #104]	@ (800edd4 <TIM_OC1_SetConfig+0x110>)
 800ed6a:	4293      	cmp	r3, r2
 800ed6c:	d00b      	beq.n	800ed86 <TIM_OC1_SetConfig+0xc2>
 800ed6e:	687b      	ldr	r3, [r7, #4]
 800ed70:	4a19      	ldr	r2, [pc, #100]	@ (800edd8 <TIM_OC1_SetConfig+0x114>)
 800ed72:	4293      	cmp	r3, r2
 800ed74:	d007      	beq.n	800ed86 <TIM_OC1_SetConfig+0xc2>
 800ed76:	687b      	ldr	r3, [r7, #4]
 800ed78:	4a18      	ldr	r2, [pc, #96]	@ (800eddc <TIM_OC1_SetConfig+0x118>)
 800ed7a:	4293      	cmp	r3, r2
 800ed7c:	d003      	beq.n	800ed86 <TIM_OC1_SetConfig+0xc2>
 800ed7e:	687b      	ldr	r3, [r7, #4]
 800ed80:	4a17      	ldr	r2, [pc, #92]	@ (800ede0 <TIM_OC1_SetConfig+0x11c>)
 800ed82:	4293      	cmp	r3, r2
 800ed84:	d111      	bne.n	800edaa <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800ed86:	693b      	ldr	r3, [r7, #16]
 800ed88:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800ed8c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800ed8e:	693b      	ldr	r3, [r7, #16]
 800ed90:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800ed94:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800ed96:	683b      	ldr	r3, [r7, #0]
 800ed98:	695b      	ldr	r3, [r3, #20]
 800ed9a:	693a      	ldr	r2, [r7, #16]
 800ed9c:	4313      	orrs	r3, r2
 800ed9e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800eda0:	683b      	ldr	r3, [r7, #0]
 800eda2:	699b      	ldr	r3, [r3, #24]
 800eda4:	693a      	ldr	r2, [r7, #16]
 800eda6:	4313      	orrs	r3, r2
 800eda8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800edaa:	687b      	ldr	r3, [r7, #4]
 800edac:	693a      	ldr	r2, [r7, #16]
 800edae:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800edb0:	687b      	ldr	r3, [r7, #4]
 800edb2:	68fa      	ldr	r2, [r7, #12]
 800edb4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800edb6:	683b      	ldr	r3, [r7, #0]
 800edb8:	685a      	ldr	r2, [r3, #4]
 800edba:	687b      	ldr	r3, [r7, #4]
 800edbc:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800edbe:	687b      	ldr	r3, [r7, #4]
 800edc0:	697a      	ldr	r2, [r7, #20]
 800edc2:	621a      	str	r2, [r3, #32]
}
 800edc4:	bf00      	nop
 800edc6:	371c      	adds	r7, #28
 800edc8:	46bd      	mov	sp, r7
 800edca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800edce:	4770      	bx	lr
 800edd0:	40012c00 	.word	0x40012c00
 800edd4:	40013400 	.word	0x40013400
 800edd8:	40014000 	.word	0x40014000
 800eddc:	40014400 	.word	0x40014400
 800ede0:	40014800 	.word	0x40014800

0800ede4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800ede4:	b480      	push	{r7}
 800ede6:	b087      	sub	sp, #28
 800ede8:	af00      	add	r7, sp, #0
 800edea:	6078      	str	r0, [r7, #4]
 800edec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800edee:	687b      	ldr	r3, [r7, #4]
 800edf0:	6a1b      	ldr	r3, [r3, #32]
 800edf2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800edf4:	687b      	ldr	r3, [r7, #4]
 800edf6:	6a1b      	ldr	r3, [r3, #32]
 800edf8:	f023 0210 	bic.w	r2, r3, #16
 800edfc:	687b      	ldr	r3, [r7, #4]
 800edfe:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ee00:	687b      	ldr	r3, [r7, #4]
 800ee02:	685b      	ldr	r3, [r3, #4]
 800ee04:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800ee06:	687b      	ldr	r3, [r7, #4]
 800ee08:	699b      	ldr	r3, [r3, #24]
 800ee0a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800ee0c:	68fb      	ldr	r3, [r7, #12]
 800ee0e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800ee12:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800ee16:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800ee18:	68fb      	ldr	r3, [r7, #12]
 800ee1a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800ee1e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800ee20:	683b      	ldr	r3, [r7, #0]
 800ee22:	681b      	ldr	r3, [r3, #0]
 800ee24:	021b      	lsls	r3, r3, #8
 800ee26:	68fa      	ldr	r2, [r7, #12]
 800ee28:	4313      	orrs	r3, r2
 800ee2a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800ee2c:	697b      	ldr	r3, [r7, #20]
 800ee2e:	f023 0320 	bic.w	r3, r3, #32
 800ee32:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800ee34:	683b      	ldr	r3, [r7, #0]
 800ee36:	689b      	ldr	r3, [r3, #8]
 800ee38:	011b      	lsls	r3, r3, #4
 800ee3a:	697a      	ldr	r2, [r7, #20]
 800ee3c:	4313      	orrs	r3, r2
 800ee3e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800ee40:	687b      	ldr	r3, [r7, #4]
 800ee42:	4a28      	ldr	r2, [pc, #160]	@ (800eee4 <TIM_OC2_SetConfig+0x100>)
 800ee44:	4293      	cmp	r3, r2
 800ee46:	d003      	beq.n	800ee50 <TIM_OC2_SetConfig+0x6c>
 800ee48:	687b      	ldr	r3, [r7, #4]
 800ee4a:	4a27      	ldr	r2, [pc, #156]	@ (800eee8 <TIM_OC2_SetConfig+0x104>)
 800ee4c:	4293      	cmp	r3, r2
 800ee4e:	d10d      	bne.n	800ee6c <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800ee50:	697b      	ldr	r3, [r7, #20]
 800ee52:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800ee56:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800ee58:	683b      	ldr	r3, [r7, #0]
 800ee5a:	68db      	ldr	r3, [r3, #12]
 800ee5c:	011b      	lsls	r3, r3, #4
 800ee5e:	697a      	ldr	r2, [r7, #20]
 800ee60:	4313      	orrs	r3, r2
 800ee62:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800ee64:	697b      	ldr	r3, [r7, #20]
 800ee66:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800ee6a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ee6c:	687b      	ldr	r3, [r7, #4]
 800ee6e:	4a1d      	ldr	r2, [pc, #116]	@ (800eee4 <TIM_OC2_SetConfig+0x100>)
 800ee70:	4293      	cmp	r3, r2
 800ee72:	d00f      	beq.n	800ee94 <TIM_OC2_SetConfig+0xb0>
 800ee74:	687b      	ldr	r3, [r7, #4]
 800ee76:	4a1c      	ldr	r2, [pc, #112]	@ (800eee8 <TIM_OC2_SetConfig+0x104>)
 800ee78:	4293      	cmp	r3, r2
 800ee7a:	d00b      	beq.n	800ee94 <TIM_OC2_SetConfig+0xb0>
 800ee7c:	687b      	ldr	r3, [r7, #4]
 800ee7e:	4a1b      	ldr	r2, [pc, #108]	@ (800eeec <TIM_OC2_SetConfig+0x108>)
 800ee80:	4293      	cmp	r3, r2
 800ee82:	d007      	beq.n	800ee94 <TIM_OC2_SetConfig+0xb0>
 800ee84:	687b      	ldr	r3, [r7, #4]
 800ee86:	4a1a      	ldr	r2, [pc, #104]	@ (800eef0 <TIM_OC2_SetConfig+0x10c>)
 800ee88:	4293      	cmp	r3, r2
 800ee8a:	d003      	beq.n	800ee94 <TIM_OC2_SetConfig+0xb0>
 800ee8c:	687b      	ldr	r3, [r7, #4]
 800ee8e:	4a19      	ldr	r2, [pc, #100]	@ (800eef4 <TIM_OC2_SetConfig+0x110>)
 800ee90:	4293      	cmp	r3, r2
 800ee92:	d113      	bne.n	800eebc <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800ee94:	693b      	ldr	r3, [r7, #16]
 800ee96:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800ee9a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800ee9c:	693b      	ldr	r3, [r7, #16]
 800ee9e:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800eea2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800eea4:	683b      	ldr	r3, [r7, #0]
 800eea6:	695b      	ldr	r3, [r3, #20]
 800eea8:	009b      	lsls	r3, r3, #2
 800eeaa:	693a      	ldr	r2, [r7, #16]
 800eeac:	4313      	orrs	r3, r2
 800eeae:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800eeb0:	683b      	ldr	r3, [r7, #0]
 800eeb2:	699b      	ldr	r3, [r3, #24]
 800eeb4:	009b      	lsls	r3, r3, #2
 800eeb6:	693a      	ldr	r2, [r7, #16]
 800eeb8:	4313      	orrs	r3, r2
 800eeba:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800eebc:	687b      	ldr	r3, [r7, #4]
 800eebe:	693a      	ldr	r2, [r7, #16]
 800eec0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800eec2:	687b      	ldr	r3, [r7, #4]
 800eec4:	68fa      	ldr	r2, [r7, #12]
 800eec6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800eec8:	683b      	ldr	r3, [r7, #0]
 800eeca:	685a      	ldr	r2, [r3, #4]
 800eecc:	687b      	ldr	r3, [r7, #4]
 800eece:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800eed0:	687b      	ldr	r3, [r7, #4]
 800eed2:	697a      	ldr	r2, [r7, #20]
 800eed4:	621a      	str	r2, [r3, #32]
}
 800eed6:	bf00      	nop
 800eed8:	371c      	adds	r7, #28
 800eeda:	46bd      	mov	sp, r7
 800eedc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eee0:	4770      	bx	lr
 800eee2:	bf00      	nop
 800eee4:	40012c00 	.word	0x40012c00
 800eee8:	40013400 	.word	0x40013400
 800eeec:	40014000 	.word	0x40014000
 800eef0:	40014400 	.word	0x40014400
 800eef4:	40014800 	.word	0x40014800

0800eef8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800eef8:	b480      	push	{r7}
 800eefa:	b087      	sub	sp, #28
 800eefc:	af00      	add	r7, sp, #0
 800eefe:	6078      	str	r0, [r7, #4]
 800ef00:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ef02:	687b      	ldr	r3, [r7, #4]
 800ef04:	6a1b      	ldr	r3, [r3, #32]
 800ef06:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800ef08:	687b      	ldr	r3, [r7, #4]
 800ef0a:	6a1b      	ldr	r3, [r3, #32]
 800ef0c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800ef10:	687b      	ldr	r3, [r7, #4]
 800ef12:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ef14:	687b      	ldr	r3, [r7, #4]
 800ef16:	685b      	ldr	r3, [r3, #4]
 800ef18:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800ef1a:	687b      	ldr	r3, [r7, #4]
 800ef1c:	69db      	ldr	r3, [r3, #28]
 800ef1e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800ef20:	68fb      	ldr	r3, [r7, #12]
 800ef22:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800ef26:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800ef2a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800ef2c:	68fb      	ldr	r3, [r7, #12]
 800ef2e:	f023 0303 	bic.w	r3, r3, #3
 800ef32:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800ef34:	683b      	ldr	r3, [r7, #0]
 800ef36:	681b      	ldr	r3, [r3, #0]
 800ef38:	68fa      	ldr	r2, [r7, #12]
 800ef3a:	4313      	orrs	r3, r2
 800ef3c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800ef3e:	697b      	ldr	r3, [r7, #20]
 800ef40:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800ef44:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800ef46:	683b      	ldr	r3, [r7, #0]
 800ef48:	689b      	ldr	r3, [r3, #8]
 800ef4a:	021b      	lsls	r3, r3, #8
 800ef4c:	697a      	ldr	r2, [r7, #20]
 800ef4e:	4313      	orrs	r3, r2
 800ef50:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800ef52:	687b      	ldr	r3, [r7, #4]
 800ef54:	4a27      	ldr	r2, [pc, #156]	@ (800eff4 <TIM_OC3_SetConfig+0xfc>)
 800ef56:	4293      	cmp	r3, r2
 800ef58:	d003      	beq.n	800ef62 <TIM_OC3_SetConfig+0x6a>
 800ef5a:	687b      	ldr	r3, [r7, #4]
 800ef5c:	4a26      	ldr	r2, [pc, #152]	@ (800eff8 <TIM_OC3_SetConfig+0x100>)
 800ef5e:	4293      	cmp	r3, r2
 800ef60:	d10d      	bne.n	800ef7e <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800ef62:	697b      	ldr	r3, [r7, #20]
 800ef64:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800ef68:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800ef6a:	683b      	ldr	r3, [r7, #0]
 800ef6c:	68db      	ldr	r3, [r3, #12]
 800ef6e:	021b      	lsls	r3, r3, #8
 800ef70:	697a      	ldr	r2, [r7, #20]
 800ef72:	4313      	orrs	r3, r2
 800ef74:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800ef76:	697b      	ldr	r3, [r7, #20]
 800ef78:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800ef7c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ef7e:	687b      	ldr	r3, [r7, #4]
 800ef80:	4a1c      	ldr	r2, [pc, #112]	@ (800eff4 <TIM_OC3_SetConfig+0xfc>)
 800ef82:	4293      	cmp	r3, r2
 800ef84:	d00f      	beq.n	800efa6 <TIM_OC3_SetConfig+0xae>
 800ef86:	687b      	ldr	r3, [r7, #4]
 800ef88:	4a1b      	ldr	r2, [pc, #108]	@ (800eff8 <TIM_OC3_SetConfig+0x100>)
 800ef8a:	4293      	cmp	r3, r2
 800ef8c:	d00b      	beq.n	800efa6 <TIM_OC3_SetConfig+0xae>
 800ef8e:	687b      	ldr	r3, [r7, #4]
 800ef90:	4a1a      	ldr	r2, [pc, #104]	@ (800effc <TIM_OC3_SetConfig+0x104>)
 800ef92:	4293      	cmp	r3, r2
 800ef94:	d007      	beq.n	800efa6 <TIM_OC3_SetConfig+0xae>
 800ef96:	687b      	ldr	r3, [r7, #4]
 800ef98:	4a19      	ldr	r2, [pc, #100]	@ (800f000 <TIM_OC3_SetConfig+0x108>)
 800ef9a:	4293      	cmp	r3, r2
 800ef9c:	d003      	beq.n	800efa6 <TIM_OC3_SetConfig+0xae>
 800ef9e:	687b      	ldr	r3, [r7, #4]
 800efa0:	4a18      	ldr	r2, [pc, #96]	@ (800f004 <TIM_OC3_SetConfig+0x10c>)
 800efa2:	4293      	cmp	r3, r2
 800efa4:	d113      	bne.n	800efce <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800efa6:	693b      	ldr	r3, [r7, #16]
 800efa8:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800efac:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800efae:	693b      	ldr	r3, [r7, #16]
 800efb0:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800efb4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800efb6:	683b      	ldr	r3, [r7, #0]
 800efb8:	695b      	ldr	r3, [r3, #20]
 800efba:	011b      	lsls	r3, r3, #4
 800efbc:	693a      	ldr	r2, [r7, #16]
 800efbe:	4313      	orrs	r3, r2
 800efc0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800efc2:	683b      	ldr	r3, [r7, #0]
 800efc4:	699b      	ldr	r3, [r3, #24]
 800efc6:	011b      	lsls	r3, r3, #4
 800efc8:	693a      	ldr	r2, [r7, #16]
 800efca:	4313      	orrs	r3, r2
 800efcc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800efce:	687b      	ldr	r3, [r7, #4]
 800efd0:	693a      	ldr	r2, [r7, #16]
 800efd2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800efd4:	687b      	ldr	r3, [r7, #4]
 800efd6:	68fa      	ldr	r2, [r7, #12]
 800efd8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800efda:	683b      	ldr	r3, [r7, #0]
 800efdc:	685a      	ldr	r2, [r3, #4]
 800efde:	687b      	ldr	r3, [r7, #4]
 800efe0:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800efe2:	687b      	ldr	r3, [r7, #4]
 800efe4:	697a      	ldr	r2, [r7, #20]
 800efe6:	621a      	str	r2, [r3, #32]
}
 800efe8:	bf00      	nop
 800efea:	371c      	adds	r7, #28
 800efec:	46bd      	mov	sp, r7
 800efee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eff2:	4770      	bx	lr
 800eff4:	40012c00 	.word	0x40012c00
 800eff8:	40013400 	.word	0x40013400
 800effc:	40014000 	.word	0x40014000
 800f000:	40014400 	.word	0x40014400
 800f004:	40014800 	.word	0x40014800

0800f008 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800f008:	b480      	push	{r7}
 800f00a:	b087      	sub	sp, #28
 800f00c:	af00      	add	r7, sp, #0
 800f00e:	6078      	str	r0, [r7, #4]
 800f010:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800f012:	687b      	ldr	r3, [r7, #4]
 800f014:	6a1b      	ldr	r3, [r3, #32]
 800f016:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800f018:	687b      	ldr	r3, [r7, #4]
 800f01a:	6a1b      	ldr	r3, [r3, #32]
 800f01c:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800f020:	687b      	ldr	r3, [r7, #4]
 800f022:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800f024:	687b      	ldr	r3, [r7, #4]
 800f026:	685b      	ldr	r3, [r3, #4]
 800f028:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800f02a:	687b      	ldr	r3, [r7, #4]
 800f02c:	69db      	ldr	r3, [r3, #28]
 800f02e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800f030:	68fb      	ldr	r3, [r7, #12]
 800f032:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800f036:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800f03a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800f03c:	68fb      	ldr	r3, [r7, #12]
 800f03e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800f042:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800f044:	683b      	ldr	r3, [r7, #0]
 800f046:	681b      	ldr	r3, [r3, #0]
 800f048:	021b      	lsls	r3, r3, #8
 800f04a:	68fa      	ldr	r2, [r7, #12]
 800f04c:	4313      	orrs	r3, r2
 800f04e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800f050:	693b      	ldr	r3, [r7, #16]
 800f052:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800f056:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800f058:	683b      	ldr	r3, [r7, #0]
 800f05a:	689b      	ldr	r3, [r3, #8]
 800f05c:	031b      	lsls	r3, r3, #12
 800f05e:	693a      	ldr	r2, [r7, #16]
 800f060:	4313      	orrs	r3, r2
 800f062:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800f064:	687b      	ldr	r3, [r7, #4]
 800f066:	4a18      	ldr	r2, [pc, #96]	@ (800f0c8 <TIM_OC4_SetConfig+0xc0>)
 800f068:	4293      	cmp	r3, r2
 800f06a:	d00f      	beq.n	800f08c <TIM_OC4_SetConfig+0x84>
 800f06c:	687b      	ldr	r3, [r7, #4]
 800f06e:	4a17      	ldr	r2, [pc, #92]	@ (800f0cc <TIM_OC4_SetConfig+0xc4>)
 800f070:	4293      	cmp	r3, r2
 800f072:	d00b      	beq.n	800f08c <TIM_OC4_SetConfig+0x84>
 800f074:	687b      	ldr	r3, [r7, #4]
 800f076:	4a16      	ldr	r2, [pc, #88]	@ (800f0d0 <TIM_OC4_SetConfig+0xc8>)
 800f078:	4293      	cmp	r3, r2
 800f07a:	d007      	beq.n	800f08c <TIM_OC4_SetConfig+0x84>
 800f07c:	687b      	ldr	r3, [r7, #4]
 800f07e:	4a15      	ldr	r2, [pc, #84]	@ (800f0d4 <TIM_OC4_SetConfig+0xcc>)
 800f080:	4293      	cmp	r3, r2
 800f082:	d003      	beq.n	800f08c <TIM_OC4_SetConfig+0x84>
 800f084:	687b      	ldr	r3, [r7, #4]
 800f086:	4a14      	ldr	r2, [pc, #80]	@ (800f0d8 <TIM_OC4_SetConfig+0xd0>)
 800f088:	4293      	cmp	r3, r2
 800f08a:	d109      	bne.n	800f0a0 <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800f08c:	697b      	ldr	r3, [r7, #20]
 800f08e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800f092:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800f094:	683b      	ldr	r3, [r7, #0]
 800f096:	695b      	ldr	r3, [r3, #20]
 800f098:	019b      	lsls	r3, r3, #6
 800f09a:	697a      	ldr	r2, [r7, #20]
 800f09c:	4313      	orrs	r3, r2
 800f09e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800f0a0:	687b      	ldr	r3, [r7, #4]
 800f0a2:	697a      	ldr	r2, [r7, #20]
 800f0a4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800f0a6:	687b      	ldr	r3, [r7, #4]
 800f0a8:	68fa      	ldr	r2, [r7, #12]
 800f0aa:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800f0ac:	683b      	ldr	r3, [r7, #0]
 800f0ae:	685a      	ldr	r2, [r3, #4]
 800f0b0:	687b      	ldr	r3, [r7, #4]
 800f0b2:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800f0b4:	687b      	ldr	r3, [r7, #4]
 800f0b6:	693a      	ldr	r2, [r7, #16]
 800f0b8:	621a      	str	r2, [r3, #32]
}
 800f0ba:	bf00      	nop
 800f0bc:	371c      	adds	r7, #28
 800f0be:	46bd      	mov	sp, r7
 800f0c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f0c4:	4770      	bx	lr
 800f0c6:	bf00      	nop
 800f0c8:	40012c00 	.word	0x40012c00
 800f0cc:	40013400 	.word	0x40013400
 800f0d0:	40014000 	.word	0x40014000
 800f0d4:	40014400 	.word	0x40014400
 800f0d8:	40014800 	.word	0x40014800

0800f0dc <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800f0dc:	b480      	push	{r7}
 800f0de:	b087      	sub	sp, #28
 800f0e0:	af00      	add	r7, sp, #0
 800f0e2:	6078      	str	r0, [r7, #4]
 800f0e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800f0e6:	687b      	ldr	r3, [r7, #4]
 800f0e8:	6a1b      	ldr	r3, [r3, #32]
 800f0ea:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800f0ec:	687b      	ldr	r3, [r7, #4]
 800f0ee:	6a1b      	ldr	r3, [r3, #32]
 800f0f0:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800f0f4:	687b      	ldr	r3, [r7, #4]
 800f0f6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800f0f8:	687b      	ldr	r3, [r7, #4]
 800f0fa:	685b      	ldr	r3, [r3, #4]
 800f0fc:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800f0fe:	687b      	ldr	r3, [r7, #4]
 800f100:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800f102:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800f104:	68fb      	ldr	r3, [r7, #12]
 800f106:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800f10a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800f10e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800f110:	683b      	ldr	r3, [r7, #0]
 800f112:	681b      	ldr	r3, [r3, #0]
 800f114:	68fa      	ldr	r2, [r7, #12]
 800f116:	4313      	orrs	r3, r2
 800f118:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800f11a:	693b      	ldr	r3, [r7, #16]
 800f11c:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 800f120:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800f122:	683b      	ldr	r3, [r7, #0]
 800f124:	689b      	ldr	r3, [r3, #8]
 800f126:	041b      	lsls	r3, r3, #16
 800f128:	693a      	ldr	r2, [r7, #16]
 800f12a:	4313      	orrs	r3, r2
 800f12c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800f12e:	687b      	ldr	r3, [r7, #4]
 800f130:	4a17      	ldr	r2, [pc, #92]	@ (800f190 <TIM_OC5_SetConfig+0xb4>)
 800f132:	4293      	cmp	r3, r2
 800f134:	d00f      	beq.n	800f156 <TIM_OC5_SetConfig+0x7a>
 800f136:	687b      	ldr	r3, [r7, #4]
 800f138:	4a16      	ldr	r2, [pc, #88]	@ (800f194 <TIM_OC5_SetConfig+0xb8>)
 800f13a:	4293      	cmp	r3, r2
 800f13c:	d00b      	beq.n	800f156 <TIM_OC5_SetConfig+0x7a>
 800f13e:	687b      	ldr	r3, [r7, #4]
 800f140:	4a15      	ldr	r2, [pc, #84]	@ (800f198 <TIM_OC5_SetConfig+0xbc>)
 800f142:	4293      	cmp	r3, r2
 800f144:	d007      	beq.n	800f156 <TIM_OC5_SetConfig+0x7a>
 800f146:	687b      	ldr	r3, [r7, #4]
 800f148:	4a14      	ldr	r2, [pc, #80]	@ (800f19c <TIM_OC5_SetConfig+0xc0>)
 800f14a:	4293      	cmp	r3, r2
 800f14c:	d003      	beq.n	800f156 <TIM_OC5_SetConfig+0x7a>
 800f14e:	687b      	ldr	r3, [r7, #4]
 800f150:	4a13      	ldr	r2, [pc, #76]	@ (800f1a0 <TIM_OC5_SetConfig+0xc4>)
 800f152:	4293      	cmp	r3, r2
 800f154:	d109      	bne.n	800f16a <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800f156:	697b      	ldr	r3, [r7, #20]
 800f158:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800f15c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800f15e:	683b      	ldr	r3, [r7, #0]
 800f160:	695b      	ldr	r3, [r3, #20]
 800f162:	021b      	lsls	r3, r3, #8
 800f164:	697a      	ldr	r2, [r7, #20]
 800f166:	4313      	orrs	r3, r2
 800f168:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800f16a:	687b      	ldr	r3, [r7, #4]
 800f16c:	697a      	ldr	r2, [r7, #20]
 800f16e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800f170:	687b      	ldr	r3, [r7, #4]
 800f172:	68fa      	ldr	r2, [r7, #12]
 800f174:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800f176:	683b      	ldr	r3, [r7, #0]
 800f178:	685a      	ldr	r2, [r3, #4]
 800f17a:	687b      	ldr	r3, [r7, #4]
 800f17c:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800f17e:	687b      	ldr	r3, [r7, #4]
 800f180:	693a      	ldr	r2, [r7, #16]
 800f182:	621a      	str	r2, [r3, #32]
}
 800f184:	bf00      	nop
 800f186:	371c      	adds	r7, #28
 800f188:	46bd      	mov	sp, r7
 800f18a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f18e:	4770      	bx	lr
 800f190:	40012c00 	.word	0x40012c00
 800f194:	40013400 	.word	0x40013400
 800f198:	40014000 	.word	0x40014000
 800f19c:	40014400 	.word	0x40014400
 800f1a0:	40014800 	.word	0x40014800

0800f1a4 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800f1a4:	b480      	push	{r7}
 800f1a6:	b087      	sub	sp, #28
 800f1a8:	af00      	add	r7, sp, #0
 800f1aa:	6078      	str	r0, [r7, #4]
 800f1ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800f1ae:	687b      	ldr	r3, [r7, #4]
 800f1b0:	6a1b      	ldr	r3, [r3, #32]
 800f1b2:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800f1b4:	687b      	ldr	r3, [r7, #4]
 800f1b6:	6a1b      	ldr	r3, [r3, #32]
 800f1b8:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 800f1bc:	687b      	ldr	r3, [r7, #4]
 800f1be:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800f1c0:	687b      	ldr	r3, [r7, #4]
 800f1c2:	685b      	ldr	r3, [r3, #4]
 800f1c4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800f1c6:	687b      	ldr	r3, [r7, #4]
 800f1c8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800f1ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800f1cc:	68fb      	ldr	r3, [r7, #12]
 800f1ce:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800f1d2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800f1d6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800f1d8:	683b      	ldr	r3, [r7, #0]
 800f1da:	681b      	ldr	r3, [r3, #0]
 800f1dc:	021b      	lsls	r3, r3, #8
 800f1de:	68fa      	ldr	r2, [r7, #12]
 800f1e0:	4313      	orrs	r3, r2
 800f1e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800f1e4:	693b      	ldr	r3, [r7, #16]
 800f1e6:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800f1ea:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800f1ec:	683b      	ldr	r3, [r7, #0]
 800f1ee:	689b      	ldr	r3, [r3, #8]
 800f1f0:	051b      	lsls	r3, r3, #20
 800f1f2:	693a      	ldr	r2, [r7, #16]
 800f1f4:	4313      	orrs	r3, r2
 800f1f6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800f1f8:	687b      	ldr	r3, [r7, #4]
 800f1fa:	4a18      	ldr	r2, [pc, #96]	@ (800f25c <TIM_OC6_SetConfig+0xb8>)
 800f1fc:	4293      	cmp	r3, r2
 800f1fe:	d00f      	beq.n	800f220 <TIM_OC6_SetConfig+0x7c>
 800f200:	687b      	ldr	r3, [r7, #4]
 800f202:	4a17      	ldr	r2, [pc, #92]	@ (800f260 <TIM_OC6_SetConfig+0xbc>)
 800f204:	4293      	cmp	r3, r2
 800f206:	d00b      	beq.n	800f220 <TIM_OC6_SetConfig+0x7c>
 800f208:	687b      	ldr	r3, [r7, #4]
 800f20a:	4a16      	ldr	r2, [pc, #88]	@ (800f264 <TIM_OC6_SetConfig+0xc0>)
 800f20c:	4293      	cmp	r3, r2
 800f20e:	d007      	beq.n	800f220 <TIM_OC6_SetConfig+0x7c>
 800f210:	687b      	ldr	r3, [r7, #4]
 800f212:	4a15      	ldr	r2, [pc, #84]	@ (800f268 <TIM_OC6_SetConfig+0xc4>)
 800f214:	4293      	cmp	r3, r2
 800f216:	d003      	beq.n	800f220 <TIM_OC6_SetConfig+0x7c>
 800f218:	687b      	ldr	r3, [r7, #4]
 800f21a:	4a14      	ldr	r2, [pc, #80]	@ (800f26c <TIM_OC6_SetConfig+0xc8>)
 800f21c:	4293      	cmp	r3, r2
 800f21e:	d109      	bne.n	800f234 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800f220:	697b      	ldr	r3, [r7, #20]
 800f222:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800f226:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800f228:	683b      	ldr	r3, [r7, #0]
 800f22a:	695b      	ldr	r3, [r3, #20]
 800f22c:	029b      	lsls	r3, r3, #10
 800f22e:	697a      	ldr	r2, [r7, #20]
 800f230:	4313      	orrs	r3, r2
 800f232:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800f234:	687b      	ldr	r3, [r7, #4]
 800f236:	697a      	ldr	r2, [r7, #20]
 800f238:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800f23a:	687b      	ldr	r3, [r7, #4]
 800f23c:	68fa      	ldr	r2, [r7, #12]
 800f23e:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800f240:	683b      	ldr	r3, [r7, #0]
 800f242:	685a      	ldr	r2, [r3, #4]
 800f244:	687b      	ldr	r3, [r7, #4]
 800f246:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800f248:	687b      	ldr	r3, [r7, #4]
 800f24a:	693a      	ldr	r2, [r7, #16]
 800f24c:	621a      	str	r2, [r3, #32]
}
 800f24e:	bf00      	nop
 800f250:	371c      	adds	r7, #28
 800f252:	46bd      	mov	sp, r7
 800f254:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f258:	4770      	bx	lr
 800f25a:	bf00      	nop
 800f25c:	40012c00 	.word	0x40012c00
 800f260:	40013400 	.word	0x40013400
 800f264:	40014000 	.word	0x40014000
 800f268:	40014400 	.word	0x40014400
 800f26c:	40014800 	.word	0x40014800

0800f270 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 800f270:	b480      	push	{r7}
 800f272:	b087      	sub	sp, #28
 800f274:	af00      	add	r7, sp, #0
 800f276:	60f8      	str	r0, [r7, #12]
 800f278:	60b9      	str	r1, [r7, #8]
 800f27a:	607a      	str	r2, [r7, #4]
 800f27c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800f27e:	68fb      	ldr	r3, [r7, #12]
 800f280:	6a1b      	ldr	r3, [r3, #32]
 800f282:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800f284:	68fb      	ldr	r3, [r7, #12]
 800f286:	6a1b      	ldr	r3, [r3, #32]
 800f288:	f023 0201 	bic.w	r2, r3, #1
 800f28c:	68fb      	ldr	r3, [r7, #12]
 800f28e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800f290:	68fb      	ldr	r3, [r7, #12]
 800f292:	699b      	ldr	r3, [r3, #24]
 800f294:	617b      	str	r3, [r7, #20]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 800f296:	68fb      	ldr	r3, [r7, #12]
 800f298:	4a26      	ldr	r2, [pc, #152]	@ (800f334 <TIM_TI1_SetConfig+0xc4>)
 800f29a:	4293      	cmp	r3, r2
 800f29c:	d017      	beq.n	800f2ce <TIM_TI1_SetConfig+0x5e>
 800f29e:	68fb      	ldr	r3, [r7, #12]
 800f2a0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800f2a4:	d013      	beq.n	800f2ce <TIM_TI1_SetConfig+0x5e>
 800f2a6:	68fb      	ldr	r3, [r7, #12]
 800f2a8:	4a23      	ldr	r2, [pc, #140]	@ (800f338 <TIM_TI1_SetConfig+0xc8>)
 800f2aa:	4293      	cmp	r3, r2
 800f2ac:	d00f      	beq.n	800f2ce <TIM_TI1_SetConfig+0x5e>
 800f2ae:	68fb      	ldr	r3, [r7, #12]
 800f2b0:	4a22      	ldr	r2, [pc, #136]	@ (800f33c <TIM_TI1_SetConfig+0xcc>)
 800f2b2:	4293      	cmp	r3, r2
 800f2b4:	d00b      	beq.n	800f2ce <TIM_TI1_SetConfig+0x5e>
 800f2b6:	68fb      	ldr	r3, [r7, #12]
 800f2b8:	4a21      	ldr	r2, [pc, #132]	@ (800f340 <TIM_TI1_SetConfig+0xd0>)
 800f2ba:	4293      	cmp	r3, r2
 800f2bc:	d007      	beq.n	800f2ce <TIM_TI1_SetConfig+0x5e>
 800f2be:	68fb      	ldr	r3, [r7, #12]
 800f2c0:	4a20      	ldr	r2, [pc, #128]	@ (800f344 <TIM_TI1_SetConfig+0xd4>)
 800f2c2:	4293      	cmp	r3, r2
 800f2c4:	d003      	beq.n	800f2ce <TIM_TI1_SetConfig+0x5e>
 800f2c6:	68fb      	ldr	r3, [r7, #12]
 800f2c8:	4a1f      	ldr	r2, [pc, #124]	@ (800f348 <TIM_TI1_SetConfig+0xd8>)
 800f2ca:	4293      	cmp	r3, r2
 800f2cc:	d101      	bne.n	800f2d2 <TIM_TI1_SetConfig+0x62>
 800f2ce:	2301      	movs	r3, #1
 800f2d0:	e000      	b.n	800f2d4 <TIM_TI1_SetConfig+0x64>
 800f2d2:	2300      	movs	r3, #0
 800f2d4:	2b00      	cmp	r3, #0
 800f2d6:	d008      	beq.n	800f2ea <TIM_TI1_SetConfig+0x7a>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 800f2d8:	697b      	ldr	r3, [r7, #20]
 800f2da:	f023 0303 	bic.w	r3, r3, #3
 800f2de:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 800f2e0:	697a      	ldr	r2, [r7, #20]
 800f2e2:	687b      	ldr	r3, [r7, #4]
 800f2e4:	4313      	orrs	r3, r2
 800f2e6:	617b      	str	r3, [r7, #20]
 800f2e8:	e003      	b.n	800f2f2 <TIM_TI1_SetConfig+0x82>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 800f2ea:	697b      	ldr	r3, [r7, #20]
 800f2ec:	f043 0301 	orr.w	r3, r3, #1
 800f2f0:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800f2f2:	697b      	ldr	r3, [r7, #20]
 800f2f4:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800f2f8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 800f2fa:	683b      	ldr	r3, [r7, #0]
 800f2fc:	011b      	lsls	r3, r3, #4
 800f2fe:	b2db      	uxtb	r3, r3
 800f300:	697a      	ldr	r2, [r7, #20]
 800f302:	4313      	orrs	r3, r2
 800f304:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800f306:	693b      	ldr	r3, [r7, #16]
 800f308:	f023 030a 	bic.w	r3, r3, #10
 800f30c:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 800f30e:	68bb      	ldr	r3, [r7, #8]
 800f310:	f003 030a 	and.w	r3, r3, #10
 800f314:	693a      	ldr	r2, [r7, #16]
 800f316:	4313      	orrs	r3, r2
 800f318:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800f31a:	68fb      	ldr	r3, [r7, #12]
 800f31c:	697a      	ldr	r2, [r7, #20]
 800f31e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800f320:	68fb      	ldr	r3, [r7, #12]
 800f322:	693a      	ldr	r2, [r7, #16]
 800f324:	621a      	str	r2, [r3, #32]
}
 800f326:	bf00      	nop
 800f328:	371c      	adds	r7, #28
 800f32a:	46bd      	mov	sp, r7
 800f32c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f330:	4770      	bx	lr
 800f332:	bf00      	nop
 800f334:	40012c00 	.word	0x40012c00
 800f338:	40000400 	.word	0x40000400
 800f33c:	40000800 	.word	0x40000800
 800f340:	40000c00 	.word	0x40000c00
 800f344:	40013400 	.word	0x40013400
 800f348:	40014000 	.word	0x40014000

0800f34c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800f34c:	b480      	push	{r7}
 800f34e:	b087      	sub	sp, #28
 800f350:	af00      	add	r7, sp, #0
 800f352:	60f8      	str	r0, [r7, #12]
 800f354:	60b9      	str	r1, [r7, #8]
 800f356:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800f358:	68fb      	ldr	r3, [r7, #12]
 800f35a:	6a1b      	ldr	r3, [r3, #32]
 800f35c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800f35e:	68fb      	ldr	r3, [r7, #12]
 800f360:	6a1b      	ldr	r3, [r3, #32]
 800f362:	f023 0201 	bic.w	r2, r3, #1
 800f366:	68fb      	ldr	r3, [r7, #12]
 800f368:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800f36a:	68fb      	ldr	r3, [r7, #12]
 800f36c:	699b      	ldr	r3, [r3, #24]
 800f36e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800f370:	693b      	ldr	r3, [r7, #16]
 800f372:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800f376:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800f378:	687b      	ldr	r3, [r7, #4]
 800f37a:	011b      	lsls	r3, r3, #4
 800f37c:	693a      	ldr	r2, [r7, #16]
 800f37e:	4313      	orrs	r3, r2
 800f380:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800f382:	697b      	ldr	r3, [r7, #20]
 800f384:	f023 030a 	bic.w	r3, r3, #10
 800f388:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800f38a:	697a      	ldr	r2, [r7, #20]
 800f38c:	68bb      	ldr	r3, [r7, #8]
 800f38e:	4313      	orrs	r3, r2
 800f390:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800f392:	68fb      	ldr	r3, [r7, #12]
 800f394:	693a      	ldr	r2, [r7, #16]
 800f396:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800f398:	68fb      	ldr	r3, [r7, #12]
 800f39a:	697a      	ldr	r2, [r7, #20]
 800f39c:	621a      	str	r2, [r3, #32]
}
 800f39e:	bf00      	nop
 800f3a0:	371c      	adds	r7, #28
 800f3a2:	46bd      	mov	sp, r7
 800f3a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f3a8:	4770      	bx	lr

0800f3aa <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800f3aa:	b480      	push	{r7}
 800f3ac:	b087      	sub	sp, #28
 800f3ae:	af00      	add	r7, sp, #0
 800f3b0:	60f8      	str	r0, [r7, #12]
 800f3b2:	60b9      	str	r1, [r7, #8]
 800f3b4:	607a      	str	r2, [r7, #4]
 800f3b6:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800f3b8:	68fb      	ldr	r3, [r7, #12]
 800f3ba:	6a1b      	ldr	r3, [r3, #32]
 800f3bc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800f3be:	68fb      	ldr	r3, [r7, #12]
 800f3c0:	6a1b      	ldr	r3, [r3, #32]
 800f3c2:	f023 0210 	bic.w	r2, r3, #16
 800f3c6:	68fb      	ldr	r3, [r7, #12]
 800f3c8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800f3ca:	68fb      	ldr	r3, [r7, #12]
 800f3cc:	699b      	ldr	r3, [r3, #24]
 800f3ce:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 800f3d0:	693b      	ldr	r3, [r7, #16]
 800f3d2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800f3d6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 800f3d8:	687b      	ldr	r3, [r7, #4]
 800f3da:	021b      	lsls	r3, r3, #8
 800f3dc:	693a      	ldr	r2, [r7, #16]
 800f3de:	4313      	orrs	r3, r2
 800f3e0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800f3e2:	693b      	ldr	r3, [r7, #16]
 800f3e4:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800f3e8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 800f3ea:	683b      	ldr	r3, [r7, #0]
 800f3ec:	031b      	lsls	r3, r3, #12
 800f3ee:	b29b      	uxth	r3, r3
 800f3f0:	693a      	ldr	r2, [r7, #16]
 800f3f2:	4313      	orrs	r3, r2
 800f3f4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800f3f6:	697b      	ldr	r3, [r7, #20]
 800f3f8:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800f3fc:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 800f3fe:	68bb      	ldr	r3, [r7, #8]
 800f400:	011b      	lsls	r3, r3, #4
 800f402:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
 800f406:	697a      	ldr	r2, [r7, #20]
 800f408:	4313      	orrs	r3, r2
 800f40a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800f40c:	68fb      	ldr	r3, [r7, #12]
 800f40e:	693a      	ldr	r2, [r7, #16]
 800f410:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800f412:	68fb      	ldr	r3, [r7, #12]
 800f414:	697a      	ldr	r2, [r7, #20]
 800f416:	621a      	str	r2, [r3, #32]
}
 800f418:	bf00      	nop
 800f41a:	371c      	adds	r7, #28
 800f41c:	46bd      	mov	sp, r7
 800f41e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f422:	4770      	bx	lr

0800f424 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800f424:	b480      	push	{r7}
 800f426:	b087      	sub	sp, #28
 800f428:	af00      	add	r7, sp, #0
 800f42a:	60f8      	str	r0, [r7, #12]
 800f42c:	60b9      	str	r1, [r7, #8]
 800f42e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800f430:	68fb      	ldr	r3, [r7, #12]
 800f432:	6a1b      	ldr	r3, [r3, #32]
 800f434:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800f436:	68fb      	ldr	r3, [r7, #12]
 800f438:	6a1b      	ldr	r3, [r3, #32]
 800f43a:	f023 0210 	bic.w	r2, r3, #16
 800f43e:	68fb      	ldr	r3, [r7, #12]
 800f440:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800f442:	68fb      	ldr	r3, [r7, #12]
 800f444:	699b      	ldr	r3, [r3, #24]
 800f446:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800f448:	693b      	ldr	r3, [r7, #16]
 800f44a:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800f44e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800f450:	687b      	ldr	r3, [r7, #4]
 800f452:	031b      	lsls	r3, r3, #12
 800f454:	693a      	ldr	r2, [r7, #16]
 800f456:	4313      	orrs	r3, r2
 800f458:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800f45a:	697b      	ldr	r3, [r7, #20]
 800f45c:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800f460:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800f462:	68bb      	ldr	r3, [r7, #8]
 800f464:	011b      	lsls	r3, r3, #4
 800f466:	697a      	ldr	r2, [r7, #20]
 800f468:	4313      	orrs	r3, r2
 800f46a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800f46c:	68fb      	ldr	r3, [r7, #12]
 800f46e:	693a      	ldr	r2, [r7, #16]
 800f470:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800f472:	68fb      	ldr	r3, [r7, #12]
 800f474:	697a      	ldr	r2, [r7, #20]
 800f476:	621a      	str	r2, [r3, #32]
}
 800f478:	bf00      	nop
 800f47a:	371c      	adds	r7, #28
 800f47c:	46bd      	mov	sp, r7
 800f47e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f482:	4770      	bx	lr

0800f484 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800f484:	b480      	push	{r7}
 800f486:	b087      	sub	sp, #28
 800f488:	af00      	add	r7, sp, #0
 800f48a:	60f8      	str	r0, [r7, #12]
 800f48c:	60b9      	str	r1, [r7, #8]
 800f48e:	607a      	str	r2, [r7, #4]
 800f490:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  tmpccer = TIMx->CCER;
 800f492:	68fb      	ldr	r3, [r7, #12]
 800f494:	6a1b      	ldr	r3, [r3, #32]
 800f496:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800f498:	68fb      	ldr	r3, [r7, #12]
 800f49a:	6a1b      	ldr	r3, [r3, #32]
 800f49c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800f4a0:	68fb      	ldr	r3, [r7, #12]
 800f4a2:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800f4a4:	68fb      	ldr	r3, [r7, #12]
 800f4a6:	69db      	ldr	r3, [r3, #28]
 800f4a8:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 800f4aa:	693b      	ldr	r3, [r7, #16]
 800f4ac:	f023 0303 	bic.w	r3, r3, #3
 800f4b0:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= TIM_ICSelection;
 800f4b2:	693a      	ldr	r2, [r7, #16]
 800f4b4:	687b      	ldr	r3, [r7, #4]
 800f4b6:	4313      	orrs	r3, r2
 800f4b8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 800f4ba:	693b      	ldr	r3, [r7, #16]
 800f4bc:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800f4c0:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 800f4c2:	683b      	ldr	r3, [r7, #0]
 800f4c4:	011b      	lsls	r3, r3, #4
 800f4c6:	b2db      	uxtb	r3, r3
 800f4c8:	693a      	ldr	r2, [r7, #16]
 800f4ca:	4313      	orrs	r3, r2
 800f4cc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 800f4ce:	697b      	ldr	r3, [r7, #20]
 800f4d0:	f423 6320 	bic.w	r3, r3, #2560	@ 0xa00
 800f4d4:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 800f4d6:	68bb      	ldr	r3, [r7, #8]
 800f4d8:	021b      	lsls	r3, r3, #8
 800f4da:	f403 6320 	and.w	r3, r3, #2560	@ 0xa00
 800f4de:	697a      	ldr	r2, [r7, #20]
 800f4e0:	4313      	orrs	r3, r2
 800f4e2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800f4e4:	68fb      	ldr	r3, [r7, #12]
 800f4e6:	693a      	ldr	r2, [r7, #16]
 800f4e8:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 800f4ea:	68fb      	ldr	r3, [r7, #12]
 800f4ec:	697a      	ldr	r2, [r7, #20]
 800f4ee:	621a      	str	r2, [r3, #32]
}
 800f4f0:	bf00      	nop
 800f4f2:	371c      	adds	r7, #28
 800f4f4:	46bd      	mov	sp, r7
 800f4f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f4fa:	4770      	bx	lr

0800f4fc <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800f4fc:	b480      	push	{r7}
 800f4fe:	b087      	sub	sp, #28
 800f500:	af00      	add	r7, sp, #0
 800f502:	60f8      	str	r0, [r7, #12]
 800f504:	60b9      	str	r1, [r7, #8]
 800f506:	607a      	str	r2, [r7, #4]
 800f508:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  tmpccer = TIMx->CCER;
 800f50a:	68fb      	ldr	r3, [r7, #12]
 800f50c:	6a1b      	ldr	r3, [r3, #32]
 800f50e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800f510:	68fb      	ldr	r3, [r7, #12]
 800f512:	6a1b      	ldr	r3, [r3, #32]
 800f514:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800f518:	68fb      	ldr	r3, [r7, #12]
 800f51a:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800f51c:	68fb      	ldr	r3, [r7, #12]
 800f51e:	69db      	ldr	r3, [r3, #28]
 800f520:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 800f522:	693b      	ldr	r3, [r7, #16]
 800f524:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800f528:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 800f52a:	687b      	ldr	r3, [r7, #4]
 800f52c:	021b      	lsls	r3, r3, #8
 800f52e:	693a      	ldr	r2, [r7, #16]
 800f530:	4313      	orrs	r3, r2
 800f532:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 800f534:	693b      	ldr	r3, [r7, #16]
 800f536:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800f53a:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 800f53c:	683b      	ldr	r3, [r7, #0]
 800f53e:	031b      	lsls	r3, r3, #12
 800f540:	b29b      	uxth	r3, r3
 800f542:	693a      	ldr	r2, [r7, #16]
 800f544:	4313      	orrs	r3, r2
 800f546:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 800f548:	697b      	ldr	r3, [r7, #20]
 800f54a:	f423 4320 	bic.w	r3, r3, #40960	@ 0xa000
 800f54e:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 800f550:	68bb      	ldr	r3, [r7, #8]
 800f552:	031b      	lsls	r3, r3, #12
 800f554:	f403 4320 	and.w	r3, r3, #40960	@ 0xa000
 800f558:	697a      	ldr	r2, [r7, #20]
 800f55a:	4313      	orrs	r3, r2
 800f55c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800f55e:	68fb      	ldr	r3, [r7, #12]
 800f560:	693a      	ldr	r2, [r7, #16]
 800f562:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 800f564:	68fb      	ldr	r3, [r7, #12]
 800f566:	697a      	ldr	r2, [r7, #20]
 800f568:	621a      	str	r2, [r3, #32]
}
 800f56a:	bf00      	nop
 800f56c:	371c      	adds	r7, #28
 800f56e:	46bd      	mov	sp, r7
 800f570:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f574:	4770      	bx	lr

0800f576 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800f576:	b480      	push	{r7}
 800f578:	b085      	sub	sp, #20
 800f57a:	af00      	add	r7, sp, #0
 800f57c:	6078      	str	r0, [r7, #4]
 800f57e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800f580:	687b      	ldr	r3, [r7, #4]
 800f582:	689b      	ldr	r3, [r3, #8]
 800f584:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800f586:	68fb      	ldr	r3, [r7, #12]
 800f588:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800f58c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800f58e:	683a      	ldr	r2, [r7, #0]
 800f590:	68fb      	ldr	r3, [r7, #12]
 800f592:	4313      	orrs	r3, r2
 800f594:	f043 0307 	orr.w	r3, r3, #7
 800f598:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800f59a:	687b      	ldr	r3, [r7, #4]
 800f59c:	68fa      	ldr	r2, [r7, #12]
 800f59e:	609a      	str	r2, [r3, #8]
}
 800f5a0:	bf00      	nop
 800f5a2:	3714      	adds	r7, #20
 800f5a4:	46bd      	mov	sp, r7
 800f5a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f5aa:	4770      	bx	lr

0800f5ac <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800f5ac:	b480      	push	{r7}
 800f5ae:	b087      	sub	sp, #28
 800f5b0:	af00      	add	r7, sp, #0
 800f5b2:	60f8      	str	r0, [r7, #12]
 800f5b4:	60b9      	str	r1, [r7, #8]
 800f5b6:	607a      	str	r2, [r7, #4]
 800f5b8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800f5ba:	68fb      	ldr	r3, [r7, #12]
 800f5bc:	689b      	ldr	r3, [r3, #8]
 800f5be:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800f5c0:	697b      	ldr	r3, [r7, #20]
 800f5c2:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800f5c6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800f5c8:	683b      	ldr	r3, [r7, #0]
 800f5ca:	021a      	lsls	r2, r3, #8
 800f5cc:	687b      	ldr	r3, [r7, #4]
 800f5ce:	431a      	orrs	r2, r3
 800f5d0:	68bb      	ldr	r3, [r7, #8]
 800f5d2:	4313      	orrs	r3, r2
 800f5d4:	697a      	ldr	r2, [r7, #20]
 800f5d6:	4313      	orrs	r3, r2
 800f5d8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800f5da:	68fb      	ldr	r3, [r7, #12]
 800f5dc:	697a      	ldr	r2, [r7, #20]
 800f5de:	609a      	str	r2, [r3, #8]
}
 800f5e0:	bf00      	nop
 800f5e2:	371c      	adds	r7, #28
 800f5e4:	46bd      	mov	sp, r7
 800f5e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f5ea:	4770      	bx	lr

0800f5ec <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800f5ec:	b480      	push	{r7}
 800f5ee:	b087      	sub	sp, #28
 800f5f0:	af00      	add	r7, sp, #0
 800f5f2:	60f8      	str	r0, [r7, #12]
 800f5f4:	60b9      	str	r1, [r7, #8]
 800f5f6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800f5f8:	68bb      	ldr	r3, [r7, #8]
 800f5fa:	f003 031f 	and.w	r3, r3, #31
 800f5fe:	2201      	movs	r2, #1
 800f600:	fa02 f303 	lsl.w	r3, r2, r3
 800f604:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800f606:	68fb      	ldr	r3, [r7, #12]
 800f608:	6a1a      	ldr	r2, [r3, #32]
 800f60a:	697b      	ldr	r3, [r7, #20]
 800f60c:	43db      	mvns	r3, r3
 800f60e:	401a      	ands	r2, r3
 800f610:	68fb      	ldr	r3, [r7, #12]
 800f612:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800f614:	68fb      	ldr	r3, [r7, #12]
 800f616:	6a1a      	ldr	r2, [r3, #32]
 800f618:	68bb      	ldr	r3, [r7, #8]
 800f61a:	f003 031f 	and.w	r3, r3, #31
 800f61e:	6879      	ldr	r1, [r7, #4]
 800f620:	fa01 f303 	lsl.w	r3, r1, r3
 800f624:	431a      	orrs	r2, r3
 800f626:	68fb      	ldr	r3, [r7, #12]
 800f628:	621a      	str	r2, [r3, #32]
}
 800f62a:	bf00      	nop
 800f62c:	371c      	adds	r7, #28
 800f62e:	46bd      	mov	sp, r7
 800f630:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f634:	4770      	bx	lr
	...

0800f638 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800f638:	b480      	push	{r7}
 800f63a:	b085      	sub	sp, #20
 800f63c:	af00      	add	r7, sp, #0
 800f63e:	6078      	str	r0, [r7, #4]
 800f640:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800f642:	687b      	ldr	r3, [r7, #4]
 800f644:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800f648:	2b01      	cmp	r3, #1
 800f64a:	d101      	bne.n	800f650 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800f64c:	2302      	movs	r3, #2
 800f64e:	e068      	b.n	800f722 <HAL_TIMEx_MasterConfigSynchronization+0xea>
 800f650:	687b      	ldr	r3, [r7, #4]
 800f652:	2201      	movs	r2, #1
 800f654:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800f658:	687b      	ldr	r3, [r7, #4]
 800f65a:	2202      	movs	r2, #2
 800f65c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800f660:	687b      	ldr	r3, [r7, #4]
 800f662:	681b      	ldr	r3, [r3, #0]
 800f664:	685b      	ldr	r3, [r3, #4]
 800f666:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800f668:	687b      	ldr	r3, [r7, #4]
 800f66a:	681b      	ldr	r3, [r3, #0]
 800f66c:	689b      	ldr	r3, [r3, #8]
 800f66e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800f670:	687b      	ldr	r3, [r7, #4]
 800f672:	681b      	ldr	r3, [r3, #0]
 800f674:	4a2e      	ldr	r2, [pc, #184]	@ (800f730 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800f676:	4293      	cmp	r3, r2
 800f678:	d004      	beq.n	800f684 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800f67a:	687b      	ldr	r3, [r7, #4]
 800f67c:	681b      	ldr	r3, [r3, #0]
 800f67e:	4a2d      	ldr	r2, [pc, #180]	@ (800f734 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 800f680:	4293      	cmp	r3, r2
 800f682:	d108      	bne.n	800f696 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800f684:	68fb      	ldr	r3, [r7, #12]
 800f686:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800f68a:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800f68c:	683b      	ldr	r3, [r7, #0]
 800f68e:	685b      	ldr	r3, [r3, #4]
 800f690:	68fa      	ldr	r2, [r7, #12]
 800f692:	4313      	orrs	r3, r2
 800f694:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800f696:	68fb      	ldr	r3, [r7, #12]
 800f698:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800f69c:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800f69e:	683b      	ldr	r3, [r7, #0]
 800f6a0:	681b      	ldr	r3, [r3, #0]
 800f6a2:	68fa      	ldr	r2, [r7, #12]
 800f6a4:	4313      	orrs	r3, r2
 800f6a6:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800f6a8:	687b      	ldr	r3, [r7, #4]
 800f6aa:	681b      	ldr	r3, [r3, #0]
 800f6ac:	68fa      	ldr	r2, [r7, #12]
 800f6ae:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800f6b0:	687b      	ldr	r3, [r7, #4]
 800f6b2:	681b      	ldr	r3, [r3, #0]
 800f6b4:	4a1e      	ldr	r2, [pc, #120]	@ (800f730 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800f6b6:	4293      	cmp	r3, r2
 800f6b8:	d01d      	beq.n	800f6f6 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800f6ba:	687b      	ldr	r3, [r7, #4]
 800f6bc:	681b      	ldr	r3, [r3, #0]
 800f6be:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800f6c2:	d018      	beq.n	800f6f6 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800f6c4:	687b      	ldr	r3, [r7, #4]
 800f6c6:	681b      	ldr	r3, [r3, #0]
 800f6c8:	4a1b      	ldr	r2, [pc, #108]	@ (800f738 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800f6ca:	4293      	cmp	r3, r2
 800f6cc:	d013      	beq.n	800f6f6 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800f6ce:	687b      	ldr	r3, [r7, #4]
 800f6d0:	681b      	ldr	r3, [r3, #0]
 800f6d2:	4a1a      	ldr	r2, [pc, #104]	@ (800f73c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800f6d4:	4293      	cmp	r3, r2
 800f6d6:	d00e      	beq.n	800f6f6 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800f6d8:	687b      	ldr	r3, [r7, #4]
 800f6da:	681b      	ldr	r3, [r3, #0]
 800f6dc:	4a18      	ldr	r2, [pc, #96]	@ (800f740 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800f6de:	4293      	cmp	r3, r2
 800f6e0:	d009      	beq.n	800f6f6 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800f6e2:	687b      	ldr	r3, [r7, #4]
 800f6e4:	681b      	ldr	r3, [r3, #0]
 800f6e6:	4a13      	ldr	r2, [pc, #76]	@ (800f734 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 800f6e8:	4293      	cmp	r3, r2
 800f6ea:	d004      	beq.n	800f6f6 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800f6ec:	687b      	ldr	r3, [r7, #4]
 800f6ee:	681b      	ldr	r3, [r3, #0]
 800f6f0:	4a14      	ldr	r2, [pc, #80]	@ (800f744 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800f6f2:	4293      	cmp	r3, r2
 800f6f4:	d10c      	bne.n	800f710 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800f6f6:	68bb      	ldr	r3, [r7, #8]
 800f6f8:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800f6fc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800f6fe:	683b      	ldr	r3, [r7, #0]
 800f700:	689b      	ldr	r3, [r3, #8]
 800f702:	68ba      	ldr	r2, [r7, #8]
 800f704:	4313      	orrs	r3, r2
 800f706:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800f708:	687b      	ldr	r3, [r7, #4]
 800f70a:	681b      	ldr	r3, [r3, #0]
 800f70c:	68ba      	ldr	r2, [r7, #8]
 800f70e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800f710:	687b      	ldr	r3, [r7, #4]
 800f712:	2201      	movs	r2, #1
 800f714:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800f718:	687b      	ldr	r3, [r7, #4]
 800f71a:	2200      	movs	r2, #0
 800f71c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800f720:	2300      	movs	r3, #0
}
 800f722:	4618      	mov	r0, r3
 800f724:	3714      	adds	r7, #20
 800f726:	46bd      	mov	sp, r7
 800f728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f72c:	4770      	bx	lr
 800f72e:	bf00      	nop
 800f730:	40012c00 	.word	0x40012c00
 800f734:	40013400 	.word	0x40013400
 800f738:	40000400 	.word	0x40000400
 800f73c:	40000800 	.word	0x40000800
 800f740:	40000c00 	.word	0x40000c00
 800f744:	40014000 	.word	0x40014000

0800f748 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800f748:	b480      	push	{r7}
 800f74a:	b085      	sub	sp, #20
 800f74c:	af00      	add	r7, sp, #0
 800f74e:	6078      	str	r0, [r7, #4]
 800f750:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800f752:	2300      	movs	r3, #0
 800f754:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800f756:	687b      	ldr	r3, [r7, #4]
 800f758:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800f75c:	2b01      	cmp	r3, #1
 800f75e:	d101      	bne.n	800f764 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800f760:	2302      	movs	r3, #2
 800f762:	e065      	b.n	800f830 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 800f764:	687b      	ldr	r3, [r7, #4]
 800f766:	2201      	movs	r2, #1
 800f768:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800f76c:	68fb      	ldr	r3, [r7, #12]
 800f76e:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 800f772:	683b      	ldr	r3, [r7, #0]
 800f774:	68db      	ldr	r3, [r3, #12]
 800f776:	4313      	orrs	r3, r2
 800f778:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800f77a:	68fb      	ldr	r3, [r7, #12]
 800f77c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800f780:	683b      	ldr	r3, [r7, #0]
 800f782:	689b      	ldr	r3, [r3, #8]
 800f784:	4313      	orrs	r3, r2
 800f786:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800f788:	68fb      	ldr	r3, [r7, #12]
 800f78a:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 800f78e:	683b      	ldr	r3, [r7, #0]
 800f790:	685b      	ldr	r3, [r3, #4]
 800f792:	4313      	orrs	r3, r2
 800f794:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800f796:	68fb      	ldr	r3, [r7, #12]
 800f798:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 800f79c:	683b      	ldr	r3, [r7, #0]
 800f79e:	681b      	ldr	r3, [r3, #0]
 800f7a0:	4313      	orrs	r3, r2
 800f7a2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800f7a4:	68fb      	ldr	r3, [r7, #12]
 800f7a6:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800f7aa:	683b      	ldr	r3, [r7, #0]
 800f7ac:	691b      	ldr	r3, [r3, #16]
 800f7ae:	4313      	orrs	r3, r2
 800f7b0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800f7b2:	68fb      	ldr	r3, [r7, #12]
 800f7b4:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 800f7b8:	683b      	ldr	r3, [r7, #0]
 800f7ba:	695b      	ldr	r3, [r3, #20]
 800f7bc:	4313      	orrs	r3, r2
 800f7be:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800f7c0:	68fb      	ldr	r3, [r7, #12]
 800f7c2:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 800f7c6:	683b      	ldr	r3, [r7, #0]
 800f7c8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f7ca:	4313      	orrs	r3, r2
 800f7cc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800f7ce:	68fb      	ldr	r3, [r7, #12]
 800f7d0:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 800f7d4:	683b      	ldr	r3, [r7, #0]
 800f7d6:	699b      	ldr	r3, [r3, #24]
 800f7d8:	041b      	lsls	r3, r3, #16
 800f7da:	4313      	orrs	r3, r2
 800f7dc:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800f7de:	687b      	ldr	r3, [r7, #4]
 800f7e0:	681b      	ldr	r3, [r3, #0]
 800f7e2:	4a16      	ldr	r2, [pc, #88]	@ (800f83c <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 800f7e4:	4293      	cmp	r3, r2
 800f7e6:	d004      	beq.n	800f7f2 <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 800f7e8:	687b      	ldr	r3, [r7, #4]
 800f7ea:	681b      	ldr	r3, [r3, #0]
 800f7ec:	4a14      	ldr	r2, [pc, #80]	@ (800f840 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 800f7ee:	4293      	cmp	r3, r2
 800f7f0:	d115      	bne.n	800f81e <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800f7f2:	68fb      	ldr	r3, [r7, #12]
 800f7f4:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 800f7f8:	683b      	ldr	r3, [r7, #0]
 800f7fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f7fc:	051b      	lsls	r3, r3, #20
 800f7fe:	4313      	orrs	r3, r2
 800f800:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800f802:	68fb      	ldr	r3, [r7, #12]
 800f804:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 800f808:	683b      	ldr	r3, [r7, #0]
 800f80a:	69db      	ldr	r3, [r3, #28]
 800f80c:	4313      	orrs	r3, r2
 800f80e:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800f810:	68fb      	ldr	r3, [r7, #12]
 800f812:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 800f816:	683b      	ldr	r3, [r7, #0]
 800f818:	6a1b      	ldr	r3, [r3, #32]
 800f81a:	4313      	orrs	r3, r2
 800f81c:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800f81e:	687b      	ldr	r3, [r7, #4]
 800f820:	681b      	ldr	r3, [r3, #0]
 800f822:	68fa      	ldr	r2, [r7, #12]
 800f824:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 800f826:	687b      	ldr	r3, [r7, #4]
 800f828:	2200      	movs	r2, #0
 800f82a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800f82e:	2300      	movs	r3, #0
}
 800f830:	4618      	mov	r0, r3
 800f832:	3714      	adds	r7, #20
 800f834:	46bd      	mov	sp, r7
 800f836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f83a:	4770      	bx	lr
 800f83c:	40012c00 	.word	0x40012c00
 800f840:	40013400 	.word	0x40013400

0800f844 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800f844:	b580      	push	{r7, lr}
 800f846:	b082      	sub	sp, #8
 800f848:	af00      	add	r7, sp, #0
 800f84a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800f84c:	687b      	ldr	r3, [r7, #4]
 800f84e:	2b00      	cmp	r3, #0
 800f850:	d101      	bne.n	800f856 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800f852:	2301      	movs	r3, #1
 800f854:	e040      	b.n	800f8d8 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800f856:	687b      	ldr	r3, [r7, #4]
 800f858:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800f85a:	2b00      	cmp	r3, #0
 800f85c:	d106      	bne.n	800f86c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800f85e:	687b      	ldr	r3, [r7, #4]
 800f860:	2200      	movs	r2, #0
 800f862:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800f866:	6878      	ldr	r0, [r7, #4]
 800f868:	f7f4 fde0 	bl	800442c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800f86c:	687b      	ldr	r3, [r7, #4]
 800f86e:	2224      	movs	r2, #36	@ 0x24
 800f870:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 800f872:	687b      	ldr	r3, [r7, #4]
 800f874:	681b      	ldr	r3, [r3, #0]
 800f876:	681a      	ldr	r2, [r3, #0]
 800f878:	687b      	ldr	r3, [r7, #4]
 800f87a:	681b      	ldr	r3, [r3, #0]
 800f87c:	f022 0201 	bic.w	r2, r2, #1
 800f880:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800f882:	687b      	ldr	r3, [r7, #4]
 800f884:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f886:	2b00      	cmp	r3, #0
 800f888:	d002      	beq.n	800f890 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 800f88a:	6878      	ldr	r0, [r7, #4]
 800f88c:	f000 fc9c 	bl	80101c8 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800f890:	6878      	ldr	r0, [r7, #4]
 800f892:	f000 f9e1 	bl	800fc58 <UART_SetConfig>
 800f896:	4603      	mov	r3, r0
 800f898:	2b01      	cmp	r3, #1
 800f89a:	d101      	bne.n	800f8a0 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 800f89c:	2301      	movs	r3, #1
 800f89e:	e01b      	b.n	800f8d8 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800f8a0:	687b      	ldr	r3, [r7, #4]
 800f8a2:	681b      	ldr	r3, [r3, #0]
 800f8a4:	685a      	ldr	r2, [r3, #4]
 800f8a6:	687b      	ldr	r3, [r7, #4]
 800f8a8:	681b      	ldr	r3, [r3, #0]
 800f8aa:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800f8ae:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800f8b0:	687b      	ldr	r3, [r7, #4]
 800f8b2:	681b      	ldr	r3, [r3, #0]
 800f8b4:	689a      	ldr	r2, [r3, #8]
 800f8b6:	687b      	ldr	r3, [r7, #4]
 800f8b8:	681b      	ldr	r3, [r3, #0]
 800f8ba:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800f8be:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800f8c0:	687b      	ldr	r3, [r7, #4]
 800f8c2:	681b      	ldr	r3, [r3, #0]
 800f8c4:	681a      	ldr	r2, [r3, #0]
 800f8c6:	687b      	ldr	r3, [r7, #4]
 800f8c8:	681b      	ldr	r3, [r3, #0]
 800f8ca:	f042 0201 	orr.w	r2, r2, #1
 800f8ce:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800f8d0:	6878      	ldr	r0, [r7, #4]
 800f8d2:	f000 fd1b 	bl	801030c <UART_CheckIdleState>
 800f8d6:	4603      	mov	r3, r0
}
 800f8d8:	4618      	mov	r0, r3
 800f8da:	3708      	adds	r7, #8
 800f8dc:	46bd      	mov	sp, r7
 800f8de:	bd80      	pop	{r7, pc}

0800f8e0 <HAL_HalfDuplex_Init>:
  *        parameters in the UART_InitTypeDef and creates the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HalfDuplex_Init(UART_HandleTypeDef *huart)
{
 800f8e0:	b580      	push	{r7, lr}
 800f8e2:	b082      	sub	sp, #8
 800f8e4:	af00      	add	r7, sp, #0
 800f8e6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800f8e8:	687b      	ldr	r3, [r7, #4]
 800f8ea:	2b00      	cmp	r3, #0
 800f8ec:	d101      	bne.n	800f8f2 <HAL_HalfDuplex_Init+0x12>
  {
    return HAL_ERROR;
 800f8ee:	2301      	movs	r3, #1
 800f8f0:	e048      	b.n	800f984 <HAL_HalfDuplex_Init+0xa4>
  }

  /* Check UART instance */
  assert_param(IS_UART_HALFDUPLEX_INSTANCE(huart->Instance));

  if (huart->gState == HAL_UART_STATE_RESET)
 800f8f2:	687b      	ldr	r3, [r7, #4]
 800f8f4:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800f8f6:	2b00      	cmp	r3, #0
 800f8f8:	d106      	bne.n	800f908 <HAL_HalfDuplex_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800f8fa:	687b      	ldr	r3, [r7, #4]
 800f8fc:	2200      	movs	r2, #0
 800f8fe:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800f902:	6878      	ldr	r0, [r7, #4]
 800f904:	f7f4 fd92 	bl	800442c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800f908:	687b      	ldr	r3, [r7, #4]
 800f90a:	2224      	movs	r2, #36	@ 0x24
 800f90c:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 800f90e:	687b      	ldr	r3, [r7, #4]
 800f910:	681b      	ldr	r3, [r3, #0]
 800f912:	681a      	ldr	r2, [r3, #0]
 800f914:	687b      	ldr	r3, [r7, #4]
 800f916:	681b      	ldr	r3, [r3, #0]
 800f918:	f022 0201 	bic.w	r2, r2, #1
 800f91c:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800f91e:	687b      	ldr	r3, [r7, #4]
 800f920:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f922:	2b00      	cmp	r3, #0
 800f924:	d002      	beq.n	800f92c <HAL_HalfDuplex_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 800f926:	6878      	ldr	r0, [r7, #4]
 800f928:	f000 fc4e 	bl	80101c8 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800f92c:	6878      	ldr	r0, [r7, #4]
 800f92e:	f000 f993 	bl	800fc58 <UART_SetConfig>
 800f932:	4603      	mov	r3, r0
 800f934:	2b01      	cmp	r3, #1
 800f936:	d101      	bne.n	800f93c <HAL_HalfDuplex_Init+0x5c>
  {
    return HAL_ERROR;
 800f938:	2301      	movs	r3, #1
 800f93a:	e023      	b.n	800f984 <HAL_HalfDuplex_Init+0xa4>
  }

  /* In half-duplex mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN and IREN bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800f93c:	687b      	ldr	r3, [r7, #4]
 800f93e:	681b      	ldr	r3, [r3, #0]
 800f940:	685a      	ldr	r2, [r3, #4]
 800f942:	687b      	ldr	r3, [r7, #4]
 800f944:	681b      	ldr	r3, [r3, #0]
 800f946:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800f94a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_IREN | USART_CR3_SCEN));
 800f94c:	687b      	ldr	r3, [r7, #4]
 800f94e:	681b      	ldr	r3, [r3, #0]
 800f950:	689a      	ldr	r2, [r3, #8]
 800f952:	687b      	ldr	r3, [r7, #4]
 800f954:	681b      	ldr	r3, [r3, #0]
 800f956:	f022 0222 	bic.w	r2, r2, #34	@ 0x22
 800f95a:	609a      	str	r2, [r3, #8]

  /* Enable the Half-Duplex mode by setting the HDSEL bit in the CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
 800f95c:	687b      	ldr	r3, [r7, #4]
 800f95e:	681b      	ldr	r3, [r3, #0]
 800f960:	689a      	ldr	r2, [r3, #8]
 800f962:	687b      	ldr	r3, [r7, #4]
 800f964:	681b      	ldr	r3, [r3, #0]
 800f966:	f042 0208 	orr.w	r2, r2, #8
 800f96a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800f96c:	687b      	ldr	r3, [r7, #4]
 800f96e:	681b      	ldr	r3, [r3, #0]
 800f970:	681a      	ldr	r2, [r3, #0]
 800f972:	687b      	ldr	r3, [r7, #4]
 800f974:	681b      	ldr	r3, [r3, #0]
 800f976:	f042 0201 	orr.w	r2, r2, #1
 800f97a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800f97c:	6878      	ldr	r0, [r7, #4]
 800f97e:	f000 fcc5 	bl	801030c <UART_CheckIdleState>
 800f982:	4603      	mov	r3, r0
}
 800f984:	4618      	mov	r0, r3
 800f986:	3708      	adds	r7, #8
 800f988:	46bd      	mov	sp, r7
 800f98a:	bd80      	pop	{r7, pc}

0800f98c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800f98c:	b580      	push	{r7, lr}
 800f98e:	b08a      	sub	sp, #40	@ 0x28
 800f990:	af02      	add	r7, sp, #8
 800f992:	60f8      	str	r0, [r7, #12]
 800f994:	60b9      	str	r1, [r7, #8]
 800f996:	603b      	str	r3, [r7, #0]
 800f998:	4613      	mov	r3, r2
 800f99a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800f99c:	68fb      	ldr	r3, [r7, #12]
 800f99e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800f9a0:	2b20      	cmp	r3, #32
 800f9a2:	d177      	bne.n	800fa94 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 800f9a4:	68bb      	ldr	r3, [r7, #8]
 800f9a6:	2b00      	cmp	r3, #0
 800f9a8:	d002      	beq.n	800f9b0 <HAL_UART_Transmit+0x24>
 800f9aa:	88fb      	ldrh	r3, [r7, #6]
 800f9ac:	2b00      	cmp	r3, #0
 800f9ae:	d101      	bne.n	800f9b4 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 800f9b0:	2301      	movs	r3, #1
 800f9b2:	e070      	b.n	800fa96 <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800f9b4:	68fb      	ldr	r3, [r7, #12]
 800f9b6:	2200      	movs	r2, #0
 800f9b8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800f9bc:	68fb      	ldr	r3, [r7, #12]
 800f9be:	2221      	movs	r2, #33	@ 0x21
 800f9c0:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800f9c2:	f7f7 ff81 	bl	80078c8 <HAL_GetTick>
 800f9c6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800f9c8:	68fb      	ldr	r3, [r7, #12]
 800f9ca:	88fa      	ldrh	r2, [r7, #6]
 800f9cc:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 800f9d0:	68fb      	ldr	r3, [r7, #12]
 800f9d2:	88fa      	ldrh	r2, [r7, #6]
 800f9d4:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800f9d8:	68fb      	ldr	r3, [r7, #12]
 800f9da:	689b      	ldr	r3, [r3, #8]
 800f9dc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800f9e0:	d108      	bne.n	800f9f4 <HAL_UART_Transmit+0x68>
 800f9e2:	68fb      	ldr	r3, [r7, #12]
 800f9e4:	691b      	ldr	r3, [r3, #16]
 800f9e6:	2b00      	cmp	r3, #0
 800f9e8:	d104      	bne.n	800f9f4 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 800f9ea:	2300      	movs	r3, #0
 800f9ec:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800f9ee:	68bb      	ldr	r3, [r7, #8]
 800f9f0:	61bb      	str	r3, [r7, #24]
 800f9f2:	e003      	b.n	800f9fc <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 800f9f4:	68bb      	ldr	r3, [r7, #8]
 800f9f6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800f9f8:	2300      	movs	r3, #0
 800f9fa:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800f9fc:	e02f      	b.n	800fa5e <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800f9fe:	683b      	ldr	r3, [r7, #0]
 800fa00:	9300      	str	r3, [sp, #0]
 800fa02:	697b      	ldr	r3, [r7, #20]
 800fa04:	2200      	movs	r2, #0
 800fa06:	2180      	movs	r1, #128	@ 0x80
 800fa08:	68f8      	ldr	r0, [r7, #12]
 800fa0a:	f000 fd27 	bl	801045c <UART_WaitOnFlagUntilTimeout>
 800fa0e:	4603      	mov	r3, r0
 800fa10:	2b00      	cmp	r3, #0
 800fa12:	d004      	beq.n	800fa1e <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 800fa14:	68fb      	ldr	r3, [r7, #12]
 800fa16:	2220      	movs	r2, #32
 800fa18:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 800fa1a:	2303      	movs	r3, #3
 800fa1c:	e03b      	b.n	800fa96 <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 800fa1e:	69fb      	ldr	r3, [r7, #28]
 800fa20:	2b00      	cmp	r3, #0
 800fa22:	d10b      	bne.n	800fa3c <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800fa24:	69bb      	ldr	r3, [r7, #24]
 800fa26:	881a      	ldrh	r2, [r3, #0]
 800fa28:	68fb      	ldr	r3, [r7, #12]
 800fa2a:	681b      	ldr	r3, [r3, #0]
 800fa2c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800fa30:	b292      	uxth	r2, r2
 800fa32:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 800fa34:	69bb      	ldr	r3, [r7, #24]
 800fa36:	3302      	adds	r3, #2
 800fa38:	61bb      	str	r3, [r7, #24]
 800fa3a:	e007      	b.n	800fa4c <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800fa3c:	69fb      	ldr	r3, [r7, #28]
 800fa3e:	781a      	ldrb	r2, [r3, #0]
 800fa40:	68fb      	ldr	r3, [r7, #12]
 800fa42:	681b      	ldr	r3, [r3, #0]
 800fa44:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 800fa46:	69fb      	ldr	r3, [r7, #28]
 800fa48:	3301      	adds	r3, #1
 800fa4a:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800fa4c:	68fb      	ldr	r3, [r7, #12]
 800fa4e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 800fa52:	b29b      	uxth	r3, r3
 800fa54:	3b01      	subs	r3, #1
 800fa56:	b29a      	uxth	r2, r3
 800fa58:	68fb      	ldr	r3, [r7, #12]
 800fa5a:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 800fa5e:	68fb      	ldr	r3, [r7, #12]
 800fa60:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 800fa64:	b29b      	uxth	r3, r3
 800fa66:	2b00      	cmp	r3, #0
 800fa68:	d1c9      	bne.n	800f9fe <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800fa6a:	683b      	ldr	r3, [r7, #0]
 800fa6c:	9300      	str	r3, [sp, #0]
 800fa6e:	697b      	ldr	r3, [r7, #20]
 800fa70:	2200      	movs	r2, #0
 800fa72:	2140      	movs	r1, #64	@ 0x40
 800fa74:	68f8      	ldr	r0, [r7, #12]
 800fa76:	f000 fcf1 	bl	801045c <UART_WaitOnFlagUntilTimeout>
 800fa7a:	4603      	mov	r3, r0
 800fa7c:	2b00      	cmp	r3, #0
 800fa7e:	d004      	beq.n	800fa8a <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 800fa80:	68fb      	ldr	r3, [r7, #12]
 800fa82:	2220      	movs	r2, #32
 800fa84:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 800fa86:	2303      	movs	r3, #3
 800fa88:	e005      	b.n	800fa96 <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800fa8a:	68fb      	ldr	r3, [r7, #12]
 800fa8c:	2220      	movs	r2, #32
 800fa8e:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 800fa90:	2300      	movs	r3, #0
 800fa92:	e000      	b.n	800fa96 <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 800fa94:	2302      	movs	r3, #2
  }
}
 800fa96:	4618      	mov	r0, r3
 800fa98:	3720      	adds	r7, #32
 800fa9a:	46bd      	mov	sp, r7
 800fa9c:	bd80      	pop	{r7, pc}

0800fa9e <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800fa9e:	b580      	push	{r7, lr}
 800faa0:	b08a      	sub	sp, #40	@ 0x28
 800faa2:	af02      	add	r7, sp, #8
 800faa4:	60f8      	str	r0, [r7, #12]
 800faa6:	60b9      	str	r1, [r7, #8]
 800faa8:	603b      	str	r3, [r7, #0]
 800faaa:	4613      	mov	r3, r2
 800faac:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800faae:	68fb      	ldr	r3, [r7, #12]
 800fab0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800fab4:	2b20      	cmp	r3, #32
 800fab6:	f040 80b6 	bne.w	800fc26 <HAL_UART_Receive+0x188>
  {
    if ((pData == NULL) || (Size == 0U))
 800faba:	68bb      	ldr	r3, [r7, #8]
 800fabc:	2b00      	cmp	r3, #0
 800fabe:	d002      	beq.n	800fac6 <HAL_UART_Receive+0x28>
 800fac0:	88fb      	ldrh	r3, [r7, #6]
 800fac2:	2b00      	cmp	r3, #0
 800fac4:	d101      	bne.n	800faca <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 800fac6:	2301      	movs	r3, #1
 800fac8:	e0ae      	b.n	800fc28 <HAL_UART_Receive+0x18a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800faca:	68fb      	ldr	r3, [r7, #12]
 800facc:	2200      	movs	r2, #0
 800face:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800fad2:	68fb      	ldr	r3, [r7, #12]
 800fad4:	2222      	movs	r2, #34	@ 0x22
 800fad6:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800fada:	68fb      	ldr	r3, [r7, #12]
 800fadc:	2200      	movs	r2, #0
 800fade:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800fae0:	f7f7 fef2 	bl	80078c8 <HAL_GetTick>
 800fae4:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 800fae6:	68fb      	ldr	r3, [r7, #12]
 800fae8:	88fa      	ldrh	r2, [r7, #6]
 800faea:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58
    huart->RxXferCount = Size;
 800faee:	68fb      	ldr	r3, [r7, #12]
 800faf0:	88fa      	ldrh	r2, [r7, #6]
 800faf2:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 800faf6:	68fb      	ldr	r3, [r7, #12]
 800faf8:	689b      	ldr	r3, [r3, #8]
 800fafa:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800fafe:	d10e      	bne.n	800fb1e <HAL_UART_Receive+0x80>
 800fb00:	68fb      	ldr	r3, [r7, #12]
 800fb02:	691b      	ldr	r3, [r3, #16]
 800fb04:	2b00      	cmp	r3, #0
 800fb06:	d105      	bne.n	800fb14 <HAL_UART_Receive+0x76>
 800fb08:	68fb      	ldr	r3, [r7, #12]
 800fb0a:	f240 12ff 	movw	r2, #511	@ 0x1ff
 800fb0e:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 800fb12:	e02d      	b.n	800fb70 <HAL_UART_Receive+0xd2>
 800fb14:	68fb      	ldr	r3, [r7, #12]
 800fb16:	22ff      	movs	r2, #255	@ 0xff
 800fb18:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 800fb1c:	e028      	b.n	800fb70 <HAL_UART_Receive+0xd2>
 800fb1e:	68fb      	ldr	r3, [r7, #12]
 800fb20:	689b      	ldr	r3, [r3, #8]
 800fb22:	2b00      	cmp	r3, #0
 800fb24:	d10d      	bne.n	800fb42 <HAL_UART_Receive+0xa4>
 800fb26:	68fb      	ldr	r3, [r7, #12]
 800fb28:	691b      	ldr	r3, [r3, #16]
 800fb2a:	2b00      	cmp	r3, #0
 800fb2c:	d104      	bne.n	800fb38 <HAL_UART_Receive+0x9a>
 800fb2e:	68fb      	ldr	r3, [r7, #12]
 800fb30:	22ff      	movs	r2, #255	@ 0xff
 800fb32:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 800fb36:	e01b      	b.n	800fb70 <HAL_UART_Receive+0xd2>
 800fb38:	68fb      	ldr	r3, [r7, #12]
 800fb3a:	227f      	movs	r2, #127	@ 0x7f
 800fb3c:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 800fb40:	e016      	b.n	800fb70 <HAL_UART_Receive+0xd2>
 800fb42:	68fb      	ldr	r3, [r7, #12]
 800fb44:	689b      	ldr	r3, [r3, #8]
 800fb46:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800fb4a:	d10d      	bne.n	800fb68 <HAL_UART_Receive+0xca>
 800fb4c:	68fb      	ldr	r3, [r7, #12]
 800fb4e:	691b      	ldr	r3, [r3, #16]
 800fb50:	2b00      	cmp	r3, #0
 800fb52:	d104      	bne.n	800fb5e <HAL_UART_Receive+0xc0>
 800fb54:	68fb      	ldr	r3, [r7, #12]
 800fb56:	227f      	movs	r2, #127	@ 0x7f
 800fb58:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 800fb5c:	e008      	b.n	800fb70 <HAL_UART_Receive+0xd2>
 800fb5e:	68fb      	ldr	r3, [r7, #12]
 800fb60:	223f      	movs	r2, #63	@ 0x3f
 800fb62:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 800fb66:	e003      	b.n	800fb70 <HAL_UART_Receive+0xd2>
 800fb68:	68fb      	ldr	r3, [r7, #12]
 800fb6a:	2200      	movs	r2, #0
 800fb6c:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
    uhMask = huart->Mask;
 800fb70:	68fb      	ldr	r3, [r7, #12]
 800fb72:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800fb76:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800fb78:	68fb      	ldr	r3, [r7, #12]
 800fb7a:	689b      	ldr	r3, [r3, #8]
 800fb7c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800fb80:	d108      	bne.n	800fb94 <HAL_UART_Receive+0xf6>
 800fb82:	68fb      	ldr	r3, [r7, #12]
 800fb84:	691b      	ldr	r3, [r3, #16]
 800fb86:	2b00      	cmp	r3, #0
 800fb88:	d104      	bne.n	800fb94 <HAL_UART_Receive+0xf6>
    {
      pdata8bits  = NULL;
 800fb8a:	2300      	movs	r3, #0
 800fb8c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800fb8e:	68bb      	ldr	r3, [r7, #8]
 800fb90:	61bb      	str	r3, [r7, #24]
 800fb92:	e003      	b.n	800fb9c <HAL_UART_Receive+0xfe>
    }
    else
    {
      pdata8bits  = pData;
 800fb94:	68bb      	ldr	r3, [r7, #8]
 800fb96:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800fb98:	2300      	movs	r3, #0
 800fb9a:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 800fb9c:	e037      	b.n	800fc0e <HAL_UART_Receive+0x170>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800fb9e:	683b      	ldr	r3, [r7, #0]
 800fba0:	9300      	str	r3, [sp, #0]
 800fba2:	697b      	ldr	r3, [r7, #20]
 800fba4:	2200      	movs	r2, #0
 800fba6:	2120      	movs	r1, #32
 800fba8:	68f8      	ldr	r0, [r7, #12]
 800fbaa:	f000 fc57 	bl	801045c <UART_WaitOnFlagUntilTimeout>
 800fbae:	4603      	mov	r3, r0
 800fbb0:	2b00      	cmp	r3, #0
 800fbb2:	d005      	beq.n	800fbc0 <HAL_UART_Receive+0x122>
      {
        huart->RxState = HAL_UART_STATE_READY;
 800fbb4:	68fb      	ldr	r3, [r7, #12]
 800fbb6:	2220      	movs	r2, #32
 800fbb8:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

        return HAL_TIMEOUT;
 800fbbc:	2303      	movs	r3, #3
 800fbbe:	e033      	b.n	800fc28 <HAL_UART_Receive+0x18a>
      }
      if (pdata8bits == NULL)
 800fbc0:	69fb      	ldr	r3, [r7, #28]
 800fbc2:	2b00      	cmp	r3, #0
 800fbc4:	d10c      	bne.n	800fbe0 <HAL_UART_Receive+0x142>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 800fbc6:	68fb      	ldr	r3, [r7, #12]
 800fbc8:	681b      	ldr	r3, [r3, #0]
 800fbca:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 800fbcc:	b29a      	uxth	r2, r3
 800fbce:	8a7b      	ldrh	r3, [r7, #18]
 800fbd0:	4013      	ands	r3, r2
 800fbd2:	b29a      	uxth	r2, r3
 800fbd4:	69bb      	ldr	r3, [r7, #24]
 800fbd6:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 800fbd8:	69bb      	ldr	r3, [r7, #24]
 800fbda:	3302      	adds	r3, #2
 800fbdc:	61bb      	str	r3, [r7, #24]
 800fbde:	e00d      	b.n	800fbfc <HAL_UART_Receive+0x15e>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 800fbe0:	68fb      	ldr	r3, [r7, #12]
 800fbe2:	681b      	ldr	r3, [r3, #0]
 800fbe4:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 800fbe6:	b29b      	uxth	r3, r3
 800fbe8:	b2da      	uxtb	r2, r3
 800fbea:	8a7b      	ldrh	r3, [r7, #18]
 800fbec:	b2db      	uxtb	r3, r3
 800fbee:	4013      	ands	r3, r2
 800fbf0:	b2da      	uxtb	r2, r3
 800fbf2:	69fb      	ldr	r3, [r7, #28]
 800fbf4:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 800fbf6:	69fb      	ldr	r3, [r7, #28]
 800fbf8:	3301      	adds	r3, #1
 800fbfa:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 800fbfc:	68fb      	ldr	r3, [r7, #12]
 800fbfe:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800fc02:	b29b      	uxth	r3, r3
 800fc04:	3b01      	subs	r3, #1
 800fc06:	b29a      	uxth	r2, r3
 800fc08:	68fb      	ldr	r3, [r7, #12]
 800fc0a:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
    while (huart->RxXferCount > 0U)
 800fc0e:	68fb      	ldr	r3, [r7, #12]
 800fc10:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800fc14:	b29b      	uxth	r3, r3
 800fc16:	2b00      	cmp	r3, #0
 800fc18:	d1c1      	bne.n	800fb9e <HAL_UART_Receive+0x100>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800fc1a:	68fb      	ldr	r3, [r7, #12]
 800fc1c:	2220      	movs	r2, #32
 800fc1e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

    return HAL_OK;
 800fc22:	2300      	movs	r3, #0
 800fc24:	e000      	b.n	800fc28 <HAL_UART_Receive+0x18a>
  }
  else
  {
    return HAL_BUSY;
 800fc26:	2302      	movs	r3, #2
  }
}
 800fc28:	4618      	mov	r0, r3
 800fc2a:	3720      	adds	r7, #32
 800fc2c:	46bd      	mov	sp, r7
 800fc2e:	bd80      	pop	{r7, pc}

0800fc30 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800fc30:	b480      	push	{r7}
 800fc32:	b083      	sub	sp, #12
 800fc34:	af00      	add	r7, sp, #0
 800fc36:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 800fc38:	bf00      	nop
 800fc3a:	370c      	adds	r7, #12
 800fc3c:	46bd      	mov	sp, r7
 800fc3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc42:	4770      	bx	lr

0800fc44 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800fc44:	b480      	push	{r7}
 800fc46:	b083      	sub	sp, #12
 800fc48:	af00      	add	r7, sp, #0
 800fc4a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800fc4c:	bf00      	nop
 800fc4e:	370c      	adds	r7, #12
 800fc50:	46bd      	mov	sp, r7
 800fc52:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc56:	4770      	bx	lr

0800fc58 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800fc58:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800fc5c:	b08a      	sub	sp, #40	@ 0x28
 800fc5e:	af00      	add	r7, sp, #0
 800fc60:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800fc62:	2300      	movs	r3, #0
 800fc64:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800fc68:	68fb      	ldr	r3, [r7, #12]
 800fc6a:	689a      	ldr	r2, [r3, #8]
 800fc6c:	68fb      	ldr	r3, [r7, #12]
 800fc6e:	691b      	ldr	r3, [r3, #16]
 800fc70:	431a      	orrs	r2, r3
 800fc72:	68fb      	ldr	r3, [r7, #12]
 800fc74:	695b      	ldr	r3, [r3, #20]
 800fc76:	431a      	orrs	r2, r3
 800fc78:	68fb      	ldr	r3, [r7, #12]
 800fc7a:	69db      	ldr	r3, [r3, #28]
 800fc7c:	4313      	orrs	r3, r2
 800fc7e:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800fc80:	68fb      	ldr	r3, [r7, #12]
 800fc82:	681b      	ldr	r3, [r3, #0]
 800fc84:	681a      	ldr	r2, [r3, #0]
 800fc86:	4ba4      	ldr	r3, [pc, #656]	@ (800ff18 <UART_SetConfig+0x2c0>)
 800fc88:	4013      	ands	r3, r2
 800fc8a:	68fa      	ldr	r2, [r7, #12]
 800fc8c:	6812      	ldr	r2, [r2, #0]
 800fc8e:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800fc90:	430b      	orrs	r3, r1
 800fc92:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800fc94:	68fb      	ldr	r3, [r7, #12]
 800fc96:	681b      	ldr	r3, [r3, #0]
 800fc98:	685b      	ldr	r3, [r3, #4]
 800fc9a:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800fc9e:	68fb      	ldr	r3, [r7, #12]
 800fca0:	68da      	ldr	r2, [r3, #12]
 800fca2:	68fb      	ldr	r3, [r7, #12]
 800fca4:	681b      	ldr	r3, [r3, #0]
 800fca6:	430a      	orrs	r2, r1
 800fca8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800fcaa:	68fb      	ldr	r3, [r7, #12]
 800fcac:	699b      	ldr	r3, [r3, #24]
 800fcae:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800fcb0:	68fb      	ldr	r3, [r7, #12]
 800fcb2:	681b      	ldr	r3, [r3, #0]
 800fcb4:	4a99      	ldr	r2, [pc, #612]	@ (800ff1c <UART_SetConfig+0x2c4>)
 800fcb6:	4293      	cmp	r3, r2
 800fcb8:	d004      	beq.n	800fcc4 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800fcba:	68fb      	ldr	r3, [r7, #12]
 800fcbc:	6a1b      	ldr	r3, [r3, #32]
 800fcbe:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800fcc0:	4313      	orrs	r3, r2
 800fcc2:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800fcc4:	68fb      	ldr	r3, [r7, #12]
 800fcc6:	681b      	ldr	r3, [r3, #0]
 800fcc8:	689b      	ldr	r3, [r3, #8]
 800fcca:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 800fcce:	68fb      	ldr	r3, [r7, #12]
 800fcd0:	681b      	ldr	r3, [r3, #0]
 800fcd2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800fcd4:	430a      	orrs	r2, r1
 800fcd6:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800fcd8:	68fb      	ldr	r3, [r7, #12]
 800fcda:	681b      	ldr	r3, [r3, #0]
 800fcdc:	4a90      	ldr	r2, [pc, #576]	@ (800ff20 <UART_SetConfig+0x2c8>)
 800fcde:	4293      	cmp	r3, r2
 800fce0:	d126      	bne.n	800fd30 <UART_SetConfig+0xd8>
 800fce2:	4b90      	ldr	r3, [pc, #576]	@ (800ff24 <UART_SetConfig+0x2cc>)
 800fce4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800fce8:	f003 0303 	and.w	r3, r3, #3
 800fcec:	2b03      	cmp	r3, #3
 800fcee:	d81b      	bhi.n	800fd28 <UART_SetConfig+0xd0>
 800fcf0:	a201      	add	r2, pc, #4	@ (adr r2, 800fcf8 <UART_SetConfig+0xa0>)
 800fcf2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fcf6:	bf00      	nop
 800fcf8:	0800fd09 	.word	0x0800fd09
 800fcfc:	0800fd19 	.word	0x0800fd19
 800fd00:	0800fd11 	.word	0x0800fd11
 800fd04:	0800fd21 	.word	0x0800fd21
 800fd08:	2301      	movs	r3, #1
 800fd0a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800fd0e:	e116      	b.n	800ff3e <UART_SetConfig+0x2e6>
 800fd10:	2302      	movs	r3, #2
 800fd12:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800fd16:	e112      	b.n	800ff3e <UART_SetConfig+0x2e6>
 800fd18:	2304      	movs	r3, #4
 800fd1a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800fd1e:	e10e      	b.n	800ff3e <UART_SetConfig+0x2e6>
 800fd20:	2308      	movs	r3, #8
 800fd22:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800fd26:	e10a      	b.n	800ff3e <UART_SetConfig+0x2e6>
 800fd28:	2310      	movs	r3, #16
 800fd2a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800fd2e:	e106      	b.n	800ff3e <UART_SetConfig+0x2e6>
 800fd30:	68fb      	ldr	r3, [r7, #12]
 800fd32:	681b      	ldr	r3, [r3, #0]
 800fd34:	4a7c      	ldr	r2, [pc, #496]	@ (800ff28 <UART_SetConfig+0x2d0>)
 800fd36:	4293      	cmp	r3, r2
 800fd38:	d138      	bne.n	800fdac <UART_SetConfig+0x154>
 800fd3a:	4b7a      	ldr	r3, [pc, #488]	@ (800ff24 <UART_SetConfig+0x2cc>)
 800fd3c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800fd40:	f003 030c 	and.w	r3, r3, #12
 800fd44:	2b0c      	cmp	r3, #12
 800fd46:	d82d      	bhi.n	800fda4 <UART_SetConfig+0x14c>
 800fd48:	a201      	add	r2, pc, #4	@ (adr r2, 800fd50 <UART_SetConfig+0xf8>)
 800fd4a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fd4e:	bf00      	nop
 800fd50:	0800fd85 	.word	0x0800fd85
 800fd54:	0800fda5 	.word	0x0800fda5
 800fd58:	0800fda5 	.word	0x0800fda5
 800fd5c:	0800fda5 	.word	0x0800fda5
 800fd60:	0800fd95 	.word	0x0800fd95
 800fd64:	0800fda5 	.word	0x0800fda5
 800fd68:	0800fda5 	.word	0x0800fda5
 800fd6c:	0800fda5 	.word	0x0800fda5
 800fd70:	0800fd8d 	.word	0x0800fd8d
 800fd74:	0800fda5 	.word	0x0800fda5
 800fd78:	0800fda5 	.word	0x0800fda5
 800fd7c:	0800fda5 	.word	0x0800fda5
 800fd80:	0800fd9d 	.word	0x0800fd9d
 800fd84:	2300      	movs	r3, #0
 800fd86:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800fd8a:	e0d8      	b.n	800ff3e <UART_SetConfig+0x2e6>
 800fd8c:	2302      	movs	r3, #2
 800fd8e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800fd92:	e0d4      	b.n	800ff3e <UART_SetConfig+0x2e6>
 800fd94:	2304      	movs	r3, #4
 800fd96:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800fd9a:	e0d0      	b.n	800ff3e <UART_SetConfig+0x2e6>
 800fd9c:	2308      	movs	r3, #8
 800fd9e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800fda2:	e0cc      	b.n	800ff3e <UART_SetConfig+0x2e6>
 800fda4:	2310      	movs	r3, #16
 800fda6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800fdaa:	e0c8      	b.n	800ff3e <UART_SetConfig+0x2e6>
 800fdac:	68fb      	ldr	r3, [r7, #12]
 800fdae:	681b      	ldr	r3, [r3, #0]
 800fdb0:	4a5e      	ldr	r2, [pc, #376]	@ (800ff2c <UART_SetConfig+0x2d4>)
 800fdb2:	4293      	cmp	r3, r2
 800fdb4:	d125      	bne.n	800fe02 <UART_SetConfig+0x1aa>
 800fdb6:	4b5b      	ldr	r3, [pc, #364]	@ (800ff24 <UART_SetConfig+0x2cc>)
 800fdb8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800fdbc:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 800fdc0:	2b30      	cmp	r3, #48	@ 0x30
 800fdc2:	d016      	beq.n	800fdf2 <UART_SetConfig+0x19a>
 800fdc4:	2b30      	cmp	r3, #48	@ 0x30
 800fdc6:	d818      	bhi.n	800fdfa <UART_SetConfig+0x1a2>
 800fdc8:	2b20      	cmp	r3, #32
 800fdca:	d00a      	beq.n	800fde2 <UART_SetConfig+0x18a>
 800fdcc:	2b20      	cmp	r3, #32
 800fdce:	d814      	bhi.n	800fdfa <UART_SetConfig+0x1a2>
 800fdd0:	2b00      	cmp	r3, #0
 800fdd2:	d002      	beq.n	800fdda <UART_SetConfig+0x182>
 800fdd4:	2b10      	cmp	r3, #16
 800fdd6:	d008      	beq.n	800fdea <UART_SetConfig+0x192>
 800fdd8:	e00f      	b.n	800fdfa <UART_SetConfig+0x1a2>
 800fdda:	2300      	movs	r3, #0
 800fddc:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800fde0:	e0ad      	b.n	800ff3e <UART_SetConfig+0x2e6>
 800fde2:	2302      	movs	r3, #2
 800fde4:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800fde8:	e0a9      	b.n	800ff3e <UART_SetConfig+0x2e6>
 800fdea:	2304      	movs	r3, #4
 800fdec:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800fdf0:	e0a5      	b.n	800ff3e <UART_SetConfig+0x2e6>
 800fdf2:	2308      	movs	r3, #8
 800fdf4:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800fdf8:	e0a1      	b.n	800ff3e <UART_SetConfig+0x2e6>
 800fdfa:	2310      	movs	r3, #16
 800fdfc:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800fe00:	e09d      	b.n	800ff3e <UART_SetConfig+0x2e6>
 800fe02:	68fb      	ldr	r3, [r7, #12]
 800fe04:	681b      	ldr	r3, [r3, #0]
 800fe06:	4a4a      	ldr	r2, [pc, #296]	@ (800ff30 <UART_SetConfig+0x2d8>)
 800fe08:	4293      	cmp	r3, r2
 800fe0a:	d125      	bne.n	800fe58 <UART_SetConfig+0x200>
 800fe0c:	4b45      	ldr	r3, [pc, #276]	@ (800ff24 <UART_SetConfig+0x2cc>)
 800fe0e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800fe12:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800fe16:	2bc0      	cmp	r3, #192	@ 0xc0
 800fe18:	d016      	beq.n	800fe48 <UART_SetConfig+0x1f0>
 800fe1a:	2bc0      	cmp	r3, #192	@ 0xc0
 800fe1c:	d818      	bhi.n	800fe50 <UART_SetConfig+0x1f8>
 800fe1e:	2b80      	cmp	r3, #128	@ 0x80
 800fe20:	d00a      	beq.n	800fe38 <UART_SetConfig+0x1e0>
 800fe22:	2b80      	cmp	r3, #128	@ 0x80
 800fe24:	d814      	bhi.n	800fe50 <UART_SetConfig+0x1f8>
 800fe26:	2b00      	cmp	r3, #0
 800fe28:	d002      	beq.n	800fe30 <UART_SetConfig+0x1d8>
 800fe2a:	2b40      	cmp	r3, #64	@ 0x40
 800fe2c:	d008      	beq.n	800fe40 <UART_SetConfig+0x1e8>
 800fe2e:	e00f      	b.n	800fe50 <UART_SetConfig+0x1f8>
 800fe30:	2300      	movs	r3, #0
 800fe32:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800fe36:	e082      	b.n	800ff3e <UART_SetConfig+0x2e6>
 800fe38:	2302      	movs	r3, #2
 800fe3a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800fe3e:	e07e      	b.n	800ff3e <UART_SetConfig+0x2e6>
 800fe40:	2304      	movs	r3, #4
 800fe42:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800fe46:	e07a      	b.n	800ff3e <UART_SetConfig+0x2e6>
 800fe48:	2308      	movs	r3, #8
 800fe4a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800fe4e:	e076      	b.n	800ff3e <UART_SetConfig+0x2e6>
 800fe50:	2310      	movs	r3, #16
 800fe52:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800fe56:	e072      	b.n	800ff3e <UART_SetConfig+0x2e6>
 800fe58:	68fb      	ldr	r3, [r7, #12]
 800fe5a:	681b      	ldr	r3, [r3, #0]
 800fe5c:	4a35      	ldr	r2, [pc, #212]	@ (800ff34 <UART_SetConfig+0x2dc>)
 800fe5e:	4293      	cmp	r3, r2
 800fe60:	d12a      	bne.n	800feb8 <UART_SetConfig+0x260>
 800fe62:	4b30      	ldr	r3, [pc, #192]	@ (800ff24 <UART_SetConfig+0x2cc>)
 800fe64:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800fe68:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800fe6c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800fe70:	d01a      	beq.n	800fea8 <UART_SetConfig+0x250>
 800fe72:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800fe76:	d81b      	bhi.n	800feb0 <UART_SetConfig+0x258>
 800fe78:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800fe7c:	d00c      	beq.n	800fe98 <UART_SetConfig+0x240>
 800fe7e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800fe82:	d815      	bhi.n	800feb0 <UART_SetConfig+0x258>
 800fe84:	2b00      	cmp	r3, #0
 800fe86:	d003      	beq.n	800fe90 <UART_SetConfig+0x238>
 800fe88:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800fe8c:	d008      	beq.n	800fea0 <UART_SetConfig+0x248>
 800fe8e:	e00f      	b.n	800feb0 <UART_SetConfig+0x258>
 800fe90:	2300      	movs	r3, #0
 800fe92:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800fe96:	e052      	b.n	800ff3e <UART_SetConfig+0x2e6>
 800fe98:	2302      	movs	r3, #2
 800fe9a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800fe9e:	e04e      	b.n	800ff3e <UART_SetConfig+0x2e6>
 800fea0:	2304      	movs	r3, #4
 800fea2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800fea6:	e04a      	b.n	800ff3e <UART_SetConfig+0x2e6>
 800fea8:	2308      	movs	r3, #8
 800feaa:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800feae:	e046      	b.n	800ff3e <UART_SetConfig+0x2e6>
 800feb0:	2310      	movs	r3, #16
 800feb2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800feb6:	e042      	b.n	800ff3e <UART_SetConfig+0x2e6>
 800feb8:	68fb      	ldr	r3, [r7, #12]
 800feba:	681b      	ldr	r3, [r3, #0]
 800febc:	4a17      	ldr	r2, [pc, #92]	@ (800ff1c <UART_SetConfig+0x2c4>)
 800febe:	4293      	cmp	r3, r2
 800fec0:	d13a      	bne.n	800ff38 <UART_SetConfig+0x2e0>
 800fec2:	4b18      	ldr	r3, [pc, #96]	@ (800ff24 <UART_SetConfig+0x2cc>)
 800fec4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800fec8:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800fecc:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800fed0:	d01a      	beq.n	800ff08 <UART_SetConfig+0x2b0>
 800fed2:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800fed6:	d81b      	bhi.n	800ff10 <UART_SetConfig+0x2b8>
 800fed8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800fedc:	d00c      	beq.n	800fef8 <UART_SetConfig+0x2a0>
 800fede:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800fee2:	d815      	bhi.n	800ff10 <UART_SetConfig+0x2b8>
 800fee4:	2b00      	cmp	r3, #0
 800fee6:	d003      	beq.n	800fef0 <UART_SetConfig+0x298>
 800fee8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800feec:	d008      	beq.n	800ff00 <UART_SetConfig+0x2a8>
 800feee:	e00f      	b.n	800ff10 <UART_SetConfig+0x2b8>
 800fef0:	2300      	movs	r3, #0
 800fef2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800fef6:	e022      	b.n	800ff3e <UART_SetConfig+0x2e6>
 800fef8:	2302      	movs	r3, #2
 800fefa:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800fefe:	e01e      	b.n	800ff3e <UART_SetConfig+0x2e6>
 800ff00:	2304      	movs	r3, #4
 800ff02:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800ff06:	e01a      	b.n	800ff3e <UART_SetConfig+0x2e6>
 800ff08:	2308      	movs	r3, #8
 800ff0a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800ff0e:	e016      	b.n	800ff3e <UART_SetConfig+0x2e6>
 800ff10:	2310      	movs	r3, #16
 800ff12:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800ff16:	e012      	b.n	800ff3e <UART_SetConfig+0x2e6>
 800ff18:	efff69f3 	.word	0xefff69f3
 800ff1c:	40008000 	.word	0x40008000
 800ff20:	40013800 	.word	0x40013800
 800ff24:	40021000 	.word	0x40021000
 800ff28:	40004400 	.word	0x40004400
 800ff2c:	40004800 	.word	0x40004800
 800ff30:	40004c00 	.word	0x40004c00
 800ff34:	40005000 	.word	0x40005000
 800ff38:	2310      	movs	r3, #16
 800ff3a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800ff3e:	68fb      	ldr	r3, [r7, #12]
 800ff40:	681b      	ldr	r3, [r3, #0]
 800ff42:	4a9f      	ldr	r2, [pc, #636]	@ (80101c0 <UART_SetConfig+0x568>)
 800ff44:	4293      	cmp	r3, r2
 800ff46:	d17a      	bne.n	801003e <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800ff48:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800ff4c:	2b08      	cmp	r3, #8
 800ff4e:	d824      	bhi.n	800ff9a <UART_SetConfig+0x342>
 800ff50:	a201      	add	r2, pc, #4	@ (adr r2, 800ff58 <UART_SetConfig+0x300>)
 800ff52:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ff56:	bf00      	nop
 800ff58:	0800ff7d 	.word	0x0800ff7d
 800ff5c:	0800ff9b 	.word	0x0800ff9b
 800ff60:	0800ff85 	.word	0x0800ff85
 800ff64:	0800ff9b 	.word	0x0800ff9b
 800ff68:	0800ff8b 	.word	0x0800ff8b
 800ff6c:	0800ff9b 	.word	0x0800ff9b
 800ff70:	0800ff9b 	.word	0x0800ff9b
 800ff74:	0800ff9b 	.word	0x0800ff9b
 800ff78:	0800ff93 	.word	0x0800ff93
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800ff7c:	f7fb fe8c 	bl	800bc98 <HAL_RCC_GetPCLK1Freq>
 800ff80:	61f8      	str	r0, [r7, #28]
        break;
 800ff82:	e010      	b.n	800ffa6 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800ff84:	4b8f      	ldr	r3, [pc, #572]	@ (80101c4 <UART_SetConfig+0x56c>)
 800ff86:	61fb      	str	r3, [r7, #28]
        break;
 800ff88:	e00d      	b.n	800ffa6 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800ff8a:	f7fb fded 	bl	800bb68 <HAL_RCC_GetSysClockFreq>
 800ff8e:	61f8      	str	r0, [r7, #28]
        break;
 800ff90:	e009      	b.n	800ffa6 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800ff92:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800ff96:	61fb      	str	r3, [r7, #28]
        break;
 800ff98:	e005      	b.n	800ffa6 <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 800ff9a:	2300      	movs	r3, #0
 800ff9c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800ff9e:	2301      	movs	r3, #1
 800ffa0:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 800ffa4:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800ffa6:	69fb      	ldr	r3, [r7, #28]
 800ffa8:	2b00      	cmp	r3, #0
 800ffaa:	f000 80fb 	beq.w	80101a4 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800ffae:	68fb      	ldr	r3, [r7, #12]
 800ffb0:	685a      	ldr	r2, [r3, #4]
 800ffb2:	4613      	mov	r3, r2
 800ffb4:	005b      	lsls	r3, r3, #1
 800ffb6:	4413      	add	r3, r2
 800ffb8:	69fa      	ldr	r2, [r7, #28]
 800ffba:	429a      	cmp	r2, r3
 800ffbc:	d305      	bcc.n	800ffca <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 800ffbe:	68fb      	ldr	r3, [r7, #12]
 800ffc0:	685b      	ldr	r3, [r3, #4]
 800ffc2:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800ffc4:	69fa      	ldr	r2, [r7, #28]
 800ffc6:	429a      	cmp	r2, r3
 800ffc8:	d903      	bls.n	800ffd2 <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 800ffca:	2301      	movs	r3, #1
 800ffcc:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 800ffd0:	e0e8      	b.n	80101a4 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 800ffd2:	69fb      	ldr	r3, [r7, #28]
 800ffd4:	2200      	movs	r2, #0
 800ffd6:	461c      	mov	r4, r3
 800ffd8:	4615      	mov	r5, r2
 800ffda:	f04f 0200 	mov.w	r2, #0
 800ffde:	f04f 0300 	mov.w	r3, #0
 800ffe2:	022b      	lsls	r3, r5, #8
 800ffe4:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 800ffe8:	0222      	lsls	r2, r4, #8
 800ffea:	68f9      	ldr	r1, [r7, #12]
 800ffec:	6849      	ldr	r1, [r1, #4]
 800ffee:	0849      	lsrs	r1, r1, #1
 800fff0:	2000      	movs	r0, #0
 800fff2:	4688      	mov	r8, r1
 800fff4:	4681      	mov	r9, r0
 800fff6:	eb12 0a08 	adds.w	sl, r2, r8
 800fffa:	eb43 0b09 	adc.w	fp, r3, r9
 800fffe:	68fb      	ldr	r3, [r7, #12]
 8010000:	685b      	ldr	r3, [r3, #4]
 8010002:	2200      	movs	r2, #0
 8010004:	603b      	str	r3, [r7, #0]
 8010006:	607a      	str	r2, [r7, #4]
 8010008:	e9d7 2300 	ldrd	r2, r3, [r7]
 801000c:	4650      	mov	r0, sl
 801000e:	4659      	mov	r1, fp
 8010010:	f7f0 f936 	bl	8000280 <__aeabi_uldivmod>
 8010014:	4602      	mov	r2, r0
 8010016:	460b      	mov	r3, r1
 8010018:	4613      	mov	r3, r2
 801001a:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 801001c:	69bb      	ldr	r3, [r7, #24]
 801001e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8010022:	d308      	bcc.n	8010036 <UART_SetConfig+0x3de>
 8010024:	69bb      	ldr	r3, [r7, #24]
 8010026:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 801002a:	d204      	bcs.n	8010036 <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 801002c:	68fb      	ldr	r3, [r7, #12]
 801002e:	681b      	ldr	r3, [r3, #0]
 8010030:	69ba      	ldr	r2, [r7, #24]
 8010032:	60da      	str	r2, [r3, #12]
 8010034:	e0b6      	b.n	80101a4 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 8010036:	2301      	movs	r3, #1
 8010038:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 801003c:	e0b2      	b.n	80101a4 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 801003e:	68fb      	ldr	r3, [r7, #12]
 8010040:	69db      	ldr	r3, [r3, #28]
 8010042:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8010046:	d15e      	bne.n	8010106 <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8010048:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 801004c:	2b08      	cmp	r3, #8
 801004e:	d828      	bhi.n	80100a2 <UART_SetConfig+0x44a>
 8010050:	a201      	add	r2, pc, #4	@ (adr r2, 8010058 <UART_SetConfig+0x400>)
 8010052:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010056:	bf00      	nop
 8010058:	0801007d 	.word	0x0801007d
 801005c:	08010085 	.word	0x08010085
 8010060:	0801008d 	.word	0x0801008d
 8010064:	080100a3 	.word	0x080100a3
 8010068:	08010093 	.word	0x08010093
 801006c:	080100a3 	.word	0x080100a3
 8010070:	080100a3 	.word	0x080100a3
 8010074:	080100a3 	.word	0x080100a3
 8010078:	0801009b 	.word	0x0801009b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 801007c:	f7fb fe0c 	bl	800bc98 <HAL_RCC_GetPCLK1Freq>
 8010080:	61f8      	str	r0, [r7, #28]
        break;
 8010082:	e014      	b.n	80100ae <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8010084:	f7fb fe1e 	bl	800bcc4 <HAL_RCC_GetPCLK2Freq>
 8010088:	61f8      	str	r0, [r7, #28]
        break;
 801008a:	e010      	b.n	80100ae <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 801008c:	4b4d      	ldr	r3, [pc, #308]	@ (80101c4 <UART_SetConfig+0x56c>)
 801008e:	61fb      	str	r3, [r7, #28]
        break;
 8010090:	e00d      	b.n	80100ae <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8010092:	f7fb fd69 	bl	800bb68 <HAL_RCC_GetSysClockFreq>
 8010096:	61f8      	str	r0, [r7, #28]
        break;
 8010098:	e009      	b.n	80100ae <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 801009a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 801009e:	61fb      	str	r3, [r7, #28]
        break;
 80100a0:	e005      	b.n	80100ae <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 80100a2:	2300      	movs	r3, #0
 80100a4:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80100a6:	2301      	movs	r3, #1
 80100a8:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 80100ac:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80100ae:	69fb      	ldr	r3, [r7, #28]
 80100b0:	2b00      	cmp	r3, #0
 80100b2:	d077      	beq.n	80101a4 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80100b4:	69fb      	ldr	r3, [r7, #28]
 80100b6:	005a      	lsls	r2, r3, #1
 80100b8:	68fb      	ldr	r3, [r7, #12]
 80100ba:	685b      	ldr	r3, [r3, #4]
 80100bc:	085b      	lsrs	r3, r3, #1
 80100be:	441a      	add	r2, r3
 80100c0:	68fb      	ldr	r3, [r7, #12]
 80100c2:	685b      	ldr	r3, [r3, #4]
 80100c4:	fbb2 f3f3 	udiv	r3, r2, r3
 80100c8:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80100ca:	69bb      	ldr	r3, [r7, #24]
 80100cc:	2b0f      	cmp	r3, #15
 80100ce:	d916      	bls.n	80100fe <UART_SetConfig+0x4a6>
 80100d0:	69bb      	ldr	r3, [r7, #24]
 80100d2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80100d6:	d212      	bcs.n	80100fe <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80100d8:	69bb      	ldr	r3, [r7, #24]
 80100da:	b29b      	uxth	r3, r3
 80100dc:	f023 030f 	bic.w	r3, r3, #15
 80100e0:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80100e2:	69bb      	ldr	r3, [r7, #24]
 80100e4:	085b      	lsrs	r3, r3, #1
 80100e6:	b29b      	uxth	r3, r3
 80100e8:	f003 0307 	and.w	r3, r3, #7
 80100ec:	b29a      	uxth	r2, r3
 80100ee:	8afb      	ldrh	r3, [r7, #22]
 80100f0:	4313      	orrs	r3, r2
 80100f2:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 80100f4:	68fb      	ldr	r3, [r7, #12]
 80100f6:	681b      	ldr	r3, [r3, #0]
 80100f8:	8afa      	ldrh	r2, [r7, #22]
 80100fa:	60da      	str	r2, [r3, #12]
 80100fc:	e052      	b.n	80101a4 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 80100fe:	2301      	movs	r3, #1
 8010100:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8010104:	e04e      	b.n	80101a4 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8010106:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 801010a:	2b08      	cmp	r3, #8
 801010c:	d827      	bhi.n	801015e <UART_SetConfig+0x506>
 801010e:	a201      	add	r2, pc, #4	@ (adr r2, 8010114 <UART_SetConfig+0x4bc>)
 8010110:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010114:	08010139 	.word	0x08010139
 8010118:	08010141 	.word	0x08010141
 801011c:	08010149 	.word	0x08010149
 8010120:	0801015f 	.word	0x0801015f
 8010124:	0801014f 	.word	0x0801014f
 8010128:	0801015f 	.word	0x0801015f
 801012c:	0801015f 	.word	0x0801015f
 8010130:	0801015f 	.word	0x0801015f
 8010134:	08010157 	.word	0x08010157
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8010138:	f7fb fdae 	bl	800bc98 <HAL_RCC_GetPCLK1Freq>
 801013c:	61f8      	str	r0, [r7, #28]
        break;
 801013e:	e014      	b.n	801016a <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8010140:	f7fb fdc0 	bl	800bcc4 <HAL_RCC_GetPCLK2Freq>
 8010144:	61f8      	str	r0, [r7, #28]
        break;
 8010146:	e010      	b.n	801016a <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8010148:	4b1e      	ldr	r3, [pc, #120]	@ (80101c4 <UART_SetConfig+0x56c>)
 801014a:	61fb      	str	r3, [r7, #28]
        break;
 801014c:	e00d      	b.n	801016a <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 801014e:	f7fb fd0b 	bl	800bb68 <HAL_RCC_GetSysClockFreq>
 8010152:	61f8      	str	r0, [r7, #28]
        break;
 8010154:	e009      	b.n	801016a <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8010156:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 801015a:	61fb      	str	r3, [r7, #28]
        break;
 801015c:	e005      	b.n	801016a <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 801015e:	2300      	movs	r3, #0
 8010160:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8010162:	2301      	movs	r3, #1
 8010164:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8010168:	bf00      	nop
    }

    if (pclk != 0U)
 801016a:	69fb      	ldr	r3, [r7, #28]
 801016c:	2b00      	cmp	r3, #0
 801016e:	d019      	beq.n	80101a4 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8010170:	68fb      	ldr	r3, [r7, #12]
 8010172:	685b      	ldr	r3, [r3, #4]
 8010174:	085a      	lsrs	r2, r3, #1
 8010176:	69fb      	ldr	r3, [r7, #28]
 8010178:	441a      	add	r2, r3
 801017a:	68fb      	ldr	r3, [r7, #12]
 801017c:	685b      	ldr	r3, [r3, #4]
 801017e:	fbb2 f3f3 	udiv	r3, r2, r3
 8010182:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8010184:	69bb      	ldr	r3, [r7, #24]
 8010186:	2b0f      	cmp	r3, #15
 8010188:	d909      	bls.n	801019e <UART_SetConfig+0x546>
 801018a:	69bb      	ldr	r3, [r7, #24]
 801018c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8010190:	d205      	bcs.n	801019e <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8010192:	69bb      	ldr	r3, [r7, #24]
 8010194:	b29a      	uxth	r2, r3
 8010196:	68fb      	ldr	r3, [r7, #12]
 8010198:	681b      	ldr	r3, [r3, #0]
 801019a:	60da      	str	r2, [r3, #12]
 801019c:	e002      	b.n	80101a4 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 801019e:	2301      	movs	r3, #1
 80101a0:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80101a4:	68fb      	ldr	r3, [r7, #12]
 80101a6:	2200      	movs	r2, #0
 80101a8:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 80101aa:	68fb      	ldr	r3, [r7, #12]
 80101ac:	2200      	movs	r2, #0
 80101ae:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 80101b0:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 80101b4:	4618      	mov	r0, r3
 80101b6:	3728      	adds	r7, #40	@ 0x28
 80101b8:	46bd      	mov	sp, r7
 80101ba:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80101be:	bf00      	nop
 80101c0:	40008000 	.word	0x40008000
 80101c4:	00f42400 	.word	0x00f42400

080101c8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80101c8:	b480      	push	{r7}
 80101ca:	b083      	sub	sp, #12
 80101cc:	af00      	add	r7, sp, #0
 80101ce:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80101d0:	687b      	ldr	r3, [r7, #4]
 80101d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80101d4:	f003 0308 	and.w	r3, r3, #8
 80101d8:	2b00      	cmp	r3, #0
 80101da:	d00a      	beq.n	80101f2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80101dc:	687b      	ldr	r3, [r7, #4]
 80101de:	681b      	ldr	r3, [r3, #0]
 80101e0:	685b      	ldr	r3, [r3, #4]
 80101e2:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 80101e6:	687b      	ldr	r3, [r7, #4]
 80101e8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80101ea:	687b      	ldr	r3, [r7, #4]
 80101ec:	681b      	ldr	r3, [r3, #0]
 80101ee:	430a      	orrs	r2, r1
 80101f0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80101f2:	687b      	ldr	r3, [r7, #4]
 80101f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80101f6:	f003 0301 	and.w	r3, r3, #1
 80101fa:	2b00      	cmp	r3, #0
 80101fc:	d00a      	beq.n	8010214 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80101fe:	687b      	ldr	r3, [r7, #4]
 8010200:	681b      	ldr	r3, [r3, #0]
 8010202:	685b      	ldr	r3, [r3, #4]
 8010204:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8010208:	687b      	ldr	r3, [r7, #4]
 801020a:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 801020c:	687b      	ldr	r3, [r7, #4]
 801020e:	681b      	ldr	r3, [r3, #0]
 8010210:	430a      	orrs	r2, r1
 8010212:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8010214:	687b      	ldr	r3, [r7, #4]
 8010216:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010218:	f003 0302 	and.w	r3, r3, #2
 801021c:	2b00      	cmp	r3, #0
 801021e:	d00a      	beq.n	8010236 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8010220:	687b      	ldr	r3, [r7, #4]
 8010222:	681b      	ldr	r3, [r3, #0]
 8010224:	685b      	ldr	r3, [r3, #4]
 8010226:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 801022a:	687b      	ldr	r3, [r7, #4]
 801022c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801022e:	687b      	ldr	r3, [r7, #4]
 8010230:	681b      	ldr	r3, [r3, #0]
 8010232:	430a      	orrs	r2, r1
 8010234:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8010236:	687b      	ldr	r3, [r7, #4]
 8010238:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801023a:	f003 0304 	and.w	r3, r3, #4
 801023e:	2b00      	cmp	r3, #0
 8010240:	d00a      	beq.n	8010258 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8010242:	687b      	ldr	r3, [r7, #4]
 8010244:	681b      	ldr	r3, [r3, #0]
 8010246:	685b      	ldr	r3, [r3, #4]
 8010248:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 801024c:	687b      	ldr	r3, [r7, #4]
 801024e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8010250:	687b      	ldr	r3, [r7, #4]
 8010252:	681b      	ldr	r3, [r3, #0]
 8010254:	430a      	orrs	r2, r1
 8010256:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8010258:	687b      	ldr	r3, [r7, #4]
 801025a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801025c:	f003 0310 	and.w	r3, r3, #16
 8010260:	2b00      	cmp	r3, #0
 8010262:	d00a      	beq.n	801027a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8010264:	687b      	ldr	r3, [r7, #4]
 8010266:	681b      	ldr	r3, [r3, #0]
 8010268:	689b      	ldr	r3, [r3, #8]
 801026a:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 801026e:	687b      	ldr	r3, [r7, #4]
 8010270:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8010272:	687b      	ldr	r3, [r7, #4]
 8010274:	681b      	ldr	r3, [r3, #0]
 8010276:	430a      	orrs	r2, r1
 8010278:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 801027a:	687b      	ldr	r3, [r7, #4]
 801027c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801027e:	f003 0320 	and.w	r3, r3, #32
 8010282:	2b00      	cmp	r3, #0
 8010284:	d00a      	beq.n	801029c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8010286:	687b      	ldr	r3, [r7, #4]
 8010288:	681b      	ldr	r3, [r3, #0]
 801028a:	689b      	ldr	r3, [r3, #8]
 801028c:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8010290:	687b      	ldr	r3, [r7, #4]
 8010292:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8010294:	687b      	ldr	r3, [r7, #4]
 8010296:	681b      	ldr	r3, [r3, #0]
 8010298:	430a      	orrs	r2, r1
 801029a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 801029c:	687b      	ldr	r3, [r7, #4]
 801029e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80102a0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80102a4:	2b00      	cmp	r3, #0
 80102a6:	d01a      	beq.n	80102de <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80102a8:	687b      	ldr	r3, [r7, #4]
 80102aa:	681b      	ldr	r3, [r3, #0]
 80102ac:	685b      	ldr	r3, [r3, #4]
 80102ae:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 80102b2:	687b      	ldr	r3, [r7, #4]
 80102b4:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80102b6:	687b      	ldr	r3, [r7, #4]
 80102b8:	681b      	ldr	r3, [r3, #0]
 80102ba:	430a      	orrs	r2, r1
 80102bc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80102be:	687b      	ldr	r3, [r7, #4]
 80102c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80102c2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80102c6:	d10a      	bne.n	80102de <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80102c8:	687b      	ldr	r3, [r7, #4]
 80102ca:	681b      	ldr	r3, [r3, #0]
 80102cc:	685b      	ldr	r3, [r3, #4]
 80102ce:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 80102d2:	687b      	ldr	r3, [r7, #4]
 80102d4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80102d6:	687b      	ldr	r3, [r7, #4]
 80102d8:	681b      	ldr	r3, [r3, #0]
 80102da:	430a      	orrs	r2, r1
 80102dc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80102de:	687b      	ldr	r3, [r7, #4]
 80102e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80102e2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80102e6:	2b00      	cmp	r3, #0
 80102e8:	d00a      	beq.n	8010300 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80102ea:	687b      	ldr	r3, [r7, #4]
 80102ec:	681b      	ldr	r3, [r3, #0]
 80102ee:	685b      	ldr	r3, [r3, #4]
 80102f0:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 80102f4:	687b      	ldr	r3, [r7, #4]
 80102f6:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80102f8:	687b      	ldr	r3, [r7, #4]
 80102fa:	681b      	ldr	r3, [r3, #0]
 80102fc:	430a      	orrs	r2, r1
 80102fe:	605a      	str	r2, [r3, #4]
  }
}
 8010300:	bf00      	nop
 8010302:	370c      	adds	r7, #12
 8010304:	46bd      	mov	sp, r7
 8010306:	f85d 7b04 	ldr.w	r7, [sp], #4
 801030a:	4770      	bx	lr

0801030c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 801030c:	b580      	push	{r7, lr}
 801030e:	b098      	sub	sp, #96	@ 0x60
 8010310:	af02      	add	r7, sp, #8
 8010312:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8010314:	687b      	ldr	r3, [r7, #4]
 8010316:	2200      	movs	r2, #0
 8010318:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 801031c:	f7f7 fad4 	bl	80078c8 <HAL_GetTick>
 8010320:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8010322:	687b      	ldr	r3, [r7, #4]
 8010324:	681b      	ldr	r3, [r3, #0]
 8010326:	681b      	ldr	r3, [r3, #0]
 8010328:	f003 0308 	and.w	r3, r3, #8
 801032c:	2b08      	cmp	r3, #8
 801032e:	d12e      	bne.n	801038e <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8010330:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8010334:	9300      	str	r3, [sp, #0]
 8010336:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8010338:	2200      	movs	r2, #0
 801033a:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 801033e:	6878      	ldr	r0, [r7, #4]
 8010340:	f000 f88c 	bl	801045c <UART_WaitOnFlagUntilTimeout>
 8010344:	4603      	mov	r3, r0
 8010346:	2b00      	cmp	r3, #0
 8010348:	d021      	beq.n	801038e <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 801034a:	687b      	ldr	r3, [r7, #4]
 801034c:	681b      	ldr	r3, [r3, #0]
 801034e:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010350:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010352:	e853 3f00 	ldrex	r3, [r3]
 8010356:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8010358:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801035a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 801035e:	653b      	str	r3, [r7, #80]	@ 0x50
 8010360:	687b      	ldr	r3, [r7, #4]
 8010362:	681b      	ldr	r3, [r3, #0]
 8010364:	461a      	mov	r2, r3
 8010366:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8010368:	647b      	str	r3, [r7, #68]	@ 0x44
 801036a:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801036c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 801036e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8010370:	e841 2300 	strex	r3, r2, [r1]
 8010374:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8010376:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8010378:	2b00      	cmp	r3, #0
 801037a:	d1e6      	bne.n	801034a <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 801037c:	687b      	ldr	r3, [r7, #4]
 801037e:	2220      	movs	r2, #32
 8010380:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8010382:	687b      	ldr	r3, [r7, #4]
 8010384:	2200      	movs	r2, #0
 8010386:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 801038a:	2303      	movs	r3, #3
 801038c:	e062      	b.n	8010454 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 801038e:	687b      	ldr	r3, [r7, #4]
 8010390:	681b      	ldr	r3, [r3, #0]
 8010392:	681b      	ldr	r3, [r3, #0]
 8010394:	f003 0304 	and.w	r3, r3, #4
 8010398:	2b04      	cmp	r3, #4
 801039a:	d149      	bne.n	8010430 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 801039c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80103a0:	9300      	str	r3, [sp, #0]
 80103a2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80103a4:	2200      	movs	r2, #0
 80103a6:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 80103aa:	6878      	ldr	r0, [r7, #4]
 80103ac:	f000 f856 	bl	801045c <UART_WaitOnFlagUntilTimeout>
 80103b0:	4603      	mov	r3, r0
 80103b2:	2b00      	cmp	r3, #0
 80103b4:	d03c      	beq.n	8010430 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80103b6:	687b      	ldr	r3, [r7, #4]
 80103b8:	681b      	ldr	r3, [r3, #0]
 80103ba:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80103bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80103be:	e853 3f00 	ldrex	r3, [r3]
 80103c2:	623b      	str	r3, [r7, #32]
   return(result);
 80103c4:	6a3b      	ldr	r3, [r7, #32]
 80103c6:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80103ca:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80103cc:	687b      	ldr	r3, [r7, #4]
 80103ce:	681b      	ldr	r3, [r3, #0]
 80103d0:	461a      	mov	r2, r3
 80103d2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80103d4:	633b      	str	r3, [r7, #48]	@ 0x30
 80103d6:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80103d8:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80103da:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80103dc:	e841 2300 	strex	r3, r2, [r1]
 80103e0:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80103e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80103e4:	2b00      	cmp	r3, #0
 80103e6:	d1e6      	bne.n	80103b6 <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80103e8:	687b      	ldr	r3, [r7, #4]
 80103ea:	681b      	ldr	r3, [r3, #0]
 80103ec:	3308      	adds	r3, #8
 80103ee:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80103f0:	693b      	ldr	r3, [r7, #16]
 80103f2:	e853 3f00 	ldrex	r3, [r3]
 80103f6:	60fb      	str	r3, [r7, #12]
   return(result);
 80103f8:	68fb      	ldr	r3, [r7, #12]
 80103fa:	f023 0301 	bic.w	r3, r3, #1
 80103fe:	64bb      	str	r3, [r7, #72]	@ 0x48
 8010400:	687b      	ldr	r3, [r7, #4]
 8010402:	681b      	ldr	r3, [r3, #0]
 8010404:	3308      	adds	r3, #8
 8010406:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8010408:	61fa      	str	r2, [r7, #28]
 801040a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801040c:	69b9      	ldr	r1, [r7, #24]
 801040e:	69fa      	ldr	r2, [r7, #28]
 8010410:	e841 2300 	strex	r3, r2, [r1]
 8010414:	617b      	str	r3, [r7, #20]
   return(result);
 8010416:	697b      	ldr	r3, [r7, #20]
 8010418:	2b00      	cmp	r3, #0
 801041a:	d1e5      	bne.n	80103e8 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 801041c:	687b      	ldr	r3, [r7, #4]
 801041e:	2220      	movs	r2, #32
 8010420:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8010424:	687b      	ldr	r3, [r7, #4]
 8010426:	2200      	movs	r2, #0
 8010428:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 801042c:	2303      	movs	r3, #3
 801042e:	e011      	b.n	8010454 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8010430:	687b      	ldr	r3, [r7, #4]
 8010432:	2220      	movs	r2, #32
 8010434:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8010436:	687b      	ldr	r3, [r7, #4]
 8010438:	2220      	movs	r2, #32
 801043a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801043e:	687b      	ldr	r3, [r7, #4]
 8010440:	2200      	movs	r2, #0
 8010442:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8010444:	687b      	ldr	r3, [r7, #4]
 8010446:	2200      	movs	r2, #0
 8010448:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 801044a:	687b      	ldr	r3, [r7, #4]
 801044c:	2200      	movs	r2, #0
 801044e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8010452:	2300      	movs	r3, #0
}
 8010454:	4618      	mov	r0, r3
 8010456:	3758      	adds	r7, #88	@ 0x58
 8010458:	46bd      	mov	sp, r7
 801045a:	bd80      	pop	{r7, pc}

0801045c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 801045c:	b580      	push	{r7, lr}
 801045e:	b084      	sub	sp, #16
 8010460:	af00      	add	r7, sp, #0
 8010462:	60f8      	str	r0, [r7, #12]
 8010464:	60b9      	str	r1, [r7, #8]
 8010466:	603b      	str	r3, [r7, #0]
 8010468:	4613      	mov	r3, r2
 801046a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 801046c:	e04f      	b.n	801050e <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 801046e:	69bb      	ldr	r3, [r7, #24]
 8010470:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010474:	d04b      	beq.n	801050e <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8010476:	f7f7 fa27 	bl	80078c8 <HAL_GetTick>
 801047a:	4602      	mov	r2, r0
 801047c:	683b      	ldr	r3, [r7, #0]
 801047e:	1ad3      	subs	r3, r2, r3
 8010480:	69ba      	ldr	r2, [r7, #24]
 8010482:	429a      	cmp	r2, r3
 8010484:	d302      	bcc.n	801048c <UART_WaitOnFlagUntilTimeout+0x30>
 8010486:	69bb      	ldr	r3, [r7, #24]
 8010488:	2b00      	cmp	r3, #0
 801048a:	d101      	bne.n	8010490 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 801048c:	2303      	movs	r3, #3
 801048e:	e04e      	b.n	801052e <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8010490:	68fb      	ldr	r3, [r7, #12]
 8010492:	681b      	ldr	r3, [r3, #0]
 8010494:	681b      	ldr	r3, [r3, #0]
 8010496:	f003 0304 	and.w	r3, r3, #4
 801049a:	2b00      	cmp	r3, #0
 801049c:	d037      	beq.n	801050e <UART_WaitOnFlagUntilTimeout+0xb2>
 801049e:	68bb      	ldr	r3, [r7, #8]
 80104a0:	2b80      	cmp	r3, #128	@ 0x80
 80104a2:	d034      	beq.n	801050e <UART_WaitOnFlagUntilTimeout+0xb2>
 80104a4:	68bb      	ldr	r3, [r7, #8]
 80104a6:	2b40      	cmp	r3, #64	@ 0x40
 80104a8:	d031      	beq.n	801050e <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80104aa:	68fb      	ldr	r3, [r7, #12]
 80104ac:	681b      	ldr	r3, [r3, #0]
 80104ae:	69db      	ldr	r3, [r3, #28]
 80104b0:	f003 0308 	and.w	r3, r3, #8
 80104b4:	2b08      	cmp	r3, #8
 80104b6:	d110      	bne.n	80104da <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80104b8:	68fb      	ldr	r3, [r7, #12]
 80104ba:	681b      	ldr	r3, [r3, #0]
 80104bc:	2208      	movs	r2, #8
 80104be:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80104c0:	68f8      	ldr	r0, [r7, #12]
 80104c2:	f000 f8ff 	bl	80106c4 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80104c6:	68fb      	ldr	r3, [r7, #12]
 80104c8:	2208      	movs	r2, #8
 80104ca:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80104ce:	68fb      	ldr	r3, [r7, #12]
 80104d0:	2200      	movs	r2, #0
 80104d2:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 80104d6:	2301      	movs	r3, #1
 80104d8:	e029      	b.n	801052e <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80104da:	68fb      	ldr	r3, [r7, #12]
 80104dc:	681b      	ldr	r3, [r3, #0]
 80104de:	69db      	ldr	r3, [r3, #28]
 80104e0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80104e4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80104e8:	d111      	bne.n	801050e <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80104ea:	68fb      	ldr	r3, [r7, #12]
 80104ec:	681b      	ldr	r3, [r3, #0]
 80104ee:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80104f2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80104f4:	68f8      	ldr	r0, [r7, #12]
 80104f6:	f000 f8e5 	bl	80106c4 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80104fa:	68fb      	ldr	r3, [r7, #12]
 80104fc:	2220      	movs	r2, #32
 80104fe:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8010502:	68fb      	ldr	r3, [r7, #12]
 8010504:	2200      	movs	r2, #0
 8010506:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 801050a:	2303      	movs	r3, #3
 801050c:	e00f      	b.n	801052e <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 801050e:	68fb      	ldr	r3, [r7, #12]
 8010510:	681b      	ldr	r3, [r3, #0]
 8010512:	69da      	ldr	r2, [r3, #28]
 8010514:	68bb      	ldr	r3, [r7, #8]
 8010516:	4013      	ands	r3, r2
 8010518:	68ba      	ldr	r2, [r7, #8]
 801051a:	429a      	cmp	r2, r3
 801051c:	bf0c      	ite	eq
 801051e:	2301      	moveq	r3, #1
 8010520:	2300      	movne	r3, #0
 8010522:	b2db      	uxtb	r3, r3
 8010524:	461a      	mov	r2, r3
 8010526:	79fb      	ldrb	r3, [r7, #7]
 8010528:	429a      	cmp	r2, r3
 801052a:	d0a0      	beq.n	801046e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 801052c:	2300      	movs	r3, #0
}
 801052e:	4618      	mov	r0, r3
 8010530:	3710      	adds	r7, #16
 8010532:	46bd      	mov	sp, r7
 8010534:	bd80      	pop	{r7, pc}
	...

08010538 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8010538:	b580      	push	{r7, lr}
 801053a:	b096      	sub	sp, #88	@ 0x58
 801053c:	af00      	add	r7, sp, #0
 801053e:	60f8      	str	r0, [r7, #12]
 8010540:	60b9      	str	r1, [r7, #8]
 8010542:	4613      	mov	r3, r2
 8010544:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8010546:	68fb      	ldr	r3, [r7, #12]
 8010548:	68ba      	ldr	r2, [r7, #8]
 801054a:	655a      	str	r2, [r3, #84]	@ 0x54
  huart->RxXferSize = Size;
 801054c:	68fb      	ldr	r3, [r7, #12]
 801054e:	88fa      	ldrh	r2, [r7, #6]
 8010550:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8010554:	68fb      	ldr	r3, [r7, #12]
 8010556:	2200      	movs	r2, #0
 8010558:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 801055c:	68fb      	ldr	r3, [r7, #12]
 801055e:	2222      	movs	r2, #34	@ 0x22
 8010560:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  if (huart->hdmarx != NULL)
 8010564:	68fb      	ldr	r3, [r7, #12]
 8010566:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8010568:	2b00      	cmp	r3, #0
 801056a:	d028      	beq.n	80105be <UART_Start_Receive_DMA+0x86>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 801056c:	68fb      	ldr	r3, [r7, #12]
 801056e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8010570:	4a3e      	ldr	r2, [pc, #248]	@ (801066c <UART_Start_Receive_DMA+0x134>)
 8010572:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8010574:	68fb      	ldr	r3, [r7, #12]
 8010576:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8010578:	4a3d      	ldr	r2, [pc, #244]	@ (8010670 <UART_Start_Receive_DMA+0x138>)
 801057a:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 801057c:	68fb      	ldr	r3, [r7, #12]
 801057e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8010580:	4a3c      	ldr	r2, [pc, #240]	@ (8010674 <UART_Start_Receive_DMA+0x13c>)
 8010582:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 8010584:	68fb      	ldr	r3, [r7, #12]
 8010586:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8010588:	2200      	movs	r2, #0
 801058a:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 801058c:	68fb      	ldr	r3, [r7, #12]
 801058e:	6f58      	ldr	r0, [r3, #116]	@ 0x74
 8010590:	68fb      	ldr	r3, [r7, #12]
 8010592:	681b      	ldr	r3, [r3, #0]
 8010594:	3324      	adds	r3, #36	@ 0x24
 8010596:	4619      	mov	r1, r3
 8010598:	68fb      	ldr	r3, [r7, #12]
 801059a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801059c:	461a      	mov	r2, r3
 801059e:	88fb      	ldrh	r3, [r7, #6]
 80105a0:	f7f9 f818 	bl	80095d4 <HAL_DMA_Start_IT>
 80105a4:	4603      	mov	r3, r0
 80105a6:	2b00      	cmp	r3, #0
 80105a8:	d009      	beq.n	80105be <UART_Start_Receive_DMA+0x86>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 80105aa:	68fb      	ldr	r3, [r7, #12]
 80105ac:	2210      	movs	r2, #16
 80105ae:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 80105b2:	68fb      	ldr	r3, [r7, #12]
 80105b4:	2220      	movs	r2, #32
 80105b6:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      return HAL_ERROR;
 80105ba:	2301      	movs	r3, #1
 80105bc:	e051      	b.n	8010662 <UART_Start_Receive_DMA+0x12a>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 80105be:	68fb      	ldr	r3, [r7, #12]
 80105c0:	691b      	ldr	r3, [r3, #16]
 80105c2:	2b00      	cmp	r3, #0
 80105c4:	d018      	beq.n	80105f8 <UART_Start_Receive_DMA+0xc0>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80105c6:	68fb      	ldr	r3, [r7, #12]
 80105c8:	681b      	ldr	r3, [r3, #0]
 80105ca:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80105cc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80105ce:	e853 3f00 	ldrex	r3, [r3]
 80105d2:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80105d4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80105d6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80105da:	657b      	str	r3, [r7, #84]	@ 0x54
 80105dc:	68fb      	ldr	r3, [r7, #12]
 80105de:	681b      	ldr	r3, [r3, #0]
 80105e0:	461a      	mov	r2, r3
 80105e2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80105e4:	64bb      	str	r3, [r7, #72]	@ 0x48
 80105e6:	647a      	str	r2, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80105e8:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 80105ea:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80105ec:	e841 2300 	strex	r3, r2, [r1]
 80105f0:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 80105f2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80105f4:	2b00      	cmp	r3, #0
 80105f6:	d1e6      	bne.n	80105c6 <UART_Start_Receive_DMA+0x8e>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80105f8:	68fb      	ldr	r3, [r7, #12]
 80105fa:	681b      	ldr	r3, [r3, #0]
 80105fc:	3308      	adds	r3, #8
 80105fe:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010600:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010602:	e853 3f00 	ldrex	r3, [r3]
 8010606:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8010608:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801060a:	f043 0301 	orr.w	r3, r3, #1
 801060e:	653b      	str	r3, [r7, #80]	@ 0x50
 8010610:	68fb      	ldr	r3, [r7, #12]
 8010612:	681b      	ldr	r3, [r3, #0]
 8010614:	3308      	adds	r3, #8
 8010616:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8010618:	637a      	str	r2, [r7, #52]	@ 0x34
 801061a:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801061c:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 801061e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8010620:	e841 2300 	strex	r3, r2, [r1]
 8010624:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8010626:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010628:	2b00      	cmp	r3, #0
 801062a:	d1e5      	bne.n	80105f8 <UART_Start_Receive_DMA+0xc0>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 801062c:	68fb      	ldr	r3, [r7, #12]
 801062e:	681b      	ldr	r3, [r3, #0]
 8010630:	3308      	adds	r3, #8
 8010632:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010634:	697b      	ldr	r3, [r7, #20]
 8010636:	e853 3f00 	ldrex	r3, [r3]
 801063a:	613b      	str	r3, [r7, #16]
   return(result);
 801063c:	693b      	ldr	r3, [r7, #16]
 801063e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8010642:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8010644:	68fb      	ldr	r3, [r7, #12]
 8010646:	681b      	ldr	r3, [r3, #0]
 8010648:	3308      	adds	r3, #8
 801064a:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 801064c:	623a      	str	r2, [r7, #32]
 801064e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010650:	69f9      	ldr	r1, [r7, #28]
 8010652:	6a3a      	ldr	r2, [r7, #32]
 8010654:	e841 2300 	strex	r3, r2, [r1]
 8010658:	61bb      	str	r3, [r7, #24]
   return(result);
 801065a:	69bb      	ldr	r3, [r7, #24]
 801065c:	2b00      	cmp	r3, #0
 801065e:	d1e5      	bne.n	801062c <UART_Start_Receive_DMA+0xf4>

  return HAL_OK;
 8010660:	2300      	movs	r3, #0
}
 8010662:	4618      	mov	r0, r3
 8010664:	3758      	adds	r7, #88	@ 0x58
 8010666:	46bd      	mov	sp, r7
 8010668:	bd80      	pop	{r7, pc}
 801066a:	bf00      	nop
 801066c:	0801078d 	.word	0x0801078d
 8010670:	080108b9 	.word	0x080108b9
 8010674:	080108f7 	.word	0x080108f7

08010678 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8010678:	b480      	push	{r7}
 801067a:	b089      	sub	sp, #36	@ 0x24
 801067c:	af00      	add	r7, sp, #0
 801067e:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
#else
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8010680:	687b      	ldr	r3, [r7, #4]
 8010682:	681b      	ldr	r3, [r3, #0]
 8010684:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010686:	68fb      	ldr	r3, [r7, #12]
 8010688:	e853 3f00 	ldrex	r3, [r3]
 801068c:	60bb      	str	r3, [r7, #8]
   return(result);
 801068e:	68bb      	ldr	r3, [r7, #8]
 8010690:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8010694:	61fb      	str	r3, [r7, #28]
 8010696:	687b      	ldr	r3, [r7, #4]
 8010698:	681b      	ldr	r3, [r3, #0]
 801069a:	461a      	mov	r2, r3
 801069c:	69fb      	ldr	r3, [r7, #28]
 801069e:	61bb      	str	r3, [r7, #24]
 80106a0:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80106a2:	6979      	ldr	r1, [r7, #20]
 80106a4:	69ba      	ldr	r2, [r7, #24]
 80106a6:	e841 2300 	strex	r3, r2, [r1]
 80106aa:	613b      	str	r3, [r7, #16]
   return(result);
 80106ac:	693b      	ldr	r3, [r7, #16]
 80106ae:	2b00      	cmp	r3, #0
 80106b0:	d1e6      	bne.n	8010680 <UART_EndTxTransfer+0x8>
#endif /* USART_CR1_FIFOEN */

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80106b2:	687b      	ldr	r3, [r7, #4]
 80106b4:	2220      	movs	r2, #32
 80106b6:	67da      	str	r2, [r3, #124]	@ 0x7c
}
 80106b8:	bf00      	nop
 80106ba:	3724      	adds	r7, #36	@ 0x24
 80106bc:	46bd      	mov	sp, r7
 80106be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80106c2:	4770      	bx	lr

080106c4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80106c4:	b480      	push	{r7}
 80106c6:	b095      	sub	sp, #84	@ 0x54
 80106c8:	af00      	add	r7, sp, #0
 80106ca:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80106cc:	687b      	ldr	r3, [r7, #4]
 80106ce:	681b      	ldr	r3, [r3, #0]
 80106d0:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80106d2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80106d4:	e853 3f00 	ldrex	r3, [r3]
 80106d8:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80106da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80106dc:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80106e0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80106e2:	687b      	ldr	r3, [r7, #4]
 80106e4:	681b      	ldr	r3, [r3, #0]
 80106e6:	461a      	mov	r2, r3
 80106e8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80106ea:	643b      	str	r3, [r7, #64]	@ 0x40
 80106ec:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80106ee:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80106f0:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80106f2:	e841 2300 	strex	r3, r2, [r1]
 80106f6:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80106f8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80106fa:	2b00      	cmp	r3, #0
 80106fc:	d1e6      	bne.n	80106cc <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80106fe:	687b      	ldr	r3, [r7, #4]
 8010700:	681b      	ldr	r3, [r3, #0]
 8010702:	3308      	adds	r3, #8
 8010704:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010706:	6a3b      	ldr	r3, [r7, #32]
 8010708:	e853 3f00 	ldrex	r3, [r3]
 801070c:	61fb      	str	r3, [r7, #28]
   return(result);
 801070e:	69fb      	ldr	r3, [r7, #28]
 8010710:	f023 0301 	bic.w	r3, r3, #1
 8010714:	64bb      	str	r3, [r7, #72]	@ 0x48
 8010716:	687b      	ldr	r3, [r7, #4]
 8010718:	681b      	ldr	r3, [r3, #0]
 801071a:	3308      	adds	r3, #8
 801071c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 801071e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8010720:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010722:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8010724:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8010726:	e841 2300 	strex	r3, r2, [r1]
 801072a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 801072c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801072e:	2b00      	cmp	r3, #0
 8010730:	d1e5      	bne.n	80106fe <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8010732:	687b      	ldr	r3, [r7, #4]
 8010734:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8010736:	2b01      	cmp	r3, #1
 8010738:	d118      	bne.n	801076c <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 801073a:	687b      	ldr	r3, [r7, #4]
 801073c:	681b      	ldr	r3, [r3, #0]
 801073e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010740:	68fb      	ldr	r3, [r7, #12]
 8010742:	e853 3f00 	ldrex	r3, [r3]
 8010746:	60bb      	str	r3, [r7, #8]
   return(result);
 8010748:	68bb      	ldr	r3, [r7, #8]
 801074a:	f023 0310 	bic.w	r3, r3, #16
 801074e:	647b      	str	r3, [r7, #68]	@ 0x44
 8010750:	687b      	ldr	r3, [r7, #4]
 8010752:	681b      	ldr	r3, [r3, #0]
 8010754:	461a      	mov	r2, r3
 8010756:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8010758:	61bb      	str	r3, [r7, #24]
 801075a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801075c:	6979      	ldr	r1, [r7, #20]
 801075e:	69ba      	ldr	r2, [r7, #24]
 8010760:	e841 2300 	strex	r3, r2, [r1]
 8010764:	613b      	str	r3, [r7, #16]
   return(result);
 8010766:	693b      	ldr	r3, [r7, #16]
 8010768:	2b00      	cmp	r3, #0
 801076a:	d1e6      	bne.n	801073a <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 801076c:	687b      	ldr	r3, [r7, #4]
 801076e:	2220      	movs	r2, #32
 8010770:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8010774:	687b      	ldr	r3, [r7, #4]
 8010776:	2200      	movs	r2, #0
 8010778:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 801077a:	687b      	ldr	r3, [r7, #4]
 801077c:	2200      	movs	r2, #0
 801077e:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8010780:	bf00      	nop
 8010782:	3754      	adds	r7, #84	@ 0x54
 8010784:	46bd      	mov	sp, r7
 8010786:	f85d 7b04 	ldr.w	r7, [sp], #4
 801078a:	4770      	bx	lr

0801078c <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 801078c:	b580      	push	{r7, lr}
 801078e:	b09c      	sub	sp, #112	@ 0x70
 8010790:	af00      	add	r7, sp, #0
 8010792:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8010794:	687b      	ldr	r3, [r7, #4]
 8010796:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8010798:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 801079a:	687b      	ldr	r3, [r7, #4]
 801079c:	681b      	ldr	r3, [r3, #0]
 801079e:	681b      	ldr	r3, [r3, #0]
 80107a0:	f003 0320 	and.w	r3, r3, #32
 80107a4:	2b00      	cmp	r3, #0
 80107a6:	d171      	bne.n	801088c <UART_DMAReceiveCplt+0x100>
  {
    huart->RxXferCount = 0U;
 80107a8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80107aa:	2200      	movs	r2, #0
 80107ac:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80107b0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80107b2:	681b      	ldr	r3, [r3, #0]
 80107b4:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80107b6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80107b8:	e853 3f00 	ldrex	r3, [r3]
 80107bc:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80107be:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80107c0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80107c4:	66bb      	str	r3, [r7, #104]	@ 0x68
 80107c6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80107c8:	681b      	ldr	r3, [r3, #0]
 80107ca:	461a      	mov	r2, r3
 80107cc:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80107ce:	65bb      	str	r3, [r7, #88]	@ 0x58
 80107d0:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80107d2:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80107d4:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80107d6:	e841 2300 	strex	r3, r2, [r1]
 80107da:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80107dc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80107de:	2b00      	cmp	r3, #0
 80107e0:	d1e6      	bne.n	80107b0 <UART_DMAReceiveCplt+0x24>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80107e2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80107e4:	681b      	ldr	r3, [r3, #0]
 80107e6:	3308      	adds	r3, #8
 80107e8:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80107ea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80107ec:	e853 3f00 	ldrex	r3, [r3]
 80107f0:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80107f2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80107f4:	f023 0301 	bic.w	r3, r3, #1
 80107f8:	667b      	str	r3, [r7, #100]	@ 0x64
 80107fa:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80107fc:	681b      	ldr	r3, [r3, #0]
 80107fe:	3308      	adds	r3, #8
 8010800:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8010802:	647a      	str	r2, [r7, #68]	@ 0x44
 8010804:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010806:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8010808:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 801080a:	e841 2300 	strex	r3, r2, [r1]
 801080e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8010810:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8010812:	2b00      	cmp	r3, #0
 8010814:	d1e5      	bne.n	80107e2 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8010816:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8010818:	681b      	ldr	r3, [r3, #0]
 801081a:	3308      	adds	r3, #8
 801081c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801081e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010820:	e853 3f00 	ldrex	r3, [r3]
 8010824:	623b      	str	r3, [r7, #32]
   return(result);
 8010826:	6a3b      	ldr	r3, [r7, #32]
 8010828:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 801082c:	663b      	str	r3, [r7, #96]	@ 0x60
 801082e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8010830:	681b      	ldr	r3, [r3, #0]
 8010832:	3308      	adds	r3, #8
 8010834:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8010836:	633a      	str	r2, [r7, #48]	@ 0x30
 8010838:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801083a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 801083c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 801083e:	e841 2300 	strex	r3, r2, [r1]
 8010842:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8010844:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010846:	2b00      	cmp	r3, #0
 8010848:	d1e5      	bne.n	8010816 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 801084a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 801084c:	2220      	movs	r2, #32
 801084e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8010852:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8010854:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8010856:	2b01      	cmp	r3, #1
 8010858:	d118      	bne.n	801088c <UART_DMAReceiveCplt+0x100>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 801085a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 801085c:	681b      	ldr	r3, [r3, #0]
 801085e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010860:	693b      	ldr	r3, [r7, #16]
 8010862:	e853 3f00 	ldrex	r3, [r3]
 8010866:	60fb      	str	r3, [r7, #12]
   return(result);
 8010868:	68fb      	ldr	r3, [r7, #12]
 801086a:	f023 0310 	bic.w	r3, r3, #16
 801086e:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8010870:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8010872:	681b      	ldr	r3, [r3, #0]
 8010874:	461a      	mov	r2, r3
 8010876:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8010878:	61fb      	str	r3, [r7, #28]
 801087a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801087c:	69b9      	ldr	r1, [r7, #24]
 801087e:	69fa      	ldr	r2, [r7, #28]
 8010880:	e841 2300 	strex	r3, r2, [r1]
 8010884:	617b      	str	r3, [r7, #20]
   return(result);
 8010886:	697b      	ldr	r3, [r7, #20]
 8010888:	2b00      	cmp	r3, #0
 801088a:	d1e6      	bne.n	801085a <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 801088c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 801088e:	2200      	movs	r2, #0
 8010890:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8010892:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8010894:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8010896:	2b01      	cmp	r3, #1
 8010898:	d107      	bne.n	80108aa <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 801089a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 801089c:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 80108a0:	4619      	mov	r1, r3
 80108a2:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 80108a4:	f7f0 fcb0 	bl	8001208 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80108a8:	e002      	b.n	80108b0 <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 80108aa:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 80108ac:	f7f0 fcde 	bl	800126c <HAL_UART_RxCpltCallback>
}
 80108b0:	bf00      	nop
 80108b2:	3770      	adds	r7, #112	@ 0x70
 80108b4:	46bd      	mov	sp, r7
 80108b6:	bd80      	pop	{r7, pc}

080108b8 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80108b8:	b580      	push	{r7, lr}
 80108ba:	b084      	sub	sp, #16
 80108bc:	af00      	add	r7, sp, #0
 80108be:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80108c0:	687b      	ldr	r3, [r7, #4]
 80108c2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80108c4:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 80108c6:	68fb      	ldr	r3, [r7, #12]
 80108c8:	2201      	movs	r2, #1
 80108ca:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80108cc:	68fb      	ldr	r3, [r7, #12]
 80108ce:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80108d0:	2b01      	cmp	r3, #1
 80108d2:	d109      	bne.n	80108e8 <UART_DMARxHalfCplt+0x30>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 80108d4:	68fb      	ldr	r3, [r7, #12]
 80108d6:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 80108da:	085b      	lsrs	r3, r3, #1
 80108dc:	b29b      	uxth	r3, r3
 80108de:	4619      	mov	r1, r3
 80108e0:	68f8      	ldr	r0, [r7, #12]
 80108e2:	f7f0 fc91 	bl	8001208 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80108e6:	e002      	b.n	80108ee <UART_DMARxHalfCplt+0x36>
    HAL_UART_RxHalfCpltCallback(huart);
 80108e8:	68f8      	ldr	r0, [r7, #12]
 80108ea:	f7ff f9a1 	bl	800fc30 <HAL_UART_RxHalfCpltCallback>
}
 80108ee:	bf00      	nop
 80108f0:	3710      	adds	r7, #16
 80108f2:	46bd      	mov	sp, r7
 80108f4:	bd80      	pop	{r7, pc}

080108f6 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 80108f6:	b580      	push	{r7, lr}
 80108f8:	b086      	sub	sp, #24
 80108fa:	af00      	add	r7, sp, #0
 80108fc:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80108fe:	687b      	ldr	r3, [r7, #4]
 8010900:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8010902:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8010904:	697b      	ldr	r3, [r7, #20]
 8010906:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8010908:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 801090a:	697b      	ldr	r3, [r7, #20]
 801090c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8010910:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8010912:	697b      	ldr	r3, [r7, #20]
 8010914:	681b      	ldr	r3, [r3, #0]
 8010916:	689b      	ldr	r3, [r3, #8]
 8010918:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 801091c:	2b80      	cmp	r3, #128	@ 0x80
 801091e:	d109      	bne.n	8010934 <UART_DMAError+0x3e>
 8010920:	693b      	ldr	r3, [r7, #16]
 8010922:	2b21      	cmp	r3, #33	@ 0x21
 8010924:	d106      	bne.n	8010934 <UART_DMAError+0x3e>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8010926:	697b      	ldr	r3, [r7, #20]
 8010928:	2200      	movs	r2, #0
 801092a:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    UART_EndTxTransfer(huart);
 801092e:	6978      	ldr	r0, [r7, #20]
 8010930:	f7ff fea2 	bl	8010678 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8010934:	697b      	ldr	r3, [r7, #20]
 8010936:	681b      	ldr	r3, [r3, #0]
 8010938:	689b      	ldr	r3, [r3, #8]
 801093a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 801093e:	2b40      	cmp	r3, #64	@ 0x40
 8010940:	d109      	bne.n	8010956 <UART_DMAError+0x60>
 8010942:	68fb      	ldr	r3, [r7, #12]
 8010944:	2b22      	cmp	r3, #34	@ 0x22
 8010946:	d106      	bne.n	8010956 <UART_DMAError+0x60>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8010948:	697b      	ldr	r3, [r7, #20]
 801094a:	2200      	movs	r2, #0
 801094c:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
    UART_EndRxTransfer(huart);
 8010950:	6978      	ldr	r0, [r7, #20]
 8010952:	f7ff feb7 	bl	80106c4 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8010956:	697b      	ldr	r3, [r7, #20]
 8010958:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 801095c:	f043 0210 	orr.w	r2, r3, #16
 8010960:	697b      	ldr	r3, [r7, #20]
 8010962:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8010966:	6978      	ldr	r0, [r7, #20]
 8010968:	f7ff f96c 	bl	800fc44 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 801096c:	bf00      	nop
 801096e:	3718      	adds	r7, #24
 8010970:	46bd      	mov	sp, r7
 8010972:	bd80      	pop	{r7, pc}

08010974 <HAL_UARTEx_ReceiveToIdle>:
  * @param Timeout Timeout duration expressed in ms (covers the whole reception sequence).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint16_t *RxLen,
                                           uint32_t Timeout)
{
 8010974:	b580      	push	{r7, lr}
 8010976:	b088      	sub	sp, #32
 8010978:	af00      	add	r7, sp, #0
 801097a:	60f8      	str	r0, [r7, #12]
 801097c:	60b9      	str	r1, [r7, #8]
 801097e:	603b      	str	r3, [r7, #0]
 8010980:	4613      	mov	r3, r2
 8010982:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8010984:	68fb      	ldr	r3, [r7, #12]
 8010986:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 801098a:	2b20      	cmp	r3, #32
 801098c:	f040 80f0 	bne.w	8010b70 <HAL_UARTEx_ReceiveToIdle+0x1fc>
  {
    if ((pData == NULL) || (Size == 0U))
 8010990:	68bb      	ldr	r3, [r7, #8]
 8010992:	2b00      	cmp	r3, #0
 8010994:	d002      	beq.n	801099c <HAL_UARTEx_ReceiveToIdle+0x28>
 8010996:	88fb      	ldrh	r3, [r7, #6]
 8010998:	2b00      	cmp	r3, #0
 801099a:	d101      	bne.n	80109a0 <HAL_UARTEx_ReceiveToIdle+0x2c>
    {
      return  HAL_ERROR;
 801099c:	2301      	movs	r3, #1
 801099e:	e0e8      	b.n	8010b72 <HAL_UARTEx_ReceiveToIdle+0x1fe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80109a0:	68fb      	ldr	r3, [r7, #12]
 80109a2:	2200      	movs	r2, #0
 80109a4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80109a8:	68fb      	ldr	r3, [r7, #12]
 80109aa:	2222      	movs	r2, #34	@ 0x22
 80109ac:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 80109b0:	68fb      	ldr	r3, [r7, #12]
 80109b2:	2201      	movs	r2, #1
 80109b4:	661a      	str	r2, [r3, #96]	@ 0x60
    huart->RxEventType = HAL_UART_RXEVENT_TC;
 80109b6:	68fb      	ldr	r3, [r7, #12]
 80109b8:	2200      	movs	r2, #0
 80109ba:	665a      	str	r2, [r3, #100]	@ 0x64

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80109bc:	f7f6 ff84 	bl	80078c8 <HAL_GetTick>
 80109c0:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 80109c2:	68fb      	ldr	r3, [r7, #12]
 80109c4:	88fa      	ldrh	r2, [r7, #6]
 80109c6:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58
    huart->RxXferCount = Size;
 80109ca:	68fb      	ldr	r3, [r7, #12]
 80109cc:	88fa      	ldrh	r2, [r7, #6]
 80109ce:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 80109d2:	68fb      	ldr	r3, [r7, #12]
 80109d4:	689b      	ldr	r3, [r3, #8]
 80109d6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80109da:	d10e      	bne.n	80109fa <HAL_UARTEx_ReceiveToIdle+0x86>
 80109dc:	68fb      	ldr	r3, [r7, #12]
 80109de:	691b      	ldr	r3, [r3, #16]
 80109e0:	2b00      	cmp	r3, #0
 80109e2:	d105      	bne.n	80109f0 <HAL_UARTEx_ReceiveToIdle+0x7c>
 80109e4:	68fb      	ldr	r3, [r7, #12]
 80109e6:	f240 12ff 	movw	r2, #511	@ 0x1ff
 80109ea:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 80109ee:	e02d      	b.n	8010a4c <HAL_UARTEx_ReceiveToIdle+0xd8>
 80109f0:	68fb      	ldr	r3, [r7, #12]
 80109f2:	22ff      	movs	r2, #255	@ 0xff
 80109f4:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 80109f8:	e028      	b.n	8010a4c <HAL_UARTEx_ReceiveToIdle+0xd8>
 80109fa:	68fb      	ldr	r3, [r7, #12]
 80109fc:	689b      	ldr	r3, [r3, #8]
 80109fe:	2b00      	cmp	r3, #0
 8010a00:	d10d      	bne.n	8010a1e <HAL_UARTEx_ReceiveToIdle+0xaa>
 8010a02:	68fb      	ldr	r3, [r7, #12]
 8010a04:	691b      	ldr	r3, [r3, #16]
 8010a06:	2b00      	cmp	r3, #0
 8010a08:	d104      	bne.n	8010a14 <HAL_UARTEx_ReceiveToIdle+0xa0>
 8010a0a:	68fb      	ldr	r3, [r7, #12]
 8010a0c:	22ff      	movs	r2, #255	@ 0xff
 8010a0e:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8010a12:	e01b      	b.n	8010a4c <HAL_UARTEx_ReceiveToIdle+0xd8>
 8010a14:	68fb      	ldr	r3, [r7, #12]
 8010a16:	227f      	movs	r2, #127	@ 0x7f
 8010a18:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8010a1c:	e016      	b.n	8010a4c <HAL_UARTEx_ReceiveToIdle+0xd8>
 8010a1e:	68fb      	ldr	r3, [r7, #12]
 8010a20:	689b      	ldr	r3, [r3, #8]
 8010a22:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8010a26:	d10d      	bne.n	8010a44 <HAL_UARTEx_ReceiveToIdle+0xd0>
 8010a28:	68fb      	ldr	r3, [r7, #12]
 8010a2a:	691b      	ldr	r3, [r3, #16]
 8010a2c:	2b00      	cmp	r3, #0
 8010a2e:	d104      	bne.n	8010a3a <HAL_UARTEx_ReceiveToIdle+0xc6>
 8010a30:	68fb      	ldr	r3, [r7, #12]
 8010a32:	227f      	movs	r2, #127	@ 0x7f
 8010a34:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8010a38:	e008      	b.n	8010a4c <HAL_UARTEx_ReceiveToIdle+0xd8>
 8010a3a:	68fb      	ldr	r3, [r7, #12]
 8010a3c:	223f      	movs	r2, #63	@ 0x3f
 8010a3e:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8010a42:	e003      	b.n	8010a4c <HAL_UARTEx_ReceiveToIdle+0xd8>
 8010a44:	68fb      	ldr	r3, [r7, #12]
 8010a46:	2200      	movs	r2, #0
 8010a48:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
    uhMask = huart->Mask;
 8010a4c:	68fb      	ldr	r3, [r7, #12]
 8010a4e:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8010a52:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8010a54:	68fb      	ldr	r3, [r7, #12]
 8010a56:	689b      	ldr	r3, [r3, #8]
 8010a58:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8010a5c:	d108      	bne.n	8010a70 <HAL_UARTEx_ReceiveToIdle+0xfc>
 8010a5e:	68fb      	ldr	r3, [r7, #12]
 8010a60:	691b      	ldr	r3, [r3, #16]
 8010a62:	2b00      	cmp	r3, #0
 8010a64:	d104      	bne.n	8010a70 <HAL_UARTEx_ReceiveToIdle+0xfc>
    {
      pdata8bits  = NULL;
 8010a66:	2300      	movs	r3, #0
 8010a68:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8010a6a:	68bb      	ldr	r3, [r7, #8]
 8010a6c:	61bb      	str	r3, [r7, #24]
 8010a6e:	e003      	b.n	8010a78 <HAL_UARTEx_ReceiveToIdle+0x104>
    }
    else
    {
      pdata8bits  = pData;
 8010a70:	68bb      	ldr	r3, [r7, #8]
 8010a72:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8010a74:	2300      	movs	r3, #0
 8010a76:	61bb      	str	r3, [r7, #24]
    }

    /* Initialize output number of received elements */
    *RxLen = 0U;
 8010a78:	683b      	ldr	r3, [r7, #0]
 8010a7a:	2200      	movs	r2, #0
 8010a7c:	801a      	strh	r2, [r3, #0]

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8010a7e:	e060      	b.n	8010b42 <HAL_UARTEx_ReceiveToIdle+0x1ce>
    {
      /* Check if IDLE flag is set */
      if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8010a80:	68fb      	ldr	r3, [r7, #12]
 8010a82:	681b      	ldr	r3, [r3, #0]
 8010a84:	69db      	ldr	r3, [r3, #28]
 8010a86:	f003 0310 	and.w	r3, r3, #16
 8010a8a:	2b10      	cmp	r3, #16
 8010a8c:	d110      	bne.n	8010ab0 <HAL_UARTEx_ReceiveToIdle+0x13c>
      {
        /* Clear IDLE flag in ISR */
        __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8010a8e:	68fb      	ldr	r3, [r7, #12]
 8010a90:	681b      	ldr	r3, [r3, #0]
 8010a92:	2210      	movs	r2, #16
 8010a94:	621a      	str	r2, [r3, #32]

        /* If Set, but no data ever received, clear flag without exiting loop */
        /* If Set, and data has already been received, this means Idle Event is valid : End reception */
        if (*RxLen > 0U)
 8010a96:	683b      	ldr	r3, [r7, #0]
 8010a98:	881b      	ldrh	r3, [r3, #0]
 8010a9a:	2b00      	cmp	r3, #0
 8010a9c:	d008      	beq.n	8010ab0 <HAL_UARTEx_ReceiveToIdle+0x13c>
        {
          huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8010a9e:	68fb      	ldr	r3, [r7, #12]
 8010aa0:	2202      	movs	r2, #2
 8010aa2:	665a      	str	r2, [r3, #100]	@ 0x64
          huart->RxState = HAL_UART_STATE_READY;
 8010aa4:	68fb      	ldr	r3, [r7, #12]
 8010aa6:	2220      	movs	r2, #32
 8010aa8:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

          return HAL_OK;
 8010aac:	2300      	movs	r3, #0
 8010aae:	e060      	b.n	8010b72 <HAL_UARTEx_ReceiveToIdle+0x1fe>
        }
      }

      /* Check if RXNE flag is set */
      if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RXNE))
 8010ab0:	68fb      	ldr	r3, [r7, #12]
 8010ab2:	681b      	ldr	r3, [r3, #0]
 8010ab4:	69db      	ldr	r3, [r3, #28]
 8010ab6:	f003 0320 	and.w	r3, r3, #32
 8010aba:	2b20      	cmp	r3, #32
 8010abc:	d12c      	bne.n	8010b18 <HAL_UARTEx_ReceiveToIdle+0x1a4>
      {
        if (pdata8bits == NULL)
 8010abe:	69fb      	ldr	r3, [r7, #28]
 8010ac0:	2b00      	cmp	r3, #0
 8010ac2:	d10c      	bne.n	8010ade <HAL_UARTEx_ReceiveToIdle+0x16a>
        {
          *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8010ac4:	68fb      	ldr	r3, [r7, #12]
 8010ac6:	681b      	ldr	r3, [r3, #0]
 8010ac8:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8010aca:	b29a      	uxth	r2, r3
 8010acc:	8a7b      	ldrh	r3, [r7, #18]
 8010ace:	4013      	ands	r3, r2
 8010ad0:	b29a      	uxth	r2, r3
 8010ad2:	69bb      	ldr	r3, [r7, #24]
 8010ad4:	801a      	strh	r2, [r3, #0]
          pdata16bits++;
 8010ad6:	69bb      	ldr	r3, [r7, #24]
 8010ad8:	3302      	adds	r3, #2
 8010ada:	61bb      	str	r3, [r7, #24]
 8010adc:	e00d      	b.n	8010afa <HAL_UARTEx_ReceiveToIdle+0x186>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8010ade:	68fb      	ldr	r3, [r7, #12]
 8010ae0:	681b      	ldr	r3, [r3, #0]
 8010ae2:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8010ae4:	b29b      	uxth	r3, r3
 8010ae6:	b2da      	uxtb	r2, r3
 8010ae8:	8a7b      	ldrh	r3, [r7, #18]
 8010aea:	b2db      	uxtb	r3, r3
 8010aec:	4013      	ands	r3, r2
 8010aee:	b2da      	uxtb	r2, r3
 8010af0:	69fb      	ldr	r3, [r7, #28]
 8010af2:	701a      	strb	r2, [r3, #0]
          pdata8bits++;
 8010af4:	69fb      	ldr	r3, [r7, #28]
 8010af6:	3301      	adds	r3, #1
 8010af8:	61fb      	str	r3, [r7, #28]
        }
        /* Increment number of received elements */
        *RxLen += 1U;
 8010afa:	683b      	ldr	r3, [r7, #0]
 8010afc:	881b      	ldrh	r3, [r3, #0]
 8010afe:	3301      	adds	r3, #1
 8010b00:	b29a      	uxth	r2, r3
 8010b02:	683b      	ldr	r3, [r7, #0]
 8010b04:	801a      	strh	r2, [r3, #0]
        huart->RxXferCount--;
 8010b06:	68fb      	ldr	r3, [r7, #12]
 8010b08:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8010b0c:	b29b      	uxth	r3, r3
 8010b0e:	3b01      	subs	r3, #1
 8010b10:	b29a      	uxth	r2, r3
 8010b12:	68fb      	ldr	r3, [r7, #12]
 8010b14:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
      }

      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8010b18:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010b1a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010b1e:	d010      	beq.n	8010b42 <HAL_UARTEx_ReceiveToIdle+0x1ce>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8010b20:	f7f6 fed2 	bl	80078c8 <HAL_GetTick>
 8010b24:	4602      	mov	r2, r0
 8010b26:	697b      	ldr	r3, [r7, #20]
 8010b28:	1ad3      	subs	r3, r2, r3
 8010b2a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8010b2c:	429a      	cmp	r2, r3
 8010b2e:	d302      	bcc.n	8010b36 <HAL_UARTEx_ReceiveToIdle+0x1c2>
 8010b30:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010b32:	2b00      	cmp	r3, #0
 8010b34:	d105      	bne.n	8010b42 <HAL_UARTEx_ReceiveToIdle+0x1ce>
        {
          huart->RxState = HAL_UART_STATE_READY;
 8010b36:	68fb      	ldr	r3, [r7, #12]
 8010b38:	2220      	movs	r2, #32
 8010b3a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 8010b3e:	2303      	movs	r3, #3
 8010b40:	e017      	b.n	8010b72 <HAL_UARTEx_ReceiveToIdle+0x1fe>
    while (huart->RxXferCount > 0U)
 8010b42:	68fb      	ldr	r3, [r7, #12]
 8010b44:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8010b48:	b29b      	uxth	r3, r3
 8010b4a:	2b00      	cmp	r3, #0
 8010b4c:	d198      	bne.n	8010a80 <HAL_UARTEx_ReceiveToIdle+0x10c>
        }
      }
    }

    /* Set number of received elements in output parameter : RxLen */
    *RxLen = huart->RxXferSize - huart->RxXferCount;
 8010b4e:	68fb      	ldr	r3, [r7, #12]
 8010b50:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 8010b54:	68fb      	ldr	r3, [r7, #12]
 8010b56:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8010b5a:	b29b      	uxth	r3, r3
 8010b5c:	1ad3      	subs	r3, r2, r3
 8010b5e:	b29a      	uxth	r2, r3
 8010b60:	683b      	ldr	r3, [r7, #0]
 8010b62:	801a      	strh	r2, [r3, #0]
    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8010b64:	68fb      	ldr	r3, [r7, #12]
 8010b66:	2220      	movs	r2, #32
 8010b68:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

    return HAL_OK;
 8010b6c:	2300      	movs	r3, #0
 8010b6e:	e000      	b.n	8010b72 <HAL_UARTEx_ReceiveToIdle+0x1fe>
  }
  else
  {
    return HAL_BUSY;
 8010b70:	2302      	movs	r3, #2
  }
}
 8010b72:	4618      	mov	r0, r3
 8010b74:	3720      	adds	r7, #32
 8010b76:	46bd      	mov	sp, r7
 8010b78:	bd80      	pop	{r7, pc}

08010b7a <HAL_UARTEx_ReceiveToIdle_DMA>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8010b7a:	b580      	push	{r7, lr}
 8010b7c:	b08c      	sub	sp, #48	@ 0x30
 8010b7e:	af00      	add	r7, sp, #0
 8010b80:	60f8      	str	r0, [r7, #12]
 8010b82:	60b9      	str	r1, [r7, #8]
 8010b84:	4613      	mov	r3, r2
 8010b86:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8010b88:	68fb      	ldr	r3, [r7, #12]
 8010b8a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8010b8e:	2b20      	cmp	r3, #32
 8010b90:	d142      	bne.n	8010c18 <HAL_UARTEx_ReceiveToIdle_DMA+0x9e>
  {
    if ((pData == NULL) || (Size == 0U))
 8010b92:	68bb      	ldr	r3, [r7, #8]
 8010b94:	2b00      	cmp	r3, #0
 8010b96:	d002      	beq.n	8010b9e <HAL_UARTEx_ReceiveToIdle_DMA+0x24>
 8010b98:	88fb      	ldrh	r3, [r7, #6]
 8010b9a:	2b00      	cmp	r3, #0
 8010b9c:	d101      	bne.n	8010ba2 <HAL_UARTEx_ReceiveToIdle_DMA+0x28>
    {
      return HAL_ERROR;
 8010b9e:	2301      	movs	r3, #1
 8010ba0:	e03b      	b.n	8010c1a <HAL_UARTEx_ReceiveToIdle_DMA+0xa0>
    }

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 8010ba2:	68fb      	ldr	r3, [r7, #12]
 8010ba4:	2201      	movs	r2, #1
 8010ba6:	661a      	str	r2, [r3, #96]	@ 0x60
    huart->RxEventType = HAL_UART_RXEVENT_TC;
 8010ba8:	68fb      	ldr	r3, [r7, #12]
 8010baa:	2200      	movs	r2, #0
 8010bac:	665a      	str	r2, [r3, #100]	@ 0x64

    status =  UART_Start_Receive_DMA(huart, pData, Size);
 8010bae:	88fb      	ldrh	r3, [r7, #6]
 8010bb0:	461a      	mov	r2, r3
 8010bb2:	68b9      	ldr	r1, [r7, #8]
 8010bb4:	68f8      	ldr	r0, [r7, #12]
 8010bb6:	f7ff fcbf 	bl	8010538 <UART_Start_Receive_DMA>
 8010bba:	4603      	mov	r3, r0
 8010bbc:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 8010bc0:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8010bc4:	2b00      	cmp	r3, #0
 8010bc6:	d124      	bne.n	8010c12 <HAL_UARTEx_ReceiveToIdle_DMA+0x98>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8010bc8:	68fb      	ldr	r3, [r7, #12]
 8010bca:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8010bcc:	2b01      	cmp	r3, #1
 8010bce:	d11d      	bne.n	8010c0c <HAL_UARTEx_ReceiveToIdle_DMA+0x92>
      {
        __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8010bd0:	68fb      	ldr	r3, [r7, #12]
 8010bd2:	681b      	ldr	r3, [r3, #0]
 8010bd4:	2210      	movs	r2, #16
 8010bd6:	621a      	str	r2, [r3, #32]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8010bd8:	68fb      	ldr	r3, [r7, #12]
 8010bda:	681b      	ldr	r3, [r3, #0]
 8010bdc:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010bde:	69bb      	ldr	r3, [r7, #24]
 8010be0:	e853 3f00 	ldrex	r3, [r3]
 8010be4:	617b      	str	r3, [r7, #20]
   return(result);
 8010be6:	697b      	ldr	r3, [r7, #20]
 8010be8:	f043 0310 	orr.w	r3, r3, #16
 8010bec:	62bb      	str	r3, [r7, #40]	@ 0x28
 8010bee:	68fb      	ldr	r3, [r7, #12]
 8010bf0:	681b      	ldr	r3, [r3, #0]
 8010bf2:	461a      	mov	r2, r3
 8010bf4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010bf6:	627b      	str	r3, [r7, #36]	@ 0x24
 8010bf8:	623a      	str	r2, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010bfa:	6a39      	ldr	r1, [r7, #32]
 8010bfc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8010bfe:	e841 2300 	strex	r3, r2, [r1]
 8010c02:	61fb      	str	r3, [r7, #28]
   return(result);
 8010c04:	69fb      	ldr	r3, [r7, #28]
 8010c06:	2b00      	cmp	r3, #0
 8010c08:	d1e6      	bne.n	8010bd8 <HAL_UARTEx_ReceiveToIdle_DMA+0x5e>
 8010c0a:	e002      	b.n	8010c12 <HAL_UARTEx_ReceiveToIdle_DMA+0x98>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 8010c0c:	2301      	movs	r3, #1
 8010c0e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }

    return status;
 8010c12:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8010c16:	e000      	b.n	8010c1a <HAL_UARTEx_ReceiveToIdle_DMA+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8010c18:	2302      	movs	r3, #2
  }
}
 8010c1a:	4618      	mov	r0, r3
 8010c1c:	3730      	adds	r7, #48	@ 0x30
 8010c1e:	46bd      	mov	sp, r7
 8010c20:	bd80      	pop	{r7, pc}
	...

08010c24 <siprintf>:
 8010c24:	b40e      	push	{r1, r2, r3}
 8010c26:	b510      	push	{r4, lr}
 8010c28:	b09d      	sub	sp, #116	@ 0x74
 8010c2a:	ab1f      	add	r3, sp, #124	@ 0x7c
 8010c2c:	9002      	str	r0, [sp, #8]
 8010c2e:	9006      	str	r0, [sp, #24]
 8010c30:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8010c34:	480a      	ldr	r0, [pc, #40]	@ (8010c60 <siprintf+0x3c>)
 8010c36:	9107      	str	r1, [sp, #28]
 8010c38:	9104      	str	r1, [sp, #16]
 8010c3a:	490a      	ldr	r1, [pc, #40]	@ (8010c64 <siprintf+0x40>)
 8010c3c:	f853 2b04 	ldr.w	r2, [r3], #4
 8010c40:	9105      	str	r1, [sp, #20]
 8010c42:	2400      	movs	r4, #0
 8010c44:	a902      	add	r1, sp, #8
 8010c46:	6800      	ldr	r0, [r0, #0]
 8010c48:	9301      	str	r3, [sp, #4]
 8010c4a:	941b      	str	r4, [sp, #108]	@ 0x6c
 8010c4c:	f000 fa16 	bl	801107c <_svfiprintf_r>
 8010c50:	9b02      	ldr	r3, [sp, #8]
 8010c52:	701c      	strb	r4, [r3, #0]
 8010c54:	b01d      	add	sp, #116	@ 0x74
 8010c56:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010c5a:	b003      	add	sp, #12
 8010c5c:	4770      	bx	lr
 8010c5e:	bf00      	nop
 8010c60:	20000014 	.word	0x20000014
 8010c64:	ffff0208 	.word	0xffff0208

08010c68 <siscanf>:
 8010c68:	b40e      	push	{r1, r2, r3}
 8010c6a:	b570      	push	{r4, r5, r6, lr}
 8010c6c:	b09d      	sub	sp, #116	@ 0x74
 8010c6e:	ac21      	add	r4, sp, #132	@ 0x84
 8010c70:	2500      	movs	r5, #0
 8010c72:	f44f 7201 	mov.w	r2, #516	@ 0x204
 8010c76:	f854 6b04 	ldr.w	r6, [r4], #4
 8010c7a:	f8ad 2014 	strh.w	r2, [sp, #20]
 8010c7e:	951b      	str	r5, [sp, #108]	@ 0x6c
 8010c80:	9002      	str	r0, [sp, #8]
 8010c82:	9006      	str	r0, [sp, #24]
 8010c84:	f7ef faa4 	bl	80001d0 <strlen>
 8010c88:	4b0b      	ldr	r3, [pc, #44]	@ (8010cb8 <siscanf+0x50>)
 8010c8a:	9003      	str	r0, [sp, #12]
 8010c8c:	9007      	str	r0, [sp, #28]
 8010c8e:	480b      	ldr	r0, [pc, #44]	@ (8010cbc <siscanf+0x54>)
 8010c90:	930b      	str	r3, [sp, #44]	@ 0x2c
 8010c92:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8010c96:	f8ad 3016 	strh.w	r3, [sp, #22]
 8010c9a:	4632      	mov	r2, r6
 8010c9c:	4623      	mov	r3, r4
 8010c9e:	a902      	add	r1, sp, #8
 8010ca0:	6800      	ldr	r0, [r0, #0]
 8010ca2:	950f      	str	r5, [sp, #60]	@ 0x3c
 8010ca4:	9514      	str	r5, [sp, #80]	@ 0x50
 8010ca6:	9401      	str	r4, [sp, #4]
 8010ca8:	f000 fb3e 	bl	8011328 <__ssvfiscanf_r>
 8010cac:	b01d      	add	sp, #116	@ 0x74
 8010cae:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8010cb2:	b003      	add	sp, #12
 8010cb4:	4770      	bx	lr
 8010cb6:	bf00      	nop
 8010cb8:	08010cc1 	.word	0x08010cc1
 8010cbc:	20000014 	.word	0x20000014

08010cc0 <__seofread>:
 8010cc0:	2000      	movs	r0, #0
 8010cc2:	4770      	bx	lr

08010cc4 <memcmp>:
 8010cc4:	b510      	push	{r4, lr}
 8010cc6:	3901      	subs	r1, #1
 8010cc8:	4402      	add	r2, r0
 8010cca:	4290      	cmp	r0, r2
 8010ccc:	d101      	bne.n	8010cd2 <memcmp+0xe>
 8010cce:	2000      	movs	r0, #0
 8010cd0:	e005      	b.n	8010cde <memcmp+0x1a>
 8010cd2:	7803      	ldrb	r3, [r0, #0]
 8010cd4:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8010cd8:	42a3      	cmp	r3, r4
 8010cda:	d001      	beq.n	8010ce0 <memcmp+0x1c>
 8010cdc:	1b18      	subs	r0, r3, r4
 8010cde:	bd10      	pop	{r4, pc}
 8010ce0:	3001      	adds	r0, #1
 8010ce2:	e7f2      	b.n	8010cca <memcmp+0x6>

08010ce4 <memset>:
 8010ce4:	4402      	add	r2, r0
 8010ce6:	4603      	mov	r3, r0
 8010ce8:	4293      	cmp	r3, r2
 8010cea:	d100      	bne.n	8010cee <memset+0xa>
 8010cec:	4770      	bx	lr
 8010cee:	f803 1b01 	strb.w	r1, [r3], #1
 8010cf2:	e7f9      	b.n	8010ce8 <memset+0x4>

08010cf4 <strchr>:
 8010cf4:	b2c9      	uxtb	r1, r1
 8010cf6:	4603      	mov	r3, r0
 8010cf8:	4618      	mov	r0, r3
 8010cfa:	f813 2b01 	ldrb.w	r2, [r3], #1
 8010cfe:	b112      	cbz	r2, 8010d06 <strchr+0x12>
 8010d00:	428a      	cmp	r2, r1
 8010d02:	d1f9      	bne.n	8010cf8 <strchr+0x4>
 8010d04:	4770      	bx	lr
 8010d06:	2900      	cmp	r1, #0
 8010d08:	bf18      	it	ne
 8010d0a:	2000      	movne	r0, #0
 8010d0c:	4770      	bx	lr

08010d0e <strncmp>:
 8010d0e:	b510      	push	{r4, lr}
 8010d10:	b16a      	cbz	r2, 8010d2e <strncmp+0x20>
 8010d12:	3901      	subs	r1, #1
 8010d14:	1884      	adds	r4, r0, r2
 8010d16:	f810 2b01 	ldrb.w	r2, [r0], #1
 8010d1a:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8010d1e:	429a      	cmp	r2, r3
 8010d20:	d103      	bne.n	8010d2a <strncmp+0x1c>
 8010d22:	42a0      	cmp	r0, r4
 8010d24:	d001      	beq.n	8010d2a <strncmp+0x1c>
 8010d26:	2a00      	cmp	r2, #0
 8010d28:	d1f5      	bne.n	8010d16 <strncmp+0x8>
 8010d2a:	1ad0      	subs	r0, r2, r3
 8010d2c:	bd10      	pop	{r4, pc}
 8010d2e:	4610      	mov	r0, r2
 8010d30:	e7fc      	b.n	8010d2c <strncmp+0x1e>

08010d32 <strstr>:
 8010d32:	780a      	ldrb	r2, [r1, #0]
 8010d34:	b570      	push	{r4, r5, r6, lr}
 8010d36:	b96a      	cbnz	r2, 8010d54 <strstr+0x22>
 8010d38:	bd70      	pop	{r4, r5, r6, pc}
 8010d3a:	429a      	cmp	r2, r3
 8010d3c:	d109      	bne.n	8010d52 <strstr+0x20>
 8010d3e:	460c      	mov	r4, r1
 8010d40:	4605      	mov	r5, r0
 8010d42:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 8010d46:	2b00      	cmp	r3, #0
 8010d48:	d0f6      	beq.n	8010d38 <strstr+0x6>
 8010d4a:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 8010d4e:	429e      	cmp	r6, r3
 8010d50:	d0f7      	beq.n	8010d42 <strstr+0x10>
 8010d52:	3001      	adds	r0, #1
 8010d54:	7803      	ldrb	r3, [r0, #0]
 8010d56:	2b00      	cmp	r3, #0
 8010d58:	d1ef      	bne.n	8010d3a <strstr+0x8>
 8010d5a:	4618      	mov	r0, r3
 8010d5c:	e7ec      	b.n	8010d38 <strstr+0x6>
	...

08010d60 <__errno>:
 8010d60:	4b01      	ldr	r3, [pc, #4]	@ (8010d68 <__errno+0x8>)
 8010d62:	6818      	ldr	r0, [r3, #0]
 8010d64:	4770      	bx	lr
 8010d66:	bf00      	nop
 8010d68:	20000014 	.word	0x20000014

08010d6c <__libc_init_array>:
 8010d6c:	b570      	push	{r4, r5, r6, lr}
 8010d6e:	4d0d      	ldr	r5, [pc, #52]	@ (8010da4 <__libc_init_array+0x38>)
 8010d70:	4c0d      	ldr	r4, [pc, #52]	@ (8010da8 <__libc_init_array+0x3c>)
 8010d72:	1b64      	subs	r4, r4, r5
 8010d74:	10a4      	asrs	r4, r4, #2
 8010d76:	2600      	movs	r6, #0
 8010d78:	42a6      	cmp	r6, r4
 8010d7a:	d109      	bne.n	8010d90 <__libc_init_array+0x24>
 8010d7c:	4d0b      	ldr	r5, [pc, #44]	@ (8010dac <__libc_init_array+0x40>)
 8010d7e:	4c0c      	ldr	r4, [pc, #48]	@ (8010db0 <__libc_init_array+0x44>)
 8010d80:	f001 f8e2 	bl	8011f48 <_init>
 8010d84:	1b64      	subs	r4, r4, r5
 8010d86:	10a4      	asrs	r4, r4, #2
 8010d88:	2600      	movs	r6, #0
 8010d8a:	42a6      	cmp	r6, r4
 8010d8c:	d105      	bne.n	8010d9a <__libc_init_array+0x2e>
 8010d8e:	bd70      	pop	{r4, r5, r6, pc}
 8010d90:	f855 3b04 	ldr.w	r3, [r5], #4
 8010d94:	4798      	blx	r3
 8010d96:	3601      	adds	r6, #1
 8010d98:	e7ee      	b.n	8010d78 <__libc_init_array+0xc>
 8010d9a:	f855 3b04 	ldr.w	r3, [r5], #4
 8010d9e:	4798      	blx	r3
 8010da0:	3601      	adds	r6, #1
 8010da2:	e7f2      	b.n	8010d8a <__libc_init_array+0x1e>
 8010da4:	080124bc 	.word	0x080124bc
 8010da8:	080124bc 	.word	0x080124bc
 8010dac:	080124bc 	.word	0x080124bc
 8010db0:	080124c0 	.word	0x080124c0

08010db4 <__retarget_lock_acquire_recursive>:
 8010db4:	4770      	bx	lr

08010db6 <__retarget_lock_release_recursive>:
 8010db6:	4770      	bx	lr

08010db8 <memcpy>:
 8010db8:	440a      	add	r2, r1
 8010dba:	4291      	cmp	r1, r2
 8010dbc:	f100 33ff 	add.w	r3, r0, #4294967295
 8010dc0:	d100      	bne.n	8010dc4 <memcpy+0xc>
 8010dc2:	4770      	bx	lr
 8010dc4:	b510      	push	{r4, lr}
 8010dc6:	f811 4b01 	ldrb.w	r4, [r1], #1
 8010dca:	f803 4f01 	strb.w	r4, [r3, #1]!
 8010dce:	4291      	cmp	r1, r2
 8010dd0:	d1f9      	bne.n	8010dc6 <memcpy+0xe>
 8010dd2:	bd10      	pop	{r4, pc}

08010dd4 <_free_r>:
 8010dd4:	b538      	push	{r3, r4, r5, lr}
 8010dd6:	4605      	mov	r5, r0
 8010dd8:	2900      	cmp	r1, #0
 8010dda:	d041      	beq.n	8010e60 <_free_r+0x8c>
 8010ddc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8010de0:	1f0c      	subs	r4, r1, #4
 8010de2:	2b00      	cmp	r3, #0
 8010de4:	bfb8      	it	lt
 8010de6:	18e4      	addlt	r4, r4, r3
 8010de8:	f000 f8e0 	bl	8010fac <__malloc_lock>
 8010dec:	4a1d      	ldr	r2, [pc, #116]	@ (8010e64 <_free_r+0x90>)
 8010dee:	6813      	ldr	r3, [r2, #0]
 8010df0:	b933      	cbnz	r3, 8010e00 <_free_r+0x2c>
 8010df2:	6063      	str	r3, [r4, #4]
 8010df4:	6014      	str	r4, [r2, #0]
 8010df6:	4628      	mov	r0, r5
 8010df8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8010dfc:	f000 b8dc 	b.w	8010fb8 <__malloc_unlock>
 8010e00:	42a3      	cmp	r3, r4
 8010e02:	d908      	bls.n	8010e16 <_free_r+0x42>
 8010e04:	6820      	ldr	r0, [r4, #0]
 8010e06:	1821      	adds	r1, r4, r0
 8010e08:	428b      	cmp	r3, r1
 8010e0a:	bf01      	itttt	eq
 8010e0c:	6819      	ldreq	r1, [r3, #0]
 8010e0e:	685b      	ldreq	r3, [r3, #4]
 8010e10:	1809      	addeq	r1, r1, r0
 8010e12:	6021      	streq	r1, [r4, #0]
 8010e14:	e7ed      	b.n	8010df2 <_free_r+0x1e>
 8010e16:	461a      	mov	r2, r3
 8010e18:	685b      	ldr	r3, [r3, #4]
 8010e1a:	b10b      	cbz	r3, 8010e20 <_free_r+0x4c>
 8010e1c:	42a3      	cmp	r3, r4
 8010e1e:	d9fa      	bls.n	8010e16 <_free_r+0x42>
 8010e20:	6811      	ldr	r1, [r2, #0]
 8010e22:	1850      	adds	r0, r2, r1
 8010e24:	42a0      	cmp	r0, r4
 8010e26:	d10b      	bne.n	8010e40 <_free_r+0x6c>
 8010e28:	6820      	ldr	r0, [r4, #0]
 8010e2a:	4401      	add	r1, r0
 8010e2c:	1850      	adds	r0, r2, r1
 8010e2e:	4283      	cmp	r3, r0
 8010e30:	6011      	str	r1, [r2, #0]
 8010e32:	d1e0      	bne.n	8010df6 <_free_r+0x22>
 8010e34:	6818      	ldr	r0, [r3, #0]
 8010e36:	685b      	ldr	r3, [r3, #4]
 8010e38:	6053      	str	r3, [r2, #4]
 8010e3a:	4408      	add	r0, r1
 8010e3c:	6010      	str	r0, [r2, #0]
 8010e3e:	e7da      	b.n	8010df6 <_free_r+0x22>
 8010e40:	d902      	bls.n	8010e48 <_free_r+0x74>
 8010e42:	230c      	movs	r3, #12
 8010e44:	602b      	str	r3, [r5, #0]
 8010e46:	e7d6      	b.n	8010df6 <_free_r+0x22>
 8010e48:	6820      	ldr	r0, [r4, #0]
 8010e4a:	1821      	adds	r1, r4, r0
 8010e4c:	428b      	cmp	r3, r1
 8010e4e:	bf04      	itt	eq
 8010e50:	6819      	ldreq	r1, [r3, #0]
 8010e52:	685b      	ldreq	r3, [r3, #4]
 8010e54:	6063      	str	r3, [r4, #4]
 8010e56:	bf04      	itt	eq
 8010e58:	1809      	addeq	r1, r1, r0
 8010e5a:	6021      	streq	r1, [r4, #0]
 8010e5c:	6054      	str	r4, [r2, #4]
 8010e5e:	e7ca      	b.n	8010df6 <_free_r+0x22>
 8010e60:	bd38      	pop	{r3, r4, r5, pc}
 8010e62:	bf00      	nop
 8010e64:	2000750c 	.word	0x2000750c

08010e68 <sbrk_aligned>:
 8010e68:	b570      	push	{r4, r5, r6, lr}
 8010e6a:	4e0f      	ldr	r6, [pc, #60]	@ (8010ea8 <sbrk_aligned+0x40>)
 8010e6c:	460c      	mov	r4, r1
 8010e6e:	6831      	ldr	r1, [r6, #0]
 8010e70:	4605      	mov	r5, r0
 8010e72:	b911      	cbnz	r1, 8010e7a <sbrk_aligned+0x12>
 8010e74:	f000 ff36 	bl	8011ce4 <_sbrk_r>
 8010e78:	6030      	str	r0, [r6, #0]
 8010e7a:	4621      	mov	r1, r4
 8010e7c:	4628      	mov	r0, r5
 8010e7e:	f000 ff31 	bl	8011ce4 <_sbrk_r>
 8010e82:	1c43      	adds	r3, r0, #1
 8010e84:	d103      	bne.n	8010e8e <sbrk_aligned+0x26>
 8010e86:	f04f 34ff 	mov.w	r4, #4294967295
 8010e8a:	4620      	mov	r0, r4
 8010e8c:	bd70      	pop	{r4, r5, r6, pc}
 8010e8e:	1cc4      	adds	r4, r0, #3
 8010e90:	f024 0403 	bic.w	r4, r4, #3
 8010e94:	42a0      	cmp	r0, r4
 8010e96:	d0f8      	beq.n	8010e8a <sbrk_aligned+0x22>
 8010e98:	1a21      	subs	r1, r4, r0
 8010e9a:	4628      	mov	r0, r5
 8010e9c:	f000 ff22 	bl	8011ce4 <_sbrk_r>
 8010ea0:	3001      	adds	r0, #1
 8010ea2:	d1f2      	bne.n	8010e8a <sbrk_aligned+0x22>
 8010ea4:	e7ef      	b.n	8010e86 <sbrk_aligned+0x1e>
 8010ea6:	bf00      	nop
 8010ea8:	20007508 	.word	0x20007508

08010eac <_malloc_r>:
 8010eac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010eb0:	1ccd      	adds	r5, r1, #3
 8010eb2:	f025 0503 	bic.w	r5, r5, #3
 8010eb6:	3508      	adds	r5, #8
 8010eb8:	2d0c      	cmp	r5, #12
 8010eba:	bf38      	it	cc
 8010ebc:	250c      	movcc	r5, #12
 8010ebe:	2d00      	cmp	r5, #0
 8010ec0:	4606      	mov	r6, r0
 8010ec2:	db01      	blt.n	8010ec8 <_malloc_r+0x1c>
 8010ec4:	42a9      	cmp	r1, r5
 8010ec6:	d904      	bls.n	8010ed2 <_malloc_r+0x26>
 8010ec8:	230c      	movs	r3, #12
 8010eca:	6033      	str	r3, [r6, #0]
 8010ecc:	2000      	movs	r0, #0
 8010ece:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010ed2:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8010fa8 <_malloc_r+0xfc>
 8010ed6:	f000 f869 	bl	8010fac <__malloc_lock>
 8010eda:	f8d8 3000 	ldr.w	r3, [r8]
 8010ede:	461c      	mov	r4, r3
 8010ee0:	bb44      	cbnz	r4, 8010f34 <_malloc_r+0x88>
 8010ee2:	4629      	mov	r1, r5
 8010ee4:	4630      	mov	r0, r6
 8010ee6:	f7ff ffbf 	bl	8010e68 <sbrk_aligned>
 8010eea:	1c43      	adds	r3, r0, #1
 8010eec:	4604      	mov	r4, r0
 8010eee:	d158      	bne.n	8010fa2 <_malloc_r+0xf6>
 8010ef0:	f8d8 4000 	ldr.w	r4, [r8]
 8010ef4:	4627      	mov	r7, r4
 8010ef6:	2f00      	cmp	r7, #0
 8010ef8:	d143      	bne.n	8010f82 <_malloc_r+0xd6>
 8010efa:	2c00      	cmp	r4, #0
 8010efc:	d04b      	beq.n	8010f96 <_malloc_r+0xea>
 8010efe:	6823      	ldr	r3, [r4, #0]
 8010f00:	4639      	mov	r1, r7
 8010f02:	4630      	mov	r0, r6
 8010f04:	eb04 0903 	add.w	r9, r4, r3
 8010f08:	f000 feec 	bl	8011ce4 <_sbrk_r>
 8010f0c:	4581      	cmp	r9, r0
 8010f0e:	d142      	bne.n	8010f96 <_malloc_r+0xea>
 8010f10:	6821      	ldr	r1, [r4, #0]
 8010f12:	1a6d      	subs	r5, r5, r1
 8010f14:	4629      	mov	r1, r5
 8010f16:	4630      	mov	r0, r6
 8010f18:	f7ff ffa6 	bl	8010e68 <sbrk_aligned>
 8010f1c:	3001      	adds	r0, #1
 8010f1e:	d03a      	beq.n	8010f96 <_malloc_r+0xea>
 8010f20:	6823      	ldr	r3, [r4, #0]
 8010f22:	442b      	add	r3, r5
 8010f24:	6023      	str	r3, [r4, #0]
 8010f26:	f8d8 3000 	ldr.w	r3, [r8]
 8010f2a:	685a      	ldr	r2, [r3, #4]
 8010f2c:	bb62      	cbnz	r2, 8010f88 <_malloc_r+0xdc>
 8010f2e:	f8c8 7000 	str.w	r7, [r8]
 8010f32:	e00f      	b.n	8010f54 <_malloc_r+0xa8>
 8010f34:	6822      	ldr	r2, [r4, #0]
 8010f36:	1b52      	subs	r2, r2, r5
 8010f38:	d420      	bmi.n	8010f7c <_malloc_r+0xd0>
 8010f3a:	2a0b      	cmp	r2, #11
 8010f3c:	d917      	bls.n	8010f6e <_malloc_r+0xc2>
 8010f3e:	1961      	adds	r1, r4, r5
 8010f40:	42a3      	cmp	r3, r4
 8010f42:	6025      	str	r5, [r4, #0]
 8010f44:	bf18      	it	ne
 8010f46:	6059      	strne	r1, [r3, #4]
 8010f48:	6863      	ldr	r3, [r4, #4]
 8010f4a:	bf08      	it	eq
 8010f4c:	f8c8 1000 	streq.w	r1, [r8]
 8010f50:	5162      	str	r2, [r4, r5]
 8010f52:	604b      	str	r3, [r1, #4]
 8010f54:	4630      	mov	r0, r6
 8010f56:	f000 f82f 	bl	8010fb8 <__malloc_unlock>
 8010f5a:	f104 000b 	add.w	r0, r4, #11
 8010f5e:	1d23      	adds	r3, r4, #4
 8010f60:	f020 0007 	bic.w	r0, r0, #7
 8010f64:	1ac2      	subs	r2, r0, r3
 8010f66:	bf1c      	itt	ne
 8010f68:	1a1b      	subne	r3, r3, r0
 8010f6a:	50a3      	strne	r3, [r4, r2]
 8010f6c:	e7af      	b.n	8010ece <_malloc_r+0x22>
 8010f6e:	6862      	ldr	r2, [r4, #4]
 8010f70:	42a3      	cmp	r3, r4
 8010f72:	bf0c      	ite	eq
 8010f74:	f8c8 2000 	streq.w	r2, [r8]
 8010f78:	605a      	strne	r2, [r3, #4]
 8010f7a:	e7eb      	b.n	8010f54 <_malloc_r+0xa8>
 8010f7c:	4623      	mov	r3, r4
 8010f7e:	6864      	ldr	r4, [r4, #4]
 8010f80:	e7ae      	b.n	8010ee0 <_malloc_r+0x34>
 8010f82:	463c      	mov	r4, r7
 8010f84:	687f      	ldr	r7, [r7, #4]
 8010f86:	e7b6      	b.n	8010ef6 <_malloc_r+0x4a>
 8010f88:	461a      	mov	r2, r3
 8010f8a:	685b      	ldr	r3, [r3, #4]
 8010f8c:	42a3      	cmp	r3, r4
 8010f8e:	d1fb      	bne.n	8010f88 <_malloc_r+0xdc>
 8010f90:	2300      	movs	r3, #0
 8010f92:	6053      	str	r3, [r2, #4]
 8010f94:	e7de      	b.n	8010f54 <_malloc_r+0xa8>
 8010f96:	230c      	movs	r3, #12
 8010f98:	6033      	str	r3, [r6, #0]
 8010f9a:	4630      	mov	r0, r6
 8010f9c:	f000 f80c 	bl	8010fb8 <__malloc_unlock>
 8010fa0:	e794      	b.n	8010ecc <_malloc_r+0x20>
 8010fa2:	6005      	str	r5, [r0, #0]
 8010fa4:	e7d6      	b.n	8010f54 <_malloc_r+0xa8>
 8010fa6:	bf00      	nop
 8010fa8:	2000750c 	.word	0x2000750c

08010fac <__malloc_lock>:
 8010fac:	4801      	ldr	r0, [pc, #4]	@ (8010fb4 <__malloc_lock+0x8>)
 8010fae:	f7ff bf01 	b.w	8010db4 <__retarget_lock_acquire_recursive>
 8010fb2:	bf00      	nop
 8010fb4:	20007504 	.word	0x20007504

08010fb8 <__malloc_unlock>:
 8010fb8:	4801      	ldr	r0, [pc, #4]	@ (8010fc0 <__malloc_unlock+0x8>)
 8010fba:	f7ff befc 	b.w	8010db6 <__retarget_lock_release_recursive>
 8010fbe:	bf00      	nop
 8010fc0:	20007504 	.word	0x20007504

08010fc4 <__ssputs_r>:
 8010fc4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010fc8:	688e      	ldr	r6, [r1, #8]
 8010fca:	461f      	mov	r7, r3
 8010fcc:	42be      	cmp	r6, r7
 8010fce:	680b      	ldr	r3, [r1, #0]
 8010fd0:	4682      	mov	sl, r0
 8010fd2:	460c      	mov	r4, r1
 8010fd4:	4690      	mov	r8, r2
 8010fd6:	d82d      	bhi.n	8011034 <__ssputs_r+0x70>
 8010fd8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8010fdc:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8010fe0:	d026      	beq.n	8011030 <__ssputs_r+0x6c>
 8010fe2:	6965      	ldr	r5, [r4, #20]
 8010fe4:	6909      	ldr	r1, [r1, #16]
 8010fe6:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8010fea:	eba3 0901 	sub.w	r9, r3, r1
 8010fee:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8010ff2:	1c7b      	adds	r3, r7, #1
 8010ff4:	444b      	add	r3, r9
 8010ff6:	106d      	asrs	r5, r5, #1
 8010ff8:	429d      	cmp	r5, r3
 8010ffa:	bf38      	it	cc
 8010ffc:	461d      	movcc	r5, r3
 8010ffe:	0553      	lsls	r3, r2, #21
 8011000:	d527      	bpl.n	8011052 <__ssputs_r+0x8e>
 8011002:	4629      	mov	r1, r5
 8011004:	f7ff ff52 	bl	8010eac <_malloc_r>
 8011008:	4606      	mov	r6, r0
 801100a:	b360      	cbz	r0, 8011066 <__ssputs_r+0xa2>
 801100c:	6921      	ldr	r1, [r4, #16]
 801100e:	464a      	mov	r2, r9
 8011010:	f7ff fed2 	bl	8010db8 <memcpy>
 8011014:	89a3      	ldrh	r3, [r4, #12]
 8011016:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 801101a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801101e:	81a3      	strh	r3, [r4, #12]
 8011020:	6126      	str	r6, [r4, #16]
 8011022:	6165      	str	r5, [r4, #20]
 8011024:	444e      	add	r6, r9
 8011026:	eba5 0509 	sub.w	r5, r5, r9
 801102a:	6026      	str	r6, [r4, #0]
 801102c:	60a5      	str	r5, [r4, #8]
 801102e:	463e      	mov	r6, r7
 8011030:	42be      	cmp	r6, r7
 8011032:	d900      	bls.n	8011036 <__ssputs_r+0x72>
 8011034:	463e      	mov	r6, r7
 8011036:	6820      	ldr	r0, [r4, #0]
 8011038:	4632      	mov	r2, r6
 801103a:	4641      	mov	r1, r8
 801103c:	f000 fe37 	bl	8011cae <memmove>
 8011040:	68a3      	ldr	r3, [r4, #8]
 8011042:	1b9b      	subs	r3, r3, r6
 8011044:	60a3      	str	r3, [r4, #8]
 8011046:	6823      	ldr	r3, [r4, #0]
 8011048:	4433      	add	r3, r6
 801104a:	6023      	str	r3, [r4, #0]
 801104c:	2000      	movs	r0, #0
 801104e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011052:	462a      	mov	r2, r5
 8011054:	f000 fe56 	bl	8011d04 <_realloc_r>
 8011058:	4606      	mov	r6, r0
 801105a:	2800      	cmp	r0, #0
 801105c:	d1e0      	bne.n	8011020 <__ssputs_r+0x5c>
 801105e:	6921      	ldr	r1, [r4, #16]
 8011060:	4650      	mov	r0, sl
 8011062:	f7ff feb7 	bl	8010dd4 <_free_r>
 8011066:	230c      	movs	r3, #12
 8011068:	f8ca 3000 	str.w	r3, [sl]
 801106c:	89a3      	ldrh	r3, [r4, #12]
 801106e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8011072:	81a3      	strh	r3, [r4, #12]
 8011074:	f04f 30ff 	mov.w	r0, #4294967295
 8011078:	e7e9      	b.n	801104e <__ssputs_r+0x8a>
	...

0801107c <_svfiprintf_r>:
 801107c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011080:	4698      	mov	r8, r3
 8011082:	898b      	ldrh	r3, [r1, #12]
 8011084:	061b      	lsls	r3, r3, #24
 8011086:	b09d      	sub	sp, #116	@ 0x74
 8011088:	4607      	mov	r7, r0
 801108a:	460d      	mov	r5, r1
 801108c:	4614      	mov	r4, r2
 801108e:	d510      	bpl.n	80110b2 <_svfiprintf_r+0x36>
 8011090:	690b      	ldr	r3, [r1, #16]
 8011092:	b973      	cbnz	r3, 80110b2 <_svfiprintf_r+0x36>
 8011094:	2140      	movs	r1, #64	@ 0x40
 8011096:	f7ff ff09 	bl	8010eac <_malloc_r>
 801109a:	6028      	str	r0, [r5, #0]
 801109c:	6128      	str	r0, [r5, #16]
 801109e:	b930      	cbnz	r0, 80110ae <_svfiprintf_r+0x32>
 80110a0:	230c      	movs	r3, #12
 80110a2:	603b      	str	r3, [r7, #0]
 80110a4:	f04f 30ff 	mov.w	r0, #4294967295
 80110a8:	b01d      	add	sp, #116	@ 0x74
 80110aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80110ae:	2340      	movs	r3, #64	@ 0x40
 80110b0:	616b      	str	r3, [r5, #20]
 80110b2:	2300      	movs	r3, #0
 80110b4:	9309      	str	r3, [sp, #36]	@ 0x24
 80110b6:	2320      	movs	r3, #32
 80110b8:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80110bc:	f8cd 800c 	str.w	r8, [sp, #12]
 80110c0:	2330      	movs	r3, #48	@ 0x30
 80110c2:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8011260 <_svfiprintf_r+0x1e4>
 80110c6:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80110ca:	f04f 0901 	mov.w	r9, #1
 80110ce:	4623      	mov	r3, r4
 80110d0:	469a      	mov	sl, r3
 80110d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80110d6:	b10a      	cbz	r2, 80110dc <_svfiprintf_r+0x60>
 80110d8:	2a25      	cmp	r2, #37	@ 0x25
 80110da:	d1f9      	bne.n	80110d0 <_svfiprintf_r+0x54>
 80110dc:	ebba 0b04 	subs.w	fp, sl, r4
 80110e0:	d00b      	beq.n	80110fa <_svfiprintf_r+0x7e>
 80110e2:	465b      	mov	r3, fp
 80110e4:	4622      	mov	r2, r4
 80110e6:	4629      	mov	r1, r5
 80110e8:	4638      	mov	r0, r7
 80110ea:	f7ff ff6b 	bl	8010fc4 <__ssputs_r>
 80110ee:	3001      	adds	r0, #1
 80110f0:	f000 80a7 	beq.w	8011242 <_svfiprintf_r+0x1c6>
 80110f4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80110f6:	445a      	add	r2, fp
 80110f8:	9209      	str	r2, [sp, #36]	@ 0x24
 80110fa:	f89a 3000 	ldrb.w	r3, [sl]
 80110fe:	2b00      	cmp	r3, #0
 8011100:	f000 809f 	beq.w	8011242 <_svfiprintf_r+0x1c6>
 8011104:	2300      	movs	r3, #0
 8011106:	f04f 32ff 	mov.w	r2, #4294967295
 801110a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801110e:	f10a 0a01 	add.w	sl, sl, #1
 8011112:	9304      	str	r3, [sp, #16]
 8011114:	9307      	str	r3, [sp, #28]
 8011116:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 801111a:	931a      	str	r3, [sp, #104]	@ 0x68
 801111c:	4654      	mov	r4, sl
 801111e:	2205      	movs	r2, #5
 8011120:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011124:	484e      	ldr	r0, [pc, #312]	@ (8011260 <_svfiprintf_r+0x1e4>)
 8011126:	f7ef f85b 	bl	80001e0 <memchr>
 801112a:	9a04      	ldr	r2, [sp, #16]
 801112c:	b9d8      	cbnz	r0, 8011166 <_svfiprintf_r+0xea>
 801112e:	06d0      	lsls	r0, r2, #27
 8011130:	bf44      	itt	mi
 8011132:	2320      	movmi	r3, #32
 8011134:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8011138:	0711      	lsls	r1, r2, #28
 801113a:	bf44      	itt	mi
 801113c:	232b      	movmi	r3, #43	@ 0x2b
 801113e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8011142:	f89a 3000 	ldrb.w	r3, [sl]
 8011146:	2b2a      	cmp	r3, #42	@ 0x2a
 8011148:	d015      	beq.n	8011176 <_svfiprintf_r+0xfa>
 801114a:	9a07      	ldr	r2, [sp, #28]
 801114c:	4654      	mov	r4, sl
 801114e:	2000      	movs	r0, #0
 8011150:	f04f 0c0a 	mov.w	ip, #10
 8011154:	4621      	mov	r1, r4
 8011156:	f811 3b01 	ldrb.w	r3, [r1], #1
 801115a:	3b30      	subs	r3, #48	@ 0x30
 801115c:	2b09      	cmp	r3, #9
 801115e:	d94b      	bls.n	80111f8 <_svfiprintf_r+0x17c>
 8011160:	b1b0      	cbz	r0, 8011190 <_svfiprintf_r+0x114>
 8011162:	9207      	str	r2, [sp, #28]
 8011164:	e014      	b.n	8011190 <_svfiprintf_r+0x114>
 8011166:	eba0 0308 	sub.w	r3, r0, r8
 801116a:	fa09 f303 	lsl.w	r3, r9, r3
 801116e:	4313      	orrs	r3, r2
 8011170:	9304      	str	r3, [sp, #16]
 8011172:	46a2      	mov	sl, r4
 8011174:	e7d2      	b.n	801111c <_svfiprintf_r+0xa0>
 8011176:	9b03      	ldr	r3, [sp, #12]
 8011178:	1d19      	adds	r1, r3, #4
 801117a:	681b      	ldr	r3, [r3, #0]
 801117c:	9103      	str	r1, [sp, #12]
 801117e:	2b00      	cmp	r3, #0
 8011180:	bfbb      	ittet	lt
 8011182:	425b      	neglt	r3, r3
 8011184:	f042 0202 	orrlt.w	r2, r2, #2
 8011188:	9307      	strge	r3, [sp, #28]
 801118a:	9307      	strlt	r3, [sp, #28]
 801118c:	bfb8      	it	lt
 801118e:	9204      	strlt	r2, [sp, #16]
 8011190:	7823      	ldrb	r3, [r4, #0]
 8011192:	2b2e      	cmp	r3, #46	@ 0x2e
 8011194:	d10a      	bne.n	80111ac <_svfiprintf_r+0x130>
 8011196:	7863      	ldrb	r3, [r4, #1]
 8011198:	2b2a      	cmp	r3, #42	@ 0x2a
 801119a:	d132      	bne.n	8011202 <_svfiprintf_r+0x186>
 801119c:	9b03      	ldr	r3, [sp, #12]
 801119e:	1d1a      	adds	r2, r3, #4
 80111a0:	681b      	ldr	r3, [r3, #0]
 80111a2:	9203      	str	r2, [sp, #12]
 80111a4:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80111a8:	3402      	adds	r4, #2
 80111aa:	9305      	str	r3, [sp, #20]
 80111ac:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8011270 <_svfiprintf_r+0x1f4>
 80111b0:	7821      	ldrb	r1, [r4, #0]
 80111b2:	2203      	movs	r2, #3
 80111b4:	4650      	mov	r0, sl
 80111b6:	f7ef f813 	bl	80001e0 <memchr>
 80111ba:	b138      	cbz	r0, 80111cc <_svfiprintf_r+0x150>
 80111bc:	9b04      	ldr	r3, [sp, #16]
 80111be:	eba0 000a 	sub.w	r0, r0, sl
 80111c2:	2240      	movs	r2, #64	@ 0x40
 80111c4:	4082      	lsls	r2, r0
 80111c6:	4313      	orrs	r3, r2
 80111c8:	3401      	adds	r4, #1
 80111ca:	9304      	str	r3, [sp, #16]
 80111cc:	f814 1b01 	ldrb.w	r1, [r4], #1
 80111d0:	4824      	ldr	r0, [pc, #144]	@ (8011264 <_svfiprintf_r+0x1e8>)
 80111d2:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80111d6:	2206      	movs	r2, #6
 80111d8:	f7ef f802 	bl	80001e0 <memchr>
 80111dc:	2800      	cmp	r0, #0
 80111de:	d036      	beq.n	801124e <_svfiprintf_r+0x1d2>
 80111e0:	4b21      	ldr	r3, [pc, #132]	@ (8011268 <_svfiprintf_r+0x1ec>)
 80111e2:	bb1b      	cbnz	r3, 801122c <_svfiprintf_r+0x1b0>
 80111e4:	9b03      	ldr	r3, [sp, #12]
 80111e6:	3307      	adds	r3, #7
 80111e8:	f023 0307 	bic.w	r3, r3, #7
 80111ec:	3308      	adds	r3, #8
 80111ee:	9303      	str	r3, [sp, #12]
 80111f0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80111f2:	4433      	add	r3, r6
 80111f4:	9309      	str	r3, [sp, #36]	@ 0x24
 80111f6:	e76a      	b.n	80110ce <_svfiprintf_r+0x52>
 80111f8:	fb0c 3202 	mla	r2, ip, r2, r3
 80111fc:	460c      	mov	r4, r1
 80111fe:	2001      	movs	r0, #1
 8011200:	e7a8      	b.n	8011154 <_svfiprintf_r+0xd8>
 8011202:	2300      	movs	r3, #0
 8011204:	3401      	adds	r4, #1
 8011206:	9305      	str	r3, [sp, #20]
 8011208:	4619      	mov	r1, r3
 801120a:	f04f 0c0a 	mov.w	ip, #10
 801120e:	4620      	mov	r0, r4
 8011210:	f810 2b01 	ldrb.w	r2, [r0], #1
 8011214:	3a30      	subs	r2, #48	@ 0x30
 8011216:	2a09      	cmp	r2, #9
 8011218:	d903      	bls.n	8011222 <_svfiprintf_r+0x1a6>
 801121a:	2b00      	cmp	r3, #0
 801121c:	d0c6      	beq.n	80111ac <_svfiprintf_r+0x130>
 801121e:	9105      	str	r1, [sp, #20]
 8011220:	e7c4      	b.n	80111ac <_svfiprintf_r+0x130>
 8011222:	fb0c 2101 	mla	r1, ip, r1, r2
 8011226:	4604      	mov	r4, r0
 8011228:	2301      	movs	r3, #1
 801122a:	e7f0      	b.n	801120e <_svfiprintf_r+0x192>
 801122c:	ab03      	add	r3, sp, #12
 801122e:	9300      	str	r3, [sp, #0]
 8011230:	462a      	mov	r2, r5
 8011232:	4b0e      	ldr	r3, [pc, #56]	@ (801126c <_svfiprintf_r+0x1f0>)
 8011234:	a904      	add	r1, sp, #16
 8011236:	4638      	mov	r0, r7
 8011238:	f3af 8000 	nop.w
 801123c:	1c42      	adds	r2, r0, #1
 801123e:	4606      	mov	r6, r0
 8011240:	d1d6      	bne.n	80111f0 <_svfiprintf_r+0x174>
 8011242:	89ab      	ldrh	r3, [r5, #12]
 8011244:	065b      	lsls	r3, r3, #25
 8011246:	f53f af2d 	bmi.w	80110a4 <_svfiprintf_r+0x28>
 801124a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801124c:	e72c      	b.n	80110a8 <_svfiprintf_r+0x2c>
 801124e:	ab03      	add	r3, sp, #12
 8011250:	9300      	str	r3, [sp, #0]
 8011252:	462a      	mov	r2, r5
 8011254:	4b05      	ldr	r3, [pc, #20]	@ (801126c <_svfiprintf_r+0x1f0>)
 8011256:	a904      	add	r1, sp, #16
 8011258:	4638      	mov	r0, r7
 801125a:	f000 fa49 	bl	80116f0 <_printf_i>
 801125e:	e7ed      	b.n	801123c <_svfiprintf_r+0x1c0>
 8011260:	08012362 	.word	0x08012362
 8011264:	0801236c 	.word	0x0801236c
 8011268:	00000000 	.word	0x00000000
 801126c:	08010fc5 	.word	0x08010fc5
 8011270:	08012368 	.word	0x08012368

08011274 <_sungetc_r>:
 8011274:	b538      	push	{r3, r4, r5, lr}
 8011276:	1c4b      	adds	r3, r1, #1
 8011278:	4614      	mov	r4, r2
 801127a:	d103      	bne.n	8011284 <_sungetc_r+0x10>
 801127c:	f04f 35ff 	mov.w	r5, #4294967295
 8011280:	4628      	mov	r0, r5
 8011282:	bd38      	pop	{r3, r4, r5, pc}
 8011284:	8993      	ldrh	r3, [r2, #12]
 8011286:	f023 0320 	bic.w	r3, r3, #32
 801128a:	8193      	strh	r3, [r2, #12]
 801128c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 801128e:	6852      	ldr	r2, [r2, #4]
 8011290:	b2cd      	uxtb	r5, r1
 8011292:	b18b      	cbz	r3, 80112b8 <_sungetc_r+0x44>
 8011294:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8011296:	4293      	cmp	r3, r2
 8011298:	dd08      	ble.n	80112ac <_sungetc_r+0x38>
 801129a:	6823      	ldr	r3, [r4, #0]
 801129c:	1e5a      	subs	r2, r3, #1
 801129e:	6022      	str	r2, [r4, #0]
 80112a0:	f803 5c01 	strb.w	r5, [r3, #-1]
 80112a4:	6863      	ldr	r3, [r4, #4]
 80112a6:	3301      	adds	r3, #1
 80112a8:	6063      	str	r3, [r4, #4]
 80112aa:	e7e9      	b.n	8011280 <_sungetc_r+0xc>
 80112ac:	4621      	mov	r1, r4
 80112ae:	f000 fcc4 	bl	8011c3a <__submore>
 80112b2:	2800      	cmp	r0, #0
 80112b4:	d0f1      	beq.n	801129a <_sungetc_r+0x26>
 80112b6:	e7e1      	b.n	801127c <_sungetc_r+0x8>
 80112b8:	6921      	ldr	r1, [r4, #16]
 80112ba:	6823      	ldr	r3, [r4, #0]
 80112bc:	b151      	cbz	r1, 80112d4 <_sungetc_r+0x60>
 80112be:	4299      	cmp	r1, r3
 80112c0:	d208      	bcs.n	80112d4 <_sungetc_r+0x60>
 80112c2:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 80112c6:	42a9      	cmp	r1, r5
 80112c8:	d104      	bne.n	80112d4 <_sungetc_r+0x60>
 80112ca:	3b01      	subs	r3, #1
 80112cc:	3201      	adds	r2, #1
 80112ce:	6023      	str	r3, [r4, #0]
 80112d0:	6062      	str	r2, [r4, #4]
 80112d2:	e7d5      	b.n	8011280 <_sungetc_r+0xc>
 80112d4:	e9c4 320f 	strd	r3, r2, [r4, #60]	@ 0x3c
 80112d8:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80112dc:	6363      	str	r3, [r4, #52]	@ 0x34
 80112de:	2303      	movs	r3, #3
 80112e0:	63a3      	str	r3, [r4, #56]	@ 0x38
 80112e2:	4623      	mov	r3, r4
 80112e4:	f803 5f46 	strb.w	r5, [r3, #70]!
 80112e8:	6023      	str	r3, [r4, #0]
 80112ea:	2301      	movs	r3, #1
 80112ec:	e7dc      	b.n	80112a8 <_sungetc_r+0x34>

080112ee <__ssrefill_r>:
 80112ee:	b510      	push	{r4, lr}
 80112f0:	460c      	mov	r4, r1
 80112f2:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 80112f4:	b169      	cbz	r1, 8011312 <__ssrefill_r+0x24>
 80112f6:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80112fa:	4299      	cmp	r1, r3
 80112fc:	d001      	beq.n	8011302 <__ssrefill_r+0x14>
 80112fe:	f7ff fd69 	bl	8010dd4 <_free_r>
 8011302:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8011304:	6063      	str	r3, [r4, #4]
 8011306:	2000      	movs	r0, #0
 8011308:	6360      	str	r0, [r4, #52]	@ 0x34
 801130a:	b113      	cbz	r3, 8011312 <__ssrefill_r+0x24>
 801130c:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 801130e:	6023      	str	r3, [r4, #0]
 8011310:	bd10      	pop	{r4, pc}
 8011312:	6923      	ldr	r3, [r4, #16]
 8011314:	6023      	str	r3, [r4, #0]
 8011316:	2300      	movs	r3, #0
 8011318:	6063      	str	r3, [r4, #4]
 801131a:	89a3      	ldrh	r3, [r4, #12]
 801131c:	f043 0320 	orr.w	r3, r3, #32
 8011320:	81a3      	strh	r3, [r4, #12]
 8011322:	f04f 30ff 	mov.w	r0, #4294967295
 8011326:	e7f3      	b.n	8011310 <__ssrefill_r+0x22>

08011328 <__ssvfiscanf_r>:
 8011328:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801132c:	460c      	mov	r4, r1
 801132e:	f5ad 7d23 	sub.w	sp, sp, #652	@ 0x28c
 8011332:	2100      	movs	r1, #0
 8011334:	e9cd 1144 	strd	r1, r1, [sp, #272]	@ 0x110
 8011338:	49a6      	ldr	r1, [pc, #664]	@ (80115d4 <__ssvfiscanf_r+0x2ac>)
 801133a:	91a0      	str	r1, [sp, #640]	@ 0x280
 801133c:	f10d 0804 	add.w	r8, sp, #4
 8011340:	49a5      	ldr	r1, [pc, #660]	@ (80115d8 <__ssvfiscanf_r+0x2b0>)
 8011342:	4fa6      	ldr	r7, [pc, #664]	@ (80115dc <__ssvfiscanf_r+0x2b4>)
 8011344:	f8cd 8118 	str.w	r8, [sp, #280]	@ 0x118
 8011348:	4606      	mov	r6, r0
 801134a:	91a1      	str	r1, [sp, #644]	@ 0x284
 801134c:	9300      	str	r3, [sp, #0]
 801134e:	f892 9000 	ldrb.w	r9, [r2]
 8011352:	f1b9 0f00 	cmp.w	r9, #0
 8011356:	f000 8158 	beq.w	801160a <__ssvfiscanf_r+0x2e2>
 801135a:	f817 3009 	ldrb.w	r3, [r7, r9]
 801135e:	f013 0308 	ands.w	r3, r3, #8
 8011362:	f102 0501 	add.w	r5, r2, #1
 8011366:	d019      	beq.n	801139c <__ssvfiscanf_r+0x74>
 8011368:	6863      	ldr	r3, [r4, #4]
 801136a:	2b00      	cmp	r3, #0
 801136c:	dd0f      	ble.n	801138e <__ssvfiscanf_r+0x66>
 801136e:	6823      	ldr	r3, [r4, #0]
 8011370:	781a      	ldrb	r2, [r3, #0]
 8011372:	5cba      	ldrb	r2, [r7, r2]
 8011374:	0712      	lsls	r2, r2, #28
 8011376:	d401      	bmi.n	801137c <__ssvfiscanf_r+0x54>
 8011378:	462a      	mov	r2, r5
 801137a:	e7e8      	b.n	801134e <__ssvfiscanf_r+0x26>
 801137c:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 801137e:	3201      	adds	r2, #1
 8011380:	9245      	str	r2, [sp, #276]	@ 0x114
 8011382:	6862      	ldr	r2, [r4, #4]
 8011384:	3301      	adds	r3, #1
 8011386:	3a01      	subs	r2, #1
 8011388:	6062      	str	r2, [r4, #4]
 801138a:	6023      	str	r3, [r4, #0]
 801138c:	e7ec      	b.n	8011368 <__ssvfiscanf_r+0x40>
 801138e:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 8011390:	4621      	mov	r1, r4
 8011392:	4630      	mov	r0, r6
 8011394:	4798      	blx	r3
 8011396:	2800      	cmp	r0, #0
 8011398:	d0e9      	beq.n	801136e <__ssvfiscanf_r+0x46>
 801139a:	e7ed      	b.n	8011378 <__ssvfiscanf_r+0x50>
 801139c:	f1b9 0f25 	cmp.w	r9, #37	@ 0x25
 80113a0:	f040 8085 	bne.w	80114ae <__ssvfiscanf_r+0x186>
 80113a4:	9341      	str	r3, [sp, #260]	@ 0x104
 80113a6:	9343      	str	r3, [sp, #268]	@ 0x10c
 80113a8:	7853      	ldrb	r3, [r2, #1]
 80113aa:	2b2a      	cmp	r3, #42	@ 0x2a
 80113ac:	bf02      	ittt	eq
 80113ae:	2310      	moveq	r3, #16
 80113b0:	1c95      	addeq	r5, r2, #2
 80113b2:	9341      	streq	r3, [sp, #260]	@ 0x104
 80113b4:	220a      	movs	r2, #10
 80113b6:	46aa      	mov	sl, r5
 80113b8:	f81a 1b01 	ldrb.w	r1, [sl], #1
 80113bc:	f1a1 0330 	sub.w	r3, r1, #48	@ 0x30
 80113c0:	2b09      	cmp	r3, #9
 80113c2:	d91e      	bls.n	8011402 <__ssvfiscanf_r+0xda>
 80113c4:	f8df b218 	ldr.w	fp, [pc, #536]	@ 80115e0 <__ssvfiscanf_r+0x2b8>
 80113c8:	2203      	movs	r2, #3
 80113ca:	4658      	mov	r0, fp
 80113cc:	f7ee ff08 	bl	80001e0 <memchr>
 80113d0:	b138      	cbz	r0, 80113e2 <__ssvfiscanf_r+0xba>
 80113d2:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 80113d4:	eba0 000b 	sub.w	r0, r0, fp
 80113d8:	2301      	movs	r3, #1
 80113da:	4083      	lsls	r3, r0
 80113dc:	4313      	orrs	r3, r2
 80113de:	9341      	str	r3, [sp, #260]	@ 0x104
 80113e0:	4655      	mov	r5, sl
 80113e2:	f815 3b01 	ldrb.w	r3, [r5], #1
 80113e6:	2b78      	cmp	r3, #120	@ 0x78
 80113e8:	d806      	bhi.n	80113f8 <__ssvfiscanf_r+0xd0>
 80113ea:	2b57      	cmp	r3, #87	@ 0x57
 80113ec:	d810      	bhi.n	8011410 <__ssvfiscanf_r+0xe8>
 80113ee:	2b25      	cmp	r3, #37	@ 0x25
 80113f0:	d05d      	beq.n	80114ae <__ssvfiscanf_r+0x186>
 80113f2:	d857      	bhi.n	80114a4 <__ssvfiscanf_r+0x17c>
 80113f4:	2b00      	cmp	r3, #0
 80113f6:	d075      	beq.n	80114e4 <__ssvfiscanf_r+0x1bc>
 80113f8:	2303      	movs	r3, #3
 80113fa:	9347      	str	r3, [sp, #284]	@ 0x11c
 80113fc:	230a      	movs	r3, #10
 80113fe:	9342      	str	r3, [sp, #264]	@ 0x108
 8011400:	e088      	b.n	8011514 <__ssvfiscanf_r+0x1ec>
 8011402:	9b43      	ldr	r3, [sp, #268]	@ 0x10c
 8011404:	fb02 1103 	mla	r1, r2, r3, r1
 8011408:	3930      	subs	r1, #48	@ 0x30
 801140a:	9143      	str	r1, [sp, #268]	@ 0x10c
 801140c:	4655      	mov	r5, sl
 801140e:	e7d2      	b.n	80113b6 <__ssvfiscanf_r+0x8e>
 8011410:	f1a3 0258 	sub.w	r2, r3, #88	@ 0x58
 8011414:	2a20      	cmp	r2, #32
 8011416:	d8ef      	bhi.n	80113f8 <__ssvfiscanf_r+0xd0>
 8011418:	a101      	add	r1, pc, #4	@ (adr r1, 8011420 <__ssvfiscanf_r+0xf8>)
 801141a:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 801141e:	bf00      	nop
 8011420:	080114f3 	.word	0x080114f3
 8011424:	080113f9 	.word	0x080113f9
 8011428:	080113f9 	.word	0x080113f9
 801142c:	0801154d 	.word	0x0801154d
 8011430:	080113f9 	.word	0x080113f9
 8011434:	080113f9 	.word	0x080113f9
 8011438:	080113f9 	.word	0x080113f9
 801143c:	080113f9 	.word	0x080113f9
 8011440:	080113f9 	.word	0x080113f9
 8011444:	080113f9 	.word	0x080113f9
 8011448:	080113f9 	.word	0x080113f9
 801144c:	08011563 	.word	0x08011563
 8011450:	08011549 	.word	0x08011549
 8011454:	080114ab 	.word	0x080114ab
 8011458:	080114ab 	.word	0x080114ab
 801145c:	080114ab 	.word	0x080114ab
 8011460:	080113f9 	.word	0x080113f9
 8011464:	08011505 	.word	0x08011505
 8011468:	080113f9 	.word	0x080113f9
 801146c:	080113f9 	.word	0x080113f9
 8011470:	080113f9 	.word	0x080113f9
 8011474:	080113f9 	.word	0x080113f9
 8011478:	08011573 	.word	0x08011573
 801147c:	0801150d 	.word	0x0801150d
 8011480:	080114eb 	.word	0x080114eb
 8011484:	080113f9 	.word	0x080113f9
 8011488:	080113f9 	.word	0x080113f9
 801148c:	0801156f 	.word	0x0801156f
 8011490:	080113f9 	.word	0x080113f9
 8011494:	08011549 	.word	0x08011549
 8011498:	080113f9 	.word	0x080113f9
 801149c:	080113f9 	.word	0x080113f9
 80114a0:	080114f3 	.word	0x080114f3
 80114a4:	3b45      	subs	r3, #69	@ 0x45
 80114a6:	2b02      	cmp	r3, #2
 80114a8:	d8a6      	bhi.n	80113f8 <__ssvfiscanf_r+0xd0>
 80114aa:	2305      	movs	r3, #5
 80114ac:	e031      	b.n	8011512 <__ssvfiscanf_r+0x1ea>
 80114ae:	6863      	ldr	r3, [r4, #4]
 80114b0:	2b00      	cmp	r3, #0
 80114b2:	dd0d      	ble.n	80114d0 <__ssvfiscanf_r+0x1a8>
 80114b4:	6823      	ldr	r3, [r4, #0]
 80114b6:	781a      	ldrb	r2, [r3, #0]
 80114b8:	454a      	cmp	r2, r9
 80114ba:	f040 80a6 	bne.w	801160a <__ssvfiscanf_r+0x2e2>
 80114be:	3301      	adds	r3, #1
 80114c0:	6862      	ldr	r2, [r4, #4]
 80114c2:	6023      	str	r3, [r4, #0]
 80114c4:	9b45      	ldr	r3, [sp, #276]	@ 0x114
 80114c6:	3a01      	subs	r2, #1
 80114c8:	3301      	adds	r3, #1
 80114ca:	6062      	str	r2, [r4, #4]
 80114cc:	9345      	str	r3, [sp, #276]	@ 0x114
 80114ce:	e753      	b.n	8011378 <__ssvfiscanf_r+0x50>
 80114d0:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 80114d2:	4621      	mov	r1, r4
 80114d4:	4630      	mov	r0, r6
 80114d6:	4798      	blx	r3
 80114d8:	2800      	cmp	r0, #0
 80114da:	d0eb      	beq.n	80114b4 <__ssvfiscanf_r+0x18c>
 80114dc:	9844      	ldr	r0, [sp, #272]	@ 0x110
 80114de:	2800      	cmp	r0, #0
 80114e0:	f040 808b 	bne.w	80115fa <__ssvfiscanf_r+0x2d2>
 80114e4:	f04f 30ff 	mov.w	r0, #4294967295
 80114e8:	e08b      	b.n	8011602 <__ssvfiscanf_r+0x2da>
 80114ea:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 80114ec:	f042 0220 	orr.w	r2, r2, #32
 80114f0:	9241      	str	r2, [sp, #260]	@ 0x104
 80114f2:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 80114f4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80114f8:	9241      	str	r2, [sp, #260]	@ 0x104
 80114fa:	2210      	movs	r2, #16
 80114fc:	2b6e      	cmp	r3, #110	@ 0x6e
 80114fe:	9242      	str	r2, [sp, #264]	@ 0x108
 8011500:	d902      	bls.n	8011508 <__ssvfiscanf_r+0x1e0>
 8011502:	e005      	b.n	8011510 <__ssvfiscanf_r+0x1e8>
 8011504:	2300      	movs	r3, #0
 8011506:	9342      	str	r3, [sp, #264]	@ 0x108
 8011508:	2303      	movs	r3, #3
 801150a:	e002      	b.n	8011512 <__ssvfiscanf_r+0x1ea>
 801150c:	2308      	movs	r3, #8
 801150e:	9342      	str	r3, [sp, #264]	@ 0x108
 8011510:	2304      	movs	r3, #4
 8011512:	9347      	str	r3, [sp, #284]	@ 0x11c
 8011514:	6863      	ldr	r3, [r4, #4]
 8011516:	2b00      	cmp	r3, #0
 8011518:	dd39      	ble.n	801158e <__ssvfiscanf_r+0x266>
 801151a:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 801151c:	0659      	lsls	r1, r3, #25
 801151e:	d404      	bmi.n	801152a <__ssvfiscanf_r+0x202>
 8011520:	6823      	ldr	r3, [r4, #0]
 8011522:	781a      	ldrb	r2, [r3, #0]
 8011524:	5cba      	ldrb	r2, [r7, r2]
 8011526:	0712      	lsls	r2, r2, #28
 8011528:	d438      	bmi.n	801159c <__ssvfiscanf_r+0x274>
 801152a:	9b47      	ldr	r3, [sp, #284]	@ 0x11c
 801152c:	2b02      	cmp	r3, #2
 801152e:	dc47      	bgt.n	80115c0 <__ssvfiscanf_r+0x298>
 8011530:	466b      	mov	r3, sp
 8011532:	4622      	mov	r2, r4
 8011534:	a941      	add	r1, sp, #260	@ 0x104
 8011536:	4630      	mov	r0, r6
 8011538:	f000 f9f8 	bl	801192c <_scanf_chars>
 801153c:	2801      	cmp	r0, #1
 801153e:	d064      	beq.n	801160a <__ssvfiscanf_r+0x2e2>
 8011540:	2802      	cmp	r0, #2
 8011542:	f47f af19 	bne.w	8011378 <__ssvfiscanf_r+0x50>
 8011546:	e7c9      	b.n	80114dc <__ssvfiscanf_r+0x1b4>
 8011548:	220a      	movs	r2, #10
 801154a:	e7d7      	b.n	80114fc <__ssvfiscanf_r+0x1d4>
 801154c:	4629      	mov	r1, r5
 801154e:	4640      	mov	r0, r8
 8011550:	f000 fb3a 	bl	8011bc8 <__sccl>
 8011554:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 8011556:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801155a:	9341      	str	r3, [sp, #260]	@ 0x104
 801155c:	4605      	mov	r5, r0
 801155e:	2301      	movs	r3, #1
 8011560:	e7d7      	b.n	8011512 <__ssvfiscanf_r+0x1ea>
 8011562:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 8011564:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8011568:	9341      	str	r3, [sp, #260]	@ 0x104
 801156a:	2300      	movs	r3, #0
 801156c:	e7d1      	b.n	8011512 <__ssvfiscanf_r+0x1ea>
 801156e:	2302      	movs	r3, #2
 8011570:	e7cf      	b.n	8011512 <__ssvfiscanf_r+0x1ea>
 8011572:	9841      	ldr	r0, [sp, #260]	@ 0x104
 8011574:	06c3      	lsls	r3, r0, #27
 8011576:	f53f aeff 	bmi.w	8011378 <__ssvfiscanf_r+0x50>
 801157a:	9b00      	ldr	r3, [sp, #0]
 801157c:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 801157e:	1d19      	adds	r1, r3, #4
 8011580:	9100      	str	r1, [sp, #0]
 8011582:	681b      	ldr	r3, [r3, #0]
 8011584:	07c0      	lsls	r0, r0, #31
 8011586:	bf4c      	ite	mi
 8011588:	801a      	strhmi	r2, [r3, #0]
 801158a:	601a      	strpl	r2, [r3, #0]
 801158c:	e6f4      	b.n	8011378 <__ssvfiscanf_r+0x50>
 801158e:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 8011590:	4621      	mov	r1, r4
 8011592:	4630      	mov	r0, r6
 8011594:	4798      	blx	r3
 8011596:	2800      	cmp	r0, #0
 8011598:	d0bf      	beq.n	801151a <__ssvfiscanf_r+0x1f2>
 801159a:	e79f      	b.n	80114dc <__ssvfiscanf_r+0x1b4>
 801159c:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 801159e:	3201      	adds	r2, #1
 80115a0:	9245      	str	r2, [sp, #276]	@ 0x114
 80115a2:	6862      	ldr	r2, [r4, #4]
 80115a4:	3a01      	subs	r2, #1
 80115a6:	2a00      	cmp	r2, #0
 80115a8:	6062      	str	r2, [r4, #4]
 80115aa:	dd02      	ble.n	80115b2 <__ssvfiscanf_r+0x28a>
 80115ac:	3301      	adds	r3, #1
 80115ae:	6023      	str	r3, [r4, #0]
 80115b0:	e7b6      	b.n	8011520 <__ssvfiscanf_r+0x1f8>
 80115b2:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 80115b4:	4621      	mov	r1, r4
 80115b6:	4630      	mov	r0, r6
 80115b8:	4798      	blx	r3
 80115ba:	2800      	cmp	r0, #0
 80115bc:	d0b0      	beq.n	8011520 <__ssvfiscanf_r+0x1f8>
 80115be:	e78d      	b.n	80114dc <__ssvfiscanf_r+0x1b4>
 80115c0:	2b04      	cmp	r3, #4
 80115c2:	dc0f      	bgt.n	80115e4 <__ssvfiscanf_r+0x2bc>
 80115c4:	466b      	mov	r3, sp
 80115c6:	4622      	mov	r2, r4
 80115c8:	a941      	add	r1, sp, #260	@ 0x104
 80115ca:	4630      	mov	r0, r6
 80115cc:	f000 fa08 	bl	80119e0 <_scanf_i>
 80115d0:	e7b4      	b.n	801153c <__ssvfiscanf_r+0x214>
 80115d2:	bf00      	nop
 80115d4:	08011275 	.word	0x08011275
 80115d8:	080112ef 	.word	0x080112ef
 80115dc:	080123b1 	.word	0x080123b1
 80115e0:	08012368 	.word	0x08012368
 80115e4:	4b0a      	ldr	r3, [pc, #40]	@ (8011610 <__ssvfiscanf_r+0x2e8>)
 80115e6:	2b00      	cmp	r3, #0
 80115e8:	f43f aec6 	beq.w	8011378 <__ssvfiscanf_r+0x50>
 80115ec:	466b      	mov	r3, sp
 80115ee:	4622      	mov	r2, r4
 80115f0:	a941      	add	r1, sp, #260	@ 0x104
 80115f2:	4630      	mov	r0, r6
 80115f4:	f3af 8000 	nop.w
 80115f8:	e7a0      	b.n	801153c <__ssvfiscanf_r+0x214>
 80115fa:	89a3      	ldrh	r3, [r4, #12]
 80115fc:	065b      	lsls	r3, r3, #25
 80115fe:	f53f af71 	bmi.w	80114e4 <__ssvfiscanf_r+0x1bc>
 8011602:	f50d 7d23 	add.w	sp, sp, #652	@ 0x28c
 8011606:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801160a:	9844      	ldr	r0, [sp, #272]	@ 0x110
 801160c:	e7f9      	b.n	8011602 <__ssvfiscanf_r+0x2da>
 801160e:	bf00      	nop
 8011610:	00000000 	.word	0x00000000

08011614 <_printf_common>:
 8011614:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011618:	4616      	mov	r6, r2
 801161a:	4698      	mov	r8, r3
 801161c:	688a      	ldr	r2, [r1, #8]
 801161e:	690b      	ldr	r3, [r1, #16]
 8011620:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8011624:	4293      	cmp	r3, r2
 8011626:	bfb8      	it	lt
 8011628:	4613      	movlt	r3, r2
 801162a:	6033      	str	r3, [r6, #0]
 801162c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8011630:	4607      	mov	r7, r0
 8011632:	460c      	mov	r4, r1
 8011634:	b10a      	cbz	r2, 801163a <_printf_common+0x26>
 8011636:	3301      	adds	r3, #1
 8011638:	6033      	str	r3, [r6, #0]
 801163a:	6823      	ldr	r3, [r4, #0]
 801163c:	0699      	lsls	r1, r3, #26
 801163e:	bf42      	ittt	mi
 8011640:	6833      	ldrmi	r3, [r6, #0]
 8011642:	3302      	addmi	r3, #2
 8011644:	6033      	strmi	r3, [r6, #0]
 8011646:	6825      	ldr	r5, [r4, #0]
 8011648:	f015 0506 	ands.w	r5, r5, #6
 801164c:	d106      	bne.n	801165c <_printf_common+0x48>
 801164e:	f104 0a19 	add.w	sl, r4, #25
 8011652:	68e3      	ldr	r3, [r4, #12]
 8011654:	6832      	ldr	r2, [r6, #0]
 8011656:	1a9b      	subs	r3, r3, r2
 8011658:	42ab      	cmp	r3, r5
 801165a:	dc26      	bgt.n	80116aa <_printf_common+0x96>
 801165c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8011660:	6822      	ldr	r2, [r4, #0]
 8011662:	3b00      	subs	r3, #0
 8011664:	bf18      	it	ne
 8011666:	2301      	movne	r3, #1
 8011668:	0692      	lsls	r2, r2, #26
 801166a:	d42b      	bmi.n	80116c4 <_printf_common+0xb0>
 801166c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8011670:	4641      	mov	r1, r8
 8011672:	4638      	mov	r0, r7
 8011674:	47c8      	blx	r9
 8011676:	3001      	adds	r0, #1
 8011678:	d01e      	beq.n	80116b8 <_printf_common+0xa4>
 801167a:	6823      	ldr	r3, [r4, #0]
 801167c:	6922      	ldr	r2, [r4, #16]
 801167e:	f003 0306 	and.w	r3, r3, #6
 8011682:	2b04      	cmp	r3, #4
 8011684:	bf02      	ittt	eq
 8011686:	68e5      	ldreq	r5, [r4, #12]
 8011688:	6833      	ldreq	r3, [r6, #0]
 801168a:	1aed      	subeq	r5, r5, r3
 801168c:	68a3      	ldr	r3, [r4, #8]
 801168e:	bf0c      	ite	eq
 8011690:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8011694:	2500      	movne	r5, #0
 8011696:	4293      	cmp	r3, r2
 8011698:	bfc4      	itt	gt
 801169a:	1a9b      	subgt	r3, r3, r2
 801169c:	18ed      	addgt	r5, r5, r3
 801169e:	2600      	movs	r6, #0
 80116a0:	341a      	adds	r4, #26
 80116a2:	42b5      	cmp	r5, r6
 80116a4:	d11a      	bne.n	80116dc <_printf_common+0xc8>
 80116a6:	2000      	movs	r0, #0
 80116a8:	e008      	b.n	80116bc <_printf_common+0xa8>
 80116aa:	2301      	movs	r3, #1
 80116ac:	4652      	mov	r2, sl
 80116ae:	4641      	mov	r1, r8
 80116b0:	4638      	mov	r0, r7
 80116b2:	47c8      	blx	r9
 80116b4:	3001      	adds	r0, #1
 80116b6:	d103      	bne.n	80116c0 <_printf_common+0xac>
 80116b8:	f04f 30ff 	mov.w	r0, #4294967295
 80116bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80116c0:	3501      	adds	r5, #1
 80116c2:	e7c6      	b.n	8011652 <_printf_common+0x3e>
 80116c4:	18e1      	adds	r1, r4, r3
 80116c6:	1c5a      	adds	r2, r3, #1
 80116c8:	2030      	movs	r0, #48	@ 0x30
 80116ca:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80116ce:	4422      	add	r2, r4
 80116d0:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80116d4:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80116d8:	3302      	adds	r3, #2
 80116da:	e7c7      	b.n	801166c <_printf_common+0x58>
 80116dc:	2301      	movs	r3, #1
 80116de:	4622      	mov	r2, r4
 80116e0:	4641      	mov	r1, r8
 80116e2:	4638      	mov	r0, r7
 80116e4:	47c8      	blx	r9
 80116e6:	3001      	adds	r0, #1
 80116e8:	d0e6      	beq.n	80116b8 <_printf_common+0xa4>
 80116ea:	3601      	adds	r6, #1
 80116ec:	e7d9      	b.n	80116a2 <_printf_common+0x8e>
	...

080116f0 <_printf_i>:
 80116f0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80116f4:	7e0f      	ldrb	r7, [r1, #24]
 80116f6:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80116f8:	2f78      	cmp	r7, #120	@ 0x78
 80116fa:	4691      	mov	r9, r2
 80116fc:	4680      	mov	r8, r0
 80116fe:	460c      	mov	r4, r1
 8011700:	469a      	mov	sl, r3
 8011702:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8011706:	d807      	bhi.n	8011718 <_printf_i+0x28>
 8011708:	2f62      	cmp	r7, #98	@ 0x62
 801170a:	d80a      	bhi.n	8011722 <_printf_i+0x32>
 801170c:	2f00      	cmp	r7, #0
 801170e:	f000 80d1 	beq.w	80118b4 <_printf_i+0x1c4>
 8011712:	2f58      	cmp	r7, #88	@ 0x58
 8011714:	f000 80b8 	beq.w	8011888 <_printf_i+0x198>
 8011718:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 801171c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8011720:	e03a      	b.n	8011798 <_printf_i+0xa8>
 8011722:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8011726:	2b15      	cmp	r3, #21
 8011728:	d8f6      	bhi.n	8011718 <_printf_i+0x28>
 801172a:	a101      	add	r1, pc, #4	@ (adr r1, 8011730 <_printf_i+0x40>)
 801172c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8011730:	08011789 	.word	0x08011789
 8011734:	0801179d 	.word	0x0801179d
 8011738:	08011719 	.word	0x08011719
 801173c:	08011719 	.word	0x08011719
 8011740:	08011719 	.word	0x08011719
 8011744:	08011719 	.word	0x08011719
 8011748:	0801179d 	.word	0x0801179d
 801174c:	08011719 	.word	0x08011719
 8011750:	08011719 	.word	0x08011719
 8011754:	08011719 	.word	0x08011719
 8011758:	08011719 	.word	0x08011719
 801175c:	0801189b 	.word	0x0801189b
 8011760:	080117c7 	.word	0x080117c7
 8011764:	08011855 	.word	0x08011855
 8011768:	08011719 	.word	0x08011719
 801176c:	08011719 	.word	0x08011719
 8011770:	080118bd 	.word	0x080118bd
 8011774:	08011719 	.word	0x08011719
 8011778:	080117c7 	.word	0x080117c7
 801177c:	08011719 	.word	0x08011719
 8011780:	08011719 	.word	0x08011719
 8011784:	0801185d 	.word	0x0801185d
 8011788:	6833      	ldr	r3, [r6, #0]
 801178a:	1d1a      	adds	r2, r3, #4
 801178c:	681b      	ldr	r3, [r3, #0]
 801178e:	6032      	str	r2, [r6, #0]
 8011790:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8011794:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8011798:	2301      	movs	r3, #1
 801179a:	e09c      	b.n	80118d6 <_printf_i+0x1e6>
 801179c:	6833      	ldr	r3, [r6, #0]
 801179e:	6820      	ldr	r0, [r4, #0]
 80117a0:	1d19      	adds	r1, r3, #4
 80117a2:	6031      	str	r1, [r6, #0]
 80117a4:	0606      	lsls	r6, r0, #24
 80117a6:	d501      	bpl.n	80117ac <_printf_i+0xbc>
 80117a8:	681d      	ldr	r5, [r3, #0]
 80117aa:	e003      	b.n	80117b4 <_printf_i+0xc4>
 80117ac:	0645      	lsls	r5, r0, #25
 80117ae:	d5fb      	bpl.n	80117a8 <_printf_i+0xb8>
 80117b0:	f9b3 5000 	ldrsh.w	r5, [r3]
 80117b4:	2d00      	cmp	r5, #0
 80117b6:	da03      	bge.n	80117c0 <_printf_i+0xd0>
 80117b8:	232d      	movs	r3, #45	@ 0x2d
 80117ba:	426d      	negs	r5, r5
 80117bc:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80117c0:	4858      	ldr	r0, [pc, #352]	@ (8011924 <_printf_i+0x234>)
 80117c2:	230a      	movs	r3, #10
 80117c4:	e011      	b.n	80117ea <_printf_i+0xfa>
 80117c6:	6821      	ldr	r1, [r4, #0]
 80117c8:	6833      	ldr	r3, [r6, #0]
 80117ca:	0608      	lsls	r0, r1, #24
 80117cc:	f853 5b04 	ldr.w	r5, [r3], #4
 80117d0:	d402      	bmi.n	80117d8 <_printf_i+0xe8>
 80117d2:	0649      	lsls	r1, r1, #25
 80117d4:	bf48      	it	mi
 80117d6:	b2ad      	uxthmi	r5, r5
 80117d8:	2f6f      	cmp	r7, #111	@ 0x6f
 80117da:	4852      	ldr	r0, [pc, #328]	@ (8011924 <_printf_i+0x234>)
 80117dc:	6033      	str	r3, [r6, #0]
 80117de:	bf14      	ite	ne
 80117e0:	230a      	movne	r3, #10
 80117e2:	2308      	moveq	r3, #8
 80117e4:	2100      	movs	r1, #0
 80117e6:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80117ea:	6866      	ldr	r6, [r4, #4]
 80117ec:	60a6      	str	r6, [r4, #8]
 80117ee:	2e00      	cmp	r6, #0
 80117f0:	db05      	blt.n	80117fe <_printf_i+0x10e>
 80117f2:	6821      	ldr	r1, [r4, #0]
 80117f4:	432e      	orrs	r6, r5
 80117f6:	f021 0104 	bic.w	r1, r1, #4
 80117fa:	6021      	str	r1, [r4, #0]
 80117fc:	d04b      	beq.n	8011896 <_printf_i+0x1a6>
 80117fe:	4616      	mov	r6, r2
 8011800:	fbb5 f1f3 	udiv	r1, r5, r3
 8011804:	fb03 5711 	mls	r7, r3, r1, r5
 8011808:	5dc7      	ldrb	r7, [r0, r7]
 801180a:	f806 7d01 	strb.w	r7, [r6, #-1]!
 801180e:	462f      	mov	r7, r5
 8011810:	42bb      	cmp	r3, r7
 8011812:	460d      	mov	r5, r1
 8011814:	d9f4      	bls.n	8011800 <_printf_i+0x110>
 8011816:	2b08      	cmp	r3, #8
 8011818:	d10b      	bne.n	8011832 <_printf_i+0x142>
 801181a:	6823      	ldr	r3, [r4, #0]
 801181c:	07df      	lsls	r7, r3, #31
 801181e:	d508      	bpl.n	8011832 <_printf_i+0x142>
 8011820:	6923      	ldr	r3, [r4, #16]
 8011822:	6861      	ldr	r1, [r4, #4]
 8011824:	4299      	cmp	r1, r3
 8011826:	bfde      	ittt	le
 8011828:	2330      	movle	r3, #48	@ 0x30
 801182a:	f806 3c01 	strble.w	r3, [r6, #-1]
 801182e:	f106 36ff 	addle.w	r6, r6, #4294967295
 8011832:	1b92      	subs	r2, r2, r6
 8011834:	6122      	str	r2, [r4, #16]
 8011836:	f8cd a000 	str.w	sl, [sp]
 801183a:	464b      	mov	r3, r9
 801183c:	aa03      	add	r2, sp, #12
 801183e:	4621      	mov	r1, r4
 8011840:	4640      	mov	r0, r8
 8011842:	f7ff fee7 	bl	8011614 <_printf_common>
 8011846:	3001      	adds	r0, #1
 8011848:	d14a      	bne.n	80118e0 <_printf_i+0x1f0>
 801184a:	f04f 30ff 	mov.w	r0, #4294967295
 801184e:	b004      	add	sp, #16
 8011850:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011854:	6823      	ldr	r3, [r4, #0]
 8011856:	f043 0320 	orr.w	r3, r3, #32
 801185a:	6023      	str	r3, [r4, #0]
 801185c:	4832      	ldr	r0, [pc, #200]	@ (8011928 <_printf_i+0x238>)
 801185e:	2778      	movs	r7, #120	@ 0x78
 8011860:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8011864:	6823      	ldr	r3, [r4, #0]
 8011866:	6831      	ldr	r1, [r6, #0]
 8011868:	061f      	lsls	r7, r3, #24
 801186a:	f851 5b04 	ldr.w	r5, [r1], #4
 801186e:	d402      	bmi.n	8011876 <_printf_i+0x186>
 8011870:	065f      	lsls	r7, r3, #25
 8011872:	bf48      	it	mi
 8011874:	b2ad      	uxthmi	r5, r5
 8011876:	6031      	str	r1, [r6, #0]
 8011878:	07d9      	lsls	r1, r3, #31
 801187a:	bf44      	itt	mi
 801187c:	f043 0320 	orrmi.w	r3, r3, #32
 8011880:	6023      	strmi	r3, [r4, #0]
 8011882:	b11d      	cbz	r5, 801188c <_printf_i+0x19c>
 8011884:	2310      	movs	r3, #16
 8011886:	e7ad      	b.n	80117e4 <_printf_i+0xf4>
 8011888:	4826      	ldr	r0, [pc, #152]	@ (8011924 <_printf_i+0x234>)
 801188a:	e7e9      	b.n	8011860 <_printf_i+0x170>
 801188c:	6823      	ldr	r3, [r4, #0]
 801188e:	f023 0320 	bic.w	r3, r3, #32
 8011892:	6023      	str	r3, [r4, #0]
 8011894:	e7f6      	b.n	8011884 <_printf_i+0x194>
 8011896:	4616      	mov	r6, r2
 8011898:	e7bd      	b.n	8011816 <_printf_i+0x126>
 801189a:	6833      	ldr	r3, [r6, #0]
 801189c:	6825      	ldr	r5, [r4, #0]
 801189e:	6961      	ldr	r1, [r4, #20]
 80118a0:	1d18      	adds	r0, r3, #4
 80118a2:	6030      	str	r0, [r6, #0]
 80118a4:	062e      	lsls	r6, r5, #24
 80118a6:	681b      	ldr	r3, [r3, #0]
 80118a8:	d501      	bpl.n	80118ae <_printf_i+0x1be>
 80118aa:	6019      	str	r1, [r3, #0]
 80118ac:	e002      	b.n	80118b4 <_printf_i+0x1c4>
 80118ae:	0668      	lsls	r0, r5, #25
 80118b0:	d5fb      	bpl.n	80118aa <_printf_i+0x1ba>
 80118b2:	8019      	strh	r1, [r3, #0]
 80118b4:	2300      	movs	r3, #0
 80118b6:	6123      	str	r3, [r4, #16]
 80118b8:	4616      	mov	r6, r2
 80118ba:	e7bc      	b.n	8011836 <_printf_i+0x146>
 80118bc:	6833      	ldr	r3, [r6, #0]
 80118be:	1d1a      	adds	r2, r3, #4
 80118c0:	6032      	str	r2, [r6, #0]
 80118c2:	681e      	ldr	r6, [r3, #0]
 80118c4:	6862      	ldr	r2, [r4, #4]
 80118c6:	2100      	movs	r1, #0
 80118c8:	4630      	mov	r0, r6
 80118ca:	f7ee fc89 	bl	80001e0 <memchr>
 80118ce:	b108      	cbz	r0, 80118d4 <_printf_i+0x1e4>
 80118d0:	1b80      	subs	r0, r0, r6
 80118d2:	6060      	str	r0, [r4, #4]
 80118d4:	6863      	ldr	r3, [r4, #4]
 80118d6:	6123      	str	r3, [r4, #16]
 80118d8:	2300      	movs	r3, #0
 80118da:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80118de:	e7aa      	b.n	8011836 <_printf_i+0x146>
 80118e0:	6923      	ldr	r3, [r4, #16]
 80118e2:	4632      	mov	r2, r6
 80118e4:	4649      	mov	r1, r9
 80118e6:	4640      	mov	r0, r8
 80118e8:	47d0      	blx	sl
 80118ea:	3001      	adds	r0, #1
 80118ec:	d0ad      	beq.n	801184a <_printf_i+0x15a>
 80118ee:	6823      	ldr	r3, [r4, #0]
 80118f0:	079b      	lsls	r3, r3, #30
 80118f2:	d413      	bmi.n	801191c <_printf_i+0x22c>
 80118f4:	68e0      	ldr	r0, [r4, #12]
 80118f6:	9b03      	ldr	r3, [sp, #12]
 80118f8:	4298      	cmp	r0, r3
 80118fa:	bfb8      	it	lt
 80118fc:	4618      	movlt	r0, r3
 80118fe:	e7a6      	b.n	801184e <_printf_i+0x15e>
 8011900:	2301      	movs	r3, #1
 8011902:	4632      	mov	r2, r6
 8011904:	4649      	mov	r1, r9
 8011906:	4640      	mov	r0, r8
 8011908:	47d0      	blx	sl
 801190a:	3001      	adds	r0, #1
 801190c:	d09d      	beq.n	801184a <_printf_i+0x15a>
 801190e:	3501      	adds	r5, #1
 8011910:	68e3      	ldr	r3, [r4, #12]
 8011912:	9903      	ldr	r1, [sp, #12]
 8011914:	1a5b      	subs	r3, r3, r1
 8011916:	42ab      	cmp	r3, r5
 8011918:	dcf2      	bgt.n	8011900 <_printf_i+0x210>
 801191a:	e7eb      	b.n	80118f4 <_printf_i+0x204>
 801191c:	2500      	movs	r5, #0
 801191e:	f104 0619 	add.w	r6, r4, #25
 8011922:	e7f5      	b.n	8011910 <_printf_i+0x220>
 8011924:	08012373 	.word	0x08012373
 8011928:	08012384 	.word	0x08012384

0801192c <_scanf_chars>:
 801192c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011930:	4615      	mov	r5, r2
 8011932:	688a      	ldr	r2, [r1, #8]
 8011934:	4680      	mov	r8, r0
 8011936:	460c      	mov	r4, r1
 8011938:	b932      	cbnz	r2, 8011948 <_scanf_chars+0x1c>
 801193a:	698a      	ldr	r2, [r1, #24]
 801193c:	2a00      	cmp	r2, #0
 801193e:	bf14      	ite	ne
 8011940:	f04f 32ff 	movne.w	r2, #4294967295
 8011944:	2201      	moveq	r2, #1
 8011946:	608a      	str	r2, [r1, #8]
 8011948:	6822      	ldr	r2, [r4, #0]
 801194a:	f8df 9090 	ldr.w	r9, [pc, #144]	@ 80119dc <_scanf_chars+0xb0>
 801194e:	06d1      	lsls	r1, r2, #27
 8011950:	bf5f      	itttt	pl
 8011952:	681a      	ldrpl	r2, [r3, #0]
 8011954:	1d11      	addpl	r1, r2, #4
 8011956:	6019      	strpl	r1, [r3, #0]
 8011958:	6816      	ldrpl	r6, [r2, #0]
 801195a:	2700      	movs	r7, #0
 801195c:	69a0      	ldr	r0, [r4, #24]
 801195e:	b188      	cbz	r0, 8011984 <_scanf_chars+0x58>
 8011960:	2801      	cmp	r0, #1
 8011962:	d107      	bne.n	8011974 <_scanf_chars+0x48>
 8011964:	682b      	ldr	r3, [r5, #0]
 8011966:	781a      	ldrb	r2, [r3, #0]
 8011968:	6963      	ldr	r3, [r4, #20]
 801196a:	5c9b      	ldrb	r3, [r3, r2]
 801196c:	b953      	cbnz	r3, 8011984 <_scanf_chars+0x58>
 801196e:	2f00      	cmp	r7, #0
 8011970:	d031      	beq.n	80119d6 <_scanf_chars+0xaa>
 8011972:	e022      	b.n	80119ba <_scanf_chars+0x8e>
 8011974:	2802      	cmp	r0, #2
 8011976:	d120      	bne.n	80119ba <_scanf_chars+0x8e>
 8011978:	682b      	ldr	r3, [r5, #0]
 801197a:	781b      	ldrb	r3, [r3, #0]
 801197c:	f819 3003 	ldrb.w	r3, [r9, r3]
 8011980:	071b      	lsls	r3, r3, #28
 8011982:	d41a      	bmi.n	80119ba <_scanf_chars+0x8e>
 8011984:	6823      	ldr	r3, [r4, #0]
 8011986:	06da      	lsls	r2, r3, #27
 8011988:	bf5e      	ittt	pl
 801198a:	682b      	ldrpl	r3, [r5, #0]
 801198c:	781b      	ldrbpl	r3, [r3, #0]
 801198e:	f806 3b01 	strbpl.w	r3, [r6], #1
 8011992:	682a      	ldr	r2, [r5, #0]
 8011994:	686b      	ldr	r3, [r5, #4]
 8011996:	3201      	adds	r2, #1
 8011998:	602a      	str	r2, [r5, #0]
 801199a:	68a2      	ldr	r2, [r4, #8]
 801199c:	3b01      	subs	r3, #1
 801199e:	3a01      	subs	r2, #1
 80119a0:	606b      	str	r3, [r5, #4]
 80119a2:	3701      	adds	r7, #1
 80119a4:	60a2      	str	r2, [r4, #8]
 80119a6:	b142      	cbz	r2, 80119ba <_scanf_chars+0x8e>
 80119a8:	2b00      	cmp	r3, #0
 80119aa:	dcd7      	bgt.n	801195c <_scanf_chars+0x30>
 80119ac:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 80119b0:	4629      	mov	r1, r5
 80119b2:	4640      	mov	r0, r8
 80119b4:	4798      	blx	r3
 80119b6:	2800      	cmp	r0, #0
 80119b8:	d0d0      	beq.n	801195c <_scanf_chars+0x30>
 80119ba:	6823      	ldr	r3, [r4, #0]
 80119bc:	f013 0310 	ands.w	r3, r3, #16
 80119c0:	d105      	bne.n	80119ce <_scanf_chars+0xa2>
 80119c2:	68e2      	ldr	r2, [r4, #12]
 80119c4:	3201      	adds	r2, #1
 80119c6:	60e2      	str	r2, [r4, #12]
 80119c8:	69a2      	ldr	r2, [r4, #24]
 80119ca:	b102      	cbz	r2, 80119ce <_scanf_chars+0xa2>
 80119cc:	7033      	strb	r3, [r6, #0]
 80119ce:	6923      	ldr	r3, [r4, #16]
 80119d0:	443b      	add	r3, r7
 80119d2:	6123      	str	r3, [r4, #16]
 80119d4:	2000      	movs	r0, #0
 80119d6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80119da:	bf00      	nop
 80119dc:	080123b1 	.word	0x080123b1

080119e0 <_scanf_i>:
 80119e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80119e4:	4698      	mov	r8, r3
 80119e6:	4b74      	ldr	r3, [pc, #464]	@ (8011bb8 <_scanf_i+0x1d8>)
 80119e8:	460c      	mov	r4, r1
 80119ea:	4682      	mov	sl, r0
 80119ec:	4616      	mov	r6, r2
 80119ee:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80119f2:	b087      	sub	sp, #28
 80119f4:	ab03      	add	r3, sp, #12
 80119f6:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80119fa:	4b70      	ldr	r3, [pc, #448]	@ (8011bbc <_scanf_i+0x1dc>)
 80119fc:	69a1      	ldr	r1, [r4, #24]
 80119fe:	4a70      	ldr	r2, [pc, #448]	@ (8011bc0 <_scanf_i+0x1e0>)
 8011a00:	2903      	cmp	r1, #3
 8011a02:	bf08      	it	eq
 8011a04:	461a      	moveq	r2, r3
 8011a06:	68a3      	ldr	r3, [r4, #8]
 8011a08:	9201      	str	r2, [sp, #4]
 8011a0a:	1e5a      	subs	r2, r3, #1
 8011a0c:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 8011a10:	bf88      	it	hi
 8011a12:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 8011a16:	4627      	mov	r7, r4
 8011a18:	bf82      	ittt	hi
 8011a1a:	eb03 0905 	addhi.w	r9, r3, r5
 8011a1e:	f240 135d 	movwhi	r3, #349	@ 0x15d
 8011a22:	60a3      	strhi	r3, [r4, #8]
 8011a24:	f857 3b1c 	ldr.w	r3, [r7], #28
 8011a28:	f443 6350 	orr.w	r3, r3, #3328	@ 0xd00
 8011a2c:	bf98      	it	ls
 8011a2e:	f04f 0900 	movls.w	r9, #0
 8011a32:	6023      	str	r3, [r4, #0]
 8011a34:	463d      	mov	r5, r7
 8011a36:	f04f 0b00 	mov.w	fp, #0
 8011a3a:	6831      	ldr	r1, [r6, #0]
 8011a3c:	ab03      	add	r3, sp, #12
 8011a3e:	7809      	ldrb	r1, [r1, #0]
 8011a40:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 8011a44:	2202      	movs	r2, #2
 8011a46:	f7ee fbcb 	bl	80001e0 <memchr>
 8011a4a:	b328      	cbz	r0, 8011a98 <_scanf_i+0xb8>
 8011a4c:	f1bb 0f01 	cmp.w	fp, #1
 8011a50:	d159      	bne.n	8011b06 <_scanf_i+0x126>
 8011a52:	6862      	ldr	r2, [r4, #4]
 8011a54:	b92a      	cbnz	r2, 8011a62 <_scanf_i+0x82>
 8011a56:	6822      	ldr	r2, [r4, #0]
 8011a58:	2108      	movs	r1, #8
 8011a5a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8011a5e:	6061      	str	r1, [r4, #4]
 8011a60:	6022      	str	r2, [r4, #0]
 8011a62:	6822      	ldr	r2, [r4, #0]
 8011a64:	f422 62a0 	bic.w	r2, r2, #1280	@ 0x500
 8011a68:	6022      	str	r2, [r4, #0]
 8011a6a:	68a2      	ldr	r2, [r4, #8]
 8011a6c:	1e51      	subs	r1, r2, #1
 8011a6e:	60a1      	str	r1, [r4, #8]
 8011a70:	b192      	cbz	r2, 8011a98 <_scanf_i+0xb8>
 8011a72:	6832      	ldr	r2, [r6, #0]
 8011a74:	1c51      	adds	r1, r2, #1
 8011a76:	6031      	str	r1, [r6, #0]
 8011a78:	7812      	ldrb	r2, [r2, #0]
 8011a7a:	f805 2b01 	strb.w	r2, [r5], #1
 8011a7e:	6872      	ldr	r2, [r6, #4]
 8011a80:	3a01      	subs	r2, #1
 8011a82:	2a00      	cmp	r2, #0
 8011a84:	6072      	str	r2, [r6, #4]
 8011a86:	dc07      	bgt.n	8011a98 <_scanf_i+0xb8>
 8011a88:	f8d4 2180 	ldr.w	r2, [r4, #384]	@ 0x180
 8011a8c:	4631      	mov	r1, r6
 8011a8e:	4650      	mov	r0, sl
 8011a90:	4790      	blx	r2
 8011a92:	2800      	cmp	r0, #0
 8011a94:	f040 8085 	bne.w	8011ba2 <_scanf_i+0x1c2>
 8011a98:	f10b 0b01 	add.w	fp, fp, #1
 8011a9c:	f1bb 0f03 	cmp.w	fp, #3
 8011aa0:	d1cb      	bne.n	8011a3a <_scanf_i+0x5a>
 8011aa2:	6863      	ldr	r3, [r4, #4]
 8011aa4:	b90b      	cbnz	r3, 8011aaa <_scanf_i+0xca>
 8011aa6:	230a      	movs	r3, #10
 8011aa8:	6063      	str	r3, [r4, #4]
 8011aaa:	6863      	ldr	r3, [r4, #4]
 8011aac:	4945      	ldr	r1, [pc, #276]	@ (8011bc4 <_scanf_i+0x1e4>)
 8011aae:	6960      	ldr	r0, [r4, #20]
 8011ab0:	1ac9      	subs	r1, r1, r3
 8011ab2:	f000 f889 	bl	8011bc8 <__sccl>
 8011ab6:	f04f 0b00 	mov.w	fp, #0
 8011aba:	68a3      	ldr	r3, [r4, #8]
 8011abc:	6822      	ldr	r2, [r4, #0]
 8011abe:	2b00      	cmp	r3, #0
 8011ac0:	d03d      	beq.n	8011b3e <_scanf_i+0x15e>
 8011ac2:	6831      	ldr	r1, [r6, #0]
 8011ac4:	6960      	ldr	r0, [r4, #20]
 8011ac6:	f891 c000 	ldrb.w	ip, [r1]
 8011aca:	f810 000c 	ldrb.w	r0, [r0, ip]
 8011ace:	2800      	cmp	r0, #0
 8011ad0:	d035      	beq.n	8011b3e <_scanf_i+0x15e>
 8011ad2:	f1bc 0f30 	cmp.w	ip, #48	@ 0x30
 8011ad6:	d124      	bne.n	8011b22 <_scanf_i+0x142>
 8011ad8:	0510      	lsls	r0, r2, #20
 8011ada:	d522      	bpl.n	8011b22 <_scanf_i+0x142>
 8011adc:	f10b 0b01 	add.w	fp, fp, #1
 8011ae0:	f1b9 0f00 	cmp.w	r9, #0
 8011ae4:	d003      	beq.n	8011aee <_scanf_i+0x10e>
 8011ae6:	3301      	adds	r3, #1
 8011ae8:	f109 39ff 	add.w	r9, r9, #4294967295
 8011aec:	60a3      	str	r3, [r4, #8]
 8011aee:	6873      	ldr	r3, [r6, #4]
 8011af0:	3b01      	subs	r3, #1
 8011af2:	2b00      	cmp	r3, #0
 8011af4:	6073      	str	r3, [r6, #4]
 8011af6:	dd1b      	ble.n	8011b30 <_scanf_i+0x150>
 8011af8:	6833      	ldr	r3, [r6, #0]
 8011afa:	3301      	adds	r3, #1
 8011afc:	6033      	str	r3, [r6, #0]
 8011afe:	68a3      	ldr	r3, [r4, #8]
 8011b00:	3b01      	subs	r3, #1
 8011b02:	60a3      	str	r3, [r4, #8]
 8011b04:	e7d9      	b.n	8011aba <_scanf_i+0xda>
 8011b06:	f1bb 0f02 	cmp.w	fp, #2
 8011b0a:	d1ae      	bne.n	8011a6a <_scanf_i+0x8a>
 8011b0c:	6822      	ldr	r2, [r4, #0]
 8011b0e:	f402 61c0 	and.w	r1, r2, #1536	@ 0x600
 8011b12:	f5b1 7f00 	cmp.w	r1, #512	@ 0x200
 8011b16:	d1c4      	bne.n	8011aa2 <_scanf_i+0xc2>
 8011b18:	2110      	movs	r1, #16
 8011b1a:	6061      	str	r1, [r4, #4]
 8011b1c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8011b20:	e7a2      	b.n	8011a68 <_scanf_i+0x88>
 8011b22:	f422 6210 	bic.w	r2, r2, #2304	@ 0x900
 8011b26:	6022      	str	r2, [r4, #0]
 8011b28:	780b      	ldrb	r3, [r1, #0]
 8011b2a:	f805 3b01 	strb.w	r3, [r5], #1
 8011b2e:	e7de      	b.n	8011aee <_scanf_i+0x10e>
 8011b30:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 8011b34:	4631      	mov	r1, r6
 8011b36:	4650      	mov	r0, sl
 8011b38:	4798      	blx	r3
 8011b3a:	2800      	cmp	r0, #0
 8011b3c:	d0df      	beq.n	8011afe <_scanf_i+0x11e>
 8011b3e:	6823      	ldr	r3, [r4, #0]
 8011b40:	05d9      	lsls	r1, r3, #23
 8011b42:	d50d      	bpl.n	8011b60 <_scanf_i+0x180>
 8011b44:	42bd      	cmp	r5, r7
 8011b46:	d909      	bls.n	8011b5c <_scanf_i+0x17c>
 8011b48:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 8011b4c:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8011b50:	4632      	mov	r2, r6
 8011b52:	4650      	mov	r0, sl
 8011b54:	4798      	blx	r3
 8011b56:	f105 39ff 	add.w	r9, r5, #4294967295
 8011b5a:	464d      	mov	r5, r9
 8011b5c:	42bd      	cmp	r5, r7
 8011b5e:	d028      	beq.n	8011bb2 <_scanf_i+0x1d2>
 8011b60:	6822      	ldr	r2, [r4, #0]
 8011b62:	f012 0210 	ands.w	r2, r2, #16
 8011b66:	d113      	bne.n	8011b90 <_scanf_i+0x1b0>
 8011b68:	702a      	strb	r2, [r5, #0]
 8011b6a:	6863      	ldr	r3, [r4, #4]
 8011b6c:	9e01      	ldr	r6, [sp, #4]
 8011b6e:	4639      	mov	r1, r7
 8011b70:	4650      	mov	r0, sl
 8011b72:	47b0      	blx	r6
 8011b74:	f8d8 3000 	ldr.w	r3, [r8]
 8011b78:	6821      	ldr	r1, [r4, #0]
 8011b7a:	1d1a      	adds	r2, r3, #4
 8011b7c:	f8c8 2000 	str.w	r2, [r8]
 8011b80:	f011 0f20 	tst.w	r1, #32
 8011b84:	681b      	ldr	r3, [r3, #0]
 8011b86:	d00f      	beq.n	8011ba8 <_scanf_i+0x1c8>
 8011b88:	6018      	str	r0, [r3, #0]
 8011b8a:	68e3      	ldr	r3, [r4, #12]
 8011b8c:	3301      	adds	r3, #1
 8011b8e:	60e3      	str	r3, [r4, #12]
 8011b90:	6923      	ldr	r3, [r4, #16]
 8011b92:	1bed      	subs	r5, r5, r7
 8011b94:	445d      	add	r5, fp
 8011b96:	442b      	add	r3, r5
 8011b98:	6123      	str	r3, [r4, #16]
 8011b9a:	2000      	movs	r0, #0
 8011b9c:	b007      	add	sp, #28
 8011b9e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011ba2:	f04f 0b00 	mov.w	fp, #0
 8011ba6:	e7ca      	b.n	8011b3e <_scanf_i+0x15e>
 8011ba8:	07ca      	lsls	r2, r1, #31
 8011baa:	bf4c      	ite	mi
 8011bac:	8018      	strhmi	r0, [r3, #0]
 8011bae:	6018      	strpl	r0, [r3, #0]
 8011bb0:	e7eb      	b.n	8011b8a <_scanf_i+0x1aa>
 8011bb2:	2001      	movs	r0, #1
 8011bb4:	e7f2      	b.n	8011b9c <_scanf_i+0x1bc>
 8011bb6:	bf00      	nop
 8011bb8:	08012260 	.word	0x08012260
 8011bbc:	08011e55 	.word	0x08011e55
 8011bc0:	08011f35 	.word	0x08011f35
 8011bc4:	080123a5 	.word	0x080123a5

08011bc8 <__sccl>:
 8011bc8:	b570      	push	{r4, r5, r6, lr}
 8011bca:	780b      	ldrb	r3, [r1, #0]
 8011bcc:	4604      	mov	r4, r0
 8011bce:	2b5e      	cmp	r3, #94	@ 0x5e
 8011bd0:	bf0b      	itete	eq
 8011bd2:	784b      	ldrbeq	r3, [r1, #1]
 8011bd4:	1c4a      	addne	r2, r1, #1
 8011bd6:	1c8a      	addeq	r2, r1, #2
 8011bd8:	2100      	movne	r1, #0
 8011bda:	bf08      	it	eq
 8011bdc:	2101      	moveq	r1, #1
 8011bde:	3801      	subs	r0, #1
 8011be0:	f104 05ff 	add.w	r5, r4, #255	@ 0xff
 8011be4:	f800 1f01 	strb.w	r1, [r0, #1]!
 8011be8:	42a8      	cmp	r0, r5
 8011bea:	d1fb      	bne.n	8011be4 <__sccl+0x1c>
 8011bec:	b90b      	cbnz	r3, 8011bf2 <__sccl+0x2a>
 8011bee:	1e50      	subs	r0, r2, #1
 8011bf0:	bd70      	pop	{r4, r5, r6, pc}
 8011bf2:	f081 0101 	eor.w	r1, r1, #1
 8011bf6:	54e1      	strb	r1, [r4, r3]
 8011bf8:	4610      	mov	r0, r2
 8011bfa:	4602      	mov	r2, r0
 8011bfc:	f812 5b01 	ldrb.w	r5, [r2], #1
 8011c00:	2d2d      	cmp	r5, #45	@ 0x2d
 8011c02:	d005      	beq.n	8011c10 <__sccl+0x48>
 8011c04:	2d5d      	cmp	r5, #93	@ 0x5d
 8011c06:	d016      	beq.n	8011c36 <__sccl+0x6e>
 8011c08:	2d00      	cmp	r5, #0
 8011c0a:	d0f1      	beq.n	8011bf0 <__sccl+0x28>
 8011c0c:	462b      	mov	r3, r5
 8011c0e:	e7f2      	b.n	8011bf6 <__sccl+0x2e>
 8011c10:	7846      	ldrb	r6, [r0, #1]
 8011c12:	2e5d      	cmp	r6, #93	@ 0x5d
 8011c14:	d0fa      	beq.n	8011c0c <__sccl+0x44>
 8011c16:	42b3      	cmp	r3, r6
 8011c18:	dcf8      	bgt.n	8011c0c <__sccl+0x44>
 8011c1a:	3002      	adds	r0, #2
 8011c1c:	461a      	mov	r2, r3
 8011c1e:	3201      	adds	r2, #1
 8011c20:	4296      	cmp	r6, r2
 8011c22:	54a1      	strb	r1, [r4, r2]
 8011c24:	dcfb      	bgt.n	8011c1e <__sccl+0x56>
 8011c26:	1af2      	subs	r2, r6, r3
 8011c28:	3a01      	subs	r2, #1
 8011c2a:	1c5d      	adds	r5, r3, #1
 8011c2c:	42b3      	cmp	r3, r6
 8011c2e:	bfa8      	it	ge
 8011c30:	2200      	movge	r2, #0
 8011c32:	18ab      	adds	r3, r5, r2
 8011c34:	e7e1      	b.n	8011bfa <__sccl+0x32>
 8011c36:	4610      	mov	r0, r2
 8011c38:	e7da      	b.n	8011bf0 <__sccl+0x28>

08011c3a <__submore>:
 8011c3a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011c3e:	460c      	mov	r4, r1
 8011c40:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 8011c42:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8011c46:	4299      	cmp	r1, r3
 8011c48:	d11d      	bne.n	8011c86 <__submore+0x4c>
 8011c4a:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8011c4e:	f7ff f92d 	bl	8010eac <_malloc_r>
 8011c52:	b918      	cbnz	r0, 8011c5c <__submore+0x22>
 8011c54:	f04f 30ff 	mov.w	r0, #4294967295
 8011c58:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011c5c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8011c60:	63a3      	str	r3, [r4, #56]	@ 0x38
 8011c62:	f894 3046 	ldrb.w	r3, [r4, #70]	@ 0x46
 8011c66:	6360      	str	r0, [r4, #52]	@ 0x34
 8011c68:	f880 33ff 	strb.w	r3, [r0, #1023]	@ 0x3ff
 8011c6c:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 8011c70:	f880 33fe 	strb.w	r3, [r0, #1022]	@ 0x3fe
 8011c74:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 8011c78:	f880 33fd 	strb.w	r3, [r0, #1021]	@ 0x3fd
 8011c7c:	f200 30fd 	addw	r0, r0, #1021	@ 0x3fd
 8011c80:	6020      	str	r0, [r4, #0]
 8011c82:	2000      	movs	r0, #0
 8011c84:	e7e8      	b.n	8011c58 <__submore+0x1e>
 8011c86:	6ba6      	ldr	r6, [r4, #56]	@ 0x38
 8011c88:	0077      	lsls	r7, r6, #1
 8011c8a:	463a      	mov	r2, r7
 8011c8c:	f000 f83a 	bl	8011d04 <_realloc_r>
 8011c90:	4605      	mov	r5, r0
 8011c92:	2800      	cmp	r0, #0
 8011c94:	d0de      	beq.n	8011c54 <__submore+0x1a>
 8011c96:	eb00 0806 	add.w	r8, r0, r6
 8011c9a:	4601      	mov	r1, r0
 8011c9c:	4632      	mov	r2, r6
 8011c9e:	4640      	mov	r0, r8
 8011ca0:	f7ff f88a 	bl	8010db8 <memcpy>
 8011ca4:	e9c4 570d 	strd	r5, r7, [r4, #52]	@ 0x34
 8011ca8:	f8c4 8000 	str.w	r8, [r4]
 8011cac:	e7e9      	b.n	8011c82 <__submore+0x48>

08011cae <memmove>:
 8011cae:	4288      	cmp	r0, r1
 8011cb0:	b510      	push	{r4, lr}
 8011cb2:	eb01 0402 	add.w	r4, r1, r2
 8011cb6:	d902      	bls.n	8011cbe <memmove+0x10>
 8011cb8:	4284      	cmp	r4, r0
 8011cba:	4623      	mov	r3, r4
 8011cbc:	d807      	bhi.n	8011cce <memmove+0x20>
 8011cbe:	1e43      	subs	r3, r0, #1
 8011cc0:	42a1      	cmp	r1, r4
 8011cc2:	d008      	beq.n	8011cd6 <memmove+0x28>
 8011cc4:	f811 2b01 	ldrb.w	r2, [r1], #1
 8011cc8:	f803 2f01 	strb.w	r2, [r3, #1]!
 8011ccc:	e7f8      	b.n	8011cc0 <memmove+0x12>
 8011cce:	4402      	add	r2, r0
 8011cd0:	4601      	mov	r1, r0
 8011cd2:	428a      	cmp	r2, r1
 8011cd4:	d100      	bne.n	8011cd8 <memmove+0x2a>
 8011cd6:	bd10      	pop	{r4, pc}
 8011cd8:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8011cdc:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8011ce0:	e7f7      	b.n	8011cd2 <memmove+0x24>
	...

08011ce4 <_sbrk_r>:
 8011ce4:	b538      	push	{r3, r4, r5, lr}
 8011ce6:	4d06      	ldr	r5, [pc, #24]	@ (8011d00 <_sbrk_r+0x1c>)
 8011ce8:	2300      	movs	r3, #0
 8011cea:	4604      	mov	r4, r0
 8011cec:	4608      	mov	r0, r1
 8011cee:	602b      	str	r3, [r5, #0]
 8011cf0:	f7f2 fcb8 	bl	8004664 <_sbrk>
 8011cf4:	1c43      	adds	r3, r0, #1
 8011cf6:	d102      	bne.n	8011cfe <_sbrk_r+0x1a>
 8011cf8:	682b      	ldr	r3, [r5, #0]
 8011cfa:	b103      	cbz	r3, 8011cfe <_sbrk_r+0x1a>
 8011cfc:	6023      	str	r3, [r4, #0]
 8011cfe:	bd38      	pop	{r3, r4, r5, pc}
 8011d00:	20007500 	.word	0x20007500

08011d04 <_realloc_r>:
 8011d04:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011d08:	4607      	mov	r7, r0
 8011d0a:	4614      	mov	r4, r2
 8011d0c:	460d      	mov	r5, r1
 8011d0e:	b921      	cbnz	r1, 8011d1a <_realloc_r+0x16>
 8011d10:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8011d14:	4611      	mov	r1, r2
 8011d16:	f7ff b8c9 	b.w	8010eac <_malloc_r>
 8011d1a:	b92a      	cbnz	r2, 8011d28 <_realloc_r+0x24>
 8011d1c:	f7ff f85a 	bl	8010dd4 <_free_r>
 8011d20:	4625      	mov	r5, r4
 8011d22:	4628      	mov	r0, r5
 8011d24:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011d28:	f000 f906 	bl	8011f38 <_malloc_usable_size_r>
 8011d2c:	4284      	cmp	r4, r0
 8011d2e:	4606      	mov	r6, r0
 8011d30:	d802      	bhi.n	8011d38 <_realloc_r+0x34>
 8011d32:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8011d36:	d8f4      	bhi.n	8011d22 <_realloc_r+0x1e>
 8011d38:	4621      	mov	r1, r4
 8011d3a:	4638      	mov	r0, r7
 8011d3c:	f7ff f8b6 	bl	8010eac <_malloc_r>
 8011d40:	4680      	mov	r8, r0
 8011d42:	b908      	cbnz	r0, 8011d48 <_realloc_r+0x44>
 8011d44:	4645      	mov	r5, r8
 8011d46:	e7ec      	b.n	8011d22 <_realloc_r+0x1e>
 8011d48:	42b4      	cmp	r4, r6
 8011d4a:	4622      	mov	r2, r4
 8011d4c:	4629      	mov	r1, r5
 8011d4e:	bf28      	it	cs
 8011d50:	4632      	movcs	r2, r6
 8011d52:	f7ff f831 	bl	8010db8 <memcpy>
 8011d56:	4629      	mov	r1, r5
 8011d58:	4638      	mov	r0, r7
 8011d5a:	f7ff f83b 	bl	8010dd4 <_free_r>
 8011d5e:	e7f1      	b.n	8011d44 <_realloc_r+0x40>

08011d60 <_strtol_l.isra.0>:
 8011d60:	2b24      	cmp	r3, #36	@ 0x24
 8011d62:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011d66:	4686      	mov	lr, r0
 8011d68:	4690      	mov	r8, r2
 8011d6a:	d801      	bhi.n	8011d70 <_strtol_l.isra.0+0x10>
 8011d6c:	2b01      	cmp	r3, #1
 8011d6e:	d106      	bne.n	8011d7e <_strtol_l.isra.0+0x1e>
 8011d70:	f7fe fff6 	bl	8010d60 <__errno>
 8011d74:	2316      	movs	r3, #22
 8011d76:	6003      	str	r3, [r0, #0]
 8011d78:	2000      	movs	r0, #0
 8011d7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011d7e:	4834      	ldr	r0, [pc, #208]	@ (8011e50 <_strtol_l.isra.0+0xf0>)
 8011d80:	460d      	mov	r5, r1
 8011d82:	462a      	mov	r2, r5
 8011d84:	f815 4b01 	ldrb.w	r4, [r5], #1
 8011d88:	5d06      	ldrb	r6, [r0, r4]
 8011d8a:	f016 0608 	ands.w	r6, r6, #8
 8011d8e:	d1f8      	bne.n	8011d82 <_strtol_l.isra.0+0x22>
 8011d90:	2c2d      	cmp	r4, #45	@ 0x2d
 8011d92:	d110      	bne.n	8011db6 <_strtol_l.isra.0+0x56>
 8011d94:	782c      	ldrb	r4, [r5, #0]
 8011d96:	2601      	movs	r6, #1
 8011d98:	1c95      	adds	r5, r2, #2
 8011d9a:	f033 0210 	bics.w	r2, r3, #16
 8011d9e:	d115      	bne.n	8011dcc <_strtol_l.isra.0+0x6c>
 8011da0:	2c30      	cmp	r4, #48	@ 0x30
 8011da2:	d10d      	bne.n	8011dc0 <_strtol_l.isra.0+0x60>
 8011da4:	782a      	ldrb	r2, [r5, #0]
 8011da6:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8011daa:	2a58      	cmp	r2, #88	@ 0x58
 8011dac:	d108      	bne.n	8011dc0 <_strtol_l.isra.0+0x60>
 8011dae:	786c      	ldrb	r4, [r5, #1]
 8011db0:	3502      	adds	r5, #2
 8011db2:	2310      	movs	r3, #16
 8011db4:	e00a      	b.n	8011dcc <_strtol_l.isra.0+0x6c>
 8011db6:	2c2b      	cmp	r4, #43	@ 0x2b
 8011db8:	bf04      	itt	eq
 8011dba:	782c      	ldrbeq	r4, [r5, #0]
 8011dbc:	1c95      	addeq	r5, r2, #2
 8011dbe:	e7ec      	b.n	8011d9a <_strtol_l.isra.0+0x3a>
 8011dc0:	2b00      	cmp	r3, #0
 8011dc2:	d1f6      	bne.n	8011db2 <_strtol_l.isra.0+0x52>
 8011dc4:	2c30      	cmp	r4, #48	@ 0x30
 8011dc6:	bf14      	ite	ne
 8011dc8:	230a      	movne	r3, #10
 8011dca:	2308      	moveq	r3, #8
 8011dcc:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 8011dd0:	f10c 3cff 	add.w	ip, ip, #4294967295
 8011dd4:	2200      	movs	r2, #0
 8011dd6:	fbbc f9f3 	udiv	r9, ip, r3
 8011dda:	4610      	mov	r0, r2
 8011ddc:	fb03 ca19 	mls	sl, r3, r9, ip
 8011de0:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 8011de4:	2f09      	cmp	r7, #9
 8011de6:	d80f      	bhi.n	8011e08 <_strtol_l.isra.0+0xa8>
 8011de8:	463c      	mov	r4, r7
 8011dea:	42a3      	cmp	r3, r4
 8011dec:	dd1b      	ble.n	8011e26 <_strtol_l.isra.0+0xc6>
 8011dee:	1c57      	adds	r7, r2, #1
 8011df0:	d007      	beq.n	8011e02 <_strtol_l.isra.0+0xa2>
 8011df2:	4581      	cmp	r9, r0
 8011df4:	d314      	bcc.n	8011e20 <_strtol_l.isra.0+0xc0>
 8011df6:	d101      	bne.n	8011dfc <_strtol_l.isra.0+0x9c>
 8011df8:	45a2      	cmp	sl, r4
 8011dfa:	db11      	blt.n	8011e20 <_strtol_l.isra.0+0xc0>
 8011dfc:	fb00 4003 	mla	r0, r0, r3, r4
 8011e00:	2201      	movs	r2, #1
 8011e02:	f815 4b01 	ldrb.w	r4, [r5], #1
 8011e06:	e7eb      	b.n	8011de0 <_strtol_l.isra.0+0x80>
 8011e08:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8011e0c:	2f19      	cmp	r7, #25
 8011e0e:	d801      	bhi.n	8011e14 <_strtol_l.isra.0+0xb4>
 8011e10:	3c37      	subs	r4, #55	@ 0x37
 8011e12:	e7ea      	b.n	8011dea <_strtol_l.isra.0+0x8a>
 8011e14:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 8011e18:	2f19      	cmp	r7, #25
 8011e1a:	d804      	bhi.n	8011e26 <_strtol_l.isra.0+0xc6>
 8011e1c:	3c57      	subs	r4, #87	@ 0x57
 8011e1e:	e7e4      	b.n	8011dea <_strtol_l.isra.0+0x8a>
 8011e20:	f04f 32ff 	mov.w	r2, #4294967295
 8011e24:	e7ed      	b.n	8011e02 <_strtol_l.isra.0+0xa2>
 8011e26:	1c53      	adds	r3, r2, #1
 8011e28:	d108      	bne.n	8011e3c <_strtol_l.isra.0+0xdc>
 8011e2a:	2322      	movs	r3, #34	@ 0x22
 8011e2c:	f8ce 3000 	str.w	r3, [lr]
 8011e30:	4660      	mov	r0, ip
 8011e32:	f1b8 0f00 	cmp.w	r8, #0
 8011e36:	d0a0      	beq.n	8011d7a <_strtol_l.isra.0+0x1a>
 8011e38:	1e69      	subs	r1, r5, #1
 8011e3a:	e006      	b.n	8011e4a <_strtol_l.isra.0+0xea>
 8011e3c:	b106      	cbz	r6, 8011e40 <_strtol_l.isra.0+0xe0>
 8011e3e:	4240      	negs	r0, r0
 8011e40:	f1b8 0f00 	cmp.w	r8, #0
 8011e44:	d099      	beq.n	8011d7a <_strtol_l.isra.0+0x1a>
 8011e46:	2a00      	cmp	r2, #0
 8011e48:	d1f6      	bne.n	8011e38 <_strtol_l.isra.0+0xd8>
 8011e4a:	f8c8 1000 	str.w	r1, [r8]
 8011e4e:	e794      	b.n	8011d7a <_strtol_l.isra.0+0x1a>
 8011e50:	080123b1 	.word	0x080123b1

08011e54 <_strtol_r>:
 8011e54:	f7ff bf84 	b.w	8011d60 <_strtol_l.isra.0>

08011e58 <_strtoul_l.isra.0>:
 8011e58:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8011e5c:	4e34      	ldr	r6, [pc, #208]	@ (8011f30 <_strtoul_l.isra.0+0xd8>)
 8011e5e:	4686      	mov	lr, r0
 8011e60:	460d      	mov	r5, r1
 8011e62:	4628      	mov	r0, r5
 8011e64:	f815 4b01 	ldrb.w	r4, [r5], #1
 8011e68:	5d37      	ldrb	r7, [r6, r4]
 8011e6a:	f017 0708 	ands.w	r7, r7, #8
 8011e6e:	d1f8      	bne.n	8011e62 <_strtoul_l.isra.0+0xa>
 8011e70:	2c2d      	cmp	r4, #45	@ 0x2d
 8011e72:	d110      	bne.n	8011e96 <_strtoul_l.isra.0+0x3e>
 8011e74:	782c      	ldrb	r4, [r5, #0]
 8011e76:	2701      	movs	r7, #1
 8011e78:	1c85      	adds	r5, r0, #2
 8011e7a:	f033 0010 	bics.w	r0, r3, #16
 8011e7e:	d115      	bne.n	8011eac <_strtoul_l.isra.0+0x54>
 8011e80:	2c30      	cmp	r4, #48	@ 0x30
 8011e82:	d10d      	bne.n	8011ea0 <_strtoul_l.isra.0+0x48>
 8011e84:	7828      	ldrb	r0, [r5, #0]
 8011e86:	f000 00df 	and.w	r0, r0, #223	@ 0xdf
 8011e8a:	2858      	cmp	r0, #88	@ 0x58
 8011e8c:	d108      	bne.n	8011ea0 <_strtoul_l.isra.0+0x48>
 8011e8e:	786c      	ldrb	r4, [r5, #1]
 8011e90:	3502      	adds	r5, #2
 8011e92:	2310      	movs	r3, #16
 8011e94:	e00a      	b.n	8011eac <_strtoul_l.isra.0+0x54>
 8011e96:	2c2b      	cmp	r4, #43	@ 0x2b
 8011e98:	bf04      	itt	eq
 8011e9a:	782c      	ldrbeq	r4, [r5, #0]
 8011e9c:	1c85      	addeq	r5, r0, #2
 8011e9e:	e7ec      	b.n	8011e7a <_strtoul_l.isra.0+0x22>
 8011ea0:	2b00      	cmp	r3, #0
 8011ea2:	d1f6      	bne.n	8011e92 <_strtoul_l.isra.0+0x3a>
 8011ea4:	2c30      	cmp	r4, #48	@ 0x30
 8011ea6:	bf14      	ite	ne
 8011ea8:	230a      	movne	r3, #10
 8011eaa:	2308      	moveq	r3, #8
 8011eac:	f04f 38ff 	mov.w	r8, #4294967295
 8011eb0:	2600      	movs	r6, #0
 8011eb2:	fbb8 f8f3 	udiv	r8, r8, r3
 8011eb6:	fb03 f908 	mul.w	r9, r3, r8
 8011eba:	ea6f 0909 	mvn.w	r9, r9
 8011ebe:	4630      	mov	r0, r6
 8011ec0:	f1a4 0c30 	sub.w	ip, r4, #48	@ 0x30
 8011ec4:	f1bc 0f09 	cmp.w	ip, #9
 8011ec8:	d810      	bhi.n	8011eec <_strtoul_l.isra.0+0x94>
 8011eca:	4664      	mov	r4, ip
 8011ecc:	42a3      	cmp	r3, r4
 8011ece:	dd1e      	ble.n	8011f0e <_strtoul_l.isra.0+0xb6>
 8011ed0:	f1b6 3fff 	cmp.w	r6, #4294967295
 8011ed4:	d007      	beq.n	8011ee6 <_strtoul_l.isra.0+0x8e>
 8011ed6:	4580      	cmp	r8, r0
 8011ed8:	d316      	bcc.n	8011f08 <_strtoul_l.isra.0+0xb0>
 8011eda:	d101      	bne.n	8011ee0 <_strtoul_l.isra.0+0x88>
 8011edc:	45a1      	cmp	r9, r4
 8011ede:	db13      	blt.n	8011f08 <_strtoul_l.isra.0+0xb0>
 8011ee0:	fb00 4003 	mla	r0, r0, r3, r4
 8011ee4:	2601      	movs	r6, #1
 8011ee6:	f815 4b01 	ldrb.w	r4, [r5], #1
 8011eea:	e7e9      	b.n	8011ec0 <_strtoul_l.isra.0+0x68>
 8011eec:	f1a4 0c41 	sub.w	ip, r4, #65	@ 0x41
 8011ef0:	f1bc 0f19 	cmp.w	ip, #25
 8011ef4:	d801      	bhi.n	8011efa <_strtoul_l.isra.0+0xa2>
 8011ef6:	3c37      	subs	r4, #55	@ 0x37
 8011ef8:	e7e8      	b.n	8011ecc <_strtoul_l.isra.0+0x74>
 8011efa:	f1a4 0c61 	sub.w	ip, r4, #97	@ 0x61
 8011efe:	f1bc 0f19 	cmp.w	ip, #25
 8011f02:	d804      	bhi.n	8011f0e <_strtoul_l.isra.0+0xb6>
 8011f04:	3c57      	subs	r4, #87	@ 0x57
 8011f06:	e7e1      	b.n	8011ecc <_strtoul_l.isra.0+0x74>
 8011f08:	f04f 36ff 	mov.w	r6, #4294967295
 8011f0c:	e7eb      	b.n	8011ee6 <_strtoul_l.isra.0+0x8e>
 8011f0e:	1c73      	adds	r3, r6, #1
 8011f10:	d106      	bne.n	8011f20 <_strtoul_l.isra.0+0xc8>
 8011f12:	2322      	movs	r3, #34	@ 0x22
 8011f14:	f8ce 3000 	str.w	r3, [lr]
 8011f18:	4630      	mov	r0, r6
 8011f1a:	b932      	cbnz	r2, 8011f2a <_strtoul_l.isra.0+0xd2>
 8011f1c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8011f20:	b107      	cbz	r7, 8011f24 <_strtoul_l.isra.0+0xcc>
 8011f22:	4240      	negs	r0, r0
 8011f24:	2a00      	cmp	r2, #0
 8011f26:	d0f9      	beq.n	8011f1c <_strtoul_l.isra.0+0xc4>
 8011f28:	b106      	cbz	r6, 8011f2c <_strtoul_l.isra.0+0xd4>
 8011f2a:	1e69      	subs	r1, r5, #1
 8011f2c:	6011      	str	r1, [r2, #0]
 8011f2e:	e7f5      	b.n	8011f1c <_strtoul_l.isra.0+0xc4>
 8011f30:	080123b1 	.word	0x080123b1

08011f34 <_strtoul_r>:
 8011f34:	f7ff bf90 	b.w	8011e58 <_strtoul_l.isra.0>

08011f38 <_malloc_usable_size_r>:
 8011f38:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8011f3c:	1f18      	subs	r0, r3, #4
 8011f3e:	2b00      	cmp	r3, #0
 8011f40:	bfbc      	itt	lt
 8011f42:	580b      	ldrlt	r3, [r1, r0]
 8011f44:	18c0      	addlt	r0, r0, r3
 8011f46:	4770      	bx	lr

08011f48 <_init>:
 8011f48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011f4a:	bf00      	nop
 8011f4c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8011f4e:	bc08      	pop	{r3}
 8011f50:	469e      	mov	lr, r3
 8011f52:	4770      	bx	lr

08011f54 <_fini>:
 8011f54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011f56:	bf00      	nop
 8011f58:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8011f5a:	bc08      	pop	{r3}
 8011f5c:	469e      	mov	lr, r3
 8011f5e:	4770      	bx	lr
