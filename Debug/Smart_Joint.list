
Smart_Joint.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00013e28  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000658  08013fb8  08013fb8  00014fb8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08014610  08014610  00016064  2**0
                  CONTENTS
  4 .ARM          00000008  08014610  08014610  00015610  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08014618  08014618  00016064  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08014618  08014618  00015618  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801461c  0801461c  0001561c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000064  20000000  08014620  00016000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00005200  20000068  08014684  00016068  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20005268  08014684  00016268  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00016064  2**0
                  CONTENTS, READONLY
 12 .debug_info   00036e91  00000000  00000000  00016094  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00005dc4  00000000  00000000  0004cf25  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002c90  00000000  00000000  00052cf0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000022c0  00000000  00000000  00055980  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0003082e  00000000  00000000  00057c40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00034c9f  00000000  00000000  0008846e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00123f7c  00000000  00000000  000bd10d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001e1089  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000c8e0  00000000  00000000  001e10cc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000066  00000000  00000000  001ed9ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000068 	.word	0x20000068
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08013fa0 	.word	0x08013fa0

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000006c 	.word	0x2000006c
 80001cc:	08013fa0 	.word	0x08013fa0

080001d0 <strcmp>:
 80001d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001d8:	2a01      	cmp	r2, #1
 80001da:	bf28      	it	cs
 80001dc:	429a      	cmpcs	r2, r3
 80001de:	d0f7      	beq.n	80001d0 <strcmp>
 80001e0:	1ad0      	subs	r0, r2, r3
 80001e2:	4770      	bx	lr

080001e4 <strlen>:
 80001e4:	4603      	mov	r3, r0
 80001e6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ea:	2a00      	cmp	r2, #0
 80001ec:	d1fb      	bne.n	80001e6 <strlen+0x2>
 80001ee:	1a18      	subs	r0, r3, r0
 80001f0:	3801      	subs	r0, #1
 80001f2:	4770      	bx	lr
	...

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_uldivmod>:
 80002a0:	b953      	cbnz	r3, 80002b8 <__aeabi_uldivmod+0x18>
 80002a2:	b94a      	cbnz	r2, 80002b8 <__aeabi_uldivmod+0x18>
 80002a4:	2900      	cmp	r1, #0
 80002a6:	bf08      	it	eq
 80002a8:	2800      	cmpeq	r0, #0
 80002aa:	bf1c      	itt	ne
 80002ac:	f04f 31ff 	movne.w	r1, #4294967295
 80002b0:	f04f 30ff 	movne.w	r0, #4294967295
 80002b4:	f000 b988 	b.w	80005c8 <__aeabi_idiv0>
 80002b8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002bc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002c0:	f000 f806 	bl	80002d0 <__udivmoddi4>
 80002c4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002c8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002cc:	b004      	add	sp, #16
 80002ce:	4770      	bx	lr

080002d0 <__udivmoddi4>:
 80002d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002d4:	9d08      	ldr	r5, [sp, #32]
 80002d6:	468e      	mov	lr, r1
 80002d8:	4604      	mov	r4, r0
 80002da:	4688      	mov	r8, r1
 80002dc:	2b00      	cmp	r3, #0
 80002de:	d14a      	bne.n	8000376 <__udivmoddi4+0xa6>
 80002e0:	428a      	cmp	r2, r1
 80002e2:	4617      	mov	r7, r2
 80002e4:	d962      	bls.n	80003ac <__udivmoddi4+0xdc>
 80002e6:	fab2 f682 	clz	r6, r2
 80002ea:	b14e      	cbz	r6, 8000300 <__udivmoddi4+0x30>
 80002ec:	f1c6 0320 	rsb	r3, r6, #32
 80002f0:	fa01 f806 	lsl.w	r8, r1, r6
 80002f4:	fa20 f303 	lsr.w	r3, r0, r3
 80002f8:	40b7      	lsls	r7, r6
 80002fa:	ea43 0808 	orr.w	r8, r3, r8
 80002fe:	40b4      	lsls	r4, r6
 8000300:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000304:	fa1f fc87 	uxth.w	ip, r7
 8000308:	fbb8 f1fe 	udiv	r1, r8, lr
 800030c:	0c23      	lsrs	r3, r4, #16
 800030e:	fb0e 8811 	mls	r8, lr, r1, r8
 8000312:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000316:	fb01 f20c 	mul.w	r2, r1, ip
 800031a:	429a      	cmp	r2, r3
 800031c:	d909      	bls.n	8000332 <__udivmoddi4+0x62>
 800031e:	18fb      	adds	r3, r7, r3
 8000320:	f101 30ff 	add.w	r0, r1, #4294967295
 8000324:	f080 80ea 	bcs.w	80004fc <__udivmoddi4+0x22c>
 8000328:	429a      	cmp	r2, r3
 800032a:	f240 80e7 	bls.w	80004fc <__udivmoddi4+0x22c>
 800032e:	3902      	subs	r1, #2
 8000330:	443b      	add	r3, r7
 8000332:	1a9a      	subs	r2, r3, r2
 8000334:	b2a3      	uxth	r3, r4
 8000336:	fbb2 f0fe 	udiv	r0, r2, lr
 800033a:	fb0e 2210 	mls	r2, lr, r0, r2
 800033e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000342:	fb00 fc0c 	mul.w	ip, r0, ip
 8000346:	459c      	cmp	ip, r3
 8000348:	d909      	bls.n	800035e <__udivmoddi4+0x8e>
 800034a:	18fb      	adds	r3, r7, r3
 800034c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000350:	f080 80d6 	bcs.w	8000500 <__udivmoddi4+0x230>
 8000354:	459c      	cmp	ip, r3
 8000356:	f240 80d3 	bls.w	8000500 <__udivmoddi4+0x230>
 800035a:	443b      	add	r3, r7
 800035c:	3802      	subs	r0, #2
 800035e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000362:	eba3 030c 	sub.w	r3, r3, ip
 8000366:	2100      	movs	r1, #0
 8000368:	b11d      	cbz	r5, 8000372 <__udivmoddi4+0xa2>
 800036a:	40f3      	lsrs	r3, r6
 800036c:	2200      	movs	r2, #0
 800036e:	e9c5 3200 	strd	r3, r2, [r5]
 8000372:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000376:	428b      	cmp	r3, r1
 8000378:	d905      	bls.n	8000386 <__udivmoddi4+0xb6>
 800037a:	b10d      	cbz	r5, 8000380 <__udivmoddi4+0xb0>
 800037c:	e9c5 0100 	strd	r0, r1, [r5]
 8000380:	2100      	movs	r1, #0
 8000382:	4608      	mov	r0, r1
 8000384:	e7f5      	b.n	8000372 <__udivmoddi4+0xa2>
 8000386:	fab3 f183 	clz	r1, r3
 800038a:	2900      	cmp	r1, #0
 800038c:	d146      	bne.n	800041c <__udivmoddi4+0x14c>
 800038e:	4573      	cmp	r3, lr
 8000390:	d302      	bcc.n	8000398 <__udivmoddi4+0xc8>
 8000392:	4282      	cmp	r2, r0
 8000394:	f200 8105 	bhi.w	80005a2 <__udivmoddi4+0x2d2>
 8000398:	1a84      	subs	r4, r0, r2
 800039a:	eb6e 0203 	sbc.w	r2, lr, r3
 800039e:	2001      	movs	r0, #1
 80003a0:	4690      	mov	r8, r2
 80003a2:	2d00      	cmp	r5, #0
 80003a4:	d0e5      	beq.n	8000372 <__udivmoddi4+0xa2>
 80003a6:	e9c5 4800 	strd	r4, r8, [r5]
 80003aa:	e7e2      	b.n	8000372 <__udivmoddi4+0xa2>
 80003ac:	2a00      	cmp	r2, #0
 80003ae:	f000 8090 	beq.w	80004d2 <__udivmoddi4+0x202>
 80003b2:	fab2 f682 	clz	r6, r2
 80003b6:	2e00      	cmp	r6, #0
 80003b8:	f040 80a4 	bne.w	8000504 <__udivmoddi4+0x234>
 80003bc:	1a8a      	subs	r2, r1, r2
 80003be:	0c03      	lsrs	r3, r0, #16
 80003c0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003c4:	b280      	uxth	r0, r0
 80003c6:	b2bc      	uxth	r4, r7
 80003c8:	2101      	movs	r1, #1
 80003ca:	fbb2 fcfe 	udiv	ip, r2, lr
 80003ce:	fb0e 221c 	mls	r2, lr, ip, r2
 80003d2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80003d6:	fb04 f20c 	mul.w	r2, r4, ip
 80003da:	429a      	cmp	r2, r3
 80003dc:	d907      	bls.n	80003ee <__udivmoddi4+0x11e>
 80003de:	18fb      	adds	r3, r7, r3
 80003e0:	f10c 38ff 	add.w	r8, ip, #4294967295
 80003e4:	d202      	bcs.n	80003ec <__udivmoddi4+0x11c>
 80003e6:	429a      	cmp	r2, r3
 80003e8:	f200 80e0 	bhi.w	80005ac <__udivmoddi4+0x2dc>
 80003ec:	46c4      	mov	ip, r8
 80003ee:	1a9b      	subs	r3, r3, r2
 80003f0:	fbb3 f2fe 	udiv	r2, r3, lr
 80003f4:	fb0e 3312 	mls	r3, lr, r2, r3
 80003f8:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 80003fc:	fb02 f404 	mul.w	r4, r2, r4
 8000400:	429c      	cmp	r4, r3
 8000402:	d907      	bls.n	8000414 <__udivmoddi4+0x144>
 8000404:	18fb      	adds	r3, r7, r3
 8000406:	f102 30ff 	add.w	r0, r2, #4294967295
 800040a:	d202      	bcs.n	8000412 <__udivmoddi4+0x142>
 800040c:	429c      	cmp	r4, r3
 800040e:	f200 80ca 	bhi.w	80005a6 <__udivmoddi4+0x2d6>
 8000412:	4602      	mov	r2, r0
 8000414:	1b1b      	subs	r3, r3, r4
 8000416:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800041a:	e7a5      	b.n	8000368 <__udivmoddi4+0x98>
 800041c:	f1c1 0620 	rsb	r6, r1, #32
 8000420:	408b      	lsls	r3, r1
 8000422:	fa22 f706 	lsr.w	r7, r2, r6
 8000426:	431f      	orrs	r7, r3
 8000428:	fa0e f401 	lsl.w	r4, lr, r1
 800042c:	fa20 f306 	lsr.w	r3, r0, r6
 8000430:	fa2e fe06 	lsr.w	lr, lr, r6
 8000434:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000438:	4323      	orrs	r3, r4
 800043a:	fa00 f801 	lsl.w	r8, r0, r1
 800043e:	fa1f fc87 	uxth.w	ip, r7
 8000442:	fbbe f0f9 	udiv	r0, lr, r9
 8000446:	0c1c      	lsrs	r4, r3, #16
 8000448:	fb09 ee10 	mls	lr, r9, r0, lr
 800044c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000450:	fb00 fe0c 	mul.w	lr, r0, ip
 8000454:	45a6      	cmp	lr, r4
 8000456:	fa02 f201 	lsl.w	r2, r2, r1
 800045a:	d909      	bls.n	8000470 <__udivmoddi4+0x1a0>
 800045c:	193c      	adds	r4, r7, r4
 800045e:	f100 3aff 	add.w	sl, r0, #4294967295
 8000462:	f080 809c 	bcs.w	800059e <__udivmoddi4+0x2ce>
 8000466:	45a6      	cmp	lr, r4
 8000468:	f240 8099 	bls.w	800059e <__udivmoddi4+0x2ce>
 800046c:	3802      	subs	r0, #2
 800046e:	443c      	add	r4, r7
 8000470:	eba4 040e 	sub.w	r4, r4, lr
 8000474:	fa1f fe83 	uxth.w	lr, r3
 8000478:	fbb4 f3f9 	udiv	r3, r4, r9
 800047c:	fb09 4413 	mls	r4, r9, r3, r4
 8000480:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000484:	fb03 fc0c 	mul.w	ip, r3, ip
 8000488:	45a4      	cmp	ip, r4
 800048a:	d908      	bls.n	800049e <__udivmoddi4+0x1ce>
 800048c:	193c      	adds	r4, r7, r4
 800048e:	f103 3eff 	add.w	lr, r3, #4294967295
 8000492:	f080 8082 	bcs.w	800059a <__udivmoddi4+0x2ca>
 8000496:	45a4      	cmp	ip, r4
 8000498:	d97f      	bls.n	800059a <__udivmoddi4+0x2ca>
 800049a:	3b02      	subs	r3, #2
 800049c:	443c      	add	r4, r7
 800049e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80004a2:	eba4 040c 	sub.w	r4, r4, ip
 80004a6:	fba0 ec02 	umull	lr, ip, r0, r2
 80004aa:	4564      	cmp	r4, ip
 80004ac:	4673      	mov	r3, lr
 80004ae:	46e1      	mov	r9, ip
 80004b0:	d362      	bcc.n	8000578 <__udivmoddi4+0x2a8>
 80004b2:	d05f      	beq.n	8000574 <__udivmoddi4+0x2a4>
 80004b4:	b15d      	cbz	r5, 80004ce <__udivmoddi4+0x1fe>
 80004b6:	ebb8 0203 	subs.w	r2, r8, r3
 80004ba:	eb64 0409 	sbc.w	r4, r4, r9
 80004be:	fa04 f606 	lsl.w	r6, r4, r6
 80004c2:	fa22 f301 	lsr.w	r3, r2, r1
 80004c6:	431e      	orrs	r6, r3
 80004c8:	40cc      	lsrs	r4, r1
 80004ca:	e9c5 6400 	strd	r6, r4, [r5]
 80004ce:	2100      	movs	r1, #0
 80004d0:	e74f      	b.n	8000372 <__udivmoddi4+0xa2>
 80004d2:	fbb1 fcf2 	udiv	ip, r1, r2
 80004d6:	0c01      	lsrs	r1, r0, #16
 80004d8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80004dc:	b280      	uxth	r0, r0
 80004de:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 80004e2:	463b      	mov	r3, r7
 80004e4:	4638      	mov	r0, r7
 80004e6:	463c      	mov	r4, r7
 80004e8:	46b8      	mov	r8, r7
 80004ea:	46be      	mov	lr, r7
 80004ec:	2620      	movs	r6, #32
 80004ee:	fbb1 f1f7 	udiv	r1, r1, r7
 80004f2:	eba2 0208 	sub.w	r2, r2, r8
 80004f6:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 80004fa:	e766      	b.n	80003ca <__udivmoddi4+0xfa>
 80004fc:	4601      	mov	r1, r0
 80004fe:	e718      	b.n	8000332 <__udivmoddi4+0x62>
 8000500:	4610      	mov	r0, r2
 8000502:	e72c      	b.n	800035e <__udivmoddi4+0x8e>
 8000504:	f1c6 0220 	rsb	r2, r6, #32
 8000508:	fa2e f302 	lsr.w	r3, lr, r2
 800050c:	40b7      	lsls	r7, r6
 800050e:	40b1      	lsls	r1, r6
 8000510:	fa20 f202 	lsr.w	r2, r0, r2
 8000514:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000518:	430a      	orrs	r2, r1
 800051a:	fbb3 f8fe 	udiv	r8, r3, lr
 800051e:	b2bc      	uxth	r4, r7
 8000520:	fb0e 3318 	mls	r3, lr, r8, r3
 8000524:	0c11      	lsrs	r1, r2, #16
 8000526:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800052a:	fb08 f904 	mul.w	r9, r8, r4
 800052e:	40b0      	lsls	r0, r6
 8000530:	4589      	cmp	r9, r1
 8000532:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000536:	b280      	uxth	r0, r0
 8000538:	d93e      	bls.n	80005b8 <__udivmoddi4+0x2e8>
 800053a:	1879      	adds	r1, r7, r1
 800053c:	f108 3cff 	add.w	ip, r8, #4294967295
 8000540:	d201      	bcs.n	8000546 <__udivmoddi4+0x276>
 8000542:	4589      	cmp	r9, r1
 8000544:	d81f      	bhi.n	8000586 <__udivmoddi4+0x2b6>
 8000546:	eba1 0109 	sub.w	r1, r1, r9
 800054a:	fbb1 f9fe 	udiv	r9, r1, lr
 800054e:	fb09 f804 	mul.w	r8, r9, r4
 8000552:	fb0e 1119 	mls	r1, lr, r9, r1
 8000556:	b292      	uxth	r2, r2
 8000558:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800055c:	4542      	cmp	r2, r8
 800055e:	d229      	bcs.n	80005b4 <__udivmoddi4+0x2e4>
 8000560:	18ba      	adds	r2, r7, r2
 8000562:	f109 31ff 	add.w	r1, r9, #4294967295
 8000566:	d2c4      	bcs.n	80004f2 <__udivmoddi4+0x222>
 8000568:	4542      	cmp	r2, r8
 800056a:	d2c2      	bcs.n	80004f2 <__udivmoddi4+0x222>
 800056c:	f1a9 0102 	sub.w	r1, r9, #2
 8000570:	443a      	add	r2, r7
 8000572:	e7be      	b.n	80004f2 <__udivmoddi4+0x222>
 8000574:	45f0      	cmp	r8, lr
 8000576:	d29d      	bcs.n	80004b4 <__udivmoddi4+0x1e4>
 8000578:	ebbe 0302 	subs.w	r3, lr, r2
 800057c:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000580:	3801      	subs	r0, #1
 8000582:	46e1      	mov	r9, ip
 8000584:	e796      	b.n	80004b4 <__udivmoddi4+0x1e4>
 8000586:	eba7 0909 	sub.w	r9, r7, r9
 800058a:	4449      	add	r1, r9
 800058c:	f1a8 0c02 	sub.w	ip, r8, #2
 8000590:	fbb1 f9fe 	udiv	r9, r1, lr
 8000594:	fb09 f804 	mul.w	r8, r9, r4
 8000598:	e7db      	b.n	8000552 <__udivmoddi4+0x282>
 800059a:	4673      	mov	r3, lr
 800059c:	e77f      	b.n	800049e <__udivmoddi4+0x1ce>
 800059e:	4650      	mov	r0, sl
 80005a0:	e766      	b.n	8000470 <__udivmoddi4+0x1a0>
 80005a2:	4608      	mov	r0, r1
 80005a4:	e6fd      	b.n	80003a2 <__udivmoddi4+0xd2>
 80005a6:	443b      	add	r3, r7
 80005a8:	3a02      	subs	r2, #2
 80005aa:	e733      	b.n	8000414 <__udivmoddi4+0x144>
 80005ac:	f1ac 0c02 	sub.w	ip, ip, #2
 80005b0:	443b      	add	r3, r7
 80005b2:	e71c      	b.n	80003ee <__udivmoddi4+0x11e>
 80005b4:	4649      	mov	r1, r9
 80005b6:	e79c      	b.n	80004f2 <__udivmoddi4+0x222>
 80005b8:	eba1 0109 	sub.w	r1, r1, r9
 80005bc:	46c4      	mov	ip, r8
 80005be:	fbb1 f9fe 	udiv	r9, r1, lr
 80005c2:	fb09 f804 	mul.w	r8, r9, r4
 80005c6:	e7c4      	b.n	8000552 <__udivmoddi4+0x282>

080005c8 <__aeabi_idiv0>:
 80005c8:	4770      	bx	lr
 80005ca:	bf00      	nop

080005cc <LL_USART_SetBaudRate>:
                                          uint32_t BaudRate)
#else
__STATIC_INLINE void LL_USART_SetBaudRate(USART_TypeDef *USARTx, uint32_t PeriphClk, uint32_t OverSampling,
                                          uint32_t BaudRate)
#endif /* USART_PRESC_PRESCALER */
{
 80005cc:	b480      	push	{r7}
 80005ce:	b087      	sub	sp, #28
 80005d0:	af00      	add	r7, sp, #0
 80005d2:	60f8      	str	r0, [r7, #12]
 80005d4:	60b9      	str	r1, [r7, #8]
 80005d6:	607a      	str	r2, [r7, #4]
 80005d8:	603b      	str	r3, [r7, #0]
  {
    /* Can Not divide per 0 */
  }
  else if (OverSampling == LL_USART_OVERSAMPLING_8)
#else
  if (OverSampling == LL_USART_OVERSAMPLING_8)
 80005da:	687b      	ldr	r3, [r7, #4]
 80005dc:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80005e0:	d11a      	bne.n	8000618 <LL_USART_SetBaudRate+0x4c>
#endif /* USART_PRESC_PRESCALER */
  {
#if defined(USART_PRESC_PRESCALER)
    usartdiv = (uint16_t)(__LL_USART_DIV_SAMPLING8(PeriphClk, (uint8_t)PrescalerValue, BaudRate));
#else
    usartdiv = (uint16_t)(__LL_USART_DIV_SAMPLING8(PeriphClk, BaudRate));
 80005e2:	68bb      	ldr	r3, [r7, #8]
 80005e4:	005a      	lsls	r2, r3, #1
 80005e6:	683b      	ldr	r3, [r7, #0]
 80005e8:	085b      	lsrs	r3, r3, #1
 80005ea:	441a      	add	r2, r3
 80005ec:	683b      	ldr	r3, [r7, #0]
 80005ee:	fbb2 f3f3 	udiv	r3, r2, r3
 80005f2:	b29b      	uxth	r3, r3
 80005f4:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
    brrtemp = usartdiv & 0xFFF0U;
 80005f6:	697a      	ldr	r2, [r7, #20]
 80005f8:	f64f 73f0 	movw	r3, #65520	@ 0xfff0
 80005fc:	4013      	ands	r3, r2
 80005fe:	613b      	str	r3, [r7, #16]
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8000600:	697b      	ldr	r3, [r7, #20]
 8000602:	085b      	lsrs	r3, r3, #1
 8000604:	b29b      	uxth	r3, r3
 8000606:	f003 0307 	and.w	r3, r3, #7
 800060a:	693a      	ldr	r2, [r7, #16]
 800060c:	4313      	orrs	r3, r2
 800060e:	613b      	str	r3, [r7, #16]
    USARTx->BRR = brrtemp;
 8000610:	68fb      	ldr	r3, [r7, #12]
 8000612:	693a      	ldr	r2, [r7, #16]
 8000614:	60da      	str	r2, [r3, #12]
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, (uint8_t)PrescalerValue, BaudRate));
#else
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, BaudRate));
#endif /* USART_PRESC_PRESCALER */
  }
}
 8000616:	e00a      	b.n	800062e <LL_USART_SetBaudRate+0x62>
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, BaudRate));
 8000618:	683b      	ldr	r3, [r7, #0]
 800061a:	085a      	lsrs	r2, r3, #1
 800061c:	68bb      	ldr	r3, [r7, #8]
 800061e:	441a      	add	r2, r3
 8000620:	683b      	ldr	r3, [r7, #0]
 8000622:	fbb2 f3f3 	udiv	r3, r2, r3
 8000626:	b29b      	uxth	r3, r3
 8000628:	461a      	mov	r2, r3
 800062a:	68fb      	ldr	r3, [r7, #12]
 800062c:	60da      	str	r2, [r3, #12]
}
 800062e:	bf00      	nop
 8000630:	371c      	adds	r7, #28
 8000632:	46bd      	mov	sp, r7
 8000634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000638:	4770      	bx	lr
	...

0800063c <Temp_Sensor_Init>:
#include "stm32l4xx_ll_usart.h"


/*------INIZIALIZZAZIONE SENSORE DI TEMPERATURA------*/
void Temp_Sensor_Init(void)
{
 800063c:	b590      	push	{r4, r7, lr}
 800063e:	b083      	sub	sp, #12
 8000640:	af00      	add	r7, sp, #0
	uint8_t data = 0xF0;
 8000642:	23f0      	movs	r3, #240	@ 0xf0
 8000644:	71fb      	strb	r3, [r7, #7]

	LL_USART_SetBaudRate(huart4.Instance, HAL_RCC_GetPCLK2Freq(), UART_OVERSAMPLING_16, 9600);
 8000646:	4b1a      	ldr	r3, [pc, #104]	@ (80006b0 <Temp_Sensor_Init+0x74>)
 8000648:	681c      	ldr	r4, [r3, #0]
 800064a:	f00c ff5f 	bl	800d50c <HAL_RCC_GetPCLK2Freq>
 800064e:	4601      	mov	r1, r0
 8000650:	f44f 5316 	mov.w	r3, #9600	@ 0x2580
 8000654:	2200      	movs	r2, #0
 8000656:	4620      	mov	r0, r4
 8000658:	f7ff ffb8 	bl	80005cc <LL_USART_SetBaudRate>

	HAL_UART_Transmit(TEMP_UART, &data, 1, 100);  // low for 500+us
 800065c:	1df9      	adds	r1, r7, #7
 800065e:	2364      	movs	r3, #100	@ 0x64
 8000660:	2201      	movs	r2, #1
 8000662:	4813      	ldr	r0, [pc, #76]	@ (80006b0 <Temp_Sensor_Init+0x74>)
 8000664:	f011 f824 	bl	80116b0 <HAL_UART_Transmit>
	if (HAL_UART_Receive(TEMP_UART, &data, 1, 1000) != HAL_OK)
 8000668:	1df9      	adds	r1, r7, #7
 800066a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800066e:	2201      	movs	r2, #1
 8000670:	480f      	ldr	r0, [pc, #60]	@ (80006b0 <Temp_Sensor_Init+0x74>)
 8000672:	f011 f8a6 	bl	80117c2 <HAL_UART_Receive>
 8000676:	4603      	mov	r3, r0
 8000678:	2b00      	cmp	r3, #0
 800067a:	d001      	beq.n	8000680 <Temp_Sensor_Init+0x44>
		while(1);
 800067c:	bf00      	nop
 800067e:	e7fd      	b.n	800067c <Temp_Sensor_Init+0x40>

	LL_USART_SetBaudRate(huart4.Instance, HAL_RCC_GetPCLK2Freq(), UART_OVERSAMPLING_16, 115200);
 8000680:	4b0b      	ldr	r3, [pc, #44]	@ (80006b0 <Temp_Sensor_Init+0x74>)
 8000682:	681c      	ldr	r4, [r3, #0]
 8000684:	f00c ff42 	bl	800d50c <HAL_RCC_GetPCLK2Freq>
 8000688:	4601      	mov	r1, r0
 800068a:	f44f 33e1 	mov.w	r3, #115200	@ 0x1c200
 800068e:	2200      	movs	r2, #0
 8000690:	4620      	mov	r0, r4
 8000692:	f7ff ff9b 	bl	80005cc <LL_USART_SetBaudRate>

	if (data == 0xF0)
 8000696:	79fb      	ldrb	r3, [r7, #7]
 8000698:	2bf0      	cmp	r3, #240	@ 0xf0
 800069a:	d101      	bne.n	80006a0 <Temp_Sensor_Init+0x64>
		while(1);
 800069c:	bf00      	nop
 800069e:	e7fd      	b.n	800069c <Temp_Sensor_Init+0x60>

	Temp_Sensor_Write(0xCC);  // skip ROM
 80006a0:	20cc      	movs	r0, #204	@ 0xcc
 80006a2:	f000 f807 	bl	80006b4 <Temp_Sensor_Write>
}
 80006a6:	bf00      	nop
 80006a8:	370c      	adds	r7, #12
 80006aa:	46bd      	mov	sp, r7
 80006ac:	bd90      	pop	{r4, r7, pc}
 80006ae:	bf00      	nop
 80006b0:	20000414 	.word	0x20000414

080006b4 <Temp_Sensor_Write>:

/*------SCRITTURA SU SENSORE DI TEMPERATURA------*/
void Temp_Sensor_Write(uint8_t data)
{
 80006b4:	b580      	push	{r7, lr}
 80006b6:	b086      	sub	sp, #24
 80006b8:	af00      	add	r7, sp, #0
 80006ba:	4603      	mov	r3, r0
 80006bc:	71fb      	strb	r3, [r7, #7]
	uint8_t buffer[8];

	for (int i=0; i<8; i++)
 80006be:	2300      	movs	r3, #0
 80006c0:	617b      	str	r3, [r7, #20]
 80006c2:	e017      	b.n	80006f4 <Temp_Sensor_Write+0x40>
	{
		if ((data & (1<<i))!=0)  // if the bit is high
 80006c4:	79fa      	ldrb	r2, [r7, #7]
 80006c6:	697b      	ldr	r3, [r7, #20]
 80006c8:	fa42 f303 	asr.w	r3, r2, r3
 80006cc:	f003 0301 	and.w	r3, r3, #1
 80006d0:	2b00      	cmp	r3, #0
 80006d2:	d006      	beq.n	80006e2 <Temp_Sensor_Write+0x2e>
		{
			buffer[i] = 0xFF;  // write 1
 80006d4:	f107 020c 	add.w	r2, r7, #12
 80006d8:	697b      	ldr	r3, [r7, #20]
 80006da:	4413      	add	r3, r2
 80006dc:	22ff      	movs	r2, #255	@ 0xff
 80006de:	701a      	strb	r2, [r3, #0]
 80006e0:	e005      	b.n	80006ee <Temp_Sensor_Write+0x3a>
		}
		else  // if the bit is low
		{
			buffer[i] = 0;  // write 0
 80006e2:	f107 020c 	add.w	r2, r7, #12
 80006e6:	697b      	ldr	r3, [r7, #20]
 80006e8:	4413      	add	r3, r2
 80006ea:	2200      	movs	r2, #0
 80006ec:	701a      	strb	r2, [r3, #0]
	for (int i=0; i<8; i++)
 80006ee:	697b      	ldr	r3, [r7, #20]
 80006f0:	3301      	adds	r3, #1
 80006f2:	617b      	str	r3, [r7, #20]
 80006f4:	697b      	ldr	r3, [r7, #20]
 80006f6:	2b07      	cmp	r3, #7
 80006f8:	dde4      	ble.n	80006c4 <Temp_Sensor_Write+0x10>
		}
	}

	HAL_UART_Transmit(TEMP_UART, buffer, 8, 100);
 80006fa:	f107 010c 	add.w	r1, r7, #12
 80006fe:	2364      	movs	r3, #100	@ 0x64
 8000700:	2208      	movs	r2, #8
 8000702:	4803      	ldr	r0, [pc, #12]	@ (8000710 <Temp_Sensor_Write+0x5c>)
 8000704:	f010 ffd4 	bl	80116b0 <HAL_UART_Transmit>
}
 8000708:	bf00      	nop
 800070a:	3718      	adds	r7, #24
 800070c:	46bd      	mov	sp, r7
 800070e:	bd80      	pop	{r7, pc}
 8000710:	20000414 	.word	0x20000414

08000714 <Temp_Sensor_ReadByte>:

/*------LETTURA BYTE DA SENSORE DI TEMPERATURA------*/
uint8_t Temp_Sensor_ReadByte(void)
{
 8000714:	b580      	push	{r7, lr}
 8000716:	b082      	sub	sp, #8
 8000718:	af00      	add	r7, sp, #0
	uint8_t RxByte = 0;
 800071a:	2300      	movs	r3, #0
 800071c:	71fb      	strb	r3, [r7, #7]
	for (uint8_t i = 0; i < 8; i++)
 800071e:	2300      	movs	r3, #0
 8000720:	71bb      	strb	r3, [r7, #6]
 8000722:	e00e      	b.n	8000742 <Temp_Sensor_ReadByte+0x2e>
	{
		RxByte >>= 1;
 8000724:	79fb      	ldrb	r3, [r7, #7]
 8000726:	085b      	lsrs	r3, r3, #1
 8000728:	71fb      	strb	r3, [r7, #7]
		if (Temp_Sensor_ReadBit())
 800072a:	f000 f813 	bl	8000754 <Temp_Sensor_ReadBit>
 800072e:	4603      	mov	r3, r0
 8000730:	2b00      	cmp	r3, #0
 8000732:	d003      	beq.n	800073c <Temp_Sensor_ReadByte+0x28>
		{
			RxByte |= 0x80;
 8000734:	79fb      	ldrb	r3, [r7, #7]
 8000736:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800073a:	71fb      	strb	r3, [r7, #7]
	for (uint8_t i = 0; i < 8; i++)
 800073c:	79bb      	ldrb	r3, [r7, #6]
 800073e:	3301      	adds	r3, #1
 8000740:	71bb      	strb	r3, [r7, #6]
 8000742:	79bb      	ldrb	r3, [r7, #6]
 8000744:	2b07      	cmp	r3, #7
 8000746:	d9ed      	bls.n	8000724 <Temp_Sensor_ReadByte+0x10>
		}
	}
	return RxByte;
 8000748:	79fb      	ldrb	r3, [r7, #7]
}
 800074a:	4618      	mov	r0, r3
 800074c:	3708      	adds	r7, #8
 800074e:	46bd      	mov	sp, r7
 8000750:	bd80      	pop	{r7, pc}
	...

08000754 <Temp_Sensor_ReadBit>:

/*------LETTURA BIT DA SENSORE DI TEMPERATURA------*/
uint8_t Temp_Sensor_ReadBit(void)
{
 8000754:	b580      	push	{r7, lr}
 8000756:	b082      	sub	sp, #8
 8000758:	af00      	add	r7, sp, #0
    uint8_t ReadBitCMD = 0xFF;
 800075a:	23ff      	movs	r3, #255	@ 0xff
 800075c:	71fb      	strb	r3, [r7, #7]
    uint8_t RxBit;

    // Send Read Bit CMD
    HAL_UART_Transmit(&huart1, &ReadBitCMD, 1, 1);
 800075e:	1df9      	adds	r1, r7, #7
 8000760:	2301      	movs	r3, #1
 8000762:	2201      	movs	r2, #1
 8000764:	4808      	ldr	r0, [pc, #32]	@ (8000788 <Temp_Sensor_ReadBit+0x34>)
 8000766:	f010 ffa3 	bl	80116b0 <HAL_UART_Transmit>
    // Receive The Bit
    HAL_UART_Receive(&huart1, &RxBit, 1, 1);
 800076a:	1db9      	adds	r1, r7, #6
 800076c:	2301      	movs	r3, #1
 800076e:	2201      	movs	r2, #1
 8000770:	4805      	ldr	r0, [pc, #20]	@ (8000788 <Temp_Sensor_ReadBit+0x34>)
 8000772:	f011 f826 	bl	80117c2 <HAL_UART_Receive>

    return (RxBit & 0x01);
 8000776:	79bb      	ldrb	r3, [r7, #6]
 8000778:	f003 0301 	and.w	r3, r3, #1
 800077c:	b2db      	uxtb	r3, r3
}
 800077e:	4618      	mov	r0, r3
 8000780:	3708      	adds	r7, #8
 8000782:	46bd      	mov	sp, r7
 8000784:	bd80      	pop	{r7, pc}
 8000786:	bf00      	nop
 8000788:	2000049c 	.word	0x2000049c

0800078c <Read_Temperature>:

/*------LETTURA TEMPERATURA------*/
uint16_t Read_Temperature(void)
{
 800078c:	b580      	push	{r7, lr}
 800078e:	b082      	sub	sp, #8
 8000790:	af00      	add	r7, sp, #0
	uint8_t Temp_LSB = 0;
 8000792:	2300      	movs	r3, #0
 8000794:	71fb      	strb	r3, [r7, #7]
	uint8_t Temp_MSB = 0;
 8000796:	2300      	movs	r3, #0
 8000798:	71bb      	strb	r3, [r7, #6]
	uint16_t Temp = 0;
 800079a:	2300      	movs	r3, #0
 800079c:	80bb      	strh	r3, [r7, #4]
	
	Temp_Sensor_Init();
 800079e:	f7ff ff4d 	bl	800063c <Temp_Sensor_Init>
	Temp_Sensor_Write(0xCC);  // skip ROM
 80007a2:	20cc      	movs	r0, #204	@ 0xcc
 80007a4:	f7ff ff86 	bl	80006b4 <Temp_Sensor_Write>

	uint8_t status = Temp_Sensor_ReadBit();
 80007a8:	f7ff ffd4 	bl	8000754 <Temp_Sensor_ReadBit>
 80007ac:	4603      	mov	r3, r0
 80007ae:	70fb      	strb	r3, [r7, #3]

	if (status) 
 80007b0:	78fb      	ldrb	r3, [r7, #3]
 80007b2:	2b00      	cmp	r3, #0
 80007b4:	d01d      	beq.n	80007f2 <Read_Temperature+0x66>
	{
		Temp_Sensor_Write(0xBE);  // read Scratch-pad
 80007b6:	20be      	movs	r0, #190	@ 0xbe
 80007b8:	f7ff ff7c 	bl	80006b4 <Temp_Sensor_Write>
		Temp_LSB = Temp_Sensor_ReadByte();
 80007bc:	f7ff ffaa 	bl	8000714 <Temp_Sensor_ReadByte>
 80007c0:	4603      	mov	r3, r0
 80007c2:	71fb      	strb	r3, [r7, #7]
	    Temp_MSB = Temp_Sensor_ReadByte();
 80007c4:	f7ff ffa6 	bl	8000714 <Temp_Sensor_ReadByte>
 80007c8:	4603      	mov	r3, r0
 80007ca:	71bb      	strb	r3, [r7, #6]
		Temp_Sensor_Init();
 80007cc:	f7ff ff36 	bl	800063c <Temp_Sensor_Init>
		Temp_Sensor_Write(0xCC);  // skip ROM
 80007d0:	20cc      	movs	r0, #204	@ 0xcc
 80007d2:	f7ff ff6f 	bl	80006b4 <Temp_Sensor_Write>
		Temp_Sensor_Write(0x44);  // convert t
 80007d6:	2044      	movs	r0, #68	@ 0x44
 80007d8:	f7ff ff6c 	bl	80006b4 <Temp_Sensor_Write>
		Temp = ((Temp_MSB << 8)) | Temp_LSB;
 80007dc:	79bb      	ldrb	r3, [r7, #6]
 80007de:	b21b      	sxth	r3, r3
 80007e0:	021b      	lsls	r3, r3, #8
 80007e2:	b21a      	sxth	r2, r3
 80007e4:	79fb      	ldrb	r3, [r7, #7]
 80007e6:	b21b      	sxth	r3, r3
 80007e8:	4313      	orrs	r3, r2
 80007ea:	b21b      	sxth	r3, r3
 80007ec:	80bb      	strh	r3, [r7, #4]
		return Temp;
 80007ee:	88bb      	ldrh	r3, [r7, #4]
 80007f0:	e000      	b.n	80007f4 <Read_Temperature+0x68>
	}
	
	return 0; 
 80007f2:	2300      	movs	r3, #0
}
 80007f4:	4618      	mov	r0, r3
 80007f6:	3708      	adds	r7, #8
 80007f8:	46bd      	mov	sp, r7
 80007fa:	bd80      	pop	{r7, pc}

080007fc <INA3221_Init>:
#include "INA3221.h"
#include "INA3221_reg.h"
#include "peripherals.h"

void INA3221_Init()
{
 80007fc:	b580      	push	{r7, lr}
 80007fe:	b082      	sub	sp, #8
 8000800:	af00      	add	r7, sp, #0
	uint16_t rcheck = 0;
 8000802:	2300      	movs	r3, #0
 8000804:	80fb      	strh	r3, [r7, #6]

	INA3221_write_reg(INA3221_REG_CONFIG, 0x8000);   //RESET
 8000806:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800080a:	2000      	movs	r0, #0
 800080c:	f000 f87a 	bl	8000904 <INA3221_write_reg>

	HAL_Delay(100);
 8000810:	2064      	movs	r0, #100	@ 0x64
 8000812:	f008 fc63 	bl	80090dc <HAL_Delay>

	INA3221_read_reg(INA3221_REG_MID, &rcheck);
 8000816:	1dbb      	adds	r3, r7, #6
 8000818:	4619      	mov	r1, r3
 800081a:	20fe      	movs	r0, #254	@ 0xfe
 800081c:	f000 f83c 	bl	8000898 <INA3221_read_reg>

	if(rcheck != INA3221_DEFAULT_MID)
 8000820:	88fb      	ldrh	r3, [r7, #6]
 8000822:	f245 4249 	movw	r2, #21577	@ 0x5449
 8000826:	4293      	cmp	r3, r2
 8000828:	d001      	beq.n	800082e <INA3221_Init+0x32>
		while(1);
 800082a:	bf00      	nop
 800082c:	e7fd      	b.n	800082a <INA3221_Init+0x2e>

	INA3221_write_reg(INA3221_REG_CONFIG, 0x7D27);   //CH1 CH2 CH3 Enabled, 512 AVG, 1.1ms conv time, continous mode
 800082e:	f647 5127 	movw	r1, #32039	@ 0x7d27
 8000832:	2000      	movs	r0, #0
 8000834:	f000 f866 	bl	8000904 <INA3221_write_reg>
}
 8000838:	bf00      	nop
 800083a:	3708      	adds	r7, #8
 800083c:	46bd      	mov	sp, r7
 800083e:	bd80      	pop	{r7, pc}

08000840 <INA3221_Read_Measure>:

void INA3221_Read_Measure(supply_bus_t *measure)
{
 8000840:	b580      	push	{r7, lr}
 8000842:	b082      	sub	sp, #8
 8000844:	af00      	add	r7, sp, #0
 8000846:	6078      	str	r0, [r7, #4]
	INA3221_read_reg(INA3221_REG_BUSVOLTAGE_1, (uint16_t *)&(measure->v1));
 8000848:	687b      	ldr	r3, [r7, #4]
 800084a:	4619      	mov	r1, r3
 800084c:	2002      	movs	r0, #2
 800084e:	f000 f823 	bl	8000898 <INA3221_read_reg>
	INA3221_read_reg(INA3221_REG_BUSVOLTAGE_2, (uint16_t *)&(measure->v2));
 8000852:	687b      	ldr	r3, [r7, #4]
 8000854:	3302      	adds	r3, #2
 8000856:	4619      	mov	r1, r3
 8000858:	2004      	movs	r0, #4
 800085a:	f000 f81d 	bl	8000898 <INA3221_read_reg>
	INA3221_read_reg(INA3221_REG_BUSVOLTAGE_3, (uint16_t *)&(measure->v3));
 800085e:	687b      	ldr	r3, [r7, #4]
 8000860:	3304      	adds	r3, #4
 8000862:	4619      	mov	r1, r3
 8000864:	2006      	movs	r0, #6
 8000866:	f000 f817 	bl	8000898 <INA3221_read_reg>
	INA3221_read_reg(INA3221_REG_SHUNTVOLTAGE_1, (uint16_t *)&(measure->i1));
 800086a:	687b      	ldr	r3, [r7, #4]
 800086c:	3306      	adds	r3, #6
 800086e:	4619      	mov	r1, r3
 8000870:	2001      	movs	r0, #1
 8000872:	f000 f811 	bl	8000898 <INA3221_read_reg>
	INA3221_read_reg(INA3221_REG_SHUNTVOLTAGE_2, (uint16_t *)&(measure->i2));
 8000876:	687b      	ldr	r3, [r7, #4]
 8000878:	3308      	adds	r3, #8
 800087a:	4619      	mov	r1, r3
 800087c:	2003      	movs	r0, #3
 800087e:	f000 f80b 	bl	8000898 <INA3221_read_reg>
	INA3221_read_reg(INA3221_REG_SHUNTVOLTAGE_3, (uint16_t *)&(measure->i3));
 8000882:	687b      	ldr	r3, [r7, #4]
 8000884:	330a      	adds	r3, #10
 8000886:	4619      	mov	r1, r3
 8000888:	2005      	movs	r0, #5
 800088a:	f000 f805 	bl	8000898 <INA3221_read_reg>
}
 800088e:	bf00      	nop
 8000890:	3708      	adds	r7, #8
 8000892:	46bd      	mov	sp, r7
 8000894:	bd80      	pop	{r7, pc}
	...

08000898 <INA3221_read_reg>:


int INA3221_read_reg(uint8_t reg, uint16_t *rdata)
{
 8000898:	b580      	push	{r7, lr}
 800089a:	b086      	sub	sp, #24
 800089c:	af02      	add	r7, sp, #8
 800089e:	4603      	mov	r3, r0
 80008a0:	6039      	str	r1, [r7, #0]
 80008a2:	71fb      	strb	r3, [r7, #7]
	int result = -1;
 80008a4:	f04f 33ff 	mov.w	r3, #4294967295
 80008a8:	60fb      	str	r3, [r7, #12]
	uint8_t data[2] = {0};
 80008aa:	2300      	movs	r3, #0
 80008ac:	813b      	strh	r3, [r7, #8]

	if(HAL_I2C_Master_Transmit(I2C, INA3221_ADDR_0 << 1, &reg, 1, 100) == HAL_OK)
 80008ae:	1dfa      	adds	r2, r7, #7
 80008b0:	2364      	movs	r3, #100	@ 0x64
 80008b2:	9300      	str	r3, [sp, #0]
 80008b4:	2301      	movs	r3, #1
 80008b6:	2180      	movs	r1, #128	@ 0x80
 80008b8:	4811      	ldr	r0, [pc, #68]	@ (8000900 <INA3221_read_reg+0x68>)
 80008ba:	f00a fe8b 	bl	800b5d4 <HAL_I2C_Master_Transmit>
 80008be:	4603      	mov	r3, r0
 80008c0:	2b00      	cmp	r3, #0
 80008c2:	d118      	bne.n	80008f6 <INA3221_read_reg+0x5e>
	{

		if(HAL_I2C_Master_Receive(I2C,  INA3221_ADDR_0 << 1, data, 2, 100) == HAL_OK)
 80008c4:	f107 0208 	add.w	r2, r7, #8
 80008c8:	2364      	movs	r3, #100	@ 0x64
 80008ca:	9300      	str	r3, [sp, #0]
 80008cc:	2302      	movs	r3, #2
 80008ce:	2180      	movs	r1, #128	@ 0x80
 80008d0:	480b      	ldr	r0, [pc, #44]	@ (8000900 <INA3221_read_reg+0x68>)
 80008d2:	f00a ff97 	bl	800b804 <HAL_I2C_Master_Receive>
 80008d6:	4603      	mov	r3, r0
 80008d8:	2b00      	cmp	r3, #0
 80008da:	d10c      	bne.n	80008f6 <INA3221_read_reg+0x5e>
		{
			result = 0;
 80008dc:	2300      	movs	r3, #0
 80008de:	60fb      	str	r3, [r7, #12]
			*rdata = (data[0] << 8) | data[1];
 80008e0:	7a3b      	ldrb	r3, [r7, #8]
 80008e2:	b21b      	sxth	r3, r3
 80008e4:	021b      	lsls	r3, r3, #8
 80008e6:	b21a      	sxth	r2, r3
 80008e8:	7a7b      	ldrb	r3, [r7, #9]
 80008ea:	b21b      	sxth	r3, r3
 80008ec:	4313      	orrs	r3, r2
 80008ee:	b21b      	sxth	r3, r3
 80008f0:	b29a      	uxth	r2, r3
 80008f2:	683b      	ldr	r3, [r7, #0]
 80008f4:	801a      	strh	r2, [r3, #0]
		}
	}

	return result;
 80008f6:	68fb      	ldr	r3, [r7, #12]
}
 80008f8:	4618      	mov	r0, r3
 80008fa:	3710      	adds	r7, #16
 80008fc:	46bd      	mov	sp, r7
 80008fe:	bd80      	pop	{r7, pc}
 8000900:	20000160 	.word	0x20000160

08000904 <INA3221_write_reg>:


int INA3221_write_reg(uint8_t reg, uint16_t wdata)
{
 8000904:	b580      	push	{r7, lr}
 8000906:	b086      	sub	sp, #24
 8000908:	af02      	add	r7, sp, #8
 800090a:	4603      	mov	r3, r0
 800090c:	460a      	mov	r2, r1
 800090e:	71fb      	strb	r3, [r7, #7]
 8000910:	4613      	mov	r3, r2
 8000912:	80bb      	strh	r3, [r7, #4]
    int result = -1;
 8000914:	f04f 33ff 	mov.w	r3, #4294967295
 8000918:	60fb      	str	r3, [r7, #12]
    uint8_t data[3];
    
    data[0] = reg;                    
 800091a:	79fb      	ldrb	r3, [r7, #7]
 800091c:	723b      	strb	r3, [r7, #8]
    data[1] = (wdata >> 8);          
 800091e:	88bb      	ldrh	r3, [r7, #4]
 8000920:	0a1b      	lsrs	r3, r3, #8
 8000922:	b29b      	uxth	r3, r3
 8000924:	b2db      	uxtb	r3, r3
 8000926:	727b      	strb	r3, [r7, #9]
    data[2] = (wdata & 0xFF);        
 8000928:	88bb      	ldrh	r3, [r7, #4]
 800092a:	b2db      	uxtb	r3, r3
 800092c:	72bb      	strb	r3, [r7, #10]

    if(HAL_I2C_Master_Transmit(I2C, INA3221_ADDR_0 << 1, data, 3, 100) == HAL_OK)
 800092e:	f107 0208 	add.w	r2, r7, #8
 8000932:	2364      	movs	r3, #100	@ 0x64
 8000934:	9300      	str	r3, [sp, #0]
 8000936:	2303      	movs	r3, #3
 8000938:	2180      	movs	r1, #128	@ 0x80
 800093a:	4806      	ldr	r0, [pc, #24]	@ (8000954 <INA3221_write_reg+0x50>)
 800093c:	f00a fe4a 	bl	800b5d4 <HAL_I2C_Master_Transmit>
 8000940:	4603      	mov	r3, r0
 8000942:	2b00      	cmp	r3, #0
 8000944:	d101      	bne.n	800094a <INA3221_write_reg+0x46>
    {
        result = 0;
 8000946:	2300      	movs	r3, #0
 8000948:	60fb      	str	r3, [r7, #12]
    }
    
    return result;
 800094a:	68fb      	ldr	r3, [r7, #12]
}
 800094c:	4618      	mov	r0, r3
 800094e:	3710      	adds	r7, #16
 8000950:	46bd      	mov	sp, r7
 8000952:	bd80      	pop	{r7, pc}
 8000954:	20000160 	.word	0x20000160

08000958 <RTC_Init>:
#include "RTC.h"


/*-----INIZiALIZZAZIONE ORA RTC-----*/
void RTC_Init(void)
{
 8000958:	b580      	push	{r7, lr}
 800095a:	b082      	sub	sp, #8
 800095c:	af00      	add	r7, sp, #0
	for (int retry = 0; retry < 3; retry++)
 800095e:	2300      	movs	r3, #0
 8000960:	607b      	str	r3, [r7, #4]
 8000962:	e00b      	b.n	800097c <RTC_Init+0x24>
	{
		if (Get_DateTime_From_Network())
 8000964:	f000 f814 	bl	8000990 <Get_DateTime_From_Network>
 8000968:	4603      	mov	r3, r0
 800096a:	2b00      	cmp	r3, #0
 800096c:	d10c      	bne.n	8000988 <RTC_Init+0x30>
		{
			return;
		}
		HAL_Delay(1000);
 800096e:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000972:	f008 fbb3 	bl	80090dc <HAL_Delay>
	for (int retry = 0; retry < 3; retry++)
 8000976:	687b      	ldr	r3, [r7, #4]
 8000978:	3301      	adds	r3, #1
 800097a:	607b      	str	r3, [r7, #4]
 800097c:	687b      	ldr	r3, [r7, #4]
 800097e:	2b02      	cmp	r3, #2
 8000980:	ddf0      	ble.n	8000964 <RTC_Init+0xc>
	}
	Set_Default_DateTime();
 8000982:	f000 f8f1 	bl	8000b68 <Set_Default_DateTime>
 8000986:	e000      	b.n	800098a <RTC_Init+0x32>
			return;
 8000988:	bf00      	nop
}
 800098a:	3708      	adds	r7, #8
 800098c:	46bd      	mov	sp, r7
 800098e:	bd80      	pop	{r7, pc}

08000990 <Get_DateTime_From_Network>:

/*-----SINCRONIZZAZIONE RTC DA RETE-----*/
int Get_DateTime_From_Network(void)
{
 8000990:	b580      	push	{r7, lr}
 8000992:	b0a2      	sub	sp, #136	@ 0x88
 8000994:	af00      	add	r7, sp, #0
	char response[100] = {0};
 8000996:	f107 031c 	add.w	r3, r7, #28
 800099a:	2264      	movs	r2, #100	@ 0x64
 800099c:	2100      	movs	r1, #0
 800099e:	4618      	mov	r0, r3
 80009a0:	f012 fa2e 	bl	8012e00 <memset>
	RTC_DateTypeDef sDate = {0};
 80009a4:	2300      	movs	r3, #0
 80009a6:	61bb      	str	r3, [r7, #24]
	RTC_TimeTypeDef sTime = {0};
 80009a8:	1d3b      	adds	r3, r7, #4
 80009aa:	2200      	movs	r2, #0
 80009ac:	601a      	str	r2, [r3, #0]
 80009ae:	605a      	str	r2, [r3, #4]
 80009b0:	609a      	str	r2, [r3, #8]
 80009b2:	60da      	str	r2, [r3, #12]
 80009b4:	611a      	str	r2, [r3, #16]

	SIM_Send_Command("AT+CCLK?\r");
 80009b6:	4869      	ldr	r0, [pc, #420]	@ (8000b5c <Get_DateTime_From_Network+0x1cc>)
 80009b8:	f000 fbb2 	bl	8001120 <SIM_Send_Command>
	SIM_Receive_Response(response);
 80009bc:	f107 031c 	add.w	r3, r7, #28
 80009c0:	4618      	mov	r0, r3
 80009c2:	f000 fbd9 	bl	8001178 <SIM_Receive_Response>

    char* cclk_pos = strstr(response, "+CCLK: \"");
 80009c6:	f107 031c 	add.w	r3, r7, #28
 80009ca:	4965      	ldr	r1, [pc, #404]	@ (8000b60 <Get_DateTime_From_Network+0x1d0>)
 80009cc:	4618      	mov	r0, r3
 80009ce:	f012 fa51 	bl	8012e74 <strstr>
 80009d2:	f8c7 0084 	str.w	r0, [r7, #132]	@ 0x84
    if (cclk_pos == NULL)
 80009d6:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80009da:	2b00      	cmp	r3, #0
 80009dc:	d101      	bne.n	80009e2 <Get_DateTime_From_Network+0x52>
	{
        return 0;
 80009de:	2300      	movs	r3, #0
 80009e0:	e0b8      	b.n	8000b54 <Get_DateTime_From_Network+0x1c4>
    }

    char* time_start = cclk_pos + 8;
 80009e2:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80009e6:	3308      	adds	r3, #8
 80009e8:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80

    if (strlen(time_start) < 17)
 80009ec:	f8d7 0080 	ldr.w	r0, [r7, #128]	@ 0x80
 80009f0:	f7ff fbf8 	bl	80001e4 <strlen>
 80009f4:	4603      	mov	r3, r0
 80009f6:	2b10      	cmp	r3, #16
 80009f8:	d801      	bhi.n	80009fe <Get_DateTime_From_Network+0x6e>
	{
		return 0;
 80009fa:	2300      	movs	r3, #0
 80009fc:	e0aa      	b.n	8000b54 <Get_DateTime_From_Network+0x1c4>
	}

	sDate.Year = (time_start[0] - '0') * 10 + (time_start[1] - '0');
 80009fe:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8000a02:	781b      	ldrb	r3, [r3, #0]
 8000a04:	3b30      	subs	r3, #48	@ 0x30
 8000a06:	b2db      	uxtb	r3, r3
 8000a08:	461a      	mov	r2, r3
 8000a0a:	0092      	lsls	r2, r2, #2
 8000a0c:	4413      	add	r3, r2
 8000a0e:	005b      	lsls	r3, r3, #1
 8000a10:	b2da      	uxtb	r2, r3
 8000a12:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8000a16:	3301      	adds	r3, #1
 8000a18:	781b      	ldrb	r3, [r3, #0]
 8000a1a:	4413      	add	r3, r2
 8000a1c:	b2db      	uxtb	r3, r3
 8000a1e:	3b30      	subs	r3, #48	@ 0x30
 8000a20:	b2db      	uxtb	r3, r3
 8000a22:	76fb      	strb	r3, [r7, #27]
	sDate.Month = (time_start[3] - '0') * 10 + (time_start[4] - '0');
 8000a24:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8000a28:	3303      	adds	r3, #3
 8000a2a:	781b      	ldrb	r3, [r3, #0]
 8000a2c:	3b30      	subs	r3, #48	@ 0x30
 8000a2e:	b2db      	uxtb	r3, r3
 8000a30:	461a      	mov	r2, r3
 8000a32:	0092      	lsls	r2, r2, #2
 8000a34:	4413      	add	r3, r2
 8000a36:	005b      	lsls	r3, r3, #1
 8000a38:	b2da      	uxtb	r2, r3
 8000a3a:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8000a3e:	3304      	adds	r3, #4
 8000a40:	781b      	ldrb	r3, [r3, #0]
 8000a42:	4413      	add	r3, r2
 8000a44:	b2db      	uxtb	r3, r3
 8000a46:	3b30      	subs	r3, #48	@ 0x30
 8000a48:	b2db      	uxtb	r3, r3
 8000a4a:	767b      	strb	r3, [r7, #25]
	sDate.Date = (time_start[6] - '0') * 10 + (time_start[7] - '0');
 8000a4c:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8000a50:	3306      	adds	r3, #6
 8000a52:	781b      	ldrb	r3, [r3, #0]
 8000a54:	3b30      	subs	r3, #48	@ 0x30
 8000a56:	b2db      	uxtb	r3, r3
 8000a58:	461a      	mov	r2, r3
 8000a5a:	0092      	lsls	r2, r2, #2
 8000a5c:	4413      	add	r3, r2
 8000a5e:	005b      	lsls	r3, r3, #1
 8000a60:	b2da      	uxtb	r2, r3
 8000a62:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8000a66:	3307      	adds	r3, #7
 8000a68:	781b      	ldrb	r3, [r3, #0]
 8000a6a:	4413      	add	r3, r2
 8000a6c:	b2db      	uxtb	r3, r3
 8000a6e:	3b30      	subs	r3, #48	@ 0x30
 8000a70:	b2db      	uxtb	r3, r3
 8000a72:	76bb      	strb	r3, [r7, #26]

	sTime.Hours = (time_start[9] - '0') * 10 + (time_start[10] - '0');
 8000a74:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8000a78:	3309      	adds	r3, #9
 8000a7a:	781b      	ldrb	r3, [r3, #0]
 8000a7c:	3b30      	subs	r3, #48	@ 0x30
 8000a7e:	b2db      	uxtb	r3, r3
 8000a80:	461a      	mov	r2, r3
 8000a82:	0092      	lsls	r2, r2, #2
 8000a84:	4413      	add	r3, r2
 8000a86:	005b      	lsls	r3, r3, #1
 8000a88:	b2da      	uxtb	r2, r3
 8000a8a:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8000a8e:	330a      	adds	r3, #10
 8000a90:	781b      	ldrb	r3, [r3, #0]
 8000a92:	4413      	add	r3, r2
 8000a94:	b2db      	uxtb	r3, r3
 8000a96:	3b30      	subs	r3, #48	@ 0x30
 8000a98:	b2db      	uxtb	r3, r3
 8000a9a:	713b      	strb	r3, [r7, #4]
	sTime.Minutes = (time_start[12] - '0') * 10 + (time_start[13] - '0');
 8000a9c:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8000aa0:	330c      	adds	r3, #12
 8000aa2:	781b      	ldrb	r3, [r3, #0]
 8000aa4:	3b30      	subs	r3, #48	@ 0x30
 8000aa6:	b2db      	uxtb	r3, r3
 8000aa8:	461a      	mov	r2, r3
 8000aaa:	0092      	lsls	r2, r2, #2
 8000aac:	4413      	add	r3, r2
 8000aae:	005b      	lsls	r3, r3, #1
 8000ab0:	b2da      	uxtb	r2, r3
 8000ab2:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8000ab6:	330d      	adds	r3, #13
 8000ab8:	781b      	ldrb	r3, [r3, #0]
 8000aba:	4413      	add	r3, r2
 8000abc:	b2db      	uxtb	r3, r3
 8000abe:	3b30      	subs	r3, #48	@ 0x30
 8000ac0:	b2db      	uxtb	r3, r3
 8000ac2:	717b      	strb	r3, [r7, #5]
	sTime.Seconds = (time_start[15] - '0') * 10 + (time_start[16] - '0');
 8000ac4:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8000ac8:	330f      	adds	r3, #15
 8000aca:	781b      	ldrb	r3, [r3, #0]
 8000acc:	3b30      	subs	r3, #48	@ 0x30
 8000ace:	b2db      	uxtb	r3, r3
 8000ad0:	461a      	mov	r2, r3
 8000ad2:	0092      	lsls	r2, r2, #2
 8000ad4:	4413      	add	r3, r2
 8000ad6:	005b      	lsls	r3, r3, #1
 8000ad8:	b2da      	uxtb	r2, r3
 8000ada:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8000ade:	3310      	adds	r3, #16
 8000ae0:	781b      	ldrb	r3, [r3, #0]
 8000ae2:	4413      	add	r3, r2
 8000ae4:	b2db      	uxtb	r3, r3
 8000ae6:	3b30      	subs	r3, #48	@ 0x30
 8000ae8:	b2db      	uxtb	r3, r3
 8000aea:	71bb      	strb	r3, [r7, #6]

	if (sDate.Month < 1 || sDate.Month > 12 ||
 8000aec:	7e7b      	ldrb	r3, [r7, #25]
 8000aee:	2b00      	cmp	r3, #0
 8000af0:	d011      	beq.n	8000b16 <Get_DateTime_From_Network+0x186>
 8000af2:	7e7b      	ldrb	r3, [r7, #25]
 8000af4:	2b0c      	cmp	r3, #12
 8000af6:	d80e      	bhi.n	8000b16 <Get_DateTime_From_Network+0x186>
        sDate.Date < 1 || sDate.Date > 31 ||
 8000af8:	7ebb      	ldrb	r3, [r7, #26]
	if (sDate.Month < 1 || sDate.Month > 12 ||
 8000afa:	2b00      	cmp	r3, #0
 8000afc:	d00b      	beq.n	8000b16 <Get_DateTime_From_Network+0x186>
        sDate.Date < 1 || sDate.Date > 31 ||
 8000afe:	7ebb      	ldrb	r3, [r7, #26]
 8000b00:	2b1f      	cmp	r3, #31
 8000b02:	d808      	bhi.n	8000b16 <Get_DateTime_From_Network+0x186>
        sTime.Hours > 23 || sTime.Minutes > 59 || sTime.Seconds > 59) {
 8000b04:	793b      	ldrb	r3, [r7, #4]
        sDate.Date < 1 || sDate.Date > 31 ||
 8000b06:	2b17      	cmp	r3, #23
 8000b08:	d805      	bhi.n	8000b16 <Get_DateTime_From_Network+0x186>
        sTime.Hours > 23 || sTime.Minutes > 59 || sTime.Seconds > 59) {
 8000b0a:	797b      	ldrb	r3, [r7, #5]
 8000b0c:	2b3b      	cmp	r3, #59	@ 0x3b
 8000b0e:	d802      	bhi.n	8000b16 <Get_DateTime_From_Network+0x186>
 8000b10:	79bb      	ldrb	r3, [r7, #6]
 8000b12:	2b3b      	cmp	r3, #59	@ 0x3b
 8000b14:	d901      	bls.n	8000b1a <Get_DateTime_From_Network+0x18a>
        return 0;
 8000b16:	2300      	movs	r3, #0
 8000b18:	e01c      	b.n	8000b54 <Get_DateTime_From_Network+0x1c4>
    }

	sDate.WeekDay = Calculate_Weekday(sDate.Year + 2000, sDate.Month, sDate.Date);
 8000b1a:	7efb      	ldrb	r3, [r7, #27]
 8000b1c:	f503 63fa 	add.w	r3, r3, #2000	@ 0x7d0
 8000b20:	b29b      	uxth	r3, r3
 8000b22:	7e79      	ldrb	r1, [r7, #25]
 8000b24:	7eba      	ldrb	r2, [r7, #26]
 8000b26:	4618      	mov	r0, r3
 8000b28:	f000 f850 	bl	8000bcc <Calculate_Weekday>
 8000b2c:	4603      	mov	r3, r0
 8000b2e:	763b      	strb	r3, [r7, #24]
	sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8000b30:	2300      	movs	r3, #0
 8000b32:	613b      	str	r3, [r7, #16]
	sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8000b34:	2300      	movs	r3, #0
 8000b36:	617b      	str	r3, [r7, #20]

	HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN);
 8000b38:	f107 0318 	add.w	r3, r7, #24
 8000b3c:	2200      	movs	r2, #0
 8000b3e:	4619      	mov	r1, r3
 8000b40:	4808      	ldr	r0, [pc, #32]	@ (8000b64 <Get_DateTime_From_Network+0x1d4>)
 8000b42:	f00d fb96 	bl	800e272 <HAL_RTC_SetDate>
	HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN);
 8000b46:	1d3b      	adds	r3, r7, #4
 8000b48:	2200      	movs	r2, #0
 8000b4a:	4619      	mov	r1, r3
 8000b4c:	4805      	ldr	r0, [pc, #20]	@ (8000b64 <Get_DateTime_From_Network+0x1d4>)
 8000b4e:	f00d fa97 	bl	800e080 <HAL_RTC_SetTime>
	return 1;
 8000b52:	2301      	movs	r3, #1
}
 8000b54:	4618      	mov	r0, r3
 8000b56:	3788      	adds	r7, #136	@ 0x88
 8000b58:	46bd      	mov	sp, r7
 8000b5a:	bd80      	pop	{r7, pc}
 8000b5c:	08013fb8 	.word	0x08013fb8
 8000b60:	08013fc4 	.word	0x08013fc4
 8000b64:	200001f8 	.word	0x200001f8

08000b68 <Set_Default_DateTime>:

/*-----DATA E ORA DI DEFAULT 1/1/2020 00:00:00-----*/
void Set_Default_DateTime(void)
{
 8000b68:	b580      	push	{r7, lr}
 8000b6a:	b086      	sub	sp, #24
 8000b6c:	af00      	add	r7, sp, #0
    RTC_DateTypeDef sDate = {0};
 8000b6e:	2300      	movs	r3, #0
 8000b70:	617b      	str	r3, [r7, #20]
    RTC_TimeTypeDef sTime = {0};
 8000b72:	463b      	mov	r3, r7
 8000b74:	2200      	movs	r2, #0
 8000b76:	601a      	str	r2, [r3, #0]
 8000b78:	605a      	str	r2, [r3, #4]
 8000b7a:	609a      	str	r2, [r3, #8]
 8000b7c:	60da      	str	r2, [r3, #12]
 8000b7e:	611a      	str	r2, [r3, #16]

    // Default: 01/01/2020 00:00:00
    sDate.Year = 20;  // 2020
 8000b80:	2314      	movs	r3, #20
 8000b82:	75fb      	strb	r3, [r7, #23]
    sDate.Month = RTC_MONTH_JANUARY;
 8000b84:	2301      	movs	r3, #1
 8000b86:	757b      	strb	r3, [r7, #21]
    sDate.Date = 1;
 8000b88:	2301      	movs	r3, #1
 8000b8a:	75bb      	strb	r3, [r7, #22]
    sDate.WeekDay = RTC_WEEKDAY_WEDNESDAY; // 1 Jan 2020 era mercoledì
 8000b8c:	2303      	movs	r3, #3
 8000b8e:	753b      	strb	r3, [r7, #20]

    sTime.Hours = 0;
 8000b90:	2300      	movs	r3, #0
 8000b92:	703b      	strb	r3, [r7, #0]
    sTime.Minutes = 0;
 8000b94:	2300      	movs	r3, #0
 8000b96:	707b      	strb	r3, [r7, #1]
    sTime.Seconds = 0;
 8000b98:	2300      	movs	r3, #0
 8000b9a:	70bb      	strb	r3, [r7, #2]
    sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8000b9c:	2300      	movs	r3, #0
 8000b9e:	60fb      	str	r3, [r7, #12]
    sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8000ba0:	2300      	movs	r3, #0
 8000ba2:	613b      	str	r3, [r7, #16]

    HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN);
 8000ba4:	f107 0314 	add.w	r3, r7, #20
 8000ba8:	2200      	movs	r2, #0
 8000baa:	4619      	mov	r1, r3
 8000bac:	4806      	ldr	r0, [pc, #24]	@ (8000bc8 <Set_Default_DateTime+0x60>)
 8000bae:	f00d fb60 	bl	800e272 <HAL_RTC_SetDate>
    HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN);
 8000bb2:	463b      	mov	r3, r7
 8000bb4:	2200      	movs	r2, #0
 8000bb6:	4619      	mov	r1, r3
 8000bb8:	4803      	ldr	r0, [pc, #12]	@ (8000bc8 <Set_Default_DateTime+0x60>)
 8000bba:	f00d fa61 	bl	800e080 <HAL_RTC_SetTime>
}
 8000bbe:	bf00      	nop
 8000bc0:	3718      	adds	r7, #24
 8000bc2:	46bd      	mov	sp, r7
 8000bc4:	bd80      	pop	{r7, pc}
 8000bc6:	bf00      	nop
 8000bc8:	200001f8 	.word	0x200001f8

08000bcc <Calculate_Weekday>:

/*-----CALCOLO GIORNO SETTIMANA-----*/
uint8_t Calculate_Weekday(uint16_t year, uint8_t month, uint8_t day)
{
 8000bcc:	b480      	push	{r7}
 8000bce:	b085      	sub	sp, #20
 8000bd0:	af00      	add	r7, sp, #0
 8000bd2:	4603      	mov	r3, r0
 8000bd4:	80fb      	strh	r3, [r7, #6]
 8000bd6:	460b      	mov	r3, r1
 8000bd8:	717b      	strb	r3, [r7, #5]
 8000bda:	4613      	mov	r3, r2
 8000bdc:	713b      	strb	r3, [r7, #4]
    // Algoritmo di Zeller per calcolo giorno settimana
    if (month < 3) {
 8000bde:	797b      	ldrb	r3, [r7, #5]
 8000be0:	2b02      	cmp	r3, #2
 8000be2:	d805      	bhi.n	8000bf0 <Calculate_Weekday+0x24>
        month += 12;
 8000be4:	797b      	ldrb	r3, [r7, #5]
 8000be6:	330c      	adds	r3, #12
 8000be8:	717b      	strb	r3, [r7, #5]
        year--;
 8000bea:	88fb      	ldrh	r3, [r7, #6]
 8000bec:	3b01      	subs	r3, #1
 8000bee:	80fb      	strh	r3, [r7, #6]
    }
    uint8_t zeller_day = (day + ((13 * (month + 1)) / 5) + year + (year / 4) - (year / 100) + (year / 400)) % 7;
 8000bf0:	7939      	ldrb	r1, [r7, #4]
 8000bf2:	797b      	ldrb	r3, [r7, #5]
 8000bf4:	1c5a      	adds	r2, r3, #1
 8000bf6:	4613      	mov	r3, r2
 8000bf8:	005b      	lsls	r3, r3, #1
 8000bfa:	4413      	add	r3, r2
 8000bfc:	009b      	lsls	r3, r3, #2
 8000bfe:	4413      	add	r3, r2
 8000c00:	4a1e      	ldr	r2, [pc, #120]	@ (8000c7c <Calculate_Weekday+0xb0>)
 8000c02:	fb82 0203 	smull	r0, r2, r2, r3
 8000c06:	1052      	asrs	r2, r2, #1
 8000c08:	17db      	asrs	r3, r3, #31
 8000c0a:	1ad3      	subs	r3, r2, r3
 8000c0c:	18ca      	adds	r2, r1, r3
 8000c0e:	88fb      	ldrh	r3, [r7, #6]
 8000c10:	4413      	add	r3, r2
 8000c12:	88fa      	ldrh	r2, [r7, #6]
 8000c14:	0892      	lsrs	r2, r2, #2
 8000c16:	b292      	uxth	r2, r2
 8000c18:	4413      	add	r3, r2
 8000c1a:	88fa      	ldrh	r2, [r7, #6]
 8000c1c:	4918      	ldr	r1, [pc, #96]	@ (8000c80 <Calculate_Weekday+0xb4>)
 8000c1e:	fba1 1202 	umull	r1, r2, r1, r2
 8000c22:	0952      	lsrs	r2, r2, #5
 8000c24:	b292      	uxth	r2, r2
 8000c26:	1a9b      	subs	r3, r3, r2
 8000c28:	88fa      	ldrh	r2, [r7, #6]
 8000c2a:	4915      	ldr	r1, [pc, #84]	@ (8000c80 <Calculate_Weekday+0xb4>)
 8000c2c:	fba1 1202 	umull	r1, r2, r1, r2
 8000c30:	09d2      	lsrs	r2, r2, #7
 8000c32:	b292      	uxth	r2, r2
 8000c34:	441a      	add	r2, r3
 8000c36:	4b13      	ldr	r3, [pc, #76]	@ (8000c84 <Calculate_Weekday+0xb8>)
 8000c38:	fb83 1302 	smull	r1, r3, r3, r2
 8000c3c:	4413      	add	r3, r2
 8000c3e:	1099      	asrs	r1, r3, #2
 8000c40:	17d3      	asrs	r3, r2, #31
 8000c42:	1ac9      	subs	r1, r1, r3
 8000c44:	460b      	mov	r3, r1
 8000c46:	00db      	lsls	r3, r3, #3
 8000c48:	1a5b      	subs	r3, r3, r1
 8000c4a:	1ad1      	subs	r1, r2, r3
 8000c4c:	460b      	mov	r3, r1
 8000c4e:	73fb      	strb	r3, [r7, #15]

    uint8_t hal_weekday_map[] = {RTC_WEEKDAY_SATURDAY, RTC_WEEKDAY_SUNDAY, RTC_WEEKDAY_MONDAY,
 8000c50:	4a0d      	ldr	r2, [pc, #52]	@ (8000c88 <Calculate_Weekday+0xbc>)
 8000c52:	f107 0308 	add.w	r3, r7, #8
 8000c56:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000c5a:	6018      	str	r0, [r3, #0]
 8000c5c:	3304      	adds	r3, #4
 8000c5e:	8019      	strh	r1, [r3, #0]
 8000c60:	3302      	adds	r3, #2
 8000c62:	0c0a      	lsrs	r2, r1, #16
 8000c64:	701a      	strb	r2, [r3, #0]
                                 RTC_WEEKDAY_TUESDAY, RTC_WEEKDAY_WEDNESDAY, RTC_WEEKDAY_THURSDAY, RTC_WEEKDAY_FRIDAY};

    return hal_weekday_map[zeller_day];
 8000c66:	7bfb      	ldrb	r3, [r7, #15]
 8000c68:	3310      	adds	r3, #16
 8000c6a:	443b      	add	r3, r7
 8000c6c:	f813 3c08 	ldrb.w	r3, [r3, #-8]
}
 8000c70:	4618      	mov	r0, r3
 8000c72:	3714      	adds	r7, #20
 8000c74:	46bd      	mov	sp, r7
 8000c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c7a:	4770      	bx	lr
 8000c7c:	66666667 	.word	0x66666667
 8000c80:	51eb851f 	.word	0x51eb851f
 8000c84:	92492493 	.word	0x92492493
 8000c88:	08013fd0 	.word	0x08013fd0

08000c8c <SIM_Init>:
#include <stdlib.h>
#include <SIM7000.h>

/*------INIZIALIZZAZIONE DEL MODULO LTE------*/
void SIM_Init(void)
{
 8000c8c:	b580      	push	{r7, lr}
 8000c8e:	f5ad 7d04 	sub.w	sp, sp, #528	@ 0x210
 8000c92:	af00      	add	r7, sp, #0
	char command[256];
	char response[256];
	sprintf(sys.apn, "a");
 8000c94:	49bb      	ldr	r1, [pc, #748]	@ (8000f84 <SIM_Init+0x2f8>)
 8000c96:	48bc      	ldr	r0, [pc, #752]	@ (8000f88 <SIM_Init+0x2fc>)
 8000c98:	f012 f852 	bl	8012d40 <siprintf>
	sprintf(sys.MQTT.clientID, "a");
 8000c9c:	49b9      	ldr	r1, [pc, #740]	@ (8000f84 <SIM_Init+0x2f8>)
 8000c9e:	48bb      	ldr	r0, [pc, #748]	@ (8000f8c <SIM_Init+0x300>)
 8000ca0:	f012 f84e 	bl	8012d40 <siprintf>
	sprintf(sys.MQTT.server_name, "a");
 8000ca4:	49b7      	ldr	r1, [pc, #732]	@ (8000f84 <SIM_Init+0x2f8>)
 8000ca6:	48ba      	ldr	r0, [pc, #744]	@ (8000f90 <SIM_Init+0x304>)
 8000ca8:	f012 f84a 	bl	8012d40 <siprintf>
	sprintf(sys.MQTT.port, "a");
 8000cac:	49b5      	ldr	r1, [pc, #724]	@ (8000f84 <SIM_Init+0x2f8>)
 8000cae:	48b9      	ldr	r0, [pc, #740]	@ (8000f94 <SIM_Init+0x308>)
 8000cb0:	f012 f846 	bl	8012d40 <siprintf>
	sprintf(sys.MQTT.username, "a");
 8000cb4:	49b3      	ldr	r1, [pc, #716]	@ (8000f84 <SIM_Init+0x2f8>)
 8000cb6:	48b8      	ldr	r0, [pc, #736]	@ (8000f98 <SIM_Init+0x30c>)
 8000cb8:	f012 f842 	bl	8012d40 <siprintf>
	sprintf(sys.MQTT.password, "a");
 8000cbc:	49b1      	ldr	r1, [pc, #708]	@ (8000f84 <SIM_Init+0x2f8>)
 8000cbe:	48b7      	ldr	r0, [pc, #732]	@ (8000f9c <SIM_Init+0x310>)
 8000cc0:	f012 f83e 	bl	8012d40 <siprintf>
	sprintf(sys.TCP.IP_address, "a");
 8000cc4:	49af      	ldr	r1, [pc, #700]	@ (8000f84 <SIM_Init+0x2f8>)
 8000cc6:	48b6      	ldr	r0, [pc, #728]	@ (8000fa0 <SIM_Init+0x314>)
 8000cc8:	f012 f83a 	bl	8012d40 <siprintf>
	sprintf(sys.TCP.Port, "a");
 8000ccc:	49ad      	ldr	r1, [pc, #692]	@ (8000f84 <SIM_Init+0x2f8>)
 8000cce:	48b5      	ldr	r0, [pc, #724]	@ (8000fa4 <SIM_Init+0x318>)
 8000cd0:	f012 f836 	bl	8012d40 <siprintf>
	strcpy(sys.MQTT.Data_Topic, config.data_topic);
 8000cd4:	49b4      	ldr	r1, [pc, #720]	@ (8000fa8 <SIM_Init+0x31c>)
 8000cd6:	48b5      	ldr	r0, [pc, #724]	@ (8000fac <SIM_Init+0x320>)
 8000cd8:	f012 f90e 	bl	8012ef8 <strcpy>
	strcpy(sys.MQTT.Command_Topic, config.command_topic);
 8000cdc:	49b4      	ldr	r1, [pc, #720]	@ (8000fb0 <SIM_Init+0x324>)
 8000cde:	48b5      	ldr	r0, [pc, #724]	@ (8000fb4 <SIM_Init+0x328>)
 8000ce0:	f012 f90a 	bl	8012ef8 <strcpy>
	strcpy(sys.MQTT.OTA_Topic, config.ota_topic);
 8000ce4:	49b4      	ldr	r1, [pc, #720]	@ (8000fb8 <SIM_Init+0x32c>)
 8000ce6:	48b5      	ldr	r0, [pc, #724]	@ (8000fbc <SIM_Init+0x330>)
 8000ce8:	f012 f906 	bl	8012ef8 <strcpy>

	SIM_Power_On();
 8000cec:	f000 fa02 	bl	80010f4 <SIM_Power_On>
	HAL_Delay(5000);
 8000cf0:	f241 3088 	movw	r0, #5000	@ 0x1388
 8000cf4:	f008 f9f2 	bl	80090dc <HAL_Delay>

	SIM_Send_Command("AT\r");                                                                     //Verifica comunicazione
 8000cf8:	48b1      	ldr	r0, [pc, #708]	@ (8000fc0 <SIM_Init+0x334>)
 8000cfa:	f000 fa11 	bl	8001120 <SIM_Send_Command>
	SIM_Receive_Response(response);
 8000cfe:	f107 030c 	add.w	r3, r7, #12
 8000d02:	4618      	mov	r0, r3
 8000d04:	f000 fa38 	bl	8001178 <SIM_Receive_Response>
	if(strstr(response, "OK") == NULL)
 8000d08:	f107 030c 	add.w	r3, r7, #12
 8000d0c:	49ad      	ldr	r1, [pc, #692]	@ (8000fc4 <SIM_Init+0x338>)
 8000d0e:	4618      	mov	r0, r3
 8000d10:	f012 f8b0 	bl	8012e74 <strstr>
 8000d14:	4603      	mov	r3, r0
 8000d16:	2b00      	cmp	r3, #0
 8000d18:	d101      	bne.n	8000d1e <SIM_Init+0x92>
	{
		while(1);
 8000d1a:	bf00      	nop
 8000d1c:	e7fd      	b.n	8000d1a <SIM_Init+0x8e>
	}

	SIM_Send_Command("AT+IPR=921600\r");                                                          //Baudrate a 921600
 8000d1e:	48aa      	ldr	r0, [pc, #680]	@ (8000fc8 <SIM_Init+0x33c>)
 8000d20:	f000 f9fe 	bl	8001120 <SIM_Send_Command>
	SIM_Wait_Response("OK");
 8000d24:	48a7      	ldr	r0, [pc, #668]	@ (8000fc4 <SIM_Init+0x338>)
 8000d26:	f000 fc87 	bl	8001638 <SIM_Wait_Response>

	huart1.Init.BaudRate = 921600;
 8000d2a:	4ba8      	ldr	r3, [pc, #672]	@ (8000fcc <SIM_Init+0x340>)
 8000d2c:	f44f 2261 	mov.w	r2, #921600	@ 0xe1000
 8000d30:	605a      	str	r2, [r3, #4]
	HAL_UART_Init(LTE_UART);
 8000d32:	48a6      	ldr	r0, [pc, #664]	@ (8000fcc <SIM_Init+0x340>)
 8000d34:	f010 fc18 	bl	8011568 <HAL_UART_Init>

	SIM_Send_Command("AT+CFUN=1\r");                                                              //Full functionality
 8000d38:	48a5      	ldr	r0, [pc, #660]	@ (8000fd0 <SIM_Init+0x344>)
 8000d3a:	f000 f9f1 	bl	8001120 <SIM_Send_Command>
	SIM_Wait_Response("OK");
 8000d3e:	48a1      	ldr	r0, [pc, #644]	@ (8000fc4 <SIM_Init+0x338>)
 8000d40:	f000 fc7a 	bl	8001638 <SIM_Wait_Response>

	SIM_Send_Command("AT+CNMP=38\r");                                                             //Modalità solo LTE o NB-IoT
 8000d44:	48a3      	ldr	r0, [pc, #652]	@ (8000fd4 <SIM_Init+0x348>)
 8000d46:	f000 f9eb 	bl	8001120 <SIM_Send_Command>
	SIM_Wait_Response("OK");
 8000d4a:	489e      	ldr	r0, [pc, #632]	@ (8000fc4 <SIM_Init+0x338>)
 8000d4c:	f000 fc74 	bl	8001638 <SIM_Wait_Response>

	SIM_Send_Command("AT+CMNB=2\r");                                                              //NB-IoT
 8000d50:	48a1      	ldr	r0, [pc, #644]	@ (8000fd8 <SIM_Init+0x34c>)
 8000d52:	f000 f9e5 	bl	8001120 <SIM_Send_Command>
	SIM_Wait_Response("OK");
 8000d56:	489b      	ldr	r0, [pc, #620]	@ (8000fc4 <SIM_Init+0x338>)
 8000d58:	f000 fc6e 	bl	8001638 <SIM_Wait_Response>

	SIM_Send_Command("AT+NBSC=1\r");                                                              //Abilitazione scrambling feature DA VEDERE SE L'OPERATORE LA RICHIEDE
 8000d5c:	489f      	ldr	r0, [pc, #636]	@ (8000fdc <SIM_Init+0x350>)
 8000d5e:	f000 f9df 	bl	8001120 <SIM_Send_Command>
	SIM_Wait_Response("OK");
 8000d62:	4898      	ldr	r0, [pc, #608]	@ (8000fc4 <SIM_Init+0x338>)
 8000d64:	f000 fc68 	bl	8001638 <SIM_Wait_Response>

	SIM_Send_Command("AT+CEREG?\r");                                                              //Controllo registrazione alla rete
 8000d68:	489d      	ldr	r0, [pc, #628]	@ (8000fe0 <SIM_Init+0x354>)
 8000d6a:	f000 f9d9 	bl	8001120 <SIM_Send_Command>
	SIM_Receive_Response(response);
 8000d6e:	f107 030c 	add.w	r3, r7, #12
 8000d72:	4618      	mov	r0, r3
 8000d74:	f000 fa00 	bl	8001178 <SIM_Receive_Response>
	int stat = 0;
 8000d78:	2300      	movs	r3, #0
 8000d7a:	f8c7 320c 	str.w	r3, [r7, #524]	@ 0x20c
	int n, stat_value;
	if(strstr(response, "+CEREG: ") != NULL)
 8000d7e:	f107 030c 	add.w	r3, r7, #12
 8000d82:	4998      	ldr	r1, [pc, #608]	@ (8000fe4 <SIM_Init+0x358>)
 8000d84:	4618      	mov	r0, r3
 8000d86:	f012 f875 	bl	8012e74 <strstr>
 8000d8a:	4603      	mov	r3, r0
 8000d8c:	2b00      	cmp	r3, #0
 8000d8e:	d03a      	beq.n	8000e06 <SIM_Init+0x17a>
	{
		while(stat != 1)
 8000d90:	e035      	b.n	8000dfe <SIM_Init+0x172>
		{
			if(sscanf(response, "+CEREG: %d,%d", &n, &stat_value) >= 2) 
 8000d92:	1d3b      	adds	r3, r7, #4
 8000d94:	f107 0208 	add.w	r2, r7, #8
 8000d98:	f107 000c 	add.w	r0, r7, #12
 8000d9c:	4992      	ldr	r1, [pc, #584]	@ (8000fe8 <SIM_Init+0x35c>)
 8000d9e:	f011 fff1 	bl	8012d84 <siscanf>
 8000da2:	4603      	mov	r3, r0
 8000da4:	2b01      	cmp	r3, #1
 8000da6:	dd1e      	ble.n	8000de6 <SIM_Init+0x15a>
			{
				if(stat_value == 1 || stat_value == 5)
 8000da8:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 8000dac:	f5a3 7303 	sub.w	r3, r3, #524	@ 0x20c
 8000db0:	681b      	ldr	r3, [r3, #0]
 8000db2:	2b01      	cmp	r3, #1
 8000db4:	d006      	beq.n	8000dc4 <SIM_Init+0x138>
 8000db6:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 8000dba:	f5a3 7303 	sub.w	r3, r3, #524	@ 0x20c
 8000dbe:	681b      	ldr	r3, [r3, #0]
 8000dc0:	2b05      	cmp	r3, #5
 8000dc2:	d103      	bne.n	8000dcc <SIM_Init+0x140>
			    {
					 stat = 1;
 8000dc4:	2301      	movs	r3, #1
 8000dc6:	f8c7 320c 	str.w	r3, [r7, #524]	@ 0x20c
 8000dca:	e018      	b.n	8000dfe <SIM_Init+0x172>
				}
				 else
				{
					SIM_Send_Command("AT+CEREG?\r");
 8000dcc:	4884      	ldr	r0, [pc, #528]	@ (8000fe0 <SIM_Init+0x354>)
 8000dce:	f000 f9a7 	bl	8001120 <SIM_Send_Command>
					SIM_Receive_Response(response);
 8000dd2:	f107 030c 	add.w	r3, r7, #12
 8000dd6:	4618      	mov	r0, r3
 8000dd8:	f000 f9ce 	bl	8001178 <SIM_Receive_Response>
					HAL_Delay(1000);
 8000ddc:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000de0:	f008 f97c 	bl	80090dc <HAL_Delay>
 8000de4:	e00b      	b.n	8000dfe <SIM_Init+0x172>
				}
			}
			else  
			{
				SIM_Send_Command("AT+CEREG?\r");
 8000de6:	487e      	ldr	r0, [pc, #504]	@ (8000fe0 <SIM_Init+0x354>)
 8000de8:	f000 f99a 	bl	8001120 <SIM_Send_Command>
				SIM_Receive_Response(response);
 8000dec:	f107 030c 	add.w	r3, r7, #12
 8000df0:	4618      	mov	r0, r3
 8000df2:	f000 f9c1 	bl	8001178 <SIM_Receive_Response>
				HAL_Delay(1000);
 8000df6:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000dfa:	f008 f96f 	bl	80090dc <HAL_Delay>
		while(stat != 1)
 8000dfe:	f8d7 320c 	ldr.w	r3, [r7, #524]	@ 0x20c
 8000e02:	2b01      	cmp	r3, #1
 8000e04:	d1c5      	bne.n	8000d92 <SIM_Init+0x106>
			}
		}

	}

	sprintf(command, "AT+CGDCONT=1,\"IP\",\"%s\"\r", sys.apn);                                    //Configurazione APN
 8000e06:	f507 7386 	add.w	r3, r7, #268	@ 0x10c
 8000e0a:	4a5f      	ldr	r2, [pc, #380]	@ (8000f88 <SIM_Init+0x2fc>)
 8000e0c:	4977      	ldr	r1, [pc, #476]	@ (8000fec <SIM_Init+0x360>)
 8000e0e:	4618      	mov	r0, r3
 8000e10:	f011 ff96 	bl	8012d40 <siprintf>
	SIM_Send_Command(command);
 8000e14:	f507 7386 	add.w	r3, r7, #268	@ 0x10c
 8000e18:	4618      	mov	r0, r3
 8000e1a:	f000 f981 	bl	8001120 <SIM_Send_Command>
	SIM_Wait_Response("OK");
 8000e1e:	4869      	ldr	r0, [pc, #420]	@ (8000fc4 <SIM_Init+0x338>)
 8000e20:	f000 fc0a 	bl	8001638 <SIM_Wait_Response>

	SIM_Send_Command("AT+CNACT=1\r");                                                             //Attivazione della rete
 8000e24:	4872      	ldr	r0, [pc, #456]	@ (8000ff0 <SIM_Init+0x364>)
 8000e26:	f000 f97b 	bl	8001120 <SIM_Send_Command>
	SIM_Receive_Response(response);
 8000e2a:	f107 030c 	add.w	r3, r7, #12
 8000e2e:	4618      	mov	r0, r3
 8000e30:	f000 f9a2 	bl	8001178 <SIM_Receive_Response>
	if(strstr(response, "+APP PDP: ACTIVE") == NULL)
 8000e34:	f107 030c 	add.w	r3, r7, #12
 8000e38:	496e      	ldr	r1, [pc, #440]	@ (8000ff4 <SIM_Init+0x368>)
 8000e3a:	4618      	mov	r0, r3
 8000e3c:	f012 f81a 	bl	8012e74 <strstr>
 8000e40:	4603      	mov	r3, r0
 8000e42:	2b00      	cmp	r3, #0
 8000e44:	d115      	bne.n	8000e72 <SIM_Init+0x1e6>
	{
		while(strstr(response, "+APP PDP: ACTIVE") == NULL)
 8000e46:	e00b      	b.n	8000e60 <SIM_Init+0x1d4>
		{
			SIM_Send_Command("AT+CNACT=1\r");
 8000e48:	4869      	ldr	r0, [pc, #420]	@ (8000ff0 <SIM_Init+0x364>)
 8000e4a:	f000 f969 	bl	8001120 <SIM_Send_Command>
			SIM_Receive_Response(response);
 8000e4e:	f107 030c 	add.w	r3, r7, #12
 8000e52:	4618      	mov	r0, r3
 8000e54:	f000 f990 	bl	8001178 <SIM_Receive_Response>
			HAL_Delay(1000);
 8000e58:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000e5c:	f008 f93e 	bl	80090dc <HAL_Delay>
		while(strstr(response, "+APP PDP: ACTIVE") == NULL)
 8000e60:	f107 030c 	add.w	r3, r7, #12
 8000e64:	4963      	ldr	r1, [pc, #396]	@ (8000ff4 <SIM_Init+0x368>)
 8000e66:	4618      	mov	r0, r3
 8000e68:	f012 f804 	bl	8012e74 <strstr>
 8000e6c:	4603      	mov	r3, r0
 8000e6e:	2b00      	cmp	r3, #0
 8000e70:	d0ea      	beq.n	8000e48 <SIM_Init+0x1bc>
		}
	}

	SIM_Send_Command("AT+CNACT?\r");                                                              //Verifica indirizzo IP
 8000e72:	4861      	ldr	r0, [pc, #388]	@ (8000ff8 <SIM_Init+0x36c>)
 8000e74:	f000 f954 	bl	8001120 <SIM_Send_Command>
	SIM_Receive_Response(response);
 8000e78:	f107 030c 	add.w	r3, r7, #12
 8000e7c:	4618      	mov	r0, r3
 8000e7e:	f000 f97b 	bl	8001178 <SIM_Receive_Response>
	while(!SIM_Check_IP(response))
 8000e82:	e00b      	b.n	8000e9c <SIM_Init+0x210>
	{
		SIM_Send_Command("AT+CNACT?\r");
 8000e84:	485c      	ldr	r0, [pc, #368]	@ (8000ff8 <SIM_Init+0x36c>)
 8000e86:	f000 f94b 	bl	8001120 <SIM_Send_Command>
		SIM_Receive_Response(response);
 8000e8a:	f107 030c 	add.w	r3, r7, #12
 8000e8e:	4618      	mov	r0, r3
 8000e90:	f000 f972 	bl	8001178 <SIM_Receive_Response>
		HAL_Delay(1000);
 8000e94:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000e98:	f008 f920 	bl	80090dc <HAL_Delay>
	while(!SIM_Check_IP(response))
 8000e9c:	f107 030c 	add.w	r3, r7, #12
 8000ea0:	4618      	mov	r0, r3
 8000ea2:	f000 f981 	bl	80011a8 <SIM_Check_IP>
 8000ea6:	4603      	mov	r3, r0
 8000ea8:	2b00      	cmp	r3, #0
 8000eaa:	d0eb      	beq.n	8000e84 <SIM_Init+0x1f8>
	}

	sprintf(command, "AT+SMCONF=\"URL\",\"%s\",%s\r", sys.MQTT.server_name, sys.MQTT.port);       //Configurazione MQTT
 8000eac:	f507 7086 	add.w	r0, r7, #268	@ 0x10c
 8000eb0:	4b38      	ldr	r3, [pc, #224]	@ (8000f94 <SIM_Init+0x308>)
 8000eb2:	4a37      	ldr	r2, [pc, #220]	@ (8000f90 <SIM_Init+0x304>)
 8000eb4:	4951      	ldr	r1, [pc, #324]	@ (8000ffc <SIM_Init+0x370>)
 8000eb6:	f011 ff43 	bl	8012d40 <siprintf>
	SIM_Send_Command(command);
 8000eba:	f507 7386 	add.w	r3, r7, #268	@ 0x10c
 8000ebe:	4618      	mov	r0, r3
 8000ec0:	f000 f92e 	bl	8001120 <SIM_Send_Command>
	SIM_Wait_Response("OK");
 8000ec4:	483f      	ldr	r0, [pc, #252]	@ (8000fc4 <SIM_Init+0x338>)
 8000ec6:	f000 fbb7 	bl	8001638 <SIM_Wait_Response>

	sprintf(command, "AT+SMCONF=\"CLIENTID\",\"%s\"\r", sys.MQTT.clientID);
 8000eca:	f507 7386 	add.w	r3, r7, #268	@ 0x10c
 8000ece:	4a2f      	ldr	r2, [pc, #188]	@ (8000f8c <SIM_Init+0x300>)
 8000ed0:	494b      	ldr	r1, [pc, #300]	@ (8001000 <SIM_Init+0x374>)
 8000ed2:	4618      	mov	r0, r3
 8000ed4:	f011 ff34 	bl	8012d40 <siprintf>
	SIM_Send_Command(command);
 8000ed8:	f507 7386 	add.w	r3, r7, #268	@ 0x10c
 8000edc:	4618      	mov	r0, r3
 8000ede:	f000 f91f 	bl	8001120 <SIM_Send_Command>
	SIM_Wait_Response("OK");
 8000ee2:	4838      	ldr	r0, [pc, #224]	@ (8000fc4 <SIM_Init+0x338>)
 8000ee4:	f000 fba8 	bl	8001638 <SIM_Wait_Response>

	SIM_Send_Command("AT+SMCONF=\"KEEPTIME\",60\r");
 8000ee8:	4846      	ldr	r0, [pc, #280]	@ (8001004 <SIM_Init+0x378>)
 8000eea:	f000 f919 	bl	8001120 <SIM_Send_Command>
	SIM_Wait_Response("OK");
 8000eee:	4835      	ldr	r0, [pc, #212]	@ (8000fc4 <SIM_Init+0x338>)
 8000ef0:	f000 fba2 	bl	8001638 <SIM_Wait_Response>

	sprintf(command, "AT+SMCONF=\"USERNAME\",\"%s\"\r", sys.MQTT.username);
 8000ef4:	f507 7386 	add.w	r3, r7, #268	@ 0x10c
 8000ef8:	4a27      	ldr	r2, [pc, #156]	@ (8000f98 <SIM_Init+0x30c>)
 8000efa:	4943      	ldr	r1, [pc, #268]	@ (8001008 <SIM_Init+0x37c>)
 8000efc:	4618      	mov	r0, r3
 8000efe:	f011 ff1f 	bl	8012d40 <siprintf>
	SIM_Send_Command(command);
 8000f02:	f507 7386 	add.w	r3, r7, #268	@ 0x10c
 8000f06:	4618      	mov	r0, r3
 8000f08:	f000 f90a 	bl	8001120 <SIM_Send_Command>
	SIM_Wait_Response("OK");
 8000f0c:	482d      	ldr	r0, [pc, #180]	@ (8000fc4 <SIM_Init+0x338>)
 8000f0e:	f000 fb93 	bl	8001638 <SIM_Wait_Response>

	sprintf(command, "AT+SMCONF=\"PASSWORD\",\"%s\"\r", sys.MQTT.password);
 8000f12:	f507 7386 	add.w	r3, r7, #268	@ 0x10c
 8000f16:	4a21      	ldr	r2, [pc, #132]	@ (8000f9c <SIM_Init+0x310>)
 8000f18:	493c      	ldr	r1, [pc, #240]	@ (800100c <SIM_Init+0x380>)
 8000f1a:	4618      	mov	r0, r3
 8000f1c:	f011 ff10 	bl	8012d40 <siprintf>
	SIM_Send_Command(command);
 8000f20:	f507 7386 	add.w	r3, r7, #268	@ 0x10c
 8000f24:	4618      	mov	r0, r3
 8000f26:	f000 f8fb 	bl	8001120 <SIM_Send_Command>
	SIM_Wait_Response("OK");
 8000f2a:	4826      	ldr	r0, [pc, #152]	@ (8000fc4 <SIM_Init+0x338>)
 8000f2c:	f000 fb84 	bl	8001638 <SIM_Wait_Response>

	SIM_Send_Command("AT+SMCONF=\"QOS\",1\r");
 8000f30:	4837      	ldr	r0, [pc, #220]	@ (8001010 <SIM_Init+0x384>)
 8000f32:	f000 f8f5 	bl	8001120 <SIM_Send_Command>
	SIM_Wait_Response("OK");
 8000f36:	4823      	ldr	r0, [pc, #140]	@ (8000fc4 <SIM_Init+0x338>)
 8000f38:	f000 fb7e 	bl	8001638 <SIM_Wait_Response>

	SIM_Send_Command("AT+SMCONF=\"RETAIN\",0\r");
 8000f3c:	4835      	ldr	r0, [pc, #212]	@ (8001014 <SIM_Init+0x388>)
 8000f3e:	f000 f8ef 	bl	8001120 <SIM_Send_Command>
	SIM_Wait_Response("OK");
 8000f42:	4820      	ldr	r0, [pc, #128]	@ (8000fc4 <SIM_Init+0x338>)
 8000f44:	f000 fb78 	bl	8001638 <SIM_Wait_Response>

	sprintf(command, "AT+SMCONF=\"TOPIC\",\"%s\"\r", sys.MQTT.Data_Topic);
 8000f48:	f507 7386 	add.w	r3, r7, #268	@ 0x10c
 8000f4c:	4a17      	ldr	r2, [pc, #92]	@ (8000fac <SIM_Init+0x320>)
 8000f4e:	4932      	ldr	r1, [pc, #200]	@ (8001018 <SIM_Init+0x38c>)
 8000f50:	4618      	mov	r0, r3
 8000f52:	f011 fef5 	bl	8012d40 <siprintf>
	SIM_Send_Command(command);
 8000f56:	f507 7386 	add.w	r3, r7, #268	@ 0x10c
 8000f5a:	4618      	mov	r0, r3
 8000f5c:	f000 f8e0 	bl	8001120 <SIM_Send_Command>
	SIM_Wait_Response("OK");
 8000f60:	4818      	ldr	r0, [pc, #96]	@ (8000fc4 <SIM_Init+0x338>)
 8000f62:	f000 fb69 	bl	8001638 <SIM_Wait_Response>

	SIM_Send_Command("AT+SMCONN\r");                                                              //Connessione al broker MQTT
 8000f66:	482d      	ldr	r0, [pc, #180]	@ (800101c <SIM_Init+0x390>)
 8000f68:	f000 f8da 	bl	8001120 <SIM_Send_Command>
	SIM_Wait_Response("OK");
 8000f6c:	4815      	ldr	r0, [pc, #84]	@ (8000fc4 <SIM_Init+0x338>)
 8000f6e:	f000 fb63 	bl	8001638 <SIM_Wait_Response>

	SIM_Send_Command("AT+SMSTATE?\r");                                                            //Verifica connessione al broker MQTT
 8000f72:	482b      	ldr	r0, [pc, #172]	@ (8001020 <SIM_Init+0x394>)
 8000f74:	f000 f8d4 	bl	8001120 <SIM_Send_Command>
	SIM_Receive_Response(response);
 8000f78:	f107 030c 	add.w	r3, r7, #12
 8000f7c:	4618      	mov	r0, r3
 8000f7e:	f000 f8fb 	bl	8001178 <SIM_Receive_Response>
	while(!SIM_Check_MQTT_State(response))
 8000f82:	e05b      	b.n	800103c <SIM_Init+0x3b0>
 8000f84:	08013fd8 	.word	0x08013fd8
 8000f88:	200015f8 	.word	0x200015f8
 8000f8c:	200017f8 	.word	0x200017f8
 8000f90:	20001668 	.word	0x20001668
 8000f94:	200016cc 	.word	0x200016cc
 8000f98:	20001730 	.word	0x20001730
 8000f9c:	20001794 	.word	0x20001794
 8000fa0:	20001988 	.word	0x20001988
 8000fa4:	200019ec 	.word	0x200019ec
 8000fa8:	20001abc 	.word	0x20001abc
 8000fac:	2000185c 	.word	0x2000185c
 8000fb0:	20001afc 	.word	0x20001afc
 8000fb4:	200018c0 	.word	0x200018c0
 8000fb8:	20001b3c 	.word	0x20001b3c
 8000fbc:	20001924 	.word	0x20001924
 8000fc0:	08013fdc 	.word	0x08013fdc
 8000fc4:	08013fe0 	.word	0x08013fe0
 8000fc8:	08013fe4 	.word	0x08013fe4
 8000fcc:	2000049c 	.word	0x2000049c
 8000fd0:	08013ff4 	.word	0x08013ff4
 8000fd4:	08014000 	.word	0x08014000
 8000fd8:	0801400c 	.word	0x0801400c
 8000fdc:	08014018 	.word	0x08014018
 8000fe0:	08014024 	.word	0x08014024
 8000fe4:	08014030 	.word	0x08014030
 8000fe8:	0801403c 	.word	0x0801403c
 8000fec:	0801404c 	.word	0x0801404c
 8000ff0:	08014064 	.word	0x08014064
 8000ff4:	08014070 	.word	0x08014070
 8000ff8:	08014084 	.word	0x08014084
 8000ffc:	08014090 	.word	0x08014090
 8001000:	080140ac 	.word	0x080140ac
 8001004:	080140c8 	.word	0x080140c8
 8001008:	080140e4 	.word	0x080140e4
 800100c:	08014100 	.word	0x08014100
 8001010:	0801411c 	.word	0x0801411c
 8001014:	08014130 	.word	0x08014130
 8001018:	08014148 	.word	0x08014148
 800101c:	08014160 	.word	0x08014160
 8001020:	0801416c 	.word	0x0801416c
	{
		SIM_Send_Command("AT+SMSTATE?\r");
 8001024:	482a      	ldr	r0, [pc, #168]	@ (80010d0 <SIM_Init+0x444>)
 8001026:	f000 f87b 	bl	8001120 <SIM_Send_Command>
		SIM_Receive_Response(response);
 800102a:	f107 030c 	add.w	r3, r7, #12
 800102e:	4618      	mov	r0, r3
 8001030:	f000 f8a2 	bl	8001178 <SIM_Receive_Response>
		HAL_Delay(1000);
 8001034:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001038:	f008 f850 	bl	80090dc <HAL_Delay>
	while(!SIM_Check_MQTT_State(response))
 800103c:	f107 030c 	add.w	r3, r7, #12
 8001040:	4618      	mov	r0, r3
 8001042:	f000 f8db 	bl	80011fc <SIM_Check_MQTT_State>
 8001046:	4603      	mov	r3, r0
 8001048:	2b00      	cmp	r3, #0
 800104a:	d0eb      	beq.n	8001024 <SIM_Init+0x398>
	}

	sprintf(command, "AT+SMSUB=\"%s\",1\r", sys.MQTT.Command_Topic);                              //Iscrizione al topic per ricezione comandi dal server
 800104c:	f507 7386 	add.w	r3, r7, #268	@ 0x10c
 8001050:	4a20      	ldr	r2, [pc, #128]	@ (80010d4 <SIM_Init+0x448>)
 8001052:	4921      	ldr	r1, [pc, #132]	@ (80010d8 <SIM_Init+0x44c>)
 8001054:	4618      	mov	r0, r3
 8001056:	f011 fe73 	bl	8012d40 <siprintf>
	SIM_Send_Command(command);
 800105a:	f507 7386 	add.w	r3, r7, #268	@ 0x10c
 800105e:	4618      	mov	r0, r3
 8001060:	f000 f85e 	bl	8001120 <SIM_Send_Command>
	SIM_Wait_Response("OK");
 8001064:	481d      	ldr	r0, [pc, #116]	@ (80010dc <SIM_Init+0x450>)
 8001066:	f000 fae7 	bl	8001638 <SIM_Wait_Response>

	sprintf(command, "AT+CIPSTART=\"TCP\",\"%s\",%s\r", sys.TCP.IP_address, sys.TCP.Port);        //Connessione TCP
 800106a:	f507 7086 	add.w	r0, r7, #268	@ 0x10c
 800106e:	4b1c      	ldr	r3, [pc, #112]	@ (80010e0 <SIM_Init+0x454>)
 8001070:	4a1c      	ldr	r2, [pc, #112]	@ (80010e4 <SIM_Init+0x458>)
 8001072:	491d      	ldr	r1, [pc, #116]	@ (80010e8 <SIM_Init+0x45c>)
 8001074:	f011 fe64 	bl	8012d40 <siprintf>
	SIM_Send_Command(command);
 8001078:	f507 7386 	add.w	r3, r7, #268	@ 0x10c
 800107c:	4618      	mov	r0, r3
 800107e:	f000 f84f 	bl	8001120 <SIM_Send_Command>
	SIM_Wait_Response("CONNECT OK");
 8001082:	481a      	ldr	r0, [pc, #104]	@ (80010ec <SIM_Init+0x460>)
 8001084:	f000 fad8 	bl	8001638 <SIM_Wait_Response>

	SIM_Send_Command("AT+CIPSTATUS=0\r");                                                        //Verifica connessione al server TCP
 8001088:	4819      	ldr	r0, [pc, #100]	@ (80010f0 <SIM_Init+0x464>)
 800108a:	f000 f849 	bl	8001120 <SIM_Send_Command>
	SIM_Receive_Response(response);
 800108e:	f107 030c 	add.w	r3, r7, #12
 8001092:	4618      	mov	r0, r3
 8001094:	f000 f870 	bl	8001178 <SIM_Receive_Response>
	while(!SIM_Check_TCP_State(response))
 8001098:	e00b      	b.n	80010b2 <SIM_Init+0x426>
	{
		SIM_Send_Command("AT+CIPSTATUS=0\r");
 800109a:	4815      	ldr	r0, [pc, #84]	@ (80010f0 <SIM_Init+0x464>)
 800109c:	f000 f840 	bl	8001120 <SIM_Send_Command>
		SIM_Receive_Response(response);
 80010a0:	f107 030c 	add.w	r3, r7, #12
 80010a4:	4618      	mov	r0, r3
 80010a6:	f000 f867 	bl	8001178 <SIM_Receive_Response>
		HAL_Delay(1000);
 80010aa:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80010ae:	f008 f815 	bl	80090dc <HAL_Delay>
	while(!SIM_Check_TCP_State(response))
 80010b2:	f107 030c 	add.w	r3, r7, #12
 80010b6:	4618      	mov	r0, r3
 80010b8:	f000 f8c6 	bl	8001248 <SIM_Check_TCP_State>
 80010bc:	4603      	mov	r3, r0
 80010be:	2b00      	cmp	r3, #0
 80010c0:	d0eb      	beq.n	800109a <SIM_Init+0x40e>
	}

}
 80010c2:	bf00      	nop
 80010c4:	bf00      	nop
 80010c6:	f507 7704 	add.w	r7, r7, #528	@ 0x210
 80010ca:	46bd      	mov	sp, r7
 80010cc:	bd80      	pop	{r7, pc}
 80010ce:	bf00      	nop
 80010d0:	0801416c 	.word	0x0801416c
 80010d4:	200018c0 	.word	0x200018c0
 80010d8:	0801417c 	.word	0x0801417c
 80010dc:	08013fe0 	.word	0x08013fe0
 80010e0:	200019ec 	.word	0x200019ec
 80010e4:	20001988 	.word	0x20001988
 80010e8:	08014190 	.word	0x08014190
 80010ec:	080141ac 	.word	0x080141ac
 80010f0:	080141b8 	.word	0x080141b8

080010f4 <SIM_Power_On>:

/*------ACCENSIONE DEL MODULO LTE------*/
void SIM_Power_On(void)
{
 80010f4:	b580      	push	{r7, lr}
 80010f6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LTE_POWER_ON_GPIO_Port, LTE_POWER_ON_Pin, GPIO_PIN_SET);
 80010f8:	2201      	movs	r2, #1
 80010fa:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80010fe:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001102:	f00a f9b3 	bl	800b46c <HAL_GPIO_WritePin>
	HAL_Delay(1000);
 8001106:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800110a:	f007 ffe7 	bl	80090dc <HAL_Delay>
	HAL_GPIO_WritePin(LTE_POWER_ON_GPIO_Port, LTE_POWER_ON_Pin, GPIO_PIN_RESET);
 800110e:	2200      	movs	r2, #0
 8001110:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8001114:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001118:	f00a f9a8 	bl	800b46c <HAL_GPIO_WritePin>
}
 800111c:	bf00      	nop
 800111e:	bd80      	pop	{r7, pc}

08001120 <SIM_Send_Command>:
	HAL_GPIO_WritePin(LTE_RESET_GPIO_Port, LTE_RESET_Pin, GPIO_PIN_RESET);
}

/*------INVIO COMANDO AL MODULO LTE------*/
void SIM_Send_Command(char* command)
{
 8001120:	b580      	push	{r7, lr}
 8001122:	b084      	sub	sp, #16
 8001124:	af00      	add	r7, sp, #0
 8001126:	6078      	str	r0, [r7, #4]
	uint16_t len = (uint16_t)strlen(command);
 8001128:	6878      	ldr	r0, [r7, #4]
 800112a:	f7ff f85b 	bl	80001e4 <strlen>
 800112e:	4603      	mov	r3, r0
 8001130:	81fb      	strh	r3, [r7, #14]

	HAL_UART_Transmit(LTE_UART, (uint8_t*)command, len, 100);
 8001132:	89fa      	ldrh	r2, [r7, #14]
 8001134:	2364      	movs	r3, #100	@ 0x64
 8001136:	6879      	ldr	r1, [r7, #4]
 8001138:	4803      	ldr	r0, [pc, #12]	@ (8001148 <SIM_Send_Command+0x28>)
 800113a:	f010 fab9 	bl	80116b0 <HAL_UART_Transmit>
}
 800113e:	bf00      	nop
 8001140:	3710      	adds	r7, #16
 8001142:	46bd      	mov	sp, r7
 8001144:	bd80      	pop	{r7, pc}
 8001146:	bf00      	nop
 8001148:	2000049c 	.word	0x2000049c

0800114c <SIM_Send_Command_DMA>:

/*------INVIO COMANDO AL MODULO LTE (DMA)------*/
void SIM_Send_Command_DMA(char* command)
{
 800114c:	b580      	push	{r7, lr}
 800114e:	b084      	sub	sp, #16
 8001150:	af00      	add	r7, sp, #0
 8001152:	6078      	str	r0, [r7, #4]
	uint16_t len = (uint16_t)strlen(command);
 8001154:	6878      	ldr	r0, [r7, #4]
 8001156:	f7ff f845 	bl	80001e4 <strlen>
 800115a:	4603      	mov	r3, r0
 800115c:	81fb      	strh	r3, [r7, #14]

	HAL_UART_Transmit_DMA(LTE_UART, (uint8_t*)command, len);
 800115e:	89fb      	ldrh	r3, [r7, #14]
 8001160:	461a      	mov	r2, r3
 8001162:	6879      	ldr	r1, [r7, #4]
 8001164:	4803      	ldr	r0, [pc, #12]	@ (8001174 <SIM_Send_Command_DMA+0x28>)
 8001166:	f010 fbf5 	bl	8011954 <HAL_UART_Transmit_DMA>
}
 800116a:	bf00      	nop
 800116c:	3710      	adds	r7, #16
 800116e:	46bd      	mov	sp, r7
 8001170:	bd80      	pop	{r7, pc}
 8001172:	bf00      	nop
 8001174:	2000049c 	.word	0x2000049c

08001178 <SIM_Receive_Response>:

/*------RICEZIONE RISPOSTA DAL MODULO LTE------*/
void SIM_Receive_Response(char* response)
{
 8001178:	b580      	push	{r7, lr}
 800117a:	b086      	sub	sp, #24
 800117c:	af02      	add	r7, sp, #8
 800117e:	6078      	str	r0, [r7, #4]
	uint16_t max_size = 256;
 8001180:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001184:	81fb      	strh	r3, [r7, #14]
	uint16_t RxLen = 0;
 8001186:	2300      	movs	r3, #0
 8001188:	81bb      	strh	r3, [r7, #12]

	HAL_UARTEx_ReceiveToIdle(LTE_UART, (uint8_t *)response, max_size, &RxLen, 200);
 800118a:	f107 030c 	add.w	r3, r7, #12
 800118e:	89fa      	ldrh	r2, [r7, #14]
 8001190:	21c8      	movs	r1, #200	@ 0xc8
 8001192:	9100      	str	r1, [sp, #0]
 8001194:	6879      	ldr	r1, [r7, #4]
 8001196:	4803      	ldr	r0, [pc, #12]	@ (80011a4 <SIM_Receive_Response+0x2c>)
 8001198:	f011 fbf1 	bl	801297e <HAL_UARTEx_ReceiveToIdle>
}
 800119c:	bf00      	nop
 800119e:	3710      	adds	r7, #16
 80011a0:	46bd      	mov	sp, r7
 80011a2:	bd80      	pop	{r7, pc}
 80011a4:	2000049c 	.word	0x2000049c

080011a8 <SIM_Check_IP>:

/*------CONTROLLO INDIRIZZO IP------*/
int SIM_Check_IP(const char* response)
{
 80011a8:	b580      	push	{r7, lr}
 80011aa:	b086      	sub	sp, #24
 80011ac:	af00      	add	r7, sp, #0
 80011ae:	6078      	str	r0, [r7, #4]
	char* cnact_pos = strstr(response, "+CNACT:");
 80011b0:	4910      	ldr	r1, [pc, #64]	@ (80011f4 <SIM_Check_IP+0x4c>)
 80011b2:	6878      	ldr	r0, [r7, #4]
 80011b4:	f011 fe5e 	bl	8012e74 <strstr>
 80011b8:	6178      	str	r0, [r7, #20]
    if(cnact_pos != NULL) {
 80011ba:	697b      	ldr	r3, [r7, #20]
 80011bc:	2b00      	cmp	r3, #0
 80011be:	d014      	beq.n	80011ea <SIM_Check_IP+0x42>
        int context_id, status;
        if(sscanf(cnact_pos, "+CNACT: %d,%d", &context_id, &status) >= 2) {
 80011c0:	f107 030c 	add.w	r3, r7, #12
 80011c4:	f107 0210 	add.w	r2, r7, #16
 80011c8:	490b      	ldr	r1, [pc, #44]	@ (80011f8 <SIM_Check_IP+0x50>)
 80011ca:	6978      	ldr	r0, [r7, #20]
 80011cc:	f011 fdda 	bl	8012d84 <siscanf>
 80011d0:	4603      	mov	r3, r0
 80011d2:	2b01      	cmp	r3, #1
 80011d4:	dd09      	ble.n	80011ea <SIM_Check_IP+0x42>
            return (context_id == 1 && status == 1) ? 1 : 0;
 80011d6:	693b      	ldr	r3, [r7, #16]
 80011d8:	2b01      	cmp	r3, #1
 80011da:	d104      	bne.n	80011e6 <SIM_Check_IP+0x3e>
 80011dc:	68fb      	ldr	r3, [r7, #12]
 80011de:	2b01      	cmp	r3, #1
 80011e0:	d101      	bne.n	80011e6 <SIM_Check_IP+0x3e>
 80011e2:	2301      	movs	r3, #1
 80011e4:	e002      	b.n	80011ec <SIM_Check_IP+0x44>
 80011e6:	2300      	movs	r3, #0
 80011e8:	e000      	b.n	80011ec <SIM_Check_IP+0x44>
        }
    }
    return 0;
 80011ea:	2300      	movs	r3, #0
}
 80011ec:	4618      	mov	r0, r3
 80011ee:	3718      	adds	r7, #24
 80011f0:	46bd      	mov	sp, r7
 80011f2:	bd80      	pop	{r7, pc}
 80011f4:	080141c8 	.word	0x080141c8
 80011f8:	080141d0 	.word	0x080141d0

080011fc <SIM_Check_MQTT_State>:

/*------CONTROLLO STATO CONNESSIONE MQTT------*/
int SIM_Check_MQTT_State(const char* response)
{
 80011fc:	b580      	push	{r7, lr}
 80011fe:	b084      	sub	sp, #16
 8001200:	af00      	add	r7, sp, #0
 8001202:	6078      	str	r0, [r7, #4]
    char* smstate_pos = strstr(response, "+SMSTATE:");
 8001204:	490e      	ldr	r1, [pc, #56]	@ (8001240 <SIM_Check_MQTT_State+0x44>)
 8001206:	6878      	ldr	r0, [r7, #4]
 8001208:	f011 fe34 	bl	8012e74 <strstr>
 800120c:	60f8      	str	r0, [r7, #12]
    if(smstate_pos != NULL) {
 800120e:	68fb      	ldr	r3, [r7, #12]
 8001210:	2b00      	cmp	r3, #0
 8001212:	d010      	beq.n	8001236 <SIM_Check_MQTT_State+0x3a>
        int mqtt_state;
        if(sscanf(smstate_pos, "+SMSTATE: %d", &mqtt_state) >= 1) {
 8001214:	f107 0308 	add.w	r3, r7, #8
 8001218:	461a      	mov	r2, r3
 800121a:	490a      	ldr	r1, [pc, #40]	@ (8001244 <SIM_Check_MQTT_State+0x48>)
 800121c:	68f8      	ldr	r0, [r7, #12]
 800121e:	f011 fdb1 	bl	8012d84 <siscanf>
 8001222:	4603      	mov	r3, r0
 8001224:	2b00      	cmp	r3, #0
 8001226:	dd06      	ble.n	8001236 <SIM_Check_MQTT_State+0x3a>
            return (mqtt_state == 1) ? 1 : 0;
 8001228:	68bb      	ldr	r3, [r7, #8]
 800122a:	2b01      	cmp	r3, #1
 800122c:	bf0c      	ite	eq
 800122e:	2301      	moveq	r3, #1
 8001230:	2300      	movne	r3, #0
 8001232:	b2db      	uxtb	r3, r3
 8001234:	e000      	b.n	8001238 <SIM_Check_MQTT_State+0x3c>
        }
    }
    return 0;
 8001236:	2300      	movs	r3, #0
}
 8001238:	4618      	mov	r0, r3
 800123a:	3710      	adds	r7, #16
 800123c:	46bd      	mov	sp, r7
 800123e:	bd80      	pop	{r7, pc}
 8001240:	080141e0 	.word	0x080141e0
 8001244:	080141ec 	.word	0x080141ec

08001248 <SIM_Check_TCP_State>:

/*------CONTROLLO STATO CONNESSIONE TCP------*/
int SIM_Check_TCP_State(const char* response)
{
 8001248:	b580      	push	{r7, lr}
 800124a:	b084      	sub	sp, #16
 800124c:	af00      	add	r7, sp, #0
 800124e:	6078      	str	r0, [r7, #4]
    char* cipstatus_pos = strstr(response, "+CIPSTATUS: 0");
 8001250:	490a      	ldr	r1, [pc, #40]	@ (800127c <SIM_Check_TCP_State+0x34>)
 8001252:	6878      	ldr	r0, [r7, #4]
 8001254:	f011 fe0e 	bl	8012e74 <strstr>
 8001258:	60f8      	str	r0, [r7, #12]
    if(cipstatus_pos != NULL) {
 800125a:	68fb      	ldr	r3, [r7, #12]
 800125c:	2b00      	cmp	r3, #0
 800125e:	d008      	beq.n	8001272 <SIM_Check_TCP_State+0x2a>
        // Cerca "CONNECTED" nella stessa riga
        if(strstr(cipstatus_pos, "CONNECTED") != NULL) {
 8001260:	4907      	ldr	r1, [pc, #28]	@ (8001280 <SIM_Check_TCP_State+0x38>)
 8001262:	68f8      	ldr	r0, [r7, #12]
 8001264:	f011 fe06 	bl	8012e74 <strstr>
 8001268:	4603      	mov	r3, r0
 800126a:	2b00      	cmp	r3, #0
 800126c:	d001      	beq.n	8001272 <SIM_Check_TCP_State+0x2a>
            return 1;
 800126e:	2301      	movs	r3, #1
 8001270:	e000      	b.n	8001274 <SIM_Check_TCP_State+0x2c>
        }
    }
    return 0;
 8001272:	2300      	movs	r3, #0
}
 8001274:	4618      	mov	r0, r3
 8001276:	3710      	adds	r7, #16
 8001278:	46bd      	mov	sp, r7
 800127a:	bd80      	pop	{r7, pc}
 800127c:	080141fc 	.word	0x080141fc
 8001280:	0801420c 	.word	0x0801420c

08001284 <SIM_Parse_Command>:

/*------PARSING MESSAGGIO MQTT------*/
void SIM_Parse_Command(void)
{
 8001284:	b580      	push	{r7, lr}
 8001286:	b088      	sub	sp, #32
 8001288:	af00      	add	r7, sp, #0
    char* buf = (char*)sim_rx_buffer;
 800128a:	4b62      	ldr	r3, [pc, #392]	@ (8001414 <SIM_Parse_Command+0x190>)
 800128c:	61fb      	str	r3, [r7, #28]

    if(strncmp(buf, "+SMSUB: ", 8) == 0)
 800128e:	2208      	movs	r2, #8
 8001290:	4961      	ldr	r1, [pc, #388]	@ (8001418 <SIM_Parse_Command+0x194>)
 8001292:	69f8      	ldr	r0, [r7, #28]
 8001294:	f011 fdc9 	bl	8012e2a <strncmp>
 8001298:	4603      	mov	r3, r0
 800129a:	2b00      	cmp	r3, #0
 800129c:	f040 80b5 	bne.w	800140a <SIM_Parse_Command+0x186>
    {
        char* pos = buf + 8;
 80012a0:	69fb      	ldr	r3, [r7, #28]
 80012a2:	3308      	adds	r3, #8
 80012a4:	61bb      	str	r3, [r7, #24]

        char* first_quote = strchr(pos, '"');
 80012a6:	2122      	movs	r1, #34	@ 0x22
 80012a8:	69b8      	ldr	r0, [r7, #24]
 80012aa:	f011 fdb1 	bl	8012e10 <strchr>
 80012ae:	6178      	str	r0, [r7, #20]
        if(first_quote) {
 80012b0:	697b      	ldr	r3, [r7, #20]
 80012b2:	2b00      	cmp	r3, #0
 80012b4:	f000 80a9 	beq.w	800140a <SIM_Parse_Command+0x186>
            char* second_quote = strchr(first_quote + 1, '"');
 80012b8:	697b      	ldr	r3, [r7, #20]
 80012ba:	3301      	adds	r3, #1
 80012bc:	2122      	movs	r1, #34	@ 0x22
 80012be:	4618      	mov	r0, r3
 80012c0:	f011 fda6 	bl	8012e10 <strchr>
 80012c4:	6138      	str	r0, [r7, #16]

            if(second_quote) {
 80012c6:	693b      	ldr	r3, [r7, #16]
 80012c8:	2b00      	cmp	r3, #0
 80012ca:	f000 809e 	beq.w	800140a <SIM_Parse_Command+0x186>
                char* third_quote = strchr(second_quote + 1, '"');
 80012ce:	693b      	ldr	r3, [r7, #16]
 80012d0:	3301      	adds	r3, #1
 80012d2:	2122      	movs	r1, #34	@ 0x22
 80012d4:	4618      	mov	r0, r3
 80012d6:	f011 fd9b 	bl	8012e10 <strchr>
 80012da:	60f8      	str	r0, [r7, #12]

                if(third_quote) {
 80012dc:	68fb      	ldr	r3, [r7, #12]
 80012de:	2b00      	cmp	r3, #0
 80012e0:	f000 8093 	beq.w	800140a <SIM_Parse_Command+0x186>
                    char* cmd_pos = third_quote + 1;
 80012e4:	68fb      	ldr	r3, [r7, #12]
 80012e6:	3301      	adds	r3, #1
 80012e8:	60bb      	str	r3, [r7, #8]
                    char* fourth_quote = strchr(cmd_pos, '"');
 80012ea:	2122      	movs	r1, #34	@ 0x22
 80012ec:	68b8      	ldr	r0, [r7, #8]
 80012ee:	f011 fd8f 	bl	8012e10 <strchr>
 80012f2:	6078      	str	r0, [r7, #4]

                    if(fourth_quote && (fourth_quote - cmd_pos) >= 3) {
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	2b00      	cmp	r3, #0
 80012f8:	f000 8087 	beq.w	800140a <SIM_Parse_Command+0x186>
 80012fc:	687a      	ldr	r2, [r7, #4]
 80012fe:	68bb      	ldr	r3, [r7, #8]
 8001300:	1ad3      	subs	r3, r2, r3
 8001302:	2b02      	cmp	r3, #2
 8001304:	f340 8081 	ble.w	800140a <SIM_Parse_Command+0x186>

                        uint32_t cmd_val = (cmd_pos[2] << 16) | (cmd_pos[1] << 8) | cmd_pos[0];
 8001308:	68bb      	ldr	r3, [r7, #8]
 800130a:	3302      	adds	r3, #2
 800130c:	781b      	ldrb	r3, [r3, #0]
 800130e:	041a      	lsls	r2, r3, #16
 8001310:	68bb      	ldr	r3, [r7, #8]
 8001312:	3301      	adds	r3, #1
 8001314:	781b      	ldrb	r3, [r3, #0]
 8001316:	021b      	lsls	r3, r3, #8
 8001318:	4313      	orrs	r3, r2
 800131a:	68ba      	ldr	r2, [r7, #8]
 800131c:	7812      	ldrb	r2, [r2, #0]
 800131e:	4313      	orrs	r3, r2
 8001320:	603b      	str	r3, [r7, #0]

                        switch(cmd_val) {
 8001322:	683b      	ldr	r3, [r7, #0]
 8001324:	4a3d      	ldr	r2, [pc, #244]	@ (800141c <SIM_Parse_Command+0x198>)
 8001326:	4293      	cmp	r3, r2
 8001328:	d069      	beq.n	80013fe <SIM_Parse_Command+0x17a>
 800132a:	683b      	ldr	r3, [r7, #0]
 800132c:	4a3b      	ldr	r2, [pc, #236]	@ (800141c <SIM_Parse_Command+0x198>)
 800132e:	4293      	cmp	r3, r2
 8001330:	d868      	bhi.n	8001404 <SIM_Parse_Command+0x180>
 8001332:	683b      	ldr	r3, [r7, #0]
 8001334:	4a3a      	ldr	r2, [pc, #232]	@ (8001420 <SIM_Parse_Command+0x19c>)
 8001336:	4293      	cmp	r3, r2
 8001338:	d032      	beq.n	80013a0 <SIM_Parse_Command+0x11c>
 800133a:	683b      	ldr	r3, [r7, #0]
 800133c:	4a39      	ldr	r2, [pc, #228]	@ (8001424 <SIM_Parse_Command+0x1a0>)
 800133e:	4293      	cmp	r3, r2
 8001340:	d260      	bcs.n	8001404 <SIM_Parse_Command+0x180>
 8001342:	683b      	ldr	r3, [r7, #0]
 8001344:	4a38      	ldr	r2, [pc, #224]	@ (8001428 <SIM_Parse_Command+0x1a4>)
 8001346:	4293      	cmp	r3, r2
 8001348:	d04c      	beq.n	80013e4 <SIM_Parse_Command+0x160>
 800134a:	683b      	ldr	r3, [r7, #0]
 800134c:	4a37      	ldr	r2, [pc, #220]	@ (800142c <SIM_Parse_Command+0x1a8>)
 800134e:	4293      	cmp	r3, r2
 8001350:	d258      	bcs.n	8001404 <SIM_Parse_Command+0x180>
 8001352:	683b      	ldr	r3, [r7, #0]
 8001354:	4a36      	ldr	r2, [pc, #216]	@ (8001430 <SIM_Parse_Command+0x1ac>)
 8001356:	4293      	cmp	r3, r2
 8001358:	d034      	beq.n	80013c4 <SIM_Parse_Command+0x140>
 800135a:	683b      	ldr	r3, [r7, #0]
 800135c:	4a34      	ldr	r2, [pc, #208]	@ (8001430 <SIM_Parse_Command+0x1ac>)
 800135e:	4293      	cmp	r3, r2
 8001360:	d850      	bhi.n	8001404 <SIM_Parse_Command+0x180>
 8001362:	683b      	ldr	r3, [r7, #0]
 8001364:	4a33      	ldr	r2, [pc, #204]	@ (8001434 <SIM_Parse_Command+0x1b0>)
 8001366:	4293      	cmp	r3, r2
 8001368:	d014      	beq.n	8001394 <SIM_Parse_Command+0x110>
 800136a:	683b      	ldr	r3, [r7, #0]
 800136c:	4a31      	ldr	r2, [pc, #196]	@ (8001434 <SIM_Parse_Command+0x1b0>)
 800136e:	4293      	cmp	r3, r2
 8001370:	d848      	bhi.n	8001404 <SIM_Parse_Command+0x180>
 8001372:	683b      	ldr	r3, [r7, #0]
 8001374:	4a30      	ldr	r2, [pc, #192]	@ (8001438 <SIM_Parse_Command+0x1b4>)
 8001376:	4293      	cmp	r3, r2
 8001378:	d018      	beq.n	80013ac <SIM_Parse_Command+0x128>
 800137a:	683b      	ldr	r3, [r7, #0]
 800137c:	4a2e      	ldr	r2, [pc, #184]	@ (8001438 <SIM_Parse_Command+0x1b4>)
 800137e:	4293      	cmp	r3, r2
 8001380:	d840      	bhi.n	8001404 <SIM_Parse_Command+0x180>
 8001382:	683b      	ldr	r3, [r7, #0]
 8001384:	4a2d      	ldr	r2, [pc, #180]	@ (800143c <SIM_Parse_Command+0x1b8>)
 8001386:	4293      	cmp	r3, r2
 8001388:	d022      	beq.n	80013d0 <SIM_Parse_Command+0x14c>
 800138a:	683b      	ldr	r3, [r7, #0]
 800138c:	4a2c      	ldr	r2, [pc, #176]	@ (8001440 <SIM_Parse_Command+0x1bc>)
 800138e:	4293      	cmp	r3, r2
 8001390:	d012      	beq.n	80013b8 <SIM_Parse_Command+0x134>
								}
							case 0x545352: // RST
								HAL_NVIC_SystemReset();
								break;
							default: 
								break;
 8001392:	e037      	b.n	8001404 <SIM_Parse_Command+0x180>
								flags.CMD.Idle = 1; 
 8001394:	4a2b      	ldr	r2, [pc, #172]	@ (8001444 <SIM_Parse_Command+0x1c0>)
 8001396:	7893      	ldrb	r3, [r2, #2]
 8001398:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800139c:	7093      	strb	r3, [r2, #2]
								break;    
 800139e:	e034      	b.n	800140a <SIM_Parse_Command+0x186>
								flags.CMD.Start_Meas = 1; 
 80013a0:	4a28      	ldr	r2, [pc, #160]	@ (8001444 <SIM_Parse_Command+0x1c0>)
 80013a2:	7893      	ldrb	r3, [r2, #2]
 80013a4:	f043 0320 	orr.w	r3, r3, #32
 80013a8:	7093      	strb	r3, [r2, #2]
								break;
 80013aa:	e02e      	b.n	800140a <SIM_Parse_Command+0x186>
								flags.CMD.Ping = 1; 
 80013ac:	4a25      	ldr	r2, [pc, #148]	@ (8001444 <SIM_Parse_Command+0x1c0>)
 80013ae:	7893      	ldrb	r3, [r2, #2]
 80013b0:	f043 0308 	orr.w	r3, r3, #8
 80013b4:	7093      	strb	r3, [r2, #2]
								break;
 80013b6:	e028      	b.n	800140a <SIM_Parse_Command+0x186>
								flags.CMD.Data_Request = 1; 
 80013b8:	4a22      	ldr	r2, [pc, #136]	@ (8001444 <SIM_Parse_Command+0x1c0>)
 80013ba:	7893      	ldrb	r3, [r2, #2]
 80013bc:	f043 0301 	orr.w	r3, r3, #1
 80013c0:	7093      	strb	r3, [r2, #2]
								break;
 80013c2:	e022      	b.n	800140a <SIM_Parse_Command+0x186>
								flags.CMD.Measure_Request = 1; 
 80013c4:	4a1f      	ldr	r2, [pc, #124]	@ (8001444 <SIM_Parse_Command+0x1c0>)
 80013c6:	7893      	ldrb	r3, [r2, #2]
 80013c8:	f043 0302 	orr.w	r3, r3, #2
 80013cc:	7093      	strb	r3, [r2, #2]
								break;
 80013ce:	e01c      	b.n	800140a <SIM_Parse_Command+0x186>
								if(state == IDLE)
 80013d0:	4b1d      	ldr	r3, [pc, #116]	@ (8001448 <SIM_Parse_Command+0x1c4>)
 80013d2:	781b      	ldrb	r3, [r3, #0]
 80013d4:	2b00      	cmp	r3, #0
 80013d6:	d117      	bne.n	8001408 <SIM_Parse_Command+0x184>
									flags.CMD.Start_OTA = 1;
 80013d8:	4a1a      	ldr	r2, [pc, #104]	@ (8001444 <SIM_Parse_Command+0x1c0>)
 80013da:	7893      	ldrb	r3, [r2, #2]
 80013dc:	f043 0304 	orr.w	r3, r3, #4
 80013e0:	7093      	strb	r3, [r2, #2]
								break;
 80013e2:	e011      	b.n	8001408 <SIM_Parse_Command+0x184>
								if(state == IDLE)
 80013e4:	4b18      	ldr	r3, [pc, #96]	@ (8001448 <SIM_Parse_Command+0x1c4>)
 80013e6:	781b      	ldrb	r3, [r3, #0]
 80013e8:	2b00      	cmp	r3, #0
 80013ea:	d108      	bne.n	80013fe <SIM_Parse_Command+0x17a>
									flags.CMD.Set_Config = 1;
 80013ec:	4a15      	ldr	r2, [pc, #84]	@ (8001444 <SIM_Parse_Command+0x1c0>)
 80013ee:	7893      	ldrb	r3, [r2, #2]
 80013f0:	f043 0310 	orr.w	r3, r3, #16
 80013f4:	7093      	strb	r3, [r2, #2]
									SIM_Parse_Cfg(cmd_pos, fourth_quote);
 80013f6:	6879      	ldr	r1, [r7, #4]
 80013f8:	68b8      	ldr	r0, [r7, #8]
 80013fa:	f000 f827 	bl	800144c <SIM_Parse_Cfg>
								HAL_NVIC_SystemReset();
 80013fe:	f009 fb46 	bl	800aa8e <HAL_NVIC_SystemReset>
								break;
 8001402:	e002      	b.n	800140a <SIM_Parse_Command+0x186>
								break;
 8001404:	bf00      	nop
 8001406:	e000      	b.n	800140a <SIM_Parse_Command+0x186>
								break;
 8001408:	bf00      	nop
                    }
                }
            }
        }
    }
}
 800140a:	bf00      	nop
 800140c:	3720      	adds	r7, #32
 800140e:	46bd      	mov	sp, r7
 8001410:	bd80      	pop	{r7, pc}
 8001412:	bf00      	nop
 8001414:	20004cd8 	.word	0x20004cd8
 8001418:	08014218 	.word	0x08014218
 800141c:	00545352 	.word	0x00545352
 8001420:	00545253 	.word	0x00545253
 8001424:	00545254 	.word	0x00545254
 8001428:	00544553 	.word	0x00544553
 800142c:	00544554 	.word	0x00544554
 8001430:	0052534d 	.word	0x0052534d
 8001434:	004c4449 	.word	0x004c4449
 8001438:	00474e50 	.word	0x00474e50
 800143c:	0041544f 	.word	0x0041544f
 8001440:	00444e53 	.word	0x00444e53
 8001444:	20001a50 	.word	0x20001a50
 8001448:	200005b4 	.word	0x200005b4

0800144c <SIM_Parse_Cfg>:

/*-----PARSING CONFIGURAZIONE-----*/
void SIM_Parse_Cfg(char* cmd_start, char* cmd_end)
{   
 800144c:	b580      	push	{r7, lr}
 800144e:	b088      	sub	sp, #32
 8001450:	af00      	add	r7, sp, #0
 8001452:	6078      	str	r0, [r7, #4]
 8001454:	6039      	str	r1, [r7, #0]
    memset(cfg_var, 0, sizeof(cfg_var));
 8001456:	2214      	movs	r2, #20
 8001458:	2100      	movs	r1, #0
 800145a:	4839      	ldr	r0, [pc, #228]	@ (8001540 <SIM_Parse_Cfg+0xf4>)
 800145c:	f011 fcd0 	bl	8012e00 <memset>
    memset(new_cfg_val, 0, sizeof(new_cfg_val));
 8001460:	220a      	movs	r2, #10
 8001462:	2100      	movs	r1, #0
 8001464:	4837      	ldr	r0, [pc, #220]	@ (8001544 <SIM_Parse_Cfg+0xf8>)
 8001466:	f011 fccb 	bl	8012e00 <memset>
    
    char* pos = cmd_start + 4; // Salta "SET,"
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	3304      	adds	r3, #4
 800146e:	61fb      	str	r3, [r7, #28]
    
    // Prima virgola (dopo SET)
    char* comma1 = strchr(pos, ',');
 8001470:	212c      	movs	r1, #44	@ 0x2c
 8001472:	69f8      	ldr	r0, [r7, #28]
 8001474:	f011 fccc 	bl	8012e10 <strchr>
 8001478:	61b8      	str	r0, [r7, #24]
    if(!comma1 || comma1 >= cmd_end) return;
 800147a:	69bb      	ldr	r3, [r7, #24]
 800147c:	2b00      	cmp	r3, #0
 800147e:	d056      	beq.n	800152e <SIM_Parse_Cfg+0xe2>
 8001480:	69ba      	ldr	r2, [r7, #24]
 8001482:	683b      	ldr	r3, [r7, #0]
 8001484:	429a      	cmp	r2, r3
 8001486:	d252      	bcs.n	800152e <SIM_Parse_Cfg+0xe2>
    
    // Seconda virgola
    char* comma2 = strchr(comma1 + 1, ',');
 8001488:	69bb      	ldr	r3, [r7, #24]
 800148a:	3301      	adds	r3, #1
 800148c:	212c      	movs	r1, #44	@ 0x2c
 800148e:	4618      	mov	r0, r3
 8001490:	f011 fcbe 	bl	8012e10 <strchr>
 8001494:	6178      	str	r0, [r7, #20]
    if(!comma2 || comma2 >= cmd_end) return;
 8001496:	697b      	ldr	r3, [r7, #20]
 8001498:	2b00      	cmp	r3, #0
 800149a:	d04a      	beq.n	8001532 <SIM_Parse_Cfg+0xe6>
 800149c:	697a      	ldr	r2, [r7, #20]
 800149e:	683b      	ldr	r3, [r7, #0]
 80014a0:	429a      	cmp	r2, r3
 80014a2:	d246      	bcs.n	8001532 <SIM_Parse_Cfg+0xe6>
    
    // Terza virgola
    char* comma3 = strchr(comma2 + 1, ',');
 80014a4:	697b      	ldr	r3, [r7, #20]
 80014a6:	3301      	adds	r3, #1
 80014a8:	212c      	movs	r1, #44	@ 0x2c
 80014aa:	4618      	mov	r0, r3
 80014ac:	f011 fcb0 	bl	8012e10 <strchr>
 80014b0:	6138      	str	r0, [r7, #16]
    if(!comma3 || comma3 >= cmd_end) return;
 80014b2:	693b      	ldr	r3, [r7, #16]
 80014b4:	2b00      	cmp	r3, #0
 80014b6:	d03e      	beq.n	8001536 <SIM_Parse_Cfg+0xea>
 80014b8:	693a      	ldr	r2, [r7, #16]
 80014ba:	683b      	ldr	r3, [r7, #0]
 80014bc:	429a      	cmp	r2, r3
 80014be:	d23a      	bcs.n	8001536 <SIM_Parse_Cfg+0xea>
    
    // Estrai cfg_var (tra SET, e prima virgola)
    int var_len = comma2 - comma1 - 1;
 80014c0:	697a      	ldr	r2, [r7, #20]
 80014c2:	69bb      	ldr	r3, [r7, #24]
 80014c4:	1ad3      	subs	r3, r2, r3
 80014c6:	3b01      	subs	r3, #1
 80014c8:	60fb      	str	r3, [r7, #12]
    if(var_len > 0 && var_len < sizeof(cfg_var)) 
 80014ca:	68fb      	ldr	r3, [r7, #12]
 80014cc:	2b00      	cmp	r3, #0
 80014ce:	dd0e      	ble.n	80014ee <SIM_Parse_Cfg+0xa2>
 80014d0:	68fb      	ldr	r3, [r7, #12]
 80014d2:	2b13      	cmp	r3, #19
 80014d4:	d80b      	bhi.n	80014ee <SIM_Parse_Cfg+0xa2>
	{
        strncpy(cfg_var, comma1 + 1, var_len);
 80014d6:	69bb      	ldr	r3, [r7, #24]
 80014d8:	3301      	adds	r3, #1
 80014da:	68fa      	ldr	r2, [r7, #12]
 80014dc:	4619      	mov	r1, r3
 80014de:	4818      	ldr	r0, [pc, #96]	@ (8001540 <SIM_Parse_Cfg+0xf4>)
 80014e0:	f011 fcb5 	bl	8012e4e <strncpy>
        cfg_var[var_len] = '\0';
 80014e4:	4a16      	ldr	r2, [pc, #88]	@ (8001540 <SIM_Parse_Cfg+0xf4>)
 80014e6:	68fb      	ldr	r3, [r7, #12]
 80014e8:	4413      	add	r3, r2
 80014ea:	2200      	movs	r2, #0
 80014ec:	701a      	strb	r2, [r3, #0]
    }
    
    // Estrai cfg_idx
    cfg_idx = atoi(comma2 + 1);
 80014ee:	697b      	ldr	r3, [r7, #20]
 80014f0:	3301      	adds	r3, #1
 80014f2:	4618      	mov	r0, r3
 80014f4:	f011 fb9a 	bl	8012c2c <atoi>
 80014f8:	4603      	mov	r3, r0
 80014fa:	4a13      	ldr	r2, [pc, #76]	@ (8001548 <SIM_Parse_Cfg+0xfc>)
 80014fc:	6013      	str	r3, [r2, #0]
    
    // Estrai new_cfg_val
    int val_len = cmd_end - comma3 - 1;
 80014fe:	683a      	ldr	r2, [r7, #0]
 8001500:	693b      	ldr	r3, [r7, #16]
 8001502:	1ad3      	subs	r3, r2, r3
 8001504:	3b01      	subs	r3, #1
 8001506:	60bb      	str	r3, [r7, #8]
    if(val_len > 0 && val_len < sizeof(new_cfg_val)) 
 8001508:	68bb      	ldr	r3, [r7, #8]
 800150a:	2b00      	cmp	r3, #0
 800150c:	dd14      	ble.n	8001538 <SIM_Parse_Cfg+0xec>
 800150e:	68bb      	ldr	r3, [r7, #8]
 8001510:	2b09      	cmp	r3, #9
 8001512:	d811      	bhi.n	8001538 <SIM_Parse_Cfg+0xec>
	{
        strncpy(new_cfg_val, comma3 + 1, val_len);
 8001514:	693b      	ldr	r3, [r7, #16]
 8001516:	3301      	adds	r3, #1
 8001518:	68ba      	ldr	r2, [r7, #8]
 800151a:	4619      	mov	r1, r3
 800151c:	4809      	ldr	r0, [pc, #36]	@ (8001544 <SIM_Parse_Cfg+0xf8>)
 800151e:	f011 fc96 	bl	8012e4e <strncpy>
        new_cfg_val[val_len] = '\0';
 8001522:	4a08      	ldr	r2, [pc, #32]	@ (8001544 <SIM_Parse_Cfg+0xf8>)
 8001524:	68bb      	ldr	r3, [r7, #8]
 8001526:	4413      	add	r3, r2
 8001528:	2200      	movs	r2, #0
 800152a:	701a      	strb	r2, [r3, #0]
 800152c:	e004      	b.n	8001538 <SIM_Parse_Cfg+0xec>
    if(!comma1 || comma1 >= cmd_end) return;
 800152e:	bf00      	nop
 8001530:	e002      	b.n	8001538 <SIM_Parse_Cfg+0xec>
    if(!comma2 || comma2 >= cmd_end) return;
 8001532:	bf00      	nop
 8001534:	e000      	b.n	8001538 <SIM_Parse_Cfg+0xec>
    if(!comma3 || comma3 >= cmd_end) return;
 8001536:	bf00      	nop
    }
}
 8001538:	3720      	adds	r7, #32
 800153a:	46bd      	mov	sp, r7
 800153c:	bd80      	pop	{r7, pc}
 800153e:	bf00      	nop
 8001540:	200050d8 	.word	0x200050d8
 8001544:	200050f0 	.word	0x200050f0
 8001548:	200050ec 	.word	0x200050ec

0800154c <SIM_publish_MQTT_Message>:

/*------PUBBLICAZIONE MESSAGGIO MQTT------*/
void SIM_publish_MQTT_Message(const char* topic, const char* message)
{
 800154c:	b580      	push	{r7, lr}
 800154e:	b0c4      	sub	sp, #272	@ 0x110
 8001550:	af00      	add	r7, sp, #0
 8001552:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8001556:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800155a:	6018      	str	r0, [r3, #0]
 800155c:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8001560:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8001564:	6019      	str	r1, [r3, #0]
    char command[256];
    uint16_t len = (uint16_t)strlen(message);
 8001566:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800156a:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800156e:	6818      	ldr	r0, [r3, #0]
 8001570:	f7fe fe38 	bl	80001e4 <strlen>
 8001574:	4603      	mov	r3, r0
 8001576:	f8a7 310e 	strh.w	r3, [r7, #270]	@ 0x10e

    if(topic != NULL && strlen(topic) > 0)
 800157a:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800157e:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	2b00      	cmp	r3, #0
 8001586:	d014      	beq.n	80015b2 <SIM_publish_MQTT_Message+0x66>
 8001588:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800158c:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	781b      	ldrb	r3, [r3, #0]
 8001594:	2b00      	cmp	r3, #0
 8001596:	d00c      	beq.n	80015b2 <SIM_publish_MQTT_Message+0x66>
	{
        sprintf(command, "AT+SMPUB=\"%s\",%d,1,0\r", topic, len);
 8001598:	f8b7 310e 	ldrh.w	r3, [r7, #270]	@ 0x10e
 800159c:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 80015a0:	f5a2 7286 	sub.w	r2, r2, #268	@ 0x10c
 80015a4:	f107 000c 	add.w	r0, r7, #12
 80015a8:	6812      	ldr	r2, [r2, #0]
 80015aa:	490b      	ldr	r1, [pc, #44]	@ (80015d8 <SIM_publish_MQTT_Message+0x8c>)
 80015ac:	f011 fbc8 	bl	8012d40 <siprintf>
 80015b0:	e007      	b.n	80015c2 <SIM_publish_MQTT_Message+0x76>
    } 
	else 
	{
        sprintf(command, "AT+SMPUB=%d\r", len);
 80015b2:	f8b7 210e 	ldrh.w	r2, [r7, #270]	@ 0x10e
 80015b6:	f107 030c 	add.w	r3, r7, #12
 80015ba:	4908      	ldr	r1, [pc, #32]	@ (80015dc <SIM_publish_MQTT_Message+0x90>)
 80015bc:	4618      	mov	r0, r3
 80015be:	f011 fbbf 	bl	8012d40 <siprintf>
    }
    
    SIM_Send_Command_DMA(command);
 80015c2:	f107 030c 	add.w	r3, r7, #12
 80015c6:	4618      	mov	r0, r3
 80015c8:	f7ff fdc0 	bl	800114c <SIM_Send_Command_DMA>
}
 80015cc:	bf00      	nop
 80015ce:	f507 7788 	add.w	r7, r7, #272	@ 0x110
 80015d2:	46bd      	mov	sp, r7
 80015d4:	bd80      	pop	{r7, pc}
 80015d6:	bf00      	nop
 80015d8:	08014224 	.word	0x08014224
 80015dc:	0801423c 	.word	0x0801423c

080015e0 <SIM_Send_TCP_Chunk>:

/*-----INVIO DATI AL SERVER TCP-----*/
void SIM_Send_TCP_Chunk(uint8_t* data, uint16_t size)
{
 80015e0:	b580      	push	{r7, lr}
 80015e2:	b090      	sub	sp, #64	@ 0x40
 80015e4:	af00      	add	r7, sp, #0
 80015e6:	6078      	str	r0, [r7, #4]
 80015e8:	460b      	mov	r3, r1
 80015ea:	807b      	strh	r3, [r7, #2]
    char cmd[50];

    sprintf(cmd, "AT+CIPSEND=%u\r", size);
 80015ec:	887a      	ldrh	r2, [r7, #2]
 80015ee:	f107 030c 	add.w	r3, r7, #12
 80015f2:	490d      	ldr	r1, [pc, #52]	@ (8001628 <SIM_Send_TCP_Chunk+0x48>)
 80015f4:	4618      	mov	r0, r3
 80015f6:	f011 fba3 	bl	8012d40 <siprintf>
    SIM_Send_Command(cmd);
 80015fa:	f107 030c 	add.w	r3, r7, #12
 80015fe:	4618      	mov	r0, r3
 8001600:	f7ff fd8e 	bl	8001120 <SIM_Send_Command>

    SIM_Wait_Response(">");                                    // Attesa prompt '>'
 8001604:	4809      	ldr	r0, [pc, #36]	@ (800162c <SIM_Send_TCP_Chunk+0x4c>)
 8001606:	f000 f817 	bl	8001638 <SIM_Wait_Response>

    HAL_UART_Transmit(LTE_UART, data, size, 1000);             // Invia dati binari
 800160a:	887a      	ldrh	r2, [r7, #2]
 800160c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001610:	6879      	ldr	r1, [r7, #4]
 8001612:	4807      	ldr	r0, [pc, #28]	@ (8001630 <SIM_Send_TCP_Chunk+0x50>)
 8001614:	f010 f84c 	bl	80116b0 <HAL_UART_Transmit>
    
    SIM_Wait_Response("SEND OK");                              // Attesa invio avvenuto
 8001618:	4806      	ldr	r0, [pc, #24]	@ (8001634 <SIM_Send_TCP_Chunk+0x54>)
 800161a:	f000 f80d 	bl	8001638 <SIM_Wait_Response>
}
 800161e:	bf00      	nop
 8001620:	3740      	adds	r7, #64	@ 0x40
 8001622:	46bd      	mov	sp, r7
 8001624:	bd80      	pop	{r7, pc}
 8001626:	bf00      	nop
 8001628:	0801424c 	.word	0x0801424c
 800162c:	0801425c 	.word	0x0801425c
 8001630:	2000049c 	.word	0x2000049c
 8001634:	08014260 	.word	0x08014260

08001638 <SIM_Wait_Response>:

/*-----ATTESA PROMPT-----*/
void SIM_Wait_Response(const char* expected)
{
 8001638:	b580      	push	{r7, lr}
 800163a:	b0c8      	sub	sp, #288	@ 0x120
 800163c:	af02      	add	r7, sp, #8
 800163e:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8001642:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8001646:	6018      	str	r0, [r3, #0]
    char response[256];
    uint16_t timeout = 10000; // 10 secondi
 8001648:	f242 7310 	movw	r3, #10000	@ 0x2710
 800164c:	f8a7 3116 	strh.w	r3, [r7, #278]	@ 0x116
    uint32_t start_time = HAL_GetTick();
 8001650:	f007 fd38 	bl	80090c4 <HAL_GetTick>
 8001654:	f8c7 0110 	str.w	r0, [r7, #272]	@ 0x110
    
    while((HAL_GetTick() - start_time) < timeout)
 8001658:	e028      	b.n	80016ac <SIM_Wait_Response+0x74>
    {
        uint16_t RxLen = 0;
 800165a:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 800165e:	f5a3 7385 	sub.w	r3, r3, #266	@ 0x10a
 8001662:	2200      	movs	r2, #0
 8001664:	801a      	strh	r2, [r3, #0]
        HAL_UARTEx_ReceiveToIdle(LTE_UART, (uint8_t*)response, sizeof(response), &RxLen, 500);
 8001666:	f107 030e 	add.w	r3, r7, #14
 800166a:	f107 0110 	add.w	r1, r7, #16
 800166e:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 8001672:	9200      	str	r2, [sp, #0]
 8001674:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001678:	4813      	ldr	r0, [pc, #76]	@ (80016c8 <SIM_Wait_Response+0x90>)
 800167a:	f011 f980 	bl	801297e <HAL_UARTEx_ReceiveToIdle>
        
        if(RxLen > 0 && strstr(response, expected) != NULL)
 800167e:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8001682:	f5a3 7385 	sub.w	r3, r3, #266	@ 0x10a
 8001686:	881b      	ldrh	r3, [r3, #0]
 8001688:	2b00      	cmp	r3, #0
 800168a:	d00c      	beq.n	80016a6 <SIM_Wait_Response+0x6e>
 800168c:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8001690:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8001694:	f107 0210 	add.w	r2, r7, #16
 8001698:	6819      	ldr	r1, [r3, #0]
 800169a:	4610      	mov	r0, r2
 800169c:	f011 fbea 	bl	8012e74 <strstr>
 80016a0:	4603      	mov	r3, r0
 80016a2:	2b00      	cmp	r3, #0
 80016a4:	d10c      	bne.n	80016c0 <SIM_Wait_Response+0x88>
        {
            return; 
        }
        
        HAL_Delay(10);
 80016a6:	200a      	movs	r0, #10
 80016a8:	f007 fd18 	bl	80090dc <HAL_Delay>
    while((HAL_GetTick() - start_time) < timeout)
 80016ac:	f007 fd0a 	bl	80090c4 <HAL_GetTick>
 80016b0:	4602      	mov	r2, r0
 80016b2:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 80016b6:	1ad2      	subs	r2, r2, r3
 80016b8:	f8b7 3116 	ldrh.w	r3, [r7, #278]	@ 0x116
 80016bc:	429a      	cmp	r2, r3
 80016be:	d3cc      	bcc.n	800165a <SIM_Wait_Response+0x22>
    }
}
 80016c0:	f507 778c 	add.w	r7, r7, #280	@ 0x118
 80016c4:	46bd      	mov	sp, r7
 80016c6:	bd80      	pop	{r7, pc}
 80016c8:	2000049c 	.word	0x2000049c

080016cc <BC_Init>:
#include "global_variables.h"


/*------INIZIALIZZAZIONE BATTERY CHARGER------*/
void BC_Init(void)
{
 80016cc:	b580      	push	{r7, lr}
 80016ce:	af00      	add	r7, sp, #0
	BC_Write_Reg(REG00_MINIMAL_SYSTEM_VOLTAGE, 0x1A);           //Tensione minima di uscita con 3 celle = 9V   <----- Senza Batteria il sistema fornisce questa tensione
 80016d0:	211a      	movs	r1, #26
 80016d2:	2000      	movs	r0, #0
 80016d4:	f000 f830 	bl	8001738 <BC_Write_Reg>
	BC_MultiWrite_Reg(REG01_CHARGE_VOLTAGE_LIMIT, 0x04EC);      //Limite tensione di carica con 3 celle = 12.6V
 80016d8:	f240 41ec 	movw	r1, #1260	@ 0x4ec
 80016dc:	2001      	movs	r0, #1
 80016de:	f000 f877 	bl	80017d0 <BC_MultiWrite_Reg>
	BC_MultiWrite_Reg(REG03_CHARGE_CURRENT_LIMIT, 0x0064);      //Limite corrente di carica con 3 celle = 1A
 80016e2:	2164      	movs	r1, #100	@ 0x64
 80016e4:	2003      	movs	r0, #3
 80016e6:	f000 f873 	bl	80017d0 <BC_MultiWrite_Reg>
	BC_Write_Reg(REG10_CHARGER_CONTROL_1, 0x85);                //Tensione di OVP in ingresso = 26V
 80016ea:	2185      	movs	r1, #133	@ 0x85
 80016ec:	2010      	movs	r0, #16
 80016ee:	f000 f823 	bl	8001738 <BC_Write_Reg>
	BC_Write_Reg(REG14_CHARGER_CONTROL_5, 0x96);                //Informazione sulla presenza dello Ship-FET
 80016f2:	2196      	movs	r1, #150	@ 0x96
 80016f4:	2014      	movs	r0, #20
 80016f6:	f000 f81f 	bl	8001738 <BC_Write_Reg>
	BC_Write_Reg(REG15_MPPT_CONTROL, 0xAB);                     //MPPT attivato, tensione di MPP = 0.875*Vin, misura di 300ms ogni 2 minuti della Vin
 80016fa:	21ab      	movs	r1, #171	@ 0xab
 80016fc:	2015      	movs	r0, #21
 80016fe:	f000 f81b 	bl	8001738 <BC_Write_Reg>
	BC_Write_Reg(REG28_CHARGER_MASK_0, 0xE1);                   //Interrupt attivati: Poor source, Power good, VAC2 present, VAC1 present
 8001702:	21e1      	movs	r1, #225	@ 0xe1
 8001704:	2028      	movs	r0, #40	@ 0x28
 8001706:	f000 f817 	bl	8001738 <BC_Write_Reg>
	BC_Write_Reg(REG29_CHARGER_MASK_1, 0xD7);                   //Interrupt attivati: nessuno
 800170a:	21d7      	movs	r1, #215	@ 0xd7
 800170c:	2029      	movs	r0, #41	@ 0x29
 800170e:	f000 f813 	bl	8001738 <BC_Write_Reg>
	BC_Write_Reg(REG2A_CHARGER_MASK_2, 0x7F);                   //Interrupt attivati: nessuno
 8001712:	217f      	movs	r1, #127	@ 0x7f
 8001714:	202a      	movs	r0, #42	@ 0x2a
 8001716:	f000 f80f 	bl	8001738 <BC_Write_Reg>
	BC_Write_Reg(REG2B_CHARGER_MASK_3, 0x1F);                   //Interrupt attivati: nessuno
 800171a:	211f      	movs	r1, #31
 800171c:	202b      	movs	r0, #43	@ 0x2b
 800171e:	f000 f80b 	bl	8001738 <BC_Write_Reg>
	BC_Write_Reg(REG2C_FAULT_MASK_0, 0xFC);                     //Interrupt attivati: VAC2 over-voltage, VAC1 over-voltage
 8001722:	21fc      	movs	r1, #252	@ 0xfc
 8001724:	202c      	movs	r0, #44	@ 0x2c
 8001726:	f000 f807 	bl	8001738 <BC_Write_Reg>
	BC_Write_Reg(REG2D_FAULT_MASK_1, 0xF4);                     //Interrupt attivati: nessuno
 800172a:	21f4      	movs	r1, #244	@ 0xf4
 800172c:	202d      	movs	r0, #45	@ 0x2d
 800172e:	f000 f803 	bl	8001738 <BC_Write_Reg>
}
 8001732:	bf00      	nop
 8001734:	bd80      	pop	{r7, pc}
	...

08001738 <BC_Write_Reg>:

/*------SCRITTURA REGISTRO 8 BIT------*/
int BC_Write_Reg(uint8_t reg, uint8_t wdata)
{
 8001738:	b580      	push	{r7, lr}
 800173a:	b086      	sub	sp, #24
 800173c:	af02      	add	r7, sp, #8
 800173e:	4603      	mov	r3, r0
 8001740:	460a      	mov	r2, r1
 8001742:	71fb      	strb	r3, [r7, #7]
 8001744:	4613      	mov	r3, r2
 8001746:	71bb      	strb	r3, [r7, #6]
	int result = -1;
 8001748:	f04f 33ff 	mov.w	r3, #4294967295
 800174c:	60fb      	str	r3, [r7, #12]
	uint8_t toSend[2];
	toSend[0] = reg;
 800174e:	79fb      	ldrb	r3, [r7, #7]
 8001750:	723b      	strb	r3, [r7, #8]
	toSend[1] = wdata;
 8001752:	79bb      	ldrb	r3, [r7, #6]
 8001754:	727b      	strb	r3, [r7, #9]

	if(HAL_I2C_Master_Transmit(I2C, BATTERY_CHARGER_ADDR << 1, toSend, 2, 100) == HAL_OK)
 8001756:	f107 0208 	add.w	r2, r7, #8
 800175a:	2364      	movs	r3, #100	@ 0x64
 800175c:	9300      	str	r3, [sp, #0]
 800175e:	2302      	movs	r3, #2
 8001760:	21d6      	movs	r1, #214	@ 0xd6
 8001762:	4806      	ldr	r0, [pc, #24]	@ (800177c <BC_Write_Reg+0x44>)
 8001764:	f009 ff36 	bl	800b5d4 <HAL_I2C_Master_Transmit>
 8001768:	4603      	mov	r3, r0
 800176a:	2b00      	cmp	r3, #0
 800176c:	d101      	bne.n	8001772 <BC_Write_Reg+0x3a>
	{
		result = 0;
 800176e:	2300      	movs	r3, #0
 8001770:	60fb      	str	r3, [r7, #12]
	}

	return result;
 8001772:	68fb      	ldr	r3, [r7, #12]
}
 8001774:	4618      	mov	r0, r3
 8001776:	3710      	adds	r7, #16
 8001778:	46bd      	mov	sp, r7
 800177a:	bd80      	pop	{r7, pc}
 800177c:	20000160 	.word	0x20000160

08001780 <BC_Read_Reg>:

/*------LETTURA REGISTRO 8 BIT------*/
int BC_Read_Reg(uint8_t reg, uint8_t *rdata)
{
 8001780:	b580      	push	{r7, lr}
 8001782:	b086      	sub	sp, #24
 8001784:	af02      	add	r7, sp, #8
 8001786:	4603      	mov	r3, r0
 8001788:	6039      	str	r1, [r7, #0]
 800178a:	71fb      	strb	r3, [r7, #7]
	int result = -1;
 800178c:	f04f 33ff 	mov.w	r3, #4294967295
 8001790:	60fb      	str	r3, [r7, #12]

	if(HAL_I2C_Master_Transmit(I2C, BATTERY_CHARGER_ADDR << 1, &reg, 1, 100) == HAL_OK)
 8001792:	1dfa      	adds	r2, r7, #7
 8001794:	2364      	movs	r3, #100	@ 0x64
 8001796:	9300      	str	r3, [sp, #0]
 8001798:	2301      	movs	r3, #1
 800179a:	21d6      	movs	r1, #214	@ 0xd6
 800179c:	480b      	ldr	r0, [pc, #44]	@ (80017cc <BC_Read_Reg+0x4c>)
 800179e:	f009 ff19 	bl	800b5d4 <HAL_I2C_Master_Transmit>
 80017a2:	4603      	mov	r3, r0
 80017a4:	2b00      	cmp	r3, #0
 80017a6:	d10c      	bne.n	80017c2 <BC_Read_Reg+0x42>
	{
		if(HAL_I2C_Master_Receive(I2C,  BATTERY_CHARGER_ADDR << 1, rdata, 1, 100) == HAL_OK)
 80017a8:	2364      	movs	r3, #100	@ 0x64
 80017aa:	9300      	str	r3, [sp, #0]
 80017ac:	2301      	movs	r3, #1
 80017ae:	683a      	ldr	r2, [r7, #0]
 80017b0:	21d6      	movs	r1, #214	@ 0xd6
 80017b2:	4806      	ldr	r0, [pc, #24]	@ (80017cc <BC_Read_Reg+0x4c>)
 80017b4:	f00a f826 	bl	800b804 <HAL_I2C_Master_Receive>
 80017b8:	4603      	mov	r3, r0
 80017ba:	2b00      	cmp	r3, #0
 80017bc:	d101      	bne.n	80017c2 <BC_Read_Reg+0x42>
		{
			result = 0;
 80017be:	2300      	movs	r3, #0
 80017c0:	60fb      	str	r3, [r7, #12]
		}
	}

	return result;
 80017c2:	68fb      	ldr	r3, [r7, #12]
}
 80017c4:	4618      	mov	r0, r3
 80017c6:	3710      	adds	r7, #16
 80017c8:	46bd      	mov	sp, r7
 80017ca:	bd80      	pop	{r7, pc}
 80017cc:	20000160 	.word	0x20000160

080017d0 <BC_MultiWrite_Reg>:

/*------SCRITTURA REGISTRO 16 BIT------*/
int BC_MultiWrite_Reg(uint8_t reg, uint16_t wdata)
{
 80017d0:	b580      	push	{r7, lr}
 80017d2:	b086      	sub	sp, #24
 80017d4:	af02      	add	r7, sp, #8
 80017d6:	4603      	mov	r3, r0
 80017d8:	460a      	mov	r2, r1
 80017da:	71fb      	strb	r3, [r7, #7]
 80017dc:	4613      	mov	r3, r2
 80017de:	80bb      	strh	r3, [r7, #4]
	int result = -1;
 80017e0:	f04f 33ff 	mov.w	r3, #4294967295
 80017e4:	60fb      	str	r3, [r7, #12]
	uint8_t toSend[3];
	toSend[0] = reg;
 80017e6:	79fb      	ldrb	r3, [r7, #7]
 80017e8:	723b      	strb	r3, [r7, #8]
	toSend[1] = (wdata & 0xFF00) >> 8;
 80017ea:	88bb      	ldrh	r3, [r7, #4]
 80017ec:	0a1b      	lsrs	r3, r3, #8
 80017ee:	b29b      	uxth	r3, r3
 80017f0:	b2db      	uxtb	r3, r3
 80017f2:	727b      	strb	r3, [r7, #9]
	toSend[2] = wdata & 0x00FF;
 80017f4:	88bb      	ldrh	r3, [r7, #4]
 80017f6:	b2db      	uxtb	r3, r3
 80017f8:	72bb      	strb	r3, [r7, #10]

	if(HAL_I2C_Master_Transmit(I2C, BATTERY_CHARGER_ADDR << 1, toSend, 3, 100) == HAL_OK)
 80017fa:	f107 0208 	add.w	r2, r7, #8
 80017fe:	2364      	movs	r3, #100	@ 0x64
 8001800:	9300      	str	r3, [sp, #0]
 8001802:	2303      	movs	r3, #3
 8001804:	21d6      	movs	r1, #214	@ 0xd6
 8001806:	4806      	ldr	r0, [pc, #24]	@ (8001820 <BC_MultiWrite_Reg+0x50>)
 8001808:	f009 fee4 	bl	800b5d4 <HAL_I2C_Master_Transmit>
 800180c:	4603      	mov	r3, r0
 800180e:	2b00      	cmp	r3, #0
 8001810:	d101      	bne.n	8001816 <BC_MultiWrite_Reg+0x46>
	{
		result = 0;
 8001812:	2300      	movs	r3, #0
 8001814:	60fb      	str	r3, [r7, #12]
	}

	return result;
 8001816:	68fb      	ldr	r3, [r7, #12]
}
 8001818:	4618      	mov	r0, r3
 800181a:	3710      	adds	r7, #16
 800181c:	46bd      	mov	sp, r7
 800181e:	bd80      	pop	{r7, pc}
 8001820:	20000160 	.word	0x20000160

08001824 <BC_Read_Flags>:
	return result;
}

/*------LETTURA FLAGS DI INTERRUZIONE------*/
int BC_Read_Flags(uint64_t *flags)
{
 8001824:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001828:	b09a      	sub	sp, #104	@ 0x68
 800182a:	af02      	add	r7, sp, #8
 800182c:	61f8      	str	r0, [r7, #28]
	int result = -1;
 800182e:	f04f 33ff 	mov.w	r3, #4294967295
 8001832:	65fb      	str	r3, [r7, #92]	@ 0x5c
	uint64_t data[6] = {0};
 8001834:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001838:	2230      	movs	r2, #48	@ 0x30
 800183a:	2100      	movs	r1, #0
 800183c:	4618      	mov	r0, r3
 800183e:	f011 fadf 	bl	8012e00 <memset>
	uint8_t reg = REG22_CHARGER_FLAG_0;
 8001842:	2322      	movs	r3, #34	@ 0x22
 8001844:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

	if(HAL_I2C_Master_Transmit(I2C, BATTERY_CHARGER_ADDR << 1, &reg, 1, 100) == HAL_OK)
 8001848:	f107 0227 	add.w	r2, r7, #39	@ 0x27
 800184c:	2364      	movs	r3, #100	@ 0x64
 800184e:	9300      	str	r3, [sp, #0]
 8001850:	2301      	movs	r3, #1
 8001852:	21d6      	movs	r1, #214	@ 0xd6
 8001854:	4836      	ldr	r0, [pc, #216]	@ (8001930 <BC_Read_Flags+0x10c>)
 8001856:	f009 febd 	bl	800b5d4 <HAL_I2C_Master_Transmit>
 800185a:	4603      	mov	r3, r0
 800185c:	2b00      	cmp	r3, #0
 800185e:	d161      	bne.n	8001924 <BC_Read_Flags+0x100>
	{
		if(HAL_I2C_Master_Receive(I2C,  BATTERY_CHARGER_ADDR << 1 , (uint8_t *)data, 6, 100) == HAL_OK)
 8001860:	f107 0228 	add.w	r2, r7, #40	@ 0x28
 8001864:	2364      	movs	r3, #100	@ 0x64
 8001866:	9300      	str	r3, [sp, #0]
 8001868:	2306      	movs	r3, #6
 800186a:	21d6      	movs	r1, #214	@ 0xd6
 800186c:	4830      	ldr	r0, [pc, #192]	@ (8001930 <BC_Read_Flags+0x10c>)
 800186e:	f009 ffc9 	bl	800b804 <HAL_I2C_Master_Receive>
 8001872:	4603      	mov	r3, r0
 8001874:	2b00      	cmp	r3, #0
 8001876:	d155      	bne.n	8001924 <BC_Read_Flags+0x100>
		{
			result = 0;
 8001878:	2300      	movs	r3, #0
 800187a:	65fb      	str	r3, [r7, #92]	@ 0x5c
			*flags = (data[0] << 40) | (data[1] << 32) | (data[2] << 24) | (data[3] << 16) | (data[4] << 8) | data[5];
 800187c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8001880:	f04f 0400 	mov.w	r4, #0
 8001884:	f04f 0500 	mov.w	r5, #0
 8001888:	0215      	lsls	r5, r2, #8
 800188a:	2400      	movs	r4, #0
 800188c:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
 8001890:	f04f 0200 	mov.w	r2, #0
 8001894:	f04f 0300 	mov.w	r3, #0
 8001898:	0003      	movs	r3, r0
 800189a:	2200      	movs	r2, #0
 800189c:	ea44 0102 	orr.w	r1, r4, r2
 80018a0:	6139      	str	r1, [r7, #16]
 80018a2:	432b      	orrs	r3, r5
 80018a4:	617b      	str	r3, [r7, #20]
 80018a6:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	@ 0x38
 80018aa:	f04f 0200 	mov.w	r2, #0
 80018ae:	f04f 0300 	mov.w	r3, #0
 80018b2:	060b      	lsls	r3, r1, #24
 80018b4:	ea43 2310 	orr.w	r3, r3, r0, lsr #8
 80018b8:	0602      	lsls	r2, r0, #24
 80018ba:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 80018be:	4621      	mov	r1, r4
 80018c0:	4311      	orrs	r1, r2
 80018c2:	60b9      	str	r1, [r7, #8]
 80018c4:	4629      	mov	r1, r5
 80018c6:	4319      	orrs	r1, r3
 80018c8:	60f9      	str	r1, [r7, #12]
 80018ca:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	@ 0x40
 80018ce:	f04f 0200 	mov.w	r2, #0
 80018d2:	f04f 0300 	mov.w	r3, #0
 80018d6:	040b      	lsls	r3, r1, #16
 80018d8:	ea43 4310 	orr.w	r3, r3, r0, lsr #16
 80018dc:	0402      	lsls	r2, r0, #16
 80018de:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80018e2:	4621      	mov	r1, r4
 80018e4:	ea41 0a02 	orr.w	sl, r1, r2
 80018e8:	4629      	mov	r1, r5
 80018ea:	ea41 0b03 	orr.w	fp, r1, r3
 80018ee:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	@ 0x48
 80018f2:	f04f 0200 	mov.w	r2, #0
 80018f6:	f04f 0300 	mov.w	r3, #0
 80018fa:	020b      	lsls	r3, r1, #8
 80018fc:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8001900:	0202      	lsls	r2, r0, #8
 8001902:	ea4a 0802 	orr.w	r8, sl, r2
 8001906:	ea4b 0903 	orr.w	r9, fp, r3
 800190a:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 800190e:	ea48 0102 	orr.w	r1, r8, r2
 8001912:	6039      	str	r1, [r7, #0]
 8001914:	ea49 0303 	orr.w	r3, r9, r3
 8001918:	607b      	str	r3, [r7, #4]
 800191a:	69fb      	ldr	r3, [r7, #28]
 800191c:	e9d7 1200 	ldrd	r1, r2, [r7]
 8001920:	e9c3 1200 	strd	r1, r2, [r3]
		}
	}

	return result;
 8001924:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
}
 8001926:	4618      	mov	r0, r3
 8001928:	3760      	adds	r7, #96	@ 0x60
 800192a:	46bd      	mov	sp, r7
 800192c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001930:	20000160 	.word	0x20000160

08001934 <BC_Manage_Interrupts>:

/*------GESTIONE DELLE INTERRUZIONI------*/
void BC_Manage_Interrupts(uint64_t flags)
{
 8001934:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001938:	b084      	sub	sp, #16
 800193a:	af00      	add	r7, sp, #0
 800193c:	e9c7 0100 	strd	r0, r1, [r7]
	uint8_t status = 0;
 8001940:	2100      	movs	r1, #0
 8001942:	73f9      	strb	r1, [r7, #15]

	if((flags & POOR_SOURCE_MASK) != 0)   //INGRESSO NON BUONO
 8001944:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001948:	f04f 0800 	mov.w	r8, #0
 800194c:	f401 5980 	and.w	r9, r1, #4096	@ 0x1000
	{

	}

	if((flags & VAC2_CHANGE_MASK) != 0)  //PANNELLO INSERITO O RIMOSSO
 8001950:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001954:	2200      	movs	r2, #0
 8001956:	f401 6380 	and.w	r3, r1, #1024	@ 0x400
 800195a:	4313      	orrs	r3, r2
 800195c:	d013      	beq.n	8001986 <BC_Manage_Interrupts+0x52>
	{
		BC_Read_Reg(REG1B_CHARGER_STATUS_0, (uint8_t *)& status);
 800195e:	f107 030f 	add.w	r3, r7, #15
 8001962:	4619      	mov	r1, r3
 8001964:	201b      	movs	r0, #27
 8001966:	f7ff ff0b 	bl	8001780 <BC_Read_Reg>
		if((status & VAC2_PRESENT_MASK) != 0)
 800196a:	7bfb      	ldrb	r3, [r7, #15]
 800196c:	f003 0302 	and.w	r3, r3, #2
 8001970:	2b00      	cmp	r3, #0
 8001972:	d004      	beq.n	800197e <BC_Manage_Interrupts+0x4a>
		{
			BC_Write_Reg(REG13_CHARGER_CONTROL_4, 0x80); //INSERITA
 8001974:	2180      	movs	r1, #128	@ 0x80
 8001976:	2013      	movs	r0, #19
 8001978:	f7ff fede 	bl	8001738 <BC_Write_Reg>
 800197c:	e003      	b.n	8001986 <BC_Manage_Interrupts+0x52>
		}
		else
		{
			BC_Write_Reg(REG13_CHARGER_CONTROL_4, 0x40); //RIMOSSA
 800197e:	2140      	movs	r1, #64	@ 0x40
 8001980:	2013      	movs	r0, #19
 8001982:	f7ff fed9 	bl	8001738 <BC_Write_Reg>
		}
	}

	if((flags & VAC1_CHANGE_MASK) != 0)  //TURBINA INSERITA O RIMOSSA
 8001986:	e9d7 2300 	ldrd	r2, r3, [r7]
 800198a:	2400      	movs	r4, #0
 800198c:	f403 7500 	and.w	r5, r3, #512	@ 0x200
	{

	}
}
 8001990:	bf00      	nop
 8001992:	3710      	adds	r7, #16
 8001994:	46bd      	mov	sp, r7
 8001996:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
	...

0800199c <HAL_UARTEx_RxEventCallback>:
	}
}

/* ------CALLBACK UART RX IDLE------*/
void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800199c:	b580      	push	{r7, lr}
 800199e:	b082      	sub	sp, #8
 80019a0:	af00      	add	r7, sp, #0
 80019a2:	6078      	str	r0, [r7, #4]
 80019a4:	460b      	mov	r3, r1
 80019a6:	807b      	strh	r3, [r7, #2]
    if(huart == LTE_UART && Size > 8)
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	4a2b      	ldr	r2, [pc, #172]	@ (8001a58 <HAL_UARTEx_RxEventCallback+0xbc>)
 80019ac:	4293      	cmp	r3, r2
 80019ae:	d112      	bne.n	80019d6 <HAL_UARTEx_RxEventCallback+0x3a>
 80019b0:	887b      	ldrh	r3, [r7, #2]
 80019b2:	2b08      	cmp	r3, #8
 80019b4:	d90f      	bls.n	80019d6 <HAL_UARTEx_RxEventCallback+0x3a>
    {
        if(*(uint32_t*)sim_rx_buffer == 0x534D532B &&           // "+SMS"
 80019b6:	4b29      	ldr	r3, [pc, #164]	@ (8001a5c <HAL_UARTEx_RxEventCallback+0xc0>)
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	4a29      	ldr	r2, [pc, #164]	@ (8001a60 <HAL_UARTEx_RxEventCallback+0xc4>)
 80019bc:	4293      	cmp	r3, r2
 80019be:	d140      	bne.n	8001a42 <HAL_UARTEx_RxEventCallback+0xa6>
           *(uint32_t*)(sim_rx_buffer + 4) == 0x203A4255) {     // "UB: "
 80019c0:	4b28      	ldr	r3, [pc, #160]	@ (8001a64 <HAL_UARTEx_RxEventCallback+0xc8>)
 80019c2:	681b      	ldr	r3, [r3, #0]
        if(*(uint32_t*)sim_rx_buffer == 0x534D532B &&           // "+SMS"
 80019c4:	4a28      	ldr	r2, [pc, #160]	@ (8001a68 <HAL_UARTEx_RxEventCallback+0xcc>)
 80019c6:	4293      	cmp	r3, r2
 80019c8:	d13b      	bne.n	8001a42 <HAL_UARTEx_RxEventCallback+0xa6>
            flags.MQTT_Message_Rx = 1;
 80019ca:	4a28      	ldr	r2, [pc, #160]	@ (8001a6c <HAL_UARTEx_RxEventCallback+0xd0>)
 80019cc:	7813      	ldrb	r3, [r2, #0]
 80019ce:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80019d2:	7013      	strb	r3, [r2, #0]
        if(*(uint32_t*)sim_rx_buffer == 0x534D532B &&           // "+SMS"
 80019d4:	e035      	b.n	8001a42 <HAL_UARTEx_RxEventCallback+0xa6>
        }

    }
	else if(huart == LTE_UART && Size > 0)
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	4a1f      	ldr	r2, [pc, #124]	@ (8001a58 <HAL_UARTEx_RxEventCallback+0xbc>)
 80019da:	4293      	cmp	r3, r2
 80019dc:	d113      	bne.n	8001a06 <HAL_UARTEx_RxEventCallback+0x6a>
 80019de:	887b      	ldrh	r3, [r7, #2]
 80019e0:	2b00      	cmp	r3, #0
 80019e2:	d010      	beq.n	8001a06 <HAL_UARTEx_RxEventCallback+0x6a>
	{
		if(*(uint8_t*)sim_rx_buffer == '>')
 80019e4:	4b1d      	ldr	r3, [pc, #116]	@ (8001a5c <HAL_UARTEx_RxEventCallback+0xc0>)
 80019e6:	781b      	ldrb	r3, [r3, #0]
 80019e8:	2b3e      	cmp	r3, #62	@ 0x3e
 80019ea:	d12b      	bne.n	8001a44 <HAL_UARTEx_RxEventCallback+0xa8>
		{
			flags.MQTT_ReadytoSend = 1;
 80019ec:	4a1f      	ldr	r2, [pc, #124]	@ (8001a6c <HAL_UARTEx_RxEventCallback+0xd0>)
 80019ee:	7853      	ldrb	r3, [r2, #1]
 80019f0:	f043 0301 	orr.w	r3, r3, #1
 80019f4:	7053      	strb	r3, [r2, #1]
			sys.SIM_Prompt_Status = 0;
 80019f6:	4b1e      	ldr	r3, [pc, #120]	@ (8001a70 <HAL_UARTEx_RxEventCallback+0xd4>)
 80019f8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80019fc:	461a      	mov	r2, r3
 80019fe:	2300      	movs	r3, #0
 8001a00:	f8c2 30ac 	str.w	r3, [r2, #172]	@ 0xac
		if(*(uint8_t*)sim_rx_buffer == '>')
 8001a04:	e01e      	b.n	8001a44 <HAL_UARTEx_RxEventCallback+0xa8>
		}
	}
	else if(huart == LTE_UART && Size > 4)
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	4a13      	ldr	r2, [pc, #76]	@ (8001a58 <HAL_UARTEx_RxEventCallback+0xbc>)
 8001a0a:	4293      	cmp	r3, r2
 8001a0c:	d11a      	bne.n	8001a44 <HAL_UARTEx_RxEventCallback+0xa8>
 8001a0e:	887b      	ldrh	r3, [r7, #2]
 8001a10:	2b04      	cmp	r3, #4
 8001a12:	d917      	bls.n	8001a44 <HAL_UARTEx_RxEventCallback+0xa8>
	{
		if(*(uint32_t*)sim_rx_buffer == 0x4552524F)            //"ERRO"
 8001a14:	4b11      	ldr	r3, [pc, #68]	@ (8001a5c <HAL_UARTEx_RxEventCallback+0xc0>)
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	4a16      	ldr	r2, [pc, #88]	@ (8001a74 <HAL_UARTEx_RxEventCallback+0xd8>)
 8001a1a:	4293      	cmp	r3, r2
 8001a1c:	d112      	bne.n	8001a44 <HAL_UARTEx_RxEventCallback+0xa8>
		{
			flags.MQTT_ReadytoSend = 0;
 8001a1e:	4a13      	ldr	r2, [pc, #76]	@ (8001a6c <HAL_UARTEx_RxEventCallback+0xd0>)
 8001a20:	7853      	ldrb	r3, [r2, #1]
 8001a22:	f023 0301 	bic.w	r3, r3, #1
 8001a26:	7053      	strb	r3, [r2, #1]
			flags.CMD.Data_Request = 1;
 8001a28:	4a10      	ldr	r2, [pc, #64]	@ (8001a6c <HAL_UARTEx_RxEventCallback+0xd0>)
 8001a2a:	7893      	ldrb	r3, [r2, #2]
 8001a2c:	f043 0301 	orr.w	r3, r3, #1
 8001a30:	7093      	strb	r3, [r2, #2]
			sys.SIM_Prompt_Status = 0;
 8001a32:	4b0f      	ldr	r3, [pc, #60]	@ (8001a70 <HAL_UARTEx_RxEventCallback+0xd4>)
 8001a34:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001a38:	461a      	mov	r2, r3
 8001a3a:	2300      	movs	r3, #0
 8001a3c:	f8c2 30ac 	str.w	r3, [r2, #172]	@ 0xac
 8001a40:	e000      	b.n	8001a44 <HAL_UARTEx_RxEventCallback+0xa8>
        if(*(uint32_t*)sim_rx_buffer == 0x534D532B &&           // "+SMS"
 8001a42:	bf00      	nop
		}
	}
	
	HAL_UARTEx_ReceiveToIdle_DMA(LTE_UART, sim_rx_buffer, SIM_RXBUFFER_SIZE);
 8001a44:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001a48:	4904      	ldr	r1, [pc, #16]	@ (8001a5c <HAL_UARTEx_RxEventCallback+0xc0>)
 8001a4a:	4803      	ldr	r0, [pc, #12]	@ (8001a58 <HAL_UARTEx_RxEventCallback+0xbc>)
 8001a4c:	f011 f89a 	bl	8012b84 <HAL_UARTEx_ReceiveToIdle_DMA>
}
 8001a50:	bf00      	nop
 8001a52:	3708      	adds	r7, #8
 8001a54:	46bd      	mov	sp, r7
 8001a56:	bd80      	pop	{r7, pc}
 8001a58:	2000049c 	.word	0x2000049c
 8001a5c:	20004cd8 	.word	0x20004cd8
 8001a60:	534d532b 	.word	0x534d532b
 8001a64:	20004cdc 	.word	0x20004cdc
 8001a68:	203a4255 	.word	0x203a4255
 8001a6c:	20001a50 	.word	0x20001a50
 8001a70:	200005b8 	.word	0x200005b8
 8001a74:	4552524f 	.word	0x4552524f

08001a78 <HAL_UART_RxCpltCallback>:

/* ------CALLBACK UART RX COMPLETE------*/
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8001a78:	b480      	push	{r7}
 8001a7a:	b083      	sub	sp, #12
 8001a7c:	af00      	add	r7, sp, #0
 8001a7e:	6078      	str	r0, [r7, #4]
	if (huart == LTE_UART)
	{

	}

}
 8001a80:	bf00      	nop
 8001a82:	370c      	adds	r7, #12
 8001a84:	46bd      	mov	sp, r7
 8001a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a8a:	4770      	bx	lr

08001a8c <HAL_UART_TxCpltCallback>:

/* ------CALLBACK UART TX COMPLETE------*/
void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8001a8c:	b480      	push	{r7}
 8001a8e:	b083      	sub	sp, #12
 8001a90:	af00      	add	r7, sp, #0
 8001a92:	6078      	str	r0, [r7, #4]
	if (huart == LTE_UART)
	{

	}

}
 8001a94:	bf00      	nop
 8001a96:	370c      	adds	r7, #12
 8001a98:	46bd      	mov	sp, r7
 8001a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a9e:	4770      	bx	lr

08001aa0 <HAL_ADC_ConvHalfCpltCallback>:

/* ------CALLBACK HALF ADC------*/
void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8001aa0:	b480      	push	{r7}
 8001aa2:	b083      	sub	sp, #12
 8001aa4:	af00      	add	r7, sp, #0
 8001aa6:	6078      	str	r0, [r7, #4]
	if(hadc == PRESSURE_ADC)
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	4a09      	ldr	r2, [pc, #36]	@ (8001ad0 <HAL_ADC_ConvHalfCpltCallback+0x30>)
 8001aac:	4293      	cmp	r3, r2
 8001aae:	d109      	bne.n	8001ac4 <HAL_ADC_ConvHalfCpltCallback+0x24>
	{
		flags.ADC_Complete = 1;
 8001ab0:	4a08      	ldr	r2, [pc, #32]	@ (8001ad4 <HAL_ADC_ConvHalfCpltCallback+0x34>)
 8001ab2:	7813      	ldrb	r3, [r2, #0]
 8001ab4:	f043 0301 	orr.w	r3, r3, #1
 8001ab8:	7013      	strb	r3, [r2, #0]
		flags.ADC_Half_Buffer = 1;
 8001aba:	4a06      	ldr	r2, [pc, #24]	@ (8001ad4 <HAL_ADC_ConvHalfCpltCallback+0x34>)
 8001abc:	7813      	ldrb	r3, [r2, #0]
 8001abe:	f043 0302 	orr.w	r3, r3, #2
 8001ac2:	7013      	strb	r3, [r2, #0]
	}
}
 8001ac4:	bf00      	nop
 8001ac6:	370c      	adds	r7, #12
 8001ac8:	46bd      	mov	sp, r7
 8001aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ace:	4770      	bx	lr
 8001ad0:	20000090 	.word	0x20000090
 8001ad4:	20001a50 	.word	0x20001a50

08001ad8 <HAL_ADC_ConvCpltCallback>:

/*------CALLBACK FULL ADC------*/
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8001ad8:	b480      	push	{r7}
 8001ada:	b083      	sub	sp, #12
 8001adc:	af00      	add	r7, sp, #0
 8001ade:	6078      	str	r0, [r7, #4]
	if(hadc == PRESSURE_ADC)
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	4a09      	ldr	r2, [pc, #36]	@ (8001b08 <HAL_ADC_ConvCpltCallback+0x30>)
 8001ae4:	4293      	cmp	r3, r2
 8001ae6:	d109      	bne.n	8001afc <HAL_ADC_ConvCpltCallback+0x24>
	{
		flags.ADC_Complete = 1;
 8001ae8:	4a08      	ldr	r2, [pc, #32]	@ (8001b0c <HAL_ADC_ConvCpltCallback+0x34>)
 8001aea:	7813      	ldrb	r3, [r2, #0]
 8001aec:	f043 0301 	orr.w	r3, r3, #1
 8001af0:	7013      	strb	r3, [r2, #0]
		flags.ADC_Full_Buffer = 1;
 8001af2:	4a06      	ldr	r2, [pc, #24]	@ (8001b0c <HAL_ADC_ConvCpltCallback+0x34>)
 8001af4:	7813      	ldrb	r3, [r2, #0]
 8001af6:	f043 0304 	orr.w	r3, r3, #4
 8001afa:	7013      	strb	r3, [r2, #0]
	}
}
 8001afc:	bf00      	nop
 8001afe:	370c      	adds	r7, #12
 8001b00:	46bd      	mov	sp, r7
 8001b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b06:	4770      	bx	lr
 8001b08:	20000090 	.word	0x20000090
 8001b0c:	20001a50 	.word	0x20001a50

08001b10 <HAL_RTC_AlarmAEventCallback>:

/*------CALLBACK RTC CAMBIO ORA------*/
void HAL_RTC_AlarmAEventCallback(RTC_HandleTypeDef *hrtc)
{
 8001b10:	b580      	push	{r7, lr}
 8001b12:	b092      	sub	sp, #72	@ 0x48
 8001b14:	af00      	add	r7, sp, #0
 8001b16:	6078      	str	r0, [r7, #4]
	RTC_TimeTypeDef gTime;
	RTC_AlarmTypeDef sAlarm = {0};
 8001b18:	f107 0308 	add.w	r3, r7, #8
 8001b1c:	222c      	movs	r2, #44	@ 0x2c
 8001b1e:	2100      	movs	r1, #0
 8001b20:	4618      	mov	r0, r3
 8001b22:	f011 f96d 	bl	8012e00 <memset>

	HAL_RTC_GetTime(hrtc, &gTime, RTC_FORMAT_BIN);
 8001b26:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8001b2a:	2200      	movs	r2, #0
 8001b2c:	4619      	mov	r1, r3
 8001b2e:	6878      	ldr	r0, [r7, #4]
 8001b30:	f00c fb43 	bl	800e1ba <HAL_RTC_GetTime>

	sys.Low_th = Low_TH[gTime.Hours];
 8001b34:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 8001b38:	461a      	mov	r2, r3
 8001b3a:	4b17      	ldr	r3, [pc, #92]	@ (8001b98 <HAL_RTC_AlarmAEventCallback+0x88>)
 8001b3c:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 8001b40:	4b16      	ldr	r3, [pc, #88]	@ (8001b9c <HAL_RTC_AlarmAEventCallback+0x8c>)
 8001b42:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001b46:	85da      	strh	r2, [r3, #46]	@ 0x2e
	sys.High_th = High_TH[gTime.Hours];
 8001b48:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 8001b4c:	461a      	mov	r2, r3
 8001b4e:	4b14      	ldr	r3, [pc, #80]	@ (8001ba0 <HAL_RTC_AlarmAEventCallback+0x90>)
 8001b50:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 8001b54:	4b11      	ldr	r3, [pc, #68]	@ (8001b9c <HAL_RTC_AlarmAEventCallback+0x8c>)
 8001b56:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001b5a:	861a      	strh	r2, [r3, #48]	@ 0x30

	sAlarm.AlarmTime.Hours = 0;
 8001b5c:	2300      	movs	r3, #0
 8001b5e:	723b      	strb	r3, [r7, #8]
    sAlarm.AlarmTime.Minutes = 0;
 8001b60:	2300      	movs	r3, #0
 8001b62:	727b      	strb	r3, [r7, #9]
    sAlarm.AlarmTime.Seconds = 0;
 8001b64:	2300      	movs	r3, #0
 8001b66:	72bb      	strb	r3, [r7, #10]
    sAlarm.AlarmMask = RTC_ALARMMASK_DATEWEEKDAY | RTC_ALARMMASK_HOURS | RTC_ALARMMASK_SECONDS;
 8001b68:	4b0e      	ldr	r3, [pc, #56]	@ (8001ba4 <HAL_RTC_AlarmAEventCallback+0x94>)
 8001b6a:	61fb      	str	r3, [r7, #28]
    sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 8001b6c:	2300      	movs	r3, #0
 8001b6e:	627b      	str	r3, [r7, #36]	@ 0x24
    sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 8001b70:	2300      	movs	r3, #0
 8001b72:	62bb      	str	r3, [r7, #40]	@ 0x28
    sAlarm.AlarmDateWeekDay = 1;
 8001b74:	2301      	movs	r3, #1
 8001b76:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
    sAlarm.Alarm = RTC_ALARM_A;
 8001b7a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001b7e:	633b      	str	r3, [r7, #48]	@ 0x30
    
    HAL_RTC_SetAlarm_IT(hrtc, &sAlarm, RTC_FORMAT_BIN);
 8001b80:	f107 0308 	add.w	r3, r7, #8
 8001b84:	2200      	movs	r2, #0
 8001b86:	4619      	mov	r1, r3
 8001b88:	6878      	ldr	r0, [r7, #4]
 8001b8a:	f00c fbf9 	bl	800e380 <HAL_RTC_SetAlarm_IT>
}
 8001b8e:	bf00      	nop
 8001b90:	3748      	adds	r7, #72	@ 0x48
 8001b92:	46bd      	mov	sp, r7
 8001b94:	bd80      	pop	{r7, pc}
 8001b96:	bf00      	nop
 8001b98:	20004c98 	.word	0x20004c98
 8001b9c:	200005b8 	.word	0x200005b8
 8001ba0:	20004c68 	.word	0x20004c68
 8001ba4:	80800080 	.word	0x80800080

08001ba8 <extflash_cs_set>:
uint32_t	exflashNumSectors = 0;
uint8_t		exflashInitDone = 0;


void extflash_cs_set()
{
 8001ba8:	b580      	push	{r7, lr}
 8001baa:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(FLASH_nCS_GPIO_Port, FLASH_nCS_Pin, GPIO_PIN_RESET);
 8001bac:	2200      	movs	r2, #0
 8001bae:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001bb2:	4802      	ldr	r0, [pc, #8]	@ (8001bbc <extflash_cs_set+0x14>)
 8001bb4:	f009 fc5a 	bl	800b46c <HAL_GPIO_WritePin>
}
 8001bb8:	bf00      	nop
 8001bba:	bd80      	pop	{r7, pc}
 8001bbc:	48000400 	.word	0x48000400

08001bc0 <extflash_cs_reset>:

void extflash_cs_reset()
{
 8001bc0:	b580      	push	{r7, lr}
 8001bc2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(FLASH_nCS_GPIO_Port, FLASH_nCS_Pin, GPIO_PIN_SET);
 8001bc4:	2201      	movs	r2, #1
 8001bc6:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001bca:	4802      	ldr	r0, [pc, #8]	@ (8001bd4 <extflash_cs_reset+0x14>)
 8001bcc:	f009 fc4e 	bl	800b46c <HAL_GPIO_WritePin>
}
 8001bd0:	bf00      	nop
 8001bd2:	bd80      	pop	{r7, pc}
 8001bd4:	48000400 	.word	0x48000400

08001bd8 <extflash_wp_reset>:
{
	HAL_GPIO_WritePin(FLASH_nWP_GPIO_Port, FLASH_nWP_Pin, GPIO_PIN_RESET);
}

void extflash_wp_reset()
{
 8001bd8:	b580      	push	{r7, lr}
 8001bda:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(FLASH_nWP_GPIO_Port, FLASH_nWP_Pin, GPIO_PIN_SET);
 8001bdc:	2201      	movs	r2, #1
 8001bde:	2140      	movs	r1, #64	@ 0x40
 8001be0:	4802      	ldr	r0, [pc, #8]	@ (8001bec <extflash_wp_reset+0x14>)
 8001be2:	f009 fc43 	bl	800b46c <HAL_GPIO_WritePin>
}
 8001be6:	bf00      	nop
 8001be8:	bd80      	pop	{r7, pc}
 8001bea:	bf00      	nop
 8001bec:	48000800 	.word	0x48000800

08001bf0 <extflash_hard_reset>:


void extflash_hard_reset()
{
 8001bf0:	b580      	push	{r7, lr}
 8001bf2:	af00      	add	r7, sp, #0

	HAL_GPIO_WritePin(FLASH_nRESET_GPIO_Port, FLASH_nRESET_Pin, GPIO_PIN_RESET);
 8001bf4:	2200      	movs	r2, #0
 8001bf6:	2180      	movs	r1, #128	@ 0x80
 8001bf8:	4806      	ldr	r0, [pc, #24]	@ (8001c14 <extflash_hard_reset+0x24>)
 8001bfa:	f009 fc37 	bl	800b46c <HAL_GPIO_WritePin>

	HAL_Delay(50);
 8001bfe:	2032      	movs	r0, #50	@ 0x32
 8001c00:	f007 fa6c 	bl	80090dc <HAL_Delay>

	HAL_GPIO_WritePin(FLASH_nRESET_GPIO_Port, FLASH_nRESET_Pin, GPIO_PIN_SET);
 8001c04:	2201      	movs	r2, #1
 8001c06:	2180      	movs	r1, #128	@ 0x80
 8001c08:	4802      	ldr	r0, [pc, #8]	@ (8001c14 <extflash_hard_reset+0x24>)
 8001c0a:	f009 fc2f 	bl	800b46c <HAL_GPIO_WritePin>

	return;
 8001c0e:	bf00      	nop
}
 8001c10:	bd80      	pop	{r7, pc}
 8001c12:	bf00      	nop
 8001c14:	48000800 	.word	0x48000800

08001c18 <extflash_send_cmd>:


int32_t extflash_send_cmd(extflash_cmd_t command)
{
 8001c18:	b580      	push	{r7, lr}
 8001c1a:	b088      	sub	sp, #32
 8001c1c:	af00      	add	r7, sp, #0
 8001c1e:	6078      	str	r0, [r7, #4]

	uint8_t addr_bytes[4] = {0};
 8001c20:	2300      	movs	r3, #0
 8001c22:	61bb      	str	r3, [r7, #24]
	uint8_t dummy_bytes[8] = {0};
 8001c24:	f107 0310 	add.w	r3, r7, #16
 8001c28:	2200      	movs	r2, #0
 8001c2a:	601a      	str	r2, [r3, #0]
 8001c2c:	605a      	str	r2, [r3, #4]
	uint8_t dummy = 0;
 8001c2e:	2300      	movs	r3, #0
 8001c30:	77fb      	strb	r3, [r7, #31]
	uint8_t cmd_data = command->cmd;
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	781b      	ldrb	r3, [r3, #0]
 8001c36:	73fb      	strb	r3, [r7, #15]

	if(command->address_en != 0)
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	785b      	ldrb	r3, [r3, #1]
 8001c3c:	2b00      	cmp	r3, #0
 8001c3e:	d00d      	beq.n	8001c5c <extflash_send_cmd+0x44>
	{
		addr_bytes[0] = (command->address >> 16) & 0xFF;
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	689b      	ldr	r3, [r3, #8]
 8001c44:	0c1b      	lsrs	r3, r3, #16
 8001c46:	b2db      	uxtb	r3, r3
 8001c48:	763b      	strb	r3, [r7, #24]
		addr_bytes[1] = (command->address >> 8) & 0xFF;
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	689b      	ldr	r3, [r3, #8]
 8001c4e:	0a1b      	lsrs	r3, r3, #8
 8001c50:	b2db      	uxtb	r3, r3
 8001c52:	767b      	strb	r3, [r7, #25]
		addr_bytes[2] = (command->address) & 0xFF;
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	689b      	ldr	r3, [r3, #8]
 8001c58:	b2db      	uxtb	r3, r3
 8001c5a:	76bb      	strb	r3, [r7, #26]
	}

	extflash_cs_set();
 8001c5c:	f7ff ffa4 	bl	8001ba8 <extflash_cs_set>

	HAL_SPI_Transmit(EXTFLASH_SPI, &cmd_data, 1, FLASH_SPI_DEF_TIMEOUT);
 8001c60:	f107 010f 	add.w	r1, r7, #15
 8001c64:	2364      	movs	r3, #100	@ 0x64
 8001c66:	2201      	movs	r2, #1
 8001c68:	4823      	ldr	r0, [pc, #140]	@ (8001cf8 <extflash_send_cmd+0xe0>)
 8001c6a:	f00c fe88 	bl	800e97e <HAL_SPI_Transmit>

	if(command->address_en != 0)
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	785b      	ldrb	r3, [r3, #1]
 8001c72:	2b00      	cmp	r3, #0
 8001c74:	d006      	beq.n	8001c84 <extflash_send_cmd+0x6c>
	{
		HAL_SPI_Transmit(EXTFLASH_SPI, addr_bytes, 3, FLASH_SPI_DEF_TIMEOUT);
 8001c76:	f107 0118 	add.w	r1, r7, #24
 8001c7a:	2364      	movs	r3, #100	@ 0x64
 8001c7c:	2203      	movs	r2, #3
 8001c7e:	481e      	ldr	r0, [pc, #120]	@ (8001cf8 <extflash_send_cmd+0xe0>)
 8001c80:	f00c fe7d 	bl	800e97e <HAL_SPI_Transmit>
	}

	if(command->dummy_nb > 0)
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	88db      	ldrh	r3, [r3, #6]
 8001c88:	2b00      	cmp	r3, #0
 8001c8a:	d00e      	beq.n	8001caa <extflash_send_cmd+0x92>
	{
		dummy = command->dummy_nb > sizeof(dummy_bytes) ? sizeof(dummy_bytes) : command->dummy_nb;
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	88db      	ldrh	r3, [r3, #6]
 8001c90:	2b08      	cmp	r3, #8
 8001c92:	bf28      	it	cs
 8001c94:	2308      	movcs	r3, #8
 8001c96:	b29b      	uxth	r3, r3
 8001c98:	77fb      	strb	r3, [r7, #31]
		HAL_SPI_Transmit(EXTFLASH_SPI, dummy_bytes, dummy, FLASH_SPI_DEF_TIMEOUT);
 8001c9a:	7ffb      	ldrb	r3, [r7, #31]
 8001c9c:	b29a      	uxth	r2, r3
 8001c9e:	f107 0110 	add.w	r1, r7, #16
 8001ca2:	2364      	movs	r3, #100	@ 0x64
 8001ca4:	4814      	ldr	r0, [pc, #80]	@ (8001cf8 <extflash_send_cmd+0xe0>)
 8001ca6:	f00c fe6a 	bl	800e97e <HAL_SPI_Transmit>
	}

	if(command->tx_nb > 0 && command->tx_data != NULL)
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	885b      	ldrh	r3, [r3, #2]
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	d00b      	beq.n	8001cca <extflash_send_cmd+0xb2>
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	68db      	ldr	r3, [r3, #12]
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	d007      	beq.n	8001cca <extflash_send_cmd+0xb2>
	{
		HAL_SPI_Transmit(EXTFLASH_SPI, command->tx_data, command->tx_nb, FLASH_SPI_DEF_TIMEOUT);
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	68d9      	ldr	r1, [r3, #12]
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	885a      	ldrh	r2, [r3, #2]
 8001cc2:	2364      	movs	r3, #100	@ 0x64
 8001cc4:	480c      	ldr	r0, [pc, #48]	@ (8001cf8 <extflash_send_cmd+0xe0>)
 8001cc6:	f00c fe5a 	bl	800e97e <HAL_SPI_Transmit>
	}

	if(command->rx_nb > 0 && command->rx_data != NULL)
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	889b      	ldrh	r3, [r3, #4]
 8001cce:	2b00      	cmp	r3, #0
 8001cd0:	d00b      	beq.n	8001cea <extflash_send_cmd+0xd2>
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	691b      	ldr	r3, [r3, #16]
 8001cd6:	2b00      	cmp	r3, #0
 8001cd8:	d007      	beq.n	8001cea <extflash_send_cmd+0xd2>
	{
		HAL_SPI_Receive(EXTFLASH_SPI, command->rx_data, command->rx_nb, FLASH_SPI_DEF_TIMEOUT);
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	6919      	ldr	r1, [r3, #16]
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	889a      	ldrh	r2, [r3, #4]
 8001ce2:	2364      	movs	r3, #100	@ 0x64
 8001ce4:	4804      	ldr	r0, [pc, #16]	@ (8001cf8 <extflash_send_cmd+0xe0>)
 8001ce6:	f00c ffc0 	bl	800ec6a <HAL_SPI_Receive>
	}

	extflash_cs_reset();
 8001cea:	f7ff ff69 	bl	8001bc0 <extflash_cs_reset>

	return 0;
 8001cee:	2300      	movs	r3, #0
}
 8001cf0:	4618      	mov	r0, r3
 8001cf2:	3720      	adds	r7, #32
 8001cf4:	46bd      	mov	sp, r7
 8001cf6:	bd80      	pop	{r7, pc}
 8001cf8:	2000021c 	.word	0x2000021c

08001cfc <extflash_read_extended_read_reg>:

}


int extflash_read_extended_read_reg(uint8_t *ereg)
{
 8001cfc:	b580      	push	{r7, lr}
 8001cfe:	b088      	sub	sp, #32
 8001d00:	af00      	add	r7, sp, #0
 8001d02:	6078      	str	r0, [r7, #4]

	extflash_cmd command = {0};
 8001d04:	f107 030c 	add.w	r3, r7, #12
 8001d08:	2200      	movs	r2, #0
 8001d0a:	601a      	str	r2, [r3, #0]
 8001d0c:	605a      	str	r2, [r3, #4]
 8001d0e:	609a      	str	r2, [r3, #8]
 8001d10:	60da      	str	r2, [r3, #12]
 8001d12:	611a      	str	r2, [r3, #16]
	command.cmd = EFLASH_CMD_RDERP;
 8001d14:	2381      	movs	r3, #129	@ 0x81
 8001d16:	733b      	strb	r3, [r7, #12]
	command.address_en = 0;
 8001d18:	2300      	movs	r3, #0
 8001d1a:	737b      	strb	r3, [r7, #13]
	command.address = 0;
 8001d1c:	2300      	movs	r3, #0
 8001d1e:	617b      	str	r3, [r7, #20]
	command.rx_nb = 1;
 8001d20:	2301      	movs	r3, #1
 8001d22:	823b      	strh	r3, [r7, #16]
	command.rx_data = ereg;
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	61fb      	str	r3, [r7, #28]

	return extflash_send_cmd(&command);
 8001d28:	f107 030c 	add.w	r3, r7, #12
 8001d2c:	4618      	mov	r0, r3
 8001d2e:	f7ff ff73 	bl	8001c18 <extflash_send_cmd>
 8001d32:	4603      	mov	r3, r0
}
 8001d34:	4618      	mov	r0, r3
 8001d36:	3720      	adds	r7, #32
 8001d38:	46bd      	mov	sp, r7
 8001d3a:	bd80      	pop	{r7, pc}

08001d3c <extflash_clear_extended_read_reg>:


int extflash_clear_extended_read_reg()
{
 8001d3c:	b580      	push	{r7, lr}
 8001d3e:	b086      	sub	sp, #24
 8001d40:	af00      	add	r7, sp, #0
	extflash_cmd command = {0};
 8001d42:	1d3b      	adds	r3, r7, #4
 8001d44:	2200      	movs	r2, #0
 8001d46:	601a      	str	r2, [r3, #0]
 8001d48:	605a      	str	r2, [r3, #4]
 8001d4a:	609a      	str	r2, [r3, #8]
 8001d4c:	60da      	str	r2, [r3, #12]
 8001d4e:	611a      	str	r2, [r3, #16]
	command.cmd = EFLASH_CMD_CLERP;
 8001d50:	2382      	movs	r3, #130	@ 0x82
 8001d52:	713b      	strb	r3, [r7, #4]

	return extflash_send_cmd(&command);
 8001d54:	1d3b      	adds	r3, r7, #4
 8001d56:	4618      	mov	r0, r3
 8001d58:	f7ff ff5e 	bl	8001c18 <extflash_send_cmd>
 8001d5c:	4603      	mov	r3, r0
}
 8001d5e:	4618      	mov	r0, r3
 8001d60:	3718      	adds	r7, #24
 8001d62:	46bd      	mov	sp, r7
 8001d64:	bd80      	pop	{r7, pc}

08001d66 <extflash_set_write_protection>:
	return extflash_send_cmd(&command);

}

int extflash_set_write_protection(uint8_t enable)
{
 8001d66:	b580      	push	{r7, lr}
 8001d68:	b088      	sub	sp, #32
 8001d6a:	af00      	add	r7, sp, #0
 8001d6c:	4603      	mov	r3, r0
 8001d6e:	71fb      	strb	r3, [r7, #7]

	extflash_cmd command = {0};
 8001d70:	f107 030c 	add.w	r3, r7, #12
 8001d74:	2200      	movs	r2, #0
 8001d76:	601a      	str	r2, [r3, #0]
 8001d78:	605a      	str	r2, [r3, #4]
 8001d7a:	609a      	str	r2, [r3, #8]
 8001d7c:	60da      	str	r2, [r3, #12]
 8001d7e:	611a      	str	r2, [r3, #16]
	command.cmd = enable==0 ? EFLASH_CMD_WREN : EFLASH_CMD_WRDI;
 8001d80:	79fb      	ldrb	r3, [r7, #7]
 8001d82:	2b00      	cmp	r3, #0
 8001d84:	d101      	bne.n	8001d8a <extflash_set_write_protection+0x24>
 8001d86:	2306      	movs	r3, #6
 8001d88:	e000      	b.n	8001d8c <extflash_set_write_protection+0x26>
 8001d8a:	2304      	movs	r3, #4
 8001d8c:	733b      	strb	r3, [r7, #12]

	return extflash_send_cmd(&command);
 8001d8e:	f107 030c 	add.w	r3, r7, #12
 8001d92:	4618      	mov	r0, r3
 8001d94:	f7ff ff40 	bl	8001c18 <extflash_send_cmd>
 8001d98:	4603      	mov	r3, r0
}
 8001d9a:	4618      	mov	r0, r3
 8001d9c:	3720      	adds	r7, #32
 8001d9e:	46bd      	mov	sp, r7
 8001da0:	bd80      	pop	{r7, pc}

08001da2 <extflash_read_sfdp>:

int extflash_read_sfdp(uint32_t regaddr, uint8_t *reg, uint8_t nregs)
{
 8001da2:	b580      	push	{r7, lr}
 8001da4:	b08a      	sub	sp, #40	@ 0x28
 8001da6:	af00      	add	r7, sp, #0
 8001da8:	60f8      	str	r0, [r7, #12]
 8001daa:	60b9      	str	r1, [r7, #8]
 8001dac:	4613      	mov	r3, r2
 8001dae:	71fb      	strb	r3, [r7, #7]

	extflash_cmd command = {0};
 8001db0:	f107 0314 	add.w	r3, r7, #20
 8001db4:	2200      	movs	r2, #0
 8001db6:	601a      	str	r2, [r3, #0]
 8001db8:	605a      	str	r2, [r3, #4]
 8001dba:	609a      	str	r2, [r3, #8]
 8001dbc:	60da      	str	r2, [r3, #12]
 8001dbe:	611a      	str	r2, [r3, #16]
	command.cmd = EFLASH_CMD_RDSFDP;
 8001dc0:	235a      	movs	r3, #90	@ 0x5a
 8001dc2:	753b      	strb	r3, [r7, #20]
	command.address_en = 1;
 8001dc4:	2301      	movs	r3, #1
 8001dc6:	757b      	strb	r3, [r7, #21]
	command.address = regaddr;
 8001dc8:	68fb      	ldr	r3, [r7, #12]
 8001dca:	61fb      	str	r3, [r7, #28]
	command.dummy_nb = 1;
 8001dcc:	2301      	movs	r3, #1
 8001dce:	837b      	strh	r3, [r7, #26]
	command.rx_nb = nregs;
 8001dd0:	79fb      	ldrb	r3, [r7, #7]
 8001dd2:	b29b      	uxth	r3, r3
 8001dd4:	833b      	strh	r3, [r7, #24]
	command.rx_data = reg;
 8001dd6:	68bb      	ldr	r3, [r7, #8]
 8001dd8:	627b      	str	r3, [r7, #36]	@ 0x24

	return extflash_send_cmd(&command);
 8001dda:	f107 0314 	add.w	r3, r7, #20
 8001dde:	4618      	mov	r0, r3
 8001de0:	f7ff ff1a 	bl	8001c18 <extflash_send_cmd>
 8001de4:	4603      	mov	r3, r0

}
 8001de6:	4618      	mov	r0, r3
 8001de8:	3728      	adds	r7, #40	@ 0x28
 8001dea:	46bd      	mov	sp, r7
 8001dec:	bd80      	pop	{r7, pc}

08001dee <extflash_raw_read>:

int extflash_raw_read(uint32_t address, uint8_t *pBuffer, uint16_t nbytes)
{
 8001dee:	b580      	push	{r7, lr}
 8001df0:	b08a      	sub	sp, #40	@ 0x28
 8001df2:	af00      	add	r7, sp, #0
 8001df4:	60f8      	str	r0, [r7, #12]
 8001df6:	60b9      	str	r1, [r7, #8]
 8001df8:	4613      	mov	r3, r2
 8001dfa:	80fb      	strh	r3, [r7, #6]

	extflash_cmd command = {0};
 8001dfc:	f107 0314 	add.w	r3, r7, #20
 8001e00:	2200      	movs	r2, #0
 8001e02:	601a      	str	r2, [r3, #0]
 8001e04:	605a      	str	r2, [r3, #4]
 8001e06:	609a      	str	r2, [r3, #8]
 8001e08:	60da      	str	r2, [r3, #12]
 8001e0a:	611a      	str	r2, [r3, #16]
	command.cmd = EFLASH_CMD_FRD;
 8001e0c:	230b      	movs	r3, #11
 8001e0e:	753b      	strb	r3, [r7, #20]
	command.address_en = 1;
 8001e10:	2301      	movs	r3, #1
 8001e12:	757b      	strb	r3, [r7, #21]
	command.address = address;
 8001e14:	68fb      	ldr	r3, [r7, #12]
 8001e16:	61fb      	str	r3, [r7, #28]
	command.dummy_nb = 1;
 8001e18:	2301      	movs	r3, #1
 8001e1a:	837b      	strh	r3, [r7, #26]
	command.rx_nb = nbytes;
 8001e1c:	88fb      	ldrh	r3, [r7, #6]
 8001e1e:	833b      	strh	r3, [r7, #24]
	command.rx_data = pBuffer;
 8001e20:	68bb      	ldr	r3, [r7, #8]
 8001e22:	627b      	str	r3, [r7, #36]	@ 0x24

	return extflash_send_cmd(&command);
 8001e24:	f107 0314 	add.w	r3, r7, #20
 8001e28:	4618      	mov	r0, r3
 8001e2a:	f7ff fef5 	bl	8001c18 <extflash_send_cmd>
 8001e2e:	4603      	mov	r3, r0

}
 8001e30:	4618      	mov	r0, r3
 8001e32:	3728      	adds	r7, #40	@ 0x28
 8001e34:	46bd      	mov	sp, r7
 8001e36:	bd80      	pop	{r7, pc}

08001e38 <extflash_raw_erase>:

int extflash_raw_erase(uint32_t address)
{
 8001e38:	b580      	push	{r7, lr}
 8001e3a:	b088      	sub	sp, #32
 8001e3c:	af00      	add	r7, sp, #0
 8001e3e:	6078      	str	r0, [r7, #4]

	extflash_cmd command = {0};
 8001e40:	f107 030c 	add.w	r3, r7, #12
 8001e44:	2200      	movs	r2, #0
 8001e46:	601a      	str	r2, [r3, #0]
 8001e48:	605a      	str	r2, [r3, #4]
 8001e4a:	609a      	str	r2, [r3, #8]
 8001e4c:	60da      	str	r2, [r3, #12]
 8001e4e:	611a      	str	r2, [r3, #16]
	command.cmd = EFLASH_CMD_SER;
 8001e50:	23d7      	movs	r3, #215	@ 0xd7
 8001e52:	733b      	strb	r3, [r7, #12]
	command.address_en = 1;
 8001e54:	2301      	movs	r3, #1
 8001e56:	737b      	strb	r3, [r7, #13]
	command.address = address;
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	617b      	str	r3, [r7, #20]

	return extflash_send_cmd(&command);
 8001e5c:	f107 030c 	add.w	r3, r7, #12
 8001e60:	4618      	mov	r0, r3
 8001e62:	f7ff fed9 	bl	8001c18 <extflash_send_cmd>
 8001e66:	4603      	mov	r3, r0
}
 8001e68:	4618      	mov	r0, r3
 8001e6a:	3720      	adds	r7, #32
 8001e6c:	46bd      	mov	sp, r7
 8001e6e:	bd80      	pop	{r7, pc}

08001e70 <extflash_raw_page_write>:

int extflash_raw_page_write(uint32_t address, const uint8_t *pBuffer)
{
 8001e70:	b580      	push	{r7, lr}
 8001e72:	b088      	sub	sp, #32
 8001e74:	af00      	add	r7, sp, #0
 8001e76:	6078      	str	r0, [r7, #4]
 8001e78:	6039      	str	r1, [r7, #0]

	extflash_cmd command = {0};
 8001e7a:	f107 030c 	add.w	r3, r7, #12
 8001e7e:	2200      	movs	r2, #0
 8001e80:	601a      	str	r2, [r3, #0]
 8001e82:	605a      	str	r2, [r3, #4]
 8001e84:	609a      	str	r2, [r3, #8]
 8001e86:	60da      	str	r2, [r3, #12]
 8001e88:	611a      	str	r2, [r3, #16]
	command.cmd = EFLASH_CMD_PP;
 8001e8a:	2302      	movs	r3, #2
 8001e8c:	733b      	strb	r3, [r7, #12]
	command.address_en = 1;
 8001e8e:	2301      	movs	r3, #1
 8001e90:	737b      	strb	r3, [r7, #13]
	command.address = address;
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	617b      	str	r3, [r7, #20]
	command.tx_nb = EFLASH_DEF_PAGE_SIZE;
 8001e96:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001e9a:	81fb      	strh	r3, [r7, #14]
	command.tx_data = pBuffer;
 8001e9c:	683b      	ldr	r3, [r7, #0]
 8001e9e:	61bb      	str	r3, [r7, #24]

	return extflash_send_cmd(&command);
 8001ea0:	f107 030c 	add.w	r3, r7, #12
 8001ea4:	4618      	mov	r0, r3
 8001ea6:	f7ff feb7 	bl	8001c18 <extflash_send_cmd>
 8001eaa:	4603      	mov	r3, r0
}
 8001eac:	4618      	mov	r0, r3
 8001eae:	3720      	adds	r7, #32
 8001eb0:	46bd      	mov	sp, r7
 8001eb2:	bd80      	pop	{r7, pc}

08001eb4 <extflash_sector_read>:


int extflash_sector_read(uint32_t sector, uint32_t nsectors, uint8_t *pBuffer)
{
 8001eb4:	b580      	push	{r7, lr}
 8001eb6:	b08a      	sub	sp, #40	@ 0x28
 8001eb8:	af00      	add	r7, sp, #0
 8001eba:	60f8      	str	r0, [r7, #12]
 8001ebc:	60b9      	str	r1, [r7, #8]
 8001ebe:	607a      	str	r2, [r7, #4]
	int result = 0;
 8001ec0:	2300      	movs	r3, #0
 8001ec2:	61fb      	str	r3, [r7, #28]
	uint8_t ereg = 0;
 8001ec4:	2300      	movs	r3, #0
 8001ec6:	75fb      	strb	r3, [r7, #23]
	uint32_t tmo = HAL_GetTick();
 8001ec8:	f007 f8fc 	bl	80090c4 <HAL_GetTick>
 8001ecc:	61b8      	str	r0, [r7, #24]
	uint8_t *wPtr = pBuffer;
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	627b      	str	r3, [r7, #36]	@ 0x24
	uint32_t address = sector * EFLASH_DEF_SECTOR_SIZE;
 8001ed2:	68fb      	ldr	r3, [r7, #12]
 8001ed4:	031b      	lsls	r3, r3, #12
 8001ed6:	623b      	str	r3, [r7, #32]

	if(extflash_read_extended_read_reg(&ereg) < 0)return -1;
 8001ed8:	f107 0317 	add.w	r3, r7, #23
 8001edc:	4618      	mov	r0, r3
 8001ede:	f7ff ff0d 	bl	8001cfc <extflash_read_extended_read_reg>
 8001ee2:	4603      	mov	r3, r0
 8001ee4:	2b00      	cmp	r3, #0
 8001ee6:	da10      	bge.n	8001f0a <extflash_sector_read+0x56>
 8001ee8:	f04f 33ff 	mov.w	r3, #4294967295
 8001eec:	e037      	b.n	8001f5e <extflash_sector_read+0xaa>

	while((ereg & ESTATUS_WIP) && (HAL_GetTick() - tmo < FLASH_WRITE_ERASE_TIMEOUT))
	{
		//Scrittura-erase in corso
		if(extflash_read_extended_read_reg(&ereg) < 0)return -1;
 8001eee:	f107 0317 	add.w	r3, r7, #23
 8001ef2:	4618      	mov	r0, r3
 8001ef4:	f7ff ff02 	bl	8001cfc <extflash_read_extended_read_reg>
 8001ef8:	4603      	mov	r3, r0
 8001efa:	2b00      	cmp	r3, #0
 8001efc:	da02      	bge.n	8001f04 <extflash_sector_read+0x50>
 8001efe:	f04f 33ff 	mov.w	r3, #4294967295
 8001f02:	e02c      	b.n	8001f5e <extflash_sector_read+0xaa>
		HAL_Delay(FLASH_STATUS_POLL_INTERVAL);
 8001f04:	2001      	movs	r0, #1
 8001f06:	f007 f8e9 	bl	80090dc <HAL_Delay>
	while((ereg & ESTATUS_WIP) && (HAL_GetTick() - tmo < FLASH_WRITE_ERASE_TIMEOUT))
 8001f0a:	7dfb      	ldrb	r3, [r7, #23]
 8001f0c:	f003 0301 	and.w	r3, r3, #1
 8001f10:	2b00      	cmp	r3, #0
 8001f12:	d020      	beq.n	8001f56 <extflash_sector_read+0xa2>
 8001f14:	f007 f8d6 	bl	80090c4 <HAL_GetTick>
 8001f18:	4602      	mov	r2, r0
 8001f1a:	69bb      	ldr	r3, [r7, #24]
 8001f1c:	1ad3      	subs	r3, r2, r3
 8001f1e:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8001f22:	d3e4      	bcc.n	8001eee <extflash_sector_read+0x3a>
	}

	while(nsectors > 0)
 8001f24:	e017      	b.n	8001f56 <extflash_sector_read+0xa2>
	{
		result = extflash_raw_read(address, wPtr, EFLASH_DEF_SECTOR_SIZE);
 8001f26:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8001f2a:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8001f2c:	6a38      	ldr	r0, [r7, #32]
 8001f2e:	f7ff ff5e 	bl	8001dee <extflash_raw_read>
 8001f32:	61f8      	str	r0, [r7, #28]
		if(result < 0)return -1;
 8001f34:	69fb      	ldr	r3, [r7, #28]
 8001f36:	2b00      	cmp	r3, #0
 8001f38:	da02      	bge.n	8001f40 <extflash_sector_read+0x8c>
 8001f3a:	f04f 33ff 	mov.w	r3, #4294967295
 8001f3e:	e00e      	b.n	8001f5e <extflash_sector_read+0xaa>

		address += EFLASH_DEF_SECTOR_SIZE;
 8001f40:	6a3b      	ldr	r3, [r7, #32]
 8001f42:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001f46:	623b      	str	r3, [r7, #32]
		wPtr += EFLASH_DEF_SECTOR_SIZE;
 8001f48:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f4a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001f4e:	627b      	str	r3, [r7, #36]	@ 0x24
		nsectors--;
 8001f50:	68bb      	ldr	r3, [r7, #8]
 8001f52:	3b01      	subs	r3, #1
 8001f54:	60bb      	str	r3, [r7, #8]
	while(nsectors > 0)
 8001f56:	68bb      	ldr	r3, [r7, #8]
 8001f58:	2b00      	cmp	r3, #0
 8001f5a:	d1e4      	bne.n	8001f26 <extflash_sector_read+0x72>
	}

	return 0;
 8001f5c:	2300      	movs	r3, #0

}
 8001f5e:	4618      	mov	r0, r3
 8001f60:	3728      	adds	r7, #40	@ 0x28
 8001f62:	46bd      	mov	sp, r7
 8001f64:	bd80      	pop	{r7, pc}

08001f66 <extflash_wait_for_wop>:

int extflash_wait_for_wop(uint32_t timeout)
{
 8001f66:	b580      	push	{r7, lr}
 8001f68:	b084      	sub	sp, #16
 8001f6a:	af00      	add	r7, sp, #0
 8001f6c:	6078      	str	r0, [r7, #4]
	uint8_t ereg = 0;
 8001f6e:	2300      	movs	r3, #0
 8001f70:	72fb      	strb	r3, [r7, #11]
	uint32_t tmo = HAL_GetTick();
 8001f72:	f007 f8a7 	bl	80090c4 <HAL_GetTick>
 8001f76:	60f8      	str	r0, [r7, #12]

	if(extflash_read_extended_read_reg(&ereg) < 0)return -1;
 8001f78:	f107 030b 	add.w	r3, r7, #11
 8001f7c:	4618      	mov	r0, r3
 8001f7e:	f7ff febd 	bl	8001cfc <extflash_read_extended_read_reg>
 8001f82:	4603      	mov	r3, r0
 8001f84:	2b00      	cmp	r3, #0
 8001f86:	da10      	bge.n	8001faa <extflash_wait_for_wop+0x44>
 8001f88:	f04f 33ff 	mov.w	r3, #4294967295
 8001f8c:	e023      	b.n	8001fd6 <extflash_wait_for_wop+0x70>

	while((ereg & ESTATUS_WIP) && (HAL_GetTick() - tmo < timeout))
	{
		//Scrittura-erase in corso
		if(extflash_read_extended_read_reg(&ereg) < 0)return -1;
 8001f8e:	f107 030b 	add.w	r3, r7, #11
 8001f92:	4618      	mov	r0, r3
 8001f94:	f7ff feb2 	bl	8001cfc <extflash_read_extended_read_reg>
 8001f98:	4603      	mov	r3, r0
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	da02      	bge.n	8001fa4 <extflash_wait_for_wop+0x3e>
 8001f9e:	f04f 33ff 	mov.w	r3, #4294967295
 8001fa2:	e018      	b.n	8001fd6 <extflash_wait_for_wop+0x70>
		HAL_Delay(FLASH_STATUS_POLL_INTERVAL);
 8001fa4:	2001      	movs	r0, #1
 8001fa6:	f007 f899 	bl	80090dc <HAL_Delay>
	while((ereg & ESTATUS_WIP) && (HAL_GetTick() - tmo < timeout))
 8001faa:	7afb      	ldrb	r3, [r7, #11]
 8001fac:	f003 0301 	and.w	r3, r3, #1
 8001fb0:	2b00      	cmp	r3, #0
 8001fb2:	d007      	beq.n	8001fc4 <extflash_wait_for_wop+0x5e>
 8001fb4:	f007 f886 	bl	80090c4 <HAL_GetTick>
 8001fb8:	4602      	mov	r2, r0
 8001fba:	68fb      	ldr	r3, [r7, #12]
 8001fbc:	1ad3      	subs	r3, r2, r3
 8001fbe:	687a      	ldr	r2, [r7, #4]
 8001fc0:	429a      	cmp	r2, r3
 8001fc2:	d8e4      	bhi.n	8001f8e <extflash_wait_for_wop+0x28>
	}

	if(ereg & (ESTATUS_PROT_ERR | ESTATUS_P_ERR | ESTATUS_E_ERR))
 8001fc4:	7afb      	ldrb	r3, [r7, #11]
 8001fc6:	f003 030e 	and.w	r3, r3, #14
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	d002      	beq.n	8001fd4 <extflash_wait_for_wop+0x6e>
	{
		return -2; //Erase o write error
 8001fce:	f06f 0301 	mvn.w	r3, #1
 8001fd2:	e000      	b.n	8001fd6 <extflash_wait_for_wop+0x70>
	}

	return 0;
 8001fd4:	2300      	movs	r3, #0
}
 8001fd6:	4618      	mov	r0, r3
 8001fd8:	3710      	adds	r7, #16
 8001fda:	46bd      	mov	sp, r7
 8001fdc:	bd80      	pop	{r7, pc}

08001fde <extflash_sector_write>:

int extflash_sector_write(uint32_t sector, uint32_t nsectors, const uint8_t *pBuffer)
{
 8001fde:	b580      	push	{r7, lr}
 8001fe0:	b088      	sub	sp, #32
 8001fe2:	af00      	add	r7, sp, #0
 8001fe4:	60f8      	str	r0, [r7, #12]
 8001fe6:	60b9      	str	r1, [r7, #8]
 8001fe8:	607a      	str	r2, [r7, #4]
	int result = 0;
 8001fea:	2300      	movs	r3, #0
 8001fec:	613b      	str	r3, [r7, #16]
	const uint8_t *wPtr = pBuffer;
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	61fb      	str	r3, [r7, #28]
	uint32_t address = sector * EFLASH_DEF_SECTOR_SIZE;
 8001ff2:	68fb      	ldr	r3, [r7, #12]
 8001ff4:	031b      	lsls	r3, r3, #12
 8001ff6:	61bb      	str	r3, [r7, #24]

	extflash_clear_extended_read_reg();
 8001ff8:	f7ff fea0 	bl	8001d3c <extflash_clear_extended_read_reg>

	while(nsectors > 0)
 8001ffc:	e04e      	b.n	800209c <extflash_sector_write+0xbe>
	{
		//Controllo operazioni in corso
		result = extflash_wait_for_wop(FLASH_WRITE_ERASE_TIMEOUT);
 8001ffe:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8002002:	f7ff ffb0 	bl	8001f66 <extflash_wait_for_wop>
 8002006:	6138      	str	r0, [r7, #16]
		if(result < 0)break;
 8002008:	693b      	ldr	r3, [r7, #16]
 800200a:	2b00      	cmp	r3, #0
 800200c:	db4a      	blt.n	80020a4 <extflash_sector_write+0xc6>

		//Erase del settore
		result = extflash_set_write_protection(0);
 800200e:	2000      	movs	r0, #0
 8002010:	f7ff fea9 	bl	8001d66 <extflash_set_write_protection>
 8002014:	6138      	str	r0, [r7, #16]
		if(result < 0)break;
 8002016:	693b      	ldr	r3, [r7, #16]
 8002018:	2b00      	cmp	r3, #0
 800201a:	db45      	blt.n	80020a8 <extflash_sector_write+0xca>
		result = extflash_raw_erase(address);
 800201c:	69b8      	ldr	r0, [r7, #24]
 800201e:	f7ff ff0b 	bl	8001e38 <extflash_raw_erase>
 8002022:	6138      	str	r0, [r7, #16]
		if(result < 0)break;
 8002024:	693b      	ldr	r3, [r7, #16]
 8002026:	2b00      	cmp	r3, #0
 8002028:	db40      	blt.n	80020ac <extflash_sector_write+0xce>

		//Attesa ERASE
		result = extflash_wait_for_wop(FLASH_WRITE_ERASE_TIMEOUT);
 800202a:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800202e:	f7ff ff9a 	bl	8001f66 <extflash_wait_for_wop>
 8002032:	6138      	str	r0, [r7, #16]
		if(result < 0)break;
 8002034:	693b      	ldr	r3, [r7, #16]
 8002036:	2b00      	cmp	r3, #0
 8002038:	db3a      	blt.n	80020b0 <extflash_sector_write+0xd2>

		for(int i=0; i < EFLASH_PAGES_PER_SECTOR; i++)
 800203a:	2300      	movs	r3, #0
 800203c:	617b      	str	r3, [r7, #20]
 800203e:	e021      	b.n	8002084 <extflash_sector_write+0xa6>
		{
			result = extflash_set_write_protection(0);
 8002040:	2000      	movs	r0, #0
 8002042:	f7ff fe90 	bl	8001d66 <extflash_set_write_protection>
 8002046:	6138      	str	r0, [r7, #16]
			if(result < 0)break;
 8002048:	693b      	ldr	r3, [r7, #16]
 800204a:	2b00      	cmp	r3, #0
 800204c:	db1e      	blt.n	800208c <extflash_sector_write+0xae>
			result = extflash_raw_page_write(address, wPtr);
 800204e:	69f9      	ldr	r1, [r7, #28]
 8002050:	69b8      	ldr	r0, [r7, #24]
 8002052:	f7ff ff0d 	bl	8001e70 <extflash_raw_page_write>
 8002056:	6138      	str	r0, [r7, #16]
			if(result < 0)break;
 8002058:	693b      	ldr	r3, [r7, #16]
 800205a:	2b00      	cmp	r3, #0
 800205c:	db18      	blt.n	8002090 <extflash_sector_write+0xb2>

			address += EFLASH_DEF_PAGE_SIZE;
 800205e:	69bb      	ldr	r3, [r7, #24]
 8002060:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 8002064:	61bb      	str	r3, [r7, #24]
			wPtr += EFLASH_DEF_PAGE_SIZE;
 8002066:	69fb      	ldr	r3, [r7, #28]
 8002068:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 800206c:	61fb      	str	r3, [r7, #28]
			//Attesa write
			result = extflash_wait_for_wop(FLASH_WRITE_ERASE_TIMEOUT);
 800206e:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8002072:	f7ff ff78 	bl	8001f66 <extflash_wait_for_wop>
 8002076:	6138      	str	r0, [r7, #16]
			if(result < 0)break;
 8002078:	693b      	ldr	r3, [r7, #16]
 800207a:	2b00      	cmp	r3, #0
 800207c:	db0a      	blt.n	8002094 <extflash_sector_write+0xb6>
		for(int i=0; i < EFLASH_PAGES_PER_SECTOR; i++)
 800207e:	697b      	ldr	r3, [r7, #20]
 8002080:	3301      	adds	r3, #1
 8002082:	617b      	str	r3, [r7, #20]
 8002084:	697b      	ldr	r3, [r7, #20]
 8002086:	2b0f      	cmp	r3, #15
 8002088:	ddda      	ble.n	8002040 <extflash_sector_write+0x62>
 800208a:	e004      	b.n	8002096 <extflash_sector_write+0xb8>
			if(result < 0)break;
 800208c:	bf00      	nop
 800208e:	e002      	b.n	8002096 <extflash_sector_write+0xb8>
			if(result < 0)break;
 8002090:	bf00      	nop
 8002092:	e000      	b.n	8002096 <extflash_sector_write+0xb8>
			if(result < 0)break;
 8002094:	bf00      	nop
		}

		nsectors--;
 8002096:	68bb      	ldr	r3, [r7, #8]
 8002098:	3b01      	subs	r3, #1
 800209a:	60bb      	str	r3, [r7, #8]
	while(nsectors > 0)
 800209c:	68bb      	ldr	r3, [r7, #8]
 800209e:	2b00      	cmp	r3, #0
 80020a0:	d1ad      	bne.n	8001ffe <extflash_sector_write+0x20>
 80020a2:	e006      	b.n	80020b2 <extflash_sector_write+0xd4>
		if(result < 0)break;
 80020a4:	bf00      	nop
 80020a6:	e004      	b.n	80020b2 <extflash_sector_write+0xd4>
		if(result < 0)break;
 80020a8:	bf00      	nop
 80020aa:	e002      	b.n	80020b2 <extflash_sector_write+0xd4>
		if(result < 0)break;
 80020ac:	bf00      	nop
 80020ae:	e000      	b.n	80020b2 <extflash_sector_write+0xd4>
		if(result < 0)break;
 80020b0:	bf00      	nop
	}

	extflash_set_write_protection(1);
 80020b2:	2001      	movs	r0, #1
 80020b4:	f7ff fe57 	bl	8001d66 <extflash_set_write_protection>

	return 0;
 80020b8:	2300      	movs	r3, #0

}
 80020ba:	4618      	mov	r0, r3
 80020bc:	3720      	adds	r7, #32
 80020be:	46bd      	mov	sp, r7
 80020c0:	bd80      	pop	{r7, pc}

080020c2 <extflash_get_sector_size>:


unsigned int extflash_get_sector_size()
{
 80020c2:	b480      	push	{r7}
 80020c4:	af00      	add	r7, sp, #0
	return EFLASH_DEF_SECTOR_SIZE;
 80020c6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
}
 80020ca:	4618      	mov	r0, r3
 80020cc:	46bd      	mov	sp, r7
 80020ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020d2:	4770      	bx	lr

080020d4 <extflash_get_sector_count>:

unsigned int extflash_get_sector_count()
{
 80020d4:	b480      	push	{r7}
 80020d6:	af00      	add	r7, sp, #0
	return exflashNumSectors;
 80020d8:	4b03      	ldr	r3, [pc, #12]	@ (80020e8 <extflash_get_sector_count+0x14>)
 80020da:	681b      	ldr	r3, [r3, #0]
}
 80020dc:	4618      	mov	r0, r3
 80020de:	46bd      	mov	sp, r7
 80020e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020e4:	4770      	bx	lr
 80020e6:	bf00      	nop
 80020e8:	20000088 	.word	0x20000088

080020ec <extflash_is_initialized>:
{
	return exflashSize;
}

int extflash_is_initialized()
{
 80020ec:	b480      	push	{r7}
 80020ee:	af00      	add	r7, sp, #0
	return exflashInitDone;
 80020f0:	4b03      	ldr	r3, [pc, #12]	@ (8002100 <extflash_is_initialized+0x14>)
 80020f2:	781b      	ldrb	r3, [r3, #0]
}
 80020f4:	4618      	mov	r0, r3
 80020f6:	46bd      	mov	sp, r7
 80020f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020fc:	4770      	bx	lr
 80020fe:	bf00      	nop
 8002100:	2000008c 	.word	0x2000008c

08002104 <extflash_init>:

int extflash_init()
{
 8002104:	b580      	push	{r7, lr}
 8002106:	b088      	sub	sp, #32
 8002108:	af00      	add	r7, sp, #0
	uint8_t manufacturer_id[2] = {0};
 800210a:	2300      	movs	r3, #0
 800210c:	83bb      	strh	r3, [r7, #28]
	extflash_cmd command = {0};
 800210e:	f107 0308 	add.w	r3, r7, #8
 8002112:	2200      	movs	r2, #0
 8002114:	601a      	str	r2, [r3, #0]
 8002116:	605a      	str	r2, [r3, #4]
 8002118:	609a      	str	r2, [r3, #8]
 800211a:	60da      	str	r2, [r3, #12]
 800211c:	611a      	str	r2, [r3, #16]
	uint8_t density[4] = {0};
 800211e:	2300      	movs	r3, #0
 8002120:	607b      	str	r3, [r7, #4]

	exflashInitDone = 0;
 8002122:	4b26      	ldr	r3, [pc, #152]	@ (80021bc <extflash_init+0xb8>)
 8002124:	2200      	movs	r2, #0
 8002126:	701a      	strb	r2, [r3, #0]
	exflashNumSectors = 0;
 8002128:	4b25      	ldr	r3, [pc, #148]	@ (80021c0 <extflash_init+0xbc>)
 800212a:	2200      	movs	r2, #0
 800212c:	601a      	str	r2, [r3, #0]

	extflash_hard_reset();
 800212e:	f7ff fd5f 	bl	8001bf0 <extflash_hard_reset>
	extflash_cs_reset();
 8002132:	f7ff fd45 	bl	8001bc0 <extflash_cs_reset>
	extflash_wp_reset();
 8002136:	f7ff fd4f 	bl	8001bd8 <extflash_wp_reset>

	command.cmd = EFLASH_CMD_RDMDID;
 800213a:	2390      	movs	r3, #144	@ 0x90
 800213c:	723b      	strb	r3, [r7, #8]
	command.address_en = 1;
 800213e:	2301      	movs	r3, #1
 8002140:	727b      	strb	r3, [r7, #9]
	command.address = 0;
 8002142:	2300      	movs	r3, #0
 8002144:	613b      	str	r3, [r7, #16]
	command.rx_nb = 2;
 8002146:	2302      	movs	r3, #2
 8002148:	81bb      	strh	r3, [r7, #12]
	command.rx_data = manufacturer_id;
 800214a:	f107 031c 	add.w	r3, r7, #28
 800214e:	61bb      	str	r3, [r7, #24]

	extflash_send_cmd(&command);
 8002150:	f107 0308 	add.w	r3, r7, #8
 8002154:	4618      	mov	r0, r3
 8002156:	f7ff fd5f 	bl	8001c18 <extflash_send_cmd>

	if(manufacturer_id[0] != EFLASH_DEF_MANIFACTURER || manufacturer_id[1] != EFLASH_DEF_DEVID)
 800215a:	7f3b      	ldrb	r3, [r7, #28]
 800215c:	2b9d      	cmp	r3, #157	@ 0x9d
 800215e:	d102      	bne.n	8002166 <extflash_init+0x62>
 8002160:	7f7b      	ldrb	r3, [r7, #29]
 8002162:	2b17      	cmp	r3, #23
 8002164:	d002      	beq.n	800216c <extflash_init+0x68>
	{
		return -1;
 8002166:	f04f 33ff 	mov.w	r3, #4294967295
 800216a:	e022      	b.n	80021b2 <extflash_init+0xae>
	}

	memset((void *)&command, 0, sizeof(command));
 800216c:	f107 0308 	add.w	r3, r7, #8
 8002170:	2214      	movs	r2, #20
 8002172:	2100      	movs	r1, #0
 8002174:	4618      	mov	r0, r3
 8002176:	f010 fe43 	bl	8012e00 <memset>

	extflash_read_sfdp(SFDP_FLASH_DENSITY, density, sizeof(density));
 800217a:	1d3b      	adds	r3, r7, #4
 800217c:	2204      	movs	r2, #4
 800217e:	4619      	mov	r1, r3
 8002180:	2034      	movs	r0, #52	@ 0x34
 8002182:	f7ff fe0e 	bl	8001da2 <extflash_read_sfdp>

	memcpy(&exflashSize, density, sizeof(uint32_t));
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	4a0e      	ldr	r2, [pc, #56]	@ (80021c4 <extflash_init+0xc0>)
 800218a:	6013      	str	r3, [r2, #0]

	exflashSize += 1;
 800218c:	4b0d      	ldr	r3, [pc, #52]	@ (80021c4 <extflash_init+0xc0>)
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	3301      	adds	r3, #1
 8002192:	4a0c      	ldr	r2, [pc, #48]	@ (80021c4 <extflash_init+0xc0>)
 8002194:	6013      	str	r3, [r2, #0]
	exflashSize >>= 3;
 8002196:	4b0b      	ldr	r3, [pc, #44]	@ (80021c4 <extflash_init+0xc0>)
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	08db      	lsrs	r3, r3, #3
 800219c:	4a09      	ldr	r2, [pc, #36]	@ (80021c4 <extflash_init+0xc0>)
 800219e:	6013      	str	r3, [r2, #0]

	exflashNumSectors = exflashSize / EFLASH_DEF_SECTOR_SIZE;
 80021a0:	4b08      	ldr	r3, [pc, #32]	@ (80021c4 <extflash_init+0xc0>)
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	0b1b      	lsrs	r3, r3, #12
 80021a6:	4a06      	ldr	r2, [pc, #24]	@ (80021c0 <extflash_init+0xbc>)
 80021a8:	6013      	str	r3, [r2, #0]

	exflashInitDone = 1;
 80021aa:	4b04      	ldr	r3, [pc, #16]	@ (80021bc <extflash_init+0xb8>)
 80021ac:	2201      	movs	r2, #1
 80021ae:	701a      	strb	r2, [r3, #0]

	return 0;
 80021b0:	2300      	movs	r3, #0

}
 80021b2:	4618      	mov	r0, r3
 80021b4:	3720      	adds	r7, #32
 80021b6:	46bd      	mov	sp, r7
 80021b8:	bd80      	pop	{r7, pc}
 80021ba:	bf00      	nop
 80021bc:	2000008c 	.word	0x2000008c
 80021c0:	20000088 	.word	0x20000088
 80021c4:	20000084 	.word	0x20000084

080021c8 <System_Init>:
#include "lsm6dsv16x_reg.h"
#include "lsm6dsv16x_rw.h"

/*-----INIZiALIZZAZIONE SISTEMA-----*/
void System_Init(void)
{
 80021c8:	b580      	push	{r7, lr}
 80021ca:	af00      	add	r7, sp, #0
	acc.write_reg = acc_write;
 80021cc:	4b18      	ldr	r3, [pc, #96]	@ (8002230 <System_Init+0x68>)
 80021ce:	4a19      	ldr	r2, [pc, #100]	@ (8002234 <System_Init+0x6c>)
 80021d0:	601a      	str	r2, [r3, #0]
	acc.read_reg = acc_read;
 80021d2:	4b17      	ldr	r3, [pc, #92]	@ (8002230 <System_Init+0x68>)
 80021d4:	4a18      	ldr	r2, [pc, #96]	@ (8002238 <System_Init+0x70>)
 80021d6:	605a      	str	r2, [r3, #4]
	acc.handle = &hspi3;
 80021d8:	4b15      	ldr	r3, [pc, #84]	@ (8002230 <System_Init+0x68>)
 80021da:	4a18      	ldr	r2, [pc, #96]	@ (800223c <System_Init+0x74>)
 80021dc:	60da      	str	r2, [r3, #12]

	LED_Start(ORG_LED, FAST);
 80021de:	2102      	movs	r1, #2
 80021e0:	2000      	movs	r0, #0
 80021e2:	f000 fa4b 	bl	800267c <LED_Start>

	BC_Init();
 80021e6:	f7ff fa71 	bl	80016cc <BC_Init>
	INA3221_Init();
 80021ea:	f7fe fb07 	bl	80007fc <INA3221_Init>
	FatFS_Init();
 80021ee:	f000 f82b 	bl	8002248 <FatFS_Init>
	Config_Init();
 80021f2:	f000 f971 	bl	80024d8 <Config_Init>
	Acc_Init(&acc);
 80021f6:	480e      	ldr	r0, [pc, #56]	@ (8002230 <System_Init+0x68>)
 80021f8:	f000 f8c2 	bl	8002380 <Acc_Init>
	SIM_Init();
 80021fc:	f7fe fd46 	bl	8000c8c <SIM_Init>
	RTC_Init();
 8002200:	f7fe fbaa 	bl	8000958 <RTC_Init>

	HAL_UARTEx_ReceiveToIdle_DMA(LTE_UART, sim_rx_buffer, SIM_RXBUFFER_SIZE);
 8002204:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002208:	490d      	ldr	r1, [pc, #52]	@ (8002240 <System_Init+0x78>)
 800220a:	480e      	ldr	r0, [pc, #56]	@ (8002244 <System_Init+0x7c>)
 800220c:	f010 fcba 	bl	8012b84 <HAL_UARTEx_ReceiveToIdle_DMA>

	LED_Start(RED_LED, ON);
 8002210:	2101      	movs	r1, #1
 8002212:	2004      	movs	r0, #4
 8002214:	f000 fa32 	bl	800267c <LED_Start>
	HAL_Delay(9000);
 8002218:	f242 3028 	movw	r0, #9000	@ 0x2328
 800221c:	f006 ff5e 	bl	80090dc <HAL_Delay>

	LED_Stop(RED_LED);
 8002220:	2004      	movs	r0, #4
 8002222:	f000 fa9b 	bl	800275c <LED_Stop>
	LED_Stop(ORG_LED);
 8002226:	2000      	movs	r0, #0
 8002228:	f000 fa98 	bl	800275c <LED_Stop>
}
 800222c:	bf00      	nop
 800222e:	bd80      	pop	{r7, pc}
 8002230:	20004cc8 	.word	0x20004cc8
 8002234:	08002f7f 	.word	0x08002f7f
 8002238:	08002fd7 	.word	0x08002fd7
 800223c:	20000280 	.word	0x20000280
 8002240:	20004cd8 	.word	0x20004cd8
 8002244:	2000049c 	.word	0x2000049c

08002248 <FatFS_Init>:

/*-----INIZiALIZZAZIONE MEMORIE-----*/
void FatFS_Init(void)
{
 8002248:	b580      	push	{r7, lr}
 800224a:	b086      	sub	sp, #24
 800224c:	af00      	add	r7, sp, #0
	FRESULT fRes = 0;
 800224e:	2300      	movs	r3, #0
 8002250:	75fb      	strb	r3, [r7, #23]
	MKFS_PARM mkfs_opt = {0};
 8002252:	1d3b      	adds	r3, r7, #4
 8002254:	2200      	movs	r2, #0
 8002256:	601a      	str	r2, [r3, #0]
 8002258:	605a      	str	r2, [r3, #4]
 800225a:	609a      	str	r2, [r3, #8]
 800225c:	60da      	str	r2, [r3, #12]

	do
	{
		sys.RAM_Mounted = 0;
 800225e:	4b41      	ldr	r3, [pc, #260]	@ (8002364 <FatFS_Init+0x11c>)
 8002260:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002264:	461a      	mov	r2, r3
 8002266:	f892 302c 	ldrb.w	r3, [r2, #44]	@ 0x2c
 800226a:	f023 0302 	bic.w	r3, r3, #2
 800226e:	f882 302c 	strb.w	r3, [r2, #44]	@ 0x2c
		
		mkfs_opt.fmt = FM_FAT32;
 8002272:	2302      	movs	r3, #2
 8002274:	713b      	strb	r3, [r7, #4]
		mkfs_opt.au_size = 1024; 
 8002276:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800227a:	613b      	str	r3, [r7, #16]
		mkfs_opt.n_fat = 1;
 800227c:	2301      	movs	r3, #1
 800227e:	717b      	strb	r3, [r7, #5]
		mkfs_opt.align = 1;
 8002280:	2301      	movs	r3, #1
 8002282:	60bb      	str	r3, [r7, #8]

		fRes = f_mkfs("/ram", &mkfs_opt, psram_fs.win, sizeof(psram_fs.win));
 8002284:	1d39      	adds	r1, r7, #4
 8002286:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800228a:	4a37      	ldr	r2, [pc, #220]	@ (8002368 <FatFS_Init+0x120>)
 800228c:	4837      	ldr	r0, [pc, #220]	@ (800236c <FatFS_Init+0x124>)
 800228e:	f006 fa37 	bl	8008700 <f_mkfs>
 8002292:	4603      	mov	r3, r0
 8002294:	75fb      	strb	r3, [r7, #23]
		if (fRes != FR_OK)
 8002296:	7dfb      	ldrb	r3, [r7, #23]
 8002298:	2b00      	cmp	r3, #0
 800229a:	d114      	bne.n	80022c6 <FatFS_Init+0x7e>
		{
			break;
		}

		fRes = f_mount(&psram_fs, "/ram", 1);
 800229c:	2201      	movs	r2, #1
 800229e:	4933      	ldr	r1, [pc, #204]	@ (800236c <FatFS_Init+0x124>)
 80022a0:	4833      	ldr	r0, [pc, #204]	@ (8002370 <FatFS_Init+0x128>)
 80022a2:	f005 fbab 	bl	80079fc <f_mount>
 80022a6:	4603      	mov	r3, r0
 80022a8:	75fb      	strb	r3, [r7, #23]

		if (fRes != FR_OK)
 80022aa:	7dfb      	ldrb	r3, [r7, #23]
 80022ac:	2b00      	cmp	r3, #0
 80022ae:	d10c      	bne.n	80022ca <FatFS_Init+0x82>
		{
			break;
		}

		sys.RAM_Mounted = 1;
 80022b0:	4b2c      	ldr	r3, [pc, #176]	@ (8002364 <FatFS_Init+0x11c>)
 80022b2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80022b6:	461a      	mov	r2, r3
 80022b8:	f892 302c 	ldrb.w	r3, [r2, #44]	@ 0x2c
 80022bc:	f043 0302 	orr.w	r3, r3, #2
 80022c0:	f882 302c 	strb.w	r3, [r2, #44]	@ 0x2c

		break;
 80022c4:	e002      	b.n	80022cc <FatFS_Init+0x84>
			break;
 80022c6:	bf00      	nop
 80022c8:	e000      	b.n	80022cc <FatFS_Init+0x84>
			break;
 80022ca:	bf00      	nop
	} while (1);

	do
	{
		sys.FLASH_Mounted = 0;
 80022cc:	4b25      	ldr	r3, [pc, #148]	@ (8002364 <FatFS_Init+0x11c>)
 80022ce:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80022d2:	461a      	mov	r2, r3
 80022d4:	f892 302c 	ldrb.w	r3, [r2, #44]	@ 0x2c
 80022d8:	f023 0304 	bic.w	r3, r3, #4
 80022dc:	f882 302c 	strb.w	r3, [r2, #44]	@ 0x2c
		fRes = f_mount(&flash_fs, "/flash", 1);
 80022e0:	2201      	movs	r2, #1
 80022e2:	4924      	ldr	r1, [pc, #144]	@ (8002374 <FatFS_Init+0x12c>)
 80022e4:	4824      	ldr	r0, [pc, #144]	@ (8002378 <FatFS_Init+0x130>)
 80022e6:	f005 fb89 	bl	80079fc <f_mount>
 80022ea:	4603      	mov	r3, r0
 80022ec:	75fb      	strb	r3, [r7, #23]

		if (fRes == FR_NO_FILESYSTEM)
 80022ee:	7dfb      	ldrb	r3, [r7, #23]
 80022f0:	2b0d      	cmp	r3, #13
 80022f2:	d124      	bne.n	800233e <FatFS_Init+0xf6>
		{
			memset((void *)&mkfs_opt, 0, sizeof(mkfs_opt));
 80022f4:	1d3b      	adds	r3, r7, #4
 80022f6:	2210      	movs	r2, #16
 80022f8:	2100      	movs	r1, #0
 80022fa:	4618      	mov	r0, r3
 80022fc:	f010 fd80 	bl	8012e00 <memset>
			mkfs_opt.fmt = FM_FAT32;
 8002300:	2302      	movs	r3, #2
 8002302:	713b      	strb	r3, [r7, #4]
			mkfs_opt.au_size = 4096;    
 8002304:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002308:	613b      	str	r3, [r7, #16]
			mkfs_opt.n_fat = 1;
 800230a:	2301      	movs	r3, #1
 800230c:	717b      	strb	r3, [r7, #5]
			mkfs_opt.align = 1;
 800230e:	2301      	movs	r3, #1
 8002310:	60bb      	str	r3, [r7, #8]

			fRes = f_mkfs("/flash", &mkfs_opt, flash_fs.win, sizeof(flash_fs.win));
 8002312:	1d39      	adds	r1, r7, #4
 8002314:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002318:	4a18      	ldr	r2, [pc, #96]	@ (800237c <FatFS_Init+0x134>)
 800231a:	4816      	ldr	r0, [pc, #88]	@ (8002374 <FatFS_Init+0x12c>)
 800231c:	f006 f9f0 	bl	8008700 <f_mkfs>
 8002320:	4603      	mov	r3, r0
 8002322:	75fb      	strb	r3, [r7, #23]
			if (fRes != FR_OK)
 8002324:	7dfb      	ldrb	r3, [r7, #23]
 8002326:	2b00      	cmp	r3, #0
 8002328:	d114      	bne.n	8002354 <FatFS_Init+0x10c>
			{
				break;
			}

			fRes = f_mount(&flash_fs, "/flash", 1);
 800232a:	2201      	movs	r2, #1
 800232c:	4911      	ldr	r1, [pc, #68]	@ (8002374 <FatFS_Init+0x12c>)
 800232e:	4812      	ldr	r0, [pc, #72]	@ (8002378 <FatFS_Init+0x130>)
 8002330:	f005 fb64 	bl	80079fc <f_mount>
 8002334:	4603      	mov	r3, r0
 8002336:	75fb      	strb	r3, [r7, #23]
			if (fRes != FR_OK)
 8002338:	7dfb      	ldrb	r3, [r7, #23]
 800233a:	2b00      	cmp	r3, #0
 800233c:	d10c      	bne.n	8002358 <FatFS_Init+0x110>
			{
				break;
			}
		}

		sys.FLASH_Mounted = 1;
 800233e:	4b09      	ldr	r3, [pc, #36]	@ (8002364 <FatFS_Init+0x11c>)
 8002340:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002344:	461a      	mov	r2, r3
 8002346:	f892 302c 	ldrb.w	r3, [r2, #44]	@ 0x2c
 800234a:	f043 0304 	orr.w	r3, r3, #4
 800234e:	f882 302c 	strb.w	r3, [r2, #44]	@ 0x2c

		break;
 8002352:	e002      	b.n	800235a <FatFS_Init+0x112>
				break;
 8002354:	bf00      	nop
 8002356:	e000      	b.n	800235a <FatFS_Init+0x112>
				break;
 8002358:	bf00      	nop
	} while (1);


}
 800235a:	bf00      	nop
 800235c:	3718      	adds	r7, #24
 800235e:	46bd      	mov	sp, r7
 8002360:	bd80      	pop	{r7, pc}
 8002362:	bf00      	nop
 8002364:	200005b8 	.word	0x200005b8
 8002368:	20001bb0 	.word	0x20001bb0
 800236c:	08014268 	.word	0x08014268
 8002370:	20001b7c 	.word	0x20001b7c
 8002374:	08014270 	.word	0x08014270
 8002378:	20002bb0 	.word	0x20002bb0
 800237c:	20002be4 	.word	0x20002be4

08002380 <Acc_Init>:

/*-----INIZiALIZZAZIONE ACCELEROMETRO-----*/
void Acc_Init(stmdev_ctx_t* acc)
{
 8002380:	b580      	push	{r7, lr}
 8002382:	b086      	sub	sp, #24
 8002384:	af00      	add	r7, sp, #0
 8002386:	6078      	str	r0, [r7, #4]
	lsm6dsv16x_reset_t rst;
	lsm6dsv16x_pin_int_route_t pin_int = {0};
 8002388:	f107 0310 	add.w	r3, r7, #16
 800238c:	2100      	movs	r1, #0
 800238e:	460a      	mov	r2, r1
 8002390:	801a      	strh	r2, [r3, #0]
 8002392:	460a      	mov	r2, r1
 8002394:	709a      	strb	r2, [r3, #2]
	uint8_t acc_whoamI = 0;
 8002396:	2300      	movs	r3, #0
 8002398:	73fb      	strb	r3, [r7, #15]
	uint8_t wmi_cnt = 0;
 800239a:	2300      	movs	r3, #0
 800239c:	75fb      	strb	r3, [r7, #23]

	pin_int.fifo_th = PROPERTY_ENABLE;
 800239e:	7c3b      	ldrb	r3, [r7, #16]
 80023a0:	f043 0308 	orr.w	r3, r3, #8
 80023a4:	743b      	strb	r3, [r7, #16]


	lsm6dsv16x_device_id_get(acc, &acc_whoamI);
 80023a6:	f107 030f 	add.w	r3, r7, #15
 80023aa:	4619      	mov	r1, r3
 80023ac:	6878      	ldr	r0, [r7, #4]
 80023ae:	f000 fab9 	bl	8002924 <lsm6dsv16x_device_id_get>
	if (acc_whoamI != LSM6DSV16X_ID)
 80023b2:	7bfb      	ldrb	r3, [r7, #15]
 80023b4:	2b70      	cmp	r3, #112	@ 0x70
 80023b6:	d01f      	beq.n	80023f8 <Acc_Init+0x78>
		while (acc_whoamI != LSM6DSV16X_ID)
 80023b8:	e01b      	b.n	80023f2 <Acc_Init+0x72>
		{
			lsm6dsv16x_device_id_get(acc, &acc_whoamI);
 80023ba:	f107 030f 	add.w	r3, r7, #15
 80023be:	4619      	mov	r1, r3
 80023c0:	6878      	ldr	r0, [r7, #4]
 80023c2:	f000 faaf 	bl	8002924 <lsm6dsv16x_device_id_get>
			wmi_cnt++;
 80023c6:	7dfb      	ldrb	r3, [r7, #23]
 80023c8:	3301      	adds	r3, #1
 80023ca:	75fb      	strb	r3, [r7, #23]
			if (wmi_cnt == 3)
 80023cc:	7dfb      	ldrb	r3, [r7, #23]
 80023ce:	2b03      	cmp	r3, #3
 80023d0:	d10f      	bne.n	80023f2 <Acc_Init+0x72>
			{
				sys.ACC_Present = 0;
 80023d2:	4b3e      	ldr	r3, [pc, #248]	@ (80024cc <Acc_Init+0x14c>)
 80023d4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80023d8:	461a      	mov	r2, r3
 80023da:	f892 302c 	ldrb.w	r3, [r2, #44]	@ 0x2c
 80023de:	f023 0301 	bic.w	r3, r3, #1
 80023e2:	f882 302c 	strb.w	r3, [r2, #44]	@ 0x2c
				flags.ACC_Complete = 1;
 80023e6:	4a3a      	ldr	r2, [pc, #232]	@ (80024d0 <Acc_Init+0x150>)
 80023e8:	7813      	ldrb	r3, [r2, #0]
 80023ea:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80023ee:	7013      	strb	r3, [r2, #0]
 80023f0:	e069      	b.n	80024c6 <Acc_Init+0x146>
		while (acc_whoamI != LSM6DSV16X_ID)
 80023f2:	7bfb      	ldrb	r3, [r7, #15]
 80023f4:	2b70      	cmp	r3, #112	@ 0x70
 80023f6:	d1e0      	bne.n	80023ba <Acc_Init+0x3a>
				return;
			}
		}
	sys.ACC_Present = 1;
 80023f8:	4b34      	ldr	r3, [pc, #208]	@ (80024cc <Acc_Init+0x14c>)
 80023fa:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80023fe:	461a      	mov	r2, r3
 8002400:	f892 302c 	ldrb.w	r3, [r2, #44]	@ 0x2c
 8002404:	f043 0301 	orr.w	r3, r3, #1
 8002408:	f882 302c 	strb.w	r3, [r2, #44]	@ 0x2c
	lsm6dsv16x_reset_set(acc, LSM6DSV16X_GLOBAL_RST);
 800240c:	2101      	movs	r1, #1
 800240e:	6878      	ldr	r0, [r7, #4]
 8002410:	f000 f9e2 	bl	80027d8 <lsm6dsv16x_reset_set>
	do {
		lsm6dsv16x_reset_get(acc, &rst);
 8002414:	f107 0316 	add.w	r3, r7, #22
 8002418:	4619      	mov	r1, r3
 800241a:	6878      	ldr	r0, [r7, #4]
 800241c:	f000 fa2c 	bl	8002878 <lsm6dsv16x_reset_get>
		HAL_Delay(10);
 8002420:	200a      	movs	r0, #10
 8002422:	f006 fe5b 	bl	80090dc <HAL_Delay>
	} while (rst != LSM6DSV16X_READY);
 8002426:	7dbb      	ldrb	r3, [r7, #22]
 8002428:	2b00      	cmp	r3, #0
 800242a:	d1f3      	bne.n	8002414 <Acc_Init+0x94>

	lsm6dsv16x_block_data_update_set(acc, PROPERTY_ENABLE);
 800242c:	2101      	movs	r1, #1
 800242e:	6878      	ldr	r0, [r7, #4]
 8002430:	f000 fb75 	bl	8002b1e <lsm6dsv16x_block_data_update_set>
	lsm6dsv16x_ui_i2c_i3c_mode_set(acc, LSM6DSV16X_I2C_I3C_DISABLE);
 8002434:	2101      	movs	r1, #1
 8002436:	6878      	ldr	r0, [r7, #4]
 8002438:	f000 fd7b 	bl	8002f32 <lsm6dsv16x_ui_i2c_i3c_mode_set>
	lsm6dsv16x_xl_mode_set(acc, LSM6DSV16X_XL_HIGH_PERFORMANCE_MD);
 800243c:	2100      	movs	r1, #0
 800243e:	6878      	ldr	r0, [r7, #4]
 8002440:	f000 fad2 	bl	80029e8 <lsm6dsv16x_xl_mode_set>
	lsm6dsv16x_gy_mode_set(acc, LSM6DSV16X_GY_HIGH_PERFORMANCE_MD);
 8002444:	2100      	movs	r1, #0
 8002446:	6878      	ldr	r0, [r7, #4]
 8002448:	f000 fb43 	bl	8002ad2 <lsm6dsv16x_gy_mode_set>
	lsm6dsv16x_fifo_xl_batch_set(acc, LSM6DSV16X_XL_BATCHED_AT_960Hz);
 800244c:	2109      	movs	r1, #9
 800244e:	6878      	ldr	r0, [r7, #4]
 8002450:	f000 fcfd 	bl	8002e4e <lsm6dsv16x_fifo_xl_batch_set>
	lsm6dsv16x_fifo_gy_batch_set(acc, LSM6DSV16X_GY_NOT_BATCHED);
 8002454:	2100      	movs	r1, #0
 8002456:	6878      	ldr	r0, [r7, #4]
 8002458:	f000 fd1f 	bl	8002e9a <lsm6dsv16x_fifo_gy_batch_set>
	lsm6dsv16x_fifo_mode_set(acc, LSM6DSV16X_BYPASS_MODE);
 800245c:	2100      	movs	r1, #0
 800245e:	6878      	ldr	r0, [r7, #4]
 8002460:	f000 fd41 	bl	8002ee6 <lsm6dsv16x_fifo_mode_set>
	lsm6dsv16x_xl_data_rate_set(acc, LSM6DSV16X_ODR_OFF);
 8002464:	2100      	movs	r1, #0
 8002466:	6878      	ldr	r0, [r7, #4]
 8002468:	f000 fa6d 	bl	8002946 <lsm6dsv16x_xl_data_rate_set>
	lsm6dsv16x_gy_data_rate_set(acc, LSM6DSV16X_ODR_OFF);
 800246c:	2100      	movs	r1, #0
 800246e:	6878      	ldr	r0, [r7, #4]
 8002470:	f000 fae0 	bl	8002a34 <lsm6dsv16x_gy_data_rate_set>
	lsm6dsv16x_odr_trig_cfg_set(acc, 16);  //800SPS
 8002474:	2110      	movs	r1, #16
 8002476:	6878      	ldr	r0, [r7, #4]
 8002478:	f000 fb77 	bl	8002b6a <lsm6dsv16x_odr_trig_cfg_set>
	lsm6dsv16x_xl_mode_set(acc, LSM6DSV16X_XL_ODR_TRIGGERED_MD);
 800247c:	2103      	movs	r1, #3
 800247e:	6878      	ldr	r0, [r7, #4]
 8002480:	f000 fab2 	bl	80029e8 <lsm6dsv16x_xl_mode_set>
	lsm6dsv16x_gy_mode_set(acc, LSM6DSV16X_GY_ODR_TRIGGERED_MD);
 8002484:	2103      	movs	r1, #3
 8002486:	6878      	ldr	r0, [r7, #4]
 8002488:	f000 fb23 	bl	8002ad2 <lsm6dsv16x_gy_mode_set>
	lsm6dsv16x_den_polarity_set(acc, LSM6DSV16X_DEN_ACT_HIGH);
 800248c:	2101      	movs	r1, #1
 800248e:	6878      	ldr	r0, [r7, #4]
 8002490:	f000 fc97 	bl	8002dc2 <lsm6dsv16x_den_polarity_set>
	lsm6dsv16x_xl_data_rate_set(acc, LSM6DSV16X_ODR_AT_960Hz);
 8002494:	2109      	movs	r1, #9
 8002496:	6878      	ldr	r0, [r7, #4]
 8002498:	f000 fa55 	bl	8002946 <lsm6dsv16x_xl_data_rate_set>
	lsm6dsv16x_xl_full_scale_set(acc, LSM6DSV16X_2g);
 800249c:	2100      	movs	r1, #0
 800249e:	6878      	ldr	r0, [r7, #4]
 80024a0:	f000 fbb2 	bl	8002c08 <lsm6dsv16x_xl_full_scale_set>
	lsm6dsv16x_gy_full_scale_set(acc, LSM6DSV16X_2000dps);
 80024a4:	2104      	movs	r1, #4
 80024a6:	6878      	ldr	r0, [r7, #4]
 80024a8:	f000 fb88 	bl	8002bbc <lsm6dsv16x_gy_full_scale_set>
	lsm6dsv16x_fifo_watermark_set(acc, ACC_FIFO_WATERMARK);
 80024ac:	21c8      	movs	r1, #200	@ 0xc8
 80024ae:	6878      	ldr	r0, [r7, #4]
 80024b0:	f000 fcad 	bl	8002e0e <lsm6dsv16x_fifo_watermark_set>
	lsm6dsv16x_pin_int1_route_set(acc, &pin_int);
 80024b4:	f107 0310 	add.w	r3, r7, #16
 80024b8:	4619      	mov	r1, r3
 80024ba:	6878      	ldr	r0, [r7, #4]
 80024bc:	f000 fbca 	bl	8002c54 <lsm6dsv16x_pin_int1_route_set>

	__HAL_GPIO_EXTI_CLEAR_IT(ACC_INTERRUPT);
 80024c0:	4b04      	ldr	r3, [pc, #16]	@ (80024d4 <Acc_Init+0x154>)
 80024c2:	2204      	movs	r2, #4
 80024c4:	615a      	str	r2, [r3, #20]
}
 80024c6:	3718      	adds	r7, #24
 80024c8:	46bd      	mov	sp, r7
 80024ca:	bd80      	pop	{r7, pc}
 80024cc:	200005b8 	.word	0x200005b8
 80024d0:	20001a50 	.word	0x20001a50
 80024d4:	40010400 	.word	0x40010400

080024d8 <Config_Init>:

/*-----INIZiALIZZAZIONE CONFIGURAZIONE-----*/
void Config_Init(void)
{
 80024d8:	b590      	push	{r4, r7, lr}
 80024da:	f5ad 5d81 	sub.w	sp, sp, #4128	@ 0x1020
 80024de:	b087      	sub	sp, #28
 80024e0:	af00      	add	r7, sp, #0
    FIL config_file;
    UINT bytes_read;
    UINT bytes_written;

    if (f_open(&config_file, APP_CONFIG_FILE, FA_READ) == FR_OK) 
 80024e2:	f107 0318 	add.w	r3, r7, #24
 80024e6:	3b0c      	subs	r3, #12
 80024e8:	2201      	movs	r2, #1
 80024ea:	495c      	ldr	r1, [pc, #368]	@ (800265c <Config_Init+0x184>)
 80024ec:	4618      	mov	r0, r3
 80024ee:	f005 facf 	bl	8007a90 <f_open>
 80024f2:	4603      	mov	r3, r0
 80024f4:	2b00      	cmp	r3, #0
 80024f6:	d121      	bne.n	800253c <Config_Init+0x64>
	{
        if (f_read(&config_file, &config, sizeof(config), &bytes_read) == FR_OK && bytes_read == sizeof(config))
 80024f8:	f107 0318 	add.w	r3, r7, #24
 80024fc:	3b10      	subs	r3, #16
 80024fe:	f107 0018 	add.w	r0, r7, #24
 8002502:	380c      	subs	r0, #12
 8002504:	f44f 7294 	mov.w	r2, #296	@ 0x128
 8002508:	4955      	ldr	r1, [pc, #340]	@ (8002660 <Config_Init+0x188>)
 800250a:	f005 fc59 	bl	8007dc0 <f_read>
 800250e:	4603      	mov	r3, r0
 8002510:	2b00      	cmp	r3, #0
 8002512:	d10d      	bne.n	8002530 <Config_Init+0x58>
 8002514:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8002518:	f853 3c30 	ldr.w	r3, [r3, #-48]
 800251c:	f5b3 7f94 	cmp.w	r3, #296	@ 0x128
 8002520:	d106      	bne.n	8002530 <Config_Init+0x58>
		{
			f_close(&config_file);
 8002522:	f107 0318 	add.w	r3, r7, #24
 8002526:	3b0c      	subs	r3, #12
 8002528:	4618      	mov	r0, r3
 800252a:	f005 ffa5 	bl	8008478 <f_close>
			return;
 800252e:	e08f      	b.n	8002650 <Config_Init+0x178>
        }
        f_close(&config_file);
 8002530:	f107 0318 	add.w	r3, r7, #24
 8002534:	3b0c      	subs	r3, #12
 8002536:	4618      	mov	r0, r3
 8002538:	f005 ff9e 	bl	8008478 <f_close>
    }

    config.device_id = 0;
 800253c:	4b48      	ldr	r3, [pc, #288]	@ (8002660 <Config_Init+0x188>)
 800253e:	2200      	movs	r2, #0
 8002540:	701a      	strb	r2, [r3, #0]
	config.samp_freq = 800;
 8002542:	4b47      	ldr	r3, [pc, #284]	@ (8002660 <Config_Init+0x188>)
 8002544:	f44f 7248 	mov.w	r2, #800	@ 0x320
 8002548:	805a      	strh	r2, [r3, #2]
	config.buffering_secs = 30;
 800254a:	4b45      	ldr	r3, [pc, #276]	@ (8002660 <Config_Init+0x188>)
 800254c:	221e      	movs	r2, #30
 800254e:	711a      	strb	r2, [r3, #4]
	config.hammer_th = 2048;
 8002550:	4b43      	ldr	r3, [pc, #268]	@ (8002660 <Config_Init+0x188>)
 8002552:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8002556:	80da      	strh	r2, [r3, #6]
    for(int i = 0; i < 24; i++) 
 8002558:	2300      	movs	r3, #0
 800255a:	f507 5281 	add.w	r2, r7, #4128	@ 0x1020
 800255e:	f102 0214 	add.w	r2, r2, #20
 8002562:	6013      	str	r3, [r2, #0]
 8002564:	e01f      	b.n	80025a6 <Config_Init+0xce>
	{
        config.low_th[i] = 0;
 8002566:	4a3e      	ldr	r2, [pc, #248]	@ (8002660 <Config_Init+0x188>)
 8002568:	f507 5381 	add.w	r3, r7, #4128	@ 0x1020
 800256c:	f103 0314 	add.w	r3, r3, #20
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	3304      	adds	r3, #4
 8002574:	2100      	movs	r1, #0
 8002576:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
        config.high_th[i] = 4096;
 800257a:	4a39      	ldr	r2, [pc, #228]	@ (8002660 <Config_Init+0x188>)
 800257c:	f507 5381 	add.w	r3, r7, #4128	@ 0x1020
 8002580:	f103 0314 	add.w	r3, r3, #20
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	331c      	adds	r3, #28
 8002588:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800258c:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
    for(int i = 0; i < 24; i++) 
 8002590:	f507 5381 	add.w	r3, r7, #4128	@ 0x1020
 8002594:	f103 0314 	add.w	r3, r3, #20
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	3301      	adds	r3, #1
 800259c:	f507 5281 	add.w	r2, r7, #4128	@ 0x1020
 80025a0:	f102 0214 	add.w	r2, r2, #20
 80025a4:	6013      	str	r3, [r2, #0]
 80025a6:	f507 5381 	add.w	r3, r7, #4128	@ 0x1020
 80025aa:	f103 0314 	add.w	r3, r3, #20
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	2b17      	cmp	r3, #23
 80025b2:	ddd8      	ble.n	8002566 <Config_Init+0x8e>
    }
    strcpy(config.data_topic, "Data_Topic");
 80025b4:	4a2b      	ldr	r2, [pc, #172]	@ (8002664 <Config_Init+0x18c>)
 80025b6:	4b2c      	ldr	r3, [pc, #176]	@ (8002668 <Config_Init+0x190>)
 80025b8:	cb03      	ldmia	r3!, {r0, r1}
 80025ba:	6010      	str	r0, [r2, #0]
 80025bc:	6051      	str	r1, [r2, #4]
 80025be:	8819      	ldrh	r1, [r3, #0]
 80025c0:	789b      	ldrb	r3, [r3, #2]
 80025c2:	8111      	strh	r1, [r2, #8]
 80025c4:	7293      	strb	r3, [r2, #10]
    strcpy(config.command_topic, "Command_Topic");  
 80025c6:	4a29      	ldr	r2, [pc, #164]	@ (800266c <Config_Init+0x194>)
 80025c8:	4b29      	ldr	r3, [pc, #164]	@ (8002670 <Config_Init+0x198>)
 80025ca:	4614      	mov	r4, r2
 80025cc:	cb07      	ldmia	r3!, {r0, r1, r2}
 80025ce:	6020      	str	r0, [r4, #0]
 80025d0:	6061      	str	r1, [r4, #4]
 80025d2:	60a2      	str	r2, [r4, #8]
 80025d4:	881b      	ldrh	r3, [r3, #0]
 80025d6:	81a3      	strh	r3, [r4, #12]
    strcpy(config.ota_topic, "OTA_Topic");
 80025d8:	4a26      	ldr	r2, [pc, #152]	@ (8002674 <Config_Init+0x19c>)
 80025da:	4b27      	ldr	r3, [pc, #156]	@ (8002678 <Config_Init+0x1a0>)
 80025dc:	cb03      	ldmia	r3!, {r0, r1}
 80025de:	6010      	str	r0, [r2, #0]
 80025e0:	6051      	str	r1, [r2, #4]
 80025e2:	881b      	ldrh	r3, [r3, #0]
 80025e4:	8113      	strh	r3, [r2, #8]
    
    if (f_open(&config_file, APP_CONFIG_FILE, FA_WRITE | FA_CREATE_ALWAYS) != FR_OK)
 80025e6:	f107 0318 	add.w	r3, r7, #24
 80025ea:	3b0c      	subs	r3, #12
 80025ec:	220a      	movs	r2, #10
 80025ee:	491b      	ldr	r1, [pc, #108]	@ (800265c <Config_Init+0x184>)
 80025f0:	4618      	mov	r0, r3
 80025f2:	f005 fa4d 	bl	8007a90 <f_open>
 80025f6:	4603      	mov	r3, r0
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	d128      	bne.n	800264e <Config_Init+0x176>
    {
        return;
    }

    if (f_write(&config_file, &config, sizeof(Config_Typedef), &bytes_written) != FR_OK || bytes_written != sizeof(Config_Typedef)) 
 80025fc:	f107 0318 	add.w	r3, r7, #24
 8002600:	3b14      	subs	r3, #20
 8002602:	f107 0018 	add.w	r0, r7, #24
 8002606:	380c      	subs	r0, #12
 8002608:	f44f 7294 	mov.w	r2, #296	@ 0x128
 800260c:	4914      	ldr	r1, [pc, #80]	@ (8002660 <Config_Init+0x188>)
 800260e:	f005 fd2a 	bl	8008066 <f_write>
 8002612:	4603      	mov	r3, r0
 8002614:	2b00      	cmp	r3, #0
 8002616:	d106      	bne.n	8002626 <Config_Init+0x14e>
 8002618:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 800261c:	f853 3c34 	ldr.w	r3, [r3, #-52]
 8002620:	f5b3 7f94 	cmp.w	r3, #296	@ 0x128
 8002624:	d006      	beq.n	8002634 <Config_Init+0x15c>
	{
        f_close(&config_file);
 8002626:	f107 0318 	add.w	r3, r7, #24
 800262a:	3b0c      	subs	r3, #12
 800262c:	4618      	mov	r0, r3
 800262e:	f005 ff23 	bl	8008478 <f_close>
        return;
 8002632:	e00d      	b.n	8002650 <Config_Init+0x178>
    }
    
    f_sync(&config_file);
 8002634:	f107 0318 	add.w	r3, r7, #24
 8002638:	3b0c      	subs	r3, #12
 800263a:	4618      	mov	r0, r3
 800263c:	f005 fe9c 	bl	8008378 <f_sync>
    f_close(&config_file);
 8002640:	f107 0318 	add.w	r3, r7, #24
 8002644:	3b0c      	subs	r3, #12
 8002646:	4618      	mov	r0, r3
 8002648:	f005 ff16 	bl	8008478 <f_close>
 800264c:	e000      	b.n	8002650 <Config_Init+0x178>
        return;
 800264e:	bf00      	nop
}
 8002650:	f507 5781 	add.w	r7, r7, #4128	@ 0x1020
 8002654:	371c      	adds	r7, #28
 8002656:	46bd      	mov	sp, r7
 8002658:	bd90      	pop	{r4, r7, pc}
 800265a:	bf00      	nop
 800265c:	08014278 	.word	0x08014278
 8002660:	20001a54 	.word	0x20001a54
 8002664:	20001abc 	.word	0x20001abc
 8002668:	0801428c 	.word	0x0801428c
 800266c:	20001afc 	.word	0x20001afc
 8002670:	08014298 	.word	0x08014298
 8002674:	20001b3c 	.word	0x20001b3c
 8002678:	080142a8 	.word	0x080142a8

0800267c <LED_Start>:
#include "leds.h"
#include "peripherals.h"

/*------ACCENSIONE LED------*/
void LED_Start(uint32_t LED, uint8_t mode)
{
 800267c:	b580      	push	{r7, lr}
 800267e:	b08a      	sub	sp, #40	@ 0x28
 8002680:	af00      	add	r7, sp, #0
 8002682:	6078      	str	r0, [r7, #4]
 8002684:	460b      	mov	r3, r1
 8002686:	70fb      	strb	r3, [r7, #3]
	TIM_OC_InitTypeDef sConfigOC = {0};
 8002688:	f107 030c 	add.w	r3, r7, #12
 800268c:	2200      	movs	r2, #0
 800268e:	601a      	str	r2, [r3, #0]
 8002690:	605a      	str	r2, [r3, #4]
 8002692:	609a      	str	r2, [r3, #8]
 8002694:	60da      	str	r2, [r3, #12]
 8002696:	611a      	str	r2, [r3, #16]
 8002698:	615a      	str	r2, [r3, #20]
 800269a:	619a      	str	r2, [r3, #24]
	sConfigOC.OCMode = TIM_OCMODE_TIMING;
 800269c:	2300      	movs	r3, #0
 800269e:	60fb      	str	r3, [r7, #12]
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80026a0:	2300      	movs	r3, #0
 80026a2:	617b      	str	r3, [r7, #20]
	sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80026a4:	2300      	movs	r3, #0
 80026a6:	61bb      	str	r3, [r7, #24]
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80026a8:	2300      	movs	r3, #0
 80026aa:	61fb      	str	r3, [r7, #28]
	sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80026ac:	2300      	movs	r3, #0
 80026ae:	623b      	str	r3, [r7, #32]
	sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80026b0:	2300      	movs	r3, #0
 80026b2:	627b      	str	r3, [r7, #36]	@ 0x24

	switch(mode)
 80026b4:	78fb      	ldrb	r3, [r7, #3]
 80026b6:	2b03      	cmp	r3, #3
 80026b8:	d00e      	beq.n	80026d8 <LED_Start+0x5c>
 80026ba:	2b03      	cmp	r3, #3
 80026bc:	dc10      	bgt.n	80026e0 <LED_Start+0x64>
 80026be:	2b01      	cmp	r3, #1
 80026c0:	d002      	beq.n	80026c8 <LED_Start+0x4c>
 80026c2:	2b02      	cmp	r3, #2
 80026c4:	d004      	beq.n	80026d0 <LED_Start+0x54>
 80026c6:	e00b      	b.n	80026e0 <LED_Start+0x64>
	{
	case ON:
		sConfigOC.Pulse = 49999;
 80026c8:	f24c 334f 	movw	r3, #49999	@ 0xc34f
 80026cc:	613b      	str	r3, [r7, #16]
		break;
 80026ce:	e007      	b.n	80026e0 <LED_Start+0x64>
	case FAST:
		sConfigOC.Pulse = 24999;
 80026d0:	f246 13a7 	movw	r3, #24999	@ 0x61a7
 80026d4:	613b      	str	r3, [r7, #16]
		break;
 80026d6:	e003      	b.n	80026e0 <LED_Start+0x64>
	case SLOW:
		sConfigOC.Pulse = 12499;
 80026d8:	f243 03d3 	movw	r3, #12499	@ 0x30d3
 80026dc:	613b      	str	r3, [r7, #16]
		break;
 80026de:	bf00      	nop
	}

	HAL_TIM_Base_Init(LED_TIMER);
 80026e0:	481d      	ldr	r0, [pc, #116]	@ (8002758 <LED_Start+0xdc>)
 80026e2:	f00c ffd5 	bl	800f690 <HAL_TIM_Base_Init>
	HAL_TIM_PWM_Init(LED_TIMER);
 80026e6:	481c      	ldr	r0, [pc, #112]	@ (8002758 <LED_Start+0xdc>)
 80026e8:	f00d fab8 	bl	800fc5c <HAL_TIM_PWM_Init>

	switch(LED)
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	2b08      	cmp	r3, #8
 80026f0:	d009      	beq.n	8002706 <LED_Start+0x8a>
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	2b08      	cmp	r3, #8
 80026f6:	d82a      	bhi.n	800274e <LED_Start+0xd2>
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	d01b      	beq.n	8002736 <LED_Start+0xba>
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	2b04      	cmp	r3, #4
 8002702:	d00c      	beq.n	800271e <LED_Start+0xa2>
	case ORG_LED:
		HAL_TIM_PWM_ConfigChannel(LED_TIMER, &sConfigOC, LED);
		HAL_TIM_PWM_Start(LED_TIMER, LED);
		break;
	}
}
 8002704:	e023      	b.n	800274e <LED_Start+0xd2>
		HAL_TIM_PWM_ConfigChannel(LED_TIMER, &sConfigOC, LED);
 8002706:	f107 030c 	add.w	r3, r7, #12
 800270a:	687a      	ldr	r2, [r7, #4]
 800270c:	4619      	mov	r1, r3
 800270e:	4812      	ldr	r0, [pc, #72]	@ (8002758 <LED_Start+0xdc>)
 8002710:	f00d fe10 	bl	8010334 <HAL_TIM_PWM_ConfigChannel>
		HAL_TIM_PWM_Start(LED_TIMER, LED);
 8002714:	6879      	ldr	r1, [r7, #4]
 8002716:	4810      	ldr	r0, [pc, #64]	@ (8002758 <LED_Start+0xdc>)
 8002718:	f00d fb02 	bl	800fd20 <HAL_TIM_PWM_Start>
		break;
 800271c:	e017      	b.n	800274e <LED_Start+0xd2>
		HAL_TIM_PWM_ConfigChannel(LED_TIMER, &sConfigOC, LED);
 800271e:	f107 030c 	add.w	r3, r7, #12
 8002722:	687a      	ldr	r2, [r7, #4]
 8002724:	4619      	mov	r1, r3
 8002726:	480c      	ldr	r0, [pc, #48]	@ (8002758 <LED_Start+0xdc>)
 8002728:	f00d fe04 	bl	8010334 <HAL_TIM_PWM_ConfigChannel>
		HAL_TIM_PWM_Start(LED_TIMER, LED);
 800272c:	6879      	ldr	r1, [r7, #4]
 800272e:	480a      	ldr	r0, [pc, #40]	@ (8002758 <LED_Start+0xdc>)
 8002730:	f00d faf6 	bl	800fd20 <HAL_TIM_PWM_Start>
		break;
 8002734:	e00b      	b.n	800274e <LED_Start+0xd2>
		HAL_TIM_PWM_ConfigChannel(LED_TIMER, &sConfigOC, LED);
 8002736:	f107 030c 	add.w	r3, r7, #12
 800273a:	687a      	ldr	r2, [r7, #4]
 800273c:	4619      	mov	r1, r3
 800273e:	4806      	ldr	r0, [pc, #24]	@ (8002758 <LED_Start+0xdc>)
 8002740:	f00d fdf8 	bl	8010334 <HAL_TIM_PWM_ConfigChannel>
		HAL_TIM_PWM_Start(LED_TIMER, LED);
 8002744:	6879      	ldr	r1, [r7, #4]
 8002746:	4804      	ldr	r0, [pc, #16]	@ (8002758 <LED_Start+0xdc>)
 8002748:	f00d faea 	bl	800fd20 <HAL_TIM_PWM_Start>
		break;
 800274c:	bf00      	nop
}
 800274e:	bf00      	nop
 8002750:	3728      	adds	r7, #40	@ 0x28
 8002752:	46bd      	mov	sp, r7
 8002754:	bd80      	pop	{r7, pc}
 8002756:	bf00      	nop
 8002758:	200002e4 	.word	0x200002e4

0800275c <LED_Stop>:

/*------SPEGNIMENTO LED------*/
void LED_Stop(uint32_t LED)
{
 800275c:	b580      	push	{r7, lr}
 800275e:	b082      	sub	sp, #8
 8002760:	af00      	add	r7, sp, #0
 8002762:	6078      	str	r0, [r7, #4]
	HAL_TIM_PWM_Stop(LED_TIMER, LED);
 8002764:	6879      	ldr	r1, [r7, #4]
 8002766:	4803      	ldr	r0, [pc, #12]	@ (8002774 <LED_Stop+0x18>)
 8002768:	f00d fbe0 	bl	800ff2c <HAL_TIM_PWM_Stop>
}
 800276c:	bf00      	nop
 800276e:	3708      	adds	r7, #8
 8002770:	46bd      	mov	sp, r7
 8002772:	bd80      	pop	{r7, pc}
 8002774:	200002e4 	.word	0x200002e4

08002778 <lsm6dsv16x_read_reg>:
  *
  */
int32_t __weak lsm6dsv16x_read_reg(stmdev_ctx_t *ctx, uint8_t reg,
                                   uint8_t *data,
                                   uint16_t len)
{
 8002778:	b590      	push	{r4, r7, lr}
 800277a:	b087      	sub	sp, #28
 800277c:	af00      	add	r7, sp, #0
 800277e:	60f8      	str	r0, [r7, #12]
 8002780:	607a      	str	r2, [r7, #4]
 8002782:	461a      	mov	r2, r3
 8002784:	460b      	mov	r3, r1
 8002786:	72fb      	strb	r3, [r7, #11]
 8002788:	4613      	mov	r3, r2
 800278a:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->read_reg(ctx->handle, reg, data, len);
 800278c:	68fb      	ldr	r3, [r7, #12]
 800278e:	685c      	ldr	r4, [r3, #4]
 8002790:	68fb      	ldr	r3, [r7, #12]
 8002792:	68d8      	ldr	r0, [r3, #12]
 8002794:	893b      	ldrh	r3, [r7, #8]
 8002796:	7af9      	ldrb	r1, [r7, #11]
 8002798:	687a      	ldr	r2, [r7, #4]
 800279a:	47a0      	blx	r4
 800279c:	6178      	str	r0, [r7, #20]

  return ret;
 800279e:	697b      	ldr	r3, [r7, #20]
}
 80027a0:	4618      	mov	r0, r3
 80027a2:	371c      	adds	r7, #28
 80027a4:	46bd      	mov	sp, r7
 80027a6:	bd90      	pop	{r4, r7, pc}

080027a8 <lsm6dsv16x_write_reg>:
  *
  */
int32_t __weak lsm6dsv16x_write_reg(stmdev_ctx_t *ctx, uint8_t reg,
                                    uint8_t *data,
                                    uint16_t len)
{
 80027a8:	b590      	push	{r4, r7, lr}
 80027aa:	b087      	sub	sp, #28
 80027ac:	af00      	add	r7, sp, #0
 80027ae:	60f8      	str	r0, [r7, #12]
 80027b0:	607a      	str	r2, [r7, #4]
 80027b2:	461a      	mov	r2, r3
 80027b4:	460b      	mov	r3, r1
 80027b6:	72fb      	strb	r3, [r7, #11]
 80027b8:	4613      	mov	r3, r2
 80027ba:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->write_reg(ctx->handle, reg, data, len);
 80027bc:	68fb      	ldr	r3, [r7, #12]
 80027be:	681c      	ldr	r4, [r3, #0]
 80027c0:	68fb      	ldr	r3, [r7, #12]
 80027c2:	68d8      	ldr	r0, [r3, #12]
 80027c4:	893b      	ldrh	r3, [r7, #8]
 80027c6:	7af9      	ldrb	r1, [r7, #11]
 80027c8:	687a      	ldr	r2, [r7, #4]
 80027ca:	47a0      	blx	r4
 80027cc:	6178      	str	r0, [r7, #20]

  return ret;
 80027ce:	697b      	ldr	r3, [r7, #20]
}
 80027d0:	4618      	mov	r0, r3
 80027d2:	371c      	adds	r7, #28
 80027d4:	46bd      	mov	sp, r7
 80027d6:	bd90      	pop	{r4, r7, pc}

080027d8 <lsm6dsv16x_reset_set>:
  * @param  val      Reset of the device.
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dsv16x_reset_set(stmdev_ctx_t *ctx, lsm6dsv16x_reset_t val)
{
 80027d8:	b580      	push	{r7, lr}
 80027da:	b086      	sub	sp, #24
 80027dc:	af00      	add	r7, sp, #0
 80027de:	6078      	str	r0, [r7, #4]
 80027e0:	460b      	mov	r3, r1
 80027e2:	70fb      	strb	r3, [r7, #3]
  lsm6dsv16x_func_cfg_access_t func_cfg_access;
  lsm6dsv16x_ctrl3_t ctrl3;
  int32_t ret;

  ret = lsm6dsv16x_read_reg(ctx, LSM6DSV16X_CTRL3, (uint8_t *)&ctrl3, 1);
 80027e4:	f107 020c 	add.w	r2, r7, #12
 80027e8:	2301      	movs	r3, #1
 80027ea:	2112      	movs	r1, #18
 80027ec:	6878      	ldr	r0, [r7, #4]
 80027ee:	f7ff ffc3 	bl	8002778 <lsm6dsv16x_read_reg>
 80027f2:	6178      	str	r0, [r7, #20]
  ret += lsm6dsv16x_read_reg(ctx, LSM6DSV16X_FUNC_CFG_ACCESS, (uint8_t *)&func_cfg_access, 1);
 80027f4:	f107 0210 	add.w	r2, r7, #16
 80027f8:	2301      	movs	r3, #1
 80027fa:	2101      	movs	r1, #1
 80027fc:	6878      	ldr	r0, [r7, #4]
 80027fe:	f7ff ffbb 	bl	8002778 <lsm6dsv16x_read_reg>
 8002802:	4602      	mov	r2, r0
 8002804:	697b      	ldr	r3, [r7, #20]
 8002806:	4413      	add	r3, r2
 8002808:	617b      	str	r3, [r7, #20]
  if (ret != 0) { return ret; }
 800280a:	697b      	ldr	r3, [r7, #20]
 800280c:	2b00      	cmp	r3, #0
 800280e:	d001      	beq.n	8002814 <lsm6dsv16x_reset_set+0x3c>
 8002810:	697b      	ldr	r3, [r7, #20]
 8002812:	e02d      	b.n	8002870 <lsm6dsv16x_reset_set+0x98>

  ctrl3.boot = ((uint8_t)val & 0x04U) >> 2;
 8002814:	78fb      	ldrb	r3, [r7, #3]
 8002816:	089b      	lsrs	r3, r3, #2
 8002818:	f003 0301 	and.w	r3, r3, #1
 800281c:	b2da      	uxtb	r2, r3
 800281e:	7b3b      	ldrb	r3, [r7, #12]
 8002820:	f362 13c7 	bfi	r3, r2, #7, #1
 8002824:	733b      	strb	r3, [r7, #12]
  ctrl3.sw_reset = ((uint8_t)val & 0x02U) >> 1;
 8002826:	78fb      	ldrb	r3, [r7, #3]
 8002828:	085b      	lsrs	r3, r3, #1
 800282a:	f003 0301 	and.w	r3, r3, #1
 800282e:	b2da      	uxtb	r2, r3
 8002830:	7b3b      	ldrb	r3, [r7, #12]
 8002832:	f362 0300 	bfi	r3, r2, #0, #1
 8002836:	733b      	strb	r3, [r7, #12]
  func_cfg_access.sw_por = (uint8_t)val & 0x01U;
 8002838:	78fb      	ldrb	r3, [r7, #3]
 800283a:	f003 0301 	and.w	r3, r3, #1
 800283e:	b2da      	uxtb	r2, r3
 8002840:	7c3b      	ldrb	r3, [r7, #16]
 8002842:	f362 0382 	bfi	r3, r2, #2, #1
 8002846:	743b      	strb	r3, [r7, #16]

  ret = lsm6dsv16x_write_reg(ctx, LSM6DSV16X_CTRL3, (uint8_t *)&ctrl3, 1);
 8002848:	f107 020c 	add.w	r2, r7, #12
 800284c:	2301      	movs	r3, #1
 800284e:	2112      	movs	r1, #18
 8002850:	6878      	ldr	r0, [r7, #4]
 8002852:	f7ff ffa9 	bl	80027a8 <lsm6dsv16x_write_reg>
 8002856:	6178      	str	r0, [r7, #20]
  ret += lsm6dsv16x_write_reg(ctx, LSM6DSV16X_FUNC_CFG_ACCESS, (uint8_t *)&func_cfg_access, 1);
 8002858:	f107 0210 	add.w	r2, r7, #16
 800285c:	2301      	movs	r3, #1
 800285e:	2101      	movs	r1, #1
 8002860:	6878      	ldr	r0, [r7, #4]
 8002862:	f7ff ffa1 	bl	80027a8 <lsm6dsv16x_write_reg>
 8002866:	4602      	mov	r2, r0
 8002868:	697b      	ldr	r3, [r7, #20]
 800286a:	4413      	add	r3, r2
 800286c:	617b      	str	r3, [r7, #20]

  return ret;
 800286e:	697b      	ldr	r3, [r7, #20]
}
 8002870:	4618      	mov	r0, r3
 8002872:	3718      	adds	r7, #24
 8002874:	46bd      	mov	sp, r7
 8002876:	bd80      	pop	{r7, pc}

08002878 <lsm6dsv16x_reset_get>:
  * @param  val      Global reset of the device.
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dsv16x_reset_get(stmdev_ctx_t *ctx, lsm6dsv16x_reset_t *val)
{
 8002878:	b580      	push	{r7, lr}
 800287a:	b086      	sub	sp, #24
 800287c:	af00      	add	r7, sp, #0
 800287e:	6078      	str	r0, [r7, #4]
 8002880:	6039      	str	r1, [r7, #0]
  lsm6dsv16x_func_cfg_access_t func_cfg_access;
  lsm6dsv16x_ctrl3_t ctrl3;
  int32_t ret;

  ret = lsm6dsv16x_read_reg(ctx, LSM6DSV16X_CTRL3, (uint8_t *)&ctrl3, 1);
 8002882:	f107 020c 	add.w	r2, r7, #12
 8002886:	2301      	movs	r3, #1
 8002888:	2112      	movs	r1, #18
 800288a:	6878      	ldr	r0, [r7, #4]
 800288c:	f7ff ff74 	bl	8002778 <lsm6dsv16x_read_reg>
 8002890:	6178      	str	r0, [r7, #20]
  ret += lsm6dsv16x_read_reg(ctx, LSM6DSV16X_FUNC_CFG_ACCESS, (uint8_t *)&func_cfg_access, 1);
 8002892:	f107 0210 	add.w	r2, r7, #16
 8002896:	2301      	movs	r3, #1
 8002898:	2101      	movs	r1, #1
 800289a:	6878      	ldr	r0, [r7, #4]
 800289c:	f7ff ff6c 	bl	8002778 <lsm6dsv16x_read_reg>
 80028a0:	4602      	mov	r2, r0
 80028a2:	697b      	ldr	r3, [r7, #20]
 80028a4:	4413      	add	r3, r2
 80028a6:	617b      	str	r3, [r7, #20]
  if (ret != 0) { return ret; }
 80028a8:	697b      	ldr	r3, [r7, #20]
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	d001      	beq.n	80028b2 <lsm6dsv16x_reset_get+0x3a>
 80028ae:	697b      	ldr	r3, [r7, #20]
 80028b0:	e033      	b.n	800291a <lsm6dsv16x_reset_get+0xa2>

  switch ((ctrl3.sw_reset << 2) + (ctrl3.boot << 1) + func_cfg_access.sw_por)
 80028b2:	7b3b      	ldrb	r3, [r7, #12]
 80028b4:	f3c3 0300 	ubfx	r3, r3, #0, #1
 80028b8:	b2db      	uxtb	r3, r3
 80028ba:	009a      	lsls	r2, r3, #2
 80028bc:	7b3b      	ldrb	r3, [r7, #12]
 80028be:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 80028c2:	b2db      	uxtb	r3, r3
 80028c4:	005b      	lsls	r3, r3, #1
 80028c6:	4413      	add	r3, r2
 80028c8:	7c3a      	ldrb	r2, [r7, #16]
 80028ca:	f3c2 0280 	ubfx	r2, r2, #2, #1
 80028ce:	b2d2      	uxtb	r2, r2
 80028d0:	4413      	add	r3, r2
 80028d2:	2b04      	cmp	r3, #4
 80028d4:	d81c      	bhi.n	8002910 <lsm6dsv16x_reset_get+0x98>
 80028d6:	a201      	add	r2, pc, #4	@ (adr r2, 80028dc <lsm6dsv16x_reset_get+0x64>)
 80028d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80028dc:	080028f1 	.word	0x080028f1
 80028e0:	080028f9 	.word	0x080028f9
 80028e4:	08002901 	.word	0x08002901
 80028e8:	08002911 	.word	0x08002911
 80028ec:	08002909 	.word	0x08002909
  {
    case LSM6DSV16X_READY:
      *val = LSM6DSV16X_READY;
 80028f0:	683b      	ldr	r3, [r7, #0]
 80028f2:	2200      	movs	r2, #0
 80028f4:	701a      	strb	r2, [r3, #0]
      break;
 80028f6:	e00f      	b.n	8002918 <lsm6dsv16x_reset_get+0xa0>

    case LSM6DSV16X_GLOBAL_RST:
      *val = LSM6DSV16X_GLOBAL_RST;
 80028f8:	683b      	ldr	r3, [r7, #0]
 80028fa:	2201      	movs	r2, #1
 80028fc:	701a      	strb	r2, [r3, #0]
      break;
 80028fe:	e00b      	b.n	8002918 <lsm6dsv16x_reset_get+0xa0>

    case LSM6DSV16X_RESTORE_CAL_PARAM:
      *val = LSM6DSV16X_RESTORE_CAL_PARAM;
 8002900:	683b      	ldr	r3, [r7, #0]
 8002902:	2202      	movs	r2, #2
 8002904:	701a      	strb	r2, [r3, #0]
      break;
 8002906:	e007      	b.n	8002918 <lsm6dsv16x_reset_get+0xa0>

    case LSM6DSV16X_RESTORE_CTRL_REGS:
      *val = LSM6DSV16X_RESTORE_CTRL_REGS;
 8002908:	683b      	ldr	r3, [r7, #0]
 800290a:	2204      	movs	r2, #4
 800290c:	701a      	strb	r2, [r3, #0]
      break;
 800290e:	e003      	b.n	8002918 <lsm6dsv16x_reset_get+0xa0>

    default:
      *val = LSM6DSV16X_GLOBAL_RST;
 8002910:	683b      	ldr	r3, [r7, #0]
 8002912:	2201      	movs	r2, #1
 8002914:	701a      	strb	r2, [r3, #0]
      break;
 8002916:	bf00      	nop
  }

  return ret;
 8002918:	697b      	ldr	r3, [r7, #20]
}
 800291a:	4618      	mov	r0, r3
 800291c:	3718      	adds	r7, #24
 800291e:	46bd      	mov	sp, r7
 8002920:	bd80      	pop	{r7, pc}
 8002922:	bf00      	nop

08002924 <lsm6dsv16x_device_id_get>:
  * @param  val      Device ID.
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dsv16x_device_id_get(stmdev_ctx_t *ctx, uint8_t *val)
{
 8002924:	b580      	push	{r7, lr}
 8002926:	b084      	sub	sp, #16
 8002928:	af00      	add	r7, sp, #0
 800292a:	6078      	str	r0, [r7, #4]
 800292c:	6039      	str	r1, [r7, #0]
  int32_t ret;

  ret = lsm6dsv16x_read_reg(ctx, LSM6DSV16X_WHO_AM_I, val, 1);
 800292e:	2301      	movs	r3, #1
 8002930:	683a      	ldr	r2, [r7, #0]
 8002932:	210f      	movs	r1, #15
 8002934:	6878      	ldr	r0, [r7, #4]
 8002936:	f7ff ff1f 	bl	8002778 <lsm6dsv16x_read_reg>
 800293a:	60f8      	str	r0, [r7, #12]

  return ret;
 800293c:	68fb      	ldr	r3, [r7, #12]
}
 800293e:	4618      	mov	r0, r3
 8002940:	3710      	adds	r7, #16
 8002942:	46bd      	mov	sp, r7
 8002944:	bd80      	pop	{r7, pc}

08002946 <lsm6dsv16x_xl_data_rate_set>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dsv16x_xl_data_rate_set(stmdev_ctx_t *ctx,
                                    lsm6dsv16x_data_rate_t val)
{
 8002946:	b580      	push	{r7, lr}
 8002948:	b086      	sub	sp, #24
 800294a:	af00      	add	r7, sp, #0
 800294c:	6078      	str	r0, [r7, #4]
 800294e:	460b      	mov	r3, r1
 8002950:	70fb      	strb	r3, [r7, #3]
  lsm6dsv16x_ctrl1_t ctrl1;
  lsm6dsv16x_haodr_cfg_t haodr;
  uint8_t sel;
  int32_t ret;

  ret = lsm6dsv16x_read_reg(ctx, LSM6DSV16X_CTRL1, (uint8_t *)&ctrl1, 1);
 8002952:	f107 0210 	add.w	r2, r7, #16
 8002956:	2301      	movs	r3, #1
 8002958:	2110      	movs	r1, #16
 800295a:	6878      	ldr	r0, [r7, #4]
 800295c:	f7ff ff0c 	bl	8002778 <lsm6dsv16x_read_reg>
 8002960:	6178      	str	r0, [r7, #20]
  if (ret != 0) { return ret; }
 8002962:	697b      	ldr	r3, [r7, #20]
 8002964:	2b00      	cmp	r3, #0
 8002966:	d001      	beq.n	800296c <lsm6dsv16x_xl_data_rate_set+0x26>
 8002968:	697b      	ldr	r3, [r7, #20]
 800296a:	e039      	b.n	80029e0 <lsm6dsv16x_xl_data_rate_set+0x9a>

  ctrl1.odr_xl = (uint8_t)val & 0x0Fu;
 800296c:	78fb      	ldrb	r3, [r7, #3]
 800296e:	f003 030f 	and.w	r3, r3, #15
 8002972:	b2da      	uxtb	r2, r3
 8002974:	7c3b      	ldrb	r3, [r7, #16]
 8002976:	f362 0303 	bfi	r3, r2, #0, #4
 800297a:	743b      	strb	r3, [r7, #16]
  ret = lsm6dsv16x_write_reg(ctx, LSM6DSV16X_CTRL1, (uint8_t *)&ctrl1, 1);
 800297c:	f107 0210 	add.w	r2, r7, #16
 8002980:	2301      	movs	r3, #1
 8002982:	2110      	movs	r1, #16
 8002984:	6878      	ldr	r0, [r7, #4]
 8002986:	f7ff ff0f 	bl	80027a8 <lsm6dsv16x_write_reg>
 800298a:	6178      	str	r0, [r7, #20]
  if (ret != 0) { return ret; }
 800298c:	697b      	ldr	r3, [r7, #20]
 800298e:	2b00      	cmp	r3, #0
 8002990:	d001      	beq.n	8002996 <lsm6dsv16x_xl_data_rate_set+0x50>
 8002992:	697b      	ldr	r3, [r7, #20]
 8002994:	e024      	b.n	80029e0 <lsm6dsv16x_xl_data_rate_set+0x9a>

  sel = ((uint8_t)val >> 4) & 0xFU;
 8002996:	78fb      	ldrb	r3, [r7, #3]
 8002998:	091b      	lsrs	r3, r3, #4
 800299a:	74fb      	strb	r3, [r7, #19]
  if (sel != 0U)
 800299c:	7cfb      	ldrb	r3, [r7, #19]
 800299e:	2b00      	cmp	r3, #0
 80029a0:	d01d      	beq.n	80029de <lsm6dsv16x_xl_data_rate_set+0x98>
  {
    ret += lsm6dsv16x_read_reg(ctx, LSM6DSV16X_HAODR_CFG, (uint8_t *)&haodr, 1);
 80029a2:	f107 020c 	add.w	r2, r7, #12
 80029a6:	2301      	movs	r3, #1
 80029a8:	2162      	movs	r1, #98	@ 0x62
 80029aa:	6878      	ldr	r0, [r7, #4]
 80029ac:	f7ff fee4 	bl	8002778 <lsm6dsv16x_read_reg>
 80029b0:	4602      	mov	r2, r0
 80029b2:	697b      	ldr	r3, [r7, #20]
 80029b4:	4413      	add	r3, r2
 80029b6:	617b      	str	r3, [r7, #20]
    haodr.haodr_sel = sel;
 80029b8:	7cfb      	ldrb	r3, [r7, #19]
 80029ba:	f003 0303 	and.w	r3, r3, #3
 80029be:	b2da      	uxtb	r2, r3
 80029c0:	7b3b      	ldrb	r3, [r7, #12]
 80029c2:	f362 0301 	bfi	r3, r2, #0, #2
 80029c6:	733b      	strb	r3, [r7, #12]
    ret += lsm6dsv16x_write_reg(ctx, LSM6DSV16X_HAODR_CFG, (uint8_t *)&haodr, 1);
 80029c8:	f107 020c 	add.w	r2, r7, #12
 80029cc:	2301      	movs	r3, #1
 80029ce:	2162      	movs	r1, #98	@ 0x62
 80029d0:	6878      	ldr	r0, [r7, #4]
 80029d2:	f7ff fee9 	bl	80027a8 <lsm6dsv16x_write_reg>
 80029d6:	4602      	mov	r2, r0
 80029d8:	697b      	ldr	r3, [r7, #20]
 80029da:	4413      	add	r3, r2
 80029dc:	617b      	str	r3, [r7, #20]
  }

  return ret;
 80029de:	697b      	ldr	r3, [r7, #20]
}
 80029e0:	4618      	mov	r0, r3
 80029e2:	3718      	adds	r7, #24
 80029e4:	46bd      	mov	sp, r7
 80029e6:	bd80      	pop	{r7, pc}

080029e8 <lsm6dsv16x_xl_mode_set>:
  * @param  val      XL_HIGH_PERFORMANCE_MD, XL_HIGH_ACCURACY_ODR_MD, XL_LOW_POWER_2_AVG_MD, XL_LOW_POWER_4_AVG_MD, XL_LOW_POWER_8_AVG_MD, XL_NORMAL_MD,
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dsv16x_xl_mode_set(stmdev_ctx_t *ctx, lsm6dsv16x_xl_mode_t val)
{
 80029e8:	b580      	push	{r7, lr}
 80029ea:	b084      	sub	sp, #16
 80029ec:	af00      	add	r7, sp, #0
 80029ee:	6078      	str	r0, [r7, #4]
 80029f0:	460b      	mov	r3, r1
 80029f2:	70fb      	strb	r3, [r7, #3]
  lsm6dsv16x_ctrl1_t ctrl1;
  int32_t ret;

  ret = lsm6dsv16x_read_reg(ctx, LSM6DSV16X_CTRL1, (uint8_t *)&ctrl1, 1);
 80029f4:	f107 0208 	add.w	r2, r7, #8
 80029f8:	2301      	movs	r3, #1
 80029fa:	2110      	movs	r1, #16
 80029fc:	6878      	ldr	r0, [r7, #4]
 80029fe:	f7ff febb 	bl	8002778 <lsm6dsv16x_read_reg>
 8002a02:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8002a04:	68fb      	ldr	r3, [r7, #12]
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	d10f      	bne.n	8002a2a <lsm6dsv16x_xl_mode_set+0x42>
  {
    ctrl1.op_mode_xl = (uint8_t)val & 0x07U;
 8002a0a:	78fb      	ldrb	r3, [r7, #3]
 8002a0c:	f003 0307 	and.w	r3, r3, #7
 8002a10:	b2da      	uxtb	r2, r3
 8002a12:	7a3b      	ldrb	r3, [r7, #8]
 8002a14:	f362 1306 	bfi	r3, r2, #4, #3
 8002a18:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsv16x_write_reg(ctx, LSM6DSV16X_CTRL1, (uint8_t *)&ctrl1, 1);
 8002a1a:	f107 0208 	add.w	r2, r7, #8
 8002a1e:	2301      	movs	r3, #1
 8002a20:	2110      	movs	r1, #16
 8002a22:	6878      	ldr	r0, [r7, #4]
 8002a24:	f7ff fec0 	bl	80027a8 <lsm6dsv16x_write_reg>
 8002a28:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8002a2a:	68fb      	ldr	r3, [r7, #12]
}
 8002a2c:	4618      	mov	r0, r3
 8002a2e:	3710      	adds	r7, #16
 8002a30:	46bd      	mov	sp, r7
 8002a32:	bd80      	pop	{r7, pc}

08002a34 <lsm6dsv16x_gy_data_rate_set>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dsv16x_gy_data_rate_set(stmdev_ctx_t *ctx,
                                    lsm6dsv16x_data_rate_t val)
{
 8002a34:	b580      	push	{r7, lr}
 8002a36:	b086      	sub	sp, #24
 8002a38:	af00      	add	r7, sp, #0
 8002a3a:	6078      	str	r0, [r7, #4]
 8002a3c:	460b      	mov	r3, r1
 8002a3e:	70fb      	strb	r3, [r7, #3]
  lsm6dsv16x_ctrl2_t ctrl2;
  lsm6dsv16x_haodr_cfg_t haodr;
  uint8_t sel;
  int32_t ret;

  ret = lsm6dsv16x_read_reg(ctx, LSM6DSV16X_CTRL2, (uint8_t *)&ctrl2, 1);
 8002a40:	f107 0210 	add.w	r2, r7, #16
 8002a44:	2301      	movs	r3, #1
 8002a46:	2111      	movs	r1, #17
 8002a48:	6878      	ldr	r0, [r7, #4]
 8002a4a:	f7ff fe95 	bl	8002778 <lsm6dsv16x_read_reg>
 8002a4e:	6178      	str	r0, [r7, #20]
  ctrl2.odr_g = (uint8_t)val & 0x0Fu;
 8002a50:	78fb      	ldrb	r3, [r7, #3]
 8002a52:	f003 030f 	and.w	r3, r3, #15
 8002a56:	b2da      	uxtb	r2, r3
 8002a58:	7c3b      	ldrb	r3, [r7, #16]
 8002a5a:	f362 0303 	bfi	r3, r2, #0, #4
 8002a5e:	743b      	strb	r3, [r7, #16]
  ret += lsm6dsv16x_write_reg(ctx, LSM6DSV16X_CTRL2, (uint8_t *)&ctrl2, 1);
 8002a60:	f107 0210 	add.w	r2, r7, #16
 8002a64:	2301      	movs	r3, #1
 8002a66:	2111      	movs	r1, #17
 8002a68:	6878      	ldr	r0, [r7, #4]
 8002a6a:	f7ff fe9d 	bl	80027a8 <lsm6dsv16x_write_reg>
 8002a6e:	4602      	mov	r2, r0
 8002a70:	697b      	ldr	r3, [r7, #20]
 8002a72:	4413      	add	r3, r2
 8002a74:	617b      	str	r3, [r7, #20]
  if (ret != 0) { return ret; }
 8002a76:	697b      	ldr	r3, [r7, #20]
 8002a78:	2b00      	cmp	r3, #0
 8002a7a:	d001      	beq.n	8002a80 <lsm6dsv16x_gy_data_rate_set+0x4c>
 8002a7c:	697b      	ldr	r3, [r7, #20]
 8002a7e:	e024      	b.n	8002aca <lsm6dsv16x_gy_data_rate_set+0x96>

  sel = ((uint8_t)val >> 4) & 0xFU;
 8002a80:	78fb      	ldrb	r3, [r7, #3]
 8002a82:	091b      	lsrs	r3, r3, #4
 8002a84:	74fb      	strb	r3, [r7, #19]
  if (sel != 0U)
 8002a86:	7cfb      	ldrb	r3, [r7, #19]
 8002a88:	2b00      	cmp	r3, #0
 8002a8a:	d01d      	beq.n	8002ac8 <lsm6dsv16x_gy_data_rate_set+0x94>
  {
    ret += lsm6dsv16x_read_reg(ctx, LSM6DSV16X_HAODR_CFG, (uint8_t *)&haodr, 1);
 8002a8c:	f107 020c 	add.w	r2, r7, #12
 8002a90:	2301      	movs	r3, #1
 8002a92:	2162      	movs	r1, #98	@ 0x62
 8002a94:	6878      	ldr	r0, [r7, #4]
 8002a96:	f7ff fe6f 	bl	8002778 <lsm6dsv16x_read_reg>
 8002a9a:	4602      	mov	r2, r0
 8002a9c:	697b      	ldr	r3, [r7, #20]
 8002a9e:	4413      	add	r3, r2
 8002aa0:	617b      	str	r3, [r7, #20]
    haodr.haodr_sel = sel;
 8002aa2:	7cfb      	ldrb	r3, [r7, #19]
 8002aa4:	f003 0303 	and.w	r3, r3, #3
 8002aa8:	b2da      	uxtb	r2, r3
 8002aaa:	7b3b      	ldrb	r3, [r7, #12]
 8002aac:	f362 0301 	bfi	r3, r2, #0, #2
 8002ab0:	733b      	strb	r3, [r7, #12]
    ret += lsm6dsv16x_write_reg(ctx, LSM6DSV16X_HAODR_CFG, (uint8_t *)&haodr, 1);
 8002ab2:	f107 020c 	add.w	r2, r7, #12
 8002ab6:	2301      	movs	r3, #1
 8002ab8:	2162      	movs	r1, #98	@ 0x62
 8002aba:	6878      	ldr	r0, [r7, #4]
 8002abc:	f7ff fe74 	bl	80027a8 <lsm6dsv16x_write_reg>
 8002ac0:	4602      	mov	r2, r0
 8002ac2:	697b      	ldr	r3, [r7, #20]
 8002ac4:	4413      	add	r3, r2
 8002ac6:	617b      	str	r3, [r7, #20]
  }

  return ret;
 8002ac8:	697b      	ldr	r3, [r7, #20]
}
 8002aca:	4618      	mov	r0, r3
 8002acc:	3718      	adds	r7, #24
 8002ace:	46bd      	mov	sp, r7
 8002ad0:	bd80      	pop	{r7, pc}

08002ad2 <lsm6dsv16x_gy_mode_set>:
  * @param  val      GY_HIGH_PERFORMANCE_MD, GY_HIGH_ACCURACY_ODR_MD, GY_SLEEP_MD, GY_LOW_POWER_MD,
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dsv16x_gy_mode_set(stmdev_ctx_t *ctx, lsm6dsv16x_gy_mode_t val)
{
 8002ad2:	b580      	push	{r7, lr}
 8002ad4:	b084      	sub	sp, #16
 8002ad6:	af00      	add	r7, sp, #0
 8002ad8:	6078      	str	r0, [r7, #4]
 8002ada:	460b      	mov	r3, r1
 8002adc:	70fb      	strb	r3, [r7, #3]
  lsm6dsv16x_ctrl2_t ctrl2;
  int32_t ret;

  ret = lsm6dsv16x_read_reg(ctx, LSM6DSV16X_CTRL2, (uint8_t *)&ctrl2, 1);
 8002ade:	f107 0208 	add.w	r2, r7, #8
 8002ae2:	2301      	movs	r3, #1
 8002ae4:	2111      	movs	r1, #17
 8002ae6:	6878      	ldr	r0, [r7, #4]
 8002ae8:	f7ff fe46 	bl	8002778 <lsm6dsv16x_read_reg>
 8002aec:	60f8      	str	r0, [r7, #12]
  if (ret == 0)
 8002aee:	68fb      	ldr	r3, [r7, #12]
 8002af0:	2b00      	cmp	r3, #0
 8002af2:	d10f      	bne.n	8002b14 <lsm6dsv16x_gy_mode_set+0x42>
  {
    ctrl2.op_mode_g = (uint8_t)val & 0x07U;
 8002af4:	78fb      	ldrb	r3, [r7, #3]
 8002af6:	f003 0307 	and.w	r3, r3, #7
 8002afa:	b2da      	uxtb	r2, r3
 8002afc:	7a3b      	ldrb	r3, [r7, #8]
 8002afe:	f362 1306 	bfi	r3, r2, #4, #3
 8002b02:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsv16x_write_reg(ctx, LSM6DSV16X_CTRL2, (uint8_t *)&ctrl2, 1);
 8002b04:	f107 0208 	add.w	r2, r7, #8
 8002b08:	2301      	movs	r3, #1
 8002b0a:	2111      	movs	r1, #17
 8002b0c:	6878      	ldr	r0, [r7, #4]
 8002b0e:	f7ff fe4b 	bl	80027a8 <lsm6dsv16x_write_reg>
 8002b12:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8002b14:	68fb      	ldr	r3, [r7, #12]
}
 8002b16:	4618      	mov	r0, r3
 8002b18:	3710      	adds	r7, #16
 8002b1a:	46bd      	mov	sp, r7
 8002b1c:	bd80      	pop	{r7, pc}

08002b1e <lsm6dsv16x_block_data_update_set>:
  * @param  val      Block Data Update (BDU): output registers are not updated until LSB and MSB have been read).
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dsv16x_block_data_update_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8002b1e:	b580      	push	{r7, lr}
 8002b20:	b084      	sub	sp, #16
 8002b22:	af00      	add	r7, sp, #0
 8002b24:	6078      	str	r0, [r7, #4]
 8002b26:	460b      	mov	r3, r1
 8002b28:	70fb      	strb	r3, [r7, #3]
  lsm6dsv16x_ctrl3_t ctrl3;
  int32_t ret;

  ret = lsm6dsv16x_read_reg(ctx, LSM6DSV16X_CTRL3, (uint8_t *)&ctrl3, 1);
 8002b2a:	f107 0208 	add.w	r2, r7, #8
 8002b2e:	2301      	movs	r3, #1
 8002b30:	2112      	movs	r1, #18
 8002b32:	6878      	ldr	r0, [r7, #4]
 8002b34:	f7ff fe20 	bl	8002778 <lsm6dsv16x_read_reg>
 8002b38:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8002b3a:	68fb      	ldr	r3, [r7, #12]
 8002b3c:	2b00      	cmp	r3, #0
 8002b3e:	d10f      	bne.n	8002b60 <lsm6dsv16x_block_data_update_set+0x42>
  {
    ctrl3.bdu = val;
 8002b40:	78fb      	ldrb	r3, [r7, #3]
 8002b42:	f003 0301 	and.w	r3, r3, #1
 8002b46:	b2da      	uxtb	r2, r3
 8002b48:	7a3b      	ldrb	r3, [r7, #8]
 8002b4a:	f362 1386 	bfi	r3, r2, #6, #1
 8002b4e:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsv16x_write_reg(ctx, LSM6DSV16X_CTRL3, (uint8_t *)&ctrl3, 1);
 8002b50:	f107 0208 	add.w	r2, r7, #8
 8002b54:	2301      	movs	r3, #1
 8002b56:	2112      	movs	r1, #18
 8002b58:	6878      	ldr	r0, [r7, #4]
 8002b5a:	f7ff fe25 	bl	80027a8 <lsm6dsv16x_write_reg>
 8002b5e:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8002b60:	68fb      	ldr	r3, [r7, #12]
}
 8002b62:	4618      	mov	r0, r3
 8002b64:	3710      	adds	r7, #16
 8002b66:	46bd      	mov	sp, r7
 8002b68:	bd80      	pop	{r7, pc}

08002b6a <lsm6dsv16x_odr_trig_cfg_set>:
  * @param  val      number of data in the reference period.
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dsv16x_odr_trig_cfg_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8002b6a:	b580      	push	{r7, lr}
 8002b6c:	b084      	sub	sp, #16
 8002b6e:	af00      	add	r7, sp, #0
 8002b70:	6078      	str	r0, [r7, #4]
 8002b72:	460b      	mov	r3, r1
 8002b74:	70fb      	strb	r3, [r7, #3]
  lsm6dsv16x_odr_trig_cfg_t odr_trig;
  int32_t ret;

  if (val >= 1U && val <= 3U) {
 8002b76:	78fb      	ldrb	r3, [r7, #3]
 8002b78:	2b00      	cmp	r3, #0
 8002b7a:	d005      	beq.n	8002b88 <lsm6dsv16x_odr_trig_cfg_set+0x1e>
 8002b7c:	78fb      	ldrb	r3, [r7, #3]
 8002b7e:	2b03      	cmp	r3, #3
 8002b80:	d802      	bhi.n	8002b88 <lsm6dsv16x_odr_trig_cfg_set+0x1e>
    return -1;
 8002b82:	f04f 33ff 	mov.w	r3, #4294967295
 8002b86:	e015      	b.n	8002bb4 <lsm6dsv16x_odr_trig_cfg_set+0x4a>
  }

  ret = lsm6dsv16x_read_reg(ctx, LSM6DSV16X_ODR_TRIG_CFG, (uint8_t *)&odr_trig, 1);
 8002b88:	f107 0208 	add.w	r2, r7, #8
 8002b8c:	2301      	movs	r3, #1
 8002b8e:	2106      	movs	r1, #6
 8002b90:	6878      	ldr	r0, [r7, #4]
 8002b92:	f7ff fdf1 	bl	8002778 <lsm6dsv16x_read_reg>
 8002b96:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8002b98:	68fb      	ldr	r3, [r7, #12]
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	d109      	bne.n	8002bb2 <lsm6dsv16x_odr_trig_cfg_set+0x48>
  {
    odr_trig.odr_trig_nodr = val;
 8002b9e:	78fb      	ldrb	r3, [r7, #3]
 8002ba0:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsv16x_write_reg(ctx, LSM6DSV16X_ODR_TRIG_CFG, (uint8_t *)&odr_trig, 1);
 8002ba2:	f107 0208 	add.w	r2, r7, #8
 8002ba6:	2301      	movs	r3, #1
 8002ba8:	2106      	movs	r1, #6
 8002baa:	6878      	ldr	r0, [r7, #4]
 8002bac:	f7ff fdfc 	bl	80027a8 <lsm6dsv16x_write_reg>
 8002bb0:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8002bb2:	68fb      	ldr	r3, [r7, #12]
}
 8002bb4:	4618      	mov	r0, r3
 8002bb6:	3710      	adds	r7, #16
 8002bb8:	46bd      	mov	sp, r7
 8002bba:	bd80      	pop	{r7, pc}

08002bbc <lsm6dsv16x_gy_full_scale_set>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dsv16x_gy_full_scale_set(stmdev_ctx_t *ctx,
                                     lsm6dsv16x_gy_full_scale_t val)
{
 8002bbc:	b580      	push	{r7, lr}
 8002bbe:	b084      	sub	sp, #16
 8002bc0:	af00      	add	r7, sp, #0
 8002bc2:	6078      	str	r0, [r7, #4]
 8002bc4:	460b      	mov	r3, r1
 8002bc6:	70fb      	strb	r3, [r7, #3]
  lsm6dsv16x_ctrl6_t ctrl6;
  int32_t ret;

  ret = lsm6dsv16x_read_reg(ctx, LSM6DSV16X_CTRL6, (uint8_t *)&ctrl6, 1);
 8002bc8:	f107 0208 	add.w	r2, r7, #8
 8002bcc:	2301      	movs	r3, #1
 8002bce:	2115      	movs	r1, #21
 8002bd0:	6878      	ldr	r0, [r7, #4]
 8002bd2:	f7ff fdd1 	bl	8002778 <lsm6dsv16x_read_reg>
 8002bd6:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8002bd8:	68fb      	ldr	r3, [r7, #12]
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	d10f      	bne.n	8002bfe <lsm6dsv16x_gy_full_scale_set+0x42>
  {
    ctrl6.fs_g = (uint8_t)val & 0xfu;
 8002bde:	78fb      	ldrb	r3, [r7, #3]
 8002be0:	f003 030f 	and.w	r3, r3, #15
 8002be4:	b2da      	uxtb	r2, r3
 8002be6:	7a3b      	ldrb	r3, [r7, #8]
 8002be8:	f362 0303 	bfi	r3, r2, #0, #4
 8002bec:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsv16x_write_reg(ctx, LSM6DSV16X_CTRL6, (uint8_t *)&ctrl6, 1);
 8002bee:	f107 0208 	add.w	r2, r7, #8
 8002bf2:	2301      	movs	r3, #1
 8002bf4:	2115      	movs	r1, #21
 8002bf6:	6878      	ldr	r0, [r7, #4]
 8002bf8:	f7ff fdd6 	bl	80027a8 <lsm6dsv16x_write_reg>
 8002bfc:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8002bfe:	68fb      	ldr	r3, [r7, #12]
}
 8002c00:	4618      	mov	r0, r3
 8002c02:	3710      	adds	r7, #16
 8002c04:	46bd      	mov	sp, r7
 8002c06:	bd80      	pop	{r7, pc}

08002c08 <lsm6dsv16x_xl_full_scale_set>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dsv16x_xl_full_scale_set(stmdev_ctx_t *ctx,
                                     lsm6dsv16x_xl_full_scale_t val)
{
 8002c08:	b580      	push	{r7, lr}
 8002c0a:	b084      	sub	sp, #16
 8002c0c:	af00      	add	r7, sp, #0
 8002c0e:	6078      	str	r0, [r7, #4]
 8002c10:	460b      	mov	r3, r1
 8002c12:	70fb      	strb	r3, [r7, #3]
  lsm6dsv16x_ctrl8_t ctrl8;
  int32_t ret;

  ret = lsm6dsv16x_read_reg(ctx, LSM6DSV16X_CTRL8, (uint8_t *)&ctrl8, 1);
 8002c14:	f107 0208 	add.w	r2, r7, #8
 8002c18:	2301      	movs	r3, #1
 8002c1a:	2117      	movs	r1, #23
 8002c1c:	6878      	ldr	r0, [r7, #4]
 8002c1e:	f7ff fdab 	bl	8002778 <lsm6dsv16x_read_reg>
 8002c22:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8002c24:	68fb      	ldr	r3, [r7, #12]
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	d10f      	bne.n	8002c4a <lsm6dsv16x_xl_full_scale_set+0x42>
  {
    ctrl8.fs_xl = (uint8_t)val & 0x3U;
 8002c2a:	78fb      	ldrb	r3, [r7, #3]
 8002c2c:	f003 0303 	and.w	r3, r3, #3
 8002c30:	b2da      	uxtb	r2, r3
 8002c32:	7a3b      	ldrb	r3, [r7, #8]
 8002c34:	f362 0301 	bfi	r3, r2, #0, #2
 8002c38:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsv16x_write_reg(ctx, LSM6DSV16X_CTRL8, (uint8_t *)&ctrl8, 1);
 8002c3a:	f107 0208 	add.w	r2, r7, #8
 8002c3e:	2301      	movs	r3, #1
 8002c40:	2117      	movs	r1, #23
 8002c42:	6878      	ldr	r0, [r7, #4]
 8002c44:	f7ff fdb0 	bl	80027a8 <lsm6dsv16x_write_reg>
 8002c48:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8002c4a:	68fb      	ldr	r3, [r7, #12]
}
 8002c4c:	4618      	mov	r0, r3
 8002c4e:	3710      	adds	r7, #16
 8002c50:	46bd      	mov	sp, r7
 8002c52:	bd80      	pop	{r7, pc}

08002c54 <lsm6dsv16x_pin_int1_route_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsv16x_pin_int1_route_set(stmdev_ctx_t *ctx,
                                      lsm6dsv16x_pin_int_route_t *val)
{
 8002c54:	b580      	push	{r7, lr}
 8002c56:	b086      	sub	sp, #24
 8002c58:	af00      	add	r7, sp, #0
 8002c5a:	6078      	str	r0, [r7, #4]
 8002c5c:	6039      	str	r1, [r7, #0]
  lsm6dsv16x_int1_ctrl_t          int1_ctrl;
  lsm6dsv16x_md1_cfg_t            md1_cfg;
  int32_t ret;

  ret = lsm6dsv16x_read_reg(ctx, LSM6DSV16X_INT1_CTRL, (uint8_t *)&int1_ctrl, 1);
 8002c5e:	f107 0210 	add.w	r2, r7, #16
 8002c62:	2301      	movs	r3, #1
 8002c64:	210d      	movs	r1, #13
 8002c66:	6878      	ldr	r0, [r7, #4]
 8002c68:	f7ff fd86 	bl	8002778 <lsm6dsv16x_read_reg>
 8002c6c:	6178      	str	r0, [r7, #20]
  if (ret != 0) { return ret; }
 8002c6e:	697b      	ldr	r3, [r7, #20]
 8002c70:	2b00      	cmp	r3, #0
 8002c72:	d001      	beq.n	8002c78 <lsm6dsv16x_pin_int1_route_set+0x24>
 8002c74:	697b      	ldr	r3, [r7, #20]
 8002c76:	e0a0      	b.n	8002dba <lsm6dsv16x_pin_int1_route_set+0x166>

  int1_ctrl.int1_drdy_xl       = val->drdy_xl;
 8002c78:	683b      	ldr	r3, [r7, #0]
 8002c7a:	781b      	ldrb	r3, [r3, #0]
 8002c7c:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8002c80:	b2da      	uxtb	r2, r3
 8002c82:	7c3b      	ldrb	r3, [r7, #16]
 8002c84:	f362 0300 	bfi	r3, r2, #0, #1
 8002c88:	743b      	strb	r3, [r7, #16]
  int1_ctrl.int1_drdy_g        = val->drdy_g;
 8002c8a:	683b      	ldr	r3, [r7, #0]
 8002c8c:	781b      	ldrb	r3, [r3, #0]
 8002c8e:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8002c92:	b2da      	uxtb	r2, r3
 8002c94:	7c3b      	ldrb	r3, [r7, #16]
 8002c96:	f362 0341 	bfi	r3, r2, #1, #1
 8002c9a:	743b      	strb	r3, [r7, #16]
  int1_ctrl.int1_fifo_th       = val->fifo_th;
 8002c9c:	683b      	ldr	r3, [r7, #0]
 8002c9e:	781b      	ldrb	r3, [r3, #0]
 8002ca0:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8002ca4:	b2da      	uxtb	r2, r3
 8002ca6:	7c3b      	ldrb	r3, [r7, #16]
 8002ca8:	f362 03c3 	bfi	r3, r2, #3, #1
 8002cac:	743b      	strb	r3, [r7, #16]
  int1_ctrl.int1_fifo_ovr      = val->fifo_ovr;
 8002cae:	683b      	ldr	r3, [r7, #0]
 8002cb0:	781b      	ldrb	r3, [r3, #0]
 8002cb2:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8002cb6:	b2da      	uxtb	r2, r3
 8002cb8:	7c3b      	ldrb	r3, [r7, #16]
 8002cba:	f362 1304 	bfi	r3, r2, #4, #1
 8002cbe:	743b      	strb	r3, [r7, #16]
  int1_ctrl.int1_fifo_full     = val->fifo_full;
 8002cc0:	683b      	ldr	r3, [r7, #0]
 8002cc2:	781b      	ldrb	r3, [r3, #0]
 8002cc4:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8002cc8:	b2da      	uxtb	r2, r3
 8002cca:	7c3b      	ldrb	r3, [r7, #16]
 8002ccc:	f362 1345 	bfi	r3, r2, #5, #1
 8002cd0:	743b      	strb	r3, [r7, #16]
  int1_ctrl.int1_cnt_bdr       = val->cnt_bdr;
 8002cd2:	683b      	ldr	r3, [r7, #0]
 8002cd4:	781b      	ldrb	r3, [r3, #0]
 8002cd6:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8002cda:	b2da      	uxtb	r2, r3
 8002cdc:	7c3b      	ldrb	r3, [r7, #16]
 8002cde:	f362 1386 	bfi	r3, r2, #6, #1
 8002ce2:	743b      	strb	r3, [r7, #16]

  ret = lsm6dsv16x_write_reg(ctx, LSM6DSV16X_INT1_CTRL, (uint8_t *)&int1_ctrl, 1);
 8002ce4:	f107 0210 	add.w	r2, r7, #16
 8002ce8:	2301      	movs	r3, #1
 8002cea:	210d      	movs	r1, #13
 8002cec:	6878      	ldr	r0, [r7, #4]
 8002cee:	f7ff fd5b 	bl	80027a8 <lsm6dsv16x_write_reg>
 8002cf2:	6178      	str	r0, [r7, #20]
  if (ret != 0) { return ret; }
 8002cf4:	697b      	ldr	r3, [r7, #20]
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	d001      	beq.n	8002cfe <lsm6dsv16x_pin_int1_route_set+0xaa>
 8002cfa:	697b      	ldr	r3, [r7, #20]
 8002cfc:	e05d      	b.n	8002dba <lsm6dsv16x_pin_int1_route_set+0x166>

  ret = lsm6dsv16x_read_reg(ctx, LSM6DSV16X_MD1_CFG, (uint8_t *)&md1_cfg, 1);
 8002cfe:	f107 020c 	add.w	r2, r7, #12
 8002d02:	2301      	movs	r3, #1
 8002d04:	215e      	movs	r1, #94	@ 0x5e
 8002d06:	6878      	ldr	r0, [r7, #4]
 8002d08:	f7ff fd36 	bl	8002778 <lsm6dsv16x_read_reg>
 8002d0c:	6178      	str	r0, [r7, #20]
  if (ret != 0) { return ret; }
 8002d0e:	697b      	ldr	r3, [r7, #20]
 8002d10:	2b00      	cmp	r3, #0
 8002d12:	d001      	beq.n	8002d18 <lsm6dsv16x_pin_int1_route_set+0xc4>
 8002d14:	697b      	ldr	r3, [r7, #20]
 8002d16:	e050      	b.n	8002dba <lsm6dsv16x_pin_int1_route_set+0x166>

  md1_cfg.int1_shub            = val->shub;
 8002d18:	683b      	ldr	r3, [r7, #0]
 8002d1a:	785b      	ldrb	r3, [r3, #1]
 8002d1c:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8002d20:	b2da      	uxtb	r2, r3
 8002d22:	7b3b      	ldrb	r3, [r7, #12]
 8002d24:	f362 0300 	bfi	r3, r2, #0, #1
 8002d28:	733b      	strb	r3, [r7, #12]
  md1_cfg.int1_emb_func        = val->emb_func;
 8002d2a:	683b      	ldr	r3, [r7, #0]
 8002d2c:	785b      	ldrb	r3, [r3, #1]
 8002d2e:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8002d32:	b2da      	uxtb	r2, r3
 8002d34:	7b3b      	ldrb	r3, [r7, #12]
 8002d36:	f362 0341 	bfi	r3, r2, #1, #1
 8002d3a:	733b      	strb	r3, [r7, #12]
  md1_cfg.int1_6d              = val->sixd;
 8002d3c:	683b      	ldr	r3, [r7, #0]
 8002d3e:	785b      	ldrb	r3, [r3, #1]
 8002d40:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8002d44:	b2da      	uxtb	r2, r3
 8002d46:	7b3b      	ldrb	r3, [r7, #12]
 8002d48:	f362 0382 	bfi	r3, r2, #2, #1
 8002d4c:	733b      	strb	r3, [r7, #12]
  md1_cfg.int1_single_tap      = val->single_tap;
 8002d4e:	683b      	ldr	r3, [r7, #0]
 8002d50:	785b      	ldrb	r3, [r3, #1]
 8002d52:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8002d56:	b2da      	uxtb	r2, r3
 8002d58:	7b3b      	ldrb	r3, [r7, #12]
 8002d5a:	f362 1386 	bfi	r3, r2, #6, #1
 8002d5e:	733b      	strb	r3, [r7, #12]
  md1_cfg.int1_double_tap      = val->double_tap;
 8002d60:	683b      	ldr	r3, [r7, #0]
 8002d62:	785b      	ldrb	r3, [r3, #1]
 8002d64:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8002d68:	b2da      	uxtb	r2, r3
 8002d6a:	7b3b      	ldrb	r3, [r7, #12]
 8002d6c:	f362 03c3 	bfi	r3, r2, #3, #1
 8002d70:	733b      	strb	r3, [r7, #12]
  md1_cfg.int1_wu              = val->wakeup;
 8002d72:	683b      	ldr	r3, [r7, #0]
 8002d74:	785b      	ldrb	r3, [r3, #1]
 8002d76:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8002d7a:	b2da      	uxtb	r2, r3
 8002d7c:	7b3b      	ldrb	r3, [r7, #12]
 8002d7e:	f362 1345 	bfi	r3, r2, #5, #1
 8002d82:	733b      	strb	r3, [r7, #12]
  md1_cfg.int1_ff              = val->freefall;
 8002d84:	683b      	ldr	r3, [r7, #0]
 8002d86:	785b      	ldrb	r3, [r3, #1]
 8002d88:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8002d8c:	b2da      	uxtb	r2, r3
 8002d8e:	7b3b      	ldrb	r3, [r7, #12]
 8002d90:	f362 1304 	bfi	r3, r2, #4, #1
 8002d94:	733b      	strb	r3, [r7, #12]
  md1_cfg.int1_sleep_change    = val->sleep_change;
 8002d96:	683b      	ldr	r3, [r7, #0]
 8002d98:	789b      	ldrb	r3, [r3, #2]
 8002d9a:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8002d9e:	b2da      	uxtb	r2, r3
 8002da0:	7b3b      	ldrb	r3, [r7, #12]
 8002da2:	f362 13c7 	bfi	r3, r2, #7, #1
 8002da6:	733b      	strb	r3, [r7, #12]

  ret = lsm6dsv16x_write_reg(ctx, LSM6DSV16X_MD1_CFG, (uint8_t *)&md1_cfg, 1);
 8002da8:	f107 020c 	add.w	r2, r7, #12
 8002dac:	2301      	movs	r3, #1
 8002dae:	215e      	movs	r1, #94	@ 0x5e
 8002db0:	6878      	ldr	r0, [r7, #4]
 8002db2:	f7ff fcf9 	bl	80027a8 <lsm6dsv16x_write_reg>
 8002db6:	6178      	str	r0, [r7, #20]

  return ret;
 8002db8:	697b      	ldr	r3, [r7, #20]
}
 8002dba:	4618      	mov	r0, r3
 8002dbc:	3718      	adds	r7, #24
 8002dbe:	46bd      	mov	sp, r7
 8002dc0:	bd80      	pop	{r7, pc}

08002dc2 <lsm6dsv16x_den_polarity_set>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dsv16x_den_polarity_set(stmdev_ctx_t *ctx,
                                    lsm6dsv16x_den_polarity_t val)
{
 8002dc2:	b580      	push	{r7, lr}
 8002dc4:	b084      	sub	sp, #16
 8002dc6:	af00      	add	r7, sp, #0
 8002dc8:	6078      	str	r0, [r7, #4]
 8002dca:	460b      	mov	r3, r1
 8002dcc:	70fb      	strb	r3, [r7, #3]
  lsm6dsv16x_ctrl4_t ctrl4;
  int32_t ret;

  ret = lsm6dsv16x_read_reg(ctx, LSM6DSV16X_CTRL4, (uint8_t *)&ctrl4, 1);
 8002dce:	f107 0208 	add.w	r2, r7, #8
 8002dd2:	2301      	movs	r3, #1
 8002dd4:	2113      	movs	r1, #19
 8002dd6:	6878      	ldr	r0, [r7, #4]
 8002dd8:	f7ff fcce 	bl	8002778 <lsm6dsv16x_read_reg>
 8002ddc:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8002dde:	68fb      	ldr	r3, [r7, #12]
 8002de0:	2b00      	cmp	r3, #0
 8002de2:	d10f      	bne.n	8002e04 <lsm6dsv16x_den_polarity_set+0x42>
  {
    ctrl4.int2_in_lh = (uint8_t)val & 0x1U;
 8002de4:	78fb      	ldrb	r3, [r7, #3]
 8002de6:	f003 0301 	and.w	r3, r3, #1
 8002dea:	b2da      	uxtb	r2, r3
 8002dec:	7a3b      	ldrb	r3, [r7, #8]
 8002dee:	f362 0300 	bfi	r3, r2, #0, #1
 8002df2:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsv16x_write_reg(ctx, LSM6DSV16X_CTRL4, (uint8_t *)&ctrl4, 1);
 8002df4:	f107 0208 	add.w	r2, r7, #8
 8002df8:	2301      	movs	r3, #1
 8002dfa:	2113      	movs	r1, #19
 8002dfc:	6878      	ldr	r0, [r7, #4]
 8002dfe:	f7ff fcd3 	bl	80027a8 <lsm6dsv16x_write_reg>
 8002e02:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8002e04:	68fb      	ldr	r3, [r7, #12]
}
 8002e06:	4618      	mov	r0, r3
 8002e08:	3710      	adds	r7, #16
 8002e0a:	46bd      	mov	sp, r7
 8002e0c:	bd80      	pop	{r7, pc}

08002e0e <lsm6dsv16x_fifo_watermark_set>:
  * @param  val      FIFO watermark threshold (1 LSb = TAG (1 Byte) + 1 sensor (6 Bytes) written in FIFO).
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dsv16x_fifo_watermark_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8002e0e:	b580      	push	{r7, lr}
 8002e10:	b084      	sub	sp, #16
 8002e12:	af00      	add	r7, sp, #0
 8002e14:	6078      	str	r0, [r7, #4]
 8002e16:	460b      	mov	r3, r1
 8002e18:	70fb      	strb	r3, [r7, #3]
  lsm6dsv16x_fifo_ctrl1_t fifo_ctrl1;
  int32_t ret;

  ret = lsm6dsv16x_read_reg(ctx, LSM6DSV16X_FIFO_CTRL1, (uint8_t *)&fifo_ctrl1, 1);
 8002e1a:	f107 0208 	add.w	r2, r7, #8
 8002e1e:	2301      	movs	r3, #1
 8002e20:	2107      	movs	r1, #7
 8002e22:	6878      	ldr	r0, [r7, #4]
 8002e24:	f7ff fca8 	bl	8002778 <lsm6dsv16x_read_reg>
 8002e28:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8002e2a:	68fb      	ldr	r3, [r7, #12]
 8002e2c:	2b00      	cmp	r3, #0
 8002e2e:	d109      	bne.n	8002e44 <lsm6dsv16x_fifo_watermark_set+0x36>
  {
    fifo_ctrl1.wtm = val;
 8002e30:	78fb      	ldrb	r3, [r7, #3]
 8002e32:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsv16x_write_reg(ctx, LSM6DSV16X_FIFO_CTRL1, (uint8_t *)&fifo_ctrl1, 1);
 8002e34:	f107 0208 	add.w	r2, r7, #8
 8002e38:	2301      	movs	r3, #1
 8002e3a:	2107      	movs	r1, #7
 8002e3c:	6878      	ldr	r0, [r7, #4]
 8002e3e:	f7ff fcb3 	bl	80027a8 <lsm6dsv16x_write_reg>
 8002e42:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8002e44:	68fb      	ldr	r3, [r7, #12]
}
 8002e46:	4618      	mov	r0, r3
 8002e48:	3710      	adds	r7, #16
 8002e4a:	46bd      	mov	sp, r7
 8002e4c:	bd80      	pop	{r7, pc}

08002e4e <lsm6dsv16x_fifo_xl_batch_set>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dsv16x_fifo_xl_batch_set(stmdev_ctx_t *ctx,
                                     lsm6dsv16x_fifo_xl_batch_t val)
{
 8002e4e:	b580      	push	{r7, lr}
 8002e50:	b084      	sub	sp, #16
 8002e52:	af00      	add	r7, sp, #0
 8002e54:	6078      	str	r0, [r7, #4]
 8002e56:	460b      	mov	r3, r1
 8002e58:	70fb      	strb	r3, [r7, #3]
  lsm6dsv16x_fifo_ctrl3_t fifo_ctrl3;
  int32_t ret;

  ret = lsm6dsv16x_read_reg(ctx, LSM6DSV16X_FIFO_CTRL3, (uint8_t *)&fifo_ctrl3, 1);
 8002e5a:	f107 0208 	add.w	r2, r7, #8
 8002e5e:	2301      	movs	r3, #1
 8002e60:	2109      	movs	r1, #9
 8002e62:	6878      	ldr	r0, [r7, #4]
 8002e64:	f7ff fc88 	bl	8002778 <lsm6dsv16x_read_reg>
 8002e68:	60f8      	str	r0, [r7, #12]
  if (ret == 0)
 8002e6a:	68fb      	ldr	r3, [r7, #12]
 8002e6c:	2b00      	cmp	r3, #0
 8002e6e:	d10f      	bne.n	8002e90 <lsm6dsv16x_fifo_xl_batch_set+0x42>
  {
    fifo_ctrl3.bdr_xl = (uint8_t)val & 0xFu;
 8002e70:	78fb      	ldrb	r3, [r7, #3]
 8002e72:	f003 030f 	and.w	r3, r3, #15
 8002e76:	b2da      	uxtb	r2, r3
 8002e78:	7a3b      	ldrb	r3, [r7, #8]
 8002e7a:	f362 0303 	bfi	r3, r2, #0, #4
 8002e7e:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsv16x_write_reg(ctx, LSM6DSV16X_FIFO_CTRL3, (uint8_t *)&fifo_ctrl3, 1);
 8002e80:	f107 0208 	add.w	r2, r7, #8
 8002e84:	2301      	movs	r3, #1
 8002e86:	2109      	movs	r1, #9
 8002e88:	6878      	ldr	r0, [r7, #4]
 8002e8a:	f7ff fc8d 	bl	80027a8 <lsm6dsv16x_write_reg>
 8002e8e:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8002e90:	68fb      	ldr	r3, [r7, #12]
}
 8002e92:	4618      	mov	r0, r3
 8002e94:	3710      	adds	r7, #16
 8002e96:	46bd      	mov	sp, r7
 8002e98:	bd80      	pop	{r7, pc}

08002e9a <lsm6dsv16x_fifo_gy_batch_set>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dsv16x_fifo_gy_batch_set(stmdev_ctx_t *ctx,
                                     lsm6dsv16x_fifo_gy_batch_t val)
{
 8002e9a:	b580      	push	{r7, lr}
 8002e9c:	b084      	sub	sp, #16
 8002e9e:	af00      	add	r7, sp, #0
 8002ea0:	6078      	str	r0, [r7, #4]
 8002ea2:	460b      	mov	r3, r1
 8002ea4:	70fb      	strb	r3, [r7, #3]
  lsm6dsv16x_fifo_ctrl3_t fifo_ctrl3;
  int32_t ret;

  ret = lsm6dsv16x_read_reg(ctx, LSM6DSV16X_FIFO_CTRL3, (uint8_t *)&fifo_ctrl3, 1);
 8002ea6:	f107 0208 	add.w	r2, r7, #8
 8002eaa:	2301      	movs	r3, #1
 8002eac:	2109      	movs	r1, #9
 8002eae:	6878      	ldr	r0, [r7, #4]
 8002eb0:	f7ff fc62 	bl	8002778 <lsm6dsv16x_read_reg>
 8002eb4:	60f8      	str	r0, [r7, #12]
  if (ret == 0)
 8002eb6:	68fb      	ldr	r3, [r7, #12]
 8002eb8:	2b00      	cmp	r3, #0
 8002eba:	d10f      	bne.n	8002edc <lsm6dsv16x_fifo_gy_batch_set+0x42>
  {
    fifo_ctrl3.bdr_gy = (uint8_t)val & 0x0Fu;
 8002ebc:	78fb      	ldrb	r3, [r7, #3]
 8002ebe:	f003 030f 	and.w	r3, r3, #15
 8002ec2:	b2da      	uxtb	r2, r3
 8002ec4:	7a3b      	ldrb	r3, [r7, #8]
 8002ec6:	f362 1307 	bfi	r3, r2, #4, #4
 8002eca:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsv16x_write_reg(ctx, LSM6DSV16X_FIFO_CTRL3, (uint8_t *)&fifo_ctrl3, 1);
 8002ecc:	f107 0208 	add.w	r2, r7, #8
 8002ed0:	2301      	movs	r3, #1
 8002ed2:	2109      	movs	r1, #9
 8002ed4:	6878      	ldr	r0, [r7, #4]
 8002ed6:	f7ff fc67 	bl	80027a8 <lsm6dsv16x_write_reg>
 8002eda:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8002edc:	68fb      	ldr	r3, [r7, #12]
}
 8002ede:	4618      	mov	r0, r3
 8002ee0:	3710      	adds	r7, #16
 8002ee2:	46bd      	mov	sp, r7
 8002ee4:	bd80      	pop	{r7, pc}

08002ee6 <lsm6dsv16x_fifo_mode_set>:
  * @param  val      BYPASS_MODE, FIFO_MODE, STREAM_WTM_TO_FULL_MODE, STREAM_TO_FIFO_MODE, BYPASS_TO_STREAM_MODE, STREAM_MODE, BYPASS_TO_FIFO_MODE,
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dsv16x_fifo_mode_set(stmdev_ctx_t *ctx, lsm6dsv16x_fifo_mode_t val)
{
 8002ee6:	b580      	push	{r7, lr}
 8002ee8:	b084      	sub	sp, #16
 8002eea:	af00      	add	r7, sp, #0
 8002eec:	6078      	str	r0, [r7, #4]
 8002eee:	460b      	mov	r3, r1
 8002ef0:	70fb      	strb	r3, [r7, #3]
  lsm6dsv16x_fifo_ctrl4_t fifo_ctrl4;
  int32_t ret;

  ret = lsm6dsv16x_read_reg(ctx, LSM6DSV16X_FIFO_CTRL4, (uint8_t *)&fifo_ctrl4, 1);
 8002ef2:	f107 0208 	add.w	r2, r7, #8
 8002ef6:	2301      	movs	r3, #1
 8002ef8:	210a      	movs	r1, #10
 8002efa:	6878      	ldr	r0, [r7, #4]
 8002efc:	f7ff fc3c 	bl	8002778 <lsm6dsv16x_read_reg>
 8002f00:	60f8      	str	r0, [r7, #12]
  if (ret == 0)
 8002f02:	68fb      	ldr	r3, [r7, #12]
 8002f04:	2b00      	cmp	r3, #0
 8002f06:	d10f      	bne.n	8002f28 <lsm6dsv16x_fifo_mode_set+0x42>
  {
    fifo_ctrl4.fifo_mode = (uint8_t)val & 0x07U;
 8002f08:	78fb      	ldrb	r3, [r7, #3]
 8002f0a:	f003 0307 	and.w	r3, r3, #7
 8002f0e:	b2da      	uxtb	r2, r3
 8002f10:	7a3b      	ldrb	r3, [r7, #8]
 8002f12:	f362 0302 	bfi	r3, r2, #0, #3
 8002f16:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsv16x_write_reg(ctx, LSM6DSV16X_FIFO_CTRL4, (uint8_t *)&fifo_ctrl4, 1);
 8002f18:	f107 0208 	add.w	r2, r7, #8
 8002f1c:	2301      	movs	r3, #1
 8002f1e:	210a      	movs	r1, #10
 8002f20:	6878      	ldr	r0, [r7, #4]
 8002f22:	f7ff fc41 	bl	80027a8 <lsm6dsv16x_write_reg>
 8002f26:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8002f28:	68fb      	ldr	r3, [r7, #12]
}
 8002f2a:	4618      	mov	r0, r3
 8002f2c:	3710      	adds	r7, #16
 8002f2e:	46bd      	mov	sp, r7
 8002f30:	bd80      	pop	{r7, pc}

08002f32 <lsm6dsv16x_ui_i2c_i3c_mode_set>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dsv16x_ui_i2c_i3c_mode_set(stmdev_ctx_t *ctx,
                                       lsm6dsv16x_ui_i2c_i3c_mode_t val)
{
 8002f32:	b580      	push	{r7, lr}
 8002f34:	b084      	sub	sp, #16
 8002f36:	af00      	add	r7, sp, #0
 8002f38:	6078      	str	r0, [r7, #4]
 8002f3a:	460b      	mov	r3, r1
 8002f3c:	70fb      	strb	r3, [r7, #3]
  lsm6dsv16x_if_cfg_t if_cfg;
  int32_t ret;

  ret = lsm6dsv16x_read_reg(ctx, LSM6DSV16X_IF_CFG, (uint8_t *)&if_cfg, 1);
 8002f3e:	f107 0208 	add.w	r2, r7, #8
 8002f42:	2301      	movs	r3, #1
 8002f44:	2103      	movs	r1, #3
 8002f46:	6878      	ldr	r0, [r7, #4]
 8002f48:	f7ff fc16 	bl	8002778 <lsm6dsv16x_read_reg>
 8002f4c:	60f8      	str	r0, [r7, #12]
  if (ret == 0)
 8002f4e:	68fb      	ldr	r3, [r7, #12]
 8002f50:	2b00      	cmp	r3, #0
 8002f52:	d10f      	bne.n	8002f74 <lsm6dsv16x_ui_i2c_i3c_mode_set+0x42>
  {
    if_cfg.i2c_i3c_disable = (uint8_t)val & 0x1U;
 8002f54:	78fb      	ldrb	r3, [r7, #3]
 8002f56:	f003 0301 	and.w	r3, r3, #1
 8002f5a:	b2da      	uxtb	r2, r3
 8002f5c:	7a3b      	ldrb	r3, [r7, #8]
 8002f5e:	f362 0300 	bfi	r3, r2, #0, #1
 8002f62:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsv16x_write_reg(ctx, LSM6DSV16X_IF_CFG, (uint8_t *)&if_cfg, 1);
 8002f64:	f107 0208 	add.w	r2, r7, #8
 8002f68:	2301      	movs	r3, #1
 8002f6a:	2103      	movs	r1, #3
 8002f6c:	6878      	ldr	r0, [r7, #4]
 8002f6e:	f7ff fc1b 	bl	80027a8 <lsm6dsv16x_write_reg>
 8002f72:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8002f74:	68fb      	ldr	r3, [r7, #12]
}
 8002f76:	4618      	mov	r0, r3
 8002f78:	3710      	adds	r7, #16
 8002f7a:	46bd      	mov	sp, r7
 8002f7c:	bd80      	pop	{r7, pc}

08002f7e <acc_write>:
#include "global_variables.h"
#include "peripherals.h"

/* -------------SCRITTURA ACCELEROMETRO-------------*/
int32_t acc_write(void *handle, uint8_t reg, const uint8_t *bufp, uint16_t len)
{
 8002f7e:	b580      	push	{r7, lr}
 8002f80:	b084      	sub	sp, #16
 8002f82:	af00      	add	r7, sp, #0
 8002f84:	60f8      	str	r0, [r7, #12]
 8002f86:	607a      	str	r2, [r7, #4]
 8002f88:	461a      	mov	r2, r3
 8002f8a:	460b      	mov	r3, r1
 8002f8c:	72fb      	strb	r3, [r7, #11]
 8002f8e:	4613      	mov	r3, r2
 8002f90:	813b      	strh	r3, [r7, #8]
	HAL_GPIO_WritePin(ACC_nCS_GPIO_Port, ACC_nCS_Pin, GPIO_PIN_RESET);
 8002f92:	2200      	movs	r2, #0
 8002f94:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8002f98:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002f9c:	f008 fa66 	bl	800b46c <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(handle, &reg, 1, 1000);
 8002fa0:	f107 010b 	add.w	r1, r7, #11
 8002fa4:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002fa8:	2201      	movs	r2, #1
 8002faa:	68f8      	ldr	r0, [r7, #12]
 8002fac:	f00b fce7 	bl	800e97e <HAL_SPI_Transmit>
	HAL_SPI_Transmit(handle, (uint8_t*) bufp, len, 1000);
 8002fb0:	893a      	ldrh	r2, [r7, #8]
 8002fb2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002fb6:	6879      	ldr	r1, [r7, #4]
 8002fb8:	68f8      	ldr	r0, [r7, #12]
 8002fba:	f00b fce0 	bl	800e97e <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(ACC_nCS_GPIO_Port, ACC_nCS_Pin, GPIO_PIN_SET);
 8002fbe:	2201      	movs	r2, #1
 8002fc0:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8002fc4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002fc8:	f008 fa50 	bl	800b46c <HAL_GPIO_WritePin>
	return 0;
 8002fcc:	2300      	movs	r3, #0
}
 8002fce:	4618      	mov	r0, r3
 8002fd0:	3710      	adds	r7, #16
 8002fd2:	46bd      	mov	sp, r7
 8002fd4:	bd80      	pop	{r7, pc}

08002fd6 <acc_read>:

/* -------------LETTURA ACCELEROMETRO-------------*/
int32_t acc_read(void *handle, uint8_t reg, uint8_t *bufp, uint16_t len)
{
 8002fd6:	b580      	push	{r7, lr}
 8002fd8:	b084      	sub	sp, #16
 8002fda:	af00      	add	r7, sp, #0
 8002fdc:	60f8      	str	r0, [r7, #12]
 8002fde:	607a      	str	r2, [r7, #4]
 8002fe0:	461a      	mov	r2, r3
 8002fe2:	460b      	mov	r3, r1
 8002fe4:	72fb      	strb	r3, [r7, #11]
 8002fe6:	4613      	mov	r3, r2
 8002fe8:	813b      	strh	r3, [r7, #8]
	reg |= 0x80;
 8002fea:	7afb      	ldrb	r3, [r7, #11]
 8002fec:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8002ff0:	b2db      	uxtb	r3, r3
 8002ff2:	72fb      	strb	r3, [r7, #11]
	HAL_GPIO_WritePin(ACC_nCS_GPIO_Port, ACC_nCS_Pin, GPIO_PIN_RESET);
 8002ff4:	2200      	movs	r2, #0
 8002ff6:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8002ffa:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002ffe:	f008 fa35 	bl	800b46c <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(handle, &reg, 1, 1000);
 8003002:	f107 010b 	add.w	r1, r7, #11
 8003006:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800300a:	2201      	movs	r2, #1
 800300c:	68f8      	ldr	r0, [r7, #12]
 800300e:	f00b fcb6 	bl	800e97e <HAL_SPI_Transmit>
	HAL_SPI_Receive(handle, bufp, len, 1000);
 8003012:	893a      	ldrh	r2, [r7, #8]
 8003014:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8003018:	6879      	ldr	r1, [r7, #4]
 800301a:	68f8      	ldr	r0, [r7, #12]
 800301c:	f00b fe25 	bl	800ec6a <HAL_SPI_Receive>
	HAL_GPIO_WritePin(ACC_nCS_GPIO_Port, ACC_nCS_Pin, GPIO_PIN_SET);
 8003020:	2201      	movs	r2, #1
 8003022:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8003026:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800302a:	f008 fa1f 	bl	800b46c <HAL_GPIO_WritePin>
	return 0;
 800302e:	2300      	movs	r3, #0
}
 8003030:	4618      	mov	r0, r3
 8003032:	3710      	adds	r7, #16
 8003034:	46bd      	mov	sp, r7
 8003036:	bd80      	pop	{r7, pc}

08003038 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8003038:	b5f0      	push	{r4, r5, r6, r7, lr}
 800303a:	b091      	sub	sp, #68	@ 0x44
 800303c:	af0c      	add	r7, sp, #48	@ 0x30
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800303e:	f005 ffd8 	bl	8008ff2 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8003042:	f000 f993 	bl	800336c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8003046:	f000 fe67 	bl	8003d18 <MX_GPIO_Init>
  MX_DMA_Init();
 800304a:	f000 fe37 	bl	8003cbc <MX_DMA_Init>
  MX_QUADSPI_Init();
 800304e:	f000 fab9 	bl	80035c4 <MX_QUADSPI_Init>
  MX_SPI2_Init();
 8003052:	f000 fb6f 	bl	8003734 <MX_SPI2_Init>
  MX_USART1_UART_Init();
 8003056:	f000 fe01 	bl	8003c5c <MX_USART1_UART_Init>
  MX_ADC1_Init();
 800305a:	f000 f9d9 	bl	8003410 <MX_ADC1_Init>
  MX_I2C3_Init();
 800305e:	f000 fa71 	bl	8003544 <MX_I2C3_Init>
  MX_TIM2_Init();
 8003062:	f000 fc8b 	bl	800397c <MX_TIM2_Init>
  MX_UART4_Init();
 8003066:	f000 fdc9 	bl	8003bfc <MX_UART4_Init>
  MX_TIM1_Init();
 800306a:	f000 fbdf 	bl	800382c <MX_TIM1_Init>
  MX_CRC_Init();
 800306e:	f000 fa47 	bl	8003500 <MX_CRC_Init>
  MX_TIM4_Init();
 8003072:	f000 fd4f 	bl	8003b14 <MX_TIM4_Init>
  MX_RTC_Init();
 8003076:	f000 facb 	bl	8003610 <MX_RTC_Init>
  MX_SPI3_Init();
 800307a:	f000 fb99 	bl	80037b0 <MX_SPI3_Init>
  MX_TIM3_Init();
 800307e:	f000 fcd1 	bl	8003a24 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
	System_Init();
 8003082:	f7ff f8a1 	bl	80021c8 <System_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1)
	{
		switch(state)
 8003086:	4ba8      	ldr	r3, [pc, #672]	@ (8003328 <main+0x2f0>)
 8003088:	781b      	ldrb	r3, [r3, #0]
 800308a:	2b03      	cmp	r3, #3
 800308c:	f200 8146 	bhi.w	800331c <main+0x2e4>
 8003090:	a201      	add	r2, pc, #4	@ (adr r2, 8003098 <main+0x60>)
 8003092:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003096:	bf00      	nop
 8003098:	080030a9 	.word	0x080030a9
 800309c:	08003139 	.word	0x08003139
 80030a0:	08003145 	.word	0x08003145
 80030a4:	080032f7 	.word	0x080032f7
		{
		case IDLE:
			if(flags.MQTT_Message_Rx)
 80030a8:	4ba0      	ldr	r3, [pc, #640]	@ (800332c <main+0x2f4>)
 80030aa:	781b      	ldrb	r3, [r3, #0]
 80030ac:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 80030b0:	b2db      	uxtb	r3, r3
 80030b2:	2b00      	cmp	r3, #0
 80030b4:	d006      	beq.n	80030c4 <main+0x8c>
			{
				SIM_Parse_Command();
 80030b6:	f7fe f8e5 	bl	8001284 <SIM_Parse_Command>
				flags.MQTT_Message_Rx = 0;
 80030ba:	4a9c      	ldr	r2, [pc, #624]	@ (800332c <main+0x2f4>)
 80030bc:	7813      	ldrb	r3, [r2, #0]
 80030be:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80030c2:	7013      	strb	r3, [r2, #0]
			}
			if(flags.CMD.Start_Meas)
 80030c4:	4b99      	ldr	r3, [pc, #612]	@ (800332c <main+0x2f4>)
 80030c6:	789b      	ldrb	r3, [r3, #2]
 80030c8:	f003 0320 	and.w	r3, r3, #32
 80030cc:	b2db      	uxtb	r3, r3
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	d008      	beq.n	80030e4 <main+0xac>
			{
				state = MEASURE_INIT_STATE;
 80030d2:	4b95      	ldr	r3, [pc, #596]	@ (8003328 <main+0x2f0>)
 80030d4:	2201      	movs	r2, #1
 80030d6:	701a      	strb	r2, [r3, #0]
				flags.CMD.Start_Meas = 0;
 80030d8:	4a94      	ldr	r2, [pc, #592]	@ (800332c <main+0x2f4>)
 80030da:	7893      	ldrb	r3, [r2, #2]
 80030dc:	f023 0320 	bic.w	r3, r3, #32
 80030e0:	7093      	strb	r3, [r2, #2]
			}
			else if(flags.CMD.Ping)
			{
				flags.CMD.Ping = 0;
			}
			break;
 80030e2:	e11d      	b.n	8003320 <main+0x2e8>
			else if(flags.CMD.Set_Config)
 80030e4:	4b91      	ldr	r3, [pc, #580]	@ (800332c <main+0x2f4>)
 80030e6:	789b      	ldrb	r3, [r3, #2]
 80030e8:	f003 0310 	and.w	r3, r3, #16
 80030ec:	b2db      	uxtb	r3, r3
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	d007      	beq.n	8003102 <main+0xca>
				Apply_Config();
 80030f2:	f001 fd79 	bl	8004be8 <Apply_Config>
				flags.CMD.Set_Config = 0;
 80030f6:	4a8d      	ldr	r2, [pc, #564]	@ (800332c <main+0x2f4>)
 80030f8:	7893      	ldrb	r3, [r2, #2]
 80030fa:	f023 0310 	bic.w	r3, r3, #16
 80030fe:	7093      	strb	r3, [r2, #2]
			break;
 8003100:	e10e      	b.n	8003320 <main+0x2e8>
			else if(flags.CMD.Start_OTA)
 8003102:	4b8a      	ldr	r3, [pc, #552]	@ (800332c <main+0x2f4>)
 8003104:	789b      	ldrb	r3, [r3, #2]
 8003106:	f003 0304 	and.w	r3, r3, #4
 800310a:	b2db      	uxtb	r3, r3
 800310c:	2b00      	cmp	r3, #0
 800310e:	d005      	beq.n	800311c <main+0xe4>
				flags.CMD.Start_OTA = 0;
 8003110:	4a86      	ldr	r2, [pc, #536]	@ (800332c <main+0x2f4>)
 8003112:	7893      	ldrb	r3, [r2, #2]
 8003114:	f023 0304 	bic.w	r3, r3, #4
 8003118:	7093      	strb	r3, [r2, #2]
			break;
 800311a:	e101      	b.n	8003320 <main+0x2e8>
			else if(flags.CMD.Ping)
 800311c:	4b83      	ldr	r3, [pc, #524]	@ (800332c <main+0x2f4>)
 800311e:	789b      	ldrb	r3, [r3, #2]
 8003120:	f003 0308 	and.w	r3, r3, #8
 8003124:	b2db      	uxtb	r3, r3
 8003126:	2b00      	cmp	r3, #0
 8003128:	f000 80fa 	beq.w	8003320 <main+0x2e8>
				flags.CMD.Ping = 0;
 800312c:	4a7f      	ldr	r2, [pc, #508]	@ (800332c <main+0x2f4>)
 800312e:	7893      	ldrb	r3, [r2, #2]
 8003130:	f023 0308 	bic.w	r3, r3, #8
 8003134:	7093      	strb	r3, [r2, #2]
			break;
 8003136:	e0f3      	b.n	8003320 <main+0x2e8>
		case MEASURE_INIT_STATE:
			Start_Measure();
 8003138:	f001 f904 	bl	8004344 <Start_Measure>
			state = MEASURING_STATE;
 800313c:	4b7a      	ldr	r3, [pc, #488]	@ (8003328 <main+0x2f0>)
 800313e:	2202      	movs	r2, #2
 8003140:	701a      	strb	r2, [r3, #0]
			break;
 8003142:	e0f0      	b.n	8003326 <main+0x2ee>

		case MEASURING_STATE:
			if(flags.ADC_Complete && flags.ACC_Complete)
 8003144:	4b79      	ldr	r3, [pc, #484]	@ (800332c <main+0x2f4>)
 8003146:	781b      	ldrb	r3, [r3, #0]
 8003148:	f003 0301 	and.w	r3, r3, #1
 800314c:	b2db      	uxtb	r3, r3
 800314e:	2b00      	cmp	r3, #0
 8003150:	f000 80e8 	beq.w	8003324 <main+0x2ec>
 8003154:	4b75      	ldr	r3, [pc, #468]	@ (800332c <main+0x2f4>)
 8003156:	781b      	ldrb	r3, [r3, #0]
 8003158:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800315c:	b2db      	uxtb	r3, r3
 800315e:	2b00      	cmp	r3, #0
 8003160:	f000 80e0 	beq.w	8003324 <main+0x2ec>
			{
				Save_Data();
 8003164:	f000 fed4 	bl	8003f10 <Save_Data>
				if(flags.BC_Interrupt)
 8003168:	4b70      	ldr	r3, [pc, #448]	@ (800332c <main+0x2f4>)
 800316a:	781b      	ldrb	r3, [r3, #0]
 800316c:	f003 0320 	and.w	r3, r3, #32
 8003170:	b2db      	uxtb	r3, r3
 8003172:	2b00      	cmp	r3, #0
 8003174:	d010      	beq.n	8003198 <main+0x160>
				{
					BC_Read_Flags(&sys.BC_Flags);
 8003176:	486e      	ldr	r0, [pc, #440]	@ (8003330 <main+0x2f8>)
 8003178:	f7fe fb54 	bl	8001824 <BC_Read_Flags>
					BC_Manage_Interrupts(sys.BC_Flags);
 800317c:	4b6d      	ldr	r3, [pc, #436]	@ (8003334 <main+0x2fc>)
 800317e:	f503 5382 	add.w	r3, r3, #4160	@ 0x1040
 8003182:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8003186:	4610      	mov	r0, r2
 8003188:	4619      	mov	r1, r3
 800318a:	f7fe fbd3 	bl	8001934 <BC_Manage_Interrupts>
					flags.BC_Interrupt = 0;
 800318e:	4a67      	ldr	r2, [pc, #412]	@ (800332c <main+0x2f4>)
 8003190:	7813      	ldrb	r3, [r2, #0]
 8003192:	f023 0320 	bic.w	r3, r3, #32
 8003196:	7013      	strb	r3, [r2, #0]
				}
				if(flags.MQTT_Message_Rx)
 8003198:	4b64      	ldr	r3, [pc, #400]	@ (800332c <main+0x2f4>)
 800319a:	781b      	ldrb	r3, [r3, #0]
 800319c:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 80031a0:	b2db      	uxtb	r3, r3
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	d006      	beq.n	80031b4 <main+0x17c>
				{
					SIM_Parse_Command();
 80031a6:	f7fe f86d 	bl	8001284 <SIM_Parse_Command>
					flags.MQTT_Message_Rx = 0;
 80031aa:	4a60      	ldr	r2, [pc, #384]	@ (800332c <main+0x2f4>)
 80031ac:	7813      	ldrb	r3, [r2, #0]
 80031ae:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80031b2:	7013      	strb	r3, [r2, #0]
				}
				if(flags.CMD.Data_Request)
 80031b4:	4b5d      	ldr	r3, [pc, #372]	@ (800332c <main+0x2f4>)
 80031b6:	789b      	ldrb	r3, [r3, #2]
 80031b8:	f003 0301 	and.w	r3, r3, #1
 80031bc:	b2db      	uxtb	r3, r3
 80031be:	2b00      	cmp	r3, #0
 80031c0:	d04c      	beq.n	800325c <main+0x224>
				{
					sprintf(MQTT_Logging, "%u:%u,%u,%u,%u,%u,%u,%u,%u,%u,%u,%u,%u", config.device_id, Last_Pressure, Last_Volume, Last_Acceleration.x, Last_Acceleration.y, Last_Acceleration.z, Supply.i1, Supply.i2, Supply.i3, Supply.v1, Supply.v2, Supply.v3, Temperature);
 80031c2:	4b5d      	ldr	r3, [pc, #372]	@ (8003338 <main+0x300>)
 80031c4:	781b      	ldrb	r3, [r3, #0]
 80031c6:	469c      	mov	ip, r3
 80031c8:	4b5c      	ldr	r3, [pc, #368]	@ (800333c <main+0x304>)
 80031ca:	881b      	ldrh	r3, [r3, #0]
 80031cc:	469e      	mov	lr, r3
 80031ce:	4b5c      	ldr	r3, [pc, #368]	@ (8003340 <main+0x308>)
 80031d0:	881b      	ldrh	r3, [r3, #0]
 80031d2:	461a      	mov	r2, r3
 80031d4:	4b5b      	ldr	r3, [pc, #364]	@ (8003344 <main+0x30c>)
 80031d6:	885b      	ldrh	r3, [r3, #2]
 80031d8:	4619      	mov	r1, r3
 80031da:	4b5a      	ldr	r3, [pc, #360]	@ (8003344 <main+0x30c>)
 80031dc:	889b      	ldrh	r3, [r3, #4]
 80031de:	4618      	mov	r0, r3
 80031e0:	4b58      	ldr	r3, [pc, #352]	@ (8003344 <main+0x30c>)
 80031e2:	88db      	ldrh	r3, [r3, #6]
 80031e4:	461c      	mov	r4, r3
 80031e6:	4b58      	ldr	r3, [pc, #352]	@ (8003348 <main+0x310>)
 80031e8:	88db      	ldrh	r3, [r3, #6]
 80031ea:	461d      	mov	r5, r3
 80031ec:	4b56      	ldr	r3, [pc, #344]	@ (8003348 <main+0x310>)
 80031ee:	891b      	ldrh	r3, [r3, #8]
 80031f0:	461e      	mov	r6, r3
 80031f2:	4b55      	ldr	r3, [pc, #340]	@ (8003348 <main+0x310>)
 80031f4:	895b      	ldrh	r3, [r3, #10]
 80031f6:	60fb      	str	r3, [r7, #12]
 80031f8:	4b53      	ldr	r3, [pc, #332]	@ (8003348 <main+0x310>)
 80031fa:	881b      	ldrh	r3, [r3, #0]
 80031fc:	60bb      	str	r3, [r7, #8]
 80031fe:	4b52      	ldr	r3, [pc, #328]	@ (8003348 <main+0x310>)
 8003200:	885b      	ldrh	r3, [r3, #2]
 8003202:	607b      	str	r3, [r7, #4]
 8003204:	4b50      	ldr	r3, [pc, #320]	@ (8003348 <main+0x310>)
 8003206:	889b      	ldrh	r3, [r3, #4]
 8003208:	603b      	str	r3, [r7, #0]
 800320a:	4b50      	ldr	r3, [pc, #320]	@ (800334c <main+0x314>)
 800320c:	881b      	ldrh	r3, [r3, #0]
 800320e:	930a      	str	r3, [sp, #40]	@ 0x28
 8003210:	683b      	ldr	r3, [r7, #0]
 8003212:	9309      	str	r3, [sp, #36]	@ 0x24
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	9308      	str	r3, [sp, #32]
 8003218:	68bb      	ldr	r3, [r7, #8]
 800321a:	9307      	str	r3, [sp, #28]
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	9306      	str	r3, [sp, #24]
 8003220:	9605      	str	r6, [sp, #20]
 8003222:	9504      	str	r5, [sp, #16]
 8003224:	9403      	str	r4, [sp, #12]
 8003226:	9002      	str	r0, [sp, #8]
 8003228:	9101      	str	r1, [sp, #4]
 800322a:	9200      	str	r2, [sp, #0]
 800322c:	4673      	mov	r3, lr
 800322e:	4662      	mov	r2, ip
 8003230:	4947      	ldr	r1, [pc, #284]	@ (8003350 <main+0x318>)
 8003232:	4848      	ldr	r0, [pc, #288]	@ (8003354 <main+0x31c>)
 8003234:	f00f fd84 	bl	8012d40 <siprintf>
					SIM_publish_MQTT_Message(NULL, MQTT_Logging);
 8003238:	4946      	ldr	r1, [pc, #280]	@ (8003354 <main+0x31c>)
 800323a:	2000      	movs	r0, #0
 800323c:	f7fe f986 	bl	800154c <SIM_publish_MQTT_Message>
					sys.SIM_Prompt_Status = HAL_GetTick();
 8003240:	f005 ff40 	bl	80090c4 <HAL_GetTick>
 8003244:	4603      	mov	r3, r0
 8003246:	4a3b      	ldr	r2, [pc, #236]	@ (8003334 <main+0x2fc>)
 8003248:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800324c:	f8c2 30ac 	str.w	r3, [r2, #172]	@ 0xac
					flags.CMD.Data_Request = 0;
 8003250:	4a36      	ldr	r2, [pc, #216]	@ (800332c <main+0x2f4>)
 8003252:	7893      	ldrb	r3, [r2, #2]
 8003254:	f023 0301 	bic.w	r3, r3, #1
 8003258:	7093      	strb	r3, [r2, #2]
 800325a:	e01e      	b.n	800329a <main+0x262>
				}
				else if(flags.CMD.Idle)
 800325c:	4b33      	ldr	r3, [pc, #204]	@ (800332c <main+0x2f4>)
 800325e:	789b      	ldrb	r3, [r3, #2]
 8003260:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003264:	b2db      	uxtb	r3, r3
 8003266:	2b00      	cmp	r3, #0
 8003268:	d008      	beq.n	800327c <main+0x244>
				{
					state = IDLE;
 800326a:	4b2f      	ldr	r3, [pc, #188]	@ (8003328 <main+0x2f0>)
 800326c:	2200      	movs	r2, #0
 800326e:	701a      	strb	r2, [r3, #0]
					flags.CMD.Idle = 0;
 8003270:	4a2e      	ldr	r2, [pc, #184]	@ (800332c <main+0x2f4>)
 8003272:	7893      	ldrb	r3, [r2, #2]
 8003274:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003278:	7093      	strb	r3, [r2, #2]
 800327a:	e00e      	b.n	800329a <main+0x262>
				}
				else if(flags.CMD.Measure_Request)
 800327c:	4b2b      	ldr	r3, [pc, #172]	@ (800332c <main+0x2f4>)
 800327e:	789b      	ldrb	r3, [r3, #2]
 8003280:	f003 0302 	and.w	r3, r3, #2
 8003284:	b2db      	uxtb	r3, r3
 8003286:	2b00      	cmp	r3, #0
 8003288:	d007      	beq.n	800329a <main+0x262>
				{
					state = SEND_RECORDING_STATE;
 800328a:	4b27      	ldr	r3, [pc, #156]	@ (8003328 <main+0x2f0>)
 800328c:	2203      	movs	r2, #3
 800328e:	701a      	strb	r2, [r3, #0]
					flags.CMD.Measure_Request = 0;
 8003290:	4a26      	ldr	r2, [pc, #152]	@ (800332c <main+0x2f4>)
 8003292:	7893      	ldrb	r3, [r2, #2]
 8003294:	f023 0302 	bic.w	r3, r3, #2
 8003298:	7093      	strb	r3, [r2, #2]
				}
				if(flags.MQTT_ReadytoSend)
 800329a:	4b24      	ldr	r3, [pc, #144]	@ (800332c <main+0x2f4>)
 800329c:	785b      	ldrb	r3, [r3, #1]
 800329e:	f003 0301 	and.w	r3, r3, #1
 80032a2:	b2db      	uxtb	r3, r3
 80032a4:	2b00      	cmp	r3, #0
 80032a6:	d007      	beq.n	80032b8 <main+0x280>
				{
					SIM_Send_Command_DMA(MQTT_Logging);
 80032a8:	482a      	ldr	r0, [pc, #168]	@ (8003354 <main+0x31c>)
 80032aa:	f7fd ff4f 	bl	800114c <SIM_Send_Command_DMA>
					flags.MQTT_ReadytoSend = 0;
 80032ae:	4a1f      	ldr	r2, [pc, #124]	@ (800332c <main+0x2f4>)
 80032b0:	7853      	ldrb	r3, [r2, #1]
 80032b2:	f023 0301 	bic.w	r3, r3, #1
 80032b6:	7053      	strb	r3, [r2, #1]
				}
				if(sys.SIM_Prompt_Status > 0 && (HAL_GetTick() - sys.SIM_Prompt_Status) > SIM_PROMPT_TIMEOUT_MS)
 80032b8:	4b1e      	ldr	r3, [pc, #120]	@ (8003334 <main+0x2fc>)
 80032ba:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80032be:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	d02e      	beq.n	8003324 <main+0x2ec>
 80032c6:	f005 fefd 	bl	80090c4 <HAL_GetTick>
 80032ca:	4602      	mov	r2, r0
 80032cc:	4b19      	ldr	r3, [pc, #100]	@ (8003334 <main+0x2fc>)
 80032ce:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80032d2:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 80032d6:	1ad3      	subs	r3, r2, r3
 80032d8:	f640 32b8 	movw	r2, #3000	@ 0xbb8
 80032dc:	4293      	cmp	r3, r2
 80032de:	d921      	bls.n	8003324 <main+0x2ec>
				{
					SIM_Send_Command_DMA("AT+SMCONN\r");
 80032e0:	481d      	ldr	r0, [pc, #116]	@ (8003358 <main+0x320>)
 80032e2:	f7fd ff33 	bl	800114c <SIM_Send_Command_DMA>
					sys.SIM_Prompt_Status = 0;
 80032e6:	4b13      	ldr	r3, [pc, #76]	@ (8003334 <main+0x2fc>)
 80032e8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80032ec:	461a      	mov	r2, r3
 80032ee:	2300      	movs	r3, #0
 80032f0:	f8c2 30ac 	str.w	r3, [r2, #172]	@ 0xac
				}
			}
			break;
 80032f4:	e016      	b.n	8003324 <main+0x2ec>

		case SEND_RECORDING_STATE:
			HAL_ADC_Stop_DMA(PRESSURE_ADC);
 80032f6:	4819      	ldr	r0, [pc, #100]	@ (800335c <main+0x324>)
 80032f8:	f006 fb44 	bl	8009984 <HAL_ADC_Stop_DMA>
			HAL_TIM_OC_Stop_IT(ADC_TIMER, TIM_CHANNEL_3);
 80032fc:	2108      	movs	r1, #8
 80032fe:	4818      	ldr	r0, [pc, #96]	@ (8003360 <main+0x328>)
 8003300:	f00c fbc8 	bl	800fa94 <HAL_TIM_OC_Stop_IT>
			Send_Measure();
 8003304:	f001 f968 	bl	80045d8 <Send_Measure>
      HAL_UARTEx_ReceiveToIdle_DMA(LTE_UART, sim_rx_buffer, SIM_RXBUFFER_SIZE);
 8003308:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800330c:	4915      	ldr	r1, [pc, #84]	@ (8003364 <main+0x32c>)
 800330e:	4816      	ldr	r0, [pc, #88]	@ (8003368 <main+0x330>)
 8003310:	f00f fc38 	bl	8012b84 <HAL_UARTEx_ReceiveToIdle_DMA>
			state = MEASURE_INIT_STATE;
 8003314:	4b04      	ldr	r3, [pc, #16]	@ (8003328 <main+0x2f0>)
 8003316:	2201      	movs	r2, #1
 8003318:	701a      	strb	r2, [r3, #0]
			break;
 800331a:	e004      	b.n	8003326 <main+0x2ee>

		default:
			break;
 800331c:	bf00      	nop
 800331e:	e6b2      	b.n	8003086 <main+0x4e>
			break;
 8003320:	bf00      	nop
 8003322:	e6b0      	b.n	8003086 <main+0x4e>
			break;
 8003324:	bf00      	nop
		switch(state)
 8003326:	e6ae      	b.n	8003086 <main+0x4e>
 8003328:	200005b4 	.word	0x200005b4
 800332c:	20001a50 	.word	0x20001a50
 8003330:	200015f0 	.word	0x200015f0
 8003334:	200005b8 	.word	0x200005b8
 8003338:	20001a54 	.word	0x20001a54
 800333c:	200044b4 	.word	0x200044b4
 8003340:	200044b6 	.word	0x200044b6
 8003344:	200044b8 	.word	0x200044b8
 8003348:	20003be4 	.word	0x20003be4
 800334c:	200044c0 	.word	0x200044c0
 8003350:	080142b4 	.word	0x080142b4
 8003354:	200044c4 	.word	0x200044c4
 8003358:	080142dc 	.word	0x080142dc
 800335c:	20000090 	.word	0x20000090
 8003360:	200003c8 	.word	0x200003c8
 8003364:	20004cd8 	.word	0x20004cd8
 8003368:	2000049c 	.word	0x2000049c

0800336c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800336c:	b580      	push	{r7, lr}
 800336e:	b096      	sub	sp, #88	@ 0x58
 8003370:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003372:	f107 0314 	add.w	r3, r7, #20
 8003376:	2244      	movs	r2, #68	@ 0x44
 8003378:	2100      	movs	r1, #0
 800337a:	4618      	mov	r0, r3
 800337c:	f00f fd40 	bl	8012e00 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003380:	463b      	mov	r3, r7
 8003382:	2200      	movs	r2, #0
 8003384:	601a      	str	r2, [r3, #0]
 8003386:	605a      	str	r2, [r3, #4]
 8003388:	609a      	str	r2, [r3, #8]
 800338a:	60da      	str	r2, [r3, #12]
 800338c:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800338e:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8003392:	f008 fe79 	bl	800c088 <HAL_PWREx_ControlVoltageScaling>
 8003396:	4603      	mov	r3, r0
 8003398:	2b00      	cmp	r3, #0
 800339a:	d001      	beq.n	80033a0 <SystemClock_Config+0x34>
  {
    Error_Handler();
 800339c:	f000 fdb2 	bl	8003f04 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 80033a0:	2309      	movs	r3, #9
 80033a2:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80033a4:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80033a8:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 80033aa:	2301      	movs	r3, #1
 80033ac:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80033ae:	2302      	movs	r3, #2
 80033b0:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80033b2:	2303      	movs	r3, #3
 80033b4:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 80033b6:	2301      	movs	r3, #1
 80033b8:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 20;
 80033ba:	2314      	movs	r3, #20
 80033bc:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80033be:	2307      	movs	r3, #7
 80033c0:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80033c2:	2302      	movs	r3, #2
 80033c4:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80033c6:	2302      	movs	r3, #2
 80033c8:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80033ca:	f107 0314 	add.w	r3, r7, #20
 80033ce:	4618      	mov	r0, r3
 80033d0:	f009 fb12 	bl	800c9f8 <HAL_RCC_OscConfig>
 80033d4:	4603      	mov	r3, r0
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	d001      	beq.n	80033de <SystemClock_Config+0x72>
  {
    Error_Handler();
 80033da:	f000 fd93 	bl	8003f04 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80033de:	230f      	movs	r3, #15
 80033e0:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80033e2:	2303      	movs	r3, #3
 80033e4:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80033e6:	2300      	movs	r3, #0
 80033e8:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80033ea:	2300      	movs	r3, #0
 80033ec:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80033ee:	2300      	movs	r3, #0
 80033f0:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80033f2:	463b      	mov	r3, r7
 80033f4:	2104      	movs	r1, #4
 80033f6:	4618      	mov	r0, r3
 80033f8:	f009 feda 	bl	800d1b0 <HAL_RCC_ClockConfig>
 80033fc:	4603      	mov	r3, r0
 80033fe:	2b00      	cmp	r3, #0
 8003400:	d001      	beq.n	8003406 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8003402:	f000 fd7f 	bl	8003f04 <Error_Handler>
  }
}
 8003406:	bf00      	nop
 8003408:	3758      	adds	r7, #88	@ 0x58
 800340a:	46bd      	mov	sp, r7
 800340c:	bd80      	pop	{r7, pc}
	...

08003410 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8003410:	b580      	push	{r7, lr}
 8003412:	b08a      	sub	sp, #40	@ 0x28
 8003414:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8003416:	f107 031c 	add.w	r3, r7, #28
 800341a:	2200      	movs	r2, #0
 800341c:	601a      	str	r2, [r3, #0]
 800341e:	605a      	str	r2, [r3, #4]
 8003420:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8003422:	1d3b      	adds	r3, r7, #4
 8003424:	2200      	movs	r2, #0
 8003426:	601a      	str	r2, [r3, #0]
 8003428:	605a      	str	r2, [r3, #4]
 800342a:	609a      	str	r2, [r3, #8]
 800342c:	60da      	str	r2, [r3, #12]
 800342e:	611a      	str	r2, [r3, #16]
 8003430:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8003432:	4b30      	ldr	r3, [pc, #192]	@ (80034f4 <MX_ADC1_Init+0xe4>)
 8003434:	4a30      	ldr	r2, [pc, #192]	@ (80034f8 <MX_ADC1_Init+0xe8>)
 8003436:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8003438:	4b2e      	ldr	r3, [pc, #184]	@ (80034f4 <MX_ADC1_Init+0xe4>)
 800343a:	2200      	movs	r2, #0
 800343c:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800343e:	4b2d      	ldr	r3, [pc, #180]	@ (80034f4 <MX_ADC1_Init+0xe4>)
 8003440:	2200      	movs	r2, #0
 8003442:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8003444:	4b2b      	ldr	r3, [pc, #172]	@ (80034f4 <MX_ADC1_Init+0xe4>)
 8003446:	2200      	movs	r2, #0
 8003448:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800344a:	4b2a      	ldr	r3, [pc, #168]	@ (80034f4 <MX_ADC1_Init+0xe4>)
 800344c:	2200      	movs	r2, #0
 800344e:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8003450:	4b28      	ldr	r3, [pc, #160]	@ (80034f4 <MX_ADC1_Init+0xe4>)
 8003452:	2208      	movs	r2, #8
 8003454:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8003456:	4b27      	ldr	r3, [pc, #156]	@ (80034f4 <MX_ADC1_Init+0xe4>)
 8003458:	2200      	movs	r2, #0
 800345a:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800345c:	4b25      	ldr	r3, [pc, #148]	@ (80034f4 <MX_ADC1_Init+0xe4>)
 800345e:	2200      	movs	r2, #0
 8003460:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 8003462:	4b24      	ldr	r3, [pc, #144]	@ (80034f4 <MX_ADC1_Init+0xe4>)
 8003464:	2201      	movs	r2, #1
 8003466:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8003468:	4b22      	ldr	r3, [pc, #136]	@ (80034f4 <MX_ADC1_Init+0xe4>)
 800346a:	2200      	movs	r2, #0
 800346c:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T4_TRGO;
 8003470:	4b20      	ldr	r3, [pc, #128]	@ (80034f4 <MX_ADC1_Init+0xe4>)
 8003472:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 8003476:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8003478:	4b1e      	ldr	r3, [pc, #120]	@ (80034f4 <MX_ADC1_Init+0xe4>)
 800347a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800347e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8003480:	4b1c      	ldr	r3, [pc, #112]	@ (80034f4 <MX_ADC1_Init+0xe4>)
 8003482:	2201      	movs	r2, #1
 8003484:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8003488:	4b1a      	ldr	r3, [pc, #104]	@ (80034f4 <MX_ADC1_Init+0xe4>)
 800348a:	2200      	movs	r2, #0
 800348c:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 800348e:	4b19      	ldr	r3, [pc, #100]	@ (80034f4 <MX_ADC1_Init+0xe4>)
 8003490:	2200      	movs	r2, #0
 8003492:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8003496:	4817      	ldr	r0, [pc, #92]	@ (80034f4 <MX_ADC1_Init+0xe4>)
 8003498:	f006 f868 	bl	800956c <HAL_ADC_Init>
 800349c:	4603      	mov	r3, r0
 800349e:	2b00      	cmp	r3, #0
 80034a0:	d001      	beq.n	80034a6 <MX_ADC1_Init+0x96>
  {
    Error_Handler();
 80034a2:	f000 fd2f 	bl	8003f04 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 80034a6:	2300      	movs	r3, #0
 80034a8:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 80034aa:	f107 031c 	add.w	r3, r7, #28
 80034ae:	4619      	mov	r1, r3
 80034b0:	4810      	ldr	r0, [pc, #64]	@ (80034f4 <MX_ADC1_Init+0xe4>)
 80034b2:	f007 f921 	bl	800a6f8 <HAL_ADCEx_MultiModeConfigChannel>
 80034b6:	4603      	mov	r3, r0
 80034b8:	2b00      	cmp	r3, #0
 80034ba:	d001      	beq.n	80034c0 <MX_ADC1_Init+0xb0>
  {
    Error_Handler();
 80034bc:	f000 fd22 	bl	8003f04 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_9;
 80034c0:	4b0e      	ldr	r3, [pc, #56]	@ (80034fc <MX_ADC1_Init+0xec>)
 80034c2:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80034c4:	2306      	movs	r3, #6
 80034c6:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 80034c8:	2300      	movs	r3, #0
 80034ca:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80034cc:	237f      	movs	r3, #127	@ 0x7f
 80034ce:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80034d0:	2304      	movs	r3, #4
 80034d2:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 80034d4:	2300      	movs	r3, #0
 80034d6:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80034d8:	1d3b      	adds	r3, r7, #4
 80034da:	4619      	mov	r1, r3
 80034dc:	4805      	ldr	r0, [pc, #20]	@ (80034f4 <MX_ADC1_Init+0xe4>)
 80034de:	f006 fabd 	bl	8009a5c <HAL_ADC_ConfigChannel>
 80034e2:	4603      	mov	r3, r0
 80034e4:	2b00      	cmp	r3, #0
 80034e6:	d001      	beq.n	80034ec <MX_ADC1_Init+0xdc>
  {
    Error_Handler();
 80034e8:	f000 fd0c 	bl	8003f04 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80034ec:	bf00      	nop
 80034ee:	3728      	adds	r7, #40	@ 0x28
 80034f0:	46bd      	mov	sp, r7
 80034f2:	bd80      	pop	{r7, pc}
 80034f4:	20000090 	.word	0x20000090
 80034f8:	50040000 	.word	0x50040000
 80034fc:	25b00200 	.word	0x25b00200

08003500 <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 8003500:	b580      	push	{r7, lr}
 8003502:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8003504:	4b0d      	ldr	r3, [pc, #52]	@ (800353c <MX_CRC_Init+0x3c>)
 8003506:	4a0e      	ldr	r2, [pc, #56]	@ (8003540 <MX_CRC_Init+0x40>)
 8003508:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 800350a:	4b0c      	ldr	r3, [pc, #48]	@ (800353c <MX_CRC_Init+0x3c>)
 800350c:	2200      	movs	r2, #0
 800350e:	711a      	strb	r2, [r3, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 8003510:	4b0a      	ldr	r3, [pc, #40]	@ (800353c <MX_CRC_Init+0x3c>)
 8003512:	2200      	movs	r2, #0
 8003514:	715a      	strb	r2, [r3, #5]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 8003516:	4b09      	ldr	r3, [pc, #36]	@ (800353c <MX_CRC_Init+0x3c>)
 8003518:	2200      	movs	r2, #0
 800351a:	615a      	str	r2, [r3, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 800351c:	4b07      	ldr	r3, [pc, #28]	@ (800353c <MX_CRC_Init+0x3c>)
 800351e:	2200      	movs	r2, #0
 8003520:	619a      	str	r2, [r3, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 8003522:	4b06      	ldr	r3, [pc, #24]	@ (800353c <MX_CRC_Init+0x3c>)
 8003524:	2201      	movs	r2, #1
 8003526:	621a      	str	r2, [r3, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8003528:	4804      	ldr	r0, [pc, #16]	@ (800353c <MX_CRC_Init+0x3c>)
 800352a:	f007 fac1 	bl	800aab0 <HAL_CRC_Init>
 800352e:	4603      	mov	r3, r0
 8003530:	2b00      	cmp	r3, #0
 8003532:	d001      	beq.n	8003538 <MX_CRC_Init+0x38>
  {
    Error_Handler();
 8003534:	f000 fce6 	bl	8003f04 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 8003538:	bf00      	nop
 800353a:	bd80      	pop	{r7, pc}
 800353c:	2000013c 	.word	0x2000013c
 8003540:	40023000 	.word	0x40023000

08003544 <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 8003544:	b580      	push	{r7, lr}
 8003546:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8003548:	4b1b      	ldr	r3, [pc, #108]	@ (80035b8 <MX_I2C3_Init+0x74>)
 800354a:	4a1c      	ldr	r2, [pc, #112]	@ (80035bc <MX_I2C3_Init+0x78>)
 800354c:	601a      	str	r2, [r3, #0]
  hi2c3.Init.Timing = 0x10909CEC;
 800354e:	4b1a      	ldr	r3, [pc, #104]	@ (80035b8 <MX_I2C3_Init+0x74>)
 8003550:	4a1b      	ldr	r2, [pc, #108]	@ (80035c0 <MX_I2C3_Init+0x7c>)
 8003552:	605a      	str	r2, [r3, #4]
  hi2c3.Init.OwnAddress1 = 0;
 8003554:	4b18      	ldr	r3, [pc, #96]	@ (80035b8 <MX_I2C3_Init+0x74>)
 8003556:	2200      	movs	r2, #0
 8003558:	609a      	str	r2, [r3, #8]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800355a:	4b17      	ldr	r3, [pc, #92]	@ (80035b8 <MX_I2C3_Init+0x74>)
 800355c:	2201      	movs	r2, #1
 800355e:	60da      	str	r2, [r3, #12]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8003560:	4b15      	ldr	r3, [pc, #84]	@ (80035b8 <MX_I2C3_Init+0x74>)
 8003562:	2200      	movs	r2, #0
 8003564:	611a      	str	r2, [r3, #16]
  hi2c3.Init.OwnAddress2 = 0;
 8003566:	4b14      	ldr	r3, [pc, #80]	@ (80035b8 <MX_I2C3_Init+0x74>)
 8003568:	2200      	movs	r2, #0
 800356a:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800356c:	4b12      	ldr	r3, [pc, #72]	@ (80035b8 <MX_I2C3_Init+0x74>)
 800356e:	2200      	movs	r2, #0
 8003570:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8003572:	4b11      	ldr	r3, [pc, #68]	@ (80035b8 <MX_I2C3_Init+0x74>)
 8003574:	2200      	movs	r2, #0
 8003576:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8003578:	4b0f      	ldr	r3, [pc, #60]	@ (80035b8 <MX_I2C3_Init+0x74>)
 800357a:	2200      	movs	r2, #0
 800357c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 800357e:	480e      	ldr	r0, [pc, #56]	@ (80035b8 <MX_I2C3_Init+0x74>)
 8003580:	f007 ff8c 	bl	800b49c <HAL_I2C_Init>
 8003584:	4603      	mov	r3, r0
 8003586:	2b00      	cmp	r3, #0
 8003588:	d001      	beq.n	800358e <MX_I2C3_Init+0x4a>
  {
    Error_Handler();
 800358a:	f000 fcbb 	bl	8003f04 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800358e:	2100      	movs	r1, #0
 8003590:	4809      	ldr	r0, [pc, #36]	@ (80035b8 <MX_I2C3_Init+0x74>)
 8003592:	f008 fcd3 	bl	800bf3c <HAL_I2CEx_ConfigAnalogFilter>
 8003596:	4603      	mov	r3, r0
 8003598:	2b00      	cmp	r3, #0
 800359a:	d001      	beq.n	80035a0 <MX_I2C3_Init+0x5c>
  {
    Error_Handler();
 800359c:	f000 fcb2 	bl	8003f04 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 80035a0:	2100      	movs	r1, #0
 80035a2:	4805      	ldr	r0, [pc, #20]	@ (80035b8 <MX_I2C3_Init+0x74>)
 80035a4:	f008 fd15 	bl	800bfd2 <HAL_I2CEx_ConfigDigitalFilter>
 80035a8:	4603      	mov	r3, r0
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	d001      	beq.n	80035b2 <MX_I2C3_Init+0x6e>
  {
    Error_Handler();
 80035ae:	f000 fca9 	bl	8003f04 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 80035b2:	bf00      	nop
 80035b4:	bd80      	pop	{r7, pc}
 80035b6:	bf00      	nop
 80035b8:	20000160 	.word	0x20000160
 80035bc:	40005c00 	.word	0x40005c00
 80035c0:	10909cec 	.word	0x10909cec

080035c4 <MX_QUADSPI_Init>:
  * @brief QUADSPI Initialization Function
  * @param None
  * @retval None
  */
static void MX_QUADSPI_Init(void)
{
 80035c4:	b580      	push	{r7, lr}
 80035c6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN QUADSPI_Init 1 */

  /* USER CODE END QUADSPI_Init 1 */
  /* QUADSPI parameter configuration*/
  hqspi.Instance = QUADSPI;
 80035c8:	4b0f      	ldr	r3, [pc, #60]	@ (8003608 <MX_QUADSPI_Init+0x44>)
 80035ca:	4a10      	ldr	r2, [pc, #64]	@ (800360c <MX_QUADSPI_Init+0x48>)
 80035cc:	601a      	str	r2, [r3, #0]
  hqspi.Init.ClockPrescaler = 255;
 80035ce:	4b0e      	ldr	r3, [pc, #56]	@ (8003608 <MX_QUADSPI_Init+0x44>)
 80035d0:	22ff      	movs	r2, #255	@ 0xff
 80035d2:	605a      	str	r2, [r3, #4]
  hqspi.Init.FifoThreshold = 1;
 80035d4:	4b0c      	ldr	r3, [pc, #48]	@ (8003608 <MX_QUADSPI_Init+0x44>)
 80035d6:	2201      	movs	r2, #1
 80035d8:	609a      	str	r2, [r3, #8]
  hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_NONE;
 80035da:	4b0b      	ldr	r3, [pc, #44]	@ (8003608 <MX_QUADSPI_Init+0x44>)
 80035dc:	2200      	movs	r2, #0
 80035de:	60da      	str	r2, [r3, #12]
  hqspi.Init.FlashSize = 1;
 80035e0:	4b09      	ldr	r3, [pc, #36]	@ (8003608 <MX_QUADSPI_Init+0x44>)
 80035e2:	2201      	movs	r2, #1
 80035e4:	611a      	str	r2, [r3, #16]
  hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_1_CYCLE;
 80035e6:	4b08      	ldr	r3, [pc, #32]	@ (8003608 <MX_QUADSPI_Init+0x44>)
 80035e8:	2200      	movs	r2, #0
 80035ea:	615a      	str	r2, [r3, #20]
  hqspi.Init.ClockMode = QSPI_CLOCK_MODE_0;
 80035ec:	4b06      	ldr	r3, [pc, #24]	@ (8003608 <MX_QUADSPI_Init+0x44>)
 80035ee:	2200      	movs	r2, #0
 80035f0:	619a      	str	r2, [r3, #24]
  if (HAL_QSPI_Init(&hqspi) != HAL_OK)
 80035f2:	4805      	ldr	r0, [pc, #20]	@ (8003608 <MX_QUADSPI_Init+0x44>)
 80035f4:	f008 fd9e 	bl	800c134 <HAL_QSPI_Init>
 80035f8:	4603      	mov	r3, r0
 80035fa:	2b00      	cmp	r3, #0
 80035fc:	d001      	beq.n	8003602 <MX_QUADSPI_Init+0x3e>
  {
    Error_Handler();
 80035fe:	f000 fc81 	bl	8003f04 <Error_Handler>
  }
  /* USER CODE BEGIN QUADSPI_Init 2 */

  /* USER CODE END QUADSPI_Init 2 */

}
 8003602:	bf00      	nop
 8003604:	bd80      	pop	{r7, pc}
 8003606:	bf00      	nop
 8003608:	200001b4 	.word	0x200001b4
 800360c:	a0001000 	.word	0xa0001000

08003610 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8003610:	b580      	push	{r7, lr}
 8003612:	b092      	sub	sp, #72	@ 0x48
 8003614:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8003616:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 800361a:	2200      	movs	r2, #0
 800361c:	601a      	str	r2, [r3, #0]
 800361e:	605a      	str	r2, [r3, #4]
 8003620:	609a      	str	r2, [r3, #8]
 8003622:	60da      	str	r2, [r3, #12]
 8003624:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 8003626:	2300      	movs	r3, #0
 8003628:	633b      	str	r3, [r7, #48]	@ 0x30
  RTC_AlarmTypeDef sAlarm = {0};
 800362a:	1d3b      	adds	r3, r7, #4
 800362c:	222c      	movs	r2, #44	@ 0x2c
 800362e:	2100      	movs	r1, #0
 8003630:	4618      	mov	r0, r3
 8003632:	f00f fbe5 	bl	8012e00 <memset>

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8003636:	4b3c      	ldr	r3, [pc, #240]	@ (8003728 <MX_RTC_Init+0x118>)
 8003638:	4a3c      	ldr	r2, [pc, #240]	@ (800372c <MX_RTC_Init+0x11c>)
 800363a:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 800363c:	4b3a      	ldr	r3, [pc, #232]	@ (8003728 <MX_RTC_Init+0x118>)
 800363e:	2200      	movs	r2, #0
 8003640:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8003642:	4b39      	ldr	r3, [pc, #228]	@ (8003728 <MX_RTC_Init+0x118>)
 8003644:	227f      	movs	r2, #127	@ 0x7f
 8003646:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8003648:	4b37      	ldr	r3, [pc, #220]	@ (8003728 <MX_RTC_Init+0x118>)
 800364a:	22ff      	movs	r2, #255	@ 0xff
 800364c:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 800364e:	4b36      	ldr	r3, [pc, #216]	@ (8003728 <MX_RTC_Init+0x118>)
 8003650:	2200      	movs	r2, #0
 8003652:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8003654:	4b34      	ldr	r3, [pc, #208]	@ (8003728 <MX_RTC_Init+0x118>)
 8003656:	2200      	movs	r2, #0
 8003658:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 800365a:	4b33      	ldr	r3, [pc, #204]	@ (8003728 <MX_RTC_Init+0x118>)
 800365c:	2200      	movs	r2, #0
 800365e:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8003660:	4b31      	ldr	r3, [pc, #196]	@ (8003728 <MX_RTC_Init+0x118>)
 8003662:	2200      	movs	r2, #0
 8003664:	61da      	str	r2, [r3, #28]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8003666:	4830      	ldr	r0, [pc, #192]	@ (8003728 <MX_RTC_Init+0x118>)
 8003668:	f00a fc82 	bl	800df70 <HAL_RTC_Init>
 800366c:	4603      	mov	r3, r0
 800366e:	2b00      	cmp	r3, #0
 8003670:	d001      	beq.n	8003676 <MX_RTC_Init+0x66>
  {
    Error_Handler();
 8003672:	f000 fc47 	bl	8003f04 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0;
 8003676:	2300      	movs	r3, #0
 8003678:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
  sTime.Minutes = 0;
 800367c:	2300      	movs	r3, #0
 800367e:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
  sTime.Seconds = 0;
 8003682:	2300      	movs	r3, #0
 8003684:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8003688:	2300      	movs	r3, #0
 800368a:	643b      	str	r3, [r7, #64]	@ 0x40
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 800368c:	2300      	movs	r3, #0
 800368e:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK)
 8003690:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8003694:	2200      	movs	r2, #0
 8003696:	4619      	mov	r1, r3
 8003698:	4823      	ldr	r0, [pc, #140]	@ (8003728 <MX_RTC_Init+0x118>)
 800369a:	f00a fcf1 	bl	800e080 <HAL_RTC_SetTime>
 800369e:	4603      	mov	r3, r0
 80036a0:	2b00      	cmp	r3, #0
 80036a2:	d001      	beq.n	80036a8 <MX_RTC_Init+0x98>
  {
    Error_Handler();
 80036a4:	f000 fc2e 	bl	8003f04 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 80036a8:	2301      	movs	r3, #1
 80036aa:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
  sDate.Month = RTC_MONTH_JANUARY;
 80036ae:	2301      	movs	r3, #1
 80036b0:	f887 3031 	strb.w	r3, [r7, #49]	@ 0x31
  sDate.Date = 1;
 80036b4:	2301      	movs	r3, #1
 80036b6:	f887 3032 	strb.w	r3, [r7, #50]	@ 0x32
  sDate.Year = 0;
 80036ba:	2300      	movs	r3, #0
 80036bc:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN) != HAL_OK)
 80036c0:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80036c4:	2200      	movs	r2, #0
 80036c6:	4619      	mov	r1, r3
 80036c8:	4817      	ldr	r0, [pc, #92]	@ (8003728 <MX_RTC_Init+0x118>)
 80036ca:	f00a fdd2 	bl	800e272 <HAL_RTC_SetDate>
 80036ce:	4603      	mov	r3, r0
 80036d0:	2b00      	cmp	r3, #0
 80036d2:	d001      	beq.n	80036d8 <MX_RTC_Init+0xc8>
  {
    Error_Handler();
 80036d4:	f000 fc16 	bl	8003f04 <Error_Handler>
  }

  /** Enable the Alarm A
  */
  sAlarm.AlarmTime.Hours = 0;
 80036d8:	2300      	movs	r3, #0
 80036da:	713b      	strb	r3, [r7, #4]
  sAlarm.AlarmTime.Minutes = 0;
 80036dc:	2300      	movs	r3, #0
 80036de:	717b      	strb	r3, [r7, #5]
  sAlarm.AlarmTime.Seconds = 0;
 80036e0:	2300      	movs	r3, #0
 80036e2:	71bb      	strb	r3, [r7, #6]
  sAlarm.AlarmTime.SubSeconds = 0;
 80036e4:	2300      	movs	r3, #0
 80036e6:	60bb      	str	r3, [r7, #8]
  sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 80036e8:	2300      	movs	r3, #0
 80036ea:	613b      	str	r3, [r7, #16]
  sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 80036ec:	2300      	movs	r3, #0
 80036ee:	617b      	str	r3, [r7, #20]
  sAlarm.AlarmMask = RTC_ALARMMASK_DATEWEEKDAY|RTC_ALARMMASK_HOURS
 80036f0:	4b0f      	ldr	r3, [pc, #60]	@ (8003730 <MX_RTC_Init+0x120>)
 80036f2:	61bb      	str	r3, [r7, #24]
                              |RTC_ALARMMASK_SECONDS;
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 80036f4:	2300      	movs	r3, #0
 80036f6:	623b      	str	r3, [r7, #32]
  sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 80036f8:	2300      	movs	r3, #0
 80036fa:	627b      	str	r3, [r7, #36]	@ 0x24
  sAlarm.AlarmDateWeekDay = 1;
 80036fc:	2301      	movs	r3, #1
 80036fe:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
  sAlarm.Alarm = RTC_ALARM_A;
 8003702:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8003706:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BIN) != HAL_OK)
 8003708:	1d3b      	adds	r3, r7, #4
 800370a:	2200      	movs	r2, #0
 800370c:	4619      	mov	r1, r3
 800370e:	4806      	ldr	r0, [pc, #24]	@ (8003728 <MX_RTC_Init+0x118>)
 8003710:	f00a fe36 	bl	800e380 <HAL_RTC_SetAlarm_IT>
 8003714:	4603      	mov	r3, r0
 8003716:	2b00      	cmp	r3, #0
 8003718:	d001      	beq.n	800371e <MX_RTC_Init+0x10e>
  {
    Error_Handler();
 800371a:	f000 fbf3 	bl	8003f04 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 800371e:	bf00      	nop
 8003720:	3748      	adds	r7, #72	@ 0x48
 8003722:	46bd      	mov	sp, r7
 8003724:	bd80      	pop	{r7, pc}
 8003726:	bf00      	nop
 8003728:	200001f8 	.word	0x200001f8
 800372c:	40002800 	.word	0x40002800
 8003730:	80800080 	.word	0x80800080

08003734 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8003734:	b580      	push	{r7, lr}
 8003736:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8003738:	4b1b      	ldr	r3, [pc, #108]	@ (80037a8 <MX_SPI2_Init+0x74>)
 800373a:	4a1c      	ldr	r2, [pc, #112]	@ (80037ac <MX_SPI2_Init+0x78>)
 800373c:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 800373e:	4b1a      	ldr	r3, [pc, #104]	@ (80037a8 <MX_SPI2_Init+0x74>)
 8003740:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8003744:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8003746:	4b18      	ldr	r3, [pc, #96]	@ (80037a8 <MX_SPI2_Init+0x74>)
 8003748:	2200      	movs	r2, #0
 800374a:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 800374c:	4b16      	ldr	r3, [pc, #88]	@ (80037a8 <MX_SPI2_Init+0x74>)
 800374e:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 8003752:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8003754:	4b14      	ldr	r3, [pc, #80]	@ (80037a8 <MX_SPI2_Init+0x74>)
 8003756:	2200      	movs	r2, #0
 8003758:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 800375a:	4b13      	ldr	r3, [pc, #76]	@ (80037a8 <MX_SPI2_Init+0x74>)
 800375c:	2200      	movs	r2, #0
 800375e:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8003760:	4b11      	ldr	r3, [pc, #68]	@ (80037a8 <MX_SPI2_Init+0x74>)
 8003762:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003766:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003768:	4b0f      	ldr	r3, [pc, #60]	@ (80037a8 <MX_SPI2_Init+0x74>)
 800376a:	2200      	movs	r2, #0
 800376c:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800376e:	4b0e      	ldr	r3, [pc, #56]	@ (80037a8 <MX_SPI2_Init+0x74>)
 8003770:	2200      	movs	r2, #0
 8003772:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8003774:	4b0c      	ldr	r3, [pc, #48]	@ (80037a8 <MX_SPI2_Init+0x74>)
 8003776:	2200      	movs	r2, #0
 8003778:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800377a:	4b0b      	ldr	r3, [pc, #44]	@ (80037a8 <MX_SPI2_Init+0x74>)
 800377c:	2200      	movs	r2, #0
 800377e:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 7;
 8003780:	4b09      	ldr	r3, [pc, #36]	@ (80037a8 <MX_SPI2_Init+0x74>)
 8003782:	2207      	movs	r2, #7
 8003784:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8003786:	4b08      	ldr	r3, [pc, #32]	@ (80037a8 <MX_SPI2_Init+0x74>)
 8003788:	2200      	movs	r2, #0
 800378a:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800378c:	4b06      	ldr	r3, [pc, #24]	@ (80037a8 <MX_SPI2_Init+0x74>)
 800378e:	2208      	movs	r2, #8
 8003790:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8003792:	4805      	ldr	r0, [pc, #20]	@ (80037a8 <MX_SPI2_Init+0x74>)
 8003794:	f00b f850 	bl	800e838 <HAL_SPI_Init>
 8003798:	4603      	mov	r3, r0
 800379a:	2b00      	cmp	r3, #0
 800379c:	d001      	beq.n	80037a2 <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 800379e:	f000 fbb1 	bl	8003f04 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 80037a2:	bf00      	nop
 80037a4:	bd80      	pop	{r7, pc}
 80037a6:	bf00      	nop
 80037a8:	2000021c 	.word	0x2000021c
 80037ac:	40003800 	.word	0x40003800

080037b0 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 80037b0:	b580      	push	{r7, lr}
 80037b2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 80037b4:	4b1b      	ldr	r3, [pc, #108]	@ (8003824 <MX_SPI3_Init+0x74>)
 80037b6:	4a1c      	ldr	r2, [pc, #112]	@ (8003828 <MX_SPI3_Init+0x78>)
 80037b8:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 80037ba:	4b1a      	ldr	r3, [pc, #104]	@ (8003824 <MX_SPI3_Init+0x74>)
 80037bc:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80037c0:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 80037c2:	4b18      	ldr	r3, [pc, #96]	@ (8003824 <MX_SPI3_Init+0x74>)
 80037c4:	2200      	movs	r2, #0
 80037c6:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_4BIT;
 80037c8:	4b16      	ldr	r3, [pc, #88]	@ (8003824 <MX_SPI3_Init+0x74>)
 80037ca:	f44f 7240 	mov.w	r2, #768	@ 0x300
 80037ce:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 80037d0:	4b14      	ldr	r3, [pc, #80]	@ (8003824 <MX_SPI3_Init+0x74>)
 80037d2:	2200      	movs	r2, #0
 80037d4:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 80037d6:	4b13      	ldr	r3, [pc, #76]	@ (8003824 <MX_SPI3_Init+0x74>)
 80037d8:	2200      	movs	r2, #0
 80037da:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 80037dc:	4b11      	ldr	r3, [pc, #68]	@ (8003824 <MX_SPI3_Init+0x74>)
 80037de:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80037e2:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80037e4:	4b0f      	ldr	r3, [pc, #60]	@ (8003824 <MX_SPI3_Init+0x74>)
 80037e6:	2200      	movs	r2, #0
 80037e8:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80037ea:	4b0e      	ldr	r3, [pc, #56]	@ (8003824 <MX_SPI3_Init+0x74>)
 80037ec:	2200      	movs	r2, #0
 80037ee:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 80037f0:	4b0c      	ldr	r3, [pc, #48]	@ (8003824 <MX_SPI3_Init+0x74>)
 80037f2:	2200      	movs	r2, #0
 80037f4:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80037f6:	4b0b      	ldr	r3, [pc, #44]	@ (8003824 <MX_SPI3_Init+0x74>)
 80037f8:	2200      	movs	r2, #0
 80037fa:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi3.Init.CRCPolynomial = 7;
 80037fc:	4b09      	ldr	r3, [pc, #36]	@ (8003824 <MX_SPI3_Init+0x74>)
 80037fe:	2207      	movs	r2, #7
 8003800:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8003802:	4b08      	ldr	r3, [pc, #32]	@ (8003824 <MX_SPI3_Init+0x74>)
 8003804:	2200      	movs	r2, #0
 8003806:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8003808:	4b06      	ldr	r3, [pc, #24]	@ (8003824 <MX_SPI3_Init+0x74>)
 800380a:	2208      	movs	r2, #8
 800380c:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 800380e:	4805      	ldr	r0, [pc, #20]	@ (8003824 <MX_SPI3_Init+0x74>)
 8003810:	f00b f812 	bl	800e838 <HAL_SPI_Init>
 8003814:	4603      	mov	r3, r0
 8003816:	2b00      	cmp	r3, #0
 8003818:	d001      	beq.n	800381e <MX_SPI3_Init+0x6e>
  {
    Error_Handler();
 800381a:	f000 fb73 	bl	8003f04 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 800381e:	bf00      	nop
 8003820:	bd80      	pop	{r7, pc}
 8003822:	bf00      	nop
 8003824:	20000280 	.word	0x20000280
 8003828:	40003c00 	.word	0x40003c00

0800382c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 800382c:	b580      	push	{r7, lr}
 800382e:	b096      	sub	sp, #88	@ 0x58
 8003830:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003832:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8003836:	2200      	movs	r2, #0
 8003838:	601a      	str	r2, [r3, #0]
 800383a:	605a      	str	r2, [r3, #4]
 800383c:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800383e:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8003842:	2200      	movs	r2, #0
 8003844:	601a      	str	r2, [r3, #0]
 8003846:	605a      	str	r2, [r3, #4]
 8003848:	609a      	str	r2, [r3, #8]
 800384a:	60da      	str	r2, [r3, #12]
 800384c:	611a      	str	r2, [r3, #16]
 800384e:	615a      	str	r2, [r3, #20]
 8003850:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8003852:	1d3b      	adds	r3, r7, #4
 8003854:	222c      	movs	r2, #44	@ 0x2c
 8003856:	2100      	movs	r1, #0
 8003858:	4618      	mov	r0, r3
 800385a:	f00f fad1 	bl	8012e00 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800385e:	4b45      	ldr	r3, [pc, #276]	@ (8003974 <MX_TIM1_Init+0x148>)
 8003860:	4a45      	ldr	r2, [pc, #276]	@ (8003978 <MX_TIM1_Init+0x14c>)
 8003862:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 1599;
 8003864:	4b43      	ldr	r3, [pc, #268]	@ (8003974 <MX_TIM1_Init+0x148>)
 8003866:	f240 623f 	movw	r2, #1599	@ 0x63f
 800386a:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800386c:	4b41      	ldr	r3, [pc, #260]	@ (8003974 <MX_TIM1_Init+0x148>)
 800386e:	2200      	movs	r2, #0
 8003870:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 49999;
 8003872:	4b40      	ldr	r3, [pc, #256]	@ (8003974 <MX_TIM1_Init+0x148>)
 8003874:	f24c 324f 	movw	r2, #49999	@ 0xc34f
 8003878:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800387a:	4b3e      	ldr	r3, [pc, #248]	@ (8003974 <MX_TIM1_Init+0x148>)
 800387c:	2200      	movs	r2, #0
 800387e:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8003880:	4b3c      	ldr	r3, [pc, #240]	@ (8003974 <MX_TIM1_Init+0x148>)
 8003882:	2200      	movs	r2, #0
 8003884:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003886:	4b3b      	ldr	r3, [pc, #236]	@ (8003974 <MX_TIM1_Init+0x148>)
 8003888:	2200      	movs	r2, #0
 800388a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_OC_Init(&htim1) != HAL_OK)
 800388c:	4839      	ldr	r0, [pc, #228]	@ (8003974 <MX_TIM1_Init+0x148>)
 800388e:	f00b ff56 	bl	800f73e <HAL_TIM_OC_Init>
 8003892:	4603      	mov	r3, r0
 8003894:	2b00      	cmp	r3, #0
 8003896:	d001      	beq.n	800389c <MX_TIM1_Init+0x70>
  {
    Error_Handler();
 8003898:	f000 fb34 	bl	8003f04 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800389c:	2300      	movs	r3, #0
 800389e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80038a0:	2300      	movs	r3, #0
 80038a2:	653b      	str	r3, [r7, #80]	@ 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80038a4:	2300      	movs	r3, #0
 80038a6:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80038a8:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 80038ac:	4619      	mov	r1, r3
 80038ae:	4831      	ldr	r0, [pc, #196]	@ (8003974 <MX_TIM1_Init+0x148>)
 80038b0:	f00d fd54 	bl	801135c <HAL_TIMEx_MasterConfigSynchronization>
 80038b4:	4603      	mov	r3, r0
 80038b6:	2b00      	cmp	r3, #0
 80038b8:	d001      	beq.n	80038be <MX_TIM1_Init+0x92>
  {
    Error_Handler();
 80038ba:	f000 fb23 	bl	8003f04 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 80038be:	2300      	movs	r3, #0
 80038c0:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.Pulse = 0;
 80038c2:	2300      	movs	r3, #0
 80038c4:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80038c6:	2300      	movs	r3, #0
 80038c8:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80038ca:	2300      	movs	r3, #0
 80038cc:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80038ce:	2300      	movs	r3, #0
 80038d0:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80038d2:	2300      	movs	r3, #0
 80038d4:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80038d6:	2300      	movs	r3, #0
 80038d8:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_OC_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80038da:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80038de:	2200      	movs	r2, #0
 80038e0:	4619      	mov	r1, r3
 80038e2:	4824      	ldr	r0, [pc, #144]	@ (8003974 <MX_TIM1_Init+0x148>)
 80038e4:	f00c fc10 	bl	8010108 <HAL_TIM_OC_ConfigChannel>
 80038e8:	4603      	mov	r3, r0
 80038ea:	2b00      	cmp	r3, #0
 80038ec:	d001      	beq.n	80038f2 <MX_TIM1_Init+0xc6>
  {
    Error_Handler();
 80038ee:	f000 fb09 	bl	8003f04 <Error_Handler>
  }
  if (HAL_TIM_OC_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80038f2:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80038f6:	2204      	movs	r2, #4
 80038f8:	4619      	mov	r1, r3
 80038fa:	481e      	ldr	r0, [pc, #120]	@ (8003974 <MX_TIM1_Init+0x148>)
 80038fc:	f00c fc04 	bl	8010108 <HAL_TIM_OC_ConfigChannel>
 8003900:	4603      	mov	r3, r0
 8003902:	2b00      	cmp	r3, #0
 8003904:	d001      	beq.n	800390a <MX_TIM1_Init+0xde>
  {
    Error_Handler();
 8003906:	f000 fafd 	bl	8003f04 <Error_Handler>
  }
  if (HAL_TIM_OC_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800390a:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 800390e:	2208      	movs	r2, #8
 8003910:	4619      	mov	r1, r3
 8003912:	4818      	ldr	r0, [pc, #96]	@ (8003974 <MX_TIM1_Init+0x148>)
 8003914:	f00c fbf8 	bl	8010108 <HAL_TIM_OC_ConfigChannel>
 8003918:	4603      	mov	r3, r0
 800391a:	2b00      	cmp	r3, #0
 800391c:	d001      	beq.n	8003922 <MX_TIM1_Init+0xf6>
  {
    Error_Handler();
 800391e:	f000 faf1 	bl	8003f04 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8003922:	2300      	movs	r3, #0
 8003924:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8003926:	2300      	movs	r3, #0
 8003928:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800392a:	2300      	movs	r3, #0
 800392c:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800392e:	2300      	movs	r3, #0
 8003930:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8003932:	2300      	movs	r3, #0
 8003934:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8003936:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800393a:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 800393c:	2300      	movs	r3, #0
 800393e:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8003940:	2300      	movs	r3, #0
 8003942:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8003944:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003948:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 800394a:	2300      	movs	r3, #0
 800394c:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800394e:	2300      	movs	r3, #0
 8003950:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8003952:	1d3b      	adds	r3, r7, #4
 8003954:	4619      	mov	r1, r3
 8003956:	4807      	ldr	r0, [pc, #28]	@ (8003974 <MX_TIM1_Init+0x148>)
 8003958:	f00d fd88 	bl	801146c <HAL_TIMEx_ConfigBreakDeadTime>
 800395c:	4603      	mov	r3, r0
 800395e:	2b00      	cmp	r3, #0
 8003960:	d001      	beq.n	8003966 <MX_TIM1_Init+0x13a>
  {
    Error_Handler();
 8003962:	f000 facf 	bl	8003f04 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8003966:	4803      	ldr	r0, [pc, #12]	@ (8003974 <MX_TIM1_Init+0x148>)
 8003968:	f002 f88e 	bl	8005a88 <HAL_TIM_MspPostInit>

}
 800396c:	bf00      	nop
 800396e:	3758      	adds	r7, #88	@ 0x58
 8003970:	46bd      	mov	sp, r7
 8003972:	bd80      	pop	{r7, pc}
 8003974:	200002e4 	.word	0x200002e4
 8003978:	40012c00 	.word	0x40012c00

0800397c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800397c:	b580      	push	{r7, lr}
 800397e:	b088      	sub	sp, #32
 8003980:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003982:	f107 0314 	add.w	r3, r7, #20
 8003986:	2200      	movs	r2, #0
 8003988:	601a      	str	r2, [r3, #0]
 800398a:	605a      	str	r2, [r3, #4]
 800398c:	609a      	str	r2, [r3, #8]
  TIM_IC_InitTypeDef sConfigIC = {0};
 800398e:	1d3b      	adds	r3, r7, #4
 8003990:	2200      	movs	r2, #0
 8003992:	601a      	str	r2, [r3, #0]
 8003994:	605a      	str	r2, [r3, #4]
 8003996:	609a      	str	r2, [r3, #8]
 8003998:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800399a:	4b21      	ldr	r3, [pc, #132]	@ (8003a20 <MX_TIM2_Init+0xa4>)
 800399c:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80039a0:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80039a2:	4b1f      	ldr	r3, [pc, #124]	@ (8003a20 <MX_TIM2_Init+0xa4>)
 80039a4:	2200      	movs	r2, #0
 80039a6:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80039a8:	4b1d      	ldr	r3, [pc, #116]	@ (8003a20 <MX_TIM2_Init+0xa4>)
 80039aa:	2200      	movs	r2, #0
 80039ac:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 80039ae:	4b1c      	ldr	r3, [pc, #112]	@ (8003a20 <MX_TIM2_Init+0xa4>)
 80039b0:	f04f 32ff 	mov.w	r2, #4294967295
 80039b4:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80039b6:	4b1a      	ldr	r3, [pc, #104]	@ (8003a20 <MX_TIM2_Init+0xa4>)
 80039b8:	2200      	movs	r2, #0
 80039ba:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80039bc:	4b18      	ldr	r3, [pc, #96]	@ (8003a20 <MX_TIM2_Init+0xa4>)
 80039be:	2200      	movs	r2, #0
 80039c0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 80039c2:	4817      	ldr	r0, [pc, #92]	@ (8003a20 <MX_TIM2_Init+0xa4>)
 80039c4:	f00c fb48 	bl	8010058 <HAL_TIM_IC_Init>
 80039c8:	4603      	mov	r3, r0
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	d001      	beq.n	80039d2 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 80039ce:	f000 fa99 	bl	8003f04 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80039d2:	2300      	movs	r3, #0
 80039d4:	617b      	str	r3, [r7, #20]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80039d6:	2300      	movs	r3, #0
 80039d8:	61fb      	str	r3, [r7, #28]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80039da:	f107 0314 	add.w	r3, r7, #20
 80039de:	4619      	mov	r1, r3
 80039e0:	480f      	ldr	r0, [pc, #60]	@ (8003a20 <MX_TIM2_Init+0xa4>)
 80039e2:	f00d fcbb 	bl	801135c <HAL_TIMEx_MasterConfigSynchronization>
 80039e6:	4603      	mov	r3, r0
 80039e8:	2b00      	cmp	r3, #0
 80039ea:	d001      	beq.n	80039f0 <MX_TIM2_Init+0x74>
  {
    Error_Handler();
 80039ec:	f000 fa8a 	bl	8003f04 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 80039f0:	2300      	movs	r3, #0
 80039f2:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 80039f4:	2301      	movs	r3, #1
 80039f6:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 80039f8:	2300      	movs	r3, #0
 80039fa:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICFilter = 0;
 80039fc:	2300      	movs	r3, #0
 80039fe:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8003a00:	1d3b      	adds	r3, r7, #4
 8003a02:	2200      	movs	r2, #0
 8003a04:	4619      	mov	r1, r3
 8003a06:	4806      	ldr	r0, [pc, #24]	@ (8003a20 <MX_TIM2_Init+0xa4>)
 8003a08:	f00c fbf8 	bl	80101fc <HAL_TIM_IC_ConfigChannel>
 8003a0c:	4603      	mov	r3, r0
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	d001      	beq.n	8003a16 <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 8003a12:	f000 fa77 	bl	8003f04 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8003a16:	bf00      	nop
 8003a18:	3720      	adds	r7, #32
 8003a1a:	46bd      	mov	sp, r7
 8003a1c:	bd80      	pop	{r7, pc}
 8003a1e:	bf00      	nop
 8003a20:	20000330 	.word	0x20000330

08003a24 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8003a24:	b580      	push	{r7, lr}
 8003a26:	b090      	sub	sp, #64	@ 0x40
 8003a28:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8003a2a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8003a2e:	2200      	movs	r2, #0
 8003a30:	601a      	str	r2, [r3, #0]
 8003a32:	605a      	str	r2, [r3, #4]
 8003a34:	609a      	str	r2, [r3, #8]
 8003a36:	60da      	str	r2, [r3, #12]
 8003a38:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003a3a:	f107 0320 	add.w	r3, r7, #32
 8003a3e:	2200      	movs	r2, #0
 8003a40:	601a      	str	r2, [r3, #0]
 8003a42:	605a      	str	r2, [r3, #4]
 8003a44:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8003a46:	1d3b      	adds	r3, r7, #4
 8003a48:	2200      	movs	r2, #0
 8003a4a:	601a      	str	r2, [r3, #0]
 8003a4c:	605a      	str	r2, [r3, #4]
 8003a4e:	609a      	str	r2, [r3, #8]
 8003a50:	60da      	str	r2, [r3, #12]
 8003a52:	611a      	str	r2, [r3, #16]
 8003a54:	615a      	str	r2, [r3, #20]
 8003a56:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8003a58:	4b2c      	ldr	r3, [pc, #176]	@ (8003b0c <MX_TIM3_Init+0xe8>)
 8003a5a:	4a2d      	ldr	r2, [pc, #180]	@ (8003b10 <MX_TIM3_Init+0xec>)
 8003a5c:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8003a5e:	4b2b      	ldr	r3, [pc, #172]	@ (8003b0c <MX_TIM3_Init+0xe8>)
 8003a60:	2200      	movs	r2, #0
 8003a62:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003a64:	4b29      	ldr	r3, [pc, #164]	@ (8003b0c <MX_TIM3_Init+0xe8>)
 8003a66:	2200      	movs	r2, #0
 8003a68:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 31;
 8003a6a:	4b28      	ldr	r3, [pc, #160]	@ (8003b0c <MX_TIM3_Init+0xe8>)
 8003a6c:	221f      	movs	r2, #31
 8003a6e:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003a70:	4b26      	ldr	r3, [pc, #152]	@ (8003b0c <MX_TIM3_Init+0xe8>)
 8003a72:	2200      	movs	r2, #0
 8003a74:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003a76:	4b25      	ldr	r3, [pc, #148]	@ (8003b0c <MX_TIM3_Init+0xe8>)
 8003a78:	2200      	movs	r2, #0
 8003a7a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8003a7c:	4823      	ldr	r0, [pc, #140]	@ (8003b0c <MX_TIM3_Init+0xe8>)
 8003a7e:	f00b fe07 	bl	800f690 <HAL_TIM_Base_Init>
 8003a82:	4603      	mov	r3, r0
 8003a84:	2b00      	cmp	r3, #0
 8003a86:	d001      	beq.n	8003a8c <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 8003a88:	f000 fa3c 	bl	8003f04 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8003a8c:	481f      	ldr	r0, [pc, #124]	@ (8003b0c <MX_TIM3_Init+0xe8>)
 8003a8e:	f00c f8e5 	bl	800fc5c <HAL_TIM_PWM_Init>
 8003a92:	4603      	mov	r3, r0
 8003a94:	2b00      	cmp	r3, #0
 8003a96:	d001      	beq.n	8003a9c <MX_TIM3_Init+0x78>
  {
    Error_Handler();
 8003a98:	f000 fa34 	bl	8003f04 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_EXTERNAL1;
 8003a9c:	2307      	movs	r3, #7
 8003a9e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sSlaveConfig.InputTrigger = TIM_TS_ITR3;
 8003aa0:	2330      	movs	r3, #48	@ 0x30
 8003aa2:	633b      	str	r3, [r7, #48]	@ 0x30
  if (HAL_TIM_SlaveConfigSynchro(&htim3, &sSlaveConfig) != HAL_OK)
 8003aa4:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8003aa8:	4619      	mov	r1, r3
 8003aaa:	4818      	ldr	r0, [pc, #96]	@ (8003b0c <MX_TIM3_Init+0xe8>)
 8003aac:	f00c fe1f 	bl	80106ee <HAL_TIM_SlaveConfigSynchro>
 8003ab0:	4603      	mov	r3, r0
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	d001      	beq.n	8003aba <MX_TIM3_Init+0x96>
  {
    Error_Handler();
 8003ab6:	f000 fa25 	bl	8003f04 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003aba:	2300      	movs	r3, #0
 8003abc:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003abe:	2300      	movs	r3, #0
 8003ac0:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8003ac2:	f107 0320 	add.w	r3, r7, #32
 8003ac6:	4619      	mov	r1, r3
 8003ac8:	4810      	ldr	r0, [pc, #64]	@ (8003b0c <MX_TIM3_Init+0xe8>)
 8003aca:	f00d fc47 	bl	801135c <HAL_TIMEx_MasterConfigSynchronization>
 8003ace:	4603      	mov	r3, r0
 8003ad0:	2b00      	cmp	r3, #0
 8003ad2:	d001      	beq.n	8003ad8 <MX_TIM3_Init+0xb4>
  {
    Error_Handler();
 8003ad4:	f000 fa16 	bl	8003f04 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003ad8:	2360      	movs	r3, #96	@ 0x60
 8003ada:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 15;
 8003adc:	230f      	movs	r3, #15
 8003ade:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003ae0:	2300      	movs	r3, #0
 8003ae2:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003ae4:	2300      	movs	r3, #0
 8003ae6:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8003ae8:	1d3b      	adds	r3, r7, #4
 8003aea:	2208      	movs	r2, #8
 8003aec:	4619      	mov	r1, r3
 8003aee:	4807      	ldr	r0, [pc, #28]	@ (8003b0c <MX_TIM3_Init+0xe8>)
 8003af0:	f00c fc20 	bl	8010334 <HAL_TIM_PWM_ConfigChannel>
 8003af4:	4603      	mov	r3, r0
 8003af6:	2b00      	cmp	r3, #0
 8003af8:	d001      	beq.n	8003afe <MX_TIM3_Init+0xda>
  {
    Error_Handler();
 8003afa:	f000 fa03 	bl	8003f04 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8003afe:	4803      	ldr	r0, [pc, #12]	@ (8003b0c <MX_TIM3_Init+0xe8>)
 8003b00:	f001 ffc2 	bl	8005a88 <HAL_TIM_MspPostInit>

}
 8003b04:	bf00      	nop
 8003b06:	3740      	adds	r7, #64	@ 0x40
 8003b08:	46bd      	mov	sp, r7
 8003b0a:	bd80      	pop	{r7, pc}
 8003b0c:	2000037c 	.word	0x2000037c
 8003b10:	40000400 	.word	0x40000400

08003b14 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8003b14:	b580      	push	{r7, lr}
 8003b16:	b08e      	sub	sp, #56	@ 0x38
 8003b18:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003b1a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8003b1e:	2200      	movs	r2, #0
 8003b20:	601a      	str	r2, [r3, #0]
 8003b22:	605a      	str	r2, [r3, #4]
 8003b24:	609a      	str	r2, [r3, #8]
 8003b26:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003b28:	f107 031c 	add.w	r3, r7, #28
 8003b2c:	2200      	movs	r2, #0
 8003b2e:	601a      	str	r2, [r3, #0]
 8003b30:	605a      	str	r2, [r3, #4]
 8003b32:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8003b34:	463b      	mov	r3, r7
 8003b36:	2200      	movs	r2, #0
 8003b38:	601a      	str	r2, [r3, #0]
 8003b3a:	605a      	str	r2, [r3, #4]
 8003b3c:	609a      	str	r2, [r3, #8]
 8003b3e:	60da      	str	r2, [r3, #12]
 8003b40:	611a      	str	r2, [r3, #16]
 8003b42:	615a      	str	r2, [r3, #20]
 8003b44:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8003b46:	4b2b      	ldr	r3, [pc, #172]	@ (8003bf4 <MX_TIM4_Init+0xe0>)
 8003b48:	4a2b      	ldr	r2, [pc, #172]	@ (8003bf8 <MX_TIM4_Init+0xe4>)
 8003b4a:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 99;
 8003b4c:	4b29      	ldr	r3, [pc, #164]	@ (8003bf4 <MX_TIM4_Init+0xe0>)
 8003b4e:	2263      	movs	r2, #99	@ 0x63
 8003b50:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003b52:	4b28      	ldr	r3, [pc, #160]	@ (8003bf4 <MX_TIM4_Init+0xe0>)
 8003b54:	2200      	movs	r2, #0
 8003b56:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 999;
 8003b58:	4b26      	ldr	r3, [pc, #152]	@ (8003bf4 <MX_TIM4_Init+0xe0>)
 8003b5a:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8003b5e:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003b60:	4b24      	ldr	r3, [pc, #144]	@ (8003bf4 <MX_TIM4_Init+0xe0>)
 8003b62:	2200      	movs	r2, #0
 8003b64:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8003b66:	4b23      	ldr	r3, [pc, #140]	@ (8003bf4 <MX_TIM4_Init+0xe0>)
 8003b68:	2280      	movs	r2, #128	@ 0x80
 8003b6a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8003b6c:	4821      	ldr	r0, [pc, #132]	@ (8003bf4 <MX_TIM4_Init+0xe0>)
 8003b6e:	f00b fd8f 	bl	800f690 <HAL_TIM_Base_Init>
 8003b72:	4603      	mov	r3, r0
 8003b74:	2b00      	cmp	r3, #0
 8003b76:	d001      	beq.n	8003b7c <MX_TIM4_Init+0x68>
  {
    Error_Handler();
 8003b78:	f000 f9c4 	bl	8003f04 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003b7c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003b80:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8003b82:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8003b86:	4619      	mov	r1, r3
 8003b88:	481a      	ldr	r0, [pc, #104]	@ (8003bf4 <MX_TIM4_Init+0xe0>)
 8003b8a:	f00c fce7 	bl	801055c <HAL_TIM_ConfigClockSource>
 8003b8e:	4603      	mov	r3, r0
 8003b90:	2b00      	cmp	r3, #0
 8003b92:	d001      	beq.n	8003b98 <MX_TIM4_Init+0x84>
  {
    Error_Handler();
 8003b94:	f000 f9b6 	bl	8003f04 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim4) != HAL_OK)
 8003b98:	4816      	ldr	r0, [pc, #88]	@ (8003bf4 <MX_TIM4_Init+0xe0>)
 8003b9a:	f00b fdd0 	bl	800f73e <HAL_TIM_OC_Init>
 8003b9e:	4603      	mov	r3, r0
 8003ba0:	2b00      	cmp	r3, #0
 8003ba2:	d001      	beq.n	8003ba8 <MX_TIM4_Init+0x94>
  {
    Error_Handler();
 8003ba4:	f000 f9ae 	bl	8003f04 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8003ba8:	2320      	movs	r3, #32
 8003baa:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003bac:	2300      	movs	r3, #0
 8003bae:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8003bb0:	f107 031c 	add.w	r3, r7, #28
 8003bb4:	4619      	mov	r1, r3
 8003bb6:	480f      	ldr	r0, [pc, #60]	@ (8003bf4 <MX_TIM4_Init+0xe0>)
 8003bb8:	f00d fbd0 	bl	801135c <HAL_TIMEx_MasterConfigSynchronization>
 8003bbc:	4603      	mov	r3, r0
 8003bbe:	2b00      	cmp	r3, #0
 8003bc0:	d001      	beq.n	8003bc6 <MX_TIM4_Init+0xb2>
  {
    Error_Handler();
 8003bc2:	f000 f99f 	bl	8003f04 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 8003bc6:	2300      	movs	r3, #0
 8003bc8:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8003bca:	2300      	movs	r3, #0
 8003bcc:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003bce:	2300      	movs	r3, #0
 8003bd0:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003bd2:	2300      	movs	r3, #0
 8003bd4:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_OC_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8003bd6:	463b      	mov	r3, r7
 8003bd8:	2208      	movs	r2, #8
 8003bda:	4619      	mov	r1, r3
 8003bdc:	4805      	ldr	r0, [pc, #20]	@ (8003bf4 <MX_TIM4_Init+0xe0>)
 8003bde:	f00c fa93 	bl	8010108 <HAL_TIM_OC_ConfigChannel>
 8003be2:	4603      	mov	r3, r0
 8003be4:	2b00      	cmp	r3, #0
 8003be6:	d001      	beq.n	8003bec <MX_TIM4_Init+0xd8>
  {
    Error_Handler();
 8003be8:	f000 f98c 	bl	8003f04 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8003bec:	bf00      	nop
 8003bee:	3738      	adds	r7, #56	@ 0x38
 8003bf0:	46bd      	mov	sp, r7
 8003bf2:	bd80      	pop	{r7, pc}
 8003bf4:	200003c8 	.word	0x200003c8
 8003bf8:	40000800 	.word	0x40000800

08003bfc <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 8003bfc:	b580      	push	{r7, lr}
 8003bfe:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8003c00:	4b14      	ldr	r3, [pc, #80]	@ (8003c54 <MX_UART4_Init+0x58>)
 8003c02:	4a15      	ldr	r2, [pc, #84]	@ (8003c58 <MX_UART4_Init+0x5c>)
 8003c04:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 8003c06:	4b13      	ldr	r3, [pc, #76]	@ (8003c54 <MX_UART4_Init+0x58>)
 8003c08:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8003c0c:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8003c0e:	4b11      	ldr	r3, [pc, #68]	@ (8003c54 <MX_UART4_Init+0x58>)
 8003c10:	2200      	movs	r2, #0
 8003c12:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8003c14:	4b0f      	ldr	r3, [pc, #60]	@ (8003c54 <MX_UART4_Init+0x58>)
 8003c16:	2200      	movs	r2, #0
 8003c18:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8003c1a:	4b0e      	ldr	r3, [pc, #56]	@ (8003c54 <MX_UART4_Init+0x58>)
 8003c1c:	2200      	movs	r2, #0
 8003c1e:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8003c20:	4b0c      	ldr	r3, [pc, #48]	@ (8003c54 <MX_UART4_Init+0x58>)
 8003c22:	220c      	movs	r2, #12
 8003c24:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003c26:	4b0b      	ldr	r3, [pc, #44]	@ (8003c54 <MX_UART4_Init+0x58>)
 8003c28:	2200      	movs	r2, #0
 8003c2a:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8003c2c:	4b09      	ldr	r3, [pc, #36]	@ (8003c54 <MX_UART4_Init+0x58>)
 8003c2e:	2200      	movs	r2, #0
 8003c30:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8003c32:	4b08      	ldr	r3, [pc, #32]	@ (8003c54 <MX_UART4_Init+0x58>)
 8003c34:	2200      	movs	r2, #0
 8003c36:	621a      	str	r2, [r3, #32]
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8003c38:	4b06      	ldr	r3, [pc, #24]	@ (8003c54 <MX_UART4_Init+0x58>)
 8003c3a:	2200      	movs	r2, #0
 8003c3c:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_HalfDuplex_Init(&huart4) != HAL_OK)
 8003c3e:	4805      	ldr	r0, [pc, #20]	@ (8003c54 <MX_UART4_Init+0x58>)
 8003c40:	f00d fce0 	bl	8011604 <HAL_HalfDuplex_Init>
 8003c44:	4603      	mov	r3, r0
 8003c46:	2b00      	cmp	r3, #0
 8003c48:	d001      	beq.n	8003c4e <MX_UART4_Init+0x52>
  {
    Error_Handler();
 8003c4a:	f000 f95b 	bl	8003f04 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8003c4e:	bf00      	nop
 8003c50:	bd80      	pop	{r7, pc}
 8003c52:	bf00      	nop
 8003c54:	20000414 	.word	0x20000414
 8003c58:	40004c00 	.word	0x40004c00

08003c5c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8003c5c:	b580      	push	{r7, lr}
 8003c5e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8003c60:	4b14      	ldr	r3, [pc, #80]	@ (8003cb4 <MX_USART1_UART_Init+0x58>)
 8003c62:	4a15      	ldr	r2, [pc, #84]	@ (8003cb8 <MX_USART1_UART_Init+0x5c>)
 8003c64:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8003c66:	4b13      	ldr	r3, [pc, #76]	@ (8003cb4 <MX_USART1_UART_Init+0x58>)
 8003c68:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8003c6c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8003c6e:	4b11      	ldr	r3, [pc, #68]	@ (8003cb4 <MX_USART1_UART_Init+0x58>)
 8003c70:	2200      	movs	r2, #0
 8003c72:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8003c74:	4b0f      	ldr	r3, [pc, #60]	@ (8003cb4 <MX_USART1_UART_Init+0x58>)
 8003c76:	2200      	movs	r2, #0
 8003c78:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8003c7a:	4b0e      	ldr	r3, [pc, #56]	@ (8003cb4 <MX_USART1_UART_Init+0x58>)
 8003c7c:	2200      	movs	r2, #0
 8003c7e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8003c80:	4b0c      	ldr	r3, [pc, #48]	@ (8003cb4 <MX_USART1_UART_Init+0x58>)
 8003c82:	220c      	movs	r2, #12
 8003c84:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_RTS_CTS;
 8003c86:	4b0b      	ldr	r3, [pc, #44]	@ (8003cb4 <MX_USART1_UART_Init+0x58>)
 8003c88:	f44f 7240 	mov.w	r2, #768	@ 0x300
 8003c8c:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8003c8e:	4b09      	ldr	r3, [pc, #36]	@ (8003cb4 <MX_USART1_UART_Init+0x58>)
 8003c90:	2200      	movs	r2, #0
 8003c92:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8003c94:	4b07      	ldr	r3, [pc, #28]	@ (8003cb4 <MX_USART1_UART_Init+0x58>)
 8003c96:	2200      	movs	r2, #0
 8003c98:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8003c9a:	4b06      	ldr	r3, [pc, #24]	@ (8003cb4 <MX_USART1_UART_Init+0x58>)
 8003c9c:	2200      	movs	r2, #0
 8003c9e:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8003ca0:	4804      	ldr	r0, [pc, #16]	@ (8003cb4 <MX_USART1_UART_Init+0x58>)
 8003ca2:	f00d fc61 	bl	8011568 <HAL_UART_Init>
 8003ca6:	4603      	mov	r3, r0
 8003ca8:	2b00      	cmp	r3, #0
 8003caa:	d001      	beq.n	8003cb0 <MX_USART1_UART_Init+0x54>
  {
    Error_Handler();
 8003cac:	f000 f92a 	bl	8003f04 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8003cb0:	bf00      	nop
 8003cb2:	bd80      	pop	{r7, pc}
 8003cb4:	2000049c 	.word	0x2000049c
 8003cb8:	40013800 	.word	0x40013800

08003cbc <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8003cbc:	b580      	push	{r7, lr}
 8003cbe:	b082      	sub	sp, #8
 8003cc0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8003cc2:	4b14      	ldr	r3, [pc, #80]	@ (8003d14 <MX_DMA_Init+0x58>)
 8003cc4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003cc6:	4a13      	ldr	r2, [pc, #76]	@ (8003d14 <MX_DMA_Init+0x58>)
 8003cc8:	f043 0301 	orr.w	r3, r3, #1
 8003ccc:	6493      	str	r3, [r2, #72]	@ 0x48
 8003cce:	4b11      	ldr	r3, [pc, #68]	@ (8003d14 <MX_DMA_Init+0x58>)
 8003cd0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003cd2:	f003 0301 	and.w	r3, r3, #1
 8003cd6:	607b      	str	r3, [r7, #4]
 8003cd8:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8003cda:	2200      	movs	r2, #0
 8003cdc:	2100      	movs	r1, #0
 8003cde:	200b      	movs	r0, #11
 8003ce0:	f006 feab 	bl	800aa3a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8003ce4:	200b      	movs	r0, #11
 8003ce6:	f006 fec4 	bl	800aa72 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 0, 0);
 8003cea:	2200      	movs	r2, #0
 8003cec:	2100      	movs	r1, #0
 8003cee:	200e      	movs	r0, #14
 8003cf0:	f006 fea3 	bl	800aa3a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 8003cf4:	200e      	movs	r0, #14
 8003cf6:	f006 febc 	bl	800aa72 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 8003cfa:	2200      	movs	r2, #0
 8003cfc:	2100      	movs	r1, #0
 8003cfe:	200f      	movs	r0, #15
 8003d00:	f006 fe9b 	bl	800aa3a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 8003d04:	200f      	movs	r0, #15
 8003d06:	f006 feb4 	bl	800aa72 <HAL_NVIC_EnableIRQ>

}
 8003d0a:	bf00      	nop
 8003d0c:	3708      	adds	r7, #8
 8003d0e:	46bd      	mov	sp, r7
 8003d10:	bd80      	pop	{r7, pc}
 8003d12:	bf00      	nop
 8003d14:	40021000 	.word	0x40021000

08003d18 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8003d18:	b580      	push	{r7, lr}
 8003d1a:	b08a      	sub	sp, #40	@ 0x28
 8003d1c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003d1e:	f107 0314 	add.w	r3, r7, #20
 8003d22:	2200      	movs	r2, #0
 8003d24:	601a      	str	r2, [r3, #0]
 8003d26:	605a      	str	r2, [r3, #4]
 8003d28:	609a      	str	r2, [r3, #8]
 8003d2a:	60da      	str	r2, [r3, #12]
 8003d2c:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */
  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003d2e:	4b71      	ldr	r3, [pc, #452]	@ (8003ef4 <MX_GPIO_Init+0x1dc>)
 8003d30:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003d32:	4a70      	ldr	r2, [pc, #448]	@ (8003ef4 <MX_GPIO_Init+0x1dc>)
 8003d34:	f043 0304 	orr.w	r3, r3, #4
 8003d38:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003d3a:	4b6e      	ldr	r3, [pc, #440]	@ (8003ef4 <MX_GPIO_Init+0x1dc>)
 8003d3c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003d3e:	f003 0304 	and.w	r3, r3, #4
 8003d42:	613b      	str	r3, [r7, #16]
 8003d44:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8003d46:	4b6b      	ldr	r3, [pc, #428]	@ (8003ef4 <MX_GPIO_Init+0x1dc>)
 8003d48:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003d4a:	4a6a      	ldr	r2, [pc, #424]	@ (8003ef4 <MX_GPIO_Init+0x1dc>)
 8003d4c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003d50:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003d52:	4b68      	ldr	r3, [pc, #416]	@ (8003ef4 <MX_GPIO_Init+0x1dc>)
 8003d54:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003d56:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003d5a:	60fb      	str	r3, [r7, #12]
 8003d5c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003d5e:	4b65      	ldr	r3, [pc, #404]	@ (8003ef4 <MX_GPIO_Init+0x1dc>)
 8003d60:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003d62:	4a64      	ldr	r2, [pc, #400]	@ (8003ef4 <MX_GPIO_Init+0x1dc>)
 8003d64:	f043 0301 	orr.w	r3, r3, #1
 8003d68:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003d6a:	4b62      	ldr	r3, [pc, #392]	@ (8003ef4 <MX_GPIO_Init+0x1dc>)
 8003d6c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003d6e:	f003 0301 	and.w	r3, r3, #1
 8003d72:	60bb      	str	r3, [r7, #8]
 8003d74:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003d76:	4b5f      	ldr	r3, [pc, #380]	@ (8003ef4 <MX_GPIO_Init+0x1dc>)
 8003d78:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003d7a:	4a5e      	ldr	r2, [pc, #376]	@ (8003ef4 <MX_GPIO_Init+0x1dc>)
 8003d7c:	f043 0302 	orr.w	r3, r3, #2
 8003d80:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003d82:	4b5c      	ldr	r3, [pc, #368]	@ (8003ef4 <MX_GPIO_Init+0x1dc>)
 8003d84:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003d86:	f003 0302 	and.w	r3, r3, #2
 8003d8a:	607b      	str	r3, [r7, #4]
 8003d8c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8003d8e:	4b59      	ldr	r3, [pc, #356]	@ (8003ef4 <MX_GPIO_Init+0x1dc>)
 8003d90:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003d92:	4a58      	ldr	r2, [pc, #352]	@ (8003ef4 <MX_GPIO_Init+0x1dc>)
 8003d94:	f043 0308 	orr.w	r3, r3, #8
 8003d98:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003d9a:	4b56      	ldr	r3, [pc, #344]	@ (8003ef4 <MX_GPIO_Init+0x1dc>)
 8003d9c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003d9e:	f003 0308 	and.w	r3, r3, #8
 8003da2:	603b      	str	r3, [r7, #0]
 8003da4:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DBG_GPIO_Port, DBG_Pin, GPIO_PIN_RESET);
 8003da6:	2200      	movs	r2, #0
 8003da8:	2108      	movs	r1, #8
 8003daa:	4853      	ldr	r0, [pc, #332]	@ (8003ef8 <MX_GPIO_Init+0x1e0>)
 8003dac:	f007 fb5e 	bl	800b46c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(FLASH_nCS_GPIO_Port, FLASH_nCS_Pin, GPIO_PIN_SET);
 8003db0:	2201      	movs	r2, #1
 8003db2:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8003db6:	4851      	ldr	r0, [pc, #324]	@ (8003efc <MX_GPIO_Init+0x1e4>)
 8003db8:	f007 fb58 	bl	800b46c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, FLASH_nWP_Pin|FLASH_nRESET_Pin, GPIO_PIN_SET);
 8003dbc:	2201      	movs	r2, #1
 8003dbe:	21c0      	movs	r1, #192	@ 0xc0
 8003dc0:	484d      	ldr	r0, [pc, #308]	@ (8003ef8 <MX_GPIO_Init+0x1e0>)
 8003dc2:	f007 fb53 	bl	800b46c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LTE_POWER_ON_Pin|LTE_RESET_Pin, GPIO_PIN_SET);
 8003dc6:	2201      	movs	r2, #1
 8003dc8:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 8003dcc:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8003dd0:	f007 fb4c 	bl	800b46c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ACC_nCS_GPIO_Port, ACC_nCS_Pin, GPIO_PIN_RESET);
 8003dd4:	2200      	movs	r2, #0
 8003dd6:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8003dda:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8003dde:	f007 fb45 	bl	800b46c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DTR_GPIO_Port, DTR_Pin, GPIO_PIN_RESET);
 8003de2:	2200      	movs	r2, #0
 8003de4:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8003de8:	4844      	ldr	r0, [pc, #272]	@ (8003efc <MX_GPIO_Init+0x1e4>)
 8003dea:	f007 fb3f 	bl	800b46c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : USR_BTN_Pin PC4 */
  GPIO_InitStruct.Pin = USR_BTN_Pin|GPIO_PIN_4;
 8003dee:	f242 0310 	movw	r3, #8208	@ 0x2010
 8003df2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8003df4:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8003df8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003dfa:	2300      	movs	r3, #0
 8003dfc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003dfe:	f107 0314 	add.w	r3, r7, #20
 8003e02:	4619      	mov	r1, r3
 8003e04:	483c      	ldr	r0, [pc, #240]	@ (8003ef8 <MX_GPIO_Init+0x1e0>)
 8003e06:	f007 f987 	bl	800b118 <HAL_GPIO_Init>

  /*Configure GPIO pins : DBG_Pin FLASH_nWP_Pin FLASH_nRESET_Pin */
  GPIO_InitStruct.Pin = DBG_Pin|FLASH_nWP_Pin|FLASH_nRESET_Pin;
 8003e0a:	23c8      	movs	r3, #200	@ 0xc8
 8003e0c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003e0e:	2301      	movs	r3, #1
 8003e10:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003e12:	2300      	movs	r3, #0
 8003e14:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003e16:	2300      	movs	r3, #0
 8003e18:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003e1a:	f107 0314 	add.w	r3, r7, #20
 8003e1e:	4619      	mov	r1, r3
 8003e20:	4835      	ldr	r0, [pc, #212]	@ (8003ef8 <MX_GPIO_Init+0x1e0>)
 8003e22:	f007 f979 	bl	800b118 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 8003e26:	2308      	movs	r3, #8
 8003e28:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003e2a:	2300      	movs	r3, #0
 8003e2c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003e2e:	2300      	movs	r3, #0
 8003e30:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003e32:	f107 0314 	add.w	r3, r7, #20
 8003e36:	4619      	mov	r1, r3
 8003e38:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8003e3c:	f007 f96c 	bl	800b118 <HAL_GPIO_Init>

  /*Configure GPIO pins : FLASH_nCS_Pin DTR_Pin */
  GPIO_InitStruct.Pin = FLASH_nCS_Pin|DTR_Pin;
 8003e40:	f44f 5390 	mov.w	r3, #4608	@ 0x1200
 8003e44:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003e46:	2301      	movs	r3, #1
 8003e48:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003e4a:	2300      	movs	r3, #0
 8003e4c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003e4e:	2300      	movs	r3, #0
 8003e50:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003e52:	f107 0314 	add.w	r3, r7, #20
 8003e56:	4619      	mov	r1, r3
 8003e58:	4828      	ldr	r0, [pc, #160]	@ (8003efc <MX_GPIO_Init+0x1e4>)
 8003e5a:	f007 f95d 	bl	800b118 <HAL_GPIO_Init>

  /*Configure GPIO pins : LTE_POWER_ON_Pin LTE_RESET_Pin */
  GPIO_InitStruct.Pin = LTE_POWER_ON_Pin|LTE_RESET_Pin;
 8003e5e:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8003e62:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8003e64:	2311      	movs	r3, #17
 8003e66:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003e68:	2300      	movs	r3, #0
 8003e6a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003e6c:	2300      	movs	r3, #0
 8003e6e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003e70:	f107 0314 	add.w	r3, r7, #20
 8003e74:	4619      	mov	r1, r3
 8003e76:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8003e7a:	f007 f94d 	bl	800b118 <HAL_GPIO_Init>

  /*Configure GPIO pin : ACC_nCS_Pin */
  GPIO_InitStruct.Pin = ACC_nCS_Pin;
 8003e7e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003e82:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003e84:	2301      	movs	r3, #1
 8003e86:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003e88:	2300      	movs	r3, #0
 8003e8a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003e8c:	2300      	movs	r3, #0
 8003e8e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(ACC_nCS_GPIO_Port, &GPIO_InitStruct);
 8003e90:	f107 0314 	add.w	r3, r7, #20
 8003e94:	4619      	mov	r1, r3
 8003e96:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8003e9a:	f007 f93d 	bl	800b118 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8003e9e:	2304      	movs	r3, #4
 8003ea0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8003ea2:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8003ea6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003ea8:	2300      	movs	r3, #0
 8003eaa:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003eac:	f107 0314 	add.w	r3, r7, #20
 8003eb0:	4619      	mov	r1, r3
 8003eb2:	4813      	ldr	r0, [pc, #76]	@ (8003f00 <MX_GPIO_Init+0x1e8>)
 8003eb4:	f007 f930 	bl	800b118 <HAL_GPIO_Init>

  /*Configure GPIO pin : DCD_Pin */
  GPIO_InitStruct.Pin = DCD_Pin;
 8003eb8:	2320      	movs	r3, #32
 8003eba:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003ebc:	2300      	movs	r3, #0
 8003ebe:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003ec0:	2300      	movs	r3, #0
 8003ec2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(DCD_GPIO_Port, &GPIO_InitStruct);
 8003ec4:	f107 0314 	add.w	r3, r7, #20
 8003ec8:	4619      	mov	r1, r3
 8003eca:	480c      	ldr	r0, [pc, #48]	@ (8003efc <MX_GPIO_Init+0x1e4>)
 8003ecc:	f007 f924 	bl	800b118 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8003ed0:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8003ed4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8003ed6:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8003eda:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003edc:	2300      	movs	r3, #0
 8003ede:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003ee0:	f107 0314 	add.w	r3, r7, #20
 8003ee4:	4619      	mov	r1, r3
 8003ee6:	4805      	ldr	r0, [pc, #20]	@ (8003efc <MX_GPIO_Init+0x1e4>)
 8003ee8:	f007 f916 	bl	800b118 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */
  /* USER CODE END MX_GPIO_Init_2 */
}
 8003eec:	bf00      	nop
 8003eee:	3728      	adds	r7, #40	@ 0x28
 8003ef0:	46bd      	mov	sp, r7
 8003ef2:	bd80      	pop	{r7, pc}
 8003ef4:	40021000 	.word	0x40021000
 8003ef8:	48000800 	.word	0x48000800
 8003efc:	48000400 	.word	0x48000400
 8003f00:	48000c00 	.word	0x48000c00

08003f04 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003f04:	b480      	push	{r7}
 8003f06:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003f08:	b672      	cpsid	i
}
 8003f0a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8003f0c:	bf00      	nop
 8003f0e:	e7fd      	b.n	8003f0c <Error_Handler+0x8>

08003f10 <Save_Data>:
#include "stdlib.h"


/*-----ACQUISIZIONE MISURE E LOG DEI DATI-----*/
void Save_Data(void)
{
 8003f10:	b580      	push	{r7, lr}
 8003f12:	f5ad 6d9a 	sub.w	sp, sp, #1232	@ 0x4d0
 8003f16:	af00      	add	r7, sp, #0
	if(flags.ADC_Half_Buffer)
 8003f18:	4b77      	ldr	r3, [pc, #476]	@ (80040f8 <Save_Data+0x1e8>)
 8003f1a:	781b      	ldrb	r3, [r3, #0]
 8003f1c:	f003 0302 	and.w	r3, r3, #2
 8003f20:	b2db      	uxtb	r3, r3
 8003f22:	2b00      	cmp	r3, #0
 8003f24:	d037      	beq.n	8003f96 <Save_Data+0x86>
	{
		memcpy(Saving_Buffer + Address_Offset, &Pressure[0], PRESS_HALF_LEN);
 8003f26:	4b75      	ldr	r3, [pc, #468]	@ (80040fc <Save_Data+0x1ec>)
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	461a      	mov	r2, r3
 8003f2c:	4b74      	ldr	r3, [pc, #464]	@ (8004100 <Save_Data+0x1f0>)
 8003f2e:	4413      	add	r3, r2
 8003f30:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 8003f34:	4973      	ldr	r1, [pc, #460]	@ (8004104 <Save_Data+0x1f4>)
 8003f36:	4618      	mov	r0, r3
 8003f38:	f00e ffe6 	bl	8012f08 <memcpy>
		Last_Pressure = 0;
 8003f3c:	4b72      	ldr	r3, [pc, #456]	@ (8004108 <Save_Data+0x1f8>)
 8003f3e:	2200      	movs	r2, #0
 8003f40:	801a      	strh	r2, [r3, #0]
		for(int i = 0; i < PRESS_HALF_SAMPLES; i++)
 8003f42:	2300      	movs	r3, #0
 8003f44:	f8c7 34cc 	str.w	r3, [r7, #1228]	@ 0x4cc
 8003f48:	e00f      	b.n	8003f6a <Save_Data+0x5a>
		{
			Last_Pressure += Pressure[i];
 8003f4a:	4a6e      	ldr	r2, [pc, #440]	@ (8004104 <Save_Data+0x1f4>)
 8003f4c:	f8d7 34cc 	ldr.w	r3, [r7, #1228]	@ 0x4cc
 8003f50:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8003f54:	4b6c      	ldr	r3, [pc, #432]	@ (8004108 <Save_Data+0x1f8>)
 8003f56:	881b      	ldrh	r3, [r3, #0]
 8003f58:	4413      	add	r3, r2
 8003f5a:	b29a      	uxth	r2, r3
 8003f5c:	4b6a      	ldr	r3, [pc, #424]	@ (8004108 <Save_Data+0x1f8>)
 8003f5e:	801a      	strh	r2, [r3, #0]
		for(int i = 0; i < PRESS_HALF_SAMPLES; i++)
 8003f60:	f8d7 34cc 	ldr.w	r3, [r7, #1228]	@ 0x4cc
 8003f64:	3301      	adds	r3, #1
 8003f66:	f8c7 34cc 	str.w	r3, [r7, #1228]	@ 0x4cc
 8003f6a:	f8d7 34cc 	ldr.w	r3, [r7, #1228]	@ 0x4cc
 8003f6e:	2bc7      	cmp	r3, #199	@ 0xc7
 8003f70:	ddeb      	ble.n	8003f4a <Save_Data+0x3a>
		}
		Last_Pressure = (uint16_t)(Last_Pressure / PRESS_HALF_SAMPLES);
 8003f72:	4b65      	ldr	r3, [pc, #404]	@ (8004108 <Save_Data+0x1f8>)
 8003f74:	881b      	ldrh	r3, [r3, #0]
 8003f76:	4a65      	ldr	r2, [pc, #404]	@ (800410c <Save_Data+0x1fc>)
 8003f78:	fba2 2303 	umull	r2, r3, r2, r3
 8003f7c:	099b      	lsrs	r3, r3, #6
 8003f7e:	b29a      	uxth	r2, r3
 8003f80:	4b61      	ldr	r3, [pc, #388]	@ (8004108 <Save_Data+0x1f8>)
 8003f82:	801a      	strh	r2, [r3, #0]
		Warning_Detection(&Pressure[0]);
 8003f84:	485f      	ldr	r0, [pc, #380]	@ (8004104 <Save_Data+0x1f4>)
 8003f86:	f000 fa77 	bl	8004478 <Warning_Detection>
		flags.ADC_Half_Buffer = 0;
 8003f8a:	4a5b      	ldr	r2, [pc, #364]	@ (80040f8 <Save_Data+0x1e8>)
 8003f8c:	7813      	ldrb	r3, [r2, #0]
 8003f8e:	f023 0302 	bic.w	r3, r3, #2
 8003f92:	7013      	strb	r3, [r2, #0]
 8003f94:	e03e      	b.n	8004014 <Save_Data+0x104>
	}
	else if(flags.ADC_Full_Buffer)
 8003f96:	4b58      	ldr	r3, [pc, #352]	@ (80040f8 <Save_Data+0x1e8>)
 8003f98:	781b      	ldrb	r3, [r3, #0]
 8003f9a:	f003 0304 	and.w	r3, r3, #4
 8003f9e:	b2db      	uxtb	r3, r3
 8003fa0:	2b00      	cmp	r3, #0
 8003fa2:	d037      	beq.n	8004014 <Save_Data+0x104>
	{
		memcpy(Saving_Buffer + Address_Offset, &Pressure[PRESS_HALF_SAMPLES], PRESS_HALF_LEN);
 8003fa4:	4b55      	ldr	r3, [pc, #340]	@ (80040fc <Save_Data+0x1ec>)
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	461a      	mov	r2, r3
 8003faa:	4b55      	ldr	r3, [pc, #340]	@ (8004100 <Save_Data+0x1f0>)
 8003fac:	4413      	add	r3, r2
 8003fae:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 8003fb2:	4957      	ldr	r1, [pc, #348]	@ (8004110 <Save_Data+0x200>)
 8003fb4:	4618      	mov	r0, r3
 8003fb6:	f00e ffa7 	bl	8012f08 <memcpy>
		Last_Pressure = 0;
 8003fba:	4b53      	ldr	r3, [pc, #332]	@ (8004108 <Save_Data+0x1f8>)
 8003fbc:	2200      	movs	r2, #0
 8003fbe:	801a      	strh	r2, [r3, #0]
		for(int i = PRESS_HALF_SAMPLES; i < PRESS_FULL_SAMPLES; i++)
 8003fc0:	23c8      	movs	r3, #200	@ 0xc8
 8003fc2:	f8c7 34c8 	str.w	r3, [r7, #1224]	@ 0x4c8
 8003fc6:	e00f      	b.n	8003fe8 <Save_Data+0xd8>
		{
			Last_Pressure += Pressure[i];
 8003fc8:	4a4e      	ldr	r2, [pc, #312]	@ (8004104 <Save_Data+0x1f4>)
 8003fca:	f8d7 34c8 	ldr.w	r3, [r7, #1224]	@ 0x4c8
 8003fce:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8003fd2:	4b4d      	ldr	r3, [pc, #308]	@ (8004108 <Save_Data+0x1f8>)
 8003fd4:	881b      	ldrh	r3, [r3, #0]
 8003fd6:	4413      	add	r3, r2
 8003fd8:	b29a      	uxth	r2, r3
 8003fda:	4b4b      	ldr	r3, [pc, #300]	@ (8004108 <Save_Data+0x1f8>)
 8003fdc:	801a      	strh	r2, [r3, #0]
		for(int i = PRESS_HALF_SAMPLES; i < PRESS_FULL_SAMPLES; i++)
 8003fde:	f8d7 34c8 	ldr.w	r3, [r7, #1224]	@ 0x4c8
 8003fe2:	3301      	adds	r3, #1
 8003fe4:	f8c7 34c8 	str.w	r3, [r7, #1224]	@ 0x4c8
 8003fe8:	f8d7 34c8 	ldr.w	r3, [r7, #1224]	@ 0x4c8
 8003fec:	f5b3 7fc8 	cmp.w	r3, #400	@ 0x190
 8003ff0:	dbea      	blt.n	8003fc8 <Save_Data+0xb8>
		}
		Last_Pressure = (uint16_t)(Last_Pressure / PRESS_HALF_SAMPLES);
 8003ff2:	4b45      	ldr	r3, [pc, #276]	@ (8004108 <Save_Data+0x1f8>)
 8003ff4:	881b      	ldrh	r3, [r3, #0]
 8003ff6:	4a45      	ldr	r2, [pc, #276]	@ (800410c <Save_Data+0x1fc>)
 8003ff8:	fba2 2303 	umull	r2, r3, r2, r3
 8003ffc:	099b      	lsrs	r3, r3, #6
 8003ffe:	b29a      	uxth	r2, r3
 8004000:	4b41      	ldr	r3, [pc, #260]	@ (8004108 <Save_Data+0x1f8>)
 8004002:	801a      	strh	r2, [r3, #0]
		Warning_Detection(&Pressure[PRESS_HALF_SAMPLES]);
 8004004:	4842      	ldr	r0, [pc, #264]	@ (8004110 <Save_Data+0x200>)
 8004006:	f000 fa37 	bl	8004478 <Warning_Detection>
		flags.ADC_Full_Buffer = 0;
 800400a:	4a3b      	ldr	r2, [pc, #236]	@ (80040f8 <Save_Data+0x1e8>)
 800400c:	7813      	ldrb	r3, [r2, #0]
 800400e:	f023 0304 	bic.w	r3, r3, #4
 8004012:	7013      	strb	r3, [r2, #0]
	}
	flags.ADC_Complete = 0;
 8004014:	4a38      	ldr	r2, [pc, #224]	@ (80040f8 <Save_Data+0x1e8>)
 8004016:	7813      	ldrb	r3, [r2, #0]
 8004018:	f023 0301 	bic.w	r3, r3, #1
 800401c:	7013      	strb	r3, [r2, #0]
	Address_Offset += PRESS_HALF_LEN;
 800401e:	4b37      	ldr	r3, [pc, #220]	@ (80040fc <Save_Data+0x1ec>)
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	f503 73c8 	add.w	r3, r3, #400	@ 0x190
 8004026:	4a35      	ldr	r2, [pc, #212]	@ (80040fc <Save_Data+0x1ec>)
 8004028:	6013      	str	r3, [r2, #0]

	memcpy(Saving_Buffer + Address_Offset, Volume_Period, MAX_VOLUME_LEN);
 800402a:	4b34      	ldr	r3, [pc, #208]	@ (80040fc <Save_Data+0x1ec>)
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	461a      	mov	r2, r3
 8004030:	4b33      	ldr	r3, [pc, #204]	@ (8004100 <Save_Data+0x1f0>)
 8004032:	4413      	add	r3, r2
 8004034:	2228      	movs	r2, #40	@ 0x28
 8004036:	4937      	ldr	r1, [pc, #220]	@ (8004114 <Save_Data+0x204>)
 8004038:	4618      	mov	r0, r3
 800403a:	f00e ff65 	bl	8012f08 <memcpy>
	uint8_t current_period_cnt = Period_cnt;
 800403e:	4b36      	ldr	r3, [pc, #216]	@ (8004118 <Save_Data+0x208>)
 8004040:	781b      	ldrb	r3, [r3, #0]
 8004042:	f887 34bf 	strb.w	r3, [r7, #1215]	@ 0x4bf
	Last_Volume = 0;
 8004046:	4b35      	ldr	r3, [pc, #212]	@ (800411c <Save_Data+0x20c>)
 8004048:	2200      	movs	r2, #0
 800404a:	801a      	strh	r2, [r3, #0]
	for(int i = 0; i < current_period_cnt; i++)
 800404c:	2300      	movs	r3, #0
 800404e:	f8c7 34c4 	str.w	r3, [r7, #1220]	@ 0x4c4
 8004052:	e00f      	b.n	8004074 <Save_Data+0x164>
	{
		Last_Volume += Volume_Period[i];
 8004054:	4a2f      	ldr	r2, [pc, #188]	@ (8004114 <Save_Data+0x204>)
 8004056:	f8d7 34c4 	ldr.w	r3, [r7, #1220]	@ 0x4c4
 800405a:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 800405e:	4b2f      	ldr	r3, [pc, #188]	@ (800411c <Save_Data+0x20c>)
 8004060:	881b      	ldrh	r3, [r3, #0]
 8004062:	4413      	add	r3, r2
 8004064:	b29a      	uxth	r2, r3
 8004066:	4b2d      	ldr	r3, [pc, #180]	@ (800411c <Save_Data+0x20c>)
 8004068:	801a      	strh	r2, [r3, #0]
	for(int i = 0; i < current_period_cnt; i++)
 800406a:	f8d7 34c4 	ldr.w	r3, [r7, #1220]	@ 0x4c4
 800406e:	3301      	adds	r3, #1
 8004070:	f8c7 34c4 	str.w	r3, [r7, #1220]	@ 0x4c4
 8004074:	f897 34bf 	ldrb.w	r3, [r7, #1215]	@ 0x4bf
 8004078:	f8d7 24c4 	ldr.w	r2, [r7, #1220]	@ 0x4c4
 800407c:	429a      	cmp	r2, r3
 800407e:	dbe9      	blt.n	8004054 <Save_Data+0x144>
	}
	Last_Volume = (uint16_t)(Last_Volume / current_period_cnt);
 8004080:	4b26      	ldr	r3, [pc, #152]	@ (800411c <Save_Data+0x20c>)
 8004082:	881b      	ldrh	r3, [r3, #0]
 8004084:	461a      	mov	r2, r3
 8004086:	f897 34bf 	ldrb.w	r3, [r7, #1215]	@ 0x4bf
 800408a:	fb92 f3f3 	sdiv	r3, r2, r3
 800408e:	b29a      	uxth	r2, r3
 8004090:	4b22      	ldr	r3, [pc, #136]	@ (800411c <Save_Data+0x20c>)
 8004092:	801a      	strh	r2, [r3, #0]
	memset(Volume_Period, 0, sizeof(Volume_Period));
 8004094:	2228      	movs	r2, #40	@ 0x28
 8004096:	2100      	movs	r1, #0
 8004098:	481e      	ldr	r0, [pc, #120]	@ (8004114 <Save_Data+0x204>)
 800409a:	f00e feb1 	bl	8012e00 <memset>
	Period_cnt = 0;
 800409e:	4b1e      	ldr	r3, [pc, #120]	@ (8004118 <Save_Data+0x208>)
 80040a0:	2200      	movs	r2, #0
 80040a2:	701a      	strb	r2, [r3, #0]
	Address_Offset += MAX_VOLUME_LEN;
 80040a4:	4b15      	ldr	r3, [pc, #84]	@ (80040fc <Save_Data+0x1ec>)
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	3328      	adds	r3, #40	@ 0x28
 80040aa:	4a14      	ldr	r2, [pc, #80]	@ (80040fc <Save_Data+0x1ec>)
 80040ac:	6013      	str	r3, [r2, #0]

	if(sys.ACC_Present)
 80040ae:	4b1c      	ldr	r3, [pc, #112]	@ (8004120 <Save_Data+0x210>)
 80040b0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80040b4:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 80040b8:	f003 0301 	and.w	r3, r3, #1
 80040bc:	b2db      	uxtb	r3, r3
 80040be:	2b00      	cmp	r3, #0
 80040c0:	f000 80a3 	beq.w	800420a <Save_Data+0x2fa>
	{
		memcpy(Saving_Buffer + Address_Offset, Acceleration, ACCELERATION_LEN);
 80040c4:	4b0d      	ldr	r3, [pc, #52]	@ (80040fc <Save_Data+0x1ec>)
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	461a      	mov	r2, r3
 80040ca:	4b0d      	ldr	r3, [pc, #52]	@ (8004100 <Save_Data+0x1f0>)
 80040cc:	4413      	add	r3, r2
 80040ce:	4a15      	ldr	r2, [pc, #84]	@ (8004124 <Save_Data+0x214>)
 80040d0:	4618      	mov	r0, r3
 80040d2:	4611      	mov	r1, r2
 80040d4:	f44f 63af 	mov.w	r3, #1400	@ 0x578
 80040d8:	461a      	mov	r2, r3
 80040da:	f00e ff15 	bl	8012f08 <memcpy>
		Last_Acceleration.x = 0;
 80040de:	4b12      	ldr	r3, [pc, #72]	@ (8004128 <Save_Data+0x218>)
 80040e0:	2200      	movs	r2, #0
 80040e2:	805a      	strh	r2, [r3, #2]
		Last_Acceleration.y = 0;
 80040e4:	4b10      	ldr	r3, [pc, #64]	@ (8004128 <Save_Data+0x218>)
 80040e6:	2200      	movs	r2, #0
 80040e8:	809a      	strh	r2, [r3, #4]
		Last_Acceleration.z = 0;
 80040ea:	4b0f      	ldr	r3, [pc, #60]	@ (8004128 <Save_Data+0x218>)
 80040ec:	2200      	movs	r2, #0
 80040ee:	80da      	strh	r2, [r3, #6]
		for(int i = 0; i < ACCELERATION_LEN; i += 7)
 80040f0:	2300      	movs	r3, #0
 80040f2:	f8c7 34c0 	str.w	r3, [r7, #1216]	@ 0x4c0
 80040f6:	e063      	b.n	80041c0 <Save_Data+0x2b0>
 80040f8:	20001a50 	.word	0x20001a50
 80040fc:	20004c58 	.word	0x20004c58
 8004100:	20004528 	.word	0x20004528
 8004104:	20003bf4 	.word	0x20003bf4
 8004108:	200044b4 	.word	0x200044b4
 800410c:	51eb851f 	.word	0x51eb851f
 8004110:	20003d84 	.word	0x20003d84
 8004114:	20003f14 	.word	0x20003f14
 8004118:	20003bf0 	.word	0x20003bf0
 800411c:	200044b6 	.word	0x200044b6
 8004120:	200005b8 	.word	0x200005b8
 8004124:	20003f3c 	.word	0x20003f3c
 8004128:	200044b8 	.word	0x200044b8
		{
			Last_Acceleration.x += Acceleration[i+1] | (Acceleration[i+2] << 8); 
 800412c:	4b7a      	ldr	r3, [pc, #488]	@ (8004318 <Save_Data+0x408>)
 800412e:	885a      	ldrh	r2, [r3, #2]
 8004130:	f8d7 34c0 	ldr.w	r3, [r7, #1216]	@ 0x4c0
 8004134:	3301      	adds	r3, #1
 8004136:	4979      	ldr	r1, [pc, #484]	@ (800431c <Save_Data+0x40c>)
 8004138:	5ccb      	ldrb	r3, [r1, r3]
 800413a:	b219      	sxth	r1, r3
 800413c:	f8d7 34c0 	ldr.w	r3, [r7, #1216]	@ 0x4c0
 8004140:	3302      	adds	r3, #2
 8004142:	4876      	ldr	r0, [pc, #472]	@ (800431c <Save_Data+0x40c>)
 8004144:	5cc3      	ldrb	r3, [r0, r3]
 8004146:	b21b      	sxth	r3, r3
 8004148:	021b      	lsls	r3, r3, #8
 800414a:	b21b      	sxth	r3, r3
 800414c:	430b      	orrs	r3, r1
 800414e:	b21b      	sxth	r3, r3
 8004150:	b29b      	uxth	r3, r3
 8004152:	4413      	add	r3, r2
 8004154:	b29a      	uxth	r2, r3
 8004156:	4b70      	ldr	r3, [pc, #448]	@ (8004318 <Save_Data+0x408>)
 8004158:	805a      	strh	r2, [r3, #2]
			Last_Acceleration.y += Acceleration[i+3] | (Acceleration[i+4] << 8); 
 800415a:	4b6f      	ldr	r3, [pc, #444]	@ (8004318 <Save_Data+0x408>)
 800415c:	889a      	ldrh	r2, [r3, #4]
 800415e:	f8d7 34c0 	ldr.w	r3, [r7, #1216]	@ 0x4c0
 8004162:	3303      	adds	r3, #3
 8004164:	496d      	ldr	r1, [pc, #436]	@ (800431c <Save_Data+0x40c>)
 8004166:	5ccb      	ldrb	r3, [r1, r3]
 8004168:	b219      	sxth	r1, r3
 800416a:	f8d7 34c0 	ldr.w	r3, [r7, #1216]	@ 0x4c0
 800416e:	3304      	adds	r3, #4
 8004170:	486a      	ldr	r0, [pc, #424]	@ (800431c <Save_Data+0x40c>)
 8004172:	5cc3      	ldrb	r3, [r0, r3]
 8004174:	b21b      	sxth	r3, r3
 8004176:	021b      	lsls	r3, r3, #8
 8004178:	b21b      	sxth	r3, r3
 800417a:	430b      	orrs	r3, r1
 800417c:	b21b      	sxth	r3, r3
 800417e:	b29b      	uxth	r3, r3
 8004180:	4413      	add	r3, r2
 8004182:	b29a      	uxth	r2, r3
 8004184:	4b64      	ldr	r3, [pc, #400]	@ (8004318 <Save_Data+0x408>)
 8004186:	809a      	strh	r2, [r3, #4]
			Last_Acceleration.z += Acceleration[i+5] | (Acceleration[i+6] << 8); 
 8004188:	4b63      	ldr	r3, [pc, #396]	@ (8004318 <Save_Data+0x408>)
 800418a:	88da      	ldrh	r2, [r3, #6]
 800418c:	f8d7 34c0 	ldr.w	r3, [r7, #1216]	@ 0x4c0
 8004190:	3305      	adds	r3, #5
 8004192:	4962      	ldr	r1, [pc, #392]	@ (800431c <Save_Data+0x40c>)
 8004194:	5ccb      	ldrb	r3, [r1, r3]
 8004196:	b219      	sxth	r1, r3
 8004198:	f8d7 34c0 	ldr.w	r3, [r7, #1216]	@ 0x4c0
 800419c:	3306      	adds	r3, #6
 800419e:	485f      	ldr	r0, [pc, #380]	@ (800431c <Save_Data+0x40c>)
 80041a0:	5cc3      	ldrb	r3, [r0, r3]
 80041a2:	b21b      	sxth	r3, r3
 80041a4:	021b      	lsls	r3, r3, #8
 80041a6:	b21b      	sxth	r3, r3
 80041a8:	430b      	orrs	r3, r1
 80041aa:	b21b      	sxth	r3, r3
 80041ac:	b29b      	uxth	r3, r3
 80041ae:	4413      	add	r3, r2
 80041b0:	b29a      	uxth	r2, r3
 80041b2:	4b59      	ldr	r3, [pc, #356]	@ (8004318 <Save_Data+0x408>)
 80041b4:	80da      	strh	r2, [r3, #6]
		for(int i = 0; i < ACCELERATION_LEN; i += 7)
 80041b6:	f8d7 34c0 	ldr.w	r3, [r7, #1216]	@ 0x4c0
 80041ba:	3307      	adds	r3, #7
 80041bc:	f8c7 34c0 	str.w	r3, [r7, #1216]	@ 0x4c0
 80041c0:	f8d7 34c0 	ldr.w	r3, [r7, #1216]	@ 0x4c0
 80041c4:	f5b3 6faf 	cmp.w	r3, #1400	@ 0x578
 80041c8:	dbb0      	blt.n	800412c <Save_Data+0x21c>
		}
		Last_Acceleration.x = (uint16_t)(Last_Acceleration.x / (ACCELERATION_LEN / 7));
 80041ca:	4b53      	ldr	r3, [pc, #332]	@ (8004318 <Save_Data+0x408>)
 80041cc:	885b      	ldrh	r3, [r3, #2]
 80041ce:	4a54      	ldr	r2, [pc, #336]	@ (8004320 <Save_Data+0x410>)
 80041d0:	fba2 2303 	umull	r2, r3, r2, r3
 80041d4:	099b      	lsrs	r3, r3, #6
 80041d6:	b29a      	uxth	r2, r3
 80041d8:	4b4f      	ldr	r3, [pc, #316]	@ (8004318 <Save_Data+0x408>)
 80041da:	805a      	strh	r2, [r3, #2]
		Last_Acceleration.y = (uint16_t)(Last_Acceleration.y / (ACCELERATION_LEN / 7));
 80041dc:	4b4e      	ldr	r3, [pc, #312]	@ (8004318 <Save_Data+0x408>)
 80041de:	889b      	ldrh	r3, [r3, #4]
 80041e0:	4a4f      	ldr	r2, [pc, #316]	@ (8004320 <Save_Data+0x410>)
 80041e2:	fba2 2303 	umull	r2, r3, r2, r3
 80041e6:	099b      	lsrs	r3, r3, #6
 80041e8:	b29a      	uxth	r2, r3
 80041ea:	4b4b      	ldr	r3, [pc, #300]	@ (8004318 <Save_Data+0x408>)
 80041ec:	809a      	strh	r2, [r3, #4]
		Last_Acceleration.z = (uint16_t)(Last_Acceleration.z / (ACCELERATION_LEN / 7));
 80041ee:	4b4a      	ldr	r3, [pc, #296]	@ (8004318 <Save_Data+0x408>)
 80041f0:	88db      	ldrh	r3, [r3, #6]
 80041f2:	4a4b      	ldr	r2, [pc, #300]	@ (8004320 <Save_Data+0x410>)
 80041f4:	fba2 2303 	umull	r2, r3, r2, r3
 80041f8:	099b      	lsrs	r3, r3, #6
 80041fa:	b29a      	uxth	r2, r3
 80041fc:	4b46      	ldr	r3, [pc, #280]	@ (8004318 <Save_Data+0x408>)
 80041fe:	80da      	strh	r2, [r3, #6]
		flags.ACC_Complete = 0;
 8004200:	4a48      	ldr	r2, [pc, #288]	@ (8004324 <Save_Data+0x414>)
 8004202:	7813      	ldrb	r3, [r2, #0]
 8004204:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004208:	7013      	strb	r3, [r2, #0]
	}
	Address_Offset += ACCELERATION_LEN;
 800420a:	4b47      	ldr	r3, [pc, #284]	@ (8004328 <Save_Data+0x418>)
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	f503 63af 	add.w	r3, r3, #1400	@ 0x578
 8004212:	4a45      	ldr	r2, [pc, #276]	@ (8004328 <Save_Data+0x418>)
 8004214:	6013      	str	r3, [r2, #0]

	INA3221_Read_Measure(&Supply);
 8004216:	4845      	ldr	r0, [pc, #276]	@ (800432c <Save_Data+0x41c>)
 8004218:	f7fc fb12 	bl	8000840 <INA3221_Read_Measure>
	uint16_t new_temp = 0;
 800421c:	2300      	movs	r3, #0
 800421e:	f8a7 34bc 	strh.w	r3, [r7, #1212]	@ 0x4bc
	if((new_temp = Read_Temperature()) != 0)
 8004222:	f7fc fab3 	bl	800078c <Read_Temperature>
 8004226:	4603      	mov	r3, r0
 8004228:	f8a7 34bc 	strh.w	r3, [r7, #1212]	@ 0x4bc
 800422c:	f8b7 34bc 	ldrh.w	r3, [r7, #1212]	@ 0x4bc
 8004230:	2b00      	cmp	r3, #0
 8004232:	d003      	beq.n	800423c <Save_Data+0x32c>
	{
		Temperature = new_temp;
 8004234:	4a3e      	ldr	r2, [pc, #248]	@ (8004330 <Save_Data+0x420>)
 8004236:	f8b7 34bc 	ldrh.w	r3, [r7, #1212]	@ 0x4bc
 800423a:	8013      	strh	r3, [r2, #0]
	}

	uint8_t compressed_data[MAX_COMPRESSED_SIZE];
    uint32_t compressed_size = Compress_Sample(Saving_Buffer, SAVING_BUFFER_LEN, compressed_data);
 800423c:	f107 0308 	add.w	r3, r7, #8
 8004240:	461a      	mov	r2, r3
 8004242:	f44f 61e6 	mov.w	r1, #1840	@ 0x730
 8004246:	483b      	ldr	r0, [pc, #236]	@ (8004334 <Save_Data+0x424>)
 8004248:	f000 fa7a 	bl	8004740 <Compress_Sample>
 800424c:	4603      	mov	r3, r0
 800424e:	f8c7 34b8 	str.w	r3, [r7, #1208]	@ 0x4b8

	Compressed_Sample_Typedef sample;
    sample.timestamp = HAL_GetTick();
 8004252:	f004 ff37 	bl	80090c4 <HAL_GetTick>
 8004256:	4602      	mov	r2, r0
 8004258:	f507 639a 	add.w	r3, r7, #1232	@ 0x4d0
 800425c:	f5a3 639a 	sub.w	r3, r3, #1232	@ 0x4d0
 8004260:	601a      	str	r2, [r3, #0]
    sample.compressed_size = compressed_size;
 8004262:	f8d7 34b8 	ldr.w	r3, [r7, #1208]	@ 0x4b8
 8004266:	b29a      	uxth	r2, r3
 8004268:	f507 639a 	add.w	r3, r7, #1232	@ 0x4d0
 800426c:	f5a3 639a 	sub.w	r3, r3, #1232	@ 0x4d0
 8004270:	809a      	strh	r2, [r3, #4]

	RAM_Save_Measure(&sample, compressed_data);
 8004272:	f107 0208 	add.w	r2, r7, #8
 8004276:	463b      	mov	r3, r7
 8004278:	4611      	mov	r1, r2
 800427a:	4618      	mov	r0, r3
 800427c:	f000 f960 	bl	8004540 <RAM_Save_Measure>

	Address_Offset = 0;
 8004280:	4b29      	ldr	r3, [pc, #164]	@ (8004328 <Save_Data+0x418>)
 8004282:	2200      	movs	r2, #0
 8004284:	601a      	str	r2, [r3, #0]

	if(flags.Hammer_Detected || flags.Threshold_Detected)
 8004286:	4b27      	ldr	r3, [pc, #156]	@ (8004324 <Save_Data+0x414>)
 8004288:	781b      	ldrb	r3, [r3, #0]
 800428a:	f003 0308 	and.w	r3, r3, #8
 800428e:	b2db      	uxtb	r3, r3
 8004290:	2b00      	cmp	r3, #0
 8004292:	d106      	bne.n	80042a2 <Save_Data+0x392>
 8004294:	4b23      	ldr	r3, [pc, #140]	@ (8004324 <Save_Data+0x414>)
 8004296:	781b      	ldrb	r3, [r3, #0]
 8004298:	f003 0310 	and.w	r3, r3, #16
 800429c:	b2db      	uxtb	r3, r3
 800429e:	2b00      	cmp	r3, #0
 80042a0:	d034      	beq.n	800430c <Save_Data+0x3fc>
	{
		Cycles_After_Warning++;
 80042a2:	4b25      	ldr	r3, [pc, #148]	@ (8004338 <Save_Data+0x428>)
 80042a4:	881b      	ldrh	r3, [r3, #0]
 80042a6:	3301      	adds	r3, #1
 80042a8:	b29a      	uxth	r2, r3
 80042aa:	4b23      	ldr	r3, [pc, #140]	@ (8004338 <Save_Data+0x428>)
 80042ac:	801a      	strh	r2, [r3, #0]
		if(Cycles_After_Warning >= config.buffering_secs * (config.samp_freq / ACC_FIFO_WATERMARK))
 80042ae:	4b22      	ldr	r3, [pc, #136]	@ (8004338 <Save_Data+0x428>)
 80042b0:	881b      	ldrh	r3, [r3, #0]
 80042b2:	4619      	mov	r1, r3
 80042b4:	4b21      	ldr	r3, [pc, #132]	@ (800433c <Save_Data+0x42c>)
 80042b6:	791b      	ldrb	r3, [r3, #4]
 80042b8:	4618      	mov	r0, r3
 80042ba:	4b20      	ldr	r3, [pc, #128]	@ (800433c <Save_Data+0x42c>)
 80042bc:	885b      	ldrh	r3, [r3, #2]
 80042be:	4a18      	ldr	r2, [pc, #96]	@ (8004320 <Save_Data+0x410>)
 80042c0:	fba2 2303 	umull	r2, r3, r2, r3
 80042c4:	099b      	lsrs	r3, r3, #6
 80042c6:	b29b      	uxth	r3, r3
 80042c8:	fb00 f303 	mul.w	r3, r0, r3
 80042cc:	4299      	cmp	r1, r3
 80042ce:	db1d      	blt.n	800430c <Save_Data+0x3fc>
		{
			state = SEND_RECORDING_STATE;
 80042d0:	4b1b      	ldr	r3, [pc, #108]	@ (8004340 <Save_Data+0x430>)
 80042d2:	2203      	movs	r2, #3
 80042d4:	701a      	strb	r2, [r3, #0]
			Cycles_After_Warning = 0;
 80042d6:	4b18      	ldr	r3, [pc, #96]	@ (8004338 <Save_Data+0x428>)
 80042d8:	2200      	movs	r2, #0
 80042da:	801a      	strh	r2, [r3, #0]
			if(flags.Hammer_Detected)
 80042dc:	4b11      	ldr	r3, [pc, #68]	@ (8004324 <Save_Data+0x414>)
 80042de:	781b      	ldrb	r3, [r3, #0]
 80042e0:	f003 0308 	and.w	r3, r3, #8
 80042e4:	b2db      	uxtb	r3, r3
 80042e6:	2b00      	cmp	r3, #0
 80042e8:	d004      	beq.n	80042f4 <Save_Data+0x3e4>
			{
				flags.Hammer_Detected = 0;
 80042ea:	4a0e      	ldr	r2, [pc, #56]	@ (8004324 <Save_Data+0x414>)
 80042ec:	7813      	ldrb	r3, [r2, #0]
 80042ee:	f023 0308 	bic.w	r3, r3, #8
 80042f2:	7013      	strb	r3, [r2, #0]
			}
			if(flags.Threshold_Detected)
 80042f4:	4b0b      	ldr	r3, [pc, #44]	@ (8004324 <Save_Data+0x414>)
 80042f6:	781b      	ldrb	r3, [r3, #0]
 80042f8:	f003 0310 	and.w	r3, r3, #16
 80042fc:	b2db      	uxtb	r3, r3
 80042fe:	2b00      	cmp	r3, #0
 8004300:	d004      	beq.n	800430c <Save_Data+0x3fc>
			{
				flags.Threshold_Detected = 0;
 8004302:	4a08      	ldr	r2, [pc, #32]	@ (8004324 <Save_Data+0x414>)
 8004304:	7813      	ldrb	r3, [r2, #0]
 8004306:	f023 0310 	bic.w	r3, r3, #16
 800430a:	7013      	strb	r3, [r2, #0]
			}
		}
	}

}
 800430c:	bf00      	nop
 800430e:	f507 679a 	add.w	r7, r7, #1232	@ 0x4d0
 8004312:	46bd      	mov	sp, r7
 8004314:	bd80      	pop	{r7, pc}
 8004316:	bf00      	nop
 8004318:	200044b8 	.word	0x200044b8
 800431c:	20003f3c 	.word	0x20003f3c
 8004320:	51eb851f 	.word	0x51eb851f
 8004324:	20001a50 	.word	0x20001a50
 8004328:	20004c58 	.word	0x20004c58
 800432c:	20003be4 	.word	0x20003be4
 8004330:	200044c0 	.word	0x200044c0
 8004334:	20004528 	.word	0x20004528
 8004338:	20004c5c 	.word	0x20004c5c
 800433c:	20001a54 	.word	0x20001a54
 8004340:	200005b4 	.word	0x200005b4

08004344 <Start_Measure>:

/*-----AVVIO MISURA-----*/
void Start_Measure(void)
{
 8004344:	b580      	push	{r7, lr}
 8004346:	af00      	add	r7, sp, #0
	sys.RAM_Samples_Number = (config.samp_freq / ACC_FIFO_WATERMARK) * config.buffering_secs * 2;
 8004348:	4b3b      	ldr	r3, [pc, #236]	@ (8004438 <Start_Measure+0xf4>)
 800434a:	885b      	ldrh	r3, [r3, #2]
 800434c:	4a3b      	ldr	r2, [pc, #236]	@ (800443c <Start_Measure+0xf8>)
 800434e:	fba2 2303 	umull	r2, r3, r2, r3
 8004352:	099b      	lsrs	r3, r3, #6
 8004354:	b29b      	uxth	r3, r3
 8004356:	461a      	mov	r2, r3
 8004358:	4b37      	ldr	r3, [pc, #220]	@ (8004438 <Start_Measure+0xf4>)
 800435a:	791b      	ldrb	r3, [r3, #4]
 800435c:	fb02 f303 	mul.w	r3, r2, r3
 8004360:	005b      	lsls	r3, r3, #1
 8004362:	461a      	mov	r2, r3
 8004364:	4b36      	ldr	r3, [pc, #216]	@ (8004440 <Start_Measure+0xfc>)
 8004366:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800436a:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
	sys.RAM_Buffer_Len = 0;
 800436e:	4b34      	ldr	r3, [pc, #208]	@ (8004440 <Start_Measure+0xfc>)
 8004370:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004374:	461a      	mov	r2, r3
 8004376:	2300      	movs	r3, #0
 8004378:	f8c2 30a8 	str.w	r3, [r2, #168]	@ 0xa8
	memset(Pressure, 0, sizeof(Pressure));
 800437c:	f44f 7248 	mov.w	r2, #800	@ 0x320
 8004380:	2100      	movs	r1, #0
 8004382:	4830      	ldr	r0, [pc, #192]	@ (8004444 <Start_Measure+0x100>)
 8004384:	f00e fd3c 	bl	8012e00 <memset>
	memset(Volume_Period, 0, sizeof(Volume_Period));
 8004388:	2228      	movs	r2, #40	@ 0x28
 800438a:	2100      	movs	r1, #0
 800438c:	482e      	ldr	r0, [pc, #184]	@ (8004448 <Start_Measure+0x104>)
 800438e:	f00e fd37 	bl	8012e00 <memset>
	memset(Acceleration, 0, sizeof(Acceleration));
 8004392:	f44f 62af 	mov.w	r2, #1400	@ 0x578
 8004396:	2100      	movs	r1, #0
 8004398:	482c      	ldr	r0, [pc, #176]	@ (800444c <Start_Measure+0x108>)
 800439a:	f00e fd31 	bl	8012e00 <memset>
	memset(&Supply, 0, sizeof(Supply));
 800439e:	220c      	movs	r2, #12
 80043a0:	2100      	movs	r1, #0
 80043a2:	482b      	ldr	r0, [pc, #172]	@ (8004450 <Start_Measure+0x10c>)
 80043a4:	f00e fd2c 	bl	8012e00 <memset>
	Temperature = 0;
 80043a8:	4b2a      	ldr	r3, [pc, #168]	@ (8004454 <Start_Measure+0x110>)
 80043aa:	2200      	movs	r2, #0
 80043ac:	801a      	strh	r2, [r3, #0]
	Saved_Bytes = 0;
 80043ae:	4b2a      	ldr	r3, [pc, #168]	@ (8004458 <Start_Measure+0x114>)
 80043b0:	2200      	movs	r2, #0
 80043b2:	601a      	str	r2, [r3, #0]
	Saved_Samples = 0;
 80043b4:	4b29      	ldr	r3, [pc, #164]	@ (800445c <Start_Measure+0x118>)
 80043b6:	2200      	movs	r2, #0
 80043b8:	801a      	strh	r2, [r3, #0]
	Address_Offset = 0;
 80043ba:	4b29      	ldr	r3, [pc, #164]	@ (8004460 <Start_Measure+0x11c>)
 80043bc:	2200      	movs	r2, #0
 80043be:	601a      	str	r2, [r3, #0]
	Cycles_After_Warning = 0;
 80043c0:	4b28      	ldr	r3, [pc, #160]	@ (8004464 <Start_Measure+0x120>)
 80043c2:	2200      	movs	r2, #0
 80043c4:	801a      	strh	r2, [r3, #0]
	Clear_Flags();
 80043c6:	f000 fd8d 	bl	8004ee4 <Clear_Flags>

	ADC_TIMER->Instance->PSC = 100 - 1;
 80043ca:	4b27      	ldr	r3, [pc, #156]	@ (8004468 <Start_Measure+0x124>)
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	2263      	movs	r2, #99	@ 0x63
 80043d0:	629a      	str	r2, [r3, #40]	@ 0x28
	ADC_TIMER->Instance->ARR = (uint32_t)(SystemCoreClock / (ADC_TIMER->Instance->PSC * config.samp_freq)) - 1;
 80043d2:	4b26      	ldr	r3, [pc, #152]	@ (800446c <Start_Measure+0x128>)
 80043d4:	681a      	ldr	r2, [r3, #0]
 80043d6:	4b24      	ldr	r3, [pc, #144]	@ (8004468 <Start_Measure+0x124>)
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80043dc:	4916      	ldr	r1, [pc, #88]	@ (8004438 <Start_Measure+0xf4>)
 80043de:	8849      	ldrh	r1, [r1, #2]
 80043e0:	fb01 f303 	mul.w	r3, r1, r3
 80043e4:	fbb2 f2f3 	udiv	r2, r2, r3
 80043e8:	4b1f      	ldr	r3, [pc, #124]	@ (8004468 <Start_Measure+0x124>)
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	3a01      	subs	r2, #1
 80043ee:	62da      	str	r2, [r3, #44]	@ 0x2c
	ACC_TIMER->Instance->ARR = (uint32_t)(config.samp_freq / 25) - 1;
 80043f0:	4b11      	ldr	r3, [pc, #68]	@ (8004438 <Start_Measure+0xf4>)
 80043f2:	885b      	ldrh	r3, [r3, #2]
 80043f4:	4a11      	ldr	r2, [pc, #68]	@ (800443c <Start_Measure+0xf8>)
 80043f6:	fba2 2303 	umull	r2, r3, r2, r3
 80043fa:	08db      	lsrs	r3, r3, #3
 80043fc:	b29b      	uxth	r3, r3
 80043fe:	461a      	mov	r2, r3
 8004400:	4b1b      	ldr	r3, [pc, #108]	@ (8004470 <Start_Measure+0x12c>)
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	3a01      	subs	r2, #1
 8004406:	62da      	str	r2, [r3, #44]	@ 0x2c
	ACC_TIMER->Instance->CCR3 = (uint32_t)((ACC_TIMER->Instance->ARR + 1) / 2);
 8004408:	4b19      	ldr	r3, [pc, #100]	@ (8004470 <Start_Measure+0x12c>)
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800440e:	1c5a      	adds	r2, r3, #1
 8004410:	4b17      	ldr	r3, [pc, #92]	@ (8004470 <Start_Measure+0x12c>)
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	0852      	lsrs	r2, r2, #1
 8004416:	63da      	str	r2, [r3, #60]	@ 0x3c

	HAL_TIM_PWM_Start(ACC_TIMER, TIM_CHANNEL_3);
 8004418:	2108      	movs	r1, #8
 800441a:	4815      	ldr	r0, [pc, #84]	@ (8004470 <Start_Measure+0x12c>)
 800441c:	f00b fc80 	bl	800fd20 <HAL_TIM_PWM_Start>
	HAL_ADC_Start_DMA(PRESSURE_ADC, (uint32_t*)&Pressure, PRESS_FULL_SAMPLES);
 8004420:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 8004424:	4907      	ldr	r1, [pc, #28]	@ (8004444 <Start_Measure+0x100>)
 8004426:	4813      	ldr	r0, [pc, #76]	@ (8004474 <Start_Measure+0x130>)
 8004428:	f005 f9f0 	bl	800980c <HAL_ADC_Start_DMA>
	HAL_TIM_OC_Start_IT(ADC_TIMER, TIM_CHANNEL_3);
 800442c:	2108      	movs	r1, #8
 800442e:	480e      	ldr	r0, [pc, #56]	@ (8004468 <Start_Measure+0x124>)
 8004430:	f00b f9dc 	bl	800f7ec <HAL_TIM_OC_Start_IT>
}
 8004434:	bf00      	nop
 8004436:	bd80      	pop	{r7, pc}
 8004438:	20001a54 	.word	0x20001a54
 800443c:	51eb851f 	.word	0x51eb851f
 8004440:	200005b8 	.word	0x200005b8
 8004444:	20003bf4 	.word	0x20003bf4
 8004448:	20003f14 	.word	0x20003f14
 800444c:	20003f3c 	.word	0x20003f3c
 8004450:	20003be4 	.word	0x20003be4
 8004454:	200044c0 	.word	0x200044c0
 8004458:	20004c60 	.word	0x20004c60
 800445c:	20004c64 	.word	0x20004c64
 8004460:	20004c58 	.word	0x20004c58
 8004464:	20004c5c 	.word	0x20004c5c
 8004468:	200003c8 	.word	0x200003c8
 800446c:	20000000 	.word	0x20000000
 8004470:	2000037c 	.word	0x2000037c
 8004474:	20000090 	.word	0x20000090

08004478 <Warning_Detection>:

/*-----DETECTION COLPO D'ARIETE-----*/
void Warning_Detection(uint16_t* Data)
{
 8004478:	b480      	push	{r7}
 800447a:	b085      	sub	sp, #20
 800447c:	af00      	add	r7, sp, #0
 800447e:	6078      	str	r0, [r7, #4]
	uint16_t max = Data[0];
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	881b      	ldrh	r3, [r3, #0]
 8004484:	81fb      	strh	r3, [r7, #14]
	uint16_t min = Data[0];
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	881b      	ldrh	r3, [r3, #0]
 800448a:	81bb      	strh	r3, [r7, #12]

	for(int i = 1; i < PRESS_HALF_SAMPLES; i++)
 800448c:	2301      	movs	r3, #1
 800448e:	60bb      	str	r3, [r7, #8]
 8004490:	e03a      	b.n	8004508 <Warning_Detection+0x90>
	{
		if(Data[i] > max)
 8004492:	68bb      	ldr	r3, [r7, #8]
 8004494:	005b      	lsls	r3, r3, #1
 8004496:	687a      	ldr	r2, [r7, #4]
 8004498:	4413      	add	r3, r2
 800449a:	881b      	ldrh	r3, [r3, #0]
 800449c:	89fa      	ldrh	r2, [r7, #14]
 800449e:	429a      	cmp	r2, r3
 80044a0:	d206      	bcs.n	80044b0 <Warning_Detection+0x38>
		{
			max = Data[i];
 80044a2:	68bb      	ldr	r3, [r7, #8]
 80044a4:	005b      	lsls	r3, r3, #1
 80044a6:	687a      	ldr	r2, [r7, #4]
 80044a8:	4413      	add	r3, r2
 80044aa:	881b      	ldrh	r3, [r3, #0]
 80044ac:	81fb      	strh	r3, [r7, #14]
 80044ae:	e00d      	b.n	80044cc <Warning_Detection+0x54>
		}
		else if(Data[i] < min)
 80044b0:	68bb      	ldr	r3, [r7, #8]
 80044b2:	005b      	lsls	r3, r3, #1
 80044b4:	687a      	ldr	r2, [r7, #4]
 80044b6:	4413      	add	r3, r2
 80044b8:	881b      	ldrh	r3, [r3, #0]
 80044ba:	89ba      	ldrh	r2, [r7, #12]
 80044bc:	429a      	cmp	r2, r3
 80044be:	d905      	bls.n	80044cc <Warning_Detection+0x54>
		{
			min = Data[i];
 80044c0:	68bb      	ldr	r3, [r7, #8]
 80044c2:	005b      	lsls	r3, r3, #1
 80044c4:	687a      	ldr	r2, [r7, #4]
 80044c6:	4413      	add	r3, r2
 80044c8:	881b      	ldrh	r3, [r3, #0]
 80044ca:	81bb      	strh	r3, [r7, #12]
		}

		if(Data[i] < sys.Low_th || Data[i] > sys.High_th)
 80044cc:	68bb      	ldr	r3, [r7, #8]
 80044ce:	005b      	lsls	r3, r3, #1
 80044d0:	687a      	ldr	r2, [r7, #4]
 80044d2:	4413      	add	r3, r2
 80044d4:	881a      	ldrh	r2, [r3, #0]
 80044d6:	4b17      	ldr	r3, [pc, #92]	@ (8004534 <Warning_Detection+0xbc>)
 80044d8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80044dc:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80044de:	429a      	cmp	r2, r3
 80044e0:	d30a      	bcc.n	80044f8 <Warning_Detection+0x80>
 80044e2:	68bb      	ldr	r3, [r7, #8]
 80044e4:	005b      	lsls	r3, r3, #1
 80044e6:	687a      	ldr	r2, [r7, #4]
 80044e8:	4413      	add	r3, r2
 80044ea:	881a      	ldrh	r2, [r3, #0]
 80044ec:	4b11      	ldr	r3, [pc, #68]	@ (8004534 <Warning_Detection+0xbc>)
 80044ee:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80044f2:	8e1b      	ldrh	r3, [r3, #48]	@ 0x30
 80044f4:	429a      	cmp	r2, r3
 80044f6:	d904      	bls.n	8004502 <Warning_Detection+0x8a>
		{
			flags.Threshold_Detected= 1;
 80044f8:	4a0f      	ldr	r2, [pc, #60]	@ (8004538 <Warning_Detection+0xc0>)
 80044fa:	7813      	ldrb	r3, [r2, #0]
 80044fc:	f043 0310 	orr.w	r3, r3, #16
 8004500:	7013      	strb	r3, [r2, #0]
	for(int i = 1; i < PRESS_HALF_SAMPLES; i++)
 8004502:	68bb      	ldr	r3, [r7, #8]
 8004504:	3301      	adds	r3, #1
 8004506:	60bb      	str	r3, [r7, #8]
 8004508:	68bb      	ldr	r3, [r7, #8]
 800450a:	2bc7      	cmp	r3, #199	@ 0xc7
 800450c:	ddc1      	ble.n	8004492 <Warning_Detection+0x1a>
		}
	}

	if(max - min >= Hammer_Th)
 800450e:	89fa      	ldrh	r2, [r7, #14]
 8004510:	89bb      	ldrh	r3, [r7, #12]
 8004512:	1ad3      	subs	r3, r2, r3
 8004514:	4a09      	ldr	r2, [pc, #36]	@ (800453c <Warning_Detection+0xc4>)
 8004516:	8812      	ldrh	r2, [r2, #0]
 8004518:	4293      	cmp	r3, r2
 800451a:	db04      	blt.n	8004526 <Warning_Detection+0xae>
	{
		flags.Hammer_Detected = 1;
 800451c:	4a06      	ldr	r2, [pc, #24]	@ (8004538 <Warning_Detection+0xc0>)
 800451e:	7813      	ldrb	r3, [r2, #0]
 8004520:	f043 0308 	orr.w	r3, r3, #8
 8004524:	7013      	strb	r3, [r2, #0]
	}

}
 8004526:	bf00      	nop
 8004528:	3714      	adds	r7, #20
 800452a:	46bd      	mov	sp, r7
 800452c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004530:	4770      	bx	lr
 8004532:	bf00      	nop
 8004534:	200005b8 	.word	0x200005b8
 8004538:	20001a50 	.word	0x20001a50
 800453c:	20004c66 	.word	0x20004c66

08004540 <RAM_Save_Measure>:

/*-----SALVATAGGIO MISURA IN RAM-----*/
void RAM_Save_Measure(Compressed_Sample_Typedef* sample, uint8_t* compressed_data)
{
 8004540:	b580      	push	{r7, lr}
 8004542:	b084      	sub	sp, #16
 8004544:	af00      	add	r7, sp, #0
 8004546:	6078      	str	r0, [r7, #4]
 8004548:	6039      	str	r1, [r7, #0]
    uint32_t total_size = METADATA_SIZE + sample->compressed_size;
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	889b      	ldrh	r3, [r3, #4]
 800454e:	b29b      	uxth	r3, r3
 8004550:	3306      	adds	r3, #6
 8004552:	60bb      	str	r3, [r7, #8]
    uint32_t address = Saved_Bytes;
 8004554:	4b1d      	ldr	r3, [pc, #116]	@ (80045cc <RAM_Save_Measure+0x8c>)
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	60fb      	str	r3, [r7, #12]

	if(Saved_Samples >= sys.RAM_Samples_Number) 
 800455a:	4b1d      	ldr	r3, [pc, #116]	@ (80045d0 <RAM_Save_Measure+0x90>)
 800455c:	881b      	ldrh	r3, [r3, #0]
 800455e:	461a      	mov	r2, r3
 8004560:	4b1c      	ldr	r3, [pc, #112]	@ (80045d4 <RAM_Save_Measure+0x94>)
 8004562:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004566:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800456a:	429a      	cmp	r2, r3
 800456c:	d30e      	bcc.n	800458c <RAM_Save_Measure+0x4c>
	{
		sys.RAM_Buffer_Len = Saved_Bytes;
 800456e:	4b17      	ldr	r3, [pc, #92]	@ (80045cc <RAM_Save_Measure+0x8c>)
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	4a18      	ldr	r2, [pc, #96]	@ (80045d4 <RAM_Save_Measure+0x94>)
 8004574:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8004578:	f8c2 30a8 	str.w	r3, [r2, #168]	@ 0xa8
		Saved_Bytes = 0;
 800457c:	4b13      	ldr	r3, [pc, #76]	@ (80045cc <RAM_Save_Measure+0x8c>)
 800457e:	2200      	movs	r2, #0
 8004580:	601a      	str	r2, [r3, #0]
		Saved_Samples = 0;
 8004582:	4b13      	ldr	r3, [pc, #76]	@ (80045d0 <RAM_Save_Measure+0x90>)
 8004584:	2200      	movs	r2, #0
 8004586:	801a      	strh	r2, [r3, #0]
		address = 0;
 8004588:	2300      	movs	r3, #0
 800458a:	60fb      	str	r3, [r7, #12]
    }

	RAM_Write(address, METADATA_SIZE, (uint8_t*)sample);
 800458c:	687a      	ldr	r2, [r7, #4]
 800458e:	2106      	movs	r1, #6
 8004590:	68f8      	ldr	r0, [r7, #12]
 8004592:	f000 fef9 	bl	8005388 <RAM_Write>
    address += METADATA_SIZE;
 8004596:	68fb      	ldr	r3, [r7, #12]
 8004598:	3306      	adds	r3, #6
 800459a:	60fb      	str	r3, [r7, #12]

	RAM_Write(address, sample->compressed_size, compressed_data);
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	889b      	ldrh	r3, [r3, #4]
 80045a0:	b29b      	uxth	r3, r3
 80045a2:	683a      	ldr	r2, [r7, #0]
 80045a4:	4619      	mov	r1, r3
 80045a6:	68f8      	ldr	r0, [r7, #12]
 80045a8:	f000 feee 	bl	8005388 <RAM_Write>
    
    Saved_Bytes += total_size;
 80045ac:	4b07      	ldr	r3, [pc, #28]	@ (80045cc <RAM_Save_Measure+0x8c>)
 80045ae:	681a      	ldr	r2, [r3, #0]
 80045b0:	68bb      	ldr	r3, [r7, #8]
 80045b2:	4413      	add	r3, r2
 80045b4:	4a05      	ldr	r2, [pc, #20]	@ (80045cc <RAM_Save_Measure+0x8c>)
 80045b6:	6013      	str	r3, [r2, #0]
	Saved_Samples++;
 80045b8:	4b05      	ldr	r3, [pc, #20]	@ (80045d0 <RAM_Save_Measure+0x90>)
 80045ba:	881b      	ldrh	r3, [r3, #0]
 80045bc:	3301      	adds	r3, #1
 80045be:	b29a      	uxth	r2, r3
 80045c0:	4b03      	ldr	r3, [pc, #12]	@ (80045d0 <RAM_Save_Measure+0x90>)
 80045c2:	801a      	strh	r2, [r3, #0]
}
 80045c4:	bf00      	nop
 80045c6:	3710      	adds	r7, #16
 80045c8:	46bd      	mov	sp, r7
 80045ca:	bd80      	pop	{r7, pc}
 80045cc:	20004c60 	.word	0x20004c60
 80045d0:	20004c64 	.word	0x20004c64
 80045d4:	200005b8 	.word	0x200005b8

080045d8 <Send_Measure>:

/*-----INVIO MISURA COMPLETA-----*/
void Send_Measure(void)
{
 80045d8:	b580      	push	{r7, lr}
 80045da:	f5ad 6dbc 	sub.w	sp, sp, #1504	@ 0x5e0
 80045de:	af00      	add	r7, sp, #0
    uint8_t tcp_chunk[1460];
    uint32_t chunk_fill = 0;
 80045e0:	2300      	movs	r3, #0
 80045e2:	f8c7 35dc 	str.w	r3, [r7, #1500]	@ 0x5dc
    uint32_t address = Saved_Bytes;
 80045e6:	4b53      	ldr	r3, [pc, #332]	@ (8004734 <Send_Measure+0x15c>)
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	f8c7 35d8 	str.w	r3, [r7, #1496]	@ 0x5d8
    uint32_t total_processed = 0;
 80045ee:	2300      	movs	r3, #0
 80045f0:	f8c7 35d4 	str.w	r3, [r7, #1492]	@ 0x5d4

	HAL_UART_DMAStop(LTE_UART);
 80045f4:	4850      	ldr	r0, [pc, #320]	@ (8004738 <Send_Measure+0x160>)
 80045f6:	f00d fa29 	bl	8011a4c <HAL_UART_DMAStop>

    while (total_processed < sys.RAM_Buffer_Len) 
 80045fa:	e07f      	b.n	80046fc <Send_Measure+0x124>
	{
        Compressed_Sample_Typedef sample_header;
        RAM_Read(address, METADATA_SIZE, (uint8_t*)&sample_header);
 80045fc:	1d3b      	adds	r3, r7, #4
 80045fe:	461a      	mov	r2, r3
 8004600:	2106      	movs	r1, #6
 8004602:	f8d7 05d8 	ldr.w	r0, [r7, #1496]	@ 0x5d8
 8004606:	f000 fed0 	bl	80053aa <RAM_Read>
        address += METADATA_SIZE;
 800460a:	f8d7 35d8 	ldr.w	r3, [r7, #1496]	@ 0x5d8
 800460e:	3306      	adds	r3, #6
 8004610:	f8c7 35d8 	str.w	r3, [r7, #1496]	@ 0x5d8

        uint32_t sample_total_size = METADATA_SIZE + sample_header.compressed_size;
 8004614:	f507 63bc 	add.w	r3, r7, #1504	@ 0x5e0
 8004618:	f2a3 53dc 	subw	r3, r3, #1500	@ 0x5dc
 800461c:	889b      	ldrh	r3, [r3, #4]
 800461e:	3306      	adds	r3, #6
 8004620:	f8c7 35c8 	str.w	r3, [r7, #1480]	@ 0x5c8
        uint32_t sample_bytes_left = sample_total_size;
 8004624:	f8d7 35c8 	ldr.w	r3, [r7, #1480]	@ 0x5c8
 8004628:	f8c7 35d0 	str.w	r3, [r7, #1488]	@ 0x5d0
        uint32_t sample_addr = address;
 800462c:	f8d7 35d8 	ldr.w	r3, [r7, #1496]	@ 0x5d8
 8004630:	f8c7 35cc 	str.w	r3, [r7, #1484]	@ 0x5cc

        while (sample_bytes_left > 0) 
 8004634:	e040      	b.n	80046b8 <Send_Measure+0xe0>
		{
            uint32_t chunk_space = sizeof(tcp_chunk) - chunk_fill;
 8004636:	f8d7 35dc 	ldr.w	r3, [r7, #1500]	@ 0x5dc
 800463a:	f5c3 63b6 	rsb	r3, r3, #1456	@ 0x5b0
 800463e:	3304      	adds	r3, #4
 8004640:	f8c7 35c4 	str.w	r3, [r7, #1476]	@ 0x5c4
            uint32_t bytes_to_copy = (sample_bytes_left < chunk_space) ? sample_bytes_left : chunk_space;
 8004644:	f8d7 25c4 	ldr.w	r2, [r7, #1476]	@ 0x5c4
 8004648:	f8d7 35d0 	ldr.w	r3, [r7, #1488]	@ 0x5d0
 800464c:	4293      	cmp	r3, r2
 800464e:	bf28      	it	cs
 8004650:	4613      	movcs	r3, r2
 8004652:	f8c7 35c0 	str.w	r3, [r7, #1472]	@ 0x5c0

            RAM_Read(sample_addr, bytes_to_copy, tcp_chunk + chunk_fill);
 8004656:	f107 020c 	add.w	r2, r7, #12
 800465a:	f8d7 35dc 	ldr.w	r3, [r7, #1500]	@ 0x5dc
 800465e:	4413      	add	r3, r2
 8004660:	461a      	mov	r2, r3
 8004662:	f8d7 15c0 	ldr.w	r1, [r7, #1472]	@ 0x5c0
 8004666:	f8d7 05cc 	ldr.w	r0, [r7, #1484]	@ 0x5cc
 800466a:	f000 fe9e 	bl	80053aa <RAM_Read>

            chunk_fill += bytes_to_copy;
 800466e:	f8d7 25dc 	ldr.w	r2, [r7, #1500]	@ 0x5dc
 8004672:	f8d7 35c0 	ldr.w	r3, [r7, #1472]	@ 0x5c0
 8004676:	4413      	add	r3, r2
 8004678:	f8c7 35dc 	str.w	r3, [r7, #1500]	@ 0x5dc
            sample_addr += bytes_to_copy;
 800467c:	f8d7 25cc 	ldr.w	r2, [r7, #1484]	@ 0x5cc
 8004680:	f8d7 35c0 	ldr.w	r3, [r7, #1472]	@ 0x5c0
 8004684:	4413      	add	r3, r2
 8004686:	f8c7 35cc 	str.w	r3, [r7, #1484]	@ 0x5cc
            sample_bytes_left -= bytes_to_copy;
 800468a:	f8d7 25d0 	ldr.w	r2, [r7, #1488]	@ 0x5d0
 800468e:	f8d7 35c0 	ldr.w	r3, [r7, #1472]	@ 0x5c0
 8004692:	1ad3      	subs	r3, r2, r3
 8004694:	f8c7 35d0 	str.w	r3, [r7, #1488]	@ 0x5d0

            if (chunk_fill == sizeof(tcp_chunk)) 
 8004698:	f8d7 35dc 	ldr.w	r3, [r7, #1500]	@ 0x5dc
 800469c:	f240 52b4 	movw	r2, #1460	@ 0x5b4
 80046a0:	4293      	cmp	r3, r2
 80046a2:	d109      	bne.n	80046b8 <Send_Measure+0xe0>
			{
                SIM_Send_TCP_Chunk(tcp_chunk, sizeof(tcp_chunk));
 80046a4:	f107 030c 	add.w	r3, r7, #12
 80046a8:	f240 51b4 	movw	r1, #1460	@ 0x5b4
 80046ac:	4618      	mov	r0, r3
 80046ae:	f7fc ff97 	bl	80015e0 <SIM_Send_TCP_Chunk>
                chunk_fill = 0;
 80046b2:	2300      	movs	r3, #0
 80046b4:	f8c7 35dc 	str.w	r3, [r7, #1500]	@ 0x5dc
        while (sample_bytes_left > 0) 
 80046b8:	f8d7 35d0 	ldr.w	r3, [r7, #1488]	@ 0x5d0
 80046bc:	2b00      	cmp	r3, #0
 80046be:	d1ba      	bne.n	8004636 <Send_Measure+0x5e>
            }
        }

        address += sample_header.compressed_size;
 80046c0:	f507 63bc 	add.w	r3, r7, #1504	@ 0x5e0
 80046c4:	f2a3 53dc 	subw	r3, r3, #1500	@ 0x5dc
 80046c8:	889b      	ldrh	r3, [r3, #4]
 80046ca:	461a      	mov	r2, r3
 80046cc:	f8d7 35d8 	ldr.w	r3, [r7, #1496]	@ 0x5d8
 80046d0:	4413      	add	r3, r2
 80046d2:	f8c7 35d8 	str.w	r3, [r7, #1496]	@ 0x5d8
        total_processed += sample_total_size;
 80046d6:	f8d7 25d4 	ldr.w	r2, [r7, #1492]	@ 0x5d4
 80046da:	f8d7 35c8 	ldr.w	r3, [r7, #1480]	@ 0x5c8
 80046de:	4413      	add	r3, r2
 80046e0:	f8c7 35d4 	str.w	r3, [r7, #1492]	@ 0x5d4

        if (address >= sys.RAM_Buffer_Len) 
 80046e4:	4b15      	ldr	r3, [pc, #84]	@ (800473c <Send_Measure+0x164>)
 80046e6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80046ea:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 80046ee:	f8d7 25d8 	ldr.w	r2, [r7, #1496]	@ 0x5d8
 80046f2:	429a      	cmp	r2, r3
 80046f4:	d302      	bcc.n	80046fc <Send_Measure+0x124>
		{
            address = 0;
 80046f6:	2300      	movs	r3, #0
 80046f8:	f8c7 35d8 	str.w	r3, [r7, #1496]	@ 0x5d8
    while (total_processed < sys.RAM_Buffer_Len) 
 80046fc:	4b0f      	ldr	r3, [pc, #60]	@ (800473c <Send_Measure+0x164>)
 80046fe:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004702:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8004706:	f8d7 25d4 	ldr.w	r2, [r7, #1492]	@ 0x5d4
 800470a:	429a      	cmp	r2, r3
 800470c:	f4ff af76 	bcc.w	80045fc <Send_Measure+0x24>
        }
    }

    // Invia ultimo chunk parziale
    if (chunk_fill > 0) 
 8004710:	f8d7 35dc 	ldr.w	r3, [r7, #1500]	@ 0x5dc
 8004714:	2b00      	cmp	r3, #0
 8004716:	d008      	beq.n	800472a <Send_Measure+0x152>
	{
        SIM_Send_TCP_Chunk(tcp_chunk, chunk_fill);
 8004718:	f8d7 35dc 	ldr.w	r3, [r7, #1500]	@ 0x5dc
 800471c:	b29a      	uxth	r2, r3
 800471e:	f107 030c 	add.w	r3, r7, #12
 8004722:	4611      	mov	r1, r2
 8004724:	4618      	mov	r0, r3
 8004726:	f7fc ff5b 	bl	80015e0 <SIM_Send_TCP_Chunk>
    }
}
 800472a:	bf00      	nop
 800472c:	f507 67bc 	add.w	r7, r7, #1504	@ 0x5e0
 8004730:	46bd      	mov	sp, r7
 8004732:	bd80      	pop	{r7, pc}
 8004734:	20004c60 	.word	0x20004c60
 8004738:	2000049c 	.word	0x2000049c
 800473c:	200005b8 	.word	0x200005b8

08004740 <Compress_Sample>:

/*-----COMPRESSIONE DATI-----*/
uint16_t Compress_Sample(uint8_t *input, uint16_t input_len, uint8_t *output)
{
 8004740:	b480      	push	{r7}
 8004742:	b093      	sub	sp, #76	@ 0x4c
 8004744:	af00      	add	r7, sp, #0
 8004746:	60f8      	str	r0, [r7, #12]
 8004748:	460b      	mov	r3, r1
 800474a:	607a      	str	r2, [r7, #4]
 800474c:	817b      	strh	r3, [r7, #10]
    uint16_t out_idx = 0;
 800474e:	2300      	movs	r3, #0
 8004750:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46

    // 1. Pressione: delta + RLE
    uint16_t *adc = (uint16_t*)input;
 8004754:	68fb      	ldr	r3, [r7, #12]
 8004756:	62fb      	str	r3, [r7, #44]	@ 0x2c
    for (int i = 0; i < PRESS_HALF_SAMPLES;) {
 8004758:	2300      	movs	r3, #0
 800475a:	643b      	str	r3, [r7, #64]	@ 0x40
 800475c:	e090      	b.n	8004880 <Compress_Sample+0x140>
        int run = 1;
 800475e:	2301      	movs	r3, #1
 8004760:	63fb      	str	r3, [r7, #60]	@ 0x3c
        while (i + run < PRESS_HALF_SAMPLES && adc[i] == adc[i + run]) run++;
 8004762:	e002      	b.n	800476a <Compress_Sample+0x2a>
 8004764:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004766:	3301      	adds	r3, #1
 8004768:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800476a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800476c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800476e:	4413      	add	r3, r2
 8004770:	2bc7      	cmp	r3, #199	@ 0xc7
 8004772:	dc0d      	bgt.n	8004790 <Compress_Sample+0x50>
 8004774:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004776:	005b      	lsls	r3, r3, #1
 8004778:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800477a:	4413      	add	r3, r2
 800477c:	881a      	ldrh	r2, [r3, #0]
 800477e:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8004780:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004782:	440b      	add	r3, r1
 8004784:	005b      	lsls	r3, r3, #1
 8004786:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004788:	440b      	add	r3, r1
 800478a:	881b      	ldrh	r3, [r3, #0]
 800478c:	429a      	cmp	r2, r3
 800478e:	d0e9      	beq.n	8004764 <Compress_Sample+0x24>
        if (run > 2) {
 8004790:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004792:	2b02      	cmp	r3, #2
 8004794:	dd39      	ble.n	800480a <Compress_Sample+0xca>
            output[out_idx++] = 0x80; // RLE flag
 8004796:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 800479a:	1c5a      	adds	r2, r3, #1
 800479c:	f8a7 2046 	strh.w	r2, [r7, #70]	@ 0x46
 80047a0:	461a      	mov	r2, r3
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	4413      	add	r3, r2
 80047a6:	2280      	movs	r2, #128	@ 0x80
 80047a8:	701a      	strb	r2, [r3, #0]
            output[out_idx++] = run;
 80047aa:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 80047ae:	1c5a      	adds	r2, r3, #1
 80047b0:	f8a7 2046 	strh.w	r2, [r7, #70]	@ 0x46
 80047b4:	461a      	mov	r2, r3
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	4413      	add	r3, r2
 80047ba:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80047bc:	b2d2      	uxtb	r2, r2
 80047be:	701a      	strb	r2, [r3, #0]
            output[out_idx++] = adc[i] & 0xFF;
 80047c0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80047c2:	005b      	lsls	r3, r3, #1
 80047c4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80047c6:	4413      	add	r3, r2
 80047c8:	881a      	ldrh	r2, [r3, #0]
 80047ca:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 80047ce:	1c59      	adds	r1, r3, #1
 80047d0:	f8a7 1046 	strh.w	r1, [r7, #70]	@ 0x46
 80047d4:	4619      	mov	r1, r3
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	440b      	add	r3, r1
 80047da:	b2d2      	uxtb	r2, r2
 80047dc:	701a      	strb	r2, [r3, #0]
            output[out_idx++] = adc[i] >> 8;
 80047de:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80047e0:	005b      	lsls	r3, r3, #1
 80047e2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80047e4:	4413      	add	r3, r2
 80047e6:	881b      	ldrh	r3, [r3, #0]
 80047e8:	0a1b      	lsrs	r3, r3, #8
 80047ea:	b29a      	uxth	r2, r3
 80047ec:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 80047f0:	1c59      	adds	r1, r3, #1
 80047f2:	f8a7 1046 	strh.w	r1, [r7, #70]	@ 0x46
 80047f6:	4619      	mov	r1, r3
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	440b      	add	r3, r1
 80047fc:	b2d2      	uxtb	r2, r2
 80047fe:	701a      	strb	r2, [r3, #0]
            i += run;
 8004800:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004802:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004804:	4413      	add	r3, r2
 8004806:	643b      	str	r3, [r7, #64]	@ 0x40
 8004808:	e03a      	b.n	8004880 <Compress_Sample+0x140>
        } else {
            int16_t delta = adc[i] - (i > 0 ? adc[i-1] : 0);
 800480a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800480c:	005b      	lsls	r3, r3, #1
 800480e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004810:	4413      	add	r3, r2
 8004812:	881a      	ldrh	r2, [r3, #0]
 8004814:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004816:	2b00      	cmp	r3, #0
 8004818:	dd08      	ble.n	800482c <Compress_Sample+0xec>
 800481a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800481c:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 8004820:	3b01      	subs	r3, #1
 8004822:	005b      	lsls	r3, r3, #1
 8004824:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004826:	440b      	add	r3, r1
 8004828:	881b      	ldrh	r3, [r3, #0]
 800482a:	e000      	b.n	800482e <Compress_Sample+0xee>
 800482c:	2300      	movs	r3, #0
 800482e:	1ad3      	subs	r3, r2, r3
 8004830:	b29b      	uxth	r3, r3
 8004832:	82bb      	strh	r3, [r7, #20]
            output[out_idx++] = 0x00; // delta flag
 8004834:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8004838:	1c5a      	adds	r2, r3, #1
 800483a:	f8a7 2046 	strh.w	r2, [r7, #70]	@ 0x46
 800483e:	461a      	mov	r2, r3
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	4413      	add	r3, r2
 8004844:	2200      	movs	r2, #0
 8004846:	701a      	strb	r2, [r3, #0]
            output[out_idx++] = delta & 0xFF;
 8004848:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 800484c:	1c5a      	adds	r2, r3, #1
 800484e:	f8a7 2046 	strh.w	r2, [r7, #70]	@ 0x46
 8004852:	461a      	mov	r2, r3
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	4413      	add	r3, r2
 8004858:	8aba      	ldrh	r2, [r7, #20]
 800485a:	b2d2      	uxtb	r2, r2
 800485c:	701a      	strb	r2, [r3, #0]
            output[out_idx++] = delta >> 8;
 800485e:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8004862:	121b      	asrs	r3, r3, #8
 8004864:	b21a      	sxth	r2, r3
 8004866:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 800486a:	1c59      	adds	r1, r3, #1
 800486c:	f8a7 1046 	strh.w	r1, [r7, #70]	@ 0x46
 8004870:	4619      	mov	r1, r3
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	440b      	add	r3, r1
 8004876:	b2d2      	uxtb	r2, r2
 8004878:	701a      	strb	r2, [r3, #0]
            i++;
 800487a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800487c:	3301      	adds	r3, #1
 800487e:	643b      	str	r3, [r7, #64]	@ 0x40
    for (int i = 0; i < PRESS_HALF_SAMPLES;) {
 8004880:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004882:	2bc7      	cmp	r3, #199	@ 0xc7
 8004884:	f77f af6b 	ble.w	800475e <Compress_Sample+0x1e>
        }
    }

    // 2. Flusso: RLE
    uint16_t *counter = (uint16_t*)(input + PRESS_HALF_LEN);
 8004888:	68fb      	ldr	r3, [r7, #12]
 800488a:	f503 73c8 	add.w	r3, r3, #400	@ 0x190
 800488e:	62bb      	str	r3, [r7, #40]	@ 0x28
    for (int i = 0; i < MAX_VOLUME_SAMPLES;) {
 8004890:	2300      	movs	r3, #0
 8004892:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004894:	e082      	b.n	800499c <Compress_Sample+0x25c>
        int run = 1;
 8004896:	2301      	movs	r3, #1
 8004898:	637b      	str	r3, [r7, #52]	@ 0x34
        while (i + run < MAX_VOLUME_SAMPLES && counter[i] == counter[i + run]) run++;
 800489a:	e002      	b.n	80048a2 <Compress_Sample+0x162>
 800489c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800489e:	3301      	adds	r3, #1
 80048a0:	637b      	str	r3, [r7, #52]	@ 0x34
 80048a2:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80048a4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80048a6:	4413      	add	r3, r2
 80048a8:	2b13      	cmp	r3, #19
 80048aa:	dc0d      	bgt.n	80048c8 <Compress_Sample+0x188>
 80048ac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80048ae:	005b      	lsls	r3, r3, #1
 80048b0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80048b2:	4413      	add	r3, r2
 80048b4:	881a      	ldrh	r2, [r3, #0]
 80048b6:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80048b8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80048ba:	440b      	add	r3, r1
 80048bc:	005b      	lsls	r3, r3, #1
 80048be:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80048c0:	440b      	add	r3, r1
 80048c2:	881b      	ldrh	r3, [r3, #0]
 80048c4:	429a      	cmp	r2, r3
 80048c6:	d0e9      	beq.n	800489c <Compress_Sample+0x15c>
        if (run > 2) {
 80048c8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80048ca:	2b02      	cmp	r3, #2
 80048cc:	dd39      	ble.n	8004942 <Compress_Sample+0x202>
            output[out_idx++] = 0x81; // RLE flag
 80048ce:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 80048d2:	1c5a      	adds	r2, r3, #1
 80048d4:	f8a7 2046 	strh.w	r2, [r7, #70]	@ 0x46
 80048d8:	461a      	mov	r2, r3
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	4413      	add	r3, r2
 80048de:	2281      	movs	r2, #129	@ 0x81
 80048e0:	701a      	strb	r2, [r3, #0]
            output[out_idx++] = run;
 80048e2:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 80048e6:	1c5a      	adds	r2, r3, #1
 80048e8:	f8a7 2046 	strh.w	r2, [r7, #70]	@ 0x46
 80048ec:	461a      	mov	r2, r3
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	4413      	add	r3, r2
 80048f2:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80048f4:	b2d2      	uxtb	r2, r2
 80048f6:	701a      	strb	r2, [r3, #0]
            output[out_idx++] = counter[i] & 0xFF;
 80048f8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80048fa:	005b      	lsls	r3, r3, #1
 80048fc:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80048fe:	4413      	add	r3, r2
 8004900:	881a      	ldrh	r2, [r3, #0]
 8004902:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8004906:	1c59      	adds	r1, r3, #1
 8004908:	f8a7 1046 	strh.w	r1, [r7, #70]	@ 0x46
 800490c:	4619      	mov	r1, r3
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	440b      	add	r3, r1
 8004912:	b2d2      	uxtb	r2, r2
 8004914:	701a      	strb	r2, [r3, #0]
            output[out_idx++] = counter[i] >> 8;
 8004916:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004918:	005b      	lsls	r3, r3, #1
 800491a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800491c:	4413      	add	r3, r2
 800491e:	881b      	ldrh	r3, [r3, #0]
 8004920:	0a1b      	lsrs	r3, r3, #8
 8004922:	b29a      	uxth	r2, r3
 8004924:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8004928:	1c59      	adds	r1, r3, #1
 800492a:	f8a7 1046 	strh.w	r1, [r7, #70]	@ 0x46
 800492e:	4619      	mov	r1, r3
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	440b      	add	r3, r1
 8004934:	b2d2      	uxtb	r2, r2
 8004936:	701a      	strb	r2, [r3, #0]
            i += run;
 8004938:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800493a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800493c:	4413      	add	r3, r2
 800493e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004940:	e02c      	b.n	800499c <Compress_Sample+0x25c>
        } else {
            output[out_idx++] = 0x01; // value flag
 8004942:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8004946:	1c5a      	adds	r2, r3, #1
 8004948:	f8a7 2046 	strh.w	r2, [r7, #70]	@ 0x46
 800494c:	461a      	mov	r2, r3
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	4413      	add	r3, r2
 8004952:	2201      	movs	r2, #1
 8004954:	701a      	strb	r2, [r3, #0]
            output[out_idx++] = counter[i] & 0xFF;
 8004956:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004958:	005b      	lsls	r3, r3, #1
 800495a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800495c:	4413      	add	r3, r2
 800495e:	881a      	ldrh	r2, [r3, #0]
 8004960:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8004964:	1c59      	adds	r1, r3, #1
 8004966:	f8a7 1046 	strh.w	r1, [r7, #70]	@ 0x46
 800496a:	4619      	mov	r1, r3
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	440b      	add	r3, r1
 8004970:	b2d2      	uxtb	r2, r2
 8004972:	701a      	strb	r2, [r3, #0]
            output[out_idx++] = counter[i] >> 8;
 8004974:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004976:	005b      	lsls	r3, r3, #1
 8004978:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800497a:	4413      	add	r3, r2
 800497c:	881b      	ldrh	r3, [r3, #0]
 800497e:	0a1b      	lsrs	r3, r3, #8
 8004980:	b29a      	uxth	r2, r3
 8004982:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8004986:	1c59      	adds	r1, r3, #1
 8004988:	f8a7 1046 	strh.w	r1, [r7, #70]	@ 0x46
 800498c:	4619      	mov	r1, r3
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	440b      	add	r3, r1
 8004992:	b2d2      	uxtb	r2, r2
 8004994:	701a      	strb	r2, [r3, #0]
            i++;
 8004996:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004998:	3301      	adds	r3, #1
 800499a:	63bb      	str	r3, [r7, #56]	@ 0x38
    for (int i = 0; i < MAX_VOLUME_SAMPLES;) {
 800499c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800499e:	2b13      	cmp	r3, #19
 80049a0:	f77f af79 	ble.w	8004896 <Compress_Sample+0x156>
        }
    }

    // 3. Accelerometro: header + delta/RLE per assi
    uint8_t *accel = input + PRESS_HALF_LEN + MAX_VOLUME_LEN;
 80049a4:	68fb      	ldr	r3, [r7, #12]
 80049a6:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 80049aa:	627b      	str	r3, [r7, #36]	@ 0x24
    for (int i = 0; i < ACC_FIFO_WATERMARK; i++) {
 80049ac:	2300      	movs	r3, #0
 80049ae:	633b      	str	r3, [r7, #48]	@ 0x30
 80049b0:	e10d      	b.n	8004bce <Compress_Sample+0x48e>
        uint8_t header = accel[i*7];
 80049b2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80049b4:	4613      	mov	r3, r2
 80049b6:	00db      	lsls	r3, r3, #3
 80049b8:	1a9b      	subs	r3, r3, r2
 80049ba:	461a      	mov	r2, r3
 80049bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80049be:	4413      	add	r3, r2
 80049c0:	781b      	ldrb	r3, [r3, #0]
 80049c2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        uint16_t x = accel[i*7+1] | (accel[i*7+2] << 8);
 80049c6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80049c8:	4613      	mov	r3, r2
 80049ca:	00db      	lsls	r3, r3, #3
 80049cc:	1a9b      	subs	r3, r3, r2
 80049ce:	3301      	adds	r3, #1
 80049d0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80049d2:	4413      	add	r3, r2
 80049d4:	781b      	ldrb	r3, [r3, #0]
 80049d6:	b219      	sxth	r1, r3
 80049d8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80049da:	4613      	mov	r3, r2
 80049dc:	00db      	lsls	r3, r3, #3
 80049de:	1a9b      	subs	r3, r3, r2
 80049e0:	3302      	adds	r3, #2
 80049e2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80049e4:	4413      	add	r3, r2
 80049e6:	781b      	ldrb	r3, [r3, #0]
 80049e8:	b21b      	sxth	r3, r3
 80049ea:	021b      	lsls	r3, r3, #8
 80049ec:	b21b      	sxth	r3, r3
 80049ee:	430b      	orrs	r3, r1
 80049f0:	b21b      	sxth	r3, r3
 80049f2:	843b      	strh	r3, [r7, #32]
        uint16_t y = accel[i*7+3] | (accel[i*7+4] << 8);
 80049f4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80049f6:	4613      	mov	r3, r2
 80049f8:	00db      	lsls	r3, r3, #3
 80049fa:	1a9b      	subs	r3, r3, r2
 80049fc:	3303      	adds	r3, #3
 80049fe:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004a00:	4413      	add	r3, r2
 8004a02:	781b      	ldrb	r3, [r3, #0]
 8004a04:	b219      	sxth	r1, r3
 8004a06:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004a08:	4613      	mov	r3, r2
 8004a0a:	00db      	lsls	r3, r3, #3
 8004a0c:	1a9b      	subs	r3, r3, r2
 8004a0e:	3304      	adds	r3, #4
 8004a10:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004a12:	4413      	add	r3, r2
 8004a14:	781b      	ldrb	r3, [r3, #0]
 8004a16:	b21b      	sxth	r3, r3
 8004a18:	021b      	lsls	r3, r3, #8
 8004a1a:	b21b      	sxth	r3, r3
 8004a1c:	430b      	orrs	r3, r1
 8004a1e:	b21b      	sxth	r3, r3
 8004a20:	83fb      	strh	r3, [r7, #30]
        uint16_t z = accel[i*7+5] | (accel[i*7+6] << 8);
 8004a22:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004a24:	4613      	mov	r3, r2
 8004a26:	00db      	lsls	r3, r3, #3
 8004a28:	1a9b      	subs	r3, r3, r2
 8004a2a:	3305      	adds	r3, #5
 8004a2c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004a2e:	4413      	add	r3, r2
 8004a30:	781b      	ldrb	r3, [r3, #0]
 8004a32:	b219      	sxth	r1, r3
 8004a34:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004a36:	4613      	mov	r3, r2
 8004a38:	00db      	lsls	r3, r3, #3
 8004a3a:	1a9b      	subs	r3, r3, r2
 8004a3c:	3306      	adds	r3, #6
 8004a3e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004a40:	4413      	add	r3, r2
 8004a42:	781b      	ldrb	r3, [r3, #0]
 8004a44:	b21b      	sxth	r3, r3
 8004a46:	021b      	lsls	r3, r3, #8
 8004a48:	b21b      	sxth	r3, r3
 8004a4a:	430b      	orrs	r3, r1
 8004a4c:	b21b      	sxth	r3, r3
 8004a4e:	83bb      	strh	r3, [r7, #28]

        // Delta coding per X/Y/Z
        int16_t dx = x - (i > 0 ? (accel[(i-1)*7+1] | (accel[(i-1)*7+2] << 8)) : 0);
 8004a50:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004a52:	2b00      	cmp	r3, #0
 8004a54:	dd19      	ble.n	8004a8a <Compress_Sample+0x34a>
 8004a56:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004a58:	1e5a      	subs	r2, r3, #1
 8004a5a:	4613      	mov	r3, r2
 8004a5c:	00db      	lsls	r3, r3, #3
 8004a5e:	1a9b      	subs	r3, r3, r2
 8004a60:	3301      	adds	r3, #1
 8004a62:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004a64:	4413      	add	r3, r2
 8004a66:	781b      	ldrb	r3, [r3, #0]
 8004a68:	b219      	sxth	r1, r3
 8004a6a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004a6c:	1e5a      	subs	r2, r3, #1
 8004a6e:	4613      	mov	r3, r2
 8004a70:	00db      	lsls	r3, r3, #3
 8004a72:	1a9b      	subs	r3, r3, r2
 8004a74:	3302      	adds	r3, #2
 8004a76:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004a78:	4413      	add	r3, r2
 8004a7a:	781b      	ldrb	r3, [r3, #0]
 8004a7c:	b21b      	sxth	r3, r3
 8004a7e:	021b      	lsls	r3, r3, #8
 8004a80:	b21b      	sxth	r3, r3
 8004a82:	430b      	orrs	r3, r1
 8004a84:	b21b      	sxth	r3, r3
 8004a86:	b29b      	uxth	r3, r3
 8004a88:	e000      	b.n	8004a8c <Compress_Sample+0x34c>
 8004a8a:	2300      	movs	r3, #0
 8004a8c:	8c3a      	ldrh	r2, [r7, #32]
 8004a8e:	1ad3      	subs	r3, r2, r3
 8004a90:	b29b      	uxth	r3, r3
 8004a92:	837b      	strh	r3, [r7, #26]
        int16_t dy = y - (i > 0 ? (accel[(i-1)*7+3] | (accel[(i-1)*7+4] << 8)) : 0);
 8004a94:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004a96:	2b00      	cmp	r3, #0
 8004a98:	dd19      	ble.n	8004ace <Compress_Sample+0x38e>
 8004a9a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004a9c:	1e5a      	subs	r2, r3, #1
 8004a9e:	4613      	mov	r3, r2
 8004aa0:	00db      	lsls	r3, r3, #3
 8004aa2:	1a9b      	subs	r3, r3, r2
 8004aa4:	3303      	adds	r3, #3
 8004aa6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004aa8:	4413      	add	r3, r2
 8004aaa:	781b      	ldrb	r3, [r3, #0]
 8004aac:	b219      	sxth	r1, r3
 8004aae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004ab0:	1e5a      	subs	r2, r3, #1
 8004ab2:	4613      	mov	r3, r2
 8004ab4:	00db      	lsls	r3, r3, #3
 8004ab6:	1a9b      	subs	r3, r3, r2
 8004ab8:	3304      	adds	r3, #4
 8004aba:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004abc:	4413      	add	r3, r2
 8004abe:	781b      	ldrb	r3, [r3, #0]
 8004ac0:	b21b      	sxth	r3, r3
 8004ac2:	021b      	lsls	r3, r3, #8
 8004ac4:	b21b      	sxth	r3, r3
 8004ac6:	430b      	orrs	r3, r1
 8004ac8:	b21b      	sxth	r3, r3
 8004aca:	b29b      	uxth	r3, r3
 8004acc:	e000      	b.n	8004ad0 <Compress_Sample+0x390>
 8004ace:	2300      	movs	r3, #0
 8004ad0:	8bfa      	ldrh	r2, [r7, #30]
 8004ad2:	1ad3      	subs	r3, r2, r3
 8004ad4:	b29b      	uxth	r3, r3
 8004ad6:	833b      	strh	r3, [r7, #24]
        int16_t dz = z - (i > 0 ? (accel[(i-1)*7+5] | (accel[(i-1)*7+6] << 8)) : 0);
 8004ad8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004ada:	2b00      	cmp	r3, #0
 8004adc:	dd19      	ble.n	8004b12 <Compress_Sample+0x3d2>
 8004ade:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004ae0:	1e5a      	subs	r2, r3, #1
 8004ae2:	4613      	mov	r3, r2
 8004ae4:	00db      	lsls	r3, r3, #3
 8004ae6:	1a9b      	subs	r3, r3, r2
 8004ae8:	3305      	adds	r3, #5
 8004aea:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004aec:	4413      	add	r3, r2
 8004aee:	781b      	ldrb	r3, [r3, #0]
 8004af0:	b219      	sxth	r1, r3
 8004af2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004af4:	1e5a      	subs	r2, r3, #1
 8004af6:	4613      	mov	r3, r2
 8004af8:	00db      	lsls	r3, r3, #3
 8004afa:	1a9b      	subs	r3, r3, r2
 8004afc:	3306      	adds	r3, #6
 8004afe:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004b00:	4413      	add	r3, r2
 8004b02:	781b      	ldrb	r3, [r3, #0]
 8004b04:	b21b      	sxth	r3, r3
 8004b06:	021b      	lsls	r3, r3, #8
 8004b08:	b21b      	sxth	r3, r3
 8004b0a:	430b      	orrs	r3, r1
 8004b0c:	b21b      	sxth	r3, r3
 8004b0e:	b29b      	uxth	r3, r3
 8004b10:	e000      	b.n	8004b14 <Compress_Sample+0x3d4>
 8004b12:	2300      	movs	r3, #0
 8004b14:	8bba      	ldrh	r2, [r7, #28]
 8004b16:	1ad3      	subs	r3, r2, r3
 8004b18:	b29b      	uxth	r3, r3
 8004b1a:	82fb      	strh	r3, [r7, #22]

        output[out_idx++] = header;
 8004b1c:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8004b20:	1c5a      	adds	r2, r3, #1
 8004b22:	f8a7 2046 	strh.w	r2, [r7, #70]	@ 0x46
 8004b26:	461a      	mov	r2, r3
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	4413      	add	r3, r2
 8004b2c:	f897 2023 	ldrb.w	r2, [r7, #35]	@ 0x23
 8004b30:	701a      	strb	r2, [r3, #0]
        output[out_idx++] = dx & 0xFF;
 8004b32:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8004b36:	1c5a      	adds	r2, r3, #1
 8004b38:	f8a7 2046 	strh.w	r2, [r7, #70]	@ 0x46
 8004b3c:	461a      	mov	r2, r3
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	4413      	add	r3, r2
 8004b42:	8b7a      	ldrh	r2, [r7, #26]
 8004b44:	b2d2      	uxtb	r2, r2
 8004b46:	701a      	strb	r2, [r3, #0]
        output[out_idx++] = dx >> 8;
 8004b48:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8004b4c:	121b      	asrs	r3, r3, #8
 8004b4e:	b21a      	sxth	r2, r3
 8004b50:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8004b54:	1c59      	adds	r1, r3, #1
 8004b56:	f8a7 1046 	strh.w	r1, [r7, #70]	@ 0x46
 8004b5a:	4619      	mov	r1, r3
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	440b      	add	r3, r1
 8004b60:	b2d2      	uxtb	r2, r2
 8004b62:	701a      	strb	r2, [r3, #0]
        output[out_idx++] = dy & 0xFF;
 8004b64:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8004b68:	1c5a      	adds	r2, r3, #1
 8004b6a:	f8a7 2046 	strh.w	r2, [r7, #70]	@ 0x46
 8004b6e:	461a      	mov	r2, r3
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	4413      	add	r3, r2
 8004b74:	8b3a      	ldrh	r2, [r7, #24]
 8004b76:	b2d2      	uxtb	r2, r2
 8004b78:	701a      	strb	r2, [r3, #0]
        output[out_idx++] = dy >> 8;
 8004b7a:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8004b7e:	121b      	asrs	r3, r3, #8
 8004b80:	b21a      	sxth	r2, r3
 8004b82:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8004b86:	1c59      	adds	r1, r3, #1
 8004b88:	f8a7 1046 	strh.w	r1, [r7, #70]	@ 0x46
 8004b8c:	4619      	mov	r1, r3
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	440b      	add	r3, r1
 8004b92:	b2d2      	uxtb	r2, r2
 8004b94:	701a      	strb	r2, [r3, #0]
        output[out_idx++] = dz & 0xFF;
 8004b96:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8004b9a:	1c5a      	adds	r2, r3, #1
 8004b9c:	f8a7 2046 	strh.w	r2, [r7, #70]	@ 0x46
 8004ba0:	461a      	mov	r2, r3
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	4413      	add	r3, r2
 8004ba6:	8afa      	ldrh	r2, [r7, #22]
 8004ba8:	b2d2      	uxtb	r2, r2
 8004baa:	701a      	strb	r2, [r3, #0]
        output[out_idx++] = dz >> 8;
 8004bac:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8004bb0:	121b      	asrs	r3, r3, #8
 8004bb2:	b21a      	sxth	r2, r3
 8004bb4:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8004bb8:	1c59      	adds	r1, r3, #1
 8004bba:	f8a7 1046 	strh.w	r1, [r7, #70]	@ 0x46
 8004bbe:	4619      	mov	r1, r3
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	440b      	add	r3, r1
 8004bc4:	b2d2      	uxtb	r2, r2
 8004bc6:	701a      	strb	r2, [r3, #0]
    for (int i = 0; i < ACC_FIFO_WATERMARK; i++) {
 8004bc8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004bca:	3301      	adds	r3, #1
 8004bcc:	633b      	str	r3, [r7, #48]	@ 0x30
 8004bce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004bd0:	2bc7      	cmp	r3, #199	@ 0xc7
 8004bd2:	f77f aeee 	ble.w	80049b2 <Compress_Sample+0x272>
    }

    return out_idx;
 8004bd6:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
}
 8004bda:	4618      	mov	r0, r3
 8004bdc:	374c      	adds	r7, #76	@ 0x4c
 8004bde:	46bd      	mov	sp, r7
 8004be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004be4:	4770      	bx	lr
	...

08004be8 <Apply_Config>:

/*-----APPLICA VALORI CONFIGURAZIONE-----*/
void Apply_Config(void)
{
 8004be8:	b590      	push	{r4, r7, lr}
 8004bea:	f5ad 5d81 	sub.w	sp, sp, #4128	@ 0x1020
 8004bee:	b085      	sub	sp, #20
 8004bf0:	af00      	add	r7, sp, #0
	FIL config_file;
	UINT bytes_read;
	
	if(strcmp(cfg_var, "DEVICE_ID") == 0) 
 8004bf2:	49a7      	ldr	r1, [pc, #668]	@ (8004e90 <Apply_Config+0x2a8>)
 8004bf4:	48a7      	ldr	r0, [pc, #668]	@ (8004e94 <Apply_Config+0x2ac>)
 8004bf6:	f7fb faeb 	bl	80001d0 <strcmp>
 8004bfa:	4603      	mov	r3, r0
 8004bfc:	2b00      	cmp	r3, #0
 8004bfe:	d107      	bne.n	8004c10 <Apply_Config+0x28>
	{
		config.device_id = (uint8_t)atoi(new_cfg_val);
 8004c00:	48a5      	ldr	r0, [pc, #660]	@ (8004e98 <Apply_Config+0x2b0>)
 8004c02:	f00e f813 	bl	8012c2c <atoi>
 8004c06:	4603      	mov	r3, r0
 8004c08:	b2da      	uxtb	r2, r3
 8004c0a:	4ba4      	ldr	r3, [pc, #656]	@ (8004e9c <Apply_Config+0x2b4>)
 8004c0c:	701a      	strb	r2, [r3, #0]
 8004c0e:	e0c2      	b.n	8004d96 <Apply_Config+0x1ae>
    }
	else if(strcmp(cfg_var, "SAMP_FREQ") == 0)
 8004c10:	49a3      	ldr	r1, [pc, #652]	@ (8004ea0 <Apply_Config+0x2b8>)
 8004c12:	48a0      	ldr	r0, [pc, #640]	@ (8004e94 <Apply_Config+0x2ac>)
 8004c14:	f7fb fadc 	bl	80001d0 <strcmp>
 8004c18:	4603      	mov	r3, r0
 8004c1a:	2b00      	cmp	r3, #0
 8004c1c:	d118      	bne.n	8004c50 <Apply_Config+0x68>
	{
		if((uint16_t)atoi(new_cfg_val) != 800 && (uint16_t)atoi(new_cfg_val) != 1600)
 8004c1e:	489e      	ldr	r0, [pc, #632]	@ (8004e98 <Apply_Config+0x2b0>)
 8004c20:	f00e f804 	bl	8012c2c <atoi>
 8004c24:	4603      	mov	r3, r0
 8004c26:	b29b      	uxth	r3, r3
 8004c28:	f5b3 7f48 	cmp.w	r3, #800	@ 0x320
 8004c2c:	d008      	beq.n	8004c40 <Apply_Config+0x58>
 8004c2e:	489a      	ldr	r0, [pc, #616]	@ (8004e98 <Apply_Config+0x2b0>)
 8004c30:	f00d fffc 	bl	8012c2c <atoi>
 8004c34:	4603      	mov	r3, r0
 8004c36:	b29b      	uxth	r3, r3
 8004c38:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 8004c3c:	f040 811b 	bne.w	8004e76 <Apply_Config+0x28e>
		{
			return;
		}
		else
		{
			config.samp_freq = (uint16_t)atoi(new_cfg_val);
 8004c40:	4895      	ldr	r0, [pc, #596]	@ (8004e98 <Apply_Config+0x2b0>)
 8004c42:	f00d fff3 	bl	8012c2c <atoi>
 8004c46:	4603      	mov	r3, r0
 8004c48:	b29a      	uxth	r2, r3
 8004c4a:	4b94      	ldr	r3, [pc, #592]	@ (8004e9c <Apply_Config+0x2b4>)
 8004c4c:	805a      	strh	r2, [r3, #2]
 8004c4e:	e0a2      	b.n	8004d96 <Apply_Config+0x1ae>
		}
	}
	else if(strcmp(cfg_var, "BUFFER_SECS") == 0)
 8004c50:	4994      	ldr	r1, [pc, #592]	@ (8004ea4 <Apply_Config+0x2bc>)
 8004c52:	4890      	ldr	r0, [pc, #576]	@ (8004e94 <Apply_Config+0x2ac>)
 8004c54:	f7fb fabc 	bl	80001d0 <strcmp>
 8004c58:	4603      	mov	r3, r0
 8004c5a:	2b00      	cmp	r3, #0
 8004c5c:	d117      	bne.n	8004c8e <Apply_Config+0xa6>
	{
		if((uint8_t)atoi(new_cfg_val) < 5 || (uint8_t)atoi(new_cfg_val) > 30)
 8004c5e:	488e      	ldr	r0, [pc, #568]	@ (8004e98 <Apply_Config+0x2b0>)
 8004c60:	f00d ffe4 	bl	8012c2c <atoi>
 8004c64:	4603      	mov	r3, r0
 8004c66:	b2db      	uxtb	r3, r3
 8004c68:	2b04      	cmp	r3, #4
 8004c6a:	f240 8106 	bls.w	8004e7a <Apply_Config+0x292>
 8004c6e:	488a      	ldr	r0, [pc, #552]	@ (8004e98 <Apply_Config+0x2b0>)
 8004c70:	f00d ffdc 	bl	8012c2c <atoi>
 8004c74:	4603      	mov	r3, r0
 8004c76:	b2db      	uxtb	r3, r3
 8004c78:	2b1e      	cmp	r3, #30
 8004c7a:	f200 80fe 	bhi.w	8004e7a <Apply_Config+0x292>
		{
			return;
		}
		else
		{
			config.buffering_secs = (uint8_t)atoi(new_cfg_val);
 8004c7e:	4886      	ldr	r0, [pc, #536]	@ (8004e98 <Apply_Config+0x2b0>)
 8004c80:	f00d ffd4 	bl	8012c2c <atoi>
 8004c84:	4603      	mov	r3, r0
 8004c86:	b2da      	uxtb	r2, r3
 8004c88:	4b84      	ldr	r3, [pc, #528]	@ (8004e9c <Apply_Config+0x2b4>)
 8004c8a:	711a      	strb	r2, [r3, #4]
 8004c8c:	e083      	b.n	8004d96 <Apply_Config+0x1ae>
		}
	}
	else if(strcmp(cfg_var, "HAMMER_TH") == 0)
 8004c8e:	4986      	ldr	r1, [pc, #536]	@ (8004ea8 <Apply_Config+0x2c0>)
 8004c90:	4880      	ldr	r0, [pc, #512]	@ (8004e94 <Apply_Config+0x2ac>)
 8004c92:	f7fb fa9d 	bl	80001d0 <strcmp>
 8004c96:	4603      	mov	r3, r0
 8004c98:	2b00      	cmp	r3, #0
 8004c9a:	d107      	bne.n	8004cac <Apply_Config+0xc4>
	{
		config.hammer_th = (uint16_t)atoi(new_cfg_val);
 8004c9c:	487e      	ldr	r0, [pc, #504]	@ (8004e98 <Apply_Config+0x2b0>)
 8004c9e:	f00d ffc5 	bl	8012c2c <atoi>
 8004ca2:	4603      	mov	r3, r0
 8004ca4:	b29a      	uxth	r2, r3
 8004ca6:	4b7d      	ldr	r3, [pc, #500]	@ (8004e9c <Apply_Config+0x2b4>)
 8004ca8:	80da      	strh	r2, [r3, #6]
 8004caa:	e074      	b.n	8004d96 <Apply_Config+0x1ae>
	}
    else if(strcmp(cfg_var, "HIGH_TH") == 0) 
 8004cac:	497f      	ldr	r1, [pc, #508]	@ (8004eac <Apply_Config+0x2c4>)
 8004cae:	4879      	ldr	r0, [pc, #484]	@ (8004e94 <Apply_Config+0x2ac>)
 8004cb0:	f7fb fa8e 	bl	80001d0 <strcmp>
 8004cb4:	4603      	mov	r3, r0
 8004cb6:	2b00      	cmp	r3, #0
 8004cb8:	d113      	bne.n	8004ce2 <Apply_Config+0xfa>
	{
        if(cfg_idx >= 0 && cfg_idx < 24) 
 8004cba:	4b7d      	ldr	r3, [pc, #500]	@ (8004eb0 <Apply_Config+0x2c8>)
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	2b00      	cmp	r3, #0
 8004cc0:	db69      	blt.n	8004d96 <Apply_Config+0x1ae>
 8004cc2:	4b7b      	ldr	r3, [pc, #492]	@ (8004eb0 <Apply_Config+0x2c8>)
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	2b17      	cmp	r3, #23
 8004cc8:	dc65      	bgt.n	8004d96 <Apply_Config+0x1ae>
		{
            config.high_th[cfg_idx] = (uint16_t)atoi(new_cfg_val);
 8004cca:	4873      	ldr	r0, [pc, #460]	@ (8004e98 <Apply_Config+0x2b0>)
 8004ccc:	f00d ffae 	bl	8012c2c <atoi>
 8004cd0:	4602      	mov	r2, r0
 8004cd2:	4b77      	ldr	r3, [pc, #476]	@ (8004eb0 <Apply_Config+0x2c8>)
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	b291      	uxth	r1, r2
 8004cd8:	4a70      	ldr	r2, [pc, #448]	@ (8004e9c <Apply_Config+0x2b4>)
 8004cda:	331c      	adds	r3, #28
 8004cdc:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 8004ce0:	e059      	b.n	8004d96 <Apply_Config+0x1ae>
        }
    }
    else if(strcmp(cfg_var, "LOW_TH") == 0) 
 8004ce2:	4974      	ldr	r1, [pc, #464]	@ (8004eb4 <Apply_Config+0x2cc>)
 8004ce4:	486b      	ldr	r0, [pc, #428]	@ (8004e94 <Apply_Config+0x2ac>)
 8004ce6:	f7fb fa73 	bl	80001d0 <strcmp>
 8004cea:	4603      	mov	r3, r0
 8004cec:	2b00      	cmp	r3, #0
 8004cee:	d113      	bne.n	8004d18 <Apply_Config+0x130>
	{
        if(cfg_idx >= 0 && cfg_idx < 24) 
 8004cf0:	4b6f      	ldr	r3, [pc, #444]	@ (8004eb0 <Apply_Config+0x2c8>)
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	2b00      	cmp	r3, #0
 8004cf6:	db4e      	blt.n	8004d96 <Apply_Config+0x1ae>
 8004cf8:	4b6d      	ldr	r3, [pc, #436]	@ (8004eb0 <Apply_Config+0x2c8>)
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	2b17      	cmp	r3, #23
 8004cfe:	dc4a      	bgt.n	8004d96 <Apply_Config+0x1ae>
		{
            config.low_th[cfg_idx] = (uint16_t)atoi(new_cfg_val);
 8004d00:	4865      	ldr	r0, [pc, #404]	@ (8004e98 <Apply_Config+0x2b0>)
 8004d02:	f00d ff93 	bl	8012c2c <atoi>
 8004d06:	4602      	mov	r2, r0
 8004d08:	4b69      	ldr	r3, [pc, #420]	@ (8004eb0 <Apply_Config+0x2c8>)
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	b291      	uxth	r1, r2
 8004d0e:	4a63      	ldr	r2, [pc, #396]	@ (8004e9c <Apply_Config+0x2b4>)
 8004d10:	3304      	adds	r3, #4
 8004d12:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 8004d16:	e03e      	b.n	8004d96 <Apply_Config+0x1ae>
        }
    }
    else if(strcmp(cfg_var, "DATA_TOPIC") == 0) 
 8004d18:	4967      	ldr	r1, [pc, #412]	@ (8004eb8 <Apply_Config+0x2d0>)
 8004d1a:	485e      	ldr	r0, [pc, #376]	@ (8004e94 <Apply_Config+0x2ac>)
 8004d1c:	f7fb fa58 	bl	80001d0 <strcmp>
 8004d20:	4603      	mov	r3, r0
 8004d22:	2b00      	cmp	r3, #0
 8004d24:	d10d      	bne.n	8004d42 <Apply_Config+0x15a>
	{
        strncpy(config.data_topic, new_cfg_val, sizeof(config.data_topic) - 1);
 8004d26:	223f      	movs	r2, #63	@ 0x3f
 8004d28:	495b      	ldr	r1, [pc, #364]	@ (8004e98 <Apply_Config+0x2b0>)
 8004d2a:	4864      	ldr	r0, [pc, #400]	@ (8004ebc <Apply_Config+0x2d4>)
 8004d2c:	f00e f88f 	bl	8012e4e <strncpy>
        config.data_topic[sizeof(config.data_topic) - 1] = '\0';
 8004d30:	4b5a      	ldr	r3, [pc, #360]	@ (8004e9c <Apply_Config+0x2b4>)
 8004d32:	2200      	movs	r2, #0
 8004d34:	f883 20a7 	strb.w	r2, [r3, #167]	@ 0xa7
		strcpy(sys.MQTT.Data_Topic, config.data_topic);
 8004d38:	4960      	ldr	r1, [pc, #384]	@ (8004ebc <Apply_Config+0x2d4>)
 8004d3a:	4861      	ldr	r0, [pc, #388]	@ (8004ec0 <Apply_Config+0x2d8>)
 8004d3c:	f00e f8dc 	bl	8012ef8 <strcpy>
 8004d40:	e029      	b.n	8004d96 <Apply_Config+0x1ae>
    }
    else if(strcmp(cfg_var, "CMD_TOPIC") == 0) 
 8004d42:	4960      	ldr	r1, [pc, #384]	@ (8004ec4 <Apply_Config+0x2dc>)
 8004d44:	4853      	ldr	r0, [pc, #332]	@ (8004e94 <Apply_Config+0x2ac>)
 8004d46:	f7fb fa43 	bl	80001d0 <strcmp>
 8004d4a:	4603      	mov	r3, r0
 8004d4c:	2b00      	cmp	r3, #0
 8004d4e:	d10d      	bne.n	8004d6c <Apply_Config+0x184>
	{
        strncpy(config.command_topic, new_cfg_val, sizeof(config.command_topic) - 1);
 8004d50:	223f      	movs	r2, #63	@ 0x3f
 8004d52:	4951      	ldr	r1, [pc, #324]	@ (8004e98 <Apply_Config+0x2b0>)
 8004d54:	485c      	ldr	r0, [pc, #368]	@ (8004ec8 <Apply_Config+0x2e0>)
 8004d56:	f00e f87a 	bl	8012e4e <strncpy>
        config.command_topic[sizeof(config.command_topic) - 1] = '\0';
 8004d5a:	4b50      	ldr	r3, [pc, #320]	@ (8004e9c <Apply_Config+0x2b4>)
 8004d5c:	2200      	movs	r2, #0
 8004d5e:	f883 20e7 	strb.w	r2, [r3, #231]	@ 0xe7
		strcpy(sys.MQTT.Command_Topic, config.command_topic);
 8004d62:	4959      	ldr	r1, [pc, #356]	@ (8004ec8 <Apply_Config+0x2e0>)
 8004d64:	4859      	ldr	r0, [pc, #356]	@ (8004ecc <Apply_Config+0x2e4>)
 8004d66:	f00e f8c7 	bl	8012ef8 <strcpy>
 8004d6a:	e014      	b.n	8004d96 <Apply_Config+0x1ae>
    }
	else if(strcmp(cfg_var, "OTA_TOPIC") == 0)
 8004d6c:	4958      	ldr	r1, [pc, #352]	@ (8004ed0 <Apply_Config+0x2e8>)
 8004d6e:	4849      	ldr	r0, [pc, #292]	@ (8004e94 <Apply_Config+0x2ac>)
 8004d70:	f7fb fa2e 	bl	80001d0 <strcmp>
 8004d74:	4603      	mov	r3, r0
 8004d76:	2b00      	cmp	r3, #0
 8004d78:	f040 8081 	bne.w	8004e7e <Apply_Config+0x296>
	{
		strncpy(config.ota_topic, new_cfg_val, sizeof(config.ota_topic) - 1);
 8004d7c:	223f      	movs	r2, #63	@ 0x3f
 8004d7e:	4946      	ldr	r1, [pc, #280]	@ (8004e98 <Apply_Config+0x2b0>)
 8004d80:	4854      	ldr	r0, [pc, #336]	@ (8004ed4 <Apply_Config+0x2ec>)
 8004d82:	f00e f864 	bl	8012e4e <strncpy>
		config.ota_topic[sizeof(config.ota_topic) - 1] = '\0';
 8004d86:	4b45      	ldr	r3, [pc, #276]	@ (8004e9c <Apply_Config+0x2b4>)
 8004d88:	2200      	movs	r2, #0
 8004d8a:	f883 2127 	strb.w	r2, [r3, #295]	@ 0x127
		strcpy(sys.MQTT.OTA_Topic, config.ota_topic);
 8004d8e:	4951      	ldr	r1, [pc, #324]	@ (8004ed4 <Apply_Config+0x2ec>)
 8004d90:	4851      	ldr	r0, [pc, #324]	@ (8004ed8 <Apply_Config+0x2f0>)
 8004d92:	f00e f8b1 	bl	8012ef8 <strcpy>
	else
	{
		return;
	}

	if(((config.samp_freq / ACC_FIFO_WATERMARK) * config.buffering_secs * SAVING_BUFFER_LEN) * 2 > psram_get_size()) 
 8004d96:	4b41      	ldr	r3, [pc, #260]	@ (8004e9c <Apply_Config+0x2b4>)
 8004d98:	885b      	ldrh	r3, [r3, #2]
 8004d9a:	4a50      	ldr	r2, [pc, #320]	@ (8004edc <Apply_Config+0x2f4>)
 8004d9c:	fba2 2303 	umull	r2, r3, r2, r3
 8004da0:	099b      	lsrs	r3, r3, #6
 8004da2:	b29b      	uxth	r3, r3
 8004da4:	461a      	mov	r2, r3
 8004da6:	4b3d      	ldr	r3, [pc, #244]	@ (8004e9c <Apply_Config+0x2b4>)
 8004da8:	791b      	ldrb	r3, [r3, #4]
 8004daa:	fb02 f303 	mul.w	r3, r2, r3
 8004dae:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 8004db2:	fb02 f303 	mul.w	r3, r2, r3
 8004db6:	f503 63b4 	add.w	r3, r3, #1440	@ 0x5a0
 8004dba:	005b      	lsls	r3, r3, #1
 8004dbc:	461c      	mov	r4, r3
 8004dbe:	f000 fb27 	bl	8005410 <psram_get_size>
 8004dc2:	4603      	mov	r3, r0
 8004dc4:	429c      	cmp	r4, r3
 8004dc6:	d910      	bls.n	8004dea <Apply_Config+0x202>
	{
		if(config.samp_freq > 1600)
 8004dc8:	4b34      	ldr	r3, [pc, #208]	@ (8004e9c <Apply_Config+0x2b4>)
 8004dca:	885b      	ldrh	r3, [r3, #2]
 8004dcc:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 8004dd0:	d904      	bls.n	8004ddc <Apply_Config+0x1f4>
		{
			config.samp_freq = 1600;
 8004dd2:	4b32      	ldr	r3, [pc, #200]	@ (8004e9c <Apply_Config+0x2b4>)
 8004dd4:	f44f 62c8 	mov.w	r2, #1600	@ 0x640
 8004dd8:	805a      	strh	r2, [r3, #2]
 8004dda:	e006      	b.n	8004dea <Apply_Config+0x202>
		}
		else if(config.buffering_secs > 30)
 8004ddc:	4b2f      	ldr	r3, [pc, #188]	@ (8004e9c <Apply_Config+0x2b4>)
 8004dde:	791b      	ldrb	r3, [r3, #4]
 8004de0:	2b1e      	cmp	r3, #30
 8004de2:	d902      	bls.n	8004dea <Apply_Config+0x202>
		{
			config.buffering_secs = 30;
 8004de4:	4b2d      	ldr	r3, [pc, #180]	@ (8004e9c <Apply_Config+0x2b4>)
 8004de6:	221e      	movs	r2, #30
 8004de8:	711a      	strb	r2, [r3, #4]
		}
	}

	if (f_open(&config_file, APP_CONFIG_FILE, FA_WRITE | FA_CREATE_ALWAYS) != FR_OK) 
 8004dea:	f107 0310 	add.w	r3, r7, #16
 8004dee:	3b08      	subs	r3, #8
 8004df0:	220a      	movs	r2, #10
 8004df2:	493b      	ldr	r1, [pc, #236]	@ (8004ee0 <Apply_Config+0x2f8>)
 8004df4:	4618      	mov	r0, r3
 8004df6:	f002 fe4b 	bl	8007a90 <f_open>
 8004dfa:	4603      	mov	r3, r0
 8004dfc:	2b00      	cmp	r3, #0
 8004dfe:	d140      	bne.n	8004e82 <Apply_Config+0x29a>
	{
		return;
	}

	if (f_open(&config_file, APP_CONFIG_FILE, FA_READ) == FR_OK) 
 8004e00:	f107 0310 	add.w	r3, r7, #16
 8004e04:	3b08      	subs	r3, #8
 8004e06:	2201      	movs	r2, #1
 8004e08:	4935      	ldr	r1, [pc, #212]	@ (8004ee0 <Apply_Config+0x2f8>)
 8004e0a:	4618      	mov	r0, r3
 8004e0c:	f002 fe40 	bl	8007a90 <f_open>
 8004e10:	4603      	mov	r3, r0
 8004e12:	2b00      	cmp	r3, #0
 8004e14:	d121      	bne.n	8004e5a <Apply_Config+0x272>
	{
		if (f_read(&config_file, &config, sizeof(config), &bytes_read) == FR_OK && bytes_read == sizeof(config))
 8004e16:	f107 0310 	add.w	r3, r7, #16
 8004e1a:	3b0c      	subs	r3, #12
 8004e1c:	f107 0010 	add.w	r0, r7, #16
 8004e20:	3808      	subs	r0, #8
 8004e22:	f44f 7294 	mov.w	r2, #296	@ 0x128
 8004e26:	491d      	ldr	r1, [pc, #116]	@ (8004e9c <Apply_Config+0x2b4>)
 8004e28:	f002 ffca 	bl	8007dc0 <f_read>
 8004e2c:	4603      	mov	r3, r0
 8004e2e:	2b00      	cmp	r3, #0
 8004e30:	d10d      	bne.n	8004e4e <Apply_Config+0x266>
 8004e32:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8004e36:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 8004e3a:	f5b3 7f94 	cmp.w	r3, #296	@ 0x128
 8004e3e:	d106      	bne.n	8004e4e <Apply_Config+0x266>
		{
			f_close(&config_file);
 8004e40:	f107 0310 	add.w	r3, r7, #16
 8004e44:	3b08      	subs	r3, #8
 8004e46:	4618      	mov	r0, r3
 8004e48:	f003 fb16 	bl	8008478 <f_close>
			return;
 8004e4c:	e01a      	b.n	8004e84 <Apply_Config+0x29c>
		}
		f_close(&config_file);
 8004e4e:	f107 0310 	add.w	r3, r7, #16
 8004e52:	3b08      	subs	r3, #8
 8004e54:	4618      	mov	r0, r3
 8004e56:	f003 fb0f 	bl	8008478 <f_close>
	}
	memset(cfg_var, 0, sizeof(cfg_var));
 8004e5a:	2214      	movs	r2, #20
 8004e5c:	2100      	movs	r1, #0
 8004e5e:	480d      	ldr	r0, [pc, #52]	@ (8004e94 <Apply_Config+0x2ac>)
 8004e60:	f00d ffce 	bl	8012e00 <memset>
	cfg_idx = 0;
 8004e64:	4b12      	ldr	r3, [pc, #72]	@ (8004eb0 <Apply_Config+0x2c8>)
 8004e66:	2200      	movs	r2, #0
 8004e68:	601a      	str	r2, [r3, #0]
	memset(new_cfg_val, 0, sizeof(new_cfg_val));	
 8004e6a:	220a      	movs	r2, #10
 8004e6c:	2100      	movs	r1, #0
 8004e6e:	480a      	ldr	r0, [pc, #40]	@ (8004e98 <Apply_Config+0x2b0>)
 8004e70:	f00d ffc6 	bl	8012e00 <memset>
 8004e74:	e006      	b.n	8004e84 <Apply_Config+0x29c>
			return;
 8004e76:	bf00      	nop
 8004e78:	e004      	b.n	8004e84 <Apply_Config+0x29c>
			return;
 8004e7a:	bf00      	nop
 8004e7c:	e002      	b.n	8004e84 <Apply_Config+0x29c>
		return;
 8004e7e:	bf00      	nop
 8004e80:	e000      	b.n	8004e84 <Apply_Config+0x29c>
		return;
 8004e82:	bf00      	nop
}
 8004e84:	f507 5781 	add.w	r7, r7, #4128	@ 0x1020
 8004e88:	3714      	adds	r7, #20
 8004e8a:	46bd      	mov	sp, r7
 8004e8c:	bd90      	pop	{r4, r7, pc}
 8004e8e:	bf00      	nop
 8004e90:	080142e8 	.word	0x080142e8
 8004e94:	200050d8 	.word	0x200050d8
 8004e98:	200050f0 	.word	0x200050f0
 8004e9c:	20001a54 	.word	0x20001a54
 8004ea0:	080142f4 	.word	0x080142f4
 8004ea4:	08014300 	.word	0x08014300
 8004ea8:	0801430c 	.word	0x0801430c
 8004eac:	08014318 	.word	0x08014318
 8004eb0:	200050ec 	.word	0x200050ec
 8004eb4:	08014320 	.word	0x08014320
 8004eb8:	08014328 	.word	0x08014328
 8004ebc:	20001abc 	.word	0x20001abc
 8004ec0:	2000185c 	.word	0x2000185c
 8004ec4:	08014334 	.word	0x08014334
 8004ec8:	20001afc 	.word	0x20001afc
 8004ecc:	200018c0 	.word	0x200018c0
 8004ed0:	08014340 	.word	0x08014340
 8004ed4:	20001b3c 	.word	0x20001b3c
 8004ed8:	20001924 	.word	0x20001924
 8004edc:	51eb851f 	.word	0x51eb851f
 8004ee0:	0801434c 	.word	0x0801434c

08004ee4 <Clear_Flags>:

/*-----AZZERAMENTO FLAG-----*/
void Clear_Flags(void)
{
 8004ee4:	b580      	push	{r7, lr}
 8004ee6:	af00      	add	r7, sp, #0
	memset(&sys, 0, sizeof(sys));
 8004ee8:	f241 4298 	movw	r2, #5272	@ 0x1498
 8004eec:	2100      	movs	r1, #0
 8004eee:	480c      	ldr	r0, [pc, #48]	@ (8004f20 <Clear_Flags+0x3c>)
 8004ef0:	f00d ff86 	bl	8012e00 <memset>
	if(!sys.ACC_Present)
 8004ef4:	4b0a      	ldr	r3, [pc, #40]	@ (8004f20 <Clear_Flags+0x3c>)
 8004ef6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004efa:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8004efe:	f003 0301 	and.w	r3, r3, #1
 8004f02:	b2db      	uxtb	r3, r3
 8004f04:	2b00      	cmp	r3, #0
 8004f06:	d109      	bne.n	8004f1c <Clear_Flags+0x38>
	{
		sys.ACC_Present = 1;
 8004f08:	4b05      	ldr	r3, [pc, #20]	@ (8004f20 <Clear_Flags+0x3c>)
 8004f0a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004f0e:	461a      	mov	r2, r3
 8004f10:	f892 302c 	ldrb.w	r3, [r2, #44]	@ 0x2c
 8004f14:	f043 0301 	orr.w	r3, r3, #1
 8004f18:	f882 302c 	strb.w	r3, [r2, #44]	@ 0x2c
	}
}
 8004f1c:	bf00      	nop
 8004f1e:	bd80      	pop	{r7, pc}
 8004f20:	200005b8 	.word	0x200005b8

08004f24 <psram_reset>:
uint32_t	psramSize = 0;
uint32_t	psramNumPages = 0;


int psram_reset()
{
 8004f24:	b580      	push	{r7, lr}
 8004f26:	b08e      	sub	sp, #56	@ 0x38
 8004f28:	af00      	add	r7, sp, #0

	QSPI_CommandTypeDef sCommand = {0};
 8004f2a:	463b      	mov	r3, r7
 8004f2c:	2238      	movs	r2, #56	@ 0x38
 8004f2e:	2100      	movs	r1, #0
 8004f30:	4618      	mov	r0, r3
 8004f32:	f00d ff65 	bl	8012e00 <memset>

	sCommand.Instruction = 0x66;
 8004f36:	2366      	movs	r3, #102	@ 0x66
 8004f38:	603b      	str	r3, [r7, #0]
	sCommand.InstructionMode = QSPI_INSTRUCTION_1_LINE;
 8004f3a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8004f3e:	61bb      	str	r3, [r7, #24]
	sCommand.AddressSize = QSPI_ADDRESS_NONE;
 8004f40:	2300      	movs	r3, #0
 8004f42:	60fb      	str	r3, [r7, #12]
	sCommand.NbData = 0;
 8004f44:	2300      	movs	r3, #0
 8004f46:	62bb      	str	r3, [r7, #40]	@ 0x28

	if(HAL_QSPI_Command(PSRAM_SPI, &sCommand, HAL_QSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8004f48:	463b      	mov	r3, r7
 8004f4a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004f4e:	4619      	mov	r1, r3
 8004f50:	480e      	ldr	r0, [pc, #56]	@ (8004f8c <psram_reset+0x68>)
 8004f52:	f007 f965 	bl	800c220 <HAL_QSPI_Command>
 8004f56:	4603      	mov	r3, r0
 8004f58:	2b00      	cmp	r3, #0
 8004f5a:	d002      	beq.n	8004f62 <psram_reset+0x3e>
	{
		return -1;
 8004f5c:	f04f 33ff 	mov.w	r3, #4294967295
 8004f60:	e00f      	b.n	8004f82 <psram_reset+0x5e>
	}

	sCommand.Instruction = 0x99;
 8004f62:	2399      	movs	r3, #153	@ 0x99
 8004f64:	603b      	str	r3, [r7, #0]

	if(HAL_QSPI_Command(PSRAM_SPI, &sCommand, HAL_QSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8004f66:	463b      	mov	r3, r7
 8004f68:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004f6c:	4619      	mov	r1, r3
 8004f6e:	4807      	ldr	r0, [pc, #28]	@ (8004f8c <psram_reset+0x68>)
 8004f70:	f007 f956 	bl	800c220 <HAL_QSPI_Command>
 8004f74:	4603      	mov	r3, r0
 8004f76:	2b00      	cmp	r3, #0
 8004f78:	d002      	beq.n	8004f80 <psram_reset+0x5c>
	{
		return -1;
 8004f7a:	f04f 33ff 	mov.w	r3, #4294967295
 8004f7e:	e000      	b.n	8004f82 <psram_reset+0x5e>
	}

	return 0;
 8004f80:	2300      	movs	r3, #0

}
 8004f82:	4618      	mov	r0, r3
 8004f84:	3738      	adds	r7, #56	@ 0x38
 8004f86:	46bd      	mov	sp, r7
 8004f88:	bd80      	pop	{r7, pc}
 8004f8a:	bf00      	nop
 8004f8c:	200001b4 	.word	0x200001b4

08004f90 <psram_qpi_mode>:
{
	return psramQSPI;
}

int psram_qpi_mode(uint8_t enable)
{
 8004f90:	b580      	push	{r7, lr}
 8004f92:	b090      	sub	sp, #64	@ 0x40
 8004f94:	af00      	add	r7, sp, #0
 8004f96:	4603      	mov	r3, r0
 8004f98:	71fb      	strb	r3, [r7, #7]

	QSPI_CommandTypeDef sCommand = {0};
 8004f9a:	f107 0308 	add.w	r3, r7, #8
 8004f9e:	2238      	movs	r2, #56	@ 0x38
 8004fa0:	2100      	movs	r1, #0
 8004fa2:	4618      	mov	r0, r3
 8004fa4:	f00d ff2c 	bl	8012e00 <memset>

	if(!psramInitDone)return -1;
 8004fa8:	4b1c      	ldr	r3, [pc, #112]	@ (800501c <psram_qpi_mode+0x8c>)
 8004faa:	781b      	ldrb	r3, [r3, #0]
 8004fac:	2b00      	cmp	r3, #0
 8004fae:	d102      	bne.n	8004fb6 <psram_qpi_mode+0x26>
 8004fb0:	f04f 33ff 	mov.w	r3, #4294967295
 8004fb4:	e02d      	b.n	8005012 <psram_qpi_mode+0x82>

	if(psramQSPI==1 && enable == 0)
 8004fb6:	4b1a      	ldr	r3, [pc, #104]	@ (8005020 <psram_qpi_mode+0x90>)
 8004fb8:	781b      	ldrb	r3, [r3, #0]
 8004fba:	2b01      	cmp	r3, #1
 8004fbc:	d108      	bne.n	8004fd0 <psram_qpi_mode+0x40>
 8004fbe:	79fb      	ldrb	r3, [r7, #7]
 8004fc0:	2b00      	cmp	r3, #0
 8004fc2:	d105      	bne.n	8004fd0 <psram_qpi_mode+0x40>
	{
		sCommand.Instruction = PSRAM_CMD_QPI_DISABLE;
 8004fc4:	23f5      	movs	r3, #245	@ 0xf5
 8004fc6:	60bb      	str	r3, [r7, #8]
		sCommand.InstructionMode = QSPI_INSTRUCTION_4_LINES;
 8004fc8:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8004fcc:	623b      	str	r3, [r7, #32]
 8004fce:	e00e      	b.n	8004fee <psram_qpi_mode+0x5e>

	}else if(psramQSPI==0 && enable == 1)
 8004fd0:	4b13      	ldr	r3, [pc, #76]	@ (8005020 <psram_qpi_mode+0x90>)
 8004fd2:	781b      	ldrb	r3, [r3, #0]
 8004fd4:	2b00      	cmp	r3, #0
 8004fd6:	d108      	bne.n	8004fea <psram_qpi_mode+0x5a>
 8004fd8:	79fb      	ldrb	r3, [r7, #7]
 8004fda:	2b01      	cmp	r3, #1
 8004fdc:	d105      	bne.n	8004fea <psram_qpi_mode+0x5a>
	{
		sCommand.Instruction = PSRAM_CMD_QPI_ENABLE;
 8004fde:	2335      	movs	r3, #53	@ 0x35
 8004fe0:	60bb      	str	r3, [r7, #8]
		sCommand.InstructionMode = QSPI_INSTRUCTION_1_LINE;
 8004fe2:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8004fe6:	623b      	str	r3, [r7, #32]
 8004fe8:	e001      	b.n	8004fee <psram_qpi_mode+0x5e>

	}else{

		return 0;
 8004fea:	2300      	movs	r3, #0
 8004fec:	e011      	b.n	8005012 <psram_qpi_mode+0x82>

	}

	if(HAL_QSPI_Command(PSRAM_SPI, &sCommand, HAL_QSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8004fee:	f107 0308 	add.w	r3, r7, #8
 8004ff2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004ff6:	4619      	mov	r1, r3
 8004ff8:	480a      	ldr	r0, [pc, #40]	@ (8005024 <psram_qpi_mode+0x94>)
 8004ffa:	f007 f911 	bl	800c220 <HAL_QSPI_Command>
 8004ffe:	4603      	mov	r3, r0
 8005000:	2b00      	cmp	r3, #0
 8005002:	d002      	beq.n	800500a <psram_qpi_mode+0x7a>
	{
		return -1;
 8005004:	f04f 33ff 	mov.w	r3, #4294967295
 8005008:	e003      	b.n	8005012 <psram_qpi_mode+0x82>
	}

	psramQSPI = enable;
 800500a:	4a05      	ldr	r2, [pc, #20]	@ (8005020 <psram_qpi_mode+0x90>)
 800500c:	79fb      	ldrb	r3, [r7, #7]
 800500e:	7013      	strb	r3, [r2, #0]

	return 0;
 8005010:	2300      	movs	r3, #0
}
 8005012:	4618      	mov	r0, r3
 8005014:	3740      	adds	r7, #64	@ 0x40
 8005016:	46bd      	mov	sp, r7
 8005018:	bd80      	pop	{r7, pc}
 800501a:	bf00      	nop
 800501c:	200050fa 	.word	0x200050fa
 8005020:	200050fb 	.word	0x200050fb
 8005024:	200001b4 	.word	0x200001b4

08005028 <psram_read_id>:

int psram_read_id(uint8_t *id_data, int id_data_size)
{
 8005028:	b580      	push	{r7, lr}
 800502a:	b090      	sub	sp, #64	@ 0x40
 800502c:	af00      	add	r7, sp, #0
 800502e:	6078      	str	r0, [r7, #4]
 8005030:	6039      	str	r1, [r7, #0]
	QSPI_CommandTypeDef sCommand = {0};
 8005032:	f107 0308 	add.w	r3, r7, #8
 8005036:	2238      	movs	r2, #56	@ 0x38
 8005038:	2100      	movs	r1, #0
 800503a:	4618      	mov	r0, r3
 800503c:	f00d fee0 	bl	8012e00 <memset>

	if(id_data == NULL || id_data_size < 8)return -2;
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	2b00      	cmp	r3, #0
 8005044:	d002      	beq.n	800504c <psram_read_id+0x24>
 8005046:	683b      	ldr	r3, [r7, #0]
 8005048:	2b07      	cmp	r3, #7
 800504a:	dc02      	bgt.n	8005052 <psram_read_id+0x2a>
 800504c:	f06f 0301 	mvn.w	r3, #1
 8005050:	e034      	b.n	80050bc <psram_read_id+0x94>

	sCommand.Instruction = 0x9F;
 8005052:	239f      	movs	r3, #159	@ 0x9f
 8005054:	60bb      	str	r3, [r7, #8]
	sCommand.InstructionMode = QSPI_INSTRUCTION_1_LINE;
 8005056:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800505a:	623b      	str	r3, [r7, #32]
	sCommand.Address = 0;
 800505c:	2300      	movs	r3, #0
 800505e:	60fb      	str	r3, [r7, #12]
	sCommand.AddressSize = QSPI_ADDRESS_24_BITS;
 8005060:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8005064:	617b      	str	r3, [r7, #20]
	sCommand.AddressMode = QSPI_ADDRESS_1_LINE;
 8005066:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800506a:	627b      	str	r3, [r7, #36]	@ 0x24
	sCommand.DataMode    = QSPI_DATA_1_LINE;
 800506c:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8005070:	62fb      	str	r3, [r7, #44]	@ 0x2c
	sCommand.NbData = 8;
 8005072:	2308      	movs	r3, #8
 8005074:	633b      	str	r3, [r7, #48]	@ 0x30
	sCommand.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8005076:	2300      	movs	r3, #0
 8005078:	62bb      	str	r3, [r7, #40]	@ 0x28
	sCommand.DdrMode           = QSPI_DDR_MODE_DISABLE;
 800507a:	2300      	movs	r3, #0
 800507c:	637b      	str	r3, [r7, #52]	@ 0x34
	sCommand.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 800507e:	2300      	movs	r3, #0
 8005080:	63bb      	str	r3, [r7, #56]	@ 0x38
	sCommand.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 8005082:	2300      	movs	r3, #0
 8005084:	63fb      	str	r3, [r7, #60]	@ 0x3c

	if(HAL_QSPI_Command(PSRAM_SPI, &sCommand, HAL_QSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8005086:	f107 0308 	add.w	r3, r7, #8
 800508a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800508e:	4619      	mov	r1, r3
 8005090:	480c      	ldr	r0, [pc, #48]	@ (80050c4 <psram_read_id+0x9c>)
 8005092:	f007 f8c5 	bl	800c220 <HAL_QSPI_Command>
 8005096:	4603      	mov	r3, r0
 8005098:	2b00      	cmp	r3, #0
 800509a:	d002      	beq.n	80050a2 <psram_read_id+0x7a>
	{
		return -1;
 800509c:	f04f 33ff 	mov.w	r3, #4294967295
 80050a0:	e00c      	b.n	80050bc <psram_read_id+0x94>
	}

	if (HAL_QSPI_Receive(PSRAM_SPI, id_data, HAL_QSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80050a2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80050a6:	6879      	ldr	r1, [r7, #4]
 80050a8:	4806      	ldr	r0, [pc, #24]	@ (80050c4 <psram_read_id+0x9c>)
 80050aa:	f007 f9ae 	bl	800c40a <HAL_QSPI_Receive>
 80050ae:	4603      	mov	r3, r0
 80050b0:	2b00      	cmp	r3, #0
 80050b2:	d002      	beq.n	80050ba <psram_read_id+0x92>
	{
		return -1;
 80050b4:	f04f 33ff 	mov.w	r3, #4294967295
 80050b8:	e000      	b.n	80050bc <psram_read_id+0x94>
	}


	return 0;
 80050ba:	2300      	movs	r3, #0

}
 80050bc:	4618      	mov	r0, r3
 80050be:	3740      	adds	r7, #64	@ 0x40
 80050c0:	46bd      	mov	sp, r7
 80050c2:	bd80      	pop	{r7, pc}
 80050c4:	200001b4 	.word	0x200001b4

080050c8 <psram_internal_read_write>:

int psram_internal_read_write(uint8_t write, uint32_t address, uint16_t nbytes, uint8_t *pBuffer)
{
 80050c8:	b580      	push	{r7, lr}
 80050ca:	b092      	sub	sp, #72	@ 0x48
 80050cc:	af00      	add	r7, sp, #0
 80050ce:	60b9      	str	r1, [r7, #8]
 80050d0:	607b      	str	r3, [r7, #4]
 80050d2:	4603      	mov	r3, r0
 80050d4:	73fb      	strb	r3, [r7, #15]
 80050d6:	4613      	mov	r3, r2
 80050d8:	81bb      	strh	r3, [r7, #12]

	QSPI_CommandTypeDef sCommand = {0};
 80050da:	f107 0310 	add.w	r3, r7, #16
 80050de:	2238      	movs	r2, #56	@ 0x38
 80050e0:	2100      	movs	r1, #0
 80050e2:	4618      	mov	r0, r3
 80050e4:	f00d fe8c 	bl	8012e00 <memset>

	sCommand.Address = address;
 80050e8:	68bb      	ldr	r3, [r7, #8]
 80050ea:	617b      	str	r3, [r7, #20]
	sCommand.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 80050ec:	2300      	movs	r3, #0
 80050ee:	633b      	str	r3, [r7, #48]	@ 0x30
	sCommand.DdrMode           = QSPI_DDR_MODE_DISABLE;
 80050f0:	2300      	movs	r3, #0
 80050f2:	63fb      	str	r3, [r7, #60]	@ 0x3c
	sCommand.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 80050f4:	2300      	movs	r3, #0
 80050f6:	643b      	str	r3, [r7, #64]	@ 0x40
	sCommand.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 80050f8:	2300      	movs	r3, #0
 80050fa:	647b      	str	r3, [r7, #68]	@ 0x44
	sCommand.NbData = nbytes;
 80050fc:	89bb      	ldrh	r3, [r7, #12]
 80050fe:	63bb      	str	r3, [r7, #56]	@ 0x38

	if(psramQSPI)
 8005100:	4b33      	ldr	r3, [pc, #204]	@ (80051d0 <psram_internal_read_write+0x108>)
 8005102:	781b      	ldrb	r3, [r3, #0]
 8005104:	2b00      	cmp	r3, #0
 8005106:	d01a      	beq.n	800513e <psram_internal_read_write+0x76>
	{
		//QSPI mode
		sCommand.Instruction = write ? PSRAM_CMD_WRITE_QUAD : PSRAM_CMD_READ_FAST_QIO;
 8005108:	7bfb      	ldrb	r3, [r7, #15]
 800510a:	2b00      	cmp	r3, #0
 800510c:	d001      	beq.n	8005112 <psram_internal_read_write+0x4a>
 800510e:	2338      	movs	r3, #56	@ 0x38
 8005110:	e000      	b.n	8005114 <psram_internal_read_write+0x4c>
 8005112:	23eb      	movs	r3, #235	@ 0xeb
 8005114:	613b      	str	r3, [r7, #16]
		sCommand.InstructionMode = QSPI_INSTRUCTION_4_LINES;
 8005116:	f44f 7340 	mov.w	r3, #768	@ 0x300
 800511a:	62bb      	str	r3, [r7, #40]	@ 0x28
		sCommand.AddressSize = QSPI_ADDRESS_24_BITS;
 800511c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8005120:	61fb      	str	r3, [r7, #28]
		sCommand.AddressMode = QSPI_ADDRESS_4_LINES;
 8005122:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8005126:	62fb      	str	r3, [r7, #44]	@ 0x2c
		sCommand.DataMode    = QSPI_DATA_4_LINES;
 8005128:	f04f 7340 	mov.w	r3, #50331648	@ 0x3000000
 800512c:	637b      	str	r3, [r7, #52]	@ 0x34
		sCommand.DummyCycles = write ? 0 : PSRAM_CMD_QPI_READ_FAST_QIO_WAIT;
 800512e:	7bfb      	ldrb	r3, [r7, #15]
 8005130:	2b00      	cmp	r3, #0
 8005132:	d001      	beq.n	8005138 <psram_internal_read_write+0x70>
 8005134:	2300      	movs	r3, #0
 8005136:	e000      	b.n	800513a <psram_internal_read_write+0x72>
 8005138:	2306      	movs	r3, #6
 800513a:	627b      	str	r3, [r7, #36]	@ 0x24
 800513c:	e019      	b.n	8005172 <psram_internal_read_write+0xaa>
	}else{
		//SPI mode
		sCommand.Instruction = write ? PSRAM_CMD_WRITE : PSRAM_CMD_READ_FAST;
 800513e:	7bfb      	ldrb	r3, [r7, #15]
 8005140:	2b00      	cmp	r3, #0
 8005142:	d001      	beq.n	8005148 <psram_internal_read_write+0x80>
 8005144:	2302      	movs	r3, #2
 8005146:	e000      	b.n	800514a <psram_internal_read_write+0x82>
 8005148:	230b      	movs	r3, #11
 800514a:	613b      	str	r3, [r7, #16]
		sCommand.InstructionMode = QSPI_INSTRUCTION_1_LINE;
 800514c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8005150:	62bb      	str	r3, [r7, #40]	@ 0x28
		sCommand.AddressSize = QSPI_ADDRESS_24_BITS;
 8005152:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8005156:	61fb      	str	r3, [r7, #28]
		sCommand.AddressMode = QSPI_ADDRESS_1_LINE;
 8005158:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800515c:	62fb      	str	r3, [r7, #44]	@ 0x2c
		sCommand.DataMode    = QSPI_DATA_1_LINE;
 800515e:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8005162:	637b      	str	r3, [r7, #52]	@ 0x34
		sCommand.DummyCycles = write ? 0 : PSRAM_CMD_READ_FAST_WAIT;
 8005164:	7bfb      	ldrb	r3, [r7, #15]
 8005166:	2b00      	cmp	r3, #0
 8005168:	d001      	beq.n	800516e <psram_internal_read_write+0xa6>
 800516a:	2300      	movs	r3, #0
 800516c:	e000      	b.n	8005170 <psram_internal_read_write+0xa8>
 800516e:	2308      	movs	r3, #8
 8005170:	627b      	str	r3, [r7, #36]	@ 0x24
	}

	if(HAL_QSPI_Command(PSRAM_SPI, &sCommand, HAL_QSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8005172:	f107 0310 	add.w	r3, r7, #16
 8005176:	f241 3288 	movw	r2, #5000	@ 0x1388
 800517a:	4619      	mov	r1, r3
 800517c:	4815      	ldr	r0, [pc, #84]	@ (80051d4 <psram_internal_read_write+0x10c>)
 800517e:	f007 f84f 	bl	800c220 <HAL_QSPI_Command>
 8005182:	4603      	mov	r3, r0
 8005184:	2b00      	cmp	r3, #0
 8005186:	d002      	beq.n	800518e <psram_internal_read_write+0xc6>
	{
		return -1;
 8005188:	f04f 33ff 	mov.w	r3, #4294967295
 800518c:	e01b      	b.n	80051c6 <psram_internal_read_write+0xfe>
	}

	if(write)
 800518e:	7bfb      	ldrb	r3, [r7, #15]
 8005190:	2b00      	cmp	r3, #0
 8005192:	d00b      	beq.n	80051ac <psram_internal_read_write+0xe4>
	{
		if (HAL_QSPI_Transmit(PSRAM_SPI, pBuffer, HAL_QSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8005194:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005198:	6879      	ldr	r1, [r7, #4]
 800519a:	480e      	ldr	r0, [pc, #56]	@ (80051d4 <psram_internal_read_write+0x10c>)
 800519c:	f007 f89e 	bl	800c2dc <HAL_QSPI_Transmit>
 80051a0:	4603      	mov	r3, r0
 80051a2:	2b00      	cmp	r3, #0
 80051a4:	d00e      	beq.n	80051c4 <psram_internal_read_write+0xfc>
		{
			return -1;
 80051a6:	f04f 33ff 	mov.w	r3, #4294967295
 80051aa:	e00c      	b.n	80051c6 <psram_internal_read_write+0xfe>
		}

	}else{

		if (HAL_QSPI_Receive(PSRAM_SPI, pBuffer, HAL_QSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80051ac:	f241 3288 	movw	r2, #5000	@ 0x1388
 80051b0:	6879      	ldr	r1, [r7, #4]
 80051b2:	4808      	ldr	r0, [pc, #32]	@ (80051d4 <psram_internal_read_write+0x10c>)
 80051b4:	f007 f929 	bl	800c40a <HAL_QSPI_Receive>
 80051b8:	4603      	mov	r3, r0
 80051ba:	2b00      	cmp	r3, #0
 80051bc:	d002      	beq.n	80051c4 <psram_internal_read_write+0xfc>
		{
			return -1;
 80051be:	f04f 33ff 	mov.w	r3, #4294967295
 80051c2:	e000      	b.n	80051c6 <psram_internal_read_write+0xfe>
		}

	}

	return 0;
 80051c4:	2300      	movs	r3, #0
}
 80051c6:	4618      	mov	r0, r3
 80051c8:	3748      	adds	r7, #72	@ 0x48
 80051ca:	46bd      	mov	sp, r7
 80051cc:	bd80      	pop	{r7, pc}
 80051ce:	bf00      	nop
 80051d0:	200050fb 	.word	0x200050fb
 80051d4:	200001b4 	.word	0x200001b4

080051d8 <psram_sector_read_write>:


//Funzione usata da FatFs
int psram_sector_read_write(uint8_t write, uint32_t sector, uint32_t nsectors, uint8_t *pBuffer)
{
 80051d8:	b580      	push	{r7, lr}
 80051da:	b088      	sub	sp, #32
 80051dc:	af00      	add	r7, sp, #0
 80051de:	60b9      	str	r1, [r7, #8]
 80051e0:	607a      	str	r2, [r7, #4]
 80051e2:	603b      	str	r3, [r7, #0]
 80051e4:	4603      	mov	r3, r0
 80051e6:	73fb      	strb	r3, [r7, #15]
	int result = 0;
 80051e8:	2300      	movs	r3, #0
 80051ea:	617b      	str	r3, [r7, #20]
	uint8_t *wPtr = pBuffer;
 80051ec:	683b      	ldr	r3, [r7, #0]
 80051ee:	61fb      	str	r3, [r7, #28]
	uint32_t address = sector * PSRAM_PAGE_SIZE;
 80051f0:	68bb      	ldr	r3, [r7, #8]
 80051f2:	029b      	lsls	r3, r3, #10
 80051f4:	61bb      	str	r3, [r7, #24]

	while(nsectors > 0)
 80051f6:	e018      	b.n	800522a <psram_sector_read_write+0x52>
	{
		result = psram_internal_read_write(write, address, PSRAM_PAGE_SIZE, wPtr);
 80051f8:	7bf8      	ldrb	r0, [r7, #15]
 80051fa:	69fb      	ldr	r3, [r7, #28]
 80051fc:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8005200:	69b9      	ldr	r1, [r7, #24]
 8005202:	f7ff ff61 	bl	80050c8 <psram_internal_read_write>
 8005206:	6178      	str	r0, [r7, #20]
		if(result < 0)return -1;
 8005208:	697b      	ldr	r3, [r7, #20]
 800520a:	2b00      	cmp	r3, #0
 800520c:	da02      	bge.n	8005214 <psram_sector_read_write+0x3c>
 800520e:	f04f 33ff 	mov.w	r3, #4294967295
 8005212:	e00e      	b.n	8005232 <psram_sector_read_write+0x5a>
		address += PSRAM_PAGE_SIZE;
 8005214:	69bb      	ldr	r3, [r7, #24]
 8005216:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800521a:	61bb      	str	r3, [r7, #24]
		wPtr += PSRAM_PAGE_SIZE;
 800521c:	69fb      	ldr	r3, [r7, #28]
 800521e:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8005222:	61fb      	str	r3, [r7, #28]
		nsectors--;
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	3b01      	subs	r3, #1
 8005228:	607b      	str	r3, [r7, #4]
	while(nsectors > 0)
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	2b00      	cmp	r3, #0
 800522e:	d1e3      	bne.n	80051f8 <psram_sector_read_write+0x20>
	}

	return 0;
 8005230:	2300      	movs	r3, #0
}
 8005232:	4618      	mov	r0, r3
 8005234:	3720      	adds	r7, #32
 8005236:	46bd      	mov	sp, r7
 8005238:	bd80      	pop	{r7, pc}
	...

0800523c <psram_read_write>:



int psram_read_write(uint8_t write, uint32_t address, uint32_t nbytes, uint8_t *pBuffer)
{
 800523c:	b580      	push	{r7, lr}
 800523e:	b088      	sub	sp, #32
 8005240:	af00      	add	r7, sp, #0
 8005242:	60b9      	str	r1, [r7, #8]
 8005244:	607a      	str	r2, [r7, #4]
 8005246:	603b      	str	r3, [r7, #0]
 8005248:	4603      	mov	r3, r0
 800524a:	73fb      	strb	r3, [r7, #15]
	int result = 0;
 800524c:	2300      	movs	r3, #0
 800524e:	61bb      	str	r3, [r7, #24]
	uint32_t trBytes = 0;
 8005250:	2300      	movs	r3, #0
 8005252:	617b      	str	r3, [r7, #20]
	uint8_t *wPtr = pBuffer;
 8005254:	683b      	ldr	r3, [r7, #0]
 8005256:	61fb      	str	r3, [r7, #28]

	//Check indirizzo
	if(!psramInitDone || pBuffer==NULL)return -1;
 8005258:	4b1e      	ldr	r3, [pc, #120]	@ (80052d4 <psram_read_write+0x98>)
 800525a:	781b      	ldrb	r3, [r3, #0]
 800525c:	2b00      	cmp	r3, #0
 800525e:	d002      	beq.n	8005266 <psram_read_write+0x2a>
 8005260:	683b      	ldr	r3, [r7, #0]
 8005262:	2b00      	cmp	r3, #0
 8005264:	d102      	bne.n	800526c <psram_read_write+0x30>
 8005266:	f04f 33ff 	mov.w	r3, #4294967295
 800526a:	e02e      	b.n	80052ca <psram_read_write+0x8e>
	if(address + nbytes >= psramSize)return -2;
 800526c:	68ba      	ldr	r2, [r7, #8]
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	441a      	add	r2, r3
 8005272:	4b19      	ldr	r3, [pc, #100]	@ (80052d8 <psram_read_write+0x9c>)
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	429a      	cmp	r2, r3
 8005278:	d323      	bcc.n	80052c2 <psram_read_write+0x86>
 800527a:	f06f 0301 	mvn.w	r3, #1
 800527e:	e024      	b.n	80052ca <psram_read_write+0x8e>

	while(nbytes > 0)
	{
		trBytes = nbytes > PSRAM_PAGE_SIZE ? PSRAM_PAGE_SIZE : nbytes;
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005286:	bf28      	it	cs
 8005288:	f44f 6380 	movcs.w	r3, #1024	@ 0x400
 800528c:	617b      	str	r3, [r7, #20]
		result = psram_internal_read_write(write, address, trBytes, wPtr);
 800528e:	697b      	ldr	r3, [r7, #20]
 8005290:	b29a      	uxth	r2, r3
 8005292:	7bf8      	ldrb	r0, [r7, #15]
 8005294:	69fb      	ldr	r3, [r7, #28]
 8005296:	68b9      	ldr	r1, [r7, #8]
 8005298:	f7ff ff16 	bl	80050c8 <psram_internal_read_write>
 800529c:	61b8      	str	r0, [r7, #24]

		if(result < 0)return -1;
 800529e:	69bb      	ldr	r3, [r7, #24]
 80052a0:	2b00      	cmp	r3, #0
 80052a2:	da02      	bge.n	80052aa <psram_read_write+0x6e>
 80052a4:	f04f 33ff 	mov.w	r3, #4294967295
 80052a8:	e00f      	b.n	80052ca <psram_read_write+0x8e>

		address += trBytes;
 80052aa:	68ba      	ldr	r2, [r7, #8]
 80052ac:	697b      	ldr	r3, [r7, #20]
 80052ae:	4413      	add	r3, r2
 80052b0:	60bb      	str	r3, [r7, #8]
		wPtr += trBytes;
 80052b2:	69fa      	ldr	r2, [r7, #28]
 80052b4:	697b      	ldr	r3, [r7, #20]
 80052b6:	4413      	add	r3, r2
 80052b8:	61fb      	str	r3, [r7, #28]
		nbytes -= trBytes;
 80052ba:	687a      	ldr	r2, [r7, #4]
 80052bc:	697b      	ldr	r3, [r7, #20]
 80052be:	1ad3      	subs	r3, r2, r3
 80052c0:	607b      	str	r3, [r7, #4]
	while(nbytes > 0)
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	2b00      	cmp	r3, #0
 80052c6:	d1db      	bne.n	8005280 <psram_read_write+0x44>
	}

	return 0;
 80052c8:	2300      	movs	r3, #0
}
 80052ca:	4618      	mov	r0, r3
 80052cc:	3720      	adds	r7, #32
 80052ce:	46bd      	mov	sp, r7
 80052d0:	bd80      	pop	{r7, pc}
 80052d2:	bf00      	nop
 80052d4:	200050fa 	.word	0x200050fa
 80052d8:	20005104 	.word	0x20005104

080052dc <raw_psram_read_write>:

int raw_psram_read_write(uint8_t write, uint32_t address, uint32_t nbytes, uint8_t *pBuffer)
{
 80052dc:	b580      	push	{r7, lr}
 80052de:	b088      	sub	sp, #32
 80052e0:	af00      	add	r7, sp, #0
 80052e2:	60b9      	str	r1, [r7, #8]
 80052e4:	607a      	str	r2, [r7, #4]
 80052e6:	603b      	str	r3, [r7, #0]
 80052e8:	4603      	mov	r3, r0
 80052ea:	73fb      	strb	r3, [r7, #15]
	int result = 0;
 80052ec:	2300      	movs	r3, #0
 80052ee:	617b      	str	r3, [r7, #20]
	uint32_t trBytes = 0;
 80052f0:	2300      	movs	r3, #0
 80052f2:	61fb      	str	r3, [r7, #28]
	uint8_t *wPtr = pBuffer;
 80052f4:	683b      	ldr	r3, [r7, #0]
 80052f6:	61bb      	str	r3, [r7, #24]

	//Check indirizzo
	if(!psramInitDone || pBuffer==NULL)return -1;
 80052f8:	4b21      	ldr	r3, [pc, #132]	@ (8005380 <raw_psram_read_write+0xa4>)
 80052fa:	781b      	ldrb	r3, [r3, #0]
 80052fc:	2b00      	cmp	r3, #0
 80052fe:	d002      	beq.n	8005306 <raw_psram_read_write+0x2a>
 8005300:	683b      	ldr	r3, [r7, #0]
 8005302:	2b00      	cmp	r3, #0
 8005304:	d102      	bne.n	800530c <raw_psram_read_write+0x30>
 8005306:	f04f 33ff 	mov.w	r3, #4294967295
 800530a:	e035      	b.n	8005378 <raw_psram_read_write+0x9c>
	if(address + nbytes >= psramSize)return -2;
 800530c:	68ba      	ldr	r2, [r7, #8]
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	441a      	add	r2, r3
 8005312:	4b1c      	ldr	r3, [pc, #112]	@ (8005384 <raw_psram_read_write+0xa8>)
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	429a      	cmp	r2, r3
 8005318:	d302      	bcc.n	8005320 <raw_psram_read_write+0x44>
 800531a:	f06f 0301 	mvn.w	r3, #1
 800531e:	e02b      	b.n	8005378 <raw_psram_read_write+0x9c>

	trBytes = 1024 - address % 1024;
 8005320:	68bb      	ldr	r3, [r7, #8]
 8005322:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005326:	f5c3 6380 	rsb	r3, r3, #1024	@ 0x400
 800532a:	61fb      	str	r3, [r7, #28]
	while(nbytes > 0)
 800532c:	e020      	b.n	8005370 <raw_psram_read_write+0x94>
	{
		result = psram_internal_read_write(write, address, trBytes, wPtr);
 800532e:	69fb      	ldr	r3, [r7, #28]
 8005330:	b29a      	uxth	r2, r3
 8005332:	7bf8      	ldrb	r0, [r7, #15]
 8005334:	69bb      	ldr	r3, [r7, #24]
 8005336:	68b9      	ldr	r1, [r7, #8]
 8005338:	f7ff fec6 	bl	80050c8 <psram_internal_read_write>
 800533c:	6178      	str	r0, [r7, #20]

		if(result < 0)return -1;
 800533e:	697b      	ldr	r3, [r7, #20]
 8005340:	2b00      	cmp	r3, #0
 8005342:	da02      	bge.n	800534a <raw_psram_read_write+0x6e>
 8005344:	f04f 33ff 	mov.w	r3, #4294967295
 8005348:	e016      	b.n	8005378 <raw_psram_read_write+0x9c>

		address += trBytes;
 800534a:	68ba      	ldr	r2, [r7, #8]
 800534c:	69fb      	ldr	r3, [r7, #28]
 800534e:	4413      	add	r3, r2
 8005350:	60bb      	str	r3, [r7, #8]
		wPtr += trBytes;
 8005352:	69ba      	ldr	r2, [r7, #24]
 8005354:	69fb      	ldr	r3, [r7, #28]
 8005356:	4413      	add	r3, r2
 8005358:	61bb      	str	r3, [r7, #24]
		nbytes -= trBytes;
 800535a:	687a      	ldr	r2, [r7, #4]
 800535c:	69fb      	ldr	r3, [r7, #28]
 800535e:	1ad3      	subs	r3, r2, r3
 8005360:	607b      	str	r3, [r7, #4]
		trBytes = nbytes > PSRAM_PAGE_SIZE ? PSRAM_PAGE_SIZE : nbytes;
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005368:	bf28      	it	cs
 800536a:	f44f 6380 	movcs.w	r3, #1024	@ 0x400
 800536e:	61fb      	str	r3, [r7, #28]
	while(nbytes > 0)
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	2b00      	cmp	r3, #0
 8005374:	d1db      	bne.n	800532e <raw_psram_read_write+0x52>
	}

	return 0;
 8005376:	2300      	movs	r3, #0
}
 8005378:	4618      	mov	r0, r3
 800537a:	3720      	adds	r7, #32
 800537c:	46bd      	mov	sp, r7
 800537e:	bd80      	pop	{r7, pc}
 8005380:	200050fa 	.word	0x200050fa
 8005384:	20005104 	.word	0x20005104

08005388 <RAM_Write>:
{
	return psram_read_write(1, address, nbytes, pBuffer);
}

int RAM_Write(uint32_t address, uint32_t nbytes, uint8_t *pBuffer)
{
 8005388:	b580      	push	{r7, lr}
 800538a:	b084      	sub	sp, #16
 800538c:	af00      	add	r7, sp, #0
 800538e:	60f8      	str	r0, [r7, #12]
 8005390:	60b9      	str	r1, [r7, #8]
 8005392:	607a      	str	r2, [r7, #4]
	return raw_psram_read_write(1, address, nbytes, pBuffer);
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	68ba      	ldr	r2, [r7, #8]
 8005398:	68f9      	ldr	r1, [r7, #12]
 800539a:	2001      	movs	r0, #1
 800539c:	f7ff ff9e 	bl	80052dc <raw_psram_read_write>
 80053a0:	4603      	mov	r3, r0
}
 80053a2:	4618      	mov	r0, r3
 80053a4:	3710      	adds	r7, #16
 80053a6:	46bd      	mov	sp, r7
 80053a8:	bd80      	pop	{r7, pc}

080053aa <RAM_Read>:

int RAM_Read(uint32_t address, uint32_t nbytes, uint8_t *pBuffer)
{
 80053aa:	b580      	push	{r7, lr}
 80053ac:	b084      	sub	sp, #16
 80053ae:	af00      	add	r7, sp, #0
 80053b0:	60f8      	str	r0, [r7, #12]
 80053b2:	60b9      	str	r1, [r7, #8]
 80053b4:	607a      	str	r2, [r7, #4]
	return psram_read_write(0, address, nbytes, pBuffer);
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	68ba      	ldr	r2, [r7, #8]
 80053ba:	68f9      	ldr	r1, [r7, #12]
 80053bc:	2000      	movs	r0, #0
 80053be:	f7ff ff3d 	bl	800523c <psram_read_write>
 80053c2:	4603      	mov	r3, r0
}
 80053c4:	4618      	mov	r0, r3
 80053c6:	3710      	adds	r7, #16
 80053c8:	46bd      	mov	sp, r7
 80053ca:	bd80      	pop	{r7, pc}

080053cc <psram_is_initialized>:


int psram_is_initialized()
{
 80053cc:	b480      	push	{r7}
 80053ce:	af00      	add	r7, sp, #0
	return psramInitDone;
 80053d0:	4b03      	ldr	r3, [pc, #12]	@ (80053e0 <psram_is_initialized+0x14>)
 80053d2:	781b      	ldrb	r3, [r3, #0]
}
 80053d4:	4618      	mov	r0, r3
 80053d6:	46bd      	mov	sp, r7
 80053d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053dc:	4770      	bx	lr
 80053de:	bf00      	nop
 80053e0:	200050fa 	.word	0x200050fa

080053e4 <psram_get_sector_size>:

unsigned int psram_get_sector_size()
{
 80053e4:	b480      	push	{r7}
 80053e6:	af00      	add	r7, sp, #0
	return PSRAM_PAGE_SIZE;
 80053e8:	f44f 6380 	mov.w	r3, #1024	@ 0x400
}
 80053ec:	4618      	mov	r0, r3
 80053ee:	46bd      	mov	sp, r7
 80053f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053f4:	4770      	bx	lr
	...

080053f8 <psram_get_sector_count>:

unsigned int psram_get_sector_count()
{
 80053f8:	b480      	push	{r7}
 80053fa:	af00      	add	r7, sp, #0
	return psramNumPages;
 80053fc:	4b03      	ldr	r3, [pc, #12]	@ (800540c <psram_get_sector_count+0x14>)
 80053fe:	681b      	ldr	r3, [r3, #0]
}
 8005400:	4618      	mov	r0, r3
 8005402:	46bd      	mov	sp, r7
 8005404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005408:	4770      	bx	lr
 800540a:	bf00      	nop
 800540c:	20005108 	.word	0x20005108

08005410 <psram_get_size>:

unsigned int psram_get_size()
{
 8005410:	b480      	push	{r7}
 8005412:	af00      	add	r7, sp, #0
	return psramSize;
 8005414:	4b03      	ldr	r3, [pc, #12]	@ (8005424 <psram_get_size+0x14>)
 8005416:	681b      	ldr	r3, [r3, #0]
}
 8005418:	4618      	mov	r0, r3
 800541a:	46bd      	mov	sp, r7
 800541c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005420:	4770      	bx	lr
 8005422:	bf00      	nop
 8005424:	20005104 	.word	0x20005104

08005428 <psram_init>:

int psram_init()
{
 8005428:	b580      	push	{r7, lr}
 800542a:	b082      	sub	sp, #8
 800542c:	af00      	add	r7, sp, #0

	uint8_t density = 0xFF;
 800542e:	23ff      	movs	r3, #255	@ 0xff
 8005430:	71fb      	strb	r3, [r7, #7]

	psramInitDone = 0;
 8005432:	4b20      	ldr	r3, [pc, #128]	@ (80054b4 <psram_init+0x8c>)
 8005434:	2200      	movs	r2, #0
 8005436:	701a      	strb	r2, [r3, #0]

	if(psram_reset() < 0)return -1;
 8005438:	f7ff fd74 	bl	8004f24 <psram_reset>
 800543c:	4603      	mov	r3, r0
 800543e:	2b00      	cmp	r3, #0
 8005440:	da02      	bge.n	8005448 <psram_init+0x20>
 8005442:	f04f 33ff 	mov.w	r3, #4294967295
 8005446:	e030      	b.n	80054aa <psram_init+0x82>

	memset(psramId, 0xFF, sizeof(psramId));
 8005448:	2208      	movs	r2, #8
 800544a:	21ff      	movs	r1, #255	@ 0xff
 800544c:	481a      	ldr	r0, [pc, #104]	@ (80054b8 <psram_init+0x90>)
 800544e:	f00d fcd7 	bl	8012e00 <memset>

	if(psram_read_id(psramId, sizeof(psramId)) < 0)return -1;
 8005452:	2108      	movs	r1, #8
 8005454:	4818      	ldr	r0, [pc, #96]	@ (80054b8 <psram_init+0x90>)
 8005456:	f7ff fde7 	bl	8005028 <psram_read_id>
 800545a:	4603      	mov	r3, r0
 800545c:	2b00      	cmp	r3, #0
 800545e:	da02      	bge.n	8005466 <psram_init+0x3e>
 8005460:	f04f 33ff 	mov.w	r3, #4294967295
 8005464:	e021      	b.n	80054aa <psram_init+0x82>

	density = psramId[2] >> 5;
 8005466:	4b14      	ldr	r3, [pc, #80]	@ (80054b8 <psram_init+0x90>)
 8005468:	789b      	ldrb	r3, [r3, #2]
 800546a:	095b      	lsrs	r3, r3, #5
 800546c:	71fb      	strb	r3, [r7, #7]

	if(psramId[0] == PSRAM_MANUFACTURER && psramId[1] == PSRAM_KGD && density <= PSRAM_DENSITY_64MB)
 800546e:	4b12      	ldr	r3, [pc, #72]	@ (80054b8 <psram_init+0x90>)
 8005470:	781b      	ldrb	r3, [r3, #0]
 8005472:	2b0d      	cmp	r3, #13
 8005474:	d117      	bne.n	80054a6 <psram_init+0x7e>
 8005476:	4b10      	ldr	r3, [pc, #64]	@ (80054b8 <psram_init+0x90>)
 8005478:	785b      	ldrb	r3, [r3, #1]
 800547a:	2b5d      	cmp	r3, #93	@ 0x5d
 800547c:	d113      	bne.n	80054a6 <psram_init+0x7e>
 800547e:	79fb      	ldrb	r3, [r7, #7]
 8005480:	2b03      	cmp	r3, #3
 8005482:	d810      	bhi.n	80054a6 <psram_init+0x7e>
	{
		psramSize = PSRAM_DENSITY_64MB_EADDR;
 8005484:	4b0d      	ldr	r3, [pc, #52]	@ (80054bc <psram_init+0x94>)
 8005486:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 800548a:	601a      	str	r2, [r3, #0]
		psramNumPages = psramSize / PSRAM_PAGE_SIZE;
 800548c:	4b0b      	ldr	r3, [pc, #44]	@ (80054bc <psram_init+0x94>)
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	0a9b      	lsrs	r3, r3, #10
 8005492:	4a0b      	ldr	r2, [pc, #44]	@ (80054c0 <psram_init+0x98>)
 8005494:	6013      	str	r3, [r2, #0]

		psram_qpi_mode(1);
 8005496:	2001      	movs	r0, #1
 8005498:	f7ff fd7a 	bl	8004f90 <psram_qpi_mode>

		psramInitDone = 1;
 800549c:	4b05      	ldr	r3, [pc, #20]	@ (80054b4 <psram_init+0x8c>)
 800549e:	2201      	movs	r2, #1
 80054a0:	701a      	strb	r2, [r3, #0]
		return 0;
 80054a2:	2300      	movs	r3, #0
 80054a4:	e001      	b.n	80054aa <psram_init+0x82>
	}else{
		return -1;
 80054a6:	f04f 33ff 	mov.w	r3, #4294967295
	}

}
 80054aa:	4618      	mov	r0, r3
 80054ac:	3708      	adds	r7, #8
 80054ae:	46bd      	mov	sp, r7
 80054b0:	bd80      	pop	{r7, pc}
 80054b2:	bf00      	nop
 80054b4:	200050fa 	.word	0x200050fa
 80054b8:	200050fc 	.word	0x200050fc
 80054bc:	20005104 	.word	0x20005104
 80054c0:	20005108 	.word	0x20005108

080054c4 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80054c4:	b480      	push	{r7}
 80054c6:	b083      	sub	sp, #12
 80054c8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80054ca:	4b0f      	ldr	r3, [pc, #60]	@ (8005508 <HAL_MspInit+0x44>)
 80054cc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80054ce:	4a0e      	ldr	r2, [pc, #56]	@ (8005508 <HAL_MspInit+0x44>)
 80054d0:	f043 0301 	orr.w	r3, r3, #1
 80054d4:	6613      	str	r3, [r2, #96]	@ 0x60
 80054d6:	4b0c      	ldr	r3, [pc, #48]	@ (8005508 <HAL_MspInit+0x44>)
 80054d8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80054da:	f003 0301 	and.w	r3, r3, #1
 80054de:	607b      	str	r3, [r7, #4]
 80054e0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80054e2:	4b09      	ldr	r3, [pc, #36]	@ (8005508 <HAL_MspInit+0x44>)
 80054e4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80054e6:	4a08      	ldr	r2, [pc, #32]	@ (8005508 <HAL_MspInit+0x44>)
 80054e8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80054ec:	6593      	str	r3, [r2, #88]	@ 0x58
 80054ee:	4b06      	ldr	r3, [pc, #24]	@ (8005508 <HAL_MspInit+0x44>)
 80054f0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80054f2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80054f6:	603b      	str	r3, [r7, #0]
 80054f8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80054fa:	bf00      	nop
 80054fc:	370c      	adds	r7, #12
 80054fe:	46bd      	mov	sp, r7
 8005500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005504:	4770      	bx	lr
 8005506:	bf00      	nop
 8005508:	40021000 	.word	0x40021000

0800550c <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800550c:	b580      	push	{r7, lr}
 800550e:	b0ac      	sub	sp, #176	@ 0xb0
 8005510:	af00      	add	r7, sp, #0
 8005512:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005514:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8005518:	2200      	movs	r2, #0
 800551a:	601a      	str	r2, [r3, #0]
 800551c:	605a      	str	r2, [r3, #4]
 800551e:	609a      	str	r2, [r3, #8]
 8005520:	60da      	str	r2, [r3, #12]
 8005522:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8005524:	f107 0314 	add.w	r3, r7, #20
 8005528:	2288      	movs	r2, #136	@ 0x88
 800552a:	2100      	movs	r1, #0
 800552c:	4618      	mov	r0, r3
 800552e:	f00d fc67 	bl	8012e00 <memset>
  if(hadc->Instance==ADC1)
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	4a3d      	ldr	r2, [pc, #244]	@ (800562c <HAL_ADC_MspInit+0x120>)
 8005538:	4293      	cmp	r3, r2
 800553a:	d172      	bne.n	8005622 <HAL_ADC_MspInit+0x116>

    /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 800553c:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8005540:	617b      	str	r3, [r7, #20]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 8005542:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8005546:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_HSE;
 800554a:	2303      	movs	r3, #3
 800554c:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 800554e:	2301      	movs	r3, #1
 8005550:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 8;
 8005552:	2308      	movs	r3, #8
 8005554:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 8005556:	2307      	movs	r3, #7
 8005558:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 800555a:	2302      	movs	r3, #2
 800555c:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 800555e:	2302      	movs	r3, #2
 8005560:	62fb      	str	r3, [r7, #44]	@ 0x2c
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 8005562:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8005566:	633b      	str	r3, [r7, #48]	@ 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8005568:	f107 0314 	add.w	r3, r7, #20
 800556c:	4618      	mov	r0, r3
 800556e:	f008 f843 	bl	800d5f8 <HAL_RCCEx_PeriphCLKConfig>
 8005572:	4603      	mov	r3, r0
 8005574:	2b00      	cmp	r3, #0
 8005576:	d001      	beq.n	800557c <HAL_ADC_MspInit+0x70>
    {
      Error_Handler();
 8005578:	f7fe fcc4 	bl	8003f04 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 800557c:	4b2c      	ldr	r3, [pc, #176]	@ (8005630 <HAL_ADC_MspInit+0x124>)
 800557e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005580:	4a2b      	ldr	r2, [pc, #172]	@ (8005630 <HAL_ADC_MspInit+0x124>)
 8005582:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8005586:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8005588:	4b29      	ldr	r3, [pc, #164]	@ (8005630 <HAL_ADC_MspInit+0x124>)
 800558a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800558c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005590:	613b      	str	r3, [r7, #16]
 8005592:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005594:	4b26      	ldr	r3, [pc, #152]	@ (8005630 <HAL_ADC_MspInit+0x124>)
 8005596:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005598:	4a25      	ldr	r2, [pc, #148]	@ (8005630 <HAL_ADC_MspInit+0x124>)
 800559a:	f043 0301 	orr.w	r3, r3, #1
 800559e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80055a0:	4b23      	ldr	r3, [pc, #140]	@ (8005630 <HAL_ADC_MspInit+0x124>)
 80055a2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80055a4:	f003 0301 	and.w	r3, r3, #1
 80055a8:	60fb      	str	r3, [r7, #12]
 80055aa:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA4     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 80055ac:	2310      	movs	r3, #16
 80055ae:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 80055b2:	230b      	movs	r3, #11
 80055b4:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80055b8:	2300      	movs	r3, #0
 80055ba:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80055be:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 80055c2:	4619      	mov	r1, r3
 80055c4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80055c8:	f005 fda6 	bl	800b118 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 80055cc:	4b19      	ldr	r3, [pc, #100]	@ (8005634 <HAL_ADC_MspInit+0x128>)
 80055ce:	4a1a      	ldr	r2, [pc, #104]	@ (8005638 <HAL_ADC_MspInit+0x12c>)
 80055d0:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_0;
 80055d2:	4b18      	ldr	r3, [pc, #96]	@ (8005634 <HAL_ADC_MspInit+0x128>)
 80055d4:	2200      	movs	r2, #0
 80055d6:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80055d8:	4b16      	ldr	r3, [pc, #88]	@ (8005634 <HAL_ADC_MspInit+0x128>)
 80055da:	2200      	movs	r2, #0
 80055dc:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80055de:	4b15      	ldr	r3, [pc, #84]	@ (8005634 <HAL_ADC_MspInit+0x128>)
 80055e0:	2200      	movs	r2, #0
 80055e2:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80055e4:	4b13      	ldr	r3, [pc, #76]	@ (8005634 <HAL_ADC_MspInit+0x128>)
 80055e6:	2280      	movs	r2, #128	@ 0x80
 80055e8:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80055ea:	4b12      	ldr	r3, [pc, #72]	@ (8005634 <HAL_ADC_MspInit+0x128>)
 80055ec:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80055f0:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80055f2:	4b10      	ldr	r3, [pc, #64]	@ (8005634 <HAL_ADC_MspInit+0x128>)
 80055f4:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80055f8:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80055fa:	4b0e      	ldr	r3, [pc, #56]	@ (8005634 <HAL_ADC_MspInit+0x128>)
 80055fc:	2220      	movs	r2, #32
 80055fe:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8005600:	4b0c      	ldr	r3, [pc, #48]	@ (8005634 <HAL_ADC_MspInit+0x128>)
 8005602:	2200      	movs	r2, #0
 8005604:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8005606:	480b      	ldr	r0, [pc, #44]	@ (8005634 <HAL_ADC_MspInit+0x128>)
 8005608:	f005 fb44 	bl	800ac94 <HAL_DMA_Init>
 800560c:	4603      	mov	r3, r0
 800560e:	2b00      	cmp	r3, #0
 8005610:	d001      	beq.n	8005616 <HAL_ADC_MspInit+0x10a>
    {
      Error_Handler();
 8005612:	f7fe fc77 	bl	8003f04 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	4a06      	ldr	r2, [pc, #24]	@ (8005634 <HAL_ADC_MspInit+0x128>)
 800561a:	64da      	str	r2, [r3, #76]	@ 0x4c
 800561c:	4a05      	ldr	r2, [pc, #20]	@ (8005634 <HAL_ADC_MspInit+0x128>)
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	6293      	str	r3, [r2, #40]	@ 0x28

    /* USER CODE END ADC1_MspInit 1 */

  }

}
 8005622:	bf00      	nop
 8005624:	37b0      	adds	r7, #176	@ 0xb0
 8005626:	46bd      	mov	sp, r7
 8005628:	bd80      	pop	{r7, pc}
 800562a:	bf00      	nop
 800562c:	50040000 	.word	0x50040000
 8005630:	40021000 	.word	0x40021000
 8005634:	200000f4 	.word	0x200000f4
 8005638:	40020008 	.word	0x40020008

0800563c <HAL_CRC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hcrc: CRC handle pointer
  * @retval None
  */
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 800563c:	b480      	push	{r7}
 800563e:	b085      	sub	sp, #20
 8005640:	af00      	add	r7, sp, #0
 8005642:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	4a0a      	ldr	r2, [pc, #40]	@ (8005674 <HAL_CRC_MspInit+0x38>)
 800564a:	4293      	cmp	r3, r2
 800564c:	d10b      	bne.n	8005666 <HAL_CRC_MspInit+0x2a>
  {
    /* USER CODE BEGIN CRC_MspInit 0 */

    /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 800564e:	4b0a      	ldr	r3, [pc, #40]	@ (8005678 <HAL_CRC_MspInit+0x3c>)
 8005650:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005652:	4a09      	ldr	r2, [pc, #36]	@ (8005678 <HAL_CRC_MspInit+0x3c>)
 8005654:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8005658:	6493      	str	r3, [r2, #72]	@ 0x48
 800565a:	4b07      	ldr	r3, [pc, #28]	@ (8005678 <HAL_CRC_MspInit+0x3c>)
 800565c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800565e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8005662:	60fb      	str	r3, [r7, #12]
 8005664:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END CRC_MspInit 1 */

  }

}
 8005666:	bf00      	nop
 8005668:	3714      	adds	r7, #20
 800566a:	46bd      	mov	sp, r7
 800566c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005670:	4770      	bx	lr
 8005672:	bf00      	nop
 8005674:	40023000 	.word	0x40023000
 8005678:	40021000 	.word	0x40021000

0800567c <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800567c:	b580      	push	{r7, lr}
 800567e:	b0ac      	sub	sp, #176	@ 0xb0
 8005680:	af00      	add	r7, sp, #0
 8005682:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005684:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8005688:	2200      	movs	r2, #0
 800568a:	601a      	str	r2, [r3, #0]
 800568c:	605a      	str	r2, [r3, #4]
 800568e:	609a      	str	r2, [r3, #8]
 8005690:	60da      	str	r2, [r3, #12]
 8005692:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8005694:	f107 0314 	add.w	r3, r7, #20
 8005698:	2288      	movs	r2, #136	@ 0x88
 800569a:	2100      	movs	r1, #0
 800569c:	4618      	mov	r0, r3
 800569e:	f00d fbaf 	bl	8012e00 <memset>
  if(hi2c->Instance==I2C3)
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	4a21      	ldr	r2, [pc, #132]	@ (800572c <HAL_I2C_MspInit+0xb0>)
 80056a8:	4293      	cmp	r3, r2
 80056aa:	d13b      	bne.n	8005724 <HAL_I2C_MspInit+0xa8>

    /* USER CODE END I2C3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C3;
 80056ac:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80056b0:	617b      	str	r3, [r7, #20]
    PeriphClkInit.I2c3ClockSelection = RCC_I2C3CLKSOURCE_PCLK1;
 80056b2:	2300      	movs	r3, #0
 80056b4:	66fb      	str	r3, [r7, #108]	@ 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80056b6:	f107 0314 	add.w	r3, r7, #20
 80056ba:	4618      	mov	r0, r3
 80056bc:	f007 ff9c 	bl	800d5f8 <HAL_RCCEx_PeriphCLKConfig>
 80056c0:	4603      	mov	r3, r0
 80056c2:	2b00      	cmp	r3, #0
 80056c4:	d001      	beq.n	80056ca <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 80056c6:	f7fe fc1d 	bl	8003f04 <Error_Handler>
    }

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80056ca:	4b19      	ldr	r3, [pc, #100]	@ (8005730 <HAL_I2C_MspInit+0xb4>)
 80056cc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80056ce:	4a18      	ldr	r2, [pc, #96]	@ (8005730 <HAL_I2C_MspInit+0xb4>)
 80056d0:	f043 0304 	orr.w	r3, r3, #4
 80056d4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80056d6:	4b16      	ldr	r3, [pc, #88]	@ (8005730 <HAL_I2C_MspInit+0xb4>)
 80056d8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80056da:	f003 0304 	and.w	r3, r3, #4
 80056de:	613b      	str	r3, [r7, #16]
 80056e0:	693b      	ldr	r3, [r7, #16]
    /**I2C3 GPIO Configuration
    PC0     ------> I2C3_SCL
    PC1     ------> I2C3_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80056e2:	2303      	movs	r3, #3
 80056e4:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80056e8:	2312      	movs	r3, #18
 80056ea:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80056ee:	2300      	movs	r3, #0
 80056f0:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80056f4:	2303      	movs	r3, #3
 80056f6:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 80056fa:	2304      	movs	r3, #4
 80056fc:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005700:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8005704:	4619      	mov	r1, r3
 8005706:	480b      	ldr	r0, [pc, #44]	@ (8005734 <HAL_I2C_MspInit+0xb8>)
 8005708:	f005 fd06 	bl	800b118 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 800570c:	4b08      	ldr	r3, [pc, #32]	@ (8005730 <HAL_I2C_MspInit+0xb4>)
 800570e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005710:	4a07      	ldr	r2, [pc, #28]	@ (8005730 <HAL_I2C_MspInit+0xb4>)
 8005712:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8005716:	6593      	str	r3, [r2, #88]	@ 0x58
 8005718:	4b05      	ldr	r3, [pc, #20]	@ (8005730 <HAL_I2C_MspInit+0xb4>)
 800571a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800571c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005720:	60fb      	str	r3, [r7, #12]
 8005722:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END I2C3_MspInit 1 */

  }

}
 8005724:	bf00      	nop
 8005726:	37b0      	adds	r7, #176	@ 0xb0
 8005728:	46bd      	mov	sp, r7
 800572a:	bd80      	pop	{r7, pc}
 800572c:	40005c00 	.word	0x40005c00
 8005730:	40021000 	.word	0x40021000
 8005734:	48000800 	.word	0x48000800

08005738 <HAL_QSPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hqspi: QSPI handle pointer
  * @retval None
  */
void HAL_QSPI_MspInit(QSPI_HandleTypeDef* hqspi)
{
 8005738:	b580      	push	{r7, lr}
 800573a:	b08a      	sub	sp, #40	@ 0x28
 800573c:	af00      	add	r7, sp, #0
 800573e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005740:	f107 0314 	add.w	r3, r7, #20
 8005744:	2200      	movs	r2, #0
 8005746:	601a      	str	r2, [r3, #0]
 8005748:	605a      	str	r2, [r3, #4]
 800574a:	609a      	str	r2, [r3, #8]
 800574c:	60da      	str	r2, [r3, #12]
 800574e:	611a      	str	r2, [r3, #16]
  if(hqspi->Instance==QUADSPI)
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	4a26      	ldr	r2, [pc, #152]	@ (80057f0 <HAL_QSPI_MspInit+0xb8>)
 8005756:	4293      	cmp	r3, r2
 8005758:	d145      	bne.n	80057e6 <HAL_QSPI_MspInit+0xae>
  {
    /* USER CODE BEGIN QUADSPI_MspInit 0 */

    /* USER CODE END QUADSPI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_QSPI_CLK_ENABLE();
 800575a:	4b26      	ldr	r3, [pc, #152]	@ (80057f4 <HAL_QSPI_MspInit+0xbc>)
 800575c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800575e:	4a25      	ldr	r2, [pc, #148]	@ (80057f4 <HAL_QSPI_MspInit+0xbc>)
 8005760:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005764:	6513      	str	r3, [r2, #80]	@ 0x50
 8005766:	4b23      	ldr	r3, [pc, #140]	@ (80057f4 <HAL_QSPI_MspInit+0xbc>)
 8005768:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800576a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800576e:	613b      	str	r3, [r7, #16]
 8005770:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005772:	4b20      	ldr	r3, [pc, #128]	@ (80057f4 <HAL_QSPI_MspInit+0xbc>)
 8005774:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005776:	4a1f      	ldr	r2, [pc, #124]	@ (80057f4 <HAL_QSPI_MspInit+0xbc>)
 8005778:	f043 0301 	orr.w	r3, r3, #1
 800577c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800577e:	4b1d      	ldr	r3, [pc, #116]	@ (80057f4 <HAL_QSPI_MspInit+0xbc>)
 8005780:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005782:	f003 0301 	and.w	r3, r3, #1
 8005786:	60fb      	str	r3, [r7, #12]
 8005788:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800578a:	4b1a      	ldr	r3, [pc, #104]	@ (80057f4 <HAL_QSPI_MspInit+0xbc>)
 800578c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800578e:	4a19      	ldr	r2, [pc, #100]	@ (80057f4 <HAL_QSPI_MspInit+0xbc>)
 8005790:	f043 0302 	orr.w	r3, r3, #2
 8005794:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8005796:	4b17      	ldr	r3, [pc, #92]	@ (80057f4 <HAL_QSPI_MspInit+0xbc>)
 8005798:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800579a:	f003 0302 	and.w	r3, r3, #2
 800579e:	60bb      	str	r3, [r7, #8]
 80057a0:	68bb      	ldr	r3, [r7, #8]
    PB0     ------> QUADSPI_BK1_IO1
    PB1     ------> QUADSPI_BK1_IO0
    PB10     ------> QUADSPI_CLK
    PB11     ------> QUADSPI_NCS
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80057a2:	23c0      	movs	r3, #192	@ 0xc0
 80057a4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80057a6:	2302      	movs	r3, #2
 80057a8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80057aa:	2300      	movs	r3, #0
 80057ac:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80057ae:	2303      	movs	r3, #3
 80057b0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 80057b2:	230a      	movs	r3, #10
 80057b4:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80057b6:	f107 0314 	add.w	r3, r7, #20
 80057ba:	4619      	mov	r1, r3
 80057bc:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80057c0:	f005 fcaa 	bl	800b118 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_10|GPIO_PIN_11;
 80057c4:	f640 4303 	movw	r3, #3075	@ 0xc03
 80057c8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80057ca:	2302      	movs	r3, #2
 80057cc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80057ce:	2300      	movs	r3, #0
 80057d0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80057d2:	2303      	movs	r3, #3
 80057d4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 80057d6:	230a      	movs	r3, #10
 80057d8:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80057da:	f107 0314 	add.w	r3, r7, #20
 80057de:	4619      	mov	r1, r3
 80057e0:	4805      	ldr	r0, [pc, #20]	@ (80057f8 <HAL_QSPI_MspInit+0xc0>)
 80057e2:	f005 fc99 	bl	800b118 <HAL_GPIO_Init>

    /* USER CODE END QUADSPI_MspInit 1 */

  }

}
 80057e6:	bf00      	nop
 80057e8:	3728      	adds	r7, #40	@ 0x28
 80057ea:	46bd      	mov	sp, r7
 80057ec:	bd80      	pop	{r7, pc}
 80057ee:	bf00      	nop
 80057f0:	a0001000 	.word	0xa0001000
 80057f4:	40021000 	.word	0x40021000
 80057f8:	48000400 	.word	0x48000400

080057fc <HAL_RTC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hrtc: RTC handle pointer
  * @retval None
  */
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 80057fc:	b580      	push	{r7, lr}
 80057fe:	b0a4      	sub	sp, #144	@ 0x90
 8005800:	af00      	add	r7, sp, #0
 8005802:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8005804:	f107 0308 	add.w	r3, r7, #8
 8005808:	2288      	movs	r2, #136	@ 0x88
 800580a:	2100      	movs	r1, #0
 800580c:	4618      	mov	r0, r3
 800580e:	f00d faf7 	bl	8012e00 <memset>
  if(hrtc->Instance==RTC)
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	4a14      	ldr	r2, [pc, #80]	@ (8005868 <HAL_RTC_MspInit+0x6c>)
 8005818:	4293      	cmp	r3, r2
 800581a:	d120      	bne.n	800585e <HAL_RTC_MspInit+0x62>

    /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 800581c:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8005820:	60bb      	str	r3, [r7, #8]
    PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8005822:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8005826:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800582a:	f107 0308 	add.w	r3, r7, #8
 800582e:	4618      	mov	r0, r3
 8005830:	f007 fee2 	bl	800d5f8 <HAL_RCCEx_PeriphCLKConfig>
 8005834:	4603      	mov	r3, r0
 8005836:	2b00      	cmp	r3, #0
 8005838:	d001      	beq.n	800583e <HAL_RTC_MspInit+0x42>
    {
      Error_Handler();
 800583a:	f7fe fb63 	bl	8003f04 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 800583e:	4b0b      	ldr	r3, [pc, #44]	@ (800586c <HAL_RTC_MspInit+0x70>)
 8005840:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005844:	4a09      	ldr	r2, [pc, #36]	@ (800586c <HAL_RTC_MspInit+0x70>)
 8005846:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800584a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_Alarm_IRQn, 0, 0);
 800584e:	2200      	movs	r2, #0
 8005850:	2100      	movs	r1, #0
 8005852:	2029      	movs	r0, #41	@ 0x29
 8005854:	f005 f8f1 	bl	800aa3a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_Alarm_IRQn);
 8005858:	2029      	movs	r0, #41	@ 0x29
 800585a:	f005 f90a 	bl	800aa72 <HAL_NVIC_EnableIRQ>

    /* USER CODE END RTC_MspInit 1 */

  }

}
 800585e:	bf00      	nop
 8005860:	3790      	adds	r7, #144	@ 0x90
 8005862:	46bd      	mov	sp, r7
 8005864:	bd80      	pop	{r7, pc}
 8005866:	bf00      	nop
 8005868:	40002800 	.word	0x40002800
 800586c:	40021000 	.word	0x40021000

08005870 <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8005870:	b580      	push	{r7, lr}
 8005872:	b08c      	sub	sp, #48	@ 0x30
 8005874:	af00      	add	r7, sp, #0
 8005876:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005878:	f107 031c 	add.w	r3, r7, #28
 800587c:	2200      	movs	r2, #0
 800587e:	601a      	str	r2, [r3, #0]
 8005880:	605a      	str	r2, [r3, #4]
 8005882:	609a      	str	r2, [r3, #8]
 8005884:	60da      	str	r2, [r3, #12]
 8005886:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	681b      	ldr	r3, [r3, #0]
 800588c:	4a2f      	ldr	r2, [pc, #188]	@ (800594c <HAL_SPI_MspInit+0xdc>)
 800588e:	4293      	cmp	r3, r2
 8005890:	d129      	bne.n	80058e6 <HAL_SPI_MspInit+0x76>
  {
    /* USER CODE BEGIN SPI2_MspInit 0 */

    /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8005892:	4b2f      	ldr	r3, [pc, #188]	@ (8005950 <HAL_SPI_MspInit+0xe0>)
 8005894:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005896:	4a2e      	ldr	r2, [pc, #184]	@ (8005950 <HAL_SPI_MspInit+0xe0>)
 8005898:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800589c:	6593      	str	r3, [r2, #88]	@ 0x58
 800589e:	4b2c      	ldr	r3, [pc, #176]	@ (8005950 <HAL_SPI_MspInit+0xe0>)
 80058a0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80058a2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80058a6:	61bb      	str	r3, [r7, #24]
 80058a8:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80058aa:	4b29      	ldr	r3, [pc, #164]	@ (8005950 <HAL_SPI_MspInit+0xe0>)
 80058ac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80058ae:	4a28      	ldr	r2, [pc, #160]	@ (8005950 <HAL_SPI_MspInit+0xe0>)
 80058b0:	f043 0302 	orr.w	r3, r3, #2
 80058b4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80058b6:	4b26      	ldr	r3, [pc, #152]	@ (8005950 <HAL_SPI_MspInit+0xe0>)
 80058b8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80058ba:	f003 0302 	and.w	r3, r3, #2
 80058be:	617b      	str	r3, [r7, #20]
 80058c0:	697b      	ldr	r3, [r7, #20]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 80058c2:	f44f 4360 	mov.w	r3, #57344	@ 0xe000
 80058c6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80058c8:	2302      	movs	r3, #2
 80058ca:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80058cc:	2300      	movs	r3, #0
 80058ce:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80058d0:	2303      	movs	r3, #3
 80058d2:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80058d4:	2305      	movs	r3, #5
 80058d6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80058d8:	f107 031c 	add.w	r3, r7, #28
 80058dc:	4619      	mov	r1, r3
 80058de:	481d      	ldr	r0, [pc, #116]	@ (8005954 <HAL_SPI_MspInit+0xe4>)
 80058e0:	f005 fc1a 	bl	800b118 <HAL_GPIO_Init>
    /* USER CODE BEGIN SPI3_MspInit 1 */

    /* USER CODE END SPI3_MspInit 1 */
  }

}
 80058e4:	e02d      	b.n	8005942 <HAL_SPI_MspInit+0xd2>
  else if(hspi->Instance==SPI3)
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	681b      	ldr	r3, [r3, #0]
 80058ea:	4a1b      	ldr	r2, [pc, #108]	@ (8005958 <HAL_SPI_MspInit+0xe8>)
 80058ec:	4293      	cmp	r3, r2
 80058ee:	d128      	bne.n	8005942 <HAL_SPI_MspInit+0xd2>
    __HAL_RCC_SPI3_CLK_ENABLE();
 80058f0:	4b17      	ldr	r3, [pc, #92]	@ (8005950 <HAL_SPI_MspInit+0xe0>)
 80058f2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80058f4:	4a16      	ldr	r2, [pc, #88]	@ (8005950 <HAL_SPI_MspInit+0xe0>)
 80058f6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80058fa:	6593      	str	r3, [r2, #88]	@ 0x58
 80058fc:	4b14      	ldr	r3, [pc, #80]	@ (8005950 <HAL_SPI_MspInit+0xe0>)
 80058fe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005900:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005904:	613b      	str	r3, [r7, #16]
 8005906:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8005908:	4b11      	ldr	r3, [pc, #68]	@ (8005950 <HAL_SPI_MspInit+0xe0>)
 800590a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800590c:	4a10      	ldr	r2, [pc, #64]	@ (8005950 <HAL_SPI_MspInit+0xe0>)
 800590e:	f043 0304 	orr.w	r3, r3, #4
 8005912:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8005914:	4b0e      	ldr	r3, [pc, #56]	@ (8005950 <HAL_SPI_MspInit+0xe0>)
 8005916:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005918:	f003 0304 	and.w	r3, r3, #4
 800591c:	60fb      	str	r3, [r7, #12]
 800591e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 8005920:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 8005924:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005926:	2302      	movs	r3, #2
 8005928:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800592a:	2300      	movs	r3, #0
 800592c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800592e:	2303      	movs	r3, #3
 8005930:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8005932:	2306      	movs	r3, #6
 8005934:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005936:	f107 031c 	add.w	r3, r7, #28
 800593a:	4619      	mov	r1, r3
 800593c:	4807      	ldr	r0, [pc, #28]	@ (800595c <HAL_SPI_MspInit+0xec>)
 800593e:	f005 fbeb 	bl	800b118 <HAL_GPIO_Init>
}
 8005942:	bf00      	nop
 8005944:	3730      	adds	r7, #48	@ 0x30
 8005946:	46bd      	mov	sp, r7
 8005948:	bd80      	pop	{r7, pc}
 800594a:	bf00      	nop
 800594c:	40003800 	.word	0x40003800
 8005950:	40021000 	.word	0x40021000
 8005954:	48000400 	.word	0x48000400
 8005958:	40003c00 	.word	0x40003c00
 800595c:	48000800 	.word	0x48000800

08005960 <HAL_TIM_OC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_oc: TIM_OC handle pointer
  * @retval None
  */
void HAL_TIM_OC_MspInit(TIM_HandleTypeDef* htim_oc)
{
 8005960:	b480      	push	{r7}
 8005962:	b085      	sub	sp, #20
 8005964:	af00      	add	r7, sp, #0
 8005966:	6078      	str	r0, [r7, #4]
  if(htim_oc->Instance==TIM1)
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	4a0a      	ldr	r2, [pc, #40]	@ (8005998 <HAL_TIM_OC_MspInit+0x38>)
 800596e:	4293      	cmp	r3, r2
 8005970:	d10b      	bne.n	800598a <HAL_TIM_OC_MspInit+0x2a>
  {
    /* USER CODE BEGIN TIM1_MspInit 0 */

    /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8005972:	4b0a      	ldr	r3, [pc, #40]	@ (800599c <HAL_TIM_OC_MspInit+0x3c>)
 8005974:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005976:	4a09      	ldr	r2, [pc, #36]	@ (800599c <HAL_TIM_OC_MspInit+0x3c>)
 8005978:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 800597c:	6613      	str	r3, [r2, #96]	@ 0x60
 800597e:	4b07      	ldr	r3, [pc, #28]	@ (800599c <HAL_TIM_OC_MspInit+0x3c>)
 8005980:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005982:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005986:	60fb      	str	r3, [r7, #12]
 8005988:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END TIM1_MspInit 1 */

  }

}
 800598a:	bf00      	nop
 800598c:	3714      	adds	r7, #20
 800598e:	46bd      	mov	sp, r7
 8005990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005994:	4770      	bx	lr
 8005996:	bf00      	nop
 8005998:	40012c00 	.word	0x40012c00
 800599c:	40021000 	.word	0x40021000

080059a0 <HAL_TIM_IC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_ic: TIM_IC handle pointer
  * @retval None
  */
void HAL_TIM_IC_MspInit(TIM_HandleTypeDef* htim_ic)
{
 80059a0:	b580      	push	{r7, lr}
 80059a2:	b08a      	sub	sp, #40	@ 0x28
 80059a4:	af00      	add	r7, sp, #0
 80059a6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80059a8:	f107 0314 	add.w	r3, r7, #20
 80059ac:	2200      	movs	r2, #0
 80059ae:	601a      	str	r2, [r3, #0]
 80059b0:	605a      	str	r2, [r3, #4]
 80059b2:	609a      	str	r2, [r3, #8]
 80059b4:	60da      	str	r2, [r3, #12]
 80059b6:	611a      	str	r2, [r3, #16]
  if(htim_ic->Instance==TIM2)
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80059c0:	d128      	bne.n	8005a14 <HAL_TIM_IC_MspInit+0x74>
  {
    /* USER CODE BEGIN TIM2_MspInit 0 */

    /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80059c2:	4b16      	ldr	r3, [pc, #88]	@ (8005a1c <HAL_TIM_IC_MspInit+0x7c>)
 80059c4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80059c6:	4a15      	ldr	r2, [pc, #84]	@ (8005a1c <HAL_TIM_IC_MspInit+0x7c>)
 80059c8:	f043 0301 	orr.w	r3, r3, #1
 80059cc:	6593      	str	r3, [r2, #88]	@ 0x58
 80059ce:	4b13      	ldr	r3, [pc, #76]	@ (8005a1c <HAL_TIM_IC_MspInit+0x7c>)
 80059d0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80059d2:	f003 0301 	and.w	r3, r3, #1
 80059d6:	613b      	str	r3, [r7, #16]
 80059d8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80059da:	4b10      	ldr	r3, [pc, #64]	@ (8005a1c <HAL_TIM_IC_MspInit+0x7c>)
 80059dc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80059de:	4a0f      	ldr	r2, [pc, #60]	@ (8005a1c <HAL_TIM_IC_MspInit+0x7c>)
 80059e0:	f043 0301 	orr.w	r3, r3, #1
 80059e4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80059e6:	4b0d      	ldr	r3, [pc, #52]	@ (8005a1c <HAL_TIM_IC_MspInit+0x7c>)
 80059e8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80059ea:	f003 0301 	and.w	r3, r3, #1
 80059ee:	60fb      	str	r3, [r7, #12]
 80059f0:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA5     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 80059f2:	2320      	movs	r3, #32
 80059f4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80059f6:	2302      	movs	r3, #2
 80059f8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80059fa:	2301      	movs	r3, #1
 80059fc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80059fe:	2300      	movs	r3, #0
 8005a00:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8005a02:	2301      	movs	r3, #1
 8005a04:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005a06:	f107 0314 	add.w	r3, r7, #20
 8005a0a:	4619      	mov	r1, r3
 8005a0c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8005a10:	f005 fb82 	bl	800b118 <HAL_GPIO_Init>

    /* USER CODE END TIM2_MspInit 1 */

  }

}
 8005a14:	bf00      	nop
 8005a16:	3728      	adds	r7, #40	@ 0x28
 8005a18:	46bd      	mov	sp, r7
 8005a1a:	bd80      	pop	{r7, pc}
 8005a1c:	40021000 	.word	0x40021000

08005a20 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8005a20:	b480      	push	{r7}
 8005a22:	b085      	sub	sp, #20
 8005a24:	af00      	add	r7, sp, #0
 8005a26:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	681b      	ldr	r3, [r3, #0]
 8005a2c:	4a13      	ldr	r2, [pc, #76]	@ (8005a7c <HAL_TIM_Base_MspInit+0x5c>)
 8005a2e:	4293      	cmp	r3, r2
 8005a30:	d10c      	bne.n	8005a4c <HAL_TIM_Base_MspInit+0x2c>
  {
    /* USER CODE BEGIN TIM3_MspInit 0 */

    /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8005a32:	4b13      	ldr	r3, [pc, #76]	@ (8005a80 <HAL_TIM_Base_MspInit+0x60>)
 8005a34:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005a36:	4a12      	ldr	r2, [pc, #72]	@ (8005a80 <HAL_TIM_Base_MspInit+0x60>)
 8005a38:	f043 0302 	orr.w	r3, r3, #2
 8005a3c:	6593      	str	r3, [r2, #88]	@ 0x58
 8005a3e:	4b10      	ldr	r3, [pc, #64]	@ (8005a80 <HAL_TIM_Base_MspInit+0x60>)
 8005a40:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005a42:	f003 0302 	and.w	r3, r3, #2
 8005a46:	60fb      	str	r3, [r7, #12]
 8005a48:	68fb      	ldr	r3, [r7, #12]
    /* USER CODE BEGIN TIM4_MspInit 1 */

    /* USER CODE END TIM4_MspInit 1 */
  }

}
 8005a4a:	e010      	b.n	8005a6e <HAL_TIM_Base_MspInit+0x4e>
  else if(htim_base->Instance==TIM4)
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	4a0c      	ldr	r2, [pc, #48]	@ (8005a84 <HAL_TIM_Base_MspInit+0x64>)
 8005a52:	4293      	cmp	r3, r2
 8005a54:	d10b      	bne.n	8005a6e <HAL_TIM_Base_MspInit+0x4e>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8005a56:	4b0a      	ldr	r3, [pc, #40]	@ (8005a80 <HAL_TIM_Base_MspInit+0x60>)
 8005a58:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005a5a:	4a09      	ldr	r2, [pc, #36]	@ (8005a80 <HAL_TIM_Base_MspInit+0x60>)
 8005a5c:	f043 0304 	orr.w	r3, r3, #4
 8005a60:	6593      	str	r3, [r2, #88]	@ 0x58
 8005a62:	4b07      	ldr	r3, [pc, #28]	@ (8005a80 <HAL_TIM_Base_MspInit+0x60>)
 8005a64:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005a66:	f003 0304 	and.w	r3, r3, #4
 8005a6a:	60bb      	str	r3, [r7, #8]
 8005a6c:	68bb      	ldr	r3, [r7, #8]
}
 8005a6e:	bf00      	nop
 8005a70:	3714      	adds	r7, #20
 8005a72:	46bd      	mov	sp, r7
 8005a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a78:	4770      	bx	lr
 8005a7a:	bf00      	nop
 8005a7c:	40000400 	.word	0x40000400
 8005a80:	40021000 	.word	0x40021000
 8005a84:	40000800 	.word	0x40000800

08005a88 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8005a88:	b580      	push	{r7, lr}
 8005a8a:	b08a      	sub	sp, #40	@ 0x28
 8005a8c:	af00      	add	r7, sp, #0
 8005a8e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005a90:	f107 0314 	add.w	r3, r7, #20
 8005a94:	2200      	movs	r2, #0
 8005a96:	601a      	str	r2, [r3, #0]
 8005a98:	605a      	str	r2, [r3, #4]
 8005a9a:	609a      	str	r2, [r3, #8]
 8005a9c:	60da      	str	r2, [r3, #12]
 8005a9e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	681b      	ldr	r3, [r3, #0]
 8005aa4:	4a23      	ldr	r2, [pc, #140]	@ (8005b34 <HAL_TIM_MspPostInit+0xac>)
 8005aa6:	4293      	cmp	r3, r2
 8005aa8:	d11e      	bne.n	8005ae8 <HAL_TIM_MspPostInit+0x60>
  {
    /* USER CODE BEGIN TIM1_MspPostInit 0 */

    /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005aaa:	4b23      	ldr	r3, [pc, #140]	@ (8005b38 <HAL_TIM_MspPostInit+0xb0>)
 8005aac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005aae:	4a22      	ldr	r2, [pc, #136]	@ (8005b38 <HAL_TIM_MspPostInit+0xb0>)
 8005ab0:	f043 0301 	orr.w	r3, r3, #1
 8005ab4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8005ab6:	4b20      	ldr	r3, [pc, #128]	@ (8005b38 <HAL_TIM_MspPostInit+0xb0>)
 8005ab8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005aba:	f003 0301 	and.w	r3, r3, #1
 8005abe:	613b      	str	r3, [r7, #16]
 8005ac0:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10;
 8005ac2:	f44f 63e0 	mov.w	r3, #1792	@ 0x700
 8005ac6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005ac8:	2302      	movs	r3, #2
 8005aca:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005acc:	2300      	movs	r3, #0
 8005ace:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005ad0:	2300      	movs	r3, #0
 8005ad2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8005ad4:	2301      	movs	r3, #1
 8005ad6:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005ad8:	f107 0314 	add.w	r3, r7, #20
 8005adc:	4619      	mov	r1, r3
 8005ade:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8005ae2:	f005 fb19 	bl	800b118 <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM3_MspPostInit 1 */

    /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8005ae6:	e021      	b.n	8005b2c <HAL_TIM_MspPostInit+0xa4>
  else if(htim->Instance==TIM3)
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	4a13      	ldr	r2, [pc, #76]	@ (8005b3c <HAL_TIM_MspPostInit+0xb4>)
 8005aee:	4293      	cmp	r3, r2
 8005af0:	d11c      	bne.n	8005b2c <HAL_TIM_MspPostInit+0xa4>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8005af2:	4b11      	ldr	r3, [pc, #68]	@ (8005b38 <HAL_TIM_MspPostInit+0xb0>)
 8005af4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005af6:	4a10      	ldr	r2, [pc, #64]	@ (8005b38 <HAL_TIM_MspPostInit+0xb0>)
 8005af8:	f043 0304 	orr.w	r3, r3, #4
 8005afc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8005afe:	4b0e      	ldr	r3, [pc, #56]	@ (8005b38 <HAL_TIM_MspPostInit+0xb0>)
 8005b00:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005b02:	f003 0304 	and.w	r3, r3, #4
 8005b06:	60fb      	str	r3, [r7, #12]
 8005b08:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8005b0a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8005b0e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005b10:	2302      	movs	r3, #2
 8005b12:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005b14:	2300      	movs	r3, #0
 8005b16:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005b18:	2300      	movs	r3, #0
 8005b1a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8005b1c:	2302      	movs	r3, #2
 8005b1e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005b20:	f107 0314 	add.w	r3, r7, #20
 8005b24:	4619      	mov	r1, r3
 8005b26:	4806      	ldr	r0, [pc, #24]	@ (8005b40 <HAL_TIM_MspPostInit+0xb8>)
 8005b28:	f005 faf6 	bl	800b118 <HAL_GPIO_Init>
}
 8005b2c:	bf00      	nop
 8005b2e:	3728      	adds	r7, #40	@ 0x28
 8005b30:	46bd      	mov	sp, r7
 8005b32:	bd80      	pop	{r7, pc}
 8005b34:	40012c00 	.word	0x40012c00
 8005b38:	40021000 	.word	0x40021000
 8005b3c:	40000400 	.word	0x40000400
 8005b40:	48000800 	.word	0x48000800

08005b44 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8005b44:	b580      	push	{r7, lr}
 8005b46:	b0ae      	sub	sp, #184	@ 0xb8
 8005b48:	af00      	add	r7, sp, #0
 8005b4a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005b4c:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8005b50:	2200      	movs	r2, #0
 8005b52:	601a      	str	r2, [r3, #0]
 8005b54:	605a      	str	r2, [r3, #4]
 8005b56:	609a      	str	r2, [r3, #8]
 8005b58:	60da      	str	r2, [r3, #12]
 8005b5a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8005b5c:	f107 031c 	add.w	r3, r7, #28
 8005b60:	2288      	movs	r2, #136	@ 0x88
 8005b62:	2100      	movs	r1, #0
 8005b64:	4618      	mov	r0, r3
 8005b66:	f00d f94b 	bl	8012e00 <memset>
  if(huart->Instance==UART4)
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	4a6b      	ldr	r2, [pc, #428]	@ (8005d1c <HAL_UART_MspInit+0x1d8>)
 8005b70:	4293      	cmp	r3, r2
 8005b72:	d13c      	bne.n	8005bee <HAL_UART_MspInit+0xaa>

    /* USER CODE END UART4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 8005b74:	2308      	movs	r3, #8
 8005b76:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.Uart4ClockSelection = RCC_UART4CLKSOURCE_PCLK1;
 8005b78:	2300      	movs	r3, #0
 8005b7a:	663b      	str	r3, [r7, #96]	@ 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8005b7c:	f107 031c 	add.w	r3, r7, #28
 8005b80:	4618      	mov	r0, r3
 8005b82:	f007 fd39 	bl	800d5f8 <HAL_RCCEx_PeriphCLKConfig>
 8005b86:	4603      	mov	r3, r0
 8005b88:	2b00      	cmp	r3, #0
 8005b8a:	d001      	beq.n	8005b90 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8005b8c:	f7fe f9ba 	bl	8003f04 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8005b90:	4b63      	ldr	r3, [pc, #396]	@ (8005d20 <HAL_UART_MspInit+0x1dc>)
 8005b92:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005b94:	4a62      	ldr	r2, [pc, #392]	@ (8005d20 <HAL_UART_MspInit+0x1dc>)
 8005b96:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8005b9a:	6593      	str	r3, [r2, #88]	@ 0x58
 8005b9c:	4b60      	ldr	r3, [pc, #384]	@ (8005d20 <HAL_UART_MspInit+0x1dc>)
 8005b9e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005ba0:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8005ba4:	61bb      	str	r3, [r7, #24]
 8005ba6:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005ba8:	4b5d      	ldr	r3, [pc, #372]	@ (8005d20 <HAL_UART_MspInit+0x1dc>)
 8005baa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005bac:	4a5c      	ldr	r2, [pc, #368]	@ (8005d20 <HAL_UART_MspInit+0x1dc>)
 8005bae:	f043 0301 	orr.w	r3, r3, #1
 8005bb2:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8005bb4:	4b5a      	ldr	r3, [pc, #360]	@ (8005d20 <HAL_UART_MspInit+0x1dc>)
 8005bb6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005bb8:	f003 0301 	and.w	r3, r3, #1
 8005bbc:	617b      	str	r3, [r7, #20]
 8005bbe:	697b      	ldr	r3, [r7, #20]
    /**UART4 GPIO Configuration
    PA0     ------> UART4_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8005bc0:	2301      	movs	r3, #1
 8005bc2:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8005bc6:	2312      	movs	r3, #18
 8005bc8:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8005bcc:	2301      	movs	r3, #1
 8005bce:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005bd2:	2303      	movs	r3, #3
 8005bd4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8005bd8:	2308      	movs	r3, #8
 8005bda:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005bde:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8005be2:	4619      	mov	r1, r3
 8005be4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8005be8:	f005 fa96 	bl	800b118 <HAL_GPIO_Init>
    /* USER CODE BEGIN USART1_MspInit 1 */

    /* USER CODE END USART1_MspInit 1 */
  }

}
 8005bec:	e092      	b.n	8005d14 <HAL_UART_MspInit+0x1d0>
  else if(huart->Instance==USART1)
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	681b      	ldr	r3, [r3, #0]
 8005bf2:	4a4c      	ldr	r2, [pc, #304]	@ (8005d24 <HAL_UART_MspInit+0x1e0>)
 8005bf4:	4293      	cmp	r3, r2
 8005bf6:	f040 808d 	bne.w	8005d14 <HAL_UART_MspInit+0x1d0>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8005bfa:	2301      	movs	r3, #1
 8005bfc:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8005bfe:	2300      	movs	r3, #0
 8005c00:	657b      	str	r3, [r7, #84]	@ 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8005c02:	f107 031c 	add.w	r3, r7, #28
 8005c06:	4618      	mov	r0, r3
 8005c08:	f007 fcf6 	bl	800d5f8 <HAL_RCCEx_PeriphCLKConfig>
 8005c0c:	4603      	mov	r3, r0
 8005c0e:	2b00      	cmp	r3, #0
 8005c10:	d001      	beq.n	8005c16 <HAL_UART_MspInit+0xd2>
      Error_Handler();
 8005c12:	f7fe f977 	bl	8003f04 <Error_Handler>
    __HAL_RCC_USART1_CLK_ENABLE();
 8005c16:	4b42      	ldr	r3, [pc, #264]	@ (8005d20 <HAL_UART_MspInit+0x1dc>)
 8005c18:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005c1a:	4a41      	ldr	r2, [pc, #260]	@ (8005d20 <HAL_UART_MspInit+0x1dc>)
 8005c1c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8005c20:	6613      	str	r3, [r2, #96]	@ 0x60
 8005c22:	4b3f      	ldr	r3, [pc, #252]	@ (8005d20 <HAL_UART_MspInit+0x1dc>)
 8005c24:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005c26:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005c2a:	613b      	str	r3, [r7, #16]
 8005c2c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005c2e:	4b3c      	ldr	r3, [pc, #240]	@ (8005d20 <HAL_UART_MspInit+0x1dc>)
 8005c30:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005c32:	4a3b      	ldr	r2, [pc, #236]	@ (8005d20 <HAL_UART_MspInit+0x1dc>)
 8005c34:	f043 0302 	orr.w	r3, r3, #2
 8005c38:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8005c3a:	4b39      	ldr	r3, [pc, #228]	@ (8005d20 <HAL_UART_MspInit+0x1dc>)
 8005c3c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005c3e:	f003 0302 	and.w	r3, r3, #2
 8005c42:	60fb      	str	r3, [r7, #12]
 8005c44:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_6|GPIO_PIN_7;
 8005c46:	23d8      	movs	r3, #216	@ 0xd8
 8005c48:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005c4c:	2302      	movs	r3, #2
 8005c4e:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005c52:	2300      	movs	r3, #0
 8005c54:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005c58:	2303      	movs	r3, #3
 8005c5a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8005c5e:	2307      	movs	r3, #7
 8005c60:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005c64:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8005c68:	4619      	mov	r1, r3
 8005c6a:	482f      	ldr	r0, [pc, #188]	@ (8005d28 <HAL_UART_MspInit+0x1e4>)
 8005c6c:	f005 fa54 	bl	800b118 <HAL_GPIO_Init>
    hdma_usart1_rx.Instance = DMA1_Channel5;
 8005c70:	4b2e      	ldr	r3, [pc, #184]	@ (8005d2c <HAL_UART_MspInit+0x1e8>)
 8005c72:	4a2f      	ldr	r2, [pc, #188]	@ (8005d30 <HAL_UART_MspInit+0x1ec>)
 8005c74:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Request = DMA_REQUEST_2;
 8005c76:	4b2d      	ldr	r3, [pc, #180]	@ (8005d2c <HAL_UART_MspInit+0x1e8>)
 8005c78:	2202      	movs	r2, #2
 8005c7a:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8005c7c:	4b2b      	ldr	r3, [pc, #172]	@ (8005d2c <HAL_UART_MspInit+0x1e8>)
 8005c7e:	2200      	movs	r2, #0
 8005c80:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8005c82:	4b2a      	ldr	r3, [pc, #168]	@ (8005d2c <HAL_UART_MspInit+0x1e8>)
 8005c84:	2200      	movs	r2, #0
 8005c86:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8005c88:	4b28      	ldr	r3, [pc, #160]	@ (8005d2c <HAL_UART_MspInit+0x1e8>)
 8005c8a:	2280      	movs	r2, #128	@ 0x80
 8005c8c:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8005c8e:	4b27      	ldr	r3, [pc, #156]	@ (8005d2c <HAL_UART_MspInit+0x1e8>)
 8005c90:	2200      	movs	r2, #0
 8005c92:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8005c94:	4b25      	ldr	r3, [pc, #148]	@ (8005d2c <HAL_UART_MspInit+0x1e8>)
 8005c96:	2200      	movs	r2, #0
 8005c98:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 8005c9a:	4b24      	ldr	r3, [pc, #144]	@ (8005d2c <HAL_UART_MspInit+0x1e8>)
 8005c9c:	2200      	movs	r2, #0
 8005c9e:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8005ca0:	4b22      	ldr	r3, [pc, #136]	@ (8005d2c <HAL_UART_MspInit+0x1e8>)
 8005ca2:	2200      	movs	r2, #0
 8005ca4:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8005ca6:	4821      	ldr	r0, [pc, #132]	@ (8005d2c <HAL_UART_MspInit+0x1e8>)
 8005ca8:	f004 fff4 	bl	800ac94 <HAL_DMA_Init>
 8005cac:	4603      	mov	r3, r0
 8005cae:	2b00      	cmp	r3, #0
 8005cb0:	d001      	beq.n	8005cb6 <HAL_UART_MspInit+0x172>
      Error_Handler();
 8005cb2:	f7fe f927 	bl	8003f04 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	4a1c      	ldr	r2, [pc, #112]	@ (8005d2c <HAL_UART_MspInit+0x1e8>)
 8005cba:	675a      	str	r2, [r3, #116]	@ 0x74
 8005cbc:	4a1b      	ldr	r2, [pc, #108]	@ (8005d2c <HAL_UART_MspInit+0x1e8>)
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	6293      	str	r3, [r2, #40]	@ 0x28
    hdma_usart1_tx.Instance = DMA1_Channel4;
 8005cc2:	4b1c      	ldr	r3, [pc, #112]	@ (8005d34 <HAL_UART_MspInit+0x1f0>)
 8005cc4:	4a1c      	ldr	r2, [pc, #112]	@ (8005d38 <HAL_UART_MspInit+0x1f4>)
 8005cc6:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Request = DMA_REQUEST_2;
 8005cc8:	4b1a      	ldr	r3, [pc, #104]	@ (8005d34 <HAL_UART_MspInit+0x1f0>)
 8005cca:	2202      	movs	r2, #2
 8005ccc:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8005cce:	4b19      	ldr	r3, [pc, #100]	@ (8005d34 <HAL_UART_MspInit+0x1f0>)
 8005cd0:	2210      	movs	r2, #16
 8005cd2:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8005cd4:	4b17      	ldr	r3, [pc, #92]	@ (8005d34 <HAL_UART_MspInit+0x1f0>)
 8005cd6:	2200      	movs	r2, #0
 8005cd8:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8005cda:	4b16      	ldr	r3, [pc, #88]	@ (8005d34 <HAL_UART_MspInit+0x1f0>)
 8005cdc:	2280      	movs	r2, #128	@ 0x80
 8005cde:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8005ce0:	4b14      	ldr	r3, [pc, #80]	@ (8005d34 <HAL_UART_MspInit+0x1f0>)
 8005ce2:	2200      	movs	r2, #0
 8005ce4:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8005ce6:	4b13      	ldr	r3, [pc, #76]	@ (8005d34 <HAL_UART_MspInit+0x1f0>)
 8005ce8:	2200      	movs	r2, #0
 8005cea:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8005cec:	4b11      	ldr	r3, [pc, #68]	@ (8005d34 <HAL_UART_MspInit+0x1f0>)
 8005cee:	2200      	movs	r2, #0
 8005cf0:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8005cf2:	4b10      	ldr	r3, [pc, #64]	@ (8005d34 <HAL_UART_MspInit+0x1f0>)
 8005cf4:	2200      	movs	r2, #0
 8005cf6:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8005cf8:	480e      	ldr	r0, [pc, #56]	@ (8005d34 <HAL_UART_MspInit+0x1f0>)
 8005cfa:	f004 ffcb 	bl	800ac94 <HAL_DMA_Init>
 8005cfe:	4603      	mov	r3, r0
 8005d00:	2b00      	cmp	r3, #0
 8005d02:	d001      	beq.n	8005d08 <HAL_UART_MspInit+0x1c4>
      Error_Handler();
 8005d04:	f7fe f8fe 	bl	8003f04 <Error_Handler>
    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	4a0a      	ldr	r2, [pc, #40]	@ (8005d34 <HAL_UART_MspInit+0x1f0>)
 8005d0c:	671a      	str	r2, [r3, #112]	@ 0x70
 8005d0e:	4a09      	ldr	r2, [pc, #36]	@ (8005d34 <HAL_UART_MspInit+0x1f0>)
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	6293      	str	r3, [r2, #40]	@ 0x28
}
 8005d14:	bf00      	nop
 8005d16:	37b8      	adds	r7, #184	@ 0xb8
 8005d18:	46bd      	mov	sp, r7
 8005d1a:	bd80      	pop	{r7, pc}
 8005d1c:	40004c00 	.word	0x40004c00
 8005d20:	40021000 	.word	0x40021000
 8005d24:	40013800 	.word	0x40013800
 8005d28:	48000400 	.word	0x48000400
 8005d2c:	20000524 	.word	0x20000524
 8005d30:	40020058 	.word	0x40020058
 8005d34:	2000056c 	.word	0x2000056c
 8005d38:	40020044 	.word	0x40020044

08005d3c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8005d3c:	b480      	push	{r7}
 8005d3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8005d40:	bf00      	nop
 8005d42:	e7fd      	b.n	8005d40 <NMI_Handler+0x4>

08005d44 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8005d44:	b480      	push	{r7}
 8005d46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8005d48:	bf00      	nop
 8005d4a:	e7fd      	b.n	8005d48 <HardFault_Handler+0x4>

08005d4c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8005d4c:	b480      	push	{r7}
 8005d4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8005d50:	bf00      	nop
 8005d52:	e7fd      	b.n	8005d50 <MemManage_Handler+0x4>

08005d54 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8005d54:	b480      	push	{r7}
 8005d56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8005d58:	bf00      	nop
 8005d5a:	e7fd      	b.n	8005d58 <BusFault_Handler+0x4>

08005d5c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8005d5c:	b480      	push	{r7}
 8005d5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8005d60:	bf00      	nop
 8005d62:	e7fd      	b.n	8005d60 <UsageFault_Handler+0x4>

08005d64 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8005d64:	b480      	push	{r7}
 8005d66:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8005d68:	bf00      	nop
 8005d6a:	46bd      	mov	sp, r7
 8005d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d70:	4770      	bx	lr

08005d72 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8005d72:	b480      	push	{r7}
 8005d74:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8005d76:	bf00      	nop
 8005d78:	46bd      	mov	sp, r7
 8005d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d7e:	4770      	bx	lr

08005d80 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8005d80:	b480      	push	{r7}
 8005d82:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8005d84:	bf00      	nop
 8005d86:	46bd      	mov	sp, r7
 8005d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d8c:	4770      	bx	lr

08005d8e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8005d8e:	b580      	push	{r7, lr}
 8005d90:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8005d92:	f003 f983 	bl	800909c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8005d96:	bf00      	nop
 8005d98:	bd80      	pop	{r7, pc}
	...

08005d9c <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8005d9c:	b580      	push	{r7, lr}
 8005d9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8005da0:	4802      	ldr	r0, [pc, #8]	@ (8005dac <DMA1_Channel1_IRQHandler+0x10>)
 8005da2:	f005 f8cd 	bl	800af40 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8005da6:	bf00      	nop
 8005da8:	bd80      	pop	{r7, pc}
 8005daa:	bf00      	nop
 8005dac:	200000f4 	.word	0x200000f4

08005db0 <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 8005db0:	b580      	push	{r7, lr}
 8005db2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8005db4:	4802      	ldr	r0, [pc, #8]	@ (8005dc0 <DMA1_Channel4_IRQHandler+0x10>)
 8005db6:	f005 f8c3 	bl	800af40 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 8005dba:	bf00      	nop
 8005dbc:	bd80      	pop	{r7, pc}
 8005dbe:	bf00      	nop
 8005dc0:	2000056c 	.word	0x2000056c

08005dc4 <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 8005dc4:	b580      	push	{r7, lr}
 8005dc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8005dc8:	4802      	ldr	r0, [pc, #8]	@ (8005dd4 <DMA1_Channel5_IRQHandler+0x10>)
 8005dca:	f005 f8b9 	bl	800af40 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 8005dce:	bf00      	nop
 8005dd0:	bd80      	pop	{r7, pc}
 8005dd2:	bf00      	nop
 8005dd4:	20000524 	.word	0x20000524

08005dd8 <RTC_Alarm_IRQHandler>:

/**
  * @brief This function handles RTC alarm interrupt through EXTI line 18.
  */
void RTC_Alarm_IRQHandler(void)
{
 8005dd8:	b580      	push	{r7, lr}
 8005dda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_Alarm_IRQn 0 */

  /* USER CODE END RTC_Alarm_IRQn 0 */
  HAL_RTC_AlarmIRQHandler(&hrtc);
 8005ddc:	4802      	ldr	r0, [pc, #8]	@ (8005de8 <RTC_Alarm_IRQHandler+0x10>)
 8005dde:	f008 fc0b 	bl	800e5f8 <HAL_RTC_AlarmIRQHandler>
  /* USER CODE BEGIN RTC_Alarm_IRQn 1 */

  /* USER CODE END RTC_Alarm_IRQn 1 */
}
 8005de2:	bf00      	nop
 8005de4:	bd80      	pop	{r7, pc}
 8005de6:	bf00      	nop
 8005de8:	200001f8 	.word	0x200001f8

08005dec <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8005dec:	b580      	push	{r7, lr}
 8005dee:	b086      	sub	sp, #24
 8005df0:	af00      	add	r7, sp, #0
 8005df2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8005df4:	4a14      	ldr	r2, [pc, #80]	@ (8005e48 <_sbrk+0x5c>)
 8005df6:	4b15      	ldr	r3, [pc, #84]	@ (8005e4c <_sbrk+0x60>)
 8005df8:	1ad3      	subs	r3, r2, r3
 8005dfa:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8005dfc:	697b      	ldr	r3, [r7, #20]
 8005dfe:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8005e00:	4b13      	ldr	r3, [pc, #76]	@ (8005e50 <_sbrk+0x64>)
 8005e02:	681b      	ldr	r3, [r3, #0]
 8005e04:	2b00      	cmp	r3, #0
 8005e06:	d102      	bne.n	8005e0e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8005e08:	4b11      	ldr	r3, [pc, #68]	@ (8005e50 <_sbrk+0x64>)
 8005e0a:	4a12      	ldr	r2, [pc, #72]	@ (8005e54 <_sbrk+0x68>)
 8005e0c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8005e0e:	4b10      	ldr	r3, [pc, #64]	@ (8005e50 <_sbrk+0x64>)
 8005e10:	681a      	ldr	r2, [r3, #0]
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	4413      	add	r3, r2
 8005e16:	693a      	ldr	r2, [r7, #16]
 8005e18:	429a      	cmp	r2, r3
 8005e1a:	d207      	bcs.n	8005e2c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8005e1c:	f00d f840 	bl	8012ea0 <__errno>
 8005e20:	4603      	mov	r3, r0
 8005e22:	220c      	movs	r2, #12
 8005e24:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8005e26:	f04f 33ff 	mov.w	r3, #4294967295
 8005e2a:	e009      	b.n	8005e40 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8005e2c:	4b08      	ldr	r3, [pc, #32]	@ (8005e50 <_sbrk+0x64>)
 8005e2e:	681b      	ldr	r3, [r3, #0]
 8005e30:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8005e32:	4b07      	ldr	r3, [pc, #28]	@ (8005e50 <_sbrk+0x64>)
 8005e34:	681a      	ldr	r2, [r3, #0]
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	4413      	add	r3, r2
 8005e3a:	4a05      	ldr	r2, [pc, #20]	@ (8005e50 <_sbrk+0x64>)
 8005e3c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8005e3e:	68fb      	ldr	r3, [r7, #12]
}
 8005e40:	4618      	mov	r0, r3
 8005e42:	3718      	adds	r7, #24
 8005e44:	46bd      	mov	sp, r7
 8005e46:	bd80      	pop	{r7, pc}
 8005e48:	20018000 	.word	0x20018000
 8005e4c:	00000400 	.word	0x00000400
 8005e50:	2000510c 	.word	0x2000510c
 8005e54:	20005268 	.word	0x20005268

08005e58 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8005e58:	b480      	push	{r7}
 8005e5a:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8005e5c:	4b06      	ldr	r3, [pc, #24]	@ (8005e78 <SystemInit+0x20>)
 8005e5e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005e62:	4a05      	ldr	r2, [pc, #20]	@ (8005e78 <SystemInit+0x20>)
 8005e64:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8005e68:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8005e6c:	bf00      	nop
 8005e6e:	46bd      	mov	sp, r7
 8005e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e74:	4770      	bx	lr
 8005e76:	bf00      	nop
 8005e78:	e000ed00 	.word	0xe000ed00

08005e7c <disk_status>:
/*-----------------------------------------------------------------------*/

DSTATUS disk_status (
	BYTE pdrv		/* Physical drive nmuber to identify the drive */
)
{
 8005e7c:	b580      	push	{r7, lr}
 8005e7e:	b084      	sub	sp, #16
 8005e80:	af00      	add	r7, sp, #0
 8005e82:	4603      	mov	r3, r0
 8005e84:	71fb      	strb	r3, [r7, #7]
	DSTATUS stat;

	switch (pdrv) {
 8005e86:	79fb      	ldrb	r3, [r7, #7]
 8005e88:	2b00      	cmp	r3, #0
 8005e8a:	d002      	beq.n	8005e92 <disk_status+0x16>
 8005e8c:	2b01      	cmp	r3, #1
 8005e8e:	d00c      	beq.n	8005eaa <disk_status+0x2e>
 8005e90:	e017      	b.n	8005ec2 <disk_status+0x46>
	case DEV_RAM :

		if(!psram_is_initialized())
 8005e92:	f7ff fa9b 	bl	80053cc <psram_is_initialized>
 8005e96:	4603      	mov	r3, r0
 8005e98:	2b00      	cmp	r3, #0
 8005e9a:	d102      	bne.n	8005ea2 <disk_status+0x26>
		{
			stat = STA_NOINIT;
 8005e9c:	2301      	movs	r3, #1
 8005e9e:	73fb      	strb	r3, [r7, #15]
 8005ea0:	e001      	b.n	8005ea6 <disk_status+0x2a>
		}else{
			stat = 0;
 8005ea2:	2300      	movs	r3, #0
 8005ea4:	73fb      	strb	r3, [r7, #15]
		}

		return stat;
 8005ea6:	7bfb      	ldrb	r3, [r7, #15]
 8005ea8:	e00c      	b.n	8005ec4 <disk_status+0x48>

	case DEV_MMC :

		if(!extflash_is_initialized())
 8005eaa:	f7fc f91f 	bl	80020ec <extflash_is_initialized>
 8005eae:	4603      	mov	r3, r0
 8005eb0:	2b00      	cmp	r3, #0
 8005eb2:	d102      	bne.n	8005eba <disk_status+0x3e>
		{
			stat = STA_NOINIT;
 8005eb4:	2301      	movs	r3, #1
 8005eb6:	73fb      	strb	r3, [r7, #15]
 8005eb8:	e001      	b.n	8005ebe <disk_status+0x42>
		}else{
			stat = 0;
 8005eba:	2300      	movs	r3, #0
 8005ebc:	73fb      	strb	r3, [r7, #15]
		}

		return stat;
 8005ebe:	7bfb      	ldrb	r3, [r7, #15]
 8005ec0:	e000      	b.n	8005ec4 <disk_status+0x48>

	}
	return STA_NOINIT;
 8005ec2:	2301      	movs	r3, #1
}
 8005ec4:	4618      	mov	r0, r3
 8005ec6:	3710      	adds	r7, #16
 8005ec8:	46bd      	mov	sp, r7
 8005eca:	bd80      	pop	{r7, pc}

08005ecc <disk_initialize>:
/*-----------------------------------------------------------------------*/

DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8005ecc:	b580      	push	{r7, lr}
 8005ece:	b084      	sub	sp, #16
 8005ed0:	af00      	add	r7, sp, #0
 8005ed2:	4603      	mov	r3, r0
 8005ed4:	71fb      	strb	r3, [r7, #7]
	DSTATUS stat;
	switch (pdrv) {
 8005ed6:	79fb      	ldrb	r3, [r7, #7]
 8005ed8:	2b00      	cmp	r3, #0
 8005eda:	d002      	beq.n	8005ee2 <disk_initialize+0x16>
 8005edc:	2b01      	cmp	r3, #1
 8005ede:	d00c      	beq.n	8005efa <disk_initialize+0x2e>
 8005ee0:	e017      	b.n	8005f12 <disk_initialize+0x46>
	case DEV_RAM :

		if(psram_init() < 0)
 8005ee2:	f7ff faa1 	bl	8005428 <psram_init>
 8005ee6:	4603      	mov	r3, r0
 8005ee8:	2b00      	cmp	r3, #0
 8005eea:	da02      	bge.n	8005ef2 <disk_initialize+0x26>
		{
			stat = STA_NODISK;
 8005eec:	2302      	movs	r3, #2
 8005eee:	73fb      	strb	r3, [r7, #15]
 8005ef0:	e001      	b.n	8005ef6 <disk_initialize+0x2a>
		}else{
			stat = 0;
 8005ef2:	2300      	movs	r3, #0
 8005ef4:	73fb      	strb	r3, [r7, #15]
		}

		return stat;
 8005ef6:	7bfb      	ldrb	r3, [r7, #15]
 8005ef8:	e00c      	b.n	8005f14 <disk_initialize+0x48>

	case DEV_MMC :

		if(extflash_init() < 0)
 8005efa:	f7fc f903 	bl	8002104 <extflash_init>
 8005efe:	4603      	mov	r3, r0
 8005f00:	2b00      	cmp	r3, #0
 8005f02:	da02      	bge.n	8005f0a <disk_initialize+0x3e>
		{
			stat = STA_NODISK;
 8005f04:	2302      	movs	r3, #2
 8005f06:	73fb      	strb	r3, [r7, #15]
 8005f08:	e001      	b.n	8005f0e <disk_initialize+0x42>
		}else{
			stat = 0;
 8005f0a:	2300      	movs	r3, #0
 8005f0c:	73fb      	strb	r3, [r7, #15]
		}

		return stat;
 8005f0e:	7bfb      	ldrb	r3, [r7, #15]
 8005f10:	e000      	b.n	8005f14 <disk_initialize+0x48>

	}
	return STA_NOINIT;
 8005f12:	2301      	movs	r3, #1
}
 8005f14:	4618      	mov	r0, r3
 8005f16:	3710      	adds	r7, #16
 8005f18:	46bd      	mov	sp, r7
 8005f1a:	bd80      	pop	{r7, pc}

08005f1c <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	LBA_t sector,	/* Start sector in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8005f1c:	b580      	push	{r7, lr}
 8005f1e:	b086      	sub	sp, #24
 8005f20:	af00      	add	r7, sp, #0
 8005f22:	60b9      	str	r1, [r7, #8]
 8005f24:	607a      	str	r2, [r7, #4]
 8005f26:	603b      	str	r3, [r7, #0]
 8005f28:	4603      	mov	r3, r0
 8005f2a:	73fb      	strb	r3, [r7, #15]
	DRESULT res;
	int result;

	switch (pdrv) {
 8005f2c:	7bfb      	ldrb	r3, [r7, #15]
 8005f2e:	2b00      	cmp	r3, #0
 8005f30:	d002      	beq.n	8005f38 <disk_read+0x1c>
 8005f32:	2b01      	cmp	r3, #1
 8005f34:	d010      	beq.n	8005f58 <disk_read+0x3c>
 8005f36:	e01e      	b.n	8005f76 <disk_read+0x5a>
	case DEV_RAM :

		if(psram_sector_read_write(0, sector, count, buff) < 0)
 8005f38:	68bb      	ldr	r3, [r7, #8]
 8005f3a:	683a      	ldr	r2, [r7, #0]
 8005f3c:	6879      	ldr	r1, [r7, #4]
 8005f3e:	2000      	movs	r0, #0
 8005f40:	f7ff f94a 	bl	80051d8 <psram_sector_read_write>
 8005f44:	4603      	mov	r3, r0
 8005f46:	2b00      	cmp	r3, #0
 8005f48:	da02      	bge.n	8005f50 <disk_read+0x34>
		{
			res = RES_ERROR;
 8005f4a:	2301      	movs	r3, #1
 8005f4c:	75fb      	strb	r3, [r7, #23]
 8005f4e:	e001      	b.n	8005f54 <disk_read+0x38>
		}else{

			res = 0;
 8005f50:	2300      	movs	r3, #0
 8005f52:	75fb      	strb	r3, [r7, #23]
		}

		return res;
 8005f54:	7dfb      	ldrb	r3, [r7, #23]
 8005f56:	e00f      	b.n	8005f78 <disk_read+0x5c>

	case DEV_MMC :

		if(extflash_sector_read(sector, count, buff) < 0)
 8005f58:	68ba      	ldr	r2, [r7, #8]
 8005f5a:	6839      	ldr	r1, [r7, #0]
 8005f5c:	6878      	ldr	r0, [r7, #4]
 8005f5e:	f7fb ffa9 	bl	8001eb4 <extflash_sector_read>
 8005f62:	4603      	mov	r3, r0
 8005f64:	2b00      	cmp	r3, #0
 8005f66:	da02      	bge.n	8005f6e <disk_read+0x52>
		{
			res = RES_ERROR;
 8005f68:	2301      	movs	r3, #1
 8005f6a:	75fb      	strb	r3, [r7, #23]
 8005f6c:	e001      	b.n	8005f72 <disk_read+0x56>
		}else{

			res = 0;
 8005f6e:	2300      	movs	r3, #0
 8005f70:	75fb      	strb	r3, [r7, #23]
		}

		return res;
 8005f72:	7dfb      	ldrb	r3, [r7, #23]
 8005f74:	e000      	b.n	8005f78 <disk_read+0x5c>

	}

	return RES_PARERR;
 8005f76:	2304      	movs	r3, #4
}
 8005f78:	4618      	mov	r0, r3
 8005f7a:	3718      	adds	r7, #24
 8005f7c:	46bd      	mov	sp, r7
 8005f7e:	bd80      	pop	{r7, pc}

08005f80 <disk_write>:
	BYTE pdrv,			/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	LBA_t sector,		/* Start sector in LBA */
	UINT count			/* Number of sectors to write */
)
{
 8005f80:	b580      	push	{r7, lr}
 8005f82:	b086      	sub	sp, #24
 8005f84:	af00      	add	r7, sp, #0
 8005f86:	60b9      	str	r1, [r7, #8]
 8005f88:	607a      	str	r2, [r7, #4]
 8005f8a:	603b      	str	r3, [r7, #0]
 8005f8c:	4603      	mov	r3, r0
 8005f8e:	73fb      	strb	r3, [r7, #15]
	DRESULT res = RES_ERROR;
 8005f90:	2301      	movs	r3, #1
 8005f92:	75fb      	strb	r3, [r7, #23]

	switch (pdrv) {
 8005f94:	7bfb      	ldrb	r3, [r7, #15]
 8005f96:	2b00      	cmp	r3, #0
 8005f98:	d002      	beq.n	8005fa0 <disk_write+0x20>
 8005f9a:	2b01      	cmp	r3, #1
 8005f9c:	d010      	beq.n	8005fc0 <disk_write+0x40>
 8005f9e:	e01e      	b.n	8005fde <disk_write+0x5e>
	case DEV_RAM :

		if(psram_sector_read_write(1, sector, count, (const uint8_t *)buff) < 0)
 8005fa0:	68bb      	ldr	r3, [r7, #8]
 8005fa2:	683a      	ldr	r2, [r7, #0]
 8005fa4:	6879      	ldr	r1, [r7, #4]
 8005fa6:	2001      	movs	r0, #1
 8005fa8:	f7ff f916 	bl	80051d8 <psram_sector_read_write>
 8005fac:	4603      	mov	r3, r0
 8005fae:	2b00      	cmp	r3, #0
 8005fb0:	da02      	bge.n	8005fb8 <disk_write+0x38>
		{
			res = RES_ERROR;
 8005fb2:	2301      	movs	r3, #1
 8005fb4:	75fb      	strb	r3, [r7, #23]
 8005fb6:	e001      	b.n	8005fbc <disk_write+0x3c>
		}else{

			res = 0;
 8005fb8:	2300      	movs	r3, #0
 8005fba:	75fb      	strb	r3, [r7, #23]
		}

		return res;
 8005fbc:	7dfb      	ldrb	r3, [r7, #23]
 8005fbe:	e00f      	b.n	8005fe0 <disk_write+0x60>

	case DEV_MMC :

		if(extflash_sector_write(sector, count, buff) < 0)
 8005fc0:	68ba      	ldr	r2, [r7, #8]
 8005fc2:	6839      	ldr	r1, [r7, #0]
 8005fc4:	6878      	ldr	r0, [r7, #4]
 8005fc6:	f7fc f80a 	bl	8001fde <extflash_sector_write>
 8005fca:	4603      	mov	r3, r0
 8005fcc:	2b00      	cmp	r3, #0
 8005fce:	da02      	bge.n	8005fd6 <disk_write+0x56>
		{
			res = RES_ERROR;
 8005fd0:	2301      	movs	r3, #1
 8005fd2:	75fb      	strb	r3, [r7, #23]
 8005fd4:	e001      	b.n	8005fda <disk_write+0x5a>
		}else{

			res = 0;
 8005fd6:	2300      	movs	r3, #0
 8005fd8:	75fb      	strb	r3, [r7, #23]
		}

		return res;
 8005fda:	7dfb      	ldrb	r3, [r7, #23]
 8005fdc:	e000      	b.n	8005fe0 <disk_write+0x60>

	}

	return RES_PARERR;
 8005fde:	2304      	movs	r3, #4
}
 8005fe0:	4618      	mov	r0, r3
 8005fe2:	3718      	adds	r7, #24
 8005fe4:	46bd      	mov	sp, r7
 8005fe6:	bd80      	pop	{r7, pc}

08005fe8 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 8005fe8:	b580      	push	{r7, lr}
 8005fea:	b084      	sub	sp, #16
 8005fec:	af00      	add	r7, sp, #0
 8005fee:	4603      	mov	r3, r0
 8005ff0:	603a      	str	r2, [r7, #0]
 8005ff2:	71fb      	strb	r3, [r7, #7]
 8005ff4:	460b      	mov	r3, r1
 8005ff6:	71bb      	strb	r3, [r7, #6]
	DRESULT res = RES_PARERR;
 8005ff8:	2304      	movs	r3, #4
 8005ffa:	73fb      	strb	r3, [r7, #15]

	switch (pdrv) {
 8005ffc:	79fb      	ldrb	r3, [r7, #7]
 8005ffe:	2b00      	cmp	r3, #0
 8006000:	d002      	beq.n	8006008 <disk_ioctl+0x20>
 8006002:	2b01      	cmp	r3, #1
 8006004:	d036      	beq.n	8006074 <disk_ioctl+0x8c>
 8006006:	e06b      	b.n	80060e0 <disk_ioctl+0xf8>
	case DEV_RAM :

		if(!psram_is_initialized())return RES_NOTRDY;
 8006008:	f7ff f9e0 	bl	80053cc <psram_is_initialized>
 800600c:	4603      	mov	r3, r0
 800600e:	2b00      	cmp	r3, #0
 8006010:	d101      	bne.n	8006016 <disk_ioctl+0x2e>
 8006012:	2303      	movs	r3, #3
 8006014:	e065      	b.n	80060e2 <disk_ioctl+0xfa>

		switch(cmd)
 8006016:	79bb      	ldrb	r3, [r7, #6]
 8006018:	2b04      	cmp	r3, #4
 800601a:	d826      	bhi.n	800606a <disk_ioctl+0x82>
 800601c:	a201      	add	r2, pc, #4	@ (adr r2, 8006024 <disk_ioctl+0x3c>)
 800601e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006022:	bf00      	nop
 8006024:	08006065 	.word	0x08006065
 8006028:	08006039 	.word	0x08006039
 800602c:	08006049 	.word	0x08006049
 8006030:	08006059 	.word	0x08006059
 8006034:	08006065 	.word	0x08006065
		{
			case GET_SECTOR_COUNT:

				*((uint32_t *)buff) = psram_get_sector_count();
 8006038:	f7ff f9de 	bl	80053f8 <psram_get_sector_count>
 800603c:	4602      	mov	r2, r0
 800603e:	683b      	ldr	r3, [r7, #0]
 8006040:	601a      	str	r2, [r3, #0]
				res = 0;
 8006042:	2300      	movs	r3, #0
 8006044:	73fb      	strb	r3, [r7, #15]
				break;
 8006046:	e013      	b.n	8006070 <disk_ioctl+0x88>

			case GET_SECTOR_SIZE:

				*((uint32_t *)buff) = psram_get_sector_size();
 8006048:	f7ff f9cc 	bl	80053e4 <psram_get_sector_size>
 800604c:	4602      	mov	r2, r0
 800604e:	683b      	ldr	r3, [r7, #0]
 8006050:	601a      	str	r2, [r3, #0]
				res = 0;
 8006052:	2300      	movs	r3, #0
 8006054:	73fb      	strb	r3, [r7, #15]
				break;
 8006056:	e00b      	b.n	8006070 <disk_ioctl+0x88>

			case GET_BLOCK_SIZE:

				*((uint32_t *)buff) = 1; //Default
 8006058:	683b      	ldr	r3, [r7, #0]
 800605a:	2201      	movs	r2, #1
 800605c:	601a      	str	r2, [r3, #0]
				res = 0;
 800605e:	2300      	movs	r3, #0
 8006060:	73fb      	strb	r3, [r7, #15]
				break;
 8006062:	e005      	b.n	8006070 <disk_ioctl+0x88>

			case CTRL_TRIM:
			case CTRL_SYNC:

				res = 0;
 8006064:	2300      	movs	r3, #0
 8006066:	73fb      	strb	r3, [r7, #15]
				break;
 8006068:	e002      	b.n	8006070 <disk_ioctl+0x88>

			default:
				res = RES_PARERR;
 800606a:	2304      	movs	r3, #4
 800606c:	73fb      	strb	r3, [r7, #15]
				break;
 800606e:	bf00      	nop
		}

		return res;
 8006070:	7bfb      	ldrb	r3, [r7, #15]
 8006072:	e036      	b.n	80060e2 <disk_ioctl+0xfa>

	case DEV_MMC :

		if(!extflash_is_initialized())return RES_NOTRDY;
 8006074:	f7fc f83a 	bl	80020ec <extflash_is_initialized>
 8006078:	4603      	mov	r3, r0
 800607a:	2b00      	cmp	r3, #0
 800607c:	d101      	bne.n	8006082 <disk_ioctl+0x9a>
 800607e:	2303      	movs	r3, #3
 8006080:	e02f      	b.n	80060e2 <disk_ioctl+0xfa>

		switch(cmd)
 8006082:	79bb      	ldrb	r3, [r7, #6]
 8006084:	2b04      	cmp	r3, #4
 8006086:	d826      	bhi.n	80060d6 <disk_ioctl+0xee>
 8006088:	a201      	add	r2, pc, #4	@ (adr r2, 8006090 <disk_ioctl+0xa8>)
 800608a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800608e:	bf00      	nop
 8006090:	080060d1 	.word	0x080060d1
 8006094:	080060a5 	.word	0x080060a5
 8006098:	080060b5 	.word	0x080060b5
 800609c:	080060c5 	.word	0x080060c5
 80060a0:	080060d1 	.word	0x080060d1
		{
			case GET_SECTOR_COUNT:

				*((uint32_t *)buff) = extflash_get_sector_count();
 80060a4:	f7fc f816 	bl	80020d4 <extflash_get_sector_count>
 80060a8:	4602      	mov	r2, r0
 80060aa:	683b      	ldr	r3, [r7, #0]
 80060ac:	601a      	str	r2, [r3, #0]
				res = 0;
 80060ae:	2300      	movs	r3, #0
 80060b0:	73fb      	strb	r3, [r7, #15]
				break;
 80060b2:	e013      	b.n	80060dc <disk_ioctl+0xf4>

			case GET_SECTOR_SIZE:

				*((uint32_t *)buff) = extflash_get_sector_size();
 80060b4:	f7fc f805 	bl	80020c2 <extflash_get_sector_size>
 80060b8:	4602      	mov	r2, r0
 80060ba:	683b      	ldr	r3, [r7, #0]
 80060bc:	601a      	str	r2, [r3, #0]
				res = 0;
 80060be:	2300      	movs	r3, #0
 80060c0:	73fb      	strb	r3, [r7, #15]
				break;
 80060c2:	e00b      	b.n	80060dc <disk_ioctl+0xf4>

			case GET_BLOCK_SIZE:

				*((uint32_t *)buff) = 1; //Default
 80060c4:	683b      	ldr	r3, [r7, #0]
 80060c6:	2201      	movs	r2, #1
 80060c8:	601a      	str	r2, [r3, #0]
				res = 0;
 80060ca:	2300      	movs	r3, #0
 80060cc:	73fb      	strb	r3, [r7, #15]
				break;
 80060ce:	e005      	b.n	80060dc <disk_ioctl+0xf4>

			case CTRL_TRIM:
			case CTRL_SYNC:

				res = 0;
 80060d0:	2300      	movs	r3, #0
 80060d2:	73fb      	strb	r3, [r7, #15]
				break;
 80060d4:	e002      	b.n	80060dc <disk_ioctl+0xf4>

			default:
				res = RES_PARERR;
 80060d6:	2304      	movs	r3, #4
 80060d8:	73fb      	strb	r3, [r7, #15]
				break;
 80060da:	bf00      	nop
		}

		return res;
 80060dc:	7bfb      	ldrb	r3, [r7, #15]
 80060de:	e000      	b.n	80060e2 <disk_ioctl+0xfa>

	}

	return RES_PARERR;
 80060e0:	2304      	movs	r3, #4
}
 80060e2:	4618      	mov	r0, r3
 80060e4:	3710      	adds	r7, #16
 80060e6:	46bd      	mov	sp, r7
 80060e8:	bd80      	pop	{r7, pc}
 80060ea:	bf00      	nop

080060ec <ld_word>:
/*-----------------------------------------------------------------------*/
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 80060ec:	b480      	push	{r7}
 80060ee:	b085      	sub	sp, #20
 80060f0:	af00      	add	r7, sp, #0
 80060f2:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	3301      	adds	r3, #1
 80060f8:	781b      	ldrb	r3, [r3, #0]
 80060fa:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 80060fc:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8006100:	021b      	lsls	r3, r3, #8
 8006102:	b21a      	sxth	r2, r3
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	781b      	ldrb	r3, [r3, #0]
 8006108:	b21b      	sxth	r3, r3
 800610a:	4313      	orrs	r3, r2
 800610c:	b21b      	sxth	r3, r3
 800610e:	81fb      	strh	r3, [r7, #14]
	return rv;
 8006110:	89fb      	ldrh	r3, [r7, #14]
}
 8006112:	4618      	mov	r0, r3
 8006114:	3714      	adds	r7, #20
 8006116:	46bd      	mov	sp, r7
 8006118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800611c:	4770      	bx	lr

0800611e <ld_dword>:

static DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 800611e:	b480      	push	{r7}
 8006120:	b085      	sub	sp, #20
 8006122:	af00      	add	r7, sp, #0
 8006124:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	3303      	adds	r3, #3
 800612a:	781b      	ldrb	r3, [r3, #0]
 800612c:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 800612e:	68fb      	ldr	r3, [r7, #12]
 8006130:	021b      	lsls	r3, r3, #8
 8006132:	687a      	ldr	r2, [r7, #4]
 8006134:	3202      	adds	r2, #2
 8006136:	7812      	ldrb	r2, [r2, #0]
 8006138:	4313      	orrs	r3, r2
 800613a:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 800613c:	68fb      	ldr	r3, [r7, #12]
 800613e:	021b      	lsls	r3, r3, #8
 8006140:	687a      	ldr	r2, [r7, #4]
 8006142:	3201      	adds	r2, #1
 8006144:	7812      	ldrb	r2, [r2, #0]
 8006146:	4313      	orrs	r3, r2
 8006148:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 800614a:	68fb      	ldr	r3, [r7, #12]
 800614c:	021b      	lsls	r3, r3, #8
 800614e:	687a      	ldr	r2, [r7, #4]
 8006150:	7812      	ldrb	r2, [r2, #0]
 8006152:	4313      	orrs	r3, r2
 8006154:	60fb      	str	r3, [r7, #12]
	return rv;
 8006156:	68fb      	ldr	r3, [r7, #12]
}
 8006158:	4618      	mov	r0, r3
 800615a:	3714      	adds	r7, #20
 800615c:	46bd      	mov	sp, r7
 800615e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006162:	4770      	bx	lr

08006164 <st_word>:
}
#endif

#if !FF_FS_READONLY
static void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 8006164:	b480      	push	{r7}
 8006166:	b083      	sub	sp, #12
 8006168:	af00      	add	r7, sp, #0
 800616a:	6078      	str	r0, [r7, #4]
 800616c:	460b      	mov	r3, r1
 800616e:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	1c5a      	adds	r2, r3, #1
 8006174:	607a      	str	r2, [r7, #4]
 8006176:	887a      	ldrh	r2, [r7, #2]
 8006178:	b2d2      	uxtb	r2, r2
 800617a:	701a      	strb	r2, [r3, #0]
 800617c:	887b      	ldrh	r3, [r7, #2]
 800617e:	0a1b      	lsrs	r3, r3, #8
 8006180:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	1c5a      	adds	r2, r3, #1
 8006186:	607a      	str	r2, [r7, #4]
 8006188:	887a      	ldrh	r2, [r7, #2]
 800618a:	b2d2      	uxtb	r2, r2
 800618c:	701a      	strb	r2, [r3, #0]
}
 800618e:	bf00      	nop
 8006190:	370c      	adds	r7, #12
 8006192:	46bd      	mov	sp, r7
 8006194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006198:	4770      	bx	lr

0800619a <st_dword>:

static void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 800619a:	b480      	push	{r7}
 800619c:	b083      	sub	sp, #12
 800619e:	af00      	add	r7, sp, #0
 80061a0:	6078      	str	r0, [r7, #4]
 80061a2:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	1c5a      	adds	r2, r3, #1
 80061a8:	607a      	str	r2, [r7, #4]
 80061aa:	683a      	ldr	r2, [r7, #0]
 80061ac:	b2d2      	uxtb	r2, r2
 80061ae:	701a      	strb	r2, [r3, #0]
 80061b0:	683b      	ldr	r3, [r7, #0]
 80061b2:	0a1b      	lsrs	r3, r3, #8
 80061b4:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	1c5a      	adds	r2, r3, #1
 80061ba:	607a      	str	r2, [r7, #4]
 80061bc:	683a      	ldr	r2, [r7, #0]
 80061be:	b2d2      	uxtb	r2, r2
 80061c0:	701a      	strb	r2, [r3, #0]
 80061c2:	683b      	ldr	r3, [r7, #0]
 80061c4:	0a1b      	lsrs	r3, r3, #8
 80061c6:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	1c5a      	adds	r2, r3, #1
 80061cc:	607a      	str	r2, [r7, #4]
 80061ce:	683a      	ldr	r2, [r7, #0]
 80061d0:	b2d2      	uxtb	r2, r2
 80061d2:	701a      	strb	r2, [r3, #0]
 80061d4:	683b      	ldr	r3, [r7, #0]
 80061d6:	0a1b      	lsrs	r3, r3, #8
 80061d8:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	1c5a      	adds	r2, r3, #1
 80061de:	607a      	str	r2, [r7, #4]
 80061e0:	683a      	ldr	r2, [r7, #0]
 80061e2:	b2d2      	uxtb	r2, r2
 80061e4:	701a      	strb	r2, [r3, #0]
}
 80061e6:	bf00      	nop
 80061e8:	370c      	adds	r7, #12
 80061ea:	46bd      	mov	sp, r7
 80061ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061f0:	4770      	bx	lr

080061f2 <dbc_1st>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Test if the byte is DBC 1st byte */
static int dbc_1st (BYTE c)
{
 80061f2:	b480      	push	{r7}
 80061f4:	b083      	sub	sp, #12
 80061f6:	af00      	add	r7, sp, #0
 80061f8:	4603      	mov	r3, r0
 80061fa:	71fb      	strb	r3, [r7, #7]
	if (c >= DbcTbl[0]) {
		if (c <= DbcTbl[1]) return 1;
		if (c >= DbcTbl[2] && c <= DbcTbl[3]) return 1;
	}
#else						/* SBCS fixed code page */
	if (c != 0) return 0;	/* Always false */
 80061fc:	79fb      	ldrb	r3, [r7, #7]
 80061fe:	2b00      	cmp	r3, #0
 8006200:	d001      	beq.n	8006206 <dbc_1st+0x14>
 8006202:	2300      	movs	r3, #0
 8006204:	e000      	b.n	8006208 <dbc_1st+0x16>
#endif
	return 0;
 8006206:	2300      	movs	r3, #0
}
 8006208:	4618      	mov	r0, r3
 800620a:	370c      	adds	r7, #12
 800620c:	46bd      	mov	sp, r7
 800620e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006212:	4770      	bx	lr

08006214 <dbc_2nd>:


/* Test if the byte is DBC 2nd byte */
static int dbc_2nd (BYTE c)
{
 8006214:	b480      	push	{r7}
 8006216:	b083      	sub	sp, #12
 8006218:	af00      	add	r7, sp, #0
 800621a:	4603      	mov	r3, r0
 800621c:	71fb      	strb	r3, [r7, #7]
		if (c <= DbcTbl[5]) return 1;
		if (c >= DbcTbl[6] && c <= DbcTbl[7]) return 1;
		if (c >= DbcTbl[8] && c <= DbcTbl[9]) return 1;
	}
#else						/* SBCS fixed code page */
	if (c != 0) return 0;	/* Always false */
 800621e:	79fb      	ldrb	r3, [r7, #7]
 8006220:	2b00      	cmp	r3, #0
 8006222:	d001      	beq.n	8006228 <dbc_2nd+0x14>
 8006224:	2300      	movs	r3, #0
 8006226:	e000      	b.n	800622a <dbc_2nd+0x16>
#endif
	return 0;
 8006228:	2300      	movs	r3, #0
}
 800622a:	4618      	mov	r0, r3
 800622c:	370c      	adds	r7, #12
 800622e:	46bd      	mov	sp, r7
 8006230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006234:	4770      	bx	lr

08006236 <sync_window>:
/*-----------------------------------------------------------------------*/
#if !FF_FS_READONLY
static FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERR */
	FATFS* fs			/* Filesystem object */
)
{
 8006236:	b580      	push	{r7, lr}
 8006238:	b084      	sub	sp, #16
 800623a:	af00      	add	r7, sp, #0
 800623c:	6078      	str	r0, [r7, #4]
	FRESULT res = FR_OK;
 800623e:	2300      	movs	r3, #0
 8006240:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Is the disk access window dirty? */
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	791b      	ldrb	r3, [r3, #4]
 8006246:	2b00      	cmp	r3, #0
 8006248:	d02c      	beq.n	80062a4 <sync_window+0x6e>
		if (disk_write(fs->pdrv, fs->win, fs->winsect, 1) == RES_OK) {	/* Write it back into the volume */
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	7858      	ldrb	r0, [r3, #1]
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006258:	2301      	movs	r3, #1
 800625a:	f7ff fe91 	bl	8005f80 <disk_write>
 800625e:	4603      	mov	r3, r0
 8006260:	2b00      	cmp	r3, #0
 8006262:	d11d      	bne.n	80062a0 <sync_window+0x6a>
			fs->wflag = 0;	/* Clear window dirty flag */
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	2200      	movs	r2, #0
 8006268:	711a      	strb	r2, [r3, #4]
			if (fs->winsect - fs->fatbase < fs->fsize) {	/* Is it in the 1st FAT? */
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006272:	1ad2      	subs	r2, r2, r3
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	69db      	ldr	r3, [r3, #28]
 8006278:	429a      	cmp	r2, r3
 800627a:	d213      	bcs.n	80062a4 <sync_window+0x6e>
				if (fs->n_fats == 2) disk_write(fs->pdrv, fs->win, fs->winsect + fs->fsize, 1);	/* Reflect it to 2nd FAT if needed */
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	78db      	ldrb	r3, [r3, #3]
 8006280:	2b02      	cmp	r3, #2
 8006282:	d10f      	bne.n	80062a4 <sync_window+0x6e>
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	7858      	ldrb	r0, [r3, #1]
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	69db      	ldr	r3, [r3, #28]
 8006296:	441a      	add	r2, r3
 8006298:	2301      	movs	r3, #1
 800629a:	f7ff fe71 	bl	8005f80 <disk_write>
 800629e:	e001      	b.n	80062a4 <sync_window+0x6e>
			}
		} else {
			res = FR_DISK_ERR;
 80062a0:	2301      	movs	r3, #1
 80062a2:	73fb      	strb	r3, [r7, #15]
		}
	}
	return res;
 80062a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80062a6:	4618      	mov	r0, r3
 80062a8:	3710      	adds	r7, #16
 80062aa:	46bd      	mov	sp, r7
 80062ac:	bd80      	pop	{r7, pc}

080062ae <move_window>:

static FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERR */
	FATFS* fs,		/* Filesystem object */
	LBA_t sect		/* Sector LBA to make appearance in the fs->win[] */
)
{
 80062ae:	b580      	push	{r7, lr}
 80062b0:	b084      	sub	sp, #16
 80062b2:	af00      	add	r7, sp, #0
 80062b4:	6078      	str	r0, [r7, #4]
 80062b6:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 80062b8:	2300      	movs	r3, #0
 80062ba:	73fb      	strb	r3, [r7, #15]


	if (sect != fs->winsect) {	/* Window offset changed? */
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80062c0:	683a      	ldr	r2, [r7, #0]
 80062c2:	429a      	cmp	r2, r3
 80062c4:	d01b      	beq.n	80062fe <move_window+0x50>
#if !FF_FS_READONLY
		res = sync_window(fs);		/* Flush the window */
 80062c6:	6878      	ldr	r0, [r7, #4]
 80062c8:	f7ff ffb5 	bl	8006236 <sync_window>
 80062cc:	4603      	mov	r3, r0
 80062ce:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 80062d0:	7bfb      	ldrb	r3, [r7, #15]
 80062d2:	2b00      	cmp	r3, #0
 80062d4:	d113      	bne.n	80062fe <move_window+0x50>
			if (disk_read(fs->pdrv, fs->win, sect, 1) != RES_OK) {
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	7858      	ldrb	r0, [r3, #1]
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 80062e0:	2301      	movs	r3, #1
 80062e2:	683a      	ldr	r2, [r7, #0]
 80062e4:	f7ff fe1a 	bl	8005f1c <disk_read>
 80062e8:	4603      	mov	r3, r0
 80062ea:	2b00      	cmp	r3, #0
 80062ec:	d004      	beq.n	80062f8 <move_window+0x4a>
				sect = (LBA_t)0 - 1;	/* Invalidate window if read data is not valid */
 80062ee:	f04f 33ff 	mov.w	r3, #4294967295
 80062f2:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 80062f4:	2301      	movs	r3, #1
 80062f6:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sect;
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	683a      	ldr	r2, [r7, #0]
 80062fc:	631a      	str	r2, [r3, #48]	@ 0x30
		}
	}
	return res;
 80062fe:	7bfb      	ldrb	r3, [r7, #15]
}
 8006300:	4618      	mov	r0, r3
 8006302:	3710      	adds	r7, #16
 8006304:	46bd      	mov	sp, r7
 8006306:	bd80      	pop	{r7, pc}

08006308 <sync_fs>:
/*-----------------------------------------------------------------------*/

static FRESULT sync_fs (	/* Returns FR_OK or FR_DISK_ERR */
	FATFS* fs		/* Filesystem object */
)
{
 8006308:	b580      	push	{r7, lr}
 800630a:	b084      	sub	sp, #16
 800630c:	af00      	add	r7, sp, #0
 800630e:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 8006310:	6878      	ldr	r0, [r7, #4]
 8006312:	f7ff ff90 	bl	8006236 <sync_window>
 8006316:	4603      	mov	r3, r0
 8006318:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800631a:	7bfb      	ldrb	r3, [r7, #15]
 800631c:	2b00      	cmp	r3, #0
 800631e:	d158      	bne.n	80063d2 <sync_fs+0xca>
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {	/* FAT32: Update FSInfo sector if needed */
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	781b      	ldrb	r3, [r3, #0]
 8006324:	2b03      	cmp	r3, #3
 8006326:	d148      	bne.n	80063ba <sync_fs+0xb2>
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	795b      	ldrb	r3, [r3, #5]
 800632c:	2b01      	cmp	r3, #1
 800632e:	d144      	bne.n	80063ba <sync_fs+0xb2>
			/* Create FSInfo structure */
			memset(fs->win, 0, sizeof fs->win);
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	3334      	adds	r3, #52	@ 0x34
 8006334:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8006338:	2100      	movs	r1, #0
 800633a:	4618      	mov	r0, r3
 800633c:	f00c fd60 	bl	8012e00 <memset>
			st_word(fs->win + BS_55AA, 0xAA55);					/* Boot signature */
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	3334      	adds	r3, #52	@ 0x34
 8006344:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 8006348:	f64a 2155 	movw	r1, #43605	@ 0xaa55
 800634c:	4618      	mov	r0, r3
 800634e:	f7ff ff09 	bl	8006164 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);		/* Leading signature */
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	3334      	adds	r3, #52	@ 0x34
 8006356:	4921      	ldr	r1, [pc, #132]	@ (80063dc <sync_fs+0xd4>)
 8006358:	4618      	mov	r0, r3
 800635a:	f7ff ff1e 	bl	800619a <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);		/* Structure signature */
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	3334      	adds	r3, #52	@ 0x34
 8006362:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 8006366:	491e      	ldr	r1, [pc, #120]	@ (80063e0 <sync_fs+0xd8>)
 8006368:	4618      	mov	r0, r3
 800636a:	f7ff ff16 	bl	800619a <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);	/* Number of free clusters */
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	3334      	adds	r3, #52	@ 0x34
 8006372:	f503 72f4 	add.w	r2, r3, #488	@ 0x1e8
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	695b      	ldr	r3, [r3, #20]
 800637a:	4619      	mov	r1, r3
 800637c:	4610      	mov	r0, r2
 800637e:	f7ff ff0c 	bl	800619a <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);	/* Last allocated culuster */
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	3334      	adds	r3, #52	@ 0x34
 8006386:	f503 72f6 	add.w	r2, r3, #492	@ 0x1ec
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	691b      	ldr	r3, [r3, #16]
 800638e:	4619      	mov	r1, r3
 8006390:	4610      	mov	r0, r2
 8006392:	f7ff ff02 	bl	800619a <st_dword>
			fs->winsect = fs->volbase + 1;						/* Write it into the FSInfo sector (Next to VBR) */
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	6a1b      	ldr	r3, [r3, #32]
 800639a:	1c5a      	adds	r2, r3, #1
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	631a      	str	r2, [r3, #48]	@ 0x30
			disk_write(fs->pdrv, fs->win, fs->winsect, 1);
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	7858      	ldrb	r0, [r3, #1]
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80063ae:	2301      	movs	r3, #1
 80063b0:	f7ff fde6 	bl	8005f80 <disk_write>
			fs->fsi_flag = 0;
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	2200      	movs	r2, #0
 80063b8:	715a      	strb	r2, [r3, #5]
		}
		/* Make sure that no pending write process in the lower layer */
		if (disk_ioctl(fs->pdrv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	785b      	ldrb	r3, [r3, #1]
 80063be:	2200      	movs	r2, #0
 80063c0:	2100      	movs	r1, #0
 80063c2:	4618      	mov	r0, r3
 80063c4:	f7ff fe10 	bl	8005fe8 <disk_ioctl>
 80063c8:	4603      	mov	r3, r0
 80063ca:	2b00      	cmp	r3, #0
 80063cc:	d001      	beq.n	80063d2 <sync_fs+0xca>
 80063ce:	2301      	movs	r3, #1
 80063d0:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 80063d2:	7bfb      	ldrb	r3, [r7, #15]
}
 80063d4:	4618      	mov	r0, r3
 80063d6:	3710      	adds	r7, #16
 80063d8:	46bd      	mov	sp, r7
 80063da:	bd80      	pop	{r7, pc}
 80063dc:	41615252 	.word	0x41615252
 80063e0:	61417272 	.word	0x61417272

080063e4 <clst2sect>:

static LBA_t clst2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* Filesystem object */
	DWORD clst		/* Cluster# to be converted */
)
{
 80063e4:	b480      	push	{r7}
 80063e6:	b083      	sub	sp, #12
 80063e8:	af00      	add	r7, sp, #0
 80063ea:	6078      	str	r0, [r7, #4]
 80063ec:	6039      	str	r1, [r7, #0]
	clst -= 2;		/* Cluster number is origin from 2 */
 80063ee:	683b      	ldr	r3, [r7, #0]
 80063f0:	3b02      	subs	r3, #2
 80063f2:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Is it invalid cluster number? */
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	699b      	ldr	r3, [r3, #24]
 80063f8:	3b02      	subs	r3, #2
 80063fa:	683a      	ldr	r2, [r7, #0]
 80063fc:	429a      	cmp	r2, r3
 80063fe:	d301      	bcc.n	8006404 <clst2sect+0x20>
 8006400:	2300      	movs	r3, #0
 8006402:	e008      	b.n	8006416 <clst2sect+0x32>
	return fs->database + (LBA_t)fs->csize * clst;	/* Start sector number of the cluster */
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	895b      	ldrh	r3, [r3, #10]
 800640c:	4619      	mov	r1, r3
 800640e:	683b      	ldr	r3, [r7, #0]
 8006410:	fb01 f303 	mul.w	r3, r1, r3
 8006414:	4413      	add	r3, r2
}
 8006416:	4618      	mov	r0, r3
 8006418:	370c      	adds	r7, #12
 800641a:	46bd      	mov	sp, r7
 800641c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006420:	4770      	bx	lr

08006422 <get_fat>:

static DWORD get_fat (		/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	FFOBJID* obj,	/* Corresponding object */
	DWORD clst		/* Cluster number to get the value */
)
{
 8006422:	b580      	push	{r7, lr}
 8006424:	b086      	sub	sp, #24
 8006426:	af00      	add	r7, sp, #0
 8006428:	6078      	str	r0, [r7, #4]
 800642a:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	681b      	ldr	r3, [r3, #0]
 8006430:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 8006432:	683b      	ldr	r3, [r7, #0]
 8006434:	2b01      	cmp	r3, #1
 8006436:	d904      	bls.n	8006442 <get_fat+0x20>
 8006438:	693b      	ldr	r3, [r7, #16]
 800643a:	699b      	ldr	r3, [r3, #24]
 800643c:	683a      	ldr	r2, [r7, #0]
 800643e:	429a      	cmp	r2, r3
 8006440:	d302      	bcc.n	8006448 <get_fat+0x26>
		val = 1;	/* Internal error */
 8006442:	2301      	movs	r3, #1
 8006444:	617b      	str	r3, [r7, #20]
 8006446:	e0ba      	b.n	80065be <get_fat+0x19c>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8006448:	f04f 33ff 	mov.w	r3, #4294967295
 800644c:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 800644e:	693b      	ldr	r3, [r7, #16]
 8006450:	781b      	ldrb	r3, [r3, #0]
 8006452:	2b03      	cmp	r3, #3
 8006454:	f000 8082 	beq.w	800655c <get_fat+0x13a>
 8006458:	2b03      	cmp	r3, #3
 800645a:	f300 80a6 	bgt.w	80065aa <get_fat+0x188>
 800645e:	2b01      	cmp	r3, #1
 8006460:	d002      	beq.n	8006468 <get_fat+0x46>
 8006462:	2b02      	cmp	r3, #2
 8006464:	d055      	beq.n	8006512 <get_fat+0xf0>
 8006466:	e0a0      	b.n	80065aa <get_fat+0x188>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8006468:	683b      	ldr	r3, [r7, #0]
 800646a:	60fb      	str	r3, [r7, #12]
 800646c:	68fb      	ldr	r3, [r7, #12]
 800646e:	085b      	lsrs	r3, r3, #1
 8006470:	68fa      	ldr	r2, [r7, #12]
 8006472:	4413      	add	r3, r2
 8006474:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8006476:	693b      	ldr	r3, [r7, #16]
 8006478:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800647a:	693b      	ldr	r3, [r7, #16]
 800647c:	899b      	ldrh	r3, [r3, #12]
 800647e:	4619      	mov	r1, r3
 8006480:	68fb      	ldr	r3, [r7, #12]
 8006482:	fbb3 f3f1 	udiv	r3, r3, r1
 8006486:	4413      	add	r3, r2
 8006488:	4619      	mov	r1, r3
 800648a:	6938      	ldr	r0, [r7, #16]
 800648c:	f7ff ff0f 	bl	80062ae <move_window>
 8006490:	4603      	mov	r3, r0
 8006492:	2b00      	cmp	r3, #0
 8006494:	f040 808c 	bne.w	80065b0 <get_fat+0x18e>
			wc = fs->win[bc++ % SS(fs)];		/* Get 1st byte of the entry */
 8006498:	68fb      	ldr	r3, [r7, #12]
 800649a:	1c5a      	adds	r2, r3, #1
 800649c:	60fa      	str	r2, [r7, #12]
 800649e:	693a      	ldr	r2, [r7, #16]
 80064a0:	8992      	ldrh	r2, [r2, #12]
 80064a2:	fbb3 f1f2 	udiv	r1, r3, r2
 80064a6:	fb01 f202 	mul.w	r2, r1, r2
 80064aa:	1a9b      	subs	r3, r3, r2
 80064ac:	693a      	ldr	r2, [r7, #16]
 80064ae:	4413      	add	r3, r2
 80064b0:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 80064b4:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80064b6:	693b      	ldr	r3, [r7, #16]
 80064b8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80064ba:	693b      	ldr	r3, [r7, #16]
 80064bc:	899b      	ldrh	r3, [r3, #12]
 80064be:	4619      	mov	r1, r3
 80064c0:	68fb      	ldr	r3, [r7, #12]
 80064c2:	fbb3 f3f1 	udiv	r3, r3, r1
 80064c6:	4413      	add	r3, r2
 80064c8:	4619      	mov	r1, r3
 80064ca:	6938      	ldr	r0, [r7, #16]
 80064cc:	f7ff feef 	bl	80062ae <move_window>
 80064d0:	4603      	mov	r3, r0
 80064d2:	2b00      	cmp	r3, #0
 80064d4:	d16e      	bne.n	80065b4 <get_fat+0x192>
			wc |= fs->win[bc % SS(fs)] << 8;	/* Merge 2nd byte of the entry */
 80064d6:	693b      	ldr	r3, [r7, #16]
 80064d8:	899b      	ldrh	r3, [r3, #12]
 80064da:	461a      	mov	r2, r3
 80064dc:	68fb      	ldr	r3, [r7, #12]
 80064de:	fbb3 f1f2 	udiv	r1, r3, r2
 80064e2:	fb01 f202 	mul.w	r2, r1, r2
 80064e6:	1a9b      	subs	r3, r3, r2
 80064e8:	693a      	ldr	r2, [r7, #16]
 80064ea:	4413      	add	r3, r2
 80064ec:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 80064f0:	021b      	lsls	r3, r3, #8
 80064f2:	68ba      	ldr	r2, [r7, #8]
 80064f4:	4313      	orrs	r3, r2
 80064f6:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);	/* Adjust bit position */
 80064f8:	683b      	ldr	r3, [r7, #0]
 80064fa:	f003 0301 	and.w	r3, r3, #1
 80064fe:	2b00      	cmp	r3, #0
 8006500:	d002      	beq.n	8006508 <get_fat+0xe6>
 8006502:	68bb      	ldr	r3, [r7, #8]
 8006504:	091b      	lsrs	r3, r3, #4
 8006506:	e002      	b.n	800650e <get_fat+0xec>
 8006508:	68bb      	ldr	r3, [r7, #8]
 800650a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800650e:	617b      	str	r3, [r7, #20]
			break;
 8006510:	e055      	b.n	80065be <get_fat+0x19c>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8006512:	693b      	ldr	r3, [r7, #16]
 8006514:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8006516:	693b      	ldr	r3, [r7, #16]
 8006518:	899b      	ldrh	r3, [r3, #12]
 800651a:	085b      	lsrs	r3, r3, #1
 800651c:	b29b      	uxth	r3, r3
 800651e:	4619      	mov	r1, r3
 8006520:	683b      	ldr	r3, [r7, #0]
 8006522:	fbb3 f3f1 	udiv	r3, r3, r1
 8006526:	4413      	add	r3, r2
 8006528:	4619      	mov	r1, r3
 800652a:	6938      	ldr	r0, [r7, #16]
 800652c:	f7ff febf 	bl	80062ae <move_window>
 8006530:	4603      	mov	r3, r0
 8006532:	2b00      	cmp	r3, #0
 8006534:	d140      	bne.n	80065b8 <get_fat+0x196>
			val = ld_word(fs->win + clst * 2 % SS(fs));		/* Simple WORD array */
 8006536:	693b      	ldr	r3, [r7, #16]
 8006538:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 800653c:	683b      	ldr	r3, [r7, #0]
 800653e:	005b      	lsls	r3, r3, #1
 8006540:	693a      	ldr	r2, [r7, #16]
 8006542:	8992      	ldrh	r2, [r2, #12]
 8006544:	fbb3 f0f2 	udiv	r0, r3, r2
 8006548:	fb00 f202 	mul.w	r2, r0, r2
 800654c:	1a9b      	subs	r3, r3, r2
 800654e:	440b      	add	r3, r1
 8006550:	4618      	mov	r0, r3
 8006552:	f7ff fdcb 	bl	80060ec <ld_word>
 8006556:	4603      	mov	r3, r0
 8006558:	617b      	str	r3, [r7, #20]
			break;
 800655a:	e030      	b.n	80065be <get_fat+0x19c>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800655c:	693b      	ldr	r3, [r7, #16]
 800655e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8006560:	693b      	ldr	r3, [r7, #16]
 8006562:	899b      	ldrh	r3, [r3, #12]
 8006564:	089b      	lsrs	r3, r3, #2
 8006566:	b29b      	uxth	r3, r3
 8006568:	4619      	mov	r1, r3
 800656a:	683b      	ldr	r3, [r7, #0]
 800656c:	fbb3 f3f1 	udiv	r3, r3, r1
 8006570:	4413      	add	r3, r2
 8006572:	4619      	mov	r1, r3
 8006574:	6938      	ldr	r0, [r7, #16]
 8006576:	f7ff fe9a 	bl	80062ae <move_window>
 800657a:	4603      	mov	r3, r0
 800657c:	2b00      	cmp	r3, #0
 800657e:	d11d      	bne.n	80065bc <get_fat+0x19a>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;	/* Simple DWORD array but mask out upper 4 bits */
 8006580:	693b      	ldr	r3, [r7, #16]
 8006582:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 8006586:	683b      	ldr	r3, [r7, #0]
 8006588:	009b      	lsls	r3, r3, #2
 800658a:	693a      	ldr	r2, [r7, #16]
 800658c:	8992      	ldrh	r2, [r2, #12]
 800658e:	fbb3 f0f2 	udiv	r0, r3, r2
 8006592:	fb00 f202 	mul.w	r2, r0, r2
 8006596:	1a9b      	subs	r3, r3, r2
 8006598:	440b      	add	r3, r1
 800659a:	4618      	mov	r0, r3
 800659c:	f7ff fdbf 	bl	800611e <ld_dword>
 80065a0:	4603      	mov	r3, r0
 80065a2:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 80065a6:	617b      	str	r3, [r7, #20]
			break;
 80065a8:	e009      	b.n	80065be <get_fat+0x19c>
			}
			val = 1;	/* Internal error */
			break;
#endif
		default:
			val = 1;	/* Internal error */
 80065aa:	2301      	movs	r3, #1
 80065ac:	617b      	str	r3, [r7, #20]
 80065ae:	e006      	b.n	80065be <get_fat+0x19c>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80065b0:	bf00      	nop
 80065b2:	e004      	b.n	80065be <get_fat+0x19c>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80065b4:	bf00      	nop
 80065b6:	e002      	b.n	80065be <get_fat+0x19c>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 80065b8:	bf00      	nop
 80065ba:	e000      	b.n	80065be <get_fat+0x19c>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 80065bc:	bf00      	nop
		}
	}

	return val;
 80065be:	697b      	ldr	r3, [r7, #20]
}
 80065c0:	4618      	mov	r0, r3
 80065c2:	3718      	adds	r7, #24
 80065c4:	46bd      	mov	sp, r7
 80065c6:	bd80      	pop	{r7, pc}

080065c8 <put_fat>:
static FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding filesystem object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 80065c8:	b590      	push	{r4, r7, lr}
 80065ca:	b089      	sub	sp, #36	@ 0x24
 80065cc:	af00      	add	r7, sp, #0
 80065ce:	60f8      	str	r0, [r7, #12]
 80065d0:	60b9      	str	r1, [r7, #8]
 80065d2:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 80065d4:	2302      	movs	r3, #2
 80065d6:	77fb      	strb	r3, [r7, #31]


	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 80065d8:	68bb      	ldr	r3, [r7, #8]
 80065da:	2b01      	cmp	r3, #1
 80065dc:	f240 8109 	bls.w	80067f2 <put_fat+0x22a>
 80065e0:	68fb      	ldr	r3, [r7, #12]
 80065e2:	699b      	ldr	r3, [r3, #24]
 80065e4:	68ba      	ldr	r2, [r7, #8]
 80065e6:	429a      	cmp	r2, r3
 80065e8:	f080 8103 	bcs.w	80067f2 <put_fat+0x22a>
		switch (fs->fs_type) {
 80065ec:	68fb      	ldr	r3, [r7, #12]
 80065ee:	781b      	ldrb	r3, [r3, #0]
 80065f0:	2b03      	cmp	r3, #3
 80065f2:	f000 80b6 	beq.w	8006762 <put_fat+0x19a>
 80065f6:	2b03      	cmp	r3, #3
 80065f8:	f300 80fb 	bgt.w	80067f2 <put_fat+0x22a>
 80065fc:	2b01      	cmp	r3, #1
 80065fe:	d003      	beq.n	8006608 <put_fat+0x40>
 8006600:	2b02      	cmp	r3, #2
 8006602:	f000 8083 	beq.w	800670c <put_fat+0x144>
 8006606:	e0f4      	b.n	80067f2 <put_fat+0x22a>
		case FS_FAT12:
			bc = (UINT)clst; bc += bc / 2;	/* bc: byte offset of the entry */
 8006608:	68bb      	ldr	r3, [r7, #8]
 800660a:	61bb      	str	r3, [r7, #24]
 800660c:	69bb      	ldr	r3, [r7, #24]
 800660e:	085b      	lsrs	r3, r3, #1
 8006610:	69ba      	ldr	r2, [r7, #24]
 8006612:	4413      	add	r3, r2
 8006614:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8006616:	68fb      	ldr	r3, [r7, #12]
 8006618:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800661a:	68fb      	ldr	r3, [r7, #12]
 800661c:	899b      	ldrh	r3, [r3, #12]
 800661e:	4619      	mov	r1, r3
 8006620:	69bb      	ldr	r3, [r7, #24]
 8006622:	fbb3 f3f1 	udiv	r3, r3, r1
 8006626:	4413      	add	r3, r2
 8006628:	4619      	mov	r1, r3
 800662a:	68f8      	ldr	r0, [r7, #12]
 800662c:	f7ff fe3f 	bl	80062ae <move_window>
 8006630:	4603      	mov	r3, r0
 8006632:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8006634:	7ffb      	ldrb	r3, [r7, #31]
 8006636:	2b00      	cmp	r3, #0
 8006638:	f040 80d4 	bne.w	80067e4 <put_fat+0x21c>
			p = fs->win + bc++ % SS(fs);
 800663c:	68fb      	ldr	r3, [r7, #12]
 800663e:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 8006642:	69bb      	ldr	r3, [r7, #24]
 8006644:	1c5a      	adds	r2, r3, #1
 8006646:	61ba      	str	r2, [r7, #24]
 8006648:	68fa      	ldr	r2, [r7, #12]
 800664a:	8992      	ldrh	r2, [r2, #12]
 800664c:	fbb3 f0f2 	udiv	r0, r3, r2
 8006650:	fb00 f202 	mul.w	r2, r0, r2
 8006654:	1a9b      	subs	r3, r3, r2
 8006656:	440b      	add	r3, r1
 8006658:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;	/* Update 1st byte */
 800665a:	68bb      	ldr	r3, [r7, #8]
 800665c:	f003 0301 	and.w	r3, r3, #1
 8006660:	2b00      	cmp	r3, #0
 8006662:	d00d      	beq.n	8006680 <put_fat+0xb8>
 8006664:	697b      	ldr	r3, [r7, #20]
 8006666:	781b      	ldrb	r3, [r3, #0]
 8006668:	b25b      	sxtb	r3, r3
 800666a:	f003 030f 	and.w	r3, r3, #15
 800666e:	b25a      	sxtb	r2, r3
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	b25b      	sxtb	r3, r3
 8006674:	011b      	lsls	r3, r3, #4
 8006676:	b25b      	sxtb	r3, r3
 8006678:	4313      	orrs	r3, r2
 800667a:	b25b      	sxtb	r3, r3
 800667c:	b2db      	uxtb	r3, r3
 800667e:	e001      	b.n	8006684 <put_fat+0xbc>
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	b2db      	uxtb	r3, r3
 8006684:	697a      	ldr	r2, [r7, #20]
 8006686:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8006688:	68fb      	ldr	r3, [r7, #12]
 800668a:	2201      	movs	r2, #1
 800668c:	711a      	strb	r2, [r3, #4]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800668e:	68fb      	ldr	r3, [r7, #12]
 8006690:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8006692:	68fb      	ldr	r3, [r7, #12]
 8006694:	899b      	ldrh	r3, [r3, #12]
 8006696:	4619      	mov	r1, r3
 8006698:	69bb      	ldr	r3, [r7, #24]
 800669a:	fbb3 f3f1 	udiv	r3, r3, r1
 800669e:	4413      	add	r3, r2
 80066a0:	4619      	mov	r1, r3
 80066a2:	68f8      	ldr	r0, [r7, #12]
 80066a4:	f7ff fe03 	bl	80062ae <move_window>
 80066a8:	4603      	mov	r3, r0
 80066aa:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80066ac:	7ffb      	ldrb	r3, [r7, #31]
 80066ae:	2b00      	cmp	r3, #0
 80066b0:	f040 809a 	bne.w	80067e8 <put_fat+0x220>
			p = fs->win + bc % SS(fs);
 80066b4:	68fb      	ldr	r3, [r7, #12]
 80066b6:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 80066ba:	68fb      	ldr	r3, [r7, #12]
 80066bc:	899b      	ldrh	r3, [r3, #12]
 80066be:	461a      	mov	r2, r3
 80066c0:	69bb      	ldr	r3, [r7, #24]
 80066c2:	fbb3 f0f2 	udiv	r0, r3, r2
 80066c6:	fb00 f202 	mul.w	r2, r0, r2
 80066ca:	1a9b      	subs	r3, r3, r2
 80066cc:	440b      	add	r3, r1
 80066ce:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));	/* Update 2nd byte */
 80066d0:	68bb      	ldr	r3, [r7, #8]
 80066d2:	f003 0301 	and.w	r3, r3, #1
 80066d6:	2b00      	cmp	r3, #0
 80066d8:	d003      	beq.n	80066e2 <put_fat+0x11a>
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	091b      	lsrs	r3, r3, #4
 80066de:	b2db      	uxtb	r3, r3
 80066e0:	e00e      	b.n	8006700 <put_fat+0x138>
 80066e2:	697b      	ldr	r3, [r7, #20]
 80066e4:	781b      	ldrb	r3, [r3, #0]
 80066e6:	b25b      	sxtb	r3, r3
 80066e8:	f023 030f 	bic.w	r3, r3, #15
 80066ec:	b25a      	sxtb	r2, r3
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	0a1b      	lsrs	r3, r3, #8
 80066f2:	b25b      	sxtb	r3, r3
 80066f4:	f003 030f 	and.w	r3, r3, #15
 80066f8:	b25b      	sxtb	r3, r3
 80066fa:	4313      	orrs	r3, r2
 80066fc:	b25b      	sxtb	r3, r3
 80066fe:	b2db      	uxtb	r3, r3
 8006700:	697a      	ldr	r2, [r7, #20]
 8006702:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8006704:	68fb      	ldr	r3, [r7, #12]
 8006706:	2201      	movs	r2, #1
 8006708:	711a      	strb	r2, [r3, #4]
			break;
 800670a:	e072      	b.n	80067f2 <put_fat+0x22a>

		case FS_FAT16:
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 800670c:	68fb      	ldr	r3, [r7, #12]
 800670e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8006710:	68fb      	ldr	r3, [r7, #12]
 8006712:	899b      	ldrh	r3, [r3, #12]
 8006714:	085b      	lsrs	r3, r3, #1
 8006716:	b29b      	uxth	r3, r3
 8006718:	4619      	mov	r1, r3
 800671a:	68bb      	ldr	r3, [r7, #8]
 800671c:	fbb3 f3f1 	udiv	r3, r3, r1
 8006720:	4413      	add	r3, r2
 8006722:	4619      	mov	r1, r3
 8006724:	68f8      	ldr	r0, [r7, #12]
 8006726:	f7ff fdc2 	bl	80062ae <move_window>
 800672a:	4603      	mov	r3, r0
 800672c:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800672e:	7ffb      	ldrb	r3, [r7, #31]
 8006730:	2b00      	cmp	r3, #0
 8006732:	d15b      	bne.n	80067ec <put_fat+0x224>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);	/* Simple WORD array */
 8006734:	68fb      	ldr	r3, [r7, #12]
 8006736:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 800673a:	68bb      	ldr	r3, [r7, #8]
 800673c:	005b      	lsls	r3, r3, #1
 800673e:	68fa      	ldr	r2, [r7, #12]
 8006740:	8992      	ldrh	r2, [r2, #12]
 8006742:	fbb3 f0f2 	udiv	r0, r3, r2
 8006746:	fb00 f202 	mul.w	r2, r0, r2
 800674a:	1a9b      	subs	r3, r3, r2
 800674c:	440b      	add	r3, r1
 800674e:	687a      	ldr	r2, [r7, #4]
 8006750:	b292      	uxth	r2, r2
 8006752:	4611      	mov	r1, r2
 8006754:	4618      	mov	r0, r3
 8006756:	f7ff fd05 	bl	8006164 <st_word>
			fs->wflag = 1;
 800675a:	68fb      	ldr	r3, [r7, #12]
 800675c:	2201      	movs	r2, #1
 800675e:	711a      	strb	r2, [r3, #4]
			break;
 8006760:	e047      	b.n	80067f2 <put_fat+0x22a>

		case FS_FAT32:
#if FF_FS_EXFAT
		case FS_EXFAT:
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8006762:	68fb      	ldr	r3, [r7, #12]
 8006764:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8006766:	68fb      	ldr	r3, [r7, #12]
 8006768:	899b      	ldrh	r3, [r3, #12]
 800676a:	089b      	lsrs	r3, r3, #2
 800676c:	b29b      	uxth	r3, r3
 800676e:	4619      	mov	r1, r3
 8006770:	68bb      	ldr	r3, [r7, #8]
 8006772:	fbb3 f3f1 	udiv	r3, r3, r1
 8006776:	4413      	add	r3, r2
 8006778:	4619      	mov	r1, r3
 800677a:	68f8      	ldr	r0, [r7, #12]
 800677c:	f7ff fd97 	bl	80062ae <move_window>
 8006780:	4603      	mov	r3, r0
 8006782:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8006784:	7ffb      	ldrb	r3, [r7, #31]
 8006786:	2b00      	cmp	r3, #0
 8006788:	d132      	bne.n	80067f0 <put_fat+0x228>
			if (!FF_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	f023 4470 	bic.w	r4, r3, #4026531840	@ 0xf0000000
 8006790:	68fb      	ldr	r3, [r7, #12]
 8006792:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 8006796:	68bb      	ldr	r3, [r7, #8]
 8006798:	009b      	lsls	r3, r3, #2
 800679a:	68fa      	ldr	r2, [r7, #12]
 800679c:	8992      	ldrh	r2, [r2, #12]
 800679e:	fbb3 f0f2 	udiv	r0, r3, r2
 80067a2:	fb00 f202 	mul.w	r2, r0, r2
 80067a6:	1a9b      	subs	r3, r3, r2
 80067a8:	440b      	add	r3, r1
 80067aa:	4618      	mov	r0, r3
 80067ac:	f7ff fcb7 	bl	800611e <ld_dword>
 80067b0:	4603      	mov	r3, r0
 80067b2:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 80067b6:	4323      	orrs	r3, r4
 80067b8:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 80067ba:	68fb      	ldr	r3, [r7, #12]
 80067bc:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 80067c0:	68bb      	ldr	r3, [r7, #8]
 80067c2:	009b      	lsls	r3, r3, #2
 80067c4:	68fa      	ldr	r2, [r7, #12]
 80067c6:	8992      	ldrh	r2, [r2, #12]
 80067c8:	fbb3 f0f2 	udiv	r0, r3, r2
 80067cc:	fb00 f202 	mul.w	r2, r0, r2
 80067d0:	1a9b      	subs	r3, r3, r2
 80067d2:	440b      	add	r3, r1
 80067d4:	6879      	ldr	r1, [r7, #4]
 80067d6:	4618      	mov	r0, r3
 80067d8:	f7ff fcdf 	bl	800619a <st_dword>
			fs->wflag = 1;
 80067dc:	68fb      	ldr	r3, [r7, #12]
 80067de:	2201      	movs	r2, #1
 80067e0:	711a      	strb	r2, [r3, #4]
			break;
 80067e2:	e006      	b.n	80067f2 <put_fat+0x22a>
			if (res != FR_OK) break;
 80067e4:	bf00      	nop
 80067e6:	e004      	b.n	80067f2 <put_fat+0x22a>
			if (res != FR_OK) break;
 80067e8:	bf00      	nop
 80067ea:	e002      	b.n	80067f2 <put_fat+0x22a>
			if (res != FR_OK) break;
 80067ec:	bf00      	nop
 80067ee:	e000      	b.n	80067f2 <put_fat+0x22a>
			if (res != FR_OK) break;
 80067f0:	bf00      	nop
		}
	}
	return res;
 80067f2:	7ffb      	ldrb	r3, [r7, #31]
}
 80067f4:	4618      	mov	r0, r3
 80067f6:	3724      	adds	r7, #36	@ 0x24
 80067f8:	46bd      	mov	sp, r7
 80067fa:	bd90      	pop	{r4, r7, pc}

080067fc <remove_chain>:
static FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	FFOBJID* obj,		/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0 if entire chain) */
)
{
 80067fc:	b580      	push	{r7, lr}
 80067fe:	b088      	sub	sp, #32
 8006800:	af00      	add	r7, sp, #0
 8006802:	60f8      	str	r0, [r7, #12]
 8006804:	60b9      	str	r1, [r7, #8]
 8006806:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 8006808:	2300      	movs	r3, #0
 800680a:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 800680c:	68fb      	ldr	r3, [r7, #12]
 800680e:	681b      	ldr	r3, [r3, #0]
 8006810:	61bb      	str	r3, [r7, #24]
#endif
#if FF_USE_TRIM
	LBA_t rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 8006812:	68bb      	ldr	r3, [r7, #8]
 8006814:	2b01      	cmp	r3, #1
 8006816:	d904      	bls.n	8006822 <remove_chain+0x26>
 8006818:	69bb      	ldr	r3, [r7, #24]
 800681a:	699b      	ldr	r3, [r3, #24]
 800681c:	68ba      	ldr	r2, [r7, #8]
 800681e:	429a      	cmp	r2, r3
 8006820:	d301      	bcc.n	8006826 <remove_chain+0x2a>
 8006822:	2302      	movs	r3, #2
 8006824:	e04b      	b.n	80068be <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst != 0 && (!FF_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	2b00      	cmp	r3, #0
 800682a:	d00c      	beq.n	8006846 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 800682c:	f04f 32ff 	mov.w	r2, #4294967295
 8006830:	6879      	ldr	r1, [r7, #4]
 8006832:	69b8      	ldr	r0, [r7, #24]
 8006834:	f7ff fec8 	bl	80065c8 <put_fat>
 8006838:	4603      	mov	r3, r0
 800683a:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 800683c:	7ffb      	ldrb	r3, [r7, #31]
 800683e:	2b00      	cmp	r3, #0
 8006840:	d001      	beq.n	8006846 <remove_chain+0x4a>
 8006842:	7ffb      	ldrb	r3, [r7, #31]
 8006844:	e03b      	b.n	80068be <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 8006846:	68b9      	ldr	r1, [r7, #8]
 8006848:	68f8      	ldr	r0, [r7, #12]
 800684a:	f7ff fdea 	bl	8006422 <get_fat>
 800684e:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 8006850:	697b      	ldr	r3, [r7, #20]
 8006852:	2b00      	cmp	r3, #0
 8006854:	d031      	beq.n	80068ba <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 8006856:	697b      	ldr	r3, [r7, #20]
 8006858:	2b01      	cmp	r3, #1
 800685a:	d101      	bne.n	8006860 <remove_chain+0x64>
 800685c:	2302      	movs	r3, #2
 800685e:	e02e      	b.n	80068be <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 8006860:	697b      	ldr	r3, [r7, #20]
 8006862:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006866:	d101      	bne.n	800686c <remove_chain+0x70>
 8006868:	2301      	movs	r3, #1
 800686a:	e028      	b.n	80068be <remove_chain+0xc2>
		if (!FF_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 800686c:	2200      	movs	r2, #0
 800686e:	68b9      	ldr	r1, [r7, #8]
 8006870:	69b8      	ldr	r0, [r7, #24]
 8006872:	f7ff fea9 	bl	80065c8 <put_fat>
 8006876:	4603      	mov	r3, r0
 8006878:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 800687a:	7ffb      	ldrb	r3, [r7, #31]
 800687c:	2b00      	cmp	r3, #0
 800687e:	d001      	beq.n	8006884 <remove_chain+0x88>
 8006880:	7ffb      	ldrb	r3, [r7, #31]
 8006882:	e01c      	b.n	80068be <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 8006884:	69bb      	ldr	r3, [r7, #24]
 8006886:	695a      	ldr	r2, [r3, #20]
 8006888:	69bb      	ldr	r3, [r7, #24]
 800688a:	699b      	ldr	r3, [r3, #24]
 800688c:	3b02      	subs	r3, #2
 800688e:	429a      	cmp	r2, r3
 8006890:	d20b      	bcs.n	80068aa <remove_chain+0xae>
			fs->free_clst++;
 8006892:	69bb      	ldr	r3, [r7, #24]
 8006894:	695b      	ldr	r3, [r3, #20]
 8006896:	1c5a      	adds	r2, r3, #1
 8006898:	69bb      	ldr	r3, [r7, #24]
 800689a:	615a      	str	r2, [r3, #20]
			fs->fsi_flag |= 1;
 800689c:	69bb      	ldr	r3, [r7, #24]
 800689e:	795b      	ldrb	r3, [r3, #5]
 80068a0:	f043 0301 	orr.w	r3, r3, #1
 80068a4:	b2da      	uxtb	r2, r3
 80068a6:	69bb      	ldr	r3, [r7, #24]
 80068a8:	715a      	strb	r2, [r3, #5]
			disk_ioctl(fs->pdrv, CTRL_TRIM, rt);		/* Inform storage device that the data in the block may be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 80068aa:	697b      	ldr	r3, [r7, #20]
 80068ac:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 80068ae:	69bb      	ldr	r3, [r7, #24]
 80068b0:	699b      	ldr	r3, [r3, #24]
 80068b2:	68ba      	ldr	r2, [r7, #8]
 80068b4:	429a      	cmp	r2, r3
 80068b6:	d3c6      	bcc.n	8006846 <remove_chain+0x4a>
 80068b8:	e000      	b.n	80068bc <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 80068ba:	bf00      	nop
				}
			}
		}
	}
#endif
	return FR_OK;
 80068bc:	2300      	movs	r3, #0
}
 80068be:	4618      	mov	r0, r3
 80068c0:	3720      	adds	r7, #32
 80068c2:	46bd      	mov	sp, r7
 80068c4:	bd80      	pop	{r7, pc}

080068c6 <create_chain>:

static DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	FFOBJID* obj,		/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 80068c6:	b580      	push	{r7, lr}
 80068c8:	b088      	sub	sp, #32
 80068ca:	af00      	add	r7, sp, #0
 80068cc:	6078      	str	r0, [r7, #4]
 80068ce:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	681b      	ldr	r3, [r3, #0]
 80068d4:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 80068d6:	683b      	ldr	r3, [r7, #0]
 80068d8:	2b00      	cmp	r3, #0
 80068da:	d10d      	bne.n	80068f8 <create_chain+0x32>
		scl = fs->last_clst;				/* Suggested cluster to start to find */
 80068dc:	693b      	ldr	r3, [r7, #16]
 80068de:	691b      	ldr	r3, [r3, #16]
 80068e0:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 80068e2:	69bb      	ldr	r3, [r7, #24]
 80068e4:	2b00      	cmp	r3, #0
 80068e6:	d004      	beq.n	80068f2 <create_chain+0x2c>
 80068e8:	693b      	ldr	r3, [r7, #16]
 80068ea:	699b      	ldr	r3, [r3, #24]
 80068ec:	69ba      	ldr	r2, [r7, #24]
 80068ee:	429a      	cmp	r2, r3
 80068f0:	d31b      	bcc.n	800692a <create_chain+0x64>
 80068f2:	2301      	movs	r3, #1
 80068f4:	61bb      	str	r3, [r7, #24]
 80068f6:	e018      	b.n	800692a <create_chain+0x64>
	}
	else {				/* Stretch a chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 80068f8:	6839      	ldr	r1, [r7, #0]
 80068fa:	6878      	ldr	r0, [r7, #4]
 80068fc:	f7ff fd91 	bl	8006422 <get_fat>
 8006900:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Test for insanity */
 8006902:	68fb      	ldr	r3, [r7, #12]
 8006904:	2b01      	cmp	r3, #1
 8006906:	d801      	bhi.n	800690c <create_chain+0x46>
 8006908:	2301      	movs	r3, #1
 800690a:	e0a9      	b.n	8006a60 <create_chain+0x19a>
		if (cs == 0xFFFFFFFF) return cs;	/* Test for disk error */
 800690c:	68fb      	ldr	r3, [r7, #12]
 800690e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006912:	d101      	bne.n	8006918 <create_chain+0x52>
 8006914:	68fb      	ldr	r3, [r7, #12]
 8006916:	e0a3      	b.n	8006a60 <create_chain+0x19a>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 8006918:	693b      	ldr	r3, [r7, #16]
 800691a:	699b      	ldr	r3, [r3, #24]
 800691c:	68fa      	ldr	r2, [r7, #12]
 800691e:	429a      	cmp	r2, r3
 8006920:	d201      	bcs.n	8006926 <create_chain+0x60>
 8006922:	68fb      	ldr	r3, [r7, #12]
 8006924:	e09c      	b.n	8006a60 <create_chain+0x19a>
		scl = clst;							/* Cluster to start to find */
 8006926:	683b      	ldr	r3, [r7, #0]
 8006928:	61bb      	str	r3, [r7, #24]
	}
	if (fs->free_clst == 0) return 0;		/* No free cluster */
 800692a:	693b      	ldr	r3, [r7, #16]
 800692c:	695b      	ldr	r3, [r3, #20]
 800692e:	2b00      	cmp	r3, #0
 8006930:	d101      	bne.n	8006936 <create_chain+0x70>
 8006932:	2300      	movs	r3, #0
 8006934:	e094      	b.n	8006a60 <create_chain+0x19a>
			}
		}
	} else
#endif
	{	/* On the FAT/FAT32 volume */
		ncl = 0;
 8006936:	2300      	movs	r3, #0
 8006938:	61fb      	str	r3, [r7, #28]
		if (scl == clst) {						/* Stretching an existing chain? */
 800693a:	69ba      	ldr	r2, [r7, #24]
 800693c:	683b      	ldr	r3, [r7, #0]
 800693e:	429a      	cmp	r2, r3
 8006940:	d129      	bne.n	8006996 <create_chain+0xd0>
			ncl = scl + 1;						/* Test if next cluster is free */
 8006942:	69bb      	ldr	r3, [r7, #24]
 8006944:	3301      	adds	r3, #1
 8006946:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) ncl = 2;
 8006948:	693b      	ldr	r3, [r7, #16]
 800694a:	699b      	ldr	r3, [r3, #24]
 800694c:	69fa      	ldr	r2, [r7, #28]
 800694e:	429a      	cmp	r2, r3
 8006950:	d301      	bcc.n	8006956 <create_chain+0x90>
 8006952:	2302      	movs	r3, #2
 8006954:	61fb      	str	r3, [r7, #28]
			cs = get_fat(obj, ncl);				/* Get next cluster status */
 8006956:	69f9      	ldr	r1, [r7, #28]
 8006958:	6878      	ldr	r0, [r7, #4]
 800695a:	f7ff fd62 	bl	8006422 <get_fat>
 800695e:	60f8      	str	r0, [r7, #12]
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* Test for error */
 8006960:	68fb      	ldr	r3, [r7, #12]
 8006962:	2b01      	cmp	r3, #1
 8006964:	d003      	beq.n	800696e <create_chain+0xa8>
 8006966:	68fb      	ldr	r3, [r7, #12]
 8006968:	f1b3 3fff 	cmp.w	r3, #4294967295
 800696c:	d101      	bne.n	8006972 <create_chain+0xac>
 800696e:	68fb      	ldr	r3, [r7, #12]
 8006970:	e076      	b.n	8006a60 <create_chain+0x19a>
			if (cs != 0) {						/* Not free? */
 8006972:	68fb      	ldr	r3, [r7, #12]
 8006974:	2b00      	cmp	r3, #0
 8006976:	d00e      	beq.n	8006996 <create_chain+0xd0>
				cs = fs->last_clst;				/* Start at suggested cluster if it is valid */
 8006978:	693b      	ldr	r3, [r7, #16]
 800697a:	691b      	ldr	r3, [r3, #16]
 800697c:	60fb      	str	r3, [r7, #12]
				if (cs >= 2 && cs < fs->n_fatent) scl = cs;
 800697e:	68fb      	ldr	r3, [r7, #12]
 8006980:	2b01      	cmp	r3, #1
 8006982:	d906      	bls.n	8006992 <create_chain+0xcc>
 8006984:	693b      	ldr	r3, [r7, #16]
 8006986:	699b      	ldr	r3, [r3, #24]
 8006988:	68fa      	ldr	r2, [r7, #12]
 800698a:	429a      	cmp	r2, r3
 800698c:	d201      	bcs.n	8006992 <create_chain+0xcc>
 800698e:	68fb      	ldr	r3, [r7, #12]
 8006990:	61bb      	str	r3, [r7, #24]
				ncl = 0;
 8006992:	2300      	movs	r3, #0
 8006994:	61fb      	str	r3, [r7, #28]
			}
		}
		if (ncl == 0) {	/* The new cluster cannot be contiguous and find another fragment */
 8006996:	69fb      	ldr	r3, [r7, #28]
 8006998:	2b00      	cmp	r3, #0
 800699a:	d129      	bne.n	80069f0 <create_chain+0x12a>
			ncl = scl;	/* Start cluster */
 800699c:	69bb      	ldr	r3, [r7, #24]
 800699e:	61fb      	str	r3, [r7, #28]
			for (;;) {
				ncl++;							/* Next cluster */
 80069a0:	69fb      	ldr	r3, [r7, #28]
 80069a2:	3301      	adds	r3, #1
 80069a4:	61fb      	str	r3, [r7, #28]
				if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 80069a6:	693b      	ldr	r3, [r7, #16]
 80069a8:	699b      	ldr	r3, [r3, #24]
 80069aa:	69fa      	ldr	r2, [r7, #28]
 80069ac:	429a      	cmp	r2, r3
 80069ae:	d307      	bcc.n	80069c0 <create_chain+0xfa>
					ncl = 2;
 80069b0:	2302      	movs	r3, #2
 80069b2:	61fb      	str	r3, [r7, #28]
					if (ncl > scl) return 0;	/* No free cluster found? */
 80069b4:	69fa      	ldr	r2, [r7, #28]
 80069b6:	69bb      	ldr	r3, [r7, #24]
 80069b8:	429a      	cmp	r2, r3
 80069ba:	d901      	bls.n	80069c0 <create_chain+0xfa>
 80069bc:	2300      	movs	r3, #0
 80069be:	e04f      	b.n	8006a60 <create_chain+0x19a>
				}
				cs = get_fat(obj, ncl);			/* Get the cluster status */
 80069c0:	69f9      	ldr	r1, [r7, #28]
 80069c2:	6878      	ldr	r0, [r7, #4]
 80069c4:	f7ff fd2d 	bl	8006422 <get_fat>
 80069c8:	60f8      	str	r0, [r7, #12]
				if (cs == 0) break;				/* Found a free cluster? */
 80069ca:	68fb      	ldr	r3, [r7, #12]
 80069cc:	2b00      	cmp	r3, #0
 80069ce:	d00e      	beq.n	80069ee <create_chain+0x128>
				if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* Test for error */
 80069d0:	68fb      	ldr	r3, [r7, #12]
 80069d2:	2b01      	cmp	r3, #1
 80069d4:	d003      	beq.n	80069de <create_chain+0x118>
 80069d6:	68fb      	ldr	r3, [r7, #12]
 80069d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80069dc:	d101      	bne.n	80069e2 <create_chain+0x11c>
 80069de:	68fb      	ldr	r3, [r7, #12]
 80069e0:	e03e      	b.n	8006a60 <create_chain+0x19a>
				if (ncl == scl) return 0;		/* No free cluster found? */
 80069e2:	69fa      	ldr	r2, [r7, #28]
 80069e4:	69bb      	ldr	r3, [r7, #24]
 80069e6:	429a      	cmp	r2, r3
 80069e8:	d1da      	bne.n	80069a0 <create_chain+0xda>
 80069ea:	2300      	movs	r3, #0
 80069ec:	e038      	b.n	8006a60 <create_chain+0x19a>
				if (cs == 0) break;				/* Found a free cluster? */
 80069ee:	bf00      	nop
			}
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);		/* Mark the new cluster 'EOC' */
 80069f0:	f04f 32ff 	mov.w	r2, #4294967295
 80069f4:	69f9      	ldr	r1, [r7, #28]
 80069f6:	6938      	ldr	r0, [r7, #16]
 80069f8:	f7ff fde6 	bl	80065c8 <put_fat>
 80069fc:	4603      	mov	r3, r0
 80069fe:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 8006a00:	7dfb      	ldrb	r3, [r7, #23]
 8006a02:	2b00      	cmp	r3, #0
 8006a04:	d109      	bne.n	8006a1a <create_chain+0x154>
 8006a06:	683b      	ldr	r3, [r7, #0]
 8006a08:	2b00      	cmp	r3, #0
 8006a0a:	d006      	beq.n	8006a1a <create_chain+0x154>
			res = put_fat(fs, clst, ncl);		/* Link it from the previous one if needed */
 8006a0c:	69fa      	ldr	r2, [r7, #28]
 8006a0e:	6839      	ldr	r1, [r7, #0]
 8006a10:	6938      	ldr	r0, [r7, #16]
 8006a12:	f7ff fdd9 	bl	80065c8 <put_fat>
 8006a16:	4603      	mov	r3, r0
 8006a18:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 8006a1a:	7dfb      	ldrb	r3, [r7, #23]
 8006a1c:	2b00      	cmp	r3, #0
 8006a1e:	d116      	bne.n	8006a4e <create_chain+0x188>
		fs->last_clst = ncl;
 8006a20:	693b      	ldr	r3, [r7, #16]
 8006a22:	69fa      	ldr	r2, [r7, #28]
 8006a24:	611a      	str	r2, [r3, #16]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 8006a26:	693b      	ldr	r3, [r7, #16]
 8006a28:	695a      	ldr	r2, [r3, #20]
 8006a2a:	693b      	ldr	r3, [r7, #16]
 8006a2c:	699b      	ldr	r3, [r3, #24]
 8006a2e:	3b02      	subs	r3, #2
 8006a30:	429a      	cmp	r2, r3
 8006a32:	d804      	bhi.n	8006a3e <create_chain+0x178>
 8006a34:	693b      	ldr	r3, [r7, #16]
 8006a36:	695b      	ldr	r3, [r3, #20]
 8006a38:	1e5a      	subs	r2, r3, #1
 8006a3a:	693b      	ldr	r3, [r7, #16]
 8006a3c:	615a      	str	r2, [r3, #20]
		fs->fsi_flag |= 1;
 8006a3e:	693b      	ldr	r3, [r7, #16]
 8006a40:	795b      	ldrb	r3, [r3, #5]
 8006a42:	f043 0301 	orr.w	r3, r3, #1
 8006a46:	b2da      	uxtb	r2, r3
 8006a48:	693b      	ldr	r3, [r7, #16]
 8006a4a:	715a      	strb	r2, [r3, #5]
 8006a4c:	e007      	b.n	8006a5e <create_chain+0x198>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 8006a4e:	7dfb      	ldrb	r3, [r7, #23]
 8006a50:	2b01      	cmp	r3, #1
 8006a52:	d102      	bne.n	8006a5a <create_chain+0x194>
 8006a54:	f04f 33ff 	mov.w	r3, #4294967295
 8006a58:	e000      	b.n	8006a5c <create_chain+0x196>
 8006a5a:	2301      	movs	r3, #1
 8006a5c:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 8006a5e:	69fb      	ldr	r3, [r7, #28]
}
 8006a60:	4618      	mov	r0, r3
 8006a62:	3720      	adds	r7, #32
 8006a64:	46bd      	mov	sp, r7
 8006a66:	bd80      	pop	{r7, pc}

08006a68 <dir_clear>:
#if !FF_FS_READONLY
static FRESULT dir_clear (	/* Returns FR_OK or FR_DISK_ERR */
	FATFS *fs,		/* Filesystem object */
	DWORD clst		/* Directory table to clear */
)
{
 8006a68:	b580      	push	{r7, lr}
 8006a6a:	b086      	sub	sp, #24
 8006a6c:	af00      	add	r7, sp, #0
 8006a6e:	6078      	str	r0, [r7, #4]
 8006a70:	6039      	str	r1, [r7, #0]
	LBA_t sect;
	UINT n, szb;
	BYTE *ibuf;


	if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 8006a72:	6878      	ldr	r0, [r7, #4]
 8006a74:	f7ff fbdf 	bl	8006236 <sync_window>
 8006a78:	4603      	mov	r3, r0
 8006a7a:	2b00      	cmp	r3, #0
 8006a7c:	d001      	beq.n	8006a82 <dir_clear+0x1a>
 8006a7e:	2301      	movs	r3, #1
 8006a80:	e036      	b.n	8006af0 <dir_clear+0x88>
	sect = clst2sect(fs, clst);		/* Top of the cluster */
 8006a82:	6839      	ldr	r1, [r7, #0]
 8006a84:	6878      	ldr	r0, [r7, #4]
 8006a86:	f7ff fcad 	bl	80063e4 <clst2sect>
 8006a8a:	6138      	str	r0, [r7, #16]
	fs->winsect = sect;				/* Set window to top of the cluster */
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	693a      	ldr	r2, [r7, #16]
 8006a90:	631a      	str	r2, [r3, #48]	@ 0x30
	memset(fs->win, 0, sizeof fs->win);	/* Clear window buffer */
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	3334      	adds	r3, #52	@ 0x34
 8006a96:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8006a9a:	2100      	movs	r1, #0
 8006a9c:	4618      	mov	r0, r3
 8006a9e:	f00c f9af 	bl	8012e00 <memset>
		for (n = 0; n < fs->csize && disk_write(fs->pdrv, ibuf, sect + n, szb) == RES_OK; n += szb) ;	/* Fill the cluster with 0 */
		ff_memfree(ibuf);
	} else
#endif
	{
		ibuf = fs->win; szb = 1;	/* Use window buffer (many single-sector writes may take a time) */
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	3334      	adds	r3, #52	@ 0x34
 8006aa6:	60fb      	str	r3, [r7, #12]
 8006aa8:	2301      	movs	r3, #1
 8006aaa:	60bb      	str	r3, [r7, #8]
		for (n = 0; n < fs->csize && disk_write(fs->pdrv, ibuf, sect + n, szb) == RES_OK; n += szb) ;	/* Fill the cluster with 0 */
 8006aac:	2300      	movs	r3, #0
 8006aae:	617b      	str	r3, [r7, #20]
 8006ab0:	e003      	b.n	8006aba <dir_clear+0x52>
 8006ab2:	697a      	ldr	r2, [r7, #20]
 8006ab4:	68bb      	ldr	r3, [r7, #8]
 8006ab6:	4413      	add	r3, r2
 8006ab8:	617b      	str	r3, [r7, #20]
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	895b      	ldrh	r3, [r3, #10]
 8006abe:	461a      	mov	r2, r3
 8006ac0:	697b      	ldr	r3, [r7, #20]
 8006ac2:	4293      	cmp	r3, r2
 8006ac4:	d20b      	bcs.n	8006ade <dir_clear+0x76>
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	7858      	ldrb	r0, [r3, #1]
 8006aca:	693a      	ldr	r2, [r7, #16]
 8006acc:	697b      	ldr	r3, [r7, #20]
 8006ace:	441a      	add	r2, r3
 8006ad0:	68bb      	ldr	r3, [r7, #8]
 8006ad2:	68f9      	ldr	r1, [r7, #12]
 8006ad4:	f7ff fa54 	bl	8005f80 <disk_write>
 8006ad8:	4603      	mov	r3, r0
 8006ada:	2b00      	cmp	r3, #0
 8006adc:	d0e9      	beq.n	8006ab2 <dir_clear+0x4a>
	}
	return (n == fs->csize) ? FR_OK : FR_DISK_ERR;
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	895b      	ldrh	r3, [r3, #10]
 8006ae2:	461a      	mov	r2, r3
 8006ae4:	697b      	ldr	r3, [r7, #20]
 8006ae6:	4293      	cmp	r3, r2
 8006ae8:	bf14      	ite	ne
 8006aea:	2301      	movne	r3, #1
 8006aec:	2300      	moveq	r3, #0
 8006aee:	b2db      	uxtb	r3, r3
}
 8006af0:	4618      	mov	r0, r3
 8006af2:	3718      	adds	r7, #24
 8006af4:	46bd      	mov	sp, r7
 8006af6:	bd80      	pop	{r7, pc}

08006af8 <dir_sdi>:

static FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 8006af8:	b580      	push	{r7, lr}
 8006afa:	b086      	sub	sp, #24
 8006afc:	af00      	add	r7, sp, #0
 8006afe:	6078      	str	r0, [r7, #4]
 8006b00:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	681b      	ldr	r3, [r3, #0]
 8006b06:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((FF_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 8006b08:	683b      	ldr	r3, [r7, #0]
 8006b0a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8006b0e:	d204      	bcs.n	8006b1a <dir_sdi+0x22>
 8006b10:	683b      	ldr	r3, [r7, #0]
 8006b12:	f003 031f 	and.w	r3, r3, #31
 8006b16:	2b00      	cmp	r3, #0
 8006b18:	d001      	beq.n	8006b1e <dir_sdi+0x26>
		return FR_INT_ERR;
 8006b1a:	2302      	movs	r3, #2
 8006b1c:	e071      	b.n	8006c02 <dir_sdi+0x10a>
	}
	dp->dptr = ofs;				/* Set current offset */
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	683a      	ldr	r2, [r7, #0]
 8006b22:	611a      	str	r2, [r3, #16]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	689b      	ldr	r3, [r3, #8]
 8006b28:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 8006b2a:	697b      	ldr	r3, [r7, #20]
 8006b2c:	2b00      	cmp	r3, #0
 8006b2e:	d106      	bne.n	8006b3e <dir_sdi+0x46>
 8006b30:	693b      	ldr	r3, [r7, #16]
 8006b32:	781b      	ldrb	r3, [r3, #0]
 8006b34:	2b02      	cmp	r3, #2
 8006b36:	d902      	bls.n	8006b3e <dir_sdi+0x46>
		clst = (DWORD)fs->dirbase;
 8006b38:	693b      	ldr	r3, [r7, #16]
 8006b3a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006b3c:	617b      	str	r3, [r7, #20]
		if (FF_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory on the FAT volume) */
 8006b3e:	697b      	ldr	r3, [r7, #20]
 8006b40:	2b00      	cmp	r3, #0
 8006b42:	d10c      	bne.n	8006b5e <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir) return FR_INT_ERR;	/* Is index out of range? */
 8006b44:	683b      	ldr	r3, [r7, #0]
 8006b46:	095b      	lsrs	r3, r3, #5
 8006b48:	693a      	ldr	r2, [r7, #16]
 8006b4a:	8912      	ldrh	r2, [r2, #8]
 8006b4c:	4293      	cmp	r3, r2
 8006b4e:	d301      	bcc.n	8006b54 <dir_sdi+0x5c>
 8006b50:	2302      	movs	r3, #2
 8006b52:	e056      	b.n	8006c02 <dir_sdi+0x10a>
		dp->sect = fs->dirbase;
 8006b54:	693b      	ldr	r3, [r7, #16]
 8006b56:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	619a      	str	r2, [r3, #24]
 8006b5c:	e02d      	b.n	8006bba <dir_sdi+0xc2>

	} else {			/* Dynamic table (sub-directory or root-directory on the FAT32/exFAT volume) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 8006b5e:	693b      	ldr	r3, [r7, #16]
 8006b60:	895b      	ldrh	r3, [r3, #10]
 8006b62:	461a      	mov	r2, r3
 8006b64:	693b      	ldr	r3, [r7, #16]
 8006b66:	899b      	ldrh	r3, [r3, #12]
 8006b68:	fb02 f303 	mul.w	r3, r2, r3
 8006b6c:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 8006b6e:	e019      	b.n	8006ba4 <dir_sdi+0xac>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	6979      	ldr	r1, [r7, #20]
 8006b74:	4618      	mov	r0, r3
 8006b76:	f7ff fc54 	bl	8006422 <get_fat>
 8006b7a:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8006b7c:	697b      	ldr	r3, [r7, #20]
 8006b7e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006b82:	d101      	bne.n	8006b88 <dir_sdi+0x90>
 8006b84:	2301      	movs	r3, #1
 8006b86:	e03c      	b.n	8006c02 <dir_sdi+0x10a>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 8006b88:	697b      	ldr	r3, [r7, #20]
 8006b8a:	2b01      	cmp	r3, #1
 8006b8c:	d904      	bls.n	8006b98 <dir_sdi+0xa0>
 8006b8e:	693b      	ldr	r3, [r7, #16]
 8006b90:	699b      	ldr	r3, [r3, #24]
 8006b92:	697a      	ldr	r2, [r7, #20]
 8006b94:	429a      	cmp	r2, r3
 8006b96:	d301      	bcc.n	8006b9c <dir_sdi+0xa4>
 8006b98:	2302      	movs	r3, #2
 8006b9a:	e032      	b.n	8006c02 <dir_sdi+0x10a>
			ofs -= csz;
 8006b9c:	683a      	ldr	r2, [r7, #0]
 8006b9e:	68fb      	ldr	r3, [r7, #12]
 8006ba0:	1ad3      	subs	r3, r2, r3
 8006ba2:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 8006ba4:	683a      	ldr	r2, [r7, #0]
 8006ba6:	68fb      	ldr	r3, [r7, #12]
 8006ba8:	429a      	cmp	r2, r3
 8006baa:	d2e1      	bcs.n	8006b70 <dir_sdi+0x78>
		}
		dp->sect = clst2sect(fs, clst);
 8006bac:	6979      	ldr	r1, [r7, #20]
 8006bae:	6938      	ldr	r0, [r7, #16]
 8006bb0:	f7ff fc18 	bl	80063e4 <clst2sect>
 8006bb4:	4602      	mov	r2, r0
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	619a      	str	r2, [r3, #24]
	}
	dp->clust = clst;					/* Current cluster# */
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	697a      	ldr	r2, [r7, #20]
 8006bbe:	615a      	str	r2, [r3, #20]
	if (dp->sect == 0) return FR_INT_ERR;
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	699b      	ldr	r3, [r3, #24]
 8006bc4:	2b00      	cmp	r3, #0
 8006bc6:	d101      	bne.n	8006bcc <dir_sdi+0xd4>
 8006bc8:	2302      	movs	r3, #2
 8006bca:	e01a      	b.n	8006c02 <dir_sdi+0x10a>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	699a      	ldr	r2, [r3, #24]
 8006bd0:	693b      	ldr	r3, [r7, #16]
 8006bd2:	899b      	ldrh	r3, [r3, #12]
 8006bd4:	4619      	mov	r1, r3
 8006bd6:	683b      	ldr	r3, [r7, #0]
 8006bd8:	fbb3 f3f1 	udiv	r3, r3, r1
 8006bdc:	441a      	add	r2, r3
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	619a      	str	r2, [r3, #24]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 8006be2:	693b      	ldr	r3, [r7, #16]
 8006be4:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 8006be8:	693b      	ldr	r3, [r7, #16]
 8006bea:	899b      	ldrh	r3, [r3, #12]
 8006bec:	461a      	mov	r2, r3
 8006bee:	683b      	ldr	r3, [r7, #0]
 8006bf0:	fbb3 f0f2 	udiv	r0, r3, r2
 8006bf4:	fb00 f202 	mul.w	r2, r0, r2
 8006bf8:	1a9b      	subs	r3, r3, r2
 8006bfa:	18ca      	adds	r2, r1, r3
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	61da      	str	r2, [r3, #28]

	return FR_OK;
 8006c00:	2300      	movs	r3, #0
}
 8006c02:	4618      	mov	r0, r3
 8006c04:	3718      	adds	r7, #24
 8006c06:	46bd      	mov	sp, r7
 8006c08:	bd80      	pop	{r7, pc}

08006c0a <dir_next>:

static FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,				/* Pointer to the directory object */
	int stretch				/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 8006c0a:	b580      	push	{r7, lr}
 8006c0c:	b086      	sub	sp, #24
 8006c0e:	af00      	add	r7, sp, #0
 8006c10:	6078      	str	r0, [r7, #4]
 8006c12:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	681b      	ldr	r3, [r3, #0]
 8006c18:	613b      	str	r3, [r7, #16]


	ofs = dp->dptr + SZDIRE;	/* Next entry */
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	691b      	ldr	r3, [r3, #16]
 8006c1e:	3320      	adds	r3, #32
 8006c20:	60fb      	str	r3, [r7, #12]
	if (ofs >= (DWORD)((FF_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) dp->sect = 0;	/* Disable it if the offset reached the max value */
 8006c22:	68fb      	ldr	r3, [r7, #12]
 8006c24:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8006c28:	d302      	bcc.n	8006c30 <dir_next+0x26>
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	2200      	movs	r2, #0
 8006c2e:	619a      	str	r2, [r3, #24]
	if (dp->sect == 0) return FR_NO_FILE;	/* Report EOT if it has been disabled */
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	699b      	ldr	r3, [r3, #24]
 8006c34:	2b00      	cmp	r3, #0
 8006c36:	d101      	bne.n	8006c3c <dir_next+0x32>
 8006c38:	2304      	movs	r3, #4
 8006c3a:	e088      	b.n	8006d4e <dir_next+0x144>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 8006c3c:	693b      	ldr	r3, [r7, #16]
 8006c3e:	899b      	ldrh	r3, [r3, #12]
 8006c40:	461a      	mov	r2, r3
 8006c42:	68fb      	ldr	r3, [r7, #12]
 8006c44:	fbb3 f1f2 	udiv	r1, r3, r2
 8006c48:	fb01 f202 	mul.w	r2, r1, r2
 8006c4c:	1a9b      	subs	r3, r3, r2
 8006c4e:	2b00      	cmp	r3, #0
 8006c50:	d16a      	bne.n	8006d28 <dir_next+0x11e>
		dp->sect++;				/* Next sector */
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	699b      	ldr	r3, [r3, #24]
 8006c56:	1c5a      	adds	r2, r3, #1
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	619a      	str	r2, [r3, #24]

		if (dp->clust == 0) {	/* Static table */
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	695b      	ldr	r3, [r3, #20]
 8006c60:	2b00      	cmp	r3, #0
 8006c62:	d10a      	bne.n	8006c7a <dir_next+0x70>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 8006c64:	68fb      	ldr	r3, [r7, #12]
 8006c66:	095b      	lsrs	r3, r3, #5
 8006c68:	693a      	ldr	r2, [r7, #16]
 8006c6a:	8912      	ldrh	r2, [r2, #8]
 8006c6c:	4293      	cmp	r3, r2
 8006c6e:	d35b      	bcc.n	8006d28 <dir_next+0x11e>
				dp->sect = 0; return FR_NO_FILE;
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	2200      	movs	r2, #0
 8006c74:	619a      	str	r2, [r3, #24]
 8006c76:	2304      	movs	r3, #4
 8006c78:	e069      	b.n	8006d4e <dir_next+0x144>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {	/* Cluster changed? */
 8006c7a:	693b      	ldr	r3, [r7, #16]
 8006c7c:	899b      	ldrh	r3, [r3, #12]
 8006c7e:	461a      	mov	r2, r3
 8006c80:	68fb      	ldr	r3, [r7, #12]
 8006c82:	fbb3 f3f2 	udiv	r3, r3, r2
 8006c86:	693a      	ldr	r2, [r7, #16]
 8006c88:	8952      	ldrh	r2, [r2, #10]
 8006c8a:	3a01      	subs	r2, #1
 8006c8c:	4013      	ands	r3, r2
 8006c8e:	2b00      	cmp	r3, #0
 8006c90:	d14a      	bne.n	8006d28 <dir_next+0x11e>
				clst = get_fat(&dp->obj, dp->clust);		/* Get next cluster */
 8006c92:	687a      	ldr	r2, [r7, #4]
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	695b      	ldr	r3, [r3, #20]
 8006c98:	4619      	mov	r1, r3
 8006c9a:	4610      	mov	r0, r2
 8006c9c:	f7ff fbc1 	bl	8006422 <get_fat>
 8006ca0:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;			/* Internal error */
 8006ca2:	697b      	ldr	r3, [r7, #20]
 8006ca4:	2b01      	cmp	r3, #1
 8006ca6:	d801      	bhi.n	8006cac <dir_next+0xa2>
 8006ca8:	2302      	movs	r3, #2
 8006caa:	e050      	b.n	8006d4e <dir_next+0x144>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8006cac:	697b      	ldr	r3, [r7, #20]
 8006cae:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006cb2:	d101      	bne.n	8006cb8 <dir_next+0xae>
 8006cb4:	2301      	movs	r3, #1
 8006cb6:	e04a      	b.n	8006d4e <dir_next+0x144>
				if (clst >= fs->n_fatent) {					/* It reached end of dynamic table */
 8006cb8:	693b      	ldr	r3, [r7, #16]
 8006cba:	699b      	ldr	r3, [r3, #24]
 8006cbc:	697a      	ldr	r2, [r7, #20]
 8006cbe:	429a      	cmp	r2, r3
 8006cc0:	d328      	bcc.n	8006d14 <dir_next+0x10a>
#if !FF_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 8006cc2:	683b      	ldr	r3, [r7, #0]
 8006cc4:	2b00      	cmp	r3, #0
 8006cc6:	d104      	bne.n	8006cd2 <dir_next+0xc8>
						dp->sect = 0; return FR_NO_FILE;
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	2200      	movs	r2, #0
 8006ccc:	619a      	str	r2, [r3, #24]
 8006cce:	2304      	movs	r3, #4
 8006cd0:	e03d      	b.n	8006d4e <dir_next+0x144>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 8006cd2:	687a      	ldr	r2, [r7, #4]
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	695b      	ldr	r3, [r3, #20]
 8006cd8:	4619      	mov	r1, r3
 8006cda:	4610      	mov	r0, r2
 8006cdc:	f7ff fdf3 	bl	80068c6 <create_chain>
 8006ce0:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8006ce2:	697b      	ldr	r3, [r7, #20]
 8006ce4:	2b00      	cmp	r3, #0
 8006ce6:	d101      	bne.n	8006cec <dir_next+0xe2>
 8006ce8:	2307      	movs	r3, #7
 8006cea:	e030      	b.n	8006d4e <dir_next+0x144>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 8006cec:	697b      	ldr	r3, [r7, #20]
 8006cee:	2b01      	cmp	r3, #1
 8006cf0:	d101      	bne.n	8006cf6 <dir_next+0xec>
 8006cf2:	2302      	movs	r3, #2
 8006cf4:	e02b      	b.n	8006d4e <dir_next+0x144>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8006cf6:	697b      	ldr	r3, [r7, #20]
 8006cf8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006cfc:	d101      	bne.n	8006d02 <dir_next+0xf8>
 8006cfe:	2301      	movs	r3, #1
 8006d00:	e025      	b.n	8006d4e <dir_next+0x144>
					if (dir_clear(fs, clst) != FR_OK) return FR_DISK_ERR;	/* Clean up the stretched table */
 8006d02:	6979      	ldr	r1, [r7, #20]
 8006d04:	6938      	ldr	r0, [r7, #16]
 8006d06:	f7ff feaf 	bl	8006a68 <dir_clear>
 8006d0a:	4603      	mov	r3, r0
 8006d0c:	2b00      	cmp	r3, #0
 8006d0e:	d001      	beq.n	8006d14 <dir_next+0x10a>
 8006d10:	2301      	movs	r3, #1
 8006d12:	e01c      	b.n	8006d4e <dir_next+0x144>
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	697a      	ldr	r2, [r7, #20]
 8006d18:	615a      	str	r2, [r3, #20]
				dp->sect = clst2sect(fs, clst);
 8006d1a:	6979      	ldr	r1, [r7, #20]
 8006d1c:	6938      	ldr	r0, [r7, #16]
 8006d1e:	f7ff fb61 	bl	80063e4 <clst2sect>
 8006d22:	4602      	mov	r2, r0
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	619a      	str	r2, [r3, #24]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	68fa      	ldr	r2, [r7, #12]
 8006d2c:	611a      	str	r2, [r3, #16]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8006d2e:	693b      	ldr	r3, [r7, #16]
 8006d30:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 8006d34:	693b      	ldr	r3, [r7, #16]
 8006d36:	899b      	ldrh	r3, [r3, #12]
 8006d38:	461a      	mov	r2, r3
 8006d3a:	68fb      	ldr	r3, [r7, #12]
 8006d3c:	fbb3 f0f2 	udiv	r0, r3, r2
 8006d40:	fb00 f202 	mul.w	r2, r0, r2
 8006d44:	1a9b      	subs	r3, r3, r2
 8006d46:	18ca      	adds	r2, r1, r3
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	61da      	str	r2, [r3, #28]

	return FR_OK;
 8006d4c:	2300      	movs	r3, #0
}
 8006d4e:	4618      	mov	r0, r3
 8006d50:	3718      	adds	r7, #24
 8006d52:	46bd      	mov	sp, r7
 8006d54:	bd80      	pop	{r7, pc}

08006d56 <dir_alloc>:

static FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,				/* Pointer to the directory object */
	UINT n_ent				/* Number of contiguous entries to allocate */
)
{
 8006d56:	b580      	push	{r7, lr}
 8006d58:	b086      	sub	sp, #24
 8006d5a:	af00      	add	r7, sp, #0
 8006d5c:	6078      	str	r0, [r7, #4]
 8006d5e:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	681b      	ldr	r3, [r3, #0]
 8006d64:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 8006d66:	2100      	movs	r1, #0
 8006d68:	6878      	ldr	r0, [r7, #4]
 8006d6a:	f7ff fec5 	bl	8006af8 <dir_sdi>
 8006d6e:	4603      	mov	r3, r0
 8006d70:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8006d72:	7dfb      	ldrb	r3, [r7, #23]
 8006d74:	2b00      	cmp	r3, #0
 8006d76:	d12b      	bne.n	8006dd0 <dir_alloc+0x7a>
		n = 0;
 8006d78:	2300      	movs	r3, #0
 8006d7a:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	699b      	ldr	r3, [r3, #24]
 8006d80:	4619      	mov	r1, r3
 8006d82:	68f8      	ldr	r0, [r7, #12]
 8006d84:	f7ff fa93 	bl	80062ae <move_window>
 8006d88:	4603      	mov	r3, r0
 8006d8a:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8006d8c:	7dfb      	ldrb	r3, [r7, #23]
 8006d8e:	2b00      	cmp	r3, #0
 8006d90:	d11d      	bne.n	8006dce <dir_alloc+0x78>
#if FF_FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {	/* Is the entry free? */
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {	/* Is the entry free? */
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	69db      	ldr	r3, [r3, #28]
 8006d96:	781b      	ldrb	r3, [r3, #0]
 8006d98:	2be5      	cmp	r3, #229	@ 0xe5
 8006d9a:	d004      	beq.n	8006da6 <dir_alloc+0x50>
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	69db      	ldr	r3, [r3, #28]
 8006da0:	781b      	ldrb	r3, [r3, #0]
 8006da2:	2b00      	cmp	r3, #0
 8006da4:	d107      	bne.n	8006db6 <dir_alloc+0x60>
#endif
				if (++n == n_ent) break;	/* Is a block of contiguous free entries found? */
 8006da6:	693b      	ldr	r3, [r7, #16]
 8006da8:	3301      	adds	r3, #1
 8006daa:	613b      	str	r3, [r7, #16]
 8006dac:	693a      	ldr	r2, [r7, #16]
 8006dae:	683b      	ldr	r3, [r7, #0]
 8006db0:	429a      	cmp	r2, r3
 8006db2:	d102      	bne.n	8006dba <dir_alloc+0x64>
 8006db4:	e00c      	b.n	8006dd0 <dir_alloc+0x7a>
			} else {
				n = 0;				/* Not a free entry, restart to search */
 8006db6:	2300      	movs	r3, #0
 8006db8:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);	/* Next entry with table stretch enabled */
 8006dba:	2101      	movs	r1, #1
 8006dbc:	6878      	ldr	r0, [r7, #4]
 8006dbe:	f7ff ff24 	bl	8006c0a <dir_next>
 8006dc2:	4603      	mov	r3, r0
 8006dc4:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);
 8006dc6:	7dfb      	ldrb	r3, [r7, #23]
 8006dc8:	2b00      	cmp	r3, #0
 8006dca:	d0d7      	beq.n	8006d7c <dir_alloc+0x26>
 8006dcc:	e000      	b.n	8006dd0 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 8006dce:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 8006dd0:	7dfb      	ldrb	r3, [r7, #23]
 8006dd2:	2b04      	cmp	r3, #4
 8006dd4:	d101      	bne.n	8006dda <dir_alloc+0x84>
 8006dd6:	2307      	movs	r3, #7
 8006dd8:	75fb      	strb	r3, [r7, #23]
	return res;
 8006dda:	7dfb      	ldrb	r3, [r7, #23]
}
 8006ddc:	4618      	mov	r0, r3
 8006dde:	3718      	adds	r7, #24
 8006de0:	46bd      	mov	sp, r7
 8006de2:	bd80      	pop	{r7, pc}

08006de4 <ld_clust>:

static DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,			/* Pointer to the fs object */
	const BYTE* dir		/* Pointer to the key entry */
)
{
 8006de4:	b580      	push	{r7, lr}
 8006de6:	b084      	sub	sp, #16
 8006de8:	af00      	add	r7, sp, #0
 8006dea:	6078      	str	r0, [r7, #4]
 8006dec:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 8006dee:	683b      	ldr	r3, [r7, #0]
 8006df0:	331a      	adds	r3, #26
 8006df2:	4618      	mov	r0, r3
 8006df4:	f7ff f97a 	bl	80060ec <ld_word>
 8006df8:	4603      	mov	r3, r0
 8006dfa:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	781b      	ldrb	r3, [r3, #0]
 8006e00:	2b03      	cmp	r3, #3
 8006e02:	d109      	bne.n	8006e18 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 8006e04:	683b      	ldr	r3, [r7, #0]
 8006e06:	3314      	adds	r3, #20
 8006e08:	4618      	mov	r0, r3
 8006e0a:	f7ff f96f 	bl	80060ec <ld_word>
 8006e0e:	4603      	mov	r3, r0
 8006e10:	041b      	lsls	r3, r3, #16
 8006e12:	68fa      	ldr	r2, [r7, #12]
 8006e14:	4313      	orrs	r3, r2
 8006e16:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 8006e18:	68fb      	ldr	r3, [r7, #12]
}
 8006e1a:	4618      	mov	r0, r3
 8006e1c:	3710      	adds	r7, #16
 8006e1e:	46bd      	mov	sp, r7
 8006e20:	bd80      	pop	{r7, pc}

08006e22 <st_clust>:
static void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 8006e22:	b580      	push	{r7, lr}
 8006e24:	b084      	sub	sp, #16
 8006e26:	af00      	add	r7, sp, #0
 8006e28:	60f8      	str	r0, [r7, #12]
 8006e2a:	60b9      	str	r1, [r7, #8]
 8006e2c:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 8006e2e:	68bb      	ldr	r3, [r7, #8]
 8006e30:	331a      	adds	r3, #26
 8006e32:	687a      	ldr	r2, [r7, #4]
 8006e34:	b292      	uxth	r2, r2
 8006e36:	4611      	mov	r1, r2
 8006e38:	4618      	mov	r0, r3
 8006e3a:	f7ff f993 	bl	8006164 <st_word>
	if (fs->fs_type == FS_FAT32) {
 8006e3e:	68fb      	ldr	r3, [r7, #12]
 8006e40:	781b      	ldrb	r3, [r3, #0]
 8006e42:	2b03      	cmp	r3, #3
 8006e44:	d109      	bne.n	8006e5a <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 8006e46:	68bb      	ldr	r3, [r7, #8]
 8006e48:	f103 0214 	add.w	r2, r3, #20
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	0c1b      	lsrs	r3, r3, #16
 8006e50:	b29b      	uxth	r3, r3
 8006e52:	4619      	mov	r1, r3
 8006e54:	4610      	mov	r0, r2
 8006e56:	f7ff f985 	bl	8006164 <st_word>
	}
}
 8006e5a:	bf00      	nop
 8006e5c:	3710      	adds	r7, #16
 8006e5e:	46bd      	mov	sp, r7
 8006e60:	bd80      	pop	{r7, pc}

08006e62 <dir_find>:
/*-----------------------------------------------------------------------*/

static FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp					/* Pointer to the directory object with the file name */
)
{
 8006e62:	b580      	push	{r7, lr}
 8006e64:	b086      	sub	sp, #24
 8006e66:	af00      	add	r7, sp, #0
 8006e68:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	681b      	ldr	r3, [r3, #0]
 8006e6e:	613b      	str	r3, [r7, #16]
	BYTE c;
#if FF_USE_LFN
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 8006e70:	2100      	movs	r1, #0
 8006e72:	6878      	ldr	r0, [r7, #4]
 8006e74:	f7ff fe40 	bl	8006af8 <dir_sdi>
 8006e78:	4603      	mov	r3, r0
 8006e7a:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 8006e7c:	7dfb      	ldrb	r3, [r7, #23]
 8006e7e:	2b00      	cmp	r3, #0
 8006e80:	d001      	beq.n	8006e86 <dir_find+0x24>
 8006e82:	7dfb      	ldrb	r3, [r7, #23]
 8006e84:	e03e      	b.n	8006f04 <dir_find+0xa2>
	/* On the FAT/FAT32 volume */
#if FF_USE_LFN
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	699b      	ldr	r3, [r3, #24]
 8006e8a:	4619      	mov	r1, r3
 8006e8c:	6938      	ldr	r0, [r7, #16]
 8006e8e:	f7ff fa0e 	bl	80062ae <move_window>
 8006e92:	4603      	mov	r3, r0
 8006e94:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8006e96:	7dfb      	ldrb	r3, [r7, #23]
 8006e98:	2b00      	cmp	r3, #0
 8006e9a:	d12f      	bne.n	8006efc <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	69db      	ldr	r3, [r3, #28]
 8006ea0:	781b      	ldrb	r3, [r3, #0]
 8006ea2:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8006ea4:	7bfb      	ldrb	r3, [r7, #15]
 8006ea6:	2b00      	cmp	r3, #0
 8006ea8:	d102      	bne.n	8006eb0 <dir_find+0x4e>
 8006eaa:	2304      	movs	r3, #4
 8006eac:	75fb      	strb	r3, [r7, #23]
 8006eae:	e028      	b.n	8006f02 <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !memcmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	69db      	ldr	r3, [r3, #28]
 8006eb4:	330b      	adds	r3, #11
 8006eb6:	781b      	ldrb	r3, [r3, #0]
 8006eb8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006ebc:	b2da      	uxtb	r2, r3
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !memcmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	69db      	ldr	r3, [r3, #28]
 8006ec6:	330b      	adds	r3, #11
 8006ec8:	781b      	ldrb	r3, [r3, #0]
 8006eca:	f003 0308 	and.w	r3, r3, #8
 8006ece:	2b00      	cmp	r3, #0
 8006ed0:	d10a      	bne.n	8006ee8 <dir_find+0x86>
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	69d8      	ldr	r0, [r3, #28]
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	3320      	adds	r3, #32
 8006eda:	220b      	movs	r2, #11
 8006edc:	4619      	mov	r1, r3
 8006ede:	f00b ff7f 	bl	8012de0 <memcmp>
 8006ee2:	4603      	mov	r3, r0
 8006ee4:	2b00      	cmp	r3, #0
 8006ee6:	d00b      	beq.n	8006f00 <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 8006ee8:	2100      	movs	r1, #0
 8006eea:	6878      	ldr	r0, [r7, #4]
 8006eec:	f7ff fe8d 	bl	8006c0a <dir_next>
 8006ef0:	4603      	mov	r3, r0
 8006ef2:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 8006ef4:	7dfb      	ldrb	r3, [r7, #23]
 8006ef6:	2b00      	cmp	r3, #0
 8006ef8:	d0c5      	beq.n	8006e86 <dir_find+0x24>
 8006efa:	e002      	b.n	8006f02 <dir_find+0xa0>
		if (res != FR_OK) break;
 8006efc:	bf00      	nop
 8006efe:	e000      	b.n	8006f02 <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !memcmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 8006f00:	bf00      	nop

	return res;
 8006f02:	7dfb      	ldrb	r3, [r7, #23]
}
 8006f04:	4618      	mov	r0, r3
 8006f06:	3718      	adds	r7, #24
 8006f08:	46bd      	mov	sp, r7
 8006f0a:	bd80      	pop	{r7, pc}

08006f0c <dir_register>:
/*-----------------------------------------------------------------------*/

static FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp						/* Target directory with object name to be created */
)
{
 8006f0c:	b580      	push	{r7, lr}
 8006f0e:	b084      	sub	sp, #16
 8006f10:	af00      	add	r7, sp, #0
 8006f12:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	681b      	ldr	r3, [r3, #0]
 8006f18:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --n_ent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 8006f1a:	2101      	movs	r1, #1
 8006f1c:	6878      	ldr	r0, [r7, #4]
 8006f1e:	f7ff ff1a 	bl	8006d56 <dir_alloc>
 8006f22:	4603      	mov	r3, r0
 8006f24:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 8006f26:	7bfb      	ldrb	r3, [r7, #15]
 8006f28:	2b00      	cmp	r3, #0
 8006f2a:	d11c      	bne.n	8006f66 <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	699b      	ldr	r3, [r3, #24]
 8006f30:	4619      	mov	r1, r3
 8006f32:	68b8      	ldr	r0, [r7, #8]
 8006f34:	f7ff f9bb 	bl	80062ae <move_window>
 8006f38:	4603      	mov	r3, r0
 8006f3a:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8006f3c:	7bfb      	ldrb	r3, [r7, #15]
 8006f3e:	2b00      	cmp	r3, #0
 8006f40:	d111      	bne.n	8006f66 <dir_register+0x5a>
			memset(dp->dir, 0, SZDIRE);	/* Clean the entry */
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	69db      	ldr	r3, [r3, #28]
 8006f46:	2220      	movs	r2, #32
 8006f48:	2100      	movs	r1, #0
 8006f4a:	4618      	mov	r0, r3
 8006f4c:	f00b ff58 	bl	8012e00 <memset>
			memcpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	69d8      	ldr	r0, [r3, #28]
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	3320      	adds	r3, #32
 8006f58:	220b      	movs	r2, #11
 8006f5a:	4619      	mov	r1, r3
 8006f5c:	f00b ffd4 	bl	8012f08 <memcpy>
#if FF_USE_LFN
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 8006f60:	68bb      	ldr	r3, [r7, #8]
 8006f62:	2201      	movs	r2, #1
 8006f64:	711a      	strb	r2, [r3, #4]
		}
	}

	return res;
 8006f66:	7bfb      	ldrb	r3, [r7, #15]
}
 8006f68:	4618      	mov	r0, r3
 8006f6a:	3710      	adds	r7, #16
 8006f6c:	46bd      	mov	sp, r7
 8006f6e:	bd80      	pop	{r7, pc}

08006f70 <create_name>:

static FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,					/* Pointer to the directory object */
	const TCHAR** path			/* Pointer to pointer to the segment in the path string */
)
{
 8006f70:	b580      	push	{r7, lr}
 8006f72:	b08a      	sub	sp, #40	@ 0x28
 8006f74:	af00      	add	r7, sp, #0
 8006f76:	6078      	str	r0, [r7, #4]
 8006f78:	6039      	str	r1, [r7, #0]
	BYTE *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 8006f7a:	683b      	ldr	r3, [r7, #0]
 8006f7c:	681b      	ldr	r3, [r3, #0]
 8006f7e:	617b      	str	r3, [r7, #20]
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	3320      	adds	r3, #32
 8006f84:	613b      	str	r3, [r7, #16]
	memset(sfn, ' ', 11);
 8006f86:	220b      	movs	r2, #11
 8006f88:	2120      	movs	r1, #32
 8006f8a:	6938      	ldr	r0, [r7, #16]
 8006f8c:	f00b ff38 	bl	8012e00 <memset>
	si = i = 0; ni = 8;
 8006f90:	2300      	movs	r3, #0
 8006f92:	61bb      	str	r3, [r7, #24]
 8006f94:	69bb      	ldr	r3, [r7, #24]
 8006f96:	61fb      	str	r3, [r7, #28]
 8006f98:	2308      	movs	r3, #8
 8006f9a:	623b      	str	r3, [r7, #32]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];				/* Get a byte */
 8006f9c:	69fb      	ldr	r3, [r7, #28]
 8006f9e:	1c5a      	adds	r2, r3, #1
 8006fa0:	61fa      	str	r2, [r7, #28]
 8006fa2:	697a      	ldr	r2, [r7, #20]
 8006fa4:	4413      	add	r3, r2
 8006fa6:	781b      	ldrb	r3, [r3, #0]
 8006fa8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
		if (c <= ' ') break; 			/* Break if end of the path name */
 8006fac:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8006fb0:	2b20      	cmp	r3, #32
 8006fb2:	f240 8089 	bls.w	80070c8 <create_name+0x158>
		if (IsSeparator(c)) {			/* Break if a separator is found */
 8006fb6:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8006fba:	2b2f      	cmp	r3, #47	@ 0x2f
 8006fbc:	d007      	beq.n	8006fce <create_name+0x5e>
 8006fbe:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8006fc2:	2b5c      	cmp	r3, #92	@ 0x5c
 8006fc4:	d110      	bne.n	8006fe8 <create_name+0x78>
			while (IsSeparator(p[si])) si++;	/* Skip duplicated separator if exist */
 8006fc6:	e002      	b.n	8006fce <create_name+0x5e>
 8006fc8:	69fb      	ldr	r3, [r7, #28]
 8006fca:	3301      	adds	r3, #1
 8006fcc:	61fb      	str	r3, [r7, #28]
 8006fce:	697a      	ldr	r2, [r7, #20]
 8006fd0:	69fb      	ldr	r3, [r7, #28]
 8006fd2:	4413      	add	r3, r2
 8006fd4:	781b      	ldrb	r3, [r3, #0]
 8006fd6:	2b2f      	cmp	r3, #47	@ 0x2f
 8006fd8:	d0f6      	beq.n	8006fc8 <create_name+0x58>
 8006fda:	697a      	ldr	r2, [r7, #20]
 8006fdc:	69fb      	ldr	r3, [r7, #28]
 8006fde:	4413      	add	r3, r2
 8006fe0:	781b      	ldrb	r3, [r3, #0]
 8006fe2:	2b5c      	cmp	r3, #92	@ 0x5c
 8006fe4:	d0f0      	beq.n	8006fc8 <create_name+0x58>
			break;
 8006fe6:	e070      	b.n	80070ca <create_name+0x15a>
		}
		if (c == '.' || i >= ni) {		/* End of body or field overflow? */
 8006fe8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8006fec:	2b2e      	cmp	r3, #46	@ 0x2e
 8006fee:	d003      	beq.n	8006ff8 <create_name+0x88>
 8006ff0:	69ba      	ldr	r2, [r7, #24]
 8006ff2:	6a3b      	ldr	r3, [r7, #32]
 8006ff4:	429a      	cmp	r2, r3
 8006ff6:	d30d      	bcc.n	8007014 <create_name+0xa4>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Field overflow or invalid dot? */
 8006ff8:	6a3b      	ldr	r3, [r7, #32]
 8006ffa:	2b0b      	cmp	r3, #11
 8006ffc:	d003      	beq.n	8007006 <create_name+0x96>
 8006ffe:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8007002:	2b2e      	cmp	r3, #46	@ 0x2e
 8007004:	d001      	beq.n	800700a <create_name+0x9a>
 8007006:	2306      	movs	r3, #6
 8007008:	e081      	b.n	800710e <create_name+0x19e>
			i = 8; ni = 11;				/* Enter file extension field */
 800700a:	2308      	movs	r3, #8
 800700c:	61bb      	str	r3, [r7, #24]
 800700e:	230b      	movs	r3, #11
 8007010:	623b      	str	r3, [r7, #32]
			continue;
 8007012:	e058      	b.n	80070c6 <create_name+0x156>
#if FF_CODE_PAGE == 0
		if (ExCvt && c >= 0x80) {		/* Is SBC extended character? */
			c = ExCvt[c & 0x7F];		/* To upper SBC extended character */
		}
#elif FF_CODE_PAGE < 900
		if (c >= 0x80) {				/* Is SBC extended character? */
 8007014:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8007018:	2b00      	cmp	r3, #0
 800701a:	da07      	bge.n	800702c <create_name+0xbc>
			c = ExCvt[c & 0x7F];		/* To upper SBC extended character */
 800701c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8007020:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007024:	4a3c      	ldr	r2, [pc, #240]	@ (8007118 <create_name+0x1a8>)
 8007026:	5cd3      	ldrb	r3, [r2, r3]
 8007028:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
		}
#endif
		if (dbc_1st(c)) {				/* Check if it is a DBC 1st byte */
 800702c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8007030:	4618      	mov	r0, r3
 8007032:	f7ff f8de 	bl	80061f2 <dbc_1st>
 8007036:	4603      	mov	r3, r0
 8007038:	2b00      	cmp	r3, #0
 800703a:	d024      	beq.n	8007086 <create_name+0x116>
			d = (BYTE)p[si++];			/* Get 2nd byte */
 800703c:	69fb      	ldr	r3, [r7, #28]
 800703e:	1c5a      	adds	r2, r3, #1
 8007040:	61fa      	str	r2, [r7, #28]
 8007042:	697a      	ldr	r2, [r7, #20]
 8007044:	4413      	add	r3, r2
 8007046:	781b      	ldrb	r3, [r3, #0]
 8007048:	73fb      	strb	r3, [r7, #15]
			if (!dbc_2nd(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
 800704a:	7bfb      	ldrb	r3, [r7, #15]
 800704c:	4618      	mov	r0, r3
 800704e:	f7ff f8e1 	bl	8006214 <dbc_2nd>
 8007052:	4603      	mov	r3, r0
 8007054:	2b00      	cmp	r3, #0
 8007056:	d004      	beq.n	8007062 <create_name+0xf2>
 8007058:	6a3b      	ldr	r3, [r7, #32]
 800705a:	3b01      	subs	r3, #1
 800705c:	69ba      	ldr	r2, [r7, #24]
 800705e:	429a      	cmp	r2, r3
 8007060:	d301      	bcc.n	8007066 <create_name+0xf6>
 8007062:	2306      	movs	r3, #6
 8007064:	e053      	b.n	800710e <create_name+0x19e>
			sfn[i++] = c;
 8007066:	69bb      	ldr	r3, [r7, #24]
 8007068:	1c5a      	adds	r2, r3, #1
 800706a:	61ba      	str	r2, [r7, #24]
 800706c:	693a      	ldr	r2, [r7, #16]
 800706e:	4413      	add	r3, r2
 8007070:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 8007074:	701a      	strb	r2, [r3, #0]
			sfn[i++] = d;
 8007076:	69bb      	ldr	r3, [r7, #24]
 8007078:	1c5a      	adds	r2, r3, #1
 800707a:	61ba      	str	r2, [r7, #24]
 800707c:	693a      	ldr	r2, [r7, #16]
 800707e:	4413      	add	r3, r2
 8007080:	7bfa      	ldrb	r2, [r7, #15]
 8007082:	701a      	strb	r2, [r3, #0]
 8007084:	e78a      	b.n	8006f9c <create_name+0x2c>
		} else {						/* SBC */
			if (strchr("*+,:;<=>[]|\"\?\x7F", (int)c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 8007086:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800708a:	4619      	mov	r1, r3
 800708c:	4823      	ldr	r0, [pc, #140]	@ (800711c <create_name+0x1ac>)
 800708e:	f00b febf 	bl	8012e10 <strchr>
 8007092:	4603      	mov	r3, r0
 8007094:	2b00      	cmp	r3, #0
 8007096:	d001      	beq.n	800709c <create_name+0x12c>
 8007098:	2306      	movs	r3, #6
 800709a:	e038      	b.n	800710e <create_name+0x19e>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 800709c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80070a0:	2b60      	cmp	r3, #96	@ 0x60
 80070a2:	d908      	bls.n	80070b6 <create_name+0x146>
 80070a4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80070a8:	2b7a      	cmp	r3, #122	@ 0x7a
 80070aa:	d804      	bhi.n	80070b6 <create_name+0x146>
 80070ac:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80070b0:	3b20      	subs	r3, #32
 80070b2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			sfn[i++] = c;
 80070b6:	69bb      	ldr	r3, [r7, #24]
 80070b8:	1c5a      	adds	r2, r3, #1
 80070ba:	61ba      	str	r2, [r7, #24]
 80070bc:	693a      	ldr	r2, [r7, #16]
 80070be:	4413      	add	r3, r2
 80070c0:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 80070c4:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];				/* Get a byte */
 80070c6:	e769      	b.n	8006f9c <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 80070c8:	bf00      	nop
		}
	}
	*path = &p[si];						/* Return pointer to the next segment */
 80070ca:	697a      	ldr	r2, [r7, #20]
 80070cc:	69fb      	ldr	r3, [r7, #28]
 80070ce:	441a      	add	r2, r3
 80070d0:	683b      	ldr	r3, [r7, #0]
 80070d2:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 80070d4:	69bb      	ldr	r3, [r7, #24]
 80070d6:	2b00      	cmp	r3, #0
 80070d8:	d101      	bne.n	80070de <create_name+0x16e>
 80070da:	2306      	movs	r3, #6
 80070dc:	e017      	b.n	800710e <create_name+0x19e>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 80070de:	693b      	ldr	r3, [r7, #16]
 80070e0:	781b      	ldrb	r3, [r3, #0]
 80070e2:	2be5      	cmp	r3, #229	@ 0xe5
 80070e4:	d102      	bne.n	80070ec <create_name+0x17c>
 80070e6:	693b      	ldr	r3, [r7, #16]
 80070e8:	2205      	movs	r2, #5
 80070ea:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ' || p[si] <= ' ') ? NS_LAST : 0;	/* Set last segment flag if end of the path */
 80070ec:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80070f0:	2b20      	cmp	r3, #32
 80070f2:	d905      	bls.n	8007100 <create_name+0x190>
 80070f4:	697a      	ldr	r2, [r7, #20]
 80070f6:	69fb      	ldr	r3, [r7, #28]
 80070f8:	4413      	add	r3, r2
 80070fa:	781b      	ldrb	r3, [r3, #0]
 80070fc:	2b20      	cmp	r3, #32
 80070fe:	d801      	bhi.n	8007104 <create_name+0x194>
 8007100:	2204      	movs	r2, #4
 8007102:	e000      	b.n	8007106 <create_name+0x196>
 8007104:	2200      	movs	r2, #0
 8007106:	693b      	ldr	r3, [r7, #16]
 8007108:	330b      	adds	r3, #11
 800710a:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 800710c:	2300      	movs	r3, #0
#endif /* FF_USE_LFN */
}
 800710e:	4618      	mov	r0, r3
 8007110:	3728      	adds	r7, #40	@ 0x28
 8007112:	46bd      	mov	sp, r7
 8007114:	bd80      	pop	{r7, pc}
 8007116:	bf00      	nop
 8007118:	08014410 	.word	0x08014410
 800711c:	0801436c 	.word	0x0801436c

08007120 <follow_path>:

static FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,					/* Directory object to return last directory and found object */
	const TCHAR* path			/* Full-path string to find a file or directory */
)
{
 8007120:	b580      	push	{r7, lr}
 8007122:	b086      	sub	sp, #24
 8007124:	af00      	add	r7, sp, #0
 8007126:	6078      	str	r0, [r7, #4]
 8007128:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	FATFS *fs = dp->obj.fs;
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	681b      	ldr	r3, [r3, #0]
 800712e:	613b      	str	r3, [r7, #16]
	if (!IsSeparator(*path) && (FF_STR_VOLUME_ID != 2 || !IsTerminator(*path))) {	/* Without heading separator */
		dp->obj.sclust = fs->cdir;			/* Start at the current directory */
	} else
#endif
	{										/* With heading separator */
		while (IsSeparator(*path)) path++;	/* Strip separators */
 8007130:	e002      	b.n	8007138 <follow_path+0x18>
 8007132:	683b      	ldr	r3, [r7, #0]
 8007134:	3301      	adds	r3, #1
 8007136:	603b      	str	r3, [r7, #0]
 8007138:	683b      	ldr	r3, [r7, #0]
 800713a:	781b      	ldrb	r3, [r3, #0]
 800713c:	2b2f      	cmp	r3, #47	@ 0x2f
 800713e:	d0f8      	beq.n	8007132 <follow_path+0x12>
 8007140:	683b      	ldr	r3, [r7, #0]
 8007142:	781b      	ldrb	r3, [r3, #0]
 8007144:	2b5c      	cmp	r3, #92	@ 0x5c
 8007146:	d0f4      	beq.n	8007132 <follow_path+0x12>
		dp->obj.sclust = 0;					/* Start from the root directory */
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	2200      	movs	r2, #0
 800714c:	609a      	str	r2, [r3, #8]
		dp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 800714e:	683b      	ldr	r3, [r7, #0]
 8007150:	781b      	ldrb	r3, [r3, #0]
 8007152:	2b1f      	cmp	r3, #31
 8007154:	d80a      	bhi.n	800716c <follow_path+0x4c>
		dp->fn[NSFLAG] = NS_NONAME;
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	2280      	movs	r2, #128	@ 0x80
 800715a:	f883 202b 	strb.w	r2, [r3, #43]	@ 0x2b
		res = dir_sdi(dp, 0);
 800715e:	2100      	movs	r1, #0
 8007160:	6878      	ldr	r0, [r7, #4]
 8007162:	f7ff fcc9 	bl	8006af8 <dir_sdi>
 8007166:	4603      	mov	r3, r0
 8007168:	75fb      	strb	r3, [r7, #23]
 800716a:	e048      	b.n	80071fe <follow_path+0xde>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800716c:	463b      	mov	r3, r7
 800716e:	4619      	mov	r1, r3
 8007170:	6878      	ldr	r0, [r7, #4]
 8007172:	f7ff fefd 	bl	8006f70 <create_name>
 8007176:	4603      	mov	r3, r0
 8007178:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800717a:	7dfb      	ldrb	r3, [r7, #23]
 800717c:	2b00      	cmp	r3, #0
 800717e:	d139      	bne.n	80071f4 <follow_path+0xd4>
			res = dir_find(dp);				/* Find an object with the segment name */
 8007180:	6878      	ldr	r0, [r7, #4]
 8007182:	f7ff fe6e 	bl	8006e62 <dir_find>
 8007186:	4603      	mov	r3, r0
 8007188:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	f893 302b 	ldrb.w	r3, [r3, #43]	@ 0x2b
 8007190:	73fb      	strb	r3, [r7, #15]
			if (res != FR_OK) {				/* Failed to find the object */
 8007192:	7dfb      	ldrb	r3, [r7, #23]
 8007194:	2b00      	cmp	r3, #0
 8007196:	d00a      	beq.n	80071ae <follow_path+0x8e>
				if (res == FR_NO_FILE) {	/* Object is not found */
 8007198:	7dfb      	ldrb	r3, [r7, #23]
 800719a:	2b04      	cmp	r3, #4
 800719c:	d12c      	bne.n	80071f8 <follow_path+0xd8>
					if (FF_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800719e:	7bfb      	ldrb	r3, [r7, #15]
 80071a0:	f003 0304 	and.w	r3, r3, #4
 80071a4:	2b00      	cmp	r3, #0
 80071a6:	d127      	bne.n	80071f8 <follow_path+0xd8>
 80071a8:	2305      	movs	r3, #5
 80071aa:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 80071ac:	e024      	b.n	80071f8 <follow_path+0xd8>
			}
			if (ns & NS_LAST) break;		/* Last segment matched. Function completed. */
 80071ae:	7bfb      	ldrb	r3, [r7, #15]
 80071b0:	f003 0304 	and.w	r3, r3, #4
 80071b4:	2b00      	cmp	r3, #0
 80071b6:	d121      	bne.n	80071fc <follow_path+0xdc>
			/* Get into the sub-directory */
			if (!(dp->obj.attr & AM_DIR)) {	/* It is not a sub-directory and cannot follow */
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	799b      	ldrb	r3, [r3, #6]
 80071bc:	f003 0310 	and.w	r3, r3, #16
 80071c0:	2b00      	cmp	r3, #0
 80071c2:	d102      	bne.n	80071ca <follow_path+0xaa>
				res = FR_NO_PATH; break;
 80071c4:	2305      	movs	r3, #5
 80071c6:	75fb      	strb	r3, [r7, #23]
 80071c8:	e019      	b.n	80071fe <follow_path+0xde>
				dp->obj.c_ofs = dp->blk_ofs;
				init_alloc_info(fs, &dp->obj);	/* Open next directory */
			} else
#endif
			{
				dp->obj.sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 80071ca:	693b      	ldr	r3, [r7, #16]
 80071cc:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	691b      	ldr	r3, [r3, #16]
 80071d4:	693a      	ldr	r2, [r7, #16]
 80071d6:	8992      	ldrh	r2, [r2, #12]
 80071d8:	fbb3 f0f2 	udiv	r0, r3, r2
 80071dc:	fb00 f202 	mul.w	r2, r0, r2
 80071e0:	1a9b      	subs	r3, r3, r2
 80071e2:	440b      	add	r3, r1
 80071e4:	4619      	mov	r1, r3
 80071e6:	6938      	ldr	r0, [r7, #16]
 80071e8:	f7ff fdfc 	bl	8006de4 <ld_clust>
 80071ec:	4602      	mov	r2, r0
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 80071f2:	e7bb      	b.n	800716c <follow_path+0x4c>
			if (res != FR_OK) break;
 80071f4:	bf00      	nop
 80071f6:	e002      	b.n	80071fe <follow_path+0xde>
				break;
 80071f8:	bf00      	nop
 80071fa:	e000      	b.n	80071fe <follow_path+0xde>
			if (ns & NS_LAST) break;		/* Last segment matched. Function completed. */
 80071fc:	bf00      	nop
			}
		}
	}

	return res;
 80071fe:	7dfb      	ldrb	r3, [r7, #23]
}
 8007200:	4618      	mov	r0, r3
 8007202:	3718      	adds	r7, #24
 8007204:	46bd      	mov	sp, r7
 8007206:	bd80      	pop	{r7, pc}

08007208 <get_ldnumber>:
/*-----------------------------------------------------------------------*/

static int get_ldnumber (	/* Returns logical drive number (-1:invalid drive number or null pointer) */
	const TCHAR** path		/* Pointer to pointer to the path name */
)
{
 8007208:	b480      	push	{r7}
 800720a:	b08b      	sub	sp, #44	@ 0x2c
 800720c:	af00      	add	r7, sp, #0
 800720e:	6078      	str	r0, [r7, #4]
	const TCHAR *tp;
	const TCHAR *tt;
	TCHAR tc;
	int i;
	int vol = -1;
 8007210:	f04f 33ff 	mov.w	r3, #4294967295
 8007214:	617b      	str	r3, [r7, #20]
#if FF_STR_VOLUME_ID		/* Find string volume ID */
	const char *sp;
	char c;
#endif

	tt = tp = *path;
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	681b      	ldr	r3, [r3, #0]
 800721a:	627b      	str	r3, [r7, #36]	@ 0x24
 800721c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800721e:	623b      	str	r3, [r7, #32]
	if (!tp) return vol;	/* Invalid path name? */
 8007220:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007222:	2b00      	cmp	r3, #0
 8007224:	d101      	bne.n	800722a <get_ldnumber+0x22>
 8007226:	697b      	ldr	r3, [r7, #20]
 8007228:	e080      	b.n	800732c <get_ldnumber+0x124>
	do {					/* Find a colon in the path */
		tc = *tt++;
 800722a:	6a3b      	ldr	r3, [r7, #32]
 800722c:	1c5a      	adds	r2, r3, #1
 800722e:	623a      	str	r2, [r7, #32]
 8007230:	781b      	ldrb	r3, [r3, #0]
 8007232:	77fb      	strb	r3, [r7, #31]
	} while (!IsTerminator(tc) && tc != ':');
 8007234:	7ffb      	ldrb	r3, [r7, #31]
 8007236:	2b20      	cmp	r3, #32
 8007238:	d902      	bls.n	8007240 <get_ldnumber+0x38>
 800723a:	7ffb      	ldrb	r3, [r7, #31]
 800723c:	2b3a      	cmp	r3, #58	@ 0x3a
 800723e:	d1f4      	bne.n	800722a <get_ldnumber+0x22>

	if (tc == ':') {	/* DOS/Windows style volume ID? */
 8007240:	7ffb      	ldrb	r3, [r7, #31]
 8007242:	2b3a      	cmp	r3, #58	@ 0x3a
 8007244:	d11c      	bne.n	8007280 <get_ldnumber+0x78>
		i = FF_VOLUMES;
 8007246:	2302      	movs	r3, #2
 8007248:	61bb      	str	r3, [r7, #24]
		if (IsDigit(*tp) && tp + 2 == tt) {	/* Is there a numeric volume ID + colon? */
 800724a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800724c:	781b      	ldrb	r3, [r3, #0]
 800724e:	2b2f      	cmp	r3, #47	@ 0x2f
 8007250:	d90c      	bls.n	800726c <get_ldnumber+0x64>
 8007252:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007254:	781b      	ldrb	r3, [r3, #0]
 8007256:	2b39      	cmp	r3, #57	@ 0x39
 8007258:	d808      	bhi.n	800726c <get_ldnumber+0x64>
 800725a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800725c:	3302      	adds	r3, #2
 800725e:	6a3a      	ldr	r2, [r7, #32]
 8007260:	429a      	cmp	r2, r3
 8007262:	d103      	bne.n	800726c <get_ldnumber+0x64>
			i = (int)*tp - '0';	/* Get the LD number */
 8007264:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007266:	781b      	ldrb	r3, [r3, #0]
 8007268:	3b30      	subs	r3, #48	@ 0x30
 800726a:	61bb      	str	r3, [r7, #24]
					if (IsLower(tc)) tc -= 0x20;
				} while (c && (TCHAR)c == tc);
			} while ((c || tp != tt) && ++i < FF_VOLUMES);	/* Repeat for each id until pattern match */
		}
#endif
		if (i < FF_VOLUMES) {	/* If a volume ID is found, get the drive number and strip it */
 800726c:	69bb      	ldr	r3, [r7, #24]
 800726e:	2b01      	cmp	r3, #1
 8007270:	dc04      	bgt.n	800727c <get_ldnumber+0x74>
			vol = i;		/* Drive number */
 8007272:	69bb      	ldr	r3, [r7, #24]
 8007274:	617b      	str	r3, [r7, #20]
			*path = tt;		/* Snip the drive prefix off */
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	6a3a      	ldr	r2, [r7, #32]
 800727a:	601a      	str	r2, [r3, #0]
		}
		return vol;
 800727c:	697b      	ldr	r3, [r7, #20]
 800727e:	e055      	b.n	800732c <get_ldnumber+0x124>
	}
#if FF_STR_VOLUME_ID == 2		/* Unix style volume ID is enabled */
	if (*tp == '/') {			/* Is there a volume ID? */
 8007280:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007282:	781b      	ldrb	r3, [r3, #0]
 8007284:	2b2f      	cmp	r3, #47	@ 0x2f
 8007286:	d14e      	bne.n	8007326 <get_ldnumber+0x11e>
		while (*(tp + 1) == '/') tp++;	/* Skip duplicated separator */
 8007288:	e002      	b.n	8007290 <get_ldnumber+0x88>
 800728a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800728c:	3301      	adds	r3, #1
 800728e:	627b      	str	r3, [r7, #36]	@ 0x24
 8007290:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007292:	3301      	adds	r3, #1
 8007294:	781b      	ldrb	r3, [r3, #0]
 8007296:	2b2f      	cmp	r3, #47	@ 0x2f
 8007298:	d0f7      	beq.n	800728a <get_ldnumber+0x82>
		i = 0;
 800729a:	2300      	movs	r3, #0
 800729c:	61bb      	str	r3, [r7, #24]
		do {
			tt = tp; sp = VolumeStr[i]; /* Path name and this string volume ID */
 800729e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80072a0:	623b      	str	r3, [r7, #32]
 80072a2:	4a25      	ldr	r2, [pc, #148]	@ (8007338 <get_ldnumber+0x130>)
 80072a4:	69bb      	ldr	r3, [r7, #24]
 80072a6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80072aa:	613b      	str	r3, [r7, #16]
			do {	/* Compare the volume ID with path name */
				c = *sp++; tc = *(++tt);
 80072ac:	693b      	ldr	r3, [r7, #16]
 80072ae:	1c5a      	adds	r2, r3, #1
 80072b0:	613a      	str	r2, [r7, #16]
 80072b2:	781b      	ldrb	r3, [r3, #0]
 80072b4:	73fb      	strb	r3, [r7, #15]
 80072b6:	6a3b      	ldr	r3, [r7, #32]
 80072b8:	3301      	adds	r3, #1
 80072ba:	623b      	str	r3, [r7, #32]
 80072bc:	6a3b      	ldr	r3, [r7, #32]
 80072be:	781b      	ldrb	r3, [r3, #0]
 80072c0:	77fb      	strb	r3, [r7, #31]
				if (IsLower(c)) c -= 0x20;
 80072c2:	7bfb      	ldrb	r3, [r7, #15]
 80072c4:	2b60      	cmp	r3, #96	@ 0x60
 80072c6:	d905      	bls.n	80072d4 <get_ldnumber+0xcc>
 80072c8:	7bfb      	ldrb	r3, [r7, #15]
 80072ca:	2b7a      	cmp	r3, #122	@ 0x7a
 80072cc:	d802      	bhi.n	80072d4 <get_ldnumber+0xcc>
 80072ce:	7bfb      	ldrb	r3, [r7, #15]
 80072d0:	3b20      	subs	r3, #32
 80072d2:	73fb      	strb	r3, [r7, #15]
				if (IsLower(tc)) tc -= 0x20;
 80072d4:	7ffb      	ldrb	r3, [r7, #31]
 80072d6:	2b60      	cmp	r3, #96	@ 0x60
 80072d8:	d905      	bls.n	80072e6 <get_ldnumber+0xde>
 80072da:	7ffb      	ldrb	r3, [r7, #31]
 80072dc:	2b7a      	cmp	r3, #122	@ 0x7a
 80072de:	d802      	bhi.n	80072e6 <get_ldnumber+0xde>
 80072e0:	7ffb      	ldrb	r3, [r7, #31]
 80072e2:	3b20      	subs	r3, #32
 80072e4:	77fb      	strb	r3, [r7, #31]
			} while (c && (TCHAR)c == tc);
 80072e6:	7bfb      	ldrb	r3, [r7, #15]
 80072e8:	2b00      	cmp	r3, #0
 80072ea:	d003      	beq.n	80072f4 <get_ldnumber+0xec>
 80072ec:	7bfa      	ldrb	r2, [r7, #15]
 80072ee:	7ffb      	ldrb	r3, [r7, #31]
 80072f0:	429a      	cmp	r2, r3
 80072f2:	d0db      	beq.n	80072ac <get_ldnumber+0xa4>
		} while ((c || (tc != '/' && !IsTerminator(tc))) && ++i < FF_VOLUMES);	/* Repeat for each ID until pattern match */
 80072f4:	7bfb      	ldrb	r3, [r7, #15]
 80072f6:	2b00      	cmp	r3, #0
 80072f8:	d105      	bne.n	8007306 <get_ldnumber+0xfe>
 80072fa:	7ffb      	ldrb	r3, [r7, #31]
 80072fc:	2b2f      	cmp	r3, #47	@ 0x2f
 80072fe:	d008      	beq.n	8007312 <get_ldnumber+0x10a>
 8007300:	7ffb      	ldrb	r3, [r7, #31]
 8007302:	2b20      	cmp	r3, #32
 8007304:	d905      	bls.n	8007312 <get_ldnumber+0x10a>
 8007306:	69bb      	ldr	r3, [r7, #24]
 8007308:	3301      	adds	r3, #1
 800730a:	61bb      	str	r3, [r7, #24]
 800730c:	69bb      	ldr	r3, [r7, #24]
 800730e:	2b01      	cmp	r3, #1
 8007310:	ddc5      	ble.n	800729e <get_ldnumber+0x96>
		if (i < FF_VOLUMES) {	/* If a volume ID is found, get the drive number and strip it */
 8007312:	69bb      	ldr	r3, [r7, #24]
 8007314:	2b01      	cmp	r3, #1
 8007316:	dc04      	bgt.n	8007322 <get_ldnumber+0x11a>
			vol = i;		/* Drive number */
 8007318:	69bb      	ldr	r3, [r7, #24]
 800731a:	617b      	str	r3, [r7, #20]
			*path = tt;		/* Snip the drive prefix off */
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	6a3a      	ldr	r2, [r7, #32]
 8007320:	601a      	str	r2, [r3, #0]
		}
		return vol;
 8007322:	697b      	ldr	r3, [r7, #20]
 8007324:	e002      	b.n	800732c <get_ldnumber+0x124>
#endif
	/* No drive prefix is found */
#if FF_FS_RPATH != 0
	vol = CurrVol;	/* Default drive is current drive */
#else
	vol = 0;		/* Default drive is 0 */
 8007326:	2300      	movs	r3, #0
 8007328:	617b      	str	r3, [r7, #20]
#endif
	return vol;		/* Return the default drive */
 800732a:	697b      	ldr	r3, [r7, #20]
}
 800732c:	4618      	mov	r0, r3
 800732e:	372c      	adds	r7, #44	@ 0x2c
 8007330:	46bd      	mov	sp, r7
 8007332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007336:	4770      	bx	lr
 8007338:	20000004 	.word	0x20000004

0800733c <check_fs>:

static UINT check_fs (	/* 0:FAT/FAT32 VBR, 1:exFAT VBR, 2:Not FAT and valid BS, 3:Not FAT and invalid BS, 4:Disk error */
	FATFS* fs,			/* Filesystem object */
	LBA_t sect			/* Sector to load and check if it is an FAT-VBR or not */
)
{
 800733c:	b580      	push	{r7, lr}
 800733e:	b084      	sub	sp, #16
 8007340:	af00      	add	r7, sp, #0
 8007342:	6078      	str	r0, [r7, #4]
 8007344:	6039      	str	r1, [r7, #0]
	WORD w, sign;
	BYTE b;


	fs->wflag = 0; fs->winsect = (LBA_t)0 - 1;		/* Invaidate window */
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	2200      	movs	r2, #0
 800734a:	711a      	strb	r2, [r3, #4]
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	f04f 32ff 	mov.w	r2, #4294967295
 8007352:	631a      	str	r2, [r3, #48]	@ 0x30
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load the boot sector */
 8007354:	6839      	ldr	r1, [r7, #0]
 8007356:	6878      	ldr	r0, [r7, #4]
 8007358:	f7fe ffa9 	bl	80062ae <move_window>
 800735c:	4603      	mov	r3, r0
 800735e:	2b00      	cmp	r3, #0
 8007360:	d001      	beq.n	8007366 <check_fs+0x2a>
 8007362:	2304      	movs	r3, #4
 8007364:	e088      	b.n	8007478 <check_fs+0x13c>
	sign = ld_word(fs->win + BS_55AA);
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	3334      	adds	r3, #52	@ 0x34
 800736a:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 800736e:	4618      	mov	r0, r3
 8007370:	f7fe febc 	bl	80060ec <ld_word>
 8007374:	4603      	mov	r3, r0
 8007376:	81fb      	strh	r3, [r7, #14]
#if FF_FS_EXFAT
	if (sign == 0xAA55 && !memcmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;	/* It is an exFAT VBR */
#endif
	b = fs->win[BS_JmpBoot];
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800737e:	737b      	strb	r3, [r7, #13]
	if (b == 0xEB || b == 0xE9 || b == 0xE8) {	/* Valid JumpBoot code? (short jump, near jump or near call) */
 8007380:	7b7b      	ldrb	r3, [r7, #13]
 8007382:	2beb      	cmp	r3, #235	@ 0xeb
 8007384:	d005      	beq.n	8007392 <check_fs+0x56>
 8007386:	7b7b      	ldrb	r3, [r7, #13]
 8007388:	2be9      	cmp	r3, #233	@ 0xe9
 800738a:	d002      	beq.n	8007392 <check_fs+0x56>
 800738c:	7b7b      	ldrb	r3, [r7, #13]
 800738e:	2be8      	cmp	r3, #232	@ 0xe8
 8007390:	d16a      	bne.n	8007468 <check_fs+0x12c>
		if (sign == 0xAA55 && !memcmp(fs->win + BS_FilSysType32, "FAT32   ", 8)) {
 8007392:	89fb      	ldrh	r3, [r7, #14]
 8007394:	f64a 2255 	movw	r2, #43605	@ 0xaa55
 8007398:	4293      	cmp	r3, r2
 800739a:	d10c      	bne.n	80073b6 <check_fs+0x7a>
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	3334      	adds	r3, #52	@ 0x34
 80073a0:	3352      	adds	r3, #82	@ 0x52
 80073a2:	2208      	movs	r2, #8
 80073a4:	4936      	ldr	r1, [pc, #216]	@ (8007480 <check_fs+0x144>)
 80073a6:	4618      	mov	r0, r3
 80073a8:	f00b fd1a 	bl	8012de0 <memcmp>
 80073ac:	4603      	mov	r3, r0
 80073ae:	2b00      	cmp	r3, #0
 80073b0:	d101      	bne.n	80073b6 <check_fs+0x7a>
			return 0;	/* It is an FAT32 VBR */
 80073b2:	2300      	movs	r3, #0
 80073b4:	e060      	b.n	8007478 <check_fs+0x13c>
		}
		/* FAT volumes formatted with early MS-DOS lack BS_55AA and BS_FilSysType, so FAT VBR needs to be identified without them. */
		w = ld_word(fs->win + BPB_BytsPerSec);
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	3334      	adds	r3, #52	@ 0x34
 80073ba:	330b      	adds	r3, #11
 80073bc:	4618      	mov	r0, r3
 80073be:	f7fe fe95 	bl	80060ec <ld_word>
 80073c2:	4603      	mov	r3, r0
 80073c4:	817b      	strh	r3, [r7, #10]
		b = fs->win[BPB_SecPerClus];
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80073cc:	737b      	strb	r3, [r7, #13]
		if ((w & (w - 1)) == 0 && w >= FF_MIN_SS && w <= FF_MAX_SS	/* Properness of sector size (512-4096 and 2^n) */
 80073ce:	897a      	ldrh	r2, [r7, #10]
 80073d0:	897b      	ldrh	r3, [r7, #10]
 80073d2:	3b01      	subs	r3, #1
 80073d4:	4013      	ands	r3, r2
 80073d6:	2b00      	cmp	r3, #0
 80073d8:	d146      	bne.n	8007468 <check_fs+0x12c>
 80073da:	897b      	ldrh	r3, [r7, #10]
 80073dc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80073e0:	d342      	bcc.n	8007468 <check_fs+0x12c>
 80073e2:	897b      	ldrh	r3, [r7, #10]
 80073e4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80073e8:	d83e      	bhi.n	8007468 <check_fs+0x12c>
			&& b != 0 && (b & (b - 1)) == 0				/* Properness of cluster size (2^n) */
 80073ea:	7b7b      	ldrb	r3, [r7, #13]
 80073ec:	2b00      	cmp	r3, #0
 80073ee:	d03b      	beq.n	8007468 <check_fs+0x12c>
 80073f0:	7b7a      	ldrb	r2, [r7, #13]
 80073f2:	7b7b      	ldrb	r3, [r7, #13]
 80073f4:	3b01      	subs	r3, #1
 80073f6:	4013      	ands	r3, r2
 80073f8:	2b00      	cmp	r3, #0
 80073fa:	d135      	bne.n	8007468 <check_fs+0x12c>
			&& ld_word(fs->win + BPB_RsvdSecCnt) != 0	/* Properness of reserved sectors (MNBZ) */
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	3334      	adds	r3, #52	@ 0x34
 8007400:	330e      	adds	r3, #14
 8007402:	4618      	mov	r0, r3
 8007404:	f7fe fe72 	bl	80060ec <ld_word>
 8007408:	4603      	mov	r3, r0
 800740a:	2b00      	cmp	r3, #0
 800740c:	d02c      	beq.n	8007468 <check_fs+0x12c>
			&& (UINT)fs->win[BPB_NumFATs] - 1 <= 1		/* Properness of FATs (1 or 2) */
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8007414:	3b01      	subs	r3, #1
 8007416:	2b01      	cmp	r3, #1
 8007418:	d826      	bhi.n	8007468 <check_fs+0x12c>
			&& ld_word(fs->win + BPB_RootEntCnt) != 0	/* Properness of root dir entries (MNBZ) */
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	3334      	adds	r3, #52	@ 0x34
 800741e:	3311      	adds	r3, #17
 8007420:	4618      	mov	r0, r3
 8007422:	f7fe fe63 	bl	80060ec <ld_word>
 8007426:	4603      	mov	r3, r0
 8007428:	2b00      	cmp	r3, #0
 800742a:	d01d      	beq.n	8007468 <check_fs+0x12c>
			&& (ld_word(fs->win + BPB_TotSec16) >= 128 || ld_dword(fs->win + BPB_TotSec32) >= 0x10000)	/* Properness of volume sectors (>=128) */
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	3334      	adds	r3, #52	@ 0x34
 8007430:	3313      	adds	r3, #19
 8007432:	4618      	mov	r0, r3
 8007434:	f7fe fe5a 	bl	80060ec <ld_word>
 8007438:	4603      	mov	r3, r0
 800743a:	2b7f      	cmp	r3, #127	@ 0x7f
 800743c:	d809      	bhi.n	8007452 <check_fs+0x116>
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	3334      	adds	r3, #52	@ 0x34
 8007442:	3320      	adds	r3, #32
 8007444:	4618      	mov	r0, r3
 8007446:	f7fe fe6a 	bl	800611e <ld_dword>
 800744a:	4603      	mov	r3, r0
 800744c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007450:	d30a      	bcc.n	8007468 <check_fs+0x12c>
			&& ld_word(fs->win + BPB_FATSz16) != 0) {	/* Properness of FAT size (MNBZ) */
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	3334      	adds	r3, #52	@ 0x34
 8007456:	3316      	adds	r3, #22
 8007458:	4618      	mov	r0, r3
 800745a:	f7fe fe47 	bl	80060ec <ld_word>
 800745e:	4603      	mov	r3, r0
 8007460:	2b00      	cmp	r3, #0
 8007462:	d001      	beq.n	8007468 <check_fs+0x12c>
				return 0;	/* It can be presumed an FAT VBR */
 8007464:	2300      	movs	r3, #0
 8007466:	e007      	b.n	8007478 <check_fs+0x13c>
		}
	}
	return sign == 0xAA55 ? 2 : 3;	/* Not an FAT VBR (valid or invalid BS) */
 8007468:	89fb      	ldrh	r3, [r7, #14]
 800746a:	f64a 2255 	movw	r2, #43605	@ 0xaa55
 800746e:	4293      	cmp	r3, r2
 8007470:	d101      	bne.n	8007476 <check_fs+0x13a>
 8007472:	2302      	movs	r3, #2
 8007474:	e000      	b.n	8007478 <check_fs+0x13c>
 8007476:	2303      	movs	r3, #3
}
 8007478:	4618      	mov	r0, r3
 800747a:	3710      	adds	r7, #16
 800747c:	46bd      	mov	sp, r7
 800747e:	bd80      	pop	{r7, pc}
 8007480:	0801437c 	.word	0x0801437c

08007484 <find_volume>:

static UINT find_volume (	/* Returns BS status found in the hosting drive */
	FATFS* fs,		/* Filesystem object */
	UINT part		/* Partition to fined = 0:find as SFD and partitions, >0:forced partition number */
)
{
 8007484:	b580      	push	{r7, lr}
 8007486:	b088      	sub	sp, #32
 8007488:	af00      	add	r7, sp, #0
 800748a:	6078      	str	r0, [r7, #4]
 800748c:	6039      	str	r1, [r7, #0]
	UINT fmt, i;
	DWORD mbr_pt[4];


	fmt = check_fs(fs, 0);				/* Load sector 0 and check if it is an FAT VBR as SFD format */
 800748e:	2100      	movs	r1, #0
 8007490:	6878      	ldr	r0, [r7, #4]
 8007492:	f7ff ff53 	bl	800733c <check_fs>
 8007496:	61b8      	str	r0, [r7, #24]
	if (fmt != 2 && (fmt >= 3 || part == 0)) return fmt;	/* Returns if it is an FAT VBR as auto scan, not a BS or disk error */
 8007498:	69bb      	ldr	r3, [r7, #24]
 800749a:	2b02      	cmp	r3, #2
 800749c:	d007      	beq.n	80074ae <find_volume+0x2a>
 800749e:	69bb      	ldr	r3, [r7, #24]
 80074a0:	2b02      	cmp	r3, #2
 80074a2:	d802      	bhi.n	80074aa <find_volume+0x26>
 80074a4:	683b      	ldr	r3, [r7, #0]
 80074a6:	2b00      	cmp	r3, #0
 80074a8:	d101      	bne.n	80074ae <find_volume+0x2a>
 80074aa:	69bb      	ldr	r3, [r7, #24]
 80074ac:	e045      	b.n	800753a <find_volume+0xb6>
		}
		return 3;	/* Not found */
	}
#endif
	if (FF_MULTI_PARTITION && part > 4) return 3;	/* MBR has 4 partitions max */
	for (i = 0; i < 4; i++) {		/* Load partition offset in the MBR */
 80074ae:	2300      	movs	r3, #0
 80074b0:	61fb      	str	r3, [r7, #28]
 80074b2:	e014      	b.n	80074de <find_volume+0x5a>
		mbr_pt[i] = ld_dword(fs->win + MBR_Table + i * SZ_PTE + PTE_StLba);
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 80074ba:	69fb      	ldr	r3, [r7, #28]
 80074bc:	011b      	lsls	r3, r3, #4
 80074be:	f503 73e3 	add.w	r3, r3, #454	@ 0x1c6
 80074c2:	4413      	add	r3, r2
 80074c4:	4618      	mov	r0, r3
 80074c6:	f7fe fe2a 	bl	800611e <ld_dword>
 80074ca:	4602      	mov	r2, r0
 80074cc:	69fb      	ldr	r3, [r7, #28]
 80074ce:	009b      	lsls	r3, r3, #2
 80074d0:	3320      	adds	r3, #32
 80074d2:	443b      	add	r3, r7
 80074d4:	f843 2c18 	str.w	r2, [r3, #-24]
	for (i = 0; i < 4; i++) {		/* Load partition offset in the MBR */
 80074d8:	69fb      	ldr	r3, [r7, #28]
 80074da:	3301      	adds	r3, #1
 80074dc:	61fb      	str	r3, [r7, #28]
 80074de:	69fb      	ldr	r3, [r7, #28]
 80074e0:	2b03      	cmp	r3, #3
 80074e2:	d9e7      	bls.n	80074b4 <find_volume+0x30>
	}
	i = part ? part - 1 : 0;		/* Table index to find first */
 80074e4:	683b      	ldr	r3, [r7, #0]
 80074e6:	2b00      	cmp	r3, #0
 80074e8:	d002      	beq.n	80074f0 <find_volume+0x6c>
 80074ea:	683b      	ldr	r3, [r7, #0]
 80074ec:	3b01      	subs	r3, #1
 80074ee:	e000      	b.n	80074f2 <find_volume+0x6e>
 80074f0:	2300      	movs	r3, #0
 80074f2:	61fb      	str	r3, [r7, #28]
	do {							/* Find an FAT volume */
		fmt = mbr_pt[i] ? check_fs(fs, mbr_pt[i]) : 3;	/* Check if the partition is FAT */
 80074f4:	69fb      	ldr	r3, [r7, #28]
 80074f6:	009b      	lsls	r3, r3, #2
 80074f8:	3320      	adds	r3, #32
 80074fa:	443b      	add	r3, r7
 80074fc:	f853 3c18 	ldr.w	r3, [r3, #-24]
 8007500:	2b00      	cmp	r3, #0
 8007502:	d00b      	beq.n	800751c <find_volume+0x98>
 8007504:	69fb      	ldr	r3, [r7, #28]
 8007506:	009b      	lsls	r3, r3, #2
 8007508:	3320      	adds	r3, #32
 800750a:	443b      	add	r3, r7
 800750c:	f853 3c18 	ldr.w	r3, [r3, #-24]
 8007510:	4619      	mov	r1, r3
 8007512:	6878      	ldr	r0, [r7, #4]
 8007514:	f7ff ff12 	bl	800733c <check_fs>
 8007518:	4603      	mov	r3, r0
 800751a:	e000      	b.n	800751e <find_volume+0x9a>
 800751c:	2303      	movs	r3, #3
 800751e:	61bb      	str	r3, [r7, #24]
	} while (part == 0 && fmt >= 2 && ++i < 4);
 8007520:	683b      	ldr	r3, [r7, #0]
 8007522:	2b00      	cmp	r3, #0
 8007524:	d108      	bne.n	8007538 <find_volume+0xb4>
 8007526:	69bb      	ldr	r3, [r7, #24]
 8007528:	2b01      	cmp	r3, #1
 800752a:	d905      	bls.n	8007538 <find_volume+0xb4>
 800752c:	69fb      	ldr	r3, [r7, #28]
 800752e:	3301      	adds	r3, #1
 8007530:	61fb      	str	r3, [r7, #28]
 8007532:	69fb      	ldr	r3, [r7, #28]
 8007534:	2b03      	cmp	r3, #3
 8007536:	d9dd      	bls.n	80074f4 <find_volume+0x70>
	return fmt;
 8007538:	69bb      	ldr	r3, [r7, #24]
}
 800753a:	4618      	mov	r0, r3
 800753c:	3720      	adds	r7, #32
 800753e:	46bd      	mov	sp, r7
 8007540:	bd80      	pop	{r7, pc}
	...

08007544 <mount_volume>:
static FRESULT mount_volume (	/* FR_OK(0): successful, !=0: an error occurred */
	const TCHAR** path,			/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,				/* Pointer to pointer to the found filesystem object */
	BYTE mode					/* Desiered access mode to check write protection */
)
{
 8007544:	b580      	push	{r7, lr}
 8007546:	b090      	sub	sp, #64	@ 0x40
 8007548:	af00      	add	r7, sp, #0
 800754a:	60f8      	str	r0, [r7, #12]
 800754c:	60b9      	str	r1, [r7, #8]
 800754e:	4613      	mov	r3, r2
 8007550:	71fb      	strb	r3, [r7, #7]
	WORD nrsv;
	UINT fmt;


	/* Get logical drive number */
	*rfs = 0;
 8007552:	68bb      	ldr	r3, [r7, #8]
 8007554:	2200      	movs	r2, #0
 8007556:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 8007558:	68f8      	ldr	r0, [r7, #12]
 800755a:	f7ff fe55 	bl	8007208 <get_ldnumber>
 800755e:	62f8      	str	r0, [r7, #44]	@ 0x2c
	if (vol < 0) return FR_INVALID_DRIVE;
 8007560:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007562:	2b00      	cmp	r3, #0
 8007564:	da01      	bge.n	800756a <mount_volume+0x26>
 8007566:	230b      	movs	r3, #11
 8007568:	e207      	b.n	800797a <mount_volume+0x436>

	/* Check if the filesystem object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the filesystem object */
 800756a:	4aa2      	ldr	r2, [pc, #648]	@ (80077f4 <mount_volume+0x2b0>)
 800756c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800756e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007572:	62bb      	str	r3, [r7, #40]	@ 0x28
	if (!fs) return FR_NOT_ENABLED;		/* Is the filesystem object available? */
 8007574:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007576:	2b00      	cmp	r3, #0
 8007578:	d101      	bne.n	800757e <mount_volume+0x3a>
 800757a:	230c      	movs	r3, #12
 800757c:	e1fd      	b.n	800797a <mount_volume+0x436>
#if FF_FS_REENTRANT
	if (!lock_volume(fs, 1)) return FR_TIMEOUT;	/* Lock the volume, and system if needed */
#endif
	*rfs = fs;							/* Return pointer to the filesystem object */
 800757e:	68bb      	ldr	r3, [r7, #8]
 8007580:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8007582:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 8007584:	79fb      	ldrb	r3, [r7, #7]
 8007586:	f023 0301 	bic.w	r3, r3, #1
 800758a:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type != 0) {				/* If the volume has been mounted */
 800758c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800758e:	781b      	ldrb	r3, [r3, #0]
 8007590:	2b00      	cmp	r3, #0
 8007592:	d01a      	beq.n	80075ca <mount_volume+0x86>
		stat = disk_status(fs->pdrv);
 8007594:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007596:	785b      	ldrb	r3, [r3, #1]
 8007598:	4618      	mov	r0, r3
 800759a:	f7fe fc6f 	bl	8005e7c <disk_status>
 800759e:	4603      	mov	r3, r0
 80075a0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 80075a4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80075a8:	f003 0301 	and.w	r3, r3, #1
 80075ac:	2b00      	cmp	r3, #0
 80075ae:	d10c      	bne.n	80075ca <mount_volume+0x86>
			if (!FF_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 80075b0:	79fb      	ldrb	r3, [r7, #7]
 80075b2:	2b00      	cmp	r3, #0
 80075b4:	d007      	beq.n	80075c6 <mount_volume+0x82>
 80075b6:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80075ba:	f003 0304 	and.w	r3, r3, #4
 80075be:	2b00      	cmp	r3, #0
 80075c0:	d001      	beq.n	80075c6 <mount_volume+0x82>
				return FR_WRITE_PROTECTED;
 80075c2:	230a      	movs	r3, #10
 80075c4:	e1d9      	b.n	800797a <mount_volume+0x436>
			}
			return FR_OK;				/* The filesystem object is already valid */
 80075c6:	2300      	movs	r3, #0
 80075c8:	e1d7      	b.n	800797a <mount_volume+0x436>
	}

	/* The filesystem object is not valid. */
	/* Following code attempts to mount the volume. (find an FAT volume, analyze the BPB and initialize the filesystem object) */

	fs->fs_type = 0;					/* Invalidate the filesystem object */
 80075ca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80075cc:	2200      	movs	r2, #0
 80075ce:	701a      	strb	r2, [r3, #0]
	stat = disk_initialize(fs->pdrv);	/* Initialize the volume hosting physical drive */
 80075d0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80075d2:	785b      	ldrb	r3, [r3, #1]
 80075d4:	4618      	mov	r0, r3
 80075d6:	f7fe fc79 	bl	8005ecc <disk_initialize>
 80075da:	4603      	mov	r3, r0
 80075dc:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 80075e0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80075e4:	f003 0301 	and.w	r3, r3, #1
 80075e8:	2b00      	cmp	r3, #0
 80075ea:	d001      	beq.n	80075f0 <mount_volume+0xac>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 80075ec:	2303      	movs	r3, #3
 80075ee:	e1c4      	b.n	800797a <mount_volume+0x436>
	}
	if (!FF_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 80075f0:	79fb      	ldrb	r3, [r7, #7]
 80075f2:	2b00      	cmp	r3, #0
 80075f4:	d007      	beq.n	8007606 <mount_volume+0xc2>
 80075f6:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80075fa:	f003 0304 	and.w	r3, r3, #4
 80075fe:	2b00      	cmp	r3, #0
 8007600:	d001      	beq.n	8007606 <mount_volume+0xc2>
		return FR_WRITE_PROTECTED;
 8007602:	230a      	movs	r3, #10
 8007604:	e1b9      	b.n	800797a <mount_volume+0x436>
	}
#if FF_MAX_SS != FF_MIN_SS				/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->pdrv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
 8007606:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007608:	7858      	ldrb	r0, [r3, #1]
 800760a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800760c:	330c      	adds	r3, #12
 800760e:	461a      	mov	r2, r3
 8007610:	2102      	movs	r1, #2
 8007612:	f7fe fce9 	bl	8005fe8 <disk_ioctl>
 8007616:	4603      	mov	r3, r0
 8007618:	2b00      	cmp	r3, #0
 800761a:	d001      	beq.n	8007620 <mount_volume+0xdc>
 800761c:	2301      	movs	r3, #1
 800761e:	e1ac      	b.n	800797a <mount_volume+0x436>
	if (SS(fs) > FF_MAX_SS || SS(fs) < FF_MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
 8007620:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007622:	899b      	ldrh	r3, [r3, #12]
 8007624:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007628:	d80d      	bhi.n	8007646 <mount_volume+0x102>
 800762a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800762c:	899b      	ldrh	r3, [r3, #12]
 800762e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007632:	d308      	bcc.n	8007646 <mount_volume+0x102>
 8007634:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007636:	899b      	ldrh	r3, [r3, #12]
 8007638:	461a      	mov	r2, r3
 800763a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800763c:	899b      	ldrh	r3, [r3, #12]
 800763e:	3b01      	subs	r3, #1
 8007640:	4013      	ands	r3, r2
 8007642:	2b00      	cmp	r3, #0
 8007644:	d001      	beq.n	800764a <mount_volume+0x106>
 8007646:	2301      	movs	r3, #1
 8007648:	e197      	b.n	800797a <mount_volume+0x436>
#endif

	/* Find an FAT volume on the hosting drive */
	fmt = find_volume(fs, LD2PT(vol));
 800764a:	2100      	movs	r1, #0
 800764c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800764e:	f7ff ff19 	bl	8007484 <find_volume>
 8007652:	6338      	str	r0, [r7, #48]	@ 0x30
	if (fmt == 4) return FR_DISK_ERR;		/* An error occurred in the disk I/O layer */
 8007654:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007656:	2b04      	cmp	r3, #4
 8007658:	d101      	bne.n	800765e <mount_volume+0x11a>
 800765a:	2301      	movs	r3, #1
 800765c:	e18d      	b.n	800797a <mount_volume+0x436>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 800765e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007660:	2b01      	cmp	r3, #1
 8007662:	d901      	bls.n	8007668 <mount_volume+0x124>
 8007664:	230d      	movs	r3, #13
 8007666:	e188      	b.n	800797a <mount_volume+0x436>
	bsect = fs->winsect;					/* Volume offset in the hosting physical drive */
 8007668:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800766a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800766c:	623b      	str	r3, [r7, #32]
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* FF_FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 800766e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007670:	3334      	adds	r3, #52	@ 0x34
 8007672:	330b      	adds	r3, #11
 8007674:	4618      	mov	r0, r3
 8007676:	f7fe fd39 	bl	80060ec <ld_word>
 800767a:	4603      	mov	r3, r0
 800767c:	461a      	mov	r2, r3
 800767e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007680:	899b      	ldrh	r3, [r3, #12]
 8007682:	429a      	cmp	r2, r3
 8007684:	d001      	beq.n	800768a <mount_volume+0x146>
 8007686:	230d      	movs	r3, #13
 8007688:	e177      	b.n	800797a <mount_volume+0x436>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 800768a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800768c:	3334      	adds	r3, #52	@ 0x34
 800768e:	3316      	adds	r3, #22
 8007690:	4618      	mov	r0, r3
 8007692:	f7fe fd2b 	bl	80060ec <ld_word>
 8007696:	4603      	mov	r3, r0
 8007698:	63bb      	str	r3, [r7, #56]	@ 0x38
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 800769a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800769c:	2b00      	cmp	r3, #0
 800769e:	d106      	bne.n	80076ae <mount_volume+0x16a>
 80076a0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80076a2:	3334      	adds	r3, #52	@ 0x34
 80076a4:	3324      	adds	r3, #36	@ 0x24
 80076a6:	4618      	mov	r0, r3
 80076a8:	f7fe fd39 	bl	800611e <ld_dword>
 80076ac:	63b8      	str	r0, [r7, #56]	@ 0x38
		fs->fsize = fasize;
 80076ae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80076b0:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80076b2:	61da      	str	r2, [r3, #28]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 80076b4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80076b6:	f893 2044 	ldrb.w	r2, [r3, #68]	@ 0x44
 80076ba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80076bc:	70da      	strb	r2, [r3, #3]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 80076be:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80076c0:	78db      	ldrb	r3, [r3, #3]
 80076c2:	2b01      	cmp	r3, #1
 80076c4:	d005      	beq.n	80076d2 <mount_volume+0x18e>
 80076c6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80076c8:	78db      	ldrb	r3, [r3, #3]
 80076ca:	2b02      	cmp	r3, #2
 80076cc:	d001      	beq.n	80076d2 <mount_volume+0x18e>
 80076ce:	230d      	movs	r3, #13
 80076d0:	e153      	b.n	800797a <mount_volume+0x436>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 80076d2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80076d4:	78db      	ldrb	r3, [r3, #3]
 80076d6:	461a      	mov	r2, r3
 80076d8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80076da:	fb02 f303 	mul.w	r3, r2, r3
 80076de:	63bb      	str	r3, [r7, #56]	@ 0x38

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 80076e0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80076e2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80076e6:	461a      	mov	r2, r3
 80076e8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80076ea:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 80076ec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80076ee:	895b      	ldrh	r3, [r3, #10]
 80076f0:	2b00      	cmp	r3, #0
 80076f2:	d008      	beq.n	8007706 <mount_volume+0x1c2>
 80076f4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80076f6:	895b      	ldrh	r3, [r3, #10]
 80076f8:	461a      	mov	r2, r3
 80076fa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80076fc:	895b      	ldrh	r3, [r3, #10]
 80076fe:	3b01      	subs	r3, #1
 8007700:	4013      	ands	r3, r2
 8007702:	2b00      	cmp	r3, #0
 8007704:	d001      	beq.n	800770a <mount_volume+0x1c6>
 8007706:	230d      	movs	r3, #13
 8007708:	e137      	b.n	800797a <mount_volume+0x436>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 800770a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800770c:	3334      	adds	r3, #52	@ 0x34
 800770e:	3311      	adds	r3, #17
 8007710:	4618      	mov	r0, r3
 8007712:	f7fe fceb 	bl	80060ec <ld_word>
 8007716:	4603      	mov	r3, r0
 8007718:	461a      	mov	r2, r3
 800771a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800771c:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 800771e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007720:	891b      	ldrh	r3, [r3, #8]
 8007722:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8007724:	8992      	ldrh	r2, [r2, #12]
 8007726:	0952      	lsrs	r2, r2, #5
 8007728:	b292      	uxth	r2, r2
 800772a:	fbb3 f1f2 	udiv	r1, r3, r2
 800772e:	fb01 f202 	mul.w	r2, r1, r2
 8007732:	1a9b      	subs	r3, r3, r2
 8007734:	b29b      	uxth	r3, r3
 8007736:	2b00      	cmp	r3, #0
 8007738:	d001      	beq.n	800773e <mount_volume+0x1fa>
 800773a:	230d      	movs	r3, #13
 800773c:	e11d      	b.n	800797a <mount_volume+0x436>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 800773e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007740:	3334      	adds	r3, #52	@ 0x34
 8007742:	3313      	adds	r3, #19
 8007744:	4618      	mov	r0, r3
 8007746:	f7fe fcd1 	bl	80060ec <ld_word>
 800774a:	4603      	mov	r3, r0
 800774c:	63fb      	str	r3, [r7, #60]	@ 0x3c
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 800774e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007750:	2b00      	cmp	r3, #0
 8007752:	d106      	bne.n	8007762 <mount_volume+0x21e>
 8007754:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007756:	3334      	adds	r3, #52	@ 0x34
 8007758:	3320      	adds	r3, #32
 800775a:	4618      	mov	r0, r3
 800775c:	f7fe fcdf 	bl	800611e <ld_dword>
 8007760:	63f8      	str	r0, [r7, #60]	@ 0x3c

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 8007762:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007764:	3334      	adds	r3, #52	@ 0x34
 8007766:	330e      	adds	r3, #14
 8007768:	4618      	mov	r0, r3
 800776a:	f7fe fcbf 	bl	80060ec <ld_word>
 800776e:	4603      	mov	r3, r0
 8007770:	83fb      	strh	r3, [r7, #30]
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 8007772:	8bfb      	ldrh	r3, [r7, #30]
 8007774:	2b00      	cmp	r3, #0
 8007776:	d101      	bne.n	800777c <mount_volume+0x238>
 8007778:	230d      	movs	r3, #13
 800777a:	e0fe      	b.n	800797a <mount_volume+0x436>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 800777c:	8bfa      	ldrh	r2, [r7, #30]
 800777e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007780:	4413      	add	r3, r2
 8007782:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8007784:	8911      	ldrh	r1, [r2, #8]
 8007786:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8007788:	8992      	ldrh	r2, [r2, #12]
 800778a:	0952      	lsrs	r2, r2, #5
 800778c:	b292      	uxth	r2, r2
 800778e:	fbb1 f2f2 	udiv	r2, r1, r2
 8007792:	b292      	uxth	r2, r2
 8007794:	4413      	add	r3, r2
 8007796:	61bb      	str	r3, [r7, #24]
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 8007798:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800779a:	69bb      	ldr	r3, [r7, #24]
 800779c:	429a      	cmp	r2, r3
 800779e:	d201      	bcs.n	80077a4 <mount_volume+0x260>
 80077a0:	230d      	movs	r3, #13
 80077a2:	e0ea      	b.n	800797a <mount_volume+0x436>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 80077a4:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80077a6:	69bb      	ldr	r3, [r7, #24]
 80077a8:	1ad3      	subs	r3, r2, r3
 80077aa:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80077ac:	8952      	ldrh	r2, [r2, #10]
 80077ae:	fbb3 f3f2 	udiv	r3, r3, r2
 80077b2:	617b      	str	r3, [r7, #20]
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 80077b4:	697b      	ldr	r3, [r7, #20]
 80077b6:	2b00      	cmp	r3, #0
 80077b8:	d101      	bne.n	80077be <mount_volume+0x27a>
 80077ba:	230d      	movs	r3, #13
 80077bc:	e0dd      	b.n	800797a <mount_volume+0x436>
		fmt = 0;
 80077be:	2300      	movs	r3, #0
 80077c0:	633b      	str	r3, [r7, #48]	@ 0x30
		if (nclst <= MAX_FAT32) fmt = FS_FAT32;
 80077c2:	697b      	ldr	r3, [r7, #20]
 80077c4:	4a0c      	ldr	r2, [pc, #48]	@ (80077f8 <mount_volume+0x2b4>)
 80077c6:	4293      	cmp	r3, r2
 80077c8:	d801      	bhi.n	80077ce <mount_volume+0x28a>
 80077ca:	2303      	movs	r3, #3
 80077cc:	633b      	str	r3, [r7, #48]	@ 0x30
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 80077ce:	697b      	ldr	r3, [r7, #20]
 80077d0:	f64f 72f5 	movw	r2, #65525	@ 0xfff5
 80077d4:	4293      	cmp	r3, r2
 80077d6:	d801      	bhi.n	80077dc <mount_volume+0x298>
 80077d8:	2302      	movs	r3, #2
 80077da:	633b      	str	r3, [r7, #48]	@ 0x30
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 80077dc:	697b      	ldr	r3, [r7, #20]
 80077de:	f640 72f5 	movw	r2, #4085	@ 0xff5
 80077e2:	4293      	cmp	r3, r2
 80077e4:	d801      	bhi.n	80077ea <mount_volume+0x2a6>
 80077e6:	2301      	movs	r3, #1
 80077e8:	633b      	str	r3, [r7, #48]	@ 0x30
		if (fmt == 0) return FR_NO_FILESYSTEM;
 80077ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80077ec:	2b00      	cmp	r3, #0
 80077ee:	d105      	bne.n	80077fc <mount_volume+0x2b8>
 80077f0:	230d      	movs	r3, #13
 80077f2:	e0c2      	b.n	800797a <mount_volume+0x436>
 80077f4:	20005110 	.word	0x20005110
 80077f8:	0ffffff5 	.word	0x0ffffff5

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 80077fc:	697b      	ldr	r3, [r7, #20]
 80077fe:	1c9a      	adds	r2, r3, #2
 8007800:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007802:	619a      	str	r2, [r3, #24]
		fs->volbase = bsect;							/* Volume start sector */
 8007804:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007806:	6a3a      	ldr	r2, [r7, #32]
 8007808:	621a      	str	r2, [r3, #32]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800780a:	8bfa      	ldrh	r2, [r7, #30]
 800780c:	6a3b      	ldr	r3, [r7, #32]
 800780e:	441a      	add	r2, r3
 8007810:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007812:	625a      	str	r2, [r3, #36]	@ 0x24
		fs->database = bsect + sysect;					/* Data start sector */
 8007814:	6a3a      	ldr	r2, [r7, #32]
 8007816:	69bb      	ldr	r3, [r7, #24]
 8007818:	441a      	add	r2, r3
 800781a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800781c:	62da      	str	r2, [r3, #44]	@ 0x2c
		if (fmt == FS_FAT32) {
 800781e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007820:	2b03      	cmp	r3, #3
 8007822:	d11e      	bne.n	8007862 <mount_volume+0x31e>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 8007824:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007826:	3334      	adds	r3, #52	@ 0x34
 8007828:	332a      	adds	r3, #42	@ 0x2a
 800782a:	4618      	mov	r0, r3
 800782c:	f7fe fc5e 	bl	80060ec <ld_word>
 8007830:	4603      	mov	r3, r0
 8007832:	2b00      	cmp	r3, #0
 8007834:	d001      	beq.n	800783a <mount_volume+0x2f6>
 8007836:	230d      	movs	r3, #13
 8007838:	e09f      	b.n	800797a <mount_volume+0x436>
			if (fs->n_rootdir != 0) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 800783a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800783c:	891b      	ldrh	r3, [r3, #8]
 800783e:	2b00      	cmp	r3, #0
 8007840:	d001      	beq.n	8007846 <mount_volume+0x302>
 8007842:	230d      	movs	r3, #13
 8007844:	e099      	b.n	800797a <mount_volume+0x436>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 8007846:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007848:	3334      	adds	r3, #52	@ 0x34
 800784a:	332c      	adds	r3, #44	@ 0x2c
 800784c:	4618      	mov	r0, r3
 800784e:	f7fe fc66 	bl	800611e <ld_dword>
 8007852:	4602      	mov	r2, r0
 8007854:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007856:	629a      	str	r2, [r3, #40]	@ 0x28
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 8007858:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800785a:	699b      	ldr	r3, [r3, #24]
 800785c:	009b      	lsls	r3, r3, #2
 800785e:	637b      	str	r3, [r7, #52]	@ 0x34
 8007860:	e01e      	b.n	80078a0 <mount_volume+0x35c>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must not be 0) */
 8007862:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007864:	891b      	ldrh	r3, [r3, #8]
 8007866:	2b00      	cmp	r3, #0
 8007868:	d101      	bne.n	800786e <mount_volume+0x32a>
 800786a:	230d      	movs	r3, #13
 800786c:	e085      	b.n	800797a <mount_volume+0x436>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 800786e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007870:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8007872:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007874:	441a      	add	r2, r3
 8007876:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007878:	629a      	str	r2, [r3, #40]	@ 0x28
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800787a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800787c:	2b02      	cmp	r3, #2
 800787e:	d103      	bne.n	8007888 <mount_volume+0x344>
 8007880:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007882:	699b      	ldr	r3, [r3, #24]
 8007884:	005b      	lsls	r3, r3, #1
 8007886:	e00a      	b.n	800789e <mount_volume+0x35a>
 8007888:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800788a:	699a      	ldr	r2, [r3, #24]
 800788c:	4613      	mov	r3, r2
 800788e:	005b      	lsls	r3, r3, #1
 8007890:	4413      	add	r3, r2
 8007892:	085a      	lsrs	r2, r3, #1
 8007894:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007896:	699b      	ldr	r3, [r3, #24]
 8007898:	f003 0301 	and.w	r3, r3, #1
 800789c:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 800789e:	637b      	str	r3, [r7, #52]	@ 0x34
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 80078a0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80078a2:	69da      	ldr	r2, [r3, #28]
 80078a4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80078a6:	899b      	ldrh	r3, [r3, #12]
 80078a8:	4619      	mov	r1, r3
 80078aa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80078ac:	440b      	add	r3, r1
 80078ae:	3b01      	subs	r3, #1
 80078b0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80078b2:	8989      	ldrh	r1, [r1, #12]
 80078b4:	fbb3 f3f1 	udiv	r3, r3, r1
 80078b8:	429a      	cmp	r2, r3
 80078ba:	d201      	bcs.n	80078c0 <mount_volume+0x37c>
 80078bc:	230d      	movs	r3, #13
 80078be:	e05c      	b.n	800797a <mount_volume+0x436>

#if !FF_FS_READONLY
		/* Get FSInfo if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 80078c0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80078c2:	f04f 32ff 	mov.w	r2, #4294967295
 80078c6:	615a      	str	r2, [r3, #20]
 80078c8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80078ca:	695a      	ldr	r2, [r3, #20]
 80078cc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80078ce:	611a      	str	r2, [r3, #16]
		fs->fsi_flag = 0x80;
 80078d0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80078d2:	2280      	movs	r2, #128	@ 0x80
 80078d4:	715a      	strb	r2, [r3, #5]
#if (FF_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Allow to update FSInfo only if BPB_FSInfo32 == 1 */
 80078d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80078d8:	2b03      	cmp	r3, #3
 80078da:	d13f      	bne.n	800795c <mount_volume+0x418>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 80078dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80078de:	3334      	adds	r3, #52	@ 0x34
 80078e0:	3330      	adds	r3, #48	@ 0x30
 80078e2:	4618      	mov	r0, r3
 80078e4:	f7fe fc02 	bl	80060ec <ld_word>
 80078e8:	4603      	mov	r3, r0
 80078ea:	2b01      	cmp	r3, #1
 80078ec:	d136      	bne.n	800795c <mount_volume+0x418>
			&& move_window(fs, bsect + 1) == FR_OK)
 80078ee:	6a3b      	ldr	r3, [r7, #32]
 80078f0:	3301      	adds	r3, #1
 80078f2:	4619      	mov	r1, r3
 80078f4:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80078f6:	f7fe fcda 	bl	80062ae <move_window>
 80078fa:	4603      	mov	r3, r0
 80078fc:	2b00      	cmp	r3, #0
 80078fe:	d12d      	bne.n	800795c <mount_volume+0x418>
		{
			fs->fsi_flag = 0;
 8007900:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007902:	2200      	movs	r2, #0
 8007904:	715a      	strb	r2, [r3, #5]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSInfo data if available */
 8007906:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007908:	3334      	adds	r3, #52	@ 0x34
 800790a:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 800790e:	4618      	mov	r0, r3
 8007910:	f7fe fbec 	bl	80060ec <ld_word>
 8007914:	4603      	mov	r3, r0
 8007916:	461a      	mov	r2, r3
 8007918:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 800791c:	429a      	cmp	r2, r3
 800791e:	d11d      	bne.n	800795c <mount_volume+0x418>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 8007920:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007922:	3334      	adds	r3, #52	@ 0x34
 8007924:	4618      	mov	r0, r3
 8007926:	f7fe fbfa 	bl	800611e <ld_dword>
 800792a:	4603      	mov	r3, r0
 800792c:	4a15      	ldr	r2, [pc, #84]	@ (8007984 <mount_volume+0x440>)
 800792e:	4293      	cmp	r3, r2
 8007930:	d114      	bne.n	800795c <mount_volume+0x418>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 8007932:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007934:	3334      	adds	r3, #52	@ 0x34
 8007936:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 800793a:	4618      	mov	r0, r3
 800793c:	f7fe fbef 	bl	800611e <ld_dword>
 8007940:	4603      	mov	r3, r0
 8007942:	4a11      	ldr	r2, [pc, #68]	@ (8007988 <mount_volume+0x444>)
 8007944:	4293      	cmp	r3, r2
 8007946:	d109      	bne.n	800795c <mount_volume+0x418>
			{
#if (FF_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
#endif
#if (FF_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 8007948:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800794a:	3334      	adds	r3, #52	@ 0x34
 800794c:	f503 73f6 	add.w	r3, r3, #492	@ 0x1ec
 8007950:	4618      	mov	r0, r3
 8007952:	f7fe fbe4 	bl	800611e <ld_dword>
 8007956:	4602      	mov	r2, r0
 8007958:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800795a:	611a      	str	r2, [r3, #16]
		}
#endif	/* (FF_FS_NOFSINFO & 3) != 3 */
#endif	/* !FF_FS_READONLY */
	}

	fs->fs_type = (BYTE)fmt;/* FAT sub-type (the filesystem object gets valid) */
 800795c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800795e:	b2da      	uxtb	r2, r3
 8007960:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007962:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* Volume mount ID */
 8007964:	4b09      	ldr	r3, [pc, #36]	@ (800798c <mount_volume+0x448>)
 8007966:	881b      	ldrh	r3, [r3, #0]
 8007968:	3301      	adds	r3, #1
 800796a:	b29a      	uxth	r2, r3
 800796c:	4b07      	ldr	r3, [pc, #28]	@ (800798c <mount_volume+0x448>)
 800796e:	801a      	strh	r2, [r3, #0]
 8007970:	4b06      	ldr	r3, [pc, #24]	@ (800798c <mount_volume+0x448>)
 8007972:	881a      	ldrh	r2, [r3, #0]
 8007974:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007976:	80da      	strh	r2, [r3, #6]
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if FF_FS_LOCK				/* Clear file lock semaphores */
	clear_share(fs);
#endif
	return FR_OK;
 8007978:	2300      	movs	r3, #0
}
 800797a:	4618      	mov	r0, r3
 800797c:	3740      	adds	r7, #64	@ 0x40
 800797e:	46bd      	mov	sp, r7
 8007980:	bd80      	pop	{r7, pc}
 8007982:	bf00      	nop
 8007984:	41615252 	.word	0x41615252
 8007988:	61417272 	.word	0x61417272
 800798c:	20005118 	.word	0x20005118

08007990 <validate>:

static FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	FFOBJID* obj,			/* Pointer to the FFOBJID, the 1st member in the FIL/DIR structure, to check validity */
	FATFS** rfs				/* Pointer to pointer to the owner filesystem object to return */
)
{
 8007990:	b580      	push	{r7, lr}
 8007992:	b084      	sub	sp, #16
 8007994:	af00      	add	r7, sp, #0
 8007996:	6078      	str	r0, [r7, #4]
 8007998:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 800799a:	2309      	movs	r3, #9
 800799c:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 800799e:	687b      	ldr	r3, [r7, #4]
 80079a0:	2b00      	cmp	r3, #0
 80079a2:	d01c      	beq.n	80079de <validate+0x4e>
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	681b      	ldr	r3, [r3, #0]
 80079a8:	2b00      	cmp	r3, #0
 80079aa:	d018      	beq.n	80079de <validate+0x4e>
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	681b      	ldr	r3, [r3, #0]
 80079b0:	781b      	ldrb	r3, [r3, #0]
 80079b2:	2b00      	cmp	r3, #0
 80079b4:	d013      	beq.n	80079de <validate+0x4e>
 80079b6:	687b      	ldr	r3, [r7, #4]
 80079b8:	889a      	ldrh	r2, [r3, #4]
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	681b      	ldr	r3, [r3, #0]
 80079be:	88db      	ldrh	r3, [r3, #6]
 80079c0:	429a      	cmp	r2, r3
 80079c2:	d10c      	bne.n	80079de <validate+0x4e>
			}
		} else {	/* Could not take */
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->pdrv) & STA_NOINIT)) { /* Test if the hosting phsical drive is kept initialized */
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	681b      	ldr	r3, [r3, #0]
 80079c8:	785b      	ldrb	r3, [r3, #1]
 80079ca:	4618      	mov	r0, r3
 80079cc:	f7fe fa56 	bl	8005e7c <disk_status>
 80079d0:	4603      	mov	r3, r0
 80079d2:	f003 0301 	and.w	r3, r3, #1
 80079d6:	2b00      	cmp	r3, #0
 80079d8:	d101      	bne.n	80079de <validate+0x4e>
			res = FR_OK;
 80079da:	2300      	movs	r3, #0
 80079dc:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*rfs = (res == FR_OK) ? obj->fs : 0;	/* Return corresponding filesystem object if it is valid */
 80079de:	7bfb      	ldrb	r3, [r7, #15]
 80079e0:	2b00      	cmp	r3, #0
 80079e2:	d102      	bne.n	80079ea <validate+0x5a>
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	681b      	ldr	r3, [r3, #0]
 80079e8:	e000      	b.n	80079ec <validate+0x5c>
 80079ea:	2300      	movs	r3, #0
 80079ec:	683a      	ldr	r2, [r7, #0]
 80079ee:	6013      	str	r3, [r2, #0]
	return res;
 80079f0:	7bfb      	ldrb	r3, [r7, #15]
}
 80079f2:	4618      	mov	r0, r3
 80079f4:	3710      	adds	r7, #16
 80079f6:	46bd      	mov	sp, r7
 80079f8:	bd80      	pop	{r7, pc}
	...

080079fc <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the filesystem object to be registered (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mount option: 0=Do not mount (delayed mount), 1=Mount immediately */
)
{
 80079fc:	b580      	push	{r7, lr}
 80079fe:	b088      	sub	sp, #32
 8007a00:	af00      	add	r7, sp, #0
 8007a02:	60f8      	str	r0, [r7, #12]
 8007a04:	60b9      	str	r1, [r7, #8]
 8007a06:	4613      	mov	r3, r2
 8007a08:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 8007a0a:	68bb      	ldr	r3, [r7, #8]
 8007a0c:	613b      	str	r3, [r7, #16]


	/* Get volume ID (logical drive number) */
	vol = get_ldnumber(&rp);
 8007a0e:	f107 0310 	add.w	r3, r7, #16
 8007a12:	4618      	mov	r0, r3
 8007a14:	f7ff fbf8 	bl	8007208 <get_ldnumber>
 8007a18:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 8007a1a:	69fb      	ldr	r3, [r7, #28]
 8007a1c:	2b00      	cmp	r3, #0
 8007a1e:	da01      	bge.n	8007a24 <f_mount+0x28>
 8007a20:	230b      	movs	r3, #11
 8007a22:	e02e      	b.n	8007a82 <f_mount+0x86>
	cfs = FatFs[vol];			/* Pointer to the filesystem object of the volume */
 8007a24:	4a19      	ldr	r2, [pc, #100]	@ (8007a8c <f_mount+0x90>)
 8007a26:	69fb      	ldr	r3, [r7, #28]
 8007a28:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007a2c:	61bb      	str	r3, [r7, #24]

	if (cfs) {					/* Unregister current filesystem object if regsitered */
 8007a2e:	69bb      	ldr	r3, [r7, #24]
 8007a30:	2b00      	cmp	r3, #0
 8007a32:	d007      	beq.n	8007a44 <f_mount+0x48>
		FatFs[vol] = 0;
 8007a34:	4a15      	ldr	r2, [pc, #84]	@ (8007a8c <f_mount+0x90>)
 8007a36:	69fb      	ldr	r3, [r7, #28]
 8007a38:	2100      	movs	r1, #0
 8007a3a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		clear_share(cfs);
#endif
#if FF_FS_REENTRANT				/* Discard mutex of the current volume */
		ff_mutex_delete(vol);
#endif
		cfs->fs_type = 0;		/* Invalidate the filesystem object to be unregistered */
 8007a3e:	69bb      	ldr	r3, [r7, #24]
 8007a40:	2200      	movs	r2, #0
 8007a42:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {					/* Register new filesystem object */
 8007a44:	68fb      	ldr	r3, [r7, #12]
 8007a46:	2b00      	cmp	r3, #0
 8007a48:	d00b      	beq.n	8007a62 <f_mount+0x66>
		fs->pdrv = LD2PD(vol);	/* Volume hosting physical drive */
 8007a4a:	68fb      	ldr	r3, [r7, #12]
 8007a4c:	69fa      	ldr	r2, [r7, #28]
 8007a4e:	b2d2      	uxtb	r2, r2
 8007a50:	705a      	strb	r2, [r3, #1]
			}
			SysLock = 1;		/* System mutex is ready */
		}
#endif
#endif
		fs->fs_type = 0;		/* Invalidate the new filesystem object */
 8007a52:	68fb      	ldr	r3, [r7, #12]
 8007a54:	2200      	movs	r2, #0
 8007a56:	701a      	strb	r2, [r3, #0]
		FatFs[vol] = fs;		/* Register new fs object */
 8007a58:	68fa      	ldr	r2, [r7, #12]
 8007a5a:	490c      	ldr	r1, [pc, #48]	@ (8007a8c <f_mount+0x90>)
 8007a5c:	69fb      	ldr	r3, [r7, #28]
 8007a5e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	}

	if (opt == 0) return FR_OK;	/* Do not mount now, it will be mounted in subsequent file functions */
 8007a62:	79fb      	ldrb	r3, [r7, #7]
 8007a64:	2b00      	cmp	r3, #0
 8007a66:	d101      	bne.n	8007a6c <f_mount+0x70>
 8007a68:	2300      	movs	r3, #0
 8007a6a:	e00a      	b.n	8007a82 <f_mount+0x86>

	res = mount_volume(&path, &fs, 0);	/* Force mounted the volume */
 8007a6c:	f107 010c 	add.w	r1, r7, #12
 8007a70:	f107 0308 	add.w	r3, r7, #8
 8007a74:	2200      	movs	r2, #0
 8007a76:	4618      	mov	r0, r3
 8007a78:	f7ff fd64 	bl	8007544 <mount_volume>
 8007a7c:	4603      	mov	r3, r0
 8007a7e:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 8007a80:	7dfb      	ldrb	r3, [r7, #23]
}
 8007a82:	4618      	mov	r0, r3
 8007a84:	3720      	adds	r7, #32
 8007a86:	46bd      	mov	sp, r7
 8007a88:	bd80      	pop	{r7, pc}
 8007a8a:	bf00      	nop
 8007a8c:	20005110 	.word	0x20005110

08007a90 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and open mode flags */
)
{
 8007a90:	b580      	push	{r7, lr}
 8007a92:	b098      	sub	sp, #96	@ 0x60
 8007a94:	af00      	add	r7, sp, #0
 8007a96:	60f8      	str	r0, [r7, #12]
 8007a98:	60b9      	str	r1, [r7, #8]
 8007a9a:	4613      	mov	r3, r2
 8007a9c:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 8007a9e:	68fb      	ldr	r3, [r7, #12]
 8007aa0:	2b00      	cmp	r3, #0
 8007aa2:	d101      	bne.n	8007aa8 <f_open+0x18>
 8007aa4:	2309      	movs	r3, #9
 8007aa6:	e184      	b.n	8007db2 <f_open+0x322>

	/* Get logical drive number */
	mode &= FF_FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND;
 8007aa8:	79fb      	ldrb	r3, [r7, #7]
 8007aaa:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8007aae:	71fb      	strb	r3, [r7, #7]
	res = mount_volume(&path, &fs, mode);
 8007ab0:	79fa      	ldrb	r2, [r7, #7]
 8007ab2:	f107 0114 	add.w	r1, r7, #20
 8007ab6:	f107 0308 	add.w	r3, r7, #8
 8007aba:	4618      	mov	r0, r3
 8007abc:	f7ff fd42 	bl	8007544 <mount_volume>
 8007ac0:	4603      	mov	r3, r0
 8007ac2:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
	if (res == FR_OK) {
 8007ac6:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8007aca:	2b00      	cmp	r3, #0
 8007acc:	f040 8168 	bne.w	8007da0 <f_open+0x310>
		dj.obj.fs = fs;
 8007ad0:	697b      	ldr	r3, [r7, #20]
 8007ad2:	61bb      	str	r3, [r7, #24]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 8007ad4:	68ba      	ldr	r2, [r7, #8]
 8007ad6:	f107 0318 	add.w	r3, r7, #24
 8007ada:	4611      	mov	r1, r2
 8007adc:	4618      	mov	r0, r3
 8007ade:	f7ff fb1f 	bl	8007120 <follow_path>
 8007ae2:	4603      	mov	r3, r0
 8007ae4:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
#if !FF_FS_READONLY	/* Read/Write configuration */
		if (res == FR_OK) {
 8007ae8:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8007aec:	2b00      	cmp	r3, #0
 8007aee:	d107      	bne.n	8007b00 <f_open+0x70>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 8007af0:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8007af4:	b25b      	sxtb	r3, r3
 8007af6:	2b00      	cmp	r3, #0
 8007af8:	da02      	bge.n	8007b00 <f_open+0x70>
				res = FR_INVALID_NAME;
 8007afa:	2306      	movs	r3, #6
 8007afc:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
				res = chk_share(&dj, (mode & ~FA_READ) ? 1 : 0);	/* Check if the file can be used */
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 8007b00:	79fb      	ldrb	r3, [r7, #7]
 8007b02:	f003 031c 	and.w	r3, r3, #28
 8007b06:	2b00      	cmp	r3, #0
 8007b08:	d077      	beq.n	8007bfa <f_open+0x16a>
			if (res != FR_OK) {					/* No file, create new */
 8007b0a:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8007b0e:	2b00      	cmp	r3, #0
 8007b10:	d010      	beq.n	8007b34 <f_open+0xa4>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 8007b12:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8007b16:	2b04      	cmp	r3, #4
 8007b18:	d107      	bne.n	8007b2a <f_open+0x9a>
#if FF_FS_LOCK
					res = enq_share() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
#else
					res = dir_register(&dj);
 8007b1a:	f107 0318 	add.w	r3, r7, #24
 8007b1e:	4618      	mov	r0, r3
 8007b20:	f7ff f9f4 	bl	8006f0c <dir_register>
 8007b24:	4603      	mov	r3, r0
 8007b26:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 8007b2a:	79fb      	ldrb	r3, [r7, #7]
 8007b2c:	f043 0308 	orr.w	r3, r3, #8
 8007b30:	71fb      	strb	r3, [r7, #7]
 8007b32:	e010      	b.n	8007b56 <f_open+0xc6>
			}
			else {								/* Any object with the same name is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 8007b34:	7fbb      	ldrb	r3, [r7, #30]
 8007b36:	f003 0311 	and.w	r3, r3, #17
 8007b3a:	2b00      	cmp	r3, #0
 8007b3c:	d003      	beq.n	8007b46 <f_open+0xb6>
					res = FR_DENIED;
 8007b3e:	2307      	movs	r3, #7
 8007b40:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 8007b44:	e007      	b.n	8007b56 <f_open+0xc6>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 8007b46:	79fb      	ldrb	r3, [r7, #7]
 8007b48:	f003 0304 	and.w	r3, r3, #4
 8007b4c:	2b00      	cmp	r3, #0
 8007b4e:	d002      	beq.n	8007b56 <f_open+0xc6>
 8007b50:	2308      	movs	r3, #8
 8007b52:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate the file if overwrite mode */
 8007b56:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8007b5a:	2b00      	cmp	r3, #0
 8007b5c:	d167      	bne.n	8007c2e <f_open+0x19e>
 8007b5e:	79fb      	ldrb	r3, [r7, #7]
 8007b60:	f003 0308 	and.w	r3, r3, #8
 8007b64:	2b00      	cmp	r3, #0
 8007b66:	d062      	beq.n	8007c2e <f_open+0x19e>
					}
				} else
#endif
				{
					/* Set directory entry initial state */
					tm = GET_FATTIME();					/* Set created time */
 8007b68:	4b94      	ldr	r3, [pc, #592]	@ (8007dbc <f_open+0x32c>)
 8007b6a:	653b      	str	r3, [r7, #80]	@ 0x50
					st_dword(dj.dir + DIR_CrtTime, tm);
 8007b6c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007b6e:	330e      	adds	r3, #14
 8007b70:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8007b72:	4618      	mov	r0, r3
 8007b74:	f7fe fb11 	bl	800619a <st_dword>
					st_dword(dj.dir + DIR_ModTime, tm);
 8007b78:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007b7a:	3316      	adds	r3, #22
 8007b7c:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8007b7e:	4618      	mov	r0, r3
 8007b80:	f7fe fb0b 	bl	800619a <st_dword>
					cl = ld_clust(fs, dj.dir);			/* Get current cluster chain */
 8007b84:	697b      	ldr	r3, [r7, #20]
 8007b86:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8007b88:	4611      	mov	r1, r2
 8007b8a:	4618      	mov	r0, r3
 8007b8c:	f7ff f92a 	bl	8006de4 <ld_clust>
 8007b90:	64f8      	str	r0, [r7, #76]	@ 0x4c
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 8007b92:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007b94:	330b      	adds	r3, #11
 8007b96:	2220      	movs	r2, #32
 8007b98:	701a      	strb	r2, [r3, #0]
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 8007b9a:	697b      	ldr	r3, [r7, #20]
 8007b9c:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8007b9e:	2200      	movs	r2, #0
 8007ba0:	4618      	mov	r0, r3
 8007ba2:	f7ff f93e 	bl	8006e22 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 8007ba6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007ba8:	331c      	adds	r3, #28
 8007baa:	2100      	movs	r1, #0
 8007bac:	4618      	mov	r0, r3
 8007bae:	f7fe faf4 	bl	800619a <st_dword>
					fs->wflag = 1;
 8007bb2:	697b      	ldr	r3, [r7, #20]
 8007bb4:	2201      	movs	r2, #1
 8007bb6:	711a      	strb	r2, [r3, #4]
					if (cl != 0) {						/* Remove the cluster chain if exist */
 8007bb8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007bba:	2b00      	cmp	r3, #0
 8007bbc:	d037      	beq.n	8007c2e <f_open+0x19e>
						sc = fs->winsect;
 8007bbe:	697b      	ldr	r3, [r7, #20]
 8007bc0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007bc2:	64bb      	str	r3, [r7, #72]	@ 0x48
						res = remove_chain(&dj.obj, cl, 0);
 8007bc4:	f107 0318 	add.w	r3, r7, #24
 8007bc8:	2200      	movs	r2, #0
 8007bca:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 8007bcc:	4618      	mov	r0, r3
 8007bce:	f7fe fe15 	bl	80067fc <remove_chain>
 8007bd2:	4603      	mov	r3, r0
 8007bd4:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
						if (res == FR_OK) {
 8007bd8:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8007bdc:	2b00      	cmp	r3, #0
 8007bde:	d126      	bne.n	8007c2e <f_open+0x19e>
							res = move_window(fs, sc);
 8007be0:	697b      	ldr	r3, [r7, #20]
 8007be2:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 8007be4:	4618      	mov	r0, r3
 8007be6:	f7fe fb62 	bl	80062ae <move_window>
 8007bea:	4603      	mov	r3, r0
 8007bec:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 8007bf0:	697b      	ldr	r3, [r7, #20]
 8007bf2:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8007bf4:	3a01      	subs	r2, #1
 8007bf6:	611a      	str	r2, [r3, #16]
 8007bf8:	e019      	b.n	8007c2e <f_open+0x19e>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Is the object exsiting? */
 8007bfa:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8007bfe:	2b00      	cmp	r3, #0
 8007c00:	d115      	bne.n	8007c2e <f_open+0x19e>
				if (dj.obj.attr & AM_DIR) {		/* File open against a directory */
 8007c02:	7fbb      	ldrb	r3, [r7, #30]
 8007c04:	f003 0310 	and.w	r3, r3, #16
 8007c08:	2b00      	cmp	r3, #0
 8007c0a:	d003      	beq.n	8007c14 <f_open+0x184>
					res = FR_NO_FILE;
 8007c0c:	2304      	movs	r3, #4
 8007c0e:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 8007c12:	e00c      	b.n	8007c2e <f_open+0x19e>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* Write mode open against R/O file */
 8007c14:	79fb      	ldrb	r3, [r7, #7]
 8007c16:	f003 0302 	and.w	r3, r3, #2
 8007c1a:	2b00      	cmp	r3, #0
 8007c1c:	d007      	beq.n	8007c2e <f_open+0x19e>
 8007c1e:	7fbb      	ldrb	r3, [r7, #30]
 8007c20:	f003 0301 	and.w	r3, r3, #1
 8007c24:	2b00      	cmp	r3, #0
 8007c26:	d002      	beq.n	8007c2e <f_open+0x19e>
						res = FR_DENIED;
 8007c28:	2307      	movs	r3, #7
 8007c2a:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 8007c2e:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8007c32:	2b00      	cmp	r3, #0
 8007c34:	d10f      	bne.n	8007c56 <f_open+0x1c6>
			if (mode & FA_CREATE_ALWAYS) mode |= FA_MODIFIED;	/* Set file change flag if created or overwritten */
 8007c36:	79fb      	ldrb	r3, [r7, #7]
 8007c38:	f003 0308 	and.w	r3, r3, #8
 8007c3c:	2b00      	cmp	r3, #0
 8007c3e:	d003      	beq.n	8007c48 <f_open+0x1b8>
 8007c40:	79fb      	ldrb	r3, [r7, #7]
 8007c42:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007c46:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 8007c48:	697b      	ldr	r3, [r7, #20]
 8007c4a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007c4c:	68fb      	ldr	r3, [r7, #12]
 8007c4e:	621a      	str	r2, [r3, #32]
			fp->dir_ptr = dj.dir;
 8007c50:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8007c52:	68fb      	ldr	r3, [r7, #12]
 8007c54:	625a      	str	r2, [r3, #36]	@ 0x24
				}
			}
		}
#endif

		if (res == FR_OK) {
 8007c56:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8007c5a:	2b00      	cmp	r3, #0
 8007c5c:	f040 80a0 	bne.w	8007da0 <f_open+0x310>
				fp->obj.c_ofs = dj.blk_ofs;
				init_alloc_info(fs, &fp->obj);
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 8007c60:	697b      	ldr	r3, [r7, #20]
 8007c62:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8007c64:	4611      	mov	r1, r2
 8007c66:	4618      	mov	r0, r3
 8007c68:	f7ff f8bc 	bl	8006de4 <ld_clust>
 8007c6c:	4602      	mov	r2, r0
 8007c6e:	68fb      	ldr	r3, [r7, #12]
 8007c70:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 8007c72:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007c74:	331c      	adds	r3, #28
 8007c76:	4618      	mov	r0, r3
 8007c78:	f7fe fa51 	bl	800611e <ld_dword>
 8007c7c:	4602      	mov	r2, r0
 8007c7e:	68fb      	ldr	r3, [r7, #12]
 8007c80:	60da      	str	r2, [r3, #12]
			}
#if FF_USE_FASTSEEK
			fp->cltbl = 0;		/* Disable fast seek mode */
#endif
			fp->obj.fs = fs;	/* Validate the file object */
 8007c82:	697a      	ldr	r2, [r7, #20]
 8007c84:	68fb      	ldr	r3, [r7, #12]
 8007c86:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 8007c88:	697b      	ldr	r3, [r7, #20]
 8007c8a:	88da      	ldrh	r2, [r3, #6]
 8007c8c:	68fb      	ldr	r3, [r7, #12]
 8007c8e:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;	/* Set file access mode */
 8007c90:	68fb      	ldr	r3, [r7, #12]
 8007c92:	79fa      	ldrb	r2, [r7, #7]
 8007c94:	741a      	strb	r2, [r3, #16]
			fp->err = 0;		/* Clear error flag */
 8007c96:	68fb      	ldr	r3, [r7, #12]
 8007c98:	2200      	movs	r2, #0
 8007c9a:	745a      	strb	r2, [r3, #17]
			fp->sect = 0;		/* Invalidate current data sector */
 8007c9c:	68fb      	ldr	r3, [r7, #12]
 8007c9e:	2200      	movs	r2, #0
 8007ca0:	61da      	str	r2, [r3, #28]
			fp->fptr = 0;		/* Set file pointer top of the file */
 8007ca2:	68fb      	ldr	r3, [r7, #12]
 8007ca4:	2200      	movs	r2, #0
 8007ca6:	615a      	str	r2, [r3, #20]
#if !FF_FS_READONLY
#if !FF_FS_TINY
			memset(fp->buf, 0, sizeof fp->buf);	/* Clear sector buffer */
 8007ca8:	68fb      	ldr	r3, [r7, #12]
 8007caa:	3328      	adds	r3, #40	@ 0x28
 8007cac:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8007cb0:	2100      	movs	r1, #0
 8007cb2:	4618      	mov	r0, r3
 8007cb4:	f00b f8a4 	bl	8012e00 <memset>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 8007cb8:	79fb      	ldrb	r3, [r7, #7]
 8007cba:	f003 0320 	and.w	r3, r3, #32
 8007cbe:	2b00      	cmp	r3, #0
 8007cc0:	d06e      	beq.n	8007da0 <f_open+0x310>
 8007cc2:	68fb      	ldr	r3, [r7, #12]
 8007cc4:	68db      	ldr	r3, [r3, #12]
 8007cc6:	2b00      	cmp	r3, #0
 8007cc8:	d06a      	beq.n	8007da0 <f_open+0x310>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 8007cca:	68fb      	ldr	r3, [r7, #12]
 8007ccc:	68da      	ldr	r2, [r3, #12]
 8007cce:	68fb      	ldr	r3, [r7, #12]
 8007cd0:	615a      	str	r2, [r3, #20]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 8007cd2:	697b      	ldr	r3, [r7, #20]
 8007cd4:	895b      	ldrh	r3, [r3, #10]
 8007cd6:	461a      	mov	r2, r3
 8007cd8:	697b      	ldr	r3, [r7, #20]
 8007cda:	899b      	ldrh	r3, [r3, #12]
 8007cdc:	fb02 f303 	mul.w	r3, r2, r3
 8007ce0:	647b      	str	r3, [r7, #68]	@ 0x44
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 8007ce2:	68fb      	ldr	r3, [r7, #12]
 8007ce4:	689b      	ldr	r3, [r3, #8]
 8007ce6:	65bb      	str	r3, [r7, #88]	@ 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8007ce8:	68fb      	ldr	r3, [r7, #12]
 8007cea:	68db      	ldr	r3, [r3, #12]
 8007cec:	657b      	str	r3, [r7, #84]	@ 0x54
 8007cee:	e016      	b.n	8007d1e <f_open+0x28e>
					clst = get_fat(&fp->obj, clst);
 8007cf0:	68fb      	ldr	r3, [r7, #12]
 8007cf2:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8007cf4:	4618      	mov	r0, r3
 8007cf6:	f7fe fb94 	bl	8006422 <get_fat>
 8007cfa:	65b8      	str	r0, [r7, #88]	@ 0x58
					if (clst <= 1) res = FR_INT_ERR;
 8007cfc:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8007cfe:	2b01      	cmp	r3, #1
 8007d00:	d802      	bhi.n	8007d08 <f_open+0x278>
 8007d02:	2302      	movs	r3, #2
 8007d04:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 8007d08:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8007d0a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007d0e:	d102      	bne.n	8007d16 <f_open+0x286>
 8007d10:	2301      	movs	r3, #1
 8007d12:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8007d16:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8007d18:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007d1a:	1ad3      	subs	r3, r2, r3
 8007d1c:	657b      	str	r3, [r7, #84]	@ 0x54
 8007d1e:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8007d22:	2b00      	cmp	r3, #0
 8007d24:	d103      	bne.n	8007d2e <f_open+0x29e>
 8007d26:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8007d28:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007d2a:	429a      	cmp	r2, r3
 8007d2c:	d8e0      	bhi.n	8007cf0 <f_open+0x260>
				}
				fp->clust = clst;
 8007d2e:	68fb      	ldr	r3, [r7, #12]
 8007d30:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8007d32:	619a      	str	r2, [r3, #24]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 8007d34:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8007d38:	2b00      	cmp	r3, #0
 8007d3a:	d131      	bne.n	8007da0 <f_open+0x310>
 8007d3c:	697b      	ldr	r3, [r7, #20]
 8007d3e:	899b      	ldrh	r3, [r3, #12]
 8007d40:	461a      	mov	r2, r3
 8007d42:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007d44:	fbb3 f1f2 	udiv	r1, r3, r2
 8007d48:	fb01 f202 	mul.w	r2, r1, r2
 8007d4c:	1a9b      	subs	r3, r3, r2
 8007d4e:	2b00      	cmp	r3, #0
 8007d50:	d026      	beq.n	8007da0 <f_open+0x310>
					sc = clst2sect(fs, clst);
 8007d52:	697b      	ldr	r3, [r7, #20]
 8007d54:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8007d56:	4618      	mov	r0, r3
 8007d58:	f7fe fb44 	bl	80063e4 <clst2sect>
 8007d5c:	64b8      	str	r0, [r7, #72]	@ 0x48
					if (sc == 0) {
 8007d5e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007d60:	2b00      	cmp	r3, #0
 8007d62:	d103      	bne.n	8007d6c <f_open+0x2dc>
						res = FR_INT_ERR;
 8007d64:	2302      	movs	r3, #2
 8007d66:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 8007d6a:	e019      	b.n	8007da0 <f_open+0x310>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 8007d6c:	697b      	ldr	r3, [r7, #20]
 8007d6e:	899b      	ldrh	r3, [r3, #12]
 8007d70:	461a      	mov	r2, r3
 8007d72:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007d74:	fbb3 f2f2 	udiv	r2, r3, r2
 8007d78:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007d7a:	441a      	add	r2, r3
 8007d7c:	68fb      	ldr	r3, [r7, #12]
 8007d7e:	61da      	str	r2, [r3, #28]
#if !FF_FS_TINY
						if (disk_read(fs->pdrv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 8007d80:	697b      	ldr	r3, [r7, #20]
 8007d82:	7858      	ldrb	r0, [r3, #1]
 8007d84:	68fb      	ldr	r3, [r7, #12]
 8007d86:	f103 0128 	add.w	r1, r3, #40	@ 0x28
 8007d8a:	68fb      	ldr	r3, [r7, #12]
 8007d8c:	69da      	ldr	r2, [r3, #28]
 8007d8e:	2301      	movs	r3, #1
 8007d90:	f7fe f8c4 	bl	8005f1c <disk_read>
 8007d94:	4603      	mov	r3, r0
 8007d96:	2b00      	cmp	r3, #0
 8007d98:	d002      	beq.n	8007da0 <f_open+0x310>
 8007d9a:	2301      	movs	r3, #1
 8007d9c:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 8007da0:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8007da4:	2b00      	cmp	r3, #0
 8007da6:	d002      	beq.n	8007dae <f_open+0x31e>
 8007da8:	68fb      	ldr	r3, [r7, #12]
 8007daa:	2200      	movs	r2, #0
 8007dac:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 8007dae:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
}
 8007db2:	4618      	mov	r0, r3
 8007db4:	3760      	adds	r7, #96	@ 0x60
 8007db6:	46bd      	mov	sp, r7
 8007db8:	bd80      	pop	{r7, pc}
 8007dba:	bf00      	nop
 8007dbc:	54210000 	.word	0x54210000

08007dc0 <f_read>:
	FIL* fp, 	/* Open file to be read */
	void* buff,	/* Data buffer to store the read data */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Number of bytes read */
)
{
 8007dc0:	b580      	push	{r7, lr}
 8007dc2:	b08e      	sub	sp, #56	@ 0x38
 8007dc4:	af00      	add	r7, sp, #0
 8007dc6:	60f8      	str	r0, [r7, #12]
 8007dc8:	60b9      	str	r1, [r7, #8]
 8007dca:	607a      	str	r2, [r7, #4]
 8007dcc:	603b      	str	r3, [r7, #0]
	FATFS *fs;
	DWORD clst;
	LBA_t sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 8007dce:	68bb      	ldr	r3, [r7, #8]
 8007dd0:	627b      	str	r3, [r7, #36]	@ 0x24


	*br = 0;	/* Clear read byte counter */
 8007dd2:	683b      	ldr	r3, [r7, #0]
 8007dd4:	2200      	movs	r2, #0
 8007dd6:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 8007dd8:	68fb      	ldr	r3, [r7, #12]
 8007dda:	f107 0214 	add.w	r2, r7, #20
 8007dde:	4611      	mov	r1, r2
 8007de0:	4618      	mov	r0, r3
 8007de2:	f7ff fdd5 	bl	8007990 <validate>
 8007de6:	4603      	mov	r3, r0
 8007de8:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8007dec:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8007df0:	2b00      	cmp	r3, #0
 8007df2:	d107      	bne.n	8007e04 <f_read+0x44>
 8007df4:	68fb      	ldr	r3, [r7, #12]
 8007df6:	7c5b      	ldrb	r3, [r3, #17]
 8007df8:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 8007dfc:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8007e00:	2b00      	cmp	r3, #0
 8007e02:	d002      	beq.n	8007e0a <f_read+0x4a>
 8007e04:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8007e08:	e129      	b.n	800805e <f_read+0x29e>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 8007e0a:	68fb      	ldr	r3, [r7, #12]
 8007e0c:	7c1b      	ldrb	r3, [r3, #16]
 8007e0e:	f003 0301 	and.w	r3, r3, #1
 8007e12:	2b00      	cmp	r3, #0
 8007e14:	d101      	bne.n	8007e1a <f_read+0x5a>
 8007e16:	2307      	movs	r3, #7
 8007e18:	e121      	b.n	800805e <f_read+0x29e>
	remain = fp->obj.objsize - fp->fptr;
 8007e1a:	68fb      	ldr	r3, [r7, #12]
 8007e1c:	68da      	ldr	r2, [r3, #12]
 8007e1e:	68fb      	ldr	r3, [r7, #12]
 8007e20:	695b      	ldr	r3, [r3, #20]
 8007e22:	1ad3      	subs	r3, r2, r3
 8007e24:	623b      	str	r3, [r7, #32]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 8007e26:	687a      	ldr	r2, [r7, #4]
 8007e28:	6a3b      	ldr	r3, [r7, #32]
 8007e2a:	429a      	cmp	r2, r3
 8007e2c:	f240 8112 	bls.w	8008054 <f_read+0x294>
 8007e30:	6a3b      	ldr	r3, [r7, #32]
 8007e32:	607b      	str	r3, [r7, #4]

	for ( ; btr > 0; btr -= rcnt, *br += rcnt, rbuff += rcnt, fp->fptr += rcnt) {	/* Repeat until btr bytes read */
 8007e34:	e10e      	b.n	8008054 <f_read+0x294>
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 8007e36:	68fb      	ldr	r3, [r7, #12]
 8007e38:	695b      	ldr	r3, [r3, #20]
 8007e3a:	697a      	ldr	r2, [r7, #20]
 8007e3c:	8992      	ldrh	r2, [r2, #12]
 8007e3e:	fbb3 f1f2 	udiv	r1, r3, r2
 8007e42:	fb01 f202 	mul.w	r2, r1, r2
 8007e46:	1a9b      	subs	r3, r3, r2
 8007e48:	2b00      	cmp	r3, #0
 8007e4a:	f040 80c9 	bne.w	8007fe0 <f_read+0x220>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 8007e4e:	68fb      	ldr	r3, [r7, #12]
 8007e50:	695b      	ldr	r3, [r3, #20]
 8007e52:	697a      	ldr	r2, [r7, #20]
 8007e54:	8992      	ldrh	r2, [r2, #12]
 8007e56:	fbb3 f3f2 	udiv	r3, r3, r2
 8007e5a:	697a      	ldr	r2, [r7, #20]
 8007e5c:	8952      	ldrh	r2, [r2, #10]
 8007e5e:	3a01      	subs	r2, #1
 8007e60:	4013      	ands	r3, r2
 8007e62:	61fb      	str	r3, [r7, #28]
			if (csect == 0) {					/* On the cluster boundary? */
 8007e64:	69fb      	ldr	r3, [r7, #28]
 8007e66:	2b00      	cmp	r3, #0
 8007e68:	d123      	bne.n	8007eb2 <f_read+0xf2>
				if (fp->fptr == 0) {			/* On the top of the file? */
 8007e6a:	68fb      	ldr	r3, [r7, #12]
 8007e6c:	695b      	ldr	r3, [r3, #20]
 8007e6e:	2b00      	cmp	r3, #0
 8007e70:	d103      	bne.n	8007e7a <f_read+0xba>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 8007e72:	68fb      	ldr	r3, [r7, #12]
 8007e74:	689b      	ldr	r3, [r3, #8]
 8007e76:	633b      	str	r3, [r7, #48]	@ 0x30
 8007e78:	e007      	b.n	8007e8a <f_read+0xca>
					if (fp->cltbl) {
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 8007e7a:	68fa      	ldr	r2, [r7, #12]
 8007e7c:	68fb      	ldr	r3, [r7, #12]
 8007e7e:	699b      	ldr	r3, [r3, #24]
 8007e80:	4619      	mov	r1, r3
 8007e82:	4610      	mov	r0, r2
 8007e84:	f7fe facd 	bl	8006422 <get_fat>
 8007e88:	6338      	str	r0, [r7, #48]	@ 0x30
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 8007e8a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007e8c:	2b01      	cmp	r3, #1
 8007e8e:	d804      	bhi.n	8007e9a <f_read+0xda>
 8007e90:	68fb      	ldr	r3, [r7, #12]
 8007e92:	2202      	movs	r2, #2
 8007e94:	745a      	strb	r2, [r3, #17]
 8007e96:	2302      	movs	r3, #2
 8007e98:	e0e1      	b.n	800805e <f_read+0x29e>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8007e9a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007e9c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007ea0:	d104      	bne.n	8007eac <f_read+0xec>
 8007ea2:	68fb      	ldr	r3, [r7, #12]
 8007ea4:	2201      	movs	r2, #1
 8007ea6:	745a      	strb	r2, [r3, #17]
 8007ea8:	2301      	movs	r3, #1
 8007eaa:	e0d8      	b.n	800805e <f_read+0x29e>
				fp->clust = clst;				/* Update current cluster */
 8007eac:	68fb      	ldr	r3, [r7, #12]
 8007eae:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007eb0:	619a      	str	r2, [r3, #24]
			}
			sect = clst2sect(fs, fp->clust);	/* Get current sector */
 8007eb2:	697a      	ldr	r2, [r7, #20]
 8007eb4:	68fb      	ldr	r3, [r7, #12]
 8007eb6:	699b      	ldr	r3, [r3, #24]
 8007eb8:	4619      	mov	r1, r3
 8007eba:	4610      	mov	r0, r2
 8007ebc:	f7fe fa92 	bl	80063e4 <clst2sect>
 8007ec0:	61b8      	str	r0, [r7, #24]
			if (sect == 0) ABORT(fs, FR_INT_ERR);
 8007ec2:	69bb      	ldr	r3, [r7, #24]
 8007ec4:	2b00      	cmp	r3, #0
 8007ec6:	d104      	bne.n	8007ed2 <f_read+0x112>
 8007ec8:	68fb      	ldr	r3, [r7, #12]
 8007eca:	2202      	movs	r2, #2
 8007ecc:	745a      	strb	r2, [r3, #17]
 8007ece:	2302      	movs	r3, #2
 8007ed0:	e0c5      	b.n	800805e <f_read+0x29e>
			sect += csect;
 8007ed2:	69ba      	ldr	r2, [r7, #24]
 8007ed4:	69fb      	ldr	r3, [r7, #28]
 8007ed6:	4413      	add	r3, r2
 8007ed8:	61bb      	str	r3, [r7, #24]
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 8007eda:	697b      	ldr	r3, [r7, #20]
 8007edc:	899b      	ldrh	r3, [r3, #12]
 8007ede:	461a      	mov	r2, r3
 8007ee0:	687b      	ldr	r3, [r7, #4]
 8007ee2:	fbb3 f3f2 	udiv	r3, r3, r2
 8007ee6:	62bb      	str	r3, [r7, #40]	@ 0x28
			if (cc > 0) {						/* Read maximum contiguous sectors directly */
 8007ee8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007eea:	2b00      	cmp	r3, #0
 8007eec:	d041      	beq.n	8007f72 <f_read+0x1b2>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8007eee:	69fa      	ldr	r2, [r7, #28]
 8007ef0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007ef2:	4413      	add	r3, r2
 8007ef4:	697a      	ldr	r2, [r7, #20]
 8007ef6:	8952      	ldrh	r2, [r2, #10]
 8007ef8:	4293      	cmp	r3, r2
 8007efa:	d905      	bls.n	8007f08 <f_read+0x148>
					cc = fs->csize - csect;
 8007efc:	697b      	ldr	r3, [r7, #20]
 8007efe:	895b      	ldrh	r3, [r3, #10]
 8007f00:	461a      	mov	r2, r3
 8007f02:	69fb      	ldr	r3, [r7, #28]
 8007f04:	1ad3      	subs	r3, r2, r3
 8007f06:	62bb      	str	r3, [r7, #40]	@ 0x28
				}
				if (disk_read(fs->pdrv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8007f08:	697b      	ldr	r3, [r7, #20]
 8007f0a:	7858      	ldrb	r0, [r3, #1]
 8007f0c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007f0e:	69ba      	ldr	r2, [r7, #24]
 8007f10:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8007f12:	f7fe f803 	bl	8005f1c <disk_read>
 8007f16:	4603      	mov	r3, r0
 8007f18:	2b00      	cmp	r3, #0
 8007f1a:	d004      	beq.n	8007f26 <f_read+0x166>
 8007f1c:	68fb      	ldr	r3, [r7, #12]
 8007f1e:	2201      	movs	r2, #1
 8007f20:	745a      	strb	r2, [r3, #17]
 8007f22:	2301      	movs	r3, #1
 8007f24:	e09b      	b.n	800805e <f_read+0x29e>
#if FF_FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					memcpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 8007f26:	68fb      	ldr	r3, [r7, #12]
 8007f28:	7c1b      	ldrb	r3, [r3, #16]
 8007f2a:	b25b      	sxtb	r3, r3
 8007f2c:	2b00      	cmp	r3, #0
 8007f2e:	da18      	bge.n	8007f62 <f_read+0x1a2>
 8007f30:	68fb      	ldr	r3, [r7, #12]
 8007f32:	69da      	ldr	r2, [r3, #28]
 8007f34:	69bb      	ldr	r3, [r7, #24]
 8007f36:	1ad3      	subs	r3, r2, r3
 8007f38:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8007f3a:	429a      	cmp	r2, r3
 8007f3c:	d911      	bls.n	8007f62 <f_read+0x1a2>
					memcpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 8007f3e:	68fb      	ldr	r3, [r7, #12]
 8007f40:	69da      	ldr	r2, [r3, #28]
 8007f42:	69bb      	ldr	r3, [r7, #24]
 8007f44:	1ad3      	subs	r3, r2, r3
 8007f46:	697a      	ldr	r2, [r7, #20]
 8007f48:	8992      	ldrh	r2, [r2, #12]
 8007f4a:	fb02 f303 	mul.w	r3, r2, r3
 8007f4e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007f50:	18d0      	adds	r0, r2, r3
 8007f52:	68fb      	ldr	r3, [r7, #12]
 8007f54:	f103 0128 	add.w	r1, r3, #40	@ 0x28
 8007f58:	697b      	ldr	r3, [r7, #20]
 8007f5a:	899b      	ldrh	r3, [r3, #12]
 8007f5c:	461a      	mov	r2, r3
 8007f5e:	f00a ffd3 	bl	8012f08 <memcpy>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 8007f62:	697b      	ldr	r3, [r7, #20]
 8007f64:	899b      	ldrh	r3, [r3, #12]
 8007f66:	461a      	mov	r2, r3
 8007f68:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007f6a:	fb02 f303 	mul.w	r3, r2, r3
 8007f6e:	62fb      	str	r3, [r7, #44]	@ 0x2c
				continue;
 8007f70:	e05c      	b.n	800802c <f_read+0x26c>
			}
#if !FF_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 8007f72:	68fb      	ldr	r3, [r7, #12]
 8007f74:	69db      	ldr	r3, [r3, #28]
 8007f76:	69ba      	ldr	r2, [r7, #24]
 8007f78:	429a      	cmp	r2, r3
 8007f7a:	d02e      	beq.n	8007fda <f_read+0x21a>
#if !FF_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 8007f7c:	68fb      	ldr	r3, [r7, #12]
 8007f7e:	7c1b      	ldrb	r3, [r3, #16]
 8007f80:	b25b      	sxtb	r3, r3
 8007f82:	2b00      	cmp	r3, #0
 8007f84:	da18      	bge.n	8007fb8 <f_read+0x1f8>
					if (disk_write(fs->pdrv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8007f86:	697b      	ldr	r3, [r7, #20]
 8007f88:	7858      	ldrb	r0, [r3, #1]
 8007f8a:	68fb      	ldr	r3, [r7, #12]
 8007f8c:	f103 0128 	add.w	r1, r3, #40	@ 0x28
 8007f90:	68fb      	ldr	r3, [r7, #12]
 8007f92:	69da      	ldr	r2, [r3, #28]
 8007f94:	2301      	movs	r3, #1
 8007f96:	f7fd fff3 	bl	8005f80 <disk_write>
 8007f9a:	4603      	mov	r3, r0
 8007f9c:	2b00      	cmp	r3, #0
 8007f9e:	d004      	beq.n	8007faa <f_read+0x1ea>
 8007fa0:	68fb      	ldr	r3, [r7, #12]
 8007fa2:	2201      	movs	r2, #1
 8007fa4:	745a      	strb	r2, [r3, #17]
 8007fa6:	2301      	movs	r3, #1
 8007fa8:	e059      	b.n	800805e <f_read+0x29e>
					fp->flag &= (BYTE)~FA_DIRTY;
 8007faa:	68fb      	ldr	r3, [r7, #12]
 8007fac:	7c1b      	ldrb	r3, [r3, #16]
 8007fae:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007fb2:	b2da      	uxtb	r2, r3
 8007fb4:	68fb      	ldr	r3, [r7, #12]
 8007fb6:	741a      	strb	r2, [r3, #16]
				}
#endif
				if (disk_read(fs->pdrv, fp->buf, sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 8007fb8:	697b      	ldr	r3, [r7, #20]
 8007fba:	7858      	ldrb	r0, [r3, #1]
 8007fbc:	68fb      	ldr	r3, [r7, #12]
 8007fbe:	f103 0128 	add.w	r1, r3, #40	@ 0x28
 8007fc2:	2301      	movs	r3, #1
 8007fc4:	69ba      	ldr	r2, [r7, #24]
 8007fc6:	f7fd ffa9 	bl	8005f1c <disk_read>
 8007fca:	4603      	mov	r3, r0
 8007fcc:	2b00      	cmp	r3, #0
 8007fce:	d004      	beq.n	8007fda <f_read+0x21a>
 8007fd0:	68fb      	ldr	r3, [r7, #12]
 8007fd2:	2201      	movs	r2, #1
 8007fd4:	745a      	strb	r2, [r3, #17]
 8007fd6:	2301      	movs	r3, #1
 8007fd8:	e041      	b.n	800805e <f_read+0x29e>
			}
#endif
			fp->sect = sect;
 8007fda:	68fb      	ldr	r3, [r7, #12]
 8007fdc:	69ba      	ldr	r2, [r7, #24]
 8007fde:	61da      	str	r2, [r3, #28]
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes remains in the sector */
 8007fe0:	697b      	ldr	r3, [r7, #20]
 8007fe2:	899b      	ldrh	r3, [r3, #12]
 8007fe4:	4618      	mov	r0, r3
 8007fe6:	68fb      	ldr	r3, [r7, #12]
 8007fe8:	695b      	ldr	r3, [r3, #20]
 8007fea:	697a      	ldr	r2, [r7, #20]
 8007fec:	8992      	ldrh	r2, [r2, #12]
 8007fee:	fbb3 f1f2 	udiv	r1, r3, r2
 8007ff2:	fb01 f202 	mul.w	r2, r1, r2
 8007ff6:	1a9b      	subs	r3, r3, r2
 8007ff8:	1ac3      	subs	r3, r0, r3
 8007ffa:	62fb      	str	r3, [r7, #44]	@ 0x2c
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 8007ffc:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007ffe:	687b      	ldr	r3, [r7, #4]
 8008000:	429a      	cmp	r2, r3
 8008002:	d901      	bls.n	8008008 <f_read+0x248>
 8008004:	687b      	ldr	r3, [r7, #4]
 8008006:	62fb      	str	r3, [r7, #44]	@ 0x2c
#if FF_FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		memcpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		memcpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 8008008:	68fb      	ldr	r3, [r7, #12]
 800800a:	f103 0128 	add.w	r1, r3, #40	@ 0x28
 800800e:	68fb      	ldr	r3, [r7, #12]
 8008010:	695b      	ldr	r3, [r3, #20]
 8008012:	697a      	ldr	r2, [r7, #20]
 8008014:	8992      	ldrh	r2, [r2, #12]
 8008016:	fbb3 f0f2 	udiv	r0, r3, r2
 800801a:	fb00 f202 	mul.w	r2, r0, r2
 800801e:	1a9b      	subs	r3, r3, r2
 8008020:	440b      	add	r3, r1
 8008022:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008024:	4619      	mov	r1, r3
 8008026:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8008028:	f00a ff6e 	bl	8012f08 <memcpy>
	for ( ; btr > 0; btr -= rcnt, *br += rcnt, rbuff += rcnt, fp->fptr += rcnt) {	/* Repeat until btr bytes read */
 800802c:	687a      	ldr	r2, [r7, #4]
 800802e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008030:	1ad3      	subs	r3, r2, r3
 8008032:	607b      	str	r3, [r7, #4]
 8008034:	683b      	ldr	r3, [r7, #0]
 8008036:	681a      	ldr	r2, [r3, #0]
 8008038:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800803a:	441a      	add	r2, r3
 800803c:	683b      	ldr	r3, [r7, #0]
 800803e:	601a      	str	r2, [r3, #0]
 8008040:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008042:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008044:	4413      	add	r3, r2
 8008046:	627b      	str	r3, [r7, #36]	@ 0x24
 8008048:	68fb      	ldr	r3, [r7, #12]
 800804a:	695a      	ldr	r2, [r3, #20]
 800804c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800804e:	441a      	add	r2, r3
 8008050:	68fb      	ldr	r3, [r7, #12]
 8008052:	615a      	str	r2, [r3, #20]
 8008054:	687b      	ldr	r3, [r7, #4]
 8008056:	2b00      	cmp	r3, #0
 8008058:	f47f aeed 	bne.w	8007e36 <f_read+0x76>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 800805c:	2300      	movs	r3, #0
}
 800805e:	4618      	mov	r0, r3
 8008060:	3738      	adds	r7, #56	@ 0x38
 8008062:	46bd      	mov	sp, r7
 8008064:	bd80      	pop	{r7, pc}

08008066 <f_write>:
	FIL* fp,			/* Open file to be written */
	const void* buff,	/* Data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Number of bytes written */
)
{
 8008066:	b580      	push	{r7, lr}
 8008068:	b08c      	sub	sp, #48	@ 0x30
 800806a:	af00      	add	r7, sp, #0
 800806c:	60f8      	str	r0, [r7, #12]
 800806e:	60b9      	str	r1, [r7, #8]
 8008070:	607a      	str	r2, [r7, #4]
 8008072:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst;
	LBA_t sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 8008074:	68bb      	ldr	r3, [r7, #8]
 8008076:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 8008078:	683b      	ldr	r3, [r7, #0]
 800807a:	2200      	movs	r2, #0
 800807c:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 800807e:	68fb      	ldr	r3, [r7, #12]
 8008080:	f107 0210 	add.w	r2, r7, #16
 8008084:	4611      	mov	r1, r2
 8008086:	4618      	mov	r0, r3
 8008088:	f7ff fc82 	bl	8007990 <validate>
 800808c:	4603      	mov	r3, r0
 800808e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8008092:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8008096:	2b00      	cmp	r3, #0
 8008098:	d107      	bne.n	80080aa <f_write+0x44>
 800809a:	68fb      	ldr	r3, [r7, #12]
 800809c:	7c5b      	ldrb	r3, [r3, #17]
 800809e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 80080a2:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80080a6:	2b00      	cmp	r3, #0
 80080a8:	d002      	beq.n	80080b0 <f_write+0x4a>
 80080aa:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80080ae:	e15e      	b.n	800836e <f_write+0x308>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 80080b0:	68fb      	ldr	r3, [r7, #12]
 80080b2:	7c1b      	ldrb	r3, [r3, #16]
 80080b4:	f003 0302 	and.w	r3, r3, #2
 80080b8:	2b00      	cmp	r3, #0
 80080ba:	d101      	bne.n	80080c0 <f_write+0x5a>
 80080bc:	2307      	movs	r3, #7
 80080be:	e156      	b.n	800836e <f_write+0x308>

	/* Check fptr wrap-around (file size cannot reach 4 GiB at FAT volume) */
	if ((!FF_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 80080c0:	68fb      	ldr	r3, [r7, #12]
 80080c2:	695a      	ldr	r2, [r3, #20]
 80080c4:	687b      	ldr	r3, [r7, #4]
 80080c6:	441a      	add	r2, r3
 80080c8:	68fb      	ldr	r3, [r7, #12]
 80080ca:	695b      	ldr	r3, [r3, #20]
 80080cc:	429a      	cmp	r2, r3
 80080ce:	f080 8140 	bcs.w	8008352 <f_write+0x2ec>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 80080d2:	68fb      	ldr	r3, [r7, #12]
 80080d4:	695b      	ldr	r3, [r3, #20]
 80080d6:	43db      	mvns	r3, r3
 80080d8:	607b      	str	r3, [r7, #4]
	}

	for ( ; btw > 0; btw -= wcnt, *bw += wcnt, wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize) {	/* Repeat until all data written */
 80080da:	e13a      	b.n	8008352 <f_write+0x2ec>
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 80080dc:	68fb      	ldr	r3, [r7, #12]
 80080de:	695b      	ldr	r3, [r3, #20]
 80080e0:	693a      	ldr	r2, [r7, #16]
 80080e2:	8992      	ldrh	r2, [r2, #12]
 80080e4:	fbb3 f1f2 	udiv	r1, r3, r2
 80080e8:	fb01 f202 	mul.w	r2, r1, r2
 80080ec:	1a9b      	subs	r3, r3, r2
 80080ee:	2b00      	cmp	r3, #0
 80080f0:	f040 80e5 	bne.w	80082be <f_write+0x258>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 80080f4:	68fb      	ldr	r3, [r7, #12]
 80080f6:	695b      	ldr	r3, [r3, #20]
 80080f8:	693a      	ldr	r2, [r7, #16]
 80080fa:	8992      	ldrh	r2, [r2, #12]
 80080fc:	fbb3 f3f2 	udiv	r3, r3, r2
 8008100:	693a      	ldr	r2, [r7, #16]
 8008102:	8952      	ldrh	r2, [r2, #10]
 8008104:	3a01      	subs	r2, #1
 8008106:	4013      	ands	r3, r2
 8008108:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 800810a:	69bb      	ldr	r3, [r7, #24]
 800810c:	2b00      	cmp	r3, #0
 800810e:	d137      	bne.n	8008180 <f_write+0x11a>
				if (fp->fptr == 0) {		/* On the top of the file? */
 8008110:	68fb      	ldr	r3, [r7, #12]
 8008112:	695b      	ldr	r3, [r3, #20]
 8008114:	2b00      	cmp	r3, #0
 8008116:	d10c      	bne.n	8008132 <f_write+0xcc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 8008118:	68fb      	ldr	r3, [r7, #12]
 800811a:	689b      	ldr	r3, [r3, #8]
 800811c:	62bb      	str	r3, [r7, #40]	@ 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 800811e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008120:	2b00      	cmp	r3, #0
 8008122:	d10e      	bne.n	8008142 <f_write+0xdc>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 8008124:	68fb      	ldr	r3, [r7, #12]
 8008126:	2100      	movs	r1, #0
 8008128:	4618      	mov	r0, r3
 800812a:	f7fe fbcc 	bl	80068c6 <create_chain>
 800812e:	62b8      	str	r0, [r7, #40]	@ 0x28
 8008130:	e007      	b.n	8008142 <f_write+0xdc>
					if (fp->cltbl) {
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 8008132:	68fa      	ldr	r2, [r7, #12]
 8008134:	68fb      	ldr	r3, [r7, #12]
 8008136:	699b      	ldr	r3, [r3, #24]
 8008138:	4619      	mov	r1, r3
 800813a:	4610      	mov	r0, r2
 800813c:	f7fe fbc3 	bl	80068c6 <create_chain>
 8008140:	62b8      	str	r0, [r7, #40]	@ 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8008142:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008144:	2b00      	cmp	r3, #0
 8008146:	f000 8109 	beq.w	800835c <f_write+0x2f6>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 800814a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800814c:	2b01      	cmp	r3, #1
 800814e:	d104      	bne.n	800815a <f_write+0xf4>
 8008150:	68fb      	ldr	r3, [r7, #12]
 8008152:	2202      	movs	r2, #2
 8008154:	745a      	strb	r2, [r3, #17]
 8008156:	2302      	movs	r3, #2
 8008158:	e109      	b.n	800836e <f_write+0x308>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800815a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800815c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008160:	d104      	bne.n	800816c <f_write+0x106>
 8008162:	68fb      	ldr	r3, [r7, #12]
 8008164:	2201      	movs	r2, #1
 8008166:	745a      	strb	r2, [r3, #17]
 8008168:	2301      	movs	r3, #1
 800816a:	e100      	b.n	800836e <f_write+0x308>
				fp->clust = clst;			/* Update current cluster */
 800816c:	68fb      	ldr	r3, [r7, #12]
 800816e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8008170:	619a      	str	r2, [r3, #24]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 8008172:	68fb      	ldr	r3, [r7, #12]
 8008174:	689b      	ldr	r3, [r3, #8]
 8008176:	2b00      	cmp	r3, #0
 8008178:	d102      	bne.n	8008180 <f_write+0x11a>
 800817a:	68fb      	ldr	r3, [r7, #12]
 800817c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800817e:	609a      	str	r2, [r3, #8]
			}
#if FF_FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 8008180:	68fb      	ldr	r3, [r7, #12]
 8008182:	7c1b      	ldrb	r3, [r3, #16]
 8008184:	b25b      	sxtb	r3, r3
 8008186:	2b00      	cmp	r3, #0
 8008188:	da18      	bge.n	80081bc <f_write+0x156>
				if (disk_write(fs->pdrv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800818a:	693b      	ldr	r3, [r7, #16]
 800818c:	7858      	ldrb	r0, [r3, #1]
 800818e:	68fb      	ldr	r3, [r7, #12]
 8008190:	f103 0128 	add.w	r1, r3, #40	@ 0x28
 8008194:	68fb      	ldr	r3, [r7, #12]
 8008196:	69da      	ldr	r2, [r3, #28]
 8008198:	2301      	movs	r3, #1
 800819a:	f7fd fef1 	bl	8005f80 <disk_write>
 800819e:	4603      	mov	r3, r0
 80081a0:	2b00      	cmp	r3, #0
 80081a2:	d004      	beq.n	80081ae <f_write+0x148>
 80081a4:	68fb      	ldr	r3, [r7, #12]
 80081a6:	2201      	movs	r2, #1
 80081a8:	745a      	strb	r2, [r3, #17]
 80081aa:	2301      	movs	r3, #1
 80081ac:	e0df      	b.n	800836e <f_write+0x308>
				fp->flag &= (BYTE)~FA_DIRTY;
 80081ae:	68fb      	ldr	r3, [r7, #12]
 80081b0:	7c1b      	ldrb	r3, [r3, #16]
 80081b2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80081b6:	b2da      	uxtb	r2, r3
 80081b8:	68fb      	ldr	r3, [r7, #12]
 80081ba:	741a      	strb	r2, [r3, #16]
			}
#endif
			sect = clst2sect(fs, fp->clust);	/* Get current sector */
 80081bc:	693a      	ldr	r2, [r7, #16]
 80081be:	68fb      	ldr	r3, [r7, #12]
 80081c0:	699b      	ldr	r3, [r3, #24]
 80081c2:	4619      	mov	r1, r3
 80081c4:	4610      	mov	r0, r2
 80081c6:	f7fe f90d 	bl	80063e4 <clst2sect>
 80081ca:	6178      	str	r0, [r7, #20]
			if (sect == 0) ABORT(fs, FR_INT_ERR);
 80081cc:	697b      	ldr	r3, [r7, #20]
 80081ce:	2b00      	cmp	r3, #0
 80081d0:	d104      	bne.n	80081dc <f_write+0x176>
 80081d2:	68fb      	ldr	r3, [r7, #12]
 80081d4:	2202      	movs	r2, #2
 80081d6:	745a      	strb	r2, [r3, #17]
 80081d8:	2302      	movs	r3, #2
 80081da:	e0c8      	b.n	800836e <f_write+0x308>
			sect += csect;
 80081dc:	697a      	ldr	r2, [r7, #20]
 80081de:	69bb      	ldr	r3, [r7, #24]
 80081e0:	4413      	add	r3, r2
 80081e2:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 80081e4:	693b      	ldr	r3, [r7, #16]
 80081e6:	899b      	ldrh	r3, [r3, #12]
 80081e8:	461a      	mov	r2, r3
 80081ea:	687b      	ldr	r3, [r7, #4]
 80081ec:	fbb3 f3f2 	udiv	r3, r3, r2
 80081f0:	623b      	str	r3, [r7, #32]
			if (cc > 0) {					/* Write maximum contiguous sectors directly */
 80081f2:	6a3b      	ldr	r3, [r7, #32]
 80081f4:	2b00      	cmp	r3, #0
 80081f6:	d043      	beq.n	8008280 <f_write+0x21a>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 80081f8:	69ba      	ldr	r2, [r7, #24]
 80081fa:	6a3b      	ldr	r3, [r7, #32]
 80081fc:	4413      	add	r3, r2
 80081fe:	693a      	ldr	r2, [r7, #16]
 8008200:	8952      	ldrh	r2, [r2, #10]
 8008202:	4293      	cmp	r3, r2
 8008204:	d905      	bls.n	8008212 <f_write+0x1ac>
					cc = fs->csize - csect;
 8008206:	693b      	ldr	r3, [r7, #16]
 8008208:	895b      	ldrh	r3, [r3, #10]
 800820a:	461a      	mov	r2, r3
 800820c:	69bb      	ldr	r3, [r7, #24]
 800820e:	1ad3      	subs	r3, r2, r3
 8008210:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->pdrv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8008212:	693b      	ldr	r3, [r7, #16]
 8008214:	7858      	ldrb	r0, [r3, #1]
 8008216:	6a3b      	ldr	r3, [r7, #32]
 8008218:	697a      	ldr	r2, [r7, #20]
 800821a:	69f9      	ldr	r1, [r7, #28]
 800821c:	f7fd feb0 	bl	8005f80 <disk_write>
 8008220:	4603      	mov	r3, r0
 8008222:	2b00      	cmp	r3, #0
 8008224:	d004      	beq.n	8008230 <f_write+0x1ca>
 8008226:	68fb      	ldr	r3, [r7, #12]
 8008228:	2201      	movs	r2, #1
 800822a:	745a      	strb	r2, [r3, #17]
 800822c:	2301      	movs	r3, #1
 800822e:	e09e      	b.n	800836e <f_write+0x308>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					memcpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 8008230:	68fb      	ldr	r3, [r7, #12]
 8008232:	69da      	ldr	r2, [r3, #28]
 8008234:	697b      	ldr	r3, [r7, #20]
 8008236:	1ad3      	subs	r3, r2, r3
 8008238:	6a3a      	ldr	r2, [r7, #32]
 800823a:	429a      	cmp	r2, r3
 800823c:	d918      	bls.n	8008270 <f_write+0x20a>
					memcpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 800823e:	68fb      	ldr	r3, [r7, #12]
 8008240:	f103 0028 	add.w	r0, r3, #40	@ 0x28
 8008244:	68fb      	ldr	r3, [r7, #12]
 8008246:	69da      	ldr	r2, [r3, #28]
 8008248:	697b      	ldr	r3, [r7, #20]
 800824a:	1ad3      	subs	r3, r2, r3
 800824c:	693a      	ldr	r2, [r7, #16]
 800824e:	8992      	ldrh	r2, [r2, #12]
 8008250:	fb02 f303 	mul.w	r3, r2, r3
 8008254:	69fa      	ldr	r2, [r7, #28]
 8008256:	18d1      	adds	r1, r2, r3
 8008258:	693b      	ldr	r3, [r7, #16]
 800825a:	899b      	ldrh	r3, [r3, #12]
 800825c:	461a      	mov	r2, r3
 800825e:	f00a fe53 	bl	8012f08 <memcpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 8008262:	68fb      	ldr	r3, [r7, #12]
 8008264:	7c1b      	ldrb	r3, [r3, #16]
 8008266:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800826a:	b2da      	uxtb	r2, r3
 800826c:	68fb      	ldr	r3, [r7, #12]
 800826e:	741a      	strb	r2, [r3, #16]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 8008270:	693b      	ldr	r3, [r7, #16]
 8008272:	899b      	ldrh	r3, [r3, #12]
 8008274:	461a      	mov	r2, r3
 8008276:	6a3b      	ldr	r3, [r7, #32]
 8008278:	fb02 f303 	mul.w	r3, r2, r3
 800827c:	627b      	str	r3, [r7, #36]	@ 0x24
				continue;
 800827e:	e04b      	b.n	8008318 <f_write+0x2b2>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8008280:	68fb      	ldr	r3, [r7, #12]
 8008282:	69db      	ldr	r3, [r3, #28]
 8008284:	697a      	ldr	r2, [r7, #20]
 8008286:	429a      	cmp	r2, r3
 8008288:	d016      	beq.n	80082b8 <f_write+0x252>
				fp->fptr < fp->obj.objsize &&
 800828a:	68fb      	ldr	r3, [r7, #12]
 800828c:	695a      	ldr	r2, [r3, #20]
 800828e:	68fb      	ldr	r3, [r7, #12]
 8008290:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8008292:	429a      	cmp	r2, r3
 8008294:	d210      	bcs.n	80082b8 <f_write+0x252>
				disk_read(fs->pdrv, fp->buf, sect, 1) != RES_OK) {
 8008296:	693b      	ldr	r3, [r7, #16]
 8008298:	7858      	ldrb	r0, [r3, #1]
 800829a:	68fb      	ldr	r3, [r7, #12]
 800829c:	f103 0128 	add.w	r1, r3, #40	@ 0x28
 80082a0:	2301      	movs	r3, #1
 80082a2:	697a      	ldr	r2, [r7, #20]
 80082a4:	f7fd fe3a 	bl	8005f1c <disk_read>
 80082a8:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 80082aa:	2b00      	cmp	r3, #0
 80082ac:	d004      	beq.n	80082b8 <f_write+0x252>
					ABORT(fs, FR_DISK_ERR);
 80082ae:	68fb      	ldr	r3, [r7, #12]
 80082b0:	2201      	movs	r2, #1
 80082b2:	745a      	strb	r2, [r3, #17]
 80082b4:	2301      	movs	r3, #1
 80082b6:	e05a      	b.n	800836e <f_write+0x308>
			}
#endif
			fp->sect = sect;
 80082b8:	68fb      	ldr	r3, [r7, #12]
 80082ba:	697a      	ldr	r2, [r7, #20]
 80082bc:	61da      	str	r2, [r3, #28]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes remains in the sector */
 80082be:	693b      	ldr	r3, [r7, #16]
 80082c0:	899b      	ldrh	r3, [r3, #12]
 80082c2:	4618      	mov	r0, r3
 80082c4:	68fb      	ldr	r3, [r7, #12]
 80082c6:	695b      	ldr	r3, [r3, #20]
 80082c8:	693a      	ldr	r2, [r7, #16]
 80082ca:	8992      	ldrh	r2, [r2, #12]
 80082cc:	fbb3 f1f2 	udiv	r1, r3, r2
 80082d0:	fb01 f202 	mul.w	r2, r1, r2
 80082d4:	1a9b      	subs	r3, r3, r2
 80082d6:	1ac3      	subs	r3, r0, r3
 80082d8:	627b      	str	r3, [r7, #36]	@ 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 80082da:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80082dc:	687b      	ldr	r3, [r7, #4]
 80082de:	429a      	cmp	r2, r3
 80082e0:	d901      	bls.n	80082e6 <f_write+0x280>
 80082e2:	687b      	ldr	r3, [r7, #4]
 80082e4:	627b      	str	r3, [r7, #36]	@ 0x24
#if FF_FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		memcpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		memcpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 80082e6:	68fb      	ldr	r3, [r7, #12]
 80082e8:	f103 0128 	add.w	r1, r3, #40	@ 0x28
 80082ec:	68fb      	ldr	r3, [r7, #12]
 80082ee:	695b      	ldr	r3, [r3, #20]
 80082f0:	693a      	ldr	r2, [r7, #16]
 80082f2:	8992      	ldrh	r2, [r2, #12]
 80082f4:	fbb3 f0f2 	udiv	r0, r3, r2
 80082f8:	fb00 f202 	mul.w	r2, r0, r2
 80082fc:	1a9b      	subs	r3, r3, r2
 80082fe:	440b      	add	r3, r1
 8008300:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008302:	69f9      	ldr	r1, [r7, #28]
 8008304:	4618      	mov	r0, r3
 8008306:	f00a fdff 	bl	8012f08 <memcpy>
		fp->flag |= FA_DIRTY;
 800830a:	68fb      	ldr	r3, [r7, #12]
 800830c:	7c1b      	ldrb	r3, [r3, #16]
 800830e:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8008312:	b2da      	uxtb	r2, r3
 8008314:	68fb      	ldr	r3, [r7, #12]
 8008316:	741a      	strb	r2, [r3, #16]
	for ( ; btw > 0; btw -= wcnt, *bw += wcnt, wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize) {	/* Repeat until all data written */
 8008318:	687a      	ldr	r2, [r7, #4]
 800831a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800831c:	1ad3      	subs	r3, r2, r3
 800831e:	607b      	str	r3, [r7, #4]
 8008320:	683b      	ldr	r3, [r7, #0]
 8008322:	681a      	ldr	r2, [r3, #0]
 8008324:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008326:	441a      	add	r2, r3
 8008328:	683b      	ldr	r3, [r7, #0]
 800832a:	601a      	str	r2, [r3, #0]
 800832c:	69fa      	ldr	r2, [r7, #28]
 800832e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008330:	4413      	add	r3, r2
 8008332:	61fb      	str	r3, [r7, #28]
 8008334:	68fb      	ldr	r3, [r7, #12]
 8008336:	695a      	ldr	r2, [r3, #20]
 8008338:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800833a:	441a      	add	r2, r3
 800833c:	68fb      	ldr	r3, [r7, #12]
 800833e:	615a      	str	r2, [r3, #20]
 8008340:	68fb      	ldr	r3, [r7, #12]
 8008342:	68da      	ldr	r2, [r3, #12]
 8008344:	68fb      	ldr	r3, [r7, #12]
 8008346:	695b      	ldr	r3, [r3, #20]
 8008348:	429a      	cmp	r2, r3
 800834a:	bf38      	it	cc
 800834c:	461a      	movcc	r2, r3
 800834e:	68fb      	ldr	r3, [r7, #12]
 8008350:	60da      	str	r2, [r3, #12]
 8008352:	687b      	ldr	r3, [r7, #4]
 8008354:	2b00      	cmp	r3, #0
 8008356:	f47f aec1 	bne.w	80080dc <f_write+0x76>
 800835a:	e000      	b.n	800835e <f_write+0x2f8>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800835c:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 800835e:	68fb      	ldr	r3, [r7, #12]
 8008360:	7c1b      	ldrb	r3, [r3, #16]
 8008362:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008366:	b2da      	uxtb	r2, r3
 8008368:	68fb      	ldr	r3, [r7, #12]
 800836a:	741a      	strb	r2, [r3, #16]

	LEAVE_FF(fs, FR_OK);
 800836c:	2300      	movs	r3, #0
}
 800836e:	4618      	mov	r0, r3
 8008370:	3730      	adds	r7, #48	@ 0x30
 8008372:	46bd      	mov	sp, r7
 8008374:	bd80      	pop	{r7, pc}
	...

08008378 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Open file to be synced */
)
{
 8008378:	b580      	push	{r7, lr}
 800837a:	b086      	sub	sp, #24
 800837c:	af00      	add	r7, sp, #0
 800837e:	6078      	str	r0, [r7, #4]
	FATFS *fs;
	DWORD tm;
	BYTE *dir;


	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 8008380:	687b      	ldr	r3, [r7, #4]
 8008382:	f107 0208 	add.w	r2, r7, #8
 8008386:	4611      	mov	r1, r2
 8008388:	4618      	mov	r0, r3
 800838a:	f7ff fb01 	bl	8007990 <validate>
 800838e:	4603      	mov	r3, r0
 8008390:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8008392:	7dfb      	ldrb	r3, [r7, #23]
 8008394:	2b00      	cmp	r3, #0
 8008396:	d167      	bne.n	8008468 <f_sync+0xf0>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 8008398:	687b      	ldr	r3, [r7, #4]
 800839a:	7c1b      	ldrb	r3, [r3, #16]
 800839c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80083a0:	2b00      	cmp	r3, #0
 80083a2:	d061      	beq.n	8008468 <f_sync+0xf0>
#if !FF_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 80083a4:	687b      	ldr	r3, [r7, #4]
 80083a6:	7c1b      	ldrb	r3, [r3, #16]
 80083a8:	b25b      	sxtb	r3, r3
 80083aa:	2b00      	cmp	r3, #0
 80083ac:	da15      	bge.n	80083da <f_sync+0x62>
				if (disk_write(fs->pdrv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 80083ae:	68bb      	ldr	r3, [r7, #8]
 80083b0:	7858      	ldrb	r0, [r3, #1]
 80083b2:	687b      	ldr	r3, [r7, #4]
 80083b4:	f103 0128 	add.w	r1, r3, #40	@ 0x28
 80083b8:	687b      	ldr	r3, [r7, #4]
 80083ba:	69da      	ldr	r2, [r3, #28]
 80083bc:	2301      	movs	r3, #1
 80083be:	f7fd fddf 	bl	8005f80 <disk_write>
 80083c2:	4603      	mov	r3, r0
 80083c4:	2b00      	cmp	r3, #0
 80083c6:	d001      	beq.n	80083cc <f_sync+0x54>
 80083c8:	2301      	movs	r3, #1
 80083ca:	e04e      	b.n	800846a <f_sync+0xf2>
				fp->flag &= (BYTE)~FA_DIRTY;
 80083cc:	687b      	ldr	r3, [r7, #4]
 80083ce:	7c1b      	ldrb	r3, [r3, #16]
 80083d0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80083d4:	b2da      	uxtb	r2, r3
 80083d6:	687b      	ldr	r3, [r7, #4]
 80083d8:	741a      	strb	r2, [r3, #16]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 80083da:	4b26      	ldr	r3, [pc, #152]	@ (8008474 <f_sync+0xfc>)
 80083dc:	613b      	str	r3, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 80083de:	68ba      	ldr	r2, [r7, #8]
 80083e0:	687b      	ldr	r3, [r7, #4]
 80083e2:	6a1b      	ldr	r3, [r3, #32]
 80083e4:	4619      	mov	r1, r3
 80083e6:	4610      	mov	r0, r2
 80083e8:	f7fd ff61 	bl	80062ae <move_window>
 80083ec:	4603      	mov	r3, r0
 80083ee:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 80083f0:	7dfb      	ldrb	r3, [r7, #23]
 80083f2:	2b00      	cmp	r3, #0
 80083f4:	d138      	bne.n	8008468 <f_sync+0xf0>
					dir = fp->dir_ptr;
 80083f6:	687b      	ldr	r3, [r7, #4]
 80083f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80083fa:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive attribute to indicate that the file has been changed */
 80083fc:	68fb      	ldr	r3, [r7, #12]
 80083fe:	330b      	adds	r3, #11
 8008400:	781a      	ldrb	r2, [r3, #0]
 8008402:	68fb      	ldr	r3, [r7, #12]
 8008404:	330b      	adds	r3, #11
 8008406:	f042 0220 	orr.w	r2, r2, #32
 800840a:	b2d2      	uxtb	r2, r2
 800840c:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation information  */
 800840e:	687b      	ldr	r3, [r7, #4]
 8008410:	6818      	ldr	r0, [r3, #0]
 8008412:	687b      	ldr	r3, [r7, #4]
 8008414:	689b      	ldr	r3, [r3, #8]
 8008416:	461a      	mov	r2, r3
 8008418:	68f9      	ldr	r1, [r7, #12]
 800841a:	f7fe fd02 	bl	8006e22 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 800841e:	68fb      	ldr	r3, [r7, #12]
 8008420:	f103 021c 	add.w	r2, r3, #28
 8008424:	687b      	ldr	r3, [r7, #4]
 8008426:	68db      	ldr	r3, [r3, #12]
 8008428:	4619      	mov	r1, r3
 800842a:	4610      	mov	r0, r2
 800842c:	f7fd feb5 	bl	800619a <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 8008430:	68fb      	ldr	r3, [r7, #12]
 8008432:	3316      	adds	r3, #22
 8008434:	6939      	ldr	r1, [r7, #16]
 8008436:	4618      	mov	r0, r3
 8008438:	f7fd feaf 	bl	800619a <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 800843c:	68fb      	ldr	r3, [r7, #12]
 800843e:	3312      	adds	r3, #18
 8008440:	2100      	movs	r1, #0
 8008442:	4618      	mov	r0, r3
 8008444:	f7fd fe8e 	bl	8006164 <st_word>
					fs->wflag = 1;
 8008448:	68bb      	ldr	r3, [r7, #8]
 800844a:	2201      	movs	r2, #1
 800844c:	711a      	strb	r2, [r3, #4]
					res = sync_fs(fs);					/* Restore it to the directory */
 800844e:	68bb      	ldr	r3, [r7, #8]
 8008450:	4618      	mov	r0, r3
 8008452:	f7fd ff59 	bl	8006308 <sync_fs>
 8008456:	4603      	mov	r3, r0
 8008458:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 800845a:	687b      	ldr	r3, [r7, #4]
 800845c:	7c1b      	ldrb	r3, [r3, #16]
 800845e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008462:	b2da      	uxtb	r2, r3
 8008464:	687b      	ldr	r3, [r7, #4]
 8008466:	741a      	strb	r2, [r3, #16]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 8008468:	7dfb      	ldrb	r3, [r7, #23]
}
 800846a:	4618      	mov	r0, r3
 800846c:	3718      	adds	r7, #24
 800846e:	46bd      	mov	sp, r7
 8008470:	bd80      	pop	{r7, pc}
 8008472:	bf00      	nop
 8008474:	54210000 	.word	0x54210000

08008478 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Open file to be closed */
)
{
 8008478:	b580      	push	{r7, lr}
 800847a:	b084      	sub	sp, #16
 800847c:	af00      	add	r7, sp, #0
 800847e:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !FF_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 8008480:	6878      	ldr	r0, [r7, #4]
 8008482:	f7ff ff79 	bl	8008378 <f_sync>
 8008486:	4603      	mov	r3, r0
 8008488:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 800848a:	7bfb      	ldrb	r3, [r7, #15]
 800848c:	2b00      	cmp	r3, #0
 800848e:	d10e      	bne.n	80084ae <f_close+0x36>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 8008490:	687b      	ldr	r3, [r7, #4]
 8008492:	f107 0208 	add.w	r2, r7, #8
 8008496:	4611      	mov	r1, r2
 8008498:	4618      	mov	r0, r3
 800849a:	f7ff fa79 	bl	8007990 <validate>
 800849e:	4603      	mov	r3, r0
 80084a0:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 80084a2:	7bfb      	ldrb	r3, [r7, #15]
 80084a4:	2b00      	cmp	r3, #0
 80084a6:	d102      	bne.n	80084ae <f_close+0x36>
#if FF_FS_LOCK
			res = dec_share(fp->obj.lockid);		/* Decrement file open counter */
			if (res == FR_OK) fp->obj.fs = 0;	/* Invalidate file object */
#else
			fp->obj.fs = 0;	/* Invalidate file object */
 80084a8:	687b      	ldr	r3, [r7, #4]
 80084aa:	2200      	movs	r2, #0
 80084ac:	601a      	str	r2, [r3, #0]
#if FF_FS_REENTRANT
			unlock_volume(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 80084ae:	7bfb      	ldrb	r3, [r7, #15]
}
 80084b0:	4618      	mov	r0, r3
 80084b2:	3710      	adds	r7, #16
 80084b4:	46bd      	mov	sp, r7
 80084b6:	bd80      	pop	{r7, pc}

080084b8 <create_partition>:
	BYTE drv,			/* Physical drive number */
	const LBA_t plst[],	/* Partition list */
	BYTE sys,			/* System ID for each partition (for only MBR) */
	BYTE *buf			/* Working buffer for a sector */
)
{
 80084b8:	b580      	push	{r7, lr}
 80084ba:	b08e      	sub	sp, #56	@ 0x38
 80084bc:	af00      	add	r7, sp, #0
 80084be:	60b9      	str	r1, [r7, #8]
 80084c0:	607b      	str	r3, [r7, #4]
 80084c2:	4603      	mov	r3, r0
 80084c4:	73fb      	strb	r3, [r7, #15]
 80084c6:	4613      	mov	r3, r2
 80084c8:	73bb      	strb	r3, [r7, #14]
	DWORD sz_drv32, nxt_alloc32, sz_part32;
	BYTE *pte;
	BYTE hd, n_hd, sc, n_sc;

	/* Get physical drive size */
	if (disk_ioctl(drv, GET_SECTOR_COUNT, &sz_drv) != RES_OK) return FR_DISK_ERR;
 80084ca:	f107 0210 	add.w	r2, r7, #16
 80084ce:	7bfb      	ldrb	r3, [r7, #15]
 80084d0:	2101      	movs	r1, #1
 80084d2:	4618      	mov	r0, r3
 80084d4:	f7fd fd88 	bl	8005fe8 <disk_ioctl>
 80084d8:	4603      	mov	r3, r0
 80084da:	2b00      	cmp	r3, #0
 80084dc:	d001      	beq.n	80084e2 <create_partition+0x2a>
 80084de:	2301      	movs	r3, #1
 80084e0:	e108      	b.n	80086f4 <create_partition+0x23c>
		if (disk_write(drv, buf, 0, 1) != RES_OK) return FR_DISK_ERR;

	} else
#endif
	{	/* Create partitions in MBR format */
		sz_drv32 = (DWORD)sz_drv;
 80084e2:	693b      	ldr	r3, [r7, #16]
 80084e4:	623b      	str	r3, [r7, #32]
		n_sc = N_SEC_TRACK;				/* Determine drive CHS without any consideration of the drive geometry */
 80084e6:	233f      	movs	r3, #63	@ 0x3f
 80084e8:	77fb      	strb	r3, [r7, #31]
		for (n_hd = 8; n_hd != 0 && sz_drv32 / n_hd / n_sc > 1024; n_hd *= 2) ;
 80084ea:	2308      	movs	r3, #8
 80084ec:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 80084f0:	e004      	b.n	80084fc <create_partition+0x44>
 80084f2:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80084f6:	005b      	lsls	r3, r3, #1
 80084f8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 80084fc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8008500:	2b00      	cmp	r3, #0
 8008502:	d00a      	beq.n	800851a <create_partition+0x62>
 8008504:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8008508:	6a3a      	ldr	r2, [r7, #32]
 800850a:	fbb2 f2f3 	udiv	r2, r2, r3
 800850e:	7ffb      	ldrb	r3, [r7, #31]
 8008510:	fbb2 f3f3 	udiv	r3, r2, r3
 8008514:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008518:	d8eb      	bhi.n	80084f2 <create_partition+0x3a>
		if (n_hd == 0) n_hd = 255;		/* Number of heads needs to be <256 */
 800851a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800851e:	2b00      	cmp	r3, #0
 8008520:	d102      	bne.n	8008528 <create_partition+0x70>
 8008522:	23ff      	movs	r3, #255	@ 0xff
 8008524:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

		memset(buf, 0, FF_MAX_SS);		/* Clear MBR */
 8008528:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 800852c:	2100      	movs	r1, #0
 800852e:	6878      	ldr	r0, [r7, #4]
 8008530:	f00a fc66 	bl	8012e00 <memset>
		pte = buf + MBR_Table;	/* Partition table in the MBR */
 8008534:	687b      	ldr	r3, [r7, #4]
 8008536:	f503 73df 	add.w	r3, r3, #446	@ 0x1be
 800853a:	62bb      	str	r3, [r7, #40]	@ 0x28
		for (i = 0, nxt_alloc32 = n_sc; i < 4 && nxt_alloc32 != 0 && nxt_alloc32 < sz_drv32; i++, nxt_alloc32 += sz_part32) {
 800853c:	2300      	movs	r3, #0
 800853e:	637b      	str	r3, [r7, #52]	@ 0x34
 8008540:	7ffb      	ldrb	r3, [r7, #31]
 8008542:	633b      	str	r3, [r7, #48]	@ 0x30
 8008544:	e0b5      	b.n	80086b2 <create_partition+0x1fa>
			sz_part32 = (DWORD)plst[i];	/* Get partition size */
 8008546:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008548:	009b      	lsls	r3, r3, #2
 800854a:	68ba      	ldr	r2, [r7, #8]
 800854c:	4413      	add	r3, r2
 800854e:	681b      	ldr	r3, [r3, #0]
 8008550:	62fb      	str	r3, [r7, #44]	@ 0x2c
			if (sz_part32 <= 100) sz_part32 = (sz_part32 == 100) ? sz_drv32 : sz_drv32 / 100 * sz_part32;	/* Size in percentage? */
 8008552:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008554:	2b64      	cmp	r3, #100	@ 0x64
 8008556:	d80d      	bhi.n	8008574 <create_partition+0xbc>
 8008558:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800855a:	2b64      	cmp	r3, #100	@ 0x64
 800855c:	d008      	beq.n	8008570 <create_partition+0xb8>
 800855e:	6a3b      	ldr	r3, [r7, #32]
 8008560:	4a66      	ldr	r2, [pc, #408]	@ (80086fc <create_partition+0x244>)
 8008562:	fba2 2303 	umull	r2, r3, r2, r3
 8008566:	095b      	lsrs	r3, r3, #5
 8008568:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800856a:	fb02 f303 	mul.w	r3, r2, r3
 800856e:	e000      	b.n	8008572 <create_partition+0xba>
 8008570:	6a3b      	ldr	r3, [r7, #32]
 8008572:	62fb      	str	r3, [r7, #44]	@ 0x2c
			if (nxt_alloc32 + sz_part32 > sz_drv32 || nxt_alloc32 + sz_part32 < nxt_alloc32) sz_part32 = sz_drv32 - nxt_alloc32;	/* Clip at drive size */
 8008574:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008576:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008578:	4413      	add	r3, r2
 800857a:	6a3a      	ldr	r2, [r7, #32]
 800857c:	429a      	cmp	r2, r3
 800857e:	d305      	bcc.n	800858c <create_partition+0xd4>
 8008580:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008582:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008584:	4413      	add	r3, r2
 8008586:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008588:	429a      	cmp	r2, r3
 800858a:	d903      	bls.n	8008594 <create_partition+0xdc>
 800858c:	6a3a      	ldr	r2, [r7, #32]
 800858e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008590:	1ad3      	subs	r3, r2, r3
 8008592:	62fb      	str	r3, [r7, #44]	@ 0x2c
			if (sz_part32 == 0) break;	/* End of table or no sector to allocate? */
 8008594:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008596:	2b00      	cmp	r3, #0
 8008598:	f000 8097 	beq.w	80086ca <create_partition+0x212>

			st_dword(pte + PTE_StLba, nxt_alloc32);	/* Start LBA */
 800859c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800859e:	3308      	adds	r3, #8
 80085a0:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80085a2:	4618      	mov	r0, r3
 80085a4:	f7fd fdf9 	bl	800619a <st_dword>
			st_dword(pte + PTE_SizLba, sz_part32);	/* Number of sectors */
 80085a8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80085aa:	330c      	adds	r3, #12
 80085ac:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80085ae:	4618      	mov	r0, r3
 80085b0:	f7fd fdf3 	bl	800619a <st_dword>
			pte[PTE_System] = sys;					/* System type */
 80085b4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80085b6:	3304      	adds	r3, #4
 80085b8:	7bba      	ldrb	r2, [r7, #14]
 80085ba:	701a      	strb	r2, [r3, #0]

			cy = (UINT)(nxt_alloc32 / n_sc / n_hd);	/* Start cylinder */
 80085bc:	7ffb      	ldrb	r3, [r7, #31]
 80085be:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80085c0:	fbb2 f2f3 	udiv	r2, r2, r3
 80085c4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80085c8:	fbb2 f3f3 	udiv	r3, r2, r3
 80085cc:	61bb      	str	r3, [r7, #24]
			hd = (BYTE)(nxt_alloc32 / n_sc % n_hd);	/* Start head */
 80085ce:	7ffb      	ldrb	r3, [r7, #31]
 80085d0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80085d2:	fbb2 f3f3 	udiv	r3, r2, r3
 80085d6:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 80085da:	fbb3 f1f2 	udiv	r1, r3, r2
 80085de:	fb01 f202 	mul.w	r2, r1, r2
 80085e2:	1a9b      	subs	r3, r3, r2
 80085e4:	75fb      	strb	r3, [r7, #23]
			sc = (BYTE)(nxt_alloc32 % n_sc + 1);	/* Start sector */
 80085e6:	7ffa      	ldrb	r2, [r7, #31]
 80085e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80085ea:	fbb3 f1f2 	udiv	r1, r3, r2
 80085ee:	fb01 f202 	mul.w	r2, r1, r2
 80085f2:	1a9b      	subs	r3, r3, r2
 80085f4:	b2db      	uxtb	r3, r3
 80085f6:	3301      	adds	r3, #1
 80085f8:	75bb      	strb	r3, [r7, #22]
			pte[PTE_StHead] = hd;
 80085fa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80085fc:	3301      	adds	r3, #1
 80085fe:	7dfa      	ldrb	r2, [r7, #23]
 8008600:	701a      	strb	r2, [r3, #0]
			pte[PTE_StSec] = (BYTE)((cy >> 2 & 0xC0) | sc);
 8008602:	69bb      	ldr	r3, [r7, #24]
 8008604:	089b      	lsrs	r3, r3, #2
 8008606:	b2db      	uxtb	r3, r3
 8008608:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800860c:	b2d9      	uxtb	r1, r3
 800860e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008610:	3302      	adds	r3, #2
 8008612:	7dba      	ldrb	r2, [r7, #22]
 8008614:	430a      	orrs	r2, r1
 8008616:	b2d2      	uxtb	r2, r2
 8008618:	701a      	strb	r2, [r3, #0]
			pte[PTE_StCyl] = (BYTE)cy;
 800861a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800861c:	3303      	adds	r3, #3
 800861e:	69ba      	ldr	r2, [r7, #24]
 8008620:	b2d2      	uxtb	r2, r2
 8008622:	701a      	strb	r2, [r3, #0]

			cy = (UINT)((nxt_alloc32 + sz_part32 - 1) / n_sc / n_hd);	/* End cylinder */
 8008624:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008626:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008628:	4413      	add	r3, r2
 800862a:	1e5a      	subs	r2, r3, #1
 800862c:	7ffb      	ldrb	r3, [r7, #31]
 800862e:	fbb2 f2f3 	udiv	r2, r2, r3
 8008632:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8008636:	fbb2 f3f3 	udiv	r3, r2, r3
 800863a:	61bb      	str	r3, [r7, #24]
			hd = (BYTE)((nxt_alloc32 + sz_part32 - 1) / n_sc % n_hd);	/* End head */
 800863c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800863e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008640:	4413      	add	r3, r2
 8008642:	1e5a      	subs	r2, r3, #1
 8008644:	7ffb      	ldrb	r3, [r7, #31]
 8008646:	fbb2 f3f3 	udiv	r3, r2, r3
 800864a:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 800864e:	fbb3 f1f2 	udiv	r1, r3, r2
 8008652:	fb01 f202 	mul.w	r2, r1, r2
 8008656:	1a9b      	subs	r3, r3, r2
 8008658:	75fb      	strb	r3, [r7, #23]
			sc = (BYTE)((nxt_alloc32 + sz_part32 - 1) % n_sc + 1);		/* End sector */
 800865a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800865c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800865e:	4413      	add	r3, r2
 8008660:	3b01      	subs	r3, #1
 8008662:	7ffa      	ldrb	r2, [r7, #31]
 8008664:	fbb3 f1f2 	udiv	r1, r3, r2
 8008668:	fb01 f202 	mul.w	r2, r1, r2
 800866c:	1a9b      	subs	r3, r3, r2
 800866e:	b2db      	uxtb	r3, r3
 8008670:	3301      	adds	r3, #1
 8008672:	75bb      	strb	r3, [r7, #22]
			pte[PTE_EdHead] = hd;
 8008674:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008676:	3305      	adds	r3, #5
 8008678:	7dfa      	ldrb	r2, [r7, #23]
 800867a:	701a      	strb	r2, [r3, #0]
			pte[PTE_EdSec] = (BYTE)((cy >> 2 & 0xC0) | sc);
 800867c:	69bb      	ldr	r3, [r7, #24]
 800867e:	089b      	lsrs	r3, r3, #2
 8008680:	b2db      	uxtb	r3, r3
 8008682:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8008686:	b2d9      	uxtb	r1, r3
 8008688:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800868a:	3306      	adds	r3, #6
 800868c:	7dba      	ldrb	r2, [r7, #22]
 800868e:	430a      	orrs	r2, r1
 8008690:	b2d2      	uxtb	r2, r2
 8008692:	701a      	strb	r2, [r3, #0]
			pte[PTE_EdCyl] = (BYTE)cy;
 8008694:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008696:	3307      	adds	r3, #7
 8008698:	69ba      	ldr	r2, [r7, #24]
 800869a:	b2d2      	uxtb	r2, r2
 800869c:	701a      	strb	r2, [r3, #0]

			pte += SZ_PTE;		/* Next entry */
 800869e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80086a0:	3310      	adds	r3, #16
 80086a2:	62bb      	str	r3, [r7, #40]	@ 0x28
		for (i = 0, nxt_alloc32 = n_sc; i < 4 && nxt_alloc32 != 0 && nxt_alloc32 < sz_drv32; i++, nxt_alloc32 += sz_part32) {
 80086a4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80086a6:	3301      	adds	r3, #1
 80086a8:	637b      	str	r3, [r7, #52]	@ 0x34
 80086aa:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80086ac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80086ae:	4413      	add	r3, r2
 80086b0:	633b      	str	r3, [r7, #48]	@ 0x30
 80086b2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80086b4:	2b03      	cmp	r3, #3
 80086b6:	d809      	bhi.n	80086cc <create_partition+0x214>
 80086b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80086ba:	2b00      	cmp	r3, #0
 80086bc:	d006      	beq.n	80086cc <create_partition+0x214>
 80086be:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80086c0:	6a3b      	ldr	r3, [r7, #32]
 80086c2:	429a      	cmp	r2, r3
 80086c4:	f4ff af3f 	bcc.w	8008546 <create_partition+0x8e>
 80086c8:	e000      	b.n	80086cc <create_partition+0x214>
			if (sz_part32 == 0) break;	/* End of table or no sector to allocate? */
 80086ca:	bf00      	nop
		}

		st_word(buf + BS_55AA, 0xAA55);		/* MBR signature */
 80086cc:	687b      	ldr	r3, [r7, #4]
 80086ce:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 80086d2:	f64a 2155 	movw	r1, #43605	@ 0xaa55
 80086d6:	4618      	mov	r0, r3
 80086d8:	f7fd fd44 	bl	8006164 <st_word>
		if (disk_write(drv, buf, 0, 1) != RES_OK) return FR_DISK_ERR;	/* Write it to the MBR */
 80086dc:	7bf8      	ldrb	r0, [r7, #15]
 80086de:	2301      	movs	r3, #1
 80086e0:	2200      	movs	r2, #0
 80086e2:	6879      	ldr	r1, [r7, #4]
 80086e4:	f7fd fc4c 	bl	8005f80 <disk_write>
 80086e8:	4603      	mov	r3, r0
 80086ea:	2b00      	cmp	r3, #0
 80086ec:	d001      	beq.n	80086f2 <create_partition+0x23a>
 80086ee:	2301      	movs	r3, #1
 80086f0:	e000      	b.n	80086f4 <create_partition+0x23c>
	}

	return FR_OK;
 80086f2:	2300      	movs	r3, #0
}
 80086f4:	4618      	mov	r0, r3
 80086f6:	3738      	adds	r7, #56	@ 0x38
 80086f8:	46bd      	mov	sp, r7
 80086fa:	bd80      	pop	{r7, pc}
 80086fc:	51eb851f 	.word	0x51eb851f

08008700 <f_mkfs>:
	const TCHAR* path,		/* Logical drive number */
	const MKFS_PARM* opt,	/* Format options */
	void* work,				/* Pointer to working buffer (null: use len bytes of heap memory) */
	UINT len				/* Size of working buffer [byte] */
)
{
 8008700:	b580      	push	{r7, lr}
 8008702:	b09e      	sub	sp, #120	@ 0x78
 8008704:	af00      	add	r7, sp, #0
 8008706:	60f8      	str	r0, [r7, #12]
 8008708:	60b9      	str	r1, [r7, #8]
 800870a:	607a      	str	r2, [r7, #4]
 800870c:	603b      	str	r3, [r7, #0]
	DSTATUS ds;
	FRESULT res;


	/* Check mounted drive and clear work area */
	vol = get_ldnumber(&path);					/* Get target logical drive */
 800870e:	f107 030c 	add.w	r3, r7, #12
 8008712:	4618      	mov	r0, r3
 8008714:	f7fe fd78 	bl	8007208 <get_ldnumber>
 8008718:	6478      	str	r0, [r7, #68]	@ 0x44
	if (vol < 0) return FR_INVALID_DRIVE;
 800871a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800871c:	2b00      	cmp	r3, #0
 800871e:	da02      	bge.n	8008726 <f_mkfs+0x26>
 8008720:	230b      	movs	r3, #11
 8008722:	f000 bc39 	b.w	8008f98 <f_mkfs+0x898>
	if (FatFs[vol]) FatFs[vol]->fs_type = 0;	/* Clear the fs object if mounted */
 8008726:	4a90      	ldr	r2, [pc, #576]	@ (8008968 <f_mkfs+0x268>)
 8008728:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800872a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800872e:	2b00      	cmp	r3, #0
 8008730:	d005      	beq.n	800873e <f_mkfs+0x3e>
 8008732:	4a8d      	ldr	r2, [pc, #564]	@ (8008968 <f_mkfs+0x268>)
 8008734:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008736:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800873a:	2200      	movs	r2, #0
 800873c:	701a      	strb	r2, [r3, #0]
	pdrv = LD2PD(vol);		/* Hosting physical drive */
 800873e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008740:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
	ipart = LD2PT(vol);		/* Hosting partition (0:create as new, 1..:existing partition) */
 8008744:	2300      	movs	r3, #0
 8008746:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42

	/* Initialize the hosting physical drive */
	ds = disk_initialize(pdrv);
 800874a:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800874e:	4618      	mov	r0, r3
 8008750:	f7fd fbbc 	bl	8005ecc <disk_initialize>
 8008754:	4603      	mov	r3, r0
 8008756:	f887 3041 	strb.w	r3, [r7, #65]	@ 0x41
	if (ds & STA_NOINIT) return FR_NOT_READY;
 800875a:	f897 3041 	ldrb.w	r3, [r7, #65]	@ 0x41
 800875e:	f003 0301 	and.w	r3, r3, #1
 8008762:	2b00      	cmp	r3, #0
 8008764:	d002      	beq.n	800876c <f_mkfs+0x6c>
 8008766:	2303      	movs	r3, #3
 8008768:	f000 bc16 	b.w	8008f98 <f_mkfs+0x898>
	if (ds & STA_PROTECT) return FR_WRITE_PROTECTED;
 800876c:	f897 3041 	ldrb.w	r3, [r7, #65]	@ 0x41
 8008770:	f003 0304 	and.w	r3, r3, #4
 8008774:	2b00      	cmp	r3, #0
 8008776:	d002      	beq.n	800877e <f_mkfs+0x7e>
 8008778:	230a      	movs	r3, #10
 800877a:	f000 bc0d 	b.w	8008f98 <f_mkfs+0x898>

	/* Get physical drive parameters (sz_drv, sz_blk and ss) */
	if (!opt) opt = &defopt;	/* Use default parameter if it is not given */
 800877e:	68bb      	ldr	r3, [r7, #8]
 8008780:	2b00      	cmp	r3, #0
 8008782:	d101      	bne.n	8008788 <f_mkfs+0x88>
 8008784:	4b79      	ldr	r3, [pc, #484]	@ (800896c <f_mkfs+0x26c>)
 8008786:	60bb      	str	r3, [r7, #8]
	sz_blk = opt->align;
 8008788:	68bb      	ldr	r3, [r7, #8]
 800878a:	685b      	ldr	r3, [r3, #4]
 800878c:	61fb      	str	r3, [r7, #28]
	if (sz_blk == 0) disk_ioctl(pdrv, GET_BLOCK_SIZE, &sz_blk);					/* Block size from the paramter or lower layer */
 800878e:	69fb      	ldr	r3, [r7, #28]
 8008790:	2b00      	cmp	r3, #0
 8008792:	d107      	bne.n	80087a4 <f_mkfs+0xa4>
 8008794:	f107 021c 	add.w	r2, r7, #28
 8008798:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800879c:	2103      	movs	r1, #3
 800879e:	4618      	mov	r0, r3
 80087a0:	f7fd fc22 	bl	8005fe8 <disk_ioctl>
 	if (sz_blk == 0 || sz_blk > 0x8000 || (sz_blk & (sz_blk - 1))) sz_blk = 1;	/* Use default if the block size is invalid */
 80087a4:	69fb      	ldr	r3, [r7, #28]
 80087a6:	2b00      	cmp	r3, #0
 80087a8:	d009      	beq.n	80087be <f_mkfs+0xbe>
 80087aa:	69fb      	ldr	r3, [r7, #28]
 80087ac:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80087b0:	d805      	bhi.n	80087be <f_mkfs+0xbe>
 80087b2:	69fb      	ldr	r3, [r7, #28]
 80087b4:	1e5a      	subs	r2, r3, #1
 80087b6:	69fb      	ldr	r3, [r7, #28]
 80087b8:	4013      	ands	r3, r2
 80087ba:	2b00      	cmp	r3, #0
 80087bc:	d001      	beq.n	80087c2 <f_mkfs+0xc2>
 80087be:	2301      	movs	r3, #1
 80087c0:	61fb      	str	r3, [r7, #28]
#if FF_MAX_SS != FF_MIN_SS
	if (disk_ioctl(pdrv, GET_SECTOR_SIZE, &ss) != RES_OK) return FR_DISK_ERR;
 80087c2:	f107 0220 	add.w	r2, r7, #32
 80087c6:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 80087ca:	2102      	movs	r1, #2
 80087cc:	4618      	mov	r0, r3
 80087ce:	f7fd fc0b 	bl	8005fe8 <disk_ioctl>
 80087d2:	4603      	mov	r3, r0
 80087d4:	2b00      	cmp	r3, #0
 80087d6:	d001      	beq.n	80087dc <f_mkfs+0xdc>
 80087d8:	2301      	movs	r3, #1
 80087da:	e3dd      	b.n	8008f98 <f_mkfs+0x898>
	if (ss > FF_MAX_SS || ss < FF_MIN_SS || (ss & (ss - 1))) return FR_DISK_ERR;
 80087dc:	8c3b      	ldrh	r3, [r7, #32]
 80087de:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80087e2:	d80a      	bhi.n	80087fa <f_mkfs+0xfa>
 80087e4:	8c3b      	ldrh	r3, [r7, #32]
 80087e6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80087ea:	d306      	bcc.n	80087fa <f_mkfs+0xfa>
 80087ec:	8c3b      	ldrh	r3, [r7, #32]
 80087ee:	461a      	mov	r2, r3
 80087f0:	8c3b      	ldrh	r3, [r7, #32]
 80087f2:	3b01      	subs	r3, #1
 80087f4:	4013      	ands	r3, r2
 80087f6:	2b00      	cmp	r3, #0
 80087f8:	d001      	beq.n	80087fe <f_mkfs+0xfe>
 80087fa:	2301      	movs	r3, #1
 80087fc:	e3cc      	b.n	8008f98 <f_mkfs+0x898>
#else
	ss = FF_MAX_SS;
#endif

	/* Options for FAT sub-type and FAT parameters */
	fsopt = opt->fmt & (FM_ANY | FM_SFD);
 80087fe:	68bb      	ldr	r3, [r7, #8]
 8008800:	781b      	ldrb	r3, [r3, #0]
 8008802:	f003 030f 	and.w	r3, r3, #15
 8008806:	f887 3040 	strb.w	r3, [r7, #64]	@ 0x40
	n_fat = (opt->n_fat >= 1 && opt->n_fat <= 2) ? opt->n_fat : 1;
 800880a:	68bb      	ldr	r3, [r7, #8]
 800880c:	785b      	ldrb	r3, [r3, #1]
 800880e:	2b00      	cmp	r3, #0
 8008810:	d006      	beq.n	8008820 <f_mkfs+0x120>
 8008812:	68bb      	ldr	r3, [r7, #8]
 8008814:	785b      	ldrb	r3, [r3, #1]
 8008816:	2b02      	cmp	r3, #2
 8008818:	d802      	bhi.n	8008820 <f_mkfs+0x120>
 800881a:	68bb      	ldr	r3, [r7, #8]
 800881c:	785b      	ldrb	r3, [r3, #1]
 800881e:	e000      	b.n	8008822 <f_mkfs+0x122>
 8008820:	2301      	movs	r3, #1
 8008822:	63fb      	str	r3, [r7, #60]	@ 0x3c
	n_root = (opt->n_root >= 1 && opt->n_root <= 32768 && (opt->n_root % (ss / SZDIRE)) == 0) ? opt->n_root : 512;
 8008824:	68bb      	ldr	r3, [r7, #8]
 8008826:	689b      	ldr	r3, [r3, #8]
 8008828:	2b00      	cmp	r3, #0
 800882a:	d013      	beq.n	8008854 <f_mkfs+0x154>
 800882c:	68bb      	ldr	r3, [r7, #8]
 800882e:	689b      	ldr	r3, [r3, #8]
 8008830:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8008834:	d80e      	bhi.n	8008854 <f_mkfs+0x154>
 8008836:	68bb      	ldr	r3, [r7, #8]
 8008838:	689b      	ldr	r3, [r3, #8]
 800883a:	8c3a      	ldrh	r2, [r7, #32]
 800883c:	0952      	lsrs	r2, r2, #5
 800883e:	b292      	uxth	r2, r2
 8008840:	fbb3 f1f2 	udiv	r1, r3, r2
 8008844:	fb01 f202 	mul.w	r2, r1, r2
 8008848:	1a9b      	subs	r3, r3, r2
 800884a:	2b00      	cmp	r3, #0
 800884c:	d102      	bne.n	8008854 <f_mkfs+0x154>
 800884e:	68bb      	ldr	r3, [r7, #8]
 8008850:	689b      	ldr	r3, [r3, #8]
 8008852:	e001      	b.n	8008858 <f_mkfs+0x158>
 8008854:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8008858:	63bb      	str	r3, [r7, #56]	@ 0x38
	sz_au = (opt->au_size <= 0x1000000 && (opt->au_size & (opt->au_size - 1)) == 0) ? opt->au_size : 0;
 800885a:	68bb      	ldr	r3, [r7, #8]
 800885c:	68db      	ldr	r3, [r3, #12]
 800885e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8008862:	d80a      	bhi.n	800887a <f_mkfs+0x17a>
 8008864:	68bb      	ldr	r3, [r7, #8]
 8008866:	68da      	ldr	r2, [r3, #12]
 8008868:	68bb      	ldr	r3, [r7, #8]
 800886a:	68db      	ldr	r3, [r3, #12]
 800886c:	3b01      	subs	r3, #1
 800886e:	4013      	ands	r3, r2
 8008870:	2b00      	cmp	r3, #0
 8008872:	d102      	bne.n	800887a <f_mkfs+0x17a>
 8008874:	68bb      	ldr	r3, [r7, #8]
 8008876:	68db      	ldr	r3, [r3, #12]
 8008878:	e000      	b.n	800887c <f_mkfs+0x17c>
 800887a:	2300      	movs	r3, #0
 800887c:	64fb      	str	r3, [r7, #76]	@ 0x4c
	sz_au /= ss;	/* Byte --> Sector */
 800887e:	8c3b      	ldrh	r3, [r7, #32]
 8008880:	461a      	mov	r2, r3
 8008882:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008884:	fbb3 f3f2 	udiv	r3, r3, r2
 8008888:	64fb      	str	r3, [r7, #76]	@ 0x4c

	/* Get working buffer */
	sz_buf = len / ss;		/* Size of working buffer [sector] */
 800888a:	8c3b      	ldrh	r3, [r7, #32]
 800888c:	461a      	mov	r2, r3
 800888e:	683b      	ldr	r3, [r7, #0]
 8008890:	fbb3 f3f2 	udiv	r3, r3, r2
 8008894:	637b      	str	r3, [r7, #52]	@ 0x34
	if (sz_buf == 0) return FR_NOT_ENOUGH_CORE;
 8008896:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008898:	2b00      	cmp	r3, #0
 800889a:	d101      	bne.n	80088a0 <f_mkfs+0x1a0>
 800889c:	2311      	movs	r3, #17
 800889e:	e37b      	b.n	8008f98 <f_mkfs+0x898>
	buf = (BYTE*)work;		/* Working buffer */
 80088a0:	687b      	ldr	r3, [r7, #4]
 80088a2:	633b      	str	r3, [r7, #48]	@ 0x30
#if FF_USE_LFN == 3
	if (!buf) buf = ff_memalloc(sz_buf * ss);	/* Use heap memory for working buffer */
#endif
	if (!buf) return FR_NOT_ENOUGH_CORE;
 80088a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80088a6:	2b00      	cmp	r3, #0
 80088a8:	d101      	bne.n	80088ae <f_mkfs+0x1ae>
 80088aa:	2311      	movs	r3, #17
 80088ac:	e374      	b.n	8008f98 <f_mkfs+0x898>

	/* Determine where the volume to be located (b_vol, sz_vol) */
	b_vol = sz_vol = 0;
 80088ae:	2300      	movs	r3, #0
 80088b0:	61bb      	str	r3, [r7, #24]
 80088b2:	69bb      	ldr	r3, [r7, #24]
 80088b4:	66fb      	str	r3, [r7, #108]	@ 0x6c
			if (ipart > 4 || pte[PTE_System] == 0) LEAVE_MKFS(FR_MKFS_ABORTED);	/* No partition? */
			b_vol = ld_dword(pte + PTE_StLba);		/* Get volume start sector */
			sz_vol = ld_dword(pte + PTE_SizLba);	/* Get volume size */
		}
	} else {	/* The volume is associated with a physical drive */
		if (disk_ioctl(pdrv, GET_SECTOR_COUNT, &sz_vol) != RES_OK) LEAVE_MKFS(FR_DISK_ERR);
 80088b6:	f107 0218 	add.w	r2, r7, #24
 80088ba:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 80088be:	2101      	movs	r1, #1
 80088c0:	4618      	mov	r0, r3
 80088c2:	f7fd fb91 	bl	8005fe8 <disk_ioctl>
 80088c6:	4603      	mov	r3, r0
 80088c8:	2b00      	cmp	r3, #0
 80088ca:	d001      	beq.n	80088d0 <f_mkfs+0x1d0>
 80088cc:	2301      	movs	r3, #1
 80088ce:	e363      	b.n	8008f98 <f_mkfs+0x898>
		if (!(fsopt & FM_SFD)) {	/* To be partitioned? */
 80088d0:	f897 3040 	ldrb.w	r3, [r7, #64]	@ 0x40
 80088d4:	f003 0308 	and.w	r3, r3, #8
 80088d8:	2b00      	cmp	r3, #0
 80088da:	d108      	bne.n	80088ee <f_mkfs+0x1ee>
				fsopt |= 0x80;		/* Partitioning is in GPT */
				b_vol = GPT_ALIGN / ss; sz_vol -= b_vol + GPT_ITEMS * SZ_GPTE / ss + 1;	/* Estimated partition offset and size */
			} else
#endif
			{	/* Partitioning is in MBR */
				if (sz_vol > N_SEC_TRACK) {
 80088dc:	69bb      	ldr	r3, [r7, #24]
 80088de:	2b3f      	cmp	r3, #63	@ 0x3f
 80088e0:	d905      	bls.n	80088ee <f_mkfs+0x1ee>
					b_vol = N_SEC_TRACK; sz_vol -= b_vol;	/* Estimated partition offset and size */
 80088e2:	233f      	movs	r3, #63	@ 0x3f
 80088e4:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80088e6:	69ba      	ldr	r2, [r7, #24]
 80088e8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80088ea:	1ad3      	subs	r3, r2, r3
 80088ec:	61bb      	str	r3, [r7, #24]
				}
			}
		}
	}
	if (sz_vol < 128) LEAVE_MKFS(FR_MKFS_ABORTED);	/* Check if volume size is >=128s */
 80088ee:	69bb      	ldr	r3, [r7, #24]
 80088f0:	2b7f      	cmp	r3, #127	@ 0x7f
 80088f2:	d801      	bhi.n	80088f8 <f_mkfs+0x1f8>
 80088f4:	230e      	movs	r3, #14
 80088f6:	e34f      	b.n	8008f98 <f_mkfs+0x898>
			}
		}
#if FF_LBA64
		if (sz_vol >= 0x100000000) LEAVE_MKFS(FR_MKFS_ABORTED);	/* Too large volume for FAT/FAT32 */
#endif
		if (sz_au > 128) sz_au = 128;	/* Invalid AU for FAT/FAT32? */
 80088f8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80088fa:	2b80      	cmp	r3, #128	@ 0x80
 80088fc:	d901      	bls.n	8008902 <f_mkfs+0x202>
 80088fe:	2380      	movs	r3, #128	@ 0x80
 8008900:	64fb      	str	r3, [r7, #76]	@ 0x4c
		if (fsopt & FM_FAT32) {	/* FAT32 possible? */
 8008902:	f897 3040 	ldrb.w	r3, [r7, #64]	@ 0x40
 8008906:	f003 0302 	and.w	r3, r3, #2
 800890a:	2b00      	cmp	r3, #0
 800890c:	d009      	beq.n	8008922 <f_mkfs+0x222>
			if (!(fsopt & FM_FAT)) {	/* no-FAT? */
 800890e:	f897 3040 	ldrb.w	r3, [r7, #64]	@ 0x40
 8008912:	f003 0301 	and.w	r3, r3, #1
 8008916:	2b00      	cmp	r3, #0
 8008918:	d103      	bne.n	8008922 <f_mkfs+0x222>
				fsty = FS_FAT32; break;
 800891a:	2303      	movs	r3, #3
 800891c:	f887 305b 	strb.w	r3, [r7, #91]	@ 0x5b
 8008920:	e00a      	b.n	8008938 <f_mkfs+0x238>
			}
		}
		if (!(fsopt & FM_FAT)) LEAVE_MKFS(FR_INVALID_PARAMETER);	/* no-FAT? */
 8008922:	f897 3040 	ldrb.w	r3, [r7, #64]	@ 0x40
 8008926:	f003 0301 	and.w	r3, r3, #1
 800892a:	2b00      	cmp	r3, #0
 800892c:	d101      	bne.n	8008932 <f_mkfs+0x232>
 800892e:	2313      	movs	r3, #19
 8008930:	e332      	b.n	8008f98 <f_mkfs+0x898>
		fsty = FS_FAT16;
 8008932:	2302      	movs	r3, #2
 8008934:	f887 305b 	strb.w	r3, [r7, #91]	@ 0x5b
	} while (0);

	vsn = (DWORD)sz_vol + GET_FATTIME();	/* VSN generated from current time and partitiion size */
 8008938:	69bb      	ldr	r3, [r7, #24]
 800893a:	f103 43a8 	add.w	r3, r3, #1409286144	@ 0x54000000
 800893e:	f503 1304 	add.w	r3, r3, #2162688	@ 0x210000
 8008942:	62fb      	str	r3, [r7, #44]	@ 0x2c

	} else
#endif	/* FF_FS_EXFAT */
	{	/* Create an FAT/FAT32 volume */
		do {
			pau = sz_au;
 8008944:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008946:	663b      	str	r3, [r7, #96]	@ 0x60
			/* Pre-determine number of clusters and FAT sub-type */
			if (fsty == FS_FAT32) {	/* FAT32 volume */
 8008948:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 800894c:	2b03      	cmp	r3, #3
 800894e:	d141      	bne.n	80089d4 <f_mkfs+0x2d4>
				if (pau == 0) {	/* AU auto-selection */
 8008950:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8008952:	2b00      	cmp	r3, #0
 8008954:	d120      	bne.n	8008998 <f_mkfs+0x298>
					n = (DWORD)sz_vol / 0x20000;	/* Volume size in unit of 128KS */
 8008956:	69bb      	ldr	r3, [r7, #24]
 8008958:	0c5b      	lsrs	r3, r3, #17
 800895a:	667b      	str	r3, [r7, #100]	@ 0x64
					for (i = 0, pau = 1; cst32[i] && cst32[i] <= n; i++, pau <<= 1) ;	/* Get from table */
 800895c:	2300      	movs	r3, #0
 800895e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008960:	2301      	movs	r3, #1
 8008962:	663b      	str	r3, [r7, #96]	@ 0x60
 8008964:	e00a      	b.n	800897c <f_mkfs+0x27c>
 8008966:	bf00      	nop
 8008968:	20005110 	.word	0x20005110
 800896c:	08014490 	.word	0x08014490
 8008970:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008972:	3301      	adds	r3, #1
 8008974:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008976:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8008978:	005b      	lsls	r3, r3, #1
 800897a:	663b      	str	r3, [r7, #96]	@ 0x60
 800897c:	4a95      	ldr	r2, [pc, #596]	@ (8008bd4 <f_mkfs+0x4d4>)
 800897e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008980:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008984:	2b00      	cmp	r3, #0
 8008986:	d007      	beq.n	8008998 <f_mkfs+0x298>
 8008988:	4a92      	ldr	r2, [pc, #584]	@ (8008bd4 <f_mkfs+0x4d4>)
 800898a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800898c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008990:	461a      	mov	r2, r3
 8008992:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8008994:	4293      	cmp	r3, r2
 8008996:	d2eb      	bcs.n	8008970 <f_mkfs+0x270>
				}
				n_clst = (DWORD)sz_vol / pau;	/* Number of clusters */
 8008998:	69ba      	ldr	r2, [r7, #24]
 800899a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800899c:	fbb2 f3f3 	udiv	r3, r2, r3
 80089a0:	62bb      	str	r3, [r7, #40]	@ 0x28
				sz_fat = (n_clst * 4 + 8 + ss - 1) / ss;	/* FAT size [sector] */
 80089a2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80089a4:	3302      	adds	r3, #2
 80089a6:	009b      	lsls	r3, r3, #2
 80089a8:	8c3a      	ldrh	r2, [r7, #32]
 80089aa:	4413      	add	r3, r2
 80089ac:	3b01      	subs	r3, #1
 80089ae:	8c3a      	ldrh	r2, [r7, #32]
 80089b0:	fbb3 f3f2 	udiv	r3, r3, r2
 80089b4:	657b      	str	r3, [r7, #84]	@ 0x54
				sz_rsv = 32;	/* Number of reserved sectors */
 80089b6:	2320      	movs	r3, #32
 80089b8:	677b      	str	r3, [r7, #116]	@ 0x74
				sz_dir = 0;		/* No static directory */
 80089ba:	2300      	movs	r3, #0
 80089bc:	653b      	str	r3, [r7, #80]	@ 0x50
				if (n_clst <= MAX_FAT16 || n_clst > MAX_FAT32) LEAVE_MKFS(FR_MKFS_ABORTED);
 80089be:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80089c0:	f64f 72f5 	movw	r2, #65525	@ 0xfff5
 80089c4:	4293      	cmp	r3, r2
 80089c6:	d903      	bls.n	80089d0 <f_mkfs+0x2d0>
 80089c8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80089ca:	4a83      	ldr	r2, [pc, #524]	@ (8008bd8 <f_mkfs+0x4d8>)
 80089cc:	4293      	cmp	r3, r2
 80089ce:	d94b      	bls.n	8008a68 <f_mkfs+0x368>
 80089d0:	230e      	movs	r3, #14
 80089d2:	e2e1      	b.n	8008f98 <f_mkfs+0x898>
			} else {				/* FAT volume */
				if (pau == 0) {	/* au auto-selection */
 80089d4:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80089d6:	2b00      	cmp	r3, #0
 80089d8:	d11b      	bne.n	8008a12 <f_mkfs+0x312>
					n = (DWORD)sz_vol / 0x1000;	/* Volume size in unit of 4KS */
 80089da:	69bb      	ldr	r3, [r7, #24]
 80089dc:	0b1b      	lsrs	r3, r3, #12
 80089de:	667b      	str	r3, [r7, #100]	@ 0x64
					for (i = 0, pau = 1; cst[i] && cst[i] <= n; i++, pau <<= 1) ;	/* Get from table */
 80089e0:	2300      	movs	r3, #0
 80089e2:	64bb      	str	r3, [r7, #72]	@ 0x48
 80089e4:	2301      	movs	r3, #1
 80089e6:	663b      	str	r3, [r7, #96]	@ 0x60
 80089e8:	e005      	b.n	80089f6 <f_mkfs+0x2f6>
 80089ea:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80089ec:	3301      	adds	r3, #1
 80089ee:	64bb      	str	r3, [r7, #72]	@ 0x48
 80089f0:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80089f2:	005b      	lsls	r3, r3, #1
 80089f4:	663b      	str	r3, [r7, #96]	@ 0x60
 80089f6:	4a79      	ldr	r2, [pc, #484]	@ (8008bdc <f_mkfs+0x4dc>)
 80089f8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80089fa:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80089fe:	2b00      	cmp	r3, #0
 8008a00:	d007      	beq.n	8008a12 <f_mkfs+0x312>
 8008a02:	4a76      	ldr	r2, [pc, #472]	@ (8008bdc <f_mkfs+0x4dc>)
 8008a04:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008a06:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008a0a:	461a      	mov	r2, r3
 8008a0c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8008a0e:	4293      	cmp	r3, r2
 8008a10:	d2eb      	bcs.n	80089ea <f_mkfs+0x2ea>
				}
				n_clst = (DWORD)sz_vol / pau;
 8008a12:	69ba      	ldr	r2, [r7, #24]
 8008a14:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8008a16:	fbb2 f3f3 	udiv	r3, r2, r3
 8008a1a:	62bb      	str	r3, [r7, #40]	@ 0x28
				if (n_clst > MAX_FAT12) {
 8008a1c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008a1e:	f640 72f5 	movw	r2, #4085	@ 0xff5
 8008a22:	4293      	cmp	r3, r2
 8008a24:	d904      	bls.n	8008a30 <f_mkfs+0x330>
					n = n_clst * 2 + 4;		/* FAT size [byte] */
 8008a26:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008a28:	3302      	adds	r3, #2
 8008a2a:	005b      	lsls	r3, r3, #1
 8008a2c:	667b      	str	r3, [r7, #100]	@ 0x64
 8008a2e:	e00a      	b.n	8008a46 <f_mkfs+0x346>
				} else {
					fsty = FS_FAT12;
 8008a30:	2301      	movs	r3, #1
 8008a32:	f887 305b 	strb.w	r3, [r7, #91]	@ 0x5b
					n = (n_clst * 3 + 1) / 2 + 3;	/* FAT size [byte] */
 8008a36:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8008a38:	4613      	mov	r3, r2
 8008a3a:	005b      	lsls	r3, r3, #1
 8008a3c:	4413      	add	r3, r2
 8008a3e:	3301      	adds	r3, #1
 8008a40:	085b      	lsrs	r3, r3, #1
 8008a42:	3303      	adds	r3, #3
 8008a44:	667b      	str	r3, [r7, #100]	@ 0x64
				}
				sz_fat = (n + ss - 1) / ss;		/* FAT size [sector] */
 8008a46:	8c3b      	ldrh	r3, [r7, #32]
 8008a48:	461a      	mov	r2, r3
 8008a4a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8008a4c:	4413      	add	r3, r2
 8008a4e:	3b01      	subs	r3, #1
 8008a50:	8c3a      	ldrh	r2, [r7, #32]
 8008a52:	fbb3 f3f2 	udiv	r3, r3, r2
 8008a56:	657b      	str	r3, [r7, #84]	@ 0x54
				sz_rsv = 1;						/* Number of reserved sectors */
 8008a58:	2301      	movs	r3, #1
 8008a5a:	677b      	str	r3, [r7, #116]	@ 0x74
				sz_dir = (DWORD)n_root * SZDIRE / ss;	/* Root dir size [sector] */
 8008a5c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008a5e:	015b      	lsls	r3, r3, #5
 8008a60:	8c3a      	ldrh	r2, [r7, #32]
 8008a62:	fbb3 f3f2 	udiv	r3, r3, r2
 8008a66:	653b      	str	r3, [r7, #80]	@ 0x50
			}
			b_fat = b_vol + sz_rsv;						/* FAT base */
 8008a68:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8008a6a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8008a6c:	4413      	add	r3, r2
 8008a6e:	66bb      	str	r3, [r7, #104]	@ 0x68
			b_data = b_fat + sz_fat * n_fat + sz_dir;	/* Data base */
 8008a70:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008a72:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8008a74:	fb03 f202 	mul.w	r2, r3, r2
 8008a78:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8008a7a:	4413      	add	r3, r2
 8008a7c:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8008a7e:	4413      	add	r3, r2
 8008a80:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Align data area to erase block boundary (for flash memory media) */
			n = (DWORD)(((b_data + sz_blk - 1) & ~(sz_blk - 1)) - b_data);	/* Sectors to next nearest from current data base */
 8008a82:	69fa      	ldr	r2, [r7, #28]
 8008a84:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008a86:	4413      	add	r3, r2
 8008a88:	1e5a      	subs	r2, r3, #1
 8008a8a:	69fb      	ldr	r3, [r7, #28]
 8008a8c:	425b      	negs	r3, r3
 8008a8e:	401a      	ands	r2, r3
 8008a90:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008a92:	1ad3      	subs	r3, r2, r3
 8008a94:	667b      	str	r3, [r7, #100]	@ 0x64
			if (fsty == FS_FAT32) {		/* FAT32: Move FAT */
 8008a96:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 8008a9a:	2b03      	cmp	r3, #3
 8008a9c:	d108      	bne.n	8008ab0 <f_mkfs+0x3b0>
				sz_rsv += n; b_fat += n;
 8008a9e:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8008aa0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8008aa2:	4413      	add	r3, r2
 8008aa4:	677b      	str	r3, [r7, #116]	@ 0x74
 8008aa6:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8008aa8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8008aaa:	4413      	add	r3, r2
 8008aac:	66bb      	str	r3, [r7, #104]	@ 0x68
 8008aae:	e019      	b.n	8008ae4 <f_mkfs+0x3e4>
			} else {					/* FAT: Expand FAT */
				if (n % n_fat) {	/* Adjust fractional error if needed */
 8008ab0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8008ab2:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8008ab4:	fbb3 f2f2 	udiv	r2, r3, r2
 8008ab8:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8008aba:	fb01 f202 	mul.w	r2, r1, r2
 8008abe:	1a9b      	subs	r3, r3, r2
 8008ac0:	2b00      	cmp	r3, #0
 8008ac2:	d008      	beq.n	8008ad6 <f_mkfs+0x3d6>
					n--; sz_rsv++; b_fat++;
 8008ac4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8008ac6:	3b01      	subs	r3, #1
 8008ac8:	667b      	str	r3, [r7, #100]	@ 0x64
 8008aca:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8008acc:	3301      	adds	r3, #1
 8008ace:	677b      	str	r3, [r7, #116]	@ 0x74
 8008ad0:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8008ad2:	3301      	adds	r3, #1
 8008ad4:	66bb      	str	r3, [r7, #104]	@ 0x68
				}
				sz_fat += n / n_fat;
 8008ad6:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8008ad8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008ada:	fbb2 f3f3 	udiv	r3, r2, r3
 8008ade:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8008ae0:	4413      	add	r3, r2
 8008ae2:	657b      	str	r3, [r7, #84]	@ 0x54
			}

			/* Determine number of clusters and final check of validity of the FAT sub-type */
			if (sz_vol < b_data + pau * 16 - b_vol) LEAVE_MKFS(FR_MKFS_ABORTED);	/* Too small volume? */
 8008ae4:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8008ae6:	011a      	lsls	r2, r3, #4
 8008ae8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008aea:	441a      	add	r2, r3
 8008aec:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008aee:	1ad2      	subs	r2, r2, r3
 8008af0:	69bb      	ldr	r3, [r7, #24]
 8008af2:	429a      	cmp	r2, r3
 8008af4:	d901      	bls.n	8008afa <f_mkfs+0x3fa>
 8008af6:	230e      	movs	r3, #14
 8008af8:	e24e      	b.n	8008f98 <f_mkfs+0x898>
			n_clst = ((DWORD)sz_vol - sz_rsv - sz_fat * n_fat - sz_dir) / pau;
 8008afa:	69ba      	ldr	r2, [r7, #24]
 8008afc:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8008afe:	1ad2      	subs	r2, r2, r3
 8008b00:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008b02:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8008b04:	fb01 f303 	mul.w	r3, r1, r3
 8008b08:	1ad2      	subs	r2, r2, r3
 8008b0a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008b0c:	1ad2      	subs	r2, r2, r3
 8008b0e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8008b10:	fbb2 f3f3 	udiv	r3, r2, r3
 8008b14:	62bb      	str	r3, [r7, #40]	@ 0x28
			if (fsty == FS_FAT32) {
 8008b16:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 8008b1a:	2b03      	cmp	r3, #3
 8008b1c:	d10f      	bne.n	8008b3e <f_mkfs+0x43e>
				if (n_clst <= MAX_FAT16) {	/* Too few clusters for FAT32? */
 8008b1e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008b20:	f64f 72f5 	movw	r2, #65525	@ 0xfff5
 8008b24:	4293      	cmp	r3, r2
 8008b26:	d80a      	bhi.n	8008b3e <f_mkfs+0x43e>
					if (sz_au == 0 && (sz_au = pau / 2) != 0) continue;	/* Adjust cluster size and retry */
 8008b28:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008b2a:	2b00      	cmp	r3, #0
 8008b2c:	d105      	bne.n	8008b3a <f_mkfs+0x43a>
 8008b2e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8008b30:	085b      	lsrs	r3, r3, #1
 8008b32:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008b34:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008b36:	2b00      	cmp	r3, #0
 8008b38:	d145      	bne.n	8008bc6 <f_mkfs+0x4c6>
					LEAVE_MKFS(FR_MKFS_ABORTED);
 8008b3a:	230e      	movs	r3, #14
 8008b3c:	e22c      	b.n	8008f98 <f_mkfs+0x898>
				}
			}
			if (fsty == FS_FAT16) {
 8008b3e:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 8008b42:	2b02      	cmp	r3, #2
 8008b44:	d134      	bne.n	8008bb0 <f_mkfs+0x4b0>
				if (n_clst > MAX_FAT16) {	/* Too many clusters for FAT16 */
 8008b46:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008b48:	f64f 72f5 	movw	r2, #65525	@ 0xfff5
 8008b4c:	4293      	cmp	r3, r2
 8008b4e:	d91f      	bls.n	8008b90 <f_mkfs+0x490>
					if (sz_au == 0 && (pau * 2) <= 64) {
 8008b50:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008b52:	2b00      	cmp	r3, #0
 8008b54:	d107      	bne.n	8008b66 <f_mkfs+0x466>
 8008b56:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8008b58:	005b      	lsls	r3, r3, #1
 8008b5a:	2b40      	cmp	r3, #64	@ 0x40
 8008b5c:	d803      	bhi.n	8008b66 <f_mkfs+0x466>
						sz_au = pau * 2; continue;	/* Adjust cluster size and retry */
 8008b5e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8008b60:	005b      	lsls	r3, r3, #1
 8008b62:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008b64:	e034      	b.n	8008bd0 <f_mkfs+0x4d0>
					}
					if ((fsopt & FM_FAT32)) {
 8008b66:	f897 3040 	ldrb.w	r3, [r7, #64]	@ 0x40
 8008b6a:	f003 0302 	and.w	r3, r3, #2
 8008b6e:	2b00      	cmp	r3, #0
 8008b70:	d003      	beq.n	8008b7a <f_mkfs+0x47a>
						fsty = FS_FAT32; continue;	/* Switch type to FAT32 and retry */
 8008b72:	2303      	movs	r3, #3
 8008b74:	f887 305b 	strb.w	r3, [r7, #91]	@ 0x5b
 8008b78:	e02a      	b.n	8008bd0 <f_mkfs+0x4d0>
					}
					if (sz_au == 0 && (sz_au = pau * 2) <= 128) continue;	/* Adjust cluster size and retry */
 8008b7a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008b7c:	2b00      	cmp	r3, #0
 8008b7e:	d105      	bne.n	8008b8c <f_mkfs+0x48c>
 8008b80:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8008b82:	005b      	lsls	r3, r3, #1
 8008b84:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008b86:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008b88:	2b80      	cmp	r3, #128	@ 0x80
 8008b8a:	d91e      	bls.n	8008bca <f_mkfs+0x4ca>
					LEAVE_MKFS(FR_MKFS_ABORTED);
 8008b8c:	230e      	movs	r3, #14
 8008b8e:	e203      	b.n	8008f98 <f_mkfs+0x898>
				}
				if  (n_clst <= MAX_FAT12) {	/* Too few clusters for FAT16 */
 8008b90:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008b92:	f640 72f5 	movw	r2, #4085	@ 0xff5
 8008b96:	4293      	cmp	r3, r2
 8008b98:	d80a      	bhi.n	8008bb0 <f_mkfs+0x4b0>
					if (sz_au == 0 && (sz_au = pau * 2) <= 128) continue;	/* Adjust cluster size and retry */
 8008b9a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008b9c:	2b00      	cmp	r3, #0
 8008b9e:	d105      	bne.n	8008bac <f_mkfs+0x4ac>
 8008ba0:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8008ba2:	005b      	lsls	r3, r3, #1
 8008ba4:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008ba6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008ba8:	2b80      	cmp	r3, #128	@ 0x80
 8008baa:	d910      	bls.n	8008bce <f_mkfs+0x4ce>
					LEAVE_MKFS(FR_MKFS_ABORTED);
 8008bac:	230e      	movs	r3, #14
 8008bae:	e1f3      	b.n	8008f98 <f_mkfs+0x898>
				}
			}
			if (fsty == FS_FAT12 && n_clst > MAX_FAT12) LEAVE_MKFS(FR_MKFS_ABORTED);	/* Too many clusters for FAT12 */
 8008bb0:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 8008bb4:	2b01      	cmp	r3, #1
 8008bb6:	d113      	bne.n	8008be0 <f_mkfs+0x4e0>
 8008bb8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008bba:	f640 72f5 	movw	r2, #4085	@ 0xff5
 8008bbe:	4293      	cmp	r3, r2
 8008bc0:	d90e      	bls.n	8008be0 <f_mkfs+0x4e0>
 8008bc2:	230e      	movs	r3, #14
 8008bc4:	e1e8      	b.n	8008f98 <f_mkfs+0x898>
					if (sz_au == 0 && (sz_au = pau / 2) != 0) continue;	/* Adjust cluster size and retry */
 8008bc6:	bf00      	nop
 8008bc8:	e6bc      	b.n	8008944 <f_mkfs+0x244>
					if (sz_au == 0 && (sz_au = pau * 2) <= 128) continue;	/* Adjust cluster size and retry */
 8008bca:	bf00      	nop
 8008bcc:	e6ba      	b.n	8008944 <f_mkfs+0x244>
					if (sz_au == 0 && (sz_au = pau * 2) <= 128) continue;	/* Adjust cluster size and retry */
 8008bce:	bf00      	nop
			pau = sz_au;
 8008bd0:	e6b8      	b.n	8008944 <f_mkfs+0x244>
 8008bd2:	bf00      	nop
 8008bd4:	080144a0 	.word	0x080144a0
 8008bd8:	0ffffff5 	.word	0x0ffffff5
 8008bdc:	080144b0 	.word	0x080144b0

			/* Ok, it is the valid cluster configuration */
			break;
 8008be0:	bf00      	nop
#if FF_USE_TRIM
		lba[0] = b_vol; lba[1] = b_vol + sz_vol - 1;	/* Inform storage device that the volume area may be erased */
		disk_ioctl(pdrv, CTRL_TRIM, lba);
#endif
		/* Create FAT VBR */
		memset(buf, 0, ss);
 8008be2:	8c3b      	ldrh	r3, [r7, #32]
 8008be4:	461a      	mov	r2, r3
 8008be6:	2100      	movs	r1, #0
 8008be8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8008bea:	f00a f909 	bl	8012e00 <memset>
		memcpy(buf + BS_JmpBoot, "\xEB\xFE\x90" "MSDOS5.0", 11);	/* Boot jump code (x86), OEM name */
 8008bee:	220b      	movs	r2, #11
 8008bf0:	49b1      	ldr	r1, [pc, #708]	@ (8008eb8 <f_mkfs+0x7b8>)
 8008bf2:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8008bf4:	f00a f988 	bl	8012f08 <memcpy>
		st_word(buf + BPB_BytsPerSec, ss);				/* Sector size [byte] */
 8008bf8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008bfa:	330b      	adds	r3, #11
 8008bfc:	8c3a      	ldrh	r2, [r7, #32]
 8008bfe:	4611      	mov	r1, r2
 8008c00:	4618      	mov	r0, r3
 8008c02:	f7fd faaf 	bl	8006164 <st_word>
		buf[BPB_SecPerClus] = (BYTE)pau;				/* Cluster size [sector] */
 8008c06:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008c08:	330d      	adds	r3, #13
 8008c0a:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8008c0c:	b2d2      	uxtb	r2, r2
 8008c0e:	701a      	strb	r2, [r3, #0]
		st_word(buf + BPB_RsvdSecCnt, (WORD)sz_rsv);	/* Size of reserved area */
 8008c10:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008c12:	330e      	adds	r3, #14
 8008c14:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8008c16:	b292      	uxth	r2, r2
 8008c18:	4611      	mov	r1, r2
 8008c1a:	4618      	mov	r0, r3
 8008c1c:	f7fd faa2 	bl	8006164 <st_word>
		buf[BPB_NumFATs] = (BYTE)n_fat;					/* Number of FATs */
 8008c20:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008c22:	3310      	adds	r3, #16
 8008c24:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8008c26:	b2d2      	uxtb	r2, r2
 8008c28:	701a      	strb	r2, [r3, #0]
		st_word(buf + BPB_RootEntCnt, (WORD)((fsty == FS_FAT32) ? 0 : n_root));	/* Number of root directory entries */
 8008c2a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008c2c:	f103 0211 	add.w	r2, r3, #17
 8008c30:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 8008c34:	2b03      	cmp	r3, #3
 8008c36:	d002      	beq.n	8008c3e <f_mkfs+0x53e>
 8008c38:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008c3a:	b29b      	uxth	r3, r3
 8008c3c:	e000      	b.n	8008c40 <f_mkfs+0x540>
 8008c3e:	2300      	movs	r3, #0
 8008c40:	4619      	mov	r1, r3
 8008c42:	4610      	mov	r0, r2
 8008c44:	f7fd fa8e 	bl	8006164 <st_word>
		if (sz_vol < 0x10000) {
 8008c48:	69bb      	ldr	r3, [r7, #24]
 8008c4a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008c4e:	d208      	bcs.n	8008c62 <f_mkfs+0x562>
			st_word(buf + BPB_TotSec16, (WORD)sz_vol);	/* Volume size in 16-bit LBA */
 8008c50:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008c52:	3313      	adds	r3, #19
 8008c54:	69ba      	ldr	r2, [r7, #24]
 8008c56:	b292      	uxth	r2, r2
 8008c58:	4611      	mov	r1, r2
 8008c5a:	4618      	mov	r0, r3
 8008c5c:	f7fd fa82 	bl	8006164 <st_word>
 8008c60:	e006      	b.n	8008c70 <f_mkfs+0x570>
		} else {
			st_dword(buf + BPB_TotSec32, (DWORD)sz_vol);	/* Volume size in 32-bit LBA */
 8008c62:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008c64:	3320      	adds	r3, #32
 8008c66:	69ba      	ldr	r2, [r7, #24]
 8008c68:	4611      	mov	r1, r2
 8008c6a:	4618      	mov	r0, r3
 8008c6c:	f7fd fa95 	bl	800619a <st_dword>
		}
		buf[BPB_Media] = 0xF8;							/* Media descriptor byte */
 8008c70:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008c72:	3315      	adds	r3, #21
 8008c74:	22f8      	movs	r2, #248	@ 0xf8
 8008c76:	701a      	strb	r2, [r3, #0]
		st_word(buf + BPB_SecPerTrk, 63);				/* Number of sectors per track (for int13) */
 8008c78:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008c7a:	3318      	adds	r3, #24
 8008c7c:	213f      	movs	r1, #63	@ 0x3f
 8008c7e:	4618      	mov	r0, r3
 8008c80:	f7fd fa70 	bl	8006164 <st_word>
		st_word(buf + BPB_NumHeads, 255);				/* Number of heads (for int13) */
 8008c84:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008c86:	331a      	adds	r3, #26
 8008c88:	21ff      	movs	r1, #255	@ 0xff
 8008c8a:	4618      	mov	r0, r3
 8008c8c:	f7fd fa6a 	bl	8006164 <st_word>
		st_dword(buf + BPB_HiddSec, (DWORD)b_vol);		/* Volume offset in the physical drive [sector] */
 8008c90:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008c92:	331c      	adds	r3, #28
 8008c94:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 8008c96:	4618      	mov	r0, r3
 8008c98:	f7fd fa7f 	bl	800619a <st_dword>
		if (fsty == FS_FAT32) {
 8008c9c:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 8008ca0:	2b03      	cmp	r3, #3
 8008ca2:	d12d      	bne.n	8008d00 <f_mkfs+0x600>
			st_dword(buf + BS_VolID32, vsn);			/* VSN */
 8008ca4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008ca6:	3343      	adds	r3, #67	@ 0x43
 8008ca8:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8008caa:	4618      	mov	r0, r3
 8008cac:	f7fd fa75 	bl	800619a <st_dword>
			st_dword(buf + BPB_FATSz32, sz_fat);		/* FAT size [sector] */
 8008cb0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008cb2:	3324      	adds	r3, #36	@ 0x24
 8008cb4:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8008cb6:	4618      	mov	r0, r3
 8008cb8:	f7fd fa6f 	bl	800619a <st_dword>
			st_dword(buf + BPB_RootClus32, 2);			/* Root directory cluster # (2) */
 8008cbc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008cbe:	332c      	adds	r3, #44	@ 0x2c
 8008cc0:	2102      	movs	r1, #2
 8008cc2:	4618      	mov	r0, r3
 8008cc4:	f7fd fa69 	bl	800619a <st_dword>
			st_word(buf + BPB_FSInfo32, 1);				/* Offset of FSINFO sector (VBR + 1) */
 8008cc8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008cca:	3330      	adds	r3, #48	@ 0x30
 8008ccc:	2101      	movs	r1, #1
 8008cce:	4618      	mov	r0, r3
 8008cd0:	f7fd fa48 	bl	8006164 <st_word>
			st_word(buf + BPB_BkBootSec32, 6);			/* Offset of backup VBR (VBR + 6) */
 8008cd4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008cd6:	3332      	adds	r3, #50	@ 0x32
 8008cd8:	2106      	movs	r1, #6
 8008cda:	4618      	mov	r0, r3
 8008cdc:	f7fd fa42 	bl	8006164 <st_word>
			buf[BS_DrvNum32] = 0x80;					/* Drive number (for int13) */
 8008ce0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008ce2:	3340      	adds	r3, #64	@ 0x40
 8008ce4:	2280      	movs	r2, #128	@ 0x80
 8008ce6:	701a      	strb	r2, [r3, #0]
			buf[BS_BootSig32] = 0x29;					/* Extended boot signature */
 8008ce8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008cea:	3342      	adds	r3, #66	@ 0x42
 8008cec:	2229      	movs	r2, #41	@ 0x29
 8008cee:	701a      	strb	r2, [r3, #0]
			memcpy(buf + BS_VolLab32, "NO NAME    " "FAT32   ", 19);	/* Volume label, FAT signature */
 8008cf0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008cf2:	3347      	adds	r3, #71	@ 0x47
 8008cf4:	2213      	movs	r2, #19
 8008cf6:	4971      	ldr	r1, [pc, #452]	@ (8008ebc <f_mkfs+0x7bc>)
 8008cf8:	4618      	mov	r0, r3
 8008cfa:	f00a f905 	bl	8012f08 <memcpy>
 8008cfe:	e01c      	b.n	8008d3a <f_mkfs+0x63a>
		} else {
			st_dword(buf + BS_VolID, vsn);				/* VSN */
 8008d00:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008d02:	3327      	adds	r3, #39	@ 0x27
 8008d04:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8008d06:	4618      	mov	r0, r3
 8008d08:	f7fd fa47 	bl	800619a <st_dword>
			st_word(buf + BPB_FATSz16, (WORD)sz_fat);	/* FAT size [sector] */
 8008d0c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008d0e:	3316      	adds	r3, #22
 8008d10:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8008d12:	b292      	uxth	r2, r2
 8008d14:	4611      	mov	r1, r2
 8008d16:	4618      	mov	r0, r3
 8008d18:	f7fd fa24 	bl	8006164 <st_word>
			buf[BS_DrvNum] = 0x80;						/* Drive number (for int13) */
 8008d1c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008d1e:	3324      	adds	r3, #36	@ 0x24
 8008d20:	2280      	movs	r2, #128	@ 0x80
 8008d22:	701a      	strb	r2, [r3, #0]
			buf[BS_BootSig] = 0x29;						/* Extended boot signature */
 8008d24:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008d26:	3326      	adds	r3, #38	@ 0x26
 8008d28:	2229      	movs	r2, #41	@ 0x29
 8008d2a:	701a      	strb	r2, [r3, #0]
			memcpy(buf + BS_VolLab, "NO NAME    " "FAT     ", 19);	/* Volume label, FAT signature */
 8008d2c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008d2e:	332b      	adds	r3, #43	@ 0x2b
 8008d30:	2213      	movs	r2, #19
 8008d32:	4963      	ldr	r1, [pc, #396]	@ (8008ec0 <f_mkfs+0x7c0>)
 8008d34:	4618      	mov	r0, r3
 8008d36:	f00a f8e7 	bl	8012f08 <memcpy>
		}
		st_word(buf + BS_55AA, 0xAA55);					/* Signature (offset is fixed here regardless of sector size) */
 8008d3a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008d3c:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 8008d40:	f64a 2155 	movw	r1, #43605	@ 0xaa55
 8008d44:	4618      	mov	r0, r3
 8008d46:	f7fd fa0d 	bl	8006164 <st_word>
		if (disk_write(pdrv, buf, b_vol, 1) != RES_OK) LEAVE_MKFS(FR_DISK_ERR);	/* Write it to the VBR sector */
 8008d4a:	f897 0043 	ldrb.w	r0, [r7, #67]	@ 0x43
 8008d4e:	2301      	movs	r3, #1
 8008d50:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8008d52:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8008d54:	f7fd f914 	bl	8005f80 <disk_write>
 8008d58:	4603      	mov	r3, r0
 8008d5a:	2b00      	cmp	r3, #0
 8008d5c:	d001      	beq.n	8008d62 <f_mkfs+0x662>
 8008d5e:	2301      	movs	r3, #1
 8008d60:	e11a      	b.n	8008f98 <f_mkfs+0x898>

		/* Create FSINFO record if needed */
		if (fsty == FS_FAT32) {
 8008d62:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 8008d66:	2b03      	cmp	r3, #3
 8008d68:	d140      	bne.n	8008dec <f_mkfs+0x6ec>
			disk_write(pdrv, buf, b_vol + 6, 1);		/* Write backup VBR (VBR + 6) */
 8008d6a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008d6c:	1d9a      	adds	r2, r3, #6
 8008d6e:	f897 0043 	ldrb.w	r0, [r7, #67]	@ 0x43
 8008d72:	2301      	movs	r3, #1
 8008d74:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8008d76:	f7fd f903 	bl	8005f80 <disk_write>
			memset(buf, 0, ss);
 8008d7a:	8c3b      	ldrh	r3, [r7, #32]
 8008d7c:	461a      	mov	r2, r3
 8008d7e:	2100      	movs	r1, #0
 8008d80:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8008d82:	f00a f83d 	bl	8012e00 <memset>
			st_dword(buf + FSI_LeadSig, 0x41615252);
 8008d86:	494f      	ldr	r1, [pc, #316]	@ (8008ec4 <f_mkfs+0x7c4>)
 8008d88:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8008d8a:	f7fd fa06 	bl	800619a <st_dword>
			st_dword(buf + FSI_StrucSig, 0x61417272);
 8008d8e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008d90:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 8008d94:	494c      	ldr	r1, [pc, #304]	@ (8008ec8 <f_mkfs+0x7c8>)
 8008d96:	4618      	mov	r0, r3
 8008d98:	f7fd f9ff 	bl	800619a <st_dword>
			st_dword(buf + FSI_Free_Count, n_clst - 1);	/* Number of free clusters */
 8008d9c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008d9e:	f503 72f4 	add.w	r2, r3, #488	@ 0x1e8
 8008da2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008da4:	3b01      	subs	r3, #1
 8008da6:	4619      	mov	r1, r3
 8008da8:	4610      	mov	r0, r2
 8008daa:	f7fd f9f6 	bl	800619a <st_dword>
			st_dword(buf + FSI_Nxt_Free, 2);			/* Last allocated cluster# */
 8008dae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008db0:	f503 73f6 	add.w	r3, r3, #492	@ 0x1ec
 8008db4:	2102      	movs	r1, #2
 8008db6:	4618      	mov	r0, r3
 8008db8:	f7fd f9ef 	bl	800619a <st_dword>
			st_word(buf + BS_55AA, 0xAA55);
 8008dbc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008dbe:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 8008dc2:	f64a 2155 	movw	r1, #43605	@ 0xaa55
 8008dc6:	4618      	mov	r0, r3
 8008dc8:	f7fd f9cc 	bl	8006164 <st_word>
			disk_write(pdrv, buf, b_vol + 7, 1);		/* Write backup FSINFO (VBR + 7) */
 8008dcc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008dce:	1dda      	adds	r2, r3, #7
 8008dd0:	f897 0043 	ldrb.w	r0, [r7, #67]	@ 0x43
 8008dd4:	2301      	movs	r3, #1
 8008dd6:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8008dd8:	f7fd f8d2 	bl	8005f80 <disk_write>
			disk_write(pdrv, buf, b_vol + 1, 1);		/* Write original FSINFO (VBR + 1) */
 8008ddc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008dde:	1c5a      	adds	r2, r3, #1
 8008de0:	f897 0043 	ldrb.w	r0, [r7, #67]	@ 0x43
 8008de4:	2301      	movs	r3, #1
 8008de6:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8008de8:	f7fd f8ca 	bl	8005f80 <disk_write>
		}

		/* Initialize FAT area */
		memset(buf, 0, sz_buf * ss);
 8008dec:	8c3b      	ldrh	r3, [r7, #32]
 8008dee:	461a      	mov	r2, r3
 8008df0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008df2:	fb02 f303 	mul.w	r3, r2, r3
 8008df6:	461a      	mov	r2, r3
 8008df8:	2100      	movs	r1, #0
 8008dfa:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8008dfc:	f00a f800 	bl	8012e00 <memset>
		sect = b_fat;		/* FAT start sector */
 8008e00:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8008e02:	673b      	str	r3, [r7, #112]	@ 0x70
		for (i = 0; i < n_fat; i++) {			/* Initialize FATs each */
 8008e04:	2300      	movs	r3, #0
 8008e06:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008e08:	e04b      	b.n	8008ea2 <f_mkfs+0x7a2>
			if (fsty == FS_FAT32) {
 8008e0a:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 8008e0e:	2b03      	cmp	r3, #3
 8008e10:	d113      	bne.n	8008e3a <f_mkfs+0x73a>
				st_dword(buf + 0, 0xFFFFFFF8);	/* FAT[0] */
 8008e12:	f06f 0107 	mvn.w	r1, #7
 8008e16:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8008e18:	f7fd f9bf 	bl	800619a <st_dword>
				st_dword(buf + 4, 0xFFFFFFFF);	/* FAT[1] */
 8008e1c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008e1e:	3304      	adds	r3, #4
 8008e20:	f04f 31ff 	mov.w	r1, #4294967295
 8008e24:	4618      	mov	r0, r3
 8008e26:	f7fd f9b8 	bl	800619a <st_dword>
				st_dword(buf + 8, 0x0FFFFFFF);	/* FAT[2] (root directory) */
 8008e2a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008e2c:	3308      	adds	r3, #8
 8008e2e:	f06f 4170 	mvn.w	r1, #4026531840	@ 0xf0000000
 8008e32:	4618      	mov	r0, r3
 8008e34:	f7fd f9b1 	bl	800619a <st_dword>
 8008e38:	e00b      	b.n	8008e52 <f_mkfs+0x752>
			} else {
				st_dword(buf + 0, (fsty == FS_FAT12) ? 0xFFFFF8 : 0xFFFFFFF8);	/* FAT[0] and FAT[1] */
 8008e3a:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 8008e3e:	2b01      	cmp	r3, #1
 8008e40:	d101      	bne.n	8008e46 <f_mkfs+0x746>
 8008e42:	4b22      	ldr	r3, [pc, #136]	@ (8008ecc <f_mkfs+0x7cc>)
 8008e44:	e001      	b.n	8008e4a <f_mkfs+0x74a>
 8008e46:	f06f 0307 	mvn.w	r3, #7
 8008e4a:	4619      	mov	r1, r3
 8008e4c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8008e4e:	f7fd f9a4 	bl	800619a <st_dword>
			}
			nsect = sz_fat;		/* Number of FAT sectors */
 8008e52:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008e54:	65fb      	str	r3, [r7, #92]	@ 0x5c
			do {	/* Fill FAT sectors */
				n = (nsect > sz_buf) ? sz_buf : nsect;
 8008e56:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8008e58:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008e5a:	4293      	cmp	r3, r2
 8008e5c:	bf28      	it	cs
 8008e5e:	4613      	movcs	r3, r2
 8008e60:	667b      	str	r3, [r7, #100]	@ 0x64
				if (disk_write(pdrv, buf, sect, (UINT)n) != RES_OK) LEAVE_MKFS(FR_DISK_ERR);
 8008e62:	f897 0043 	ldrb.w	r0, [r7, #67]	@ 0x43
 8008e66:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8008e68:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 8008e6a:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8008e6c:	f7fd f888 	bl	8005f80 <disk_write>
 8008e70:	4603      	mov	r3, r0
 8008e72:	2b00      	cmp	r3, #0
 8008e74:	d001      	beq.n	8008e7a <f_mkfs+0x77a>
 8008e76:	2301      	movs	r3, #1
 8008e78:	e08e      	b.n	8008f98 <f_mkfs+0x898>
				memset(buf, 0, ss);	/* Rest of FAT all are cleared */
 8008e7a:	8c3b      	ldrh	r3, [r7, #32]
 8008e7c:	461a      	mov	r2, r3
 8008e7e:	2100      	movs	r1, #0
 8008e80:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8008e82:	f009 ffbd 	bl	8012e00 <memset>
				sect += n; nsect -= n;
 8008e86:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 8008e88:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8008e8a:	4413      	add	r3, r2
 8008e8c:	673b      	str	r3, [r7, #112]	@ 0x70
 8008e8e:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8008e90:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8008e92:	1ad3      	subs	r3, r2, r3
 8008e94:	65fb      	str	r3, [r7, #92]	@ 0x5c
			} while (nsect);
 8008e96:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8008e98:	2b00      	cmp	r3, #0
 8008e9a:	d1dc      	bne.n	8008e56 <f_mkfs+0x756>
		for (i = 0; i < n_fat; i++) {			/* Initialize FATs each */
 8008e9c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008e9e:	3301      	adds	r3, #1
 8008ea0:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008ea2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8008ea4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008ea6:	429a      	cmp	r2, r3
 8008ea8:	d3af      	bcc.n	8008e0a <f_mkfs+0x70a>
		}

		/* Initialize root directory (fill with zero) */
		nsect = (fsty == FS_FAT32) ? pau : sz_dir;	/* Number of root directory sectors */
 8008eaa:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 8008eae:	2b03      	cmp	r3, #3
 8008eb0:	d10e      	bne.n	8008ed0 <f_mkfs+0x7d0>
 8008eb2:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8008eb4:	e00d      	b.n	8008ed2 <f_mkfs+0x7d2>
 8008eb6:	bf00      	nop
 8008eb8:	08014388 	.word	0x08014388
 8008ebc:	08014394 	.word	0x08014394
 8008ec0:	080143a8 	.word	0x080143a8
 8008ec4:	41615252 	.word	0x41615252
 8008ec8:	61417272 	.word	0x61417272
 8008ecc:	00fffff8 	.word	0x00fffff8
 8008ed0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008ed2:	65fb      	str	r3, [r7, #92]	@ 0x5c
		do {
			n = (nsect > sz_buf) ? sz_buf : nsect;
 8008ed4:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8008ed6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008ed8:	4293      	cmp	r3, r2
 8008eda:	bf28      	it	cs
 8008edc:	4613      	movcs	r3, r2
 8008ede:	667b      	str	r3, [r7, #100]	@ 0x64
			if (disk_write(pdrv, buf, sect, (UINT)n) != RES_OK) LEAVE_MKFS(FR_DISK_ERR);
 8008ee0:	f897 0043 	ldrb.w	r0, [r7, #67]	@ 0x43
 8008ee4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8008ee6:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 8008ee8:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8008eea:	f7fd f849 	bl	8005f80 <disk_write>
 8008eee:	4603      	mov	r3, r0
 8008ef0:	2b00      	cmp	r3, #0
 8008ef2:	d001      	beq.n	8008ef8 <f_mkfs+0x7f8>
 8008ef4:	2301      	movs	r3, #1
 8008ef6:	e04f      	b.n	8008f98 <f_mkfs+0x898>
			sect += n; nsect -= n;
 8008ef8:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 8008efa:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8008efc:	4413      	add	r3, r2
 8008efe:	673b      	str	r3, [r7, #112]	@ 0x70
 8008f00:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8008f02:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8008f04:	1ad3      	subs	r3, r2, r3
 8008f06:	65fb      	str	r3, [r7, #92]	@ 0x5c
		} while (nsect);
 8008f08:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8008f0a:	2b00      	cmp	r3, #0
 8008f0c:	d1e2      	bne.n	8008ed4 <f_mkfs+0x7d4>
	/* A FAT volume has been created here */

	/* Determine system ID in the MBR partition table */
	if (FF_FS_EXFAT && fsty == FS_EXFAT) {
		sys = 0x07;		/* exFAT */
	} else if (fsty == FS_FAT32) {
 8008f0e:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 8008f12:	2b03      	cmp	r3, #3
 8008f14:	d103      	bne.n	8008f1e <f_mkfs+0x81e>
		sys = 0x0C;		/* FAT32X */
 8008f16:	230c      	movs	r3, #12
 8008f18:	f887 305a 	strb.w	r3, [r7, #90]	@ 0x5a
 8008f1c:	e012      	b.n	8008f44 <f_mkfs+0x844>
	} else if (sz_vol >= 0x10000) {
 8008f1e:	69bb      	ldr	r3, [r7, #24]
 8008f20:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008f24:	d303      	bcc.n	8008f2e <f_mkfs+0x82e>
		sys = 0x06;		/* FAT12/16 (large) */
 8008f26:	2306      	movs	r3, #6
 8008f28:	f887 305a 	strb.w	r3, [r7, #90]	@ 0x5a
 8008f2c:	e00a      	b.n	8008f44 <f_mkfs+0x844>
	} else if (fsty == FS_FAT16) {
 8008f2e:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 8008f32:	2b02      	cmp	r3, #2
 8008f34:	d103      	bne.n	8008f3e <f_mkfs+0x83e>
		sys = 0x04;		/* FAT16 */
 8008f36:	2304      	movs	r3, #4
 8008f38:	f887 305a 	strb.w	r3, [r7, #90]	@ 0x5a
 8008f3c:	e002      	b.n	8008f44 <f_mkfs+0x844>
	} else {
		sys = 0x01;		/* FAT12 */
 8008f3e:	2301      	movs	r3, #1
 8008f40:	f887 305a 	strb.w	r3, [r7, #90]	@ 0x5a
			if (disk_read(pdrv, buf, 0, 1) != RES_OK) LEAVE_MKFS(FR_DISK_ERR);	/* Read the MBR */
			buf[MBR_Table + (ipart - 1) * SZ_PTE + PTE_System] = sys;			/* Set system ID */
			if (disk_write(pdrv, buf, 0, 1) != RES_OK) LEAVE_MKFS(FR_DISK_ERR);	/* Write it back to the MBR */
		}
	} else {								/* Volume as a new single partition */
		if (!(fsopt & FM_SFD)) {			/* Create partition table if not in SFD format */
 8008f44:	f897 3040 	ldrb.w	r3, [r7, #64]	@ 0x40
 8008f48:	f003 0308 	and.w	r3, r3, #8
 8008f4c:	2b00      	cmp	r3, #0
 8008f4e:	d116      	bne.n	8008f7e <f_mkfs+0x87e>
			lba[0] = sz_vol; lba[1] = 0;
 8008f50:	69bb      	ldr	r3, [r7, #24]
 8008f52:	613b      	str	r3, [r7, #16]
 8008f54:	2300      	movs	r3, #0
 8008f56:	617b      	str	r3, [r7, #20]
			res = create_partition(pdrv, lba, sys, buf);
 8008f58:	f897 205a 	ldrb.w	r2, [r7, #90]	@ 0x5a
 8008f5c:	f107 0110 	add.w	r1, r7, #16
 8008f60:	f897 0043 	ldrb.w	r0, [r7, #67]	@ 0x43
 8008f64:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008f66:	f7ff faa7 	bl	80084b8 <create_partition>
 8008f6a:	4603      	mov	r3, r0
 8008f6c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
			if (res != FR_OK) LEAVE_MKFS(res);
 8008f70:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8008f74:	2b00      	cmp	r3, #0
 8008f76:	d002      	beq.n	8008f7e <f_mkfs+0x87e>
 8008f78:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8008f7c:	e00c      	b.n	8008f98 <f_mkfs+0x898>
		}
	}

	if (disk_ioctl(pdrv, CTRL_SYNC, 0) != RES_OK) LEAVE_MKFS(FR_DISK_ERR);
 8008f7e:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8008f82:	2200      	movs	r2, #0
 8008f84:	2100      	movs	r1, #0
 8008f86:	4618      	mov	r0, r3
 8008f88:	f7fd f82e 	bl	8005fe8 <disk_ioctl>
 8008f8c:	4603      	mov	r3, r0
 8008f8e:	2b00      	cmp	r3, #0
 8008f90:	d001      	beq.n	8008f96 <f_mkfs+0x896>
 8008f92:	2301      	movs	r3, #1
 8008f94:	e000      	b.n	8008f98 <f_mkfs+0x898>

	LEAVE_MKFS(FR_OK);
 8008f96:	2300      	movs	r3, #0
}
 8008f98:	4618      	mov	r0, r3
 8008f9a:	3778      	adds	r7, #120	@ 0x78
 8008f9c:	46bd      	mov	sp, r7
 8008f9e:	bd80      	pop	{r7, pc}

08008fa0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8008fa0:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8008fd8 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8008fa4:	f7fc ff58 	bl	8005e58 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8008fa8:	480c      	ldr	r0, [pc, #48]	@ (8008fdc <LoopForever+0x6>)
  ldr r1, =_edata
 8008faa:	490d      	ldr	r1, [pc, #52]	@ (8008fe0 <LoopForever+0xa>)
  ldr r2, =_sidata
 8008fac:	4a0d      	ldr	r2, [pc, #52]	@ (8008fe4 <LoopForever+0xe>)
  movs r3, #0
 8008fae:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8008fb0:	e002      	b.n	8008fb8 <LoopCopyDataInit>

08008fb2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8008fb2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8008fb4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8008fb6:	3304      	adds	r3, #4

08008fb8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8008fb8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8008fba:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8008fbc:	d3f9      	bcc.n	8008fb2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8008fbe:	4a0a      	ldr	r2, [pc, #40]	@ (8008fe8 <LoopForever+0x12>)
  ldr r4, =_ebss
 8008fc0:	4c0a      	ldr	r4, [pc, #40]	@ (8008fec <LoopForever+0x16>)
  movs r3, #0
 8008fc2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8008fc4:	e001      	b.n	8008fca <LoopFillZerobss>

08008fc6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8008fc6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8008fc8:	3204      	adds	r2, #4

08008fca <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8008fca:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8008fcc:	d3fb      	bcc.n	8008fc6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8008fce:	f009 ff6d 	bl	8012eac <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8008fd2:	f7fa f831 	bl	8003038 <main>

08008fd6 <LoopForever>:

LoopForever:
    b LoopForever
 8008fd6:	e7fe      	b.n	8008fd6 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8008fd8:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8008fdc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8008fe0:	20000064 	.word	0x20000064
  ldr r2, =_sidata
 8008fe4:	08014620 	.word	0x08014620
  ldr r2, =_sbss
 8008fe8:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8008fec:	20005268 	.word	0x20005268

08008ff0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8008ff0:	e7fe      	b.n	8008ff0 <ADC1_2_IRQHandler>

08008ff2 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8008ff2:	b580      	push	{r7, lr}
 8008ff4:	b082      	sub	sp, #8
 8008ff6:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8008ff8:	2300      	movs	r3, #0
 8008ffa:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8008ffc:	2003      	movs	r0, #3
 8008ffe:	f001 fd11 	bl	800aa24 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8009002:	200f      	movs	r0, #15
 8009004:	f000 f80e 	bl	8009024 <HAL_InitTick>
 8009008:	4603      	mov	r3, r0
 800900a:	2b00      	cmp	r3, #0
 800900c:	d002      	beq.n	8009014 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800900e:	2301      	movs	r3, #1
 8009010:	71fb      	strb	r3, [r7, #7]
 8009012:	e001      	b.n	8009018 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8009014:	f7fc fa56 	bl	80054c4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8009018:	79fb      	ldrb	r3, [r7, #7]
}
 800901a:	4618      	mov	r0, r3
 800901c:	3708      	adds	r7, #8
 800901e:	46bd      	mov	sp, r7
 8009020:	bd80      	pop	{r7, pc}
	...

08009024 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8009024:	b580      	push	{r7, lr}
 8009026:	b084      	sub	sp, #16
 8009028:	af00      	add	r7, sp, #0
 800902a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 800902c:	2300      	movs	r3, #0
 800902e:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8009030:	4b17      	ldr	r3, [pc, #92]	@ (8009090 <HAL_InitTick+0x6c>)
 8009032:	781b      	ldrb	r3, [r3, #0]
 8009034:	2b00      	cmp	r3, #0
 8009036:	d023      	beq.n	8009080 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8009038:	4b16      	ldr	r3, [pc, #88]	@ (8009094 <HAL_InitTick+0x70>)
 800903a:	681a      	ldr	r2, [r3, #0]
 800903c:	4b14      	ldr	r3, [pc, #80]	@ (8009090 <HAL_InitTick+0x6c>)
 800903e:	781b      	ldrb	r3, [r3, #0]
 8009040:	4619      	mov	r1, r3
 8009042:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8009046:	fbb3 f3f1 	udiv	r3, r3, r1
 800904a:	fbb2 f3f3 	udiv	r3, r2, r3
 800904e:	4618      	mov	r0, r3
 8009050:	f001 fd21 	bl	800aa96 <HAL_SYSTICK_Config>
 8009054:	4603      	mov	r3, r0
 8009056:	2b00      	cmp	r3, #0
 8009058:	d10f      	bne.n	800907a <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800905a:	687b      	ldr	r3, [r7, #4]
 800905c:	2b0f      	cmp	r3, #15
 800905e:	d809      	bhi.n	8009074 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8009060:	2200      	movs	r2, #0
 8009062:	6879      	ldr	r1, [r7, #4]
 8009064:	f04f 30ff 	mov.w	r0, #4294967295
 8009068:	f001 fce7 	bl	800aa3a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800906c:	4a0a      	ldr	r2, [pc, #40]	@ (8009098 <HAL_InitTick+0x74>)
 800906e:	687b      	ldr	r3, [r7, #4]
 8009070:	6013      	str	r3, [r2, #0]
 8009072:	e007      	b.n	8009084 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8009074:	2301      	movs	r3, #1
 8009076:	73fb      	strb	r3, [r7, #15]
 8009078:	e004      	b.n	8009084 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 800907a:	2301      	movs	r3, #1
 800907c:	73fb      	strb	r3, [r7, #15]
 800907e:	e001      	b.n	8009084 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8009080:	2301      	movs	r3, #1
 8009082:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8009084:	7bfb      	ldrb	r3, [r7, #15]
}
 8009086:	4618      	mov	r0, r3
 8009088:	3710      	adds	r7, #16
 800908a:	46bd      	mov	sp, r7
 800908c:	bd80      	pop	{r7, pc}
 800908e:	bf00      	nop
 8009090:	20000010 	.word	0x20000010
 8009094:	20000000 	.word	0x20000000
 8009098:	2000000c 	.word	0x2000000c

0800909c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800909c:	b480      	push	{r7}
 800909e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80090a0:	4b06      	ldr	r3, [pc, #24]	@ (80090bc <HAL_IncTick+0x20>)
 80090a2:	781b      	ldrb	r3, [r3, #0]
 80090a4:	461a      	mov	r2, r3
 80090a6:	4b06      	ldr	r3, [pc, #24]	@ (80090c0 <HAL_IncTick+0x24>)
 80090a8:	681b      	ldr	r3, [r3, #0]
 80090aa:	4413      	add	r3, r2
 80090ac:	4a04      	ldr	r2, [pc, #16]	@ (80090c0 <HAL_IncTick+0x24>)
 80090ae:	6013      	str	r3, [r2, #0]
}
 80090b0:	bf00      	nop
 80090b2:	46bd      	mov	sp, r7
 80090b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090b8:	4770      	bx	lr
 80090ba:	bf00      	nop
 80090bc:	20000010 	.word	0x20000010
 80090c0:	2000511c 	.word	0x2000511c

080090c4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80090c4:	b480      	push	{r7}
 80090c6:	af00      	add	r7, sp, #0
  return uwTick;
 80090c8:	4b03      	ldr	r3, [pc, #12]	@ (80090d8 <HAL_GetTick+0x14>)
 80090ca:	681b      	ldr	r3, [r3, #0]
}
 80090cc:	4618      	mov	r0, r3
 80090ce:	46bd      	mov	sp, r7
 80090d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090d4:	4770      	bx	lr
 80090d6:	bf00      	nop
 80090d8:	2000511c 	.word	0x2000511c

080090dc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80090dc:	b580      	push	{r7, lr}
 80090de:	b084      	sub	sp, #16
 80090e0:	af00      	add	r7, sp, #0
 80090e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80090e4:	f7ff ffee 	bl	80090c4 <HAL_GetTick>
 80090e8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80090ea:	687b      	ldr	r3, [r7, #4]
 80090ec:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 80090ee:	68fb      	ldr	r3, [r7, #12]
 80090f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80090f4:	d005      	beq.n	8009102 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 80090f6:	4b0a      	ldr	r3, [pc, #40]	@ (8009120 <HAL_Delay+0x44>)
 80090f8:	781b      	ldrb	r3, [r3, #0]
 80090fa:	461a      	mov	r2, r3
 80090fc:	68fb      	ldr	r3, [r7, #12]
 80090fe:	4413      	add	r3, r2
 8009100:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8009102:	bf00      	nop
 8009104:	f7ff ffde 	bl	80090c4 <HAL_GetTick>
 8009108:	4602      	mov	r2, r0
 800910a:	68bb      	ldr	r3, [r7, #8]
 800910c:	1ad3      	subs	r3, r2, r3
 800910e:	68fa      	ldr	r2, [r7, #12]
 8009110:	429a      	cmp	r2, r3
 8009112:	d8f7      	bhi.n	8009104 <HAL_Delay+0x28>
  {
  }
}
 8009114:	bf00      	nop
 8009116:	bf00      	nop
 8009118:	3710      	adds	r7, #16
 800911a:	46bd      	mov	sp, r7
 800911c:	bd80      	pop	{r7, pc}
 800911e:	bf00      	nop
 8009120:	20000010 	.word	0x20000010

08009124 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8009124:	b480      	push	{r7}
 8009126:	b083      	sub	sp, #12
 8009128:	af00      	add	r7, sp, #0
 800912a:	6078      	str	r0, [r7, #4]
 800912c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 800912e:	687b      	ldr	r3, [r7, #4]
 8009130:	689b      	ldr	r3, [r3, #8]
 8009132:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8009136:	683b      	ldr	r3, [r7, #0]
 8009138:	431a      	orrs	r2, r3
 800913a:	687b      	ldr	r3, [r7, #4]
 800913c:	609a      	str	r2, [r3, #8]
}
 800913e:	bf00      	nop
 8009140:	370c      	adds	r7, #12
 8009142:	46bd      	mov	sp, r7
 8009144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009148:	4770      	bx	lr

0800914a <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 800914a:	b480      	push	{r7}
 800914c:	b083      	sub	sp, #12
 800914e:	af00      	add	r7, sp, #0
 8009150:	6078      	str	r0, [r7, #4]
 8009152:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8009154:	687b      	ldr	r3, [r7, #4]
 8009156:	689b      	ldr	r3, [r3, #8]
 8009158:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 800915c:	683b      	ldr	r3, [r7, #0]
 800915e:	431a      	orrs	r2, r3
 8009160:	687b      	ldr	r3, [r7, #4]
 8009162:	609a      	str	r2, [r3, #8]
}
 8009164:	bf00      	nop
 8009166:	370c      	adds	r7, #12
 8009168:	46bd      	mov	sp, r7
 800916a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800916e:	4770      	bx	lr

08009170 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8009170:	b480      	push	{r7}
 8009172:	b083      	sub	sp, #12
 8009174:	af00      	add	r7, sp, #0
 8009176:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8009178:	687b      	ldr	r3, [r7, #4]
 800917a:	689b      	ldr	r3, [r3, #8]
 800917c:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8009180:	4618      	mov	r0, r3
 8009182:	370c      	adds	r7, #12
 8009184:	46bd      	mov	sp, r7
 8009186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800918a:	4770      	bx	lr

0800918c <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 800918c:	b480      	push	{r7}
 800918e:	b087      	sub	sp, #28
 8009190:	af00      	add	r7, sp, #0
 8009192:	60f8      	str	r0, [r7, #12]
 8009194:	60b9      	str	r1, [r7, #8]
 8009196:	607a      	str	r2, [r7, #4]
 8009198:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800919a:	68fb      	ldr	r3, [r7, #12]
 800919c:	3360      	adds	r3, #96	@ 0x60
 800919e:	461a      	mov	r2, r3
 80091a0:	68bb      	ldr	r3, [r7, #8]
 80091a2:	009b      	lsls	r3, r3, #2
 80091a4:	4413      	add	r3, r2
 80091a6:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80091a8:	697b      	ldr	r3, [r7, #20]
 80091aa:	681a      	ldr	r2, [r3, #0]
 80091ac:	4b08      	ldr	r3, [pc, #32]	@ (80091d0 <LL_ADC_SetOffset+0x44>)
 80091ae:	4013      	ands	r3, r2
 80091b0:	687a      	ldr	r2, [r7, #4]
 80091b2:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 80091b6:	683a      	ldr	r2, [r7, #0]
 80091b8:	430a      	orrs	r2, r1
 80091ba:	4313      	orrs	r3, r2
 80091bc:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 80091c0:	697b      	ldr	r3, [r7, #20]
 80091c2:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 80091c4:	bf00      	nop
 80091c6:	371c      	adds	r7, #28
 80091c8:	46bd      	mov	sp, r7
 80091ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091ce:	4770      	bx	lr
 80091d0:	03fff000 	.word	0x03fff000

080091d4 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 80091d4:	b480      	push	{r7}
 80091d6:	b085      	sub	sp, #20
 80091d8:	af00      	add	r7, sp, #0
 80091da:	6078      	str	r0, [r7, #4]
 80091dc:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80091de:	687b      	ldr	r3, [r7, #4]
 80091e0:	3360      	adds	r3, #96	@ 0x60
 80091e2:	461a      	mov	r2, r3
 80091e4:	683b      	ldr	r3, [r7, #0]
 80091e6:	009b      	lsls	r3, r3, #2
 80091e8:	4413      	add	r3, r2
 80091ea:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80091ec:	68fb      	ldr	r3, [r7, #12]
 80091ee:	681b      	ldr	r3, [r3, #0]
 80091f0:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 80091f4:	4618      	mov	r0, r3
 80091f6:	3714      	adds	r7, #20
 80091f8:	46bd      	mov	sp, r7
 80091fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091fe:	4770      	bx	lr

08009200 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8009200:	b480      	push	{r7}
 8009202:	b087      	sub	sp, #28
 8009204:	af00      	add	r7, sp, #0
 8009206:	60f8      	str	r0, [r7, #12]
 8009208:	60b9      	str	r1, [r7, #8]
 800920a:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800920c:	68fb      	ldr	r3, [r7, #12]
 800920e:	3360      	adds	r3, #96	@ 0x60
 8009210:	461a      	mov	r2, r3
 8009212:	68bb      	ldr	r3, [r7, #8]
 8009214:	009b      	lsls	r3, r3, #2
 8009216:	4413      	add	r3, r2
 8009218:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800921a:	697b      	ldr	r3, [r7, #20]
 800921c:	681b      	ldr	r3, [r3, #0]
 800921e:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8009222:	687b      	ldr	r3, [r7, #4]
 8009224:	431a      	orrs	r2, r3
 8009226:	697b      	ldr	r3, [r7, #20]
 8009228:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 800922a:	bf00      	nop
 800922c:	371c      	adds	r7, #28
 800922e:	46bd      	mov	sp, r7
 8009230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009234:	4770      	bx	lr

08009236 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8009236:	b480      	push	{r7}
 8009238:	b083      	sub	sp, #12
 800923a:	af00      	add	r7, sp, #0
 800923c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 800923e:	687b      	ldr	r3, [r7, #4]
 8009240:	68db      	ldr	r3, [r3, #12]
 8009242:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8009246:	2b00      	cmp	r3, #0
 8009248:	d101      	bne.n	800924e <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 800924a:	2301      	movs	r3, #1
 800924c:	e000      	b.n	8009250 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 800924e:	2300      	movs	r3, #0
}
 8009250:	4618      	mov	r0, r3
 8009252:	370c      	adds	r7, #12
 8009254:	46bd      	mov	sp, r7
 8009256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800925a:	4770      	bx	lr

0800925c <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 800925c:	b480      	push	{r7}
 800925e:	b087      	sub	sp, #28
 8009260:	af00      	add	r7, sp, #0
 8009262:	60f8      	str	r0, [r7, #12]
 8009264:	60b9      	str	r1, [r7, #8]
 8009266:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8009268:	68fb      	ldr	r3, [r7, #12]
 800926a:	3330      	adds	r3, #48	@ 0x30
 800926c:	461a      	mov	r2, r3
 800926e:	68bb      	ldr	r3, [r7, #8]
 8009270:	0a1b      	lsrs	r3, r3, #8
 8009272:	009b      	lsls	r3, r3, #2
 8009274:	f003 030c 	and.w	r3, r3, #12
 8009278:	4413      	add	r3, r2
 800927a:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 800927c:	697b      	ldr	r3, [r7, #20]
 800927e:	681a      	ldr	r2, [r3, #0]
 8009280:	68bb      	ldr	r3, [r7, #8]
 8009282:	f003 031f 	and.w	r3, r3, #31
 8009286:	211f      	movs	r1, #31
 8009288:	fa01 f303 	lsl.w	r3, r1, r3
 800928c:	43db      	mvns	r3, r3
 800928e:	401a      	ands	r2, r3
 8009290:	687b      	ldr	r3, [r7, #4]
 8009292:	0e9b      	lsrs	r3, r3, #26
 8009294:	f003 011f 	and.w	r1, r3, #31
 8009298:	68bb      	ldr	r3, [r7, #8]
 800929a:	f003 031f 	and.w	r3, r3, #31
 800929e:	fa01 f303 	lsl.w	r3, r1, r3
 80092a2:	431a      	orrs	r2, r3
 80092a4:	697b      	ldr	r3, [r7, #20]
 80092a6:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80092a8:	bf00      	nop
 80092aa:	371c      	adds	r7, #28
 80092ac:	46bd      	mov	sp, r7
 80092ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092b2:	4770      	bx	lr

080092b4 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 80092b4:	b480      	push	{r7}
 80092b6:	b087      	sub	sp, #28
 80092b8:	af00      	add	r7, sp, #0
 80092ba:	60f8      	str	r0, [r7, #12]
 80092bc:	60b9      	str	r1, [r7, #8]
 80092be:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 80092c0:	68fb      	ldr	r3, [r7, #12]
 80092c2:	3314      	adds	r3, #20
 80092c4:	461a      	mov	r2, r3
 80092c6:	68bb      	ldr	r3, [r7, #8]
 80092c8:	0e5b      	lsrs	r3, r3, #25
 80092ca:	009b      	lsls	r3, r3, #2
 80092cc:	f003 0304 	and.w	r3, r3, #4
 80092d0:	4413      	add	r3, r2
 80092d2:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 80092d4:	697b      	ldr	r3, [r7, #20]
 80092d6:	681a      	ldr	r2, [r3, #0]
 80092d8:	68bb      	ldr	r3, [r7, #8]
 80092da:	0d1b      	lsrs	r3, r3, #20
 80092dc:	f003 031f 	and.w	r3, r3, #31
 80092e0:	2107      	movs	r1, #7
 80092e2:	fa01 f303 	lsl.w	r3, r1, r3
 80092e6:	43db      	mvns	r3, r3
 80092e8:	401a      	ands	r2, r3
 80092ea:	68bb      	ldr	r3, [r7, #8]
 80092ec:	0d1b      	lsrs	r3, r3, #20
 80092ee:	f003 031f 	and.w	r3, r3, #31
 80092f2:	6879      	ldr	r1, [r7, #4]
 80092f4:	fa01 f303 	lsl.w	r3, r1, r3
 80092f8:	431a      	orrs	r2, r3
 80092fa:	697b      	ldr	r3, [r7, #20]
 80092fc:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 80092fe:	bf00      	nop
 8009300:	371c      	adds	r7, #28
 8009302:	46bd      	mov	sp, r7
 8009304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009308:	4770      	bx	lr
	...

0800930c <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 800930c:	b480      	push	{r7}
 800930e:	b085      	sub	sp, #20
 8009310:	af00      	add	r7, sp, #0
 8009312:	60f8      	str	r0, [r7, #12]
 8009314:	60b9      	str	r1, [r7, #8]
 8009316:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8009318:	68fb      	ldr	r3, [r7, #12]
 800931a:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 800931e:	68bb      	ldr	r3, [r7, #8]
 8009320:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009324:	43db      	mvns	r3, r3
 8009326:	401a      	ands	r2, r3
 8009328:	687b      	ldr	r3, [r7, #4]
 800932a:	f003 0318 	and.w	r3, r3, #24
 800932e:	4908      	ldr	r1, [pc, #32]	@ (8009350 <LL_ADC_SetChannelSingleDiff+0x44>)
 8009330:	40d9      	lsrs	r1, r3
 8009332:	68bb      	ldr	r3, [r7, #8]
 8009334:	400b      	ands	r3, r1
 8009336:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800933a:	431a      	orrs	r2, r3
 800933c:	68fb      	ldr	r3, [r7, #12]
 800933e:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8009342:	bf00      	nop
 8009344:	3714      	adds	r7, #20
 8009346:	46bd      	mov	sp, r7
 8009348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800934c:	4770      	bx	lr
 800934e:	bf00      	nop
 8009350:	0007ffff 	.word	0x0007ffff

08009354 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8009354:	b480      	push	{r7}
 8009356:	b083      	sub	sp, #12
 8009358:	af00      	add	r7, sp, #0
 800935a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 800935c:	687b      	ldr	r3, [r7, #4]
 800935e:	689b      	ldr	r3, [r3, #8]
 8009360:	f003 031f 	and.w	r3, r3, #31
}
 8009364:	4618      	mov	r0, r3
 8009366:	370c      	adds	r7, #12
 8009368:	46bd      	mov	sp, r7
 800936a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800936e:	4770      	bx	lr

08009370 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8009370:	b480      	push	{r7}
 8009372:	b083      	sub	sp, #12
 8009374:	af00      	add	r7, sp, #0
 8009376:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8009378:	687b      	ldr	r3, [r7, #4]
 800937a:	689b      	ldr	r3, [r3, #8]
 800937c:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 8009380:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8009384:	687a      	ldr	r2, [r7, #4]
 8009386:	6093      	str	r3, [r2, #8]
}
 8009388:	bf00      	nop
 800938a:	370c      	adds	r7, #12
 800938c:	46bd      	mov	sp, r7
 800938e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009392:	4770      	bx	lr

08009394 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8009394:	b480      	push	{r7}
 8009396:	b083      	sub	sp, #12
 8009398:	af00      	add	r7, sp, #0
 800939a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 800939c:	687b      	ldr	r3, [r7, #4]
 800939e:	689b      	ldr	r3, [r3, #8]
 80093a0:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80093a4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80093a8:	d101      	bne.n	80093ae <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 80093aa:	2301      	movs	r3, #1
 80093ac:	e000      	b.n	80093b0 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 80093ae:	2300      	movs	r3, #0
}
 80093b0:	4618      	mov	r0, r3
 80093b2:	370c      	adds	r7, #12
 80093b4:	46bd      	mov	sp, r7
 80093b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093ba:	4770      	bx	lr

080093bc <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80093bc:	b480      	push	{r7}
 80093be:	b083      	sub	sp, #12
 80093c0:	af00      	add	r7, sp, #0
 80093c2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80093c4:	687b      	ldr	r3, [r7, #4]
 80093c6:	689b      	ldr	r3, [r3, #8]
 80093c8:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 80093cc:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80093d0:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 80093d4:	687b      	ldr	r3, [r7, #4]
 80093d6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80093d8:	bf00      	nop
 80093da:	370c      	adds	r7, #12
 80093dc:	46bd      	mov	sp, r7
 80093de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093e2:	4770      	bx	lr

080093e4 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 80093e4:	b480      	push	{r7}
 80093e6:	b083      	sub	sp, #12
 80093e8:	af00      	add	r7, sp, #0
 80093ea:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80093ec:	687b      	ldr	r3, [r7, #4]
 80093ee:	689b      	ldr	r3, [r3, #8]
 80093f0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80093f4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80093f8:	d101      	bne.n	80093fe <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80093fa:	2301      	movs	r3, #1
 80093fc:	e000      	b.n	8009400 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80093fe:	2300      	movs	r3, #0
}
 8009400:	4618      	mov	r0, r3
 8009402:	370c      	adds	r7, #12
 8009404:	46bd      	mov	sp, r7
 8009406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800940a:	4770      	bx	lr

0800940c <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 800940c:	b480      	push	{r7}
 800940e:	b083      	sub	sp, #12
 8009410:	af00      	add	r7, sp, #0
 8009412:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8009414:	687b      	ldr	r3, [r7, #4]
 8009416:	689b      	ldr	r3, [r3, #8]
 8009418:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800941c:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8009420:	f043 0201 	orr.w	r2, r3, #1
 8009424:	687b      	ldr	r3, [r7, #4]
 8009426:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8009428:	bf00      	nop
 800942a:	370c      	adds	r7, #12
 800942c:	46bd      	mov	sp, r7
 800942e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009432:	4770      	bx	lr

08009434 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8009434:	b480      	push	{r7}
 8009436:	b083      	sub	sp, #12
 8009438:	af00      	add	r7, sp, #0
 800943a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800943c:	687b      	ldr	r3, [r7, #4]
 800943e:	689b      	ldr	r3, [r3, #8]
 8009440:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8009444:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8009448:	f043 0202 	orr.w	r2, r3, #2
 800944c:	687b      	ldr	r3, [r7, #4]
 800944e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8009450:	bf00      	nop
 8009452:	370c      	adds	r7, #12
 8009454:	46bd      	mov	sp, r7
 8009456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800945a:	4770      	bx	lr

0800945c <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 800945c:	b480      	push	{r7}
 800945e:	b083      	sub	sp, #12
 8009460:	af00      	add	r7, sp, #0
 8009462:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8009464:	687b      	ldr	r3, [r7, #4]
 8009466:	689b      	ldr	r3, [r3, #8]
 8009468:	f003 0301 	and.w	r3, r3, #1
 800946c:	2b01      	cmp	r3, #1
 800946e:	d101      	bne.n	8009474 <LL_ADC_IsEnabled+0x18>
 8009470:	2301      	movs	r3, #1
 8009472:	e000      	b.n	8009476 <LL_ADC_IsEnabled+0x1a>
 8009474:	2300      	movs	r3, #0
}
 8009476:	4618      	mov	r0, r3
 8009478:	370c      	adds	r7, #12
 800947a:	46bd      	mov	sp, r7
 800947c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009480:	4770      	bx	lr

08009482 <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(const ADC_TypeDef *ADCx)
{
 8009482:	b480      	push	{r7}
 8009484:	b083      	sub	sp, #12
 8009486:	af00      	add	r7, sp, #0
 8009488:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 800948a:	687b      	ldr	r3, [r7, #4]
 800948c:	689b      	ldr	r3, [r3, #8]
 800948e:	f003 0302 	and.w	r3, r3, #2
 8009492:	2b02      	cmp	r3, #2
 8009494:	d101      	bne.n	800949a <LL_ADC_IsDisableOngoing+0x18>
 8009496:	2301      	movs	r3, #1
 8009498:	e000      	b.n	800949c <LL_ADC_IsDisableOngoing+0x1a>
 800949a:	2300      	movs	r3, #0
}
 800949c:	4618      	mov	r0, r3
 800949e:	370c      	adds	r7, #12
 80094a0:	46bd      	mov	sp, r7
 80094a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094a6:	4770      	bx	lr

080094a8 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 80094a8:	b480      	push	{r7}
 80094aa:	b083      	sub	sp, #12
 80094ac:	af00      	add	r7, sp, #0
 80094ae:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80094b0:	687b      	ldr	r3, [r7, #4]
 80094b2:	689b      	ldr	r3, [r3, #8]
 80094b4:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80094b8:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80094bc:	f043 0204 	orr.w	r2, r3, #4
 80094c0:	687b      	ldr	r3, [r7, #4]
 80094c2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 80094c4:	bf00      	nop
 80094c6:	370c      	adds	r7, #12
 80094c8:	46bd      	mov	sp, r7
 80094ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094ce:	4770      	bx	lr

080094d0 <LL_ADC_REG_StopConversion>:
  * @rmtoll CR       ADSTP          LL_ADC_REG_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StopConversion(ADC_TypeDef *ADCx)
{
 80094d0:	b480      	push	{r7}
 80094d2:	b083      	sub	sp, #12
 80094d4:	af00      	add	r7, sp, #0
 80094d6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80094d8:	687b      	ldr	r3, [r7, #4]
 80094da:	689b      	ldr	r3, [r3, #8]
 80094dc:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80094e0:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80094e4:	f043 0210 	orr.w	r2, r3, #16
 80094e8:	687b      	ldr	r3, [r7, #4]
 80094ea:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTP);
}
 80094ec:	bf00      	nop
 80094ee:	370c      	adds	r7, #12
 80094f0:	46bd      	mov	sp, r7
 80094f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094f6:	4770      	bx	lr

080094f8 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 80094f8:	b480      	push	{r7}
 80094fa:	b083      	sub	sp, #12
 80094fc:	af00      	add	r7, sp, #0
 80094fe:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8009500:	687b      	ldr	r3, [r7, #4]
 8009502:	689b      	ldr	r3, [r3, #8]
 8009504:	f003 0304 	and.w	r3, r3, #4
 8009508:	2b04      	cmp	r3, #4
 800950a:	d101      	bne.n	8009510 <LL_ADC_REG_IsConversionOngoing+0x18>
 800950c:	2301      	movs	r3, #1
 800950e:	e000      	b.n	8009512 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8009510:	2300      	movs	r3, #0
}
 8009512:	4618      	mov	r0, r3
 8009514:	370c      	adds	r7, #12
 8009516:	46bd      	mov	sp, r7
 8009518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800951c:	4770      	bx	lr

0800951e <LL_ADC_INJ_StopConversion>:
  * @rmtoll CR       JADSTP         LL_ADC_INJ_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_INJ_StopConversion(ADC_TypeDef *ADCx)
{
 800951e:	b480      	push	{r7}
 8009520:	b083      	sub	sp, #12
 8009522:	af00      	add	r7, sp, #0
 8009524:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8009526:	687b      	ldr	r3, [r7, #4]
 8009528:	689b      	ldr	r3, [r3, #8]
 800952a:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800952e:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8009532:	f043 0220 	orr.w	r2, r3, #32
 8009536:	687b      	ldr	r3, [r7, #4]
 8009538:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_JADSTP);
}
 800953a:	bf00      	nop
 800953c:	370c      	adds	r7, #12
 800953e:	46bd      	mov	sp, r7
 8009540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009544:	4770      	bx	lr

08009546 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8009546:	b480      	push	{r7}
 8009548:	b083      	sub	sp, #12
 800954a:	af00      	add	r7, sp, #0
 800954c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 800954e:	687b      	ldr	r3, [r7, #4]
 8009550:	689b      	ldr	r3, [r3, #8]
 8009552:	f003 0308 	and.w	r3, r3, #8
 8009556:	2b08      	cmp	r3, #8
 8009558:	d101      	bne.n	800955e <LL_ADC_INJ_IsConversionOngoing+0x18>
 800955a:	2301      	movs	r3, #1
 800955c:	e000      	b.n	8009560 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 800955e:	2300      	movs	r3, #0
}
 8009560:	4618      	mov	r0, r3
 8009562:	370c      	adds	r7, #12
 8009564:	46bd      	mov	sp, r7
 8009566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800956a:	4770      	bx	lr

0800956c <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 800956c:	b590      	push	{r4, r7, lr}
 800956e:	b089      	sub	sp, #36	@ 0x24
 8009570:	af00      	add	r7, sp, #0
 8009572:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8009574:	2300      	movs	r3, #0
 8009576:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8009578:	2300      	movs	r3, #0
 800957a:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 800957c:	687b      	ldr	r3, [r7, #4]
 800957e:	2b00      	cmp	r3, #0
 8009580:	d101      	bne.n	8009586 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8009582:	2301      	movs	r3, #1
 8009584:	e130      	b.n	80097e8 <HAL_ADC_Init+0x27c>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8009586:	687b      	ldr	r3, [r7, #4]
 8009588:	691b      	ldr	r3, [r3, #16]
 800958a:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800958c:	687b      	ldr	r3, [r7, #4]
 800958e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009590:	2b00      	cmp	r3, #0
 8009592:	d109      	bne.n	80095a8 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8009594:	6878      	ldr	r0, [r7, #4]
 8009596:	f7fb ffb9 	bl	800550c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800959a:	687b      	ldr	r3, [r7, #4]
 800959c:	2200      	movs	r2, #0
 800959e:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80095a0:	687b      	ldr	r3, [r7, #4]
 80095a2:	2200      	movs	r2, #0
 80095a4:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80095a8:	687b      	ldr	r3, [r7, #4]
 80095aa:	681b      	ldr	r3, [r3, #0]
 80095ac:	4618      	mov	r0, r3
 80095ae:	f7ff fef1 	bl	8009394 <LL_ADC_IsDeepPowerDownEnabled>
 80095b2:	4603      	mov	r3, r0
 80095b4:	2b00      	cmp	r3, #0
 80095b6:	d004      	beq.n	80095c2 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 80095b8:	687b      	ldr	r3, [r7, #4]
 80095ba:	681b      	ldr	r3, [r3, #0]
 80095bc:	4618      	mov	r0, r3
 80095be:	f7ff fed7 	bl	8009370 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80095c2:	687b      	ldr	r3, [r7, #4]
 80095c4:	681b      	ldr	r3, [r3, #0]
 80095c6:	4618      	mov	r0, r3
 80095c8:	f7ff ff0c 	bl	80093e4 <LL_ADC_IsInternalRegulatorEnabled>
 80095cc:	4603      	mov	r3, r0
 80095ce:	2b00      	cmp	r3, #0
 80095d0:	d115      	bne.n	80095fe <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80095d2:	687b      	ldr	r3, [r7, #4]
 80095d4:	681b      	ldr	r3, [r3, #0]
 80095d6:	4618      	mov	r0, r3
 80095d8:	f7ff fef0 	bl	80093bc <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80095dc:	4b84      	ldr	r3, [pc, #528]	@ (80097f0 <HAL_ADC_Init+0x284>)
 80095de:	681b      	ldr	r3, [r3, #0]
 80095e0:	099b      	lsrs	r3, r3, #6
 80095e2:	4a84      	ldr	r2, [pc, #528]	@ (80097f4 <HAL_ADC_Init+0x288>)
 80095e4:	fba2 2303 	umull	r2, r3, r2, r3
 80095e8:	099b      	lsrs	r3, r3, #6
 80095ea:	3301      	adds	r3, #1
 80095ec:	005b      	lsls	r3, r3, #1
 80095ee:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 80095f0:	e002      	b.n	80095f8 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 80095f2:	68fb      	ldr	r3, [r7, #12]
 80095f4:	3b01      	subs	r3, #1
 80095f6:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 80095f8:	68fb      	ldr	r3, [r7, #12]
 80095fa:	2b00      	cmp	r3, #0
 80095fc:	d1f9      	bne.n	80095f2 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80095fe:	687b      	ldr	r3, [r7, #4]
 8009600:	681b      	ldr	r3, [r3, #0]
 8009602:	4618      	mov	r0, r3
 8009604:	f7ff feee 	bl	80093e4 <LL_ADC_IsInternalRegulatorEnabled>
 8009608:	4603      	mov	r3, r0
 800960a:	2b00      	cmp	r3, #0
 800960c:	d10d      	bne.n	800962a <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800960e:	687b      	ldr	r3, [r7, #4]
 8009610:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009612:	f043 0210 	orr.w	r2, r3, #16
 8009616:	687b      	ldr	r3, [r7, #4]
 8009618:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800961a:	687b      	ldr	r3, [r7, #4]
 800961c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800961e:	f043 0201 	orr.w	r2, r3, #1
 8009622:	687b      	ldr	r3, [r7, #4]
 8009624:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 8009626:	2301      	movs	r3, #1
 8009628:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800962a:	687b      	ldr	r3, [r7, #4]
 800962c:	681b      	ldr	r3, [r3, #0]
 800962e:	4618      	mov	r0, r3
 8009630:	f7ff ff62 	bl	80094f8 <LL_ADC_REG_IsConversionOngoing>
 8009634:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8009636:	687b      	ldr	r3, [r7, #4]
 8009638:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800963a:	f003 0310 	and.w	r3, r3, #16
 800963e:	2b00      	cmp	r3, #0
 8009640:	f040 80c9 	bne.w	80097d6 <HAL_ADC_Init+0x26a>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 8009644:	697b      	ldr	r3, [r7, #20]
 8009646:	2b00      	cmp	r3, #0
 8009648:	f040 80c5 	bne.w	80097d6 <HAL_ADC_Init+0x26a>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800964c:	687b      	ldr	r3, [r7, #4]
 800964e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009650:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8009654:	f043 0202 	orr.w	r2, r3, #2
 8009658:	687b      	ldr	r3, [r7, #4]
 800965a:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800965c:	687b      	ldr	r3, [r7, #4]
 800965e:	681b      	ldr	r3, [r3, #0]
 8009660:	4618      	mov	r0, r3
 8009662:	f7ff fefb 	bl	800945c <LL_ADC_IsEnabled>
 8009666:	4603      	mov	r3, r0
 8009668:	2b00      	cmp	r3, #0
 800966a:	d115      	bne.n	8009698 <HAL_ADC_Init+0x12c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800966c:	4862      	ldr	r0, [pc, #392]	@ (80097f8 <HAL_ADC_Init+0x28c>)
 800966e:	f7ff fef5 	bl	800945c <LL_ADC_IsEnabled>
 8009672:	4604      	mov	r4, r0
 8009674:	4861      	ldr	r0, [pc, #388]	@ (80097fc <HAL_ADC_Init+0x290>)
 8009676:	f7ff fef1 	bl	800945c <LL_ADC_IsEnabled>
 800967a:	4603      	mov	r3, r0
 800967c:	431c      	orrs	r4, r3
 800967e:	4860      	ldr	r0, [pc, #384]	@ (8009800 <HAL_ADC_Init+0x294>)
 8009680:	f7ff feec 	bl	800945c <LL_ADC_IsEnabled>
 8009684:	4603      	mov	r3, r0
 8009686:	4323      	orrs	r3, r4
 8009688:	2b00      	cmp	r3, #0
 800968a:	d105      	bne.n	8009698 <HAL_ADC_Init+0x12c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 800968c:	687b      	ldr	r3, [r7, #4]
 800968e:	685b      	ldr	r3, [r3, #4]
 8009690:	4619      	mov	r1, r3
 8009692:	485c      	ldr	r0, [pc, #368]	@ (8009804 <HAL_ADC_Init+0x298>)
 8009694:	f7ff fd46 	bl	8009124 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8009698:	687b      	ldr	r3, [r7, #4]
 800969a:	7e5b      	ldrb	r3, [r3, #25]
 800969c:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 800969e:	687b      	ldr	r3, [r7, #4]
 80096a0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80096a2:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 80096a4:	687b      	ldr	r3, [r7, #4]
 80096a6:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 80096a8:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 80096aa:	687b      	ldr	r3, [r7, #4]
 80096ac:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 80096ae:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80096b0:	687b      	ldr	r3, [r7, #4]
 80096b2:	f893 3020 	ldrb.w	r3, [r3, #32]
 80096b6:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80096b8:	4313      	orrs	r3, r2
 80096ba:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80096bc:	687b      	ldr	r3, [r7, #4]
 80096be:	f893 3020 	ldrb.w	r3, [r3, #32]
 80096c2:	2b01      	cmp	r3, #1
 80096c4:	d106      	bne.n	80096d4 <HAL_ADC_Init+0x168>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80096c6:	687b      	ldr	r3, [r7, #4]
 80096c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80096ca:	3b01      	subs	r3, #1
 80096cc:	045b      	lsls	r3, r3, #17
 80096ce:	69ba      	ldr	r2, [r7, #24]
 80096d0:	4313      	orrs	r3, r2
 80096d2:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80096d4:	687b      	ldr	r3, [r7, #4]
 80096d6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80096d8:	2b00      	cmp	r3, #0
 80096da:	d009      	beq.n	80096f0 <HAL_ADC_Init+0x184>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80096dc:	687b      	ldr	r3, [r7, #4]
 80096de:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80096e0:	f403 7270 	and.w	r2, r3, #960	@ 0x3c0
                   | hadc->Init.ExternalTrigConvEdge
 80096e4:	687b      	ldr	r3, [r7, #4]
 80096e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80096e8:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80096ea:	69ba      	ldr	r2, [r7, #24]
 80096ec:	4313      	orrs	r3, r2
 80096ee:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 80096f0:	687b      	ldr	r3, [r7, #4]
 80096f2:	681b      	ldr	r3, [r3, #0]
 80096f4:	68da      	ldr	r2, [r3, #12]
 80096f6:	4b44      	ldr	r3, [pc, #272]	@ (8009808 <HAL_ADC_Init+0x29c>)
 80096f8:	4013      	ands	r3, r2
 80096fa:	687a      	ldr	r2, [r7, #4]
 80096fc:	6812      	ldr	r2, [r2, #0]
 80096fe:	69b9      	ldr	r1, [r7, #24]
 8009700:	430b      	orrs	r3, r1
 8009702:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8009704:	687b      	ldr	r3, [r7, #4]
 8009706:	681b      	ldr	r3, [r3, #0]
 8009708:	4618      	mov	r0, r3
 800970a:	f7ff ff1c 	bl	8009546 <LL_ADC_INJ_IsConversionOngoing>
 800970e:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8009710:	697b      	ldr	r3, [r7, #20]
 8009712:	2b00      	cmp	r3, #0
 8009714:	d13d      	bne.n	8009792 <HAL_ADC_Init+0x226>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8009716:	693b      	ldr	r3, [r7, #16]
 8009718:	2b00      	cmp	r3, #0
 800971a:	d13a      	bne.n	8009792 <HAL_ADC_Init+0x226>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800971c:	687b      	ldr	r3, [r7, #4]
 800971e:	7e1b      	ldrb	r3, [r3, #24]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8009720:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8009722:	687b      	ldr	r3, [r7, #4]
 8009724:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8009728:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 800972a:	4313      	orrs	r3, r2
 800972c:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 800972e:	687b      	ldr	r3, [r7, #4]
 8009730:	681b      	ldr	r3, [r3, #0]
 8009732:	68db      	ldr	r3, [r3, #12]
 8009734:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8009738:	f023 0302 	bic.w	r3, r3, #2
 800973c:	687a      	ldr	r2, [r7, #4]
 800973e:	6812      	ldr	r2, [r2, #0]
 8009740:	69b9      	ldr	r1, [r7, #24]
 8009742:	430b      	orrs	r3, r1
 8009744:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8009746:	687b      	ldr	r3, [r7, #4]
 8009748:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800974c:	2b01      	cmp	r3, #1
 800974e:	d118      	bne.n	8009782 <HAL_ADC_Init+0x216>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8009750:	687b      	ldr	r3, [r7, #4]
 8009752:	681b      	ldr	r3, [r3, #0]
 8009754:	691b      	ldr	r3, [r3, #16]
 8009756:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 800975a:	f023 0304 	bic.w	r3, r3, #4
 800975e:	687a      	ldr	r2, [r7, #4]
 8009760:	6bd1      	ldr	r1, [r2, #60]	@ 0x3c
 8009762:	687a      	ldr	r2, [r7, #4]
 8009764:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8009766:	4311      	orrs	r1, r2
 8009768:	687a      	ldr	r2, [r7, #4]
 800976a:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 800976c:	4311      	orrs	r1, r2
 800976e:	687a      	ldr	r2, [r7, #4]
 8009770:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8009772:	430a      	orrs	r2, r1
 8009774:	431a      	orrs	r2, r3
 8009776:	687b      	ldr	r3, [r7, #4]
 8009778:	681b      	ldr	r3, [r3, #0]
 800977a:	f042 0201 	orr.w	r2, r2, #1
 800977e:	611a      	str	r2, [r3, #16]
 8009780:	e007      	b.n	8009792 <HAL_ADC_Init+0x226>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8009782:	687b      	ldr	r3, [r7, #4]
 8009784:	681b      	ldr	r3, [r3, #0]
 8009786:	691a      	ldr	r2, [r3, #16]
 8009788:	687b      	ldr	r3, [r7, #4]
 800978a:	681b      	ldr	r3, [r3, #0]
 800978c:	f022 0201 	bic.w	r2, r2, #1
 8009790:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8009792:	687b      	ldr	r3, [r7, #4]
 8009794:	691b      	ldr	r3, [r3, #16]
 8009796:	2b01      	cmp	r3, #1
 8009798:	d10c      	bne.n	80097b4 <HAL_ADC_Init+0x248>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 800979a:	687b      	ldr	r3, [r7, #4]
 800979c:	681b      	ldr	r3, [r3, #0]
 800979e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80097a0:	f023 010f 	bic.w	r1, r3, #15
 80097a4:	687b      	ldr	r3, [r7, #4]
 80097a6:	69db      	ldr	r3, [r3, #28]
 80097a8:	1e5a      	subs	r2, r3, #1
 80097aa:	687b      	ldr	r3, [r7, #4]
 80097ac:	681b      	ldr	r3, [r3, #0]
 80097ae:	430a      	orrs	r2, r1
 80097b0:	631a      	str	r2, [r3, #48]	@ 0x30
 80097b2:	e007      	b.n	80097c4 <HAL_ADC_Init+0x258>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80097b4:	687b      	ldr	r3, [r7, #4]
 80097b6:	681b      	ldr	r3, [r3, #0]
 80097b8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80097ba:	687b      	ldr	r3, [r7, #4]
 80097bc:	681b      	ldr	r3, [r3, #0]
 80097be:	f022 020f 	bic.w	r2, r2, #15
 80097c2:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80097c4:	687b      	ldr	r3, [r7, #4]
 80097c6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80097c8:	f023 0303 	bic.w	r3, r3, #3
 80097cc:	f043 0201 	orr.w	r2, r3, #1
 80097d0:	687b      	ldr	r3, [r7, #4]
 80097d2:	655a      	str	r2, [r3, #84]	@ 0x54
 80097d4:	e007      	b.n	80097e6 <HAL_ADC_Init+0x27a>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80097d6:	687b      	ldr	r3, [r7, #4]
 80097d8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80097da:	f043 0210 	orr.w	r2, r3, #16
 80097de:	687b      	ldr	r3, [r7, #4]
 80097e0:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 80097e2:	2301      	movs	r3, #1
 80097e4:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 80097e6:	7ffb      	ldrb	r3, [r7, #31]
}
 80097e8:	4618      	mov	r0, r3
 80097ea:	3724      	adds	r7, #36	@ 0x24
 80097ec:	46bd      	mov	sp, r7
 80097ee:	bd90      	pop	{r4, r7, pc}
 80097f0:	20000000 	.word	0x20000000
 80097f4:	053e2d63 	.word	0x053e2d63
 80097f8:	50040000 	.word	0x50040000
 80097fc:	50040100 	.word	0x50040100
 8009800:	50040200 	.word	0x50040200
 8009804:	50040300 	.word	0x50040300
 8009808:	fff0c007 	.word	0xfff0c007

0800980c <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 800980c:	b580      	push	{r7, lr}
 800980e:	b086      	sub	sp, #24
 8009810:	af00      	add	r7, sp, #0
 8009812:	60f8      	str	r0, [r7, #12]
 8009814:	60b9      	str	r1, [r7, #8]
 8009816:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8009818:	4853      	ldr	r0, [pc, #332]	@ (8009968 <HAL_ADC_Start_DMA+0x15c>)
 800981a:	f7ff fd9b 	bl	8009354 <LL_ADC_GetMultimode>
 800981e:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8009820:	68fb      	ldr	r3, [r7, #12]
 8009822:	681b      	ldr	r3, [r3, #0]
 8009824:	4618      	mov	r0, r3
 8009826:	f7ff fe67 	bl	80094f8 <LL_ADC_REG_IsConversionOngoing>
 800982a:	4603      	mov	r3, r0
 800982c:	2b00      	cmp	r3, #0
 800982e:	f040 8093 	bne.w	8009958 <HAL_ADC_Start_DMA+0x14c>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8009832:	68fb      	ldr	r3, [r7, #12]
 8009834:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8009838:	2b01      	cmp	r3, #1
 800983a:	d101      	bne.n	8009840 <HAL_ADC_Start_DMA+0x34>
 800983c:	2302      	movs	r3, #2
 800983e:	e08e      	b.n	800995e <HAL_ADC_Start_DMA+0x152>
 8009840:	68fb      	ldr	r3, [r7, #12]
 8009842:	2201      	movs	r2, #1
 8009844:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

#if defined(ADC_MULTIMODE_SUPPORT)
    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((ADC_IS_INDEPENDENT(hadc) != RESET)
 8009848:	68fb      	ldr	r3, [r7, #12]
 800984a:	681b      	ldr	r3, [r3, #0]
 800984c:	4a47      	ldr	r2, [pc, #284]	@ (800996c <HAL_ADC_Start_DMA+0x160>)
 800984e:	4293      	cmp	r3, r2
 8009850:	d008      	beq.n	8009864 <HAL_ADC_Start_DMA+0x58>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8009852:	693b      	ldr	r3, [r7, #16]
 8009854:	2b00      	cmp	r3, #0
 8009856:	d005      	beq.n	8009864 <HAL_ADC_Start_DMA+0x58>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8009858:	693b      	ldr	r3, [r7, #16]
 800985a:	2b05      	cmp	r3, #5
 800985c:	d002      	beq.n	8009864 <HAL_ADC_Start_DMA+0x58>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 800985e:	693b      	ldr	r3, [r7, #16]
 8009860:	2b09      	cmp	r3, #9
 8009862:	d172      	bne.n	800994a <HAL_ADC_Start_DMA+0x13e>
       )
#endif /* ADC_MULTIMODE_SUPPORT */
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8009864:	68f8      	ldr	r0, [r7, #12]
 8009866:	f000 fda7 	bl	800a3b8 <ADC_Enable>
 800986a:	4603      	mov	r3, r0
 800986c:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 800986e:	7dfb      	ldrb	r3, [r7, #23]
 8009870:	2b00      	cmp	r3, #0
 8009872:	d165      	bne.n	8009940 <HAL_ADC_Start_DMA+0x134>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 8009874:	68fb      	ldr	r3, [r7, #12]
 8009876:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009878:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 800987c:	f023 0301 	bic.w	r3, r3, #1
 8009880:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8009884:	68fb      	ldr	r3, [r7, #12]
 8009886:	655a      	str	r2, [r3, #84]	@ 0x54

#if defined(ADC_MULTIMODE_SUPPORT)
        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8009888:	68fb      	ldr	r3, [r7, #12]
 800988a:	681b      	ldr	r3, [r3, #0]
 800988c:	4a38      	ldr	r2, [pc, #224]	@ (8009970 <HAL_ADC_Start_DMA+0x164>)
 800988e:	4293      	cmp	r3, r2
 8009890:	d002      	beq.n	8009898 <HAL_ADC_Start_DMA+0x8c>
 8009892:	68fb      	ldr	r3, [r7, #12]
 8009894:	681b      	ldr	r3, [r3, #0]
 8009896:	e000      	b.n	800989a <HAL_ADC_Start_DMA+0x8e>
 8009898:	4b36      	ldr	r3, [pc, #216]	@ (8009974 <HAL_ADC_Start_DMA+0x168>)
 800989a:	68fa      	ldr	r2, [r7, #12]
 800989c:	6812      	ldr	r2, [r2, #0]
 800989e:	4293      	cmp	r3, r2
 80098a0:	d002      	beq.n	80098a8 <HAL_ADC_Start_DMA+0x9c>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80098a2:	693b      	ldr	r3, [r7, #16]
 80098a4:	2b00      	cmp	r3, #0
 80098a6:	d105      	bne.n	80098b4 <HAL_ADC_Start_DMA+0xa8>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80098a8:	68fb      	ldr	r3, [r7, #12]
 80098aa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80098ac:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 80098b0:	68fb      	ldr	r3, [r7, #12]
 80098b2:	655a      	str	r2, [r3, #84]	@ 0x54
        }
#endif /* ADC_MULTIMODE_SUPPORT */

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 80098b4:	68fb      	ldr	r3, [r7, #12]
 80098b6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80098b8:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80098bc:	2b00      	cmp	r3, #0
 80098be:	d006      	beq.n	80098ce <HAL_ADC_Start_DMA+0xc2>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80098c0:	68fb      	ldr	r3, [r7, #12]
 80098c2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80098c4:	f023 0206 	bic.w	r2, r3, #6
 80098c8:	68fb      	ldr	r3, [r7, #12]
 80098ca:	659a      	str	r2, [r3, #88]	@ 0x58
 80098cc:	e002      	b.n	80098d4 <HAL_ADC_Start_DMA+0xc8>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 80098ce:	68fb      	ldr	r3, [r7, #12]
 80098d0:	2200      	movs	r2, #0
 80098d2:	659a      	str	r2, [r3, #88]	@ 0x58
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80098d4:	68fb      	ldr	r3, [r7, #12]
 80098d6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80098d8:	4a27      	ldr	r2, [pc, #156]	@ (8009978 <HAL_ADC_Start_DMA+0x16c>)
 80098da:	62da      	str	r2, [r3, #44]	@ 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80098dc:	68fb      	ldr	r3, [r7, #12]
 80098de:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80098e0:	4a26      	ldr	r2, [pc, #152]	@ (800997c <HAL_ADC_Start_DMA+0x170>)
 80098e2:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80098e4:	68fb      	ldr	r3, [r7, #12]
 80098e6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80098e8:	4a25      	ldr	r2, [pc, #148]	@ (8009980 <HAL_ADC_Start_DMA+0x174>)
 80098ea:	635a      	str	r2, [r3, #52]	@ 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80098ec:	68fb      	ldr	r3, [r7, #12]
 80098ee:	681b      	ldr	r3, [r3, #0]
 80098f0:	221c      	movs	r2, #28
 80098f2:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 80098f4:	68fb      	ldr	r3, [r7, #12]
 80098f6:	2200      	movs	r2, #0
 80098f8:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80098fc:	68fb      	ldr	r3, [r7, #12]
 80098fe:	681b      	ldr	r3, [r3, #0]
 8009900:	685a      	ldr	r2, [r3, #4]
 8009902:	68fb      	ldr	r3, [r7, #12]
 8009904:	681b      	ldr	r3, [r3, #0]
 8009906:	f042 0210 	orr.w	r2, r2, #16
 800990a:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 800990c:	68fb      	ldr	r3, [r7, #12]
 800990e:	681b      	ldr	r3, [r3, #0]
 8009910:	68da      	ldr	r2, [r3, #12]
 8009912:	68fb      	ldr	r3, [r7, #12]
 8009914:	681b      	ldr	r3, [r3, #0]
 8009916:	f042 0201 	orr.w	r2, r2, #1
 800991a:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 800991c:	68fb      	ldr	r3, [r7, #12]
 800991e:	6cd8      	ldr	r0, [r3, #76]	@ 0x4c
 8009920:	68fb      	ldr	r3, [r7, #12]
 8009922:	681b      	ldr	r3, [r3, #0]
 8009924:	3340      	adds	r3, #64	@ 0x40
 8009926:	4619      	mov	r1, r3
 8009928:	68ba      	ldr	r2, [r7, #8]
 800992a:	687b      	ldr	r3, [r7, #4]
 800992c:	f001 fa6a 	bl	800ae04 <HAL_DMA_Start_IT>
 8009930:	4603      	mov	r3, r0
 8009932:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8009934:	68fb      	ldr	r3, [r7, #12]
 8009936:	681b      	ldr	r3, [r3, #0]
 8009938:	4618      	mov	r0, r3
 800993a:	f7ff fdb5 	bl	80094a8 <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 800993e:	e00d      	b.n	800995c <HAL_ADC_Start_DMA+0x150>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8009940:	68fb      	ldr	r3, [r7, #12]
 8009942:	2200      	movs	r2, #0
 8009944:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
      if (tmp_hal_status == HAL_OK)
 8009948:	e008      	b.n	800995c <HAL_ADC_Start_DMA+0x150>

    }
#if defined(ADC_MULTIMODE_SUPPORT)
    else
    {
      tmp_hal_status = HAL_ERROR;
 800994a:	2301      	movs	r3, #1
 800994c:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 800994e:	68fb      	ldr	r3, [r7, #12]
 8009950:	2200      	movs	r2, #0
 8009952:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
 8009956:	e001      	b.n	800995c <HAL_ADC_Start_DMA+0x150>
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8009958:	2302      	movs	r3, #2
 800995a:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 800995c:	7dfb      	ldrb	r3, [r7, #23]
}
 800995e:	4618      	mov	r0, r3
 8009960:	3718      	adds	r7, #24
 8009962:	46bd      	mov	sp, r7
 8009964:	bd80      	pop	{r7, pc}
 8009966:	bf00      	nop
 8009968:	50040300 	.word	0x50040300
 800996c:	50040200 	.word	0x50040200
 8009970:	50040100 	.word	0x50040100
 8009974:	50040000 	.word	0x50040000
 8009978:	0800a583 	.word	0x0800a583
 800997c:	0800a65b 	.word	0x0800a65b
 8009980:	0800a677 	.word	0x0800a677

08009984 <HAL_ADC_Stop_DMA>:
  *         For multimode, the dedicated HAL_ADCEx_MultiModeStop_DMA() API must be used.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop_DMA(ADC_HandleTypeDef *hadc)
{
 8009984:	b580      	push	{r7, lr}
 8009986:	b084      	sub	sp, #16
 8009988:	af00      	add	r7, sp, #0
 800998a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 800998c:	687b      	ldr	r3, [r7, #4]
 800998e:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8009992:	2b01      	cmp	r3, #1
 8009994:	d101      	bne.n	800999a <HAL_ADC_Stop_DMA+0x16>
 8009996:	2302      	movs	r3, #2
 8009998:	e051      	b.n	8009a3e <HAL_ADC_Stop_DMA+0xba>
 800999a:	687b      	ldr	r3, [r7, #4]
 800999c:	2201      	movs	r2, #1
 800999e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* 1. Stop potential ADC group regular conversion on going */
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 80099a2:	2103      	movs	r1, #3
 80099a4:	6878      	ldr	r0, [r7, #4]
 80099a6:	f000 fc4b 	bl	800a240 <ADC_ConversionStop>
 80099aa:	4603      	mov	r3, r0
 80099ac:	73fb      	strb	r3, [r7, #15]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 80099ae:	7bfb      	ldrb	r3, [r7, #15]
 80099b0:	2b00      	cmp	r3, #0
 80099b2:	d13f      	bne.n	8009a34 <HAL_ADC_Stop_DMA+0xb0>
  {
    /* Disable ADC DMA (ADC DMA configuration of continuous requests is kept) */
    CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 80099b4:	687b      	ldr	r3, [r7, #4]
 80099b6:	681b      	ldr	r3, [r3, #0]
 80099b8:	68da      	ldr	r2, [r3, #12]
 80099ba:	687b      	ldr	r3, [r7, #4]
 80099bc:	681b      	ldr	r3, [r3, #0]
 80099be:	f022 0201 	bic.w	r2, r2, #1
 80099c2:	60da      	str	r2, [r3, #12]

    /* Disable the DMA channel (in case of DMA in circular mode or stop       */
    /* while DMA transfer is on going)                                        */
    if (hadc->DMA_Handle->State == HAL_DMA_STATE_BUSY)
 80099c4:	687b      	ldr	r3, [r7, #4]
 80099c6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80099c8:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80099cc:	b2db      	uxtb	r3, r3
 80099ce:	2b02      	cmp	r3, #2
 80099d0:	d10f      	bne.n	80099f2 <HAL_ADC_Stop_DMA+0x6e>
    {
      tmp_hal_status = HAL_DMA_Abort(hadc->DMA_Handle);
 80099d2:	687b      	ldr	r3, [r7, #4]
 80099d4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80099d6:	4618      	mov	r0, r3
 80099d8:	f001 fa74 	bl	800aec4 <HAL_DMA_Abort>
 80099dc:	4603      	mov	r3, r0
 80099de:	73fb      	strb	r3, [r7, #15]

      /* Check if DMA channel effectively disabled */
      if (tmp_hal_status != HAL_OK)
 80099e0:	7bfb      	ldrb	r3, [r7, #15]
 80099e2:	2b00      	cmp	r3, #0
 80099e4:	d005      	beq.n	80099f2 <HAL_ADC_Stop_DMA+0x6e>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 80099e6:	687b      	ldr	r3, [r7, #4]
 80099e8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80099ea:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80099ee:	687b      	ldr	r3, [r7, #4]
 80099f0:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }

    /* Disable ADC overrun interrupt */
    __HAL_ADC_DISABLE_IT(hadc, ADC_IT_OVR);
 80099f2:	687b      	ldr	r3, [r7, #4]
 80099f4:	681b      	ldr	r3, [r3, #0]
 80099f6:	685a      	ldr	r2, [r3, #4]
 80099f8:	687b      	ldr	r3, [r7, #4]
 80099fa:	681b      	ldr	r3, [r3, #0]
 80099fc:	f022 0210 	bic.w	r2, r2, #16
 8009a00:	605a      	str	r2, [r3, #4]

    /* 2. Disable the ADC peripheral */
    /* Update "tmp_hal_status" only if DMA channel disabling passed,          */
    /* to keep in memory a potential failing status.                          */
    if (tmp_hal_status == HAL_OK)
 8009a02:	7bfb      	ldrb	r3, [r7, #15]
 8009a04:	2b00      	cmp	r3, #0
 8009a06:	d105      	bne.n	8009a14 <HAL_ADC_Stop_DMA+0x90>
    {
      tmp_hal_status = ADC_Disable(hadc);
 8009a08:	6878      	ldr	r0, [r7, #4]
 8009a0a:	f000 fd5b 	bl	800a4c4 <ADC_Disable>
 8009a0e:	4603      	mov	r3, r0
 8009a10:	73fb      	strb	r3, [r7, #15]
 8009a12:	e002      	b.n	8009a1a <HAL_ADC_Stop_DMA+0x96>
    }
    else
    {
      (void)ADC_Disable(hadc);
 8009a14:	6878      	ldr	r0, [r7, #4]
 8009a16:	f000 fd55 	bl	800a4c4 <ADC_Disable>
    }

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 8009a1a:	7bfb      	ldrb	r3, [r7, #15]
 8009a1c:	2b00      	cmp	r3, #0
 8009a1e:	d109      	bne.n	8009a34 <HAL_ADC_Stop_DMA+0xb0>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8009a20:	687b      	ldr	r3, [r7, #4]
 8009a22:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009a24:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8009a28:	f023 0301 	bic.w	r3, r3, #1
 8009a2c:	f043 0201 	orr.w	r2, r3, #1
 8009a30:	687b      	ldr	r3, [r7, #4]
 8009a32:	655a      	str	r2, [r3, #84]	@ 0x54
    }

  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8009a34:	687b      	ldr	r3, [r7, #4]
 8009a36:	2200      	movs	r2, #0
 8009a38:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 8009a3c:	7bfb      	ldrb	r3, [r7, #15]
}
 8009a3e:	4618      	mov	r0, r3
 8009a40:	3710      	adds	r7, #16
 8009a42:	46bd      	mov	sp, r7
 8009a44:	bd80      	pop	{r7, pc}

08009a46 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8009a46:	b480      	push	{r7}
 8009a48:	b083      	sub	sp, #12
 8009a4a:	af00      	add	r7, sp, #0
 8009a4c:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8009a4e:	bf00      	nop
 8009a50:	370c      	adds	r7, #12
 8009a52:	46bd      	mov	sp, r7
 8009a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a58:	4770      	bx	lr
	...

08009a5c <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8009a5c:	b580      	push	{r7, lr}
 8009a5e:	b0b6      	sub	sp, #216	@ 0xd8
 8009a60:	af00      	add	r7, sp, #0
 8009a62:	6078      	str	r0, [r7, #4]
 8009a64:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8009a66:	2300      	movs	r3, #0
 8009a68:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8009a6c:	2300      	movs	r3, #0
 8009a6e:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8009a70:	687b      	ldr	r3, [r7, #4]
 8009a72:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8009a76:	2b01      	cmp	r3, #1
 8009a78:	d101      	bne.n	8009a7e <HAL_ADC_ConfigChannel+0x22>
 8009a7a:	2302      	movs	r3, #2
 8009a7c:	e3c9      	b.n	800a212 <HAL_ADC_ConfigChannel+0x7b6>
 8009a7e:	687b      	ldr	r3, [r7, #4]
 8009a80:	2201      	movs	r2, #1
 8009a82:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8009a86:	687b      	ldr	r3, [r7, #4]
 8009a88:	681b      	ldr	r3, [r3, #0]
 8009a8a:	4618      	mov	r0, r3
 8009a8c:	f7ff fd34 	bl	80094f8 <LL_ADC_REG_IsConversionOngoing>
 8009a90:	4603      	mov	r3, r0
 8009a92:	2b00      	cmp	r3, #0
 8009a94:	f040 83aa 	bne.w	800a1ec <HAL_ADC_ConfigChannel+0x790>
  {
#if !defined (USE_FULL_ASSERT)
    uint32_t config_rank = pConfig->Rank;
 8009a98:	683b      	ldr	r3, [r7, #0]
 8009a9a:	685b      	ldr	r3, [r3, #4]
 8009a9c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (pConfig->Rank <= 5U)
 8009aa0:	683b      	ldr	r3, [r7, #0]
 8009aa2:	685b      	ldr	r3, [r3, #4]
 8009aa4:	2b05      	cmp	r3, #5
 8009aa6:	d824      	bhi.n	8009af2 <HAL_ADC_ConfigChannel+0x96>
    {
      switch (pConfig->Rank)
 8009aa8:	683b      	ldr	r3, [r7, #0]
 8009aaa:	685b      	ldr	r3, [r3, #4]
 8009aac:	3b02      	subs	r3, #2
 8009aae:	2b03      	cmp	r3, #3
 8009ab0:	d81b      	bhi.n	8009aea <HAL_ADC_ConfigChannel+0x8e>
 8009ab2:	a201      	add	r2, pc, #4	@ (adr r2, 8009ab8 <HAL_ADC_ConfigChannel+0x5c>)
 8009ab4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009ab8:	08009ac9 	.word	0x08009ac9
 8009abc:	08009ad1 	.word	0x08009ad1
 8009ac0:	08009ad9 	.word	0x08009ad9
 8009ac4:	08009ae1 	.word	0x08009ae1
      {
        case 2U:
          config_rank = ADC_REGULAR_RANK_2;
 8009ac8:	230c      	movs	r3, #12
 8009aca:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8009ace:	e010      	b.n	8009af2 <HAL_ADC_ConfigChannel+0x96>
        case 3U:
          config_rank = ADC_REGULAR_RANK_3;
 8009ad0:	2312      	movs	r3, #18
 8009ad2:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8009ad6:	e00c      	b.n	8009af2 <HAL_ADC_ConfigChannel+0x96>
        case 4U:
          config_rank = ADC_REGULAR_RANK_4;
 8009ad8:	2318      	movs	r3, #24
 8009ada:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8009ade:	e008      	b.n	8009af2 <HAL_ADC_ConfigChannel+0x96>
        case 5U:
          config_rank = ADC_REGULAR_RANK_5;
 8009ae0:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8009ae4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8009ae8:	e003      	b.n	8009af2 <HAL_ADC_ConfigChannel+0x96>
        /* case 1U */
        default:
          config_rank = ADC_REGULAR_RANK_1;
 8009aea:	2306      	movs	r3, #6
 8009aec:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8009af0:	bf00      	nop
      }
    }
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, config_rank, pConfig->Channel);
 8009af2:	687b      	ldr	r3, [r7, #4]
 8009af4:	6818      	ldr	r0, [r3, #0]
 8009af6:	683b      	ldr	r3, [r7, #0]
 8009af8:	681b      	ldr	r3, [r3, #0]
 8009afa:	461a      	mov	r2, r3
 8009afc:	f8d7 10d0 	ldr.w	r1, [r7, #208]	@ 0xd0
 8009b00:	f7ff fbac 	bl	800925c <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8009b04:	687b      	ldr	r3, [r7, #4]
 8009b06:	681b      	ldr	r3, [r3, #0]
 8009b08:	4618      	mov	r0, r3
 8009b0a:	f7ff fcf5 	bl	80094f8 <LL_ADC_REG_IsConversionOngoing>
 8009b0e:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8009b12:	687b      	ldr	r3, [r7, #4]
 8009b14:	681b      	ldr	r3, [r3, #0]
 8009b16:	4618      	mov	r0, r3
 8009b18:	f7ff fd15 	bl	8009546 <LL_ADC_INJ_IsConversionOngoing>
 8009b1c:	f8c7 00c8 	str.w	r0, [r7, #200]	@ 0xc8
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8009b20:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8009b24:	2b00      	cmp	r3, #0
 8009b26:	f040 81a4 	bne.w	8009e72 <HAL_ADC_ConfigChannel+0x416>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8009b2a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8009b2e:	2b00      	cmp	r3, #0
 8009b30:	f040 819f 	bne.w	8009e72 <HAL_ADC_ConfigChannel+0x416>
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8009b34:	687b      	ldr	r3, [r7, #4]
 8009b36:	6818      	ldr	r0, [r3, #0]
 8009b38:	683b      	ldr	r3, [r7, #0]
 8009b3a:	6819      	ldr	r1, [r3, #0]
 8009b3c:	683b      	ldr	r3, [r7, #0]
 8009b3e:	689b      	ldr	r3, [r3, #8]
 8009b40:	461a      	mov	r2, r3
 8009b42:	f7ff fbb7 	bl	80092b4 <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8009b46:	683b      	ldr	r3, [r7, #0]
 8009b48:	695a      	ldr	r2, [r3, #20]
 8009b4a:	687b      	ldr	r3, [r7, #4]
 8009b4c:	681b      	ldr	r3, [r3, #0]
 8009b4e:	68db      	ldr	r3, [r3, #12]
 8009b50:	08db      	lsrs	r3, r3, #3
 8009b52:	f003 0303 	and.w	r3, r3, #3
 8009b56:	005b      	lsls	r3, r3, #1
 8009b58:	fa02 f303 	lsl.w	r3, r2, r3
 8009b5c:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8009b60:	683b      	ldr	r3, [r7, #0]
 8009b62:	691b      	ldr	r3, [r3, #16]
 8009b64:	2b04      	cmp	r3, #4
 8009b66:	d00a      	beq.n	8009b7e <HAL_ADC_ConfigChannel+0x122>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 8009b68:	687b      	ldr	r3, [r7, #4]
 8009b6a:	6818      	ldr	r0, [r3, #0]
 8009b6c:	683b      	ldr	r3, [r7, #0]
 8009b6e:	6919      	ldr	r1, [r3, #16]
 8009b70:	683b      	ldr	r3, [r7, #0]
 8009b72:	681a      	ldr	r2, [r3, #0]
 8009b74:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8009b78:	f7ff fb08 	bl	800918c <LL_ADC_SetOffset>
 8009b7c:	e179      	b.n	8009e72 <HAL_ADC_ConfigChannel+0x416>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8009b7e:	687b      	ldr	r3, [r7, #4]
 8009b80:	681b      	ldr	r3, [r3, #0]
 8009b82:	2100      	movs	r1, #0
 8009b84:	4618      	mov	r0, r3
 8009b86:	f7ff fb25 	bl	80091d4 <LL_ADC_GetOffsetChannel>
 8009b8a:	4603      	mov	r3, r0
 8009b8c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009b90:	2b00      	cmp	r3, #0
 8009b92:	d10a      	bne.n	8009baa <HAL_ADC_ConfigChannel+0x14e>
 8009b94:	687b      	ldr	r3, [r7, #4]
 8009b96:	681b      	ldr	r3, [r3, #0]
 8009b98:	2100      	movs	r1, #0
 8009b9a:	4618      	mov	r0, r3
 8009b9c:	f7ff fb1a 	bl	80091d4 <LL_ADC_GetOffsetChannel>
 8009ba0:	4603      	mov	r3, r0
 8009ba2:	0e9b      	lsrs	r3, r3, #26
 8009ba4:	f003 021f 	and.w	r2, r3, #31
 8009ba8:	e01e      	b.n	8009be8 <HAL_ADC_ConfigChannel+0x18c>
 8009baa:	687b      	ldr	r3, [r7, #4]
 8009bac:	681b      	ldr	r3, [r3, #0]
 8009bae:	2100      	movs	r1, #0
 8009bb0:	4618      	mov	r0, r3
 8009bb2:	f7ff fb0f 	bl	80091d4 <LL_ADC_GetOffsetChannel>
 8009bb6:	4603      	mov	r3, r0
 8009bb8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009bbc:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8009bc0:	fa93 f3a3 	rbit	r3, r3
 8009bc4:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8009bc8:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8009bcc:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8009bd0:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8009bd4:	2b00      	cmp	r3, #0
 8009bd6:	d101      	bne.n	8009bdc <HAL_ADC_ConfigChannel+0x180>
  {
    return 32U;
 8009bd8:	2320      	movs	r3, #32
 8009bda:	e004      	b.n	8009be6 <HAL_ADC_ConfigChannel+0x18a>
  }
  return __builtin_clz(value);
 8009bdc:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8009be0:	fab3 f383 	clz	r3, r3
 8009be4:	b2db      	uxtb	r3, r3
 8009be6:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8009be8:	683b      	ldr	r3, [r7, #0]
 8009bea:	681b      	ldr	r3, [r3, #0]
 8009bec:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009bf0:	2b00      	cmp	r3, #0
 8009bf2:	d105      	bne.n	8009c00 <HAL_ADC_ConfigChannel+0x1a4>
 8009bf4:	683b      	ldr	r3, [r7, #0]
 8009bf6:	681b      	ldr	r3, [r3, #0]
 8009bf8:	0e9b      	lsrs	r3, r3, #26
 8009bfa:	f003 031f 	and.w	r3, r3, #31
 8009bfe:	e018      	b.n	8009c32 <HAL_ADC_ConfigChannel+0x1d6>
 8009c00:	683b      	ldr	r3, [r7, #0]
 8009c02:	681b      	ldr	r3, [r3, #0]
 8009c04:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009c08:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8009c0c:	fa93 f3a3 	rbit	r3, r3
 8009c10:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  return result;
 8009c14:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8009c18:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
  if (value == 0U)
 8009c1c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8009c20:	2b00      	cmp	r3, #0
 8009c22:	d101      	bne.n	8009c28 <HAL_ADC_ConfigChannel+0x1cc>
    return 32U;
 8009c24:	2320      	movs	r3, #32
 8009c26:	e004      	b.n	8009c32 <HAL_ADC_ConfigChannel+0x1d6>
  return __builtin_clz(value);
 8009c28:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8009c2c:	fab3 f383 	clz	r3, r3
 8009c30:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8009c32:	429a      	cmp	r2, r3
 8009c34:	d106      	bne.n	8009c44 <HAL_ADC_ConfigChannel+0x1e8>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8009c36:	687b      	ldr	r3, [r7, #4]
 8009c38:	681b      	ldr	r3, [r3, #0]
 8009c3a:	2200      	movs	r2, #0
 8009c3c:	2100      	movs	r1, #0
 8009c3e:	4618      	mov	r0, r3
 8009c40:	f7ff fade 	bl	8009200 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8009c44:	687b      	ldr	r3, [r7, #4]
 8009c46:	681b      	ldr	r3, [r3, #0]
 8009c48:	2101      	movs	r1, #1
 8009c4a:	4618      	mov	r0, r3
 8009c4c:	f7ff fac2 	bl	80091d4 <LL_ADC_GetOffsetChannel>
 8009c50:	4603      	mov	r3, r0
 8009c52:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009c56:	2b00      	cmp	r3, #0
 8009c58:	d10a      	bne.n	8009c70 <HAL_ADC_ConfigChannel+0x214>
 8009c5a:	687b      	ldr	r3, [r7, #4]
 8009c5c:	681b      	ldr	r3, [r3, #0]
 8009c5e:	2101      	movs	r1, #1
 8009c60:	4618      	mov	r0, r3
 8009c62:	f7ff fab7 	bl	80091d4 <LL_ADC_GetOffsetChannel>
 8009c66:	4603      	mov	r3, r0
 8009c68:	0e9b      	lsrs	r3, r3, #26
 8009c6a:	f003 021f 	and.w	r2, r3, #31
 8009c6e:	e01e      	b.n	8009cae <HAL_ADC_ConfigChannel+0x252>
 8009c70:	687b      	ldr	r3, [r7, #4]
 8009c72:	681b      	ldr	r3, [r3, #0]
 8009c74:	2101      	movs	r1, #1
 8009c76:	4618      	mov	r0, r3
 8009c78:	f7ff faac 	bl	80091d4 <LL_ADC_GetOffsetChannel>
 8009c7c:	4603      	mov	r3, r0
 8009c7e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009c82:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8009c86:	fa93 f3a3 	rbit	r3, r3
 8009c8a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  return result;
 8009c8e:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8009c92:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  if (value == 0U)
 8009c96:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8009c9a:	2b00      	cmp	r3, #0
 8009c9c:	d101      	bne.n	8009ca2 <HAL_ADC_ConfigChannel+0x246>
    return 32U;
 8009c9e:	2320      	movs	r3, #32
 8009ca0:	e004      	b.n	8009cac <HAL_ADC_ConfigChannel+0x250>
  return __builtin_clz(value);
 8009ca2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8009ca6:	fab3 f383 	clz	r3, r3
 8009caa:	b2db      	uxtb	r3, r3
 8009cac:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8009cae:	683b      	ldr	r3, [r7, #0]
 8009cb0:	681b      	ldr	r3, [r3, #0]
 8009cb2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009cb6:	2b00      	cmp	r3, #0
 8009cb8:	d105      	bne.n	8009cc6 <HAL_ADC_ConfigChannel+0x26a>
 8009cba:	683b      	ldr	r3, [r7, #0]
 8009cbc:	681b      	ldr	r3, [r3, #0]
 8009cbe:	0e9b      	lsrs	r3, r3, #26
 8009cc0:	f003 031f 	and.w	r3, r3, #31
 8009cc4:	e018      	b.n	8009cf8 <HAL_ADC_ConfigChannel+0x29c>
 8009cc6:	683b      	ldr	r3, [r7, #0]
 8009cc8:	681b      	ldr	r3, [r3, #0]
 8009cca:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009cce:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8009cd2:	fa93 f3a3 	rbit	r3, r3
 8009cd6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  return result;
 8009cda:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8009cde:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
  if (value == 0U)
 8009ce2:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8009ce6:	2b00      	cmp	r3, #0
 8009ce8:	d101      	bne.n	8009cee <HAL_ADC_ConfigChannel+0x292>
    return 32U;
 8009cea:	2320      	movs	r3, #32
 8009cec:	e004      	b.n	8009cf8 <HAL_ADC_ConfigChannel+0x29c>
  return __builtin_clz(value);
 8009cee:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8009cf2:	fab3 f383 	clz	r3, r3
 8009cf6:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8009cf8:	429a      	cmp	r2, r3
 8009cfa:	d106      	bne.n	8009d0a <HAL_ADC_ConfigChannel+0x2ae>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8009cfc:	687b      	ldr	r3, [r7, #4]
 8009cfe:	681b      	ldr	r3, [r3, #0]
 8009d00:	2200      	movs	r2, #0
 8009d02:	2101      	movs	r1, #1
 8009d04:	4618      	mov	r0, r3
 8009d06:	f7ff fa7b 	bl	8009200 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8009d0a:	687b      	ldr	r3, [r7, #4]
 8009d0c:	681b      	ldr	r3, [r3, #0]
 8009d0e:	2102      	movs	r1, #2
 8009d10:	4618      	mov	r0, r3
 8009d12:	f7ff fa5f 	bl	80091d4 <LL_ADC_GetOffsetChannel>
 8009d16:	4603      	mov	r3, r0
 8009d18:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009d1c:	2b00      	cmp	r3, #0
 8009d1e:	d10a      	bne.n	8009d36 <HAL_ADC_ConfigChannel+0x2da>
 8009d20:	687b      	ldr	r3, [r7, #4]
 8009d22:	681b      	ldr	r3, [r3, #0]
 8009d24:	2102      	movs	r1, #2
 8009d26:	4618      	mov	r0, r3
 8009d28:	f7ff fa54 	bl	80091d4 <LL_ADC_GetOffsetChannel>
 8009d2c:	4603      	mov	r3, r0
 8009d2e:	0e9b      	lsrs	r3, r3, #26
 8009d30:	f003 021f 	and.w	r2, r3, #31
 8009d34:	e01e      	b.n	8009d74 <HAL_ADC_ConfigChannel+0x318>
 8009d36:	687b      	ldr	r3, [r7, #4]
 8009d38:	681b      	ldr	r3, [r3, #0]
 8009d3a:	2102      	movs	r1, #2
 8009d3c:	4618      	mov	r0, r3
 8009d3e:	f7ff fa49 	bl	80091d4 <LL_ADC_GetOffsetChannel>
 8009d42:	4603      	mov	r3, r0
 8009d44:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009d48:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8009d4c:	fa93 f3a3 	rbit	r3, r3
 8009d50:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  return result;
 8009d54:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8009d58:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  if (value == 0U)
 8009d5c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8009d60:	2b00      	cmp	r3, #0
 8009d62:	d101      	bne.n	8009d68 <HAL_ADC_ConfigChannel+0x30c>
    return 32U;
 8009d64:	2320      	movs	r3, #32
 8009d66:	e004      	b.n	8009d72 <HAL_ADC_ConfigChannel+0x316>
  return __builtin_clz(value);
 8009d68:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8009d6c:	fab3 f383 	clz	r3, r3
 8009d70:	b2db      	uxtb	r3, r3
 8009d72:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8009d74:	683b      	ldr	r3, [r7, #0]
 8009d76:	681b      	ldr	r3, [r3, #0]
 8009d78:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009d7c:	2b00      	cmp	r3, #0
 8009d7e:	d105      	bne.n	8009d8c <HAL_ADC_ConfigChannel+0x330>
 8009d80:	683b      	ldr	r3, [r7, #0]
 8009d82:	681b      	ldr	r3, [r3, #0]
 8009d84:	0e9b      	lsrs	r3, r3, #26
 8009d86:	f003 031f 	and.w	r3, r3, #31
 8009d8a:	e014      	b.n	8009db6 <HAL_ADC_ConfigChannel+0x35a>
 8009d8c:	683b      	ldr	r3, [r7, #0]
 8009d8e:	681b      	ldr	r3, [r3, #0]
 8009d90:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009d92:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8009d94:	fa93 f3a3 	rbit	r3, r3
 8009d98:	67bb      	str	r3, [r7, #120]	@ 0x78
  return result;
 8009d9a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8009d9c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  if (value == 0U)
 8009da0:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8009da4:	2b00      	cmp	r3, #0
 8009da6:	d101      	bne.n	8009dac <HAL_ADC_ConfigChannel+0x350>
    return 32U;
 8009da8:	2320      	movs	r3, #32
 8009daa:	e004      	b.n	8009db6 <HAL_ADC_ConfigChannel+0x35a>
  return __builtin_clz(value);
 8009dac:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8009db0:	fab3 f383 	clz	r3, r3
 8009db4:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8009db6:	429a      	cmp	r2, r3
 8009db8:	d106      	bne.n	8009dc8 <HAL_ADC_ConfigChannel+0x36c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8009dba:	687b      	ldr	r3, [r7, #4]
 8009dbc:	681b      	ldr	r3, [r3, #0]
 8009dbe:	2200      	movs	r2, #0
 8009dc0:	2102      	movs	r1, #2
 8009dc2:	4618      	mov	r0, r3
 8009dc4:	f7ff fa1c 	bl	8009200 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8009dc8:	687b      	ldr	r3, [r7, #4]
 8009dca:	681b      	ldr	r3, [r3, #0]
 8009dcc:	2103      	movs	r1, #3
 8009dce:	4618      	mov	r0, r3
 8009dd0:	f7ff fa00 	bl	80091d4 <LL_ADC_GetOffsetChannel>
 8009dd4:	4603      	mov	r3, r0
 8009dd6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009dda:	2b00      	cmp	r3, #0
 8009ddc:	d10a      	bne.n	8009df4 <HAL_ADC_ConfigChannel+0x398>
 8009dde:	687b      	ldr	r3, [r7, #4]
 8009de0:	681b      	ldr	r3, [r3, #0]
 8009de2:	2103      	movs	r1, #3
 8009de4:	4618      	mov	r0, r3
 8009de6:	f7ff f9f5 	bl	80091d4 <LL_ADC_GetOffsetChannel>
 8009dea:	4603      	mov	r3, r0
 8009dec:	0e9b      	lsrs	r3, r3, #26
 8009dee:	f003 021f 	and.w	r2, r3, #31
 8009df2:	e017      	b.n	8009e24 <HAL_ADC_ConfigChannel+0x3c8>
 8009df4:	687b      	ldr	r3, [r7, #4]
 8009df6:	681b      	ldr	r3, [r3, #0]
 8009df8:	2103      	movs	r1, #3
 8009dfa:	4618      	mov	r0, r3
 8009dfc:	f7ff f9ea 	bl	80091d4 <LL_ADC_GetOffsetChannel>
 8009e00:	4603      	mov	r3, r0
 8009e02:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009e04:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8009e06:	fa93 f3a3 	rbit	r3, r3
 8009e0a:	66fb      	str	r3, [r7, #108]	@ 0x6c
  return result;
 8009e0c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009e0e:	677b      	str	r3, [r7, #116]	@ 0x74
  if (value == 0U)
 8009e10:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8009e12:	2b00      	cmp	r3, #0
 8009e14:	d101      	bne.n	8009e1a <HAL_ADC_ConfigChannel+0x3be>
    return 32U;
 8009e16:	2320      	movs	r3, #32
 8009e18:	e003      	b.n	8009e22 <HAL_ADC_ConfigChannel+0x3c6>
  return __builtin_clz(value);
 8009e1a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8009e1c:	fab3 f383 	clz	r3, r3
 8009e20:	b2db      	uxtb	r3, r3
 8009e22:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8009e24:	683b      	ldr	r3, [r7, #0]
 8009e26:	681b      	ldr	r3, [r3, #0]
 8009e28:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009e2c:	2b00      	cmp	r3, #0
 8009e2e:	d105      	bne.n	8009e3c <HAL_ADC_ConfigChannel+0x3e0>
 8009e30:	683b      	ldr	r3, [r7, #0]
 8009e32:	681b      	ldr	r3, [r3, #0]
 8009e34:	0e9b      	lsrs	r3, r3, #26
 8009e36:	f003 031f 	and.w	r3, r3, #31
 8009e3a:	e011      	b.n	8009e60 <HAL_ADC_ConfigChannel+0x404>
 8009e3c:	683b      	ldr	r3, [r7, #0]
 8009e3e:	681b      	ldr	r3, [r3, #0]
 8009e40:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009e42:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8009e44:	fa93 f3a3 	rbit	r3, r3
 8009e48:	663b      	str	r3, [r7, #96]	@ 0x60
  return result;
 8009e4a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8009e4c:	66bb      	str	r3, [r7, #104]	@ 0x68
  if (value == 0U)
 8009e4e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8009e50:	2b00      	cmp	r3, #0
 8009e52:	d101      	bne.n	8009e58 <HAL_ADC_ConfigChannel+0x3fc>
    return 32U;
 8009e54:	2320      	movs	r3, #32
 8009e56:	e003      	b.n	8009e60 <HAL_ADC_ConfigChannel+0x404>
  return __builtin_clz(value);
 8009e58:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8009e5a:	fab3 f383 	clz	r3, r3
 8009e5e:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8009e60:	429a      	cmp	r2, r3
 8009e62:	d106      	bne.n	8009e72 <HAL_ADC_ConfigChannel+0x416>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8009e64:	687b      	ldr	r3, [r7, #4]
 8009e66:	681b      	ldr	r3, [r3, #0]
 8009e68:	2200      	movs	r2, #0
 8009e6a:	2103      	movs	r1, #3
 8009e6c:	4618      	mov	r0, r3
 8009e6e:	f7ff f9c7 	bl	8009200 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8009e72:	687b      	ldr	r3, [r7, #4]
 8009e74:	681b      	ldr	r3, [r3, #0]
 8009e76:	4618      	mov	r0, r3
 8009e78:	f7ff faf0 	bl	800945c <LL_ADC_IsEnabled>
 8009e7c:	4603      	mov	r3, r0
 8009e7e:	2b00      	cmp	r3, #0
 8009e80:	f040 8140 	bne.w	800a104 <HAL_ADC_ConfigChannel+0x6a8>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8009e84:	687b      	ldr	r3, [r7, #4]
 8009e86:	6818      	ldr	r0, [r3, #0]
 8009e88:	683b      	ldr	r3, [r7, #0]
 8009e8a:	6819      	ldr	r1, [r3, #0]
 8009e8c:	683b      	ldr	r3, [r7, #0]
 8009e8e:	68db      	ldr	r3, [r3, #12]
 8009e90:	461a      	mov	r2, r3
 8009e92:	f7ff fa3b 	bl	800930c <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8009e96:	683b      	ldr	r3, [r7, #0]
 8009e98:	68db      	ldr	r3, [r3, #12]
 8009e9a:	4a8f      	ldr	r2, [pc, #572]	@ (800a0d8 <HAL_ADC_ConfigChannel+0x67c>)
 8009e9c:	4293      	cmp	r3, r2
 8009e9e:	f040 8131 	bne.w	800a104 <HAL_ADC_ConfigChannel+0x6a8>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8009ea2:	687b      	ldr	r3, [r7, #4]
 8009ea4:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8009ea6:	683b      	ldr	r3, [r7, #0]
 8009ea8:	681b      	ldr	r3, [r3, #0]
 8009eaa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009eae:	2b00      	cmp	r3, #0
 8009eb0:	d10b      	bne.n	8009eca <HAL_ADC_ConfigChannel+0x46e>
 8009eb2:	683b      	ldr	r3, [r7, #0]
 8009eb4:	681b      	ldr	r3, [r3, #0]
 8009eb6:	0e9b      	lsrs	r3, r3, #26
 8009eb8:	3301      	adds	r3, #1
 8009eba:	f003 031f 	and.w	r3, r3, #31
 8009ebe:	2b09      	cmp	r3, #9
 8009ec0:	bf94      	ite	ls
 8009ec2:	2301      	movls	r3, #1
 8009ec4:	2300      	movhi	r3, #0
 8009ec6:	b2db      	uxtb	r3, r3
 8009ec8:	e019      	b.n	8009efe <HAL_ADC_ConfigChannel+0x4a2>
 8009eca:	683b      	ldr	r3, [r7, #0]
 8009ecc:	681b      	ldr	r3, [r3, #0]
 8009ece:	65bb      	str	r3, [r7, #88]	@ 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009ed0:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8009ed2:	fa93 f3a3 	rbit	r3, r3
 8009ed6:	657b      	str	r3, [r7, #84]	@ 0x54
  return result;
 8009ed8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009eda:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (value == 0U)
 8009edc:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8009ede:	2b00      	cmp	r3, #0
 8009ee0:	d101      	bne.n	8009ee6 <HAL_ADC_ConfigChannel+0x48a>
    return 32U;
 8009ee2:	2320      	movs	r3, #32
 8009ee4:	e003      	b.n	8009eee <HAL_ADC_ConfigChannel+0x492>
  return __builtin_clz(value);
 8009ee6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8009ee8:	fab3 f383 	clz	r3, r3
 8009eec:	b2db      	uxtb	r3, r3
 8009eee:	3301      	adds	r3, #1
 8009ef0:	f003 031f 	and.w	r3, r3, #31
 8009ef4:	2b09      	cmp	r3, #9
 8009ef6:	bf94      	ite	ls
 8009ef8:	2301      	movls	r3, #1
 8009efa:	2300      	movhi	r3, #0
 8009efc:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8009efe:	2b00      	cmp	r3, #0
 8009f00:	d079      	beq.n	8009ff6 <HAL_ADC_ConfigChannel+0x59a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8009f02:	683b      	ldr	r3, [r7, #0]
 8009f04:	681b      	ldr	r3, [r3, #0]
 8009f06:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009f0a:	2b00      	cmp	r3, #0
 8009f0c:	d107      	bne.n	8009f1e <HAL_ADC_ConfigChannel+0x4c2>
 8009f0e:	683b      	ldr	r3, [r7, #0]
 8009f10:	681b      	ldr	r3, [r3, #0]
 8009f12:	0e9b      	lsrs	r3, r3, #26
 8009f14:	3301      	adds	r3, #1
 8009f16:	069b      	lsls	r3, r3, #26
 8009f18:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8009f1c:	e015      	b.n	8009f4a <HAL_ADC_ConfigChannel+0x4ee>
 8009f1e:	683b      	ldr	r3, [r7, #0]
 8009f20:	681b      	ldr	r3, [r3, #0]
 8009f22:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009f24:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009f26:	fa93 f3a3 	rbit	r3, r3
 8009f2a:	64bb      	str	r3, [r7, #72]	@ 0x48
  return result;
 8009f2c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009f2e:	653b      	str	r3, [r7, #80]	@ 0x50
  if (value == 0U)
 8009f30:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009f32:	2b00      	cmp	r3, #0
 8009f34:	d101      	bne.n	8009f3a <HAL_ADC_ConfigChannel+0x4de>
    return 32U;
 8009f36:	2320      	movs	r3, #32
 8009f38:	e003      	b.n	8009f42 <HAL_ADC_ConfigChannel+0x4e6>
  return __builtin_clz(value);
 8009f3a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009f3c:	fab3 f383 	clz	r3, r3
 8009f40:	b2db      	uxtb	r3, r3
 8009f42:	3301      	adds	r3, #1
 8009f44:	069b      	lsls	r3, r3, #26
 8009f46:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8009f4a:	683b      	ldr	r3, [r7, #0]
 8009f4c:	681b      	ldr	r3, [r3, #0]
 8009f4e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009f52:	2b00      	cmp	r3, #0
 8009f54:	d109      	bne.n	8009f6a <HAL_ADC_ConfigChannel+0x50e>
 8009f56:	683b      	ldr	r3, [r7, #0]
 8009f58:	681b      	ldr	r3, [r3, #0]
 8009f5a:	0e9b      	lsrs	r3, r3, #26
 8009f5c:	3301      	adds	r3, #1
 8009f5e:	f003 031f 	and.w	r3, r3, #31
 8009f62:	2101      	movs	r1, #1
 8009f64:	fa01 f303 	lsl.w	r3, r1, r3
 8009f68:	e017      	b.n	8009f9a <HAL_ADC_ConfigChannel+0x53e>
 8009f6a:	683b      	ldr	r3, [r7, #0]
 8009f6c:	681b      	ldr	r3, [r3, #0]
 8009f6e:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009f70:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009f72:	fa93 f3a3 	rbit	r3, r3
 8009f76:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return result;
 8009f78:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009f7a:	647b      	str	r3, [r7, #68]	@ 0x44
  if (value == 0U)
 8009f7c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009f7e:	2b00      	cmp	r3, #0
 8009f80:	d101      	bne.n	8009f86 <HAL_ADC_ConfigChannel+0x52a>
    return 32U;
 8009f82:	2320      	movs	r3, #32
 8009f84:	e003      	b.n	8009f8e <HAL_ADC_ConfigChannel+0x532>
  return __builtin_clz(value);
 8009f86:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009f88:	fab3 f383 	clz	r3, r3
 8009f8c:	b2db      	uxtb	r3, r3
 8009f8e:	3301      	adds	r3, #1
 8009f90:	f003 031f 	and.w	r3, r3, #31
 8009f94:	2101      	movs	r1, #1
 8009f96:	fa01 f303 	lsl.w	r3, r1, r3
 8009f9a:	ea42 0103 	orr.w	r1, r2, r3
 8009f9e:	683b      	ldr	r3, [r7, #0]
 8009fa0:	681b      	ldr	r3, [r3, #0]
 8009fa2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009fa6:	2b00      	cmp	r3, #0
 8009fa8:	d10a      	bne.n	8009fc0 <HAL_ADC_ConfigChannel+0x564>
 8009faa:	683b      	ldr	r3, [r7, #0]
 8009fac:	681b      	ldr	r3, [r3, #0]
 8009fae:	0e9b      	lsrs	r3, r3, #26
 8009fb0:	3301      	adds	r3, #1
 8009fb2:	f003 021f 	and.w	r2, r3, #31
 8009fb6:	4613      	mov	r3, r2
 8009fb8:	005b      	lsls	r3, r3, #1
 8009fba:	4413      	add	r3, r2
 8009fbc:	051b      	lsls	r3, r3, #20
 8009fbe:	e018      	b.n	8009ff2 <HAL_ADC_ConfigChannel+0x596>
 8009fc0:	683b      	ldr	r3, [r7, #0]
 8009fc2:	681b      	ldr	r3, [r3, #0]
 8009fc4:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009fc6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009fc8:	fa93 f3a3 	rbit	r3, r3
 8009fcc:	633b      	str	r3, [r7, #48]	@ 0x30
  return result;
 8009fce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009fd0:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (value == 0U)
 8009fd2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009fd4:	2b00      	cmp	r3, #0
 8009fd6:	d101      	bne.n	8009fdc <HAL_ADC_ConfigChannel+0x580>
    return 32U;
 8009fd8:	2320      	movs	r3, #32
 8009fda:	e003      	b.n	8009fe4 <HAL_ADC_ConfigChannel+0x588>
  return __builtin_clz(value);
 8009fdc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009fde:	fab3 f383 	clz	r3, r3
 8009fe2:	b2db      	uxtb	r3, r3
 8009fe4:	3301      	adds	r3, #1
 8009fe6:	f003 021f 	and.w	r2, r3, #31
 8009fea:	4613      	mov	r3, r2
 8009fec:	005b      	lsls	r3, r3, #1
 8009fee:	4413      	add	r3, r2
 8009ff0:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8009ff2:	430b      	orrs	r3, r1
 8009ff4:	e081      	b.n	800a0fa <HAL_ADC_ConfigChannel+0x69e>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8009ff6:	683b      	ldr	r3, [r7, #0]
 8009ff8:	681b      	ldr	r3, [r3, #0]
 8009ffa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009ffe:	2b00      	cmp	r3, #0
 800a000:	d107      	bne.n	800a012 <HAL_ADC_ConfigChannel+0x5b6>
 800a002:	683b      	ldr	r3, [r7, #0]
 800a004:	681b      	ldr	r3, [r3, #0]
 800a006:	0e9b      	lsrs	r3, r3, #26
 800a008:	3301      	adds	r3, #1
 800a00a:	069b      	lsls	r3, r3, #26
 800a00c:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800a010:	e015      	b.n	800a03e <HAL_ADC_ConfigChannel+0x5e2>
 800a012:	683b      	ldr	r3, [r7, #0]
 800a014:	681b      	ldr	r3, [r3, #0]
 800a016:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800a018:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a01a:	fa93 f3a3 	rbit	r3, r3
 800a01e:	627b      	str	r3, [r7, #36]	@ 0x24
  return result;
 800a020:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a022:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (value == 0U)
 800a024:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a026:	2b00      	cmp	r3, #0
 800a028:	d101      	bne.n	800a02e <HAL_ADC_ConfigChannel+0x5d2>
    return 32U;
 800a02a:	2320      	movs	r3, #32
 800a02c:	e003      	b.n	800a036 <HAL_ADC_ConfigChannel+0x5da>
  return __builtin_clz(value);
 800a02e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a030:	fab3 f383 	clz	r3, r3
 800a034:	b2db      	uxtb	r3, r3
 800a036:	3301      	adds	r3, #1
 800a038:	069b      	lsls	r3, r3, #26
 800a03a:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800a03e:	683b      	ldr	r3, [r7, #0]
 800a040:	681b      	ldr	r3, [r3, #0]
 800a042:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800a046:	2b00      	cmp	r3, #0
 800a048:	d109      	bne.n	800a05e <HAL_ADC_ConfigChannel+0x602>
 800a04a:	683b      	ldr	r3, [r7, #0]
 800a04c:	681b      	ldr	r3, [r3, #0]
 800a04e:	0e9b      	lsrs	r3, r3, #26
 800a050:	3301      	adds	r3, #1
 800a052:	f003 031f 	and.w	r3, r3, #31
 800a056:	2101      	movs	r1, #1
 800a058:	fa01 f303 	lsl.w	r3, r1, r3
 800a05c:	e017      	b.n	800a08e <HAL_ADC_ConfigChannel+0x632>
 800a05e:	683b      	ldr	r3, [r7, #0]
 800a060:	681b      	ldr	r3, [r3, #0]
 800a062:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800a064:	69fb      	ldr	r3, [r7, #28]
 800a066:	fa93 f3a3 	rbit	r3, r3
 800a06a:	61bb      	str	r3, [r7, #24]
  return result;
 800a06c:	69bb      	ldr	r3, [r7, #24]
 800a06e:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 800a070:	6a3b      	ldr	r3, [r7, #32]
 800a072:	2b00      	cmp	r3, #0
 800a074:	d101      	bne.n	800a07a <HAL_ADC_ConfigChannel+0x61e>
    return 32U;
 800a076:	2320      	movs	r3, #32
 800a078:	e003      	b.n	800a082 <HAL_ADC_ConfigChannel+0x626>
  return __builtin_clz(value);
 800a07a:	6a3b      	ldr	r3, [r7, #32]
 800a07c:	fab3 f383 	clz	r3, r3
 800a080:	b2db      	uxtb	r3, r3
 800a082:	3301      	adds	r3, #1
 800a084:	f003 031f 	and.w	r3, r3, #31
 800a088:	2101      	movs	r1, #1
 800a08a:	fa01 f303 	lsl.w	r3, r1, r3
 800a08e:	ea42 0103 	orr.w	r1, r2, r3
 800a092:	683b      	ldr	r3, [r7, #0]
 800a094:	681b      	ldr	r3, [r3, #0]
 800a096:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800a09a:	2b00      	cmp	r3, #0
 800a09c:	d10d      	bne.n	800a0ba <HAL_ADC_ConfigChannel+0x65e>
 800a09e:	683b      	ldr	r3, [r7, #0]
 800a0a0:	681b      	ldr	r3, [r3, #0]
 800a0a2:	0e9b      	lsrs	r3, r3, #26
 800a0a4:	3301      	adds	r3, #1
 800a0a6:	f003 021f 	and.w	r2, r3, #31
 800a0aa:	4613      	mov	r3, r2
 800a0ac:	005b      	lsls	r3, r3, #1
 800a0ae:	4413      	add	r3, r2
 800a0b0:	3b1e      	subs	r3, #30
 800a0b2:	051b      	lsls	r3, r3, #20
 800a0b4:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800a0b8:	e01e      	b.n	800a0f8 <HAL_ADC_ConfigChannel+0x69c>
 800a0ba:	683b      	ldr	r3, [r7, #0]
 800a0bc:	681b      	ldr	r3, [r3, #0]
 800a0be:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800a0c0:	693b      	ldr	r3, [r7, #16]
 800a0c2:	fa93 f3a3 	rbit	r3, r3
 800a0c6:	60fb      	str	r3, [r7, #12]
  return result;
 800a0c8:	68fb      	ldr	r3, [r7, #12]
 800a0ca:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 800a0cc:	697b      	ldr	r3, [r7, #20]
 800a0ce:	2b00      	cmp	r3, #0
 800a0d0:	d104      	bne.n	800a0dc <HAL_ADC_ConfigChannel+0x680>
    return 32U;
 800a0d2:	2320      	movs	r3, #32
 800a0d4:	e006      	b.n	800a0e4 <HAL_ADC_ConfigChannel+0x688>
 800a0d6:	bf00      	nop
 800a0d8:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 800a0dc:	697b      	ldr	r3, [r7, #20]
 800a0de:	fab3 f383 	clz	r3, r3
 800a0e2:	b2db      	uxtb	r3, r3
 800a0e4:	3301      	adds	r3, #1
 800a0e6:	f003 021f 	and.w	r2, r3, #31
 800a0ea:	4613      	mov	r3, r2
 800a0ec:	005b      	lsls	r3, r3, #1
 800a0ee:	4413      	add	r3, r2
 800a0f0:	3b1e      	subs	r3, #30
 800a0f2:	051b      	lsls	r3, r3, #20
 800a0f4:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800a0f8:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 800a0fa:	683a      	ldr	r2, [r7, #0]
 800a0fc:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800a0fe:	4619      	mov	r1, r3
 800a100:	f7ff f8d8 	bl	80092b4 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 800a104:	683b      	ldr	r3, [r7, #0]
 800a106:	681a      	ldr	r2, [r3, #0]
 800a108:	4b44      	ldr	r3, [pc, #272]	@ (800a21c <HAL_ADC_ConfigChannel+0x7c0>)
 800a10a:	4013      	ands	r3, r2
 800a10c:	2b00      	cmp	r3, #0
 800a10e:	d07a      	beq.n	800a206 <HAL_ADC_ConfigChannel+0x7aa>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800a110:	4843      	ldr	r0, [pc, #268]	@ (800a220 <HAL_ADC_ConfigChannel+0x7c4>)
 800a112:	f7ff f82d 	bl	8009170 <LL_ADC_GetCommonPathInternalCh>
 800a116:	f8c7 00c0 	str.w	r0, [r7, #192]	@ 0xc0

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800a11a:	683b      	ldr	r3, [r7, #0]
 800a11c:	681b      	ldr	r3, [r3, #0]
 800a11e:	4a41      	ldr	r2, [pc, #260]	@ (800a224 <HAL_ADC_ConfigChannel+0x7c8>)
 800a120:	4293      	cmp	r3, r2
 800a122:	d12c      	bne.n	800a17e <HAL_ADC_ConfigChannel+0x722>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 800a124:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800a128:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800a12c:	2b00      	cmp	r3, #0
 800a12e:	d126      	bne.n	800a17e <HAL_ADC_ConfigChannel+0x722>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800a130:	687b      	ldr	r3, [r7, #4]
 800a132:	681b      	ldr	r3, [r3, #0]
 800a134:	4a3c      	ldr	r2, [pc, #240]	@ (800a228 <HAL_ADC_ConfigChannel+0x7cc>)
 800a136:	4293      	cmp	r3, r2
 800a138:	d004      	beq.n	800a144 <HAL_ADC_ConfigChannel+0x6e8>
 800a13a:	687b      	ldr	r3, [r7, #4]
 800a13c:	681b      	ldr	r3, [r3, #0]
 800a13e:	4a3b      	ldr	r2, [pc, #236]	@ (800a22c <HAL_ADC_ConfigChannel+0x7d0>)
 800a140:	4293      	cmp	r3, r2
 800a142:	d15d      	bne.n	800a200 <HAL_ADC_ConfigChannel+0x7a4>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800a144:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800a148:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800a14c:	4619      	mov	r1, r3
 800a14e:	4834      	ldr	r0, [pc, #208]	@ (800a220 <HAL_ADC_ConfigChannel+0x7c4>)
 800a150:	f7fe fffb 	bl	800914a <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800a154:	4b36      	ldr	r3, [pc, #216]	@ (800a230 <HAL_ADC_ConfigChannel+0x7d4>)
 800a156:	681b      	ldr	r3, [r3, #0]
 800a158:	099b      	lsrs	r3, r3, #6
 800a15a:	4a36      	ldr	r2, [pc, #216]	@ (800a234 <HAL_ADC_ConfigChannel+0x7d8>)
 800a15c:	fba2 2303 	umull	r2, r3, r2, r3
 800a160:	099b      	lsrs	r3, r3, #6
 800a162:	1c5a      	adds	r2, r3, #1
 800a164:	4613      	mov	r3, r2
 800a166:	005b      	lsls	r3, r3, #1
 800a168:	4413      	add	r3, r2
 800a16a:	009b      	lsls	r3, r3, #2
 800a16c:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 800a16e:	e002      	b.n	800a176 <HAL_ADC_ConfigChannel+0x71a>
          {
            wait_loop_index--;
 800a170:	68bb      	ldr	r3, [r7, #8]
 800a172:	3b01      	subs	r3, #1
 800a174:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 800a176:	68bb      	ldr	r3, [r7, #8]
 800a178:	2b00      	cmp	r3, #0
 800a17a:	d1f9      	bne.n	800a170 <HAL_ADC_ConfigChannel+0x714>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800a17c:	e040      	b.n	800a200 <HAL_ADC_ConfigChannel+0x7a4>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 800a17e:	683b      	ldr	r3, [r7, #0]
 800a180:	681b      	ldr	r3, [r3, #0]
 800a182:	4a2d      	ldr	r2, [pc, #180]	@ (800a238 <HAL_ADC_ConfigChannel+0x7dc>)
 800a184:	4293      	cmp	r3, r2
 800a186:	d118      	bne.n	800a1ba <HAL_ADC_ConfigChannel+0x75e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 800a188:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800a18c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800a190:	2b00      	cmp	r3, #0
 800a192:	d112      	bne.n	800a1ba <HAL_ADC_ConfigChannel+0x75e>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800a194:	687b      	ldr	r3, [r7, #4]
 800a196:	681b      	ldr	r3, [r3, #0]
 800a198:	4a23      	ldr	r2, [pc, #140]	@ (800a228 <HAL_ADC_ConfigChannel+0x7cc>)
 800a19a:	4293      	cmp	r3, r2
 800a19c:	d004      	beq.n	800a1a8 <HAL_ADC_ConfigChannel+0x74c>
 800a19e:	687b      	ldr	r3, [r7, #4]
 800a1a0:	681b      	ldr	r3, [r3, #0]
 800a1a2:	4a22      	ldr	r2, [pc, #136]	@ (800a22c <HAL_ADC_ConfigChannel+0x7d0>)
 800a1a4:	4293      	cmp	r3, r2
 800a1a6:	d12d      	bne.n	800a204 <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800a1a8:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800a1ac:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800a1b0:	4619      	mov	r1, r3
 800a1b2:	481b      	ldr	r0, [pc, #108]	@ (800a220 <HAL_ADC_ConfigChannel+0x7c4>)
 800a1b4:	f7fe ffc9 	bl	800914a <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800a1b8:	e024      	b.n	800a204 <HAL_ADC_ConfigChannel+0x7a8>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 800a1ba:	683b      	ldr	r3, [r7, #0]
 800a1bc:	681b      	ldr	r3, [r3, #0]
 800a1be:	4a1f      	ldr	r2, [pc, #124]	@ (800a23c <HAL_ADC_ConfigChannel+0x7e0>)
 800a1c0:	4293      	cmp	r3, r2
 800a1c2:	d120      	bne.n	800a206 <HAL_ADC_ConfigChannel+0x7aa>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 800a1c4:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800a1c8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800a1cc:	2b00      	cmp	r3, #0
 800a1ce:	d11a      	bne.n	800a206 <HAL_ADC_ConfigChannel+0x7aa>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 800a1d0:	687b      	ldr	r3, [r7, #4]
 800a1d2:	681b      	ldr	r3, [r3, #0]
 800a1d4:	4a14      	ldr	r2, [pc, #80]	@ (800a228 <HAL_ADC_ConfigChannel+0x7cc>)
 800a1d6:	4293      	cmp	r3, r2
 800a1d8:	d115      	bne.n	800a206 <HAL_ADC_ConfigChannel+0x7aa>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800a1da:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800a1de:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800a1e2:	4619      	mov	r1, r3
 800a1e4:	480e      	ldr	r0, [pc, #56]	@ (800a220 <HAL_ADC_ConfigChannel+0x7c4>)
 800a1e6:	f7fe ffb0 	bl	800914a <LL_ADC_SetCommonPathInternalCh>
 800a1ea:	e00c      	b.n	800a206 <HAL_ADC_ConfigChannel+0x7aa>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800a1ec:	687b      	ldr	r3, [r7, #4]
 800a1ee:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a1f0:	f043 0220 	orr.w	r2, r3, #32
 800a1f4:	687b      	ldr	r3, [r7, #4]
 800a1f6:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 800a1f8:	2301      	movs	r3, #1
 800a1fa:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
 800a1fe:	e002      	b.n	800a206 <HAL_ADC_ConfigChannel+0x7aa>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800a200:	bf00      	nop
 800a202:	e000      	b.n	800a206 <HAL_ADC_ConfigChannel+0x7aa>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800a204:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800a206:	687b      	ldr	r3, [r7, #4]
 800a208:	2200      	movs	r2, #0
 800a20a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 800a20e:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 800a212:	4618      	mov	r0, r3
 800a214:	37d8      	adds	r7, #216	@ 0xd8
 800a216:	46bd      	mov	sp, r7
 800a218:	bd80      	pop	{r7, pc}
 800a21a:	bf00      	nop
 800a21c:	80080000 	.word	0x80080000
 800a220:	50040300 	.word	0x50040300
 800a224:	c7520000 	.word	0xc7520000
 800a228:	50040000 	.word	0x50040000
 800a22c:	50040200 	.word	0x50040200
 800a230:	20000000 	.word	0x20000000
 800a234:	053e2d63 	.word	0x053e2d63
 800a238:	cb840000 	.word	0xcb840000
 800a23c:	80000001 	.word	0x80000001

0800a240 <ADC_ConversionStop>:
  *            @arg @ref ADC_INJECTED_GROUP          ADC injected conversion type.
  *            @arg @ref ADC_REGULAR_INJECTED_GROUP  ADC regular and injected conversion type.
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc, uint32_t ConversionGroup)
{
 800a240:	b580      	push	{r7, lr}
 800a242:	b088      	sub	sp, #32
 800a244:	af00      	add	r7, sp, #0
 800a246:	6078      	str	r0, [r7, #4]
 800a248:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t Conversion_Timeout_CPU_cycles = 0UL;
 800a24a:	2300      	movs	r3, #0
 800a24c:	61fb      	str	r3, [r7, #28]
  uint32_t conversion_group_reassigned = ConversionGroup;
 800a24e:	683b      	ldr	r3, [r7, #0]
 800a250:	61bb      	str	r3, [r7, #24]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CONVERSION_GROUP(ConversionGroup));

  /* Verification if ADC is not already stopped (on regular and injected      */
  /* groups) to bypass this function if not needed.                           */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800a252:	687b      	ldr	r3, [r7, #4]
 800a254:	681b      	ldr	r3, [r3, #0]
 800a256:	4618      	mov	r0, r3
 800a258:	f7ff f94e 	bl	80094f8 <LL_ADC_REG_IsConversionOngoing>
 800a25c:	6138      	str	r0, [r7, #16]
  tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800a25e:	687b      	ldr	r3, [r7, #4]
 800a260:	681b      	ldr	r3, [r3, #0]
 800a262:	4618      	mov	r0, r3
 800a264:	f7ff f96f 	bl	8009546 <LL_ADC_INJ_IsConversionOngoing>
 800a268:	60f8      	str	r0, [r7, #12]
  if ((tmp_adc_is_conversion_on_going_regular != 0UL)
 800a26a:	693b      	ldr	r3, [r7, #16]
 800a26c:	2b00      	cmp	r3, #0
 800a26e:	d103      	bne.n	800a278 <ADC_ConversionStop+0x38>
      || (tmp_adc_is_conversion_on_going_injected != 0UL)
 800a270:	68fb      	ldr	r3, [r7, #12]
 800a272:	2b00      	cmp	r3, #0
 800a274:	f000 8098 	beq.w	800a3a8 <ADC_ConversionStop+0x168>
    /* auto-delay mode.                                                       */
    /* In auto-injection mode, regular group stop ADC_CR_ADSTP is used (not   */
    /* injected group stop ADC_CR_JADSTP).                                    */
    /* Procedure to be followed: Wait until JEOS=1, clear JEOS, set ADSTP=1   */
    /* (see reference manual).                                                */
    if (((hadc->Instance->CFGR & ADC_CFGR_JAUTO) != 0UL)
 800a278:	687b      	ldr	r3, [r7, #4]
 800a27a:	681b      	ldr	r3, [r3, #0]
 800a27c:	68db      	ldr	r3, [r3, #12]
 800a27e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800a282:	2b00      	cmp	r3, #0
 800a284:	d02a      	beq.n	800a2dc <ADC_ConversionStop+0x9c>
        && (hadc->Init.ContinuousConvMode == ENABLE)
 800a286:	687b      	ldr	r3, [r7, #4]
 800a288:	7e5b      	ldrb	r3, [r3, #25]
 800a28a:	2b01      	cmp	r3, #1
 800a28c:	d126      	bne.n	800a2dc <ADC_ConversionStop+0x9c>
        && (hadc->Init.LowPowerAutoWait == ENABLE)
 800a28e:	687b      	ldr	r3, [r7, #4]
 800a290:	7e1b      	ldrb	r3, [r3, #24]
 800a292:	2b01      	cmp	r3, #1
 800a294:	d122      	bne.n	800a2dc <ADC_ConversionStop+0x9c>
       )
    {
      /* Use stop of regular group */
      conversion_group_reassigned = ADC_REGULAR_GROUP;
 800a296:	2301      	movs	r3, #1
 800a298:	61bb      	str	r3, [r7, #24]

      /* Wait until JEOS=1 (maximum Timeout: 4 injected conversions) */
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 800a29a:	e014      	b.n	800a2c6 <ADC_ConversionStop+0x86>
      {
        if (Conversion_Timeout_CPU_cycles >= (ADC_CONVERSION_TIME_MAX_CPU_CYCLES * 4UL))
 800a29c:	69fb      	ldr	r3, [r7, #28]
 800a29e:	4a45      	ldr	r2, [pc, #276]	@ (800a3b4 <ADC_ConversionStop+0x174>)
 800a2a0:	4293      	cmp	r3, r2
 800a2a2:	d90d      	bls.n	800a2c0 <ADC_ConversionStop+0x80>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800a2a4:	687b      	ldr	r3, [r7, #4]
 800a2a6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a2a8:	f043 0210 	orr.w	r2, r3, #16
 800a2ac:	687b      	ldr	r3, [r7, #4]
 800a2ae:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800a2b0:	687b      	ldr	r3, [r7, #4]
 800a2b2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a2b4:	f043 0201 	orr.w	r2, r3, #1
 800a2b8:	687b      	ldr	r3, [r7, #4]
 800a2ba:	659a      	str	r2, [r3, #88]	@ 0x58

          return HAL_ERROR;
 800a2bc:	2301      	movs	r3, #1
 800a2be:	e074      	b.n	800a3aa <ADC_ConversionStop+0x16a>
        }
        Conversion_Timeout_CPU_cycles ++;
 800a2c0:	69fb      	ldr	r3, [r7, #28]
 800a2c2:	3301      	adds	r3, #1
 800a2c4:	61fb      	str	r3, [r7, #28]
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 800a2c6:	687b      	ldr	r3, [r7, #4]
 800a2c8:	681b      	ldr	r3, [r3, #0]
 800a2ca:	681b      	ldr	r3, [r3, #0]
 800a2cc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a2d0:	2b40      	cmp	r3, #64	@ 0x40
 800a2d2:	d1e3      	bne.n	800a29c <ADC_ConversionStop+0x5c>
      }

      /* Clear JEOS */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
 800a2d4:	687b      	ldr	r3, [r7, #4]
 800a2d6:	681b      	ldr	r3, [r3, #0]
 800a2d8:	2240      	movs	r2, #64	@ 0x40
 800a2da:	601a      	str	r2, [r3, #0]
    }

    /* Stop potential conversion on going on ADC group regular */
    if (conversion_group_reassigned != ADC_INJECTED_GROUP)
 800a2dc:	69bb      	ldr	r3, [r7, #24]
 800a2de:	2b02      	cmp	r3, #2
 800a2e0:	d014      	beq.n	800a30c <ADC_ConversionStop+0xcc>
    {
      /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 800a2e2:	687b      	ldr	r3, [r7, #4]
 800a2e4:	681b      	ldr	r3, [r3, #0]
 800a2e6:	4618      	mov	r0, r3
 800a2e8:	f7ff f906 	bl	80094f8 <LL_ADC_REG_IsConversionOngoing>
 800a2ec:	4603      	mov	r3, r0
 800a2ee:	2b00      	cmp	r3, #0
 800a2f0:	d00c      	beq.n	800a30c <ADC_ConversionStop+0xcc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 800a2f2:	687b      	ldr	r3, [r7, #4]
 800a2f4:	681b      	ldr	r3, [r3, #0]
 800a2f6:	4618      	mov	r0, r3
 800a2f8:	f7ff f8c3 	bl	8009482 <LL_ADC_IsDisableOngoing>
 800a2fc:	4603      	mov	r3, r0
 800a2fe:	2b00      	cmp	r3, #0
 800a300:	d104      	bne.n	800a30c <ADC_ConversionStop+0xcc>
        {
          /* Stop ADC group regular conversion */
          LL_ADC_REG_StopConversion(hadc->Instance);
 800a302:	687b      	ldr	r3, [r7, #4]
 800a304:	681b      	ldr	r3, [r3, #0]
 800a306:	4618      	mov	r0, r3
 800a308:	f7ff f8e2 	bl	80094d0 <LL_ADC_REG_StopConversion>
        }
      }
    }

    /* Stop potential conversion on going on ADC group injected */
    if (conversion_group_reassigned != ADC_REGULAR_GROUP)
 800a30c:	69bb      	ldr	r3, [r7, #24]
 800a30e:	2b01      	cmp	r3, #1
 800a310:	d014      	beq.n	800a33c <ADC_ConversionStop+0xfc>
    {
      /* Software is allowed to set JADSTP only when JADSTART=1 and ADDIS=0 */
      if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) != 0UL)
 800a312:	687b      	ldr	r3, [r7, #4]
 800a314:	681b      	ldr	r3, [r3, #0]
 800a316:	4618      	mov	r0, r3
 800a318:	f7ff f915 	bl	8009546 <LL_ADC_INJ_IsConversionOngoing>
 800a31c:	4603      	mov	r3, r0
 800a31e:	2b00      	cmp	r3, #0
 800a320:	d00c      	beq.n	800a33c <ADC_ConversionStop+0xfc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 800a322:	687b      	ldr	r3, [r7, #4]
 800a324:	681b      	ldr	r3, [r3, #0]
 800a326:	4618      	mov	r0, r3
 800a328:	f7ff f8ab 	bl	8009482 <LL_ADC_IsDisableOngoing>
 800a32c:	4603      	mov	r3, r0
 800a32e:	2b00      	cmp	r3, #0
 800a330:	d104      	bne.n	800a33c <ADC_ConversionStop+0xfc>
        {
          /* Stop ADC group injected conversion */
          LL_ADC_INJ_StopConversion(hadc->Instance);
 800a332:	687b      	ldr	r3, [r7, #4]
 800a334:	681b      	ldr	r3, [r3, #0]
 800a336:	4618      	mov	r0, r3
 800a338:	f7ff f8f1 	bl	800951e <LL_ADC_INJ_StopConversion>
        }
      }
    }

    /* Selection of start and stop bits with respect to the regular or injected group */
    switch (conversion_group_reassigned)
 800a33c:	69bb      	ldr	r3, [r7, #24]
 800a33e:	2b02      	cmp	r3, #2
 800a340:	d005      	beq.n	800a34e <ADC_ConversionStop+0x10e>
 800a342:	69bb      	ldr	r3, [r7, #24]
 800a344:	2b03      	cmp	r3, #3
 800a346:	d105      	bne.n	800a354 <ADC_ConversionStop+0x114>
    {
      case ADC_REGULAR_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = (ADC_CR_ADSTART | ADC_CR_JADSTART);
 800a348:	230c      	movs	r3, #12
 800a34a:	617b      	str	r3, [r7, #20]
        break;
 800a34c:	e005      	b.n	800a35a <ADC_ConversionStop+0x11a>
      case ADC_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_JADSTART;
 800a34e:	2308      	movs	r3, #8
 800a350:	617b      	str	r3, [r7, #20]
        break;
 800a352:	e002      	b.n	800a35a <ADC_ConversionStop+0x11a>
      /* Case ADC_REGULAR_GROUP only*/
      default:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
 800a354:	2304      	movs	r3, #4
 800a356:	617b      	str	r3, [r7, #20]
        break;
 800a358:	bf00      	nop
    }

    /* Wait for conversion effectively stopped */
    tickstart = HAL_GetTick();
 800a35a:	f7fe feb3 	bl	80090c4 <HAL_GetTick>
 800a35e:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 800a360:	e01b      	b.n	800a39a <ADC_ConversionStop+0x15a>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 800a362:	f7fe feaf 	bl	80090c4 <HAL_GetTick>
 800a366:	4602      	mov	r2, r0
 800a368:	68bb      	ldr	r3, [r7, #8]
 800a36a:	1ad3      	subs	r3, r2, r3
 800a36c:	2b05      	cmp	r3, #5
 800a36e:	d914      	bls.n	800a39a <ADC_ConversionStop+0x15a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 800a370:	687b      	ldr	r3, [r7, #4]
 800a372:	681b      	ldr	r3, [r3, #0]
 800a374:	689a      	ldr	r2, [r3, #8]
 800a376:	697b      	ldr	r3, [r7, #20]
 800a378:	4013      	ands	r3, r2
 800a37a:	2b00      	cmp	r3, #0
 800a37c:	d00d      	beq.n	800a39a <ADC_ConversionStop+0x15a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800a37e:	687b      	ldr	r3, [r7, #4]
 800a380:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a382:	f043 0210 	orr.w	r2, r3, #16
 800a386:	687b      	ldr	r3, [r7, #4]
 800a388:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800a38a:	687b      	ldr	r3, [r7, #4]
 800a38c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a38e:	f043 0201 	orr.w	r2, r3, #1
 800a392:	687b      	ldr	r3, [r7, #4]
 800a394:	659a      	str	r2, [r3, #88]	@ 0x58

          return HAL_ERROR;
 800a396:	2301      	movs	r3, #1
 800a398:	e007      	b.n	800a3aa <ADC_ConversionStop+0x16a>
    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 800a39a:	687b      	ldr	r3, [r7, #4]
 800a39c:	681b      	ldr	r3, [r3, #0]
 800a39e:	689a      	ldr	r2, [r3, #8]
 800a3a0:	697b      	ldr	r3, [r7, #20]
 800a3a2:	4013      	ands	r3, r2
 800a3a4:	2b00      	cmp	r3, #0
 800a3a6:	d1dc      	bne.n	800a362 <ADC_ConversionStop+0x122>
    }

  }

  /* Return HAL status */
  return HAL_OK;
 800a3a8:	2300      	movs	r3, #0
}
 800a3aa:	4618      	mov	r0, r3
 800a3ac:	3720      	adds	r7, #32
 800a3ae:	46bd      	mov	sp, r7
 800a3b0:	bd80      	pop	{r7, pc}
 800a3b2:	bf00      	nop
 800a3b4:	a33fffff 	.word	0xa33fffff

0800a3b8 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 800a3b8:	b580      	push	{r7, lr}
 800a3ba:	b084      	sub	sp, #16
 800a3bc:	af00      	add	r7, sp, #0
 800a3be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 800a3c0:	2300      	movs	r3, #0
 800a3c2:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800a3c4:	687b      	ldr	r3, [r7, #4]
 800a3c6:	681b      	ldr	r3, [r3, #0]
 800a3c8:	4618      	mov	r0, r3
 800a3ca:	f7ff f847 	bl	800945c <LL_ADC_IsEnabled>
 800a3ce:	4603      	mov	r3, r0
 800a3d0:	2b00      	cmp	r3, #0
 800a3d2:	d169      	bne.n	800a4a8 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 800a3d4:	687b      	ldr	r3, [r7, #4]
 800a3d6:	681b      	ldr	r3, [r3, #0]
 800a3d8:	689a      	ldr	r2, [r3, #8]
 800a3da:	4b36      	ldr	r3, [pc, #216]	@ (800a4b4 <ADC_Enable+0xfc>)
 800a3dc:	4013      	ands	r3, r2
 800a3de:	2b00      	cmp	r3, #0
 800a3e0:	d00d      	beq.n	800a3fe <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800a3e2:	687b      	ldr	r3, [r7, #4]
 800a3e4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a3e6:	f043 0210 	orr.w	r2, r3, #16
 800a3ea:	687b      	ldr	r3, [r7, #4]
 800a3ec:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800a3ee:	687b      	ldr	r3, [r7, #4]
 800a3f0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a3f2:	f043 0201 	orr.w	r2, r3, #1
 800a3f6:	687b      	ldr	r3, [r7, #4]
 800a3f8:	659a      	str	r2, [r3, #88]	@ 0x58

      return HAL_ERROR;
 800a3fa:	2301      	movs	r3, #1
 800a3fc:	e055      	b.n	800a4aa <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 800a3fe:	687b      	ldr	r3, [r7, #4]
 800a400:	681b      	ldr	r3, [r3, #0]
 800a402:	4618      	mov	r0, r3
 800a404:	f7ff f802 	bl	800940c <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 800a408:	482b      	ldr	r0, [pc, #172]	@ (800a4b8 <ADC_Enable+0x100>)
 800a40a:	f7fe feb1 	bl	8009170 <LL_ADC_GetCommonPathInternalCh>
 800a40e:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 800a410:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 800a414:	2b00      	cmp	r3, #0
 800a416:	d013      	beq.n	800a440 <ADC_Enable+0x88>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800a418:	4b28      	ldr	r3, [pc, #160]	@ (800a4bc <ADC_Enable+0x104>)
 800a41a:	681b      	ldr	r3, [r3, #0]
 800a41c:	099b      	lsrs	r3, r3, #6
 800a41e:	4a28      	ldr	r2, [pc, #160]	@ (800a4c0 <ADC_Enable+0x108>)
 800a420:	fba2 2303 	umull	r2, r3, r2, r3
 800a424:	099b      	lsrs	r3, r3, #6
 800a426:	1c5a      	adds	r2, r3, #1
 800a428:	4613      	mov	r3, r2
 800a42a:	005b      	lsls	r3, r3, #1
 800a42c:	4413      	add	r3, r2
 800a42e:	009b      	lsls	r3, r3, #2
 800a430:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 800a432:	e002      	b.n	800a43a <ADC_Enable+0x82>
      {
        wait_loop_index--;
 800a434:	68bb      	ldr	r3, [r7, #8]
 800a436:	3b01      	subs	r3, #1
 800a438:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 800a43a:	68bb      	ldr	r3, [r7, #8]
 800a43c:	2b00      	cmp	r3, #0
 800a43e:	d1f9      	bne.n	800a434 <ADC_Enable+0x7c>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 800a440:	f7fe fe40 	bl	80090c4 <HAL_GetTick>
 800a444:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800a446:	e028      	b.n	800a49a <ADC_Enable+0xe2>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800a448:	687b      	ldr	r3, [r7, #4]
 800a44a:	681b      	ldr	r3, [r3, #0]
 800a44c:	4618      	mov	r0, r3
 800a44e:	f7ff f805 	bl	800945c <LL_ADC_IsEnabled>
 800a452:	4603      	mov	r3, r0
 800a454:	2b00      	cmp	r3, #0
 800a456:	d104      	bne.n	800a462 <ADC_Enable+0xaa>
      {
        LL_ADC_Enable(hadc->Instance);
 800a458:	687b      	ldr	r3, [r7, #4]
 800a45a:	681b      	ldr	r3, [r3, #0]
 800a45c:	4618      	mov	r0, r3
 800a45e:	f7fe ffd5 	bl	800940c <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800a462:	f7fe fe2f 	bl	80090c4 <HAL_GetTick>
 800a466:	4602      	mov	r2, r0
 800a468:	68fb      	ldr	r3, [r7, #12]
 800a46a:	1ad3      	subs	r3, r2, r3
 800a46c:	2b02      	cmp	r3, #2
 800a46e:	d914      	bls.n	800a49a <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800a470:	687b      	ldr	r3, [r7, #4]
 800a472:	681b      	ldr	r3, [r3, #0]
 800a474:	681b      	ldr	r3, [r3, #0]
 800a476:	f003 0301 	and.w	r3, r3, #1
 800a47a:	2b01      	cmp	r3, #1
 800a47c:	d00d      	beq.n	800a49a <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800a47e:	687b      	ldr	r3, [r7, #4]
 800a480:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a482:	f043 0210 	orr.w	r2, r3, #16
 800a486:	687b      	ldr	r3, [r7, #4]
 800a488:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800a48a:	687b      	ldr	r3, [r7, #4]
 800a48c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a48e:	f043 0201 	orr.w	r2, r3, #1
 800a492:	687b      	ldr	r3, [r7, #4]
 800a494:	659a      	str	r2, [r3, #88]	@ 0x58

          return HAL_ERROR;
 800a496:	2301      	movs	r3, #1
 800a498:	e007      	b.n	800a4aa <ADC_Enable+0xf2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800a49a:	687b      	ldr	r3, [r7, #4]
 800a49c:	681b      	ldr	r3, [r3, #0]
 800a49e:	681b      	ldr	r3, [r3, #0]
 800a4a0:	f003 0301 	and.w	r3, r3, #1
 800a4a4:	2b01      	cmp	r3, #1
 800a4a6:	d1cf      	bne.n	800a448 <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 800a4a8:	2300      	movs	r3, #0
}
 800a4aa:	4618      	mov	r0, r3
 800a4ac:	3710      	adds	r7, #16
 800a4ae:	46bd      	mov	sp, r7
 800a4b0:	bd80      	pop	{r7, pc}
 800a4b2:	bf00      	nop
 800a4b4:	8000003f 	.word	0x8000003f
 800a4b8:	50040300 	.word	0x50040300
 800a4bc:	20000000 	.word	0x20000000
 800a4c0:	053e2d63 	.word	0x053e2d63

0800a4c4 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 800a4c4:	b580      	push	{r7, lr}
 800a4c6:	b084      	sub	sp, #16
 800a4c8:	af00      	add	r7, sp, #0
 800a4ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 800a4cc:	687b      	ldr	r3, [r7, #4]
 800a4ce:	681b      	ldr	r3, [r3, #0]
 800a4d0:	4618      	mov	r0, r3
 800a4d2:	f7fe ffd6 	bl	8009482 <LL_ADC_IsDisableOngoing>
 800a4d6:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 800a4d8:	687b      	ldr	r3, [r7, #4]
 800a4da:	681b      	ldr	r3, [r3, #0]
 800a4dc:	4618      	mov	r0, r3
 800a4de:	f7fe ffbd 	bl	800945c <LL_ADC_IsEnabled>
 800a4e2:	4603      	mov	r3, r0
 800a4e4:	2b00      	cmp	r3, #0
 800a4e6:	d047      	beq.n	800a578 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 800a4e8:	68fb      	ldr	r3, [r7, #12]
 800a4ea:	2b00      	cmp	r3, #0
 800a4ec:	d144      	bne.n	800a578 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 800a4ee:	687b      	ldr	r3, [r7, #4]
 800a4f0:	681b      	ldr	r3, [r3, #0]
 800a4f2:	689b      	ldr	r3, [r3, #8]
 800a4f4:	f003 030d 	and.w	r3, r3, #13
 800a4f8:	2b01      	cmp	r3, #1
 800a4fa:	d10c      	bne.n	800a516 <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 800a4fc:	687b      	ldr	r3, [r7, #4]
 800a4fe:	681b      	ldr	r3, [r3, #0]
 800a500:	4618      	mov	r0, r3
 800a502:	f7fe ff97 	bl	8009434 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 800a506:	687b      	ldr	r3, [r7, #4]
 800a508:	681b      	ldr	r3, [r3, #0]
 800a50a:	2203      	movs	r2, #3
 800a50c:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 800a50e:	f7fe fdd9 	bl	80090c4 <HAL_GetTick>
 800a512:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 800a514:	e029      	b.n	800a56a <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800a516:	687b      	ldr	r3, [r7, #4]
 800a518:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a51a:	f043 0210 	orr.w	r2, r3, #16
 800a51e:	687b      	ldr	r3, [r7, #4]
 800a520:	655a      	str	r2, [r3, #84]	@ 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800a522:	687b      	ldr	r3, [r7, #4]
 800a524:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a526:	f043 0201 	orr.w	r2, r3, #1
 800a52a:	687b      	ldr	r3, [r7, #4]
 800a52c:	659a      	str	r2, [r3, #88]	@ 0x58
      return HAL_ERROR;
 800a52e:	2301      	movs	r3, #1
 800a530:	e023      	b.n	800a57a <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800a532:	f7fe fdc7 	bl	80090c4 <HAL_GetTick>
 800a536:	4602      	mov	r2, r0
 800a538:	68bb      	ldr	r3, [r7, #8]
 800a53a:	1ad3      	subs	r3, r2, r3
 800a53c:	2b02      	cmp	r3, #2
 800a53e:	d914      	bls.n	800a56a <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 800a540:	687b      	ldr	r3, [r7, #4]
 800a542:	681b      	ldr	r3, [r3, #0]
 800a544:	689b      	ldr	r3, [r3, #8]
 800a546:	f003 0301 	and.w	r3, r3, #1
 800a54a:	2b00      	cmp	r3, #0
 800a54c:	d00d      	beq.n	800a56a <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800a54e:	687b      	ldr	r3, [r7, #4]
 800a550:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a552:	f043 0210 	orr.w	r2, r3, #16
 800a556:	687b      	ldr	r3, [r7, #4]
 800a558:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800a55a:	687b      	ldr	r3, [r7, #4]
 800a55c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a55e:	f043 0201 	orr.w	r2, r3, #1
 800a562:	687b      	ldr	r3, [r7, #4]
 800a564:	659a      	str	r2, [r3, #88]	@ 0x58

          return HAL_ERROR;
 800a566:	2301      	movs	r3, #1
 800a568:	e007      	b.n	800a57a <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 800a56a:	687b      	ldr	r3, [r7, #4]
 800a56c:	681b      	ldr	r3, [r3, #0]
 800a56e:	689b      	ldr	r3, [r3, #8]
 800a570:	f003 0301 	and.w	r3, r3, #1
 800a574:	2b00      	cmp	r3, #0
 800a576:	d1dc      	bne.n	800a532 <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 800a578:	2300      	movs	r3, #0
}
 800a57a:	4618      	mov	r0, r3
 800a57c:	3710      	adds	r7, #16
 800a57e:	46bd      	mov	sp, r7
 800a580:	bd80      	pop	{r7, pc}

0800a582 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 800a582:	b580      	push	{r7, lr}
 800a584:	b084      	sub	sp, #16
 800a586:	af00      	add	r7, sp, #0
 800a588:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800a58a:	687b      	ldr	r3, [r7, #4]
 800a58c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a58e:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 800a590:	68fb      	ldr	r3, [r7, #12]
 800a592:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a594:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800a598:	2b00      	cmp	r3, #0
 800a59a:	d14b      	bne.n	800a634 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800a59c:	68fb      	ldr	r3, [r7, #12]
 800a59e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a5a0:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 800a5a4:	68fb      	ldr	r3, [r7, #12]
 800a5a6:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 800a5a8:	68fb      	ldr	r3, [r7, #12]
 800a5aa:	681b      	ldr	r3, [r3, #0]
 800a5ac:	681b      	ldr	r3, [r3, #0]
 800a5ae:	f003 0308 	and.w	r3, r3, #8
 800a5b2:	2b00      	cmp	r3, #0
 800a5b4:	d021      	beq.n	800a5fa <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 800a5b6:	68fb      	ldr	r3, [r7, #12]
 800a5b8:	681b      	ldr	r3, [r3, #0]
 800a5ba:	4618      	mov	r0, r3
 800a5bc:	f7fe fe3b 	bl	8009236 <LL_ADC_REG_IsTriggerSourceSWStart>
 800a5c0:	4603      	mov	r3, r0
 800a5c2:	2b00      	cmp	r3, #0
 800a5c4:	d032      	beq.n	800a62c <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 800a5c6:	68fb      	ldr	r3, [r7, #12]
 800a5c8:	681b      	ldr	r3, [r3, #0]
 800a5ca:	68db      	ldr	r3, [r3, #12]
 800a5cc:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800a5d0:	2b00      	cmp	r3, #0
 800a5d2:	d12b      	bne.n	800a62c <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800a5d4:	68fb      	ldr	r3, [r7, #12]
 800a5d6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a5d8:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800a5dc:	68fb      	ldr	r3, [r7, #12]
 800a5de:	655a      	str	r2, [r3, #84]	@ 0x54
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 800a5e0:	68fb      	ldr	r3, [r7, #12]
 800a5e2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a5e4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800a5e8:	2b00      	cmp	r3, #0
 800a5ea:	d11f      	bne.n	800a62c <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800a5ec:	68fb      	ldr	r3, [r7, #12]
 800a5ee:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a5f0:	f043 0201 	orr.w	r2, r3, #1
 800a5f4:	68fb      	ldr	r3, [r7, #12]
 800a5f6:	655a      	str	r2, [r3, #84]	@ 0x54
 800a5f8:	e018      	b.n	800a62c <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 800a5fa:	68fb      	ldr	r3, [r7, #12]
 800a5fc:	681b      	ldr	r3, [r3, #0]
 800a5fe:	68db      	ldr	r3, [r3, #12]
 800a600:	f003 0302 	and.w	r3, r3, #2
 800a604:	2b00      	cmp	r3, #0
 800a606:	d111      	bne.n	800a62c <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800a608:	68fb      	ldr	r3, [r7, #12]
 800a60a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a60c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800a610:	68fb      	ldr	r3, [r7, #12]
 800a612:	655a      	str	r2, [r3, #84]	@ 0x54
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 800a614:	68fb      	ldr	r3, [r7, #12]
 800a616:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a618:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800a61c:	2b00      	cmp	r3, #0
 800a61e:	d105      	bne.n	800a62c <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800a620:	68fb      	ldr	r3, [r7, #12]
 800a622:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a624:	f043 0201 	orr.w	r2, r3, #1
 800a628:	68fb      	ldr	r3, [r7, #12]
 800a62a:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800a62c:	68f8      	ldr	r0, [r7, #12]
 800a62e:	f7f7 fa53 	bl	8001ad8 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 800a632:	e00e      	b.n	800a652 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 800a634:	68fb      	ldr	r3, [r7, #12]
 800a636:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a638:	f003 0310 	and.w	r3, r3, #16
 800a63c:	2b00      	cmp	r3, #0
 800a63e:	d003      	beq.n	800a648 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 800a640:	68f8      	ldr	r0, [r7, #12]
 800a642:	f7ff fa00 	bl	8009a46 <HAL_ADC_ErrorCallback>
}
 800a646:	e004      	b.n	800a652 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 800a648:	68fb      	ldr	r3, [r7, #12]
 800a64a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a64c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a64e:	6878      	ldr	r0, [r7, #4]
 800a650:	4798      	blx	r3
}
 800a652:	bf00      	nop
 800a654:	3710      	adds	r7, #16
 800a656:	46bd      	mov	sp, r7
 800a658:	bd80      	pop	{r7, pc}

0800a65a <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 800a65a:	b580      	push	{r7, lr}
 800a65c:	b084      	sub	sp, #16
 800a65e:	af00      	add	r7, sp, #0
 800a660:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800a662:	687b      	ldr	r3, [r7, #4]
 800a664:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a666:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 800a668:	68f8      	ldr	r0, [r7, #12]
 800a66a:	f7f7 fa19 	bl	8001aa0 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800a66e:	bf00      	nop
 800a670:	3710      	adds	r7, #16
 800a672:	46bd      	mov	sp, r7
 800a674:	bd80      	pop	{r7, pc}

0800a676 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 800a676:	b580      	push	{r7, lr}
 800a678:	b084      	sub	sp, #16
 800a67a:	af00      	add	r7, sp, #0
 800a67c:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800a67e:	687b      	ldr	r3, [r7, #4]
 800a680:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a682:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 800a684:	68fb      	ldr	r3, [r7, #12]
 800a686:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a688:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800a68c:	68fb      	ldr	r3, [r7, #12]
 800a68e:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 800a690:	68fb      	ldr	r3, [r7, #12]
 800a692:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a694:	f043 0204 	orr.w	r2, r3, #4
 800a698:	68fb      	ldr	r3, [r7, #12]
 800a69a:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 800a69c:	68f8      	ldr	r0, [r7, #12]
 800a69e:	f7ff f9d2 	bl	8009a46 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800a6a2:	bf00      	nop
 800a6a4:	3710      	adds	r7, #16
 800a6a6:	46bd      	mov	sp, r7
 800a6a8:	bd80      	pop	{r7, pc}

0800a6aa <LL_ADC_IsEnabled>:
{
 800a6aa:	b480      	push	{r7}
 800a6ac:	b083      	sub	sp, #12
 800a6ae:	af00      	add	r7, sp, #0
 800a6b0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800a6b2:	687b      	ldr	r3, [r7, #4]
 800a6b4:	689b      	ldr	r3, [r3, #8]
 800a6b6:	f003 0301 	and.w	r3, r3, #1
 800a6ba:	2b01      	cmp	r3, #1
 800a6bc:	d101      	bne.n	800a6c2 <LL_ADC_IsEnabled+0x18>
 800a6be:	2301      	movs	r3, #1
 800a6c0:	e000      	b.n	800a6c4 <LL_ADC_IsEnabled+0x1a>
 800a6c2:	2300      	movs	r3, #0
}
 800a6c4:	4618      	mov	r0, r3
 800a6c6:	370c      	adds	r7, #12
 800a6c8:	46bd      	mov	sp, r7
 800a6ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6ce:	4770      	bx	lr

0800a6d0 <LL_ADC_REG_IsConversionOngoing>:
{
 800a6d0:	b480      	push	{r7}
 800a6d2:	b083      	sub	sp, #12
 800a6d4:	af00      	add	r7, sp, #0
 800a6d6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800a6d8:	687b      	ldr	r3, [r7, #4]
 800a6da:	689b      	ldr	r3, [r3, #8]
 800a6dc:	f003 0304 	and.w	r3, r3, #4
 800a6e0:	2b04      	cmp	r3, #4
 800a6e2:	d101      	bne.n	800a6e8 <LL_ADC_REG_IsConversionOngoing+0x18>
 800a6e4:	2301      	movs	r3, #1
 800a6e6:	e000      	b.n	800a6ea <LL_ADC_REG_IsConversionOngoing+0x1a>
 800a6e8:	2300      	movs	r3, #0
}
 800a6ea:	4618      	mov	r0, r3
 800a6ec:	370c      	adds	r7, #12
 800a6ee:	46bd      	mov	sp, r7
 800a6f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6f4:	4770      	bx	lr
	...

0800a6f8 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 800a6f8:	b590      	push	{r4, r7, lr}
 800a6fa:	b09f      	sub	sp, #124	@ 0x7c
 800a6fc:	af00      	add	r7, sp, #0
 800a6fe:	6078      	str	r0, [r7, #4]
 800a700:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800a702:	2300      	movs	r3, #0
 800a704:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 800a708:	687b      	ldr	r3, [r7, #4]
 800a70a:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800a70e:	2b01      	cmp	r3, #1
 800a710:	d101      	bne.n	800a716 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 800a712:	2302      	movs	r3, #2
 800a714:	e093      	b.n	800a83e <HAL_ADCEx_MultiModeConfigChannel+0x146>
 800a716:	687b      	ldr	r3, [r7, #4]
 800a718:	2201      	movs	r2, #1
 800a71a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 800a71e:	2300      	movs	r3, #0
 800a720:	65fb      	str	r3, [r7, #92]	@ 0x5c
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 800a722:	2300      	movs	r3, #0
 800a724:	663b      	str	r3, [r7, #96]	@ 0x60

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 800a726:	687b      	ldr	r3, [r7, #4]
 800a728:	681b      	ldr	r3, [r3, #0]
 800a72a:	4a47      	ldr	r2, [pc, #284]	@ (800a848 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 800a72c:	4293      	cmp	r3, r2
 800a72e:	d102      	bne.n	800a736 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 800a730:	4b46      	ldr	r3, [pc, #280]	@ (800a84c <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 800a732:	60bb      	str	r3, [r7, #8]
 800a734:	e001      	b.n	800a73a <HAL_ADCEx_MultiModeConfigChannel+0x42>
 800a736:	2300      	movs	r3, #0
 800a738:	60bb      	str	r3, [r7, #8]

  if (tmp_hadc_slave.Instance == NULL)
 800a73a:	68bb      	ldr	r3, [r7, #8]
 800a73c:	2b00      	cmp	r3, #0
 800a73e:	d10b      	bne.n	800a758 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800a740:	687b      	ldr	r3, [r7, #4]
 800a742:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a744:	f043 0220 	orr.w	r2, r3, #32
 800a748:	687b      	ldr	r3, [r7, #4]
 800a74a:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800a74c:	687b      	ldr	r3, [r7, #4]
 800a74e:	2200      	movs	r2, #0
 800a750:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    return HAL_ERROR;
 800a754:	2301      	movs	r3, #1
 800a756:	e072      	b.n	800a83e <HAL_ADCEx_MultiModeConfigChannel+0x146>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 800a758:	68bb      	ldr	r3, [r7, #8]
 800a75a:	4618      	mov	r0, r3
 800a75c:	f7ff ffb8 	bl	800a6d0 <LL_ADC_REG_IsConversionOngoing>
 800a760:	6738      	str	r0, [r7, #112]	@ 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800a762:	687b      	ldr	r3, [r7, #4]
 800a764:	681b      	ldr	r3, [r3, #0]
 800a766:	4618      	mov	r0, r3
 800a768:	f7ff ffb2 	bl	800a6d0 <LL_ADC_REG_IsConversionOngoing>
 800a76c:	4603      	mov	r3, r0
 800a76e:	2b00      	cmp	r3, #0
 800a770:	d154      	bne.n	800a81c <HAL_ADCEx_MultiModeConfigChannel+0x124>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 800a772:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800a774:	2b00      	cmp	r3, #0
 800a776:	d151      	bne.n	800a81c <HAL_ADCEx_MultiModeConfigChannel+0x124>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 800a778:	4b35      	ldr	r3, [pc, #212]	@ (800a850 <HAL_ADCEx_MultiModeConfigChannel+0x158>)
 800a77a:	66fb      	str	r3, [r7, #108]	@ 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 800a77c:	683b      	ldr	r3, [r7, #0]
 800a77e:	681b      	ldr	r3, [r3, #0]
 800a780:	2b00      	cmp	r3, #0
 800a782:	d02c      	beq.n	800a7de <HAL_ADCEx_MultiModeConfigChannel+0xe6>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 800a784:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a786:	689b      	ldr	r3, [r3, #8]
 800a788:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800a78c:	683b      	ldr	r3, [r7, #0]
 800a78e:	6859      	ldr	r1, [r3, #4]
 800a790:	687b      	ldr	r3, [r7, #4]
 800a792:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800a796:	035b      	lsls	r3, r3, #13
 800a798:	430b      	orrs	r3, r1
 800a79a:	431a      	orrs	r2, r3
 800a79c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a79e:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800a7a0:	4829      	ldr	r0, [pc, #164]	@ (800a848 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 800a7a2:	f7ff ff82 	bl	800a6aa <LL_ADC_IsEnabled>
 800a7a6:	4604      	mov	r4, r0
 800a7a8:	4828      	ldr	r0, [pc, #160]	@ (800a84c <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 800a7aa:	f7ff ff7e 	bl	800a6aa <LL_ADC_IsEnabled>
 800a7ae:	4603      	mov	r3, r0
 800a7b0:	431c      	orrs	r4, r3
 800a7b2:	4828      	ldr	r0, [pc, #160]	@ (800a854 <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 800a7b4:	f7ff ff79 	bl	800a6aa <LL_ADC_IsEnabled>
 800a7b8:	4603      	mov	r3, r0
 800a7ba:	4323      	orrs	r3, r4
 800a7bc:	2b00      	cmp	r3, #0
 800a7be:	d137      	bne.n	800a830 <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 800a7c0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a7c2:	689b      	ldr	r3, [r3, #8]
 800a7c4:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 800a7c8:	f023 030f 	bic.w	r3, r3, #15
 800a7cc:	683a      	ldr	r2, [r7, #0]
 800a7ce:	6811      	ldr	r1, [r2, #0]
 800a7d0:	683a      	ldr	r2, [r7, #0]
 800a7d2:	6892      	ldr	r2, [r2, #8]
 800a7d4:	430a      	orrs	r2, r1
 800a7d6:	431a      	orrs	r2, r3
 800a7d8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a7da:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 800a7dc:	e028      	b.n	800a830 <HAL_ADCEx_MultiModeConfigChannel+0x138>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 800a7de:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a7e0:	689b      	ldr	r3, [r3, #8]
 800a7e2:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800a7e6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a7e8:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800a7ea:	4817      	ldr	r0, [pc, #92]	@ (800a848 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 800a7ec:	f7ff ff5d 	bl	800a6aa <LL_ADC_IsEnabled>
 800a7f0:	4604      	mov	r4, r0
 800a7f2:	4816      	ldr	r0, [pc, #88]	@ (800a84c <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 800a7f4:	f7ff ff59 	bl	800a6aa <LL_ADC_IsEnabled>
 800a7f8:	4603      	mov	r3, r0
 800a7fa:	431c      	orrs	r4, r3
 800a7fc:	4815      	ldr	r0, [pc, #84]	@ (800a854 <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 800a7fe:	f7ff ff54 	bl	800a6aa <LL_ADC_IsEnabled>
 800a802:	4603      	mov	r3, r0
 800a804:	4323      	orrs	r3, r4
 800a806:	2b00      	cmp	r3, #0
 800a808:	d112      	bne.n	800a830 <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 800a80a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a80c:	689b      	ldr	r3, [r3, #8]
 800a80e:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 800a812:	f023 030f 	bic.w	r3, r3, #15
 800a816:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800a818:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 800a81a:	e009      	b.n	800a830 <HAL_ADCEx_MultiModeConfigChannel+0x138>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800a81c:	687b      	ldr	r3, [r7, #4]
 800a81e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a820:	f043 0220 	orr.w	r2, r3, #32
 800a824:	687b      	ldr	r3, [r7, #4]
 800a826:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 800a828:	2301      	movs	r3, #1
 800a82a:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
 800a82e:	e000      	b.n	800a832 <HAL_ADCEx_MultiModeConfigChannel+0x13a>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 800a830:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800a832:	687b      	ldr	r3, [r7, #4]
 800a834:	2200      	movs	r2, #0
 800a836:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 800a83a:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
}
 800a83e:	4618      	mov	r0, r3
 800a840:	377c      	adds	r7, #124	@ 0x7c
 800a842:	46bd      	mov	sp, r7
 800a844:	bd90      	pop	{r4, r7, pc}
 800a846:	bf00      	nop
 800a848:	50040000 	.word	0x50040000
 800a84c:	50040100 	.word	0x50040100
 800a850:	50040300 	.word	0x50040300
 800a854:	50040200 	.word	0x50040200

0800a858 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800a858:	b480      	push	{r7}
 800a85a:	b085      	sub	sp, #20
 800a85c:	af00      	add	r7, sp, #0
 800a85e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800a860:	687b      	ldr	r3, [r7, #4]
 800a862:	f003 0307 	and.w	r3, r3, #7
 800a866:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800a868:	4b0c      	ldr	r3, [pc, #48]	@ (800a89c <__NVIC_SetPriorityGrouping+0x44>)
 800a86a:	68db      	ldr	r3, [r3, #12]
 800a86c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800a86e:	68ba      	ldr	r2, [r7, #8]
 800a870:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800a874:	4013      	ands	r3, r2
 800a876:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800a878:	68fb      	ldr	r3, [r7, #12]
 800a87a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800a87c:	68bb      	ldr	r3, [r7, #8]
 800a87e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800a880:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800a884:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800a888:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800a88a:	4a04      	ldr	r2, [pc, #16]	@ (800a89c <__NVIC_SetPriorityGrouping+0x44>)
 800a88c:	68bb      	ldr	r3, [r7, #8]
 800a88e:	60d3      	str	r3, [r2, #12]
}
 800a890:	bf00      	nop
 800a892:	3714      	adds	r7, #20
 800a894:	46bd      	mov	sp, r7
 800a896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a89a:	4770      	bx	lr
 800a89c:	e000ed00 	.word	0xe000ed00

0800a8a0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800a8a0:	b480      	push	{r7}
 800a8a2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800a8a4:	4b04      	ldr	r3, [pc, #16]	@ (800a8b8 <__NVIC_GetPriorityGrouping+0x18>)
 800a8a6:	68db      	ldr	r3, [r3, #12]
 800a8a8:	0a1b      	lsrs	r3, r3, #8
 800a8aa:	f003 0307 	and.w	r3, r3, #7
}
 800a8ae:	4618      	mov	r0, r3
 800a8b0:	46bd      	mov	sp, r7
 800a8b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8b6:	4770      	bx	lr
 800a8b8:	e000ed00 	.word	0xe000ed00

0800a8bc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800a8bc:	b480      	push	{r7}
 800a8be:	b083      	sub	sp, #12
 800a8c0:	af00      	add	r7, sp, #0
 800a8c2:	4603      	mov	r3, r0
 800a8c4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800a8c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a8ca:	2b00      	cmp	r3, #0
 800a8cc:	db0b      	blt.n	800a8e6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800a8ce:	79fb      	ldrb	r3, [r7, #7]
 800a8d0:	f003 021f 	and.w	r2, r3, #31
 800a8d4:	4907      	ldr	r1, [pc, #28]	@ (800a8f4 <__NVIC_EnableIRQ+0x38>)
 800a8d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a8da:	095b      	lsrs	r3, r3, #5
 800a8dc:	2001      	movs	r0, #1
 800a8de:	fa00 f202 	lsl.w	r2, r0, r2
 800a8e2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800a8e6:	bf00      	nop
 800a8e8:	370c      	adds	r7, #12
 800a8ea:	46bd      	mov	sp, r7
 800a8ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8f0:	4770      	bx	lr
 800a8f2:	bf00      	nop
 800a8f4:	e000e100 	.word	0xe000e100

0800a8f8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800a8f8:	b480      	push	{r7}
 800a8fa:	b083      	sub	sp, #12
 800a8fc:	af00      	add	r7, sp, #0
 800a8fe:	4603      	mov	r3, r0
 800a900:	6039      	str	r1, [r7, #0]
 800a902:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800a904:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a908:	2b00      	cmp	r3, #0
 800a90a:	db0a      	blt.n	800a922 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800a90c:	683b      	ldr	r3, [r7, #0]
 800a90e:	b2da      	uxtb	r2, r3
 800a910:	490c      	ldr	r1, [pc, #48]	@ (800a944 <__NVIC_SetPriority+0x4c>)
 800a912:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a916:	0112      	lsls	r2, r2, #4
 800a918:	b2d2      	uxtb	r2, r2
 800a91a:	440b      	add	r3, r1
 800a91c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800a920:	e00a      	b.n	800a938 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800a922:	683b      	ldr	r3, [r7, #0]
 800a924:	b2da      	uxtb	r2, r3
 800a926:	4908      	ldr	r1, [pc, #32]	@ (800a948 <__NVIC_SetPriority+0x50>)
 800a928:	79fb      	ldrb	r3, [r7, #7]
 800a92a:	f003 030f 	and.w	r3, r3, #15
 800a92e:	3b04      	subs	r3, #4
 800a930:	0112      	lsls	r2, r2, #4
 800a932:	b2d2      	uxtb	r2, r2
 800a934:	440b      	add	r3, r1
 800a936:	761a      	strb	r2, [r3, #24]
}
 800a938:	bf00      	nop
 800a93a:	370c      	adds	r7, #12
 800a93c:	46bd      	mov	sp, r7
 800a93e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a942:	4770      	bx	lr
 800a944:	e000e100 	.word	0xe000e100
 800a948:	e000ed00 	.word	0xe000ed00

0800a94c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800a94c:	b480      	push	{r7}
 800a94e:	b089      	sub	sp, #36	@ 0x24
 800a950:	af00      	add	r7, sp, #0
 800a952:	60f8      	str	r0, [r7, #12]
 800a954:	60b9      	str	r1, [r7, #8]
 800a956:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800a958:	68fb      	ldr	r3, [r7, #12]
 800a95a:	f003 0307 	and.w	r3, r3, #7
 800a95e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800a960:	69fb      	ldr	r3, [r7, #28]
 800a962:	f1c3 0307 	rsb	r3, r3, #7
 800a966:	2b04      	cmp	r3, #4
 800a968:	bf28      	it	cs
 800a96a:	2304      	movcs	r3, #4
 800a96c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800a96e:	69fb      	ldr	r3, [r7, #28]
 800a970:	3304      	adds	r3, #4
 800a972:	2b06      	cmp	r3, #6
 800a974:	d902      	bls.n	800a97c <NVIC_EncodePriority+0x30>
 800a976:	69fb      	ldr	r3, [r7, #28]
 800a978:	3b03      	subs	r3, #3
 800a97a:	e000      	b.n	800a97e <NVIC_EncodePriority+0x32>
 800a97c:	2300      	movs	r3, #0
 800a97e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800a980:	f04f 32ff 	mov.w	r2, #4294967295
 800a984:	69bb      	ldr	r3, [r7, #24]
 800a986:	fa02 f303 	lsl.w	r3, r2, r3
 800a98a:	43da      	mvns	r2, r3
 800a98c:	68bb      	ldr	r3, [r7, #8]
 800a98e:	401a      	ands	r2, r3
 800a990:	697b      	ldr	r3, [r7, #20]
 800a992:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800a994:	f04f 31ff 	mov.w	r1, #4294967295
 800a998:	697b      	ldr	r3, [r7, #20]
 800a99a:	fa01 f303 	lsl.w	r3, r1, r3
 800a99e:	43d9      	mvns	r1, r3
 800a9a0:	687b      	ldr	r3, [r7, #4]
 800a9a2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800a9a4:	4313      	orrs	r3, r2
         );
}
 800a9a6:	4618      	mov	r0, r3
 800a9a8:	3724      	adds	r7, #36	@ 0x24
 800a9aa:	46bd      	mov	sp, r7
 800a9ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9b0:	4770      	bx	lr
	...

0800a9b4 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 800a9b4:	b480      	push	{r7}
 800a9b6:	af00      	add	r7, sp, #0
  __ASM volatile ("dsb 0xF":::"memory");
 800a9b8:	f3bf 8f4f 	dsb	sy
}
 800a9bc:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 800a9be:	4b06      	ldr	r3, [pc, #24]	@ (800a9d8 <__NVIC_SystemReset+0x24>)
 800a9c0:	68db      	ldr	r3, [r3, #12]
 800a9c2:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 800a9c6:	4904      	ldr	r1, [pc, #16]	@ (800a9d8 <__NVIC_SystemReset+0x24>)
 800a9c8:	4b04      	ldr	r3, [pc, #16]	@ (800a9dc <__NVIC_SystemReset+0x28>)
 800a9ca:	4313      	orrs	r3, r2
 800a9cc:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 800a9ce:	f3bf 8f4f 	dsb	sy
}
 800a9d2:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 800a9d4:	bf00      	nop
 800a9d6:	e7fd      	b.n	800a9d4 <__NVIC_SystemReset+0x20>
 800a9d8:	e000ed00 	.word	0xe000ed00
 800a9dc:	05fa0004 	.word	0x05fa0004

0800a9e0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800a9e0:	b580      	push	{r7, lr}
 800a9e2:	b082      	sub	sp, #8
 800a9e4:	af00      	add	r7, sp, #0
 800a9e6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800a9e8:	687b      	ldr	r3, [r7, #4]
 800a9ea:	3b01      	subs	r3, #1
 800a9ec:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800a9f0:	d301      	bcc.n	800a9f6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800a9f2:	2301      	movs	r3, #1
 800a9f4:	e00f      	b.n	800aa16 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800a9f6:	4a0a      	ldr	r2, [pc, #40]	@ (800aa20 <SysTick_Config+0x40>)
 800a9f8:	687b      	ldr	r3, [r7, #4]
 800a9fa:	3b01      	subs	r3, #1
 800a9fc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800a9fe:	210f      	movs	r1, #15
 800aa00:	f04f 30ff 	mov.w	r0, #4294967295
 800aa04:	f7ff ff78 	bl	800a8f8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800aa08:	4b05      	ldr	r3, [pc, #20]	@ (800aa20 <SysTick_Config+0x40>)
 800aa0a:	2200      	movs	r2, #0
 800aa0c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800aa0e:	4b04      	ldr	r3, [pc, #16]	@ (800aa20 <SysTick_Config+0x40>)
 800aa10:	2207      	movs	r2, #7
 800aa12:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800aa14:	2300      	movs	r3, #0
}
 800aa16:	4618      	mov	r0, r3
 800aa18:	3708      	adds	r7, #8
 800aa1a:	46bd      	mov	sp, r7
 800aa1c:	bd80      	pop	{r7, pc}
 800aa1e:	bf00      	nop
 800aa20:	e000e010 	.word	0xe000e010

0800aa24 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800aa24:	b580      	push	{r7, lr}
 800aa26:	b082      	sub	sp, #8
 800aa28:	af00      	add	r7, sp, #0
 800aa2a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800aa2c:	6878      	ldr	r0, [r7, #4]
 800aa2e:	f7ff ff13 	bl	800a858 <__NVIC_SetPriorityGrouping>
}
 800aa32:	bf00      	nop
 800aa34:	3708      	adds	r7, #8
 800aa36:	46bd      	mov	sp, r7
 800aa38:	bd80      	pop	{r7, pc}

0800aa3a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800aa3a:	b580      	push	{r7, lr}
 800aa3c:	b086      	sub	sp, #24
 800aa3e:	af00      	add	r7, sp, #0
 800aa40:	4603      	mov	r3, r0
 800aa42:	60b9      	str	r1, [r7, #8]
 800aa44:	607a      	str	r2, [r7, #4]
 800aa46:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800aa48:	2300      	movs	r3, #0
 800aa4a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800aa4c:	f7ff ff28 	bl	800a8a0 <__NVIC_GetPriorityGrouping>
 800aa50:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800aa52:	687a      	ldr	r2, [r7, #4]
 800aa54:	68b9      	ldr	r1, [r7, #8]
 800aa56:	6978      	ldr	r0, [r7, #20]
 800aa58:	f7ff ff78 	bl	800a94c <NVIC_EncodePriority>
 800aa5c:	4602      	mov	r2, r0
 800aa5e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800aa62:	4611      	mov	r1, r2
 800aa64:	4618      	mov	r0, r3
 800aa66:	f7ff ff47 	bl	800a8f8 <__NVIC_SetPriority>
}
 800aa6a:	bf00      	nop
 800aa6c:	3718      	adds	r7, #24
 800aa6e:	46bd      	mov	sp, r7
 800aa70:	bd80      	pop	{r7, pc}

0800aa72 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800aa72:	b580      	push	{r7, lr}
 800aa74:	b082      	sub	sp, #8
 800aa76:	af00      	add	r7, sp, #0
 800aa78:	4603      	mov	r3, r0
 800aa7a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800aa7c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800aa80:	4618      	mov	r0, r3
 800aa82:	f7ff ff1b 	bl	800a8bc <__NVIC_EnableIRQ>
}
 800aa86:	bf00      	nop
 800aa88:	3708      	adds	r7, #8
 800aa8a:	46bd      	mov	sp, r7
 800aa8c:	bd80      	pop	{r7, pc}

0800aa8e <HAL_NVIC_SystemReset>:
/**
  * @brief  Initiate a system reset request to reset the MCU.
  * @retval None
  */
void HAL_NVIC_SystemReset(void)
{
 800aa8e:	b580      	push	{r7, lr}
 800aa90:	af00      	add	r7, sp, #0
  /* System Reset */
  NVIC_SystemReset();
 800aa92:	f7ff ff8f 	bl	800a9b4 <__NVIC_SystemReset>

0800aa96 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800aa96:	b580      	push	{r7, lr}
 800aa98:	b082      	sub	sp, #8
 800aa9a:	af00      	add	r7, sp, #0
 800aa9c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800aa9e:	6878      	ldr	r0, [r7, #4]
 800aaa0:	f7ff ff9e 	bl	800a9e0 <SysTick_Config>
 800aaa4:	4603      	mov	r3, r0
}
 800aaa6:	4618      	mov	r0, r3
 800aaa8:	3708      	adds	r7, #8
 800aaaa:	46bd      	mov	sp, r7
 800aaac:	bd80      	pop	{r7, pc}
	...

0800aab0 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 800aab0:	b580      	push	{r7, lr}
 800aab2:	b082      	sub	sp, #8
 800aab4:	af00      	add	r7, sp, #0
 800aab6:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 800aab8:	687b      	ldr	r3, [r7, #4]
 800aaba:	2b00      	cmp	r3, #0
 800aabc:	d101      	bne.n	800aac2 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 800aabe:	2301      	movs	r3, #1
 800aac0:	e054      	b.n	800ab6c <HAL_CRC_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 800aac2:	687b      	ldr	r3, [r7, #4]
 800aac4:	7f5b      	ldrb	r3, [r3, #29]
 800aac6:	b2db      	uxtb	r3, r3
 800aac8:	2b00      	cmp	r3, #0
 800aaca:	d105      	bne.n	800aad8 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 800aacc:	687b      	ldr	r3, [r7, #4]
 800aace:	2200      	movs	r2, #0
 800aad0:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 800aad2:	6878      	ldr	r0, [r7, #4]
 800aad4:	f7fa fdb2 	bl	800563c <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 800aad8:	687b      	ldr	r3, [r7, #4]
 800aada:	2202      	movs	r2, #2
 800aadc:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 800aade:	687b      	ldr	r3, [r7, #4]
 800aae0:	791b      	ldrb	r3, [r3, #4]
 800aae2:	2b00      	cmp	r3, #0
 800aae4:	d10c      	bne.n	800ab00 <HAL_CRC_Init+0x50>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 800aae6:	687b      	ldr	r3, [r7, #4]
 800aae8:	681b      	ldr	r3, [r3, #0]
 800aaea:	4a22      	ldr	r2, [pc, #136]	@ (800ab74 <HAL_CRC_Init+0xc4>)
 800aaec:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 800aaee:	687b      	ldr	r3, [r7, #4]
 800aaf0:	681b      	ldr	r3, [r3, #0]
 800aaf2:	689a      	ldr	r2, [r3, #8]
 800aaf4:	687b      	ldr	r3, [r7, #4]
 800aaf6:	681b      	ldr	r3, [r3, #0]
 800aaf8:	f022 0218 	bic.w	r2, r2, #24
 800aafc:	609a      	str	r2, [r3, #8]
 800aafe:	e00c      	b.n	800ab1a <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 800ab00:	687b      	ldr	r3, [r7, #4]
 800ab02:	6899      	ldr	r1, [r3, #8]
 800ab04:	687b      	ldr	r3, [r7, #4]
 800ab06:	68db      	ldr	r3, [r3, #12]
 800ab08:	461a      	mov	r2, r3
 800ab0a:	6878      	ldr	r0, [r7, #4]
 800ab0c:	f000 f834 	bl	800ab78 <HAL_CRCEx_Polynomial_Set>
 800ab10:	4603      	mov	r3, r0
 800ab12:	2b00      	cmp	r3, #0
 800ab14:	d001      	beq.n	800ab1a <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 800ab16:	2301      	movs	r3, #1
 800ab18:	e028      	b.n	800ab6c <HAL_CRC_Init+0xbc>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 800ab1a:	687b      	ldr	r3, [r7, #4]
 800ab1c:	795b      	ldrb	r3, [r3, #5]
 800ab1e:	2b00      	cmp	r3, #0
 800ab20:	d105      	bne.n	800ab2e <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 800ab22:	687b      	ldr	r3, [r7, #4]
 800ab24:	681b      	ldr	r3, [r3, #0]
 800ab26:	f04f 32ff 	mov.w	r2, #4294967295
 800ab2a:	611a      	str	r2, [r3, #16]
 800ab2c:	e004      	b.n	800ab38 <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 800ab2e:	687b      	ldr	r3, [r7, #4]
 800ab30:	681b      	ldr	r3, [r3, #0]
 800ab32:	687a      	ldr	r2, [r7, #4]
 800ab34:	6912      	ldr	r2, [r2, #16]
 800ab36:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 800ab38:	687b      	ldr	r3, [r7, #4]
 800ab3a:	681b      	ldr	r3, [r3, #0]
 800ab3c:	689b      	ldr	r3, [r3, #8]
 800ab3e:	f023 0160 	bic.w	r1, r3, #96	@ 0x60
 800ab42:	687b      	ldr	r3, [r7, #4]
 800ab44:	695a      	ldr	r2, [r3, #20]
 800ab46:	687b      	ldr	r3, [r7, #4]
 800ab48:	681b      	ldr	r3, [r3, #0]
 800ab4a:	430a      	orrs	r2, r1
 800ab4c:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 800ab4e:	687b      	ldr	r3, [r7, #4]
 800ab50:	681b      	ldr	r3, [r3, #0]
 800ab52:	689b      	ldr	r3, [r3, #8]
 800ab54:	f023 0180 	bic.w	r1, r3, #128	@ 0x80
 800ab58:	687b      	ldr	r3, [r7, #4]
 800ab5a:	699a      	ldr	r2, [r3, #24]
 800ab5c:	687b      	ldr	r3, [r7, #4]
 800ab5e:	681b      	ldr	r3, [r3, #0]
 800ab60:	430a      	orrs	r2, r1
 800ab62:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 800ab64:	687b      	ldr	r3, [r7, #4]
 800ab66:	2201      	movs	r2, #1
 800ab68:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 800ab6a:	2300      	movs	r3, #0
}
 800ab6c:	4618      	mov	r0, r3
 800ab6e:	3708      	adds	r7, #8
 800ab70:	46bd      	mov	sp, r7
 800ab72:	bd80      	pop	{r7, pc}
 800ab74:	04c11db7 	.word	0x04c11db7

0800ab78 <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 800ab78:	b480      	push	{r7}
 800ab7a:	b087      	sub	sp, #28
 800ab7c:	af00      	add	r7, sp, #0
 800ab7e:	60f8      	str	r0, [r7, #12]
 800ab80:	60b9      	str	r1, [r7, #8]
 800ab82:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800ab84:	2300      	movs	r3, #0
 800ab86:	75fb      	strb	r3, [r7, #23]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 800ab88:	231f      	movs	r3, #31
 800ab8a:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_CRC_POL_LENGTH(PolyLength));

  /* Ensure that the generating polynomial is odd */
  if ((Pol & (uint32_t)(0x1U)) ==  0U)
 800ab8c:	68bb      	ldr	r3, [r7, #8]
 800ab8e:	f003 0301 	and.w	r3, r3, #1
 800ab92:	2b00      	cmp	r3, #0
 800ab94:	d102      	bne.n	800ab9c <HAL_CRCEx_Polynomial_Set+0x24>
  {
    status =  HAL_ERROR;
 800ab96:	2301      	movs	r3, #1
 800ab98:	75fb      	strb	r3, [r7, #23]
 800ab9a:	e063      	b.n	800ac64 <HAL_CRCEx_Polynomial_Set+0xec>
     * definition. HAL_ERROR is reported if Pol degree is
     * larger than that indicated by PolyLength.
     * Look for MSB position: msb will contain the degree of
     *  the second to the largest polynomial member. E.g., for
     *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
    while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 800ab9c:	bf00      	nop
 800ab9e:	693b      	ldr	r3, [r7, #16]
 800aba0:	1e5a      	subs	r2, r3, #1
 800aba2:	613a      	str	r2, [r7, #16]
 800aba4:	2b00      	cmp	r3, #0
 800aba6:	d009      	beq.n	800abbc <HAL_CRCEx_Polynomial_Set+0x44>
 800aba8:	693b      	ldr	r3, [r7, #16]
 800abaa:	f003 031f 	and.w	r3, r3, #31
 800abae:	68ba      	ldr	r2, [r7, #8]
 800abb0:	fa22 f303 	lsr.w	r3, r2, r3
 800abb4:	f003 0301 	and.w	r3, r3, #1
 800abb8:	2b00      	cmp	r3, #0
 800abba:	d0f0      	beq.n	800ab9e <HAL_CRCEx_Polynomial_Set+0x26>
    {
    }

    switch (PolyLength)
 800abbc:	687b      	ldr	r3, [r7, #4]
 800abbe:	2b18      	cmp	r3, #24
 800abc0:	d846      	bhi.n	800ac50 <HAL_CRCEx_Polynomial_Set+0xd8>
 800abc2:	a201      	add	r2, pc, #4	@ (adr r2, 800abc8 <HAL_CRCEx_Polynomial_Set+0x50>)
 800abc4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800abc8:	0800ac57 	.word	0x0800ac57
 800abcc:	0800ac51 	.word	0x0800ac51
 800abd0:	0800ac51 	.word	0x0800ac51
 800abd4:	0800ac51 	.word	0x0800ac51
 800abd8:	0800ac51 	.word	0x0800ac51
 800abdc:	0800ac51 	.word	0x0800ac51
 800abe0:	0800ac51 	.word	0x0800ac51
 800abe4:	0800ac51 	.word	0x0800ac51
 800abe8:	0800ac45 	.word	0x0800ac45
 800abec:	0800ac51 	.word	0x0800ac51
 800abf0:	0800ac51 	.word	0x0800ac51
 800abf4:	0800ac51 	.word	0x0800ac51
 800abf8:	0800ac51 	.word	0x0800ac51
 800abfc:	0800ac51 	.word	0x0800ac51
 800ac00:	0800ac51 	.word	0x0800ac51
 800ac04:	0800ac51 	.word	0x0800ac51
 800ac08:	0800ac39 	.word	0x0800ac39
 800ac0c:	0800ac51 	.word	0x0800ac51
 800ac10:	0800ac51 	.word	0x0800ac51
 800ac14:	0800ac51 	.word	0x0800ac51
 800ac18:	0800ac51 	.word	0x0800ac51
 800ac1c:	0800ac51 	.word	0x0800ac51
 800ac20:	0800ac51 	.word	0x0800ac51
 800ac24:	0800ac51 	.word	0x0800ac51
 800ac28:	0800ac2d 	.word	0x0800ac2d
    {

      case CRC_POLYLENGTH_7B:
        if (msb >= HAL_CRC_LENGTH_7B)
 800ac2c:	693b      	ldr	r3, [r7, #16]
 800ac2e:	2b06      	cmp	r3, #6
 800ac30:	d913      	bls.n	800ac5a <HAL_CRCEx_Polynomial_Set+0xe2>
        {
          status =   HAL_ERROR;
 800ac32:	2301      	movs	r3, #1
 800ac34:	75fb      	strb	r3, [r7, #23]
        }
        break;
 800ac36:	e010      	b.n	800ac5a <HAL_CRCEx_Polynomial_Set+0xe2>
      case CRC_POLYLENGTH_8B:
        if (msb >= HAL_CRC_LENGTH_8B)
 800ac38:	693b      	ldr	r3, [r7, #16]
 800ac3a:	2b07      	cmp	r3, #7
 800ac3c:	d90f      	bls.n	800ac5e <HAL_CRCEx_Polynomial_Set+0xe6>
        {
          status =   HAL_ERROR;
 800ac3e:	2301      	movs	r3, #1
 800ac40:	75fb      	strb	r3, [r7, #23]
        }
        break;
 800ac42:	e00c      	b.n	800ac5e <HAL_CRCEx_Polynomial_Set+0xe6>
      case CRC_POLYLENGTH_16B:
        if (msb >= HAL_CRC_LENGTH_16B)
 800ac44:	693b      	ldr	r3, [r7, #16]
 800ac46:	2b0f      	cmp	r3, #15
 800ac48:	d90b      	bls.n	800ac62 <HAL_CRCEx_Polynomial_Set+0xea>
        {
          status =   HAL_ERROR;
 800ac4a:	2301      	movs	r3, #1
 800ac4c:	75fb      	strb	r3, [r7, #23]
        }
        break;
 800ac4e:	e008      	b.n	800ac62 <HAL_CRCEx_Polynomial_Set+0xea>

      case CRC_POLYLENGTH_32B:
        /* no polynomial definition vs. polynomial length issue possible */
        break;
      default:
        status =  HAL_ERROR;
 800ac50:	2301      	movs	r3, #1
 800ac52:	75fb      	strb	r3, [r7, #23]
        break;
 800ac54:	e006      	b.n	800ac64 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 800ac56:	bf00      	nop
 800ac58:	e004      	b.n	800ac64 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 800ac5a:	bf00      	nop
 800ac5c:	e002      	b.n	800ac64 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 800ac5e:	bf00      	nop
 800ac60:	e000      	b.n	800ac64 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 800ac62:	bf00      	nop
    }
  }
  if (status == HAL_OK)
 800ac64:	7dfb      	ldrb	r3, [r7, #23]
 800ac66:	2b00      	cmp	r3, #0
 800ac68:	d10d      	bne.n	800ac86 <HAL_CRCEx_Polynomial_Set+0x10e>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 800ac6a:	68fb      	ldr	r3, [r7, #12]
 800ac6c:	681b      	ldr	r3, [r3, #0]
 800ac6e:	68ba      	ldr	r2, [r7, #8]
 800ac70:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 800ac72:	68fb      	ldr	r3, [r7, #12]
 800ac74:	681b      	ldr	r3, [r3, #0]
 800ac76:	689b      	ldr	r3, [r3, #8]
 800ac78:	f023 0118 	bic.w	r1, r3, #24
 800ac7c:	68fb      	ldr	r3, [r7, #12]
 800ac7e:	681b      	ldr	r3, [r3, #0]
 800ac80:	687a      	ldr	r2, [r7, #4]
 800ac82:	430a      	orrs	r2, r1
 800ac84:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 800ac86:	7dfb      	ldrb	r3, [r7, #23]
}
 800ac88:	4618      	mov	r0, r3
 800ac8a:	371c      	adds	r7, #28
 800ac8c:	46bd      	mov	sp, r7
 800ac8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac92:	4770      	bx	lr

0800ac94 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800ac94:	b480      	push	{r7}
 800ac96:	b085      	sub	sp, #20
 800ac98:	af00      	add	r7, sp, #0
 800ac9a:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 800ac9c:	687b      	ldr	r3, [r7, #4]
 800ac9e:	2b00      	cmp	r3, #0
 800aca0:	d101      	bne.n	800aca6 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 800aca2:	2301      	movs	r3, #1
 800aca4:	e098      	b.n	800add8 <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 800aca6:	687b      	ldr	r3, [r7, #4]
 800aca8:	681b      	ldr	r3, [r3, #0]
 800acaa:	461a      	mov	r2, r3
 800acac:	4b4d      	ldr	r3, [pc, #308]	@ (800ade4 <HAL_DMA_Init+0x150>)
 800acae:	429a      	cmp	r2, r3
 800acb0:	d80f      	bhi.n	800acd2 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 800acb2:	687b      	ldr	r3, [r7, #4]
 800acb4:	681b      	ldr	r3, [r3, #0]
 800acb6:	461a      	mov	r2, r3
 800acb8:	4b4b      	ldr	r3, [pc, #300]	@ (800ade8 <HAL_DMA_Init+0x154>)
 800acba:	4413      	add	r3, r2
 800acbc:	4a4b      	ldr	r2, [pc, #300]	@ (800adec <HAL_DMA_Init+0x158>)
 800acbe:	fba2 2303 	umull	r2, r3, r2, r3
 800acc2:	091b      	lsrs	r3, r3, #4
 800acc4:	009a      	lsls	r2, r3, #2
 800acc6:	687b      	ldr	r3, [r7, #4]
 800acc8:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 800acca:	687b      	ldr	r3, [r7, #4]
 800accc:	4a48      	ldr	r2, [pc, #288]	@ (800adf0 <HAL_DMA_Init+0x15c>)
 800acce:	641a      	str	r2, [r3, #64]	@ 0x40
 800acd0:	e00e      	b.n	800acf0 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 800acd2:	687b      	ldr	r3, [r7, #4]
 800acd4:	681b      	ldr	r3, [r3, #0]
 800acd6:	461a      	mov	r2, r3
 800acd8:	4b46      	ldr	r3, [pc, #280]	@ (800adf4 <HAL_DMA_Init+0x160>)
 800acda:	4413      	add	r3, r2
 800acdc:	4a43      	ldr	r2, [pc, #268]	@ (800adec <HAL_DMA_Init+0x158>)
 800acde:	fba2 2303 	umull	r2, r3, r2, r3
 800ace2:	091b      	lsrs	r3, r3, #4
 800ace4:	009a      	lsls	r2, r3, #2
 800ace6:	687b      	ldr	r3, [r7, #4]
 800ace8:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 800acea:	687b      	ldr	r3, [r7, #4]
 800acec:	4a42      	ldr	r2, [pc, #264]	@ (800adf8 <HAL_DMA_Init+0x164>)
 800acee:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800acf0:	687b      	ldr	r3, [r7, #4]
 800acf2:	2202      	movs	r2, #2
 800acf4:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 800acf8:	687b      	ldr	r3, [r7, #4]
 800acfa:	681b      	ldr	r3, [r3, #0]
 800acfc:	681b      	ldr	r3, [r3, #0]
 800acfe:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 800ad00:	68fb      	ldr	r3, [r7, #12]
 800ad02:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 800ad06:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800ad0a:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 800ad0c:	687b      	ldr	r3, [r7, #4]
 800ad0e:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800ad10:	687b      	ldr	r3, [r7, #4]
 800ad12:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 800ad14:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800ad16:	687b      	ldr	r3, [r7, #4]
 800ad18:	691b      	ldr	r3, [r3, #16]
 800ad1a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800ad1c:	687b      	ldr	r3, [r7, #4]
 800ad1e:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800ad20:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800ad22:	687b      	ldr	r3, [r7, #4]
 800ad24:	699b      	ldr	r3, [r3, #24]
 800ad26:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800ad28:	687b      	ldr	r3, [r7, #4]
 800ad2a:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800ad2c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800ad2e:	687b      	ldr	r3, [r7, #4]
 800ad30:	6a1b      	ldr	r3, [r3, #32]
 800ad32:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 800ad34:	68fa      	ldr	r2, [r7, #12]
 800ad36:	4313      	orrs	r3, r2
 800ad38:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800ad3a:	687b      	ldr	r3, [r7, #4]
 800ad3c:	681b      	ldr	r3, [r3, #0]
 800ad3e:	68fa      	ldr	r2, [r7, #12]
 800ad40:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if (hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 800ad42:	687b      	ldr	r3, [r7, #4]
 800ad44:	689b      	ldr	r3, [r3, #8]
 800ad46:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800ad4a:	d039      	beq.n	800adc0 <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 800ad4c:	687b      	ldr	r3, [r7, #4]
 800ad4e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ad50:	4a27      	ldr	r2, [pc, #156]	@ (800adf0 <HAL_DMA_Init+0x15c>)
 800ad52:	4293      	cmp	r3, r2
 800ad54:	d11a      	bne.n	800ad8c <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 800ad56:	4b29      	ldr	r3, [pc, #164]	@ (800adfc <HAL_DMA_Init+0x168>)
 800ad58:	681a      	ldr	r2, [r3, #0]
 800ad5a:	687b      	ldr	r3, [r7, #4]
 800ad5c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800ad5e:	f003 031c 	and.w	r3, r3, #28
 800ad62:	210f      	movs	r1, #15
 800ad64:	fa01 f303 	lsl.w	r3, r1, r3
 800ad68:	43db      	mvns	r3, r3
 800ad6a:	4924      	ldr	r1, [pc, #144]	@ (800adfc <HAL_DMA_Init+0x168>)
 800ad6c:	4013      	ands	r3, r2
 800ad6e:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 800ad70:	4b22      	ldr	r3, [pc, #136]	@ (800adfc <HAL_DMA_Init+0x168>)
 800ad72:	681a      	ldr	r2, [r3, #0]
 800ad74:	687b      	ldr	r3, [r7, #4]
 800ad76:	6859      	ldr	r1, [r3, #4]
 800ad78:	687b      	ldr	r3, [r7, #4]
 800ad7a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800ad7c:	f003 031c 	and.w	r3, r3, #28
 800ad80:	fa01 f303 	lsl.w	r3, r1, r3
 800ad84:	491d      	ldr	r1, [pc, #116]	@ (800adfc <HAL_DMA_Init+0x168>)
 800ad86:	4313      	orrs	r3, r2
 800ad88:	600b      	str	r3, [r1, #0]
 800ad8a:	e019      	b.n	800adc0 <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 800ad8c:	4b1c      	ldr	r3, [pc, #112]	@ (800ae00 <HAL_DMA_Init+0x16c>)
 800ad8e:	681a      	ldr	r2, [r3, #0]
 800ad90:	687b      	ldr	r3, [r7, #4]
 800ad92:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800ad94:	f003 031c 	and.w	r3, r3, #28
 800ad98:	210f      	movs	r1, #15
 800ad9a:	fa01 f303 	lsl.w	r3, r1, r3
 800ad9e:	43db      	mvns	r3, r3
 800ada0:	4917      	ldr	r1, [pc, #92]	@ (800ae00 <HAL_DMA_Init+0x16c>)
 800ada2:	4013      	ands	r3, r2
 800ada4:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 800ada6:	4b16      	ldr	r3, [pc, #88]	@ (800ae00 <HAL_DMA_Init+0x16c>)
 800ada8:	681a      	ldr	r2, [r3, #0]
 800adaa:	687b      	ldr	r3, [r7, #4]
 800adac:	6859      	ldr	r1, [r3, #4]
 800adae:	687b      	ldr	r3, [r7, #4]
 800adb0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800adb2:	f003 031c 	and.w	r3, r3, #28
 800adb6:	fa01 f303 	lsl.w	r3, r1, r3
 800adba:	4911      	ldr	r1, [pc, #68]	@ (800ae00 <HAL_DMA_Init+0x16c>)
 800adbc:	4313      	orrs	r3, r2
 800adbe:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
  /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
  /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800adc0:	687b      	ldr	r3, [r7, #4]
 800adc2:	2200      	movs	r2, #0
 800adc4:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 800adc6:	687b      	ldr	r3, [r7, #4]
 800adc8:	2201      	movs	r2, #1
 800adca:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 800adce:	687b      	ldr	r3, [r7, #4]
 800add0:	2200      	movs	r2, #0
 800add2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 800add6:	2300      	movs	r3, #0
}
 800add8:	4618      	mov	r0, r3
 800adda:	3714      	adds	r7, #20
 800addc:	46bd      	mov	sp, r7
 800adde:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ade2:	4770      	bx	lr
 800ade4:	40020407 	.word	0x40020407
 800ade8:	bffdfff8 	.word	0xbffdfff8
 800adec:	cccccccd 	.word	0xcccccccd
 800adf0:	40020000 	.word	0x40020000
 800adf4:	bffdfbf8 	.word	0xbffdfbf8
 800adf8:	40020400 	.word	0x40020400
 800adfc:	400200a8 	.word	0x400200a8
 800ae00:	400204a8 	.word	0x400204a8

0800ae04 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800ae04:	b580      	push	{r7, lr}
 800ae06:	b086      	sub	sp, #24
 800ae08:	af00      	add	r7, sp, #0
 800ae0a:	60f8      	str	r0, [r7, #12]
 800ae0c:	60b9      	str	r1, [r7, #8]
 800ae0e:	607a      	str	r2, [r7, #4]
 800ae10:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800ae12:	2300      	movs	r3, #0
 800ae14:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800ae16:	68fb      	ldr	r3, [r7, #12]
 800ae18:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800ae1c:	2b01      	cmp	r3, #1
 800ae1e:	d101      	bne.n	800ae24 <HAL_DMA_Start_IT+0x20>
 800ae20:	2302      	movs	r3, #2
 800ae22:	e04b      	b.n	800aebc <HAL_DMA_Start_IT+0xb8>
 800ae24:	68fb      	ldr	r3, [r7, #12]
 800ae26:	2201      	movs	r2, #1
 800ae28:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 800ae2c:	68fb      	ldr	r3, [r7, #12]
 800ae2e:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 800ae32:	b2db      	uxtb	r3, r3
 800ae34:	2b01      	cmp	r3, #1
 800ae36:	d13a      	bne.n	800aeae <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800ae38:	68fb      	ldr	r3, [r7, #12]
 800ae3a:	2202      	movs	r2, #2
 800ae3c:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800ae40:	68fb      	ldr	r3, [r7, #12]
 800ae42:	2200      	movs	r2, #0
 800ae44:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800ae46:	68fb      	ldr	r3, [r7, #12]
 800ae48:	681b      	ldr	r3, [r3, #0]
 800ae4a:	681a      	ldr	r2, [r3, #0]
 800ae4c:	68fb      	ldr	r3, [r7, #12]
 800ae4e:	681b      	ldr	r3, [r3, #0]
 800ae50:	f022 0201 	bic.w	r2, r2, #1
 800ae54:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800ae56:	683b      	ldr	r3, [r7, #0]
 800ae58:	687a      	ldr	r2, [r7, #4]
 800ae5a:	68b9      	ldr	r1, [r7, #8]
 800ae5c:	68f8      	ldr	r0, [r7, #12]
 800ae5e:	f000 f92a 	bl	800b0b6 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 800ae62:	68fb      	ldr	r3, [r7, #12]
 800ae64:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ae66:	2b00      	cmp	r3, #0
 800ae68:	d008      	beq.n	800ae7c <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800ae6a:	68fb      	ldr	r3, [r7, #12]
 800ae6c:	681b      	ldr	r3, [r3, #0]
 800ae6e:	681a      	ldr	r2, [r3, #0]
 800ae70:	68fb      	ldr	r3, [r7, #12]
 800ae72:	681b      	ldr	r3, [r3, #0]
 800ae74:	f042 020e 	orr.w	r2, r2, #14
 800ae78:	601a      	str	r2, [r3, #0]
 800ae7a:	e00f      	b.n	800ae9c <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800ae7c:	68fb      	ldr	r3, [r7, #12]
 800ae7e:	681b      	ldr	r3, [r3, #0]
 800ae80:	681a      	ldr	r2, [r3, #0]
 800ae82:	68fb      	ldr	r3, [r7, #12]
 800ae84:	681b      	ldr	r3, [r3, #0]
 800ae86:	f022 0204 	bic.w	r2, r2, #4
 800ae8a:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 800ae8c:	68fb      	ldr	r3, [r7, #12]
 800ae8e:	681b      	ldr	r3, [r3, #0]
 800ae90:	681a      	ldr	r2, [r3, #0]
 800ae92:	68fb      	ldr	r3, [r7, #12]
 800ae94:	681b      	ldr	r3, [r3, #0]
 800ae96:	f042 020a 	orr.w	r2, r2, #10
 800ae9a:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800ae9c:	68fb      	ldr	r3, [r7, #12]
 800ae9e:	681b      	ldr	r3, [r3, #0]
 800aea0:	681a      	ldr	r2, [r3, #0]
 800aea2:	68fb      	ldr	r3, [r7, #12]
 800aea4:	681b      	ldr	r3, [r3, #0]
 800aea6:	f042 0201 	orr.w	r2, r2, #1
 800aeaa:	601a      	str	r2, [r3, #0]
 800aeac:	e005      	b.n	800aeba <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800aeae:	68fb      	ldr	r3, [r7, #12]
 800aeb0:	2200      	movs	r2, #0
 800aeb2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 800aeb6:	2302      	movs	r3, #2
 800aeb8:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 800aeba:	7dfb      	ldrb	r3, [r7, #23]
}
 800aebc:	4618      	mov	r0, r3
 800aebe:	3718      	adds	r7, #24
 800aec0:	46bd      	mov	sp, r7
 800aec2:	bd80      	pop	{r7, pc}

0800aec4 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800aec4:	b480      	push	{r7}
 800aec6:	b085      	sub	sp, #20
 800aec8:	af00      	add	r7, sp, #0
 800aeca:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800aecc:	2300      	movs	r3, #0
 800aece:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 800aed0:	687b      	ldr	r3, [r7, #4]
 800aed2:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 800aed6:	b2db      	uxtb	r3, r3
 800aed8:	2b02      	cmp	r3, #2
 800aeda:	d008      	beq.n	800aeee <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800aedc:	687b      	ldr	r3, [r7, #4]
 800aede:	2204      	movs	r2, #4
 800aee0:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800aee2:	687b      	ldr	r3, [r7, #4]
 800aee4:	2200      	movs	r2, #0
 800aee6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 800aeea:	2301      	movs	r3, #1
 800aeec:	e022      	b.n	800af34 <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800aeee:	687b      	ldr	r3, [r7, #4]
 800aef0:	681b      	ldr	r3, [r3, #0]
 800aef2:	681a      	ldr	r2, [r3, #0]
 800aef4:	687b      	ldr	r3, [r7, #4]
 800aef6:	681b      	ldr	r3, [r3, #0]
 800aef8:	f022 020e 	bic.w	r2, r2, #14
 800aefc:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800aefe:	687b      	ldr	r3, [r7, #4]
 800af00:	681b      	ldr	r3, [r3, #0]
 800af02:	681a      	ldr	r2, [r3, #0]
 800af04:	687b      	ldr	r3, [r7, #4]
 800af06:	681b      	ldr	r3, [r3, #0]
 800af08:	f022 0201 	bic.w	r2, r2, #1
 800af0c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800af0e:	687b      	ldr	r3, [r7, #4]
 800af10:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800af12:	f003 021c 	and.w	r2, r3, #28
 800af16:	687b      	ldr	r3, [r7, #4]
 800af18:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800af1a:	2101      	movs	r1, #1
 800af1c:	fa01 f202 	lsl.w	r2, r1, r2
 800af20:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800af22:	687b      	ldr	r3, [r7, #4]
 800af24:	2201      	movs	r2, #1
 800af26:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800af2a:	687b      	ldr	r3, [r7, #4]
 800af2c:	2200      	movs	r2, #0
 800af2e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return status;
 800af32:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 800af34:	4618      	mov	r0, r3
 800af36:	3714      	adds	r7, #20
 800af38:	46bd      	mov	sp, r7
 800af3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af3e:	4770      	bx	lr

0800af40 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800af40:	b580      	push	{r7, lr}
 800af42:	b084      	sub	sp, #16
 800af44:	af00      	add	r7, sp, #0
 800af46:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800af48:	687b      	ldr	r3, [r7, #4]
 800af4a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800af4c:	681b      	ldr	r3, [r3, #0]
 800af4e:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800af50:	687b      	ldr	r3, [r7, #4]
 800af52:	681b      	ldr	r3, [r3, #0]
 800af54:	681b      	ldr	r3, [r3, #0]
 800af56:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 800af58:	687b      	ldr	r3, [r7, #4]
 800af5a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800af5c:	f003 031c 	and.w	r3, r3, #28
 800af60:	2204      	movs	r2, #4
 800af62:	409a      	lsls	r2, r3
 800af64:	68fb      	ldr	r3, [r7, #12]
 800af66:	4013      	ands	r3, r2
 800af68:	2b00      	cmp	r3, #0
 800af6a:	d026      	beq.n	800afba <HAL_DMA_IRQHandler+0x7a>
 800af6c:	68bb      	ldr	r3, [r7, #8]
 800af6e:	f003 0304 	and.w	r3, r3, #4
 800af72:	2b00      	cmp	r3, #0
 800af74:	d021      	beq.n	800afba <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800af76:	687b      	ldr	r3, [r7, #4]
 800af78:	681b      	ldr	r3, [r3, #0]
 800af7a:	681b      	ldr	r3, [r3, #0]
 800af7c:	f003 0320 	and.w	r3, r3, #32
 800af80:	2b00      	cmp	r3, #0
 800af82:	d107      	bne.n	800af94 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800af84:	687b      	ldr	r3, [r7, #4]
 800af86:	681b      	ldr	r3, [r3, #0]
 800af88:	681a      	ldr	r2, [r3, #0]
 800af8a:	687b      	ldr	r3, [r7, #4]
 800af8c:	681b      	ldr	r3, [r3, #0]
 800af8e:	f022 0204 	bic.w	r2, r2, #4
 800af92:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 800af94:	687b      	ldr	r3, [r7, #4]
 800af96:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800af98:	f003 021c 	and.w	r2, r3, #28
 800af9c:	687b      	ldr	r3, [r7, #4]
 800af9e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800afa0:	2104      	movs	r1, #4
 800afa2:	fa01 f202 	lsl.w	r2, r1, r2
 800afa6:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 800afa8:	687b      	ldr	r3, [r7, #4]
 800afaa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800afac:	2b00      	cmp	r3, #0
 800afae:	d071      	beq.n	800b094 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 800afb0:	687b      	ldr	r3, [r7, #4]
 800afb2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800afb4:	6878      	ldr	r0, [r7, #4]
 800afb6:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 800afb8:	e06c      	b.n	800b094 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 800afba:	687b      	ldr	r3, [r7, #4]
 800afbc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800afbe:	f003 031c 	and.w	r3, r3, #28
 800afc2:	2202      	movs	r2, #2
 800afc4:	409a      	lsls	r2, r3
 800afc6:	68fb      	ldr	r3, [r7, #12]
 800afc8:	4013      	ands	r3, r2
 800afca:	2b00      	cmp	r3, #0
 800afcc:	d02e      	beq.n	800b02c <HAL_DMA_IRQHandler+0xec>
 800afce:	68bb      	ldr	r3, [r7, #8]
 800afd0:	f003 0302 	and.w	r3, r3, #2
 800afd4:	2b00      	cmp	r3, #0
 800afd6:	d029      	beq.n	800b02c <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800afd8:	687b      	ldr	r3, [r7, #4]
 800afda:	681b      	ldr	r3, [r3, #0]
 800afdc:	681b      	ldr	r3, [r3, #0]
 800afde:	f003 0320 	and.w	r3, r3, #32
 800afe2:	2b00      	cmp	r3, #0
 800afe4:	d10b      	bne.n	800affe <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800afe6:	687b      	ldr	r3, [r7, #4]
 800afe8:	681b      	ldr	r3, [r3, #0]
 800afea:	681a      	ldr	r2, [r3, #0]
 800afec:	687b      	ldr	r3, [r7, #4]
 800afee:	681b      	ldr	r3, [r3, #0]
 800aff0:	f022 020a 	bic.w	r2, r2, #10
 800aff4:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800aff6:	687b      	ldr	r3, [r7, #4]
 800aff8:	2201      	movs	r2, #1
 800affa:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 800affe:	687b      	ldr	r3, [r7, #4]
 800b000:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b002:	f003 021c 	and.w	r2, r3, #28
 800b006:	687b      	ldr	r3, [r7, #4]
 800b008:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b00a:	2102      	movs	r1, #2
 800b00c:	fa01 f202 	lsl.w	r2, r1, r2
 800b010:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800b012:	687b      	ldr	r3, [r7, #4]
 800b014:	2200      	movs	r2, #0
 800b016:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 800b01a:	687b      	ldr	r3, [r7, #4]
 800b01c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b01e:	2b00      	cmp	r3, #0
 800b020:	d038      	beq.n	800b094 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 800b022:	687b      	ldr	r3, [r7, #4]
 800b024:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b026:	6878      	ldr	r0, [r7, #4]
 800b028:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 800b02a:	e033      	b.n	800b094 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 800b02c:	687b      	ldr	r3, [r7, #4]
 800b02e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b030:	f003 031c 	and.w	r3, r3, #28
 800b034:	2208      	movs	r2, #8
 800b036:	409a      	lsls	r2, r3
 800b038:	68fb      	ldr	r3, [r7, #12]
 800b03a:	4013      	ands	r3, r2
 800b03c:	2b00      	cmp	r3, #0
 800b03e:	d02a      	beq.n	800b096 <HAL_DMA_IRQHandler+0x156>
 800b040:	68bb      	ldr	r3, [r7, #8]
 800b042:	f003 0308 	and.w	r3, r3, #8
 800b046:	2b00      	cmp	r3, #0
 800b048:	d025      	beq.n	800b096 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800b04a:	687b      	ldr	r3, [r7, #4]
 800b04c:	681b      	ldr	r3, [r3, #0]
 800b04e:	681a      	ldr	r2, [r3, #0]
 800b050:	687b      	ldr	r3, [r7, #4]
 800b052:	681b      	ldr	r3, [r3, #0]
 800b054:	f022 020e 	bic.w	r2, r2, #14
 800b058:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800b05a:	687b      	ldr	r3, [r7, #4]
 800b05c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b05e:	f003 021c 	and.w	r2, r3, #28
 800b062:	687b      	ldr	r3, [r7, #4]
 800b064:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b066:	2101      	movs	r1, #1
 800b068:	fa01 f202 	lsl.w	r2, r1, r2
 800b06c:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800b06e:	687b      	ldr	r3, [r7, #4]
 800b070:	2201      	movs	r2, #1
 800b072:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800b074:	687b      	ldr	r3, [r7, #4]
 800b076:	2201      	movs	r2, #1
 800b078:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800b07c:	687b      	ldr	r3, [r7, #4]
 800b07e:	2200      	movs	r2, #0
 800b080:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 800b084:	687b      	ldr	r3, [r7, #4]
 800b086:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b088:	2b00      	cmp	r3, #0
 800b08a:	d004      	beq.n	800b096 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800b08c:	687b      	ldr	r3, [r7, #4]
 800b08e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b090:	6878      	ldr	r0, [r7, #4]
 800b092:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 800b094:	bf00      	nop
 800b096:	bf00      	nop
}
 800b098:	3710      	adds	r7, #16
 800b09a:	46bd      	mov	sp, r7
 800b09c:	bd80      	pop	{r7, pc}

0800b09e <HAL_DMA_GetError>:
  * @param  hdma : pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 800b09e:	b480      	push	{r7}
 800b0a0:	b083      	sub	sp, #12
 800b0a2:	af00      	add	r7, sp, #0
 800b0a4:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 800b0a6:	687b      	ldr	r3, [r7, #4]
 800b0a8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
}
 800b0aa:	4618      	mov	r0, r3
 800b0ac:	370c      	adds	r7, #12
 800b0ae:	46bd      	mov	sp, r7
 800b0b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0b4:	4770      	bx	lr

0800b0b6 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800b0b6:	b480      	push	{r7}
 800b0b8:	b085      	sub	sp, #20
 800b0ba:	af00      	add	r7, sp, #0
 800b0bc:	60f8      	str	r0, [r7, #12]
 800b0be:	60b9      	str	r1, [r7, #8]
 800b0c0:	607a      	str	r2, [r7, #4]
 800b0c2:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800b0c4:	68fb      	ldr	r3, [r7, #12]
 800b0c6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b0c8:	f003 021c 	and.w	r2, r3, #28
 800b0cc:	68fb      	ldr	r3, [r7, #12]
 800b0ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b0d0:	2101      	movs	r1, #1
 800b0d2:	fa01 f202 	lsl.w	r2, r1, r2
 800b0d6:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800b0d8:	68fb      	ldr	r3, [r7, #12]
 800b0da:	681b      	ldr	r3, [r3, #0]
 800b0dc:	683a      	ldr	r2, [r7, #0]
 800b0de:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800b0e0:	68fb      	ldr	r3, [r7, #12]
 800b0e2:	689b      	ldr	r3, [r3, #8]
 800b0e4:	2b10      	cmp	r3, #16
 800b0e6:	d108      	bne.n	800b0fa <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800b0e8:	68fb      	ldr	r3, [r7, #12]
 800b0ea:	681b      	ldr	r3, [r3, #0]
 800b0ec:	687a      	ldr	r2, [r7, #4]
 800b0ee:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800b0f0:	68fb      	ldr	r3, [r7, #12]
 800b0f2:	681b      	ldr	r3, [r3, #0]
 800b0f4:	68ba      	ldr	r2, [r7, #8]
 800b0f6:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800b0f8:	e007      	b.n	800b10a <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 800b0fa:	68fb      	ldr	r3, [r7, #12]
 800b0fc:	681b      	ldr	r3, [r3, #0]
 800b0fe:	68ba      	ldr	r2, [r7, #8]
 800b100:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 800b102:	68fb      	ldr	r3, [r7, #12]
 800b104:	681b      	ldr	r3, [r3, #0]
 800b106:	687a      	ldr	r2, [r7, #4]
 800b108:	60da      	str	r2, [r3, #12]
}
 800b10a:	bf00      	nop
 800b10c:	3714      	adds	r7, #20
 800b10e:	46bd      	mov	sp, r7
 800b110:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b114:	4770      	bx	lr
	...

0800b118 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800b118:	b480      	push	{r7}
 800b11a:	b087      	sub	sp, #28
 800b11c:	af00      	add	r7, sp, #0
 800b11e:	6078      	str	r0, [r7, #4]
 800b120:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800b122:	2300      	movs	r3, #0
 800b124:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800b126:	e17f      	b.n	800b428 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800b128:	683b      	ldr	r3, [r7, #0]
 800b12a:	681a      	ldr	r2, [r3, #0]
 800b12c:	2101      	movs	r1, #1
 800b12e:	697b      	ldr	r3, [r7, #20]
 800b130:	fa01 f303 	lsl.w	r3, r1, r3
 800b134:	4013      	ands	r3, r2
 800b136:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800b138:	68fb      	ldr	r3, [r7, #12]
 800b13a:	2b00      	cmp	r3, #0
 800b13c:	f000 8171 	beq.w	800b422 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800b140:	683b      	ldr	r3, [r7, #0]
 800b142:	685b      	ldr	r3, [r3, #4]
 800b144:	f003 0303 	and.w	r3, r3, #3
 800b148:	2b01      	cmp	r3, #1
 800b14a:	d005      	beq.n	800b158 <HAL_GPIO_Init+0x40>
 800b14c:	683b      	ldr	r3, [r7, #0]
 800b14e:	685b      	ldr	r3, [r3, #4]
 800b150:	f003 0303 	and.w	r3, r3, #3
 800b154:	2b02      	cmp	r3, #2
 800b156:	d130      	bne.n	800b1ba <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800b158:	687b      	ldr	r3, [r7, #4]
 800b15a:	689b      	ldr	r3, [r3, #8]
 800b15c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800b15e:	697b      	ldr	r3, [r7, #20]
 800b160:	005b      	lsls	r3, r3, #1
 800b162:	2203      	movs	r2, #3
 800b164:	fa02 f303 	lsl.w	r3, r2, r3
 800b168:	43db      	mvns	r3, r3
 800b16a:	693a      	ldr	r2, [r7, #16]
 800b16c:	4013      	ands	r3, r2
 800b16e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800b170:	683b      	ldr	r3, [r7, #0]
 800b172:	68da      	ldr	r2, [r3, #12]
 800b174:	697b      	ldr	r3, [r7, #20]
 800b176:	005b      	lsls	r3, r3, #1
 800b178:	fa02 f303 	lsl.w	r3, r2, r3
 800b17c:	693a      	ldr	r2, [r7, #16]
 800b17e:	4313      	orrs	r3, r2
 800b180:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800b182:	687b      	ldr	r3, [r7, #4]
 800b184:	693a      	ldr	r2, [r7, #16]
 800b186:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800b188:	687b      	ldr	r3, [r7, #4]
 800b18a:	685b      	ldr	r3, [r3, #4]
 800b18c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800b18e:	2201      	movs	r2, #1
 800b190:	697b      	ldr	r3, [r7, #20]
 800b192:	fa02 f303 	lsl.w	r3, r2, r3
 800b196:	43db      	mvns	r3, r3
 800b198:	693a      	ldr	r2, [r7, #16]
 800b19a:	4013      	ands	r3, r2
 800b19c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800b19e:	683b      	ldr	r3, [r7, #0]
 800b1a0:	685b      	ldr	r3, [r3, #4]
 800b1a2:	091b      	lsrs	r3, r3, #4
 800b1a4:	f003 0201 	and.w	r2, r3, #1
 800b1a8:	697b      	ldr	r3, [r7, #20]
 800b1aa:	fa02 f303 	lsl.w	r3, r2, r3
 800b1ae:	693a      	ldr	r2, [r7, #16]
 800b1b0:	4313      	orrs	r3, r2
 800b1b2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800b1b4:	687b      	ldr	r3, [r7, #4]
 800b1b6:	693a      	ldr	r2, [r7, #16]
 800b1b8:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 800b1ba:	683b      	ldr	r3, [r7, #0]
 800b1bc:	685b      	ldr	r3, [r3, #4]
 800b1be:	f003 0303 	and.w	r3, r3, #3
 800b1c2:	2b03      	cmp	r3, #3
 800b1c4:	d118      	bne.n	800b1f8 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 800b1c6:	687b      	ldr	r3, [r7, #4]
 800b1c8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b1ca:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 800b1cc:	2201      	movs	r2, #1
 800b1ce:	697b      	ldr	r3, [r7, #20]
 800b1d0:	fa02 f303 	lsl.w	r3, r2, r3
 800b1d4:	43db      	mvns	r3, r3
 800b1d6:	693a      	ldr	r2, [r7, #16]
 800b1d8:	4013      	ands	r3, r2
 800b1da:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 800b1dc:	683b      	ldr	r3, [r7, #0]
 800b1de:	685b      	ldr	r3, [r3, #4]
 800b1e0:	08db      	lsrs	r3, r3, #3
 800b1e2:	f003 0201 	and.w	r2, r3, #1
 800b1e6:	697b      	ldr	r3, [r7, #20]
 800b1e8:	fa02 f303 	lsl.w	r3, r2, r3
 800b1ec:	693a      	ldr	r2, [r7, #16]
 800b1ee:	4313      	orrs	r3, r2
 800b1f0:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 800b1f2:	687b      	ldr	r3, [r7, #4]
 800b1f4:	693a      	ldr	r2, [r7, #16]
 800b1f6:	62da      	str	r2, [r3, #44]	@ 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800b1f8:	683b      	ldr	r3, [r7, #0]
 800b1fa:	685b      	ldr	r3, [r3, #4]
 800b1fc:	f003 0303 	and.w	r3, r3, #3
 800b200:	2b03      	cmp	r3, #3
 800b202:	d017      	beq.n	800b234 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 800b204:	687b      	ldr	r3, [r7, #4]
 800b206:	68db      	ldr	r3, [r3, #12]
 800b208:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800b20a:	697b      	ldr	r3, [r7, #20]
 800b20c:	005b      	lsls	r3, r3, #1
 800b20e:	2203      	movs	r2, #3
 800b210:	fa02 f303 	lsl.w	r3, r2, r3
 800b214:	43db      	mvns	r3, r3
 800b216:	693a      	ldr	r2, [r7, #16]
 800b218:	4013      	ands	r3, r2
 800b21a:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800b21c:	683b      	ldr	r3, [r7, #0]
 800b21e:	689a      	ldr	r2, [r3, #8]
 800b220:	697b      	ldr	r3, [r7, #20]
 800b222:	005b      	lsls	r3, r3, #1
 800b224:	fa02 f303 	lsl.w	r3, r2, r3
 800b228:	693a      	ldr	r2, [r7, #16]
 800b22a:	4313      	orrs	r3, r2
 800b22c:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800b22e:	687b      	ldr	r3, [r7, #4]
 800b230:	693a      	ldr	r2, [r7, #16]
 800b232:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800b234:	683b      	ldr	r3, [r7, #0]
 800b236:	685b      	ldr	r3, [r3, #4]
 800b238:	f003 0303 	and.w	r3, r3, #3
 800b23c:	2b02      	cmp	r3, #2
 800b23e:	d123      	bne.n	800b288 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800b240:	697b      	ldr	r3, [r7, #20]
 800b242:	08da      	lsrs	r2, r3, #3
 800b244:	687b      	ldr	r3, [r7, #4]
 800b246:	3208      	adds	r2, #8
 800b248:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b24c:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800b24e:	697b      	ldr	r3, [r7, #20]
 800b250:	f003 0307 	and.w	r3, r3, #7
 800b254:	009b      	lsls	r3, r3, #2
 800b256:	220f      	movs	r2, #15
 800b258:	fa02 f303 	lsl.w	r3, r2, r3
 800b25c:	43db      	mvns	r3, r3
 800b25e:	693a      	ldr	r2, [r7, #16]
 800b260:	4013      	ands	r3, r2
 800b262:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800b264:	683b      	ldr	r3, [r7, #0]
 800b266:	691a      	ldr	r2, [r3, #16]
 800b268:	697b      	ldr	r3, [r7, #20]
 800b26a:	f003 0307 	and.w	r3, r3, #7
 800b26e:	009b      	lsls	r3, r3, #2
 800b270:	fa02 f303 	lsl.w	r3, r2, r3
 800b274:	693a      	ldr	r2, [r7, #16]
 800b276:	4313      	orrs	r3, r2
 800b278:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800b27a:	697b      	ldr	r3, [r7, #20]
 800b27c:	08da      	lsrs	r2, r3, #3
 800b27e:	687b      	ldr	r3, [r7, #4]
 800b280:	3208      	adds	r2, #8
 800b282:	6939      	ldr	r1, [r7, #16]
 800b284:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800b288:	687b      	ldr	r3, [r7, #4]
 800b28a:	681b      	ldr	r3, [r3, #0]
 800b28c:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800b28e:	697b      	ldr	r3, [r7, #20]
 800b290:	005b      	lsls	r3, r3, #1
 800b292:	2203      	movs	r2, #3
 800b294:	fa02 f303 	lsl.w	r3, r2, r3
 800b298:	43db      	mvns	r3, r3
 800b29a:	693a      	ldr	r2, [r7, #16]
 800b29c:	4013      	ands	r3, r2
 800b29e:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800b2a0:	683b      	ldr	r3, [r7, #0]
 800b2a2:	685b      	ldr	r3, [r3, #4]
 800b2a4:	f003 0203 	and.w	r2, r3, #3
 800b2a8:	697b      	ldr	r3, [r7, #20]
 800b2aa:	005b      	lsls	r3, r3, #1
 800b2ac:	fa02 f303 	lsl.w	r3, r2, r3
 800b2b0:	693a      	ldr	r2, [r7, #16]
 800b2b2:	4313      	orrs	r3, r2
 800b2b4:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800b2b6:	687b      	ldr	r3, [r7, #4]
 800b2b8:	693a      	ldr	r2, [r7, #16]
 800b2ba:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800b2bc:	683b      	ldr	r3, [r7, #0]
 800b2be:	685b      	ldr	r3, [r3, #4]
 800b2c0:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800b2c4:	2b00      	cmp	r3, #0
 800b2c6:	f000 80ac 	beq.w	800b422 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800b2ca:	4b5f      	ldr	r3, [pc, #380]	@ (800b448 <HAL_GPIO_Init+0x330>)
 800b2cc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800b2ce:	4a5e      	ldr	r2, [pc, #376]	@ (800b448 <HAL_GPIO_Init+0x330>)
 800b2d0:	f043 0301 	orr.w	r3, r3, #1
 800b2d4:	6613      	str	r3, [r2, #96]	@ 0x60
 800b2d6:	4b5c      	ldr	r3, [pc, #368]	@ (800b448 <HAL_GPIO_Init+0x330>)
 800b2d8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800b2da:	f003 0301 	and.w	r3, r3, #1
 800b2de:	60bb      	str	r3, [r7, #8]
 800b2e0:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800b2e2:	4a5a      	ldr	r2, [pc, #360]	@ (800b44c <HAL_GPIO_Init+0x334>)
 800b2e4:	697b      	ldr	r3, [r7, #20]
 800b2e6:	089b      	lsrs	r3, r3, #2
 800b2e8:	3302      	adds	r3, #2
 800b2ea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b2ee:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800b2f0:	697b      	ldr	r3, [r7, #20]
 800b2f2:	f003 0303 	and.w	r3, r3, #3
 800b2f6:	009b      	lsls	r3, r3, #2
 800b2f8:	220f      	movs	r2, #15
 800b2fa:	fa02 f303 	lsl.w	r3, r2, r3
 800b2fe:	43db      	mvns	r3, r3
 800b300:	693a      	ldr	r2, [r7, #16]
 800b302:	4013      	ands	r3, r2
 800b304:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800b306:	687b      	ldr	r3, [r7, #4]
 800b308:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 800b30c:	d025      	beq.n	800b35a <HAL_GPIO_Init+0x242>
 800b30e:	687b      	ldr	r3, [r7, #4]
 800b310:	4a4f      	ldr	r2, [pc, #316]	@ (800b450 <HAL_GPIO_Init+0x338>)
 800b312:	4293      	cmp	r3, r2
 800b314:	d01f      	beq.n	800b356 <HAL_GPIO_Init+0x23e>
 800b316:	687b      	ldr	r3, [r7, #4]
 800b318:	4a4e      	ldr	r2, [pc, #312]	@ (800b454 <HAL_GPIO_Init+0x33c>)
 800b31a:	4293      	cmp	r3, r2
 800b31c:	d019      	beq.n	800b352 <HAL_GPIO_Init+0x23a>
 800b31e:	687b      	ldr	r3, [r7, #4]
 800b320:	4a4d      	ldr	r2, [pc, #308]	@ (800b458 <HAL_GPIO_Init+0x340>)
 800b322:	4293      	cmp	r3, r2
 800b324:	d013      	beq.n	800b34e <HAL_GPIO_Init+0x236>
 800b326:	687b      	ldr	r3, [r7, #4]
 800b328:	4a4c      	ldr	r2, [pc, #304]	@ (800b45c <HAL_GPIO_Init+0x344>)
 800b32a:	4293      	cmp	r3, r2
 800b32c:	d00d      	beq.n	800b34a <HAL_GPIO_Init+0x232>
 800b32e:	687b      	ldr	r3, [r7, #4]
 800b330:	4a4b      	ldr	r2, [pc, #300]	@ (800b460 <HAL_GPIO_Init+0x348>)
 800b332:	4293      	cmp	r3, r2
 800b334:	d007      	beq.n	800b346 <HAL_GPIO_Init+0x22e>
 800b336:	687b      	ldr	r3, [r7, #4]
 800b338:	4a4a      	ldr	r2, [pc, #296]	@ (800b464 <HAL_GPIO_Init+0x34c>)
 800b33a:	4293      	cmp	r3, r2
 800b33c:	d101      	bne.n	800b342 <HAL_GPIO_Init+0x22a>
 800b33e:	2306      	movs	r3, #6
 800b340:	e00c      	b.n	800b35c <HAL_GPIO_Init+0x244>
 800b342:	2307      	movs	r3, #7
 800b344:	e00a      	b.n	800b35c <HAL_GPIO_Init+0x244>
 800b346:	2305      	movs	r3, #5
 800b348:	e008      	b.n	800b35c <HAL_GPIO_Init+0x244>
 800b34a:	2304      	movs	r3, #4
 800b34c:	e006      	b.n	800b35c <HAL_GPIO_Init+0x244>
 800b34e:	2303      	movs	r3, #3
 800b350:	e004      	b.n	800b35c <HAL_GPIO_Init+0x244>
 800b352:	2302      	movs	r3, #2
 800b354:	e002      	b.n	800b35c <HAL_GPIO_Init+0x244>
 800b356:	2301      	movs	r3, #1
 800b358:	e000      	b.n	800b35c <HAL_GPIO_Init+0x244>
 800b35a:	2300      	movs	r3, #0
 800b35c:	697a      	ldr	r2, [r7, #20]
 800b35e:	f002 0203 	and.w	r2, r2, #3
 800b362:	0092      	lsls	r2, r2, #2
 800b364:	4093      	lsls	r3, r2
 800b366:	693a      	ldr	r2, [r7, #16]
 800b368:	4313      	orrs	r3, r2
 800b36a:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800b36c:	4937      	ldr	r1, [pc, #220]	@ (800b44c <HAL_GPIO_Init+0x334>)
 800b36e:	697b      	ldr	r3, [r7, #20]
 800b370:	089b      	lsrs	r3, r3, #2
 800b372:	3302      	adds	r3, #2
 800b374:	693a      	ldr	r2, [r7, #16]
 800b376:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800b37a:	4b3b      	ldr	r3, [pc, #236]	@ (800b468 <HAL_GPIO_Init+0x350>)
 800b37c:	689b      	ldr	r3, [r3, #8]
 800b37e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800b380:	68fb      	ldr	r3, [r7, #12]
 800b382:	43db      	mvns	r3, r3
 800b384:	693a      	ldr	r2, [r7, #16]
 800b386:	4013      	ands	r3, r2
 800b388:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800b38a:	683b      	ldr	r3, [r7, #0]
 800b38c:	685b      	ldr	r3, [r3, #4]
 800b38e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800b392:	2b00      	cmp	r3, #0
 800b394:	d003      	beq.n	800b39e <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 800b396:	693a      	ldr	r2, [r7, #16]
 800b398:	68fb      	ldr	r3, [r7, #12]
 800b39a:	4313      	orrs	r3, r2
 800b39c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800b39e:	4a32      	ldr	r2, [pc, #200]	@ (800b468 <HAL_GPIO_Init+0x350>)
 800b3a0:	693b      	ldr	r3, [r7, #16]
 800b3a2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800b3a4:	4b30      	ldr	r3, [pc, #192]	@ (800b468 <HAL_GPIO_Init+0x350>)
 800b3a6:	68db      	ldr	r3, [r3, #12]
 800b3a8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800b3aa:	68fb      	ldr	r3, [r7, #12]
 800b3ac:	43db      	mvns	r3, r3
 800b3ae:	693a      	ldr	r2, [r7, #16]
 800b3b0:	4013      	ands	r3, r2
 800b3b2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800b3b4:	683b      	ldr	r3, [r7, #0]
 800b3b6:	685b      	ldr	r3, [r3, #4]
 800b3b8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800b3bc:	2b00      	cmp	r3, #0
 800b3be:	d003      	beq.n	800b3c8 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 800b3c0:	693a      	ldr	r2, [r7, #16]
 800b3c2:	68fb      	ldr	r3, [r7, #12]
 800b3c4:	4313      	orrs	r3, r2
 800b3c6:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800b3c8:	4a27      	ldr	r2, [pc, #156]	@ (800b468 <HAL_GPIO_Init+0x350>)
 800b3ca:	693b      	ldr	r3, [r7, #16]
 800b3cc:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 800b3ce:	4b26      	ldr	r3, [pc, #152]	@ (800b468 <HAL_GPIO_Init+0x350>)
 800b3d0:	685b      	ldr	r3, [r3, #4]
 800b3d2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800b3d4:	68fb      	ldr	r3, [r7, #12]
 800b3d6:	43db      	mvns	r3, r3
 800b3d8:	693a      	ldr	r2, [r7, #16]
 800b3da:	4013      	ands	r3, r2
 800b3dc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800b3de:	683b      	ldr	r3, [r7, #0]
 800b3e0:	685b      	ldr	r3, [r3, #4]
 800b3e2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800b3e6:	2b00      	cmp	r3, #0
 800b3e8:	d003      	beq.n	800b3f2 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 800b3ea:	693a      	ldr	r2, [r7, #16]
 800b3ec:	68fb      	ldr	r3, [r7, #12]
 800b3ee:	4313      	orrs	r3, r2
 800b3f0:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800b3f2:	4a1d      	ldr	r2, [pc, #116]	@ (800b468 <HAL_GPIO_Init+0x350>)
 800b3f4:	693b      	ldr	r3, [r7, #16]
 800b3f6:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 800b3f8:	4b1b      	ldr	r3, [pc, #108]	@ (800b468 <HAL_GPIO_Init+0x350>)
 800b3fa:	681b      	ldr	r3, [r3, #0]
 800b3fc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800b3fe:	68fb      	ldr	r3, [r7, #12]
 800b400:	43db      	mvns	r3, r3
 800b402:	693a      	ldr	r2, [r7, #16]
 800b404:	4013      	ands	r3, r2
 800b406:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800b408:	683b      	ldr	r3, [r7, #0]
 800b40a:	685b      	ldr	r3, [r3, #4]
 800b40c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800b410:	2b00      	cmp	r3, #0
 800b412:	d003      	beq.n	800b41c <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 800b414:	693a      	ldr	r2, [r7, #16]
 800b416:	68fb      	ldr	r3, [r7, #12]
 800b418:	4313      	orrs	r3, r2
 800b41a:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800b41c:	4a12      	ldr	r2, [pc, #72]	@ (800b468 <HAL_GPIO_Init+0x350>)
 800b41e:	693b      	ldr	r3, [r7, #16]
 800b420:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800b422:	697b      	ldr	r3, [r7, #20]
 800b424:	3301      	adds	r3, #1
 800b426:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800b428:	683b      	ldr	r3, [r7, #0]
 800b42a:	681a      	ldr	r2, [r3, #0]
 800b42c:	697b      	ldr	r3, [r7, #20]
 800b42e:	fa22 f303 	lsr.w	r3, r2, r3
 800b432:	2b00      	cmp	r3, #0
 800b434:	f47f ae78 	bne.w	800b128 <HAL_GPIO_Init+0x10>
  }
}
 800b438:	bf00      	nop
 800b43a:	bf00      	nop
 800b43c:	371c      	adds	r7, #28
 800b43e:	46bd      	mov	sp, r7
 800b440:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b444:	4770      	bx	lr
 800b446:	bf00      	nop
 800b448:	40021000 	.word	0x40021000
 800b44c:	40010000 	.word	0x40010000
 800b450:	48000400 	.word	0x48000400
 800b454:	48000800 	.word	0x48000800
 800b458:	48000c00 	.word	0x48000c00
 800b45c:	48001000 	.word	0x48001000
 800b460:	48001400 	.word	0x48001400
 800b464:	48001800 	.word	0x48001800
 800b468:	40010400 	.word	0x40010400

0800b46c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800b46c:	b480      	push	{r7}
 800b46e:	b083      	sub	sp, #12
 800b470:	af00      	add	r7, sp, #0
 800b472:	6078      	str	r0, [r7, #4]
 800b474:	460b      	mov	r3, r1
 800b476:	807b      	strh	r3, [r7, #2]
 800b478:	4613      	mov	r3, r2
 800b47a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800b47c:	787b      	ldrb	r3, [r7, #1]
 800b47e:	2b00      	cmp	r3, #0
 800b480:	d003      	beq.n	800b48a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800b482:	887a      	ldrh	r2, [r7, #2]
 800b484:	687b      	ldr	r3, [r7, #4]
 800b486:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800b488:	e002      	b.n	800b490 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800b48a:	887a      	ldrh	r2, [r7, #2]
 800b48c:	687b      	ldr	r3, [r7, #4]
 800b48e:	629a      	str	r2, [r3, #40]	@ 0x28
}
 800b490:	bf00      	nop
 800b492:	370c      	adds	r7, #12
 800b494:	46bd      	mov	sp, r7
 800b496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b49a:	4770      	bx	lr

0800b49c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800b49c:	b580      	push	{r7, lr}
 800b49e:	b082      	sub	sp, #8
 800b4a0:	af00      	add	r7, sp, #0
 800b4a2:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800b4a4:	687b      	ldr	r3, [r7, #4]
 800b4a6:	2b00      	cmp	r3, #0
 800b4a8:	d101      	bne.n	800b4ae <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800b4aa:	2301      	movs	r3, #1
 800b4ac:	e08d      	b.n	800b5ca <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800b4ae:	687b      	ldr	r3, [r7, #4]
 800b4b0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800b4b4:	b2db      	uxtb	r3, r3
 800b4b6:	2b00      	cmp	r3, #0
 800b4b8:	d106      	bne.n	800b4c8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800b4ba:	687b      	ldr	r3, [r7, #4]
 800b4bc:	2200      	movs	r2, #0
 800b4be:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800b4c2:	6878      	ldr	r0, [r7, #4]
 800b4c4:	f7fa f8da 	bl	800567c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800b4c8:	687b      	ldr	r3, [r7, #4]
 800b4ca:	2224      	movs	r2, #36	@ 0x24
 800b4cc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800b4d0:	687b      	ldr	r3, [r7, #4]
 800b4d2:	681b      	ldr	r3, [r3, #0]
 800b4d4:	681a      	ldr	r2, [r3, #0]
 800b4d6:	687b      	ldr	r3, [r7, #4]
 800b4d8:	681b      	ldr	r3, [r3, #0]
 800b4da:	f022 0201 	bic.w	r2, r2, #1
 800b4de:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800b4e0:	687b      	ldr	r3, [r7, #4]
 800b4e2:	685a      	ldr	r2, [r3, #4]
 800b4e4:	687b      	ldr	r3, [r7, #4]
 800b4e6:	681b      	ldr	r3, [r3, #0]
 800b4e8:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 800b4ec:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800b4ee:	687b      	ldr	r3, [r7, #4]
 800b4f0:	681b      	ldr	r3, [r3, #0]
 800b4f2:	689a      	ldr	r2, [r3, #8]
 800b4f4:	687b      	ldr	r3, [r7, #4]
 800b4f6:	681b      	ldr	r3, [r3, #0]
 800b4f8:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800b4fc:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800b4fe:	687b      	ldr	r3, [r7, #4]
 800b500:	68db      	ldr	r3, [r3, #12]
 800b502:	2b01      	cmp	r3, #1
 800b504:	d107      	bne.n	800b516 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800b506:	687b      	ldr	r3, [r7, #4]
 800b508:	689a      	ldr	r2, [r3, #8]
 800b50a:	687b      	ldr	r3, [r7, #4]
 800b50c:	681b      	ldr	r3, [r3, #0]
 800b50e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800b512:	609a      	str	r2, [r3, #8]
 800b514:	e006      	b.n	800b524 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800b516:	687b      	ldr	r3, [r7, #4]
 800b518:	689a      	ldr	r2, [r3, #8]
 800b51a:	687b      	ldr	r3, [r7, #4]
 800b51c:	681b      	ldr	r3, [r3, #0]
 800b51e:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 800b522:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800b524:	687b      	ldr	r3, [r7, #4]
 800b526:	68db      	ldr	r3, [r3, #12]
 800b528:	2b02      	cmp	r3, #2
 800b52a:	d108      	bne.n	800b53e <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800b52c:	687b      	ldr	r3, [r7, #4]
 800b52e:	681b      	ldr	r3, [r3, #0]
 800b530:	685a      	ldr	r2, [r3, #4]
 800b532:	687b      	ldr	r3, [r7, #4]
 800b534:	681b      	ldr	r3, [r3, #0]
 800b536:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800b53a:	605a      	str	r2, [r3, #4]
 800b53c:	e007      	b.n	800b54e <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800b53e:	687b      	ldr	r3, [r7, #4]
 800b540:	681b      	ldr	r3, [r3, #0]
 800b542:	685a      	ldr	r2, [r3, #4]
 800b544:	687b      	ldr	r3, [r7, #4]
 800b546:	681b      	ldr	r3, [r3, #0]
 800b548:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800b54c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800b54e:	687b      	ldr	r3, [r7, #4]
 800b550:	681b      	ldr	r3, [r3, #0]
 800b552:	685b      	ldr	r3, [r3, #4]
 800b554:	687a      	ldr	r2, [r7, #4]
 800b556:	6812      	ldr	r2, [r2, #0]
 800b558:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800b55c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800b560:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800b562:	687b      	ldr	r3, [r7, #4]
 800b564:	681b      	ldr	r3, [r3, #0]
 800b566:	68da      	ldr	r2, [r3, #12]
 800b568:	687b      	ldr	r3, [r7, #4]
 800b56a:	681b      	ldr	r3, [r3, #0]
 800b56c:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800b570:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800b572:	687b      	ldr	r3, [r7, #4]
 800b574:	691a      	ldr	r2, [r3, #16]
 800b576:	687b      	ldr	r3, [r7, #4]
 800b578:	695b      	ldr	r3, [r3, #20]
 800b57a:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800b57e:	687b      	ldr	r3, [r7, #4]
 800b580:	699b      	ldr	r3, [r3, #24]
 800b582:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800b584:	687b      	ldr	r3, [r7, #4]
 800b586:	681b      	ldr	r3, [r3, #0]
 800b588:	430a      	orrs	r2, r1
 800b58a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800b58c:	687b      	ldr	r3, [r7, #4]
 800b58e:	69d9      	ldr	r1, [r3, #28]
 800b590:	687b      	ldr	r3, [r7, #4]
 800b592:	6a1a      	ldr	r2, [r3, #32]
 800b594:	687b      	ldr	r3, [r7, #4]
 800b596:	681b      	ldr	r3, [r3, #0]
 800b598:	430a      	orrs	r2, r1
 800b59a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800b59c:	687b      	ldr	r3, [r7, #4]
 800b59e:	681b      	ldr	r3, [r3, #0]
 800b5a0:	681a      	ldr	r2, [r3, #0]
 800b5a2:	687b      	ldr	r3, [r7, #4]
 800b5a4:	681b      	ldr	r3, [r3, #0]
 800b5a6:	f042 0201 	orr.w	r2, r2, #1
 800b5aa:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800b5ac:	687b      	ldr	r3, [r7, #4]
 800b5ae:	2200      	movs	r2, #0
 800b5b0:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800b5b2:	687b      	ldr	r3, [r7, #4]
 800b5b4:	2220      	movs	r2, #32
 800b5b6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800b5ba:	687b      	ldr	r3, [r7, #4]
 800b5bc:	2200      	movs	r2, #0
 800b5be:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800b5c0:	687b      	ldr	r3, [r7, #4]
 800b5c2:	2200      	movs	r2, #0
 800b5c4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 800b5c8:	2300      	movs	r3, #0
}
 800b5ca:	4618      	mov	r0, r3
 800b5cc:	3708      	adds	r7, #8
 800b5ce:	46bd      	mov	sp, r7
 800b5d0:	bd80      	pop	{r7, pc}
	...

0800b5d4 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 800b5d4:	b580      	push	{r7, lr}
 800b5d6:	b088      	sub	sp, #32
 800b5d8:	af02      	add	r7, sp, #8
 800b5da:	60f8      	str	r0, [r7, #12]
 800b5dc:	607a      	str	r2, [r7, #4]
 800b5de:	461a      	mov	r2, r3
 800b5e0:	460b      	mov	r3, r1
 800b5e2:	817b      	strh	r3, [r7, #10]
 800b5e4:	4613      	mov	r3, r2
 800b5e6:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800b5e8:	68fb      	ldr	r3, [r7, #12]
 800b5ea:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800b5ee:	b2db      	uxtb	r3, r3
 800b5f0:	2b20      	cmp	r3, #32
 800b5f2:	f040 80fd 	bne.w	800b7f0 <HAL_I2C_Master_Transmit+0x21c>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800b5f6:	68fb      	ldr	r3, [r7, #12]
 800b5f8:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800b5fc:	2b01      	cmp	r3, #1
 800b5fe:	d101      	bne.n	800b604 <HAL_I2C_Master_Transmit+0x30>
 800b600:	2302      	movs	r3, #2
 800b602:	e0f6      	b.n	800b7f2 <HAL_I2C_Master_Transmit+0x21e>
 800b604:	68fb      	ldr	r3, [r7, #12]
 800b606:	2201      	movs	r2, #1
 800b608:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800b60c:	f7fd fd5a 	bl	80090c4 <HAL_GetTick>
 800b610:	6138      	str	r0, [r7, #16]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800b612:	693b      	ldr	r3, [r7, #16]
 800b614:	9300      	str	r3, [sp, #0]
 800b616:	2319      	movs	r3, #25
 800b618:	2201      	movs	r2, #1
 800b61a:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800b61e:	68f8      	ldr	r0, [r7, #12]
 800b620:	f000 fa0a 	bl	800ba38 <I2C_WaitOnFlagUntilTimeout>
 800b624:	4603      	mov	r3, r0
 800b626:	2b00      	cmp	r3, #0
 800b628:	d001      	beq.n	800b62e <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 800b62a:	2301      	movs	r3, #1
 800b62c:	e0e1      	b.n	800b7f2 <HAL_I2C_Master_Transmit+0x21e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800b62e:	68fb      	ldr	r3, [r7, #12]
 800b630:	2221      	movs	r2, #33	@ 0x21
 800b632:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800b636:	68fb      	ldr	r3, [r7, #12]
 800b638:	2210      	movs	r2, #16
 800b63a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800b63e:	68fb      	ldr	r3, [r7, #12]
 800b640:	2200      	movs	r2, #0
 800b642:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800b644:	68fb      	ldr	r3, [r7, #12]
 800b646:	687a      	ldr	r2, [r7, #4]
 800b648:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 800b64a:	68fb      	ldr	r3, [r7, #12]
 800b64c:	893a      	ldrh	r2, [r7, #8]
 800b64e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 800b650:	68fb      	ldr	r3, [r7, #12]
 800b652:	2200      	movs	r2, #0
 800b654:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800b656:	68fb      	ldr	r3, [r7, #12]
 800b658:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800b65a:	b29b      	uxth	r3, r3
 800b65c:	2bff      	cmp	r3, #255	@ 0xff
 800b65e:	d906      	bls.n	800b66e <HAL_I2C_Master_Transmit+0x9a>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800b660:	68fb      	ldr	r3, [r7, #12]
 800b662:	22ff      	movs	r2, #255	@ 0xff
 800b664:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 800b666:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800b66a:	617b      	str	r3, [r7, #20]
 800b66c:	e007      	b.n	800b67e <HAL_I2C_Master_Transmit+0xaa>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800b66e:	68fb      	ldr	r3, [r7, #12]
 800b670:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800b672:	b29a      	uxth	r2, r3
 800b674:	68fb      	ldr	r3, [r7, #12]
 800b676:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 800b678:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800b67c:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 800b67e:	68fb      	ldr	r3, [r7, #12]
 800b680:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800b682:	2b00      	cmp	r3, #0
 800b684:	d024      	beq.n	800b6d0 <HAL_I2C_Master_Transmit+0xfc>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800b686:	68fb      	ldr	r3, [r7, #12]
 800b688:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b68a:	781a      	ldrb	r2, [r3, #0]
 800b68c:	68fb      	ldr	r3, [r7, #12]
 800b68e:	681b      	ldr	r3, [r3, #0]
 800b690:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800b692:	68fb      	ldr	r3, [r7, #12]
 800b694:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b696:	1c5a      	adds	r2, r3, #1
 800b698:	68fb      	ldr	r3, [r7, #12]
 800b69a:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 800b69c:	68fb      	ldr	r3, [r7, #12]
 800b69e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800b6a0:	b29b      	uxth	r3, r3
 800b6a2:	3b01      	subs	r3, #1
 800b6a4:	b29a      	uxth	r2, r3
 800b6a6:	68fb      	ldr	r3, [r7, #12]
 800b6a8:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 800b6aa:	68fb      	ldr	r3, [r7, #12]
 800b6ac:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800b6ae:	3b01      	subs	r3, #1
 800b6b0:	b29a      	uxth	r2, r3
 800b6b2:	68fb      	ldr	r3, [r7, #12]
 800b6b4:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U), xfermode,
 800b6b6:	68fb      	ldr	r3, [r7, #12]
 800b6b8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800b6ba:	b2db      	uxtb	r3, r3
 800b6bc:	3301      	adds	r3, #1
 800b6be:	b2da      	uxtb	r2, r3
 800b6c0:	8979      	ldrh	r1, [r7, #10]
 800b6c2:	4b4e      	ldr	r3, [pc, #312]	@ (800b7fc <HAL_I2C_Master_Transmit+0x228>)
 800b6c4:	9300      	str	r3, [sp, #0]
 800b6c6:	697b      	ldr	r3, [r7, #20]
 800b6c8:	68f8      	ldr	r0, [r7, #12]
 800b6ca:	f000 fc05 	bl	800bed8 <I2C_TransferConfig>
 800b6ce:	e066      	b.n	800b79e <HAL_I2C_Master_Transmit+0x1ca>
    }
    else
    {
      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode,
 800b6d0:	68fb      	ldr	r3, [r7, #12]
 800b6d2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800b6d4:	b2da      	uxtb	r2, r3
 800b6d6:	8979      	ldrh	r1, [r7, #10]
 800b6d8:	4b48      	ldr	r3, [pc, #288]	@ (800b7fc <HAL_I2C_Master_Transmit+0x228>)
 800b6da:	9300      	str	r3, [sp, #0]
 800b6dc:	697b      	ldr	r3, [r7, #20]
 800b6de:	68f8      	ldr	r0, [r7, #12]
 800b6e0:	f000 fbfa 	bl	800bed8 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 800b6e4:	e05b      	b.n	800b79e <HAL_I2C_Master_Transmit+0x1ca>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800b6e6:	693a      	ldr	r2, [r7, #16]
 800b6e8:	6a39      	ldr	r1, [r7, #32]
 800b6ea:	68f8      	ldr	r0, [r7, #12]
 800b6ec:	f000 f9fd 	bl	800baea <I2C_WaitOnTXISFlagUntilTimeout>
 800b6f0:	4603      	mov	r3, r0
 800b6f2:	2b00      	cmp	r3, #0
 800b6f4:	d001      	beq.n	800b6fa <HAL_I2C_Master_Transmit+0x126>
      {
        return HAL_ERROR;
 800b6f6:	2301      	movs	r3, #1
 800b6f8:	e07b      	b.n	800b7f2 <HAL_I2C_Master_Transmit+0x21e>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800b6fa:	68fb      	ldr	r3, [r7, #12]
 800b6fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b6fe:	781a      	ldrb	r2, [r3, #0]
 800b700:	68fb      	ldr	r3, [r7, #12]
 800b702:	681b      	ldr	r3, [r3, #0]
 800b704:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800b706:	68fb      	ldr	r3, [r7, #12]
 800b708:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b70a:	1c5a      	adds	r2, r3, #1
 800b70c:	68fb      	ldr	r3, [r7, #12]
 800b70e:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 800b710:	68fb      	ldr	r3, [r7, #12]
 800b712:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800b714:	b29b      	uxth	r3, r3
 800b716:	3b01      	subs	r3, #1
 800b718:	b29a      	uxth	r2, r3
 800b71a:	68fb      	ldr	r3, [r7, #12]
 800b71c:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 800b71e:	68fb      	ldr	r3, [r7, #12]
 800b720:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800b722:	3b01      	subs	r3, #1
 800b724:	b29a      	uxth	r2, r3
 800b726:	68fb      	ldr	r3, [r7, #12]
 800b728:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800b72a:	68fb      	ldr	r3, [r7, #12]
 800b72c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800b72e:	b29b      	uxth	r3, r3
 800b730:	2b00      	cmp	r3, #0
 800b732:	d034      	beq.n	800b79e <HAL_I2C_Master_Transmit+0x1ca>
 800b734:	68fb      	ldr	r3, [r7, #12]
 800b736:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800b738:	2b00      	cmp	r3, #0
 800b73a:	d130      	bne.n	800b79e <HAL_I2C_Master_Transmit+0x1ca>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800b73c:	693b      	ldr	r3, [r7, #16]
 800b73e:	9300      	str	r3, [sp, #0]
 800b740:	6a3b      	ldr	r3, [r7, #32]
 800b742:	2200      	movs	r2, #0
 800b744:	2180      	movs	r1, #128	@ 0x80
 800b746:	68f8      	ldr	r0, [r7, #12]
 800b748:	f000 f976 	bl	800ba38 <I2C_WaitOnFlagUntilTimeout>
 800b74c:	4603      	mov	r3, r0
 800b74e:	2b00      	cmp	r3, #0
 800b750:	d001      	beq.n	800b756 <HAL_I2C_Master_Transmit+0x182>
        {
          return HAL_ERROR;
 800b752:	2301      	movs	r3, #1
 800b754:	e04d      	b.n	800b7f2 <HAL_I2C_Master_Transmit+0x21e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800b756:	68fb      	ldr	r3, [r7, #12]
 800b758:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800b75a:	b29b      	uxth	r3, r3
 800b75c:	2bff      	cmp	r3, #255	@ 0xff
 800b75e:	d90e      	bls.n	800b77e <HAL_I2C_Master_Transmit+0x1aa>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800b760:	68fb      	ldr	r3, [r7, #12]
 800b762:	22ff      	movs	r2, #255	@ 0xff
 800b764:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800b766:	68fb      	ldr	r3, [r7, #12]
 800b768:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800b76a:	b2da      	uxtb	r2, r3
 800b76c:	8979      	ldrh	r1, [r7, #10]
 800b76e:	2300      	movs	r3, #0
 800b770:	9300      	str	r3, [sp, #0]
 800b772:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800b776:	68f8      	ldr	r0, [r7, #12]
 800b778:	f000 fbae 	bl	800bed8 <I2C_TransferConfig>
 800b77c:	e00f      	b.n	800b79e <HAL_I2C_Master_Transmit+0x1ca>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800b77e:	68fb      	ldr	r3, [r7, #12]
 800b780:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800b782:	b29a      	uxth	r2, r3
 800b784:	68fb      	ldr	r3, [r7, #12]
 800b786:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800b788:	68fb      	ldr	r3, [r7, #12]
 800b78a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800b78c:	b2da      	uxtb	r2, r3
 800b78e:	8979      	ldrh	r1, [r7, #10]
 800b790:	2300      	movs	r3, #0
 800b792:	9300      	str	r3, [sp, #0]
 800b794:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800b798:	68f8      	ldr	r0, [r7, #12]
 800b79a:	f000 fb9d 	bl	800bed8 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 800b79e:	68fb      	ldr	r3, [r7, #12]
 800b7a0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800b7a2:	b29b      	uxth	r3, r3
 800b7a4:	2b00      	cmp	r3, #0
 800b7a6:	d19e      	bne.n	800b6e6 <HAL_I2C_Master_Transmit+0x112>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800b7a8:	693a      	ldr	r2, [r7, #16]
 800b7aa:	6a39      	ldr	r1, [r7, #32]
 800b7ac:	68f8      	ldr	r0, [r7, #12]
 800b7ae:	f000 f9e3 	bl	800bb78 <I2C_WaitOnSTOPFlagUntilTimeout>
 800b7b2:	4603      	mov	r3, r0
 800b7b4:	2b00      	cmp	r3, #0
 800b7b6:	d001      	beq.n	800b7bc <HAL_I2C_Master_Transmit+0x1e8>
    {
      return HAL_ERROR;
 800b7b8:	2301      	movs	r3, #1
 800b7ba:	e01a      	b.n	800b7f2 <HAL_I2C_Master_Transmit+0x21e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800b7bc:	68fb      	ldr	r3, [r7, #12]
 800b7be:	681b      	ldr	r3, [r3, #0]
 800b7c0:	2220      	movs	r2, #32
 800b7c2:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800b7c4:	68fb      	ldr	r3, [r7, #12]
 800b7c6:	681b      	ldr	r3, [r3, #0]
 800b7c8:	6859      	ldr	r1, [r3, #4]
 800b7ca:	68fb      	ldr	r3, [r7, #12]
 800b7cc:	681a      	ldr	r2, [r3, #0]
 800b7ce:	4b0c      	ldr	r3, [pc, #48]	@ (800b800 <HAL_I2C_Master_Transmit+0x22c>)
 800b7d0:	400b      	ands	r3, r1
 800b7d2:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800b7d4:	68fb      	ldr	r3, [r7, #12]
 800b7d6:	2220      	movs	r2, #32
 800b7d8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800b7dc:	68fb      	ldr	r3, [r7, #12]
 800b7de:	2200      	movs	r2, #0
 800b7e0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800b7e4:	68fb      	ldr	r3, [r7, #12]
 800b7e6:	2200      	movs	r2, #0
 800b7e8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800b7ec:	2300      	movs	r3, #0
 800b7ee:	e000      	b.n	800b7f2 <HAL_I2C_Master_Transmit+0x21e>
  }
  else
  {
    return HAL_BUSY;
 800b7f0:	2302      	movs	r3, #2
  }
}
 800b7f2:	4618      	mov	r0, r3
 800b7f4:	3718      	adds	r7, #24
 800b7f6:	46bd      	mov	sp, r7
 800b7f8:	bd80      	pop	{r7, pc}
 800b7fa:	bf00      	nop
 800b7fc:	80002000 	.word	0x80002000
 800b800:	fe00e800 	.word	0xfe00e800

0800b804 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 800b804:	b580      	push	{r7, lr}
 800b806:	b088      	sub	sp, #32
 800b808:	af02      	add	r7, sp, #8
 800b80a:	60f8      	str	r0, [r7, #12]
 800b80c:	607a      	str	r2, [r7, #4]
 800b80e:	461a      	mov	r2, r3
 800b810:	460b      	mov	r3, r1
 800b812:	817b      	strh	r3, [r7, #10]
 800b814:	4613      	mov	r3, r2
 800b816:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800b818:	68fb      	ldr	r3, [r7, #12]
 800b81a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800b81e:	b2db      	uxtb	r3, r3
 800b820:	2b20      	cmp	r3, #32
 800b822:	f040 80db 	bne.w	800b9dc <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800b826:	68fb      	ldr	r3, [r7, #12]
 800b828:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800b82c:	2b01      	cmp	r3, #1
 800b82e:	d101      	bne.n	800b834 <HAL_I2C_Master_Receive+0x30>
 800b830:	2302      	movs	r3, #2
 800b832:	e0d4      	b.n	800b9de <HAL_I2C_Master_Receive+0x1da>
 800b834:	68fb      	ldr	r3, [r7, #12]
 800b836:	2201      	movs	r2, #1
 800b838:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800b83c:	f7fd fc42 	bl	80090c4 <HAL_GetTick>
 800b840:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800b842:	697b      	ldr	r3, [r7, #20]
 800b844:	9300      	str	r3, [sp, #0]
 800b846:	2319      	movs	r3, #25
 800b848:	2201      	movs	r2, #1
 800b84a:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800b84e:	68f8      	ldr	r0, [r7, #12]
 800b850:	f000 f8f2 	bl	800ba38 <I2C_WaitOnFlagUntilTimeout>
 800b854:	4603      	mov	r3, r0
 800b856:	2b00      	cmp	r3, #0
 800b858:	d001      	beq.n	800b85e <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 800b85a:	2301      	movs	r3, #1
 800b85c:	e0bf      	b.n	800b9de <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800b85e:	68fb      	ldr	r3, [r7, #12]
 800b860:	2222      	movs	r2, #34	@ 0x22
 800b862:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800b866:	68fb      	ldr	r3, [r7, #12]
 800b868:	2210      	movs	r2, #16
 800b86a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800b86e:	68fb      	ldr	r3, [r7, #12]
 800b870:	2200      	movs	r2, #0
 800b872:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800b874:	68fb      	ldr	r3, [r7, #12]
 800b876:	687a      	ldr	r2, [r7, #4]
 800b878:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 800b87a:	68fb      	ldr	r3, [r7, #12]
 800b87c:	893a      	ldrh	r2, [r7, #8]
 800b87e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 800b880:	68fb      	ldr	r3, [r7, #12]
 800b882:	2200      	movs	r2, #0
 800b884:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800b886:	68fb      	ldr	r3, [r7, #12]
 800b888:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800b88a:	b29b      	uxth	r3, r3
 800b88c:	2bff      	cmp	r3, #255	@ 0xff
 800b88e:	d90e      	bls.n	800b8ae <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = 1U;
 800b890:	68fb      	ldr	r3, [r7, #12]
 800b892:	2201      	movs	r2, #1
 800b894:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800b896:	68fb      	ldr	r3, [r7, #12]
 800b898:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800b89a:	b2da      	uxtb	r2, r3
 800b89c:	8979      	ldrh	r1, [r7, #10]
 800b89e:	4b52      	ldr	r3, [pc, #328]	@ (800b9e8 <HAL_I2C_Master_Receive+0x1e4>)
 800b8a0:	9300      	str	r3, [sp, #0]
 800b8a2:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800b8a6:	68f8      	ldr	r0, [r7, #12]
 800b8a8:	f000 fb16 	bl	800bed8 <I2C_TransferConfig>
 800b8ac:	e06d      	b.n	800b98a <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800b8ae:	68fb      	ldr	r3, [r7, #12]
 800b8b0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800b8b2:	b29a      	uxth	r2, r3
 800b8b4:	68fb      	ldr	r3, [r7, #12]
 800b8b6:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800b8b8:	68fb      	ldr	r3, [r7, #12]
 800b8ba:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800b8bc:	b2da      	uxtb	r2, r3
 800b8be:	8979      	ldrh	r1, [r7, #10]
 800b8c0:	4b49      	ldr	r3, [pc, #292]	@ (800b9e8 <HAL_I2C_Master_Receive+0x1e4>)
 800b8c2:	9300      	str	r3, [sp, #0]
 800b8c4:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800b8c8:	68f8      	ldr	r0, [r7, #12]
 800b8ca:	f000 fb05 	bl	800bed8 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 800b8ce:	e05c      	b.n	800b98a <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800b8d0:	697a      	ldr	r2, [r7, #20]
 800b8d2:	6a39      	ldr	r1, [r7, #32]
 800b8d4:	68f8      	ldr	r0, [r7, #12]
 800b8d6:	f000 f993 	bl	800bc00 <I2C_WaitOnRXNEFlagUntilTimeout>
 800b8da:	4603      	mov	r3, r0
 800b8dc:	2b00      	cmp	r3, #0
 800b8de:	d001      	beq.n	800b8e4 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 800b8e0:	2301      	movs	r3, #1
 800b8e2:	e07c      	b.n	800b9de <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800b8e4:	68fb      	ldr	r3, [r7, #12]
 800b8e6:	681b      	ldr	r3, [r3, #0]
 800b8e8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800b8ea:	68fb      	ldr	r3, [r7, #12]
 800b8ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b8ee:	b2d2      	uxtb	r2, r2
 800b8f0:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800b8f2:	68fb      	ldr	r3, [r7, #12]
 800b8f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b8f6:	1c5a      	adds	r2, r3, #1
 800b8f8:	68fb      	ldr	r3, [r7, #12]
 800b8fa:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 800b8fc:	68fb      	ldr	r3, [r7, #12]
 800b8fe:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800b900:	3b01      	subs	r3, #1
 800b902:	b29a      	uxth	r2, r3
 800b904:	68fb      	ldr	r3, [r7, #12]
 800b906:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 800b908:	68fb      	ldr	r3, [r7, #12]
 800b90a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800b90c:	b29b      	uxth	r3, r3
 800b90e:	3b01      	subs	r3, #1
 800b910:	b29a      	uxth	r2, r3
 800b912:	68fb      	ldr	r3, [r7, #12]
 800b914:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800b916:	68fb      	ldr	r3, [r7, #12]
 800b918:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800b91a:	b29b      	uxth	r3, r3
 800b91c:	2b00      	cmp	r3, #0
 800b91e:	d034      	beq.n	800b98a <HAL_I2C_Master_Receive+0x186>
 800b920:	68fb      	ldr	r3, [r7, #12]
 800b922:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800b924:	2b00      	cmp	r3, #0
 800b926:	d130      	bne.n	800b98a <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800b928:	697b      	ldr	r3, [r7, #20]
 800b92a:	9300      	str	r3, [sp, #0]
 800b92c:	6a3b      	ldr	r3, [r7, #32]
 800b92e:	2200      	movs	r2, #0
 800b930:	2180      	movs	r1, #128	@ 0x80
 800b932:	68f8      	ldr	r0, [r7, #12]
 800b934:	f000 f880 	bl	800ba38 <I2C_WaitOnFlagUntilTimeout>
 800b938:	4603      	mov	r3, r0
 800b93a:	2b00      	cmp	r3, #0
 800b93c:	d001      	beq.n	800b942 <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 800b93e:	2301      	movs	r3, #1
 800b940:	e04d      	b.n	800b9de <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800b942:	68fb      	ldr	r3, [r7, #12]
 800b944:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800b946:	b29b      	uxth	r3, r3
 800b948:	2bff      	cmp	r3, #255	@ 0xff
 800b94a:	d90e      	bls.n	800b96a <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800b94c:	68fb      	ldr	r3, [r7, #12]
 800b94e:	22ff      	movs	r2, #255	@ 0xff
 800b950:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800b952:	68fb      	ldr	r3, [r7, #12]
 800b954:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800b956:	b2da      	uxtb	r2, r3
 800b958:	8979      	ldrh	r1, [r7, #10]
 800b95a:	2300      	movs	r3, #0
 800b95c:	9300      	str	r3, [sp, #0]
 800b95e:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800b962:	68f8      	ldr	r0, [r7, #12]
 800b964:	f000 fab8 	bl	800bed8 <I2C_TransferConfig>
 800b968:	e00f      	b.n	800b98a <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800b96a:	68fb      	ldr	r3, [r7, #12]
 800b96c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800b96e:	b29a      	uxth	r2, r3
 800b970:	68fb      	ldr	r3, [r7, #12]
 800b972:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800b974:	68fb      	ldr	r3, [r7, #12]
 800b976:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800b978:	b2da      	uxtb	r2, r3
 800b97a:	8979      	ldrh	r1, [r7, #10]
 800b97c:	2300      	movs	r3, #0
 800b97e:	9300      	str	r3, [sp, #0]
 800b980:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800b984:	68f8      	ldr	r0, [r7, #12]
 800b986:	f000 faa7 	bl	800bed8 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 800b98a:	68fb      	ldr	r3, [r7, #12]
 800b98c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800b98e:	b29b      	uxth	r3, r3
 800b990:	2b00      	cmp	r3, #0
 800b992:	d19d      	bne.n	800b8d0 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800b994:	697a      	ldr	r2, [r7, #20]
 800b996:	6a39      	ldr	r1, [r7, #32]
 800b998:	68f8      	ldr	r0, [r7, #12]
 800b99a:	f000 f8ed 	bl	800bb78 <I2C_WaitOnSTOPFlagUntilTimeout>
 800b99e:	4603      	mov	r3, r0
 800b9a0:	2b00      	cmp	r3, #0
 800b9a2:	d001      	beq.n	800b9a8 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 800b9a4:	2301      	movs	r3, #1
 800b9a6:	e01a      	b.n	800b9de <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800b9a8:	68fb      	ldr	r3, [r7, #12]
 800b9aa:	681b      	ldr	r3, [r3, #0]
 800b9ac:	2220      	movs	r2, #32
 800b9ae:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800b9b0:	68fb      	ldr	r3, [r7, #12]
 800b9b2:	681b      	ldr	r3, [r3, #0]
 800b9b4:	6859      	ldr	r1, [r3, #4]
 800b9b6:	68fb      	ldr	r3, [r7, #12]
 800b9b8:	681a      	ldr	r2, [r3, #0]
 800b9ba:	4b0c      	ldr	r3, [pc, #48]	@ (800b9ec <HAL_I2C_Master_Receive+0x1e8>)
 800b9bc:	400b      	ands	r3, r1
 800b9be:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800b9c0:	68fb      	ldr	r3, [r7, #12]
 800b9c2:	2220      	movs	r2, #32
 800b9c4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800b9c8:	68fb      	ldr	r3, [r7, #12]
 800b9ca:	2200      	movs	r2, #0
 800b9cc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800b9d0:	68fb      	ldr	r3, [r7, #12]
 800b9d2:	2200      	movs	r2, #0
 800b9d4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800b9d8:	2300      	movs	r3, #0
 800b9da:	e000      	b.n	800b9de <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 800b9dc:	2302      	movs	r3, #2
  }
}
 800b9de:	4618      	mov	r0, r3
 800b9e0:	3718      	adds	r7, #24
 800b9e2:	46bd      	mov	sp, r7
 800b9e4:	bd80      	pop	{r7, pc}
 800b9e6:	bf00      	nop
 800b9e8:	80002400 	.word	0x80002400
 800b9ec:	fe00e800 	.word	0xfe00e800

0800b9f0 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 800b9f0:	b480      	push	{r7}
 800b9f2:	b083      	sub	sp, #12
 800b9f4:	af00      	add	r7, sp, #0
 800b9f6:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800b9f8:	687b      	ldr	r3, [r7, #4]
 800b9fa:	681b      	ldr	r3, [r3, #0]
 800b9fc:	699b      	ldr	r3, [r3, #24]
 800b9fe:	f003 0302 	and.w	r3, r3, #2
 800ba02:	2b02      	cmp	r3, #2
 800ba04:	d103      	bne.n	800ba0e <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800ba06:	687b      	ldr	r3, [r7, #4]
 800ba08:	681b      	ldr	r3, [r3, #0]
 800ba0a:	2200      	movs	r2, #0
 800ba0c:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800ba0e:	687b      	ldr	r3, [r7, #4]
 800ba10:	681b      	ldr	r3, [r3, #0]
 800ba12:	699b      	ldr	r3, [r3, #24]
 800ba14:	f003 0301 	and.w	r3, r3, #1
 800ba18:	2b01      	cmp	r3, #1
 800ba1a:	d007      	beq.n	800ba2c <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800ba1c:	687b      	ldr	r3, [r7, #4]
 800ba1e:	681b      	ldr	r3, [r3, #0]
 800ba20:	699a      	ldr	r2, [r3, #24]
 800ba22:	687b      	ldr	r3, [r7, #4]
 800ba24:	681b      	ldr	r3, [r3, #0]
 800ba26:	f042 0201 	orr.w	r2, r2, #1
 800ba2a:	619a      	str	r2, [r3, #24]
  }
}
 800ba2c:	bf00      	nop
 800ba2e:	370c      	adds	r7, #12
 800ba30:	46bd      	mov	sp, r7
 800ba32:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba36:	4770      	bx	lr

0800ba38 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 800ba38:	b580      	push	{r7, lr}
 800ba3a:	b084      	sub	sp, #16
 800ba3c:	af00      	add	r7, sp, #0
 800ba3e:	60f8      	str	r0, [r7, #12]
 800ba40:	60b9      	str	r1, [r7, #8]
 800ba42:	603b      	str	r3, [r7, #0]
 800ba44:	4613      	mov	r3, r2
 800ba46:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800ba48:	e03b      	b.n	800bac2 <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800ba4a:	69ba      	ldr	r2, [r7, #24]
 800ba4c:	6839      	ldr	r1, [r7, #0]
 800ba4e:	68f8      	ldr	r0, [r7, #12]
 800ba50:	f000 f962 	bl	800bd18 <I2C_IsErrorOccurred>
 800ba54:	4603      	mov	r3, r0
 800ba56:	2b00      	cmp	r3, #0
 800ba58:	d001      	beq.n	800ba5e <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 800ba5a:	2301      	movs	r3, #1
 800ba5c:	e041      	b.n	800bae2 <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800ba5e:	683b      	ldr	r3, [r7, #0]
 800ba60:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ba64:	d02d      	beq.n	800bac2 <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800ba66:	f7fd fb2d 	bl	80090c4 <HAL_GetTick>
 800ba6a:	4602      	mov	r2, r0
 800ba6c:	69bb      	ldr	r3, [r7, #24]
 800ba6e:	1ad3      	subs	r3, r2, r3
 800ba70:	683a      	ldr	r2, [r7, #0]
 800ba72:	429a      	cmp	r2, r3
 800ba74:	d302      	bcc.n	800ba7c <I2C_WaitOnFlagUntilTimeout+0x44>
 800ba76:	683b      	ldr	r3, [r7, #0]
 800ba78:	2b00      	cmp	r3, #0
 800ba7a:	d122      	bne.n	800bac2 <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 800ba7c:	68fb      	ldr	r3, [r7, #12]
 800ba7e:	681b      	ldr	r3, [r3, #0]
 800ba80:	699a      	ldr	r2, [r3, #24]
 800ba82:	68bb      	ldr	r3, [r7, #8]
 800ba84:	4013      	ands	r3, r2
 800ba86:	68ba      	ldr	r2, [r7, #8]
 800ba88:	429a      	cmp	r2, r3
 800ba8a:	bf0c      	ite	eq
 800ba8c:	2301      	moveq	r3, #1
 800ba8e:	2300      	movne	r3, #0
 800ba90:	b2db      	uxtb	r3, r3
 800ba92:	461a      	mov	r2, r3
 800ba94:	79fb      	ldrb	r3, [r7, #7]
 800ba96:	429a      	cmp	r2, r3
 800ba98:	d113      	bne.n	800bac2 <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800ba9a:	68fb      	ldr	r3, [r7, #12]
 800ba9c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800ba9e:	f043 0220 	orr.w	r2, r3, #32
 800baa2:	68fb      	ldr	r3, [r7, #12]
 800baa4:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800baa6:	68fb      	ldr	r3, [r7, #12]
 800baa8:	2220      	movs	r2, #32
 800baaa:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800baae:	68fb      	ldr	r3, [r7, #12]
 800bab0:	2200      	movs	r2, #0
 800bab2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800bab6:	68fb      	ldr	r3, [r7, #12]
 800bab8:	2200      	movs	r2, #0
 800baba:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 800babe:	2301      	movs	r3, #1
 800bac0:	e00f      	b.n	800bae2 <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800bac2:	68fb      	ldr	r3, [r7, #12]
 800bac4:	681b      	ldr	r3, [r3, #0]
 800bac6:	699a      	ldr	r2, [r3, #24]
 800bac8:	68bb      	ldr	r3, [r7, #8]
 800baca:	4013      	ands	r3, r2
 800bacc:	68ba      	ldr	r2, [r7, #8]
 800bace:	429a      	cmp	r2, r3
 800bad0:	bf0c      	ite	eq
 800bad2:	2301      	moveq	r3, #1
 800bad4:	2300      	movne	r3, #0
 800bad6:	b2db      	uxtb	r3, r3
 800bad8:	461a      	mov	r2, r3
 800bada:	79fb      	ldrb	r3, [r7, #7]
 800badc:	429a      	cmp	r2, r3
 800bade:	d0b4      	beq.n	800ba4a <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800bae0:	2300      	movs	r3, #0
}
 800bae2:	4618      	mov	r0, r3
 800bae4:	3710      	adds	r7, #16
 800bae6:	46bd      	mov	sp, r7
 800bae8:	bd80      	pop	{r7, pc}

0800baea <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800baea:	b580      	push	{r7, lr}
 800baec:	b084      	sub	sp, #16
 800baee:	af00      	add	r7, sp, #0
 800baf0:	60f8      	str	r0, [r7, #12]
 800baf2:	60b9      	str	r1, [r7, #8]
 800baf4:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800baf6:	e033      	b.n	800bb60 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800baf8:	687a      	ldr	r2, [r7, #4]
 800bafa:	68b9      	ldr	r1, [r7, #8]
 800bafc:	68f8      	ldr	r0, [r7, #12]
 800bafe:	f000 f90b 	bl	800bd18 <I2C_IsErrorOccurred>
 800bb02:	4603      	mov	r3, r0
 800bb04:	2b00      	cmp	r3, #0
 800bb06:	d001      	beq.n	800bb0c <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800bb08:	2301      	movs	r3, #1
 800bb0a:	e031      	b.n	800bb70 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800bb0c:	68bb      	ldr	r3, [r7, #8]
 800bb0e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bb12:	d025      	beq.n	800bb60 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800bb14:	f7fd fad6 	bl	80090c4 <HAL_GetTick>
 800bb18:	4602      	mov	r2, r0
 800bb1a:	687b      	ldr	r3, [r7, #4]
 800bb1c:	1ad3      	subs	r3, r2, r3
 800bb1e:	68ba      	ldr	r2, [r7, #8]
 800bb20:	429a      	cmp	r2, r3
 800bb22:	d302      	bcc.n	800bb2a <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 800bb24:	68bb      	ldr	r3, [r7, #8]
 800bb26:	2b00      	cmp	r3, #0
 800bb28:	d11a      	bne.n	800bb60 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 800bb2a:	68fb      	ldr	r3, [r7, #12]
 800bb2c:	681b      	ldr	r3, [r3, #0]
 800bb2e:	699b      	ldr	r3, [r3, #24]
 800bb30:	f003 0302 	and.w	r3, r3, #2
 800bb34:	2b02      	cmp	r3, #2
 800bb36:	d013      	beq.n	800bb60 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800bb38:	68fb      	ldr	r3, [r7, #12]
 800bb3a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800bb3c:	f043 0220 	orr.w	r2, r3, #32
 800bb40:	68fb      	ldr	r3, [r7, #12]
 800bb42:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800bb44:	68fb      	ldr	r3, [r7, #12]
 800bb46:	2220      	movs	r2, #32
 800bb48:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800bb4c:	68fb      	ldr	r3, [r7, #12]
 800bb4e:	2200      	movs	r2, #0
 800bb50:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800bb54:	68fb      	ldr	r3, [r7, #12]
 800bb56:	2200      	movs	r2, #0
 800bb58:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 800bb5c:	2301      	movs	r3, #1
 800bb5e:	e007      	b.n	800bb70 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800bb60:	68fb      	ldr	r3, [r7, #12]
 800bb62:	681b      	ldr	r3, [r3, #0]
 800bb64:	699b      	ldr	r3, [r3, #24]
 800bb66:	f003 0302 	and.w	r3, r3, #2
 800bb6a:	2b02      	cmp	r3, #2
 800bb6c:	d1c4      	bne.n	800baf8 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800bb6e:	2300      	movs	r3, #0
}
 800bb70:	4618      	mov	r0, r3
 800bb72:	3710      	adds	r7, #16
 800bb74:	46bd      	mov	sp, r7
 800bb76:	bd80      	pop	{r7, pc}

0800bb78 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800bb78:	b580      	push	{r7, lr}
 800bb7a:	b084      	sub	sp, #16
 800bb7c:	af00      	add	r7, sp, #0
 800bb7e:	60f8      	str	r0, [r7, #12]
 800bb80:	60b9      	str	r1, [r7, #8]
 800bb82:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800bb84:	e02f      	b.n	800bbe6 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800bb86:	687a      	ldr	r2, [r7, #4]
 800bb88:	68b9      	ldr	r1, [r7, #8]
 800bb8a:	68f8      	ldr	r0, [r7, #12]
 800bb8c:	f000 f8c4 	bl	800bd18 <I2C_IsErrorOccurred>
 800bb90:	4603      	mov	r3, r0
 800bb92:	2b00      	cmp	r3, #0
 800bb94:	d001      	beq.n	800bb9a <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800bb96:	2301      	movs	r3, #1
 800bb98:	e02d      	b.n	800bbf6 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800bb9a:	f7fd fa93 	bl	80090c4 <HAL_GetTick>
 800bb9e:	4602      	mov	r2, r0
 800bba0:	687b      	ldr	r3, [r7, #4]
 800bba2:	1ad3      	subs	r3, r2, r3
 800bba4:	68ba      	ldr	r2, [r7, #8]
 800bba6:	429a      	cmp	r2, r3
 800bba8:	d302      	bcc.n	800bbb0 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800bbaa:	68bb      	ldr	r3, [r7, #8]
 800bbac:	2b00      	cmp	r3, #0
 800bbae:	d11a      	bne.n	800bbe6 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 800bbb0:	68fb      	ldr	r3, [r7, #12]
 800bbb2:	681b      	ldr	r3, [r3, #0]
 800bbb4:	699b      	ldr	r3, [r3, #24]
 800bbb6:	f003 0320 	and.w	r3, r3, #32
 800bbba:	2b20      	cmp	r3, #32
 800bbbc:	d013      	beq.n	800bbe6 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800bbbe:	68fb      	ldr	r3, [r7, #12]
 800bbc0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800bbc2:	f043 0220 	orr.w	r2, r3, #32
 800bbc6:	68fb      	ldr	r3, [r7, #12]
 800bbc8:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800bbca:	68fb      	ldr	r3, [r7, #12]
 800bbcc:	2220      	movs	r2, #32
 800bbce:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800bbd2:	68fb      	ldr	r3, [r7, #12]
 800bbd4:	2200      	movs	r2, #0
 800bbd6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800bbda:	68fb      	ldr	r3, [r7, #12]
 800bbdc:	2200      	movs	r2, #0
 800bbde:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 800bbe2:	2301      	movs	r3, #1
 800bbe4:	e007      	b.n	800bbf6 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800bbe6:	68fb      	ldr	r3, [r7, #12]
 800bbe8:	681b      	ldr	r3, [r3, #0]
 800bbea:	699b      	ldr	r3, [r3, #24]
 800bbec:	f003 0320 	and.w	r3, r3, #32
 800bbf0:	2b20      	cmp	r3, #32
 800bbf2:	d1c8      	bne.n	800bb86 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800bbf4:	2300      	movs	r3, #0
}
 800bbf6:	4618      	mov	r0, r3
 800bbf8:	3710      	adds	r7, #16
 800bbfa:	46bd      	mov	sp, r7
 800bbfc:	bd80      	pop	{r7, pc}
	...

0800bc00 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800bc00:	b580      	push	{r7, lr}
 800bc02:	b086      	sub	sp, #24
 800bc04:	af00      	add	r7, sp, #0
 800bc06:	60f8      	str	r0, [r7, #12]
 800bc08:	60b9      	str	r1, [r7, #8]
 800bc0a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800bc0c:	2300      	movs	r3, #0
 800bc0e:	75fb      	strb	r3, [r7, #23]

  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 800bc10:	e071      	b.n	800bcf6 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800bc12:	687a      	ldr	r2, [r7, #4]
 800bc14:	68b9      	ldr	r1, [r7, #8]
 800bc16:	68f8      	ldr	r0, [r7, #12]
 800bc18:	f000 f87e 	bl	800bd18 <I2C_IsErrorOccurred>
 800bc1c:	4603      	mov	r3, r0
 800bc1e:	2b00      	cmp	r3, #0
 800bc20:	d001      	beq.n	800bc26 <I2C_WaitOnRXNEFlagUntilTimeout+0x26>
    {
      status = HAL_ERROR;
 800bc22:	2301      	movs	r3, #1
 800bc24:	75fb      	strb	r3, [r7, #23]
    }

    /* Check if a STOPF is detected */
    if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET) && (status == HAL_OK))
 800bc26:	68fb      	ldr	r3, [r7, #12]
 800bc28:	681b      	ldr	r3, [r3, #0]
 800bc2a:	699b      	ldr	r3, [r3, #24]
 800bc2c:	f003 0320 	and.w	r3, r3, #32
 800bc30:	2b20      	cmp	r3, #32
 800bc32:	d13b      	bne.n	800bcac <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
 800bc34:	7dfb      	ldrb	r3, [r7, #23]
 800bc36:	2b00      	cmp	r3, #0
 800bc38:	d138      	bne.n	800bcac <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 800bc3a:	68fb      	ldr	r3, [r7, #12]
 800bc3c:	681b      	ldr	r3, [r3, #0]
 800bc3e:	699b      	ldr	r3, [r3, #24]
 800bc40:	f003 0304 	and.w	r3, r3, #4
 800bc44:	2b04      	cmp	r3, #4
 800bc46:	d105      	bne.n	800bc54 <I2C_WaitOnRXNEFlagUntilTimeout+0x54>
 800bc48:	68fb      	ldr	r3, [r7, #12]
 800bc4a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800bc4c:	2b00      	cmp	r3, #0
 800bc4e:	d001      	beq.n	800bc54 <I2C_WaitOnRXNEFlagUntilTimeout+0x54>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        status = HAL_OK;
 800bc50:	2300      	movs	r3, #0
 800bc52:	75fb      	strb	r3, [r7, #23]
      }

      /* Check a no-acknowledge have been detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800bc54:	68fb      	ldr	r3, [r7, #12]
 800bc56:	681b      	ldr	r3, [r3, #0]
 800bc58:	699b      	ldr	r3, [r3, #24]
 800bc5a:	f003 0310 	and.w	r3, r3, #16
 800bc5e:	2b10      	cmp	r3, #16
 800bc60:	d121      	bne.n	800bca6 <I2C_WaitOnRXNEFlagUntilTimeout+0xa6>
      {
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800bc62:	68fb      	ldr	r3, [r7, #12]
 800bc64:	681b      	ldr	r3, [r3, #0]
 800bc66:	2210      	movs	r2, #16
 800bc68:	61da      	str	r2, [r3, #28]
        hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 800bc6a:	68fb      	ldr	r3, [r7, #12]
 800bc6c:	2204      	movs	r2, #4
 800bc6e:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800bc70:	68fb      	ldr	r3, [r7, #12]
 800bc72:	681b      	ldr	r3, [r3, #0]
 800bc74:	2220      	movs	r2, #32
 800bc76:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 800bc78:	68fb      	ldr	r3, [r7, #12]
 800bc7a:	681b      	ldr	r3, [r3, #0]
 800bc7c:	6859      	ldr	r1, [r3, #4]
 800bc7e:	68fb      	ldr	r3, [r7, #12]
 800bc80:	681a      	ldr	r2, [r3, #0]
 800bc82:	4b24      	ldr	r3, [pc, #144]	@ (800bd14 <I2C_WaitOnRXNEFlagUntilTimeout+0x114>)
 800bc84:	400b      	ands	r3, r1
 800bc86:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 800bc88:	68fb      	ldr	r3, [r7, #12]
 800bc8a:	2220      	movs	r2, #32
 800bc8c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800bc90:	68fb      	ldr	r3, [r7, #12]
 800bc92:	2200      	movs	r2, #0
 800bc94:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800bc98:	68fb      	ldr	r3, [r7, #12]
 800bc9a:	2200      	movs	r2, #0
 800bc9c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        status = HAL_ERROR;
 800bca0:	2301      	movs	r3, #1
 800bca2:	75fb      	strb	r3, [r7, #23]
 800bca4:	e002      	b.n	800bcac <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
      }
      else
      {
        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800bca6:	68fb      	ldr	r3, [r7, #12]
 800bca8:	2200      	movs	r2, #0
 800bcaa:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }

    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U)) && (status == HAL_OK))
 800bcac:	f7fd fa0a 	bl	80090c4 <HAL_GetTick>
 800bcb0:	4602      	mov	r2, r0
 800bcb2:	687b      	ldr	r3, [r7, #4]
 800bcb4:	1ad3      	subs	r3, r2, r3
 800bcb6:	68ba      	ldr	r2, [r7, #8]
 800bcb8:	429a      	cmp	r2, r3
 800bcba:	d302      	bcc.n	800bcc2 <I2C_WaitOnRXNEFlagUntilTimeout+0xc2>
 800bcbc:	68bb      	ldr	r3, [r7, #8]
 800bcbe:	2b00      	cmp	r3, #0
 800bcc0:	d119      	bne.n	800bcf6 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
 800bcc2:	7dfb      	ldrb	r3, [r7, #23]
 800bcc4:	2b00      	cmp	r3, #0
 800bcc6:	d116      	bne.n	800bcf6 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 800bcc8:	68fb      	ldr	r3, [r7, #12]
 800bcca:	681b      	ldr	r3, [r3, #0]
 800bccc:	699b      	ldr	r3, [r3, #24]
 800bcce:	f003 0304 	and.w	r3, r3, #4
 800bcd2:	2b04      	cmp	r3, #4
 800bcd4:	d00f      	beq.n	800bcf6 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800bcd6:	68fb      	ldr	r3, [r7, #12]
 800bcd8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800bcda:	f043 0220 	orr.w	r2, r3, #32
 800bcde:	68fb      	ldr	r3, [r7, #12]
 800bce0:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800bce2:	68fb      	ldr	r3, [r7, #12]
 800bce4:	2220      	movs	r2, #32
 800bce6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800bcea:	68fb      	ldr	r3, [r7, #12]
 800bcec:	2200      	movs	r2, #0
 800bcee:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        status = HAL_ERROR;
 800bcf2:	2301      	movs	r3, #1
 800bcf4:	75fb      	strb	r3, [r7, #23]
  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 800bcf6:	68fb      	ldr	r3, [r7, #12]
 800bcf8:	681b      	ldr	r3, [r3, #0]
 800bcfa:	699b      	ldr	r3, [r3, #24]
 800bcfc:	f003 0304 	and.w	r3, r3, #4
 800bd00:	2b04      	cmp	r3, #4
 800bd02:	d002      	beq.n	800bd0a <I2C_WaitOnRXNEFlagUntilTimeout+0x10a>
 800bd04:	7dfb      	ldrb	r3, [r7, #23]
 800bd06:	2b00      	cmp	r3, #0
 800bd08:	d083      	beq.n	800bc12 <I2C_WaitOnRXNEFlagUntilTimeout+0x12>
      }
    }
  }
  return status;
 800bd0a:	7dfb      	ldrb	r3, [r7, #23]
}
 800bd0c:	4618      	mov	r0, r3
 800bd0e:	3718      	adds	r7, #24
 800bd10:	46bd      	mov	sp, r7
 800bd12:	bd80      	pop	{r7, pc}
 800bd14:	fe00e800 	.word	0xfe00e800

0800bd18 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800bd18:	b580      	push	{r7, lr}
 800bd1a:	b08a      	sub	sp, #40	@ 0x28
 800bd1c:	af00      	add	r7, sp, #0
 800bd1e:	60f8      	str	r0, [r7, #12]
 800bd20:	60b9      	str	r1, [r7, #8]
 800bd22:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800bd24:	2300      	movs	r3, #0
 800bd26:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 800bd2a:	68fb      	ldr	r3, [r7, #12]
 800bd2c:	681b      	ldr	r3, [r3, #0]
 800bd2e:	699b      	ldr	r3, [r3, #24]
 800bd30:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 800bd32:	2300      	movs	r3, #0
 800bd34:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 800bd36:	687b      	ldr	r3, [r7, #4]
 800bd38:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 800bd3a:	69bb      	ldr	r3, [r7, #24]
 800bd3c:	f003 0310 	and.w	r3, r3, #16
 800bd40:	2b00      	cmp	r3, #0
 800bd42:	d068      	beq.n	800be16 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800bd44:	68fb      	ldr	r3, [r7, #12]
 800bd46:	681b      	ldr	r3, [r3, #0]
 800bd48:	2210      	movs	r2, #16
 800bd4a:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800bd4c:	e049      	b.n	800bde2 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800bd4e:	68bb      	ldr	r3, [r7, #8]
 800bd50:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bd54:	d045      	beq.n	800bde2 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800bd56:	f7fd f9b5 	bl	80090c4 <HAL_GetTick>
 800bd5a:	4602      	mov	r2, r0
 800bd5c:	69fb      	ldr	r3, [r7, #28]
 800bd5e:	1ad3      	subs	r3, r2, r3
 800bd60:	68ba      	ldr	r2, [r7, #8]
 800bd62:	429a      	cmp	r2, r3
 800bd64:	d302      	bcc.n	800bd6c <I2C_IsErrorOccurred+0x54>
 800bd66:	68bb      	ldr	r3, [r7, #8]
 800bd68:	2b00      	cmp	r3, #0
 800bd6a:	d13a      	bne.n	800bde2 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 800bd6c:	68fb      	ldr	r3, [r7, #12]
 800bd6e:	681b      	ldr	r3, [r3, #0]
 800bd70:	685b      	ldr	r3, [r3, #4]
 800bd72:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800bd76:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 800bd78:	68fb      	ldr	r3, [r7, #12]
 800bd7a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800bd7e:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 800bd80:	68fb      	ldr	r3, [r7, #12]
 800bd82:	681b      	ldr	r3, [r3, #0]
 800bd84:	699b      	ldr	r3, [r3, #24]
 800bd86:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800bd8a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800bd8e:	d121      	bne.n	800bdd4 <I2C_IsErrorOccurred+0xbc>
 800bd90:	697b      	ldr	r3, [r7, #20]
 800bd92:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800bd96:	d01d      	beq.n	800bdd4 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 800bd98:	7cfb      	ldrb	r3, [r7, #19]
 800bd9a:	2b20      	cmp	r3, #32
 800bd9c:	d01a      	beq.n	800bdd4 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800bd9e:	68fb      	ldr	r3, [r7, #12]
 800bda0:	681b      	ldr	r3, [r3, #0]
 800bda2:	685a      	ldr	r2, [r3, #4]
 800bda4:	68fb      	ldr	r3, [r7, #12]
 800bda6:	681b      	ldr	r3, [r3, #0]
 800bda8:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800bdac:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 800bdae:	f7fd f989 	bl	80090c4 <HAL_GetTick>
 800bdb2:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800bdb4:	e00e      	b.n	800bdd4 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800bdb6:	f7fd f985 	bl	80090c4 <HAL_GetTick>
 800bdba:	4602      	mov	r2, r0
 800bdbc:	69fb      	ldr	r3, [r7, #28]
 800bdbe:	1ad3      	subs	r3, r2, r3
 800bdc0:	2b19      	cmp	r3, #25
 800bdc2:	d907      	bls.n	800bdd4 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 800bdc4:	6a3b      	ldr	r3, [r7, #32]
 800bdc6:	f043 0320 	orr.w	r3, r3, #32
 800bdca:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 800bdcc:	2301      	movs	r3, #1
 800bdce:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 800bdd2:	e006      	b.n	800bde2 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800bdd4:	68fb      	ldr	r3, [r7, #12]
 800bdd6:	681b      	ldr	r3, [r3, #0]
 800bdd8:	699b      	ldr	r3, [r3, #24]
 800bdda:	f003 0320 	and.w	r3, r3, #32
 800bdde:	2b20      	cmp	r3, #32
 800bde0:	d1e9      	bne.n	800bdb6 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800bde2:	68fb      	ldr	r3, [r7, #12]
 800bde4:	681b      	ldr	r3, [r3, #0]
 800bde6:	699b      	ldr	r3, [r3, #24]
 800bde8:	f003 0320 	and.w	r3, r3, #32
 800bdec:	2b20      	cmp	r3, #32
 800bdee:	d003      	beq.n	800bdf8 <I2C_IsErrorOccurred+0xe0>
 800bdf0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800bdf4:	2b00      	cmp	r3, #0
 800bdf6:	d0aa      	beq.n	800bd4e <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 800bdf8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800bdfc:	2b00      	cmp	r3, #0
 800bdfe:	d103      	bne.n	800be08 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800be00:	68fb      	ldr	r3, [r7, #12]
 800be02:	681b      	ldr	r3, [r3, #0]
 800be04:	2220      	movs	r2, #32
 800be06:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 800be08:	6a3b      	ldr	r3, [r7, #32]
 800be0a:	f043 0304 	orr.w	r3, r3, #4
 800be0e:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 800be10:	2301      	movs	r3, #1
 800be12:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 800be16:	68fb      	ldr	r3, [r7, #12]
 800be18:	681b      	ldr	r3, [r3, #0]
 800be1a:	699b      	ldr	r3, [r3, #24]
 800be1c:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 800be1e:	69bb      	ldr	r3, [r7, #24]
 800be20:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800be24:	2b00      	cmp	r3, #0
 800be26:	d00b      	beq.n	800be40 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 800be28:	6a3b      	ldr	r3, [r7, #32]
 800be2a:	f043 0301 	orr.w	r3, r3, #1
 800be2e:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800be30:	68fb      	ldr	r3, [r7, #12]
 800be32:	681b      	ldr	r3, [r3, #0]
 800be34:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800be38:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800be3a:	2301      	movs	r3, #1
 800be3c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 800be40:	69bb      	ldr	r3, [r7, #24]
 800be42:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800be46:	2b00      	cmp	r3, #0
 800be48:	d00b      	beq.n	800be62 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 800be4a:	6a3b      	ldr	r3, [r7, #32]
 800be4c:	f043 0308 	orr.w	r3, r3, #8
 800be50:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800be52:	68fb      	ldr	r3, [r7, #12]
 800be54:	681b      	ldr	r3, [r3, #0]
 800be56:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800be5a:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800be5c:	2301      	movs	r3, #1
 800be5e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 800be62:	69bb      	ldr	r3, [r7, #24]
 800be64:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800be68:	2b00      	cmp	r3, #0
 800be6a:	d00b      	beq.n	800be84 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 800be6c:	6a3b      	ldr	r3, [r7, #32]
 800be6e:	f043 0302 	orr.w	r3, r3, #2
 800be72:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800be74:	68fb      	ldr	r3, [r7, #12]
 800be76:	681b      	ldr	r3, [r3, #0]
 800be78:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800be7c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800be7e:	2301      	movs	r3, #1
 800be80:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 800be84:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800be88:	2b00      	cmp	r3, #0
 800be8a:	d01c      	beq.n	800bec6 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800be8c:	68f8      	ldr	r0, [r7, #12]
 800be8e:	f7ff fdaf 	bl	800b9f0 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800be92:	68fb      	ldr	r3, [r7, #12]
 800be94:	681b      	ldr	r3, [r3, #0]
 800be96:	6859      	ldr	r1, [r3, #4]
 800be98:	68fb      	ldr	r3, [r7, #12]
 800be9a:	681a      	ldr	r2, [r3, #0]
 800be9c:	4b0d      	ldr	r3, [pc, #52]	@ (800bed4 <I2C_IsErrorOccurred+0x1bc>)
 800be9e:	400b      	ands	r3, r1
 800bea0:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 800bea2:	68fb      	ldr	r3, [r7, #12]
 800bea4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800bea6:	6a3b      	ldr	r3, [r7, #32]
 800bea8:	431a      	orrs	r2, r3
 800beaa:	68fb      	ldr	r3, [r7, #12]
 800beac:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800beae:	68fb      	ldr	r3, [r7, #12]
 800beb0:	2220      	movs	r2, #32
 800beb2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800beb6:	68fb      	ldr	r3, [r7, #12]
 800beb8:	2200      	movs	r2, #0
 800beba:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800bebe:	68fb      	ldr	r3, [r7, #12]
 800bec0:	2200      	movs	r2, #0
 800bec2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 800bec6:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 800beca:	4618      	mov	r0, r3
 800becc:	3728      	adds	r7, #40	@ 0x28
 800bece:	46bd      	mov	sp, r7
 800bed0:	bd80      	pop	{r7, pc}
 800bed2:	bf00      	nop
 800bed4:	fe00e800 	.word	0xfe00e800

0800bed8 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 800bed8:	b480      	push	{r7}
 800beda:	b087      	sub	sp, #28
 800bedc:	af00      	add	r7, sp, #0
 800bede:	60f8      	str	r0, [r7, #12]
 800bee0:	607b      	str	r3, [r7, #4]
 800bee2:	460b      	mov	r3, r1
 800bee4:	817b      	strh	r3, [r7, #10]
 800bee6:	4613      	mov	r3, r2
 800bee8:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800beea:	897b      	ldrh	r3, [r7, #10]
 800beec:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800bef0:	7a7b      	ldrb	r3, [r7, #9]
 800bef2:	041b      	lsls	r3, r3, #16
 800bef4:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800bef8:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800befa:	687b      	ldr	r3, [r7, #4]
 800befc:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800befe:	6a3b      	ldr	r3, [r7, #32]
 800bf00:	4313      	orrs	r3, r2
 800bf02:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800bf06:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 800bf08:	68fb      	ldr	r3, [r7, #12]
 800bf0a:	681b      	ldr	r3, [r3, #0]
 800bf0c:	685a      	ldr	r2, [r3, #4]
 800bf0e:	6a3b      	ldr	r3, [r7, #32]
 800bf10:	0d5b      	lsrs	r3, r3, #21
 800bf12:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 800bf16:	4b08      	ldr	r3, [pc, #32]	@ (800bf38 <I2C_TransferConfig+0x60>)
 800bf18:	430b      	orrs	r3, r1
 800bf1a:	43db      	mvns	r3, r3
 800bf1c:	ea02 0103 	and.w	r1, r2, r3
 800bf20:	68fb      	ldr	r3, [r7, #12]
 800bf22:	681b      	ldr	r3, [r3, #0]
 800bf24:	697a      	ldr	r2, [r7, #20]
 800bf26:	430a      	orrs	r2, r1
 800bf28:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800bf2a:	bf00      	nop
 800bf2c:	371c      	adds	r7, #28
 800bf2e:	46bd      	mov	sp, r7
 800bf30:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf34:	4770      	bx	lr
 800bf36:	bf00      	nop
 800bf38:	03ff63ff 	.word	0x03ff63ff

0800bf3c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800bf3c:	b480      	push	{r7}
 800bf3e:	b083      	sub	sp, #12
 800bf40:	af00      	add	r7, sp, #0
 800bf42:	6078      	str	r0, [r7, #4]
 800bf44:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800bf46:	687b      	ldr	r3, [r7, #4]
 800bf48:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800bf4c:	b2db      	uxtb	r3, r3
 800bf4e:	2b20      	cmp	r3, #32
 800bf50:	d138      	bne.n	800bfc4 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800bf52:	687b      	ldr	r3, [r7, #4]
 800bf54:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800bf58:	2b01      	cmp	r3, #1
 800bf5a:	d101      	bne.n	800bf60 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800bf5c:	2302      	movs	r3, #2
 800bf5e:	e032      	b.n	800bfc6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800bf60:	687b      	ldr	r3, [r7, #4]
 800bf62:	2201      	movs	r2, #1
 800bf64:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800bf68:	687b      	ldr	r3, [r7, #4]
 800bf6a:	2224      	movs	r2, #36	@ 0x24
 800bf6c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800bf70:	687b      	ldr	r3, [r7, #4]
 800bf72:	681b      	ldr	r3, [r3, #0]
 800bf74:	681a      	ldr	r2, [r3, #0]
 800bf76:	687b      	ldr	r3, [r7, #4]
 800bf78:	681b      	ldr	r3, [r3, #0]
 800bf7a:	f022 0201 	bic.w	r2, r2, #1
 800bf7e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800bf80:	687b      	ldr	r3, [r7, #4]
 800bf82:	681b      	ldr	r3, [r3, #0]
 800bf84:	681a      	ldr	r2, [r3, #0]
 800bf86:	687b      	ldr	r3, [r7, #4]
 800bf88:	681b      	ldr	r3, [r3, #0]
 800bf8a:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800bf8e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800bf90:	687b      	ldr	r3, [r7, #4]
 800bf92:	681b      	ldr	r3, [r3, #0]
 800bf94:	6819      	ldr	r1, [r3, #0]
 800bf96:	687b      	ldr	r3, [r7, #4]
 800bf98:	681b      	ldr	r3, [r3, #0]
 800bf9a:	683a      	ldr	r2, [r7, #0]
 800bf9c:	430a      	orrs	r2, r1
 800bf9e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800bfa0:	687b      	ldr	r3, [r7, #4]
 800bfa2:	681b      	ldr	r3, [r3, #0]
 800bfa4:	681a      	ldr	r2, [r3, #0]
 800bfa6:	687b      	ldr	r3, [r7, #4]
 800bfa8:	681b      	ldr	r3, [r3, #0]
 800bfaa:	f042 0201 	orr.w	r2, r2, #1
 800bfae:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800bfb0:	687b      	ldr	r3, [r7, #4]
 800bfb2:	2220      	movs	r2, #32
 800bfb4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800bfb8:	687b      	ldr	r3, [r7, #4]
 800bfba:	2200      	movs	r2, #0
 800bfbc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800bfc0:	2300      	movs	r3, #0
 800bfc2:	e000      	b.n	800bfc6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800bfc4:	2302      	movs	r3, #2
  }
}
 800bfc6:	4618      	mov	r0, r3
 800bfc8:	370c      	adds	r7, #12
 800bfca:	46bd      	mov	sp, r7
 800bfcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfd0:	4770      	bx	lr

0800bfd2 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800bfd2:	b480      	push	{r7}
 800bfd4:	b085      	sub	sp, #20
 800bfd6:	af00      	add	r7, sp, #0
 800bfd8:	6078      	str	r0, [r7, #4]
 800bfda:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800bfdc:	687b      	ldr	r3, [r7, #4]
 800bfde:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800bfe2:	b2db      	uxtb	r3, r3
 800bfe4:	2b20      	cmp	r3, #32
 800bfe6:	d139      	bne.n	800c05c <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800bfe8:	687b      	ldr	r3, [r7, #4]
 800bfea:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800bfee:	2b01      	cmp	r3, #1
 800bff0:	d101      	bne.n	800bff6 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800bff2:	2302      	movs	r3, #2
 800bff4:	e033      	b.n	800c05e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800bff6:	687b      	ldr	r3, [r7, #4]
 800bff8:	2201      	movs	r2, #1
 800bffa:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800bffe:	687b      	ldr	r3, [r7, #4]
 800c000:	2224      	movs	r2, #36	@ 0x24
 800c002:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800c006:	687b      	ldr	r3, [r7, #4]
 800c008:	681b      	ldr	r3, [r3, #0]
 800c00a:	681a      	ldr	r2, [r3, #0]
 800c00c:	687b      	ldr	r3, [r7, #4]
 800c00e:	681b      	ldr	r3, [r3, #0]
 800c010:	f022 0201 	bic.w	r2, r2, #1
 800c014:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800c016:	687b      	ldr	r3, [r7, #4]
 800c018:	681b      	ldr	r3, [r3, #0]
 800c01a:	681b      	ldr	r3, [r3, #0]
 800c01c:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800c01e:	68fb      	ldr	r3, [r7, #12]
 800c020:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 800c024:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800c026:	683b      	ldr	r3, [r7, #0]
 800c028:	021b      	lsls	r3, r3, #8
 800c02a:	68fa      	ldr	r2, [r7, #12]
 800c02c:	4313      	orrs	r3, r2
 800c02e:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800c030:	687b      	ldr	r3, [r7, #4]
 800c032:	681b      	ldr	r3, [r3, #0]
 800c034:	68fa      	ldr	r2, [r7, #12]
 800c036:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800c038:	687b      	ldr	r3, [r7, #4]
 800c03a:	681b      	ldr	r3, [r3, #0]
 800c03c:	681a      	ldr	r2, [r3, #0]
 800c03e:	687b      	ldr	r3, [r7, #4]
 800c040:	681b      	ldr	r3, [r3, #0]
 800c042:	f042 0201 	orr.w	r2, r2, #1
 800c046:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800c048:	687b      	ldr	r3, [r7, #4]
 800c04a:	2220      	movs	r2, #32
 800c04c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800c050:	687b      	ldr	r3, [r7, #4]
 800c052:	2200      	movs	r2, #0
 800c054:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800c058:	2300      	movs	r3, #0
 800c05a:	e000      	b.n	800c05e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800c05c:	2302      	movs	r3, #2
  }
}
 800c05e:	4618      	mov	r0, r3
 800c060:	3714      	adds	r7, #20
 800c062:	46bd      	mov	sp, r7
 800c064:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c068:	4770      	bx	lr
	...

0800c06c <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 800c06c:	b480      	push	{r7}
 800c06e:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 800c070:	4b04      	ldr	r3, [pc, #16]	@ (800c084 <HAL_PWREx_GetVoltageRange+0x18>)
 800c072:	681b      	ldr	r3, [r3, #0]
 800c074:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 800c078:	4618      	mov	r0, r3
 800c07a:	46bd      	mov	sp, r7
 800c07c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c080:	4770      	bx	lr
 800c082:	bf00      	nop
 800c084:	40007000 	.word	0x40007000

0800c088 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800c088:	b480      	push	{r7}
 800c08a:	b085      	sub	sp, #20
 800c08c:	af00      	add	r7, sp, #0
 800c08e:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800c090:	687b      	ldr	r3, [r7, #4]
 800c092:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800c096:	d130      	bne.n	800c0fa <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 800c098:	4b23      	ldr	r3, [pc, #140]	@ (800c128 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800c09a:	681b      	ldr	r3, [r3, #0]
 800c09c:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800c0a0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800c0a4:	d038      	beq.n	800c118 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800c0a6:	4b20      	ldr	r3, [pc, #128]	@ (800c128 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800c0a8:	681b      	ldr	r3, [r3, #0]
 800c0aa:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800c0ae:	4a1e      	ldr	r2, [pc, #120]	@ (800c128 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800c0b0:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800c0b4:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800c0b6:	4b1d      	ldr	r3, [pc, #116]	@ (800c12c <HAL_PWREx_ControlVoltageScaling+0xa4>)
 800c0b8:	681b      	ldr	r3, [r3, #0]
 800c0ba:	2232      	movs	r2, #50	@ 0x32
 800c0bc:	fb02 f303 	mul.w	r3, r2, r3
 800c0c0:	4a1b      	ldr	r2, [pc, #108]	@ (800c130 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800c0c2:	fba2 2303 	umull	r2, r3, r2, r3
 800c0c6:	0c9b      	lsrs	r3, r3, #18
 800c0c8:	3301      	adds	r3, #1
 800c0ca:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800c0cc:	e002      	b.n	800c0d4 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800c0ce:	68fb      	ldr	r3, [r7, #12]
 800c0d0:	3b01      	subs	r3, #1
 800c0d2:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800c0d4:	4b14      	ldr	r3, [pc, #80]	@ (800c128 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800c0d6:	695b      	ldr	r3, [r3, #20]
 800c0d8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800c0dc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800c0e0:	d102      	bne.n	800c0e8 <HAL_PWREx_ControlVoltageScaling+0x60>
 800c0e2:	68fb      	ldr	r3, [r7, #12]
 800c0e4:	2b00      	cmp	r3, #0
 800c0e6:	d1f2      	bne.n	800c0ce <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800c0e8:	4b0f      	ldr	r3, [pc, #60]	@ (800c128 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800c0ea:	695b      	ldr	r3, [r3, #20]
 800c0ec:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800c0f0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800c0f4:	d110      	bne.n	800c118 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800c0f6:	2303      	movs	r3, #3
 800c0f8:	e00f      	b.n	800c11a <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800c0fa:	4b0b      	ldr	r3, [pc, #44]	@ (800c128 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800c0fc:	681b      	ldr	r3, [r3, #0]
 800c0fe:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800c102:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800c106:	d007      	beq.n	800c118 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800c108:	4b07      	ldr	r3, [pc, #28]	@ (800c128 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800c10a:	681b      	ldr	r3, [r3, #0]
 800c10c:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800c110:	4a05      	ldr	r2, [pc, #20]	@ (800c128 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800c112:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800c116:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 800c118:	2300      	movs	r3, #0
}
 800c11a:	4618      	mov	r0, r3
 800c11c:	3714      	adds	r7, #20
 800c11e:	46bd      	mov	sp, r7
 800c120:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c124:	4770      	bx	lr
 800c126:	bf00      	nop
 800c128:	40007000 	.word	0x40007000
 800c12c:	20000000 	.word	0x20000000
 800c130:	431bde83 	.word	0x431bde83

0800c134 <HAL_QSPI_Init>:
  *        in the QSPI_InitTypeDef and initialize the associated handle.
  * @param hqspi QSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Init(QSPI_HandleTypeDef *hqspi)
{
 800c134:	b580      	push	{r7, lr}
 800c136:	b086      	sub	sp, #24
 800c138:	af02      	add	r7, sp, #8
 800c13a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 800c13c:	f7fc ffc2 	bl	80090c4 <HAL_GetTick>
 800c140:	60f8      	str	r0, [r7, #12]

  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 800c142:	687b      	ldr	r3, [r7, #4]
 800c144:	2b00      	cmp	r3, #0
 800c146:	d101      	bne.n	800c14c <HAL_QSPI_Init+0x18>
  {
    return HAL_ERROR;
 800c148:	2301      	movs	r3, #1
 800c14a:	e063      	b.n	800c214 <HAL_QSPI_Init+0xe0>
  {
    assert_param(IS_QSPI_FLASH_ID(hqspi->Init.FlashID));
  }
#endif

  if(hqspi->State == HAL_QSPI_STATE_RESET)
 800c14c:	687b      	ldr	r3, [r7, #4]
 800c14e:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 800c152:	b2db      	uxtb	r3, r3
 800c154:	2b00      	cmp	r3, #0
 800c156:	d10b      	bne.n	800c170 <HAL_QSPI_Init+0x3c>
  {
    /* Allocate lock resource and initialize it */
    hqspi->Lock = HAL_UNLOCKED;
 800c158:	687b      	ldr	r3, [r7, #4]
 800c15a:	2200      	movs	r2, #0
 800c15c:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

    /* Init the low level hardware */
    hqspi->MspInitCallback(hqspi);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_QSPI_MspInit(hqspi);
 800c160:	6878      	ldr	r0, [r7, #4]
 800c162:	f7f9 fae9 	bl	8005738 <HAL_QSPI_MspInit>
#endif

    /* Configure the default timeout for the QSPI memory access */
    HAL_QSPI_SetTimeout(hqspi, HAL_QSPI_TIMEOUT_DEFAULT_VALUE);
 800c166:	f241 3188 	movw	r1, #5000	@ 0x1388
 800c16a:	6878      	ldr	r0, [r7, #4]
 800c16c:	f000 fa68 	bl	800c640 <HAL_QSPI_SetTimeout>
  }

  /* Configure QSPI FIFO Threshold */
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 800c170:	687b      	ldr	r3, [r7, #4]
 800c172:	681b      	ldr	r3, [r3, #0]
 800c174:	681b      	ldr	r3, [r3, #0]
 800c176:	f423 6170 	bic.w	r1, r3, #3840	@ 0xf00
 800c17a:	687b      	ldr	r3, [r7, #4]
 800c17c:	689b      	ldr	r3, [r3, #8]
 800c17e:	3b01      	subs	r3, #1
 800c180:	021a      	lsls	r2, r3, #8
 800c182:	687b      	ldr	r3, [r7, #4]
 800c184:	681b      	ldr	r3, [r3, #0]
 800c186:	430a      	orrs	r2, r1
 800c188:	601a      	str	r2, [r3, #0]
             ((hqspi->Init.FifoThreshold - 1U) << QUADSPI_CR_FTHRES_Pos));

  /* Wait till BUSY flag reset */
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 800c18a:	687b      	ldr	r3, [r7, #4]
 800c18c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c18e:	9300      	str	r3, [sp, #0]
 800c190:	68fb      	ldr	r3, [r7, #12]
 800c192:	2200      	movs	r2, #0
 800c194:	2120      	movs	r1, #32
 800c196:	6878      	ldr	r0, [r7, #4]
 800c198:	f000 fa60 	bl	800c65c <QSPI_WaitFlagStateUntilTimeout>
 800c19c:	4603      	mov	r3, r0
 800c19e:	72fb      	strb	r3, [r7, #11]

  if(status == HAL_OK)
 800c1a0:	7afb      	ldrb	r3, [r7, #11]
 800c1a2:	2b00      	cmp	r3, #0
 800c1a4:	d131      	bne.n	800c20a <HAL_QSPI_Init+0xd6>
#if defined(QUADSPI_CR_DFM)
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM),
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting  | hqspi->Init.FlashID | hqspi->Init.DualFlash));
#else
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT),
 800c1a6:	687b      	ldr	r3, [r7, #4]
 800c1a8:	681b      	ldr	r3, [r3, #0]
 800c1aa:	681b      	ldr	r3, [r3, #0]
 800c1ac:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 800c1b0:	f023 0310 	bic.w	r3, r3, #16
 800c1b4:	687a      	ldr	r2, [r7, #4]
 800c1b6:	6852      	ldr	r2, [r2, #4]
 800c1b8:	0611      	lsls	r1, r2, #24
 800c1ba:	687a      	ldr	r2, [r7, #4]
 800c1bc:	68d2      	ldr	r2, [r2, #12]
 800c1be:	4311      	orrs	r1, r2
 800c1c0:	687a      	ldr	r2, [r7, #4]
 800c1c2:	6812      	ldr	r2, [r2, #0]
 800c1c4:	430b      	orrs	r3, r1
 800c1c6:	6013      	str	r3, [r2, #0]
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting));
#endif

    /* Configure QSPI Flash Size, CS High Time and Clock Mode */
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
 800c1c8:	687b      	ldr	r3, [r7, #4]
 800c1ca:	681b      	ldr	r3, [r3, #0]
 800c1cc:	685a      	ldr	r2, [r3, #4]
 800c1ce:	4b13      	ldr	r3, [pc, #76]	@ (800c21c <HAL_QSPI_Init+0xe8>)
 800c1d0:	4013      	ands	r3, r2
 800c1d2:	687a      	ldr	r2, [r7, #4]
 800c1d4:	6912      	ldr	r2, [r2, #16]
 800c1d6:	0411      	lsls	r1, r2, #16
 800c1d8:	687a      	ldr	r2, [r7, #4]
 800c1da:	6952      	ldr	r2, [r2, #20]
 800c1dc:	4311      	orrs	r1, r2
 800c1de:	687a      	ldr	r2, [r7, #4]
 800c1e0:	6992      	ldr	r2, [r2, #24]
 800c1e2:	4311      	orrs	r1, r2
 800c1e4:	687a      	ldr	r2, [r7, #4]
 800c1e6:	6812      	ldr	r2, [r2, #0]
 800c1e8:	430b      	orrs	r3, r1
 800c1ea:	6053      	str	r3, [r2, #4]
               ((hqspi->Init.FlashSize << QUADSPI_DCR_FSIZE_Pos) |
                hqspi->Init.ChipSelectHighTime | hqspi->Init.ClockMode));

    /* Enable the QSPI peripheral */
    __HAL_QSPI_ENABLE(hqspi);
 800c1ec:	687b      	ldr	r3, [r7, #4]
 800c1ee:	681b      	ldr	r3, [r3, #0]
 800c1f0:	681a      	ldr	r2, [r3, #0]
 800c1f2:	687b      	ldr	r3, [r7, #4]
 800c1f4:	681b      	ldr	r3, [r3, #0]
 800c1f6:	f042 0201 	orr.w	r2, r2, #1
 800c1fa:	601a      	str	r2, [r3, #0]

    /* Set QSPI error code to none */
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 800c1fc:	687b      	ldr	r3, [r7, #4]
 800c1fe:	2200      	movs	r2, #0
 800c200:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Initialize the QSPI state */
    hqspi->State = HAL_QSPI_STATE_READY;
 800c202:	687b      	ldr	r3, [r7, #4]
 800c204:	2201      	movs	r2, #1
 800c206:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
  }

  /* Release Lock */
  __HAL_UNLOCK(hqspi);
 800c20a:	687b      	ldr	r3, [r7, #4]
 800c20c:	2200      	movs	r2, #0
 800c20e:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  /* Return function status */
  return status;
 800c212:	7afb      	ldrb	r3, [r7, #11]
}
 800c214:	4618      	mov	r0, r3
 800c216:	3710      	adds	r7, #16
 800c218:	46bd      	mov	sp, r7
 800c21a:	bd80      	pop	{r7, pc}
 800c21c:	ffe0f8fe 	.word	0xffe0f8fe

0800c220 <HAL_QSPI_Command>:
  * @param Timeout Timeout duration
  * @note   This function is used only in Indirect Read or Write Modes
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Command(QSPI_HandleTypeDef *hqspi, QSPI_CommandTypeDef *cmd, uint32_t Timeout)
{
 800c220:	b580      	push	{r7, lr}
 800c222:	b088      	sub	sp, #32
 800c224:	af02      	add	r7, sp, #8
 800c226:	60f8      	str	r0, [r7, #12]
 800c228:	60b9      	str	r1, [r7, #8]
 800c22a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 800c22c:	f7fc ff4a 	bl	80090c4 <HAL_GetTick>
 800c230:	6138      	str	r0, [r7, #16]
  assert_param(IS_QSPI_DDR_MODE(cmd->DdrMode));
  assert_param(IS_QSPI_DDR_HHC(cmd->DdrHoldHalfCycle));
  assert_param(IS_QSPI_SIOO_MODE(cmd->SIOOMode));

  /* Process locked */
  __HAL_LOCK(hqspi);
 800c232:	68fb      	ldr	r3, [r7, #12]
 800c234:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800c238:	b2db      	uxtb	r3, r3
 800c23a:	2b01      	cmp	r3, #1
 800c23c:	d101      	bne.n	800c242 <HAL_QSPI_Command+0x22>
 800c23e:	2302      	movs	r3, #2
 800c240:	e048      	b.n	800c2d4 <HAL_QSPI_Command+0xb4>
 800c242:	68fb      	ldr	r3, [r7, #12]
 800c244:	2201      	movs	r2, #1
 800c246:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  if(hqspi->State == HAL_QSPI_STATE_READY)
 800c24a:	68fb      	ldr	r3, [r7, #12]
 800c24c:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 800c250:	b2db      	uxtb	r3, r3
 800c252:	2b01      	cmp	r3, #1
 800c254:	d137      	bne.n	800c2c6 <HAL_QSPI_Command+0xa6>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 800c256:	68fb      	ldr	r3, [r7, #12]
 800c258:	2200      	movs	r2, #0
 800c25a:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Update QSPI state */
    hqspi->State = HAL_QSPI_STATE_BUSY;
 800c25c:	68fb      	ldr	r3, [r7, #12]
 800c25e:	2202      	movs	r2, #2
 800c260:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

    /* Wait till BUSY flag reset */
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 800c264:	687b      	ldr	r3, [r7, #4]
 800c266:	9300      	str	r3, [sp, #0]
 800c268:	693b      	ldr	r3, [r7, #16]
 800c26a:	2200      	movs	r2, #0
 800c26c:	2120      	movs	r1, #32
 800c26e:	68f8      	ldr	r0, [r7, #12]
 800c270:	f000 f9f4 	bl	800c65c <QSPI_WaitFlagStateUntilTimeout>
 800c274:	4603      	mov	r3, r0
 800c276:	75fb      	strb	r3, [r7, #23]

    if (status == HAL_OK)
 800c278:	7dfb      	ldrb	r3, [r7, #23]
 800c27a:	2b00      	cmp	r3, #0
 800c27c:	d125      	bne.n	800c2ca <HAL_QSPI_Command+0xaa>
    {
      /* Call the configuration function */
      QSPI_Config(hqspi, cmd, QSPI_FUNCTIONAL_MODE_INDIRECT_WRITE);
 800c27e:	2200      	movs	r2, #0
 800c280:	68b9      	ldr	r1, [r7, #8]
 800c282:	68f8      	ldr	r0, [r7, #12]
 800c284:	f000 fa21 	bl	800c6ca <QSPI_Config>

      if (cmd->DataMode == QSPI_DATA_NONE)
 800c288:	68bb      	ldr	r3, [r7, #8]
 800c28a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c28c:	2b00      	cmp	r3, #0
 800c28e:	d115      	bne.n	800c2bc <HAL_QSPI_Command+0x9c>
      {
        /* When there is no data phase, the transfer start as soon as the configuration is done
        so wait until TC flag is set to go back in idle state */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, Timeout);
 800c290:	687b      	ldr	r3, [r7, #4]
 800c292:	9300      	str	r3, [sp, #0]
 800c294:	693b      	ldr	r3, [r7, #16]
 800c296:	2201      	movs	r2, #1
 800c298:	2102      	movs	r1, #2
 800c29a:	68f8      	ldr	r0, [r7, #12]
 800c29c:	f000 f9de 	bl	800c65c <QSPI_WaitFlagStateUntilTimeout>
 800c2a0:	4603      	mov	r3, r0
 800c2a2:	75fb      	strb	r3, [r7, #23]

        if (status == HAL_OK)
 800c2a4:	7dfb      	ldrb	r3, [r7, #23]
 800c2a6:	2b00      	cmp	r3, #0
 800c2a8:	d10f      	bne.n	800c2ca <HAL_QSPI_Command+0xaa>
        {
          __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 800c2aa:	68fb      	ldr	r3, [r7, #12]
 800c2ac:	681b      	ldr	r3, [r3, #0]
 800c2ae:	2202      	movs	r2, #2
 800c2b0:	60da      	str	r2, [r3, #12]

          /* Update QSPI state */
          hqspi->State = HAL_QSPI_STATE_READY;
 800c2b2:	68fb      	ldr	r3, [r7, #12]
 800c2b4:	2201      	movs	r2, #1
 800c2b6:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
 800c2ba:	e006      	b.n	800c2ca <HAL_QSPI_Command+0xaa>
        }
      }
      else
      {
        /* Update QSPI state */
        hqspi->State = HAL_QSPI_STATE_READY;
 800c2bc:	68fb      	ldr	r3, [r7, #12]
 800c2be:	2201      	movs	r2, #1
 800c2c0:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
 800c2c4:	e001      	b.n	800c2ca <HAL_QSPI_Command+0xaa>
      }
    }
  }
  else
  {
    status = HAL_BUSY;
 800c2c6:	2302      	movs	r3, #2
 800c2c8:	75fb      	strb	r3, [r7, #23]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hqspi);
 800c2ca:	68fb      	ldr	r3, [r7, #12]
 800c2cc:	2200      	movs	r2, #0
 800c2ce:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  /* Return function status */
  return status;
 800c2d2:	7dfb      	ldrb	r3, [r7, #23]
}
 800c2d4:	4618      	mov	r0, r3
 800c2d6:	3718      	adds	r7, #24
 800c2d8:	46bd      	mov	sp, r7
 800c2da:	bd80      	pop	{r7, pc}

0800c2dc <HAL_QSPI_Transmit>:
  * @param Timeout Timeout duration
  * @note   This function is used only in Indirect Write Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Transmit(QSPI_HandleTypeDef *hqspi, uint8_t *pData, uint32_t Timeout)
{
 800c2dc:	b580      	push	{r7, lr}
 800c2de:	b08a      	sub	sp, #40	@ 0x28
 800c2e0:	af02      	add	r7, sp, #8
 800c2e2:	60f8      	str	r0, [r7, #12]
 800c2e4:	60b9      	str	r1, [r7, #8]
 800c2e6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800c2e8:	2300      	movs	r3, #0
 800c2ea:	77fb      	strb	r3, [r7, #31]
  uint32_t tickstart = HAL_GetTick();
 800c2ec:	f7fc feea 	bl	80090c4 <HAL_GetTick>
 800c2f0:	61b8      	str	r0, [r7, #24]
  __IO uint32_t *data_reg = &hqspi->Instance->DR;
 800c2f2:	68fb      	ldr	r3, [r7, #12]
 800c2f4:	681b      	ldr	r3, [r3, #0]
 800c2f6:	3320      	adds	r3, #32
 800c2f8:	617b      	str	r3, [r7, #20]

  /* Process locked */
  __HAL_LOCK(hqspi);
 800c2fa:	68fb      	ldr	r3, [r7, #12]
 800c2fc:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800c300:	b2db      	uxtb	r3, r3
 800c302:	2b01      	cmp	r3, #1
 800c304:	d101      	bne.n	800c30a <HAL_QSPI_Transmit+0x2e>
 800c306:	2302      	movs	r3, #2
 800c308:	e07b      	b.n	800c402 <HAL_QSPI_Transmit+0x126>
 800c30a:	68fb      	ldr	r3, [r7, #12]
 800c30c:	2201      	movs	r2, #1
 800c30e:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  if(hqspi->State == HAL_QSPI_STATE_READY)
 800c312:	68fb      	ldr	r3, [r7, #12]
 800c314:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 800c318:	b2db      	uxtb	r3, r3
 800c31a:	2b01      	cmp	r3, #1
 800c31c:	d16a      	bne.n	800c3f4 <HAL_QSPI_Transmit+0x118>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 800c31e:	68fb      	ldr	r3, [r7, #12]
 800c320:	2200      	movs	r2, #0
 800c322:	63da      	str	r2, [r3, #60]	@ 0x3c

    if(pData != NULL )
 800c324:	68bb      	ldr	r3, [r7, #8]
 800c326:	2b00      	cmp	r3, #0
 800c328:	d05b      	beq.n	800c3e2 <HAL_QSPI_Transmit+0x106>
    {
      /* Update state */
      hqspi->State = HAL_QSPI_STATE_BUSY_INDIRECT_TX;
 800c32a:	68fb      	ldr	r3, [r7, #12]
 800c32c:	2212      	movs	r2, #18
 800c32e:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

      /* Configure counters and size of the handle */
      hqspi->TxXferCount = READ_REG(hqspi->Instance->DLR) + 1U;
 800c332:	68fb      	ldr	r3, [r7, #12]
 800c334:	681b      	ldr	r3, [r3, #0]
 800c336:	691b      	ldr	r3, [r3, #16]
 800c338:	1c5a      	adds	r2, r3, #1
 800c33a:	68fb      	ldr	r3, [r7, #12]
 800c33c:	625a      	str	r2, [r3, #36]	@ 0x24
      hqspi->TxXferSize = READ_REG(hqspi->Instance->DLR) + 1U;
 800c33e:	68fb      	ldr	r3, [r7, #12]
 800c340:	681b      	ldr	r3, [r3, #0]
 800c342:	691b      	ldr	r3, [r3, #16]
 800c344:	1c5a      	adds	r2, r3, #1
 800c346:	68fb      	ldr	r3, [r7, #12]
 800c348:	621a      	str	r2, [r3, #32]
      hqspi->pTxBuffPtr = pData;
 800c34a:	68fb      	ldr	r3, [r7, #12]
 800c34c:	68ba      	ldr	r2, [r7, #8]
 800c34e:	61da      	str	r2, [r3, #28]

      /* Configure QSPI: CCR register with functional as indirect write */
      MODIFY_REG(hqspi->Instance->CCR, QUADSPI_CCR_FMODE, QSPI_FUNCTIONAL_MODE_INDIRECT_WRITE);
 800c350:	68fb      	ldr	r3, [r7, #12]
 800c352:	681b      	ldr	r3, [r3, #0]
 800c354:	695a      	ldr	r2, [r3, #20]
 800c356:	68fb      	ldr	r3, [r7, #12]
 800c358:	681b      	ldr	r3, [r3, #0]
 800c35a:	f022 6240 	bic.w	r2, r2, #201326592	@ 0xc000000
 800c35e:	615a      	str	r2, [r3, #20]

      while(hqspi->TxXferCount > 0U)
 800c360:	e01b      	b.n	800c39a <HAL_QSPI_Transmit+0xbe>
      {
        /* Wait until FT flag is set to send data */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_FT, SET, tickstart, Timeout);
 800c362:	687b      	ldr	r3, [r7, #4]
 800c364:	9300      	str	r3, [sp, #0]
 800c366:	69bb      	ldr	r3, [r7, #24]
 800c368:	2201      	movs	r2, #1
 800c36a:	2104      	movs	r1, #4
 800c36c:	68f8      	ldr	r0, [r7, #12]
 800c36e:	f000 f975 	bl	800c65c <QSPI_WaitFlagStateUntilTimeout>
 800c372:	4603      	mov	r3, r0
 800c374:	77fb      	strb	r3, [r7, #31]

        if (status != HAL_OK)
 800c376:	7ffb      	ldrb	r3, [r7, #31]
 800c378:	2b00      	cmp	r3, #0
 800c37a:	d113      	bne.n	800c3a4 <HAL_QSPI_Transmit+0xc8>
        {
          break;
        }

        *((__IO uint8_t *)data_reg) = *hqspi->pTxBuffPtr;
 800c37c:	68fb      	ldr	r3, [r7, #12]
 800c37e:	69db      	ldr	r3, [r3, #28]
 800c380:	781a      	ldrb	r2, [r3, #0]
 800c382:	697b      	ldr	r3, [r7, #20]
 800c384:	701a      	strb	r2, [r3, #0]
        hqspi->pTxBuffPtr++;
 800c386:	68fb      	ldr	r3, [r7, #12]
 800c388:	69db      	ldr	r3, [r3, #28]
 800c38a:	1c5a      	adds	r2, r3, #1
 800c38c:	68fb      	ldr	r3, [r7, #12]
 800c38e:	61da      	str	r2, [r3, #28]
        hqspi->TxXferCount--;
 800c390:	68fb      	ldr	r3, [r7, #12]
 800c392:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c394:	1e5a      	subs	r2, r3, #1
 800c396:	68fb      	ldr	r3, [r7, #12]
 800c398:	625a      	str	r2, [r3, #36]	@ 0x24
      while(hqspi->TxXferCount > 0U)
 800c39a:	68fb      	ldr	r3, [r7, #12]
 800c39c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c39e:	2b00      	cmp	r3, #0
 800c3a0:	d1df      	bne.n	800c362 <HAL_QSPI_Transmit+0x86>
 800c3a2:	e000      	b.n	800c3a6 <HAL_QSPI_Transmit+0xca>
          break;
 800c3a4:	bf00      	nop
      }

      if (status == HAL_OK)
 800c3a6:	7ffb      	ldrb	r3, [r7, #31]
 800c3a8:	2b00      	cmp	r3, #0
 800c3aa:	d115      	bne.n	800c3d8 <HAL_QSPI_Transmit+0xfc>
      {
        /* Wait until TC flag is set to go back in idle state */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, Timeout);
 800c3ac:	687b      	ldr	r3, [r7, #4]
 800c3ae:	9300      	str	r3, [sp, #0]
 800c3b0:	69bb      	ldr	r3, [r7, #24]
 800c3b2:	2201      	movs	r2, #1
 800c3b4:	2102      	movs	r1, #2
 800c3b6:	68f8      	ldr	r0, [r7, #12]
 800c3b8:	f000 f950 	bl	800c65c <QSPI_WaitFlagStateUntilTimeout>
 800c3bc:	4603      	mov	r3, r0
 800c3be:	77fb      	strb	r3, [r7, #31]

        if (status == HAL_OK)
 800c3c0:	7ffb      	ldrb	r3, [r7, #31]
 800c3c2:	2b00      	cmp	r3, #0
 800c3c4:	d108      	bne.n	800c3d8 <HAL_QSPI_Transmit+0xfc>
        {
          /* Clear Transfer Complete bit */
          __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 800c3c6:	68fb      	ldr	r3, [r7, #12]
 800c3c8:	681b      	ldr	r3, [r3, #0]
 800c3ca:	2202      	movs	r2, #2
 800c3cc:	60da      	str	r2, [r3, #12]

#if  (defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx))
          /* Clear Busy bit */
          status = HAL_QSPI_Abort(hqspi);
 800c3ce:	68f8      	ldr	r0, [r7, #12]
 800c3d0:	f000 f8bd 	bl	800c54e <HAL_QSPI_Abort>
 800c3d4:	4603      	mov	r3, r0
 800c3d6:	77fb      	strb	r3, [r7, #31]
#endif
        }
      }

      /* Update QSPI state */
      hqspi->State = HAL_QSPI_STATE_READY;
 800c3d8:	68fb      	ldr	r3, [r7, #12]
 800c3da:	2201      	movs	r2, #1
 800c3dc:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
 800c3e0:	e00a      	b.n	800c3f8 <HAL_QSPI_Transmit+0x11c>
    }
    else
    {
      hqspi->ErrorCode |= HAL_QSPI_ERROR_INVALID_PARAM;
 800c3e2:	68fb      	ldr	r3, [r7, #12]
 800c3e4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c3e6:	f043 0208 	orr.w	r2, r3, #8
 800c3ea:	68fb      	ldr	r3, [r7, #12]
 800c3ec:	63da      	str	r2, [r3, #60]	@ 0x3c
      status = HAL_ERROR;
 800c3ee:	2301      	movs	r3, #1
 800c3f0:	77fb      	strb	r3, [r7, #31]
 800c3f2:	e001      	b.n	800c3f8 <HAL_QSPI_Transmit+0x11c>
    }
  }
  else
  {
    status = HAL_BUSY;
 800c3f4:	2302      	movs	r3, #2
 800c3f6:	77fb      	strb	r3, [r7, #31]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hqspi);
 800c3f8:	68fb      	ldr	r3, [r7, #12]
 800c3fa:	2200      	movs	r2, #0
 800c3fc:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  return status;
 800c400:	7ffb      	ldrb	r3, [r7, #31]
}
 800c402:	4618      	mov	r0, r3
 800c404:	3720      	adds	r7, #32
 800c406:	46bd      	mov	sp, r7
 800c408:	bd80      	pop	{r7, pc}

0800c40a <HAL_QSPI_Receive>:
  * @param Timeout Timeout duration
  * @note   This function is used only in Indirect Read Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Receive(QSPI_HandleTypeDef *hqspi, uint8_t *pData, uint32_t Timeout)
{
 800c40a:	b580      	push	{r7, lr}
 800c40c:	b08a      	sub	sp, #40	@ 0x28
 800c40e:	af02      	add	r7, sp, #8
 800c410:	60f8      	str	r0, [r7, #12]
 800c412:	60b9      	str	r1, [r7, #8]
 800c414:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800c416:	2300      	movs	r3, #0
 800c418:	77fb      	strb	r3, [r7, #31]
  uint32_t tickstart = HAL_GetTick();
 800c41a:	f7fc fe53 	bl	80090c4 <HAL_GetTick>
 800c41e:	61b8      	str	r0, [r7, #24]
  uint32_t addr_reg = READ_REG(hqspi->Instance->AR);
 800c420:	68fb      	ldr	r3, [r7, #12]
 800c422:	681b      	ldr	r3, [r3, #0]
 800c424:	699b      	ldr	r3, [r3, #24]
 800c426:	617b      	str	r3, [r7, #20]
  __IO uint32_t *data_reg = &hqspi->Instance->DR;
 800c428:	68fb      	ldr	r3, [r7, #12]
 800c42a:	681b      	ldr	r3, [r3, #0]
 800c42c:	3320      	adds	r3, #32
 800c42e:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hqspi);
 800c430:	68fb      	ldr	r3, [r7, #12]
 800c432:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800c436:	b2db      	uxtb	r3, r3
 800c438:	2b01      	cmp	r3, #1
 800c43a:	d101      	bne.n	800c440 <HAL_QSPI_Receive+0x36>
 800c43c:	2302      	movs	r3, #2
 800c43e:	e082      	b.n	800c546 <HAL_QSPI_Receive+0x13c>
 800c440:	68fb      	ldr	r3, [r7, #12]
 800c442:	2201      	movs	r2, #1
 800c444:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  if(hqspi->State == HAL_QSPI_STATE_READY)
 800c448:	68fb      	ldr	r3, [r7, #12]
 800c44a:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 800c44e:	b2db      	uxtb	r3, r3
 800c450:	2b01      	cmp	r3, #1
 800c452:	d171      	bne.n	800c538 <HAL_QSPI_Receive+0x12e>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 800c454:	68fb      	ldr	r3, [r7, #12]
 800c456:	2200      	movs	r2, #0
 800c458:	63da      	str	r2, [r3, #60]	@ 0x3c

    if(pData != NULL )
 800c45a:	68bb      	ldr	r3, [r7, #8]
 800c45c:	2b00      	cmp	r3, #0
 800c45e:	d062      	beq.n	800c526 <HAL_QSPI_Receive+0x11c>
    {
      /* Update state */
      hqspi->State = HAL_QSPI_STATE_BUSY_INDIRECT_RX;
 800c460:	68fb      	ldr	r3, [r7, #12]
 800c462:	2222      	movs	r2, #34	@ 0x22
 800c464:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

      /* Configure counters and size of the handle */
      hqspi->RxXferCount = READ_REG(hqspi->Instance->DLR) + 1U;
 800c468:	68fb      	ldr	r3, [r7, #12]
 800c46a:	681b      	ldr	r3, [r3, #0]
 800c46c:	691b      	ldr	r3, [r3, #16]
 800c46e:	1c5a      	adds	r2, r3, #1
 800c470:	68fb      	ldr	r3, [r7, #12]
 800c472:	631a      	str	r2, [r3, #48]	@ 0x30
      hqspi->RxXferSize = READ_REG(hqspi->Instance->DLR) + 1U;
 800c474:	68fb      	ldr	r3, [r7, #12]
 800c476:	681b      	ldr	r3, [r3, #0]
 800c478:	691b      	ldr	r3, [r3, #16]
 800c47a:	1c5a      	adds	r2, r3, #1
 800c47c:	68fb      	ldr	r3, [r7, #12]
 800c47e:	62da      	str	r2, [r3, #44]	@ 0x2c
      hqspi->pRxBuffPtr = pData;
 800c480:	68fb      	ldr	r3, [r7, #12]
 800c482:	68ba      	ldr	r2, [r7, #8]
 800c484:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Configure QSPI: CCR register with functional as indirect read */
      MODIFY_REG(hqspi->Instance->CCR, QUADSPI_CCR_FMODE, QSPI_FUNCTIONAL_MODE_INDIRECT_READ);
 800c486:	68fb      	ldr	r3, [r7, #12]
 800c488:	681b      	ldr	r3, [r3, #0]
 800c48a:	695b      	ldr	r3, [r3, #20]
 800c48c:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800c490:	68fb      	ldr	r3, [r7, #12]
 800c492:	681b      	ldr	r3, [r3, #0]
 800c494:	f042 6280 	orr.w	r2, r2, #67108864	@ 0x4000000
 800c498:	615a      	str	r2, [r3, #20]

      /* Start the transfer by re-writing the address in AR register */
      WRITE_REG(hqspi->Instance->AR, addr_reg);
 800c49a:	68fb      	ldr	r3, [r7, #12]
 800c49c:	681b      	ldr	r3, [r3, #0]
 800c49e:	697a      	ldr	r2, [r7, #20]
 800c4a0:	619a      	str	r2, [r3, #24]

      while(hqspi->RxXferCount > 0U)
 800c4a2:	e01c      	b.n	800c4de <HAL_QSPI_Receive+0xd4>
      {
        /* Wait until FT or TC flag is set to read received data */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, (QSPI_FLAG_FT | QSPI_FLAG_TC), SET, tickstart, Timeout);
 800c4a4:	687b      	ldr	r3, [r7, #4]
 800c4a6:	9300      	str	r3, [sp, #0]
 800c4a8:	69bb      	ldr	r3, [r7, #24]
 800c4aa:	2201      	movs	r2, #1
 800c4ac:	2106      	movs	r1, #6
 800c4ae:	68f8      	ldr	r0, [r7, #12]
 800c4b0:	f000 f8d4 	bl	800c65c <QSPI_WaitFlagStateUntilTimeout>
 800c4b4:	4603      	mov	r3, r0
 800c4b6:	77fb      	strb	r3, [r7, #31]

        if  (status != HAL_OK)
 800c4b8:	7ffb      	ldrb	r3, [r7, #31]
 800c4ba:	2b00      	cmp	r3, #0
 800c4bc:	d114      	bne.n	800c4e8 <HAL_QSPI_Receive+0xde>
        {
          break;
        }

        *hqspi->pRxBuffPtr = *((__IO uint8_t *)data_reg);
 800c4be:	68fb      	ldr	r3, [r7, #12]
 800c4c0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c4c2:	693a      	ldr	r2, [r7, #16]
 800c4c4:	7812      	ldrb	r2, [r2, #0]
 800c4c6:	b2d2      	uxtb	r2, r2
 800c4c8:	701a      	strb	r2, [r3, #0]
        hqspi->pRxBuffPtr++;
 800c4ca:	68fb      	ldr	r3, [r7, #12]
 800c4cc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c4ce:	1c5a      	adds	r2, r3, #1
 800c4d0:	68fb      	ldr	r3, [r7, #12]
 800c4d2:	629a      	str	r2, [r3, #40]	@ 0x28
        hqspi->RxXferCount--;
 800c4d4:	68fb      	ldr	r3, [r7, #12]
 800c4d6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c4d8:	1e5a      	subs	r2, r3, #1
 800c4da:	68fb      	ldr	r3, [r7, #12]
 800c4dc:	631a      	str	r2, [r3, #48]	@ 0x30
      while(hqspi->RxXferCount > 0U)
 800c4de:	68fb      	ldr	r3, [r7, #12]
 800c4e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c4e2:	2b00      	cmp	r3, #0
 800c4e4:	d1de      	bne.n	800c4a4 <HAL_QSPI_Receive+0x9a>
 800c4e6:	e000      	b.n	800c4ea <HAL_QSPI_Receive+0xe0>
          break;
 800c4e8:	bf00      	nop
      }

      if (status == HAL_OK)
 800c4ea:	7ffb      	ldrb	r3, [r7, #31]
 800c4ec:	2b00      	cmp	r3, #0
 800c4ee:	d115      	bne.n	800c51c <HAL_QSPI_Receive+0x112>
      {
        /* Wait until TC flag is set to go back in idle state */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, Timeout);
 800c4f0:	687b      	ldr	r3, [r7, #4]
 800c4f2:	9300      	str	r3, [sp, #0]
 800c4f4:	69bb      	ldr	r3, [r7, #24]
 800c4f6:	2201      	movs	r2, #1
 800c4f8:	2102      	movs	r1, #2
 800c4fa:	68f8      	ldr	r0, [r7, #12]
 800c4fc:	f000 f8ae 	bl	800c65c <QSPI_WaitFlagStateUntilTimeout>
 800c500:	4603      	mov	r3, r0
 800c502:	77fb      	strb	r3, [r7, #31]

        if  (status == HAL_OK)
 800c504:	7ffb      	ldrb	r3, [r7, #31]
 800c506:	2b00      	cmp	r3, #0
 800c508:	d108      	bne.n	800c51c <HAL_QSPI_Receive+0x112>
        {
          /* Clear Transfer Complete bit */
          __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 800c50a:	68fb      	ldr	r3, [r7, #12]
 800c50c:	681b      	ldr	r3, [r3, #0]
 800c50e:	2202      	movs	r2, #2
 800c510:	60da      	str	r2, [r3, #12]

#if  (defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx))
          /* Workaround - Extra data written in the FIFO at the end of a read transfer */
          status = HAL_QSPI_Abort(hqspi);
 800c512:	68f8      	ldr	r0, [r7, #12]
 800c514:	f000 f81b 	bl	800c54e <HAL_QSPI_Abort>
 800c518:	4603      	mov	r3, r0
 800c51a:	77fb      	strb	r3, [r7, #31]
#endif
        }
      }

      /* Update QSPI state */
      hqspi->State = HAL_QSPI_STATE_READY;
 800c51c:	68fb      	ldr	r3, [r7, #12]
 800c51e:	2201      	movs	r2, #1
 800c520:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
 800c524:	e00a      	b.n	800c53c <HAL_QSPI_Receive+0x132>
    }
    else
    {
      hqspi->ErrorCode |= HAL_QSPI_ERROR_INVALID_PARAM;
 800c526:	68fb      	ldr	r3, [r7, #12]
 800c528:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c52a:	f043 0208 	orr.w	r2, r3, #8
 800c52e:	68fb      	ldr	r3, [r7, #12]
 800c530:	63da      	str	r2, [r3, #60]	@ 0x3c
      status = HAL_ERROR;
 800c532:	2301      	movs	r3, #1
 800c534:	77fb      	strb	r3, [r7, #31]
 800c536:	e001      	b.n	800c53c <HAL_QSPI_Receive+0x132>
    }
  }
  else
  {
    status = HAL_BUSY;
 800c538:	2302      	movs	r3, #2
 800c53a:	77fb      	strb	r3, [r7, #31]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hqspi);
 800c53c:	68fb      	ldr	r3, [r7, #12]
 800c53e:	2200      	movs	r2, #0
 800c540:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  return status;
 800c544:	7ffb      	ldrb	r3, [r7, #31]
}
 800c546:	4618      	mov	r0, r3
 800c548:	3720      	adds	r7, #32
 800c54a:	46bd      	mov	sp, r7
 800c54c:	bd80      	pop	{r7, pc}

0800c54e <HAL_QSPI_Abort>:
* @brief  Abort the current transmission.
* @param  hqspi QSPI handle
* @retval HAL status
*/
HAL_StatusTypeDef HAL_QSPI_Abort(QSPI_HandleTypeDef *hqspi)
{
 800c54e:	b580      	push	{r7, lr}
 800c550:	b086      	sub	sp, #24
 800c552:	af02      	add	r7, sp, #8
 800c554:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800c556:	2300      	movs	r3, #0
 800c558:	73fb      	strb	r3, [r7, #15]
  uint32_t tickstart = HAL_GetTick();
 800c55a:	f7fc fdb3 	bl	80090c4 <HAL_GetTick>
 800c55e:	60b8      	str	r0, [r7, #8]

  /* Check if the state is in one of the busy states */
  if (((uint32_t)hqspi->State & 0x2U) != 0U)
 800c560:	687b      	ldr	r3, [r7, #4]
 800c562:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 800c566:	b2db      	uxtb	r3, r3
 800c568:	f003 0302 	and.w	r3, r3, #2
 800c56c:	2b00      	cmp	r3, #0
 800c56e:	d062      	beq.n	800c636 <HAL_QSPI_Abort+0xe8>
  {
    /* Process unlocked */
    __HAL_UNLOCK(hqspi);
 800c570:	687b      	ldr	r3, [r7, #4]
 800c572:	2200      	movs	r2, #0
 800c574:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

    if ((hqspi->Instance->CR & QUADSPI_CR_DMAEN) != 0U)
 800c578:	687b      	ldr	r3, [r7, #4]
 800c57a:	681b      	ldr	r3, [r3, #0]
 800c57c:	681b      	ldr	r3, [r3, #0]
 800c57e:	f003 0304 	and.w	r3, r3, #4
 800c582:	2b00      	cmp	r3, #0
 800c584:	d017      	beq.n	800c5b6 <HAL_QSPI_Abort+0x68>
    {
      /* Disable the DMA transfer by clearing the DMAEN bit in the QSPI CR register */
      CLEAR_BIT(hqspi->Instance->CR, QUADSPI_CR_DMAEN);
 800c586:	687b      	ldr	r3, [r7, #4]
 800c588:	681b      	ldr	r3, [r3, #0]
 800c58a:	681a      	ldr	r2, [r3, #0]
 800c58c:	687b      	ldr	r3, [r7, #4]
 800c58e:	681b      	ldr	r3, [r3, #0]
 800c590:	f022 0204 	bic.w	r2, r2, #4
 800c594:	601a      	str	r2, [r3, #0]

      /* Abort DMA channel */
      status = HAL_DMA_Abort(hqspi->hdma);
 800c596:	687b      	ldr	r3, [r7, #4]
 800c598:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c59a:	4618      	mov	r0, r3
 800c59c:	f7fe fc92 	bl	800aec4 <HAL_DMA_Abort>
 800c5a0:	4603      	mov	r3, r0
 800c5a2:	73fb      	strb	r3, [r7, #15]
      if(status != HAL_OK)
 800c5a4:	7bfb      	ldrb	r3, [r7, #15]
 800c5a6:	2b00      	cmp	r3, #0
 800c5a8:	d005      	beq.n	800c5b6 <HAL_QSPI_Abort+0x68>
      {
        hqspi->ErrorCode |= HAL_QSPI_ERROR_DMA;
 800c5aa:	687b      	ldr	r3, [r7, #4]
 800c5ac:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c5ae:	f043 0204 	orr.w	r2, r3, #4
 800c5b2:	687b      	ldr	r3, [r7, #4]
 800c5b4:	63da      	str	r2, [r3, #60]	@ 0x3c
      }
    }

    if (__HAL_QSPI_GET_FLAG(hqspi, QSPI_FLAG_BUSY) != RESET)
 800c5b6:	687b      	ldr	r3, [r7, #4]
 800c5b8:	681b      	ldr	r3, [r3, #0]
 800c5ba:	689b      	ldr	r3, [r3, #8]
 800c5bc:	f003 0320 	and.w	r3, r3, #32
 800c5c0:	2b00      	cmp	r3, #0
 800c5c2:	d034      	beq.n	800c62e <HAL_QSPI_Abort+0xe0>
    {
      /* Configure QSPI: CR register with Abort request */
      SET_BIT(hqspi->Instance->CR, QUADSPI_CR_ABORT);
 800c5c4:	687b      	ldr	r3, [r7, #4]
 800c5c6:	681b      	ldr	r3, [r3, #0]
 800c5c8:	681a      	ldr	r2, [r3, #0]
 800c5ca:	687b      	ldr	r3, [r7, #4]
 800c5cc:	681b      	ldr	r3, [r3, #0]
 800c5ce:	f042 0202 	orr.w	r2, r2, #2
 800c5d2:	601a      	str	r2, [r3, #0]
      
      /* Wait until TC flag is set to go back in idle state */
      status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, hqspi->Timeout);
 800c5d4:	687b      	ldr	r3, [r7, #4]
 800c5d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c5d8:	9300      	str	r3, [sp, #0]
 800c5da:	68bb      	ldr	r3, [r7, #8]
 800c5dc:	2201      	movs	r2, #1
 800c5de:	2102      	movs	r1, #2
 800c5e0:	6878      	ldr	r0, [r7, #4]
 800c5e2:	f000 f83b 	bl	800c65c <QSPI_WaitFlagStateUntilTimeout>
 800c5e6:	4603      	mov	r3, r0
 800c5e8:	73fb      	strb	r3, [r7, #15]
      
      if (status == HAL_OK)
 800c5ea:	7bfb      	ldrb	r3, [r7, #15]
 800c5ec:	2b00      	cmp	r3, #0
 800c5ee:	d10e      	bne.n	800c60e <HAL_QSPI_Abort+0xc0>
      {
        __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 800c5f0:	687b      	ldr	r3, [r7, #4]
 800c5f2:	681b      	ldr	r3, [r3, #0]
 800c5f4:	2202      	movs	r2, #2
 800c5f6:	60da      	str	r2, [r3, #12]
        
        /* Wait until BUSY flag is reset */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 800c5f8:	687b      	ldr	r3, [r7, #4]
 800c5fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c5fc:	9300      	str	r3, [sp, #0]
 800c5fe:	68bb      	ldr	r3, [r7, #8]
 800c600:	2200      	movs	r2, #0
 800c602:	2120      	movs	r1, #32
 800c604:	6878      	ldr	r0, [r7, #4]
 800c606:	f000 f829 	bl	800c65c <QSPI_WaitFlagStateUntilTimeout>
 800c60a:	4603      	mov	r3, r0
 800c60c:	73fb      	strb	r3, [r7, #15]
      }

      if (status == HAL_OK)
 800c60e:	7bfb      	ldrb	r3, [r7, #15]
 800c610:	2b00      	cmp	r3, #0
 800c612:	d110      	bne.n	800c636 <HAL_QSPI_Abort+0xe8>
      {
        /* Reset functional mode configuration to indirect write mode by default */
        CLEAR_BIT(hqspi->Instance->CCR, QUADSPI_CCR_FMODE);
 800c614:	687b      	ldr	r3, [r7, #4]
 800c616:	681b      	ldr	r3, [r3, #0]
 800c618:	695a      	ldr	r2, [r3, #20]
 800c61a:	687b      	ldr	r3, [r7, #4]
 800c61c:	681b      	ldr	r3, [r3, #0]
 800c61e:	f022 6240 	bic.w	r2, r2, #201326592	@ 0xc000000
 800c622:	615a      	str	r2, [r3, #20]
        
        /* Update state */
        hqspi->State = HAL_QSPI_STATE_READY;
 800c624:	687b      	ldr	r3, [r7, #4]
 800c626:	2201      	movs	r2, #1
 800c628:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
 800c62c:	e003      	b.n	800c636 <HAL_QSPI_Abort+0xe8>
      }
    }
    else
    {
      /* Update state */
      hqspi->State = HAL_QSPI_STATE_READY;
 800c62e:	687b      	ldr	r3, [r7, #4]
 800c630:	2201      	movs	r2, #1
 800c632:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
    }
  }

  return status;
 800c636:	7bfb      	ldrb	r3, [r7, #15]
}
 800c638:	4618      	mov	r0, r3
 800c63a:	3710      	adds	r7, #16
 800c63c:	46bd      	mov	sp, r7
 800c63e:	bd80      	pop	{r7, pc}

0800c640 <HAL_QSPI_SetTimeout>:
  * @param  hqspi QSPI handle.
  * @param  Timeout Timeout for the QSPI memory access.
  * @retval None
  */
void HAL_QSPI_SetTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
{
 800c640:	b480      	push	{r7}
 800c642:	b083      	sub	sp, #12
 800c644:	af00      	add	r7, sp, #0
 800c646:	6078      	str	r0, [r7, #4]
 800c648:	6039      	str	r1, [r7, #0]
  hqspi->Timeout = Timeout;
 800c64a:	687b      	ldr	r3, [r7, #4]
 800c64c:	683a      	ldr	r2, [r7, #0]
 800c64e:	641a      	str	r2, [r3, #64]	@ 0x40
}
 800c650:	bf00      	nop
 800c652:	370c      	adds	r7, #12
 800c654:	46bd      	mov	sp, r7
 800c656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c65a:	4770      	bx	lr

0800c65c <QSPI_WaitFlagStateUntilTimeout>:
  * @param  Timeout Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef QSPI_WaitFlagStateUntilTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 800c65c:	b580      	push	{r7, lr}
 800c65e:	b084      	sub	sp, #16
 800c660:	af00      	add	r7, sp, #0
 800c662:	60f8      	str	r0, [r7, #12]
 800c664:	60b9      	str	r1, [r7, #8]
 800c666:	603b      	str	r3, [r7, #0]
 800c668:	4613      	mov	r3, r2
 800c66a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 800c66c:	e01a      	b.n	800c6a4 <QSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800c66e:	69bb      	ldr	r3, [r7, #24]
 800c670:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c674:	d016      	beq.n	800c6a4 <QSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800c676:	f7fc fd25 	bl	80090c4 <HAL_GetTick>
 800c67a:	4602      	mov	r2, r0
 800c67c:	683b      	ldr	r3, [r7, #0]
 800c67e:	1ad3      	subs	r3, r2, r3
 800c680:	69ba      	ldr	r2, [r7, #24]
 800c682:	429a      	cmp	r2, r3
 800c684:	d302      	bcc.n	800c68c <QSPI_WaitFlagStateUntilTimeout+0x30>
 800c686:	69bb      	ldr	r3, [r7, #24]
 800c688:	2b00      	cmp	r3, #0
 800c68a:	d10b      	bne.n	800c6a4 <QSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 800c68c:	68fb      	ldr	r3, [r7, #12]
 800c68e:	2204      	movs	r2, #4
 800c690:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 800c694:	68fb      	ldr	r3, [r7, #12]
 800c696:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c698:	f043 0201 	orr.w	r2, r3, #1
 800c69c:	68fb      	ldr	r3, [r7, #12]
 800c69e:	63da      	str	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 800c6a0:	2301      	movs	r3, #1
 800c6a2:	e00e      	b.n	800c6c2 <QSPI_WaitFlagStateUntilTimeout+0x66>
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 800c6a4:	68fb      	ldr	r3, [r7, #12]
 800c6a6:	681b      	ldr	r3, [r3, #0]
 800c6a8:	689a      	ldr	r2, [r3, #8]
 800c6aa:	68bb      	ldr	r3, [r7, #8]
 800c6ac:	4013      	ands	r3, r2
 800c6ae:	2b00      	cmp	r3, #0
 800c6b0:	bf14      	ite	ne
 800c6b2:	2301      	movne	r3, #1
 800c6b4:	2300      	moveq	r3, #0
 800c6b6:	b2db      	uxtb	r3, r3
 800c6b8:	461a      	mov	r2, r3
 800c6ba:	79fb      	ldrb	r3, [r7, #7]
 800c6bc:	429a      	cmp	r2, r3
 800c6be:	d1d6      	bne.n	800c66e <QSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800c6c0:	2300      	movs	r3, #0
}
 800c6c2:	4618      	mov	r0, r3
 800c6c4:	3710      	adds	r7, #16
 800c6c6:	46bd      	mov	sp, r7
 800c6c8:	bd80      	pop	{r7, pc}

0800c6ca <QSPI_Config>:
  *            @arg QSPI_FUNCTIONAL_MODE_AUTO_POLLING: Automatic polling mode
  *            @arg QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED: Memory-mapped mode
  * @retval None
  */
static void QSPI_Config(QSPI_HandleTypeDef *hqspi, QSPI_CommandTypeDef *cmd, uint32_t FunctionalMode)
{
 800c6ca:	b480      	push	{r7}
 800c6cc:	b085      	sub	sp, #20
 800c6ce:	af00      	add	r7, sp, #0
 800c6d0:	60f8      	str	r0, [r7, #12]
 800c6d2:	60b9      	str	r1, [r7, #8]
 800c6d4:	607a      	str	r2, [r7, #4]
  assert_param(IS_QSPI_FUNCTIONAL_MODE(FunctionalMode));

  if ((cmd->DataMode != QSPI_DATA_NONE) && (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED))
 800c6d6:	68bb      	ldr	r3, [r7, #8]
 800c6d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c6da:	2b00      	cmp	r3, #0
 800c6dc:	d009      	beq.n	800c6f2 <QSPI_Config+0x28>
 800c6de:	687b      	ldr	r3, [r7, #4]
 800c6e0:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 800c6e4:	d005      	beq.n	800c6f2 <QSPI_Config+0x28>
  {
    /* Configure QSPI: DLR register with the number of data to read or write */
    WRITE_REG(hqspi->Instance->DLR, (cmd->NbData - 1U));
 800c6e6:	68bb      	ldr	r3, [r7, #8]
 800c6e8:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800c6ea:	68fb      	ldr	r3, [r7, #12]
 800c6ec:	681b      	ldr	r3, [r3, #0]
 800c6ee:	3a01      	subs	r2, #1
 800c6f0:	611a      	str	r2, [r3, #16]
  }

  if (cmd->InstructionMode != QSPI_INSTRUCTION_NONE)
 800c6f2:	68bb      	ldr	r3, [r7, #8]
 800c6f4:	699b      	ldr	r3, [r3, #24]
 800c6f6:	2b00      	cmp	r3, #0
 800c6f8:	f000 80c1 	beq.w	800c87e <QSPI_Config+0x1b4>
  {
    if (cmd->AlternateByteMode != QSPI_ALTERNATE_BYTES_NONE)
 800c6fc:	68bb      	ldr	r3, [r7, #8]
 800c6fe:	6a1b      	ldr	r3, [r3, #32]
 800c700:	2b00      	cmp	r3, #0
 800c702:	d063      	beq.n	800c7cc <QSPI_Config+0x102>
    {
      /* Configure QSPI: ABR register with alternate bytes value */
      WRITE_REG(hqspi->Instance->ABR, cmd->AlternateBytes);
 800c704:	68fb      	ldr	r3, [r7, #12]
 800c706:	681b      	ldr	r3, [r3, #0]
 800c708:	68ba      	ldr	r2, [r7, #8]
 800c70a:	6892      	ldr	r2, [r2, #8]
 800c70c:	61da      	str	r2, [r3, #28]

      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 800c70e:	68bb      	ldr	r3, [r7, #8]
 800c710:	69db      	ldr	r3, [r3, #28]
 800c712:	2b00      	cmp	r3, #0
 800c714:	d031      	beq.n	800c77a <QSPI_Config+0xb0>
      {
        /*---- Command with instruction, address and alternate bytes ----*/
        /* Configure QSPI: CCR register with all communications parameters */
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800c716:	68bb      	ldr	r3, [r7, #8]
 800c718:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c71a:	68bb      	ldr	r3, [r7, #8]
 800c71c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c71e:	431a      	orrs	r2, r3
 800c720:	68bb      	ldr	r3, [r7, #8]
 800c722:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c724:	431a      	orrs	r2, r3
 800c726:	68bb      	ldr	r3, [r7, #8]
 800c728:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c72a:	431a      	orrs	r2, r3
 800c72c:	68bb      	ldr	r3, [r7, #8]
 800c72e:	695b      	ldr	r3, [r3, #20]
 800c730:	049b      	lsls	r3, r3, #18
 800c732:	431a      	orrs	r2, r3
 800c734:	68bb      	ldr	r3, [r7, #8]
 800c736:	691b      	ldr	r3, [r3, #16]
 800c738:	431a      	orrs	r2, r3
 800c73a:	68bb      	ldr	r3, [r7, #8]
 800c73c:	6a1b      	ldr	r3, [r3, #32]
 800c73e:	431a      	orrs	r2, r3
 800c740:	68bb      	ldr	r3, [r7, #8]
 800c742:	68db      	ldr	r3, [r3, #12]
 800c744:	431a      	orrs	r2, r3
 800c746:	68bb      	ldr	r3, [r7, #8]
 800c748:	69db      	ldr	r3, [r3, #28]
 800c74a:	431a      	orrs	r2, r3
 800c74c:	68bb      	ldr	r3, [r7, #8]
 800c74e:	699b      	ldr	r3, [r3, #24]
 800c750:	431a      	orrs	r2, r3
 800c752:	68bb      	ldr	r3, [r7, #8]
 800c754:	681b      	ldr	r3, [r3, #0]
 800c756:	ea42 0103 	orr.w	r1, r2, r3
 800c75a:	68fb      	ldr	r3, [r7, #12]
 800c75c:	681b      	ldr	r3, [r3, #0]
 800c75e:	687a      	ldr	r2, [r7, #4]
 800c760:	430a      	orrs	r2, r1
 800c762:	615a      	str	r2, [r3, #20]
                                         cmd->DataMode | (cmd->DummyCycles << QUADSPI_CCR_DCYC_Pos) |
                                         cmd->AlternateBytesSize | cmd->AlternateByteMode |
                                         cmd->AddressSize | cmd->AddressMode | cmd->InstructionMode |
                                         cmd->Instruction | FunctionalMode));

        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 800c764:	687b      	ldr	r3, [r7, #4]
 800c766:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 800c76a:	f000 813f 	beq.w	800c9ec <QSPI_Config+0x322>
        {
          /* Configure QSPI: AR register with address value */
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 800c76e:	68fb      	ldr	r3, [r7, #12]
 800c770:	681b      	ldr	r3, [r3, #0]
 800c772:	68ba      	ldr	r2, [r7, #8]
 800c774:	6852      	ldr	r2, [r2, #4]
 800c776:	619a      	str	r2, [r3, #24]
          CLEAR_REG(hqspi->Instance->AR);
        }
      }
    }
  }
}
 800c778:	e138      	b.n	800c9ec <QSPI_Config+0x322>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800c77a:	68bb      	ldr	r3, [r7, #8]
 800c77c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c77e:	68bb      	ldr	r3, [r7, #8]
 800c780:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c782:	431a      	orrs	r2, r3
 800c784:	68bb      	ldr	r3, [r7, #8]
 800c786:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c788:	431a      	orrs	r2, r3
 800c78a:	68bb      	ldr	r3, [r7, #8]
 800c78c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c78e:	431a      	orrs	r2, r3
 800c790:	68bb      	ldr	r3, [r7, #8]
 800c792:	695b      	ldr	r3, [r3, #20]
 800c794:	049b      	lsls	r3, r3, #18
 800c796:	431a      	orrs	r2, r3
 800c798:	68bb      	ldr	r3, [r7, #8]
 800c79a:	691b      	ldr	r3, [r3, #16]
 800c79c:	431a      	orrs	r2, r3
 800c79e:	68bb      	ldr	r3, [r7, #8]
 800c7a0:	6a1b      	ldr	r3, [r3, #32]
 800c7a2:	431a      	orrs	r2, r3
 800c7a4:	68bb      	ldr	r3, [r7, #8]
 800c7a6:	69db      	ldr	r3, [r3, #28]
 800c7a8:	431a      	orrs	r2, r3
 800c7aa:	68bb      	ldr	r3, [r7, #8]
 800c7ac:	699b      	ldr	r3, [r3, #24]
 800c7ae:	431a      	orrs	r2, r3
 800c7b0:	68bb      	ldr	r3, [r7, #8]
 800c7b2:	681b      	ldr	r3, [r3, #0]
 800c7b4:	ea42 0103 	orr.w	r1, r2, r3
 800c7b8:	68fb      	ldr	r3, [r7, #12]
 800c7ba:	681b      	ldr	r3, [r3, #0]
 800c7bc:	687a      	ldr	r2, [r7, #4]
 800c7be:	430a      	orrs	r2, r1
 800c7c0:	615a      	str	r2, [r3, #20]
        CLEAR_REG(hqspi->Instance->AR);
 800c7c2:	68fb      	ldr	r3, [r7, #12]
 800c7c4:	681b      	ldr	r3, [r3, #0]
 800c7c6:	2200      	movs	r2, #0
 800c7c8:	619a      	str	r2, [r3, #24]
}
 800c7ca:	e10f      	b.n	800c9ec <QSPI_Config+0x322>
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 800c7cc:	68bb      	ldr	r3, [r7, #8]
 800c7ce:	69db      	ldr	r3, [r3, #28]
 800c7d0:	2b00      	cmp	r3, #0
 800c7d2:	d02e      	beq.n	800c832 <QSPI_Config+0x168>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800c7d4:	68bb      	ldr	r3, [r7, #8]
 800c7d6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c7d8:	68bb      	ldr	r3, [r7, #8]
 800c7da:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c7dc:	431a      	orrs	r2, r3
 800c7de:	68bb      	ldr	r3, [r7, #8]
 800c7e0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c7e2:	431a      	orrs	r2, r3
 800c7e4:	68bb      	ldr	r3, [r7, #8]
 800c7e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c7e8:	431a      	orrs	r2, r3
 800c7ea:	68bb      	ldr	r3, [r7, #8]
 800c7ec:	695b      	ldr	r3, [r3, #20]
 800c7ee:	049b      	lsls	r3, r3, #18
 800c7f0:	431a      	orrs	r2, r3
 800c7f2:	68bb      	ldr	r3, [r7, #8]
 800c7f4:	6a1b      	ldr	r3, [r3, #32]
 800c7f6:	431a      	orrs	r2, r3
 800c7f8:	68bb      	ldr	r3, [r7, #8]
 800c7fa:	68db      	ldr	r3, [r3, #12]
 800c7fc:	431a      	orrs	r2, r3
 800c7fe:	68bb      	ldr	r3, [r7, #8]
 800c800:	69db      	ldr	r3, [r3, #28]
 800c802:	431a      	orrs	r2, r3
 800c804:	68bb      	ldr	r3, [r7, #8]
 800c806:	699b      	ldr	r3, [r3, #24]
 800c808:	431a      	orrs	r2, r3
 800c80a:	68bb      	ldr	r3, [r7, #8]
 800c80c:	681b      	ldr	r3, [r3, #0]
 800c80e:	ea42 0103 	orr.w	r1, r2, r3
 800c812:	68fb      	ldr	r3, [r7, #12]
 800c814:	681b      	ldr	r3, [r3, #0]
 800c816:	687a      	ldr	r2, [r7, #4]
 800c818:	430a      	orrs	r2, r1
 800c81a:	615a      	str	r2, [r3, #20]
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 800c81c:	687b      	ldr	r3, [r7, #4]
 800c81e:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 800c822:	f000 80e3 	beq.w	800c9ec <QSPI_Config+0x322>
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 800c826:	68fb      	ldr	r3, [r7, #12]
 800c828:	681b      	ldr	r3, [r3, #0]
 800c82a:	68ba      	ldr	r2, [r7, #8]
 800c82c:	6852      	ldr	r2, [r2, #4]
 800c82e:	619a      	str	r2, [r3, #24]
}
 800c830:	e0dc      	b.n	800c9ec <QSPI_Config+0x322>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800c832:	68bb      	ldr	r3, [r7, #8]
 800c834:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c836:	68bb      	ldr	r3, [r7, #8]
 800c838:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c83a:	431a      	orrs	r2, r3
 800c83c:	68bb      	ldr	r3, [r7, #8]
 800c83e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c840:	431a      	orrs	r2, r3
 800c842:	68bb      	ldr	r3, [r7, #8]
 800c844:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c846:	431a      	orrs	r2, r3
 800c848:	68bb      	ldr	r3, [r7, #8]
 800c84a:	695b      	ldr	r3, [r3, #20]
 800c84c:	049b      	lsls	r3, r3, #18
 800c84e:	431a      	orrs	r2, r3
 800c850:	68bb      	ldr	r3, [r7, #8]
 800c852:	6a1b      	ldr	r3, [r3, #32]
 800c854:	431a      	orrs	r2, r3
 800c856:	68bb      	ldr	r3, [r7, #8]
 800c858:	69db      	ldr	r3, [r3, #28]
 800c85a:	431a      	orrs	r2, r3
 800c85c:	68bb      	ldr	r3, [r7, #8]
 800c85e:	699b      	ldr	r3, [r3, #24]
 800c860:	431a      	orrs	r2, r3
 800c862:	68bb      	ldr	r3, [r7, #8]
 800c864:	681b      	ldr	r3, [r3, #0]
 800c866:	ea42 0103 	orr.w	r1, r2, r3
 800c86a:	68fb      	ldr	r3, [r7, #12]
 800c86c:	681b      	ldr	r3, [r3, #0]
 800c86e:	687a      	ldr	r2, [r7, #4]
 800c870:	430a      	orrs	r2, r1
 800c872:	615a      	str	r2, [r3, #20]
        CLEAR_REG(hqspi->Instance->AR);
 800c874:	68fb      	ldr	r3, [r7, #12]
 800c876:	681b      	ldr	r3, [r3, #0]
 800c878:	2200      	movs	r2, #0
 800c87a:	619a      	str	r2, [r3, #24]
}
 800c87c:	e0b6      	b.n	800c9ec <QSPI_Config+0x322>
    if (cmd->AlternateByteMode != QSPI_ALTERNATE_BYTES_NONE)
 800c87e:	68bb      	ldr	r3, [r7, #8]
 800c880:	6a1b      	ldr	r3, [r3, #32]
 800c882:	2b00      	cmp	r3, #0
 800c884:	d05d      	beq.n	800c942 <QSPI_Config+0x278>
      WRITE_REG(hqspi->Instance->ABR, cmd->AlternateBytes);
 800c886:	68fb      	ldr	r3, [r7, #12]
 800c888:	681b      	ldr	r3, [r3, #0]
 800c88a:	68ba      	ldr	r2, [r7, #8]
 800c88c:	6892      	ldr	r2, [r2, #8]
 800c88e:	61da      	str	r2, [r3, #28]
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 800c890:	68bb      	ldr	r3, [r7, #8]
 800c892:	69db      	ldr	r3, [r3, #28]
 800c894:	2b00      	cmp	r3, #0
 800c896:	d02e      	beq.n	800c8f6 <QSPI_Config+0x22c>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800c898:	68bb      	ldr	r3, [r7, #8]
 800c89a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c89c:	68bb      	ldr	r3, [r7, #8]
 800c89e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c8a0:	431a      	orrs	r2, r3
 800c8a2:	68bb      	ldr	r3, [r7, #8]
 800c8a4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c8a6:	431a      	orrs	r2, r3
 800c8a8:	68bb      	ldr	r3, [r7, #8]
 800c8aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c8ac:	431a      	orrs	r2, r3
 800c8ae:	68bb      	ldr	r3, [r7, #8]
 800c8b0:	695b      	ldr	r3, [r3, #20]
 800c8b2:	049b      	lsls	r3, r3, #18
 800c8b4:	431a      	orrs	r2, r3
 800c8b6:	68bb      	ldr	r3, [r7, #8]
 800c8b8:	691b      	ldr	r3, [r3, #16]
 800c8ba:	431a      	orrs	r2, r3
 800c8bc:	68bb      	ldr	r3, [r7, #8]
 800c8be:	6a1b      	ldr	r3, [r3, #32]
 800c8c0:	431a      	orrs	r2, r3
 800c8c2:	68bb      	ldr	r3, [r7, #8]
 800c8c4:	68db      	ldr	r3, [r3, #12]
 800c8c6:	431a      	orrs	r2, r3
 800c8c8:	68bb      	ldr	r3, [r7, #8]
 800c8ca:	69db      	ldr	r3, [r3, #28]
 800c8cc:	431a      	orrs	r2, r3
 800c8ce:	68bb      	ldr	r3, [r7, #8]
 800c8d0:	699b      	ldr	r3, [r3, #24]
 800c8d2:	ea42 0103 	orr.w	r1, r2, r3
 800c8d6:	68fb      	ldr	r3, [r7, #12]
 800c8d8:	681b      	ldr	r3, [r3, #0]
 800c8da:	687a      	ldr	r2, [r7, #4]
 800c8dc:	430a      	orrs	r2, r1
 800c8de:	615a      	str	r2, [r3, #20]
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 800c8e0:	687b      	ldr	r3, [r7, #4]
 800c8e2:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 800c8e6:	f000 8081 	beq.w	800c9ec <QSPI_Config+0x322>
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 800c8ea:	68fb      	ldr	r3, [r7, #12]
 800c8ec:	681b      	ldr	r3, [r3, #0]
 800c8ee:	68ba      	ldr	r2, [r7, #8]
 800c8f0:	6852      	ldr	r2, [r2, #4]
 800c8f2:	619a      	str	r2, [r3, #24]
}
 800c8f4:	e07a      	b.n	800c9ec <QSPI_Config+0x322>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800c8f6:	68bb      	ldr	r3, [r7, #8]
 800c8f8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c8fa:	68bb      	ldr	r3, [r7, #8]
 800c8fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c8fe:	431a      	orrs	r2, r3
 800c900:	68bb      	ldr	r3, [r7, #8]
 800c902:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c904:	431a      	orrs	r2, r3
 800c906:	68bb      	ldr	r3, [r7, #8]
 800c908:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c90a:	431a      	orrs	r2, r3
 800c90c:	68bb      	ldr	r3, [r7, #8]
 800c90e:	695b      	ldr	r3, [r3, #20]
 800c910:	049b      	lsls	r3, r3, #18
 800c912:	431a      	orrs	r2, r3
 800c914:	68bb      	ldr	r3, [r7, #8]
 800c916:	691b      	ldr	r3, [r3, #16]
 800c918:	431a      	orrs	r2, r3
 800c91a:	68bb      	ldr	r3, [r7, #8]
 800c91c:	6a1b      	ldr	r3, [r3, #32]
 800c91e:	431a      	orrs	r2, r3
 800c920:	68bb      	ldr	r3, [r7, #8]
 800c922:	69db      	ldr	r3, [r3, #28]
 800c924:	431a      	orrs	r2, r3
 800c926:	68bb      	ldr	r3, [r7, #8]
 800c928:	699b      	ldr	r3, [r3, #24]
 800c92a:	ea42 0103 	orr.w	r1, r2, r3
 800c92e:	68fb      	ldr	r3, [r7, #12]
 800c930:	681b      	ldr	r3, [r3, #0]
 800c932:	687a      	ldr	r2, [r7, #4]
 800c934:	430a      	orrs	r2, r1
 800c936:	615a      	str	r2, [r3, #20]
        CLEAR_REG(hqspi->Instance->AR);
 800c938:	68fb      	ldr	r3, [r7, #12]
 800c93a:	681b      	ldr	r3, [r3, #0]
 800c93c:	2200      	movs	r2, #0
 800c93e:	619a      	str	r2, [r3, #24]
}
 800c940:	e054      	b.n	800c9ec <QSPI_Config+0x322>
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 800c942:	68bb      	ldr	r3, [r7, #8]
 800c944:	69db      	ldr	r3, [r3, #28]
 800c946:	2b00      	cmp	r3, #0
 800c948:	d02a      	beq.n	800c9a0 <QSPI_Config+0x2d6>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800c94a:	68bb      	ldr	r3, [r7, #8]
 800c94c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c94e:	68bb      	ldr	r3, [r7, #8]
 800c950:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c952:	431a      	orrs	r2, r3
 800c954:	68bb      	ldr	r3, [r7, #8]
 800c956:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c958:	431a      	orrs	r2, r3
 800c95a:	68bb      	ldr	r3, [r7, #8]
 800c95c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c95e:	431a      	orrs	r2, r3
 800c960:	68bb      	ldr	r3, [r7, #8]
 800c962:	695b      	ldr	r3, [r3, #20]
 800c964:	049b      	lsls	r3, r3, #18
 800c966:	431a      	orrs	r2, r3
 800c968:	68bb      	ldr	r3, [r7, #8]
 800c96a:	6a1b      	ldr	r3, [r3, #32]
 800c96c:	431a      	orrs	r2, r3
 800c96e:	68bb      	ldr	r3, [r7, #8]
 800c970:	68db      	ldr	r3, [r3, #12]
 800c972:	431a      	orrs	r2, r3
 800c974:	68bb      	ldr	r3, [r7, #8]
 800c976:	69db      	ldr	r3, [r3, #28]
 800c978:	431a      	orrs	r2, r3
 800c97a:	68bb      	ldr	r3, [r7, #8]
 800c97c:	699b      	ldr	r3, [r3, #24]
 800c97e:	ea42 0103 	orr.w	r1, r2, r3
 800c982:	68fb      	ldr	r3, [r7, #12]
 800c984:	681b      	ldr	r3, [r3, #0]
 800c986:	687a      	ldr	r2, [r7, #4]
 800c988:	430a      	orrs	r2, r1
 800c98a:	615a      	str	r2, [r3, #20]
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 800c98c:	687b      	ldr	r3, [r7, #4]
 800c98e:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 800c992:	d02b      	beq.n	800c9ec <QSPI_Config+0x322>
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 800c994:	68fb      	ldr	r3, [r7, #12]
 800c996:	681b      	ldr	r3, [r3, #0]
 800c998:	68ba      	ldr	r2, [r7, #8]
 800c99a:	6852      	ldr	r2, [r2, #4]
 800c99c:	619a      	str	r2, [r3, #24]
}
 800c99e:	e025      	b.n	800c9ec <QSPI_Config+0x322>
        if (cmd->DataMode != QSPI_DATA_NONE)
 800c9a0:	68bb      	ldr	r3, [r7, #8]
 800c9a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c9a4:	2b00      	cmp	r3, #0
 800c9a6:	d021      	beq.n	800c9ec <QSPI_Config+0x322>
          WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800c9a8:	68bb      	ldr	r3, [r7, #8]
 800c9aa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c9ac:	68bb      	ldr	r3, [r7, #8]
 800c9ae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c9b0:	431a      	orrs	r2, r3
 800c9b2:	68bb      	ldr	r3, [r7, #8]
 800c9b4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c9b6:	431a      	orrs	r2, r3
 800c9b8:	68bb      	ldr	r3, [r7, #8]
 800c9ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c9bc:	431a      	orrs	r2, r3
 800c9be:	68bb      	ldr	r3, [r7, #8]
 800c9c0:	695b      	ldr	r3, [r3, #20]
 800c9c2:	049b      	lsls	r3, r3, #18
 800c9c4:	431a      	orrs	r2, r3
 800c9c6:	68bb      	ldr	r3, [r7, #8]
 800c9c8:	6a1b      	ldr	r3, [r3, #32]
 800c9ca:	431a      	orrs	r2, r3
 800c9cc:	68bb      	ldr	r3, [r7, #8]
 800c9ce:	69db      	ldr	r3, [r3, #28]
 800c9d0:	431a      	orrs	r2, r3
 800c9d2:	68bb      	ldr	r3, [r7, #8]
 800c9d4:	699b      	ldr	r3, [r3, #24]
 800c9d6:	ea42 0103 	orr.w	r1, r2, r3
 800c9da:	68fb      	ldr	r3, [r7, #12]
 800c9dc:	681b      	ldr	r3, [r3, #0]
 800c9de:	687a      	ldr	r2, [r7, #4]
 800c9e0:	430a      	orrs	r2, r1
 800c9e2:	615a      	str	r2, [r3, #20]
          CLEAR_REG(hqspi->Instance->AR);
 800c9e4:	68fb      	ldr	r3, [r7, #12]
 800c9e6:	681b      	ldr	r3, [r3, #0]
 800c9e8:	2200      	movs	r2, #0
 800c9ea:	619a      	str	r2, [r3, #24]
}
 800c9ec:	bf00      	nop
 800c9ee:	3714      	adds	r7, #20
 800c9f0:	46bd      	mov	sp, r7
 800c9f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9f6:	4770      	bx	lr

0800c9f8 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800c9f8:	b580      	push	{r7, lr}
 800c9fa:	b088      	sub	sp, #32
 800c9fc:	af00      	add	r7, sp, #0
 800c9fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800ca00:	687b      	ldr	r3, [r7, #4]
 800ca02:	2b00      	cmp	r3, #0
 800ca04:	d101      	bne.n	800ca0a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800ca06:	2301      	movs	r3, #1
 800ca08:	e3ca      	b.n	800d1a0 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800ca0a:	4b97      	ldr	r3, [pc, #604]	@ (800cc68 <HAL_RCC_OscConfig+0x270>)
 800ca0c:	689b      	ldr	r3, [r3, #8]
 800ca0e:	f003 030c 	and.w	r3, r3, #12
 800ca12:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800ca14:	4b94      	ldr	r3, [pc, #592]	@ (800cc68 <HAL_RCC_OscConfig+0x270>)
 800ca16:	68db      	ldr	r3, [r3, #12]
 800ca18:	f003 0303 	and.w	r3, r3, #3
 800ca1c:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800ca1e:	687b      	ldr	r3, [r7, #4]
 800ca20:	681b      	ldr	r3, [r3, #0]
 800ca22:	f003 0310 	and.w	r3, r3, #16
 800ca26:	2b00      	cmp	r3, #0
 800ca28:	f000 80e4 	beq.w	800cbf4 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800ca2c:	69bb      	ldr	r3, [r7, #24]
 800ca2e:	2b00      	cmp	r3, #0
 800ca30:	d007      	beq.n	800ca42 <HAL_RCC_OscConfig+0x4a>
 800ca32:	69bb      	ldr	r3, [r7, #24]
 800ca34:	2b0c      	cmp	r3, #12
 800ca36:	f040 808b 	bne.w	800cb50 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800ca3a:	697b      	ldr	r3, [r7, #20]
 800ca3c:	2b01      	cmp	r3, #1
 800ca3e:	f040 8087 	bne.w	800cb50 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800ca42:	4b89      	ldr	r3, [pc, #548]	@ (800cc68 <HAL_RCC_OscConfig+0x270>)
 800ca44:	681b      	ldr	r3, [r3, #0]
 800ca46:	f003 0302 	and.w	r3, r3, #2
 800ca4a:	2b00      	cmp	r3, #0
 800ca4c:	d005      	beq.n	800ca5a <HAL_RCC_OscConfig+0x62>
 800ca4e:	687b      	ldr	r3, [r7, #4]
 800ca50:	699b      	ldr	r3, [r3, #24]
 800ca52:	2b00      	cmp	r3, #0
 800ca54:	d101      	bne.n	800ca5a <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 800ca56:	2301      	movs	r3, #1
 800ca58:	e3a2      	b.n	800d1a0 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800ca5a:	687b      	ldr	r3, [r7, #4]
 800ca5c:	6a1a      	ldr	r2, [r3, #32]
 800ca5e:	4b82      	ldr	r3, [pc, #520]	@ (800cc68 <HAL_RCC_OscConfig+0x270>)
 800ca60:	681b      	ldr	r3, [r3, #0]
 800ca62:	f003 0308 	and.w	r3, r3, #8
 800ca66:	2b00      	cmp	r3, #0
 800ca68:	d004      	beq.n	800ca74 <HAL_RCC_OscConfig+0x7c>
 800ca6a:	4b7f      	ldr	r3, [pc, #508]	@ (800cc68 <HAL_RCC_OscConfig+0x270>)
 800ca6c:	681b      	ldr	r3, [r3, #0]
 800ca6e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800ca72:	e005      	b.n	800ca80 <HAL_RCC_OscConfig+0x88>
 800ca74:	4b7c      	ldr	r3, [pc, #496]	@ (800cc68 <HAL_RCC_OscConfig+0x270>)
 800ca76:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800ca7a:	091b      	lsrs	r3, r3, #4
 800ca7c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800ca80:	4293      	cmp	r3, r2
 800ca82:	d223      	bcs.n	800cacc <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800ca84:	687b      	ldr	r3, [r7, #4]
 800ca86:	6a1b      	ldr	r3, [r3, #32]
 800ca88:	4618      	mov	r0, r3
 800ca8a:	f000 fd55 	bl	800d538 <RCC_SetFlashLatencyFromMSIRange>
 800ca8e:	4603      	mov	r3, r0
 800ca90:	2b00      	cmp	r3, #0
 800ca92:	d001      	beq.n	800ca98 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 800ca94:	2301      	movs	r3, #1
 800ca96:	e383      	b.n	800d1a0 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800ca98:	4b73      	ldr	r3, [pc, #460]	@ (800cc68 <HAL_RCC_OscConfig+0x270>)
 800ca9a:	681b      	ldr	r3, [r3, #0]
 800ca9c:	4a72      	ldr	r2, [pc, #456]	@ (800cc68 <HAL_RCC_OscConfig+0x270>)
 800ca9e:	f043 0308 	orr.w	r3, r3, #8
 800caa2:	6013      	str	r3, [r2, #0]
 800caa4:	4b70      	ldr	r3, [pc, #448]	@ (800cc68 <HAL_RCC_OscConfig+0x270>)
 800caa6:	681b      	ldr	r3, [r3, #0]
 800caa8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800caac:	687b      	ldr	r3, [r7, #4]
 800caae:	6a1b      	ldr	r3, [r3, #32]
 800cab0:	496d      	ldr	r1, [pc, #436]	@ (800cc68 <HAL_RCC_OscConfig+0x270>)
 800cab2:	4313      	orrs	r3, r2
 800cab4:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800cab6:	4b6c      	ldr	r3, [pc, #432]	@ (800cc68 <HAL_RCC_OscConfig+0x270>)
 800cab8:	685b      	ldr	r3, [r3, #4]
 800caba:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 800cabe:	687b      	ldr	r3, [r7, #4]
 800cac0:	69db      	ldr	r3, [r3, #28]
 800cac2:	021b      	lsls	r3, r3, #8
 800cac4:	4968      	ldr	r1, [pc, #416]	@ (800cc68 <HAL_RCC_OscConfig+0x270>)
 800cac6:	4313      	orrs	r3, r2
 800cac8:	604b      	str	r3, [r1, #4]
 800caca:	e025      	b.n	800cb18 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800cacc:	4b66      	ldr	r3, [pc, #408]	@ (800cc68 <HAL_RCC_OscConfig+0x270>)
 800cace:	681b      	ldr	r3, [r3, #0]
 800cad0:	4a65      	ldr	r2, [pc, #404]	@ (800cc68 <HAL_RCC_OscConfig+0x270>)
 800cad2:	f043 0308 	orr.w	r3, r3, #8
 800cad6:	6013      	str	r3, [r2, #0]
 800cad8:	4b63      	ldr	r3, [pc, #396]	@ (800cc68 <HAL_RCC_OscConfig+0x270>)
 800cada:	681b      	ldr	r3, [r3, #0]
 800cadc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800cae0:	687b      	ldr	r3, [r7, #4]
 800cae2:	6a1b      	ldr	r3, [r3, #32]
 800cae4:	4960      	ldr	r1, [pc, #384]	@ (800cc68 <HAL_RCC_OscConfig+0x270>)
 800cae6:	4313      	orrs	r3, r2
 800cae8:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800caea:	4b5f      	ldr	r3, [pc, #380]	@ (800cc68 <HAL_RCC_OscConfig+0x270>)
 800caec:	685b      	ldr	r3, [r3, #4]
 800caee:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 800caf2:	687b      	ldr	r3, [r7, #4]
 800caf4:	69db      	ldr	r3, [r3, #28]
 800caf6:	021b      	lsls	r3, r3, #8
 800caf8:	495b      	ldr	r1, [pc, #364]	@ (800cc68 <HAL_RCC_OscConfig+0x270>)
 800cafa:	4313      	orrs	r3, r2
 800cafc:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 800cafe:	69bb      	ldr	r3, [r7, #24]
 800cb00:	2b00      	cmp	r3, #0
 800cb02:	d109      	bne.n	800cb18 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800cb04:	687b      	ldr	r3, [r7, #4]
 800cb06:	6a1b      	ldr	r3, [r3, #32]
 800cb08:	4618      	mov	r0, r3
 800cb0a:	f000 fd15 	bl	800d538 <RCC_SetFlashLatencyFromMSIRange>
 800cb0e:	4603      	mov	r3, r0
 800cb10:	2b00      	cmp	r3, #0
 800cb12:	d001      	beq.n	800cb18 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 800cb14:	2301      	movs	r3, #1
 800cb16:	e343      	b.n	800d1a0 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800cb18:	f000 fc4a 	bl	800d3b0 <HAL_RCC_GetSysClockFreq>
 800cb1c:	4602      	mov	r2, r0
 800cb1e:	4b52      	ldr	r3, [pc, #328]	@ (800cc68 <HAL_RCC_OscConfig+0x270>)
 800cb20:	689b      	ldr	r3, [r3, #8]
 800cb22:	091b      	lsrs	r3, r3, #4
 800cb24:	f003 030f 	and.w	r3, r3, #15
 800cb28:	4950      	ldr	r1, [pc, #320]	@ (800cc6c <HAL_RCC_OscConfig+0x274>)
 800cb2a:	5ccb      	ldrb	r3, [r1, r3]
 800cb2c:	f003 031f 	and.w	r3, r3, #31
 800cb30:	fa22 f303 	lsr.w	r3, r2, r3
 800cb34:	4a4e      	ldr	r2, [pc, #312]	@ (800cc70 <HAL_RCC_OscConfig+0x278>)
 800cb36:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800cb38:	4b4e      	ldr	r3, [pc, #312]	@ (800cc74 <HAL_RCC_OscConfig+0x27c>)
 800cb3a:	681b      	ldr	r3, [r3, #0]
 800cb3c:	4618      	mov	r0, r3
 800cb3e:	f7fc fa71 	bl	8009024 <HAL_InitTick>
 800cb42:	4603      	mov	r3, r0
 800cb44:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 800cb46:	7bfb      	ldrb	r3, [r7, #15]
 800cb48:	2b00      	cmp	r3, #0
 800cb4a:	d052      	beq.n	800cbf2 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 800cb4c:	7bfb      	ldrb	r3, [r7, #15]
 800cb4e:	e327      	b.n	800d1a0 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800cb50:	687b      	ldr	r3, [r7, #4]
 800cb52:	699b      	ldr	r3, [r3, #24]
 800cb54:	2b00      	cmp	r3, #0
 800cb56:	d032      	beq.n	800cbbe <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800cb58:	4b43      	ldr	r3, [pc, #268]	@ (800cc68 <HAL_RCC_OscConfig+0x270>)
 800cb5a:	681b      	ldr	r3, [r3, #0]
 800cb5c:	4a42      	ldr	r2, [pc, #264]	@ (800cc68 <HAL_RCC_OscConfig+0x270>)
 800cb5e:	f043 0301 	orr.w	r3, r3, #1
 800cb62:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800cb64:	f7fc faae 	bl	80090c4 <HAL_GetTick>
 800cb68:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800cb6a:	e008      	b.n	800cb7e <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800cb6c:	f7fc faaa 	bl	80090c4 <HAL_GetTick>
 800cb70:	4602      	mov	r2, r0
 800cb72:	693b      	ldr	r3, [r7, #16]
 800cb74:	1ad3      	subs	r3, r2, r3
 800cb76:	2b02      	cmp	r3, #2
 800cb78:	d901      	bls.n	800cb7e <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 800cb7a:	2303      	movs	r3, #3
 800cb7c:	e310      	b.n	800d1a0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800cb7e:	4b3a      	ldr	r3, [pc, #232]	@ (800cc68 <HAL_RCC_OscConfig+0x270>)
 800cb80:	681b      	ldr	r3, [r3, #0]
 800cb82:	f003 0302 	and.w	r3, r3, #2
 800cb86:	2b00      	cmp	r3, #0
 800cb88:	d0f0      	beq.n	800cb6c <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800cb8a:	4b37      	ldr	r3, [pc, #220]	@ (800cc68 <HAL_RCC_OscConfig+0x270>)
 800cb8c:	681b      	ldr	r3, [r3, #0]
 800cb8e:	4a36      	ldr	r2, [pc, #216]	@ (800cc68 <HAL_RCC_OscConfig+0x270>)
 800cb90:	f043 0308 	orr.w	r3, r3, #8
 800cb94:	6013      	str	r3, [r2, #0]
 800cb96:	4b34      	ldr	r3, [pc, #208]	@ (800cc68 <HAL_RCC_OscConfig+0x270>)
 800cb98:	681b      	ldr	r3, [r3, #0]
 800cb9a:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800cb9e:	687b      	ldr	r3, [r7, #4]
 800cba0:	6a1b      	ldr	r3, [r3, #32]
 800cba2:	4931      	ldr	r1, [pc, #196]	@ (800cc68 <HAL_RCC_OscConfig+0x270>)
 800cba4:	4313      	orrs	r3, r2
 800cba6:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800cba8:	4b2f      	ldr	r3, [pc, #188]	@ (800cc68 <HAL_RCC_OscConfig+0x270>)
 800cbaa:	685b      	ldr	r3, [r3, #4]
 800cbac:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 800cbb0:	687b      	ldr	r3, [r7, #4]
 800cbb2:	69db      	ldr	r3, [r3, #28]
 800cbb4:	021b      	lsls	r3, r3, #8
 800cbb6:	492c      	ldr	r1, [pc, #176]	@ (800cc68 <HAL_RCC_OscConfig+0x270>)
 800cbb8:	4313      	orrs	r3, r2
 800cbba:	604b      	str	r3, [r1, #4]
 800cbbc:	e01a      	b.n	800cbf4 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800cbbe:	4b2a      	ldr	r3, [pc, #168]	@ (800cc68 <HAL_RCC_OscConfig+0x270>)
 800cbc0:	681b      	ldr	r3, [r3, #0]
 800cbc2:	4a29      	ldr	r2, [pc, #164]	@ (800cc68 <HAL_RCC_OscConfig+0x270>)
 800cbc4:	f023 0301 	bic.w	r3, r3, #1
 800cbc8:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800cbca:	f7fc fa7b 	bl	80090c4 <HAL_GetTick>
 800cbce:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800cbd0:	e008      	b.n	800cbe4 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800cbd2:	f7fc fa77 	bl	80090c4 <HAL_GetTick>
 800cbd6:	4602      	mov	r2, r0
 800cbd8:	693b      	ldr	r3, [r7, #16]
 800cbda:	1ad3      	subs	r3, r2, r3
 800cbdc:	2b02      	cmp	r3, #2
 800cbde:	d901      	bls.n	800cbe4 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 800cbe0:	2303      	movs	r3, #3
 800cbe2:	e2dd      	b.n	800d1a0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800cbe4:	4b20      	ldr	r3, [pc, #128]	@ (800cc68 <HAL_RCC_OscConfig+0x270>)
 800cbe6:	681b      	ldr	r3, [r3, #0]
 800cbe8:	f003 0302 	and.w	r3, r3, #2
 800cbec:	2b00      	cmp	r3, #0
 800cbee:	d1f0      	bne.n	800cbd2 <HAL_RCC_OscConfig+0x1da>
 800cbf0:	e000      	b.n	800cbf4 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800cbf2:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800cbf4:	687b      	ldr	r3, [r7, #4]
 800cbf6:	681b      	ldr	r3, [r3, #0]
 800cbf8:	f003 0301 	and.w	r3, r3, #1
 800cbfc:	2b00      	cmp	r3, #0
 800cbfe:	d074      	beq.n	800ccea <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 800cc00:	69bb      	ldr	r3, [r7, #24]
 800cc02:	2b08      	cmp	r3, #8
 800cc04:	d005      	beq.n	800cc12 <HAL_RCC_OscConfig+0x21a>
 800cc06:	69bb      	ldr	r3, [r7, #24]
 800cc08:	2b0c      	cmp	r3, #12
 800cc0a:	d10e      	bne.n	800cc2a <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 800cc0c:	697b      	ldr	r3, [r7, #20]
 800cc0e:	2b03      	cmp	r3, #3
 800cc10:	d10b      	bne.n	800cc2a <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800cc12:	4b15      	ldr	r3, [pc, #84]	@ (800cc68 <HAL_RCC_OscConfig+0x270>)
 800cc14:	681b      	ldr	r3, [r3, #0]
 800cc16:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800cc1a:	2b00      	cmp	r3, #0
 800cc1c:	d064      	beq.n	800cce8 <HAL_RCC_OscConfig+0x2f0>
 800cc1e:	687b      	ldr	r3, [r7, #4]
 800cc20:	685b      	ldr	r3, [r3, #4]
 800cc22:	2b00      	cmp	r3, #0
 800cc24:	d160      	bne.n	800cce8 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 800cc26:	2301      	movs	r3, #1
 800cc28:	e2ba      	b.n	800d1a0 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800cc2a:	687b      	ldr	r3, [r7, #4]
 800cc2c:	685b      	ldr	r3, [r3, #4]
 800cc2e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800cc32:	d106      	bne.n	800cc42 <HAL_RCC_OscConfig+0x24a>
 800cc34:	4b0c      	ldr	r3, [pc, #48]	@ (800cc68 <HAL_RCC_OscConfig+0x270>)
 800cc36:	681b      	ldr	r3, [r3, #0]
 800cc38:	4a0b      	ldr	r2, [pc, #44]	@ (800cc68 <HAL_RCC_OscConfig+0x270>)
 800cc3a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800cc3e:	6013      	str	r3, [r2, #0]
 800cc40:	e026      	b.n	800cc90 <HAL_RCC_OscConfig+0x298>
 800cc42:	687b      	ldr	r3, [r7, #4]
 800cc44:	685b      	ldr	r3, [r3, #4]
 800cc46:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800cc4a:	d115      	bne.n	800cc78 <HAL_RCC_OscConfig+0x280>
 800cc4c:	4b06      	ldr	r3, [pc, #24]	@ (800cc68 <HAL_RCC_OscConfig+0x270>)
 800cc4e:	681b      	ldr	r3, [r3, #0]
 800cc50:	4a05      	ldr	r2, [pc, #20]	@ (800cc68 <HAL_RCC_OscConfig+0x270>)
 800cc52:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800cc56:	6013      	str	r3, [r2, #0]
 800cc58:	4b03      	ldr	r3, [pc, #12]	@ (800cc68 <HAL_RCC_OscConfig+0x270>)
 800cc5a:	681b      	ldr	r3, [r3, #0]
 800cc5c:	4a02      	ldr	r2, [pc, #8]	@ (800cc68 <HAL_RCC_OscConfig+0x270>)
 800cc5e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800cc62:	6013      	str	r3, [r2, #0]
 800cc64:	e014      	b.n	800cc90 <HAL_RCC_OscConfig+0x298>
 800cc66:	bf00      	nop
 800cc68:	40021000 	.word	0x40021000
 800cc6c:	080143c8 	.word	0x080143c8
 800cc70:	20000000 	.word	0x20000000
 800cc74:	2000000c 	.word	0x2000000c
 800cc78:	4ba0      	ldr	r3, [pc, #640]	@ (800cefc <HAL_RCC_OscConfig+0x504>)
 800cc7a:	681b      	ldr	r3, [r3, #0]
 800cc7c:	4a9f      	ldr	r2, [pc, #636]	@ (800cefc <HAL_RCC_OscConfig+0x504>)
 800cc7e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800cc82:	6013      	str	r3, [r2, #0]
 800cc84:	4b9d      	ldr	r3, [pc, #628]	@ (800cefc <HAL_RCC_OscConfig+0x504>)
 800cc86:	681b      	ldr	r3, [r3, #0]
 800cc88:	4a9c      	ldr	r2, [pc, #624]	@ (800cefc <HAL_RCC_OscConfig+0x504>)
 800cc8a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800cc8e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800cc90:	687b      	ldr	r3, [r7, #4]
 800cc92:	685b      	ldr	r3, [r3, #4]
 800cc94:	2b00      	cmp	r3, #0
 800cc96:	d013      	beq.n	800ccc0 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800cc98:	f7fc fa14 	bl	80090c4 <HAL_GetTick>
 800cc9c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800cc9e:	e008      	b.n	800ccb2 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800cca0:	f7fc fa10 	bl	80090c4 <HAL_GetTick>
 800cca4:	4602      	mov	r2, r0
 800cca6:	693b      	ldr	r3, [r7, #16]
 800cca8:	1ad3      	subs	r3, r2, r3
 800ccaa:	2b64      	cmp	r3, #100	@ 0x64
 800ccac:	d901      	bls.n	800ccb2 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800ccae:	2303      	movs	r3, #3
 800ccb0:	e276      	b.n	800d1a0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800ccb2:	4b92      	ldr	r3, [pc, #584]	@ (800cefc <HAL_RCC_OscConfig+0x504>)
 800ccb4:	681b      	ldr	r3, [r3, #0]
 800ccb6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800ccba:	2b00      	cmp	r3, #0
 800ccbc:	d0f0      	beq.n	800cca0 <HAL_RCC_OscConfig+0x2a8>
 800ccbe:	e014      	b.n	800ccea <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800ccc0:	f7fc fa00 	bl	80090c4 <HAL_GetTick>
 800ccc4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800ccc6:	e008      	b.n	800ccda <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800ccc8:	f7fc f9fc 	bl	80090c4 <HAL_GetTick>
 800cccc:	4602      	mov	r2, r0
 800ccce:	693b      	ldr	r3, [r7, #16]
 800ccd0:	1ad3      	subs	r3, r2, r3
 800ccd2:	2b64      	cmp	r3, #100	@ 0x64
 800ccd4:	d901      	bls.n	800ccda <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800ccd6:	2303      	movs	r3, #3
 800ccd8:	e262      	b.n	800d1a0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800ccda:	4b88      	ldr	r3, [pc, #544]	@ (800cefc <HAL_RCC_OscConfig+0x504>)
 800ccdc:	681b      	ldr	r3, [r3, #0]
 800ccde:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800cce2:	2b00      	cmp	r3, #0
 800cce4:	d1f0      	bne.n	800ccc8 <HAL_RCC_OscConfig+0x2d0>
 800cce6:	e000      	b.n	800ccea <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800cce8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800ccea:	687b      	ldr	r3, [r7, #4]
 800ccec:	681b      	ldr	r3, [r3, #0]
 800ccee:	f003 0302 	and.w	r3, r3, #2
 800ccf2:	2b00      	cmp	r3, #0
 800ccf4:	d060      	beq.n	800cdb8 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800ccf6:	69bb      	ldr	r3, [r7, #24]
 800ccf8:	2b04      	cmp	r3, #4
 800ccfa:	d005      	beq.n	800cd08 <HAL_RCC_OscConfig+0x310>
 800ccfc:	69bb      	ldr	r3, [r7, #24]
 800ccfe:	2b0c      	cmp	r3, #12
 800cd00:	d119      	bne.n	800cd36 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800cd02:	697b      	ldr	r3, [r7, #20]
 800cd04:	2b02      	cmp	r3, #2
 800cd06:	d116      	bne.n	800cd36 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800cd08:	4b7c      	ldr	r3, [pc, #496]	@ (800cefc <HAL_RCC_OscConfig+0x504>)
 800cd0a:	681b      	ldr	r3, [r3, #0]
 800cd0c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800cd10:	2b00      	cmp	r3, #0
 800cd12:	d005      	beq.n	800cd20 <HAL_RCC_OscConfig+0x328>
 800cd14:	687b      	ldr	r3, [r7, #4]
 800cd16:	68db      	ldr	r3, [r3, #12]
 800cd18:	2b00      	cmp	r3, #0
 800cd1a:	d101      	bne.n	800cd20 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 800cd1c:	2301      	movs	r3, #1
 800cd1e:	e23f      	b.n	800d1a0 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800cd20:	4b76      	ldr	r3, [pc, #472]	@ (800cefc <HAL_RCC_OscConfig+0x504>)
 800cd22:	685b      	ldr	r3, [r3, #4]
 800cd24:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 800cd28:	687b      	ldr	r3, [r7, #4]
 800cd2a:	691b      	ldr	r3, [r3, #16]
 800cd2c:	061b      	lsls	r3, r3, #24
 800cd2e:	4973      	ldr	r1, [pc, #460]	@ (800cefc <HAL_RCC_OscConfig+0x504>)
 800cd30:	4313      	orrs	r3, r2
 800cd32:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800cd34:	e040      	b.n	800cdb8 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800cd36:	687b      	ldr	r3, [r7, #4]
 800cd38:	68db      	ldr	r3, [r3, #12]
 800cd3a:	2b00      	cmp	r3, #0
 800cd3c:	d023      	beq.n	800cd86 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800cd3e:	4b6f      	ldr	r3, [pc, #444]	@ (800cefc <HAL_RCC_OscConfig+0x504>)
 800cd40:	681b      	ldr	r3, [r3, #0]
 800cd42:	4a6e      	ldr	r2, [pc, #440]	@ (800cefc <HAL_RCC_OscConfig+0x504>)
 800cd44:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800cd48:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800cd4a:	f7fc f9bb 	bl	80090c4 <HAL_GetTick>
 800cd4e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800cd50:	e008      	b.n	800cd64 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800cd52:	f7fc f9b7 	bl	80090c4 <HAL_GetTick>
 800cd56:	4602      	mov	r2, r0
 800cd58:	693b      	ldr	r3, [r7, #16]
 800cd5a:	1ad3      	subs	r3, r2, r3
 800cd5c:	2b02      	cmp	r3, #2
 800cd5e:	d901      	bls.n	800cd64 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 800cd60:	2303      	movs	r3, #3
 800cd62:	e21d      	b.n	800d1a0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800cd64:	4b65      	ldr	r3, [pc, #404]	@ (800cefc <HAL_RCC_OscConfig+0x504>)
 800cd66:	681b      	ldr	r3, [r3, #0]
 800cd68:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800cd6c:	2b00      	cmp	r3, #0
 800cd6e:	d0f0      	beq.n	800cd52 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800cd70:	4b62      	ldr	r3, [pc, #392]	@ (800cefc <HAL_RCC_OscConfig+0x504>)
 800cd72:	685b      	ldr	r3, [r3, #4]
 800cd74:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 800cd78:	687b      	ldr	r3, [r7, #4]
 800cd7a:	691b      	ldr	r3, [r3, #16]
 800cd7c:	061b      	lsls	r3, r3, #24
 800cd7e:	495f      	ldr	r1, [pc, #380]	@ (800cefc <HAL_RCC_OscConfig+0x504>)
 800cd80:	4313      	orrs	r3, r2
 800cd82:	604b      	str	r3, [r1, #4]
 800cd84:	e018      	b.n	800cdb8 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800cd86:	4b5d      	ldr	r3, [pc, #372]	@ (800cefc <HAL_RCC_OscConfig+0x504>)
 800cd88:	681b      	ldr	r3, [r3, #0]
 800cd8a:	4a5c      	ldr	r2, [pc, #368]	@ (800cefc <HAL_RCC_OscConfig+0x504>)
 800cd8c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800cd90:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800cd92:	f7fc f997 	bl	80090c4 <HAL_GetTick>
 800cd96:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800cd98:	e008      	b.n	800cdac <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800cd9a:	f7fc f993 	bl	80090c4 <HAL_GetTick>
 800cd9e:	4602      	mov	r2, r0
 800cda0:	693b      	ldr	r3, [r7, #16]
 800cda2:	1ad3      	subs	r3, r2, r3
 800cda4:	2b02      	cmp	r3, #2
 800cda6:	d901      	bls.n	800cdac <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 800cda8:	2303      	movs	r3, #3
 800cdaa:	e1f9      	b.n	800d1a0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800cdac:	4b53      	ldr	r3, [pc, #332]	@ (800cefc <HAL_RCC_OscConfig+0x504>)
 800cdae:	681b      	ldr	r3, [r3, #0]
 800cdb0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800cdb4:	2b00      	cmp	r3, #0
 800cdb6:	d1f0      	bne.n	800cd9a <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800cdb8:	687b      	ldr	r3, [r7, #4]
 800cdba:	681b      	ldr	r3, [r3, #0]
 800cdbc:	f003 0308 	and.w	r3, r3, #8
 800cdc0:	2b00      	cmp	r3, #0
 800cdc2:	d03c      	beq.n	800ce3e <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800cdc4:	687b      	ldr	r3, [r7, #4]
 800cdc6:	695b      	ldr	r3, [r3, #20]
 800cdc8:	2b00      	cmp	r3, #0
 800cdca:	d01c      	beq.n	800ce06 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800cdcc:	4b4b      	ldr	r3, [pc, #300]	@ (800cefc <HAL_RCC_OscConfig+0x504>)
 800cdce:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800cdd2:	4a4a      	ldr	r2, [pc, #296]	@ (800cefc <HAL_RCC_OscConfig+0x504>)
 800cdd4:	f043 0301 	orr.w	r3, r3, #1
 800cdd8:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800cddc:	f7fc f972 	bl	80090c4 <HAL_GetTick>
 800cde0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800cde2:	e008      	b.n	800cdf6 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800cde4:	f7fc f96e 	bl	80090c4 <HAL_GetTick>
 800cde8:	4602      	mov	r2, r0
 800cdea:	693b      	ldr	r3, [r7, #16]
 800cdec:	1ad3      	subs	r3, r2, r3
 800cdee:	2b02      	cmp	r3, #2
 800cdf0:	d901      	bls.n	800cdf6 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800cdf2:	2303      	movs	r3, #3
 800cdf4:	e1d4      	b.n	800d1a0 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800cdf6:	4b41      	ldr	r3, [pc, #260]	@ (800cefc <HAL_RCC_OscConfig+0x504>)
 800cdf8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800cdfc:	f003 0302 	and.w	r3, r3, #2
 800ce00:	2b00      	cmp	r3, #0
 800ce02:	d0ef      	beq.n	800cde4 <HAL_RCC_OscConfig+0x3ec>
 800ce04:	e01b      	b.n	800ce3e <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800ce06:	4b3d      	ldr	r3, [pc, #244]	@ (800cefc <HAL_RCC_OscConfig+0x504>)
 800ce08:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800ce0c:	4a3b      	ldr	r2, [pc, #236]	@ (800cefc <HAL_RCC_OscConfig+0x504>)
 800ce0e:	f023 0301 	bic.w	r3, r3, #1
 800ce12:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800ce16:	f7fc f955 	bl	80090c4 <HAL_GetTick>
 800ce1a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800ce1c:	e008      	b.n	800ce30 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800ce1e:	f7fc f951 	bl	80090c4 <HAL_GetTick>
 800ce22:	4602      	mov	r2, r0
 800ce24:	693b      	ldr	r3, [r7, #16]
 800ce26:	1ad3      	subs	r3, r2, r3
 800ce28:	2b02      	cmp	r3, #2
 800ce2a:	d901      	bls.n	800ce30 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 800ce2c:	2303      	movs	r3, #3
 800ce2e:	e1b7      	b.n	800d1a0 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800ce30:	4b32      	ldr	r3, [pc, #200]	@ (800cefc <HAL_RCC_OscConfig+0x504>)
 800ce32:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800ce36:	f003 0302 	and.w	r3, r3, #2
 800ce3a:	2b00      	cmp	r3, #0
 800ce3c:	d1ef      	bne.n	800ce1e <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800ce3e:	687b      	ldr	r3, [r7, #4]
 800ce40:	681b      	ldr	r3, [r3, #0]
 800ce42:	f003 0304 	and.w	r3, r3, #4
 800ce46:	2b00      	cmp	r3, #0
 800ce48:	f000 80a6 	beq.w	800cf98 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 800ce4c:	2300      	movs	r3, #0
 800ce4e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 800ce50:	4b2a      	ldr	r3, [pc, #168]	@ (800cefc <HAL_RCC_OscConfig+0x504>)
 800ce52:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800ce54:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800ce58:	2b00      	cmp	r3, #0
 800ce5a:	d10d      	bne.n	800ce78 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800ce5c:	4b27      	ldr	r3, [pc, #156]	@ (800cefc <HAL_RCC_OscConfig+0x504>)
 800ce5e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800ce60:	4a26      	ldr	r2, [pc, #152]	@ (800cefc <HAL_RCC_OscConfig+0x504>)
 800ce62:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800ce66:	6593      	str	r3, [r2, #88]	@ 0x58
 800ce68:	4b24      	ldr	r3, [pc, #144]	@ (800cefc <HAL_RCC_OscConfig+0x504>)
 800ce6a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800ce6c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800ce70:	60bb      	str	r3, [r7, #8]
 800ce72:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800ce74:	2301      	movs	r3, #1
 800ce76:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800ce78:	4b21      	ldr	r3, [pc, #132]	@ (800cf00 <HAL_RCC_OscConfig+0x508>)
 800ce7a:	681b      	ldr	r3, [r3, #0]
 800ce7c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800ce80:	2b00      	cmp	r3, #0
 800ce82:	d118      	bne.n	800ceb6 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800ce84:	4b1e      	ldr	r3, [pc, #120]	@ (800cf00 <HAL_RCC_OscConfig+0x508>)
 800ce86:	681b      	ldr	r3, [r3, #0]
 800ce88:	4a1d      	ldr	r2, [pc, #116]	@ (800cf00 <HAL_RCC_OscConfig+0x508>)
 800ce8a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800ce8e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800ce90:	f7fc f918 	bl	80090c4 <HAL_GetTick>
 800ce94:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800ce96:	e008      	b.n	800ceaa <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800ce98:	f7fc f914 	bl	80090c4 <HAL_GetTick>
 800ce9c:	4602      	mov	r2, r0
 800ce9e:	693b      	ldr	r3, [r7, #16]
 800cea0:	1ad3      	subs	r3, r2, r3
 800cea2:	2b02      	cmp	r3, #2
 800cea4:	d901      	bls.n	800ceaa <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800cea6:	2303      	movs	r3, #3
 800cea8:	e17a      	b.n	800d1a0 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800ceaa:	4b15      	ldr	r3, [pc, #84]	@ (800cf00 <HAL_RCC_OscConfig+0x508>)
 800ceac:	681b      	ldr	r3, [r3, #0]
 800ceae:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800ceb2:	2b00      	cmp	r3, #0
 800ceb4:	d0f0      	beq.n	800ce98 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800ceb6:	687b      	ldr	r3, [r7, #4]
 800ceb8:	689b      	ldr	r3, [r3, #8]
 800ceba:	2b01      	cmp	r3, #1
 800cebc:	d108      	bne.n	800ced0 <HAL_RCC_OscConfig+0x4d8>
 800cebe:	4b0f      	ldr	r3, [pc, #60]	@ (800cefc <HAL_RCC_OscConfig+0x504>)
 800cec0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800cec4:	4a0d      	ldr	r2, [pc, #52]	@ (800cefc <HAL_RCC_OscConfig+0x504>)
 800cec6:	f043 0301 	orr.w	r3, r3, #1
 800ceca:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800cece:	e029      	b.n	800cf24 <HAL_RCC_OscConfig+0x52c>
 800ced0:	687b      	ldr	r3, [r7, #4]
 800ced2:	689b      	ldr	r3, [r3, #8]
 800ced4:	2b05      	cmp	r3, #5
 800ced6:	d115      	bne.n	800cf04 <HAL_RCC_OscConfig+0x50c>
 800ced8:	4b08      	ldr	r3, [pc, #32]	@ (800cefc <HAL_RCC_OscConfig+0x504>)
 800ceda:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800cede:	4a07      	ldr	r2, [pc, #28]	@ (800cefc <HAL_RCC_OscConfig+0x504>)
 800cee0:	f043 0304 	orr.w	r3, r3, #4
 800cee4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800cee8:	4b04      	ldr	r3, [pc, #16]	@ (800cefc <HAL_RCC_OscConfig+0x504>)
 800ceea:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800ceee:	4a03      	ldr	r2, [pc, #12]	@ (800cefc <HAL_RCC_OscConfig+0x504>)
 800cef0:	f043 0301 	orr.w	r3, r3, #1
 800cef4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800cef8:	e014      	b.n	800cf24 <HAL_RCC_OscConfig+0x52c>
 800cefa:	bf00      	nop
 800cefc:	40021000 	.word	0x40021000
 800cf00:	40007000 	.word	0x40007000
 800cf04:	4b9c      	ldr	r3, [pc, #624]	@ (800d178 <HAL_RCC_OscConfig+0x780>)
 800cf06:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800cf0a:	4a9b      	ldr	r2, [pc, #620]	@ (800d178 <HAL_RCC_OscConfig+0x780>)
 800cf0c:	f023 0301 	bic.w	r3, r3, #1
 800cf10:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800cf14:	4b98      	ldr	r3, [pc, #608]	@ (800d178 <HAL_RCC_OscConfig+0x780>)
 800cf16:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800cf1a:	4a97      	ldr	r2, [pc, #604]	@ (800d178 <HAL_RCC_OscConfig+0x780>)
 800cf1c:	f023 0304 	bic.w	r3, r3, #4
 800cf20:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800cf24:	687b      	ldr	r3, [r7, #4]
 800cf26:	689b      	ldr	r3, [r3, #8]
 800cf28:	2b00      	cmp	r3, #0
 800cf2a:	d016      	beq.n	800cf5a <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800cf2c:	f7fc f8ca 	bl	80090c4 <HAL_GetTick>
 800cf30:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800cf32:	e00a      	b.n	800cf4a <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800cf34:	f7fc f8c6 	bl	80090c4 <HAL_GetTick>
 800cf38:	4602      	mov	r2, r0
 800cf3a:	693b      	ldr	r3, [r7, #16]
 800cf3c:	1ad3      	subs	r3, r2, r3
 800cf3e:	f241 3288 	movw	r2, #5000	@ 0x1388
 800cf42:	4293      	cmp	r3, r2
 800cf44:	d901      	bls.n	800cf4a <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 800cf46:	2303      	movs	r3, #3
 800cf48:	e12a      	b.n	800d1a0 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800cf4a:	4b8b      	ldr	r3, [pc, #556]	@ (800d178 <HAL_RCC_OscConfig+0x780>)
 800cf4c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800cf50:	f003 0302 	and.w	r3, r3, #2
 800cf54:	2b00      	cmp	r3, #0
 800cf56:	d0ed      	beq.n	800cf34 <HAL_RCC_OscConfig+0x53c>
 800cf58:	e015      	b.n	800cf86 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800cf5a:	f7fc f8b3 	bl	80090c4 <HAL_GetTick>
 800cf5e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800cf60:	e00a      	b.n	800cf78 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800cf62:	f7fc f8af 	bl	80090c4 <HAL_GetTick>
 800cf66:	4602      	mov	r2, r0
 800cf68:	693b      	ldr	r3, [r7, #16]
 800cf6a:	1ad3      	subs	r3, r2, r3
 800cf6c:	f241 3288 	movw	r2, #5000	@ 0x1388
 800cf70:	4293      	cmp	r3, r2
 800cf72:	d901      	bls.n	800cf78 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 800cf74:	2303      	movs	r3, #3
 800cf76:	e113      	b.n	800d1a0 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800cf78:	4b7f      	ldr	r3, [pc, #508]	@ (800d178 <HAL_RCC_OscConfig+0x780>)
 800cf7a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800cf7e:	f003 0302 	and.w	r3, r3, #2
 800cf82:	2b00      	cmp	r3, #0
 800cf84:	d1ed      	bne.n	800cf62 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800cf86:	7ffb      	ldrb	r3, [r7, #31]
 800cf88:	2b01      	cmp	r3, #1
 800cf8a:	d105      	bne.n	800cf98 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800cf8c:	4b7a      	ldr	r3, [pc, #488]	@ (800d178 <HAL_RCC_OscConfig+0x780>)
 800cf8e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800cf90:	4a79      	ldr	r2, [pc, #484]	@ (800d178 <HAL_RCC_OscConfig+0x780>)
 800cf92:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800cf96:	6593      	str	r3, [r2, #88]	@ 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800cf98:	687b      	ldr	r3, [r7, #4]
 800cf9a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800cf9c:	2b00      	cmp	r3, #0
 800cf9e:	f000 80fe 	beq.w	800d19e <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800cfa2:	687b      	ldr	r3, [r7, #4]
 800cfa4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800cfa6:	2b02      	cmp	r3, #2
 800cfa8:	f040 80d0 	bne.w	800d14c <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 800cfac:	4b72      	ldr	r3, [pc, #456]	@ (800d178 <HAL_RCC_OscConfig+0x780>)
 800cfae:	68db      	ldr	r3, [r3, #12]
 800cfb0:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800cfb2:	697b      	ldr	r3, [r7, #20]
 800cfb4:	f003 0203 	and.w	r2, r3, #3
 800cfb8:	687b      	ldr	r3, [r7, #4]
 800cfba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800cfbc:	429a      	cmp	r2, r3
 800cfbe:	d130      	bne.n	800d022 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800cfc0:	697b      	ldr	r3, [r7, #20]
 800cfc2:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 800cfc6:	687b      	ldr	r3, [r7, #4]
 800cfc8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800cfca:	3b01      	subs	r3, #1
 800cfcc:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800cfce:	429a      	cmp	r2, r3
 800cfd0:	d127      	bne.n	800d022 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800cfd2:	697b      	ldr	r3, [r7, #20]
 800cfd4:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 800cfd8:	687b      	ldr	r3, [r7, #4]
 800cfda:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800cfdc:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800cfde:	429a      	cmp	r2, r3
 800cfe0:	d11f      	bne.n	800d022 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800cfe2:	697b      	ldr	r3, [r7, #20]
 800cfe4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800cfe8:	687a      	ldr	r2, [r7, #4]
 800cfea:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 800cfec:	2a07      	cmp	r2, #7
 800cfee:	bf14      	ite	ne
 800cff0:	2201      	movne	r2, #1
 800cff2:	2200      	moveq	r2, #0
 800cff4:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800cff6:	4293      	cmp	r3, r2
 800cff8:	d113      	bne.n	800d022 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800cffa:	697b      	ldr	r3, [r7, #20]
 800cffc:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 800d000:	687b      	ldr	r3, [r7, #4]
 800d002:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d004:	085b      	lsrs	r3, r3, #1
 800d006:	3b01      	subs	r3, #1
 800d008:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800d00a:	429a      	cmp	r2, r3
 800d00c:	d109      	bne.n	800d022 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800d00e:	697b      	ldr	r3, [r7, #20]
 800d010:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 800d014:	687b      	ldr	r3, [r7, #4]
 800d016:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d018:	085b      	lsrs	r3, r3, #1
 800d01a:	3b01      	subs	r3, #1
 800d01c:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800d01e:	429a      	cmp	r2, r3
 800d020:	d06e      	beq.n	800d100 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800d022:	69bb      	ldr	r3, [r7, #24]
 800d024:	2b0c      	cmp	r3, #12
 800d026:	d069      	beq.n	800d0fc <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 800d028:	4b53      	ldr	r3, [pc, #332]	@ (800d178 <HAL_RCC_OscConfig+0x780>)
 800d02a:	681b      	ldr	r3, [r3, #0]
 800d02c:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800d030:	2b00      	cmp	r3, #0
 800d032:	d105      	bne.n	800d040 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 800d034:	4b50      	ldr	r3, [pc, #320]	@ (800d178 <HAL_RCC_OscConfig+0x780>)
 800d036:	681b      	ldr	r3, [r3, #0]
 800d038:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800d03c:	2b00      	cmp	r3, #0
 800d03e:	d001      	beq.n	800d044 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 800d040:	2301      	movs	r3, #1
 800d042:	e0ad      	b.n	800d1a0 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800d044:	4b4c      	ldr	r3, [pc, #304]	@ (800d178 <HAL_RCC_OscConfig+0x780>)
 800d046:	681b      	ldr	r3, [r3, #0]
 800d048:	4a4b      	ldr	r2, [pc, #300]	@ (800d178 <HAL_RCC_OscConfig+0x780>)
 800d04a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800d04e:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800d050:	f7fc f838 	bl	80090c4 <HAL_GetTick>
 800d054:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800d056:	e008      	b.n	800d06a <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800d058:	f7fc f834 	bl	80090c4 <HAL_GetTick>
 800d05c:	4602      	mov	r2, r0
 800d05e:	693b      	ldr	r3, [r7, #16]
 800d060:	1ad3      	subs	r3, r2, r3
 800d062:	2b02      	cmp	r3, #2
 800d064:	d901      	bls.n	800d06a <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 800d066:	2303      	movs	r3, #3
 800d068:	e09a      	b.n	800d1a0 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800d06a:	4b43      	ldr	r3, [pc, #268]	@ (800d178 <HAL_RCC_OscConfig+0x780>)
 800d06c:	681b      	ldr	r3, [r3, #0]
 800d06e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800d072:	2b00      	cmp	r3, #0
 800d074:	d1f0      	bne.n	800d058 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800d076:	4b40      	ldr	r3, [pc, #256]	@ (800d178 <HAL_RCC_OscConfig+0x780>)
 800d078:	68da      	ldr	r2, [r3, #12]
 800d07a:	4b40      	ldr	r3, [pc, #256]	@ (800d17c <HAL_RCC_OscConfig+0x784>)
 800d07c:	4013      	ands	r3, r2
 800d07e:	687a      	ldr	r2, [r7, #4]
 800d080:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 800d082:	687a      	ldr	r2, [r7, #4]
 800d084:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800d086:	3a01      	subs	r2, #1
 800d088:	0112      	lsls	r2, r2, #4
 800d08a:	4311      	orrs	r1, r2
 800d08c:	687a      	ldr	r2, [r7, #4]
 800d08e:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 800d090:	0212      	lsls	r2, r2, #8
 800d092:	4311      	orrs	r1, r2
 800d094:	687a      	ldr	r2, [r7, #4]
 800d096:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 800d098:	0852      	lsrs	r2, r2, #1
 800d09a:	3a01      	subs	r2, #1
 800d09c:	0552      	lsls	r2, r2, #21
 800d09e:	4311      	orrs	r1, r2
 800d0a0:	687a      	ldr	r2, [r7, #4]
 800d0a2:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 800d0a4:	0852      	lsrs	r2, r2, #1
 800d0a6:	3a01      	subs	r2, #1
 800d0a8:	0652      	lsls	r2, r2, #25
 800d0aa:	4311      	orrs	r1, r2
 800d0ac:	687a      	ldr	r2, [r7, #4]
 800d0ae:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 800d0b0:	0912      	lsrs	r2, r2, #4
 800d0b2:	0452      	lsls	r2, r2, #17
 800d0b4:	430a      	orrs	r2, r1
 800d0b6:	4930      	ldr	r1, [pc, #192]	@ (800d178 <HAL_RCC_OscConfig+0x780>)
 800d0b8:	4313      	orrs	r3, r2
 800d0ba:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 800d0bc:	4b2e      	ldr	r3, [pc, #184]	@ (800d178 <HAL_RCC_OscConfig+0x780>)
 800d0be:	681b      	ldr	r3, [r3, #0]
 800d0c0:	4a2d      	ldr	r2, [pc, #180]	@ (800d178 <HAL_RCC_OscConfig+0x780>)
 800d0c2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800d0c6:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800d0c8:	4b2b      	ldr	r3, [pc, #172]	@ (800d178 <HAL_RCC_OscConfig+0x780>)
 800d0ca:	68db      	ldr	r3, [r3, #12]
 800d0cc:	4a2a      	ldr	r2, [pc, #168]	@ (800d178 <HAL_RCC_OscConfig+0x780>)
 800d0ce:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800d0d2:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800d0d4:	f7fb fff6 	bl	80090c4 <HAL_GetTick>
 800d0d8:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800d0da:	e008      	b.n	800d0ee <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800d0dc:	f7fb fff2 	bl	80090c4 <HAL_GetTick>
 800d0e0:	4602      	mov	r2, r0
 800d0e2:	693b      	ldr	r3, [r7, #16]
 800d0e4:	1ad3      	subs	r3, r2, r3
 800d0e6:	2b02      	cmp	r3, #2
 800d0e8:	d901      	bls.n	800d0ee <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 800d0ea:	2303      	movs	r3, #3
 800d0ec:	e058      	b.n	800d1a0 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800d0ee:	4b22      	ldr	r3, [pc, #136]	@ (800d178 <HAL_RCC_OscConfig+0x780>)
 800d0f0:	681b      	ldr	r3, [r3, #0]
 800d0f2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800d0f6:	2b00      	cmp	r3, #0
 800d0f8:	d0f0      	beq.n	800d0dc <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800d0fa:	e050      	b.n	800d19e <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 800d0fc:	2301      	movs	r3, #1
 800d0fe:	e04f      	b.n	800d1a0 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800d100:	4b1d      	ldr	r3, [pc, #116]	@ (800d178 <HAL_RCC_OscConfig+0x780>)
 800d102:	681b      	ldr	r3, [r3, #0]
 800d104:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800d108:	2b00      	cmp	r3, #0
 800d10a:	d148      	bne.n	800d19e <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 800d10c:	4b1a      	ldr	r3, [pc, #104]	@ (800d178 <HAL_RCC_OscConfig+0x780>)
 800d10e:	681b      	ldr	r3, [r3, #0]
 800d110:	4a19      	ldr	r2, [pc, #100]	@ (800d178 <HAL_RCC_OscConfig+0x780>)
 800d112:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800d116:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800d118:	4b17      	ldr	r3, [pc, #92]	@ (800d178 <HAL_RCC_OscConfig+0x780>)
 800d11a:	68db      	ldr	r3, [r3, #12]
 800d11c:	4a16      	ldr	r2, [pc, #88]	@ (800d178 <HAL_RCC_OscConfig+0x780>)
 800d11e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800d122:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800d124:	f7fb ffce 	bl	80090c4 <HAL_GetTick>
 800d128:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800d12a:	e008      	b.n	800d13e <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800d12c:	f7fb ffca 	bl	80090c4 <HAL_GetTick>
 800d130:	4602      	mov	r2, r0
 800d132:	693b      	ldr	r3, [r7, #16]
 800d134:	1ad3      	subs	r3, r2, r3
 800d136:	2b02      	cmp	r3, #2
 800d138:	d901      	bls.n	800d13e <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 800d13a:	2303      	movs	r3, #3
 800d13c:	e030      	b.n	800d1a0 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800d13e:	4b0e      	ldr	r3, [pc, #56]	@ (800d178 <HAL_RCC_OscConfig+0x780>)
 800d140:	681b      	ldr	r3, [r3, #0]
 800d142:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800d146:	2b00      	cmp	r3, #0
 800d148:	d0f0      	beq.n	800d12c <HAL_RCC_OscConfig+0x734>
 800d14a:	e028      	b.n	800d19e <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 800d14c:	69bb      	ldr	r3, [r7, #24]
 800d14e:	2b0c      	cmp	r3, #12
 800d150:	d023      	beq.n	800d19a <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800d152:	4b09      	ldr	r3, [pc, #36]	@ (800d178 <HAL_RCC_OscConfig+0x780>)
 800d154:	681b      	ldr	r3, [r3, #0]
 800d156:	4a08      	ldr	r2, [pc, #32]	@ (800d178 <HAL_RCC_OscConfig+0x780>)
 800d158:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800d15c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800d15e:	f7fb ffb1 	bl	80090c4 <HAL_GetTick>
 800d162:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800d164:	e00c      	b.n	800d180 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800d166:	f7fb ffad 	bl	80090c4 <HAL_GetTick>
 800d16a:	4602      	mov	r2, r0
 800d16c:	693b      	ldr	r3, [r7, #16]
 800d16e:	1ad3      	subs	r3, r2, r3
 800d170:	2b02      	cmp	r3, #2
 800d172:	d905      	bls.n	800d180 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 800d174:	2303      	movs	r3, #3
 800d176:	e013      	b.n	800d1a0 <HAL_RCC_OscConfig+0x7a8>
 800d178:	40021000 	.word	0x40021000
 800d17c:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800d180:	4b09      	ldr	r3, [pc, #36]	@ (800d1a8 <HAL_RCC_OscConfig+0x7b0>)
 800d182:	681b      	ldr	r3, [r3, #0]
 800d184:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800d188:	2b00      	cmp	r3, #0
 800d18a:	d1ec      	bne.n	800d166 <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 800d18c:	4b06      	ldr	r3, [pc, #24]	@ (800d1a8 <HAL_RCC_OscConfig+0x7b0>)
 800d18e:	68da      	ldr	r2, [r3, #12]
 800d190:	4905      	ldr	r1, [pc, #20]	@ (800d1a8 <HAL_RCC_OscConfig+0x7b0>)
 800d192:	4b06      	ldr	r3, [pc, #24]	@ (800d1ac <HAL_RCC_OscConfig+0x7b4>)
 800d194:	4013      	ands	r3, r2
 800d196:	60cb      	str	r3, [r1, #12]
 800d198:	e001      	b.n	800d19e <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800d19a:	2301      	movs	r3, #1
 800d19c:	e000      	b.n	800d1a0 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 800d19e:	2300      	movs	r3, #0
}
 800d1a0:	4618      	mov	r0, r3
 800d1a2:	3720      	adds	r7, #32
 800d1a4:	46bd      	mov	sp, r7
 800d1a6:	bd80      	pop	{r7, pc}
 800d1a8:	40021000 	.word	0x40021000
 800d1ac:	feeefffc 	.word	0xfeeefffc

0800d1b0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800d1b0:	b580      	push	{r7, lr}
 800d1b2:	b084      	sub	sp, #16
 800d1b4:	af00      	add	r7, sp, #0
 800d1b6:	6078      	str	r0, [r7, #4]
 800d1b8:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800d1ba:	687b      	ldr	r3, [r7, #4]
 800d1bc:	2b00      	cmp	r3, #0
 800d1be:	d101      	bne.n	800d1c4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800d1c0:	2301      	movs	r3, #1
 800d1c2:	e0e7      	b.n	800d394 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800d1c4:	4b75      	ldr	r3, [pc, #468]	@ (800d39c <HAL_RCC_ClockConfig+0x1ec>)
 800d1c6:	681b      	ldr	r3, [r3, #0]
 800d1c8:	f003 0307 	and.w	r3, r3, #7
 800d1cc:	683a      	ldr	r2, [r7, #0]
 800d1ce:	429a      	cmp	r2, r3
 800d1d0:	d910      	bls.n	800d1f4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800d1d2:	4b72      	ldr	r3, [pc, #456]	@ (800d39c <HAL_RCC_ClockConfig+0x1ec>)
 800d1d4:	681b      	ldr	r3, [r3, #0]
 800d1d6:	f023 0207 	bic.w	r2, r3, #7
 800d1da:	4970      	ldr	r1, [pc, #448]	@ (800d39c <HAL_RCC_ClockConfig+0x1ec>)
 800d1dc:	683b      	ldr	r3, [r7, #0]
 800d1de:	4313      	orrs	r3, r2
 800d1e0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800d1e2:	4b6e      	ldr	r3, [pc, #440]	@ (800d39c <HAL_RCC_ClockConfig+0x1ec>)
 800d1e4:	681b      	ldr	r3, [r3, #0]
 800d1e6:	f003 0307 	and.w	r3, r3, #7
 800d1ea:	683a      	ldr	r2, [r7, #0]
 800d1ec:	429a      	cmp	r2, r3
 800d1ee:	d001      	beq.n	800d1f4 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800d1f0:	2301      	movs	r3, #1
 800d1f2:	e0cf      	b.n	800d394 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800d1f4:	687b      	ldr	r3, [r7, #4]
 800d1f6:	681b      	ldr	r3, [r3, #0]
 800d1f8:	f003 0302 	and.w	r3, r3, #2
 800d1fc:	2b00      	cmp	r3, #0
 800d1fe:	d010      	beq.n	800d222 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 800d200:	687b      	ldr	r3, [r7, #4]
 800d202:	689a      	ldr	r2, [r3, #8]
 800d204:	4b66      	ldr	r3, [pc, #408]	@ (800d3a0 <HAL_RCC_ClockConfig+0x1f0>)
 800d206:	689b      	ldr	r3, [r3, #8]
 800d208:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800d20c:	429a      	cmp	r2, r3
 800d20e:	d908      	bls.n	800d222 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800d210:	4b63      	ldr	r3, [pc, #396]	@ (800d3a0 <HAL_RCC_ClockConfig+0x1f0>)
 800d212:	689b      	ldr	r3, [r3, #8]
 800d214:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800d218:	687b      	ldr	r3, [r7, #4]
 800d21a:	689b      	ldr	r3, [r3, #8]
 800d21c:	4960      	ldr	r1, [pc, #384]	@ (800d3a0 <HAL_RCC_ClockConfig+0x1f0>)
 800d21e:	4313      	orrs	r3, r2
 800d220:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800d222:	687b      	ldr	r3, [r7, #4]
 800d224:	681b      	ldr	r3, [r3, #0]
 800d226:	f003 0301 	and.w	r3, r3, #1
 800d22a:	2b00      	cmp	r3, #0
 800d22c:	d04c      	beq.n	800d2c8 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800d22e:	687b      	ldr	r3, [r7, #4]
 800d230:	685b      	ldr	r3, [r3, #4]
 800d232:	2b03      	cmp	r3, #3
 800d234:	d107      	bne.n	800d246 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800d236:	4b5a      	ldr	r3, [pc, #360]	@ (800d3a0 <HAL_RCC_ClockConfig+0x1f0>)
 800d238:	681b      	ldr	r3, [r3, #0]
 800d23a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800d23e:	2b00      	cmp	r3, #0
 800d240:	d121      	bne.n	800d286 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 800d242:	2301      	movs	r3, #1
 800d244:	e0a6      	b.n	800d394 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800d246:	687b      	ldr	r3, [r7, #4]
 800d248:	685b      	ldr	r3, [r3, #4]
 800d24a:	2b02      	cmp	r3, #2
 800d24c:	d107      	bne.n	800d25e <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800d24e:	4b54      	ldr	r3, [pc, #336]	@ (800d3a0 <HAL_RCC_ClockConfig+0x1f0>)
 800d250:	681b      	ldr	r3, [r3, #0]
 800d252:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800d256:	2b00      	cmp	r3, #0
 800d258:	d115      	bne.n	800d286 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800d25a:	2301      	movs	r3, #1
 800d25c:	e09a      	b.n	800d394 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800d25e:	687b      	ldr	r3, [r7, #4]
 800d260:	685b      	ldr	r3, [r3, #4]
 800d262:	2b00      	cmp	r3, #0
 800d264:	d107      	bne.n	800d276 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800d266:	4b4e      	ldr	r3, [pc, #312]	@ (800d3a0 <HAL_RCC_ClockConfig+0x1f0>)
 800d268:	681b      	ldr	r3, [r3, #0]
 800d26a:	f003 0302 	and.w	r3, r3, #2
 800d26e:	2b00      	cmp	r3, #0
 800d270:	d109      	bne.n	800d286 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800d272:	2301      	movs	r3, #1
 800d274:	e08e      	b.n	800d394 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800d276:	4b4a      	ldr	r3, [pc, #296]	@ (800d3a0 <HAL_RCC_ClockConfig+0x1f0>)
 800d278:	681b      	ldr	r3, [r3, #0]
 800d27a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800d27e:	2b00      	cmp	r3, #0
 800d280:	d101      	bne.n	800d286 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800d282:	2301      	movs	r3, #1
 800d284:	e086      	b.n	800d394 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800d286:	4b46      	ldr	r3, [pc, #280]	@ (800d3a0 <HAL_RCC_ClockConfig+0x1f0>)
 800d288:	689b      	ldr	r3, [r3, #8]
 800d28a:	f023 0203 	bic.w	r2, r3, #3
 800d28e:	687b      	ldr	r3, [r7, #4]
 800d290:	685b      	ldr	r3, [r3, #4]
 800d292:	4943      	ldr	r1, [pc, #268]	@ (800d3a0 <HAL_RCC_ClockConfig+0x1f0>)
 800d294:	4313      	orrs	r3, r2
 800d296:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800d298:	f7fb ff14 	bl	80090c4 <HAL_GetTick>
 800d29c:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800d29e:	e00a      	b.n	800d2b6 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800d2a0:	f7fb ff10 	bl	80090c4 <HAL_GetTick>
 800d2a4:	4602      	mov	r2, r0
 800d2a6:	68fb      	ldr	r3, [r7, #12]
 800d2a8:	1ad3      	subs	r3, r2, r3
 800d2aa:	f241 3288 	movw	r2, #5000	@ 0x1388
 800d2ae:	4293      	cmp	r3, r2
 800d2b0:	d901      	bls.n	800d2b6 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 800d2b2:	2303      	movs	r3, #3
 800d2b4:	e06e      	b.n	800d394 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800d2b6:	4b3a      	ldr	r3, [pc, #232]	@ (800d3a0 <HAL_RCC_ClockConfig+0x1f0>)
 800d2b8:	689b      	ldr	r3, [r3, #8]
 800d2ba:	f003 020c 	and.w	r2, r3, #12
 800d2be:	687b      	ldr	r3, [r7, #4]
 800d2c0:	685b      	ldr	r3, [r3, #4]
 800d2c2:	009b      	lsls	r3, r3, #2
 800d2c4:	429a      	cmp	r2, r3
 800d2c6:	d1eb      	bne.n	800d2a0 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800d2c8:	687b      	ldr	r3, [r7, #4]
 800d2ca:	681b      	ldr	r3, [r3, #0]
 800d2cc:	f003 0302 	and.w	r3, r3, #2
 800d2d0:	2b00      	cmp	r3, #0
 800d2d2:	d010      	beq.n	800d2f6 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 800d2d4:	687b      	ldr	r3, [r7, #4]
 800d2d6:	689a      	ldr	r2, [r3, #8]
 800d2d8:	4b31      	ldr	r3, [pc, #196]	@ (800d3a0 <HAL_RCC_ClockConfig+0x1f0>)
 800d2da:	689b      	ldr	r3, [r3, #8]
 800d2dc:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800d2e0:	429a      	cmp	r2, r3
 800d2e2:	d208      	bcs.n	800d2f6 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800d2e4:	4b2e      	ldr	r3, [pc, #184]	@ (800d3a0 <HAL_RCC_ClockConfig+0x1f0>)
 800d2e6:	689b      	ldr	r3, [r3, #8]
 800d2e8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800d2ec:	687b      	ldr	r3, [r7, #4]
 800d2ee:	689b      	ldr	r3, [r3, #8]
 800d2f0:	492b      	ldr	r1, [pc, #172]	@ (800d3a0 <HAL_RCC_ClockConfig+0x1f0>)
 800d2f2:	4313      	orrs	r3, r2
 800d2f4:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800d2f6:	4b29      	ldr	r3, [pc, #164]	@ (800d39c <HAL_RCC_ClockConfig+0x1ec>)
 800d2f8:	681b      	ldr	r3, [r3, #0]
 800d2fa:	f003 0307 	and.w	r3, r3, #7
 800d2fe:	683a      	ldr	r2, [r7, #0]
 800d300:	429a      	cmp	r2, r3
 800d302:	d210      	bcs.n	800d326 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800d304:	4b25      	ldr	r3, [pc, #148]	@ (800d39c <HAL_RCC_ClockConfig+0x1ec>)
 800d306:	681b      	ldr	r3, [r3, #0]
 800d308:	f023 0207 	bic.w	r2, r3, #7
 800d30c:	4923      	ldr	r1, [pc, #140]	@ (800d39c <HAL_RCC_ClockConfig+0x1ec>)
 800d30e:	683b      	ldr	r3, [r7, #0]
 800d310:	4313      	orrs	r3, r2
 800d312:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800d314:	4b21      	ldr	r3, [pc, #132]	@ (800d39c <HAL_RCC_ClockConfig+0x1ec>)
 800d316:	681b      	ldr	r3, [r3, #0]
 800d318:	f003 0307 	and.w	r3, r3, #7
 800d31c:	683a      	ldr	r2, [r7, #0]
 800d31e:	429a      	cmp	r2, r3
 800d320:	d001      	beq.n	800d326 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 800d322:	2301      	movs	r3, #1
 800d324:	e036      	b.n	800d394 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800d326:	687b      	ldr	r3, [r7, #4]
 800d328:	681b      	ldr	r3, [r3, #0]
 800d32a:	f003 0304 	and.w	r3, r3, #4
 800d32e:	2b00      	cmp	r3, #0
 800d330:	d008      	beq.n	800d344 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800d332:	4b1b      	ldr	r3, [pc, #108]	@ (800d3a0 <HAL_RCC_ClockConfig+0x1f0>)
 800d334:	689b      	ldr	r3, [r3, #8]
 800d336:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800d33a:	687b      	ldr	r3, [r7, #4]
 800d33c:	68db      	ldr	r3, [r3, #12]
 800d33e:	4918      	ldr	r1, [pc, #96]	@ (800d3a0 <HAL_RCC_ClockConfig+0x1f0>)
 800d340:	4313      	orrs	r3, r2
 800d342:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800d344:	687b      	ldr	r3, [r7, #4]
 800d346:	681b      	ldr	r3, [r3, #0]
 800d348:	f003 0308 	and.w	r3, r3, #8
 800d34c:	2b00      	cmp	r3, #0
 800d34e:	d009      	beq.n	800d364 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800d350:	4b13      	ldr	r3, [pc, #76]	@ (800d3a0 <HAL_RCC_ClockConfig+0x1f0>)
 800d352:	689b      	ldr	r3, [r3, #8]
 800d354:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800d358:	687b      	ldr	r3, [r7, #4]
 800d35a:	691b      	ldr	r3, [r3, #16]
 800d35c:	00db      	lsls	r3, r3, #3
 800d35e:	4910      	ldr	r1, [pc, #64]	@ (800d3a0 <HAL_RCC_ClockConfig+0x1f0>)
 800d360:	4313      	orrs	r3, r2
 800d362:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800d364:	f000 f824 	bl	800d3b0 <HAL_RCC_GetSysClockFreq>
 800d368:	4602      	mov	r2, r0
 800d36a:	4b0d      	ldr	r3, [pc, #52]	@ (800d3a0 <HAL_RCC_ClockConfig+0x1f0>)
 800d36c:	689b      	ldr	r3, [r3, #8]
 800d36e:	091b      	lsrs	r3, r3, #4
 800d370:	f003 030f 	and.w	r3, r3, #15
 800d374:	490b      	ldr	r1, [pc, #44]	@ (800d3a4 <HAL_RCC_ClockConfig+0x1f4>)
 800d376:	5ccb      	ldrb	r3, [r1, r3]
 800d378:	f003 031f 	and.w	r3, r3, #31
 800d37c:	fa22 f303 	lsr.w	r3, r2, r3
 800d380:	4a09      	ldr	r2, [pc, #36]	@ (800d3a8 <HAL_RCC_ClockConfig+0x1f8>)
 800d382:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800d384:	4b09      	ldr	r3, [pc, #36]	@ (800d3ac <HAL_RCC_ClockConfig+0x1fc>)
 800d386:	681b      	ldr	r3, [r3, #0]
 800d388:	4618      	mov	r0, r3
 800d38a:	f7fb fe4b 	bl	8009024 <HAL_InitTick>
 800d38e:	4603      	mov	r3, r0
 800d390:	72fb      	strb	r3, [r7, #11]

  return status;
 800d392:	7afb      	ldrb	r3, [r7, #11]
}
 800d394:	4618      	mov	r0, r3
 800d396:	3710      	adds	r7, #16
 800d398:	46bd      	mov	sp, r7
 800d39a:	bd80      	pop	{r7, pc}
 800d39c:	40022000 	.word	0x40022000
 800d3a0:	40021000 	.word	0x40021000
 800d3a4:	080143c8 	.word	0x080143c8
 800d3a8:	20000000 	.word	0x20000000
 800d3ac:	2000000c 	.word	0x2000000c

0800d3b0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800d3b0:	b480      	push	{r7}
 800d3b2:	b089      	sub	sp, #36	@ 0x24
 800d3b4:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800d3b6:	2300      	movs	r3, #0
 800d3b8:	61fb      	str	r3, [r7, #28]
 800d3ba:	2300      	movs	r3, #0
 800d3bc:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800d3be:	4b3e      	ldr	r3, [pc, #248]	@ (800d4b8 <HAL_RCC_GetSysClockFreq+0x108>)
 800d3c0:	689b      	ldr	r3, [r3, #8]
 800d3c2:	f003 030c 	and.w	r3, r3, #12
 800d3c6:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 800d3c8:	4b3b      	ldr	r3, [pc, #236]	@ (800d4b8 <HAL_RCC_GetSysClockFreq+0x108>)
 800d3ca:	68db      	ldr	r3, [r3, #12]
 800d3cc:	f003 0303 	and.w	r3, r3, #3
 800d3d0:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800d3d2:	693b      	ldr	r3, [r7, #16]
 800d3d4:	2b00      	cmp	r3, #0
 800d3d6:	d005      	beq.n	800d3e4 <HAL_RCC_GetSysClockFreq+0x34>
 800d3d8:	693b      	ldr	r3, [r7, #16]
 800d3da:	2b0c      	cmp	r3, #12
 800d3dc:	d121      	bne.n	800d422 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800d3de:	68fb      	ldr	r3, [r7, #12]
 800d3e0:	2b01      	cmp	r3, #1
 800d3e2:	d11e      	bne.n	800d422 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 800d3e4:	4b34      	ldr	r3, [pc, #208]	@ (800d4b8 <HAL_RCC_GetSysClockFreq+0x108>)
 800d3e6:	681b      	ldr	r3, [r3, #0]
 800d3e8:	f003 0308 	and.w	r3, r3, #8
 800d3ec:	2b00      	cmp	r3, #0
 800d3ee:	d107      	bne.n	800d400 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 800d3f0:	4b31      	ldr	r3, [pc, #196]	@ (800d4b8 <HAL_RCC_GetSysClockFreq+0x108>)
 800d3f2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800d3f6:	0a1b      	lsrs	r3, r3, #8
 800d3f8:	f003 030f 	and.w	r3, r3, #15
 800d3fc:	61fb      	str	r3, [r7, #28]
 800d3fe:	e005      	b.n	800d40c <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 800d400:	4b2d      	ldr	r3, [pc, #180]	@ (800d4b8 <HAL_RCC_GetSysClockFreq+0x108>)
 800d402:	681b      	ldr	r3, [r3, #0]
 800d404:	091b      	lsrs	r3, r3, #4
 800d406:	f003 030f 	and.w	r3, r3, #15
 800d40a:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 800d40c:	4a2b      	ldr	r2, [pc, #172]	@ (800d4bc <HAL_RCC_GetSysClockFreq+0x10c>)
 800d40e:	69fb      	ldr	r3, [r7, #28]
 800d410:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d414:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800d416:	693b      	ldr	r3, [r7, #16]
 800d418:	2b00      	cmp	r3, #0
 800d41a:	d10d      	bne.n	800d438 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 800d41c:	69fb      	ldr	r3, [r7, #28]
 800d41e:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800d420:	e00a      	b.n	800d438 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800d422:	693b      	ldr	r3, [r7, #16]
 800d424:	2b04      	cmp	r3, #4
 800d426:	d102      	bne.n	800d42e <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800d428:	4b25      	ldr	r3, [pc, #148]	@ (800d4c0 <HAL_RCC_GetSysClockFreq+0x110>)
 800d42a:	61bb      	str	r3, [r7, #24]
 800d42c:	e004      	b.n	800d438 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800d42e:	693b      	ldr	r3, [r7, #16]
 800d430:	2b08      	cmp	r3, #8
 800d432:	d101      	bne.n	800d438 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800d434:	4b23      	ldr	r3, [pc, #140]	@ (800d4c4 <HAL_RCC_GetSysClockFreq+0x114>)
 800d436:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 800d438:	693b      	ldr	r3, [r7, #16]
 800d43a:	2b0c      	cmp	r3, #12
 800d43c:	d134      	bne.n	800d4a8 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800d43e:	4b1e      	ldr	r3, [pc, #120]	@ (800d4b8 <HAL_RCC_GetSysClockFreq+0x108>)
 800d440:	68db      	ldr	r3, [r3, #12]
 800d442:	f003 0303 	and.w	r3, r3, #3
 800d446:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800d448:	68bb      	ldr	r3, [r7, #8]
 800d44a:	2b02      	cmp	r3, #2
 800d44c:	d003      	beq.n	800d456 <HAL_RCC_GetSysClockFreq+0xa6>
 800d44e:	68bb      	ldr	r3, [r7, #8]
 800d450:	2b03      	cmp	r3, #3
 800d452:	d003      	beq.n	800d45c <HAL_RCC_GetSysClockFreq+0xac>
 800d454:	e005      	b.n	800d462 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800d456:	4b1a      	ldr	r3, [pc, #104]	@ (800d4c0 <HAL_RCC_GetSysClockFreq+0x110>)
 800d458:	617b      	str	r3, [r7, #20]
      break;
 800d45a:	e005      	b.n	800d468 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 800d45c:	4b19      	ldr	r3, [pc, #100]	@ (800d4c4 <HAL_RCC_GetSysClockFreq+0x114>)
 800d45e:	617b      	str	r3, [r7, #20]
      break;
 800d460:	e002      	b.n	800d468 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800d462:	69fb      	ldr	r3, [r7, #28]
 800d464:	617b      	str	r3, [r7, #20]
      break;
 800d466:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800d468:	4b13      	ldr	r3, [pc, #76]	@ (800d4b8 <HAL_RCC_GetSysClockFreq+0x108>)
 800d46a:	68db      	ldr	r3, [r3, #12]
 800d46c:	091b      	lsrs	r3, r3, #4
 800d46e:	f003 0307 	and.w	r3, r3, #7
 800d472:	3301      	adds	r3, #1
 800d474:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800d476:	4b10      	ldr	r3, [pc, #64]	@ (800d4b8 <HAL_RCC_GetSysClockFreq+0x108>)
 800d478:	68db      	ldr	r3, [r3, #12]
 800d47a:	0a1b      	lsrs	r3, r3, #8
 800d47c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800d480:	697a      	ldr	r2, [r7, #20]
 800d482:	fb03 f202 	mul.w	r2, r3, r2
 800d486:	687b      	ldr	r3, [r7, #4]
 800d488:	fbb2 f3f3 	udiv	r3, r2, r3
 800d48c:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800d48e:	4b0a      	ldr	r3, [pc, #40]	@ (800d4b8 <HAL_RCC_GetSysClockFreq+0x108>)
 800d490:	68db      	ldr	r3, [r3, #12]
 800d492:	0e5b      	lsrs	r3, r3, #25
 800d494:	f003 0303 	and.w	r3, r3, #3
 800d498:	3301      	adds	r3, #1
 800d49a:	005b      	lsls	r3, r3, #1
 800d49c:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800d49e:	697a      	ldr	r2, [r7, #20]
 800d4a0:	683b      	ldr	r3, [r7, #0]
 800d4a2:	fbb2 f3f3 	udiv	r3, r2, r3
 800d4a6:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 800d4a8:	69bb      	ldr	r3, [r7, #24]
}
 800d4aa:	4618      	mov	r0, r3
 800d4ac:	3724      	adds	r7, #36	@ 0x24
 800d4ae:	46bd      	mov	sp, r7
 800d4b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4b4:	4770      	bx	lr
 800d4b6:	bf00      	nop
 800d4b8:	40021000 	.word	0x40021000
 800d4bc:	080143e0 	.word	0x080143e0
 800d4c0:	00f42400 	.word	0x00f42400
 800d4c4:	007a1200 	.word	0x007a1200

0800d4c8 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800d4c8:	b480      	push	{r7}
 800d4ca:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800d4cc:	4b03      	ldr	r3, [pc, #12]	@ (800d4dc <HAL_RCC_GetHCLKFreq+0x14>)
 800d4ce:	681b      	ldr	r3, [r3, #0]
}
 800d4d0:	4618      	mov	r0, r3
 800d4d2:	46bd      	mov	sp, r7
 800d4d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4d8:	4770      	bx	lr
 800d4da:	bf00      	nop
 800d4dc:	20000000 	.word	0x20000000

0800d4e0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800d4e0:	b580      	push	{r7, lr}
 800d4e2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 800d4e4:	f7ff fff0 	bl	800d4c8 <HAL_RCC_GetHCLKFreq>
 800d4e8:	4602      	mov	r2, r0
 800d4ea:	4b06      	ldr	r3, [pc, #24]	@ (800d504 <HAL_RCC_GetPCLK1Freq+0x24>)
 800d4ec:	689b      	ldr	r3, [r3, #8]
 800d4ee:	0a1b      	lsrs	r3, r3, #8
 800d4f0:	f003 0307 	and.w	r3, r3, #7
 800d4f4:	4904      	ldr	r1, [pc, #16]	@ (800d508 <HAL_RCC_GetPCLK1Freq+0x28>)
 800d4f6:	5ccb      	ldrb	r3, [r1, r3]
 800d4f8:	f003 031f 	and.w	r3, r3, #31
 800d4fc:	fa22 f303 	lsr.w	r3, r2, r3
}
 800d500:	4618      	mov	r0, r3
 800d502:	bd80      	pop	{r7, pc}
 800d504:	40021000 	.word	0x40021000
 800d508:	080143d8 	.word	0x080143d8

0800d50c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800d50c:	b580      	push	{r7, lr}
 800d50e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 800d510:	f7ff ffda 	bl	800d4c8 <HAL_RCC_GetHCLKFreq>
 800d514:	4602      	mov	r2, r0
 800d516:	4b06      	ldr	r3, [pc, #24]	@ (800d530 <HAL_RCC_GetPCLK2Freq+0x24>)
 800d518:	689b      	ldr	r3, [r3, #8]
 800d51a:	0adb      	lsrs	r3, r3, #11
 800d51c:	f003 0307 	and.w	r3, r3, #7
 800d520:	4904      	ldr	r1, [pc, #16]	@ (800d534 <HAL_RCC_GetPCLK2Freq+0x28>)
 800d522:	5ccb      	ldrb	r3, [r1, r3]
 800d524:	f003 031f 	and.w	r3, r3, #31
 800d528:	fa22 f303 	lsr.w	r3, r2, r3
}
 800d52c:	4618      	mov	r0, r3
 800d52e:	bd80      	pop	{r7, pc}
 800d530:	40021000 	.word	0x40021000
 800d534:	080143d8 	.word	0x080143d8

0800d538 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 800d538:	b580      	push	{r7, lr}
 800d53a:	b086      	sub	sp, #24
 800d53c:	af00      	add	r7, sp, #0
 800d53e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 800d540:	2300      	movs	r3, #0
 800d542:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 800d544:	4b2a      	ldr	r3, [pc, #168]	@ (800d5f0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800d546:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800d548:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800d54c:	2b00      	cmp	r3, #0
 800d54e:	d003      	beq.n	800d558 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 800d550:	f7fe fd8c 	bl	800c06c <HAL_PWREx_GetVoltageRange>
 800d554:	6178      	str	r0, [r7, #20]
 800d556:	e014      	b.n	800d582 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 800d558:	4b25      	ldr	r3, [pc, #148]	@ (800d5f0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800d55a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800d55c:	4a24      	ldr	r2, [pc, #144]	@ (800d5f0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800d55e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800d562:	6593      	str	r3, [r2, #88]	@ 0x58
 800d564:	4b22      	ldr	r3, [pc, #136]	@ (800d5f0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800d566:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800d568:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800d56c:	60fb      	str	r3, [r7, #12]
 800d56e:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 800d570:	f7fe fd7c 	bl	800c06c <HAL_PWREx_GetVoltageRange>
 800d574:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800d576:	4b1e      	ldr	r3, [pc, #120]	@ (800d5f0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800d578:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800d57a:	4a1d      	ldr	r2, [pc, #116]	@ (800d5f0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800d57c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800d580:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800d582:	697b      	ldr	r3, [r7, #20]
 800d584:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800d588:	d10b      	bne.n	800d5a2 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800d58a:	687b      	ldr	r3, [r7, #4]
 800d58c:	2b80      	cmp	r3, #128	@ 0x80
 800d58e:	d919      	bls.n	800d5c4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 800d590:	687b      	ldr	r3, [r7, #4]
 800d592:	2ba0      	cmp	r3, #160	@ 0xa0
 800d594:	d902      	bls.n	800d59c <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800d596:	2302      	movs	r3, #2
 800d598:	613b      	str	r3, [r7, #16]
 800d59a:	e013      	b.n	800d5c4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800d59c:	2301      	movs	r3, #1
 800d59e:	613b      	str	r3, [r7, #16]
 800d5a0:	e010      	b.n	800d5c4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800d5a2:	687b      	ldr	r3, [r7, #4]
 800d5a4:	2b80      	cmp	r3, #128	@ 0x80
 800d5a6:	d902      	bls.n	800d5ae <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 800d5a8:	2303      	movs	r3, #3
 800d5aa:	613b      	str	r3, [r7, #16]
 800d5ac:	e00a      	b.n	800d5c4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800d5ae:	687b      	ldr	r3, [r7, #4]
 800d5b0:	2b80      	cmp	r3, #128	@ 0x80
 800d5b2:	d102      	bne.n	800d5ba <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800d5b4:	2302      	movs	r3, #2
 800d5b6:	613b      	str	r3, [r7, #16]
 800d5b8:	e004      	b.n	800d5c4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800d5ba:	687b      	ldr	r3, [r7, #4]
 800d5bc:	2b70      	cmp	r3, #112	@ 0x70
 800d5be:	d101      	bne.n	800d5c4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800d5c0:	2301      	movs	r3, #1
 800d5c2:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 800d5c4:	4b0b      	ldr	r3, [pc, #44]	@ (800d5f4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800d5c6:	681b      	ldr	r3, [r3, #0]
 800d5c8:	f023 0207 	bic.w	r2, r3, #7
 800d5cc:	4909      	ldr	r1, [pc, #36]	@ (800d5f4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800d5ce:	693b      	ldr	r3, [r7, #16]
 800d5d0:	4313      	orrs	r3, r2
 800d5d2:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 800d5d4:	4b07      	ldr	r3, [pc, #28]	@ (800d5f4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800d5d6:	681b      	ldr	r3, [r3, #0]
 800d5d8:	f003 0307 	and.w	r3, r3, #7
 800d5dc:	693a      	ldr	r2, [r7, #16]
 800d5de:	429a      	cmp	r2, r3
 800d5e0:	d001      	beq.n	800d5e6 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 800d5e2:	2301      	movs	r3, #1
 800d5e4:	e000      	b.n	800d5e8 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800d5e6:	2300      	movs	r3, #0
}
 800d5e8:	4618      	mov	r0, r3
 800d5ea:	3718      	adds	r7, #24
 800d5ec:	46bd      	mov	sp, r7
 800d5ee:	bd80      	pop	{r7, pc}
 800d5f0:	40021000 	.word	0x40021000
 800d5f4:	40022000 	.word	0x40022000

0800d5f8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800d5f8:	b580      	push	{r7, lr}
 800d5fa:	b086      	sub	sp, #24
 800d5fc:	af00      	add	r7, sp, #0
 800d5fe:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800d600:	2300      	movs	r3, #0
 800d602:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800d604:	2300      	movs	r3, #0
 800d606:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 800d608:	687b      	ldr	r3, [r7, #4]
 800d60a:	681b      	ldr	r3, [r3, #0]
 800d60c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800d610:	2b00      	cmp	r3, #0
 800d612:	d041      	beq.n	800d698 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 800d614:	687b      	ldr	r3, [r7, #4]
 800d616:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800d618:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 800d61c:	d02a      	beq.n	800d674 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 800d61e:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 800d622:	d824      	bhi.n	800d66e <HAL_RCCEx_PeriphCLKConfig+0x76>
 800d624:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800d628:	d008      	beq.n	800d63c <HAL_RCCEx_PeriphCLKConfig+0x44>
 800d62a:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800d62e:	d81e      	bhi.n	800d66e <HAL_RCCEx_PeriphCLKConfig+0x76>
 800d630:	2b00      	cmp	r3, #0
 800d632:	d00a      	beq.n	800d64a <HAL_RCCEx_PeriphCLKConfig+0x52>
 800d634:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800d638:	d010      	beq.n	800d65c <HAL_RCCEx_PeriphCLKConfig+0x64>
 800d63a:	e018      	b.n	800d66e <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800d63c:	4b86      	ldr	r3, [pc, #536]	@ (800d858 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800d63e:	68db      	ldr	r3, [r3, #12]
 800d640:	4a85      	ldr	r2, [pc, #532]	@ (800d858 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800d642:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800d646:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 800d648:	e015      	b.n	800d676 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800d64a:	687b      	ldr	r3, [r7, #4]
 800d64c:	3304      	adds	r3, #4
 800d64e:	2100      	movs	r1, #0
 800d650:	4618      	mov	r0, r3
 800d652:	f000 fabb 	bl	800dbcc <RCCEx_PLLSAI1_Config>
 800d656:	4603      	mov	r3, r0
 800d658:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800d65a:	e00c      	b.n	800d676 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800d65c:	687b      	ldr	r3, [r7, #4]
 800d65e:	3320      	adds	r3, #32
 800d660:	2100      	movs	r1, #0
 800d662:	4618      	mov	r0, r3
 800d664:	f000 fba6 	bl	800ddb4 <RCCEx_PLLSAI2_Config>
 800d668:	4603      	mov	r3, r0
 800d66a:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800d66c:	e003      	b.n	800d676 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800d66e:	2301      	movs	r3, #1
 800d670:	74fb      	strb	r3, [r7, #19]
      break;
 800d672:	e000      	b.n	800d676 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 800d674:	bf00      	nop
    }

    if(ret == HAL_OK)
 800d676:	7cfb      	ldrb	r3, [r7, #19]
 800d678:	2b00      	cmp	r3, #0
 800d67a:	d10b      	bne.n	800d694 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800d67c:	4b76      	ldr	r3, [pc, #472]	@ (800d858 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800d67e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800d682:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 800d686:	687b      	ldr	r3, [r7, #4]
 800d688:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800d68a:	4973      	ldr	r1, [pc, #460]	@ (800d858 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800d68c:	4313      	orrs	r3, r2
 800d68e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 800d692:	e001      	b.n	800d698 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800d694:	7cfb      	ldrb	r3, [r7, #19]
 800d696:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 800d698:	687b      	ldr	r3, [r7, #4]
 800d69a:	681b      	ldr	r3, [r3, #0]
 800d69c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800d6a0:	2b00      	cmp	r3, #0
 800d6a2:	d041      	beq.n	800d728 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 800d6a4:	687b      	ldr	r3, [r7, #4]
 800d6a6:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800d6a8:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800d6ac:	d02a      	beq.n	800d704 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 800d6ae:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800d6b2:	d824      	bhi.n	800d6fe <HAL_RCCEx_PeriphCLKConfig+0x106>
 800d6b4:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800d6b8:	d008      	beq.n	800d6cc <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800d6ba:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800d6be:	d81e      	bhi.n	800d6fe <HAL_RCCEx_PeriphCLKConfig+0x106>
 800d6c0:	2b00      	cmp	r3, #0
 800d6c2:	d00a      	beq.n	800d6da <HAL_RCCEx_PeriphCLKConfig+0xe2>
 800d6c4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800d6c8:	d010      	beq.n	800d6ec <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800d6ca:	e018      	b.n	800d6fe <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800d6cc:	4b62      	ldr	r3, [pc, #392]	@ (800d858 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800d6ce:	68db      	ldr	r3, [r3, #12]
 800d6d0:	4a61      	ldr	r2, [pc, #388]	@ (800d858 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800d6d2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800d6d6:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800d6d8:	e015      	b.n	800d706 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800d6da:	687b      	ldr	r3, [r7, #4]
 800d6dc:	3304      	adds	r3, #4
 800d6de:	2100      	movs	r1, #0
 800d6e0:	4618      	mov	r0, r3
 800d6e2:	f000 fa73 	bl	800dbcc <RCCEx_PLLSAI1_Config>
 800d6e6:	4603      	mov	r3, r0
 800d6e8:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800d6ea:	e00c      	b.n	800d706 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800d6ec:	687b      	ldr	r3, [r7, #4]
 800d6ee:	3320      	adds	r3, #32
 800d6f0:	2100      	movs	r1, #0
 800d6f2:	4618      	mov	r0, r3
 800d6f4:	f000 fb5e 	bl	800ddb4 <RCCEx_PLLSAI2_Config>
 800d6f8:	4603      	mov	r3, r0
 800d6fa:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800d6fc:	e003      	b.n	800d706 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800d6fe:	2301      	movs	r3, #1
 800d700:	74fb      	strb	r3, [r7, #19]
      break;
 800d702:	e000      	b.n	800d706 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 800d704:	bf00      	nop
    }

    if(ret == HAL_OK)
 800d706:	7cfb      	ldrb	r3, [r7, #19]
 800d708:	2b00      	cmp	r3, #0
 800d70a:	d10b      	bne.n	800d724 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800d70c:	4b52      	ldr	r3, [pc, #328]	@ (800d858 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800d70e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800d712:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 800d716:	687b      	ldr	r3, [r7, #4]
 800d718:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800d71a:	494f      	ldr	r1, [pc, #316]	@ (800d858 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800d71c:	4313      	orrs	r3, r2
 800d71e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 800d722:	e001      	b.n	800d728 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800d724:	7cfb      	ldrb	r3, [r7, #19]
 800d726:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800d728:	687b      	ldr	r3, [r7, #4]
 800d72a:	681b      	ldr	r3, [r3, #0]
 800d72c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800d730:	2b00      	cmp	r3, #0
 800d732:	f000 80a0 	beq.w	800d876 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800d736:	2300      	movs	r3, #0
 800d738:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800d73a:	4b47      	ldr	r3, [pc, #284]	@ (800d858 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800d73c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800d73e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800d742:	2b00      	cmp	r3, #0
 800d744:	d101      	bne.n	800d74a <HAL_RCCEx_PeriphCLKConfig+0x152>
 800d746:	2301      	movs	r3, #1
 800d748:	e000      	b.n	800d74c <HAL_RCCEx_PeriphCLKConfig+0x154>
 800d74a:	2300      	movs	r3, #0
 800d74c:	2b00      	cmp	r3, #0
 800d74e:	d00d      	beq.n	800d76c <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800d750:	4b41      	ldr	r3, [pc, #260]	@ (800d858 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800d752:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800d754:	4a40      	ldr	r2, [pc, #256]	@ (800d858 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800d756:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800d75a:	6593      	str	r3, [r2, #88]	@ 0x58
 800d75c:	4b3e      	ldr	r3, [pc, #248]	@ (800d858 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800d75e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800d760:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800d764:	60bb      	str	r3, [r7, #8]
 800d766:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800d768:	2301      	movs	r3, #1
 800d76a:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800d76c:	4b3b      	ldr	r3, [pc, #236]	@ (800d85c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800d76e:	681b      	ldr	r3, [r3, #0]
 800d770:	4a3a      	ldr	r2, [pc, #232]	@ (800d85c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800d772:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800d776:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800d778:	f7fb fca4 	bl	80090c4 <HAL_GetTick>
 800d77c:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800d77e:	e009      	b.n	800d794 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800d780:	f7fb fca0 	bl	80090c4 <HAL_GetTick>
 800d784:	4602      	mov	r2, r0
 800d786:	68fb      	ldr	r3, [r7, #12]
 800d788:	1ad3      	subs	r3, r2, r3
 800d78a:	2b02      	cmp	r3, #2
 800d78c:	d902      	bls.n	800d794 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 800d78e:	2303      	movs	r3, #3
 800d790:	74fb      	strb	r3, [r7, #19]
        break;
 800d792:	e005      	b.n	800d7a0 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800d794:	4b31      	ldr	r3, [pc, #196]	@ (800d85c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800d796:	681b      	ldr	r3, [r3, #0]
 800d798:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800d79c:	2b00      	cmp	r3, #0
 800d79e:	d0ef      	beq.n	800d780 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 800d7a0:	7cfb      	ldrb	r3, [r7, #19]
 800d7a2:	2b00      	cmp	r3, #0
 800d7a4:	d15c      	bne.n	800d860 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800d7a6:	4b2c      	ldr	r3, [pc, #176]	@ (800d858 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800d7a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800d7ac:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800d7b0:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800d7b2:	697b      	ldr	r3, [r7, #20]
 800d7b4:	2b00      	cmp	r3, #0
 800d7b6:	d01f      	beq.n	800d7f8 <HAL_RCCEx_PeriphCLKConfig+0x200>
 800d7b8:	687b      	ldr	r3, [r7, #4]
 800d7ba:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800d7be:	697a      	ldr	r2, [r7, #20]
 800d7c0:	429a      	cmp	r2, r3
 800d7c2:	d019      	beq.n	800d7f8 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800d7c4:	4b24      	ldr	r3, [pc, #144]	@ (800d858 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800d7c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800d7ca:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800d7ce:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800d7d0:	4b21      	ldr	r3, [pc, #132]	@ (800d858 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800d7d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800d7d6:	4a20      	ldr	r2, [pc, #128]	@ (800d858 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800d7d8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800d7dc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800d7e0:	4b1d      	ldr	r3, [pc, #116]	@ (800d858 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800d7e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800d7e6:	4a1c      	ldr	r2, [pc, #112]	@ (800d858 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800d7e8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800d7ec:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800d7f0:	4a19      	ldr	r2, [pc, #100]	@ (800d858 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800d7f2:	697b      	ldr	r3, [r7, #20]
 800d7f4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800d7f8:	697b      	ldr	r3, [r7, #20]
 800d7fa:	f003 0301 	and.w	r3, r3, #1
 800d7fe:	2b00      	cmp	r3, #0
 800d800:	d016      	beq.n	800d830 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800d802:	f7fb fc5f 	bl	80090c4 <HAL_GetTick>
 800d806:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800d808:	e00b      	b.n	800d822 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800d80a:	f7fb fc5b 	bl	80090c4 <HAL_GetTick>
 800d80e:	4602      	mov	r2, r0
 800d810:	68fb      	ldr	r3, [r7, #12]
 800d812:	1ad3      	subs	r3, r2, r3
 800d814:	f241 3288 	movw	r2, #5000	@ 0x1388
 800d818:	4293      	cmp	r3, r2
 800d81a:	d902      	bls.n	800d822 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 800d81c:	2303      	movs	r3, #3
 800d81e:	74fb      	strb	r3, [r7, #19]
            break;
 800d820:	e006      	b.n	800d830 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800d822:	4b0d      	ldr	r3, [pc, #52]	@ (800d858 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800d824:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800d828:	f003 0302 	and.w	r3, r3, #2
 800d82c:	2b00      	cmp	r3, #0
 800d82e:	d0ec      	beq.n	800d80a <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 800d830:	7cfb      	ldrb	r3, [r7, #19]
 800d832:	2b00      	cmp	r3, #0
 800d834:	d10c      	bne.n	800d850 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800d836:	4b08      	ldr	r3, [pc, #32]	@ (800d858 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800d838:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800d83c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800d840:	687b      	ldr	r3, [r7, #4]
 800d842:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800d846:	4904      	ldr	r1, [pc, #16]	@ (800d858 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800d848:	4313      	orrs	r3, r2
 800d84a:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 800d84e:	e009      	b.n	800d864 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800d850:	7cfb      	ldrb	r3, [r7, #19]
 800d852:	74bb      	strb	r3, [r7, #18]
 800d854:	e006      	b.n	800d864 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 800d856:	bf00      	nop
 800d858:	40021000 	.word	0x40021000
 800d85c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800d860:	7cfb      	ldrb	r3, [r7, #19]
 800d862:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800d864:	7c7b      	ldrb	r3, [r7, #17]
 800d866:	2b01      	cmp	r3, #1
 800d868:	d105      	bne.n	800d876 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800d86a:	4b9e      	ldr	r3, [pc, #632]	@ (800dae4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800d86c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800d86e:	4a9d      	ldr	r2, [pc, #628]	@ (800dae4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800d870:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800d874:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800d876:	687b      	ldr	r3, [r7, #4]
 800d878:	681b      	ldr	r3, [r3, #0]
 800d87a:	f003 0301 	and.w	r3, r3, #1
 800d87e:	2b00      	cmp	r3, #0
 800d880:	d00a      	beq.n	800d898 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800d882:	4b98      	ldr	r3, [pc, #608]	@ (800dae4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800d884:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800d888:	f023 0203 	bic.w	r2, r3, #3
 800d88c:	687b      	ldr	r3, [r7, #4]
 800d88e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d890:	4994      	ldr	r1, [pc, #592]	@ (800dae4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800d892:	4313      	orrs	r3, r2
 800d894:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800d898:	687b      	ldr	r3, [r7, #4]
 800d89a:	681b      	ldr	r3, [r3, #0]
 800d89c:	f003 0302 	and.w	r3, r3, #2
 800d8a0:	2b00      	cmp	r3, #0
 800d8a2:	d00a      	beq.n	800d8ba <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800d8a4:	4b8f      	ldr	r3, [pc, #572]	@ (800dae4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800d8a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800d8aa:	f023 020c 	bic.w	r2, r3, #12
 800d8ae:	687b      	ldr	r3, [r7, #4]
 800d8b0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d8b2:	498c      	ldr	r1, [pc, #560]	@ (800dae4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800d8b4:	4313      	orrs	r3, r2
 800d8b6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800d8ba:	687b      	ldr	r3, [r7, #4]
 800d8bc:	681b      	ldr	r3, [r3, #0]
 800d8be:	f003 0304 	and.w	r3, r3, #4
 800d8c2:	2b00      	cmp	r3, #0
 800d8c4:	d00a      	beq.n	800d8dc <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800d8c6:	4b87      	ldr	r3, [pc, #540]	@ (800dae4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800d8c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800d8cc:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 800d8d0:	687b      	ldr	r3, [r7, #4]
 800d8d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d8d4:	4983      	ldr	r1, [pc, #524]	@ (800dae4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800d8d6:	4313      	orrs	r3, r2
 800d8d8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800d8dc:	687b      	ldr	r3, [r7, #4]
 800d8de:	681b      	ldr	r3, [r3, #0]
 800d8e0:	f003 0308 	and.w	r3, r3, #8
 800d8e4:	2b00      	cmp	r3, #0
 800d8e6:	d00a      	beq.n	800d8fe <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800d8e8:	4b7e      	ldr	r3, [pc, #504]	@ (800dae4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800d8ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800d8ee:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800d8f2:	687b      	ldr	r3, [r7, #4]
 800d8f4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800d8f6:	497b      	ldr	r1, [pc, #492]	@ (800dae4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800d8f8:	4313      	orrs	r3, r2
 800d8fa:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800d8fe:	687b      	ldr	r3, [r7, #4]
 800d900:	681b      	ldr	r3, [r3, #0]
 800d902:	f003 0310 	and.w	r3, r3, #16
 800d906:	2b00      	cmp	r3, #0
 800d908:	d00a      	beq.n	800d920 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800d90a:	4b76      	ldr	r3, [pc, #472]	@ (800dae4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800d90c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800d910:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800d914:	687b      	ldr	r3, [r7, #4]
 800d916:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800d918:	4972      	ldr	r1, [pc, #456]	@ (800dae4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800d91a:	4313      	orrs	r3, r2
 800d91c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800d920:	687b      	ldr	r3, [r7, #4]
 800d922:	681b      	ldr	r3, [r3, #0]
 800d924:	f003 0320 	and.w	r3, r3, #32
 800d928:	2b00      	cmp	r3, #0
 800d92a:	d00a      	beq.n	800d942 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800d92c:	4b6d      	ldr	r3, [pc, #436]	@ (800dae4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800d92e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800d932:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800d936:	687b      	ldr	r3, [r7, #4]
 800d938:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800d93a:	496a      	ldr	r1, [pc, #424]	@ (800dae4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800d93c:	4313      	orrs	r3, r2
 800d93e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800d942:	687b      	ldr	r3, [r7, #4]
 800d944:	681b      	ldr	r3, [r3, #0]
 800d946:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800d94a:	2b00      	cmp	r3, #0
 800d94c:	d00a      	beq.n	800d964 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800d94e:	4b65      	ldr	r3, [pc, #404]	@ (800dae4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800d950:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800d954:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 800d958:	687b      	ldr	r3, [r7, #4]
 800d95a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800d95c:	4961      	ldr	r1, [pc, #388]	@ (800dae4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800d95e:	4313      	orrs	r3, r2
 800d960:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800d964:	687b      	ldr	r3, [r7, #4]
 800d966:	681b      	ldr	r3, [r3, #0]
 800d968:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800d96c:	2b00      	cmp	r3, #0
 800d96e:	d00a      	beq.n	800d986 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800d970:	4b5c      	ldr	r3, [pc, #368]	@ (800dae4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800d972:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800d976:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800d97a:	687b      	ldr	r3, [r7, #4]
 800d97c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800d97e:	4959      	ldr	r1, [pc, #356]	@ (800dae4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800d980:	4313      	orrs	r3, r2
 800d982:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800d986:	687b      	ldr	r3, [r7, #4]
 800d988:	681b      	ldr	r3, [r3, #0]
 800d98a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d98e:	2b00      	cmp	r3, #0
 800d990:	d00a      	beq.n	800d9a8 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800d992:	4b54      	ldr	r3, [pc, #336]	@ (800dae4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800d994:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800d998:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 800d99c:	687b      	ldr	r3, [r7, #4]
 800d99e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800d9a0:	4950      	ldr	r1, [pc, #320]	@ (800dae4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800d9a2:	4313      	orrs	r3, r2
 800d9a4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800d9a8:	687b      	ldr	r3, [r7, #4]
 800d9aa:	681b      	ldr	r3, [r3, #0]
 800d9ac:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800d9b0:	2b00      	cmp	r3, #0
 800d9b2:	d00a      	beq.n	800d9ca <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800d9b4:	4b4b      	ldr	r3, [pc, #300]	@ (800dae4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800d9b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800d9ba:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 800d9be:	687b      	ldr	r3, [r7, #4]
 800d9c0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800d9c2:	4948      	ldr	r1, [pc, #288]	@ (800dae4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800d9c4:	4313      	orrs	r3, r2
 800d9c6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800d9ca:	687b      	ldr	r3, [r7, #4]
 800d9cc:	681b      	ldr	r3, [r3, #0]
 800d9ce:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800d9d2:	2b00      	cmp	r3, #0
 800d9d4:	d00a      	beq.n	800d9ec <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800d9d6:	4b43      	ldr	r3, [pc, #268]	@ (800dae4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800d9d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800d9dc:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 800d9e0:	687b      	ldr	r3, [r7, #4]
 800d9e2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800d9e4:	493f      	ldr	r1, [pc, #252]	@ (800dae4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800d9e6:	4313      	orrs	r3, r2
 800d9e8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800d9ec:	687b      	ldr	r3, [r7, #4]
 800d9ee:	681b      	ldr	r3, [r3, #0]
 800d9f0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800d9f4:	2b00      	cmp	r3, #0
 800d9f6:	d028      	beq.n	800da4a <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800d9f8:	4b3a      	ldr	r3, [pc, #232]	@ (800dae4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800d9fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800d9fe:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800da02:	687b      	ldr	r3, [r7, #4]
 800da04:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800da06:	4937      	ldr	r1, [pc, #220]	@ (800dae4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800da08:	4313      	orrs	r3, r2
 800da0a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800da0e:	687b      	ldr	r3, [r7, #4]
 800da10:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800da12:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800da16:	d106      	bne.n	800da26 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800da18:	4b32      	ldr	r3, [pc, #200]	@ (800dae4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800da1a:	68db      	ldr	r3, [r3, #12]
 800da1c:	4a31      	ldr	r2, [pc, #196]	@ (800dae4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800da1e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800da22:	60d3      	str	r3, [r2, #12]
 800da24:	e011      	b.n	800da4a <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800da26:	687b      	ldr	r3, [r7, #4]
 800da28:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800da2a:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800da2e:	d10c      	bne.n	800da4a <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800da30:	687b      	ldr	r3, [r7, #4]
 800da32:	3304      	adds	r3, #4
 800da34:	2101      	movs	r1, #1
 800da36:	4618      	mov	r0, r3
 800da38:	f000 f8c8 	bl	800dbcc <RCCEx_PLLSAI1_Config>
 800da3c:	4603      	mov	r3, r0
 800da3e:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 800da40:	7cfb      	ldrb	r3, [r7, #19]
 800da42:	2b00      	cmp	r3, #0
 800da44:	d001      	beq.n	800da4a <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 800da46:	7cfb      	ldrb	r3, [r7, #19]
 800da48:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 800da4a:	687b      	ldr	r3, [r7, #4]
 800da4c:	681b      	ldr	r3, [r3, #0]
 800da4e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800da52:	2b00      	cmp	r3, #0
 800da54:	d028      	beq.n	800daa8 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800da56:	4b23      	ldr	r3, [pc, #140]	@ (800dae4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800da58:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800da5c:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800da60:	687b      	ldr	r3, [r7, #4]
 800da62:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800da64:	491f      	ldr	r1, [pc, #124]	@ (800dae4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800da66:	4313      	orrs	r3, r2
 800da68:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 800da6c:	687b      	ldr	r3, [r7, #4]
 800da6e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800da70:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800da74:	d106      	bne.n	800da84 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800da76:	4b1b      	ldr	r3, [pc, #108]	@ (800dae4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800da78:	68db      	ldr	r3, [r3, #12]
 800da7a:	4a1a      	ldr	r2, [pc, #104]	@ (800dae4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800da7c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800da80:	60d3      	str	r3, [r2, #12]
 800da82:	e011      	b.n	800daa8 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 800da84:	687b      	ldr	r3, [r7, #4]
 800da86:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800da88:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800da8c:	d10c      	bne.n	800daa8 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800da8e:	687b      	ldr	r3, [r7, #4]
 800da90:	3304      	adds	r3, #4
 800da92:	2101      	movs	r1, #1
 800da94:	4618      	mov	r0, r3
 800da96:	f000 f899 	bl	800dbcc <RCCEx_PLLSAI1_Config>
 800da9a:	4603      	mov	r3, r0
 800da9c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800da9e:	7cfb      	ldrb	r3, [r7, #19]
 800daa0:	2b00      	cmp	r3, #0
 800daa2:	d001      	beq.n	800daa8 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 800daa4:	7cfb      	ldrb	r3, [r7, #19]
 800daa6:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800daa8:	687b      	ldr	r3, [r7, #4]
 800daaa:	681b      	ldr	r3, [r3, #0]
 800daac:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800dab0:	2b00      	cmp	r3, #0
 800dab2:	d02b      	beq.n	800db0c <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800dab4:	4b0b      	ldr	r3, [pc, #44]	@ (800dae4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800dab6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800daba:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800dabe:	687b      	ldr	r3, [r7, #4]
 800dac0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800dac2:	4908      	ldr	r1, [pc, #32]	@ (800dae4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800dac4:	4313      	orrs	r3, r2
 800dac6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800daca:	687b      	ldr	r3, [r7, #4]
 800dacc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800dace:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800dad2:	d109      	bne.n	800dae8 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800dad4:	4b03      	ldr	r3, [pc, #12]	@ (800dae4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800dad6:	68db      	ldr	r3, [r3, #12]
 800dad8:	4a02      	ldr	r2, [pc, #8]	@ (800dae4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800dada:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800dade:	60d3      	str	r3, [r2, #12]
 800dae0:	e014      	b.n	800db0c <HAL_RCCEx_PeriphCLKConfig+0x514>
 800dae2:	bf00      	nop
 800dae4:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 800dae8:	687b      	ldr	r3, [r7, #4]
 800daea:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800daec:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800daf0:	d10c      	bne.n	800db0c <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800daf2:	687b      	ldr	r3, [r7, #4]
 800daf4:	3304      	adds	r3, #4
 800daf6:	2101      	movs	r1, #1
 800daf8:	4618      	mov	r0, r3
 800dafa:	f000 f867 	bl	800dbcc <RCCEx_PLLSAI1_Config>
 800dafe:	4603      	mov	r3, r0
 800db00:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800db02:	7cfb      	ldrb	r3, [r7, #19]
 800db04:	2b00      	cmp	r3, #0
 800db06:	d001      	beq.n	800db0c <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 800db08:	7cfb      	ldrb	r3, [r7, #19]
 800db0a:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800db0c:	687b      	ldr	r3, [r7, #4]
 800db0e:	681b      	ldr	r3, [r3, #0]
 800db10:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800db14:	2b00      	cmp	r3, #0
 800db16:	d02f      	beq.n	800db78 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800db18:	4b2b      	ldr	r3, [pc, #172]	@ (800dbc8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800db1a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800db1e:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 800db22:	687b      	ldr	r3, [r7, #4]
 800db24:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800db26:	4928      	ldr	r1, [pc, #160]	@ (800dbc8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800db28:	4313      	orrs	r3, r2
 800db2a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800db2e:	687b      	ldr	r3, [r7, #4]
 800db30:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800db32:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800db36:	d10d      	bne.n	800db54 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 800db38:	687b      	ldr	r3, [r7, #4]
 800db3a:	3304      	adds	r3, #4
 800db3c:	2102      	movs	r1, #2
 800db3e:	4618      	mov	r0, r3
 800db40:	f000 f844 	bl	800dbcc <RCCEx_PLLSAI1_Config>
 800db44:	4603      	mov	r3, r0
 800db46:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800db48:	7cfb      	ldrb	r3, [r7, #19]
 800db4a:	2b00      	cmp	r3, #0
 800db4c:	d014      	beq.n	800db78 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 800db4e:	7cfb      	ldrb	r3, [r7, #19]
 800db50:	74bb      	strb	r3, [r7, #18]
 800db52:	e011      	b.n	800db78 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 800db54:	687b      	ldr	r3, [r7, #4]
 800db56:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800db58:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800db5c:	d10c      	bne.n	800db78 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 800db5e:	687b      	ldr	r3, [r7, #4]
 800db60:	3320      	adds	r3, #32
 800db62:	2102      	movs	r1, #2
 800db64:	4618      	mov	r0, r3
 800db66:	f000 f925 	bl	800ddb4 <RCCEx_PLLSAI2_Config>
 800db6a:	4603      	mov	r3, r0
 800db6c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800db6e:	7cfb      	ldrb	r3, [r7, #19]
 800db70:	2b00      	cmp	r3, #0
 800db72:	d001      	beq.n	800db78 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 800db74:	7cfb      	ldrb	r3, [r7, #19]
 800db76:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800db78:	687b      	ldr	r3, [r7, #4]
 800db7a:	681b      	ldr	r3, [r3, #0]
 800db7c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800db80:	2b00      	cmp	r3, #0
 800db82:	d00a      	beq.n	800db9a <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800db84:	4b10      	ldr	r3, [pc, #64]	@ (800dbc8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800db86:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800db8a:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 800db8e:	687b      	ldr	r3, [r7, #4]
 800db90:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800db92:	490d      	ldr	r1, [pc, #52]	@ (800dbc8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800db94:	4313      	orrs	r3, r2
 800db96:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800db9a:	687b      	ldr	r3, [r7, #4]
 800db9c:	681b      	ldr	r3, [r3, #0]
 800db9e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800dba2:	2b00      	cmp	r3, #0
 800dba4:	d00b      	beq.n	800dbbe <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800dba6:	4b08      	ldr	r3, [pc, #32]	@ (800dbc8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800dba8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800dbac:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800dbb0:	687b      	ldr	r3, [r7, #4]
 800dbb2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800dbb6:	4904      	ldr	r1, [pc, #16]	@ (800dbc8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800dbb8:	4313      	orrs	r3, r2
 800dbba:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 800dbbe:	7cbb      	ldrb	r3, [r7, #18]
}
 800dbc0:	4618      	mov	r0, r3
 800dbc2:	3718      	adds	r7, #24
 800dbc4:	46bd      	mov	sp, r7
 800dbc6:	bd80      	pop	{r7, pc}
 800dbc8:	40021000 	.word	0x40021000

0800dbcc <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 800dbcc:	b580      	push	{r7, lr}
 800dbce:	b084      	sub	sp, #16
 800dbd0:	af00      	add	r7, sp, #0
 800dbd2:	6078      	str	r0, [r7, #4]
 800dbd4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800dbd6:	2300      	movs	r3, #0
 800dbd8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800dbda:	4b75      	ldr	r3, [pc, #468]	@ (800ddb0 <RCCEx_PLLSAI1_Config+0x1e4>)
 800dbdc:	68db      	ldr	r3, [r3, #12]
 800dbde:	f003 0303 	and.w	r3, r3, #3
 800dbe2:	2b00      	cmp	r3, #0
 800dbe4:	d018      	beq.n	800dc18 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800dbe6:	4b72      	ldr	r3, [pc, #456]	@ (800ddb0 <RCCEx_PLLSAI1_Config+0x1e4>)
 800dbe8:	68db      	ldr	r3, [r3, #12]
 800dbea:	f003 0203 	and.w	r2, r3, #3
 800dbee:	687b      	ldr	r3, [r7, #4]
 800dbf0:	681b      	ldr	r3, [r3, #0]
 800dbf2:	429a      	cmp	r2, r3
 800dbf4:	d10d      	bne.n	800dc12 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800dbf6:	687b      	ldr	r3, [r7, #4]
 800dbf8:	681b      	ldr	r3, [r3, #0]
       ||
 800dbfa:	2b00      	cmp	r3, #0
 800dbfc:	d009      	beq.n	800dc12 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 800dbfe:	4b6c      	ldr	r3, [pc, #432]	@ (800ddb0 <RCCEx_PLLSAI1_Config+0x1e4>)
 800dc00:	68db      	ldr	r3, [r3, #12]
 800dc02:	091b      	lsrs	r3, r3, #4
 800dc04:	f003 0307 	and.w	r3, r3, #7
 800dc08:	1c5a      	adds	r2, r3, #1
 800dc0a:	687b      	ldr	r3, [r7, #4]
 800dc0c:	685b      	ldr	r3, [r3, #4]
       ||
 800dc0e:	429a      	cmp	r2, r3
 800dc10:	d047      	beq.n	800dca2 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800dc12:	2301      	movs	r3, #1
 800dc14:	73fb      	strb	r3, [r7, #15]
 800dc16:	e044      	b.n	800dca2 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 800dc18:	687b      	ldr	r3, [r7, #4]
 800dc1a:	681b      	ldr	r3, [r3, #0]
 800dc1c:	2b03      	cmp	r3, #3
 800dc1e:	d018      	beq.n	800dc52 <RCCEx_PLLSAI1_Config+0x86>
 800dc20:	2b03      	cmp	r3, #3
 800dc22:	d825      	bhi.n	800dc70 <RCCEx_PLLSAI1_Config+0xa4>
 800dc24:	2b01      	cmp	r3, #1
 800dc26:	d002      	beq.n	800dc2e <RCCEx_PLLSAI1_Config+0x62>
 800dc28:	2b02      	cmp	r3, #2
 800dc2a:	d009      	beq.n	800dc40 <RCCEx_PLLSAI1_Config+0x74>
 800dc2c:	e020      	b.n	800dc70 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800dc2e:	4b60      	ldr	r3, [pc, #384]	@ (800ddb0 <RCCEx_PLLSAI1_Config+0x1e4>)
 800dc30:	681b      	ldr	r3, [r3, #0]
 800dc32:	f003 0302 	and.w	r3, r3, #2
 800dc36:	2b00      	cmp	r3, #0
 800dc38:	d11d      	bne.n	800dc76 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 800dc3a:	2301      	movs	r3, #1
 800dc3c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800dc3e:	e01a      	b.n	800dc76 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800dc40:	4b5b      	ldr	r3, [pc, #364]	@ (800ddb0 <RCCEx_PLLSAI1_Config+0x1e4>)
 800dc42:	681b      	ldr	r3, [r3, #0]
 800dc44:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800dc48:	2b00      	cmp	r3, #0
 800dc4a:	d116      	bne.n	800dc7a <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 800dc4c:	2301      	movs	r3, #1
 800dc4e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800dc50:	e013      	b.n	800dc7a <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800dc52:	4b57      	ldr	r3, [pc, #348]	@ (800ddb0 <RCCEx_PLLSAI1_Config+0x1e4>)
 800dc54:	681b      	ldr	r3, [r3, #0]
 800dc56:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800dc5a:	2b00      	cmp	r3, #0
 800dc5c:	d10f      	bne.n	800dc7e <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800dc5e:	4b54      	ldr	r3, [pc, #336]	@ (800ddb0 <RCCEx_PLLSAI1_Config+0x1e4>)
 800dc60:	681b      	ldr	r3, [r3, #0]
 800dc62:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800dc66:	2b00      	cmp	r3, #0
 800dc68:	d109      	bne.n	800dc7e <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 800dc6a:	2301      	movs	r3, #1
 800dc6c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800dc6e:	e006      	b.n	800dc7e <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 800dc70:	2301      	movs	r3, #1
 800dc72:	73fb      	strb	r3, [r7, #15]
      break;
 800dc74:	e004      	b.n	800dc80 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800dc76:	bf00      	nop
 800dc78:	e002      	b.n	800dc80 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800dc7a:	bf00      	nop
 800dc7c:	e000      	b.n	800dc80 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800dc7e:	bf00      	nop
    }

    if(status == HAL_OK)
 800dc80:	7bfb      	ldrb	r3, [r7, #15]
 800dc82:	2b00      	cmp	r3, #0
 800dc84:	d10d      	bne.n	800dca2 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800dc86:	4b4a      	ldr	r3, [pc, #296]	@ (800ddb0 <RCCEx_PLLSAI1_Config+0x1e4>)
 800dc88:	68db      	ldr	r3, [r3, #12]
 800dc8a:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 800dc8e:	687b      	ldr	r3, [r7, #4]
 800dc90:	6819      	ldr	r1, [r3, #0]
 800dc92:	687b      	ldr	r3, [r7, #4]
 800dc94:	685b      	ldr	r3, [r3, #4]
 800dc96:	3b01      	subs	r3, #1
 800dc98:	011b      	lsls	r3, r3, #4
 800dc9a:	430b      	orrs	r3, r1
 800dc9c:	4944      	ldr	r1, [pc, #272]	@ (800ddb0 <RCCEx_PLLSAI1_Config+0x1e4>)
 800dc9e:	4313      	orrs	r3, r2
 800dca0:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800dca2:	7bfb      	ldrb	r3, [r7, #15]
 800dca4:	2b00      	cmp	r3, #0
 800dca6:	d17d      	bne.n	800dda4 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 800dca8:	4b41      	ldr	r3, [pc, #260]	@ (800ddb0 <RCCEx_PLLSAI1_Config+0x1e4>)
 800dcaa:	681b      	ldr	r3, [r3, #0]
 800dcac:	4a40      	ldr	r2, [pc, #256]	@ (800ddb0 <RCCEx_PLLSAI1_Config+0x1e4>)
 800dcae:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800dcb2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800dcb4:	f7fb fa06 	bl	80090c4 <HAL_GetTick>
 800dcb8:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800dcba:	e009      	b.n	800dcd0 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800dcbc:	f7fb fa02 	bl	80090c4 <HAL_GetTick>
 800dcc0:	4602      	mov	r2, r0
 800dcc2:	68bb      	ldr	r3, [r7, #8]
 800dcc4:	1ad3      	subs	r3, r2, r3
 800dcc6:	2b02      	cmp	r3, #2
 800dcc8:	d902      	bls.n	800dcd0 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800dcca:	2303      	movs	r3, #3
 800dccc:	73fb      	strb	r3, [r7, #15]
        break;
 800dcce:	e005      	b.n	800dcdc <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800dcd0:	4b37      	ldr	r3, [pc, #220]	@ (800ddb0 <RCCEx_PLLSAI1_Config+0x1e4>)
 800dcd2:	681b      	ldr	r3, [r3, #0]
 800dcd4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800dcd8:	2b00      	cmp	r3, #0
 800dcda:	d1ef      	bne.n	800dcbc <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 800dcdc:	7bfb      	ldrb	r3, [r7, #15]
 800dcde:	2b00      	cmp	r3, #0
 800dce0:	d160      	bne.n	800dda4 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800dce2:	683b      	ldr	r3, [r7, #0]
 800dce4:	2b00      	cmp	r3, #0
 800dce6:	d111      	bne.n	800dd0c <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800dce8:	4b31      	ldr	r3, [pc, #196]	@ (800ddb0 <RCCEx_PLLSAI1_Config+0x1e4>)
 800dcea:	691b      	ldr	r3, [r3, #16]
 800dcec:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 800dcf0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800dcf4:	687a      	ldr	r2, [r7, #4]
 800dcf6:	6892      	ldr	r2, [r2, #8]
 800dcf8:	0211      	lsls	r1, r2, #8
 800dcfa:	687a      	ldr	r2, [r7, #4]
 800dcfc:	68d2      	ldr	r2, [r2, #12]
 800dcfe:	0912      	lsrs	r2, r2, #4
 800dd00:	0452      	lsls	r2, r2, #17
 800dd02:	430a      	orrs	r2, r1
 800dd04:	492a      	ldr	r1, [pc, #168]	@ (800ddb0 <RCCEx_PLLSAI1_Config+0x1e4>)
 800dd06:	4313      	orrs	r3, r2
 800dd08:	610b      	str	r3, [r1, #16]
 800dd0a:	e027      	b.n	800dd5c <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 800dd0c:	683b      	ldr	r3, [r7, #0]
 800dd0e:	2b01      	cmp	r3, #1
 800dd10:	d112      	bne.n	800dd38 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800dd12:	4b27      	ldr	r3, [pc, #156]	@ (800ddb0 <RCCEx_PLLSAI1_Config+0x1e4>)
 800dd14:	691b      	ldr	r3, [r3, #16]
 800dd16:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 800dd1a:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 800dd1e:	687a      	ldr	r2, [r7, #4]
 800dd20:	6892      	ldr	r2, [r2, #8]
 800dd22:	0211      	lsls	r1, r2, #8
 800dd24:	687a      	ldr	r2, [r7, #4]
 800dd26:	6912      	ldr	r2, [r2, #16]
 800dd28:	0852      	lsrs	r2, r2, #1
 800dd2a:	3a01      	subs	r2, #1
 800dd2c:	0552      	lsls	r2, r2, #21
 800dd2e:	430a      	orrs	r2, r1
 800dd30:	491f      	ldr	r1, [pc, #124]	@ (800ddb0 <RCCEx_PLLSAI1_Config+0x1e4>)
 800dd32:	4313      	orrs	r3, r2
 800dd34:	610b      	str	r3, [r1, #16]
 800dd36:	e011      	b.n	800dd5c <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800dd38:	4b1d      	ldr	r3, [pc, #116]	@ (800ddb0 <RCCEx_PLLSAI1_Config+0x1e4>)
 800dd3a:	691b      	ldr	r3, [r3, #16]
 800dd3c:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 800dd40:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 800dd44:	687a      	ldr	r2, [r7, #4]
 800dd46:	6892      	ldr	r2, [r2, #8]
 800dd48:	0211      	lsls	r1, r2, #8
 800dd4a:	687a      	ldr	r2, [r7, #4]
 800dd4c:	6952      	ldr	r2, [r2, #20]
 800dd4e:	0852      	lsrs	r2, r2, #1
 800dd50:	3a01      	subs	r2, #1
 800dd52:	0652      	lsls	r2, r2, #25
 800dd54:	430a      	orrs	r2, r1
 800dd56:	4916      	ldr	r1, [pc, #88]	@ (800ddb0 <RCCEx_PLLSAI1_Config+0x1e4>)
 800dd58:	4313      	orrs	r3, r2
 800dd5a:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 800dd5c:	4b14      	ldr	r3, [pc, #80]	@ (800ddb0 <RCCEx_PLLSAI1_Config+0x1e4>)
 800dd5e:	681b      	ldr	r3, [r3, #0]
 800dd60:	4a13      	ldr	r2, [pc, #76]	@ (800ddb0 <RCCEx_PLLSAI1_Config+0x1e4>)
 800dd62:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800dd66:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800dd68:	f7fb f9ac 	bl	80090c4 <HAL_GetTick>
 800dd6c:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800dd6e:	e009      	b.n	800dd84 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800dd70:	f7fb f9a8 	bl	80090c4 <HAL_GetTick>
 800dd74:	4602      	mov	r2, r0
 800dd76:	68bb      	ldr	r3, [r7, #8]
 800dd78:	1ad3      	subs	r3, r2, r3
 800dd7a:	2b02      	cmp	r3, #2
 800dd7c:	d902      	bls.n	800dd84 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 800dd7e:	2303      	movs	r3, #3
 800dd80:	73fb      	strb	r3, [r7, #15]
          break;
 800dd82:	e005      	b.n	800dd90 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800dd84:	4b0a      	ldr	r3, [pc, #40]	@ (800ddb0 <RCCEx_PLLSAI1_Config+0x1e4>)
 800dd86:	681b      	ldr	r3, [r3, #0]
 800dd88:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800dd8c:	2b00      	cmp	r3, #0
 800dd8e:	d0ef      	beq.n	800dd70 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 800dd90:	7bfb      	ldrb	r3, [r7, #15]
 800dd92:	2b00      	cmp	r3, #0
 800dd94:	d106      	bne.n	800dda4 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 800dd96:	4b06      	ldr	r3, [pc, #24]	@ (800ddb0 <RCCEx_PLLSAI1_Config+0x1e4>)
 800dd98:	691a      	ldr	r2, [r3, #16]
 800dd9a:	687b      	ldr	r3, [r7, #4]
 800dd9c:	699b      	ldr	r3, [r3, #24]
 800dd9e:	4904      	ldr	r1, [pc, #16]	@ (800ddb0 <RCCEx_PLLSAI1_Config+0x1e4>)
 800dda0:	4313      	orrs	r3, r2
 800dda2:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 800dda4:	7bfb      	ldrb	r3, [r7, #15]
}
 800dda6:	4618      	mov	r0, r3
 800dda8:	3710      	adds	r7, #16
 800ddaa:	46bd      	mov	sp, r7
 800ddac:	bd80      	pop	{r7, pc}
 800ddae:	bf00      	nop
 800ddb0:	40021000 	.word	0x40021000

0800ddb4 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 800ddb4:	b580      	push	{r7, lr}
 800ddb6:	b084      	sub	sp, #16
 800ddb8:	af00      	add	r7, sp, #0
 800ddba:	6078      	str	r0, [r7, #4]
 800ddbc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800ddbe:	2300      	movs	r3, #0
 800ddc0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800ddc2:	4b6a      	ldr	r3, [pc, #424]	@ (800df6c <RCCEx_PLLSAI2_Config+0x1b8>)
 800ddc4:	68db      	ldr	r3, [r3, #12]
 800ddc6:	f003 0303 	and.w	r3, r3, #3
 800ddca:	2b00      	cmp	r3, #0
 800ddcc:	d018      	beq.n	800de00 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 800ddce:	4b67      	ldr	r3, [pc, #412]	@ (800df6c <RCCEx_PLLSAI2_Config+0x1b8>)
 800ddd0:	68db      	ldr	r3, [r3, #12]
 800ddd2:	f003 0203 	and.w	r2, r3, #3
 800ddd6:	687b      	ldr	r3, [r7, #4]
 800ddd8:	681b      	ldr	r3, [r3, #0]
 800ddda:	429a      	cmp	r2, r3
 800dddc:	d10d      	bne.n	800ddfa <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 800ddde:	687b      	ldr	r3, [r7, #4]
 800dde0:	681b      	ldr	r3, [r3, #0]
       ||
 800dde2:	2b00      	cmp	r3, #0
 800dde4:	d009      	beq.n	800ddfa <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 800dde6:	4b61      	ldr	r3, [pc, #388]	@ (800df6c <RCCEx_PLLSAI2_Config+0x1b8>)
 800dde8:	68db      	ldr	r3, [r3, #12]
 800ddea:	091b      	lsrs	r3, r3, #4
 800ddec:	f003 0307 	and.w	r3, r3, #7
 800ddf0:	1c5a      	adds	r2, r3, #1
 800ddf2:	687b      	ldr	r3, [r7, #4]
 800ddf4:	685b      	ldr	r3, [r3, #4]
       ||
 800ddf6:	429a      	cmp	r2, r3
 800ddf8:	d047      	beq.n	800de8a <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800ddfa:	2301      	movs	r3, #1
 800ddfc:	73fb      	strb	r3, [r7, #15]
 800ddfe:	e044      	b.n	800de8a <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 800de00:	687b      	ldr	r3, [r7, #4]
 800de02:	681b      	ldr	r3, [r3, #0]
 800de04:	2b03      	cmp	r3, #3
 800de06:	d018      	beq.n	800de3a <RCCEx_PLLSAI2_Config+0x86>
 800de08:	2b03      	cmp	r3, #3
 800de0a:	d825      	bhi.n	800de58 <RCCEx_PLLSAI2_Config+0xa4>
 800de0c:	2b01      	cmp	r3, #1
 800de0e:	d002      	beq.n	800de16 <RCCEx_PLLSAI2_Config+0x62>
 800de10:	2b02      	cmp	r3, #2
 800de12:	d009      	beq.n	800de28 <RCCEx_PLLSAI2_Config+0x74>
 800de14:	e020      	b.n	800de58 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800de16:	4b55      	ldr	r3, [pc, #340]	@ (800df6c <RCCEx_PLLSAI2_Config+0x1b8>)
 800de18:	681b      	ldr	r3, [r3, #0]
 800de1a:	f003 0302 	and.w	r3, r3, #2
 800de1e:	2b00      	cmp	r3, #0
 800de20:	d11d      	bne.n	800de5e <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 800de22:	2301      	movs	r3, #1
 800de24:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800de26:	e01a      	b.n	800de5e <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800de28:	4b50      	ldr	r3, [pc, #320]	@ (800df6c <RCCEx_PLLSAI2_Config+0x1b8>)
 800de2a:	681b      	ldr	r3, [r3, #0]
 800de2c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800de30:	2b00      	cmp	r3, #0
 800de32:	d116      	bne.n	800de62 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 800de34:	2301      	movs	r3, #1
 800de36:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800de38:	e013      	b.n	800de62 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800de3a:	4b4c      	ldr	r3, [pc, #304]	@ (800df6c <RCCEx_PLLSAI2_Config+0x1b8>)
 800de3c:	681b      	ldr	r3, [r3, #0]
 800de3e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800de42:	2b00      	cmp	r3, #0
 800de44:	d10f      	bne.n	800de66 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800de46:	4b49      	ldr	r3, [pc, #292]	@ (800df6c <RCCEx_PLLSAI2_Config+0x1b8>)
 800de48:	681b      	ldr	r3, [r3, #0]
 800de4a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800de4e:	2b00      	cmp	r3, #0
 800de50:	d109      	bne.n	800de66 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 800de52:	2301      	movs	r3, #1
 800de54:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800de56:	e006      	b.n	800de66 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 800de58:	2301      	movs	r3, #1
 800de5a:	73fb      	strb	r3, [r7, #15]
      break;
 800de5c:	e004      	b.n	800de68 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800de5e:	bf00      	nop
 800de60:	e002      	b.n	800de68 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800de62:	bf00      	nop
 800de64:	e000      	b.n	800de68 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800de66:	bf00      	nop
    }

    if(status == HAL_OK)
 800de68:	7bfb      	ldrb	r3, [r7, #15]
 800de6a:	2b00      	cmp	r3, #0
 800de6c:	d10d      	bne.n	800de8a <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800de6e:	4b3f      	ldr	r3, [pc, #252]	@ (800df6c <RCCEx_PLLSAI2_Config+0x1b8>)
 800de70:	68db      	ldr	r3, [r3, #12]
 800de72:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 800de76:	687b      	ldr	r3, [r7, #4]
 800de78:	6819      	ldr	r1, [r3, #0]
 800de7a:	687b      	ldr	r3, [r7, #4]
 800de7c:	685b      	ldr	r3, [r3, #4]
 800de7e:	3b01      	subs	r3, #1
 800de80:	011b      	lsls	r3, r3, #4
 800de82:	430b      	orrs	r3, r1
 800de84:	4939      	ldr	r1, [pc, #228]	@ (800df6c <RCCEx_PLLSAI2_Config+0x1b8>)
 800de86:	4313      	orrs	r3, r2
 800de88:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800de8a:	7bfb      	ldrb	r3, [r7, #15]
 800de8c:	2b00      	cmp	r3, #0
 800de8e:	d167      	bne.n	800df60 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 800de90:	4b36      	ldr	r3, [pc, #216]	@ (800df6c <RCCEx_PLLSAI2_Config+0x1b8>)
 800de92:	681b      	ldr	r3, [r3, #0]
 800de94:	4a35      	ldr	r2, [pc, #212]	@ (800df6c <RCCEx_PLLSAI2_Config+0x1b8>)
 800de96:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800de9a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800de9c:	f7fb f912 	bl	80090c4 <HAL_GetTick>
 800dea0:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800dea2:	e009      	b.n	800deb8 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800dea4:	f7fb f90e 	bl	80090c4 <HAL_GetTick>
 800dea8:	4602      	mov	r2, r0
 800deaa:	68bb      	ldr	r3, [r7, #8]
 800deac:	1ad3      	subs	r3, r2, r3
 800deae:	2b02      	cmp	r3, #2
 800deb0:	d902      	bls.n	800deb8 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800deb2:	2303      	movs	r3, #3
 800deb4:	73fb      	strb	r3, [r7, #15]
        break;
 800deb6:	e005      	b.n	800dec4 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800deb8:	4b2c      	ldr	r3, [pc, #176]	@ (800df6c <RCCEx_PLLSAI2_Config+0x1b8>)
 800deba:	681b      	ldr	r3, [r3, #0]
 800debc:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800dec0:	2b00      	cmp	r3, #0
 800dec2:	d1ef      	bne.n	800dea4 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 800dec4:	7bfb      	ldrb	r3, [r7, #15]
 800dec6:	2b00      	cmp	r3, #0
 800dec8:	d14a      	bne.n	800df60 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800deca:	683b      	ldr	r3, [r7, #0]
 800decc:	2b00      	cmp	r3, #0
 800dece:	d111      	bne.n	800def4 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800ded0:	4b26      	ldr	r3, [pc, #152]	@ (800df6c <RCCEx_PLLSAI2_Config+0x1b8>)
 800ded2:	695b      	ldr	r3, [r3, #20]
 800ded4:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 800ded8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800dedc:	687a      	ldr	r2, [r7, #4]
 800dede:	6892      	ldr	r2, [r2, #8]
 800dee0:	0211      	lsls	r1, r2, #8
 800dee2:	687a      	ldr	r2, [r7, #4]
 800dee4:	68d2      	ldr	r2, [r2, #12]
 800dee6:	0912      	lsrs	r2, r2, #4
 800dee8:	0452      	lsls	r2, r2, #17
 800deea:	430a      	orrs	r2, r1
 800deec:	491f      	ldr	r1, [pc, #124]	@ (800df6c <RCCEx_PLLSAI2_Config+0x1b8>)
 800deee:	4313      	orrs	r3, r2
 800def0:	614b      	str	r3, [r1, #20]
 800def2:	e011      	b.n	800df18 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800def4:	4b1d      	ldr	r3, [pc, #116]	@ (800df6c <RCCEx_PLLSAI2_Config+0x1b8>)
 800def6:	695b      	ldr	r3, [r3, #20]
 800def8:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 800defc:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 800df00:	687a      	ldr	r2, [r7, #4]
 800df02:	6892      	ldr	r2, [r2, #8]
 800df04:	0211      	lsls	r1, r2, #8
 800df06:	687a      	ldr	r2, [r7, #4]
 800df08:	6912      	ldr	r2, [r2, #16]
 800df0a:	0852      	lsrs	r2, r2, #1
 800df0c:	3a01      	subs	r2, #1
 800df0e:	0652      	lsls	r2, r2, #25
 800df10:	430a      	orrs	r2, r1
 800df12:	4916      	ldr	r1, [pc, #88]	@ (800df6c <RCCEx_PLLSAI2_Config+0x1b8>)
 800df14:	4313      	orrs	r3, r2
 800df16:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 800df18:	4b14      	ldr	r3, [pc, #80]	@ (800df6c <RCCEx_PLLSAI2_Config+0x1b8>)
 800df1a:	681b      	ldr	r3, [r3, #0]
 800df1c:	4a13      	ldr	r2, [pc, #76]	@ (800df6c <RCCEx_PLLSAI2_Config+0x1b8>)
 800df1e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800df22:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800df24:	f7fb f8ce 	bl	80090c4 <HAL_GetTick>
 800df28:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800df2a:	e009      	b.n	800df40 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800df2c:	f7fb f8ca 	bl	80090c4 <HAL_GetTick>
 800df30:	4602      	mov	r2, r0
 800df32:	68bb      	ldr	r3, [r7, #8]
 800df34:	1ad3      	subs	r3, r2, r3
 800df36:	2b02      	cmp	r3, #2
 800df38:	d902      	bls.n	800df40 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 800df3a:	2303      	movs	r3, #3
 800df3c:	73fb      	strb	r3, [r7, #15]
          break;
 800df3e:	e005      	b.n	800df4c <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800df40:	4b0a      	ldr	r3, [pc, #40]	@ (800df6c <RCCEx_PLLSAI2_Config+0x1b8>)
 800df42:	681b      	ldr	r3, [r3, #0]
 800df44:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800df48:	2b00      	cmp	r3, #0
 800df4a:	d0ef      	beq.n	800df2c <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 800df4c:	7bfb      	ldrb	r3, [r7, #15]
 800df4e:	2b00      	cmp	r3, #0
 800df50:	d106      	bne.n	800df60 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 800df52:	4b06      	ldr	r3, [pc, #24]	@ (800df6c <RCCEx_PLLSAI2_Config+0x1b8>)
 800df54:	695a      	ldr	r2, [r3, #20]
 800df56:	687b      	ldr	r3, [r7, #4]
 800df58:	695b      	ldr	r3, [r3, #20]
 800df5a:	4904      	ldr	r1, [pc, #16]	@ (800df6c <RCCEx_PLLSAI2_Config+0x1b8>)
 800df5c:	4313      	orrs	r3, r2
 800df5e:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 800df60:	7bfb      	ldrb	r3, [r7, #15]
}
 800df62:	4618      	mov	r0, r3
 800df64:	3710      	adds	r7, #16
 800df66:	46bd      	mov	sp, r7
 800df68:	bd80      	pop	{r7, pc}
 800df6a:	bf00      	nop
 800df6c:	40021000 	.word	0x40021000

0800df70 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 800df70:	b580      	push	{r7, lr}
 800df72:	b084      	sub	sp, #16
 800df74:	af00      	add	r7, sp, #0
 800df76:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 800df78:	2301      	movs	r3, #1
 800df7a:	73fb      	strb	r3, [r7, #15]

  /* Check the RTC peripheral state */
  if (hrtc != NULL)
 800df7c:	687b      	ldr	r3, [r7, #4]
 800df7e:	2b00      	cmp	r3, #0
 800df80:	d079      	beq.n	800e076 <HAL_RTC_Init+0x106>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else /* #if (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */
    if (hrtc->State == HAL_RTC_STATE_RESET)
 800df82:	687b      	ldr	r3, [r7, #4]
 800df84:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 800df88:	b2db      	uxtb	r3, r3
 800df8a:	2b00      	cmp	r3, #0
 800df8c:	d106      	bne.n	800df9c <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 800df8e:	687b      	ldr	r3, [r7, #4]
 800df90:	2200      	movs	r2, #0
 800df92:	f883 2020 	strb.w	r2, [r3, #32]

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 800df96:	6878      	ldr	r0, [r7, #4]
 800df98:	f7f7 fc30 	bl	80057fc <HAL_RTC_MspInit>
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
    /* Process TAMP ip offset from RTC one */
    hrtc->TampOffset = (TAMP_BASE - RTC_BASE);
#endif
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 800df9c:	687b      	ldr	r3, [r7, #4]
 800df9e:	2202      	movs	r2, #2
 800dfa0:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Check whether the calendar needs to be initialized */
    if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 800dfa4:	687b      	ldr	r3, [r7, #4]
 800dfa6:	681b      	ldr	r3, [r3, #0]
 800dfa8:	68db      	ldr	r3, [r3, #12]
 800dfaa:	f003 0310 	and.w	r3, r3, #16
 800dfae:	2b10      	cmp	r3, #16
 800dfb0:	d058      	beq.n	800e064 <HAL_RTC_Init+0xf4>
    {
      /* Disable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800dfb2:	687b      	ldr	r3, [r7, #4]
 800dfb4:	681b      	ldr	r3, [r3, #0]
 800dfb6:	22ca      	movs	r2, #202	@ 0xca
 800dfb8:	625a      	str	r2, [r3, #36]	@ 0x24
 800dfba:	687b      	ldr	r3, [r7, #4]
 800dfbc:	681b      	ldr	r3, [r3, #0]
 800dfbe:	2253      	movs	r2, #83	@ 0x53
 800dfc0:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Enter Initialization mode */
      status = RTC_EnterInitMode(hrtc);
 800dfc2:	6878      	ldr	r0, [r7, #4]
 800dfc4:	f000 fb82 	bl	800e6cc <RTC_EnterInitMode>
 800dfc8:	4603      	mov	r3, r0
 800dfca:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 800dfcc:	7bfb      	ldrb	r3, [r7, #15]
 800dfce:	2b00      	cmp	r3, #0
 800dfd0:	d127      	bne.n	800e022 <HAL_RTC_Init+0xb2>
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
        /* Clear RTC_CR FMT, OSEL, POL and TAMPOE Bits */
        hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
#else
        /* Clear RTC_CR FMT, OSEL and POL Bits */
        hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL);
 800dfd2:	687b      	ldr	r3, [r7, #4]
 800dfd4:	681b      	ldr	r3, [r3, #0]
 800dfd6:	689b      	ldr	r3, [r3, #8]
 800dfd8:	687a      	ldr	r2, [r7, #4]
 800dfda:	6812      	ldr	r2, [r2, #0]
 800dfdc:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 800dfe0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800dfe4:	6093      	str	r3, [r2, #8]
#endif
        /* Set RTC_CR register */
        hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 800dfe6:	687b      	ldr	r3, [r7, #4]
 800dfe8:	681b      	ldr	r3, [r3, #0]
 800dfea:	6899      	ldr	r1, [r3, #8]
 800dfec:	687b      	ldr	r3, [r7, #4]
 800dfee:	685a      	ldr	r2, [r3, #4]
 800dff0:	687b      	ldr	r3, [r7, #4]
 800dff2:	691b      	ldr	r3, [r3, #16]
 800dff4:	431a      	orrs	r2, r3
 800dff6:	687b      	ldr	r3, [r7, #4]
 800dff8:	699b      	ldr	r3, [r3, #24]
 800dffa:	431a      	orrs	r2, r3
 800dffc:	687b      	ldr	r3, [r7, #4]
 800dffe:	681b      	ldr	r3, [r3, #0]
 800e000:	430a      	orrs	r2, r1
 800e002:	609a      	str	r2, [r3, #8]

        /* Configure the RTC PRER */
        hrtc->Instance->PRER = (hrtc->Init.SynchPrediv);
 800e004:	687b      	ldr	r3, [r7, #4]
 800e006:	681b      	ldr	r3, [r3, #0]
 800e008:	687a      	ldr	r2, [r7, #4]
 800e00a:	68d2      	ldr	r2, [r2, #12]
 800e00c:	611a      	str	r2, [r3, #16]
        hrtc->Instance->PRER |= (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 800e00e:	687b      	ldr	r3, [r7, #4]
 800e010:	681b      	ldr	r3, [r3, #0]
 800e012:	6919      	ldr	r1, [r3, #16]
 800e014:	687b      	ldr	r3, [r7, #4]
 800e016:	689b      	ldr	r3, [r3, #8]
 800e018:	041a      	lsls	r2, r3, #16
 800e01a:	687b      	ldr	r3, [r7, #4]
 800e01c:	681b      	ldr	r3, [r3, #0]
 800e01e:	430a      	orrs	r2, r1
 800e020:	611a      	str	r2, [r3, #16]
        MODIFY_REG(RTC->ICSR, RTC_ICSR_BIN | RTC_ICSR_BCDU, hrtc->Init.BinMode | hrtc->Init.BinMixBcdU);
#endif
      }

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 800e022:	6878      	ldr	r0, [r7, #4]
 800e024:	f000 fb86 	bl	800e734 <RTC_ExitInitMode>
 800e028:	4603      	mov	r3, r0
 800e02a:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 800e02c:	7bfb      	ldrb	r3, [r7, #15]
 800e02e:	2b00      	cmp	r3, #0
 800e030:	d113      	bne.n	800e05a <HAL_RTC_Init+0xea>
      {
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU | RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
#else
        hrtc->Instance->OR &= ~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 800e032:	687b      	ldr	r3, [r7, #4]
 800e034:	681b      	ldr	r3, [r3, #0]
 800e036:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800e038:	687b      	ldr	r3, [r7, #4]
 800e03a:	681b      	ldr	r3, [r3, #0]
 800e03c:	f022 0203 	bic.w	r2, r2, #3
 800e040:	64da      	str	r2, [r3, #76]	@ 0x4c
        hrtc->Instance->OR |= (hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 800e042:	687b      	ldr	r3, [r7, #4]
 800e044:	681b      	ldr	r3, [r3, #0]
 800e046:	6cd9      	ldr	r1, [r3, #76]	@ 0x4c
 800e048:	687b      	ldr	r3, [r7, #4]
 800e04a:	69da      	ldr	r2, [r3, #28]
 800e04c:	687b      	ldr	r3, [r7, #4]
 800e04e:	695b      	ldr	r3, [r3, #20]
 800e050:	431a      	orrs	r2, r3
 800e052:	687b      	ldr	r3, [r7, #4]
 800e054:	681b      	ldr	r3, [r3, #0]
 800e056:	430a      	orrs	r2, r1
 800e058:	64da      	str	r2, [r3, #76]	@ 0x4c
#endif
      }

      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800e05a:	687b      	ldr	r3, [r7, #4]
 800e05c:	681b      	ldr	r3, [r3, #0]
 800e05e:	22ff      	movs	r2, #255	@ 0xff
 800e060:	625a      	str	r2, [r3, #36]	@ 0x24
 800e062:	e001      	b.n	800e068 <HAL_RTC_Init+0xf8>
    }
    else
    {
      /* The calendar is already initialized */
      status = HAL_OK;
 800e064:	2300      	movs	r3, #0
 800e066:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 800e068:	7bfb      	ldrb	r3, [r7, #15]
 800e06a:	2b00      	cmp	r3, #0
 800e06c:	d103      	bne.n	800e076 <HAL_RTC_Init+0x106>
    {
        hrtc->State = HAL_RTC_STATE_READY;
 800e06e:	687b      	ldr	r3, [r7, #4]
 800e070:	2201      	movs	r2, #1
 800e072:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    }
  }

  return status;
 800e076:	7bfb      	ldrb	r3, [r7, #15]
}
 800e078:	4618      	mov	r0, r3
 800e07a:	3710      	adds	r7, #16
 800e07c:	46bd      	mov	sp, r7
 800e07e:	bd80      	pop	{r7, pc}

0800e080 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800e080:	b590      	push	{r4, r7, lr}
 800e082:	b087      	sub	sp, #28
 800e084:	af00      	add	r7, sp, #0
 800e086:	60f8      	str	r0, [r7, #12]
 800e088:	60b9      	str	r1, [r7, #8]
 800e08a:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800e08c:	68fb      	ldr	r3, [r7, #12]
 800e08e:	f893 3020 	ldrb.w	r3, [r3, #32]
 800e092:	2b01      	cmp	r3, #1
 800e094:	d101      	bne.n	800e09a <HAL_RTC_SetTime+0x1a>
 800e096:	2302      	movs	r3, #2
 800e098:	e08b      	b.n	800e1b2 <HAL_RTC_SetTime+0x132>
 800e09a:	68fb      	ldr	r3, [r7, #12]
 800e09c:	2201      	movs	r2, #1
 800e09e:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800e0a2:	68fb      	ldr	r3, [r7, #12]
 800e0a4:	2202      	movs	r2, #2
 800e0a6:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800e0aa:	68fb      	ldr	r3, [r7, #12]
 800e0ac:	681b      	ldr	r3, [r3, #0]
 800e0ae:	22ca      	movs	r2, #202	@ 0xca
 800e0b0:	625a      	str	r2, [r3, #36]	@ 0x24
 800e0b2:	68fb      	ldr	r3, [r7, #12]
 800e0b4:	681b      	ldr	r3, [r3, #0]
 800e0b6:	2253      	movs	r2, #83	@ 0x53
 800e0b8:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800e0ba:	68f8      	ldr	r0, [r7, #12]
 800e0bc:	f000 fb06 	bl	800e6cc <RTC_EnterInitMode>
 800e0c0:	4603      	mov	r3, r0
 800e0c2:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 800e0c4:	7cfb      	ldrb	r3, [r7, #19]
 800e0c6:	2b00      	cmp	r3, #0
 800e0c8:	d163      	bne.n	800e192 <HAL_RTC_SetTime+0x112>
  {
    if (Format == RTC_FORMAT_BIN)
 800e0ca:	687b      	ldr	r3, [r7, #4]
 800e0cc:	2b00      	cmp	r3, #0
 800e0ce:	d126      	bne.n	800e11e <HAL_RTC_SetTime+0x9e>
    {
      if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800e0d0:	68fb      	ldr	r3, [r7, #12]
 800e0d2:	681b      	ldr	r3, [r3, #0]
 800e0d4:	689b      	ldr	r3, [r3, #8]
 800e0d6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800e0da:	2b00      	cmp	r3, #0
 800e0dc:	d102      	bne.n	800e0e4 <HAL_RTC_SetTime+0x64>
        assert_param(IS_RTC_HOUR12(sTime->Hours));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 800e0de:	68bb      	ldr	r3, [r7, #8]
 800e0e0:	2200      	movs	r2, #0
 800e0e2:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(sTime->Hours));
      }
      assert_param(IS_RTC_MINUTES(sTime->Minutes));
      assert_param(IS_RTC_SECONDS(sTime->Seconds));

      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 800e0e4:	68bb      	ldr	r3, [r7, #8]
 800e0e6:	781b      	ldrb	r3, [r3, #0]
 800e0e8:	4618      	mov	r0, r3
 800e0ea:	f000 fb61 	bl	800e7b0 <RTC_ByteToBcd2>
 800e0ee:	4603      	mov	r3, r0
 800e0f0:	041c      	lsls	r4, r3, #16
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800e0f2:	68bb      	ldr	r3, [r7, #8]
 800e0f4:	785b      	ldrb	r3, [r3, #1]
 800e0f6:	4618      	mov	r0, r3
 800e0f8:	f000 fb5a 	bl	800e7b0 <RTC_ByteToBcd2>
 800e0fc:	4603      	mov	r3, r0
 800e0fe:	021b      	lsls	r3, r3, #8
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 800e100:	431c      	orrs	r4, r3
                          ((uint32_t)RTC_ByteToBcd2(sTime->Seconds) << RTC_TR_SU_Pos) | \
 800e102:	68bb      	ldr	r3, [r7, #8]
 800e104:	789b      	ldrb	r3, [r3, #2]
 800e106:	4618      	mov	r0, r3
 800e108:	f000 fb52 	bl	800e7b0 <RTC_ByteToBcd2>
 800e10c:	4603      	mov	r3, r0
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800e10e:	ea44 0203 	orr.w	r2, r4, r3
                          (((uint32_t)sTime->TimeFormat) << RTC_TR_PM_Pos));
 800e112:	68bb      	ldr	r3, [r7, #8]
 800e114:	78db      	ldrb	r3, [r3, #3]
 800e116:	059b      	lsls	r3, r3, #22
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 800e118:	4313      	orrs	r3, r2
 800e11a:	617b      	str	r3, [r7, #20]
 800e11c:	e018      	b.n	800e150 <HAL_RTC_SetTime+0xd0>
    }
    else
    {
      if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800e11e:	68fb      	ldr	r3, [r7, #12]
 800e120:	681b      	ldr	r3, [r3, #0]
 800e122:	689b      	ldr	r3, [r3, #8]
 800e124:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800e128:	2b00      	cmp	r3, #0
 800e12a:	d102      	bne.n	800e132 <HAL_RTC_SetTime+0xb2>
        assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 800e12c:	68bb      	ldr	r3, [r7, #8]
 800e12e:	2200      	movs	r2, #0
 800e130:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
      }
      assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
      assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 800e132:	68bb      	ldr	r3, [r7, #8]
 800e134:	781b      	ldrb	r3, [r3, #0]
 800e136:	041a      	lsls	r2, r3, #16
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800e138:	68bb      	ldr	r3, [r7, #8]
 800e13a:	785b      	ldrb	r3, [r3, #1]
 800e13c:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 800e13e:	4313      	orrs	r3, r2
                ((uint32_t)(sTime->Seconds) << RTC_TR_SU_Pos) | \
 800e140:	68ba      	ldr	r2, [r7, #8]
 800e142:	7892      	ldrb	r2, [r2, #2]
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800e144:	431a      	orrs	r2, r3
                ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 800e146:	68bb      	ldr	r3, [r7, #8]
 800e148:	78db      	ldrb	r3, [r3, #3]
 800e14a:	059b      	lsls	r3, r3, #22
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 800e14c:	4313      	orrs	r3, r2
 800e14e:	617b      	str	r3, [r7, #20]
    }

    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 800e150:	68fb      	ldr	r3, [r7, #12]
 800e152:	681a      	ldr	r2, [r3, #0]
 800e154:	697b      	ldr	r3, [r7, #20]
 800e156:	f003 337f 	and.w	r3, r3, #2139062143	@ 0x7f7f7f7f
 800e15a:	f023 43fe 	bic.w	r3, r3, #2130706432	@ 0x7f000000
 800e15e:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured */
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 800e160:	68fb      	ldr	r3, [r7, #12]
 800e162:	681b      	ldr	r3, [r3, #0]
 800e164:	689a      	ldr	r2, [r3, #8]
 800e166:	68fb      	ldr	r3, [r7, #12]
 800e168:	681b      	ldr	r3, [r3, #0]
 800e16a:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 800e16e:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 800e170:	68fb      	ldr	r3, [r7, #12]
 800e172:	681b      	ldr	r3, [r3, #0]
 800e174:	6899      	ldr	r1, [r3, #8]
 800e176:	68bb      	ldr	r3, [r7, #8]
 800e178:	68da      	ldr	r2, [r3, #12]
 800e17a:	68bb      	ldr	r3, [r7, #8]
 800e17c:	691b      	ldr	r3, [r3, #16]
 800e17e:	431a      	orrs	r2, r3
 800e180:	68fb      	ldr	r3, [r7, #12]
 800e182:	681b      	ldr	r3, [r3, #0]
 800e184:	430a      	orrs	r2, r1
 800e186:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 800e188:	68f8      	ldr	r0, [r7, #12]
 800e18a:	f000 fad3 	bl	800e734 <RTC_ExitInitMode>
 800e18e:	4603      	mov	r3, r0
 800e190:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800e192:	68fb      	ldr	r3, [r7, #12]
 800e194:	681b      	ldr	r3, [r3, #0]
 800e196:	22ff      	movs	r2, #255	@ 0xff
 800e198:	625a      	str	r2, [r3, #36]	@ 0x24

  if (status == HAL_OK)
 800e19a:	7cfb      	ldrb	r3, [r7, #19]
 800e19c:	2b00      	cmp	r3, #0
 800e19e:	d103      	bne.n	800e1a8 <HAL_RTC_SetTime+0x128>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 800e1a0:	68fb      	ldr	r3, [r7, #12]
 800e1a2:	2201      	movs	r2, #1
 800e1a4:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800e1a8:	68fb      	ldr	r3, [r7, #12]
 800e1aa:	2200      	movs	r2, #0
 800e1ac:	f883 2020 	strb.w	r2, [r3, #32]

  return status;
 800e1b0:	7cfb      	ldrb	r3, [r7, #19]
}
 800e1b2:	4618      	mov	r0, r3
 800e1b4:	371c      	adds	r7, #28
 800e1b6:	46bd      	mov	sp, r7
 800e1b8:	bd90      	pop	{r4, r7, pc}

0800e1ba <HAL_RTC_GetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800e1ba:	b580      	push	{r7, lr}
 800e1bc:	b086      	sub	sp, #24
 800e1be:	af00      	add	r7, sp, #0
 800e1c0:	60f8      	str	r0, [r7, #12]
 800e1c2:	60b9      	str	r1, [r7, #8]
 800e1c4:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds structure field from the corresponding register*/
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 800e1c6:	68fb      	ldr	r3, [r7, #12]
 800e1c8:	681b      	ldr	r3, [r3, #0]
 800e1ca:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800e1cc:	68bb      	ldr	r3, [r7, #8]
 800e1ce:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 800e1d0:	68fb      	ldr	r3, [r7, #12]
 800e1d2:	681b      	ldr	r3, [r3, #0]
 800e1d4:	691b      	ldr	r3, [r3, #16]
 800e1d6:	f3c3 020e 	ubfx	r2, r3, #0, #15
 800e1da:	68bb      	ldr	r3, [r7, #8]
 800e1dc:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 800e1de:	68fb      	ldr	r3, [r7, #12]
 800e1e0:	681b      	ldr	r3, [r3, #0]
 800e1e2:	681b      	ldr	r3, [r3, #0]
 800e1e4:	f003 337f 	and.w	r3, r3, #2139062143	@ 0x7f7f7f7f
 800e1e8:	f023 43fe 	bic.w	r3, r3, #2130706432	@ 0x7f000000
 800e1ec:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> RTC_TR_HU_Pos);
 800e1ee:	697b      	ldr	r3, [r7, #20]
 800e1f0:	0c1b      	lsrs	r3, r3, #16
 800e1f2:	b2db      	uxtb	r3, r3
 800e1f4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800e1f8:	b2da      	uxtb	r2, r3
 800e1fa:	68bb      	ldr	r3, [r7, #8]
 800e1fc:	701a      	strb	r2, [r3, #0]
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 800e1fe:	697b      	ldr	r3, [r7, #20]
 800e200:	0a1b      	lsrs	r3, r3, #8
 800e202:	b2db      	uxtb	r3, r3
 800e204:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800e208:	b2da      	uxtb	r2, r3
 800e20a:	68bb      	ldr	r3, [r7, #8]
 800e20c:	705a      	strb	r2, [r3, #1]
  sTime->Seconds = (uint8_t)((tmpreg & (RTC_TR_ST | RTC_TR_SU)) >> RTC_TR_SU_Pos);
 800e20e:	697b      	ldr	r3, [r7, #20]
 800e210:	b2db      	uxtb	r3, r3
 800e212:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800e216:	b2da      	uxtb	r2, r3
 800e218:	68bb      	ldr	r3, [r7, #8]
 800e21a:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> RTC_TR_PM_Pos);
 800e21c:	697b      	ldr	r3, [r7, #20]
 800e21e:	0d9b      	lsrs	r3, r3, #22
 800e220:	b2db      	uxtb	r3, r3
 800e222:	f003 0301 	and.w	r3, r3, #1
 800e226:	b2da      	uxtb	r2, r3
 800e228:	68bb      	ldr	r3, [r7, #8]
 800e22a:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 800e22c:	687b      	ldr	r3, [r7, #4]
 800e22e:	2b00      	cmp	r3, #0
 800e230:	d11a      	bne.n	800e268 <HAL_RTC_GetTime+0xae>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 800e232:	68bb      	ldr	r3, [r7, #8]
 800e234:	781b      	ldrb	r3, [r3, #0]
 800e236:	4618      	mov	r0, r3
 800e238:	f000 fada 	bl	800e7f0 <RTC_Bcd2ToByte>
 800e23c:	4603      	mov	r3, r0
 800e23e:	461a      	mov	r2, r3
 800e240:	68bb      	ldr	r3, [r7, #8]
 800e242:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 800e244:	68bb      	ldr	r3, [r7, #8]
 800e246:	785b      	ldrb	r3, [r3, #1]
 800e248:	4618      	mov	r0, r3
 800e24a:	f000 fad1 	bl	800e7f0 <RTC_Bcd2ToByte>
 800e24e:	4603      	mov	r3, r0
 800e250:	461a      	mov	r2, r3
 800e252:	68bb      	ldr	r3, [r7, #8]
 800e254:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 800e256:	68bb      	ldr	r3, [r7, #8]
 800e258:	789b      	ldrb	r3, [r3, #2]
 800e25a:	4618      	mov	r0, r3
 800e25c:	f000 fac8 	bl	800e7f0 <RTC_Bcd2ToByte>
 800e260:	4603      	mov	r3, r0
 800e262:	461a      	mov	r2, r3
 800e264:	68bb      	ldr	r3, [r7, #8]
 800e266:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 800e268:	2300      	movs	r3, #0
}
 800e26a:	4618      	mov	r0, r3
 800e26c:	3718      	adds	r7, #24
 800e26e:	46bd      	mov	sp, r7
 800e270:	bd80      	pop	{r7, pc}

0800e272 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800e272:	b590      	push	{r4, r7, lr}
 800e274:	b087      	sub	sp, #28
 800e276:	af00      	add	r7, sp, #0
 800e278:	60f8      	str	r0, [r7, #12]
 800e27a:	60b9      	str	r1, [r7, #8]
 800e27c:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800e27e:	68fb      	ldr	r3, [r7, #12]
 800e280:	f893 3020 	ldrb.w	r3, [r3, #32]
 800e284:	2b01      	cmp	r3, #1
 800e286:	d101      	bne.n	800e28c <HAL_RTC_SetDate+0x1a>
 800e288:	2302      	movs	r3, #2
 800e28a:	e075      	b.n	800e378 <HAL_RTC_SetDate+0x106>
 800e28c:	68fb      	ldr	r3, [r7, #12]
 800e28e:	2201      	movs	r2, #1
 800e290:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800e294:	68fb      	ldr	r3, [r7, #12]
 800e296:	2202      	movs	r2, #2
 800e298:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 800e29c:	687b      	ldr	r3, [r7, #4]
 800e29e:	2b00      	cmp	r3, #0
 800e2a0:	d10e      	bne.n	800e2c0 <HAL_RTC_SetDate+0x4e>
 800e2a2:	68bb      	ldr	r3, [r7, #8]
 800e2a4:	785b      	ldrb	r3, [r3, #1]
 800e2a6:	f003 0310 	and.w	r3, r3, #16
 800e2aa:	2b00      	cmp	r3, #0
 800e2ac:	d008      	beq.n	800e2c0 <HAL_RTC_SetDate+0x4e>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 800e2ae:	68bb      	ldr	r3, [r7, #8]
 800e2b0:	785b      	ldrb	r3, [r3, #1]
 800e2b2:	f023 0310 	bic.w	r3, r3, #16
 800e2b6:	b2db      	uxtb	r3, r3
 800e2b8:	330a      	adds	r3, #10
 800e2ba:	b2da      	uxtb	r2, r3
 800e2bc:	68bb      	ldr	r3, [r7, #8]
 800e2be:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 800e2c0:	687b      	ldr	r3, [r7, #4]
 800e2c2:	2b00      	cmp	r3, #0
 800e2c4:	d11c      	bne.n	800e300 <HAL_RTC_SetDate+0x8e>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 800e2c6:	68bb      	ldr	r3, [r7, #8]
 800e2c8:	78db      	ldrb	r3, [r3, #3]
 800e2ca:	4618      	mov	r0, r3
 800e2cc:	f000 fa70 	bl	800e7b0 <RTC_ByteToBcd2>
 800e2d0:	4603      	mov	r3, r0
 800e2d2:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 800e2d4:	68bb      	ldr	r3, [r7, #8]
 800e2d6:	785b      	ldrb	r3, [r3, #1]
 800e2d8:	4618      	mov	r0, r3
 800e2da:	f000 fa69 	bl	800e7b0 <RTC_ByteToBcd2>
 800e2de:	4603      	mov	r3, r0
 800e2e0:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 800e2e2:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date) << RTC_DR_DU_Pos) | \
 800e2e4:	68bb      	ldr	r3, [r7, #8]
 800e2e6:	789b      	ldrb	r3, [r3, #2]
 800e2e8:	4618      	mov	r0, r3
 800e2ea:	f000 fa61 	bl	800e7b0 <RTC_ByteToBcd2>
 800e2ee:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 800e2f0:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay << RTC_DR_WDU_Pos));
 800e2f4:	68bb      	ldr	r3, [r7, #8]
 800e2f6:	781b      	ldrb	r3, [r3, #0]
 800e2f8:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 800e2fa:	4313      	orrs	r3, r2
 800e2fc:	617b      	str	r3, [r7, #20]
 800e2fe:	e00e      	b.n	800e31e <HAL_RTC_SetDate+0xac>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 800e300:	68bb      	ldr	r3, [r7, #8]
 800e302:	78db      	ldrb	r3, [r3, #3]
 800e304:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 800e306:	68bb      	ldr	r3, [r7, #8]
 800e308:	785b      	ldrb	r3, [r3, #1]
 800e30a:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 800e30c:	4313      	orrs	r3, r2
                  (((uint32_t)sDate->Date) << RTC_DR_DU_Pos) | \
 800e30e:	68ba      	ldr	r2, [r7, #8]
 800e310:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 800e312:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 800e314:	68bb      	ldr	r3, [r7, #8]
 800e316:	781b      	ldrb	r3, [r3, #0]
 800e318:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 800e31a:	4313      	orrs	r3, r2
 800e31c:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800e31e:	68fb      	ldr	r3, [r7, #12]
 800e320:	681b      	ldr	r3, [r3, #0]
 800e322:	22ca      	movs	r2, #202	@ 0xca
 800e324:	625a      	str	r2, [r3, #36]	@ 0x24
 800e326:	68fb      	ldr	r3, [r7, #12]
 800e328:	681b      	ldr	r3, [r3, #0]
 800e32a:	2253      	movs	r2, #83	@ 0x53
 800e32c:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800e32e:	68f8      	ldr	r0, [r7, #12]
 800e330:	f000 f9cc 	bl	800e6cc <RTC_EnterInitMode>
 800e334:	4603      	mov	r3, r0
 800e336:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 800e338:	7cfb      	ldrb	r3, [r7, #19]
 800e33a:	2b00      	cmp	r3, #0
 800e33c:	d10c      	bne.n	800e358 <HAL_RTC_SetDate+0xe6>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 800e33e:	68fb      	ldr	r3, [r7, #12]
 800e340:	681a      	ldr	r2, [r3, #0]
 800e342:	697b      	ldr	r3, [r7, #20]
 800e344:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 800e348:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 800e34c:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 800e34e:	68f8      	ldr	r0, [r7, #12]
 800e350:	f000 f9f0 	bl	800e734 <RTC_ExitInitMode>
 800e354:	4603      	mov	r3, r0
 800e356:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800e358:	68fb      	ldr	r3, [r7, #12]
 800e35a:	681b      	ldr	r3, [r3, #0]
 800e35c:	22ff      	movs	r2, #255	@ 0xff
 800e35e:	625a      	str	r2, [r3, #36]	@ 0x24

  if (status == HAL_OK)
 800e360:	7cfb      	ldrb	r3, [r7, #19]
 800e362:	2b00      	cmp	r3, #0
 800e364:	d103      	bne.n	800e36e <HAL_RTC_SetDate+0xfc>
  {
    hrtc->State = HAL_RTC_STATE_READY ;
 800e366:	68fb      	ldr	r3, [r7, #12]
 800e368:	2201      	movs	r2, #1
 800e36a:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800e36e:	68fb      	ldr	r3, [r7, #12]
 800e370:	2200      	movs	r2, #0
 800e372:	f883 2020 	strb.w	r2, [r3, #32]

  return status;
 800e376:	7cfb      	ldrb	r3, [r7, #19]
}
 800e378:	4618      	mov	r0, r3
 800e37a:	371c      	adds	r7, #28
 800e37c:	46bd      	mov	sp, r7
 800e37e:	bd90      	pop	{r4, r7, pc}

0800e380 <HAL_RTC_SetAlarm_IT>:
  *             @arg RTC_FORMAT_BIN: Binary data format
  *             @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm_IT(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 800e380:	b590      	push	{r4, r7, lr}
 800e382:	b089      	sub	sp, #36	@ 0x24
 800e384:	af00      	add	r7, sp, #0
 800e386:	60f8      	str	r0, [r7, #12]
 800e388:	60b9      	str	r1, [r7, #8]
 800e38a:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_ALARM_DATE_WEEKDAY_SEL(sAlarm->AlarmDateWeekDaySel));
  assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(sAlarm->AlarmTime.SubSeconds));
  assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(sAlarm->AlarmSubSecondMask));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800e38c:	68fb      	ldr	r3, [r7, #12]
 800e38e:	f893 3020 	ldrb.w	r3, [r3, #32]
 800e392:	2b01      	cmp	r3, #1
 800e394:	d101      	bne.n	800e39a <HAL_RTC_SetAlarm_IT+0x1a>
 800e396:	2302      	movs	r3, #2
 800e398:	e127      	b.n	800e5ea <HAL_RTC_SetAlarm_IT+0x26a>
 800e39a:	68fb      	ldr	r3, [r7, #12]
 800e39c:	2201      	movs	r2, #1
 800e39e:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800e3a2:	68fb      	ldr	r3, [r7, #12]
 800e3a4:	2202      	movs	r2, #2
 800e3a6:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  if (Format == RTC_FORMAT_BIN)
 800e3aa:	687b      	ldr	r3, [r7, #4]
 800e3ac:	2b00      	cmp	r3, #0
 800e3ae:	d137      	bne.n	800e420 <HAL_RTC_SetAlarm_IT+0xa0>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800e3b0:	68fb      	ldr	r3, [r7, #12]
 800e3b2:	681b      	ldr	r3, [r3, #0]
 800e3b4:	689b      	ldr	r3, [r3, #8]
 800e3b6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800e3ba:	2b00      	cmp	r3, #0
 800e3bc:	d102      	bne.n	800e3c4 <HAL_RTC_SetAlarm_IT+0x44>
      assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 800e3be:	68bb      	ldr	r3, [r7, #8]
 800e3c0:	2200      	movs	r2, #0
 800e3c2:	70da      	strb	r2, [r3, #3]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
    }

    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 800e3c4:	68bb      	ldr	r3, [r7, #8]
 800e3c6:	781b      	ldrb	r3, [r3, #0]
 800e3c8:	4618      	mov	r0, r3
 800e3ca:	f000 f9f1 	bl	800e7b0 <RTC_ByteToBcd2>
 800e3ce:	4603      	mov	r3, r0
 800e3d0:	041c      	lsls	r4, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 800e3d2:	68bb      	ldr	r3, [r7, #8]
 800e3d4:	785b      	ldrb	r3, [r3, #1]
 800e3d6:	4618      	mov	r0, r3
 800e3d8:	f000 f9ea 	bl	800e7b0 <RTC_ByteToBcd2>
 800e3dc:	4603      	mov	r3, r0
 800e3de:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 800e3e0:	431c      	orrs	r4, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 800e3e2:	68bb      	ldr	r3, [r7, #8]
 800e3e4:	789b      	ldrb	r3, [r3, #2]
 800e3e6:	4618      	mov	r0, r3
 800e3e8:	f000 f9e2 	bl	800e7b0 <RTC_ByteToBcd2>
 800e3ec:	4603      	mov	r3, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 800e3ee:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 800e3f2:	68bb      	ldr	r3, [r7, #8]
 800e3f4:	78db      	ldrb	r3, [r3, #3]
 800e3f6:	059b      	lsls	r3, r3, #22
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 800e3f8:	ea42 0403 	orr.w	r4, r2, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 800e3fc:	68bb      	ldr	r3, [r7, #8]
 800e3fe:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800e402:	4618      	mov	r0, r3
 800e404:	f000 f9d4 	bl	800e7b0 <RTC_ByteToBcd2>
 800e408:	4603      	mov	r3, r0
 800e40a:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 800e40c:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 800e410:	68bb      	ldr	r3, [r7, #8]
 800e412:	6a1b      	ldr	r3, [r3, #32]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 800e414:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 800e416:	68bb      	ldr	r3, [r7, #8]
 800e418:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 800e41a:	4313      	orrs	r3, r2
 800e41c:	61fb      	str	r3, [r7, #28]
 800e41e:	e023      	b.n	800e468 <HAL_RTC_SetAlarm_IT+0xe8>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800e420:	68fb      	ldr	r3, [r7, #12]
 800e422:	681b      	ldr	r3, [r3, #0]
 800e424:	689b      	ldr	r3, [r3, #8]
 800e426:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800e42a:	2b00      	cmp	r3, #0
 800e42c:	d102      	bne.n	800e434 <HAL_RTC_SetAlarm_IT+0xb4>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 800e42e:	68bb      	ldr	r3, [r7, #8]
 800e430:	2200      	movs	r2, #0
 800e432:	70da      	strb	r2, [r3, #3]
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
    }

#endif /* USE_FULL_ASSERT */
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 800e434:	68bb      	ldr	r3, [r7, #8]
 800e436:	781b      	ldrb	r3, [r3, #0]
 800e438:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 800e43a:	68bb      	ldr	r3, [r7, #8]
 800e43c:	785b      	ldrb	r3, [r3, #1]
 800e43e:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 800e440:	4313      	orrs	r3, r2
              ((uint32_t)(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 800e442:	68ba      	ldr	r2, [r7, #8]
 800e444:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 800e446:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 800e448:	68bb      	ldr	r3, [r7, #8]
 800e44a:	78db      	ldrb	r3, [r3, #3]
 800e44c:	059b      	lsls	r3, r3, #22
              ((uint32_t)(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 800e44e:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 800e450:	68bb      	ldr	r3, [r7, #8]
 800e452:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800e456:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 800e458:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 800e45a:	68bb      	ldr	r3, [r7, #8]
 800e45c:	6a1b      	ldr	r3, [r3, #32]
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 800e45e:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 800e460:	68bb      	ldr	r3, [r7, #8]
 800e462:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 800e464:	4313      	orrs	r3, r2
 800e466:	61fb      	str	r3, [r7, #28]
  }
  /* Configure the Alarm A or Alarm B Sub Second registers */
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | (uint32_t)(sAlarm->AlarmSubSecondMask));
 800e468:	68bb      	ldr	r3, [r7, #8]
 800e46a:	685a      	ldr	r2, [r3, #4]
 800e46c:	68bb      	ldr	r3, [r7, #8]
 800e46e:	69db      	ldr	r3, [r3, #28]
 800e470:	4313      	orrs	r3, r2
 800e472:	61bb      	str	r3, [r7, #24]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800e474:	68fb      	ldr	r3, [r7, #12]
 800e476:	681b      	ldr	r3, [r3, #0]
 800e478:	22ca      	movs	r2, #202	@ 0xca
 800e47a:	625a      	str	r2, [r3, #36]	@ 0x24
 800e47c:	68fb      	ldr	r3, [r7, #12]
 800e47e:	681b      	ldr	r3, [r3, #0]
 800e480:	2253      	movs	r2, #83	@ 0x53
 800e482:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Configure the Alarm register */
  if (sAlarm->Alarm == RTC_ALARM_A)
 800e484:	68bb      	ldr	r3, [r7, #8]
 800e486:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e488:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800e48c:	d14a      	bne.n	800e524 <HAL_RTC_SetAlarm_IT+0x1a4>
  {
    /* Disable the Alarm A interrupt */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 800e48e:	68fb      	ldr	r3, [r7, #12]
 800e490:	681b      	ldr	r3, [r3, #0]
 800e492:	689a      	ldr	r2, [r3, #8]
 800e494:	68fb      	ldr	r3, [r7, #12]
 800e496:	681b      	ldr	r3, [r3, #0]
 800e498:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800e49c:	609a      	str	r2, [r3, #8]

    /* Clear flag alarm A */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 800e49e:	68fb      	ldr	r3, [r7, #12]
 800e4a0:	681b      	ldr	r3, [r3, #0]
 800e4a2:	68db      	ldr	r3, [r3, #12]
 800e4a4:	b2da      	uxtb	r2, r3
 800e4a6:	68fb      	ldr	r3, [r7, #12]
 800e4a8:	681b      	ldr	r3, [r3, #0]
 800e4aa:	f462 72c0 	orn	r2, r2, #384	@ 0x180
 800e4ae:	60da      	str	r2, [r3, #12]

#if defined (RTC_FLAG_ALRAWF)
    uint32_t tickstart = HAL_GetTick();
 800e4b0:	f7fa fe08 	bl	80090c4 <HAL_GetTick>
 800e4b4:	6138      	str	r0, [r7, #16]
    /* Wait till RTC ALRAWF flag is set and if Time out is reached exit */
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 800e4b6:	e015      	b.n	800e4e4 <HAL_RTC_SetAlarm_IT+0x164>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800e4b8:	f7fa fe04 	bl	80090c4 <HAL_GetTick>
 800e4bc:	4602      	mov	r2, r0
 800e4be:	693b      	ldr	r3, [r7, #16]
 800e4c0:	1ad3      	subs	r3, r2, r3
 800e4c2:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800e4c6:	d90d      	bls.n	800e4e4 <HAL_RTC_SetAlarm_IT+0x164>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800e4c8:	68fb      	ldr	r3, [r7, #12]
 800e4ca:	681b      	ldr	r3, [r3, #0]
 800e4cc:	22ff      	movs	r2, #255	@ 0xff
 800e4ce:	625a      	str	r2, [r3, #36]	@ 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800e4d0:	68fb      	ldr	r3, [r7, #12]
 800e4d2:	2203      	movs	r2, #3
 800e4d4:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800e4d8:	68fb      	ldr	r3, [r7, #12]
 800e4da:	2200      	movs	r2, #0
 800e4dc:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_TIMEOUT;
 800e4e0:	2303      	movs	r3, #3
 800e4e2:	e082      	b.n	800e5ea <HAL_RTC_SetAlarm_IT+0x26a>
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 800e4e4:	68fb      	ldr	r3, [r7, #12]
 800e4e6:	681b      	ldr	r3, [r3, #0]
 800e4e8:	68db      	ldr	r3, [r3, #12]
 800e4ea:	f003 0301 	and.w	r3, r3, #1
 800e4ee:	2b00      	cmp	r3, #0
 800e4f0:	d0e2      	beq.n	800e4b8 <HAL_RTC_SetAlarm_IT+0x138>
      }
    }
#endif

    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 800e4f2:	68fb      	ldr	r3, [r7, #12]
 800e4f4:	681b      	ldr	r3, [r3, #0]
 800e4f6:	69fa      	ldr	r2, [r7, #28]
 800e4f8:	61da      	str	r2, [r3, #28]
    /* Configure the Alarm A Sub Second register */
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 800e4fa:	68fb      	ldr	r3, [r7, #12]
 800e4fc:	681b      	ldr	r3, [r3, #0]
 800e4fe:	69ba      	ldr	r2, [r7, #24]
 800e500:	645a      	str	r2, [r3, #68]	@ 0x44
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 800e502:	68fb      	ldr	r3, [r7, #12]
 800e504:	681b      	ldr	r3, [r3, #0]
 800e506:	689a      	ldr	r2, [r3, #8]
 800e508:	68fb      	ldr	r3, [r7, #12]
 800e50a:	681b      	ldr	r3, [r3, #0]
 800e50c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800e510:	609a      	str	r2, [r3, #8]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRA);
 800e512:	68fb      	ldr	r3, [r7, #12]
 800e514:	681b      	ldr	r3, [r3, #0]
 800e516:	689a      	ldr	r2, [r3, #8]
 800e518:	68fb      	ldr	r3, [r7, #12]
 800e51a:	681b      	ldr	r3, [r3, #0]
 800e51c:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800e520:	609a      	str	r2, [r3, #8]
 800e522:	e049      	b.n	800e5b8 <HAL_RTC_SetAlarm_IT+0x238>
  }
  else
  {
    /* Disable the Alarm B interrupt */
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 800e524:	68fb      	ldr	r3, [r7, #12]
 800e526:	681b      	ldr	r3, [r3, #0]
 800e528:	689a      	ldr	r2, [r3, #8]
 800e52a:	68fb      	ldr	r3, [r7, #12]
 800e52c:	681b      	ldr	r3, [r3, #0]
 800e52e:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 800e532:	609a      	str	r2, [r3, #8]

    /* Clear flag alarm B */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 800e534:	68fb      	ldr	r3, [r7, #12]
 800e536:	681b      	ldr	r3, [r3, #0]
 800e538:	68db      	ldr	r3, [r3, #12]
 800e53a:	b2da      	uxtb	r2, r3
 800e53c:	68fb      	ldr	r3, [r7, #12]
 800e53e:	681b      	ldr	r3, [r3, #0]
 800e540:	f462 7220 	orn	r2, r2, #640	@ 0x280
 800e544:	60da      	str	r2, [r3, #12]

#if defined (RTC_FLAG_ALRBWF)
    uint32_t tickstart = HAL_GetTick();
 800e546:	f7fa fdbd 	bl	80090c4 <HAL_GetTick>
 800e54a:	6178      	str	r0, [r7, #20]
    /* Wait till RTC ALRBWF flag is set and if Time out is reached exit */
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 800e54c:	e015      	b.n	800e57a <HAL_RTC_SetAlarm_IT+0x1fa>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800e54e:	f7fa fdb9 	bl	80090c4 <HAL_GetTick>
 800e552:	4602      	mov	r2, r0
 800e554:	697b      	ldr	r3, [r7, #20]
 800e556:	1ad3      	subs	r3, r2, r3
 800e558:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800e55c:	d90d      	bls.n	800e57a <HAL_RTC_SetAlarm_IT+0x1fa>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800e55e:	68fb      	ldr	r3, [r7, #12]
 800e560:	681b      	ldr	r3, [r3, #0]
 800e562:	22ff      	movs	r2, #255	@ 0xff
 800e564:	625a      	str	r2, [r3, #36]	@ 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800e566:	68fb      	ldr	r3, [r7, #12]
 800e568:	2203      	movs	r2, #3
 800e56a:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800e56e:	68fb      	ldr	r3, [r7, #12]
 800e570:	2200      	movs	r2, #0
 800e572:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_TIMEOUT;
 800e576:	2303      	movs	r3, #3
 800e578:	e037      	b.n	800e5ea <HAL_RTC_SetAlarm_IT+0x26a>
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 800e57a:	68fb      	ldr	r3, [r7, #12]
 800e57c:	681b      	ldr	r3, [r3, #0]
 800e57e:	68db      	ldr	r3, [r3, #12]
 800e580:	f003 0302 	and.w	r3, r3, #2
 800e584:	2b00      	cmp	r3, #0
 800e586:	d0e2      	beq.n	800e54e <HAL_RTC_SetAlarm_IT+0x1ce>
      }
    }
#endif

    hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 800e588:	68fb      	ldr	r3, [r7, #12]
 800e58a:	681b      	ldr	r3, [r3, #0]
 800e58c:	69fa      	ldr	r2, [r7, #28]
 800e58e:	621a      	str	r2, [r3, #32]
    /* Configure the Alarm B Sub Second register */
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 800e590:	68fb      	ldr	r3, [r7, #12]
 800e592:	681b      	ldr	r3, [r3, #0]
 800e594:	69ba      	ldr	r2, [r7, #24]
 800e596:	649a      	str	r2, [r3, #72]	@ 0x48
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMB_ENABLE(hrtc);
 800e598:	68fb      	ldr	r3, [r7, #12]
 800e59a:	681b      	ldr	r3, [r3, #0]
 800e59c:	689a      	ldr	r2, [r3, #8]
 800e59e:	68fb      	ldr	r3, [r7, #12]
 800e5a0:	681b      	ldr	r3, [r3, #0]
 800e5a2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800e5a6:	609a      	str	r2, [r3, #8]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRB);
 800e5a8:	68fb      	ldr	r3, [r7, #12]
 800e5aa:	681b      	ldr	r3, [r3, #0]
 800e5ac:	689a      	ldr	r2, [r3, #8]
 800e5ae:	68fb      	ldr	r3, [r7, #12]
 800e5b0:	681b      	ldr	r3, [r3, #0]
 800e5b2:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800e5b6:	609a      	str	r2, [r3, #8]
  }

  /* RTC Alarm Interrupt Configuration: EXTI configuration */
  __HAL_RTC_ALARM_EXTI_ENABLE_IT();
 800e5b8:	4b0e      	ldr	r3, [pc, #56]	@ (800e5f4 <HAL_RTC_SetAlarm_IT+0x274>)
 800e5ba:	681b      	ldr	r3, [r3, #0]
 800e5bc:	4a0d      	ldr	r2, [pc, #52]	@ (800e5f4 <HAL_RTC_SetAlarm_IT+0x274>)
 800e5be:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800e5c2:	6013      	str	r3, [r2, #0]
  __HAL_RTC_ALARM_EXTI_ENABLE_RISING_EDGE();
 800e5c4:	4b0b      	ldr	r3, [pc, #44]	@ (800e5f4 <HAL_RTC_SetAlarm_IT+0x274>)
 800e5c6:	689b      	ldr	r3, [r3, #8]
 800e5c8:	4a0a      	ldr	r2, [pc, #40]	@ (800e5f4 <HAL_RTC_SetAlarm_IT+0x274>)
 800e5ca:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800e5ce:	6093      	str	r3, [r2, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800e5d0:	68fb      	ldr	r3, [r7, #12]
 800e5d2:	681b      	ldr	r3, [r3, #0]
 800e5d4:	22ff      	movs	r2, #255	@ 0xff
 800e5d6:	625a      	str	r2, [r3, #36]	@ 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 800e5d8:	68fb      	ldr	r3, [r7, #12]
 800e5da:	2201      	movs	r2, #1
 800e5dc:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800e5e0:	68fb      	ldr	r3, [r7, #12]
 800e5e2:	2200      	movs	r2, #0
 800e5e4:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 800e5e8:	2300      	movs	r3, #0
}
 800e5ea:	4618      	mov	r0, r3
 800e5ec:	3724      	adds	r7, #36	@ 0x24
 800e5ee:	46bd      	mov	sp, r7
 800e5f0:	bd90      	pop	{r4, r7, pc}
 800e5f2:	bf00      	nop
 800e5f4:	40010400 	.word	0x40010400

0800e5f8 <HAL_RTC_AlarmIRQHandler>:
  * @brief  Handle Alarm interrupt request.
  * @param  hrtc RTC handle
  * @retval None
  */
void HAL_RTC_AlarmIRQHandler(RTC_HandleTypeDef *hrtc)
{
 800e5f8:	b580      	push	{r7, lr}
 800e5fa:	b082      	sub	sp, #8
 800e5fc:	af00      	add	r7, sp, #0
 800e5fe:	6078      	str	r0, [r7, #4]
  /* Clear the EXTI's line Flag for RTC Alarm */
  __HAL_RTC_ALARM_EXTI_CLEAR_FLAG();
 800e600:	4b1f      	ldr	r3, [pc, #124]	@ (800e680 <HAL_RTC_AlarmIRQHandler+0x88>)
 800e602:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 800e606:	615a      	str	r2, [r3, #20]
  }

#else /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */

  /* Get the AlarmA interrupt source enable status */
  if (__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRA) != 0U)
 800e608:	687b      	ldr	r3, [r7, #4]
 800e60a:	681b      	ldr	r3, [r3, #0]
 800e60c:	689b      	ldr	r3, [r3, #8]
 800e60e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800e612:	2b00      	cmp	r3, #0
 800e614:	d012      	beq.n	800e63c <HAL_RTC_AlarmIRQHandler+0x44>
  {
    /* Get the pending status of the AlarmA Interrupt */
    if (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAF) != 0U)
 800e616:	687b      	ldr	r3, [r7, #4]
 800e618:	681b      	ldr	r3, [r3, #0]
 800e61a:	68db      	ldr	r3, [r3, #12]
 800e61c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800e620:	2b00      	cmp	r3, #0
 800e622:	d00b      	beq.n	800e63c <HAL_RTC_AlarmIRQHandler+0x44>
    {
      /* Clear the AlarmA interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 800e624:	687b      	ldr	r3, [r7, #4]
 800e626:	681b      	ldr	r3, [r3, #0]
 800e628:	68db      	ldr	r3, [r3, #12]
 800e62a:	b2da      	uxtb	r2, r3
 800e62c:	687b      	ldr	r3, [r7, #4]
 800e62e:	681b      	ldr	r3, [r3, #0]
 800e630:	f462 72c0 	orn	r2, r2, #384	@ 0x180
 800e634:	60da      	str	r2, [r3, #12]

#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->AlarmAEventCallback(hrtc);
#else
      HAL_RTC_AlarmAEventCallback(hrtc);
 800e636:	6878      	ldr	r0, [r7, #4]
 800e638:	f7f3 fa6a 	bl	8001b10 <HAL_RTC_AlarmAEventCallback>
#endif
    }
  }

  /* Get the AlarmB interrupt source enable status */
  if (__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRB) != 0U)
 800e63c:	687b      	ldr	r3, [r7, #4]
 800e63e:	681b      	ldr	r3, [r3, #0]
 800e640:	689b      	ldr	r3, [r3, #8]
 800e642:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800e646:	2b00      	cmp	r3, #0
 800e648:	d012      	beq.n	800e670 <HAL_RTC_AlarmIRQHandler+0x78>
  {
    /* Get the pending status of the AlarmB Interrupt */
    if (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBF) != 0U)
 800e64a:	687b      	ldr	r3, [r7, #4]
 800e64c:	681b      	ldr	r3, [r3, #0]
 800e64e:	68db      	ldr	r3, [r3, #12]
 800e650:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800e654:	2b00      	cmp	r3, #0
 800e656:	d00b      	beq.n	800e670 <HAL_RTC_AlarmIRQHandler+0x78>
    {
      /* Clear the AlarmB interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 800e658:	687b      	ldr	r3, [r7, #4]
 800e65a:	681b      	ldr	r3, [r3, #0]
 800e65c:	68db      	ldr	r3, [r3, #12]
 800e65e:	b2da      	uxtb	r2, r3
 800e660:	687b      	ldr	r3, [r7, #4]
 800e662:	681b      	ldr	r3, [r3, #0]
 800e664:	f462 7220 	orn	r2, r2, #640	@ 0x280
 800e668:	60da      	str	r2, [r3, #12]

#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->AlarmBEventCallback(hrtc);
#else
      HAL_RTCEx_AlarmBEventCallback(hrtc);
 800e66a:	6878      	ldr	r0, [r7, #4]
 800e66c:	f000 f8da 	bl	800e824 <HAL_RTCEx_AlarmBEventCallback>
    }
  }
#endif /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 800e670:	687b      	ldr	r3, [r7, #4]
 800e672:	2201      	movs	r2, #1
 800e674:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
}
 800e678:	bf00      	nop
 800e67a:	3708      	adds	r7, #8
 800e67c:	46bd      	mov	sp, r7
 800e67e:	bd80      	pop	{r7, pc}
 800e680:	40010400 	.word	0x40010400

0800e684 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 800e684:	b580      	push	{r7, lr}
 800e686:	b084      	sub	sp, #16
 800e688:	af00      	add	r7, sp, #0
 800e68a:	6078      	str	r0, [r7, #4]
#elif defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  /* Clear RSF flag (use a read-modify-write sequence to preserve the other read-write bits) */
  hrtc->Instance->ICSR &= (uint32_t)RTC_RSF_MASK;
#else
  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 800e68c:	687b      	ldr	r3, [r7, #4]
 800e68e:	681b      	ldr	r3, [r3, #0]
 800e690:	4a0d      	ldr	r2, [pc, #52]	@ (800e6c8 <HAL_RTC_WaitForSynchro+0x44>)
 800e692:	60da      	str	r2, [r3, #12]
#endif

  tickstart = HAL_GetTick();
 800e694:	f7fa fd16 	bl	80090c4 <HAL_GetTick>
 800e698:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  while ((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
#else
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800e69a:	e009      	b.n	800e6b0 <HAL_RTC_WaitForSynchro+0x2c>
#endif
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800e69c:	f7fa fd12 	bl	80090c4 <HAL_GetTick>
 800e6a0:	4602      	mov	r2, r0
 800e6a2:	68fb      	ldr	r3, [r7, #12]
 800e6a4:	1ad3      	subs	r3, r2, r3
 800e6a6:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800e6aa:	d901      	bls.n	800e6b0 <HAL_RTC_WaitForSynchro+0x2c>
    {
      return HAL_TIMEOUT;
 800e6ac:	2303      	movs	r3, #3
 800e6ae:	e007      	b.n	800e6c0 <HAL_RTC_WaitForSynchro+0x3c>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800e6b0:	687b      	ldr	r3, [r7, #4]
 800e6b2:	681b      	ldr	r3, [r3, #0]
 800e6b4:	68db      	ldr	r3, [r3, #12]
 800e6b6:	f003 0320 	and.w	r3, r3, #32
 800e6ba:	2b00      	cmp	r3, #0
 800e6bc:	d0ee      	beq.n	800e69c <HAL_RTC_WaitForSynchro+0x18>
    }
  }

  return HAL_OK;
 800e6be:	2300      	movs	r3, #0
}
 800e6c0:	4618      	mov	r0, r3
 800e6c2:	3710      	adds	r7, #16
 800e6c4:	46bd      	mov	sp, r7
 800e6c6:	bd80      	pop	{r7, pc}
 800e6c8:	0003ff5f 	.word	0x0003ff5f

0800e6cc <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 800e6cc:	b580      	push	{r7, lr}
 800e6ce:	b084      	sub	sp, #16
 800e6d0:	af00      	add	r7, sp, #0
 800e6d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800e6d4:	2300      	movs	r3, #0
 800e6d6:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
      }
    }
  }
#else /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 800e6d8:	687b      	ldr	r3, [r7, #4]
 800e6da:	681b      	ldr	r3, [r3, #0]
 800e6dc:	68db      	ldr	r3, [r3, #12]
 800e6de:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800e6e2:	2b00      	cmp	r3, #0
 800e6e4:	d120      	bne.n	800e728 <RTC_EnterInitMode+0x5c>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 800e6e6:	687b      	ldr	r3, [r7, #4]
 800e6e8:	681b      	ldr	r3, [r3, #0]
 800e6ea:	f04f 32ff 	mov.w	r2, #4294967295
 800e6ee:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 800e6f0:	f7fa fce8 	bl	80090c4 <HAL_GetTick>
 800e6f4:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 800e6f6:	e00d      	b.n	800e714 <RTC_EnterInitMode+0x48>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 800e6f8:	f7fa fce4 	bl	80090c4 <HAL_GetTick>
 800e6fc:	4602      	mov	r2, r0
 800e6fe:	68bb      	ldr	r3, [r7, #8]
 800e700:	1ad3      	subs	r3, r2, r3
 800e702:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800e706:	d905      	bls.n	800e714 <RTC_EnterInitMode+0x48>
      {
        status = HAL_TIMEOUT;
 800e708:	2303      	movs	r3, #3
 800e70a:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800e70c:	687b      	ldr	r3, [r7, #4]
 800e70e:	2203      	movs	r2, #3
 800e710:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 800e714:	687b      	ldr	r3, [r7, #4]
 800e716:	681b      	ldr	r3, [r3, #0]
 800e718:	68db      	ldr	r3, [r3, #12]
 800e71a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800e71e:	2b00      	cmp	r3, #0
 800e720:	d102      	bne.n	800e728 <RTC_EnterInitMode+0x5c>
 800e722:	7bfb      	ldrb	r3, [r7, #15]
 800e724:	2b03      	cmp	r3, #3
 800e726:	d1e7      	bne.n	800e6f8 <RTC_EnterInitMode+0x2c>
      }
    }
  }
#endif /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */

  return status;
 800e728:	7bfb      	ldrb	r3, [r7, #15]
}
 800e72a:	4618      	mov	r0, r3
 800e72c:	3710      	adds	r7, #16
 800e72e:	46bd      	mov	sp, r7
 800e730:	bd80      	pop	{r7, pc}
	...

0800e734 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 800e734:	b580      	push	{r7, lr}
 800e736:	b084      	sub	sp, #16
 800e738:	af00      	add	r7, sp, #0
 800e73a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800e73c:	2300      	movs	r3, #0
 800e73e:	73fb      	strb	r3, [r7, #15]
  /* Exit Initialization mode */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined(STM32L4P5xx) || defined(STM32L4Q5xx)
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
#else
  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ISR, RTC_ISR_INIT);
 800e740:	4b1a      	ldr	r3, [pc, #104]	@ (800e7ac <RTC_ExitInitMode+0x78>)
 800e742:	68db      	ldr	r3, [r3, #12]
 800e744:	4a19      	ldr	r2, [pc, #100]	@ (800e7ac <RTC_ExitInitMode+0x78>)
 800e746:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800e74a:	60d3      	str	r3, [r2, #12]
#endif

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 800e74c:	4b17      	ldr	r3, [pc, #92]	@ (800e7ac <RTC_ExitInitMode+0x78>)
 800e74e:	689b      	ldr	r3, [r3, #8]
 800e750:	f003 0320 	and.w	r3, r3, #32
 800e754:	2b00      	cmp	r3, #0
 800e756:	d10c      	bne.n	800e772 <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800e758:	6878      	ldr	r0, [r7, #4]
 800e75a:	f7ff ff93 	bl	800e684 <HAL_RTC_WaitForSynchro>
 800e75e:	4603      	mov	r3, r0
 800e760:	2b00      	cmp	r3, #0
 800e762:	d01e      	beq.n	800e7a2 <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800e764:	687b      	ldr	r3, [r7, #4]
 800e766:	2203      	movs	r2, #3
 800e768:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
      status = HAL_TIMEOUT;
 800e76c:	2303      	movs	r3, #3
 800e76e:	73fb      	strb	r3, [r7, #15]
 800e770:	e017      	b.n	800e7a2 <RTC_ExitInitMode+0x6e>
    }
  }
  else /* WA 2.9.6 Calendar initialization may fail in case of consecutive INIT mode entry */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800e772:	4b0e      	ldr	r3, [pc, #56]	@ (800e7ac <RTC_ExitInitMode+0x78>)
 800e774:	689b      	ldr	r3, [r3, #8]
 800e776:	4a0d      	ldr	r2, [pc, #52]	@ (800e7ac <RTC_ExitInitMode+0x78>)
 800e778:	f023 0320 	bic.w	r3, r3, #32
 800e77c:	6093      	str	r3, [r2, #8]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800e77e:	6878      	ldr	r0, [r7, #4]
 800e780:	f7ff ff80 	bl	800e684 <HAL_RTC_WaitForSynchro>
 800e784:	4603      	mov	r3, r0
 800e786:	2b00      	cmp	r3, #0
 800e788:	d005      	beq.n	800e796 <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800e78a:	687b      	ldr	r3, [r7, #4]
 800e78c:	2203      	movs	r2, #3
 800e78e:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
      status = HAL_TIMEOUT;
 800e792:	2303      	movs	r3, #3
 800e794:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800e796:	4b05      	ldr	r3, [pc, #20]	@ (800e7ac <RTC_ExitInitMode+0x78>)
 800e798:	689b      	ldr	r3, [r3, #8]
 800e79a:	4a04      	ldr	r2, [pc, #16]	@ (800e7ac <RTC_ExitInitMode+0x78>)
 800e79c:	f043 0320 	orr.w	r3, r3, #32
 800e7a0:	6093      	str	r3, [r2, #8]
  }

  return status;
 800e7a2:	7bfb      	ldrb	r3, [r7, #15]
}
 800e7a4:	4618      	mov	r0, r3
 800e7a6:	3710      	adds	r7, #16
 800e7a8:	46bd      	mov	sp, r7
 800e7aa:	bd80      	pop	{r7, pc}
 800e7ac:	40002800 	.word	0x40002800

0800e7b0 <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 800e7b0:	b480      	push	{r7}
 800e7b2:	b085      	sub	sp, #20
 800e7b4:	af00      	add	r7, sp, #0
 800e7b6:	4603      	mov	r3, r0
 800e7b8:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 800e7ba:	2300      	movs	r3, #0
 800e7bc:	60fb      	str	r3, [r7, #12]
  uint8_t temp = Value;
 800e7be:	79fb      	ldrb	r3, [r7, #7]
 800e7c0:	72fb      	strb	r3, [r7, #11]

  while (temp >= 10U)
 800e7c2:	e005      	b.n	800e7d0 <RTC_ByteToBcd2+0x20>
  {
    bcdhigh++;
 800e7c4:	68fb      	ldr	r3, [r7, #12]
 800e7c6:	3301      	adds	r3, #1
 800e7c8:	60fb      	str	r3, [r7, #12]
    temp -= 10U;
 800e7ca:	7afb      	ldrb	r3, [r7, #11]
 800e7cc:	3b0a      	subs	r3, #10
 800e7ce:	72fb      	strb	r3, [r7, #11]
  while (temp >= 10U)
 800e7d0:	7afb      	ldrb	r3, [r7, #11]
 800e7d2:	2b09      	cmp	r3, #9
 800e7d4:	d8f6      	bhi.n	800e7c4 <RTC_ByteToBcd2+0x14>
  }

  return ((uint8_t)(bcdhigh << 4U) | temp);
 800e7d6:	68fb      	ldr	r3, [r7, #12]
 800e7d8:	b2db      	uxtb	r3, r3
 800e7da:	011b      	lsls	r3, r3, #4
 800e7dc:	b2da      	uxtb	r2, r3
 800e7de:	7afb      	ldrb	r3, [r7, #11]
 800e7e0:	4313      	orrs	r3, r2
 800e7e2:	b2db      	uxtb	r3, r3
}
 800e7e4:	4618      	mov	r0, r3
 800e7e6:	3714      	adds	r7, #20
 800e7e8:	46bd      	mov	sp, r7
 800e7ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e7ee:	4770      	bx	lr

0800e7f0 <RTC_Bcd2ToByte>:
  * @brief  Convert from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 800e7f0:	b480      	push	{r7}
 800e7f2:	b085      	sub	sp, #20
 800e7f4:	af00      	add	r7, sp, #0
 800e7f6:	4603      	mov	r3, r0
 800e7f8:	71fb      	strb	r3, [r7, #7]
  uint8_t tmp;
  tmp = ((Value & 0xF0U) >> 4U) * 10U;
 800e7fa:	79fb      	ldrb	r3, [r7, #7]
 800e7fc:	091b      	lsrs	r3, r3, #4
 800e7fe:	b2db      	uxtb	r3, r3
 800e800:	461a      	mov	r2, r3
 800e802:	0092      	lsls	r2, r2, #2
 800e804:	4413      	add	r3, r2
 800e806:	005b      	lsls	r3, r3, #1
 800e808:	73fb      	strb	r3, [r7, #15]
  return (tmp + (Value & 0x0FU));
 800e80a:	79fb      	ldrb	r3, [r7, #7]
 800e80c:	f003 030f 	and.w	r3, r3, #15
 800e810:	b2da      	uxtb	r2, r3
 800e812:	7bfb      	ldrb	r3, [r7, #15]
 800e814:	4413      	add	r3, r2
 800e816:	b2db      	uxtb	r3, r3
}
 800e818:	4618      	mov	r0, r3
 800e81a:	3714      	adds	r7, #20
 800e81c:	46bd      	mov	sp, r7
 800e81e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e822:	4770      	bx	lr

0800e824 <HAL_RTCEx_AlarmBEventCallback>:
  * @brief  Alarm B callback.
  * @param  hrtc RTC handle
  * @retval None
  */
__weak void HAL_RTCEx_AlarmBEventCallback(RTC_HandleTypeDef *hrtc)
{
 800e824:	b480      	push	{r7}
 800e826:	b083      	sub	sp, #12
 800e828:	af00      	add	r7, sp, #0
 800e82a:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RTCEx_AlarmBEventCallback could be implemented in the user file
   */
}
 800e82c:	bf00      	nop
 800e82e:	370c      	adds	r7, #12
 800e830:	46bd      	mov	sp, r7
 800e832:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e836:	4770      	bx	lr

0800e838 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800e838:	b580      	push	{r7, lr}
 800e83a:	b084      	sub	sp, #16
 800e83c:	af00      	add	r7, sp, #0
 800e83e:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800e840:	687b      	ldr	r3, [r7, #4]
 800e842:	2b00      	cmp	r3, #0
 800e844:	d101      	bne.n	800e84a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800e846:	2301      	movs	r3, #1
 800e848:	e095      	b.n	800e976 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800e84a:	687b      	ldr	r3, [r7, #4]
 800e84c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e84e:	2b00      	cmp	r3, #0
 800e850:	d108      	bne.n	800e864 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800e852:	687b      	ldr	r3, [r7, #4]
 800e854:	685b      	ldr	r3, [r3, #4]
 800e856:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800e85a:	d009      	beq.n	800e870 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800e85c:	687b      	ldr	r3, [r7, #4]
 800e85e:	2200      	movs	r2, #0
 800e860:	61da      	str	r2, [r3, #28]
 800e862:	e005      	b.n	800e870 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800e864:	687b      	ldr	r3, [r7, #4]
 800e866:	2200      	movs	r2, #0
 800e868:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800e86a:	687b      	ldr	r3, [r7, #4]
 800e86c:	2200      	movs	r2, #0
 800e86e:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800e870:	687b      	ldr	r3, [r7, #4]
 800e872:	2200      	movs	r2, #0
 800e874:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800e876:	687b      	ldr	r3, [r7, #4]
 800e878:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800e87c:	b2db      	uxtb	r3, r3
 800e87e:	2b00      	cmp	r3, #0
 800e880:	d106      	bne.n	800e890 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800e882:	687b      	ldr	r3, [r7, #4]
 800e884:	2200      	movs	r2, #0
 800e886:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800e88a:	6878      	ldr	r0, [r7, #4]
 800e88c:	f7f6 fff0 	bl	8005870 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800e890:	687b      	ldr	r3, [r7, #4]
 800e892:	2202      	movs	r2, #2
 800e894:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800e898:	687b      	ldr	r3, [r7, #4]
 800e89a:	681b      	ldr	r3, [r3, #0]
 800e89c:	681a      	ldr	r2, [r3, #0]
 800e89e:	687b      	ldr	r3, [r7, #4]
 800e8a0:	681b      	ldr	r3, [r3, #0]
 800e8a2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800e8a6:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800e8a8:	687b      	ldr	r3, [r7, #4]
 800e8aa:	68db      	ldr	r3, [r3, #12]
 800e8ac:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800e8b0:	d902      	bls.n	800e8b8 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800e8b2:	2300      	movs	r3, #0
 800e8b4:	60fb      	str	r3, [r7, #12]
 800e8b6:	e002      	b.n	800e8be <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800e8b8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800e8bc:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800e8be:	687b      	ldr	r3, [r7, #4]
 800e8c0:	68db      	ldr	r3, [r3, #12]
 800e8c2:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 800e8c6:	d007      	beq.n	800e8d8 <HAL_SPI_Init+0xa0>
 800e8c8:	687b      	ldr	r3, [r7, #4]
 800e8ca:	68db      	ldr	r3, [r3, #12]
 800e8cc:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800e8d0:	d002      	beq.n	800e8d8 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800e8d2:	687b      	ldr	r3, [r7, #4]
 800e8d4:	2200      	movs	r2, #0
 800e8d6:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800e8d8:	687b      	ldr	r3, [r7, #4]
 800e8da:	685b      	ldr	r3, [r3, #4]
 800e8dc:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 800e8e0:	687b      	ldr	r3, [r7, #4]
 800e8e2:	689b      	ldr	r3, [r3, #8]
 800e8e4:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 800e8e8:	431a      	orrs	r2, r3
 800e8ea:	687b      	ldr	r3, [r7, #4]
 800e8ec:	691b      	ldr	r3, [r3, #16]
 800e8ee:	f003 0302 	and.w	r3, r3, #2
 800e8f2:	431a      	orrs	r2, r3
 800e8f4:	687b      	ldr	r3, [r7, #4]
 800e8f6:	695b      	ldr	r3, [r3, #20]
 800e8f8:	f003 0301 	and.w	r3, r3, #1
 800e8fc:	431a      	orrs	r2, r3
 800e8fe:	687b      	ldr	r3, [r7, #4]
 800e900:	699b      	ldr	r3, [r3, #24]
 800e902:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800e906:	431a      	orrs	r2, r3
 800e908:	687b      	ldr	r3, [r7, #4]
 800e90a:	69db      	ldr	r3, [r3, #28]
 800e90c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800e910:	431a      	orrs	r2, r3
 800e912:	687b      	ldr	r3, [r7, #4]
 800e914:	6a1b      	ldr	r3, [r3, #32]
 800e916:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800e91a:	ea42 0103 	orr.w	r1, r2, r3
 800e91e:	687b      	ldr	r3, [r7, #4]
 800e920:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e922:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 800e926:	687b      	ldr	r3, [r7, #4]
 800e928:	681b      	ldr	r3, [r3, #0]
 800e92a:	430a      	orrs	r2, r1
 800e92c:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800e92e:	687b      	ldr	r3, [r7, #4]
 800e930:	699b      	ldr	r3, [r3, #24]
 800e932:	0c1b      	lsrs	r3, r3, #16
 800e934:	f003 0204 	and.w	r2, r3, #4
 800e938:	687b      	ldr	r3, [r7, #4]
 800e93a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e93c:	f003 0310 	and.w	r3, r3, #16
 800e940:	431a      	orrs	r2, r3
 800e942:	687b      	ldr	r3, [r7, #4]
 800e944:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800e946:	f003 0308 	and.w	r3, r3, #8
 800e94a:	431a      	orrs	r2, r3
 800e94c:	687b      	ldr	r3, [r7, #4]
 800e94e:	68db      	ldr	r3, [r3, #12]
 800e950:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 800e954:	ea42 0103 	orr.w	r1, r2, r3
 800e958:	68fb      	ldr	r3, [r7, #12]
 800e95a:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 800e95e:	687b      	ldr	r3, [r7, #4]
 800e960:	681b      	ldr	r3, [r3, #0]
 800e962:	430a      	orrs	r2, r1
 800e964:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800e966:	687b      	ldr	r3, [r7, #4]
 800e968:	2200      	movs	r2, #0
 800e96a:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800e96c:	687b      	ldr	r3, [r7, #4]
 800e96e:	2201      	movs	r2, #1
 800e970:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 800e974:	2300      	movs	r3, #0
}
 800e976:	4618      	mov	r0, r3
 800e978:	3710      	adds	r7, #16
 800e97a:	46bd      	mov	sp, r7
 800e97c:	bd80      	pop	{r7, pc}

0800e97e <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800e97e:	b580      	push	{r7, lr}
 800e980:	b088      	sub	sp, #32
 800e982:	af00      	add	r7, sp, #0
 800e984:	60f8      	str	r0, [r7, #12]
 800e986:	60b9      	str	r1, [r7, #8]
 800e988:	603b      	str	r3, [r7, #0]
 800e98a:	4613      	mov	r3, r2
 800e98c:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800e98e:	f7fa fb99 	bl	80090c4 <HAL_GetTick>
 800e992:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 800e994:	88fb      	ldrh	r3, [r7, #6]
 800e996:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 800e998:	68fb      	ldr	r3, [r7, #12]
 800e99a:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800e99e:	b2db      	uxtb	r3, r3
 800e9a0:	2b01      	cmp	r3, #1
 800e9a2:	d001      	beq.n	800e9a8 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 800e9a4:	2302      	movs	r3, #2
 800e9a6:	e15c      	b.n	800ec62 <HAL_SPI_Transmit+0x2e4>
  }

  if ((pData == NULL) || (Size == 0U))
 800e9a8:	68bb      	ldr	r3, [r7, #8]
 800e9aa:	2b00      	cmp	r3, #0
 800e9ac:	d002      	beq.n	800e9b4 <HAL_SPI_Transmit+0x36>
 800e9ae:	88fb      	ldrh	r3, [r7, #6]
 800e9b0:	2b00      	cmp	r3, #0
 800e9b2:	d101      	bne.n	800e9b8 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 800e9b4:	2301      	movs	r3, #1
 800e9b6:	e154      	b.n	800ec62 <HAL_SPI_Transmit+0x2e4>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800e9b8:	68fb      	ldr	r3, [r7, #12]
 800e9ba:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 800e9be:	2b01      	cmp	r3, #1
 800e9c0:	d101      	bne.n	800e9c6 <HAL_SPI_Transmit+0x48>
 800e9c2:	2302      	movs	r3, #2
 800e9c4:	e14d      	b.n	800ec62 <HAL_SPI_Transmit+0x2e4>
 800e9c6:	68fb      	ldr	r3, [r7, #12]
 800e9c8:	2201      	movs	r2, #1
 800e9ca:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800e9ce:	68fb      	ldr	r3, [r7, #12]
 800e9d0:	2203      	movs	r2, #3
 800e9d2:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800e9d6:	68fb      	ldr	r3, [r7, #12]
 800e9d8:	2200      	movs	r2, #0
 800e9da:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 800e9dc:	68fb      	ldr	r3, [r7, #12]
 800e9de:	68ba      	ldr	r2, [r7, #8]
 800e9e0:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 800e9e2:	68fb      	ldr	r3, [r7, #12]
 800e9e4:	88fa      	ldrh	r2, [r7, #6]
 800e9e6:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 800e9e8:	68fb      	ldr	r3, [r7, #12]
 800e9ea:	88fa      	ldrh	r2, [r7, #6]
 800e9ec:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800e9ee:	68fb      	ldr	r3, [r7, #12]
 800e9f0:	2200      	movs	r2, #0
 800e9f2:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 800e9f4:	68fb      	ldr	r3, [r7, #12]
 800e9f6:	2200      	movs	r2, #0
 800e9f8:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = 0U;
 800e9fc:	68fb      	ldr	r3, [r7, #12]
 800e9fe:	2200      	movs	r2, #0
 800ea00:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxISR       = NULL;
 800ea04:	68fb      	ldr	r3, [r7, #12]
 800ea06:	2200      	movs	r2, #0
 800ea08:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->RxISR       = NULL;
 800ea0a:	68fb      	ldr	r3, [r7, #12]
 800ea0c:	2200      	movs	r2, #0
 800ea0e:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800ea10:	68fb      	ldr	r3, [r7, #12]
 800ea12:	689b      	ldr	r3, [r3, #8]
 800ea14:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800ea18:	d10f      	bne.n	800ea3a <HAL_SPI_Transmit+0xbc>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800ea1a:	68fb      	ldr	r3, [r7, #12]
 800ea1c:	681b      	ldr	r3, [r3, #0]
 800ea1e:	681a      	ldr	r2, [r3, #0]
 800ea20:	68fb      	ldr	r3, [r7, #12]
 800ea22:	681b      	ldr	r3, [r3, #0]
 800ea24:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800ea28:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800ea2a:	68fb      	ldr	r3, [r7, #12]
 800ea2c:	681b      	ldr	r3, [r3, #0]
 800ea2e:	681a      	ldr	r2, [r3, #0]
 800ea30:	68fb      	ldr	r3, [r7, #12]
 800ea32:	681b      	ldr	r3, [r3, #0]
 800ea34:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800ea38:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800ea3a:	68fb      	ldr	r3, [r7, #12]
 800ea3c:	681b      	ldr	r3, [r3, #0]
 800ea3e:	681b      	ldr	r3, [r3, #0]
 800ea40:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ea44:	2b40      	cmp	r3, #64	@ 0x40
 800ea46:	d007      	beq.n	800ea58 <HAL_SPI_Transmit+0xda>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800ea48:	68fb      	ldr	r3, [r7, #12]
 800ea4a:	681b      	ldr	r3, [r3, #0]
 800ea4c:	681a      	ldr	r2, [r3, #0]
 800ea4e:	68fb      	ldr	r3, [r7, #12]
 800ea50:	681b      	ldr	r3, [r3, #0]
 800ea52:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800ea56:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800ea58:	68fb      	ldr	r3, [r7, #12]
 800ea5a:	68db      	ldr	r3, [r3, #12]
 800ea5c:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800ea60:	d952      	bls.n	800eb08 <HAL_SPI_Transmit+0x18a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800ea62:	68fb      	ldr	r3, [r7, #12]
 800ea64:	685b      	ldr	r3, [r3, #4]
 800ea66:	2b00      	cmp	r3, #0
 800ea68:	d002      	beq.n	800ea70 <HAL_SPI_Transmit+0xf2>
 800ea6a:	8b7b      	ldrh	r3, [r7, #26]
 800ea6c:	2b01      	cmp	r3, #1
 800ea6e:	d145      	bne.n	800eafc <HAL_SPI_Transmit+0x17e>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800ea70:	68fb      	ldr	r3, [r7, #12]
 800ea72:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ea74:	881a      	ldrh	r2, [r3, #0]
 800ea76:	68fb      	ldr	r3, [r7, #12]
 800ea78:	681b      	ldr	r3, [r3, #0]
 800ea7a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800ea7c:	68fb      	ldr	r3, [r7, #12]
 800ea7e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ea80:	1c9a      	adds	r2, r3, #2
 800ea82:	68fb      	ldr	r3, [r7, #12]
 800ea84:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 800ea86:	68fb      	ldr	r3, [r7, #12]
 800ea88:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800ea8a:	b29b      	uxth	r3, r3
 800ea8c:	3b01      	subs	r3, #1
 800ea8e:	b29a      	uxth	r2, r3
 800ea90:	68fb      	ldr	r3, [r7, #12]
 800ea92:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800ea94:	e032      	b.n	800eafc <HAL_SPI_Transmit+0x17e>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800ea96:	68fb      	ldr	r3, [r7, #12]
 800ea98:	681b      	ldr	r3, [r3, #0]
 800ea9a:	689b      	ldr	r3, [r3, #8]
 800ea9c:	f003 0302 	and.w	r3, r3, #2
 800eaa0:	2b02      	cmp	r3, #2
 800eaa2:	d112      	bne.n	800eaca <HAL_SPI_Transmit+0x14c>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800eaa4:	68fb      	ldr	r3, [r7, #12]
 800eaa6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800eaa8:	881a      	ldrh	r2, [r3, #0]
 800eaaa:	68fb      	ldr	r3, [r7, #12]
 800eaac:	681b      	ldr	r3, [r3, #0]
 800eaae:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800eab0:	68fb      	ldr	r3, [r7, #12]
 800eab2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800eab4:	1c9a      	adds	r2, r3, #2
 800eab6:	68fb      	ldr	r3, [r7, #12]
 800eab8:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 800eaba:	68fb      	ldr	r3, [r7, #12]
 800eabc:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800eabe:	b29b      	uxth	r3, r3
 800eac0:	3b01      	subs	r3, #1
 800eac2:	b29a      	uxth	r2, r3
 800eac4:	68fb      	ldr	r3, [r7, #12]
 800eac6:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800eac8:	e018      	b.n	800eafc <HAL_SPI_Transmit+0x17e>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800eaca:	f7fa fafb 	bl	80090c4 <HAL_GetTick>
 800eace:	4602      	mov	r2, r0
 800ead0:	69fb      	ldr	r3, [r7, #28]
 800ead2:	1ad3      	subs	r3, r2, r3
 800ead4:	683a      	ldr	r2, [r7, #0]
 800ead6:	429a      	cmp	r2, r3
 800ead8:	d803      	bhi.n	800eae2 <HAL_SPI_Transmit+0x164>
 800eada:	683b      	ldr	r3, [r7, #0]
 800eadc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800eae0:	d102      	bne.n	800eae8 <HAL_SPI_Transmit+0x16a>
 800eae2:	683b      	ldr	r3, [r7, #0]
 800eae4:	2b00      	cmp	r3, #0
 800eae6:	d109      	bne.n	800eafc <HAL_SPI_Transmit+0x17e>
        {
          hspi->State = HAL_SPI_STATE_READY;
 800eae8:	68fb      	ldr	r3, [r7, #12]
 800eaea:	2201      	movs	r2, #1
 800eaec:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 800eaf0:	68fb      	ldr	r3, [r7, #12]
 800eaf2:	2200      	movs	r2, #0
 800eaf4:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 800eaf8:	2303      	movs	r3, #3
 800eafa:	e0b2      	b.n	800ec62 <HAL_SPI_Transmit+0x2e4>
    while (hspi->TxXferCount > 0U)
 800eafc:	68fb      	ldr	r3, [r7, #12]
 800eafe:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800eb00:	b29b      	uxth	r3, r3
 800eb02:	2b00      	cmp	r3, #0
 800eb04:	d1c7      	bne.n	800ea96 <HAL_SPI_Transmit+0x118>
 800eb06:	e083      	b.n	800ec10 <HAL_SPI_Transmit+0x292>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800eb08:	68fb      	ldr	r3, [r7, #12]
 800eb0a:	685b      	ldr	r3, [r3, #4]
 800eb0c:	2b00      	cmp	r3, #0
 800eb0e:	d002      	beq.n	800eb16 <HAL_SPI_Transmit+0x198>
 800eb10:	8b7b      	ldrh	r3, [r7, #26]
 800eb12:	2b01      	cmp	r3, #1
 800eb14:	d177      	bne.n	800ec06 <HAL_SPI_Transmit+0x288>
    {
      if (hspi->TxXferCount > 1U)
 800eb16:	68fb      	ldr	r3, [r7, #12]
 800eb18:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800eb1a:	b29b      	uxth	r3, r3
 800eb1c:	2b01      	cmp	r3, #1
 800eb1e:	d912      	bls.n	800eb46 <HAL_SPI_Transmit+0x1c8>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800eb20:	68fb      	ldr	r3, [r7, #12]
 800eb22:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800eb24:	881a      	ldrh	r2, [r3, #0]
 800eb26:	68fb      	ldr	r3, [r7, #12]
 800eb28:	681b      	ldr	r3, [r3, #0]
 800eb2a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800eb2c:	68fb      	ldr	r3, [r7, #12]
 800eb2e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800eb30:	1c9a      	adds	r2, r3, #2
 800eb32:	68fb      	ldr	r3, [r7, #12]
 800eb34:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 800eb36:	68fb      	ldr	r3, [r7, #12]
 800eb38:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800eb3a:	b29b      	uxth	r3, r3
 800eb3c:	3b02      	subs	r3, #2
 800eb3e:	b29a      	uxth	r2, r3
 800eb40:	68fb      	ldr	r3, [r7, #12]
 800eb42:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800eb44:	e05f      	b.n	800ec06 <HAL_SPI_Transmit+0x288>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800eb46:	68fb      	ldr	r3, [r7, #12]
 800eb48:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800eb4a:	68fb      	ldr	r3, [r7, #12]
 800eb4c:	681b      	ldr	r3, [r3, #0]
 800eb4e:	330c      	adds	r3, #12
 800eb50:	7812      	ldrb	r2, [r2, #0]
 800eb52:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 800eb54:	68fb      	ldr	r3, [r7, #12]
 800eb56:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800eb58:	1c5a      	adds	r2, r3, #1
 800eb5a:	68fb      	ldr	r3, [r7, #12]
 800eb5c:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 800eb5e:	68fb      	ldr	r3, [r7, #12]
 800eb60:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800eb62:	b29b      	uxth	r3, r3
 800eb64:	3b01      	subs	r3, #1
 800eb66:	b29a      	uxth	r2, r3
 800eb68:	68fb      	ldr	r3, [r7, #12]
 800eb6a:	87da      	strh	r2, [r3, #62]	@ 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 800eb6c:	e04b      	b.n	800ec06 <HAL_SPI_Transmit+0x288>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800eb6e:	68fb      	ldr	r3, [r7, #12]
 800eb70:	681b      	ldr	r3, [r3, #0]
 800eb72:	689b      	ldr	r3, [r3, #8]
 800eb74:	f003 0302 	and.w	r3, r3, #2
 800eb78:	2b02      	cmp	r3, #2
 800eb7a:	d12b      	bne.n	800ebd4 <HAL_SPI_Transmit+0x256>
      {
        if (hspi->TxXferCount > 1U)
 800eb7c:	68fb      	ldr	r3, [r7, #12]
 800eb7e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800eb80:	b29b      	uxth	r3, r3
 800eb82:	2b01      	cmp	r3, #1
 800eb84:	d912      	bls.n	800ebac <HAL_SPI_Transmit+0x22e>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800eb86:	68fb      	ldr	r3, [r7, #12]
 800eb88:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800eb8a:	881a      	ldrh	r2, [r3, #0]
 800eb8c:	68fb      	ldr	r3, [r7, #12]
 800eb8e:	681b      	ldr	r3, [r3, #0]
 800eb90:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800eb92:	68fb      	ldr	r3, [r7, #12]
 800eb94:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800eb96:	1c9a      	adds	r2, r3, #2
 800eb98:	68fb      	ldr	r3, [r7, #12]
 800eb9a:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 800eb9c:	68fb      	ldr	r3, [r7, #12]
 800eb9e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800eba0:	b29b      	uxth	r3, r3
 800eba2:	3b02      	subs	r3, #2
 800eba4:	b29a      	uxth	r2, r3
 800eba6:	68fb      	ldr	r3, [r7, #12]
 800eba8:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800ebaa:	e02c      	b.n	800ec06 <HAL_SPI_Transmit+0x288>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800ebac:	68fb      	ldr	r3, [r7, #12]
 800ebae:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800ebb0:	68fb      	ldr	r3, [r7, #12]
 800ebb2:	681b      	ldr	r3, [r3, #0]
 800ebb4:	330c      	adds	r3, #12
 800ebb6:	7812      	ldrb	r2, [r2, #0]
 800ebb8:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 800ebba:	68fb      	ldr	r3, [r7, #12]
 800ebbc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ebbe:	1c5a      	adds	r2, r3, #1
 800ebc0:	68fb      	ldr	r3, [r7, #12]
 800ebc2:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 800ebc4:	68fb      	ldr	r3, [r7, #12]
 800ebc6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800ebc8:	b29b      	uxth	r3, r3
 800ebca:	3b01      	subs	r3, #1
 800ebcc:	b29a      	uxth	r2, r3
 800ebce:	68fb      	ldr	r3, [r7, #12]
 800ebd0:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800ebd2:	e018      	b.n	800ec06 <HAL_SPI_Transmit+0x288>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800ebd4:	f7fa fa76 	bl	80090c4 <HAL_GetTick>
 800ebd8:	4602      	mov	r2, r0
 800ebda:	69fb      	ldr	r3, [r7, #28]
 800ebdc:	1ad3      	subs	r3, r2, r3
 800ebde:	683a      	ldr	r2, [r7, #0]
 800ebe0:	429a      	cmp	r2, r3
 800ebe2:	d803      	bhi.n	800ebec <HAL_SPI_Transmit+0x26e>
 800ebe4:	683b      	ldr	r3, [r7, #0]
 800ebe6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ebea:	d102      	bne.n	800ebf2 <HAL_SPI_Transmit+0x274>
 800ebec:	683b      	ldr	r3, [r7, #0]
 800ebee:	2b00      	cmp	r3, #0
 800ebf0:	d109      	bne.n	800ec06 <HAL_SPI_Transmit+0x288>
        {
          hspi->State = HAL_SPI_STATE_READY;
 800ebf2:	68fb      	ldr	r3, [r7, #12]
 800ebf4:	2201      	movs	r2, #1
 800ebf6:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 800ebfa:	68fb      	ldr	r3, [r7, #12]
 800ebfc:	2200      	movs	r2, #0
 800ebfe:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 800ec02:	2303      	movs	r3, #3
 800ec04:	e02d      	b.n	800ec62 <HAL_SPI_Transmit+0x2e4>
    while (hspi->TxXferCount > 0U)
 800ec06:	68fb      	ldr	r3, [r7, #12]
 800ec08:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800ec0a:	b29b      	uxth	r3, r3
 800ec0c:	2b00      	cmp	r3, #0
 800ec0e:	d1ae      	bne.n	800eb6e <HAL_SPI_Transmit+0x1f0>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800ec10:	69fa      	ldr	r2, [r7, #28]
 800ec12:	6839      	ldr	r1, [r7, #0]
 800ec14:	68f8      	ldr	r0, [r7, #12]
 800ec16:	f000 fcf5 	bl	800f604 <SPI_EndRxTxTransaction>
 800ec1a:	4603      	mov	r3, r0
 800ec1c:	2b00      	cmp	r3, #0
 800ec1e:	d002      	beq.n	800ec26 <HAL_SPI_Transmit+0x2a8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800ec20:	68fb      	ldr	r3, [r7, #12]
 800ec22:	2220      	movs	r2, #32
 800ec24:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800ec26:	68fb      	ldr	r3, [r7, #12]
 800ec28:	689b      	ldr	r3, [r3, #8]
 800ec2a:	2b00      	cmp	r3, #0
 800ec2c:	d10a      	bne.n	800ec44 <HAL_SPI_Transmit+0x2c6>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800ec2e:	2300      	movs	r3, #0
 800ec30:	617b      	str	r3, [r7, #20]
 800ec32:	68fb      	ldr	r3, [r7, #12]
 800ec34:	681b      	ldr	r3, [r3, #0]
 800ec36:	68db      	ldr	r3, [r3, #12]
 800ec38:	617b      	str	r3, [r7, #20]
 800ec3a:	68fb      	ldr	r3, [r7, #12]
 800ec3c:	681b      	ldr	r3, [r3, #0]
 800ec3e:	689b      	ldr	r3, [r3, #8]
 800ec40:	617b      	str	r3, [r7, #20]
 800ec42:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 800ec44:	68fb      	ldr	r3, [r7, #12]
 800ec46:	2201      	movs	r2, #1
 800ec48:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800ec4c:	68fb      	ldr	r3, [r7, #12]
 800ec4e:	2200      	movs	r2, #0
 800ec50:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800ec54:	68fb      	ldr	r3, [r7, #12]
 800ec56:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800ec58:	2b00      	cmp	r3, #0
 800ec5a:	d001      	beq.n	800ec60 <HAL_SPI_Transmit+0x2e2>
  {
    return HAL_ERROR;
 800ec5c:	2301      	movs	r3, #1
 800ec5e:	e000      	b.n	800ec62 <HAL_SPI_Transmit+0x2e4>
  }
  else
  {
    return HAL_OK;
 800ec60:	2300      	movs	r3, #0
  }
}
 800ec62:	4618      	mov	r0, r3
 800ec64:	3720      	adds	r7, #32
 800ec66:	46bd      	mov	sp, r7
 800ec68:	bd80      	pop	{r7, pc}

0800ec6a <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800ec6a:	b580      	push	{r7, lr}
 800ec6c:	b088      	sub	sp, #32
 800ec6e:	af02      	add	r7, sp, #8
 800ec70:	60f8      	str	r0, [r7, #12]
 800ec72:	60b9      	str	r1, [r7, #8]
 800ec74:	603b      	str	r3, [r7, #0]
 800ec76:	4613      	mov	r3, r2
 800ec78:	80fb      	strh	r3, [r7, #6]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;

  if (hspi->State != HAL_SPI_STATE_READY)
 800ec7a:	68fb      	ldr	r3, [r7, #12]
 800ec7c:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800ec80:	b2db      	uxtb	r3, r3
 800ec82:	2b01      	cmp	r3, #1
 800ec84:	d001      	beq.n	800ec8a <HAL_SPI_Receive+0x20>
  {
    return HAL_BUSY;
 800ec86:	2302      	movs	r3, #2
 800ec88:	e123      	b.n	800eed2 <HAL_SPI_Receive+0x268>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800ec8a:	68fb      	ldr	r3, [r7, #12]
 800ec8c:	685b      	ldr	r3, [r3, #4]
 800ec8e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800ec92:	d112      	bne.n	800ecba <HAL_SPI_Receive+0x50>
 800ec94:	68fb      	ldr	r3, [r7, #12]
 800ec96:	689b      	ldr	r3, [r3, #8]
 800ec98:	2b00      	cmp	r3, #0
 800ec9a:	d10e      	bne.n	800ecba <HAL_SPI_Receive+0x50>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800ec9c:	68fb      	ldr	r3, [r7, #12]
 800ec9e:	2204      	movs	r2, #4
 800eca0:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 800eca4:	88fa      	ldrh	r2, [r7, #6]
 800eca6:	683b      	ldr	r3, [r7, #0]
 800eca8:	9300      	str	r3, [sp, #0]
 800ecaa:	4613      	mov	r3, r2
 800ecac:	68ba      	ldr	r2, [r7, #8]
 800ecae:	68b9      	ldr	r1, [r7, #8]
 800ecb0:	68f8      	ldr	r0, [r7, #12]
 800ecb2:	f000 f912 	bl	800eeda <HAL_SPI_TransmitReceive>
 800ecb6:	4603      	mov	r3, r0
 800ecb8:	e10b      	b.n	800eed2 <HAL_SPI_Receive+0x268>
  }

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800ecba:	f7fa fa03 	bl	80090c4 <HAL_GetTick>
 800ecbe:	6178      	str	r0, [r7, #20]

  if ((pData == NULL) || (Size == 0U))
 800ecc0:	68bb      	ldr	r3, [r7, #8]
 800ecc2:	2b00      	cmp	r3, #0
 800ecc4:	d002      	beq.n	800eccc <HAL_SPI_Receive+0x62>
 800ecc6:	88fb      	ldrh	r3, [r7, #6]
 800ecc8:	2b00      	cmp	r3, #0
 800ecca:	d101      	bne.n	800ecd0 <HAL_SPI_Receive+0x66>
  {
    return HAL_ERROR;
 800eccc:	2301      	movs	r3, #1
 800ecce:	e100      	b.n	800eed2 <HAL_SPI_Receive+0x268>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800ecd0:	68fb      	ldr	r3, [r7, #12]
 800ecd2:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 800ecd6:	2b01      	cmp	r3, #1
 800ecd8:	d101      	bne.n	800ecde <HAL_SPI_Receive+0x74>
 800ecda:	2302      	movs	r3, #2
 800ecdc:	e0f9      	b.n	800eed2 <HAL_SPI_Receive+0x268>
 800ecde:	68fb      	ldr	r3, [r7, #12]
 800ece0:	2201      	movs	r2, #1
 800ece2:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800ece6:	68fb      	ldr	r3, [r7, #12]
 800ece8:	2204      	movs	r2, #4
 800ecea:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800ecee:	68fb      	ldr	r3, [r7, #12]
 800ecf0:	2200      	movs	r2, #0
 800ecf2:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800ecf4:	68fb      	ldr	r3, [r7, #12]
 800ecf6:	68ba      	ldr	r2, [r7, #8]
 800ecf8:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = Size;
 800ecfa:	68fb      	ldr	r3, [r7, #12]
 800ecfc:	88fa      	ldrh	r2, [r7, #6]
 800ecfe:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = Size;
 800ed02:	68fb      	ldr	r3, [r7, #12]
 800ed04:	88fa      	ldrh	r2, [r7, #6]
 800ed06:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 800ed0a:	68fb      	ldr	r3, [r7, #12]
 800ed0c:	2200      	movs	r2, #0
 800ed0e:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = 0U;
 800ed10:	68fb      	ldr	r3, [r7, #12]
 800ed12:	2200      	movs	r2, #0
 800ed14:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = 0U;
 800ed16:	68fb      	ldr	r3, [r7, #12]
 800ed18:	2200      	movs	r2, #0
 800ed1a:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxISR       = NULL;
 800ed1c:	68fb      	ldr	r3, [r7, #12]
 800ed1e:	2200      	movs	r2, #0
 800ed20:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 800ed22:	68fb      	ldr	r3, [r7, #12]
 800ed24:	2200      	movs	r2, #0
 800ed26:	651a      	str	r2, [r3, #80]	@ 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800ed28:	68fb      	ldr	r3, [r7, #12]
 800ed2a:	68db      	ldr	r3, [r3, #12]
 800ed2c:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800ed30:	d908      	bls.n	800ed44 <HAL_SPI_Receive+0xda>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800ed32:	68fb      	ldr	r3, [r7, #12]
 800ed34:	681b      	ldr	r3, [r3, #0]
 800ed36:	685a      	ldr	r2, [r3, #4]
 800ed38:	68fb      	ldr	r3, [r7, #12]
 800ed3a:	681b      	ldr	r3, [r3, #0]
 800ed3c:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800ed40:	605a      	str	r2, [r3, #4]
 800ed42:	e007      	b.n	800ed54 <HAL_SPI_Receive+0xea>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800ed44:	68fb      	ldr	r3, [r7, #12]
 800ed46:	681b      	ldr	r3, [r3, #0]
 800ed48:	685a      	ldr	r2, [r3, #4]
 800ed4a:	68fb      	ldr	r3, [r7, #12]
 800ed4c:	681b      	ldr	r3, [r3, #0]
 800ed4e:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800ed52:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800ed54:	68fb      	ldr	r3, [r7, #12]
 800ed56:	689b      	ldr	r3, [r3, #8]
 800ed58:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800ed5c:	d10f      	bne.n	800ed7e <HAL_SPI_Receive+0x114>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800ed5e:	68fb      	ldr	r3, [r7, #12]
 800ed60:	681b      	ldr	r3, [r3, #0]
 800ed62:	681a      	ldr	r2, [r3, #0]
 800ed64:	68fb      	ldr	r3, [r7, #12]
 800ed66:	681b      	ldr	r3, [r3, #0]
 800ed68:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800ed6c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 800ed6e:	68fb      	ldr	r3, [r7, #12]
 800ed70:	681b      	ldr	r3, [r3, #0]
 800ed72:	681a      	ldr	r2, [r3, #0]
 800ed74:	68fb      	ldr	r3, [r7, #12]
 800ed76:	681b      	ldr	r3, [r3, #0]
 800ed78:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 800ed7c:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800ed7e:	68fb      	ldr	r3, [r7, #12]
 800ed80:	681b      	ldr	r3, [r3, #0]
 800ed82:	681b      	ldr	r3, [r3, #0]
 800ed84:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ed88:	2b40      	cmp	r3, #64	@ 0x40
 800ed8a:	d007      	beq.n	800ed9c <HAL_SPI_Receive+0x132>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800ed8c:	68fb      	ldr	r3, [r7, #12]
 800ed8e:	681b      	ldr	r3, [r3, #0]
 800ed90:	681a      	ldr	r2, [r3, #0]
 800ed92:	68fb      	ldr	r3, [r7, #12]
 800ed94:	681b      	ldr	r3, [r3, #0]
 800ed96:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800ed9a:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 800ed9c:	68fb      	ldr	r3, [r7, #12]
 800ed9e:	68db      	ldr	r3, [r3, #12]
 800eda0:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800eda4:	d875      	bhi.n	800ee92 <HAL_SPI_Receive+0x228>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 800eda6:	e037      	b.n	800ee18 <HAL_SPI_Receive+0x1ae>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800eda8:	68fb      	ldr	r3, [r7, #12]
 800edaa:	681b      	ldr	r3, [r3, #0]
 800edac:	689b      	ldr	r3, [r3, #8]
 800edae:	f003 0301 	and.w	r3, r3, #1
 800edb2:	2b01      	cmp	r3, #1
 800edb4:	d117      	bne.n	800ede6 <HAL_SPI_Receive+0x17c>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800edb6:	68fb      	ldr	r3, [r7, #12]
 800edb8:	681b      	ldr	r3, [r3, #0]
 800edba:	f103 020c 	add.w	r2, r3, #12
 800edbe:	68fb      	ldr	r3, [r7, #12]
 800edc0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800edc2:	7812      	ldrb	r2, [r2, #0]
 800edc4:	b2d2      	uxtb	r2, r2
 800edc6:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800edc8:	68fb      	ldr	r3, [r7, #12]
 800edca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800edcc:	1c5a      	adds	r2, r3, #1
 800edce:	68fb      	ldr	r3, [r7, #12]
 800edd0:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 800edd2:	68fb      	ldr	r3, [r7, #12]
 800edd4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800edd8:	b29b      	uxth	r3, r3
 800edda:	3b01      	subs	r3, #1
 800eddc:	b29a      	uxth	r2, r3
 800edde:	68fb      	ldr	r3, [r7, #12]
 800ede0:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
 800ede4:	e018      	b.n	800ee18 <HAL_SPI_Receive+0x1ae>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800ede6:	f7fa f96d 	bl	80090c4 <HAL_GetTick>
 800edea:	4602      	mov	r2, r0
 800edec:	697b      	ldr	r3, [r7, #20]
 800edee:	1ad3      	subs	r3, r2, r3
 800edf0:	683a      	ldr	r2, [r7, #0]
 800edf2:	429a      	cmp	r2, r3
 800edf4:	d803      	bhi.n	800edfe <HAL_SPI_Receive+0x194>
 800edf6:	683b      	ldr	r3, [r7, #0]
 800edf8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800edfc:	d102      	bne.n	800ee04 <HAL_SPI_Receive+0x19a>
 800edfe:	683b      	ldr	r3, [r7, #0]
 800ee00:	2b00      	cmp	r3, #0
 800ee02:	d109      	bne.n	800ee18 <HAL_SPI_Receive+0x1ae>
        {
          hspi->State = HAL_SPI_STATE_READY;
 800ee04:	68fb      	ldr	r3, [r7, #12]
 800ee06:	2201      	movs	r2, #1
 800ee08:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 800ee0c:	68fb      	ldr	r3, [r7, #12]
 800ee0e:	2200      	movs	r2, #0
 800ee10:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 800ee14:	2303      	movs	r3, #3
 800ee16:	e05c      	b.n	800eed2 <HAL_SPI_Receive+0x268>
    while (hspi->RxXferCount > 0U)
 800ee18:	68fb      	ldr	r3, [r7, #12]
 800ee1a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800ee1e:	b29b      	uxth	r3, r3
 800ee20:	2b00      	cmp	r3, #0
 800ee22:	d1c1      	bne.n	800eda8 <HAL_SPI_Receive+0x13e>
 800ee24:	e03b      	b.n	800ee9e <HAL_SPI_Receive+0x234>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800ee26:	68fb      	ldr	r3, [r7, #12]
 800ee28:	681b      	ldr	r3, [r3, #0]
 800ee2a:	689b      	ldr	r3, [r3, #8]
 800ee2c:	f003 0301 	and.w	r3, r3, #1
 800ee30:	2b01      	cmp	r3, #1
 800ee32:	d115      	bne.n	800ee60 <HAL_SPI_Receive+0x1f6>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800ee34:	68fb      	ldr	r3, [r7, #12]
 800ee36:	681b      	ldr	r3, [r3, #0]
 800ee38:	68da      	ldr	r2, [r3, #12]
 800ee3a:	68fb      	ldr	r3, [r7, #12]
 800ee3c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ee3e:	b292      	uxth	r2, r2
 800ee40:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800ee42:	68fb      	ldr	r3, [r7, #12]
 800ee44:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ee46:	1c9a      	adds	r2, r3, #2
 800ee48:	68fb      	ldr	r3, [r7, #12]
 800ee4a:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 800ee4c:	68fb      	ldr	r3, [r7, #12]
 800ee4e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800ee52:	b29b      	uxth	r3, r3
 800ee54:	3b01      	subs	r3, #1
 800ee56:	b29a      	uxth	r2, r3
 800ee58:	68fb      	ldr	r3, [r7, #12]
 800ee5a:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
 800ee5e:	e018      	b.n	800ee92 <HAL_SPI_Receive+0x228>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800ee60:	f7fa f930 	bl	80090c4 <HAL_GetTick>
 800ee64:	4602      	mov	r2, r0
 800ee66:	697b      	ldr	r3, [r7, #20]
 800ee68:	1ad3      	subs	r3, r2, r3
 800ee6a:	683a      	ldr	r2, [r7, #0]
 800ee6c:	429a      	cmp	r2, r3
 800ee6e:	d803      	bhi.n	800ee78 <HAL_SPI_Receive+0x20e>
 800ee70:	683b      	ldr	r3, [r7, #0]
 800ee72:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ee76:	d102      	bne.n	800ee7e <HAL_SPI_Receive+0x214>
 800ee78:	683b      	ldr	r3, [r7, #0]
 800ee7a:	2b00      	cmp	r3, #0
 800ee7c:	d109      	bne.n	800ee92 <HAL_SPI_Receive+0x228>
        {
          hspi->State = HAL_SPI_STATE_READY;
 800ee7e:	68fb      	ldr	r3, [r7, #12]
 800ee80:	2201      	movs	r2, #1
 800ee82:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 800ee86:	68fb      	ldr	r3, [r7, #12]
 800ee88:	2200      	movs	r2, #0
 800ee8a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 800ee8e:	2303      	movs	r3, #3
 800ee90:	e01f      	b.n	800eed2 <HAL_SPI_Receive+0x268>
    while (hspi->RxXferCount > 0U)
 800ee92:	68fb      	ldr	r3, [r7, #12]
 800ee94:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800ee98:	b29b      	uxth	r3, r3
 800ee9a:	2b00      	cmp	r3, #0
 800ee9c:	d1c3      	bne.n	800ee26 <HAL_SPI_Receive+0x1bc>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800ee9e:	697a      	ldr	r2, [r7, #20]
 800eea0:	6839      	ldr	r1, [r7, #0]
 800eea2:	68f8      	ldr	r0, [r7, #12]
 800eea4:	f000 fb56 	bl	800f554 <SPI_EndRxTransaction>
 800eea8:	4603      	mov	r3, r0
 800eeaa:	2b00      	cmp	r3, #0
 800eeac:	d002      	beq.n	800eeb4 <HAL_SPI_Receive+0x24a>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800eeae:	68fb      	ldr	r3, [r7, #12]
 800eeb0:	2220      	movs	r2, #32
 800eeb2:	661a      	str	r2, [r3, #96]	@ 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  hspi->State = HAL_SPI_STATE_READY;
 800eeb4:	68fb      	ldr	r3, [r7, #12]
 800eeb6:	2201      	movs	r2, #1
 800eeb8:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800eebc:	68fb      	ldr	r3, [r7, #12]
 800eebe:	2200      	movs	r2, #0
 800eec0:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800eec4:	68fb      	ldr	r3, [r7, #12]
 800eec6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800eec8:	2b00      	cmp	r3, #0
 800eeca:	d001      	beq.n	800eed0 <HAL_SPI_Receive+0x266>
  {
    return HAL_ERROR;
 800eecc:	2301      	movs	r3, #1
 800eece:	e000      	b.n	800eed2 <HAL_SPI_Receive+0x268>
  }
  else
  {
    return HAL_OK;
 800eed0:	2300      	movs	r3, #0
  }
}
 800eed2:	4618      	mov	r0, r3
 800eed4:	3718      	adds	r7, #24
 800eed6:	46bd      	mov	sp, r7
 800eed8:	bd80      	pop	{r7, pc}

0800eeda <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 800eeda:	b580      	push	{r7, lr}
 800eedc:	b08a      	sub	sp, #40	@ 0x28
 800eede:	af00      	add	r7, sp, #0
 800eee0:	60f8      	str	r0, [r7, #12]
 800eee2:	60b9      	str	r1, [r7, #8]
 800eee4:	607a      	str	r2, [r7, #4]
 800eee6:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800eee8:	2301      	movs	r3, #1
 800eeea:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800eeec:	f7fa f8ea 	bl	80090c4 <HAL_GetTick>
 800eef0:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800eef2:	68fb      	ldr	r3, [r7, #12]
 800eef4:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800eef8:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 800eefa:	68fb      	ldr	r3, [r7, #12]
 800eefc:	685b      	ldr	r3, [r3, #4]
 800eefe:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 800ef00:	887b      	ldrh	r3, [r7, #2]
 800ef02:	82fb      	strh	r3, [r7, #22]
  initial_RxXferCount = Size;
 800ef04:	887b      	ldrh	r3, [r7, #2]
 800ef06:	82bb      	strh	r3, [r7, #20]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800ef08:	7ffb      	ldrb	r3, [r7, #31]
 800ef0a:	2b01      	cmp	r3, #1
 800ef0c:	d00c      	beq.n	800ef28 <HAL_SPI_TransmitReceive+0x4e>
 800ef0e:	69bb      	ldr	r3, [r7, #24]
 800ef10:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800ef14:	d106      	bne.n	800ef24 <HAL_SPI_TransmitReceive+0x4a>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) &&
 800ef16:	68fb      	ldr	r3, [r7, #12]
 800ef18:	689b      	ldr	r3, [r3, #8]
 800ef1a:	2b00      	cmp	r3, #0
 800ef1c:	d102      	bne.n	800ef24 <HAL_SPI_TransmitReceive+0x4a>
 800ef1e:	7ffb      	ldrb	r3, [r7, #31]
 800ef20:	2b04      	cmp	r3, #4
 800ef22:	d001      	beq.n	800ef28 <HAL_SPI_TransmitReceive+0x4e>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    return HAL_BUSY;
 800ef24:	2302      	movs	r3, #2
 800ef26:	e1f3      	b.n	800f310 <HAL_SPI_TransmitReceive+0x436>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800ef28:	68bb      	ldr	r3, [r7, #8]
 800ef2a:	2b00      	cmp	r3, #0
 800ef2c:	d005      	beq.n	800ef3a <HAL_SPI_TransmitReceive+0x60>
 800ef2e:	687b      	ldr	r3, [r7, #4]
 800ef30:	2b00      	cmp	r3, #0
 800ef32:	d002      	beq.n	800ef3a <HAL_SPI_TransmitReceive+0x60>
 800ef34:	887b      	ldrh	r3, [r7, #2]
 800ef36:	2b00      	cmp	r3, #0
 800ef38:	d101      	bne.n	800ef3e <HAL_SPI_TransmitReceive+0x64>
  {
    return HAL_ERROR;
 800ef3a:	2301      	movs	r3, #1
 800ef3c:	e1e8      	b.n	800f310 <HAL_SPI_TransmitReceive+0x436>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800ef3e:	68fb      	ldr	r3, [r7, #12]
 800ef40:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 800ef44:	2b01      	cmp	r3, #1
 800ef46:	d101      	bne.n	800ef4c <HAL_SPI_TransmitReceive+0x72>
 800ef48:	2302      	movs	r3, #2
 800ef4a:	e1e1      	b.n	800f310 <HAL_SPI_TransmitReceive+0x436>
 800ef4c:	68fb      	ldr	r3, [r7, #12]
 800ef4e:	2201      	movs	r2, #1
 800ef50:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800ef54:	68fb      	ldr	r3, [r7, #12]
 800ef56:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800ef5a:	b2db      	uxtb	r3, r3
 800ef5c:	2b04      	cmp	r3, #4
 800ef5e:	d003      	beq.n	800ef68 <HAL_SPI_TransmitReceive+0x8e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800ef60:	68fb      	ldr	r3, [r7, #12]
 800ef62:	2205      	movs	r2, #5
 800ef64:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800ef68:	68fb      	ldr	r3, [r7, #12]
 800ef6a:	2200      	movs	r2, #0
 800ef6c:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800ef6e:	68fb      	ldr	r3, [r7, #12]
 800ef70:	687a      	ldr	r2, [r7, #4]
 800ef72:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferCount = Size;
 800ef74:	68fb      	ldr	r3, [r7, #12]
 800ef76:	887a      	ldrh	r2, [r7, #2]
 800ef78:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->RxXferSize  = Size;
 800ef7c:	68fb      	ldr	r3, [r7, #12]
 800ef7e:	887a      	ldrh	r2, [r7, #2]
 800ef80:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 800ef84:	68fb      	ldr	r3, [r7, #12]
 800ef86:	68ba      	ldr	r2, [r7, #8]
 800ef88:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferCount = Size;
 800ef8a:	68fb      	ldr	r3, [r7, #12]
 800ef8c:	887a      	ldrh	r2, [r7, #2]
 800ef8e:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferSize  = Size;
 800ef90:	68fb      	ldr	r3, [r7, #12]
 800ef92:	887a      	ldrh	r2, [r7, #2]
 800ef94:	879a      	strh	r2, [r3, #60]	@ 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800ef96:	68fb      	ldr	r3, [r7, #12]
 800ef98:	2200      	movs	r2, #0
 800ef9a:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 800ef9c:	68fb      	ldr	r3, [r7, #12]
 800ef9e:	2200      	movs	r2, #0
 800efa0:	651a      	str	r2, [r3, #80]	@ 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 800efa2:	68fb      	ldr	r3, [r7, #12]
 800efa4:	68db      	ldr	r3, [r3, #12]
 800efa6:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800efaa:	d802      	bhi.n	800efb2 <HAL_SPI_TransmitReceive+0xd8>
 800efac:	8abb      	ldrh	r3, [r7, #20]
 800efae:	2b01      	cmp	r3, #1
 800efb0:	d908      	bls.n	800efc4 <HAL_SPI_TransmitReceive+0xea>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800efb2:	68fb      	ldr	r3, [r7, #12]
 800efb4:	681b      	ldr	r3, [r3, #0]
 800efb6:	685a      	ldr	r2, [r3, #4]
 800efb8:	68fb      	ldr	r3, [r7, #12]
 800efba:	681b      	ldr	r3, [r3, #0]
 800efbc:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800efc0:	605a      	str	r2, [r3, #4]
 800efc2:	e007      	b.n	800efd4 <HAL_SPI_TransmitReceive+0xfa>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800efc4:	68fb      	ldr	r3, [r7, #12]
 800efc6:	681b      	ldr	r3, [r3, #0]
 800efc8:	685a      	ldr	r2, [r3, #4]
 800efca:	68fb      	ldr	r3, [r7, #12]
 800efcc:	681b      	ldr	r3, [r3, #0]
 800efce:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800efd2:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800efd4:	68fb      	ldr	r3, [r7, #12]
 800efd6:	681b      	ldr	r3, [r3, #0]
 800efd8:	681b      	ldr	r3, [r3, #0]
 800efda:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800efde:	2b40      	cmp	r3, #64	@ 0x40
 800efe0:	d007      	beq.n	800eff2 <HAL_SPI_TransmitReceive+0x118>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800efe2:	68fb      	ldr	r3, [r7, #12]
 800efe4:	681b      	ldr	r3, [r3, #0]
 800efe6:	681a      	ldr	r2, [r3, #0]
 800efe8:	68fb      	ldr	r3, [r7, #12]
 800efea:	681b      	ldr	r3, [r3, #0]
 800efec:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800eff0:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800eff2:	68fb      	ldr	r3, [r7, #12]
 800eff4:	68db      	ldr	r3, [r3, #12]
 800eff6:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800effa:	f240 8083 	bls.w	800f104 <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800effe:	68fb      	ldr	r3, [r7, #12]
 800f000:	685b      	ldr	r3, [r3, #4]
 800f002:	2b00      	cmp	r3, #0
 800f004:	d002      	beq.n	800f00c <HAL_SPI_TransmitReceive+0x132>
 800f006:	8afb      	ldrh	r3, [r7, #22]
 800f008:	2b01      	cmp	r3, #1
 800f00a:	d16f      	bne.n	800f0ec <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800f00c:	68fb      	ldr	r3, [r7, #12]
 800f00e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f010:	881a      	ldrh	r2, [r3, #0]
 800f012:	68fb      	ldr	r3, [r7, #12]
 800f014:	681b      	ldr	r3, [r3, #0]
 800f016:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800f018:	68fb      	ldr	r3, [r7, #12]
 800f01a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f01c:	1c9a      	adds	r2, r3, #2
 800f01e:	68fb      	ldr	r3, [r7, #12]
 800f020:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 800f022:	68fb      	ldr	r3, [r7, #12]
 800f024:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800f026:	b29b      	uxth	r3, r3
 800f028:	3b01      	subs	r3, #1
 800f02a:	b29a      	uxth	r2, r3
 800f02c:	68fb      	ldr	r3, [r7, #12]
 800f02e:	87da      	strh	r2, [r3, #62]	@ 0x3e
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800f030:	e05c      	b.n	800f0ec <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800f032:	68fb      	ldr	r3, [r7, #12]
 800f034:	681b      	ldr	r3, [r3, #0]
 800f036:	689b      	ldr	r3, [r3, #8]
 800f038:	f003 0302 	and.w	r3, r3, #2
 800f03c:	2b02      	cmp	r3, #2
 800f03e:	d11b      	bne.n	800f078 <HAL_SPI_TransmitReceive+0x19e>
 800f040:	68fb      	ldr	r3, [r7, #12]
 800f042:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800f044:	b29b      	uxth	r3, r3
 800f046:	2b00      	cmp	r3, #0
 800f048:	d016      	beq.n	800f078 <HAL_SPI_TransmitReceive+0x19e>
 800f04a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f04c:	2b01      	cmp	r3, #1
 800f04e:	d113      	bne.n	800f078 <HAL_SPI_TransmitReceive+0x19e>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800f050:	68fb      	ldr	r3, [r7, #12]
 800f052:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f054:	881a      	ldrh	r2, [r3, #0]
 800f056:	68fb      	ldr	r3, [r7, #12]
 800f058:	681b      	ldr	r3, [r3, #0]
 800f05a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800f05c:	68fb      	ldr	r3, [r7, #12]
 800f05e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f060:	1c9a      	adds	r2, r3, #2
 800f062:	68fb      	ldr	r3, [r7, #12]
 800f064:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 800f066:	68fb      	ldr	r3, [r7, #12]
 800f068:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800f06a:	b29b      	uxth	r3, r3
 800f06c:	3b01      	subs	r3, #1
 800f06e:	b29a      	uxth	r2, r3
 800f070:	68fb      	ldr	r3, [r7, #12]
 800f072:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800f074:	2300      	movs	r3, #0
 800f076:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800f078:	68fb      	ldr	r3, [r7, #12]
 800f07a:	681b      	ldr	r3, [r3, #0]
 800f07c:	689b      	ldr	r3, [r3, #8]
 800f07e:	f003 0301 	and.w	r3, r3, #1
 800f082:	2b01      	cmp	r3, #1
 800f084:	d11c      	bne.n	800f0c0 <HAL_SPI_TransmitReceive+0x1e6>
 800f086:	68fb      	ldr	r3, [r7, #12]
 800f088:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800f08c:	b29b      	uxth	r3, r3
 800f08e:	2b00      	cmp	r3, #0
 800f090:	d016      	beq.n	800f0c0 <HAL_SPI_TransmitReceive+0x1e6>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800f092:	68fb      	ldr	r3, [r7, #12]
 800f094:	681b      	ldr	r3, [r3, #0]
 800f096:	68da      	ldr	r2, [r3, #12]
 800f098:	68fb      	ldr	r3, [r7, #12]
 800f09a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800f09c:	b292      	uxth	r2, r2
 800f09e:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800f0a0:	68fb      	ldr	r3, [r7, #12]
 800f0a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800f0a4:	1c9a      	adds	r2, r3, #2
 800f0a6:	68fb      	ldr	r3, [r7, #12]
 800f0a8:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 800f0aa:	68fb      	ldr	r3, [r7, #12]
 800f0ac:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800f0b0:	b29b      	uxth	r3, r3
 800f0b2:	3b01      	subs	r3, #1
 800f0b4:	b29a      	uxth	r2, r3
 800f0b6:	68fb      	ldr	r3, [r7, #12]
 800f0b8:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800f0bc:	2301      	movs	r3, #1
 800f0be:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800f0c0:	f7fa f800 	bl	80090c4 <HAL_GetTick>
 800f0c4:	4602      	mov	r2, r0
 800f0c6:	6a3b      	ldr	r3, [r7, #32]
 800f0c8:	1ad3      	subs	r3, r2, r3
 800f0ca:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800f0cc:	429a      	cmp	r2, r3
 800f0ce:	d80d      	bhi.n	800f0ec <HAL_SPI_TransmitReceive+0x212>
 800f0d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f0d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f0d6:	d009      	beq.n	800f0ec <HAL_SPI_TransmitReceive+0x212>
      {
        hspi->State = HAL_SPI_STATE_READY;
 800f0d8:	68fb      	ldr	r3, [r7, #12]
 800f0da:	2201      	movs	r2, #1
 800f0dc:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        __HAL_UNLOCK(hspi);
 800f0e0:	68fb      	ldr	r3, [r7, #12]
 800f0e2:	2200      	movs	r2, #0
 800f0e4:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
        return HAL_TIMEOUT;
 800f0e8:	2303      	movs	r3, #3
 800f0ea:	e111      	b.n	800f310 <HAL_SPI_TransmitReceive+0x436>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800f0ec:	68fb      	ldr	r3, [r7, #12]
 800f0ee:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800f0f0:	b29b      	uxth	r3, r3
 800f0f2:	2b00      	cmp	r3, #0
 800f0f4:	d19d      	bne.n	800f032 <HAL_SPI_TransmitReceive+0x158>
 800f0f6:	68fb      	ldr	r3, [r7, #12]
 800f0f8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800f0fc:	b29b      	uxth	r3, r3
 800f0fe:	2b00      	cmp	r3, #0
 800f100:	d197      	bne.n	800f032 <HAL_SPI_TransmitReceive+0x158>
 800f102:	e0e5      	b.n	800f2d0 <HAL_SPI_TransmitReceive+0x3f6>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800f104:	68fb      	ldr	r3, [r7, #12]
 800f106:	685b      	ldr	r3, [r3, #4]
 800f108:	2b00      	cmp	r3, #0
 800f10a:	d003      	beq.n	800f114 <HAL_SPI_TransmitReceive+0x23a>
 800f10c:	8afb      	ldrh	r3, [r7, #22]
 800f10e:	2b01      	cmp	r3, #1
 800f110:	f040 80d1 	bne.w	800f2b6 <HAL_SPI_TransmitReceive+0x3dc>
    {
      if (hspi->TxXferCount > 1U)
 800f114:	68fb      	ldr	r3, [r7, #12]
 800f116:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800f118:	b29b      	uxth	r3, r3
 800f11a:	2b01      	cmp	r3, #1
 800f11c:	d912      	bls.n	800f144 <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800f11e:	68fb      	ldr	r3, [r7, #12]
 800f120:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f122:	881a      	ldrh	r2, [r3, #0]
 800f124:	68fb      	ldr	r3, [r7, #12]
 800f126:	681b      	ldr	r3, [r3, #0]
 800f128:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800f12a:	68fb      	ldr	r3, [r7, #12]
 800f12c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f12e:	1c9a      	adds	r2, r3, #2
 800f130:	68fb      	ldr	r3, [r7, #12]
 800f132:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 800f134:	68fb      	ldr	r3, [r7, #12]
 800f136:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800f138:	b29b      	uxth	r3, r3
 800f13a:	3b02      	subs	r3, #2
 800f13c:	b29a      	uxth	r2, r3
 800f13e:	68fb      	ldr	r3, [r7, #12]
 800f140:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800f142:	e0b8      	b.n	800f2b6 <HAL_SPI_TransmitReceive+0x3dc>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 800f144:	68fb      	ldr	r3, [r7, #12]
 800f146:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800f148:	68fb      	ldr	r3, [r7, #12]
 800f14a:	681b      	ldr	r3, [r3, #0]
 800f14c:	330c      	adds	r3, #12
 800f14e:	7812      	ldrb	r2, [r2, #0]
 800f150:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800f152:	68fb      	ldr	r3, [r7, #12]
 800f154:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f156:	1c5a      	adds	r2, r3, #1
 800f158:	68fb      	ldr	r3, [r7, #12]
 800f15a:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 800f15c:	68fb      	ldr	r3, [r7, #12]
 800f15e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800f160:	b29b      	uxth	r3, r3
 800f162:	3b01      	subs	r3, #1
 800f164:	b29a      	uxth	r2, r3
 800f166:	68fb      	ldr	r3, [r7, #12]
 800f168:	87da      	strh	r2, [r3, #62]	@ 0x3e
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
        }
#endif /* USE_SPI_CRC */
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800f16a:	e0a4      	b.n	800f2b6 <HAL_SPI_TransmitReceive+0x3dc>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800f16c:	68fb      	ldr	r3, [r7, #12]
 800f16e:	681b      	ldr	r3, [r3, #0]
 800f170:	689b      	ldr	r3, [r3, #8]
 800f172:	f003 0302 	and.w	r3, r3, #2
 800f176:	2b02      	cmp	r3, #2
 800f178:	d134      	bne.n	800f1e4 <HAL_SPI_TransmitReceive+0x30a>
 800f17a:	68fb      	ldr	r3, [r7, #12]
 800f17c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800f17e:	b29b      	uxth	r3, r3
 800f180:	2b00      	cmp	r3, #0
 800f182:	d02f      	beq.n	800f1e4 <HAL_SPI_TransmitReceive+0x30a>
 800f184:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f186:	2b01      	cmp	r3, #1
 800f188:	d12c      	bne.n	800f1e4 <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 800f18a:	68fb      	ldr	r3, [r7, #12]
 800f18c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800f18e:	b29b      	uxth	r3, r3
 800f190:	2b01      	cmp	r3, #1
 800f192:	d912      	bls.n	800f1ba <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800f194:	68fb      	ldr	r3, [r7, #12]
 800f196:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f198:	881a      	ldrh	r2, [r3, #0]
 800f19a:	68fb      	ldr	r3, [r7, #12]
 800f19c:	681b      	ldr	r3, [r3, #0]
 800f19e:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800f1a0:	68fb      	ldr	r3, [r7, #12]
 800f1a2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f1a4:	1c9a      	adds	r2, r3, #2
 800f1a6:	68fb      	ldr	r3, [r7, #12]
 800f1a8:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 800f1aa:	68fb      	ldr	r3, [r7, #12]
 800f1ac:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800f1ae:	b29b      	uxth	r3, r3
 800f1b0:	3b02      	subs	r3, #2
 800f1b2:	b29a      	uxth	r2, r3
 800f1b4:	68fb      	ldr	r3, [r7, #12]
 800f1b6:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800f1b8:	e012      	b.n	800f1e0 <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 800f1ba:	68fb      	ldr	r3, [r7, #12]
 800f1bc:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800f1be:	68fb      	ldr	r3, [r7, #12]
 800f1c0:	681b      	ldr	r3, [r3, #0]
 800f1c2:	330c      	adds	r3, #12
 800f1c4:	7812      	ldrb	r2, [r2, #0]
 800f1c6:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 800f1c8:	68fb      	ldr	r3, [r7, #12]
 800f1ca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f1cc:	1c5a      	adds	r2, r3, #1
 800f1ce:	68fb      	ldr	r3, [r7, #12]
 800f1d0:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 800f1d2:	68fb      	ldr	r3, [r7, #12]
 800f1d4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800f1d6:	b29b      	uxth	r3, r3
 800f1d8:	3b01      	subs	r3, #1
 800f1da:	b29a      	uxth	r2, r3
 800f1dc:	68fb      	ldr	r3, [r7, #12]
 800f1de:	87da      	strh	r2, [r3, #62]	@ 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800f1e0:	2300      	movs	r3, #0
 800f1e2:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800f1e4:	68fb      	ldr	r3, [r7, #12]
 800f1e6:	681b      	ldr	r3, [r3, #0]
 800f1e8:	689b      	ldr	r3, [r3, #8]
 800f1ea:	f003 0301 	and.w	r3, r3, #1
 800f1ee:	2b01      	cmp	r3, #1
 800f1f0:	d148      	bne.n	800f284 <HAL_SPI_TransmitReceive+0x3aa>
 800f1f2:	68fb      	ldr	r3, [r7, #12]
 800f1f4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800f1f8:	b29b      	uxth	r3, r3
 800f1fa:	2b00      	cmp	r3, #0
 800f1fc:	d042      	beq.n	800f284 <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 800f1fe:	68fb      	ldr	r3, [r7, #12]
 800f200:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800f204:	b29b      	uxth	r3, r3
 800f206:	2b01      	cmp	r3, #1
 800f208:	d923      	bls.n	800f252 <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800f20a:	68fb      	ldr	r3, [r7, #12]
 800f20c:	681b      	ldr	r3, [r3, #0]
 800f20e:	68da      	ldr	r2, [r3, #12]
 800f210:	68fb      	ldr	r3, [r7, #12]
 800f212:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800f214:	b292      	uxth	r2, r2
 800f216:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800f218:	68fb      	ldr	r3, [r7, #12]
 800f21a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800f21c:	1c9a      	adds	r2, r3, #2
 800f21e:	68fb      	ldr	r3, [r7, #12]
 800f220:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount -= 2U;
 800f222:	68fb      	ldr	r3, [r7, #12]
 800f224:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800f228:	b29b      	uxth	r3, r3
 800f22a:	3b02      	subs	r3, #2
 800f22c:	b29a      	uxth	r2, r3
 800f22e:	68fb      	ldr	r3, [r7, #12]
 800f230:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
          if (hspi->RxXferCount <= 1U)
 800f234:	68fb      	ldr	r3, [r7, #12]
 800f236:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800f23a:	b29b      	uxth	r3, r3
 800f23c:	2b01      	cmp	r3, #1
 800f23e:	d81f      	bhi.n	800f280 <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800f240:	68fb      	ldr	r3, [r7, #12]
 800f242:	681b      	ldr	r3, [r3, #0]
 800f244:	685a      	ldr	r2, [r3, #4]
 800f246:	68fb      	ldr	r3, [r7, #12]
 800f248:	681b      	ldr	r3, [r3, #0]
 800f24a:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800f24e:	605a      	str	r2, [r3, #4]
 800f250:	e016      	b.n	800f280 <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800f252:	68fb      	ldr	r3, [r7, #12]
 800f254:	681b      	ldr	r3, [r3, #0]
 800f256:	f103 020c 	add.w	r2, r3, #12
 800f25a:	68fb      	ldr	r3, [r7, #12]
 800f25c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800f25e:	7812      	ldrb	r2, [r2, #0]
 800f260:	b2d2      	uxtb	r2, r2
 800f262:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 800f264:	68fb      	ldr	r3, [r7, #12]
 800f266:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800f268:	1c5a      	adds	r2, r3, #1
 800f26a:	68fb      	ldr	r3, [r7, #12]
 800f26c:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount--;
 800f26e:	68fb      	ldr	r3, [r7, #12]
 800f270:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800f274:	b29b      	uxth	r3, r3
 800f276:	3b01      	subs	r3, #1
 800f278:	b29a      	uxth	r2, r3
 800f27a:	68fb      	ldr	r3, [r7, #12]
 800f27c:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800f280:	2301      	movs	r3, #1
 800f282:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800f284:	f7f9 ff1e 	bl	80090c4 <HAL_GetTick>
 800f288:	4602      	mov	r2, r0
 800f28a:	6a3b      	ldr	r3, [r7, #32]
 800f28c:	1ad3      	subs	r3, r2, r3
 800f28e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800f290:	429a      	cmp	r2, r3
 800f292:	d803      	bhi.n	800f29c <HAL_SPI_TransmitReceive+0x3c2>
 800f294:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f296:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f29a:	d102      	bne.n	800f2a2 <HAL_SPI_TransmitReceive+0x3c8>
 800f29c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f29e:	2b00      	cmp	r3, #0
 800f2a0:	d109      	bne.n	800f2b6 <HAL_SPI_TransmitReceive+0x3dc>
      {
        hspi->State = HAL_SPI_STATE_READY;
 800f2a2:	68fb      	ldr	r3, [r7, #12]
 800f2a4:	2201      	movs	r2, #1
 800f2a6:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        __HAL_UNLOCK(hspi);
 800f2aa:	68fb      	ldr	r3, [r7, #12]
 800f2ac:	2200      	movs	r2, #0
 800f2ae:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
        return HAL_TIMEOUT;
 800f2b2:	2303      	movs	r3, #3
 800f2b4:	e02c      	b.n	800f310 <HAL_SPI_TransmitReceive+0x436>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800f2b6:	68fb      	ldr	r3, [r7, #12]
 800f2b8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800f2ba:	b29b      	uxth	r3, r3
 800f2bc:	2b00      	cmp	r3, #0
 800f2be:	f47f af55 	bne.w	800f16c <HAL_SPI_TransmitReceive+0x292>
 800f2c2:	68fb      	ldr	r3, [r7, #12]
 800f2c4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800f2c8:	b29b      	uxth	r3, r3
 800f2ca:	2b00      	cmp	r3, #0
 800f2cc:	f47f af4e 	bne.w	800f16c <HAL_SPI_TransmitReceive+0x292>
    return HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800f2d0:	6a3a      	ldr	r2, [r7, #32]
 800f2d2:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800f2d4:	68f8      	ldr	r0, [r7, #12]
 800f2d6:	f000 f995 	bl	800f604 <SPI_EndRxTxTransaction>
 800f2da:	4603      	mov	r3, r0
 800f2dc:	2b00      	cmp	r3, #0
 800f2de:	d008      	beq.n	800f2f2 <HAL_SPI_TransmitReceive+0x418>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800f2e0:	68fb      	ldr	r3, [r7, #12]
 800f2e2:	2220      	movs	r2, #32
 800f2e4:	661a      	str	r2, [r3, #96]	@ 0x60
    __HAL_UNLOCK(hspi);
 800f2e6:	68fb      	ldr	r3, [r7, #12]
 800f2e8:	2200      	movs	r2, #0
 800f2ea:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
    return HAL_ERROR;
 800f2ee:	2301      	movs	r3, #1
 800f2f0:	e00e      	b.n	800f310 <HAL_SPI_TransmitReceive+0x436>
  }


  hspi->State = HAL_SPI_STATE_READY;
 800f2f2:	68fb      	ldr	r3, [r7, #12]
 800f2f4:	2201      	movs	r2, #1
 800f2f6:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800f2fa:	68fb      	ldr	r3, [r7, #12]
 800f2fc:	2200      	movs	r2, #0
 800f2fe:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800f302:	68fb      	ldr	r3, [r7, #12]
 800f304:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800f306:	2b00      	cmp	r3, #0
 800f308:	d001      	beq.n	800f30e <HAL_SPI_TransmitReceive+0x434>
  {
    return HAL_ERROR;
 800f30a:	2301      	movs	r3, #1
 800f30c:	e000      	b.n	800f310 <HAL_SPI_TransmitReceive+0x436>
  }
  else
  {
    return HAL_OK;
 800f30e:	2300      	movs	r3, #0
  }
}
 800f310:	4618      	mov	r0, r3
 800f312:	3728      	adds	r7, #40	@ 0x28
 800f314:	46bd      	mov	sp, r7
 800f316:	bd80      	pop	{r7, pc}

0800f318 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800f318:	b580      	push	{r7, lr}
 800f31a:	b088      	sub	sp, #32
 800f31c:	af00      	add	r7, sp, #0
 800f31e:	60f8      	str	r0, [r7, #12]
 800f320:	60b9      	str	r1, [r7, #8]
 800f322:	603b      	str	r3, [r7, #0]
 800f324:	4613      	mov	r3, r2
 800f326:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800f328:	f7f9 fecc 	bl	80090c4 <HAL_GetTick>
 800f32c:	4602      	mov	r2, r0
 800f32e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f330:	1a9b      	subs	r3, r3, r2
 800f332:	683a      	ldr	r2, [r7, #0]
 800f334:	4413      	add	r3, r2
 800f336:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800f338:	f7f9 fec4 	bl	80090c4 <HAL_GetTick>
 800f33c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800f33e:	4b39      	ldr	r3, [pc, #228]	@ (800f424 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800f340:	681b      	ldr	r3, [r3, #0]
 800f342:	015b      	lsls	r3, r3, #5
 800f344:	0d1b      	lsrs	r3, r3, #20
 800f346:	69fa      	ldr	r2, [r7, #28]
 800f348:	fb02 f303 	mul.w	r3, r2, r3
 800f34c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800f34e:	e054      	b.n	800f3fa <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800f350:	683b      	ldr	r3, [r7, #0]
 800f352:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f356:	d050      	beq.n	800f3fa <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800f358:	f7f9 feb4 	bl	80090c4 <HAL_GetTick>
 800f35c:	4602      	mov	r2, r0
 800f35e:	69bb      	ldr	r3, [r7, #24]
 800f360:	1ad3      	subs	r3, r2, r3
 800f362:	69fa      	ldr	r2, [r7, #28]
 800f364:	429a      	cmp	r2, r3
 800f366:	d902      	bls.n	800f36e <SPI_WaitFlagStateUntilTimeout+0x56>
 800f368:	69fb      	ldr	r3, [r7, #28]
 800f36a:	2b00      	cmp	r3, #0
 800f36c:	d13d      	bne.n	800f3ea <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800f36e:	68fb      	ldr	r3, [r7, #12]
 800f370:	681b      	ldr	r3, [r3, #0]
 800f372:	685a      	ldr	r2, [r3, #4]
 800f374:	68fb      	ldr	r3, [r7, #12]
 800f376:	681b      	ldr	r3, [r3, #0]
 800f378:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 800f37c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800f37e:	68fb      	ldr	r3, [r7, #12]
 800f380:	685b      	ldr	r3, [r3, #4]
 800f382:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800f386:	d111      	bne.n	800f3ac <SPI_WaitFlagStateUntilTimeout+0x94>
 800f388:	68fb      	ldr	r3, [r7, #12]
 800f38a:	689b      	ldr	r3, [r3, #8]
 800f38c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800f390:	d004      	beq.n	800f39c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800f392:	68fb      	ldr	r3, [r7, #12]
 800f394:	689b      	ldr	r3, [r3, #8]
 800f396:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800f39a:	d107      	bne.n	800f3ac <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800f39c:	68fb      	ldr	r3, [r7, #12]
 800f39e:	681b      	ldr	r3, [r3, #0]
 800f3a0:	681a      	ldr	r2, [r3, #0]
 800f3a2:	68fb      	ldr	r3, [r7, #12]
 800f3a4:	681b      	ldr	r3, [r3, #0]
 800f3a6:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800f3aa:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800f3ac:	68fb      	ldr	r3, [r7, #12]
 800f3ae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f3b0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800f3b4:	d10f      	bne.n	800f3d6 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800f3b6:	68fb      	ldr	r3, [r7, #12]
 800f3b8:	681b      	ldr	r3, [r3, #0]
 800f3ba:	681a      	ldr	r2, [r3, #0]
 800f3bc:	68fb      	ldr	r3, [r7, #12]
 800f3be:	681b      	ldr	r3, [r3, #0]
 800f3c0:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800f3c4:	601a      	str	r2, [r3, #0]
 800f3c6:	68fb      	ldr	r3, [r7, #12]
 800f3c8:	681b      	ldr	r3, [r3, #0]
 800f3ca:	681a      	ldr	r2, [r3, #0]
 800f3cc:	68fb      	ldr	r3, [r7, #12]
 800f3ce:	681b      	ldr	r3, [r3, #0]
 800f3d0:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800f3d4:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800f3d6:	68fb      	ldr	r3, [r7, #12]
 800f3d8:	2201      	movs	r2, #1
 800f3da:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800f3de:	68fb      	ldr	r3, [r7, #12]
 800f3e0:	2200      	movs	r2, #0
 800f3e2:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 800f3e6:	2303      	movs	r3, #3
 800f3e8:	e017      	b.n	800f41a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800f3ea:	697b      	ldr	r3, [r7, #20]
 800f3ec:	2b00      	cmp	r3, #0
 800f3ee:	d101      	bne.n	800f3f4 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800f3f0:	2300      	movs	r3, #0
 800f3f2:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800f3f4:	697b      	ldr	r3, [r7, #20]
 800f3f6:	3b01      	subs	r3, #1
 800f3f8:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800f3fa:	68fb      	ldr	r3, [r7, #12]
 800f3fc:	681b      	ldr	r3, [r3, #0]
 800f3fe:	689a      	ldr	r2, [r3, #8]
 800f400:	68bb      	ldr	r3, [r7, #8]
 800f402:	4013      	ands	r3, r2
 800f404:	68ba      	ldr	r2, [r7, #8]
 800f406:	429a      	cmp	r2, r3
 800f408:	bf0c      	ite	eq
 800f40a:	2301      	moveq	r3, #1
 800f40c:	2300      	movne	r3, #0
 800f40e:	b2db      	uxtb	r3, r3
 800f410:	461a      	mov	r2, r3
 800f412:	79fb      	ldrb	r3, [r7, #7]
 800f414:	429a      	cmp	r2, r3
 800f416:	d19b      	bne.n	800f350 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800f418:	2300      	movs	r3, #0
}
 800f41a:	4618      	mov	r0, r3
 800f41c:	3720      	adds	r7, #32
 800f41e:	46bd      	mov	sp, r7
 800f420:	bd80      	pop	{r7, pc}
 800f422:	bf00      	nop
 800f424:	20000000 	.word	0x20000000

0800f428 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800f428:	b580      	push	{r7, lr}
 800f42a:	b08a      	sub	sp, #40	@ 0x28
 800f42c:	af00      	add	r7, sp, #0
 800f42e:	60f8      	str	r0, [r7, #12]
 800f430:	60b9      	str	r1, [r7, #8]
 800f432:	607a      	str	r2, [r7, #4]
 800f434:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO const uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 800f436:	2300      	movs	r3, #0
 800f438:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 800f43a:	f7f9 fe43 	bl	80090c4 <HAL_GetTick>
 800f43e:	4602      	mov	r2, r0
 800f440:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f442:	1a9b      	subs	r3, r3, r2
 800f444:	683a      	ldr	r2, [r7, #0]
 800f446:	4413      	add	r3, r2
 800f448:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 800f44a:	f7f9 fe3b 	bl	80090c4 <HAL_GetTick>
 800f44e:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 800f450:	68fb      	ldr	r3, [r7, #12]
 800f452:	681b      	ldr	r3, [r3, #0]
 800f454:	330c      	adds	r3, #12
 800f456:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 800f458:	4b3d      	ldr	r3, [pc, #244]	@ (800f550 <SPI_WaitFifoStateUntilTimeout+0x128>)
 800f45a:	681a      	ldr	r2, [r3, #0]
 800f45c:	4613      	mov	r3, r2
 800f45e:	009b      	lsls	r3, r3, #2
 800f460:	4413      	add	r3, r2
 800f462:	00da      	lsls	r2, r3, #3
 800f464:	1ad3      	subs	r3, r2, r3
 800f466:	0d1b      	lsrs	r3, r3, #20
 800f468:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800f46a:	fb02 f303 	mul.w	r3, r2, r3
 800f46e:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 800f470:	e060      	b.n	800f534 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800f472:	68bb      	ldr	r3, [r7, #8]
 800f474:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 800f478:	d107      	bne.n	800f48a <SPI_WaitFifoStateUntilTimeout+0x62>
 800f47a:	687b      	ldr	r3, [r7, #4]
 800f47c:	2b00      	cmp	r3, #0
 800f47e:	d104      	bne.n	800f48a <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 800f480:	69fb      	ldr	r3, [r7, #28]
 800f482:	781b      	ldrb	r3, [r3, #0]
 800f484:	b2db      	uxtb	r3, r3
 800f486:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 800f488:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 800f48a:	683b      	ldr	r3, [r7, #0]
 800f48c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f490:	d050      	beq.n	800f534 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800f492:	f7f9 fe17 	bl	80090c4 <HAL_GetTick>
 800f496:	4602      	mov	r2, r0
 800f498:	6a3b      	ldr	r3, [r7, #32]
 800f49a:	1ad3      	subs	r3, r2, r3
 800f49c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800f49e:	429a      	cmp	r2, r3
 800f4a0:	d902      	bls.n	800f4a8 <SPI_WaitFifoStateUntilTimeout+0x80>
 800f4a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f4a4:	2b00      	cmp	r3, #0
 800f4a6:	d13d      	bne.n	800f524 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800f4a8:	68fb      	ldr	r3, [r7, #12]
 800f4aa:	681b      	ldr	r3, [r3, #0]
 800f4ac:	685a      	ldr	r2, [r3, #4]
 800f4ae:	68fb      	ldr	r3, [r7, #12]
 800f4b0:	681b      	ldr	r3, [r3, #0]
 800f4b2:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 800f4b6:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800f4b8:	68fb      	ldr	r3, [r7, #12]
 800f4ba:	685b      	ldr	r3, [r3, #4]
 800f4bc:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800f4c0:	d111      	bne.n	800f4e6 <SPI_WaitFifoStateUntilTimeout+0xbe>
 800f4c2:	68fb      	ldr	r3, [r7, #12]
 800f4c4:	689b      	ldr	r3, [r3, #8]
 800f4c6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800f4ca:	d004      	beq.n	800f4d6 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800f4cc:	68fb      	ldr	r3, [r7, #12]
 800f4ce:	689b      	ldr	r3, [r3, #8]
 800f4d0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800f4d4:	d107      	bne.n	800f4e6 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800f4d6:	68fb      	ldr	r3, [r7, #12]
 800f4d8:	681b      	ldr	r3, [r3, #0]
 800f4da:	681a      	ldr	r2, [r3, #0]
 800f4dc:	68fb      	ldr	r3, [r7, #12]
 800f4de:	681b      	ldr	r3, [r3, #0]
 800f4e0:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800f4e4:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800f4e6:	68fb      	ldr	r3, [r7, #12]
 800f4e8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f4ea:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800f4ee:	d10f      	bne.n	800f510 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 800f4f0:	68fb      	ldr	r3, [r7, #12]
 800f4f2:	681b      	ldr	r3, [r3, #0]
 800f4f4:	681a      	ldr	r2, [r3, #0]
 800f4f6:	68fb      	ldr	r3, [r7, #12]
 800f4f8:	681b      	ldr	r3, [r3, #0]
 800f4fa:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800f4fe:	601a      	str	r2, [r3, #0]
 800f500:	68fb      	ldr	r3, [r7, #12]
 800f502:	681b      	ldr	r3, [r3, #0]
 800f504:	681a      	ldr	r2, [r3, #0]
 800f506:	68fb      	ldr	r3, [r7, #12]
 800f508:	681b      	ldr	r3, [r3, #0]
 800f50a:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800f50e:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800f510:	68fb      	ldr	r3, [r7, #12]
 800f512:	2201      	movs	r2, #1
 800f514:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800f518:	68fb      	ldr	r3, [r7, #12]
 800f51a:	2200      	movs	r2, #0
 800f51c:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 800f520:	2303      	movs	r3, #3
 800f522:	e010      	b.n	800f546 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800f524:	69bb      	ldr	r3, [r7, #24]
 800f526:	2b00      	cmp	r3, #0
 800f528:	d101      	bne.n	800f52e <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 800f52a:	2300      	movs	r3, #0
 800f52c:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 800f52e:	69bb      	ldr	r3, [r7, #24]
 800f530:	3b01      	subs	r3, #1
 800f532:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 800f534:	68fb      	ldr	r3, [r7, #12]
 800f536:	681b      	ldr	r3, [r3, #0]
 800f538:	689a      	ldr	r2, [r3, #8]
 800f53a:	68bb      	ldr	r3, [r7, #8]
 800f53c:	4013      	ands	r3, r2
 800f53e:	687a      	ldr	r2, [r7, #4]
 800f540:	429a      	cmp	r2, r3
 800f542:	d196      	bne.n	800f472 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 800f544:	2300      	movs	r3, #0
}
 800f546:	4618      	mov	r0, r3
 800f548:	3728      	adds	r7, #40	@ 0x28
 800f54a:	46bd      	mov	sp, r7
 800f54c:	bd80      	pop	{r7, pc}
 800f54e:	bf00      	nop
 800f550:	20000000 	.word	0x20000000

0800f554 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 800f554:	b580      	push	{r7, lr}
 800f556:	b086      	sub	sp, #24
 800f558:	af02      	add	r7, sp, #8
 800f55a:	60f8      	str	r0, [r7, #12]
 800f55c:	60b9      	str	r1, [r7, #8]
 800f55e:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800f560:	68fb      	ldr	r3, [r7, #12]
 800f562:	685b      	ldr	r3, [r3, #4]
 800f564:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800f568:	d111      	bne.n	800f58e <SPI_EndRxTransaction+0x3a>
 800f56a:	68fb      	ldr	r3, [r7, #12]
 800f56c:	689b      	ldr	r3, [r3, #8]
 800f56e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800f572:	d004      	beq.n	800f57e <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800f574:	68fb      	ldr	r3, [r7, #12]
 800f576:	689b      	ldr	r3, [r3, #8]
 800f578:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800f57c:	d107      	bne.n	800f58e <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800f57e:	68fb      	ldr	r3, [r7, #12]
 800f580:	681b      	ldr	r3, [r3, #0]
 800f582:	681a      	ldr	r2, [r3, #0]
 800f584:	68fb      	ldr	r3, [r7, #12]
 800f586:	681b      	ldr	r3, [r3, #0]
 800f588:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800f58c:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800f58e:	687b      	ldr	r3, [r7, #4]
 800f590:	9300      	str	r3, [sp, #0]
 800f592:	68bb      	ldr	r3, [r7, #8]
 800f594:	2200      	movs	r2, #0
 800f596:	2180      	movs	r1, #128	@ 0x80
 800f598:	68f8      	ldr	r0, [r7, #12]
 800f59a:	f7ff febd 	bl	800f318 <SPI_WaitFlagStateUntilTimeout>
 800f59e:	4603      	mov	r3, r0
 800f5a0:	2b00      	cmp	r3, #0
 800f5a2:	d007      	beq.n	800f5b4 <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800f5a4:	68fb      	ldr	r3, [r7, #12]
 800f5a6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800f5a8:	f043 0220 	orr.w	r2, r3, #32
 800f5ac:	68fb      	ldr	r3, [r7, #12]
 800f5ae:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 800f5b0:	2303      	movs	r3, #3
 800f5b2:	e023      	b.n	800f5fc <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800f5b4:	68fb      	ldr	r3, [r7, #12]
 800f5b6:	685b      	ldr	r3, [r3, #4]
 800f5b8:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800f5bc:	d11d      	bne.n	800f5fa <SPI_EndRxTransaction+0xa6>
 800f5be:	68fb      	ldr	r3, [r7, #12]
 800f5c0:	689b      	ldr	r3, [r3, #8]
 800f5c2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800f5c6:	d004      	beq.n	800f5d2 <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800f5c8:	68fb      	ldr	r3, [r7, #12]
 800f5ca:	689b      	ldr	r3, [r3, #8]
 800f5cc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800f5d0:	d113      	bne.n	800f5fa <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800f5d2:	687b      	ldr	r3, [r7, #4]
 800f5d4:	9300      	str	r3, [sp, #0]
 800f5d6:	68bb      	ldr	r3, [r7, #8]
 800f5d8:	2200      	movs	r2, #0
 800f5da:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 800f5de:	68f8      	ldr	r0, [r7, #12]
 800f5e0:	f7ff ff22 	bl	800f428 <SPI_WaitFifoStateUntilTimeout>
 800f5e4:	4603      	mov	r3, r0
 800f5e6:	2b00      	cmp	r3, #0
 800f5e8:	d007      	beq.n	800f5fa <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800f5ea:	68fb      	ldr	r3, [r7, #12]
 800f5ec:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800f5ee:	f043 0220 	orr.w	r2, r3, #32
 800f5f2:	68fb      	ldr	r3, [r7, #12]
 800f5f4:	661a      	str	r2, [r3, #96]	@ 0x60
      return HAL_TIMEOUT;
 800f5f6:	2303      	movs	r3, #3
 800f5f8:	e000      	b.n	800f5fc <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 800f5fa:	2300      	movs	r3, #0
}
 800f5fc:	4618      	mov	r0, r3
 800f5fe:	3710      	adds	r7, #16
 800f600:	46bd      	mov	sp, r7
 800f602:	bd80      	pop	{r7, pc}

0800f604 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800f604:	b580      	push	{r7, lr}
 800f606:	b086      	sub	sp, #24
 800f608:	af02      	add	r7, sp, #8
 800f60a:	60f8      	str	r0, [r7, #12]
 800f60c:	60b9      	str	r1, [r7, #8]
 800f60e:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800f610:	687b      	ldr	r3, [r7, #4]
 800f612:	9300      	str	r3, [sp, #0]
 800f614:	68bb      	ldr	r3, [r7, #8]
 800f616:	2200      	movs	r2, #0
 800f618:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 800f61c:	68f8      	ldr	r0, [r7, #12]
 800f61e:	f7ff ff03 	bl	800f428 <SPI_WaitFifoStateUntilTimeout>
 800f622:	4603      	mov	r3, r0
 800f624:	2b00      	cmp	r3, #0
 800f626:	d007      	beq.n	800f638 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800f628:	68fb      	ldr	r3, [r7, #12]
 800f62a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800f62c:	f043 0220 	orr.w	r2, r3, #32
 800f630:	68fb      	ldr	r3, [r7, #12]
 800f632:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 800f634:	2303      	movs	r3, #3
 800f636:	e027      	b.n	800f688 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800f638:	687b      	ldr	r3, [r7, #4]
 800f63a:	9300      	str	r3, [sp, #0]
 800f63c:	68bb      	ldr	r3, [r7, #8]
 800f63e:	2200      	movs	r2, #0
 800f640:	2180      	movs	r1, #128	@ 0x80
 800f642:	68f8      	ldr	r0, [r7, #12]
 800f644:	f7ff fe68 	bl	800f318 <SPI_WaitFlagStateUntilTimeout>
 800f648:	4603      	mov	r3, r0
 800f64a:	2b00      	cmp	r3, #0
 800f64c:	d007      	beq.n	800f65e <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800f64e:	68fb      	ldr	r3, [r7, #12]
 800f650:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800f652:	f043 0220 	orr.w	r2, r3, #32
 800f656:	68fb      	ldr	r3, [r7, #12]
 800f658:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 800f65a:	2303      	movs	r3, #3
 800f65c:	e014      	b.n	800f688 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800f65e:	687b      	ldr	r3, [r7, #4]
 800f660:	9300      	str	r3, [sp, #0]
 800f662:	68bb      	ldr	r3, [r7, #8]
 800f664:	2200      	movs	r2, #0
 800f666:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 800f66a:	68f8      	ldr	r0, [r7, #12]
 800f66c:	f7ff fedc 	bl	800f428 <SPI_WaitFifoStateUntilTimeout>
 800f670:	4603      	mov	r3, r0
 800f672:	2b00      	cmp	r3, #0
 800f674:	d007      	beq.n	800f686 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800f676:	68fb      	ldr	r3, [r7, #12]
 800f678:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800f67a:	f043 0220 	orr.w	r2, r3, #32
 800f67e:	68fb      	ldr	r3, [r7, #12]
 800f680:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 800f682:	2303      	movs	r3, #3
 800f684:	e000      	b.n	800f688 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 800f686:	2300      	movs	r3, #0
}
 800f688:	4618      	mov	r0, r3
 800f68a:	3710      	adds	r7, #16
 800f68c:	46bd      	mov	sp, r7
 800f68e:	bd80      	pop	{r7, pc}

0800f690 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800f690:	b580      	push	{r7, lr}
 800f692:	b082      	sub	sp, #8
 800f694:	af00      	add	r7, sp, #0
 800f696:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800f698:	687b      	ldr	r3, [r7, #4]
 800f69a:	2b00      	cmp	r3, #0
 800f69c:	d101      	bne.n	800f6a2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800f69e:	2301      	movs	r3, #1
 800f6a0:	e049      	b.n	800f736 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800f6a2:	687b      	ldr	r3, [r7, #4]
 800f6a4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800f6a8:	b2db      	uxtb	r3, r3
 800f6aa:	2b00      	cmp	r3, #0
 800f6ac:	d106      	bne.n	800f6bc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800f6ae:	687b      	ldr	r3, [r7, #4]
 800f6b0:	2200      	movs	r2, #0
 800f6b2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800f6b6:	6878      	ldr	r0, [r7, #4]
 800f6b8:	f7f6 f9b2 	bl	8005a20 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800f6bc:	687b      	ldr	r3, [r7, #4]
 800f6be:	2202      	movs	r2, #2
 800f6c0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800f6c4:	687b      	ldr	r3, [r7, #4]
 800f6c6:	681a      	ldr	r2, [r3, #0]
 800f6c8:	687b      	ldr	r3, [r7, #4]
 800f6ca:	3304      	adds	r3, #4
 800f6cc:	4619      	mov	r1, r3
 800f6ce:	4610      	mov	r0, r2
 800f6d0:	f001 f850 	bl	8010774 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800f6d4:	687b      	ldr	r3, [r7, #4]
 800f6d6:	2201      	movs	r2, #1
 800f6d8:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800f6dc:	687b      	ldr	r3, [r7, #4]
 800f6de:	2201      	movs	r2, #1
 800f6e0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800f6e4:	687b      	ldr	r3, [r7, #4]
 800f6e6:	2201      	movs	r2, #1
 800f6e8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800f6ec:	687b      	ldr	r3, [r7, #4]
 800f6ee:	2201      	movs	r2, #1
 800f6f0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800f6f4:	687b      	ldr	r3, [r7, #4]
 800f6f6:	2201      	movs	r2, #1
 800f6f8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800f6fc:	687b      	ldr	r3, [r7, #4]
 800f6fe:	2201      	movs	r2, #1
 800f700:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800f704:	687b      	ldr	r3, [r7, #4]
 800f706:	2201      	movs	r2, #1
 800f708:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800f70c:	687b      	ldr	r3, [r7, #4]
 800f70e:	2201      	movs	r2, #1
 800f710:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800f714:	687b      	ldr	r3, [r7, #4]
 800f716:	2201      	movs	r2, #1
 800f718:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800f71c:	687b      	ldr	r3, [r7, #4]
 800f71e:	2201      	movs	r2, #1
 800f720:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800f724:	687b      	ldr	r3, [r7, #4]
 800f726:	2201      	movs	r2, #1
 800f728:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800f72c:	687b      	ldr	r3, [r7, #4]
 800f72e:	2201      	movs	r2, #1
 800f730:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800f734:	2300      	movs	r3, #0
}
 800f736:	4618      	mov	r0, r3
 800f738:	3708      	adds	r7, #8
 800f73a:	46bd      	mov	sp, r7
 800f73c:	bd80      	pop	{r7, pc}

0800f73e <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 800f73e:	b580      	push	{r7, lr}
 800f740:	b082      	sub	sp, #8
 800f742:	af00      	add	r7, sp, #0
 800f744:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800f746:	687b      	ldr	r3, [r7, #4]
 800f748:	2b00      	cmp	r3, #0
 800f74a:	d101      	bne.n	800f750 <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 800f74c:	2301      	movs	r3, #1
 800f74e:	e049      	b.n	800f7e4 <HAL_TIM_OC_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800f750:	687b      	ldr	r3, [r7, #4]
 800f752:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800f756:	b2db      	uxtb	r3, r3
 800f758:	2b00      	cmp	r3, #0
 800f75a:	d106      	bne.n	800f76a <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800f75c:	687b      	ldr	r3, [r7, #4]
 800f75e:	2200      	movs	r2, #0
 800f760:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 800f764:	6878      	ldr	r0, [r7, #4]
 800f766:	f7f6 f8fb 	bl	8005960 <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800f76a:	687b      	ldr	r3, [r7, #4]
 800f76c:	2202      	movs	r2, #2
 800f76e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 800f772:	687b      	ldr	r3, [r7, #4]
 800f774:	681a      	ldr	r2, [r3, #0]
 800f776:	687b      	ldr	r3, [r7, #4]
 800f778:	3304      	adds	r3, #4
 800f77a:	4619      	mov	r1, r3
 800f77c:	4610      	mov	r0, r2
 800f77e:	f000 fff9 	bl	8010774 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800f782:	687b      	ldr	r3, [r7, #4]
 800f784:	2201      	movs	r2, #1
 800f786:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800f78a:	687b      	ldr	r3, [r7, #4]
 800f78c:	2201      	movs	r2, #1
 800f78e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800f792:	687b      	ldr	r3, [r7, #4]
 800f794:	2201      	movs	r2, #1
 800f796:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800f79a:	687b      	ldr	r3, [r7, #4]
 800f79c:	2201      	movs	r2, #1
 800f79e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800f7a2:	687b      	ldr	r3, [r7, #4]
 800f7a4:	2201      	movs	r2, #1
 800f7a6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800f7aa:	687b      	ldr	r3, [r7, #4]
 800f7ac:	2201      	movs	r2, #1
 800f7ae:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800f7b2:	687b      	ldr	r3, [r7, #4]
 800f7b4:	2201      	movs	r2, #1
 800f7b6:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800f7ba:	687b      	ldr	r3, [r7, #4]
 800f7bc:	2201      	movs	r2, #1
 800f7be:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800f7c2:	687b      	ldr	r3, [r7, #4]
 800f7c4:	2201      	movs	r2, #1
 800f7c6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800f7ca:	687b      	ldr	r3, [r7, #4]
 800f7cc:	2201      	movs	r2, #1
 800f7ce:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800f7d2:	687b      	ldr	r3, [r7, #4]
 800f7d4:	2201      	movs	r2, #1
 800f7d6:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800f7da:	687b      	ldr	r3, [r7, #4]
 800f7dc:	2201      	movs	r2, #1
 800f7de:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800f7e2:	2300      	movs	r3, #0
}
 800f7e4:	4618      	mov	r0, r3
 800f7e6:	3708      	adds	r7, #8
 800f7e8:	46bd      	mov	sp, r7
 800f7ea:	bd80      	pop	{r7, pc}

0800f7ec <HAL_TIM_OC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800f7ec:	b580      	push	{r7, lr}
 800f7ee:	b084      	sub	sp, #16
 800f7f0:	af00      	add	r7, sp, #0
 800f7f2:	6078      	str	r0, [r7, #4]
 800f7f4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800f7f6:	2300      	movs	r3, #0
 800f7f8:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_CHANNEL(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800f7fa:	683b      	ldr	r3, [r7, #0]
 800f7fc:	2b00      	cmp	r3, #0
 800f7fe:	d109      	bne.n	800f814 <HAL_TIM_OC_Start_IT+0x28>
 800f800:	687b      	ldr	r3, [r7, #4]
 800f802:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800f806:	b2db      	uxtb	r3, r3
 800f808:	2b01      	cmp	r3, #1
 800f80a:	bf14      	ite	ne
 800f80c:	2301      	movne	r3, #1
 800f80e:	2300      	moveq	r3, #0
 800f810:	b2db      	uxtb	r3, r3
 800f812:	e03c      	b.n	800f88e <HAL_TIM_OC_Start_IT+0xa2>
 800f814:	683b      	ldr	r3, [r7, #0]
 800f816:	2b04      	cmp	r3, #4
 800f818:	d109      	bne.n	800f82e <HAL_TIM_OC_Start_IT+0x42>
 800f81a:	687b      	ldr	r3, [r7, #4]
 800f81c:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800f820:	b2db      	uxtb	r3, r3
 800f822:	2b01      	cmp	r3, #1
 800f824:	bf14      	ite	ne
 800f826:	2301      	movne	r3, #1
 800f828:	2300      	moveq	r3, #0
 800f82a:	b2db      	uxtb	r3, r3
 800f82c:	e02f      	b.n	800f88e <HAL_TIM_OC_Start_IT+0xa2>
 800f82e:	683b      	ldr	r3, [r7, #0]
 800f830:	2b08      	cmp	r3, #8
 800f832:	d109      	bne.n	800f848 <HAL_TIM_OC_Start_IT+0x5c>
 800f834:	687b      	ldr	r3, [r7, #4]
 800f836:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800f83a:	b2db      	uxtb	r3, r3
 800f83c:	2b01      	cmp	r3, #1
 800f83e:	bf14      	ite	ne
 800f840:	2301      	movne	r3, #1
 800f842:	2300      	moveq	r3, #0
 800f844:	b2db      	uxtb	r3, r3
 800f846:	e022      	b.n	800f88e <HAL_TIM_OC_Start_IT+0xa2>
 800f848:	683b      	ldr	r3, [r7, #0]
 800f84a:	2b0c      	cmp	r3, #12
 800f84c:	d109      	bne.n	800f862 <HAL_TIM_OC_Start_IT+0x76>
 800f84e:	687b      	ldr	r3, [r7, #4]
 800f850:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800f854:	b2db      	uxtb	r3, r3
 800f856:	2b01      	cmp	r3, #1
 800f858:	bf14      	ite	ne
 800f85a:	2301      	movne	r3, #1
 800f85c:	2300      	moveq	r3, #0
 800f85e:	b2db      	uxtb	r3, r3
 800f860:	e015      	b.n	800f88e <HAL_TIM_OC_Start_IT+0xa2>
 800f862:	683b      	ldr	r3, [r7, #0]
 800f864:	2b10      	cmp	r3, #16
 800f866:	d109      	bne.n	800f87c <HAL_TIM_OC_Start_IT+0x90>
 800f868:	687b      	ldr	r3, [r7, #4]
 800f86a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800f86e:	b2db      	uxtb	r3, r3
 800f870:	2b01      	cmp	r3, #1
 800f872:	bf14      	ite	ne
 800f874:	2301      	movne	r3, #1
 800f876:	2300      	moveq	r3, #0
 800f878:	b2db      	uxtb	r3, r3
 800f87a:	e008      	b.n	800f88e <HAL_TIM_OC_Start_IT+0xa2>
 800f87c:	687b      	ldr	r3, [r7, #4]
 800f87e:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800f882:	b2db      	uxtb	r3, r3
 800f884:	2b01      	cmp	r3, #1
 800f886:	bf14      	ite	ne
 800f888:	2301      	movne	r3, #1
 800f88a:	2300      	moveq	r3, #0
 800f88c:	b2db      	uxtb	r3, r3
 800f88e:	2b00      	cmp	r3, #0
 800f890:	d001      	beq.n	800f896 <HAL_TIM_OC_Start_IT+0xaa>
  {
    return HAL_ERROR;
 800f892:	2301      	movs	r3, #1
 800f894:	e0e7      	b.n	800fa66 <HAL_TIM_OC_Start_IT+0x27a>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800f896:	683b      	ldr	r3, [r7, #0]
 800f898:	2b00      	cmp	r3, #0
 800f89a:	d104      	bne.n	800f8a6 <HAL_TIM_OC_Start_IT+0xba>
 800f89c:	687b      	ldr	r3, [r7, #4]
 800f89e:	2202      	movs	r2, #2
 800f8a0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800f8a4:	e023      	b.n	800f8ee <HAL_TIM_OC_Start_IT+0x102>
 800f8a6:	683b      	ldr	r3, [r7, #0]
 800f8a8:	2b04      	cmp	r3, #4
 800f8aa:	d104      	bne.n	800f8b6 <HAL_TIM_OC_Start_IT+0xca>
 800f8ac:	687b      	ldr	r3, [r7, #4]
 800f8ae:	2202      	movs	r2, #2
 800f8b0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800f8b4:	e01b      	b.n	800f8ee <HAL_TIM_OC_Start_IT+0x102>
 800f8b6:	683b      	ldr	r3, [r7, #0]
 800f8b8:	2b08      	cmp	r3, #8
 800f8ba:	d104      	bne.n	800f8c6 <HAL_TIM_OC_Start_IT+0xda>
 800f8bc:	687b      	ldr	r3, [r7, #4]
 800f8be:	2202      	movs	r2, #2
 800f8c0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800f8c4:	e013      	b.n	800f8ee <HAL_TIM_OC_Start_IT+0x102>
 800f8c6:	683b      	ldr	r3, [r7, #0]
 800f8c8:	2b0c      	cmp	r3, #12
 800f8ca:	d104      	bne.n	800f8d6 <HAL_TIM_OC_Start_IT+0xea>
 800f8cc:	687b      	ldr	r3, [r7, #4]
 800f8ce:	2202      	movs	r2, #2
 800f8d0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800f8d4:	e00b      	b.n	800f8ee <HAL_TIM_OC_Start_IT+0x102>
 800f8d6:	683b      	ldr	r3, [r7, #0]
 800f8d8:	2b10      	cmp	r3, #16
 800f8da:	d104      	bne.n	800f8e6 <HAL_TIM_OC_Start_IT+0xfa>
 800f8dc:	687b      	ldr	r3, [r7, #4]
 800f8de:	2202      	movs	r2, #2
 800f8e0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800f8e4:	e003      	b.n	800f8ee <HAL_TIM_OC_Start_IT+0x102>
 800f8e6:	687b      	ldr	r3, [r7, #4]
 800f8e8:	2202      	movs	r2, #2
 800f8ea:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  switch (Channel)
 800f8ee:	683b      	ldr	r3, [r7, #0]
 800f8f0:	2b0c      	cmp	r3, #12
 800f8f2:	d841      	bhi.n	800f978 <HAL_TIM_OC_Start_IT+0x18c>
 800f8f4:	a201      	add	r2, pc, #4	@ (adr r2, 800f8fc <HAL_TIM_OC_Start_IT+0x110>)
 800f8f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f8fa:	bf00      	nop
 800f8fc:	0800f931 	.word	0x0800f931
 800f900:	0800f979 	.word	0x0800f979
 800f904:	0800f979 	.word	0x0800f979
 800f908:	0800f979 	.word	0x0800f979
 800f90c:	0800f943 	.word	0x0800f943
 800f910:	0800f979 	.word	0x0800f979
 800f914:	0800f979 	.word	0x0800f979
 800f918:	0800f979 	.word	0x0800f979
 800f91c:	0800f955 	.word	0x0800f955
 800f920:	0800f979 	.word	0x0800f979
 800f924:	0800f979 	.word	0x0800f979
 800f928:	0800f979 	.word	0x0800f979
 800f92c:	0800f967 	.word	0x0800f967
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800f930:	687b      	ldr	r3, [r7, #4]
 800f932:	681b      	ldr	r3, [r3, #0]
 800f934:	68da      	ldr	r2, [r3, #12]
 800f936:	687b      	ldr	r3, [r7, #4]
 800f938:	681b      	ldr	r3, [r3, #0]
 800f93a:	f042 0202 	orr.w	r2, r2, #2
 800f93e:	60da      	str	r2, [r3, #12]
      break;
 800f940:	e01d      	b.n	800f97e <HAL_TIM_OC_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800f942:	687b      	ldr	r3, [r7, #4]
 800f944:	681b      	ldr	r3, [r3, #0]
 800f946:	68da      	ldr	r2, [r3, #12]
 800f948:	687b      	ldr	r3, [r7, #4]
 800f94a:	681b      	ldr	r3, [r3, #0]
 800f94c:	f042 0204 	orr.w	r2, r2, #4
 800f950:	60da      	str	r2, [r3, #12]
      break;
 800f952:	e014      	b.n	800f97e <HAL_TIM_OC_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 800f954:	687b      	ldr	r3, [r7, #4]
 800f956:	681b      	ldr	r3, [r3, #0]
 800f958:	68da      	ldr	r2, [r3, #12]
 800f95a:	687b      	ldr	r3, [r7, #4]
 800f95c:	681b      	ldr	r3, [r3, #0]
 800f95e:	f042 0208 	orr.w	r2, r2, #8
 800f962:	60da      	str	r2, [r3, #12]
      break;
 800f964:	e00b      	b.n	800f97e <HAL_TIM_OC_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 800f966:	687b      	ldr	r3, [r7, #4]
 800f968:	681b      	ldr	r3, [r3, #0]
 800f96a:	68da      	ldr	r2, [r3, #12]
 800f96c:	687b      	ldr	r3, [r7, #4]
 800f96e:	681b      	ldr	r3, [r3, #0]
 800f970:	f042 0210 	orr.w	r2, r2, #16
 800f974:	60da      	str	r2, [r3, #12]
      break;
 800f976:	e002      	b.n	800f97e <HAL_TIM_OC_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 800f978:	2301      	movs	r3, #1
 800f97a:	73fb      	strb	r3, [r7, #15]
      break;
 800f97c:	bf00      	nop
  }

  if (status == HAL_OK)
 800f97e:	7bfb      	ldrb	r3, [r7, #15]
 800f980:	2b00      	cmp	r3, #0
 800f982:	d16f      	bne.n	800fa64 <HAL_TIM_OC_Start_IT+0x278>
  {
    /* Enable the Output compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800f984:	687b      	ldr	r3, [r7, #4]
 800f986:	681b      	ldr	r3, [r3, #0]
 800f988:	2201      	movs	r2, #1
 800f98a:	6839      	ldr	r1, [r7, #0]
 800f98c:	4618      	mov	r0, r3
 800f98e:	f001 fcbf 	bl	8011310 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800f992:	687b      	ldr	r3, [r7, #4]
 800f994:	681b      	ldr	r3, [r3, #0]
 800f996:	4a36      	ldr	r2, [pc, #216]	@ (800fa70 <HAL_TIM_OC_Start_IT+0x284>)
 800f998:	4293      	cmp	r3, r2
 800f99a:	d013      	beq.n	800f9c4 <HAL_TIM_OC_Start_IT+0x1d8>
 800f99c:	687b      	ldr	r3, [r7, #4]
 800f99e:	681b      	ldr	r3, [r3, #0]
 800f9a0:	4a34      	ldr	r2, [pc, #208]	@ (800fa74 <HAL_TIM_OC_Start_IT+0x288>)
 800f9a2:	4293      	cmp	r3, r2
 800f9a4:	d00e      	beq.n	800f9c4 <HAL_TIM_OC_Start_IT+0x1d8>
 800f9a6:	687b      	ldr	r3, [r7, #4]
 800f9a8:	681b      	ldr	r3, [r3, #0]
 800f9aa:	4a33      	ldr	r2, [pc, #204]	@ (800fa78 <HAL_TIM_OC_Start_IT+0x28c>)
 800f9ac:	4293      	cmp	r3, r2
 800f9ae:	d009      	beq.n	800f9c4 <HAL_TIM_OC_Start_IT+0x1d8>
 800f9b0:	687b      	ldr	r3, [r7, #4]
 800f9b2:	681b      	ldr	r3, [r3, #0]
 800f9b4:	4a31      	ldr	r2, [pc, #196]	@ (800fa7c <HAL_TIM_OC_Start_IT+0x290>)
 800f9b6:	4293      	cmp	r3, r2
 800f9b8:	d004      	beq.n	800f9c4 <HAL_TIM_OC_Start_IT+0x1d8>
 800f9ba:	687b      	ldr	r3, [r7, #4]
 800f9bc:	681b      	ldr	r3, [r3, #0]
 800f9be:	4a30      	ldr	r2, [pc, #192]	@ (800fa80 <HAL_TIM_OC_Start_IT+0x294>)
 800f9c0:	4293      	cmp	r3, r2
 800f9c2:	d101      	bne.n	800f9c8 <HAL_TIM_OC_Start_IT+0x1dc>
 800f9c4:	2301      	movs	r3, #1
 800f9c6:	e000      	b.n	800f9ca <HAL_TIM_OC_Start_IT+0x1de>
 800f9c8:	2300      	movs	r3, #0
 800f9ca:	2b00      	cmp	r3, #0
 800f9cc:	d007      	beq.n	800f9de <HAL_TIM_OC_Start_IT+0x1f2>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 800f9ce:	687b      	ldr	r3, [r7, #4]
 800f9d0:	681b      	ldr	r3, [r3, #0]
 800f9d2:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800f9d4:	687b      	ldr	r3, [r7, #4]
 800f9d6:	681b      	ldr	r3, [r3, #0]
 800f9d8:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800f9dc:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800f9de:	687b      	ldr	r3, [r7, #4]
 800f9e0:	681b      	ldr	r3, [r3, #0]
 800f9e2:	4a23      	ldr	r2, [pc, #140]	@ (800fa70 <HAL_TIM_OC_Start_IT+0x284>)
 800f9e4:	4293      	cmp	r3, r2
 800f9e6:	d01d      	beq.n	800fa24 <HAL_TIM_OC_Start_IT+0x238>
 800f9e8:	687b      	ldr	r3, [r7, #4]
 800f9ea:	681b      	ldr	r3, [r3, #0]
 800f9ec:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800f9f0:	d018      	beq.n	800fa24 <HAL_TIM_OC_Start_IT+0x238>
 800f9f2:	687b      	ldr	r3, [r7, #4]
 800f9f4:	681b      	ldr	r3, [r3, #0]
 800f9f6:	4a23      	ldr	r2, [pc, #140]	@ (800fa84 <HAL_TIM_OC_Start_IT+0x298>)
 800f9f8:	4293      	cmp	r3, r2
 800f9fa:	d013      	beq.n	800fa24 <HAL_TIM_OC_Start_IT+0x238>
 800f9fc:	687b      	ldr	r3, [r7, #4]
 800f9fe:	681b      	ldr	r3, [r3, #0]
 800fa00:	4a21      	ldr	r2, [pc, #132]	@ (800fa88 <HAL_TIM_OC_Start_IT+0x29c>)
 800fa02:	4293      	cmp	r3, r2
 800fa04:	d00e      	beq.n	800fa24 <HAL_TIM_OC_Start_IT+0x238>
 800fa06:	687b      	ldr	r3, [r7, #4]
 800fa08:	681b      	ldr	r3, [r3, #0]
 800fa0a:	4a20      	ldr	r2, [pc, #128]	@ (800fa8c <HAL_TIM_OC_Start_IT+0x2a0>)
 800fa0c:	4293      	cmp	r3, r2
 800fa0e:	d009      	beq.n	800fa24 <HAL_TIM_OC_Start_IT+0x238>
 800fa10:	687b      	ldr	r3, [r7, #4]
 800fa12:	681b      	ldr	r3, [r3, #0]
 800fa14:	4a17      	ldr	r2, [pc, #92]	@ (800fa74 <HAL_TIM_OC_Start_IT+0x288>)
 800fa16:	4293      	cmp	r3, r2
 800fa18:	d004      	beq.n	800fa24 <HAL_TIM_OC_Start_IT+0x238>
 800fa1a:	687b      	ldr	r3, [r7, #4]
 800fa1c:	681b      	ldr	r3, [r3, #0]
 800fa1e:	4a16      	ldr	r2, [pc, #88]	@ (800fa78 <HAL_TIM_OC_Start_IT+0x28c>)
 800fa20:	4293      	cmp	r3, r2
 800fa22:	d115      	bne.n	800fa50 <HAL_TIM_OC_Start_IT+0x264>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800fa24:	687b      	ldr	r3, [r7, #4]
 800fa26:	681b      	ldr	r3, [r3, #0]
 800fa28:	689a      	ldr	r2, [r3, #8]
 800fa2a:	4b19      	ldr	r3, [pc, #100]	@ (800fa90 <HAL_TIM_OC_Start_IT+0x2a4>)
 800fa2c:	4013      	ands	r3, r2
 800fa2e:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800fa30:	68bb      	ldr	r3, [r7, #8]
 800fa32:	2b06      	cmp	r3, #6
 800fa34:	d015      	beq.n	800fa62 <HAL_TIM_OC_Start_IT+0x276>
 800fa36:	68bb      	ldr	r3, [r7, #8]
 800fa38:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800fa3c:	d011      	beq.n	800fa62 <HAL_TIM_OC_Start_IT+0x276>
      {
        __HAL_TIM_ENABLE(htim);
 800fa3e:	687b      	ldr	r3, [r7, #4]
 800fa40:	681b      	ldr	r3, [r3, #0]
 800fa42:	681a      	ldr	r2, [r3, #0]
 800fa44:	687b      	ldr	r3, [r7, #4]
 800fa46:	681b      	ldr	r3, [r3, #0]
 800fa48:	f042 0201 	orr.w	r2, r2, #1
 800fa4c:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800fa4e:	e008      	b.n	800fa62 <HAL_TIM_OC_Start_IT+0x276>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 800fa50:	687b      	ldr	r3, [r7, #4]
 800fa52:	681b      	ldr	r3, [r3, #0]
 800fa54:	681a      	ldr	r2, [r3, #0]
 800fa56:	687b      	ldr	r3, [r7, #4]
 800fa58:	681b      	ldr	r3, [r3, #0]
 800fa5a:	f042 0201 	orr.w	r2, r2, #1
 800fa5e:	601a      	str	r2, [r3, #0]
 800fa60:	e000      	b.n	800fa64 <HAL_TIM_OC_Start_IT+0x278>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800fa62:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 800fa64:	7bfb      	ldrb	r3, [r7, #15]
}
 800fa66:	4618      	mov	r0, r3
 800fa68:	3710      	adds	r7, #16
 800fa6a:	46bd      	mov	sp, r7
 800fa6c:	bd80      	pop	{r7, pc}
 800fa6e:	bf00      	nop
 800fa70:	40012c00 	.word	0x40012c00
 800fa74:	40013400 	.word	0x40013400
 800fa78:	40014000 	.word	0x40014000
 800fa7c:	40014400 	.word	0x40014400
 800fa80:	40014800 	.word	0x40014800
 800fa84:	40000400 	.word	0x40000400
 800fa88:	40000800 	.word	0x40000800
 800fa8c:	40000c00 	.word	0x40000c00
 800fa90:	00010007 	.word	0x00010007

0800fa94 <HAL_TIM_OC_Stop_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Stop_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800fa94:	b580      	push	{r7, lr}
 800fa96:	b084      	sub	sp, #16
 800fa98:	af00      	add	r7, sp, #0
 800fa9a:	6078      	str	r0, [r7, #4]
 800fa9c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800fa9e:	2300      	movs	r3, #0
 800faa0:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_CHANNEL(htim->Instance, Channel));

  switch (Channel)
 800faa2:	683b      	ldr	r3, [r7, #0]
 800faa4:	2b0c      	cmp	r3, #12
 800faa6:	d841      	bhi.n	800fb2c <HAL_TIM_OC_Stop_IT+0x98>
 800faa8:	a201      	add	r2, pc, #4	@ (adr r2, 800fab0 <HAL_TIM_OC_Stop_IT+0x1c>)
 800faaa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800faae:	bf00      	nop
 800fab0:	0800fae5 	.word	0x0800fae5
 800fab4:	0800fb2d 	.word	0x0800fb2d
 800fab8:	0800fb2d 	.word	0x0800fb2d
 800fabc:	0800fb2d 	.word	0x0800fb2d
 800fac0:	0800faf7 	.word	0x0800faf7
 800fac4:	0800fb2d 	.word	0x0800fb2d
 800fac8:	0800fb2d 	.word	0x0800fb2d
 800facc:	0800fb2d 	.word	0x0800fb2d
 800fad0:	0800fb09 	.word	0x0800fb09
 800fad4:	0800fb2d 	.word	0x0800fb2d
 800fad8:	0800fb2d 	.word	0x0800fb2d
 800fadc:	0800fb2d 	.word	0x0800fb2d
 800fae0:	0800fb1b 	.word	0x0800fb1b
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 800fae4:	687b      	ldr	r3, [r7, #4]
 800fae6:	681b      	ldr	r3, [r3, #0]
 800fae8:	68da      	ldr	r2, [r3, #12]
 800faea:	687b      	ldr	r3, [r7, #4]
 800faec:	681b      	ldr	r3, [r3, #0]
 800faee:	f022 0202 	bic.w	r2, r2, #2
 800faf2:	60da      	str	r2, [r3, #12]
      break;
 800faf4:	e01d      	b.n	800fb32 <HAL_TIM_OC_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 800faf6:	687b      	ldr	r3, [r7, #4]
 800faf8:	681b      	ldr	r3, [r3, #0]
 800fafa:	68da      	ldr	r2, [r3, #12]
 800fafc:	687b      	ldr	r3, [r7, #4]
 800fafe:	681b      	ldr	r3, [r3, #0]
 800fb00:	f022 0204 	bic.w	r2, r2, #4
 800fb04:	60da      	str	r2, [r3, #12]
      break;
 800fb06:	e014      	b.n	800fb32 <HAL_TIM_OC_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC3);
 800fb08:	687b      	ldr	r3, [r7, #4]
 800fb0a:	681b      	ldr	r3, [r3, #0]
 800fb0c:	68da      	ldr	r2, [r3, #12]
 800fb0e:	687b      	ldr	r3, [r7, #4]
 800fb10:	681b      	ldr	r3, [r3, #0]
 800fb12:	f022 0208 	bic.w	r2, r2, #8
 800fb16:	60da      	str	r2, [r3, #12]
      break;
 800fb18:	e00b      	b.n	800fb32 <HAL_TIM_OC_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC4);
 800fb1a:	687b      	ldr	r3, [r7, #4]
 800fb1c:	681b      	ldr	r3, [r3, #0]
 800fb1e:	68da      	ldr	r2, [r3, #12]
 800fb20:	687b      	ldr	r3, [r7, #4]
 800fb22:	681b      	ldr	r3, [r3, #0]
 800fb24:	f022 0210 	bic.w	r2, r2, #16
 800fb28:	60da      	str	r2, [r3, #12]
      break;
 800fb2a:	e002      	b.n	800fb32 <HAL_TIM_OC_Stop_IT+0x9e>
    }

    default:
      status = HAL_ERROR;
 800fb2c:	2301      	movs	r3, #1
 800fb2e:	73fb      	strb	r3, [r7, #15]
      break;
 800fb30:	bf00      	nop
  }

  if (status == HAL_OK)
 800fb32:	7bfb      	ldrb	r3, [r7, #15]
 800fb34:	2b00      	cmp	r3, #0
 800fb36:	f040 8081 	bne.w	800fc3c <HAL_TIM_OC_Stop_IT+0x1a8>
  {
    /* Disable the Output compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 800fb3a:	687b      	ldr	r3, [r7, #4]
 800fb3c:	681b      	ldr	r3, [r3, #0]
 800fb3e:	2200      	movs	r2, #0
 800fb40:	6839      	ldr	r1, [r7, #0]
 800fb42:	4618      	mov	r0, r3
 800fb44:	f001 fbe4 	bl	8011310 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800fb48:	687b      	ldr	r3, [r7, #4]
 800fb4a:	681b      	ldr	r3, [r3, #0]
 800fb4c:	4a3e      	ldr	r2, [pc, #248]	@ (800fc48 <HAL_TIM_OC_Stop_IT+0x1b4>)
 800fb4e:	4293      	cmp	r3, r2
 800fb50:	d013      	beq.n	800fb7a <HAL_TIM_OC_Stop_IT+0xe6>
 800fb52:	687b      	ldr	r3, [r7, #4]
 800fb54:	681b      	ldr	r3, [r3, #0]
 800fb56:	4a3d      	ldr	r2, [pc, #244]	@ (800fc4c <HAL_TIM_OC_Stop_IT+0x1b8>)
 800fb58:	4293      	cmp	r3, r2
 800fb5a:	d00e      	beq.n	800fb7a <HAL_TIM_OC_Stop_IT+0xe6>
 800fb5c:	687b      	ldr	r3, [r7, #4]
 800fb5e:	681b      	ldr	r3, [r3, #0]
 800fb60:	4a3b      	ldr	r2, [pc, #236]	@ (800fc50 <HAL_TIM_OC_Stop_IT+0x1bc>)
 800fb62:	4293      	cmp	r3, r2
 800fb64:	d009      	beq.n	800fb7a <HAL_TIM_OC_Stop_IT+0xe6>
 800fb66:	687b      	ldr	r3, [r7, #4]
 800fb68:	681b      	ldr	r3, [r3, #0]
 800fb6a:	4a3a      	ldr	r2, [pc, #232]	@ (800fc54 <HAL_TIM_OC_Stop_IT+0x1c0>)
 800fb6c:	4293      	cmp	r3, r2
 800fb6e:	d004      	beq.n	800fb7a <HAL_TIM_OC_Stop_IT+0xe6>
 800fb70:	687b      	ldr	r3, [r7, #4]
 800fb72:	681b      	ldr	r3, [r3, #0]
 800fb74:	4a38      	ldr	r2, [pc, #224]	@ (800fc58 <HAL_TIM_OC_Stop_IT+0x1c4>)
 800fb76:	4293      	cmp	r3, r2
 800fb78:	d101      	bne.n	800fb7e <HAL_TIM_OC_Stop_IT+0xea>
 800fb7a:	2301      	movs	r3, #1
 800fb7c:	e000      	b.n	800fb80 <HAL_TIM_OC_Stop_IT+0xec>
 800fb7e:	2300      	movs	r3, #0
 800fb80:	2b00      	cmp	r3, #0
 800fb82:	d017      	beq.n	800fbb4 <HAL_TIM_OC_Stop_IT+0x120>
    {
      /* Disable the Main Output */
      __HAL_TIM_MOE_DISABLE(htim);
 800fb84:	687b      	ldr	r3, [r7, #4]
 800fb86:	681b      	ldr	r3, [r3, #0]
 800fb88:	6a1a      	ldr	r2, [r3, #32]
 800fb8a:	f241 1311 	movw	r3, #4369	@ 0x1111
 800fb8e:	4013      	ands	r3, r2
 800fb90:	2b00      	cmp	r3, #0
 800fb92:	d10f      	bne.n	800fbb4 <HAL_TIM_OC_Stop_IT+0x120>
 800fb94:	687b      	ldr	r3, [r7, #4]
 800fb96:	681b      	ldr	r3, [r3, #0]
 800fb98:	6a1a      	ldr	r2, [r3, #32]
 800fb9a:	f240 4344 	movw	r3, #1092	@ 0x444
 800fb9e:	4013      	ands	r3, r2
 800fba0:	2b00      	cmp	r3, #0
 800fba2:	d107      	bne.n	800fbb4 <HAL_TIM_OC_Stop_IT+0x120>
 800fba4:	687b      	ldr	r3, [r7, #4]
 800fba6:	681b      	ldr	r3, [r3, #0]
 800fba8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800fbaa:	687b      	ldr	r3, [r7, #4]
 800fbac:	681b      	ldr	r3, [r3, #0]
 800fbae:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800fbb2:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 800fbb4:	687b      	ldr	r3, [r7, #4]
 800fbb6:	681b      	ldr	r3, [r3, #0]
 800fbb8:	6a1a      	ldr	r2, [r3, #32]
 800fbba:	f241 1311 	movw	r3, #4369	@ 0x1111
 800fbbe:	4013      	ands	r3, r2
 800fbc0:	2b00      	cmp	r3, #0
 800fbc2:	d10f      	bne.n	800fbe4 <HAL_TIM_OC_Stop_IT+0x150>
 800fbc4:	687b      	ldr	r3, [r7, #4]
 800fbc6:	681b      	ldr	r3, [r3, #0]
 800fbc8:	6a1a      	ldr	r2, [r3, #32]
 800fbca:	f240 4344 	movw	r3, #1092	@ 0x444
 800fbce:	4013      	ands	r3, r2
 800fbd0:	2b00      	cmp	r3, #0
 800fbd2:	d107      	bne.n	800fbe4 <HAL_TIM_OC_Stop_IT+0x150>
 800fbd4:	687b      	ldr	r3, [r7, #4]
 800fbd6:	681b      	ldr	r3, [r3, #0]
 800fbd8:	681a      	ldr	r2, [r3, #0]
 800fbda:	687b      	ldr	r3, [r7, #4]
 800fbdc:	681b      	ldr	r3, [r3, #0]
 800fbde:	f022 0201 	bic.w	r2, r2, #1
 800fbe2:	601a      	str	r2, [r3, #0]

    /* Set the TIM channel state */
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800fbe4:	683b      	ldr	r3, [r7, #0]
 800fbe6:	2b00      	cmp	r3, #0
 800fbe8:	d104      	bne.n	800fbf4 <HAL_TIM_OC_Stop_IT+0x160>
 800fbea:	687b      	ldr	r3, [r7, #4]
 800fbec:	2201      	movs	r2, #1
 800fbee:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800fbf2:	e023      	b.n	800fc3c <HAL_TIM_OC_Stop_IT+0x1a8>
 800fbf4:	683b      	ldr	r3, [r7, #0]
 800fbf6:	2b04      	cmp	r3, #4
 800fbf8:	d104      	bne.n	800fc04 <HAL_TIM_OC_Stop_IT+0x170>
 800fbfa:	687b      	ldr	r3, [r7, #4]
 800fbfc:	2201      	movs	r2, #1
 800fbfe:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800fc02:	e01b      	b.n	800fc3c <HAL_TIM_OC_Stop_IT+0x1a8>
 800fc04:	683b      	ldr	r3, [r7, #0]
 800fc06:	2b08      	cmp	r3, #8
 800fc08:	d104      	bne.n	800fc14 <HAL_TIM_OC_Stop_IT+0x180>
 800fc0a:	687b      	ldr	r3, [r7, #4]
 800fc0c:	2201      	movs	r2, #1
 800fc0e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800fc12:	e013      	b.n	800fc3c <HAL_TIM_OC_Stop_IT+0x1a8>
 800fc14:	683b      	ldr	r3, [r7, #0]
 800fc16:	2b0c      	cmp	r3, #12
 800fc18:	d104      	bne.n	800fc24 <HAL_TIM_OC_Stop_IT+0x190>
 800fc1a:	687b      	ldr	r3, [r7, #4]
 800fc1c:	2201      	movs	r2, #1
 800fc1e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800fc22:	e00b      	b.n	800fc3c <HAL_TIM_OC_Stop_IT+0x1a8>
 800fc24:	683b      	ldr	r3, [r7, #0]
 800fc26:	2b10      	cmp	r3, #16
 800fc28:	d104      	bne.n	800fc34 <HAL_TIM_OC_Stop_IT+0x1a0>
 800fc2a:	687b      	ldr	r3, [r7, #4]
 800fc2c:	2201      	movs	r2, #1
 800fc2e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800fc32:	e003      	b.n	800fc3c <HAL_TIM_OC_Stop_IT+0x1a8>
 800fc34:	687b      	ldr	r3, [r7, #4]
 800fc36:	2201      	movs	r2, #1
 800fc38:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  }

  /* Return function status */
  return status;
 800fc3c:	7bfb      	ldrb	r3, [r7, #15]
}
 800fc3e:	4618      	mov	r0, r3
 800fc40:	3710      	adds	r7, #16
 800fc42:	46bd      	mov	sp, r7
 800fc44:	bd80      	pop	{r7, pc}
 800fc46:	bf00      	nop
 800fc48:	40012c00 	.word	0x40012c00
 800fc4c:	40013400 	.word	0x40013400
 800fc50:	40014000 	.word	0x40014000
 800fc54:	40014400 	.word	0x40014400
 800fc58:	40014800 	.word	0x40014800

0800fc5c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800fc5c:	b580      	push	{r7, lr}
 800fc5e:	b082      	sub	sp, #8
 800fc60:	af00      	add	r7, sp, #0
 800fc62:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800fc64:	687b      	ldr	r3, [r7, #4]
 800fc66:	2b00      	cmp	r3, #0
 800fc68:	d101      	bne.n	800fc6e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800fc6a:	2301      	movs	r3, #1
 800fc6c:	e049      	b.n	800fd02 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800fc6e:	687b      	ldr	r3, [r7, #4]
 800fc70:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800fc74:	b2db      	uxtb	r3, r3
 800fc76:	2b00      	cmp	r3, #0
 800fc78:	d106      	bne.n	800fc88 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800fc7a:	687b      	ldr	r3, [r7, #4]
 800fc7c:	2200      	movs	r2, #0
 800fc7e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800fc82:	6878      	ldr	r0, [r7, #4]
 800fc84:	f000 f841 	bl	800fd0a <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800fc88:	687b      	ldr	r3, [r7, #4]
 800fc8a:	2202      	movs	r2, #2
 800fc8c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800fc90:	687b      	ldr	r3, [r7, #4]
 800fc92:	681a      	ldr	r2, [r3, #0]
 800fc94:	687b      	ldr	r3, [r7, #4]
 800fc96:	3304      	adds	r3, #4
 800fc98:	4619      	mov	r1, r3
 800fc9a:	4610      	mov	r0, r2
 800fc9c:	f000 fd6a 	bl	8010774 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800fca0:	687b      	ldr	r3, [r7, #4]
 800fca2:	2201      	movs	r2, #1
 800fca4:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800fca8:	687b      	ldr	r3, [r7, #4]
 800fcaa:	2201      	movs	r2, #1
 800fcac:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800fcb0:	687b      	ldr	r3, [r7, #4]
 800fcb2:	2201      	movs	r2, #1
 800fcb4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800fcb8:	687b      	ldr	r3, [r7, #4]
 800fcba:	2201      	movs	r2, #1
 800fcbc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800fcc0:	687b      	ldr	r3, [r7, #4]
 800fcc2:	2201      	movs	r2, #1
 800fcc4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800fcc8:	687b      	ldr	r3, [r7, #4]
 800fcca:	2201      	movs	r2, #1
 800fccc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800fcd0:	687b      	ldr	r3, [r7, #4]
 800fcd2:	2201      	movs	r2, #1
 800fcd4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800fcd8:	687b      	ldr	r3, [r7, #4]
 800fcda:	2201      	movs	r2, #1
 800fcdc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800fce0:	687b      	ldr	r3, [r7, #4]
 800fce2:	2201      	movs	r2, #1
 800fce4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800fce8:	687b      	ldr	r3, [r7, #4]
 800fcea:	2201      	movs	r2, #1
 800fcec:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800fcf0:	687b      	ldr	r3, [r7, #4]
 800fcf2:	2201      	movs	r2, #1
 800fcf4:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800fcf8:	687b      	ldr	r3, [r7, #4]
 800fcfa:	2201      	movs	r2, #1
 800fcfc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800fd00:	2300      	movs	r3, #0
}
 800fd02:	4618      	mov	r0, r3
 800fd04:	3708      	adds	r7, #8
 800fd06:	46bd      	mov	sp, r7
 800fd08:	bd80      	pop	{r7, pc}

0800fd0a <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800fd0a:	b480      	push	{r7}
 800fd0c:	b083      	sub	sp, #12
 800fd0e:	af00      	add	r7, sp, #0
 800fd10:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800fd12:	bf00      	nop
 800fd14:	370c      	adds	r7, #12
 800fd16:	46bd      	mov	sp, r7
 800fd18:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd1c:	4770      	bx	lr
	...

0800fd20 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800fd20:	b580      	push	{r7, lr}
 800fd22:	b084      	sub	sp, #16
 800fd24:	af00      	add	r7, sp, #0
 800fd26:	6078      	str	r0, [r7, #4]
 800fd28:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800fd2a:	683b      	ldr	r3, [r7, #0]
 800fd2c:	2b00      	cmp	r3, #0
 800fd2e:	d109      	bne.n	800fd44 <HAL_TIM_PWM_Start+0x24>
 800fd30:	687b      	ldr	r3, [r7, #4]
 800fd32:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800fd36:	b2db      	uxtb	r3, r3
 800fd38:	2b01      	cmp	r3, #1
 800fd3a:	bf14      	ite	ne
 800fd3c:	2301      	movne	r3, #1
 800fd3e:	2300      	moveq	r3, #0
 800fd40:	b2db      	uxtb	r3, r3
 800fd42:	e03c      	b.n	800fdbe <HAL_TIM_PWM_Start+0x9e>
 800fd44:	683b      	ldr	r3, [r7, #0]
 800fd46:	2b04      	cmp	r3, #4
 800fd48:	d109      	bne.n	800fd5e <HAL_TIM_PWM_Start+0x3e>
 800fd4a:	687b      	ldr	r3, [r7, #4]
 800fd4c:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800fd50:	b2db      	uxtb	r3, r3
 800fd52:	2b01      	cmp	r3, #1
 800fd54:	bf14      	ite	ne
 800fd56:	2301      	movne	r3, #1
 800fd58:	2300      	moveq	r3, #0
 800fd5a:	b2db      	uxtb	r3, r3
 800fd5c:	e02f      	b.n	800fdbe <HAL_TIM_PWM_Start+0x9e>
 800fd5e:	683b      	ldr	r3, [r7, #0]
 800fd60:	2b08      	cmp	r3, #8
 800fd62:	d109      	bne.n	800fd78 <HAL_TIM_PWM_Start+0x58>
 800fd64:	687b      	ldr	r3, [r7, #4]
 800fd66:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800fd6a:	b2db      	uxtb	r3, r3
 800fd6c:	2b01      	cmp	r3, #1
 800fd6e:	bf14      	ite	ne
 800fd70:	2301      	movne	r3, #1
 800fd72:	2300      	moveq	r3, #0
 800fd74:	b2db      	uxtb	r3, r3
 800fd76:	e022      	b.n	800fdbe <HAL_TIM_PWM_Start+0x9e>
 800fd78:	683b      	ldr	r3, [r7, #0]
 800fd7a:	2b0c      	cmp	r3, #12
 800fd7c:	d109      	bne.n	800fd92 <HAL_TIM_PWM_Start+0x72>
 800fd7e:	687b      	ldr	r3, [r7, #4]
 800fd80:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800fd84:	b2db      	uxtb	r3, r3
 800fd86:	2b01      	cmp	r3, #1
 800fd88:	bf14      	ite	ne
 800fd8a:	2301      	movne	r3, #1
 800fd8c:	2300      	moveq	r3, #0
 800fd8e:	b2db      	uxtb	r3, r3
 800fd90:	e015      	b.n	800fdbe <HAL_TIM_PWM_Start+0x9e>
 800fd92:	683b      	ldr	r3, [r7, #0]
 800fd94:	2b10      	cmp	r3, #16
 800fd96:	d109      	bne.n	800fdac <HAL_TIM_PWM_Start+0x8c>
 800fd98:	687b      	ldr	r3, [r7, #4]
 800fd9a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800fd9e:	b2db      	uxtb	r3, r3
 800fda0:	2b01      	cmp	r3, #1
 800fda2:	bf14      	ite	ne
 800fda4:	2301      	movne	r3, #1
 800fda6:	2300      	moveq	r3, #0
 800fda8:	b2db      	uxtb	r3, r3
 800fdaa:	e008      	b.n	800fdbe <HAL_TIM_PWM_Start+0x9e>
 800fdac:	687b      	ldr	r3, [r7, #4]
 800fdae:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800fdb2:	b2db      	uxtb	r3, r3
 800fdb4:	2b01      	cmp	r3, #1
 800fdb6:	bf14      	ite	ne
 800fdb8:	2301      	movne	r3, #1
 800fdba:	2300      	moveq	r3, #0
 800fdbc:	b2db      	uxtb	r3, r3
 800fdbe:	2b00      	cmp	r3, #0
 800fdc0:	d001      	beq.n	800fdc6 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800fdc2:	2301      	movs	r3, #1
 800fdc4:	e09c      	b.n	800ff00 <HAL_TIM_PWM_Start+0x1e0>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800fdc6:	683b      	ldr	r3, [r7, #0]
 800fdc8:	2b00      	cmp	r3, #0
 800fdca:	d104      	bne.n	800fdd6 <HAL_TIM_PWM_Start+0xb6>
 800fdcc:	687b      	ldr	r3, [r7, #4]
 800fdce:	2202      	movs	r2, #2
 800fdd0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800fdd4:	e023      	b.n	800fe1e <HAL_TIM_PWM_Start+0xfe>
 800fdd6:	683b      	ldr	r3, [r7, #0]
 800fdd8:	2b04      	cmp	r3, #4
 800fdda:	d104      	bne.n	800fde6 <HAL_TIM_PWM_Start+0xc6>
 800fddc:	687b      	ldr	r3, [r7, #4]
 800fdde:	2202      	movs	r2, #2
 800fde0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800fde4:	e01b      	b.n	800fe1e <HAL_TIM_PWM_Start+0xfe>
 800fde6:	683b      	ldr	r3, [r7, #0]
 800fde8:	2b08      	cmp	r3, #8
 800fdea:	d104      	bne.n	800fdf6 <HAL_TIM_PWM_Start+0xd6>
 800fdec:	687b      	ldr	r3, [r7, #4]
 800fdee:	2202      	movs	r2, #2
 800fdf0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800fdf4:	e013      	b.n	800fe1e <HAL_TIM_PWM_Start+0xfe>
 800fdf6:	683b      	ldr	r3, [r7, #0]
 800fdf8:	2b0c      	cmp	r3, #12
 800fdfa:	d104      	bne.n	800fe06 <HAL_TIM_PWM_Start+0xe6>
 800fdfc:	687b      	ldr	r3, [r7, #4]
 800fdfe:	2202      	movs	r2, #2
 800fe00:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800fe04:	e00b      	b.n	800fe1e <HAL_TIM_PWM_Start+0xfe>
 800fe06:	683b      	ldr	r3, [r7, #0]
 800fe08:	2b10      	cmp	r3, #16
 800fe0a:	d104      	bne.n	800fe16 <HAL_TIM_PWM_Start+0xf6>
 800fe0c:	687b      	ldr	r3, [r7, #4]
 800fe0e:	2202      	movs	r2, #2
 800fe10:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800fe14:	e003      	b.n	800fe1e <HAL_TIM_PWM_Start+0xfe>
 800fe16:	687b      	ldr	r3, [r7, #4]
 800fe18:	2202      	movs	r2, #2
 800fe1a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800fe1e:	687b      	ldr	r3, [r7, #4]
 800fe20:	681b      	ldr	r3, [r3, #0]
 800fe22:	2201      	movs	r2, #1
 800fe24:	6839      	ldr	r1, [r7, #0]
 800fe26:	4618      	mov	r0, r3
 800fe28:	f001 fa72 	bl	8011310 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800fe2c:	687b      	ldr	r3, [r7, #4]
 800fe2e:	681b      	ldr	r3, [r3, #0]
 800fe30:	4a35      	ldr	r2, [pc, #212]	@ (800ff08 <HAL_TIM_PWM_Start+0x1e8>)
 800fe32:	4293      	cmp	r3, r2
 800fe34:	d013      	beq.n	800fe5e <HAL_TIM_PWM_Start+0x13e>
 800fe36:	687b      	ldr	r3, [r7, #4]
 800fe38:	681b      	ldr	r3, [r3, #0]
 800fe3a:	4a34      	ldr	r2, [pc, #208]	@ (800ff0c <HAL_TIM_PWM_Start+0x1ec>)
 800fe3c:	4293      	cmp	r3, r2
 800fe3e:	d00e      	beq.n	800fe5e <HAL_TIM_PWM_Start+0x13e>
 800fe40:	687b      	ldr	r3, [r7, #4]
 800fe42:	681b      	ldr	r3, [r3, #0]
 800fe44:	4a32      	ldr	r2, [pc, #200]	@ (800ff10 <HAL_TIM_PWM_Start+0x1f0>)
 800fe46:	4293      	cmp	r3, r2
 800fe48:	d009      	beq.n	800fe5e <HAL_TIM_PWM_Start+0x13e>
 800fe4a:	687b      	ldr	r3, [r7, #4]
 800fe4c:	681b      	ldr	r3, [r3, #0]
 800fe4e:	4a31      	ldr	r2, [pc, #196]	@ (800ff14 <HAL_TIM_PWM_Start+0x1f4>)
 800fe50:	4293      	cmp	r3, r2
 800fe52:	d004      	beq.n	800fe5e <HAL_TIM_PWM_Start+0x13e>
 800fe54:	687b      	ldr	r3, [r7, #4]
 800fe56:	681b      	ldr	r3, [r3, #0]
 800fe58:	4a2f      	ldr	r2, [pc, #188]	@ (800ff18 <HAL_TIM_PWM_Start+0x1f8>)
 800fe5a:	4293      	cmp	r3, r2
 800fe5c:	d101      	bne.n	800fe62 <HAL_TIM_PWM_Start+0x142>
 800fe5e:	2301      	movs	r3, #1
 800fe60:	e000      	b.n	800fe64 <HAL_TIM_PWM_Start+0x144>
 800fe62:	2300      	movs	r3, #0
 800fe64:	2b00      	cmp	r3, #0
 800fe66:	d007      	beq.n	800fe78 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800fe68:	687b      	ldr	r3, [r7, #4]
 800fe6a:	681b      	ldr	r3, [r3, #0]
 800fe6c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800fe6e:	687b      	ldr	r3, [r7, #4]
 800fe70:	681b      	ldr	r3, [r3, #0]
 800fe72:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800fe76:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800fe78:	687b      	ldr	r3, [r7, #4]
 800fe7a:	681b      	ldr	r3, [r3, #0]
 800fe7c:	4a22      	ldr	r2, [pc, #136]	@ (800ff08 <HAL_TIM_PWM_Start+0x1e8>)
 800fe7e:	4293      	cmp	r3, r2
 800fe80:	d01d      	beq.n	800febe <HAL_TIM_PWM_Start+0x19e>
 800fe82:	687b      	ldr	r3, [r7, #4]
 800fe84:	681b      	ldr	r3, [r3, #0]
 800fe86:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800fe8a:	d018      	beq.n	800febe <HAL_TIM_PWM_Start+0x19e>
 800fe8c:	687b      	ldr	r3, [r7, #4]
 800fe8e:	681b      	ldr	r3, [r3, #0]
 800fe90:	4a22      	ldr	r2, [pc, #136]	@ (800ff1c <HAL_TIM_PWM_Start+0x1fc>)
 800fe92:	4293      	cmp	r3, r2
 800fe94:	d013      	beq.n	800febe <HAL_TIM_PWM_Start+0x19e>
 800fe96:	687b      	ldr	r3, [r7, #4]
 800fe98:	681b      	ldr	r3, [r3, #0]
 800fe9a:	4a21      	ldr	r2, [pc, #132]	@ (800ff20 <HAL_TIM_PWM_Start+0x200>)
 800fe9c:	4293      	cmp	r3, r2
 800fe9e:	d00e      	beq.n	800febe <HAL_TIM_PWM_Start+0x19e>
 800fea0:	687b      	ldr	r3, [r7, #4]
 800fea2:	681b      	ldr	r3, [r3, #0]
 800fea4:	4a1f      	ldr	r2, [pc, #124]	@ (800ff24 <HAL_TIM_PWM_Start+0x204>)
 800fea6:	4293      	cmp	r3, r2
 800fea8:	d009      	beq.n	800febe <HAL_TIM_PWM_Start+0x19e>
 800feaa:	687b      	ldr	r3, [r7, #4]
 800feac:	681b      	ldr	r3, [r3, #0]
 800feae:	4a17      	ldr	r2, [pc, #92]	@ (800ff0c <HAL_TIM_PWM_Start+0x1ec>)
 800feb0:	4293      	cmp	r3, r2
 800feb2:	d004      	beq.n	800febe <HAL_TIM_PWM_Start+0x19e>
 800feb4:	687b      	ldr	r3, [r7, #4]
 800feb6:	681b      	ldr	r3, [r3, #0]
 800feb8:	4a15      	ldr	r2, [pc, #84]	@ (800ff10 <HAL_TIM_PWM_Start+0x1f0>)
 800feba:	4293      	cmp	r3, r2
 800febc:	d115      	bne.n	800feea <HAL_TIM_PWM_Start+0x1ca>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800febe:	687b      	ldr	r3, [r7, #4]
 800fec0:	681b      	ldr	r3, [r3, #0]
 800fec2:	689a      	ldr	r2, [r3, #8]
 800fec4:	4b18      	ldr	r3, [pc, #96]	@ (800ff28 <HAL_TIM_PWM_Start+0x208>)
 800fec6:	4013      	ands	r3, r2
 800fec8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800feca:	68fb      	ldr	r3, [r7, #12]
 800fecc:	2b06      	cmp	r3, #6
 800fece:	d015      	beq.n	800fefc <HAL_TIM_PWM_Start+0x1dc>
 800fed0:	68fb      	ldr	r3, [r7, #12]
 800fed2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800fed6:	d011      	beq.n	800fefc <HAL_TIM_PWM_Start+0x1dc>
    {
      __HAL_TIM_ENABLE(htim);
 800fed8:	687b      	ldr	r3, [r7, #4]
 800feda:	681b      	ldr	r3, [r3, #0]
 800fedc:	681a      	ldr	r2, [r3, #0]
 800fede:	687b      	ldr	r3, [r7, #4]
 800fee0:	681b      	ldr	r3, [r3, #0]
 800fee2:	f042 0201 	orr.w	r2, r2, #1
 800fee6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800fee8:	e008      	b.n	800fefc <HAL_TIM_PWM_Start+0x1dc>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800feea:	687b      	ldr	r3, [r7, #4]
 800feec:	681b      	ldr	r3, [r3, #0]
 800feee:	681a      	ldr	r2, [r3, #0]
 800fef0:	687b      	ldr	r3, [r7, #4]
 800fef2:	681b      	ldr	r3, [r3, #0]
 800fef4:	f042 0201 	orr.w	r2, r2, #1
 800fef8:	601a      	str	r2, [r3, #0]
 800fefa:	e000      	b.n	800fefe <HAL_TIM_PWM_Start+0x1de>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800fefc:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800fefe:	2300      	movs	r3, #0
}
 800ff00:	4618      	mov	r0, r3
 800ff02:	3710      	adds	r7, #16
 800ff04:	46bd      	mov	sp, r7
 800ff06:	bd80      	pop	{r7, pc}
 800ff08:	40012c00 	.word	0x40012c00
 800ff0c:	40013400 	.word	0x40013400
 800ff10:	40014000 	.word	0x40014000
 800ff14:	40014400 	.word	0x40014400
 800ff18:	40014800 	.word	0x40014800
 800ff1c:	40000400 	.word	0x40000400
 800ff20:	40000800 	.word	0x40000800
 800ff24:	40000c00 	.word	0x40000c00
 800ff28:	00010007 	.word	0x00010007

0800ff2c <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800ff2c:	b580      	push	{r7, lr}
 800ff2e:	b082      	sub	sp, #8
 800ff30:	af00      	add	r7, sp, #0
 800ff32:	6078      	str	r0, [r7, #4]
 800ff34:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 800ff36:	687b      	ldr	r3, [r7, #4]
 800ff38:	681b      	ldr	r3, [r3, #0]
 800ff3a:	2200      	movs	r2, #0
 800ff3c:	6839      	ldr	r1, [r7, #0]
 800ff3e:	4618      	mov	r0, r3
 800ff40:	f001 f9e6 	bl	8011310 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800ff44:	687b      	ldr	r3, [r7, #4]
 800ff46:	681b      	ldr	r3, [r3, #0]
 800ff48:	4a3e      	ldr	r2, [pc, #248]	@ (8010044 <HAL_TIM_PWM_Stop+0x118>)
 800ff4a:	4293      	cmp	r3, r2
 800ff4c:	d013      	beq.n	800ff76 <HAL_TIM_PWM_Stop+0x4a>
 800ff4e:	687b      	ldr	r3, [r7, #4]
 800ff50:	681b      	ldr	r3, [r3, #0]
 800ff52:	4a3d      	ldr	r2, [pc, #244]	@ (8010048 <HAL_TIM_PWM_Stop+0x11c>)
 800ff54:	4293      	cmp	r3, r2
 800ff56:	d00e      	beq.n	800ff76 <HAL_TIM_PWM_Stop+0x4a>
 800ff58:	687b      	ldr	r3, [r7, #4]
 800ff5a:	681b      	ldr	r3, [r3, #0]
 800ff5c:	4a3b      	ldr	r2, [pc, #236]	@ (801004c <HAL_TIM_PWM_Stop+0x120>)
 800ff5e:	4293      	cmp	r3, r2
 800ff60:	d009      	beq.n	800ff76 <HAL_TIM_PWM_Stop+0x4a>
 800ff62:	687b      	ldr	r3, [r7, #4]
 800ff64:	681b      	ldr	r3, [r3, #0]
 800ff66:	4a3a      	ldr	r2, [pc, #232]	@ (8010050 <HAL_TIM_PWM_Stop+0x124>)
 800ff68:	4293      	cmp	r3, r2
 800ff6a:	d004      	beq.n	800ff76 <HAL_TIM_PWM_Stop+0x4a>
 800ff6c:	687b      	ldr	r3, [r7, #4]
 800ff6e:	681b      	ldr	r3, [r3, #0]
 800ff70:	4a38      	ldr	r2, [pc, #224]	@ (8010054 <HAL_TIM_PWM_Stop+0x128>)
 800ff72:	4293      	cmp	r3, r2
 800ff74:	d101      	bne.n	800ff7a <HAL_TIM_PWM_Stop+0x4e>
 800ff76:	2301      	movs	r3, #1
 800ff78:	e000      	b.n	800ff7c <HAL_TIM_PWM_Stop+0x50>
 800ff7a:	2300      	movs	r3, #0
 800ff7c:	2b00      	cmp	r3, #0
 800ff7e:	d017      	beq.n	800ffb0 <HAL_TIM_PWM_Stop+0x84>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 800ff80:	687b      	ldr	r3, [r7, #4]
 800ff82:	681b      	ldr	r3, [r3, #0]
 800ff84:	6a1a      	ldr	r2, [r3, #32]
 800ff86:	f241 1311 	movw	r3, #4369	@ 0x1111
 800ff8a:	4013      	ands	r3, r2
 800ff8c:	2b00      	cmp	r3, #0
 800ff8e:	d10f      	bne.n	800ffb0 <HAL_TIM_PWM_Stop+0x84>
 800ff90:	687b      	ldr	r3, [r7, #4]
 800ff92:	681b      	ldr	r3, [r3, #0]
 800ff94:	6a1a      	ldr	r2, [r3, #32]
 800ff96:	f240 4344 	movw	r3, #1092	@ 0x444
 800ff9a:	4013      	ands	r3, r2
 800ff9c:	2b00      	cmp	r3, #0
 800ff9e:	d107      	bne.n	800ffb0 <HAL_TIM_PWM_Stop+0x84>
 800ffa0:	687b      	ldr	r3, [r7, #4]
 800ffa2:	681b      	ldr	r3, [r3, #0]
 800ffa4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800ffa6:	687b      	ldr	r3, [r7, #4]
 800ffa8:	681b      	ldr	r3, [r3, #0]
 800ffaa:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800ffae:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800ffb0:	687b      	ldr	r3, [r7, #4]
 800ffb2:	681b      	ldr	r3, [r3, #0]
 800ffb4:	6a1a      	ldr	r2, [r3, #32]
 800ffb6:	f241 1311 	movw	r3, #4369	@ 0x1111
 800ffba:	4013      	ands	r3, r2
 800ffbc:	2b00      	cmp	r3, #0
 800ffbe:	d10f      	bne.n	800ffe0 <HAL_TIM_PWM_Stop+0xb4>
 800ffc0:	687b      	ldr	r3, [r7, #4]
 800ffc2:	681b      	ldr	r3, [r3, #0]
 800ffc4:	6a1a      	ldr	r2, [r3, #32]
 800ffc6:	f240 4344 	movw	r3, #1092	@ 0x444
 800ffca:	4013      	ands	r3, r2
 800ffcc:	2b00      	cmp	r3, #0
 800ffce:	d107      	bne.n	800ffe0 <HAL_TIM_PWM_Stop+0xb4>
 800ffd0:	687b      	ldr	r3, [r7, #4]
 800ffd2:	681b      	ldr	r3, [r3, #0]
 800ffd4:	681a      	ldr	r2, [r3, #0]
 800ffd6:	687b      	ldr	r3, [r7, #4]
 800ffd8:	681b      	ldr	r3, [r3, #0]
 800ffda:	f022 0201 	bic.w	r2, r2, #1
 800ffde:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800ffe0:	683b      	ldr	r3, [r7, #0]
 800ffe2:	2b00      	cmp	r3, #0
 800ffe4:	d104      	bne.n	800fff0 <HAL_TIM_PWM_Stop+0xc4>
 800ffe6:	687b      	ldr	r3, [r7, #4]
 800ffe8:	2201      	movs	r2, #1
 800ffea:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800ffee:	e023      	b.n	8010038 <HAL_TIM_PWM_Stop+0x10c>
 800fff0:	683b      	ldr	r3, [r7, #0]
 800fff2:	2b04      	cmp	r3, #4
 800fff4:	d104      	bne.n	8010000 <HAL_TIM_PWM_Stop+0xd4>
 800fff6:	687b      	ldr	r3, [r7, #4]
 800fff8:	2201      	movs	r2, #1
 800fffa:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800fffe:	e01b      	b.n	8010038 <HAL_TIM_PWM_Stop+0x10c>
 8010000:	683b      	ldr	r3, [r7, #0]
 8010002:	2b08      	cmp	r3, #8
 8010004:	d104      	bne.n	8010010 <HAL_TIM_PWM_Stop+0xe4>
 8010006:	687b      	ldr	r3, [r7, #4]
 8010008:	2201      	movs	r2, #1
 801000a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 801000e:	e013      	b.n	8010038 <HAL_TIM_PWM_Stop+0x10c>
 8010010:	683b      	ldr	r3, [r7, #0]
 8010012:	2b0c      	cmp	r3, #12
 8010014:	d104      	bne.n	8010020 <HAL_TIM_PWM_Stop+0xf4>
 8010016:	687b      	ldr	r3, [r7, #4]
 8010018:	2201      	movs	r2, #1
 801001a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 801001e:	e00b      	b.n	8010038 <HAL_TIM_PWM_Stop+0x10c>
 8010020:	683b      	ldr	r3, [r7, #0]
 8010022:	2b10      	cmp	r3, #16
 8010024:	d104      	bne.n	8010030 <HAL_TIM_PWM_Stop+0x104>
 8010026:	687b      	ldr	r3, [r7, #4]
 8010028:	2201      	movs	r2, #1
 801002a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 801002e:	e003      	b.n	8010038 <HAL_TIM_PWM_Stop+0x10c>
 8010030:	687b      	ldr	r3, [r7, #4]
 8010032:	2201      	movs	r2, #1
 8010034:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Return function status */
  return HAL_OK;
 8010038:	2300      	movs	r3, #0
}
 801003a:	4618      	mov	r0, r3
 801003c:	3708      	adds	r7, #8
 801003e:	46bd      	mov	sp, r7
 8010040:	bd80      	pop	{r7, pc}
 8010042:	bf00      	nop
 8010044:	40012c00 	.word	0x40012c00
 8010048:	40013400 	.word	0x40013400
 801004c:	40014000 	.word	0x40014000
 8010050:	40014400 	.word	0x40014400
 8010054:	40014800 	.word	0x40014800

08010058 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8010058:	b580      	push	{r7, lr}
 801005a:	b082      	sub	sp, #8
 801005c:	af00      	add	r7, sp, #0
 801005e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8010060:	687b      	ldr	r3, [r7, #4]
 8010062:	2b00      	cmp	r3, #0
 8010064:	d101      	bne.n	801006a <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8010066:	2301      	movs	r3, #1
 8010068:	e049      	b.n	80100fe <HAL_TIM_IC_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 801006a:	687b      	ldr	r3, [r7, #4]
 801006c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8010070:	b2db      	uxtb	r3, r3
 8010072:	2b00      	cmp	r3, #0
 8010074:	d106      	bne.n	8010084 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8010076:	687b      	ldr	r3, [r7, #4]
 8010078:	2200      	movs	r2, #0
 801007a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 801007e:	6878      	ldr	r0, [r7, #4]
 8010080:	f7f5 fc8e 	bl	80059a0 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8010084:	687b      	ldr	r3, [r7, #4]
 8010086:	2202      	movs	r2, #2
 8010088:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 801008c:	687b      	ldr	r3, [r7, #4]
 801008e:	681a      	ldr	r2, [r3, #0]
 8010090:	687b      	ldr	r3, [r7, #4]
 8010092:	3304      	adds	r3, #4
 8010094:	4619      	mov	r1, r3
 8010096:	4610      	mov	r0, r2
 8010098:	f000 fb6c 	bl	8010774 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 801009c:	687b      	ldr	r3, [r7, #4]
 801009e:	2201      	movs	r2, #1
 80100a0:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80100a4:	687b      	ldr	r3, [r7, #4]
 80100a6:	2201      	movs	r2, #1
 80100a8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80100ac:	687b      	ldr	r3, [r7, #4]
 80100ae:	2201      	movs	r2, #1
 80100b0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80100b4:	687b      	ldr	r3, [r7, #4]
 80100b6:	2201      	movs	r2, #1
 80100b8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80100bc:	687b      	ldr	r3, [r7, #4]
 80100be:	2201      	movs	r2, #1
 80100c0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80100c4:	687b      	ldr	r3, [r7, #4]
 80100c6:	2201      	movs	r2, #1
 80100c8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80100cc:	687b      	ldr	r3, [r7, #4]
 80100ce:	2201      	movs	r2, #1
 80100d0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80100d4:	687b      	ldr	r3, [r7, #4]
 80100d6:	2201      	movs	r2, #1
 80100d8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80100dc:	687b      	ldr	r3, [r7, #4]
 80100de:	2201      	movs	r2, #1
 80100e0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80100e4:	687b      	ldr	r3, [r7, #4]
 80100e6:	2201      	movs	r2, #1
 80100e8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80100ec:	687b      	ldr	r3, [r7, #4]
 80100ee:	2201      	movs	r2, #1
 80100f0:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80100f4:	687b      	ldr	r3, [r7, #4]
 80100f6:	2201      	movs	r2, #1
 80100f8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80100fc:	2300      	movs	r3, #0
}
 80100fe:	4618      	mov	r0, r3
 8010100:	3708      	adds	r7, #8
 8010102:	46bd      	mov	sp, r7
 8010104:	bd80      	pop	{r7, pc}
	...

08010108 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           const TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 8010108:	b580      	push	{r7, lr}
 801010a:	b086      	sub	sp, #24
 801010c:	af00      	add	r7, sp, #0
 801010e:	60f8      	str	r0, [r7, #12]
 8010110:	60b9      	str	r1, [r7, #8]
 8010112:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8010114:	2300      	movs	r3, #0
 8010116:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 8010118:	68fb      	ldr	r3, [r7, #12]
 801011a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 801011e:	2b01      	cmp	r3, #1
 8010120:	d101      	bne.n	8010126 <HAL_TIM_OC_ConfigChannel+0x1e>
 8010122:	2302      	movs	r3, #2
 8010124:	e066      	b.n	80101f4 <HAL_TIM_OC_ConfigChannel+0xec>
 8010126:	68fb      	ldr	r3, [r7, #12]
 8010128:	2201      	movs	r2, #1
 801012a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 801012e:	687b      	ldr	r3, [r7, #4]
 8010130:	2b14      	cmp	r3, #20
 8010132:	d857      	bhi.n	80101e4 <HAL_TIM_OC_ConfigChannel+0xdc>
 8010134:	a201      	add	r2, pc, #4	@ (adr r2, 801013c <HAL_TIM_OC_ConfigChannel+0x34>)
 8010136:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801013a:	bf00      	nop
 801013c:	08010191 	.word	0x08010191
 8010140:	080101e5 	.word	0x080101e5
 8010144:	080101e5 	.word	0x080101e5
 8010148:	080101e5 	.word	0x080101e5
 801014c:	0801019f 	.word	0x0801019f
 8010150:	080101e5 	.word	0x080101e5
 8010154:	080101e5 	.word	0x080101e5
 8010158:	080101e5 	.word	0x080101e5
 801015c:	080101ad 	.word	0x080101ad
 8010160:	080101e5 	.word	0x080101e5
 8010164:	080101e5 	.word	0x080101e5
 8010168:	080101e5 	.word	0x080101e5
 801016c:	080101bb 	.word	0x080101bb
 8010170:	080101e5 	.word	0x080101e5
 8010174:	080101e5 	.word	0x080101e5
 8010178:	080101e5 	.word	0x080101e5
 801017c:	080101c9 	.word	0x080101c9
 8010180:	080101e5 	.word	0x080101e5
 8010184:	080101e5 	.word	0x080101e5
 8010188:	080101e5 	.word	0x080101e5
 801018c:	080101d7 	.word	0x080101d7
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8010190:	68fb      	ldr	r3, [r7, #12]
 8010192:	681b      	ldr	r3, [r3, #0]
 8010194:	68b9      	ldr	r1, [r7, #8]
 8010196:	4618      	mov	r0, r3
 8010198:	f000 fb92 	bl	80108c0 <TIM_OC1_SetConfig>
      break;
 801019c:	e025      	b.n	80101ea <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 801019e:	68fb      	ldr	r3, [r7, #12]
 80101a0:	681b      	ldr	r3, [r3, #0]
 80101a2:	68b9      	ldr	r1, [r7, #8]
 80101a4:	4618      	mov	r0, r3
 80101a6:	f000 fc1b 	bl	80109e0 <TIM_OC2_SetConfig>
      break;
 80101aa:	e01e      	b.n	80101ea <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80101ac:	68fb      	ldr	r3, [r7, #12]
 80101ae:	681b      	ldr	r3, [r3, #0]
 80101b0:	68b9      	ldr	r1, [r7, #8]
 80101b2:	4618      	mov	r0, r3
 80101b4:	f000 fc9e 	bl	8010af4 <TIM_OC3_SetConfig>
      break;
 80101b8:	e017      	b.n	80101ea <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80101ba:	68fb      	ldr	r3, [r7, #12]
 80101bc:	681b      	ldr	r3, [r3, #0]
 80101be:	68b9      	ldr	r1, [r7, #8]
 80101c0:	4618      	mov	r0, r3
 80101c2:	f000 fd1f 	bl	8010c04 <TIM_OC4_SetConfig>
      break;
 80101c6:	e010      	b.n	80101ea <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 5 in Output Compare */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80101c8:	68fb      	ldr	r3, [r7, #12]
 80101ca:	681b      	ldr	r3, [r3, #0]
 80101cc:	68b9      	ldr	r1, [r7, #8]
 80101ce:	4618      	mov	r0, r3
 80101d0:	f000 fd82 	bl	8010cd8 <TIM_OC5_SetConfig>
      break;
 80101d4:	e009      	b.n	80101ea <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 6 in Output Compare */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80101d6:	68fb      	ldr	r3, [r7, #12]
 80101d8:	681b      	ldr	r3, [r3, #0]
 80101da:	68b9      	ldr	r1, [r7, #8]
 80101dc:	4618      	mov	r0, r3
 80101de:	f000 fddf 	bl	8010da0 <TIM_OC6_SetConfig>
      break;
 80101e2:	e002      	b.n	80101ea <HAL_TIM_OC_ConfigChannel+0xe2>
    }

    default:
      status = HAL_ERROR;
 80101e4:	2301      	movs	r3, #1
 80101e6:	75fb      	strb	r3, [r7, #23]
      break;
 80101e8:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80101ea:	68fb      	ldr	r3, [r7, #12]
 80101ec:	2200      	movs	r2, #0
 80101ee:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80101f2:	7dfb      	ldrb	r3, [r7, #23]
}
 80101f4:	4618      	mov	r0, r3
 80101f6:	3718      	adds	r7, #24
 80101f8:	46bd      	mov	sp, r7
 80101fa:	bd80      	pop	{r7, pc}

080101fc <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 80101fc:	b580      	push	{r7, lr}
 80101fe:	b086      	sub	sp, #24
 8010200:	af00      	add	r7, sp, #0
 8010202:	60f8      	str	r0, [r7, #12]
 8010204:	60b9      	str	r1, [r7, #8]
 8010206:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8010208:	2300      	movs	r3, #0
 801020a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 801020c:	68fb      	ldr	r3, [r7, #12]
 801020e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8010212:	2b01      	cmp	r3, #1
 8010214:	d101      	bne.n	801021a <HAL_TIM_IC_ConfigChannel+0x1e>
 8010216:	2302      	movs	r3, #2
 8010218:	e088      	b.n	801032c <HAL_TIM_IC_ConfigChannel+0x130>
 801021a:	68fb      	ldr	r3, [r7, #12]
 801021c:	2201      	movs	r2, #1
 801021e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  if (Channel == TIM_CHANNEL_1)
 8010222:	687b      	ldr	r3, [r7, #4]
 8010224:	2b00      	cmp	r3, #0
 8010226:	d11b      	bne.n	8010260 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8010228:	68fb      	ldr	r3, [r7, #12]
 801022a:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 801022c:	68bb      	ldr	r3, [r7, #8]
 801022e:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8010230:	68bb      	ldr	r3, [r7, #8]
 8010232:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8010234:	68bb      	ldr	r3, [r7, #8]
 8010236:	68db      	ldr	r3, [r3, #12]
    TIM_TI1_SetConfig(htim->Instance,
 8010238:	f000 feac 	bl	8010f94 <TIM_TI1_SetConfig>

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 801023c:	68fb      	ldr	r3, [r7, #12]
 801023e:	681b      	ldr	r3, [r3, #0]
 8010240:	699a      	ldr	r2, [r3, #24]
 8010242:	68fb      	ldr	r3, [r7, #12]
 8010244:	681b      	ldr	r3, [r3, #0]
 8010246:	f022 020c 	bic.w	r2, r2, #12
 801024a:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 801024c:	68fb      	ldr	r3, [r7, #12]
 801024e:	681b      	ldr	r3, [r3, #0]
 8010250:	6999      	ldr	r1, [r3, #24]
 8010252:	68bb      	ldr	r3, [r7, #8]
 8010254:	689a      	ldr	r2, [r3, #8]
 8010256:	68fb      	ldr	r3, [r7, #12]
 8010258:	681b      	ldr	r3, [r3, #0]
 801025a:	430a      	orrs	r2, r1
 801025c:	619a      	str	r2, [r3, #24]
 801025e:	e060      	b.n	8010322 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8010260:	687b      	ldr	r3, [r7, #4]
 8010262:	2b04      	cmp	r3, #4
 8010264:	d11c      	bne.n	80102a0 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8010266:	68fb      	ldr	r3, [r7, #12]
 8010268:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 801026a:	68bb      	ldr	r3, [r7, #8]
 801026c:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 801026e:	68bb      	ldr	r3, [r7, #8]
 8010270:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8010272:	68bb      	ldr	r3, [r7, #8]
 8010274:	68db      	ldr	r3, [r3, #12]
    TIM_TI2_SetConfig(htim->Instance,
 8010276:	f000 ff2a 	bl	80110ce <TIM_TI2_SetConfig>

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 801027a:	68fb      	ldr	r3, [r7, #12]
 801027c:	681b      	ldr	r3, [r3, #0]
 801027e:	699a      	ldr	r2, [r3, #24]
 8010280:	68fb      	ldr	r3, [r7, #12]
 8010282:	681b      	ldr	r3, [r3, #0]
 8010284:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 8010288:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 801028a:	68fb      	ldr	r3, [r7, #12]
 801028c:	681b      	ldr	r3, [r3, #0]
 801028e:	6999      	ldr	r1, [r3, #24]
 8010290:	68bb      	ldr	r3, [r7, #8]
 8010292:	689b      	ldr	r3, [r3, #8]
 8010294:	021a      	lsls	r2, r3, #8
 8010296:	68fb      	ldr	r3, [r7, #12]
 8010298:	681b      	ldr	r3, [r3, #0]
 801029a:	430a      	orrs	r2, r1
 801029c:	619a      	str	r2, [r3, #24]
 801029e:	e040      	b.n	8010322 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 80102a0:	687b      	ldr	r3, [r7, #4]
 80102a2:	2b08      	cmp	r3, #8
 80102a4:	d11b      	bne.n	80102de <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 80102a6:	68fb      	ldr	r3, [r7, #12]
 80102a8:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 80102aa:	68bb      	ldr	r3, [r7, #8]
 80102ac:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 80102ae:	68bb      	ldr	r3, [r7, #8]
 80102b0:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 80102b2:	68bb      	ldr	r3, [r7, #8]
 80102b4:	68db      	ldr	r3, [r3, #12]
    TIM_TI3_SetConfig(htim->Instance,
 80102b6:	f000 ff77 	bl	80111a8 <TIM_TI3_SetConfig>

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 80102ba:	68fb      	ldr	r3, [r7, #12]
 80102bc:	681b      	ldr	r3, [r3, #0]
 80102be:	69da      	ldr	r2, [r3, #28]
 80102c0:	68fb      	ldr	r3, [r7, #12]
 80102c2:	681b      	ldr	r3, [r3, #0]
 80102c4:	f022 020c 	bic.w	r2, r2, #12
 80102c8:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 80102ca:	68fb      	ldr	r3, [r7, #12]
 80102cc:	681b      	ldr	r3, [r3, #0]
 80102ce:	69d9      	ldr	r1, [r3, #28]
 80102d0:	68bb      	ldr	r3, [r7, #8]
 80102d2:	689a      	ldr	r2, [r3, #8]
 80102d4:	68fb      	ldr	r3, [r7, #12]
 80102d6:	681b      	ldr	r3, [r3, #0]
 80102d8:	430a      	orrs	r2, r1
 80102da:	61da      	str	r2, [r3, #28]
 80102dc:	e021      	b.n	8010322 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 80102de:	687b      	ldr	r3, [r7, #4]
 80102e0:	2b0c      	cmp	r3, #12
 80102e2:	d11c      	bne.n	801031e <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 80102e4:	68fb      	ldr	r3, [r7, #12]
 80102e6:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 80102e8:	68bb      	ldr	r3, [r7, #8]
 80102ea:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 80102ec:	68bb      	ldr	r3, [r7, #8]
 80102ee:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 80102f0:	68bb      	ldr	r3, [r7, #8]
 80102f2:	68db      	ldr	r3, [r3, #12]
    TIM_TI4_SetConfig(htim->Instance,
 80102f4:	f000 ff94 	bl	8011220 <TIM_TI4_SetConfig>

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 80102f8:	68fb      	ldr	r3, [r7, #12]
 80102fa:	681b      	ldr	r3, [r3, #0]
 80102fc:	69da      	ldr	r2, [r3, #28]
 80102fe:	68fb      	ldr	r3, [r7, #12]
 8010300:	681b      	ldr	r3, [r3, #0]
 8010302:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 8010306:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8010308:	68fb      	ldr	r3, [r7, #12]
 801030a:	681b      	ldr	r3, [r3, #0]
 801030c:	69d9      	ldr	r1, [r3, #28]
 801030e:	68bb      	ldr	r3, [r7, #8]
 8010310:	689b      	ldr	r3, [r3, #8]
 8010312:	021a      	lsls	r2, r3, #8
 8010314:	68fb      	ldr	r3, [r7, #12]
 8010316:	681b      	ldr	r3, [r3, #0]
 8010318:	430a      	orrs	r2, r1
 801031a:	61da      	str	r2, [r3, #28]
 801031c:	e001      	b.n	8010322 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 801031e:	2301      	movs	r3, #1
 8010320:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8010322:	68fb      	ldr	r3, [r7, #12]
 8010324:	2200      	movs	r2, #0
 8010326:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 801032a:	7dfb      	ldrb	r3, [r7, #23]
}
 801032c:	4618      	mov	r0, r3
 801032e:	3718      	adds	r7, #24
 8010330:	46bd      	mov	sp, r7
 8010332:	bd80      	pop	{r7, pc}

08010334 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8010334:	b580      	push	{r7, lr}
 8010336:	b086      	sub	sp, #24
 8010338:	af00      	add	r7, sp, #0
 801033a:	60f8      	str	r0, [r7, #12]
 801033c:	60b9      	str	r1, [r7, #8]
 801033e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8010340:	2300      	movs	r3, #0
 8010342:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8010344:	68fb      	ldr	r3, [r7, #12]
 8010346:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 801034a:	2b01      	cmp	r3, #1
 801034c:	d101      	bne.n	8010352 <HAL_TIM_PWM_ConfigChannel+0x1e>
 801034e:	2302      	movs	r3, #2
 8010350:	e0ff      	b.n	8010552 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8010352:	68fb      	ldr	r3, [r7, #12]
 8010354:	2201      	movs	r2, #1
 8010356:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 801035a:	687b      	ldr	r3, [r7, #4]
 801035c:	2b14      	cmp	r3, #20
 801035e:	f200 80f0 	bhi.w	8010542 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8010362:	a201      	add	r2, pc, #4	@ (adr r2, 8010368 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8010364:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010368:	080103bd 	.word	0x080103bd
 801036c:	08010543 	.word	0x08010543
 8010370:	08010543 	.word	0x08010543
 8010374:	08010543 	.word	0x08010543
 8010378:	080103fd 	.word	0x080103fd
 801037c:	08010543 	.word	0x08010543
 8010380:	08010543 	.word	0x08010543
 8010384:	08010543 	.word	0x08010543
 8010388:	0801043f 	.word	0x0801043f
 801038c:	08010543 	.word	0x08010543
 8010390:	08010543 	.word	0x08010543
 8010394:	08010543 	.word	0x08010543
 8010398:	0801047f 	.word	0x0801047f
 801039c:	08010543 	.word	0x08010543
 80103a0:	08010543 	.word	0x08010543
 80103a4:	08010543 	.word	0x08010543
 80103a8:	080104c1 	.word	0x080104c1
 80103ac:	08010543 	.word	0x08010543
 80103b0:	08010543 	.word	0x08010543
 80103b4:	08010543 	.word	0x08010543
 80103b8:	08010501 	.word	0x08010501
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80103bc:	68fb      	ldr	r3, [r7, #12]
 80103be:	681b      	ldr	r3, [r3, #0]
 80103c0:	68b9      	ldr	r1, [r7, #8]
 80103c2:	4618      	mov	r0, r3
 80103c4:	f000 fa7c 	bl	80108c0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80103c8:	68fb      	ldr	r3, [r7, #12]
 80103ca:	681b      	ldr	r3, [r3, #0]
 80103cc:	699a      	ldr	r2, [r3, #24]
 80103ce:	68fb      	ldr	r3, [r7, #12]
 80103d0:	681b      	ldr	r3, [r3, #0]
 80103d2:	f042 0208 	orr.w	r2, r2, #8
 80103d6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80103d8:	68fb      	ldr	r3, [r7, #12]
 80103da:	681b      	ldr	r3, [r3, #0]
 80103dc:	699a      	ldr	r2, [r3, #24]
 80103de:	68fb      	ldr	r3, [r7, #12]
 80103e0:	681b      	ldr	r3, [r3, #0]
 80103e2:	f022 0204 	bic.w	r2, r2, #4
 80103e6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80103e8:	68fb      	ldr	r3, [r7, #12]
 80103ea:	681b      	ldr	r3, [r3, #0]
 80103ec:	6999      	ldr	r1, [r3, #24]
 80103ee:	68bb      	ldr	r3, [r7, #8]
 80103f0:	691a      	ldr	r2, [r3, #16]
 80103f2:	68fb      	ldr	r3, [r7, #12]
 80103f4:	681b      	ldr	r3, [r3, #0]
 80103f6:	430a      	orrs	r2, r1
 80103f8:	619a      	str	r2, [r3, #24]
      break;
 80103fa:	e0a5      	b.n	8010548 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80103fc:	68fb      	ldr	r3, [r7, #12]
 80103fe:	681b      	ldr	r3, [r3, #0]
 8010400:	68b9      	ldr	r1, [r7, #8]
 8010402:	4618      	mov	r0, r3
 8010404:	f000 faec 	bl	80109e0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8010408:	68fb      	ldr	r3, [r7, #12]
 801040a:	681b      	ldr	r3, [r3, #0]
 801040c:	699a      	ldr	r2, [r3, #24]
 801040e:	68fb      	ldr	r3, [r7, #12]
 8010410:	681b      	ldr	r3, [r3, #0]
 8010412:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8010416:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8010418:	68fb      	ldr	r3, [r7, #12]
 801041a:	681b      	ldr	r3, [r3, #0]
 801041c:	699a      	ldr	r2, [r3, #24]
 801041e:	68fb      	ldr	r3, [r7, #12]
 8010420:	681b      	ldr	r3, [r3, #0]
 8010422:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8010426:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8010428:	68fb      	ldr	r3, [r7, #12]
 801042a:	681b      	ldr	r3, [r3, #0]
 801042c:	6999      	ldr	r1, [r3, #24]
 801042e:	68bb      	ldr	r3, [r7, #8]
 8010430:	691b      	ldr	r3, [r3, #16]
 8010432:	021a      	lsls	r2, r3, #8
 8010434:	68fb      	ldr	r3, [r7, #12]
 8010436:	681b      	ldr	r3, [r3, #0]
 8010438:	430a      	orrs	r2, r1
 801043a:	619a      	str	r2, [r3, #24]
      break;
 801043c:	e084      	b.n	8010548 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 801043e:	68fb      	ldr	r3, [r7, #12]
 8010440:	681b      	ldr	r3, [r3, #0]
 8010442:	68b9      	ldr	r1, [r7, #8]
 8010444:	4618      	mov	r0, r3
 8010446:	f000 fb55 	bl	8010af4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 801044a:	68fb      	ldr	r3, [r7, #12]
 801044c:	681b      	ldr	r3, [r3, #0]
 801044e:	69da      	ldr	r2, [r3, #28]
 8010450:	68fb      	ldr	r3, [r7, #12]
 8010452:	681b      	ldr	r3, [r3, #0]
 8010454:	f042 0208 	orr.w	r2, r2, #8
 8010458:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 801045a:	68fb      	ldr	r3, [r7, #12]
 801045c:	681b      	ldr	r3, [r3, #0]
 801045e:	69da      	ldr	r2, [r3, #28]
 8010460:	68fb      	ldr	r3, [r7, #12]
 8010462:	681b      	ldr	r3, [r3, #0]
 8010464:	f022 0204 	bic.w	r2, r2, #4
 8010468:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 801046a:	68fb      	ldr	r3, [r7, #12]
 801046c:	681b      	ldr	r3, [r3, #0]
 801046e:	69d9      	ldr	r1, [r3, #28]
 8010470:	68bb      	ldr	r3, [r7, #8]
 8010472:	691a      	ldr	r2, [r3, #16]
 8010474:	68fb      	ldr	r3, [r7, #12]
 8010476:	681b      	ldr	r3, [r3, #0]
 8010478:	430a      	orrs	r2, r1
 801047a:	61da      	str	r2, [r3, #28]
      break;
 801047c:	e064      	b.n	8010548 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 801047e:	68fb      	ldr	r3, [r7, #12]
 8010480:	681b      	ldr	r3, [r3, #0]
 8010482:	68b9      	ldr	r1, [r7, #8]
 8010484:	4618      	mov	r0, r3
 8010486:	f000 fbbd 	bl	8010c04 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 801048a:	68fb      	ldr	r3, [r7, #12]
 801048c:	681b      	ldr	r3, [r3, #0]
 801048e:	69da      	ldr	r2, [r3, #28]
 8010490:	68fb      	ldr	r3, [r7, #12]
 8010492:	681b      	ldr	r3, [r3, #0]
 8010494:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8010498:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 801049a:	68fb      	ldr	r3, [r7, #12]
 801049c:	681b      	ldr	r3, [r3, #0]
 801049e:	69da      	ldr	r2, [r3, #28]
 80104a0:	68fb      	ldr	r3, [r7, #12]
 80104a2:	681b      	ldr	r3, [r3, #0]
 80104a4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80104a8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80104aa:	68fb      	ldr	r3, [r7, #12]
 80104ac:	681b      	ldr	r3, [r3, #0]
 80104ae:	69d9      	ldr	r1, [r3, #28]
 80104b0:	68bb      	ldr	r3, [r7, #8]
 80104b2:	691b      	ldr	r3, [r3, #16]
 80104b4:	021a      	lsls	r2, r3, #8
 80104b6:	68fb      	ldr	r3, [r7, #12]
 80104b8:	681b      	ldr	r3, [r3, #0]
 80104ba:	430a      	orrs	r2, r1
 80104bc:	61da      	str	r2, [r3, #28]
      break;
 80104be:	e043      	b.n	8010548 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80104c0:	68fb      	ldr	r3, [r7, #12]
 80104c2:	681b      	ldr	r3, [r3, #0]
 80104c4:	68b9      	ldr	r1, [r7, #8]
 80104c6:	4618      	mov	r0, r3
 80104c8:	f000 fc06 	bl	8010cd8 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80104cc:	68fb      	ldr	r3, [r7, #12]
 80104ce:	681b      	ldr	r3, [r3, #0]
 80104d0:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80104d2:	68fb      	ldr	r3, [r7, #12]
 80104d4:	681b      	ldr	r3, [r3, #0]
 80104d6:	f042 0208 	orr.w	r2, r2, #8
 80104da:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80104dc:	68fb      	ldr	r3, [r7, #12]
 80104de:	681b      	ldr	r3, [r3, #0]
 80104e0:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80104e2:	68fb      	ldr	r3, [r7, #12]
 80104e4:	681b      	ldr	r3, [r3, #0]
 80104e6:	f022 0204 	bic.w	r2, r2, #4
 80104ea:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80104ec:	68fb      	ldr	r3, [r7, #12]
 80104ee:	681b      	ldr	r3, [r3, #0]
 80104f0:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 80104f2:	68bb      	ldr	r3, [r7, #8]
 80104f4:	691a      	ldr	r2, [r3, #16]
 80104f6:	68fb      	ldr	r3, [r7, #12]
 80104f8:	681b      	ldr	r3, [r3, #0]
 80104fa:	430a      	orrs	r2, r1
 80104fc:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 80104fe:	e023      	b.n	8010548 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8010500:	68fb      	ldr	r3, [r7, #12]
 8010502:	681b      	ldr	r3, [r3, #0]
 8010504:	68b9      	ldr	r1, [r7, #8]
 8010506:	4618      	mov	r0, r3
 8010508:	f000 fc4a 	bl	8010da0 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 801050c:	68fb      	ldr	r3, [r7, #12]
 801050e:	681b      	ldr	r3, [r3, #0]
 8010510:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8010512:	68fb      	ldr	r3, [r7, #12]
 8010514:	681b      	ldr	r3, [r3, #0]
 8010516:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 801051a:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 801051c:	68fb      	ldr	r3, [r7, #12]
 801051e:	681b      	ldr	r3, [r3, #0]
 8010520:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8010522:	68fb      	ldr	r3, [r7, #12]
 8010524:	681b      	ldr	r3, [r3, #0]
 8010526:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 801052a:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 801052c:	68fb      	ldr	r3, [r7, #12]
 801052e:	681b      	ldr	r3, [r3, #0]
 8010530:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8010532:	68bb      	ldr	r3, [r7, #8]
 8010534:	691b      	ldr	r3, [r3, #16]
 8010536:	021a      	lsls	r2, r3, #8
 8010538:	68fb      	ldr	r3, [r7, #12]
 801053a:	681b      	ldr	r3, [r3, #0]
 801053c:	430a      	orrs	r2, r1
 801053e:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8010540:	e002      	b.n	8010548 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8010542:	2301      	movs	r3, #1
 8010544:	75fb      	strb	r3, [r7, #23]
      break;
 8010546:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8010548:	68fb      	ldr	r3, [r7, #12]
 801054a:	2200      	movs	r2, #0
 801054c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8010550:	7dfb      	ldrb	r3, [r7, #23]
}
 8010552:	4618      	mov	r0, r3
 8010554:	3718      	adds	r7, #24
 8010556:	46bd      	mov	sp, r7
 8010558:	bd80      	pop	{r7, pc}
 801055a:	bf00      	nop

0801055c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 801055c:	b580      	push	{r7, lr}
 801055e:	b084      	sub	sp, #16
 8010560:	af00      	add	r7, sp, #0
 8010562:	6078      	str	r0, [r7, #4]
 8010564:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8010566:	2300      	movs	r3, #0
 8010568:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 801056a:	687b      	ldr	r3, [r7, #4]
 801056c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8010570:	2b01      	cmp	r3, #1
 8010572:	d101      	bne.n	8010578 <HAL_TIM_ConfigClockSource+0x1c>
 8010574:	2302      	movs	r3, #2
 8010576:	e0b6      	b.n	80106e6 <HAL_TIM_ConfigClockSource+0x18a>
 8010578:	687b      	ldr	r3, [r7, #4]
 801057a:	2201      	movs	r2, #1
 801057c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8010580:	687b      	ldr	r3, [r7, #4]
 8010582:	2202      	movs	r2, #2
 8010584:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8010588:	687b      	ldr	r3, [r7, #4]
 801058a:	681b      	ldr	r3, [r3, #0]
 801058c:	689b      	ldr	r3, [r3, #8]
 801058e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8010590:	68bb      	ldr	r3, [r7, #8]
 8010592:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8010596:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 801059a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 801059c:	68bb      	ldr	r3, [r7, #8]
 801059e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80105a2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80105a4:	687b      	ldr	r3, [r7, #4]
 80105a6:	681b      	ldr	r3, [r3, #0]
 80105a8:	68ba      	ldr	r2, [r7, #8]
 80105aa:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80105ac:	683b      	ldr	r3, [r7, #0]
 80105ae:	681b      	ldr	r3, [r3, #0]
 80105b0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80105b4:	d03e      	beq.n	8010634 <HAL_TIM_ConfigClockSource+0xd8>
 80105b6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80105ba:	f200 8087 	bhi.w	80106cc <HAL_TIM_ConfigClockSource+0x170>
 80105be:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80105c2:	f000 8086 	beq.w	80106d2 <HAL_TIM_ConfigClockSource+0x176>
 80105c6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80105ca:	d87f      	bhi.n	80106cc <HAL_TIM_ConfigClockSource+0x170>
 80105cc:	2b70      	cmp	r3, #112	@ 0x70
 80105ce:	d01a      	beq.n	8010606 <HAL_TIM_ConfigClockSource+0xaa>
 80105d0:	2b70      	cmp	r3, #112	@ 0x70
 80105d2:	d87b      	bhi.n	80106cc <HAL_TIM_ConfigClockSource+0x170>
 80105d4:	2b60      	cmp	r3, #96	@ 0x60
 80105d6:	d050      	beq.n	801067a <HAL_TIM_ConfigClockSource+0x11e>
 80105d8:	2b60      	cmp	r3, #96	@ 0x60
 80105da:	d877      	bhi.n	80106cc <HAL_TIM_ConfigClockSource+0x170>
 80105dc:	2b50      	cmp	r3, #80	@ 0x50
 80105de:	d03c      	beq.n	801065a <HAL_TIM_ConfigClockSource+0xfe>
 80105e0:	2b50      	cmp	r3, #80	@ 0x50
 80105e2:	d873      	bhi.n	80106cc <HAL_TIM_ConfigClockSource+0x170>
 80105e4:	2b40      	cmp	r3, #64	@ 0x40
 80105e6:	d058      	beq.n	801069a <HAL_TIM_ConfigClockSource+0x13e>
 80105e8:	2b40      	cmp	r3, #64	@ 0x40
 80105ea:	d86f      	bhi.n	80106cc <HAL_TIM_ConfigClockSource+0x170>
 80105ec:	2b30      	cmp	r3, #48	@ 0x30
 80105ee:	d064      	beq.n	80106ba <HAL_TIM_ConfigClockSource+0x15e>
 80105f0:	2b30      	cmp	r3, #48	@ 0x30
 80105f2:	d86b      	bhi.n	80106cc <HAL_TIM_ConfigClockSource+0x170>
 80105f4:	2b20      	cmp	r3, #32
 80105f6:	d060      	beq.n	80106ba <HAL_TIM_ConfigClockSource+0x15e>
 80105f8:	2b20      	cmp	r3, #32
 80105fa:	d867      	bhi.n	80106cc <HAL_TIM_ConfigClockSource+0x170>
 80105fc:	2b00      	cmp	r3, #0
 80105fe:	d05c      	beq.n	80106ba <HAL_TIM_ConfigClockSource+0x15e>
 8010600:	2b10      	cmp	r3, #16
 8010602:	d05a      	beq.n	80106ba <HAL_TIM_ConfigClockSource+0x15e>
 8010604:	e062      	b.n	80106cc <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8010606:	687b      	ldr	r3, [r7, #4]
 8010608:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 801060a:	683b      	ldr	r3, [r7, #0]
 801060c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 801060e:	683b      	ldr	r3, [r7, #0]
 8010610:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8010612:	683b      	ldr	r3, [r7, #0]
 8010614:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8010616:	f000 fe5b 	bl	80112d0 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 801061a:	687b      	ldr	r3, [r7, #4]
 801061c:	681b      	ldr	r3, [r3, #0]
 801061e:	689b      	ldr	r3, [r3, #8]
 8010620:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8010622:	68bb      	ldr	r3, [r7, #8]
 8010624:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8010628:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 801062a:	687b      	ldr	r3, [r7, #4]
 801062c:	681b      	ldr	r3, [r3, #0]
 801062e:	68ba      	ldr	r2, [r7, #8]
 8010630:	609a      	str	r2, [r3, #8]
      break;
 8010632:	e04f      	b.n	80106d4 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8010634:	687b      	ldr	r3, [r7, #4]
 8010636:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8010638:	683b      	ldr	r3, [r7, #0]
 801063a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 801063c:	683b      	ldr	r3, [r7, #0]
 801063e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8010640:	683b      	ldr	r3, [r7, #0]
 8010642:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8010644:	f000 fe44 	bl	80112d0 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8010648:	687b      	ldr	r3, [r7, #4]
 801064a:	681b      	ldr	r3, [r3, #0]
 801064c:	689a      	ldr	r2, [r3, #8]
 801064e:	687b      	ldr	r3, [r7, #4]
 8010650:	681b      	ldr	r3, [r3, #0]
 8010652:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8010656:	609a      	str	r2, [r3, #8]
      break;
 8010658:	e03c      	b.n	80106d4 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 801065a:	687b      	ldr	r3, [r7, #4]
 801065c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 801065e:	683b      	ldr	r3, [r7, #0]
 8010660:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8010662:	683b      	ldr	r3, [r7, #0]
 8010664:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8010666:	461a      	mov	r2, r3
 8010668:	f000 fd02 	bl	8011070 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 801066c:	687b      	ldr	r3, [r7, #4]
 801066e:	681b      	ldr	r3, [r3, #0]
 8010670:	2150      	movs	r1, #80	@ 0x50
 8010672:	4618      	mov	r0, r3
 8010674:	f000 fe11 	bl	801129a <TIM_ITRx_SetConfig>
      break;
 8010678:	e02c      	b.n	80106d4 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 801067a:	687b      	ldr	r3, [r7, #4]
 801067c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 801067e:	683b      	ldr	r3, [r7, #0]
 8010680:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8010682:	683b      	ldr	r3, [r7, #0]
 8010684:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8010686:	461a      	mov	r2, r3
 8010688:	f000 fd5e 	bl	8011148 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 801068c:	687b      	ldr	r3, [r7, #4]
 801068e:	681b      	ldr	r3, [r3, #0]
 8010690:	2160      	movs	r1, #96	@ 0x60
 8010692:	4618      	mov	r0, r3
 8010694:	f000 fe01 	bl	801129a <TIM_ITRx_SetConfig>
      break;
 8010698:	e01c      	b.n	80106d4 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 801069a:	687b      	ldr	r3, [r7, #4]
 801069c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 801069e:	683b      	ldr	r3, [r7, #0]
 80106a0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80106a2:	683b      	ldr	r3, [r7, #0]
 80106a4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80106a6:	461a      	mov	r2, r3
 80106a8:	f000 fce2 	bl	8011070 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80106ac:	687b      	ldr	r3, [r7, #4]
 80106ae:	681b      	ldr	r3, [r3, #0]
 80106b0:	2140      	movs	r1, #64	@ 0x40
 80106b2:	4618      	mov	r0, r3
 80106b4:	f000 fdf1 	bl	801129a <TIM_ITRx_SetConfig>
      break;
 80106b8:	e00c      	b.n	80106d4 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80106ba:	687b      	ldr	r3, [r7, #4]
 80106bc:	681a      	ldr	r2, [r3, #0]
 80106be:	683b      	ldr	r3, [r7, #0]
 80106c0:	681b      	ldr	r3, [r3, #0]
 80106c2:	4619      	mov	r1, r3
 80106c4:	4610      	mov	r0, r2
 80106c6:	f000 fde8 	bl	801129a <TIM_ITRx_SetConfig>
      break;
 80106ca:	e003      	b.n	80106d4 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 80106cc:	2301      	movs	r3, #1
 80106ce:	73fb      	strb	r3, [r7, #15]
      break;
 80106d0:	e000      	b.n	80106d4 <HAL_TIM_ConfigClockSource+0x178>
      break;
 80106d2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80106d4:	687b      	ldr	r3, [r7, #4]
 80106d6:	2201      	movs	r2, #1
 80106d8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80106dc:	687b      	ldr	r3, [r7, #4]
 80106de:	2200      	movs	r2, #0
 80106e0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80106e4:	7bfb      	ldrb	r3, [r7, #15]
}
 80106e6:	4618      	mov	r0, r3
 80106e8:	3710      	adds	r7, #16
 80106ea:	46bd      	mov	sp, r7
 80106ec:	bd80      	pop	{r7, pc}

080106ee <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 80106ee:	b580      	push	{r7, lr}
 80106f0:	b082      	sub	sp, #8
 80106f2:	af00      	add	r7, sp, #0
 80106f4:	6078      	str	r0, [r7, #4]
 80106f6:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 80106f8:	687b      	ldr	r3, [r7, #4]
 80106fa:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80106fe:	2b01      	cmp	r3, #1
 8010700:	d101      	bne.n	8010706 <HAL_TIM_SlaveConfigSynchro+0x18>
 8010702:	2302      	movs	r3, #2
 8010704:	e031      	b.n	801076a <HAL_TIM_SlaveConfigSynchro+0x7c>
 8010706:	687b      	ldr	r3, [r7, #4]
 8010708:	2201      	movs	r2, #1
 801070a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 801070e:	687b      	ldr	r3, [r7, #4]
 8010710:	2202      	movs	r2, #2
 8010712:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 8010716:	6839      	ldr	r1, [r7, #0]
 8010718:	6878      	ldr	r0, [r7, #4]
 801071a:	f000 fba7 	bl	8010e6c <TIM_SlaveTimer_SetConfig>
 801071e:	4603      	mov	r3, r0
 8010720:	2b00      	cmp	r3, #0
 8010722:	d009      	beq.n	8010738 <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 8010724:	687b      	ldr	r3, [r7, #4]
 8010726:	2201      	movs	r2, #1
 8010728:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    __HAL_UNLOCK(htim);
 801072c:	687b      	ldr	r3, [r7, #4]
 801072e:	2200      	movs	r2, #0
 8010730:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    return HAL_ERROR;
 8010734:	2301      	movs	r3, #1
 8010736:	e018      	b.n	801076a <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 8010738:	687b      	ldr	r3, [r7, #4]
 801073a:	681b      	ldr	r3, [r3, #0]
 801073c:	68da      	ldr	r2, [r3, #12]
 801073e:	687b      	ldr	r3, [r7, #4]
 8010740:	681b      	ldr	r3, [r3, #0]
 8010742:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8010746:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 8010748:	687b      	ldr	r3, [r7, #4]
 801074a:	681b      	ldr	r3, [r3, #0]
 801074c:	68da      	ldr	r2, [r3, #12]
 801074e:	687b      	ldr	r3, [r7, #4]
 8010750:	681b      	ldr	r3, [r3, #0]
 8010752:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8010756:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 8010758:	687b      	ldr	r3, [r7, #4]
 801075a:	2201      	movs	r2, #1
 801075c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8010760:	687b      	ldr	r3, [r7, #4]
 8010762:	2200      	movs	r2, #0
 8010764:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8010768:	2300      	movs	r3, #0
}
 801076a:	4618      	mov	r0, r3
 801076c:	3708      	adds	r7, #8
 801076e:	46bd      	mov	sp, r7
 8010770:	bd80      	pop	{r7, pc}
	...

08010774 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8010774:	b480      	push	{r7}
 8010776:	b085      	sub	sp, #20
 8010778:	af00      	add	r7, sp, #0
 801077a:	6078      	str	r0, [r7, #4]
 801077c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 801077e:	687b      	ldr	r3, [r7, #4]
 8010780:	681b      	ldr	r3, [r3, #0]
 8010782:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8010784:	687b      	ldr	r3, [r7, #4]
 8010786:	4a46      	ldr	r2, [pc, #280]	@ (80108a0 <TIM_Base_SetConfig+0x12c>)
 8010788:	4293      	cmp	r3, r2
 801078a:	d013      	beq.n	80107b4 <TIM_Base_SetConfig+0x40>
 801078c:	687b      	ldr	r3, [r7, #4]
 801078e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8010792:	d00f      	beq.n	80107b4 <TIM_Base_SetConfig+0x40>
 8010794:	687b      	ldr	r3, [r7, #4]
 8010796:	4a43      	ldr	r2, [pc, #268]	@ (80108a4 <TIM_Base_SetConfig+0x130>)
 8010798:	4293      	cmp	r3, r2
 801079a:	d00b      	beq.n	80107b4 <TIM_Base_SetConfig+0x40>
 801079c:	687b      	ldr	r3, [r7, #4]
 801079e:	4a42      	ldr	r2, [pc, #264]	@ (80108a8 <TIM_Base_SetConfig+0x134>)
 80107a0:	4293      	cmp	r3, r2
 80107a2:	d007      	beq.n	80107b4 <TIM_Base_SetConfig+0x40>
 80107a4:	687b      	ldr	r3, [r7, #4]
 80107a6:	4a41      	ldr	r2, [pc, #260]	@ (80108ac <TIM_Base_SetConfig+0x138>)
 80107a8:	4293      	cmp	r3, r2
 80107aa:	d003      	beq.n	80107b4 <TIM_Base_SetConfig+0x40>
 80107ac:	687b      	ldr	r3, [r7, #4]
 80107ae:	4a40      	ldr	r2, [pc, #256]	@ (80108b0 <TIM_Base_SetConfig+0x13c>)
 80107b0:	4293      	cmp	r3, r2
 80107b2:	d108      	bne.n	80107c6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80107b4:	68fb      	ldr	r3, [r7, #12]
 80107b6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80107ba:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80107bc:	683b      	ldr	r3, [r7, #0]
 80107be:	685b      	ldr	r3, [r3, #4]
 80107c0:	68fa      	ldr	r2, [r7, #12]
 80107c2:	4313      	orrs	r3, r2
 80107c4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80107c6:	687b      	ldr	r3, [r7, #4]
 80107c8:	4a35      	ldr	r2, [pc, #212]	@ (80108a0 <TIM_Base_SetConfig+0x12c>)
 80107ca:	4293      	cmp	r3, r2
 80107cc:	d01f      	beq.n	801080e <TIM_Base_SetConfig+0x9a>
 80107ce:	687b      	ldr	r3, [r7, #4]
 80107d0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80107d4:	d01b      	beq.n	801080e <TIM_Base_SetConfig+0x9a>
 80107d6:	687b      	ldr	r3, [r7, #4]
 80107d8:	4a32      	ldr	r2, [pc, #200]	@ (80108a4 <TIM_Base_SetConfig+0x130>)
 80107da:	4293      	cmp	r3, r2
 80107dc:	d017      	beq.n	801080e <TIM_Base_SetConfig+0x9a>
 80107de:	687b      	ldr	r3, [r7, #4]
 80107e0:	4a31      	ldr	r2, [pc, #196]	@ (80108a8 <TIM_Base_SetConfig+0x134>)
 80107e2:	4293      	cmp	r3, r2
 80107e4:	d013      	beq.n	801080e <TIM_Base_SetConfig+0x9a>
 80107e6:	687b      	ldr	r3, [r7, #4]
 80107e8:	4a30      	ldr	r2, [pc, #192]	@ (80108ac <TIM_Base_SetConfig+0x138>)
 80107ea:	4293      	cmp	r3, r2
 80107ec:	d00f      	beq.n	801080e <TIM_Base_SetConfig+0x9a>
 80107ee:	687b      	ldr	r3, [r7, #4]
 80107f0:	4a2f      	ldr	r2, [pc, #188]	@ (80108b0 <TIM_Base_SetConfig+0x13c>)
 80107f2:	4293      	cmp	r3, r2
 80107f4:	d00b      	beq.n	801080e <TIM_Base_SetConfig+0x9a>
 80107f6:	687b      	ldr	r3, [r7, #4]
 80107f8:	4a2e      	ldr	r2, [pc, #184]	@ (80108b4 <TIM_Base_SetConfig+0x140>)
 80107fa:	4293      	cmp	r3, r2
 80107fc:	d007      	beq.n	801080e <TIM_Base_SetConfig+0x9a>
 80107fe:	687b      	ldr	r3, [r7, #4]
 8010800:	4a2d      	ldr	r2, [pc, #180]	@ (80108b8 <TIM_Base_SetConfig+0x144>)
 8010802:	4293      	cmp	r3, r2
 8010804:	d003      	beq.n	801080e <TIM_Base_SetConfig+0x9a>
 8010806:	687b      	ldr	r3, [r7, #4]
 8010808:	4a2c      	ldr	r2, [pc, #176]	@ (80108bc <TIM_Base_SetConfig+0x148>)
 801080a:	4293      	cmp	r3, r2
 801080c:	d108      	bne.n	8010820 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 801080e:	68fb      	ldr	r3, [r7, #12]
 8010810:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8010814:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8010816:	683b      	ldr	r3, [r7, #0]
 8010818:	68db      	ldr	r3, [r3, #12]
 801081a:	68fa      	ldr	r2, [r7, #12]
 801081c:	4313      	orrs	r3, r2
 801081e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8010820:	68fb      	ldr	r3, [r7, #12]
 8010822:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8010826:	683b      	ldr	r3, [r7, #0]
 8010828:	695b      	ldr	r3, [r3, #20]
 801082a:	4313      	orrs	r3, r2
 801082c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 801082e:	687b      	ldr	r3, [r7, #4]
 8010830:	68fa      	ldr	r2, [r7, #12]
 8010832:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8010834:	683b      	ldr	r3, [r7, #0]
 8010836:	689a      	ldr	r2, [r3, #8]
 8010838:	687b      	ldr	r3, [r7, #4]
 801083a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 801083c:	683b      	ldr	r3, [r7, #0]
 801083e:	681a      	ldr	r2, [r3, #0]
 8010840:	687b      	ldr	r3, [r7, #4]
 8010842:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8010844:	687b      	ldr	r3, [r7, #4]
 8010846:	4a16      	ldr	r2, [pc, #88]	@ (80108a0 <TIM_Base_SetConfig+0x12c>)
 8010848:	4293      	cmp	r3, r2
 801084a:	d00f      	beq.n	801086c <TIM_Base_SetConfig+0xf8>
 801084c:	687b      	ldr	r3, [r7, #4]
 801084e:	4a18      	ldr	r2, [pc, #96]	@ (80108b0 <TIM_Base_SetConfig+0x13c>)
 8010850:	4293      	cmp	r3, r2
 8010852:	d00b      	beq.n	801086c <TIM_Base_SetConfig+0xf8>
 8010854:	687b      	ldr	r3, [r7, #4]
 8010856:	4a17      	ldr	r2, [pc, #92]	@ (80108b4 <TIM_Base_SetConfig+0x140>)
 8010858:	4293      	cmp	r3, r2
 801085a:	d007      	beq.n	801086c <TIM_Base_SetConfig+0xf8>
 801085c:	687b      	ldr	r3, [r7, #4]
 801085e:	4a16      	ldr	r2, [pc, #88]	@ (80108b8 <TIM_Base_SetConfig+0x144>)
 8010860:	4293      	cmp	r3, r2
 8010862:	d003      	beq.n	801086c <TIM_Base_SetConfig+0xf8>
 8010864:	687b      	ldr	r3, [r7, #4]
 8010866:	4a15      	ldr	r2, [pc, #84]	@ (80108bc <TIM_Base_SetConfig+0x148>)
 8010868:	4293      	cmp	r3, r2
 801086a:	d103      	bne.n	8010874 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 801086c:	683b      	ldr	r3, [r7, #0]
 801086e:	691a      	ldr	r2, [r3, #16]
 8010870:	687b      	ldr	r3, [r7, #4]
 8010872:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8010874:	687b      	ldr	r3, [r7, #4]
 8010876:	2201      	movs	r2, #1
 8010878:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 801087a:	687b      	ldr	r3, [r7, #4]
 801087c:	691b      	ldr	r3, [r3, #16]
 801087e:	f003 0301 	and.w	r3, r3, #1
 8010882:	2b01      	cmp	r3, #1
 8010884:	d105      	bne.n	8010892 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8010886:	687b      	ldr	r3, [r7, #4]
 8010888:	691b      	ldr	r3, [r3, #16]
 801088a:	f023 0201 	bic.w	r2, r3, #1
 801088e:	687b      	ldr	r3, [r7, #4]
 8010890:	611a      	str	r2, [r3, #16]
  }
}
 8010892:	bf00      	nop
 8010894:	3714      	adds	r7, #20
 8010896:	46bd      	mov	sp, r7
 8010898:	f85d 7b04 	ldr.w	r7, [sp], #4
 801089c:	4770      	bx	lr
 801089e:	bf00      	nop
 80108a0:	40012c00 	.word	0x40012c00
 80108a4:	40000400 	.word	0x40000400
 80108a8:	40000800 	.word	0x40000800
 80108ac:	40000c00 	.word	0x40000c00
 80108b0:	40013400 	.word	0x40013400
 80108b4:	40014000 	.word	0x40014000
 80108b8:	40014400 	.word	0x40014400
 80108bc:	40014800 	.word	0x40014800

080108c0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80108c0:	b480      	push	{r7}
 80108c2:	b087      	sub	sp, #28
 80108c4:	af00      	add	r7, sp, #0
 80108c6:	6078      	str	r0, [r7, #4]
 80108c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80108ca:	687b      	ldr	r3, [r7, #4]
 80108cc:	6a1b      	ldr	r3, [r3, #32]
 80108ce:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80108d0:	687b      	ldr	r3, [r7, #4]
 80108d2:	6a1b      	ldr	r3, [r3, #32]
 80108d4:	f023 0201 	bic.w	r2, r3, #1
 80108d8:	687b      	ldr	r3, [r7, #4]
 80108da:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80108dc:	687b      	ldr	r3, [r7, #4]
 80108de:	685b      	ldr	r3, [r3, #4]
 80108e0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80108e2:	687b      	ldr	r3, [r7, #4]
 80108e4:	699b      	ldr	r3, [r3, #24]
 80108e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80108e8:	68fb      	ldr	r3, [r7, #12]
 80108ea:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80108ee:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80108f2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80108f4:	68fb      	ldr	r3, [r7, #12]
 80108f6:	f023 0303 	bic.w	r3, r3, #3
 80108fa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80108fc:	683b      	ldr	r3, [r7, #0]
 80108fe:	681b      	ldr	r3, [r3, #0]
 8010900:	68fa      	ldr	r2, [r7, #12]
 8010902:	4313      	orrs	r3, r2
 8010904:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8010906:	697b      	ldr	r3, [r7, #20]
 8010908:	f023 0302 	bic.w	r3, r3, #2
 801090c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 801090e:	683b      	ldr	r3, [r7, #0]
 8010910:	689b      	ldr	r3, [r3, #8]
 8010912:	697a      	ldr	r2, [r7, #20]
 8010914:	4313      	orrs	r3, r2
 8010916:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8010918:	687b      	ldr	r3, [r7, #4]
 801091a:	4a2c      	ldr	r2, [pc, #176]	@ (80109cc <TIM_OC1_SetConfig+0x10c>)
 801091c:	4293      	cmp	r3, r2
 801091e:	d00f      	beq.n	8010940 <TIM_OC1_SetConfig+0x80>
 8010920:	687b      	ldr	r3, [r7, #4]
 8010922:	4a2b      	ldr	r2, [pc, #172]	@ (80109d0 <TIM_OC1_SetConfig+0x110>)
 8010924:	4293      	cmp	r3, r2
 8010926:	d00b      	beq.n	8010940 <TIM_OC1_SetConfig+0x80>
 8010928:	687b      	ldr	r3, [r7, #4]
 801092a:	4a2a      	ldr	r2, [pc, #168]	@ (80109d4 <TIM_OC1_SetConfig+0x114>)
 801092c:	4293      	cmp	r3, r2
 801092e:	d007      	beq.n	8010940 <TIM_OC1_SetConfig+0x80>
 8010930:	687b      	ldr	r3, [r7, #4]
 8010932:	4a29      	ldr	r2, [pc, #164]	@ (80109d8 <TIM_OC1_SetConfig+0x118>)
 8010934:	4293      	cmp	r3, r2
 8010936:	d003      	beq.n	8010940 <TIM_OC1_SetConfig+0x80>
 8010938:	687b      	ldr	r3, [r7, #4]
 801093a:	4a28      	ldr	r2, [pc, #160]	@ (80109dc <TIM_OC1_SetConfig+0x11c>)
 801093c:	4293      	cmp	r3, r2
 801093e:	d10c      	bne.n	801095a <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8010940:	697b      	ldr	r3, [r7, #20]
 8010942:	f023 0308 	bic.w	r3, r3, #8
 8010946:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8010948:	683b      	ldr	r3, [r7, #0]
 801094a:	68db      	ldr	r3, [r3, #12]
 801094c:	697a      	ldr	r2, [r7, #20]
 801094e:	4313      	orrs	r3, r2
 8010950:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8010952:	697b      	ldr	r3, [r7, #20]
 8010954:	f023 0304 	bic.w	r3, r3, #4
 8010958:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 801095a:	687b      	ldr	r3, [r7, #4]
 801095c:	4a1b      	ldr	r2, [pc, #108]	@ (80109cc <TIM_OC1_SetConfig+0x10c>)
 801095e:	4293      	cmp	r3, r2
 8010960:	d00f      	beq.n	8010982 <TIM_OC1_SetConfig+0xc2>
 8010962:	687b      	ldr	r3, [r7, #4]
 8010964:	4a1a      	ldr	r2, [pc, #104]	@ (80109d0 <TIM_OC1_SetConfig+0x110>)
 8010966:	4293      	cmp	r3, r2
 8010968:	d00b      	beq.n	8010982 <TIM_OC1_SetConfig+0xc2>
 801096a:	687b      	ldr	r3, [r7, #4]
 801096c:	4a19      	ldr	r2, [pc, #100]	@ (80109d4 <TIM_OC1_SetConfig+0x114>)
 801096e:	4293      	cmp	r3, r2
 8010970:	d007      	beq.n	8010982 <TIM_OC1_SetConfig+0xc2>
 8010972:	687b      	ldr	r3, [r7, #4]
 8010974:	4a18      	ldr	r2, [pc, #96]	@ (80109d8 <TIM_OC1_SetConfig+0x118>)
 8010976:	4293      	cmp	r3, r2
 8010978:	d003      	beq.n	8010982 <TIM_OC1_SetConfig+0xc2>
 801097a:	687b      	ldr	r3, [r7, #4]
 801097c:	4a17      	ldr	r2, [pc, #92]	@ (80109dc <TIM_OC1_SetConfig+0x11c>)
 801097e:	4293      	cmp	r3, r2
 8010980:	d111      	bne.n	80109a6 <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8010982:	693b      	ldr	r3, [r7, #16]
 8010984:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8010988:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 801098a:	693b      	ldr	r3, [r7, #16]
 801098c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8010990:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8010992:	683b      	ldr	r3, [r7, #0]
 8010994:	695b      	ldr	r3, [r3, #20]
 8010996:	693a      	ldr	r2, [r7, #16]
 8010998:	4313      	orrs	r3, r2
 801099a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 801099c:	683b      	ldr	r3, [r7, #0]
 801099e:	699b      	ldr	r3, [r3, #24]
 80109a0:	693a      	ldr	r2, [r7, #16]
 80109a2:	4313      	orrs	r3, r2
 80109a4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80109a6:	687b      	ldr	r3, [r7, #4]
 80109a8:	693a      	ldr	r2, [r7, #16]
 80109aa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80109ac:	687b      	ldr	r3, [r7, #4]
 80109ae:	68fa      	ldr	r2, [r7, #12]
 80109b0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80109b2:	683b      	ldr	r3, [r7, #0]
 80109b4:	685a      	ldr	r2, [r3, #4]
 80109b6:	687b      	ldr	r3, [r7, #4]
 80109b8:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80109ba:	687b      	ldr	r3, [r7, #4]
 80109bc:	697a      	ldr	r2, [r7, #20]
 80109be:	621a      	str	r2, [r3, #32]
}
 80109c0:	bf00      	nop
 80109c2:	371c      	adds	r7, #28
 80109c4:	46bd      	mov	sp, r7
 80109c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80109ca:	4770      	bx	lr
 80109cc:	40012c00 	.word	0x40012c00
 80109d0:	40013400 	.word	0x40013400
 80109d4:	40014000 	.word	0x40014000
 80109d8:	40014400 	.word	0x40014400
 80109dc:	40014800 	.word	0x40014800

080109e0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80109e0:	b480      	push	{r7}
 80109e2:	b087      	sub	sp, #28
 80109e4:	af00      	add	r7, sp, #0
 80109e6:	6078      	str	r0, [r7, #4]
 80109e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80109ea:	687b      	ldr	r3, [r7, #4]
 80109ec:	6a1b      	ldr	r3, [r3, #32]
 80109ee:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80109f0:	687b      	ldr	r3, [r7, #4]
 80109f2:	6a1b      	ldr	r3, [r3, #32]
 80109f4:	f023 0210 	bic.w	r2, r3, #16
 80109f8:	687b      	ldr	r3, [r7, #4]
 80109fa:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80109fc:	687b      	ldr	r3, [r7, #4]
 80109fe:	685b      	ldr	r3, [r3, #4]
 8010a00:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8010a02:	687b      	ldr	r3, [r7, #4]
 8010a04:	699b      	ldr	r3, [r3, #24]
 8010a06:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8010a08:	68fb      	ldr	r3, [r7, #12]
 8010a0a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8010a0e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8010a12:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8010a14:	68fb      	ldr	r3, [r7, #12]
 8010a16:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8010a1a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8010a1c:	683b      	ldr	r3, [r7, #0]
 8010a1e:	681b      	ldr	r3, [r3, #0]
 8010a20:	021b      	lsls	r3, r3, #8
 8010a22:	68fa      	ldr	r2, [r7, #12]
 8010a24:	4313      	orrs	r3, r2
 8010a26:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8010a28:	697b      	ldr	r3, [r7, #20]
 8010a2a:	f023 0320 	bic.w	r3, r3, #32
 8010a2e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8010a30:	683b      	ldr	r3, [r7, #0]
 8010a32:	689b      	ldr	r3, [r3, #8]
 8010a34:	011b      	lsls	r3, r3, #4
 8010a36:	697a      	ldr	r2, [r7, #20]
 8010a38:	4313      	orrs	r3, r2
 8010a3a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8010a3c:	687b      	ldr	r3, [r7, #4]
 8010a3e:	4a28      	ldr	r2, [pc, #160]	@ (8010ae0 <TIM_OC2_SetConfig+0x100>)
 8010a40:	4293      	cmp	r3, r2
 8010a42:	d003      	beq.n	8010a4c <TIM_OC2_SetConfig+0x6c>
 8010a44:	687b      	ldr	r3, [r7, #4]
 8010a46:	4a27      	ldr	r2, [pc, #156]	@ (8010ae4 <TIM_OC2_SetConfig+0x104>)
 8010a48:	4293      	cmp	r3, r2
 8010a4a:	d10d      	bne.n	8010a68 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8010a4c:	697b      	ldr	r3, [r7, #20]
 8010a4e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8010a52:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8010a54:	683b      	ldr	r3, [r7, #0]
 8010a56:	68db      	ldr	r3, [r3, #12]
 8010a58:	011b      	lsls	r3, r3, #4
 8010a5a:	697a      	ldr	r2, [r7, #20]
 8010a5c:	4313      	orrs	r3, r2
 8010a5e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8010a60:	697b      	ldr	r3, [r7, #20]
 8010a62:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8010a66:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8010a68:	687b      	ldr	r3, [r7, #4]
 8010a6a:	4a1d      	ldr	r2, [pc, #116]	@ (8010ae0 <TIM_OC2_SetConfig+0x100>)
 8010a6c:	4293      	cmp	r3, r2
 8010a6e:	d00f      	beq.n	8010a90 <TIM_OC2_SetConfig+0xb0>
 8010a70:	687b      	ldr	r3, [r7, #4]
 8010a72:	4a1c      	ldr	r2, [pc, #112]	@ (8010ae4 <TIM_OC2_SetConfig+0x104>)
 8010a74:	4293      	cmp	r3, r2
 8010a76:	d00b      	beq.n	8010a90 <TIM_OC2_SetConfig+0xb0>
 8010a78:	687b      	ldr	r3, [r7, #4]
 8010a7a:	4a1b      	ldr	r2, [pc, #108]	@ (8010ae8 <TIM_OC2_SetConfig+0x108>)
 8010a7c:	4293      	cmp	r3, r2
 8010a7e:	d007      	beq.n	8010a90 <TIM_OC2_SetConfig+0xb0>
 8010a80:	687b      	ldr	r3, [r7, #4]
 8010a82:	4a1a      	ldr	r2, [pc, #104]	@ (8010aec <TIM_OC2_SetConfig+0x10c>)
 8010a84:	4293      	cmp	r3, r2
 8010a86:	d003      	beq.n	8010a90 <TIM_OC2_SetConfig+0xb0>
 8010a88:	687b      	ldr	r3, [r7, #4]
 8010a8a:	4a19      	ldr	r2, [pc, #100]	@ (8010af0 <TIM_OC2_SetConfig+0x110>)
 8010a8c:	4293      	cmp	r3, r2
 8010a8e:	d113      	bne.n	8010ab8 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8010a90:	693b      	ldr	r3, [r7, #16]
 8010a92:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8010a96:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8010a98:	693b      	ldr	r3, [r7, #16]
 8010a9a:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8010a9e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8010aa0:	683b      	ldr	r3, [r7, #0]
 8010aa2:	695b      	ldr	r3, [r3, #20]
 8010aa4:	009b      	lsls	r3, r3, #2
 8010aa6:	693a      	ldr	r2, [r7, #16]
 8010aa8:	4313      	orrs	r3, r2
 8010aaa:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8010aac:	683b      	ldr	r3, [r7, #0]
 8010aae:	699b      	ldr	r3, [r3, #24]
 8010ab0:	009b      	lsls	r3, r3, #2
 8010ab2:	693a      	ldr	r2, [r7, #16]
 8010ab4:	4313      	orrs	r3, r2
 8010ab6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8010ab8:	687b      	ldr	r3, [r7, #4]
 8010aba:	693a      	ldr	r2, [r7, #16]
 8010abc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8010abe:	687b      	ldr	r3, [r7, #4]
 8010ac0:	68fa      	ldr	r2, [r7, #12]
 8010ac2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8010ac4:	683b      	ldr	r3, [r7, #0]
 8010ac6:	685a      	ldr	r2, [r3, #4]
 8010ac8:	687b      	ldr	r3, [r7, #4]
 8010aca:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8010acc:	687b      	ldr	r3, [r7, #4]
 8010ace:	697a      	ldr	r2, [r7, #20]
 8010ad0:	621a      	str	r2, [r3, #32]
}
 8010ad2:	bf00      	nop
 8010ad4:	371c      	adds	r7, #28
 8010ad6:	46bd      	mov	sp, r7
 8010ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010adc:	4770      	bx	lr
 8010ade:	bf00      	nop
 8010ae0:	40012c00 	.word	0x40012c00
 8010ae4:	40013400 	.word	0x40013400
 8010ae8:	40014000 	.word	0x40014000
 8010aec:	40014400 	.word	0x40014400
 8010af0:	40014800 	.word	0x40014800

08010af4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8010af4:	b480      	push	{r7}
 8010af6:	b087      	sub	sp, #28
 8010af8:	af00      	add	r7, sp, #0
 8010afa:	6078      	str	r0, [r7, #4]
 8010afc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8010afe:	687b      	ldr	r3, [r7, #4]
 8010b00:	6a1b      	ldr	r3, [r3, #32]
 8010b02:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8010b04:	687b      	ldr	r3, [r7, #4]
 8010b06:	6a1b      	ldr	r3, [r3, #32]
 8010b08:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8010b0c:	687b      	ldr	r3, [r7, #4]
 8010b0e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8010b10:	687b      	ldr	r3, [r7, #4]
 8010b12:	685b      	ldr	r3, [r3, #4]
 8010b14:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8010b16:	687b      	ldr	r3, [r7, #4]
 8010b18:	69db      	ldr	r3, [r3, #28]
 8010b1a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8010b1c:	68fb      	ldr	r3, [r7, #12]
 8010b1e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8010b22:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8010b26:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8010b28:	68fb      	ldr	r3, [r7, #12]
 8010b2a:	f023 0303 	bic.w	r3, r3, #3
 8010b2e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8010b30:	683b      	ldr	r3, [r7, #0]
 8010b32:	681b      	ldr	r3, [r3, #0]
 8010b34:	68fa      	ldr	r2, [r7, #12]
 8010b36:	4313      	orrs	r3, r2
 8010b38:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8010b3a:	697b      	ldr	r3, [r7, #20]
 8010b3c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8010b40:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8010b42:	683b      	ldr	r3, [r7, #0]
 8010b44:	689b      	ldr	r3, [r3, #8]
 8010b46:	021b      	lsls	r3, r3, #8
 8010b48:	697a      	ldr	r2, [r7, #20]
 8010b4a:	4313      	orrs	r3, r2
 8010b4c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8010b4e:	687b      	ldr	r3, [r7, #4]
 8010b50:	4a27      	ldr	r2, [pc, #156]	@ (8010bf0 <TIM_OC3_SetConfig+0xfc>)
 8010b52:	4293      	cmp	r3, r2
 8010b54:	d003      	beq.n	8010b5e <TIM_OC3_SetConfig+0x6a>
 8010b56:	687b      	ldr	r3, [r7, #4]
 8010b58:	4a26      	ldr	r2, [pc, #152]	@ (8010bf4 <TIM_OC3_SetConfig+0x100>)
 8010b5a:	4293      	cmp	r3, r2
 8010b5c:	d10d      	bne.n	8010b7a <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8010b5e:	697b      	ldr	r3, [r7, #20]
 8010b60:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8010b64:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8010b66:	683b      	ldr	r3, [r7, #0]
 8010b68:	68db      	ldr	r3, [r3, #12]
 8010b6a:	021b      	lsls	r3, r3, #8
 8010b6c:	697a      	ldr	r2, [r7, #20]
 8010b6e:	4313      	orrs	r3, r2
 8010b70:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8010b72:	697b      	ldr	r3, [r7, #20]
 8010b74:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8010b78:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8010b7a:	687b      	ldr	r3, [r7, #4]
 8010b7c:	4a1c      	ldr	r2, [pc, #112]	@ (8010bf0 <TIM_OC3_SetConfig+0xfc>)
 8010b7e:	4293      	cmp	r3, r2
 8010b80:	d00f      	beq.n	8010ba2 <TIM_OC3_SetConfig+0xae>
 8010b82:	687b      	ldr	r3, [r7, #4]
 8010b84:	4a1b      	ldr	r2, [pc, #108]	@ (8010bf4 <TIM_OC3_SetConfig+0x100>)
 8010b86:	4293      	cmp	r3, r2
 8010b88:	d00b      	beq.n	8010ba2 <TIM_OC3_SetConfig+0xae>
 8010b8a:	687b      	ldr	r3, [r7, #4]
 8010b8c:	4a1a      	ldr	r2, [pc, #104]	@ (8010bf8 <TIM_OC3_SetConfig+0x104>)
 8010b8e:	4293      	cmp	r3, r2
 8010b90:	d007      	beq.n	8010ba2 <TIM_OC3_SetConfig+0xae>
 8010b92:	687b      	ldr	r3, [r7, #4]
 8010b94:	4a19      	ldr	r2, [pc, #100]	@ (8010bfc <TIM_OC3_SetConfig+0x108>)
 8010b96:	4293      	cmp	r3, r2
 8010b98:	d003      	beq.n	8010ba2 <TIM_OC3_SetConfig+0xae>
 8010b9a:	687b      	ldr	r3, [r7, #4]
 8010b9c:	4a18      	ldr	r2, [pc, #96]	@ (8010c00 <TIM_OC3_SetConfig+0x10c>)
 8010b9e:	4293      	cmp	r3, r2
 8010ba0:	d113      	bne.n	8010bca <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8010ba2:	693b      	ldr	r3, [r7, #16]
 8010ba4:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8010ba8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8010baa:	693b      	ldr	r3, [r7, #16]
 8010bac:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8010bb0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8010bb2:	683b      	ldr	r3, [r7, #0]
 8010bb4:	695b      	ldr	r3, [r3, #20]
 8010bb6:	011b      	lsls	r3, r3, #4
 8010bb8:	693a      	ldr	r2, [r7, #16]
 8010bba:	4313      	orrs	r3, r2
 8010bbc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8010bbe:	683b      	ldr	r3, [r7, #0]
 8010bc0:	699b      	ldr	r3, [r3, #24]
 8010bc2:	011b      	lsls	r3, r3, #4
 8010bc4:	693a      	ldr	r2, [r7, #16]
 8010bc6:	4313      	orrs	r3, r2
 8010bc8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8010bca:	687b      	ldr	r3, [r7, #4]
 8010bcc:	693a      	ldr	r2, [r7, #16]
 8010bce:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8010bd0:	687b      	ldr	r3, [r7, #4]
 8010bd2:	68fa      	ldr	r2, [r7, #12]
 8010bd4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8010bd6:	683b      	ldr	r3, [r7, #0]
 8010bd8:	685a      	ldr	r2, [r3, #4]
 8010bda:	687b      	ldr	r3, [r7, #4]
 8010bdc:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8010bde:	687b      	ldr	r3, [r7, #4]
 8010be0:	697a      	ldr	r2, [r7, #20]
 8010be2:	621a      	str	r2, [r3, #32]
}
 8010be4:	bf00      	nop
 8010be6:	371c      	adds	r7, #28
 8010be8:	46bd      	mov	sp, r7
 8010bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010bee:	4770      	bx	lr
 8010bf0:	40012c00 	.word	0x40012c00
 8010bf4:	40013400 	.word	0x40013400
 8010bf8:	40014000 	.word	0x40014000
 8010bfc:	40014400 	.word	0x40014400
 8010c00:	40014800 	.word	0x40014800

08010c04 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8010c04:	b480      	push	{r7}
 8010c06:	b087      	sub	sp, #28
 8010c08:	af00      	add	r7, sp, #0
 8010c0a:	6078      	str	r0, [r7, #4]
 8010c0c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8010c0e:	687b      	ldr	r3, [r7, #4]
 8010c10:	6a1b      	ldr	r3, [r3, #32]
 8010c12:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8010c14:	687b      	ldr	r3, [r7, #4]
 8010c16:	6a1b      	ldr	r3, [r3, #32]
 8010c18:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8010c1c:	687b      	ldr	r3, [r7, #4]
 8010c1e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8010c20:	687b      	ldr	r3, [r7, #4]
 8010c22:	685b      	ldr	r3, [r3, #4]
 8010c24:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8010c26:	687b      	ldr	r3, [r7, #4]
 8010c28:	69db      	ldr	r3, [r3, #28]
 8010c2a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8010c2c:	68fb      	ldr	r3, [r7, #12]
 8010c2e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8010c32:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8010c36:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8010c38:	68fb      	ldr	r3, [r7, #12]
 8010c3a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8010c3e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8010c40:	683b      	ldr	r3, [r7, #0]
 8010c42:	681b      	ldr	r3, [r3, #0]
 8010c44:	021b      	lsls	r3, r3, #8
 8010c46:	68fa      	ldr	r2, [r7, #12]
 8010c48:	4313      	orrs	r3, r2
 8010c4a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8010c4c:	693b      	ldr	r3, [r7, #16]
 8010c4e:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8010c52:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8010c54:	683b      	ldr	r3, [r7, #0]
 8010c56:	689b      	ldr	r3, [r3, #8]
 8010c58:	031b      	lsls	r3, r3, #12
 8010c5a:	693a      	ldr	r2, [r7, #16]
 8010c5c:	4313      	orrs	r3, r2
 8010c5e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8010c60:	687b      	ldr	r3, [r7, #4]
 8010c62:	4a18      	ldr	r2, [pc, #96]	@ (8010cc4 <TIM_OC4_SetConfig+0xc0>)
 8010c64:	4293      	cmp	r3, r2
 8010c66:	d00f      	beq.n	8010c88 <TIM_OC4_SetConfig+0x84>
 8010c68:	687b      	ldr	r3, [r7, #4]
 8010c6a:	4a17      	ldr	r2, [pc, #92]	@ (8010cc8 <TIM_OC4_SetConfig+0xc4>)
 8010c6c:	4293      	cmp	r3, r2
 8010c6e:	d00b      	beq.n	8010c88 <TIM_OC4_SetConfig+0x84>
 8010c70:	687b      	ldr	r3, [r7, #4]
 8010c72:	4a16      	ldr	r2, [pc, #88]	@ (8010ccc <TIM_OC4_SetConfig+0xc8>)
 8010c74:	4293      	cmp	r3, r2
 8010c76:	d007      	beq.n	8010c88 <TIM_OC4_SetConfig+0x84>
 8010c78:	687b      	ldr	r3, [r7, #4]
 8010c7a:	4a15      	ldr	r2, [pc, #84]	@ (8010cd0 <TIM_OC4_SetConfig+0xcc>)
 8010c7c:	4293      	cmp	r3, r2
 8010c7e:	d003      	beq.n	8010c88 <TIM_OC4_SetConfig+0x84>
 8010c80:	687b      	ldr	r3, [r7, #4]
 8010c82:	4a14      	ldr	r2, [pc, #80]	@ (8010cd4 <TIM_OC4_SetConfig+0xd0>)
 8010c84:	4293      	cmp	r3, r2
 8010c86:	d109      	bne.n	8010c9c <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8010c88:	697b      	ldr	r3, [r7, #20]
 8010c8a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8010c8e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8010c90:	683b      	ldr	r3, [r7, #0]
 8010c92:	695b      	ldr	r3, [r3, #20]
 8010c94:	019b      	lsls	r3, r3, #6
 8010c96:	697a      	ldr	r2, [r7, #20]
 8010c98:	4313      	orrs	r3, r2
 8010c9a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8010c9c:	687b      	ldr	r3, [r7, #4]
 8010c9e:	697a      	ldr	r2, [r7, #20]
 8010ca0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8010ca2:	687b      	ldr	r3, [r7, #4]
 8010ca4:	68fa      	ldr	r2, [r7, #12]
 8010ca6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8010ca8:	683b      	ldr	r3, [r7, #0]
 8010caa:	685a      	ldr	r2, [r3, #4]
 8010cac:	687b      	ldr	r3, [r7, #4]
 8010cae:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8010cb0:	687b      	ldr	r3, [r7, #4]
 8010cb2:	693a      	ldr	r2, [r7, #16]
 8010cb4:	621a      	str	r2, [r3, #32]
}
 8010cb6:	bf00      	nop
 8010cb8:	371c      	adds	r7, #28
 8010cba:	46bd      	mov	sp, r7
 8010cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010cc0:	4770      	bx	lr
 8010cc2:	bf00      	nop
 8010cc4:	40012c00 	.word	0x40012c00
 8010cc8:	40013400 	.word	0x40013400
 8010ccc:	40014000 	.word	0x40014000
 8010cd0:	40014400 	.word	0x40014400
 8010cd4:	40014800 	.word	0x40014800

08010cd8 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8010cd8:	b480      	push	{r7}
 8010cda:	b087      	sub	sp, #28
 8010cdc:	af00      	add	r7, sp, #0
 8010cde:	6078      	str	r0, [r7, #4]
 8010ce0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8010ce2:	687b      	ldr	r3, [r7, #4]
 8010ce4:	6a1b      	ldr	r3, [r3, #32]
 8010ce6:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8010ce8:	687b      	ldr	r3, [r7, #4]
 8010cea:	6a1b      	ldr	r3, [r3, #32]
 8010cec:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8010cf0:	687b      	ldr	r3, [r7, #4]
 8010cf2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8010cf4:	687b      	ldr	r3, [r7, #4]
 8010cf6:	685b      	ldr	r3, [r3, #4]
 8010cf8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8010cfa:	687b      	ldr	r3, [r7, #4]
 8010cfc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8010cfe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8010d00:	68fb      	ldr	r3, [r7, #12]
 8010d02:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8010d06:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8010d0a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8010d0c:	683b      	ldr	r3, [r7, #0]
 8010d0e:	681b      	ldr	r3, [r3, #0]
 8010d10:	68fa      	ldr	r2, [r7, #12]
 8010d12:	4313      	orrs	r3, r2
 8010d14:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8010d16:	693b      	ldr	r3, [r7, #16]
 8010d18:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8010d1c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8010d1e:	683b      	ldr	r3, [r7, #0]
 8010d20:	689b      	ldr	r3, [r3, #8]
 8010d22:	041b      	lsls	r3, r3, #16
 8010d24:	693a      	ldr	r2, [r7, #16]
 8010d26:	4313      	orrs	r3, r2
 8010d28:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8010d2a:	687b      	ldr	r3, [r7, #4]
 8010d2c:	4a17      	ldr	r2, [pc, #92]	@ (8010d8c <TIM_OC5_SetConfig+0xb4>)
 8010d2e:	4293      	cmp	r3, r2
 8010d30:	d00f      	beq.n	8010d52 <TIM_OC5_SetConfig+0x7a>
 8010d32:	687b      	ldr	r3, [r7, #4]
 8010d34:	4a16      	ldr	r2, [pc, #88]	@ (8010d90 <TIM_OC5_SetConfig+0xb8>)
 8010d36:	4293      	cmp	r3, r2
 8010d38:	d00b      	beq.n	8010d52 <TIM_OC5_SetConfig+0x7a>
 8010d3a:	687b      	ldr	r3, [r7, #4]
 8010d3c:	4a15      	ldr	r2, [pc, #84]	@ (8010d94 <TIM_OC5_SetConfig+0xbc>)
 8010d3e:	4293      	cmp	r3, r2
 8010d40:	d007      	beq.n	8010d52 <TIM_OC5_SetConfig+0x7a>
 8010d42:	687b      	ldr	r3, [r7, #4]
 8010d44:	4a14      	ldr	r2, [pc, #80]	@ (8010d98 <TIM_OC5_SetConfig+0xc0>)
 8010d46:	4293      	cmp	r3, r2
 8010d48:	d003      	beq.n	8010d52 <TIM_OC5_SetConfig+0x7a>
 8010d4a:	687b      	ldr	r3, [r7, #4]
 8010d4c:	4a13      	ldr	r2, [pc, #76]	@ (8010d9c <TIM_OC5_SetConfig+0xc4>)
 8010d4e:	4293      	cmp	r3, r2
 8010d50:	d109      	bne.n	8010d66 <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8010d52:	697b      	ldr	r3, [r7, #20]
 8010d54:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8010d58:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8010d5a:	683b      	ldr	r3, [r7, #0]
 8010d5c:	695b      	ldr	r3, [r3, #20]
 8010d5e:	021b      	lsls	r3, r3, #8
 8010d60:	697a      	ldr	r2, [r7, #20]
 8010d62:	4313      	orrs	r3, r2
 8010d64:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8010d66:	687b      	ldr	r3, [r7, #4]
 8010d68:	697a      	ldr	r2, [r7, #20]
 8010d6a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8010d6c:	687b      	ldr	r3, [r7, #4]
 8010d6e:	68fa      	ldr	r2, [r7, #12]
 8010d70:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8010d72:	683b      	ldr	r3, [r7, #0]
 8010d74:	685a      	ldr	r2, [r3, #4]
 8010d76:	687b      	ldr	r3, [r7, #4]
 8010d78:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8010d7a:	687b      	ldr	r3, [r7, #4]
 8010d7c:	693a      	ldr	r2, [r7, #16]
 8010d7e:	621a      	str	r2, [r3, #32]
}
 8010d80:	bf00      	nop
 8010d82:	371c      	adds	r7, #28
 8010d84:	46bd      	mov	sp, r7
 8010d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010d8a:	4770      	bx	lr
 8010d8c:	40012c00 	.word	0x40012c00
 8010d90:	40013400 	.word	0x40013400
 8010d94:	40014000 	.word	0x40014000
 8010d98:	40014400 	.word	0x40014400
 8010d9c:	40014800 	.word	0x40014800

08010da0 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8010da0:	b480      	push	{r7}
 8010da2:	b087      	sub	sp, #28
 8010da4:	af00      	add	r7, sp, #0
 8010da6:	6078      	str	r0, [r7, #4]
 8010da8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8010daa:	687b      	ldr	r3, [r7, #4]
 8010dac:	6a1b      	ldr	r3, [r3, #32]
 8010dae:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8010db0:	687b      	ldr	r3, [r7, #4]
 8010db2:	6a1b      	ldr	r3, [r3, #32]
 8010db4:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8010db8:	687b      	ldr	r3, [r7, #4]
 8010dba:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8010dbc:	687b      	ldr	r3, [r7, #4]
 8010dbe:	685b      	ldr	r3, [r3, #4]
 8010dc0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8010dc2:	687b      	ldr	r3, [r7, #4]
 8010dc4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8010dc6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8010dc8:	68fb      	ldr	r3, [r7, #12]
 8010dca:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8010dce:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8010dd2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8010dd4:	683b      	ldr	r3, [r7, #0]
 8010dd6:	681b      	ldr	r3, [r3, #0]
 8010dd8:	021b      	lsls	r3, r3, #8
 8010dda:	68fa      	ldr	r2, [r7, #12]
 8010ddc:	4313      	orrs	r3, r2
 8010dde:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8010de0:	693b      	ldr	r3, [r7, #16]
 8010de2:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8010de6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8010de8:	683b      	ldr	r3, [r7, #0]
 8010dea:	689b      	ldr	r3, [r3, #8]
 8010dec:	051b      	lsls	r3, r3, #20
 8010dee:	693a      	ldr	r2, [r7, #16]
 8010df0:	4313      	orrs	r3, r2
 8010df2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8010df4:	687b      	ldr	r3, [r7, #4]
 8010df6:	4a18      	ldr	r2, [pc, #96]	@ (8010e58 <TIM_OC6_SetConfig+0xb8>)
 8010df8:	4293      	cmp	r3, r2
 8010dfa:	d00f      	beq.n	8010e1c <TIM_OC6_SetConfig+0x7c>
 8010dfc:	687b      	ldr	r3, [r7, #4]
 8010dfe:	4a17      	ldr	r2, [pc, #92]	@ (8010e5c <TIM_OC6_SetConfig+0xbc>)
 8010e00:	4293      	cmp	r3, r2
 8010e02:	d00b      	beq.n	8010e1c <TIM_OC6_SetConfig+0x7c>
 8010e04:	687b      	ldr	r3, [r7, #4]
 8010e06:	4a16      	ldr	r2, [pc, #88]	@ (8010e60 <TIM_OC6_SetConfig+0xc0>)
 8010e08:	4293      	cmp	r3, r2
 8010e0a:	d007      	beq.n	8010e1c <TIM_OC6_SetConfig+0x7c>
 8010e0c:	687b      	ldr	r3, [r7, #4]
 8010e0e:	4a15      	ldr	r2, [pc, #84]	@ (8010e64 <TIM_OC6_SetConfig+0xc4>)
 8010e10:	4293      	cmp	r3, r2
 8010e12:	d003      	beq.n	8010e1c <TIM_OC6_SetConfig+0x7c>
 8010e14:	687b      	ldr	r3, [r7, #4]
 8010e16:	4a14      	ldr	r2, [pc, #80]	@ (8010e68 <TIM_OC6_SetConfig+0xc8>)
 8010e18:	4293      	cmp	r3, r2
 8010e1a:	d109      	bne.n	8010e30 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8010e1c:	697b      	ldr	r3, [r7, #20]
 8010e1e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8010e22:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8010e24:	683b      	ldr	r3, [r7, #0]
 8010e26:	695b      	ldr	r3, [r3, #20]
 8010e28:	029b      	lsls	r3, r3, #10
 8010e2a:	697a      	ldr	r2, [r7, #20]
 8010e2c:	4313      	orrs	r3, r2
 8010e2e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8010e30:	687b      	ldr	r3, [r7, #4]
 8010e32:	697a      	ldr	r2, [r7, #20]
 8010e34:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8010e36:	687b      	ldr	r3, [r7, #4]
 8010e38:	68fa      	ldr	r2, [r7, #12]
 8010e3a:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8010e3c:	683b      	ldr	r3, [r7, #0]
 8010e3e:	685a      	ldr	r2, [r3, #4]
 8010e40:	687b      	ldr	r3, [r7, #4]
 8010e42:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8010e44:	687b      	ldr	r3, [r7, #4]
 8010e46:	693a      	ldr	r2, [r7, #16]
 8010e48:	621a      	str	r2, [r3, #32]
}
 8010e4a:	bf00      	nop
 8010e4c:	371c      	adds	r7, #28
 8010e4e:	46bd      	mov	sp, r7
 8010e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e54:	4770      	bx	lr
 8010e56:	bf00      	nop
 8010e58:	40012c00 	.word	0x40012c00
 8010e5c:	40013400 	.word	0x40013400
 8010e60:	40014000 	.word	0x40014000
 8010e64:	40014400 	.word	0x40014400
 8010e68:	40014800 	.word	0x40014800

08010e6c <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8010e6c:	b580      	push	{r7, lr}
 8010e6e:	b086      	sub	sp, #24
 8010e70:	af00      	add	r7, sp, #0
 8010e72:	6078      	str	r0, [r7, #4]
 8010e74:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8010e76:	2300      	movs	r3, #0
 8010e78:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8010e7a:	687b      	ldr	r3, [r7, #4]
 8010e7c:	681b      	ldr	r3, [r3, #0]
 8010e7e:	689b      	ldr	r3, [r3, #8]
 8010e80:	613b      	str	r3, [r7, #16]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8010e82:	693b      	ldr	r3, [r7, #16]
 8010e84:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8010e88:	613b      	str	r3, [r7, #16]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 8010e8a:	683b      	ldr	r3, [r7, #0]
 8010e8c:	685b      	ldr	r3, [r3, #4]
 8010e8e:	693a      	ldr	r2, [r7, #16]
 8010e90:	4313      	orrs	r3, r2
 8010e92:	613b      	str	r3, [r7, #16]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 8010e94:	693b      	ldr	r3, [r7, #16]
 8010e96:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8010e9a:	f023 0307 	bic.w	r3, r3, #7
 8010e9e:	613b      	str	r3, [r7, #16]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 8010ea0:	683b      	ldr	r3, [r7, #0]
 8010ea2:	681b      	ldr	r3, [r3, #0]
 8010ea4:	693a      	ldr	r2, [r7, #16]
 8010ea6:	4313      	orrs	r3, r2
 8010ea8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8010eaa:	687b      	ldr	r3, [r7, #4]
 8010eac:	681b      	ldr	r3, [r3, #0]
 8010eae:	693a      	ldr	r2, [r7, #16]
 8010eb0:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 8010eb2:	683b      	ldr	r3, [r7, #0]
 8010eb4:	685b      	ldr	r3, [r3, #4]
 8010eb6:	2b70      	cmp	r3, #112	@ 0x70
 8010eb8:	d01a      	beq.n	8010ef0 <TIM_SlaveTimer_SetConfig+0x84>
 8010eba:	2b70      	cmp	r3, #112	@ 0x70
 8010ebc:	d860      	bhi.n	8010f80 <TIM_SlaveTimer_SetConfig+0x114>
 8010ebe:	2b60      	cmp	r3, #96	@ 0x60
 8010ec0:	d054      	beq.n	8010f6c <TIM_SlaveTimer_SetConfig+0x100>
 8010ec2:	2b60      	cmp	r3, #96	@ 0x60
 8010ec4:	d85c      	bhi.n	8010f80 <TIM_SlaveTimer_SetConfig+0x114>
 8010ec6:	2b50      	cmp	r3, #80	@ 0x50
 8010ec8:	d046      	beq.n	8010f58 <TIM_SlaveTimer_SetConfig+0xec>
 8010eca:	2b50      	cmp	r3, #80	@ 0x50
 8010ecc:	d858      	bhi.n	8010f80 <TIM_SlaveTimer_SetConfig+0x114>
 8010ece:	2b40      	cmp	r3, #64	@ 0x40
 8010ed0:	d019      	beq.n	8010f06 <TIM_SlaveTimer_SetConfig+0x9a>
 8010ed2:	2b40      	cmp	r3, #64	@ 0x40
 8010ed4:	d854      	bhi.n	8010f80 <TIM_SlaveTimer_SetConfig+0x114>
 8010ed6:	2b30      	cmp	r3, #48	@ 0x30
 8010ed8:	d055      	beq.n	8010f86 <TIM_SlaveTimer_SetConfig+0x11a>
 8010eda:	2b30      	cmp	r3, #48	@ 0x30
 8010edc:	d850      	bhi.n	8010f80 <TIM_SlaveTimer_SetConfig+0x114>
 8010ede:	2b20      	cmp	r3, #32
 8010ee0:	d051      	beq.n	8010f86 <TIM_SlaveTimer_SetConfig+0x11a>
 8010ee2:	2b20      	cmp	r3, #32
 8010ee4:	d84c      	bhi.n	8010f80 <TIM_SlaveTimer_SetConfig+0x114>
 8010ee6:	2b00      	cmp	r3, #0
 8010ee8:	d04d      	beq.n	8010f86 <TIM_SlaveTimer_SetConfig+0x11a>
 8010eea:	2b10      	cmp	r3, #16
 8010eec:	d04b      	beq.n	8010f86 <TIM_SlaveTimer_SetConfig+0x11a>
 8010eee:	e047      	b.n	8010f80 <TIM_SlaveTimer_SetConfig+0x114>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPRESCALER(sSlaveConfig->TriggerPrescaler));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
      /* Configure the ETR Trigger source */
      TIM_ETR_SetConfig(htim->Instance,
 8010ef0:	687b      	ldr	r3, [r7, #4]
 8010ef2:	6818      	ldr	r0, [r3, #0]
                        sSlaveConfig->TriggerPrescaler,
 8010ef4:	683b      	ldr	r3, [r7, #0]
 8010ef6:	68d9      	ldr	r1, [r3, #12]
                        sSlaveConfig->TriggerPolarity,
 8010ef8:	683b      	ldr	r3, [r7, #0]
 8010efa:	689a      	ldr	r2, [r3, #8]
                        sSlaveConfig->TriggerFilter);
 8010efc:	683b      	ldr	r3, [r7, #0]
 8010efe:	691b      	ldr	r3, [r3, #16]
      TIM_ETR_SetConfig(htim->Instance,
 8010f00:	f000 f9e6 	bl	80112d0 <TIM_ETR_SetConfig>
      break;
 8010f04:	e040      	b.n	8010f88 <TIM_SlaveTimer_SetConfig+0x11c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      if (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 8010f06:	683b      	ldr	r3, [r7, #0]
 8010f08:	681b      	ldr	r3, [r3, #0]
 8010f0a:	2b05      	cmp	r3, #5
 8010f0c:	d101      	bne.n	8010f12 <TIM_SlaveTimer_SetConfig+0xa6>
      {
        return HAL_ERROR;
 8010f0e:	2301      	movs	r3, #1
 8010f10:	e03b      	b.n	8010f8a <TIM_SlaveTimer_SetConfig+0x11e>
      }

      /* Disable the Channel 1: Reset the CC1E Bit */
      tmpccer = htim->Instance->CCER;
 8010f12:	687b      	ldr	r3, [r7, #4]
 8010f14:	681b      	ldr	r3, [r3, #0]
 8010f16:	6a1b      	ldr	r3, [r3, #32]
 8010f18:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 8010f1a:	687b      	ldr	r3, [r7, #4]
 8010f1c:	681b      	ldr	r3, [r3, #0]
 8010f1e:	6a1a      	ldr	r2, [r3, #32]
 8010f20:	687b      	ldr	r3, [r7, #4]
 8010f22:	681b      	ldr	r3, [r3, #0]
 8010f24:	f022 0201 	bic.w	r2, r2, #1
 8010f28:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 8010f2a:	687b      	ldr	r3, [r7, #4]
 8010f2c:	681b      	ldr	r3, [r3, #0]
 8010f2e:	699b      	ldr	r3, [r3, #24]
 8010f30:	60bb      	str	r3, [r7, #8]

      /* Set the filter */
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8010f32:	68bb      	ldr	r3, [r7, #8]
 8010f34:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8010f38:	60bb      	str	r3, [r7, #8]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 8010f3a:	683b      	ldr	r3, [r7, #0]
 8010f3c:	691b      	ldr	r3, [r3, #16]
 8010f3e:	011b      	lsls	r3, r3, #4
 8010f40:	68ba      	ldr	r2, [r7, #8]
 8010f42:	4313      	orrs	r3, r2
 8010f44:	60bb      	str	r3, [r7, #8]

      /* Write to TIMx CCMR1 and CCER registers */
      htim->Instance->CCMR1 = tmpccmr1;
 8010f46:	687b      	ldr	r3, [r7, #4]
 8010f48:	681b      	ldr	r3, [r3, #0]
 8010f4a:	68ba      	ldr	r2, [r7, #8]
 8010f4c:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 8010f4e:	687b      	ldr	r3, [r7, #4]
 8010f50:	681b      	ldr	r3, [r3, #0]
 8010f52:	68fa      	ldr	r2, [r7, #12]
 8010f54:	621a      	str	r2, [r3, #32]
      break;
 8010f56:	e017      	b.n	8010f88 <TIM_SlaveTimer_SetConfig+0x11c>
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI1 Filter and Polarity */
      TIM_TI1_ConfigInputStage(htim->Instance,
 8010f58:	687b      	ldr	r3, [r7, #4]
 8010f5a:	6818      	ldr	r0, [r3, #0]
                               sSlaveConfig->TriggerPolarity,
 8010f5c:	683b      	ldr	r3, [r7, #0]
 8010f5e:	6899      	ldr	r1, [r3, #8]
                               sSlaveConfig->TriggerFilter);
 8010f60:	683b      	ldr	r3, [r7, #0]
 8010f62:	691b      	ldr	r3, [r3, #16]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8010f64:	461a      	mov	r2, r3
 8010f66:	f000 f883 	bl	8011070 <TIM_TI1_ConfigInputStage>
      break;
 8010f6a:	e00d      	b.n	8010f88 <TIM_SlaveTimer_SetConfig+0x11c>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI2 Filter and Polarity */
      TIM_TI2_ConfigInputStage(htim->Instance,
 8010f6c:	687b      	ldr	r3, [r7, #4]
 8010f6e:	6818      	ldr	r0, [r3, #0]
                               sSlaveConfig->TriggerPolarity,
 8010f70:	683b      	ldr	r3, [r7, #0]
 8010f72:	6899      	ldr	r1, [r3, #8]
                               sSlaveConfig->TriggerFilter);
 8010f74:	683b      	ldr	r3, [r7, #0]
 8010f76:	691b      	ldr	r3, [r3, #16]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8010f78:	461a      	mov	r2, r3
 8010f7a:	f000 f8e5 	bl	8011148 <TIM_TI2_ConfigInputStage>
      break;
 8010f7e:	e003      	b.n	8010f88 <TIM_SlaveTimer_SetConfig+0x11c>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      break;
    }

    default:
      status = HAL_ERROR;
 8010f80:	2301      	movs	r3, #1
 8010f82:	75fb      	strb	r3, [r7, #23]
      break;
 8010f84:	e000      	b.n	8010f88 <TIM_SlaveTimer_SetConfig+0x11c>
      break;
 8010f86:	bf00      	nop
  }

  return status;
 8010f88:	7dfb      	ldrb	r3, [r7, #23]
}
 8010f8a:	4618      	mov	r0, r3
 8010f8c:	3718      	adds	r7, #24
 8010f8e:	46bd      	mov	sp, r7
 8010f90:	bd80      	pop	{r7, pc}
	...

08010f94 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8010f94:	b480      	push	{r7}
 8010f96:	b087      	sub	sp, #28
 8010f98:	af00      	add	r7, sp, #0
 8010f9a:	60f8      	str	r0, [r7, #12]
 8010f9c:	60b9      	str	r1, [r7, #8]
 8010f9e:	607a      	str	r2, [r7, #4]
 8010fa0:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8010fa2:	68fb      	ldr	r3, [r7, #12]
 8010fa4:	6a1b      	ldr	r3, [r3, #32]
 8010fa6:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8010fa8:	68fb      	ldr	r3, [r7, #12]
 8010faa:	6a1b      	ldr	r3, [r3, #32]
 8010fac:	f023 0201 	bic.w	r2, r3, #1
 8010fb0:	68fb      	ldr	r3, [r7, #12]
 8010fb2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8010fb4:	68fb      	ldr	r3, [r7, #12]
 8010fb6:	699b      	ldr	r3, [r3, #24]
 8010fb8:	617b      	str	r3, [r7, #20]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8010fba:	68fb      	ldr	r3, [r7, #12]
 8010fbc:	4a26      	ldr	r2, [pc, #152]	@ (8011058 <TIM_TI1_SetConfig+0xc4>)
 8010fbe:	4293      	cmp	r3, r2
 8010fc0:	d017      	beq.n	8010ff2 <TIM_TI1_SetConfig+0x5e>
 8010fc2:	68fb      	ldr	r3, [r7, #12]
 8010fc4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8010fc8:	d013      	beq.n	8010ff2 <TIM_TI1_SetConfig+0x5e>
 8010fca:	68fb      	ldr	r3, [r7, #12]
 8010fcc:	4a23      	ldr	r2, [pc, #140]	@ (801105c <TIM_TI1_SetConfig+0xc8>)
 8010fce:	4293      	cmp	r3, r2
 8010fd0:	d00f      	beq.n	8010ff2 <TIM_TI1_SetConfig+0x5e>
 8010fd2:	68fb      	ldr	r3, [r7, #12]
 8010fd4:	4a22      	ldr	r2, [pc, #136]	@ (8011060 <TIM_TI1_SetConfig+0xcc>)
 8010fd6:	4293      	cmp	r3, r2
 8010fd8:	d00b      	beq.n	8010ff2 <TIM_TI1_SetConfig+0x5e>
 8010fda:	68fb      	ldr	r3, [r7, #12]
 8010fdc:	4a21      	ldr	r2, [pc, #132]	@ (8011064 <TIM_TI1_SetConfig+0xd0>)
 8010fde:	4293      	cmp	r3, r2
 8010fe0:	d007      	beq.n	8010ff2 <TIM_TI1_SetConfig+0x5e>
 8010fe2:	68fb      	ldr	r3, [r7, #12]
 8010fe4:	4a20      	ldr	r2, [pc, #128]	@ (8011068 <TIM_TI1_SetConfig+0xd4>)
 8010fe6:	4293      	cmp	r3, r2
 8010fe8:	d003      	beq.n	8010ff2 <TIM_TI1_SetConfig+0x5e>
 8010fea:	68fb      	ldr	r3, [r7, #12]
 8010fec:	4a1f      	ldr	r2, [pc, #124]	@ (801106c <TIM_TI1_SetConfig+0xd8>)
 8010fee:	4293      	cmp	r3, r2
 8010ff0:	d101      	bne.n	8010ff6 <TIM_TI1_SetConfig+0x62>
 8010ff2:	2301      	movs	r3, #1
 8010ff4:	e000      	b.n	8010ff8 <TIM_TI1_SetConfig+0x64>
 8010ff6:	2300      	movs	r3, #0
 8010ff8:	2b00      	cmp	r3, #0
 8010ffa:	d008      	beq.n	801100e <TIM_TI1_SetConfig+0x7a>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8010ffc:	697b      	ldr	r3, [r7, #20]
 8010ffe:	f023 0303 	bic.w	r3, r3, #3
 8011002:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8011004:	697a      	ldr	r2, [r7, #20]
 8011006:	687b      	ldr	r3, [r7, #4]
 8011008:	4313      	orrs	r3, r2
 801100a:	617b      	str	r3, [r7, #20]
 801100c:	e003      	b.n	8011016 <TIM_TI1_SetConfig+0x82>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 801100e:	697b      	ldr	r3, [r7, #20]
 8011010:	f043 0301 	orr.w	r3, r3, #1
 8011014:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8011016:	697b      	ldr	r3, [r7, #20]
 8011018:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 801101c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 801101e:	683b      	ldr	r3, [r7, #0]
 8011020:	011b      	lsls	r3, r3, #4
 8011022:	b2db      	uxtb	r3, r3
 8011024:	697a      	ldr	r2, [r7, #20]
 8011026:	4313      	orrs	r3, r2
 8011028:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 801102a:	693b      	ldr	r3, [r7, #16]
 801102c:	f023 030a 	bic.w	r3, r3, #10
 8011030:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8011032:	68bb      	ldr	r3, [r7, #8]
 8011034:	f003 030a 	and.w	r3, r3, #10
 8011038:	693a      	ldr	r2, [r7, #16]
 801103a:	4313      	orrs	r3, r2
 801103c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 801103e:	68fb      	ldr	r3, [r7, #12]
 8011040:	697a      	ldr	r2, [r7, #20]
 8011042:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8011044:	68fb      	ldr	r3, [r7, #12]
 8011046:	693a      	ldr	r2, [r7, #16]
 8011048:	621a      	str	r2, [r3, #32]
}
 801104a:	bf00      	nop
 801104c:	371c      	adds	r7, #28
 801104e:	46bd      	mov	sp, r7
 8011050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011054:	4770      	bx	lr
 8011056:	bf00      	nop
 8011058:	40012c00 	.word	0x40012c00
 801105c:	40000400 	.word	0x40000400
 8011060:	40000800 	.word	0x40000800
 8011064:	40000c00 	.word	0x40000c00
 8011068:	40013400 	.word	0x40013400
 801106c:	40014000 	.word	0x40014000

08011070 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8011070:	b480      	push	{r7}
 8011072:	b087      	sub	sp, #28
 8011074:	af00      	add	r7, sp, #0
 8011076:	60f8      	str	r0, [r7, #12]
 8011078:	60b9      	str	r1, [r7, #8]
 801107a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 801107c:	68fb      	ldr	r3, [r7, #12]
 801107e:	6a1b      	ldr	r3, [r3, #32]
 8011080:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8011082:	68fb      	ldr	r3, [r7, #12]
 8011084:	6a1b      	ldr	r3, [r3, #32]
 8011086:	f023 0201 	bic.w	r2, r3, #1
 801108a:	68fb      	ldr	r3, [r7, #12]
 801108c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 801108e:	68fb      	ldr	r3, [r7, #12]
 8011090:	699b      	ldr	r3, [r3, #24]
 8011092:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8011094:	693b      	ldr	r3, [r7, #16]
 8011096:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 801109a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 801109c:	687b      	ldr	r3, [r7, #4]
 801109e:	011b      	lsls	r3, r3, #4
 80110a0:	693a      	ldr	r2, [r7, #16]
 80110a2:	4313      	orrs	r3, r2
 80110a4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80110a6:	697b      	ldr	r3, [r7, #20]
 80110a8:	f023 030a 	bic.w	r3, r3, #10
 80110ac:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80110ae:	697a      	ldr	r2, [r7, #20]
 80110b0:	68bb      	ldr	r3, [r7, #8]
 80110b2:	4313      	orrs	r3, r2
 80110b4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80110b6:	68fb      	ldr	r3, [r7, #12]
 80110b8:	693a      	ldr	r2, [r7, #16]
 80110ba:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80110bc:	68fb      	ldr	r3, [r7, #12]
 80110be:	697a      	ldr	r2, [r7, #20]
 80110c0:	621a      	str	r2, [r3, #32]
}
 80110c2:	bf00      	nop
 80110c4:	371c      	adds	r7, #28
 80110c6:	46bd      	mov	sp, r7
 80110c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80110cc:	4770      	bx	lr

080110ce <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80110ce:	b480      	push	{r7}
 80110d0:	b087      	sub	sp, #28
 80110d2:	af00      	add	r7, sp, #0
 80110d4:	60f8      	str	r0, [r7, #12]
 80110d6:	60b9      	str	r1, [r7, #8]
 80110d8:	607a      	str	r2, [r7, #4]
 80110da:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80110dc:	68fb      	ldr	r3, [r7, #12]
 80110de:	6a1b      	ldr	r3, [r3, #32]
 80110e0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80110e2:	68fb      	ldr	r3, [r7, #12]
 80110e4:	6a1b      	ldr	r3, [r3, #32]
 80110e6:	f023 0210 	bic.w	r2, r3, #16
 80110ea:	68fb      	ldr	r3, [r7, #12]
 80110ec:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80110ee:	68fb      	ldr	r3, [r7, #12]
 80110f0:	699b      	ldr	r3, [r3, #24]
 80110f2:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 80110f4:	693b      	ldr	r3, [r7, #16]
 80110f6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80110fa:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 80110fc:	687b      	ldr	r3, [r7, #4]
 80110fe:	021b      	lsls	r3, r3, #8
 8011100:	693a      	ldr	r2, [r7, #16]
 8011102:	4313      	orrs	r3, r2
 8011104:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8011106:	693b      	ldr	r3, [r7, #16]
 8011108:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 801110c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 801110e:	683b      	ldr	r3, [r7, #0]
 8011110:	031b      	lsls	r3, r3, #12
 8011112:	b29b      	uxth	r3, r3
 8011114:	693a      	ldr	r2, [r7, #16]
 8011116:	4313      	orrs	r3, r2
 8011118:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 801111a:	697b      	ldr	r3, [r7, #20]
 801111c:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8011120:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8011122:	68bb      	ldr	r3, [r7, #8]
 8011124:	011b      	lsls	r3, r3, #4
 8011126:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
 801112a:	697a      	ldr	r2, [r7, #20]
 801112c:	4313      	orrs	r3, r2
 801112e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8011130:	68fb      	ldr	r3, [r7, #12]
 8011132:	693a      	ldr	r2, [r7, #16]
 8011134:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8011136:	68fb      	ldr	r3, [r7, #12]
 8011138:	697a      	ldr	r2, [r7, #20]
 801113a:	621a      	str	r2, [r3, #32]
}
 801113c:	bf00      	nop
 801113e:	371c      	adds	r7, #28
 8011140:	46bd      	mov	sp, r7
 8011142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011146:	4770      	bx	lr

08011148 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8011148:	b480      	push	{r7}
 801114a:	b087      	sub	sp, #28
 801114c:	af00      	add	r7, sp, #0
 801114e:	60f8      	str	r0, [r7, #12]
 8011150:	60b9      	str	r1, [r7, #8]
 8011152:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8011154:	68fb      	ldr	r3, [r7, #12]
 8011156:	6a1b      	ldr	r3, [r3, #32]
 8011158:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 801115a:	68fb      	ldr	r3, [r7, #12]
 801115c:	6a1b      	ldr	r3, [r3, #32]
 801115e:	f023 0210 	bic.w	r2, r3, #16
 8011162:	68fb      	ldr	r3, [r7, #12]
 8011164:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8011166:	68fb      	ldr	r3, [r7, #12]
 8011168:	699b      	ldr	r3, [r3, #24]
 801116a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 801116c:	693b      	ldr	r3, [r7, #16]
 801116e:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8011172:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8011174:	687b      	ldr	r3, [r7, #4]
 8011176:	031b      	lsls	r3, r3, #12
 8011178:	693a      	ldr	r2, [r7, #16]
 801117a:	4313      	orrs	r3, r2
 801117c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 801117e:	697b      	ldr	r3, [r7, #20]
 8011180:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8011184:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8011186:	68bb      	ldr	r3, [r7, #8]
 8011188:	011b      	lsls	r3, r3, #4
 801118a:	697a      	ldr	r2, [r7, #20]
 801118c:	4313      	orrs	r3, r2
 801118e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8011190:	68fb      	ldr	r3, [r7, #12]
 8011192:	693a      	ldr	r2, [r7, #16]
 8011194:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8011196:	68fb      	ldr	r3, [r7, #12]
 8011198:	697a      	ldr	r2, [r7, #20]
 801119a:	621a      	str	r2, [r3, #32]
}
 801119c:	bf00      	nop
 801119e:	371c      	adds	r7, #28
 80111a0:	46bd      	mov	sp, r7
 80111a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80111a6:	4770      	bx	lr

080111a8 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80111a8:	b480      	push	{r7}
 80111aa:	b087      	sub	sp, #28
 80111ac:	af00      	add	r7, sp, #0
 80111ae:	60f8      	str	r0, [r7, #12]
 80111b0:	60b9      	str	r1, [r7, #8]
 80111b2:	607a      	str	r2, [r7, #4]
 80111b4:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  tmpccer = TIMx->CCER;
 80111b6:	68fb      	ldr	r3, [r7, #12]
 80111b8:	6a1b      	ldr	r3, [r3, #32]
 80111ba:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80111bc:	68fb      	ldr	r3, [r7, #12]
 80111be:	6a1b      	ldr	r3, [r3, #32]
 80111c0:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80111c4:	68fb      	ldr	r3, [r7, #12]
 80111c6:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80111c8:	68fb      	ldr	r3, [r7, #12]
 80111ca:	69db      	ldr	r3, [r3, #28]
 80111cc:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 80111ce:	693b      	ldr	r3, [r7, #16]
 80111d0:	f023 0303 	bic.w	r3, r3, #3
 80111d4:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= TIM_ICSelection;
 80111d6:	693a      	ldr	r2, [r7, #16]
 80111d8:	687b      	ldr	r3, [r7, #4]
 80111da:	4313      	orrs	r3, r2
 80111dc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 80111de:	693b      	ldr	r3, [r7, #16]
 80111e0:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80111e4:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 80111e6:	683b      	ldr	r3, [r7, #0]
 80111e8:	011b      	lsls	r3, r3, #4
 80111ea:	b2db      	uxtb	r3, r3
 80111ec:	693a      	ldr	r2, [r7, #16]
 80111ee:	4313      	orrs	r3, r2
 80111f0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 80111f2:	697b      	ldr	r3, [r7, #20]
 80111f4:	f423 6320 	bic.w	r3, r3, #2560	@ 0xa00
 80111f8:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 80111fa:	68bb      	ldr	r3, [r7, #8]
 80111fc:	021b      	lsls	r3, r3, #8
 80111fe:	f403 6320 	and.w	r3, r3, #2560	@ 0xa00
 8011202:	697a      	ldr	r2, [r7, #20]
 8011204:	4313      	orrs	r3, r2
 8011206:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8011208:	68fb      	ldr	r3, [r7, #12]
 801120a:	693a      	ldr	r2, [r7, #16]
 801120c:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 801120e:	68fb      	ldr	r3, [r7, #12]
 8011210:	697a      	ldr	r2, [r7, #20]
 8011212:	621a      	str	r2, [r3, #32]
}
 8011214:	bf00      	nop
 8011216:	371c      	adds	r7, #28
 8011218:	46bd      	mov	sp, r7
 801121a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801121e:	4770      	bx	lr

08011220 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8011220:	b480      	push	{r7}
 8011222:	b087      	sub	sp, #28
 8011224:	af00      	add	r7, sp, #0
 8011226:	60f8      	str	r0, [r7, #12]
 8011228:	60b9      	str	r1, [r7, #8]
 801122a:	607a      	str	r2, [r7, #4]
 801122c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  tmpccer = TIMx->CCER;
 801122e:	68fb      	ldr	r3, [r7, #12]
 8011230:	6a1b      	ldr	r3, [r3, #32]
 8011232:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8011234:	68fb      	ldr	r3, [r7, #12]
 8011236:	6a1b      	ldr	r3, [r3, #32]
 8011238:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 801123c:	68fb      	ldr	r3, [r7, #12]
 801123e:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8011240:	68fb      	ldr	r3, [r7, #12]
 8011242:	69db      	ldr	r3, [r3, #28]
 8011244:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8011246:	693b      	ldr	r3, [r7, #16]
 8011248:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 801124c:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 801124e:	687b      	ldr	r3, [r7, #4]
 8011250:	021b      	lsls	r3, r3, #8
 8011252:	693a      	ldr	r2, [r7, #16]
 8011254:	4313      	orrs	r3, r2
 8011256:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8011258:	693b      	ldr	r3, [r7, #16]
 801125a:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 801125e:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8011260:	683b      	ldr	r3, [r7, #0]
 8011262:	031b      	lsls	r3, r3, #12
 8011264:	b29b      	uxth	r3, r3
 8011266:	693a      	ldr	r2, [r7, #16]
 8011268:	4313      	orrs	r3, r2
 801126a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 801126c:	697b      	ldr	r3, [r7, #20]
 801126e:	f423 4320 	bic.w	r3, r3, #40960	@ 0xa000
 8011272:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8011274:	68bb      	ldr	r3, [r7, #8]
 8011276:	031b      	lsls	r3, r3, #12
 8011278:	f403 4320 	and.w	r3, r3, #40960	@ 0xa000
 801127c:	697a      	ldr	r2, [r7, #20]
 801127e:	4313      	orrs	r3, r2
 8011280:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8011282:	68fb      	ldr	r3, [r7, #12]
 8011284:	693a      	ldr	r2, [r7, #16]
 8011286:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8011288:	68fb      	ldr	r3, [r7, #12]
 801128a:	697a      	ldr	r2, [r7, #20]
 801128c:	621a      	str	r2, [r3, #32]
}
 801128e:	bf00      	nop
 8011290:	371c      	adds	r7, #28
 8011292:	46bd      	mov	sp, r7
 8011294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011298:	4770      	bx	lr

0801129a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 801129a:	b480      	push	{r7}
 801129c:	b085      	sub	sp, #20
 801129e:	af00      	add	r7, sp, #0
 80112a0:	6078      	str	r0, [r7, #4]
 80112a2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80112a4:	687b      	ldr	r3, [r7, #4]
 80112a6:	689b      	ldr	r3, [r3, #8]
 80112a8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80112aa:	68fb      	ldr	r3, [r7, #12]
 80112ac:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80112b0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80112b2:	683a      	ldr	r2, [r7, #0]
 80112b4:	68fb      	ldr	r3, [r7, #12]
 80112b6:	4313      	orrs	r3, r2
 80112b8:	f043 0307 	orr.w	r3, r3, #7
 80112bc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80112be:	687b      	ldr	r3, [r7, #4]
 80112c0:	68fa      	ldr	r2, [r7, #12]
 80112c2:	609a      	str	r2, [r3, #8]
}
 80112c4:	bf00      	nop
 80112c6:	3714      	adds	r7, #20
 80112c8:	46bd      	mov	sp, r7
 80112ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80112ce:	4770      	bx	lr

080112d0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80112d0:	b480      	push	{r7}
 80112d2:	b087      	sub	sp, #28
 80112d4:	af00      	add	r7, sp, #0
 80112d6:	60f8      	str	r0, [r7, #12]
 80112d8:	60b9      	str	r1, [r7, #8]
 80112da:	607a      	str	r2, [r7, #4]
 80112dc:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80112de:	68fb      	ldr	r3, [r7, #12]
 80112e0:	689b      	ldr	r3, [r3, #8]
 80112e2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80112e4:	697b      	ldr	r3, [r7, #20]
 80112e6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80112ea:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80112ec:	683b      	ldr	r3, [r7, #0]
 80112ee:	021a      	lsls	r2, r3, #8
 80112f0:	687b      	ldr	r3, [r7, #4]
 80112f2:	431a      	orrs	r2, r3
 80112f4:	68bb      	ldr	r3, [r7, #8]
 80112f6:	4313      	orrs	r3, r2
 80112f8:	697a      	ldr	r2, [r7, #20]
 80112fa:	4313      	orrs	r3, r2
 80112fc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80112fe:	68fb      	ldr	r3, [r7, #12]
 8011300:	697a      	ldr	r2, [r7, #20]
 8011302:	609a      	str	r2, [r3, #8]
}
 8011304:	bf00      	nop
 8011306:	371c      	adds	r7, #28
 8011308:	46bd      	mov	sp, r7
 801130a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801130e:	4770      	bx	lr

08011310 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8011310:	b480      	push	{r7}
 8011312:	b087      	sub	sp, #28
 8011314:	af00      	add	r7, sp, #0
 8011316:	60f8      	str	r0, [r7, #12]
 8011318:	60b9      	str	r1, [r7, #8]
 801131a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 801131c:	68bb      	ldr	r3, [r7, #8]
 801131e:	f003 031f 	and.w	r3, r3, #31
 8011322:	2201      	movs	r2, #1
 8011324:	fa02 f303 	lsl.w	r3, r2, r3
 8011328:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 801132a:	68fb      	ldr	r3, [r7, #12]
 801132c:	6a1a      	ldr	r2, [r3, #32]
 801132e:	697b      	ldr	r3, [r7, #20]
 8011330:	43db      	mvns	r3, r3
 8011332:	401a      	ands	r2, r3
 8011334:	68fb      	ldr	r3, [r7, #12]
 8011336:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8011338:	68fb      	ldr	r3, [r7, #12]
 801133a:	6a1a      	ldr	r2, [r3, #32]
 801133c:	68bb      	ldr	r3, [r7, #8]
 801133e:	f003 031f 	and.w	r3, r3, #31
 8011342:	6879      	ldr	r1, [r7, #4]
 8011344:	fa01 f303 	lsl.w	r3, r1, r3
 8011348:	431a      	orrs	r2, r3
 801134a:	68fb      	ldr	r3, [r7, #12]
 801134c:	621a      	str	r2, [r3, #32]
}
 801134e:	bf00      	nop
 8011350:	371c      	adds	r7, #28
 8011352:	46bd      	mov	sp, r7
 8011354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011358:	4770      	bx	lr
	...

0801135c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 801135c:	b480      	push	{r7}
 801135e:	b085      	sub	sp, #20
 8011360:	af00      	add	r7, sp, #0
 8011362:	6078      	str	r0, [r7, #4]
 8011364:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8011366:	687b      	ldr	r3, [r7, #4]
 8011368:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 801136c:	2b01      	cmp	r3, #1
 801136e:	d101      	bne.n	8011374 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8011370:	2302      	movs	r3, #2
 8011372:	e068      	b.n	8011446 <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8011374:	687b      	ldr	r3, [r7, #4]
 8011376:	2201      	movs	r2, #1
 8011378:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 801137c:	687b      	ldr	r3, [r7, #4]
 801137e:	2202      	movs	r2, #2
 8011380:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8011384:	687b      	ldr	r3, [r7, #4]
 8011386:	681b      	ldr	r3, [r3, #0]
 8011388:	685b      	ldr	r3, [r3, #4]
 801138a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 801138c:	687b      	ldr	r3, [r7, #4]
 801138e:	681b      	ldr	r3, [r3, #0]
 8011390:	689b      	ldr	r3, [r3, #8]
 8011392:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8011394:	687b      	ldr	r3, [r7, #4]
 8011396:	681b      	ldr	r3, [r3, #0]
 8011398:	4a2e      	ldr	r2, [pc, #184]	@ (8011454 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 801139a:	4293      	cmp	r3, r2
 801139c:	d004      	beq.n	80113a8 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 801139e:	687b      	ldr	r3, [r7, #4]
 80113a0:	681b      	ldr	r3, [r3, #0]
 80113a2:	4a2d      	ldr	r2, [pc, #180]	@ (8011458 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 80113a4:	4293      	cmp	r3, r2
 80113a6:	d108      	bne.n	80113ba <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80113a8:	68fb      	ldr	r3, [r7, #12]
 80113aa:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 80113ae:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80113b0:	683b      	ldr	r3, [r7, #0]
 80113b2:	685b      	ldr	r3, [r3, #4]
 80113b4:	68fa      	ldr	r2, [r7, #12]
 80113b6:	4313      	orrs	r3, r2
 80113b8:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80113ba:	68fb      	ldr	r3, [r7, #12]
 80113bc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80113c0:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80113c2:	683b      	ldr	r3, [r7, #0]
 80113c4:	681b      	ldr	r3, [r3, #0]
 80113c6:	68fa      	ldr	r2, [r7, #12]
 80113c8:	4313      	orrs	r3, r2
 80113ca:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80113cc:	687b      	ldr	r3, [r7, #4]
 80113ce:	681b      	ldr	r3, [r3, #0]
 80113d0:	68fa      	ldr	r2, [r7, #12]
 80113d2:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80113d4:	687b      	ldr	r3, [r7, #4]
 80113d6:	681b      	ldr	r3, [r3, #0]
 80113d8:	4a1e      	ldr	r2, [pc, #120]	@ (8011454 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 80113da:	4293      	cmp	r3, r2
 80113dc:	d01d      	beq.n	801141a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80113de:	687b      	ldr	r3, [r7, #4]
 80113e0:	681b      	ldr	r3, [r3, #0]
 80113e2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80113e6:	d018      	beq.n	801141a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80113e8:	687b      	ldr	r3, [r7, #4]
 80113ea:	681b      	ldr	r3, [r3, #0]
 80113ec:	4a1b      	ldr	r2, [pc, #108]	@ (801145c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80113ee:	4293      	cmp	r3, r2
 80113f0:	d013      	beq.n	801141a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80113f2:	687b      	ldr	r3, [r7, #4]
 80113f4:	681b      	ldr	r3, [r3, #0]
 80113f6:	4a1a      	ldr	r2, [pc, #104]	@ (8011460 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80113f8:	4293      	cmp	r3, r2
 80113fa:	d00e      	beq.n	801141a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80113fc:	687b      	ldr	r3, [r7, #4]
 80113fe:	681b      	ldr	r3, [r3, #0]
 8011400:	4a18      	ldr	r2, [pc, #96]	@ (8011464 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8011402:	4293      	cmp	r3, r2
 8011404:	d009      	beq.n	801141a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8011406:	687b      	ldr	r3, [r7, #4]
 8011408:	681b      	ldr	r3, [r3, #0]
 801140a:	4a13      	ldr	r2, [pc, #76]	@ (8011458 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 801140c:	4293      	cmp	r3, r2
 801140e:	d004      	beq.n	801141a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8011410:	687b      	ldr	r3, [r7, #4]
 8011412:	681b      	ldr	r3, [r3, #0]
 8011414:	4a14      	ldr	r2, [pc, #80]	@ (8011468 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8011416:	4293      	cmp	r3, r2
 8011418:	d10c      	bne.n	8011434 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 801141a:	68bb      	ldr	r3, [r7, #8]
 801141c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8011420:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8011422:	683b      	ldr	r3, [r7, #0]
 8011424:	689b      	ldr	r3, [r3, #8]
 8011426:	68ba      	ldr	r2, [r7, #8]
 8011428:	4313      	orrs	r3, r2
 801142a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 801142c:	687b      	ldr	r3, [r7, #4]
 801142e:	681b      	ldr	r3, [r3, #0]
 8011430:	68ba      	ldr	r2, [r7, #8]
 8011432:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8011434:	687b      	ldr	r3, [r7, #4]
 8011436:	2201      	movs	r2, #1
 8011438:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 801143c:	687b      	ldr	r3, [r7, #4]
 801143e:	2200      	movs	r2, #0
 8011440:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8011444:	2300      	movs	r3, #0
}
 8011446:	4618      	mov	r0, r3
 8011448:	3714      	adds	r7, #20
 801144a:	46bd      	mov	sp, r7
 801144c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011450:	4770      	bx	lr
 8011452:	bf00      	nop
 8011454:	40012c00 	.word	0x40012c00
 8011458:	40013400 	.word	0x40013400
 801145c:	40000400 	.word	0x40000400
 8011460:	40000800 	.word	0x40000800
 8011464:	40000c00 	.word	0x40000c00
 8011468:	40014000 	.word	0x40014000

0801146c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 801146c:	b480      	push	{r7}
 801146e:	b085      	sub	sp, #20
 8011470:	af00      	add	r7, sp, #0
 8011472:	6078      	str	r0, [r7, #4]
 8011474:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8011476:	2300      	movs	r3, #0
 8011478:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 801147a:	687b      	ldr	r3, [r7, #4]
 801147c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8011480:	2b01      	cmp	r3, #1
 8011482:	d101      	bne.n	8011488 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8011484:	2302      	movs	r3, #2
 8011486:	e065      	b.n	8011554 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 8011488:	687b      	ldr	r3, [r7, #4]
 801148a:	2201      	movs	r2, #1
 801148c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8011490:	68fb      	ldr	r3, [r7, #12]
 8011492:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8011496:	683b      	ldr	r3, [r7, #0]
 8011498:	68db      	ldr	r3, [r3, #12]
 801149a:	4313      	orrs	r3, r2
 801149c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 801149e:	68fb      	ldr	r3, [r7, #12]
 80114a0:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80114a4:	683b      	ldr	r3, [r7, #0]
 80114a6:	689b      	ldr	r3, [r3, #8]
 80114a8:	4313      	orrs	r3, r2
 80114aa:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80114ac:	68fb      	ldr	r3, [r7, #12]
 80114ae:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 80114b2:	683b      	ldr	r3, [r7, #0]
 80114b4:	685b      	ldr	r3, [r3, #4]
 80114b6:	4313      	orrs	r3, r2
 80114b8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80114ba:	68fb      	ldr	r3, [r7, #12]
 80114bc:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 80114c0:	683b      	ldr	r3, [r7, #0]
 80114c2:	681b      	ldr	r3, [r3, #0]
 80114c4:	4313      	orrs	r3, r2
 80114c6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80114c8:	68fb      	ldr	r3, [r7, #12]
 80114ca:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80114ce:	683b      	ldr	r3, [r7, #0]
 80114d0:	691b      	ldr	r3, [r3, #16]
 80114d2:	4313      	orrs	r3, r2
 80114d4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80114d6:	68fb      	ldr	r3, [r7, #12]
 80114d8:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 80114dc:	683b      	ldr	r3, [r7, #0]
 80114de:	695b      	ldr	r3, [r3, #20]
 80114e0:	4313      	orrs	r3, r2
 80114e2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80114e4:	68fb      	ldr	r3, [r7, #12]
 80114e6:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 80114ea:	683b      	ldr	r3, [r7, #0]
 80114ec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80114ee:	4313      	orrs	r3, r2
 80114f0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 80114f2:	68fb      	ldr	r3, [r7, #12]
 80114f4:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 80114f8:	683b      	ldr	r3, [r7, #0]
 80114fa:	699b      	ldr	r3, [r3, #24]
 80114fc:	041b      	lsls	r3, r3, #16
 80114fe:	4313      	orrs	r3, r2
 8011500:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8011502:	687b      	ldr	r3, [r7, #4]
 8011504:	681b      	ldr	r3, [r3, #0]
 8011506:	4a16      	ldr	r2, [pc, #88]	@ (8011560 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 8011508:	4293      	cmp	r3, r2
 801150a:	d004      	beq.n	8011516 <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 801150c:	687b      	ldr	r3, [r7, #4]
 801150e:	681b      	ldr	r3, [r3, #0]
 8011510:	4a14      	ldr	r2, [pc, #80]	@ (8011564 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 8011512:	4293      	cmp	r3, r2
 8011514:	d115      	bne.n	8011542 <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8011516:	68fb      	ldr	r3, [r7, #12]
 8011518:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 801151c:	683b      	ldr	r3, [r7, #0]
 801151e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011520:	051b      	lsls	r3, r3, #20
 8011522:	4313      	orrs	r3, r2
 8011524:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8011526:	68fb      	ldr	r3, [r7, #12]
 8011528:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 801152c:	683b      	ldr	r3, [r7, #0]
 801152e:	69db      	ldr	r3, [r3, #28]
 8011530:	4313      	orrs	r3, r2
 8011532:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8011534:	68fb      	ldr	r3, [r7, #12]
 8011536:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 801153a:	683b      	ldr	r3, [r7, #0]
 801153c:	6a1b      	ldr	r3, [r3, #32]
 801153e:	4313      	orrs	r3, r2
 8011540:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8011542:	687b      	ldr	r3, [r7, #4]
 8011544:	681b      	ldr	r3, [r3, #0]
 8011546:	68fa      	ldr	r2, [r7, #12]
 8011548:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 801154a:	687b      	ldr	r3, [r7, #4]
 801154c:	2200      	movs	r2, #0
 801154e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8011552:	2300      	movs	r3, #0
}
 8011554:	4618      	mov	r0, r3
 8011556:	3714      	adds	r7, #20
 8011558:	46bd      	mov	sp, r7
 801155a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801155e:	4770      	bx	lr
 8011560:	40012c00 	.word	0x40012c00
 8011564:	40013400 	.word	0x40013400

08011568 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8011568:	b580      	push	{r7, lr}
 801156a:	b082      	sub	sp, #8
 801156c:	af00      	add	r7, sp, #0
 801156e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8011570:	687b      	ldr	r3, [r7, #4]
 8011572:	2b00      	cmp	r3, #0
 8011574:	d101      	bne.n	801157a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8011576:	2301      	movs	r3, #1
 8011578:	e040      	b.n	80115fc <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 801157a:	687b      	ldr	r3, [r7, #4]
 801157c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 801157e:	2b00      	cmp	r3, #0
 8011580:	d106      	bne.n	8011590 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8011582:	687b      	ldr	r3, [r7, #4]
 8011584:	2200      	movs	r2, #0
 8011586:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 801158a:	6878      	ldr	r0, [r7, #4]
 801158c:	f7f4 fada 	bl	8005b44 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8011590:	687b      	ldr	r3, [r7, #4]
 8011592:	2224      	movs	r2, #36	@ 0x24
 8011594:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8011596:	687b      	ldr	r3, [r7, #4]
 8011598:	681b      	ldr	r3, [r3, #0]
 801159a:	681a      	ldr	r2, [r3, #0]
 801159c:	687b      	ldr	r3, [r7, #4]
 801159e:	681b      	ldr	r3, [r3, #0]
 80115a0:	f022 0201 	bic.w	r2, r2, #1
 80115a4:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80115a6:	687b      	ldr	r3, [r7, #4]
 80115a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80115aa:	2b00      	cmp	r3, #0
 80115ac:	d002      	beq.n	80115b4 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 80115ae:	6878      	ldr	r0, [r7, #4]
 80115b0:	f000 fdb4 	bl	801211c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80115b4:	6878      	ldr	r0, [r7, #4]
 80115b6:	f000 faf9 	bl	8011bac <UART_SetConfig>
 80115ba:	4603      	mov	r3, r0
 80115bc:	2b01      	cmp	r3, #1
 80115be:	d101      	bne.n	80115c4 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 80115c0:	2301      	movs	r3, #1
 80115c2:	e01b      	b.n	80115fc <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80115c4:	687b      	ldr	r3, [r7, #4]
 80115c6:	681b      	ldr	r3, [r3, #0]
 80115c8:	685a      	ldr	r2, [r3, #4]
 80115ca:	687b      	ldr	r3, [r7, #4]
 80115cc:	681b      	ldr	r3, [r3, #0]
 80115ce:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80115d2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80115d4:	687b      	ldr	r3, [r7, #4]
 80115d6:	681b      	ldr	r3, [r3, #0]
 80115d8:	689a      	ldr	r2, [r3, #8]
 80115da:	687b      	ldr	r3, [r7, #4]
 80115dc:	681b      	ldr	r3, [r3, #0]
 80115de:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80115e2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80115e4:	687b      	ldr	r3, [r7, #4]
 80115e6:	681b      	ldr	r3, [r3, #0]
 80115e8:	681a      	ldr	r2, [r3, #0]
 80115ea:	687b      	ldr	r3, [r7, #4]
 80115ec:	681b      	ldr	r3, [r3, #0]
 80115ee:	f042 0201 	orr.w	r2, r2, #1
 80115f2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80115f4:	6878      	ldr	r0, [r7, #4]
 80115f6:	f000 fe33 	bl	8012260 <UART_CheckIdleState>
 80115fa:	4603      	mov	r3, r0
}
 80115fc:	4618      	mov	r0, r3
 80115fe:	3708      	adds	r7, #8
 8011600:	46bd      	mov	sp, r7
 8011602:	bd80      	pop	{r7, pc}

08011604 <HAL_HalfDuplex_Init>:
  *        parameters in the UART_InitTypeDef and creates the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HalfDuplex_Init(UART_HandleTypeDef *huart)
{
 8011604:	b580      	push	{r7, lr}
 8011606:	b082      	sub	sp, #8
 8011608:	af00      	add	r7, sp, #0
 801160a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 801160c:	687b      	ldr	r3, [r7, #4]
 801160e:	2b00      	cmp	r3, #0
 8011610:	d101      	bne.n	8011616 <HAL_HalfDuplex_Init+0x12>
  {
    return HAL_ERROR;
 8011612:	2301      	movs	r3, #1
 8011614:	e048      	b.n	80116a8 <HAL_HalfDuplex_Init+0xa4>
  }

  /* Check UART instance */
  assert_param(IS_UART_HALFDUPLEX_INSTANCE(huart->Instance));

  if (huart->gState == HAL_UART_STATE_RESET)
 8011616:	687b      	ldr	r3, [r7, #4]
 8011618:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 801161a:	2b00      	cmp	r3, #0
 801161c:	d106      	bne.n	801162c <HAL_HalfDuplex_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 801161e:	687b      	ldr	r3, [r7, #4]
 8011620:	2200      	movs	r2, #0
 8011622:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8011626:	6878      	ldr	r0, [r7, #4]
 8011628:	f7f4 fa8c 	bl	8005b44 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 801162c:	687b      	ldr	r3, [r7, #4]
 801162e:	2224      	movs	r2, #36	@ 0x24
 8011630:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8011632:	687b      	ldr	r3, [r7, #4]
 8011634:	681b      	ldr	r3, [r3, #0]
 8011636:	681a      	ldr	r2, [r3, #0]
 8011638:	687b      	ldr	r3, [r7, #4]
 801163a:	681b      	ldr	r3, [r3, #0]
 801163c:	f022 0201 	bic.w	r2, r2, #1
 8011640:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8011642:	687b      	ldr	r3, [r7, #4]
 8011644:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011646:	2b00      	cmp	r3, #0
 8011648:	d002      	beq.n	8011650 <HAL_HalfDuplex_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 801164a:	6878      	ldr	r0, [r7, #4]
 801164c:	f000 fd66 	bl	801211c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8011650:	6878      	ldr	r0, [r7, #4]
 8011652:	f000 faab 	bl	8011bac <UART_SetConfig>
 8011656:	4603      	mov	r3, r0
 8011658:	2b01      	cmp	r3, #1
 801165a:	d101      	bne.n	8011660 <HAL_HalfDuplex_Init+0x5c>
  {
    return HAL_ERROR;
 801165c:	2301      	movs	r3, #1
 801165e:	e023      	b.n	80116a8 <HAL_HalfDuplex_Init+0xa4>
  }

  /* In half-duplex mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN and IREN bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8011660:	687b      	ldr	r3, [r7, #4]
 8011662:	681b      	ldr	r3, [r3, #0]
 8011664:	685a      	ldr	r2, [r3, #4]
 8011666:	687b      	ldr	r3, [r7, #4]
 8011668:	681b      	ldr	r3, [r3, #0]
 801166a:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 801166e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_IREN | USART_CR3_SCEN));
 8011670:	687b      	ldr	r3, [r7, #4]
 8011672:	681b      	ldr	r3, [r3, #0]
 8011674:	689a      	ldr	r2, [r3, #8]
 8011676:	687b      	ldr	r3, [r7, #4]
 8011678:	681b      	ldr	r3, [r3, #0]
 801167a:	f022 0222 	bic.w	r2, r2, #34	@ 0x22
 801167e:	609a      	str	r2, [r3, #8]

  /* Enable the Half-Duplex mode by setting the HDSEL bit in the CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
 8011680:	687b      	ldr	r3, [r7, #4]
 8011682:	681b      	ldr	r3, [r3, #0]
 8011684:	689a      	ldr	r2, [r3, #8]
 8011686:	687b      	ldr	r3, [r7, #4]
 8011688:	681b      	ldr	r3, [r3, #0]
 801168a:	f042 0208 	orr.w	r2, r2, #8
 801168e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8011690:	687b      	ldr	r3, [r7, #4]
 8011692:	681b      	ldr	r3, [r3, #0]
 8011694:	681a      	ldr	r2, [r3, #0]
 8011696:	687b      	ldr	r3, [r7, #4]
 8011698:	681b      	ldr	r3, [r3, #0]
 801169a:	f042 0201 	orr.w	r2, r2, #1
 801169e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80116a0:	6878      	ldr	r0, [r7, #4]
 80116a2:	f000 fddd 	bl	8012260 <UART_CheckIdleState>
 80116a6:	4603      	mov	r3, r0
}
 80116a8:	4618      	mov	r0, r3
 80116aa:	3708      	adds	r7, #8
 80116ac:	46bd      	mov	sp, r7
 80116ae:	bd80      	pop	{r7, pc}

080116b0 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80116b0:	b580      	push	{r7, lr}
 80116b2:	b08a      	sub	sp, #40	@ 0x28
 80116b4:	af02      	add	r7, sp, #8
 80116b6:	60f8      	str	r0, [r7, #12]
 80116b8:	60b9      	str	r1, [r7, #8]
 80116ba:	603b      	str	r3, [r7, #0]
 80116bc:	4613      	mov	r3, r2
 80116be:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80116c0:	68fb      	ldr	r3, [r7, #12]
 80116c2:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80116c4:	2b20      	cmp	r3, #32
 80116c6:	d177      	bne.n	80117b8 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 80116c8:	68bb      	ldr	r3, [r7, #8]
 80116ca:	2b00      	cmp	r3, #0
 80116cc:	d002      	beq.n	80116d4 <HAL_UART_Transmit+0x24>
 80116ce:	88fb      	ldrh	r3, [r7, #6]
 80116d0:	2b00      	cmp	r3, #0
 80116d2:	d101      	bne.n	80116d8 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 80116d4:	2301      	movs	r3, #1
 80116d6:	e070      	b.n	80117ba <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80116d8:	68fb      	ldr	r3, [r7, #12]
 80116da:	2200      	movs	r2, #0
 80116dc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80116e0:	68fb      	ldr	r3, [r7, #12]
 80116e2:	2221      	movs	r2, #33	@ 0x21
 80116e4:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80116e6:	f7f7 fced 	bl	80090c4 <HAL_GetTick>
 80116ea:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80116ec:	68fb      	ldr	r3, [r7, #12]
 80116ee:	88fa      	ldrh	r2, [r7, #6]
 80116f0:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 80116f4:	68fb      	ldr	r3, [r7, #12]
 80116f6:	88fa      	ldrh	r2, [r7, #6]
 80116f8:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80116fc:	68fb      	ldr	r3, [r7, #12]
 80116fe:	689b      	ldr	r3, [r3, #8]
 8011700:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8011704:	d108      	bne.n	8011718 <HAL_UART_Transmit+0x68>
 8011706:	68fb      	ldr	r3, [r7, #12]
 8011708:	691b      	ldr	r3, [r3, #16]
 801170a:	2b00      	cmp	r3, #0
 801170c:	d104      	bne.n	8011718 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 801170e:	2300      	movs	r3, #0
 8011710:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8011712:	68bb      	ldr	r3, [r7, #8]
 8011714:	61bb      	str	r3, [r7, #24]
 8011716:	e003      	b.n	8011720 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8011718:	68bb      	ldr	r3, [r7, #8]
 801171a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 801171c:	2300      	movs	r3, #0
 801171e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8011720:	e02f      	b.n	8011782 <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8011722:	683b      	ldr	r3, [r7, #0]
 8011724:	9300      	str	r3, [sp, #0]
 8011726:	697b      	ldr	r3, [r7, #20]
 8011728:	2200      	movs	r2, #0
 801172a:	2180      	movs	r1, #128	@ 0x80
 801172c:	68f8      	ldr	r0, [r7, #12]
 801172e:	f000 fe3f 	bl	80123b0 <UART_WaitOnFlagUntilTimeout>
 8011732:	4603      	mov	r3, r0
 8011734:	2b00      	cmp	r3, #0
 8011736:	d004      	beq.n	8011742 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8011738:	68fb      	ldr	r3, [r7, #12]
 801173a:	2220      	movs	r2, #32
 801173c:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 801173e:	2303      	movs	r3, #3
 8011740:	e03b      	b.n	80117ba <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 8011742:	69fb      	ldr	r3, [r7, #28]
 8011744:	2b00      	cmp	r3, #0
 8011746:	d10b      	bne.n	8011760 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8011748:	69bb      	ldr	r3, [r7, #24]
 801174a:	881a      	ldrh	r2, [r3, #0]
 801174c:	68fb      	ldr	r3, [r7, #12]
 801174e:	681b      	ldr	r3, [r3, #0]
 8011750:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8011754:	b292      	uxth	r2, r2
 8011756:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8011758:	69bb      	ldr	r3, [r7, #24]
 801175a:	3302      	adds	r3, #2
 801175c:	61bb      	str	r3, [r7, #24]
 801175e:	e007      	b.n	8011770 <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8011760:	69fb      	ldr	r3, [r7, #28]
 8011762:	781a      	ldrb	r2, [r3, #0]
 8011764:	68fb      	ldr	r3, [r7, #12]
 8011766:	681b      	ldr	r3, [r3, #0]
 8011768:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 801176a:	69fb      	ldr	r3, [r7, #28]
 801176c:	3301      	adds	r3, #1
 801176e:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8011770:	68fb      	ldr	r3, [r7, #12]
 8011772:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8011776:	b29b      	uxth	r3, r3
 8011778:	3b01      	subs	r3, #1
 801177a:	b29a      	uxth	r2, r3
 801177c:	68fb      	ldr	r3, [r7, #12]
 801177e:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 8011782:	68fb      	ldr	r3, [r7, #12]
 8011784:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8011788:	b29b      	uxth	r3, r3
 801178a:	2b00      	cmp	r3, #0
 801178c:	d1c9      	bne.n	8011722 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 801178e:	683b      	ldr	r3, [r7, #0]
 8011790:	9300      	str	r3, [sp, #0]
 8011792:	697b      	ldr	r3, [r7, #20]
 8011794:	2200      	movs	r2, #0
 8011796:	2140      	movs	r1, #64	@ 0x40
 8011798:	68f8      	ldr	r0, [r7, #12]
 801179a:	f000 fe09 	bl	80123b0 <UART_WaitOnFlagUntilTimeout>
 801179e:	4603      	mov	r3, r0
 80117a0:	2b00      	cmp	r3, #0
 80117a2:	d004      	beq.n	80117ae <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 80117a4:	68fb      	ldr	r3, [r7, #12]
 80117a6:	2220      	movs	r2, #32
 80117a8:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 80117aa:	2303      	movs	r3, #3
 80117ac:	e005      	b.n	80117ba <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80117ae:	68fb      	ldr	r3, [r7, #12]
 80117b0:	2220      	movs	r2, #32
 80117b2:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 80117b4:	2300      	movs	r3, #0
 80117b6:	e000      	b.n	80117ba <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 80117b8:	2302      	movs	r3, #2
  }
}
 80117ba:	4618      	mov	r0, r3
 80117bc:	3720      	adds	r7, #32
 80117be:	46bd      	mov	sp, r7
 80117c0:	bd80      	pop	{r7, pc}

080117c2 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80117c2:	b580      	push	{r7, lr}
 80117c4:	b08a      	sub	sp, #40	@ 0x28
 80117c6:	af02      	add	r7, sp, #8
 80117c8:	60f8      	str	r0, [r7, #12]
 80117ca:	60b9      	str	r1, [r7, #8]
 80117cc:	603b      	str	r3, [r7, #0]
 80117ce:	4613      	mov	r3, r2
 80117d0:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80117d2:	68fb      	ldr	r3, [r7, #12]
 80117d4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80117d8:	2b20      	cmp	r3, #32
 80117da:	f040 80b6 	bne.w	801194a <HAL_UART_Receive+0x188>
  {
    if ((pData == NULL) || (Size == 0U))
 80117de:	68bb      	ldr	r3, [r7, #8]
 80117e0:	2b00      	cmp	r3, #0
 80117e2:	d002      	beq.n	80117ea <HAL_UART_Receive+0x28>
 80117e4:	88fb      	ldrh	r3, [r7, #6]
 80117e6:	2b00      	cmp	r3, #0
 80117e8:	d101      	bne.n	80117ee <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 80117ea:	2301      	movs	r3, #1
 80117ec:	e0ae      	b.n	801194c <HAL_UART_Receive+0x18a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80117ee:	68fb      	ldr	r3, [r7, #12]
 80117f0:	2200      	movs	r2, #0
 80117f2:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80117f6:	68fb      	ldr	r3, [r7, #12]
 80117f8:	2222      	movs	r2, #34	@ 0x22
 80117fa:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80117fe:	68fb      	ldr	r3, [r7, #12]
 8011800:	2200      	movs	r2, #0
 8011802:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8011804:	f7f7 fc5e 	bl	80090c4 <HAL_GetTick>
 8011808:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 801180a:	68fb      	ldr	r3, [r7, #12]
 801180c:	88fa      	ldrh	r2, [r7, #6]
 801180e:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58
    huart->RxXferCount = Size;
 8011812:	68fb      	ldr	r3, [r7, #12]
 8011814:	88fa      	ldrh	r2, [r7, #6]
 8011816:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 801181a:	68fb      	ldr	r3, [r7, #12]
 801181c:	689b      	ldr	r3, [r3, #8]
 801181e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8011822:	d10e      	bne.n	8011842 <HAL_UART_Receive+0x80>
 8011824:	68fb      	ldr	r3, [r7, #12]
 8011826:	691b      	ldr	r3, [r3, #16]
 8011828:	2b00      	cmp	r3, #0
 801182a:	d105      	bne.n	8011838 <HAL_UART_Receive+0x76>
 801182c:	68fb      	ldr	r3, [r7, #12]
 801182e:	f240 12ff 	movw	r2, #511	@ 0x1ff
 8011832:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8011836:	e02d      	b.n	8011894 <HAL_UART_Receive+0xd2>
 8011838:	68fb      	ldr	r3, [r7, #12]
 801183a:	22ff      	movs	r2, #255	@ 0xff
 801183c:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8011840:	e028      	b.n	8011894 <HAL_UART_Receive+0xd2>
 8011842:	68fb      	ldr	r3, [r7, #12]
 8011844:	689b      	ldr	r3, [r3, #8]
 8011846:	2b00      	cmp	r3, #0
 8011848:	d10d      	bne.n	8011866 <HAL_UART_Receive+0xa4>
 801184a:	68fb      	ldr	r3, [r7, #12]
 801184c:	691b      	ldr	r3, [r3, #16]
 801184e:	2b00      	cmp	r3, #0
 8011850:	d104      	bne.n	801185c <HAL_UART_Receive+0x9a>
 8011852:	68fb      	ldr	r3, [r7, #12]
 8011854:	22ff      	movs	r2, #255	@ 0xff
 8011856:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 801185a:	e01b      	b.n	8011894 <HAL_UART_Receive+0xd2>
 801185c:	68fb      	ldr	r3, [r7, #12]
 801185e:	227f      	movs	r2, #127	@ 0x7f
 8011860:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8011864:	e016      	b.n	8011894 <HAL_UART_Receive+0xd2>
 8011866:	68fb      	ldr	r3, [r7, #12]
 8011868:	689b      	ldr	r3, [r3, #8]
 801186a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 801186e:	d10d      	bne.n	801188c <HAL_UART_Receive+0xca>
 8011870:	68fb      	ldr	r3, [r7, #12]
 8011872:	691b      	ldr	r3, [r3, #16]
 8011874:	2b00      	cmp	r3, #0
 8011876:	d104      	bne.n	8011882 <HAL_UART_Receive+0xc0>
 8011878:	68fb      	ldr	r3, [r7, #12]
 801187a:	227f      	movs	r2, #127	@ 0x7f
 801187c:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8011880:	e008      	b.n	8011894 <HAL_UART_Receive+0xd2>
 8011882:	68fb      	ldr	r3, [r7, #12]
 8011884:	223f      	movs	r2, #63	@ 0x3f
 8011886:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 801188a:	e003      	b.n	8011894 <HAL_UART_Receive+0xd2>
 801188c:	68fb      	ldr	r3, [r7, #12]
 801188e:	2200      	movs	r2, #0
 8011890:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
    uhMask = huart->Mask;
 8011894:	68fb      	ldr	r3, [r7, #12]
 8011896:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 801189a:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 801189c:	68fb      	ldr	r3, [r7, #12]
 801189e:	689b      	ldr	r3, [r3, #8]
 80118a0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80118a4:	d108      	bne.n	80118b8 <HAL_UART_Receive+0xf6>
 80118a6:	68fb      	ldr	r3, [r7, #12]
 80118a8:	691b      	ldr	r3, [r3, #16]
 80118aa:	2b00      	cmp	r3, #0
 80118ac:	d104      	bne.n	80118b8 <HAL_UART_Receive+0xf6>
    {
      pdata8bits  = NULL;
 80118ae:	2300      	movs	r3, #0
 80118b0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80118b2:	68bb      	ldr	r3, [r7, #8]
 80118b4:	61bb      	str	r3, [r7, #24]
 80118b6:	e003      	b.n	80118c0 <HAL_UART_Receive+0xfe>
    }
    else
    {
      pdata8bits  = pData;
 80118b8:	68bb      	ldr	r3, [r7, #8]
 80118ba:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80118bc:	2300      	movs	r3, #0
 80118be:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 80118c0:	e037      	b.n	8011932 <HAL_UART_Receive+0x170>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 80118c2:	683b      	ldr	r3, [r7, #0]
 80118c4:	9300      	str	r3, [sp, #0]
 80118c6:	697b      	ldr	r3, [r7, #20]
 80118c8:	2200      	movs	r2, #0
 80118ca:	2120      	movs	r1, #32
 80118cc:	68f8      	ldr	r0, [r7, #12]
 80118ce:	f000 fd6f 	bl	80123b0 <UART_WaitOnFlagUntilTimeout>
 80118d2:	4603      	mov	r3, r0
 80118d4:	2b00      	cmp	r3, #0
 80118d6:	d005      	beq.n	80118e4 <HAL_UART_Receive+0x122>
      {
        huart->RxState = HAL_UART_STATE_READY;
 80118d8:	68fb      	ldr	r3, [r7, #12]
 80118da:	2220      	movs	r2, #32
 80118dc:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

        return HAL_TIMEOUT;
 80118e0:	2303      	movs	r3, #3
 80118e2:	e033      	b.n	801194c <HAL_UART_Receive+0x18a>
      }
      if (pdata8bits == NULL)
 80118e4:	69fb      	ldr	r3, [r7, #28]
 80118e6:	2b00      	cmp	r3, #0
 80118e8:	d10c      	bne.n	8011904 <HAL_UART_Receive+0x142>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 80118ea:	68fb      	ldr	r3, [r7, #12]
 80118ec:	681b      	ldr	r3, [r3, #0]
 80118ee:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 80118f0:	b29a      	uxth	r2, r3
 80118f2:	8a7b      	ldrh	r3, [r7, #18]
 80118f4:	4013      	ands	r3, r2
 80118f6:	b29a      	uxth	r2, r3
 80118f8:	69bb      	ldr	r3, [r7, #24]
 80118fa:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 80118fc:	69bb      	ldr	r3, [r7, #24]
 80118fe:	3302      	adds	r3, #2
 8011900:	61bb      	str	r3, [r7, #24]
 8011902:	e00d      	b.n	8011920 <HAL_UART_Receive+0x15e>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8011904:	68fb      	ldr	r3, [r7, #12]
 8011906:	681b      	ldr	r3, [r3, #0]
 8011908:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 801190a:	b29b      	uxth	r3, r3
 801190c:	b2da      	uxtb	r2, r3
 801190e:	8a7b      	ldrh	r3, [r7, #18]
 8011910:	b2db      	uxtb	r3, r3
 8011912:	4013      	ands	r3, r2
 8011914:	b2da      	uxtb	r2, r3
 8011916:	69fb      	ldr	r3, [r7, #28]
 8011918:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 801191a:	69fb      	ldr	r3, [r7, #28]
 801191c:	3301      	adds	r3, #1
 801191e:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8011920:	68fb      	ldr	r3, [r7, #12]
 8011922:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8011926:	b29b      	uxth	r3, r3
 8011928:	3b01      	subs	r3, #1
 801192a:	b29a      	uxth	r2, r3
 801192c:	68fb      	ldr	r3, [r7, #12]
 801192e:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
    while (huart->RxXferCount > 0U)
 8011932:	68fb      	ldr	r3, [r7, #12]
 8011934:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8011938:	b29b      	uxth	r3, r3
 801193a:	2b00      	cmp	r3, #0
 801193c:	d1c1      	bne.n	80118c2 <HAL_UART_Receive+0x100>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 801193e:	68fb      	ldr	r3, [r7, #12]
 8011940:	2220      	movs	r2, #32
 8011942:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

    return HAL_OK;
 8011946:	2300      	movs	r3, #0
 8011948:	e000      	b.n	801194c <HAL_UART_Receive+0x18a>
  }
  else
  {
    return HAL_BUSY;
 801194a:	2302      	movs	r3, #2
  }
}
 801194c:	4618      	mov	r0, r3
 801194e:	3720      	adds	r7, #32
 8011950:	46bd      	mov	sp, r7
 8011952:	bd80      	pop	{r7, pc}

08011954 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8011954:	b580      	push	{r7, lr}
 8011956:	b08a      	sub	sp, #40	@ 0x28
 8011958:	af00      	add	r7, sp, #0
 801195a:	60f8      	str	r0, [r7, #12]
 801195c:	60b9      	str	r1, [r7, #8]
 801195e:	4613      	mov	r3, r2
 8011960:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8011962:	68fb      	ldr	r3, [r7, #12]
 8011964:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8011966:	2b20      	cmp	r3, #32
 8011968:	d165      	bne.n	8011a36 <HAL_UART_Transmit_DMA+0xe2>
  {
    if ((pData == NULL) || (Size == 0U))
 801196a:	68bb      	ldr	r3, [r7, #8]
 801196c:	2b00      	cmp	r3, #0
 801196e:	d002      	beq.n	8011976 <HAL_UART_Transmit_DMA+0x22>
 8011970:	88fb      	ldrh	r3, [r7, #6]
 8011972:	2b00      	cmp	r3, #0
 8011974:	d101      	bne.n	801197a <HAL_UART_Transmit_DMA+0x26>
    {
      return HAL_ERROR;
 8011976:	2301      	movs	r3, #1
 8011978:	e05e      	b.n	8011a38 <HAL_UART_Transmit_DMA+0xe4>
    }

    huart->pTxBuffPtr  = pData;
 801197a:	68fb      	ldr	r3, [r7, #12]
 801197c:	68ba      	ldr	r2, [r7, #8]
 801197e:	64da      	str	r2, [r3, #76]	@ 0x4c
    huart->TxXferSize  = Size;
 8011980:	68fb      	ldr	r3, [r7, #12]
 8011982:	88fa      	ldrh	r2, [r7, #6]
 8011984:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 8011988:	68fb      	ldr	r3, [r7, #12]
 801198a:	88fa      	ldrh	r2, [r7, #6]
 801198c:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8011990:	68fb      	ldr	r3, [r7, #12]
 8011992:	2200      	movs	r2, #0
 8011994:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8011998:	68fb      	ldr	r3, [r7, #12]
 801199a:	2221      	movs	r2, #33	@ 0x21
 801199c:	67da      	str	r2, [r3, #124]	@ 0x7c

    if (huart->hdmatx != NULL)
 801199e:	68fb      	ldr	r3, [r7, #12]
 80119a0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80119a2:	2b00      	cmp	r3, #0
 80119a4:	d027      	beq.n	80119f6 <HAL_UART_Transmit_DMA+0xa2>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 80119a6:	68fb      	ldr	r3, [r7, #12]
 80119a8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80119aa:	4a25      	ldr	r2, [pc, #148]	@ (8011a40 <HAL_UART_Transmit_DMA+0xec>)
 80119ac:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 80119ae:	68fb      	ldr	r3, [r7, #12]
 80119b0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80119b2:	4a24      	ldr	r2, [pc, #144]	@ (8011a44 <HAL_UART_Transmit_DMA+0xf0>)
 80119b4:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 80119b6:	68fb      	ldr	r3, [r7, #12]
 80119b8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80119ba:	4a23      	ldr	r2, [pc, #140]	@ (8011a48 <HAL_UART_Transmit_DMA+0xf4>)
 80119bc:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 80119be:	68fb      	ldr	r3, [r7, #12]
 80119c0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80119c2:	2200      	movs	r2, #0
 80119c4:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 80119c6:	68fb      	ldr	r3, [r7, #12]
 80119c8:	6f18      	ldr	r0, [r3, #112]	@ 0x70
 80119ca:	68fb      	ldr	r3, [r7, #12]
 80119cc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80119ce:	4619      	mov	r1, r3
 80119d0:	68fb      	ldr	r3, [r7, #12]
 80119d2:	681b      	ldr	r3, [r3, #0]
 80119d4:	3328      	adds	r3, #40	@ 0x28
 80119d6:	461a      	mov	r2, r3
 80119d8:	88fb      	ldrh	r3, [r7, #6]
 80119da:	f7f9 fa13 	bl	800ae04 <HAL_DMA_Start_IT>
 80119de:	4603      	mov	r3, r0
 80119e0:	2b00      	cmp	r3, #0
 80119e2:	d008      	beq.n	80119f6 <HAL_UART_Transmit_DMA+0xa2>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 80119e4:	68fb      	ldr	r3, [r7, #12]
 80119e6:	2210      	movs	r2, #16
 80119e8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 80119ec:	68fb      	ldr	r3, [r7, #12]
 80119ee:	2220      	movs	r2, #32
 80119f0:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_ERROR;
 80119f2:	2301      	movs	r3, #1
 80119f4:	e020      	b.n	8011a38 <HAL_UART_Transmit_DMA+0xe4>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 80119f6:	68fb      	ldr	r3, [r7, #12]
 80119f8:	681b      	ldr	r3, [r3, #0]
 80119fa:	2240      	movs	r2, #64	@ 0x40
 80119fc:	621a      	str	r2, [r3, #32]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80119fe:	68fb      	ldr	r3, [r7, #12]
 8011a00:	681b      	ldr	r3, [r3, #0]
 8011a02:	3308      	adds	r3, #8
 8011a04:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011a06:	697b      	ldr	r3, [r7, #20]
 8011a08:	e853 3f00 	ldrex	r3, [r3]
 8011a0c:	613b      	str	r3, [r7, #16]
   return(result);
 8011a0e:	693b      	ldr	r3, [r7, #16]
 8011a10:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8011a14:	627b      	str	r3, [r7, #36]	@ 0x24
 8011a16:	68fb      	ldr	r3, [r7, #12]
 8011a18:	681b      	ldr	r3, [r3, #0]
 8011a1a:	3308      	adds	r3, #8
 8011a1c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8011a1e:	623a      	str	r2, [r7, #32]
 8011a20:	61fb      	str	r3, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011a22:	69f9      	ldr	r1, [r7, #28]
 8011a24:	6a3a      	ldr	r2, [r7, #32]
 8011a26:	e841 2300 	strex	r3, r2, [r1]
 8011a2a:	61bb      	str	r3, [r7, #24]
   return(result);
 8011a2c:	69bb      	ldr	r3, [r7, #24]
 8011a2e:	2b00      	cmp	r3, #0
 8011a30:	d1e5      	bne.n	80119fe <HAL_UART_Transmit_DMA+0xaa>

    return HAL_OK;
 8011a32:	2300      	movs	r3, #0
 8011a34:	e000      	b.n	8011a38 <HAL_UART_Transmit_DMA+0xe4>
  }
  else
  {
    return HAL_BUSY;
 8011a36:	2302      	movs	r3, #2
  }
}
 8011a38:	4618      	mov	r0, r3
 8011a3a:	3728      	adds	r7, #40	@ 0x28
 8011a3c:	46bd      	mov	sp, r7
 8011a3e:	bd80      	pop	{r7, pc}
 8011a40:	080126e1 	.word	0x080126e1
 8011a44:	0801277b 	.word	0x0801277b
 8011a48:	08012901 	.word	0x08012901

08011a4c <HAL_UART_DMAStop>:
  * @brief Stop the DMA Transfer.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DMAStop(UART_HandleTypeDef *huart)
{
 8011a4c:	b580      	push	{r7, lr}
 8011a4e:	b090      	sub	sp, #64	@ 0x40
 8011a50:	af00      	add	r7, sp, #0
 8011a52:	6078      	str	r0, [r7, #4]
     HAL_UART_TxHalfCpltCallback / HAL_UART_RxHalfCpltCallback:
     indeed, when HAL_DMA_Abort() API is called, the DMA TX/RX Transfer or Half Transfer complete
     interrupt is generated if the DMA transfer interruption occurs at the middle or at the end of
     the stream and the corresponding call back is executed. */

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8011a54:	687b      	ldr	r3, [r7, #4]
 8011a56:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8011a58:	63fb      	str	r3, [r7, #60]	@ 0x3c
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8011a5a:	687b      	ldr	r3, [r7, #4]
 8011a5c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8011a60:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8011a62:	687b      	ldr	r3, [r7, #4]
 8011a64:	681b      	ldr	r3, [r3, #0]
 8011a66:	689b      	ldr	r3, [r3, #8]
 8011a68:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8011a6c:	2b80      	cmp	r3, #128	@ 0x80
 8011a6e:	d139      	bne.n	8011ae4 <HAL_UART_DMAStop+0x98>
 8011a70:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8011a72:	2b21      	cmp	r3, #33	@ 0x21
 8011a74:	d136      	bne.n	8011ae4 <HAL_UART_DMAStop+0x98>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8011a76:	687b      	ldr	r3, [r7, #4]
 8011a78:	681b      	ldr	r3, [r3, #0]
 8011a7a:	3308      	adds	r3, #8
 8011a7c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011a7e:	6a3b      	ldr	r3, [r7, #32]
 8011a80:	e853 3f00 	ldrex	r3, [r3]
 8011a84:	61fb      	str	r3, [r7, #28]
   return(result);
 8011a86:	69fb      	ldr	r3, [r7, #28]
 8011a88:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8011a8c:	637b      	str	r3, [r7, #52]	@ 0x34
 8011a8e:	687b      	ldr	r3, [r7, #4]
 8011a90:	681b      	ldr	r3, [r3, #0]
 8011a92:	3308      	adds	r3, #8
 8011a94:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8011a96:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8011a98:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011a9a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8011a9c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8011a9e:	e841 2300 	strex	r3, r2, [r1]
 8011aa2:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8011aa4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011aa6:	2b00      	cmp	r3, #0
 8011aa8:	d1e5      	bne.n	8011a76 <HAL_UART_DMAStop+0x2a>

    /* Abort the UART DMA Tx channel */
    if (huart->hdmatx != NULL)
 8011aaa:	687b      	ldr	r3, [r7, #4]
 8011aac:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8011aae:	2b00      	cmp	r3, #0
 8011ab0:	d015      	beq.n	8011ade <HAL_UART_DMAStop+0x92>
    {
      if (HAL_DMA_Abort(huart->hdmatx) != HAL_OK)
 8011ab2:	687b      	ldr	r3, [r7, #4]
 8011ab4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8011ab6:	4618      	mov	r0, r3
 8011ab8:	f7f9 fa04 	bl	800aec4 <HAL_DMA_Abort>
 8011abc:	4603      	mov	r3, r0
 8011abe:	2b00      	cmp	r3, #0
 8011ac0:	d00d      	beq.n	8011ade <HAL_UART_DMAStop+0x92>
      {
        if (HAL_DMA_GetError(huart->hdmatx) == HAL_DMA_ERROR_TIMEOUT)
 8011ac2:	687b      	ldr	r3, [r7, #4]
 8011ac4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8011ac6:	4618      	mov	r0, r3
 8011ac8:	f7f9 fae9 	bl	800b09e <HAL_DMA_GetError>
 8011acc:	4603      	mov	r3, r0
 8011ace:	2b20      	cmp	r3, #32
 8011ad0:	d105      	bne.n	8011ade <HAL_UART_DMAStop+0x92>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 8011ad2:	687b      	ldr	r3, [r7, #4]
 8011ad4:	2210      	movs	r2, #16
 8011ad6:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8011ada:	2303      	movs	r3, #3
 8011adc:	e044      	b.n	8011b68 <HAL_UART_DMAStop+0x11c>
        }
      }
    }

    UART_EndTxTransfer(huart);
 8011ade:	6878      	ldr	r0, [r7, #4]
 8011ae0:	f000 fd74 	bl	80125cc <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8011ae4:	687b      	ldr	r3, [r7, #4]
 8011ae6:	681b      	ldr	r3, [r3, #0]
 8011ae8:	689b      	ldr	r3, [r3, #8]
 8011aea:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8011aee:	2b40      	cmp	r3, #64	@ 0x40
 8011af0:	d139      	bne.n	8011b66 <HAL_UART_DMAStop+0x11a>
 8011af2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011af4:	2b22      	cmp	r3, #34	@ 0x22
 8011af6:	d136      	bne.n	8011b66 <HAL_UART_DMAStop+0x11a>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8011af8:	687b      	ldr	r3, [r7, #4]
 8011afa:	681b      	ldr	r3, [r3, #0]
 8011afc:	3308      	adds	r3, #8
 8011afe:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011b00:	68fb      	ldr	r3, [r7, #12]
 8011b02:	e853 3f00 	ldrex	r3, [r3]
 8011b06:	60bb      	str	r3, [r7, #8]
   return(result);
 8011b08:	68bb      	ldr	r3, [r7, #8]
 8011b0a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8011b0e:	633b      	str	r3, [r7, #48]	@ 0x30
 8011b10:	687b      	ldr	r3, [r7, #4]
 8011b12:	681b      	ldr	r3, [r3, #0]
 8011b14:	3308      	adds	r3, #8
 8011b16:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8011b18:	61ba      	str	r2, [r7, #24]
 8011b1a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011b1c:	6979      	ldr	r1, [r7, #20]
 8011b1e:	69ba      	ldr	r2, [r7, #24]
 8011b20:	e841 2300 	strex	r3, r2, [r1]
 8011b24:	613b      	str	r3, [r7, #16]
   return(result);
 8011b26:	693b      	ldr	r3, [r7, #16]
 8011b28:	2b00      	cmp	r3, #0
 8011b2a:	d1e5      	bne.n	8011af8 <HAL_UART_DMAStop+0xac>

    /* Abort the UART DMA Rx channel */
    if (huart->hdmarx != NULL)
 8011b2c:	687b      	ldr	r3, [r7, #4]
 8011b2e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8011b30:	2b00      	cmp	r3, #0
 8011b32:	d015      	beq.n	8011b60 <HAL_UART_DMAStop+0x114>
    {
      if (HAL_DMA_Abort(huart->hdmarx) != HAL_OK)
 8011b34:	687b      	ldr	r3, [r7, #4]
 8011b36:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8011b38:	4618      	mov	r0, r3
 8011b3a:	f7f9 f9c3 	bl	800aec4 <HAL_DMA_Abort>
 8011b3e:	4603      	mov	r3, r0
 8011b40:	2b00      	cmp	r3, #0
 8011b42:	d00d      	beq.n	8011b60 <HAL_UART_DMAStop+0x114>
      {
        if (HAL_DMA_GetError(huart->hdmarx) == HAL_DMA_ERROR_TIMEOUT)
 8011b44:	687b      	ldr	r3, [r7, #4]
 8011b46:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8011b48:	4618      	mov	r0, r3
 8011b4a:	f7f9 faa8 	bl	800b09e <HAL_DMA_GetError>
 8011b4e:	4603      	mov	r3, r0
 8011b50:	2b20      	cmp	r3, #32
 8011b52:	d105      	bne.n	8011b60 <HAL_UART_DMAStop+0x114>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 8011b54:	687b      	ldr	r3, [r7, #4]
 8011b56:	2210      	movs	r2, #16
 8011b58:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8011b5c:	2303      	movs	r3, #3
 8011b5e:	e003      	b.n	8011b68 <HAL_UART_DMAStop+0x11c>
        }
      }
    }

    UART_EndRxTransfer(huart);
 8011b60:	6878      	ldr	r0, [r7, #4]
 8011b62:	f000 fd59 	bl	8012618 <UART_EndRxTransfer>
  }

  return HAL_OK;
 8011b66:	2300      	movs	r3, #0
}
 8011b68:	4618      	mov	r0, r3
 8011b6a:	3740      	adds	r7, #64	@ 0x40
 8011b6c:	46bd      	mov	sp, r7
 8011b6e:	bd80      	pop	{r7, pc}

08011b70 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8011b70:	b480      	push	{r7}
 8011b72:	b083      	sub	sp, #12
 8011b74:	af00      	add	r7, sp, #0
 8011b76:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 8011b78:	bf00      	nop
 8011b7a:	370c      	adds	r7, #12
 8011b7c:	46bd      	mov	sp, r7
 8011b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011b82:	4770      	bx	lr

08011b84 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8011b84:	b480      	push	{r7}
 8011b86:	b083      	sub	sp, #12
 8011b88:	af00      	add	r7, sp, #0
 8011b8a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 8011b8c:	bf00      	nop
 8011b8e:	370c      	adds	r7, #12
 8011b90:	46bd      	mov	sp, r7
 8011b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011b96:	4770      	bx	lr

08011b98 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8011b98:	b480      	push	{r7}
 8011b9a:	b083      	sub	sp, #12
 8011b9c:	af00      	add	r7, sp, #0
 8011b9e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8011ba0:	bf00      	nop
 8011ba2:	370c      	adds	r7, #12
 8011ba4:	46bd      	mov	sp, r7
 8011ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011baa:	4770      	bx	lr

08011bac <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8011bac:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8011bb0:	b08a      	sub	sp, #40	@ 0x28
 8011bb2:	af00      	add	r7, sp, #0
 8011bb4:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8011bb6:	2300      	movs	r3, #0
 8011bb8:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8011bbc:	68fb      	ldr	r3, [r7, #12]
 8011bbe:	689a      	ldr	r2, [r3, #8]
 8011bc0:	68fb      	ldr	r3, [r7, #12]
 8011bc2:	691b      	ldr	r3, [r3, #16]
 8011bc4:	431a      	orrs	r2, r3
 8011bc6:	68fb      	ldr	r3, [r7, #12]
 8011bc8:	695b      	ldr	r3, [r3, #20]
 8011bca:	431a      	orrs	r2, r3
 8011bcc:	68fb      	ldr	r3, [r7, #12]
 8011bce:	69db      	ldr	r3, [r3, #28]
 8011bd0:	4313      	orrs	r3, r2
 8011bd2:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8011bd4:	68fb      	ldr	r3, [r7, #12]
 8011bd6:	681b      	ldr	r3, [r3, #0]
 8011bd8:	681a      	ldr	r2, [r3, #0]
 8011bda:	4ba4      	ldr	r3, [pc, #656]	@ (8011e6c <UART_SetConfig+0x2c0>)
 8011bdc:	4013      	ands	r3, r2
 8011bde:	68fa      	ldr	r2, [r7, #12]
 8011be0:	6812      	ldr	r2, [r2, #0]
 8011be2:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8011be4:	430b      	orrs	r3, r1
 8011be6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8011be8:	68fb      	ldr	r3, [r7, #12]
 8011bea:	681b      	ldr	r3, [r3, #0]
 8011bec:	685b      	ldr	r3, [r3, #4]
 8011bee:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8011bf2:	68fb      	ldr	r3, [r7, #12]
 8011bf4:	68da      	ldr	r2, [r3, #12]
 8011bf6:	68fb      	ldr	r3, [r7, #12]
 8011bf8:	681b      	ldr	r3, [r3, #0]
 8011bfa:	430a      	orrs	r2, r1
 8011bfc:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8011bfe:	68fb      	ldr	r3, [r7, #12]
 8011c00:	699b      	ldr	r3, [r3, #24]
 8011c02:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8011c04:	68fb      	ldr	r3, [r7, #12]
 8011c06:	681b      	ldr	r3, [r3, #0]
 8011c08:	4a99      	ldr	r2, [pc, #612]	@ (8011e70 <UART_SetConfig+0x2c4>)
 8011c0a:	4293      	cmp	r3, r2
 8011c0c:	d004      	beq.n	8011c18 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8011c0e:	68fb      	ldr	r3, [r7, #12]
 8011c10:	6a1b      	ldr	r3, [r3, #32]
 8011c12:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8011c14:	4313      	orrs	r3, r2
 8011c16:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8011c18:	68fb      	ldr	r3, [r7, #12]
 8011c1a:	681b      	ldr	r3, [r3, #0]
 8011c1c:	689b      	ldr	r3, [r3, #8]
 8011c1e:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8011c22:	68fb      	ldr	r3, [r7, #12]
 8011c24:	681b      	ldr	r3, [r3, #0]
 8011c26:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8011c28:	430a      	orrs	r2, r1
 8011c2a:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8011c2c:	68fb      	ldr	r3, [r7, #12]
 8011c2e:	681b      	ldr	r3, [r3, #0]
 8011c30:	4a90      	ldr	r2, [pc, #576]	@ (8011e74 <UART_SetConfig+0x2c8>)
 8011c32:	4293      	cmp	r3, r2
 8011c34:	d126      	bne.n	8011c84 <UART_SetConfig+0xd8>
 8011c36:	4b90      	ldr	r3, [pc, #576]	@ (8011e78 <UART_SetConfig+0x2cc>)
 8011c38:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8011c3c:	f003 0303 	and.w	r3, r3, #3
 8011c40:	2b03      	cmp	r3, #3
 8011c42:	d81b      	bhi.n	8011c7c <UART_SetConfig+0xd0>
 8011c44:	a201      	add	r2, pc, #4	@ (adr r2, 8011c4c <UART_SetConfig+0xa0>)
 8011c46:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011c4a:	bf00      	nop
 8011c4c:	08011c5d 	.word	0x08011c5d
 8011c50:	08011c6d 	.word	0x08011c6d
 8011c54:	08011c65 	.word	0x08011c65
 8011c58:	08011c75 	.word	0x08011c75
 8011c5c:	2301      	movs	r3, #1
 8011c5e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8011c62:	e116      	b.n	8011e92 <UART_SetConfig+0x2e6>
 8011c64:	2302      	movs	r3, #2
 8011c66:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8011c6a:	e112      	b.n	8011e92 <UART_SetConfig+0x2e6>
 8011c6c:	2304      	movs	r3, #4
 8011c6e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8011c72:	e10e      	b.n	8011e92 <UART_SetConfig+0x2e6>
 8011c74:	2308      	movs	r3, #8
 8011c76:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8011c7a:	e10a      	b.n	8011e92 <UART_SetConfig+0x2e6>
 8011c7c:	2310      	movs	r3, #16
 8011c7e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8011c82:	e106      	b.n	8011e92 <UART_SetConfig+0x2e6>
 8011c84:	68fb      	ldr	r3, [r7, #12]
 8011c86:	681b      	ldr	r3, [r3, #0]
 8011c88:	4a7c      	ldr	r2, [pc, #496]	@ (8011e7c <UART_SetConfig+0x2d0>)
 8011c8a:	4293      	cmp	r3, r2
 8011c8c:	d138      	bne.n	8011d00 <UART_SetConfig+0x154>
 8011c8e:	4b7a      	ldr	r3, [pc, #488]	@ (8011e78 <UART_SetConfig+0x2cc>)
 8011c90:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8011c94:	f003 030c 	and.w	r3, r3, #12
 8011c98:	2b0c      	cmp	r3, #12
 8011c9a:	d82d      	bhi.n	8011cf8 <UART_SetConfig+0x14c>
 8011c9c:	a201      	add	r2, pc, #4	@ (adr r2, 8011ca4 <UART_SetConfig+0xf8>)
 8011c9e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011ca2:	bf00      	nop
 8011ca4:	08011cd9 	.word	0x08011cd9
 8011ca8:	08011cf9 	.word	0x08011cf9
 8011cac:	08011cf9 	.word	0x08011cf9
 8011cb0:	08011cf9 	.word	0x08011cf9
 8011cb4:	08011ce9 	.word	0x08011ce9
 8011cb8:	08011cf9 	.word	0x08011cf9
 8011cbc:	08011cf9 	.word	0x08011cf9
 8011cc0:	08011cf9 	.word	0x08011cf9
 8011cc4:	08011ce1 	.word	0x08011ce1
 8011cc8:	08011cf9 	.word	0x08011cf9
 8011ccc:	08011cf9 	.word	0x08011cf9
 8011cd0:	08011cf9 	.word	0x08011cf9
 8011cd4:	08011cf1 	.word	0x08011cf1
 8011cd8:	2300      	movs	r3, #0
 8011cda:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8011cde:	e0d8      	b.n	8011e92 <UART_SetConfig+0x2e6>
 8011ce0:	2302      	movs	r3, #2
 8011ce2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8011ce6:	e0d4      	b.n	8011e92 <UART_SetConfig+0x2e6>
 8011ce8:	2304      	movs	r3, #4
 8011cea:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8011cee:	e0d0      	b.n	8011e92 <UART_SetConfig+0x2e6>
 8011cf0:	2308      	movs	r3, #8
 8011cf2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8011cf6:	e0cc      	b.n	8011e92 <UART_SetConfig+0x2e6>
 8011cf8:	2310      	movs	r3, #16
 8011cfa:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8011cfe:	e0c8      	b.n	8011e92 <UART_SetConfig+0x2e6>
 8011d00:	68fb      	ldr	r3, [r7, #12]
 8011d02:	681b      	ldr	r3, [r3, #0]
 8011d04:	4a5e      	ldr	r2, [pc, #376]	@ (8011e80 <UART_SetConfig+0x2d4>)
 8011d06:	4293      	cmp	r3, r2
 8011d08:	d125      	bne.n	8011d56 <UART_SetConfig+0x1aa>
 8011d0a:	4b5b      	ldr	r3, [pc, #364]	@ (8011e78 <UART_SetConfig+0x2cc>)
 8011d0c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8011d10:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8011d14:	2b30      	cmp	r3, #48	@ 0x30
 8011d16:	d016      	beq.n	8011d46 <UART_SetConfig+0x19a>
 8011d18:	2b30      	cmp	r3, #48	@ 0x30
 8011d1a:	d818      	bhi.n	8011d4e <UART_SetConfig+0x1a2>
 8011d1c:	2b20      	cmp	r3, #32
 8011d1e:	d00a      	beq.n	8011d36 <UART_SetConfig+0x18a>
 8011d20:	2b20      	cmp	r3, #32
 8011d22:	d814      	bhi.n	8011d4e <UART_SetConfig+0x1a2>
 8011d24:	2b00      	cmp	r3, #0
 8011d26:	d002      	beq.n	8011d2e <UART_SetConfig+0x182>
 8011d28:	2b10      	cmp	r3, #16
 8011d2a:	d008      	beq.n	8011d3e <UART_SetConfig+0x192>
 8011d2c:	e00f      	b.n	8011d4e <UART_SetConfig+0x1a2>
 8011d2e:	2300      	movs	r3, #0
 8011d30:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8011d34:	e0ad      	b.n	8011e92 <UART_SetConfig+0x2e6>
 8011d36:	2302      	movs	r3, #2
 8011d38:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8011d3c:	e0a9      	b.n	8011e92 <UART_SetConfig+0x2e6>
 8011d3e:	2304      	movs	r3, #4
 8011d40:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8011d44:	e0a5      	b.n	8011e92 <UART_SetConfig+0x2e6>
 8011d46:	2308      	movs	r3, #8
 8011d48:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8011d4c:	e0a1      	b.n	8011e92 <UART_SetConfig+0x2e6>
 8011d4e:	2310      	movs	r3, #16
 8011d50:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8011d54:	e09d      	b.n	8011e92 <UART_SetConfig+0x2e6>
 8011d56:	68fb      	ldr	r3, [r7, #12]
 8011d58:	681b      	ldr	r3, [r3, #0]
 8011d5a:	4a4a      	ldr	r2, [pc, #296]	@ (8011e84 <UART_SetConfig+0x2d8>)
 8011d5c:	4293      	cmp	r3, r2
 8011d5e:	d125      	bne.n	8011dac <UART_SetConfig+0x200>
 8011d60:	4b45      	ldr	r3, [pc, #276]	@ (8011e78 <UART_SetConfig+0x2cc>)
 8011d62:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8011d66:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8011d6a:	2bc0      	cmp	r3, #192	@ 0xc0
 8011d6c:	d016      	beq.n	8011d9c <UART_SetConfig+0x1f0>
 8011d6e:	2bc0      	cmp	r3, #192	@ 0xc0
 8011d70:	d818      	bhi.n	8011da4 <UART_SetConfig+0x1f8>
 8011d72:	2b80      	cmp	r3, #128	@ 0x80
 8011d74:	d00a      	beq.n	8011d8c <UART_SetConfig+0x1e0>
 8011d76:	2b80      	cmp	r3, #128	@ 0x80
 8011d78:	d814      	bhi.n	8011da4 <UART_SetConfig+0x1f8>
 8011d7a:	2b00      	cmp	r3, #0
 8011d7c:	d002      	beq.n	8011d84 <UART_SetConfig+0x1d8>
 8011d7e:	2b40      	cmp	r3, #64	@ 0x40
 8011d80:	d008      	beq.n	8011d94 <UART_SetConfig+0x1e8>
 8011d82:	e00f      	b.n	8011da4 <UART_SetConfig+0x1f8>
 8011d84:	2300      	movs	r3, #0
 8011d86:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8011d8a:	e082      	b.n	8011e92 <UART_SetConfig+0x2e6>
 8011d8c:	2302      	movs	r3, #2
 8011d8e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8011d92:	e07e      	b.n	8011e92 <UART_SetConfig+0x2e6>
 8011d94:	2304      	movs	r3, #4
 8011d96:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8011d9a:	e07a      	b.n	8011e92 <UART_SetConfig+0x2e6>
 8011d9c:	2308      	movs	r3, #8
 8011d9e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8011da2:	e076      	b.n	8011e92 <UART_SetConfig+0x2e6>
 8011da4:	2310      	movs	r3, #16
 8011da6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8011daa:	e072      	b.n	8011e92 <UART_SetConfig+0x2e6>
 8011dac:	68fb      	ldr	r3, [r7, #12]
 8011dae:	681b      	ldr	r3, [r3, #0]
 8011db0:	4a35      	ldr	r2, [pc, #212]	@ (8011e88 <UART_SetConfig+0x2dc>)
 8011db2:	4293      	cmp	r3, r2
 8011db4:	d12a      	bne.n	8011e0c <UART_SetConfig+0x260>
 8011db6:	4b30      	ldr	r3, [pc, #192]	@ (8011e78 <UART_SetConfig+0x2cc>)
 8011db8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8011dbc:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8011dc0:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8011dc4:	d01a      	beq.n	8011dfc <UART_SetConfig+0x250>
 8011dc6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8011dca:	d81b      	bhi.n	8011e04 <UART_SetConfig+0x258>
 8011dcc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8011dd0:	d00c      	beq.n	8011dec <UART_SetConfig+0x240>
 8011dd2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8011dd6:	d815      	bhi.n	8011e04 <UART_SetConfig+0x258>
 8011dd8:	2b00      	cmp	r3, #0
 8011dda:	d003      	beq.n	8011de4 <UART_SetConfig+0x238>
 8011ddc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8011de0:	d008      	beq.n	8011df4 <UART_SetConfig+0x248>
 8011de2:	e00f      	b.n	8011e04 <UART_SetConfig+0x258>
 8011de4:	2300      	movs	r3, #0
 8011de6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8011dea:	e052      	b.n	8011e92 <UART_SetConfig+0x2e6>
 8011dec:	2302      	movs	r3, #2
 8011dee:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8011df2:	e04e      	b.n	8011e92 <UART_SetConfig+0x2e6>
 8011df4:	2304      	movs	r3, #4
 8011df6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8011dfa:	e04a      	b.n	8011e92 <UART_SetConfig+0x2e6>
 8011dfc:	2308      	movs	r3, #8
 8011dfe:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8011e02:	e046      	b.n	8011e92 <UART_SetConfig+0x2e6>
 8011e04:	2310      	movs	r3, #16
 8011e06:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8011e0a:	e042      	b.n	8011e92 <UART_SetConfig+0x2e6>
 8011e0c:	68fb      	ldr	r3, [r7, #12]
 8011e0e:	681b      	ldr	r3, [r3, #0]
 8011e10:	4a17      	ldr	r2, [pc, #92]	@ (8011e70 <UART_SetConfig+0x2c4>)
 8011e12:	4293      	cmp	r3, r2
 8011e14:	d13a      	bne.n	8011e8c <UART_SetConfig+0x2e0>
 8011e16:	4b18      	ldr	r3, [pc, #96]	@ (8011e78 <UART_SetConfig+0x2cc>)
 8011e18:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8011e1c:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8011e20:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8011e24:	d01a      	beq.n	8011e5c <UART_SetConfig+0x2b0>
 8011e26:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8011e2a:	d81b      	bhi.n	8011e64 <UART_SetConfig+0x2b8>
 8011e2c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8011e30:	d00c      	beq.n	8011e4c <UART_SetConfig+0x2a0>
 8011e32:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8011e36:	d815      	bhi.n	8011e64 <UART_SetConfig+0x2b8>
 8011e38:	2b00      	cmp	r3, #0
 8011e3a:	d003      	beq.n	8011e44 <UART_SetConfig+0x298>
 8011e3c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8011e40:	d008      	beq.n	8011e54 <UART_SetConfig+0x2a8>
 8011e42:	e00f      	b.n	8011e64 <UART_SetConfig+0x2b8>
 8011e44:	2300      	movs	r3, #0
 8011e46:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8011e4a:	e022      	b.n	8011e92 <UART_SetConfig+0x2e6>
 8011e4c:	2302      	movs	r3, #2
 8011e4e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8011e52:	e01e      	b.n	8011e92 <UART_SetConfig+0x2e6>
 8011e54:	2304      	movs	r3, #4
 8011e56:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8011e5a:	e01a      	b.n	8011e92 <UART_SetConfig+0x2e6>
 8011e5c:	2308      	movs	r3, #8
 8011e5e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8011e62:	e016      	b.n	8011e92 <UART_SetConfig+0x2e6>
 8011e64:	2310      	movs	r3, #16
 8011e66:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8011e6a:	e012      	b.n	8011e92 <UART_SetConfig+0x2e6>
 8011e6c:	efff69f3 	.word	0xefff69f3
 8011e70:	40008000 	.word	0x40008000
 8011e74:	40013800 	.word	0x40013800
 8011e78:	40021000 	.word	0x40021000
 8011e7c:	40004400 	.word	0x40004400
 8011e80:	40004800 	.word	0x40004800
 8011e84:	40004c00 	.word	0x40004c00
 8011e88:	40005000 	.word	0x40005000
 8011e8c:	2310      	movs	r3, #16
 8011e8e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8011e92:	68fb      	ldr	r3, [r7, #12]
 8011e94:	681b      	ldr	r3, [r3, #0]
 8011e96:	4a9f      	ldr	r2, [pc, #636]	@ (8012114 <UART_SetConfig+0x568>)
 8011e98:	4293      	cmp	r3, r2
 8011e9a:	d17a      	bne.n	8011f92 <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8011e9c:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8011ea0:	2b08      	cmp	r3, #8
 8011ea2:	d824      	bhi.n	8011eee <UART_SetConfig+0x342>
 8011ea4:	a201      	add	r2, pc, #4	@ (adr r2, 8011eac <UART_SetConfig+0x300>)
 8011ea6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011eaa:	bf00      	nop
 8011eac:	08011ed1 	.word	0x08011ed1
 8011eb0:	08011eef 	.word	0x08011eef
 8011eb4:	08011ed9 	.word	0x08011ed9
 8011eb8:	08011eef 	.word	0x08011eef
 8011ebc:	08011edf 	.word	0x08011edf
 8011ec0:	08011eef 	.word	0x08011eef
 8011ec4:	08011eef 	.word	0x08011eef
 8011ec8:	08011eef 	.word	0x08011eef
 8011ecc:	08011ee7 	.word	0x08011ee7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8011ed0:	f7fb fb06 	bl	800d4e0 <HAL_RCC_GetPCLK1Freq>
 8011ed4:	61f8      	str	r0, [r7, #28]
        break;
 8011ed6:	e010      	b.n	8011efa <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8011ed8:	4b8f      	ldr	r3, [pc, #572]	@ (8012118 <UART_SetConfig+0x56c>)
 8011eda:	61fb      	str	r3, [r7, #28]
        break;
 8011edc:	e00d      	b.n	8011efa <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8011ede:	f7fb fa67 	bl	800d3b0 <HAL_RCC_GetSysClockFreq>
 8011ee2:	61f8      	str	r0, [r7, #28]
        break;
 8011ee4:	e009      	b.n	8011efa <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8011ee6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8011eea:	61fb      	str	r3, [r7, #28]
        break;
 8011eec:	e005      	b.n	8011efa <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 8011eee:	2300      	movs	r3, #0
 8011ef0:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8011ef2:	2301      	movs	r3, #1
 8011ef4:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8011ef8:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8011efa:	69fb      	ldr	r3, [r7, #28]
 8011efc:	2b00      	cmp	r3, #0
 8011efe:	f000 80fb 	beq.w	80120f8 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8011f02:	68fb      	ldr	r3, [r7, #12]
 8011f04:	685a      	ldr	r2, [r3, #4]
 8011f06:	4613      	mov	r3, r2
 8011f08:	005b      	lsls	r3, r3, #1
 8011f0a:	4413      	add	r3, r2
 8011f0c:	69fa      	ldr	r2, [r7, #28]
 8011f0e:	429a      	cmp	r2, r3
 8011f10:	d305      	bcc.n	8011f1e <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 8011f12:	68fb      	ldr	r3, [r7, #12]
 8011f14:	685b      	ldr	r3, [r3, #4]
 8011f16:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8011f18:	69fa      	ldr	r2, [r7, #28]
 8011f1a:	429a      	cmp	r2, r3
 8011f1c:	d903      	bls.n	8011f26 <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 8011f1e:	2301      	movs	r3, #1
 8011f20:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8011f24:	e0e8      	b.n	80120f8 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8011f26:	69fb      	ldr	r3, [r7, #28]
 8011f28:	2200      	movs	r2, #0
 8011f2a:	461c      	mov	r4, r3
 8011f2c:	4615      	mov	r5, r2
 8011f2e:	f04f 0200 	mov.w	r2, #0
 8011f32:	f04f 0300 	mov.w	r3, #0
 8011f36:	022b      	lsls	r3, r5, #8
 8011f38:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8011f3c:	0222      	lsls	r2, r4, #8
 8011f3e:	68f9      	ldr	r1, [r7, #12]
 8011f40:	6849      	ldr	r1, [r1, #4]
 8011f42:	0849      	lsrs	r1, r1, #1
 8011f44:	2000      	movs	r0, #0
 8011f46:	4688      	mov	r8, r1
 8011f48:	4681      	mov	r9, r0
 8011f4a:	eb12 0a08 	adds.w	sl, r2, r8
 8011f4e:	eb43 0b09 	adc.w	fp, r3, r9
 8011f52:	68fb      	ldr	r3, [r7, #12]
 8011f54:	685b      	ldr	r3, [r3, #4]
 8011f56:	2200      	movs	r2, #0
 8011f58:	603b      	str	r3, [r7, #0]
 8011f5a:	607a      	str	r2, [r7, #4]
 8011f5c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8011f60:	4650      	mov	r0, sl
 8011f62:	4659      	mov	r1, fp
 8011f64:	f7ee f99c 	bl	80002a0 <__aeabi_uldivmod>
 8011f68:	4602      	mov	r2, r0
 8011f6a:	460b      	mov	r3, r1
 8011f6c:	4613      	mov	r3, r2
 8011f6e:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8011f70:	69bb      	ldr	r3, [r7, #24]
 8011f72:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8011f76:	d308      	bcc.n	8011f8a <UART_SetConfig+0x3de>
 8011f78:	69bb      	ldr	r3, [r7, #24]
 8011f7a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8011f7e:	d204      	bcs.n	8011f8a <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8011f80:	68fb      	ldr	r3, [r7, #12]
 8011f82:	681b      	ldr	r3, [r3, #0]
 8011f84:	69ba      	ldr	r2, [r7, #24]
 8011f86:	60da      	str	r2, [r3, #12]
 8011f88:	e0b6      	b.n	80120f8 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 8011f8a:	2301      	movs	r3, #1
 8011f8c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8011f90:	e0b2      	b.n	80120f8 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8011f92:	68fb      	ldr	r3, [r7, #12]
 8011f94:	69db      	ldr	r3, [r3, #28]
 8011f96:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8011f9a:	d15e      	bne.n	801205a <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8011f9c:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8011fa0:	2b08      	cmp	r3, #8
 8011fa2:	d828      	bhi.n	8011ff6 <UART_SetConfig+0x44a>
 8011fa4:	a201      	add	r2, pc, #4	@ (adr r2, 8011fac <UART_SetConfig+0x400>)
 8011fa6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011faa:	bf00      	nop
 8011fac:	08011fd1 	.word	0x08011fd1
 8011fb0:	08011fd9 	.word	0x08011fd9
 8011fb4:	08011fe1 	.word	0x08011fe1
 8011fb8:	08011ff7 	.word	0x08011ff7
 8011fbc:	08011fe7 	.word	0x08011fe7
 8011fc0:	08011ff7 	.word	0x08011ff7
 8011fc4:	08011ff7 	.word	0x08011ff7
 8011fc8:	08011ff7 	.word	0x08011ff7
 8011fcc:	08011fef 	.word	0x08011fef
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8011fd0:	f7fb fa86 	bl	800d4e0 <HAL_RCC_GetPCLK1Freq>
 8011fd4:	61f8      	str	r0, [r7, #28]
        break;
 8011fd6:	e014      	b.n	8012002 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8011fd8:	f7fb fa98 	bl	800d50c <HAL_RCC_GetPCLK2Freq>
 8011fdc:	61f8      	str	r0, [r7, #28]
        break;
 8011fde:	e010      	b.n	8012002 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8011fe0:	4b4d      	ldr	r3, [pc, #308]	@ (8012118 <UART_SetConfig+0x56c>)
 8011fe2:	61fb      	str	r3, [r7, #28]
        break;
 8011fe4:	e00d      	b.n	8012002 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8011fe6:	f7fb f9e3 	bl	800d3b0 <HAL_RCC_GetSysClockFreq>
 8011fea:	61f8      	str	r0, [r7, #28]
        break;
 8011fec:	e009      	b.n	8012002 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8011fee:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8011ff2:	61fb      	str	r3, [r7, #28]
        break;
 8011ff4:	e005      	b.n	8012002 <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 8011ff6:	2300      	movs	r3, #0
 8011ff8:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8011ffa:	2301      	movs	r3, #1
 8011ffc:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8012000:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8012002:	69fb      	ldr	r3, [r7, #28]
 8012004:	2b00      	cmp	r3, #0
 8012006:	d077      	beq.n	80120f8 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8012008:	69fb      	ldr	r3, [r7, #28]
 801200a:	005a      	lsls	r2, r3, #1
 801200c:	68fb      	ldr	r3, [r7, #12]
 801200e:	685b      	ldr	r3, [r3, #4]
 8012010:	085b      	lsrs	r3, r3, #1
 8012012:	441a      	add	r2, r3
 8012014:	68fb      	ldr	r3, [r7, #12]
 8012016:	685b      	ldr	r3, [r3, #4]
 8012018:	fbb2 f3f3 	udiv	r3, r2, r3
 801201c:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 801201e:	69bb      	ldr	r3, [r7, #24]
 8012020:	2b0f      	cmp	r3, #15
 8012022:	d916      	bls.n	8012052 <UART_SetConfig+0x4a6>
 8012024:	69bb      	ldr	r3, [r7, #24]
 8012026:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 801202a:	d212      	bcs.n	8012052 <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 801202c:	69bb      	ldr	r3, [r7, #24]
 801202e:	b29b      	uxth	r3, r3
 8012030:	f023 030f 	bic.w	r3, r3, #15
 8012034:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8012036:	69bb      	ldr	r3, [r7, #24]
 8012038:	085b      	lsrs	r3, r3, #1
 801203a:	b29b      	uxth	r3, r3
 801203c:	f003 0307 	and.w	r3, r3, #7
 8012040:	b29a      	uxth	r2, r3
 8012042:	8afb      	ldrh	r3, [r7, #22]
 8012044:	4313      	orrs	r3, r2
 8012046:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8012048:	68fb      	ldr	r3, [r7, #12]
 801204a:	681b      	ldr	r3, [r3, #0]
 801204c:	8afa      	ldrh	r2, [r7, #22]
 801204e:	60da      	str	r2, [r3, #12]
 8012050:	e052      	b.n	80120f8 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8012052:	2301      	movs	r3, #1
 8012054:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8012058:	e04e      	b.n	80120f8 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 801205a:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 801205e:	2b08      	cmp	r3, #8
 8012060:	d827      	bhi.n	80120b2 <UART_SetConfig+0x506>
 8012062:	a201      	add	r2, pc, #4	@ (adr r2, 8012068 <UART_SetConfig+0x4bc>)
 8012064:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012068:	0801208d 	.word	0x0801208d
 801206c:	08012095 	.word	0x08012095
 8012070:	0801209d 	.word	0x0801209d
 8012074:	080120b3 	.word	0x080120b3
 8012078:	080120a3 	.word	0x080120a3
 801207c:	080120b3 	.word	0x080120b3
 8012080:	080120b3 	.word	0x080120b3
 8012084:	080120b3 	.word	0x080120b3
 8012088:	080120ab 	.word	0x080120ab
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 801208c:	f7fb fa28 	bl	800d4e0 <HAL_RCC_GetPCLK1Freq>
 8012090:	61f8      	str	r0, [r7, #28]
        break;
 8012092:	e014      	b.n	80120be <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8012094:	f7fb fa3a 	bl	800d50c <HAL_RCC_GetPCLK2Freq>
 8012098:	61f8      	str	r0, [r7, #28]
        break;
 801209a:	e010      	b.n	80120be <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 801209c:	4b1e      	ldr	r3, [pc, #120]	@ (8012118 <UART_SetConfig+0x56c>)
 801209e:	61fb      	str	r3, [r7, #28]
        break;
 80120a0:	e00d      	b.n	80120be <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80120a2:	f7fb f985 	bl	800d3b0 <HAL_RCC_GetSysClockFreq>
 80120a6:	61f8      	str	r0, [r7, #28]
        break;
 80120a8:	e009      	b.n	80120be <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80120aa:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80120ae:	61fb      	str	r3, [r7, #28]
        break;
 80120b0:	e005      	b.n	80120be <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 80120b2:	2300      	movs	r3, #0
 80120b4:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80120b6:	2301      	movs	r3, #1
 80120b8:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 80120bc:	bf00      	nop
    }

    if (pclk != 0U)
 80120be:	69fb      	ldr	r3, [r7, #28]
 80120c0:	2b00      	cmp	r3, #0
 80120c2:	d019      	beq.n	80120f8 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80120c4:	68fb      	ldr	r3, [r7, #12]
 80120c6:	685b      	ldr	r3, [r3, #4]
 80120c8:	085a      	lsrs	r2, r3, #1
 80120ca:	69fb      	ldr	r3, [r7, #28]
 80120cc:	441a      	add	r2, r3
 80120ce:	68fb      	ldr	r3, [r7, #12]
 80120d0:	685b      	ldr	r3, [r3, #4]
 80120d2:	fbb2 f3f3 	udiv	r3, r2, r3
 80120d6:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80120d8:	69bb      	ldr	r3, [r7, #24]
 80120da:	2b0f      	cmp	r3, #15
 80120dc:	d909      	bls.n	80120f2 <UART_SetConfig+0x546>
 80120de:	69bb      	ldr	r3, [r7, #24]
 80120e0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80120e4:	d205      	bcs.n	80120f2 <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80120e6:	69bb      	ldr	r3, [r7, #24]
 80120e8:	b29a      	uxth	r2, r3
 80120ea:	68fb      	ldr	r3, [r7, #12]
 80120ec:	681b      	ldr	r3, [r3, #0]
 80120ee:	60da      	str	r2, [r3, #12]
 80120f0:	e002      	b.n	80120f8 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 80120f2:	2301      	movs	r3, #1
 80120f4:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80120f8:	68fb      	ldr	r3, [r7, #12]
 80120fa:	2200      	movs	r2, #0
 80120fc:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 80120fe:	68fb      	ldr	r3, [r7, #12]
 8012100:	2200      	movs	r2, #0
 8012102:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8012104:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 8012108:	4618      	mov	r0, r3
 801210a:	3728      	adds	r7, #40	@ 0x28
 801210c:	46bd      	mov	sp, r7
 801210e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8012112:	bf00      	nop
 8012114:	40008000 	.word	0x40008000
 8012118:	00f42400 	.word	0x00f42400

0801211c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 801211c:	b480      	push	{r7}
 801211e:	b083      	sub	sp, #12
 8012120:	af00      	add	r7, sp, #0
 8012122:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8012124:	687b      	ldr	r3, [r7, #4]
 8012126:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8012128:	f003 0308 	and.w	r3, r3, #8
 801212c:	2b00      	cmp	r3, #0
 801212e:	d00a      	beq.n	8012146 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8012130:	687b      	ldr	r3, [r7, #4]
 8012132:	681b      	ldr	r3, [r3, #0]
 8012134:	685b      	ldr	r3, [r3, #4]
 8012136:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 801213a:	687b      	ldr	r3, [r7, #4]
 801213c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 801213e:	687b      	ldr	r3, [r7, #4]
 8012140:	681b      	ldr	r3, [r3, #0]
 8012142:	430a      	orrs	r2, r1
 8012144:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8012146:	687b      	ldr	r3, [r7, #4]
 8012148:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801214a:	f003 0301 	and.w	r3, r3, #1
 801214e:	2b00      	cmp	r3, #0
 8012150:	d00a      	beq.n	8012168 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8012152:	687b      	ldr	r3, [r7, #4]
 8012154:	681b      	ldr	r3, [r3, #0]
 8012156:	685b      	ldr	r3, [r3, #4]
 8012158:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 801215c:	687b      	ldr	r3, [r7, #4]
 801215e:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8012160:	687b      	ldr	r3, [r7, #4]
 8012162:	681b      	ldr	r3, [r3, #0]
 8012164:	430a      	orrs	r2, r1
 8012166:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8012168:	687b      	ldr	r3, [r7, #4]
 801216a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801216c:	f003 0302 	and.w	r3, r3, #2
 8012170:	2b00      	cmp	r3, #0
 8012172:	d00a      	beq.n	801218a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8012174:	687b      	ldr	r3, [r7, #4]
 8012176:	681b      	ldr	r3, [r3, #0]
 8012178:	685b      	ldr	r3, [r3, #4]
 801217a:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 801217e:	687b      	ldr	r3, [r7, #4]
 8012180:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8012182:	687b      	ldr	r3, [r7, #4]
 8012184:	681b      	ldr	r3, [r3, #0]
 8012186:	430a      	orrs	r2, r1
 8012188:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 801218a:	687b      	ldr	r3, [r7, #4]
 801218c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801218e:	f003 0304 	and.w	r3, r3, #4
 8012192:	2b00      	cmp	r3, #0
 8012194:	d00a      	beq.n	80121ac <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8012196:	687b      	ldr	r3, [r7, #4]
 8012198:	681b      	ldr	r3, [r3, #0]
 801219a:	685b      	ldr	r3, [r3, #4]
 801219c:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 80121a0:	687b      	ldr	r3, [r7, #4]
 80121a2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80121a4:	687b      	ldr	r3, [r7, #4]
 80121a6:	681b      	ldr	r3, [r3, #0]
 80121a8:	430a      	orrs	r2, r1
 80121aa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80121ac:	687b      	ldr	r3, [r7, #4]
 80121ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80121b0:	f003 0310 	and.w	r3, r3, #16
 80121b4:	2b00      	cmp	r3, #0
 80121b6:	d00a      	beq.n	80121ce <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80121b8:	687b      	ldr	r3, [r7, #4]
 80121ba:	681b      	ldr	r3, [r3, #0]
 80121bc:	689b      	ldr	r3, [r3, #8]
 80121be:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 80121c2:	687b      	ldr	r3, [r7, #4]
 80121c4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80121c6:	687b      	ldr	r3, [r7, #4]
 80121c8:	681b      	ldr	r3, [r3, #0]
 80121ca:	430a      	orrs	r2, r1
 80121cc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80121ce:	687b      	ldr	r3, [r7, #4]
 80121d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80121d2:	f003 0320 	and.w	r3, r3, #32
 80121d6:	2b00      	cmp	r3, #0
 80121d8:	d00a      	beq.n	80121f0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80121da:	687b      	ldr	r3, [r7, #4]
 80121dc:	681b      	ldr	r3, [r3, #0]
 80121de:	689b      	ldr	r3, [r3, #8]
 80121e0:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 80121e4:	687b      	ldr	r3, [r7, #4]
 80121e6:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80121e8:	687b      	ldr	r3, [r7, #4]
 80121ea:	681b      	ldr	r3, [r3, #0]
 80121ec:	430a      	orrs	r2, r1
 80121ee:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80121f0:	687b      	ldr	r3, [r7, #4]
 80121f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80121f4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80121f8:	2b00      	cmp	r3, #0
 80121fa:	d01a      	beq.n	8012232 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80121fc:	687b      	ldr	r3, [r7, #4]
 80121fe:	681b      	ldr	r3, [r3, #0]
 8012200:	685b      	ldr	r3, [r3, #4]
 8012202:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8012206:	687b      	ldr	r3, [r7, #4]
 8012208:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 801220a:	687b      	ldr	r3, [r7, #4]
 801220c:	681b      	ldr	r3, [r3, #0]
 801220e:	430a      	orrs	r2, r1
 8012210:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8012212:	687b      	ldr	r3, [r7, #4]
 8012214:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8012216:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 801221a:	d10a      	bne.n	8012232 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 801221c:	687b      	ldr	r3, [r7, #4]
 801221e:	681b      	ldr	r3, [r3, #0]
 8012220:	685b      	ldr	r3, [r3, #4]
 8012222:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8012226:	687b      	ldr	r3, [r7, #4]
 8012228:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 801222a:	687b      	ldr	r3, [r7, #4]
 801222c:	681b      	ldr	r3, [r3, #0]
 801222e:	430a      	orrs	r2, r1
 8012230:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8012232:	687b      	ldr	r3, [r7, #4]
 8012234:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8012236:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 801223a:	2b00      	cmp	r3, #0
 801223c:	d00a      	beq.n	8012254 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 801223e:	687b      	ldr	r3, [r7, #4]
 8012240:	681b      	ldr	r3, [r3, #0]
 8012242:	685b      	ldr	r3, [r3, #4]
 8012244:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8012248:	687b      	ldr	r3, [r7, #4]
 801224a:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 801224c:	687b      	ldr	r3, [r7, #4]
 801224e:	681b      	ldr	r3, [r3, #0]
 8012250:	430a      	orrs	r2, r1
 8012252:	605a      	str	r2, [r3, #4]
  }
}
 8012254:	bf00      	nop
 8012256:	370c      	adds	r7, #12
 8012258:	46bd      	mov	sp, r7
 801225a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801225e:	4770      	bx	lr

08012260 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8012260:	b580      	push	{r7, lr}
 8012262:	b098      	sub	sp, #96	@ 0x60
 8012264:	af02      	add	r7, sp, #8
 8012266:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8012268:	687b      	ldr	r3, [r7, #4]
 801226a:	2200      	movs	r2, #0
 801226c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8012270:	f7f6 ff28 	bl	80090c4 <HAL_GetTick>
 8012274:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8012276:	687b      	ldr	r3, [r7, #4]
 8012278:	681b      	ldr	r3, [r3, #0]
 801227a:	681b      	ldr	r3, [r3, #0]
 801227c:	f003 0308 	and.w	r3, r3, #8
 8012280:	2b08      	cmp	r3, #8
 8012282:	d12e      	bne.n	80122e2 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8012284:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8012288:	9300      	str	r3, [sp, #0]
 801228a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801228c:	2200      	movs	r2, #0
 801228e:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8012292:	6878      	ldr	r0, [r7, #4]
 8012294:	f000 f88c 	bl	80123b0 <UART_WaitOnFlagUntilTimeout>
 8012298:	4603      	mov	r3, r0
 801229a:	2b00      	cmp	r3, #0
 801229c:	d021      	beq.n	80122e2 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 801229e:	687b      	ldr	r3, [r7, #4]
 80122a0:	681b      	ldr	r3, [r3, #0]
 80122a2:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80122a4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80122a6:	e853 3f00 	ldrex	r3, [r3]
 80122aa:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80122ac:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80122ae:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80122b2:	653b      	str	r3, [r7, #80]	@ 0x50
 80122b4:	687b      	ldr	r3, [r7, #4]
 80122b6:	681b      	ldr	r3, [r3, #0]
 80122b8:	461a      	mov	r2, r3
 80122ba:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80122bc:	647b      	str	r3, [r7, #68]	@ 0x44
 80122be:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80122c0:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80122c2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80122c4:	e841 2300 	strex	r3, r2, [r1]
 80122c8:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80122ca:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80122cc:	2b00      	cmp	r3, #0
 80122ce:	d1e6      	bne.n	801229e <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 80122d0:	687b      	ldr	r3, [r7, #4]
 80122d2:	2220      	movs	r2, #32
 80122d4:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 80122d6:	687b      	ldr	r3, [r7, #4]
 80122d8:	2200      	movs	r2, #0
 80122da:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80122de:	2303      	movs	r3, #3
 80122e0:	e062      	b.n	80123a8 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80122e2:	687b      	ldr	r3, [r7, #4]
 80122e4:	681b      	ldr	r3, [r3, #0]
 80122e6:	681b      	ldr	r3, [r3, #0]
 80122e8:	f003 0304 	and.w	r3, r3, #4
 80122ec:	2b04      	cmp	r3, #4
 80122ee:	d149      	bne.n	8012384 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80122f0:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80122f4:	9300      	str	r3, [sp, #0]
 80122f6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80122f8:	2200      	movs	r2, #0
 80122fa:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 80122fe:	6878      	ldr	r0, [r7, #4]
 8012300:	f000 f856 	bl	80123b0 <UART_WaitOnFlagUntilTimeout>
 8012304:	4603      	mov	r3, r0
 8012306:	2b00      	cmp	r3, #0
 8012308:	d03c      	beq.n	8012384 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 801230a:	687b      	ldr	r3, [r7, #4]
 801230c:	681b      	ldr	r3, [r3, #0]
 801230e:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012310:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012312:	e853 3f00 	ldrex	r3, [r3]
 8012316:	623b      	str	r3, [r7, #32]
   return(result);
 8012318:	6a3b      	ldr	r3, [r7, #32]
 801231a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 801231e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8012320:	687b      	ldr	r3, [r7, #4]
 8012322:	681b      	ldr	r3, [r3, #0]
 8012324:	461a      	mov	r2, r3
 8012326:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8012328:	633b      	str	r3, [r7, #48]	@ 0x30
 801232a:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801232c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 801232e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8012330:	e841 2300 	strex	r3, r2, [r1]
 8012334:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8012336:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012338:	2b00      	cmp	r3, #0
 801233a:	d1e6      	bne.n	801230a <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801233c:	687b      	ldr	r3, [r7, #4]
 801233e:	681b      	ldr	r3, [r3, #0]
 8012340:	3308      	adds	r3, #8
 8012342:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012344:	693b      	ldr	r3, [r7, #16]
 8012346:	e853 3f00 	ldrex	r3, [r3]
 801234a:	60fb      	str	r3, [r7, #12]
   return(result);
 801234c:	68fb      	ldr	r3, [r7, #12]
 801234e:	f023 0301 	bic.w	r3, r3, #1
 8012352:	64bb      	str	r3, [r7, #72]	@ 0x48
 8012354:	687b      	ldr	r3, [r7, #4]
 8012356:	681b      	ldr	r3, [r3, #0]
 8012358:	3308      	adds	r3, #8
 801235a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 801235c:	61fa      	str	r2, [r7, #28]
 801235e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012360:	69b9      	ldr	r1, [r7, #24]
 8012362:	69fa      	ldr	r2, [r7, #28]
 8012364:	e841 2300 	strex	r3, r2, [r1]
 8012368:	617b      	str	r3, [r7, #20]
   return(result);
 801236a:	697b      	ldr	r3, [r7, #20]
 801236c:	2b00      	cmp	r3, #0
 801236e:	d1e5      	bne.n	801233c <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8012370:	687b      	ldr	r3, [r7, #4]
 8012372:	2220      	movs	r2, #32
 8012374:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8012378:	687b      	ldr	r3, [r7, #4]
 801237a:	2200      	movs	r2, #0
 801237c:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8012380:	2303      	movs	r3, #3
 8012382:	e011      	b.n	80123a8 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8012384:	687b      	ldr	r3, [r7, #4]
 8012386:	2220      	movs	r2, #32
 8012388:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 801238a:	687b      	ldr	r3, [r7, #4]
 801238c:	2220      	movs	r2, #32
 801238e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8012392:	687b      	ldr	r3, [r7, #4]
 8012394:	2200      	movs	r2, #0
 8012396:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8012398:	687b      	ldr	r3, [r7, #4]
 801239a:	2200      	movs	r2, #0
 801239c:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 801239e:	687b      	ldr	r3, [r7, #4]
 80123a0:	2200      	movs	r2, #0
 80123a2:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 80123a6:	2300      	movs	r3, #0
}
 80123a8:	4618      	mov	r0, r3
 80123aa:	3758      	adds	r7, #88	@ 0x58
 80123ac:	46bd      	mov	sp, r7
 80123ae:	bd80      	pop	{r7, pc}

080123b0 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80123b0:	b580      	push	{r7, lr}
 80123b2:	b084      	sub	sp, #16
 80123b4:	af00      	add	r7, sp, #0
 80123b6:	60f8      	str	r0, [r7, #12]
 80123b8:	60b9      	str	r1, [r7, #8]
 80123ba:	603b      	str	r3, [r7, #0]
 80123bc:	4613      	mov	r3, r2
 80123be:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80123c0:	e04f      	b.n	8012462 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80123c2:	69bb      	ldr	r3, [r7, #24]
 80123c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80123c8:	d04b      	beq.n	8012462 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80123ca:	f7f6 fe7b 	bl	80090c4 <HAL_GetTick>
 80123ce:	4602      	mov	r2, r0
 80123d0:	683b      	ldr	r3, [r7, #0]
 80123d2:	1ad3      	subs	r3, r2, r3
 80123d4:	69ba      	ldr	r2, [r7, #24]
 80123d6:	429a      	cmp	r2, r3
 80123d8:	d302      	bcc.n	80123e0 <UART_WaitOnFlagUntilTimeout+0x30>
 80123da:	69bb      	ldr	r3, [r7, #24]
 80123dc:	2b00      	cmp	r3, #0
 80123de:	d101      	bne.n	80123e4 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80123e0:	2303      	movs	r3, #3
 80123e2:	e04e      	b.n	8012482 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80123e4:	68fb      	ldr	r3, [r7, #12]
 80123e6:	681b      	ldr	r3, [r3, #0]
 80123e8:	681b      	ldr	r3, [r3, #0]
 80123ea:	f003 0304 	and.w	r3, r3, #4
 80123ee:	2b00      	cmp	r3, #0
 80123f0:	d037      	beq.n	8012462 <UART_WaitOnFlagUntilTimeout+0xb2>
 80123f2:	68bb      	ldr	r3, [r7, #8]
 80123f4:	2b80      	cmp	r3, #128	@ 0x80
 80123f6:	d034      	beq.n	8012462 <UART_WaitOnFlagUntilTimeout+0xb2>
 80123f8:	68bb      	ldr	r3, [r7, #8]
 80123fa:	2b40      	cmp	r3, #64	@ 0x40
 80123fc:	d031      	beq.n	8012462 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80123fe:	68fb      	ldr	r3, [r7, #12]
 8012400:	681b      	ldr	r3, [r3, #0]
 8012402:	69db      	ldr	r3, [r3, #28]
 8012404:	f003 0308 	and.w	r3, r3, #8
 8012408:	2b08      	cmp	r3, #8
 801240a:	d110      	bne.n	801242e <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 801240c:	68fb      	ldr	r3, [r7, #12]
 801240e:	681b      	ldr	r3, [r3, #0]
 8012410:	2208      	movs	r2, #8
 8012412:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8012414:	68f8      	ldr	r0, [r7, #12]
 8012416:	f000 f8ff 	bl	8012618 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 801241a:	68fb      	ldr	r3, [r7, #12]
 801241c:	2208      	movs	r2, #8
 801241e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8012422:	68fb      	ldr	r3, [r7, #12]
 8012424:	2200      	movs	r2, #0
 8012426:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 801242a:	2301      	movs	r3, #1
 801242c:	e029      	b.n	8012482 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 801242e:	68fb      	ldr	r3, [r7, #12]
 8012430:	681b      	ldr	r3, [r3, #0]
 8012432:	69db      	ldr	r3, [r3, #28]
 8012434:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8012438:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 801243c:	d111      	bne.n	8012462 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 801243e:	68fb      	ldr	r3, [r7, #12]
 8012440:	681b      	ldr	r3, [r3, #0]
 8012442:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8012446:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8012448:	68f8      	ldr	r0, [r7, #12]
 801244a:	f000 f8e5 	bl	8012618 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 801244e:	68fb      	ldr	r3, [r7, #12]
 8012450:	2220      	movs	r2, #32
 8012452:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8012456:	68fb      	ldr	r3, [r7, #12]
 8012458:	2200      	movs	r2, #0
 801245a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 801245e:	2303      	movs	r3, #3
 8012460:	e00f      	b.n	8012482 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8012462:	68fb      	ldr	r3, [r7, #12]
 8012464:	681b      	ldr	r3, [r3, #0]
 8012466:	69da      	ldr	r2, [r3, #28]
 8012468:	68bb      	ldr	r3, [r7, #8]
 801246a:	4013      	ands	r3, r2
 801246c:	68ba      	ldr	r2, [r7, #8]
 801246e:	429a      	cmp	r2, r3
 8012470:	bf0c      	ite	eq
 8012472:	2301      	moveq	r3, #1
 8012474:	2300      	movne	r3, #0
 8012476:	b2db      	uxtb	r3, r3
 8012478:	461a      	mov	r2, r3
 801247a:	79fb      	ldrb	r3, [r7, #7]
 801247c:	429a      	cmp	r2, r3
 801247e:	d0a0      	beq.n	80123c2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8012480:	2300      	movs	r3, #0
}
 8012482:	4618      	mov	r0, r3
 8012484:	3710      	adds	r7, #16
 8012486:	46bd      	mov	sp, r7
 8012488:	bd80      	pop	{r7, pc}
	...

0801248c <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 801248c:	b580      	push	{r7, lr}
 801248e:	b096      	sub	sp, #88	@ 0x58
 8012490:	af00      	add	r7, sp, #0
 8012492:	60f8      	str	r0, [r7, #12]
 8012494:	60b9      	str	r1, [r7, #8]
 8012496:	4613      	mov	r3, r2
 8012498:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 801249a:	68fb      	ldr	r3, [r7, #12]
 801249c:	68ba      	ldr	r2, [r7, #8]
 801249e:	655a      	str	r2, [r3, #84]	@ 0x54
  huart->RxXferSize = Size;
 80124a0:	68fb      	ldr	r3, [r7, #12]
 80124a2:	88fa      	ldrh	r2, [r7, #6]
 80124a4:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80124a8:	68fb      	ldr	r3, [r7, #12]
 80124aa:	2200      	movs	r2, #0
 80124ac:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80124b0:	68fb      	ldr	r3, [r7, #12]
 80124b2:	2222      	movs	r2, #34	@ 0x22
 80124b4:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  if (huart->hdmarx != NULL)
 80124b8:	68fb      	ldr	r3, [r7, #12]
 80124ba:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80124bc:	2b00      	cmp	r3, #0
 80124be:	d028      	beq.n	8012512 <UART_Start_Receive_DMA+0x86>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 80124c0:	68fb      	ldr	r3, [r7, #12]
 80124c2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80124c4:	4a3e      	ldr	r2, [pc, #248]	@ (80125c0 <UART_Start_Receive_DMA+0x134>)
 80124c6:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 80124c8:	68fb      	ldr	r3, [r7, #12]
 80124ca:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80124cc:	4a3d      	ldr	r2, [pc, #244]	@ (80125c4 <UART_Start_Receive_DMA+0x138>)
 80124ce:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 80124d0:	68fb      	ldr	r3, [r7, #12]
 80124d2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80124d4:	4a3c      	ldr	r2, [pc, #240]	@ (80125c8 <UART_Start_Receive_DMA+0x13c>)
 80124d6:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 80124d8:	68fb      	ldr	r3, [r7, #12]
 80124da:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80124dc:	2200      	movs	r2, #0
 80124de:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 80124e0:	68fb      	ldr	r3, [r7, #12]
 80124e2:	6f58      	ldr	r0, [r3, #116]	@ 0x74
 80124e4:	68fb      	ldr	r3, [r7, #12]
 80124e6:	681b      	ldr	r3, [r3, #0]
 80124e8:	3324      	adds	r3, #36	@ 0x24
 80124ea:	4619      	mov	r1, r3
 80124ec:	68fb      	ldr	r3, [r7, #12]
 80124ee:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80124f0:	461a      	mov	r2, r3
 80124f2:	88fb      	ldrh	r3, [r7, #6]
 80124f4:	f7f8 fc86 	bl	800ae04 <HAL_DMA_Start_IT>
 80124f8:	4603      	mov	r3, r0
 80124fa:	2b00      	cmp	r3, #0
 80124fc:	d009      	beq.n	8012512 <UART_Start_Receive_DMA+0x86>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 80124fe:	68fb      	ldr	r3, [r7, #12]
 8012500:	2210      	movs	r2, #16
 8012502:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 8012506:	68fb      	ldr	r3, [r7, #12]
 8012508:	2220      	movs	r2, #32
 801250a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      return HAL_ERROR;
 801250e:	2301      	movs	r3, #1
 8012510:	e051      	b.n	80125b6 <UART_Start_Receive_DMA+0x12a>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8012512:	68fb      	ldr	r3, [r7, #12]
 8012514:	691b      	ldr	r3, [r3, #16]
 8012516:	2b00      	cmp	r3, #0
 8012518:	d018      	beq.n	801254c <UART_Start_Receive_DMA+0xc0>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 801251a:	68fb      	ldr	r3, [r7, #12]
 801251c:	681b      	ldr	r3, [r3, #0]
 801251e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012520:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8012522:	e853 3f00 	ldrex	r3, [r3]
 8012526:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8012528:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801252a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 801252e:	657b      	str	r3, [r7, #84]	@ 0x54
 8012530:	68fb      	ldr	r3, [r7, #12]
 8012532:	681b      	ldr	r3, [r3, #0]
 8012534:	461a      	mov	r2, r3
 8012536:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8012538:	64bb      	str	r3, [r7, #72]	@ 0x48
 801253a:	647a      	str	r2, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801253c:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 801253e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8012540:	e841 2300 	strex	r3, r2, [r1]
 8012544:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 8012546:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8012548:	2b00      	cmp	r3, #0
 801254a:	d1e6      	bne.n	801251a <UART_Start_Receive_DMA+0x8e>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801254c:	68fb      	ldr	r3, [r7, #12]
 801254e:	681b      	ldr	r3, [r3, #0]
 8012550:	3308      	adds	r3, #8
 8012552:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012554:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012556:	e853 3f00 	ldrex	r3, [r3]
 801255a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 801255c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801255e:	f043 0301 	orr.w	r3, r3, #1
 8012562:	653b      	str	r3, [r7, #80]	@ 0x50
 8012564:	68fb      	ldr	r3, [r7, #12]
 8012566:	681b      	ldr	r3, [r3, #0]
 8012568:	3308      	adds	r3, #8
 801256a:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 801256c:	637a      	str	r2, [r7, #52]	@ 0x34
 801256e:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012570:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8012572:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8012574:	e841 2300 	strex	r3, r2, [r1]
 8012578:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 801257a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801257c:	2b00      	cmp	r3, #0
 801257e:	d1e5      	bne.n	801254c <UART_Start_Receive_DMA+0xc0>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8012580:	68fb      	ldr	r3, [r7, #12]
 8012582:	681b      	ldr	r3, [r3, #0]
 8012584:	3308      	adds	r3, #8
 8012586:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012588:	697b      	ldr	r3, [r7, #20]
 801258a:	e853 3f00 	ldrex	r3, [r3]
 801258e:	613b      	str	r3, [r7, #16]
   return(result);
 8012590:	693b      	ldr	r3, [r7, #16]
 8012592:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8012596:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8012598:	68fb      	ldr	r3, [r7, #12]
 801259a:	681b      	ldr	r3, [r3, #0]
 801259c:	3308      	adds	r3, #8
 801259e:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80125a0:	623a      	str	r2, [r7, #32]
 80125a2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80125a4:	69f9      	ldr	r1, [r7, #28]
 80125a6:	6a3a      	ldr	r2, [r7, #32]
 80125a8:	e841 2300 	strex	r3, r2, [r1]
 80125ac:	61bb      	str	r3, [r7, #24]
   return(result);
 80125ae:	69bb      	ldr	r3, [r7, #24]
 80125b0:	2b00      	cmp	r3, #0
 80125b2:	d1e5      	bne.n	8012580 <UART_Start_Receive_DMA+0xf4>

  return HAL_OK;
 80125b4:	2300      	movs	r3, #0
}
 80125b6:	4618      	mov	r0, r3
 80125b8:	3758      	adds	r7, #88	@ 0x58
 80125ba:	46bd      	mov	sp, r7
 80125bc:	bd80      	pop	{r7, pc}
 80125be:	bf00      	nop
 80125c0:	08012797 	.word	0x08012797
 80125c4:	080128c3 	.word	0x080128c3
 80125c8:	08012901 	.word	0x08012901

080125cc <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 80125cc:	b480      	push	{r7}
 80125ce:	b089      	sub	sp, #36	@ 0x24
 80125d0:	af00      	add	r7, sp, #0
 80125d2:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
#else
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 80125d4:	687b      	ldr	r3, [r7, #4]
 80125d6:	681b      	ldr	r3, [r3, #0]
 80125d8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80125da:	68fb      	ldr	r3, [r7, #12]
 80125dc:	e853 3f00 	ldrex	r3, [r3]
 80125e0:	60bb      	str	r3, [r7, #8]
   return(result);
 80125e2:	68bb      	ldr	r3, [r7, #8]
 80125e4:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 80125e8:	61fb      	str	r3, [r7, #28]
 80125ea:	687b      	ldr	r3, [r7, #4]
 80125ec:	681b      	ldr	r3, [r3, #0]
 80125ee:	461a      	mov	r2, r3
 80125f0:	69fb      	ldr	r3, [r7, #28]
 80125f2:	61bb      	str	r3, [r7, #24]
 80125f4:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80125f6:	6979      	ldr	r1, [r7, #20]
 80125f8:	69ba      	ldr	r2, [r7, #24]
 80125fa:	e841 2300 	strex	r3, r2, [r1]
 80125fe:	613b      	str	r3, [r7, #16]
   return(result);
 8012600:	693b      	ldr	r3, [r7, #16]
 8012602:	2b00      	cmp	r3, #0
 8012604:	d1e6      	bne.n	80125d4 <UART_EndTxTransfer+0x8>
#endif /* USART_CR1_FIFOEN */

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8012606:	687b      	ldr	r3, [r7, #4]
 8012608:	2220      	movs	r2, #32
 801260a:	67da      	str	r2, [r3, #124]	@ 0x7c
}
 801260c:	bf00      	nop
 801260e:	3724      	adds	r7, #36	@ 0x24
 8012610:	46bd      	mov	sp, r7
 8012612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012616:	4770      	bx	lr

08012618 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8012618:	b480      	push	{r7}
 801261a:	b095      	sub	sp, #84	@ 0x54
 801261c:	af00      	add	r7, sp, #0
 801261e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8012620:	687b      	ldr	r3, [r7, #4]
 8012622:	681b      	ldr	r3, [r3, #0]
 8012624:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012626:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8012628:	e853 3f00 	ldrex	r3, [r3]
 801262c:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 801262e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012630:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8012634:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8012636:	687b      	ldr	r3, [r7, #4]
 8012638:	681b      	ldr	r3, [r3, #0]
 801263a:	461a      	mov	r2, r3
 801263c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801263e:	643b      	str	r3, [r7, #64]	@ 0x40
 8012640:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012642:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8012644:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8012646:	e841 2300 	strex	r3, r2, [r1]
 801264a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 801264c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801264e:	2b00      	cmp	r3, #0
 8012650:	d1e6      	bne.n	8012620 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8012652:	687b      	ldr	r3, [r7, #4]
 8012654:	681b      	ldr	r3, [r3, #0]
 8012656:	3308      	adds	r3, #8
 8012658:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801265a:	6a3b      	ldr	r3, [r7, #32]
 801265c:	e853 3f00 	ldrex	r3, [r3]
 8012660:	61fb      	str	r3, [r7, #28]
   return(result);
 8012662:	69fb      	ldr	r3, [r7, #28]
 8012664:	f023 0301 	bic.w	r3, r3, #1
 8012668:	64bb      	str	r3, [r7, #72]	@ 0x48
 801266a:	687b      	ldr	r3, [r7, #4]
 801266c:	681b      	ldr	r3, [r3, #0]
 801266e:	3308      	adds	r3, #8
 8012670:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8012672:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8012674:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012676:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8012678:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801267a:	e841 2300 	strex	r3, r2, [r1]
 801267e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8012680:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012682:	2b00      	cmp	r3, #0
 8012684:	d1e5      	bne.n	8012652 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8012686:	687b      	ldr	r3, [r7, #4]
 8012688:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 801268a:	2b01      	cmp	r3, #1
 801268c:	d118      	bne.n	80126c0 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 801268e:	687b      	ldr	r3, [r7, #4]
 8012690:	681b      	ldr	r3, [r3, #0]
 8012692:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012694:	68fb      	ldr	r3, [r7, #12]
 8012696:	e853 3f00 	ldrex	r3, [r3]
 801269a:	60bb      	str	r3, [r7, #8]
   return(result);
 801269c:	68bb      	ldr	r3, [r7, #8]
 801269e:	f023 0310 	bic.w	r3, r3, #16
 80126a2:	647b      	str	r3, [r7, #68]	@ 0x44
 80126a4:	687b      	ldr	r3, [r7, #4]
 80126a6:	681b      	ldr	r3, [r3, #0]
 80126a8:	461a      	mov	r2, r3
 80126aa:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80126ac:	61bb      	str	r3, [r7, #24]
 80126ae:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80126b0:	6979      	ldr	r1, [r7, #20]
 80126b2:	69ba      	ldr	r2, [r7, #24]
 80126b4:	e841 2300 	strex	r3, r2, [r1]
 80126b8:	613b      	str	r3, [r7, #16]
   return(result);
 80126ba:	693b      	ldr	r3, [r7, #16]
 80126bc:	2b00      	cmp	r3, #0
 80126be:	d1e6      	bne.n	801268e <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80126c0:	687b      	ldr	r3, [r7, #4]
 80126c2:	2220      	movs	r2, #32
 80126c4:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80126c8:	687b      	ldr	r3, [r7, #4]
 80126ca:	2200      	movs	r2, #0
 80126cc:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80126ce:	687b      	ldr	r3, [r7, #4]
 80126d0:	2200      	movs	r2, #0
 80126d2:	669a      	str	r2, [r3, #104]	@ 0x68
}
 80126d4:	bf00      	nop
 80126d6:	3754      	adds	r7, #84	@ 0x54
 80126d8:	46bd      	mov	sp, r7
 80126da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80126de:	4770      	bx	lr

080126e0 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 80126e0:	b580      	push	{r7, lr}
 80126e2:	b090      	sub	sp, #64	@ 0x40
 80126e4:	af00      	add	r7, sp, #0
 80126e6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80126e8:	687b      	ldr	r3, [r7, #4]
 80126ea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80126ec:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 80126ee:	687b      	ldr	r3, [r7, #4]
 80126f0:	681b      	ldr	r3, [r3, #0]
 80126f2:	681b      	ldr	r3, [r3, #0]
 80126f4:	f003 0320 	and.w	r3, r3, #32
 80126f8:	2b00      	cmp	r3, #0
 80126fa:	d137      	bne.n	801276c <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0U;
 80126fc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80126fe:	2200      	movs	r2, #0
 8012700:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8012704:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8012706:	681b      	ldr	r3, [r3, #0]
 8012708:	3308      	adds	r3, #8
 801270a:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801270c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801270e:	e853 3f00 	ldrex	r3, [r3]
 8012712:	623b      	str	r3, [r7, #32]
   return(result);
 8012714:	6a3b      	ldr	r3, [r7, #32]
 8012716:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 801271a:	63bb      	str	r3, [r7, #56]	@ 0x38
 801271c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801271e:	681b      	ldr	r3, [r3, #0]
 8012720:	3308      	adds	r3, #8
 8012722:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8012724:	633a      	str	r2, [r7, #48]	@ 0x30
 8012726:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012728:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 801272a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 801272c:	e841 2300 	strex	r3, r2, [r1]
 8012730:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8012732:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012734:	2b00      	cmp	r3, #0
 8012736:	d1e5      	bne.n	8012704 <UART_DMATransmitCplt+0x24>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8012738:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801273a:	681b      	ldr	r3, [r3, #0]
 801273c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801273e:	693b      	ldr	r3, [r7, #16]
 8012740:	e853 3f00 	ldrex	r3, [r3]
 8012744:	60fb      	str	r3, [r7, #12]
   return(result);
 8012746:	68fb      	ldr	r3, [r7, #12]
 8012748:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801274c:	637b      	str	r3, [r7, #52]	@ 0x34
 801274e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8012750:	681b      	ldr	r3, [r3, #0]
 8012752:	461a      	mov	r2, r3
 8012754:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8012756:	61fb      	str	r3, [r7, #28]
 8012758:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801275a:	69b9      	ldr	r1, [r7, #24]
 801275c:	69fa      	ldr	r2, [r7, #28]
 801275e:	e841 2300 	strex	r3, r2, [r1]
 8012762:	617b      	str	r3, [r7, #20]
   return(result);
 8012764:	697b      	ldr	r3, [r7, #20]
 8012766:	2b00      	cmp	r3, #0
 8012768:	d1e6      	bne.n	8012738 <UART_DMATransmitCplt+0x58>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 801276a:	e002      	b.n	8012772 <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 801276c:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 801276e:	f7ef f98d 	bl	8001a8c <HAL_UART_TxCpltCallback>
}
 8012772:	bf00      	nop
 8012774:	3740      	adds	r7, #64	@ 0x40
 8012776:	46bd      	mov	sp, r7
 8012778:	bd80      	pop	{r7, pc}

0801277a <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 801277a:	b580      	push	{r7, lr}
 801277c:	b084      	sub	sp, #16
 801277e:	af00      	add	r7, sp, #0
 8012780:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8012782:	687b      	ldr	r3, [r7, #4]
 8012784:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8012786:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8012788:	68f8      	ldr	r0, [r7, #12]
 801278a:	f7ff f9f1 	bl	8011b70 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 801278e:	bf00      	nop
 8012790:	3710      	adds	r7, #16
 8012792:	46bd      	mov	sp, r7
 8012794:	bd80      	pop	{r7, pc}

08012796 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8012796:	b580      	push	{r7, lr}
 8012798:	b09c      	sub	sp, #112	@ 0x70
 801279a:	af00      	add	r7, sp, #0
 801279c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 801279e:	687b      	ldr	r3, [r7, #4]
 80127a0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80127a2:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 80127a4:	687b      	ldr	r3, [r7, #4]
 80127a6:	681b      	ldr	r3, [r3, #0]
 80127a8:	681b      	ldr	r3, [r3, #0]
 80127aa:	f003 0320 	and.w	r3, r3, #32
 80127ae:	2b00      	cmp	r3, #0
 80127b0:	d171      	bne.n	8012896 <UART_DMAReceiveCplt+0x100>
  {
    huart->RxXferCount = 0U;
 80127b2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80127b4:	2200      	movs	r2, #0
 80127b6:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80127ba:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80127bc:	681b      	ldr	r3, [r3, #0]
 80127be:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80127c0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80127c2:	e853 3f00 	ldrex	r3, [r3]
 80127c6:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80127c8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80127ca:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80127ce:	66bb      	str	r3, [r7, #104]	@ 0x68
 80127d0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80127d2:	681b      	ldr	r3, [r3, #0]
 80127d4:	461a      	mov	r2, r3
 80127d6:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80127d8:	65bb      	str	r3, [r7, #88]	@ 0x58
 80127da:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80127dc:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80127de:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80127e0:	e841 2300 	strex	r3, r2, [r1]
 80127e4:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80127e6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80127e8:	2b00      	cmp	r3, #0
 80127ea:	d1e6      	bne.n	80127ba <UART_DMAReceiveCplt+0x24>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80127ec:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80127ee:	681b      	ldr	r3, [r3, #0]
 80127f0:	3308      	adds	r3, #8
 80127f2:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80127f4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80127f6:	e853 3f00 	ldrex	r3, [r3]
 80127fa:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80127fc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80127fe:	f023 0301 	bic.w	r3, r3, #1
 8012802:	667b      	str	r3, [r7, #100]	@ 0x64
 8012804:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8012806:	681b      	ldr	r3, [r3, #0]
 8012808:	3308      	adds	r3, #8
 801280a:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 801280c:	647a      	str	r2, [r7, #68]	@ 0x44
 801280e:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012810:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8012812:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8012814:	e841 2300 	strex	r3, r2, [r1]
 8012818:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 801281a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801281c:	2b00      	cmp	r3, #0
 801281e:	d1e5      	bne.n	80127ec <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8012820:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8012822:	681b      	ldr	r3, [r3, #0]
 8012824:	3308      	adds	r3, #8
 8012826:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012828:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801282a:	e853 3f00 	ldrex	r3, [r3]
 801282e:	623b      	str	r3, [r7, #32]
   return(result);
 8012830:	6a3b      	ldr	r3, [r7, #32]
 8012832:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8012836:	663b      	str	r3, [r7, #96]	@ 0x60
 8012838:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 801283a:	681b      	ldr	r3, [r3, #0]
 801283c:	3308      	adds	r3, #8
 801283e:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8012840:	633a      	str	r2, [r7, #48]	@ 0x30
 8012842:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012844:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8012846:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8012848:	e841 2300 	strex	r3, r2, [r1]
 801284c:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 801284e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012850:	2b00      	cmp	r3, #0
 8012852:	d1e5      	bne.n	8012820 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8012854:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8012856:	2220      	movs	r2, #32
 8012858:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 801285c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 801285e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8012860:	2b01      	cmp	r3, #1
 8012862:	d118      	bne.n	8012896 <UART_DMAReceiveCplt+0x100>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8012864:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8012866:	681b      	ldr	r3, [r3, #0]
 8012868:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801286a:	693b      	ldr	r3, [r7, #16]
 801286c:	e853 3f00 	ldrex	r3, [r3]
 8012870:	60fb      	str	r3, [r7, #12]
   return(result);
 8012872:	68fb      	ldr	r3, [r7, #12]
 8012874:	f023 0310 	bic.w	r3, r3, #16
 8012878:	65fb      	str	r3, [r7, #92]	@ 0x5c
 801287a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 801287c:	681b      	ldr	r3, [r3, #0]
 801287e:	461a      	mov	r2, r3
 8012880:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8012882:	61fb      	str	r3, [r7, #28]
 8012884:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012886:	69b9      	ldr	r1, [r7, #24]
 8012888:	69fa      	ldr	r2, [r7, #28]
 801288a:	e841 2300 	strex	r3, r2, [r1]
 801288e:	617b      	str	r3, [r7, #20]
   return(result);
 8012890:	697b      	ldr	r3, [r7, #20]
 8012892:	2b00      	cmp	r3, #0
 8012894:	d1e6      	bne.n	8012864 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8012896:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8012898:	2200      	movs	r2, #0
 801289a:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 801289c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 801289e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80128a0:	2b01      	cmp	r3, #1
 80128a2:	d107      	bne.n	80128b4 <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80128a4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80128a6:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 80128aa:	4619      	mov	r1, r3
 80128ac:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 80128ae:	f7ef f875 	bl	800199c <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80128b2:	e002      	b.n	80128ba <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 80128b4:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 80128b6:	f7ef f8df 	bl	8001a78 <HAL_UART_RxCpltCallback>
}
 80128ba:	bf00      	nop
 80128bc:	3770      	adds	r7, #112	@ 0x70
 80128be:	46bd      	mov	sp, r7
 80128c0:	bd80      	pop	{r7, pc}

080128c2 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80128c2:	b580      	push	{r7, lr}
 80128c4:	b084      	sub	sp, #16
 80128c6:	af00      	add	r7, sp, #0
 80128c8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80128ca:	687b      	ldr	r3, [r7, #4]
 80128cc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80128ce:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 80128d0:	68fb      	ldr	r3, [r7, #12]
 80128d2:	2201      	movs	r2, #1
 80128d4:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80128d6:	68fb      	ldr	r3, [r7, #12]
 80128d8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80128da:	2b01      	cmp	r3, #1
 80128dc:	d109      	bne.n	80128f2 <UART_DMARxHalfCplt+0x30>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 80128de:	68fb      	ldr	r3, [r7, #12]
 80128e0:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 80128e4:	085b      	lsrs	r3, r3, #1
 80128e6:	b29b      	uxth	r3, r3
 80128e8:	4619      	mov	r1, r3
 80128ea:	68f8      	ldr	r0, [r7, #12]
 80128ec:	f7ef f856 	bl	800199c <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80128f0:	e002      	b.n	80128f8 <UART_DMARxHalfCplt+0x36>
    HAL_UART_RxHalfCpltCallback(huart);
 80128f2:	68f8      	ldr	r0, [r7, #12]
 80128f4:	f7ff f946 	bl	8011b84 <HAL_UART_RxHalfCpltCallback>
}
 80128f8:	bf00      	nop
 80128fa:	3710      	adds	r7, #16
 80128fc:	46bd      	mov	sp, r7
 80128fe:	bd80      	pop	{r7, pc}

08012900 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8012900:	b580      	push	{r7, lr}
 8012902:	b086      	sub	sp, #24
 8012904:	af00      	add	r7, sp, #0
 8012906:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8012908:	687b      	ldr	r3, [r7, #4]
 801290a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801290c:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 801290e:	697b      	ldr	r3, [r7, #20]
 8012910:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8012912:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8012914:	697b      	ldr	r3, [r7, #20]
 8012916:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 801291a:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 801291c:	697b      	ldr	r3, [r7, #20]
 801291e:	681b      	ldr	r3, [r3, #0]
 8012920:	689b      	ldr	r3, [r3, #8]
 8012922:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8012926:	2b80      	cmp	r3, #128	@ 0x80
 8012928:	d109      	bne.n	801293e <UART_DMAError+0x3e>
 801292a:	693b      	ldr	r3, [r7, #16]
 801292c:	2b21      	cmp	r3, #33	@ 0x21
 801292e:	d106      	bne.n	801293e <UART_DMAError+0x3e>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8012930:	697b      	ldr	r3, [r7, #20]
 8012932:	2200      	movs	r2, #0
 8012934:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    UART_EndTxTransfer(huart);
 8012938:	6978      	ldr	r0, [r7, #20]
 801293a:	f7ff fe47 	bl	80125cc <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 801293e:	697b      	ldr	r3, [r7, #20]
 8012940:	681b      	ldr	r3, [r3, #0]
 8012942:	689b      	ldr	r3, [r3, #8]
 8012944:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8012948:	2b40      	cmp	r3, #64	@ 0x40
 801294a:	d109      	bne.n	8012960 <UART_DMAError+0x60>
 801294c:	68fb      	ldr	r3, [r7, #12]
 801294e:	2b22      	cmp	r3, #34	@ 0x22
 8012950:	d106      	bne.n	8012960 <UART_DMAError+0x60>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8012952:	697b      	ldr	r3, [r7, #20]
 8012954:	2200      	movs	r2, #0
 8012956:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
    UART_EndRxTransfer(huart);
 801295a:	6978      	ldr	r0, [r7, #20]
 801295c:	f7ff fe5c 	bl	8012618 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8012960:	697b      	ldr	r3, [r7, #20]
 8012962:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8012966:	f043 0210 	orr.w	r2, r3, #16
 801296a:	697b      	ldr	r3, [r7, #20]
 801296c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8012970:	6978      	ldr	r0, [r7, #20]
 8012972:	f7ff f911 	bl	8011b98 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8012976:	bf00      	nop
 8012978:	3718      	adds	r7, #24
 801297a:	46bd      	mov	sp, r7
 801297c:	bd80      	pop	{r7, pc}

0801297e <HAL_UARTEx_ReceiveToIdle>:
  * @param Timeout Timeout duration expressed in ms (covers the whole reception sequence).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint16_t *RxLen,
                                           uint32_t Timeout)
{
 801297e:	b580      	push	{r7, lr}
 8012980:	b088      	sub	sp, #32
 8012982:	af00      	add	r7, sp, #0
 8012984:	60f8      	str	r0, [r7, #12]
 8012986:	60b9      	str	r1, [r7, #8]
 8012988:	603b      	str	r3, [r7, #0]
 801298a:	4613      	mov	r3, r2
 801298c:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 801298e:	68fb      	ldr	r3, [r7, #12]
 8012990:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8012994:	2b20      	cmp	r3, #32
 8012996:	f040 80f0 	bne.w	8012b7a <HAL_UARTEx_ReceiveToIdle+0x1fc>
  {
    if ((pData == NULL) || (Size == 0U))
 801299a:	68bb      	ldr	r3, [r7, #8]
 801299c:	2b00      	cmp	r3, #0
 801299e:	d002      	beq.n	80129a6 <HAL_UARTEx_ReceiveToIdle+0x28>
 80129a0:	88fb      	ldrh	r3, [r7, #6]
 80129a2:	2b00      	cmp	r3, #0
 80129a4:	d101      	bne.n	80129aa <HAL_UARTEx_ReceiveToIdle+0x2c>
    {
      return  HAL_ERROR;
 80129a6:	2301      	movs	r3, #1
 80129a8:	e0e8      	b.n	8012b7c <HAL_UARTEx_ReceiveToIdle+0x1fe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80129aa:	68fb      	ldr	r3, [r7, #12]
 80129ac:	2200      	movs	r2, #0
 80129ae:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80129b2:	68fb      	ldr	r3, [r7, #12]
 80129b4:	2222      	movs	r2, #34	@ 0x22
 80129b6:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 80129ba:	68fb      	ldr	r3, [r7, #12]
 80129bc:	2201      	movs	r2, #1
 80129be:	661a      	str	r2, [r3, #96]	@ 0x60
    huart->RxEventType = HAL_UART_RXEVENT_TC;
 80129c0:	68fb      	ldr	r3, [r7, #12]
 80129c2:	2200      	movs	r2, #0
 80129c4:	665a      	str	r2, [r3, #100]	@ 0x64

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80129c6:	f7f6 fb7d 	bl	80090c4 <HAL_GetTick>
 80129ca:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 80129cc:	68fb      	ldr	r3, [r7, #12]
 80129ce:	88fa      	ldrh	r2, [r7, #6]
 80129d0:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58
    huart->RxXferCount = Size;
 80129d4:	68fb      	ldr	r3, [r7, #12]
 80129d6:	88fa      	ldrh	r2, [r7, #6]
 80129d8:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 80129dc:	68fb      	ldr	r3, [r7, #12]
 80129de:	689b      	ldr	r3, [r3, #8]
 80129e0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80129e4:	d10e      	bne.n	8012a04 <HAL_UARTEx_ReceiveToIdle+0x86>
 80129e6:	68fb      	ldr	r3, [r7, #12]
 80129e8:	691b      	ldr	r3, [r3, #16]
 80129ea:	2b00      	cmp	r3, #0
 80129ec:	d105      	bne.n	80129fa <HAL_UARTEx_ReceiveToIdle+0x7c>
 80129ee:	68fb      	ldr	r3, [r7, #12]
 80129f0:	f240 12ff 	movw	r2, #511	@ 0x1ff
 80129f4:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 80129f8:	e02d      	b.n	8012a56 <HAL_UARTEx_ReceiveToIdle+0xd8>
 80129fa:	68fb      	ldr	r3, [r7, #12]
 80129fc:	22ff      	movs	r2, #255	@ 0xff
 80129fe:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8012a02:	e028      	b.n	8012a56 <HAL_UARTEx_ReceiveToIdle+0xd8>
 8012a04:	68fb      	ldr	r3, [r7, #12]
 8012a06:	689b      	ldr	r3, [r3, #8]
 8012a08:	2b00      	cmp	r3, #0
 8012a0a:	d10d      	bne.n	8012a28 <HAL_UARTEx_ReceiveToIdle+0xaa>
 8012a0c:	68fb      	ldr	r3, [r7, #12]
 8012a0e:	691b      	ldr	r3, [r3, #16]
 8012a10:	2b00      	cmp	r3, #0
 8012a12:	d104      	bne.n	8012a1e <HAL_UARTEx_ReceiveToIdle+0xa0>
 8012a14:	68fb      	ldr	r3, [r7, #12]
 8012a16:	22ff      	movs	r2, #255	@ 0xff
 8012a18:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8012a1c:	e01b      	b.n	8012a56 <HAL_UARTEx_ReceiveToIdle+0xd8>
 8012a1e:	68fb      	ldr	r3, [r7, #12]
 8012a20:	227f      	movs	r2, #127	@ 0x7f
 8012a22:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8012a26:	e016      	b.n	8012a56 <HAL_UARTEx_ReceiveToIdle+0xd8>
 8012a28:	68fb      	ldr	r3, [r7, #12]
 8012a2a:	689b      	ldr	r3, [r3, #8]
 8012a2c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8012a30:	d10d      	bne.n	8012a4e <HAL_UARTEx_ReceiveToIdle+0xd0>
 8012a32:	68fb      	ldr	r3, [r7, #12]
 8012a34:	691b      	ldr	r3, [r3, #16]
 8012a36:	2b00      	cmp	r3, #0
 8012a38:	d104      	bne.n	8012a44 <HAL_UARTEx_ReceiveToIdle+0xc6>
 8012a3a:	68fb      	ldr	r3, [r7, #12]
 8012a3c:	227f      	movs	r2, #127	@ 0x7f
 8012a3e:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8012a42:	e008      	b.n	8012a56 <HAL_UARTEx_ReceiveToIdle+0xd8>
 8012a44:	68fb      	ldr	r3, [r7, #12]
 8012a46:	223f      	movs	r2, #63	@ 0x3f
 8012a48:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8012a4c:	e003      	b.n	8012a56 <HAL_UARTEx_ReceiveToIdle+0xd8>
 8012a4e:	68fb      	ldr	r3, [r7, #12]
 8012a50:	2200      	movs	r2, #0
 8012a52:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
    uhMask = huart->Mask;
 8012a56:	68fb      	ldr	r3, [r7, #12]
 8012a58:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8012a5c:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8012a5e:	68fb      	ldr	r3, [r7, #12]
 8012a60:	689b      	ldr	r3, [r3, #8]
 8012a62:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8012a66:	d108      	bne.n	8012a7a <HAL_UARTEx_ReceiveToIdle+0xfc>
 8012a68:	68fb      	ldr	r3, [r7, #12]
 8012a6a:	691b      	ldr	r3, [r3, #16]
 8012a6c:	2b00      	cmp	r3, #0
 8012a6e:	d104      	bne.n	8012a7a <HAL_UARTEx_ReceiveToIdle+0xfc>
    {
      pdata8bits  = NULL;
 8012a70:	2300      	movs	r3, #0
 8012a72:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8012a74:	68bb      	ldr	r3, [r7, #8]
 8012a76:	61bb      	str	r3, [r7, #24]
 8012a78:	e003      	b.n	8012a82 <HAL_UARTEx_ReceiveToIdle+0x104>
    }
    else
    {
      pdata8bits  = pData;
 8012a7a:	68bb      	ldr	r3, [r7, #8]
 8012a7c:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8012a7e:	2300      	movs	r3, #0
 8012a80:	61bb      	str	r3, [r7, #24]
    }

    /* Initialize output number of received elements */
    *RxLen = 0U;
 8012a82:	683b      	ldr	r3, [r7, #0]
 8012a84:	2200      	movs	r2, #0
 8012a86:	801a      	strh	r2, [r3, #0]

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8012a88:	e060      	b.n	8012b4c <HAL_UARTEx_ReceiveToIdle+0x1ce>
    {
      /* Check if IDLE flag is set */
      if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8012a8a:	68fb      	ldr	r3, [r7, #12]
 8012a8c:	681b      	ldr	r3, [r3, #0]
 8012a8e:	69db      	ldr	r3, [r3, #28]
 8012a90:	f003 0310 	and.w	r3, r3, #16
 8012a94:	2b10      	cmp	r3, #16
 8012a96:	d110      	bne.n	8012aba <HAL_UARTEx_ReceiveToIdle+0x13c>
      {
        /* Clear IDLE flag in ISR */
        __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8012a98:	68fb      	ldr	r3, [r7, #12]
 8012a9a:	681b      	ldr	r3, [r3, #0]
 8012a9c:	2210      	movs	r2, #16
 8012a9e:	621a      	str	r2, [r3, #32]

        /* If Set, but no data ever received, clear flag without exiting loop */
        /* If Set, and data has already been received, this means Idle Event is valid : End reception */
        if (*RxLen > 0U)
 8012aa0:	683b      	ldr	r3, [r7, #0]
 8012aa2:	881b      	ldrh	r3, [r3, #0]
 8012aa4:	2b00      	cmp	r3, #0
 8012aa6:	d008      	beq.n	8012aba <HAL_UARTEx_ReceiveToIdle+0x13c>
        {
          huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8012aa8:	68fb      	ldr	r3, [r7, #12]
 8012aaa:	2202      	movs	r2, #2
 8012aac:	665a      	str	r2, [r3, #100]	@ 0x64
          huart->RxState = HAL_UART_STATE_READY;
 8012aae:	68fb      	ldr	r3, [r7, #12]
 8012ab0:	2220      	movs	r2, #32
 8012ab2:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

          return HAL_OK;
 8012ab6:	2300      	movs	r3, #0
 8012ab8:	e060      	b.n	8012b7c <HAL_UARTEx_ReceiveToIdle+0x1fe>
        }
      }

      /* Check if RXNE flag is set */
      if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RXNE))
 8012aba:	68fb      	ldr	r3, [r7, #12]
 8012abc:	681b      	ldr	r3, [r3, #0]
 8012abe:	69db      	ldr	r3, [r3, #28]
 8012ac0:	f003 0320 	and.w	r3, r3, #32
 8012ac4:	2b20      	cmp	r3, #32
 8012ac6:	d12c      	bne.n	8012b22 <HAL_UARTEx_ReceiveToIdle+0x1a4>
      {
        if (pdata8bits == NULL)
 8012ac8:	69fb      	ldr	r3, [r7, #28]
 8012aca:	2b00      	cmp	r3, #0
 8012acc:	d10c      	bne.n	8012ae8 <HAL_UARTEx_ReceiveToIdle+0x16a>
        {
          *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8012ace:	68fb      	ldr	r3, [r7, #12]
 8012ad0:	681b      	ldr	r3, [r3, #0]
 8012ad2:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8012ad4:	b29a      	uxth	r2, r3
 8012ad6:	8a7b      	ldrh	r3, [r7, #18]
 8012ad8:	4013      	ands	r3, r2
 8012ada:	b29a      	uxth	r2, r3
 8012adc:	69bb      	ldr	r3, [r7, #24]
 8012ade:	801a      	strh	r2, [r3, #0]
          pdata16bits++;
 8012ae0:	69bb      	ldr	r3, [r7, #24]
 8012ae2:	3302      	adds	r3, #2
 8012ae4:	61bb      	str	r3, [r7, #24]
 8012ae6:	e00d      	b.n	8012b04 <HAL_UARTEx_ReceiveToIdle+0x186>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8012ae8:	68fb      	ldr	r3, [r7, #12]
 8012aea:	681b      	ldr	r3, [r3, #0]
 8012aec:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8012aee:	b29b      	uxth	r3, r3
 8012af0:	b2da      	uxtb	r2, r3
 8012af2:	8a7b      	ldrh	r3, [r7, #18]
 8012af4:	b2db      	uxtb	r3, r3
 8012af6:	4013      	ands	r3, r2
 8012af8:	b2da      	uxtb	r2, r3
 8012afa:	69fb      	ldr	r3, [r7, #28]
 8012afc:	701a      	strb	r2, [r3, #0]
          pdata8bits++;
 8012afe:	69fb      	ldr	r3, [r7, #28]
 8012b00:	3301      	adds	r3, #1
 8012b02:	61fb      	str	r3, [r7, #28]
        }
        /* Increment number of received elements */
        *RxLen += 1U;
 8012b04:	683b      	ldr	r3, [r7, #0]
 8012b06:	881b      	ldrh	r3, [r3, #0]
 8012b08:	3301      	adds	r3, #1
 8012b0a:	b29a      	uxth	r2, r3
 8012b0c:	683b      	ldr	r3, [r7, #0]
 8012b0e:	801a      	strh	r2, [r3, #0]
        huart->RxXferCount--;
 8012b10:	68fb      	ldr	r3, [r7, #12]
 8012b12:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8012b16:	b29b      	uxth	r3, r3
 8012b18:	3b01      	subs	r3, #1
 8012b1a:	b29a      	uxth	r2, r3
 8012b1c:	68fb      	ldr	r3, [r7, #12]
 8012b1e:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
      }

      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8012b22:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012b24:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012b28:	d010      	beq.n	8012b4c <HAL_UARTEx_ReceiveToIdle+0x1ce>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8012b2a:	f7f6 facb 	bl	80090c4 <HAL_GetTick>
 8012b2e:	4602      	mov	r2, r0
 8012b30:	697b      	ldr	r3, [r7, #20]
 8012b32:	1ad3      	subs	r3, r2, r3
 8012b34:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8012b36:	429a      	cmp	r2, r3
 8012b38:	d302      	bcc.n	8012b40 <HAL_UARTEx_ReceiveToIdle+0x1c2>
 8012b3a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012b3c:	2b00      	cmp	r3, #0
 8012b3e:	d105      	bne.n	8012b4c <HAL_UARTEx_ReceiveToIdle+0x1ce>
        {
          huart->RxState = HAL_UART_STATE_READY;
 8012b40:	68fb      	ldr	r3, [r7, #12]
 8012b42:	2220      	movs	r2, #32
 8012b44:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 8012b48:	2303      	movs	r3, #3
 8012b4a:	e017      	b.n	8012b7c <HAL_UARTEx_ReceiveToIdle+0x1fe>
    while (huart->RxXferCount > 0U)
 8012b4c:	68fb      	ldr	r3, [r7, #12]
 8012b4e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8012b52:	b29b      	uxth	r3, r3
 8012b54:	2b00      	cmp	r3, #0
 8012b56:	d198      	bne.n	8012a8a <HAL_UARTEx_ReceiveToIdle+0x10c>
        }
      }
    }

    /* Set number of received elements in output parameter : RxLen */
    *RxLen = huart->RxXferSize - huart->RxXferCount;
 8012b58:	68fb      	ldr	r3, [r7, #12]
 8012b5a:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 8012b5e:	68fb      	ldr	r3, [r7, #12]
 8012b60:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8012b64:	b29b      	uxth	r3, r3
 8012b66:	1ad3      	subs	r3, r2, r3
 8012b68:	b29a      	uxth	r2, r3
 8012b6a:	683b      	ldr	r3, [r7, #0]
 8012b6c:	801a      	strh	r2, [r3, #0]
    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8012b6e:	68fb      	ldr	r3, [r7, #12]
 8012b70:	2220      	movs	r2, #32
 8012b72:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

    return HAL_OK;
 8012b76:	2300      	movs	r3, #0
 8012b78:	e000      	b.n	8012b7c <HAL_UARTEx_ReceiveToIdle+0x1fe>
  }
  else
  {
    return HAL_BUSY;
 8012b7a:	2302      	movs	r3, #2
  }
}
 8012b7c:	4618      	mov	r0, r3
 8012b7e:	3720      	adds	r7, #32
 8012b80:	46bd      	mov	sp, r7
 8012b82:	bd80      	pop	{r7, pc}

08012b84 <HAL_UARTEx_ReceiveToIdle_DMA>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8012b84:	b580      	push	{r7, lr}
 8012b86:	b08c      	sub	sp, #48	@ 0x30
 8012b88:	af00      	add	r7, sp, #0
 8012b8a:	60f8      	str	r0, [r7, #12]
 8012b8c:	60b9      	str	r1, [r7, #8]
 8012b8e:	4613      	mov	r3, r2
 8012b90:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8012b92:	68fb      	ldr	r3, [r7, #12]
 8012b94:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8012b98:	2b20      	cmp	r3, #32
 8012b9a:	d142      	bne.n	8012c22 <HAL_UARTEx_ReceiveToIdle_DMA+0x9e>
  {
    if ((pData == NULL) || (Size == 0U))
 8012b9c:	68bb      	ldr	r3, [r7, #8]
 8012b9e:	2b00      	cmp	r3, #0
 8012ba0:	d002      	beq.n	8012ba8 <HAL_UARTEx_ReceiveToIdle_DMA+0x24>
 8012ba2:	88fb      	ldrh	r3, [r7, #6]
 8012ba4:	2b00      	cmp	r3, #0
 8012ba6:	d101      	bne.n	8012bac <HAL_UARTEx_ReceiveToIdle_DMA+0x28>
    {
      return HAL_ERROR;
 8012ba8:	2301      	movs	r3, #1
 8012baa:	e03b      	b.n	8012c24 <HAL_UARTEx_ReceiveToIdle_DMA+0xa0>
    }

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 8012bac:	68fb      	ldr	r3, [r7, #12]
 8012bae:	2201      	movs	r2, #1
 8012bb0:	661a      	str	r2, [r3, #96]	@ 0x60
    huart->RxEventType = HAL_UART_RXEVENT_TC;
 8012bb2:	68fb      	ldr	r3, [r7, #12]
 8012bb4:	2200      	movs	r2, #0
 8012bb6:	665a      	str	r2, [r3, #100]	@ 0x64

    status =  UART_Start_Receive_DMA(huart, pData, Size);
 8012bb8:	88fb      	ldrh	r3, [r7, #6]
 8012bba:	461a      	mov	r2, r3
 8012bbc:	68b9      	ldr	r1, [r7, #8]
 8012bbe:	68f8      	ldr	r0, [r7, #12]
 8012bc0:	f7ff fc64 	bl	801248c <UART_Start_Receive_DMA>
 8012bc4:	4603      	mov	r3, r0
 8012bc6:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 8012bca:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8012bce:	2b00      	cmp	r3, #0
 8012bd0:	d124      	bne.n	8012c1c <HAL_UARTEx_ReceiveToIdle_DMA+0x98>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8012bd2:	68fb      	ldr	r3, [r7, #12]
 8012bd4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8012bd6:	2b01      	cmp	r3, #1
 8012bd8:	d11d      	bne.n	8012c16 <HAL_UARTEx_ReceiveToIdle_DMA+0x92>
      {
        __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8012bda:	68fb      	ldr	r3, [r7, #12]
 8012bdc:	681b      	ldr	r3, [r3, #0]
 8012bde:	2210      	movs	r2, #16
 8012be0:	621a      	str	r2, [r3, #32]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8012be2:	68fb      	ldr	r3, [r7, #12]
 8012be4:	681b      	ldr	r3, [r3, #0]
 8012be6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012be8:	69bb      	ldr	r3, [r7, #24]
 8012bea:	e853 3f00 	ldrex	r3, [r3]
 8012bee:	617b      	str	r3, [r7, #20]
   return(result);
 8012bf0:	697b      	ldr	r3, [r7, #20]
 8012bf2:	f043 0310 	orr.w	r3, r3, #16
 8012bf6:	62bb      	str	r3, [r7, #40]	@ 0x28
 8012bf8:	68fb      	ldr	r3, [r7, #12]
 8012bfa:	681b      	ldr	r3, [r3, #0]
 8012bfc:	461a      	mov	r2, r3
 8012bfe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012c00:	627b      	str	r3, [r7, #36]	@ 0x24
 8012c02:	623a      	str	r2, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012c04:	6a39      	ldr	r1, [r7, #32]
 8012c06:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8012c08:	e841 2300 	strex	r3, r2, [r1]
 8012c0c:	61fb      	str	r3, [r7, #28]
   return(result);
 8012c0e:	69fb      	ldr	r3, [r7, #28]
 8012c10:	2b00      	cmp	r3, #0
 8012c12:	d1e6      	bne.n	8012be2 <HAL_UARTEx_ReceiveToIdle_DMA+0x5e>
 8012c14:	e002      	b.n	8012c1c <HAL_UARTEx_ReceiveToIdle_DMA+0x98>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 8012c16:	2301      	movs	r3, #1
 8012c18:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }

    return status;
 8012c1c:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8012c20:	e000      	b.n	8012c24 <HAL_UARTEx_ReceiveToIdle_DMA+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8012c22:	2302      	movs	r3, #2
  }
}
 8012c24:	4618      	mov	r0, r3
 8012c26:	3730      	adds	r7, #48	@ 0x30
 8012c28:	46bd      	mov	sp, r7
 8012c2a:	bd80      	pop	{r7, pc}

08012c2c <atoi>:
 8012c2c:	220a      	movs	r2, #10
 8012c2e:	2100      	movs	r1, #0
 8012c30:	f000 b87c 	b.w	8012d2c <strtol>

08012c34 <_strtol_l.isra.0>:
 8012c34:	2b24      	cmp	r3, #36	@ 0x24
 8012c36:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012c3a:	4686      	mov	lr, r0
 8012c3c:	4690      	mov	r8, r2
 8012c3e:	d801      	bhi.n	8012c44 <_strtol_l.isra.0+0x10>
 8012c40:	2b01      	cmp	r3, #1
 8012c42:	d106      	bne.n	8012c52 <_strtol_l.isra.0+0x1e>
 8012c44:	f000 f92c 	bl	8012ea0 <__errno>
 8012c48:	2316      	movs	r3, #22
 8012c4a:	6003      	str	r3, [r0, #0]
 8012c4c:	2000      	movs	r0, #0
 8012c4e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012c52:	4834      	ldr	r0, [pc, #208]	@ (8012d24 <_strtol_l.isra.0+0xf0>)
 8012c54:	460d      	mov	r5, r1
 8012c56:	462a      	mov	r2, r5
 8012c58:	f815 4b01 	ldrb.w	r4, [r5], #1
 8012c5c:	5d06      	ldrb	r6, [r0, r4]
 8012c5e:	f016 0608 	ands.w	r6, r6, #8
 8012c62:	d1f8      	bne.n	8012c56 <_strtol_l.isra.0+0x22>
 8012c64:	2c2d      	cmp	r4, #45	@ 0x2d
 8012c66:	d110      	bne.n	8012c8a <_strtol_l.isra.0+0x56>
 8012c68:	782c      	ldrb	r4, [r5, #0]
 8012c6a:	2601      	movs	r6, #1
 8012c6c:	1c95      	adds	r5, r2, #2
 8012c6e:	f033 0210 	bics.w	r2, r3, #16
 8012c72:	d115      	bne.n	8012ca0 <_strtol_l.isra.0+0x6c>
 8012c74:	2c30      	cmp	r4, #48	@ 0x30
 8012c76:	d10d      	bne.n	8012c94 <_strtol_l.isra.0+0x60>
 8012c78:	782a      	ldrb	r2, [r5, #0]
 8012c7a:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8012c7e:	2a58      	cmp	r2, #88	@ 0x58
 8012c80:	d108      	bne.n	8012c94 <_strtol_l.isra.0+0x60>
 8012c82:	786c      	ldrb	r4, [r5, #1]
 8012c84:	3502      	adds	r5, #2
 8012c86:	2310      	movs	r3, #16
 8012c88:	e00a      	b.n	8012ca0 <_strtol_l.isra.0+0x6c>
 8012c8a:	2c2b      	cmp	r4, #43	@ 0x2b
 8012c8c:	bf04      	itt	eq
 8012c8e:	782c      	ldrbeq	r4, [r5, #0]
 8012c90:	1c95      	addeq	r5, r2, #2
 8012c92:	e7ec      	b.n	8012c6e <_strtol_l.isra.0+0x3a>
 8012c94:	2b00      	cmp	r3, #0
 8012c96:	d1f6      	bne.n	8012c86 <_strtol_l.isra.0+0x52>
 8012c98:	2c30      	cmp	r4, #48	@ 0x30
 8012c9a:	bf14      	ite	ne
 8012c9c:	230a      	movne	r3, #10
 8012c9e:	2308      	moveq	r3, #8
 8012ca0:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 8012ca4:	f10c 3cff 	add.w	ip, ip, #4294967295
 8012ca8:	2200      	movs	r2, #0
 8012caa:	fbbc f9f3 	udiv	r9, ip, r3
 8012cae:	4610      	mov	r0, r2
 8012cb0:	fb03 ca19 	mls	sl, r3, r9, ip
 8012cb4:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 8012cb8:	2f09      	cmp	r7, #9
 8012cba:	d80f      	bhi.n	8012cdc <_strtol_l.isra.0+0xa8>
 8012cbc:	463c      	mov	r4, r7
 8012cbe:	42a3      	cmp	r3, r4
 8012cc0:	dd1b      	ble.n	8012cfa <_strtol_l.isra.0+0xc6>
 8012cc2:	1c57      	adds	r7, r2, #1
 8012cc4:	d007      	beq.n	8012cd6 <_strtol_l.isra.0+0xa2>
 8012cc6:	4581      	cmp	r9, r0
 8012cc8:	d314      	bcc.n	8012cf4 <_strtol_l.isra.0+0xc0>
 8012cca:	d101      	bne.n	8012cd0 <_strtol_l.isra.0+0x9c>
 8012ccc:	45a2      	cmp	sl, r4
 8012cce:	db11      	blt.n	8012cf4 <_strtol_l.isra.0+0xc0>
 8012cd0:	fb00 4003 	mla	r0, r0, r3, r4
 8012cd4:	2201      	movs	r2, #1
 8012cd6:	f815 4b01 	ldrb.w	r4, [r5], #1
 8012cda:	e7eb      	b.n	8012cb4 <_strtol_l.isra.0+0x80>
 8012cdc:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8012ce0:	2f19      	cmp	r7, #25
 8012ce2:	d801      	bhi.n	8012ce8 <_strtol_l.isra.0+0xb4>
 8012ce4:	3c37      	subs	r4, #55	@ 0x37
 8012ce6:	e7ea      	b.n	8012cbe <_strtol_l.isra.0+0x8a>
 8012ce8:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 8012cec:	2f19      	cmp	r7, #25
 8012cee:	d804      	bhi.n	8012cfa <_strtol_l.isra.0+0xc6>
 8012cf0:	3c57      	subs	r4, #87	@ 0x57
 8012cf2:	e7e4      	b.n	8012cbe <_strtol_l.isra.0+0x8a>
 8012cf4:	f04f 32ff 	mov.w	r2, #4294967295
 8012cf8:	e7ed      	b.n	8012cd6 <_strtol_l.isra.0+0xa2>
 8012cfa:	1c53      	adds	r3, r2, #1
 8012cfc:	d108      	bne.n	8012d10 <_strtol_l.isra.0+0xdc>
 8012cfe:	2322      	movs	r3, #34	@ 0x22
 8012d00:	f8ce 3000 	str.w	r3, [lr]
 8012d04:	4660      	mov	r0, ip
 8012d06:	f1b8 0f00 	cmp.w	r8, #0
 8012d0a:	d0a0      	beq.n	8012c4e <_strtol_l.isra.0+0x1a>
 8012d0c:	1e69      	subs	r1, r5, #1
 8012d0e:	e006      	b.n	8012d1e <_strtol_l.isra.0+0xea>
 8012d10:	b106      	cbz	r6, 8012d14 <_strtol_l.isra.0+0xe0>
 8012d12:	4240      	negs	r0, r0
 8012d14:	f1b8 0f00 	cmp.w	r8, #0
 8012d18:	d099      	beq.n	8012c4e <_strtol_l.isra.0+0x1a>
 8012d1a:	2a00      	cmp	r2, #0
 8012d1c:	d1f6      	bne.n	8012d0c <_strtol_l.isra.0+0xd8>
 8012d1e:	f8c8 1000 	str.w	r1, [r8]
 8012d22:	e794      	b.n	8012c4e <_strtol_l.isra.0+0x1a>
 8012d24:	080144bf 	.word	0x080144bf

08012d28 <_strtol_r>:
 8012d28:	f7ff bf84 	b.w	8012c34 <_strtol_l.isra.0>

08012d2c <strtol>:
 8012d2c:	4613      	mov	r3, r2
 8012d2e:	460a      	mov	r2, r1
 8012d30:	4601      	mov	r1, r0
 8012d32:	4802      	ldr	r0, [pc, #8]	@ (8012d3c <strtol+0x10>)
 8012d34:	6800      	ldr	r0, [r0, #0]
 8012d36:	f7ff bf7d 	b.w	8012c34 <_strtol_l.isra.0>
 8012d3a:	bf00      	nop
 8012d3c:	20000014 	.word	0x20000014

08012d40 <siprintf>:
 8012d40:	b40e      	push	{r1, r2, r3}
 8012d42:	b510      	push	{r4, lr}
 8012d44:	b09d      	sub	sp, #116	@ 0x74
 8012d46:	ab1f      	add	r3, sp, #124	@ 0x7c
 8012d48:	9002      	str	r0, [sp, #8]
 8012d4a:	9006      	str	r0, [sp, #24]
 8012d4c:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8012d50:	480a      	ldr	r0, [pc, #40]	@ (8012d7c <siprintf+0x3c>)
 8012d52:	9107      	str	r1, [sp, #28]
 8012d54:	9104      	str	r1, [sp, #16]
 8012d56:	490a      	ldr	r1, [pc, #40]	@ (8012d80 <siprintf+0x40>)
 8012d58:	f853 2b04 	ldr.w	r2, [r3], #4
 8012d5c:	9105      	str	r1, [sp, #20]
 8012d5e:	2400      	movs	r4, #0
 8012d60:	a902      	add	r1, sp, #8
 8012d62:	6800      	ldr	r0, [r0, #0]
 8012d64:	9301      	str	r3, [sp, #4]
 8012d66:	941b      	str	r4, [sp, #108]	@ 0x6c
 8012d68:	f000 fa30 	bl	80131cc <_svfiprintf_r>
 8012d6c:	9b02      	ldr	r3, [sp, #8]
 8012d6e:	701c      	strb	r4, [r3, #0]
 8012d70:	b01d      	add	sp, #116	@ 0x74
 8012d72:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8012d76:	b003      	add	sp, #12
 8012d78:	4770      	bx	lr
 8012d7a:	bf00      	nop
 8012d7c:	20000014 	.word	0x20000014
 8012d80:	ffff0208 	.word	0xffff0208

08012d84 <siscanf>:
 8012d84:	b40e      	push	{r1, r2, r3}
 8012d86:	b570      	push	{r4, r5, r6, lr}
 8012d88:	b09d      	sub	sp, #116	@ 0x74
 8012d8a:	ac21      	add	r4, sp, #132	@ 0x84
 8012d8c:	2500      	movs	r5, #0
 8012d8e:	f44f 7201 	mov.w	r2, #516	@ 0x204
 8012d92:	f854 6b04 	ldr.w	r6, [r4], #4
 8012d96:	f8ad 2014 	strh.w	r2, [sp, #20]
 8012d9a:	951b      	str	r5, [sp, #108]	@ 0x6c
 8012d9c:	9002      	str	r0, [sp, #8]
 8012d9e:	9006      	str	r0, [sp, #24]
 8012da0:	f7ed fa20 	bl	80001e4 <strlen>
 8012da4:	4b0b      	ldr	r3, [pc, #44]	@ (8012dd4 <siscanf+0x50>)
 8012da6:	9003      	str	r0, [sp, #12]
 8012da8:	9007      	str	r0, [sp, #28]
 8012daa:	480b      	ldr	r0, [pc, #44]	@ (8012dd8 <siscanf+0x54>)
 8012dac:	930b      	str	r3, [sp, #44]	@ 0x2c
 8012dae:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8012db2:	f8ad 3016 	strh.w	r3, [sp, #22]
 8012db6:	4632      	mov	r2, r6
 8012db8:	4623      	mov	r3, r4
 8012dba:	a902      	add	r1, sp, #8
 8012dbc:	6800      	ldr	r0, [r0, #0]
 8012dbe:	950f      	str	r5, [sp, #60]	@ 0x3c
 8012dc0:	9514      	str	r5, [sp, #80]	@ 0x50
 8012dc2:	9401      	str	r4, [sp, #4]
 8012dc4:	f000 fb58 	bl	8013478 <__ssvfiscanf_r>
 8012dc8:	b01d      	add	sp, #116	@ 0x74
 8012dca:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8012dce:	b003      	add	sp, #12
 8012dd0:	4770      	bx	lr
 8012dd2:	bf00      	nop
 8012dd4:	08012ddd 	.word	0x08012ddd
 8012dd8:	20000014 	.word	0x20000014

08012ddc <__seofread>:
 8012ddc:	2000      	movs	r0, #0
 8012dde:	4770      	bx	lr

08012de0 <memcmp>:
 8012de0:	b510      	push	{r4, lr}
 8012de2:	3901      	subs	r1, #1
 8012de4:	4402      	add	r2, r0
 8012de6:	4290      	cmp	r0, r2
 8012de8:	d101      	bne.n	8012dee <memcmp+0xe>
 8012dea:	2000      	movs	r0, #0
 8012dec:	e005      	b.n	8012dfa <memcmp+0x1a>
 8012dee:	7803      	ldrb	r3, [r0, #0]
 8012df0:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8012df4:	42a3      	cmp	r3, r4
 8012df6:	d001      	beq.n	8012dfc <memcmp+0x1c>
 8012df8:	1b18      	subs	r0, r3, r4
 8012dfa:	bd10      	pop	{r4, pc}
 8012dfc:	3001      	adds	r0, #1
 8012dfe:	e7f2      	b.n	8012de6 <memcmp+0x6>

08012e00 <memset>:
 8012e00:	4402      	add	r2, r0
 8012e02:	4603      	mov	r3, r0
 8012e04:	4293      	cmp	r3, r2
 8012e06:	d100      	bne.n	8012e0a <memset+0xa>
 8012e08:	4770      	bx	lr
 8012e0a:	f803 1b01 	strb.w	r1, [r3], #1
 8012e0e:	e7f9      	b.n	8012e04 <memset+0x4>

08012e10 <strchr>:
 8012e10:	b2c9      	uxtb	r1, r1
 8012e12:	4603      	mov	r3, r0
 8012e14:	4618      	mov	r0, r3
 8012e16:	f813 2b01 	ldrb.w	r2, [r3], #1
 8012e1a:	b112      	cbz	r2, 8012e22 <strchr+0x12>
 8012e1c:	428a      	cmp	r2, r1
 8012e1e:	d1f9      	bne.n	8012e14 <strchr+0x4>
 8012e20:	4770      	bx	lr
 8012e22:	2900      	cmp	r1, #0
 8012e24:	bf18      	it	ne
 8012e26:	2000      	movne	r0, #0
 8012e28:	4770      	bx	lr

08012e2a <strncmp>:
 8012e2a:	b510      	push	{r4, lr}
 8012e2c:	b16a      	cbz	r2, 8012e4a <strncmp+0x20>
 8012e2e:	3901      	subs	r1, #1
 8012e30:	1884      	adds	r4, r0, r2
 8012e32:	f810 2b01 	ldrb.w	r2, [r0], #1
 8012e36:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8012e3a:	429a      	cmp	r2, r3
 8012e3c:	d103      	bne.n	8012e46 <strncmp+0x1c>
 8012e3e:	42a0      	cmp	r0, r4
 8012e40:	d001      	beq.n	8012e46 <strncmp+0x1c>
 8012e42:	2a00      	cmp	r2, #0
 8012e44:	d1f5      	bne.n	8012e32 <strncmp+0x8>
 8012e46:	1ad0      	subs	r0, r2, r3
 8012e48:	bd10      	pop	{r4, pc}
 8012e4a:	4610      	mov	r0, r2
 8012e4c:	e7fc      	b.n	8012e48 <strncmp+0x1e>

08012e4e <strncpy>:
 8012e4e:	b510      	push	{r4, lr}
 8012e50:	3901      	subs	r1, #1
 8012e52:	4603      	mov	r3, r0
 8012e54:	b132      	cbz	r2, 8012e64 <strncpy+0x16>
 8012e56:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8012e5a:	f803 4b01 	strb.w	r4, [r3], #1
 8012e5e:	3a01      	subs	r2, #1
 8012e60:	2c00      	cmp	r4, #0
 8012e62:	d1f7      	bne.n	8012e54 <strncpy+0x6>
 8012e64:	441a      	add	r2, r3
 8012e66:	2100      	movs	r1, #0
 8012e68:	4293      	cmp	r3, r2
 8012e6a:	d100      	bne.n	8012e6e <strncpy+0x20>
 8012e6c:	bd10      	pop	{r4, pc}
 8012e6e:	f803 1b01 	strb.w	r1, [r3], #1
 8012e72:	e7f9      	b.n	8012e68 <strncpy+0x1a>

08012e74 <strstr>:
 8012e74:	780a      	ldrb	r2, [r1, #0]
 8012e76:	b570      	push	{r4, r5, r6, lr}
 8012e78:	b96a      	cbnz	r2, 8012e96 <strstr+0x22>
 8012e7a:	bd70      	pop	{r4, r5, r6, pc}
 8012e7c:	429a      	cmp	r2, r3
 8012e7e:	d109      	bne.n	8012e94 <strstr+0x20>
 8012e80:	460c      	mov	r4, r1
 8012e82:	4605      	mov	r5, r0
 8012e84:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 8012e88:	2b00      	cmp	r3, #0
 8012e8a:	d0f6      	beq.n	8012e7a <strstr+0x6>
 8012e8c:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 8012e90:	429e      	cmp	r6, r3
 8012e92:	d0f7      	beq.n	8012e84 <strstr+0x10>
 8012e94:	3001      	adds	r0, #1
 8012e96:	7803      	ldrb	r3, [r0, #0]
 8012e98:	2b00      	cmp	r3, #0
 8012e9a:	d1ef      	bne.n	8012e7c <strstr+0x8>
 8012e9c:	4618      	mov	r0, r3
 8012e9e:	e7ec      	b.n	8012e7a <strstr+0x6>

08012ea0 <__errno>:
 8012ea0:	4b01      	ldr	r3, [pc, #4]	@ (8012ea8 <__errno+0x8>)
 8012ea2:	6818      	ldr	r0, [r3, #0]
 8012ea4:	4770      	bx	lr
 8012ea6:	bf00      	nop
 8012ea8:	20000014 	.word	0x20000014

08012eac <__libc_init_array>:
 8012eac:	b570      	push	{r4, r5, r6, lr}
 8012eae:	4d0d      	ldr	r5, [pc, #52]	@ (8012ee4 <__libc_init_array+0x38>)
 8012eb0:	4c0d      	ldr	r4, [pc, #52]	@ (8012ee8 <__libc_init_array+0x3c>)
 8012eb2:	1b64      	subs	r4, r4, r5
 8012eb4:	10a4      	asrs	r4, r4, #2
 8012eb6:	2600      	movs	r6, #0
 8012eb8:	42a6      	cmp	r6, r4
 8012eba:	d109      	bne.n	8012ed0 <__libc_init_array+0x24>
 8012ebc:	4d0b      	ldr	r5, [pc, #44]	@ (8012eec <__libc_init_array+0x40>)
 8012ebe:	4c0c      	ldr	r4, [pc, #48]	@ (8012ef0 <__libc_init_array+0x44>)
 8012ec0:	f001 f86e 	bl	8013fa0 <_init>
 8012ec4:	1b64      	subs	r4, r4, r5
 8012ec6:	10a4      	asrs	r4, r4, #2
 8012ec8:	2600      	movs	r6, #0
 8012eca:	42a6      	cmp	r6, r4
 8012ecc:	d105      	bne.n	8012eda <__libc_init_array+0x2e>
 8012ece:	bd70      	pop	{r4, r5, r6, pc}
 8012ed0:	f855 3b04 	ldr.w	r3, [r5], #4
 8012ed4:	4798      	blx	r3
 8012ed6:	3601      	adds	r6, #1
 8012ed8:	e7ee      	b.n	8012eb8 <__libc_init_array+0xc>
 8012eda:	f855 3b04 	ldr.w	r3, [r5], #4
 8012ede:	4798      	blx	r3
 8012ee0:	3601      	adds	r6, #1
 8012ee2:	e7f2      	b.n	8012eca <__libc_init_array+0x1e>
 8012ee4:	08014618 	.word	0x08014618
 8012ee8:	08014618 	.word	0x08014618
 8012eec:	08014618 	.word	0x08014618
 8012ef0:	0801461c 	.word	0x0801461c

08012ef4 <__retarget_lock_acquire_recursive>:
 8012ef4:	4770      	bx	lr

08012ef6 <__retarget_lock_release_recursive>:
 8012ef6:	4770      	bx	lr

08012ef8 <strcpy>:
 8012ef8:	4603      	mov	r3, r0
 8012efa:	f811 2b01 	ldrb.w	r2, [r1], #1
 8012efe:	f803 2b01 	strb.w	r2, [r3], #1
 8012f02:	2a00      	cmp	r2, #0
 8012f04:	d1f9      	bne.n	8012efa <strcpy+0x2>
 8012f06:	4770      	bx	lr

08012f08 <memcpy>:
 8012f08:	440a      	add	r2, r1
 8012f0a:	4291      	cmp	r1, r2
 8012f0c:	f100 33ff 	add.w	r3, r0, #4294967295
 8012f10:	d100      	bne.n	8012f14 <memcpy+0xc>
 8012f12:	4770      	bx	lr
 8012f14:	b510      	push	{r4, lr}
 8012f16:	f811 4b01 	ldrb.w	r4, [r1], #1
 8012f1a:	f803 4f01 	strb.w	r4, [r3, #1]!
 8012f1e:	4291      	cmp	r1, r2
 8012f20:	d1f9      	bne.n	8012f16 <memcpy+0xe>
 8012f22:	bd10      	pop	{r4, pc}

08012f24 <_free_r>:
 8012f24:	b538      	push	{r3, r4, r5, lr}
 8012f26:	4605      	mov	r5, r0
 8012f28:	2900      	cmp	r1, #0
 8012f2a:	d041      	beq.n	8012fb0 <_free_r+0x8c>
 8012f2c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8012f30:	1f0c      	subs	r4, r1, #4
 8012f32:	2b00      	cmp	r3, #0
 8012f34:	bfb8      	it	lt
 8012f36:	18e4      	addlt	r4, r4, r3
 8012f38:	f000 f8e0 	bl	80130fc <__malloc_lock>
 8012f3c:	4a1d      	ldr	r2, [pc, #116]	@ (8012fb4 <_free_r+0x90>)
 8012f3e:	6813      	ldr	r3, [r2, #0]
 8012f40:	b933      	cbnz	r3, 8012f50 <_free_r+0x2c>
 8012f42:	6063      	str	r3, [r4, #4]
 8012f44:	6014      	str	r4, [r2, #0]
 8012f46:	4628      	mov	r0, r5
 8012f48:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8012f4c:	f000 b8dc 	b.w	8013108 <__malloc_unlock>
 8012f50:	42a3      	cmp	r3, r4
 8012f52:	d908      	bls.n	8012f66 <_free_r+0x42>
 8012f54:	6820      	ldr	r0, [r4, #0]
 8012f56:	1821      	adds	r1, r4, r0
 8012f58:	428b      	cmp	r3, r1
 8012f5a:	bf01      	itttt	eq
 8012f5c:	6819      	ldreq	r1, [r3, #0]
 8012f5e:	685b      	ldreq	r3, [r3, #4]
 8012f60:	1809      	addeq	r1, r1, r0
 8012f62:	6021      	streq	r1, [r4, #0]
 8012f64:	e7ed      	b.n	8012f42 <_free_r+0x1e>
 8012f66:	461a      	mov	r2, r3
 8012f68:	685b      	ldr	r3, [r3, #4]
 8012f6a:	b10b      	cbz	r3, 8012f70 <_free_r+0x4c>
 8012f6c:	42a3      	cmp	r3, r4
 8012f6e:	d9fa      	bls.n	8012f66 <_free_r+0x42>
 8012f70:	6811      	ldr	r1, [r2, #0]
 8012f72:	1850      	adds	r0, r2, r1
 8012f74:	42a0      	cmp	r0, r4
 8012f76:	d10b      	bne.n	8012f90 <_free_r+0x6c>
 8012f78:	6820      	ldr	r0, [r4, #0]
 8012f7a:	4401      	add	r1, r0
 8012f7c:	1850      	adds	r0, r2, r1
 8012f7e:	4283      	cmp	r3, r0
 8012f80:	6011      	str	r1, [r2, #0]
 8012f82:	d1e0      	bne.n	8012f46 <_free_r+0x22>
 8012f84:	6818      	ldr	r0, [r3, #0]
 8012f86:	685b      	ldr	r3, [r3, #4]
 8012f88:	6053      	str	r3, [r2, #4]
 8012f8a:	4408      	add	r0, r1
 8012f8c:	6010      	str	r0, [r2, #0]
 8012f8e:	e7da      	b.n	8012f46 <_free_r+0x22>
 8012f90:	d902      	bls.n	8012f98 <_free_r+0x74>
 8012f92:	230c      	movs	r3, #12
 8012f94:	602b      	str	r3, [r5, #0]
 8012f96:	e7d6      	b.n	8012f46 <_free_r+0x22>
 8012f98:	6820      	ldr	r0, [r4, #0]
 8012f9a:	1821      	adds	r1, r4, r0
 8012f9c:	428b      	cmp	r3, r1
 8012f9e:	bf04      	itt	eq
 8012fa0:	6819      	ldreq	r1, [r3, #0]
 8012fa2:	685b      	ldreq	r3, [r3, #4]
 8012fa4:	6063      	str	r3, [r4, #4]
 8012fa6:	bf04      	itt	eq
 8012fa8:	1809      	addeq	r1, r1, r0
 8012faa:	6021      	streq	r1, [r4, #0]
 8012fac:	6054      	str	r4, [r2, #4]
 8012fae:	e7ca      	b.n	8012f46 <_free_r+0x22>
 8012fb0:	bd38      	pop	{r3, r4, r5, pc}
 8012fb2:	bf00      	nop
 8012fb4:	20005264 	.word	0x20005264

08012fb8 <sbrk_aligned>:
 8012fb8:	b570      	push	{r4, r5, r6, lr}
 8012fba:	4e0f      	ldr	r6, [pc, #60]	@ (8012ff8 <sbrk_aligned+0x40>)
 8012fbc:	460c      	mov	r4, r1
 8012fbe:	6831      	ldr	r1, [r6, #0]
 8012fc0:	4605      	mov	r5, r0
 8012fc2:	b911      	cbnz	r1, 8012fca <sbrk_aligned+0x12>
 8012fc4:	f000 ff36 	bl	8013e34 <_sbrk_r>
 8012fc8:	6030      	str	r0, [r6, #0]
 8012fca:	4621      	mov	r1, r4
 8012fcc:	4628      	mov	r0, r5
 8012fce:	f000 ff31 	bl	8013e34 <_sbrk_r>
 8012fd2:	1c43      	adds	r3, r0, #1
 8012fd4:	d103      	bne.n	8012fde <sbrk_aligned+0x26>
 8012fd6:	f04f 34ff 	mov.w	r4, #4294967295
 8012fda:	4620      	mov	r0, r4
 8012fdc:	bd70      	pop	{r4, r5, r6, pc}
 8012fde:	1cc4      	adds	r4, r0, #3
 8012fe0:	f024 0403 	bic.w	r4, r4, #3
 8012fe4:	42a0      	cmp	r0, r4
 8012fe6:	d0f8      	beq.n	8012fda <sbrk_aligned+0x22>
 8012fe8:	1a21      	subs	r1, r4, r0
 8012fea:	4628      	mov	r0, r5
 8012fec:	f000 ff22 	bl	8013e34 <_sbrk_r>
 8012ff0:	3001      	adds	r0, #1
 8012ff2:	d1f2      	bne.n	8012fda <sbrk_aligned+0x22>
 8012ff4:	e7ef      	b.n	8012fd6 <sbrk_aligned+0x1e>
 8012ff6:	bf00      	nop
 8012ff8:	20005260 	.word	0x20005260

08012ffc <_malloc_r>:
 8012ffc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8013000:	1ccd      	adds	r5, r1, #3
 8013002:	f025 0503 	bic.w	r5, r5, #3
 8013006:	3508      	adds	r5, #8
 8013008:	2d0c      	cmp	r5, #12
 801300a:	bf38      	it	cc
 801300c:	250c      	movcc	r5, #12
 801300e:	2d00      	cmp	r5, #0
 8013010:	4606      	mov	r6, r0
 8013012:	db01      	blt.n	8013018 <_malloc_r+0x1c>
 8013014:	42a9      	cmp	r1, r5
 8013016:	d904      	bls.n	8013022 <_malloc_r+0x26>
 8013018:	230c      	movs	r3, #12
 801301a:	6033      	str	r3, [r6, #0]
 801301c:	2000      	movs	r0, #0
 801301e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8013022:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80130f8 <_malloc_r+0xfc>
 8013026:	f000 f869 	bl	80130fc <__malloc_lock>
 801302a:	f8d8 3000 	ldr.w	r3, [r8]
 801302e:	461c      	mov	r4, r3
 8013030:	bb44      	cbnz	r4, 8013084 <_malloc_r+0x88>
 8013032:	4629      	mov	r1, r5
 8013034:	4630      	mov	r0, r6
 8013036:	f7ff ffbf 	bl	8012fb8 <sbrk_aligned>
 801303a:	1c43      	adds	r3, r0, #1
 801303c:	4604      	mov	r4, r0
 801303e:	d158      	bne.n	80130f2 <_malloc_r+0xf6>
 8013040:	f8d8 4000 	ldr.w	r4, [r8]
 8013044:	4627      	mov	r7, r4
 8013046:	2f00      	cmp	r7, #0
 8013048:	d143      	bne.n	80130d2 <_malloc_r+0xd6>
 801304a:	2c00      	cmp	r4, #0
 801304c:	d04b      	beq.n	80130e6 <_malloc_r+0xea>
 801304e:	6823      	ldr	r3, [r4, #0]
 8013050:	4639      	mov	r1, r7
 8013052:	4630      	mov	r0, r6
 8013054:	eb04 0903 	add.w	r9, r4, r3
 8013058:	f000 feec 	bl	8013e34 <_sbrk_r>
 801305c:	4581      	cmp	r9, r0
 801305e:	d142      	bne.n	80130e6 <_malloc_r+0xea>
 8013060:	6821      	ldr	r1, [r4, #0]
 8013062:	1a6d      	subs	r5, r5, r1
 8013064:	4629      	mov	r1, r5
 8013066:	4630      	mov	r0, r6
 8013068:	f7ff ffa6 	bl	8012fb8 <sbrk_aligned>
 801306c:	3001      	adds	r0, #1
 801306e:	d03a      	beq.n	80130e6 <_malloc_r+0xea>
 8013070:	6823      	ldr	r3, [r4, #0]
 8013072:	442b      	add	r3, r5
 8013074:	6023      	str	r3, [r4, #0]
 8013076:	f8d8 3000 	ldr.w	r3, [r8]
 801307a:	685a      	ldr	r2, [r3, #4]
 801307c:	bb62      	cbnz	r2, 80130d8 <_malloc_r+0xdc>
 801307e:	f8c8 7000 	str.w	r7, [r8]
 8013082:	e00f      	b.n	80130a4 <_malloc_r+0xa8>
 8013084:	6822      	ldr	r2, [r4, #0]
 8013086:	1b52      	subs	r2, r2, r5
 8013088:	d420      	bmi.n	80130cc <_malloc_r+0xd0>
 801308a:	2a0b      	cmp	r2, #11
 801308c:	d917      	bls.n	80130be <_malloc_r+0xc2>
 801308e:	1961      	adds	r1, r4, r5
 8013090:	42a3      	cmp	r3, r4
 8013092:	6025      	str	r5, [r4, #0]
 8013094:	bf18      	it	ne
 8013096:	6059      	strne	r1, [r3, #4]
 8013098:	6863      	ldr	r3, [r4, #4]
 801309a:	bf08      	it	eq
 801309c:	f8c8 1000 	streq.w	r1, [r8]
 80130a0:	5162      	str	r2, [r4, r5]
 80130a2:	604b      	str	r3, [r1, #4]
 80130a4:	4630      	mov	r0, r6
 80130a6:	f000 f82f 	bl	8013108 <__malloc_unlock>
 80130aa:	f104 000b 	add.w	r0, r4, #11
 80130ae:	1d23      	adds	r3, r4, #4
 80130b0:	f020 0007 	bic.w	r0, r0, #7
 80130b4:	1ac2      	subs	r2, r0, r3
 80130b6:	bf1c      	itt	ne
 80130b8:	1a1b      	subne	r3, r3, r0
 80130ba:	50a3      	strne	r3, [r4, r2]
 80130bc:	e7af      	b.n	801301e <_malloc_r+0x22>
 80130be:	6862      	ldr	r2, [r4, #4]
 80130c0:	42a3      	cmp	r3, r4
 80130c2:	bf0c      	ite	eq
 80130c4:	f8c8 2000 	streq.w	r2, [r8]
 80130c8:	605a      	strne	r2, [r3, #4]
 80130ca:	e7eb      	b.n	80130a4 <_malloc_r+0xa8>
 80130cc:	4623      	mov	r3, r4
 80130ce:	6864      	ldr	r4, [r4, #4]
 80130d0:	e7ae      	b.n	8013030 <_malloc_r+0x34>
 80130d2:	463c      	mov	r4, r7
 80130d4:	687f      	ldr	r7, [r7, #4]
 80130d6:	e7b6      	b.n	8013046 <_malloc_r+0x4a>
 80130d8:	461a      	mov	r2, r3
 80130da:	685b      	ldr	r3, [r3, #4]
 80130dc:	42a3      	cmp	r3, r4
 80130de:	d1fb      	bne.n	80130d8 <_malloc_r+0xdc>
 80130e0:	2300      	movs	r3, #0
 80130e2:	6053      	str	r3, [r2, #4]
 80130e4:	e7de      	b.n	80130a4 <_malloc_r+0xa8>
 80130e6:	230c      	movs	r3, #12
 80130e8:	6033      	str	r3, [r6, #0]
 80130ea:	4630      	mov	r0, r6
 80130ec:	f000 f80c 	bl	8013108 <__malloc_unlock>
 80130f0:	e794      	b.n	801301c <_malloc_r+0x20>
 80130f2:	6005      	str	r5, [r0, #0]
 80130f4:	e7d6      	b.n	80130a4 <_malloc_r+0xa8>
 80130f6:	bf00      	nop
 80130f8:	20005264 	.word	0x20005264

080130fc <__malloc_lock>:
 80130fc:	4801      	ldr	r0, [pc, #4]	@ (8013104 <__malloc_lock+0x8>)
 80130fe:	f7ff bef9 	b.w	8012ef4 <__retarget_lock_acquire_recursive>
 8013102:	bf00      	nop
 8013104:	2000525c 	.word	0x2000525c

08013108 <__malloc_unlock>:
 8013108:	4801      	ldr	r0, [pc, #4]	@ (8013110 <__malloc_unlock+0x8>)
 801310a:	f7ff bef4 	b.w	8012ef6 <__retarget_lock_release_recursive>
 801310e:	bf00      	nop
 8013110:	2000525c 	.word	0x2000525c

08013114 <__ssputs_r>:
 8013114:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8013118:	688e      	ldr	r6, [r1, #8]
 801311a:	461f      	mov	r7, r3
 801311c:	42be      	cmp	r6, r7
 801311e:	680b      	ldr	r3, [r1, #0]
 8013120:	4682      	mov	sl, r0
 8013122:	460c      	mov	r4, r1
 8013124:	4690      	mov	r8, r2
 8013126:	d82d      	bhi.n	8013184 <__ssputs_r+0x70>
 8013128:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 801312c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8013130:	d026      	beq.n	8013180 <__ssputs_r+0x6c>
 8013132:	6965      	ldr	r5, [r4, #20]
 8013134:	6909      	ldr	r1, [r1, #16]
 8013136:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801313a:	eba3 0901 	sub.w	r9, r3, r1
 801313e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8013142:	1c7b      	adds	r3, r7, #1
 8013144:	444b      	add	r3, r9
 8013146:	106d      	asrs	r5, r5, #1
 8013148:	429d      	cmp	r5, r3
 801314a:	bf38      	it	cc
 801314c:	461d      	movcc	r5, r3
 801314e:	0553      	lsls	r3, r2, #21
 8013150:	d527      	bpl.n	80131a2 <__ssputs_r+0x8e>
 8013152:	4629      	mov	r1, r5
 8013154:	f7ff ff52 	bl	8012ffc <_malloc_r>
 8013158:	4606      	mov	r6, r0
 801315a:	b360      	cbz	r0, 80131b6 <__ssputs_r+0xa2>
 801315c:	6921      	ldr	r1, [r4, #16]
 801315e:	464a      	mov	r2, r9
 8013160:	f7ff fed2 	bl	8012f08 <memcpy>
 8013164:	89a3      	ldrh	r3, [r4, #12]
 8013166:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 801316a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801316e:	81a3      	strh	r3, [r4, #12]
 8013170:	6126      	str	r6, [r4, #16]
 8013172:	6165      	str	r5, [r4, #20]
 8013174:	444e      	add	r6, r9
 8013176:	eba5 0509 	sub.w	r5, r5, r9
 801317a:	6026      	str	r6, [r4, #0]
 801317c:	60a5      	str	r5, [r4, #8]
 801317e:	463e      	mov	r6, r7
 8013180:	42be      	cmp	r6, r7
 8013182:	d900      	bls.n	8013186 <__ssputs_r+0x72>
 8013184:	463e      	mov	r6, r7
 8013186:	6820      	ldr	r0, [r4, #0]
 8013188:	4632      	mov	r2, r6
 801318a:	4641      	mov	r1, r8
 801318c:	f000 fe37 	bl	8013dfe <memmove>
 8013190:	68a3      	ldr	r3, [r4, #8]
 8013192:	1b9b      	subs	r3, r3, r6
 8013194:	60a3      	str	r3, [r4, #8]
 8013196:	6823      	ldr	r3, [r4, #0]
 8013198:	4433      	add	r3, r6
 801319a:	6023      	str	r3, [r4, #0]
 801319c:	2000      	movs	r0, #0
 801319e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80131a2:	462a      	mov	r2, r5
 80131a4:	f000 fe56 	bl	8013e54 <_realloc_r>
 80131a8:	4606      	mov	r6, r0
 80131aa:	2800      	cmp	r0, #0
 80131ac:	d1e0      	bne.n	8013170 <__ssputs_r+0x5c>
 80131ae:	6921      	ldr	r1, [r4, #16]
 80131b0:	4650      	mov	r0, sl
 80131b2:	f7ff feb7 	bl	8012f24 <_free_r>
 80131b6:	230c      	movs	r3, #12
 80131b8:	f8ca 3000 	str.w	r3, [sl]
 80131bc:	89a3      	ldrh	r3, [r4, #12]
 80131be:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80131c2:	81a3      	strh	r3, [r4, #12]
 80131c4:	f04f 30ff 	mov.w	r0, #4294967295
 80131c8:	e7e9      	b.n	801319e <__ssputs_r+0x8a>
	...

080131cc <_svfiprintf_r>:
 80131cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80131d0:	4698      	mov	r8, r3
 80131d2:	898b      	ldrh	r3, [r1, #12]
 80131d4:	061b      	lsls	r3, r3, #24
 80131d6:	b09d      	sub	sp, #116	@ 0x74
 80131d8:	4607      	mov	r7, r0
 80131da:	460d      	mov	r5, r1
 80131dc:	4614      	mov	r4, r2
 80131de:	d510      	bpl.n	8013202 <_svfiprintf_r+0x36>
 80131e0:	690b      	ldr	r3, [r1, #16]
 80131e2:	b973      	cbnz	r3, 8013202 <_svfiprintf_r+0x36>
 80131e4:	2140      	movs	r1, #64	@ 0x40
 80131e6:	f7ff ff09 	bl	8012ffc <_malloc_r>
 80131ea:	6028      	str	r0, [r5, #0]
 80131ec:	6128      	str	r0, [r5, #16]
 80131ee:	b930      	cbnz	r0, 80131fe <_svfiprintf_r+0x32>
 80131f0:	230c      	movs	r3, #12
 80131f2:	603b      	str	r3, [r7, #0]
 80131f4:	f04f 30ff 	mov.w	r0, #4294967295
 80131f8:	b01d      	add	sp, #116	@ 0x74
 80131fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80131fe:	2340      	movs	r3, #64	@ 0x40
 8013200:	616b      	str	r3, [r5, #20]
 8013202:	2300      	movs	r3, #0
 8013204:	9309      	str	r3, [sp, #36]	@ 0x24
 8013206:	2320      	movs	r3, #32
 8013208:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 801320c:	f8cd 800c 	str.w	r8, [sp, #12]
 8013210:	2330      	movs	r3, #48	@ 0x30
 8013212:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 80133b0 <_svfiprintf_r+0x1e4>
 8013216:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 801321a:	f04f 0901 	mov.w	r9, #1
 801321e:	4623      	mov	r3, r4
 8013220:	469a      	mov	sl, r3
 8013222:	f813 2b01 	ldrb.w	r2, [r3], #1
 8013226:	b10a      	cbz	r2, 801322c <_svfiprintf_r+0x60>
 8013228:	2a25      	cmp	r2, #37	@ 0x25
 801322a:	d1f9      	bne.n	8013220 <_svfiprintf_r+0x54>
 801322c:	ebba 0b04 	subs.w	fp, sl, r4
 8013230:	d00b      	beq.n	801324a <_svfiprintf_r+0x7e>
 8013232:	465b      	mov	r3, fp
 8013234:	4622      	mov	r2, r4
 8013236:	4629      	mov	r1, r5
 8013238:	4638      	mov	r0, r7
 801323a:	f7ff ff6b 	bl	8013114 <__ssputs_r>
 801323e:	3001      	adds	r0, #1
 8013240:	f000 80a7 	beq.w	8013392 <_svfiprintf_r+0x1c6>
 8013244:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8013246:	445a      	add	r2, fp
 8013248:	9209      	str	r2, [sp, #36]	@ 0x24
 801324a:	f89a 3000 	ldrb.w	r3, [sl]
 801324e:	2b00      	cmp	r3, #0
 8013250:	f000 809f 	beq.w	8013392 <_svfiprintf_r+0x1c6>
 8013254:	2300      	movs	r3, #0
 8013256:	f04f 32ff 	mov.w	r2, #4294967295
 801325a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801325e:	f10a 0a01 	add.w	sl, sl, #1
 8013262:	9304      	str	r3, [sp, #16]
 8013264:	9307      	str	r3, [sp, #28]
 8013266:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 801326a:	931a      	str	r3, [sp, #104]	@ 0x68
 801326c:	4654      	mov	r4, sl
 801326e:	2205      	movs	r2, #5
 8013270:	f814 1b01 	ldrb.w	r1, [r4], #1
 8013274:	484e      	ldr	r0, [pc, #312]	@ (80133b0 <_svfiprintf_r+0x1e4>)
 8013276:	f7ec ffc3 	bl	8000200 <memchr>
 801327a:	9a04      	ldr	r2, [sp, #16]
 801327c:	b9d8      	cbnz	r0, 80132b6 <_svfiprintf_r+0xea>
 801327e:	06d0      	lsls	r0, r2, #27
 8013280:	bf44      	itt	mi
 8013282:	2320      	movmi	r3, #32
 8013284:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8013288:	0711      	lsls	r1, r2, #28
 801328a:	bf44      	itt	mi
 801328c:	232b      	movmi	r3, #43	@ 0x2b
 801328e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8013292:	f89a 3000 	ldrb.w	r3, [sl]
 8013296:	2b2a      	cmp	r3, #42	@ 0x2a
 8013298:	d015      	beq.n	80132c6 <_svfiprintf_r+0xfa>
 801329a:	9a07      	ldr	r2, [sp, #28]
 801329c:	4654      	mov	r4, sl
 801329e:	2000      	movs	r0, #0
 80132a0:	f04f 0c0a 	mov.w	ip, #10
 80132a4:	4621      	mov	r1, r4
 80132a6:	f811 3b01 	ldrb.w	r3, [r1], #1
 80132aa:	3b30      	subs	r3, #48	@ 0x30
 80132ac:	2b09      	cmp	r3, #9
 80132ae:	d94b      	bls.n	8013348 <_svfiprintf_r+0x17c>
 80132b0:	b1b0      	cbz	r0, 80132e0 <_svfiprintf_r+0x114>
 80132b2:	9207      	str	r2, [sp, #28]
 80132b4:	e014      	b.n	80132e0 <_svfiprintf_r+0x114>
 80132b6:	eba0 0308 	sub.w	r3, r0, r8
 80132ba:	fa09 f303 	lsl.w	r3, r9, r3
 80132be:	4313      	orrs	r3, r2
 80132c0:	9304      	str	r3, [sp, #16]
 80132c2:	46a2      	mov	sl, r4
 80132c4:	e7d2      	b.n	801326c <_svfiprintf_r+0xa0>
 80132c6:	9b03      	ldr	r3, [sp, #12]
 80132c8:	1d19      	adds	r1, r3, #4
 80132ca:	681b      	ldr	r3, [r3, #0]
 80132cc:	9103      	str	r1, [sp, #12]
 80132ce:	2b00      	cmp	r3, #0
 80132d0:	bfbb      	ittet	lt
 80132d2:	425b      	neglt	r3, r3
 80132d4:	f042 0202 	orrlt.w	r2, r2, #2
 80132d8:	9307      	strge	r3, [sp, #28]
 80132da:	9307      	strlt	r3, [sp, #28]
 80132dc:	bfb8      	it	lt
 80132de:	9204      	strlt	r2, [sp, #16]
 80132e0:	7823      	ldrb	r3, [r4, #0]
 80132e2:	2b2e      	cmp	r3, #46	@ 0x2e
 80132e4:	d10a      	bne.n	80132fc <_svfiprintf_r+0x130>
 80132e6:	7863      	ldrb	r3, [r4, #1]
 80132e8:	2b2a      	cmp	r3, #42	@ 0x2a
 80132ea:	d132      	bne.n	8013352 <_svfiprintf_r+0x186>
 80132ec:	9b03      	ldr	r3, [sp, #12]
 80132ee:	1d1a      	adds	r2, r3, #4
 80132f0:	681b      	ldr	r3, [r3, #0]
 80132f2:	9203      	str	r2, [sp, #12]
 80132f4:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80132f8:	3402      	adds	r4, #2
 80132fa:	9305      	str	r3, [sp, #20]
 80132fc:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 80133c0 <_svfiprintf_r+0x1f4>
 8013300:	7821      	ldrb	r1, [r4, #0]
 8013302:	2203      	movs	r2, #3
 8013304:	4650      	mov	r0, sl
 8013306:	f7ec ff7b 	bl	8000200 <memchr>
 801330a:	b138      	cbz	r0, 801331c <_svfiprintf_r+0x150>
 801330c:	9b04      	ldr	r3, [sp, #16]
 801330e:	eba0 000a 	sub.w	r0, r0, sl
 8013312:	2240      	movs	r2, #64	@ 0x40
 8013314:	4082      	lsls	r2, r0
 8013316:	4313      	orrs	r3, r2
 8013318:	3401      	adds	r4, #1
 801331a:	9304      	str	r3, [sp, #16]
 801331c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8013320:	4824      	ldr	r0, [pc, #144]	@ (80133b4 <_svfiprintf_r+0x1e8>)
 8013322:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8013326:	2206      	movs	r2, #6
 8013328:	f7ec ff6a 	bl	8000200 <memchr>
 801332c:	2800      	cmp	r0, #0
 801332e:	d036      	beq.n	801339e <_svfiprintf_r+0x1d2>
 8013330:	4b21      	ldr	r3, [pc, #132]	@ (80133b8 <_svfiprintf_r+0x1ec>)
 8013332:	bb1b      	cbnz	r3, 801337c <_svfiprintf_r+0x1b0>
 8013334:	9b03      	ldr	r3, [sp, #12]
 8013336:	3307      	adds	r3, #7
 8013338:	f023 0307 	bic.w	r3, r3, #7
 801333c:	3308      	adds	r3, #8
 801333e:	9303      	str	r3, [sp, #12]
 8013340:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8013342:	4433      	add	r3, r6
 8013344:	9309      	str	r3, [sp, #36]	@ 0x24
 8013346:	e76a      	b.n	801321e <_svfiprintf_r+0x52>
 8013348:	fb0c 3202 	mla	r2, ip, r2, r3
 801334c:	460c      	mov	r4, r1
 801334e:	2001      	movs	r0, #1
 8013350:	e7a8      	b.n	80132a4 <_svfiprintf_r+0xd8>
 8013352:	2300      	movs	r3, #0
 8013354:	3401      	adds	r4, #1
 8013356:	9305      	str	r3, [sp, #20]
 8013358:	4619      	mov	r1, r3
 801335a:	f04f 0c0a 	mov.w	ip, #10
 801335e:	4620      	mov	r0, r4
 8013360:	f810 2b01 	ldrb.w	r2, [r0], #1
 8013364:	3a30      	subs	r2, #48	@ 0x30
 8013366:	2a09      	cmp	r2, #9
 8013368:	d903      	bls.n	8013372 <_svfiprintf_r+0x1a6>
 801336a:	2b00      	cmp	r3, #0
 801336c:	d0c6      	beq.n	80132fc <_svfiprintf_r+0x130>
 801336e:	9105      	str	r1, [sp, #20]
 8013370:	e7c4      	b.n	80132fc <_svfiprintf_r+0x130>
 8013372:	fb0c 2101 	mla	r1, ip, r1, r2
 8013376:	4604      	mov	r4, r0
 8013378:	2301      	movs	r3, #1
 801337a:	e7f0      	b.n	801335e <_svfiprintf_r+0x192>
 801337c:	ab03      	add	r3, sp, #12
 801337e:	9300      	str	r3, [sp, #0]
 8013380:	462a      	mov	r2, r5
 8013382:	4b0e      	ldr	r3, [pc, #56]	@ (80133bc <_svfiprintf_r+0x1f0>)
 8013384:	a904      	add	r1, sp, #16
 8013386:	4638      	mov	r0, r7
 8013388:	f3af 8000 	nop.w
 801338c:	1c42      	adds	r2, r0, #1
 801338e:	4606      	mov	r6, r0
 8013390:	d1d6      	bne.n	8013340 <_svfiprintf_r+0x174>
 8013392:	89ab      	ldrh	r3, [r5, #12]
 8013394:	065b      	lsls	r3, r3, #25
 8013396:	f53f af2d 	bmi.w	80131f4 <_svfiprintf_r+0x28>
 801339a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801339c:	e72c      	b.n	80131f8 <_svfiprintf_r+0x2c>
 801339e:	ab03      	add	r3, sp, #12
 80133a0:	9300      	str	r3, [sp, #0]
 80133a2:	462a      	mov	r2, r5
 80133a4:	4b05      	ldr	r3, [pc, #20]	@ (80133bc <_svfiprintf_r+0x1f0>)
 80133a6:	a904      	add	r1, sp, #16
 80133a8:	4638      	mov	r0, r7
 80133aa:	f000 fa49 	bl	8013840 <_printf_i>
 80133ae:	e7ed      	b.n	801338c <_svfiprintf_r+0x1c0>
 80133b0:	080145bf 	.word	0x080145bf
 80133b4:	080145c9 	.word	0x080145c9
 80133b8:	00000000 	.word	0x00000000
 80133bc:	08013115 	.word	0x08013115
 80133c0:	080145c5 	.word	0x080145c5

080133c4 <_sungetc_r>:
 80133c4:	b538      	push	{r3, r4, r5, lr}
 80133c6:	1c4b      	adds	r3, r1, #1
 80133c8:	4614      	mov	r4, r2
 80133ca:	d103      	bne.n	80133d4 <_sungetc_r+0x10>
 80133cc:	f04f 35ff 	mov.w	r5, #4294967295
 80133d0:	4628      	mov	r0, r5
 80133d2:	bd38      	pop	{r3, r4, r5, pc}
 80133d4:	8993      	ldrh	r3, [r2, #12]
 80133d6:	f023 0320 	bic.w	r3, r3, #32
 80133da:	8193      	strh	r3, [r2, #12]
 80133dc:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80133de:	6852      	ldr	r2, [r2, #4]
 80133e0:	b2cd      	uxtb	r5, r1
 80133e2:	b18b      	cbz	r3, 8013408 <_sungetc_r+0x44>
 80133e4:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 80133e6:	4293      	cmp	r3, r2
 80133e8:	dd08      	ble.n	80133fc <_sungetc_r+0x38>
 80133ea:	6823      	ldr	r3, [r4, #0]
 80133ec:	1e5a      	subs	r2, r3, #1
 80133ee:	6022      	str	r2, [r4, #0]
 80133f0:	f803 5c01 	strb.w	r5, [r3, #-1]
 80133f4:	6863      	ldr	r3, [r4, #4]
 80133f6:	3301      	adds	r3, #1
 80133f8:	6063      	str	r3, [r4, #4]
 80133fa:	e7e9      	b.n	80133d0 <_sungetc_r+0xc>
 80133fc:	4621      	mov	r1, r4
 80133fe:	f000 fcc4 	bl	8013d8a <__submore>
 8013402:	2800      	cmp	r0, #0
 8013404:	d0f1      	beq.n	80133ea <_sungetc_r+0x26>
 8013406:	e7e1      	b.n	80133cc <_sungetc_r+0x8>
 8013408:	6921      	ldr	r1, [r4, #16]
 801340a:	6823      	ldr	r3, [r4, #0]
 801340c:	b151      	cbz	r1, 8013424 <_sungetc_r+0x60>
 801340e:	4299      	cmp	r1, r3
 8013410:	d208      	bcs.n	8013424 <_sungetc_r+0x60>
 8013412:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 8013416:	42a9      	cmp	r1, r5
 8013418:	d104      	bne.n	8013424 <_sungetc_r+0x60>
 801341a:	3b01      	subs	r3, #1
 801341c:	3201      	adds	r2, #1
 801341e:	6023      	str	r3, [r4, #0]
 8013420:	6062      	str	r2, [r4, #4]
 8013422:	e7d5      	b.n	80133d0 <_sungetc_r+0xc>
 8013424:	e9c4 320f 	strd	r3, r2, [r4, #60]	@ 0x3c
 8013428:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 801342c:	6363      	str	r3, [r4, #52]	@ 0x34
 801342e:	2303      	movs	r3, #3
 8013430:	63a3      	str	r3, [r4, #56]	@ 0x38
 8013432:	4623      	mov	r3, r4
 8013434:	f803 5f46 	strb.w	r5, [r3, #70]!
 8013438:	6023      	str	r3, [r4, #0]
 801343a:	2301      	movs	r3, #1
 801343c:	e7dc      	b.n	80133f8 <_sungetc_r+0x34>

0801343e <__ssrefill_r>:
 801343e:	b510      	push	{r4, lr}
 8013440:	460c      	mov	r4, r1
 8013442:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 8013444:	b169      	cbz	r1, 8013462 <__ssrefill_r+0x24>
 8013446:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 801344a:	4299      	cmp	r1, r3
 801344c:	d001      	beq.n	8013452 <__ssrefill_r+0x14>
 801344e:	f7ff fd69 	bl	8012f24 <_free_r>
 8013452:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8013454:	6063      	str	r3, [r4, #4]
 8013456:	2000      	movs	r0, #0
 8013458:	6360      	str	r0, [r4, #52]	@ 0x34
 801345a:	b113      	cbz	r3, 8013462 <__ssrefill_r+0x24>
 801345c:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 801345e:	6023      	str	r3, [r4, #0]
 8013460:	bd10      	pop	{r4, pc}
 8013462:	6923      	ldr	r3, [r4, #16]
 8013464:	6023      	str	r3, [r4, #0]
 8013466:	2300      	movs	r3, #0
 8013468:	6063      	str	r3, [r4, #4]
 801346a:	89a3      	ldrh	r3, [r4, #12]
 801346c:	f043 0320 	orr.w	r3, r3, #32
 8013470:	81a3      	strh	r3, [r4, #12]
 8013472:	f04f 30ff 	mov.w	r0, #4294967295
 8013476:	e7f3      	b.n	8013460 <__ssrefill_r+0x22>

08013478 <__ssvfiscanf_r>:
 8013478:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801347c:	460c      	mov	r4, r1
 801347e:	f5ad 7d23 	sub.w	sp, sp, #652	@ 0x28c
 8013482:	2100      	movs	r1, #0
 8013484:	e9cd 1144 	strd	r1, r1, [sp, #272]	@ 0x110
 8013488:	49a6      	ldr	r1, [pc, #664]	@ (8013724 <__ssvfiscanf_r+0x2ac>)
 801348a:	91a0      	str	r1, [sp, #640]	@ 0x280
 801348c:	f10d 0804 	add.w	r8, sp, #4
 8013490:	49a5      	ldr	r1, [pc, #660]	@ (8013728 <__ssvfiscanf_r+0x2b0>)
 8013492:	4fa6      	ldr	r7, [pc, #664]	@ (801372c <__ssvfiscanf_r+0x2b4>)
 8013494:	f8cd 8118 	str.w	r8, [sp, #280]	@ 0x118
 8013498:	4606      	mov	r6, r0
 801349a:	91a1      	str	r1, [sp, #644]	@ 0x284
 801349c:	9300      	str	r3, [sp, #0]
 801349e:	f892 9000 	ldrb.w	r9, [r2]
 80134a2:	f1b9 0f00 	cmp.w	r9, #0
 80134a6:	f000 8158 	beq.w	801375a <__ssvfiscanf_r+0x2e2>
 80134aa:	f817 3009 	ldrb.w	r3, [r7, r9]
 80134ae:	f013 0308 	ands.w	r3, r3, #8
 80134b2:	f102 0501 	add.w	r5, r2, #1
 80134b6:	d019      	beq.n	80134ec <__ssvfiscanf_r+0x74>
 80134b8:	6863      	ldr	r3, [r4, #4]
 80134ba:	2b00      	cmp	r3, #0
 80134bc:	dd0f      	ble.n	80134de <__ssvfiscanf_r+0x66>
 80134be:	6823      	ldr	r3, [r4, #0]
 80134c0:	781a      	ldrb	r2, [r3, #0]
 80134c2:	5cba      	ldrb	r2, [r7, r2]
 80134c4:	0712      	lsls	r2, r2, #28
 80134c6:	d401      	bmi.n	80134cc <__ssvfiscanf_r+0x54>
 80134c8:	462a      	mov	r2, r5
 80134ca:	e7e8      	b.n	801349e <__ssvfiscanf_r+0x26>
 80134cc:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 80134ce:	3201      	adds	r2, #1
 80134d0:	9245      	str	r2, [sp, #276]	@ 0x114
 80134d2:	6862      	ldr	r2, [r4, #4]
 80134d4:	3301      	adds	r3, #1
 80134d6:	3a01      	subs	r2, #1
 80134d8:	6062      	str	r2, [r4, #4]
 80134da:	6023      	str	r3, [r4, #0]
 80134dc:	e7ec      	b.n	80134b8 <__ssvfiscanf_r+0x40>
 80134de:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 80134e0:	4621      	mov	r1, r4
 80134e2:	4630      	mov	r0, r6
 80134e4:	4798      	blx	r3
 80134e6:	2800      	cmp	r0, #0
 80134e8:	d0e9      	beq.n	80134be <__ssvfiscanf_r+0x46>
 80134ea:	e7ed      	b.n	80134c8 <__ssvfiscanf_r+0x50>
 80134ec:	f1b9 0f25 	cmp.w	r9, #37	@ 0x25
 80134f0:	f040 8085 	bne.w	80135fe <__ssvfiscanf_r+0x186>
 80134f4:	9341      	str	r3, [sp, #260]	@ 0x104
 80134f6:	9343      	str	r3, [sp, #268]	@ 0x10c
 80134f8:	7853      	ldrb	r3, [r2, #1]
 80134fa:	2b2a      	cmp	r3, #42	@ 0x2a
 80134fc:	bf02      	ittt	eq
 80134fe:	2310      	moveq	r3, #16
 8013500:	1c95      	addeq	r5, r2, #2
 8013502:	9341      	streq	r3, [sp, #260]	@ 0x104
 8013504:	220a      	movs	r2, #10
 8013506:	46aa      	mov	sl, r5
 8013508:	f81a 1b01 	ldrb.w	r1, [sl], #1
 801350c:	f1a1 0330 	sub.w	r3, r1, #48	@ 0x30
 8013510:	2b09      	cmp	r3, #9
 8013512:	d91e      	bls.n	8013552 <__ssvfiscanf_r+0xda>
 8013514:	f8df b218 	ldr.w	fp, [pc, #536]	@ 8013730 <__ssvfiscanf_r+0x2b8>
 8013518:	2203      	movs	r2, #3
 801351a:	4658      	mov	r0, fp
 801351c:	f7ec fe70 	bl	8000200 <memchr>
 8013520:	b138      	cbz	r0, 8013532 <__ssvfiscanf_r+0xba>
 8013522:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 8013524:	eba0 000b 	sub.w	r0, r0, fp
 8013528:	2301      	movs	r3, #1
 801352a:	4083      	lsls	r3, r0
 801352c:	4313      	orrs	r3, r2
 801352e:	9341      	str	r3, [sp, #260]	@ 0x104
 8013530:	4655      	mov	r5, sl
 8013532:	f815 3b01 	ldrb.w	r3, [r5], #1
 8013536:	2b78      	cmp	r3, #120	@ 0x78
 8013538:	d806      	bhi.n	8013548 <__ssvfiscanf_r+0xd0>
 801353a:	2b57      	cmp	r3, #87	@ 0x57
 801353c:	d810      	bhi.n	8013560 <__ssvfiscanf_r+0xe8>
 801353e:	2b25      	cmp	r3, #37	@ 0x25
 8013540:	d05d      	beq.n	80135fe <__ssvfiscanf_r+0x186>
 8013542:	d857      	bhi.n	80135f4 <__ssvfiscanf_r+0x17c>
 8013544:	2b00      	cmp	r3, #0
 8013546:	d075      	beq.n	8013634 <__ssvfiscanf_r+0x1bc>
 8013548:	2303      	movs	r3, #3
 801354a:	9347      	str	r3, [sp, #284]	@ 0x11c
 801354c:	230a      	movs	r3, #10
 801354e:	9342      	str	r3, [sp, #264]	@ 0x108
 8013550:	e088      	b.n	8013664 <__ssvfiscanf_r+0x1ec>
 8013552:	9b43      	ldr	r3, [sp, #268]	@ 0x10c
 8013554:	fb02 1103 	mla	r1, r2, r3, r1
 8013558:	3930      	subs	r1, #48	@ 0x30
 801355a:	9143      	str	r1, [sp, #268]	@ 0x10c
 801355c:	4655      	mov	r5, sl
 801355e:	e7d2      	b.n	8013506 <__ssvfiscanf_r+0x8e>
 8013560:	f1a3 0258 	sub.w	r2, r3, #88	@ 0x58
 8013564:	2a20      	cmp	r2, #32
 8013566:	d8ef      	bhi.n	8013548 <__ssvfiscanf_r+0xd0>
 8013568:	a101      	add	r1, pc, #4	@ (adr r1, 8013570 <__ssvfiscanf_r+0xf8>)
 801356a:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 801356e:	bf00      	nop
 8013570:	08013643 	.word	0x08013643
 8013574:	08013549 	.word	0x08013549
 8013578:	08013549 	.word	0x08013549
 801357c:	0801369d 	.word	0x0801369d
 8013580:	08013549 	.word	0x08013549
 8013584:	08013549 	.word	0x08013549
 8013588:	08013549 	.word	0x08013549
 801358c:	08013549 	.word	0x08013549
 8013590:	08013549 	.word	0x08013549
 8013594:	08013549 	.word	0x08013549
 8013598:	08013549 	.word	0x08013549
 801359c:	080136b3 	.word	0x080136b3
 80135a0:	08013699 	.word	0x08013699
 80135a4:	080135fb 	.word	0x080135fb
 80135a8:	080135fb 	.word	0x080135fb
 80135ac:	080135fb 	.word	0x080135fb
 80135b0:	08013549 	.word	0x08013549
 80135b4:	08013655 	.word	0x08013655
 80135b8:	08013549 	.word	0x08013549
 80135bc:	08013549 	.word	0x08013549
 80135c0:	08013549 	.word	0x08013549
 80135c4:	08013549 	.word	0x08013549
 80135c8:	080136c3 	.word	0x080136c3
 80135cc:	0801365d 	.word	0x0801365d
 80135d0:	0801363b 	.word	0x0801363b
 80135d4:	08013549 	.word	0x08013549
 80135d8:	08013549 	.word	0x08013549
 80135dc:	080136bf 	.word	0x080136bf
 80135e0:	08013549 	.word	0x08013549
 80135e4:	08013699 	.word	0x08013699
 80135e8:	08013549 	.word	0x08013549
 80135ec:	08013549 	.word	0x08013549
 80135f0:	08013643 	.word	0x08013643
 80135f4:	3b45      	subs	r3, #69	@ 0x45
 80135f6:	2b02      	cmp	r3, #2
 80135f8:	d8a6      	bhi.n	8013548 <__ssvfiscanf_r+0xd0>
 80135fa:	2305      	movs	r3, #5
 80135fc:	e031      	b.n	8013662 <__ssvfiscanf_r+0x1ea>
 80135fe:	6863      	ldr	r3, [r4, #4]
 8013600:	2b00      	cmp	r3, #0
 8013602:	dd0d      	ble.n	8013620 <__ssvfiscanf_r+0x1a8>
 8013604:	6823      	ldr	r3, [r4, #0]
 8013606:	781a      	ldrb	r2, [r3, #0]
 8013608:	454a      	cmp	r2, r9
 801360a:	f040 80a6 	bne.w	801375a <__ssvfiscanf_r+0x2e2>
 801360e:	3301      	adds	r3, #1
 8013610:	6862      	ldr	r2, [r4, #4]
 8013612:	6023      	str	r3, [r4, #0]
 8013614:	9b45      	ldr	r3, [sp, #276]	@ 0x114
 8013616:	3a01      	subs	r2, #1
 8013618:	3301      	adds	r3, #1
 801361a:	6062      	str	r2, [r4, #4]
 801361c:	9345      	str	r3, [sp, #276]	@ 0x114
 801361e:	e753      	b.n	80134c8 <__ssvfiscanf_r+0x50>
 8013620:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 8013622:	4621      	mov	r1, r4
 8013624:	4630      	mov	r0, r6
 8013626:	4798      	blx	r3
 8013628:	2800      	cmp	r0, #0
 801362a:	d0eb      	beq.n	8013604 <__ssvfiscanf_r+0x18c>
 801362c:	9844      	ldr	r0, [sp, #272]	@ 0x110
 801362e:	2800      	cmp	r0, #0
 8013630:	f040 808b 	bne.w	801374a <__ssvfiscanf_r+0x2d2>
 8013634:	f04f 30ff 	mov.w	r0, #4294967295
 8013638:	e08b      	b.n	8013752 <__ssvfiscanf_r+0x2da>
 801363a:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 801363c:	f042 0220 	orr.w	r2, r2, #32
 8013640:	9241      	str	r2, [sp, #260]	@ 0x104
 8013642:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 8013644:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8013648:	9241      	str	r2, [sp, #260]	@ 0x104
 801364a:	2210      	movs	r2, #16
 801364c:	2b6e      	cmp	r3, #110	@ 0x6e
 801364e:	9242      	str	r2, [sp, #264]	@ 0x108
 8013650:	d902      	bls.n	8013658 <__ssvfiscanf_r+0x1e0>
 8013652:	e005      	b.n	8013660 <__ssvfiscanf_r+0x1e8>
 8013654:	2300      	movs	r3, #0
 8013656:	9342      	str	r3, [sp, #264]	@ 0x108
 8013658:	2303      	movs	r3, #3
 801365a:	e002      	b.n	8013662 <__ssvfiscanf_r+0x1ea>
 801365c:	2308      	movs	r3, #8
 801365e:	9342      	str	r3, [sp, #264]	@ 0x108
 8013660:	2304      	movs	r3, #4
 8013662:	9347      	str	r3, [sp, #284]	@ 0x11c
 8013664:	6863      	ldr	r3, [r4, #4]
 8013666:	2b00      	cmp	r3, #0
 8013668:	dd39      	ble.n	80136de <__ssvfiscanf_r+0x266>
 801366a:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 801366c:	0659      	lsls	r1, r3, #25
 801366e:	d404      	bmi.n	801367a <__ssvfiscanf_r+0x202>
 8013670:	6823      	ldr	r3, [r4, #0]
 8013672:	781a      	ldrb	r2, [r3, #0]
 8013674:	5cba      	ldrb	r2, [r7, r2]
 8013676:	0712      	lsls	r2, r2, #28
 8013678:	d438      	bmi.n	80136ec <__ssvfiscanf_r+0x274>
 801367a:	9b47      	ldr	r3, [sp, #284]	@ 0x11c
 801367c:	2b02      	cmp	r3, #2
 801367e:	dc47      	bgt.n	8013710 <__ssvfiscanf_r+0x298>
 8013680:	466b      	mov	r3, sp
 8013682:	4622      	mov	r2, r4
 8013684:	a941      	add	r1, sp, #260	@ 0x104
 8013686:	4630      	mov	r0, r6
 8013688:	f000 f9f8 	bl	8013a7c <_scanf_chars>
 801368c:	2801      	cmp	r0, #1
 801368e:	d064      	beq.n	801375a <__ssvfiscanf_r+0x2e2>
 8013690:	2802      	cmp	r0, #2
 8013692:	f47f af19 	bne.w	80134c8 <__ssvfiscanf_r+0x50>
 8013696:	e7c9      	b.n	801362c <__ssvfiscanf_r+0x1b4>
 8013698:	220a      	movs	r2, #10
 801369a:	e7d7      	b.n	801364c <__ssvfiscanf_r+0x1d4>
 801369c:	4629      	mov	r1, r5
 801369e:	4640      	mov	r0, r8
 80136a0:	f000 fb3a 	bl	8013d18 <__sccl>
 80136a4:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 80136a6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80136aa:	9341      	str	r3, [sp, #260]	@ 0x104
 80136ac:	4605      	mov	r5, r0
 80136ae:	2301      	movs	r3, #1
 80136b0:	e7d7      	b.n	8013662 <__ssvfiscanf_r+0x1ea>
 80136b2:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 80136b4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80136b8:	9341      	str	r3, [sp, #260]	@ 0x104
 80136ba:	2300      	movs	r3, #0
 80136bc:	e7d1      	b.n	8013662 <__ssvfiscanf_r+0x1ea>
 80136be:	2302      	movs	r3, #2
 80136c0:	e7cf      	b.n	8013662 <__ssvfiscanf_r+0x1ea>
 80136c2:	9841      	ldr	r0, [sp, #260]	@ 0x104
 80136c4:	06c3      	lsls	r3, r0, #27
 80136c6:	f53f aeff 	bmi.w	80134c8 <__ssvfiscanf_r+0x50>
 80136ca:	9b00      	ldr	r3, [sp, #0]
 80136cc:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 80136ce:	1d19      	adds	r1, r3, #4
 80136d0:	9100      	str	r1, [sp, #0]
 80136d2:	681b      	ldr	r3, [r3, #0]
 80136d4:	07c0      	lsls	r0, r0, #31
 80136d6:	bf4c      	ite	mi
 80136d8:	801a      	strhmi	r2, [r3, #0]
 80136da:	601a      	strpl	r2, [r3, #0]
 80136dc:	e6f4      	b.n	80134c8 <__ssvfiscanf_r+0x50>
 80136de:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 80136e0:	4621      	mov	r1, r4
 80136e2:	4630      	mov	r0, r6
 80136e4:	4798      	blx	r3
 80136e6:	2800      	cmp	r0, #0
 80136e8:	d0bf      	beq.n	801366a <__ssvfiscanf_r+0x1f2>
 80136ea:	e79f      	b.n	801362c <__ssvfiscanf_r+0x1b4>
 80136ec:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 80136ee:	3201      	adds	r2, #1
 80136f0:	9245      	str	r2, [sp, #276]	@ 0x114
 80136f2:	6862      	ldr	r2, [r4, #4]
 80136f4:	3a01      	subs	r2, #1
 80136f6:	2a00      	cmp	r2, #0
 80136f8:	6062      	str	r2, [r4, #4]
 80136fa:	dd02      	ble.n	8013702 <__ssvfiscanf_r+0x28a>
 80136fc:	3301      	adds	r3, #1
 80136fe:	6023      	str	r3, [r4, #0]
 8013700:	e7b6      	b.n	8013670 <__ssvfiscanf_r+0x1f8>
 8013702:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 8013704:	4621      	mov	r1, r4
 8013706:	4630      	mov	r0, r6
 8013708:	4798      	blx	r3
 801370a:	2800      	cmp	r0, #0
 801370c:	d0b0      	beq.n	8013670 <__ssvfiscanf_r+0x1f8>
 801370e:	e78d      	b.n	801362c <__ssvfiscanf_r+0x1b4>
 8013710:	2b04      	cmp	r3, #4
 8013712:	dc0f      	bgt.n	8013734 <__ssvfiscanf_r+0x2bc>
 8013714:	466b      	mov	r3, sp
 8013716:	4622      	mov	r2, r4
 8013718:	a941      	add	r1, sp, #260	@ 0x104
 801371a:	4630      	mov	r0, r6
 801371c:	f000 fa08 	bl	8013b30 <_scanf_i>
 8013720:	e7b4      	b.n	801368c <__ssvfiscanf_r+0x214>
 8013722:	bf00      	nop
 8013724:	080133c5 	.word	0x080133c5
 8013728:	0801343f 	.word	0x0801343f
 801372c:	080144bf 	.word	0x080144bf
 8013730:	080145c5 	.word	0x080145c5
 8013734:	4b0a      	ldr	r3, [pc, #40]	@ (8013760 <__ssvfiscanf_r+0x2e8>)
 8013736:	2b00      	cmp	r3, #0
 8013738:	f43f aec6 	beq.w	80134c8 <__ssvfiscanf_r+0x50>
 801373c:	466b      	mov	r3, sp
 801373e:	4622      	mov	r2, r4
 8013740:	a941      	add	r1, sp, #260	@ 0x104
 8013742:	4630      	mov	r0, r6
 8013744:	f3af 8000 	nop.w
 8013748:	e7a0      	b.n	801368c <__ssvfiscanf_r+0x214>
 801374a:	89a3      	ldrh	r3, [r4, #12]
 801374c:	065b      	lsls	r3, r3, #25
 801374e:	f53f af71 	bmi.w	8013634 <__ssvfiscanf_r+0x1bc>
 8013752:	f50d 7d23 	add.w	sp, sp, #652	@ 0x28c
 8013756:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801375a:	9844      	ldr	r0, [sp, #272]	@ 0x110
 801375c:	e7f9      	b.n	8013752 <__ssvfiscanf_r+0x2da>
 801375e:	bf00      	nop
 8013760:	00000000 	.word	0x00000000

08013764 <_printf_common>:
 8013764:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8013768:	4616      	mov	r6, r2
 801376a:	4698      	mov	r8, r3
 801376c:	688a      	ldr	r2, [r1, #8]
 801376e:	690b      	ldr	r3, [r1, #16]
 8013770:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8013774:	4293      	cmp	r3, r2
 8013776:	bfb8      	it	lt
 8013778:	4613      	movlt	r3, r2
 801377a:	6033      	str	r3, [r6, #0]
 801377c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8013780:	4607      	mov	r7, r0
 8013782:	460c      	mov	r4, r1
 8013784:	b10a      	cbz	r2, 801378a <_printf_common+0x26>
 8013786:	3301      	adds	r3, #1
 8013788:	6033      	str	r3, [r6, #0]
 801378a:	6823      	ldr	r3, [r4, #0]
 801378c:	0699      	lsls	r1, r3, #26
 801378e:	bf42      	ittt	mi
 8013790:	6833      	ldrmi	r3, [r6, #0]
 8013792:	3302      	addmi	r3, #2
 8013794:	6033      	strmi	r3, [r6, #0]
 8013796:	6825      	ldr	r5, [r4, #0]
 8013798:	f015 0506 	ands.w	r5, r5, #6
 801379c:	d106      	bne.n	80137ac <_printf_common+0x48>
 801379e:	f104 0a19 	add.w	sl, r4, #25
 80137a2:	68e3      	ldr	r3, [r4, #12]
 80137a4:	6832      	ldr	r2, [r6, #0]
 80137a6:	1a9b      	subs	r3, r3, r2
 80137a8:	42ab      	cmp	r3, r5
 80137aa:	dc26      	bgt.n	80137fa <_printf_common+0x96>
 80137ac:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80137b0:	6822      	ldr	r2, [r4, #0]
 80137b2:	3b00      	subs	r3, #0
 80137b4:	bf18      	it	ne
 80137b6:	2301      	movne	r3, #1
 80137b8:	0692      	lsls	r2, r2, #26
 80137ba:	d42b      	bmi.n	8013814 <_printf_common+0xb0>
 80137bc:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80137c0:	4641      	mov	r1, r8
 80137c2:	4638      	mov	r0, r7
 80137c4:	47c8      	blx	r9
 80137c6:	3001      	adds	r0, #1
 80137c8:	d01e      	beq.n	8013808 <_printf_common+0xa4>
 80137ca:	6823      	ldr	r3, [r4, #0]
 80137cc:	6922      	ldr	r2, [r4, #16]
 80137ce:	f003 0306 	and.w	r3, r3, #6
 80137d2:	2b04      	cmp	r3, #4
 80137d4:	bf02      	ittt	eq
 80137d6:	68e5      	ldreq	r5, [r4, #12]
 80137d8:	6833      	ldreq	r3, [r6, #0]
 80137da:	1aed      	subeq	r5, r5, r3
 80137dc:	68a3      	ldr	r3, [r4, #8]
 80137de:	bf0c      	ite	eq
 80137e0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80137e4:	2500      	movne	r5, #0
 80137e6:	4293      	cmp	r3, r2
 80137e8:	bfc4      	itt	gt
 80137ea:	1a9b      	subgt	r3, r3, r2
 80137ec:	18ed      	addgt	r5, r5, r3
 80137ee:	2600      	movs	r6, #0
 80137f0:	341a      	adds	r4, #26
 80137f2:	42b5      	cmp	r5, r6
 80137f4:	d11a      	bne.n	801382c <_printf_common+0xc8>
 80137f6:	2000      	movs	r0, #0
 80137f8:	e008      	b.n	801380c <_printf_common+0xa8>
 80137fa:	2301      	movs	r3, #1
 80137fc:	4652      	mov	r2, sl
 80137fe:	4641      	mov	r1, r8
 8013800:	4638      	mov	r0, r7
 8013802:	47c8      	blx	r9
 8013804:	3001      	adds	r0, #1
 8013806:	d103      	bne.n	8013810 <_printf_common+0xac>
 8013808:	f04f 30ff 	mov.w	r0, #4294967295
 801380c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013810:	3501      	adds	r5, #1
 8013812:	e7c6      	b.n	80137a2 <_printf_common+0x3e>
 8013814:	18e1      	adds	r1, r4, r3
 8013816:	1c5a      	adds	r2, r3, #1
 8013818:	2030      	movs	r0, #48	@ 0x30
 801381a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 801381e:	4422      	add	r2, r4
 8013820:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8013824:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8013828:	3302      	adds	r3, #2
 801382a:	e7c7      	b.n	80137bc <_printf_common+0x58>
 801382c:	2301      	movs	r3, #1
 801382e:	4622      	mov	r2, r4
 8013830:	4641      	mov	r1, r8
 8013832:	4638      	mov	r0, r7
 8013834:	47c8      	blx	r9
 8013836:	3001      	adds	r0, #1
 8013838:	d0e6      	beq.n	8013808 <_printf_common+0xa4>
 801383a:	3601      	adds	r6, #1
 801383c:	e7d9      	b.n	80137f2 <_printf_common+0x8e>
	...

08013840 <_printf_i>:
 8013840:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8013844:	7e0f      	ldrb	r7, [r1, #24]
 8013846:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8013848:	2f78      	cmp	r7, #120	@ 0x78
 801384a:	4691      	mov	r9, r2
 801384c:	4680      	mov	r8, r0
 801384e:	460c      	mov	r4, r1
 8013850:	469a      	mov	sl, r3
 8013852:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8013856:	d807      	bhi.n	8013868 <_printf_i+0x28>
 8013858:	2f62      	cmp	r7, #98	@ 0x62
 801385a:	d80a      	bhi.n	8013872 <_printf_i+0x32>
 801385c:	2f00      	cmp	r7, #0
 801385e:	f000 80d1 	beq.w	8013a04 <_printf_i+0x1c4>
 8013862:	2f58      	cmp	r7, #88	@ 0x58
 8013864:	f000 80b8 	beq.w	80139d8 <_printf_i+0x198>
 8013868:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 801386c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8013870:	e03a      	b.n	80138e8 <_printf_i+0xa8>
 8013872:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8013876:	2b15      	cmp	r3, #21
 8013878:	d8f6      	bhi.n	8013868 <_printf_i+0x28>
 801387a:	a101      	add	r1, pc, #4	@ (adr r1, 8013880 <_printf_i+0x40>)
 801387c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8013880:	080138d9 	.word	0x080138d9
 8013884:	080138ed 	.word	0x080138ed
 8013888:	08013869 	.word	0x08013869
 801388c:	08013869 	.word	0x08013869
 8013890:	08013869 	.word	0x08013869
 8013894:	08013869 	.word	0x08013869
 8013898:	080138ed 	.word	0x080138ed
 801389c:	08013869 	.word	0x08013869
 80138a0:	08013869 	.word	0x08013869
 80138a4:	08013869 	.word	0x08013869
 80138a8:	08013869 	.word	0x08013869
 80138ac:	080139eb 	.word	0x080139eb
 80138b0:	08013917 	.word	0x08013917
 80138b4:	080139a5 	.word	0x080139a5
 80138b8:	08013869 	.word	0x08013869
 80138bc:	08013869 	.word	0x08013869
 80138c0:	08013a0d 	.word	0x08013a0d
 80138c4:	08013869 	.word	0x08013869
 80138c8:	08013917 	.word	0x08013917
 80138cc:	08013869 	.word	0x08013869
 80138d0:	08013869 	.word	0x08013869
 80138d4:	080139ad 	.word	0x080139ad
 80138d8:	6833      	ldr	r3, [r6, #0]
 80138da:	1d1a      	adds	r2, r3, #4
 80138dc:	681b      	ldr	r3, [r3, #0]
 80138de:	6032      	str	r2, [r6, #0]
 80138e0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80138e4:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80138e8:	2301      	movs	r3, #1
 80138ea:	e09c      	b.n	8013a26 <_printf_i+0x1e6>
 80138ec:	6833      	ldr	r3, [r6, #0]
 80138ee:	6820      	ldr	r0, [r4, #0]
 80138f0:	1d19      	adds	r1, r3, #4
 80138f2:	6031      	str	r1, [r6, #0]
 80138f4:	0606      	lsls	r6, r0, #24
 80138f6:	d501      	bpl.n	80138fc <_printf_i+0xbc>
 80138f8:	681d      	ldr	r5, [r3, #0]
 80138fa:	e003      	b.n	8013904 <_printf_i+0xc4>
 80138fc:	0645      	lsls	r5, r0, #25
 80138fe:	d5fb      	bpl.n	80138f8 <_printf_i+0xb8>
 8013900:	f9b3 5000 	ldrsh.w	r5, [r3]
 8013904:	2d00      	cmp	r5, #0
 8013906:	da03      	bge.n	8013910 <_printf_i+0xd0>
 8013908:	232d      	movs	r3, #45	@ 0x2d
 801390a:	426d      	negs	r5, r5
 801390c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8013910:	4858      	ldr	r0, [pc, #352]	@ (8013a74 <_printf_i+0x234>)
 8013912:	230a      	movs	r3, #10
 8013914:	e011      	b.n	801393a <_printf_i+0xfa>
 8013916:	6821      	ldr	r1, [r4, #0]
 8013918:	6833      	ldr	r3, [r6, #0]
 801391a:	0608      	lsls	r0, r1, #24
 801391c:	f853 5b04 	ldr.w	r5, [r3], #4
 8013920:	d402      	bmi.n	8013928 <_printf_i+0xe8>
 8013922:	0649      	lsls	r1, r1, #25
 8013924:	bf48      	it	mi
 8013926:	b2ad      	uxthmi	r5, r5
 8013928:	2f6f      	cmp	r7, #111	@ 0x6f
 801392a:	4852      	ldr	r0, [pc, #328]	@ (8013a74 <_printf_i+0x234>)
 801392c:	6033      	str	r3, [r6, #0]
 801392e:	bf14      	ite	ne
 8013930:	230a      	movne	r3, #10
 8013932:	2308      	moveq	r3, #8
 8013934:	2100      	movs	r1, #0
 8013936:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 801393a:	6866      	ldr	r6, [r4, #4]
 801393c:	60a6      	str	r6, [r4, #8]
 801393e:	2e00      	cmp	r6, #0
 8013940:	db05      	blt.n	801394e <_printf_i+0x10e>
 8013942:	6821      	ldr	r1, [r4, #0]
 8013944:	432e      	orrs	r6, r5
 8013946:	f021 0104 	bic.w	r1, r1, #4
 801394a:	6021      	str	r1, [r4, #0]
 801394c:	d04b      	beq.n	80139e6 <_printf_i+0x1a6>
 801394e:	4616      	mov	r6, r2
 8013950:	fbb5 f1f3 	udiv	r1, r5, r3
 8013954:	fb03 5711 	mls	r7, r3, r1, r5
 8013958:	5dc7      	ldrb	r7, [r0, r7]
 801395a:	f806 7d01 	strb.w	r7, [r6, #-1]!
 801395e:	462f      	mov	r7, r5
 8013960:	42bb      	cmp	r3, r7
 8013962:	460d      	mov	r5, r1
 8013964:	d9f4      	bls.n	8013950 <_printf_i+0x110>
 8013966:	2b08      	cmp	r3, #8
 8013968:	d10b      	bne.n	8013982 <_printf_i+0x142>
 801396a:	6823      	ldr	r3, [r4, #0]
 801396c:	07df      	lsls	r7, r3, #31
 801396e:	d508      	bpl.n	8013982 <_printf_i+0x142>
 8013970:	6923      	ldr	r3, [r4, #16]
 8013972:	6861      	ldr	r1, [r4, #4]
 8013974:	4299      	cmp	r1, r3
 8013976:	bfde      	ittt	le
 8013978:	2330      	movle	r3, #48	@ 0x30
 801397a:	f806 3c01 	strble.w	r3, [r6, #-1]
 801397e:	f106 36ff 	addle.w	r6, r6, #4294967295
 8013982:	1b92      	subs	r2, r2, r6
 8013984:	6122      	str	r2, [r4, #16]
 8013986:	f8cd a000 	str.w	sl, [sp]
 801398a:	464b      	mov	r3, r9
 801398c:	aa03      	add	r2, sp, #12
 801398e:	4621      	mov	r1, r4
 8013990:	4640      	mov	r0, r8
 8013992:	f7ff fee7 	bl	8013764 <_printf_common>
 8013996:	3001      	adds	r0, #1
 8013998:	d14a      	bne.n	8013a30 <_printf_i+0x1f0>
 801399a:	f04f 30ff 	mov.w	r0, #4294967295
 801399e:	b004      	add	sp, #16
 80139a0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80139a4:	6823      	ldr	r3, [r4, #0]
 80139a6:	f043 0320 	orr.w	r3, r3, #32
 80139aa:	6023      	str	r3, [r4, #0]
 80139ac:	4832      	ldr	r0, [pc, #200]	@ (8013a78 <_printf_i+0x238>)
 80139ae:	2778      	movs	r7, #120	@ 0x78
 80139b0:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80139b4:	6823      	ldr	r3, [r4, #0]
 80139b6:	6831      	ldr	r1, [r6, #0]
 80139b8:	061f      	lsls	r7, r3, #24
 80139ba:	f851 5b04 	ldr.w	r5, [r1], #4
 80139be:	d402      	bmi.n	80139c6 <_printf_i+0x186>
 80139c0:	065f      	lsls	r7, r3, #25
 80139c2:	bf48      	it	mi
 80139c4:	b2ad      	uxthmi	r5, r5
 80139c6:	6031      	str	r1, [r6, #0]
 80139c8:	07d9      	lsls	r1, r3, #31
 80139ca:	bf44      	itt	mi
 80139cc:	f043 0320 	orrmi.w	r3, r3, #32
 80139d0:	6023      	strmi	r3, [r4, #0]
 80139d2:	b11d      	cbz	r5, 80139dc <_printf_i+0x19c>
 80139d4:	2310      	movs	r3, #16
 80139d6:	e7ad      	b.n	8013934 <_printf_i+0xf4>
 80139d8:	4826      	ldr	r0, [pc, #152]	@ (8013a74 <_printf_i+0x234>)
 80139da:	e7e9      	b.n	80139b0 <_printf_i+0x170>
 80139dc:	6823      	ldr	r3, [r4, #0]
 80139de:	f023 0320 	bic.w	r3, r3, #32
 80139e2:	6023      	str	r3, [r4, #0]
 80139e4:	e7f6      	b.n	80139d4 <_printf_i+0x194>
 80139e6:	4616      	mov	r6, r2
 80139e8:	e7bd      	b.n	8013966 <_printf_i+0x126>
 80139ea:	6833      	ldr	r3, [r6, #0]
 80139ec:	6825      	ldr	r5, [r4, #0]
 80139ee:	6961      	ldr	r1, [r4, #20]
 80139f0:	1d18      	adds	r0, r3, #4
 80139f2:	6030      	str	r0, [r6, #0]
 80139f4:	062e      	lsls	r6, r5, #24
 80139f6:	681b      	ldr	r3, [r3, #0]
 80139f8:	d501      	bpl.n	80139fe <_printf_i+0x1be>
 80139fa:	6019      	str	r1, [r3, #0]
 80139fc:	e002      	b.n	8013a04 <_printf_i+0x1c4>
 80139fe:	0668      	lsls	r0, r5, #25
 8013a00:	d5fb      	bpl.n	80139fa <_printf_i+0x1ba>
 8013a02:	8019      	strh	r1, [r3, #0]
 8013a04:	2300      	movs	r3, #0
 8013a06:	6123      	str	r3, [r4, #16]
 8013a08:	4616      	mov	r6, r2
 8013a0a:	e7bc      	b.n	8013986 <_printf_i+0x146>
 8013a0c:	6833      	ldr	r3, [r6, #0]
 8013a0e:	1d1a      	adds	r2, r3, #4
 8013a10:	6032      	str	r2, [r6, #0]
 8013a12:	681e      	ldr	r6, [r3, #0]
 8013a14:	6862      	ldr	r2, [r4, #4]
 8013a16:	2100      	movs	r1, #0
 8013a18:	4630      	mov	r0, r6
 8013a1a:	f7ec fbf1 	bl	8000200 <memchr>
 8013a1e:	b108      	cbz	r0, 8013a24 <_printf_i+0x1e4>
 8013a20:	1b80      	subs	r0, r0, r6
 8013a22:	6060      	str	r0, [r4, #4]
 8013a24:	6863      	ldr	r3, [r4, #4]
 8013a26:	6123      	str	r3, [r4, #16]
 8013a28:	2300      	movs	r3, #0
 8013a2a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8013a2e:	e7aa      	b.n	8013986 <_printf_i+0x146>
 8013a30:	6923      	ldr	r3, [r4, #16]
 8013a32:	4632      	mov	r2, r6
 8013a34:	4649      	mov	r1, r9
 8013a36:	4640      	mov	r0, r8
 8013a38:	47d0      	blx	sl
 8013a3a:	3001      	adds	r0, #1
 8013a3c:	d0ad      	beq.n	801399a <_printf_i+0x15a>
 8013a3e:	6823      	ldr	r3, [r4, #0]
 8013a40:	079b      	lsls	r3, r3, #30
 8013a42:	d413      	bmi.n	8013a6c <_printf_i+0x22c>
 8013a44:	68e0      	ldr	r0, [r4, #12]
 8013a46:	9b03      	ldr	r3, [sp, #12]
 8013a48:	4298      	cmp	r0, r3
 8013a4a:	bfb8      	it	lt
 8013a4c:	4618      	movlt	r0, r3
 8013a4e:	e7a6      	b.n	801399e <_printf_i+0x15e>
 8013a50:	2301      	movs	r3, #1
 8013a52:	4632      	mov	r2, r6
 8013a54:	4649      	mov	r1, r9
 8013a56:	4640      	mov	r0, r8
 8013a58:	47d0      	blx	sl
 8013a5a:	3001      	adds	r0, #1
 8013a5c:	d09d      	beq.n	801399a <_printf_i+0x15a>
 8013a5e:	3501      	adds	r5, #1
 8013a60:	68e3      	ldr	r3, [r4, #12]
 8013a62:	9903      	ldr	r1, [sp, #12]
 8013a64:	1a5b      	subs	r3, r3, r1
 8013a66:	42ab      	cmp	r3, r5
 8013a68:	dcf2      	bgt.n	8013a50 <_printf_i+0x210>
 8013a6a:	e7eb      	b.n	8013a44 <_printf_i+0x204>
 8013a6c:	2500      	movs	r5, #0
 8013a6e:	f104 0619 	add.w	r6, r4, #25
 8013a72:	e7f5      	b.n	8013a60 <_printf_i+0x220>
 8013a74:	080145d0 	.word	0x080145d0
 8013a78:	080145e1 	.word	0x080145e1

08013a7c <_scanf_chars>:
 8013a7c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8013a80:	4615      	mov	r5, r2
 8013a82:	688a      	ldr	r2, [r1, #8]
 8013a84:	4680      	mov	r8, r0
 8013a86:	460c      	mov	r4, r1
 8013a88:	b932      	cbnz	r2, 8013a98 <_scanf_chars+0x1c>
 8013a8a:	698a      	ldr	r2, [r1, #24]
 8013a8c:	2a00      	cmp	r2, #0
 8013a8e:	bf14      	ite	ne
 8013a90:	f04f 32ff 	movne.w	r2, #4294967295
 8013a94:	2201      	moveq	r2, #1
 8013a96:	608a      	str	r2, [r1, #8]
 8013a98:	6822      	ldr	r2, [r4, #0]
 8013a9a:	f8df 9090 	ldr.w	r9, [pc, #144]	@ 8013b2c <_scanf_chars+0xb0>
 8013a9e:	06d1      	lsls	r1, r2, #27
 8013aa0:	bf5f      	itttt	pl
 8013aa2:	681a      	ldrpl	r2, [r3, #0]
 8013aa4:	1d11      	addpl	r1, r2, #4
 8013aa6:	6019      	strpl	r1, [r3, #0]
 8013aa8:	6816      	ldrpl	r6, [r2, #0]
 8013aaa:	2700      	movs	r7, #0
 8013aac:	69a0      	ldr	r0, [r4, #24]
 8013aae:	b188      	cbz	r0, 8013ad4 <_scanf_chars+0x58>
 8013ab0:	2801      	cmp	r0, #1
 8013ab2:	d107      	bne.n	8013ac4 <_scanf_chars+0x48>
 8013ab4:	682b      	ldr	r3, [r5, #0]
 8013ab6:	781a      	ldrb	r2, [r3, #0]
 8013ab8:	6963      	ldr	r3, [r4, #20]
 8013aba:	5c9b      	ldrb	r3, [r3, r2]
 8013abc:	b953      	cbnz	r3, 8013ad4 <_scanf_chars+0x58>
 8013abe:	2f00      	cmp	r7, #0
 8013ac0:	d031      	beq.n	8013b26 <_scanf_chars+0xaa>
 8013ac2:	e022      	b.n	8013b0a <_scanf_chars+0x8e>
 8013ac4:	2802      	cmp	r0, #2
 8013ac6:	d120      	bne.n	8013b0a <_scanf_chars+0x8e>
 8013ac8:	682b      	ldr	r3, [r5, #0]
 8013aca:	781b      	ldrb	r3, [r3, #0]
 8013acc:	f819 3003 	ldrb.w	r3, [r9, r3]
 8013ad0:	071b      	lsls	r3, r3, #28
 8013ad2:	d41a      	bmi.n	8013b0a <_scanf_chars+0x8e>
 8013ad4:	6823      	ldr	r3, [r4, #0]
 8013ad6:	06da      	lsls	r2, r3, #27
 8013ad8:	bf5e      	ittt	pl
 8013ada:	682b      	ldrpl	r3, [r5, #0]
 8013adc:	781b      	ldrbpl	r3, [r3, #0]
 8013ade:	f806 3b01 	strbpl.w	r3, [r6], #1
 8013ae2:	682a      	ldr	r2, [r5, #0]
 8013ae4:	686b      	ldr	r3, [r5, #4]
 8013ae6:	3201      	adds	r2, #1
 8013ae8:	602a      	str	r2, [r5, #0]
 8013aea:	68a2      	ldr	r2, [r4, #8]
 8013aec:	3b01      	subs	r3, #1
 8013aee:	3a01      	subs	r2, #1
 8013af0:	606b      	str	r3, [r5, #4]
 8013af2:	3701      	adds	r7, #1
 8013af4:	60a2      	str	r2, [r4, #8]
 8013af6:	b142      	cbz	r2, 8013b0a <_scanf_chars+0x8e>
 8013af8:	2b00      	cmp	r3, #0
 8013afa:	dcd7      	bgt.n	8013aac <_scanf_chars+0x30>
 8013afc:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 8013b00:	4629      	mov	r1, r5
 8013b02:	4640      	mov	r0, r8
 8013b04:	4798      	blx	r3
 8013b06:	2800      	cmp	r0, #0
 8013b08:	d0d0      	beq.n	8013aac <_scanf_chars+0x30>
 8013b0a:	6823      	ldr	r3, [r4, #0]
 8013b0c:	f013 0310 	ands.w	r3, r3, #16
 8013b10:	d105      	bne.n	8013b1e <_scanf_chars+0xa2>
 8013b12:	68e2      	ldr	r2, [r4, #12]
 8013b14:	3201      	adds	r2, #1
 8013b16:	60e2      	str	r2, [r4, #12]
 8013b18:	69a2      	ldr	r2, [r4, #24]
 8013b1a:	b102      	cbz	r2, 8013b1e <_scanf_chars+0xa2>
 8013b1c:	7033      	strb	r3, [r6, #0]
 8013b1e:	6923      	ldr	r3, [r4, #16]
 8013b20:	443b      	add	r3, r7
 8013b22:	6123      	str	r3, [r4, #16]
 8013b24:	2000      	movs	r0, #0
 8013b26:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8013b2a:	bf00      	nop
 8013b2c:	080144bf 	.word	0x080144bf

08013b30 <_scanf_i>:
 8013b30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013b34:	4698      	mov	r8, r3
 8013b36:	4b74      	ldr	r3, [pc, #464]	@ (8013d08 <_scanf_i+0x1d8>)
 8013b38:	460c      	mov	r4, r1
 8013b3a:	4682      	mov	sl, r0
 8013b3c:	4616      	mov	r6, r2
 8013b3e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8013b42:	b087      	sub	sp, #28
 8013b44:	ab03      	add	r3, sp, #12
 8013b46:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8013b4a:	4b70      	ldr	r3, [pc, #448]	@ (8013d0c <_scanf_i+0x1dc>)
 8013b4c:	69a1      	ldr	r1, [r4, #24]
 8013b4e:	4a70      	ldr	r2, [pc, #448]	@ (8013d10 <_scanf_i+0x1e0>)
 8013b50:	2903      	cmp	r1, #3
 8013b52:	bf08      	it	eq
 8013b54:	461a      	moveq	r2, r3
 8013b56:	68a3      	ldr	r3, [r4, #8]
 8013b58:	9201      	str	r2, [sp, #4]
 8013b5a:	1e5a      	subs	r2, r3, #1
 8013b5c:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 8013b60:	bf88      	it	hi
 8013b62:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 8013b66:	4627      	mov	r7, r4
 8013b68:	bf82      	ittt	hi
 8013b6a:	eb03 0905 	addhi.w	r9, r3, r5
 8013b6e:	f240 135d 	movwhi	r3, #349	@ 0x15d
 8013b72:	60a3      	strhi	r3, [r4, #8]
 8013b74:	f857 3b1c 	ldr.w	r3, [r7], #28
 8013b78:	f443 6350 	orr.w	r3, r3, #3328	@ 0xd00
 8013b7c:	bf98      	it	ls
 8013b7e:	f04f 0900 	movls.w	r9, #0
 8013b82:	6023      	str	r3, [r4, #0]
 8013b84:	463d      	mov	r5, r7
 8013b86:	f04f 0b00 	mov.w	fp, #0
 8013b8a:	6831      	ldr	r1, [r6, #0]
 8013b8c:	ab03      	add	r3, sp, #12
 8013b8e:	7809      	ldrb	r1, [r1, #0]
 8013b90:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 8013b94:	2202      	movs	r2, #2
 8013b96:	f7ec fb33 	bl	8000200 <memchr>
 8013b9a:	b328      	cbz	r0, 8013be8 <_scanf_i+0xb8>
 8013b9c:	f1bb 0f01 	cmp.w	fp, #1
 8013ba0:	d159      	bne.n	8013c56 <_scanf_i+0x126>
 8013ba2:	6862      	ldr	r2, [r4, #4]
 8013ba4:	b92a      	cbnz	r2, 8013bb2 <_scanf_i+0x82>
 8013ba6:	6822      	ldr	r2, [r4, #0]
 8013ba8:	2108      	movs	r1, #8
 8013baa:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8013bae:	6061      	str	r1, [r4, #4]
 8013bb0:	6022      	str	r2, [r4, #0]
 8013bb2:	6822      	ldr	r2, [r4, #0]
 8013bb4:	f422 62a0 	bic.w	r2, r2, #1280	@ 0x500
 8013bb8:	6022      	str	r2, [r4, #0]
 8013bba:	68a2      	ldr	r2, [r4, #8]
 8013bbc:	1e51      	subs	r1, r2, #1
 8013bbe:	60a1      	str	r1, [r4, #8]
 8013bc0:	b192      	cbz	r2, 8013be8 <_scanf_i+0xb8>
 8013bc2:	6832      	ldr	r2, [r6, #0]
 8013bc4:	1c51      	adds	r1, r2, #1
 8013bc6:	6031      	str	r1, [r6, #0]
 8013bc8:	7812      	ldrb	r2, [r2, #0]
 8013bca:	f805 2b01 	strb.w	r2, [r5], #1
 8013bce:	6872      	ldr	r2, [r6, #4]
 8013bd0:	3a01      	subs	r2, #1
 8013bd2:	2a00      	cmp	r2, #0
 8013bd4:	6072      	str	r2, [r6, #4]
 8013bd6:	dc07      	bgt.n	8013be8 <_scanf_i+0xb8>
 8013bd8:	f8d4 2180 	ldr.w	r2, [r4, #384]	@ 0x180
 8013bdc:	4631      	mov	r1, r6
 8013bde:	4650      	mov	r0, sl
 8013be0:	4790      	blx	r2
 8013be2:	2800      	cmp	r0, #0
 8013be4:	f040 8085 	bne.w	8013cf2 <_scanf_i+0x1c2>
 8013be8:	f10b 0b01 	add.w	fp, fp, #1
 8013bec:	f1bb 0f03 	cmp.w	fp, #3
 8013bf0:	d1cb      	bne.n	8013b8a <_scanf_i+0x5a>
 8013bf2:	6863      	ldr	r3, [r4, #4]
 8013bf4:	b90b      	cbnz	r3, 8013bfa <_scanf_i+0xca>
 8013bf6:	230a      	movs	r3, #10
 8013bf8:	6063      	str	r3, [r4, #4]
 8013bfa:	6863      	ldr	r3, [r4, #4]
 8013bfc:	4945      	ldr	r1, [pc, #276]	@ (8013d14 <_scanf_i+0x1e4>)
 8013bfe:	6960      	ldr	r0, [r4, #20]
 8013c00:	1ac9      	subs	r1, r1, r3
 8013c02:	f000 f889 	bl	8013d18 <__sccl>
 8013c06:	f04f 0b00 	mov.w	fp, #0
 8013c0a:	68a3      	ldr	r3, [r4, #8]
 8013c0c:	6822      	ldr	r2, [r4, #0]
 8013c0e:	2b00      	cmp	r3, #0
 8013c10:	d03d      	beq.n	8013c8e <_scanf_i+0x15e>
 8013c12:	6831      	ldr	r1, [r6, #0]
 8013c14:	6960      	ldr	r0, [r4, #20]
 8013c16:	f891 c000 	ldrb.w	ip, [r1]
 8013c1a:	f810 000c 	ldrb.w	r0, [r0, ip]
 8013c1e:	2800      	cmp	r0, #0
 8013c20:	d035      	beq.n	8013c8e <_scanf_i+0x15e>
 8013c22:	f1bc 0f30 	cmp.w	ip, #48	@ 0x30
 8013c26:	d124      	bne.n	8013c72 <_scanf_i+0x142>
 8013c28:	0510      	lsls	r0, r2, #20
 8013c2a:	d522      	bpl.n	8013c72 <_scanf_i+0x142>
 8013c2c:	f10b 0b01 	add.w	fp, fp, #1
 8013c30:	f1b9 0f00 	cmp.w	r9, #0
 8013c34:	d003      	beq.n	8013c3e <_scanf_i+0x10e>
 8013c36:	3301      	adds	r3, #1
 8013c38:	f109 39ff 	add.w	r9, r9, #4294967295
 8013c3c:	60a3      	str	r3, [r4, #8]
 8013c3e:	6873      	ldr	r3, [r6, #4]
 8013c40:	3b01      	subs	r3, #1
 8013c42:	2b00      	cmp	r3, #0
 8013c44:	6073      	str	r3, [r6, #4]
 8013c46:	dd1b      	ble.n	8013c80 <_scanf_i+0x150>
 8013c48:	6833      	ldr	r3, [r6, #0]
 8013c4a:	3301      	adds	r3, #1
 8013c4c:	6033      	str	r3, [r6, #0]
 8013c4e:	68a3      	ldr	r3, [r4, #8]
 8013c50:	3b01      	subs	r3, #1
 8013c52:	60a3      	str	r3, [r4, #8]
 8013c54:	e7d9      	b.n	8013c0a <_scanf_i+0xda>
 8013c56:	f1bb 0f02 	cmp.w	fp, #2
 8013c5a:	d1ae      	bne.n	8013bba <_scanf_i+0x8a>
 8013c5c:	6822      	ldr	r2, [r4, #0]
 8013c5e:	f402 61c0 	and.w	r1, r2, #1536	@ 0x600
 8013c62:	f5b1 7f00 	cmp.w	r1, #512	@ 0x200
 8013c66:	d1c4      	bne.n	8013bf2 <_scanf_i+0xc2>
 8013c68:	2110      	movs	r1, #16
 8013c6a:	6061      	str	r1, [r4, #4]
 8013c6c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8013c70:	e7a2      	b.n	8013bb8 <_scanf_i+0x88>
 8013c72:	f422 6210 	bic.w	r2, r2, #2304	@ 0x900
 8013c76:	6022      	str	r2, [r4, #0]
 8013c78:	780b      	ldrb	r3, [r1, #0]
 8013c7a:	f805 3b01 	strb.w	r3, [r5], #1
 8013c7e:	e7de      	b.n	8013c3e <_scanf_i+0x10e>
 8013c80:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 8013c84:	4631      	mov	r1, r6
 8013c86:	4650      	mov	r0, sl
 8013c88:	4798      	blx	r3
 8013c8a:	2800      	cmp	r0, #0
 8013c8c:	d0df      	beq.n	8013c4e <_scanf_i+0x11e>
 8013c8e:	6823      	ldr	r3, [r4, #0]
 8013c90:	05d9      	lsls	r1, r3, #23
 8013c92:	d50d      	bpl.n	8013cb0 <_scanf_i+0x180>
 8013c94:	42bd      	cmp	r5, r7
 8013c96:	d909      	bls.n	8013cac <_scanf_i+0x17c>
 8013c98:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 8013c9c:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8013ca0:	4632      	mov	r2, r6
 8013ca2:	4650      	mov	r0, sl
 8013ca4:	4798      	blx	r3
 8013ca6:	f105 39ff 	add.w	r9, r5, #4294967295
 8013caa:	464d      	mov	r5, r9
 8013cac:	42bd      	cmp	r5, r7
 8013cae:	d028      	beq.n	8013d02 <_scanf_i+0x1d2>
 8013cb0:	6822      	ldr	r2, [r4, #0]
 8013cb2:	f012 0210 	ands.w	r2, r2, #16
 8013cb6:	d113      	bne.n	8013ce0 <_scanf_i+0x1b0>
 8013cb8:	702a      	strb	r2, [r5, #0]
 8013cba:	6863      	ldr	r3, [r4, #4]
 8013cbc:	9e01      	ldr	r6, [sp, #4]
 8013cbe:	4639      	mov	r1, r7
 8013cc0:	4650      	mov	r0, sl
 8013cc2:	47b0      	blx	r6
 8013cc4:	f8d8 3000 	ldr.w	r3, [r8]
 8013cc8:	6821      	ldr	r1, [r4, #0]
 8013cca:	1d1a      	adds	r2, r3, #4
 8013ccc:	f8c8 2000 	str.w	r2, [r8]
 8013cd0:	f011 0f20 	tst.w	r1, #32
 8013cd4:	681b      	ldr	r3, [r3, #0]
 8013cd6:	d00f      	beq.n	8013cf8 <_scanf_i+0x1c8>
 8013cd8:	6018      	str	r0, [r3, #0]
 8013cda:	68e3      	ldr	r3, [r4, #12]
 8013cdc:	3301      	adds	r3, #1
 8013cde:	60e3      	str	r3, [r4, #12]
 8013ce0:	6923      	ldr	r3, [r4, #16]
 8013ce2:	1bed      	subs	r5, r5, r7
 8013ce4:	445d      	add	r5, fp
 8013ce6:	442b      	add	r3, r5
 8013ce8:	6123      	str	r3, [r4, #16]
 8013cea:	2000      	movs	r0, #0
 8013cec:	b007      	add	sp, #28
 8013cee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013cf2:	f04f 0b00 	mov.w	fp, #0
 8013cf6:	e7ca      	b.n	8013c8e <_scanf_i+0x15e>
 8013cf8:	07ca      	lsls	r2, r1, #31
 8013cfa:	bf4c      	ite	mi
 8013cfc:	8018      	strhmi	r0, [r3, #0]
 8013cfe:	6018      	strpl	r0, [r3, #0]
 8013d00:	e7eb      	b.n	8013cda <_scanf_i+0x1aa>
 8013d02:	2001      	movs	r0, #1
 8013d04:	e7f2      	b.n	8013cec <_scanf_i+0x1bc>
 8013d06:	bf00      	nop
 8013d08:	080143bc 	.word	0x080143bc
 8013d0c:	08012d29 	.word	0x08012d29
 8013d10:	08013f8d 	.word	0x08013f8d
 8013d14:	08014602 	.word	0x08014602

08013d18 <__sccl>:
 8013d18:	b570      	push	{r4, r5, r6, lr}
 8013d1a:	780b      	ldrb	r3, [r1, #0]
 8013d1c:	4604      	mov	r4, r0
 8013d1e:	2b5e      	cmp	r3, #94	@ 0x5e
 8013d20:	bf0b      	itete	eq
 8013d22:	784b      	ldrbeq	r3, [r1, #1]
 8013d24:	1c4a      	addne	r2, r1, #1
 8013d26:	1c8a      	addeq	r2, r1, #2
 8013d28:	2100      	movne	r1, #0
 8013d2a:	bf08      	it	eq
 8013d2c:	2101      	moveq	r1, #1
 8013d2e:	3801      	subs	r0, #1
 8013d30:	f104 05ff 	add.w	r5, r4, #255	@ 0xff
 8013d34:	f800 1f01 	strb.w	r1, [r0, #1]!
 8013d38:	42a8      	cmp	r0, r5
 8013d3a:	d1fb      	bne.n	8013d34 <__sccl+0x1c>
 8013d3c:	b90b      	cbnz	r3, 8013d42 <__sccl+0x2a>
 8013d3e:	1e50      	subs	r0, r2, #1
 8013d40:	bd70      	pop	{r4, r5, r6, pc}
 8013d42:	f081 0101 	eor.w	r1, r1, #1
 8013d46:	54e1      	strb	r1, [r4, r3]
 8013d48:	4610      	mov	r0, r2
 8013d4a:	4602      	mov	r2, r0
 8013d4c:	f812 5b01 	ldrb.w	r5, [r2], #1
 8013d50:	2d2d      	cmp	r5, #45	@ 0x2d
 8013d52:	d005      	beq.n	8013d60 <__sccl+0x48>
 8013d54:	2d5d      	cmp	r5, #93	@ 0x5d
 8013d56:	d016      	beq.n	8013d86 <__sccl+0x6e>
 8013d58:	2d00      	cmp	r5, #0
 8013d5a:	d0f1      	beq.n	8013d40 <__sccl+0x28>
 8013d5c:	462b      	mov	r3, r5
 8013d5e:	e7f2      	b.n	8013d46 <__sccl+0x2e>
 8013d60:	7846      	ldrb	r6, [r0, #1]
 8013d62:	2e5d      	cmp	r6, #93	@ 0x5d
 8013d64:	d0fa      	beq.n	8013d5c <__sccl+0x44>
 8013d66:	42b3      	cmp	r3, r6
 8013d68:	dcf8      	bgt.n	8013d5c <__sccl+0x44>
 8013d6a:	3002      	adds	r0, #2
 8013d6c:	461a      	mov	r2, r3
 8013d6e:	3201      	adds	r2, #1
 8013d70:	4296      	cmp	r6, r2
 8013d72:	54a1      	strb	r1, [r4, r2]
 8013d74:	dcfb      	bgt.n	8013d6e <__sccl+0x56>
 8013d76:	1af2      	subs	r2, r6, r3
 8013d78:	3a01      	subs	r2, #1
 8013d7a:	1c5d      	adds	r5, r3, #1
 8013d7c:	42b3      	cmp	r3, r6
 8013d7e:	bfa8      	it	ge
 8013d80:	2200      	movge	r2, #0
 8013d82:	18ab      	adds	r3, r5, r2
 8013d84:	e7e1      	b.n	8013d4a <__sccl+0x32>
 8013d86:	4610      	mov	r0, r2
 8013d88:	e7da      	b.n	8013d40 <__sccl+0x28>

08013d8a <__submore>:
 8013d8a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013d8e:	460c      	mov	r4, r1
 8013d90:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 8013d92:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8013d96:	4299      	cmp	r1, r3
 8013d98:	d11d      	bne.n	8013dd6 <__submore+0x4c>
 8013d9a:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8013d9e:	f7ff f92d 	bl	8012ffc <_malloc_r>
 8013da2:	b918      	cbnz	r0, 8013dac <__submore+0x22>
 8013da4:	f04f 30ff 	mov.w	r0, #4294967295
 8013da8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013dac:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8013db0:	63a3      	str	r3, [r4, #56]	@ 0x38
 8013db2:	f894 3046 	ldrb.w	r3, [r4, #70]	@ 0x46
 8013db6:	6360      	str	r0, [r4, #52]	@ 0x34
 8013db8:	f880 33ff 	strb.w	r3, [r0, #1023]	@ 0x3ff
 8013dbc:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 8013dc0:	f880 33fe 	strb.w	r3, [r0, #1022]	@ 0x3fe
 8013dc4:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 8013dc8:	f880 33fd 	strb.w	r3, [r0, #1021]	@ 0x3fd
 8013dcc:	f200 30fd 	addw	r0, r0, #1021	@ 0x3fd
 8013dd0:	6020      	str	r0, [r4, #0]
 8013dd2:	2000      	movs	r0, #0
 8013dd4:	e7e8      	b.n	8013da8 <__submore+0x1e>
 8013dd6:	6ba6      	ldr	r6, [r4, #56]	@ 0x38
 8013dd8:	0077      	lsls	r7, r6, #1
 8013dda:	463a      	mov	r2, r7
 8013ddc:	f000 f83a 	bl	8013e54 <_realloc_r>
 8013de0:	4605      	mov	r5, r0
 8013de2:	2800      	cmp	r0, #0
 8013de4:	d0de      	beq.n	8013da4 <__submore+0x1a>
 8013de6:	eb00 0806 	add.w	r8, r0, r6
 8013dea:	4601      	mov	r1, r0
 8013dec:	4632      	mov	r2, r6
 8013dee:	4640      	mov	r0, r8
 8013df0:	f7ff f88a 	bl	8012f08 <memcpy>
 8013df4:	e9c4 570d 	strd	r5, r7, [r4, #52]	@ 0x34
 8013df8:	f8c4 8000 	str.w	r8, [r4]
 8013dfc:	e7e9      	b.n	8013dd2 <__submore+0x48>

08013dfe <memmove>:
 8013dfe:	4288      	cmp	r0, r1
 8013e00:	b510      	push	{r4, lr}
 8013e02:	eb01 0402 	add.w	r4, r1, r2
 8013e06:	d902      	bls.n	8013e0e <memmove+0x10>
 8013e08:	4284      	cmp	r4, r0
 8013e0a:	4623      	mov	r3, r4
 8013e0c:	d807      	bhi.n	8013e1e <memmove+0x20>
 8013e0e:	1e43      	subs	r3, r0, #1
 8013e10:	42a1      	cmp	r1, r4
 8013e12:	d008      	beq.n	8013e26 <memmove+0x28>
 8013e14:	f811 2b01 	ldrb.w	r2, [r1], #1
 8013e18:	f803 2f01 	strb.w	r2, [r3, #1]!
 8013e1c:	e7f8      	b.n	8013e10 <memmove+0x12>
 8013e1e:	4402      	add	r2, r0
 8013e20:	4601      	mov	r1, r0
 8013e22:	428a      	cmp	r2, r1
 8013e24:	d100      	bne.n	8013e28 <memmove+0x2a>
 8013e26:	bd10      	pop	{r4, pc}
 8013e28:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8013e2c:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8013e30:	e7f7      	b.n	8013e22 <memmove+0x24>
	...

08013e34 <_sbrk_r>:
 8013e34:	b538      	push	{r3, r4, r5, lr}
 8013e36:	4d06      	ldr	r5, [pc, #24]	@ (8013e50 <_sbrk_r+0x1c>)
 8013e38:	2300      	movs	r3, #0
 8013e3a:	4604      	mov	r4, r0
 8013e3c:	4608      	mov	r0, r1
 8013e3e:	602b      	str	r3, [r5, #0]
 8013e40:	f7f1 ffd4 	bl	8005dec <_sbrk>
 8013e44:	1c43      	adds	r3, r0, #1
 8013e46:	d102      	bne.n	8013e4e <_sbrk_r+0x1a>
 8013e48:	682b      	ldr	r3, [r5, #0]
 8013e4a:	b103      	cbz	r3, 8013e4e <_sbrk_r+0x1a>
 8013e4c:	6023      	str	r3, [r4, #0]
 8013e4e:	bd38      	pop	{r3, r4, r5, pc}
 8013e50:	20005258 	.word	0x20005258

08013e54 <_realloc_r>:
 8013e54:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013e58:	4607      	mov	r7, r0
 8013e5a:	4614      	mov	r4, r2
 8013e5c:	460d      	mov	r5, r1
 8013e5e:	b921      	cbnz	r1, 8013e6a <_realloc_r+0x16>
 8013e60:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8013e64:	4611      	mov	r1, r2
 8013e66:	f7ff b8c9 	b.w	8012ffc <_malloc_r>
 8013e6a:	b92a      	cbnz	r2, 8013e78 <_realloc_r+0x24>
 8013e6c:	f7ff f85a 	bl	8012f24 <_free_r>
 8013e70:	4625      	mov	r5, r4
 8013e72:	4628      	mov	r0, r5
 8013e74:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013e78:	f000 f88a 	bl	8013f90 <_malloc_usable_size_r>
 8013e7c:	4284      	cmp	r4, r0
 8013e7e:	4606      	mov	r6, r0
 8013e80:	d802      	bhi.n	8013e88 <_realloc_r+0x34>
 8013e82:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8013e86:	d8f4      	bhi.n	8013e72 <_realloc_r+0x1e>
 8013e88:	4621      	mov	r1, r4
 8013e8a:	4638      	mov	r0, r7
 8013e8c:	f7ff f8b6 	bl	8012ffc <_malloc_r>
 8013e90:	4680      	mov	r8, r0
 8013e92:	b908      	cbnz	r0, 8013e98 <_realloc_r+0x44>
 8013e94:	4645      	mov	r5, r8
 8013e96:	e7ec      	b.n	8013e72 <_realloc_r+0x1e>
 8013e98:	42b4      	cmp	r4, r6
 8013e9a:	4622      	mov	r2, r4
 8013e9c:	4629      	mov	r1, r5
 8013e9e:	bf28      	it	cs
 8013ea0:	4632      	movcs	r2, r6
 8013ea2:	f7ff f831 	bl	8012f08 <memcpy>
 8013ea6:	4629      	mov	r1, r5
 8013ea8:	4638      	mov	r0, r7
 8013eaa:	f7ff f83b 	bl	8012f24 <_free_r>
 8013eae:	e7f1      	b.n	8013e94 <_realloc_r+0x40>

08013eb0 <_strtoul_l.isra.0>:
 8013eb0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8013eb4:	4e34      	ldr	r6, [pc, #208]	@ (8013f88 <_strtoul_l.isra.0+0xd8>)
 8013eb6:	4686      	mov	lr, r0
 8013eb8:	460d      	mov	r5, r1
 8013eba:	4628      	mov	r0, r5
 8013ebc:	f815 4b01 	ldrb.w	r4, [r5], #1
 8013ec0:	5d37      	ldrb	r7, [r6, r4]
 8013ec2:	f017 0708 	ands.w	r7, r7, #8
 8013ec6:	d1f8      	bne.n	8013eba <_strtoul_l.isra.0+0xa>
 8013ec8:	2c2d      	cmp	r4, #45	@ 0x2d
 8013eca:	d110      	bne.n	8013eee <_strtoul_l.isra.0+0x3e>
 8013ecc:	782c      	ldrb	r4, [r5, #0]
 8013ece:	2701      	movs	r7, #1
 8013ed0:	1c85      	adds	r5, r0, #2
 8013ed2:	f033 0010 	bics.w	r0, r3, #16
 8013ed6:	d115      	bne.n	8013f04 <_strtoul_l.isra.0+0x54>
 8013ed8:	2c30      	cmp	r4, #48	@ 0x30
 8013eda:	d10d      	bne.n	8013ef8 <_strtoul_l.isra.0+0x48>
 8013edc:	7828      	ldrb	r0, [r5, #0]
 8013ede:	f000 00df 	and.w	r0, r0, #223	@ 0xdf
 8013ee2:	2858      	cmp	r0, #88	@ 0x58
 8013ee4:	d108      	bne.n	8013ef8 <_strtoul_l.isra.0+0x48>
 8013ee6:	786c      	ldrb	r4, [r5, #1]
 8013ee8:	3502      	adds	r5, #2
 8013eea:	2310      	movs	r3, #16
 8013eec:	e00a      	b.n	8013f04 <_strtoul_l.isra.0+0x54>
 8013eee:	2c2b      	cmp	r4, #43	@ 0x2b
 8013ef0:	bf04      	itt	eq
 8013ef2:	782c      	ldrbeq	r4, [r5, #0]
 8013ef4:	1c85      	addeq	r5, r0, #2
 8013ef6:	e7ec      	b.n	8013ed2 <_strtoul_l.isra.0+0x22>
 8013ef8:	2b00      	cmp	r3, #0
 8013efa:	d1f6      	bne.n	8013eea <_strtoul_l.isra.0+0x3a>
 8013efc:	2c30      	cmp	r4, #48	@ 0x30
 8013efe:	bf14      	ite	ne
 8013f00:	230a      	movne	r3, #10
 8013f02:	2308      	moveq	r3, #8
 8013f04:	f04f 38ff 	mov.w	r8, #4294967295
 8013f08:	2600      	movs	r6, #0
 8013f0a:	fbb8 f8f3 	udiv	r8, r8, r3
 8013f0e:	fb03 f908 	mul.w	r9, r3, r8
 8013f12:	ea6f 0909 	mvn.w	r9, r9
 8013f16:	4630      	mov	r0, r6
 8013f18:	f1a4 0c30 	sub.w	ip, r4, #48	@ 0x30
 8013f1c:	f1bc 0f09 	cmp.w	ip, #9
 8013f20:	d810      	bhi.n	8013f44 <_strtoul_l.isra.0+0x94>
 8013f22:	4664      	mov	r4, ip
 8013f24:	42a3      	cmp	r3, r4
 8013f26:	dd1e      	ble.n	8013f66 <_strtoul_l.isra.0+0xb6>
 8013f28:	f1b6 3fff 	cmp.w	r6, #4294967295
 8013f2c:	d007      	beq.n	8013f3e <_strtoul_l.isra.0+0x8e>
 8013f2e:	4580      	cmp	r8, r0
 8013f30:	d316      	bcc.n	8013f60 <_strtoul_l.isra.0+0xb0>
 8013f32:	d101      	bne.n	8013f38 <_strtoul_l.isra.0+0x88>
 8013f34:	45a1      	cmp	r9, r4
 8013f36:	db13      	blt.n	8013f60 <_strtoul_l.isra.0+0xb0>
 8013f38:	fb00 4003 	mla	r0, r0, r3, r4
 8013f3c:	2601      	movs	r6, #1
 8013f3e:	f815 4b01 	ldrb.w	r4, [r5], #1
 8013f42:	e7e9      	b.n	8013f18 <_strtoul_l.isra.0+0x68>
 8013f44:	f1a4 0c41 	sub.w	ip, r4, #65	@ 0x41
 8013f48:	f1bc 0f19 	cmp.w	ip, #25
 8013f4c:	d801      	bhi.n	8013f52 <_strtoul_l.isra.0+0xa2>
 8013f4e:	3c37      	subs	r4, #55	@ 0x37
 8013f50:	e7e8      	b.n	8013f24 <_strtoul_l.isra.0+0x74>
 8013f52:	f1a4 0c61 	sub.w	ip, r4, #97	@ 0x61
 8013f56:	f1bc 0f19 	cmp.w	ip, #25
 8013f5a:	d804      	bhi.n	8013f66 <_strtoul_l.isra.0+0xb6>
 8013f5c:	3c57      	subs	r4, #87	@ 0x57
 8013f5e:	e7e1      	b.n	8013f24 <_strtoul_l.isra.0+0x74>
 8013f60:	f04f 36ff 	mov.w	r6, #4294967295
 8013f64:	e7eb      	b.n	8013f3e <_strtoul_l.isra.0+0x8e>
 8013f66:	1c73      	adds	r3, r6, #1
 8013f68:	d106      	bne.n	8013f78 <_strtoul_l.isra.0+0xc8>
 8013f6a:	2322      	movs	r3, #34	@ 0x22
 8013f6c:	f8ce 3000 	str.w	r3, [lr]
 8013f70:	4630      	mov	r0, r6
 8013f72:	b932      	cbnz	r2, 8013f82 <_strtoul_l.isra.0+0xd2>
 8013f74:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8013f78:	b107      	cbz	r7, 8013f7c <_strtoul_l.isra.0+0xcc>
 8013f7a:	4240      	negs	r0, r0
 8013f7c:	2a00      	cmp	r2, #0
 8013f7e:	d0f9      	beq.n	8013f74 <_strtoul_l.isra.0+0xc4>
 8013f80:	b106      	cbz	r6, 8013f84 <_strtoul_l.isra.0+0xd4>
 8013f82:	1e69      	subs	r1, r5, #1
 8013f84:	6011      	str	r1, [r2, #0]
 8013f86:	e7f5      	b.n	8013f74 <_strtoul_l.isra.0+0xc4>
 8013f88:	080144bf 	.word	0x080144bf

08013f8c <_strtoul_r>:
 8013f8c:	f7ff bf90 	b.w	8013eb0 <_strtoul_l.isra.0>

08013f90 <_malloc_usable_size_r>:
 8013f90:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8013f94:	1f18      	subs	r0, r3, #4
 8013f96:	2b00      	cmp	r3, #0
 8013f98:	bfbc      	itt	lt
 8013f9a:	580b      	ldrlt	r3, [r1, r0]
 8013f9c:	18c0      	addlt	r0, r0, r3
 8013f9e:	4770      	bx	lr

08013fa0 <_init>:
 8013fa0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013fa2:	bf00      	nop
 8013fa4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8013fa6:	bc08      	pop	{r3}
 8013fa8:	469e      	mov	lr, r3
 8013faa:	4770      	bx	lr

08013fac <_fini>:
 8013fac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013fae:	bf00      	nop
 8013fb0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8013fb2:	bc08      	pop	{r3}
 8013fb4:	469e      	mov	lr, r3
 8013fb6:	4770      	bx	lr
