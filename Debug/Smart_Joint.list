
Smart_Joint.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00016fb0  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000006f8  08017140  08017140  00018140  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08017838  08017838  000192ec  2**0
                  CONTENTS
  4 .ARM          00000008  08017838  08017838  00018838  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08017840  08017840  000192ec  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08017840  08017840  00018840  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08017844  08017844  00018844  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000002ec  20000000  08017848  00019000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00005868  200002f0  08017b34  000192f0  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20005b58  08017b34  00019b58  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000192ec  2**0
                  CONTENTS, READONLY
 12 .debug_info   00039d08  00000000  00000000  0001931c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000068cb  00000000  00000000  00053024  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002e68  00000000  00000000  000598f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00002479  00000000  00000000  0005c758  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0003157c  00000000  00000000  0005ebd1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000388fa  00000000  00000000  0009014d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    001249cd  00000000  00000000  000c8a47  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001ed414  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000d10c  00000000  00000000  001ed458  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000066  00000000  00000000  001fa564  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200002f0 	.word	0x200002f0
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08017128 	.word	0x08017128

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200002f4 	.word	0x200002f4
 80001cc:	08017128 	.word	0x08017128

080001d0 <strcmp>:
 80001d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001d8:	2a01      	cmp	r2, #1
 80001da:	bf28      	it	cs
 80001dc:	429a      	cmpcs	r2, r3
 80001de:	d0f7      	beq.n	80001d0 <strcmp>
 80001e0:	1ad0      	subs	r0, r2, r3
 80001e2:	4770      	bx	lr

080001e4 <strlen>:
 80001e4:	4603      	mov	r3, r0
 80001e6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ea:	2a00      	cmp	r2, #0
 80001ec:	d1fb      	bne.n	80001e6 <strlen+0x2>
 80001ee:	1a18      	subs	r0, r3, r0
 80001f0:	3801      	subs	r0, #1
 80001f2:	4770      	bx	lr
	...

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_drsub>:
 80002a0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002a4:	e002      	b.n	80002ac <__adddf3>
 80002a6:	bf00      	nop

080002a8 <__aeabi_dsub>:
 80002a8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002ac <__adddf3>:
 80002ac:	b530      	push	{r4, r5, lr}
 80002ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002b6:	ea94 0f05 	teq	r4, r5
 80002ba:	bf08      	it	eq
 80002bc:	ea90 0f02 	teqeq	r0, r2
 80002c0:	bf1f      	itttt	ne
 80002c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002d2:	f000 80e2 	beq.w	800049a <__adddf3+0x1ee>
 80002d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002de:	bfb8      	it	lt
 80002e0:	426d      	neglt	r5, r5
 80002e2:	dd0c      	ble.n	80002fe <__adddf3+0x52>
 80002e4:	442c      	add	r4, r5
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	ea82 0000 	eor.w	r0, r2, r0
 80002f2:	ea83 0101 	eor.w	r1, r3, r1
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	2d36      	cmp	r5, #54	@ 0x36
 8000300:	bf88      	it	hi
 8000302:	bd30      	pophi	{r4, r5, pc}
 8000304:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000308:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800030c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000310:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000314:	d002      	beq.n	800031c <__adddf3+0x70>
 8000316:	4240      	negs	r0, r0
 8000318:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800031c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000320:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000324:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000328:	d002      	beq.n	8000330 <__adddf3+0x84>
 800032a:	4252      	negs	r2, r2
 800032c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000330:	ea94 0f05 	teq	r4, r5
 8000334:	f000 80a7 	beq.w	8000486 <__adddf3+0x1da>
 8000338:	f1a4 0401 	sub.w	r4, r4, #1
 800033c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000340:	db0d      	blt.n	800035e <__adddf3+0xb2>
 8000342:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000346:	fa22 f205 	lsr.w	r2, r2, r5
 800034a:	1880      	adds	r0, r0, r2
 800034c:	f141 0100 	adc.w	r1, r1, #0
 8000350:	fa03 f20e 	lsl.w	r2, r3, lr
 8000354:	1880      	adds	r0, r0, r2
 8000356:	fa43 f305 	asr.w	r3, r3, r5
 800035a:	4159      	adcs	r1, r3
 800035c:	e00e      	b.n	800037c <__adddf3+0xd0>
 800035e:	f1a5 0520 	sub.w	r5, r5, #32
 8000362:	f10e 0e20 	add.w	lr, lr, #32
 8000366:	2a01      	cmp	r2, #1
 8000368:	fa03 fc0e 	lsl.w	ip, r3, lr
 800036c:	bf28      	it	cs
 800036e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000372:	fa43 f305 	asr.w	r3, r3, r5
 8000376:	18c0      	adds	r0, r0, r3
 8000378:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800037c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000380:	d507      	bpl.n	8000392 <__adddf3+0xe6>
 8000382:	f04f 0e00 	mov.w	lr, #0
 8000386:	f1dc 0c00 	rsbs	ip, ip, #0
 800038a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800038e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000392:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000396:	d31b      	bcc.n	80003d0 <__adddf3+0x124>
 8000398:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800039c:	d30c      	bcc.n	80003b8 <__adddf3+0x10c>
 800039e:	0849      	lsrs	r1, r1, #1
 80003a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003a8:	f104 0401 	add.w	r4, r4, #1
 80003ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003b0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003b4:	f080 809a 	bcs.w	80004ec <__adddf3+0x240>
 80003b8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003bc:	bf08      	it	eq
 80003be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003c2:	f150 0000 	adcs.w	r0, r0, #0
 80003c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ca:	ea41 0105 	orr.w	r1, r1, r5
 80003ce:	bd30      	pop	{r4, r5, pc}
 80003d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003d4:	4140      	adcs	r0, r0
 80003d6:	eb41 0101 	adc.w	r1, r1, r1
 80003da:	3c01      	subs	r4, #1
 80003dc:	bf28      	it	cs
 80003de:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003e2:	d2e9      	bcs.n	80003b8 <__adddf3+0x10c>
 80003e4:	f091 0f00 	teq	r1, #0
 80003e8:	bf04      	itt	eq
 80003ea:	4601      	moveq	r1, r0
 80003ec:	2000      	moveq	r0, #0
 80003ee:	fab1 f381 	clz	r3, r1
 80003f2:	bf08      	it	eq
 80003f4:	3320      	addeq	r3, #32
 80003f6:	f1a3 030b 	sub.w	r3, r3, #11
 80003fa:	f1b3 0220 	subs.w	r2, r3, #32
 80003fe:	da0c      	bge.n	800041a <__adddf3+0x16e>
 8000400:	320c      	adds	r2, #12
 8000402:	dd08      	ble.n	8000416 <__adddf3+0x16a>
 8000404:	f102 0c14 	add.w	ip, r2, #20
 8000408:	f1c2 020c 	rsb	r2, r2, #12
 800040c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000410:	fa21 f102 	lsr.w	r1, r1, r2
 8000414:	e00c      	b.n	8000430 <__adddf3+0x184>
 8000416:	f102 0214 	add.w	r2, r2, #20
 800041a:	bfd8      	it	le
 800041c:	f1c2 0c20 	rsble	ip, r2, #32
 8000420:	fa01 f102 	lsl.w	r1, r1, r2
 8000424:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000428:	bfdc      	itt	le
 800042a:	ea41 010c 	orrle.w	r1, r1, ip
 800042e:	4090      	lslle	r0, r2
 8000430:	1ae4      	subs	r4, r4, r3
 8000432:	bfa2      	ittt	ge
 8000434:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000438:	4329      	orrge	r1, r5
 800043a:	bd30      	popge	{r4, r5, pc}
 800043c:	ea6f 0404 	mvn.w	r4, r4
 8000440:	3c1f      	subs	r4, #31
 8000442:	da1c      	bge.n	800047e <__adddf3+0x1d2>
 8000444:	340c      	adds	r4, #12
 8000446:	dc0e      	bgt.n	8000466 <__adddf3+0x1ba>
 8000448:	f104 0414 	add.w	r4, r4, #20
 800044c:	f1c4 0220 	rsb	r2, r4, #32
 8000450:	fa20 f004 	lsr.w	r0, r0, r4
 8000454:	fa01 f302 	lsl.w	r3, r1, r2
 8000458:	ea40 0003 	orr.w	r0, r0, r3
 800045c:	fa21 f304 	lsr.w	r3, r1, r4
 8000460:	ea45 0103 	orr.w	r1, r5, r3
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f1c4 040c 	rsb	r4, r4, #12
 800046a:	f1c4 0220 	rsb	r2, r4, #32
 800046e:	fa20 f002 	lsr.w	r0, r0, r2
 8000472:	fa01 f304 	lsl.w	r3, r1, r4
 8000476:	ea40 0003 	orr.w	r0, r0, r3
 800047a:	4629      	mov	r1, r5
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	fa21 f004 	lsr.w	r0, r1, r4
 8000482:	4629      	mov	r1, r5
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f094 0f00 	teq	r4, #0
 800048a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800048e:	bf06      	itte	eq
 8000490:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000494:	3401      	addeq	r4, #1
 8000496:	3d01      	subne	r5, #1
 8000498:	e74e      	b.n	8000338 <__adddf3+0x8c>
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf18      	it	ne
 80004a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004a4:	d029      	beq.n	80004fa <__adddf3+0x24e>
 80004a6:	ea94 0f05 	teq	r4, r5
 80004aa:	bf08      	it	eq
 80004ac:	ea90 0f02 	teqeq	r0, r2
 80004b0:	d005      	beq.n	80004be <__adddf3+0x212>
 80004b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004b6:	bf04      	itt	eq
 80004b8:	4619      	moveq	r1, r3
 80004ba:	4610      	moveq	r0, r2
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	ea91 0f03 	teq	r1, r3
 80004c2:	bf1e      	ittt	ne
 80004c4:	2100      	movne	r1, #0
 80004c6:	2000      	movne	r0, #0
 80004c8:	bd30      	popne	{r4, r5, pc}
 80004ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ce:	d105      	bne.n	80004dc <__adddf3+0x230>
 80004d0:	0040      	lsls	r0, r0, #1
 80004d2:	4149      	adcs	r1, r1
 80004d4:	bf28      	it	cs
 80004d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004da:	bd30      	pop	{r4, r5, pc}
 80004dc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004e0:	bf3c      	itt	cc
 80004e2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004e6:	bd30      	popcc	{r4, r5, pc}
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004ec:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd30      	pop	{r4, r5, pc}
 80004fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fe:	bf1a      	itte	ne
 8000500:	4619      	movne	r1, r3
 8000502:	4610      	movne	r0, r2
 8000504:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000508:	bf1c      	itt	ne
 800050a:	460b      	movne	r3, r1
 800050c:	4602      	movne	r2, r0
 800050e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000512:	bf06      	itte	eq
 8000514:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000518:	ea91 0f03 	teqeq	r1, r3
 800051c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	bf00      	nop

08000524 <__aeabi_ui2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f04f 0500 	mov.w	r5, #0
 800053c:	f04f 0100 	mov.w	r1, #0
 8000540:	e750      	b.n	80003e4 <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_i2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000558:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800055c:	bf48      	it	mi
 800055e:	4240      	negmi	r0, r0
 8000560:	f04f 0100 	mov.w	r1, #0
 8000564:	e73e      	b.n	80003e4 <__adddf3+0x138>
 8000566:	bf00      	nop

08000568 <__aeabi_f2d>:
 8000568:	0042      	lsls	r2, r0, #1
 800056a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800056e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000572:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000576:	bf1f      	itttt	ne
 8000578:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800057c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000580:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000584:	4770      	bxne	lr
 8000586:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800058a:	bf08      	it	eq
 800058c:	4770      	bxeq	lr
 800058e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000592:	bf04      	itt	eq
 8000594:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000598:	4770      	bxeq	lr
 800059a:	b530      	push	{r4, r5, lr}
 800059c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005a4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005a8:	e71c      	b.n	80003e4 <__adddf3+0x138>
 80005aa:	bf00      	nop

080005ac <__aeabi_ul2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f04f 0500 	mov.w	r5, #0
 80005ba:	e00a      	b.n	80005d2 <__aeabi_l2d+0x16>

080005bc <__aeabi_l2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ca:	d502      	bpl.n	80005d2 <__aeabi_l2d+0x16>
 80005cc:	4240      	negs	r0, r0
 80005ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005d2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005d6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005de:	f43f aed8 	beq.w	8000392 <__adddf3+0xe6>
 80005e2:	f04f 0203 	mov.w	r2, #3
 80005e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ea:	bf18      	it	ne
 80005ec:	3203      	addne	r2, #3
 80005ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005f2:	bf18      	it	ne
 80005f4:	3203      	addne	r2, #3
 80005f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005fa:	f1c2 0320 	rsb	r3, r2, #32
 80005fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000602:	fa20 f002 	lsr.w	r0, r0, r2
 8000606:	fa01 fe03 	lsl.w	lr, r1, r3
 800060a:	ea40 000e 	orr.w	r0, r0, lr
 800060e:	fa21 f102 	lsr.w	r1, r1, r2
 8000612:	4414      	add	r4, r2
 8000614:	e6bd      	b.n	8000392 <__adddf3+0xe6>
 8000616:	bf00      	nop

08000618 <__aeabi_dmul>:
 8000618:	b570      	push	{r4, r5, r6, lr}
 800061a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800061e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000622:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000626:	bf1d      	ittte	ne
 8000628:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800062c:	ea94 0f0c 	teqne	r4, ip
 8000630:	ea95 0f0c 	teqne	r5, ip
 8000634:	f000 f8de 	bleq	80007f4 <__aeabi_dmul+0x1dc>
 8000638:	442c      	add	r4, r5
 800063a:	ea81 0603 	eor.w	r6, r1, r3
 800063e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000642:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000646:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800064a:	bf18      	it	ne
 800064c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000650:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000654:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000658:	d038      	beq.n	80006cc <__aeabi_dmul+0xb4>
 800065a:	fba0 ce02 	umull	ip, lr, r0, r2
 800065e:	f04f 0500 	mov.w	r5, #0
 8000662:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000666:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800066a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800066e:	f04f 0600 	mov.w	r6, #0
 8000672:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000676:	f09c 0f00 	teq	ip, #0
 800067a:	bf18      	it	ne
 800067c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000680:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000684:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000688:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800068c:	d204      	bcs.n	8000698 <__aeabi_dmul+0x80>
 800068e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000692:	416d      	adcs	r5, r5
 8000694:	eb46 0606 	adc.w	r6, r6, r6
 8000698:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800069c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ac:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006b0:	bf88      	it	hi
 80006b2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006b6:	d81e      	bhi.n	80006f6 <__aeabi_dmul+0xde>
 80006b8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006bc:	bf08      	it	eq
 80006be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006c2:	f150 0000 	adcs.w	r0, r0, #0
 80006c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006d0:	ea46 0101 	orr.w	r1, r6, r1
 80006d4:	ea40 0002 	orr.w	r0, r0, r2
 80006d8:	ea81 0103 	eor.w	r1, r1, r3
 80006dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006e0:	bfc2      	ittt	gt
 80006e2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	popgt	{r4, r5, r6, pc}
 80006ec:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006f0:	f04f 0e00 	mov.w	lr, #0
 80006f4:	3c01      	subs	r4, #1
 80006f6:	f300 80ab 	bgt.w	8000850 <__aeabi_dmul+0x238>
 80006fa:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006fe:	bfde      	ittt	le
 8000700:	2000      	movle	r0, #0
 8000702:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000706:	bd70      	pople	{r4, r5, r6, pc}
 8000708:	f1c4 0400 	rsb	r4, r4, #0
 800070c:	3c20      	subs	r4, #32
 800070e:	da35      	bge.n	800077c <__aeabi_dmul+0x164>
 8000710:	340c      	adds	r4, #12
 8000712:	dc1b      	bgt.n	800074c <__aeabi_dmul+0x134>
 8000714:	f104 0414 	add.w	r4, r4, #20
 8000718:	f1c4 0520 	rsb	r5, r4, #32
 800071c:	fa00 f305 	lsl.w	r3, r0, r5
 8000720:	fa20 f004 	lsr.w	r0, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea40 0002 	orr.w	r0, r0, r2
 800072c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000730:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000734:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000738:	fa21 f604 	lsr.w	r6, r1, r4
 800073c:	eb42 0106 	adc.w	r1, r2, r6
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 040c 	rsb	r4, r4, #12
 8000750:	f1c4 0520 	rsb	r5, r4, #32
 8000754:	fa00 f304 	lsl.w	r3, r0, r4
 8000758:	fa20 f005 	lsr.w	r0, r0, r5
 800075c:	fa01 f204 	lsl.w	r2, r1, r4
 8000760:	ea40 0002 	orr.w	r0, r0, r2
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000768:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800076c:	f141 0100 	adc.w	r1, r1, #0
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 0520 	rsb	r5, r4, #32
 8000780:	fa00 f205 	lsl.w	r2, r0, r5
 8000784:	ea4e 0e02 	orr.w	lr, lr, r2
 8000788:	fa20 f304 	lsr.w	r3, r0, r4
 800078c:	fa01 f205 	lsl.w	r2, r1, r5
 8000790:	ea43 0302 	orr.w	r3, r3, r2
 8000794:	fa21 f004 	lsr.w	r0, r1, r4
 8000798:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800079c:	fa21 f204 	lsr.w	r2, r1, r4
 80007a0:	ea20 0002 	bic.w	r0, r0, r2
 80007a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ac:	bf08      	it	eq
 80007ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007b2:	bd70      	pop	{r4, r5, r6, pc}
 80007b4:	f094 0f00 	teq	r4, #0
 80007b8:	d10f      	bne.n	80007da <__aeabi_dmul+0x1c2>
 80007ba:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007be:	0040      	lsls	r0, r0, #1
 80007c0:	eb41 0101 	adc.w	r1, r1, r1
 80007c4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3c01      	subeq	r4, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1a6>
 80007ce:	ea41 0106 	orr.w	r1, r1, r6
 80007d2:	f095 0f00 	teq	r5, #0
 80007d6:	bf18      	it	ne
 80007d8:	4770      	bxne	lr
 80007da:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007de:	0052      	lsls	r2, r2, #1
 80007e0:	eb43 0303 	adc.w	r3, r3, r3
 80007e4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3d01      	subeq	r5, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1c6>
 80007ee:	ea43 0306 	orr.w	r3, r3, r6
 80007f2:	4770      	bx	lr
 80007f4:	ea94 0f0c 	teq	r4, ip
 80007f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007fc:	bf18      	it	ne
 80007fe:	ea95 0f0c 	teqne	r5, ip
 8000802:	d00c      	beq.n	800081e <__aeabi_dmul+0x206>
 8000804:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000808:	bf18      	it	ne
 800080a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080e:	d1d1      	bne.n	80007b4 <__aeabi_dmul+0x19c>
 8000810:	ea81 0103 	eor.w	r1, r1, r3
 8000814:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000818:	f04f 0000 	mov.w	r0, #0
 800081c:	bd70      	pop	{r4, r5, r6, pc}
 800081e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000822:	bf06      	itte	eq
 8000824:	4610      	moveq	r0, r2
 8000826:	4619      	moveq	r1, r3
 8000828:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082c:	d019      	beq.n	8000862 <__aeabi_dmul+0x24a>
 800082e:	ea94 0f0c 	teq	r4, ip
 8000832:	d102      	bne.n	800083a <__aeabi_dmul+0x222>
 8000834:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000838:	d113      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800083a:	ea95 0f0c 	teq	r5, ip
 800083e:	d105      	bne.n	800084c <__aeabi_dmul+0x234>
 8000840:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000844:	bf1c      	itt	ne
 8000846:	4610      	movne	r0, r2
 8000848:	4619      	movne	r1, r3
 800084a:	d10a      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800084c:	ea81 0103 	eor.w	r1, r1, r3
 8000850:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000854:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000858:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800085c:	f04f 0000 	mov.w	r0, #0
 8000860:	bd70      	pop	{r4, r5, r6, pc}
 8000862:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000866:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800086a:	bd70      	pop	{r4, r5, r6, pc}

0800086c <__aeabi_ddiv>:
 800086c:	b570      	push	{r4, r5, r6, lr}
 800086e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000872:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000876:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800087a:	bf1d      	ittte	ne
 800087c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000880:	ea94 0f0c 	teqne	r4, ip
 8000884:	ea95 0f0c 	teqne	r5, ip
 8000888:	f000 f8a7 	bleq	80009da <__aeabi_ddiv+0x16e>
 800088c:	eba4 0405 	sub.w	r4, r4, r5
 8000890:	ea81 0e03 	eor.w	lr, r1, r3
 8000894:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000898:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800089c:	f000 8088 	beq.w	80009b0 <__aeabi_ddiv+0x144>
 80008a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008a4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008a8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ac:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008b0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008b4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008b8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008bc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008c0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008c4:	429d      	cmp	r5, r3
 80008c6:	bf08      	it	eq
 80008c8:	4296      	cmpeq	r6, r2
 80008ca:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ce:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008d2:	d202      	bcs.n	80008da <__aeabi_ddiv+0x6e>
 80008d4:	085b      	lsrs	r3, r3, #1
 80008d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008da:	1ab6      	subs	r6, r6, r2
 80008dc:	eb65 0503 	sbc.w	r5, r5, r3
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ea:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000948:	ea55 0e06 	orrs.w	lr, r5, r6
 800094c:	d018      	beq.n	8000980 <__aeabi_ddiv+0x114>
 800094e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000952:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000956:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800095a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800095e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000962:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000966:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800096a:	d1c0      	bne.n	80008ee <__aeabi_ddiv+0x82>
 800096c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000970:	d10b      	bne.n	800098a <__aeabi_ddiv+0x11e>
 8000972:	ea41 0100 	orr.w	r1, r1, r0
 8000976:	f04f 0000 	mov.w	r0, #0
 800097a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800097e:	e7b6      	b.n	80008ee <__aeabi_ddiv+0x82>
 8000980:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000984:	bf04      	itt	eq
 8000986:	4301      	orreq	r1, r0
 8000988:	2000      	moveq	r0, #0
 800098a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800098e:	bf88      	it	hi
 8000990:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000994:	f63f aeaf 	bhi.w	80006f6 <__aeabi_dmul+0xde>
 8000998:	ebb5 0c03 	subs.w	ip, r5, r3
 800099c:	bf04      	itt	eq
 800099e:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009a2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009a6:	f150 0000 	adcs.w	r0, r0, #0
 80009aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ae:	bd70      	pop	{r4, r5, r6, pc}
 80009b0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009b4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009b8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009bc:	bfc2      	ittt	gt
 80009be:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009c2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009c6:	bd70      	popgt	{r4, r5, r6, pc}
 80009c8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009cc:	f04f 0e00 	mov.w	lr, #0
 80009d0:	3c01      	subs	r4, #1
 80009d2:	e690      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009d4:	ea45 0e06 	orr.w	lr, r5, r6
 80009d8:	e68d      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009da:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009de:	ea94 0f0c 	teq	r4, ip
 80009e2:	bf08      	it	eq
 80009e4:	ea95 0f0c 	teqeq	r5, ip
 80009e8:	f43f af3b 	beq.w	8000862 <__aeabi_dmul+0x24a>
 80009ec:	ea94 0f0c 	teq	r4, ip
 80009f0:	d10a      	bne.n	8000a08 <__aeabi_ddiv+0x19c>
 80009f2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009f6:	f47f af34 	bne.w	8000862 <__aeabi_dmul+0x24a>
 80009fa:	ea95 0f0c 	teq	r5, ip
 80009fe:	f47f af25 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a02:	4610      	mov	r0, r2
 8000a04:	4619      	mov	r1, r3
 8000a06:	e72c      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a08:	ea95 0f0c 	teq	r5, ip
 8000a0c:	d106      	bne.n	8000a1c <__aeabi_ddiv+0x1b0>
 8000a0e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a12:	f43f aefd 	beq.w	8000810 <__aeabi_dmul+0x1f8>
 8000a16:	4610      	mov	r0, r2
 8000a18:	4619      	mov	r1, r3
 8000a1a:	e722      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a1c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a20:	bf18      	it	ne
 8000a22:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a26:	f47f aec5 	bne.w	80007b4 <__aeabi_dmul+0x19c>
 8000a2a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a2e:	f47f af0d 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a32:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a36:	f47f aeeb 	bne.w	8000810 <__aeabi_dmul+0x1f8>
 8000a3a:	e712      	b.n	8000862 <__aeabi_dmul+0x24a>

08000a3c <__aeabi_d2uiz>:
 8000a3c:	004a      	lsls	r2, r1, #1
 8000a3e:	d211      	bcs.n	8000a64 <__aeabi_d2uiz+0x28>
 8000a40:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a44:	d211      	bcs.n	8000a6a <__aeabi_d2uiz+0x2e>
 8000a46:	d50d      	bpl.n	8000a64 <__aeabi_d2uiz+0x28>
 8000a48:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a4c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a50:	d40e      	bmi.n	8000a70 <__aeabi_d2uiz+0x34>
 8000a52:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a56:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000a5a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	4770      	bx	lr
 8000a64:	f04f 0000 	mov.w	r0, #0
 8000a68:	4770      	bx	lr
 8000a6a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a6e:	d102      	bne.n	8000a76 <__aeabi_d2uiz+0x3a>
 8000a70:	f04f 30ff 	mov.w	r0, #4294967295
 8000a74:	4770      	bx	lr
 8000a76:	f04f 0000 	mov.w	r0, #0
 8000a7a:	4770      	bx	lr

08000a7c <__aeabi_uldivmod>:
 8000a7c:	b953      	cbnz	r3, 8000a94 <__aeabi_uldivmod+0x18>
 8000a7e:	b94a      	cbnz	r2, 8000a94 <__aeabi_uldivmod+0x18>
 8000a80:	2900      	cmp	r1, #0
 8000a82:	bf08      	it	eq
 8000a84:	2800      	cmpeq	r0, #0
 8000a86:	bf1c      	itt	ne
 8000a88:	f04f 31ff 	movne.w	r1, #4294967295
 8000a8c:	f04f 30ff 	movne.w	r0, #4294967295
 8000a90:	f000 b988 	b.w	8000da4 <__aeabi_idiv0>
 8000a94:	f1ad 0c08 	sub.w	ip, sp, #8
 8000a98:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000a9c:	f000 f806 	bl	8000aac <__udivmoddi4>
 8000aa0:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000aa4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000aa8:	b004      	add	sp, #16
 8000aaa:	4770      	bx	lr

08000aac <__udivmoddi4>:
 8000aac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000ab0:	9d08      	ldr	r5, [sp, #32]
 8000ab2:	468e      	mov	lr, r1
 8000ab4:	4604      	mov	r4, r0
 8000ab6:	4688      	mov	r8, r1
 8000ab8:	2b00      	cmp	r3, #0
 8000aba:	d14a      	bne.n	8000b52 <__udivmoddi4+0xa6>
 8000abc:	428a      	cmp	r2, r1
 8000abe:	4617      	mov	r7, r2
 8000ac0:	d962      	bls.n	8000b88 <__udivmoddi4+0xdc>
 8000ac2:	fab2 f682 	clz	r6, r2
 8000ac6:	b14e      	cbz	r6, 8000adc <__udivmoddi4+0x30>
 8000ac8:	f1c6 0320 	rsb	r3, r6, #32
 8000acc:	fa01 f806 	lsl.w	r8, r1, r6
 8000ad0:	fa20 f303 	lsr.w	r3, r0, r3
 8000ad4:	40b7      	lsls	r7, r6
 8000ad6:	ea43 0808 	orr.w	r8, r3, r8
 8000ada:	40b4      	lsls	r4, r6
 8000adc:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000ae0:	fa1f fc87 	uxth.w	ip, r7
 8000ae4:	fbb8 f1fe 	udiv	r1, r8, lr
 8000ae8:	0c23      	lsrs	r3, r4, #16
 8000aea:	fb0e 8811 	mls	r8, lr, r1, r8
 8000aee:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000af2:	fb01 f20c 	mul.w	r2, r1, ip
 8000af6:	429a      	cmp	r2, r3
 8000af8:	d909      	bls.n	8000b0e <__udivmoddi4+0x62>
 8000afa:	18fb      	adds	r3, r7, r3
 8000afc:	f101 30ff 	add.w	r0, r1, #4294967295
 8000b00:	f080 80ea 	bcs.w	8000cd8 <__udivmoddi4+0x22c>
 8000b04:	429a      	cmp	r2, r3
 8000b06:	f240 80e7 	bls.w	8000cd8 <__udivmoddi4+0x22c>
 8000b0a:	3902      	subs	r1, #2
 8000b0c:	443b      	add	r3, r7
 8000b0e:	1a9a      	subs	r2, r3, r2
 8000b10:	b2a3      	uxth	r3, r4
 8000b12:	fbb2 f0fe 	udiv	r0, r2, lr
 8000b16:	fb0e 2210 	mls	r2, lr, r0, r2
 8000b1a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000b1e:	fb00 fc0c 	mul.w	ip, r0, ip
 8000b22:	459c      	cmp	ip, r3
 8000b24:	d909      	bls.n	8000b3a <__udivmoddi4+0x8e>
 8000b26:	18fb      	adds	r3, r7, r3
 8000b28:	f100 32ff 	add.w	r2, r0, #4294967295
 8000b2c:	f080 80d6 	bcs.w	8000cdc <__udivmoddi4+0x230>
 8000b30:	459c      	cmp	ip, r3
 8000b32:	f240 80d3 	bls.w	8000cdc <__udivmoddi4+0x230>
 8000b36:	443b      	add	r3, r7
 8000b38:	3802      	subs	r0, #2
 8000b3a:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000b3e:	eba3 030c 	sub.w	r3, r3, ip
 8000b42:	2100      	movs	r1, #0
 8000b44:	b11d      	cbz	r5, 8000b4e <__udivmoddi4+0xa2>
 8000b46:	40f3      	lsrs	r3, r6
 8000b48:	2200      	movs	r2, #0
 8000b4a:	e9c5 3200 	strd	r3, r2, [r5]
 8000b4e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b52:	428b      	cmp	r3, r1
 8000b54:	d905      	bls.n	8000b62 <__udivmoddi4+0xb6>
 8000b56:	b10d      	cbz	r5, 8000b5c <__udivmoddi4+0xb0>
 8000b58:	e9c5 0100 	strd	r0, r1, [r5]
 8000b5c:	2100      	movs	r1, #0
 8000b5e:	4608      	mov	r0, r1
 8000b60:	e7f5      	b.n	8000b4e <__udivmoddi4+0xa2>
 8000b62:	fab3 f183 	clz	r1, r3
 8000b66:	2900      	cmp	r1, #0
 8000b68:	d146      	bne.n	8000bf8 <__udivmoddi4+0x14c>
 8000b6a:	4573      	cmp	r3, lr
 8000b6c:	d302      	bcc.n	8000b74 <__udivmoddi4+0xc8>
 8000b6e:	4282      	cmp	r2, r0
 8000b70:	f200 8105 	bhi.w	8000d7e <__udivmoddi4+0x2d2>
 8000b74:	1a84      	subs	r4, r0, r2
 8000b76:	eb6e 0203 	sbc.w	r2, lr, r3
 8000b7a:	2001      	movs	r0, #1
 8000b7c:	4690      	mov	r8, r2
 8000b7e:	2d00      	cmp	r5, #0
 8000b80:	d0e5      	beq.n	8000b4e <__udivmoddi4+0xa2>
 8000b82:	e9c5 4800 	strd	r4, r8, [r5]
 8000b86:	e7e2      	b.n	8000b4e <__udivmoddi4+0xa2>
 8000b88:	2a00      	cmp	r2, #0
 8000b8a:	f000 8090 	beq.w	8000cae <__udivmoddi4+0x202>
 8000b8e:	fab2 f682 	clz	r6, r2
 8000b92:	2e00      	cmp	r6, #0
 8000b94:	f040 80a4 	bne.w	8000ce0 <__udivmoddi4+0x234>
 8000b98:	1a8a      	subs	r2, r1, r2
 8000b9a:	0c03      	lsrs	r3, r0, #16
 8000b9c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000ba0:	b280      	uxth	r0, r0
 8000ba2:	b2bc      	uxth	r4, r7
 8000ba4:	2101      	movs	r1, #1
 8000ba6:	fbb2 fcfe 	udiv	ip, r2, lr
 8000baa:	fb0e 221c 	mls	r2, lr, ip, r2
 8000bae:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000bb2:	fb04 f20c 	mul.w	r2, r4, ip
 8000bb6:	429a      	cmp	r2, r3
 8000bb8:	d907      	bls.n	8000bca <__udivmoddi4+0x11e>
 8000bba:	18fb      	adds	r3, r7, r3
 8000bbc:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000bc0:	d202      	bcs.n	8000bc8 <__udivmoddi4+0x11c>
 8000bc2:	429a      	cmp	r2, r3
 8000bc4:	f200 80e0 	bhi.w	8000d88 <__udivmoddi4+0x2dc>
 8000bc8:	46c4      	mov	ip, r8
 8000bca:	1a9b      	subs	r3, r3, r2
 8000bcc:	fbb3 f2fe 	udiv	r2, r3, lr
 8000bd0:	fb0e 3312 	mls	r3, lr, r2, r3
 8000bd4:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000bd8:	fb02 f404 	mul.w	r4, r2, r4
 8000bdc:	429c      	cmp	r4, r3
 8000bde:	d907      	bls.n	8000bf0 <__udivmoddi4+0x144>
 8000be0:	18fb      	adds	r3, r7, r3
 8000be2:	f102 30ff 	add.w	r0, r2, #4294967295
 8000be6:	d202      	bcs.n	8000bee <__udivmoddi4+0x142>
 8000be8:	429c      	cmp	r4, r3
 8000bea:	f200 80ca 	bhi.w	8000d82 <__udivmoddi4+0x2d6>
 8000bee:	4602      	mov	r2, r0
 8000bf0:	1b1b      	subs	r3, r3, r4
 8000bf2:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000bf6:	e7a5      	b.n	8000b44 <__udivmoddi4+0x98>
 8000bf8:	f1c1 0620 	rsb	r6, r1, #32
 8000bfc:	408b      	lsls	r3, r1
 8000bfe:	fa22 f706 	lsr.w	r7, r2, r6
 8000c02:	431f      	orrs	r7, r3
 8000c04:	fa0e f401 	lsl.w	r4, lr, r1
 8000c08:	fa20 f306 	lsr.w	r3, r0, r6
 8000c0c:	fa2e fe06 	lsr.w	lr, lr, r6
 8000c10:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000c14:	4323      	orrs	r3, r4
 8000c16:	fa00 f801 	lsl.w	r8, r0, r1
 8000c1a:	fa1f fc87 	uxth.w	ip, r7
 8000c1e:	fbbe f0f9 	udiv	r0, lr, r9
 8000c22:	0c1c      	lsrs	r4, r3, #16
 8000c24:	fb09 ee10 	mls	lr, r9, r0, lr
 8000c28:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000c2c:	fb00 fe0c 	mul.w	lr, r0, ip
 8000c30:	45a6      	cmp	lr, r4
 8000c32:	fa02 f201 	lsl.w	r2, r2, r1
 8000c36:	d909      	bls.n	8000c4c <__udivmoddi4+0x1a0>
 8000c38:	193c      	adds	r4, r7, r4
 8000c3a:	f100 3aff 	add.w	sl, r0, #4294967295
 8000c3e:	f080 809c 	bcs.w	8000d7a <__udivmoddi4+0x2ce>
 8000c42:	45a6      	cmp	lr, r4
 8000c44:	f240 8099 	bls.w	8000d7a <__udivmoddi4+0x2ce>
 8000c48:	3802      	subs	r0, #2
 8000c4a:	443c      	add	r4, r7
 8000c4c:	eba4 040e 	sub.w	r4, r4, lr
 8000c50:	fa1f fe83 	uxth.w	lr, r3
 8000c54:	fbb4 f3f9 	udiv	r3, r4, r9
 8000c58:	fb09 4413 	mls	r4, r9, r3, r4
 8000c5c:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000c60:	fb03 fc0c 	mul.w	ip, r3, ip
 8000c64:	45a4      	cmp	ip, r4
 8000c66:	d908      	bls.n	8000c7a <__udivmoddi4+0x1ce>
 8000c68:	193c      	adds	r4, r7, r4
 8000c6a:	f103 3eff 	add.w	lr, r3, #4294967295
 8000c6e:	f080 8082 	bcs.w	8000d76 <__udivmoddi4+0x2ca>
 8000c72:	45a4      	cmp	ip, r4
 8000c74:	d97f      	bls.n	8000d76 <__udivmoddi4+0x2ca>
 8000c76:	3b02      	subs	r3, #2
 8000c78:	443c      	add	r4, r7
 8000c7a:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000c7e:	eba4 040c 	sub.w	r4, r4, ip
 8000c82:	fba0 ec02 	umull	lr, ip, r0, r2
 8000c86:	4564      	cmp	r4, ip
 8000c88:	4673      	mov	r3, lr
 8000c8a:	46e1      	mov	r9, ip
 8000c8c:	d362      	bcc.n	8000d54 <__udivmoddi4+0x2a8>
 8000c8e:	d05f      	beq.n	8000d50 <__udivmoddi4+0x2a4>
 8000c90:	b15d      	cbz	r5, 8000caa <__udivmoddi4+0x1fe>
 8000c92:	ebb8 0203 	subs.w	r2, r8, r3
 8000c96:	eb64 0409 	sbc.w	r4, r4, r9
 8000c9a:	fa04 f606 	lsl.w	r6, r4, r6
 8000c9e:	fa22 f301 	lsr.w	r3, r2, r1
 8000ca2:	431e      	orrs	r6, r3
 8000ca4:	40cc      	lsrs	r4, r1
 8000ca6:	e9c5 6400 	strd	r6, r4, [r5]
 8000caa:	2100      	movs	r1, #0
 8000cac:	e74f      	b.n	8000b4e <__udivmoddi4+0xa2>
 8000cae:	fbb1 fcf2 	udiv	ip, r1, r2
 8000cb2:	0c01      	lsrs	r1, r0, #16
 8000cb4:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000cb8:	b280      	uxth	r0, r0
 8000cba:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000cbe:	463b      	mov	r3, r7
 8000cc0:	4638      	mov	r0, r7
 8000cc2:	463c      	mov	r4, r7
 8000cc4:	46b8      	mov	r8, r7
 8000cc6:	46be      	mov	lr, r7
 8000cc8:	2620      	movs	r6, #32
 8000cca:	fbb1 f1f7 	udiv	r1, r1, r7
 8000cce:	eba2 0208 	sub.w	r2, r2, r8
 8000cd2:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000cd6:	e766      	b.n	8000ba6 <__udivmoddi4+0xfa>
 8000cd8:	4601      	mov	r1, r0
 8000cda:	e718      	b.n	8000b0e <__udivmoddi4+0x62>
 8000cdc:	4610      	mov	r0, r2
 8000cde:	e72c      	b.n	8000b3a <__udivmoddi4+0x8e>
 8000ce0:	f1c6 0220 	rsb	r2, r6, #32
 8000ce4:	fa2e f302 	lsr.w	r3, lr, r2
 8000ce8:	40b7      	lsls	r7, r6
 8000cea:	40b1      	lsls	r1, r6
 8000cec:	fa20 f202 	lsr.w	r2, r0, r2
 8000cf0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000cf4:	430a      	orrs	r2, r1
 8000cf6:	fbb3 f8fe 	udiv	r8, r3, lr
 8000cfa:	b2bc      	uxth	r4, r7
 8000cfc:	fb0e 3318 	mls	r3, lr, r8, r3
 8000d00:	0c11      	lsrs	r1, r2, #16
 8000d02:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d06:	fb08 f904 	mul.w	r9, r8, r4
 8000d0a:	40b0      	lsls	r0, r6
 8000d0c:	4589      	cmp	r9, r1
 8000d0e:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000d12:	b280      	uxth	r0, r0
 8000d14:	d93e      	bls.n	8000d94 <__udivmoddi4+0x2e8>
 8000d16:	1879      	adds	r1, r7, r1
 8000d18:	f108 3cff 	add.w	ip, r8, #4294967295
 8000d1c:	d201      	bcs.n	8000d22 <__udivmoddi4+0x276>
 8000d1e:	4589      	cmp	r9, r1
 8000d20:	d81f      	bhi.n	8000d62 <__udivmoddi4+0x2b6>
 8000d22:	eba1 0109 	sub.w	r1, r1, r9
 8000d26:	fbb1 f9fe 	udiv	r9, r1, lr
 8000d2a:	fb09 f804 	mul.w	r8, r9, r4
 8000d2e:	fb0e 1119 	mls	r1, lr, r9, r1
 8000d32:	b292      	uxth	r2, r2
 8000d34:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000d38:	4542      	cmp	r2, r8
 8000d3a:	d229      	bcs.n	8000d90 <__udivmoddi4+0x2e4>
 8000d3c:	18ba      	adds	r2, r7, r2
 8000d3e:	f109 31ff 	add.w	r1, r9, #4294967295
 8000d42:	d2c4      	bcs.n	8000cce <__udivmoddi4+0x222>
 8000d44:	4542      	cmp	r2, r8
 8000d46:	d2c2      	bcs.n	8000cce <__udivmoddi4+0x222>
 8000d48:	f1a9 0102 	sub.w	r1, r9, #2
 8000d4c:	443a      	add	r2, r7
 8000d4e:	e7be      	b.n	8000cce <__udivmoddi4+0x222>
 8000d50:	45f0      	cmp	r8, lr
 8000d52:	d29d      	bcs.n	8000c90 <__udivmoddi4+0x1e4>
 8000d54:	ebbe 0302 	subs.w	r3, lr, r2
 8000d58:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000d5c:	3801      	subs	r0, #1
 8000d5e:	46e1      	mov	r9, ip
 8000d60:	e796      	b.n	8000c90 <__udivmoddi4+0x1e4>
 8000d62:	eba7 0909 	sub.w	r9, r7, r9
 8000d66:	4449      	add	r1, r9
 8000d68:	f1a8 0c02 	sub.w	ip, r8, #2
 8000d6c:	fbb1 f9fe 	udiv	r9, r1, lr
 8000d70:	fb09 f804 	mul.w	r8, r9, r4
 8000d74:	e7db      	b.n	8000d2e <__udivmoddi4+0x282>
 8000d76:	4673      	mov	r3, lr
 8000d78:	e77f      	b.n	8000c7a <__udivmoddi4+0x1ce>
 8000d7a:	4650      	mov	r0, sl
 8000d7c:	e766      	b.n	8000c4c <__udivmoddi4+0x1a0>
 8000d7e:	4608      	mov	r0, r1
 8000d80:	e6fd      	b.n	8000b7e <__udivmoddi4+0xd2>
 8000d82:	443b      	add	r3, r7
 8000d84:	3a02      	subs	r2, #2
 8000d86:	e733      	b.n	8000bf0 <__udivmoddi4+0x144>
 8000d88:	f1ac 0c02 	sub.w	ip, ip, #2
 8000d8c:	443b      	add	r3, r7
 8000d8e:	e71c      	b.n	8000bca <__udivmoddi4+0x11e>
 8000d90:	4649      	mov	r1, r9
 8000d92:	e79c      	b.n	8000cce <__udivmoddi4+0x222>
 8000d94:	eba1 0109 	sub.w	r1, r1, r9
 8000d98:	46c4      	mov	ip, r8
 8000d9a:	fbb1 f9fe 	udiv	r9, r1, lr
 8000d9e:	fb09 f804 	mul.w	r8, r9, r4
 8000da2:	e7c4      	b.n	8000d2e <__udivmoddi4+0x282>

08000da4 <__aeabi_idiv0>:
 8000da4:	4770      	bx	lr
 8000da6:	bf00      	nop

08000da8 <LL_USART_SetBaudRate>:
                                          uint32_t BaudRate)
#else
__STATIC_INLINE void LL_USART_SetBaudRate(USART_TypeDef *USARTx, uint32_t PeriphClk, uint32_t OverSampling,
                                          uint32_t BaudRate)
#endif /* USART_PRESC_PRESCALER */
{
 8000da8:	b480      	push	{r7}
 8000daa:	b087      	sub	sp, #28
 8000dac:	af00      	add	r7, sp, #0
 8000dae:	60f8      	str	r0, [r7, #12]
 8000db0:	60b9      	str	r1, [r7, #8]
 8000db2:	607a      	str	r2, [r7, #4]
 8000db4:	603b      	str	r3, [r7, #0]
  {
    /* Can Not divide per 0 */
  }
  else if (OverSampling == LL_USART_OVERSAMPLING_8)
#else
  if (OverSampling == LL_USART_OVERSAMPLING_8)
 8000db6:	687b      	ldr	r3, [r7, #4]
 8000db8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8000dbc:	d11a      	bne.n	8000df4 <LL_USART_SetBaudRate+0x4c>
#endif /* USART_PRESC_PRESCALER */
  {
#if defined(USART_PRESC_PRESCALER)
    usartdiv = (uint16_t)(__LL_USART_DIV_SAMPLING8(PeriphClk, (uint8_t)PrescalerValue, BaudRate));
#else
    usartdiv = (uint16_t)(__LL_USART_DIV_SAMPLING8(PeriphClk, BaudRate));
 8000dbe:	68bb      	ldr	r3, [r7, #8]
 8000dc0:	005a      	lsls	r2, r3, #1
 8000dc2:	683b      	ldr	r3, [r7, #0]
 8000dc4:	085b      	lsrs	r3, r3, #1
 8000dc6:	441a      	add	r2, r3
 8000dc8:	683b      	ldr	r3, [r7, #0]
 8000dca:	fbb2 f3f3 	udiv	r3, r2, r3
 8000dce:	b29b      	uxth	r3, r3
 8000dd0:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
    brrtemp = usartdiv & 0xFFF0U;
 8000dd2:	697a      	ldr	r2, [r7, #20]
 8000dd4:	f64f 73f0 	movw	r3, #65520	@ 0xfff0
 8000dd8:	4013      	ands	r3, r2
 8000dda:	613b      	str	r3, [r7, #16]
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8000ddc:	697b      	ldr	r3, [r7, #20]
 8000dde:	085b      	lsrs	r3, r3, #1
 8000de0:	b29b      	uxth	r3, r3
 8000de2:	f003 0307 	and.w	r3, r3, #7
 8000de6:	693a      	ldr	r2, [r7, #16]
 8000de8:	4313      	orrs	r3, r2
 8000dea:	613b      	str	r3, [r7, #16]
    USARTx->BRR = brrtemp;
 8000dec:	68fb      	ldr	r3, [r7, #12]
 8000dee:	693a      	ldr	r2, [r7, #16]
 8000df0:	60da      	str	r2, [r3, #12]
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, (uint8_t)PrescalerValue, BaudRate));
#else
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, BaudRate));
#endif /* USART_PRESC_PRESCALER */
  }
}
 8000df2:	e00a      	b.n	8000e0a <LL_USART_SetBaudRate+0x62>
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, BaudRate));
 8000df4:	683b      	ldr	r3, [r7, #0]
 8000df6:	085a      	lsrs	r2, r3, #1
 8000df8:	68bb      	ldr	r3, [r7, #8]
 8000dfa:	441a      	add	r2, r3
 8000dfc:	683b      	ldr	r3, [r7, #0]
 8000dfe:	fbb2 f3f3 	udiv	r3, r2, r3
 8000e02:	b29b      	uxth	r3, r3
 8000e04:	461a      	mov	r2, r3
 8000e06:	68fb      	ldr	r3, [r7, #12]
 8000e08:	60da      	str	r2, [r3, #12]
}
 8000e0a:	bf00      	nop
 8000e0c:	371c      	adds	r7, #28
 8000e0e:	46bd      	mov	sp, r7
 8000e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e14:	4770      	bx	lr
	...

08000e18 <Temp_Sensor_Init>:
#include "stm32l4xx_ll_usart.h"


/*------INIZIALIZZAZIONE SENSORE DI TEMPERATURA------*/
void Temp_Sensor_Init(void)
{
 8000e18:	b590      	push	{r4, r7, lr}
 8000e1a:	b083      	sub	sp, #12
 8000e1c:	af00      	add	r7, sp, #0
	uint8_t data = 0xF0;
 8000e1e:	23f0      	movs	r3, #240	@ 0xf0
 8000e20:	71fb      	strb	r3, [r7, #7]

	LL_USART_SetBaudRate(huart4.Instance, HAL_RCC_GetPCLK2Freq(), UART_OVERSAMPLING_16, 9600);
 8000e22:	4b1a      	ldr	r3, [pc, #104]	@ (8000e8c <Temp_Sensor_Init+0x74>)
 8000e24:	681c      	ldr	r4, [r3, #0]
 8000e26:	f00f fa2d 	bl	8010284 <HAL_RCC_GetPCLK2Freq>
 8000e2a:	4601      	mov	r1, r0
 8000e2c:	f44f 5316 	mov.w	r3, #9600	@ 0x2580
 8000e30:	2200      	movs	r2, #0
 8000e32:	4620      	mov	r0, r4
 8000e34:	f7ff ffb8 	bl	8000da8 <LL_USART_SetBaudRate>

	HAL_UART_Transmit(TEMP_UART, &data, 1, 100);  // low for 500+us
 8000e38:	1df9      	adds	r1, r7, #7
 8000e3a:	2364      	movs	r3, #100	@ 0x64
 8000e3c:	2201      	movs	r2, #1
 8000e3e:	4813      	ldr	r0, [pc, #76]	@ (8000e8c <Temp_Sensor_Init+0x74>)
 8000e40:	f013 fcfa 	bl	8014838 <HAL_UART_Transmit>
	if (HAL_UART_Receive(TEMP_UART, &data, 1, 1000) != HAL_OK)
 8000e44:	1df9      	adds	r1, r7, #7
 8000e46:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000e4a:	2201      	movs	r2, #1
 8000e4c:	480f      	ldr	r0, [pc, #60]	@ (8000e8c <Temp_Sensor_Init+0x74>)
 8000e4e:	f013 fd7c 	bl	801494a <HAL_UART_Receive>
 8000e52:	4603      	mov	r3, r0
 8000e54:	2b00      	cmp	r3, #0
 8000e56:	d001      	beq.n	8000e5c <Temp_Sensor_Init+0x44>
		while(1);
 8000e58:	bf00      	nop
 8000e5a:	e7fd      	b.n	8000e58 <Temp_Sensor_Init+0x40>

	LL_USART_SetBaudRate(huart4.Instance, HAL_RCC_GetPCLK2Freq(), UART_OVERSAMPLING_16, 115200);
 8000e5c:	4b0b      	ldr	r3, [pc, #44]	@ (8000e8c <Temp_Sensor_Init+0x74>)
 8000e5e:	681c      	ldr	r4, [r3, #0]
 8000e60:	f00f fa10 	bl	8010284 <HAL_RCC_GetPCLK2Freq>
 8000e64:	4601      	mov	r1, r0
 8000e66:	f44f 33e1 	mov.w	r3, #115200	@ 0x1c200
 8000e6a:	2200      	movs	r2, #0
 8000e6c:	4620      	mov	r0, r4
 8000e6e:	f7ff ff9b 	bl	8000da8 <LL_USART_SetBaudRate>

	if (data == 0xF0)
 8000e72:	79fb      	ldrb	r3, [r7, #7]
 8000e74:	2bf0      	cmp	r3, #240	@ 0xf0
 8000e76:	d101      	bne.n	8000e7c <Temp_Sensor_Init+0x64>
		while(1);
 8000e78:	bf00      	nop
 8000e7a:	e7fd      	b.n	8000e78 <Temp_Sensor_Init+0x60>

	Temp_Sensor_Write(0xCC);  // skip ROM
 8000e7c:	20cc      	movs	r0, #204	@ 0xcc
 8000e7e:	f000 f807 	bl	8000e90 <Temp_Sensor_Write>
}
 8000e82:	bf00      	nop
 8000e84:	370c      	adds	r7, #12
 8000e86:	46bd      	mov	sp, r7
 8000e88:	bd90      	pop	{r4, r7, pc}
 8000e8a:	bf00      	nop
 8000e8c:	2000069c 	.word	0x2000069c

08000e90 <Temp_Sensor_Write>:

/*------SCRITTURA SU SENSORE DI TEMPERATURA------*/
void Temp_Sensor_Write(uint8_t data)
{
 8000e90:	b580      	push	{r7, lr}
 8000e92:	b086      	sub	sp, #24
 8000e94:	af00      	add	r7, sp, #0
 8000e96:	4603      	mov	r3, r0
 8000e98:	71fb      	strb	r3, [r7, #7]
	uint8_t buffer[8];

	for (int i=0; i<8; i++)
 8000e9a:	2300      	movs	r3, #0
 8000e9c:	617b      	str	r3, [r7, #20]
 8000e9e:	e017      	b.n	8000ed0 <Temp_Sensor_Write+0x40>
	{
		if ((data & (1<<i))!=0)  // if the bit is high
 8000ea0:	79fa      	ldrb	r2, [r7, #7]
 8000ea2:	697b      	ldr	r3, [r7, #20]
 8000ea4:	fa42 f303 	asr.w	r3, r2, r3
 8000ea8:	f003 0301 	and.w	r3, r3, #1
 8000eac:	2b00      	cmp	r3, #0
 8000eae:	d006      	beq.n	8000ebe <Temp_Sensor_Write+0x2e>
		{
			buffer[i] = 0xFF;  // write 1
 8000eb0:	f107 020c 	add.w	r2, r7, #12
 8000eb4:	697b      	ldr	r3, [r7, #20]
 8000eb6:	4413      	add	r3, r2
 8000eb8:	22ff      	movs	r2, #255	@ 0xff
 8000eba:	701a      	strb	r2, [r3, #0]
 8000ebc:	e005      	b.n	8000eca <Temp_Sensor_Write+0x3a>
		}
		else  // if the bit is low
		{
			buffer[i] = 0;  // write 0
 8000ebe:	f107 020c 	add.w	r2, r7, #12
 8000ec2:	697b      	ldr	r3, [r7, #20]
 8000ec4:	4413      	add	r3, r2
 8000ec6:	2200      	movs	r2, #0
 8000ec8:	701a      	strb	r2, [r3, #0]
	for (int i=0; i<8; i++)
 8000eca:	697b      	ldr	r3, [r7, #20]
 8000ecc:	3301      	adds	r3, #1
 8000ece:	617b      	str	r3, [r7, #20]
 8000ed0:	697b      	ldr	r3, [r7, #20]
 8000ed2:	2b07      	cmp	r3, #7
 8000ed4:	dde4      	ble.n	8000ea0 <Temp_Sensor_Write+0x10>
		}
	}

	HAL_UART_Transmit(TEMP_UART, buffer, 8, 100);
 8000ed6:	f107 010c 	add.w	r1, r7, #12
 8000eda:	2364      	movs	r3, #100	@ 0x64
 8000edc:	2208      	movs	r2, #8
 8000ede:	4803      	ldr	r0, [pc, #12]	@ (8000eec <Temp_Sensor_Write+0x5c>)
 8000ee0:	f013 fcaa 	bl	8014838 <HAL_UART_Transmit>
}
 8000ee4:	bf00      	nop
 8000ee6:	3718      	adds	r7, #24
 8000ee8:	46bd      	mov	sp, r7
 8000eea:	bd80      	pop	{r7, pc}
 8000eec:	2000069c 	.word	0x2000069c

08000ef0 <Temp_Sensor_ReadByte>:

/*------LETTURA BYTE DA SENSORE DI TEMPERATURA------*/
uint8_t Temp_Sensor_ReadByte(void)
{
 8000ef0:	b580      	push	{r7, lr}
 8000ef2:	b082      	sub	sp, #8
 8000ef4:	af00      	add	r7, sp, #0
	uint8_t RxByte = 0;
 8000ef6:	2300      	movs	r3, #0
 8000ef8:	71fb      	strb	r3, [r7, #7]
	for (uint8_t i = 0; i < 8; i++)
 8000efa:	2300      	movs	r3, #0
 8000efc:	71bb      	strb	r3, [r7, #6]
 8000efe:	e00e      	b.n	8000f1e <Temp_Sensor_ReadByte+0x2e>
	{
		RxByte >>= 1;
 8000f00:	79fb      	ldrb	r3, [r7, #7]
 8000f02:	085b      	lsrs	r3, r3, #1
 8000f04:	71fb      	strb	r3, [r7, #7]
		if (Temp_Sensor_ReadBit())
 8000f06:	f000 f813 	bl	8000f30 <Temp_Sensor_ReadBit>
 8000f0a:	4603      	mov	r3, r0
 8000f0c:	2b00      	cmp	r3, #0
 8000f0e:	d003      	beq.n	8000f18 <Temp_Sensor_ReadByte+0x28>
		{
			RxByte |= 0x80;
 8000f10:	79fb      	ldrb	r3, [r7, #7]
 8000f12:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8000f16:	71fb      	strb	r3, [r7, #7]
	for (uint8_t i = 0; i < 8; i++)
 8000f18:	79bb      	ldrb	r3, [r7, #6]
 8000f1a:	3301      	adds	r3, #1
 8000f1c:	71bb      	strb	r3, [r7, #6]
 8000f1e:	79bb      	ldrb	r3, [r7, #6]
 8000f20:	2b07      	cmp	r3, #7
 8000f22:	d9ed      	bls.n	8000f00 <Temp_Sensor_ReadByte+0x10>
		}
	}
	return RxByte;
 8000f24:	79fb      	ldrb	r3, [r7, #7]
}
 8000f26:	4618      	mov	r0, r3
 8000f28:	3708      	adds	r7, #8
 8000f2a:	46bd      	mov	sp, r7
 8000f2c:	bd80      	pop	{r7, pc}
	...

08000f30 <Temp_Sensor_ReadBit>:

/*------LETTURA BIT DA SENSORE DI TEMPERATURA------*/
uint8_t Temp_Sensor_ReadBit(void)
{
 8000f30:	b580      	push	{r7, lr}
 8000f32:	b082      	sub	sp, #8
 8000f34:	af00      	add	r7, sp, #0
    uint8_t ReadBitCMD = 0xFF;
 8000f36:	23ff      	movs	r3, #255	@ 0xff
 8000f38:	71fb      	strb	r3, [r7, #7]
    uint8_t RxBit;

    // Send Read Bit CMD
    HAL_UART_Transmit(&huart1, &ReadBitCMD, 1, 1);
 8000f3a:	1df9      	adds	r1, r7, #7
 8000f3c:	2301      	movs	r3, #1
 8000f3e:	2201      	movs	r2, #1
 8000f40:	4808      	ldr	r0, [pc, #32]	@ (8000f64 <Temp_Sensor_ReadBit+0x34>)
 8000f42:	f013 fc79 	bl	8014838 <HAL_UART_Transmit>
    // Receive The Bit
    HAL_UART_Receive(&huart1, &RxBit, 1, 1);
 8000f46:	1db9      	adds	r1, r7, #6
 8000f48:	2301      	movs	r3, #1
 8000f4a:	2201      	movs	r2, #1
 8000f4c:	4805      	ldr	r0, [pc, #20]	@ (8000f64 <Temp_Sensor_ReadBit+0x34>)
 8000f4e:	f013 fcfc 	bl	801494a <HAL_UART_Receive>

    return (RxBit & 0x01);
 8000f52:	79bb      	ldrb	r3, [r7, #6]
 8000f54:	f003 0301 	and.w	r3, r3, #1
 8000f58:	b2db      	uxtb	r3, r3
}
 8000f5a:	4618      	mov	r0, r3
 8000f5c:	3708      	adds	r7, #8
 8000f5e:	46bd      	mov	sp, r7
 8000f60:	bd80      	pop	{r7, pc}
 8000f62:	bf00      	nop
 8000f64:	20000724 	.word	0x20000724

08000f68 <Read_Temperature>:

/*------LETTURA TEMPERATURA------*/
uint16_t Read_Temperature(void)
{
 8000f68:	b580      	push	{r7, lr}
 8000f6a:	b082      	sub	sp, #8
 8000f6c:	af00      	add	r7, sp, #0
	uint8_t Temp_LSB = 0;
 8000f6e:	2300      	movs	r3, #0
 8000f70:	71fb      	strb	r3, [r7, #7]
	uint8_t Temp_MSB = 0;
 8000f72:	2300      	movs	r3, #0
 8000f74:	71bb      	strb	r3, [r7, #6]
	uint16_t Temp = 0;
 8000f76:	2300      	movs	r3, #0
 8000f78:	80bb      	strh	r3, [r7, #4]
	
	Temp_Sensor_Init();
 8000f7a:	f7ff ff4d 	bl	8000e18 <Temp_Sensor_Init>
	Temp_Sensor_Write(0xCC);  // skip ROM
 8000f7e:	20cc      	movs	r0, #204	@ 0xcc
 8000f80:	f7ff ff86 	bl	8000e90 <Temp_Sensor_Write>

	uint8_t status = Temp_Sensor_ReadBit();
 8000f84:	f7ff ffd4 	bl	8000f30 <Temp_Sensor_ReadBit>
 8000f88:	4603      	mov	r3, r0
 8000f8a:	70fb      	strb	r3, [r7, #3]

	if (status) 
 8000f8c:	78fb      	ldrb	r3, [r7, #3]
 8000f8e:	2b00      	cmp	r3, #0
 8000f90:	d01d      	beq.n	8000fce <Read_Temperature+0x66>
	{
		Temp_Sensor_Write(0xBE);  // read Scratch-pad
 8000f92:	20be      	movs	r0, #190	@ 0xbe
 8000f94:	f7ff ff7c 	bl	8000e90 <Temp_Sensor_Write>
		Temp_LSB = Temp_Sensor_ReadByte();
 8000f98:	f7ff ffaa 	bl	8000ef0 <Temp_Sensor_ReadByte>
 8000f9c:	4603      	mov	r3, r0
 8000f9e:	71fb      	strb	r3, [r7, #7]
	    Temp_MSB = Temp_Sensor_ReadByte();
 8000fa0:	f7ff ffa6 	bl	8000ef0 <Temp_Sensor_ReadByte>
 8000fa4:	4603      	mov	r3, r0
 8000fa6:	71bb      	strb	r3, [r7, #6]
		Temp_Sensor_Init();
 8000fa8:	f7ff ff36 	bl	8000e18 <Temp_Sensor_Init>
		Temp_Sensor_Write(0xCC);  // skip ROM
 8000fac:	20cc      	movs	r0, #204	@ 0xcc
 8000fae:	f7ff ff6f 	bl	8000e90 <Temp_Sensor_Write>
		Temp_Sensor_Write(0x44);  // convert t
 8000fb2:	2044      	movs	r0, #68	@ 0x44
 8000fb4:	f7ff ff6c 	bl	8000e90 <Temp_Sensor_Write>
		Temp = ((Temp_MSB << 8)) | Temp_LSB;
 8000fb8:	79bb      	ldrb	r3, [r7, #6]
 8000fba:	b21b      	sxth	r3, r3
 8000fbc:	021b      	lsls	r3, r3, #8
 8000fbe:	b21a      	sxth	r2, r3
 8000fc0:	79fb      	ldrb	r3, [r7, #7]
 8000fc2:	b21b      	sxth	r3, r3
 8000fc4:	4313      	orrs	r3, r2
 8000fc6:	b21b      	sxth	r3, r3
 8000fc8:	80bb      	strh	r3, [r7, #4]
		return Temp;
 8000fca:	88bb      	ldrh	r3, [r7, #4]
 8000fcc:	e000      	b.n	8000fd0 <Read_Temperature+0x68>
	}
	
	return 0; 
 8000fce:	2300      	movs	r3, #0
}
 8000fd0:	4618      	mov	r0, r3
 8000fd2:	3708      	adds	r7, #8
 8000fd4:	46bd      	mov	sp, r7
 8000fd6:	bd80      	pop	{r7, pc}

08000fd8 <INA3221_Init>:
#include "INA3221_reg.h"
#include "peripherals.h"
#include "global_variables.h"

void INA3221_Init()
{
 8000fd8:	b580      	push	{r7, lr}
 8000fda:	b082      	sub	sp, #8
 8000fdc:	af00      	add	r7, sp, #0
	uint16_t rcheck = 0;
 8000fde:	2300      	movs	r3, #0
 8000fe0:	80fb      	strh	r3, [r7, #6]

	INA3221_write_reg(INA3221_REG_CONFIG, 0x8000);   //RESET
 8000fe2:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000fe6:	2000      	movs	r0, #0
 8000fe8:	f000 f880 	bl	80010ec <INA3221_write_reg>

	HAL_Delay(100);
 8000fec:	2064      	movs	r0, #100	@ 0x64
 8000fee:	f009 ff0f 	bl	800ae10 <HAL_Delay>

	INA3221_read_reg(INA3221_REG_MID, &rcheck);
 8000ff2:	1dbb      	adds	r3, r7, #6
 8000ff4:	4619      	mov	r1, r3
 8000ff6:	20fe      	movs	r0, #254	@ 0xfe
 8000ff8:	f000 f842 	bl	8001080 <INA3221_read_reg>

	if(rcheck != INA3221_DEFAULT_MID)
 8000ffc:	88fb      	ldrh	r3, [r7, #6]
 8000ffe:	f245 4249 	movw	r2, #21577	@ 0x5449
 8001002:	4293      	cmp	r3, r2
 8001004:	d001      	beq.n	800100a <INA3221_Init+0x32>
		while(1);
 8001006:	bf00      	nop
 8001008:	e7fd      	b.n	8001006 <INA3221_Init+0x2e>

	INA3221_write_reg(INA3221_REG_CONFIG, 0x7D27);   //CH1 CH2 CH3 Enabled, 512 AVG, 1.1ms conv time, continous mode
 800100a:	f647 5127 	movw	r1, #32039	@ 0x7d27
 800100e:	2000      	movs	r0, #0
 8001010:	f000 f86c 	bl	80010ec <INA3221_write_reg>
	INA3221_Read_Measure(&Supply);
 8001014:	4803      	ldr	r0, [pc, #12]	@ (8001024 <INA3221_Init+0x4c>)
 8001016:	f000 f807 	bl	8001028 <INA3221_Read_Measure>
}
 800101a:	bf00      	nop
 800101c:	3708      	adds	r7, #8
 800101e:	46bd      	mov	sp, r7
 8001020:	bd80      	pop	{r7, pc}
 8001022:	bf00      	nop
 8001024:	20003b44 	.word	0x20003b44

08001028 <INA3221_Read_Measure>:

void INA3221_Read_Measure(supply_bus_t *measure)
{
 8001028:	b580      	push	{r7, lr}
 800102a:	b082      	sub	sp, #8
 800102c:	af00      	add	r7, sp, #0
 800102e:	6078      	str	r0, [r7, #4]
	INA3221_read_reg(INA3221_REG_BUSVOLTAGE_1, (uint16_t *)&(measure->v1));
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	4619      	mov	r1, r3
 8001034:	2002      	movs	r0, #2
 8001036:	f000 f823 	bl	8001080 <INA3221_read_reg>
	INA3221_read_reg(INA3221_REG_BUSVOLTAGE_2, (uint16_t *)&(measure->v2));
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	3302      	adds	r3, #2
 800103e:	4619      	mov	r1, r3
 8001040:	2004      	movs	r0, #4
 8001042:	f000 f81d 	bl	8001080 <INA3221_read_reg>
	INA3221_read_reg(INA3221_REG_BUSVOLTAGE_3, (uint16_t *)&(measure->v3));
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	3304      	adds	r3, #4
 800104a:	4619      	mov	r1, r3
 800104c:	2006      	movs	r0, #6
 800104e:	f000 f817 	bl	8001080 <INA3221_read_reg>
	INA3221_read_reg(INA3221_REG_SHUNTVOLTAGE_1, (uint16_t *)&(measure->i1));
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	3306      	adds	r3, #6
 8001056:	4619      	mov	r1, r3
 8001058:	2001      	movs	r0, #1
 800105a:	f000 f811 	bl	8001080 <INA3221_read_reg>
	INA3221_read_reg(INA3221_REG_SHUNTVOLTAGE_2, (uint16_t *)&(measure->i2));
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	3308      	adds	r3, #8
 8001062:	4619      	mov	r1, r3
 8001064:	2003      	movs	r0, #3
 8001066:	f000 f80b 	bl	8001080 <INA3221_read_reg>
	INA3221_read_reg(INA3221_REG_SHUNTVOLTAGE_3, (uint16_t *)&(measure->i3));
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	330a      	adds	r3, #10
 800106e:	4619      	mov	r1, r3
 8001070:	2005      	movs	r0, #5
 8001072:	f000 f805 	bl	8001080 <INA3221_read_reg>
}
 8001076:	bf00      	nop
 8001078:	3708      	adds	r7, #8
 800107a:	46bd      	mov	sp, r7
 800107c:	bd80      	pop	{r7, pc}
	...

08001080 <INA3221_read_reg>:


int INA3221_read_reg(uint8_t reg, uint16_t *rdata)
{
 8001080:	b580      	push	{r7, lr}
 8001082:	b086      	sub	sp, #24
 8001084:	af02      	add	r7, sp, #8
 8001086:	4603      	mov	r3, r0
 8001088:	6039      	str	r1, [r7, #0]
 800108a:	71fb      	strb	r3, [r7, #7]
	int result = -1;
 800108c:	f04f 33ff 	mov.w	r3, #4294967295
 8001090:	60fb      	str	r3, [r7, #12]
	uint8_t data[2] = {0};
 8001092:	2300      	movs	r3, #0
 8001094:	813b      	strh	r3, [r7, #8]

	if(HAL_I2C_Master_Transmit(I2C, INA3221_ADDR_0 << 1, &reg, 1, 100) == HAL_OK)
 8001096:	1dfa      	adds	r2, r7, #7
 8001098:	2364      	movs	r3, #100	@ 0x64
 800109a:	9300      	str	r3, [sp, #0]
 800109c:	2301      	movs	r3, #1
 800109e:	2180      	movs	r1, #128	@ 0x80
 80010a0:	4811      	ldr	r0, [pc, #68]	@ (80010e8 <INA3221_read_reg+0x68>)
 80010a2:	f00d f953 	bl	800e34c <HAL_I2C_Master_Transmit>
 80010a6:	4603      	mov	r3, r0
 80010a8:	2b00      	cmp	r3, #0
 80010aa:	d118      	bne.n	80010de <INA3221_read_reg+0x5e>
	{

		if(HAL_I2C_Master_Receive(I2C,  INA3221_ADDR_0 << 1, data, 2, 100) == HAL_OK)
 80010ac:	f107 0208 	add.w	r2, r7, #8
 80010b0:	2364      	movs	r3, #100	@ 0x64
 80010b2:	9300      	str	r3, [sp, #0]
 80010b4:	2302      	movs	r3, #2
 80010b6:	2180      	movs	r1, #128	@ 0x80
 80010b8:	480b      	ldr	r0, [pc, #44]	@ (80010e8 <INA3221_read_reg+0x68>)
 80010ba:	f00d fa5f 	bl	800e57c <HAL_I2C_Master_Receive>
 80010be:	4603      	mov	r3, r0
 80010c0:	2b00      	cmp	r3, #0
 80010c2:	d10c      	bne.n	80010de <INA3221_read_reg+0x5e>
		{
			result = 0;
 80010c4:	2300      	movs	r3, #0
 80010c6:	60fb      	str	r3, [r7, #12]
			*rdata = (data[0] << 8) | data[1];
 80010c8:	7a3b      	ldrb	r3, [r7, #8]
 80010ca:	b21b      	sxth	r3, r3
 80010cc:	021b      	lsls	r3, r3, #8
 80010ce:	b21a      	sxth	r2, r3
 80010d0:	7a7b      	ldrb	r3, [r7, #9]
 80010d2:	b21b      	sxth	r3, r3
 80010d4:	4313      	orrs	r3, r2
 80010d6:	b21b      	sxth	r3, r3
 80010d8:	b29a      	uxth	r2, r3
 80010da:	683b      	ldr	r3, [r7, #0]
 80010dc:	801a      	strh	r2, [r3, #0]
		}
	}

	return result;
 80010de:	68fb      	ldr	r3, [r7, #12]
}
 80010e0:	4618      	mov	r0, r3
 80010e2:	3710      	adds	r7, #16
 80010e4:	46bd      	mov	sp, r7
 80010e6:	bd80      	pop	{r7, pc}
 80010e8:	200003e8 	.word	0x200003e8

080010ec <INA3221_write_reg>:


int INA3221_write_reg(uint8_t reg, uint16_t wdata)
{
 80010ec:	b580      	push	{r7, lr}
 80010ee:	b086      	sub	sp, #24
 80010f0:	af02      	add	r7, sp, #8
 80010f2:	4603      	mov	r3, r0
 80010f4:	460a      	mov	r2, r1
 80010f6:	71fb      	strb	r3, [r7, #7]
 80010f8:	4613      	mov	r3, r2
 80010fa:	80bb      	strh	r3, [r7, #4]
    int result = -1;
 80010fc:	f04f 33ff 	mov.w	r3, #4294967295
 8001100:	60fb      	str	r3, [r7, #12]
    uint8_t data[3];
    
    data[0] = reg;                    
 8001102:	79fb      	ldrb	r3, [r7, #7]
 8001104:	723b      	strb	r3, [r7, #8]
    data[1] = (wdata >> 8);          
 8001106:	88bb      	ldrh	r3, [r7, #4]
 8001108:	0a1b      	lsrs	r3, r3, #8
 800110a:	b29b      	uxth	r3, r3
 800110c:	b2db      	uxtb	r3, r3
 800110e:	727b      	strb	r3, [r7, #9]
    data[2] = (wdata & 0xFF);        
 8001110:	88bb      	ldrh	r3, [r7, #4]
 8001112:	b2db      	uxtb	r3, r3
 8001114:	72bb      	strb	r3, [r7, #10]

    if(HAL_I2C_Master_Transmit(I2C, INA3221_ADDR_0 << 1, data, 3, 100) == HAL_OK)
 8001116:	f107 0208 	add.w	r2, r7, #8
 800111a:	2364      	movs	r3, #100	@ 0x64
 800111c:	9300      	str	r3, [sp, #0]
 800111e:	2303      	movs	r3, #3
 8001120:	2180      	movs	r1, #128	@ 0x80
 8001122:	4806      	ldr	r0, [pc, #24]	@ (800113c <INA3221_write_reg+0x50>)
 8001124:	f00d f912 	bl	800e34c <HAL_I2C_Master_Transmit>
 8001128:	4603      	mov	r3, r0
 800112a:	2b00      	cmp	r3, #0
 800112c:	d101      	bne.n	8001132 <INA3221_write_reg+0x46>
    {
        result = 0;
 800112e:	2300      	movs	r3, #0
 8001130:	60fb      	str	r3, [r7, #12]
    }
    
    return result;
 8001132:	68fb      	ldr	r3, [r7, #12]
}
 8001134:	4618      	mov	r0, r3
 8001136:	3710      	adds	r7, #16
 8001138:	46bd      	mov	sp, r7
 800113a:	bd80      	pop	{r7, pc}
 800113c:	200003e8 	.word	0x200003e8

08001140 <RTC_Init>:
#include "RTC.h"


/*-----INIZiALIZZAZIONE ORA RTC-----*/
void RTC_Init(void)
{
 8001140:	b580      	push	{r7, lr}
 8001142:	b082      	sub	sp, #8
 8001144:	af00      	add	r7, sp, #0
	for (int retry = 0; retry < 3; retry++)
 8001146:	2300      	movs	r3, #0
 8001148:	607b      	str	r3, [r7, #4]
 800114a:	e00b      	b.n	8001164 <RTC_Init+0x24>
	{
		if (Get_DateTime_From_Network())
 800114c:	f000 f814 	bl	8001178 <Get_DateTime_From_Network>
 8001150:	4603      	mov	r3, r0
 8001152:	2b00      	cmp	r3, #0
 8001154:	d10c      	bne.n	8001170 <RTC_Init+0x30>
		{
			return;
		}
		HAL_Delay(1000);
 8001156:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800115a:	f009 fe59 	bl	800ae10 <HAL_Delay>
	for (int retry = 0; retry < 3; retry++)
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	3301      	adds	r3, #1
 8001162:	607b      	str	r3, [r7, #4]
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	2b02      	cmp	r3, #2
 8001168:	ddf0      	ble.n	800114c <RTC_Init+0xc>
	}
	Set_Default_DateTime();
 800116a:	f000 f905 	bl	8001378 <Set_Default_DateTime>
 800116e:	e000      	b.n	8001172 <RTC_Init+0x32>
			return;
 8001170:	bf00      	nop
}
 8001172:	3708      	adds	r7, #8
 8001174:	46bd      	mov	sp, r7
 8001176:	bd80      	pop	{r7, pc}

08001178 <Get_DateTime_From_Network>:

/*-----SINCRONIZZAZIONE RTC DA RETE-----*/
int Get_DateTime_From_Network(void)
{
 8001178:	b5b0      	push	{r4, r5, r7, lr}
 800117a:	b0a2      	sub	sp, #136	@ 0x88
 800117c:	af00      	add	r7, sp, #0
	char response[100] = {0};
 800117e:	f107 031c 	add.w	r3, r7, #28
 8001182:	2264      	movs	r2, #100	@ 0x64
 8001184:	2100      	movs	r1, #0
 8001186:	4618      	mov	r0, r3
 8001188:	f014 fefe 	bl	8015f88 <memset>
	RTC_DateTypeDef sDate = {0};
 800118c:	2300      	movs	r3, #0
 800118e:	61bb      	str	r3, [r7, #24]
	RTC_TimeTypeDef sTime = {0};
 8001190:	1d3b      	adds	r3, r7, #4
 8001192:	2200      	movs	r2, #0
 8001194:	601a      	str	r2, [r3, #0]
 8001196:	605a      	str	r2, [r3, #4]
 8001198:	609a      	str	r2, [r3, #8]
 800119a:	60da      	str	r2, [r3, #12]
 800119c:	611a      	str	r2, [r3, #16]

	SIM_Send_Command("AT+CCLK?\r");
 800119e:	4872      	ldr	r0, [pc, #456]	@ (8001368 <Get_DateTime_From_Network+0x1f0>)
 80011a0:	f000 fc76 	bl	8001a90 <SIM_Send_Command>
	SIM_Receive_Response(response, 5000);
 80011a4:	f107 031c 	add.w	r3, r7, #28
 80011a8:	f241 3188 	movw	r1, #5000	@ 0x1388
 80011ac:	4618      	mov	r0, r3
 80011ae:	f000 fc9b 	bl	8001ae8 <SIM_Receive_Response>

    char* cclk_pos = strstr(response, "+CCLK: \"");
 80011b2:	f107 031c 	add.w	r3, r7, #28
 80011b6:	496d      	ldr	r1, [pc, #436]	@ (800136c <Get_DateTime_From_Network+0x1f4>)
 80011b8:	4618      	mov	r0, r3
 80011ba:	f014 ff1f 	bl	8015ffc <strstr>
 80011be:	f8c7 0084 	str.w	r0, [r7, #132]	@ 0x84
    if (cclk_pos == NULL)
 80011c2:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80011c6:	2b00      	cmp	r3, #0
 80011c8:	d101      	bne.n	80011ce <Get_DateTime_From_Network+0x56>
	{
        return 0;
 80011ca:	2300      	movs	r3, #0
 80011cc:	e0c8      	b.n	8001360 <Get_DateTime_From_Network+0x1e8>
    }

    char* time_start = cclk_pos + 8;
 80011ce:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80011d2:	3308      	adds	r3, #8
 80011d4:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80

    if (strlen(time_start) < 17)
 80011d8:	f8d7 0080 	ldr.w	r0, [r7, #128]	@ 0x80
 80011dc:	f7ff f802 	bl	80001e4 <strlen>
 80011e0:	4603      	mov	r3, r0
 80011e2:	2b10      	cmp	r3, #16
 80011e4:	d801      	bhi.n	80011ea <Get_DateTime_From_Network+0x72>
	{
		return 0;
 80011e6:	2300      	movs	r3, #0
 80011e8:	e0ba      	b.n	8001360 <Get_DateTime_From_Network+0x1e8>
	}

	sDate.Year = (time_start[0] - '0') * 10 + (time_start[1] - '0');
 80011ea:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80011ee:	781b      	ldrb	r3, [r3, #0]
 80011f0:	3b30      	subs	r3, #48	@ 0x30
 80011f2:	b2db      	uxtb	r3, r3
 80011f4:	461a      	mov	r2, r3
 80011f6:	0092      	lsls	r2, r2, #2
 80011f8:	4413      	add	r3, r2
 80011fa:	005b      	lsls	r3, r3, #1
 80011fc:	b2da      	uxtb	r2, r3
 80011fe:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8001202:	3301      	adds	r3, #1
 8001204:	781b      	ldrb	r3, [r3, #0]
 8001206:	4413      	add	r3, r2
 8001208:	b2db      	uxtb	r3, r3
 800120a:	3b30      	subs	r3, #48	@ 0x30
 800120c:	b2db      	uxtb	r3, r3
 800120e:	76fb      	strb	r3, [r7, #27]
	sDate.Month = (time_start[3] - '0') * 10 + (time_start[4] - '0');
 8001210:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8001214:	3303      	adds	r3, #3
 8001216:	781b      	ldrb	r3, [r3, #0]
 8001218:	3b30      	subs	r3, #48	@ 0x30
 800121a:	b2db      	uxtb	r3, r3
 800121c:	461a      	mov	r2, r3
 800121e:	0092      	lsls	r2, r2, #2
 8001220:	4413      	add	r3, r2
 8001222:	005b      	lsls	r3, r3, #1
 8001224:	b2da      	uxtb	r2, r3
 8001226:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800122a:	3304      	adds	r3, #4
 800122c:	781b      	ldrb	r3, [r3, #0]
 800122e:	4413      	add	r3, r2
 8001230:	b2db      	uxtb	r3, r3
 8001232:	3b30      	subs	r3, #48	@ 0x30
 8001234:	b2db      	uxtb	r3, r3
 8001236:	767b      	strb	r3, [r7, #25]
	sDate.Date = (time_start[6] - '0') * 10 + (time_start[7] - '0');
 8001238:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800123c:	3306      	adds	r3, #6
 800123e:	781b      	ldrb	r3, [r3, #0]
 8001240:	3b30      	subs	r3, #48	@ 0x30
 8001242:	b2db      	uxtb	r3, r3
 8001244:	461a      	mov	r2, r3
 8001246:	0092      	lsls	r2, r2, #2
 8001248:	4413      	add	r3, r2
 800124a:	005b      	lsls	r3, r3, #1
 800124c:	b2da      	uxtb	r2, r3
 800124e:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8001252:	3307      	adds	r3, #7
 8001254:	781b      	ldrb	r3, [r3, #0]
 8001256:	4413      	add	r3, r2
 8001258:	b2db      	uxtb	r3, r3
 800125a:	3b30      	subs	r3, #48	@ 0x30
 800125c:	b2db      	uxtb	r3, r3
 800125e:	76bb      	strb	r3, [r7, #26]

	sTime.Hours = (time_start[9] - '0') * 10 + (time_start[10] - '0');
 8001260:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8001264:	3309      	adds	r3, #9
 8001266:	781b      	ldrb	r3, [r3, #0]
 8001268:	3b30      	subs	r3, #48	@ 0x30
 800126a:	b2db      	uxtb	r3, r3
 800126c:	461a      	mov	r2, r3
 800126e:	0092      	lsls	r2, r2, #2
 8001270:	4413      	add	r3, r2
 8001272:	005b      	lsls	r3, r3, #1
 8001274:	b2da      	uxtb	r2, r3
 8001276:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800127a:	330a      	adds	r3, #10
 800127c:	781b      	ldrb	r3, [r3, #0]
 800127e:	4413      	add	r3, r2
 8001280:	b2db      	uxtb	r3, r3
 8001282:	3b30      	subs	r3, #48	@ 0x30
 8001284:	b2db      	uxtb	r3, r3
 8001286:	713b      	strb	r3, [r7, #4]
	sTime.Minutes = (time_start[12] - '0') * 10 + (time_start[13] - '0');
 8001288:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800128c:	330c      	adds	r3, #12
 800128e:	781b      	ldrb	r3, [r3, #0]
 8001290:	3b30      	subs	r3, #48	@ 0x30
 8001292:	b2db      	uxtb	r3, r3
 8001294:	461a      	mov	r2, r3
 8001296:	0092      	lsls	r2, r2, #2
 8001298:	4413      	add	r3, r2
 800129a:	005b      	lsls	r3, r3, #1
 800129c:	b2da      	uxtb	r2, r3
 800129e:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80012a2:	330d      	adds	r3, #13
 80012a4:	781b      	ldrb	r3, [r3, #0]
 80012a6:	4413      	add	r3, r2
 80012a8:	b2db      	uxtb	r3, r3
 80012aa:	3b30      	subs	r3, #48	@ 0x30
 80012ac:	b2db      	uxtb	r3, r3
 80012ae:	717b      	strb	r3, [r7, #5]
	sTime.Seconds = (time_start[15] - '0') * 10 + (time_start[16] - '0');
 80012b0:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80012b4:	330f      	adds	r3, #15
 80012b6:	781b      	ldrb	r3, [r3, #0]
 80012b8:	3b30      	subs	r3, #48	@ 0x30
 80012ba:	b2db      	uxtb	r3, r3
 80012bc:	461a      	mov	r2, r3
 80012be:	0092      	lsls	r2, r2, #2
 80012c0:	4413      	add	r3, r2
 80012c2:	005b      	lsls	r3, r3, #1
 80012c4:	b2da      	uxtb	r2, r3
 80012c6:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80012ca:	3310      	adds	r3, #16
 80012cc:	781b      	ldrb	r3, [r3, #0]
 80012ce:	4413      	add	r3, r2
 80012d0:	b2db      	uxtb	r3, r3
 80012d2:	3b30      	subs	r3, #48	@ 0x30
 80012d4:	b2db      	uxtb	r3, r3
 80012d6:	71bb      	strb	r3, [r7, #6]

	if (sDate.Month < 1 || sDate.Month > 12 ||
 80012d8:	7e7b      	ldrb	r3, [r7, #25]
 80012da:	2b00      	cmp	r3, #0
 80012dc:	d011      	beq.n	8001302 <Get_DateTime_From_Network+0x18a>
 80012de:	7e7b      	ldrb	r3, [r7, #25]
 80012e0:	2b0c      	cmp	r3, #12
 80012e2:	d80e      	bhi.n	8001302 <Get_DateTime_From_Network+0x18a>
        sDate.Date < 1 || sDate.Date > 31 ||
 80012e4:	7ebb      	ldrb	r3, [r7, #26]
	if (sDate.Month < 1 || sDate.Month > 12 ||
 80012e6:	2b00      	cmp	r3, #0
 80012e8:	d00b      	beq.n	8001302 <Get_DateTime_From_Network+0x18a>
        sDate.Date < 1 || sDate.Date > 31 ||
 80012ea:	7ebb      	ldrb	r3, [r7, #26]
 80012ec:	2b1f      	cmp	r3, #31
 80012ee:	d808      	bhi.n	8001302 <Get_DateTime_From_Network+0x18a>
        sTime.Hours > 23 || sTime.Minutes > 59 || sTime.Seconds > 59) {
 80012f0:	793b      	ldrb	r3, [r7, #4]
        sDate.Date < 1 || sDate.Date > 31 ||
 80012f2:	2b17      	cmp	r3, #23
 80012f4:	d805      	bhi.n	8001302 <Get_DateTime_From_Network+0x18a>
        sTime.Hours > 23 || sTime.Minutes > 59 || sTime.Seconds > 59) {
 80012f6:	797b      	ldrb	r3, [r7, #5]
 80012f8:	2b3b      	cmp	r3, #59	@ 0x3b
 80012fa:	d802      	bhi.n	8001302 <Get_DateTime_From_Network+0x18a>
 80012fc:	79bb      	ldrb	r3, [r7, #6]
 80012fe:	2b3b      	cmp	r3, #59	@ 0x3b
 8001300:	d901      	bls.n	8001306 <Get_DateTime_From_Network+0x18e>
        return 0;
 8001302:	2300      	movs	r3, #0
 8001304:	e02c      	b.n	8001360 <Get_DateTime_From_Network+0x1e8>
    }

	sDate.WeekDay = Calculate_Weekday(sDate.Year + 2000, sDate.Month, sDate.Date);
 8001306:	7efb      	ldrb	r3, [r7, #27]
 8001308:	f503 63fa 	add.w	r3, r3, #2000	@ 0x7d0
 800130c:	b29b      	uxth	r3, r3
 800130e:	7e79      	ldrb	r1, [r7, #25]
 8001310:	7eba      	ldrb	r2, [r7, #26]
 8001312:	4618      	mov	r0, r3
 8001314:	f000 f874 	bl	8001400 <Calculate_Weekday>
 8001318:	4603      	mov	r3, r0
 800131a:	763b      	strb	r3, [r7, #24]
	sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 800131c:	2300      	movs	r3, #0
 800131e:	613b      	str	r3, [r7, #16]
	sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8001320:	2300      	movs	r3, #0
 8001322:	617b      	str	r3, [r7, #20]

	HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN);
 8001324:	f107 0318 	add.w	r3, r7, #24
 8001328:	2200      	movs	r2, #0
 800132a:	4619      	mov	r1, r3
 800132c:	4810      	ldr	r0, [pc, #64]	@ (8001370 <Get_DateTime_From_Network+0x1f8>)
 800132e:	f00f fe5c 	bl	8010fea <HAL_RTC_SetDate>
	HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN);
 8001332:	1d3b      	adds	r3, r7, #4
 8001334:	2200      	movs	r2, #0
 8001336:	4619      	mov	r1, r3
 8001338:	480d      	ldr	r0, [pc, #52]	@ (8001370 <Get_DateTime_From_Network+0x1f8>)
 800133a:	f00f fd5d 	bl	8010df8 <HAL_RTC_SetTime>

    sys.onDate = sDate;
 800133e:	4b0d      	ldr	r3, [pc, #52]	@ (8001374 <Get_DateTime_From_Network+0x1fc>)
 8001340:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001344:	461a      	mov	r2, r3
 8001346:	69bb      	ldr	r3, [r7, #24]
 8001348:	6413      	str	r3, [r2, #64]	@ 0x40
    sys.onTime = sTime;
 800134a:	4b0a      	ldr	r3, [pc, #40]	@ (8001374 <Get_DateTime_From_Network+0x1fc>)
 800134c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001350:	f103 0444 	add.w	r4, r3, #68	@ 0x44
 8001354:	1d3d      	adds	r5, r7, #4
 8001356:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001358:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800135a:	682b      	ldr	r3, [r5, #0]
 800135c:	6023      	str	r3, [r4, #0]
    
	return 1;
 800135e:	2301      	movs	r3, #1
}
 8001360:	4618      	mov	r0, r3
 8001362:	3788      	adds	r7, #136	@ 0x88
 8001364:	46bd      	mov	sp, r7
 8001366:	bdb0      	pop	{r4, r5, r7, pc}
 8001368:	08017140 	.word	0x08017140
 800136c:	0801714c 	.word	0x0801714c
 8001370:	20000480 	.word	0x20000480
 8001374:	20000840 	.word	0x20000840

08001378 <Set_Default_DateTime>:

/*-----DATA E ORA DI DEFAULT 1/1/2020 00:00:00-----*/
void Set_Default_DateTime(void)
{
 8001378:	b5b0      	push	{r4, r5, r7, lr}
 800137a:	b086      	sub	sp, #24
 800137c:	af00      	add	r7, sp, #0
    RTC_DateTypeDef sDate = {0};
 800137e:	2300      	movs	r3, #0
 8001380:	617b      	str	r3, [r7, #20]
    RTC_TimeTypeDef sTime = {0};
 8001382:	463b      	mov	r3, r7
 8001384:	2200      	movs	r2, #0
 8001386:	601a      	str	r2, [r3, #0]
 8001388:	605a      	str	r2, [r3, #4]
 800138a:	609a      	str	r2, [r3, #8]
 800138c:	60da      	str	r2, [r3, #12]
 800138e:	611a      	str	r2, [r3, #16]

    // Default: 01/01/2020 00:00:00
    sDate.Year = 20;  // 2020
 8001390:	2314      	movs	r3, #20
 8001392:	75fb      	strb	r3, [r7, #23]
    sDate.Month = RTC_MONTH_JANUARY;
 8001394:	2301      	movs	r3, #1
 8001396:	757b      	strb	r3, [r7, #21]
    sDate.Date = 1;
 8001398:	2301      	movs	r3, #1
 800139a:	75bb      	strb	r3, [r7, #22]
    sDate.WeekDay = RTC_WEEKDAY_WEDNESDAY; // 1 Jan 2020 era mercoledì
 800139c:	2303      	movs	r3, #3
 800139e:	753b      	strb	r3, [r7, #20]

    sTime.Hours = 0;
 80013a0:	2300      	movs	r3, #0
 80013a2:	703b      	strb	r3, [r7, #0]
    sTime.Minutes = 0;
 80013a4:	2300      	movs	r3, #0
 80013a6:	707b      	strb	r3, [r7, #1]
    sTime.Seconds = 0;
 80013a8:	2300      	movs	r3, #0
 80013aa:	70bb      	strb	r3, [r7, #2]
    sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 80013ac:	2300      	movs	r3, #0
 80013ae:	60fb      	str	r3, [r7, #12]
    sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 80013b0:	2300      	movs	r3, #0
 80013b2:	613b      	str	r3, [r7, #16]

    HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN);
 80013b4:	f107 0314 	add.w	r3, r7, #20
 80013b8:	2200      	movs	r2, #0
 80013ba:	4619      	mov	r1, r3
 80013bc:	480e      	ldr	r0, [pc, #56]	@ (80013f8 <Set_Default_DateTime+0x80>)
 80013be:	f00f fe14 	bl	8010fea <HAL_RTC_SetDate>
    HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN);
 80013c2:	463b      	mov	r3, r7
 80013c4:	2200      	movs	r2, #0
 80013c6:	4619      	mov	r1, r3
 80013c8:	480b      	ldr	r0, [pc, #44]	@ (80013f8 <Set_Default_DateTime+0x80>)
 80013ca:	f00f fd15 	bl	8010df8 <HAL_RTC_SetTime>

    sys.onDate = sDate;
 80013ce:	4b0b      	ldr	r3, [pc, #44]	@ (80013fc <Set_Default_DateTime+0x84>)
 80013d0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80013d4:	461a      	mov	r2, r3
 80013d6:	697b      	ldr	r3, [r7, #20]
 80013d8:	6413      	str	r3, [r2, #64]	@ 0x40
    sys.onTime = sTime;
 80013da:	4b08      	ldr	r3, [pc, #32]	@ (80013fc <Set_Default_DateTime+0x84>)
 80013dc:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80013e0:	f103 0444 	add.w	r4, r3, #68	@ 0x44
 80013e4:	463d      	mov	r5, r7
 80013e6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80013e8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80013ea:	682b      	ldr	r3, [r5, #0]
 80013ec:	6023      	str	r3, [r4, #0]
}
 80013ee:	bf00      	nop
 80013f0:	3718      	adds	r7, #24
 80013f2:	46bd      	mov	sp, r7
 80013f4:	bdb0      	pop	{r4, r5, r7, pc}
 80013f6:	bf00      	nop
 80013f8:	20000480 	.word	0x20000480
 80013fc:	20000840 	.word	0x20000840

08001400 <Calculate_Weekday>:

/*-----CALCOLO GIORNO SETTIMANA-----*/
uint8_t Calculate_Weekday(uint16_t year, uint8_t month, uint8_t day)
{
 8001400:	b480      	push	{r7}
 8001402:	b085      	sub	sp, #20
 8001404:	af00      	add	r7, sp, #0
 8001406:	4603      	mov	r3, r0
 8001408:	80fb      	strh	r3, [r7, #6]
 800140a:	460b      	mov	r3, r1
 800140c:	717b      	strb	r3, [r7, #5]
 800140e:	4613      	mov	r3, r2
 8001410:	713b      	strb	r3, [r7, #4]
    // Algoritmo di Zeller per calcolo giorno settimana
    if (month < 3) {
 8001412:	797b      	ldrb	r3, [r7, #5]
 8001414:	2b02      	cmp	r3, #2
 8001416:	d805      	bhi.n	8001424 <Calculate_Weekday+0x24>
        month += 12;
 8001418:	797b      	ldrb	r3, [r7, #5]
 800141a:	330c      	adds	r3, #12
 800141c:	717b      	strb	r3, [r7, #5]
        year--;
 800141e:	88fb      	ldrh	r3, [r7, #6]
 8001420:	3b01      	subs	r3, #1
 8001422:	80fb      	strh	r3, [r7, #6]
    }
    uint8_t zeller_day = (day + ((13 * (month + 1)) / 5) + year + (year / 4) - (year / 100) + (year / 400)) % 7;
 8001424:	7939      	ldrb	r1, [r7, #4]
 8001426:	797b      	ldrb	r3, [r7, #5]
 8001428:	1c5a      	adds	r2, r3, #1
 800142a:	4613      	mov	r3, r2
 800142c:	005b      	lsls	r3, r3, #1
 800142e:	4413      	add	r3, r2
 8001430:	009b      	lsls	r3, r3, #2
 8001432:	4413      	add	r3, r2
 8001434:	4a1e      	ldr	r2, [pc, #120]	@ (80014b0 <Calculate_Weekday+0xb0>)
 8001436:	fb82 0203 	smull	r0, r2, r2, r3
 800143a:	1052      	asrs	r2, r2, #1
 800143c:	17db      	asrs	r3, r3, #31
 800143e:	1ad3      	subs	r3, r2, r3
 8001440:	18ca      	adds	r2, r1, r3
 8001442:	88fb      	ldrh	r3, [r7, #6]
 8001444:	4413      	add	r3, r2
 8001446:	88fa      	ldrh	r2, [r7, #6]
 8001448:	0892      	lsrs	r2, r2, #2
 800144a:	b292      	uxth	r2, r2
 800144c:	4413      	add	r3, r2
 800144e:	88fa      	ldrh	r2, [r7, #6]
 8001450:	4918      	ldr	r1, [pc, #96]	@ (80014b4 <Calculate_Weekday+0xb4>)
 8001452:	fba1 1202 	umull	r1, r2, r1, r2
 8001456:	0952      	lsrs	r2, r2, #5
 8001458:	b292      	uxth	r2, r2
 800145a:	1a9b      	subs	r3, r3, r2
 800145c:	88fa      	ldrh	r2, [r7, #6]
 800145e:	4915      	ldr	r1, [pc, #84]	@ (80014b4 <Calculate_Weekday+0xb4>)
 8001460:	fba1 1202 	umull	r1, r2, r1, r2
 8001464:	09d2      	lsrs	r2, r2, #7
 8001466:	b292      	uxth	r2, r2
 8001468:	441a      	add	r2, r3
 800146a:	4b13      	ldr	r3, [pc, #76]	@ (80014b8 <Calculate_Weekday+0xb8>)
 800146c:	fb83 1302 	smull	r1, r3, r3, r2
 8001470:	4413      	add	r3, r2
 8001472:	1099      	asrs	r1, r3, #2
 8001474:	17d3      	asrs	r3, r2, #31
 8001476:	1ac9      	subs	r1, r1, r3
 8001478:	460b      	mov	r3, r1
 800147a:	00db      	lsls	r3, r3, #3
 800147c:	1a5b      	subs	r3, r3, r1
 800147e:	1ad1      	subs	r1, r2, r3
 8001480:	460b      	mov	r3, r1
 8001482:	73fb      	strb	r3, [r7, #15]

    uint8_t hal_weekday_map[] = {RTC_WEEKDAY_SATURDAY, RTC_WEEKDAY_SUNDAY, RTC_WEEKDAY_MONDAY,
 8001484:	4a0d      	ldr	r2, [pc, #52]	@ (80014bc <Calculate_Weekday+0xbc>)
 8001486:	f107 0308 	add.w	r3, r7, #8
 800148a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800148e:	6018      	str	r0, [r3, #0]
 8001490:	3304      	adds	r3, #4
 8001492:	8019      	strh	r1, [r3, #0]
 8001494:	3302      	adds	r3, #2
 8001496:	0c0a      	lsrs	r2, r1, #16
 8001498:	701a      	strb	r2, [r3, #0]
                                 RTC_WEEKDAY_TUESDAY, RTC_WEEKDAY_WEDNESDAY, RTC_WEEKDAY_THURSDAY, RTC_WEEKDAY_FRIDAY};

    return hal_weekday_map[zeller_day];
 800149a:	7bfb      	ldrb	r3, [r7, #15]
 800149c:	3310      	adds	r3, #16
 800149e:	443b      	add	r3, r7
 80014a0:	f813 3c08 	ldrb.w	r3, [r3, #-8]
}
 80014a4:	4618      	mov	r0, r3
 80014a6:	3714      	adds	r7, #20
 80014a8:	46bd      	mov	sp, r7
 80014aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ae:	4770      	bx	lr
 80014b0:	66666667 	.word	0x66666667
 80014b4:	51eb851f 	.word	0x51eb851f
 80014b8:	92492493 	.word	0x92492493
 80014bc:	08017158 	.word	0x08017158

080014c0 <SIM_Init>:
#include "process.h"
#include "leds.h"

/*------INIZIALIZZAZIONE DEL MODULO LTE------*/
int SIM_Init(void)
{
 80014c0:	b580      	push	{r7, lr}
 80014c2:	f5ad 7d08 	sub.w	sp, sp, #544	@ 0x220
 80014c6:	af00      	add	r7, sp, #0
	char command[256];
	char response[256];
	sprintf(sys.apn, "iot.1nce.net");
 80014c8:	49c2      	ldr	r1, [pc, #776]	@ (80017d4 <SIM_Init+0x314>)
 80014ca:	48c3      	ldr	r0, [pc, #780]	@ (80017d8 <SIM_Init+0x318>)
 80014cc:	f014 fcfc 	bl	8015ec8 <siprintf>
	strcpy(sys.TCP.IP_address, config.tcp_IPaddress);
 80014d0:	49c2      	ldr	r1, [pc, #776]	@ (80017dc <SIM_Init+0x31c>)
 80014d2:	48c3      	ldr	r0, [pc, #780]	@ (80017e0 <SIM_Init+0x320>)
 80014d4:	f014 fdd4 	bl	8016080 <strcpy>
	strcpy(sys.TCP.Port, config.tcp_Port);
 80014d8:	49c2      	ldr	r1, [pc, #776]	@ (80017e4 <SIM_Init+0x324>)
 80014da:	48c3      	ldr	r0, [pc, #780]	@ (80017e8 <SIM_Init+0x328>)
 80014dc:	f014 fdd0 	bl	8016080 <strcpy>
	sprintf(sys.TCP.IP_address, "a");
 80014e0:	49c2      	ldr	r1, [pc, #776]	@ (80017ec <SIM_Init+0x32c>)
 80014e2:	48bf      	ldr	r0, [pc, #764]	@ (80017e0 <SIM_Init+0x320>)
 80014e4:	f014 fcf0 	bl	8015ec8 <siprintf>
	sprintf(sys.TCP.Port, "a");
 80014e8:	49c0      	ldr	r1, [pc, #768]	@ (80017ec <SIM_Init+0x32c>)
 80014ea:	48bf      	ldr	r0, [pc, #764]	@ (80017e8 <SIM_Init+0x328>)
 80014ec:	f014 fcec 	bl	8015ec8 <siprintf>

	memset(response, 0, sizeof(response));
 80014f0:	f107 0314 	add.w	r3, r7, #20
 80014f4:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80014f8:	2100      	movs	r1, #0
 80014fa:	4618      	mov	r0, r3
 80014fc:	f014 fd44 	bl	8015f88 <memset>

	if(HAL_GPIO_ReadPin(LTE_STATUS_GPIO_Port, LTE_STATUS_Pin) != GPIO_PIN_SET)
 8001500:	2108      	movs	r1, #8
 8001502:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001506:	f00c fe55 	bl	800e1b4 <HAL_GPIO_ReadPin>
 800150a:	4603      	mov	r3, r0
 800150c:	2b01      	cmp	r3, #1
 800150e:	d00a      	beq.n	8001526 <SIM_Init+0x66>
	{
		SIM_Power_On();
 8001510:	f000 fa92 	bl	8001a38 <SIM_Power_On>
		while(HAL_GPIO_ReadPin(LTE_STATUS_GPIO_Port, LTE_STATUS_Pin) != GPIO_PIN_SET);            //Attesa accensione modulo
 8001514:	bf00      	nop
 8001516:	2108      	movs	r1, #8
 8001518:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800151c:	f00c fe4a 	bl	800e1b4 <HAL_GPIO_ReadPin>
 8001520:	4603      	mov	r3, r0
 8001522:	2b01      	cmp	r3, #1
 8001524:	d1f7      	bne.n	8001516 <SIM_Init+0x56>
		
	}

	SIM_Send_Command("AT\r");                                                                     //Verifica comunicazione
 8001526:	48b2      	ldr	r0, [pc, #712]	@ (80017f0 <SIM_Init+0x330>)
 8001528:	f000 fab2 	bl	8001a90 <SIM_Send_Command>
	SIM_Receive_Response(response, 2000);
 800152c:	f107 0314 	add.w	r3, r7, #20
 8001530:	f44f 61fa 	mov.w	r1, #2000	@ 0x7d0
 8001534:	4618      	mov	r0, r3
 8001536:	f000 fad7 	bl	8001ae8 <SIM_Receive_Response>
	if(strstr(response, "OK") == NULL)
 800153a:	f107 0314 	add.w	r3, r7, #20
 800153e:	49ad      	ldr	r1, [pc, #692]	@ (80017f4 <SIM_Init+0x334>)
 8001540:	4618      	mov	r0, r3
 8001542:	f014 fd5b 	bl	8015ffc <strstr>
 8001546:	4603      	mov	r3, r0
 8001548:	2b00      	cmp	r3, #0
 800154a:	d11c      	bne.n	8001586 <SIM_Init+0xc6>
	{
		if(huart1.Init.BaudRate != 921600)
 800154c:	4baa      	ldr	r3, [pc, #680]	@ (80017f8 <SIM_Init+0x338>)
 800154e:	685b      	ldr	r3, [r3, #4]
 8001550:	f5b3 2f61 	cmp.w	r3, #921600	@ 0xe1000
 8001554:	d00d      	beq.n	8001572 <SIM_Init+0xb2>
		{
			huart1.Init.BaudRate = 921600;
 8001556:	4ba8      	ldr	r3, [pc, #672]	@ (80017f8 <SIM_Init+0x338>)
 8001558:	f44f 2261 	mov.w	r2, #921600	@ 0xe1000
 800155c:	605a      	str	r2, [r3, #4]
			HAL_UART_Init(SIM_UART);
 800155e:	48a6      	ldr	r0, [pc, #664]	@ (80017f8 <SIM_Init+0x338>)
 8001560:	f013 f8c6 	bl	80146f0 <HAL_UART_Init>
			SIM_Send_Command("AT+IPR=921600\r");               						              //Baudrate a 921600
 8001564:	48a5      	ldr	r0, [pc, #660]	@ (80017fc <SIM_Init+0x33c>)
 8001566:	f000 fa93 	bl	8001a90 <SIM_Send_Command>
			SIM_Wait_Response("OK");
 800156a:	48a2      	ldr	r0, [pc, #648]	@ (80017f4 <SIM_Init+0x334>)
 800156c:	f000 fe0c 	bl	8002188 <SIM_Wait_Response>
 8001570:	e009      	b.n	8001586 <SIM_Init+0xc6>
		}
		else
		{
			huart1.Init.BaudRate = 38400;
 8001572:	4ba1      	ldr	r3, [pc, #644]	@ (80017f8 <SIM_Init+0x338>)
 8001574:	f44f 4216 	mov.w	r2, #38400	@ 0x9600
 8001578:	605a      	str	r2, [r3, #4]
			HAL_UART_Init(SIM_UART);
 800157a:	489f      	ldr	r0, [pc, #636]	@ (80017f8 <SIM_Init+0x338>)
 800157c:	f013 f8b8 	bl	80146f0 <HAL_UART_Init>
			return -1;
 8001580:	f04f 33ff 	mov.w	r3, #4294967295
 8001584:	e237      	b.n	80019f6 <SIM_Init+0x536>
		}

	}

	huart1.Init.BaudRate = 921600;
 8001586:	4b9c      	ldr	r3, [pc, #624]	@ (80017f8 <SIM_Init+0x338>)
 8001588:	f44f 2261 	mov.w	r2, #921600	@ 0xe1000
 800158c:	605a      	str	r2, [r3, #4]
	HAL_UART_Init(SIM_UART);
 800158e:	489a      	ldr	r0, [pc, #616]	@ (80017f8 <SIM_Init+0x338>)
 8001590:	f013 f8ae 	bl	80146f0 <HAL_UART_Init>

	SIM_Send_Command("ATE0\r");                                                                   //Non verbose mode
 8001594:	489a      	ldr	r0, [pc, #616]	@ (8001800 <SIM_Init+0x340>)
 8001596:	f000 fa7b 	bl	8001a90 <SIM_Send_Command>
	SIM_Wait_Response("OK");
 800159a:	4896      	ldr	r0, [pc, #600]	@ (80017f4 <SIM_Init+0x334>)
 800159c:	f000 fdf4 	bl	8002188 <SIM_Wait_Response>


	SIM_Send_Command("AT+CFUN=1\r");                                                              //Full functionality
 80015a0:	4898      	ldr	r0, [pc, #608]	@ (8001804 <SIM_Init+0x344>)
 80015a2:	f000 fa75 	bl	8001a90 <SIM_Send_Command>
	if(SIM_Wait_Response("OK") != HAL_OK) return -1;
 80015a6:	4893      	ldr	r0, [pc, #588]	@ (80017f4 <SIM_Init+0x334>)
 80015a8:	f000 fdee 	bl	8002188 <SIM_Wait_Response>
 80015ac:	4603      	mov	r3, r0
 80015ae:	2b00      	cmp	r3, #0
 80015b0:	d002      	beq.n	80015b8 <SIM_Init+0xf8>
 80015b2:	f04f 33ff 	mov.w	r3, #4294967295
 80015b6:	e21e      	b.n	80019f6 <SIM_Init+0x536>

	SIM_Send_Command("AT+CNMP=38\r");                                                             //Modalità solo LTE o NB-IoT
 80015b8:	4893      	ldr	r0, [pc, #588]	@ (8001808 <SIM_Init+0x348>)
 80015ba:	f000 fa69 	bl	8001a90 <SIM_Send_Command>
	if(SIM_Wait_Response("OK") != HAL_OK) return -1;
 80015be:	488d      	ldr	r0, [pc, #564]	@ (80017f4 <SIM_Init+0x334>)
 80015c0:	f000 fde2 	bl	8002188 <SIM_Wait_Response>
 80015c4:	4603      	mov	r3, r0
 80015c6:	2b00      	cmp	r3, #0
 80015c8:	d002      	beq.n	80015d0 <SIM_Init+0x110>
 80015ca:	f04f 33ff 	mov.w	r3, #4294967295
 80015ce:	e212      	b.n	80019f6 <SIM_Init+0x536>

	SIM_Send_Command("AT+CMNB=1\r");                                                              //1=CAT-M, 2=NB-IoT, 3=Automatico
 80015d0:	488e      	ldr	r0, [pc, #568]	@ (800180c <SIM_Init+0x34c>)
 80015d2:	f000 fa5d 	bl	8001a90 <SIM_Send_Command>
	if(SIM_Wait_Response("OK") != HAL_OK) return -1;
 80015d6:	4887      	ldr	r0, [pc, #540]	@ (80017f4 <SIM_Init+0x334>)
 80015d8:	f000 fdd6 	bl	8002188 <SIM_Wait_Response>
 80015dc:	4603      	mov	r3, r0
 80015de:	2b00      	cmp	r3, #0
 80015e0:	d002      	beq.n	80015e8 <SIM_Init+0x128>
 80015e2:	f04f 33ff 	mov.w	r3, #4294967295
 80015e6:	e206      	b.n	80019f6 <SIM_Init+0x536>

	SIM_Send_Command("AT+CPIN?\r");																  //Controllo PIN
 80015e8:	4889      	ldr	r0, [pc, #548]	@ (8001810 <SIM_Init+0x350>)
 80015ea:	f000 fa51 	bl	8001a90 <SIM_Send_Command>
	SIM_Receive_Response(response, 5000);
 80015ee:	f107 0314 	add.w	r3, r7, #20
 80015f2:	f241 3188 	movw	r1, #5000	@ 0x1388
 80015f6:	4618      	mov	r0, r3
 80015f8:	f000 fa76 	bl	8001ae8 <SIM_Receive_Response>
	if(strstr(response, "READY") == NULL)
 80015fc:	f107 0314 	add.w	r3, r7, #20
 8001600:	4984      	ldr	r1, [pc, #528]	@ (8001814 <SIM_Init+0x354>)
 8001602:	4618      	mov	r0, r3
 8001604:	f014 fcfa 	bl	8015ffc <strstr>
 8001608:	4603      	mov	r3, r0
 800160a:	2b00      	cmp	r3, #0
 800160c:	d11e      	bne.n	800164c <SIM_Init+0x18c>
	{
		if(strstr(response, "SIM PIN") != NULL)
 800160e:	f107 0314 	add.w	r3, r7, #20
 8001612:	4981      	ldr	r1, [pc, #516]	@ (8001818 <SIM_Init+0x358>)
 8001614:	4618      	mov	r0, r3
 8001616:	f014 fcf1 	bl	8015ffc <strstr>
 800161a:	4603      	mov	r3, r0
 800161c:	2b00      	cmp	r3, #0
 800161e:	d012      	beq.n	8001646 <SIM_Init+0x186>
		{
			SIM_Send_Command("AT+CPIN=0000\r");
 8001620:	487e      	ldr	r0, [pc, #504]	@ (800181c <SIM_Init+0x35c>)
 8001622:	f000 fa35 	bl	8001a90 <SIM_Send_Command>
			SIM_Receive_Response(response, 5000);
 8001626:	f107 0314 	add.w	r3, r7, #20
 800162a:	f241 3188 	movw	r1, #5000	@ 0x1388
 800162e:	4618      	mov	r0, r3
 8001630:	f000 fa5a 	bl	8001ae8 <SIM_Receive_Response>
			if(SIM_Wait_Response("OK") != HAL_OK) return -1;
 8001634:	486f      	ldr	r0, [pc, #444]	@ (80017f4 <SIM_Init+0x334>)
 8001636:	f000 fda7 	bl	8002188 <SIM_Wait_Response>
 800163a:	4603      	mov	r3, r0
 800163c:	2b00      	cmp	r3, #0
 800163e:	d005      	beq.n	800164c <SIM_Init+0x18c>
 8001640:	f04f 33ff 	mov.w	r3, #4294967295
 8001644:	e1d7      	b.n	80019f6 <SIM_Init+0x536>
		}
		else
		{
			return -1;
 8001646:	f04f 33ff 	mov.w	r3, #4294967295
 800164a:	e1d4      	b.n	80019f6 <SIM_Init+0x536>
		}
	}


	SIM_Send_Command("AT+CSQ\r");																  //Controllo qualità connessione
 800164c:	4874      	ldr	r0, [pc, #464]	@ (8001820 <SIM_Init+0x360>)
 800164e:	f000 fa1f 	bl	8001a90 <SIM_Send_Command>
	SIM_Receive_Response(response, 5000);
 8001652:	f107 0314 	add.w	r3, r7, #20
 8001656:	f241 3188 	movw	r1, #5000	@ 0x1388
 800165a:	4618      	mov	r0, r3
 800165c:	f000 fa44 	bl	8001ae8 <SIM_Receive_Response>
	if(strstr(response, "+CSQ: 99") != NULL)
 8001660:	f107 0314 	add.w	r3, r7, #20
 8001664:	496f      	ldr	r1, [pc, #444]	@ (8001824 <SIM_Init+0x364>)
 8001666:	4618      	mov	r0, r3
 8001668:	f014 fcc8 	bl	8015ffc <strstr>
 800166c:	4603      	mov	r3, r0
 800166e:	2b00      	cmp	r3, #0
 8001670:	d004      	beq.n	800167c <SIM_Init+0x1bc>
	{
		SIM_Power_Off();
 8001672:	f000 f9f7 	bl	8001a64 <SIM_Power_Off>
		return -1;
 8001676:	f04f 33ff 	mov.w	r3, #4294967295
 800167a:	e1bc      	b.n	80019f6 <SIM_Init+0x536>
	}

	SIM_Send_Command("AT+CEREG?\r");                                                              //Controllo registrazione alla rete
 800167c:	486a      	ldr	r0, [pc, #424]	@ (8001828 <SIM_Init+0x368>)
 800167e:	f000 fa07 	bl	8001a90 <SIM_Send_Command>
	SIM_Receive_Response(response, 5000);
 8001682:	f107 0314 	add.w	r3, r7, #20
 8001686:	f241 3188 	movw	r1, #5000	@ 0x1388
 800168a:	4618      	mov	r0, r3
 800168c:	f000 fa2c 	bl	8001ae8 <SIM_Receive_Response>
	char* cereg_ptr = strstr(response, "+CEREG:");
 8001690:	f107 0314 	add.w	r3, r7, #20
 8001694:	4965      	ldr	r1, [pc, #404]	@ (800182c <SIM_Init+0x36c>)
 8001696:	4618      	mov	r0, r3
 8001698:	f014 fcb0 	bl	8015ffc <strstr>
 800169c:	f8c7 0218 	str.w	r0, [r7, #536]	@ 0x218
	int n = 0, stat_value = 0;
 80016a0:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 80016a4:	f5a3 7304 	sub.w	r3, r3, #528	@ 0x210
 80016a8:	2200      	movs	r2, #0
 80016aa:	601a      	str	r2, [r3, #0]
 80016ac:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 80016b0:	f5a3 7305 	sub.w	r3, r3, #532	@ 0x214
 80016b4:	2200      	movs	r2, #0
 80016b6:	601a      	str	r2, [r3, #0]
	if(cereg_ptr && sscanf(cereg_ptr, "+CEREG: %d,%d", &n, &stat_value) >= 2)
 80016b8:	f8d7 3218 	ldr.w	r3, [r7, #536]	@ 0x218
 80016bc:	2b00      	cmp	r3, #0
 80016be:	d01b      	beq.n	80016f8 <SIM_Init+0x238>
 80016c0:	f107 030c 	add.w	r3, r7, #12
 80016c4:	f107 0210 	add.w	r2, r7, #16
 80016c8:	4959      	ldr	r1, [pc, #356]	@ (8001830 <SIM_Init+0x370>)
 80016ca:	f8d7 0218 	ldr.w	r0, [r7, #536]	@ 0x218
 80016ce:	f014 fc1d 	bl	8015f0c <siscanf>
 80016d2:	4603      	mov	r3, r0
 80016d4:	2b01      	cmp	r3, #1
 80016d6:	dd0f      	ble.n	80016f8 <SIM_Init+0x238>
	{
		if(stat_value == 1 || stat_value == 5)
 80016d8:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 80016dc:	f5a3 7305 	sub.w	r3, r3, #532	@ 0x214
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	2b01      	cmp	r3, #1
 80016e4:	f000 80c4 	beq.w	8001870 <SIM_Init+0x3b0>
 80016e8:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 80016ec:	f5a3 7305 	sub.w	r3, r3, #532	@ 0x214
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	2b05      	cmp	r3, #5
 80016f4:	f000 80bc 	beq.w	8001870 <SIM_Init+0x3b0>
		{
			goto APN;
		}
	}

	SIM_Send_Command("AT+COPS?\r");																  //Controllo modalità di connessione
 80016f8:	484e      	ldr	r0, [pc, #312]	@ (8001834 <SIM_Init+0x374>)
 80016fa:	f000 f9c9 	bl	8001a90 <SIM_Send_Command>
	SIM_Receive_Response(response, 5000);
 80016fe:	f107 0314 	add.w	r3, r7, #20
 8001702:	f241 3188 	movw	r1, #5000	@ 0x1388
 8001706:	4618      	mov	r0, r3
 8001708:	f000 f9ee 	bl	8001ae8 <SIM_Receive_Response>

	SIM_Send_Command("AT+COPS=?\r");
 800170c:	484a      	ldr	r0, [pc, #296]	@ (8001838 <SIM_Init+0x378>)
 800170e:	f000 f9bf 	bl	8001a90 <SIM_Send_Command>
	SIM_Receive_Response(response, 120000);
 8001712:	f107 0314 	add.w	r3, r7, #20
 8001716:	4949      	ldr	r1, [pc, #292]	@ (800183c <SIM_Init+0x37c>)
 8001718:	4618      	mov	r0, r3
 800171a:	f000 f9e5 	bl	8001ae8 <SIM_Receive_Response>

	SIM_Send_Command("AT+COPS=0,0\r");                                                            // Miglior operatore disponibile. In caso di operatore fisso: AT+COPS=1,2,\"22201\" ---- 22201: TIM,  22210: Vodafone
 800171e:	4848      	ldr	r0, [pc, #288]	@ (8001840 <SIM_Init+0x380>)
 8001720:	f000 f9b6 	bl	8001a90 <SIM_Send_Command>
	SIM_Receive_Response(response, 180000);
 8001724:	f107 0314 	add.w	r3, r7, #20
 8001728:	4946      	ldr	r1, [pc, #280]	@ (8001844 <SIM_Init+0x384>)
 800172a:	4618      	mov	r0, r3
 800172c:	f000 f9dc 	bl	8001ae8 <SIM_Receive_Response>
//	if(SIM_Wait_Response("OK") != HAL_OK) return -1;

	SIM_Send_Command("AT+CEREG?\r");                                                              //Controllo registrazione alla rete
 8001730:	483d      	ldr	r0, [pc, #244]	@ (8001828 <SIM_Init+0x368>)
 8001732:	f000 f9ad 	bl	8001a90 <SIM_Send_Command>
	SIM_Receive_Response(response, 5000);
 8001736:	f107 0314 	add.w	r3, r7, #20
 800173a:	f241 3188 	movw	r1, #5000	@ 0x1388
 800173e:	4618      	mov	r0, r3
 8001740:	f000 f9d2 	bl	8001ae8 <SIM_Receive_Response>
	int stat = 0;
 8001744:	2300      	movs	r3, #0
 8001746:	f8c7 321c 	str.w	r3, [r7, #540]	@ 0x21c
	while(stat != 1)
 800174a:	e08b      	b.n	8001864 <SIM_Init+0x3a4>
	{
		char* cereg_ptr = strstr(response, "+CEREG:");
 800174c:	f107 0314 	add.w	r3, r7, #20
 8001750:	4936      	ldr	r1, [pc, #216]	@ (800182c <SIM_Init+0x36c>)
 8001752:	4618      	mov	r0, r3
 8001754:	f014 fc52 	bl	8015ffc <strstr>
 8001758:	f8c7 0214 	str.w	r0, [r7, #532]	@ 0x214
		int n = 0, stat_value = 0;
 800175c:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8001760:	f5a3 7306 	sub.w	r3, r3, #536	@ 0x218
 8001764:	2200      	movs	r2, #0
 8001766:	601a      	str	r2, [r3, #0]
 8001768:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 800176c:	f5a3 7307 	sub.w	r3, r3, #540	@ 0x21c
 8001770:	2200      	movs	r2, #0
 8001772:	601a      	str	r2, [r3, #0]
		if(cereg_ptr && sscanf(cereg_ptr, "+CEREG: %d,%d", &n, &stat_value) >= 2)
 8001774:	f8d7 3214 	ldr.w	r3, [r7, #532]	@ 0x214
 8001778:	2b00      	cmp	r3, #0
 800177a:	d065      	beq.n	8001848 <SIM_Init+0x388>
 800177c:	1d3b      	adds	r3, r7, #4
 800177e:	f107 0208 	add.w	r2, r7, #8
 8001782:	492b      	ldr	r1, [pc, #172]	@ (8001830 <SIM_Init+0x370>)
 8001784:	f8d7 0214 	ldr.w	r0, [r7, #532]	@ 0x214
 8001788:	f014 fbc0 	bl	8015f0c <siscanf>
 800178c:	4603      	mov	r3, r0
 800178e:	2b01      	cmp	r3, #1
 8001790:	dd5a      	ble.n	8001848 <SIM_Init+0x388>
		{
			if(stat_value == 1 || stat_value == 5)
 8001792:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8001796:	f5a3 7307 	sub.w	r3, r3, #540	@ 0x21c
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	2b01      	cmp	r3, #1
 800179e:	d006      	beq.n	80017ae <SIM_Init+0x2ee>
 80017a0:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 80017a4:	f5a3 7307 	sub.w	r3, r3, #540	@ 0x21c
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	2b05      	cmp	r3, #5
 80017ac:	d103      	bne.n	80017b6 <SIM_Init+0x2f6>
			{
				stat = 1;
 80017ae:	2301      	movs	r3, #1
 80017b0:	f8c7 321c 	str.w	r3, [r7, #540]	@ 0x21c
			if(stat_value == 1 || stat_value == 5)
 80017b4:	e056      	b.n	8001864 <SIM_Init+0x3a4>
			}
			else
			{
				SIM_Send_Command("AT+CEREG?\r");
 80017b6:	481c      	ldr	r0, [pc, #112]	@ (8001828 <SIM_Init+0x368>)
 80017b8:	f000 f96a 	bl	8001a90 <SIM_Send_Command>
				SIM_Receive_Response(response, 5000);
 80017bc:	f107 0314 	add.w	r3, r7, #20
 80017c0:	f241 3188 	movw	r1, #5000	@ 0x1388
 80017c4:	4618      	mov	r0, r3
 80017c6:	f000 f98f 	bl	8001ae8 <SIM_Receive_Response>
				HAL_Delay(1000);
 80017ca:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80017ce:	f009 fb1f 	bl	800ae10 <HAL_Delay>
			if(stat_value == 1 || stat_value == 5)
 80017d2:	e047      	b.n	8001864 <SIM_Init+0x3a4>
 80017d4:	08017160 	.word	0x08017160
 80017d8:	20001898 	.word	0x20001898
 80017dc:	20001a5a 	.word	0x20001a5a
 80017e0:	2000191c 	.word	0x2000191c
 80017e4:	20001a9a 	.word	0x20001a9a
 80017e8:	20001980 	.word	0x20001980
 80017ec:	08017170 	.word	0x08017170
 80017f0:	08017174 	.word	0x08017174
 80017f4:	08017178 	.word	0x08017178
 80017f8:	20000724 	.word	0x20000724
 80017fc:	0801717c 	.word	0x0801717c
 8001800:	0801718c 	.word	0x0801718c
 8001804:	08017194 	.word	0x08017194
 8001808:	080171a0 	.word	0x080171a0
 800180c:	080171ac 	.word	0x080171ac
 8001810:	080171b8 	.word	0x080171b8
 8001814:	080171c4 	.word	0x080171c4
 8001818:	080171cc 	.word	0x080171cc
 800181c:	080171d4 	.word	0x080171d4
 8001820:	080171e4 	.word	0x080171e4
 8001824:	080171ec 	.word	0x080171ec
 8001828:	080171f8 	.word	0x080171f8
 800182c:	08017204 	.word	0x08017204
 8001830:	0801720c 	.word	0x0801720c
 8001834:	0801721c 	.word	0x0801721c
 8001838:	08017228 	.word	0x08017228
 800183c:	0001d4c0 	.word	0x0001d4c0
 8001840:	08017234 	.word	0x08017234
 8001844:	0002bf20 	.word	0x0002bf20
			}
		}
		else
		{
			SIM_Send_Command("AT+CEREG?\r");
 8001848:	486d      	ldr	r0, [pc, #436]	@ (8001a00 <SIM_Init+0x540>)
 800184a:	f000 f921 	bl	8001a90 <SIM_Send_Command>
			SIM_Receive_Response(response, 5000);
 800184e:	f107 0314 	add.w	r3, r7, #20
 8001852:	f241 3188 	movw	r1, #5000	@ 0x1388
 8001856:	4618      	mov	r0, r3
 8001858:	f000 f946 	bl	8001ae8 <SIM_Receive_Response>
			HAL_Delay(1000);
 800185c:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001860:	f009 fad6 	bl	800ae10 <HAL_Delay>
	while(stat != 1)
 8001864:	f8d7 321c 	ldr.w	r3, [r7, #540]	@ 0x21c
 8001868:	2b01      	cmp	r3, #1
 800186a:	f47f af6f 	bne.w	800174c <SIM_Init+0x28c>
		}
	}

	APN:
 800186e:	e000      	b.n	8001872 <SIM_Init+0x3b2>
			goto APN;
 8001870:	bf00      	nop
	SIM_Send_Command("AT+CNACT?\r");                                                              //Verifica indirizzo IP
 8001872:	4864      	ldr	r0, [pc, #400]	@ (8001a04 <SIM_Init+0x544>)
 8001874:	f000 f90c 	bl	8001a90 <SIM_Send_Command>
	SIM_Receive_Response(response, 5000);
 8001878:	f107 0314 	add.w	r3, r7, #20
 800187c:	f241 3188 	movw	r1, #5000	@ 0x1388
 8001880:	4618      	mov	r0, r3
 8001882:	f000 f931 	bl	8001ae8 <SIM_Receive_Response>
	if(SIM_Check_IP(response))
 8001886:	f107 0314 	add.w	r3, r7, #20
 800188a:	4618      	mov	r0, r3
 800188c:	f000 f956 	bl	8001b3c <SIM_Check_IP>
 8001890:	4603      	mov	r3, r0
 8001892:	2b00      	cmp	r3, #0
 8001894:	d16b      	bne.n	800196e <SIM_Init+0x4ae>
	{
		goto TCP;
	}

	sprintf(command, "AT+CGDCONT=1,\"IP\",\"%s\"\r", sys.apn);                                    //Configurazione APN
 8001896:	f507 738a 	add.w	r3, r7, #276	@ 0x114
 800189a:	4a5b      	ldr	r2, [pc, #364]	@ (8001a08 <SIM_Init+0x548>)
 800189c:	495b      	ldr	r1, [pc, #364]	@ (8001a0c <SIM_Init+0x54c>)
 800189e:	4618      	mov	r0, r3
 80018a0:	f014 fb12 	bl	8015ec8 <siprintf>
	SIM_Send_Command(command);
 80018a4:	f507 738a 	add.w	r3, r7, #276	@ 0x114
 80018a8:	4618      	mov	r0, r3
 80018aa:	f000 f8f1 	bl	8001a90 <SIM_Send_Command>
	SIM_Receive_Response(response, 5000);
 80018ae:	f107 0314 	add.w	r3, r7, #20
 80018b2:	f241 3188 	movw	r1, #5000	@ 0x1388
 80018b6:	4618      	mov	r0, r3
 80018b8:	f000 f916 	bl	8001ae8 <SIM_Receive_Response>
	if(strstr(response, "ERROR") != NULL)
 80018bc:	f107 0314 	add.w	r3, r7, #20
 80018c0:	4953      	ldr	r1, [pc, #332]	@ (8001a10 <SIM_Init+0x550>)
 80018c2:	4618      	mov	r0, r3
 80018c4:	f014 fb9a 	bl	8015ffc <strstr>
 80018c8:	4603      	mov	r3, r0
 80018ca:	2b00      	cmp	r3, #0
 80018cc:	d002      	beq.n	80018d4 <SIM_Init+0x414>
	{
		return -1;
 80018ce:	f04f 33ff 	mov.w	r3, #4294967295
 80018d2:	e090      	b.n	80019f6 <SIM_Init+0x536>
	}

	SIM_Send_Command("AT+CNACT=1\r");                                                             //Attivazione della rete
 80018d4:	484f      	ldr	r0, [pc, #316]	@ (8001a14 <SIM_Init+0x554>)
 80018d6:	f000 f8db 	bl	8001a90 <SIM_Send_Command>
	SIM_Receive_Response(response, 5000);
 80018da:	f107 0314 	add.w	r3, r7, #20
 80018de:	f241 3188 	movw	r1, #5000	@ 0x1388
 80018e2:	4618      	mov	r0, r3
 80018e4:	f000 f900 	bl	8001ae8 <SIM_Receive_Response>
	if(strstr(response, "+APP PDP: ACTIVE") == NULL)
 80018e8:	f107 0314 	add.w	r3, r7, #20
 80018ec:	494a      	ldr	r1, [pc, #296]	@ (8001a18 <SIM_Init+0x558>)
 80018ee:	4618      	mov	r0, r3
 80018f0:	f014 fb84 	bl	8015ffc <strstr>
 80018f4:	4603      	mov	r3, r0
 80018f6:	2b00      	cmp	r3, #0
 80018f8:	d117      	bne.n	800192a <SIM_Init+0x46a>
	{
		while(strstr(response, "+APP PDP: ACTIVE") == NULL)
 80018fa:	e00d      	b.n	8001918 <SIM_Init+0x458>
		{
			SIM_Send_Command("AT+CNACT=1\r");
 80018fc:	4845      	ldr	r0, [pc, #276]	@ (8001a14 <SIM_Init+0x554>)
 80018fe:	f000 f8c7 	bl	8001a90 <SIM_Send_Command>
			SIM_Receive_Response(response, 5000);
 8001902:	f107 0314 	add.w	r3, r7, #20
 8001906:	f241 3188 	movw	r1, #5000	@ 0x1388
 800190a:	4618      	mov	r0, r3
 800190c:	f000 f8ec 	bl	8001ae8 <SIM_Receive_Response>
			HAL_Delay(1000);
 8001910:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001914:	f009 fa7c 	bl	800ae10 <HAL_Delay>
		while(strstr(response, "+APP PDP: ACTIVE") == NULL)
 8001918:	f107 0314 	add.w	r3, r7, #20
 800191c:	493e      	ldr	r1, [pc, #248]	@ (8001a18 <SIM_Init+0x558>)
 800191e:	4618      	mov	r0, r3
 8001920:	f014 fb6c 	bl	8015ffc <strstr>
 8001924:	4603      	mov	r3, r0
 8001926:	2b00      	cmp	r3, #0
 8001928:	d0e8      	beq.n	80018fc <SIM_Init+0x43c>
		}
	}

	SIM_Send_Command("AT+CNACT?\r");                                                              //Verifica indirizzo IP
 800192a:	4836      	ldr	r0, [pc, #216]	@ (8001a04 <SIM_Init+0x544>)
 800192c:	f000 f8b0 	bl	8001a90 <SIM_Send_Command>
	SIM_Receive_Response(response, 5000);
 8001930:	f107 0314 	add.w	r3, r7, #20
 8001934:	f241 3188 	movw	r1, #5000	@ 0x1388
 8001938:	4618      	mov	r0, r3
 800193a:	f000 f8d5 	bl	8001ae8 <SIM_Receive_Response>
	while(!SIM_Check_IP(response))
 800193e:	e00d      	b.n	800195c <SIM_Init+0x49c>
	{
		SIM_Send_Command("AT+CNACT?\r");
 8001940:	4830      	ldr	r0, [pc, #192]	@ (8001a04 <SIM_Init+0x544>)
 8001942:	f000 f8a5 	bl	8001a90 <SIM_Send_Command>
		SIM_Receive_Response(response, 5000);
 8001946:	f107 0314 	add.w	r3, r7, #20
 800194a:	f241 3188 	movw	r1, #5000	@ 0x1388
 800194e:	4618      	mov	r0, r3
 8001950:	f000 f8ca 	bl	8001ae8 <SIM_Receive_Response>
		HAL_Delay(1000);
 8001954:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001958:	f009 fa5a 	bl	800ae10 <HAL_Delay>
	while(!SIM_Check_IP(response))
 800195c:	f107 0314 	add.w	r3, r7, #20
 8001960:	4618      	mov	r0, r3
 8001962:	f000 f8eb 	bl	8001b3c <SIM_Check_IP>
 8001966:	4603      	mov	r3, r0
 8001968:	2b00      	cmp	r3, #0
 800196a:	d0e9      	beq.n	8001940 <SIM_Init+0x480>
	}
	
	TCP:
 800196c:	e000      	b.n	8001970 <SIM_Init+0x4b0>
		goto TCP;
 800196e:	bf00      	nop
	SIM_Send_Command("AT+CIPRXGET=0\r");                                                         //Impostazione ricezione automatica da server TCP
 8001970:	482a      	ldr	r0, [pc, #168]	@ (8001a1c <SIM_Init+0x55c>)
 8001972:	f000 f88d 	bl	8001a90 <SIM_Send_Command>
	if(SIM_Wait_Response("OK") != HAL_OK) return -1;
 8001976:	482a      	ldr	r0, [pc, #168]	@ (8001a20 <SIM_Init+0x560>)
 8001978:	f000 fc06 	bl	8002188 <SIM_Wait_Response>
 800197c:	4603      	mov	r3, r0
 800197e:	2b00      	cmp	r3, #0
 8001980:	d002      	beq.n	8001988 <SIM_Init+0x4c8>
 8001982:	f04f 33ff 	mov.w	r3, #4294967295
 8001986:	e036      	b.n	80019f6 <SIM_Init+0x536>

	sprintf(command, "AT+CIPSTART=\"TCP\",\"%s\",%s\r", sys.TCP.IP_address, sys.TCP.Port);       //Connessione TCP
 8001988:	f507 708a 	add.w	r0, r7, #276	@ 0x114
 800198c:	4b25      	ldr	r3, [pc, #148]	@ (8001a24 <SIM_Init+0x564>)
 800198e:	4a26      	ldr	r2, [pc, #152]	@ (8001a28 <SIM_Init+0x568>)
 8001990:	4926      	ldr	r1, [pc, #152]	@ (8001a2c <SIM_Init+0x56c>)
 8001992:	f014 fa99 	bl	8015ec8 <siprintf>
	SIM_Send_Command(command);
 8001996:	f507 738a 	add.w	r3, r7, #276	@ 0x114
 800199a:	4618      	mov	r0, r3
 800199c:	f000 f878 	bl	8001a90 <SIM_Send_Command>
	if(SIM_Wait_Response("CONNECT OK") != HAL_OK) return -1;
 80019a0:	4823      	ldr	r0, [pc, #140]	@ (8001a30 <SIM_Init+0x570>)
 80019a2:	f000 fbf1 	bl	8002188 <SIM_Wait_Response>
 80019a6:	4603      	mov	r3, r0
 80019a8:	2b00      	cmp	r3, #0
 80019aa:	d002      	beq.n	80019b2 <SIM_Init+0x4f2>
 80019ac:	f04f 33ff 	mov.w	r3, #4294967295
 80019b0:	e021      	b.n	80019f6 <SIM_Init+0x536>

	SIM_Send_Command("AT+CIPSTATUS=0\r");                                                        //Verifica connessione al server TCP
 80019b2:	4820      	ldr	r0, [pc, #128]	@ (8001a34 <SIM_Init+0x574>)
 80019b4:	f000 f86c 	bl	8001a90 <SIM_Send_Command>
	SIM_Receive_Response(response, 5000);
 80019b8:	f107 0314 	add.w	r3, r7, #20
 80019bc:	f241 3188 	movw	r1, #5000	@ 0x1388
 80019c0:	4618      	mov	r0, r3
 80019c2:	f000 f891 	bl	8001ae8 <SIM_Receive_Response>
	while(!SIM_Check_TCP_State(response))
 80019c6:	e00d      	b.n	80019e4 <SIM_Init+0x524>
	{
		SIM_Send_Command("AT+CIPSTATUS=0\r");
 80019c8:	481a      	ldr	r0, [pc, #104]	@ (8001a34 <SIM_Init+0x574>)
 80019ca:	f000 f861 	bl	8001a90 <SIM_Send_Command>
		SIM_Receive_Response(response, 5000);
 80019ce:	f107 0314 	add.w	r3, r7, #20
 80019d2:	f241 3188 	movw	r1, #5000	@ 0x1388
 80019d6:	4618      	mov	r0, r3
 80019d8:	f000 f886 	bl	8001ae8 <SIM_Receive_Response>
		HAL_Delay(1000);
 80019dc:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80019e0:	f009 fa16 	bl	800ae10 <HAL_Delay>
	while(!SIM_Check_TCP_State(response))
 80019e4:	f107 0314 	add.w	r3, r7, #20
 80019e8:	4618      	mov	r0, r3
 80019ea:	f000 f8db 	bl	8001ba4 <SIM_Check_TCP_State>
 80019ee:	4603      	mov	r3, r0
 80019f0:	2b00      	cmp	r3, #0
 80019f2:	d0e9      	beq.n	80019c8 <SIM_Init+0x508>
	}

	return 0;
 80019f4:	2300      	movs	r3, #0
}
 80019f6:	4618      	mov	r0, r3
 80019f8:	f507 7708 	add.w	r7, r7, #544	@ 0x220
 80019fc:	46bd      	mov	sp, r7
 80019fe:	bd80      	pop	{r7, pc}
 8001a00:	080171f8 	.word	0x080171f8
 8001a04:	08017244 	.word	0x08017244
 8001a08:	20001898 	.word	0x20001898
 8001a0c:	08017250 	.word	0x08017250
 8001a10:	08017268 	.word	0x08017268
 8001a14:	08017270 	.word	0x08017270
 8001a18:	0801727c 	.word	0x0801727c
 8001a1c:	08017290 	.word	0x08017290
 8001a20:	08017178 	.word	0x08017178
 8001a24:	20001980 	.word	0x20001980
 8001a28:	2000191c 	.word	0x2000191c
 8001a2c:	080172a0 	.word	0x080172a0
 8001a30:	080172bc 	.word	0x080172bc
 8001a34:	080172c8 	.word	0x080172c8

08001a38 <SIM_Power_On>:

/*------ACCENSIONE DEL MODULO LTE------*/
void SIM_Power_On(void)
{
 8001a38:	b580      	push	{r7, lr}
 8001a3a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LTE_POWER_ON_GPIO_Port, LTE_POWER_ON_Pin, GPIO_PIN_SET);
 8001a3c:	2201      	movs	r2, #1
 8001a3e:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8001a42:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001a46:	f00c fbcd 	bl	800e1e4 <HAL_GPIO_WritePin>
	HAL_Delay(1500);
 8001a4a:	f240 50dc 	movw	r0, #1500	@ 0x5dc
 8001a4e:	f009 f9df 	bl	800ae10 <HAL_Delay>
	HAL_GPIO_WritePin(LTE_POWER_ON_GPIO_Port, LTE_POWER_ON_Pin, GPIO_PIN_RESET);
 8001a52:	2200      	movs	r2, #0
 8001a54:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8001a58:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001a5c:	f00c fbc2 	bl	800e1e4 <HAL_GPIO_WritePin>
}
 8001a60:	bf00      	nop
 8001a62:	bd80      	pop	{r7, pc}

08001a64 <SIM_Power_Off>:

/*------SPEGNIMENTO DEL MODULO LTE------*/
void SIM_Power_Off(void)
{
 8001a64:	b580      	push	{r7, lr}
 8001a66:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LTE_POWER_ON_GPIO_Port, LTE_POWER_ON_Pin, GPIO_PIN_SET);
 8001a68:	2201      	movs	r2, #1
 8001a6a:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8001a6e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001a72:	f00c fbb7 	bl	800e1e4 <HAL_GPIO_WritePin>
	HAL_Delay(1500);
 8001a76:	f240 50dc 	movw	r0, #1500	@ 0x5dc
 8001a7a:	f009 f9c9 	bl	800ae10 <HAL_Delay>
	HAL_GPIO_WritePin(LTE_POWER_ON_GPIO_Port, LTE_POWER_ON_Pin, GPIO_PIN_RESET);
 8001a7e:	2200      	movs	r2, #0
 8001a80:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8001a84:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001a88:	f00c fbac 	bl	800e1e4 <HAL_GPIO_WritePin>
}
 8001a8c:	bf00      	nop
 8001a8e:	bd80      	pop	{r7, pc}

08001a90 <SIM_Send_Command>:
	HAL_GPIO_WritePin(LTE_RESET_GPIO_Port, LTE_RESET_Pin, GPIO_PIN_RESET);
}

/*------INVIO COMANDO AL MODULO LTE------*/
void SIM_Send_Command(char* command)
{
 8001a90:	b580      	push	{r7, lr}
 8001a92:	b084      	sub	sp, #16
 8001a94:	af00      	add	r7, sp, #0
 8001a96:	6078      	str	r0, [r7, #4]
	uint16_t len = (uint16_t)strlen(command);
 8001a98:	6878      	ldr	r0, [r7, #4]
 8001a9a:	f7fe fba3 	bl	80001e4 <strlen>
 8001a9e:	4603      	mov	r3, r0
 8001aa0:	81fb      	strh	r3, [r7, #14]

	HAL_UART_Transmit(SIM_UART, (uint8_t*)command, len, 100);
 8001aa2:	89fa      	ldrh	r2, [r7, #14]
 8001aa4:	2364      	movs	r3, #100	@ 0x64
 8001aa6:	6879      	ldr	r1, [r7, #4]
 8001aa8:	4803      	ldr	r0, [pc, #12]	@ (8001ab8 <SIM_Send_Command+0x28>)
 8001aaa:	f012 fec5 	bl	8014838 <HAL_UART_Transmit>
}
 8001aae:	bf00      	nop
 8001ab0:	3710      	adds	r7, #16
 8001ab2:	46bd      	mov	sp, r7
 8001ab4:	bd80      	pop	{r7, pc}
 8001ab6:	bf00      	nop
 8001ab8:	20000724 	.word	0x20000724

08001abc <SIM_Send_Command_DMA>:

/*------INVIO COMANDO AL MODULO LTE (DMA)------*/
void SIM_Send_Command_DMA(char* command)
{
 8001abc:	b580      	push	{r7, lr}
 8001abe:	b084      	sub	sp, #16
 8001ac0:	af00      	add	r7, sp, #0
 8001ac2:	6078      	str	r0, [r7, #4]
	uint16_t len = (uint16_t)strlen(command);
 8001ac4:	6878      	ldr	r0, [r7, #4]
 8001ac6:	f7fe fb8d 	bl	80001e4 <strlen>
 8001aca:	4603      	mov	r3, r0
 8001acc:	81fb      	strh	r3, [r7, #14]

	HAL_UART_Transmit_DMA(SIM_UART, (uint8_t*)command, len);
 8001ace:	89fb      	ldrh	r3, [r7, #14]
 8001ad0:	461a      	mov	r2, r3
 8001ad2:	6879      	ldr	r1, [r7, #4]
 8001ad4:	4803      	ldr	r0, [pc, #12]	@ (8001ae4 <SIM_Send_Command_DMA+0x28>)
 8001ad6:	f013 f801 	bl	8014adc <HAL_UART_Transmit_DMA>
}
 8001ada:	bf00      	nop
 8001adc:	3710      	adds	r7, #16
 8001ade:	46bd      	mov	sp, r7
 8001ae0:	bd80      	pop	{r7, pc}
 8001ae2:	bf00      	nop
 8001ae4:	20000724 	.word	0x20000724

08001ae8 <SIM_Receive_Response>:

/*------RICEZIONE RISPOSTA DAL MODULO LTE------*/
uint16_t SIM_Receive_Response(char* rx, uint32_t timeout_ms)
{
 8001ae8:	b580      	push	{r7, lr}
 8001aea:	b086      	sub	sp, #24
 8001aec:	af02      	add	r7, sp, #8
 8001aee:	6078      	str	r0, [r7, #4]
 8001af0:	6039      	str	r1, [r7, #0]
	uint16_t RxLen = 0;
 8001af2:	2300      	movs	r3, #0
 8001af4:	817b      	strh	r3, [r7, #10]
	uint32_t start_time = HAL_GetTick();
 8001af6:	f009 f97f 	bl	800adf8 <HAL_GetTick>
 8001afa:	60f8      	str	r0, [r7, #12]

	while ((HAL_GetTick() - start_time) < timeout_ms)
 8001afc:	e00d      	b.n	8001b1a <SIM_Receive_Response+0x32>
	{
		HAL_UARTEx_ReceiveToIdle(SIM_UART, (uint8_t *)rx, 256, &RxLen, 500);
 8001afe:	f107 030a 	add.w	r3, r7, #10
 8001b02:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 8001b06:	9200      	str	r2, [sp, #0]
 8001b08:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001b0c:	6879      	ldr	r1, [r7, #4]
 8001b0e:	480a      	ldr	r0, [pc, #40]	@ (8001b38 <SIM_Receive_Response+0x50>)
 8001b10:	f013 fff9 	bl	8015b06 <HAL_UARTEx_ReceiveToIdle>
		if (RxLen > 0)
 8001b14:	897b      	ldrh	r3, [r7, #10]
 8001b16:	2b00      	cmp	r3, #0
 8001b18:	d108      	bne.n	8001b2c <SIM_Receive_Response+0x44>
	while ((HAL_GetTick() - start_time) < timeout_ms)
 8001b1a:	f009 f96d 	bl	800adf8 <HAL_GetTick>
 8001b1e:	4602      	mov	r2, r0
 8001b20:	68fb      	ldr	r3, [r7, #12]
 8001b22:	1ad3      	subs	r3, r2, r3
 8001b24:	683a      	ldr	r2, [r7, #0]
 8001b26:	429a      	cmp	r2, r3
 8001b28:	d8e9      	bhi.n	8001afe <SIM_Receive_Response+0x16>
 8001b2a:	e000      	b.n	8001b2e <SIM_Receive_Response+0x46>
			break;
 8001b2c:	bf00      	nop
	}
	return RxLen;
 8001b2e:	897b      	ldrh	r3, [r7, #10]
}
 8001b30:	4618      	mov	r0, r3
 8001b32:	3710      	adds	r7, #16
 8001b34:	46bd      	mov	sp, r7
 8001b36:	bd80      	pop	{r7, pc}
 8001b38:	20000724 	.word	0x20000724

08001b3c <SIM_Check_IP>:

/*------CONTROLLO INDIRIZZO IP------*/
int SIM_Check_IP(const char* response)
{
 8001b3c:	b580      	push	{r7, lr}
 8001b3e:	b08c      	sub	sp, #48	@ 0x30
 8001b40:	af00      	add	r7, sp, #0
 8001b42:	6078      	str	r0, [r7, #4]
	char* cnact_pos = strstr(response, "+CNACT:");
 8001b44:	4915      	ldr	r1, [pc, #84]	@ (8001b9c <SIM_Check_IP+0x60>)
 8001b46:	6878      	ldr	r0, [r7, #4]
 8001b48:	f014 fa58 	bl	8015ffc <strstr>
 8001b4c:	62f8      	str	r0, [r7, #44]	@ 0x2c
	if(cnact_pos != NULL) 
 8001b4e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001b50:	2b00      	cmp	r3, #0
 8001b52:	d01d      	beq.n	8001b90 <SIM_Check_IP+0x54>
	{
		int status;
		char ip_addr[32] = {0};
 8001b54:	f107 0308 	add.w	r3, r7, #8
 8001b58:	2220      	movs	r2, #32
 8001b5a:	2100      	movs	r1, #0
 8001b5c:	4618      	mov	r0, r3
 8001b5e:	f014 fa13 	bl	8015f88 <memset>
		if(sscanf(cnact_pos, "+CNACT: %d,%31s", &status, ip_addr) == 2)
 8001b62:	f107 0308 	add.w	r3, r7, #8
 8001b66:	f107 0228 	add.w	r2, r7, #40	@ 0x28
 8001b6a:	490d      	ldr	r1, [pc, #52]	@ (8001ba0 <SIM_Check_IP+0x64>)
 8001b6c:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8001b6e:	f014 f9cd 	bl	8015f0c <siscanf>
 8001b72:	4603      	mov	r3, r0
 8001b74:	2b02      	cmp	r3, #2
 8001b76:	d10b      	bne.n	8001b90 <SIM_Check_IP+0x54>
		{
			return (status == 1 && strlen(ip_addr) > 0) ? 1 : 0;
 8001b78:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001b7a:	2b01      	cmp	r3, #1
 8001b7c:	d106      	bne.n	8001b8c <SIM_Check_IP+0x50>
 8001b7e:	f107 0308 	add.w	r3, r7, #8
 8001b82:	781b      	ldrb	r3, [r3, #0]
 8001b84:	2b00      	cmp	r3, #0
 8001b86:	d001      	beq.n	8001b8c <SIM_Check_IP+0x50>
 8001b88:	2301      	movs	r3, #1
 8001b8a:	e002      	b.n	8001b92 <SIM_Check_IP+0x56>
 8001b8c:	2300      	movs	r3, #0
 8001b8e:	e000      	b.n	8001b92 <SIM_Check_IP+0x56>
		}
	}
	return 0;
 8001b90:	2300      	movs	r3, #0
}
 8001b92:	4618      	mov	r0, r3
 8001b94:	3730      	adds	r7, #48	@ 0x30
 8001b96:	46bd      	mov	sp, r7
 8001b98:	bd80      	pop	{r7, pc}
 8001b9a:	bf00      	nop
 8001b9c:	080172d8 	.word	0x080172d8
 8001ba0:	080172e0 	.word	0x080172e0

08001ba4 <SIM_Check_TCP_State>:
    return 0;
}

/*------CONTROLLO STATO CONNESSIONE TCP------*/
int SIM_Check_TCP_State(const char* response)
{
 8001ba4:	b580      	push	{r7, lr}
 8001ba6:	b084      	sub	sp, #16
 8001ba8:	af00      	add	r7, sp, #0
 8001baa:	6078      	str	r0, [r7, #4]
    char* cipstatus_pos = strstr(response, "+CIPSTATUS: 0");
 8001bac:	490a      	ldr	r1, [pc, #40]	@ (8001bd8 <SIM_Check_TCP_State+0x34>)
 8001bae:	6878      	ldr	r0, [r7, #4]
 8001bb0:	f014 fa24 	bl	8015ffc <strstr>
 8001bb4:	60f8      	str	r0, [r7, #12]
    if(cipstatus_pos != NULL) {
 8001bb6:	68fb      	ldr	r3, [r7, #12]
 8001bb8:	2b00      	cmp	r3, #0
 8001bba:	d008      	beq.n	8001bce <SIM_Check_TCP_State+0x2a>
        // Cerca "CONNECTED" nella stessa riga
        if(strstr(cipstatus_pos, "CONNECTED") != NULL) {
 8001bbc:	4907      	ldr	r1, [pc, #28]	@ (8001bdc <SIM_Check_TCP_State+0x38>)
 8001bbe:	68f8      	ldr	r0, [r7, #12]
 8001bc0:	f014 fa1c 	bl	8015ffc <strstr>
 8001bc4:	4603      	mov	r3, r0
 8001bc6:	2b00      	cmp	r3, #0
 8001bc8:	d001      	beq.n	8001bce <SIM_Check_TCP_State+0x2a>
            return 1;
 8001bca:	2301      	movs	r3, #1
 8001bcc:	e000      	b.n	8001bd0 <SIM_Check_TCP_State+0x2c>
        }
    }
    return 0;
 8001bce:	2300      	movs	r3, #0
}
 8001bd0:	4618      	mov	r0, r3
 8001bd2:	3710      	adds	r7, #16
 8001bd4:	46bd      	mov	sp, r7
 8001bd6:	bd80      	pop	{r7, pc}
 8001bd8:	0801730c 	.word	0x0801730c
 8001bdc:	0801731c 	.word	0x0801731c

08001be0 <SIM_Parse_Command>:

/*------PARSING MESSAGGIO MQTT------*/
void SIM_Parse_Command(void)
{
 8001be0:	b580      	push	{r7, lr}
 8001be2:	b086      	sub	sp, #24
 8001be4:	af00      	add	r7, sp, #0
	char* buf = (char*)sim_rx_buffer;
 8001be6:	4b71      	ldr	r3, [pc, #452]	@ (8001dac <SIM_Parse_Command+0x1cc>)
 8001be8:	60fb      	str	r3, [r7, #12]

	if(strncmp(buf, "+CMD,", 5) == 0)
 8001bea:	2205      	movs	r2, #5
 8001bec:	4970      	ldr	r1, [pc, #448]	@ (8001db0 <SIM_Parse_Command+0x1d0>)
 8001bee:	68f8      	ldr	r0, [r7, #12]
 8001bf0:	f014 f9df 	bl	8015fb2 <strncmp>
 8001bf4:	4603      	mov	r3, r0
 8001bf6:	2b00      	cmp	r3, #0
 8001bf8:	f040 80d3 	bne.w	8001da2 <SIM_Parse_Command+0x1c2>
	{
		char* pos = buf + 5;
 8001bfc:	68fb      	ldr	r3, [r7, #12]
 8001bfe:	3305      	adds	r3, #5
 8001c00:	60bb      	str	r3, [r7, #8]
		// Estrai il valore del comando (cmd_val) come stringa
		char cmd_str[8] = {0};
 8001c02:	463b      	mov	r3, r7
 8001c04:	2200      	movs	r2, #0
 8001c06:	601a      	str	r2, [r3, #0]
 8001c08:	605a      	str	r2, [r3, #4]
		int i = 0;
 8001c0a:	2300      	movs	r3, #0
 8001c0c:	617b      	str	r3, [r7, #20]
		while(pos[i] != ',' && pos[i] != '\0' && i < 7) 
 8001c0e:	e00b      	b.n	8001c28 <SIM_Parse_Command+0x48>
		{
			cmd_str[i] = pos[i];
 8001c10:	697b      	ldr	r3, [r7, #20]
 8001c12:	68ba      	ldr	r2, [r7, #8]
 8001c14:	4413      	add	r3, r2
 8001c16:	7819      	ldrb	r1, [r3, #0]
 8001c18:	463a      	mov	r2, r7
 8001c1a:	697b      	ldr	r3, [r7, #20]
 8001c1c:	4413      	add	r3, r2
 8001c1e:	460a      	mov	r2, r1
 8001c20:	701a      	strb	r2, [r3, #0]
			i++;
 8001c22:	697b      	ldr	r3, [r7, #20]
 8001c24:	3301      	adds	r3, #1
 8001c26:	617b      	str	r3, [r7, #20]
		while(pos[i] != ',' && pos[i] != '\0' && i < 7) 
 8001c28:	697b      	ldr	r3, [r7, #20]
 8001c2a:	68ba      	ldr	r2, [r7, #8]
 8001c2c:	4413      	add	r3, r2
 8001c2e:	781b      	ldrb	r3, [r3, #0]
 8001c30:	2b2c      	cmp	r3, #44	@ 0x2c
 8001c32:	d008      	beq.n	8001c46 <SIM_Parse_Command+0x66>
 8001c34:	697b      	ldr	r3, [r7, #20]
 8001c36:	68ba      	ldr	r2, [r7, #8]
 8001c38:	4413      	add	r3, r2
 8001c3a:	781b      	ldrb	r3, [r3, #0]
 8001c3c:	2b00      	cmp	r3, #0
 8001c3e:	d002      	beq.n	8001c46 <SIM_Parse_Command+0x66>
 8001c40:	697b      	ldr	r3, [r7, #20]
 8001c42:	2b06      	cmp	r3, #6
 8001c44:	dde4      	ble.n	8001c10 <SIM_Parse_Command+0x30>
		}
		cmd_str[i] = '\0';
 8001c46:	463a      	mov	r2, r7
 8001c48:	697b      	ldr	r3, [r7, #20]
 8001c4a:	4413      	add	r3, r2
 8001c4c:	2200      	movs	r2, #0
 8001c4e:	701a      	strb	r2, [r3, #0]

		// Avanza oltre la virgola per eventuale parsing successivo
		char* data_pos = pos + i;
 8001c50:	697b      	ldr	r3, [r7, #20]
 8001c52:	68ba      	ldr	r2, [r7, #8]
 8001c54:	4413      	add	r3, r2
 8001c56:	613b      	str	r3, [r7, #16]
		if(*data_pos == ',') data_pos++;
 8001c58:	693b      	ldr	r3, [r7, #16]
 8001c5a:	781b      	ldrb	r3, [r3, #0]
 8001c5c:	2b2c      	cmp	r3, #44	@ 0x2c
 8001c5e:	d102      	bne.n	8001c66 <SIM_Parse_Command+0x86>
 8001c60:	693b      	ldr	r3, [r7, #16]
 8001c62:	3301      	adds	r3, #1
 8001c64:	613b      	str	r3, [r7, #16]

		if(strcmp(cmd_str, "IDL") == 0) 
 8001c66:	463b      	mov	r3, r7
 8001c68:	4952      	ldr	r1, [pc, #328]	@ (8001db4 <SIM_Parse_Command+0x1d4>)
 8001c6a:	4618      	mov	r0, r3
 8001c6c:	f7fe fab0 	bl	80001d0 <strcmp>
 8001c70:	4603      	mov	r3, r0
 8001c72:	2b00      	cmp	r3, #0
 8001c74:	d105      	bne.n	8001c82 <SIM_Parse_Command+0xa2>
		{
			flags.CMD.Idle = 1;
 8001c76:	4a50      	ldr	r2, [pc, #320]	@ (8001db8 <SIM_Parse_Command+0x1d8>)
 8001c78:	7893      	ldrb	r3, [r2, #2]
 8001c7a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001c7e:	7093      	strb	r3, [r2, #2]
		else if(strcmp(cmd_str, "RST") == 0) 
		{
			HAL_NVIC_SystemReset();
		}
	}
}
 8001c80:	e08f      	b.n	8001da2 <SIM_Parse_Command+0x1c2>
		else if(strcmp(cmd_str, "SRT") == 0) 
 8001c82:	463b      	mov	r3, r7
 8001c84:	494d      	ldr	r1, [pc, #308]	@ (8001dbc <SIM_Parse_Command+0x1dc>)
 8001c86:	4618      	mov	r0, r3
 8001c88:	f7fe faa2 	bl	80001d0 <strcmp>
 8001c8c:	4603      	mov	r3, r0
 8001c8e:	2b00      	cmp	r3, #0
 8001c90:	d105      	bne.n	8001c9e <SIM_Parse_Command+0xbe>
			flags.CMD.Start_Meas = 1;
 8001c92:	4a49      	ldr	r2, [pc, #292]	@ (8001db8 <SIM_Parse_Command+0x1d8>)
 8001c94:	7893      	ldrb	r3, [r2, #2]
 8001c96:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001c9a:	7093      	strb	r3, [r2, #2]
}
 8001c9c:	e081      	b.n	8001da2 <SIM_Parse_Command+0x1c2>
		else if(strcmp(cmd_str, "PNG") == 0) 
 8001c9e:	463b      	mov	r3, r7
 8001ca0:	4947      	ldr	r1, [pc, #284]	@ (8001dc0 <SIM_Parse_Command+0x1e0>)
 8001ca2:	4618      	mov	r0, r3
 8001ca4:	f7fe fa94 	bl	80001d0 <strcmp>
 8001ca8:	4603      	mov	r3, r0
 8001caa:	2b00      	cmp	r3, #0
 8001cac:	d105      	bne.n	8001cba <SIM_Parse_Command+0xda>
			flags.CMD.Ping = 1;
 8001cae:	4a42      	ldr	r2, [pc, #264]	@ (8001db8 <SIM_Parse_Command+0x1d8>)
 8001cb0:	7893      	ldrb	r3, [r2, #2]
 8001cb2:	f043 0308 	orr.w	r3, r3, #8
 8001cb6:	7093      	strb	r3, [r2, #2]
}
 8001cb8:	e073      	b.n	8001da2 <SIM_Parse_Command+0x1c2>
		else if(strcmp(cmd_str, "SND") == 0) 
 8001cba:	463b      	mov	r3, r7
 8001cbc:	4941      	ldr	r1, [pc, #260]	@ (8001dc4 <SIM_Parse_Command+0x1e4>)
 8001cbe:	4618      	mov	r0, r3
 8001cc0:	f7fe fa86 	bl	80001d0 <strcmp>
 8001cc4:	4603      	mov	r3, r0
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	d105      	bne.n	8001cd6 <SIM_Parse_Command+0xf6>
			flags.CMD.Data_Request = 1;
 8001cca:	4a3b      	ldr	r2, [pc, #236]	@ (8001db8 <SIM_Parse_Command+0x1d8>)
 8001ccc:	7893      	ldrb	r3, [r2, #2]
 8001cce:	f043 0301 	orr.w	r3, r3, #1
 8001cd2:	7093      	strb	r3, [r2, #2]
}
 8001cd4:	e065      	b.n	8001da2 <SIM_Parse_Command+0x1c2>
		else if(strcmp(cmd_str, "MSR") == 0) 
 8001cd6:	463b      	mov	r3, r7
 8001cd8:	493b      	ldr	r1, [pc, #236]	@ (8001dc8 <SIM_Parse_Command+0x1e8>)
 8001cda:	4618      	mov	r0, r3
 8001cdc:	f7fe fa78 	bl	80001d0 <strcmp>
 8001ce0:	4603      	mov	r3, r0
 8001ce2:	2b00      	cmp	r3, #0
 8001ce4:	d117      	bne.n	8001d16 <SIM_Parse_Command+0x136>
			if(!flags.CMD.Measure_Request) 
 8001ce6:	4b34      	ldr	r3, [pc, #208]	@ (8001db8 <SIM_Parse_Command+0x1d8>)
 8001ce8:	789b      	ldrb	r3, [r3, #2]
 8001cea:	f003 0302 	and.w	r3, r3, #2
 8001cee:	b2db      	uxtb	r3, r3
 8001cf0:	2b00      	cmp	r3, #0
 8001cf2:	d156      	bne.n	8001da2 <SIM_Parse_Command+0x1c2>
				LED_Start(RED_LED, FAST, LOW);
 8001cf4:	2207      	movs	r2, #7
 8001cf6:	2100      	movs	r1, #0
 8001cf8:	2004      	movs	r0, #4
 8001cfa:	f001 fc79 	bl	80035f0 <LED_Start>
				Send_Measure_Addr = Saved_Bytes;
 8001cfe:	4b33      	ldr	r3, [pc, #204]	@ (8001dcc <SIM_Parse_Command+0x1ec>)
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	4a33      	ldr	r2, [pc, #204]	@ (8001dd0 <SIM_Parse_Command+0x1f0>)
 8001d04:	6013      	str	r3, [r2, #0]
				flags.CMD.Measure_Request = 1;
 8001d06:	4a2c      	ldr	r2, [pc, #176]	@ (8001db8 <SIM_Parse_Command+0x1d8>)
 8001d08:	7893      	ldrb	r3, [r2, #2]
 8001d0a:	f043 0302 	orr.w	r3, r3, #2
 8001d0e:	7093      	strb	r3, [r2, #2]
				Switch_Buffer();
 8001d10:	f003 ff28 	bl	8005b64 <Switch_Buffer>
}
 8001d14:	e045      	b.n	8001da2 <SIM_Parse_Command+0x1c2>
		else if(strcmp(cmd_str, "OTA") == 0) 
 8001d16:	463b      	mov	r3, r7
 8001d18:	492e      	ldr	r1, [pc, #184]	@ (8001dd4 <SIM_Parse_Command+0x1f4>)
 8001d1a:	4618      	mov	r0, r3
 8001d1c:	f7fe fa58 	bl	80001d0 <strcmp>
 8001d20:	4603      	mov	r3, r0
 8001d22:	2b00      	cmp	r3, #0
 8001d24:	d109      	bne.n	8001d3a <SIM_Parse_Command+0x15a>
			if(state == IDLE) 
 8001d26:	4b2c      	ldr	r3, [pc, #176]	@ (8001dd8 <SIM_Parse_Command+0x1f8>)
 8001d28:	781b      	ldrb	r3, [r3, #0]
 8001d2a:	2b00      	cmp	r3, #0
 8001d2c:	d139      	bne.n	8001da2 <SIM_Parse_Command+0x1c2>
				flags.CMD.Start_OTA = 1;
 8001d2e:	4a22      	ldr	r2, [pc, #136]	@ (8001db8 <SIM_Parse_Command+0x1d8>)
 8001d30:	7893      	ldrb	r3, [r2, #2]
 8001d32:	f043 0304 	orr.w	r3, r3, #4
 8001d36:	7093      	strb	r3, [r2, #2]
}
 8001d38:	e033      	b.n	8001da2 <SIM_Parse_Command+0x1c2>
		else if(strcmp(cmd_str, "SET") == 0) 
 8001d3a:	463b      	mov	r3, r7
 8001d3c:	4927      	ldr	r1, [pc, #156]	@ (8001ddc <SIM_Parse_Command+0x1fc>)
 8001d3e:	4618      	mov	r0, r3
 8001d40:	f7fe fa46 	bl	80001d0 <strcmp>
 8001d44:	4603      	mov	r3, r0
 8001d46:	2b00      	cmp	r3, #0
 8001d48:	d10c      	bne.n	8001d64 <SIM_Parse_Command+0x184>
			if(state == IDLE) 
 8001d4a:	4b23      	ldr	r3, [pc, #140]	@ (8001dd8 <SIM_Parse_Command+0x1f8>)
 8001d4c:	781b      	ldrb	r3, [r3, #0]
 8001d4e:	2b00      	cmp	r3, #0
 8001d50:	d127      	bne.n	8001da2 <SIM_Parse_Command+0x1c2>
				flags.CMD.Set_Config = 1;
 8001d52:	4a19      	ldr	r2, [pc, #100]	@ (8001db8 <SIM_Parse_Command+0x1d8>)
 8001d54:	7893      	ldrb	r3, [r2, #2]
 8001d56:	f043 0310 	orr.w	r3, r3, #16
 8001d5a:	7093      	strb	r3, [r2, #2]
				SIM_Parse_Cfg(data_pos); 
 8001d5c:	6938      	ldr	r0, [r7, #16]
 8001d5e:	f000 f843 	bl	8001de8 <SIM_Parse_Cfg>
}
 8001d62:	e01e      	b.n	8001da2 <SIM_Parse_Command+0x1c2>
		else if(strcmp(cmd_str, "GET") == 0) 
 8001d64:	463b      	mov	r3, r7
 8001d66:	491e      	ldr	r1, [pc, #120]	@ (8001de0 <SIM_Parse_Command+0x200>)
 8001d68:	4618      	mov	r0, r3
 8001d6a:	f7fe fa31 	bl	80001d0 <strcmp>
 8001d6e:	4603      	mov	r3, r0
 8001d70:	2b00      	cmp	r3, #0
 8001d72:	d10c      	bne.n	8001d8e <SIM_Parse_Command+0x1ae>
			if(state == IDLE) 
 8001d74:	4b18      	ldr	r3, [pc, #96]	@ (8001dd8 <SIM_Parse_Command+0x1f8>)
 8001d76:	781b      	ldrb	r3, [r3, #0]
 8001d78:	2b00      	cmp	r3, #0
 8001d7a:	d112      	bne.n	8001da2 <SIM_Parse_Command+0x1c2>
				flags.CMD.Get_Config = 1;
 8001d7c:	4a0e      	ldr	r2, [pc, #56]	@ (8001db8 <SIM_Parse_Command+0x1d8>)
 8001d7e:	7893      	ldrb	r3, [r2, #2]
 8001d80:	f043 0320 	orr.w	r3, r3, #32
 8001d84:	7093      	strb	r3, [r2, #2]
				SIM_Get_Cfg(data_pos);
 8001d86:	6938      	ldr	r0, [r7, #16]
 8001d88:	f000 f8a2 	bl	8001ed0 <SIM_Get_Cfg>
}
 8001d8c:	e009      	b.n	8001da2 <SIM_Parse_Command+0x1c2>
		else if(strcmp(cmd_str, "RST") == 0) 
 8001d8e:	463b      	mov	r3, r7
 8001d90:	4914      	ldr	r1, [pc, #80]	@ (8001de4 <SIM_Parse_Command+0x204>)
 8001d92:	4618      	mov	r0, r3
 8001d94:	f7fe fa1c 	bl	80001d0 <strcmp>
 8001d98:	4603      	mov	r3, r0
 8001d9a:	2b00      	cmp	r3, #0
 8001d9c:	d101      	bne.n	8001da2 <SIM_Parse_Command+0x1c2>
			HAL_NVIC_SystemReset();
 8001d9e:	f00a fd10 	bl	800c7c2 <HAL_NVIC_SystemReset>
}
 8001da2:	bf00      	nop
 8001da4:	3718      	adds	r7, #24
 8001da6:	46bd      	mov	sp, r7
 8001da8:	bd80      	pop	{r7, pc}
 8001daa:	bf00      	nop
 8001dac:	200051f8 	.word	0x200051f8
 8001db0:	08017328 	.word	0x08017328
 8001db4:	08017330 	.word	0x08017330
 8001db8:	200019e8 	.word	0x200019e8
 8001dbc:	08017334 	.word	0x08017334
 8001dc0:	08017338 	.word	0x08017338
 8001dc4:	0801733c 	.word	0x0801733c
 8001dc8:	08017340 	.word	0x08017340
 8001dcc:	20004bc4 	.word	0x20004bc4
 8001dd0:	20004bcc 	.word	0x20004bcc
 8001dd4:	08017344 	.word	0x08017344
 8001dd8:	2000083c 	.word	0x2000083c
 8001ddc:	08017348 	.word	0x08017348
 8001de0:	0801734c 	.word	0x0801734c
 8001de4:	08017350 	.word	0x08017350

08001de8 <SIM_Parse_Cfg>:

/*-----PARSING CONFIGURAZIONE-----*/
void SIM_Parse_Cfg(char* cmd_start)
{   
 8001de8:	b580      	push	{r7, lr}
 8001dea:	b088      	sub	sp, #32
 8001dec:	af00      	add	r7, sp, #0
 8001dee:	6078      	str	r0, [r7, #4]
    memset(cfg_var, 0, sizeof(cfg_var));
 8001df0:	2214      	movs	r2, #20
 8001df2:	2100      	movs	r1, #0
 8001df4:	4833      	ldr	r0, [pc, #204]	@ (8001ec4 <SIM_Parse_Cfg+0xdc>)
 8001df6:	f014 f8c7 	bl	8015f88 <memset>
    memset(new_cfg_val, 0, sizeof(new_cfg_val));
 8001dfa:	220a      	movs	r2, #10
 8001dfc:	2100      	movs	r1, #0
 8001dfe:	4832      	ldr	r0, [pc, #200]	@ (8001ec8 <SIM_Parse_Cfg+0xe0>)
 8001e00:	f014 f8c2 	bl	8015f88 <memset>
    
	char* pos = cmd_start + 4; // Salta "SET,"
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	3304      	adds	r3, #4
 8001e08:	61fb      	str	r3, [r7, #28]

	// Prima virgola (dopo SET)
	char* comma1 = strchr(pos, ',');
 8001e0a:	212c      	movs	r1, #44	@ 0x2c
 8001e0c:	69f8      	ldr	r0, [r7, #28]
 8001e0e:	f014 f8c3 	bl	8015f98 <strchr>
 8001e12:	61b8      	str	r0, [r7, #24]
	if(!comma1) return;
 8001e14:	69bb      	ldr	r3, [r7, #24]
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	d04c      	beq.n	8001eb4 <SIM_Parse_Cfg+0xcc>

	// Seconda virgola
	char* comma2 = strchr(comma1 + 1, ',');
 8001e1a:	69bb      	ldr	r3, [r7, #24]
 8001e1c:	3301      	adds	r3, #1
 8001e1e:	212c      	movs	r1, #44	@ 0x2c
 8001e20:	4618      	mov	r0, r3
 8001e22:	f014 f8b9 	bl	8015f98 <strchr>
 8001e26:	6178      	str	r0, [r7, #20]
	if(!comma2) return;
 8001e28:	697b      	ldr	r3, [r7, #20]
 8001e2a:	2b00      	cmp	r3, #0
 8001e2c:	d044      	beq.n	8001eb8 <SIM_Parse_Cfg+0xd0>

	// Terza virgola
	char* comma3 = strchr(comma2 + 1, ',');
 8001e2e:	697b      	ldr	r3, [r7, #20]
 8001e30:	3301      	adds	r3, #1
 8001e32:	212c      	movs	r1, #44	@ 0x2c
 8001e34:	4618      	mov	r0, r3
 8001e36:	f014 f8af 	bl	8015f98 <strchr>
 8001e3a:	6138      	str	r0, [r7, #16]
	if(!comma3) return;
 8001e3c:	693b      	ldr	r3, [r7, #16]
 8001e3e:	2b00      	cmp	r3, #0
 8001e40:	d03c      	beq.n	8001ebc <SIM_Parse_Cfg+0xd4>

	// Estrai cfg_var (tra SET, e prima virgola)
	int var_len = comma2 - comma1 - 1;
 8001e42:	697a      	ldr	r2, [r7, #20]
 8001e44:	69bb      	ldr	r3, [r7, #24]
 8001e46:	1ad3      	subs	r3, r2, r3
 8001e48:	3b01      	subs	r3, #1
 8001e4a:	60fb      	str	r3, [r7, #12]
	if(var_len > 0 && var_len < sizeof(cfg_var)) 
 8001e4c:	68fb      	ldr	r3, [r7, #12]
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	dd0e      	ble.n	8001e70 <SIM_Parse_Cfg+0x88>
 8001e52:	68fb      	ldr	r3, [r7, #12]
 8001e54:	2b13      	cmp	r3, #19
 8001e56:	d80b      	bhi.n	8001e70 <SIM_Parse_Cfg+0x88>
	{
		strncpy(cfg_var, comma1 + 1, var_len);
 8001e58:	69bb      	ldr	r3, [r7, #24]
 8001e5a:	3301      	adds	r3, #1
 8001e5c:	68fa      	ldr	r2, [r7, #12]
 8001e5e:	4619      	mov	r1, r3
 8001e60:	4818      	ldr	r0, [pc, #96]	@ (8001ec4 <SIM_Parse_Cfg+0xdc>)
 8001e62:	f014 f8b8 	bl	8015fd6 <strncpy>
		cfg_var[var_len] = '\0';
 8001e66:	4a17      	ldr	r2, [pc, #92]	@ (8001ec4 <SIM_Parse_Cfg+0xdc>)
 8001e68:	68fb      	ldr	r3, [r7, #12]
 8001e6a:	4413      	add	r3, r2
 8001e6c:	2200      	movs	r2, #0
 8001e6e:	701a      	strb	r2, [r3, #0]
	}

	// Estrai cfg_idx
	cfg_idx = atoi(comma2 + 1);
 8001e70:	697b      	ldr	r3, [r7, #20]
 8001e72:	3301      	adds	r3, #1
 8001e74:	4618      	mov	r0, r3
 8001e76:	f013 ff9d 	bl	8015db4 <atoi>
 8001e7a:	4603      	mov	r3, r0
 8001e7c:	4a13      	ldr	r2, [pc, #76]	@ (8001ecc <SIM_Parse_Cfg+0xe4>)
 8001e7e:	6013      	str	r3, [r2, #0]

	// Estrai new_cfg_val
	int val_len = strlen(comma3 + 1);
 8001e80:	693b      	ldr	r3, [r7, #16]
 8001e82:	3301      	adds	r3, #1
 8001e84:	4618      	mov	r0, r3
 8001e86:	f7fe f9ad 	bl	80001e4 <strlen>
 8001e8a:	4603      	mov	r3, r0
 8001e8c:	60bb      	str	r3, [r7, #8]
	if(val_len > 0 && val_len < sizeof(new_cfg_val)) 
 8001e8e:	68bb      	ldr	r3, [r7, #8]
 8001e90:	2b00      	cmp	r3, #0
 8001e92:	dd14      	ble.n	8001ebe <SIM_Parse_Cfg+0xd6>
 8001e94:	68bb      	ldr	r3, [r7, #8]
 8001e96:	2b09      	cmp	r3, #9
 8001e98:	d811      	bhi.n	8001ebe <SIM_Parse_Cfg+0xd6>
	{
		strncpy(new_cfg_val, comma3 + 1, val_len);
 8001e9a:	693b      	ldr	r3, [r7, #16]
 8001e9c:	3301      	adds	r3, #1
 8001e9e:	68ba      	ldr	r2, [r7, #8]
 8001ea0:	4619      	mov	r1, r3
 8001ea2:	4809      	ldr	r0, [pc, #36]	@ (8001ec8 <SIM_Parse_Cfg+0xe0>)
 8001ea4:	f014 f897 	bl	8015fd6 <strncpy>
		new_cfg_val[val_len] = '\0';
 8001ea8:	4a07      	ldr	r2, [pc, #28]	@ (8001ec8 <SIM_Parse_Cfg+0xe0>)
 8001eaa:	68bb      	ldr	r3, [r7, #8]
 8001eac:	4413      	add	r3, r2
 8001eae:	2200      	movs	r2, #0
 8001eb0:	701a      	strb	r2, [r3, #0]
 8001eb2:	e004      	b.n	8001ebe <SIM_Parse_Cfg+0xd6>
	if(!comma1) return;
 8001eb4:	bf00      	nop
 8001eb6:	e002      	b.n	8001ebe <SIM_Parse_Cfg+0xd6>
	if(!comma2) return;
 8001eb8:	bf00      	nop
 8001eba:	e000      	b.n	8001ebe <SIM_Parse_Cfg+0xd6>
	if(!comma3) return;
 8001ebc:	bf00      	nop
	}
}
 8001ebe:	3720      	adds	r7, #32
 8001ec0:	46bd      	mov	sp, r7
 8001ec2:	bd80      	pop	{r7, pc}
 8001ec4:	200059c8 	.word	0x200059c8
 8001ec8:	200059e0 	.word	0x200059e0
 8001ecc:	200059dc 	.word	0x200059dc

08001ed0 <SIM_Get_Cfg>:

/*-----RECUPERO VALORE DI CONFIGURAZIONE-----*/
void SIM_Get_Cfg(char* cmd_start)
{   
 8001ed0:	b580      	push	{r7, lr}
 8001ed2:	b086      	sub	sp, #24
 8001ed4:	af00      	add	r7, sp, #0
 8001ed6:	6078      	str	r0, [r7, #4]
	memset(cfg_var, 0, sizeof(cfg_var));
 8001ed8:	2214      	movs	r2, #20
 8001eda:	2100      	movs	r1, #0
 8001edc:	4821      	ldr	r0, [pc, #132]	@ (8001f64 <SIM_Get_Cfg+0x94>)
 8001ede:	f014 f853 	bl	8015f88 <memset>
	memset(new_cfg_val, 0, sizeof(new_cfg_val));
 8001ee2:	220a      	movs	r2, #10
 8001ee4:	2100      	movs	r1, #0
 8001ee6:	4820      	ldr	r0, [pc, #128]	@ (8001f68 <SIM_Get_Cfg+0x98>)
 8001ee8:	f014 f84e 	bl	8015f88 <memset>
	
	char* pos = cmd_start + 4; // Salta "GET,"
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	3304      	adds	r3, #4
 8001ef0:	617b      	str	r3, [r7, #20]

	// Prima virgola (dopo GET)
	char* comma1 = strchr(pos, ',');
 8001ef2:	212c      	movs	r1, #44	@ 0x2c
 8001ef4:	6978      	ldr	r0, [r7, #20]
 8001ef6:	f014 f84f 	bl	8015f98 <strchr>
 8001efa:	6138      	str	r0, [r7, #16]
	if(!comma1) return;
 8001efc:	693b      	ldr	r3, [r7, #16]
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	d029      	beq.n	8001f56 <SIM_Get_Cfg+0x86>

	// Seconda virgola
	char* comma2 = strchr(comma1 + 1, ',');
 8001f02:	693b      	ldr	r3, [r7, #16]
 8001f04:	3301      	adds	r3, #1
 8001f06:	212c      	movs	r1, #44	@ 0x2c
 8001f08:	4618      	mov	r0, r3
 8001f0a:	f014 f845 	bl	8015f98 <strchr>
 8001f0e:	60f8      	str	r0, [r7, #12]
	if(!comma2) return;
 8001f10:	68fb      	ldr	r3, [r7, #12]
 8001f12:	2b00      	cmp	r3, #0
 8001f14:	d021      	beq.n	8001f5a <SIM_Get_Cfg+0x8a>

	// Estrai cfg_var (tra GET, e prima virgola)
	int var_len = comma2 - comma1 - 1;
 8001f16:	68fa      	ldr	r2, [r7, #12]
 8001f18:	693b      	ldr	r3, [r7, #16]
 8001f1a:	1ad3      	subs	r3, r2, r3
 8001f1c:	3b01      	subs	r3, #1
 8001f1e:	60bb      	str	r3, [r7, #8]
	if(var_len > 0 && var_len < sizeof(cfg_var)) 
 8001f20:	68bb      	ldr	r3, [r7, #8]
 8001f22:	2b00      	cmp	r3, #0
 8001f24:	dd0e      	ble.n	8001f44 <SIM_Get_Cfg+0x74>
 8001f26:	68bb      	ldr	r3, [r7, #8]
 8001f28:	2b13      	cmp	r3, #19
 8001f2a:	d80b      	bhi.n	8001f44 <SIM_Get_Cfg+0x74>
	{
		strncpy(cfg_var, comma1 + 1, var_len);
 8001f2c:	693b      	ldr	r3, [r7, #16]
 8001f2e:	3301      	adds	r3, #1
 8001f30:	68ba      	ldr	r2, [r7, #8]
 8001f32:	4619      	mov	r1, r3
 8001f34:	480b      	ldr	r0, [pc, #44]	@ (8001f64 <SIM_Get_Cfg+0x94>)
 8001f36:	f014 f84e 	bl	8015fd6 <strncpy>
		cfg_var[var_len] = '\0';
 8001f3a:	4a0a      	ldr	r2, [pc, #40]	@ (8001f64 <SIM_Get_Cfg+0x94>)
 8001f3c:	68bb      	ldr	r3, [r7, #8]
 8001f3e:	4413      	add	r3, r2
 8001f40:	2200      	movs	r2, #0
 8001f42:	701a      	strb	r2, [r3, #0]
	}

	// Estrai cfg_idx
	cfg_idx = atoi(comma2 + 1);
 8001f44:	68fb      	ldr	r3, [r7, #12]
 8001f46:	3301      	adds	r3, #1
 8001f48:	4618      	mov	r0, r3
 8001f4a:	f013 ff33 	bl	8015db4 <atoi>
 8001f4e:	4603      	mov	r3, r0
 8001f50:	4a06      	ldr	r2, [pc, #24]	@ (8001f6c <SIM_Get_Cfg+0x9c>)
 8001f52:	6013      	str	r3, [r2, #0]
 8001f54:	e002      	b.n	8001f5c <SIM_Get_Cfg+0x8c>
	if(!comma1) return;
 8001f56:	bf00      	nop
 8001f58:	e000      	b.n	8001f5c <SIM_Get_Cfg+0x8c>
	if(!comma2) return;
 8001f5a:	bf00      	nop
}
 8001f5c:	3718      	adds	r7, #24
 8001f5e:	46bd      	mov	sp, r7
 8001f60:	bd80      	pop	{r7, pc}
 8001f62:	bf00      	nop
 8001f64:	200059c8 	.word	0x200059c8
 8001f68:	200059e0 	.word	0x200059e0
 8001f6c:	200059dc 	.word	0x200059dc

08001f70 <SIM_Send_TCP>:
    SIM_Wait_Response("OK");
}

/*-----INVIO DATI AL SERVER TCP-----*/
void SIM_Send_TCP(uint8_t* data)
{
 8001f70:	b580      	push	{r7, lr}
 8001f72:	b090      	sub	sp, #64	@ 0x40
 8001f74:	af00      	add	r7, sp, #0
 8001f76:	6078      	str	r0, [r7, #4]
    char cmd[50];
	uint16_t size = (uint16_t)strlen(data);
 8001f78:	6878      	ldr	r0, [r7, #4]
 8001f7a:	f7fe f933 	bl	80001e4 <strlen>
 8001f7e:	4603      	mov	r3, r0
 8001f80:	87fb      	strh	r3, [r7, #62]	@ 0x3e

    sprintf(cmd, "AT+CIPSEND=%u\r", size);
 8001f82:	8ffa      	ldrh	r2, [r7, #62]	@ 0x3e
 8001f84:	f107 030c 	add.w	r3, r7, #12
 8001f88:	490c      	ldr	r1, [pc, #48]	@ (8001fbc <SIM_Send_TCP+0x4c>)
 8001f8a:	4618      	mov	r0, r3
 8001f8c:	f013 ff9c 	bl	8015ec8 <siprintf>
    SIM_Send_Command(cmd);
 8001f90:	f107 030c 	add.w	r3, r7, #12
 8001f94:	4618      	mov	r0, r3
 8001f96:	f7ff fd7b 	bl	8001a90 <SIM_Send_Command>

    SIM_Wait_Response(">");                                    // Attesa prompt '>'
 8001f9a:	4809      	ldr	r0, [pc, #36]	@ (8001fc0 <SIM_Send_TCP+0x50>)
 8001f9c:	f000 f8f4 	bl	8002188 <SIM_Wait_Response>

    HAL_UART_Transmit(SIM_UART, data, size, 1000);             // Invia dati binari
 8001fa0:	8ffa      	ldrh	r2, [r7, #62]	@ 0x3e
 8001fa2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001fa6:	6879      	ldr	r1, [r7, #4]
 8001fa8:	4806      	ldr	r0, [pc, #24]	@ (8001fc4 <SIM_Send_TCP+0x54>)
 8001faa:	f012 fc45 	bl	8014838 <HAL_UART_Transmit>
    
    SIM_Wait_Response("SEND OK");                              // Attesa invio avvenuto
 8001fae:	4806      	ldr	r0, [pc, #24]	@ (8001fc8 <SIM_Send_TCP+0x58>)
 8001fb0:	f000 f8ea 	bl	8002188 <SIM_Wait_Response>
}
 8001fb4:	bf00      	nop
 8001fb6:	3740      	adds	r7, #64	@ 0x40
 8001fb8:	46bd      	mov	sp, r7
 8001fba:	bd80      	pop	{r7, pc}
 8001fbc:	08017380 	.word	0x08017380
 8001fc0:	0801737c 	.word	0x0801737c
 8001fc4:	20000724 	.word	0x20000724
 8001fc8:	08017390 	.word	0x08017390

08001fcc <SIM_Send_TCP_Chunk_DMA>:

/*-----INVIO DATI AL SERVER TCP CON DMA-----*/
void SIM_Send_TCP_Chunk_DMA(uint16_t size)
{
 8001fcc:	b580      	push	{r7, lr}
 8001fce:	b090      	sub	sp, #64	@ 0x40
 8001fd0:	af00      	add	r7, sp, #0
 8001fd2:	4603      	mov	r3, r0
 8001fd4:	80fb      	strh	r3, [r7, #6]
    char cmd[50];

    sprintf(cmd, "AT+CIPSEND=%u\r", size);
 8001fd6:	88fa      	ldrh	r2, [r7, #6]
 8001fd8:	f107 030c 	add.w	r3, r7, #12
 8001fdc:	4906      	ldr	r1, [pc, #24]	@ (8001ff8 <SIM_Send_TCP_Chunk_DMA+0x2c>)
 8001fde:	4618      	mov	r0, r3
 8001fe0:	f013 ff72 	bl	8015ec8 <siprintf>
    SIM_Send_Command_DMA(cmd);
 8001fe4:	f107 030c 	add.w	r3, r7, #12
 8001fe8:	4618      	mov	r0, r3
 8001fea:	f7ff fd67 	bl	8001abc <SIM_Send_Command_DMA>
}
 8001fee:	bf00      	nop
 8001ff0:	3740      	adds	r7, #64	@ 0x40
 8001ff2:	46bd      	mov	sp, r7
 8001ff4:	bd80      	pop	{r7, pc}
 8001ff6:	bf00      	nop
 8001ff8:	08017380 	.word	0x08017380

08001ffc <SIM_Send_Infos>:

/*-----INVIO INFORMAZIONI AL SERVER MQTT-----*/
void SIM_Send_Infos(void)
{
 8001ffc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001ffe:	f5ad 7d3f 	sub.w	sp, sp, #764	@ 0x2fc
 8002002:	af10      	add	r7, sp, #64	@ 0x40
	uint16_t len = 0;
 8002004:	2300      	movs	r3, #0
 8002006:	f8a7 32b6 	strh.w	r3, [r7, #694]	@ 0x2b6
	char command[128];
	char infos[512];
	uint16_t new_temp = 0;
 800200a:	2300      	movs	r3, #0
 800200c:	f8a7 32b4 	strh.w	r3, [r7, #692]	@ 0x2b4

	BC_MultiRead_Reg(REG3B_VBAT_ADC, &Vbatt);
 8002010:	4953      	ldr	r1, [pc, #332]	@ (8002160 <SIM_Send_Infos+0x164>)
 8002012:	203b      	movs	r0, #59	@ 0x3b
 8002014:	f000 faea 	bl	80025ec <BC_MultiRead_Reg>
	INA3221_Read_Measure(&Supply);
 8002018:	4852      	ldr	r0, [pc, #328]	@ (8002164 <SIM_Send_Infos+0x168>)
 800201a:	f7ff f805 	bl	8001028 <INA3221_Read_Measure>
	if((new_temp = Read_Temperature()) != 0)
 800201e:	f7fe ffa3 	bl	8000f68 <Read_Temperature>
 8002022:	4603      	mov	r3, r0
 8002024:	f8a7 32b4 	strh.w	r3, [r7, #692]	@ 0x2b4
 8002028:	f8b7 32b4 	ldrh.w	r3, [r7, #692]	@ 0x2b4
 800202c:	2b00      	cmp	r3, #0
 800202e:	d003      	beq.n	8002038 <SIM_Send_Infos+0x3c>
	{
		Temperature = new_temp;
 8002030:	4a4d      	ldr	r2, [pc, #308]	@ (8002168 <SIM_Send_Infos+0x16c>)
 8002032:	f8b7 32b4 	ldrh.w	r3, [r7, #692]	@ 0x2b4
 8002036:	8013      	strh	r3, [r2, #0]
	}
	uint16_t fw_ver = FW_VERSION;
 8002038:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800203c:	f8a7 32b2 	strh.w	r3, [r7, #690]	@ 0x2b2

	sprintf(infos, "%u,%u,%u,%u,%u,%u,%u,%u,%u,%u,%u,%u,%u,%u,%u,%u,%u,%u", config.device_id, fw_ver, sys.onDate.Year, sys.onDate.Month, sys.onDate.Date, sys.onTime.Hours, sys.onTime.Minutes, sys.onTime.Seconds, Vbatt, config.samp_freq, config.buffering_secs, Supply.v1, Supply.v2, Supply.v3, Supply.i1, Supply.i2, Supply.i3, Temperature);
 8002040:	4b4a      	ldr	r3, [pc, #296]	@ (800216c <SIM_Send_Infos+0x170>)
 8002042:	781b      	ldrb	r3, [r3, #0]
 8002044:	469c      	mov	ip, r3
 8002046:	f8b7 42b2 	ldrh.w	r4, [r7, #690]	@ 0x2b2
 800204a:	4b49      	ldr	r3, [pc, #292]	@ (8002170 <SIM_Send_Infos+0x174>)
 800204c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002050:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8002054:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002056:	4b46      	ldr	r3, [pc, #280]	@ (8002170 <SIM_Send_Infos+0x174>)
 8002058:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800205c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002060:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002062:	4b43      	ldr	r3, [pc, #268]	@ (8002170 <SIM_Send_Infos+0x174>)
 8002064:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002068:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800206c:	627b      	str	r3, [r7, #36]	@ 0x24
 800206e:	4b40      	ldr	r3, [pc, #256]	@ (8002170 <SIM_Send_Infos+0x174>)
 8002070:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002074:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8002078:	623b      	str	r3, [r7, #32]
 800207a:	4b3d      	ldr	r3, [pc, #244]	@ (8002170 <SIM_Send_Infos+0x174>)
 800207c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002080:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8002084:	61fb      	str	r3, [r7, #28]
 8002086:	4b3a      	ldr	r3, [pc, #232]	@ (8002170 <SIM_Send_Infos+0x174>)
 8002088:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800208c:	f893 3046 	ldrb.w	r3, [r3, #70]	@ 0x46
 8002090:	61bb      	str	r3, [r7, #24]
 8002092:	4b33      	ldr	r3, [pc, #204]	@ (8002160 <SIM_Send_Infos+0x164>)
 8002094:	881b      	ldrh	r3, [r3, #0]
 8002096:	617b      	str	r3, [r7, #20]
 8002098:	4b34      	ldr	r3, [pc, #208]	@ (800216c <SIM_Send_Infos+0x170>)
 800209a:	885b      	ldrh	r3, [r3, #2]
 800209c:	613b      	str	r3, [r7, #16]
 800209e:	4b33      	ldr	r3, [pc, #204]	@ (800216c <SIM_Send_Infos+0x170>)
 80020a0:	791b      	ldrb	r3, [r3, #4]
 80020a2:	60fb      	str	r3, [r7, #12]
 80020a4:	4b2f      	ldr	r3, [pc, #188]	@ (8002164 <SIM_Send_Infos+0x168>)
 80020a6:	881b      	ldrh	r3, [r3, #0]
 80020a8:	60bb      	str	r3, [r7, #8]
 80020aa:	4b2e      	ldr	r3, [pc, #184]	@ (8002164 <SIM_Send_Infos+0x168>)
 80020ac:	885b      	ldrh	r3, [r3, #2]
 80020ae:	607b      	str	r3, [r7, #4]
 80020b0:	4b2c      	ldr	r3, [pc, #176]	@ (8002164 <SIM_Send_Infos+0x168>)
 80020b2:	889b      	ldrh	r3, [r3, #4]
 80020b4:	461e      	mov	r6, r3
 80020b6:	4b2b      	ldr	r3, [pc, #172]	@ (8002164 <SIM_Send_Infos+0x168>)
 80020b8:	88db      	ldrh	r3, [r3, #6]
 80020ba:	461d      	mov	r5, r3
 80020bc:	4b29      	ldr	r3, [pc, #164]	@ (8002164 <SIM_Send_Infos+0x168>)
 80020be:	891b      	ldrh	r3, [r3, #8]
 80020c0:	4619      	mov	r1, r3
 80020c2:	4b28      	ldr	r3, [pc, #160]	@ (8002164 <SIM_Send_Infos+0x168>)
 80020c4:	895b      	ldrh	r3, [r3, #10]
 80020c6:	461a      	mov	r2, r3
 80020c8:	4b27      	ldr	r3, [pc, #156]	@ (8002168 <SIM_Send_Infos+0x16c>)
 80020ca:	881b      	ldrh	r3, [r3, #0]
 80020cc:	f107 0030 	add.w	r0, r7, #48	@ 0x30
 80020d0:	930f      	str	r3, [sp, #60]	@ 0x3c
 80020d2:	920e      	str	r2, [sp, #56]	@ 0x38
 80020d4:	910d      	str	r1, [sp, #52]	@ 0x34
 80020d6:	950c      	str	r5, [sp, #48]	@ 0x30
 80020d8:	960b      	str	r6, [sp, #44]	@ 0x2c
 80020da:	687a      	ldr	r2, [r7, #4]
 80020dc:	920a      	str	r2, [sp, #40]	@ 0x28
 80020de:	68ba      	ldr	r2, [r7, #8]
 80020e0:	9209      	str	r2, [sp, #36]	@ 0x24
 80020e2:	68fa      	ldr	r2, [r7, #12]
 80020e4:	9208      	str	r2, [sp, #32]
 80020e6:	693a      	ldr	r2, [r7, #16]
 80020e8:	9207      	str	r2, [sp, #28]
 80020ea:	697a      	ldr	r2, [r7, #20]
 80020ec:	9206      	str	r2, [sp, #24]
 80020ee:	69ba      	ldr	r2, [r7, #24]
 80020f0:	9205      	str	r2, [sp, #20]
 80020f2:	69fa      	ldr	r2, [r7, #28]
 80020f4:	9204      	str	r2, [sp, #16]
 80020f6:	6a3a      	ldr	r2, [r7, #32]
 80020f8:	9203      	str	r2, [sp, #12]
 80020fa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80020fc:	9202      	str	r2, [sp, #8]
 80020fe:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002100:	9201      	str	r2, [sp, #4]
 8002102:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002104:	9300      	str	r3, [sp, #0]
 8002106:	4623      	mov	r3, r4
 8002108:	4662      	mov	r2, ip
 800210a:	491a      	ldr	r1, [pc, #104]	@ (8002174 <SIM_Send_Infos+0x178>)
 800210c:	f013 fedc 	bl	8015ec8 <siprintf>
	len = (uint16_t)strlen(infos);
 8002110:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8002114:	4618      	mov	r0, r3
 8002116:	f7fe f865 	bl	80001e4 <strlen>
 800211a:	4603      	mov	r3, r0
 800211c:	f8a7 32b6 	strh.w	r3, [r7, #694]	@ 0x2b6

	sprintf(command, "AT+CIPSEND=%u\r",len);
 8002120:	f8b7 22b6 	ldrh.w	r2, [r7, #694]	@ 0x2b6
 8002124:	f507 730c 	add.w	r3, r7, #560	@ 0x230
 8002128:	4913      	ldr	r1, [pc, #76]	@ (8002178 <SIM_Send_Infos+0x17c>)
 800212a:	4618      	mov	r0, r3
 800212c:	f013 fecc 	bl	8015ec8 <siprintf>
	SIM_Send_Command(command);
 8002130:	f507 730c 	add.w	r3, r7, #560	@ 0x230
 8002134:	4618      	mov	r0, r3
 8002136:	f7ff fcab 	bl	8001a90 <SIM_Send_Command>
	SIM_Wait_Response(">");
 800213a:	4810      	ldr	r0, [pc, #64]	@ (800217c <SIM_Send_Infos+0x180>)
 800213c:	f000 f824 	bl	8002188 <SIM_Wait_Response>
	HAL_UART_Transmit(SIM_UART, (uint8_t*)infos, len, 100);
 8002140:	f8b7 22b6 	ldrh.w	r2, [r7, #694]	@ 0x2b6
 8002144:	f107 0130 	add.w	r1, r7, #48	@ 0x30
 8002148:	2364      	movs	r3, #100	@ 0x64
 800214a:	480d      	ldr	r0, [pc, #52]	@ (8002180 <SIM_Send_Infos+0x184>)
 800214c:	f012 fb74 	bl	8014838 <HAL_UART_Transmit>
	SIM_Wait_Response("OK");
 8002150:	480c      	ldr	r0, [pc, #48]	@ (8002184 <SIM_Send_Infos+0x188>)
 8002152:	f000 f819 	bl	8002188 <SIM_Wait_Response>
}
 8002156:	bf00      	nop
 8002158:	f507 772f 	add.w	r7, r7, #700	@ 0x2bc
 800215c:	46bd      	mov	sp, r7
 800215e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002160:	20004426 	.word	0x20004426
 8002164:	20003b44 	.word	0x20003b44
 8002168:	20004424 	.word	0x20004424
 800216c:	200019ec 	.word	0x200019ec
 8002170:	20000840 	.word	0x20000840
 8002174:	08017398 	.word	0x08017398
 8002178:	08017380 	.word	0x08017380
 800217c:	0801737c 	.word	0x0801737c
 8002180:	20000724 	.word	0x20000724
 8002184:	08017178 	.word	0x08017178

08002188 <SIM_Wait_Response>:

/*-----ATTESA RISPOSTA-----*/
int SIM_Wait_Response(const char* expected)
{
 8002188:	b580      	push	{r7, lr}
 800218a:	b0c8      	sub	sp, #288	@ 0x120
 800218c:	af02      	add	r7, sp, #8
 800218e:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8002192:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8002196:	6018      	str	r0, [r3, #0]
    char rx[256];
    memset(rx, 0, sizeof(rx));
 8002198:	f107 0310 	add.w	r3, r7, #16
 800219c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80021a0:	2100      	movs	r1, #0
 80021a2:	4618      	mov	r0, r3
 80021a4:	f013 fef0 	bl	8015f88 <memset>
    uint16_t timeout = 10000; // 10 secondi
 80021a8:	f242 7310 	movw	r3, #10000	@ 0x2710
 80021ac:	f8a7 3116 	strh.w	r3, [r7, #278]	@ 0x116
    uint32_t start_time = HAL_GetTick();
 80021b0:	f008 fe22 	bl	800adf8 <HAL_GetTick>
 80021b4:	f8c7 0110 	str.w	r0, [r7, #272]	@ 0x110

    while((HAL_GetTick() - start_time) < timeout)
 80021b8:	e02a      	b.n	8002210 <SIM_Wait_Response+0x88>
    {
        uint16_t RxLen = 0;
 80021ba:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 80021be:	f5a3 7385 	sub.w	r3, r3, #266	@ 0x10a
 80021c2:	2200      	movs	r2, #0
 80021c4:	801a      	strh	r2, [r3, #0]
        HAL_UARTEx_ReceiveToIdle(SIM_UART, (uint8_t*)rx, sizeof(rx), &RxLen, 500);
 80021c6:	f107 030e 	add.w	r3, r7, #14
 80021ca:	f107 0110 	add.w	r1, r7, #16
 80021ce:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 80021d2:	9200      	str	r2, [sp, #0]
 80021d4:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80021d8:	4816      	ldr	r0, [pc, #88]	@ (8002234 <SIM_Wait_Response+0xac>)
 80021da:	f013 fc94 	bl	8015b06 <HAL_UARTEx_ReceiveToIdle>
        
        if(RxLen > 0)
 80021de:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 80021e2:	f5a3 7385 	sub.w	r3, r3, #266	@ 0x10a
 80021e6:	881b      	ldrh	r3, [r3, #0]
 80021e8:	2b00      	cmp	r3, #0
 80021ea:	d00e      	beq.n	800220a <SIM_Wait_Response+0x82>
        {
        	if(strstr(rx, expected))
 80021ec:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 80021f0:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 80021f4:	f107 0210 	add.w	r2, r7, #16
 80021f8:	6819      	ldr	r1, [r3, #0]
 80021fa:	4610      	mov	r0, r2
 80021fc:	f013 fefe 	bl	8015ffc <strstr>
 8002200:	4603      	mov	r3, r0
 8002202:	2b00      	cmp	r3, #0
 8002204:	d001      	beq.n	800220a <SIM_Wait_Response+0x82>
        	{
        		return 0;
 8002206:	2300      	movs	r3, #0
 8002208:	e00e      	b.n	8002228 <SIM_Wait_Response+0xa0>
        	}
        }
        
        HAL_Delay(10);
 800220a:	200a      	movs	r0, #10
 800220c:	f008 fe00 	bl	800ae10 <HAL_Delay>
    while((HAL_GetTick() - start_time) < timeout)
 8002210:	f008 fdf2 	bl	800adf8 <HAL_GetTick>
 8002214:	4602      	mov	r2, r0
 8002216:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 800221a:	1ad2      	subs	r2, r2, r3
 800221c:	f8b7 3116 	ldrh.w	r3, [r7, #278]	@ 0x116
 8002220:	429a      	cmp	r2, r3
 8002222:	d3ca      	bcc.n	80021ba <SIM_Wait_Response+0x32>
    }
	return -1;
 8002224:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002228:	4618      	mov	r0, r3
 800222a:	f507 778c 	add.w	r7, r7, #280	@ 0x118
 800222e:	46bd      	mov	sp, r7
 8002230:	bd80      	pop	{r7, pc}
 8002232:	bf00      	nop
 8002234:	20000724 	.word	0x20000724

08002238 <SIM_Check_Connection>:

/*-----CONTROLLA STATO CONNESSIONE MQTT E TCP-----*/
void SIM_Check_Connection(void)
{
 8002238:	b580      	push	{r7, lr}
 800223a:	f5ad 7d00 	sub.w	sp, sp, #512	@ 0x200
 800223e:	af00      	add	r7, sp, #0
	char command_sim[256];
	char response_sim[256];

	SIM_Send_Command("AT+CIPSTATUS=0\r");                                                        
 8002240:	4817      	ldr	r0, [pc, #92]	@ (80022a0 <SIM_Check_Connection+0x68>)
 8002242:	f7ff fc25 	bl	8001a90 <SIM_Send_Command>
	SIM_Receive_Response(response_sim, 5000);
 8002246:	463b      	mov	r3, r7
 8002248:	f241 3188 	movw	r1, #5000	@ 0x1388
 800224c:	4618      	mov	r0, r3
 800224e:	f7ff fc4b 	bl	8001ae8 <SIM_Receive_Response>
	while(!SIM_Check_TCP_State(response_sim))
 8002252:	e017      	b.n	8002284 <SIM_Check_Connection+0x4c>
	{
		sprintf(command_sim, "AT+CIPSTART=\"TCP\",\"%s\",%s\r", sys.TCP.IP_address, sys.TCP.Port);       
 8002254:	f507 7080 	add.w	r0, r7, #256	@ 0x100
 8002258:	4b12      	ldr	r3, [pc, #72]	@ (80022a4 <SIM_Check_Connection+0x6c>)
 800225a:	4a13      	ldr	r2, [pc, #76]	@ (80022a8 <SIM_Check_Connection+0x70>)
 800225c:	4913      	ldr	r1, [pc, #76]	@ (80022ac <SIM_Check_Connection+0x74>)
 800225e:	f013 fe33 	bl	8015ec8 <siprintf>
		SIM_Send_Command(command_sim);
 8002262:	f507 7380 	add.w	r3, r7, #256	@ 0x100
 8002266:	4618      	mov	r0, r3
 8002268:	f7ff fc12 	bl	8001a90 <SIM_Send_Command>
		SIM_Wait_Response("CONNECT OK");
 800226c:	4810      	ldr	r0, [pc, #64]	@ (80022b0 <SIM_Check_Connection+0x78>)
 800226e:	f7ff ff8b 	bl	8002188 <SIM_Wait_Response>
		SIM_Send_Command("AT+CIPSTATUS=0\r");                                                        
 8002272:	480b      	ldr	r0, [pc, #44]	@ (80022a0 <SIM_Check_Connection+0x68>)
 8002274:	f7ff fc0c 	bl	8001a90 <SIM_Send_Command>
		SIM_Receive_Response(response_sim, 5000);
 8002278:	463b      	mov	r3, r7
 800227a:	f241 3188 	movw	r1, #5000	@ 0x1388
 800227e:	4618      	mov	r0, r3
 8002280:	f7ff fc32 	bl	8001ae8 <SIM_Receive_Response>
	while(!SIM_Check_TCP_State(response_sim))
 8002284:	463b      	mov	r3, r7
 8002286:	4618      	mov	r0, r3
 8002288:	f7ff fc8c 	bl	8001ba4 <SIM_Check_TCP_State>
 800228c:	4603      	mov	r3, r0
 800228e:	2b00      	cmp	r3, #0
 8002290:	d0e0      	beq.n	8002254 <SIM_Check_Connection+0x1c>
	}
}
 8002292:	bf00      	nop
 8002294:	bf00      	nop
 8002296:	f507 7700 	add.w	r7, r7, #512	@ 0x200
 800229a:	46bd      	mov	sp, r7
 800229c:	bd80      	pop	{r7, pc}
 800229e:	bf00      	nop
 80022a0:	080172c8 	.word	0x080172c8
 80022a4:	20001980 	.word	0x20001980
 80022a8:	2000191c 	.word	0x2000191c
 80022ac:	080172a0 	.word	0x080172a0
 80022b0:	080172bc 	.word	0x080172bc

080022b4 <Base64_Decode>:
#include "global_variables.h"


/*-----DECODIFICA BASE64-----*/
size_t Base64_Decode(const char *in, uint8_t *out, size_t out_len)
{
 80022b4:	b480      	push	{r7}
 80022b6:	b08b      	sub	sp, #44	@ 0x2c
 80022b8:	af00      	add	r7, sp, #0
 80022ba:	60f8      	str	r0, [r7, #12]
 80022bc:	60b9      	str	r1, [r7, #8]
 80022be:	607a      	str	r2, [r7, #4]
    size_t i = 0, j = 0;
 80022c0:	2300      	movs	r3, #0
 80022c2:	627b      	str	r3, [r7, #36]	@ 0x24
 80022c4:	2300      	movs	r3, #0
 80022c6:	623b      	str	r3, [r7, #32]
    int v = 0, val = 0;
 80022c8:	2300      	movs	r3, #0
 80022ca:	61fb      	str	r3, [r7, #28]
 80022cc:	2300      	movs	r3, #0
 80022ce:	61bb      	str	r3, [r7, #24]
    while (in[i] && in[i] != '\n' && in[i] != '\r')
 80022d0:	e02b      	b.n	800232a <Base64_Decode+0x76>
    {
        unsigned char c = base64_table[(unsigned char)in[i++]];
 80022d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80022d4:	1c5a      	adds	r2, r3, #1
 80022d6:	627a      	str	r2, [r7, #36]	@ 0x24
 80022d8:	68fa      	ldr	r2, [r7, #12]
 80022da:	4413      	add	r3, r2
 80022dc:	781b      	ldrb	r3, [r3, #0]
 80022de:	461a      	mov	r2, r3
 80022e0:	4b1e      	ldr	r3, [pc, #120]	@ (800235c <Base64_Decode+0xa8>)
 80022e2:	5c9b      	ldrb	r3, [r3, r2]
 80022e4:	75fb      	strb	r3, [r7, #23]
        if (c == 0x80) continue; // carattere non valido
 80022e6:	7dfb      	ldrb	r3, [r7, #23]
 80022e8:	2b80      	cmp	r3, #128	@ 0x80
 80022ea:	d01d      	beq.n	8002328 <Base64_Decode+0x74>
        val = (val << 6) | c;
 80022ec:	69bb      	ldr	r3, [r7, #24]
 80022ee:	019a      	lsls	r2, r3, #6
 80022f0:	7dfb      	ldrb	r3, [r7, #23]
 80022f2:	4313      	orrs	r3, r2
 80022f4:	61bb      	str	r3, [r7, #24]
        v += 6;
 80022f6:	69fb      	ldr	r3, [r7, #28]
 80022f8:	3306      	adds	r3, #6
 80022fa:	61fb      	str	r3, [r7, #28]
        if (v >= 8)
 80022fc:	69fb      	ldr	r3, [r7, #28]
 80022fe:	2b07      	cmp	r3, #7
 8002300:	dd13      	ble.n	800232a <Base64_Decode+0x76>
        {
            v -= 8;
 8002302:	69fb      	ldr	r3, [r7, #28]
 8002304:	3b08      	subs	r3, #8
 8002306:	61fb      	str	r3, [r7, #28]
            if (j < out_len) out[j++] = (val >> v) & 0xFF;
 8002308:	6a3a      	ldr	r2, [r7, #32]
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	429a      	cmp	r2, r3
 800230e:	d20c      	bcs.n	800232a <Base64_Decode+0x76>
 8002310:	69ba      	ldr	r2, [r7, #24]
 8002312:	69fb      	ldr	r3, [r7, #28]
 8002314:	fa42 f103 	asr.w	r1, r2, r3
 8002318:	6a3b      	ldr	r3, [r7, #32]
 800231a:	1c5a      	adds	r2, r3, #1
 800231c:	623a      	str	r2, [r7, #32]
 800231e:	68ba      	ldr	r2, [r7, #8]
 8002320:	4413      	add	r3, r2
 8002322:	b2ca      	uxtb	r2, r1
 8002324:	701a      	strb	r2, [r3, #0]
 8002326:	e000      	b.n	800232a <Base64_Decode+0x76>
        if (c == 0x80) continue; // carattere non valido
 8002328:	bf00      	nop
    while (in[i] && in[i] != '\n' && in[i] != '\r')
 800232a:	68fa      	ldr	r2, [r7, #12]
 800232c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800232e:	4413      	add	r3, r2
 8002330:	781b      	ldrb	r3, [r3, #0]
 8002332:	2b00      	cmp	r3, #0
 8002334:	d00b      	beq.n	800234e <Base64_Decode+0x9a>
 8002336:	68fa      	ldr	r2, [r7, #12]
 8002338:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800233a:	4413      	add	r3, r2
 800233c:	781b      	ldrb	r3, [r3, #0]
 800233e:	2b0a      	cmp	r3, #10
 8002340:	d005      	beq.n	800234e <Base64_Decode+0x9a>
 8002342:	68fa      	ldr	r2, [r7, #12]
 8002344:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002346:	4413      	add	r3, r2
 8002348:	781b      	ldrb	r3, [r3, #0]
 800234a:	2b0d      	cmp	r3, #13
 800234c:	d1c1      	bne.n	80022d2 <Base64_Decode+0x1e>
        }
    }
    return j; // numero di byte decodificati
 800234e:	6a3b      	ldr	r3, [r7, #32]
}
 8002350:	4618      	mov	r0, r3
 8002352:	372c      	adds	r7, #44	@ 0x2c
 8002354:	46bd      	mov	sp, r7
 8002356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800235a:	4770      	bx	lr
 800235c:	20000168 	.word	0x20000168

08002360 <Base64_Encode>:

/*-----CODIFICA BASE64-----*/
size_t Base64_Encode(const uint8_t *in, size_t in_len, char *out, size_t out_size)
{
 8002360:	b480      	push	{r7}
 8002362:	b08b      	sub	sp, #44	@ 0x2c
 8002364:	af00      	add	r7, sp, #0
 8002366:	60f8      	str	r0, [r7, #12]
 8002368:	60b9      	str	r1, [r7, #8]
 800236a:	607a      	str	r2, [r7, #4]
 800236c:	603b      	str	r3, [r7, #0]
    size_t i = 0, j = 0;
 800236e:	2300      	movs	r3, #0
 8002370:	627b      	str	r3, [r7, #36]	@ 0x24
 8002372:	2300      	movs	r3, #0
 8002374:	623b      	str	r3, [r7, #32]
    while (i < in_len && (j + 4) <= out_size)
 8002376:	e06c      	b.n	8002452 <Base64_Encode+0xf2>
    {
        uint32_t octet_a = i < in_len ? in[i++] : 0;
 8002378:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800237a:	68bb      	ldr	r3, [r7, #8]
 800237c:	429a      	cmp	r2, r3
 800237e:	d206      	bcs.n	800238e <Base64_Encode+0x2e>
 8002380:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002382:	1c5a      	adds	r2, r3, #1
 8002384:	627a      	str	r2, [r7, #36]	@ 0x24
 8002386:	68fa      	ldr	r2, [r7, #12]
 8002388:	4413      	add	r3, r2
 800238a:	781b      	ldrb	r3, [r3, #0]
 800238c:	e000      	b.n	8002390 <Base64_Encode+0x30>
 800238e:	2300      	movs	r3, #0
 8002390:	61fb      	str	r3, [r7, #28]
        uint32_t octet_b = i < in_len ? in[i++] : 0;
 8002392:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002394:	68bb      	ldr	r3, [r7, #8]
 8002396:	429a      	cmp	r2, r3
 8002398:	d206      	bcs.n	80023a8 <Base64_Encode+0x48>
 800239a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800239c:	1c5a      	adds	r2, r3, #1
 800239e:	627a      	str	r2, [r7, #36]	@ 0x24
 80023a0:	68fa      	ldr	r2, [r7, #12]
 80023a2:	4413      	add	r3, r2
 80023a4:	781b      	ldrb	r3, [r3, #0]
 80023a6:	e000      	b.n	80023aa <Base64_Encode+0x4a>
 80023a8:	2300      	movs	r3, #0
 80023aa:	61bb      	str	r3, [r7, #24]
        uint32_t octet_c = i < in_len ? in[i++] : 0;
 80023ac:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80023ae:	68bb      	ldr	r3, [r7, #8]
 80023b0:	429a      	cmp	r2, r3
 80023b2:	d206      	bcs.n	80023c2 <Base64_Encode+0x62>
 80023b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80023b6:	1c5a      	adds	r2, r3, #1
 80023b8:	627a      	str	r2, [r7, #36]	@ 0x24
 80023ba:	68fa      	ldr	r2, [r7, #12]
 80023bc:	4413      	add	r3, r2
 80023be:	781b      	ldrb	r3, [r3, #0]
 80023c0:	e000      	b.n	80023c4 <Base64_Encode+0x64>
 80023c2:	2300      	movs	r3, #0
 80023c4:	617b      	str	r3, [r7, #20]
        uint32_t triple = (octet_a << 16) | (octet_b << 8) | octet_c;
 80023c6:	69fb      	ldr	r3, [r7, #28]
 80023c8:	041a      	lsls	r2, r3, #16
 80023ca:	69bb      	ldr	r3, [r7, #24]
 80023cc:	021b      	lsls	r3, r3, #8
 80023ce:	4313      	orrs	r3, r2
 80023d0:	697a      	ldr	r2, [r7, #20]
 80023d2:	4313      	orrs	r3, r2
 80023d4:	613b      	str	r3, [r7, #16]

        out[j++] = base64_enc_table[(triple >> 18) & 0x3F];
 80023d6:	693b      	ldr	r3, [r7, #16]
 80023d8:	0c9b      	lsrs	r3, r3, #18
 80023da:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80023de:	6a3b      	ldr	r3, [r7, #32]
 80023e0:	1c59      	adds	r1, r3, #1
 80023e2:	6239      	str	r1, [r7, #32]
 80023e4:	6879      	ldr	r1, [r7, #4]
 80023e6:	440b      	add	r3, r1
 80023e8:	4926      	ldr	r1, [pc, #152]	@ (8002484 <Base64_Encode+0x124>)
 80023ea:	5c8a      	ldrb	r2, [r1, r2]
 80023ec:	701a      	strb	r2, [r3, #0]
        out[j++] = base64_enc_table[(triple >> 12) & 0x3F];
 80023ee:	693b      	ldr	r3, [r7, #16]
 80023f0:	0b1b      	lsrs	r3, r3, #12
 80023f2:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80023f6:	6a3b      	ldr	r3, [r7, #32]
 80023f8:	1c59      	adds	r1, r3, #1
 80023fa:	6239      	str	r1, [r7, #32]
 80023fc:	6879      	ldr	r1, [r7, #4]
 80023fe:	440b      	add	r3, r1
 8002400:	4920      	ldr	r1, [pc, #128]	@ (8002484 <Base64_Encode+0x124>)
 8002402:	5c8a      	ldrb	r2, [r1, r2]
 8002404:	701a      	strb	r2, [r3, #0]
        out[j++] = (i > in_len + 1) ? '=' : base64_enc_table[(triple >> 6) & 0x3F];
 8002406:	68bb      	ldr	r3, [r7, #8]
 8002408:	3301      	adds	r3, #1
 800240a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800240c:	429a      	cmp	r2, r3
 800240e:	d806      	bhi.n	800241e <Base64_Encode+0xbe>
 8002410:	693b      	ldr	r3, [r7, #16]
 8002412:	099b      	lsrs	r3, r3, #6
 8002414:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002418:	4a1a      	ldr	r2, [pc, #104]	@ (8002484 <Base64_Encode+0x124>)
 800241a:	5cd1      	ldrb	r1, [r2, r3]
 800241c:	e000      	b.n	8002420 <Base64_Encode+0xc0>
 800241e:	213d      	movs	r1, #61	@ 0x3d
 8002420:	6a3b      	ldr	r3, [r7, #32]
 8002422:	1c5a      	adds	r2, r3, #1
 8002424:	623a      	str	r2, [r7, #32]
 8002426:	687a      	ldr	r2, [r7, #4]
 8002428:	4413      	add	r3, r2
 800242a:	460a      	mov	r2, r1
 800242c:	701a      	strb	r2, [r3, #0]
        out[j++] = (i > in_len) ? '=' : base64_enc_table[triple & 0x3F];
 800242e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002430:	68bb      	ldr	r3, [r7, #8]
 8002432:	429a      	cmp	r2, r3
 8002434:	d805      	bhi.n	8002442 <Base64_Encode+0xe2>
 8002436:	693b      	ldr	r3, [r7, #16]
 8002438:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800243c:	4a11      	ldr	r2, [pc, #68]	@ (8002484 <Base64_Encode+0x124>)
 800243e:	5cd1      	ldrb	r1, [r2, r3]
 8002440:	e000      	b.n	8002444 <Base64_Encode+0xe4>
 8002442:	213d      	movs	r1, #61	@ 0x3d
 8002444:	6a3b      	ldr	r3, [r7, #32]
 8002446:	1c5a      	adds	r2, r3, #1
 8002448:	623a      	str	r2, [r7, #32]
 800244a:	687a      	ldr	r2, [r7, #4]
 800244c:	4413      	add	r3, r2
 800244e:	460a      	mov	r2, r1
 8002450:	701a      	strb	r2, [r3, #0]
    while (i < in_len && (j + 4) <= out_size)
 8002452:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002454:	68bb      	ldr	r3, [r7, #8]
 8002456:	429a      	cmp	r2, r3
 8002458:	d204      	bcs.n	8002464 <Base64_Encode+0x104>
 800245a:	6a3b      	ldr	r3, [r7, #32]
 800245c:	3304      	adds	r3, #4
 800245e:	683a      	ldr	r2, [r7, #0]
 8002460:	429a      	cmp	r2, r3
 8002462:	d289      	bcs.n	8002378 <Base64_Encode+0x18>
    }
    if (j < out_size) out[j] = '\0'; // null-terminate se vuoi una stringa
 8002464:	6a3a      	ldr	r2, [r7, #32]
 8002466:	683b      	ldr	r3, [r7, #0]
 8002468:	429a      	cmp	r2, r3
 800246a:	d204      	bcs.n	8002476 <Base64_Encode+0x116>
 800246c:	687a      	ldr	r2, [r7, #4]
 800246e:	6a3b      	ldr	r3, [r7, #32]
 8002470:	4413      	add	r3, r2
 8002472:	2200      	movs	r2, #0
 8002474:	701a      	strb	r2, [r3, #0]
    return j; // lunghezza della stringa base64 prodotta (senza null)
 8002476:	6a3b      	ldr	r3, [r7, #32]
}
 8002478:	4618      	mov	r0, r3
 800247a:	372c      	adds	r7, #44	@ 0x2c
 800247c:	46bd      	mov	sp, r7
 800247e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002482:	4770      	bx	lr
 8002484:	080175b0 	.word	0x080175b0

08002488 <BC_Init>:
#include "global_variables.h"


/*------INIZIALIZZAZIONE BATTERY CHARGER------*/
void BC_Init(void)
{
 8002488:	b580      	push	{r7, lr}
 800248a:	af00      	add	r7, sp, #0
	BC_Write_Reg(REG00_MINIMAL_SYSTEM_VOLTAGE, 0x1A);           //Tensione minima di uscita con 3 celle = 9V   <----- Senza Batteria il sistema fornisce questa tensione
 800248c:	211a      	movs	r1, #26
 800248e:	2000      	movs	r0, #0
 8002490:	f000 f836 	bl	8002500 <BC_Write_Reg>
	BC_MultiWrite_Reg(REG01_CHARGE_VOLTAGE_LIMIT, 0x04EC);      //Limite tensione di carica con 3 celle = 12.6V
 8002494:	f240 41ec 	movw	r1, #1260	@ 0x4ec
 8002498:	2001      	movs	r0, #1
 800249a:	f000 f87d 	bl	8002598 <BC_MultiWrite_Reg>
	BC_MultiWrite_Reg(REG03_CHARGE_CURRENT_LIMIT, 0x0064);      //Limite corrente di carica con 3 celle = 1A
 800249e:	2164      	movs	r1, #100	@ 0x64
 80024a0:	2003      	movs	r0, #3
 80024a2:	f000 f879 	bl	8002598 <BC_MultiWrite_Reg>
	BC_Write_Reg(REG10_CHARGER_CONTROL_1, 0x85);                //Tensione di OVP in ingresso = 26V
 80024a6:	2185      	movs	r1, #133	@ 0x85
 80024a8:	2010      	movs	r0, #16
 80024aa:	f000 f829 	bl	8002500 <BC_Write_Reg>
	BC_Write_Reg(REG14_CHARGER_CONTROL_5, 0x96);                //Informazione sulla presenza dello Ship-FET
 80024ae:	2196      	movs	r1, #150	@ 0x96
 80024b0:	2014      	movs	r0, #20
 80024b2:	f000 f825 	bl	8002500 <BC_Write_Reg>
	BC_Write_Reg(REG15_MPPT_CONTROL, 0xAB);                     //MPPT attivato, tensione di MPP = 0.875*Vin, misura di 300ms ogni 2 minuti della Vin
 80024b6:	21ab      	movs	r1, #171	@ 0xab
 80024b8:	2015      	movs	r0, #21
 80024ba:	f000 f821 	bl	8002500 <BC_Write_Reg>
	BC_Write_Reg(REG28_CHARGER_MASK_0, 0xE1);                   //Interrupt attivati: Poor source, Power good, VAC2 present, VAC1 present
 80024be:	21e1      	movs	r1, #225	@ 0xe1
 80024c0:	2028      	movs	r0, #40	@ 0x28
 80024c2:	f000 f81d 	bl	8002500 <BC_Write_Reg>
	BC_Write_Reg(REG29_CHARGER_MASK_1, 0xD7);                   //Interrupt attivati: nessuno
 80024c6:	21d7      	movs	r1, #215	@ 0xd7
 80024c8:	2029      	movs	r0, #41	@ 0x29
 80024ca:	f000 f819 	bl	8002500 <BC_Write_Reg>
	BC_Write_Reg(REG2A_CHARGER_MASK_2, 0x7F);                   //Interrupt attivati: nessuno
 80024ce:	217f      	movs	r1, #127	@ 0x7f
 80024d0:	202a      	movs	r0, #42	@ 0x2a
 80024d2:	f000 f815 	bl	8002500 <BC_Write_Reg>
	BC_Write_Reg(REG2B_CHARGER_MASK_3, 0x1F);                   //Interrupt attivati: nessuno
 80024d6:	211f      	movs	r1, #31
 80024d8:	202b      	movs	r0, #43	@ 0x2b
 80024da:	f000 f811 	bl	8002500 <BC_Write_Reg>
	BC_Write_Reg(REG2C_FAULT_MASK_0, 0xFC);                     //Interrupt attivati: VAC2 over-voltage, VAC1 over-voltage
 80024de:	21fc      	movs	r1, #252	@ 0xfc
 80024e0:	202c      	movs	r0, #44	@ 0x2c
 80024e2:	f000 f80d 	bl	8002500 <BC_Write_Reg>
	BC_Write_Reg(REG2D_FAULT_MASK_1, 0xF4);                     //Interrupt attivati: nessuno
 80024e6:	21f4      	movs	r1, #244	@ 0xf4
 80024e8:	202d      	movs	r0, #45	@ 0x2d
 80024ea:	f000 f809 	bl	8002500 <BC_Write_Reg>

	BC_MultiRead_Reg(REG3B_VBAT_ADC, &Vbatt);
 80024ee:	4903      	ldr	r1, [pc, #12]	@ (80024fc <BC_Init+0x74>)
 80024f0:	203b      	movs	r0, #59	@ 0x3b
 80024f2:	f000 f87b 	bl	80025ec <BC_MultiRead_Reg>
}
 80024f6:	bf00      	nop
 80024f8:	bd80      	pop	{r7, pc}
 80024fa:	bf00      	nop
 80024fc:	20004426 	.word	0x20004426

08002500 <BC_Write_Reg>:

/*------SCRITTURA REGISTRO 8 BIT------*/
int BC_Write_Reg(uint8_t reg, uint8_t wdata)
{
 8002500:	b580      	push	{r7, lr}
 8002502:	b086      	sub	sp, #24
 8002504:	af02      	add	r7, sp, #8
 8002506:	4603      	mov	r3, r0
 8002508:	460a      	mov	r2, r1
 800250a:	71fb      	strb	r3, [r7, #7]
 800250c:	4613      	mov	r3, r2
 800250e:	71bb      	strb	r3, [r7, #6]
	int result = -1;
 8002510:	f04f 33ff 	mov.w	r3, #4294967295
 8002514:	60fb      	str	r3, [r7, #12]
	uint8_t toSend[2];
	toSend[0] = reg;
 8002516:	79fb      	ldrb	r3, [r7, #7]
 8002518:	723b      	strb	r3, [r7, #8]
	toSend[1] = wdata;
 800251a:	79bb      	ldrb	r3, [r7, #6]
 800251c:	727b      	strb	r3, [r7, #9]

	if(HAL_I2C_Master_Transmit(I2C, BATTERY_CHARGER_ADDR << 1, toSend, 2, 100) == HAL_OK)
 800251e:	f107 0208 	add.w	r2, r7, #8
 8002522:	2364      	movs	r3, #100	@ 0x64
 8002524:	9300      	str	r3, [sp, #0]
 8002526:	2302      	movs	r3, #2
 8002528:	21d6      	movs	r1, #214	@ 0xd6
 800252a:	4806      	ldr	r0, [pc, #24]	@ (8002544 <BC_Write_Reg+0x44>)
 800252c:	f00b ff0e 	bl	800e34c <HAL_I2C_Master_Transmit>
 8002530:	4603      	mov	r3, r0
 8002532:	2b00      	cmp	r3, #0
 8002534:	d101      	bne.n	800253a <BC_Write_Reg+0x3a>
	{
		result = 0;
 8002536:	2300      	movs	r3, #0
 8002538:	60fb      	str	r3, [r7, #12]
	}

	return result;
 800253a:	68fb      	ldr	r3, [r7, #12]
}
 800253c:	4618      	mov	r0, r3
 800253e:	3710      	adds	r7, #16
 8002540:	46bd      	mov	sp, r7
 8002542:	bd80      	pop	{r7, pc}
 8002544:	200003e8 	.word	0x200003e8

08002548 <BC_Read_Reg>:

/*------LETTURA REGISTRO 8 BIT------*/
int BC_Read_Reg(uint8_t reg, uint8_t *rdata)
{
 8002548:	b580      	push	{r7, lr}
 800254a:	b086      	sub	sp, #24
 800254c:	af02      	add	r7, sp, #8
 800254e:	4603      	mov	r3, r0
 8002550:	6039      	str	r1, [r7, #0]
 8002552:	71fb      	strb	r3, [r7, #7]
	int result = -1;
 8002554:	f04f 33ff 	mov.w	r3, #4294967295
 8002558:	60fb      	str	r3, [r7, #12]

	if(HAL_I2C_Master_Transmit(I2C, BATTERY_CHARGER_ADDR << 1, &reg, 1, 100) == HAL_OK)
 800255a:	1dfa      	adds	r2, r7, #7
 800255c:	2364      	movs	r3, #100	@ 0x64
 800255e:	9300      	str	r3, [sp, #0]
 8002560:	2301      	movs	r3, #1
 8002562:	21d6      	movs	r1, #214	@ 0xd6
 8002564:	480b      	ldr	r0, [pc, #44]	@ (8002594 <BC_Read_Reg+0x4c>)
 8002566:	f00b fef1 	bl	800e34c <HAL_I2C_Master_Transmit>
 800256a:	4603      	mov	r3, r0
 800256c:	2b00      	cmp	r3, #0
 800256e:	d10c      	bne.n	800258a <BC_Read_Reg+0x42>
	{
		if(HAL_I2C_Master_Receive(I2C,  BATTERY_CHARGER_ADDR << 1, rdata, 1, 100) == HAL_OK)
 8002570:	2364      	movs	r3, #100	@ 0x64
 8002572:	9300      	str	r3, [sp, #0]
 8002574:	2301      	movs	r3, #1
 8002576:	683a      	ldr	r2, [r7, #0]
 8002578:	21d6      	movs	r1, #214	@ 0xd6
 800257a:	4806      	ldr	r0, [pc, #24]	@ (8002594 <BC_Read_Reg+0x4c>)
 800257c:	f00b fffe 	bl	800e57c <HAL_I2C_Master_Receive>
 8002580:	4603      	mov	r3, r0
 8002582:	2b00      	cmp	r3, #0
 8002584:	d101      	bne.n	800258a <BC_Read_Reg+0x42>
		{
			result = 0;
 8002586:	2300      	movs	r3, #0
 8002588:	60fb      	str	r3, [r7, #12]
		}
	}

	return result;
 800258a:	68fb      	ldr	r3, [r7, #12]
}
 800258c:	4618      	mov	r0, r3
 800258e:	3710      	adds	r7, #16
 8002590:	46bd      	mov	sp, r7
 8002592:	bd80      	pop	{r7, pc}
 8002594:	200003e8 	.word	0x200003e8

08002598 <BC_MultiWrite_Reg>:

/*------SCRITTURA REGISTRO 16 BIT------*/
int BC_MultiWrite_Reg(uint8_t reg, uint16_t wdata)
{
 8002598:	b580      	push	{r7, lr}
 800259a:	b086      	sub	sp, #24
 800259c:	af02      	add	r7, sp, #8
 800259e:	4603      	mov	r3, r0
 80025a0:	460a      	mov	r2, r1
 80025a2:	71fb      	strb	r3, [r7, #7]
 80025a4:	4613      	mov	r3, r2
 80025a6:	80bb      	strh	r3, [r7, #4]
	int result = -1;
 80025a8:	f04f 33ff 	mov.w	r3, #4294967295
 80025ac:	60fb      	str	r3, [r7, #12]
	uint8_t toSend[3];
	toSend[0] = reg;
 80025ae:	79fb      	ldrb	r3, [r7, #7]
 80025b0:	723b      	strb	r3, [r7, #8]
	toSend[1] = (wdata & 0xFF00) >> 8;
 80025b2:	88bb      	ldrh	r3, [r7, #4]
 80025b4:	0a1b      	lsrs	r3, r3, #8
 80025b6:	b29b      	uxth	r3, r3
 80025b8:	b2db      	uxtb	r3, r3
 80025ba:	727b      	strb	r3, [r7, #9]
	toSend[2] = wdata & 0x00FF;
 80025bc:	88bb      	ldrh	r3, [r7, #4]
 80025be:	b2db      	uxtb	r3, r3
 80025c0:	72bb      	strb	r3, [r7, #10]

	if(HAL_I2C_Master_Transmit(I2C, BATTERY_CHARGER_ADDR << 1, toSend, 3, 100) == HAL_OK)
 80025c2:	f107 0208 	add.w	r2, r7, #8
 80025c6:	2364      	movs	r3, #100	@ 0x64
 80025c8:	9300      	str	r3, [sp, #0]
 80025ca:	2303      	movs	r3, #3
 80025cc:	21d6      	movs	r1, #214	@ 0xd6
 80025ce:	4806      	ldr	r0, [pc, #24]	@ (80025e8 <BC_MultiWrite_Reg+0x50>)
 80025d0:	f00b febc 	bl	800e34c <HAL_I2C_Master_Transmit>
 80025d4:	4603      	mov	r3, r0
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	d101      	bne.n	80025de <BC_MultiWrite_Reg+0x46>
	{
		result = 0;
 80025da:	2300      	movs	r3, #0
 80025dc:	60fb      	str	r3, [r7, #12]
	}

	return result;
 80025de:	68fb      	ldr	r3, [r7, #12]
}
 80025e0:	4618      	mov	r0, r3
 80025e2:	3710      	adds	r7, #16
 80025e4:	46bd      	mov	sp, r7
 80025e6:	bd80      	pop	{r7, pc}
 80025e8:	200003e8 	.word	0x200003e8

080025ec <BC_MultiRead_Reg>:

/*------LETTURA REGISTRO 16 BIT------*/
int BC_MultiRead_Reg(uint8_t reg, uint16_t *rdata)
{
 80025ec:	b580      	push	{r7, lr}
 80025ee:	b086      	sub	sp, #24
 80025f0:	af02      	add	r7, sp, #8
 80025f2:	4603      	mov	r3, r0
 80025f4:	6039      	str	r1, [r7, #0]
 80025f6:	71fb      	strb	r3, [r7, #7]
	int result = -1;
 80025f8:	f04f 33ff 	mov.w	r3, #4294967295
 80025fc:	60fb      	str	r3, [r7, #12]
	uint8_t data[2] = {0};
 80025fe:	2300      	movs	r3, #0
 8002600:	813b      	strh	r3, [r7, #8]

	if(HAL_I2C_Master_Transmit(I2C, BATTERY_CHARGER_ADDR << 1, &reg, 1, 100) == HAL_OK)
 8002602:	1dfa      	adds	r2, r7, #7
 8002604:	2364      	movs	r3, #100	@ 0x64
 8002606:	9300      	str	r3, [sp, #0]
 8002608:	2301      	movs	r3, #1
 800260a:	21d6      	movs	r1, #214	@ 0xd6
 800260c:	4811      	ldr	r0, [pc, #68]	@ (8002654 <BC_MultiRead_Reg+0x68>)
 800260e:	f00b fe9d 	bl	800e34c <HAL_I2C_Master_Transmit>
 8002612:	4603      	mov	r3, r0
 8002614:	2b00      	cmp	r3, #0
 8002616:	d118      	bne.n	800264a <BC_MultiRead_Reg+0x5e>
	{
		if(HAL_I2C_Master_Receive(I2C,  BATTERY_CHARGER_ADDR << 1, data, 2, 100) == HAL_OK)
 8002618:	f107 0208 	add.w	r2, r7, #8
 800261c:	2364      	movs	r3, #100	@ 0x64
 800261e:	9300      	str	r3, [sp, #0]
 8002620:	2302      	movs	r3, #2
 8002622:	21d6      	movs	r1, #214	@ 0xd6
 8002624:	480b      	ldr	r0, [pc, #44]	@ (8002654 <BC_MultiRead_Reg+0x68>)
 8002626:	f00b ffa9 	bl	800e57c <HAL_I2C_Master_Receive>
 800262a:	4603      	mov	r3, r0
 800262c:	2b00      	cmp	r3, #0
 800262e:	d10c      	bne.n	800264a <BC_MultiRead_Reg+0x5e>
		{
			result = 0;
 8002630:	2300      	movs	r3, #0
 8002632:	60fb      	str	r3, [r7, #12]
			*rdata = (data[0] << 8) | data[1];
 8002634:	7a3b      	ldrb	r3, [r7, #8]
 8002636:	b21b      	sxth	r3, r3
 8002638:	021b      	lsls	r3, r3, #8
 800263a:	b21a      	sxth	r2, r3
 800263c:	7a7b      	ldrb	r3, [r7, #9]
 800263e:	b21b      	sxth	r3, r3
 8002640:	4313      	orrs	r3, r2
 8002642:	b21b      	sxth	r3, r3
 8002644:	b29a      	uxth	r2, r3
 8002646:	683b      	ldr	r3, [r7, #0]
 8002648:	801a      	strh	r2, [r3, #0]
		}
	}

	return result;
 800264a:	68fb      	ldr	r3, [r7, #12]
}
 800264c:	4618      	mov	r0, r3
 800264e:	3710      	adds	r7, #16
 8002650:	46bd      	mov	sp, r7
 8002652:	bd80      	pop	{r7, pc}
 8002654:	200003e8 	.word	0x200003e8

08002658 <BC_Read_Flags>:

/*------LETTURA FLAGS DI INTERRUZIONE------*/
int BC_Read_Flags(uint64_t *flags)
{
 8002658:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800265c:	b09b      	sub	sp, #108	@ 0x6c
 800265e:	af02      	add	r7, sp, #8
 8002660:	64f8      	str	r0, [r7, #76]	@ 0x4c
	int result = -1;
 8002662:	f04f 33ff 	mov.w	r3, #4294967295
 8002666:	65fb      	str	r3, [r7, #92]	@ 0x5c
	uint8_t data[6] = {0};
 8002668:	f107 0254 	add.w	r2, r7, #84	@ 0x54
 800266c:	2300      	movs	r3, #0
 800266e:	6013      	str	r3, [r2, #0]
 8002670:	8093      	strh	r3, [r2, #4]
	uint8_t reg = REG22_CHARGER_FLAG_0;
 8002672:	2322      	movs	r3, #34	@ 0x22
 8002674:	f887 3053 	strb.w	r3, [r7, #83]	@ 0x53

	if(HAL_I2C_Master_Transmit(I2C, BATTERY_CHARGER_ADDR << 1, &reg, 1, 100) == HAL_OK)
 8002678:	f107 0253 	add.w	r2, r7, #83	@ 0x53
 800267c:	2364      	movs	r3, #100	@ 0x64
 800267e:	9300      	str	r3, [sp, #0]
 8002680:	2301      	movs	r3, #1
 8002682:	21d6      	movs	r1, #214	@ 0xd6
 8002684:	484a      	ldr	r0, [pc, #296]	@ (80027b0 <BC_Read_Flags+0x158>)
 8002686:	f00b fe61 	bl	800e34c <HAL_I2C_Master_Transmit>
 800268a:	4603      	mov	r3, r0
 800268c:	2b00      	cmp	r3, #0
 800268e:	f040 8089 	bne.w	80027a4 <BC_Read_Flags+0x14c>
	{
		if(HAL_I2C_Master_Receive(I2C,  BATTERY_CHARGER_ADDR << 1 , (uint8_t *)data, 6, 100) == HAL_OK)
 8002692:	f107 0254 	add.w	r2, r7, #84	@ 0x54
 8002696:	2364      	movs	r3, #100	@ 0x64
 8002698:	9300      	str	r3, [sp, #0]
 800269a:	2306      	movs	r3, #6
 800269c:	21d6      	movs	r1, #214	@ 0xd6
 800269e:	4844      	ldr	r0, [pc, #272]	@ (80027b0 <BC_Read_Flags+0x158>)
 80026a0:	f00b ff6c 	bl	800e57c <HAL_I2C_Master_Receive>
 80026a4:	4603      	mov	r3, r0
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	d17c      	bne.n	80027a4 <BC_Read_Flags+0x14c>
		{
			result = 0;
 80026aa:	2300      	movs	r3, #0
 80026ac:	65fb      	str	r3, [r7, #92]	@ 0x5c
			*flags = ((uint64_t)data[0] << 40) | ((uint64_t)data[1] << 32) | ((uint64_t)data[2] << 24) | ((uint64_t)data[3] << 16) | ((uint64_t)data[4] << 8) | (uint64_t)data[5];
 80026ae:	f897 3054 	ldrb.w	r3, [r7, #84]	@ 0x54
 80026b2:	b2db      	uxtb	r3, r3
 80026b4:	2200      	movs	r2, #0
 80026b6:	643b      	str	r3, [r7, #64]	@ 0x40
 80026b8:	647a      	str	r2, [r7, #68]	@ 0x44
 80026ba:	f04f 0000 	mov.w	r0, #0
 80026be:	f04f 0100 	mov.w	r1, #0
 80026c2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80026c4:	0219      	lsls	r1, r3, #8
 80026c6:	2000      	movs	r0, #0
 80026c8:	f897 3055 	ldrb.w	r3, [r7, #85]	@ 0x55
 80026cc:	b2db      	uxtb	r3, r3
 80026ce:	2200      	movs	r2, #0
 80026d0:	63bb      	str	r3, [r7, #56]	@ 0x38
 80026d2:	63fa      	str	r2, [r7, #60]	@ 0x3c
 80026d4:	f04f 0200 	mov.w	r2, #0
 80026d8:	f04f 0300 	mov.w	r3, #0
 80026dc:	6bbe      	ldr	r6, [r7, #56]	@ 0x38
 80026de:	0033      	movs	r3, r6
 80026e0:	2200      	movs	r2, #0
 80026e2:	ea40 0802 	orr.w	r8, r0, r2
 80026e6:	ea41 0903 	orr.w	r9, r1, r3
 80026ea:	f897 3056 	ldrb.w	r3, [r7, #86]	@ 0x56
 80026ee:	b2db      	uxtb	r3, r3
 80026f0:	2200      	movs	r2, #0
 80026f2:	633b      	str	r3, [r7, #48]	@ 0x30
 80026f4:	637a      	str	r2, [r7, #52]	@ 0x34
 80026f6:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 80026fa:	460b      	mov	r3, r1
 80026fc:	0a1d      	lsrs	r5, r3, #8
 80026fe:	460b      	mov	r3, r1
 8002700:	061c      	lsls	r4, r3, #24
 8002702:	ea48 0304 	orr.w	r3, r8, r4
 8002706:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002708:	ea49 0305 	orr.w	r3, r9, r5
 800270c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800270e:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8002712:	b2db      	uxtb	r3, r3
 8002714:	2200      	movs	r2, #0
 8002716:	623b      	str	r3, [r7, #32]
 8002718:	627a      	str	r2, [r7, #36]	@ 0x24
 800271a:	f04f 0200 	mov.w	r2, #0
 800271e:	f04f 0300 	mov.w	r3, #0
 8002722:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8002726:	4629      	mov	r1, r5
 8002728:	040b      	lsls	r3, r1, #16
 800272a:	4621      	mov	r1, r4
 800272c:	ea43 4311 	orr.w	r3, r3, r1, lsr #16
 8002730:	4621      	mov	r1, r4
 8002732:	040a      	lsls	r2, r1, #16
 8002734:	e9d7 450a 	ldrd	r4, r5, [r7, #40]	@ 0x28
 8002738:	4621      	mov	r1, r4
 800273a:	4311      	orrs	r1, r2
 800273c:	61b9      	str	r1, [r7, #24]
 800273e:	4629      	mov	r1, r5
 8002740:	4319      	orrs	r1, r3
 8002742:	61f9      	str	r1, [r7, #28]
 8002744:	f897 3058 	ldrb.w	r3, [r7, #88]	@ 0x58
 8002748:	b2db      	uxtb	r3, r3
 800274a:	2200      	movs	r2, #0
 800274c:	613b      	str	r3, [r7, #16]
 800274e:	617a      	str	r2, [r7, #20]
 8002750:	f04f 0200 	mov.w	r2, #0
 8002754:	f04f 0300 	mov.w	r3, #0
 8002758:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 800275c:	4629      	mov	r1, r5
 800275e:	020b      	lsls	r3, r1, #8
 8002760:	4621      	mov	r1, r4
 8002762:	ea43 6311 	orr.w	r3, r3, r1, lsr #24
 8002766:	4621      	mov	r1, r4
 8002768:	020a      	lsls	r2, r1, #8
 800276a:	e9d7 4506 	ldrd	r4, r5, [r7, #24]
 800276e:	4621      	mov	r1, r4
 8002770:	ea41 0a02 	orr.w	sl, r1, r2
 8002774:	4629      	mov	r1, r5
 8002776:	ea41 0b03 	orr.w	fp, r1, r3
 800277a:	f897 3059 	ldrb.w	r3, [r7, #89]	@ 0x59
 800277e:	b2db      	uxtb	r3, r3
 8002780:	2200      	movs	r2, #0
 8002782:	60bb      	str	r3, [r7, #8]
 8002784:	60fa      	str	r2, [r7, #12]
 8002786:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800278a:	460b      	mov	r3, r1
 800278c:	ea4a 0303 	orr.w	r3, sl, r3
 8002790:	603b      	str	r3, [r7, #0]
 8002792:	4613      	mov	r3, r2
 8002794:	ea4b 0303 	orr.w	r3, fp, r3
 8002798:	607b      	str	r3, [r7, #4]
 800279a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800279c:	e9d7 1200 	ldrd	r1, r2, [r7]
 80027a0:	e9c3 1200 	strd	r1, r2, [r3]
		}
	}

	return result;
 80027a4:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
}
 80027a6:	4618      	mov	r0, r3
 80027a8:	3764      	adds	r7, #100	@ 0x64
 80027aa:	46bd      	mov	sp, r7
 80027ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80027b0:	200003e8 	.word	0x200003e8

080027b4 <BC_Manage_Interrupts>:

/*------GESTIONE DELLE INTERRUZIONI------*/
void BC_Manage_Interrupts(uint64_t flags)
{
 80027b4:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80027b8:	b084      	sub	sp, #16
 80027ba:	af00      	add	r7, sp, #0
 80027bc:	e9c7 0100 	strd	r0, r1, [r7]
	uint8_t status = 0;
 80027c0:	2100      	movs	r1, #0
 80027c2:	73f9      	strb	r1, [r7, #15]

	if((flags & POOR_SOURCE_MASK) != 0)   //INGRESSO NON BUONO
 80027c4:	e9d7 0100 	ldrd	r0, r1, [r7]
 80027c8:	2200      	movs	r2, #0
 80027ca:	f401 5380 	and.w	r3, r1, #4096	@ 0x1000
 80027ce:	4313      	orrs	r3, r2
 80027d0:	d00c      	beq.n	80027ec <BC_Manage_Interrupts+0x38>
	{
		// ...gestione evento...
		BC_Write_Reg(REG22_CHARGER_FLAG_0, (flags >> 40) & 0xFF);
 80027d2:	e9d7 0100 	ldrd	r0, r1, [r7]
 80027d6:	f04f 0200 	mov.w	r2, #0
 80027da:	f04f 0300 	mov.w	r3, #0
 80027de:	0a0a      	lsrs	r2, r1, #8
 80027e0:	2300      	movs	r3, #0
 80027e2:	b2d3      	uxtb	r3, r2
 80027e4:	4619      	mov	r1, r3
 80027e6:	2022      	movs	r0, #34	@ 0x22
 80027e8:	f7ff fe8a 	bl	8002500 <BC_Write_Reg>
	}

	if((flags & VAC2_CHANGE_MASK) != 0)  //PANNELLO INSERITO O RIMOSSO
 80027ec:	e9d7 2300 	ldrd	r2, r3, [r7]
 80027f0:	f04f 0800 	mov.w	r8, #0
 80027f4:	f403 6980 	and.w	r9, r3, #1024	@ 0x400
 80027f8:	ea58 0309 	orrs.w	r3, r8, r9
 80027fc:	d020      	beq.n	8002840 <BC_Manage_Interrupts+0x8c>
	{
		BC_Read_Reg(REG1B_CHARGER_STATUS_0, &status);
 80027fe:	f107 030f 	add.w	r3, r7, #15
 8002802:	4619      	mov	r1, r3
 8002804:	201b      	movs	r0, #27
 8002806:	f7ff fe9f 	bl	8002548 <BC_Read_Reg>
		if((status & VAC2_PRESENT_MASK) != 0)
 800280a:	7bfb      	ldrb	r3, [r7, #15]
 800280c:	f003 0302 	and.w	r3, r3, #2
 8002810:	2b00      	cmp	r3, #0
 8002812:	d004      	beq.n	800281e <BC_Manage_Interrupts+0x6a>
		{
			BC_Write_Reg(REG13_CHARGER_CONTROL_4, 0x80);                //Usa Pannello
 8002814:	2180      	movs	r1, #128	@ 0x80
 8002816:	2013      	movs	r0, #19
 8002818:	f7ff fe72 	bl	8002500 <BC_Write_Reg>
 800281c:	e003      	b.n	8002826 <BC_Manage_Interrupts+0x72>
		}
		else
		{
			BC_Write_Reg(REG13_CHARGER_CONTROL_4, 0x40);                //Usa Turbina
 800281e:	2140      	movs	r1, #64	@ 0x40
 8002820:	2013      	movs	r0, #19
 8002822:	f7ff fe6d 	bl	8002500 <BC_Write_Reg>
		}
		BC_Write_Reg(REG22_CHARGER_FLAG_0, (flags >> 40) & 0xFF);
 8002826:	e9d7 0100 	ldrd	r0, r1, [r7]
 800282a:	f04f 0200 	mov.w	r2, #0
 800282e:	f04f 0300 	mov.w	r3, #0
 8002832:	0a0a      	lsrs	r2, r1, #8
 8002834:	2300      	movs	r3, #0
 8002836:	b2d3      	uxtb	r3, r2
 8002838:	4619      	mov	r1, r3
 800283a:	2022      	movs	r0, #34	@ 0x22
 800283c:	f7ff fe60 	bl	8002500 <BC_Write_Reg>
	}

	if((flags & VAC1_CHANGE_MASK) != 0)  //TURBINA INSERITA O RIMOSSA
 8002840:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002844:	2400      	movs	r4, #0
 8002846:	f403 7500 	and.w	r5, r3, #512	@ 0x200
 800284a:	ea54 0305 	orrs.w	r3, r4, r5
 800284e:	d00c      	beq.n	800286a <BC_Manage_Interrupts+0xb6>
	{
		// ...gestione evento...
		BC_Write_Reg(REG22_CHARGER_FLAG_0, (flags >> 40) & 0xFF);
 8002850:	e9d7 0100 	ldrd	r0, r1, [r7]
 8002854:	f04f 0200 	mov.w	r2, #0
 8002858:	f04f 0300 	mov.w	r3, #0
 800285c:	0a0a      	lsrs	r2, r1, #8
 800285e:	2300      	movs	r3, #0
 8002860:	b2d3      	uxtb	r3, r2
 8002862:	4619      	mov	r1, r3
 8002864:	2022      	movs	r0, #34	@ 0x22
 8002866:	f7ff fe4b 	bl	8002500 <BC_Write_Reg>
	}

	flags = 0;
 800286a:	f04f 0200 	mov.w	r2, #0
 800286e:	f04f 0300 	mov.w	r3, #0
 8002872:	e9c7 2300 	strd	r2, r3, [r7]
}
 8002876:	bf00      	nop
 8002878:	3710      	adds	r7, #16
 800287a:	46bd      	mov	sp, r7
 800287c:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}

08002880 <HAL_UARTEx_RxEventCallback>:
	}
}

/* ------CALLBACK UART RX IDLE------*/
void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8002880:	b580      	push	{r7, lr}
 8002882:	b082      	sub	sp, #8
 8002884:	af00      	add	r7, sp, #0
 8002886:	6078      	str	r0, [r7, #4]
 8002888:	460b      	mov	r3, r1
 800288a:	807b      	strh	r3, [r7, #2]
	if(huart == SIM_UART)
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	4a2f      	ldr	r2, [pc, #188]	@ (800294c <HAL_UARTEx_RxEventCallback+0xcc>)
 8002890:	4293      	cmp	r3, r2
 8002892:	d150      	bne.n	8002936 <HAL_UARTEx_RxEventCallback+0xb6>
	{
		if(*(uint8_t*)sim_rx_buffer == '>')
 8002894:	4b2e      	ldr	r3, [pc, #184]	@ (8002950 <HAL_UARTEx_RxEventCallback+0xd0>)
 8002896:	781b      	ldrb	r3, [r3, #0]
 8002898:	2b3e      	cmp	r3, #62	@ 0x3e
 800289a:	d120      	bne.n	80028de <HAL_UARTEx_RxEventCallback+0x5e>
		{
			if(flags.CMD.Measure_Request)
 800289c:	4b2d      	ldr	r3, [pc, #180]	@ (8002954 <HAL_UARTEx_RxEventCallback+0xd4>)
 800289e:	789b      	ldrb	r3, [r3, #2]
 80028a0:	f003 0302 	and.w	r3, r3, #2
 80028a4:	b2db      	uxtb	r3, r3
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	d005      	beq.n	80028b6 <HAL_UARTEx_RxEventCallback+0x36>
			{
				flags.TCP_ReadytoSend = 1;
 80028aa:	4a2a      	ldr	r2, [pc, #168]	@ (8002954 <HAL_UARTEx_RxEventCallback+0xd4>)
 80028ac:	7853      	ldrb	r3, [r2, #1]
 80028ae:	f043 0302 	orr.w	r3, r3, #2
 80028b2:	7053      	strb	r3, [r2, #1]
 80028b4:	e03f      	b.n	8002936 <HAL_UARTEx_RxEventCallback+0xb6>
			}
			else if(flags.CMD.Data_Request)
 80028b6:	4b27      	ldr	r3, [pc, #156]	@ (8002954 <HAL_UARTEx_RxEventCallback+0xd4>)
 80028b8:	789b      	ldrb	r3, [r3, #2]
 80028ba:	f003 0301 	and.w	r3, r3, #1
 80028be:	b2db      	uxtb	r3, r3
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	d038      	beq.n	8002936 <HAL_UARTEx_RxEventCallback+0xb6>
			{
				flags.MQTT_ReadytoSend = 1;
 80028c4:	4a23      	ldr	r2, [pc, #140]	@ (8002954 <HAL_UARTEx_RxEventCallback+0xd4>)
 80028c6:	7853      	ldrb	r3, [r2, #1]
 80028c8:	f043 0301 	orr.w	r3, r3, #1
 80028cc:	7053      	strb	r3, [r2, #1]
				sys.SIM_Prompt_Status = 0;
 80028ce:	4b22      	ldr	r3, [pc, #136]	@ (8002958 <HAL_UARTEx_RxEventCallback+0xd8>)
 80028d0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80028d4:	461a      	mov	r2, r3
 80028d6:	2300      	movs	r3, #0
 80028d8:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
 80028dc:	e02b      	b.n	8002936 <HAL_UARTEx_RxEventCallback+0xb6>
			}
		}

		else if(*(uint32_t*)sim_rx_buffer == 0x444E4553 &&              // "SEND"
 80028de:	4b1c      	ldr	r3, [pc, #112]	@ (8002950 <HAL_UARTEx_RxEventCallback+0xd0>)
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	4a1e      	ldr	r2, [pc, #120]	@ (800295c <HAL_UARTEx_RxEventCallback+0xdc>)
 80028e4:	4293      	cmp	r3, r2
 80028e6:	d10a      	bne.n	80028fe <HAL_UARTEx_RxEventCallback+0x7e>
				   *(uint32_t*)(sim_rx_buffer + 4) == 0x004B204F)       // " OK\0"
 80028e8:	4b1d      	ldr	r3, [pc, #116]	@ (8002960 <HAL_UARTEx_RxEventCallback+0xe0>)
 80028ea:	681b      	ldr	r3, [r3, #0]
		else if(*(uint32_t*)sim_rx_buffer == 0x444E4553 &&              // "SEND"
 80028ec:	4a1d      	ldr	r2, [pc, #116]	@ (8002964 <HAL_UARTEx_RxEventCallback+0xe4>)
 80028ee:	4293      	cmp	r3, r2
 80028f0:	d105      	bne.n	80028fe <HAL_UARTEx_RxEventCallback+0x7e>
		{
			flags.TCP_isSending = 0;
 80028f2:	4a18      	ldr	r2, [pc, #96]	@ (8002954 <HAL_UARTEx_RxEventCallback+0xd4>)
 80028f4:	7853      	ldrb	r3, [r2, #1]
 80028f6:	f023 0304 	bic.w	r3, r3, #4
 80028fa:	7053      	strb	r3, [r2, #1]
 80028fc:	e01b      	b.n	8002936 <HAL_UARTEx_RxEventCallback+0xb6>
		}

		else if(*(uint32_t*)sim_rx_buffer == 0x4552524F)                 //"ERRO"
 80028fe:	4b14      	ldr	r3, [pc, #80]	@ (8002950 <HAL_UARTEx_RxEventCallback+0xd0>)
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	4a19      	ldr	r2, [pc, #100]	@ (8002968 <HAL_UARTEx_RxEventCallback+0xe8>)
 8002904:	4293      	cmp	r3, r2
 8002906:	d10c      	bne.n	8002922 <HAL_UARTEx_RxEventCallback+0xa2>
		{
			flags.MQTT_ReadytoSend = 0;
 8002908:	4a12      	ldr	r2, [pc, #72]	@ (8002954 <HAL_UARTEx_RxEventCallback+0xd4>)
 800290a:	7853      	ldrb	r3, [r2, #1]
 800290c:	f023 0301 	bic.w	r3, r3, #1
 8002910:	7053      	strb	r3, [r2, #1]
			sys.SIM_Prompt_Status = 0;
 8002912:	4b11      	ldr	r3, [pc, #68]	@ (8002958 <HAL_UARTEx_RxEventCallback+0xd8>)
 8002914:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002918:	461a      	mov	r2, r3
 800291a:	2300      	movs	r3, #0
 800291c:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
 8002920:	e009      	b.n	8002936 <HAL_UARTEx_RxEventCallback+0xb6>
		}

		else if(*(uint32_t*)sim_rx_buffer == 0x444D432B)                     // "+CMD"
 8002922:	4b0b      	ldr	r3, [pc, #44]	@ (8002950 <HAL_UARTEx_RxEventCallback+0xd0>)
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	4a11      	ldr	r2, [pc, #68]	@ (800296c <HAL_UARTEx_RxEventCallback+0xec>)
 8002928:	4293      	cmp	r3, r2
 800292a:	d104      	bne.n	8002936 <HAL_UARTEx_RxEventCallback+0xb6>
		{     
			flags.Message_Rx = 1;
 800292c:	4a09      	ldr	r2, [pc, #36]	@ (8002954 <HAL_UARTEx_RxEventCallback+0xd4>)
 800292e:	7813      	ldrb	r3, [r2, #0]
 8002930:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002934:	7013      	strb	r3, [r2, #0]
		}


	}
	
	HAL_UARTEx_ReceiveToIdle_DMA(SIM_UART, sim_rx_buffer, SIM_RXBUFFER_SIZE);
 8002936:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 800293a:	4905      	ldr	r1, [pc, #20]	@ (8002950 <HAL_UARTEx_RxEventCallback+0xd0>)
 800293c:	4803      	ldr	r0, [pc, #12]	@ (800294c <HAL_UARTEx_RxEventCallback+0xcc>)
 800293e:	f013 f9e5 	bl	8015d0c <HAL_UARTEx_ReceiveToIdle_DMA>
}
 8002942:	bf00      	nop
 8002944:	3708      	adds	r7, #8
 8002946:	46bd      	mov	sp, r7
 8002948:	bd80      	pop	{r7, pc}
 800294a:	bf00      	nop
 800294c:	20000724 	.word	0x20000724
 8002950:	200051f8 	.word	0x200051f8
 8002954:	200019e8 	.word	0x200019e8
 8002958:	20000840 	.word	0x20000840
 800295c:	444e4553 	.word	0x444e4553
 8002960:	200051fc 	.word	0x200051fc
 8002964:	004b204f 	.word	0x004b204f
 8002968:	4552524f 	.word	0x4552524f
 800296c:	444d432b 	.word	0x444d432b

08002970 <HAL_UART_RxCpltCallback>:

/* ------CALLBACK UART RX COMPLETE------*/
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8002970:	b480      	push	{r7}
 8002972:	b083      	sub	sp, #12
 8002974:	af00      	add	r7, sp, #0
 8002976:	6078      	str	r0, [r7, #4]
	if (huart == SIM_UART)
	{

	}

}
 8002978:	bf00      	nop
 800297a:	370c      	adds	r7, #12
 800297c:	46bd      	mov	sp, r7
 800297e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002982:	4770      	bx	lr

08002984 <HAL_UART_TxCpltCallback>:

/* ------CALLBACK UART TX COMPLETE------*/
void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002984:	b480      	push	{r7}
 8002986:	b083      	sub	sp, #12
 8002988:	af00      	add	r7, sp, #0
 800298a:	6078      	str	r0, [r7, #4]
	if (huart == SIM_UART)
	{

	}

}
 800298c:	bf00      	nop
 800298e:	370c      	adds	r7, #12
 8002990:	46bd      	mov	sp, r7
 8002992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002996:	4770      	bx	lr

08002998 <HAL_ADC_ConvHalfCpltCallback>:

/* ------CALLBACK HALF ADC------*/
void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8002998:	b480      	push	{r7}
 800299a:	b083      	sub	sp, #12
 800299c:	af00      	add	r7, sp, #0
 800299e:	6078      	str	r0, [r7, #4]
	if(hadc == PRESSURE_ADC)
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	4a09      	ldr	r2, [pc, #36]	@ (80029c8 <HAL_ADC_ConvHalfCpltCallback+0x30>)
 80029a4:	4293      	cmp	r3, r2
 80029a6:	d109      	bne.n	80029bc <HAL_ADC_ConvHalfCpltCallback+0x24>
	{
		flags.ADC_Complete = 1;
 80029a8:	4a08      	ldr	r2, [pc, #32]	@ (80029cc <HAL_ADC_ConvHalfCpltCallback+0x34>)
 80029aa:	7813      	ldrb	r3, [r2, #0]
 80029ac:	f043 0301 	orr.w	r3, r3, #1
 80029b0:	7013      	strb	r3, [r2, #0]
		flags.ADC_Half_Buffer = 1;
 80029b2:	4a06      	ldr	r2, [pc, #24]	@ (80029cc <HAL_ADC_ConvHalfCpltCallback+0x34>)
 80029b4:	7813      	ldrb	r3, [r2, #0]
 80029b6:	f043 0302 	orr.w	r3, r3, #2
 80029ba:	7013      	strb	r3, [r2, #0]
	}
}
 80029bc:	bf00      	nop
 80029be:	370c      	adds	r7, #12
 80029c0:	46bd      	mov	sp, r7
 80029c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029c6:	4770      	bx	lr
 80029c8:	20000318 	.word	0x20000318
 80029cc:	200019e8 	.word	0x200019e8

080029d0 <HAL_ADC_ConvCpltCallback>:

/*------CALLBACK FULL ADC------*/
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 80029d0:	b480      	push	{r7}
 80029d2:	b083      	sub	sp, #12
 80029d4:	af00      	add	r7, sp, #0
 80029d6:	6078      	str	r0, [r7, #4]
	if(hadc == PRESSURE_ADC)
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	4a09      	ldr	r2, [pc, #36]	@ (8002a00 <HAL_ADC_ConvCpltCallback+0x30>)
 80029dc:	4293      	cmp	r3, r2
 80029de:	d109      	bne.n	80029f4 <HAL_ADC_ConvCpltCallback+0x24>
	{
		flags.ADC_Complete = 1;
 80029e0:	4a08      	ldr	r2, [pc, #32]	@ (8002a04 <HAL_ADC_ConvCpltCallback+0x34>)
 80029e2:	7813      	ldrb	r3, [r2, #0]
 80029e4:	f043 0301 	orr.w	r3, r3, #1
 80029e8:	7013      	strb	r3, [r2, #0]
		flags.ADC_Full_Buffer = 1;
 80029ea:	4a06      	ldr	r2, [pc, #24]	@ (8002a04 <HAL_ADC_ConvCpltCallback+0x34>)
 80029ec:	7813      	ldrb	r3, [r2, #0]
 80029ee:	f043 0304 	orr.w	r3, r3, #4
 80029f2:	7013      	strb	r3, [r2, #0]
	}
}
 80029f4:	bf00      	nop
 80029f6:	370c      	adds	r7, #12
 80029f8:	46bd      	mov	sp, r7
 80029fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029fe:	4770      	bx	lr
 8002a00:	20000318 	.word	0x20000318
 8002a04:	200019e8 	.word	0x200019e8

08002a08 <HAL_RTC_AlarmAEventCallback>:

/*------CALLBACK RTC CAMBIO ORA------*/
void HAL_RTC_AlarmAEventCallback(RTC_HandleTypeDef *hrtc)
{
 8002a08:	b580      	push	{r7, lr}
 8002a0a:	b092      	sub	sp, #72	@ 0x48
 8002a0c:	af00      	add	r7, sp, #0
 8002a0e:	6078      	str	r0, [r7, #4]
	RTC_TimeTypeDef gTime;
	RTC_AlarmTypeDef sAlarm = {0};
 8002a10:	f107 0308 	add.w	r3, r7, #8
 8002a14:	222c      	movs	r2, #44	@ 0x2c
 8002a16:	2100      	movs	r1, #0
 8002a18:	4618      	mov	r0, r3
 8002a1a:	f013 fab5 	bl	8015f88 <memset>

	HAL_RTC_GetTime(hrtc, &gTime, RTC_FORMAT_BIN);
 8002a1e:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8002a22:	2200      	movs	r2, #0
 8002a24:	4619      	mov	r1, r3
 8002a26:	6878      	ldr	r0, [r7, #4]
 8002a28:	f00e fa83 	bl	8010f32 <HAL_RTC_GetTime>

	sys.Low_th = Low_TH_Array[gTime.Hours];
 8002a2c:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 8002a30:	461a      	mov	r2, r3
 8002a32:	4b17      	ldr	r3, [pc, #92]	@ (8002a90 <HAL_RTC_AlarmAEventCallback+0x88>)
 8002a34:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 8002a38:	4b16      	ldr	r3, [pc, #88]	@ (8002a94 <HAL_RTC_AlarmAEventCallback+0x8c>)
 8002a3a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002a3e:	85da      	strh	r2, [r3, #46]	@ 0x2e
	sys.High_th = High_TH_Array[gTime.Hours];
 8002a40:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 8002a44:	461a      	mov	r2, r3
 8002a46:	4b14      	ldr	r3, [pc, #80]	@ (8002a98 <HAL_RTC_AlarmAEventCallback+0x90>)
 8002a48:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 8002a4c:	4b11      	ldr	r3, [pc, #68]	@ (8002a94 <HAL_RTC_AlarmAEventCallback+0x8c>)
 8002a4e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002a52:	861a      	strh	r2, [r3, #48]	@ 0x30

	sAlarm.AlarmTime.Hours = 0;
 8002a54:	2300      	movs	r3, #0
 8002a56:	723b      	strb	r3, [r7, #8]
    sAlarm.AlarmTime.Minutes = 0;
 8002a58:	2300      	movs	r3, #0
 8002a5a:	727b      	strb	r3, [r7, #9]
    sAlarm.AlarmTime.Seconds = 0;
 8002a5c:	2300      	movs	r3, #0
 8002a5e:	72bb      	strb	r3, [r7, #10]
    sAlarm.AlarmMask = RTC_ALARMMASK_DATEWEEKDAY | RTC_ALARMMASK_HOURS | RTC_ALARMMASK_SECONDS;
 8002a60:	4b0e      	ldr	r3, [pc, #56]	@ (8002a9c <HAL_RTC_AlarmAEventCallback+0x94>)
 8002a62:	61fb      	str	r3, [r7, #28]
    sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 8002a64:	2300      	movs	r3, #0
 8002a66:	627b      	str	r3, [r7, #36]	@ 0x24
    sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 8002a68:	2300      	movs	r3, #0
 8002a6a:	62bb      	str	r3, [r7, #40]	@ 0x28
    sAlarm.AlarmDateWeekDay = 1;
 8002a6c:	2301      	movs	r3, #1
 8002a6e:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
    sAlarm.Alarm = RTC_ALARM_A;
 8002a72:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002a76:	633b      	str	r3, [r7, #48]	@ 0x30
    
    HAL_RTC_SetAlarm_IT(hrtc, &sAlarm, RTC_FORMAT_BIN);
 8002a78:	f107 0308 	add.w	r3, r7, #8
 8002a7c:	2200      	movs	r2, #0
 8002a7e:	4619      	mov	r1, r3
 8002a80:	6878      	ldr	r0, [r7, #4]
 8002a82:	f00e fb39 	bl	80110f8 <HAL_RTC_SetAlarm_IT>
}
 8002a86:	bf00      	nop
 8002a88:	3748      	adds	r7, #72	@ 0x48
 8002a8a:	46bd      	mov	sp, r7
 8002a8c:	bd80      	pop	{r7, pc}
 8002a8e:	bf00      	nop
 8002a90:	200051b8 	.word	0x200051b8
 8002a94:	20000840 	.word	0x20000840
 8002a98:	20005188 	.word	0x20005188
 8002a9c:	80800080 	.word	0x80800080

08002aa0 <extflash_cs_set>:
uint32_t	exflashNumSectors = 0;
uint8_t		exflashInitDone = 0;


void extflash_cs_set()
{
 8002aa0:	b580      	push	{r7, lr}
 8002aa2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(FLASH_nCS_GPIO_Port, FLASH_nCS_Pin, GPIO_PIN_RESET);
 8002aa4:	2200      	movs	r2, #0
 8002aa6:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8002aaa:	4802      	ldr	r0, [pc, #8]	@ (8002ab4 <extflash_cs_set+0x14>)
 8002aac:	f00b fb9a 	bl	800e1e4 <HAL_GPIO_WritePin>
}
 8002ab0:	bf00      	nop
 8002ab2:	bd80      	pop	{r7, pc}
 8002ab4:	48000400 	.word	0x48000400

08002ab8 <extflash_cs_reset>:

void extflash_cs_reset()
{
 8002ab8:	b580      	push	{r7, lr}
 8002aba:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(FLASH_nCS_GPIO_Port, FLASH_nCS_Pin, GPIO_PIN_SET);
 8002abc:	2201      	movs	r2, #1
 8002abe:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8002ac2:	4802      	ldr	r0, [pc, #8]	@ (8002acc <extflash_cs_reset+0x14>)
 8002ac4:	f00b fb8e 	bl	800e1e4 <HAL_GPIO_WritePin>
}
 8002ac8:	bf00      	nop
 8002aca:	bd80      	pop	{r7, pc}
 8002acc:	48000400 	.word	0x48000400

08002ad0 <extflash_wp_reset>:
{
	HAL_GPIO_WritePin(FLASH_nWP_GPIO_Port, FLASH_nWP_Pin, GPIO_PIN_RESET);
}

void extflash_wp_reset()
{
 8002ad0:	b580      	push	{r7, lr}
 8002ad2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(FLASH_nWP_GPIO_Port, FLASH_nWP_Pin, GPIO_PIN_SET);
 8002ad4:	2201      	movs	r2, #1
 8002ad6:	2140      	movs	r1, #64	@ 0x40
 8002ad8:	4802      	ldr	r0, [pc, #8]	@ (8002ae4 <extflash_wp_reset+0x14>)
 8002ada:	f00b fb83 	bl	800e1e4 <HAL_GPIO_WritePin>
}
 8002ade:	bf00      	nop
 8002ae0:	bd80      	pop	{r7, pc}
 8002ae2:	bf00      	nop
 8002ae4:	48000800 	.word	0x48000800

08002ae8 <extflash_hard_reset>:


void extflash_hard_reset()
{
 8002ae8:	b580      	push	{r7, lr}
 8002aea:	af00      	add	r7, sp, #0

	HAL_GPIO_WritePin(FLASH_nRESET_GPIO_Port, FLASH_nRESET_Pin, GPIO_PIN_RESET);
 8002aec:	2200      	movs	r2, #0
 8002aee:	2180      	movs	r1, #128	@ 0x80
 8002af0:	4806      	ldr	r0, [pc, #24]	@ (8002b0c <extflash_hard_reset+0x24>)
 8002af2:	f00b fb77 	bl	800e1e4 <HAL_GPIO_WritePin>

	HAL_Delay(50);
 8002af6:	2032      	movs	r0, #50	@ 0x32
 8002af8:	f008 f98a 	bl	800ae10 <HAL_Delay>

	HAL_GPIO_WritePin(FLASH_nRESET_GPIO_Port, FLASH_nRESET_Pin, GPIO_PIN_SET);
 8002afc:	2201      	movs	r2, #1
 8002afe:	2180      	movs	r1, #128	@ 0x80
 8002b00:	4802      	ldr	r0, [pc, #8]	@ (8002b0c <extflash_hard_reset+0x24>)
 8002b02:	f00b fb6f 	bl	800e1e4 <HAL_GPIO_WritePin>

	return;
 8002b06:	bf00      	nop
}
 8002b08:	bd80      	pop	{r7, pc}
 8002b0a:	bf00      	nop
 8002b0c:	48000800 	.word	0x48000800

08002b10 <extflash_send_cmd>:


int32_t extflash_send_cmd(extflash_cmd_t command)
{
 8002b10:	b580      	push	{r7, lr}
 8002b12:	b088      	sub	sp, #32
 8002b14:	af00      	add	r7, sp, #0
 8002b16:	6078      	str	r0, [r7, #4]

	uint8_t addr_bytes[4] = {0};
 8002b18:	2300      	movs	r3, #0
 8002b1a:	61bb      	str	r3, [r7, #24]
	uint8_t dummy_bytes[8] = {0};
 8002b1c:	f107 0310 	add.w	r3, r7, #16
 8002b20:	2200      	movs	r2, #0
 8002b22:	601a      	str	r2, [r3, #0]
 8002b24:	605a      	str	r2, [r3, #4]
	uint8_t dummy = 0;
 8002b26:	2300      	movs	r3, #0
 8002b28:	77fb      	strb	r3, [r7, #31]
	uint8_t cmd_data = command->cmd;
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	781b      	ldrb	r3, [r3, #0]
 8002b2e:	73fb      	strb	r3, [r7, #15]

	if(command->address_en != 0)
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	785b      	ldrb	r3, [r3, #1]
 8002b34:	2b00      	cmp	r3, #0
 8002b36:	d00d      	beq.n	8002b54 <extflash_send_cmd+0x44>
	{
		addr_bytes[0] = (command->address >> 16) & 0xFF;
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	689b      	ldr	r3, [r3, #8]
 8002b3c:	0c1b      	lsrs	r3, r3, #16
 8002b3e:	b2db      	uxtb	r3, r3
 8002b40:	763b      	strb	r3, [r7, #24]
		addr_bytes[1] = (command->address >> 8) & 0xFF;
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	689b      	ldr	r3, [r3, #8]
 8002b46:	0a1b      	lsrs	r3, r3, #8
 8002b48:	b2db      	uxtb	r3, r3
 8002b4a:	767b      	strb	r3, [r7, #25]
		addr_bytes[2] = (command->address) & 0xFF;
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	689b      	ldr	r3, [r3, #8]
 8002b50:	b2db      	uxtb	r3, r3
 8002b52:	76bb      	strb	r3, [r7, #26]
	}

	extflash_cs_set();
 8002b54:	f7ff ffa4 	bl	8002aa0 <extflash_cs_set>

	HAL_SPI_Transmit(EXTFLASH_SPI, &cmd_data, 1, FLASH_SPI_DEF_TIMEOUT);
 8002b58:	f107 010f 	add.w	r1, r7, #15
 8002b5c:	2364      	movs	r3, #100	@ 0x64
 8002b5e:	2201      	movs	r2, #1
 8002b60:	4823      	ldr	r0, [pc, #140]	@ (8002bf0 <extflash_send_cmd+0xe0>)
 8002b62:	f00e fdc8 	bl	80116f6 <HAL_SPI_Transmit>

	if(command->address_en != 0)
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	785b      	ldrb	r3, [r3, #1]
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	d006      	beq.n	8002b7c <extflash_send_cmd+0x6c>
	{
		HAL_SPI_Transmit(EXTFLASH_SPI, addr_bytes, 3, FLASH_SPI_DEF_TIMEOUT);
 8002b6e:	f107 0118 	add.w	r1, r7, #24
 8002b72:	2364      	movs	r3, #100	@ 0x64
 8002b74:	2203      	movs	r2, #3
 8002b76:	481e      	ldr	r0, [pc, #120]	@ (8002bf0 <extflash_send_cmd+0xe0>)
 8002b78:	f00e fdbd 	bl	80116f6 <HAL_SPI_Transmit>
	}

	if(command->dummy_nb > 0)
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	88db      	ldrh	r3, [r3, #6]
 8002b80:	2b00      	cmp	r3, #0
 8002b82:	d00e      	beq.n	8002ba2 <extflash_send_cmd+0x92>
	{
		dummy = command->dummy_nb > sizeof(dummy_bytes) ? sizeof(dummy_bytes) : command->dummy_nb;
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	88db      	ldrh	r3, [r3, #6]
 8002b88:	2b08      	cmp	r3, #8
 8002b8a:	bf28      	it	cs
 8002b8c:	2308      	movcs	r3, #8
 8002b8e:	b29b      	uxth	r3, r3
 8002b90:	77fb      	strb	r3, [r7, #31]
		HAL_SPI_Transmit(EXTFLASH_SPI, dummy_bytes, dummy, FLASH_SPI_DEF_TIMEOUT);
 8002b92:	7ffb      	ldrb	r3, [r7, #31]
 8002b94:	b29a      	uxth	r2, r3
 8002b96:	f107 0110 	add.w	r1, r7, #16
 8002b9a:	2364      	movs	r3, #100	@ 0x64
 8002b9c:	4814      	ldr	r0, [pc, #80]	@ (8002bf0 <extflash_send_cmd+0xe0>)
 8002b9e:	f00e fdaa 	bl	80116f6 <HAL_SPI_Transmit>
	}

	if(command->tx_nb > 0 && command->tx_data != NULL)
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	885b      	ldrh	r3, [r3, #2]
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	d00b      	beq.n	8002bc2 <extflash_send_cmd+0xb2>
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	68db      	ldr	r3, [r3, #12]
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	d007      	beq.n	8002bc2 <extflash_send_cmd+0xb2>
	{
		HAL_SPI_Transmit(EXTFLASH_SPI, command->tx_data, command->tx_nb, FLASH_SPI_DEF_TIMEOUT);
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	68d9      	ldr	r1, [r3, #12]
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	885a      	ldrh	r2, [r3, #2]
 8002bba:	2364      	movs	r3, #100	@ 0x64
 8002bbc:	480c      	ldr	r0, [pc, #48]	@ (8002bf0 <extflash_send_cmd+0xe0>)
 8002bbe:	f00e fd9a 	bl	80116f6 <HAL_SPI_Transmit>
	}

	if(command->rx_nb > 0 && command->rx_data != NULL)
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	889b      	ldrh	r3, [r3, #4]
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	d00b      	beq.n	8002be2 <extflash_send_cmd+0xd2>
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	691b      	ldr	r3, [r3, #16]
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	d007      	beq.n	8002be2 <extflash_send_cmd+0xd2>
	{
		HAL_SPI_Receive(EXTFLASH_SPI, command->rx_data, command->rx_nb, FLASH_SPI_DEF_TIMEOUT);
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	6919      	ldr	r1, [r3, #16]
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	889a      	ldrh	r2, [r3, #4]
 8002bda:	2364      	movs	r3, #100	@ 0x64
 8002bdc:	4804      	ldr	r0, [pc, #16]	@ (8002bf0 <extflash_send_cmd+0xe0>)
 8002bde:	f00e ff00 	bl	80119e2 <HAL_SPI_Receive>
	}

	extflash_cs_reset();
 8002be2:	f7ff ff69 	bl	8002ab8 <extflash_cs_reset>

	return 0;
 8002be6:	2300      	movs	r3, #0
}
 8002be8:	4618      	mov	r0, r3
 8002bea:	3720      	adds	r7, #32
 8002bec:	46bd      	mov	sp, r7
 8002bee:	bd80      	pop	{r7, pc}
 8002bf0:	200004a4 	.word	0x200004a4

08002bf4 <extflash_read_extended_read_reg>:

}


int extflash_read_extended_read_reg(uint8_t *ereg)
{
 8002bf4:	b580      	push	{r7, lr}
 8002bf6:	b088      	sub	sp, #32
 8002bf8:	af00      	add	r7, sp, #0
 8002bfa:	6078      	str	r0, [r7, #4]

	extflash_cmd command = {0};
 8002bfc:	f107 030c 	add.w	r3, r7, #12
 8002c00:	2200      	movs	r2, #0
 8002c02:	601a      	str	r2, [r3, #0]
 8002c04:	605a      	str	r2, [r3, #4]
 8002c06:	609a      	str	r2, [r3, #8]
 8002c08:	60da      	str	r2, [r3, #12]
 8002c0a:	611a      	str	r2, [r3, #16]
	command.cmd = EFLASH_CMD_RDERP;
 8002c0c:	2381      	movs	r3, #129	@ 0x81
 8002c0e:	733b      	strb	r3, [r7, #12]
	command.address_en = 0;
 8002c10:	2300      	movs	r3, #0
 8002c12:	737b      	strb	r3, [r7, #13]
	command.address = 0;
 8002c14:	2300      	movs	r3, #0
 8002c16:	617b      	str	r3, [r7, #20]
	command.rx_nb = 1;
 8002c18:	2301      	movs	r3, #1
 8002c1a:	823b      	strh	r3, [r7, #16]
	command.rx_data = ereg;
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	61fb      	str	r3, [r7, #28]

	return extflash_send_cmd(&command);
 8002c20:	f107 030c 	add.w	r3, r7, #12
 8002c24:	4618      	mov	r0, r3
 8002c26:	f7ff ff73 	bl	8002b10 <extflash_send_cmd>
 8002c2a:	4603      	mov	r3, r0
}
 8002c2c:	4618      	mov	r0, r3
 8002c2e:	3720      	adds	r7, #32
 8002c30:	46bd      	mov	sp, r7
 8002c32:	bd80      	pop	{r7, pc}

08002c34 <extflash_clear_extended_read_reg>:


int extflash_clear_extended_read_reg()
{
 8002c34:	b580      	push	{r7, lr}
 8002c36:	b086      	sub	sp, #24
 8002c38:	af00      	add	r7, sp, #0
	extflash_cmd command = {0};
 8002c3a:	1d3b      	adds	r3, r7, #4
 8002c3c:	2200      	movs	r2, #0
 8002c3e:	601a      	str	r2, [r3, #0]
 8002c40:	605a      	str	r2, [r3, #4]
 8002c42:	609a      	str	r2, [r3, #8]
 8002c44:	60da      	str	r2, [r3, #12]
 8002c46:	611a      	str	r2, [r3, #16]
	command.cmd = EFLASH_CMD_CLERP;
 8002c48:	2382      	movs	r3, #130	@ 0x82
 8002c4a:	713b      	strb	r3, [r7, #4]

	return extflash_send_cmd(&command);
 8002c4c:	1d3b      	adds	r3, r7, #4
 8002c4e:	4618      	mov	r0, r3
 8002c50:	f7ff ff5e 	bl	8002b10 <extflash_send_cmd>
 8002c54:	4603      	mov	r3, r0
}
 8002c56:	4618      	mov	r0, r3
 8002c58:	3718      	adds	r7, #24
 8002c5a:	46bd      	mov	sp, r7
 8002c5c:	bd80      	pop	{r7, pc}

08002c5e <extflash_set_write_protection>:
	return extflash_send_cmd(&command);

}

int extflash_set_write_protection(uint8_t enable)
{
 8002c5e:	b580      	push	{r7, lr}
 8002c60:	b088      	sub	sp, #32
 8002c62:	af00      	add	r7, sp, #0
 8002c64:	4603      	mov	r3, r0
 8002c66:	71fb      	strb	r3, [r7, #7]

	extflash_cmd command = {0};
 8002c68:	f107 030c 	add.w	r3, r7, #12
 8002c6c:	2200      	movs	r2, #0
 8002c6e:	601a      	str	r2, [r3, #0]
 8002c70:	605a      	str	r2, [r3, #4]
 8002c72:	609a      	str	r2, [r3, #8]
 8002c74:	60da      	str	r2, [r3, #12]
 8002c76:	611a      	str	r2, [r3, #16]
	command.cmd = enable==0 ? EFLASH_CMD_WREN : EFLASH_CMD_WRDI;
 8002c78:	79fb      	ldrb	r3, [r7, #7]
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	d101      	bne.n	8002c82 <extflash_set_write_protection+0x24>
 8002c7e:	2306      	movs	r3, #6
 8002c80:	e000      	b.n	8002c84 <extflash_set_write_protection+0x26>
 8002c82:	2304      	movs	r3, #4
 8002c84:	733b      	strb	r3, [r7, #12]

	return extflash_send_cmd(&command);
 8002c86:	f107 030c 	add.w	r3, r7, #12
 8002c8a:	4618      	mov	r0, r3
 8002c8c:	f7ff ff40 	bl	8002b10 <extflash_send_cmd>
 8002c90:	4603      	mov	r3, r0
}
 8002c92:	4618      	mov	r0, r3
 8002c94:	3720      	adds	r7, #32
 8002c96:	46bd      	mov	sp, r7
 8002c98:	bd80      	pop	{r7, pc}

08002c9a <extflash_read_sfdp>:

int extflash_read_sfdp(uint32_t regaddr, uint8_t *reg, uint8_t nregs)
{
 8002c9a:	b580      	push	{r7, lr}
 8002c9c:	b08a      	sub	sp, #40	@ 0x28
 8002c9e:	af00      	add	r7, sp, #0
 8002ca0:	60f8      	str	r0, [r7, #12]
 8002ca2:	60b9      	str	r1, [r7, #8]
 8002ca4:	4613      	mov	r3, r2
 8002ca6:	71fb      	strb	r3, [r7, #7]

	extflash_cmd command = {0};
 8002ca8:	f107 0314 	add.w	r3, r7, #20
 8002cac:	2200      	movs	r2, #0
 8002cae:	601a      	str	r2, [r3, #0]
 8002cb0:	605a      	str	r2, [r3, #4]
 8002cb2:	609a      	str	r2, [r3, #8]
 8002cb4:	60da      	str	r2, [r3, #12]
 8002cb6:	611a      	str	r2, [r3, #16]
	command.cmd = EFLASH_CMD_RDSFDP;
 8002cb8:	235a      	movs	r3, #90	@ 0x5a
 8002cba:	753b      	strb	r3, [r7, #20]
	command.address_en = 1;
 8002cbc:	2301      	movs	r3, #1
 8002cbe:	757b      	strb	r3, [r7, #21]
	command.address = regaddr;
 8002cc0:	68fb      	ldr	r3, [r7, #12]
 8002cc2:	61fb      	str	r3, [r7, #28]
	command.dummy_nb = 1;
 8002cc4:	2301      	movs	r3, #1
 8002cc6:	837b      	strh	r3, [r7, #26]
	command.rx_nb = nregs;
 8002cc8:	79fb      	ldrb	r3, [r7, #7]
 8002cca:	b29b      	uxth	r3, r3
 8002ccc:	833b      	strh	r3, [r7, #24]
	command.rx_data = reg;
 8002cce:	68bb      	ldr	r3, [r7, #8]
 8002cd0:	627b      	str	r3, [r7, #36]	@ 0x24

	return extflash_send_cmd(&command);
 8002cd2:	f107 0314 	add.w	r3, r7, #20
 8002cd6:	4618      	mov	r0, r3
 8002cd8:	f7ff ff1a 	bl	8002b10 <extflash_send_cmd>
 8002cdc:	4603      	mov	r3, r0

}
 8002cde:	4618      	mov	r0, r3
 8002ce0:	3728      	adds	r7, #40	@ 0x28
 8002ce2:	46bd      	mov	sp, r7
 8002ce4:	bd80      	pop	{r7, pc}

08002ce6 <extflash_raw_read>:

int extflash_raw_read(uint32_t address, uint8_t *pBuffer, uint16_t nbytes)
{
 8002ce6:	b580      	push	{r7, lr}
 8002ce8:	b08a      	sub	sp, #40	@ 0x28
 8002cea:	af00      	add	r7, sp, #0
 8002cec:	60f8      	str	r0, [r7, #12]
 8002cee:	60b9      	str	r1, [r7, #8]
 8002cf0:	4613      	mov	r3, r2
 8002cf2:	80fb      	strh	r3, [r7, #6]

	extflash_cmd command = {0};
 8002cf4:	f107 0314 	add.w	r3, r7, #20
 8002cf8:	2200      	movs	r2, #0
 8002cfa:	601a      	str	r2, [r3, #0]
 8002cfc:	605a      	str	r2, [r3, #4]
 8002cfe:	609a      	str	r2, [r3, #8]
 8002d00:	60da      	str	r2, [r3, #12]
 8002d02:	611a      	str	r2, [r3, #16]
	command.cmd = EFLASH_CMD_FRD;
 8002d04:	230b      	movs	r3, #11
 8002d06:	753b      	strb	r3, [r7, #20]
	command.address_en = 1;
 8002d08:	2301      	movs	r3, #1
 8002d0a:	757b      	strb	r3, [r7, #21]
	command.address = address;
 8002d0c:	68fb      	ldr	r3, [r7, #12]
 8002d0e:	61fb      	str	r3, [r7, #28]
	command.dummy_nb = 1;
 8002d10:	2301      	movs	r3, #1
 8002d12:	837b      	strh	r3, [r7, #26]
	command.rx_nb = nbytes;
 8002d14:	88fb      	ldrh	r3, [r7, #6]
 8002d16:	833b      	strh	r3, [r7, #24]
	command.rx_data = pBuffer;
 8002d18:	68bb      	ldr	r3, [r7, #8]
 8002d1a:	627b      	str	r3, [r7, #36]	@ 0x24

	return extflash_send_cmd(&command);
 8002d1c:	f107 0314 	add.w	r3, r7, #20
 8002d20:	4618      	mov	r0, r3
 8002d22:	f7ff fef5 	bl	8002b10 <extflash_send_cmd>
 8002d26:	4603      	mov	r3, r0

}
 8002d28:	4618      	mov	r0, r3
 8002d2a:	3728      	adds	r7, #40	@ 0x28
 8002d2c:	46bd      	mov	sp, r7
 8002d2e:	bd80      	pop	{r7, pc}

08002d30 <extflash_raw_erase>:

int extflash_raw_erase(uint32_t address)
{
 8002d30:	b580      	push	{r7, lr}
 8002d32:	b088      	sub	sp, #32
 8002d34:	af00      	add	r7, sp, #0
 8002d36:	6078      	str	r0, [r7, #4]

	extflash_cmd command = {0};
 8002d38:	f107 030c 	add.w	r3, r7, #12
 8002d3c:	2200      	movs	r2, #0
 8002d3e:	601a      	str	r2, [r3, #0]
 8002d40:	605a      	str	r2, [r3, #4]
 8002d42:	609a      	str	r2, [r3, #8]
 8002d44:	60da      	str	r2, [r3, #12]
 8002d46:	611a      	str	r2, [r3, #16]
	command.cmd = EFLASH_CMD_SER;
 8002d48:	23d7      	movs	r3, #215	@ 0xd7
 8002d4a:	733b      	strb	r3, [r7, #12]
	command.address_en = 1;
 8002d4c:	2301      	movs	r3, #1
 8002d4e:	737b      	strb	r3, [r7, #13]
	command.address = address;
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	617b      	str	r3, [r7, #20]

	return extflash_send_cmd(&command);
 8002d54:	f107 030c 	add.w	r3, r7, #12
 8002d58:	4618      	mov	r0, r3
 8002d5a:	f7ff fed9 	bl	8002b10 <extflash_send_cmd>
 8002d5e:	4603      	mov	r3, r0
}
 8002d60:	4618      	mov	r0, r3
 8002d62:	3720      	adds	r7, #32
 8002d64:	46bd      	mov	sp, r7
 8002d66:	bd80      	pop	{r7, pc}

08002d68 <extflash_raw_page_write>:

int extflash_raw_page_write(uint32_t address, const uint8_t *pBuffer)
{
 8002d68:	b580      	push	{r7, lr}
 8002d6a:	b088      	sub	sp, #32
 8002d6c:	af00      	add	r7, sp, #0
 8002d6e:	6078      	str	r0, [r7, #4]
 8002d70:	6039      	str	r1, [r7, #0]

	extflash_cmd command = {0};
 8002d72:	f107 030c 	add.w	r3, r7, #12
 8002d76:	2200      	movs	r2, #0
 8002d78:	601a      	str	r2, [r3, #0]
 8002d7a:	605a      	str	r2, [r3, #4]
 8002d7c:	609a      	str	r2, [r3, #8]
 8002d7e:	60da      	str	r2, [r3, #12]
 8002d80:	611a      	str	r2, [r3, #16]
	command.cmd = EFLASH_CMD_PP;
 8002d82:	2302      	movs	r3, #2
 8002d84:	733b      	strb	r3, [r7, #12]
	command.address_en = 1;
 8002d86:	2301      	movs	r3, #1
 8002d88:	737b      	strb	r3, [r7, #13]
	command.address = address;
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	617b      	str	r3, [r7, #20]
	command.tx_nb = EFLASH_DEF_PAGE_SIZE;
 8002d8e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002d92:	81fb      	strh	r3, [r7, #14]
	command.tx_data = pBuffer;
 8002d94:	683b      	ldr	r3, [r7, #0]
 8002d96:	61bb      	str	r3, [r7, #24]

	return extflash_send_cmd(&command);
 8002d98:	f107 030c 	add.w	r3, r7, #12
 8002d9c:	4618      	mov	r0, r3
 8002d9e:	f7ff feb7 	bl	8002b10 <extflash_send_cmd>
 8002da2:	4603      	mov	r3, r0
}
 8002da4:	4618      	mov	r0, r3
 8002da6:	3720      	adds	r7, #32
 8002da8:	46bd      	mov	sp, r7
 8002daa:	bd80      	pop	{r7, pc}

08002dac <extflash_sector_read>:


int extflash_sector_read(uint32_t sector, uint32_t nsectors, uint8_t *pBuffer)
{
 8002dac:	b580      	push	{r7, lr}
 8002dae:	b08a      	sub	sp, #40	@ 0x28
 8002db0:	af00      	add	r7, sp, #0
 8002db2:	60f8      	str	r0, [r7, #12]
 8002db4:	60b9      	str	r1, [r7, #8]
 8002db6:	607a      	str	r2, [r7, #4]
	int result = 0;
 8002db8:	2300      	movs	r3, #0
 8002dba:	61fb      	str	r3, [r7, #28]
	uint8_t ereg = 0;
 8002dbc:	2300      	movs	r3, #0
 8002dbe:	75fb      	strb	r3, [r7, #23]
	uint32_t tmo = HAL_GetTick();
 8002dc0:	f008 f81a 	bl	800adf8 <HAL_GetTick>
 8002dc4:	61b8      	str	r0, [r7, #24]
	uint8_t *wPtr = pBuffer;
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	627b      	str	r3, [r7, #36]	@ 0x24
	uint32_t address = sector * EFLASH_DEF_SECTOR_SIZE;
 8002dca:	68fb      	ldr	r3, [r7, #12]
 8002dcc:	031b      	lsls	r3, r3, #12
 8002dce:	623b      	str	r3, [r7, #32]

	if(extflash_read_extended_read_reg(&ereg) < 0)return -1;
 8002dd0:	f107 0317 	add.w	r3, r7, #23
 8002dd4:	4618      	mov	r0, r3
 8002dd6:	f7ff ff0d 	bl	8002bf4 <extflash_read_extended_read_reg>
 8002dda:	4603      	mov	r3, r0
 8002ddc:	2b00      	cmp	r3, #0
 8002dde:	da10      	bge.n	8002e02 <extflash_sector_read+0x56>
 8002de0:	f04f 33ff 	mov.w	r3, #4294967295
 8002de4:	e037      	b.n	8002e56 <extflash_sector_read+0xaa>

	while((ereg & ESTATUS_WIP) && (HAL_GetTick() - tmo < FLASH_WRITE_ERASE_TIMEOUT))
	{
		//Scrittura-erase in corso
		if(extflash_read_extended_read_reg(&ereg) < 0)return -1;
 8002de6:	f107 0317 	add.w	r3, r7, #23
 8002dea:	4618      	mov	r0, r3
 8002dec:	f7ff ff02 	bl	8002bf4 <extflash_read_extended_read_reg>
 8002df0:	4603      	mov	r3, r0
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	da02      	bge.n	8002dfc <extflash_sector_read+0x50>
 8002df6:	f04f 33ff 	mov.w	r3, #4294967295
 8002dfa:	e02c      	b.n	8002e56 <extflash_sector_read+0xaa>
		HAL_Delay(FLASH_STATUS_POLL_INTERVAL);
 8002dfc:	2001      	movs	r0, #1
 8002dfe:	f008 f807 	bl	800ae10 <HAL_Delay>
	while((ereg & ESTATUS_WIP) && (HAL_GetTick() - tmo < FLASH_WRITE_ERASE_TIMEOUT))
 8002e02:	7dfb      	ldrb	r3, [r7, #23]
 8002e04:	f003 0301 	and.w	r3, r3, #1
 8002e08:	2b00      	cmp	r3, #0
 8002e0a:	d020      	beq.n	8002e4e <extflash_sector_read+0xa2>
 8002e0c:	f007 fff4 	bl	800adf8 <HAL_GetTick>
 8002e10:	4602      	mov	r2, r0
 8002e12:	69bb      	ldr	r3, [r7, #24]
 8002e14:	1ad3      	subs	r3, r2, r3
 8002e16:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8002e1a:	d3e4      	bcc.n	8002de6 <extflash_sector_read+0x3a>
	}

	while(nsectors > 0)
 8002e1c:	e017      	b.n	8002e4e <extflash_sector_read+0xa2>
	{
		result = extflash_raw_read(address, wPtr, EFLASH_DEF_SECTOR_SIZE);
 8002e1e:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8002e22:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002e24:	6a38      	ldr	r0, [r7, #32]
 8002e26:	f7ff ff5e 	bl	8002ce6 <extflash_raw_read>
 8002e2a:	61f8      	str	r0, [r7, #28]
		if(result < 0)return -1;
 8002e2c:	69fb      	ldr	r3, [r7, #28]
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	da02      	bge.n	8002e38 <extflash_sector_read+0x8c>
 8002e32:	f04f 33ff 	mov.w	r3, #4294967295
 8002e36:	e00e      	b.n	8002e56 <extflash_sector_read+0xaa>

		address += EFLASH_DEF_SECTOR_SIZE;
 8002e38:	6a3b      	ldr	r3, [r7, #32]
 8002e3a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002e3e:	623b      	str	r3, [r7, #32]
		wPtr += EFLASH_DEF_SECTOR_SIZE;
 8002e40:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e42:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002e46:	627b      	str	r3, [r7, #36]	@ 0x24
		nsectors--;
 8002e48:	68bb      	ldr	r3, [r7, #8]
 8002e4a:	3b01      	subs	r3, #1
 8002e4c:	60bb      	str	r3, [r7, #8]
	while(nsectors > 0)
 8002e4e:	68bb      	ldr	r3, [r7, #8]
 8002e50:	2b00      	cmp	r3, #0
 8002e52:	d1e4      	bne.n	8002e1e <extflash_sector_read+0x72>
	}

	return 0;
 8002e54:	2300      	movs	r3, #0

}
 8002e56:	4618      	mov	r0, r3
 8002e58:	3728      	adds	r7, #40	@ 0x28
 8002e5a:	46bd      	mov	sp, r7
 8002e5c:	bd80      	pop	{r7, pc}

08002e5e <extflash_wait_for_wop>:

int extflash_wait_for_wop(uint32_t timeout)
{
 8002e5e:	b580      	push	{r7, lr}
 8002e60:	b084      	sub	sp, #16
 8002e62:	af00      	add	r7, sp, #0
 8002e64:	6078      	str	r0, [r7, #4]
	uint8_t ereg = 0;
 8002e66:	2300      	movs	r3, #0
 8002e68:	72fb      	strb	r3, [r7, #11]
	uint32_t tmo = HAL_GetTick();
 8002e6a:	f007 ffc5 	bl	800adf8 <HAL_GetTick>
 8002e6e:	60f8      	str	r0, [r7, #12]

	if(extflash_read_extended_read_reg(&ereg) < 0)return -1;
 8002e70:	f107 030b 	add.w	r3, r7, #11
 8002e74:	4618      	mov	r0, r3
 8002e76:	f7ff febd 	bl	8002bf4 <extflash_read_extended_read_reg>
 8002e7a:	4603      	mov	r3, r0
 8002e7c:	2b00      	cmp	r3, #0
 8002e7e:	da10      	bge.n	8002ea2 <extflash_wait_for_wop+0x44>
 8002e80:	f04f 33ff 	mov.w	r3, #4294967295
 8002e84:	e023      	b.n	8002ece <extflash_wait_for_wop+0x70>

	while((ereg & ESTATUS_WIP) && (HAL_GetTick() - tmo < timeout))
	{
		//Scrittura-erase in corso
		if(extflash_read_extended_read_reg(&ereg) < 0)return -1;
 8002e86:	f107 030b 	add.w	r3, r7, #11
 8002e8a:	4618      	mov	r0, r3
 8002e8c:	f7ff feb2 	bl	8002bf4 <extflash_read_extended_read_reg>
 8002e90:	4603      	mov	r3, r0
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	da02      	bge.n	8002e9c <extflash_wait_for_wop+0x3e>
 8002e96:	f04f 33ff 	mov.w	r3, #4294967295
 8002e9a:	e018      	b.n	8002ece <extflash_wait_for_wop+0x70>
		HAL_Delay(FLASH_STATUS_POLL_INTERVAL);
 8002e9c:	2001      	movs	r0, #1
 8002e9e:	f007 ffb7 	bl	800ae10 <HAL_Delay>
	while((ereg & ESTATUS_WIP) && (HAL_GetTick() - tmo < timeout))
 8002ea2:	7afb      	ldrb	r3, [r7, #11]
 8002ea4:	f003 0301 	and.w	r3, r3, #1
 8002ea8:	2b00      	cmp	r3, #0
 8002eaa:	d007      	beq.n	8002ebc <extflash_wait_for_wop+0x5e>
 8002eac:	f007 ffa4 	bl	800adf8 <HAL_GetTick>
 8002eb0:	4602      	mov	r2, r0
 8002eb2:	68fb      	ldr	r3, [r7, #12]
 8002eb4:	1ad3      	subs	r3, r2, r3
 8002eb6:	687a      	ldr	r2, [r7, #4]
 8002eb8:	429a      	cmp	r2, r3
 8002eba:	d8e4      	bhi.n	8002e86 <extflash_wait_for_wop+0x28>
	}

	if(ereg & (ESTATUS_PROT_ERR | ESTATUS_P_ERR | ESTATUS_E_ERR))
 8002ebc:	7afb      	ldrb	r3, [r7, #11]
 8002ebe:	f003 030e 	and.w	r3, r3, #14
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	d002      	beq.n	8002ecc <extflash_wait_for_wop+0x6e>
	{
		return -2; //Erase o write error
 8002ec6:	f06f 0301 	mvn.w	r3, #1
 8002eca:	e000      	b.n	8002ece <extflash_wait_for_wop+0x70>
	}

	return 0;
 8002ecc:	2300      	movs	r3, #0
}
 8002ece:	4618      	mov	r0, r3
 8002ed0:	3710      	adds	r7, #16
 8002ed2:	46bd      	mov	sp, r7
 8002ed4:	bd80      	pop	{r7, pc}

08002ed6 <extflash_sector_write>:

int extflash_sector_write(uint32_t sector, uint32_t nsectors, const uint8_t *pBuffer)
{
 8002ed6:	b580      	push	{r7, lr}
 8002ed8:	b088      	sub	sp, #32
 8002eda:	af00      	add	r7, sp, #0
 8002edc:	60f8      	str	r0, [r7, #12]
 8002ede:	60b9      	str	r1, [r7, #8]
 8002ee0:	607a      	str	r2, [r7, #4]
	int result = 0;
 8002ee2:	2300      	movs	r3, #0
 8002ee4:	613b      	str	r3, [r7, #16]
	const uint8_t *wPtr = pBuffer;
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	61fb      	str	r3, [r7, #28]
	uint32_t address = sector * EFLASH_DEF_SECTOR_SIZE;
 8002eea:	68fb      	ldr	r3, [r7, #12]
 8002eec:	031b      	lsls	r3, r3, #12
 8002eee:	61bb      	str	r3, [r7, #24]

	extflash_clear_extended_read_reg();
 8002ef0:	f7ff fea0 	bl	8002c34 <extflash_clear_extended_read_reg>

	while(nsectors > 0)
 8002ef4:	e04e      	b.n	8002f94 <extflash_sector_write+0xbe>
	{
		//Controllo operazioni in corso
		result = extflash_wait_for_wop(FLASH_WRITE_ERASE_TIMEOUT);
 8002ef6:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8002efa:	f7ff ffb0 	bl	8002e5e <extflash_wait_for_wop>
 8002efe:	6138      	str	r0, [r7, #16]
		if(result < 0)break;
 8002f00:	693b      	ldr	r3, [r7, #16]
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	db4a      	blt.n	8002f9c <extflash_sector_write+0xc6>

		//Erase del settore
		result = extflash_set_write_protection(0);
 8002f06:	2000      	movs	r0, #0
 8002f08:	f7ff fea9 	bl	8002c5e <extflash_set_write_protection>
 8002f0c:	6138      	str	r0, [r7, #16]
		if(result < 0)break;
 8002f0e:	693b      	ldr	r3, [r7, #16]
 8002f10:	2b00      	cmp	r3, #0
 8002f12:	db45      	blt.n	8002fa0 <extflash_sector_write+0xca>
		result = extflash_raw_erase(address);
 8002f14:	69b8      	ldr	r0, [r7, #24]
 8002f16:	f7ff ff0b 	bl	8002d30 <extflash_raw_erase>
 8002f1a:	6138      	str	r0, [r7, #16]
		if(result < 0)break;
 8002f1c:	693b      	ldr	r3, [r7, #16]
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	db40      	blt.n	8002fa4 <extflash_sector_write+0xce>

		//Attesa ERASE
		result = extflash_wait_for_wop(FLASH_WRITE_ERASE_TIMEOUT);
 8002f22:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8002f26:	f7ff ff9a 	bl	8002e5e <extflash_wait_for_wop>
 8002f2a:	6138      	str	r0, [r7, #16]
		if(result < 0)break;
 8002f2c:	693b      	ldr	r3, [r7, #16]
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	db3a      	blt.n	8002fa8 <extflash_sector_write+0xd2>

		for(int i=0; i < EFLASH_PAGES_PER_SECTOR; i++)
 8002f32:	2300      	movs	r3, #0
 8002f34:	617b      	str	r3, [r7, #20]
 8002f36:	e021      	b.n	8002f7c <extflash_sector_write+0xa6>
		{
			result = extflash_set_write_protection(0);
 8002f38:	2000      	movs	r0, #0
 8002f3a:	f7ff fe90 	bl	8002c5e <extflash_set_write_protection>
 8002f3e:	6138      	str	r0, [r7, #16]
			if(result < 0)break;
 8002f40:	693b      	ldr	r3, [r7, #16]
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	db1e      	blt.n	8002f84 <extflash_sector_write+0xae>
			result = extflash_raw_page_write(address, wPtr);
 8002f46:	69f9      	ldr	r1, [r7, #28]
 8002f48:	69b8      	ldr	r0, [r7, #24]
 8002f4a:	f7ff ff0d 	bl	8002d68 <extflash_raw_page_write>
 8002f4e:	6138      	str	r0, [r7, #16]
			if(result < 0)break;
 8002f50:	693b      	ldr	r3, [r7, #16]
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	db18      	blt.n	8002f88 <extflash_sector_write+0xb2>

			address += EFLASH_DEF_PAGE_SIZE;
 8002f56:	69bb      	ldr	r3, [r7, #24]
 8002f58:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 8002f5c:	61bb      	str	r3, [r7, #24]
			wPtr += EFLASH_DEF_PAGE_SIZE;
 8002f5e:	69fb      	ldr	r3, [r7, #28]
 8002f60:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 8002f64:	61fb      	str	r3, [r7, #28]
			//Attesa write
			result = extflash_wait_for_wop(FLASH_WRITE_ERASE_TIMEOUT);
 8002f66:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8002f6a:	f7ff ff78 	bl	8002e5e <extflash_wait_for_wop>
 8002f6e:	6138      	str	r0, [r7, #16]
			if(result < 0)break;
 8002f70:	693b      	ldr	r3, [r7, #16]
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	db0a      	blt.n	8002f8c <extflash_sector_write+0xb6>
		for(int i=0; i < EFLASH_PAGES_PER_SECTOR; i++)
 8002f76:	697b      	ldr	r3, [r7, #20]
 8002f78:	3301      	adds	r3, #1
 8002f7a:	617b      	str	r3, [r7, #20]
 8002f7c:	697b      	ldr	r3, [r7, #20]
 8002f7e:	2b0f      	cmp	r3, #15
 8002f80:	ddda      	ble.n	8002f38 <extflash_sector_write+0x62>
 8002f82:	e004      	b.n	8002f8e <extflash_sector_write+0xb8>
			if(result < 0)break;
 8002f84:	bf00      	nop
 8002f86:	e002      	b.n	8002f8e <extflash_sector_write+0xb8>
			if(result < 0)break;
 8002f88:	bf00      	nop
 8002f8a:	e000      	b.n	8002f8e <extflash_sector_write+0xb8>
			if(result < 0)break;
 8002f8c:	bf00      	nop
		}

		nsectors--;
 8002f8e:	68bb      	ldr	r3, [r7, #8]
 8002f90:	3b01      	subs	r3, #1
 8002f92:	60bb      	str	r3, [r7, #8]
	while(nsectors > 0)
 8002f94:	68bb      	ldr	r3, [r7, #8]
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	d1ad      	bne.n	8002ef6 <extflash_sector_write+0x20>
 8002f9a:	e006      	b.n	8002faa <extflash_sector_write+0xd4>
		if(result < 0)break;
 8002f9c:	bf00      	nop
 8002f9e:	e004      	b.n	8002faa <extflash_sector_write+0xd4>
		if(result < 0)break;
 8002fa0:	bf00      	nop
 8002fa2:	e002      	b.n	8002faa <extflash_sector_write+0xd4>
		if(result < 0)break;
 8002fa4:	bf00      	nop
 8002fa6:	e000      	b.n	8002faa <extflash_sector_write+0xd4>
		if(result < 0)break;
 8002fa8:	bf00      	nop
	}

	extflash_set_write_protection(1);
 8002faa:	2001      	movs	r0, #1
 8002fac:	f7ff fe57 	bl	8002c5e <extflash_set_write_protection>

	return 0;
 8002fb0:	2300      	movs	r3, #0

}
 8002fb2:	4618      	mov	r0, r3
 8002fb4:	3720      	adds	r7, #32
 8002fb6:	46bd      	mov	sp, r7
 8002fb8:	bd80      	pop	{r7, pc}

08002fba <extflash_get_sector_size>:


unsigned int extflash_get_sector_size()
{
 8002fba:	b480      	push	{r7}
 8002fbc:	af00      	add	r7, sp, #0
	return EFLASH_DEF_SECTOR_SIZE;
 8002fbe:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
}
 8002fc2:	4618      	mov	r0, r3
 8002fc4:	46bd      	mov	sp, r7
 8002fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fca:	4770      	bx	lr

08002fcc <extflash_get_sector_count>:

unsigned int extflash_get_sector_count()
{
 8002fcc:	b480      	push	{r7}
 8002fce:	af00      	add	r7, sp, #0
	return exflashNumSectors;
 8002fd0:	4b03      	ldr	r3, [pc, #12]	@ (8002fe0 <extflash_get_sector_count+0x14>)
 8002fd2:	681b      	ldr	r3, [r3, #0]
}
 8002fd4:	4618      	mov	r0, r3
 8002fd6:	46bd      	mov	sp, r7
 8002fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fdc:	4770      	bx	lr
 8002fde:	bf00      	nop
 8002fe0:	20000310 	.word	0x20000310

08002fe4 <extflash_is_initialized>:
{
	return exflashSize;
}

int extflash_is_initialized()
{
 8002fe4:	b480      	push	{r7}
 8002fe6:	af00      	add	r7, sp, #0
	return exflashInitDone;
 8002fe8:	4b03      	ldr	r3, [pc, #12]	@ (8002ff8 <extflash_is_initialized+0x14>)
 8002fea:	781b      	ldrb	r3, [r3, #0]
}
 8002fec:	4618      	mov	r0, r3
 8002fee:	46bd      	mov	sp, r7
 8002ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ff4:	4770      	bx	lr
 8002ff6:	bf00      	nop
 8002ff8:	20000314 	.word	0x20000314

08002ffc <extflash_init>:

int extflash_init()
{
 8002ffc:	b580      	push	{r7, lr}
 8002ffe:	b088      	sub	sp, #32
 8003000:	af00      	add	r7, sp, #0
	uint8_t manufacturer_id[2] = {0};
 8003002:	2300      	movs	r3, #0
 8003004:	83bb      	strh	r3, [r7, #28]
	extflash_cmd command = {0};
 8003006:	f107 0308 	add.w	r3, r7, #8
 800300a:	2200      	movs	r2, #0
 800300c:	601a      	str	r2, [r3, #0]
 800300e:	605a      	str	r2, [r3, #4]
 8003010:	609a      	str	r2, [r3, #8]
 8003012:	60da      	str	r2, [r3, #12]
 8003014:	611a      	str	r2, [r3, #16]
	uint8_t density[4] = {0};
 8003016:	2300      	movs	r3, #0
 8003018:	607b      	str	r3, [r7, #4]

	exflashInitDone = 0;
 800301a:	4b26      	ldr	r3, [pc, #152]	@ (80030b4 <extflash_init+0xb8>)
 800301c:	2200      	movs	r2, #0
 800301e:	701a      	strb	r2, [r3, #0]
	exflashNumSectors = 0;
 8003020:	4b25      	ldr	r3, [pc, #148]	@ (80030b8 <extflash_init+0xbc>)
 8003022:	2200      	movs	r2, #0
 8003024:	601a      	str	r2, [r3, #0]

	extflash_hard_reset();
 8003026:	f7ff fd5f 	bl	8002ae8 <extflash_hard_reset>
	extflash_cs_reset();
 800302a:	f7ff fd45 	bl	8002ab8 <extflash_cs_reset>
	extflash_wp_reset();
 800302e:	f7ff fd4f 	bl	8002ad0 <extflash_wp_reset>

	command.cmd = EFLASH_CMD_RDMDID;
 8003032:	2390      	movs	r3, #144	@ 0x90
 8003034:	723b      	strb	r3, [r7, #8]
	command.address_en = 1;
 8003036:	2301      	movs	r3, #1
 8003038:	727b      	strb	r3, [r7, #9]
	command.address = 0;
 800303a:	2300      	movs	r3, #0
 800303c:	613b      	str	r3, [r7, #16]
	command.rx_nb = 2;
 800303e:	2302      	movs	r3, #2
 8003040:	81bb      	strh	r3, [r7, #12]
	command.rx_data = manufacturer_id;
 8003042:	f107 031c 	add.w	r3, r7, #28
 8003046:	61bb      	str	r3, [r7, #24]

	extflash_send_cmd(&command);
 8003048:	f107 0308 	add.w	r3, r7, #8
 800304c:	4618      	mov	r0, r3
 800304e:	f7ff fd5f 	bl	8002b10 <extflash_send_cmd>

	if(manufacturer_id[0] != EFLASH_DEF_MANIFACTURER || manufacturer_id[1] != EFLASH_DEF_DEVID)
 8003052:	7f3b      	ldrb	r3, [r7, #28]
 8003054:	2b9d      	cmp	r3, #157	@ 0x9d
 8003056:	d102      	bne.n	800305e <extflash_init+0x62>
 8003058:	7f7b      	ldrb	r3, [r7, #29]
 800305a:	2b17      	cmp	r3, #23
 800305c:	d002      	beq.n	8003064 <extflash_init+0x68>
	{
		return -1;
 800305e:	f04f 33ff 	mov.w	r3, #4294967295
 8003062:	e022      	b.n	80030aa <extflash_init+0xae>
	}

	memset((void *)&command, 0, sizeof(command));
 8003064:	f107 0308 	add.w	r3, r7, #8
 8003068:	2214      	movs	r2, #20
 800306a:	2100      	movs	r1, #0
 800306c:	4618      	mov	r0, r3
 800306e:	f012 ff8b 	bl	8015f88 <memset>

	extflash_read_sfdp(SFDP_FLASH_DENSITY, density, sizeof(density));
 8003072:	1d3b      	adds	r3, r7, #4
 8003074:	2204      	movs	r2, #4
 8003076:	4619      	mov	r1, r3
 8003078:	2034      	movs	r0, #52	@ 0x34
 800307a:	f7ff fe0e 	bl	8002c9a <extflash_read_sfdp>

	memcpy(&exflashSize, density, sizeof(uint32_t));
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	4a0e      	ldr	r2, [pc, #56]	@ (80030bc <extflash_init+0xc0>)
 8003082:	6013      	str	r3, [r2, #0]

	exflashSize += 1;
 8003084:	4b0d      	ldr	r3, [pc, #52]	@ (80030bc <extflash_init+0xc0>)
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	3301      	adds	r3, #1
 800308a:	4a0c      	ldr	r2, [pc, #48]	@ (80030bc <extflash_init+0xc0>)
 800308c:	6013      	str	r3, [r2, #0]
	exflashSize >>= 3;
 800308e:	4b0b      	ldr	r3, [pc, #44]	@ (80030bc <extflash_init+0xc0>)
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	08db      	lsrs	r3, r3, #3
 8003094:	4a09      	ldr	r2, [pc, #36]	@ (80030bc <extflash_init+0xc0>)
 8003096:	6013      	str	r3, [r2, #0]

	exflashNumSectors = exflashSize / EFLASH_DEF_SECTOR_SIZE;
 8003098:	4b08      	ldr	r3, [pc, #32]	@ (80030bc <extflash_init+0xc0>)
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	0b1b      	lsrs	r3, r3, #12
 800309e:	4a06      	ldr	r2, [pc, #24]	@ (80030b8 <extflash_init+0xbc>)
 80030a0:	6013      	str	r3, [r2, #0]

	exflashInitDone = 1;
 80030a2:	4b04      	ldr	r3, [pc, #16]	@ (80030b4 <extflash_init+0xb8>)
 80030a4:	2201      	movs	r2, #1
 80030a6:	701a      	strb	r2, [r3, #0]

	return 0;
 80030a8:	2300      	movs	r3, #0

}
 80030aa:	4618      	mov	r0, r3
 80030ac:	3720      	adds	r7, #32
 80030ae:	46bd      	mov	sp, r7
 80030b0:	bd80      	pop	{r7, pc}
 80030b2:	bf00      	nop
 80030b4:	20000314 	.word	0x20000314
 80030b8:	20000310 	.word	0x20000310
 80030bc:	2000030c 	.word	0x2000030c

080030c0 <System_Init>:
#include "lsm6dsv16x_rw.h"
#include "DS18B20.h"

/*-----INIZiALIZZAZIONE SISTEMA-----*/
void System_Init(void)
{
 80030c0:	b580      	push	{r7, lr}
 80030c2:	af00      	add	r7, sp, #0
	acc.write_reg = acc_write;
 80030c4:	4b22      	ldr	r3, [pc, #136]	@ (8003150 <System_Init+0x90>)
 80030c6:	4a23      	ldr	r2, [pc, #140]	@ (8003154 <System_Init+0x94>)
 80030c8:	601a      	str	r2, [r3, #0]
	acc.read_reg = acc_read;
 80030ca:	4b21      	ldr	r3, [pc, #132]	@ (8003150 <System_Init+0x90>)
 80030cc:	4a22      	ldr	r2, [pc, #136]	@ (8003158 <System_Init+0x98>)
 80030ce:	605a      	str	r2, [r3, #4]
	acc.handle = &hspi3;
 80030d0:	4b1f      	ldr	r3, [pc, #124]	@ (8003150 <System_Init+0x90>)
 80030d2:	4a22      	ldr	r2, [pc, #136]	@ (800315c <System_Init+0x9c>)
 80030d4:	60da      	str	r2, [r3, #12]

	LED_Init();	
 80030d6:	f000 fa6b 	bl	80035b0 <LED_Init>
	LED_Start(GRN_LED, FAST, HIGH);
 80030da:	2205      	movs	r2, #5
 80030dc:	2100      	movs	r1, #0
 80030de:	2008      	movs	r0, #8
 80030e0:	f000 fa86 	bl	80035f0 <LED_Start>

	BC_Init();
 80030e4:	f7ff f9d0 	bl	8002488 <BC_Init>
	INA3221_Init();
 80030e8:	f7fd ff76 	bl	8000fd8 <INA3221_Init>
	FatFS_Init();
 80030ec:	f000 f840 	bl	8003170 <FatFS_Init>
	Config_Init();
 80030f0:	f000 f99c 	bl	800342c <Config_Init>
	Acc_Init(&acc, config.samp_freq);
 80030f4:	4b1a      	ldr	r3, [pc, #104]	@ (8003160 <System_Init+0xa0>)
 80030f6:	885b      	ldrh	r3, [r3, #2]
 80030f8:	4619      	mov	r1, r3
 80030fa:	4815      	ldr	r0, [pc, #84]	@ (8003150 <System_Init+0x90>)
 80030fc:	f000 f8d4 	bl	80032a8 <Acc_Init>
	LED_Start(ORG_LED, FAST, HALF);
 8003100:	2206      	movs	r2, #6
 8003102:	2100      	movs	r1, #0
 8003104:	2000      	movs	r0, #0
 8003106:	f000 fa73 	bl	80035f0 <LED_Start>
	while(SIM_Init() != HAL_OK);
 800310a:	bf00      	nop
 800310c:	f7fe f9d8 	bl	80014c0 <SIM_Init>
 8003110:	4603      	mov	r3, r0
 8003112:	2b00      	cmp	r3, #0
 8003114:	d1fa      	bne.n	800310c <System_Init+0x4c>
	LED_Stop(ORG_LED);
 8003116:	2000      	movs	r0, #0
 8003118:	f000 fb36 	bl	8003788 <LED_Stop>
	RTC_Init();
 800311c:	f7fe f810 	bl	8001140 <RTC_Init>
	Temperature = Read_Temperature();
 8003120:	f7fd ff22 	bl	8000f68 <Read_Temperature>
 8003124:	4603      	mov	r3, r0
 8003126:	461a      	mov	r2, r3
 8003128:	4b0e      	ldr	r3, [pc, #56]	@ (8003164 <System_Init+0xa4>)
 800312a:	801a      	strh	r2, [r3, #0]

	HAL_UARTEx_ReceiveToIdle_DMA(SIM_UART, sim_rx_buffer, SIM_RXBUFFER_SIZE);
 800312c:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 8003130:	490d      	ldr	r1, [pc, #52]	@ (8003168 <System_Init+0xa8>)
 8003132:	480e      	ldr	r0, [pc, #56]	@ (800316c <System_Init+0xac>)
 8003134:	f012 fdea 	bl	8015d0c <HAL_UARTEx_ReceiveToIdle_DMA>

	HAL_Delay(9000);
 8003138:	f242 3028 	movw	r0, #9000	@ 0x2328
 800313c:	f007 fe68 	bl	800ae10 <HAL_Delay>
	LED_Start(GRN_LED, MEDIUM, HALF);
 8003140:	2206      	movs	r2, #6
 8003142:	2101      	movs	r1, #1
 8003144:	2008      	movs	r0, #8
 8003146:	f000 fa53 	bl	80035f0 <LED_Start>
}
 800314a:	bf00      	nop
 800314c:	bd80      	pop	{r7, pc}
 800314e:	bf00      	nop
 8003150:	200051e8 	.word	0x200051e8
 8003154:	08003fdf 	.word	0x08003fdf
 8003158:	08004037 	.word	0x08004037
 800315c:	20000508 	.word	0x20000508
 8003160:	200019ec 	.word	0x200019ec
 8003164:	20004424 	.word	0x20004424
 8003168:	200051f8 	.word	0x200051f8
 800316c:	20000724 	.word	0x20000724

08003170 <FatFS_Init>:

/*-----INIZiALIZZAZIONE MEMORIE-----*/
void FatFS_Init(void)
{
 8003170:	b580      	push	{r7, lr}
 8003172:	b086      	sub	sp, #24
 8003174:	af00      	add	r7, sp, #0
	FRESULT fRes = 0;
 8003176:	2300      	movs	r3, #0
 8003178:	75fb      	strb	r3, [r7, #23]
	MKFS_PARM mkfs_opt = {0};
 800317a:	1d3b      	adds	r3, r7, #4
 800317c:	2200      	movs	r2, #0
 800317e:	601a      	str	r2, [r3, #0]
 8003180:	605a      	str	r2, [r3, #4]
 8003182:	609a      	str	r2, [r3, #8]
 8003184:	60da      	str	r2, [r3, #12]

	do
	{
		sys.RAM_Mounted = 0;
 8003186:	4b41      	ldr	r3, [pc, #260]	@ (800328c <FatFS_Init+0x11c>)
 8003188:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800318c:	461a      	mov	r2, r3
 800318e:	f892 302c 	ldrb.w	r3, [r2, #44]	@ 0x2c
 8003192:	f023 0302 	bic.w	r3, r3, #2
 8003196:	f882 302c 	strb.w	r3, [r2, #44]	@ 0x2c
		
		mkfs_opt.fmt = FM_FAT;
 800319a:	2301      	movs	r3, #1
 800319c:	713b      	strb	r3, [r7, #4]
		mkfs_opt.au_size = 1024;
 800319e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80031a2:	613b      	str	r3, [r7, #16]
		mkfs_opt.n_fat = 1;
 80031a4:	2301      	movs	r3, #1
 80031a6:	717b      	strb	r3, [r7, #5]
		mkfs_opt.align = 1;
 80031a8:	2301      	movs	r3, #1
 80031aa:	60bb      	str	r3, [r7, #8]

		fRes = f_mkfs("/ram", &mkfs_opt, psram_fs.win, sizeof(psram_fs.win));
 80031ac:	1d39      	adds	r1, r7, #4
 80031ae:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80031b2:	4a37      	ldr	r2, [pc, #220]	@ (8003290 <FatFS_Init+0x120>)
 80031b4:	4837      	ldr	r0, [pc, #220]	@ (8003294 <FatFS_Init+0x124>)
 80031b6:	f007 f93d 	bl	800a434 <f_mkfs>
 80031ba:	4603      	mov	r3, r0
 80031bc:	75fb      	strb	r3, [r7, #23]
		if (fRes != FR_OK)
 80031be:	7dfb      	ldrb	r3, [r7, #23]
 80031c0:	2b00      	cmp	r3, #0
 80031c2:	d114      	bne.n	80031ee <FatFS_Init+0x7e>
		{
			break;
		}

		fRes = f_mount(&psram_fs, "/ram", 1);
 80031c4:	2201      	movs	r2, #1
 80031c6:	4933      	ldr	r1, [pc, #204]	@ (8003294 <FatFS_Init+0x124>)
 80031c8:	4833      	ldr	r0, [pc, #204]	@ (8003298 <FatFS_Init+0x128>)
 80031ca:	f006 fab1 	bl	8009730 <f_mount>
 80031ce:	4603      	mov	r3, r0
 80031d0:	75fb      	strb	r3, [r7, #23]

		if (fRes != FR_OK)
 80031d2:	7dfb      	ldrb	r3, [r7, #23]
 80031d4:	2b00      	cmp	r3, #0
 80031d6:	d10c      	bne.n	80031f2 <FatFS_Init+0x82>
		{
			break;
		}

		sys.RAM_Mounted = 1;
 80031d8:	4b2c      	ldr	r3, [pc, #176]	@ (800328c <FatFS_Init+0x11c>)
 80031da:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80031de:	461a      	mov	r2, r3
 80031e0:	f892 302c 	ldrb.w	r3, [r2, #44]	@ 0x2c
 80031e4:	f043 0302 	orr.w	r3, r3, #2
 80031e8:	f882 302c 	strb.w	r3, [r2, #44]	@ 0x2c

		break;
 80031ec:	e002      	b.n	80031f4 <FatFS_Init+0x84>
			break;
 80031ee:	bf00      	nop
 80031f0:	e000      	b.n	80031f4 <FatFS_Init+0x84>
			break;
 80031f2:	bf00      	nop
	} while (1);

	do
	{
		sys.FLASH_Mounted = 0;
 80031f4:	4b25      	ldr	r3, [pc, #148]	@ (800328c <FatFS_Init+0x11c>)
 80031f6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80031fa:	461a      	mov	r2, r3
 80031fc:	f892 302c 	ldrb.w	r3, [r2, #44]	@ 0x2c
 8003200:	f023 0304 	bic.w	r3, r3, #4
 8003204:	f882 302c 	strb.w	r3, [r2, #44]	@ 0x2c
		fRes = f_mount(&flash_fs, "/flash", 1);
 8003208:	2201      	movs	r2, #1
 800320a:	4924      	ldr	r1, [pc, #144]	@ (800329c <FatFS_Init+0x12c>)
 800320c:	4824      	ldr	r0, [pc, #144]	@ (80032a0 <FatFS_Init+0x130>)
 800320e:	f006 fa8f 	bl	8009730 <f_mount>
 8003212:	4603      	mov	r3, r0
 8003214:	75fb      	strb	r3, [r7, #23]

		if (fRes == FR_NO_FILESYSTEM)
 8003216:	7dfb      	ldrb	r3, [r7, #23]
 8003218:	2b0d      	cmp	r3, #13
 800321a:	d124      	bne.n	8003266 <FatFS_Init+0xf6>
		{
			memset((void *)&mkfs_opt, 0, sizeof(mkfs_opt));
 800321c:	1d3b      	adds	r3, r7, #4
 800321e:	2210      	movs	r2, #16
 8003220:	2100      	movs	r1, #0
 8003222:	4618      	mov	r0, r3
 8003224:	f012 feb0 	bl	8015f88 <memset>
			mkfs_opt.fmt = FM_FAT;
 8003228:	2301      	movs	r3, #1
 800322a:	713b      	strb	r3, [r7, #4]
			mkfs_opt.au_size = 4096;    
 800322c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003230:	613b      	str	r3, [r7, #16]
			mkfs_opt.n_fat = 1;
 8003232:	2301      	movs	r3, #1
 8003234:	717b      	strb	r3, [r7, #5]
			mkfs_opt.align = 1;
 8003236:	2301      	movs	r3, #1
 8003238:	60bb      	str	r3, [r7, #8]

			fRes = f_mkfs("/flash", &mkfs_opt, flash_fs.win, sizeof(flash_fs.win));
 800323a:	1d39      	adds	r1, r7, #4
 800323c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003240:	4a18      	ldr	r2, [pc, #96]	@ (80032a4 <FatFS_Init+0x134>)
 8003242:	4816      	ldr	r0, [pc, #88]	@ (800329c <FatFS_Init+0x12c>)
 8003244:	f007 f8f6 	bl	800a434 <f_mkfs>
 8003248:	4603      	mov	r3, r0
 800324a:	75fb      	strb	r3, [r7, #23]
			if (fRes != FR_OK)
 800324c:	7dfb      	ldrb	r3, [r7, #23]
 800324e:	2b00      	cmp	r3, #0
 8003250:	d114      	bne.n	800327c <FatFS_Init+0x10c>
			{
				break;
			}

			fRes = f_mount(&flash_fs, "/flash", 1);
 8003252:	2201      	movs	r2, #1
 8003254:	4911      	ldr	r1, [pc, #68]	@ (800329c <FatFS_Init+0x12c>)
 8003256:	4812      	ldr	r0, [pc, #72]	@ (80032a0 <FatFS_Init+0x130>)
 8003258:	f006 fa6a 	bl	8009730 <f_mount>
 800325c:	4603      	mov	r3, r0
 800325e:	75fb      	strb	r3, [r7, #23]
			if (fRes != FR_OK)
 8003260:	7dfb      	ldrb	r3, [r7, #23]
 8003262:	2b00      	cmp	r3, #0
 8003264:	d10c      	bne.n	8003280 <FatFS_Init+0x110>
			{
				break;
			}
		}

		sys.FLASH_Mounted = 1;
 8003266:	4b09      	ldr	r3, [pc, #36]	@ (800328c <FatFS_Init+0x11c>)
 8003268:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800326c:	461a      	mov	r2, r3
 800326e:	f892 302c 	ldrb.w	r3, [r2, #44]	@ 0x2c
 8003272:	f043 0304 	orr.w	r3, r3, #4
 8003276:	f882 302c 	strb.w	r3, [r2, #44]	@ 0x2c

		break;
 800327a:	e002      	b.n	8003282 <FatFS_Init+0x112>
				break;
 800327c:	bf00      	nop
 800327e:	e000      	b.n	8003282 <FatFS_Init+0x112>
				break;
 8003280:	bf00      	nop
	} while (1);


}
 8003282:	bf00      	nop
 8003284:	3718      	adds	r7, #24
 8003286:	46bd      	mov	sp, r7
 8003288:	bd80      	pop	{r7, pc}
 800328a:	bf00      	nop
 800328c:	20000840 	.word	0x20000840
 8003290:	20001b10 	.word	0x20001b10
 8003294:	080173d0 	.word	0x080173d0
 8003298:	20001adc 	.word	0x20001adc
 800329c:	080173d8 	.word	0x080173d8
 80032a0:	20002b10 	.word	0x20002b10
 80032a4:	20002b44 	.word	0x20002b44

080032a8 <Acc_Init>:

/*-----INIZiALIZZAZIONE ACCELEROMETRO-----*/
int Acc_Init(stmdev_ctx_t* acc, uint16_t fs)
{
 80032a8:	b580      	push	{r7, lr}
 80032aa:	b086      	sub	sp, #24
 80032ac:	af00      	add	r7, sp, #0
 80032ae:	6078      	str	r0, [r7, #4]
 80032b0:	460b      	mov	r3, r1
 80032b2:	807b      	strh	r3, [r7, #2]
	lsm6dsv16x_reset_t rst;
	lsm6dsv16x_pin_int_route_t pin_int = {0};
 80032b4:	f107 0310 	add.w	r3, r7, #16
 80032b8:	2100      	movs	r1, #0
 80032ba:	460a      	mov	r2, r1
 80032bc:	801a      	strh	r2, [r3, #0]
 80032be:	460a      	mov	r2, r1
 80032c0:	709a      	strb	r2, [r3, #2]
	uint8_t acc_whoamI = 0;
 80032c2:	2300      	movs	r3, #0
 80032c4:	73fb      	strb	r3, [r7, #15]
	uint8_t wmi_cnt = 0;
 80032c6:	2300      	movs	r3, #0
 80032c8:	75fb      	strb	r3, [r7, #23]

	pin_int.fifo_th = PROPERTY_ENABLE;
 80032ca:	7c3b      	ldrb	r3, [r7, #16]
 80032cc:	f043 0308 	orr.w	r3, r3, #8
 80032d0:	743b      	strb	r3, [r7, #16]


	lsm6dsv16x_device_id_get(acc, &acc_whoamI);
 80032d2:	f107 030f 	add.w	r3, r7, #15
 80032d6:	4619      	mov	r1, r3
 80032d8:	6878      	ldr	r0, [r7, #4]
 80032da:	f000 fb53 	bl	8003984 <lsm6dsv16x_device_id_get>
	if (acc_whoamI != LSM6DSV16X_ID)
 80032de:	7bfb      	ldrb	r3, [r7, #15]
 80032e0:	2b70      	cmp	r3, #112	@ 0x70
 80032e2:	d020      	beq.n	8003326 <Acc_Init+0x7e>
		while (acc_whoamI != LSM6DSV16X_ID)
 80032e4:	e01c      	b.n	8003320 <Acc_Init+0x78>
		{
			lsm6dsv16x_device_id_get(acc, &acc_whoamI);
 80032e6:	f107 030f 	add.w	r3, r7, #15
 80032ea:	4619      	mov	r1, r3
 80032ec:	6878      	ldr	r0, [r7, #4]
 80032ee:	f000 fb49 	bl	8003984 <lsm6dsv16x_device_id_get>
			wmi_cnt++;
 80032f2:	7dfb      	ldrb	r3, [r7, #23]
 80032f4:	3301      	adds	r3, #1
 80032f6:	75fb      	strb	r3, [r7, #23]
			if (wmi_cnt == 3)
 80032f8:	7dfb      	ldrb	r3, [r7, #23]
 80032fa:	2b03      	cmp	r3, #3
 80032fc:	d110      	bne.n	8003320 <Acc_Init+0x78>
			{
				sys.ACC_Present = 0;
 80032fe:	4b48      	ldr	r3, [pc, #288]	@ (8003420 <Acc_Init+0x178>)
 8003300:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003304:	461a      	mov	r2, r3
 8003306:	f892 302c 	ldrb.w	r3, [r2, #44]	@ 0x2c
 800330a:	f023 0301 	bic.w	r3, r3, #1
 800330e:	f882 302c 	strb.w	r3, [r2, #44]	@ 0x2c
				flags.ACC_Complete = 1;
 8003312:	4a44      	ldr	r2, [pc, #272]	@ (8003424 <Acc_Init+0x17c>)
 8003314:	7813      	ldrb	r3, [r2, #0]
 8003316:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800331a:	7013      	strb	r3, [r2, #0]
				return 0;
 800331c:	2300      	movs	r3, #0
 800331e:	e07b      	b.n	8003418 <Acc_Init+0x170>
		while (acc_whoamI != LSM6DSV16X_ID)
 8003320:	7bfb      	ldrb	r3, [r7, #15]
 8003322:	2b70      	cmp	r3, #112	@ 0x70
 8003324:	d1df      	bne.n	80032e6 <Acc_Init+0x3e>
			}
		}
	sys.ACC_Present = 1;
 8003326:	4b3e      	ldr	r3, [pc, #248]	@ (8003420 <Acc_Init+0x178>)
 8003328:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800332c:	461a      	mov	r2, r3
 800332e:	f892 302c 	ldrb.w	r3, [r2, #44]	@ 0x2c
 8003332:	f043 0301 	orr.w	r3, r3, #1
 8003336:	f882 302c 	strb.w	r3, [r2, #44]	@ 0x2c
	lsm6dsv16x_reset_set(acc, LSM6DSV16X_GLOBAL_RST);
 800333a:	2101      	movs	r1, #1
 800333c:	6878      	ldr	r0, [r7, #4]
 800333e:	f000 fa7b 	bl	8003838 <lsm6dsv16x_reset_set>
	do {
		lsm6dsv16x_reset_get(acc, &rst);
 8003342:	f107 0316 	add.w	r3, r7, #22
 8003346:	4619      	mov	r1, r3
 8003348:	6878      	ldr	r0, [r7, #4]
 800334a:	f000 fac5 	bl	80038d8 <lsm6dsv16x_reset_get>
		HAL_Delay(10);
 800334e:	200a      	movs	r0, #10
 8003350:	f007 fd5e 	bl	800ae10 <HAL_Delay>
	} while (rst != LSM6DSV16X_READY);
 8003354:	7dbb      	ldrb	r3, [r7, #22]
 8003356:	2b00      	cmp	r3, #0
 8003358:	d1f3      	bne.n	8003342 <Acc_Init+0x9a>

	lsm6dsv16x_block_data_update_set(acc, PROPERTY_ENABLE);
 800335a:	2101      	movs	r1, #1
 800335c:	6878      	ldr	r0, [r7, #4]
 800335e:	f000 fc0e 	bl	8003b7e <lsm6dsv16x_block_data_update_set>
	lsm6dsv16x_ui_i2c_i3c_mode_set(acc, LSM6DSV16X_I2C_I3C_DISABLE);
 8003362:	2101      	movs	r1, #1
 8003364:	6878      	ldr	r0, [r7, #4]
 8003366:	f000 fe14 	bl	8003f92 <lsm6dsv16x_ui_i2c_i3c_mode_set>
	lsm6dsv16x_xl_mode_set(acc, LSM6DSV16X_XL_HIGH_PERFORMANCE_MD);
 800336a:	2100      	movs	r1, #0
 800336c:	6878      	ldr	r0, [r7, #4]
 800336e:	f000 fb6b 	bl	8003a48 <lsm6dsv16x_xl_mode_set>
	lsm6dsv16x_gy_mode_set(acc, LSM6DSV16X_GY_HIGH_PERFORMANCE_MD);
 8003372:	2100      	movs	r1, #0
 8003374:	6878      	ldr	r0, [r7, #4]
 8003376:	f000 fbdc 	bl	8003b32 <lsm6dsv16x_gy_mode_set>
	lsm6dsv16x_fifo_xl_batch_set(acc, LSM6DSV16X_XL_BATCHED_AT_960Hz);
 800337a:	2109      	movs	r1, #9
 800337c:	6878      	ldr	r0, [r7, #4]
 800337e:	f000 fd96 	bl	8003eae <lsm6dsv16x_fifo_xl_batch_set>
	lsm6dsv16x_fifo_gy_batch_set(acc, LSM6DSV16X_GY_NOT_BATCHED);
 8003382:	2100      	movs	r1, #0
 8003384:	6878      	ldr	r0, [r7, #4]
 8003386:	f000 fdb8 	bl	8003efa <lsm6dsv16x_fifo_gy_batch_set>
	lsm6dsv16x_fifo_mode_set(acc, LSM6DSV16X_BYPASS_MODE);
 800338a:	2100      	movs	r1, #0
 800338c:	6878      	ldr	r0, [r7, #4]
 800338e:	f000 fdda 	bl	8003f46 <lsm6dsv16x_fifo_mode_set>
	lsm6dsv16x_xl_data_rate_set(acc, LSM6DSV16X_ODR_OFF);
 8003392:	2100      	movs	r1, #0
 8003394:	6878      	ldr	r0, [r7, #4]
 8003396:	f000 fb06 	bl	80039a6 <lsm6dsv16x_xl_data_rate_set>
	lsm6dsv16x_gy_data_rate_set(acc, LSM6DSV16X_ODR_OFF);
 800339a:	2100      	movs	r1, #0
 800339c:	6878      	ldr	r0, [r7, #4]
 800339e:	f000 fb79 	bl	8003a94 <lsm6dsv16x_gy_data_rate_set>
	if(fs == 1600)
 80033a2:	887b      	ldrh	r3, [r7, #2]
 80033a4:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 80033a8:	d104      	bne.n	80033b4 <Acc_Init+0x10c>
	{
		lsm6dsv16x_odr_trig_cfg_set(acc, 32);  //800SPS
 80033aa:	2120      	movs	r1, #32
 80033ac:	6878      	ldr	r0, [r7, #4]
 80033ae:	f000 fc0c 	bl	8003bca <lsm6dsv16x_odr_trig_cfg_set>
 80033b2:	e00b      	b.n	80033cc <Acc_Init+0x124>
	}
	else if(fs == 800)
 80033b4:	887b      	ldrh	r3, [r7, #2]
 80033b6:	f5b3 7f48 	cmp.w	r3, #800	@ 0x320
 80033ba:	d104      	bne.n	80033c6 <Acc_Init+0x11e>
	{
		lsm6dsv16x_odr_trig_cfg_set(acc, 16);  //800SPS
 80033bc:	2110      	movs	r1, #16
 80033be:	6878      	ldr	r0, [r7, #4]
 80033c0:	f000 fc03 	bl	8003bca <lsm6dsv16x_odr_trig_cfg_set>
 80033c4:	e002      	b.n	80033cc <Acc_Init+0x124>
	}
	else
	{
		return -1;
 80033c6:	f04f 33ff 	mov.w	r3, #4294967295
 80033ca:	e025      	b.n	8003418 <Acc_Init+0x170>
	}
	lsm6dsv16x_xl_mode_set(acc, LSM6DSV16X_XL_ODR_TRIGGERED_MD);
 80033cc:	2103      	movs	r1, #3
 80033ce:	6878      	ldr	r0, [r7, #4]
 80033d0:	f000 fb3a 	bl	8003a48 <lsm6dsv16x_xl_mode_set>
	lsm6dsv16x_gy_mode_set(acc, LSM6DSV16X_GY_ODR_TRIGGERED_MD);
 80033d4:	2103      	movs	r1, #3
 80033d6:	6878      	ldr	r0, [r7, #4]
 80033d8:	f000 fbab 	bl	8003b32 <lsm6dsv16x_gy_mode_set>
	lsm6dsv16x_den_polarity_set(acc, LSM6DSV16X_DEN_ACT_HIGH);
 80033dc:	2101      	movs	r1, #1
 80033de:	6878      	ldr	r0, [r7, #4]
 80033e0:	f000 fd1f 	bl	8003e22 <lsm6dsv16x_den_polarity_set>
	lsm6dsv16x_xl_data_rate_set(acc, LSM6DSV16X_ODR_AT_960Hz);
 80033e4:	2109      	movs	r1, #9
 80033e6:	6878      	ldr	r0, [r7, #4]
 80033e8:	f000 fadd 	bl	80039a6 <lsm6dsv16x_xl_data_rate_set>
	lsm6dsv16x_xl_full_scale_set(acc, LSM6DSV16X_2g);
 80033ec:	2100      	movs	r1, #0
 80033ee:	6878      	ldr	r0, [r7, #4]
 80033f0:	f000 fc3a 	bl	8003c68 <lsm6dsv16x_xl_full_scale_set>
	lsm6dsv16x_gy_full_scale_set(acc, LSM6DSV16X_2000dps);
 80033f4:	2104      	movs	r1, #4
 80033f6:	6878      	ldr	r0, [r7, #4]
 80033f8:	f000 fc10 	bl	8003c1c <lsm6dsv16x_gy_full_scale_set>
	lsm6dsv16x_fifo_watermark_set(acc, ACC_FIFO_WATERMARK);
 80033fc:	21c8      	movs	r1, #200	@ 0xc8
 80033fe:	6878      	ldr	r0, [r7, #4]
 8003400:	f000 fd35 	bl	8003e6e <lsm6dsv16x_fifo_watermark_set>
	lsm6dsv16x_pin_int1_route_set(acc, &pin_int);
 8003404:	f107 0310 	add.w	r3, r7, #16
 8003408:	4619      	mov	r1, r3
 800340a:	6878      	ldr	r0, [r7, #4]
 800340c:	f000 fc52 	bl	8003cb4 <lsm6dsv16x_pin_int1_route_set>

	__HAL_GPIO_EXTI_CLEAR_IT(ACC_INTERRUPT);
 8003410:	4b05      	ldr	r3, [pc, #20]	@ (8003428 <Acc_Init+0x180>)
 8003412:	2204      	movs	r2, #4
 8003414:	615a      	str	r2, [r3, #20]
	return 0;
 8003416:	2300      	movs	r3, #0
}
 8003418:	4618      	mov	r0, r3
 800341a:	3718      	adds	r7, #24
 800341c:	46bd      	mov	sp, r7
 800341e:	bd80      	pop	{r7, pc}
 8003420:	20000840 	.word	0x20000840
 8003424:	200019e8 	.word	0x200019e8
 8003428:	40010400 	.word	0x40010400

0800342c <Config_Init>:

/*-----INIZiALIZZAZIONE CONFIGURAZIONE-----*/
void Config_Init(void)
{
 800342c:	b580      	push	{r7, lr}
 800342e:	f5ad 5d81 	sub.w	sp, sp, #4128	@ 0x1020
 8003432:	b086      	sub	sp, #24
 8003434:	af00      	add	r7, sp, #0
    FIL config_file;
    UINT bytes_read;
    UINT bytes_written;

    if (f_open(&config_file, CONFIG_FILE, FA_READ) == FR_OK) 
 8003436:	f107 0318 	add.w	r3, r7, #24
 800343a:	3b0c      	subs	r3, #12
 800343c:	2201      	movs	r2, #1
 800343e:	4956      	ldr	r1, [pc, #344]	@ (8003598 <Config_Init+0x16c>)
 8003440:	4618      	mov	r0, r3
 8003442:	f006 f9bf 	bl	80097c4 <f_open>
 8003446:	4603      	mov	r3, r0
 8003448:	2b00      	cmp	r3, #0
 800344a:	d11f      	bne.n	800348c <Config_Init+0x60>
	{
        if (f_read(&config_file, &config, sizeof(config), &bytes_read) == FR_OK && bytes_read == sizeof(config))
 800344c:	f107 0318 	add.w	r3, r7, #24
 8003450:	3b10      	subs	r3, #16
 8003452:	f107 0018 	add.w	r0, r7, #24
 8003456:	380c      	subs	r0, #12
 8003458:	22f0      	movs	r2, #240	@ 0xf0
 800345a:	4950      	ldr	r1, [pc, #320]	@ (800359c <Config_Init+0x170>)
 800345c:	f006 fb4a 	bl	8009af4 <f_read>
 8003460:	4603      	mov	r3, r0
 8003462:	2b00      	cmp	r3, #0
 8003464:	d10c      	bne.n	8003480 <Config_Init+0x54>
 8003466:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 800346a:	f853 3c30 	ldr.w	r3, [r3, #-48]
 800346e:	2bf0      	cmp	r3, #240	@ 0xf0
 8003470:	d106      	bne.n	8003480 <Config_Init+0x54>
		{
			f_close(&config_file);
 8003472:	f107 0318 	add.w	r3, r7, #24
 8003476:	3b0c      	subs	r3, #12
 8003478:	4618      	mov	r0, r3
 800347a:	f006 fe97 	bl	800a1ac <f_close>
			return;
 800347e:	e085      	b.n	800358c <Config_Init+0x160>
        }
        f_close(&config_file);
 8003480:	f107 0318 	add.w	r3, r7, #24
 8003484:	3b0c      	subs	r3, #12
 8003486:	4618      	mov	r0, r3
 8003488:	f006 fe90 	bl	800a1ac <f_close>
    }

    config.device_id = 0;
 800348c:	4b43      	ldr	r3, [pc, #268]	@ (800359c <Config_Init+0x170>)
 800348e:	2200      	movs	r2, #0
 8003490:	701a      	strb	r2, [r3, #0]
	config.samp_freq = 800;
 8003492:	4b42      	ldr	r3, [pc, #264]	@ (800359c <Config_Init+0x170>)
 8003494:	f44f 7248 	mov.w	r2, #800	@ 0x320
 8003498:	805a      	strh	r2, [r3, #2]
	config.buffering_secs = 30;
 800349a:	4b40      	ldr	r3, [pc, #256]	@ (800359c <Config_Init+0x170>)
 800349c:	221e      	movs	r2, #30
 800349e:	711a      	strb	r2, [r3, #4]
	config.connection_timeout = 60000;
 80034a0:	4b3e      	ldr	r3, [pc, #248]	@ (800359c <Config_Init+0x170>)
 80034a2:	f64e 2260 	movw	r2, #60000	@ 0xea60
 80034a6:	609a      	str	r2, [r3, #8]
	config.hammer_th = 4096;
 80034a8:	4b3c      	ldr	r3, [pc, #240]	@ (800359c <Config_Init+0x170>)
 80034aa:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80034ae:	819a      	strh	r2, [r3, #12]
    for(int i = 0; i < 24; i++) 
 80034b0:	2300      	movs	r3, #0
 80034b2:	f507 5281 	add.w	r2, r7, #4128	@ 0x1020
 80034b6:	f102 0214 	add.w	r2, r2, #20
 80034ba:	6013      	str	r3, [r2, #0]
 80034bc:	e021      	b.n	8003502 <Config_Init+0xd6>
	{
        config.low_th[i] = 0;
 80034be:	4a37      	ldr	r2, [pc, #220]	@ (800359c <Config_Init+0x170>)
 80034c0:	f507 5381 	add.w	r3, r7, #4128	@ 0x1020
 80034c4:	f103 0314 	add.w	r3, r3, #20
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	3304      	adds	r3, #4
 80034cc:	005b      	lsls	r3, r3, #1
 80034ce:	4413      	add	r3, r2
 80034d0:	2200      	movs	r2, #0
 80034d2:	80da      	strh	r2, [r3, #6]
        config.high_th[i] = 4096;
 80034d4:	4a31      	ldr	r2, [pc, #196]	@ (800359c <Config_Init+0x170>)
 80034d6:	f507 5381 	add.w	r3, r7, #4128	@ 0x1020
 80034da:	f103 0314 	add.w	r3, r3, #20
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	331c      	adds	r3, #28
 80034e2:	005b      	lsls	r3, r3, #1
 80034e4:	4413      	add	r3, r2
 80034e6:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80034ea:	80da      	strh	r2, [r3, #6]
    for(int i = 0; i < 24; i++) 
 80034ec:	f507 5381 	add.w	r3, r7, #4128	@ 0x1020
 80034f0:	f103 0314 	add.w	r3, r3, #20
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	3301      	adds	r3, #1
 80034f8:	f507 5281 	add.w	r2, r7, #4128	@ 0x1020
 80034fc:	f102 0214 	add.w	r2, r2, #20
 8003500:	6013      	str	r3, [r2, #0]
 8003502:	f507 5381 	add.w	r3, r7, #4128	@ 0x1020
 8003506:	f103 0314 	add.w	r3, r3, #20
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	2b17      	cmp	r3, #23
 800350e:	ddd6      	ble.n	80034be <Config_Init+0x92>
    }
    strcpy(config.tcp_IPaddress, "0.0.0.0");
 8003510:	4a23      	ldr	r2, [pc, #140]	@ (80035a0 <Config_Init+0x174>)
 8003512:	4b24      	ldr	r3, [pc, #144]	@ (80035a4 <Config_Init+0x178>)
 8003514:	cb03      	ldmia	r3!, {r0, r1}
 8003516:	6010      	str	r0, [r2, #0]
 8003518:	6051      	str	r1, [r2, #4]
    strcpy(config.tcp_Port, "8080");
 800351a:	4b23      	ldr	r3, [pc, #140]	@ (80035a8 <Config_Init+0x17c>)
 800351c:	4a23      	ldr	r2, [pc, #140]	@ (80035ac <Config_Init+0x180>)
 800351e:	6810      	ldr	r0, [r2, #0]
 8003520:	6018      	str	r0, [r3, #0]
 8003522:	7912      	ldrb	r2, [r2, #4]
 8003524:	711a      	strb	r2, [r3, #4]

    if (f_open(&config_file, CONFIG_FILE, FA_WRITE | FA_CREATE_ALWAYS) != FR_OK)
 8003526:	f107 0318 	add.w	r3, r7, #24
 800352a:	3b0c      	subs	r3, #12
 800352c:	220a      	movs	r2, #10
 800352e:	491a      	ldr	r1, [pc, #104]	@ (8003598 <Config_Init+0x16c>)
 8003530:	4618      	mov	r0, r3
 8003532:	f006 f947 	bl	80097c4 <f_open>
 8003536:	4603      	mov	r3, r0
 8003538:	2b00      	cmp	r3, #0
 800353a:	d126      	bne.n	800358a <Config_Init+0x15e>
    {
        return;
    }

    if (f_write(&config_file, &config, sizeof(Config_Typedef), &bytes_written) != FR_OK || bytes_written != sizeof(Config_Typedef)) 
 800353c:	f107 0318 	add.w	r3, r7, #24
 8003540:	3b14      	subs	r3, #20
 8003542:	f107 0018 	add.w	r0, r7, #24
 8003546:	380c      	subs	r0, #12
 8003548:	22f0      	movs	r2, #240	@ 0xf0
 800354a:	4914      	ldr	r1, [pc, #80]	@ (800359c <Config_Init+0x170>)
 800354c:	f006 fc25 	bl	8009d9a <f_write>
 8003550:	4603      	mov	r3, r0
 8003552:	2b00      	cmp	r3, #0
 8003554:	d105      	bne.n	8003562 <Config_Init+0x136>
 8003556:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 800355a:	f853 3c34 	ldr.w	r3, [r3, #-52]
 800355e:	2bf0      	cmp	r3, #240	@ 0xf0
 8003560:	d006      	beq.n	8003570 <Config_Init+0x144>
	{
        f_close(&config_file);
 8003562:	f107 0318 	add.w	r3, r7, #24
 8003566:	3b0c      	subs	r3, #12
 8003568:	4618      	mov	r0, r3
 800356a:	f006 fe1f 	bl	800a1ac <f_close>
        return;
 800356e:	e00d      	b.n	800358c <Config_Init+0x160>
    }
    
    f_sync(&config_file);
 8003570:	f107 0318 	add.w	r3, r7, #24
 8003574:	3b0c      	subs	r3, #12
 8003576:	4618      	mov	r0, r3
 8003578:	f006 fd98 	bl	800a0ac <f_sync>
    f_close(&config_file);
 800357c:	f107 0318 	add.w	r3, r7, #24
 8003580:	3b0c      	subs	r3, #12
 8003582:	4618      	mov	r0, r3
 8003584:	f006 fe12 	bl	800a1ac <f_close>
 8003588:	e000      	b.n	800358c <Config_Init+0x160>
        return;
 800358a:	bf00      	nop
}
 800358c:	f507 5781 	add.w	r7, r7, #4128	@ 0x1020
 8003590:	3718      	adds	r7, #24
 8003592:	46bd      	mov	sp, r7
 8003594:	bd80      	pop	{r7, pc}
 8003596:	bf00      	nop
 8003598:	080173e0 	.word	0x080173e0
 800359c:	200019ec 	.word	0x200019ec
 80035a0:	20001a5a 	.word	0x20001a5a
 80035a4:	080173f4 	.word	0x080173f4
 80035a8:	20001a9a 	.word	0x20001a9a
 80035ac:	080173fc 	.word	0x080173fc

080035b0 <LED_Init>:
#include "peripherals.h"


/*-----INIZIALIZZAZIONE LEDs-----*/
void LED_Init(void)
{
 80035b0:	b580      	push	{r7, lr}
 80035b2:	af00      	add	r7, sp, #0
    LED_TIMER->Instance->CCR1 = 0;
 80035b4:	4b0c      	ldr	r3, [pc, #48]	@ (80035e8 <LED_Init+0x38>)
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	2200      	movs	r2, #0
 80035ba:	635a      	str	r2, [r3, #52]	@ 0x34
    LED_TIMER->Instance->CCR2 = 0;
 80035bc:	4b0a      	ldr	r3, [pc, #40]	@ (80035e8 <LED_Init+0x38>)
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	2200      	movs	r2, #0
 80035c2:	639a      	str	r2, [r3, #56]	@ 0x38
    LED_TIMER->Instance->CCR3 = 0;
 80035c4:	4b08      	ldr	r3, [pc, #32]	@ (80035e8 <LED_Init+0x38>)
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	2200      	movs	r2, #0
 80035ca:	63da      	str	r2, [r3, #60]	@ 0x3c
	HAL_TIM_PWM_Start(LED_TIMER, GRN_LED);
 80035cc:	2108      	movs	r1, #8
 80035ce:	4806      	ldr	r0, [pc, #24]	@ (80035e8 <LED_Init+0x38>)
 80035d0:	f00f fa62 	bl	8012a98 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(LED_TIMER, ORG_LED);
 80035d4:	2100      	movs	r1, #0
 80035d6:	4804      	ldr	r0, [pc, #16]	@ (80035e8 <LED_Init+0x38>)
 80035d8:	f00f fa5e 	bl	8012a98 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(LED_TIMER, RED_LED);
 80035dc:	2104      	movs	r1, #4
 80035de:	4802      	ldr	r0, [pc, #8]	@ (80035e8 <LED_Init+0x38>)
 80035e0:	f00f fa5a 	bl	8012a98 <HAL_TIM_PWM_Start>
}
 80035e4:	bf00      	nop
 80035e6:	bd80      	pop	{r7, pc}
 80035e8:	2000056c 	.word	0x2000056c
 80035ec:	00000000 	.word	0x00000000

080035f0 <LED_Start>:

/*------ACCENSIONE LED------*/
void LED_Start(uint32_t LED, uint8_t freq, uint8_t duty)
{
 80035f0:	b580      	push	{r7, lr}
 80035f2:	b086      	sub	sp, #24
 80035f4:	af00      	add	r7, sp, #0
 80035f6:	6078      	str	r0, [r7, #4]
 80035f8:	460b      	mov	r3, r1
 80035fa:	70fb      	strb	r3, [r7, #3]
 80035fc:	4613      	mov	r3, r2
 80035fe:	70bb      	strb	r3, [r7, #2]
    TIM_HandleTypeDef *htim = LED_TIMER;
 8003600:	4b5d      	ldr	r3, [pc, #372]	@ (8003778 <LED_Start+0x188>)
 8003602:	613b      	str	r3, [r7, #16]
	uint16_t pulse = 0;
 8003604:	2300      	movs	r3, #0
 8003606:	82fb      	strh	r3, [r7, #22]

    uint16_t prescaler = (uint16_t)(80000000 / 5000 - 1);
 8003608:	f643 637f 	movw	r3, #15999	@ 0x3e7f
 800360c:	81fb      	strh	r3, [r7, #14]
    uint16_t period = 0;
 800360e:	2300      	movs	r3, #0
 8003610:	82bb      	strh	r3, [r7, #20]

    switch(freq)
 8003612:	78fb      	ldrb	r3, [r7, #3]
 8003614:	2b03      	cmp	r3, #3
 8003616:	f200 80a4 	bhi.w	8003762 <LED_Start+0x172>
 800361a:	a201      	add	r2, pc, #4	@ (adr r2, 8003620 <LED_Start+0x30>)
 800361c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003620:	08003631 	.word	0x08003631
 8003624:	08003649 	.word	0x08003649
 8003628:	08003659 	.word	0x08003659
 800362c:	08003695 	.word	0x08003695
    {
        case FAST:  
            period = (uint16_t)((80000000 / prescaler / 4) - 1);
 8003630:	89fb      	ldrh	r3, [r7, #14]
 8003632:	4a52      	ldr	r2, [pc, #328]	@ (800377c <LED_Start+0x18c>)
 8003634:	fb92 f3f3 	sdiv	r3, r2, r3
 8003638:	2b00      	cmp	r3, #0
 800363a:	da00      	bge.n	800363e <LED_Start+0x4e>
 800363c:	3303      	adds	r3, #3
 800363e:	109b      	asrs	r3, r3, #2
 8003640:	b29b      	uxth	r3, r3
 8003642:	3b01      	subs	r3, #1
 8003644:	82bb      	strh	r3, [r7, #20]
            break;
 8003646:	e043      	b.n	80036d0 <LED_Start+0xe0>
        case MEDIUM:
            period = (uint16_t)((80000000 / prescaler / 1) - 1);
 8003648:	89fb      	ldrh	r3, [r7, #14]
 800364a:	4a4c      	ldr	r2, [pc, #304]	@ (800377c <LED_Start+0x18c>)
 800364c:	fb92 f3f3 	sdiv	r3, r2, r3
 8003650:	b29b      	uxth	r3, r3
 8003652:	3b01      	subs	r3, #1
 8003654:	82bb      	strh	r3, [r7, #20]
            break;
 8003656:	e03b      	b.n	80036d0 <LED_Start+0xe0>
        case SLOW:
            period = (uint16_t)((80000000 / prescaler / 0.5) - 1);
 8003658:	89fb      	ldrh	r3, [r7, #14]
 800365a:	4a48      	ldr	r2, [pc, #288]	@ (800377c <LED_Start+0x18c>)
 800365c:	fb92 f3f3 	sdiv	r3, r2, r3
 8003660:	4618      	mov	r0, r3
 8003662:	f7fc ff6f 	bl	8000544 <__aeabi_i2d>
 8003666:	f04f 0200 	mov.w	r2, #0
 800366a:	4b45      	ldr	r3, [pc, #276]	@ (8003780 <LED_Start+0x190>)
 800366c:	f7fd f8fe 	bl	800086c <__aeabi_ddiv>
 8003670:	4602      	mov	r2, r0
 8003672:	460b      	mov	r3, r1
 8003674:	4610      	mov	r0, r2
 8003676:	4619      	mov	r1, r3
 8003678:	f04f 0200 	mov.w	r2, #0
 800367c:	4b41      	ldr	r3, [pc, #260]	@ (8003784 <LED_Start+0x194>)
 800367e:	f7fc fe13 	bl	80002a8 <__aeabi_dsub>
 8003682:	4602      	mov	r2, r0
 8003684:	460b      	mov	r3, r1
 8003686:	4610      	mov	r0, r2
 8003688:	4619      	mov	r1, r3
 800368a:	f7fd f9d7 	bl	8000a3c <__aeabi_d2uiz>
 800368e:	4603      	mov	r3, r0
 8003690:	82bb      	strh	r3, [r7, #20]
            break;
 8003692:	e01d      	b.n	80036d0 <LED_Start+0xe0>
        case VERY_SLOW:
            period = (uint16_t)((80000000 / prescaler / 0.1) - 1);
 8003694:	89fb      	ldrh	r3, [r7, #14]
 8003696:	4a39      	ldr	r2, [pc, #228]	@ (800377c <LED_Start+0x18c>)
 8003698:	fb92 f3f3 	sdiv	r3, r2, r3
 800369c:	4618      	mov	r0, r3
 800369e:	f7fc ff51 	bl	8000544 <__aeabi_i2d>
 80036a2:	a333      	add	r3, pc, #204	@ (adr r3, 8003770 <LED_Start+0x180>)
 80036a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80036a8:	f7fd f8e0 	bl	800086c <__aeabi_ddiv>
 80036ac:	4602      	mov	r2, r0
 80036ae:	460b      	mov	r3, r1
 80036b0:	4610      	mov	r0, r2
 80036b2:	4619      	mov	r1, r3
 80036b4:	f04f 0200 	mov.w	r2, #0
 80036b8:	4b32      	ldr	r3, [pc, #200]	@ (8003784 <LED_Start+0x194>)
 80036ba:	f7fc fdf5 	bl	80002a8 <__aeabi_dsub>
 80036be:	4602      	mov	r2, r0
 80036c0:	460b      	mov	r3, r1
 80036c2:	4610      	mov	r0, r2
 80036c4:	4619      	mov	r1, r3
 80036c6:	f7fd f9b9 	bl	8000a3c <__aeabi_d2uiz>
 80036ca:	4603      	mov	r3, r0
 80036cc:	82bb      	strh	r3, [r7, #20]
            break;
 80036ce:	bf00      	nop
        default:
            return;
    }

	switch(duty)
 80036d0:	78bb      	ldrb	r3, [r7, #2]
 80036d2:	3b04      	subs	r3, #4
 80036d4:	2b03      	cmp	r3, #3
 80036d6:	d846      	bhi.n	8003766 <LED_Start+0x176>
 80036d8:	a201      	add	r2, pc, #4	@ (adr r2, 80036e0 <LED_Start+0xf0>)
 80036da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80036de:	bf00      	nop
 80036e0:	080036f1 	.word	0x080036f1
 80036e4:	080036f7 	.word	0x080036f7
 80036e8:	0800370b 	.word	0x0800370b
 80036ec:	08003713 	.word	0x08003713
	{
		case FULL:
			pulse = period; 
 80036f0:	8abb      	ldrh	r3, [r7, #20]
 80036f2:	82fb      	strh	r3, [r7, #22]
		    break;
 80036f4:	e011      	b.n	800371a <LED_Start+0x12a>
        case HIGH:
			pulse = period * 3 / 4;
 80036f6:	8aba      	ldrh	r2, [r7, #20]
 80036f8:	4613      	mov	r3, r2
 80036fa:	005b      	lsls	r3, r3, #1
 80036fc:	4413      	add	r3, r2
 80036fe:	2b00      	cmp	r3, #0
 8003700:	da00      	bge.n	8003704 <LED_Start+0x114>
 8003702:	3303      	adds	r3, #3
 8003704:	109b      	asrs	r3, r3, #2
 8003706:	82fb      	strh	r3, [r7, #22]
			break;
 8003708:	e007      	b.n	800371a <LED_Start+0x12a>
		case HALF:
			pulse = period / 2;
 800370a:	8abb      	ldrh	r3, [r7, #20]
 800370c:	085b      	lsrs	r3, r3, #1
 800370e:	82fb      	strh	r3, [r7, #22]
			break;
 8003710:	e003      	b.n	800371a <LED_Start+0x12a>
		case LOW:
			pulse = period / 4;
 8003712:	8abb      	ldrh	r3, [r7, #20]
 8003714:	089b      	lsrs	r3, r3, #2
 8003716:	82fb      	strh	r3, [r7, #22]
			break;
 8003718:	bf00      	nop
        default:
            return;
	}

    // Imposta periodo e prescaler
    htim->Instance->PSC = prescaler;
 800371a:	693b      	ldr	r3, [r7, #16]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	89fa      	ldrh	r2, [r7, #14]
 8003720:	629a      	str	r2, [r3, #40]	@ 0x28
    htim->Instance->ARR = period;
 8003722:	693b      	ldr	r3, [r7, #16]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	8aba      	ldrh	r2, [r7, #20]
 8003728:	62da      	str	r2, [r3, #44]	@ 0x2c
	switch(LED)
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	2b08      	cmp	r3, #8
 800372e:	d009      	beq.n	8003744 <LED_Start+0x154>
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	2b08      	cmp	r3, #8
 8003734:	d818      	bhi.n	8003768 <LED_Start+0x178>
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	2b00      	cmp	r3, #0
 800373a:	d008      	beq.n	800374e <LED_Start+0x15e>
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	2b04      	cmp	r3, #4
 8003740:	d00a      	beq.n	8003758 <LED_Start+0x168>
 8003742:	e011      	b.n	8003768 <LED_Start+0x178>
    {
    case GRN_LED:
        LED_TIMER->Instance->CCR3 = pulse;
 8003744:	4b0c      	ldr	r3, [pc, #48]	@ (8003778 <LED_Start+0x188>)
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	8afa      	ldrh	r2, [r7, #22]
 800374a:	63da      	str	r2, [r3, #60]	@ 0x3c
        break;
 800374c:	e00c      	b.n	8003768 <LED_Start+0x178>
    case ORG_LED:
        LED_TIMER->Instance->CCR1 = pulse;
 800374e:	4b0a      	ldr	r3, [pc, #40]	@ (8003778 <LED_Start+0x188>)
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	8afa      	ldrh	r2, [r7, #22]
 8003754:	635a      	str	r2, [r3, #52]	@ 0x34
        break;
 8003756:	e007      	b.n	8003768 <LED_Start+0x178>
    case RED_LED:
        LED_TIMER->Instance->CCR2 = pulse;
 8003758:	4b07      	ldr	r3, [pc, #28]	@ (8003778 <LED_Start+0x188>)
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	8afa      	ldrh	r2, [r7, #22]
 800375e:	639a      	str	r2, [r3, #56]	@ 0x38
        break;
 8003760:	e002      	b.n	8003768 <LED_Start+0x178>
            return;
 8003762:	bf00      	nop
 8003764:	e000      	b.n	8003768 <LED_Start+0x178>
            return;
 8003766:	bf00      	nop
    }
}
 8003768:	3718      	adds	r7, #24
 800376a:	46bd      	mov	sp, r7
 800376c:	bd80      	pop	{r7, pc}
 800376e:	bf00      	nop
 8003770:	9999999a 	.word	0x9999999a
 8003774:	3fb99999 	.word	0x3fb99999
 8003778:	2000056c 	.word	0x2000056c
 800377c:	04c4b400 	.word	0x04c4b400
 8003780:	3fe00000 	.word	0x3fe00000
 8003784:	3ff00000 	.word	0x3ff00000

08003788 <LED_Stop>:

/*------SPEGNIMENTO LED------*/
void LED_Stop(uint32_t LED)
{
 8003788:	b480      	push	{r7}
 800378a:	b083      	sub	sp, #12
 800378c:	af00      	add	r7, sp, #0
 800378e:	6078      	str	r0, [r7, #4]
	switch(LED)
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	2b08      	cmp	r3, #8
 8003794:	d009      	beq.n	80037aa <LED_Stop+0x22>
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	2b08      	cmp	r3, #8
 800379a:	d815      	bhi.n	80037c8 <LED_Stop+0x40>
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	2b00      	cmp	r3, #0
 80037a0:	d008      	beq.n	80037b4 <LED_Stop+0x2c>
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	2b04      	cmp	r3, #4
 80037a6:	d00a      	beq.n	80037be <LED_Stop+0x36>
        break;
    case RED_LED:
        LED_TIMER->Instance->CCR2 = 0;
        break;
    }
}
 80037a8:	e00e      	b.n	80037c8 <LED_Stop+0x40>
        LED_TIMER->Instance->CCR3 = 0;
 80037aa:	4b0a      	ldr	r3, [pc, #40]	@ (80037d4 <LED_Stop+0x4c>)
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	2200      	movs	r2, #0
 80037b0:	63da      	str	r2, [r3, #60]	@ 0x3c
        break;
 80037b2:	e009      	b.n	80037c8 <LED_Stop+0x40>
        LED_TIMER->Instance->CCR1 = 0;
 80037b4:	4b07      	ldr	r3, [pc, #28]	@ (80037d4 <LED_Stop+0x4c>)
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	2200      	movs	r2, #0
 80037ba:	635a      	str	r2, [r3, #52]	@ 0x34
        break;
 80037bc:	e004      	b.n	80037c8 <LED_Stop+0x40>
        LED_TIMER->Instance->CCR2 = 0;
 80037be:	4b05      	ldr	r3, [pc, #20]	@ (80037d4 <LED_Stop+0x4c>)
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	2200      	movs	r2, #0
 80037c4:	639a      	str	r2, [r3, #56]	@ 0x38
        break;
 80037c6:	bf00      	nop
}
 80037c8:	bf00      	nop
 80037ca:	370c      	adds	r7, #12
 80037cc:	46bd      	mov	sp, r7
 80037ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037d2:	4770      	bx	lr
 80037d4:	2000056c 	.word	0x2000056c

080037d8 <lsm6dsv16x_read_reg>:
  *
  */
int32_t __weak lsm6dsv16x_read_reg(stmdev_ctx_t *ctx, uint8_t reg,
                                   uint8_t *data,
                                   uint16_t len)
{
 80037d8:	b590      	push	{r4, r7, lr}
 80037da:	b087      	sub	sp, #28
 80037dc:	af00      	add	r7, sp, #0
 80037de:	60f8      	str	r0, [r7, #12]
 80037e0:	607a      	str	r2, [r7, #4]
 80037e2:	461a      	mov	r2, r3
 80037e4:	460b      	mov	r3, r1
 80037e6:	72fb      	strb	r3, [r7, #11]
 80037e8:	4613      	mov	r3, r2
 80037ea:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->read_reg(ctx->handle, reg, data, len);
 80037ec:	68fb      	ldr	r3, [r7, #12]
 80037ee:	685c      	ldr	r4, [r3, #4]
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	68d8      	ldr	r0, [r3, #12]
 80037f4:	893b      	ldrh	r3, [r7, #8]
 80037f6:	7af9      	ldrb	r1, [r7, #11]
 80037f8:	687a      	ldr	r2, [r7, #4]
 80037fa:	47a0      	blx	r4
 80037fc:	6178      	str	r0, [r7, #20]

  return ret;
 80037fe:	697b      	ldr	r3, [r7, #20]
}
 8003800:	4618      	mov	r0, r3
 8003802:	371c      	adds	r7, #28
 8003804:	46bd      	mov	sp, r7
 8003806:	bd90      	pop	{r4, r7, pc}

08003808 <lsm6dsv16x_write_reg>:
  *
  */
int32_t __weak lsm6dsv16x_write_reg(stmdev_ctx_t *ctx, uint8_t reg,
                                    uint8_t *data,
                                    uint16_t len)
{
 8003808:	b590      	push	{r4, r7, lr}
 800380a:	b087      	sub	sp, #28
 800380c:	af00      	add	r7, sp, #0
 800380e:	60f8      	str	r0, [r7, #12]
 8003810:	607a      	str	r2, [r7, #4]
 8003812:	461a      	mov	r2, r3
 8003814:	460b      	mov	r3, r1
 8003816:	72fb      	strb	r3, [r7, #11]
 8003818:	4613      	mov	r3, r2
 800381a:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->write_reg(ctx->handle, reg, data, len);
 800381c:	68fb      	ldr	r3, [r7, #12]
 800381e:	681c      	ldr	r4, [r3, #0]
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	68d8      	ldr	r0, [r3, #12]
 8003824:	893b      	ldrh	r3, [r7, #8]
 8003826:	7af9      	ldrb	r1, [r7, #11]
 8003828:	687a      	ldr	r2, [r7, #4]
 800382a:	47a0      	blx	r4
 800382c:	6178      	str	r0, [r7, #20]

  return ret;
 800382e:	697b      	ldr	r3, [r7, #20]
}
 8003830:	4618      	mov	r0, r3
 8003832:	371c      	adds	r7, #28
 8003834:	46bd      	mov	sp, r7
 8003836:	bd90      	pop	{r4, r7, pc}

08003838 <lsm6dsv16x_reset_set>:
  * @param  val      Reset of the device.
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dsv16x_reset_set(stmdev_ctx_t *ctx, lsm6dsv16x_reset_t val)
{
 8003838:	b580      	push	{r7, lr}
 800383a:	b086      	sub	sp, #24
 800383c:	af00      	add	r7, sp, #0
 800383e:	6078      	str	r0, [r7, #4]
 8003840:	460b      	mov	r3, r1
 8003842:	70fb      	strb	r3, [r7, #3]
  lsm6dsv16x_func_cfg_access_t func_cfg_access;
  lsm6dsv16x_ctrl3_t ctrl3;
  int32_t ret;

  ret = lsm6dsv16x_read_reg(ctx, LSM6DSV16X_CTRL3, (uint8_t *)&ctrl3, 1);
 8003844:	f107 020c 	add.w	r2, r7, #12
 8003848:	2301      	movs	r3, #1
 800384a:	2112      	movs	r1, #18
 800384c:	6878      	ldr	r0, [r7, #4]
 800384e:	f7ff ffc3 	bl	80037d8 <lsm6dsv16x_read_reg>
 8003852:	6178      	str	r0, [r7, #20]
  ret += lsm6dsv16x_read_reg(ctx, LSM6DSV16X_FUNC_CFG_ACCESS, (uint8_t *)&func_cfg_access, 1);
 8003854:	f107 0210 	add.w	r2, r7, #16
 8003858:	2301      	movs	r3, #1
 800385a:	2101      	movs	r1, #1
 800385c:	6878      	ldr	r0, [r7, #4]
 800385e:	f7ff ffbb 	bl	80037d8 <lsm6dsv16x_read_reg>
 8003862:	4602      	mov	r2, r0
 8003864:	697b      	ldr	r3, [r7, #20]
 8003866:	4413      	add	r3, r2
 8003868:	617b      	str	r3, [r7, #20]
  if (ret != 0) { return ret; }
 800386a:	697b      	ldr	r3, [r7, #20]
 800386c:	2b00      	cmp	r3, #0
 800386e:	d001      	beq.n	8003874 <lsm6dsv16x_reset_set+0x3c>
 8003870:	697b      	ldr	r3, [r7, #20]
 8003872:	e02d      	b.n	80038d0 <lsm6dsv16x_reset_set+0x98>

  ctrl3.boot = ((uint8_t)val & 0x04U) >> 2;
 8003874:	78fb      	ldrb	r3, [r7, #3]
 8003876:	089b      	lsrs	r3, r3, #2
 8003878:	f003 0301 	and.w	r3, r3, #1
 800387c:	b2da      	uxtb	r2, r3
 800387e:	7b3b      	ldrb	r3, [r7, #12]
 8003880:	f362 13c7 	bfi	r3, r2, #7, #1
 8003884:	733b      	strb	r3, [r7, #12]
  ctrl3.sw_reset = ((uint8_t)val & 0x02U) >> 1;
 8003886:	78fb      	ldrb	r3, [r7, #3]
 8003888:	085b      	lsrs	r3, r3, #1
 800388a:	f003 0301 	and.w	r3, r3, #1
 800388e:	b2da      	uxtb	r2, r3
 8003890:	7b3b      	ldrb	r3, [r7, #12]
 8003892:	f362 0300 	bfi	r3, r2, #0, #1
 8003896:	733b      	strb	r3, [r7, #12]
  func_cfg_access.sw_por = (uint8_t)val & 0x01U;
 8003898:	78fb      	ldrb	r3, [r7, #3]
 800389a:	f003 0301 	and.w	r3, r3, #1
 800389e:	b2da      	uxtb	r2, r3
 80038a0:	7c3b      	ldrb	r3, [r7, #16]
 80038a2:	f362 0382 	bfi	r3, r2, #2, #1
 80038a6:	743b      	strb	r3, [r7, #16]

  ret = lsm6dsv16x_write_reg(ctx, LSM6DSV16X_CTRL3, (uint8_t *)&ctrl3, 1);
 80038a8:	f107 020c 	add.w	r2, r7, #12
 80038ac:	2301      	movs	r3, #1
 80038ae:	2112      	movs	r1, #18
 80038b0:	6878      	ldr	r0, [r7, #4]
 80038b2:	f7ff ffa9 	bl	8003808 <lsm6dsv16x_write_reg>
 80038b6:	6178      	str	r0, [r7, #20]
  ret += lsm6dsv16x_write_reg(ctx, LSM6DSV16X_FUNC_CFG_ACCESS, (uint8_t *)&func_cfg_access, 1);
 80038b8:	f107 0210 	add.w	r2, r7, #16
 80038bc:	2301      	movs	r3, #1
 80038be:	2101      	movs	r1, #1
 80038c0:	6878      	ldr	r0, [r7, #4]
 80038c2:	f7ff ffa1 	bl	8003808 <lsm6dsv16x_write_reg>
 80038c6:	4602      	mov	r2, r0
 80038c8:	697b      	ldr	r3, [r7, #20]
 80038ca:	4413      	add	r3, r2
 80038cc:	617b      	str	r3, [r7, #20]

  return ret;
 80038ce:	697b      	ldr	r3, [r7, #20]
}
 80038d0:	4618      	mov	r0, r3
 80038d2:	3718      	adds	r7, #24
 80038d4:	46bd      	mov	sp, r7
 80038d6:	bd80      	pop	{r7, pc}

080038d8 <lsm6dsv16x_reset_get>:
  * @param  val      Global reset of the device.
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dsv16x_reset_get(stmdev_ctx_t *ctx, lsm6dsv16x_reset_t *val)
{
 80038d8:	b580      	push	{r7, lr}
 80038da:	b086      	sub	sp, #24
 80038dc:	af00      	add	r7, sp, #0
 80038de:	6078      	str	r0, [r7, #4]
 80038e0:	6039      	str	r1, [r7, #0]
  lsm6dsv16x_func_cfg_access_t func_cfg_access;
  lsm6dsv16x_ctrl3_t ctrl3;
  int32_t ret;

  ret = lsm6dsv16x_read_reg(ctx, LSM6DSV16X_CTRL3, (uint8_t *)&ctrl3, 1);
 80038e2:	f107 020c 	add.w	r2, r7, #12
 80038e6:	2301      	movs	r3, #1
 80038e8:	2112      	movs	r1, #18
 80038ea:	6878      	ldr	r0, [r7, #4]
 80038ec:	f7ff ff74 	bl	80037d8 <lsm6dsv16x_read_reg>
 80038f0:	6178      	str	r0, [r7, #20]
  ret += lsm6dsv16x_read_reg(ctx, LSM6DSV16X_FUNC_CFG_ACCESS, (uint8_t *)&func_cfg_access, 1);
 80038f2:	f107 0210 	add.w	r2, r7, #16
 80038f6:	2301      	movs	r3, #1
 80038f8:	2101      	movs	r1, #1
 80038fa:	6878      	ldr	r0, [r7, #4]
 80038fc:	f7ff ff6c 	bl	80037d8 <lsm6dsv16x_read_reg>
 8003900:	4602      	mov	r2, r0
 8003902:	697b      	ldr	r3, [r7, #20]
 8003904:	4413      	add	r3, r2
 8003906:	617b      	str	r3, [r7, #20]
  if (ret != 0) { return ret; }
 8003908:	697b      	ldr	r3, [r7, #20]
 800390a:	2b00      	cmp	r3, #0
 800390c:	d001      	beq.n	8003912 <lsm6dsv16x_reset_get+0x3a>
 800390e:	697b      	ldr	r3, [r7, #20]
 8003910:	e033      	b.n	800397a <lsm6dsv16x_reset_get+0xa2>

  switch ((ctrl3.sw_reset << 2) + (ctrl3.boot << 1) + func_cfg_access.sw_por)
 8003912:	7b3b      	ldrb	r3, [r7, #12]
 8003914:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8003918:	b2db      	uxtb	r3, r3
 800391a:	009a      	lsls	r2, r3, #2
 800391c:	7b3b      	ldrb	r3, [r7, #12]
 800391e:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8003922:	b2db      	uxtb	r3, r3
 8003924:	005b      	lsls	r3, r3, #1
 8003926:	4413      	add	r3, r2
 8003928:	7c3a      	ldrb	r2, [r7, #16]
 800392a:	f3c2 0280 	ubfx	r2, r2, #2, #1
 800392e:	b2d2      	uxtb	r2, r2
 8003930:	4413      	add	r3, r2
 8003932:	2b04      	cmp	r3, #4
 8003934:	d81c      	bhi.n	8003970 <lsm6dsv16x_reset_get+0x98>
 8003936:	a201      	add	r2, pc, #4	@ (adr r2, 800393c <lsm6dsv16x_reset_get+0x64>)
 8003938:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800393c:	08003951 	.word	0x08003951
 8003940:	08003959 	.word	0x08003959
 8003944:	08003961 	.word	0x08003961
 8003948:	08003971 	.word	0x08003971
 800394c:	08003969 	.word	0x08003969
  {
    case LSM6DSV16X_READY:
      *val = LSM6DSV16X_READY;
 8003950:	683b      	ldr	r3, [r7, #0]
 8003952:	2200      	movs	r2, #0
 8003954:	701a      	strb	r2, [r3, #0]
      break;
 8003956:	e00f      	b.n	8003978 <lsm6dsv16x_reset_get+0xa0>

    case LSM6DSV16X_GLOBAL_RST:
      *val = LSM6DSV16X_GLOBAL_RST;
 8003958:	683b      	ldr	r3, [r7, #0]
 800395a:	2201      	movs	r2, #1
 800395c:	701a      	strb	r2, [r3, #0]
      break;
 800395e:	e00b      	b.n	8003978 <lsm6dsv16x_reset_get+0xa0>

    case LSM6DSV16X_RESTORE_CAL_PARAM:
      *val = LSM6DSV16X_RESTORE_CAL_PARAM;
 8003960:	683b      	ldr	r3, [r7, #0]
 8003962:	2202      	movs	r2, #2
 8003964:	701a      	strb	r2, [r3, #0]
      break;
 8003966:	e007      	b.n	8003978 <lsm6dsv16x_reset_get+0xa0>

    case LSM6DSV16X_RESTORE_CTRL_REGS:
      *val = LSM6DSV16X_RESTORE_CTRL_REGS;
 8003968:	683b      	ldr	r3, [r7, #0]
 800396a:	2204      	movs	r2, #4
 800396c:	701a      	strb	r2, [r3, #0]
      break;
 800396e:	e003      	b.n	8003978 <lsm6dsv16x_reset_get+0xa0>

    default:
      *val = LSM6DSV16X_GLOBAL_RST;
 8003970:	683b      	ldr	r3, [r7, #0]
 8003972:	2201      	movs	r2, #1
 8003974:	701a      	strb	r2, [r3, #0]
      break;
 8003976:	bf00      	nop
  }

  return ret;
 8003978:	697b      	ldr	r3, [r7, #20]
}
 800397a:	4618      	mov	r0, r3
 800397c:	3718      	adds	r7, #24
 800397e:	46bd      	mov	sp, r7
 8003980:	bd80      	pop	{r7, pc}
 8003982:	bf00      	nop

08003984 <lsm6dsv16x_device_id_get>:
  * @param  val      Device ID.
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dsv16x_device_id_get(stmdev_ctx_t *ctx, uint8_t *val)
{
 8003984:	b580      	push	{r7, lr}
 8003986:	b084      	sub	sp, #16
 8003988:	af00      	add	r7, sp, #0
 800398a:	6078      	str	r0, [r7, #4]
 800398c:	6039      	str	r1, [r7, #0]
  int32_t ret;

  ret = lsm6dsv16x_read_reg(ctx, LSM6DSV16X_WHO_AM_I, val, 1);
 800398e:	2301      	movs	r3, #1
 8003990:	683a      	ldr	r2, [r7, #0]
 8003992:	210f      	movs	r1, #15
 8003994:	6878      	ldr	r0, [r7, #4]
 8003996:	f7ff ff1f 	bl	80037d8 <lsm6dsv16x_read_reg>
 800399a:	60f8      	str	r0, [r7, #12]

  return ret;
 800399c:	68fb      	ldr	r3, [r7, #12]
}
 800399e:	4618      	mov	r0, r3
 80039a0:	3710      	adds	r7, #16
 80039a2:	46bd      	mov	sp, r7
 80039a4:	bd80      	pop	{r7, pc}

080039a6 <lsm6dsv16x_xl_data_rate_set>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dsv16x_xl_data_rate_set(stmdev_ctx_t *ctx,
                                    lsm6dsv16x_data_rate_t val)
{
 80039a6:	b580      	push	{r7, lr}
 80039a8:	b086      	sub	sp, #24
 80039aa:	af00      	add	r7, sp, #0
 80039ac:	6078      	str	r0, [r7, #4]
 80039ae:	460b      	mov	r3, r1
 80039b0:	70fb      	strb	r3, [r7, #3]
  lsm6dsv16x_ctrl1_t ctrl1;
  lsm6dsv16x_haodr_cfg_t haodr;
  uint8_t sel;
  int32_t ret;

  ret = lsm6dsv16x_read_reg(ctx, LSM6DSV16X_CTRL1, (uint8_t *)&ctrl1, 1);
 80039b2:	f107 0210 	add.w	r2, r7, #16
 80039b6:	2301      	movs	r3, #1
 80039b8:	2110      	movs	r1, #16
 80039ba:	6878      	ldr	r0, [r7, #4]
 80039bc:	f7ff ff0c 	bl	80037d8 <lsm6dsv16x_read_reg>
 80039c0:	6178      	str	r0, [r7, #20]
  if (ret != 0) { return ret; }
 80039c2:	697b      	ldr	r3, [r7, #20]
 80039c4:	2b00      	cmp	r3, #0
 80039c6:	d001      	beq.n	80039cc <lsm6dsv16x_xl_data_rate_set+0x26>
 80039c8:	697b      	ldr	r3, [r7, #20]
 80039ca:	e039      	b.n	8003a40 <lsm6dsv16x_xl_data_rate_set+0x9a>

  ctrl1.odr_xl = (uint8_t)val & 0x0Fu;
 80039cc:	78fb      	ldrb	r3, [r7, #3]
 80039ce:	f003 030f 	and.w	r3, r3, #15
 80039d2:	b2da      	uxtb	r2, r3
 80039d4:	7c3b      	ldrb	r3, [r7, #16]
 80039d6:	f362 0303 	bfi	r3, r2, #0, #4
 80039da:	743b      	strb	r3, [r7, #16]
  ret = lsm6dsv16x_write_reg(ctx, LSM6DSV16X_CTRL1, (uint8_t *)&ctrl1, 1);
 80039dc:	f107 0210 	add.w	r2, r7, #16
 80039e0:	2301      	movs	r3, #1
 80039e2:	2110      	movs	r1, #16
 80039e4:	6878      	ldr	r0, [r7, #4]
 80039e6:	f7ff ff0f 	bl	8003808 <lsm6dsv16x_write_reg>
 80039ea:	6178      	str	r0, [r7, #20]
  if (ret != 0) { return ret; }
 80039ec:	697b      	ldr	r3, [r7, #20]
 80039ee:	2b00      	cmp	r3, #0
 80039f0:	d001      	beq.n	80039f6 <lsm6dsv16x_xl_data_rate_set+0x50>
 80039f2:	697b      	ldr	r3, [r7, #20]
 80039f4:	e024      	b.n	8003a40 <lsm6dsv16x_xl_data_rate_set+0x9a>

  sel = ((uint8_t)val >> 4) & 0xFU;
 80039f6:	78fb      	ldrb	r3, [r7, #3]
 80039f8:	091b      	lsrs	r3, r3, #4
 80039fa:	74fb      	strb	r3, [r7, #19]
  if (sel != 0U)
 80039fc:	7cfb      	ldrb	r3, [r7, #19]
 80039fe:	2b00      	cmp	r3, #0
 8003a00:	d01d      	beq.n	8003a3e <lsm6dsv16x_xl_data_rate_set+0x98>
  {
    ret += lsm6dsv16x_read_reg(ctx, LSM6DSV16X_HAODR_CFG, (uint8_t *)&haodr, 1);
 8003a02:	f107 020c 	add.w	r2, r7, #12
 8003a06:	2301      	movs	r3, #1
 8003a08:	2162      	movs	r1, #98	@ 0x62
 8003a0a:	6878      	ldr	r0, [r7, #4]
 8003a0c:	f7ff fee4 	bl	80037d8 <lsm6dsv16x_read_reg>
 8003a10:	4602      	mov	r2, r0
 8003a12:	697b      	ldr	r3, [r7, #20]
 8003a14:	4413      	add	r3, r2
 8003a16:	617b      	str	r3, [r7, #20]
    haodr.haodr_sel = sel;
 8003a18:	7cfb      	ldrb	r3, [r7, #19]
 8003a1a:	f003 0303 	and.w	r3, r3, #3
 8003a1e:	b2da      	uxtb	r2, r3
 8003a20:	7b3b      	ldrb	r3, [r7, #12]
 8003a22:	f362 0301 	bfi	r3, r2, #0, #2
 8003a26:	733b      	strb	r3, [r7, #12]
    ret += lsm6dsv16x_write_reg(ctx, LSM6DSV16X_HAODR_CFG, (uint8_t *)&haodr, 1);
 8003a28:	f107 020c 	add.w	r2, r7, #12
 8003a2c:	2301      	movs	r3, #1
 8003a2e:	2162      	movs	r1, #98	@ 0x62
 8003a30:	6878      	ldr	r0, [r7, #4]
 8003a32:	f7ff fee9 	bl	8003808 <lsm6dsv16x_write_reg>
 8003a36:	4602      	mov	r2, r0
 8003a38:	697b      	ldr	r3, [r7, #20]
 8003a3a:	4413      	add	r3, r2
 8003a3c:	617b      	str	r3, [r7, #20]
  }

  return ret;
 8003a3e:	697b      	ldr	r3, [r7, #20]
}
 8003a40:	4618      	mov	r0, r3
 8003a42:	3718      	adds	r7, #24
 8003a44:	46bd      	mov	sp, r7
 8003a46:	bd80      	pop	{r7, pc}

08003a48 <lsm6dsv16x_xl_mode_set>:
  * @param  val      XL_HIGH_PERFORMANCE_MD, XL_HIGH_ACCURACY_ODR_MD, XL_LOW_POWER_2_AVG_MD, XL_LOW_POWER_4_AVG_MD, XL_LOW_POWER_8_AVG_MD, XL_NORMAL_MD,
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dsv16x_xl_mode_set(stmdev_ctx_t *ctx, lsm6dsv16x_xl_mode_t val)
{
 8003a48:	b580      	push	{r7, lr}
 8003a4a:	b084      	sub	sp, #16
 8003a4c:	af00      	add	r7, sp, #0
 8003a4e:	6078      	str	r0, [r7, #4]
 8003a50:	460b      	mov	r3, r1
 8003a52:	70fb      	strb	r3, [r7, #3]
  lsm6dsv16x_ctrl1_t ctrl1;
  int32_t ret;

  ret = lsm6dsv16x_read_reg(ctx, LSM6DSV16X_CTRL1, (uint8_t *)&ctrl1, 1);
 8003a54:	f107 0208 	add.w	r2, r7, #8
 8003a58:	2301      	movs	r3, #1
 8003a5a:	2110      	movs	r1, #16
 8003a5c:	6878      	ldr	r0, [r7, #4]
 8003a5e:	f7ff febb 	bl	80037d8 <lsm6dsv16x_read_reg>
 8003a62:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8003a64:	68fb      	ldr	r3, [r7, #12]
 8003a66:	2b00      	cmp	r3, #0
 8003a68:	d10f      	bne.n	8003a8a <lsm6dsv16x_xl_mode_set+0x42>
  {
    ctrl1.op_mode_xl = (uint8_t)val & 0x07U;
 8003a6a:	78fb      	ldrb	r3, [r7, #3]
 8003a6c:	f003 0307 	and.w	r3, r3, #7
 8003a70:	b2da      	uxtb	r2, r3
 8003a72:	7a3b      	ldrb	r3, [r7, #8]
 8003a74:	f362 1306 	bfi	r3, r2, #4, #3
 8003a78:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsv16x_write_reg(ctx, LSM6DSV16X_CTRL1, (uint8_t *)&ctrl1, 1);
 8003a7a:	f107 0208 	add.w	r2, r7, #8
 8003a7e:	2301      	movs	r3, #1
 8003a80:	2110      	movs	r1, #16
 8003a82:	6878      	ldr	r0, [r7, #4]
 8003a84:	f7ff fec0 	bl	8003808 <lsm6dsv16x_write_reg>
 8003a88:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8003a8a:	68fb      	ldr	r3, [r7, #12]
}
 8003a8c:	4618      	mov	r0, r3
 8003a8e:	3710      	adds	r7, #16
 8003a90:	46bd      	mov	sp, r7
 8003a92:	bd80      	pop	{r7, pc}

08003a94 <lsm6dsv16x_gy_data_rate_set>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dsv16x_gy_data_rate_set(stmdev_ctx_t *ctx,
                                    lsm6dsv16x_data_rate_t val)
{
 8003a94:	b580      	push	{r7, lr}
 8003a96:	b086      	sub	sp, #24
 8003a98:	af00      	add	r7, sp, #0
 8003a9a:	6078      	str	r0, [r7, #4]
 8003a9c:	460b      	mov	r3, r1
 8003a9e:	70fb      	strb	r3, [r7, #3]
  lsm6dsv16x_ctrl2_t ctrl2;
  lsm6dsv16x_haodr_cfg_t haodr;
  uint8_t sel;
  int32_t ret;

  ret = lsm6dsv16x_read_reg(ctx, LSM6DSV16X_CTRL2, (uint8_t *)&ctrl2, 1);
 8003aa0:	f107 0210 	add.w	r2, r7, #16
 8003aa4:	2301      	movs	r3, #1
 8003aa6:	2111      	movs	r1, #17
 8003aa8:	6878      	ldr	r0, [r7, #4]
 8003aaa:	f7ff fe95 	bl	80037d8 <lsm6dsv16x_read_reg>
 8003aae:	6178      	str	r0, [r7, #20]
  ctrl2.odr_g = (uint8_t)val & 0x0Fu;
 8003ab0:	78fb      	ldrb	r3, [r7, #3]
 8003ab2:	f003 030f 	and.w	r3, r3, #15
 8003ab6:	b2da      	uxtb	r2, r3
 8003ab8:	7c3b      	ldrb	r3, [r7, #16]
 8003aba:	f362 0303 	bfi	r3, r2, #0, #4
 8003abe:	743b      	strb	r3, [r7, #16]
  ret += lsm6dsv16x_write_reg(ctx, LSM6DSV16X_CTRL2, (uint8_t *)&ctrl2, 1);
 8003ac0:	f107 0210 	add.w	r2, r7, #16
 8003ac4:	2301      	movs	r3, #1
 8003ac6:	2111      	movs	r1, #17
 8003ac8:	6878      	ldr	r0, [r7, #4]
 8003aca:	f7ff fe9d 	bl	8003808 <lsm6dsv16x_write_reg>
 8003ace:	4602      	mov	r2, r0
 8003ad0:	697b      	ldr	r3, [r7, #20]
 8003ad2:	4413      	add	r3, r2
 8003ad4:	617b      	str	r3, [r7, #20]
  if (ret != 0) { return ret; }
 8003ad6:	697b      	ldr	r3, [r7, #20]
 8003ad8:	2b00      	cmp	r3, #0
 8003ada:	d001      	beq.n	8003ae0 <lsm6dsv16x_gy_data_rate_set+0x4c>
 8003adc:	697b      	ldr	r3, [r7, #20]
 8003ade:	e024      	b.n	8003b2a <lsm6dsv16x_gy_data_rate_set+0x96>

  sel = ((uint8_t)val >> 4) & 0xFU;
 8003ae0:	78fb      	ldrb	r3, [r7, #3]
 8003ae2:	091b      	lsrs	r3, r3, #4
 8003ae4:	74fb      	strb	r3, [r7, #19]
  if (sel != 0U)
 8003ae6:	7cfb      	ldrb	r3, [r7, #19]
 8003ae8:	2b00      	cmp	r3, #0
 8003aea:	d01d      	beq.n	8003b28 <lsm6dsv16x_gy_data_rate_set+0x94>
  {
    ret += lsm6dsv16x_read_reg(ctx, LSM6DSV16X_HAODR_CFG, (uint8_t *)&haodr, 1);
 8003aec:	f107 020c 	add.w	r2, r7, #12
 8003af0:	2301      	movs	r3, #1
 8003af2:	2162      	movs	r1, #98	@ 0x62
 8003af4:	6878      	ldr	r0, [r7, #4]
 8003af6:	f7ff fe6f 	bl	80037d8 <lsm6dsv16x_read_reg>
 8003afa:	4602      	mov	r2, r0
 8003afc:	697b      	ldr	r3, [r7, #20]
 8003afe:	4413      	add	r3, r2
 8003b00:	617b      	str	r3, [r7, #20]
    haodr.haodr_sel = sel;
 8003b02:	7cfb      	ldrb	r3, [r7, #19]
 8003b04:	f003 0303 	and.w	r3, r3, #3
 8003b08:	b2da      	uxtb	r2, r3
 8003b0a:	7b3b      	ldrb	r3, [r7, #12]
 8003b0c:	f362 0301 	bfi	r3, r2, #0, #2
 8003b10:	733b      	strb	r3, [r7, #12]
    ret += lsm6dsv16x_write_reg(ctx, LSM6DSV16X_HAODR_CFG, (uint8_t *)&haodr, 1);
 8003b12:	f107 020c 	add.w	r2, r7, #12
 8003b16:	2301      	movs	r3, #1
 8003b18:	2162      	movs	r1, #98	@ 0x62
 8003b1a:	6878      	ldr	r0, [r7, #4]
 8003b1c:	f7ff fe74 	bl	8003808 <lsm6dsv16x_write_reg>
 8003b20:	4602      	mov	r2, r0
 8003b22:	697b      	ldr	r3, [r7, #20]
 8003b24:	4413      	add	r3, r2
 8003b26:	617b      	str	r3, [r7, #20]
  }

  return ret;
 8003b28:	697b      	ldr	r3, [r7, #20]
}
 8003b2a:	4618      	mov	r0, r3
 8003b2c:	3718      	adds	r7, #24
 8003b2e:	46bd      	mov	sp, r7
 8003b30:	bd80      	pop	{r7, pc}

08003b32 <lsm6dsv16x_gy_mode_set>:
  * @param  val      GY_HIGH_PERFORMANCE_MD, GY_HIGH_ACCURACY_ODR_MD, GY_SLEEP_MD, GY_LOW_POWER_MD,
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dsv16x_gy_mode_set(stmdev_ctx_t *ctx, lsm6dsv16x_gy_mode_t val)
{
 8003b32:	b580      	push	{r7, lr}
 8003b34:	b084      	sub	sp, #16
 8003b36:	af00      	add	r7, sp, #0
 8003b38:	6078      	str	r0, [r7, #4]
 8003b3a:	460b      	mov	r3, r1
 8003b3c:	70fb      	strb	r3, [r7, #3]
  lsm6dsv16x_ctrl2_t ctrl2;
  int32_t ret;

  ret = lsm6dsv16x_read_reg(ctx, LSM6DSV16X_CTRL2, (uint8_t *)&ctrl2, 1);
 8003b3e:	f107 0208 	add.w	r2, r7, #8
 8003b42:	2301      	movs	r3, #1
 8003b44:	2111      	movs	r1, #17
 8003b46:	6878      	ldr	r0, [r7, #4]
 8003b48:	f7ff fe46 	bl	80037d8 <lsm6dsv16x_read_reg>
 8003b4c:	60f8      	str	r0, [r7, #12]
  if (ret == 0)
 8003b4e:	68fb      	ldr	r3, [r7, #12]
 8003b50:	2b00      	cmp	r3, #0
 8003b52:	d10f      	bne.n	8003b74 <lsm6dsv16x_gy_mode_set+0x42>
  {
    ctrl2.op_mode_g = (uint8_t)val & 0x07U;
 8003b54:	78fb      	ldrb	r3, [r7, #3]
 8003b56:	f003 0307 	and.w	r3, r3, #7
 8003b5a:	b2da      	uxtb	r2, r3
 8003b5c:	7a3b      	ldrb	r3, [r7, #8]
 8003b5e:	f362 1306 	bfi	r3, r2, #4, #3
 8003b62:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsv16x_write_reg(ctx, LSM6DSV16X_CTRL2, (uint8_t *)&ctrl2, 1);
 8003b64:	f107 0208 	add.w	r2, r7, #8
 8003b68:	2301      	movs	r3, #1
 8003b6a:	2111      	movs	r1, #17
 8003b6c:	6878      	ldr	r0, [r7, #4]
 8003b6e:	f7ff fe4b 	bl	8003808 <lsm6dsv16x_write_reg>
 8003b72:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8003b74:	68fb      	ldr	r3, [r7, #12]
}
 8003b76:	4618      	mov	r0, r3
 8003b78:	3710      	adds	r7, #16
 8003b7a:	46bd      	mov	sp, r7
 8003b7c:	bd80      	pop	{r7, pc}

08003b7e <lsm6dsv16x_block_data_update_set>:
  * @param  val      Block Data Update (BDU): output registers are not updated until LSB and MSB have been read).
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dsv16x_block_data_update_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8003b7e:	b580      	push	{r7, lr}
 8003b80:	b084      	sub	sp, #16
 8003b82:	af00      	add	r7, sp, #0
 8003b84:	6078      	str	r0, [r7, #4]
 8003b86:	460b      	mov	r3, r1
 8003b88:	70fb      	strb	r3, [r7, #3]
  lsm6dsv16x_ctrl3_t ctrl3;
  int32_t ret;

  ret = lsm6dsv16x_read_reg(ctx, LSM6DSV16X_CTRL3, (uint8_t *)&ctrl3, 1);
 8003b8a:	f107 0208 	add.w	r2, r7, #8
 8003b8e:	2301      	movs	r3, #1
 8003b90:	2112      	movs	r1, #18
 8003b92:	6878      	ldr	r0, [r7, #4]
 8003b94:	f7ff fe20 	bl	80037d8 <lsm6dsv16x_read_reg>
 8003b98:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8003b9a:	68fb      	ldr	r3, [r7, #12]
 8003b9c:	2b00      	cmp	r3, #0
 8003b9e:	d10f      	bne.n	8003bc0 <lsm6dsv16x_block_data_update_set+0x42>
  {
    ctrl3.bdu = val;
 8003ba0:	78fb      	ldrb	r3, [r7, #3]
 8003ba2:	f003 0301 	and.w	r3, r3, #1
 8003ba6:	b2da      	uxtb	r2, r3
 8003ba8:	7a3b      	ldrb	r3, [r7, #8]
 8003baa:	f362 1386 	bfi	r3, r2, #6, #1
 8003bae:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsv16x_write_reg(ctx, LSM6DSV16X_CTRL3, (uint8_t *)&ctrl3, 1);
 8003bb0:	f107 0208 	add.w	r2, r7, #8
 8003bb4:	2301      	movs	r3, #1
 8003bb6:	2112      	movs	r1, #18
 8003bb8:	6878      	ldr	r0, [r7, #4]
 8003bba:	f7ff fe25 	bl	8003808 <lsm6dsv16x_write_reg>
 8003bbe:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8003bc0:	68fb      	ldr	r3, [r7, #12]
}
 8003bc2:	4618      	mov	r0, r3
 8003bc4:	3710      	adds	r7, #16
 8003bc6:	46bd      	mov	sp, r7
 8003bc8:	bd80      	pop	{r7, pc}

08003bca <lsm6dsv16x_odr_trig_cfg_set>:
  * @param  val      number of data in the reference period.
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dsv16x_odr_trig_cfg_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8003bca:	b580      	push	{r7, lr}
 8003bcc:	b084      	sub	sp, #16
 8003bce:	af00      	add	r7, sp, #0
 8003bd0:	6078      	str	r0, [r7, #4]
 8003bd2:	460b      	mov	r3, r1
 8003bd4:	70fb      	strb	r3, [r7, #3]
  lsm6dsv16x_odr_trig_cfg_t odr_trig;
  int32_t ret;

  if (val >= 1U && val <= 3U) {
 8003bd6:	78fb      	ldrb	r3, [r7, #3]
 8003bd8:	2b00      	cmp	r3, #0
 8003bda:	d005      	beq.n	8003be8 <lsm6dsv16x_odr_trig_cfg_set+0x1e>
 8003bdc:	78fb      	ldrb	r3, [r7, #3]
 8003bde:	2b03      	cmp	r3, #3
 8003be0:	d802      	bhi.n	8003be8 <lsm6dsv16x_odr_trig_cfg_set+0x1e>
    return -1;
 8003be2:	f04f 33ff 	mov.w	r3, #4294967295
 8003be6:	e015      	b.n	8003c14 <lsm6dsv16x_odr_trig_cfg_set+0x4a>
  }

  ret = lsm6dsv16x_read_reg(ctx, LSM6DSV16X_ODR_TRIG_CFG, (uint8_t *)&odr_trig, 1);
 8003be8:	f107 0208 	add.w	r2, r7, #8
 8003bec:	2301      	movs	r3, #1
 8003bee:	2106      	movs	r1, #6
 8003bf0:	6878      	ldr	r0, [r7, #4]
 8003bf2:	f7ff fdf1 	bl	80037d8 <lsm6dsv16x_read_reg>
 8003bf6:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8003bf8:	68fb      	ldr	r3, [r7, #12]
 8003bfa:	2b00      	cmp	r3, #0
 8003bfc:	d109      	bne.n	8003c12 <lsm6dsv16x_odr_trig_cfg_set+0x48>
  {
    odr_trig.odr_trig_nodr = val;
 8003bfe:	78fb      	ldrb	r3, [r7, #3]
 8003c00:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsv16x_write_reg(ctx, LSM6DSV16X_ODR_TRIG_CFG, (uint8_t *)&odr_trig, 1);
 8003c02:	f107 0208 	add.w	r2, r7, #8
 8003c06:	2301      	movs	r3, #1
 8003c08:	2106      	movs	r1, #6
 8003c0a:	6878      	ldr	r0, [r7, #4]
 8003c0c:	f7ff fdfc 	bl	8003808 <lsm6dsv16x_write_reg>
 8003c10:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8003c12:	68fb      	ldr	r3, [r7, #12]
}
 8003c14:	4618      	mov	r0, r3
 8003c16:	3710      	adds	r7, #16
 8003c18:	46bd      	mov	sp, r7
 8003c1a:	bd80      	pop	{r7, pc}

08003c1c <lsm6dsv16x_gy_full_scale_set>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dsv16x_gy_full_scale_set(stmdev_ctx_t *ctx,
                                     lsm6dsv16x_gy_full_scale_t val)
{
 8003c1c:	b580      	push	{r7, lr}
 8003c1e:	b084      	sub	sp, #16
 8003c20:	af00      	add	r7, sp, #0
 8003c22:	6078      	str	r0, [r7, #4]
 8003c24:	460b      	mov	r3, r1
 8003c26:	70fb      	strb	r3, [r7, #3]
  lsm6dsv16x_ctrl6_t ctrl6;
  int32_t ret;

  ret = lsm6dsv16x_read_reg(ctx, LSM6DSV16X_CTRL6, (uint8_t *)&ctrl6, 1);
 8003c28:	f107 0208 	add.w	r2, r7, #8
 8003c2c:	2301      	movs	r3, #1
 8003c2e:	2115      	movs	r1, #21
 8003c30:	6878      	ldr	r0, [r7, #4]
 8003c32:	f7ff fdd1 	bl	80037d8 <lsm6dsv16x_read_reg>
 8003c36:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	2b00      	cmp	r3, #0
 8003c3c:	d10f      	bne.n	8003c5e <lsm6dsv16x_gy_full_scale_set+0x42>
  {
    ctrl6.fs_g = (uint8_t)val & 0xfu;
 8003c3e:	78fb      	ldrb	r3, [r7, #3]
 8003c40:	f003 030f 	and.w	r3, r3, #15
 8003c44:	b2da      	uxtb	r2, r3
 8003c46:	7a3b      	ldrb	r3, [r7, #8]
 8003c48:	f362 0303 	bfi	r3, r2, #0, #4
 8003c4c:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsv16x_write_reg(ctx, LSM6DSV16X_CTRL6, (uint8_t *)&ctrl6, 1);
 8003c4e:	f107 0208 	add.w	r2, r7, #8
 8003c52:	2301      	movs	r3, #1
 8003c54:	2115      	movs	r1, #21
 8003c56:	6878      	ldr	r0, [r7, #4]
 8003c58:	f7ff fdd6 	bl	8003808 <lsm6dsv16x_write_reg>
 8003c5c:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8003c5e:	68fb      	ldr	r3, [r7, #12]
}
 8003c60:	4618      	mov	r0, r3
 8003c62:	3710      	adds	r7, #16
 8003c64:	46bd      	mov	sp, r7
 8003c66:	bd80      	pop	{r7, pc}

08003c68 <lsm6dsv16x_xl_full_scale_set>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dsv16x_xl_full_scale_set(stmdev_ctx_t *ctx,
                                     lsm6dsv16x_xl_full_scale_t val)
{
 8003c68:	b580      	push	{r7, lr}
 8003c6a:	b084      	sub	sp, #16
 8003c6c:	af00      	add	r7, sp, #0
 8003c6e:	6078      	str	r0, [r7, #4]
 8003c70:	460b      	mov	r3, r1
 8003c72:	70fb      	strb	r3, [r7, #3]
  lsm6dsv16x_ctrl8_t ctrl8;
  int32_t ret;

  ret = lsm6dsv16x_read_reg(ctx, LSM6DSV16X_CTRL8, (uint8_t *)&ctrl8, 1);
 8003c74:	f107 0208 	add.w	r2, r7, #8
 8003c78:	2301      	movs	r3, #1
 8003c7a:	2117      	movs	r1, #23
 8003c7c:	6878      	ldr	r0, [r7, #4]
 8003c7e:	f7ff fdab 	bl	80037d8 <lsm6dsv16x_read_reg>
 8003c82:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	2b00      	cmp	r3, #0
 8003c88:	d10f      	bne.n	8003caa <lsm6dsv16x_xl_full_scale_set+0x42>
  {
    ctrl8.fs_xl = (uint8_t)val & 0x3U;
 8003c8a:	78fb      	ldrb	r3, [r7, #3]
 8003c8c:	f003 0303 	and.w	r3, r3, #3
 8003c90:	b2da      	uxtb	r2, r3
 8003c92:	7a3b      	ldrb	r3, [r7, #8]
 8003c94:	f362 0301 	bfi	r3, r2, #0, #2
 8003c98:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsv16x_write_reg(ctx, LSM6DSV16X_CTRL8, (uint8_t *)&ctrl8, 1);
 8003c9a:	f107 0208 	add.w	r2, r7, #8
 8003c9e:	2301      	movs	r3, #1
 8003ca0:	2117      	movs	r1, #23
 8003ca2:	6878      	ldr	r0, [r7, #4]
 8003ca4:	f7ff fdb0 	bl	8003808 <lsm6dsv16x_write_reg>
 8003ca8:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8003caa:	68fb      	ldr	r3, [r7, #12]
}
 8003cac:	4618      	mov	r0, r3
 8003cae:	3710      	adds	r7, #16
 8003cb0:	46bd      	mov	sp, r7
 8003cb2:	bd80      	pop	{r7, pc}

08003cb4 <lsm6dsv16x_pin_int1_route_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsv16x_pin_int1_route_set(stmdev_ctx_t *ctx,
                                      lsm6dsv16x_pin_int_route_t *val)
{
 8003cb4:	b580      	push	{r7, lr}
 8003cb6:	b086      	sub	sp, #24
 8003cb8:	af00      	add	r7, sp, #0
 8003cba:	6078      	str	r0, [r7, #4]
 8003cbc:	6039      	str	r1, [r7, #0]
  lsm6dsv16x_int1_ctrl_t          int1_ctrl;
  lsm6dsv16x_md1_cfg_t            md1_cfg;
  int32_t ret;

  ret = lsm6dsv16x_read_reg(ctx, LSM6DSV16X_INT1_CTRL, (uint8_t *)&int1_ctrl, 1);
 8003cbe:	f107 0210 	add.w	r2, r7, #16
 8003cc2:	2301      	movs	r3, #1
 8003cc4:	210d      	movs	r1, #13
 8003cc6:	6878      	ldr	r0, [r7, #4]
 8003cc8:	f7ff fd86 	bl	80037d8 <lsm6dsv16x_read_reg>
 8003ccc:	6178      	str	r0, [r7, #20]
  if (ret != 0) { return ret; }
 8003cce:	697b      	ldr	r3, [r7, #20]
 8003cd0:	2b00      	cmp	r3, #0
 8003cd2:	d001      	beq.n	8003cd8 <lsm6dsv16x_pin_int1_route_set+0x24>
 8003cd4:	697b      	ldr	r3, [r7, #20]
 8003cd6:	e0a0      	b.n	8003e1a <lsm6dsv16x_pin_int1_route_set+0x166>

  int1_ctrl.int1_drdy_xl       = val->drdy_xl;
 8003cd8:	683b      	ldr	r3, [r7, #0]
 8003cda:	781b      	ldrb	r3, [r3, #0]
 8003cdc:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8003ce0:	b2da      	uxtb	r2, r3
 8003ce2:	7c3b      	ldrb	r3, [r7, #16]
 8003ce4:	f362 0300 	bfi	r3, r2, #0, #1
 8003ce8:	743b      	strb	r3, [r7, #16]
  int1_ctrl.int1_drdy_g        = val->drdy_g;
 8003cea:	683b      	ldr	r3, [r7, #0]
 8003cec:	781b      	ldrb	r3, [r3, #0]
 8003cee:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8003cf2:	b2da      	uxtb	r2, r3
 8003cf4:	7c3b      	ldrb	r3, [r7, #16]
 8003cf6:	f362 0341 	bfi	r3, r2, #1, #1
 8003cfa:	743b      	strb	r3, [r7, #16]
  int1_ctrl.int1_fifo_th       = val->fifo_th;
 8003cfc:	683b      	ldr	r3, [r7, #0]
 8003cfe:	781b      	ldrb	r3, [r3, #0]
 8003d00:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8003d04:	b2da      	uxtb	r2, r3
 8003d06:	7c3b      	ldrb	r3, [r7, #16]
 8003d08:	f362 03c3 	bfi	r3, r2, #3, #1
 8003d0c:	743b      	strb	r3, [r7, #16]
  int1_ctrl.int1_fifo_ovr      = val->fifo_ovr;
 8003d0e:	683b      	ldr	r3, [r7, #0]
 8003d10:	781b      	ldrb	r3, [r3, #0]
 8003d12:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8003d16:	b2da      	uxtb	r2, r3
 8003d18:	7c3b      	ldrb	r3, [r7, #16]
 8003d1a:	f362 1304 	bfi	r3, r2, #4, #1
 8003d1e:	743b      	strb	r3, [r7, #16]
  int1_ctrl.int1_fifo_full     = val->fifo_full;
 8003d20:	683b      	ldr	r3, [r7, #0]
 8003d22:	781b      	ldrb	r3, [r3, #0]
 8003d24:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8003d28:	b2da      	uxtb	r2, r3
 8003d2a:	7c3b      	ldrb	r3, [r7, #16]
 8003d2c:	f362 1345 	bfi	r3, r2, #5, #1
 8003d30:	743b      	strb	r3, [r7, #16]
  int1_ctrl.int1_cnt_bdr       = val->cnt_bdr;
 8003d32:	683b      	ldr	r3, [r7, #0]
 8003d34:	781b      	ldrb	r3, [r3, #0]
 8003d36:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8003d3a:	b2da      	uxtb	r2, r3
 8003d3c:	7c3b      	ldrb	r3, [r7, #16]
 8003d3e:	f362 1386 	bfi	r3, r2, #6, #1
 8003d42:	743b      	strb	r3, [r7, #16]

  ret = lsm6dsv16x_write_reg(ctx, LSM6DSV16X_INT1_CTRL, (uint8_t *)&int1_ctrl, 1);
 8003d44:	f107 0210 	add.w	r2, r7, #16
 8003d48:	2301      	movs	r3, #1
 8003d4a:	210d      	movs	r1, #13
 8003d4c:	6878      	ldr	r0, [r7, #4]
 8003d4e:	f7ff fd5b 	bl	8003808 <lsm6dsv16x_write_reg>
 8003d52:	6178      	str	r0, [r7, #20]
  if (ret != 0) { return ret; }
 8003d54:	697b      	ldr	r3, [r7, #20]
 8003d56:	2b00      	cmp	r3, #0
 8003d58:	d001      	beq.n	8003d5e <lsm6dsv16x_pin_int1_route_set+0xaa>
 8003d5a:	697b      	ldr	r3, [r7, #20]
 8003d5c:	e05d      	b.n	8003e1a <lsm6dsv16x_pin_int1_route_set+0x166>

  ret = lsm6dsv16x_read_reg(ctx, LSM6DSV16X_MD1_CFG, (uint8_t *)&md1_cfg, 1);
 8003d5e:	f107 020c 	add.w	r2, r7, #12
 8003d62:	2301      	movs	r3, #1
 8003d64:	215e      	movs	r1, #94	@ 0x5e
 8003d66:	6878      	ldr	r0, [r7, #4]
 8003d68:	f7ff fd36 	bl	80037d8 <lsm6dsv16x_read_reg>
 8003d6c:	6178      	str	r0, [r7, #20]
  if (ret != 0) { return ret; }
 8003d6e:	697b      	ldr	r3, [r7, #20]
 8003d70:	2b00      	cmp	r3, #0
 8003d72:	d001      	beq.n	8003d78 <lsm6dsv16x_pin_int1_route_set+0xc4>
 8003d74:	697b      	ldr	r3, [r7, #20]
 8003d76:	e050      	b.n	8003e1a <lsm6dsv16x_pin_int1_route_set+0x166>

  md1_cfg.int1_shub            = val->shub;
 8003d78:	683b      	ldr	r3, [r7, #0]
 8003d7a:	785b      	ldrb	r3, [r3, #1]
 8003d7c:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8003d80:	b2da      	uxtb	r2, r3
 8003d82:	7b3b      	ldrb	r3, [r7, #12]
 8003d84:	f362 0300 	bfi	r3, r2, #0, #1
 8003d88:	733b      	strb	r3, [r7, #12]
  md1_cfg.int1_emb_func        = val->emb_func;
 8003d8a:	683b      	ldr	r3, [r7, #0]
 8003d8c:	785b      	ldrb	r3, [r3, #1]
 8003d8e:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8003d92:	b2da      	uxtb	r2, r3
 8003d94:	7b3b      	ldrb	r3, [r7, #12]
 8003d96:	f362 0341 	bfi	r3, r2, #1, #1
 8003d9a:	733b      	strb	r3, [r7, #12]
  md1_cfg.int1_6d              = val->sixd;
 8003d9c:	683b      	ldr	r3, [r7, #0]
 8003d9e:	785b      	ldrb	r3, [r3, #1]
 8003da0:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8003da4:	b2da      	uxtb	r2, r3
 8003da6:	7b3b      	ldrb	r3, [r7, #12]
 8003da8:	f362 0382 	bfi	r3, r2, #2, #1
 8003dac:	733b      	strb	r3, [r7, #12]
  md1_cfg.int1_single_tap      = val->single_tap;
 8003dae:	683b      	ldr	r3, [r7, #0]
 8003db0:	785b      	ldrb	r3, [r3, #1]
 8003db2:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8003db6:	b2da      	uxtb	r2, r3
 8003db8:	7b3b      	ldrb	r3, [r7, #12]
 8003dba:	f362 1386 	bfi	r3, r2, #6, #1
 8003dbe:	733b      	strb	r3, [r7, #12]
  md1_cfg.int1_double_tap      = val->double_tap;
 8003dc0:	683b      	ldr	r3, [r7, #0]
 8003dc2:	785b      	ldrb	r3, [r3, #1]
 8003dc4:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8003dc8:	b2da      	uxtb	r2, r3
 8003dca:	7b3b      	ldrb	r3, [r7, #12]
 8003dcc:	f362 03c3 	bfi	r3, r2, #3, #1
 8003dd0:	733b      	strb	r3, [r7, #12]
  md1_cfg.int1_wu              = val->wakeup;
 8003dd2:	683b      	ldr	r3, [r7, #0]
 8003dd4:	785b      	ldrb	r3, [r3, #1]
 8003dd6:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8003dda:	b2da      	uxtb	r2, r3
 8003ddc:	7b3b      	ldrb	r3, [r7, #12]
 8003dde:	f362 1345 	bfi	r3, r2, #5, #1
 8003de2:	733b      	strb	r3, [r7, #12]
  md1_cfg.int1_ff              = val->freefall;
 8003de4:	683b      	ldr	r3, [r7, #0]
 8003de6:	785b      	ldrb	r3, [r3, #1]
 8003de8:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8003dec:	b2da      	uxtb	r2, r3
 8003dee:	7b3b      	ldrb	r3, [r7, #12]
 8003df0:	f362 1304 	bfi	r3, r2, #4, #1
 8003df4:	733b      	strb	r3, [r7, #12]
  md1_cfg.int1_sleep_change    = val->sleep_change;
 8003df6:	683b      	ldr	r3, [r7, #0]
 8003df8:	789b      	ldrb	r3, [r3, #2]
 8003dfa:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8003dfe:	b2da      	uxtb	r2, r3
 8003e00:	7b3b      	ldrb	r3, [r7, #12]
 8003e02:	f362 13c7 	bfi	r3, r2, #7, #1
 8003e06:	733b      	strb	r3, [r7, #12]

  ret = lsm6dsv16x_write_reg(ctx, LSM6DSV16X_MD1_CFG, (uint8_t *)&md1_cfg, 1);
 8003e08:	f107 020c 	add.w	r2, r7, #12
 8003e0c:	2301      	movs	r3, #1
 8003e0e:	215e      	movs	r1, #94	@ 0x5e
 8003e10:	6878      	ldr	r0, [r7, #4]
 8003e12:	f7ff fcf9 	bl	8003808 <lsm6dsv16x_write_reg>
 8003e16:	6178      	str	r0, [r7, #20]

  return ret;
 8003e18:	697b      	ldr	r3, [r7, #20]
}
 8003e1a:	4618      	mov	r0, r3
 8003e1c:	3718      	adds	r7, #24
 8003e1e:	46bd      	mov	sp, r7
 8003e20:	bd80      	pop	{r7, pc}

08003e22 <lsm6dsv16x_den_polarity_set>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dsv16x_den_polarity_set(stmdev_ctx_t *ctx,
                                    lsm6dsv16x_den_polarity_t val)
{
 8003e22:	b580      	push	{r7, lr}
 8003e24:	b084      	sub	sp, #16
 8003e26:	af00      	add	r7, sp, #0
 8003e28:	6078      	str	r0, [r7, #4]
 8003e2a:	460b      	mov	r3, r1
 8003e2c:	70fb      	strb	r3, [r7, #3]
  lsm6dsv16x_ctrl4_t ctrl4;
  int32_t ret;

  ret = lsm6dsv16x_read_reg(ctx, LSM6DSV16X_CTRL4, (uint8_t *)&ctrl4, 1);
 8003e2e:	f107 0208 	add.w	r2, r7, #8
 8003e32:	2301      	movs	r3, #1
 8003e34:	2113      	movs	r1, #19
 8003e36:	6878      	ldr	r0, [r7, #4]
 8003e38:	f7ff fcce 	bl	80037d8 <lsm6dsv16x_read_reg>
 8003e3c:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8003e3e:	68fb      	ldr	r3, [r7, #12]
 8003e40:	2b00      	cmp	r3, #0
 8003e42:	d10f      	bne.n	8003e64 <lsm6dsv16x_den_polarity_set+0x42>
  {
    ctrl4.int2_in_lh = (uint8_t)val & 0x1U;
 8003e44:	78fb      	ldrb	r3, [r7, #3]
 8003e46:	f003 0301 	and.w	r3, r3, #1
 8003e4a:	b2da      	uxtb	r2, r3
 8003e4c:	7a3b      	ldrb	r3, [r7, #8]
 8003e4e:	f362 0300 	bfi	r3, r2, #0, #1
 8003e52:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsv16x_write_reg(ctx, LSM6DSV16X_CTRL4, (uint8_t *)&ctrl4, 1);
 8003e54:	f107 0208 	add.w	r2, r7, #8
 8003e58:	2301      	movs	r3, #1
 8003e5a:	2113      	movs	r1, #19
 8003e5c:	6878      	ldr	r0, [r7, #4]
 8003e5e:	f7ff fcd3 	bl	8003808 <lsm6dsv16x_write_reg>
 8003e62:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8003e64:	68fb      	ldr	r3, [r7, #12]
}
 8003e66:	4618      	mov	r0, r3
 8003e68:	3710      	adds	r7, #16
 8003e6a:	46bd      	mov	sp, r7
 8003e6c:	bd80      	pop	{r7, pc}

08003e6e <lsm6dsv16x_fifo_watermark_set>:
  * @param  val      FIFO watermark threshold (1 LSb = TAG (1 Byte) + 1 sensor (6 Bytes) written in FIFO).
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dsv16x_fifo_watermark_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8003e6e:	b580      	push	{r7, lr}
 8003e70:	b084      	sub	sp, #16
 8003e72:	af00      	add	r7, sp, #0
 8003e74:	6078      	str	r0, [r7, #4]
 8003e76:	460b      	mov	r3, r1
 8003e78:	70fb      	strb	r3, [r7, #3]
  lsm6dsv16x_fifo_ctrl1_t fifo_ctrl1;
  int32_t ret;

  ret = lsm6dsv16x_read_reg(ctx, LSM6DSV16X_FIFO_CTRL1, (uint8_t *)&fifo_ctrl1, 1);
 8003e7a:	f107 0208 	add.w	r2, r7, #8
 8003e7e:	2301      	movs	r3, #1
 8003e80:	2107      	movs	r1, #7
 8003e82:	6878      	ldr	r0, [r7, #4]
 8003e84:	f7ff fca8 	bl	80037d8 <lsm6dsv16x_read_reg>
 8003e88:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8003e8a:	68fb      	ldr	r3, [r7, #12]
 8003e8c:	2b00      	cmp	r3, #0
 8003e8e:	d109      	bne.n	8003ea4 <lsm6dsv16x_fifo_watermark_set+0x36>
  {
    fifo_ctrl1.wtm = val;
 8003e90:	78fb      	ldrb	r3, [r7, #3]
 8003e92:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsv16x_write_reg(ctx, LSM6DSV16X_FIFO_CTRL1, (uint8_t *)&fifo_ctrl1, 1);
 8003e94:	f107 0208 	add.w	r2, r7, #8
 8003e98:	2301      	movs	r3, #1
 8003e9a:	2107      	movs	r1, #7
 8003e9c:	6878      	ldr	r0, [r7, #4]
 8003e9e:	f7ff fcb3 	bl	8003808 <lsm6dsv16x_write_reg>
 8003ea2:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8003ea4:	68fb      	ldr	r3, [r7, #12]
}
 8003ea6:	4618      	mov	r0, r3
 8003ea8:	3710      	adds	r7, #16
 8003eaa:	46bd      	mov	sp, r7
 8003eac:	bd80      	pop	{r7, pc}

08003eae <lsm6dsv16x_fifo_xl_batch_set>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dsv16x_fifo_xl_batch_set(stmdev_ctx_t *ctx,
                                     lsm6dsv16x_fifo_xl_batch_t val)
{
 8003eae:	b580      	push	{r7, lr}
 8003eb0:	b084      	sub	sp, #16
 8003eb2:	af00      	add	r7, sp, #0
 8003eb4:	6078      	str	r0, [r7, #4]
 8003eb6:	460b      	mov	r3, r1
 8003eb8:	70fb      	strb	r3, [r7, #3]
  lsm6dsv16x_fifo_ctrl3_t fifo_ctrl3;
  int32_t ret;

  ret = lsm6dsv16x_read_reg(ctx, LSM6DSV16X_FIFO_CTRL3, (uint8_t *)&fifo_ctrl3, 1);
 8003eba:	f107 0208 	add.w	r2, r7, #8
 8003ebe:	2301      	movs	r3, #1
 8003ec0:	2109      	movs	r1, #9
 8003ec2:	6878      	ldr	r0, [r7, #4]
 8003ec4:	f7ff fc88 	bl	80037d8 <lsm6dsv16x_read_reg>
 8003ec8:	60f8      	str	r0, [r7, #12]
  if (ret == 0)
 8003eca:	68fb      	ldr	r3, [r7, #12]
 8003ecc:	2b00      	cmp	r3, #0
 8003ece:	d10f      	bne.n	8003ef0 <lsm6dsv16x_fifo_xl_batch_set+0x42>
  {
    fifo_ctrl3.bdr_xl = (uint8_t)val & 0xFu;
 8003ed0:	78fb      	ldrb	r3, [r7, #3]
 8003ed2:	f003 030f 	and.w	r3, r3, #15
 8003ed6:	b2da      	uxtb	r2, r3
 8003ed8:	7a3b      	ldrb	r3, [r7, #8]
 8003eda:	f362 0303 	bfi	r3, r2, #0, #4
 8003ede:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsv16x_write_reg(ctx, LSM6DSV16X_FIFO_CTRL3, (uint8_t *)&fifo_ctrl3, 1);
 8003ee0:	f107 0208 	add.w	r2, r7, #8
 8003ee4:	2301      	movs	r3, #1
 8003ee6:	2109      	movs	r1, #9
 8003ee8:	6878      	ldr	r0, [r7, #4]
 8003eea:	f7ff fc8d 	bl	8003808 <lsm6dsv16x_write_reg>
 8003eee:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8003ef0:	68fb      	ldr	r3, [r7, #12]
}
 8003ef2:	4618      	mov	r0, r3
 8003ef4:	3710      	adds	r7, #16
 8003ef6:	46bd      	mov	sp, r7
 8003ef8:	bd80      	pop	{r7, pc}

08003efa <lsm6dsv16x_fifo_gy_batch_set>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dsv16x_fifo_gy_batch_set(stmdev_ctx_t *ctx,
                                     lsm6dsv16x_fifo_gy_batch_t val)
{
 8003efa:	b580      	push	{r7, lr}
 8003efc:	b084      	sub	sp, #16
 8003efe:	af00      	add	r7, sp, #0
 8003f00:	6078      	str	r0, [r7, #4]
 8003f02:	460b      	mov	r3, r1
 8003f04:	70fb      	strb	r3, [r7, #3]
  lsm6dsv16x_fifo_ctrl3_t fifo_ctrl3;
  int32_t ret;

  ret = lsm6dsv16x_read_reg(ctx, LSM6DSV16X_FIFO_CTRL3, (uint8_t *)&fifo_ctrl3, 1);
 8003f06:	f107 0208 	add.w	r2, r7, #8
 8003f0a:	2301      	movs	r3, #1
 8003f0c:	2109      	movs	r1, #9
 8003f0e:	6878      	ldr	r0, [r7, #4]
 8003f10:	f7ff fc62 	bl	80037d8 <lsm6dsv16x_read_reg>
 8003f14:	60f8      	str	r0, [r7, #12]
  if (ret == 0)
 8003f16:	68fb      	ldr	r3, [r7, #12]
 8003f18:	2b00      	cmp	r3, #0
 8003f1a:	d10f      	bne.n	8003f3c <lsm6dsv16x_fifo_gy_batch_set+0x42>
  {
    fifo_ctrl3.bdr_gy = (uint8_t)val & 0x0Fu;
 8003f1c:	78fb      	ldrb	r3, [r7, #3]
 8003f1e:	f003 030f 	and.w	r3, r3, #15
 8003f22:	b2da      	uxtb	r2, r3
 8003f24:	7a3b      	ldrb	r3, [r7, #8]
 8003f26:	f362 1307 	bfi	r3, r2, #4, #4
 8003f2a:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsv16x_write_reg(ctx, LSM6DSV16X_FIFO_CTRL3, (uint8_t *)&fifo_ctrl3, 1);
 8003f2c:	f107 0208 	add.w	r2, r7, #8
 8003f30:	2301      	movs	r3, #1
 8003f32:	2109      	movs	r1, #9
 8003f34:	6878      	ldr	r0, [r7, #4]
 8003f36:	f7ff fc67 	bl	8003808 <lsm6dsv16x_write_reg>
 8003f3a:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8003f3c:	68fb      	ldr	r3, [r7, #12]
}
 8003f3e:	4618      	mov	r0, r3
 8003f40:	3710      	adds	r7, #16
 8003f42:	46bd      	mov	sp, r7
 8003f44:	bd80      	pop	{r7, pc}

08003f46 <lsm6dsv16x_fifo_mode_set>:
  * @param  val      BYPASS_MODE, FIFO_MODE, STREAM_WTM_TO_FULL_MODE, STREAM_TO_FIFO_MODE, BYPASS_TO_STREAM_MODE, STREAM_MODE, BYPASS_TO_FIFO_MODE,
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dsv16x_fifo_mode_set(stmdev_ctx_t *ctx, lsm6dsv16x_fifo_mode_t val)
{
 8003f46:	b580      	push	{r7, lr}
 8003f48:	b084      	sub	sp, #16
 8003f4a:	af00      	add	r7, sp, #0
 8003f4c:	6078      	str	r0, [r7, #4]
 8003f4e:	460b      	mov	r3, r1
 8003f50:	70fb      	strb	r3, [r7, #3]
  lsm6dsv16x_fifo_ctrl4_t fifo_ctrl4;
  int32_t ret;

  ret = lsm6dsv16x_read_reg(ctx, LSM6DSV16X_FIFO_CTRL4, (uint8_t *)&fifo_ctrl4, 1);
 8003f52:	f107 0208 	add.w	r2, r7, #8
 8003f56:	2301      	movs	r3, #1
 8003f58:	210a      	movs	r1, #10
 8003f5a:	6878      	ldr	r0, [r7, #4]
 8003f5c:	f7ff fc3c 	bl	80037d8 <lsm6dsv16x_read_reg>
 8003f60:	60f8      	str	r0, [r7, #12]
  if (ret == 0)
 8003f62:	68fb      	ldr	r3, [r7, #12]
 8003f64:	2b00      	cmp	r3, #0
 8003f66:	d10f      	bne.n	8003f88 <lsm6dsv16x_fifo_mode_set+0x42>
  {
    fifo_ctrl4.fifo_mode = (uint8_t)val & 0x07U;
 8003f68:	78fb      	ldrb	r3, [r7, #3]
 8003f6a:	f003 0307 	and.w	r3, r3, #7
 8003f6e:	b2da      	uxtb	r2, r3
 8003f70:	7a3b      	ldrb	r3, [r7, #8]
 8003f72:	f362 0302 	bfi	r3, r2, #0, #3
 8003f76:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsv16x_write_reg(ctx, LSM6DSV16X_FIFO_CTRL4, (uint8_t *)&fifo_ctrl4, 1);
 8003f78:	f107 0208 	add.w	r2, r7, #8
 8003f7c:	2301      	movs	r3, #1
 8003f7e:	210a      	movs	r1, #10
 8003f80:	6878      	ldr	r0, [r7, #4]
 8003f82:	f7ff fc41 	bl	8003808 <lsm6dsv16x_write_reg>
 8003f86:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8003f88:	68fb      	ldr	r3, [r7, #12]
}
 8003f8a:	4618      	mov	r0, r3
 8003f8c:	3710      	adds	r7, #16
 8003f8e:	46bd      	mov	sp, r7
 8003f90:	bd80      	pop	{r7, pc}

08003f92 <lsm6dsv16x_ui_i2c_i3c_mode_set>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dsv16x_ui_i2c_i3c_mode_set(stmdev_ctx_t *ctx,
                                       lsm6dsv16x_ui_i2c_i3c_mode_t val)
{
 8003f92:	b580      	push	{r7, lr}
 8003f94:	b084      	sub	sp, #16
 8003f96:	af00      	add	r7, sp, #0
 8003f98:	6078      	str	r0, [r7, #4]
 8003f9a:	460b      	mov	r3, r1
 8003f9c:	70fb      	strb	r3, [r7, #3]
  lsm6dsv16x_if_cfg_t if_cfg;
  int32_t ret;

  ret = lsm6dsv16x_read_reg(ctx, LSM6DSV16X_IF_CFG, (uint8_t *)&if_cfg, 1);
 8003f9e:	f107 0208 	add.w	r2, r7, #8
 8003fa2:	2301      	movs	r3, #1
 8003fa4:	2103      	movs	r1, #3
 8003fa6:	6878      	ldr	r0, [r7, #4]
 8003fa8:	f7ff fc16 	bl	80037d8 <lsm6dsv16x_read_reg>
 8003fac:	60f8      	str	r0, [r7, #12]
  if (ret == 0)
 8003fae:	68fb      	ldr	r3, [r7, #12]
 8003fb0:	2b00      	cmp	r3, #0
 8003fb2:	d10f      	bne.n	8003fd4 <lsm6dsv16x_ui_i2c_i3c_mode_set+0x42>
  {
    if_cfg.i2c_i3c_disable = (uint8_t)val & 0x1U;
 8003fb4:	78fb      	ldrb	r3, [r7, #3]
 8003fb6:	f003 0301 	and.w	r3, r3, #1
 8003fba:	b2da      	uxtb	r2, r3
 8003fbc:	7a3b      	ldrb	r3, [r7, #8]
 8003fbe:	f362 0300 	bfi	r3, r2, #0, #1
 8003fc2:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsv16x_write_reg(ctx, LSM6DSV16X_IF_CFG, (uint8_t *)&if_cfg, 1);
 8003fc4:	f107 0208 	add.w	r2, r7, #8
 8003fc8:	2301      	movs	r3, #1
 8003fca:	2103      	movs	r1, #3
 8003fcc:	6878      	ldr	r0, [r7, #4]
 8003fce:	f7ff fc1b 	bl	8003808 <lsm6dsv16x_write_reg>
 8003fd2:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8003fd4:	68fb      	ldr	r3, [r7, #12]
}
 8003fd6:	4618      	mov	r0, r3
 8003fd8:	3710      	adds	r7, #16
 8003fda:	46bd      	mov	sp, r7
 8003fdc:	bd80      	pop	{r7, pc}

08003fde <acc_write>:
#include "global_variables.h"
#include "peripherals.h"

/* -------------SCRITTURA ACCELEROMETRO-------------*/
int32_t acc_write(void *handle, uint8_t reg, const uint8_t *bufp, uint16_t len)
{
 8003fde:	b580      	push	{r7, lr}
 8003fe0:	b084      	sub	sp, #16
 8003fe2:	af00      	add	r7, sp, #0
 8003fe4:	60f8      	str	r0, [r7, #12]
 8003fe6:	607a      	str	r2, [r7, #4]
 8003fe8:	461a      	mov	r2, r3
 8003fea:	460b      	mov	r3, r1
 8003fec:	72fb      	strb	r3, [r7, #11]
 8003fee:	4613      	mov	r3, r2
 8003ff0:	813b      	strh	r3, [r7, #8]
	HAL_GPIO_WritePin(ACC_nCS_GPIO_Port, ACC_nCS_Pin, GPIO_PIN_RESET);
 8003ff2:	2200      	movs	r2, #0
 8003ff4:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8003ff8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8003ffc:	f00a f8f2 	bl	800e1e4 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(handle, &reg, 1, 1000);
 8004000:	f107 010b 	add.w	r1, r7, #11
 8004004:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8004008:	2201      	movs	r2, #1
 800400a:	68f8      	ldr	r0, [r7, #12]
 800400c:	f00d fb73 	bl	80116f6 <HAL_SPI_Transmit>
	HAL_SPI_Transmit(handle, (uint8_t*) bufp, len, 1000);
 8004010:	893a      	ldrh	r2, [r7, #8]
 8004012:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8004016:	6879      	ldr	r1, [r7, #4]
 8004018:	68f8      	ldr	r0, [r7, #12]
 800401a:	f00d fb6c 	bl	80116f6 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(ACC_nCS_GPIO_Port, ACC_nCS_Pin, GPIO_PIN_SET);
 800401e:	2201      	movs	r2, #1
 8004020:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8004024:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8004028:	f00a f8dc 	bl	800e1e4 <HAL_GPIO_WritePin>
	return 0;
 800402c:	2300      	movs	r3, #0
}
 800402e:	4618      	mov	r0, r3
 8004030:	3710      	adds	r7, #16
 8004032:	46bd      	mov	sp, r7
 8004034:	bd80      	pop	{r7, pc}

08004036 <acc_read>:

/* -------------LETTURA ACCELEROMETRO-------------*/
int32_t acc_read(void *handle, uint8_t reg, uint8_t *bufp, uint16_t len)
{
 8004036:	b580      	push	{r7, lr}
 8004038:	b084      	sub	sp, #16
 800403a:	af00      	add	r7, sp, #0
 800403c:	60f8      	str	r0, [r7, #12]
 800403e:	607a      	str	r2, [r7, #4]
 8004040:	461a      	mov	r2, r3
 8004042:	460b      	mov	r3, r1
 8004044:	72fb      	strb	r3, [r7, #11]
 8004046:	4613      	mov	r3, r2
 8004048:	813b      	strh	r3, [r7, #8]
	reg |= 0x80;
 800404a:	7afb      	ldrb	r3, [r7, #11]
 800404c:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8004050:	b2db      	uxtb	r3, r3
 8004052:	72fb      	strb	r3, [r7, #11]
	HAL_GPIO_WritePin(ACC_nCS_GPIO_Port, ACC_nCS_Pin, GPIO_PIN_RESET);
 8004054:	2200      	movs	r2, #0
 8004056:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800405a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800405e:	f00a f8c1 	bl	800e1e4 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(handle, &reg, 1, 1000);
 8004062:	f107 010b 	add.w	r1, r7, #11
 8004066:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800406a:	2201      	movs	r2, #1
 800406c:	68f8      	ldr	r0, [r7, #12]
 800406e:	f00d fb42 	bl	80116f6 <HAL_SPI_Transmit>
	HAL_SPI_Receive(handle, bufp, len, 1000);
 8004072:	893a      	ldrh	r2, [r7, #8]
 8004074:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8004078:	6879      	ldr	r1, [r7, #4]
 800407a:	68f8      	ldr	r0, [r7, #12]
 800407c:	f00d fcb1 	bl	80119e2 <HAL_SPI_Receive>
	HAL_GPIO_WritePin(ACC_nCS_GPIO_Port, ACC_nCS_Pin, GPIO_PIN_SET);
 8004080:	2201      	movs	r2, #1
 8004082:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8004086:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800408a:	f00a f8ab 	bl	800e1e4 <HAL_GPIO_WritePin>
	return 0;
 800408e:	2300      	movs	r3, #0
}
 8004090:	4618      	mov	r0, r3
 8004092:	3710      	adds	r7, #16
 8004094:	46bd      	mov	sp, r7
 8004096:	bd80      	pop	{r7, pc}

08004098 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 8004098:	b480      	push	{r7}
 800409a:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 800409c:	f3bf 8f4f 	dsb	sy
}
 80040a0:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 80040a2:	4b06      	ldr	r3, [pc, #24]	@ (80040bc <__NVIC_SystemReset+0x24>)
 80040a4:	68db      	ldr	r3, [r3, #12]
 80040a6:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 80040aa:	4904      	ldr	r1, [pc, #16]	@ (80040bc <__NVIC_SystemReset+0x24>)
 80040ac:	4b04      	ldr	r3, [pc, #16]	@ (80040c0 <__NVIC_SystemReset+0x28>)
 80040ae:	4313      	orrs	r3, r2
 80040b0:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 80040b2:	f3bf 8f4f 	dsb	sy
}
 80040b6:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 80040b8:	bf00      	nop
 80040ba:	e7fd      	b.n	80040b8 <__NVIC_SystemReset+0x20>
 80040bc:	e000ed00 	.word	0xe000ed00
 80040c0:	05fa0004 	.word	0x05fa0004

080040c4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80040c4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80040c6:	b093      	sub	sp, #76	@ 0x4c
 80040c8:	af0c      	add	r7, sp, #48	@ 0x30
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80040ca:	f006 fe2c 	bl	800ad26 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80040ce:	f000 faf9 	bl	80046c4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80040d2:	f000 ffcd 	bl	8005070 <MX_GPIO_Init>
  MX_DMA_Init();
 80040d6:	f000 ff9d 	bl	8005014 <MX_DMA_Init>
  MX_QUADSPI_Init();
 80040da:	f000 fc1f 	bl	800491c <MX_QUADSPI_Init>
  MX_SPI2_Init();
 80040de:	f000 fcd5 	bl	8004a8c <MX_SPI2_Init>
  MX_USART1_UART_Init();
 80040e2:	f000 ff67 	bl	8004fb4 <MX_USART1_UART_Init>
  MX_ADC1_Init();
 80040e6:	f000 fb3f 	bl	8004768 <MX_ADC1_Init>
  MX_I2C3_Init();
 80040ea:	f000 fbd7 	bl	800489c <MX_I2C3_Init>
  MX_TIM2_Init();
 80040ee:	f000 fdf1 	bl	8004cd4 <MX_TIM2_Init>
  MX_UART4_Init();
 80040f2:	f000 ff2f 	bl	8004f54 <MX_UART4_Init>
  MX_TIM1_Init();
 80040f6:	f000 fd45 	bl	8004b84 <MX_TIM1_Init>
  MX_CRC_Init();
 80040fa:	f000 fbad 	bl	8004858 <MX_CRC_Init>
  MX_TIM4_Init();
 80040fe:	f000 feb5 	bl	8004e6c <MX_TIM4_Init>
  MX_RTC_Init();
 8004102:	f000 fc31 	bl	8004968 <MX_RTC_Init>
  MX_SPI3_Init();
 8004106:	f000 fcff 	bl	8004b08 <MX_SPI3_Init>
  MX_TIM3_Init();
 800410a:	f000 fe37 	bl	8004d7c <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
	System_Init();
 800410e:	f7fe ffd7 	bl	80030c0 <System_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1)
	{
		switch(state)
 8004112:	4bb4      	ldr	r3, [pc, #720]	@ (80043e4 <main+0x320>)
 8004114:	781b      	ldrb	r3, [r3, #0]
 8004116:	2b03      	cmp	r3, #3
 8004118:	f200 82ac 	bhi.w	8004674 <main+0x5b0>
 800411c:	a201      	add	r2, pc, #4	@ (adr r2, 8004124 <main+0x60>)
 800411e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004122:	bf00      	nop
 8004124:	08004135 	.word	0x08004135
 8004128:	08004257 	.word	0x08004257
 800412c:	0800426d 	.word	0x0800426d
 8004130:	08004557 	.word	0x08004557
		{
		case IDLE:
			if(flags.Message_Rx)
 8004134:	4bac      	ldr	r3, [pc, #688]	@ (80043e8 <main+0x324>)
 8004136:	781b      	ldrb	r3, [r3, #0]
 8004138:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800413c:	b2db      	uxtb	r3, r3
 800413e:	2b00      	cmp	r3, #0
 8004140:	d068      	beq.n	8004214 <main+0x150>
			{
				LED_Start(RED_LED, MEDIUM, HIGH);
 8004142:	2205      	movs	r2, #5
 8004144:	2101      	movs	r1, #1
 8004146:	2004      	movs	r0, #4
 8004148:	f7ff fa52 	bl	80035f0 <LED_Start>
				SIM_Parse_Command();
 800414c:	f7fd fd48 	bl	8001be0 <SIM_Parse_Command>
				flags.Message_Rx = 0;
 8004150:	4aa5      	ldr	r2, [pc, #660]	@ (80043e8 <main+0x324>)
 8004152:	7813      	ldrb	r3, [r2, #0]
 8004154:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004158:	7013      	strb	r3, [r2, #0]
				if(flags.CMD.Start_Meas)
 800415a:	4ba3      	ldr	r3, [pc, #652]	@ (80043e8 <main+0x324>)
 800415c:	789b      	ldrb	r3, [r3, #2]
 800415e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004162:	b2db      	uxtb	r3, r3
 8004164:	2b00      	cmp	r3, #0
 8004166:	d008      	beq.n	800417a <main+0xb6>
				{
					state = MEASURE_INIT_STATE;
 8004168:	4b9e      	ldr	r3, [pc, #632]	@ (80043e4 <main+0x320>)
 800416a:	2201      	movs	r2, #1
 800416c:	701a      	strb	r2, [r3, #0]
					flags.CMD.Start_Meas = 0;
 800416e:	4a9e      	ldr	r2, [pc, #632]	@ (80043e8 <main+0x324>)
 8004170:	7893      	ldrb	r3, [r2, #2]
 8004172:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004176:	7093      	strb	r3, [r2, #2]
 8004178:	e048      	b.n	800420c <main+0x148>
				}
				else if(flags.CMD.Set_Config)
 800417a:	4b9b      	ldr	r3, [pc, #620]	@ (80043e8 <main+0x324>)
 800417c:	789b      	ldrb	r3, [r3, #2]
 800417e:	f003 0310 	and.w	r3, r3, #16
 8004182:	b2db      	uxtb	r3, r3
 8004184:	2b00      	cmp	r3, #0
 8004186:	d007      	beq.n	8004198 <main+0xd4>
				{
					Apply_Config();
 8004188:	f002 faf2 	bl	8006770 <Apply_Config>
					flags.CMD.Set_Config = 0;
 800418c:	4a96      	ldr	r2, [pc, #600]	@ (80043e8 <main+0x324>)
 800418e:	7893      	ldrb	r3, [r2, #2]
 8004190:	f023 0310 	bic.w	r3, r3, #16
 8004194:	7093      	strb	r3, [r2, #2]
 8004196:	e039      	b.n	800420c <main+0x148>
				}
				else if(flags.CMD.Get_Config)
 8004198:	4b93      	ldr	r3, [pc, #588]	@ (80043e8 <main+0x324>)
 800419a:	789b      	ldrb	r3, [r3, #2]
 800419c:	f003 0320 	and.w	r3, r3, #32
 80041a0:	b2db      	uxtb	r3, r3
 80041a2:	2b00      	cmp	r3, #0
 80041a4:	d007      	beq.n	80041b6 <main+0xf2>
				{
					Get_Config();
 80041a6:	f002 fc47 	bl	8006a38 <Get_Config>
					flags.CMD.Get_Config = 0;
 80041aa:	4a8f      	ldr	r2, [pc, #572]	@ (80043e8 <main+0x324>)
 80041ac:	7893      	ldrb	r3, [r2, #2]
 80041ae:	f023 0320 	bic.w	r3, r3, #32
 80041b2:	7093      	strb	r3, [r2, #2]
 80041b4:	e02a      	b.n	800420c <main+0x148>
				}
				else if(flags.CMD.Start_OTA)
 80041b6:	4b8c      	ldr	r3, [pc, #560]	@ (80043e8 <main+0x324>)
 80041b8:	789b      	ldrb	r3, [r3, #2]
 80041ba:	f003 0304 	and.w	r3, r3, #4
 80041be:	b2db      	uxtb	r3, r3
 80041c0:	2b00      	cmp	r3, #0
 80041c2:	d015      	beq.n	80041f0 <main+0x12c>
				{
					LED_Stop(GRN_LED);
 80041c4:	2008      	movs	r0, #8
 80041c6:	f7ff fadf 	bl	8003788 <LED_Stop>
					LED_Start(ORG_LED, FAST, FULL);
 80041ca:	2204      	movs	r2, #4
 80041cc:	2100      	movs	r1, #0
 80041ce:	2000      	movs	r0, #0
 80041d0:	f7ff fa0e 	bl	80035f0 <LED_Start>
					LED_Start(RED_LED, FAST, HIGH);
 80041d4:	2205      	movs	r2, #5
 80041d6:	2100      	movs	r1, #0
 80041d8:	2004      	movs	r0, #4
 80041da:	f7ff fa09 	bl	80035f0 <LED_Start>
					state = OTA_STATE;
 80041de:	4b81      	ldr	r3, [pc, #516]	@ (80043e4 <main+0x320>)
 80041e0:	2203      	movs	r2, #3
 80041e2:	701a      	strb	r2, [r3, #0]
					flags.CMD.Start_OTA = 0;
 80041e4:	4a80      	ldr	r2, [pc, #512]	@ (80043e8 <main+0x324>)
 80041e6:	7893      	ldrb	r3, [r2, #2]
 80041e8:	f023 0304 	bic.w	r3, r3, #4
 80041ec:	7093      	strb	r3, [r2, #2]
 80041ee:	e00d      	b.n	800420c <main+0x148>
				}
				else if(flags.CMD.Ping)
 80041f0:	4b7d      	ldr	r3, [pc, #500]	@ (80043e8 <main+0x324>)
 80041f2:	789b      	ldrb	r3, [r3, #2]
 80041f4:	f003 0308 	and.w	r3, r3, #8
 80041f8:	b2db      	uxtb	r3, r3
 80041fa:	2b00      	cmp	r3, #0
 80041fc:	d006      	beq.n	800420c <main+0x148>
				{
					SIM_Send_Infos();
 80041fe:	f7fd fefd 	bl	8001ffc <SIM_Send_Infos>
					flags.CMD.Ping = 0;
 8004202:	4a79      	ldr	r2, [pc, #484]	@ (80043e8 <main+0x324>)
 8004204:	7893      	ldrb	r3, [r2, #2]
 8004206:	f023 0308 	bic.w	r3, r3, #8
 800420a:	7093      	strb	r3, [r2, #2]
				}
				LED_Stop(RED_LED);
 800420c:	2004      	movs	r0, #4
 800420e:	f7ff fabb 	bl	8003788 <LED_Stop>
				LED_Start(ORG_LED, MEDIUM, HALF);
				SIM_Check_Connection();
				sys.SIM_Connection_Status = HAL_GetTick();
				LED_Stop(ORG_LED);
			}
			break;
 8004212:	e231      	b.n	8004678 <main+0x5b4>
			else if(HAL_GetTick() - sys.SIM_Connection_Status > config.connection_timeout)                  // Controllo connessione al server TCP ogni 60 secondi
 8004214:	f006 fdf0 	bl	800adf8 <HAL_GetTick>
 8004218:	4602      	mov	r2, r0
 800421a:	4b74      	ldr	r3, [pc, #464]	@ (80043ec <main+0x328>)
 800421c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004220:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8004224:	1ad2      	subs	r2, r2, r3
 8004226:	4b72      	ldr	r3, [pc, #456]	@ (80043f0 <main+0x32c>)
 8004228:	689b      	ldr	r3, [r3, #8]
 800422a:	429a      	cmp	r2, r3
 800422c:	f240 8224 	bls.w	8004678 <main+0x5b4>
				LED_Start(ORG_LED, MEDIUM, HALF);
 8004230:	2206      	movs	r2, #6
 8004232:	2101      	movs	r1, #1
 8004234:	2000      	movs	r0, #0
 8004236:	f7ff f9db 	bl	80035f0 <LED_Start>
				SIM_Check_Connection();
 800423a:	f7fd fffd 	bl	8002238 <SIM_Check_Connection>
				sys.SIM_Connection_Status = HAL_GetTick();
 800423e:	f006 fddb 	bl	800adf8 <HAL_GetTick>
 8004242:	4603      	mov	r3, r0
 8004244:	4a69      	ldr	r2, [pc, #420]	@ (80043ec <main+0x328>)
 8004246:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800424a:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
				LED_Stop(ORG_LED);
 800424e:	2000      	movs	r0, #0
 8004250:	f7ff fa9a 	bl	8003788 <LED_Stop>
			break;
 8004254:	e210      	b.n	8004678 <main+0x5b4>

		case MEASURE_INIT_STATE:
			Start_Measure();
 8004256:	f001 fcfd 	bl	8005c54 <Start_Measure>
			LED_Start(GRN_LED, FAST, FULL);
 800425a:	2204      	movs	r2, #4
 800425c:	2100      	movs	r1, #0
 800425e:	2008      	movs	r0, #8
 8004260:	f7ff f9c6 	bl	80035f0 <LED_Start>
			state = MEASURING_STATE;
 8004264:	4b5f      	ldr	r3, [pc, #380]	@ (80043e4 <main+0x320>)
 8004266:	2202      	movs	r2, #2
 8004268:	701a      	strb	r2, [r3, #0]
			break;
 800426a:	e208      	b.n	800467e <main+0x5ba>

		case MEASURING_STATE:
			if(flags.ADC_Complete && flags.ACC_Complete)
 800426c:	4b5e      	ldr	r3, [pc, #376]	@ (80043e8 <main+0x324>)
 800426e:	781b      	ldrb	r3, [r3, #0]
 8004270:	f003 0301 	and.w	r3, r3, #1
 8004274:	b2db      	uxtb	r3, r3
 8004276:	2b00      	cmp	r3, #0
 8004278:	f000 8200 	beq.w	800467c <main+0x5b8>
 800427c:	4b5a      	ldr	r3, [pc, #360]	@ (80043e8 <main+0x324>)
 800427e:	781b      	ldrb	r3, [r3, #0]
 8004280:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004284:	b2db      	uxtb	r3, r3
 8004286:	2b00      	cmp	r3, #0
 8004288:	f000 81f8 	beq.w	800467c <main+0x5b8>
			{
				Save_Data();
 800428c:	f001 fa38 	bl	8005700 <Save_Data>
				if(flags.BC_Interrupt)
 8004290:	4b55      	ldr	r3, [pc, #340]	@ (80043e8 <main+0x324>)
 8004292:	781b      	ldrb	r3, [r3, #0]
 8004294:	f003 0320 	and.w	r3, r3, #32
 8004298:	b2db      	uxtb	r3, r3
 800429a:	2b00      	cmp	r3, #0
 800429c:	d010      	beq.n	80042c0 <main+0x1fc>
				{
					BC_Read_Flags(&sys.BC_Flags);
 800429e:	4855      	ldr	r0, [pc, #340]	@ (80043f4 <main+0x330>)
 80042a0:	f7fe f9da 	bl	8002658 <BC_Read_Flags>
					BC_Manage_Interrupts(sys.BC_Flags);
 80042a4:	4b51      	ldr	r3, [pc, #324]	@ (80043ec <main+0x328>)
 80042a6:	f503 5382 	add.w	r3, r3, #4160	@ 0x1040
 80042aa:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80042ae:	4610      	mov	r0, r2
 80042b0:	4619      	mov	r1, r3
 80042b2:	f7fe fa7f 	bl	80027b4 <BC_Manage_Interrupts>
					flags.BC_Interrupt = 0;
 80042b6:	4a4c      	ldr	r2, [pc, #304]	@ (80043e8 <main+0x324>)
 80042b8:	7813      	ldrb	r3, [r2, #0]
 80042ba:	f023 0320 	bic.w	r3, r3, #32
 80042be:	7013      	strb	r3, [r2, #0]
				}
				if(flags.Message_Rx)
 80042c0:	4b49      	ldr	r3, [pc, #292]	@ (80043e8 <main+0x324>)
 80042c2:	781b      	ldrb	r3, [r3, #0]
 80042c4:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 80042c8:	b2db      	uxtb	r3, r3
 80042ca:	2b00      	cmp	r3, #0
 80042cc:	d00b      	beq.n	80042e6 <main+0x222>
				{
					SIM_Parse_Command();
 80042ce:	f7fd fc87 	bl	8001be0 <SIM_Parse_Command>
					flags.SIM_isConnected = 1;
 80042d2:	4a45      	ldr	r2, [pc, #276]	@ (80043e8 <main+0x324>)
 80042d4:	7853      	ldrb	r3, [r2, #1]
 80042d6:	f043 0308 	orr.w	r3, r3, #8
 80042da:	7053      	strb	r3, [r2, #1]
					flags.Message_Rx = 0;
 80042dc:	4a42      	ldr	r2, [pc, #264]	@ (80043e8 <main+0x324>)
 80042de:	7813      	ldrb	r3, [r2, #0]
 80042e0:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80042e4:	7013      	strb	r3, [r2, #0]
				}
				if(flags.CMD.Data_Request)
 80042e6:	4b40      	ldr	r3, [pc, #256]	@ (80043e8 <main+0x324>)
 80042e8:	789b      	ldrb	r3, [r3, #2]
 80042ea:	f003 0301 	and.w	r3, r3, #1
 80042ee:	b2db      	uxtb	r3, r3
 80042f0:	2b00      	cmp	r3, #0
 80042f2:	d059      	beq.n	80043a8 <main+0x2e4>
				{
					LED_Start(ORG_LED, FAST, HIGH);
 80042f4:	2205      	movs	r2, #5
 80042f6:	2100      	movs	r1, #0
 80042f8:	2000      	movs	r0, #0
 80042fa:	f7ff f979 	bl	80035f0 <LED_Start>
					sprintf(Data_Logging, "%u,%u,%lu,%u,%u,%u,%u,%u,%u,%u,%u,%u,%u,%u", config.device_id, Last_Pressure, Last_Volume, Last_Acceleration.x, Last_Acceleration.y, Last_Acceleration.z, Vbatt, Supply.i1, Supply.i2, Supply.i3, Supply.v1, Supply.v2, Supply.v3, Temperature);
 80042fe:	4b3c      	ldr	r3, [pc, #240]	@ (80043f0 <main+0x32c>)
 8004300:	781b      	ldrb	r3, [r3, #0]
 8004302:	469c      	mov	ip, r3
 8004304:	4b3c      	ldr	r3, [pc, #240]	@ (80043f8 <main+0x334>)
 8004306:	881b      	ldrh	r3, [r3, #0]
 8004308:	469e      	mov	lr, r3
 800430a:	4b3c      	ldr	r3, [pc, #240]	@ (80043fc <main+0x338>)
 800430c:	681a      	ldr	r2, [r3, #0]
 800430e:	4b3c      	ldr	r3, [pc, #240]	@ (8004400 <main+0x33c>)
 8004310:	885b      	ldrh	r3, [r3, #2]
 8004312:	4619      	mov	r1, r3
 8004314:	4b3a      	ldr	r3, [pc, #232]	@ (8004400 <main+0x33c>)
 8004316:	889b      	ldrh	r3, [r3, #4]
 8004318:	4618      	mov	r0, r3
 800431a:	4b39      	ldr	r3, [pc, #228]	@ (8004400 <main+0x33c>)
 800431c:	88db      	ldrh	r3, [r3, #6]
 800431e:	461c      	mov	r4, r3
 8004320:	4b38      	ldr	r3, [pc, #224]	@ (8004404 <main+0x340>)
 8004322:	881b      	ldrh	r3, [r3, #0]
 8004324:	461d      	mov	r5, r3
 8004326:	4b38      	ldr	r3, [pc, #224]	@ (8004408 <main+0x344>)
 8004328:	88db      	ldrh	r3, [r3, #6]
 800432a:	461e      	mov	r6, r3
 800432c:	4b36      	ldr	r3, [pc, #216]	@ (8004408 <main+0x344>)
 800432e:	891b      	ldrh	r3, [r3, #8]
 8004330:	617b      	str	r3, [r7, #20]
 8004332:	4b35      	ldr	r3, [pc, #212]	@ (8004408 <main+0x344>)
 8004334:	895b      	ldrh	r3, [r3, #10]
 8004336:	613b      	str	r3, [r7, #16]
 8004338:	4b33      	ldr	r3, [pc, #204]	@ (8004408 <main+0x344>)
 800433a:	881b      	ldrh	r3, [r3, #0]
 800433c:	60fb      	str	r3, [r7, #12]
 800433e:	4b32      	ldr	r3, [pc, #200]	@ (8004408 <main+0x344>)
 8004340:	885b      	ldrh	r3, [r3, #2]
 8004342:	60bb      	str	r3, [r7, #8]
 8004344:	4b30      	ldr	r3, [pc, #192]	@ (8004408 <main+0x344>)
 8004346:	889b      	ldrh	r3, [r3, #4]
 8004348:	607b      	str	r3, [r7, #4]
 800434a:	4b30      	ldr	r3, [pc, #192]	@ (800440c <main+0x348>)
 800434c:	881b      	ldrh	r3, [r3, #0]
 800434e:	930b      	str	r3, [sp, #44]	@ 0x2c
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	930a      	str	r3, [sp, #40]	@ 0x28
 8004354:	68bb      	ldr	r3, [r7, #8]
 8004356:	9309      	str	r3, [sp, #36]	@ 0x24
 8004358:	68fb      	ldr	r3, [r7, #12]
 800435a:	9308      	str	r3, [sp, #32]
 800435c:	693b      	ldr	r3, [r7, #16]
 800435e:	9307      	str	r3, [sp, #28]
 8004360:	697b      	ldr	r3, [r7, #20]
 8004362:	9306      	str	r3, [sp, #24]
 8004364:	9605      	str	r6, [sp, #20]
 8004366:	9504      	str	r5, [sp, #16]
 8004368:	9403      	str	r4, [sp, #12]
 800436a:	9002      	str	r0, [sp, #8]
 800436c:	9101      	str	r1, [sp, #4]
 800436e:	9200      	str	r2, [sp, #0]
 8004370:	4673      	mov	r3, lr
 8004372:	4662      	mov	r2, ip
 8004374:	4926      	ldr	r1, [pc, #152]	@ (8004410 <main+0x34c>)
 8004376:	4827      	ldr	r0, [pc, #156]	@ (8004414 <main+0x350>)
 8004378:	f011 fda6 	bl	8015ec8 <siprintf>
					SIM_Send_TCP_Chunk_DMA(strlen(Data_Logging));
 800437c:	4825      	ldr	r0, [pc, #148]	@ (8004414 <main+0x350>)
 800437e:	f7fb ff31 	bl	80001e4 <strlen>
 8004382:	4603      	mov	r3, r0
 8004384:	b29b      	uxth	r3, r3
 8004386:	4618      	mov	r0, r3
 8004388:	f7fd fe20 	bl	8001fcc <SIM_Send_TCP_Chunk_DMA>
					sys.SIM_Prompt_Status = HAL_GetTick();
 800438c:	f006 fd34 	bl	800adf8 <HAL_GetTick>
 8004390:	4603      	mov	r3, r0
 8004392:	4a16      	ldr	r2, [pc, #88]	@ (80043ec <main+0x328>)
 8004394:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8004398:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
					flags.CMD.Data_Request = 0;
 800439c:	4a12      	ldr	r2, [pc, #72]	@ (80043e8 <main+0x324>)
 800439e:	7893      	ldrb	r3, [r2, #2]
 80043a0:	f023 0301 	bic.w	r3, r3, #1
 80043a4:	7093      	strb	r3, [r2, #2]
 80043a6:	e07d      	b.n	80044a4 <main+0x3e0>
				}
				else if(flags.CMD.Idle)
 80043a8:	4b0f      	ldr	r3, [pc, #60]	@ (80043e8 <main+0x324>)
 80043aa:	789b      	ldrb	r3, [r3, #2]
 80043ac:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 80043b0:	b2db      	uxtb	r3, r3
 80043b2:	2b00      	cmp	r3, #0
 80043b4:	d030      	beq.n	8004418 <main+0x354>
				{
					LED_Stop(ORG_LED);
 80043b6:	2000      	movs	r0, #0
 80043b8:	f7ff f9e6 	bl	8003788 <LED_Stop>
					LED_Stop(RED_LED);
 80043bc:	2004      	movs	r0, #4
 80043be:	f7ff f9e3 	bl	8003788 <LED_Stop>
					LED_Start(GRN_LED, MEDIUM, HALF);
 80043c2:	2206      	movs	r2, #6
 80043c4:	2101      	movs	r1, #1
 80043c6:	2008      	movs	r0, #8
 80043c8:	f7ff f912 	bl	80035f0 <LED_Start>
					state = IDLE;
 80043cc:	4b05      	ldr	r3, [pc, #20]	@ (80043e4 <main+0x320>)
 80043ce:	2200      	movs	r2, #0
 80043d0:	701a      	strb	r2, [r3, #0]
					Stop_Measure();
 80043d2:	f001 fd0d 	bl	8005df0 <Stop_Measure>
					flags.CMD.Idle = 0;
 80043d6:	4a04      	ldr	r2, [pc, #16]	@ (80043e8 <main+0x324>)
 80043d8:	7893      	ldrb	r3, [r2, #2]
 80043da:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80043de:	7093      	strb	r3, [r2, #2]
 80043e0:	e060      	b.n	80044a4 <main+0x3e0>
 80043e2:	bf00      	nop
 80043e4:	2000083c 	.word	0x2000083c
 80043e8:	200019e8 	.word	0x200019e8
 80043ec:	20000840 	.word	0x20000840
 80043f0:	200019ec 	.word	0x200019ec
 80043f4:	20001878 	.word	0x20001878
 80043f8:	20004414 	.word	0x20004414
 80043fc:	20004418 	.word	0x20004418
 8004400:	2000441c 	.word	0x2000441c
 8004404:	20004426 	.word	0x20004426
 8004408:	20003b44 	.word	0x20003b44
 800440c:	20004424 	.word	0x20004424
 8004410:	08017404 	.word	0x08017404
 8004414:	20004428 	.word	0x20004428
				}
				else if(flags.CMD.Measure_Request)
 8004418:	4b99      	ldr	r3, [pc, #612]	@ (8004680 <main+0x5bc>)
 800441a:	789b      	ldrb	r3, [r3, #2]
 800441c:	f003 0302 	and.w	r3, r3, #2
 8004420:	b2db      	uxtb	r3, r3
 8004422:	2b00      	cmp	r3, #0
 8004424:	d03e      	beq.n	80044a4 <main+0x3e0>
				{
					if(!flags.TCP_isSending)
 8004426:	4b96      	ldr	r3, [pc, #600]	@ (8004680 <main+0x5bc>)
 8004428:	785b      	ldrb	r3, [r3, #1]
 800442a:	f003 0304 	and.w	r3, r3, #4
 800442e:	b2db      	uxtb	r3, r3
 8004430:	2b00      	cmp	r3, #0
 8004432:	d137      	bne.n	80044a4 <main+0x3e0>
					{
						Send_Measure_Addr = Send_Measure_Chunk(sys.RAM_Buffer_Base_tosend, sys.Inactive_RAM_Len, Send_Measure_Addr);
 8004434:	4b93      	ldr	r3, [pc, #588]	@ (8004684 <main+0x5c0>)
 8004436:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800443a:	f8d3 30cc 	ldr.w	r3, [r3, #204]	@ 0xcc
 800443e:	4a91      	ldr	r2, [pc, #580]	@ (8004684 <main+0x5c0>)
 8004440:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8004444:	f8d2 10d0 	ldr.w	r1, [r2, #208]	@ 0xd0
 8004448:	4a8f      	ldr	r2, [pc, #572]	@ (8004688 <main+0x5c4>)
 800444a:	6812      	ldr	r2, [r2, #0]
 800444c:	4618      	mov	r0, r3
 800444e:	f001 fdb1 	bl	8005fb4 <Send_Measure_Chunk>
 8004452:	4603      	mov	r3, r0
 8004454:	4a8c      	ldr	r2, [pc, #560]	@ (8004688 <main+0x5c4>)
 8004456:	6013      	str	r3, [r2, #0]
						if(flags.TCP_ReadytoSend)
 8004458:	4b89      	ldr	r3, [pc, #548]	@ (8004680 <main+0x5bc>)
 800445a:	785b      	ldrb	r3, [r3, #1]
 800445c:	f003 0302 	and.w	r3, r3, #2
 8004460:	b2db      	uxtb	r3, r3
 8004462:	2b00      	cmp	r3, #0
 8004464:	d01e      	beq.n	80044a4 <main+0x3e0>
						{
							SIM_Send_Command_DMA((char*)tcp_chunk);
 8004466:	4889      	ldr	r0, [pc, #548]	@ (800468c <main+0x5c8>)
 8004468:	f7fd fb28 	bl	8001abc <SIM_Send_Command_DMA>
							flags.TCP_isSending = 1;
 800446c:	4a84      	ldr	r2, [pc, #528]	@ (8004680 <main+0x5bc>)
 800446e:	7853      	ldrb	r3, [r2, #1]
 8004470:	f043 0304 	orr.w	r3, r3, #4
 8004474:	7053      	strb	r3, [r2, #1]
							flags.TCP_ReadytoSend = 0;
 8004476:	4a82      	ldr	r2, [pc, #520]	@ (8004680 <main+0x5bc>)
 8004478:	7853      	ldrb	r3, [r2, #1]
 800447a:	f023 0302 	bic.w	r3, r3, #2
 800447e:	7053      	strb	r3, [r2, #1]
							if (Send_Measure_Addr == 0)
 8004480:	4b81      	ldr	r3, [pc, #516]	@ (8004688 <main+0x5c4>)
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	2b00      	cmp	r3, #0
 8004486:	d10d      	bne.n	80044a4 <main+0x3e0>
							{
								memset(tcp_chunk, 0, 1460);
 8004488:	f240 52b4 	movw	r2, #1460	@ 0x5b4
 800448c:	2100      	movs	r1, #0
 800448e:	487f      	ldr	r0, [pc, #508]	@ (800468c <main+0x5c8>)
 8004490:	f011 fd7a 	bl	8015f88 <memset>
								LED_Stop(RED_LED);
 8004494:	2004      	movs	r0, #4
 8004496:	f7ff f977 	bl	8003788 <LED_Stop>
								flags.CMD.Measure_Request = 0;
 800449a:	4a79      	ldr	r2, [pc, #484]	@ (8004680 <main+0x5bc>)
 800449c:	7893      	ldrb	r3, [r2, #2]
 800449e:	f023 0302 	bic.w	r3, r3, #2
 80044a2:	7093      	strb	r3, [r2, #2]
							}
						}
					}
				}
				if(flags.MQTT_ReadytoSend)
 80044a4:	4b76      	ldr	r3, [pc, #472]	@ (8004680 <main+0x5bc>)
 80044a6:	785b      	ldrb	r3, [r3, #1]
 80044a8:	f003 0301 	and.w	r3, r3, #1
 80044ac:	b2db      	uxtb	r3, r3
 80044ae:	2b00      	cmp	r3, #0
 80044b0:	d00a      	beq.n	80044c8 <main+0x404>
				{
					SIM_Send_Command_DMA(Data_Logging);
 80044b2:	4877      	ldr	r0, [pc, #476]	@ (8004690 <main+0x5cc>)
 80044b4:	f7fd fb02 	bl	8001abc <SIM_Send_Command_DMA>
					LED_Stop(ORG_LED);
 80044b8:	2000      	movs	r0, #0
 80044ba:	f7ff f965 	bl	8003788 <LED_Stop>
					flags.MQTT_ReadytoSend = 0;
 80044be:	4a70      	ldr	r2, [pc, #448]	@ (8004680 <main+0x5bc>)
 80044c0:	7853      	ldrb	r3, [r2, #1]
 80044c2:	f023 0301 	bic.w	r3, r3, #1
 80044c6:	7053      	strb	r3, [r2, #1]
				}
				if(sys.SIM_Prompt_Status > 0 && (HAL_GetTick() - sys.SIM_Prompt_Status) > SIM_PROMPT_TIMEOUT_MS)
 80044c8:	4b6e      	ldr	r3, [pc, #440]	@ (8004684 <main+0x5c0>)
 80044ca:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80044ce:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 80044d2:	2b00      	cmp	r3, #0
 80044d4:	d018      	beq.n	8004508 <main+0x444>
 80044d6:	f006 fc8f 	bl	800adf8 <HAL_GetTick>
 80044da:	4602      	mov	r2, r0
 80044dc:	4b69      	ldr	r3, [pc, #420]	@ (8004684 <main+0x5c0>)
 80044de:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80044e2:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 80044e6:	1ad3      	subs	r3, r2, r3
 80044e8:	f640 32b8 	movw	r2, #3000	@ 0xbb8
 80044ec:	4293      	cmp	r3, r2
 80044ee:	d90b      	bls.n	8004508 <main+0x444>
				{
					flags.CMD.Data_Request = 1;
 80044f0:	4a63      	ldr	r2, [pc, #396]	@ (8004680 <main+0x5bc>)
 80044f2:	7893      	ldrb	r3, [r2, #2]
 80044f4:	f043 0301 	orr.w	r3, r3, #1
 80044f8:	7093      	strb	r3, [r2, #2]
					sys.SIM_Prompt_Status = 0;
 80044fa:	4b62      	ldr	r3, [pc, #392]	@ (8004684 <main+0x5c0>)
 80044fc:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004500:	461a      	mov	r2, r3
 8004502:	2300      	movs	r3, #0
 8004504:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
				}
				if(HAL_GetTick() - sys.SIM_Connection_Status > config.connection_timeout)
 8004508:	f006 fc76 	bl	800adf8 <HAL_GetTick>
 800450c:	4602      	mov	r2, r0
 800450e:	4b5d      	ldr	r3, [pc, #372]	@ (8004684 <main+0x5c0>)
 8004510:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004514:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8004518:	1ad2      	subs	r2, r2, r3
 800451a:	4b5e      	ldr	r3, [pc, #376]	@ (8004694 <main+0x5d0>)
 800451c:	689b      	ldr	r3, [r3, #8]
 800451e:	429a      	cmp	r2, r3
 8004520:	f240 80ac 	bls.w	800467c <main+0x5b8>
				{
					sys.SIM_Connection_Status = HAL_GetTick();
 8004524:	f006 fc68 	bl	800adf8 <HAL_GetTick>
 8004528:	4603      	mov	r3, r0
 800452a:	4a56      	ldr	r2, [pc, #344]	@ (8004684 <main+0x5c0>)
 800452c:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8004530:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
					if(flags.SIM_isConnected)
 8004534:	4b52      	ldr	r3, [pc, #328]	@ (8004680 <main+0x5bc>)
 8004536:	785b      	ldrb	r3, [r3, #1]
 8004538:	f003 0308 	and.w	r3, r3, #8
 800453c:	b2db      	uxtb	r3, r3
 800453e:	2b00      	cmp	r3, #0
 8004540:	d005      	beq.n	800454e <main+0x48a>
					{
						flags.SIM_isConnected = 0;
 8004542:	4a4f      	ldr	r2, [pc, #316]	@ (8004680 <main+0x5bc>)
 8004544:	7853      	ldrb	r3, [r2, #1]
 8004546:	f023 0308 	bic.w	r3, r3, #8
 800454a:	7053      	strb	r3, [r2, #1]
					{
						state = IDLE;
					}
				}
			}
			break;
 800454c:	e096      	b.n	800467c <main+0x5b8>
						state = IDLE;
 800454e:	4b52      	ldr	r3, [pc, #328]	@ (8004698 <main+0x5d4>)
 8004550:	2200      	movs	r2, #0
 8004552:	701a      	strb	r2, [r3, #0]
			break;
 8004554:	e092      	b.n	800467c <main+0x5b8>

		case OTA_STATE:
			if(OTA_Init() == HAL_OK)
 8004556:	f000 fe71 	bl	800523c <OTA_Init>
 800455a:	4603      	mov	r3, r0
 800455c:	2b00      	cmp	r3, #0
 800455e:	d171      	bne.n	8004644 <main+0x580>
			{
				HAL_UART_DMAStop(SIM_UART);
 8004560:	484e      	ldr	r0, [pc, #312]	@ (800469c <main+0x5d8>)
 8004562:	f010 fb37 	bl	8014bd4 <HAL_UART_DMAStop>
				memset(sim_rx_buffer, 0, sizeof(sim_rx_buffer));
 8004566:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 800456a:	2100      	movs	r1, #0
 800456c:	484c      	ldr	r0, [pc, #304]	@ (80046a0 <main+0x5dc>)
 800456e:	f011 fd0b 	bl	8015f88 <memset>

				SIM_Send_TCP("OTA_READY");
 8004572:	484c      	ldr	r0, [pc, #304]	@ (80046a4 <main+0x5e0>)
 8004574:	f7fd fcfc 	bl	8001f70 <SIM_Send_TCP>
				if(OTA_Receive() == HAL_OK)
 8004578:	f000 fe8c 	bl	8005294 <OTA_Receive>
 800457c:	4603      	mov	r3, r0
 800457e:	2b00      	cmp	r3, #0
 8004580:	d148      	bne.n	8004614 <main+0x550>
				{
					SIM_Send_TCP("OTA_RECEIVED");
 8004582:	4849      	ldr	r0, [pc, #292]	@ (80046a8 <main+0x5e4>)
 8004584:	f7fd fcf4 	bl	8001f70 <SIM_Send_TCP>
					if(OTA_CRC_Check() == HAL_OK)
 8004588:	f000 ff08 	bl	800539c <OTA_CRC_Check>
 800458c:	4603      	mov	r3, r0
 800458e:	2b00      	cmp	r3, #0
 8004590:	d128      	bne.n	80045e4 <main+0x520>
					{
						SIM_Send_TCP("OTA_CRC_OK");
 8004592:	4846      	ldr	r0, [pc, #280]	@ (80046ac <main+0x5e8>)
 8004594:	f7fd fcec 	bl	8001f70 <SIM_Send_TCP>
						if(OTA_Apply() == HAL_OK)
 8004598:	f000 ffb4 	bl	8005504 <OTA_Apply>
 800459c:	4603      	mov	r3, r0
 800459e:	2b00      	cmp	r3, #0
 80045a0:	d108      	bne.n	80045b4 <main+0x4f0>
						{
							SIM_Send_TCP("OTA_SUCCESS");
 80045a2:	4843      	ldr	r0, [pc, #268]	@ (80046b0 <main+0x5ec>)
 80045a4:	f7fd fce4 	bl	8001f70 <SIM_Send_TCP>
							HAL_Delay(500);
 80045a8:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80045ac:	f006 fc30 	bl	800ae10 <HAL_Delay>
							NVIC_SystemReset();
 80045b0:	f7ff fd72 	bl	8004098 <__NVIC_SystemReset>
						}
						else
						{
							SIM_Send_TCP("OTA_APPLY_ERROR");
 80045b4:	483f      	ldr	r0, [pc, #252]	@ (80046b4 <main+0x5f0>)
 80045b6:	f7fd fcdb 	bl	8001f70 <SIM_Send_TCP>
							HAL_UARTEx_ReceiveToIdle_DMA(SIM_UART, (uint8_t *)sim_rx_buffer, SIM_RXBUFFER_SIZE);
 80045ba:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 80045be:	4938      	ldr	r1, [pc, #224]	@ (80046a0 <main+0x5dc>)
 80045c0:	4836      	ldr	r0, [pc, #216]	@ (800469c <main+0x5d8>)
 80045c2:	f011 fba3 	bl	8015d0c <HAL_UARTEx_ReceiveToIdle_DMA>
							LED_Stop(ORG_LED);
 80045c6:	2000      	movs	r0, #0
 80045c8:	f7ff f8de 	bl	8003788 <LED_Stop>
							LED_Stop(RED_LED);
 80045cc:	2004      	movs	r0, #4
 80045ce:	f7ff f8db 	bl	8003788 <LED_Stop>
							LED_Start(GRN_LED, MEDIUM, HALF);
 80045d2:	2206      	movs	r2, #6
 80045d4:	2101      	movs	r1, #1
 80045d6:	2008      	movs	r0, #8
 80045d8:	f7ff f80a 	bl	80035f0 <LED_Start>
							state = IDLE;
 80045dc:	4b2e      	ldr	r3, [pc, #184]	@ (8004698 <main+0x5d4>)
 80045de:	2200      	movs	r2, #0
 80045e0:	701a      	strb	r2, [r3, #0]
				LED_Stop(ORG_LED);
				LED_Stop(RED_LED);
				LED_Start(GRN_LED, MEDIUM, HALF);
				state = IDLE;
			}
			break;
 80045e2:	e04c      	b.n	800467e <main+0x5ba>
						SIM_Send_TCP("OTA_CRC_ERROR");
 80045e4:	4834      	ldr	r0, [pc, #208]	@ (80046b8 <main+0x5f4>)
 80045e6:	f7fd fcc3 	bl	8001f70 <SIM_Send_TCP>
						HAL_UARTEx_ReceiveToIdle_DMA(SIM_UART, (uint8_t *)sim_rx_buffer, SIM_RXBUFFER_SIZE);
 80045ea:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 80045ee:	492c      	ldr	r1, [pc, #176]	@ (80046a0 <main+0x5dc>)
 80045f0:	482a      	ldr	r0, [pc, #168]	@ (800469c <main+0x5d8>)
 80045f2:	f011 fb8b 	bl	8015d0c <HAL_UARTEx_ReceiveToIdle_DMA>
						LED_Stop(ORG_LED);
 80045f6:	2000      	movs	r0, #0
 80045f8:	f7ff f8c6 	bl	8003788 <LED_Stop>
						LED_Stop(RED_LED);
 80045fc:	2004      	movs	r0, #4
 80045fe:	f7ff f8c3 	bl	8003788 <LED_Stop>
						LED_Start(GRN_LED, MEDIUM, HALF);
 8004602:	2206      	movs	r2, #6
 8004604:	2101      	movs	r1, #1
 8004606:	2008      	movs	r0, #8
 8004608:	f7fe fff2 	bl	80035f0 <LED_Start>
						state = IDLE;
 800460c:	4b22      	ldr	r3, [pc, #136]	@ (8004698 <main+0x5d4>)
 800460e:	2200      	movs	r2, #0
 8004610:	701a      	strb	r2, [r3, #0]
						break;
 8004612:	e034      	b.n	800467e <main+0x5ba>
					SIM_Send_TCP("OTA_RECEIVE_ERROR");
 8004614:	4829      	ldr	r0, [pc, #164]	@ (80046bc <main+0x5f8>)
 8004616:	f7fd fcab 	bl	8001f70 <SIM_Send_TCP>
					HAL_UARTEx_ReceiveToIdle_DMA(SIM_UART, (uint8_t *)sim_rx_buffer, SIM_RXBUFFER_SIZE);
 800461a:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 800461e:	4920      	ldr	r1, [pc, #128]	@ (80046a0 <main+0x5dc>)
 8004620:	481e      	ldr	r0, [pc, #120]	@ (800469c <main+0x5d8>)
 8004622:	f011 fb73 	bl	8015d0c <HAL_UARTEx_ReceiveToIdle_DMA>
					LED_Stop(ORG_LED);
 8004626:	2000      	movs	r0, #0
 8004628:	f7ff f8ae 	bl	8003788 <LED_Stop>
					LED_Stop(RED_LED);
 800462c:	2004      	movs	r0, #4
 800462e:	f7ff f8ab 	bl	8003788 <LED_Stop>
					LED_Start(GRN_LED, MEDIUM, HALF);
 8004632:	2206      	movs	r2, #6
 8004634:	2101      	movs	r1, #1
 8004636:	2008      	movs	r0, #8
 8004638:	f7fe ffda 	bl	80035f0 <LED_Start>
					state = IDLE;
 800463c:	4b16      	ldr	r3, [pc, #88]	@ (8004698 <main+0x5d4>)
 800463e:	2200      	movs	r2, #0
 8004640:	701a      	strb	r2, [r3, #0]
			break;
 8004642:	e01c      	b.n	800467e <main+0x5ba>
				SIM_Send_TCP("OTA_INIT_ERROR");
 8004644:	481e      	ldr	r0, [pc, #120]	@ (80046c0 <main+0x5fc>)
 8004646:	f7fd fc93 	bl	8001f70 <SIM_Send_TCP>
				HAL_UARTEx_ReceiveToIdle_DMA(SIM_UART, (uint8_t *)sim_rx_buffer, SIM_RXBUFFER_SIZE);
 800464a:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 800464e:	4914      	ldr	r1, [pc, #80]	@ (80046a0 <main+0x5dc>)
 8004650:	4812      	ldr	r0, [pc, #72]	@ (800469c <main+0x5d8>)
 8004652:	f011 fb5b 	bl	8015d0c <HAL_UARTEx_ReceiveToIdle_DMA>
				LED_Stop(ORG_LED);
 8004656:	2000      	movs	r0, #0
 8004658:	f7ff f896 	bl	8003788 <LED_Stop>
				LED_Stop(RED_LED);
 800465c:	2004      	movs	r0, #4
 800465e:	f7ff f893 	bl	8003788 <LED_Stop>
				LED_Start(GRN_LED, MEDIUM, HALF);
 8004662:	2206      	movs	r2, #6
 8004664:	2101      	movs	r1, #1
 8004666:	2008      	movs	r0, #8
 8004668:	f7fe ffc2 	bl	80035f0 <LED_Start>
				state = IDLE;
 800466c:	4b0a      	ldr	r3, [pc, #40]	@ (8004698 <main+0x5d4>)
 800466e:	2200      	movs	r2, #0
 8004670:	701a      	strb	r2, [r3, #0]
			break;
 8004672:	e004      	b.n	800467e <main+0x5ba>

		default:
			break;
 8004674:	bf00      	nop
 8004676:	e54c      	b.n	8004112 <main+0x4e>
			break;
 8004678:	bf00      	nop
 800467a:	e54a      	b.n	8004112 <main+0x4e>
			break;
 800467c:	bf00      	nop
		switch(state)
 800467e:	e548      	b.n	8004112 <main+0x4e>
 8004680:	200019e8 	.word	0x200019e8
 8004684:	20000840 	.word	0x20000840
 8004688:	20004bcc 	.word	0x20004bcc
 800468c:	20004bd0 	.word	0x20004bd0
 8004690:	20004428 	.word	0x20004428
 8004694:	200019ec 	.word	0x200019ec
 8004698:	2000083c 	.word	0x2000083c
 800469c:	20000724 	.word	0x20000724
 80046a0:	200051f8 	.word	0x200051f8
 80046a4:	08017430 	.word	0x08017430
 80046a8:	0801743c 	.word	0x0801743c
 80046ac:	0801744c 	.word	0x0801744c
 80046b0:	08017458 	.word	0x08017458
 80046b4:	08017464 	.word	0x08017464
 80046b8:	08017474 	.word	0x08017474
 80046bc:	08017484 	.word	0x08017484
 80046c0:	08017498 	.word	0x08017498

080046c4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80046c4:	b580      	push	{r7, lr}
 80046c6:	b096      	sub	sp, #88	@ 0x58
 80046c8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80046ca:	f107 0314 	add.w	r3, r7, #20
 80046ce:	2244      	movs	r2, #68	@ 0x44
 80046d0:	2100      	movs	r1, #0
 80046d2:	4618      	mov	r0, r3
 80046d4:	f011 fc58 	bl	8015f88 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80046d8:	463b      	mov	r3, r7
 80046da:	2200      	movs	r2, #0
 80046dc:	601a      	str	r2, [r3, #0]
 80046de:	605a      	str	r2, [r3, #4]
 80046e0:	609a      	str	r2, [r3, #8]
 80046e2:	60da      	str	r2, [r3, #12]
 80046e4:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80046e6:	f44f 7000 	mov.w	r0, #512	@ 0x200
 80046ea:	f00a fb89 	bl	800ee00 <HAL_PWREx_ControlVoltageScaling>
 80046ee:	4603      	mov	r3, r0
 80046f0:	2b00      	cmp	r3, #0
 80046f2:	d001      	beq.n	80046f8 <SystemClock_Config+0x34>
  {
    Error_Handler();
 80046f4:	f000 fd9c 	bl	8005230 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 80046f8:	2309      	movs	r3, #9
 80046fa:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80046fc:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8004700:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8004702:	2301      	movs	r3, #1
 8004704:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8004706:	2302      	movs	r3, #2
 8004708:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800470a:	2303      	movs	r3, #3
 800470c:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 800470e:	2301      	movs	r3, #1
 8004710:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 20;
 8004712:	2314      	movs	r3, #20
 8004714:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8004716:	2307      	movs	r3, #7
 8004718:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800471a:	2302      	movs	r3, #2
 800471c:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800471e:	2302      	movs	r3, #2
 8004720:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8004722:	f107 0314 	add.w	r3, r7, #20
 8004726:	4618      	mov	r0, r3
 8004728:	f00b f822 	bl	800f770 <HAL_RCC_OscConfig>
 800472c:	4603      	mov	r3, r0
 800472e:	2b00      	cmp	r3, #0
 8004730:	d001      	beq.n	8004736 <SystemClock_Config+0x72>
  {
    Error_Handler();
 8004732:	f000 fd7d 	bl	8005230 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8004736:	230f      	movs	r3, #15
 8004738:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800473a:	2303      	movs	r3, #3
 800473c:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800473e:	2300      	movs	r3, #0
 8004740:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8004742:	2300      	movs	r3, #0
 8004744:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8004746:	2300      	movs	r3, #0
 8004748:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800474a:	463b      	mov	r3, r7
 800474c:	2104      	movs	r1, #4
 800474e:	4618      	mov	r0, r3
 8004750:	f00b fbea 	bl	800ff28 <HAL_RCC_ClockConfig>
 8004754:	4603      	mov	r3, r0
 8004756:	2b00      	cmp	r3, #0
 8004758:	d001      	beq.n	800475e <SystemClock_Config+0x9a>
  {
    Error_Handler();
 800475a:	f000 fd69 	bl	8005230 <Error_Handler>
  }
}
 800475e:	bf00      	nop
 8004760:	3758      	adds	r7, #88	@ 0x58
 8004762:	46bd      	mov	sp, r7
 8004764:	bd80      	pop	{r7, pc}
	...

08004768 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8004768:	b580      	push	{r7, lr}
 800476a:	b08a      	sub	sp, #40	@ 0x28
 800476c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 800476e:	f107 031c 	add.w	r3, r7, #28
 8004772:	2200      	movs	r2, #0
 8004774:	601a      	str	r2, [r3, #0]
 8004776:	605a      	str	r2, [r3, #4]
 8004778:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 800477a:	1d3b      	adds	r3, r7, #4
 800477c:	2200      	movs	r2, #0
 800477e:	601a      	str	r2, [r3, #0]
 8004780:	605a      	str	r2, [r3, #4]
 8004782:	609a      	str	r2, [r3, #8]
 8004784:	60da      	str	r2, [r3, #12]
 8004786:	611a      	str	r2, [r3, #16]
 8004788:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 800478a:	4b30      	ldr	r3, [pc, #192]	@ (800484c <MX_ADC1_Init+0xe4>)
 800478c:	4a30      	ldr	r2, [pc, #192]	@ (8004850 <MX_ADC1_Init+0xe8>)
 800478e:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8004790:	4b2e      	ldr	r3, [pc, #184]	@ (800484c <MX_ADC1_Init+0xe4>)
 8004792:	2200      	movs	r2, #0
 8004794:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8004796:	4b2d      	ldr	r3, [pc, #180]	@ (800484c <MX_ADC1_Init+0xe4>)
 8004798:	2200      	movs	r2, #0
 800479a:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800479c:	4b2b      	ldr	r3, [pc, #172]	@ (800484c <MX_ADC1_Init+0xe4>)
 800479e:	2200      	movs	r2, #0
 80047a0:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80047a2:	4b2a      	ldr	r3, [pc, #168]	@ (800484c <MX_ADC1_Init+0xe4>)
 80047a4:	2200      	movs	r2, #0
 80047a6:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 80047a8:	4b28      	ldr	r3, [pc, #160]	@ (800484c <MX_ADC1_Init+0xe4>)
 80047aa:	2208      	movs	r2, #8
 80047ac:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80047ae:	4b27      	ldr	r3, [pc, #156]	@ (800484c <MX_ADC1_Init+0xe4>)
 80047b0:	2200      	movs	r2, #0
 80047b2:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80047b4:	4b25      	ldr	r3, [pc, #148]	@ (800484c <MX_ADC1_Init+0xe4>)
 80047b6:	2200      	movs	r2, #0
 80047b8:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 80047ba:	4b24      	ldr	r3, [pc, #144]	@ (800484c <MX_ADC1_Init+0xe4>)
 80047bc:	2201      	movs	r2, #1
 80047be:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80047c0:	4b22      	ldr	r3, [pc, #136]	@ (800484c <MX_ADC1_Init+0xe4>)
 80047c2:	2200      	movs	r2, #0
 80047c4:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T4_TRGO;
 80047c8:	4b20      	ldr	r3, [pc, #128]	@ (800484c <MX_ADC1_Init+0xe4>)
 80047ca:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 80047ce:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 80047d0:	4b1e      	ldr	r3, [pc, #120]	@ (800484c <MX_ADC1_Init+0xe4>)
 80047d2:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80047d6:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.DMAContinuousRequests = ENABLE;
 80047d8:	4b1c      	ldr	r3, [pc, #112]	@ (800484c <MX_ADC1_Init+0xe4>)
 80047da:	2201      	movs	r2, #1
 80047dc:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80047e0:	4b1a      	ldr	r3, [pc, #104]	@ (800484c <MX_ADC1_Init+0xe4>)
 80047e2:	2200      	movs	r2, #0
 80047e4:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 80047e6:	4b19      	ldr	r3, [pc, #100]	@ (800484c <MX_ADC1_Init+0xe4>)
 80047e8:	2200      	movs	r2, #0
 80047ea:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80047ee:	4817      	ldr	r0, [pc, #92]	@ (800484c <MX_ADC1_Init+0xe4>)
 80047f0:	f006 fd56 	bl	800b2a0 <HAL_ADC_Init>
 80047f4:	4603      	mov	r3, r0
 80047f6:	2b00      	cmp	r3, #0
 80047f8:	d001      	beq.n	80047fe <MX_ADC1_Init+0x96>
  {
    Error_Handler();
 80047fa:	f000 fd19 	bl	8005230 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 80047fe:	2300      	movs	r3, #0
 8004800:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8004802:	f107 031c 	add.w	r3, r7, #28
 8004806:	4619      	mov	r1, r3
 8004808:	4810      	ldr	r0, [pc, #64]	@ (800484c <MX_ADC1_Init+0xe4>)
 800480a:	f007 fe0f 	bl	800c42c <HAL_ADCEx_MultiModeConfigChannel>
 800480e:	4603      	mov	r3, r0
 8004810:	2b00      	cmp	r3, #0
 8004812:	d001      	beq.n	8004818 <MX_ADC1_Init+0xb0>
  {
    Error_Handler();
 8004814:	f000 fd0c 	bl	8005230 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_9;
 8004818:	4b0e      	ldr	r3, [pc, #56]	@ (8004854 <MX_ADC1_Init+0xec>)
 800481a:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800481c:	2306      	movs	r3, #6
 800481e:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8004820:	2300      	movs	r3, #0
 8004822:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8004824:	237f      	movs	r3, #127	@ 0x7f
 8004826:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8004828:	2304      	movs	r3, #4
 800482a:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 800482c:	2300      	movs	r3, #0
 800482e:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8004830:	1d3b      	adds	r3, r7, #4
 8004832:	4619      	mov	r1, r3
 8004834:	4805      	ldr	r0, [pc, #20]	@ (800484c <MX_ADC1_Init+0xe4>)
 8004836:	f006 ffab 	bl	800b790 <HAL_ADC_ConfigChannel>
 800483a:	4603      	mov	r3, r0
 800483c:	2b00      	cmp	r3, #0
 800483e:	d001      	beq.n	8004844 <MX_ADC1_Init+0xdc>
  {
    Error_Handler();
 8004840:	f000 fcf6 	bl	8005230 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8004844:	bf00      	nop
 8004846:	3728      	adds	r7, #40	@ 0x28
 8004848:	46bd      	mov	sp, r7
 800484a:	bd80      	pop	{r7, pc}
 800484c:	20000318 	.word	0x20000318
 8004850:	50040000 	.word	0x50040000
 8004854:	25b00200 	.word	0x25b00200

08004858 <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 8004858:	b580      	push	{r7, lr}
 800485a:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 800485c:	4b0d      	ldr	r3, [pc, #52]	@ (8004894 <MX_CRC_Init+0x3c>)
 800485e:	4a0e      	ldr	r2, [pc, #56]	@ (8004898 <MX_CRC_Init+0x40>)
 8004860:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 8004862:	4b0c      	ldr	r3, [pc, #48]	@ (8004894 <MX_CRC_Init+0x3c>)
 8004864:	2200      	movs	r2, #0
 8004866:	711a      	strb	r2, [r3, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 8004868:	4b0a      	ldr	r3, [pc, #40]	@ (8004894 <MX_CRC_Init+0x3c>)
 800486a:	2200      	movs	r2, #0
 800486c:	715a      	strb	r2, [r3, #5]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 800486e:	4b09      	ldr	r3, [pc, #36]	@ (8004894 <MX_CRC_Init+0x3c>)
 8004870:	2200      	movs	r2, #0
 8004872:	615a      	str	r2, [r3, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 8004874:	4b07      	ldr	r3, [pc, #28]	@ (8004894 <MX_CRC_Init+0x3c>)
 8004876:	2200      	movs	r2, #0
 8004878:	619a      	str	r2, [r3, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 800487a:	4b06      	ldr	r3, [pc, #24]	@ (8004894 <MX_CRC_Init+0x3c>)
 800487c:	2201      	movs	r2, #1
 800487e:	621a      	str	r2, [r3, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8004880:	4804      	ldr	r0, [pc, #16]	@ (8004894 <MX_CRC_Init+0x3c>)
 8004882:	f007 ffaf 	bl	800c7e4 <HAL_CRC_Init>
 8004886:	4603      	mov	r3, r0
 8004888:	2b00      	cmp	r3, #0
 800488a:	d001      	beq.n	8004890 <MX_CRC_Init+0x38>
  {
    Error_Handler();
 800488c:	f000 fcd0 	bl	8005230 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 8004890:	bf00      	nop
 8004892:	bd80      	pop	{r7, pc}
 8004894:	200003c4 	.word	0x200003c4
 8004898:	40023000 	.word	0x40023000

0800489c <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 800489c:	b580      	push	{r7, lr}
 800489e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 80048a0:	4b1b      	ldr	r3, [pc, #108]	@ (8004910 <MX_I2C3_Init+0x74>)
 80048a2:	4a1c      	ldr	r2, [pc, #112]	@ (8004914 <MX_I2C3_Init+0x78>)
 80048a4:	601a      	str	r2, [r3, #0]
  hi2c3.Init.Timing = 0x10D19CE4;
 80048a6:	4b1a      	ldr	r3, [pc, #104]	@ (8004910 <MX_I2C3_Init+0x74>)
 80048a8:	4a1b      	ldr	r2, [pc, #108]	@ (8004918 <MX_I2C3_Init+0x7c>)
 80048aa:	605a      	str	r2, [r3, #4]
  hi2c3.Init.OwnAddress1 = 0;
 80048ac:	4b18      	ldr	r3, [pc, #96]	@ (8004910 <MX_I2C3_Init+0x74>)
 80048ae:	2200      	movs	r2, #0
 80048b0:	609a      	str	r2, [r3, #8]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80048b2:	4b17      	ldr	r3, [pc, #92]	@ (8004910 <MX_I2C3_Init+0x74>)
 80048b4:	2201      	movs	r2, #1
 80048b6:	60da      	str	r2, [r3, #12]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80048b8:	4b15      	ldr	r3, [pc, #84]	@ (8004910 <MX_I2C3_Init+0x74>)
 80048ba:	2200      	movs	r2, #0
 80048bc:	611a      	str	r2, [r3, #16]
  hi2c3.Init.OwnAddress2 = 0;
 80048be:	4b14      	ldr	r3, [pc, #80]	@ (8004910 <MX_I2C3_Init+0x74>)
 80048c0:	2200      	movs	r2, #0
 80048c2:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80048c4:	4b12      	ldr	r3, [pc, #72]	@ (8004910 <MX_I2C3_Init+0x74>)
 80048c6:	2200      	movs	r2, #0
 80048c8:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80048ca:	4b11      	ldr	r3, [pc, #68]	@ (8004910 <MX_I2C3_Init+0x74>)
 80048cc:	2200      	movs	r2, #0
 80048ce:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80048d0:	4b0f      	ldr	r3, [pc, #60]	@ (8004910 <MX_I2C3_Init+0x74>)
 80048d2:	2200      	movs	r2, #0
 80048d4:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 80048d6:	480e      	ldr	r0, [pc, #56]	@ (8004910 <MX_I2C3_Init+0x74>)
 80048d8:	f009 fc9c 	bl	800e214 <HAL_I2C_Init>
 80048dc:	4603      	mov	r3, r0
 80048de:	2b00      	cmp	r3, #0
 80048e0:	d001      	beq.n	80048e6 <MX_I2C3_Init+0x4a>
  {
    Error_Handler();
 80048e2:	f000 fca5 	bl	8005230 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80048e6:	2100      	movs	r1, #0
 80048e8:	4809      	ldr	r0, [pc, #36]	@ (8004910 <MX_I2C3_Init+0x74>)
 80048ea:	f00a f9e3 	bl	800ecb4 <HAL_I2CEx_ConfigAnalogFilter>
 80048ee:	4603      	mov	r3, r0
 80048f0:	2b00      	cmp	r3, #0
 80048f2:	d001      	beq.n	80048f8 <MX_I2C3_Init+0x5c>
  {
    Error_Handler();
 80048f4:	f000 fc9c 	bl	8005230 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 80048f8:	2100      	movs	r1, #0
 80048fa:	4805      	ldr	r0, [pc, #20]	@ (8004910 <MX_I2C3_Init+0x74>)
 80048fc:	f00a fa25 	bl	800ed4a <HAL_I2CEx_ConfigDigitalFilter>
 8004900:	4603      	mov	r3, r0
 8004902:	2b00      	cmp	r3, #0
 8004904:	d001      	beq.n	800490a <MX_I2C3_Init+0x6e>
  {
    Error_Handler();
 8004906:	f000 fc93 	bl	8005230 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 800490a:	bf00      	nop
 800490c:	bd80      	pop	{r7, pc}
 800490e:	bf00      	nop
 8004910:	200003e8 	.word	0x200003e8
 8004914:	40005c00 	.word	0x40005c00
 8004918:	10d19ce4 	.word	0x10d19ce4

0800491c <MX_QUADSPI_Init>:
  * @brief QUADSPI Initialization Function
  * @param None
  * @retval None
  */
static void MX_QUADSPI_Init(void)
{
 800491c:	b580      	push	{r7, lr}
 800491e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN QUADSPI_Init 1 */

  /* USER CODE END QUADSPI_Init 1 */
  /* QUADSPI parameter configuration*/
  hqspi.Instance = QUADSPI;
 8004920:	4b0f      	ldr	r3, [pc, #60]	@ (8004960 <MX_QUADSPI_Init+0x44>)
 8004922:	4a10      	ldr	r2, [pc, #64]	@ (8004964 <MX_QUADSPI_Init+0x48>)
 8004924:	601a      	str	r2, [r3, #0]
  hqspi.Init.ClockPrescaler = 1;
 8004926:	4b0e      	ldr	r3, [pc, #56]	@ (8004960 <MX_QUADSPI_Init+0x44>)
 8004928:	2201      	movs	r2, #1
 800492a:	605a      	str	r2, [r3, #4]
  hqspi.Init.FifoThreshold = 1;
 800492c:	4b0c      	ldr	r3, [pc, #48]	@ (8004960 <MX_QUADSPI_Init+0x44>)
 800492e:	2201      	movs	r2, #1
 8004930:	609a      	str	r2, [r3, #8]
  hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_NONE;
 8004932:	4b0b      	ldr	r3, [pc, #44]	@ (8004960 <MX_QUADSPI_Init+0x44>)
 8004934:	2200      	movs	r2, #0
 8004936:	60da      	str	r2, [r3, #12]
  hqspi.Init.FlashSize = 24;
 8004938:	4b09      	ldr	r3, [pc, #36]	@ (8004960 <MX_QUADSPI_Init+0x44>)
 800493a:	2218      	movs	r2, #24
 800493c:	611a      	str	r2, [r3, #16]
  hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_1_CYCLE;
 800493e:	4b08      	ldr	r3, [pc, #32]	@ (8004960 <MX_QUADSPI_Init+0x44>)
 8004940:	2200      	movs	r2, #0
 8004942:	615a      	str	r2, [r3, #20]
  hqspi.Init.ClockMode = QSPI_CLOCK_MODE_0;
 8004944:	4b06      	ldr	r3, [pc, #24]	@ (8004960 <MX_QUADSPI_Init+0x44>)
 8004946:	2200      	movs	r2, #0
 8004948:	619a      	str	r2, [r3, #24]
  if (HAL_QSPI_Init(&hqspi) != HAL_OK)
 800494a:	4805      	ldr	r0, [pc, #20]	@ (8004960 <MX_QUADSPI_Init+0x44>)
 800494c:	f00a faae 	bl	800eeac <HAL_QSPI_Init>
 8004950:	4603      	mov	r3, r0
 8004952:	2b00      	cmp	r3, #0
 8004954:	d001      	beq.n	800495a <MX_QUADSPI_Init+0x3e>
  {
    Error_Handler();
 8004956:	f000 fc6b 	bl	8005230 <Error_Handler>
  }
  /* USER CODE BEGIN QUADSPI_Init 2 */

  /* USER CODE END QUADSPI_Init 2 */

}
 800495a:	bf00      	nop
 800495c:	bd80      	pop	{r7, pc}
 800495e:	bf00      	nop
 8004960:	2000043c 	.word	0x2000043c
 8004964:	a0001000 	.word	0xa0001000

08004968 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8004968:	b580      	push	{r7, lr}
 800496a:	b092      	sub	sp, #72	@ 0x48
 800496c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 800496e:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8004972:	2200      	movs	r2, #0
 8004974:	601a      	str	r2, [r3, #0]
 8004976:	605a      	str	r2, [r3, #4]
 8004978:	609a      	str	r2, [r3, #8]
 800497a:	60da      	str	r2, [r3, #12]
 800497c:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 800497e:	2300      	movs	r3, #0
 8004980:	633b      	str	r3, [r7, #48]	@ 0x30
  RTC_AlarmTypeDef sAlarm = {0};
 8004982:	1d3b      	adds	r3, r7, #4
 8004984:	222c      	movs	r2, #44	@ 0x2c
 8004986:	2100      	movs	r1, #0
 8004988:	4618      	mov	r0, r3
 800498a:	f011 fafd 	bl	8015f88 <memset>

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 800498e:	4b3c      	ldr	r3, [pc, #240]	@ (8004a80 <MX_RTC_Init+0x118>)
 8004990:	4a3c      	ldr	r2, [pc, #240]	@ (8004a84 <MX_RTC_Init+0x11c>)
 8004992:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8004994:	4b3a      	ldr	r3, [pc, #232]	@ (8004a80 <MX_RTC_Init+0x118>)
 8004996:	2200      	movs	r2, #0
 8004998:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 800499a:	4b39      	ldr	r3, [pc, #228]	@ (8004a80 <MX_RTC_Init+0x118>)
 800499c:	227f      	movs	r2, #127	@ 0x7f
 800499e:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 80049a0:	4b37      	ldr	r3, [pc, #220]	@ (8004a80 <MX_RTC_Init+0x118>)
 80049a2:	22ff      	movs	r2, #255	@ 0xff
 80049a4:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 80049a6:	4b36      	ldr	r3, [pc, #216]	@ (8004a80 <MX_RTC_Init+0x118>)
 80049a8:	2200      	movs	r2, #0
 80049aa:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 80049ac:	4b34      	ldr	r3, [pc, #208]	@ (8004a80 <MX_RTC_Init+0x118>)
 80049ae:	2200      	movs	r2, #0
 80049b0:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80049b2:	4b33      	ldr	r3, [pc, #204]	@ (8004a80 <MX_RTC_Init+0x118>)
 80049b4:	2200      	movs	r2, #0
 80049b6:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80049b8:	4b31      	ldr	r3, [pc, #196]	@ (8004a80 <MX_RTC_Init+0x118>)
 80049ba:	2200      	movs	r2, #0
 80049bc:	61da      	str	r2, [r3, #28]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80049be:	4830      	ldr	r0, [pc, #192]	@ (8004a80 <MX_RTC_Init+0x118>)
 80049c0:	f00c f992 	bl	8010ce8 <HAL_RTC_Init>
 80049c4:	4603      	mov	r3, r0
 80049c6:	2b00      	cmp	r3, #0
 80049c8:	d001      	beq.n	80049ce <MX_RTC_Init+0x66>
  {
    Error_Handler();
 80049ca:	f000 fc31 	bl	8005230 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0;
 80049ce:	2300      	movs	r3, #0
 80049d0:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
  sTime.Minutes = 0;
 80049d4:	2300      	movs	r3, #0
 80049d6:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
  sTime.Seconds = 0;
 80049da:	2300      	movs	r3, #0
 80049dc:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 80049e0:	2300      	movs	r3, #0
 80049e2:	643b      	str	r3, [r7, #64]	@ 0x40
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 80049e4:	2300      	movs	r3, #0
 80049e6:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK)
 80049e8:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 80049ec:	2200      	movs	r2, #0
 80049ee:	4619      	mov	r1, r3
 80049f0:	4823      	ldr	r0, [pc, #140]	@ (8004a80 <MX_RTC_Init+0x118>)
 80049f2:	f00c fa01 	bl	8010df8 <HAL_RTC_SetTime>
 80049f6:	4603      	mov	r3, r0
 80049f8:	2b00      	cmp	r3, #0
 80049fa:	d001      	beq.n	8004a00 <MX_RTC_Init+0x98>
  {
    Error_Handler();
 80049fc:	f000 fc18 	bl	8005230 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8004a00:	2301      	movs	r3, #1
 8004a02:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
  sDate.Month = RTC_MONTH_JANUARY;
 8004a06:	2301      	movs	r3, #1
 8004a08:	f887 3031 	strb.w	r3, [r7, #49]	@ 0x31
  sDate.Date = 1;
 8004a0c:	2301      	movs	r3, #1
 8004a0e:	f887 3032 	strb.w	r3, [r7, #50]	@ 0x32
  sDate.Year = 0;
 8004a12:	2300      	movs	r3, #0
 8004a14:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN) != HAL_OK)
 8004a18:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8004a1c:	2200      	movs	r2, #0
 8004a1e:	4619      	mov	r1, r3
 8004a20:	4817      	ldr	r0, [pc, #92]	@ (8004a80 <MX_RTC_Init+0x118>)
 8004a22:	f00c fae2 	bl	8010fea <HAL_RTC_SetDate>
 8004a26:	4603      	mov	r3, r0
 8004a28:	2b00      	cmp	r3, #0
 8004a2a:	d001      	beq.n	8004a30 <MX_RTC_Init+0xc8>
  {
    Error_Handler();
 8004a2c:	f000 fc00 	bl	8005230 <Error_Handler>
  }

  /** Enable the Alarm A
  */
  sAlarm.AlarmTime.Hours = 0;
 8004a30:	2300      	movs	r3, #0
 8004a32:	713b      	strb	r3, [r7, #4]
  sAlarm.AlarmTime.Minutes = 0;
 8004a34:	2300      	movs	r3, #0
 8004a36:	717b      	strb	r3, [r7, #5]
  sAlarm.AlarmTime.Seconds = 0;
 8004a38:	2300      	movs	r3, #0
 8004a3a:	71bb      	strb	r3, [r7, #6]
  sAlarm.AlarmTime.SubSeconds = 0;
 8004a3c:	2300      	movs	r3, #0
 8004a3e:	60bb      	str	r3, [r7, #8]
  sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8004a40:	2300      	movs	r3, #0
 8004a42:	613b      	str	r3, [r7, #16]
  sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8004a44:	2300      	movs	r3, #0
 8004a46:	617b      	str	r3, [r7, #20]
  sAlarm.AlarmMask = RTC_ALARMMASK_DATEWEEKDAY|RTC_ALARMMASK_HOURS
 8004a48:	4b0f      	ldr	r3, [pc, #60]	@ (8004a88 <MX_RTC_Init+0x120>)
 8004a4a:	61bb      	str	r3, [r7, #24]
                              |RTC_ALARMMASK_SECONDS;
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 8004a4c:	2300      	movs	r3, #0
 8004a4e:	623b      	str	r3, [r7, #32]
  sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 8004a50:	2300      	movs	r3, #0
 8004a52:	627b      	str	r3, [r7, #36]	@ 0x24
  sAlarm.AlarmDateWeekDay = 1;
 8004a54:	2301      	movs	r3, #1
 8004a56:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
  sAlarm.Alarm = RTC_ALARM_A;
 8004a5a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8004a5e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BIN) != HAL_OK)
 8004a60:	1d3b      	adds	r3, r7, #4
 8004a62:	2200      	movs	r2, #0
 8004a64:	4619      	mov	r1, r3
 8004a66:	4806      	ldr	r0, [pc, #24]	@ (8004a80 <MX_RTC_Init+0x118>)
 8004a68:	f00c fb46 	bl	80110f8 <HAL_RTC_SetAlarm_IT>
 8004a6c:	4603      	mov	r3, r0
 8004a6e:	2b00      	cmp	r3, #0
 8004a70:	d001      	beq.n	8004a76 <MX_RTC_Init+0x10e>
  {
    Error_Handler();
 8004a72:	f000 fbdd 	bl	8005230 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8004a76:	bf00      	nop
 8004a78:	3748      	adds	r7, #72	@ 0x48
 8004a7a:	46bd      	mov	sp, r7
 8004a7c:	bd80      	pop	{r7, pc}
 8004a7e:	bf00      	nop
 8004a80:	20000480 	.word	0x20000480
 8004a84:	40002800 	.word	0x40002800
 8004a88:	80800080 	.word	0x80800080

08004a8c <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8004a8c:	b580      	push	{r7, lr}
 8004a8e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8004a90:	4b1b      	ldr	r3, [pc, #108]	@ (8004b00 <MX_SPI2_Init+0x74>)
 8004a92:	4a1c      	ldr	r2, [pc, #112]	@ (8004b04 <MX_SPI2_Init+0x78>)
 8004a94:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8004a96:	4b1a      	ldr	r3, [pc, #104]	@ (8004b00 <MX_SPI2_Init+0x74>)
 8004a98:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8004a9c:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8004a9e:	4b18      	ldr	r3, [pc, #96]	@ (8004b00 <MX_SPI2_Init+0x74>)
 8004aa0:	2200      	movs	r2, #0
 8004aa2:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8004aa4:	4b16      	ldr	r3, [pc, #88]	@ (8004b00 <MX_SPI2_Init+0x74>)
 8004aa6:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 8004aaa:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8004aac:	4b14      	ldr	r3, [pc, #80]	@ (8004b00 <MX_SPI2_Init+0x74>)
 8004aae:	2200      	movs	r2, #0
 8004ab0:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8004ab2:	4b13      	ldr	r3, [pc, #76]	@ (8004b00 <MX_SPI2_Init+0x74>)
 8004ab4:	2200      	movs	r2, #0
 8004ab6:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8004ab8:	4b11      	ldr	r3, [pc, #68]	@ (8004b00 <MX_SPI2_Init+0x74>)
 8004aba:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004abe:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004ac0:	4b0f      	ldr	r3, [pc, #60]	@ (8004b00 <MX_SPI2_Init+0x74>)
 8004ac2:	2200      	movs	r2, #0
 8004ac4:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8004ac6:	4b0e      	ldr	r3, [pc, #56]	@ (8004b00 <MX_SPI2_Init+0x74>)
 8004ac8:	2200      	movs	r2, #0
 8004aca:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8004acc:	4b0c      	ldr	r3, [pc, #48]	@ (8004b00 <MX_SPI2_Init+0x74>)
 8004ace:	2200      	movs	r2, #0
 8004ad0:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004ad2:	4b0b      	ldr	r3, [pc, #44]	@ (8004b00 <MX_SPI2_Init+0x74>)
 8004ad4:	2200      	movs	r2, #0
 8004ad6:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 7;
 8004ad8:	4b09      	ldr	r3, [pc, #36]	@ (8004b00 <MX_SPI2_Init+0x74>)
 8004ada:	2207      	movs	r2, #7
 8004adc:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8004ade:	4b08      	ldr	r3, [pc, #32]	@ (8004b00 <MX_SPI2_Init+0x74>)
 8004ae0:	2200      	movs	r2, #0
 8004ae2:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8004ae4:	4b06      	ldr	r3, [pc, #24]	@ (8004b00 <MX_SPI2_Init+0x74>)
 8004ae6:	2208      	movs	r2, #8
 8004ae8:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8004aea:	4805      	ldr	r0, [pc, #20]	@ (8004b00 <MX_SPI2_Init+0x74>)
 8004aec:	f00c fd60 	bl	80115b0 <HAL_SPI_Init>
 8004af0:	4603      	mov	r3, r0
 8004af2:	2b00      	cmp	r3, #0
 8004af4:	d001      	beq.n	8004afa <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 8004af6:	f000 fb9b 	bl	8005230 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8004afa:	bf00      	nop
 8004afc:	bd80      	pop	{r7, pc}
 8004afe:	bf00      	nop
 8004b00:	200004a4 	.word	0x200004a4
 8004b04:	40003800 	.word	0x40003800

08004b08 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 8004b08:	b580      	push	{r7, lr}
 8004b0a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 8004b0c:	4b1b      	ldr	r3, [pc, #108]	@ (8004b7c <MX_SPI3_Init+0x74>)
 8004b0e:	4a1c      	ldr	r2, [pc, #112]	@ (8004b80 <MX_SPI3_Init+0x78>)
 8004b10:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8004b12:	4b1a      	ldr	r3, [pc, #104]	@ (8004b7c <MX_SPI3_Init+0x74>)
 8004b14:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8004b18:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8004b1a:	4b18      	ldr	r3, [pc, #96]	@ (8004b7c <MX_SPI3_Init+0x74>)
 8004b1c:	2200      	movs	r2, #0
 8004b1e:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8004b20:	4b16      	ldr	r3, [pc, #88]	@ (8004b7c <MX_SPI3_Init+0x74>)
 8004b22:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 8004b26:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8004b28:	4b14      	ldr	r3, [pc, #80]	@ (8004b7c <MX_SPI3_Init+0x74>)
 8004b2a:	2200      	movs	r2, #0
 8004b2c:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8004b2e:	4b13      	ldr	r3, [pc, #76]	@ (8004b7c <MX_SPI3_Init+0x74>)
 8004b30:	2200      	movs	r2, #0
 8004b32:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8004b34:	4b11      	ldr	r3, [pc, #68]	@ (8004b7c <MX_SPI3_Init+0x74>)
 8004b36:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004b3a:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8004b3c:	4b0f      	ldr	r3, [pc, #60]	@ (8004b7c <MX_SPI3_Init+0x74>)
 8004b3e:	2218      	movs	r2, #24
 8004b40:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8004b42:	4b0e      	ldr	r3, [pc, #56]	@ (8004b7c <MX_SPI3_Init+0x74>)
 8004b44:	2200      	movs	r2, #0
 8004b46:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8004b48:	4b0c      	ldr	r3, [pc, #48]	@ (8004b7c <MX_SPI3_Init+0x74>)
 8004b4a:	2200      	movs	r2, #0
 8004b4c:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004b4e:	4b0b      	ldr	r3, [pc, #44]	@ (8004b7c <MX_SPI3_Init+0x74>)
 8004b50:	2200      	movs	r2, #0
 8004b52:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi3.Init.CRCPolynomial = 7;
 8004b54:	4b09      	ldr	r3, [pc, #36]	@ (8004b7c <MX_SPI3_Init+0x74>)
 8004b56:	2207      	movs	r2, #7
 8004b58:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8004b5a:	4b08      	ldr	r3, [pc, #32]	@ (8004b7c <MX_SPI3_Init+0x74>)
 8004b5c:	2200      	movs	r2, #0
 8004b5e:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8004b60:	4b06      	ldr	r3, [pc, #24]	@ (8004b7c <MX_SPI3_Init+0x74>)
 8004b62:	2208      	movs	r2, #8
 8004b64:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8004b66:	4805      	ldr	r0, [pc, #20]	@ (8004b7c <MX_SPI3_Init+0x74>)
 8004b68:	f00c fd22 	bl	80115b0 <HAL_SPI_Init>
 8004b6c:	4603      	mov	r3, r0
 8004b6e:	2b00      	cmp	r3, #0
 8004b70:	d001      	beq.n	8004b76 <MX_SPI3_Init+0x6e>
  {
    Error_Handler();
 8004b72:	f000 fb5d 	bl	8005230 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8004b76:	bf00      	nop
 8004b78:	bd80      	pop	{r7, pc}
 8004b7a:	bf00      	nop
 8004b7c:	20000508 	.word	0x20000508
 8004b80:	40003c00 	.word	0x40003c00

08004b84 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8004b84:	b580      	push	{r7, lr}
 8004b86:	b096      	sub	sp, #88	@ 0x58
 8004b88:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004b8a:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8004b8e:	2200      	movs	r2, #0
 8004b90:	601a      	str	r2, [r3, #0]
 8004b92:	605a      	str	r2, [r3, #4]
 8004b94:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8004b96:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8004b9a:	2200      	movs	r2, #0
 8004b9c:	601a      	str	r2, [r3, #0]
 8004b9e:	605a      	str	r2, [r3, #4]
 8004ba0:	609a      	str	r2, [r3, #8]
 8004ba2:	60da      	str	r2, [r3, #12]
 8004ba4:	611a      	str	r2, [r3, #16]
 8004ba6:	615a      	str	r2, [r3, #20]
 8004ba8:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8004baa:	1d3b      	adds	r3, r7, #4
 8004bac:	222c      	movs	r2, #44	@ 0x2c
 8004bae:	2100      	movs	r1, #0
 8004bb0:	4618      	mov	r0, r3
 8004bb2:	f011 f9e9 	bl	8015f88 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8004bb6:	4b45      	ldr	r3, [pc, #276]	@ (8004ccc <MX_TIM1_Init+0x148>)
 8004bb8:	4a45      	ldr	r2, [pc, #276]	@ (8004cd0 <MX_TIM1_Init+0x14c>)
 8004bba:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 1599;
 8004bbc:	4b43      	ldr	r3, [pc, #268]	@ (8004ccc <MX_TIM1_Init+0x148>)
 8004bbe:	f240 623f 	movw	r2, #1599	@ 0x63f
 8004bc2:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004bc4:	4b41      	ldr	r3, [pc, #260]	@ (8004ccc <MX_TIM1_Init+0x148>)
 8004bc6:	2200      	movs	r2, #0
 8004bc8:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 49999;
 8004bca:	4b40      	ldr	r3, [pc, #256]	@ (8004ccc <MX_TIM1_Init+0x148>)
 8004bcc:	f24c 324f 	movw	r2, #49999	@ 0xc34f
 8004bd0:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004bd2:	4b3e      	ldr	r3, [pc, #248]	@ (8004ccc <MX_TIM1_Init+0x148>)
 8004bd4:	2200      	movs	r2, #0
 8004bd6:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8004bd8:	4b3c      	ldr	r3, [pc, #240]	@ (8004ccc <MX_TIM1_Init+0x148>)
 8004bda:	2200      	movs	r2, #0
 8004bdc:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004bde:	4b3b      	ldr	r3, [pc, #236]	@ (8004ccc <MX_TIM1_Init+0x148>)
 8004be0:	2200      	movs	r2, #0
 8004be2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8004be4:	4839      	ldr	r0, [pc, #228]	@ (8004ccc <MX_TIM1_Init+0x148>)
 8004be6:	f00d feff 	bl	80129e8 <HAL_TIM_PWM_Init>
 8004bea:	4603      	mov	r3, r0
 8004bec:	2b00      	cmp	r3, #0
 8004bee:	d001      	beq.n	8004bf4 <MX_TIM1_Init+0x70>
  {
    Error_Handler();
 8004bf0:	f000 fb1e 	bl	8005230 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004bf4:	2300      	movs	r3, #0
 8004bf6:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8004bf8:	2300      	movs	r3, #0
 8004bfa:	653b      	str	r3, [r7, #80]	@ 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004bfc:	2300      	movs	r3, #0
 8004bfe:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8004c00:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8004c04:	4619      	mov	r1, r3
 8004c06:	4831      	ldr	r0, [pc, #196]	@ (8004ccc <MX_TIM1_Init+0x148>)
 8004c08:	f00f fc6c 	bl	80144e4 <HAL_TIMEx_MasterConfigSynchronization>
 8004c0c:	4603      	mov	r3, r0
 8004c0e:	2b00      	cmp	r3, #0
 8004c10:	d001      	beq.n	8004c16 <MX_TIM1_Init+0x92>
  {
    Error_Handler();
 8004c12:	f000 fb0d 	bl	8005230 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8004c16:	2360      	movs	r3, #96	@ 0x60
 8004c18:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.Pulse = 0;
 8004c1a:	2300      	movs	r3, #0
 8004c1c:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8004c1e:	2300      	movs	r3, #0
 8004c20:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8004c22:	2300      	movs	r3, #0
 8004c24:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8004c26:	2300      	movs	r3, #0
 8004c28:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8004c2a:	2300      	movs	r3, #0
 8004c2c:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8004c2e:	2300      	movs	r3, #0
 8004c30:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8004c32:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8004c36:	2200      	movs	r2, #0
 8004c38:	4619      	mov	r1, r3
 8004c3a:	4824      	ldr	r0, [pc, #144]	@ (8004ccc <MX_TIM1_Init+0x148>)
 8004c3c:	f00e fc3e 	bl	80134bc <HAL_TIM_PWM_ConfigChannel>
 8004c40:	4603      	mov	r3, r0
 8004c42:	2b00      	cmp	r3, #0
 8004c44:	d001      	beq.n	8004c4a <MX_TIM1_Init+0xc6>
  {
    Error_Handler();
 8004c46:	f000 faf3 	bl	8005230 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8004c4a:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8004c4e:	2204      	movs	r2, #4
 8004c50:	4619      	mov	r1, r3
 8004c52:	481e      	ldr	r0, [pc, #120]	@ (8004ccc <MX_TIM1_Init+0x148>)
 8004c54:	f00e fc32 	bl	80134bc <HAL_TIM_PWM_ConfigChannel>
 8004c58:	4603      	mov	r3, r0
 8004c5a:	2b00      	cmp	r3, #0
 8004c5c:	d001      	beq.n	8004c62 <MX_TIM1_Init+0xde>
  {
    Error_Handler();
 8004c5e:	f000 fae7 	bl	8005230 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8004c62:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8004c66:	2208      	movs	r2, #8
 8004c68:	4619      	mov	r1, r3
 8004c6a:	4818      	ldr	r0, [pc, #96]	@ (8004ccc <MX_TIM1_Init+0x148>)
 8004c6c:	f00e fc26 	bl	80134bc <HAL_TIM_PWM_ConfigChannel>
 8004c70:	4603      	mov	r3, r0
 8004c72:	2b00      	cmp	r3, #0
 8004c74:	d001      	beq.n	8004c7a <MX_TIM1_Init+0xf6>
  {
    Error_Handler();
 8004c76:	f000 fadb 	bl	8005230 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8004c7a:	2300      	movs	r3, #0
 8004c7c:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8004c7e:	2300      	movs	r3, #0
 8004c80:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8004c82:	2300      	movs	r3, #0
 8004c84:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8004c86:	2300      	movs	r3, #0
 8004c88:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8004c8a:	2300      	movs	r3, #0
 8004c8c:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8004c8e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8004c92:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8004c94:	2300      	movs	r3, #0
 8004c96:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8004c98:	2300      	movs	r3, #0
 8004c9a:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8004c9c:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8004ca0:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8004ca2:	2300      	movs	r3, #0
 8004ca4:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8004ca6:	2300      	movs	r3, #0
 8004ca8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8004caa:	1d3b      	adds	r3, r7, #4
 8004cac:	4619      	mov	r1, r3
 8004cae:	4807      	ldr	r0, [pc, #28]	@ (8004ccc <MX_TIM1_Init+0x148>)
 8004cb0:	f00f fca0 	bl	80145f4 <HAL_TIMEx_ConfigBreakDeadTime>
 8004cb4:	4603      	mov	r3, r0
 8004cb6:	2b00      	cmp	r3, #0
 8004cb8:	d001      	beq.n	8004cbe <MX_TIM1_Init+0x13a>
  {
    Error_Handler();
 8004cba:	f000 fab9 	bl	8005230 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8004cbe:	4803      	ldr	r0, [pc, #12]	@ (8004ccc <MX_TIM1_Init+0x148>)
 8004cc0:	f002 fd7c 	bl	80077bc <HAL_TIM_MspPostInit>

}
 8004cc4:	bf00      	nop
 8004cc6:	3758      	adds	r7, #88	@ 0x58
 8004cc8:	46bd      	mov	sp, r7
 8004cca:	bd80      	pop	{r7, pc}
 8004ccc:	2000056c 	.word	0x2000056c
 8004cd0:	40012c00 	.word	0x40012c00

08004cd4 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8004cd4:	b580      	push	{r7, lr}
 8004cd6:	b088      	sub	sp, #32
 8004cd8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004cda:	f107 0314 	add.w	r3, r7, #20
 8004cde:	2200      	movs	r2, #0
 8004ce0:	601a      	str	r2, [r3, #0]
 8004ce2:	605a      	str	r2, [r3, #4]
 8004ce4:	609a      	str	r2, [r3, #8]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8004ce6:	1d3b      	adds	r3, r7, #4
 8004ce8:	2200      	movs	r2, #0
 8004cea:	601a      	str	r2, [r3, #0]
 8004cec:	605a      	str	r2, [r3, #4]
 8004cee:	609a      	str	r2, [r3, #8]
 8004cf0:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8004cf2:	4b21      	ldr	r3, [pc, #132]	@ (8004d78 <MX_TIM2_Init+0xa4>)
 8004cf4:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8004cf8:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8004cfa:	4b1f      	ldr	r3, [pc, #124]	@ (8004d78 <MX_TIM2_Init+0xa4>)
 8004cfc:	2200      	movs	r2, #0
 8004cfe:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004d00:	4b1d      	ldr	r3, [pc, #116]	@ (8004d78 <MX_TIM2_Init+0xa4>)
 8004d02:	2200      	movs	r2, #0
 8004d04:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8004d06:	4b1c      	ldr	r3, [pc, #112]	@ (8004d78 <MX_TIM2_Init+0xa4>)
 8004d08:	f04f 32ff 	mov.w	r2, #4294967295
 8004d0c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004d0e:	4b1a      	ldr	r3, [pc, #104]	@ (8004d78 <MX_TIM2_Init+0xa4>)
 8004d10:	2200      	movs	r2, #0
 8004d12:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004d14:	4b18      	ldr	r3, [pc, #96]	@ (8004d78 <MX_TIM2_Init+0xa4>)
 8004d16:	2200      	movs	r2, #0
 8004d18:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 8004d1a:	4817      	ldr	r0, [pc, #92]	@ (8004d78 <MX_TIM2_Init+0xa4>)
 8004d1c:	f00e f858 	bl	8012dd0 <HAL_TIM_IC_Init>
 8004d20:	4603      	mov	r3, r0
 8004d22:	2b00      	cmp	r3, #0
 8004d24:	d001      	beq.n	8004d2a <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8004d26:	f000 fa83 	bl	8005230 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004d2a:	2300      	movs	r3, #0
 8004d2c:	617b      	str	r3, [r7, #20]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004d2e:	2300      	movs	r3, #0
 8004d30:	61fb      	str	r3, [r7, #28]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8004d32:	f107 0314 	add.w	r3, r7, #20
 8004d36:	4619      	mov	r1, r3
 8004d38:	480f      	ldr	r0, [pc, #60]	@ (8004d78 <MX_TIM2_Init+0xa4>)
 8004d3a:	f00f fbd3 	bl	80144e4 <HAL_TIMEx_MasterConfigSynchronization>
 8004d3e:	4603      	mov	r3, r0
 8004d40:	2b00      	cmp	r3, #0
 8004d42:	d001      	beq.n	8004d48 <MX_TIM2_Init+0x74>
  {
    Error_Handler();
 8004d44:	f000 fa74 	bl	8005230 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8004d48:	2300      	movs	r3, #0
 8004d4a:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8004d4c:	2301      	movs	r3, #1
 8004d4e:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8004d50:	2300      	movs	r3, #0
 8004d52:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICFilter = 0;
 8004d54:	2300      	movs	r3, #0
 8004d56:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8004d58:	1d3b      	adds	r3, r7, #4
 8004d5a:	2200      	movs	r2, #0
 8004d5c:	4619      	mov	r1, r3
 8004d5e:	4806      	ldr	r0, [pc, #24]	@ (8004d78 <MX_TIM2_Init+0xa4>)
 8004d60:	f00e fb10 	bl	8013384 <HAL_TIM_IC_ConfigChannel>
 8004d64:	4603      	mov	r3, r0
 8004d66:	2b00      	cmp	r3, #0
 8004d68:	d001      	beq.n	8004d6e <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 8004d6a:	f000 fa61 	bl	8005230 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8004d6e:	bf00      	nop
 8004d70:	3720      	adds	r7, #32
 8004d72:	46bd      	mov	sp, r7
 8004d74:	bd80      	pop	{r7, pc}
 8004d76:	bf00      	nop
 8004d78:	200005b8 	.word	0x200005b8

08004d7c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8004d7c:	b580      	push	{r7, lr}
 8004d7e:	b090      	sub	sp, #64	@ 0x40
 8004d80:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8004d82:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8004d86:	2200      	movs	r2, #0
 8004d88:	601a      	str	r2, [r3, #0]
 8004d8a:	605a      	str	r2, [r3, #4]
 8004d8c:	609a      	str	r2, [r3, #8]
 8004d8e:	60da      	str	r2, [r3, #12]
 8004d90:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004d92:	f107 0320 	add.w	r3, r7, #32
 8004d96:	2200      	movs	r2, #0
 8004d98:	601a      	str	r2, [r3, #0]
 8004d9a:	605a      	str	r2, [r3, #4]
 8004d9c:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8004d9e:	1d3b      	adds	r3, r7, #4
 8004da0:	2200      	movs	r2, #0
 8004da2:	601a      	str	r2, [r3, #0]
 8004da4:	605a      	str	r2, [r3, #4]
 8004da6:	609a      	str	r2, [r3, #8]
 8004da8:	60da      	str	r2, [r3, #12]
 8004daa:	611a      	str	r2, [r3, #16]
 8004dac:	615a      	str	r2, [r3, #20]
 8004dae:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8004db0:	4b2c      	ldr	r3, [pc, #176]	@ (8004e64 <MX_TIM3_Init+0xe8>)
 8004db2:	4a2d      	ldr	r2, [pc, #180]	@ (8004e68 <MX_TIM3_Init+0xec>)
 8004db4:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8004db6:	4b2b      	ldr	r3, [pc, #172]	@ (8004e64 <MX_TIM3_Init+0xe8>)
 8004db8:	2200      	movs	r2, #0
 8004dba:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004dbc:	4b29      	ldr	r3, [pc, #164]	@ (8004e64 <MX_TIM3_Init+0xe8>)
 8004dbe:	2200      	movs	r2, #0
 8004dc0:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 31;
 8004dc2:	4b28      	ldr	r3, [pc, #160]	@ (8004e64 <MX_TIM3_Init+0xe8>)
 8004dc4:	221f      	movs	r2, #31
 8004dc6:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004dc8:	4b26      	ldr	r3, [pc, #152]	@ (8004e64 <MX_TIM3_Init+0xe8>)
 8004dca:	2200      	movs	r2, #0
 8004dcc:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004dce:	4b25      	ldr	r3, [pc, #148]	@ (8004e64 <MX_TIM3_Init+0xe8>)
 8004dd0:	2200      	movs	r2, #0
 8004dd2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8004dd4:	4823      	ldr	r0, [pc, #140]	@ (8004e64 <MX_TIM3_Init+0xe8>)
 8004dd6:	f00d fb17 	bl	8012408 <HAL_TIM_Base_Init>
 8004dda:	4603      	mov	r3, r0
 8004ddc:	2b00      	cmp	r3, #0
 8004dde:	d001      	beq.n	8004de4 <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 8004de0:	f000 fa26 	bl	8005230 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8004de4:	481f      	ldr	r0, [pc, #124]	@ (8004e64 <MX_TIM3_Init+0xe8>)
 8004de6:	f00d fdff 	bl	80129e8 <HAL_TIM_PWM_Init>
 8004dea:	4603      	mov	r3, r0
 8004dec:	2b00      	cmp	r3, #0
 8004dee:	d001      	beq.n	8004df4 <MX_TIM3_Init+0x78>
  {
    Error_Handler();
 8004df0:	f000 fa1e 	bl	8005230 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_EXTERNAL1;
 8004df4:	2307      	movs	r3, #7
 8004df6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sSlaveConfig.InputTrigger = TIM_TS_ITR3;
 8004df8:	2330      	movs	r3, #48	@ 0x30
 8004dfa:	633b      	str	r3, [r7, #48]	@ 0x30
  if (HAL_TIM_SlaveConfigSynchro(&htim3, &sSlaveConfig) != HAL_OK)
 8004dfc:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8004e00:	4619      	mov	r1, r3
 8004e02:	4818      	ldr	r0, [pc, #96]	@ (8004e64 <MX_TIM3_Init+0xe8>)
 8004e04:	f00e fd37 	bl	8013876 <HAL_TIM_SlaveConfigSynchro>
 8004e08:	4603      	mov	r3, r0
 8004e0a:	2b00      	cmp	r3, #0
 8004e0c:	d001      	beq.n	8004e12 <MX_TIM3_Init+0x96>
  {
    Error_Handler();
 8004e0e:	f000 fa0f 	bl	8005230 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004e12:	2300      	movs	r3, #0
 8004e14:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004e16:	2300      	movs	r3, #0
 8004e18:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8004e1a:	f107 0320 	add.w	r3, r7, #32
 8004e1e:	4619      	mov	r1, r3
 8004e20:	4810      	ldr	r0, [pc, #64]	@ (8004e64 <MX_TIM3_Init+0xe8>)
 8004e22:	f00f fb5f 	bl	80144e4 <HAL_TIMEx_MasterConfigSynchronization>
 8004e26:	4603      	mov	r3, r0
 8004e28:	2b00      	cmp	r3, #0
 8004e2a:	d001      	beq.n	8004e30 <MX_TIM3_Init+0xb4>
  {
    Error_Handler();
 8004e2c:	f000 fa00 	bl	8005230 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8004e30:	2360      	movs	r3, #96	@ 0x60
 8004e32:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 15;
 8004e34:	230f      	movs	r3, #15
 8004e36:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8004e38:	2300      	movs	r3, #0
 8004e3a:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8004e3c:	2300      	movs	r3, #0
 8004e3e:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8004e40:	1d3b      	adds	r3, r7, #4
 8004e42:	2208      	movs	r2, #8
 8004e44:	4619      	mov	r1, r3
 8004e46:	4807      	ldr	r0, [pc, #28]	@ (8004e64 <MX_TIM3_Init+0xe8>)
 8004e48:	f00e fb38 	bl	80134bc <HAL_TIM_PWM_ConfigChannel>
 8004e4c:	4603      	mov	r3, r0
 8004e4e:	2b00      	cmp	r3, #0
 8004e50:	d001      	beq.n	8004e56 <MX_TIM3_Init+0xda>
  {
    Error_Handler();
 8004e52:	f000 f9ed 	bl	8005230 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8004e56:	4803      	ldr	r0, [pc, #12]	@ (8004e64 <MX_TIM3_Init+0xe8>)
 8004e58:	f002 fcb0 	bl	80077bc <HAL_TIM_MspPostInit>

}
 8004e5c:	bf00      	nop
 8004e5e:	3740      	adds	r7, #64	@ 0x40
 8004e60:	46bd      	mov	sp, r7
 8004e62:	bd80      	pop	{r7, pc}
 8004e64:	20000604 	.word	0x20000604
 8004e68:	40000400 	.word	0x40000400

08004e6c <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8004e6c:	b580      	push	{r7, lr}
 8004e6e:	b08e      	sub	sp, #56	@ 0x38
 8004e70:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8004e72:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8004e76:	2200      	movs	r2, #0
 8004e78:	601a      	str	r2, [r3, #0]
 8004e7a:	605a      	str	r2, [r3, #4]
 8004e7c:	609a      	str	r2, [r3, #8]
 8004e7e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004e80:	f107 031c 	add.w	r3, r7, #28
 8004e84:	2200      	movs	r2, #0
 8004e86:	601a      	str	r2, [r3, #0]
 8004e88:	605a      	str	r2, [r3, #4]
 8004e8a:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8004e8c:	463b      	mov	r3, r7
 8004e8e:	2200      	movs	r2, #0
 8004e90:	601a      	str	r2, [r3, #0]
 8004e92:	605a      	str	r2, [r3, #4]
 8004e94:	609a      	str	r2, [r3, #8]
 8004e96:	60da      	str	r2, [r3, #12]
 8004e98:	611a      	str	r2, [r3, #16]
 8004e9a:	615a      	str	r2, [r3, #20]
 8004e9c:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8004e9e:	4b2b      	ldr	r3, [pc, #172]	@ (8004f4c <MX_TIM4_Init+0xe0>)
 8004ea0:	4a2b      	ldr	r2, [pc, #172]	@ (8004f50 <MX_TIM4_Init+0xe4>)
 8004ea2:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 99;
 8004ea4:	4b29      	ldr	r3, [pc, #164]	@ (8004f4c <MX_TIM4_Init+0xe0>)
 8004ea6:	2263      	movs	r2, #99	@ 0x63
 8004ea8:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004eaa:	4b28      	ldr	r3, [pc, #160]	@ (8004f4c <MX_TIM4_Init+0xe0>)
 8004eac:	2200      	movs	r2, #0
 8004eae:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 999;
 8004eb0:	4b26      	ldr	r3, [pc, #152]	@ (8004f4c <MX_TIM4_Init+0xe0>)
 8004eb2:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8004eb6:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004eb8:	4b24      	ldr	r3, [pc, #144]	@ (8004f4c <MX_TIM4_Init+0xe0>)
 8004eba:	2200      	movs	r2, #0
 8004ebc:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8004ebe:	4b23      	ldr	r3, [pc, #140]	@ (8004f4c <MX_TIM4_Init+0xe0>)
 8004ec0:	2280      	movs	r2, #128	@ 0x80
 8004ec2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8004ec4:	4821      	ldr	r0, [pc, #132]	@ (8004f4c <MX_TIM4_Init+0xe0>)
 8004ec6:	f00d fa9f 	bl	8012408 <HAL_TIM_Base_Init>
 8004eca:	4603      	mov	r3, r0
 8004ecc:	2b00      	cmp	r3, #0
 8004ece:	d001      	beq.n	8004ed4 <MX_TIM4_Init+0x68>
  {
    Error_Handler();
 8004ed0:	f000 f9ae 	bl	8005230 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8004ed4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8004ed8:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8004eda:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8004ede:	4619      	mov	r1, r3
 8004ee0:	481a      	ldr	r0, [pc, #104]	@ (8004f4c <MX_TIM4_Init+0xe0>)
 8004ee2:	f00e fbff 	bl	80136e4 <HAL_TIM_ConfigClockSource>
 8004ee6:	4603      	mov	r3, r0
 8004ee8:	2b00      	cmp	r3, #0
 8004eea:	d001      	beq.n	8004ef0 <MX_TIM4_Init+0x84>
  {
    Error_Handler();
 8004eec:	f000 f9a0 	bl	8005230 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim4) != HAL_OK)
 8004ef0:	4816      	ldr	r0, [pc, #88]	@ (8004f4c <MX_TIM4_Init+0xe0>)
 8004ef2:	f00d fae0 	bl	80124b6 <HAL_TIM_OC_Init>
 8004ef6:	4603      	mov	r3, r0
 8004ef8:	2b00      	cmp	r3, #0
 8004efa:	d001      	beq.n	8004f00 <MX_TIM4_Init+0x94>
  {
    Error_Handler();
 8004efc:	f000 f998 	bl	8005230 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8004f00:	2320      	movs	r3, #32
 8004f02:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004f04:	2300      	movs	r3, #0
 8004f06:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8004f08:	f107 031c 	add.w	r3, r7, #28
 8004f0c:	4619      	mov	r1, r3
 8004f0e:	480f      	ldr	r0, [pc, #60]	@ (8004f4c <MX_TIM4_Init+0xe0>)
 8004f10:	f00f fae8 	bl	80144e4 <HAL_TIMEx_MasterConfigSynchronization>
 8004f14:	4603      	mov	r3, r0
 8004f16:	2b00      	cmp	r3, #0
 8004f18:	d001      	beq.n	8004f1e <MX_TIM4_Init+0xb2>
  {
    Error_Handler();
 8004f1a:	f000 f989 	bl	8005230 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 8004f1e:	2300      	movs	r3, #0
 8004f20:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8004f22:	2300      	movs	r3, #0
 8004f24:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8004f26:	2300      	movs	r3, #0
 8004f28:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8004f2a:	2300      	movs	r3, #0
 8004f2c:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_OC_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8004f2e:	463b      	mov	r3, r7
 8004f30:	2208      	movs	r2, #8
 8004f32:	4619      	mov	r1, r3
 8004f34:	4805      	ldr	r0, [pc, #20]	@ (8004f4c <MX_TIM4_Init+0xe0>)
 8004f36:	f00e f9ab 	bl	8013290 <HAL_TIM_OC_ConfigChannel>
 8004f3a:	4603      	mov	r3, r0
 8004f3c:	2b00      	cmp	r3, #0
 8004f3e:	d001      	beq.n	8004f44 <MX_TIM4_Init+0xd8>
  {
    Error_Handler();
 8004f40:	f000 f976 	bl	8005230 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8004f44:	bf00      	nop
 8004f46:	3738      	adds	r7, #56	@ 0x38
 8004f48:	46bd      	mov	sp, r7
 8004f4a:	bd80      	pop	{r7, pc}
 8004f4c:	20000650 	.word	0x20000650
 8004f50:	40000800 	.word	0x40000800

08004f54 <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 8004f54:	b580      	push	{r7, lr}
 8004f56:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8004f58:	4b14      	ldr	r3, [pc, #80]	@ (8004fac <MX_UART4_Init+0x58>)
 8004f5a:	4a15      	ldr	r2, [pc, #84]	@ (8004fb0 <MX_UART4_Init+0x5c>)
 8004f5c:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 8004f5e:	4b13      	ldr	r3, [pc, #76]	@ (8004fac <MX_UART4_Init+0x58>)
 8004f60:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8004f64:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8004f66:	4b11      	ldr	r3, [pc, #68]	@ (8004fac <MX_UART4_Init+0x58>)
 8004f68:	2200      	movs	r2, #0
 8004f6a:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8004f6c:	4b0f      	ldr	r3, [pc, #60]	@ (8004fac <MX_UART4_Init+0x58>)
 8004f6e:	2200      	movs	r2, #0
 8004f70:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8004f72:	4b0e      	ldr	r3, [pc, #56]	@ (8004fac <MX_UART4_Init+0x58>)
 8004f74:	2200      	movs	r2, #0
 8004f76:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8004f78:	4b0c      	ldr	r3, [pc, #48]	@ (8004fac <MX_UART4_Init+0x58>)
 8004f7a:	220c      	movs	r2, #12
 8004f7c:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8004f7e:	4b0b      	ldr	r3, [pc, #44]	@ (8004fac <MX_UART4_Init+0x58>)
 8004f80:	2200      	movs	r2, #0
 8004f82:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8004f84:	4b09      	ldr	r3, [pc, #36]	@ (8004fac <MX_UART4_Init+0x58>)
 8004f86:	2200      	movs	r2, #0
 8004f88:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8004f8a:	4b08      	ldr	r3, [pc, #32]	@ (8004fac <MX_UART4_Init+0x58>)
 8004f8c:	2200      	movs	r2, #0
 8004f8e:	621a      	str	r2, [r3, #32]
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8004f90:	4b06      	ldr	r3, [pc, #24]	@ (8004fac <MX_UART4_Init+0x58>)
 8004f92:	2200      	movs	r2, #0
 8004f94:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_HalfDuplex_Init(&huart4) != HAL_OK)
 8004f96:	4805      	ldr	r0, [pc, #20]	@ (8004fac <MX_UART4_Init+0x58>)
 8004f98:	f00f fbf8 	bl	801478c <HAL_HalfDuplex_Init>
 8004f9c:	4603      	mov	r3, r0
 8004f9e:	2b00      	cmp	r3, #0
 8004fa0:	d001      	beq.n	8004fa6 <MX_UART4_Init+0x52>
  {
    Error_Handler();
 8004fa2:	f000 f945 	bl	8005230 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8004fa6:	bf00      	nop
 8004fa8:	bd80      	pop	{r7, pc}
 8004faa:	bf00      	nop
 8004fac:	2000069c 	.word	0x2000069c
 8004fb0:	40004c00 	.word	0x40004c00

08004fb4 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8004fb4:	b580      	push	{r7, lr}
 8004fb6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8004fb8:	4b14      	ldr	r3, [pc, #80]	@ (800500c <MX_USART1_UART_Init+0x58>)
 8004fba:	4a15      	ldr	r2, [pc, #84]	@ (8005010 <MX_USART1_UART_Init+0x5c>)
 8004fbc:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 38400;
 8004fbe:	4b13      	ldr	r3, [pc, #76]	@ (800500c <MX_USART1_UART_Init+0x58>)
 8004fc0:	f44f 4216 	mov.w	r2, #38400	@ 0x9600
 8004fc4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8004fc6:	4b11      	ldr	r3, [pc, #68]	@ (800500c <MX_USART1_UART_Init+0x58>)
 8004fc8:	2200      	movs	r2, #0
 8004fca:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8004fcc:	4b0f      	ldr	r3, [pc, #60]	@ (800500c <MX_USART1_UART_Init+0x58>)
 8004fce:	2200      	movs	r2, #0
 8004fd0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8004fd2:	4b0e      	ldr	r3, [pc, #56]	@ (800500c <MX_USART1_UART_Init+0x58>)
 8004fd4:	2200      	movs	r2, #0
 8004fd6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8004fd8:	4b0c      	ldr	r3, [pc, #48]	@ (800500c <MX_USART1_UART_Init+0x58>)
 8004fda:	220c      	movs	r2, #12
 8004fdc:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8004fde:	4b0b      	ldr	r3, [pc, #44]	@ (800500c <MX_USART1_UART_Init+0x58>)
 8004fe0:	2200      	movs	r2, #0
 8004fe2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8004fe4:	4b09      	ldr	r3, [pc, #36]	@ (800500c <MX_USART1_UART_Init+0x58>)
 8004fe6:	2200      	movs	r2, #0
 8004fe8:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8004fea:	4b08      	ldr	r3, [pc, #32]	@ (800500c <MX_USART1_UART_Init+0x58>)
 8004fec:	2200      	movs	r2, #0
 8004fee:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8004ff0:	4b06      	ldr	r3, [pc, #24]	@ (800500c <MX_USART1_UART_Init+0x58>)
 8004ff2:	2200      	movs	r2, #0
 8004ff4:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8004ff6:	4805      	ldr	r0, [pc, #20]	@ (800500c <MX_USART1_UART_Init+0x58>)
 8004ff8:	f00f fb7a 	bl	80146f0 <HAL_UART_Init>
 8004ffc:	4603      	mov	r3, r0
 8004ffe:	2b00      	cmp	r3, #0
 8005000:	d001      	beq.n	8005006 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8005002:	f000 f915 	bl	8005230 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8005006:	bf00      	nop
 8005008:	bd80      	pop	{r7, pc}
 800500a:	bf00      	nop
 800500c:	20000724 	.word	0x20000724
 8005010:	40013800 	.word	0x40013800

08005014 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8005014:	b580      	push	{r7, lr}
 8005016:	b082      	sub	sp, #8
 8005018:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800501a:	4b14      	ldr	r3, [pc, #80]	@ (800506c <MX_DMA_Init+0x58>)
 800501c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800501e:	4a13      	ldr	r2, [pc, #76]	@ (800506c <MX_DMA_Init+0x58>)
 8005020:	f043 0301 	orr.w	r3, r3, #1
 8005024:	6493      	str	r3, [r2, #72]	@ 0x48
 8005026:	4b11      	ldr	r3, [pc, #68]	@ (800506c <MX_DMA_Init+0x58>)
 8005028:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800502a:	f003 0301 	and.w	r3, r3, #1
 800502e:	607b      	str	r3, [r7, #4]
 8005030:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8005032:	2200      	movs	r2, #0
 8005034:	2100      	movs	r1, #0
 8005036:	200b      	movs	r0, #11
 8005038:	f007 fb99 	bl	800c76e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 800503c:	200b      	movs	r0, #11
 800503e:	f007 fbb2 	bl	800c7a6 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 0, 0);
 8005042:	2200      	movs	r2, #0
 8005044:	2100      	movs	r1, #0
 8005046:	200e      	movs	r0, #14
 8005048:	f007 fb91 	bl	800c76e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 800504c:	200e      	movs	r0, #14
 800504e:	f007 fbaa 	bl	800c7a6 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 8005052:	2200      	movs	r2, #0
 8005054:	2100      	movs	r1, #0
 8005056:	200f      	movs	r0, #15
 8005058:	f007 fb89 	bl	800c76e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 800505c:	200f      	movs	r0, #15
 800505e:	f007 fba2 	bl	800c7a6 <HAL_NVIC_EnableIRQ>

}
 8005062:	bf00      	nop
 8005064:	3708      	adds	r7, #8
 8005066:	46bd      	mov	sp, r7
 8005068:	bd80      	pop	{r7, pc}
 800506a:	bf00      	nop
 800506c:	40021000 	.word	0x40021000

08005070 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8005070:	b580      	push	{r7, lr}
 8005072:	b08a      	sub	sp, #40	@ 0x28
 8005074:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005076:	f107 0314 	add.w	r3, r7, #20
 800507a:	2200      	movs	r2, #0
 800507c:	601a      	str	r2, [r3, #0]
 800507e:	605a      	str	r2, [r3, #4]
 8005080:	609a      	str	r2, [r3, #8]
 8005082:	60da      	str	r2, [r3, #12]
 8005084:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */
  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8005086:	4b66      	ldr	r3, [pc, #408]	@ (8005220 <MX_GPIO_Init+0x1b0>)
 8005088:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800508a:	4a65      	ldr	r2, [pc, #404]	@ (8005220 <MX_GPIO_Init+0x1b0>)
 800508c:	f043 0304 	orr.w	r3, r3, #4
 8005090:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8005092:	4b63      	ldr	r3, [pc, #396]	@ (8005220 <MX_GPIO_Init+0x1b0>)
 8005094:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005096:	f003 0304 	and.w	r3, r3, #4
 800509a:	613b      	str	r3, [r7, #16]
 800509c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800509e:	4b60      	ldr	r3, [pc, #384]	@ (8005220 <MX_GPIO_Init+0x1b0>)
 80050a0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80050a2:	4a5f      	ldr	r2, [pc, #380]	@ (8005220 <MX_GPIO_Init+0x1b0>)
 80050a4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80050a8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80050aa:	4b5d      	ldr	r3, [pc, #372]	@ (8005220 <MX_GPIO_Init+0x1b0>)
 80050ac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80050ae:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80050b2:	60fb      	str	r3, [r7, #12]
 80050b4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80050b6:	4b5a      	ldr	r3, [pc, #360]	@ (8005220 <MX_GPIO_Init+0x1b0>)
 80050b8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80050ba:	4a59      	ldr	r2, [pc, #356]	@ (8005220 <MX_GPIO_Init+0x1b0>)
 80050bc:	f043 0301 	orr.w	r3, r3, #1
 80050c0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80050c2:	4b57      	ldr	r3, [pc, #348]	@ (8005220 <MX_GPIO_Init+0x1b0>)
 80050c4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80050c6:	f003 0301 	and.w	r3, r3, #1
 80050ca:	60bb      	str	r3, [r7, #8]
 80050cc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80050ce:	4b54      	ldr	r3, [pc, #336]	@ (8005220 <MX_GPIO_Init+0x1b0>)
 80050d0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80050d2:	4a53      	ldr	r2, [pc, #332]	@ (8005220 <MX_GPIO_Init+0x1b0>)
 80050d4:	f043 0302 	orr.w	r3, r3, #2
 80050d8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80050da:	4b51      	ldr	r3, [pc, #324]	@ (8005220 <MX_GPIO_Init+0x1b0>)
 80050dc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80050de:	f003 0302 	and.w	r3, r3, #2
 80050e2:	607b      	str	r3, [r7, #4]
 80050e4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80050e6:	4b4e      	ldr	r3, [pc, #312]	@ (8005220 <MX_GPIO_Init+0x1b0>)
 80050e8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80050ea:	4a4d      	ldr	r2, [pc, #308]	@ (8005220 <MX_GPIO_Init+0x1b0>)
 80050ec:	f043 0308 	orr.w	r3, r3, #8
 80050f0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80050f2:	4b4b      	ldr	r3, [pc, #300]	@ (8005220 <MX_GPIO_Init+0x1b0>)
 80050f4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80050f6:	f003 0308 	and.w	r3, r3, #8
 80050fa:	603b      	str	r3, [r7, #0]
 80050fc:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DBG_GPIO_Port, DBG_Pin, GPIO_PIN_RESET);
 80050fe:	2200      	movs	r2, #0
 8005100:	2108      	movs	r1, #8
 8005102:	4848      	ldr	r0, [pc, #288]	@ (8005224 <MX_GPIO_Init+0x1b4>)
 8005104:	f009 f86e 	bl	800e1e4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(FLASH_nCS_GPIO_Port, FLASH_nCS_Pin, GPIO_PIN_SET);
 8005108:	2201      	movs	r2, #1
 800510a:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800510e:	4846      	ldr	r0, [pc, #280]	@ (8005228 <MX_GPIO_Init+0x1b8>)
 8005110:	f009 f868 	bl	800e1e4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, FLASH_nWP_Pin|FLASH_nRESET_Pin, GPIO_PIN_SET);
 8005114:	2201      	movs	r2, #1
 8005116:	21c0      	movs	r1, #192	@ 0xc0
 8005118:	4842      	ldr	r0, [pc, #264]	@ (8005224 <MX_GPIO_Init+0x1b4>)
 800511a:	f009 f863 	bl	800e1e4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LTE_POWER_ON_Pin|LTE_RESET_Pin|ACC_nCS_Pin, GPIO_PIN_RESET);
 800511e:	2200      	movs	r2, #0
 8005120:	f44f 4118 	mov.w	r1, #38912	@ 0x9800
 8005124:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8005128:	f009 f85c 	bl	800e1e4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DTR_GPIO_Port, DTR_Pin, GPIO_PIN_RESET);
 800512c:	2200      	movs	r2, #0
 800512e:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8005132:	483d      	ldr	r0, [pc, #244]	@ (8005228 <MX_GPIO_Init+0x1b8>)
 8005134:	f009 f856 	bl	800e1e4 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : USR_BTN_Pin PC4 */
  GPIO_InitStruct.Pin = USR_BTN_Pin|GPIO_PIN_4;
 8005138:	f242 0310 	movw	r3, #8208	@ 0x2010
 800513c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800513e:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8005142:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005144:	2300      	movs	r3, #0
 8005146:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005148:	f107 0314 	add.w	r3, r7, #20
 800514c:	4619      	mov	r1, r3
 800514e:	4835      	ldr	r0, [pc, #212]	@ (8005224 <MX_GPIO_Init+0x1b4>)
 8005150:	f008 fe86 	bl	800de60 <HAL_GPIO_Init>

  /*Configure GPIO pins : DBG_Pin FLASH_nWP_Pin FLASH_nRESET_Pin */
  GPIO_InitStruct.Pin = DBG_Pin|FLASH_nWP_Pin|FLASH_nRESET_Pin;
 8005154:	23c8      	movs	r3, #200	@ 0xc8
 8005156:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8005158:	2301      	movs	r3, #1
 800515a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800515c:	2300      	movs	r3, #0
 800515e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005160:	2300      	movs	r3, #0
 8005162:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005164:	f107 0314 	add.w	r3, r7, #20
 8005168:	4619      	mov	r1, r3
 800516a:	482e      	ldr	r0, [pc, #184]	@ (8005224 <MX_GPIO_Init+0x1b4>)
 800516c:	f008 fe78 	bl	800de60 <HAL_GPIO_Init>

  /*Configure GPIO pin : LTE_STATUS_Pin */
  GPIO_InitStruct.Pin = LTE_STATUS_Pin;
 8005170:	2308      	movs	r3, #8
 8005172:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8005174:	2300      	movs	r3, #0
 8005176:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005178:	2300      	movs	r3, #0
 800517a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LTE_STATUS_GPIO_Port, &GPIO_InitStruct);
 800517c:	f107 0314 	add.w	r3, r7, #20
 8005180:	4619      	mov	r1, r3
 8005182:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8005186:	f008 fe6b 	bl	800de60 <HAL_GPIO_Init>

  /*Configure GPIO pins : FLASH_nCS_Pin DTR_Pin */
  GPIO_InitStruct.Pin = FLASH_nCS_Pin|DTR_Pin;
 800518a:	f44f 5390 	mov.w	r3, #4608	@ 0x1200
 800518e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8005190:	2301      	movs	r3, #1
 8005192:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005194:	2300      	movs	r3, #0
 8005196:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005198:	2300      	movs	r3, #0
 800519a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800519c:	f107 0314 	add.w	r3, r7, #20
 80051a0:	4619      	mov	r1, r3
 80051a2:	4821      	ldr	r0, [pc, #132]	@ (8005228 <MX_GPIO_Init+0x1b8>)
 80051a4:	f008 fe5c 	bl	800de60 <HAL_GPIO_Init>

  /*Configure GPIO pins : LTE_POWER_ON_Pin LTE_RESET_Pin ACC_nCS_Pin */
  GPIO_InitStruct.Pin = LTE_POWER_ON_Pin|LTE_RESET_Pin|ACC_nCS_Pin;
 80051a8:	f44f 4318 	mov.w	r3, #38912	@ 0x9800
 80051ac:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80051ae:	2301      	movs	r3, #1
 80051b0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80051b2:	2300      	movs	r3, #0
 80051b4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80051b6:	2300      	movs	r3, #0
 80051b8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80051ba:	f107 0314 	add.w	r3, r7, #20
 80051be:	4619      	mov	r1, r3
 80051c0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80051c4:	f008 fe4c 	bl	800de60 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 80051c8:	2304      	movs	r3, #4
 80051ca:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80051cc:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80051d0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80051d2:	2300      	movs	r3, #0
 80051d4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80051d6:	f107 0314 	add.w	r3, r7, #20
 80051da:	4619      	mov	r1, r3
 80051dc:	4813      	ldr	r0, [pc, #76]	@ (800522c <MX_GPIO_Init+0x1bc>)
 80051de:	f008 fe3f 	bl	800de60 <HAL_GPIO_Init>

  /*Configure GPIO pin : DCD_Pin */
  GPIO_InitStruct.Pin = DCD_Pin;
 80051e2:	2320      	movs	r3, #32
 80051e4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80051e6:	2300      	movs	r3, #0
 80051e8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80051ea:	2300      	movs	r3, #0
 80051ec:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(DCD_GPIO_Port, &GPIO_InitStruct);
 80051ee:	f107 0314 	add.w	r3, r7, #20
 80051f2:	4619      	mov	r1, r3
 80051f4:	480c      	ldr	r0, [pc, #48]	@ (8005228 <MX_GPIO_Init+0x1b8>)
 80051f6:	f008 fe33 	bl	800de60 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 80051fa:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80051fe:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8005200:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8005204:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005206:	2300      	movs	r3, #0
 8005208:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800520a:	f107 0314 	add.w	r3, r7, #20
 800520e:	4619      	mov	r1, r3
 8005210:	4805      	ldr	r0, [pc, #20]	@ (8005228 <MX_GPIO_Init+0x1b8>)
 8005212:	f008 fe25 	bl	800de60 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */
  /* USER CODE END MX_GPIO_Init_2 */
}
 8005216:	bf00      	nop
 8005218:	3728      	adds	r7, #40	@ 0x28
 800521a:	46bd      	mov	sp, r7
 800521c:	bd80      	pop	{r7, pc}
 800521e:	bf00      	nop
 8005220:	40021000 	.word	0x40021000
 8005224:	48000800 	.word	0x48000800
 8005228:	48000400 	.word	0x48000400
 800522c:	48000c00 	.word	0x48000c00

08005230 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8005230:	b480      	push	{r7}
 8005232:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8005234:	b672      	cpsid	i
}
 8005236:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
		/* User can add his own implementation to report the HAL error return state */
		__disable_irq();
		while (1)
 8005238:	bf00      	nop
 800523a:	e7fd      	b.n	8005238 <Error_Handler+0x8>

0800523c <OTA_Init>:
#include "base64.h"


/*-----INIZIALIZZAZIONE OTA-----*/
int OTA_Init(void)
{
 800523c:	b580      	push	{r7, lr}
 800523e:	b082      	sub	sp, #8
 8005240:	af00      	add	r7, sp, #0
	FRESULT fRes = 0;
 8005242:	2300      	movs	r3, #0
 8005244:	71fb      	strb	r3, [r7, #7]

	if (sys.OTA_File_isOpen)
 8005246:	4b10      	ldr	r3, [pc, #64]	@ (8005288 <OTA_Init+0x4c>)
 8005248:	781b      	ldrb	r3, [r3, #0]
 800524a:	f003 0301 	and.w	r3, r3, #1
 800524e:	b2db      	uxtb	r3, r3
 8005250:	2b00      	cmp	r3, #0
 8005252:	d002      	beq.n	800525a <OTA_Init+0x1e>
	{
		f_close(&sys.OTA_File);
 8005254:	480d      	ldr	r0, [pc, #52]	@ (800528c <OTA_Init+0x50>)
 8005256:	f004 ffa9 	bl	800a1ac <f_close>
	}

	sys.OTA_File_isOpen = 0;
 800525a:	4a0b      	ldr	r2, [pc, #44]	@ (8005288 <OTA_Init+0x4c>)
 800525c:	7813      	ldrb	r3, [r2, #0]
 800525e:	f023 0301 	bic.w	r3, r3, #1
 8005262:	7013      	strb	r3, [r2, #0]

	fRes = f_open(&sys.OTA_File, OTA_FILE_NAME, FA_READ | FA_WRITE | FA_CREATE_ALWAYS);
 8005264:	220b      	movs	r2, #11
 8005266:	490a      	ldr	r1, [pc, #40]	@ (8005290 <OTA_Init+0x54>)
 8005268:	4808      	ldr	r0, [pc, #32]	@ (800528c <OTA_Init+0x50>)
 800526a:	f004 faab 	bl	80097c4 <f_open>
 800526e:	4603      	mov	r3, r0
 8005270:	71fb      	strb	r3, [r7, #7]

	if (fRes != FR_OK)
 8005272:	79fb      	ldrb	r3, [r7, #7]
 8005274:	2b00      	cmp	r3, #0
 8005276:	d002      	beq.n	800527e <OTA_Init+0x42>
	{
		return -1;
 8005278:	f04f 33ff 	mov.w	r3, #4294967295
 800527c:	e000      	b.n	8005280 <OTA_Init+0x44>
	}

	return 0;
 800527e:	2300      	movs	r3, #0
}
 8005280:	4618      	mov	r0, r3
 8005282:	3708      	adds	r7, #8
 8005284:	46bd      	mov	sp, r7
 8005286:	bd80      	pop	{r7, pc}
 8005288:	20000840 	.word	0x20000840
 800528c:	20000844 	.word	0x20000844
 8005290:	080174a8 	.word	0x080174a8

08005294 <OTA_Receive>:

/*-----RICEZIONE FILE OTA-----*/
int OTA_Receive(void)
{
 8005294:	b580      	push	{r7, lr}
 8005296:	f6ad 3dc8 	subw	sp, sp, #3016	@ 0xbc8
 800529a:	af00      	add	r7, sp, #0
	uint8_t rx_buffer[1500];
	UINT bytes_written = 0;
 800529c:	f607 33c8 	addw	r3, r7, #3016	@ 0xbc8
 80052a0:	f2a3 53ec 	subw	r3, r3, #1516	@ 0x5ec
 80052a4:	2200      	movs	r2, #0
 80052a6:	601a      	str	r2, [r3, #0]
	uint8_t bin_buffer[1500];
	uint16_t Rx_Len = 0;
 80052a8:	2300      	movs	r3, #0
 80052aa:	f8a7 3bc6 	strh.w	r3, [r7, #3014]	@ 0xbc6

	while (1)
	{
		Rx_Len = SIM_Receive_Response((char*)rx_buffer, 5000);
 80052ae:	f507 63bc 	add.w	r3, r7, #1504	@ 0x5e0
 80052b2:	f241 3188 	movw	r1, #5000	@ 0x1388
 80052b6:	4618      	mov	r0, r3
 80052b8:	f7fc fc16 	bl	8001ae8 <SIM_Receive_Response>
 80052bc:	4603      	mov	r3, r0
 80052be:	f8a7 3bc6 	strh.w	r3, [r7, #3014]	@ 0xbc6
		if (rx_buffer[0] == '\0' || (rx_buffer[0] == '\r' && rx_buffer[1] == '\n'))
 80052c2:	f607 33c8 	addw	r3, r7, #3016	@ 0xbc8
 80052c6:	f5a3 63bd 	sub.w	r3, r3, #1512	@ 0x5e8
 80052ca:	781b      	ldrb	r3, [r3, #0]
 80052cc:	2b00      	cmp	r3, #0
 80052ce:	d04e      	beq.n	800536e <OTA_Receive+0xda>
 80052d0:	f607 33c8 	addw	r3, r7, #3016	@ 0xbc8
 80052d4:	f5a3 63bd 	sub.w	r3, r3, #1512	@ 0x5e8
 80052d8:	781b      	ldrb	r3, [r3, #0]
 80052da:	2b0d      	cmp	r3, #13
 80052dc:	d106      	bne.n	80052ec <OTA_Receive+0x58>
 80052de:	f607 33c8 	addw	r3, r7, #3016	@ 0xbc8
 80052e2:	f5a3 63bd 	sub.w	r3, r3, #1512	@ 0x5e8
 80052e6:	785b      	ldrb	r3, [r3, #1]
 80052e8:	2b0a      	cmp	r3, #10
 80052ea:	d040      	beq.n	800536e <OTA_Receive+0xda>
		{
			break;
		}
		if(strncmp((char*)rx_buffer, "EOF", 3) == 0)
 80052ec:	f507 63bc 	add.w	r3, r7, #1504	@ 0x5e0
 80052f0:	2203      	movs	r2, #3
 80052f2:	4926      	ldr	r1, [pc, #152]	@ (800538c <OTA_Receive+0xf8>)
 80052f4:	4618      	mov	r0, r3
 80052f6:	f010 fe5c 	bl	8015fb2 <strncmp>
 80052fa:	4603      	mov	r3, r0
 80052fc:	2b00      	cmp	r3, #0
 80052fe:	d035      	beq.n	800536c <OTA_Receive+0xd8>
		{
			break;
		}
		if (Rx_Len == 0)
 8005300:	f8b7 3bc6 	ldrh.w	r3, [r7, #3014]	@ 0xbc6
 8005304:	2b00      	cmp	r3, #0
 8005306:	d105      	bne.n	8005314 <OTA_Receive+0x80>
		{
			f_close(&sys.OTA_File);
 8005308:	4821      	ldr	r0, [pc, #132]	@ (8005390 <OTA_Receive+0xfc>)
 800530a:	f004 ff4f 	bl	800a1ac <f_close>
			return -1;
 800530e:	f04f 33ff 	mov.w	r3, #4294967295
 8005312:	e035      	b.n	8005380 <OTA_Receive+0xec>
		}
		size_t base64_len = strlen((char*)rx_buffer);
 8005314:	f507 63bc 	add.w	r3, r7, #1504	@ 0x5e0
 8005318:	4618      	mov	r0, r3
 800531a:	f7fa ff63 	bl	80001e4 <strlen>
 800531e:	f8c7 0bc0 	str.w	r0, [r7, #3008]	@ 0xbc0
		size_t bin_len = Base64_Decode((char*)rx_buffer, bin_buffer, base64_len);
 8005322:	4639      	mov	r1, r7
 8005324:	f507 63bc 	add.w	r3, r7, #1504	@ 0x5e0
 8005328:	f8d7 2bc0 	ldr.w	r2, [r7, #3008]	@ 0xbc0
 800532c:	4618      	mov	r0, r3
 800532e:	f7fc ffc1 	bl	80022b4 <Base64_Decode>
 8005332:	f8c7 0bbc 	str.w	r0, [r7, #3004]	@ 0xbbc
		f_write(&sys.OTA_File, bin_buffer, bin_len, &bytes_written);
 8005336:	f207 53dc 	addw	r3, r7, #1500	@ 0x5dc
 800533a:	4639      	mov	r1, r7
 800533c:	f8d7 2bbc 	ldr.w	r2, [r7, #3004]	@ 0xbbc
 8005340:	4813      	ldr	r0, [pc, #76]	@ (8005390 <OTA_Receive+0xfc>)
 8005342:	f004 fd2a 	bl	8009d9a <f_write>
		if (bytes_written != bin_len)
 8005346:	f607 33c8 	addw	r3, r7, #3016	@ 0xbc8
 800534a:	f2a3 53ec 	subw	r3, r3, #1516	@ 0x5ec
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	f8d7 2bbc 	ldr.w	r2, [r7, #3004]	@ 0xbbc
 8005354:	429a      	cmp	r2, r3
 8005356:	d005      	beq.n	8005364 <OTA_Receive+0xd0>
		{
			f_close(&sys.OTA_File);
 8005358:	480d      	ldr	r0, [pc, #52]	@ (8005390 <OTA_Receive+0xfc>)
 800535a:	f004 ff27 	bl	800a1ac <f_close>
			return -1;
 800535e:	f04f 33ff 	mov.w	r3, #4294967295
 8005362:	e00d      	b.n	8005380 <OTA_Receive+0xec>
		}
		SIM_Send_TCP((uint8_t*)"ACK");
 8005364:	480b      	ldr	r0, [pc, #44]	@ (8005394 <OTA_Receive+0x100>)
 8005366:	f7fc fe03 	bl	8001f70 <SIM_Send_TCP>
	{
 800536a:	e7a0      	b.n	80052ae <OTA_Receive+0x1a>
			break;
 800536c:	bf00      	nop
	}

	f_close(&sys.OTA_File);
 800536e:	4808      	ldr	r0, [pc, #32]	@ (8005390 <OTA_Receive+0xfc>)
 8005370:	f004 ff1c 	bl	800a1ac <f_close>
    sys.OTA_File_isOpen = 0;
 8005374:	4a08      	ldr	r2, [pc, #32]	@ (8005398 <OTA_Receive+0x104>)
 8005376:	7813      	ldrb	r3, [r2, #0]
 8005378:	f023 0301 	bic.w	r3, r3, #1
 800537c:	7013      	strb	r3, [r2, #0]
	return 0;
 800537e:	2300      	movs	r3, #0
}
 8005380:	4618      	mov	r0, r3
 8005382:	f607 37c8 	addw	r7, r7, #3016	@ 0xbc8
 8005386:	46bd      	mov	sp, r7
 8005388:	bd80      	pop	{r7, pc}
 800538a:	bf00      	nop
 800538c:	080174b8 	.word	0x080174b8
 8005390:	20000844 	.word	0x20000844
 8005394:	080174bc 	.word	0x080174bc
 8005398:	20000840 	.word	0x20000840

0800539c <OTA_CRC_Check>:

int OTA_CRC_Check(void)
{
 800539c:	b580      	push	{r7, lr}
 800539e:	f5ad 6d8c 	sub.w	sp, sp, #1120	@ 0x460
 80053a2:	af00      	add	r7, sp, #0
	FRESULT fRes = 0;
 80053a4:	2300      	movs	r3, #0
 80053a6:	f887 3457 	strb.w	r3, [r7, #1111]	@ 0x457
	UINT read = 0;
 80053aa:	2300      	movs	r3, #0
 80053ac:	f8c7 3448 	str.w	r3, [r7, #1096]	@ 0x448
	uint16_t ota_crc = 0;
 80053b0:	2300      	movs	r3, #0
 80053b2:	f8a7 3454 	strh.w	r3, [r7, #1108]	@ 0x454
	uint8_t rx_buffer[64];
	uint32_t calc_crc = 0;
 80053b6:	2300      	movs	r3, #0
 80053b8:	f8c7 345c 	str.w	r3, [r7, #1116]	@ 0x45c

	SIM_Receive_Response((char*)rx_buffer, 5000);
 80053bc:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 80053c0:	f241 3188 	movw	r1, #5000	@ 0x1388
 80053c4:	4618      	mov	r0, r3
 80053c6:	f7fc fb8f 	bl	8001ae8 <SIM_Receive_Response>
	uint8_t crc_bin[8];
	size_t crc_len = Base64_Decode((char*)rx_buffer, crc_bin, sizeof(crc_bin));
 80053ca:	f507 6180 	add.w	r1, r7, #1024	@ 0x400
 80053ce:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 80053d2:	2208      	movs	r2, #8
 80053d4:	4618      	mov	r0, r3
 80053d6:	f7fc ff6d 	bl	80022b4 <Base64_Decode>
 80053da:	f8c7 0450 	str.w	r0, [r7, #1104]	@ 0x450
	if (crc_len == 4)
 80053de:	f8d7 3450 	ldr.w	r3, [r7, #1104]	@ 0x450
 80053e2:	2b04      	cmp	r3, #4
 80053e4:	d118      	bne.n	8005418 <OTA_CRC_Check+0x7c>
	{
		ota_crc = (crc_bin[0] << 24) | (crc_bin[1] << 16) | (crc_bin[2] << 8) | crc_bin[3];
 80053e6:	f897 3402 	ldrb.w	r3, [r7, #1026]	@ 0x402
 80053ea:	b21b      	sxth	r3, r3
 80053ec:	021b      	lsls	r3, r3, #8
 80053ee:	b21a      	sxth	r2, r3
 80053f0:	f897 3403 	ldrb.w	r3, [r7, #1027]	@ 0x403
 80053f4:	b21b      	sxth	r3, r3
 80053f6:	4313      	orrs	r3, r2
 80053f8:	b21b      	sxth	r3, r3
 80053fa:	f8a7 3454 	strh.w	r3, [r7, #1108]	@ 0x454
	else
	{
		return -1;
	}

	fRes = f_open(&sys.OTA_File, OTA_FILE_NAME, FA_READ);
 80053fe:	2201      	movs	r2, #1
 8005400:	493b      	ldr	r1, [pc, #236]	@ (80054f0 <OTA_CRC_Check+0x154>)
 8005402:	483c      	ldr	r0, [pc, #240]	@ (80054f4 <OTA_CRC_Check+0x158>)
 8005404:	f004 f9de 	bl	80097c4 <f_open>
 8005408:	4603      	mov	r3, r0
 800540a:	f887 3457 	strb.w	r3, [r7, #1111]	@ 0x457
	if (fRes != FR_OK)
 800540e:	f897 3457 	ldrb.w	r3, [r7, #1111]	@ 0x457
 8005412:	2b00      	cmp	r3, #0
 8005414:	d006      	beq.n	8005424 <OTA_CRC_Check+0x88>
 8005416:	e002      	b.n	800541e <OTA_CRC_Check+0x82>
		return -1;
 8005418:	f04f 33ff 	mov.w	r3, #4294967295
 800541c:	e063      	b.n	80054e6 <OTA_CRC_Check+0x14a>
	{
		return -1;
 800541e:	f04f 33ff 	mov.w	r3, #4294967295
 8005422:	e060      	b.n	80054e6 <OTA_CRC_Check+0x14a>
	}

	uint32_t size = f_size(&sys.OTA_File);
 8005424:	4b34      	ldr	r3, [pc, #208]	@ (80054f8 <OTA_CRC_Check+0x15c>)
 8005426:	691b      	ldr	r3, [r3, #16]
 8005428:	f8c7 3458 	str.w	r3, [r7, #1112]	@ 0x458
    HAL_CRCEx_Input_Data_Reverse(HCRC, CRC_INPUTDATA_INVERSION_BYTE);
 800542c:	2120      	movs	r1, #32
 800542e:	4833      	ldr	r0, [pc, #204]	@ (80054fc <OTA_CRC_Check+0x160>)
 8005430:	f007 fbd8 	bl	800cbe4 <HAL_CRCEx_Input_Data_Reverse>
    HAL_CRCEx_Output_Data_Reverse(HCRC, CRC_OUTPUTDATA_INVERSION_ENABLE);
 8005434:	2180      	movs	r1, #128	@ 0x80
 8005436:	4831      	ldr	r0, [pc, #196]	@ (80054fc <OTA_CRC_Check+0x160>)
 8005438:	f007 fbf0 	bl	800cc1c <HAL_CRCEx_Output_Data_Reverse>
    HCRC->Instance->INIT = 0xFFFFFFFF;
 800543c:	4b2f      	ldr	r3, [pc, #188]	@ (80054fc <OTA_CRC_Check+0x160>)
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	f04f 32ff 	mov.w	r2, #4294967295
 8005444:	611a      	str	r2, [r3, #16]
    HAL_CRCEx_Polynomial_Set(HCRC, 0x04c11db7, CRC_POLYLENGTH_32B);
 8005446:	2200      	movs	r2, #0
 8005448:	492d      	ldr	r1, [pc, #180]	@ (8005500 <OTA_CRC_Check+0x164>)
 800544a:	482c      	ldr	r0, [pc, #176]	@ (80054fc <OTA_CRC_Check+0x160>)
 800544c:	f007 fb3c 	bl	800cac8 <HAL_CRCEx_Polynomial_Set>

	while (size > 0)
 8005450:	e038      	b.n	80054c4 <OTA_CRC_Check+0x128>
	{
		uint8_t buffer[1024];
		UINT to_read = (size > sizeof(buffer)) ? sizeof(buffer) : size;
 8005452:	f8d7 3458 	ldr.w	r3, [r7, #1112]	@ 0x458
 8005456:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800545a:	bf28      	it	cs
 800545c:	f44f 6380 	movcs.w	r3, #1024	@ 0x400
 8005460:	f8c7 344c 	str.w	r3, [r7, #1100]	@ 0x44c
		if (f_read(&sys.OTA_File, buffer, to_read, &read) != FR_OK || read == 0)
 8005464:	f507 6389 	add.w	r3, r7, #1096	@ 0x448
 8005468:	4639      	mov	r1, r7
 800546a:	f8d7 244c 	ldr.w	r2, [r7, #1100]	@ 0x44c
 800546e:	4821      	ldr	r0, [pc, #132]	@ (80054f4 <OTA_CRC_Check+0x158>)
 8005470:	f004 fb40 	bl	8009af4 <f_read>
 8005474:	4603      	mov	r3, r0
 8005476:	2b00      	cmp	r3, #0
 8005478:	d103      	bne.n	8005482 <OTA_CRC_Check+0xe6>
 800547a:	f8d7 3448 	ldr.w	r3, [r7, #1096]	@ 0x448
 800547e:	2b00      	cmp	r3, #0
 8005480:	d105      	bne.n	800548e <OTA_CRC_Check+0xf2>
		{
			f_close(&sys.OTA_File);
 8005482:	481c      	ldr	r0, [pc, #112]	@ (80054f4 <OTA_CRC_Check+0x158>)
 8005484:	f004 fe92 	bl	800a1ac <f_close>
			return -1;
 8005488:	f04f 33ff 	mov.w	r3, #4294967295
 800548c:	e02b      	b.n	80054e6 <OTA_CRC_Check+0x14a>
		}
		calc_crc = HAL_CRC_Accumulate(HCRC, (uint32_t *)buffer, read / 4 + (read % 4 != 0));
 800548e:	f8d7 3448 	ldr.w	r3, [r7, #1096]	@ 0x448
 8005492:	089b      	lsrs	r3, r3, #2
 8005494:	f8d7 2448 	ldr.w	r2, [r7, #1096]	@ 0x448
 8005498:	f002 0203 	and.w	r2, r2, #3
 800549c:	2a00      	cmp	r2, #0
 800549e:	bf14      	ite	ne
 80054a0:	2201      	movne	r2, #1
 80054a2:	2200      	moveq	r2, #0
 80054a4:	b2d2      	uxtb	r2, r2
 80054a6:	441a      	add	r2, r3
 80054a8:	463b      	mov	r3, r7
 80054aa:	4619      	mov	r1, r3
 80054ac:	4813      	ldr	r0, [pc, #76]	@ (80054fc <OTA_CRC_Check+0x160>)
 80054ae:	f007 f9fd 	bl	800c8ac <HAL_CRC_Accumulate>
 80054b2:	f8c7 045c 	str.w	r0, [r7, #1116]	@ 0x45c
		size -= read;
 80054b6:	f8d7 3448 	ldr.w	r3, [r7, #1096]	@ 0x448
 80054ba:	f8d7 2458 	ldr.w	r2, [r7, #1112]	@ 0x458
 80054be:	1ad3      	subs	r3, r2, r3
 80054c0:	f8c7 3458 	str.w	r3, [r7, #1112]	@ 0x458
	while (size > 0)
 80054c4:	f8d7 3458 	ldr.w	r3, [r7, #1112]	@ 0x458
 80054c8:	2b00      	cmp	r3, #0
 80054ca:	d1c2      	bne.n	8005452 <OTA_CRC_Check+0xb6>
	}

	f_close(&sys.OTA_File);
 80054cc:	4809      	ldr	r0, [pc, #36]	@ (80054f4 <OTA_CRC_Check+0x158>)
 80054ce:	f004 fe6d 	bl	800a1ac <f_close>

	if (calc_crc != ota_crc)
 80054d2:	f8b7 3454 	ldrh.w	r3, [r7, #1108]	@ 0x454
 80054d6:	f8d7 245c 	ldr.w	r2, [r7, #1116]	@ 0x45c
 80054da:	429a      	cmp	r2, r3
 80054dc:	d002      	beq.n	80054e4 <OTA_CRC_Check+0x148>
	{
		return -1; // CRC non corrisponde
 80054de:	f04f 33ff 	mov.w	r3, #4294967295
 80054e2:	e000      	b.n	80054e6 <OTA_CRC_Check+0x14a>
	}
	
	return 0; // CRC OK
 80054e4:	2300      	movs	r3, #0
}
 80054e6:	4618      	mov	r0, r3
 80054e8:	f507 678c 	add.w	r7, r7, #1120	@ 0x460
 80054ec:	46bd      	mov	sp, r7
 80054ee:	bd80      	pop	{r7, pc}
 80054f0:	080174a8 	.word	0x080174a8
 80054f4:	20000844 	.word	0x20000844
 80054f8:	20000840 	.word	0x20000840
 80054fc:	200003c4 	.word	0x200003c4
 8005500:	04c11db7 	.word	0x04c11db7

08005504 <OTA_Apply>:


/*-----APPLICAZIONE UPDATE-----*/
int OTA_Apply(void)
{
 8005504:	b580      	push	{r7, lr}
 8005506:	b098      	sub	sp, #96	@ 0x60
 8005508:	af00      	add	r7, sp, #0
	FRESULT fRes = 0;
 800550a:	2300      	movs	r3, #0
 800550c:	f887 3053 	strb.w	r3, [r7, #83]	@ 0x53
	int32_t result = 0;
 8005510:	2300      	movs	r3, #0
 8005512:	65fb      	str	r3, [r7, #92]	@ 0x5c
	uint8_t ota_bank = 0;
 8005514:	2300      	movs	r3, #0
 8005516:	f887 3052 	strb.w	r3, [r7, #82]	@ 0x52
	uint32_t faddr = 0;
 800551a:	2300      	movs	r3, #0
 800551c:	64fb      	str	r3, [r7, #76]	@ 0x4c
	uint32_t size = 0;
 800551e:	2300      	movs	r3, #0
 8005520:	65bb      	str	r3, [r7, #88]	@ 0x58
	uint64_t pword = 0;
 8005522:	f04f 0200 	mov.w	r2, #0
 8005526:	f04f 0300 	mov.w	r3, #0
 800552a:	e9c7 2310 	strd	r2, r3, [r7, #64]	@ 0x40
	uint32_t faddr_off = 0;
 800552e:	2300      	movs	r3, #0
 8005530:	657b      	str	r3, [r7, #84]	@ 0x54
	UINT read = 0;
 8005532:	2300      	movs	r3, #0
 8005534:	63fb      	str	r3, [r7, #60]	@ 0x3c
	uint32_t PageError = 0;
 8005536:	2300      	movs	r3, #0
 8005538:	63bb      	str	r3, [r7, #56]	@ 0x38
	FLASH_EraseInitTypeDef erase_cfg = {0};
 800553a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800553e:	2200      	movs	r2, #0
 8005540:	601a      	str	r2, [r3, #0]
 8005542:	605a      	str	r2, [r3, #4]
 8005544:	609a      	str	r2, [r3, #8]
 8005546:	60da      	str	r2, [r3, #12]

	const uint32_t BANKSIZE = FLASH_SIZE >> 1;
 8005548:	4b68      	ldr	r3, [pc, #416]	@ (80056ec <OTA_Apply+0x1e8>)
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	b29b      	uxth	r3, r3
 800554e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8005552:	4293      	cmp	r3, r2
 8005554:	d006      	beq.n	8005564 <OTA_Apply+0x60>
 8005556:	4b65      	ldr	r3, [pc, #404]	@ (80056ec <OTA_Apply+0x1e8>)
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	029b      	lsls	r3, r3, #10
 800555c:	085a      	lsrs	r2, r3, #1
 800555e:	4b64      	ldr	r3, [pc, #400]	@ (80056f0 <OTA_Apply+0x1ec>)
 8005560:	4013      	ands	r3, r2
 8005562:	e001      	b.n	8005568 <OTA_Apply+0x64>
 8005564:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8005568:	64bb      	str	r3, [r7, #72]	@ 0x48

	FLASH_OBProgramInitTypeDef ob = {0};
 800556a:	463b      	mov	r3, r7
 800556c:	2228      	movs	r2, #40	@ 0x28
 800556e:	2100      	movs	r1, #0
 8005570:	4618      	mov	r0, r3
 8005572:	f010 fd09 	bl	8015f88 <memset>

	HAL_FLASHEx_OBGetConfig(&ob);
 8005576:	463b      	mov	r3, r7
 8005578:	4618      	mov	r0, r3
 800557a:	f008 f845 	bl	800d608 <HAL_FLASHEx_OBGetConfig>

	if ((ob.USERConfig & FLASH_OPTR_DUALBANK) == 0)
 800557e:	69bb      	ldr	r3, [r7, #24]
 8005580:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8005584:	2b00      	cmp	r3, #0
 8005586:	d102      	bne.n	800558e <OTA_Apply+0x8a>
	{
		return -1;
 8005588:	f04f 33ff 	mov.w	r3, #4294967295
 800558c:	e0aa      	b.n	80056e4 <OTA_Apply+0x1e0>
	}

	ota_bank = (ob.USERConfig & FLASH_OPTR_BFB2) ? FLASH_BANK_1 : FLASH_BANK_2;
 800558e:	69bb      	ldr	r3, [r7, #24]
 8005590:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005594:	2b00      	cmp	r3, #0
 8005596:	d001      	beq.n	800559c <OTA_Apply+0x98>
 8005598:	2301      	movs	r3, #1
 800559a:	e000      	b.n	800559e <OTA_Apply+0x9a>
 800559c:	2302      	movs	r3, #2
 800559e:	f887 3052 	strb.w	r3, [r7, #82]	@ 0x52

	// L'indirizzo deve essere sempre quello del banco 2 (se fa il boot da BANK2 il BANK1 viene rimappato)
	faddr = FLASH_BASE + BANKSIZE;
 80055a2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80055a4:	f103 6300 	add.w	r3, r3, #134217728	@ 0x8000000
 80055a8:	64fb      	str	r3, [r7, #76]	@ 0x4c

	if (HAL_FLASH_Unlock() != HAL_OK)
 80055aa:	f007 fe01 	bl	800d1b0 <HAL_FLASH_Unlock>
 80055ae:	4603      	mov	r3, r0
 80055b0:	2b00      	cmp	r3, #0
 80055b2:	d002      	beq.n	80055ba <OTA_Apply+0xb6>
	{
		return -1;
 80055b4:	f04f 33ff 	mov.w	r3, #4294967295
 80055b8:	e094      	b.n	80056e4 <OTA_Apply+0x1e0>
	}

	f_close(&sys.OTA_File);
 80055ba:	484e      	ldr	r0, [pc, #312]	@ (80056f4 <OTA_Apply+0x1f0>)
 80055bc:	f004 fdf6 	bl	800a1ac <f_close>
	fRes = f_open(&sys.OTA_File, OTA_FILE_NAME, FA_READ);
 80055c0:	2201      	movs	r2, #1
 80055c2:	494d      	ldr	r1, [pc, #308]	@ (80056f8 <OTA_Apply+0x1f4>)
 80055c4:	484b      	ldr	r0, [pc, #300]	@ (80056f4 <OTA_Apply+0x1f0>)
 80055c6:	f004 f8fd 	bl	80097c4 <f_open>
 80055ca:	4603      	mov	r3, r0
 80055cc:	f887 3053 	strb.w	r3, [r7, #83]	@ 0x53

	if (fRes != FR_OK)
 80055d0:	f897 3053 	ldrb.w	r3, [r7, #83]	@ 0x53
 80055d4:	2b00      	cmp	r3, #0
 80055d6:	d003      	beq.n	80055e0 <OTA_Apply+0xdc>
	{
		result = -1;
 80055d8:	f04f 33ff 	mov.w	r3, #4294967295
 80055dc:	65fb      	str	r3, [r7, #92]	@ 0x5c
		goto DONE;
 80055de:	e07b      	b.n	80056d8 <OTA_Apply+0x1d4>
	}

	if ((size = f_size(&sys.OTA_File)) > BANKSIZE)
 80055e0:	4b46      	ldr	r3, [pc, #280]	@ (80056fc <OTA_Apply+0x1f8>)
 80055e2:	691b      	ldr	r3, [r3, #16]
 80055e4:	65bb      	str	r3, [r7, #88]	@ 0x58
 80055e6:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80055e8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80055ea:	429a      	cmp	r2, r3
 80055ec:	d903      	bls.n	80055f6 <OTA_Apply+0xf2>
	{
		result = -1;
 80055ee:	f04f 33ff 	mov.w	r3, #4294967295
 80055f2:	65fb      	str	r3, [r7, #92]	@ 0x5c
		goto DONE;
 80055f4:	e070      	b.n	80056d8 <OTA_Apply+0x1d4>
	}

	erase_cfg.TypeErase = FLASH_TYPEERASE_MASSERASE;
 80055f6:	2301      	movs	r3, #1
 80055f8:	62bb      	str	r3, [r7, #40]	@ 0x28
	erase_cfg.Banks = ota_bank;
 80055fa:	f897 3052 	ldrb.w	r3, [r7, #82]	@ 0x52
 80055fe:	62fb      	str	r3, [r7, #44]	@ 0x2c

	if (HAL_FLASHEx_Erase(&erase_cfg, &PageError) != HAL_OK)
 8005600:	f107 0238 	add.w	r2, r7, #56	@ 0x38
 8005604:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8005608:	4611      	mov	r1, r2
 800560a:	4618      	mov	r0, r3
 800560c:	f007 fef2 	bl	800d3f4 <HAL_FLASHEx_Erase>
 8005610:	4603      	mov	r3, r0
 8005612:	2b00      	cmp	r3, #0
 8005614:	d026      	beq.n	8005664 <OTA_Apply+0x160>
	{
		result = -1;
 8005616:	f04f 33ff 	mov.w	r3, #4294967295
 800561a:	65fb      	str	r3, [r7, #92]	@ 0x5c
		goto DONE;
 800561c:	e05c      	b.n	80056d8 <OTA_Apply+0x1d4>
	}

	while (size > 0)
	{
		pword = 0;
 800561e:	f04f 0200 	mov.w	r2, #0
 8005622:	f04f 0300 	mov.w	r3, #0
 8005626:	e9c7 2310 	strd	r2, r3, [r7, #64]	@ 0x40
		if (f_read(&sys.OTA_File, (uint8_t *)&pword, sizeof(pword), &read) < 0)
 800562a:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 800562e:	f107 0140 	add.w	r1, r7, #64	@ 0x40
 8005632:	2208      	movs	r2, #8
 8005634:	482f      	ldr	r0, [pc, #188]	@ (80056f4 <OTA_Apply+0x1f0>)
 8005636:	f004 fa5d 	bl	8009af4 <f_read>
			break;
		if (read == 0)
 800563a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800563c:	2b00      	cmp	r3, #0
 800563e:	d015      	beq.n	800566c <OTA_Apply+0x168>
			break;
		if (HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, faddr + faddr_off, pword) != HAL_OK)
 8005640:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8005642:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005644:	18d1      	adds	r1, r2, r3
 8005646:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800564a:	2000      	movs	r0, #0
 800564c:	f007 fd44 	bl	800d0d8 <HAL_FLASH_Program>
 8005650:	4603      	mov	r3, r0
 8005652:	2b00      	cmp	r3, #0
 8005654:	d10c      	bne.n	8005670 <OTA_Apply+0x16c>
			break;
		faddr_off += sizeof(pword);
 8005656:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005658:	3308      	adds	r3, #8
 800565a:	657b      	str	r3, [r7, #84]	@ 0x54
		size -= read;
 800565c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800565e:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8005660:	1ad3      	subs	r3, r2, r3
 8005662:	65bb      	str	r3, [r7, #88]	@ 0x58
	while (size > 0)
 8005664:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8005666:	2b00      	cmp	r3, #0
 8005668:	d1d9      	bne.n	800561e <OTA_Apply+0x11a>
 800566a:	e002      	b.n	8005672 <OTA_Apply+0x16e>
			break;
 800566c:	bf00      	nop
 800566e:	e000      	b.n	8005672 <OTA_Apply+0x16e>
			break;
 8005670:	bf00      	nop
	}

	if (size > 0)
 8005672:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8005674:	2b00      	cmp	r3, #0
 8005676:	d003      	beq.n	8005680 <OTA_Apply+0x17c>
	{
		result = -1;
 8005678:	f04f 33ff 	mov.w	r3, #4294967295
 800567c:	65fb      	str	r3, [r7, #92]	@ 0x5c
		goto DONE;
 800567e:	e02b      	b.n	80056d8 <OTA_Apply+0x1d4>
	}

	HAL_FLASH_Lock();
 8005680:	f007 fdb8 	bl	800d1f4 <HAL_FLASH_Lock>

	HAL_FLASHEx_OBGetConfig(&ob);
 8005684:	463b      	mov	r3, r7
 8005686:	4618      	mov	r0, r3
 8005688:	f007 ffbe 	bl	800d608 <HAL_FLASHEx_OBGetConfig>
	HAL_FLASH_Unlock();
 800568c:	f007 fd90 	bl	800d1b0 <HAL_FLASH_Unlock>
	HAL_FLASH_OB_Unlock();
 8005690:	f007 fdc0 	bl	800d214 <HAL_FLASH_OB_Unlock>

	ob.OptionType = OPTIONBYTE_USER;
 8005694:	2304      	movs	r3, #4
 8005696:	603b      	str	r3, [r7, #0]
	ob.USERType = OB_USER_BFB2;
 8005698:	2380      	movs	r3, #128	@ 0x80
 800569a:	617b      	str	r3, [r7, #20]
	ob.USERConfig = (ota_bank == FLASH_BANK_2) ? FLASH_OPTR_BFB2 : 0;
 800569c:	f897 3052 	ldrb.w	r3, [r7, #82]	@ 0x52
 80056a0:	2b02      	cmp	r3, #2
 80056a2:	d102      	bne.n	80056aa <OTA_Apply+0x1a6>
 80056a4:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 80056a8:	e000      	b.n	80056ac <OTA_Apply+0x1a8>
 80056aa:	2300      	movs	r3, #0
 80056ac:	61bb      	str	r3, [r7, #24]

	if (HAL_FLASHEx_OBProgram(&ob) != HAL_OK)
 80056ae:	463b      	mov	r3, r7
 80056b0:	4618      	mov	r0, r3
 80056b2:	f007 ff3b 	bl	800d52c <HAL_FLASHEx_OBProgram>
 80056b6:	4603      	mov	r3, r0
 80056b8:	2b00      	cmp	r3, #0
 80056ba:	d007      	beq.n	80056cc <OTA_Apply+0x1c8>
	{
		HAL_FLASH_OB_Lock();
 80056bc:	f007 fdc6 	bl	800d24c <HAL_FLASH_OB_Lock>
		HAL_FLASH_Lock();
 80056c0:	f007 fd98 	bl	800d1f4 <HAL_FLASH_Lock>
		result = -1;
 80056c4:	f04f 33ff 	mov.w	r3, #4294967295
 80056c8:	65fb      	str	r3, [r7, #92]	@ 0x5c
		goto DONE;
 80056ca:	e005      	b.n	80056d8 <OTA_Apply+0x1d4>
	}

	HAL_FLASH_OB_Launch();
 80056cc:	f007 fdce 	bl	800d26c <HAL_FLASH_OB_Launch>
	HAL_FLASH_OB_Lock();
 80056d0:	f007 fdbc 	bl	800d24c <HAL_FLASH_OB_Lock>
	HAL_FLASH_Lock();
 80056d4:	f007 fd8e 	bl	800d1f4 <HAL_FLASH_Lock>

	DONE:

	f_close(&sys.OTA_File);
 80056d8:	4806      	ldr	r0, [pc, #24]	@ (80056f4 <OTA_Apply+0x1f0>)
 80056da:	f004 fd67 	bl	800a1ac <f_close>

	HAL_FLASH_Lock();
 80056de:	f007 fd89 	bl	800d1f4 <HAL_FLASH_Lock>

	return result;
 80056e2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
}
 80056e4:	4618      	mov	r0, r3
 80056e6:	3760      	adds	r7, #96	@ 0x60
 80056e8:	46bd      	mov	sp, r7
 80056ea:	bd80      	pop	{r7, pc}
 80056ec:	1fff75e0 	.word	0x1fff75e0
 80056f0:	01fffe00 	.word	0x01fffe00
 80056f4:	20000844 	.word	0x20000844
 80056f8:	080174a8 	.word	0x080174a8
 80056fc:	20000840 	.word	0x20000840

08005700 <Save_Data>:
#include "init.h"


/*-----ACQUISIZIONE MISURE E LOG DEI DATI-----*/
void Save_Data(void)
{
 8005700:	b590      	push	{r4, r7, lr}
 8005702:	f2ad 4ddc 	subw	sp, sp, #1244	@ 0x4dc
 8005706:	af00      	add	r7, sp, #0
	if(flags.ADC_Half_Buffer)
 8005708:	4b76      	ldr	r3, [pc, #472]	@ (80058e4 <Save_Data+0x1e4>)
 800570a:	781b      	ldrb	r3, [r3, #0]
 800570c:	f003 0302 	and.w	r3, r3, #2
 8005710:	b2db      	uxtb	r3, r3
 8005712:	2b00      	cmp	r3, #0
 8005714:	d037      	beq.n	8005786 <Save_Data+0x86>
	{
		memcpy(Saving_Buffer + Address_Offset, &Pressure[0], PRESS_HALF_LEN);
 8005716:	4b74      	ldr	r3, [pc, #464]	@ (80058e8 <Save_Data+0x1e8>)
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	461a      	mov	r2, r3
 800571c:	4b73      	ldr	r3, [pc, #460]	@ (80058ec <Save_Data+0x1ec>)
 800571e:	4413      	add	r3, r2
 8005720:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 8005724:	4972      	ldr	r1, [pc, #456]	@ (80058f0 <Save_Data+0x1f0>)
 8005726:	4618      	mov	r0, r3
 8005728:	f010 fcb2 	bl	8016090 <memcpy>
		Last_Pressure = 0;
 800572c:	4b71      	ldr	r3, [pc, #452]	@ (80058f4 <Save_Data+0x1f4>)
 800572e:	2200      	movs	r2, #0
 8005730:	801a      	strh	r2, [r3, #0]
		for(int i = 0; i < PRESS_HALF_SAMPLES; i++)
 8005732:	2300      	movs	r3, #0
 8005734:	f8c7 34d4 	str.w	r3, [r7, #1236]	@ 0x4d4
 8005738:	e00f      	b.n	800575a <Save_Data+0x5a>
		{
			Last_Pressure += Pressure[i];
 800573a:	4a6d      	ldr	r2, [pc, #436]	@ (80058f0 <Save_Data+0x1f0>)
 800573c:	f8d7 34d4 	ldr.w	r3, [r7, #1236]	@ 0x4d4
 8005740:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8005744:	4b6b      	ldr	r3, [pc, #428]	@ (80058f4 <Save_Data+0x1f4>)
 8005746:	881b      	ldrh	r3, [r3, #0]
 8005748:	4413      	add	r3, r2
 800574a:	b29a      	uxth	r2, r3
 800574c:	4b69      	ldr	r3, [pc, #420]	@ (80058f4 <Save_Data+0x1f4>)
 800574e:	801a      	strh	r2, [r3, #0]
		for(int i = 0; i < PRESS_HALF_SAMPLES; i++)
 8005750:	f8d7 34d4 	ldr.w	r3, [r7, #1236]	@ 0x4d4
 8005754:	3301      	adds	r3, #1
 8005756:	f8c7 34d4 	str.w	r3, [r7, #1236]	@ 0x4d4
 800575a:	f8d7 34d4 	ldr.w	r3, [r7, #1236]	@ 0x4d4
 800575e:	2bc7      	cmp	r3, #199	@ 0xc7
 8005760:	ddeb      	ble.n	800573a <Save_Data+0x3a>
		}
		Last_Pressure = (uint16_t)(Last_Pressure / PRESS_HALF_SAMPLES);
 8005762:	4b64      	ldr	r3, [pc, #400]	@ (80058f4 <Save_Data+0x1f4>)
 8005764:	881b      	ldrh	r3, [r3, #0]
 8005766:	4a64      	ldr	r2, [pc, #400]	@ (80058f8 <Save_Data+0x1f8>)
 8005768:	fba2 2303 	umull	r2, r3, r2, r3
 800576c:	099b      	lsrs	r3, r3, #6
 800576e:	b29a      	uxth	r2, r3
 8005770:	4b60      	ldr	r3, [pc, #384]	@ (80058f4 <Save_Data+0x1f4>)
 8005772:	801a      	strh	r2, [r3, #0]
		Warning_Detection(&Pressure[0]);
 8005774:	485e      	ldr	r0, [pc, #376]	@ (80058f0 <Save_Data+0x1f0>)
 8005776:	f000 fb57 	bl	8005e28 <Warning_Detection>
		flags.ADC_Half_Buffer = 0;
 800577a:	4a5a      	ldr	r2, [pc, #360]	@ (80058e4 <Save_Data+0x1e4>)
 800577c:	7813      	ldrb	r3, [r2, #0]
 800577e:	f023 0302 	bic.w	r3, r3, #2
 8005782:	7013      	strb	r3, [r2, #0]
 8005784:	e03e      	b.n	8005804 <Save_Data+0x104>
	}
	else if(flags.ADC_Full_Buffer)
 8005786:	4b57      	ldr	r3, [pc, #348]	@ (80058e4 <Save_Data+0x1e4>)
 8005788:	781b      	ldrb	r3, [r3, #0]
 800578a:	f003 0304 	and.w	r3, r3, #4
 800578e:	b2db      	uxtb	r3, r3
 8005790:	2b00      	cmp	r3, #0
 8005792:	d037      	beq.n	8005804 <Save_Data+0x104>
	{
		memcpy(Saving_Buffer + Address_Offset, &Pressure[PRESS_HALF_SAMPLES], PRESS_HALF_LEN);
 8005794:	4b54      	ldr	r3, [pc, #336]	@ (80058e8 <Save_Data+0x1e8>)
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	461a      	mov	r2, r3
 800579a:	4b54      	ldr	r3, [pc, #336]	@ (80058ec <Save_Data+0x1ec>)
 800579c:	4413      	add	r3, r2
 800579e:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 80057a2:	4956      	ldr	r1, [pc, #344]	@ (80058fc <Save_Data+0x1fc>)
 80057a4:	4618      	mov	r0, r3
 80057a6:	f010 fc73 	bl	8016090 <memcpy>
		Last_Pressure = 0;
 80057aa:	4b52      	ldr	r3, [pc, #328]	@ (80058f4 <Save_Data+0x1f4>)
 80057ac:	2200      	movs	r2, #0
 80057ae:	801a      	strh	r2, [r3, #0]
		for(int i = PRESS_HALF_SAMPLES; i < PRESS_FULL_SAMPLES; i++)
 80057b0:	23c8      	movs	r3, #200	@ 0xc8
 80057b2:	f8c7 34d0 	str.w	r3, [r7, #1232]	@ 0x4d0
 80057b6:	e00f      	b.n	80057d8 <Save_Data+0xd8>
		{
			Last_Pressure += Pressure[i];
 80057b8:	4a4d      	ldr	r2, [pc, #308]	@ (80058f0 <Save_Data+0x1f0>)
 80057ba:	f8d7 34d0 	ldr.w	r3, [r7, #1232]	@ 0x4d0
 80057be:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 80057c2:	4b4c      	ldr	r3, [pc, #304]	@ (80058f4 <Save_Data+0x1f4>)
 80057c4:	881b      	ldrh	r3, [r3, #0]
 80057c6:	4413      	add	r3, r2
 80057c8:	b29a      	uxth	r2, r3
 80057ca:	4b4a      	ldr	r3, [pc, #296]	@ (80058f4 <Save_Data+0x1f4>)
 80057cc:	801a      	strh	r2, [r3, #0]
		for(int i = PRESS_HALF_SAMPLES; i < PRESS_FULL_SAMPLES; i++)
 80057ce:	f8d7 34d0 	ldr.w	r3, [r7, #1232]	@ 0x4d0
 80057d2:	3301      	adds	r3, #1
 80057d4:	f8c7 34d0 	str.w	r3, [r7, #1232]	@ 0x4d0
 80057d8:	f8d7 34d0 	ldr.w	r3, [r7, #1232]	@ 0x4d0
 80057dc:	f5b3 7fc8 	cmp.w	r3, #400	@ 0x190
 80057e0:	dbea      	blt.n	80057b8 <Save_Data+0xb8>
		}
		Last_Pressure = (uint16_t)(Last_Pressure / PRESS_HALF_SAMPLES);
 80057e2:	4b44      	ldr	r3, [pc, #272]	@ (80058f4 <Save_Data+0x1f4>)
 80057e4:	881b      	ldrh	r3, [r3, #0]
 80057e6:	4a44      	ldr	r2, [pc, #272]	@ (80058f8 <Save_Data+0x1f8>)
 80057e8:	fba2 2303 	umull	r2, r3, r2, r3
 80057ec:	099b      	lsrs	r3, r3, #6
 80057ee:	b29a      	uxth	r2, r3
 80057f0:	4b40      	ldr	r3, [pc, #256]	@ (80058f4 <Save_Data+0x1f4>)
 80057f2:	801a      	strh	r2, [r3, #0]
		Warning_Detection(&Pressure[PRESS_HALF_SAMPLES]);
 80057f4:	4841      	ldr	r0, [pc, #260]	@ (80058fc <Save_Data+0x1fc>)
 80057f6:	f000 fb17 	bl	8005e28 <Warning_Detection>
		flags.ADC_Full_Buffer = 0;
 80057fa:	4a3a      	ldr	r2, [pc, #232]	@ (80058e4 <Save_Data+0x1e4>)
 80057fc:	7813      	ldrb	r3, [r2, #0]
 80057fe:	f023 0304 	bic.w	r3, r3, #4
 8005802:	7013      	strb	r3, [r2, #0]
	}
	flags.ADC_Complete = 0;
 8005804:	4a37      	ldr	r2, [pc, #220]	@ (80058e4 <Save_Data+0x1e4>)
 8005806:	7813      	ldrb	r3, [r2, #0]
 8005808:	f023 0301 	bic.w	r3, r3, #1
 800580c:	7013      	strb	r3, [r2, #0]
	Address_Offset += PRESS_HALF_LEN;
 800580e:	4b36      	ldr	r3, [pc, #216]	@ (80058e8 <Save_Data+0x1e8>)
 8005810:	681b      	ldr	r3, [r3, #0]
 8005812:	f503 73c8 	add.w	r3, r3, #400	@ 0x190
 8005816:	4a34      	ldr	r2, [pc, #208]	@ (80058e8 <Save_Data+0x1e8>)
 8005818:	6013      	str	r3, [r2, #0]

	memcpy(Saving_Buffer + Address_Offset, Volume_Period, MAX_VOLUME_LEN);
 800581a:	4b33      	ldr	r3, [pc, #204]	@ (80058e8 <Save_Data+0x1e8>)
 800581c:	681b      	ldr	r3, [r3, #0]
 800581e:	461a      	mov	r2, r3
 8005820:	4b32      	ldr	r3, [pc, #200]	@ (80058ec <Save_Data+0x1ec>)
 8005822:	4413      	add	r3, r2
 8005824:	2228      	movs	r2, #40	@ 0x28
 8005826:	4936      	ldr	r1, [pc, #216]	@ (8005900 <Save_Data+0x200>)
 8005828:	4618      	mov	r0, r3
 800582a:	f010 fc31 	bl	8016090 <memcpy>
	uint8_t current_period_cnt = Period_cnt;
 800582e:	4b35      	ldr	r3, [pc, #212]	@ (8005904 <Save_Data+0x204>)
 8005830:	781b      	ldrb	r3, [r3, #0]
 8005832:	f887 34c7 	strb.w	r3, [r7, #1223]	@ 0x4c7
	Last_Volume = 0;
 8005836:	4b34      	ldr	r3, [pc, #208]	@ (8005908 <Save_Data+0x208>)
 8005838:	2200      	movs	r2, #0
 800583a:	601a      	str	r2, [r3, #0]
	for(int i = 0; i < current_period_cnt; i++)
 800583c:	2300      	movs	r3, #0
 800583e:	f8c7 34cc 	str.w	r3, [r7, #1228]	@ 0x4cc
 8005842:	e00e      	b.n	8005862 <Save_Data+0x162>
	{
		Last_Volume += Volume_Period[i];
 8005844:	4a2e      	ldr	r2, [pc, #184]	@ (8005900 <Save_Data+0x200>)
 8005846:	f8d7 34cc 	ldr.w	r3, [r7, #1228]	@ 0x4cc
 800584a:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800584e:	4b2e      	ldr	r3, [pc, #184]	@ (8005908 <Save_Data+0x208>)
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	4413      	add	r3, r2
 8005854:	4a2c      	ldr	r2, [pc, #176]	@ (8005908 <Save_Data+0x208>)
 8005856:	6013      	str	r3, [r2, #0]
	for(int i = 0; i < current_period_cnt; i++)
 8005858:	f8d7 34cc 	ldr.w	r3, [r7, #1228]	@ 0x4cc
 800585c:	3301      	adds	r3, #1
 800585e:	f8c7 34cc 	str.w	r3, [r7, #1228]	@ 0x4cc
 8005862:	f897 34c7 	ldrb.w	r3, [r7, #1223]	@ 0x4c7
 8005866:	f8d7 24cc 	ldr.w	r2, [r7, #1228]	@ 0x4cc
 800586a:	429a      	cmp	r2, r3
 800586c:	dbea      	blt.n	8005844 <Save_Data+0x144>
	}
	Last_Volume = (uint32_t)(Last_Volume / current_period_cnt);
 800586e:	4b26      	ldr	r3, [pc, #152]	@ (8005908 <Save_Data+0x208>)
 8005870:	681a      	ldr	r2, [r3, #0]
 8005872:	f897 34c7 	ldrb.w	r3, [r7, #1223]	@ 0x4c7
 8005876:	fbb2 f3f3 	udiv	r3, r2, r3
 800587a:	4a23      	ldr	r2, [pc, #140]	@ (8005908 <Save_Data+0x208>)
 800587c:	6013      	str	r3, [r2, #0]
	memset(Volume_Period, 0, sizeof(Volume_Period));
 800587e:	2228      	movs	r2, #40	@ 0x28
 8005880:	2100      	movs	r1, #0
 8005882:	481f      	ldr	r0, [pc, #124]	@ (8005900 <Save_Data+0x200>)
 8005884:	f010 fb80 	bl	8015f88 <memset>
	Period_cnt = 0;
 8005888:	4b1e      	ldr	r3, [pc, #120]	@ (8005904 <Save_Data+0x204>)
 800588a:	2200      	movs	r2, #0
 800588c:	701a      	strb	r2, [r3, #0]
	Address_Offset += MAX_VOLUME_LEN;
 800588e:	4b16      	ldr	r3, [pc, #88]	@ (80058e8 <Save_Data+0x1e8>)
 8005890:	681b      	ldr	r3, [r3, #0]
 8005892:	3328      	adds	r3, #40	@ 0x28
 8005894:	4a14      	ldr	r2, [pc, #80]	@ (80058e8 <Save_Data+0x1e8>)
 8005896:	6013      	str	r3, [r2, #0]

	if(sys.ACC_Present)
 8005898:	4b1c      	ldr	r3, [pc, #112]	@ (800590c <Save_Data+0x20c>)
 800589a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800589e:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 80058a2:	f003 0301 	and.w	r3, r3, #1
 80058a6:	b2db      	uxtb	r3, r3
 80058a8:	2b00      	cmp	r3, #0
 80058aa:	f000 80a4 	beq.w	80059f6 <Save_Data+0x2f6>
	{
		memcpy(Saving_Buffer + Address_Offset, Acceleration, ACCELERATION_LEN);
 80058ae:	4b0e      	ldr	r3, [pc, #56]	@ (80058e8 <Save_Data+0x1e8>)
 80058b0:	681b      	ldr	r3, [r3, #0]
 80058b2:	461a      	mov	r2, r3
 80058b4:	4b0d      	ldr	r3, [pc, #52]	@ (80058ec <Save_Data+0x1ec>)
 80058b6:	4413      	add	r3, r2
 80058b8:	4a15      	ldr	r2, [pc, #84]	@ (8005910 <Save_Data+0x210>)
 80058ba:	4618      	mov	r0, r3
 80058bc:	4611      	mov	r1, r2
 80058be:	f44f 63af 	mov.w	r3, #1400	@ 0x578
 80058c2:	461a      	mov	r2, r3
 80058c4:	f010 fbe4 	bl	8016090 <memcpy>
		Last_Acceleration.x = 0;
 80058c8:	4b12      	ldr	r3, [pc, #72]	@ (8005914 <Save_Data+0x214>)
 80058ca:	2200      	movs	r2, #0
 80058cc:	805a      	strh	r2, [r3, #2]
		Last_Acceleration.y = 0;
 80058ce:	4b11      	ldr	r3, [pc, #68]	@ (8005914 <Save_Data+0x214>)
 80058d0:	2200      	movs	r2, #0
 80058d2:	809a      	strh	r2, [r3, #4]
		Last_Acceleration.z = 0;
 80058d4:	4b0f      	ldr	r3, [pc, #60]	@ (8005914 <Save_Data+0x214>)
 80058d6:	2200      	movs	r2, #0
 80058d8:	80da      	strh	r2, [r3, #6]
		for(int i = 0; i < ACCELERATION_LEN; i += 7)
 80058da:	2300      	movs	r3, #0
 80058dc:	f8c7 34c8 	str.w	r3, [r7, #1224]	@ 0x4c8
 80058e0:	e064      	b.n	80059ac <Save_Data+0x2ac>
 80058e2:	bf00      	nop
 80058e4:	200019e8 	.word	0x200019e8
 80058e8:	20004bbc 	.word	0x20004bbc
 80058ec:	2000448c 	.word	0x2000448c
 80058f0:	20003b54 	.word	0x20003b54
 80058f4:	20004414 	.word	0x20004414
 80058f8:	51eb851f 	.word	0x51eb851f
 80058fc:	20003ce4 	.word	0x20003ce4
 8005900:	20003e74 	.word	0x20003e74
 8005904:	20003b50 	.word	0x20003b50
 8005908:	20004418 	.word	0x20004418
 800590c:	20000840 	.word	0x20000840
 8005910:	20003e9c 	.word	0x20003e9c
 8005914:	2000441c 	.word	0x2000441c
		{
			Last_Acceleration.x += Acceleration[i+1] | (Acceleration[i+2] << 8); 
 8005918:	4b85      	ldr	r3, [pc, #532]	@ (8005b30 <Save_Data+0x430>)
 800591a:	885a      	ldrh	r2, [r3, #2]
 800591c:	f8d7 34c8 	ldr.w	r3, [r7, #1224]	@ 0x4c8
 8005920:	3301      	adds	r3, #1
 8005922:	4984      	ldr	r1, [pc, #528]	@ (8005b34 <Save_Data+0x434>)
 8005924:	5ccb      	ldrb	r3, [r1, r3]
 8005926:	b219      	sxth	r1, r3
 8005928:	f8d7 34c8 	ldr.w	r3, [r7, #1224]	@ 0x4c8
 800592c:	3302      	adds	r3, #2
 800592e:	4881      	ldr	r0, [pc, #516]	@ (8005b34 <Save_Data+0x434>)
 8005930:	5cc3      	ldrb	r3, [r0, r3]
 8005932:	b21b      	sxth	r3, r3
 8005934:	021b      	lsls	r3, r3, #8
 8005936:	b21b      	sxth	r3, r3
 8005938:	430b      	orrs	r3, r1
 800593a:	b21b      	sxth	r3, r3
 800593c:	b29b      	uxth	r3, r3
 800593e:	4413      	add	r3, r2
 8005940:	b29a      	uxth	r2, r3
 8005942:	4b7b      	ldr	r3, [pc, #492]	@ (8005b30 <Save_Data+0x430>)
 8005944:	805a      	strh	r2, [r3, #2]
			Last_Acceleration.y += Acceleration[i+3] | (Acceleration[i+4] << 8); 
 8005946:	4b7a      	ldr	r3, [pc, #488]	@ (8005b30 <Save_Data+0x430>)
 8005948:	889a      	ldrh	r2, [r3, #4]
 800594a:	f8d7 34c8 	ldr.w	r3, [r7, #1224]	@ 0x4c8
 800594e:	3303      	adds	r3, #3
 8005950:	4978      	ldr	r1, [pc, #480]	@ (8005b34 <Save_Data+0x434>)
 8005952:	5ccb      	ldrb	r3, [r1, r3]
 8005954:	b219      	sxth	r1, r3
 8005956:	f8d7 34c8 	ldr.w	r3, [r7, #1224]	@ 0x4c8
 800595a:	3304      	adds	r3, #4
 800595c:	4875      	ldr	r0, [pc, #468]	@ (8005b34 <Save_Data+0x434>)
 800595e:	5cc3      	ldrb	r3, [r0, r3]
 8005960:	b21b      	sxth	r3, r3
 8005962:	021b      	lsls	r3, r3, #8
 8005964:	b21b      	sxth	r3, r3
 8005966:	430b      	orrs	r3, r1
 8005968:	b21b      	sxth	r3, r3
 800596a:	b29b      	uxth	r3, r3
 800596c:	4413      	add	r3, r2
 800596e:	b29a      	uxth	r2, r3
 8005970:	4b6f      	ldr	r3, [pc, #444]	@ (8005b30 <Save_Data+0x430>)
 8005972:	809a      	strh	r2, [r3, #4]
			Last_Acceleration.z += Acceleration[i+5] | (Acceleration[i+6] << 8); 
 8005974:	4b6e      	ldr	r3, [pc, #440]	@ (8005b30 <Save_Data+0x430>)
 8005976:	88da      	ldrh	r2, [r3, #6]
 8005978:	f8d7 34c8 	ldr.w	r3, [r7, #1224]	@ 0x4c8
 800597c:	3305      	adds	r3, #5
 800597e:	496d      	ldr	r1, [pc, #436]	@ (8005b34 <Save_Data+0x434>)
 8005980:	5ccb      	ldrb	r3, [r1, r3]
 8005982:	b219      	sxth	r1, r3
 8005984:	f8d7 34c8 	ldr.w	r3, [r7, #1224]	@ 0x4c8
 8005988:	3306      	adds	r3, #6
 800598a:	486a      	ldr	r0, [pc, #424]	@ (8005b34 <Save_Data+0x434>)
 800598c:	5cc3      	ldrb	r3, [r0, r3]
 800598e:	b21b      	sxth	r3, r3
 8005990:	021b      	lsls	r3, r3, #8
 8005992:	b21b      	sxth	r3, r3
 8005994:	430b      	orrs	r3, r1
 8005996:	b21b      	sxth	r3, r3
 8005998:	b29b      	uxth	r3, r3
 800599a:	4413      	add	r3, r2
 800599c:	b29a      	uxth	r2, r3
 800599e:	4b64      	ldr	r3, [pc, #400]	@ (8005b30 <Save_Data+0x430>)
 80059a0:	80da      	strh	r2, [r3, #6]
		for(int i = 0; i < ACCELERATION_LEN; i += 7)
 80059a2:	f8d7 34c8 	ldr.w	r3, [r7, #1224]	@ 0x4c8
 80059a6:	3307      	adds	r3, #7
 80059a8:	f8c7 34c8 	str.w	r3, [r7, #1224]	@ 0x4c8
 80059ac:	f8d7 34c8 	ldr.w	r3, [r7, #1224]	@ 0x4c8
 80059b0:	f5b3 6faf 	cmp.w	r3, #1400	@ 0x578
 80059b4:	dbb0      	blt.n	8005918 <Save_Data+0x218>
		}
		Last_Acceleration.x = (uint16_t)(Last_Acceleration.x / (ACCELERATION_LEN / 7));
 80059b6:	4b5e      	ldr	r3, [pc, #376]	@ (8005b30 <Save_Data+0x430>)
 80059b8:	885b      	ldrh	r3, [r3, #2]
 80059ba:	4a5f      	ldr	r2, [pc, #380]	@ (8005b38 <Save_Data+0x438>)
 80059bc:	fba2 2303 	umull	r2, r3, r2, r3
 80059c0:	099b      	lsrs	r3, r3, #6
 80059c2:	b29a      	uxth	r2, r3
 80059c4:	4b5a      	ldr	r3, [pc, #360]	@ (8005b30 <Save_Data+0x430>)
 80059c6:	805a      	strh	r2, [r3, #2]
		Last_Acceleration.y = (uint16_t)(Last_Acceleration.y / (ACCELERATION_LEN / 7));
 80059c8:	4b59      	ldr	r3, [pc, #356]	@ (8005b30 <Save_Data+0x430>)
 80059ca:	889b      	ldrh	r3, [r3, #4]
 80059cc:	4a5a      	ldr	r2, [pc, #360]	@ (8005b38 <Save_Data+0x438>)
 80059ce:	fba2 2303 	umull	r2, r3, r2, r3
 80059d2:	099b      	lsrs	r3, r3, #6
 80059d4:	b29a      	uxth	r2, r3
 80059d6:	4b56      	ldr	r3, [pc, #344]	@ (8005b30 <Save_Data+0x430>)
 80059d8:	809a      	strh	r2, [r3, #4]
		Last_Acceleration.z = (uint16_t)(Last_Acceleration.z / (ACCELERATION_LEN / 7));
 80059da:	4b55      	ldr	r3, [pc, #340]	@ (8005b30 <Save_Data+0x430>)
 80059dc:	88db      	ldrh	r3, [r3, #6]
 80059de:	4a56      	ldr	r2, [pc, #344]	@ (8005b38 <Save_Data+0x438>)
 80059e0:	fba2 2303 	umull	r2, r3, r2, r3
 80059e4:	099b      	lsrs	r3, r3, #6
 80059e6:	b29a      	uxth	r2, r3
 80059e8:	4b51      	ldr	r3, [pc, #324]	@ (8005b30 <Save_Data+0x430>)
 80059ea:	80da      	strh	r2, [r3, #6]
		flags.ACC_Complete = 0;
 80059ec:	4a53      	ldr	r2, [pc, #332]	@ (8005b3c <Save_Data+0x43c>)
 80059ee:	7813      	ldrb	r3, [r2, #0]
 80059f0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80059f4:	7013      	strb	r3, [r2, #0]
	}
	Address_Offset += ACCELERATION_LEN;
 80059f6:	4b52      	ldr	r3, [pc, #328]	@ (8005b40 <Save_Data+0x440>)
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	f503 63af 	add.w	r3, r3, #1400	@ 0x578
 80059fe:	4a50      	ldr	r2, [pc, #320]	@ (8005b40 <Save_Data+0x440>)
 8005a00:	6013      	str	r3, [r2, #0]

	INA3221_Read_Measure(&Supply);
 8005a02:	4850      	ldr	r0, [pc, #320]	@ (8005b44 <Save_Data+0x444>)
 8005a04:	f7fb fb10 	bl	8001028 <INA3221_Read_Measure>
	uint16_t new_temp = 0;
 8005a08:	2300      	movs	r3, #0
 8005a0a:	f8a7 34c4 	strh.w	r3, [r7, #1220]	@ 0x4c4
	if((new_temp = Read_Temperature()) != 0)
 8005a0e:	f7fb faab 	bl	8000f68 <Read_Temperature>
 8005a12:	4603      	mov	r3, r0
 8005a14:	f8a7 34c4 	strh.w	r3, [r7, #1220]	@ 0x4c4
 8005a18:	f8b7 34c4 	ldrh.w	r3, [r7, #1220]	@ 0x4c4
 8005a1c:	2b00      	cmp	r3, #0
 8005a1e:	d003      	beq.n	8005a28 <Save_Data+0x328>
	{
		Temperature = new_temp;
 8005a20:	4a49      	ldr	r2, [pc, #292]	@ (8005b48 <Save_Data+0x448>)
 8005a22:	f8b7 34c4 	ldrh.w	r3, [r7, #1220]	@ 0x4c4
 8005a26:	8013      	strh	r3, [r2, #0]
	}
	BC_MultiRead_Reg(REG3B_VBAT_ADC, &Vbatt);
 8005a28:	4948      	ldr	r1, [pc, #288]	@ (8005b4c <Save_Data+0x44c>)
 8005a2a:	203b      	movs	r0, #59	@ 0x3b
 8005a2c:	f7fc fdde 	bl	80025ec <BC_MultiRead_Reg>

	uint8_t compressed_data[MAX_COMPRESSED_SIZE];
	Compressed_Sample_Typedef sample;
    sample.compressed_size = Compress_Sample(Saving_Buffer, SAVING_BUFFER_LEN, compressed_data);
 8005a30:	f507 639b 	add.w	r3, r7, #1240	@ 0x4d8
 8005a34:	f2a3 44cc 	subw	r4, r3, #1228	@ 0x4cc
 8005a38:	4638      	mov	r0, r7
 8005a3a:	f107 0314 	add.w	r3, r7, #20
 8005a3e:	f44f 62e6 	mov.w	r2, #1840	@ 0x730
 8005a42:	4943      	ldr	r1, [pc, #268]	@ (8005b50 <Save_Data+0x450>)
 8005a44:	f000 fbe2 	bl	800620c <Compress_Sample>
 8005a48:	f507 639b 	add.w	r3, r7, #1240	@ 0x4d8
 8005a4c:	f5a3 629b 	sub.w	r2, r3, #1240	@ 0x4d8
 8005a50:	4623      	mov	r3, r4
 8005a52:	6810      	ldr	r0, [r2, #0]
 8005a54:	6018      	str	r0, [r3, #0]
 8005a56:	8892      	ldrh	r2, [r2, #4]
 8005a58:	809a      	strh	r2, [r3, #4]
  __ASM volatile ("cpsid i" : : : "memory");
 8005a5a:	b672      	cpsid	i
}
 8005a5c:	bf00      	nop

	__disable_irq();
	RAM_Save_Measure(&sample, compressed_data);
 8005a5e:	f107 0214 	add.w	r2, r7, #20
 8005a62:	f107 030c 	add.w	r3, r7, #12
 8005a66:	4611      	mov	r1, r2
 8005a68:	4618      	mov	r0, r3
 8005a6a:	f000 fa41 	bl	8005ef0 <RAM_Save_Measure>
  __ASM volatile ("cpsie i" : : : "memory");
 8005a6e:	b662      	cpsie	i
}
 8005a70:	bf00      	nop
	__enable_irq();

	Address_Offset = 0;
 8005a72:	4b33      	ldr	r3, [pc, #204]	@ (8005b40 <Save_Data+0x440>)
 8005a74:	2200      	movs	r2, #0
 8005a76:	601a      	str	r2, [r3, #0]

	if(flags.Hammer_Detected || flags.Threshold_Detected)
 8005a78:	4b30      	ldr	r3, [pc, #192]	@ (8005b3c <Save_Data+0x43c>)
 8005a7a:	781b      	ldrb	r3, [r3, #0]
 8005a7c:	f003 0308 	and.w	r3, r3, #8
 8005a80:	b2db      	uxtb	r3, r3
 8005a82:	2b00      	cmp	r3, #0
 8005a84:	d106      	bne.n	8005a94 <Save_Data+0x394>
 8005a86:	4b2d      	ldr	r3, [pc, #180]	@ (8005b3c <Save_Data+0x43c>)
 8005a88:	781b      	ldrb	r3, [r3, #0]
 8005a8a:	f003 0310 	and.w	r3, r3, #16
 8005a8e:	b2db      	uxtb	r3, r3
 8005a90:	2b00      	cmp	r3, #0
 8005a92:	d048      	beq.n	8005b26 <Save_Data+0x426>
	{
		Cycles_After_Warning++;
 8005a94:	4b2f      	ldr	r3, [pc, #188]	@ (8005b54 <Save_Data+0x454>)
 8005a96:	881b      	ldrh	r3, [r3, #0]
 8005a98:	3301      	adds	r3, #1
 8005a9a:	b29a      	uxth	r2, r3
 8005a9c:	4b2d      	ldr	r3, [pc, #180]	@ (8005b54 <Save_Data+0x454>)
 8005a9e:	801a      	strh	r2, [r3, #0]
		if(Cycles_After_Warning >= config.buffering_secs * (config.samp_freq / ACC_FIFO_WATERMARK))
 8005aa0:	4b2c      	ldr	r3, [pc, #176]	@ (8005b54 <Save_Data+0x454>)
 8005aa2:	881b      	ldrh	r3, [r3, #0]
 8005aa4:	4619      	mov	r1, r3
 8005aa6:	4b2c      	ldr	r3, [pc, #176]	@ (8005b58 <Save_Data+0x458>)
 8005aa8:	791b      	ldrb	r3, [r3, #4]
 8005aaa:	4618      	mov	r0, r3
 8005aac:	4b2a      	ldr	r3, [pc, #168]	@ (8005b58 <Save_Data+0x458>)
 8005aae:	885b      	ldrh	r3, [r3, #2]
 8005ab0:	4a21      	ldr	r2, [pc, #132]	@ (8005b38 <Save_Data+0x438>)
 8005ab2:	fba2 2303 	umull	r2, r3, r2, r3
 8005ab6:	099b      	lsrs	r3, r3, #6
 8005ab8:	b29b      	uxth	r3, r3
 8005aba:	fb00 f303 	mul.w	r3, r0, r3
 8005abe:	4299      	cmp	r1, r3
 8005ac0:	db31      	blt.n	8005b26 <Save_Data+0x426>
		{
			if(!flags.CMD.Measure_Request)
 8005ac2:	4b1e      	ldr	r3, [pc, #120]	@ (8005b3c <Save_Data+0x43c>)
 8005ac4:	789b      	ldrb	r3, [r3, #2]
 8005ac6:	f003 0302 	and.w	r3, r3, #2
 8005aca:	b2db      	uxtb	r3, r3
 8005acc:	2b00      	cmp	r3, #0
 8005ace:	d12a      	bne.n	8005b26 <Save_Data+0x426>
			{
				LED_Start(RED_LED, FAST, LOW);
 8005ad0:	2207      	movs	r2, #7
 8005ad2:	2100      	movs	r1, #0
 8005ad4:	2004      	movs	r0, #4
 8005ad6:	f7fd fd8b 	bl	80035f0 <LED_Start>
				Switch_Buffer();
 8005ada:	f000 f843 	bl	8005b64 <Switch_Buffer>
				flags.CMD.Measure_Request = 1;
 8005ade:	4a17      	ldr	r2, [pc, #92]	@ (8005b3c <Save_Data+0x43c>)
 8005ae0:	7893      	ldrb	r3, [r2, #2]
 8005ae2:	f043 0302 	orr.w	r3, r3, #2
 8005ae6:	7093      	strb	r3, [r2, #2]
				Send_Measure_Addr = Saved_Bytes;
 8005ae8:	4b1c      	ldr	r3, [pc, #112]	@ (8005b5c <Save_Data+0x45c>)
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	4a1c      	ldr	r2, [pc, #112]	@ (8005b60 <Save_Data+0x460>)
 8005aee:	6013      	str	r3, [r2, #0]
				Cycles_After_Warning = 0;
 8005af0:	4b18      	ldr	r3, [pc, #96]	@ (8005b54 <Save_Data+0x454>)
 8005af2:	2200      	movs	r2, #0
 8005af4:	801a      	strh	r2, [r3, #0]
				if(flags.Hammer_Detected)
 8005af6:	4b11      	ldr	r3, [pc, #68]	@ (8005b3c <Save_Data+0x43c>)
 8005af8:	781b      	ldrb	r3, [r3, #0]
 8005afa:	f003 0308 	and.w	r3, r3, #8
 8005afe:	b2db      	uxtb	r3, r3
 8005b00:	2b00      	cmp	r3, #0
 8005b02:	d004      	beq.n	8005b0e <Save_Data+0x40e>
				{
					flags.Hammer_Detected = 0;
 8005b04:	4a0d      	ldr	r2, [pc, #52]	@ (8005b3c <Save_Data+0x43c>)
 8005b06:	7813      	ldrb	r3, [r2, #0]
 8005b08:	f023 0308 	bic.w	r3, r3, #8
 8005b0c:	7013      	strb	r3, [r2, #0]
				}
				if(flags.Threshold_Detected)
 8005b0e:	4b0b      	ldr	r3, [pc, #44]	@ (8005b3c <Save_Data+0x43c>)
 8005b10:	781b      	ldrb	r3, [r3, #0]
 8005b12:	f003 0310 	and.w	r3, r3, #16
 8005b16:	b2db      	uxtb	r3, r3
 8005b18:	2b00      	cmp	r3, #0
 8005b1a:	d004      	beq.n	8005b26 <Save_Data+0x426>
				{
					flags.Threshold_Detected = 0;
 8005b1c:	4a07      	ldr	r2, [pc, #28]	@ (8005b3c <Save_Data+0x43c>)
 8005b1e:	7813      	ldrb	r3, [r2, #0]
 8005b20:	f023 0310 	bic.w	r3, r3, #16
 8005b24:	7013      	strb	r3, [r2, #0]
				}
			}
		}
	}

}
 8005b26:	bf00      	nop
 8005b28:	f207 47dc 	addw	r7, r7, #1244	@ 0x4dc
 8005b2c:	46bd      	mov	sp, r7
 8005b2e:	bd90      	pop	{r4, r7, pc}
 8005b30:	2000441c 	.word	0x2000441c
 8005b34:	20003e9c 	.word	0x20003e9c
 8005b38:	51eb851f 	.word	0x51eb851f
 8005b3c:	200019e8 	.word	0x200019e8
 8005b40:	20004bbc 	.word	0x20004bbc
 8005b44:	20003b44 	.word	0x20003b44
 8005b48:	20004424 	.word	0x20004424
 8005b4c:	20004426 	.word	0x20004426
 8005b50:	2000448c 	.word	0x2000448c
 8005b54:	20004bc0 	.word	0x20004bc0
 8005b58:	200019ec 	.word	0x200019ec
 8005b5c:	20004bc4 	.word	0x20004bc4
 8005b60:	20004bcc 	.word	0x20004bcc

08005b64 <Switch_Buffer>:

/*-----CAMBIO BUFFER-----*/
void Switch_Buffer(void)
{
 8005b64:	b480      	push	{r7}
 8005b66:	af00      	add	r7, sp, #0
    sys.Inactive_RAM_Len = sys.Current_RAM_Len;
 8005b68:	4b23      	ldr	r3, [pc, #140]	@ (8005bf8 <Switch_Buffer+0x94>)
 8005b6a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005b6e:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 8005b72:	4a21      	ldr	r2, [pc, #132]	@ (8005bf8 <Switch_Buffer+0x94>)
 8005b74:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8005b78:	f8c2 30d0 	str.w	r3, [r2, #208]	@ 0xd0

    if (sys.Active_RAM_Buffer == 0) 
 8005b7c:	4b1e      	ldr	r3, [pc, #120]	@ (8005bf8 <Switch_Buffer+0x94>)
 8005b7e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005b82:	f893 30c0 	ldrb.w	r3, [r3, #192]	@ 0xc0
 8005b86:	2b00      	cmp	r3, #0
 8005b88:	d116      	bne.n	8005bb8 <Switch_Buffer+0x54>
	{
		sys.RAM_Buffer_Base_tosend = RAM_SECOND_BUFFER_ADD;
 8005b8a:	4b1b      	ldr	r3, [pc, #108]	@ (8005bf8 <Switch_Buffer+0x94>)
 8005b8c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005b90:	461a      	mov	r2, r3
 8005b92:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8005b96:	f8c2 30cc 	str.w	r3, [r2, #204]	@ 0xcc
        sys.Active_RAM_Buffer = 1;
 8005b9a:	4b17      	ldr	r3, [pc, #92]	@ (8005bf8 <Switch_Buffer+0x94>)
 8005b9c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005ba0:	2201      	movs	r2, #1
 8005ba2:	f883 20c0 	strb.w	r2, [r3, #192]	@ 0xc0
        sys.Current_RAM_Base = RAM_SECOND_BUFFER_ADD;
 8005ba6:	4b14      	ldr	r3, [pc, #80]	@ (8005bf8 <Switch_Buffer+0x94>)
 8005ba8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005bac:	461a      	mov	r2, r3
 8005bae:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8005bb2:	f8c2 30c4 	str.w	r3, [r2, #196]	@ 0xc4
 8005bb6:	e013      	b.n	8005be0 <Switch_Buffer+0x7c>
    } 
	else 
	{
		sys.RAM_Buffer_Base_tosend = RAM_FIRST_BUFFER_ADD;
 8005bb8:	4b0f      	ldr	r3, [pc, #60]	@ (8005bf8 <Switch_Buffer+0x94>)
 8005bba:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005bbe:	461a      	mov	r2, r3
 8005bc0:	2300      	movs	r3, #0
 8005bc2:	f8c2 30cc 	str.w	r3, [r2, #204]	@ 0xcc
        sys.Active_RAM_Buffer = 0;
 8005bc6:	4b0c      	ldr	r3, [pc, #48]	@ (8005bf8 <Switch_Buffer+0x94>)
 8005bc8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005bcc:	2200      	movs	r2, #0
 8005bce:	f883 20c0 	strb.w	r2, [r3, #192]	@ 0xc0
        sys.Current_RAM_Base = RAM_FIRST_BUFFER_ADD;
 8005bd2:	4b09      	ldr	r3, [pc, #36]	@ (8005bf8 <Switch_Buffer+0x94>)
 8005bd4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005bd8:	461a      	mov	r2, r3
 8005bda:	2300      	movs	r3, #0
 8005bdc:	f8c2 30c4 	str.w	r3, [r2, #196]	@ 0xc4
    }

    sys.Current_RAM_Len = 0;
 8005be0:	4b05      	ldr	r3, [pc, #20]	@ (8005bf8 <Switch_Buffer+0x94>)
 8005be2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005be6:	461a      	mov	r2, r3
 8005be8:	2300      	movs	r3, #0
 8005bea:	f8c2 30c8 	str.w	r3, [r2, #200]	@ 0xc8
}
 8005bee:	bf00      	nop
 8005bf0:	46bd      	mov	sp, r7
 8005bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bf6:	4770      	bx	lr
 8005bf8:	20000840 	.word	0x20000840

08005bfc <Erase_RAM_Data>:

/*-----CANCELLAZIONE DATI RAM-----*/
void Erase_RAM_Data(void)
{
 8005bfc:	b580      	push	{r7, lr}
 8005bfe:	f5ad 6d81 	sub.w	sp, sp, #1032	@ 0x408
 8005c02:	af00      	add	r7, sp, #0
	uint8_t zero_buffer[1024] = {0};
 8005c04:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8005c08:	f2a3 4304 	subw	r3, r3, #1028	@ 0x404
 8005c0c:	4618      	mov	r0, r3
 8005c0e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8005c12:	461a      	mov	r2, r3
 8005c14:	2100      	movs	r1, #0
 8005c16:	f010 f9b7 	bl	8015f88 <memset>
	for (uint32_t addr = 0; addr < 0x800000; addr += sizeof(zero_buffer)) 
 8005c1a:	2300      	movs	r3, #0
 8005c1c:	f8c7 3404 	str.w	r3, [r7, #1028]	@ 0x404
 8005c20:	e00d      	b.n	8005c3e <Erase_RAM_Data+0x42>
	{
		RAM_Write(addr, sizeof(zero_buffer), zero_buffer);
 8005c22:	1d3b      	adds	r3, r7, #4
 8005c24:	461a      	mov	r2, r3
 8005c26:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8005c2a:	f8d7 0404 	ldr.w	r0, [r7, #1028]	@ 0x404
 8005c2e:	f001 fa45 	bl	80070bc <RAM_Write>
	for (uint32_t addr = 0; addr < 0x800000; addr += sizeof(zero_buffer)) 
 8005c32:	f8d7 3404 	ldr.w	r3, [r7, #1028]	@ 0x404
 8005c36:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8005c3a:	f8c7 3404 	str.w	r3, [r7, #1028]	@ 0x404
 8005c3e:	f8d7 3404 	ldr.w	r3, [r7, #1028]	@ 0x404
 8005c42:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8005c46:	d3ec      	bcc.n	8005c22 <Erase_RAM_Data+0x26>
	}
}
 8005c48:	bf00      	nop
 8005c4a:	bf00      	nop
 8005c4c:	f507 6781 	add.w	r7, r7, #1032	@ 0x408
 8005c50:	46bd      	mov	sp, r7
 8005c52:	bd80      	pop	{r7, pc}

08005c54 <Start_Measure>:


/*-----AVVIO MISURA-----*/
void Start_Measure(void)
{
 8005c54:	b580      	push	{r7, lr}
 8005c56:	af00      	add	r7, sp, #0
	Erase_RAM_Data();
 8005c58:	f7ff ffd0 	bl	8005bfc <Erase_RAM_Data>
	sys.RAM_Samples_Number = (config.samp_freq / ACC_FIFO_WATERMARK) * config.buffering_secs * 2;
 8005c5c:	4b50      	ldr	r3, [pc, #320]	@ (8005da0 <Start_Measure+0x14c>)
 8005c5e:	885b      	ldrh	r3, [r3, #2]
 8005c60:	4a50      	ldr	r2, [pc, #320]	@ (8005da4 <Start_Measure+0x150>)
 8005c62:	fba2 2303 	umull	r2, r3, r2, r3
 8005c66:	099b      	lsrs	r3, r3, #6
 8005c68:	b29b      	uxth	r3, r3
 8005c6a:	461a      	mov	r2, r3
 8005c6c:	4b4c      	ldr	r3, [pc, #304]	@ (8005da0 <Start_Measure+0x14c>)
 8005c6e:	791b      	ldrb	r3, [r3, #4]
 8005c70:	fb02 f303 	mul.w	r3, r2, r3
 8005c74:	005b      	lsls	r3, r3, #1
 8005c76:	461a      	mov	r2, r3
 8005c78:	4b4b      	ldr	r3, [pc, #300]	@ (8005da8 <Start_Measure+0x154>)
 8005c7a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005c7e:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
	sys.Active_RAM_Buffer = 0;
 8005c82:	4b49      	ldr	r3, [pc, #292]	@ (8005da8 <Start_Measure+0x154>)
 8005c84:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005c88:	2200      	movs	r2, #0
 8005c8a:	f883 20c0 	strb.w	r2, [r3, #192]	@ 0xc0
	sys.Inactive_RAM_Len = 0;
 8005c8e:	4b46      	ldr	r3, [pc, #280]	@ (8005da8 <Start_Measure+0x154>)
 8005c90:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005c94:	461a      	mov	r2, r3
 8005c96:	2300      	movs	r3, #0
 8005c98:	f8c2 30d0 	str.w	r3, [r2, #208]	@ 0xd0
	sys.Current_RAM_Base = RAM_FIRST_BUFFER_ADD;
 8005c9c:	4b42      	ldr	r3, [pc, #264]	@ (8005da8 <Start_Measure+0x154>)
 8005c9e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005ca2:	461a      	mov	r2, r3
 8005ca4:	2300      	movs	r3, #0
 8005ca6:	f8c2 30c4 	str.w	r3, [r2, #196]	@ 0xc4
	sys.Current_RAM_Len = 0;
 8005caa:	4b3f      	ldr	r3, [pc, #252]	@ (8005da8 <Start_Measure+0x154>)
 8005cac:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005cb0:	461a      	mov	r2, r3
 8005cb2:	2300      	movs	r3, #0
 8005cb4:	f8c2 30c8 	str.w	r3, [r2, #200]	@ 0xc8
	flags.SIM_isConnected = 1;
 8005cb8:	4a3c      	ldr	r2, [pc, #240]	@ (8005dac <Start_Measure+0x158>)
 8005cba:	7853      	ldrb	r3, [r2, #1]
 8005cbc:	f043 0308 	orr.w	r3, r3, #8
 8005cc0:	7053      	strb	r3, [r2, #1]
	memset(Pressure, 0, sizeof(Pressure));
 8005cc2:	f44f 7248 	mov.w	r2, #800	@ 0x320
 8005cc6:	2100      	movs	r1, #0
 8005cc8:	4839      	ldr	r0, [pc, #228]	@ (8005db0 <Start_Measure+0x15c>)
 8005cca:	f010 f95d 	bl	8015f88 <memset>
	memset(Volume_Period, 0, sizeof(Volume_Period));
 8005cce:	2228      	movs	r2, #40	@ 0x28
 8005cd0:	2100      	movs	r1, #0
 8005cd2:	4838      	ldr	r0, [pc, #224]	@ (8005db4 <Start_Measure+0x160>)
 8005cd4:	f010 f958 	bl	8015f88 <memset>
	memset(Acceleration, 0, sizeof(Acceleration));
 8005cd8:	f44f 62af 	mov.w	r2, #1400	@ 0x578
 8005cdc:	2100      	movs	r1, #0
 8005cde:	4836      	ldr	r0, [pc, #216]	@ (8005db8 <Start_Measure+0x164>)
 8005ce0:	f010 f952 	bl	8015f88 <memset>
	memset(&Supply, 0, sizeof(Supply));
 8005ce4:	220c      	movs	r2, #12
 8005ce6:	2100      	movs	r1, #0
 8005ce8:	4834      	ldr	r0, [pc, #208]	@ (8005dbc <Start_Measure+0x168>)
 8005cea:	f010 f94d 	bl	8015f88 <memset>
	Temperature = 0;
 8005cee:	4b34      	ldr	r3, [pc, #208]	@ (8005dc0 <Start_Measure+0x16c>)
 8005cf0:	2200      	movs	r2, #0
 8005cf2:	801a      	strh	r2, [r3, #0]
	Saved_Bytes = 0;
 8005cf4:	4b33      	ldr	r3, [pc, #204]	@ (8005dc4 <Start_Measure+0x170>)
 8005cf6:	2200      	movs	r2, #0
 8005cf8:	601a      	str	r2, [r3, #0]
	Saved_Samples = 0;
 8005cfa:	4b33      	ldr	r3, [pc, #204]	@ (8005dc8 <Start_Measure+0x174>)
 8005cfc:	2200      	movs	r2, #0
 8005cfe:	801a      	strh	r2, [r3, #0]
	Address_Offset = 0;
 8005d00:	4b32      	ldr	r3, [pc, #200]	@ (8005dcc <Start_Measure+0x178>)
 8005d02:	2200      	movs	r2, #0
 8005d04:	601a      	str	r2, [r3, #0]
	Cycles_After_Warning = 0;
 8005d06:	4b32      	ldr	r3, [pc, #200]	@ (8005dd0 <Start_Measure+0x17c>)
 8005d08:	2200      	movs	r2, #0
 8005d0a:	801a      	strh	r2, [r3, #0]
	Clear_Flags();
 8005d0c:	f000 ff82 	bl	8006c14 <Clear_Flags>

	ADC_TIMER->Instance->PSC = 100 - 1;
 8005d10:	4b30      	ldr	r3, [pc, #192]	@ (8005dd4 <Start_Measure+0x180>)
 8005d12:	681b      	ldr	r3, [r3, #0]
 8005d14:	2263      	movs	r2, #99	@ 0x63
 8005d16:	629a      	str	r2, [r3, #40]	@ 0x28
	ADC_TIMER->Instance->ARR = (uint32_t)(SystemCoreClock / (ADC_TIMER->Instance->PSC * config.samp_freq)) - 1;
 8005d18:	4b2f      	ldr	r3, [pc, #188]	@ (8005dd8 <Start_Measure+0x184>)
 8005d1a:	681a      	ldr	r2, [r3, #0]
 8005d1c:	4b2d      	ldr	r3, [pc, #180]	@ (8005dd4 <Start_Measure+0x180>)
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005d22:	491f      	ldr	r1, [pc, #124]	@ (8005da0 <Start_Measure+0x14c>)
 8005d24:	8849      	ldrh	r1, [r1, #2]
 8005d26:	fb01 f303 	mul.w	r3, r1, r3
 8005d2a:	fbb2 f2f3 	udiv	r2, r2, r3
 8005d2e:	4b29      	ldr	r3, [pc, #164]	@ (8005dd4 <Start_Measure+0x180>)
 8005d30:	681b      	ldr	r3, [r3, #0]
 8005d32:	3a01      	subs	r2, #1
 8005d34:	62da      	str	r2, [r3, #44]	@ 0x2c
	ACC_TIMER->Instance->ARR = (uint32_t)(config.samp_freq / 25) - 1;
 8005d36:	4b1a      	ldr	r3, [pc, #104]	@ (8005da0 <Start_Measure+0x14c>)
 8005d38:	885b      	ldrh	r3, [r3, #2]
 8005d3a:	4a1a      	ldr	r2, [pc, #104]	@ (8005da4 <Start_Measure+0x150>)
 8005d3c:	fba2 2303 	umull	r2, r3, r2, r3
 8005d40:	08db      	lsrs	r3, r3, #3
 8005d42:	b29b      	uxth	r3, r3
 8005d44:	461a      	mov	r2, r3
 8005d46:	4b25      	ldr	r3, [pc, #148]	@ (8005ddc <Start_Measure+0x188>)
 8005d48:	681b      	ldr	r3, [r3, #0]
 8005d4a:	3a01      	subs	r2, #1
 8005d4c:	62da      	str	r2, [r3, #44]	@ 0x2c
	ACC_TIMER->Instance->CCR3 = (uint32_t)((ACC_TIMER->Instance->ARR + 1) / 2);
 8005d4e:	4b23      	ldr	r3, [pc, #140]	@ (8005ddc <Start_Measure+0x188>)
 8005d50:	681b      	ldr	r3, [r3, #0]
 8005d52:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005d54:	1c5a      	adds	r2, r3, #1
 8005d56:	4b21      	ldr	r3, [pc, #132]	@ (8005ddc <Start_Measure+0x188>)
 8005d58:	681b      	ldr	r3, [r3, #0]
 8005d5a:	0852      	lsrs	r2, r2, #1
 8005d5c:	63da      	str	r2, [r3, #60]	@ 0x3c
	if(Acc_Init(&acc, config.samp_freq) != HAL_OK)
 8005d5e:	4b10      	ldr	r3, [pc, #64]	@ (8005da0 <Start_Measure+0x14c>)
 8005d60:	885b      	ldrh	r3, [r3, #2]
 8005d62:	4619      	mov	r1, r3
 8005d64:	481e      	ldr	r0, [pc, #120]	@ (8005de0 <Start_Measure+0x18c>)
 8005d66:	f7fd fa9f 	bl	80032a8 <Acc_Init>
 8005d6a:	4603      	mov	r3, r0
 8005d6c:	2b00      	cmp	r3, #0
 8005d6e:	d003      	beq.n	8005d78 <Start_Measure+0x124>
	{
		state = IDLE;
 8005d70:	4b1c      	ldr	r3, [pc, #112]	@ (8005de4 <Start_Measure+0x190>)
 8005d72:	2200      	movs	r2, #0
 8005d74:	701a      	strb	r2, [r3, #0]
		return;
 8005d76:	e011      	b.n	8005d9c <Start_Measure+0x148>
	}

	HAL_TIM_IC_Start_IT(VOLUME_TIMER, TIM_CHANNEL_1);
 8005d78:	2100      	movs	r1, #0
 8005d7a:	481b      	ldr	r0, [pc, #108]	@ (8005de8 <Start_Measure+0x194>)
 8005d7c:	f00d f880 	bl	8012e80 <HAL_TIM_IC_Start_IT>
	HAL_TIM_PWM_Start(ACC_TIMER, TIM_CHANNEL_3);
 8005d80:	2108      	movs	r1, #8
 8005d82:	4816      	ldr	r0, [pc, #88]	@ (8005ddc <Start_Measure+0x188>)
 8005d84:	f00c fe88 	bl	8012a98 <HAL_TIM_PWM_Start>
	HAL_ADC_Start_DMA(PRESSURE_ADC, (uint32_t*)&Pressure, PRESS_FULL_SAMPLES);
 8005d88:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 8005d8c:	4908      	ldr	r1, [pc, #32]	@ (8005db0 <Start_Measure+0x15c>)
 8005d8e:	4817      	ldr	r0, [pc, #92]	@ (8005dec <Start_Measure+0x198>)
 8005d90:	f005 fbd6 	bl	800b540 <HAL_ADC_Start_DMA>
	HAL_TIM_OC_Start_IT(ADC_TIMER, TIM_CHANNEL_3);
 8005d94:	2108      	movs	r1, #8
 8005d96:	480f      	ldr	r0, [pc, #60]	@ (8005dd4 <Start_Measure+0x180>)
 8005d98:	f00c fbee 	bl	8012578 <HAL_TIM_OC_Start_IT>
}
 8005d9c:	bd80      	pop	{r7, pc}
 8005d9e:	bf00      	nop
 8005da0:	200019ec 	.word	0x200019ec
 8005da4:	51eb851f 	.word	0x51eb851f
 8005da8:	20000840 	.word	0x20000840
 8005dac:	200019e8 	.word	0x200019e8
 8005db0:	20003b54 	.word	0x20003b54
 8005db4:	20003e74 	.word	0x20003e74
 8005db8:	20003e9c 	.word	0x20003e9c
 8005dbc:	20003b44 	.word	0x20003b44
 8005dc0:	20004424 	.word	0x20004424
 8005dc4:	20004bc4 	.word	0x20004bc4
 8005dc8:	20004bc8 	.word	0x20004bc8
 8005dcc:	20004bbc 	.word	0x20004bbc
 8005dd0:	20004bc0 	.word	0x20004bc0
 8005dd4:	20000650 	.word	0x20000650
 8005dd8:	20000268 	.word	0x20000268
 8005ddc:	20000604 	.word	0x20000604
 8005de0:	200051e8 	.word	0x200051e8
 8005de4:	2000083c 	.word	0x2000083c
 8005de8:	200005b8 	.word	0x200005b8
 8005dec:	20000318 	.word	0x20000318

08005df0 <Stop_Measure>:

/*-----FINE MISURA-----*/
void Stop_Measure(void)
{
 8005df0:	b580      	push	{r7, lr}
 8005df2:	af00      	add	r7, sp, #0
	HAL_ADC_Stop_DMA(PRESSURE_ADC);
 8005df4:	4808      	ldr	r0, [pc, #32]	@ (8005e18 <Stop_Measure+0x28>)
 8005df6:	f005 fc5f 	bl	800b6b8 <HAL_ADC_Stop_DMA>
	HAL_TIM_OC_Stop_IT(ADC_TIMER, TIM_CHANNEL_3);
 8005dfa:	2108      	movs	r1, #8
 8005dfc:	4807      	ldr	r0, [pc, #28]	@ (8005e1c <Stop_Measure+0x2c>)
 8005dfe:	f00c fd0f 	bl	8012820 <HAL_TIM_OC_Stop_IT>
	HAL_TIM_PWM_Stop(ACC_TIMER, TIM_CHANNEL_3);
 8005e02:	2108      	movs	r1, #8
 8005e04:	4806      	ldr	r0, [pc, #24]	@ (8005e20 <Stop_Measure+0x30>)
 8005e06:	f00c ff4d 	bl	8012ca4 <HAL_TIM_PWM_Stop>
	HAL_TIM_IC_Stop_IT(VOLUME_TIMER, TIM_CHANNEL_1);
 8005e0a:	2100      	movs	r1, #0
 8005e0c:	4805      	ldr	r0, [pc, #20]	@ (8005e24 <Stop_Measure+0x34>)
 8005e0e:	f00d f981 	bl	8013114 <HAL_TIM_IC_Stop_IT>
}
 8005e12:	bf00      	nop
 8005e14:	bd80      	pop	{r7, pc}
 8005e16:	bf00      	nop
 8005e18:	20000318 	.word	0x20000318
 8005e1c:	20000650 	.word	0x20000650
 8005e20:	20000604 	.word	0x20000604
 8005e24:	200005b8 	.word	0x200005b8

08005e28 <Warning_Detection>:

/*-----DETECTION COLPO D'ARIETE-----*/
void Warning_Detection(uint16_t* Data)
{
 8005e28:	b480      	push	{r7}
 8005e2a:	b085      	sub	sp, #20
 8005e2c:	af00      	add	r7, sp, #0
 8005e2e:	6078      	str	r0, [r7, #4]
	uint16_t max = Data[0];
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	881b      	ldrh	r3, [r3, #0]
 8005e34:	81fb      	strh	r3, [r7, #14]
	uint16_t min = Data[0];
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	881b      	ldrh	r3, [r3, #0]
 8005e3a:	81bb      	strh	r3, [r7, #12]

	for(int i = 1; i < PRESS_HALF_SAMPLES; i++)
 8005e3c:	2301      	movs	r3, #1
 8005e3e:	60bb      	str	r3, [r7, #8]
 8005e40:	e03a      	b.n	8005eb8 <Warning_Detection+0x90>
	{
		if(Data[i] > max)
 8005e42:	68bb      	ldr	r3, [r7, #8]
 8005e44:	005b      	lsls	r3, r3, #1
 8005e46:	687a      	ldr	r2, [r7, #4]
 8005e48:	4413      	add	r3, r2
 8005e4a:	881b      	ldrh	r3, [r3, #0]
 8005e4c:	89fa      	ldrh	r2, [r7, #14]
 8005e4e:	429a      	cmp	r2, r3
 8005e50:	d206      	bcs.n	8005e60 <Warning_Detection+0x38>
		{
			max = Data[i];
 8005e52:	68bb      	ldr	r3, [r7, #8]
 8005e54:	005b      	lsls	r3, r3, #1
 8005e56:	687a      	ldr	r2, [r7, #4]
 8005e58:	4413      	add	r3, r2
 8005e5a:	881b      	ldrh	r3, [r3, #0]
 8005e5c:	81fb      	strh	r3, [r7, #14]
 8005e5e:	e00d      	b.n	8005e7c <Warning_Detection+0x54>
		}
		else if(Data[i] < min)
 8005e60:	68bb      	ldr	r3, [r7, #8]
 8005e62:	005b      	lsls	r3, r3, #1
 8005e64:	687a      	ldr	r2, [r7, #4]
 8005e66:	4413      	add	r3, r2
 8005e68:	881b      	ldrh	r3, [r3, #0]
 8005e6a:	89ba      	ldrh	r2, [r7, #12]
 8005e6c:	429a      	cmp	r2, r3
 8005e6e:	d905      	bls.n	8005e7c <Warning_Detection+0x54>
		{
			min = Data[i];
 8005e70:	68bb      	ldr	r3, [r7, #8]
 8005e72:	005b      	lsls	r3, r3, #1
 8005e74:	687a      	ldr	r2, [r7, #4]
 8005e76:	4413      	add	r3, r2
 8005e78:	881b      	ldrh	r3, [r3, #0]
 8005e7a:	81bb      	strh	r3, [r7, #12]
		}

		if(Data[i] < sys.Low_th || Data[i] > sys.High_th)
 8005e7c:	68bb      	ldr	r3, [r7, #8]
 8005e7e:	005b      	lsls	r3, r3, #1
 8005e80:	687a      	ldr	r2, [r7, #4]
 8005e82:	4413      	add	r3, r2
 8005e84:	881a      	ldrh	r2, [r3, #0]
 8005e86:	4b17      	ldr	r3, [pc, #92]	@ (8005ee4 <Warning_Detection+0xbc>)
 8005e88:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005e8c:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005e8e:	429a      	cmp	r2, r3
 8005e90:	d30a      	bcc.n	8005ea8 <Warning_Detection+0x80>
 8005e92:	68bb      	ldr	r3, [r7, #8]
 8005e94:	005b      	lsls	r3, r3, #1
 8005e96:	687a      	ldr	r2, [r7, #4]
 8005e98:	4413      	add	r3, r2
 8005e9a:	881a      	ldrh	r2, [r3, #0]
 8005e9c:	4b11      	ldr	r3, [pc, #68]	@ (8005ee4 <Warning_Detection+0xbc>)
 8005e9e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005ea2:	8e1b      	ldrh	r3, [r3, #48]	@ 0x30
 8005ea4:	429a      	cmp	r2, r3
 8005ea6:	d904      	bls.n	8005eb2 <Warning_Detection+0x8a>
		{
			flags.Threshold_Detected= 1;
 8005ea8:	4a0f      	ldr	r2, [pc, #60]	@ (8005ee8 <Warning_Detection+0xc0>)
 8005eaa:	7813      	ldrb	r3, [r2, #0]
 8005eac:	f043 0310 	orr.w	r3, r3, #16
 8005eb0:	7013      	strb	r3, [r2, #0]
	for(int i = 1; i < PRESS_HALF_SAMPLES; i++)
 8005eb2:	68bb      	ldr	r3, [r7, #8]
 8005eb4:	3301      	adds	r3, #1
 8005eb6:	60bb      	str	r3, [r7, #8]
 8005eb8:	68bb      	ldr	r3, [r7, #8]
 8005eba:	2bc7      	cmp	r3, #199	@ 0xc7
 8005ebc:	ddc1      	ble.n	8005e42 <Warning_Detection+0x1a>
		}
	}

	if(max - min >= Hammer_Th)
 8005ebe:	89fa      	ldrh	r2, [r7, #14]
 8005ec0:	89bb      	ldrh	r3, [r7, #12]
 8005ec2:	1ad3      	subs	r3, r2, r3
 8005ec4:	4a09      	ldr	r2, [pc, #36]	@ (8005eec <Warning_Detection+0xc4>)
 8005ec6:	8812      	ldrh	r2, [r2, #0]
 8005ec8:	4293      	cmp	r3, r2
 8005eca:	db04      	blt.n	8005ed6 <Warning_Detection+0xae>
	{
		flags.Hammer_Detected = 1;
 8005ecc:	4a06      	ldr	r2, [pc, #24]	@ (8005ee8 <Warning_Detection+0xc0>)
 8005ece:	7813      	ldrb	r3, [r2, #0]
 8005ed0:	f043 0308 	orr.w	r3, r3, #8
 8005ed4:	7013      	strb	r3, [r2, #0]
	}

}
 8005ed6:	bf00      	nop
 8005ed8:	3714      	adds	r7, #20
 8005eda:	46bd      	mov	sp, r7
 8005edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ee0:	4770      	bx	lr
 8005ee2:	bf00      	nop
 8005ee4:	20000840 	.word	0x20000840
 8005ee8:	200019e8 	.word	0x200019e8
 8005eec:	20005184 	.word	0x20005184

08005ef0 <RAM_Save_Measure>:

/*-----SALVATAGGIO MISURA IN RAM-----*/
void RAM_Save_Measure(Compressed_Sample_Typedef* sample, uint8_t* compressed_data)
{
 8005ef0:	b580      	push	{r7, lr}
 8005ef2:	b086      	sub	sp, #24
 8005ef4:	af00      	add	r7, sp, #0
 8005ef6:	6078      	str	r0, [r7, #4]
 8005ef8:	6039      	str	r1, [r7, #0]
    uint32_t samples_size = sample->compressed_size.pressure_size +
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	881b      	ldrh	r3, [r3, #0]
 8005efe:	b29b      	uxth	r3, r3
 8005f00:	461a      	mov	r2, r3
                            sample->compressed_size.volume_size +
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	885b      	ldrh	r3, [r3, #2]
 8005f06:	b29b      	uxth	r3, r3
    uint32_t samples_size = sample->compressed_size.pressure_size +
 8005f08:	4413      	add	r3, r2
                            sample->compressed_size.acceleration_size;
 8005f0a:	687a      	ldr	r2, [r7, #4]
 8005f0c:	8892      	ldrh	r2, [r2, #4]
 8005f0e:	b292      	uxth	r2, r2
                            sample->compressed_size.volume_size +
 8005f10:	4413      	add	r3, r2
    uint32_t samples_size = sample->compressed_size.pressure_size +
 8005f12:	613b      	str	r3, [r7, #16]
    uint32_t total_size = METADATA_SIZE + samples_size;
 8005f14:	693b      	ldr	r3, [r7, #16]
 8005f16:	3306      	adds	r3, #6
 8005f18:	60fb      	str	r3, [r7, #12]
    uint32_t address = sys.Current_RAM_Base + sys.Current_RAM_Len;
 8005f1a:	4b23      	ldr	r3, [pc, #140]	@ (8005fa8 <RAM_Save_Measure+0xb8>)
 8005f1c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005f20:	f8d3 20c4 	ldr.w	r2, [r3, #196]	@ 0xc4
 8005f24:	4b20      	ldr	r3, [pc, #128]	@ (8005fa8 <RAM_Save_Measure+0xb8>)
 8005f26:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005f2a:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 8005f2e:	4413      	add	r3, r2
 8005f30:	617b      	str	r3, [r7, #20]

	if(Saved_Samples >= sys.RAM_Samples_Number) 
 8005f32:	4b1e      	ldr	r3, [pc, #120]	@ (8005fac <RAM_Save_Measure+0xbc>)
 8005f34:	881b      	ldrh	r3, [r3, #0]
 8005f36:	461a      	mov	r2, r3
 8005f38:	4b1b      	ldr	r3, [pc, #108]	@ (8005fa8 <RAM_Save_Measure+0xb8>)
 8005f3a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005f3e:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8005f42:	429a      	cmp	r2, r3
 8005f44:	d312      	bcc.n	8005f6c <RAM_Save_Measure+0x7c>
	{
		sys.Current_RAM_Len = Saved_Bytes;
 8005f46:	4b1a      	ldr	r3, [pc, #104]	@ (8005fb0 <RAM_Save_Measure+0xc0>)
 8005f48:	681b      	ldr	r3, [r3, #0]
 8005f4a:	4a17      	ldr	r2, [pc, #92]	@ (8005fa8 <RAM_Save_Measure+0xb8>)
 8005f4c:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8005f50:	f8c2 30c8 	str.w	r3, [r2, #200]	@ 0xc8
		Saved_Bytes = 0;
 8005f54:	4b16      	ldr	r3, [pc, #88]	@ (8005fb0 <RAM_Save_Measure+0xc0>)
 8005f56:	2200      	movs	r2, #0
 8005f58:	601a      	str	r2, [r3, #0]
		Saved_Samples = 0;
 8005f5a:	4b14      	ldr	r3, [pc, #80]	@ (8005fac <RAM_Save_Measure+0xbc>)
 8005f5c:	2200      	movs	r2, #0
 8005f5e:	801a      	strh	r2, [r3, #0]
		address = sys.Current_RAM_Base;
 8005f60:	4b11      	ldr	r3, [pc, #68]	@ (8005fa8 <RAM_Save_Measure+0xb8>)
 8005f62:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005f66:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 8005f6a:	617b      	str	r3, [r7, #20]
    }

	RAM_Write(address, METADATA_SIZE, (uint8_t*)sample);
 8005f6c:	687a      	ldr	r2, [r7, #4]
 8005f6e:	2106      	movs	r1, #6
 8005f70:	6978      	ldr	r0, [r7, #20]
 8005f72:	f001 f8a3 	bl	80070bc <RAM_Write>
    address += METADATA_SIZE;
 8005f76:	697b      	ldr	r3, [r7, #20]
 8005f78:	3306      	adds	r3, #6
 8005f7a:	617b      	str	r3, [r7, #20]

	RAM_Write(address, samples_size, compressed_data);
 8005f7c:	683a      	ldr	r2, [r7, #0]
 8005f7e:	6939      	ldr	r1, [r7, #16]
 8005f80:	6978      	ldr	r0, [r7, #20]
 8005f82:	f001 f89b 	bl	80070bc <RAM_Write>
    
    Saved_Bytes += total_size;
 8005f86:	4b0a      	ldr	r3, [pc, #40]	@ (8005fb0 <RAM_Save_Measure+0xc0>)
 8005f88:	681a      	ldr	r2, [r3, #0]
 8005f8a:	68fb      	ldr	r3, [r7, #12]
 8005f8c:	4413      	add	r3, r2
 8005f8e:	4a08      	ldr	r2, [pc, #32]	@ (8005fb0 <RAM_Save_Measure+0xc0>)
 8005f90:	6013      	str	r3, [r2, #0]
	Saved_Samples++;
 8005f92:	4b06      	ldr	r3, [pc, #24]	@ (8005fac <RAM_Save_Measure+0xbc>)
 8005f94:	881b      	ldrh	r3, [r3, #0]
 8005f96:	3301      	adds	r3, #1
 8005f98:	b29a      	uxth	r2, r3
 8005f9a:	4b04      	ldr	r3, [pc, #16]	@ (8005fac <RAM_Save_Measure+0xbc>)
 8005f9c:	801a      	strh	r2, [r3, #0]
}
 8005f9e:	bf00      	nop
 8005fa0:	3718      	adds	r7, #24
 8005fa2:	46bd      	mov	sp, r7
 8005fa4:	bd80      	pop	{r7, pc}
 8005fa6:	bf00      	nop
 8005fa8:	20000840 	.word	0x20000840
 8005fac:	20004bc8 	.word	0x20004bc8
 8005fb0:	20004bc4 	.word	0x20004bc4

08005fb4 <Send_Measure_Chunk>:

/*-----INVIO CHUNK MISURA-----*/
uint32_t Send_Measure_Chunk(uint32_t buffer_base, uint32_t buffer_len, uint32_t start_address)
{
 8005fb4:	b580      	push	{r7, lr}
 8005fb6:	f5ad 6d87 	sub.w	sp, sp, #1080	@ 0x438
 8005fba:	af00      	add	r7, sp, #0
 8005fbc:	f507 6387 	add.w	r3, r7, #1080	@ 0x438
 8005fc0:	f2a3 432c 	subw	r3, r3, #1068	@ 0x42c
 8005fc4:	6018      	str	r0, [r3, #0]
 8005fc6:	f507 6387 	add.w	r3, r7, #1080	@ 0x438
 8005fca:	f5a3 6386 	sub.w	r3, r3, #1072	@ 0x430
 8005fce:	6019      	str	r1, [r3, #0]
 8005fd0:	f507 6387 	add.w	r3, r7, #1080	@ 0x438
 8005fd4:	f2a3 4334 	subw	r3, r3, #1076	@ 0x434
 8005fd8:	601a      	str	r2, [r3, #0]
    uint32_t raw_fill = 0;
 8005fda:	2300      	movs	r3, #0
 8005fdc:	f8c7 3434 	str.w	r3, [r7, #1076]	@ 0x434
    uint8_t raw_buffer[1024]; // buffer temporaneo per i dati raw
    uint32_t address = start_address;
 8005fe0:	f507 6387 	add.w	r3, r7, #1080	@ 0x438
 8005fe4:	f2a3 4334 	subw	r3, r3, #1076	@ 0x434
 8005fe8:	681b      	ldr	r3, [r3, #0]
 8005fea:	f8c7 3430 	str.w	r3, [r7, #1072]	@ 0x430
    uint32_t end_address = start_address;
 8005fee:	f507 6387 	add.w	r3, r7, #1080	@ 0x438
 8005ff2:	f2a3 4334 	subw	r3, r3, #1076	@ 0x434
 8005ff6:	681b      	ldr	r3, [r3, #0]
 8005ff8:	f8c7 3428 	str.w	r3, [r7, #1064]	@ 0x428
    uint8_t first_loop = 1;
 8005ffc:	2301      	movs	r3, #1
 8005ffe:	f887 342f 	strb.w	r3, [r7, #1071]	@ 0x42f

    if (buffer_len == 0) 
 8006002:	f507 6387 	add.w	r3, r7, #1080	@ 0x438
 8006006:	f5a3 6386 	sub.w	r3, r3, #1072	@ 0x430
 800600a:	681b      	ldr	r3, [r3, #0]
 800600c:	2b00      	cmp	r3, #0
 800600e:	d101      	bne.n	8006014 <Send_Measure_Chunk+0x60>
    {
        return 0;
 8006010:	2300      	movs	r3, #0
 8006012:	e0f4      	b.n	80061fe <Send_Measure_Chunk+0x24a>
    }

    do {
        if (address >= buffer_base + buffer_len) 
 8006014:	f507 6387 	add.w	r3, r7, #1080	@ 0x438
 8006018:	f2a3 422c 	subw	r2, r3, #1068	@ 0x42c
 800601c:	f507 6387 	add.w	r3, r7, #1080	@ 0x438
 8006020:	f5a3 6386 	sub.w	r3, r3, #1072	@ 0x430
 8006024:	6812      	ldr	r2, [r2, #0]
 8006026:	681b      	ldr	r3, [r3, #0]
 8006028:	4413      	add	r3, r2
 800602a:	f8d7 2430 	ldr.w	r2, [r7, #1072]	@ 0x430
 800602e:	429a      	cmp	r2, r3
 8006030:	d306      	bcc.n	8006040 <Send_Measure_Chunk+0x8c>
        {
            address = buffer_base;
 8006032:	f507 6387 	add.w	r3, r7, #1080	@ 0x438
 8006036:	f2a3 432c 	subw	r3, r3, #1068	@ 0x42c
 800603a:	681b      	ldr	r3, [r3, #0]
 800603c:	f8c7 3430 	str.w	r3, [r7, #1072]	@ 0x430
        }

        if ((buffer_base + buffer_len - address) < METADATA_SIZE && address < buffer_base + buffer_len) 
 8006040:	f507 6387 	add.w	r3, r7, #1080	@ 0x438
 8006044:	f2a3 422c 	subw	r2, r3, #1068	@ 0x42c
 8006048:	f507 6387 	add.w	r3, r7, #1080	@ 0x438
 800604c:	f5a3 6386 	sub.w	r3, r3, #1072	@ 0x430
 8006050:	6812      	ldr	r2, [r2, #0]
 8006052:	681b      	ldr	r3, [r3, #0]
 8006054:	441a      	add	r2, r3
 8006056:	f8d7 3430 	ldr.w	r3, [r7, #1072]	@ 0x430
 800605a:	1ad3      	subs	r3, r2, r3
 800605c:	2b05      	cmp	r3, #5
 800605e:	d80f      	bhi.n	8006080 <Send_Measure_Chunk+0xcc>
 8006060:	f507 6387 	add.w	r3, r7, #1080	@ 0x438
 8006064:	f2a3 422c 	subw	r2, r3, #1068	@ 0x42c
 8006068:	f507 6387 	add.w	r3, r7, #1080	@ 0x438
 800606c:	f5a3 6386 	sub.w	r3, r3, #1072	@ 0x430
 8006070:	6812      	ldr	r2, [r2, #0]
 8006072:	681b      	ldr	r3, [r3, #0]
 8006074:	4413      	add	r3, r2
 8006076:	f8d7 2430 	ldr.w	r2, [r7, #1072]	@ 0x430
 800607a:	429a      	cmp	r2, r3
 800607c:	f0c0 8099 	bcc.w	80061b2 <Send_Measure_Chunk+0x1fe>
        {
            break;
        }
        if ((raw_fill + METADATA_SIZE) > sizeof(raw_buffer)) 
 8006080:	f8d7 3434 	ldr.w	r3, [r7, #1076]	@ 0x434
 8006084:	3306      	adds	r3, #6
 8006086:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800608a:	f200 8094 	bhi.w	80061b6 <Send_Measure_Chunk+0x202>
        {
            break;
        }

        Compressed_Sample_Typedef sample_header;
        RAM_Read(address, METADATA_SIZE, (uint8_t*)&sample_header);
 800608e:	f107 0314 	add.w	r3, r7, #20
 8006092:	461a      	mov	r2, r3
 8006094:	2106      	movs	r1, #6
 8006096:	f8d7 0430 	ldr.w	r0, [r7, #1072]	@ 0x430
 800609a:	f001 f820 	bl	80070de <RAM_Read>

        uint32_t sample_size = sample_header.compressed_size.pressure_size +
 800609e:	f507 6387 	add.w	r3, r7, #1080	@ 0x438
 80060a2:	f2a3 4324 	subw	r3, r3, #1060	@ 0x424
 80060a6:	881b      	ldrh	r3, [r3, #0]
 80060a8:	461a      	mov	r2, r3
                               sample_header.compressed_size.volume_size +
 80060aa:	f507 6387 	add.w	r3, r7, #1080	@ 0x438
 80060ae:	f2a3 4324 	subw	r3, r3, #1060	@ 0x424
 80060b2:	885b      	ldrh	r3, [r3, #2]
        uint32_t sample_size = sample_header.compressed_size.pressure_size +
 80060b4:	4413      	add	r3, r2
                               sample_header.compressed_size.acceleration_size;
 80060b6:	f507 6287 	add.w	r2, r7, #1080	@ 0x438
 80060ba:	f2a2 4224 	subw	r2, r2, #1060	@ 0x424
 80060be:	8892      	ldrh	r2, [r2, #4]
                               sample_header.compressed_size.volume_size +
 80060c0:	4413      	add	r3, r2
        uint32_t sample_size = sample_header.compressed_size.pressure_size +
 80060c2:	f8c7 3424 	str.w	r3, [r7, #1060]	@ 0x424
        uint32_t sample_total_size = METADATA_SIZE + sample_size;
 80060c6:	f8d7 3424 	ldr.w	r3, [r7, #1060]	@ 0x424
 80060ca:	3306      	adds	r3, #6
 80060cc:	f8c7 3420 	str.w	r3, [r7, #1056]	@ 0x420

        if ((raw_fill + sample_total_size) > sizeof(raw_buffer)) 
 80060d0:	f8d7 2434 	ldr.w	r2, [r7, #1076]	@ 0x434
 80060d4:	f8d7 3420 	ldr.w	r3, [r7, #1056]	@ 0x420
 80060d8:	4413      	add	r3, r2
 80060da:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80060de:	d86c      	bhi.n	80061ba <Send_Measure_Chunk+0x206>
        {
            break;
        }

        RAM_Read(address, METADATA_SIZE, raw_buffer + raw_fill);
 80060e0:	f107 021c 	add.w	r2, r7, #28
 80060e4:	f8d7 3434 	ldr.w	r3, [r7, #1076]	@ 0x434
 80060e8:	4413      	add	r3, r2
 80060ea:	461a      	mov	r2, r3
 80060ec:	2106      	movs	r1, #6
 80060ee:	f8d7 0430 	ldr.w	r0, [r7, #1072]	@ 0x430
 80060f2:	f000 fff4 	bl	80070de <RAM_Read>
        raw_fill += METADATA_SIZE;
 80060f6:	f8d7 3434 	ldr.w	r3, [r7, #1076]	@ 0x434
 80060fa:	3306      	adds	r3, #6
 80060fc:	f8c7 3434 	str.w	r3, [r7, #1076]	@ 0x434
        address += METADATA_SIZE;
 8006100:	f8d7 3430 	ldr.w	r3, [r7, #1072]	@ 0x430
 8006104:	3306      	adds	r3, #6
 8006106:	f8c7 3430 	str.w	r3, [r7, #1072]	@ 0x430
        if (address >= buffer_base + buffer_len) address = buffer_base;
 800610a:	f507 6387 	add.w	r3, r7, #1080	@ 0x438
 800610e:	f2a3 422c 	subw	r2, r3, #1068	@ 0x42c
 8006112:	f507 6387 	add.w	r3, r7, #1080	@ 0x438
 8006116:	f5a3 6386 	sub.w	r3, r3, #1072	@ 0x430
 800611a:	6812      	ldr	r2, [r2, #0]
 800611c:	681b      	ldr	r3, [r3, #0]
 800611e:	4413      	add	r3, r2
 8006120:	f8d7 2430 	ldr.w	r2, [r7, #1072]	@ 0x430
 8006124:	429a      	cmp	r2, r3
 8006126:	d306      	bcc.n	8006136 <Send_Measure_Chunk+0x182>
 8006128:	f507 6387 	add.w	r3, r7, #1080	@ 0x438
 800612c:	f2a3 432c 	subw	r3, r3, #1068	@ 0x42c
 8006130:	681b      	ldr	r3, [r3, #0]
 8006132:	f8c7 3430 	str.w	r3, [r7, #1072]	@ 0x430

        RAM_Read(address, sample_size, raw_buffer + raw_fill);
 8006136:	f107 021c 	add.w	r2, r7, #28
 800613a:	f8d7 3434 	ldr.w	r3, [r7, #1076]	@ 0x434
 800613e:	4413      	add	r3, r2
 8006140:	461a      	mov	r2, r3
 8006142:	f8d7 1424 	ldr.w	r1, [r7, #1060]	@ 0x424
 8006146:	f8d7 0430 	ldr.w	r0, [r7, #1072]	@ 0x430
 800614a:	f000 ffc8 	bl	80070de <RAM_Read>
        raw_fill += sample_size;
 800614e:	f8d7 2434 	ldr.w	r2, [r7, #1076]	@ 0x434
 8006152:	f8d7 3424 	ldr.w	r3, [r7, #1060]	@ 0x424
 8006156:	4413      	add	r3, r2
 8006158:	f8c7 3434 	str.w	r3, [r7, #1076]	@ 0x434
        address += sample_size;
 800615c:	f8d7 2430 	ldr.w	r2, [r7, #1072]	@ 0x430
 8006160:	f8d7 3424 	ldr.w	r3, [r7, #1060]	@ 0x424
 8006164:	4413      	add	r3, r2
 8006166:	f8c7 3430 	str.w	r3, [r7, #1072]	@ 0x430
        if (address >= buffer_base + buffer_len) address = buffer_base;
 800616a:	f507 6387 	add.w	r3, r7, #1080	@ 0x438
 800616e:	f2a3 422c 	subw	r2, r3, #1068	@ 0x42c
 8006172:	f507 6387 	add.w	r3, r7, #1080	@ 0x438
 8006176:	f5a3 6386 	sub.w	r3, r3, #1072	@ 0x430
 800617a:	6812      	ldr	r2, [r2, #0]
 800617c:	681b      	ldr	r3, [r3, #0]
 800617e:	4413      	add	r3, r2
 8006180:	f8d7 2430 	ldr.w	r2, [r7, #1072]	@ 0x430
 8006184:	429a      	cmp	r2, r3
 8006186:	d306      	bcc.n	8006196 <Send_Measure_Chunk+0x1e2>
 8006188:	f507 6387 	add.w	r3, r7, #1080	@ 0x438
 800618c:	f2a3 432c 	subw	r3, r3, #1068	@ 0x42c
 8006190:	681b      	ldr	r3, [r3, #0]
 8006192:	f8c7 3430 	str.w	r3, [r7, #1072]	@ 0x430

        if (address == end_address && !first_loop) 
 8006196:	f8d7 2430 	ldr.w	r2, [r7, #1072]	@ 0x430
 800619a:	f8d7 3428 	ldr.w	r3, [r7, #1064]	@ 0x428
 800619e:	429a      	cmp	r2, r3
 80061a0:	d103      	bne.n	80061aa <Send_Measure_Chunk+0x1f6>
 80061a2:	f897 342f 	ldrb.w	r3, [r7, #1071]	@ 0x42f
 80061a6:	2b00      	cmp	r3, #0
 80061a8:	d009      	beq.n	80061be <Send_Measure_Chunk+0x20a>
        {
            break;
        }
        first_loop = 0;
 80061aa:	2300      	movs	r3, #0
 80061ac:	f887 342f 	strb.w	r3, [r7, #1071]	@ 0x42f
    do {
 80061b0:	e730      	b.n	8006014 <Send_Measure_Chunk+0x60>
            break;
 80061b2:	bf00      	nop
 80061b4:	e004      	b.n	80061c0 <Send_Measure_Chunk+0x20c>
            break;
 80061b6:	bf00      	nop
 80061b8:	e002      	b.n	80061c0 <Send_Measure_Chunk+0x20c>
            break;
 80061ba:	bf00      	nop
 80061bc:	e000      	b.n	80061c0 <Send_Measure_Chunk+0x20c>
            break;
 80061be:	bf00      	nop
    } while (1);

    if (raw_fill > 0) 
 80061c0:	f8d7 3434 	ldr.w	r3, [r7, #1076]	@ 0x434
 80061c4:	2b00      	cmp	r3, #0
 80061c6:	d010      	beq.n	80061ea <Send_Measure_Chunk+0x236>
    {
        // Codifica in base64
        size_t b64_len = Base64_Encode(raw_buffer, raw_fill, (char*)tcp_chunk, sizeof(tcp_chunk));
 80061c8:	f107 001c 	add.w	r0, r7, #28
 80061cc:	f240 53b4 	movw	r3, #1460	@ 0x5b4
 80061d0:	4a0d      	ldr	r2, [pc, #52]	@ (8006208 <Send_Measure_Chunk+0x254>)
 80061d2:	f8d7 1434 	ldr.w	r1, [r7, #1076]	@ 0x434
 80061d6:	f7fc f8c3 	bl	8002360 <Base64_Encode>
 80061da:	f8c7 041c 	str.w	r0, [r7, #1052]	@ 0x41c
        SIM_Send_TCP_Chunk_DMA(b64_len);
 80061de:	f8d7 341c 	ldr.w	r3, [r7, #1052]	@ 0x41c
 80061e2:	b29b      	uxth	r3, r3
 80061e4:	4618      	mov	r0, r3
 80061e6:	f7fb fef1 	bl	8001fcc <SIM_Send_TCP_Chunk_DMA>
    }

    if (address == end_address) 
 80061ea:	f8d7 2430 	ldr.w	r2, [r7, #1072]	@ 0x430
 80061ee:	f8d7 3428 	ldr.w	r3, [r7, #1064]	@ 0x428
 80061f2:	429a      	cmp	r2, r3
 80061f4:	d101      	bne.n	80061fa <Send_Measure_Chunk+0x246>
    {
        return 0;
 80061f6:	2300      	movs	r3, #0
 80061f8:	e001      	b.n	80061fe <Send_Measure_Chunk+0x24a>
    }
    return address;
 80061fa:	f8d7 3430 	ldr.w	r3, [r7, #1072]	@ 0x430
}
 80061fe:	4618      	mov	r0, r3
 8006200:	f507 6787 	add.w	r7, r7, #1080	@ 0x438
 8006204:	46bd      	mov	sp, r7
 8006206:	bd80      	pop	{r7, pc}
 8006208:	20004bd0 	.word	0x20004bd0

0800620c <Compress_Sample>:

/*-----COMPRESSIONE DATI-----*/
Compressed_Sizes_Typedef Compress_Sample(uint8_t *input, uint16_t input_len, uint8_t *output)
{
 800620c:	b580      	push	{r7, lr}
 800620e:	b09a      	sub	sp, #104	@ 0x68
 8006210:	af00      	add	r7, sp, #0
 8006212:	60f8      	str	r0, [r7, #12]
 8006214:	60b9      	str	r1, [r7, #8]
 8006216:	603b      	str	r3, [r7, #0]
 8006218:	4613      	mov	r3, r2
 800621a:	80fb      	strh	r3, [r7, #6]
	uint16_t out_idx = 0;
 800621c:	2300      	movs	r3, #0
 800621e:	f8a7 3066 	strh.w	r3, [r7, #102]	@ 0x66
	uint8_t packed_byte = 0;
 8006222:	2300      	movs	r3, #0
 8006224:	f887 3065 	strb.w	r3, [r7, #101]	@ 0x65
	Compressed_Sizes_Typedef sizes = {0, 0, 0};
 8006228:	2300      	movs	r3, #0
 800622a:	843b      	strh	r3, [r7, #32]
 800622c:	2300      	movs	r3, #0
 800622e:	847b      	strh	r3, [r7, #34]	@ 0x22
 8006230:	2300      	movs	r3, #0
 8006232:	84bb      	strh	r3, [r7, #36]	@ 0x24

    AdpcmState_Typedef press_state = {0, 0};
 8006234:	2300      	movs	r3, #0
 8006236:	83bb      	strh	r3, [r7, #28]
 8006238:	2300      	movs	r3, #0
 800623a:	77bb      	strb	r3, [r7, #30]
    AdpcmState_Typedef acc_x_state = {0, 0}, acc_y_state = {0, 0}, acc_z_state = {0, 0};
 800623c:	2300      	movs	r3, #0
 800623e:	833b      	strh	r3, [r7, #24]
 8006240:	2300      	movs	r3, #0
 8006242:	76bb      	strb	r3, [r7, #26]
 8006244:	2300      	movs	r3, #0
 8006246:	82bb      	strh	r3, [r7, #20]
 8006248:	2300      	movs	r3, #0
 800624a:	75bb      	strb	r3, [r7, #22]
 800624c:	2300      	movs	r3, #0
 800624e:	823b      	strh	r3, [r7, #16]
 8006250:	2300      	movs	r3, #0
 8006252:	74bb      	strb	r3, [r7, #18]

	// --- 1. Pressione ---
	uint16_t *adc = (uint16_t*)input;
 8006254:	68bb      	ldr	r3, [r7, #8]
 8006256:	64bb      	str	r3, [r7, #72]	@ 0x48
	uint16_t pressure_start = out_idx;
 8006258:	f8b7 3066 	ldrh.w	r3, [r7, #102]	@ 0x66
 800625c:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46

	output[out_idx++] = adc[0] & 0xFF;
 8006260:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006262:	881a      	ldrh	r2, [r3, #0]
 8006264:	f8b7 3066 	ldrh.w	r3, [r7, #102]	@ 0x66
 8006268:	1c59      	adds	r1, r3, #1
 800626a:	f8a7 1066 	strh.w	r1, [r7, #102]	@ 0x66
 800626e:	4619      	mov	r1, r3
 8006270:	683b      	ldr	r3, [r7, #0]
 8006272:	440b      	add	r3, r1
 8006274:	b2d2      	uxtb	r2, r2
 8006276:	701a      	strb	r2, [r3, #0]
	output[out_idx++] = adc[0] >> 8;
 8006278:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800627a:	881b      	ldrh	r3, [r3, #0]
 800627c:	0a1b      	lsrs	r3, r3, #8
 800627e:	b29a      	uxth	r2, r3
 8006280:	f8b7 3066 	ldrh.w	r3, [r7, #102]	@ 0x66
 8006284:	1c59      	adds	r1, r3, #1
 8006286:	f8a7 1066 	strh.w	r1, [r7, #102]	@ 0x66
 800628a:	4619      	mov	r1, r3
 800628c:	683b      	ldr	r3, [r7, #0]
 800628e:	440b      	add	r3, r1
 8006290:	b2d2      	uxtb	r2, r2
 8006292:	701a      	strb	r2, [r3, #0]
	press_state.previous_value = adc[0];
 8006294:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006296:	881b      	ldrh	r3, [r3, #0]
 8006298:	b21b      	sxth	r3, r3
 800629a:	83bb      	strh	r3, [r7, #28]
	for (int i = 1; i < PRESS_HALF_SAMPLES; i++) 
 800629c:	2301      	movs	r3, #1
 800629e:	663b      	str	r3, [r7, #96]	@ 0x60
 80062a0:	e033      	b.n	800630a <Compress_Sample+0xfe>
	{
		uint8_t nibble = ADPCM_Compression(adc[i], &press_state, step_size_table_12bit);
 80062a2:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80062a4:	005b      	lsls	r3, r3, #1
 80062a6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80062a8:	4413      	add	r3, r2
 80062aa:	881b      	ldrh	r3, [r3, #0]
 80062ac:	b21b      	sxth	r3, r3
 80062ae:	f107 011c 	add.w	r1, r7, #28
 80062b2:	4a99      	ldr	r2, [pc, #612]	@ (8006518 <Compress_Sample+0x30c>)
 80062b4:	4618      	mov	r0, r3
 80062b6:	f000 f9cf 	bl	8006658 <ADPCM_Compression>
 80062ba:	4603      	mov	r3, r0
 80062bc:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
		if (i % 2 != 0) 
 80062c0:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80062c2:	f003 0301 	and.w	r3, r3, #1
 80062c6:	2b00      	cmp	r3, #0
 80062c8:	d004      	beq.n	80062d4 <Compress_Sample+0xc8>
		{
			packed_byte = nibble;
 80062ca:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80062ce:	f887 3065 	strb.w	r3, [r7, #101]	@ 0x65
 80062d2:	e017      	b.n	8006304 <Compress_Sample+0xf8>
		} else 
		{
			packed_byte |= (nibble << 4);
 80062d4:	f997 3026 	ldrsb.w	r3, [r7, #38]	@ 0x26
 80062d8:	011b      	lsls	r3, r3, #4
 80062da:	b25a      	sxtb	r2, r3
 80062dc:	f997 3065 	ldrsb.w	r3, [r7, #101]	@ 0x65
 80062e0:	4313      	orrs	r3, r2
 80062e2:	b25b      	sxtb	r3, r3
 80062e4:	f887 3065 	strb.w	r3, [r7, #101]	@ 0x65
			output[out_idx++] = packed_byte;
 80062e8:	f8b7 3066 	ldrh.w	r3, [r7, #102]	@ 0x66
 80062ec:	1c5a      	adds	r2, r3, #1
 80062ee:	f8a7 2066 	strh.w	r2, [r7, #102]	@ 0x66
 80062f2:	461a      	mov	r2, r3
 80062f4:	683b      	ldr	r3, [r7, #0]
 80062f6:	4413      	add	r3, r2
 80062f8:	f897 2065 	ldrb.w	r2, [r7, #101]	@ 0x65
 80062fc:	701a      	strb	r2, [r3, #0]
			packed_byte = 0;
 80062fe:	2300      	movs	r3, #0
 8006300:	f887 3065 	strb.w	r3, [r7, #101]	@ 0x65
	for (int i = 1; i < PRESS_HALF_SAMPLES; i++) 
 8006304:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8006306:	3301      	adds	r3, #1
 8006308:	663b      	str	r3, [r7, #96]	@ 0x60
 800630a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800630c:	2bc7      	cmp	r3, #199	@ 0xc7
 800630e:	ddc8      	ble.n	80062a2 <Compress_Sample+0x96>
	if (PRESS_HALF_SAMPLES % 2 != 0) 
	{
		output[out_idx++] = packed_byte;
		packed_byte = 0;
	}
	sizes.pressure_size = out_idx - pressure_start;
 8006310:	f8b7 2066 	ldrh.w	r2, [r7, #102]	@ 0x66
 8006314:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8006318:	1ad3      	subs	r3, r2, r3
 800631a:	b29b      	uxth	r3, r3
 800631c:	843b      	strh	r3, [r7, #32]

	// --- 2. Flusso (RLE) ---
	uint32_t *counter = (uint32_t*)(input + PRESS_HALF_LEN);
 800631e:	68bb      	ldr	r3, [r7, #8]
 8006320:	f503 73c8 	add.w	r3, r3, #400	@ 0x190
 8006324:	643b      	str	r3, [r7, #64]	@ 0x40
	uint16_t volume_start = out_idx;
 8006326:	f8b7 3066 	ldrh.w	r3, [r7, #102]	@ 0x66
 800632a:	87fb      	strh	r3, [r7, #62]	@ 0x3e

	uint32_t prev = counter[0];
 800632c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800632e:	681b      	ldr	r3, [r3, #0]
 8006330:	65fb      	str	r3, [r7, #92]	@ 0x5c
	uint16_t run_len = 1;
 8006332:	2301      	movs	r3, #1
 8006334:	f8a7 305a 	strh.w	r3, [r7, #90]	@ 0x5a

	for (int i = 1; i < MAX_VOLUME_SAMPLES; i++) {
 8006338:	2301      	movs	r3, #1
 800633a:	657b      	str	r3, [r7, #84]	@ 0x54
 800633c:	e058      	b.n	80063f0 <Compress_Sample+0x1e4>
		if (counter[i] == prev && run_len < 255) {
 800633e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006340:	009b      	lsls	r3, r3, #2
 8006342:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8006344:	4413      	add	r3, r2
 8006346:	681b      	ldr	r3, [r3, #0]
 8006348:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800634a:	429a      	cmp	r2, r3
 800634c:	d109      	bne.n	8006362 <Compress_Sample+0x156>
 800634e:	f8b7 305a 	ldrh.w	r3, [r7, #90]	@ 0x5a
 8006352:	2bfe      	cmp	r3, #254	@ 0xfe
 8006354:	d805      	bhi.n	8006362 <Compress_Sample+0x156>
			run_len++;
 8006356:	f8b7 305a 	ldrh.w	r3, [r7, #90]	@ 0x5a
 800635a:	3301      	adds	r3, #1
 800635c:	f8a7 305a 	strh.w	r3, [r7, #90]	@ 0x5a
 8006360:	e043      	b.n	80063ea <Compress_Sample+0x1de>
		} else {
			// Scrivi valore e run_len (4 byte valore + 1 byte run_len)
			output[out_idx++] = prev & 0xFF;
 8006362:	f8b7 3066 	ldrh.w	r3, [r7, #102]	@ 0x66
 8006366:	1c5a      	adds	r2, r3, #1
 8006368:	f8a7 2066 	strh.w	r2, [r7, #102]	@ 0x66
 800636c:	461a      	mov	r2, r3
 800636e:	683b      	ldr	r3, [r7, #0]
 8006370:	4413      	add	r3, r2
 8006372:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8006374:	b2d2      	uxtb	r2, r2
 8006376:	701a      	strb	r2, [r3, #0]
			output[out_idx++] = (prev >> 8) & 0xFF;
 8006378:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800637a:	0a1a      	lsrs	r2, r3, #8
 800637c:	f8b7 3066 	ldrh.w	r3, [r7, #102]	@ 0x66
 8006380:	1c59      	adds	r1, r3, #1
 8006382:	f8a7 1066 	strh.w	r1, [r7, #102]	@ 0x66
 8006386:	4619      	mov	r1, r3
 8006388:	683b      	ldr	r3, [r7, #0]
 800638a:	440b      	add	r3, r1
 800638c:	b2d2      	uxtb	r2, r2
 800638e:	701a      	strb	r2, [r3, #0]
			output[out_idx++] = (prev >> 16) & 0xFF;
 8006390:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006392:	0c1a      	lsrs	r2, r3, #16
 8006394:	f8b7 3066 	ldrh.w	r3, [r7, #102]	@ 0x66
 8006398:	1c59      	adds	r1, r3, #1
 800639a:	f8a7 1066 	strh.w	r1, [r7, #102]	@ 0x66
 800639e:	4619      	mov	r1, r3
 80063a0:	683b      	ldr	r3, [r7, #0]
 80063a2:	440b      	add	r3, r1
 80063a4:	b2d2      	uxtb	r2, r2
 80063a6:	701a      	strb	r2, [r3, #0]
			output[out_idx++] = (prev >> 24) & 0xFF;
 80063a8:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80063aa:	0e1a      	lsrs	r2, r3, #24
 80063ac:	f8b7 3066 	ldrh.w	r3, [r7, #102]	@ 0x66
 80063b0:	1c59      	adds	r1, r3, #1
 80063b2:	f8a7 1066 	strh.w	r1, [r7, #102]	@ 0x66
 80063b6:	4619      	mov	r1, r3
 80063b8:	683b      	ldr	r3, [r7, #0]
 80063ba:	440b      	add	r3, r1
 80063bc:	b2d2      	uxtb	r2, r2
 80063be:	701a      	strb	r2, [r3, #0]
			output[out_idx++] = run_len;
 80063c0:	f8b7 3066 	ldrh.w	r3, [r7, #102]	@ 0x66
 80063c4:	1c5a      	adds	r2, r3, #1
 80063c6:	f8a7 2066 	strh.w	r2, [r7, #102]	@ 0x66
 80063ca:	461a      	mov	r2, r3
 80063cc:	683b      	ldr	r3, [r7, #0]
 80063ce:	4413      	add	r3, r2
 80063d0:	f8b7 205a 	ldrh.w	r2, [r7, #90]	@ 0x5a
 80063d4:	b2d2      	uxtb	r2, r2
 80063d6:	701a      	strb	r2, [r3, #0]
			prev = counter[i];
 80063d8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80063da:	009b      	lsls	r3, r3, #2
 80063dc:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80063de:	4413      	add	r3, r2
 80063e0:	681b      	ldr	r3, [r3, #0]
 80063e2:	65fb      	str	r3, [r7, #92]	@ 0x5c
			run_len = 1;
 80063e4:	2301      	movs	r3, #1
 80063e6:	f8a7 305a 	strh.w	r3, [r7, #90]	@ 0x5a
	for (int i = 1; i < MAX_VOLUME_SAMPLES; i++) {
 80063ea:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80063ec:	3301      	adds	r3, #1
 80063ee:	657b      	str	r3, [r7, #84]	@ 0x54
 80063f0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80063f2:	2b09      	cmp	r3, #9
 80063f4:	dda3      	ble.n	800633e <Compress_Sample+0x132>
		}
	}
	// Scrivi l'ultimo run
	output[out_idx++] = prev & 0xFF;
 80063f6:	f8b7 3066 	ldrh.w	r3, [r7, #102]	@ 0x66
 80063fa:	1c5a      	adds	r2, r3, #1
 80063fc:	f8a7 2066 	strh.w	r2, [r7, #102]	@ 0x66
 8006400:	461a      	mov	r2, r3
 8006402:	683b      	ldr	r3, [r7, #0]
 8006404:	4413      	add	r3, r2
 8006406:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8006408:	b2d2      	uxtb	r2, r2
 800640a:	701a      	strb	r2, [r3, #0]
	output[out_idx++] = (prev >> 8) & 0xFF;
 800640c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800640e:	0a1a      	lsrs	r2, r3, #8
 8006410:	f8b7 3066 	ldrh.w	r3, [r7, #102]	@ 0x66
 8006414:	1c59      	adds	r1, r3, #1
 8006416:	f8a7 1066 	strh.w	r1, [r7, #102]	@ 0x66
 800641a:	4619      	mov	r1, r3
 800641c:	683b      	ldr	r3, [r7, #0]
 800641e:	440b      	add	r3, r1
 8006420:	b2d2      	uxtb	r2, r2
 8006422:	701a      	strb	r2, [r3, #0]
	output[out_idx++] = (prev >> 16) & 0xFF;
 8006424:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006426:	0c1a      	lsrs	r2, r3, #16
 8006428:	f8b7 3066 	ldrh.w	r3, [r7, #102]	@ 0x66
 800642c:	1c59      	adds	r1, r3, #1
 800642e:	f8a7 1066 	strh.w	r1, [r7, #102]	@ 0x66
 8006432:	4619      	mov	r1, r3
 8006434:	683b      	ldr	r3, [r7, #0]
 8006436:	440b      	add	r3, r1
 8006438:	b2d2      	uxtb	r2, r2
 800643a:	701a      	strb	r2, [r3, #0]
	output[out_idx++] = (prev >> 24) & 0xFF;
 800643c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800643e:	0e1a      	lsrs	r2, r3, #24
 8006440:	f8b7 3066 	ldrh.w	r3, [r7, #102]	@ 0x66
 8006444:	1c59      	adds	r1, r3, #1
 8006446:	f8a7 1066 	strh.w	r1, [r7, #102]	@ 0x66
 800644a:	4619      	mov	r1, r3
 800644c:	683b      	ldr	r3, [r7, #0]
 800644e:	440b      	add	r3, r1
 8006450:	b2d2      	uxtb	r2, r2
 8006452:	701a      	strb	r2, [r3, #0]
	output[out_idx++] = run_len;
 8006454:	f8b7 3066 	ldrh.w	r3, [r7, #102]	@ 0x66
 8006458:	1c5a      	adds	r2, r3, #1
 800645a:	f8a7 2066 	strh.w	r2, [r7, #102]	@ 0x66
 800645e:	461a      	mov	r2, r3
 8006460:	683b      	ldr	r3, [r7, #0]
 8006462:	4413      	add	r3, r2
 8006464:	f8b7 205a 	ldrh.w	r2, [r7, #90]	@ 0x5a
 8006468:	b2d2      	uxtb	r2, r2
 800646a:	701a      	strb	r2, [r3, #0]

	sizes.volume_size = out_idx - volume_start;
 800646c:	f8b7 2066 	ldrh.w	r2, [r7, #102]	@ 0x66
 8006470:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8006472:	1ad3      	subs	r3, r2, r3
 8006474:	b29b      	uxth	r3, r3
 8006476:	847b      	strh	r3, [r7, #34]	@ 0x22

	// --- 3. Accelerometro (3 canali separati) ---
	uint8_t *accel = input + PRESS_HALF_LEN + MAX_VOLUME_LEN;
 8006478:	68bb      	ldr	r3, [r7, #8]
 800647a:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 800647e:	63bb      	str	r3, [r7, #56]	@ 0x38
	uint16_t accel_start = out_idx;
 8006480:	f8b7 3066 	ldrh.w	r3, [r7, #102]	@ 0x66
 8006484:	86fb      	strh	r3, [r7, #54]	@ 0x36

	uint16_t x0 = accel[1] | (accel[2] << 8);
 8006486:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006488:	3301      	adds	r3, #1
 800648a:	781b      	ldrb	r3, [r3, #0]
 800648c:	b21a      	sxth	r2, r3
 800648e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006490:	3302      	adds	r3, #2
 8006492:	781b      	ldrb	r3, [r3, #0]
 8006494:	b21b      	sxth	r3, r3
 8006496:	021b      	lsls	r3, r3, #8
 8006498:	b21b      	sxth	r3, r3
 800649a:	4313      	orrs	r3, r2
 800649c:	b21b      	sxth	r3, r3
 800649e:	86bb      	strh	r3, [r7, #52]	@ 0x34
	uint16_t y0 = accel[3] | (accel[4] << 8);
 80064a0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80064a2:	3303      	adds	r3, #3
 80064a4:	781b      	ldrb	r3, [r3, #0]
 80064a6:	b21a      	sxth	r2, r3
 80064a8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80064aa:	3304      	adds	r3, #4
 80064ac:	781b      	ldrb	r3, [r3, #0]
 80064ae:	b21b      	sxth	r3, r3
 80064b0:	021b      	lsls	r3, r3, #8
 80064b2:	b21b      	sxth	r3, r3
 80064b4:	4313      	orrs	r3, r2
 80064b6:	b21b      	sxth	r3, r3
 80064b8:	867b      	strh	r3, [r7, #50]	@ 0x32
	uint16_t z0 = accel[5] | (accel[6] << 8);
 80064ba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80064bc:	3305      	adds	r3, #5
 80064be:	781b      	ldrb	r3, [r3, #0]
 80064c0:	b21a      	sxth	r2, r3
 80064c2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80064c4:	3306      	adds	r3, #6
 80064c6:	781b      	ldrb	r3, [r3, #0]
 80064c8:	b21b      	sxth	r3, r3
 80064ca:	021b      	lsls	r3, r3, #8
 80064cc:	b21b      	sxth	r3, r3
 80064ce:	4313      	orrs	r3, r2
 80064d0:	b21b      	sxth	r3, r3
 80064d2:	863b      	strh	r3, [r7, #48]	@ 0x30
	acc_x_state.previous_value = x0;
 80064d4:	f9b7 3034 	ldrsh.w	r3, [r7, #52]	@ 0x34
 80064d8:	833b      	strh	r3, [r7, #24]
	acc_y_state.previous_value = y0;
 80064da:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	@ 0x32
 80064de:	82bb      	strh	r3, [r7, #20]
	acc_z_state.previous_value = z0;
 80064e0:	f9b7 3030 	ldrsh.w	r3, [r7, #48]	@ 0x30
 80064e4:	823b      	strh	r3, [r7, #16]
	for(int k=0; k<7; ++k) output[out_idx++] = accel[k];
 80064e6:	2300      	movs	r3, #0
 80064e8:	653b      	str	r3, [r7, #80]	@ 0x50
 80064ea:	e00f      	b.n	800650c <Compress_Sample+0x300>
 80064ec:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80064ee:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80064f0:	441a      	add	r2, r3
 80064f2:	f8b7 3066 	ldrh.w	r3, [r7, #102]	@ 0x66
 80064f6:	1c59      	adds	r1, r3, #1
 80064f8:	f8a7 1066 	strh.w	r1, [r7, #102]	@ 0x66
 80064fc:	4619      	mov	r1, r3
 80064fe:	683b      	ldr	r3, [r7, #0]
 8006500:	440b      	add	r3, r1
 8006502:	7812      	ldrb	r2, [r2, #0]
 8006504:	701a      	strb	r2, [r3, #0]
 8006506:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006508:	3301      	adds	r3, #1
 800650a:	653b      	str	r3, [r7, #80]	@ 0x50
 800650c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800650e:	2b06      	cmp	r3, #6
 8006510:	ddec      	ble.n	80064ec <Compress_Sample+0x2e0>
	for (int i = 1; i < ACC_FIFO_WATERMARK; i++) 
 8006512:	2301      	movs	r3, #1
 8006514:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006516:	e087      	b.n	8006628 <Compress_Sample+0x41c>
 8006518:	200000b0 	.word	0x200000b0
	{
		uint16_t x = accel[i*7+1] | (accel[i*7+2] << 8);
 800651c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800651e:	4613      	mov	r3, r2
 8006520:	00db      	lsls	r3, r3, #3
 8006522:	1a9b      	subs	r3, r3, r2
 8006524:	3301      	adds	r3, #1
 8006526:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8006528:	4413      	add	r3, r2
 800652a:	781b      	ldrb	r3, [r3, #0]
 800652c:	b219      	sxth	r1, r3
 800652e:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8006530:	4613      	mov	r3, r2
 8006532:	00db      	lsls	r3, r3, #3
 8006534:	1a9b      	subs	r3, r3, r2
 8006536:	3302      	adds	r3, #2
 8006538:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800653a:	4413      	add	r3, r2
 800653c:	781b      	ldrb	r3, [r3, #0]
 800653e:	b21b      	sxth	r3, r3
 8006540:	021b      	lsls	r3, r3, #8
 8006542:	b21b      	sxth	r3, r3
 8006544:	430b      	orrs	r3, r1
 8006546:	b21b      	sxth	r3, r3
 8006548:	85fb      	strh	r3, [r7, #46]	@ 0x2e
		uint16_t y = accel[i*7+3] | (accel[i*7+4] << 8);
 800654a:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800654c:	4613      	mov	r3, r2
 800654e:	00db      	lsls	r3, r3, #3
 8006550:	1a9b      	subs	r3, r3, r2
 8006552:	3303      	adds	r3, #3
 8006554:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8006556:	4413      	add	r3, r2
 8006558:	781b      	ldrb	r3, [r3, #0]
 800655a:	b219      	sxth	r1, r3
 800655c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800655e:	4613      	mov	r3, r2
 8006560:	00db      	lsls	r3, r3, #3
 8006562:	1a9b      	subs	r3, r3, r2
 8006564:	3304      	adds	r3, #4
 8006566:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8006568:	4413      	add	r3, r2
 800656a:	781b      	ldrb	r3, [r3, #0]
 800656c:	b21b      	sxth	r3, r3
 800656e:	021b      	lsls	r3, r3, #8
 8006570:	b21b      	sxth	r3, r3
 8006572:	430b      	orrs	r3, r1
 8006574:	b21b      	sxth	r3, r3
 8006576:	85bb      	strh	r3, [r7, #44]	@ 0x2c
		uint16_t z = accel[i*7+5] | (accel[i*7+6] << 8);
 8006578:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800657a:	4613      	mov	r3, r2
 800657c:	00db      	lsls	r3, r3, #3
 800657e:	1a9b      	subs	r3, r3, r2
 8006580:	3305      	adds	r3, #5
 8006582:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8006584:	4413      	add	r3, r2
 8006586:	781b      	ldrb	r3, [r3, #0]
 8006588:	b219      	sxth	r1, r3
 800658a:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800658c:	4613      	mov	r3, r2
 800658e:	00db      	lsls	r3, r3, #3
 8006590:	1a9b      	subs	r3, r3, r2
 8006592:	3306      	adds	r3, #6
 8006594:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8006596:	4413      	add	r3, r2
 8006598:	781b      	ldrb	r3, [r3, #0]
 800659a:	b21b      	sxth	r3, r3
 800659c:	021b      	lsls	r3, r3, #8
 800659e:	b21b      	sxth	r3, r3
 80065a0:	430b      	orrs	r3, r1
 80065a2:	b21b      	sxth	r3, r3
 80065a4:	857b      	strh	r3, [r7, #42]	@ 0x2a
		uint8_t nibble_x = ADPCM_Compression(x, &acc_x_state, step_size_table_16bit);
 80065a6:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	@ 0x2e
 80065aa:	f107 0118 	add.w	r1, r7, #24
 80065ae:	4a29      	ldr	r2, [pc, #164]	@ (8006654 <Compress_Sample+0x448>)
 80065b0:	4618      	mov	r0, r3
 80065b2:	f000 f851 	bl	8006658 <ADPCM_Compression>
 80065b6:	4603      	mov	r3, r0
 80065b8:	f887 3029 	strb.w	r3, [r7, #41]	@ 0x29
		uint8_t nibble_y = ADPCM_Compression(y, &acc_y_state, step_size_table_16bit);
 80065bc:	f9b7 302c 	ldrsh.w	r3, [r7, #44]	@ 0x2c
 80065c0:	f107 0114 	add.w	r1, r7, #20
 80065c4:	4a23      	ldr	r2, [pc, #140]	@ (8006654 <Compress_Sample+0x448>)
 80065c6:	4618      	mov	r0, r3
 80065c8:	f000 f846 	bl	8006658 <ADPCM_Compression>
 80065cc:	4603      	mov	r3, r0
 80065ce:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
		uint8_t nibble_z = ADPCM_Compression(z, &acc_z_state, step_size_table_16bit);
 80065d2:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	@ 0x2a
 80065d6:	f107 0110 	add.w	r1, r7, #16
 80065da:	4a1e      	ldr	r2, [pc, #120]	@ (8006654 <Compress_Sample+0x448>)
 80065dc:	4618      	mov	r0, r3
 80065de:	f000 f83b 	bl	8006658 <ADPCM_Compression>
 80065e2:	4603      	mov	r3, r0
 80065e4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
		output[out_idx++] = nibble_x | (nibble_y << 4);
 80065e8:	f997 3028 	ldrsb.w	r3, [r7, #40]	@ 0x28
 80065ec:	011b      	lsls	r3, r3, #4
 80065ee:	b25a      	sxtb	r2, r3
 80065f0:	f997 3029 	ldrsb.w	r3, [r7, #41]	@ 0x29
 80065f4:	4313      	orrs	r3, r2
 80065f6:	b25a      	sxtb	r2, r3
 80065f8:	f8b7 3066 	ldrh.w	r3, [r7, #102]	@ 0x66
 80065fc:	1c59      	adds	r1, r3, #1
 80065fe:	f8a7 1066 	strh.w	r1, [r7, #102]	@ 0x66
 8006602:	4619      	mov	r1, r3
 8006604:	683b      	ldr	r3, [r7, #0]
 8006606:	440b      	add	r3, r1
 8006608:	b2d2      	uxtb	r2, r2
 800660a:	701a      	strb	r2, [r3, #0]
		output[out_idx++] = nibble_z;
 800660c:	f8b7 3066 	ldrh.w	r3, [r7, #102]	@ 0x66
 8006610:	1c5a      	adds	r2, r3, #1
 8006612:	f8a7 2066 	strh.w	r2, [r7, #102]	@ 0x66
 8006616:	461a      	mov	r2, r3
 8006618:	683b      	ldr	r3, [r7, #0]
 800661a:	4413      	add	r3, r2
 800661c:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 8006620:	701a      	strb	r2, [r3, #0]
	for (int i = 1; i < ACC_FIFO_WATERMARK; i++) 
 8006622:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006624:	3301      	adds	r3, #1
 8006626:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006628:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800662a:	2bc7      	cmp	r3, #199	@ 0xc7
 800662c:	f77f af76 	ble.w	800651c <Compress_Sample+0x310>
	}
	sizes.acceleration_size = out_idx - accel_start;
 8006630:	f8b7 2066 	ldrh.w	r2, [r7, #102]	@ 0x66
 8006634:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8006636:	1ad3      	subs	r3, r2, r3
 8006638:	b29b      	uxth	r3, r3
 800663a:	84bb      	strh	r3, [r7, #36]	@ 0x24

	return sizes;
 800663c:	68fb      	ldr	r3, [r7, #12]
 800663e:	461a      	mov	r2, r3
 8006640:	f107 0320 	add.w	r3, r7, #32
 8006644:	6818      	ldr	r0, [r3, #0]
 8006646:	6010      	str	r0, [r2, #0]
 8006648:	889b      	ldrh	r3, [r3, #4]
 800664a:	8093      	strh	r3, [r2, #4]
}
 800664c:	68f8      	ldr	r0, [r7, #12]
 800664e:	3768      	adds	r7, #104	@ 0x68
 8006650:	46bd      	mov	sp, r7
 8006652:	bd80      	pop	{r7, pc}
 8006654:	20000000 	.word	0x20000000

08006658 <ADPCM_Compression>:

/*-----FUNZIONE DI COMPRESSIONE ADPCM-----*/
uint8_t ADPCM_Compression(int16_t sample, AdpcmState_Typedef* state, uint16_t* step_size_table) 
{
 8006658:	b480      	push	{r7}
 800665a:	b08b      	sub	sp, #44	@ 0x2c
 800665c:	af00      	add	r7, sp, #0
 800665e:	4603      	mov	r3, r0
 8006660:	60b9      	str	r1, [r7, #8]
 8006662:	607a      	str	r2, [r7, #4]
 8006664:	81fb      	strh	r3, [r7, #14]
    int32_t diff = (int32_t)sample - state->previous_value;
 8006666:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800666a:	68ba      	ldr	r2, [r7, #8]
 800666c:	f9b2 2000 	ldrsh.w	r2, [r2]
 8006670:	1a9b      	subs	r3, r3, r2
 8006672:	627b      	str	r3, [r7, #36]	@ 0x24
    uint16_t step = step_size_table[state->step_index];
 8006674:	68bb      	ldr	r3, [r7, #8]
 8006676:	f993 3002 	ldrsb.w	r3, [r3, #2]
 800667a:	005b      	lsls	r3, r3, #1
 800667c:	687a      	ldr	r2, [r7, #4]
 800667e:	4413      	add	r3, r2
 8006680:	881b      	ldrh	r3, [r3, #0]
 8006682:	837b      	strh	r3, [r7, #26]
    uint8_t nibble = 0;
 8006684:	2300      	movs	r3, #0
 8006686:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

    if (diff < 0) 
 800668a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800668c:	2b00      	cmp	r3, #0
 800668e:	da05      	bge.n	800669c <ADPCM_Compression+0x44>
	{
        nibble = 8; // Bit di segno
 8006690:	2308      	movs	r3, #8
 8006692:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        diff = -diff;
 8006696:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006698:	425b      	negs	r3, r3
 800669a:	627b      	str	r3, [r7, #36]	@ 0x24
    }

    // Calcola il nibble quantizzato
    uint32_t temp = (uint32_t)diff * 4;
 800669c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800669e:	009b      	lsls	r3, r3, #2
 80066a0:	617b      	str	r3, [r7, #20]
    if (temp < step) 
 80066a2:	8b7b      	ldrh	r3, [r7, #26]
 80066a4:	697a      	ldr	r2, [r7, #20]
 80066a6:	429a      	cmp	r2, r3
 80066a8:	d312      	bcc.n	80066d0 <ADPCM_Compression+0x78>
	{
        nibble |= 0;
    } 
	else 
	{
        nibble |= (uint8_t)((temp / step > 7) ? 7 : (temp / step));
 80066aa:	8b7b      	ldrh	r3, [r7, #26]
 80066ac:	697a      	ldr	r2, [r7, #20]
 80066ae:	fbb2 f3f3 	udiv	r3, r2, r3
 80066b2:	2b07      	cmp	r3, #7
 80066b4:	d805      	bhi.n	80066c2 <ADPCM_Compression+0x6a>
 80066b6:	8b7b      	ldrh	r3, [r7, #26]
 80066b8:	697a      	ldr	r2, [r7, #20]
 80066ba:	fbb2 f3f3 	udiv	r3, r2, r3
 80066be:	b25b      	sxtb	r3, r3
 80066c0:	e000      	b.n	80066c4 <ADPCM_Compression+0x6c>
 80066c2:	2307      	movs	r3, #7
 80066c4:	f997 2023 	ldrsb.w	r2, [r7, #35]	@ 0x23
 80066c8:	4313      	orrs	r3, r2
 80066ca:	b25b      	sxtb	r3, r3
 80066cc:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    }

    // Ricostruisci il valore per la predizione successiva (usando solo il nibble)
    int32_t reconstructed_diff = (step * (nibble & 7)) / 4 + step / 8;
 80066d0:	8b7b      	ldrh	r3, [r7, #26]
 80066d2:	f897 2023 	ldrb.w	r2, [r7, #35]	@ 0x23
 80066d6:	f002 0207 	and.w	r2, r2, #7
 80066da:	fb02 f303 	mul.w	r3, r2, r3
 80066de:	2b00      	cmp	r3, #0
 80066e0:	da00      	bge.n	80066e4 <ADPCM_Compression+0x8c>
 80066e2:	3303      	adds	r3, #3
 80066e4:	109b      	asrs	r3, r3, #2
 80066e6:	461a      	mov	r2, r3
 80066e8:	8b7b      	ldrh	r3, [r7, #26]
 80066ea:	08db      	lsrs	r3, r3, #3
 80066ec:	b29b      	uxth	r3, r3
 80066ee:	4413      	add	r3, r2
 80066f0:	61fb      	str	r3, [r7, #28]
    if (nibble & 8) {
 80066f2:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80066f6:	f003 0308 	and.w	r3, r3, #8
 80066fa:	2b00      	cmp	r3, #0
 80066fc:	d002      	beq.n	8006704 <ADPCM_Compression+0xac>
        reconstructed_diff = -reconstructed_diff;
 80066fe:	69fb      	ldr	r3, [r7, #28]
 8006700:	425b      	negs	r3, r3
 8006702:	61fb      	str	r3, [r7, #28]
    }
    
    state->previous_value += reconstructed_diff;
 8006704:	68bb      	ldr	r3, [r7, #8]
 8006706:	f9b3 3000 	ldrsh.w	r3, [r3]
 800670a:	b29a      	uxth	r2, r3
 800670c:	69fb      	ldr	r3, [r7, #28]
 800670e:	b29b      	uxth	r3, r3
 8006710:	4413      	add	r3, r2
 8006712:	b29b      	uxth	r3, r3
 8006714:	b21a      	sxth	r2, r3
 8006716:	68bb      	ldr	r3, [r7, #8]
 8006718:	801a      	strh	r2, [r3, #0]
    // Clamp del valore predetto
    if (state->previous_value > 32767) state->previous_value = 32767;
    if (state->previous_value < -32768) state->previous_value = -32768;

    // Aggiorna l'indice dello step
    state->step_index += index_adjustment_table[nibble & 7];
 800671a:	68bb      	ldr	r3, [r7, #8]
 800671c:	f993 3002 	ldrsb.w	r3, [r3, #2]
 8006720:	b2da      	uxtb	r2, r3
 8006722:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8006726:	f003 0307 	and.w	r3, r3, #7
 800672a:	4910      	ldr	r1, [pc, #64]	@ (800676c <ADPCM_Compression+0x114>)
 800672c:	56cb      	ldrsb	r3, [r1, r3]
 800672e:	b2db      	uxtb	r3, r3
 8006730:	4413      	add	r3, r2
 8006732:	b2db      	uxtb	r3, r3
 8006734:	b25a      	sxtb	r2, r3
 8006736:	68bb      	ldr	r3, [r7, #8]
 8006738:	709a      	strb	r2, [r3, #2]
    if (state->step_index < 0) state->step_index = 0;
 800673a:	68bb      	ldr	r3, [r7, #8]
 800673c:	f993 3002 	ldrsb.w	r3, [r3, #2]
 8006740:	2b00      	cmp	r3, #0
 8006742:	da02      	bge.n	800674a <ADPCM_Compression+0xf2>
 8006744:	68bb      	ldr	r3, [r7, #8]
 8006746:	2200      	movs	r2, #0
 8006748:	709a      	strb	r2, [r3, #2]
    if (state->step_index > 87) state->step_index = 87;
 800674a:	68bb      	ldr	r3, [r7, #8]
 800674c:	f993 3002 	ldrsb.w	r3, [r3, #2]
 8006750:	2b57      	cmp	r3, #87	@ 0x57
 8006752:	dd02      	ble.n	800675a <ADPCM_Compression+0x102>
 8006754:	68bb      	ldr	r3, [r7, #8]
 8006756:	2257      	movs	r2, #87	@ 0x57
 8006758:	709a      	strb	r2, [r3, #2]

    return nibble;
 800675a:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
}
 800675e:	4618      	mov	r0, r3
 8006760:	372c      	adds	r7, #44	@ 0x2c
 8006762:	46bd      	mov	sp, r7
 8006764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006768:	4770      	bx	lr
 800676a:	bf00      	nop
 800676c:	20000160 	.word	0x20000160

08006770 <Apply_Config>:


/*-----APPLICA VALORI CONFIGURAZIONE-----*/
void Apply_Config(void)
{
 8006770:	b590      	push	{r4, r7, lr}
 8006772:	f5ad 5d81 	sub.w	sp, sp, #4128	@ 0x1020
 8006776:	b085      	sub	sp, #20
 8006778:	af00      	add	r7, sp, #0
	FIL config_file;
	UINT bytes_written;
	
	if(strcmp(cfg_var, "DEVICE_ID") == 0) 
 800677a:	499c      	ldr	r1, [pc, #624]	@ (80069ec <Apply_Config+0x27c>)
 800677c:	489c      	ldr	r0, [pc, #624]	@ (80069f0 <Apply_Config+0x280>)
 800677e:	f7f9 fd27 	bl	80001d0 <strcmp>
 8006782:	4603      	mov	r3, r0
 8006784:	2b00      	cmp	r3, #0
 8006786:	d107      	bne.n	8006798 <Apply_Config+0x28>
	{
		config.device_id = (uint8_t)atoi(new_cfg_val);
 8006788:	489a      	ldr	r0, [pc, #616]	@ (80069f4 <Apply_Config+0x284>)
 800678a:	f00f fb13 	bl	8015db4 <atoi>
 800678e:	4603      	mov	r3, r0
 8006790:	b2da      	uxtb	r2, r3
 8006792:	4b99      	ldr	r3, [pc, #612]	@ (80069f8 <Apply_Config+0x288>)
 8006794:	701a      	strb	r2, [r3, #0]
 8006796:	e0f3      	b.n	8006980 <Apply_Config+0x210>
    }
	else if(strcmp(cfg_var, "SAMP_FREQ") == 0)
 8006798:	4998      	ldr	r1, [pc, #608]	@ (80069fc <Apply_Config+0x28c>)
 800679a:	4895      	ldr	r0, [pc, #596]	@ (80069f0 <Apply_Config+0x280>)
 800679c:	f7f9 fd18 	bl	80001d0 <strcmp>
 80067a0:	4603      	mov	r3, r0
 80067a2:	2b00      	cmp	r3, #0
 80067a4:	d132      	bne.n	800680c <Apply_Config+0x9c>
	{
		if((uint16_t)atoi(new_cfg_val) != 800 && (uint16_t)atoi(new_cfg_val) != 1600)
 80067a6:	4893      	ldr	r0, [pc, #588]	@ (80069f4 <Apply_Config+0x284>)
 80067a8:	f00f fb04 	bl	8015db4 <atoi>
 80067ac:	4603      	mov	r3, r0
 80067ae:	b29b      	uxth	r3, r3
 80067b0:	f5b3 7f48 	cmp.w	r3, #800	@ 0x320
 80067b4:	d008      	beq.n	80067c8 <Apply_Config+0x58>
 80067b6:	488f      	ldr	r0, [pc, #572]	@ (80069f4 <Apply_Config+0x284>)
 80067b8:	f00f fafc 	bl	8015db4 <atoi>
 80067bc:	4603      	mov	r3, r0
 80067be:	b29b      	uxth	r3, r3
 80067c0:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 80067c4:	f040 8105 	bne.w	80069d2 <Apply_Config+0x262>
		{
			return;
		}
		else
		{
			if(((config.samp_freq / ACC_FIFO_WATERMARK) * config.buffering_secs * SAVING_BUFFER_LEN) * 2 > psram_get_size()) 
 80067c8:	4b8b      	ldr	r3, [pc, #556]	@ (80069f8 <Apply_Config+0x288>)
 80067ca:	885b      	ldrh	r3, [r3, #2]
 80067cc:	4a8c      	ldr	r2, [pc, #560]	@ (8006a00 <Apply_Config+0x290>)
 80067ce:	fba2 2303 	umull	r2, r3, r2, r3
 80067d2:	099b      	lsrs	r3, r3, #6
 80067d4:	b29b      	uxth	r3, r3
 80067d6:	461a      	mov	r2, r3
 80067d8:	4b87      	ldr	r3, [pc, #540]	@ (80069f8 <Apply_Config+0x288>)
 80067da:	791b      	ldrb	r3, [r3, #4]
 80067dc:	fb02 f303 	mul.w	r3, r2, r3
 80067e0:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 80067e4:	fb02 f303 	mul.w	r3, r2, r3
 80067e8:	f503 63b4 	add.w	r3, r3, #1440	@ 0x5a0
 80067ec:	005b      	lsls	r3, r3, #1
 80067ee:	461c      	mov	r4, r3
 80067f0:	f000 fca8 	bl	8007144 <psram_get_size>
 80067f4:	4603      	mov	r3, r0
 80067f6:	429c      	cmp	r4, r3
 80067f8:	f240 80c2 	bls.w	8006980 <Apply_Config+0x210>
			{
				config.samp_freq = (uint16_t)atoi(new_cfg_val);
 80067fc:	487d      	ldr	r0, [pc, #500]	@ (80069f4 <Apply_Config+0x284>)
 80067fe:	f00f fad9 	bl	8015db4 <atoi>
 8006802:	4603      	mov	r3, r0
 8006804:	b29a      	uxth	r2, r3
 8006806:	4b7c      	ldr	r3, [pc, #496]	@ (80069f8 <Apply_Config+0x288>)
 8006808:	805a      	strh	r2, [r3, #2]
 800680a:	e0b9      	b.n	8006980 <Apply_Config+0x210>
			}
		}
	}
	else if(strcmp(cfg_var, "BUFFER_SECS") == 0)
 800680c:	497d      	ldr	r1, [pc, #500]	@ (8006a04 <Apply_Config+0x294>)
 800680e:	4878      	ldr	r0, [pc, #480]	@ (80069f0 <Apply_Config+0x280>)
 8006810:	f7f9 fcde 	bl	80001d0 <strcmp>
 8006814:	4603      	mov	r3, r0
 8006816:	2b00      	cmp	r3, #0
 8006818:	d131      	bne.n	800687e <Apply_Config+0x10e>
	{
		if((uint8_t)atoi(new_cfg_val) < 5 || (uint8_t)atoi(new_cfg_val) > 30)
 800681a:	4876      	ldr	r0, [pc, #472]	@ (80069f4 <Apply_Config+0x284>)
 800681c:	f00f faca 	bl	8015db4 <atoi>
 8006820:	4603      	mov	r3, r0
 8006822:	b2db      	uxtb	r3, r3
 8006824:	2b04      	cmp	r3, #4
 8006826:	f240 80d6 	bls.w	80069d6 <Apply_Config+0x266>
 800682a:	4872      	ldr	r0, [pc, #456]	@ (80069f4 <Apply_Config+0x284>)
 800682c:	f00f fac2 	bl	8015db4 <atoi>
 8006830:	4603      	mov	r3, r0
 8006832:	b2db      	uxtb	r3, r3
 8006834:	2b1e      	cmp	r3, #30
 8006836:	f200 80ce 	bhi.w	80069d6 <Apply_Config+0x266>
		{
			return;
		}
		else
		{
			if(((config.samp_freq / ACC_FIFO_WATERMARK) * config.buffering_secs * SAVING_BUFFER_LEN) * 2 > psram_get_size()) 
 800683a:	4b6f      	ldr	r3, [pc, #444]	@ (80069f8 <Apply_Config+0x288>)
 800683c:	885b      	ldrh	r3, [r3, #2]
 800683e:	4a70      	ldr	r2, [pc, #448]	@ (8006a00 <Apply_Config+0x290>)
 8006840:	fba2 2303 	umull	r2, r3, r2, r3
 8006844:	099b      	lsrs	r3, r3, #6
 8006846:	b29b      	uxth	r3, r3
 8006848:	461a      	mov	r2, r3
 800684a:	4b6b      	ldr	r3, [pc, #428]	@ (80069f8 <Apply_Config+0x288>)
 800684c:	791b      	ldrb	r3, [r3, #4]
 800684e:	fb02 f303 	mul.w	r3, r2, r3
 8006852:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 8006856:	fb02 f303 	mul.w	r3, r2, r3
 800685a:	f503 63b4 	add.w	r3, r3, #1440	@ 0x5a0
 800685e:	005b      	lsls	r3, r3, #1
 8006860:	461c      	mov	r4, r3
 8006862:	f000 fc6f 	bl	8007144 <psram_get_size>
 8006866:	4603      	mov	r3, r0
 8006868:	429c      	cmp	r4, r3
 800686a:	f240 8089 	bls.w	8006980 <Apply_Config+0x210>
			{
				config.buffering_secs = (uint8_t)atoi(new_cfg_val);
 800686e:	4861      	ldr	r0, [pc, #388]	@ (80069f4 <Apply_Config+0x284>)
 8006870:	f00f faa0 	bl	8015db4 <atoi>
 8006874:	4603      	mov	r3, r0
 8006876:	b2da      	uxtb	r2, r3
 8006878:	4b5f      	ldr	r3, [pc, #380]	@ (80069f8 <Apply_Config+0x288>)
 800687a:	711a      	strb	r2, [r3, #4]
 800687c:	e080      	b.n	8006980 <Apply_Config+0x210>
			}
		}
	}
	else if(strcmp(cfg_var, "CONN_TIMEOUT") == 0)
 800687e:	4962      	ldr	r1, [pc, #392]	@ (8006a08 <Apply_Config+0x298>)
 8006880:	485b      	ldr	r0, [pc, #364]	@ (80069f0 <Apply_Config+0x280>)
 8006882:	f7f9 fca5 	bl	80001d0 <strcmp>
 8006886:	4603      	mov	r3, r0
 8006888:	2b00      	cmp	r3, #0
 800688a:	d107      	bne.n	800689c <Apply_Config+0x12c>
	{
		config.connection_timeout = (uint32_t)atoi(new_cfg_val);
 800688c:	4859      	ldr	r0, [pc, #356]	@ (80069f4 <Apply_Config+0x284>)
 800688e:	f00f fa91 	bl	8015db4 <atoi>
 8006892:	4603      	mov	r3, r0
 8006894:	461a      	mov	r2, r3
 8006896:	4b58      	ldr	r3, [pc, #352]	@ (80069f8 <Apply_Config+0x288>)
 8006898:	609a      	str	r2, [r3, #8]
 800689a:	e071      	b.n	8006980 <Apply_Config+0x210>
	}
	else if(strcmp(cfg_var, "HAMMER_TH") == 0)
 800689c:	495b      	ldr	r1, [pc, #364]	@ (8006a0c <Apply_Config+0x29c>)
 800689e:	4854      	ldr	r0, [pc, #336]	@ (80069f0 <Apply_Config+0x280>)
 80068a0:	f7f9 fc96 	bl	80001d0 <strcmp>
 80068a4:	4603      	mov	r3, r0
 80068a6:	2b00      	cmp	r3, #0
 80068a8:	d107      	bne.n	80068ba <Apply_Config+0x14a>
	{
		config.hammer_th = (uint16_t)atoi(new_cfg_val);
 80068aa:	4852      	ldr	r0, [pc, #328]	@ (80069f4 <Apply_Config+0x284>)
 80068ac:	f00f fa82 	bl	8015db4 <atoi>
 80068b0:	4603      	mov	r3, r0
 80068b2:	b29a      	uxth	r2, r3
 80068b4:	4b50      	ldr	r3, [pc, #320]	@ (80069f8 <Apply_Config+0x288>)
 80068b6:	819a      	strh	r2, [r3, #12]
 80068b8:	e062      	b.n	8006980 <Apply_Config+0x210>
	}
    else if(strcmp(cfg_var, "HIGH_TH") == 0) 
 80068ba:	4955      	ldr	r1, [pc, #340]	@ (8006a10 <Apply_Config+0x2a0>)
 80068bc:	484c      	ldr	r0, [pc, #304]	@ (80069f0 <Apply_Config+0x280>)
 80068be:	f7f9 fc87 	bl	80001d0 <strcmp>
 80068c2:	4603      	mov	r3, r0
 80068c4:	2b00      	cmp	r3, #0
 80068c6:	d115      	bne.n	80068f4 <Apply_Config+0x184>
	{
        if(cfg_idx >= 0 && cfg_idx < 24) 
 80068c8:	4b52      	ldr	r3, [pc, #328]	@ (8006a14 <Apply_Config+0x2a4>)
 80068ca:	681b      	ldr	r3, [r3, #0]
 80068cc:	2b00      	cmp	r3, #0
 80068ce:	db57      	blt.n	8006980 <Apply_Config+0x210>
 80068d0:	4b50      	ldr	r3, [pc, #320]	@ (8006a14 <Apply_Config+0x2a4>)
 80068d2:	681b      	ldr	r3, [r3, #0]
 80068d4:	2b17      	cmp	r3, #23
 80068d6:	dc53      	bgt.n	8006980 <Apply_Config+0x210>
		{
            config.high_th[cfg_idx] = (uint16_t)atoi(new_cfg_val);
 80068d8:	4846      	ldr	r0, [pc, #280]	@ (80069f4 <Apply_Config+0x284>)
 80068da:	f00f fa6b 	bl	8015db4 <atoi>
 80068de:	4602      	mov	r2, r0
 80068e0:	4b4c      	ldr	r3, [pc, #304]	@ (8006a14 <Apply_Config+0x2a4>)
 80068e2:	681b      	ldr	r3, [r3, #0]
 80068e4:	b291      	uxth	r1, r2
 80068e6:	4a44      	ldr	r2, [pc, #272]	@ (80069f8 <Apply_Config+0x288>)
 80068e8:	331c      	adds	r3, #28
 80068ea:	005b      	lsls	r3, r3, #1
 80068ec:	4413      	add	r3, r2
 80068ee:	460a      	mov	r2, r1
 80068f0:	80da      	strh	r2, [r3, #6]
 80068f2:	e045      	b.n	8006980 <Apply_Config+0x210>
        }
    }
    else if(strcmp(cfg_var, "LOW_TH") == 0) 
 80068f4:	4948      	ldr	r1, [pc, #288]	@ (8006a18 <Apply_Config+0x2a8>)
 80068f6:	483e      	ldr	r0, [pc, #248]	@ (80069f0 <Apply_Config+0x280>)
 80068f8:	f7f9 fc6a 	bl	80001d0 <strcmp>
 80068fc:	4603      	mov	r3, r0
 80068fe:	2b00      	cmp	r3, #0
 8006900:	d115      	bne.n	800692e <Apply_Config+0x1be>
	{
        if(cfg_idx >= 0 && cfg_idx < 24) 
 8006902:	4b44      	ldr	r3, [pc, #272]	@ (8006a14 <Apply_Config+0x2a4>)
 8006904:	681b      	ldr	r3, [r3, #0]
 8006906:	2b00      	cmp	r3, #0
 8006908:	db3a      	blt.n	8006980 <Apply_Config+0x210>
 800690a:	4b42      	ldr	r3, [pc, #264]	@ (8006a14 <Apply_Config+0x2a4>)
 800690c:	681b      	ldr	r3, [r3, #0]
 800690e:	2b17      	cmp	r3, #23
 8006910:	dc36      	bgt.n	8006980 <Apply_Config+0x210>
		{
            config.low_th[cfg_idx] = (uint16_t)atoi(new_cfg_val);
 8006912:	4838      	ldr	r0, [pc, #224]	@ (80069f4 <Apply_Config+0x284>)
 8006914:	f00f fa4e 	bl	8015db4 <atoi>
 8006918:	4602      	mov	r2, r0
 800691a:	4b3e      	ldr	r3, [pc, #248]	@ (8006a14 <Apply_Config+0x2a4>)
 800691c:	681b      	ldr	r3, [r3, #0]
 800691e:	b291      	uxth	r1, r2
 8006920:	4a35      	ldr	r2, [pc, #212]	@ (80069f8 <Apply_Config+0x288>)
 8006922:	3304      	adds	r3, #4
 8006924:	005b      	lsls	r3, r3, #1
 8006926:	4413      	add	r3, r2
 8006928:	460a      	mov	r2, r1
 800692a:	80da      	strh	r2, [r3, #6]
 800692c:	e028      	b.n	8006980 <Apply_Config+0x210>
        }
    }
    else if(strcmp(cfg_var, "TCP_IP") == 0)
 800692e:	493b      	ldr	r1, [pc, #236]	@ (8006a1c <Apply_Config+0x2ac>)
 8006930:	482f      	ldr	r0, [pc, #188]	@ (80069f0 <Apply_Config+0x280>)
 8006932:	f7f9 fc4d 	bl	80001d0 <strcmp>
 8006936:	4603      	mov	r3, r0
 8006938:	2b00      	cmp	r3, #0
 800693a:	d10d      	bne.n	8006958 <Apply_Config+0x1e8>
	{
        strncpy(config.tcp_IPaddress, new_cfg_val, sizeof(config.tcp_IPaddress) - 1);
 800693c:	223f      	movs	r2, #63	@ 0x3f
 800693e:	492d      	ldr	r1, [pc, #180]	@ (80069f4 <Apply_Config+0x284>)
 8006940:	4837      	ldr	r0, [pc, #220]	@ (8006a20 <Apply_Config+0x2b0>)
 8006942:	f00f fb48 	bl	8015fd6 <strncpy>
        config.tcp_IPaddress[sizeof(config.tcp_IPaddress) - 1] = '\0';
 8006946:	4b2c      	ldr	r3, [pc, #176]	@ (80069f8 <Apply_Config+0x288>)
 8006948:	2200      	movs	r2, #0
 800694a:	f883 20ad 	strb.w	r2, [r3, #173]	@ 0xad
		strcpy(sys.TCP.IP_address, config.tcp_IPaddress);
 800694e:	4934      	ldr	r1, [pc, #208]	@ (8006a20 <Apply_Config+0x2b0>)
 8006950:	4834      	ldr	r0, [pc, #208]	@ (8006a24 <Apply_Config+0x2b4>)
 8006952:	f00f fb95 	bl	8016080 <strcpy>
 8006956:	e013      	b.n	8006980 <Apply_Config+0x210>
    }
    else if(strcmp(cfg_var, "TCP_PORT") == 0)
 8006958:	4933      	ldr	r1, [pc, #204]	@ (8006a28 <Apply_Config+0x2b8>)
 800695a:	4825      	ldr	r0, [pc, #148]	@ (80069f0 <Apply_Config+0x280>)
 800695c:	f7f9 fc38 	bl	80001d0 <strcmp>
 8006960:	4603      	mov	r3, r0
 8006962:	2b00      	cmp	r3, #0
 8006964:	d139      	bne.n	80069da <Apply_Config+0x26a>
	{
        strncpy(config.tcp_Port, new_cfg_val, sizeof(config.tcp_Port) - 1);
 8006966:	223f      	movs	r2, #63	@ 0x3f
 8006968:	4922      	ldr	r1, [pc, #136]	@ (80069f4 <Apply_Config+0x284>)
 800696a:	4830      	ldr	r0, [pc, #192]	@ (8006a2c <Apply_Config+0x2bc>)
 800696c:	f00f fb33 	bl	8015fd6 <strncpy>
        config.tcp_Port[sizeof(config.tcp_Port) - 1] = '\0';
 8006970:	4b21      	ldr	r3, [pc, #132]	@ (80069f8 <Apply_Config+0x288>)
 8006972:	2200      	movs	r2, #0
 8006974:	f883 20ed 	strb.w	r2, [r3, #237]	@ 0xed
		strcpy(sys.TCP.Port, config.tcp_Port);
 8006978:	492c      	ldr	r1, [pc, #176]	@ (8006a2c <Apply_Config+0x2bc>)
 800697a:	482d      	ldr	r0, [pc, #180]	@ (8006a30 <Apply_Config+0x2c0>)
 800697c:	f00f fb80 	bl	8016080 <strcpy>
	else
	{
		return;
	}

	if (f_open(&config_file, CONFIG_FILE, FA_WRITE | FA_CREATE_ALWAYS) == FR_OK)
 8006980:	f107 0310 	add.w	r3, r7, #16
 8006984:	3b08      	subs	r3, #8
 8006986:	220a      	movs	r2, #10
 8006988:	492a      	ldr	r1, [pc, #168]	@ (8006a34 <Apply_Config+0x2c4>)
 800698a:	4618      	mov	r0, r3
 800698c:	f002 ff1a 	bl	80097c4 <f_open>
 8006990:	4603      	mov	r3, r0
 8006992:	2b00      	cmp	r3, #0
 8006994:	d123      	bne.n	80069de <Apply_Config+0x26e>
	{
		f_write(&config_file, &config, sizeof(config), &bytes_written);
 8006996:	f107 0310 	add.w	r3, r7, #16
 800699a:	3b0c      	subs	r3, #12
 800699c:	f107 0010 	add.w	r0, r7, #16
 80069a0:	3808      	subs	r0, #8
 80069a2:	22f0      	movs	r2, #240	@ 0xf0
 80069a4:	4914      	ldr	r1, [pc, #80]	@ (80069f8 <Apply_Config+0x288>)
 80069a6:	f003 f9f8 	bl	8009d9a <f_write>
		f_close(&config_file);
 80069aa:	f107 0310 	add.w	r3, r7, #16
 80069ae:	3b08      	subs	r3, #8
 80069b0:	4618      	mov	r0, r3
 80069b2:	f003 fbfb 	bl	800a1ac <f_close>
	else
	{
		return;
	}
	
	memset(cfg_var, 0, sizeof(cfg_var));
 80069b6:	2214      	movs	r2, #20
 80069b8:	2100      	movs	r1, #0
 80069ba:	480d      	ldr	r0, [pc, #52]	@ (80069f0 <Apply_Config+0x280>)
 80069bc:	f00f fae4 	bl	8015f88 <memset>
	cfg_idx = 0;
 80069c0:	4b14      	ldr	r3, [pc, #80]	@ (8006a14 <Apply_Config+0x2a4>)
 80069c2:	2200      	movs	r2, #0
 80069c4:	601a      	str	r2, [r3, #0]
	memset(new_cfg_val, 0, sizeof(new_cfg_val));	
 80069c6:	220a      	movs	r2, #10
 80069c8:	2100      	movs	r1, #0
 80069ca:	480a      	ldr	r0, [pc, #40]	@ (80069f4 <Apply_Config+0x284>)
 80069cc:	f00f fadc 	bl	8015f88 <memset>
 80069d0:	e006      	b.n	80069e0 <Apply_Config+0x270>
			return;
 80069d2:	bf00      	nop
 80069d4:	e004      	b.n	80069e0 <Apply_Config+0x270>
			return;
 80069d6:	bf00      	nop
 80069d8:	e002      	b.n	80069e0 <Apply_Config+0x270>
		return;
 80069da:	bf00      	nop
 80069dc:	e000      	b.n	80069e0 <Apply_Config+0x270>
		return;
 80069de:	bf00      	nop
}
 80069e0:	f507 5781 	add.w	r7, r7, #4128	@ 0x1020
 80069e4:	3714      	adds	r7, #20
 80069e6:	46bd      	mov	sp, r7
 80069e8:	bd90      	pop	{r4, r7, pc}
 80069ea:	bf00      	nop
 80069ec:	080174c0 	.word	0x080174c0
 80069f0:	200059c8 	.word	0x200059c8
 80069f4:	200059e0 	.word	0x200059e0
 80069f8:	200019ec 	.word	0x200019ec
 80069fc:	080174cc 	.word	0x080174cc
 8006a00:	51eb851f 	.word	0x51eb851f
 8006a04:	080174d8 	.word	0x080174d8
 8006a08:	080174e4 	.word	0x080174e4
 8006a0c:	080174f4 	.word	0x080174f4
 8006a10:	08017500 	.word	0x08017500
 8006a14:	200059dc 	.word	0x200059dc
 8006a18:	08017508 	.word	0x08017508
 8006a1c:	08017510 	.word	0x08017510
 8006a20:	20001a5a 	.word	0x20001a5a
 8006a24:	2000191c 	.word	0x2000191c
 8006a28:	08017518 	.word	0x08017518
 8006a2c:	20001a9a 	.word	0x20001a9a
 8006a30:	20001980 	.word	0x20001980
 8006a34:	08017524 	.word	0x08017524

08006a38 <Get_Config>:

/*-----RECUPERO E INVIO VALORE DI CONFIGURAZIONE-----*/
void Get_Config(void)
{
 8006a38:	b580      	push	{r7, lr}
 8006a3a:	b0a0      	sub	sp, #128	@ 0x80
 8006a3c:	af00      	add	r7, sp, #0
	char value_str[128] = {0};
 8006a3e:	463b      	mov	r3, r7
 8006a40:	2280      	movs	r2, #128	@ 0x80
 8006a42:	2100      	movs	r1, #0
 8006a44:	4618      	mov	r0, r3
 8006a46:	f00f fa9f 	bl	8015f88 <memset>

	if(strcmp(cfg_var, "DEVICE_ID") == 0)
 8006a4a:	4960      	ldr	r1, [pc, #384]	@ (8006bcc <Get_Config+0x194>)
 8006a4c:	4860      	ldr	r0, [pc, #384]	@ (8006bd0 <Get_Config+0x198>)
 8006a4e:	f7f9 fbbf 	bl	80001d0 <strcmp>
 8006a52:	4603      	mov	r3, r0
 8006a54:	2b00      	cmp	r3, #0
 8006a56:	d108      	bne.n	8006a6a <Get_Config+0x32>
	{
		sprintf(value_str, "%u", config.device_id);
 8006a58:	4b5e      	ldr	r3, [pc, #376]	@ (8006bd4 <Get_Config+0x19c>)
 8006a5a:	781b      	ldrb	r3, [r3, #0]
 8006a5c:	461a      	mov	r2, r3
 8006a5e:	463b      	mov	r3, r7
 8006a60:	495d      	ldr	r1, [pc, #372]	@ (8006bd8 <Get_Config+0x1a0>)
 8006a62:	4618      	mov	r0, r3
 8006a64:	f00f fa30 	bl	8015ec8 <siprintf>
 8006a68:	e09a      	b.n	8006ba0 <Get_Config+0x168>
	}
	else if(strcmp(cfg_var, "SAMP_FREQ") == 0)
 8006a6a:	495c      	ldr	r1, [pc, #368]	@ (8006bdc <Get_Config+0x1a4>)
 8006a6c:	4858      	ldr	r0, [pc, #352]	@ (8006bd0 <Get_Config+0x198>)
 8006a6e:	f7f9 fbaf 	bl	80001d0 <strcmp>
 8006a72:	4603      	mov	r3, r0
 8006a74:	2b00      	cmp	r3, #0
 8006a76:	d108      	bne.n	8006a8a <Get_Config+0x52>
	{
		sprintf(value_str, "%u", config.samp_freq);
 8006a78:	4b56      	ldr	r3, [pc, #344]	@ (8006bd4 <Get_Config+0x19c>)
 8006a7a:	885b      	ldrh	r3, [r3, #2]
 8006a7c:	461a      	mov	r2, r3
 8006a7e:	463b      	mov	r3, r7
 8006a80:	4955      	ldr	r1, [pc, #340]	@ (8006bd8 <Get_Config+0x1a0>)
 8006a82:	4618      	mov	r0, r3
 8006a84:	f00f fa20 	bl	8015ec8 <siprintf>
 8006a88:	e08a      	b.n	8006ba0 <Get_Config+0x168>
	}
	else if(strcmp(cfg_var, "BUFFER_SECS") == 0)
 8006a8a:	4955      	ldr	r1, [pc, #340]	@ (8006be0 <Get_Config+0x1a8>)
 8006a8c:	4850      	ldr	r0, [pc, #320]	@ (8006bd0 <Get_Config+0x198>)
 8006a8e:	f7f9 fb9f 	bl	80001d0 <strcmp>
 8006a92:	4603      	mov	r3, r0
 8006a94:	2b00      	cmp	r3, #0
 8006a96:	d108      	bne.n	8006aaa <Get_Config+0x72>
	{
		sprintf(value_str, "%u", config.buffering_secs);
 8006a98:	4b4e      	ldr	r3, [pc, #312]	@ (8006bd4 <Get_Config+0x19c>)
 8006a9a:	791b      	ldrb	r3, [r3, #4]
 8006a9c:	461a      	mov	r2, r3
 8006a9e:	463b      	mov	r3, r7
 8006aa0:	494d      	ldr	r1, [pc, #308]	@ (8006bd8 <Get_Config+0x1a0>)
 8006aa2:	4618      	mov	r0, r3
 8006aa4:	f00f fa10 	bl	8015ec8 <siprintf>
 8006aa8:	e07a      	b.n	8006ba0 <Get_Config+0x168>
	}
	else if(strcmp(cfg_var, "CONN_TIMEOUT") == 0)
 8006aaa:	494e      	ldr	r1, [pc, #312]	@ (8006be4 <Get_Config+0x1ac>)
 8006aac:	4848      	ldr	r0, [pc, #288]	@ (8006bd0 <Get_Config+0x198>)
 8006aae:	f7f9 fb8f 	bl	80001d0 <strcmp>
 8006ab2:	4603      	mov	r3, r0
 8006ab4:	2b00      	cmp	r3, #0
 8006ab6:	d107      	bne.n	8006ac8 <Get_Config+0x90>
	{
		sprintf(value_str, "%lu", config.connection_timeout);
 8006ab8:	4b46      	ldr	r3, [pc, #280]	@ (8006bd4 <Get_Config+0x19c>)
 8006aba:	689a      	ldr	r2, [r3, #8]
 8006abc:	463b      	mov	r3, r7
 8006abe:	494a      	ldr	r1, [pc, #296]	@ (8006be8 <Get_Config+0x1b0>)
 8006ac0:	4618      	mov	r0, r3
 8006ac2:	f00f fa01 	bl	8015ec8 <siprintf>
 8006ac6:	e06b      	b.n	8006ba0 <Get_Config+0x168>
	}
	else if(strcmp(cfg_var, "HAMMER_TH") == 0)
 8006ac8:	4948      	ldr	r1, [pc, #288]	@ (8006bec <Get_Config+0x1b4>)
 8006aca:	4841      	ldr	r0, [pc, #260]	@ (8006bd0 <Get_Config+0x198>)
 8006acc:	f7f9 fb80 	bl	80001d0 <strcmp>
 8006ad0:	4603      	mov	r3, r0
 8006ad2:	2b00      	cmp	r3, #0
 8006ad4:	d108      	bne.n	8006ae8 <Get_Config+0xb0>
	{
		sprintf(value_str, "%u", config.hammer_th);
 8006ad6:	4b3f      	ldr	r3, [pc, #252]	@ (8006bd4 <Get_Config+0x19c>)
 8006ad8:	899b      	ldrh	r3, [r3, #12]
 8006ada:	461a      	mov	r2, r3
 8006adc:	463b      	mov	r3, r7
 8006ade:	493e      	ldr	r1, [pc, #248]	@ (8006bd8 <Get_Config+0x1a0>)
 8006ae0:	4618      	mov	r0, r3
 8006ae2:	f00f f9f1 	bl	8015ec8 <siprintf>
 8006ae6:	e05b      	b.n	8006ba0 <Get_Config+0x168>
	}
	else if(strcmp(cfg_var, "HIGH_TH") == 0 && cfg_idx >= 0 && cfg_idx < 24)
 8006ae8:	4941      	ldr	r1, [pc, #260]	@ (8006bf0 <Get_Config+0x1b8>)
 8006aea:	4839      	ldr	r0, [pc, #228]	@ (8006bd0 <Get_Config+0x198>)
 8006aec:	f7f9 fb70 	bl	80001d0 <strcmp>
 8006af0:	4603      	mov	r3, r0
 8006af2:	2b00      	cmp	r3, #0
 8006af4:	d115      	bne.n	8006b22 <Get_Config+0xea>
 8006af6:	4b3f      	ldr	r3, [pc, #252]	@ (8006bf4 <Get_Config+0x1bc>)
 8006af8:	681b      	ldr	r3, [r3, #0]
 8006afa:	2b00      	cmp	r3, #0
 8006afc:	db11      	blt.n	8006b22 <Get_Config+0xea>
 8006afe:	4b3d      	ldr	r3, [pc, #244]	@ (8006bf4 <Get_Config+0x1bc>)
 8006b00:	681b      	ldr	r3, [r3, #0]
 8006b02:	2b17      	cmp	r3, #23
 8006b04:	dc0d      	bgt.n	8006b22 <Get_Config+0xea>
	{
		sprintf(value_str, "%u", config.high_th[cfg_idx]);
 8006b06:	4b3b      	ldr	r3, [pc, #236]	@ (8006bf4 <Get_Config+0x1bc>)
 8006b08:	681b      	ldr	r3, [r3, #0]
 8006b0a:	4a32      	ldr	r2, [pc, #200]	@ (8006bd4 <Get_Config+0x19c>)
 8006b0c:	331c      	adds	r3, #28
 8006b0e:	005b      	lsls	r3, r3, #1
 8006b10:	4413      	add	r3, r2
 8006b12:	88db      	ldrh	r3, [r3, #6]
 8006b14:	461a      	mov	r2, r3
 8006b16:	463b      	mov	r3, r7
 8006b18:	492f      	ldr	r1, [pc, #188]	@ (8006bd8 <Get_Config+0x1a0>)
 8006b1a:	4618      	mov	r0, r3
 8006b1c:	f00f f9d4 	bl	8015ec8 <siprintf>
 8006b20:	e03e      	b.n	8006ba0 <Get_Config+0x168>
	}
	else if(strcmp(cfg_var, "LOW_TH") == 0 && cfg_idx >= 0 && cfg_idx < 24)
 8006b22:	4935      	ldr	r1, [pc, #212]	@ (8006bf8 <Get_Config+0x1c0>)
 8006b24:	482a      	ldr	r0, [pc, #168]	@ (8006bd0 <Get_Config+0x198>)
 8006b26:	f7f9 fb53 	bl	80001d0 <strcmp>
 8006b2a:	4603      	mov	r3, r0
 8006b2c:	2b00      	cmp	r3, #0
 8006b2e:	d115      	bne.n	8006b5c <Get_Config+0x124>
 8006b30:	4b30      	ldr	r3, [pc, #192]	@ (8006bf4 <Get_Config+0x1bc>)
 8006b32:	681b      	ldr	r3, [r3, #0]
 8006b34:	2b00      	cmp	r3, #0
 8006b36:	db11      	blt.n	8006b5c <Get_Config+0x124>
 8006b38:	4b2e      	ldr	r3, [pc, #184]	@ (8006bf4 <Get_Config+0x1bc>)
 8006b3a:	681b      	ldr	r3, [r3, #0]
 8006b3c:	2b17      	cmp	r3, #23
 8006b3e:	dc0d      	bgt.n	8006b5c <Get_Config+0x124>
	{
		sprintf(value_str, "%u", config.low_th[cfg_idx]);
 8006b40:	4b2c      	ldr	r3, [pc, #176]	@ (8006bf4 <Get_Config+0x1bc>)
 8006b42:	681b      	ldr	r3, [r3, #0]
 8006b44:	4a23      	ldr	r2, [pc, #140]	@ (8006bd4 <Get_Config+0x19c>)
 8006b46:	3304      	adds	r3, #4
 8006b48:	005b      	lsls	r3, r3, #1
 8006b4a:	4413      	add	r3, r2
 8006b4c:	88db      	ldrh	r3, [r3, #6]
 8006b4e:	461a      	mov	r2, r3
 8006b50:	463b      	mov	r3, r7
 8006b52:	4921      	ldr	r1, [pc, #132]	@ (8006bd8 <Get_Config+0x1a0>)
 8006b54:	4618      	mov	r0, r3
 8006b56:	f00f f9b7 	bl	8015ec8 <siprintf>
 8006b5a:	e021      	b.n	8006ba0 <Get_Config+0x168>
	}
	else if(strcmp(cfg_var, "TCP_IP") == 0)
 8006b5c:	4927      	ldr	r1, [pc, #156]	@ (8006bfc <Get_Config+0x1c4>)
 8006b5e:	481c      	ldr	r0, [pc, #112]	@ (8006bd0 <Get_Config+0x198>)
 8006b60:	f7f9 fb36 	bl	80001d0 <strcmp>
 8006b64:	4603      	mov	r3, r0
 8006b66:	2b00      	cmp	r3, #0
 8006b68:	d106      	bne.n	8006b78 <Get_Config+0x140>
	{
		strncpy(value_str, config.tcp_IPaddress, sizeof(value_str)-1);
 8006b6a:	463b      	mov	r3, r7
 8006b6c:	227f      	movs	r2, #127	@ 0x7f
 8006b6e:	4924      	ldr	r1, [pc, #144]	@ (8006c00 <Get_Config+0x1c8>)
 8006b70:	4618      	mov	r0, r3
 8006b72:	f00f fa30 	bl	8015fd6 <strncpy>
 8006b76:	e013      	b.n	8006ba0 <Get_Config+0x168>
	}
	else if(strcmp(cfg_var, "TCP_PORT") == 0)
 8006b78:	4922      	ldr	r1, [pc, #136]	@ (8006c04 <Get_Config+0x1cc>)
 8006b7a:	4815      	ldr	r0, [pc, #84]	@ (8006bd0 <Get_Config+0x198>)
 8006b7c:	f7f9 fb28 	bl	80001d0 <strcmp>
 8006b80:	4603      	mov	r3, r0
 8006b82:	2b00      	cmp	r3, #0
 8006b84:	d106      	bne.n	8006b94 <Get_Config+0x15c>
	{
		strncpy(value_str, config.tcp_Port, sizeof(value_str)-1);
 8006b86:	463b      	mov	r3, r7
 8006b88:	227f      	movs	r2, #127	@ 0x7f
 8006b8a:	491f      	ldr	r1, [pc, #124]	@ (8006c08 <Get_Config+0x1d0>)
 8006b8c:	4618      	mov	r0, r3
 8006b8e:	f00f fa22 	bl	8015fd6 <strncpy>
 8006b92:	e005      	b.n	8006ba0 <Get_Config+0x168>
	}
	else
	{
		strncpy(value_str, "UNKNOWN", sizeof(value_str)-1);
 8006b94:	463b      	mov	r3, r7
 8006b96:	227f      	movs	r2, #127	@ 0x7f
 8006b98:	491c      	ldr	r1, [pc, #112]	@ (8006c0c <Get_Config+0x1d4>)
 8006b9a:	4618      	mov	r0, r3
 8006b9c:	f00f fa1b 	bl	8015fd6 <strncpy>
	}

	memset(cfg_var, 0, sizeof(cfg_var));
 8006ba0:	2214      	movs	r2, #20
 8006ba2:	2100      	movs	r1, #0
 8006ba4:	480a      	ldr	r0, [pc, #40]	@ (8006bd0 <Get_Config+0x198>)
 8006ba6:	f00f f9ef 	bl	8015f88 <memset>
	cfg_idx = 0;
 8006baa:	4b12      	ldr	r3, [pc, #72]	@ (8006bf4 <Get_Config+0x1bc>)
 8006bac:	2200      	movs	r2, #0
 8006bae:	601a      	str	r2, [r3, #0]
	memset(new_cfg_val, 0, sizeof(new_cfg_val));	
 8006bb0:	220a      	movs	r2, #10
 8006bb2:	2100      	movs	r1, #0
 8006bb4:	4816      	ldr	r0, [pc, #88]	@ (8006c10 <Get_Config+0x1d8>)
 8006bb6:	f00f f9e7 	bl	8015f88 <memset>

	SIM_Send_TCP(value_str);
 8006bba:	463b      	mov	r3, r7
 8006bbc:	4618      	mov	r0, r3
 8006bbe:	f7fb f9d7 	bl	8001f70 <SIM_Send_TCP>
}
 8006bc2:	bf00      	nop
 8006bc4:	3780      	adds	r7, #128	@ 0x80
 8006bc6:	46bd      	mov	sp, r7
 8006bc8:	bd80      	pop	{r7, pc}
 8006bca:	bf00      	nop
 8006bcc:	080174c0 	.word	0x080174c0
 8006bd0:	200059c8 	.word	0x200059c8
 8006bd4:	200019ec 	.word	0x200019ec
 8006bd8:	08017538 	.word	0x08017538
 8006bdc:	080174cc 	.word	0x080174cc
 8006be0:	080174d8 	.word	0x080174d8
 8006be4:	080174e4 	.word	0x080174e4
 8006be8:	0801753c 	.word	0x0801753c
 8006bec:	080174f4 	.word	0x080174f4
 8006bf0:	08017500 	.word	0x08017500
 8006bf4:	200059dc 	.word	0x200059dc
 8006bf8:	08017508 	.word	0x08017508
 8006bfc:	08017510 	.word	0x08017510
 8006c00:	20001a5a 	.word	0x20001a5a
 8006c04:	08017518 	.word	0x08017518
 8006c08:	20001a9a 	.word	0x20001a9a
 8006c0c:	08017540 	.word	0x08017540
 8006c10:	200059e0 	.word	0x200059e0

08006c14 <Clear_Flags>:

/*-----AZZERAMENTO FLAG-----*/
void Clear_Flags(void)
{
 8006c14:	b580      	push	{r7, lr}
 8006c16:	af00      	add	r7, sp, #0
	if(!sys.ACC_Present)
 8006c18:	4b0d      	ldr	r3, [pc, #52]	@ (8006c50 <Clear_Flags+0x3c>)
 8006c1a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006c1e:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8006c22:	f003 0301 	and.w	r3, r3, #1
 8006c26:	b2db      	uxtb	r3, r3
 8006c28:	2b00      	cmp	r3, #0
 8006c2a:	d10a      	bne.n	8006c42 <Clear_Flags+0x2e>
	{
		memset(&flags, 0, sizeof(flags));
 8006c2c:	2203      	movs	r2, #3
 8006c2e:	2100      	movs	r1, #0
 8006c30:	4808      	ldr	r0, [pc, #32]	@ (8006c54 <Clear_Flags+0x40>)
 8006c32:	f00f f9a9 	bl	8015f88 <memset>
		flags.ACC_Complete = 1;
 8006c36:	4a07      	ldr	r2, [pc, #28]	@ (8006c54 <Clear_Flags+0x40>)
 8006c38:	7813      	ldrb	r3, [r2, #0]
 8006c3a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006c3e:	7013      	strb	r3, [r2, #0]
	else
	{
		memset(&flags, 0, sizeof(flags));
	}

}
 8006c40:	e004      	b.n	8006c4c <Clear_Flags+0x38>
		memset(&flags, 0, sizeof(flags));
 8006c42:	2203      	movs	r2, #3
 8006c44:	2100      	movs	r1, #0
 8006c46:	4803      	ldr	r0, [pc, #12]	@ (8006c54 <Clear_Flags+0x40>)
 8006c48:	f00f f99e 	bl	8015f88 <memset>
}
 8006c4c:	bf00      	nop
 8006c4e:	bd80      	pop	{r7, pc}
 8006c50:	20000840 	.word	0x20000840
 8006c54:	200019e8 	.word	0x200019e8

08006c58 <psram_reset>:
uint32_t	psramSize = 0;
uint32_t	psramNumPages = 0;


int psram_reset()
{
 8006c58:	b580      	push	{r7, lr}
 8006c5a:	b08e      	sub	sp, #56	@ 0x38
 8006c5c:	af00      	add	r7, sp, #0

	QSPI_CommandTypeDef sCommand = {0};
 8006c5e:	463b      	mov	r3, r7
 8006c60:	2238      	movs	r2, #56	@ 0x38
 8006c62:	2100      	movs	r1, #0
 8006c64:	4618      	mov	r0, r3
 8006c66:	f00f f98f 	bl	8015f88 <memset>

	sCommand.Instruction = 0x66;
 8006c6a:	2366      	movs	r3, #102	@ 0x66
 8006c6c:	603b      	str	r3, [r7, #0]
	sCommand.InstructionMode = QSPI_INSTRUCTION_1_LINE;
 8006c6e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8006c72:	61bb      	str	r3, [r7, #24]
	sCommand.AddressSize = QSPI_ADDRESS_NONE;
 8006c74:	2300      	movs	r3, #0
 8006c76:	60fb      	str	r3, [r7, #12]
	sCommand.NbData = 0;
 8006c78:	2300      	movs	r3, #0
 8006c7a:	62bb      	str	r3, [r7, #40]	@ 0x28

	if(HAL_QSPI_Command(PSRAM_SPI, &sCommand, HAL_QSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8006c7c:	463b      	mov	r3, r7
 8006c7e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006c82:	4619      	mov	r1, r3
 8006c84:	480e      	ldr	r0, [pc, #56]	@ (8006cc0 <psram_reset+0x68>)
 8006c86:	f008 f987 	bl	800ef98 <HAL_QSPI_Command>
 8006c8a:	4603      	mov	r3, r0
 8006c8c:	2b00      	cmp	r3, #0
 8006c8e:	d002      	beq.n	8006c96 <psram_reset+0x3e>
	{
		return -1;
 8006c90:	f04f 33ff 	mov.w	r3, #4294967295
 8006c94:	e00f      	b.n	8006cb6 <psram_reset+0x5e>
	}

	sCommand.Instruction = 0x99;
 8006c96:	2399      	movs	r3, #153	@ 0x99
 8006c98:	603b      	str	r3, [r7, #0]

	if(HAL_QSPI_Command(PSRAM_SPI, &sCommand, HAL_QSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8006c9a:	463b      	mov	r3, r7
 8006c9c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006ca0:	4619      	mov	r1, r3
 8006ca2:	4807      	ldr	r0, [pc, #28]	@ (8006cc0 <psram_reset+0x68>)
 8006ca4:	f008 f978 	bl	800ef98 <HAL_QSPI_Command>
 8006ca8:	4603      	mov	r3, r0
 8006caa:	2b00      	cmp	r3, #0
 8006cac:	d002      	beq.n	8006cb4 <psram_reset+0x5c>
	{
		return -1;
 8006cae:	f04f 33ff 	mov.w	r3, #4294967295
 8006cb2:	e000      	b.n	8006cb6 <psram_reset+0x5e>
	}

	return 0;
 8006cb4:	2300      	movs	r3, #0

}
 8006cb6:	4618      	mov	r0, r3
 8006cb8:	3738      	adds	r7, #56	@ 0x38
 8006cba:	46bd      	mov	sp, r7
 8006cbc:	bd80      	pop	{r7, pc}
 8006cbe:	bf00      	nop
 8006cc0:	2000043c 	.word	0x2000043c

08006cc4 <psram_qpi_mode>:
{
	return psramQSPI;
}

int psram_qpi_mode(uint8_t enable)
{
 8006cc4:	b580      	push	{r7, lr}
 8006cc6:	b090      	sub	sp, #64	@ 0x40
 8006cc8:	af00      	add	r7, sp, #0
 8006cca:	4603      	mov	r3, r0
 8006ccc:	71fb      	strb	r3, [r7, #7]

	QSPI_CommandTypeDef sCommand = {0};
 8006cce:	f107 0308 	add.w	r3, r7, #8
 8006cd2:	2238      	movs	r2, #56	@ 0x38
 8006cd4:	2100      	movs	r1, #0
 8006cd6:	4618      	mov	r0, r3
 8006cd8:	f00f f956 	bl	8015f88 <memset>

	if(!psramInitDone)return -1;
 8006cdc:	4b1c      	ldr	r3, [pc, #112]	@ (8006d50 <psram_qpi_mode+0x8c>)
 8006cde:	781b      	ldrb	r3, [r3, #0]
 8006ce0:	2b00      	cmp	r3, #0
 8006ce2:	d102      	bne.n	8006cea <psram_qpi_mode+0x26>
 8006ce4:	f04f 33ff 	mov.w	r3, #4294967295
 8006ce8:	e02d      	b.n	8006d46 <psram_qpi_mode+0x82>

	if(psramQSPI==1 && enable == 0)
 8006cea:	4b1a      	ldr	r3, [pc, #104]	@ (8006d54 <psram_qpi_mode+0x90>)
 8006cec:	781b      	ldrb	r3, [r3, #0]
 8006cee:	2b01      	cmp	r3, #1
 8006cf0:	d108      	bne.n	8006d04 <psram_qpi_mode+0x40>
 8006cf2:	79fb      	ldrb	r3, [r7, #7]
 8006cf4:	2b00      	cmp	r3, #0
 8006cf6:	d105      	bne.n	8006d04 <psram_qpi_mode+0x40>
	{
		sCommand.Instruction = PSRAM_CMD_QPI_DISABLE;
 8006cf8:	23f5      	movs	r3, #245	@ 0xf5
 8006cfa:	60bb      	str	r3, [r7, #8]
		sCommand.InstructionMode = QSPI_INSTRUCTION_4_LINES;
 8006cfc:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8006d00:	623b      	str	r3, [r7, #32]
 8006d02:	e00e      	b.n	8006d22 <psram_qpi_mode+0x5e>

	}else if(psramQSPI==0 && enable == 1)
 8006d04:	4b13      	ldr	r3, [pc, #76]	@ (8006d54 <psram_qpi_mode+0x90>)
 8006d06:	781b      	ldrb	r3, [r3, #0]
 8006d08:	2b00      	cmp	r3, #0
 8006d0a:	d108      	bne.n	8006d1e <psram_qpi_mode+0x5a>
 8006d0c:	79fb      	ldrb	r3, [r7, #7]
 8006d0e:	2b01      	cmp	r3, #1
 8006d10:	d105      	bne.n	8006d1e <psram_qpi_mode+0x5a>
	{
		sCommand.Instruction = PSRAM_CMD_QPI_ENABLE;
 8006d12:	2335      	movs	r3, #53	@ 0x35
 8006d14:	60bb      	str	r3, [r7, #8]
		sCommand.InstructionMode = QSPI_INSTRUCTION_1_LINE;
 8006d16:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8006d1a:	623b      	str	r3, [r7, #32]
 8006d1c:	e001      	b.n	8006d22 <psram_qpi_mode+0x5e>

	}else{

		return 0;
 8006d1e:	2300      	movs	r3, #0
 8006d20:	e011      	b.n	8006d46 <psram_qpi_mode+0x82>

	}

	if(HAL_QSPI_Command(PSRAM_SPI, &sCommand, HAL_QSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8006d22:	f107 0308 	add.w	r3, r7, #8
 8006d26:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006d2a:	4619      	mov	r1, r3
 8006d2c:	480a      	ldr	r0, [pc, #40]	@ (8006d58 <psram_qpi_mode+0x94>)
 8006d2e:	f008 f933 	bl	800ef98 <HAL_QSPI_Command>
 8006d32:	4603      	mov	r3, r0
 8006d34:	2b00      	cmp	r3, #0
 8006d36:	d002      	beq.n	8006d3e <psram_qpi_mode+0x7a>
	{
		return -1;
 8006d38:	f04f 33ff 	mov.w	r3, #4294967295
 8006d3c:	e003      	b.n	8006d46 <psram_qpi_mode+0x82>
	}

	psramQSPI = enable;
 8006d3e:	4a05      	ldr	r2, [pc, #20]	@ (8006d54 <psram_qpi_mode+0x90>)
 8006d40:	79fb      	ldrb	r3, [r7, #7]
 8006d42:	7013      	strb	r3, [r2, #0]

	return 0;
 8006d44:	2300      	movs	r3, #0
}
 8006d46:	4618      	mov	r0, r3
 8006d48:	3740      	adds	r7, #64	@ 0x40
 8006d4a:	46bd      	mov	sp, r7
 8006d4c:	bd80      	pop	{r7, pc}
 8006d4e:	bf00      	nop
 8006d50:	200059ea 	.word	0x200059ea
 8006d54:	200059eb 	.word	0x200059eb
 8006d58:	2000043c 	.word	0x2000043c

08006d5c <psram_read_id>:

int psram_read_id(uint8_t *id_data, int id_data_size)
{
 8006d5c:	b580      	push	{r7, lr}
 8006d5e:	b090      	sub	sp, #64	@ 0x40
 8006d60:	af00      	add	r7, sp, #0
 8006d62:	6078      	str	r0, [r7, #4]
 8006d64:	6039      	str	r1, [r7, #0]
	QSPI_CommandTypeDef sCommand = {0};
 8006d66:	f107 0308 	add.w	r3, r7, #8
 8006d6a:	2238      	movs	r2, #56	@ 0x38
 8006d6c:	2100      	movs	r1, #0
 8006d6e:	4618      	mov	r0, r3
 8006d70:	f00f f90a 	bl	8015f88 <memset>

	if(id_data == NULL || id_data_size < 8)return -2;
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	2b00      	cmp	r3, #0
 8006d78:	d002      	beq.n	8006d80 <psram_read_id+0x24>
 8006d7a:	683b      	ldr	r3, [r7, #0]
 8006d7c:	2b07      	cmp	r3, #7
 8006d7e:	dc02      	bgt.n	8006d86 <psram_read_id+0x2a>
 8006d80:	f06f 0301 	mvn.w	r3, #1
 8006d84:	e034      	b.n	8006df0 <psram_read_id+0x94>

	sCommand.Instruction = 0x9F;
 8006d86:	239f      	movs	r3, #159	@ 0x9f
 8006d88:	60bb      	str	r3, [r7, #8]
	sCommand.InstructionMode = QSPI_INSTRUCTION_1_LINE;
 8006d8a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8006d8e:	623b      	str	r3, [r7, #32]
	sCommand.Address = 0;
 8006d90:	2300      	movs	r3, #0
 8006d92:	60fb      	str	r3, [r7, #12]
	sCommand.AddressSize = QSPI_ADDRESS_24_BITS;
 8006d94:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8006d98:	617b      	str	r3, [r7, #20]
	sCommand.AddressMode = QSPI_ADDRESS_1_LINE;
 8006d9a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8006d9e:	627b      	str	r3, [r7, #36]	@ 0x24
	sCommand.DataMode    = QSPI_DATA_1_LINE;
 8006da0:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8006da4:	62fb      	str	r3, [r7, #44]	@ 0x2c
	sCommand.NbData = 8;
 8006da6:	2308      	movs	r3, #8
 8006da8:	633b      	str	r3, [r7, #48]	@ 0x30
	sCommand.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8006daa:	2300      	movs	r3, #0
 8006dac:	62bb      	str	r3, [r7, #40]	@ 0x28
	sCommand.DdrMode           = QSPI_DDR_MODE_DISABLE;
 8006dae:	2300      	movs	r3, #0
 8006db0:	637b      	str	r3, [r7, #52]	@ 0x34
	sCommand.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 8006db2:	2300      	movs	r3, #0
 8006db4:	63bb      	str	r3, [r7, #56]	@ 0x38
	sCommand.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 8006db6:	2300      	movs	r3, #0
 8006db8:	63fb      	str	r3, [r7, #60]	@ 0x3c

	if(HAL_QSPI_Command(PSRAM_SPI, &sCommand, HAL_QSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8006dba:	f107 0308 	add.w	r3, r7, #8
 8006dbe:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006dc2:	4619      	mov	r1, r3
 8006dc4:	480c      	ldr	r0, [pc, #48]	@ (8006df8 <psram_read_id+0x9c>)
 8006dc6:	f008 f8e7 	bl	800ef98 <HAL_QSPI_Command>
 8006dca:	4603      	mov	r3, r0
 8006dcc:	2b00      	cmp	r3, #0
 8006dce:	d002      	beq.n	8006dd6 <psram_read_id+0x7a>
	{
		return -1;
 8006dd0:	f04f 33ff 	mov.w	r3, #4294967295
 8006dd4:	e00c      	b.n	8006df0 <psram_read_id+0x94>
	}

	if (HAL_QSPI_Receive(PSRAM_SPI, id_data, HAL_QSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8006dd6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006dda:	6879      	ldr	r1, [r7, #4]
 8006ddc:	4806      	ldr	r0, [pc, #24]	@ (8006df8 <psram_read_id+0x9c>)
 8006dde:	f008 f9d0 	bl	800f182 <HAL_QSPI_Receive>
 8006de2:	4603      	mov	r3, r0
 8006de4:	2b00      	cmp	r3, #0
 8006de6:	d002      	beq.n	8006dee <psram_read_id+0x92>
	{
		return -1;
 8006de8:	f04f 33ff 	mov.w	r3, #4294967295
 8006dec:	e000      	b.n	8006df0 <psram_read_id+0x94>
	}


	return 0;
 8006dee:	2300      	movs	r3, #0

}
 8006df0:	4618      	mov	r0, r3
 8006df2:	3740      	adds	r7, #64	@ 0x40
 8006df4:	46bd      	mov	sp, r7
 8006df6:	bd80      	pop	{r7, pc}
 8006df8:	2000043c 	.word	0x2000043c

08006dfc <psram_internal_read_write>:

int psram_internal_read_write(uint8_t write, uint32_t address, uint16_t nbytes, uint8_t *pBuffer)
{
 8006dfc:	b580      	push	{r7, lr}
 8006dfe:	b092      	sub	sp, #72	@ 0x48
 8006e00:	af00      	add	r7, sp, #0
 8006e02:	60b9      	str	r1, [r7, #8]
 8006e04:	607b      	str	r3, [r7, #4]
 8006e06:	4603      	mov	r3, r0
 8006e08:	73fb      	strb	r3, [r7, #15]
 8006e0a:	4613      	mov	r3, r2
 8006e0c:	81bb      	strh	r3, [r7, #12]

	QSPI_CommandTypeDef sCommand = {0};
 8006e0e:	f107 0310 	add.w	r3, r7, #16
 8006e12:	2238      	movs	r2, #56	@ 0x38
 8006e14:	2100      	movs	r1, #0
 8006e16:	4618      	mov	r0, r3
 8006e18:	f00f f8b6 	bl	8015f88 <memset>

	sCommand.Address = address;
 8006e1c:	68bb      	ldr	r3, [r7, #8]
 8006e1e:	617b      	str	r3, [r7, #20]
	sCommand.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8006e20:	2300      	movs	r3, #0
 8006e22:	633b      	str	r3, [r7, #48]	@ 0x30
	sCommand.DdrMode           = QSPI_DDR_MODE_DISABLE;
 8006e24:	2300      	movs	r3, #0
 8006e26:	63fb      	str	r3, [r7, #60]	@ 0x3c
	sCommand.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 8006e28:	2300      	movs	r3, #0
 8006e2a:	643b      	str	r3, [r7, #64]	@ 0x40
	sCommand.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 8006e2c:	2300      	movs	r3, #0
 8006e2e:	647b      	str	r3, [r7, #68]	@ 0x44
	sCommand.NbData = nbytes;
 8006e30:	89bb      	ldrh	r3, [r7, #12]
 8006e32:	63bb      	str	r3, [r7, #56]	@ 0x38

	if(psramQSPI)
 8006e34:	4b33      	ldr	r3, [pc, #204]	@ (8006f04 <psram_internal_read_write+0x108>)
 8006e36:	781b      	ldrb	r3, [r3, #0]
 8006e38:	2b00      	cmp	r3, #0
 8006e3a:	d01a      	beq.n	8006e72 <psram_internal_read_write+0x76>
	{
		//QSPI mode
		sCommand.Instruction = write ? PSRAM_CMD_WRITE_QUAD : PSRAM_CMD_READ_FAST_QIO;
 8006e3c:	7bfb      	ldrb	r3, [r7, #15]
 8006e3e:	2b00      	cmp	r3, #0
 8006e40:	d001      	beq.n	8006e46 <psram_internal_read_write+0x4a>
 8006e42:	2338      	movs	r3, #56	@ 0x38
 8006e44:	e000      	b.n	8006e48 <psram_internal_read_write+0x4c>
 8006e46:	23eb      	movs	r3, #235	@ 0xeb
 8006e48:	613b      	str	r3, [r7, #16]
		sCommand.InstructionMode = QSPI_INSTRUCTION_4_LINES;
 8006e4a:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8006e4e:	62bb      	str	r3, [r7, #40]	@ 0x28
		sCommand.AddressSize = QSPI_ADDRESS_24_BITS;
 8006e50:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8006e54:	61fb      	str	r3, [r7, #28]
		sCommand.AddressMode = QSPI_ADDRESS_4_LINES;
 8006e56:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8006e5a:	62fb      	str	r3, [r7, #44]	@ 0x2c
		sCommand.DataMode    = QSPI_DATA_4_LINES;
 8006e5c:	f04f 7340 	mov.w	r3, #50331648	@ 0x3000000
 8006e60:	637b      	str	r3, [r7, #52]	@ 0x34
		sCommand.DummyCycles = write ? 0 : PSRAM_CMD_QPI_READ_FAST_QIO_WAIT;
 8006e62:	7bfb      	ldrb	r3, [r7, #15]
 8006e64:	2b00      	cmp	r3, #0
 8006e66:	d001      	beq.n	8006e6c <psram_internal_read_write+0x70>
 8006e68:	2300      	movs	r3, #0
 8006e6a:	e000      	b.n	8006e6e <psram_internal_read_write+0x72>
 8006e6c:	2306      	movs	r3, #6
 8006e6e:	627b      	str	r3, [r7, #36]	@ 0x24
 8006e70:	e019      	b.n	8006ea6 <psram_internal_read_write+0xaa>
	}else{
		//SPI mode
		sCommand.Instruction = write ? PSRAM_CMD_WRITE : PSRAM_CMD_READ_FAST;
 8006e72:	7bfb      	ldrb	r3, [r7, #15]
 8006e74:	2b00      	cmp	r3, #0
 8006e76:	d001      	beq.n	8006e7c <psram_internal_read_write+0x80>
 8006e78:	2302      	movs	r3, #2
 8006e7a:	e000      	b.n	8006e7e <psram_internal_read_write+0x82>
 8006e7c:	230b      	movs	r3, #11
 8006e7e:	613b      	str	r3, [r7, #16]
		sCommand.InstructionMode = QSPI_INSTRUCTION_1_LINE;
 8006e80:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8006e84:	62bb      	str	r3, [r7, #40]	@ 0x28
		sCommand.AddressSize = QSPI_ADDRESS_24_BITS;
 8006e86:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8006e8a:	61fb      	str	r3, [r7, #28]
		sCommand.AddressMode = QSPI_ADDRESS_1_LINE;
 8006e8c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8006e90:	62fb      	str	r3, [r7, #44]	@ 0x2c
		sCommand.DataMode    = QSPI_DATA_1_LINE;
 8006e92:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8006e96:	637b      	str	r3, [r7, #52]	@ 0x34
		sCommand.DummyCycles = write ? 0 : PSRAM_CMD_READ_FAST_WAIT;
 8006e98:	7bfb      	ldrb	r3, [r7, #15]
 8006e9a:	2b00      	cmp	r3, #0
 8006e9c:	d001      	beq.n	8006ea2 <psram_internal_read_write+0xa6>
 8006e9e:	2300      	movs	r3, #0
 8006ea0:	e000      	b.n	8006ea4 <psram_internal_read_write+0xa8>
 8006ea2:	2308      	movs	r3, #8
 8006ea4:	627b      	str	r3, [r7, #36]	@ 0x24
	}

	if(HAL_QSPI_Command(PSRAM_SPI, &sCommand, HAL_QSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8006ea6:	f107 0310 	add.w	r3, r7, #16
 8006eaa:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006eae:	4619      	mov	r1, r3
 8006eb0:	4815      	ldr	r0, [pc, #84]	@ (8006f08 <psram_internal_read_write+0x10c>)
 8006eb2:	f008 f871 	bl	800ef98 <HAL_QSPI_Command>
 8006eb6:	4603      	mov	r3, r0
 8006eb8:	2b00      	cmp	r3, #0
 8006eba:	d002      	beq.n	8006ec2 <psram_internal_read_write+0xc6>
	{
		return -1;
 8006ebc:	f04f 33ff 	mov.w	r3, #4294967295
 8006ec0:	e01b      	b.n	8006efa <psram_internal_read_write+0xfe>
	}

	if(write)
 8006ec2:	7bfb      	ldrb	r3, [r7, #15]
 8006ec4:	2b00      	cmp	r3, #0
 8006ec6:	d00b      	beq.n	8006ee0 <psram_internal_read_write+0xe4>
	{
		if (HAL_QSPI_Transmit(PSRAM_SPI, pBuffer, HAL_QSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8006ec8:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006ecc:	6879      	ldr	r1, [r7, #4]
 8006ece:	480e      	ldr	r0, [pc, #56]	@ (8006f08 <psram_internal_read_write+0x10c>)
 8006ed0:	f008 f8c0 	bl	800f054 <HAL_QSPI_Transmit>
 8006ed4:	4603      	mov	r3, r0
 8006ed6:	2b00      	cmp	r3, #0
 8006ed8:	d00e      	beq.n	8006ef8 <psram_internal_read_write+0xfc>
		{
			return -1;
 8006eda:	f04f 33ff 	mov.w	r3, #4294967295
 8006ede:	e00c      	b.n	8006efa <psram_internal_read_write+0xfe>
		}

	}else{

		if (HAL_QSPI_Receive(PSRAM_SPI, pBuffer, HAL_QSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8006ee0:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006ee4:	6879      	ldr	r1, [r7, #4]
 8006ee6:	4808      	ldr	r0, [pc, #32]	@ (8006f08 <psram_internal_read_write+0x10c>)
 8006ee8:	f008 f94b 	bl	800f182 <HAL_QSPI_Receive>
 8006eec:	4603      	mov	r3, r0
 8006eee:	2b00      	cmp	r3, #0
 8006ef0:	d002      	beq.n	8006ef8 <psram_internal_read_write+0xfc>
		{
			return -1;
 8006ef2:	f04f 33ff 	mov.w	r3, #4294967295
 8006ef6:	e000      	b.n	8006efa <psram_internal_read_write+0xfe>
		}

	}

	return 0;
 8006ef8:	2300      	movs	r3, #0
}
 8006efa:	4618      	mov	r0, r3
 8006efc:	3748      	adds	r7, #72	@ 0x48
 8006efe:	46bd      	mov	sp, r7
 8006f00:	bd80      	pop	{r7, pc}
 8006f02:	bf00      	nop
 8006f04:	200059eb 	.word	0x200059eb
 8006f08:	2000043c 	.word	0x2000043c

08006f0c <psram_sector_read_write>:


//Funzione usata da FatFs
int psram_sector_read_write(uint8_t write, uint32_t sector, uint32_t nsectors, uint8_t *pBuffer)
{
 8006f0c:	b580      	push	{r7, lr}
 8006f0e:	b088      	sub	sp, #32
 8006f10:	af00      	add	r7, sp, #0
 8006f12:	60b9      	str	r1, [r7, #8]
 8006f14:	607a      	str	r2, [r7, #4]
 8006f16:	603b      	str	r3, [r7, #0]
 8006f18:	4603      	mov	r3, r0
 8006f1a:	73fb      	strb	r3, [r7, #15]
	int result = 0;
 8006f1c:	2300      	movs	r3, #0
 8006f1e:	617b      	str	r3, [r7, #20]
	uint8_t *wPtr = pBuffer;
 8006f20:	683b      	ldr	r3, [r7, #0]
 8006f22:	61fb      	str	r3, [r7, #28]
	uint32_t address = sector * PSRAM_PAGE_SIZE;
 8006f24:	68bb      	ldr	r3, [r7, #8]
 8006f26:	029b      	lsls	r3, r3, #10
 8006f28:	61bb      	str	r3, [r7, #24]

	while(nsectors > 0)
 8006f2a:	e018      	b.n	8006f5e <psram_sector_read_write+0x52>
	{
		result = psram_internal_read_write(write, address, PSRAM_PAGE_SIZE, wPtr);
 8006f2c:	7bf8      	ldrb	r0, [r7, #15]
 8006f2e:	69fb      	ldr	r3, [r7, #28]
 8006f30:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8006f34:	69b9      	ldr	r1, [r7, #24]
 8006f36:	f7ff ff61 	bl	8006dfc <psram_internal_read_write>
 8006f3a:	6178      	str	r0, [r7, #20]
		if(result < 0)return -1;
 8006f3c:	697b      	ldr	r3, [r7, #20]
 8006f3e:	2b00      	cmp	r3, #0
 8006f40:	da02      	bge.n	8006f48 <psram_sector_read_write+0x3c>
 8006f42:	f04f 33ff 	mov.w	r3, #4294967295
 8006f46:	e00e      	b.n	8006f66 <psram_sector_read_write+0x5a>
		address += PSRAM_PAGE_SIZE;
 8006f48:	69bb      	ldr	r3, [r7, #24]
 8006f4a:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8006f4e:	61bb      	str	r3, [r7, #24]
		wPtr += PSRAM_PAGE_SIZE;
 8006f50:	69fb      	ldr	r3, [r7, #28]
 8006f52:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8006f56:	61fb      	str	r3, [r7, #28]
		nsectors--;
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	3b01      	subs	r3, #1
 8006f5c:	607b      	str	r3, [r7, #4]
	while(nsectors > 0)
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	2b00      	cmp	r3, #0
 8006f62:	d1e3      	bne.n	8006f2c <psram_sector_read_write+0x20>
	}

	return 0;
 8006f64:	2300      	movs	r3, #0
}
 8006f66:	4618      	mov	r0, r3
 8006f68:	3720      	adds	r7, #32
 8006f6a:	46bd      	mov	sp, r7
 8006f6c:	bd80      	pop	{r7, pc}
	...

08006f70 <psram_read_write>:



int psram_read_write(uint8_t write, uint32_t address, uint32_t nbytes, uint8_t *pBuffer)
{
 8006f70:	b580      	push	{r7, lr}
 8006f72:	b088      	sub	sp, #32
 8006f74:	af00      	add	r7, sp, #0
 8006f76:	60b9      	str	r1, [r7, #8]
 8006f78:	607a      	str	r2, [r7, #4]
 8006f7a:	603b      	str	r3, [r7, #0]
 8006f7c:	4603      	mov	r3, r0
 8006f7e:	73fb      	strb	r3, [r7, #15]
	int result = 0;
 8006f80:	2300      	movs	r3, #0
 8006f82:	61bb      	str	r3, [r7, #24]
	uint32_t trBytes = 0;
 8006f84:	2300      	movs	r3, #0
 8006f86:	617b      	str	r3, [r7, #20]
	uint8_t *wPtr = pBuffer;
 8006f88:	683b      	ldr	r3, [r7, #0]
 8006f8a:	61fb      	str	r3, [r7, #28]

	//Check indirizzo
	if(!psramInitDone || pBuffer==NULL)return -1;
 8006f8c:	4b1e      	ldr	r3, [pc, #120]	@ (8007008 <psram_read_write+0x98>)
 8006f8e:	781b      	ldrb	r3, [r3, #0]
 8006f90:	2b00      	cmp	r3, #0
 8006f92:	d002      	beq.n	8006f9a <psram_read_write+0x2a>
 8006f94:	683b      	ldr	r3, [r7, #0]
 8006f96:	2b00      	cmp	r3, #0
 8006f98:	d102      	bne.n	8006fa0 <psram_read_write+0x30>
 8006f9a:	f04f 33ff 	mov.w	r3, #4294967295
 8006f9e:	e02e      	b.n	8006ffe <psram_read_write+0x8e>
	if(address + nbytes >= psramSize)return -2;
 8006fa0:	68ba      	ldr	r2, [r7, #8]
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	441a      	add	r2, r3
 8006fa6:	4b19      	ldr	r3, [pc, #100]	@ (800700c <psram_read_write+0x9c>)
 8006fa8:	681b      	ldr	r3, [r3, #0]
 8006faa:	429a      	cmp	r2, r3
 8006fac:	d323      	bcc.n	8006ff6 <psram_read_write+0x86>
 8006fae:	f06f 0301 	mvn.w	r3, #1
 8006fb2:	e024      	b.n	8006ffe <psram_read_write+0x8e>

	while(nbytes > 0)
	{
		trBytes = nbytes > PSRAM_PAGE_SIZE ? PSRAM_PAGE_SIZE : nbytes;
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006fba:	bf28      	it	cs
 8006fbc:	f44f 6380 	movcs.w	r3, #1024	@ 0x400
 8006fc0:	617b      	str	r3, [r7, #20]
		result = psram_internal_read_write(write, address, trBytes, wPtr);
 8006fc2:	697b      	ldr	r3, [r7, #20]
 8006fc4:	b29a      	uxth	r2, r3
 8006fc6:	7bf8      	ldrb	r0, [r7, #15]
 8006fc8:	69fb      	ldr	r3, [r7, #28]
 8006fca:	68b9      	ldr	r1, [r7, #8]
 8006fcc:	f7ff ff16 	bl	8006dfc <psram_internal_read_write>
 8006fd0:	61b8      	str	r0, [r7, #24]

		if(result < 0)return -1;
 8006fd2:	69bb      	ldr	r3, [r7, #24]
 8006fd4:	2b00      	cmp	r3, #0
 8006fd6:	da02      	bge.n	8006fde <psram_read_write+0x6e>
 8006fd8:	f04f 33ff 	mov.w	r3, #4294967295
 8006fdc:	e00f      	b.n	8006ffe <psram_read_write+0x8e>

		address += trBytes;
 8006fde:	68ba      	ldr	r2, [r7, #8]
 8006fe0:	697b      	ldr	r3, [r7, #20]
 8006fe2:	4413      	add	r3, r2
 8006fe4:	60bb      	str	r3, [r7, #8]
		wPtr += trBytes;
 8006fe6:	69fa      	ldr	r2, [r7, #28]
 8006fe8:	697b      	ldr	r3, [r7, #20]
 8006fea:	4413      	add	r3, r2
 8006fec:	61fb      	str	r3, [r7, #28]
		nbytes -= trBytes;
 8006fee:	687a      	ldr	r2, [r7, #4]
 8006ff0:	697b      	ldr	r3, [r7, #20]
 8006ff2:	1ad3      	subs	r3, r2, r3
 8006ff4:	607b      	str	r3, [r7, #4]
	while(nbytes > 0)
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	2b00      	cmp	r3, #0
 8006ffa:	d1db      	bne.n	8006fb4 <psram_read_write+0x44>
	}

	return 0;
 8006ffc:	2300      	movs	r3, #0
}
 8006ffe:	4618      	mov	r0, r3
 8007000:	3720      	adds	r7, #32
 8007002:	46bd      	mov	sp, r7
 8007004:	bd80      	pop	{r7, pc}
 8007006:	bf00      	nop
 8007008:	200059ea 	.word	0x200059ea
 800700c:	200059f4 	.word	0x200059f4

08007010 <raw_psram_read_write>:

int raw_psram_read_write(uint8_t write, uint32_t address, uint32_t nbytes, uint8_t *pBuffer)
{
 8007010:	b580      	push	{r7, lr}
 8007012:	b088      	sub	sp, #32
 8007014:	af00      	add	r7, sp, #0
 8007016:	60b9      	str	r1, [r7, #8]
 8007018:	607a      	str	r2, [r7, #4]
 800701a:	603b      	str	r3, [r7, #0]
 800701c:	4603      	mov	r3, r0
 800701e:	73fb      	strb	r3, [r7, #15]
	int result = 0;
 8007020:	2300      	movs	r3, #0
 8007022:	617b      	str	r3, [r7, #20]
	uint32_t trBytes = 0;
 8007024:	2300      	movs	r3, #0
 8007026:	61fb      	str	r3, [r7, #28]
	uint8_t *wPtr = pBuffer;
 8007028:	683b      	ldr	r3, [r7, #0]
 800702a:	61bb      	str	r3, [r7, #24]

	//Check indirizzo
	if(!psramInitDone || pBuffer==NULL)return -1;
 800702c:	4b21      	ldr	r3, [pc, #132]	@ (80070b4 <raw_psram_read_write+0xa4>)
 800702e:	781b      	ldrb	r3, [r3, #0]
 8007030:	2b00      	cmp	r3, #0
 8007032:	d002      	beq.n	800703a <raw_psram_read_write+0x2a>
 8007034:	683b      	ldr	r3, [r7, #0]
 8007036:	2b00      	cmp	r3, #0
 8007038:	d102      	bne.n	8007040 <raw_psram_read_write+0x30>
 800703a:	f04f 33ff 	mov.w	r3, #4294967295
 800703e:	e035      	b.n	80070ac <raw_psram_read_write+0x9c>
	if(address + nbytes >= psramSize)return -2;
 8007040:	68ba      	ldr	r2, [r7, #8]
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	441a      	add	r2, r3
 8007046:	4b1c      	ldr	r3, [pc, #112]	@ (80070b8 <raw_psram_read_write+0xa8>)
 8007048:	681b      	ldr	r3, [r3, #0]
 800704a:	429a      	cmp	r2, r3
 800704c:	d302      	bcc.n	8007054 <raw_psram_read_write+0x44>
 800704e:	f06f 0301 	mvn.w	r3, #1
 8007052:	e02b      	b.n	80070ac <raw_psram_read_write+0x9c>

	trBytes = 1024 - address % 1024;
 8007054:	68bb      	ldr	r3, [r7, #8]
 8007056:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800705a:	f5c3 6380 	rsb	r3, r3, #1024	@ 0x400
 800705e:	61fb      	str	r3, [r7, #28]
	while(nbytes > 0)
 8007060:	e020      	b.n	80070a4 <raw_psram_read_write+0x94>
	{
		result = psram_internal_read_write(write, address, trBytes, wPtr);
 8007062:	69fb      	ldr	r3, [r7, #28]
 8007064:	b29a      	uxth	r2, r3
 8007066:	7bf8      	ldrb	r0, [r7, #15]
 8007068:	69bb      	ldr	r3, [r7, #24]
 800706a:	68b9      	ldr	r1, [r7, #8]
 800706c:	f7ff fec6 	bl	8006dfc <psram_internal_read_write>
 8007070:	6178      	str	r0, [r7, #20]

		if(result < 0)return -1;
 8007072:	697b      	ldr	r3, [r7, #20]
 8007074:	2b00      	cmp	r3, #0
 8007076:	da02      	bge.n	800707e <raw_psram_read_write+0x6e>
 8007078:	f04f 33ff 	mov.w	r3, #4294967295
 800707c:	e016      	b.n	80070ac <raw_psram_read_write+0x9c>

		address += trBytes;
 800707e:	68ba      	ldr	r2, [r7, #8]
 8007080:	69fb      	ldr	r3, [r7, #28]
 8007082:	4413      	add	r3, r2
 8007084:	60bb      	str	r3, [r7, #8]
		wPtr += trBytes;
 8007086:	69ba      	ldr	r2, [r7, #24]
 8007088:	69fb      	ldr	r3, [r7, #28]
 800708a:	4413      	add	r3, r2
 800708c:	61bb      	str	r3, [r7, #24]
		nbytes -= trBytes;
 800708e:	687a      	ldr	r2, [r7, #4]
 8007090:	69fb      	ldr	r3, [r7, #28]
 8007092:	1ad3      	subs	r3, r2, r3
 8007094:	607b      	str	r3, [r7, #4]
		trBytes = nbytes > PSRAM_PAGE_SIZE ? PSRAM_PAGE_SIZE : nbytes;
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800709c:	bf28      	it	cs
 800709e:	f44f 6380 	movcs.w	r3, #1024	@ 0x400
 80070a2:	61fb      	str	r3, [r7, #28]
	while(nbytes > 0)
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	2b00      	cmp	r3, #0
 80070a8:	d1db      	bne.n	8007062 <raw_psram_read_write+0x52>
	}

	return 0;
 80070aa:	2300      	movs	r3, #0
}
 80070ac:	4618      	mov	r0, r3
 80070ae:	3720      	adds	r7, #32
 80070b0:	46bd      	mov	sp, r7
 80070b2:	bd80      	pop	{r7, pc}
 80070b4:	200059ea 	.word	0x200059ea
 80070b8:	200059f4 	.word	0x200059f4

080070bc <RAM_Write>:
{
	return psram_read_write(1, address, nbytes, pBuffer);
}

int RAM_Write(uint32_t address, uint32_t nbytes, uint8_t *pBuffer)
{
 80070bc:	b580      	push	{r7, lr}
 80070be:	b084      	sub	sp, #16
 80070c0:	af00      	add	r7, sp, #0
 80070c2:	60f8      	str	r0, [r7, #12]
 80070c4:	60b9      	str	r1, [r7, #8]
 80070c6:	607a      	str	r2, [r7, #4]
	return raw_psram_read_write(1, address, nbytes, pBuffer);
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	68ba      	ldr	r2, [r7, #8]
 80070cc:	68f9      	ldr	r1, [r7, #12]
 80070ce:	2001      	movs	r0, #1
 80070d0:	f7ff ff9e 	bl	8007010 <raw_psram_read_write>
 80070d4:	4603      	mov	r3, r0
}
 80070d6:	4618      	mov	r0, r3
 80070d8:	3710      	adds	r7, #16
 80070da:	46bd      	mov	sp, r7
 80070dc:	bd80      	pop	{r7, pc}

080070de <RAM_Read>:

int RAM_Read(uint32_t address, uint32_t nbytes, uint8_t *pBuffer)
{
 80070de:	b580      	push	{r7, lr}
 80070e0:	b084      	sub	sp, #16
 80070e2:	af00      	add	r7, sp, #0
 80070e4:	60f8      	str	r0, [r7, #12]
 80070e6:	60b9      	str	r1, [r7, #8]
 80070e8:	607a      	str	r2, [r7, #4]
	return psram_read_write(0, address, nbytes, pBuffer);
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	68ba      	ldr	r2, [r7, #8]
 80070ee:	68f9      	ldr	r1, [r7, #12]
 80070f0:	2000      	movs	r0, #0
 80070f2:	f7ff ff3d 	bl	8006f70 <psram_read_write>
 80070f6:	4603      	mov	r3, r0
}
 80070f8:	4618      	mov	r0, r3
 80070fa:	3710      	adds	r7, #16
 80070fc:	46bd      	mov	sp, r7
 80070fe:	bd80      	pop	{r7, pc}

08007100 <psram_is_initialized>:


int psram_is_initialized()
{
 8007100:	b480      	push	{r7}
 8007102:	af00      	add	r7, sp, #0
	return psramInitDone;
 8007104:	4b03      	ldr	r3, [pc, #12]	@ (8007114 <psram_is_initialized+0x14>)
 8007106:	781b      	ldrb	r3, [r3, #0]
}
 8007108:	4618      	mov	r0, r3
 800710a:	46bd      	mov	sp, r7
 800710c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007110:	4770      	bx	lr
 8007112:	bf00      	nop
 8007114:	200059ea 	.word	0x200059ea

08007118 <psram_get_sector_size>:

unsigned int psram_get_sector_size()
{
 8007118:	b480      	push	{r7}
 800711a:	af00      	add	r7, sp, #0
	return PSRAM_PAGE_SIZE;
 800711c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
}
 8007120:	4618      	mov	r0, r3
 8007122:	46bd      	mov	sp, r7
 8007124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007128:	4770      	bx	lr
	...

0800712c <psram_get_sector_count>:

unsigned int psram_get_sector_count()
{
 800712c:	b480      	push	{r7}
 800712e:	af00      	add	r7, sp, #0
	return psramNumPages;
 8007130:	4b03      	ldr	r3, [pc, #12]	@ (8007140 <psram_get_sector_count+0x14>)
 8007132:	681b      	ldr	r3, [r3, #0]
}
 8007134:	4618      	mov	r0, r3
 8007136:	46bd      	mov	sp, r7
 8007138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800713c:	4770      	bx	lr
 800713e:	bf00      	nop
 8007140:	200059f8 	.word	0x200059f8

08007144 <psram_get_size>:

unsigned int psram_get_size()
{
 8007144:	b480      	push	{r7}
 8007146:	af00      	add	r7, sp, #0
	return psramSize;
 8007148:	4b03      	ldr	r3, [pc, #12]	@ (8007158 <psram_get_size+0x14>)
 800714a:	681b      	ldr	r3, [r3, #0]
}
 800714c:	4618      	mov	r0, r3
 800714e:	46bd      	mov	sp, r7
 8007150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007154:	4770      	bx	lr
 8007156:	bf00      	nop
 8007158:	200059f4 	.word	0x200059f4

0800715c <psram_init>:

int psram_init()
{
 800715c:	b580      	push	{r7, lr}
 800715e:	b082      	sub	sp, #8
 8007160:	af00      	add	r7, sp, #0

	uint8_t density = 0xFF;
 8007162:	23ff      	movs	r3, #255	@ 0xff
 8007164:	71fb      	strb	r3, [r7, #7]

	psramInitDone = 0;
 8007166:	4b20      	ldr	r3, [pc, #128]	@ (80071e8 <psram_init+0x8c>)
 8007168:	2200      	movs	r2, #0
 800716a:	701a      	strb	r2, [r3, #0]

	if(psram_reset() < 0)return -1;
 800716c:	f7ff fd74 	bl	8006c58 <psram_reset>
 8007170:	4603      	mov	r3, r0
 8007172:	2b00      	cmp	r3, #0
 8007174:	da02      	bge.n	800717c <psram_init+0x20>
 8007176:	f04f 33ff 	mov.w	r3, #4294967295
 800717a:	e030      	b.n	80071de <psram_init+0x82>

	memset(psramId, 0xFF, sizeof(psramId));
 800717c:	2208      	movs	r2, #8
 800717e:	21ff      	movs	r1, #255	@ 0xff
 8007180:	481a      	ldr	r0, [pc, #104]	@ (80071ec <psram_init+0x90>)
 8007182:	f00e ff01 	bl	8015f88 <memset>

	if(psram_read_id(psramId, sizeof(psramId)) < 0)return -1;
 8007186:	2108      	movs	r1, #8
 8007188:	4818      	ldr	r0, [pc, #96]	@ (80071ec <psram_init+0x90>)
 800718a:	f7ff fde7 	bl	8006d5c <psram_read_id>
 800718e:	4603      	mov	r3, r0
 8007190:	2b00      	cmp	r3, #0
 8007192:	da02      	bge.n	800719a <psram_init+0x3e>
 8007194:	f04f 33ff 	mov.w	r3, #4294967295
 8007198:	e021      	b.n	80071de <psram_init+0x82>

	density = psramId[2] >> 5;
 800719a:	4b14      	ldr	r3, [pc, #80]	@ (80071ec <psram_init+0x90>)
 800719c:	789b      	ldrb	r3, [r3, #2]
 800719e:	095b      	lsrs	r3, r3, #5
 80071a0:	71fb      	strb	r3, [r7, #7]

	if(psramId[0] == PSRAM_MANUFACTURER && psramId[1] == PSRAM_KGD && density <= PSRAM_DENSITY_64MB)
 80071a2:	4b12      	ldr	r3, [pc, #72]	@ (80071ec <psram_init+0x90>)
 80071a4:	781b      	ldrb	r3, [r3, #0]
 80071a6:	2b0d      	cmp	r3, #13
 80071a8:	d117      	bne.n	80071da <psram_init+0x7e>
 80071aa:	4b10      	ldr	r3, [pc, #64]	@ (80071ec <psram_init+0x90>)
 80071ac:	785b      	ldrb	r3, [r3, #1]
 80071ae:	2b5d      	cmp	r3, #93	@ 0x5d
 80071b0:	d113      	bne.n	80071da <psram_init+0x7e>
 80071b2:	79fb      	ldrb	r3, [r7, #7]
 80071b4:	2b03      	cmp	r3, #3
 80071b6:	d810      	bhi.n	80071da <psram_init+0x7e>
	{
		psramSize = PSRAM_DENSITY_64MB_EADDR;
 80071b8:	4b0d      	ldr	r3, [pc, #52]	@ (80071f0 <psram_init+0x94>)
 80071ba:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 80071be:	601a      	str	r2, [r3, #0]
		psramNumPages = psramSize / PSRAM_PAGE_SIZE;
 80071c0:	4b0b      	ldr	r3, [pc, #44]	@ (80071f0 <psram_init+0x94>)
 80071c2:	681b      	ldr	r3, [r3, #0]
 80071c4:	0a9b      	lsrs	r3, r3, #10
 80071c6:	4a0b      	ldr	r2, [pc, #44]	@ (80071f4 <psram_init+0x98>)
 80071c8:	6013      	str	r3, [r2, #0]

		psram_qpi_mode(1);
 80071ca:	2001      	movs	r0, #1
 80071cc:	f7ff fd7a 	bl	8006cc4 <psram_qpi_mode>

		psramInitDone = 1;
 80071d0:	4b05      	ldr	r3, [pc, #20]	@ (80071e8 <psram_init+0x8c>)
 80071d2:	2201      	movs	r2, #1
 80071d4:	701a      	strb	r2, [r3, #0]
		return 0;
 80071d6:	2300      	movs	r3, #0
 80071d8:	e001      	b.n	80071de <psram_init+0x82>
	}else{
		return -1;
 80071da:	f04f 33ff 	mov.w	r3, #4294967295
	}

}
 80071de:	4618      	mov	r0, r3
 80071e0:	3708      	adds	r7, #8
 80071e2:	46bd      	mov	sp, r7
 80071e4:	bd80      	pop	{r7, pc}
 80071e6:	bf00      	nop
 80071e8:	200059ea 	.word	0x200059ea
 80071ec:	200059ec 	.word	0x200059ec
 80071f0:	200059f4 	.word	0x200059f4
 80071f4:	200059f8 	.word	0x200059f8

080071f8 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80071f8:	b480      	push	{r7}
 80071fa:	b083      	sub	sp, #12
 80071fc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80071fe:	4b0f      	ldr	r3, [pc, #60]	@ (800723c <HAL_MspInit+0x44>)
 8007200:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007202:	4a0e      	ldr	r2, [pc, #56]	@ (800723c <HAL_MspInit+0x44>)
 8007204:	f043 0301 	orr.w	r3, r3, #1
 8007208:	6613      	str	r3, [r2, #96]	@ 0x60
 800720a:	4b0c      	ldr	r3, [pc, #48]	@ (800723c <HAL_MspInit+0x44>)
 800720c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800720e:	f003 0301 	and.w	r3, r3, #1
 8007212:	607b      	str	r3, [r7, #4]
 8007214:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8007216:	4b09      	ldr	r3, [pc, #36]	@ (800723c <HAL_MspInit+0x44>)
 8007218:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800721a:	4a08      	ldr	r2, [pc, #32]	@ (800723c <HAL_MspInit+0x44>)
 800721c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007220:	6593      	str	r3, [r2, #88]	@ 0x58
 8007222:	4b06      	ldr	r3, [pc, #24]	@ (800723c <HAL_MspInit+0x44>)
 8007224:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007226:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800722a:	603b      	str	r3, [r7, #0]
 800722c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800722e:	bf00      	nop
 8007230:	370c      	adds	r7, #12
 8007232:	46bd      	mov	sp, r7
 8007234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007238:	4770      	bx	lr
 800723a:	bf00      	nop
 800723c:	40021000 	.word	0x40021000

08007240 <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8007240:	b580      	push	{r7, lr}
 8007242:	b0ac      	sub	sp, #176	@ 0xb0
 8007244:	af00      	add	r7, sp, #0
 8007246:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007248:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 800724c:	2200      	movs	r2, #0
 800724e:	601a      	str	r2, [r3, #0]
 8007250:	605a      	str	r2, [r3, #4]
 8007252:	609a      	str	r2, [r3, #8]
 8007254:	60da      	str	r2, [r3, #12]
 8007256:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8007258:	f107 0314 	add.w	r3, r7, #20
 800725c:	2288      	movs	r2, #136	@ 0x88
 800725e:	2100      	movs	r1, #0
 8007260:	4618      	mov	r0, r3
 8007262:	f00e fe91 	bl	8015f88 <memset>
  if(hadc->Instance==ADC1)
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	681b      	ldr	r3, [r3, #0]
 800726a:	4a3d      	ldr	r2, [pc, #244]	@ (8007360 <HAL_ADC_MspInit+0x120>)
 800726c:	4293      	cmp	r3, r2
 800726e:	d172      	bne.n	8007356 <HAL_ADC_MspInit+0x116>

    /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8007270:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8007274:	617b      	str	r3, [r7, #20]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 8007276:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 800727a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_HSE;
 800727e:	2303      	movs	r3, #3
 8007280:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8007282:	2301      	movs	r3, #1
 8007284:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 8;
 8007286:	2308      	movs	r3, #8
 8007288:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 800728a:	2307      	movs	r3, #7
 800728c:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 800728e:	2302      	movs	r3, #2
 8007290:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8007292:	2302      	movs	r3, #2
 8007294:	62fb      	str	r3, [r7, #44]	@ 0x2c
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 8007296:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800729a:	633b      	str	r3, [r7, #48]	@ 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800729c:	f107 0314 	add.w	r3, r7, #20
 80072a0:	4618      	mov	r0, r3
 80072a2:	f009 f865 	bl	8010370 <HAL_RCCEx_PeriphCLKConfig>
 80072a6:	4603      	mov	r3, r0
 80072a8:	2b00      	cmp	r3, #0
 80072aa:	d001      	beq.n	80072b0 <HAL_ADC_MspInit+0x70>
    {
      Error_Handler();
 80072ac:	f7fd ffc0 	bl	8005230 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 80072b0:	4b2c      	ldr	r3, [pc, #176]	@ (8007364 <HAL_ADC_MspInit+0x124>)
 80072b2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80072b4:	4a2b      	ldr	r2, [pc, #172]	@ (8007364 <HAL_ADC_MspInit+0x124>)
 80072b6:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80072ba:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80072bc:	4b29      	ldr	r3, [pc, #164]	@ (8007364 <HAL_ADC_MspInit+0x124>)
 80072be:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80072c0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80072c4:	613b      	str	r3, [r7, #16]
 80072c6:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80072c8:	4b26      	ldr	r3, [pc, #152]	@ (8007364 <HAL_ADC_MspInit+0x124>)
 80072ca:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80072cc:	4a25      	ldr	r2, [pc, #148]	@ (8007364 <HAL_ADC_MspInit+0x124>)
 80072ce:	f043 0301 	orr.w	r3, r3, #1
 80072d2:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80072d4:	4b23      	ldr	r3, [pc, #140]	@ (8007364 <HAL_ADC_MspInit+0x124>)
 80072d6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80072d8:	f003 0301 	and.w	r3, r3, #1
 80072dc:	60fb      	str	r3, [r7, #12]
 80072de:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA4     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 80072e0:	2310      	movs	r3, #16
 80072e2:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 80072e6:	230b      	movs	r3, #11
 80072e8:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80072ec:	2300      	movs	r3, #0
 80072ee:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80072f2:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 80072f6:	4619      	mov	r1, r3
 80072f8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80072fc:	f006 fdb0 	bl	800de60 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8007300:	4b19      	ldr	r3, [pc, #100]	@ (8007368 <HAL_ADC_MspInit+0x128>)
 8007302:	4a1a      	ldr	r2, [pc, #104]	@ (800736c <HAL_ADC_MspInit+0x12c>)
 8007304:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_0;
 8007306:	4b18      	ldr	r3, [pc, #96]	@ (8007368 <HAL_ADC_MspInit+0x128>)
 8007308:	2200      	movs	r2, #0
 800730a:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800730c:	4b16      	ldr	r3, [pc, #88]	@ (8007368 <HAL_ADC_MspInit+0x128>)
 800730e:	2200      	movs	r2, #0
 8007310:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8007312:	4b15      	ldr	r3, [pc, #84]	@ (8007368 <HAL_ADC_MspInit+0x128>)
 8007314:	2200      	movs	r2, #0
 8007316:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8007318:	4b13      	ldr	r3, [pc, #76]	@ (8007368 <HAL_ADC_MspInit+0x128>)
 800731a:	2280      	movs	r2, #128	@ 0x80
 800731c:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800731e:	4b12      	ldr	r3, [pc, #72]	@ (8007368 <HAL_ADC_MspInit+0x128>)
 8007320:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8007324:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8007326:	4b10      	ldr	r3, [pc, #64]	@ (8007368 <HAL_ADC_MspInit+0x128>)
 8007328:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800732c:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 800732e:	4b0e      	ldr	r3, [pc, #56]	@ (8007368 <HAL_ADC_MspInit+0x128>)
 8007330:	2220      	movs	r2, #32
 8007332:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8007334:	4b0c      	ldr	r3, [pc, #48]	@ (8007368 <HAL_ADC_MspInit+0x128>)
 8007336:	2200      	movs	r2, #0
 8007338:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 800733a:	480b      	ldr	r0, [pc, #44]	@ (8007368 <HAL_ADC_MspInit+0x128>)
 800733c:	f005 fc8a 	bl	800cc54 <HAL_DMA_Init>
 8007340:	4603      	mov	r3, r0
 8007342:	2b00      	cmp	r3, #0
 8007344:	d001      	beq.n	800734a <HAL_ADC_MspInit+0x10a>
    {
      Error_Handler();
 8007346:	f7fd ff73 	bl	8005230 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	4a06      	ldr	r2, [pc, #24]	@ (8007368 <HAL_ADC_MspInit+0x128>)
 800734e:	64da      	str	r2, [r3, #76]	@ 0x4c
 8007350:	4a05      	ldr	r2, [pc, #20]	@ (8007368 <HAL_ADC_MspInit+0x128>)
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	6293      	str	r3, [r2, #40]	@ 0x28

    /* USER CODE END ADC1_MspInit 1 */

  }

}
 8007356:	bf00      	nop
 8007358:	37b0      	adds	r7, #176	@ 0xb0
 800735a:	46bd      	mov	sp, r7
 800735c:	bd80      	pop	{r7, pc}
 800735e:	bf00      	nop
 8007360:	50040000 	.word	0x50040000
 8007364:	40021000 	.word	0x40021000
 8007368:	2000037c 	.word	0x2000037c
 800736c:	40020008 	.word	0x40020008

08007370 <HAL_CRC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hcrc: CRC handle pointer
  * @retval None
  */
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 8007370:	b480      	push	{r7}
 8007372:	b085      	sub	sp, #20
 8007374:	af00      	add	r7, sp, #0
 8007376:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	681b      	ldr	r3, [r3, #0]
 800737c:	4a0a      	ldr	r2, [pc, #40]	@ (80073a8 <HAL_CRC_MspInit+0x38>)
 800737e:	4293      	cmp	r3, r2
 8007380:	d10b      	bne.n	800739a <HAL_CRC_MspInit+0x2a>
  {
    /* USER CODE BEGIN CRC_MspInit 0 */

    /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8007382:	4b0a      	ldr	r3, [pc, #40]	@ (80073ac <HAL_CRC_MspInit+0x3c>)
 8007384:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007386:	4a09      	ldr	r2, [pc, #36]	@ (80073ac <HAL_CRC_MspInit+0x3c>)
 8007388:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800738c:	6493      	str	r3, [r2, #72]	@ 0x48
 800738e:	4b07      	ldr	r3, [pc, #28]	@ (80073ac <HAL_CRC_MspInit+0x3c>)
 8007390:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007392:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8007396:	60fb      	str	r3, [r7, #12]
 8007398:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END CRC_MspInit 1 */

  }

}
 800739a:	bf00      	nop
 800739c:	3714      	adds	r7, #20
 800739e:	46bd      	mov	sp, r7
 80073a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073a4:	4770      	bx	lr
 80073a6:	bf00      	nop
 80073a8:	40023000 	.word	0x40023000
 80073ac:	40021000 	.word	0x40021000

080073b0 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80073b0:	b580      	push	{r7, lr}
 80073b2:	b0ac      	sub	sp, #176	@ 0xb0
 80073b4:	af00      	add	r7, sp, #0
 80073b6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80073b8:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 80073bc:	2200      	movs	r2, #0
 80073be:	601a      	str	r2, [r3, #0]
 80073c0:	605a      	str	r2, [r3, #4]
 80073c2:	609a      	str	r2, [r3, #8]
 80073c4:	60da      	str	r2, [r3, #12]
 80073c6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80073c8:	f107 0314 	add.w	r3, r7, #20
 80073cc:	2288      	movs	r2, #136	@ 0x88
 80073ce:	2100      	movs	r1, #0
 80073d0:	4618      	mov	r0, r3
 80073d2:	f00e fdd9 	bl	8015f88 <memset>
  if(hi2c->Instance==I2C3)
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	681b      	ldr	r3, [r3, #0]
 80073da:	4a21      	ldr	r2, [pc, #132]	@ (8007460 <HAL_I2C_MspInit+0xb0>)
 80073dc:	4293      	cmp	r3, r2
 80073de:	d13b      	bne.n	8007458 <HAL_I2C_MspInit+0xa8>

    /* USER CODE END I2C3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C3;
 80073e0:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80073e4:	617b      	str	r3, [r7, #20]
    PeriphClkInit.I2c3ClockSelection = RCC_I2C3CLKSOURCE_PCLK1;
 80073e6:	2300      	movs	r3, #0
 80073e8:	66fb      	str	r3, [r7, #108]	@ 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80073ea:	f107 0314 	add.w	r3, r7, #20
 80073ee:	4618      	mov	r0, r3
 80073f0:	f008 ffbe 	bl	8010370 <HAL_RCCEx_PeriphCLKConfig>
 80073f4:	4603      	mov	r3, r0
 80073f6:	2b00      	cmp	r3, #0
 80073f8:	d001      	beq.n	80073fe <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 80073fa:	f7fd ff19 	bl	8005230 <Error_Handler>
    }

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80073fe:	4b19      	ldr	r3, [pc, #100]	@ (8007464 <HAL_I2C_MspInit+0xb4>)
 8007400:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007402:	4a18      	ldr	r2, [pc, #96]	@ (8007464 <HAL_I2C_MspInit+0xb4>)
 8007404:	f043 0304 	orr.w	r3, r3, #4
 8007408:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800740a:	4b16      	ldr	r3, [pc, #88]	@ (8007464 <HAL_I2C_MspInit+0xb4>)
 800740c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800740e:	f003 0304 	and.w	r3, r3, #4
 8007412:	613b      	str	r3, [r7, #16]
 8007414:	693b      	ldr	r3, [r7, #16]
    /**I2C3 GPIO Configuration
    PC0     ------> I2C3_SCL
    PC1     ------> I2C3_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8007416:	2303      	movs	r3, #3
 8007418:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800741c:	2312      	movs	r3, #18
 800741e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007422:	2300      	movs	r3, #0
 8007424:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007428:	2303      	movs	r3, #3
 800742a:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 800742e:	2304      	movs	r3, #4
 8007430:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8007434:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8007438:	4619      	mov	r1, r3
 800743a:	480b      	ldr	r0, [pc, #44]	@ (8007468 <HAL_I2C_MspInit+0xb8>)
 800743c:	f006 fd10 	bl	800de60 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 8007440:	4b08      	ldr	r3, [pc, #32]	@ (8007464 <HAL_I2C_MspInit+0xb4>)
 8007442:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007444:	4a07      	ldr	r2, [pc, #28]	@ (8007464 <HAL_I2C_MspInit+0xb4>)
 8007446:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800744a:	6593      	str	r3, [r2, #88]	@ 0x58
 800744c:	4b05      	ldr	r3, [pc, #20]	@ (8007464 <HAL_I2C_MspInit+0xb4>)
 800744e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007450:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007454:	60fb      	str	r3, [r7, #12]
 8007456:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END I2C3_MspInit 1 */

  }

}
 8007458:	bf00      	nop
 800745a:	37b0      	adds	r7, #176	@ 0xb0
 800745c:	46bd      	mov	sp, r7
 800745e:	bd80      	pop	{r7, pc}
 8007460:	40005c00 	.word	0x40005c00
 8007464:	40021000 	.word	0x40021000
 8007468:	48000800 	.word	0x48000800

0800746c <HAL_QSPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hqspi: QSPI handle pointer
  * @retval None
  */
void HAL_QSPI_MspInit(QSPI_HandleTypeDef* hqspi)
{
 800746c:	b580      	push	{r7, lr}
 800746e:	b08a      	sub	sp, #40	@ 0x28
 8007470:	af00      	add	r7, sp, #0
 8007472:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007474:	f107 0314 	add.w	r3, r7, #20
 8007478:	2200      	movs	r2, #0
 800747a:	601a      	str	r2, [r3, #0]
 800747c:	605a      	str	r2, [r3, #4]
 800747e:	609a      	str	r2, [r3, #8]
 8007480:	60da      	str	r2, [r3, #12]
 8007482:	611a      	str	r2, [r3, #16]
  if(hqspi->Instance==QUADSPI)
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	681b      	ldr	r3, [r3, #0]
 8007488:	4a26      	ldr	r2, [pc, #152]	@ (8007524 <HAL_QSPI_MspInit+0xb8>)
 800748a:	4293      	cmp	r3, r2
 800748c:	d145      	bne.n	800751a <HAL_QSPI_MspInit+0xae>
  {
    /* USER CODE BEGIN QUADSPI_MspInit 0 */

    /* USER CODE END QUADSPI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_QSPI_CLK_ENABLE();
 800748e:	4b26      	ldr	r3, [pc, #152]	@ (8007528 <HAL_QSPI_MspInit+0xbc>)
 8007490:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007492:	4a25      	ldr	r2, [pc, #148]	@ (8007528 <HAL_QSPI_MspInit+0xbc>)
 8007494:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007498:	6513      	str	r3, [r2, #80]	@ 0x50
 800749a:	4b23      	ldr	r3, [pc, #140]	@ (8007528 <HAL_QSPI_MspInit+0xbc>)
 800749c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800749e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80074a2:	613b      	str	r3, [r7, #16]
 80074a4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80074a6:	4b20      	ldr	r3, [pc, #128]	@ (8007528 <HAL_QSPI_MspInit+0xbc>)
 80074a8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80074aa:	4a1f      	ldr	r2, [pc, #124]	@ (8007528 <HAL_QSPI_MspInit+0xbc>)
 80074ac:	f043 0301 	orr.w	r3, r3, #1
 80074b0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80074b2:	4b1d      	ldr	r3, [pc, #116]	@ (8007528 <HAL_QSPI_MspInit+0xbc>)
 80074b4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80074b6:	f003 0301 	and.w	r3, r3, #1
 80074ba:	60fb      	str	r3, [r7, #12]
 80074bc:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80074be:	4b1a      	ldr	r3, [pc, #104]	@ (8007528 <HAL_QSPI_MspInit+0xbc>)
 80074c0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80074c2:	4a19      	ldr	r2, [pc, #100]	@ (8007528 <HAL_QSPI_MspInit+0xbc>)
 80074c4:	f043 0302 	orr.w	r3, r3, #2
 80074c8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80074ca:	4b17      	ldr	r3, [pc, #92]	@ (8007528 <HAL_QSPI_MspInit+0xbc>)
 80074cc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80074ce:	f003 0302 	and.w	r3, r3, #2
 80074d2:	60bb      	str	r3, [r7, #8]
 80074d4:	68bb      	ldr	r3, [r7, #8]
    PB0     ------> QUADSPI_BK1_IO1
    PB1     ------> QUADSPI_BK1_IO0
    PB10     ------> QUADSPI_CLK
    PB11     ------> QUADSPI_NCS
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80074d6:	23c0      	movs	r3, #192	@ 0xc0
 80074d8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80074da:	2302      	movs	r3, #2
 80074dc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80074de:	2300      	movs	r3, #0
 80074e0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80074e2:	2303      	movs	r3, #3
 80074e4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 80074e6:	230a      	movs	r3, #10
 80074e8:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80074ea:	f107 0314 	add.w	r3, r7, #20
 80074ee:	4619      	mov	r1, r3
 80074f0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80074f4:	f006 fcb4 	bl	800de60 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_10|GPIO_PIN_11;
 80074f8:	f640 4303 	movw	r3, #3075	@ 0xc03
 80074fc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80074fe:	2302      	movs	r3, #2
 8007500:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007502:	2300      	movs	r3, #0
 8007504:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007506:	2303      	movs	r3, #3
 8007508:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 800750a:	230a      	movs	r3, #10
 800750c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800750e:	f107 0314 	add.w	r3, r7, #20
 8007512:	4619      	mov	r1, r3
 8007514:	4805      	ldr	r0, [pc, #20]	@ (800752c <HAL_QSPI_MspInit+0xc0>)
 8007516:	f006 fca3 	bl	800de60 <HAL_GPIO_Init>

    /* USER CODE END QUADSPI_MspInit 1 */

  }

}
 800751a:	bf00      	nop
 800751c:	3728      	adds	r7, #40	@ 0x28
 800751e:	46bd      	mov	sp, r7
 8007520:	bd80      	pop	{r7, pc}
 8007522:	bf00      	nop
 8007524:	a0001000 	.word	0xa0001000
 8007528:	40021000 	.word	0x40021000
 800752c:	48000400 	.word	0x48000400

08007530 <HAL_RTC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hrtc: RTC handle pointer
  * @retval None
  */
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8007530:	b580      	push	{r7, lr}
 8007532:	b0a4      	sub	sp, #144	@ 0x90
 8007534:	af00      	add	r7, sp, #0
 8007536:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8007538:	f107 0308 	add.w	r3, r7, #8
 800753c:	2288      	movs	r2, #136	@ 0x88
 800753e:	2100      	movs	r1, #0
 8007540:	4618      	mov	r0, r3
 8007542:	f00e fd21 	bl	8015f88 <memset>
  if(hrtc->Instance==RTC)
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	681b      	ldr	r3, [r3, #0]
 800754a:	4a14      	ldr	r2, [pc, #80]	@ (800759c <HAL_RTC_MspInit+0x6c>)
 800754c:	4293      	cmp	r3, r2
 800754e:	d120      	bne.n	8007592 <HAL_RTC_MspInit+0x62>

    /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8007550:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8007554:	60bb      	str	r3, [r7, #8]
    PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8007556:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800755a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800755e:	f107 0308 	add.w	r3, r7, #8
 8007562:	4618      	mov	r0, r3
 8007564:	f008 ff04 	bl	8010370 <HAL_RCCEx_PeriphCLKConfig>
 8007568:	4603      	mov	r3, r0
 800756a:	2b00      	cmp	r3, #0
 800756c:	d001      	beq.n	8007572 <HAL_RTC_MspInit+0x42>
    {
      Error_Handler();
 800756e:	f7fd fe5f 	bl	8005230 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8007572:	4b0b      	ldr	r3, [pc, #44]	@ (80075a0 <HAL_RTC_MspInit+0x70>)
 8007574:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007578:	4a09      	ldr	r2, [pc, #36]	@ (80075a0 <HAL_RTC_MspInit+0x70>)
 800757a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800757e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_Alarm_IRQn, 0, 0);
 8007582:	2200      	movs	r2, #0
 8007584:	2100      	movs	r1, #0
 8007586:	2029      	movs	r0, #41	@ 0x29
 8007588:	f005 f8f1 	bl	800c76e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_Alarm_IRQn);
 800758c:	2029      	movs	r0, #41	@ 0x29
 800758e:	f005 f90a 	bl	800c7a6 <HAL_NVIC_EnableIRQ>

    /* USER CODE END RTC_MspInit 1 */

  }

}
 8007592:	bf00      	nop
 8007594:	3790      	adds	r7, #144	@ 0x90
 8007596:	46bd      	mov	sp, r7
 8007598:	bd80      	pop	{r7, pc}
 800759a:	bf00      	nop
 800759c:	40002800 	.word	0x40002800
 80075a0:	40021000 	.word	0x40021000

080075a4 <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80075a4:	b580      	push	{r7, lr}
 80075a6:	b08c      	sub	sp, #48	@ 0x30
 80075a8:	af00      	add	r7, sp, #0
 80075aa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80075ac:	f107 031c 	add.w	r3, r7, #28
 80075b0:	2200      	movs	r2, #0
 80075b2:	601a      	str	r2, [r3, #0]
 80075b4:	605a      	str	r2, [r3, #4]
 80075b6:	609a      	str	r2, [r3, #8]
 80075b8:	60da      	str	r2, [r3, #12]
 80075ba:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	681b      	ldr	r3, [r3, #0]
 80075c0:	4a2f      	ldr	r2, [pc, #188]	@ (8007680 <HAL_SPI_MspInit+0xdc>)
 80075c2:	4293      	cmp	r3, r2
 80075c4:	d129      	bne.n	800761a <HAL_SPI_MspInit+0x76>
  {
    /* USER CODE BEGIN SPI2_MspInit 0 */

    /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 80075c6:	4b2f      	ldr	r3, [pc, #188]	@ (8007684 <HAL_SPI_MspInit+0xe0>)
 80075c8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80075ca:	4a2e      	ldr	r2, [pc, #184]	@ (8007684 <HAL_SPI_MspInit+0xe0>)
 80075cc:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80075d0:	6593      	str	r3, [r2, #88]	@ 0x58
 80075d2:	4b2c      	ldr	r3, [pc, #176]	@ (8007684 <HAL_SPI_MspInit+0xe0>)
 80075d4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80075d6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80075da:	61bb      	str	r3, [r7, #24]
 80075dc:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80075de:	4b29      	ldr	r3, [pc, #164]	@ (8007684 <HAL_SPI_MspInit+0xe0>)
 80075e0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80075e2:	4a28      	ldr	r2, [pc, #160]	@ (8007684 <HAL_SPI_MspInit+0xe0>)
 80075e4:	f043 0302 	orr.w	r3, r3, #2
 80075e8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80075ea:	4b26      	ldr	r3, [pc, #152]	@ (8007684 <HAL_SPI_MspInit+0xe0>)
 80075ec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80075ee:	f003 0302 	and.w	r3, r3, #2
 80075f2:	617b      	str	r3, [r7, #20]
 80075f4:	697b      	ldr	r3, [r7, #20]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 80075f6:	f44f 4360 	mov.w	r3, #57344	@ 0xe000
 80075fa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80075fc:	2302      	movs	r3, #2
 80075fe:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007600:	2300      	movs	r3, #0
 8007602:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007604:	2303      	movs	r3, #3
 8007606:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8007608:	2305      	movs	r3, #5
 800760a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800760c:	f107 031c 	add.w	r3, r7, #28
 8007610:	4619      	mov	r1, r3
 8007612:	481d      	ldr	r0, [pc, #116]	@ (8007688 <HAL_SPI_MspInit+0xe4>)
 8007614:	f006 fc24 	bl	800de60 <HAL_GPIO_Init>
    /* USER CODE BEGIN SPI3_MspInit 1 */

    /* USER CODE END SPI3_MspInit 1 */
  }

}
 8007618:	e02d      	b.n	8007676 <HAL_SPI_MspInit+0xd2>
  else if(hspi->Instance==SPI3)
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	681b      	ldr	r3, [r3, #0]
 800761e:	4a1b      	ldr	r2, [pc, #108]	@ (800768c <HAL_SPI_MspInit+0xe8>)
 8007620:	4293      	cmp	r3, r2
 8007622:	d128      	bne.n	8007676 <HAL_SPI_MspInit+0xd2>
    __HAL_RCC_SPI3_CLK_ENABLE();
 8007624:	4b17      	ldr	r3, [pc, #92]	@ (8007684 <HAL_SPI_MspInit+0xe0>)
 8007626:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007628:	4a16      	ldr	r2, [pc, #88]	@ (8007684 <HAL_SPI_MspInit+0xe0>)
 800762a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800762e:	6593      	str	r3, [r2, #88]	@ 0x58
 8007630:	4b14      	ldr	r3, [pc, #80]	@ (8007684 <HAL_SPI_MspInit+0xe0>)
 8007632:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007634:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8007638:	613b      	str	r3, [r7, #16]
 800763a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800763c:	4b11      	ldr	r3, [pc, #68]	@ (8007684 <HAL_SPI_MspInit+0xe0>)
 800763e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007640:	4a10      	ldr	r2, [pc, #64]	@ (8007684 <HAL_SPI_MspInit+0xe0>)
 8007642:	f043 0304 	orr.w	r3, r3, #4
 8007646:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8007648:	4b0e      	ldr	r3, [pc, #56]	@ (8007684 <HAL_SPI_MspInit+0xe0>)
 800764a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800764c:	f003 0304 	and.w	r3, r3, #4
 8007650:	60fb      	str	r3, [r7, #12]
 8007652:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 8007654:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 8007658:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800765a:	2302      	movs	r3, #2
 800765c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800765e:	2300      	movs	r3, #0
 8007660:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007662:	2303      	movs	r3, #3
 8007664:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8007666:	2306      	movs	r3, #6
 8007668:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800766a:	f107 031c 	add.w	r3, r7, #28
 800766e:	4619      	mov	r1, r3
 8007670:	4807      	ldr	r0, [pc, #28]	@ (8007690 <HAL_SPI_MspInit+0xec>)
 8007672:	f006 fbf5 	bl	800de60 <HAL_GPIO_Init>
}
 8007676:	bf00      	nop
 8007678:	3730      	adds	r7, #48	@ 0x30
 800767a:	46bd      	mov	sp, r7
 800767c:	bd80      	pop	{r7, pc}
 800767e:	bf00      	nop
 8007680:	40003800 	.word	0x40003800
 8007684:	40021000 	.word	0x40021000
 8007688:	48000400 	.word	0x48000400
 800768c:	40003c00 	.word	0x40003c00
 8007690:	48000800 	.word	0x48000800

08007694 <HAL_TIM_PWM_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_pwm: TIM_PWM handle pointer
  * @retval None
  */
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8007694:	b480      	push	{r7}
 8007696:	b085      	sub	sp, #20
 8007698:	af00      	add	r7, sp, #0
 800769a:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	681b      	ldr	r3, [r3, #0]
 80076a0:	4a0a      	ldr	r2, [pc, #40]	@ (80076cc <HAL_TIM_PWM_MspInit+0x38>)
 80076a2:	4293      	cmp	r3, r2
 80076a4:	d10b      	bne.n	80076be <HAL_TIM_PWM_MspInit+0x2a>
  {
    /* USER CODE BEGIN TIM1_MspInit 0 */

    /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80076a6:	4b0a      	ldr	r3, [pc, #40]	@ (80076d0 <HAL_TIM_PWM_MspInit+0x3c>)
 80076a8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80076aa:	4a09      	ldr	r2, [pc, #36]	@ (80076d0 <HAL_TIM_PWM_MspInit+0x3c>)
 80076ac:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80076b0:	6613      	str	r3, [r2, #96]	@ 0x60
 80076b2:	4b07      	ldr	r3, [pc, #28]	@ (80076d0 <HAL_TIM_PWM_MspInit+0x3c>)
 80076b4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80076b6:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80076ba:	60fb      	str	r3, [r7, #12]
 80076bc:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END TIM1_MspInit 1 */

  }

}
 80076be:	bf00      	nop
 80076c0:	3714      	adds	r7, #20
 80076c2:	46bd      	mov	sp, r7
 80076c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076c8:	4770      	bx	lr
 80076ca:	bf00      	nop
 80076cc:	40012c00 	.word	0x40012c00
 80076d0:	40021000 	.word	0x40021000

080076d4 <HAL_TIM_IC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_ic: TIM_IC handle pointer
  * @retval None
  */
void HAL_TIM_IC_MspInit(TIM_HandleTypeDef* htim_ic)
{
 80076d4:	b580      	push	{r7, lr}
 80076d6:	b08a      	sub	sp, #40	@ 0x28
 80076d8:	af00      	add	r7, sp, #0
 80076da:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80076dc:	f107 0314 	add.w	r3, r7, #20
 80076e0:	2200      	movs	r2, #0
 80076e2:	601a      	str	r2, [r3, #0]
 80076e4:	605a      	str	r2, [r3, #4]
 80076e6:	609a      	str	r2, [r3, #8]
 80076e8:	60da      	str	r2, [r3, #12]
 80076ea:	611a      	str	r2, [r3, #16]
  if(htim_ic->Instance==TIM2)
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	681b      	ldr	r3, [r3, #0]
 80076f0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80076f4:	d128      	bne.n	8007748 <HAL_TIM_IC_MspInit+0x74>
  {
    /* USER CODE BEGIN TIM2_MspInit 0 */

    /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80076f6:	4b16      	ldr	r3, [pc, #88]	@ (8007750 <HAL_TIM_IC_MspInit+0x7c>)
 80076f8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80076fa:	4a15      	ldr	r2, [pc, #84]	@ (8007750 <HAL_TIM_IC_MspInit+0x7c>)
 80076fc:	f043 0301 	orr.w	r3, r3, #1
 8007700:	6593      	str	r3, [r2, #88]	@ 0x58
 8007702:	4b13      	ldr	r3, [pc, #76]	@ (8007750 <HAL_TIM_IC_MspInit+0x7c>)
 8007704:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007706:	f003 0301 	and.w	r3, r3, #1
 800770a:	613b      	str	r3, [r7, #16]
 800770c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800770e:	4b10      	ldr	r3, [pc, #64]	@ (8007750 <HAL_TIM_IC_MspInit+0x7c>)
 8007710:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007712:	4a0f      	ldr	r2, [pc, #60]	@ (8007750 <HAL_TIM_IC_MspInit+0x7c>)
 8007714:	f043 0301 	orr.w	r3, r3, #1
 8007718:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800771a:	4b0d      	ldr	r3, [pc, #52]	@ (8007750 <HAL_TIM_IC_MspInit+0x7c>)
 800771c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800771e:	f003 0301 	and.w	r3, r3, #1
 8007722:	60fb      	str	r3, [r7, #12]
 8007724:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA5     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8007726:	2320      	movs	r3, #32
 8007728:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800772a:	2302      	movs	r3, #2
 800772c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800772e:	2301      	movs	r3, #1
 8007730:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007732:	2300      	movs	r3, #0
 8007734:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8007736:	2301      	movs	r3, #1
 8007738:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800773a:	f107 0314 	add.w	r3, r7, #20
 800773e:	4619      	mov	r1, r3
 8007740:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8007744:	f006 fb8c 	bl	800de60 <HAL_GPIO_Init>

    /* USER CODE END TIM2_MspInit 1 */

  }

}
 8007748:	bf00      	nop
 800774a:	3728      	adds	r7, #40	@ 0x28
 800774c:	46bd      	mov	sp, r7
 800774e:	bd80      	pop	{r7, pc}
 8007750:	40021000 	.word	0x40021000

08007754 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8007754:	b480      	push	{r7}
 8007756:	b085      	sub	sp, #20
 8007758:	af00      	add	r7, sp, #0
 800775a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	681b      	ldr	r3, [r3, #0]
 8007760:	4a13      	ldr	r2, [pc, #76]	@ (80077b0 <HAL_TIM_Base_MspInit+0x5c>)
 8007762:	4293      	cmp	r3, r2
 8007764:	d10c      	bne.n	8007780 <HAL_TIM_Base_MspInit+0x2c>
  {
    /* USER CODE BEGIN TIM3_MspInit 0 */

    /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8007766:	4b13      	ldr	r3, [pc, #76]	@ (80077b4 <HAL_TIM_Base_MspInit+0x60>)
 8007768:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800776a:	4a12      	ldr	r2, [pc, #72]	@ (80077b4 <HAL_TIM_Base_MspInit+0x60>)
 800776c:	f043 0302 	orr.w	r3, r3, #2
 8007770:	6593      	str	r3, [r2, #88]	@ 0x58
 8007772:	4b10      	ldr	r3, [pc, #64]	@ (80077b4 <HAL_TIM_Base_MspInit+0x60>)
 8007774:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007776:	f003 0302 	and.w	r3, r3, #2
 800777a:	60fb      	str	r3, [r7, #12]
 800777c:	68fb      	ldr	r3, [r7, #12]
    /* USER CODE BEGIN TIM4_MspInit 1 */

    /* USER CODE END TIM4_MspInit 1 */
  }

}
 800777e:	e010      	b.n	80077a2 <HAL_TIM_Base_MspInit+0x4e>
  else if(htim_base->Instance==TIM4)
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	681b      	ldr	r3, [r3, #0]
 8007784:	4a0c      	ldr	r2, [pc, #48]	@ (80077b8 <HAL_TIM_Base_MspInit+0x64>)
 8007786:	4293      	cmp	r3, r2
 8007788:	d10b      	bne.n	80077a2 <HAL_TIM_Base_MspInit+0x4e>
    __HAL_RCC_TIM4_CLK_ENABLE();
 800778a:	4b0a      	ldr	r3, [pc, #40]	@ (80077b4 <HAL_TIM_Base_MspInit+0x60>)
 800778c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800778e:	4a09      	ldr	r2, [pc, #36]	@ (80077b4 <HAL_TIM_Base_MspInit+0x60>)
 8007790:	f043 0304 	orr.w	r3, r3, #4
 8007794:	6593      	str	r3, [r2, #88]	@ 0x58
 8007796:	4b07      	ldr	r3, [pc, #28]	@ (80077b4 <HAL_TIM_Base_MspInit+0x60>)
 8007798:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800779a:	f003 0304 	and.w	r3, r3, #4
 800779e:	60bb      	str	r3, [r7, #8]
 80077a0:	68bb      	ldr	r3, [r7, #8]
}
 80077a2:	bf00      	nop
 80077a4:	3714      	adds	r7, #20
 80077a6:	46bd      	mov	sp, r7
 80077a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077ac:	4770      	bx	lr
 80077ae:	bf00      	nop
 80077b0:	40000400 	.word	0x40000400
 80077b4:	40021000 	.word	0x40021000
 80077b8:	40000800 	.word	0x40000800

080077bc <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80077bc:	b580      	push	{r7, lr}
 80077be:	b08a      	sub	sp, #40	@ 0x28
 80077c0:	af00      	add	r7, sp, #0
 80077c2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80077c4:	f107 0314 	add.w	r3, r7, #20
 80077c8:	2200      	movs	r2, #0
 80077ca:	601a      	str	r2, [r3, #0]
 80077cc:	605a      	str	r2, [r3, #4]
 80077ce:	609a      	str	r2, [r3, #8]
 80077d0:	60da      	str	r2, [r3, #12]
 80077d2:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	681b      	ldr	r3, [r3, #0]
 80077d8:	4a23      	ldr	r2, [pc, #140]	@ (8007868 <HAL_TIM_MspPostInit+0xac>)
 80077da:	4293      	cmp	r3, r2
 80077dc:	d11e      	bne.n	800781c <HAL_TIM_MspPostInit+0x60>
  {
    /* USER CODE BEGIN TIM1_MspPostInit 0 */

    /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80077de:	4b23      	ldr	r3, [pc, #140]	@ (800786c <HAL_TIM_MspPostInit+0xb0>)
 80077e0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80077e2:	4a22      	ldr	r2, [pc, #136]	@ (800786c <HAL_TIM_MspPostInit+0xb0>)
 80077e4:	f043 0301 	orr.w	r3, r3, #1
 80077e8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80077ea:	4b20      	ldr	r3, [pc, #128]	@ (800786c <HAL_TIM_MspPostInit+0xb0>)
 80077ec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80077ee:	f003 0301 	and.w	r3, r3, #1
 80077f2:	613b      	str	r3, [r7, #16]
 80077f4:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10;
 80077f6:	f44f 63e0 	mov.w	r3, #1792	@ 0x700
 80077fa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80077fc:	2302      	movs	r3, #2
 80077fe:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007800:	2300      	movs	r3, #0
 8007802:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007804:	2300      	movs	r3, #0
 8007806:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8007808:	2301      	movs	r3, #1
 800780a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800780c:	f107 0314 	add.w	r3, r7, #20
 8007810:	4619      	mov	r1, r3
 8007812:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8007816:	f006 fb23 	bl	800de60 <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM3_MspPostInit 1 */

    /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 800781a:	e021      	b.n	8007860 <HAL_TIM_MspPostInit+0xa4>
  else if(htim->Instance==TIM3)
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	681b      	ldr	r3, [r3, #0]
 8007820:	4a13      	ldr	r2, [pc, #76]	@ (8007870 <HAL_TIM_MspPostInit+0xb4>)
 8007822:	4293      	cmp	r3, r2
 8007824:	d11c      	bne.n	8007860 <HAL_TIM_MspPostInit+0xa4>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8007826:	4b11      	ldr	r3, [pc, #68]	@ (800786c <HAL_TIM_MspPostInit+0xb0>)
 8007828:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800782a:	4a10      	ldr	r2, [pc, #64]	@ (800786c <HAL_TIM_MspPostInit+0xb0>)
 800782c:	f043 0304 	orr.w	r3, r3, #4
 8007830:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8007832:	4b0e      	ldr	r3, [pc, #56]	@ (800786c <HAL_TIM_MspPostInit+0xb0>)
 8007834:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007836:	f003 0304 	and.w	r3, r3, #4
 800783a:	60fb      	str	r3, [r7, #12]
 800783c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 800783e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8007842:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007844:	2302      	movs	r3, #2
 8007846:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007848:	2300      	movs	r3, #0
 800784a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800784c:	2300      	movs	r3, #0
 800784e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8007850:	2302      	movs	r3, #2
 8007852:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8007854:	f107 0314 	add.w	r3, r7, #20
 8007858:	4619      	mov	r1, r3
 800785a:	4806      	ldr	r0, [pc, #24]	@ (8007874 <HAL_TIM_MspPostInit+0xb8>)
 800785c:	f006 fb00 	bl	800de60 <HAL_GPIO_Init>
}
 8007860:	bf00      	nop
 8007862:	3728      	adds	r7, #40	@ 0x28
 8007864:	46bd      	mov	sp, r7
 8007866:	bd80      	pop	{r7, pc}
 8007868:	40012c00 	.word	0x40012c00
 800786c:	40021000 	.word	0x40021000
 8007870:	40000400 	.word	0x40000400
 8007874:	48000800 	.word	0x48000800

08007878 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8007878:	b580      	push	{r7, lr}
 800787a:	b0ae      	sub	sp, #184	@ 0xb8
 800787c:	af00      	add	r7, sp, #0
 800787e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007880:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8007884:	2200      	movs	r2, #0
 8007886:	601a      	str	r2, [r3, #0]
 8007888:	605a      	str	r2, [r3, #4]
 800788a:	609a      	str	r2, [r3, #8]
 800788c:	60da      	str	r2, [r3, #12]
 800788e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8007890:	f107 031c 	add.w	r3, r7, #28
 8007894:	2288      	movs	r2, #136	@ 0x88
 8007896:	2100      	movs	r1, #0
 8007898:	4618      	mov	r0, r3
 800789a:	f00e fb75 	bl	8015f88 <memset>
  if(huart->Instance==UART4)
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	681b      	ldr	r3, [r3, #0]
 80078a2:	4a6b      	ldr	r2, [pc, #428]	@ (8007a50 <HAL_UART_MspInit+0x1d8>)
 80078a4:	4293      	cmp	r3, r2
 80078a6:	d13c      	bne.n	8007922 <HAL_UART_MspInit+0xaa>

    /* USER CODE END UART4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 80078a8:	2308      	movs	r3, #8
 80078aa:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.Uart4ClockSelection = RCC_UART4CLKSOURCE_PCLK1;
 80078ac:	2300      	movs	r3, #0
 80078ae:	663b      	str	r3, [r7, #96]	@ 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80078b0:	f107 031c 	add.w	r3, r7, #28
 80078b4:	4618      	mov	r0, r3
 80078b6:	f008 fd5b 	bl	8010370 <HAL_RCCEx_PeriphCLKConfig>
 80078ba:	4603      	mov	r3, r0
 80078bc:	2b00      	cmp	r3, #0
 80078be:	d001      	beq.n	80078c4 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80078c0:	f7fd fcb6 	bl	8005230 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 80078c4:	4b63      	ldr	r3, [pc, #396]	@ (8007a54 <HAL_UART_MspInit+0x1dc>)
 80078c6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80078c8:	4a62      	ldr	r2, [pc, #392]	@ (8007a54 <HAL_UART_MspInit+0x1dc>)
 80078ca:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80078ce:	6593      	str	r3, [r2, #88]	@ 0x58
 80078d0:	4b60      	ldr	r3, [pc, #384]	@ (8007a54 <HAL_UART_MspInit+0x1dc>)
 80078d2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80078d4:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80078d8:	61bb      	str	r3, [r7, #24]
 80078da:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80078dc:	4b5d      	ldr	r3, [pc, #372]	@ (8007a54 <HAL_UART_MspInit+0x1dc>)
 80078de:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80078e0:	4a5c      	ldr	r2, [pc, #368]	@ (8007a54 <HAL_UART_MspInit+0x1dc>)
 80078e2:	f043 0301 	orr.w	r3, r3, #1
 80078e6:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80078e8:	4b5a      	ldr	r3, [pc, #360]	@ (8007a54 <HAL_UART_MspInit+0x1dc>)
 80078ea:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80078ec:	f003 0301 	and.w	r3, r3, #1
 80078f0:	617b      	str	r3, [r7, #20]
 80078f2:	697b      	ldr	r3, [r7, #20]
    /**UART4 GPIO Configuration
    PA0     ------> UART4_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80078f4:	2301      	movs	r3, #1
 80078f6:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80078fa:	2312      	movs	r3, #18
 80078fc:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8007900:	2301      	movs	r3, #1
 8007902:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007906:	2303      	movs	r3, #3
 8007908:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 800790c:	2308      	movs	r3, #8
 800790e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007912:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8007916:	4619      	mov	r1, r3
 8007918:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800791c:	f006 faa0 	bl	800de60 <HAL_GPIO_Init>
    /* USER CODE BEGIN USART1_MspInit 1 */

    /* USER CODE END USART1_MspInit 1 */
  }

}
 8007920:	e092      	b.n	8007a48 <HAL_UART_MspInit+0x1d0>
  else if(huart->Instance==USART1)
 8007922:	687b      	ldr	r3, [r7, #4]
 8007924:	681b      	ldr	r3, [r3, #0]
 8007926:	4a4c      	ldr	r2, [pc, #304]	@ (8007a58 <HAL_UART_MspInit+0x1e0>)
 8007928:	4293      	cmp	r3, r2
 800792a:	f040 808d 	bne.w	8007a48 <HAL_UART_MspInit+0x1d0>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 800792e:	2301      	movs	r3, #1
 8007930:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8007932:	2300      	movs	r3, #0
 8007934:	657b      	str	r3, [r7, #84]	@ 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8007936:	f107 031c 	add.w	r3, r7, #28
 800793a:	4618      	mov	r0, r3
 800793c:	f008 fd18 	bl	8010370 <HAL_RCCEx_PeriphCLKConfig>
 8007940:	4603      	mov	r3, r0
 8007942:	2b00      	cmp	r3, #0
 8007944:	d001      	beq.n	800794a <HAL_UART_MspInit+0xd2>
      Error_Handler();
 8007946:	f7fd fc73 	bl	8005230 <Error_Handler>
    __HAL_RCC_USART1_CLK_ENABLE();
 800794a:	4b42      	ldr	r3, [pc, #264]	@ (8007a54 <HAL_UART_MspInit+0x1dc>)
 800794c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800794e:	4a41      	ldr	r2, [pc, #260]	@ (8007a54 <HAL_UART_MspInit+0x1dc>)
 8007950:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8007954:	6613      	str	r3, [r2, #96]	@ 0x60
 8007956:	4b3f      	ldr	r3, [pc, #252]	@ (8007a54 <HAL_UART_MspInit+0x1dc>)
 8007958:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800795a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800795e:	613b      	str	r3, [r7, #16]
 8007960:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8007962:	4b3c      	ldr	r3, [pc, #240]	@ (8007a54 <HAL_UART_MspInit+0x1dc>)
 8007964:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007966:	4a3b      	ldr	r2, [pc, #236]	@ (8007a54 <HAL_UART_MspInit+0x1dc>)
 8007968:	f043 0302 	orr.w	r3, r3, #2
 800796c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800796e:	4b39      	ldr	r3, [pc, #228]	@ (8007a54 <HAL_UART_MspInit+0x1dc>)
 8007970:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007972:	f003 0302 	and.w	r3, r3, #2
 8007976:	60fb      	str	r3, [r7, #12]
 8007978:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_6|GPIO_PIN_7;
 800797a:	23d8      	movs	r3, #216	@ 0xd8
 800797c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007980:	2302      	movs	r3, #2
 8007982:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007986:	2300      	movs	r3, #0
 8007988:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800798c:	2303      	movs	r3, #3
 800798e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8007992:	2307      	movs	r3, #7
 8007994:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8007998:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 800799c:	4619      	mov	r1, r3
 800799e:	482f      	ldr	r0, [pc, #188]	@ (8007a5c <HAL_UART_MspInit+0x1e4>)
 80079a0:	f006 fa5e 	bl	800de60 <HAL_GPIO_Init>
    hdma_usart1_rx.Instance = DMA1_Channel5;
 80079a4:	4b2e      	ldr	r3, [pc, #184]	@ (8007a60 <HAL_UART_MspInit+0x1e8>)
 80079a6:	4a2f      	ldr	r2, [pc, #188]	@ (8007a64 <HAL_UART_MspInit+0x1ec>)
 80079a8:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Request = DMA_REQUEST_2;
 80079aa:	4b2d      	ldr	r3, [pc, #180]	@ (8007a60 <HAL_UART_MspInit+0x1e8>)
 80079ac:	2202      	movs	r2, #2
 80079ae:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80079b0:	4b2b      	ldr	r3, [pc, #172]	@ (8007a60 <HAL_UART_MspInit+0x1e8>)
 80079b2:	2200      	movs	r2, #0
 80079b4:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80079b6:	4b2a      	ldr	r3, [pc, #168]	@ (8007a60 <HAL_UART_MspInit+0x1e8>)
 80079b8:	2200      	movs	r2, #0
 80079ba:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80079bc:	4b28      	ldr	r3, [pc, #160]	@ (8007a60 <HAL_UART_MspInit+0x1e8>)
 80079be:	2280      	movs	r2, #128	@ 0x80
 80079c0:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80079c2:	4b27      	ldr	r3, [pc, #156]	@ (8007a60 <HAL_UART_MspInit+0x1e8>)
 80079c4:	2200      	movs	r2, #0
 80079c6:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80079c8:	4b25      	ldr	r3, [pc, #148]	@ (8007a60 <HAL_UART_MspInit+0x1e8>)
 80079ca:	2200      	movs	r2, #0
 80079cc:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 80079ce:	4b24      	ldr	r3, [pc, #144]	@ (8007a60 <HAL_UART_MspInit+0x1e8>)
 80079d0:	2200      	movs	r2, #0
 80079d2:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 80079d4:	4b22      	ldr	r3, [pc, #136]	@ (8007a60 <HAL_UART_MspInit+0x1e8>)
 80079d6:	2200      	movs	r2, #0
 80079d8:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 80079da:	4821      	ldr	r0, [pc, #132]	@ (8007a60 <HAL_UART_MspInit+0x1e8>)
 80079dc:	f005 f93a 	bl	800cc54 <HAL_DMA_Init>
 80079e0:	4603      	mov	r3, r0
 80079e2:	2b00      	cmp	r3, #0
 80079e4:	d001      	beq.n	80079ea <HAL_UART_MspInit+0x172>
      Error_Handler();
 80079e6:	f7fd fc23 	bl	8005230 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 80079ea:	687b      	ldr	r3, [r7, #4]
 80079ec:	4a1c      	ldr	r2, [pc, #112]	@ (8007a60 <HAL_UART_MspInit+0x1e8>)
 80079ee:	675a      	str	r2, [r3, #116]	@ 0x74
 80079f0:	4a1b      	ldr	r2, [pc, #108]	@ (8007a60 <HAL_UART_MspInit+0x1e8>)
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	6293      	str	r3, [r2, #40]	@ 0x28
    hdma_usart1_tx.Instance = DMA1_Channel4;
 80079f6:	4b1c      	ldr	r3, [pc, #112]	@ (8007a68 <HAL_UART_MspInit+0x1f0>)
 80079f8:	4a1c      	ldr	r2, [pc, #112]	@ (8007a6c <HAL_UART_MspInit+0x1f4>)
 80079fa:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Request = DMA_REQUEST_2;
 80079fc:	4b1a      	ldr	r3, [pc, #104]	@ (8007a68 <HAL_UART_MspInit+0x1f0>)
 80079fe:	2202      	movs	r2, #2
 8007a00:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8007a02:	4b19      	ldr	r3, [pc, #100]	@ (8007a68 <HAL_UART_MspInit+0x1f0>)
 8007a04:	2210      	movs	r2, #16
 8007a06:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8007a08:	4b17      	ldr	r3, [pc, #92]	@ (8007a68 <HAL_UART_MspInit+0x1f0>)
 8007a0a:	2200      	movs	r2, #0
 8007a0c:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8007a0e:	4b16      	ldr	r3, [pc, #88]	@ (8007a68 <HAL_UART_MspInit+0x1f0>)
 8007a10:	2280      	movs	r2, #128	@ 0x80
 8007a12:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8007a14:	4b14      	ldr	r3, [pc, #80]	@ (8007a68 <HAL_UART_MspInit+0x1f0>)
 8007a16:	2200      	movs	r2, #0
 8007a18:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8007a1a:	4b13      	ldr	r3, [pc, #76]	@ (8007a68 <HAL_UART_MspInit+0x1f0>)
 8007a1c:	2200      	movs	r2, #0
 8007a1e:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8007a20:	4b11      	ldr	r3, [pc, #68]	@ (8007a68 <HAL_UART_MspInit+0x1f0>)
 8007a22:	2200      	movs	r2, #0
 8007a24:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8007a26:	4b10      	ldr	r3, [pc, #64]	@ (8007a68 <HAL_UART_MspInit+0x1f0>)
 8007a28:	2200      	movs	r2, #0
 8007a2a:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8007a2c:	480e      	ldr	r0, [pc, #56]	@ (8007a68 <HAL_UART_MspInit+0x1f0>)
 8007a2e:	f005 f911 	bl	800cc54 <HAL_DMA_Init>
 8007a32:	4603      	mov	r3, r0
 8007a34:	2b00      	cmp	r3, #0
 8007a36:	d001      	beq.n	8007a3c <HAL_UART_MspInit+0x1c4>
      Error_Handler();
 8007a38:	f7fd fbfa 	bl	8005230 <Error_Handler>
    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 8007a3c:	687b      	ldr	r3, [r7, #4]
 8007a3e:	4a0a      	ldr	r2, [pc, #40]	@ (8007a68 <HAL_UART_MspInit+0x1f0>)
 8007a40:	671a      	str	r2, [r3, #112]	@ 0x70
 8007a42:	4a09      	ldr	r2, [pc, #36]	@ (8007a68 <HAL_UART_MspInit+0x1f0>)
 8007a44:	687b      	ldr	r3, [r7, #4]
 8007a46:	6293      	str	r3, [r2, #40]	@ 0x28
}
 8007a48:	bf00      	nop
 8007a4a:	37b8      	adds	r7, #184	@ 0xb8
 8007a4c:	46bd      	mov	sp, r7
 8007a4e:	bd80      	pop	{r7, pc}
 8007a50:	40004c00 	.word	0x40004c00
 8007a54:	40021000 	.word	0x40021000
 8007a58:	40013800 	.word	0x40013800
 8007a5c:	48000400 	.word	0x48000400
 8007a60:	200007ac 	.word	0x200007ac
 8007a64:	40020058 	.word	0x40020058
 8007a68:	200007f4 	.word	0x200007f4
 8007a6c:	40020044 	.word	0x40020044

08007a70 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8007a70:	b480      	push	{r7}
 8007a72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8007a74:	bf00      	nop
 8007a76:	e7fd      	b.n	8007a74 <NMI_Handler+0x4>

08007a78 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8007a78:	b480      	push	{r7}
 8007a7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8007a7c:	bf00      	nop
 8007a7e:	e7fd      	b.n	8007a7c <HardFault_Handler+0x4>

08007a80 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8007a80:	b480      	push	{r7}
 8007a82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8007a84:	bf00      	nop
 8007a86:	e7fd      	b.n	8007a84 <MemManage_Handler+0x4>

08007a88 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8007a88:	b480      	push	{r7}
 8007a8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8007a8c:	bf00      	nop
 8007a8e:	e7fd      	b.n	8007a8c <BusFault_Handler+0x4>

08007a90 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8007a90:	b480      	push	{r7}
 8007a92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8007a94:	bf00      	nop
 8007a96:	e7fd      	b.n	8007a94 <UsageFault_Handler+0x4>

08007a98 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8007a98:	b480      	push	{r7}
 8007a9a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8007a9c:	bf00      	nop
 8007a9e:	46bd      	mov	sp, r7
 8007aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007aa4:	4770      	bx	lr

08007aa6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8007aa6:	b480      	push	{r7}
 8007aa8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8007aaa:	bf00      	nop
 8007aac:	46bd      	mov	sp, r7
 8007aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ab2:	4770      	bx	lr

08007ab4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8007ab4:	b480      	push	{r7}
 8007ab6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8007ab8:	bf00      	nop
 8007aba:	46bd      	mov	sp, r7
 8007abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ac0:	4770      	bx	lr

08007ac2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8007ac2:	b580      	push	{r7, lr}
 8007ac4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8007ac6:	f003 f983 	bl	800add0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8007aca:	bf00      	nop
 8007acc:	bd80      	pop	{r7, pc}
	...

08007ad0 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8007ad0:	b580      	push	{r7, lr}
 8007ad2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8007ad4:	4802      	ldr	r0, [pc, #8]	@ (8007ae0 <DMA1_Channel1_IRQHandler+0x10>)
 8007ad6:	f005 fa13 	bl	800cf00 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8007ada:	bf00      	nop
 8007adc:	bd80      	pop	{r7, pc}
 8007ade:	bf00      	nop
 8007ae0:	2000037c 	.word	0x2000037c

08007ae4 <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 8007ae4:	b580      	push	{r7, lr}
 8007ae6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8007ae8:	4802      	ldr	r0, [pc, #8]	@ (8007af4 <DMA1_Channel4_IRQHandler+0x10>)
 8007aea:	f005 fa09 	bl	800cf00 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 8007aee:	bf00      	nop
 8007af0:	bd80      	pop	{r7, pc}
 8007af2:	bf00      	nop
 8007af4:	200007f4 	.word	0x200007f4

08007af8 <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 8007af8:	b580      	push	{r7, lr}
 8007afa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8007afc:	4802      	ldr	r0, [pc, #8]	@ (8007b08 <DMA1_Channel5_IRQHandler+0x10>)
 8007afe:	f005 f9ff 	bl	800cf00 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 8007b02:	bf00      	nop
 8007b04:	bd80      	pop	{r7, pc}
 8007b06:	bf00      	nop
 8007b08:	200007ac 	.word	0x200007ac

08007b0c <RTC_Alarm_IRQHandler>:

/**
  * @brief This function handles RTC alarm interrupt through EXTI line 18.
  */
void RTC_Alarm_IRQHandler(void)
{
 8007b0c:	b580      	push	{r7, lr}
 8007b0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_Alarm_IRQn 0 */

  /* USER CODE END RTC_Alarm_IRQn 0 */
  HAL_RTC_AlarmIRQHandler(&hrtc);
 8007b10:	4802      	ldr	r0, [pc, #8]	@ (8007b1c <RTC_Alarm_IRQHandler+0x10>)
 8007b12:	f009 fc2d 	bl	8011370 <HAL_RTC_AlarmIRQHandler>
  /* USER CODE BEGIN RTC_Alarm_IRQn 1 */

  /* USER CODE END RTC_Alarm_IRQn 1 */
}
 8007b16:	bf00      	nop
 8007b18:	bd80      	pop	{r7, pc}
 8007b1a:	bf00      	nop
 8007b1c:	20000480 	.word	0x20000480

08007b20 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8007b20:	b580      	push	{r7, lr}
 8007b22:	b086      	sub	sp, #24
 8007b24:	af00      	add	r7, sp, #0
 8007b26:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8007b28:	4a14      	ldr	r2, [pc, #80]	@ (8007b7c <_sbrk+0x5c>)
 8007b2a:	4b15      	ldr	r3, [pc, #84]	@ (8007b80 <_sbrk+0x60>)
 8007b2c:	1ad3      	subs	r3, r2, r3
 8007b2e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8007b30:	697b      	ldr	r3, [r7, #20]
 8007b32:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8007b34:	4b13      	ldr	r3, [pc, #76]	@ (8007b84 <_sbrk+0x64>)
 8007b36:	681b      	ldr	r3, [r3, #0]
 8007b38:	2b00      	cmp	r3, #0
 8007b3a:	d102      	bne.n	8007b42 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8007b3c:	4b11      	ldr	r3, [pc, #68]	@ (8007b84 <_sbrk+0x64>)
 8007b3e:	4a12      	ldr	r2, [pc, #72]	@ (8007b88 <_sbrk+0x68>)
 8007b40:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8007b42:	4b10      	ldr	r3, [pc, #64]	@ (8007b84 <_sbrk+0x64>)
 8007b44:	681a      	ldr	r2, [r3, #0]
 8007b46:	687b      	ldr	r3, [r7, #4]
 8007b48:	4413      	add	r3, r2
 8007b4a:	693a      	ldr	r2, [r7, #16]
 8007b4c:	429a      	cmp	r2, r3
 8007b4e:	d207      	bcs.n	8007b60 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8007b50:	f00e fa6a 	bl	8016028 <__errno>
 8007b54:	4603      	mov	r3, r0
 8007b56:	220c      	movs	r2, #12
 8007b58:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8007b5a:	f04f 33ff 	mov.w	r3, #4294967295
 8007b5e:	e009      	b.n	8007b74 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8007b60:	4b08      	ldr	r3, [pc, #32]	@ (8007b84 <_sbrk+0x64>)
 8007b62:	681b      	ldr	r3, [r3, #0]
 8007b64:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8007b66:	4b07      	ldr	r3, [pc, #28]	@ (8007b84 <_sbrk+0x64>)
 8007b68:	681a      	ldr	r2, [r3, #0]
 8007b6a:	687b      	ldr	r3, [r7, #4]
 8007b6c:	4413      	add	r3, r2
 8007b6e:	4a05      	ldr	r2, [pc, #20]	@ (8007b84 <_sbrk+0x64>)
 8007b70:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8007b72:	68fb      	ldr	r3, [r7, #12]
}
 8007b74:	4618      	mov	r0, r3
 8007b76:	3718      	adds	r7, #24
 8007b78:	46bd      	mov	sp, r7
 8007b7a:	bd80      	pop	{r7, pc}
 8007b7c:	20018000 	.word	0x20018000
 8007b80:	00000400 	.word	0x00000400
 8007b84:	200059fc 	.word	0x200059fc
 8007b88:	20005b58 	.word	0x20005b58

08007b8c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8007b8c:	b480      	push	{r7}
 8007b8e:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8007b90:	4b06      	ldr	r3, [pc, #24]	@ (8007bac <SystemInit+0x20>)
 8007b92:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007b96:	4a05      	ldr	r2, [pc, #20]	@ (8007bac <SystemInit+0x20>)
 8007b98:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8007b9c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8007ba0:	bf00      	nop
 8007ba2:	46bd      	mov	sp, r7
 8007ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ba8:	4770      	bx	lr
 8007baa:	bf00      	nop
 8007bac:	e000ed00 	.word	0xe000ed00

08007bb0 <disk_status>:
/*-----------------------------------------------------------------------*/

DSTATUS disk_status (
	BYTE pdrv		/* Physical drive nmuber to identify the drive */
)
{
 8007bb0:	b580      	push	{r7, lr}
 8007bb2:	b084      	sub	sp, #16
 8007bb4:	af00      	add	r7, sp, #0
 8007bb6:	4603      	mov	r3, r0
 8007bb8:	71fb      	strb	r3, [r7, #7]
	DSTATUS stat;

	switch (pdrv) {
 8007bba:	79fb      	ldrb	r3, [r7, #7]
 8007bbc:	2b00      	cmp	r3, #0
 8007bbe:	d002      	beq.n	8007bc6 <disk_status+0x16>
 8007bc0:	2b01      	cmp	r3, #1
 8007bc2:	d00c      	beq.n	8007bde <disk_status+0x2e>
 8007bc4:	e017      	b.n	8007bf6 <disk_status+0x46>
	case DEV_RAM :

		if(!psram_is_initialized())
 8007bc6:	f7ff fa9b 	bl	8007100 <psram_is_initialized>
 8007bca:	4603      	mov	r3, r0
 8007bcc:	2b00      	cmp	r3, #0
 8007bce:	d102      	bne.n	8007bd6 <disk_status+0x26>
		{
			stat = STA_NOINIT;
 8007bd0:	2301      	movs	r3, #1
 8007bd2:	73fb      	strb	r3, [r7, #15]
 8007bd4:	e001      	b.n	8007bda <disk_status+0x2a>
		}else{
			stat = 0;
 8007bd6:	2300      	movs	r3, #0
 8007bd8:	73fb      	strb	r3, [r7, #15]
		}

		return stat;
 8007bda:	7bfb      	ldrb	r3, [r7, #15]
 8007bdc:	e00c      	b.n	8007bf8 <disk_status+0x48>

	case DEV_MMC :

		if(!extflash_is_initialized())
 8007bde:	f7fb fa01 	bl	8002fe4 <extflash_is_initialized>
 8007be2:	4603      	mov	r3, r0
 8007be4:	2b00      	cmp	r3, #0
 8007be6:	d102      	bne.n	8007bee <disk_status+0x3e>
		{
			stat = STA_NOINIT;
 8007be8:	2301      	movs	r3, #1
 8007bea:	73fb      	strb	r3, [r7, #15]
 8007bec:	e001      	b.n	8007bf2 <disk_status+0x42>
		}else{
			stat = 0;
 8007bee:	2300      	movs	r3, #0
 8007bf0:	73fb      	strb	r3, [r7, #15]
		}

		return stat;
 8007bf2:	7bfb      	ldrb	r3, [r7, #15]
 8007bf4:	e000      	b.n	8007bf8 <disk_status+0x48>

	}
	return STA_NOINIT;
 8007bf6:	2301      	movs	r3, #1
}
 8007bf8:	4618      	mov	r0, r3
 8007bfa:	3710      	adds	r7, #16
 8007bfc:	46bd      	mov	sp, r7
 8007bfe:	bd80      	pop	{r7, pc}

08007c00 <disk_initialize>:
/*-----------------------------------------------------------------------*/

DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8007c00:	b580      	push	{r7, lr}
 8007c02:	b084      	sub	sp, #16
 8007c04:	af00      	add	r7, sp, #0
 8007c06:	4603      	mov	r3, r0
 8007c08:	71fb      	strb	r3, [r7, #7]
	DSTATUS stat;
	switch (pdrv) {
 8007c0a:	79fb      	ldrb	r3, [r7, #7]
 8007c0c:	2b00      	cmp	r3, #0
 8007c0e:	d002      	beq.n	8007c16 <disk_initialize+0x16>
 8007c10:	2b01      	cmp	r3, #1
 8007c12:	d00c      	beq.n	8007c2e <disk_initialize+0x2e>
 8007c14:	e017      	b.n	8007c46 <disk_initialize+0x46>
	case DEV_RAM :

		if(psram_init() < 0)
 8007c16:	f7ff faa1 	bl	800715c <psram_init>
 8007c1a:	4603      	mov	r3, r0
 8007c1c:	2b00      	cmp	r3, #0
 8007c1e:	da02      	bge.n	8007c26 <disk_initialize+0x26>
		{
			stat = STA_NODISK;
 8007c20:	2302      	movs	r3, #2
 8007c22:	73fb      	strb	r3, [r7, #15]
 8007c24:	e001      	b.n	8007c2a <disk_initialize+0x2a>
		}else{
			stat = 0;
 8007c26:	2300      	movs	r3, #0
 8007c28:	73fb      	strb	r3, [r7, #15]
		}

		return stat;
 8007c2a:	7bfb      	ldrb	r3, [r7, #15]
 8007c2c:	e00c      	b.n	8007c48 <disk_initialize+0x48>

	case DEV_MMC :

		if(extflash_init() < 0)
 8007c2e:	f7fb f9e5 	bl	8002ffc <extflash_init>
 8007c32:	4603      	mov	r3, r0
 8007c34:	2b00      	cmp	r3, #0
 8007c36:	da02      	bge.n	8007c3e <disk_initialize+0x3e>
		{
			stat = STA_NODISK;
 8007c38:	2302      	movs	r3, #2
 8007c3a:	73fb      	strb	r3, [r7, #15]
 8007c3c:	e001      	b.n	8007c42 <disk_initialize+0x42>
		}else{
			stat = 0;
 8007c3e:	2300      	movs	r3, #0
 8007c40:	73fb      	strb	r3, [r7, #15]
		}

		return stat;
 8007c42:	7bfb      	ldrb	r3, [r7, #15]
 8007c44:	e000      	b.n	8007c48 <disk_initialize+0x48>

	}
	return STA_NOINIT;
 8007c46:	2301      	movs	r3, #1
}
 8007c48:	4618      	mov	r0, r3
 8007c4a:	3710      	adds	r7, #16
 8007c4c:	46bd      	mov	sp, r7
 8007c4e:	bd80      	pop	{r7, pc}

08007c50 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	LBA_t sector,	/* Start sector in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8007c50:	b580      	push	{r7, lr}
 8007c52:	b086      	sub	sp, #24
 8007c54:	af00      	add	r7, sp, #0
 8007c56:	60b9      	str	r1, [r7, #8]
 8007c58:	607a      	str	r2, [r7, #4]
 8007c5a:	603b      	str	r3, [r7, #0]
 8007c5c:	4603      	mov	r3, r0
 8007c5e:	73fb      	strb	r3, [r7, #15]
	DRESULT res;
	int result;

	switch (pdrv) {
 8007c60:	7bfb      	ldrb	r3, [r7, #15]
 8007c62:	2b00      	cmp	r3, #0
 8007c64:	d002      	beq.n	8007c6c <disk_read+0x1c>
 8007c66:	2b01      	cmp	r3, #1
 8007c68:	d010      	beq.n	8007c8c <disk_read+0x3c>
 8007c6a:	e01e      	b.n	8007caa <disk_read+0x5a>
	case DEV_RAM :

		if(psram_sector_read_write(0, sector, count, buff) < 0)
 8007c6c:	68bb      	ldr	r3, [r7, #8]
 8007c6e:	683a      	ldr	r2, [r7, #0]
 8007c70:	6879      	ldr	r1, [r7, #4]
 8007c72:	2000      	movs	r0, #0
 8007c74:	f7ff f94a 	bl	8006f0c <psram_sector_read_write>
 8007c78:	4603      	mov	r3, r0
 8007c7a:	2b00      	cmp	r3, #0
 8007c7c:	da02      	bge.n	8007c84 <disk_read+0x34>
		{
			res = RES_ERROR;
 8007c7e:	2301      	movs	r3, #1
 8007c80:	75fb      	strb	r3, [r7, #23]
 8007c82:	e001      	b.n	8007c88 <disk_read+0x38>
		}else{

			res = 0;
 8007c84:	2300      	movs	r3, #0
 8007c86:	75fb      	strb	r3, [r7, #23]
		}

		return res;
 8007c88:	7dfb      	ldrb	r3, [r7, #23]
 8007c8a:	e00f      	b.n	8007cac <disk_read+0x5c>

	case DEV_MMC :

		if(extflash_sector_read(sector, count, buff) < 0)
 8007c8c:	68ba      	ldr	r2, [r7, #8]
 8007c8e:	6839      	ldr	r1, [r7, #0]
 8007c90:	6878      	ldr	r0, [r7, #4]
 8007c92:	f7fb f88b 	bl	8002dac <extflash_sector_read>
 8007c96:	4603      	mov	r3, r0
 8007c98:	2b00      	cmp	r3, #0
 8007c9a:	da02      	bge.n	8007ca2 <disk_read+0x52>
		{
			res = RES_ERROR;
 8007c9c:	2301      	movs	r3, #1
 8007c9e:	75fb      	strb	r3, [r7, #23]
 8007ca0:	e001      	b.n	8007ca6 <disk_read+0x56>
		}else{

			res = 0;
 8007ca2:	2300      	movs	r3, #0
 8007ca4:	75fb      	strb	r3, [r7, #23]
		}

		return res;
 8007ca6:	7dfb      	ldrb	r3, [r7, #23]
 8007ca8:	e000      	b.n	8007cac <disk_read+0x5c>

	}

	return RES_PARERR;
 8007caa:	2304      	movs	r3, #4
}
 8007cac:	4618      	mov	r0, r3
 8007cae:	3718      	adds	r7, #24
 8007cb0:	46bd      	mov	sp, r7
 8007cb2:	bd80      	pop	{r7, pc}

08007cb4 <disk_write>:
	BYTE pdrv,			/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	LBA_t sector,		/* Start sector in LBA */
	UINT count			/* Number of sectors to write */
)
{
 8007cb4:	b580      	push	{r7, lr}
 8007cb6:	b086      	sub	sp, #24
 8007cb8:	af00      	add	r7, sp, #0
 8007cba:	60b9      	str	r1, [r7, #8]
 8007cbc:	607a      	str	r2, [r7, #4]
 8007cbe:	603b      	str	r3, [r7, #0]
 8007cc0:	4603      	mov	r3, r0
 8007cc2:	73fb      	strb	r3, [r7, #15]
	DRESULT res = RES_ERROR;
 8007cc4:	2301      	movs	r3, #1
 8007cc6:	75fb      	strb	r3, [r7, #23]

	switch (pdrv) {
 8007cc8:	7bfb      	ldrb	r3, [r7, #15]
 8007cca:	2b00      	cmp	r3, #0
 8007ccc:	d002      	beq.n	8007cd4 <disk_write+0x20>
 8007cce:	2b01      	cmp	r3, #1
 8007cd0:	d010      	beq.n	8007cf4 <disk_write+0x40>
 8007cd2:	e01e      	b.n	8007d12 <disk_write+0x5e>
	case DEV_RAM :

		if(psram_sector_read_write(1, sector, count, (const uint8_t *)buff) < 0)
 8007cd4:	68bb      	ldr	r3, [r7, #8]
 8007cd6:	683a      	ldr	r2, [r7, #0]
 8007cd8:	6879      	ldr	r1, [r7, #4]
 8007cda:	2001      	movs	r0, #1
 8007cdc:	f7ff f916 	bl	8006f0c <psram_sector_read_write>
 8007ce0:	4603      	mov	r3, r0
 8007ce2:	2b00      	cmp	r3, #0
 8007ce4:	da02      	bge.n	8007cec <disk_write+0x38>
		{
			res = RES_ERROR;
 8007ce6:	2301      	movs	r3, #1
 8007ce8:	75fb      	strb	r3, [r7, #23]
 8007cea:	e001      	b.n	8007cf0 <disk_write+0x3c>
		}else{

			res = 0;
 8007cec:	2300      	movs	r3, #0
 8007cee:	75fb      	strb	r3, [r7, #23]
		}

		return res;
 8007cf0:	7dfb      	ldrb	r3, [r7, #23]
 8007cf2:	e00f      	b.n	8007d14 <disk_write+0x60>

	case DEV_MMC :

		if(extflash_sector_write(sector, count, buff) < 0)
 8007cf4:	68ba      	ldr	r2, [r7, #8]
 8007cf6:	6839      	ldr	r1, [r7, #0]
 8007cf8:	6878      	ldr	r0, [r7, #4]
 8007cfa:	f7fb f8ec 	bl	8002ed6 <extflash_sector_write>
 8007cfe:	4603      	mov	r3, r0
 8007d00:	2b00      	cmp	r3, #0
 8007d02:	da02      	bge.n	8007d0a <disk_write+0x56>
		{
			res = RES_ERROR;
 8007d04:	2301      	movs	r3, #1
 8007d06:	75fb      	strb	r3, [r7, #23]
 8007d08:	e001      	b.n	8007d0e <disk_write+0x5a>
		}else{

			res = 0;
 8007d0a:	2300      	movs	r3, #0
 8007d0c:	75fb      	strb	r3, [r7, #23]
		}

		return res;
 8007d0e:	7dfb      	ldrb	r3, [r7, #23]
 8007d10:	e000      	b.n	8007d14 <disk_write+0x60>

	}

	return RES_PARERR;
 8007d12:	2304      	movs	r3, #4
}
 8007d14:	4618      	mov	r0, r3
 8007d16:	3718      	adds	r7, #24
 8007d18:	46bd      	mov	sp, r7
 8007d1a:	bd80      	pop	{r7, pc}

08007d1c <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 8007d1c:	b580      	push	{r7, lr}
 8007d1e:	b084      	sub	sp, #16
 8007d20:	af00      	add	r7, sp, #0
 8007d22:	4603      	mov	r3, r0
 8007d24:	603a      	str	r2, [r7, #0]
 8007d26:	71fb      	strb	r3, [r7, #7]
 8007d28:	460b      	mov	r3, r1
 8007d2a:	71bb      	strb	r3, [r7, #6]
	DRESULT res = RES_PARERR;
 8007d2c:	2304      	movs	r3, #4
 8007d2e:	73fb      	strb	r3, [r7, #15]

	switch (pdrv) {
 8007d30:	79fb      	ldrb	r3, [r7, #7]
 8007d32:	2b00      	cmp	r3, #0
 8007d34:	d002      	beq.n	8007d3c <disk_ioctl+0x20>
 8007d36:	2b01      	cmp	r3, #1
 8007d38:	d036      	beq.n	8007da8 <disk_ioctl+0x8c>
 8007d3a:	e06b      	b.n	8007e14 <disk_ioctl+0xf8>
	case DEV_RAM :

		if(!psram_is_initialized())return RES_NOTRDY;
 8007d3c:	f7ff f9e0 	bl	8007100 <psram_is_initialized>
 8007d40:	4603      	mov	r3, r0
 8007d42:	2b00      	cmp	r3, #0
 8007d44:	d101      	bne.n	8007d4a <disk_ioctl+0x2e>
 8007d46:	2303      	movs	r3, #3
 8007d48:	e065      	b.n	8007e16 <disk_ioctl+0xfa>

		switch(cmd)
 8007d4a:	79bb      	ldrb	r3, [r7, #6]
 8007d4c:	2b04      	cmp	r3, #4
 8007d4e:	d826      	bhi.n	8007d9e <disk_ioctl+0x82>
 8007d50:	a201      	add	r2, pc, #4	@ (adr r2, 8007d58 <disk_ioctl+0x3c>)
 8007d52:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007d56:	bf00      	nop
 8007d58:	08007d99 	.word	0x08007d99
 8007d5c:	08007d6d 	.word	0x08007d6d
 8007d60:	08007d7d 	.word	0x08007d7d
 8007d64:	08007d8d 	.word	0x08007d8d
 8007d68:	08007d99 	.word	0x08007d99
		{
			case GET_SECTOR_COUNT:

				*((uint32_t *)buff) = psram_get_sector_count();
 8007d6c:	f7ff f9de 	bl	800712c <psram_get_sector_count>
 8007d70:	4602      	mov	r2, r0
 8007d72:	683b      	ldr	r3, [r7, #0]
 8007d74:	601a      	str	r2, [r3, #0]
				res = 0;
 8007d76:	2300      	movs	r3, #0
 8007d78:	73fb      	strb	r3, [r7, #15]
				break;
 8007d7a:	e013      	b.n	8007da4 <disk_ioctl+0x88>

			case GET_SECTOR_SIZE:

				*((uint32_t *)buff) = psram_get_sector_size();
 8007d7c:	f7ff f9cc 	bl	8007118 <psram_get_sector_size>
 8007d80:	4602      	mov	r2, r0
 8007d82:	683b      	ldr	r3, [r7, #0]
 8007d84:	601a      	str	r2, [r3, #0]
				res = 0;
 8007d86:	2300      	movs	r3, #0
 8007d88:	73fb      	strb	r3, [r7, #15]
				break;
 8007d8a:	e00b      	b.n	8007da4 <disk_ioctl+0x88>

			case GET_BLOCK_SIZE:

				*((uint32_t *)buff) = 1; //Default
 8007d8c:	683b      	ldr	r3, [r7, #0]
 8007d8e:	2201      	movs	r2, #1
 8007d90:	601a      	str	r2, [r3, #0]
				res = 0;
 8007d92:	2300      	movs	r3, #0
 8007d94:	73fb      	strb	r3, [r7, #15]
				break;
 8007d96:	e005      	b.n	8007da4 <disk_ioctl+0x88>

			case CTRL_TRIM:
			case CTRL_SYNC:

				res = 0;
 8007d98:	2300      	movs	r3, #0
 8007d9a:	73fb      	strb	r3, [r7, #15]
				break;
 8007d9c:	e002      	b.n	8007da4 <disk_ioctl+0x88>

			default:
				res = RES_PARERR;
 8007d9e:	2304      	movs	r3, #4
 8007da0:	73fb      	strb	r3, [r7, #15]
				break;
 8007da2:	bf00      	nop
		}

		return res;
 8007da4:	7bfb      	ldrb	r3, [r7, #15]
 8007da6:	e036      	b.n	8007e16 <disk_ioctl+0xfa>

	case DEV_MMC :

		if(!extflash_is_initialized())return RES_NOTRDY;
 8007da8:	f7fb f91c 	bl	8002fe4 <extflash_is_initialized>
 8007dac:	4603      	mov	r3, r0
 8007dae:	2b00      	cmp	r3, #0
 8007db0:	d101      	bne.n	8007db6 <disk_ioctl+0x9a>
 8007db2:	2303      	movs	r3, #3
 8007db4:	e02f      	b.n	8007e16 <disk_ioctl+0xfa>

		switch(cmd)
 8007db6:	79bb      	ldrb	r3, [r7, #6]
 8007db8:	2b04      	cmp	r3, #4
 8007dba:	d826      	bhi.n	8007e0a <disk_ioctl+0xee>
 8007dbc:	a201      	add	r2, pc, #4	@ (adr r2, 8007dc4 <disk_ioctl+0xa8>)
 8007dbe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007dc2:	bf00      	nop
 8007dc4:	08007e05 	.word	0x08007e05
 8007dc8:	08007dd9 	.word	0x08007dd9
 8007dcc:	08007de9 	.word	0x08007de9
 8007dd0:	08007df9 	.word	0x08007df9
 8007dd4:	08007e05 	.word	0x08007e05
		{
			case GET_SECTOR_COUNT:

				*((uint32_t *)buff) = extflash_get_sector_count();
 8007dd8:	f7fb f8f8 	bl	8002fcc <extflash_get_sector_count>
 8007ddc:	4602      	mov	r2, r0
 8007dde:	683b      	ldr	r3, [r7, #0]
 8007de0:	601a      	str	r2, [r3, #0]
				res = 0;
 8007de2:	2300      	movs	r3, #0
 8007de4:	73fb      	strb	r3, [r7, #15]
				break;
 8007de6:	e013      	b.n	8007e10 <disk_ioctl+0xf4>

			case GET_SECTOR_SIZE:

				*((uint32_t *)buff) = extflash_get_sector_size();
 8007de8:	f7fb f8e7 	bl	8002fba <extflash_get_sector_size>
 8007dec:	4602      	mov	r2, r0
 8007dee:	683b      	ldr	r3, [r7, #0]
 8007df0:	601a      	str	r2, [r3, #0]
				res = 0;
 8007df2:	2300      	movs	r3, #0
 8007df4:	73fb      	strb	r3, [r7, #15]
				break;
 8007df6:	e00b      	b.n	8007e10 <disk_ioctl+0xf4>

			case GET_BLOCK_SIZE:

				*((uint32_t *)buff) = 1; //Default
 8007df8:	683b      	ldr	r3, [r7, #0]
 8007dfa:	2201      	movs	r2, #1
 8007dfc:	601a      	str	r2, [r3, #0]
				res = 0;
 8007dfe:	2300      	movs	r3, #0
 8007e00:	73fb      	strb	r3, [r7, #15]
				break;
 8007e02:	e005      	b.n	8007e10 <disk_ioctl+0xf4>

			case CTRL_TRIM:
			case CTRL_SYNC:

				res = 0;
 8007e04:	2300      	movs	r3, #0
 8007e06:	73fb      	strb	r3, [r7, #15]
				break;
 8007e08:	e002      	b.n	8007e10 <disk_ioctl+0xf4>

			default:
				res = RES_PARERR;
 8007e0a:	2304      	movs	r3, #4
 8007e0c:	73fb      	strb	r3, [r7, #15]
				break;
 8007e0e:	bf00      	nop
		}

		return res;
 8007e10:	7bfb      	ldrb	r3, [r7, #15]
 8007e12:	e000      	b.n	8007e16 <disk_ioctl+0xfa>

	}

	return RES_PARERR;
 8007e14:	2304      	movs	r3, #4
}
 8007e16:	4618      	mov	r0, r3
 8007e18:	3710      	adds	r7, #16
 8007e1a:	46bd      	mov	sp, r7
 8007e1c:	bd80      	pop	{r7, pc}
 8007e1e:	bf00      	nop

08007e20 <ld_word>:
/*-----------------------------------------------------------------------*/
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 8007e20:	b480      	push	{r7}
 8007e22:	b085      	sub	sp, #20
 8007e24:	af00      	add	r7, sp, #0
 8007e26:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 8007e28:	687b      	ldr	r3, [r7, #4]
 8007e2a:	3301      	adds	r3, #1
 8007e2c:	781b      	ldrb	r3, [r3, #0]
 8007e2e:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 8007e30:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8007e34:	021b      	lsls	r3, r3, #8
 8007e36:	b21a      	sxth	r2, r3
 8007e38:	687b      	ldr	r3, [r7, #4]
 8007e3a:	781b      	ldrb	r3, [r3, #0]
 8007e3c:	b21b      	sxth	r3, r3
 8007e3e:	4313      	orrs	r3, r2
 8007e40:	b21b      	sxth	r3, r3
 8007e42:	81fb      	strh	r3, [r7, #14]
	return rv;
 8007e44:	89fb      	ldrh	r3, [r7, #14]
}
 8007e46:	4618      	mov	r0, r3
 8007e48:	3714      	adds	r7, #20
 8007e4a:	46bd      	mov	sp, r7
 8007e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e50:	4770      	bx	lr

08007e52 <ld_dword>:

static DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 8007e52:	b480      	push	{r7}
 8007e54:	b085      	sub	sp, #20
 8007e56:	af00      	add	r7, sp, #0
 8007e58:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 8007e5a:	687b      	ldr	r3, [r7, #4]
 8007e5c:	3303      	adds	r3, #3
 8007e5e:	781b      	ldrb	r3, [r3, #0]
 8007e60:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 8007e62:	68fb      	ldr	r3, [r7, #12]
 8007e64:	021b      	lsls	r3, r3, #8
 8007e66:	687a      	ldr	r2, [r7, #4]
 8007e68:	3202      	adds	r2, #2
 8007e6a:	7812      	ldrb	r2, [r2, #0]
 8007e6c:	4313      	orrs	r3, r2
 8007e6e:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 8007e70:	68fb      	ldr	r3, [r7, #12]
 8007e72:	021b      	lsls	r3, r3, #8
 8007e74:	687a      	ldr	r2, [r7, #4]
 8007e76:	3201      	adds	r2, #1
 8007e78:	7812      	ldrb	r2, [r2, #0]
 8007e7a:	4313      	orrs	r3, r2
 8007e7c:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 8007e7e:	68fb      	ldr	r3, [r7, #12]
 8007e80:	021b      	lsls	r3, r3, #8
 8007e82:	687a      	ldr	r2, [r7, #4]
 8007e84:	7812      	ldrb	r2, [r2, #0]
 8007e86:	4313      	orrs	r3, r2
 8007e88:	60fb      	str	r3, [r7, #12]
	return rv;
 8007e8a:	68fb      	ldr	r3, [r7, #12]
}
 8007e8c:	4618      	mov	r0, r3
 8007e8e:	3714      	adds	r7, #20
 8007e90:	46bd      	mov	sp, r7
 8007e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e96:	4770      	bx	lr

08007e98 <st_word>:
}
#endif

#if !FF_FS_READONLY
static void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 8007e98:	b480      	push	{r7}
 8007e9a:	b083      	sub	sp, #12
 8007e9c:	af00      	add	r7, sp, #0
 8007e9e:	6078      	str	r0, [r7, #4]
 8007ea0:	460b      	mov	r3, r1
 8007ea2:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 8007ea4:	687b      	ldr	r3, [r7, #4]
 8007ea6:	1c5a      	adds	r2, r3, #1
 8007ea8:	607a      	str	r2, [r7, #4]
 8007eaa:	887a      	ldrh	r2, [r7, #2]
 8007eac:	b2d2      	uxtb	r2, r2
 8007eae:	701a      	strb	r2, [r3, #0]
 8007eb0:	887b      	ldrh	r3, [r7, #2]
 8007eb2:	0a1b      	lsrs	r3, r3, #8
 8007eb4:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 8007eb6:	687b      	ldr	r3, [r7, #4]
 8007eb8:	1c5a      	adds	r2, r3, #1
 8007eba:	607a      	str	r2, [r7, #4]
 8007ebc:	887a      	ldrh	r2, [r7, #2]
 8007ebe:	b2d2      	uxtb	r2, r2
 8007ec0:	701a      	strb	r2, [r3, #0]
}
 8007ec2:	bf00      	nop
 8007ec4:	370c      	adds	r7, #12
 8007ec6:	46bd      	mov	sp, r7
 8007ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ecc:	4770      	bx	lr

08007ece <st_dword>:

static void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 8007ece:	b480      	push	{r7}
 8007ed0:	b083      	sub	sp, #12
 8007ed2:	af00      	add	r7, sp, #0
 8007ed4:	6078      	str	r0, [r7, #4]
 8007ed6:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8007ed8:	687b      	ldr	r3, [r7, #4]
 8007eda:	1c5a      	adds	r2, r3, #1
 8007edc:	607a      	str	r2, [r7, #4]
 8007ede:	683a      	ldr	r2, [r7, #0]
 8007ee0:	b2d2      	uxtb	r2, r2
 8007ee2:	701a      	strb	r2, [r3, #0]
 8007ee4:	683b      	ldr	r3, [r7, #0]
 8007ee6:	0a1b      	lsrs	r3, r3, #8
 8007ee8:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8007eea:	687b      	ldr	r3, [r7, #4]
 8007eec:	1c5a      	adds	r2, r3, #1
 8007eee:	607a      	str	r2, [r7, #4]
 8007ef0:	683a      	ldr	r2, [r7, #0]
 8007ef2:	b2d2      	uxtb	r2, r2
 8007ef4:	701a      	strb	r2, [r3, #0]
 8007ef6:	683b      	ldr	r3, [r7, #0]
 8007ef8:	0a1b      	lsrs	r3, r3, #8
 8007efa:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8007efc:	687b      	ldr	r3, [r7, #4]
 8007efe:	1c5a      	adds	r2, r3, #1
 8007f00:	607a      	str	r2, [r7, #4]
 8007f02:	683a      	ldr	r2, [r7, #0]
 8007f04:	b2d2      	uxtb	r2, r2
 8007f06:	701a      	strb	r2, [r3, #0]
 8007f08:	683b      	ldr	r3, [r7, #0]
 8007f0a:	0a1b      	lsrs	r3, r3, #8
 8007f0c:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 8007f0e:	687b      	ldr	r3, [r7, #4]
 8007f10:	1c5a      	adds	r2, r3, #1
 8007f12:	607a      	str	r2, [r7, #4]
 8007f14:	683a      	ldr	r2, [r7, #0]
 8007f16:	b2d2      	uxtb	r2, r2
 8007f18:	701a      	strb	r2, [r3, #0]
}
 8007f1a:	bf00      	nop
 8007f1c:	370c      	adds	r7, #12
 8007f1e:	46bd      	mov	sp, r7
 8007f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f24:	4770      	bx	lr

08007f26 <dbc_1st>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Test if the byte is DBC 1st byte */
static int dbc_1st (BYTE c)
{
 8007f26:	b480      	push	{r7}
 8007f28:	b083      	sub	sp, #12
 8007f2a:	af00      	add	r7, sp, #0
 8007f2c:	4603      	mov	r3, r0
 8007f2e:	71fb      	strb	r3, [r7, #7]
	if (c >= DbcTbl[0]) {
		if (c <= DbcTbl[1]) return 1;
		if (c >= DbcTbl[2] && c <= DbcTbl[3]) return 1;
	}
#else						/* SBCS fixed code page */
	if (c != 0) return 0;	/* Always false */
 8007f30:	79fb      	ldrb	r3, [r7, #7]
 8007f32:	2b00      	cmp	r3, #0
 8007f34:	d001      	beq.n	8007f3a <dbc_1st+0x14>
 8007f36:	2300      	movs	r3, #0
 8007f38:	e000      	b.n	8007f3c <dbc_1st+0x16>
#endif
	return 0;
 8007f3a:	2300      	movs	r3, #0
}
 8007f3c:	4618      	mov	r0, r3
 8007f3e:	370c      	adds	r7, #12
 8007f40:	46bd      	mov	sp, r7
 8007f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f46:	4770      	bx	lr

08007f48 <dbc_2nd>:


/* Test if the byte is DBC 2nd byte */
static int dbc_2nd (BYTE c)
{
 8007f48:	b480      	push	{r7}
 8007f4a:	b083      	sub	sp, #12
 8007f4c:	af00      	add	r7, sp, #0
 8007f4e:	4603      	mov	r3, r0
 8007f50:	71fb      	strb	r3, [r7, #7]
		if (c <= DbcTbl[5]) return 1;
		if (c >= DbcTbl[6] && c <= DbcTbl[7]) return 1;
		if (c >= DbcTbl[8] && c <= DbcTbl[9]) return 1;
	}
#else						/* SBCS fixed code page */
	if (c != 0) return 0;	/* Always false */
 8007f52:	79fb      	ldrb	r3, [r7, #7]
 8007f54:	2b00      	cmp	r3, #0
 8007f56:	d001      	beq.n	8007f5c <dbc_2nd+0x14>
 8007f58:	2300      	movs	r3, #0
 8007f5a:	e000      	b.n	8007f5e <dbc_2nd+0x16>
#endif
	return 0;
 8007f5c:	2300      	movs	r3, #0
}
 8007f5e:	4618      	mov	r0, r3
 8007f60:	370c      	adds	r7, #12
 8007f62:	46bd      	mov	sp, r7
 8007f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f68:	4770      	bx	lr

08007f6a <sync_window>:
/*-----------------------------------------------------------------------*/
#if !FF_FS_READONLY
static FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERR */
	FATFS* fs			/* Filesystem object */
)
{
 8007f6a:	b580      	push	{r7, lr}
 8007f6c:	b084      	sub	sp, #16
 8007f6e:	af00      	add	r7, sp, #0
 8007f70:	6078      	str	r0, [r7, #4]
	FRESULT res = FR_OK;
 8007f72:	2300      	movs	r3, #0
 8007f74:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Is the disk access window dirty? */
 8007f76:	687b      	ldr	r3, [r7, #4]
 8007f78:	791b      	ldrb	r3, [r3, #4]
 8007f7a:	2b00      	cmp	r3, #0
 8007f7c:	d02c      	beq.n	8007fd8 <sync_window+0x6e>
		if (disk_write(fs->pdrv, fs->win, fs->winsect, 1) == RES_OK) {	/* Write it back into the volume */
 8007f7e:	687b      	ldr	r3, [r7, #4]
 8007f80:	7858      	ldrb	r0, [r3, #1]
 8007f82:	687b      	ldr	r3, [r7, #4]
 8007f84:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 8007f88:	687b      	ldr	r3, [r7, #4]
 8007f8a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007f8c:	2301      	movs	r3, #1
 8007f8e:	f7ff fe91 	bl	8007cb4 <disk_write>
 8007f92:	4603      	mov	r3, r0
 8007f94:	2b00      	cmp	r3, #0
 8007f96:	d11d      	bne.n	8007fd4 <sync_window+0x6a>
			fs->wflag = 0;	/* Clear window dirty flag */
 8007f98:	687b      	ldr	r3, [r7, #4]
 8007f9a:	2200      	movs	r2, #0
 8007f9c:	711a      	strb	r2, [r3, #4]
			if (fs->winsect - fs->fatbase < fs->fsize) {	/* Is it in the 1st FAT? */
 8007f9e:	687b      	ldr	r3, [r7, #4]
 8007fa0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007fa2:	687b      	ldr	r3, [r7, #4]
 8007fa4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007fa6:	1ad2      	subs	r2, r2, r3
 8007fa8:	687b      	ldr	r3, [r7, #4]
 8007faa:	69db      	ldr	r3, [r3, #28]
 8007fac:	429a      	cmp	r2, r3
 8007fae:	d213      	bcs.n	8007fd8 <sync_window+0x6e>
				if (fs->n_fats == 2) disk_write(fs->pdrv, fs->win, fs->winsect + fs->fsize, 1);	/* Reflect it to 2nd FAT if needed */
 8007fb0:	687b      	ldr	r3, [r7, #4]
 8007fb2:	78db      	ldrb	r3, [r3, #3]
 8007fb4:	2b02      	cmp	r3, #2
 8007fb6:	d10f      	bne.n	8007fd8 <sync_window+0x6e>
 8007fb8:	687b      	ldr	r3, [r7, #4]
 8007fba:	7858      	ldrb	r0, [r3, #1]
 8007fbc:	687b      	ldr	r3, [r7, #4]
 8007fbe:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 8007fc2:	687b      	ldr	r3, [r7, #4]
 8007fc4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007fc6:	687b      	ldr	r3, [r7, #4]
 8007fc8:	69db      	ldr	r3, [r3, #28]
 8007fca:	441a      	add	r2, r3
 8007fcc:	2301      	movs	r3, #1
 8007fce:	f7ff fe71 	bl	8007cb4 <disk_write>
 8007fd2:	e001      	b.n	8007fd8 <sync_window+0x6e>
			}
		} else {
			res = FR_DISK_ERR;
 8007fd4:	2301      	movs	r3, #1
 8007fd6:	73fb      	strb	r3, [r7, #15]
		}
	}
	return res;
 8007fd8:	7bfb      	ldrb	r3, [r7, #15]
}
 8007fda:	4618      	mov	r0, r3
 8007fdc:	3710      	adds	r7, #16
 8007fde:	46bd      	mov	sp, r7
 8007fe0:	bd80      	pop	{r7, pc}

08007fe2 <move_window>:

static FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERR */
	FATFS* fs,		/* Filesystem object */
	LBA_t sect		/* Sector LBA to make appearance in the fs->win[] */
)
{
 8007fe2:	b580      	push	{r7, lr}
 8007fe4:	b084      	sub	sp, #16
 8007fe6:	af00      	add	r7, sp, #0
 8007fe8:	6078      	str	r0, [r7, #4]
 8007fea:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 8007fec:	2300      	movs	r3, #0
 8007fee:	73fb      	strb	r3, [r7, #15]


	if (sect != fs->winsect) {	/* Window offset changed? */
 8007ff0:	687b      	ldr	r3, [r7, #4]
 8007ff2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007ff4:	683a      	ldr	r2, [r7, #0]
 8007ff6:	429a      	cmp	r2, r3
 8007ff8:	d01b      	beq.n	8008032 <move_window+0x50>
#if !FF_FS_READONLY
		res = sync_window(fs);		/* Flush the window */
 8007ffa:	6878      	ldr	r0, [r7, #4]
 8007ffc:	f7ff ffb5 	bl	8007f6a <sync_window>
 8008000:	4603      	mov	r3, r0
 8008002:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 8008004:	7bfb      	ldrb	r3, [r7, #15]
 8008006:	2b00      	cmp	r3, #0
 8008008:	d113      	bne.n	8008032 <move_window+0x50>
			if (disk_read(fs->pdrv, fs->win, sect, 1) != RES_OK) {
 800800a:	687b      	ldr	r3, [r7, #4]
 800800c:	7858      	ldrb	r0, [r3, #1]
 800800e:	687b      	ldr	r3, [r7, #4]
 8008010:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 8008014:	2301      	movs	r3, #1
 8008016:	683a      	ldr	r2, [r7, #0]
 8008018:	f7ff fe1a 	bl	8007c50 <disk_read>
 800801c:	4603      	mov	r3, r0
 800801e:	2b00      	cmp	r3, #0
 8008020:	d004      	beq.n	800802c <move_window+0x4a>
				sect = (LBA_t)0 - 1;	/* Invalidate window if read data is not valid */
 8008022:	f04f 33ff 	mov.w	r3, #4294967295
 8008026:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 8008028:	2301      	movs	r3, #1
 800802a:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sect;
 800802c:	687b      	ldr	r3, [r7, #4]
 800802e:	683a      	ldr	r2, [r7, #0]
 8008030:	631a      	str	r2, [r3, #48]	@ 0x30
		}
	}
	return res;
 8008032:	7bfb      	ldrb	r3, [r7, #15]
}
 8008034:	4618      	mov	r0, r3
 8008036:	3710      	adds	r7, #16
 8008038:	46bd      	mov	sp, r7
 800803a:	bd80      	pop	{r7, pc}

0800803c <sync_fs>:
/*-----------------------------------------------------------------------*/

static FRESULT sync_fs (	/* Returns FR_OK or FR_DISK_ERR */
	FATFS* fs		/* Filesystem object */
)
{
 800803c:	b580      	push	{r7, lr}
 800803e:	b084      	sub	sp, #16
 8008040:	af00      	add	r7, sp, #0
 8008042:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 8008044:	6878      	ldr	r0, [r7, #4]
 8008046:	f7ff ff90 	bl	8007f6a <sync_window>
 800804a:	4603      	mov	r3, r0
 800804c:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800804e:	7bfb      	ldrb	r3, [r7, #15]
 8008050:	2b00      	cmp	r3, #0
 8008052:	d158      	bne.n	8008106 <sync_fs+0xca>
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {	/* FAT32: Update FSInfo sector if needed */
 8008054:	687b      	ldr	r3, [r7, #4]
 8008056:	781b      	ldrb	r3, [r3, #0]
 8008058:	2b03      	cmp	r3, #3
 800805a:	d148      	bne.n	80080ee <sync_fs+0xb2>
 800805c:	687b      	ldr	r3, [r7, #4]
 800805e:	795b      	ldrb	r3, [r3, #5]
 8008060:	2b01      	cmp	r3, #1
 8008062:	d144      	bne.n	80080ee <sync_fs+0xb2>
			/* Create FSInfo structure */
			memset(fs->win, 0, sizeof fs->win);
 8008064:	687b      	ldr	r3, [r7, #4]
 8008066:	3334      	adds	r3, #52	@ 0x34
 8008068:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 800806c:	2100      	movs	r1, #0
 800806e:	4618      	mov	r0, r3
 8008070:	f00d ff8a 	bl	8015f88 <memset>
			st_word(fs->win + BS_55AA, 0xAA55);					/* Boot signature */
 8008074:	687b      	ldr	r3, [r7, #4]
 8008076:	3334      	adds	r3, #52	@ 0x34
 8008078:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 800807c:	f64a 2155 	movw	r1, #43605	@ 0xaa55
 8008080:	4618      	mov	r0, r3
 8008082:	f7ff ff09 	bl	8007e98 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);		/* Leading signature */
 8008086:	687b      	ldr	r3, [r7, #4]
 8008088:	3334      	adds	r3, #52	@ 0x34
 800808a:	4921      	ldr	r1, [pc, #132]	@ (8008110 <sync_fs+0xd4>)
 800808c:	4618      	mov	r0, r3
 800808e:	f7ff ff1e 	bl	8007ece <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);		/* Structure signature */
 8008092:	687b      	ldr	r3, [r7, #4]
 8008094:	3334      	adds	r3, #52	@ 0x34
 8008096:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 800809a:	491e      	ldr	r1, [pc, #120]	@ (8008114 <sync_fs+0xd8>)
 800809c:	4618      	mov	r0, r3
 800809e:	f7ff ff16 	bl	8007ece <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);	/* Number of free clusters */
 80080a2:	687b      	ldr	r3, [r7, #4]
 80080a4:	3334      	adds	r3, #52	@ 0x34
 80080a6:	f503 72f4 	add.w	r2, r3, #488	@ 0x1e8
 80080aa:	687b      	ldr	r3, [r7, #4]
 80080ac:	695b      	ldr	r3, [r3, #20]
 80080ae:	4619      	mov	r1, r3
 80080b0:	4610      	mov	r0, r2
 80080b2:	f7ff ff0c 	bl	8007ece <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);	/* Last allocated culuster */
 80080b6:	687b      	ldr	r3, [r7, #4]
 80080b8:	3334      	adds	r3, #52	@ 0x34
 80080ba:	f503 72f6 	add.w	r2, r3, #492	@ 0x1ec
 80080be:	687b      	ldr	r3, [r7, #4]
 80080c0:	691b      	ldr	r3, [r3, #16]
 80080c2:	4619      	mov	r1, r3
 80080c4:	4610      	mov	r0, r2
 80080c6:	f7ff ff02 	bl	8007ece <st_dword>
			fs->winsect = fs->volbase + 1;						/* Write it into the FSInfo sector (Next to VBR) */
 80080ca:	687b      	ldr	r3, [r7, #4]
 80080cc:	6a1b      	ldr	r3, [r3, #32]
 80080ce:	1c5a      	adds	r2, r3, #1
 80080d0:	687b      	ldr	r3, [r7, #4]
 80080d2:	631a      	str	r2, [r3, #48]	@ 0x30
			disk_write(fs->pdrv, fs->win, fs->winsect, 1);
 80080d4:	687b      	ldr	r3, [r7, #4]
 80080d6:	7858      	ldrb	r0, [r3, #1]
 80080d8:	687b      	ldr	r3, [r7, #4]
 80080da:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 80080de:	687b      	ldr	r3, [r7, #4]
 80080e0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80080e2:	2301      	movs	r3, #1
 80080e4:	f7ff fde6 	bl	8007cb4 <disk_write>
			fs->fsi_flag = 0;
 80080e8:	687b      	ldr	r3, [r7, #4]
 80080ea:	2200      	movs	r2, #0
 80080ec:	715a      	strb	r2, [r3, #5]
		}
		/* Make sure that no pending write process in the lower layer */
		if (disk_ioctl(fs->pdrv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 80080ee:	687b      	ldr	r3, [r7, #4]
 80080f0:	785b      	ldrb	r3, [r3, #1]
 80080f2:	2200      	movs	r2, #0
 80080f4:	2100      	movs	r1, #0
 80080f6:	4618      	mov	r0, r3
 80080f8:	f7ff fe10 	bl	8007d1c <disk_ioctl>
 80080fc:	4603      	mov	r3, r0
 80080fe:	2b00      	cmp	r3, #0
 8008100:	d001      	beq.n	8008106 <sync_fs+0xca>
 8008102:	2301      	movs	r3, #1
 8008104:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 8008106:	7bfb      	ldrb	r3, [r7, #15]
}
 8008108:	4618      	mov	r0, r3
 800810a:	3710      	adds	r7, #16
 800810c:	46bd      	mov	sp, r7
 800810e:	bd80      	pop	{r7, pc}
 8008110:	41615252 	.word	0x41615252
 8008114:	61417272 	.word	0x61417272

08008118 <clst2sect>:

static LBA_t clst2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* Filesystem object */
	DWORD clst		/* Cluster# to be converted */
)
{
 8008118:	b480      	push	{r7}
 800811a:	b083      	sub	sp, #12
 800811c:	af00      	add	r7, sp, #0
 800811e:	6078      	str	r0, [r7, #4]
 8008120:	6039      	str	r1, [r7, #0]
	clst -= 2;		/* Cluster number is origin from 2 */
 8008122:	683b      	ldr	r3, [r7, #0]
 8008124:	3b02      	subs	r3, #2
 8008126:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Is it invalid cluster number? */
 8008128:	687b      	ldr	r3, [r7, #4]
 800812a:	699b      	ldr	r3, [r3, #24]
 800812c:	3b02      	subs	r3, #2
 800812e:	683a      	ldr	r2, [r7, #0]
 8008130:	429a      	cmp	r2, r3
 8008132:	d301      	bcc.n	8008138 <clst2sect+0x20>
 8008134:	2300      	movs	r3, #0
 8008136:	e008      	b.n	800814a <clst2sect+0x32>
	return fs->database + (LBA_t)fs->csize * clst;	/* Start sector number of the cluster */
 8008138:	687b      	ldr	r3, [r7, #4]
 800813a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800813c:	687b      	ldr	r3, [r7, #4]
 800813e:	895b      	ldrh	r3, [r3, #10]
 8008140:	4619      	mov	r1, r3
 8008142:	683b      	ldr	r3, [r7, #0]
 8008144:	fb01 f303 	mul.w	r3, r1, r3
 8008148:	4413      	add	r3, r2
}
 800814a:	4618      	mov	r0, r3
 800814c:	370c      	adds	r7, #12
 800814e:	46bd      	mov	sp, r7
 8008150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008154:	4770      	bx	lr

08008156 <get_fat>:

static DWORD get_fat (		/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	FFOBJID* obj,	/* Corresponding object */
	DWORD clst		/* Cluster number to get the value */
)
{
 8008156:	b580      	push	{r7, lr}
 8008158:	b086      	sub	sp, #24
 800815a:	af00      	add	r7, sp, #0
 800815c:	6078      	str	r0, [r7, #4]
 800815e:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 8008160:	687b      	ldr	r3, [r7, #4]
 8008162:	681b      	ldr	r3, [r3, #0]
 8008164:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 8008166:	683b      	ldr	r3, [r7, #0]
 8008168:	2b01      	cmp	r3, #1
 800816a:	d904      	bls.n	8008176 <get_fat+0x20>
 800816c:	693b      	ldr	r3, [r7, #16]
 800816e:	699b      	ldr	r3, [r3, #24]
 8008170:	683a      	ldr	r2, [r7, #0]
 8008172:	429a      	cmp	r2, r3
 8008174:	d302      	bcc.n	800817c <get_fat+0x26>
		val = 1;	/* Internal error */
 8008176:	2301      	movs	r3, #1
 8008178:	617b      	str	r3, [r7, #20]
 800817a:	e0ba      	b.n	80082f2 <get_fat+0x19c>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 800817c:	f04f 33ff 	mov.w	r3, #4294967295
 8008180:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 8008182:	693b      	ldr	r3, [r7, #16]
 8008184:	781b      	ldrb	r3, [r3, #0]
 8008186:	2b03      	cmp	r3, #3
 8008188:	f000 8082 	beq.w	8008290 <get_fat+0x13a>
 800818c:	2b03      	cmp	r3, #3
 800818e:	f300 80a6 	bgt.w	80082de <get_fat+0x188>
 8008192:	2b01      	cmp	r3, #1
 8008194:	d002      	beq.n	800819c <get_fat+0x46>
 8008196:	2b02      	cmp	r3, #2
 8008198:	d055      	beq.n	8008246 <get_fat+0xf0>
 800819a:	e0a0      	b.n	80082de <get_fat+0x188>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 800819c:	683b      	ldr	r3, [r7, #0]
 800819e:	60fb      	str	r3, [r7, #12]
 80081a0:	68fb      	ldr	r3, [r7, #12]
 80081a2:	085b      	lsrs	r3, r3, #1
 80081a4:	68fa      	ldr	r2, [r7, #12]
 80081a6:	4413      	add	r3, r2
 80081a8:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80081aa:	693b      	ldr	r3, [r7, #16]
 80081ac:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80081ae:	693b      	ldr	r3, [r7, #16]
 80081b0:	899b      	ldrh	r3, [r3, #12]
 80081b2:	4619      	mov	r1, r3
 80081b4:	68fb      	ldr	r3, [r7, #12]
 80081b6:	fbb3 f3f1 	udiv	r3, r3, r1
 80081ba:	4413      	add	r3, r2
 80081bc:	4619      	mov	r1, r3
 80081be:	6938      	ldr	r0, [r7, #16]
 80081c0:	f7ff ff0f 	bl	8007fe2 <move_window>
 80081c4:	4603      	mov	r3, r0
 80081c6:	2b00      	cmp	r3, #0
 80081c8:	f040 808c 	bne.w	80082e4 <get_fat+0x18e>
			wc = fs->win[bc++ % SS(fs)];		/* Get 1st byte of the entry */
 80081cc:	68fb      	ldr	r3, [r7, #12]
 80081ce:	1c5a      	adds	r2, r3, #1
 80081d0:	60fa      	str	r2, [r7, #12]
 80081d2:	693a      	ldr	r2, [r7, #16]
 80081d4:	8992      	ldrh	r2, [r2, #12]
 80081d6:	fbb3 f1f2 	udiv	r1, r3, r2
 80081da:	fb01 f202 	mul.w	r2, r1, r2
 80081de:	1a9b      	subs	r3, r3, r2
 80081e0:	693a      	ldr	r2, [r7, #16]
 80081e2:	4413      	add	r3, r2
 80081e4:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 80081e8:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80081ea:	693b      	ldr	r3, [r7, #16]
 80081ec:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80081ee:	693b      	ldr	r3, [r7, #16]
 80081f0:	899b      	ldrh	r3, [r3, #12]
 80081f2:	4619      	mov	r1, r3
 80081f4:	68fb      	ldr	r3, [r7, #12]
 80081f6:	fbb3 f3f1 	udiv	r3, r3, r1
 80081fa:	4413      	add	r3, r2
 80081fc:	4619      	mov	r1, r3
 80081fe:	6938      	ldr	r0, [r7, #16]
 8008200:	f7ff feef 	bl	8007fe2 <move_window>
 8008204:	4603      	mov	r3, r0
 8008206:	2b00      	cmp	r3, #0
 8008208:	d16e      	bne.n	80082e8 <get_fat+0x192>
			wc |= fs->win[bc % SS(fs)] << 8;	/* Merge 2nd byte of the entry */
 800820a:	693b      	ldr	r3, [r7, #16]
 800820c:	899b      	ldrh	r3, [r3, #12]
 800820e:	461a      	mov	r2, r3
 8008210:	68fb      	ldr	r3, [r7, #12]
 8008212:	fbb3 f1f2 	udiv	r1, r3, r2
 8008216:	fb01 f202 	mul.w	r2, r1, r2
 800821a:	1a9b      	subs	r3, r3, r2
 800821c:	693a      	ldr	r2, [r7, #16]
 800821e:	4413      	add	r3, r2
 8008220:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8008224:	021b      	lsls	r3, r3, #8
 8008226:	68ba      	ldr	r2, [r7, #8]
 8008228:	4313      	orrs	r3, r2
 800822a:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);	/* Adjust bit position */
 800822c:	683b      	ldr	r3, [r7, #0]
 800822e:	f003 0301 	and.w	r3, r3, #1
 8008232:	2b00      	cmp	r3, #0
 8008234:	d002      	beq.n	800823c <get_fat+0xe6>
 8008236:	68bb      	ldr	r3, [r7, #8]
 8008238:	091b      	lsrs	r3, r3, #4
 800823a:	e002      	b.n	8008242 <get_fat+0xec>
 800823c:	68bb      	ldr	r3, [r7, #8]
 800823e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008242:	617b      	str	r3, [r7, #20]
			break;
 8008244:	e055      	b.n	80082f2 <get_fat+0x19c>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8008246:	693b      	ldr	r3, [r7, #16]
 8008248:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800824a:	693b      	ldr	r3, [r7, #16]
 800824c:	899b      	ldrh	r3, [r3, #12]
 800824e:	085b      	lsrs	r3, r3, #1
 8008250:	b29b      	uxth	r3, r3
 8008252:	4619      	mov	r1, r3
 8008254:	683b      	ldr	r3, [r7, #0]
 8008256:	fbb3 f3f1 	udiv	r3, r3, r1
 800825a:	4413      	add	r3, r2
 800825c:	4619      	mov	r1, r3
 800825e:	6938      	ldr	r0, [r7, #16]
 8008260:	f7ff febf 	bl	8007fe2 <move_window>
 8008264:	4603      	mov	r3, r0
 8008266:	2b00      	cmp	r3, #0
 8008268:	d140      	bne.n	80082ec <get_fat+0x196>
			val = ld_word(fs->win + clst * 2 % SS(fs));		/* Simple WORD array */
 800826a:	693b      	ldr	r3, [r7, #16]
 800826c:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 8008270:	683b      	ldr	r3, [r7, #0]
 8008272:	005b      	lsls	r3, r3, #1
 8008274:	693a      	ldr	r2, [r7, #16]
 8008276:	8992      	ldrh	r2, [r2, #12]
 8008278:	fbb3 f0f2 	udiv	r0, r3, r2
 800827c:	fb00 f202 	mul.w	r2, r0, r2
 8008280:	1a9b      	subs	r3, r3, r2
 8008282:	440b      	add	r3, r1
 8008284:	4618      	mov	r0, r3
 8008286:	f7ff fdcb 	bl	8007e20 <ld_word>
 800828a:	4603      	mov	r3, r0
 800828c:	617b      	str	r3, [r7, #20]
			break;
 800828e:	e030      	b.n	80082f2 <get_fat+0x19c>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8008290:	693b      	ldr	r3, [r7, #16]
 8008292:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8008294:	693b      	ldr	r3, [r7, #16]
 8008296:	899b      	ldrh	r3, [r3, #12]
 8008298:	089b      	lsrs	r3, r3, #2
 800829a:	b29b      	uxth	r3, r3
 800829c:	4619      	mov	r1, r3
 800829e:	683b      	ldr	r3, [r7, #0]
 80082a0:	fbb3 f3f1 	udiv	r3, r3, r1
 80082a4:	4413      	add	r3, r2
 80082a6:	4619      	mov	r1, r3
 80082a8:	6938      	ldr	r0, [r7, #16]
 80082aa:	f7ff fe9a 	bl	8007fe2 <move_window>
 80082ae:	4603      	mov	r3, r0
 80082b0:	2b00      	cmp	r3, #0
 80082b2:	d11d      	bne.n	80082f0 <get_fat+0x19a>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;	/* Simple DWORD array but mask out upper 4 bits */
 80082b4:	693b      	ldr	r3, [r7, #16]
 80082b6:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 80082ba:	683b      	ldr	r3, [r7, #0]
 80082bc:	009b      	lsls	r3, r3, #2
 80082be:	693a      	ldr	r2, [r7, #16]
 80082c0:	8992      	ldrh	r2, [r2, #12]
 80082c2:	fbb3 f0f2 	udiv	r0, r3, r2
 80082c6:	fb00 f202 	mul.w	r2, r0, r2
 80082ca:	1a9b      	subs	r3, r3, r2
 80082cc:	440b      	add	r3, r1
 80082ce:	4618      	mov	r0, r3
 80082d0:	f7ff fdbf 	bl	8007e52 <ld_dword>
 80082d4:	4603      	mov	r3, r0
 80082d6:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 80082da:	617b      	str	r3, [r7, #20]
			break;
 80082dc:	e009      	b.n	80082f2 <get_fat+0x19c>
			}
			val = 1;	/* Internal error */
			break;
#endif
		default:
			val = 1;	/* Internal error */
 80082de:	2301      	movs	r3, #1
 80082e0:	617b      	str	r3, [r7, #20]
 80082e2:	e006      	b.n	80082f2 <get_fat+0x19c>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80082e4:	bf00      	nop
 80082e6:	e004      	b.n	80082f2 <get_fat+0x19c>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80082e8:	bf00      	nop
 80082ea:	e002      	b.n	80082f2 <get_fat+0x19c>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 80082ec:	bf00      	nop
 80082ee:	e000      	b.n	80082f2 <get_fat+0x19c>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 80082f0:	bf00      	nop
		}
	}

	return val;
 80082f2:	697b      	ldr	r3, [r7, #20]
}
 80082f4:	4618      	mov	r0, r3
 80082f6:	3718      	adds	r7, #24
 80082f8:	46bd      	mov	sp, r7
 80082fa:	bd80      	pop	{r7, pc}

080082fc <put_fat>:
static FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding filesystem object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 80082fc:	b590      	push	{r4, r7, lr}
 80082fe:	b089      	sub	sp, #36	@ 0x24
 8008300:	af00      	add	r7, sp, #0
 8008302:	60f8      	str	r0, [r7, #12]
 8008304:	60b9      	str	r1, [r7, #8]
 8008306:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 8008308:	2302      	movs	r3, #2
 800830a:	77fb      	strb	r3, [r7, #31]


	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 800830c:	68bb      	ldr	r3, [r7, #8]
 800830e:	2b01      	cmp	r3, #1
 8008310:	f240 8109 	bls.w	8008526 <put_fat+0x22a>
 8008314:	68fb      	ldr	r3, [r7, #12]
 8008316:	699b      	ldr	r3, [r3, #24]
 8008318:	68ba      	ldr	r2, [r7, #8]
 800831a:	429a      	cmp	r2, r3
 800831c:	f080 8103 	bcs.w	8008526 <put_fat+0x22a>
		switch (fs->fs_type) {
 8008320:	68fb      	ldr	r3, [r7, #12]
 8008322:	781b      	ldrb	r3, [r3, #0]
 8008324:	2b03      	cmp	r3, #3
 8008326:	f000 80b6 	beq.w	8008496 <put_fat+0x19a>
 800832a:	2b03      	cmp	r3, #3
 800832c:	f300 80fb 	bgt.w	8008526 <put_fat+0x22a>
 8008330:	2b01      	cmp	r3, #1
 8008332:	d003      	beq.n	800833c <put_fat+0x40>
 8008334:	2b02      	cmp	r3, #2
 8008336:	f000 8083 	beq.w	8008440 <put_fat+0x144>
 800833a:	e0f4      	b.n	8008526 <put_fat+0x22a>
		case FS_FAT12:
			bc = (UINT)clst; bc += bc / 2;	/* bc: byte offset of the entry */
 800833c:	68bb      	ldr	r3, [r7, #8]
 800833e:	61bb      	str	r3, [r7, #24]
 8008340:	69bb      	ldr	r3, [r7, #24]
 8008342:	085b      	lsrs	r3, r3, #1
 8008344:	69ba      	ldr	r2, [r7, #24]
 8008346:	4413      	add	r3, r2
 8008348:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800834a:	68fb      	ldr	r3, [r7, #12]
 800834c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800834e:	68fb      	ldr	r3, [r7, #12]
 8008350:	899b      	ldrh	r3, [r3, #12]
 8008352:	4619      	mov	r1, r3
 8008354:	69bb      	ldr	r3, [r7, #24]
 8008356:	fbb3 f3f1 	udiv	r3, r3, r1
 800835a:	4413      	add	r3, r2
 800835c:	4619      	mov	r1, r3
 800835e:	68f8      	ldr	r0, [r7, #12]
 8008360:	f7ff fe3f 	bl	8007fe2 <move_window>
 8008364:	4603      	mov	r3, r0
 8008366:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8008368:	7ffb      	ldrb	r3, [r7, #31]
 800836a:	2b00      	cmp	r3, #0
 800836c:	f040 80d4 	bne.w	8008518 <put_fat+0x21c>
			p = fs->win + bc++ % SS(fs);
 8008370:	68fb      	ldr	r3, [r7, #12]
 8008372:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 8008376:	69bb      	ldr	r3, [r7, #24]
 8008378:	1c5a      	adds	r2, r3, #1
 800837a:	61ba      	str	r2, [r7, #24]
 800837c:	68fa      	ldr	r2, [r7, #12]
 800837e:	8992      	ldrh	r2, [r2, #12]
 8008380:	fbb3 f0f2 	udiv	r0, r3, r2
 8008384:	fb00 f202 	mul.w	r2, r0, r2
 8008388:	1a9b      	subs	r3, r3, r2
 800838a:	440b      	add	r3, r1
 800838c:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;	/* Update 1st byte */
 800838e:	68bb      	ldr	r3, [r7, #8]
 8008390:	f003 0301 	and.w	r3, r3, #1
 8008394:	2b00      	cmp	r3, #0
 8008396:	d00d      	beq.n	80083b4 <put_fat+0xb8>
 8008398:	697b      	ldr	r3, [r7, #20]
 800839a:	781b      	ldrb	r3, [r3, #0]
 800839c:	b25b      	sxtb	r3, r3
 800839e:	f003 030f 	and.w	r3, r3, #15
 80083a2:	b25a      	sxtb	r2, r3
 80083a4:	687b      	ldr	r3, [r7, #4]
 80083a6:	b25b      	sxtb	r3, r3
 80083a8:	011b      	lsls	r3, r3, #4
 80083aa:	b25b      	sxtb	r3, r3
 80083ac:	4313      	orrs	r3, r2
 80083ae:	b25b      	sxtb	r3, r3
 80083b0:	b2db      	uxtb	r3, r3
 80083b2:	e001      	b.n	80083b8 <put_fat+0xbc>
 80083b4:	687b      	ldr	r3, [r7, #4]
 80083b6:	b2db      	uxtb	r3, r3
 80083b8:	697a      	ldr	r2, [r7, #20]
 80083ba:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 80083bc:	68fb      	ldr	r3, [r7, #12]
 80083be:	2201      	movs	r2, #1
 80083c0:	711a      	strb	r2, [r3, #4]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 80083c2:	68fb      	ldr	r3, [r7, #12]
 80083c4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80083c6:	68fb      	ldr	r3, [r7, #12]
 80083c8:	899b      	ldrh	r3, [r3, #12]
 80083ca:	4619      	mov	r1, r3
 80083cc:	69bb      	ldr	r3, [r7, #24]
 80083ce:	fbb3 f3f1 	udiv	r3, r3, r1
 80083d2:	4413      	add	r3, r2
 80083d4:	4619      	mov	r1, r3
 80083d6:	68f8      	ldr	r0, [r7, #12]
 80083d8:	f7ff fe03 	bl	8007fe2 <move_window>
 80083dc:	4603      	mov	r3, r0
 80083de:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80083e0:	7ffb      	ldrb	r3, [r7, #31]
 80083e2:	2b00      	cmp	r3, #0
 80083e4:	f040 809a 	bne.w	800851c <put_fat+0x220>
			p = fs->win + bc % SS(fs);
 80083e8:	68fb      	ldr	r3, [r7, #12]
 80083ea:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 80083ee:	68fb      	ldr	r3, [r7, #12]
 80083f0:	899b      	ldrh	r3, [r3, #12]
 80083f2:	461a      	mov	r2, r3
 80083f4:	69bb      	ldr	r3, [r7, #24]
 80083f6:	fbb3 f0f2 	udiv	r0, r3, r2
 80083fa:	fb00 f202 	mul.w	r2, r0, r2
 80083fe:	1a9b      	subs	r3, r3, r2
 8008400:	440b      	add	r3, r1
 8008402:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));	/* Update 2nd byte */
 8008404:	68bb      	ldr	r3, [r7, #8]
 8008406:	f003 0301 	and.w	r3, r3, #1
 800840a:	2b00      	cmp	r3, #0
 800840c:	d003      	beq.n	8008416 <put_fat+0x11a>
 800840e:	687b      	ldr	r3, [r7, #4]
 8008410:	091b      	lsrs	r3, r3, #4
 8008412:	b2db      	uxtb	r3, r3
 8008414:	e00e      	b.n	8008434 <put_fat+0x138>
 8008416:	697b      	ldr	r3, [r7, #20]
 8008418:	781b      	ldrb	r3, [r3, #0]
 800841a:	b25b      	sxtb	r3, r3
 800841c:	f023 030f 	bic.w	r3, r3, #15
 8008420:	b25a      	sxtb	r2, r3
 8008422:	687b      	ldr	r3, [r7, #4]
 8008424:	0a1b      	lsrs	r3, r3, #8
 8008426:	b25b      	sxtb	r3, r3
 8008428:	f003 030f 	and.w	r3, r3, #15
 800842c:	b25b      	sxtb	r3, r3
 800842e:	4313      	orrs	r3, r2
 8008430:	b25b      	sxtb	r3, r3
 8008432:	b2db      	uxtb	r3, r3
 8008434:	697a      	ldr	r2, [r7, #20]
 8008436:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8008438:	68fb      	ldr	r3, [r7, #12]
 800843a:	2201      	movs	r2, #1
 800843c:	711a      	strb	r2, [r3, #4]
			break;
 800843e:	e072      	b.n	8008526 <put_fat+0x22a>

		case FS_FAT16:
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8008440:	68fb      	ldr	r3, [r7, #12]
 8008442:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8008444:	68fb      	ldr	r3, [r7, #12]
 8008446:	899b      	ldrh	r3, [r3, #12]
 8008448:	085b      	lsrs	r3, r3, #1
 800844a:	b29b      	uxth	r3, r3
 800844c:	4619      	mov	r1, r3
 800844e:	68bb      	ldr	r3, [r7, #8]
 8008450:	fbb3 f3f1 	udiv	r3, r3, r1
 8008454:	4413      	add	r3, r2
 8008456:	4619      	mov	r1, r3
 8008458:	68f8      	ldr	r0, [r7, #12]
 800845a:	f7ff fdc2 	bl	8007fe2 <move_window>
 800845e:	4603      	mov	r3, r0
 8008460:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8008462:	7ffb      	ldrb	r3, [r7, #31]
 8008464:	2b00      	cmp	r3, #0
 8008466:	d15b      	bne.n	8008520 <put_fat+0x224>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);	/* Simple WORD array */
 8008468:	68fb      	ldr	r3, [r7, #12]
 800846a:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 800846e:	68bb      	ldr	r3, [r7, #8]
 8008470:	005b      	lsls	r3, r3, #1
 8008472:	68fa      	ldr	r2, [r7, #12]
 8008474:	8992      	ldrh	r2, [r2, #12]
 8008476:	fbb3 f0f2 	udiv	r0, r3, r2
 800847a:	fb00 f202 	mul.w	r2, r0, r2
 800847e:	1a9b      	subs	r3, r3, r2
 8008480:	440b      	add	r3, r1
 8008482:	687a      	ldr	r2, [r7, #4]
 8008484:	b292      	uxth	r2, r2
 8008486:	4611      	mov	r1, r2
 8008488:	4618      	mov	r0, r3
 800848a:	f7ff fd05 	bl	8007e98 <st_word>
			fs->wflag = 1;
 800848e:	68fb      	ldr	r3, [r7, #12]
 8008490:	2201      	movs	r2, #1
 8008492:	711a      	strb	r2, [r3, #4]
			break;
 8008494:	e047      	b.n	8008526 <put_fat+0x22a>

		case FS_FAT32:
#if FF_FS_EXFAT
		case FS_EXFAT:
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8008496:	68fb      	ldr	r3, [r7, #12]
 8008498:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800849a:	68fb      	ldr	r3, [r7, #12]
 800849c:	899b      	ldrh	r3, [r3, #12]
 800849e:	089b      	lsrs	r3, r3, #2
 80084a0:	b29b      	uxth	r3, r3
 80084a2:	4619      	mov	r1, r3
 80084a4:	68bb      	ldr	r3, [r7, #8]
 80084a6:	fbb3 f3f1 	udiv	r3, r3, r1
 80084aa:	4413      	add	r3, r2
 80084ac:	4619      	mov	r1, r3
 80084ae:	68f8      	ldr	r0, [r7, #12]
 80084b0:	f7ff fd97 	bl	8007fe2 <move_window>
 80084b4:	4603      	mov	r3, r0
 80084b6:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80084b8:	7ffb      	ldrb	r3, [r7, #31]
 80084ba:	2b00      	cmp	r3, #0
 80084bc:	d132      	bne.n	8008524 <put_fat+0x228>
			if (!FF_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 80084be:	687b      	ldr	r3, [r7, #4]
 80084c0:	f023 4470 	bic.w	r4, r3, #4026531840	@ 0xf0000000
 80084c4:	68fb      	ldr	r3, [r7, #12]
 80084c6:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 80084ca:	68bb      	ldr	r3, [r7, #8]
 80084cc:	009b      	lsls	r3, r3, #2
 80084ce:	68fa      	ldr	r2, [r7, #12]
 80084d0:	8992      	ldrh	r2, [r2, #12]
 80084d2:	fbb3 f0f2 	udiv	r0, r3, r2
 80084d6:	fb00 f202 	mul.w	r2, r0, r2
 80084da:	1a9b      	subs	r3, r3, r2
 80084dc:	440b      	add	r3, r1
 80084de:	4618      	mov	r0, r3
 80084e0:	f7ff fcb7 	bl	8007e52 <ld_dword>
 80084e4:	4603      	mov	r3, r0
 80084e6:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 80084ea:	4323      	orrs	r3, r4
 80084ec:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 80084ee:	68fb      	ldr	r3, [r7, #12]
 80084f0:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 80084f4:	68bb      	ldr	r3, [r7, #8]
 80084f6:	009b      	lsls	r3, r3, #2
 80084f8:	68fa      	ldr	r2, [r7, #12]
 80084fa:	8992      	ldrh	r2, [r2, #12]
 80084fc:	fbb3 f0f2 	udiv	r0, r3, r2
 8008500:	fb00 f202 	mul.w	r2, r0, r2
 8008504:	1a9b      	subs	r3, r3, r2
 8008506:	440b      	add	r3, r1
 8008508:	6879      	ldr	r1, [r7, #4]
 800850a:	4618      	mov	r0, r3
 800850c:	f7ff fcdf 	bl	8007ece <st_dword>
			fs->wflag = 1;
 8008510:	68fb      	ldr	r3, [r7, #12]
 8008512:	2201      	movs	r2, #1
 8008514:	711a      	strb	r2, [r3, #4]
			break;
 8008516:	e006      	b.n	8008526 <put_fat+0x22a>
			if (res != FR_OK) break;
 8008518:	bf00      	nop
 800851a:	e004      	b.n	8008526 <put_fat+0x22a>
			if (res != FR_OK) break;
 800851c:	bf00      	nop
 800851e:	e002      	b.n	8008526 <put_fat+0x22a>
			if (res != FR_OK) break;
 8008520:	bf00      	nop
 8008522:	e000      	b.n	8008526 <put_fat+0x22a>
			if (res != FR_OK) break;
 8008524:	bf00      	nop
		}
	}
	return res;
 8008526:	7ffb      	ldrb	r3, [r7, #31]
}
 8008528:	4618      	mov	r0, r3
 800852a:	3724      	adds	r7, #36	@ 0x24
 800852c:	46bd      	mov	sp, r7
 800852e:	bd90      	pop	{r4, r7, pc}

08008530 <remove_chain>:
static FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	FFOBJID* obj,		/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0 if entire chain) */
)
{
 8008530:	b580      	push	{r7, lr}
 8008532:	b088      	sub	sp, #32
 8008534:	af00      	add	r7, sp, #0
 8008536:	60f8      	str	r0, [r7, #12]
 8008538:	60b9      	str	r1, [r7, #8]
 800853a:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 800853c:	2300      	movs	r3, #0
 800853e:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 8008540:	68fb      	ldr	r3, [r7, #12]
 8008542:	681b      	ldr	r3, [r3, #0]
 8008544:	61bb      	str	r3, [r7, #24]
#endif
#if FF_USE_TRIM
	LBA_t rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 8008546:	68bb      	ldr	r3, [r7, #8]
 8008548:	2b01      	cmp	r3, #1
 800854a:	d904      	bls.n	8008556 <remove_chain+0x26>
 800854c:	69bb      	ldr	r3, [r7, #24]
 800854e:	699b      	ldr	r3, [r3, #24]
 8008550:	68ba      	ldr	r2, [r7, #8]
 8008552:	429a      	cmp	r2, r3
 8008554:	d301      	bcc.n	800855a <remove_chain+0x2a>
 8008556:	2302      	movs	r3, #2
 8008558:	e04b      	b.n	80085f2 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst != 0 && (!FF_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 800855a:	687b      	ldr	r3, [r7, #4]
 800855c:	2b00      	cmp	r3, #0
 800855e:	d00c      	beq.n	800857a <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 8008560:	f04f 32ff 	mov.w	r2, #4294967295
 8008564:	6879      	ldr	r1, [r7, #4]
 8008566:	69b8      	ldr	r0, [r7, #24]
 8008568:	f7ff fec8 	bl	80082fc <put_fat>
 800856c:	4603      	mov	r3, r0
 800856e:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 8008570:	7ffb      	ldrb	r3, [r7, #31]
 8008572:	2b00      	cmp	r3, #0
 8008574:	d001      	beq.n	800857a <remove_chain+0x4a>
 8008576:	7ffb      	ldrb	r3, [r7, #31]
 8008578:	e03b      	b.n	80085f2 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 800857a:	68b9      	ldr	r1, [r7, #8]
 800857c:	68f8      	ldr	r0, [r7, #12]
 800857e:	f7ff fdea 	bl	8008156 <get_fat>
 8008582:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 8008584:	697b      	ldr	r3, [r7, #20]
 8008586:	2b00      	cmp	r3, #0
 8008588:	d031      	beq.n	80085ee <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 800858a:	697b      	ldr	r3, [r7, #20]
 800858c:	2b01      	cmp	r3, #1
 800858e:	d101      	bne.n	8008594 <remove_chain+0x64>
 8008590:	2302      	movs	r3, #2
 8008592:	e02e      	b.n	80085f2 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 8008594:	697b      	ldr	r3, [r7, #20]
 8008596:	f1b3 3fff 	cmp.w	r3, #4294967295
 800859a:	d101      	bne.n	80085a0 <remove_chain+0x70>
 800859c:	2301      	movs	r3, #1
 800859e:	e028      	b.n	80085f2 <remove_chain+0xc2>
		if (!FF_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 80085a0:	2200      	movs	r2, #0
 80085a2:	68b9      	ldr	r1, [r7, #8]
 80085a4:	69b8      	ldr	r0, [r7, #24]
 80085a6:	f7ff fea9 	bl	80082fc <put_fat>
 80085aa:	4603      	mov	r3, r0
 80085ac:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 80085ae:	7ffb      	ldrb	r3, [r7, #31]
 80085b0:	2b00      	cmp	r3, #0
 80085b2:	d001      	beq.n	80085b8 <remove_chain+0x88>
 80085b4:	7ffb      	ldrb	r3, [r7, #31]
 80085b6:	e01c      	b.n	80085f2 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 80085b8:	69bb      	ldr	r3, [r7, #24]
 80085ba:	695a      	ldr	r2, [r3, #20]
 80085bc:	69bb      	ldr	r3, [r7, #24]
 80085be:	699b      	ldr	r3, [r3, #24]
 80085c0:	3b02      	subs	r3, #2
 80085c2:	429a      	cmp	r2, r3
 80085c4:	d20b      	bcs.n	80085de <remove_chain+0xae>
			fs->free_clst++;
 80085c6:	69bb      	ldr	r3, [r7, #24]
 80085c8:	695b      	ldr	r3, [r3, #20]
 80085ca:	1c5a      	adds	r2, r3, #1
 80085cc:	69bb      	ldr	r3, [r7, #24]
 80085ce:	615a      	str	r2, [r3, #20]
			fs->fsi_flag |= 1;
 80085d0:	69bb      	ldr	r3, [r7, #24]
 80085d2:	795b      	ldrb	r3, [r3, #5]
 80085d4:	f043 0301 	orr.w	r3, r3, #1
 80085d8:	b2da      	uxtb	r2, r3
 80085da:	69bb      	ldr	r3, [r7, #24]
 80085dc:	715a      	strb	r2, [r3, #5]
			disk_ioctl(fs->pdrv, CTRL_TRIM, rt);		/* Inform storage device that the data in the block may be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 80085de:	697b      	ldr	r3, [r7, #20]
 80085e0:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 80085e2:	69bb      	ldr	r3, [r7, #24]
 80085e4:	699b      	ldr	r3, [r3, #24]
 80085e6:	68ba      	ldr	r2, [r7, #8]
 80085e8:	429a      	cmp	r2, r3
 80085ea:	d3c6      	bcc.n	800857a <remove_chain+0x4a>
 80085ec:	e000      	b.n	80085f0 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 80085ee:	bf00      	nop
				}
			}
		}
	}
#endif
	return FR_OK;
 80085f0:	2300      	movs	r3, #0
}
 80085f2:	4618      	mov	r0, r3
 80085f4:	3720      	adds	r7, #32
 80085f6:	46bd      	mov	sp, r7
 80085f8:	bd80      	pop	{r7, pc}

080085fa <create_chain>:

static DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	FFOBJID* obj,		/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 80085fa:	b580      	push	{r7, lr}
 80085fc:	b088      	sub	sp, #32
 80085fe:	af00      	add	r7, sp, #0
 8008600:	6078      	str	r0, [r7, #4]
 8008602:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 8008604:	687b      	ldr	r3, [r7, #4]
 8008606:	681b      	ldr	r3, [r3, #0]
 8008608:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 800860a:	683b      	ldr	r3, [r7, #0]
 800860c:	2b00      	cmp	r3, #0
 800860e:	d10d      	bne.n	800862c <create_chain+0x32>
		scl = fs->last_clst;				/* Suggested cluster to start to find */
 8008610:	693b      	ldr	r3, [r7, #16]
 8008612:	691b      	ldr	r3, [r3, #16]
 8008614:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 8008616:	69bb      	ldr	r3, [r7, #24]
 8008618:	2b00      	cmp	r3, #0
 800861a:	d004      	beq.n	8008626 <create_chain+0x2c>
 800861c:	693b      	ldr	r3, [r7, #16]
 800861e:	699b      	ldr	r3, [r3, #24]
 8008620:	69ba      	ldr	r2, [r7, #24]
 8008622:	429a      	cmp	r2, r3
 8008624:	d31b      	bcc.n	800865e <create_chain+0x64>
 8008626:	2301      	movs	r3, #1
 8008628:	61bb      	str	r3, [r7, #24]
 800862a:	e018      	b.n	800865e <create_chain+0x64>
	}
	else {				/* Stretch a chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 800862c:	6839      	ldr	r1, [r7, #0]
 800862e:	6878      	ldr	r0, [r7, #4]
 8008630:	f7ff fd91 	bl	8008156 <get_fat>
 8008634:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Test for insanity */
 8008636:	68fb      	ldr	r3, [r7, #12]
 8008638:	2b01      	cmp	r3, #1
 800863a:	d801      	bhi.n	8008640 <create_chain+0x46>
 800863c:	2301      	movs	r3, #1
 800863e:	e0a9      	b.n	8008794 <create_chain+0x19a>
		if (cs == 0xFFFFFFFF) return cs;	/* Test for disk error */
 8008640:	68fb      	ldr	r3, [r7, #12]
 8008642:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008646:	d101      	bne.n	800864c <create_chain+0x52>
 8008648:	68fb      	ldr	r3, [r7, #12]
 800864a:	e0a3      	b.n	8008794 <create_chain+0x19a>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 800864c:	693b      	ldr	r3, [r7, #16]
 800864e:	699b      	ldr	r3, [r3, #24]
 8008650:	68fa      	ldr	r2, [r7, #12]
 8008652:	429a      	cmp	r2, r3
 8008654:	d201      	bcs.n	800865a <create_chain+0x60>
 8008656:	68fb      	ldr	r3, [r7, #12]
 8008658:	e09c      	b.n	8008794 <create_chain+0x19a>
		scl = clst;							/* Cluster to start to find */
 800865a:	683b      	ldr	r3, [r7, #0]
 800865c:	61bb      	str	r3, [r7, #24]
	}
	if (fs->free_clst == 0) return 0;		/* No free cluster */
 800865e:	693b      	ldr	r3, [r7, #16]
 8008660:	695b      	ldr	r3, [r3, #20]
 8008662:	2b00      	cmp	r3, #0
 8008664:	d101      	bne.n	800866a <create_chain+0x70>
 8008666:	2300      	movs	r3, #0
 8008668:	e094      	b.n	8008794 <create_chain+0x19a>
			}
		}
	} else
#endif
	{	/* On the FAT/FAT32 volume */
		ncl = 0;
 800866a:	2300      	movs	r3, #0
 800866c:	61fb      	str	r3, [r7, #28]
		if (scl == clst) {						/* Stretching an existing chain? */
 800866e:	69ba      	ldr	r2, [r7, #24]
 8008670:	683b      	ldr	r3, [r7, #0]
 8008672:	429a      	cmp	r2, r3
 8008674:	d129      	bne.n	80086ca <create_chain+0xd0>
			ncl = scl + 1;						/* Test if next cluster is free */
 8008676:	69bb      	ldr	r3, [r7, #24]
 8008678:	3301      	adds	r3, #1
 800867a:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) ncl = 2;
 800867c:	693b      	ldr	r3, [r7, #16]
 800867e:	699b      	ldr	r3, [r3, #24]
 8008680:	69fa      	ldr	r2, [r7, #28]
 8008682:	429a      	cmp	r2, r3
 8008684:	d301      	bcc.n	800868a <create_chain+0x90>
 8008686:	2302      	movs	r3, #2
 8008688:	61fb      	str	r3, [r7, #28]
			cs = get_fat(obj, ncl);				/* Get next cluster status */
 800868a:	69f9      	ldr	r1, [r7, #28]
 800868c:	6878      	ldr	r0, [r7, #4]
 800868e:	f7ff fd62 	bl	8008156 <get_fat>
 8008692:	60f8      	str	r0, [r7, #12]
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* Test for error */
 8008694:	68fb      	ldr	r3, [r7, #12]
 8008696:	2b01      	cmp	r3, #1
 8008698:	d003      	beq.n	80086a2 <create_chain+0xa8>
 800869a:	68fb      	ldr	r3, [r7, #12]
 800869c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80086a0:	d101      	bne.n	80086a6 <create_chain+0xac>
 80086a2:	68fb      	ldr	r3, [r7, #12]
 80086a4:	e076      	b.n	8008794 <create_chain+0x19a>
			if (cs != 0) {						/* Not free? */
 80086a6:	68fb      	ldr	r3, [r7, #12]
 80086a8:	2b00      	cmp	r3, #0
 80086aa:	d00e      	beq.n	80086ca <create_chain+0xd0>
				cs = fs->last_clst;				/* Start at suggested cluster if it is valid */
 80086ac:	693b      	ldr	r3, [r7, #16]
 80086ae:	691b      	ldr	r3, [r3, #16]
 80086b0:	60fb      	str	r3, [r7, #12]
				if (cs >= 2 && cs < fs->n_fatent) scl = cs;
 80086b2:	68fb      	ldr	r3, [r7, #12]
 80086b4:	2b01      	cmp	r3, #1
 80086b6:	d906      	bls.n	80086c6 <create_chain+0xcc>
 80086b8:	693b      	ldr	r3, [r7, #16]
 80086ba:	699b      	ldr	r3, [r3, #24]
 80086bc:	68fa      	ldr	r2, [r7, #12]
 80086be:	429a      	cmp	r2, r3
 80086c0:	d201      	bcs.n	80086c6 <create_chain+0xcc>
 80086c2:	68fb      	ldr	r3, [r7, #12]
 80086c4:	61bb      	str	r3, [r7, #24]
				ncl = 0;
 80086c6:	2300      	movs	r3, #0
 80086c8:	61fb      	str	r3, [r7, #28]
			}
		}
		if (ncl == 0) {	/* The new cluster cannot be contiguous and find another fragment */
 80086ca:	69fb      	ldr	r3, [r7, #28]
 80086cc:	2b00      	cmp	r3, #0
 80086ce:	d129      	bne.n	8008724 <create_chain+0x12a>
			ncl = scl;	/* Start cluster */
 80086d0:	69bb      	ldr	r3, [r7, #24]
 80086d2:	61fb      	str	r3, [r7, #28]
			for (;;) {
				ncl++;							/* Next cluster */
 80086d4:	69fb      	ldr	r3, [r7, #28]
 80086d6:	3301      	adds	r3, #1
 80086d8:	61fb      	str	r3, [r7, #28]
				if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 80086da:	693b      	ldr	r3, [r7, #16]
 80086dc:	699b      	ldr	r3, [r3, #24]
 80086de:	69fa      	ldr	r2, [r7, #28]
 80086e0:	429a      	cmp	r2, r3
 80086e2:	d307      	bcc.n	80086f4 <create_chain+0xfa>
					ncl = 2;
 80086e4:	2302      	movs	r3, #2
 80086e6:	61fb      	str	r3, [r7, #28]
					if (ncl > scl) return 0;	/* No free cluster found? */
 80086e8:	69fa      	ldr	r2, [r7, #28]
 80086ea:	69bb      	ldr	r3, [r7, #24]
 80086ec:	429a      	cmp	r2, r3
 80086ee:	d901      	bls.n	80086f4 <create_chain+0xfa>
 80086f0:	2300      	movs	r3, #0
 80086f2:	e04f      	b.n	8008794 <create_chain+0x19a>
				}
				cs = get_fat(obj, ncl);			/* Get the cluster status */
 80086f4:	69f9      	ldr	r1, [r7, #28]
 80086f6:	6878      	ldr	r0, [r7, #4]
 80086f8:	f7ff fd2d 	bl	8008156 <get_fat>
 80086fc:	60f8      	str	r0, [r7, #12]
				if (cs == 0) break;				/* Found a free cluster? */
 80086fe:	68fb      	ldr	r3, [r7, #12]
 8008700:	2b00      	cmp	r3, #0
 8008702:	d00e      	beq.n	8008722 <create_chain+0x128>
				if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* Test for error */
 8008704:	68fb      	ldr	r3, [r7, #12]
 8008706:	2b01      	cmp	r3, #1
 8008708:	d003      	beq.n	8008712 <create_chain+0x118>
 800870a:	68fb      	ldr	r3, [r7, #12]
 800870c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008710:	d101      	bne.n	8008716 <create_chain+0x11c>
 8008712:	68fb      	ldr	r3, [r7, #12]
 8008714:	e03e      	b.n	8008794 <create_chain+0x19a>
				if (ncl == scl) return 0;		/* No free cluster found? */
 8008716:	69fa      	ldr	r2, [r7, #28]
 8008718:	69bb      	ldr	r3, [r7, #24]
 800871a:	429a      	cmp	r2, r3
 800871c:	d1da      	bne.n	80086d4 <create_chain+0xda>
 800871e:	2300      	movs	r3, #0
 8008720:	e038      	b.n	8008794 <create_chain+0x19a>
				if (cs == 0) break;				/* Found a free cluster? */
 8008722:	bf00      	nop
			}
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);		/* Mark the new cluster 'EOC' */
 8008724:	f04f 32ff 	mov.w	r2, #4294967295
 8008728:	69f9      	ldr	r1, [r7, #28]
 800872a:	6938      	ldr	r0, [r7, #16]
 800872c:	f7ff fde6 	bl	80082fc <put_fat>
 8008730:	4603      	mov	r3, r0
 8008732:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 8008734:	7dfb      	ldrb	r3, [r7, #23]
 8008736:	2b00      	cmp	r3, #0
 8008738:	d109      	bne.n	800874e <create_chain+0x154>
 800873a:	683b      	ldr	r3, [r7, #0]
 800873c:	2b00      	cmp	r3, #0
 800873e:	d006      	beq.n	800874e <create_chain+0x154>
			res = put_fat(fs, clst, ncl);		/* Link it from the previous one if needed */
 8008740:	69fa      	ldr	r2, [r7, #28]
 8008742:	6839      	ldr	r1, [r7, #0]
 8008744:	6938      	ldr	r0, [r7, #16]
 8008746:	f7ff fdd9 	bl	80082fc <put_fat>
 800874a:	4603      	mov	r3, r0
 800874c:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 800874e:	7dfb      	ldrb	r3, [r7, #23]
 8008750:	2b00      	cmp	r3, #0
 8008752:	d116      	bne.n	8008782 <create_chain+0x188>
		fs->last_clst = ncl;
 8008754:	693b      	ldr	r3, [r7, #16]
 8008756:	69fa      	ldr	r2, [r7, #28]
 8008758:	611a      	str	r2, [r3, #16]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 800875a:	693b      	ldr	r3, [r7, #16]
 800875c:	695a      	ldr	r2, [r3, #20]
 800875e:	693b      	ldr	r3, [r7, #16]
 8008760:	699b      	ldr	r3, [r3, #24]
 8008762:	3b02      	subs	r3, #2
 8008764:	429a      	cmp	r2, r3
 8008766:	d804      	bhi.n	8008772 <create_chain+0x178>
 8008768:	693b      	ldr	r3, [r7, #16]
 800876a:	695b      	ldr	r3, [r3, #20]
 800876c:	1e5a      	subs	r2, r3, #1
 800876e:	693b      	ldr	r3, [r7, #16]
 8008770:	615a      	str	r2, [r3, #20]
		fs->fsi_flag |= 1;
 8008772:	693b      	ldr	r3, [r7, #16]
 8008774:	795b      	ldrb	r3, [r3, #5]
 8008776:	f043 0301 	orr.w	r3, r3, #1
 800877a:	b2da      	uxtb	r2, r3
 800877c:	693b      	ldr	r3, [r7, #16]
 800877e:	715a      	strb	r2, [r3, #5]
 8008780:	e007      	b.n	8008792 <create_chain+0x198>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 8008782:	7dfb      	ldrb	r3, [r7, #23]
 8008784:	2b01      	cmp	r3, #1
 8008786:	d102      	bne.n	800878e <create_chain+0x194>
 8008788:	f04f 33ff 	mov.w	r3, #4294967295
 800878c:	e000      	b.n	8008790 <create_chain+0x196>
 800878e:	2301      	movs	r3, #1
 8008790:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 8008792:	69fb      	ldr	r3, [r7, #28]
}
 8008794:	4618      	mov	r0, r3
 8008796:	3720      	adds	r7, #32
 8008798:	46bd      	mov	sp, r7
 800879a:	bd80      	pop	{r7, pc}

0800879c <dir_clear>:
#if !FF_FS_READONLY
static FRESULT dir_clear (	/* Returns FR_OK or FR_DISK_ERR */
	FATFS *fs,		/* Filesystem object */
	DWORD clst		/* Directory table to clear */
)
{
 800879c:	b580      	push	{r7, lr}
 800879e:	b086      	sub	sp, #24
 80087a0:	af00      	add	r7, sp, #0
 80087a2:	6078      	str	r0, [r7, #4]
 80087a4:	6039      	str	r1, [r7, #0]
	LBA_t sect;
	UINT n, szb;
	BYTE *ibuf;


	if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 80087a6:	6878      	ldr	r0, [r7, #4]
 80087a8:	f7ff fbdf 	bl	8007f6a <sync_window>
 80087ac:	4603      	mov	r3, r0
 80087ae:	2b00      	cmp	r3, #0
 80087b0:	d001      	beq.n	80087b6 <dir_clear+0x1a>
 80087b2:	2301      	movs	r3, #1
 80087b4:	e036      	b.n	8008824 <dir_clear+0x88>
	sect = clst2sect(fs, clst);		/* Top of the cluster */
 80087b6:	6839      	ldr	r1, [r7, #0]
 80087b8:	6878      	ldr	r0, [r7, #4]
 80087ba:	f7ff fcad 	bl	8008118 <clst2sect>
 80087be:	6138      	str	r0, [r7, #16]
	fs->winsect = sect;				/* Set window to top of the cluster */
 80087c0:	687b      	ldr	r3, [r7, #4]
 80087c2:	693a      	ldr	r2, [r7, #16]
 80087c4:	631a      	str	r2, [r3, #48]	@ 0x30
	memset(fs->win, 0, sizeof fs->win);	/* Clear window buffer */
 80087c6:	687b      	ldr	r3, [r7, #4]
 80087c8:	3334      	adds	r3, #52	@ 0x34
 80087ca:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80087ce:	2100      	movs	r1, #0
 80087d0:	4618      	mov	r0, r3
 80087d2:	f00d fbd9 	bl	8015f88 <memset>
		for (n = 0; n < fs->csize && disk_write(fs->pdrv, ibuf, sect + n, szb) == RES_OK; n += szb) ;	/* Fill the cluster with 0 */
		ff_memfree(ibuf);
	} else
#endif
	{
		ibuf = fs->win; szb = 1;	/* Use window buffer (many single-sector writes may take a time) */
 80087d6:	687b      	ldr	r3, [r7, #4]
 80087d8:	3334      	adds	r3, #52	@ 0x34
 80087da:	60fb      	str	r3, [r7, #12]
 80087dc:	2301      	movs	r3, #1
 80087de:	60bb      	str	r3, [r7, #8]
		for (n = 0; n < fs->csize && disk_write(fs->pdrv, ibuf, sect + n, szb) == RES_OK; n += szb) ;	/* Fill the cluster with 0 */
 80087e0:	2300      	movs	r3, #0
 80087e2:	617b      	str	r3, [r7, #20]
 80087e4:	e003      	b.n	80087ee <dir_clear+0x52>
 80087e6:	697a      	ldr	r2, [r7, #20]
 80087e8:	68bb      	ldr	r3, [r7, #8]
 80087ea:	4413      	add	r3, r2
 80087ec:	617b      	str	r3, [r7, #20]
 80087ee:	687b      	ldr	r3, [r7, #4]
 80087f0:	895b      	ldrh	r3, [r3, #10]
 80087f2:	461a      	mov	r2, r3
 80087f4:	697b      	ldr	r3, [r7, #20]
 80087f6:	4293      	cmp	r3, r2
 80087f8:	d20b      	bcs.n	8008812 <dir_clear+0x76>
 80087fa:	687b      	ldr	r3, [r7, #4]
 80087fc:	7858      	ldrb	r0, [r3, #1]
 80087fe:	693a      	ldr	r2, [r7, #16]
 8008800:	697b      	ldr	r3, [r7, #20]
 8008802:	441a      	add	r2, r3
 8008804:	68bb      	ldr	r3, [r7, #8]
 8008806:	68f9      	ldr	r1, [r7, #12]
 8008808:	f7ff fa54 	bl	8007cb4 <disk_write>
 800880c:	4603      	mov	r3, r0
 800880e:	2b00      	cmp	r3, #0
 8008810:	d0e9      	beq.n	80087e6 <dir_clear+0x4a>
	}
	return (n == fs->csize) ? FR_OK : FR_DISK_ERR;
 8008812:	687b      	ldr	r3, [r7, #4]
 8008814:	895b      	ldrh	r3, [r3, #10]
 8008816:	461a      	mov	r2, r3
 8008818:	697b      	ldr	r3, [r7, #20]
 800881a:	4293      	cmp	r3, r2
 800881c:	bf14      	ite	ne
 800881e:	2301      	movne	r3, #1
 8008820:	2300      	moveq	r3, #0
 8008822:	b2db      	uxtb	r3, r3
}
 8008824:	4618      	mov	r0, r3
 8008826:	3718      	adds	r7, #24
 8008828:	46bd      	mov	sp, r7
 800882a:	bd80      	pop	{r7, pc}

0800882c <dir_sdi>:

static FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 800882c:	b580      	push	{r7, lr}
 800882e:	b086      	sub	sp, #24
 8008830:	af00      	add	r7, sp, #0
 8008832:	6078      	str	r0, [r7, #4]
 8008834:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 8008836:	687b      	ldr	r3, [r7, #4]
 8008838:	681b      	ldr	r3, [r3, #0]
 800883a:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((FF_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 800883c:	683b      	ldr	r3, [r7, #0]
 800883e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8008842:	d204      	bcs.n	800884e <dir_sdi+0x22>
 8008844:	683b      	ldr	r3, [r7, #0]
 8008846:	f003 031f 	and.w	r3, r3, #31
 800884a:	2b00      	cmp	r3, #0
 800884c:	d001      	beq.n	8008852 <dir_sdi+0x26>
		return FR_INT_ERR;
 800884e:	2302      	movs	r3, #2
 8008850:	e071      	b.n	8008936 <dir_sdi+0x10a>
	}
	dp->dptr = ofs;				/* Set current offset */
 8008852:	687b      	ldr	r3, [r7, #4]
 8008854:	683a      	ldr	r2, [r7, #0]
 8008856:	611a      	str	r2, [r3, #16]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 8008858:	687b      	ldr	r3, [r7, #4]
 800885a:	689b      	ldr	r3, [r3, #8]
 800885c:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 800885e:	697b      	ldr	r3, [r7, #20]
 8008860:	2b00      	cmp	r3, #0
 8008862:	d106      	bne.n	8008872 <dir_sdi+0x46>
 8008864:	693b      	ldr	r3, [r7, #16]
 8008866:	781b      	ldrb	r3, [r3, #0]
 8008868:	2b02      	cmp	r3, #2
 800886a:	d902      	bls.n	8008872 <dir_sdi+0x46>
		clst = (DWORD)fs->dirbase;
 800886c:	693b      	ldr	r3, [r7, #16]
 800886e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008870:	617b      	str	r3, [r7, #20]
		if (FF_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory on the FAT volume) */
 8008872:	697b      	ldr	r3, [r7, #20]
 8008874:	2b00      	cmp	r3, #0
 8008876:	d10c      	bne.n	8008892 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir) return FR_INT_ERR;	/* Is index out of range? */
 8008878:	683b      	ldr	r3, [r7, #0]
 800887a:	095b      	lsrs	r3, r3, #5
 800887c:	693a      	ldr	r2, [r7, #16]
 800887e:	8912      	ldrh	r2, [r2, #8]
 8008880:	4293      	cmp	r3, r2
 8008882:	d301      	bcc.n	8008888 <dir_sdi+0x5c>
 8008884:	2302      	movs	r3, #2
 8008886:	e056      	b.n	8008936 <dir_sdi+0x10a>
		dp->sect = fs->dirbase;
 8008888:	693b      	ldr	r3, [r7, #16]
 800888a:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800888c:	687b      	ldr	r3, [r7, #4]
 800888e:	619a      	str	r2, [r3, #24]
 8008890:	e02d      	b.n	80088ee <dir_sdi+0xc2>

	} else {			/* Dynamic table (sub-directory or root-directory on the FAT32/exFAT volume) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 8008892:	693b      	ldr	r3, [r7, #16]
 8008894:	895b      	ldrh	r3, [r3, #10]
 8008896:	461a      	mov	r2, r3
 8008898:	693b      	ldr	r3, [r7, #16]
 800889a:	899b      	ldrh	r3, [r3, #12]
 800889c:	fb02 f303 	mul.w	r3, r2, r3
 80088a0:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 80088a2:	e019      	b.n	80088d8 <dir_sdi+0xac>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 80088a4:	687b      	ldr	r3, [r7, #4]
 80088a6:	6979      	ldr	r1, [r7, #20]
 80088a8:	4618      	mov	r0, r3
 80088aa:	f7ff fc54 	bl	8008156 <get_fat>
 80088ae:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 80088b0:	697b      	ldr	r3, [r7, #20]
 80088b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80088b6:	d101      	bne.n	80088bc <dir_sdi+0x90>
 80088b8:	2301      	movs	r3, #1
 80088ba:	e03c      	b.n	8008936 <dir_sdi+0x10a>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 80088bc:	697b      	ldr	r3, [r7, #20]
 80088be:	2b01      	cmp	r3, #1
 80088c0:	d904      	bls.n	80088cc <dir_sdi+0xa0>
 80088c2:	693b      	ldr	r3, [r7, #16]
 80088c4:	699b      	ldr	r3, [r3, #24]
 80088c6:	697a      	ldr	r2, [r7, #20]
 80088c8:	429a      	cmp	r2, r3
 80088ca:	d301      	bcc.n	80088d0 <dir_sdi+0xa4>
 80088cc:	2302      	movs	r3, #2
 80088ce:	e032      	b.n	8008936 <dir_sdi+0x10a>
			ofs -= csz;
 80088d0:	683a      	ldr	r2, [r7, #0]
 80088d2:	68fb      	ldr	r3, [r7, #12]
 80088d4:	1ad3      	subs	r3, r2, r3
 80088d6:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 80088d8:	683a      	ldr	r2, [r7, #0]
 80088da:	68fb      	ldr	r3, [r7, #12]
 80088dc:	429a      	cmp	r2, r3
 80088de:	d2e1      	bcs.n	80088a4 <dir_sdi+0x78>
		}
		dp->sect = clst2sect(fs, clst);
 80088e0:	6979      	ldr	r1, [r7, #20]
 80088e2:	6938      	ldr	r0, [r7, #16]
 80088e4:	f7ff fc18 	bl	8008118 <clst2sect>
 80088e8:	4602      	mov	r2, r0
 80088ea:	687b      	ldr	r3, [r7, #4]
 80088ec:	619a      	str	r2, [r3, #24]
	}
	dp->clust = clst;					/* Current cluster# */
 80088ee:	687b      	ldr	r3, [r7, #4]
 80088f0:	697a      	ldr	r2, [r7, #20]
 80088f2:	615a      	str	r2, [r3, #20]
	if (dp->sect == 0) return FR_INT_ERR;
 80088f4:	687b      	ldr	r3, [r7, #4]
 80088f6:	699b      	ldr	r3, [r3, #24]
 80088f8:	2b00      	cmp	r3, #0
 80088fa:	d101      	bne.n	8008900 <dir_sdi+0xd4>
 80088fc:	2302      	movs	r3, #2
 80088fe:	e01a      	b.n	8008936 <dir_sdi+0x10a>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 8008900:	687b      	ldr	r3, [r7, #4]
 8008902:	699a      	ldr	r2, [r3, #24]
 8008904:	693b      	ldr	r3, [r7, #16]
 8008906:	899b      	ldrh	r3, [r3, #12]
 8008908:	4619      	mov	r1, r3
 800890a:	683b      	ldr	r3, [r7, #0]
 800890c:	fbb3 f3f1 	udiv	r3, r3, r1
 8008910:	441a      	add	r2, r3
 8008912:	687b      	ldr	r3, [r7, #4]
 8008914:	619a      	str	r2, [r3, #24]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 8008916:	693b      	ldr	r3, [r7, #16]
 8008918:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 800891c:	693b      	ldr	r3, [r7, #16]
 800891e:	899b      	ldrh	r3, [r3, #12]
 8008920:	461a      	mov	r2, r3
 8008922:	683b      	ldr	r3, [r7, #0]
 8008924:	fbb3 f0f2 	udiv	r0, r3, r2
 8008928:	fb00 f202 	mul.w	r2, r0, r2
 800892c:	1a9b      	subs	r3, r3, r2
 800892e:	18ca      	adds	r2, r1, r3
 8008930:	687b      	ldr	r3, [r7, #4]
 8008932:	61da      	str	r2, [r3, #28]

	return FR_OK;
 8008934:	2300      	movs	r3, #0
}
 8008936:	4618      	mov	r0, r3
 8008938:	3718      	adds	r7, #24
 800893a:	46bd      	mov	sp, r7
 800893c:	bd80      	pop	{r7, pc}

0800893e <dir_next>:

static FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,				/* Pointer to the directory object */
	int stretch				/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 800893e:	b580      	push	{r7, lr}
 8008940:	b086      	sub	sp, #24
 8008942:	af00      	add	r7, sp, #0
 8008944:	6078      	str	r0, [r7, #4]
 8008946:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 8008948:	687b      	ldr	r3, [r7, #4]
 800894a:	681b      	ldr	r3, [r3, #0]
 800894c:	613b      	str	r3, [r7, #16]


	ofs = dp->dptr + SZDIRE;	/* Next entry */
 800894e:	687b      	ldr	r3, [r7, #4]
 8008950:	691b      	ldr	r3, [r3, #16]
 8008952:	3320      	adds	r3, #32
 8008954:	60fb      	str	r3, [r7, #12]
	if (ofs >= (DWORD)((FF_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) dp->sect = 0;	/* Disable it if the offset reached the max value */
 8008956:	68fb      	ldr	r3, [r7, #12]
 8008958:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800895c:	d302      	bcc.n	8008964 <dir_next+0x26>
 800895e:	687b      	ldr	r3, [r7, #4]
 8008960:	2200      	movs	r2, #0
 8008962:	619a      	str	r2, [r3, #24]
	if (dp->sect == 0) return FR_NO_FILE;	/* Report EOT if it has been disabled */
 8008964:	687b      	ldr	r3, [r7, #4]
 8008966:	699b      	ldr	r3, [r3, #24]
 8008968:	2b00      	cmp	r3, #0
 800896a:	d101      	bne.n	8008970 <dir_next+0x32>
 800896c:	2304      	movs	r3, #4
 800896e:	e088      	b.n	8008a82 <dir_next+0x144>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 8008970:	693b      	ldr	r3, [r7, #16]
 8008972:	899b      	ldrh	r3, [r3, #12]
 8008974:	461a      	mov	r2, r3
 8008976:	68fb      	ldr	r3, [r7, #12]
 8008978:	fbb3 f1f2 	udiv	r1, r3, r2
 800897c:	fb01 f202 	mul.w	r2, r1, r2
 8008980:	1a9b      	subs	r3, r3, r2
 8008982:	2b00      	cmp	r3, #0
 8008984:	d16a      	bne.n	8008a5c <dir_next+0x11e>
		dp->sect++;				/* Next sector */
 8008986:	687b      	ldr	r3, [r7, #4]
 8008988:	699b      	ldr	r3, [r3, #24]
 800898a:	1c5a      	adds	r2, r3, #1
 800898c:	687b      	ldr	r3, [r7, #4]
 800898e:	619a      	str	r2, [r3, #24]

		if (dp->clust == 0) {	/* Static table */
 8008990:	687b      	ldr	r3, [r7, #4]
 8008992:	695b      	ldr	r3, [r3, #20]
 8008994:	2b00      	cmp	r3, #0
 8008996:	d10a      	bne.n	80089ae <dir_next+0x70>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 8008998:	68fb      	ldr	r3, [r7, #12]
 800899a:	095b      	lsrs	r3, r3, #5
 800899c:	693a      	ldr	r2, [r7, #16]
 800899e:	8912      	ldrh	r2, [r2, #8]
 80089a0:	4293      	cmp	r3, r2
 80089a2:	d35b      	bcc.n	8008a5c <dir_next+0x11e>
				dp->sect = 0; return FR_NO_FILE;
 80089a4:	687b      	ldr	r3, [r7, #4]
 80089a6:	2200      	movs	r2, #0
 80089a8:	619a      	str	r2, [r3, #24]
 80089aa:	2304      	movs	r3, #4
 80089ac:	e069      	b.n	8008a82 <dir_next+0x144>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {	/* Cluster changed? */
 80089ae:	693b      	ldr	r3, [r7, #16]
 80089b0:	899b      	ldrh	r3, [r3, #12]
 80089b2:	461a      	mov	r2, r3
 80089b4:	68fb      	ldr	r3, [r7, #12]
 80089b6:	fbb3 f3f2 	udiv	r3, r3, r2
 80089ba:	693a      	ldr	r2, [r7, #16]
 80089bc:	8952      	ldrh	r2, [r2, #10]
 80089be:	3a01      	subs	r2, #1
 80089c0:	4013      	ands	r3, r2
 80089c2:	2b00      	cmp	r3, #0
 80089c4:	d14a      	bne.n	8008a5c <dir_next+0x11e>
				clst = get_fat(&dp->obj, dp->clust);		/* Get next cluster */
 80089c6:	687a      	ldr	r2, [r7, #4]
 80089c8:	687b      	ldr	r3, [r7, #4]
 80089ca:	695b      	ldr	r3, [r3, #20]
 80089cc:	4619      	mov	r1, r3
 80089ce:	4610      	mov	r0, r2
 80089d0:	f7ff fbc1 	bl	8008156 <get_fat>
 80089d4:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;			/* Internal error */
 80089d6:	697b      	ldr	r3, [r7, #20]
 80089d8:	2b01      	cmp	r3, #1
 80089da:	d801      	bhi.n	80089e0 <dir_next+0xa2>
 80089dc:	2302      	movs	r3, #2
 80089de:	e050      	b.n	8008a82 <dir_next+0x144>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 80089e0:	697b      	ldr	r3, [r7, #20]
 80089e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80089e6:	d101      	bne.n	80089ec <dir_next+0xae>
 80089e8:	2301      	movs	r3, #1
 80089ea:	e04a      	b.n	8008a82 <dir_next+0x144>
				if (clst >= fs->n_fatent) {					/* It reached end of dynamic table */
 80089ec:	693b      	ldr	r3, [r7, #16]
 80089ee:	699b      	ldr	r3, [r3, #24]
 80089f0:	697a      	ldr	r2, [r7, #20]
 80089f2:	429a      	cmp	r2, r3
 80089f4:	d328      	bcc.n	8008a48 <dir_next+0x10a>
#if !FF_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 80089f6:	683b      	ldr	r3, [r7, #0]
 80089f8:	2b00      	cmp	r3, #0
 80089fa:	d104      	bne.n	8008a06 <dir_next+0xc8>
						dp->sect = 0; return FR_NO_FILE;
 80089fc:	687b      	ldr	r3, [r7, #4]
 80089fe:	2200      	movs	r2, #0
 8008a00:	619a      	str	r2, [r3, #24]
 8008a02:	2304      	movs	r3, #4
 8008a04:	e03d      	b.n	8008a82 <dir_next+0x144>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 8008a06:	687a      	ldr	r2, [r7, #4]
 8008a08:	687b      	ldr	r3, [r7, #4]
 8008a0a:	695b      	ldr	r3, [r3, #20]
 8008a0c:	4619      	mov	r1, r3
 8008a0e:	4610      	mov	r0, r2
 8008a10:	f7ff fdf3 	bl	80085fa <create_chain>
 8008a14:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8008a16:	697b      	ldr	r3, [r7, #20]
 8008a18:	2b00      	cmp	r3, #0
 8008a1a:	d101      	bne.n	8008a20 <dir_next+0xe2>
 8008a1c:	2307      	movs	r3, #7
 8008a1e:	e030      	b.n	8008a82 <dir_next+0x144>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 8008a20:	697b      	ldr	r3, [r7, #20]
 8008a22:	2b01      	cmp	r3, #1
 8008a24:	d101      	bne.n	8008a2a <dir_next+0xec>
 8008a26:	2302      	movs	r3, #2
 8008a28:	e02b      	b.n	8008a82 <dir_next+0x144>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8008a2a:	697b      	ldr	r3, [r7, #20]
 8008a2c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008a30:	d101      	bne.n	8008a36 <dir_next+0xf8>
 8008a32:	2301      	movs	r3, #1
 8008a34:	e025      	b.n	8008a82 <dir_next+0x144>
					if (dir_clear(fs, clst) != FR_OK) return FR_DISK_ERR;	/* Clean up the stretched table */
 8008a36:	6979      	ldr	r1, [r7, #20]
 8008a38:	6938      	ldr	r0, [r7, #16]
 8008a3a:	f7ff feaf 	bl	800879c <dir_clear>
 8008a3e:	4603      	mov	r3, r0
 8008a40:	2b00      	cmp	r3, #0
 8008a42:	d001      	beq.n	8008a48 <dir_next+0x10a>
 8008a44:	2301      	movs	r3, #1
 8008a46:	e01c      	b.n	8008a82 <dir_next+0x144>
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 8008a48:	687b      	ldr	r3, [r7, #4]
 8008a4a:	697a      	ldr	r2, [r7, #20]
 8008a4c:	615a      	str	r2, [r3, #20]
				dp->sect = clst2sect(fs, clst);
 8008a4e:	6979      	ldr	r1, [r7, #20]
 8008a50:	6938      	ldr	r0, [r7, #16]
 8008a52:	f7ff fb61 	bl	8008118 <clst2sect>
 8008a56:	4602      	mov	r2, r0
 8008a58:	687b      	ldr	r3, [r7, #4]
 8008a5a:	619a      	str	r2, [r3, #24]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 8008a5c:	687b      	ldr	r3, [r7, #4]
 8008a5e:	68fa      	ldr	r2, [r7, #12]
 8008a60:	611a      	str	r2, [r3, #16]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8008a62:	693b      	ldr	r3, [r7, #16]
 8008a64:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 8008a68:	693b      	ldr	r3, [r7, #16]
 8008a6a:	899b      	ldrh	r3, [r3, #12]
 8008a6c:	461a      	mov	r2, r3
 8008a6e:	68fb      	ldr	r3, [r7, #12]
 8008a70:	fbb3 f0f2 	udiv	r0, r3, r2
 8008a74:	fb00 f202 	mul.w	r2, r0, r2
 8008a78:	1a9b      	subs	r3, r3, r2
 8008a7a:	18ca      	adds	r2, r1, r3
 8008a7c:	687b      	ldr	r3, [r7, #4]
 8008a7e:	61da      	str	r2, [r3, #28]

	return FR_OK;
 8008a80:	2300      	movs	r3, #0
}
 8008a82:	4618      	mov	r0, r3
 8008a84:	3718      	adds	r7, #24
 8008a86:	46bd      	mov	sp, r7
 8008a88:	bd80      	pop	{r7, pc}

08008a8a <dir_alloc>:

static FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,				/* Pointer to the directory object */
	UINT n_ent				/* Number of contiguous entries to allocate */
)
{
 8008a8a:	b580      	push	{r7, lr}
 8008a8c:	b086      	sub	sp, #24
 8008a8e:	af00      	add	r7, sp, #0
 8008a90:	6078      	str	r0, [r7, #4]
 8008a92:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 8008a94:	687b      	ldr	r3, [r7, #4]
 8008a96:	681b      	ldr	r3, [r3, #0]
 8008a98:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 8008a9a:	2100      	movs	r1, #0
 8008a9c:	6878      	ldr	r0, [r7, #4]
 8008a9e:	f7ff fec5 	bl	800882c <dir_sdi>
 8008aa2:	4603      	mov	r3, r0
 8008aa4:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8008aa6:	7dfb      	ldrb	r3, [r7, #23]
 8008aa8:	2b00      	cmp	r3, #0
 8008aaa:	d12b      	bne.n	8008b04 <dir_alloc+0x7a>
		n = 0;
 8008aac:	2300      	movs	r3, #0
 8008aae:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 8008ab0:	687b      	ldr	r3, [r7, #4]
 8008ab2:	699b      	ldr	r3, [r3, #24]
 8008ab4:	4619      	mov	r1, r3
 8008ab6:	68f8      	ldr	r0, [r7, #12]
 8008ab8:	f7ff fa93 	bl	8007fe2 <move_window>
 8008abc:	4603      	mov	r3, r0
 8008abe:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8008ac0:	7dfb      	ldrb	r3, [r7, #23]
 8008ac2:	2b00      	cmp	r3, #0
 8008ac4:	d11d      	bne.n	8008b02 <dir_alloc+0x78>
#if FF_FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {	/* Is the entry free? */
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {	/* Is the entry free? */
 8008ac6:	687b      	ldr	r3, [r7, #4]
 8008ac8:	69db      	ldr	r3, [r3, #28]
 8008aca:	781b      	ldrb	r3, [r3, #0]
 8008acc:	2be5      	cmp	r3, #229	@ 0xe5
 8008ace:	d004      	beq.n	8008ada <dir_alloc+0x50>
 8008ad0:	687b      	ldr	r3, [r7, #4]
 8008ad2:	69db      	ldr	r3, [r3, #28]
 8008ad4:	781b      	ldrb	r3, [r3, #0]
 8008ad6:	2b00      	cmp	r3, #0
 8008ad8:	d107      	bne.n	8008aea <dir_alloc+0x60>
#endif
				if (++n == n_ent) break;	/* Is a block of contiguous free entries found? */
 8008ada:	693b      	ldr	r3, [r7, #16]
 8008adc:	3301      	adds	r3, #1
 8008ade:	613b      	str	r3, [r7, #16]
 8008ae0:	693a      	ldr	r2, [r7, #16]
 8008ae2:	683b      	ldr	r3, [r7, #0]
 8008ae4:	429a      	cmp	r2, r3
 8008ae6:	d102      	bne.n	8008aee <dir_alloc+0x64>
 8008ae8:	e00c      	b.n	8008b04 <dir_alloc+0x7a>
			} else {
				n = 0;				/* Not a free entry, restart to search */
 8008aea:	2300      	movs	r3, #0
 8008aec:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);	/* Next entry with table stretch enabled */
 8008aee:	2101      	movs	r1, #1
 8008af0:	6878      	ldr	r0, [r7, #4]
 8008af2:	f7ff ff24 	bl	800893e <dir_next>
 8008af6:	4603      	mov	r3, r0
 8008af8:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);
 8008afa:	7dfb      	ldrb	r3, [r7, #23]
 8008afc:	2b00      	cmp	r3, #0
 8008afe:	d0d7      	beq.n	8008ab0 <dir_alloc+0x26>
 8008b00:	e000      	b.n	8008b04 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 8008b02:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 8008b04:	7dfb      	ldrb	r3, [r7, #23]
 8008b06:	2b04      	cmp	r3, #4
 8008b08:	d101      	bne.n	8008b0e <dir_alloc+0x84>
 8008b0a:	2307      	movs	r3, #7
 8008b0c:	75fb      	strb	r3, [r7, #23]
	return res;
 8008b0e:	7dfb      	ldrb	r3, [r7, #23]
}
 8008b10:	4618      	mov	r0, r3
 8008b12:	3718      	adds	r7, #24
 8008b14:	46bd      	mov	sp, r7
 8008b16:	bd80      	pop	{r7, pc}

08008b18 <ld_clust>:

static DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,			/* Pointer to the fs object */
	const BYTE* dir		/* Pointer to the key entry */
)
{
 8008b18:	b580      	push	{r7, lr}
 8008b1a:	b084      	sub	sp, #16
 8008b1c:	af00      	add	r7, sp, #0
 8008b1e:	6078      	str	r0, [r7, #4]
 8008b20:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 8008b22:	683b      	ldr	r3, [r7, #0]
 8008b24:	331a      	adds	r3, #26
 8008b26:	4618      	mov	r0, r3
 8008b28:	f7ff f97a 	bl	8007e20 <ld_word>
 8008b2c:	4603      	mov	r3, r0
 8008b2e:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 8008b30:	687b      	ldr	r3, [r7, #4]
 8008b32:	781b      	ldrb	r3, [r3, #0]
 8008b34:	2b03      	cmp	r3, #3
 8008b36:	d109      	bne.n	8008b4c <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 8008b38:	683b      	ldr	r3, [r7, #0]
 8008b3a:	3314      	adds	r3, #20
 8008b3c:	4618      	mov	r0, r3
 8008b3e:	f7ff f96f 	bl	8007e20 <ld_word>
 8008b42:	4603      	mov	r3, r0
 8008b44:	041b      	lsls	r3, r3, #16
 8008b46:	68fa      	ldr	r2, [r7, #12]
 8008b48:	4313      	orrs	r3, r2
 8008b4a:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 8008b4c:	68fb      	ldr	r3, [r7, #12]
}
 8008b4e:	4618      	mov	r0, r3
 8008b50:	3710      	adds	r7, #16
 8008b52:	46bd      	mov	sp, r7
 8008b54:	bd80      	pop	{r7, pc}

08008b56 <st_clust>:
static void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 8008b56:	b580      	push	{r7, lr}
 8008b58:	b084      	sub	sp, #16
 8008b5a:	af00      	add	r7, sp, #0
 8008b5c:	60f8      	str	r0, [r7, #12]
 8008b5e:	60b9      	str	r1, [r7, #8]
 8008b60:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 8008b62:	68bb      	ldr	r3, [r7, #8]
 8008b64:	331a      	adds	r3, #26
 8008b66:	687a      	ldr	r2, [r7, #4]
 8008b68:	b292      	uxth	r2, r2
 8008b6a:	4611      	mov	r1, r2
 8008b6c:	4618      	mov	r0, r3
 8008b6e:	f7ff f993 	bl	8007e98 <st_word>
	if (fs->fs_type == FS_FAT32) {
 8008b72:	68fb      	ldr	r3, [r7, #12]
 8008b74:	781b      	ldrb	r3, [r3, #0]
 8008b76:	2b03      	cmp	r3, #3
 8008b78:	d109      	bne.n	8008b8e <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 8008b7a:	68bb      	ldr	r3, [r7, #8]
 8008b7c:	f103 0214 	add.w	r2, r3, #20
 8008b80:	687b      	ldr	r3, [r7, #4]
 8008b82:	0c1b      	lsrs	r3, r3, #16
 8008b84:	b29b      	uxth	r3, r3
 8008b86:	4619      	mov	r1, r3
 8008b88:	4610      	mov	r0, r2
 8008b8a:	f7ff f985 	bl	8007e98 <st_word>
	}
}
 8008b8e:	bf00      	nop
 8008b90:	3710      	adds	r7, #16
 8008b92:	46bd      	mov	sp, r7
 8008b94:	bd80      	pop	{r7, pc}

08008b96 <dir_find>:
/*-----------------------------------------------------------------------*/

static FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp					/* Pointer to the directory object with the file name */
)
{
 8008b96:	b580      	push	{r7, lr}
 8008b98:	b086      	sub	sp, #24
 8008b9a:	af00      	add	r7, sp, #0
 8008b9c:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8008b9e:	687b      	ldr	r3, [r7, #4]
 8008ba0:	681b      	ldr	r3, [r3, #0]
 8008ba2:	613b      	str	r3, [r7, #16]
	BYTE c;
#if FF_USE_LFN
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 8008ba4:	2100      	movs	r1, #0
 8008ba6:	6878      	ldr	r0, [r7, #4]
 8008ba8:	f7ff fe40 	bl	800882c <dir_sdi>
 8008bac:	4603      	mov	r3, r0
 8008bae:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 8008bb0:	7dfb      	ldrb	r3, [r7, #23]
 8008bb2:	2b00      	cmp	r3, #0
 8008bb4:	d001      	beq.n	8008bba <dir_find+0x24>
 8008bb6:	7dfb      	ldrb	r3, [r7, #23]
 8008bb8:	e03e      	b.n	8008c38 <dir_find+0xa2>
	/* On the FAT/FAT32 volume */
#if FF_USE_LFN
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 8008bba:	687b      	ldr	r3, [r7, #4]
 8008bbc:	699b      	ldr	r3, [r3, #24]
 8008bbe:	4619      	mov	r1, r3
 8008bc0:	6938      	ldr	r0, [r7, #16]
 8008bc2:	f7ff fa0e 	bl	8007fe2 <move_window>
 8008bc6:	4603      	mov	r3, r0
 8008bc8:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8008bca:	7dfb      	ldrb	r3, [r7, #23]
 8008bcc:	2b00      	cmp	r3, #0
 8008bce:	d12f      	bne.n	8008c30 <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 8008bd0:	687b      	ldr	r3, [r7, #4]
 8008bd2:	69db      	ldr	r3, [r3, #28]
 8008bd4:	781b      	ldrb	r3, [r3, #0]
 8008bd6:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8008bd8:	7bfb      	ldrb	r3, [r7, #15]
 8008bda:	2b00      	cmp	r3, #0
 8008bdc:	d102      	bne.n	8008be4 <dir_find+0x4e>
 8008bde:	2304      	movs	r3, #4
 8008be0:	75fb      	strb	r3, [r7, #23]
 8008be2:	e028      	b.n	8008c36 <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !memcmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 8008be4:	687b      	ldr	r3, [r7, #4]
 8008be6:	69db      	ldr	r3, [r3, #28]
 8008be8:	330b      	adds	r3, #11
 8008bea:	781b      	ldrb	r3, [r3, #0]
 8008bec:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8008bf0:	b2da      	uxtb	r2, r3
 8008bf2:	687b      	ldr	r3, [r7, #4]
 8008bf4:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !memcmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 8008bf6:	687b      	ldr	r3, [r7, #4]
 8008bf8:	69db      	ldr	r3, [r3, #28]
 8008bfa:	330b      	adds	r3, #11
 8008bfc:	781b      	ldrb	r3, [r3, #0]
 8008bfe:	f003 0308 	and.w	r3, r3, #8
 8008c02:	2b00      	cmp	r3, #0
 8008c04:	d10a      	bne.n	8008c1c <dir_find+0x86>
 8008c06:	687b      	ldr	r3, [r7, #4]
 8008c08:	69d8      	ldr	r0, [r3, #28]
 8008c0a:	687b      	ldr	r3, [r7, #4]
 8008c0c:	3320      	adds	r3, #32
 8008c0e:	220b      	movs	r2, #11
 8008c10:	4619      	mov	r1, r3
 8008c12:	f00d f9a9 	bl	8015f68 <memcmp>
 8008c16:	4603      	mov	r3, r0
 8008c18:	2b00      	cmp	r3, #0
 8008c1a:	d00b      	beq.n	8008c34 <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 8008c1c:	2100      	movs	r1, #0
 8008c1e:	6878      	ldr	r0, [r7, #4]
 8008c20:	f7ff fe8d 	bl	800893e <dir_next>
 8008c24:	4603      	mov	r3, r0
 8008c26:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 8008c28:	7dfb      	ldrb	r3, [r7, #23]
 8008c2a:	2b00      	cmp	r3, #0
 8008c2c:	d0c5      	beq.n	8008bba <dir_find+0x24>
 8008c2e:	e002      	b.n	8008c36 <dir_find+0xa0>
		if (res != FR_OK) break;
 8008c30:	bf00      	nop
 8008c32:	e000      	b.n	8008c36 <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !memcmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 8008c34:	bf00      	nop

	return res;
 8008c36:	7dfb      	ldrb	r3, [r7, #23]
}
 8008c38:	4618      	mov	r0, r3
 8008c3a:	3718      	adds	r7, #24
 8008c3c:	46bd      	mov	sp, r7
 8008c3e:	bd80      	pop	{r7, pc}

08008c40 <dir_register>:
/*-----------------------------------------------------------------------*/

static FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp						/* Target directory with object name to be created */
)
{
 8008c40:	b580      	push	{r7, lr}
 8008c42:	b084      	sub	sp, #16
 8008c44:	af00      	add	r7, sp, #0
 8008c46:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8008c48:	687b      	ldr	r3, [r7, #4]
 8008c4a:	681b      	ldr	r3, [r3, #0]
 8008c4c:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --n_ent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 8008c4e:	2101      	movs	r1, #1
 8008c50:	6878      	ldr	r0, [r7, #4]
 8008c52:	f7ff ff1a 	bl	8008a8a <dir_alloc>
 8008c56:	4603      	mov	r3, r0
 8008c58:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 8008c5a:	7bfb      	ldrb	r3, [r7, #15]
 8008c5c:	2b00      	cmp	r3, #0
 8008c5e:	d11c      	bne.n	8008c9a <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 8008c60:	687b      	ldr	r3, [r7, #4]
 8008c62:	699b      	ldr	r3, [r3, #24]
 8008c64:	4619      	mov	r1, r3
 8008c66:	68b8      	ldr	r0, [r7, #8]
 8008c68:	f7ff f9bb 	bl	8007fe2 <move_window>
 8008c6c:	4603      	mov	r3, r0
 8008c6e:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8008c70:	7bfb      	ldrb	r3, [r7, #15]
 8008c72:	2b00      	cmp	r3, #0
 8008c74:	d111      	bne.n	8008c9a <dir_register+0x5a>
			memset(dp->dir, 0, SZDIRE);	/* Clean the entry */
 8008c76:	687b      	ldr	r3, [r7, #4]
 8008c78:	69db      	ldr	r3, [r3, #28]
 8008c7a:	2220      	movs	r2, #32
 8008c7c:	2100      	movs	r1, #0
 8008c7e:	4618      	mov	r0, r3
 8008c80:	f00d f982 	bl	8015f88 <memset>
			memcpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 8008c84:	687b      	ldr	r3, [r7, #4]
 8008c86:	69d8      	ldr	r0, [r3, #28]
 8008c88:	687b      	ldr	r3, [r7, #4]
 8008c8a:	3320      	adds	r3, #32
 8008c8c:	220b      	movs	r2, #11
 8008c8e:	4619      	mov	r1, r3
 8008c90:	f00d f9fe 	bl	8016090 <memcpy>
#if FF_USE_LFN
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 8008c94:	68bb      	ldr	r3, [r7, #8]
 8008c96:	2201      	movs	r2, #1
 8008c98:	711a      	strb	r2, [r3, #4]
		}
	}

	return res;
 8008c9a:	7bfb      	ldrb	r3, [r7, #15]
}
 8008c9c:	4618      	mov	r0, r3
 8008c9e:	3710      	adds	r7, #16
 8008ca0:	46bd      	mov	sp, r7
 8008ca2:	bd80      	pop	{r7, pc}

08008ca4 <create_name>:

static FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,					/* Pointer to the directory object */
	const TCHAR** path			/* Pointer to pointer to the segment in the path string */
)
{
 8008ca4:	b580      	push	{r7, lr}
 8008ca6:	b08a      	sub	sp, #40	@ 0x28
 8008ca8:	af00      	add	r7, sp, #0
 8008caa:	6078      	str	r0, [r7, #4]
 8008cac:	6039      	str	r1, [r7, #0]
	BYTE *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 8008cae:	683b      	ldr	r3, [r7, #0]
 8008cb0:	681b      	ldr	r3, [r3, #0]
 8008cb2:	617b      	str	r3, [r7, #20]
 8008cb4:	687b      	ldr	r3, [r7, #4]
 8008cb6:	3320      	adds	r3, #32
 8008cb8:	613b      	str	r3, [r7, #16]
	memset(sfn, ' ', 11);
 8008cba:	220b      	movs	r2, #11
 8008cbc:	2120      	movs	r1, #32
 8008cbe:	6938      	ldr	r0, [r7, #16]
 8008cc0:	f00d f962 	bl	8015f88 <memset>
	si = i = 0; ni = 8;
 8008cc4:	2300      	movs	r3, #0
 8008cc6:	61bb      	str	r3, [r7, #24]
 8008cc8:	69bb      	ldr	r3, [r7, #24]
 8008cca:	61fb      	str	r3, [r7, #28]
 8008ccc:	2308      	movs	r3, #8
 8008cce:	623b      	str	r3, [r7, #32]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];				/* Get a byte */
 8008cd0:	69fb      	ldr	r3, [r7, #28]
 8008cd2:	1c5a      	adds	r2, r3, #1
 8008cd4:	61fa      	str	r2, [r7, #28]
 8008cd6:	697a      	ldr	r2, [r7, #20]
 8008cd8:	4413      	add	r3, r2
 8008cda:	781b      	ldrb	r3, [r3, #0]
 8008cdc:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
		if (c <= ' ') break; 			/* Break if end of the path name */
 8008ce0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8008ce4:	2b20      	cmp	r3, #32
 8008ce6:	f240 8089 	bls.w	8008dfc <create_name+0x158>
		if (IsSeparator(c)) {			/* Break if a separator is found */
 8008cea:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8008cee:	2b2f      	cmp	r3, #47	@ 0x2f
 8008cf0:	d007      	beq.n	8008d02 <create_name+0x5e>
 8008cf2:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8008cf6:	2b5c      	cmp	r3, #92	@ 0x5c
 8008cf8:	d110      	bne.n	8008d1c <create_name+0x78>
			while (IsSeparator(p[si])) si++;	/* Skip duplicated separator if exist */
 8008cfa:	e002      	b.n	8008d02 <create_name+0x5e>
 8008cfc:	69fb      	ldr	r3, [r7, #28]
 8008cfe:	3301      	adds	r3, #1
 8008d00:	61fb      	str	r3, [r7, #28]
 8008d02:	697a      	ldr	r2, [r7, #20]
 8008d04:	69fb      	ldr	r3, [r7, #28]
 8008d06:	4413      	add	r3, r2
 8008d08:	781b      	ldrb	r3, [r3, #0]
 8008d0a:	2b2f      	cmp	r3, #47	@ 0x2f
 8008d0c:	d0f6      	beq.n	8008cfc <create_name+0x58>
 8008d0e:	697a      	ldr	r2, [r7, #20]
 8008d10:	69fb      	ldr	r3, [r7, #28]
 8008d12:	4413      	add	r3, r2
 8008d14:	781b      	ldrb	r3, [r3, #0]
 8008d16:	2b5c      	cmp	r3, #92	@ 0x5c
 8008d18:	d0f0      	beq.n	8008cfc <create_name+0x58>
			break;
 8008d1a:	e070      	b.n	8008dfe <create_name+0x15a>
		}
		if (c == '.' || i >= ni) {		/* End of body or field overflow? */
 8008d1c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8008d20:	2b2e      	cmp	r3, #46	@ 0x2e
 8008d22:	d003      	beq.n	8008d2c <create_name+0x88>
 8008d24:	69ba      	ldr	r2, [r7, #24]
 8008d26:	6a3b      	ldr	r3, [r7, #32]
 8008d28:	429a      	cmp	r2, r3
 8008d2a:	d30d      	bcc.n	8008d48 <create_name+0xa4>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Field overflow or invalid dot? */
 8008d2c:	6a3b      	ldr	r3, [r7, #32]
 8008d2e:	2b0b      	cmp	r3, #11
 8008d30:	d003      	beq.n	8008d3a <create_name+0x96>
 8008d32:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8008d36:	2b2e      	cmp	r3, #46	@ 0x2e
 8008d38:	d001      	beq.n	8008d3e <create_name+0x9a>
 8008d3a:	2306      	movs	r3, #6
 8008d3c:	e081      	b.n	8008e42 <create_name+0x19e>
			i = 8; ni = 11;				/* Enter file extension field */
 8008d3e:	2308      	movs	r3, #8
 8008d40:	61bb      	str	r3, [r7, #24]
 8008d42:	230b      	movs	r3, #11
 8008d44:	623b      	str	r3, [r7, #32]
			continue;
 8008d46:	e058      	b.n	8008dfa <create_name+0x156>
#if FF_CODE_PAGE == 0
		if (ExCvt && c >= 0x80) {		/* Is SBC extended character? */
			c = ExCvt[c & 0x7F];		/* To upper SBC extended character */
		}
#elif FF_CODE_PAGE < 900
		if (c >= 0x80) {				/* Is SBC extended character? */
 8008d48:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8008d4c:	2b00      	cmp	r3, #0
 8008d4e:	da07      	bge.n	8008d60 <create_name+0xbc>
			c = ExCvt[c & 0x7F];		/* To upper SBC extended character */
 8008d50:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8008d54:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008d58:	4a3c      	ldr	r2, [pc, #240]	@ (8008e4c <create_name+0x1a8>)
 8008d5a:	5cd3      	ldrb	r3, [r2, r3]
 8008d5c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
		}
#endif
		if (dbc_1st(c)) {				/* Check if it is a DBC 1st byte */
 8008d60:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8008d64:	4618      	mov	r0, r3
 8008d66:	f7ff f8de 	bl	8007f26 <dbc_1st>
 8008d6a:	4603      	mov	r3, r0
 8008d6c:	2b00      	cmp	r3, #0
 8008d6e:	d024      	beq.n	8008dba <create_name+0x116>
			d = (BYTE)p[si++];			/* Get 2nd byte */
 8008d70:	69fb      	ldr	r3, [r7, #28]
 8008d72:	1c5a      	adds	r2, r3, #1
 8008d74:	61fa      	str	r2, [r7, #28]
 8008d76:	697a      	ldr	r2, [r7, #20]
 8008d78:	4413      	add	r3, r2
 8008d7a:	781b      	ldrb	r3, [r3, #0]
 8008d7c:	73fb      	strb	r3, [r7, #15]
			if (!dbc_2nd(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
 8008d7e:	7bfb      	ldrb	r3, [r7, #15]
 8008d80:	4618      	mov	r0, r3
 8008d82:	f7ff f8e1 	bl	8007f48 <dbc_2nd>
 8008d86:	4603      	mov	r3, r0
 8008d88:	2b00      	cmp	r3, #0
 8008d8a:	d004      	beq.n	8008d96 <create_name+0xf2>
 8008d8c:	6a3b      	ldr	r3, [r7, #32]
 8008d8e:	3b01      	subs	r3, #1
 8008d90:	69ba      	ldr	r2, [r7, #24]
 8008d92:	429a      	cmp	r2, r3
 8008d94:	d301      	bcc.n	8008d9a <create_name+0xf6>
 8008d96:	2306      	movs	r3, #6
 8008d98:	e053      	b.n	8008e42 <create_name+0x19e>
			sfn[i++] = c;
 8008d9a:	69bb      	ldr	r3, [r7, #24]
 8008d9c:	1c5a      	adds	r2, r3, #1
 8008d9e:	61ba      	str	r2, [r7, #24]
 8008da0:	693a      	ldr	r2, [r7, #16]
 8008da2:	4413      	add	r3, r2
 8008da4:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 8008da8:	701a      	strb	r2, [r3, #0]
			sfn[i++] = d;
 8008daa:	69bb      	ldr	r3, [r7, #24]
 8008dac:	1c5a      	adds	r2, r3, #1
 8008dae:	61ba      	str	r2, [r7, #24]
 8008db0:	693a      	ldr	r2, [r7, #16]
 8008db2:	4413      	add	r3, r2
 8008db4:	7bfa      	ldrb	r2, [r7, #15]
 8008db6:	701a      	strb	r2, [r3, #0]
 8008db8:	e78a      	b.n	8008cd0 <create_name+0x2c>
		} else {						/* SBC */
			if (strchr("*+,:;<=>[]|\"\?\x7F", (int)c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 8008dba:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8008dbe:	4619      	mov	r1, r3
 8008dc0:	4823      	ldr	r0, [pc, #140]	@ (8008e50 <create_name+0x1ac>)
 8008dc2:	f00d f8e9 	bl	8015f98 <strchr>
 8008dc6:	4603      	mov	r3, r0
 8008dc8:	2b00      	cmp	r3, #0
 8008dca:	d001      	beq.n	8008dd0 <create_name+0x12c>
 8008dcc:	2306      	movs	r3, #6
 8008dce:	e038      	b.n	8008e42 <create_name+0x19e>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 8008dd0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8008dd4:	2b60      	cmp	r3, #96	@ 0x60
 8008dd6:	d908      	bls.n	8008dea <create_name+0x146>
 8008dd8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8008ddc:	2b7a      	cmp	r3, #122	@ 0x7a
 8008dde:	d804      	bhi.n	8008dea <create_name+0x146>
 8008de0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8008de4:	3b20      	subs	r3, #32
 8008de6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			sfn[i++] = c;
 8008dea:	69bb      	ldr	r3, [r7, #24]
 8008dec:	1c5a      	adds	r2, r3, #1
 8008dee:	61ba      	str	r2, [r7, #24]
 8008df0:	693a      	ldr	r2, [r7, #16]
 8008df2:	4413      	add	r3, r2
 8008df4:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 8008df8:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];				/* Get a byte */
 8008dfa:	e769      	b.n	8008cd0 <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 8008dfc:	bf00      	nop
		}
	}
	*path = &p[si];						/* Return pointer to the next segment */
 8008dfe:	697a      	ldr	r2, [r7, #20]
 8008e00:	69fb      	ldr	r3, [r7, #28]
 8008e02:	441a      	add	r2, r3
 8008e04:	683b      	ldr	r3, [r7, #0]
 8008e06:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 8008e08:	69bb      	ldr	r3, [r7, #24]
 8008e0a:	2b00      	cmp	r3, #0
 8008e0c:	d101      	bne.n	8008e12 <create_name+0x16e>
 8008e0e:	2306      	movs	r3, #6
 8008e10:	e017      	b.n	8008e42 <create_name+0x19e>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 8008e12:	693b      	ldr	r3, [r7, #16]
 8008e14:	781b      	ldrb	r3, [r3, #0]
 8008e16:	2be5      	cmp	r3, #229	@ 0xe5
 8008e18:	d102      	bne.n	8008e20 <create_name+0x17c>
 8008e1a:	693b      	ldr	r3, [r7, #16]
 8008e1c:	2205      	movs	r2, #5
 8008e1e:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ' || p[si] <= ' ') ? NS_LAST : 0;	/* Set last segment flag if end of the path */
 8008e20:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8008e24:	2b20      	cmp	r3, #32
 8008e26:	d905      	bls.n	8008e34 <create_name+0x190>
 8008e28:	697a      	ldr	r2, [r7, #20]
 8008e2a:	69fb      	ldr	r3, [r7, #28]
 8008e2c:	4413      	add	r3, r2
 8008e2e:	781b      	ldrb	r3, [r3, #0]
 8008e30:	2b20      	cmp	r3, #32
 8008e32:	d801      	bhi.n	8008e38 <create_name+0x194>
 8008e34:	2204      	movs	r2, #4
 8008e36:	e000      	b.n	8008e3a <create_name+0x196>
 8008e38:	2200      	movs	r2, #0
 8008e3a:	693b      	ldr	r3, [r7, #16]
 8008e3c:	330b      	adds	r3, #11
 8008e3e:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 8008e40:	2300      	movs	r3, #0
#endif /* FF_USE_LFN */
}
 8008e42:	4618      	mov	r0, r3
 8008e44:	3728      	adds	r7, #40	@ 0x28
 8008e46:	46bd      	mov	sp, r7
 8008e48:	bd80      	pop	{r7, pc}
 8008e4a:	bf00      	nop
 8008e4c:	08017638 	.word	0x08017638
 8008e50:	08017554 	.word	0x08017554

08008e54 <follow_path>:

static FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,					/* Directory object to return last directory and found object */
	const TCHAR* path			/* Full-path string to find a file or directory */
)
{
 8008e54:	b580      	push	{r7, lr}
 8008e56:	b086      	sub	sp, #24
 8008e58:	af00      	add	r7, sp, #0
 8008e5a:	6078      	str	r0, [r7, #4]
 8008e5c:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	FATFS *fs = dp->obj.fs;
 8008e5e:	687b      	ldr	r3, [r7, #4]
 8008e60:	681b      	ldr	r3, [r3, #0]
 8008e62:	613b      	str	r3, [r7, #16]
	if (!IsSeparator(*path) && (FF_STR_VOLUME_ID != 2 || !IsTerminator(*path))) {	/* Without heading separator */
		dp->obj.sclust = fs->cdir;			/* Start at the current directory */
	} else
#endif
	{										/* With heading separator */
		while (IsSeparator(*path)) path++;	/* Strip separators */
 8008e64:	e002      	b.n	8008e6c <follow_path+0x18>
 8008e66:	683b      	ldr	r3, [r7, #0]
 8008e68:	3301      	adds	r3, #1
 8008e6a:	603b      	str	r3, [r7, #0]
 8008e6c:	683b      	ldr	r3, [r7, #0]
 8008e6e:	781b      	ldrb	r3, [r3, #0]
 8008e70:	2b2f      	cmp	r3, #47	@ 0x2f
 8008e72:	d0f8      	beq.n	8008e66 <follow_path+0x12>
 8008e74:	683b      	ldr	r3, [r7, #0]
 8008e76:	781b      	ldrb	r3, [r3, #0]
 8008e78:	2b5c      	cmp	r3, #92	@ 0x5c
 8008e7a:	d0f4      	beq.n	8008e66 <follow_path+0x12>
		dp->obj.sclust = 0;					/* Start from the root directory */
 8008e7c:	687b      	ldr	r3, [r7, #4]
 8008e7e:	2200      	movs	r2, #0
 8008e80:	609a      	str	r2, [r3, #8]
		dp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 8008e82:	683b      	ldr	r3, [r7, #0]
 8008e84:	781b      	ldrb	r3, [r3, #0]
 8008e86:	2b1f      	cmp	r3, #31
 8008e88:	d80a      	bhi.n	8008ea0 <follow_path+0x4c>
		dp->fn[NSFLAG] = NS_NONAME;
 8008e8a:	687b      	ldr	r3, [r7, #4]
 8008e8c:	2280      	movs	r2, #128	@ 0x80
 8008e8e:	f883 202b 	strb.w	r2, [r3, #43]	@ 0x2b
		res = dir_sdi(dp, 0);
 8008e92:	2100      	movs	r1, #0
 8008e94:	6878      	ldr	r0, [r7, #4]
 8008e96:	f7ff fcc9 	bl	800882c <dir_sdi>
 8008e9a:	4603      	mov	r3, r0
 8008e9c:	75fb      	strb	r3, [r7, #23]
 8008e9e:	e048      	b.n	8008f32 <follow_path+0xde>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8008ea0:	463b      	mov	r3, r7
 8008ea2:	4619      	mov	r1, r3
 8008ea4:	6878      	ldr	r0, [r7, #4]
 8008ea6:	f7ff fefd 	bl	8008ca4 <create_name>
 8008eaa:	4603      	mov	r3, r0
 8008eac:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8008eae:	7dfb      	ldrb	r3, [r7, #23]
 8008eb0:	2b00      	cmp	r3, #0
 8008eb2:	d139      	bne.n	8008f28 <follow_path+0xd4>
			res = dir_find(dp);				/* Find an object with the segment name */
 8008eb4:	6878      	ldr	r0, [r7, #4]
 8008eb6:	f7ff fe6e 	bl	8008b96 <dir_find>
 8008eba:	4603      	mov	r3, r0
 8008ebc:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 8008ebe:	687b      	ldr	r3, [r7, #4]
 8008ec0:	f893 302b 	ldrb.w	r3, [r3, #43]	@ 0x2b
 8008ec4:	73fb      	strb	r3, [r7, #15]
			if (res != FR_OK) {				/* Failed to find the object */
 8008ec6:	7dfb      	ldrb	r3, [r7, #23]
 8008ec8:	2b00      	cmp	r3, #0
 8008eca:	d00a      	beq.n	8008ee2 <follow_path+0x8e>
				if (res == FR_NO_FILE) {	/* Object is not found */
 8008ecc:	7dfb      	ldrb	r3, [r7, #23]
 8008ece:	2b04      	cmp	r3, #4
 8008ed0:	d12c      	bne.n	8008f2c <follow_path+0xd8>
					if (FF_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 8008ed2:	7bfb      	ldrb	r3, [r7, #15]
 8008ed4:	f003 0304 	and.w	r3, r3, #4
 8008ed8:	2b00      	cmp	r3, #0
 8008eda:	d127      	bne.n	8008f2c <follow_path+0xd8>
 8008edc:	2305      	movs	r3, #5
 8008ede:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 8008ee0:	e024      	b.n	8008f2c <follow_path+0xd8>
			}
			if (ns & NS_LAST) break;		/* Last segment matched. Function completed. */
 8008ee2:	7bfb      	ldrb	r3, [r7, #15]
 8008ee4:	f003 0304 	and.w	r3, r3, #4
 8008ee8:	2b00      	cmp	r3, #0
 8008eea:	d121      	bne.n	8008f30 <follow_path+0xdc>
			/* Get into the sub-directory */
			if (!(dp->obj.attr & AM_DIR)) {	/* It is not a sub-directory and cannot follow */
 8008eec:	687b      	ldr	r3, [r7, #4]
 8008eee:	799b      	ldrb	r3, [r3, #6]
 8008ef0:	f003 0310 	and.w	r3, r3, #16
 8008ef4:	2b00      	cmp	r3, #0
 8008ef6:	d102      	bne.n	8008efe <follow_path+0xaa>
				res = FR_NO_PATH; break;
 8008ef8:	2305      	movs	r3, #5
 8008efa:	75fb      	strb	r3, [r7, #23]
 8008efc:	e019      	b.n	8008f32 <follow_path+0xde>
				dp->obj.c_ofs = dp->blk_ofs;
				init_alloc_info(fs, &dp->obj);	/* Open next directory */
			} else
#endif
			{
				dp->obj.sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 8008efe:	693b      	ldr	r3, [r7, #16]
 8008f00:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 8008f04:	687b      	ldr	r3, [r7, #4]
 8008f06:	691b      	ldr	r3, [r3, #16]
 8008f08:	693a      	ldr	r2, [r7, #16]
 8008f0a:	8992      	ldrh	r2, [r2, #12]
 8008f0c:	fbb3 f0f2 	udiv	r0, r3, r2
 8008f10:	fb00 f202 	mul.w	r2, r0, r2
 8008f14:	1a9b      	subs	r3, r3, r2
 8008f16:	440b      	add	r3, r1
 8008f18:	4619      	mov	r1, r3
 8008f1a:	6938      	ldr	r0, [r7, #16]
 8008f1c:	f7ff fdfc 	bl	8008b18 <ld_clust>
 8008f20:	4602      	mov	r2, r0
 8008f22:	687b      	ldr	r3, [r7, #4]
 8008f24:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8008f26:	e7bb      	b.n	8008ea0 <follow_path+0x4c>
			if (res != FR_OK) break;
 8008f28:	bf00      	nop
 8008f2a:	e002      	b.n	8008f32 <follow_path+0xde>
				break;
 8008f2c:	bf00      	nop
 8008f2e:	e000      	b.n	8008f32 <follow_path+0xde>
			if (ns & NS_LAST) break;		/* Last segment matched. Function completed. */
 8008f30:	bf00      	nop
			}
		}
	}

	return res;
 8008f32:	7dfb      	ldrb	r3, [r7, #23]
}
 8008f34:	4618      	mov	r0, r3
 8008f36:	3718      	adds	r7, #24
 8008f38:	46bd      	mov	sp, r7
 8008f3a:	bd80      	pop	{r7, pc}

08008f3c <get_ldnumber>:
/*-----------------------------------------------------------------------*/

static int get_ldnumber (	/* Returns logical drive number (-1:invalid drive number or null pointer) */
	const TCHAR** path		/* Pointer to pointer to the path name */
)
{
 8008f3c:	b480      	push	{r7}
 8008f3e:	b08b      	sub	sp, #44	@ 0x2c
 8008f40:	af00      	add	r7, sp, #0
 8008f42:	6078      	str	r0, [r7, #4]
	const TCHAR *tp;
	const TCHAR *tt;
	TCHAR tc;
	int i;
	int vol = -1;
 8008f44:	f04f 33ff 	mov.w	r3, #4294967295
 8008f48:	617b      	str	r3, [r7, #20]
#if FF_STR_VOLUME_ID		/* Find string volume ID */
	const char *sp;
	char c;
#endif

	tt = tp = *path;
 8008f4a:	687b      	ldr	r3, [r7, #4]
 8008f4c:	681b      	ldr	r3, [r3, #0]
 8008f4e:	627b      	str	r3, [r7, #36]	@ 0x24
 8008f50:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008f52:	623b      	str	r3, [r7, #32]
	if (!tp) return vol;	/* Invalid path name? */
 8008f54:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008f56:	2b00      	cmp	r3, #0
 8008f58:	d101      	bne.n	8008f5e <get_ldnumber+0x22>
 8008f5a:	697b      	ldr	r3, [r7, #20]
 8008f5c:	e080      	b.n	8009060 <get_ldnumber+0x124>
	do {					/* Find a colon in the path */
		tc = *tt++;
 8008f5e:	6a3b      	ldr	r3, [r7, #32]
 8008f60:	1c5a      	adds	r2, r3, #1
 8008f62:	623a      	str	r2, [r7, #32]
 8008f64:	781b      	ldrb	r3, [r3, #0]
 8008f66:	77fb      	strb	r3, [r7, #31]
	} while (!IsTerminator(tc) && tc != ':');
 8008f68:	7ffb      	ldrb	r3, [r7, #31]
 8008f6a:	2b20      	cmp	r3, #32
 8008f6c:	d902      	bls.n	8008f74 <get_ldnumber+0x38>
 8008f6e:	7ffb      	ldrb	r3, [r7, #31]
 8008f70:	2b3a      	cmp	r3, #58	@ 0x3a
 8008f72:	d1f4      	bne.n	8008f5e <get_ldnumber+0x22>

	if (tc == ':') {	/* DOS/Windows style volume ID? */
 8008f74:	7ffb      	ldrb	r3, [r7, #31]
 8008f76:	2b3a      	cmp	r3, #58	@ 0x3a
 8008f78:	d11c      	bne.n	8008fb4 <get_ldnumber+0x78>
		i = FF_VOLUMES;
 8008f7a:	2302      	movs	r3, #2
 8008f7c:	61bb      	str	r3, [r7, #24]
		if (IsDigit(*tp) && tp + 2 == tt) {	/* Is there a numeric volume ID + colon? */
 8008f7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008f80:	781b      	ldrb	r3, [r3, #0]
 8008f82:	2b2f      	cmp	r3, #47	@ 0x2f
 8008f84:	d90c      	bls.n	8008fa0 <get_ldnumber+0x64>
 8008f86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008f88:	781b      	ldrb	r3, [r3, #0]
 8008f8a:	2b39      	cmp	r3, #57	@ 0x39
 8008f8c:	d808      	bhi.n	8008fa0 <get_ldnumber+0x64>
 8008f8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008f90:	3302      	adds	r3, #2
 8008f92:	6a3a      	ldr	r2, [r7, #32]
 8008f94:	429a      	cmp	r2, r3
 8008f96:	d103      	bne.n	8008fa0 <get_ldnumber+0x64>
			i = (int)*tp - '0';	/* Get the LD number */
 8008f98:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008f9a:	781b      	ldrb	r3, [r3, #0]
 8008f9c:	3b30      	subs	r3, #48	@ 0x30
 8008f9e:	61bb      	str	r3, [r7, #24]
					if (IsLower(tc)) tc -= 0x20;
				} while (c && (TCHAR)c == tc);
			} while ((c || tp != tt) && ++i < FF_VOLUMES);	/* Repeat for each id until pattern match */
		}
#endif
		if (i < FF_VOLUMES) {	/* If a volume ID is found, get the drive number and strip it */
 8008fa0:	69bb      	ldr	r3, [r7, #24]
 8008fa2:	2b01      	cmp	r3, #1
 8008fa4:	dc04      	bgt.n	8008fb0 <get_ldnumber+0x74>
			vol = i;		/* Drive number */
 8008fa6:	69bb      	ldr	r3, [r7, #24]
 8008fa8:	617b      	str	r3, [r7, #20]
			*path = tt;		/* Snip the drive prefix off */
 8008faa:	687b      	ldr	r3, [r7, #4]
 8008fac:	6a3a      	ldr	r2, [r7, #32]
 8008fae:	601a      	str	r2, [r3, #0]
		}
		return vol;
 8008fb0:	697b      	ldr	r3, [r7, #20]
 8008fb2:	e055      	b.n	8009060 <get_ldnumber+0x124>
	}
#if FF_STR_VOLUME_ID == 2		/* Unix style volume ID is enabled */
	if (*tp == '/') {			/* Is there a volume ID? */
 8008fb4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008fb6:	781b      	ldrb	r3, [r3, #0]
 8008fb8:	2b2f      	cmp	r3, #47	@ 0x2f
 8008fba:	d14e      	bne.n	800905a <get_ldnumber+0x11e>
		while (*(tp + 1) == '/') tp++;	/* Skip duplicated separator */
 8008fbc:	e002      	b.n	8008fc4 <get_ldnumber+0x88>
 8008fbe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008fc0:	3301      	adds	r3, #1
 8008fc2:	627b      	str	r3, [r7, #36]	@ 0x24
 8008fc4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008fc6:	3301      	adds	r3, #1
 8008fc8:	781b      	ldrb	r3, [r3, #0]
 8008fca:	2b2f      	cmp	r3, #47	@ 0x2f
 8008fcc:	d0f7      	beq.n	8008fbe <get_ldnumber+0x82>
		i = 0;
 8008fce:	2300      	movs	r3, #0
 8008fd0:	61bb      	str	r3, [r7, #24]
		do {
			tt = tp; sp = VolumeStr[i]; /* Path name and this string volume ID */
 8008fd2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008fd4:	623b      	str	r3, [r7, #32]
 8008fd6:	4a25      	ldr	r2, [pc, #148]	@ (800906c <get_ldnumber+0x130>)
 8008fd8:	69bb      	ldr	r3, [r7, #24]
 8008fda:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008fde:	613b      	str	r3, [r7, #16]
			do {	/* Compare the volume ID with path name */
				c = *sp++; tc = *(++tt);
 8008fe0:	693b      	ldr	r3, [r7, #16]
 8008fe2:	1c5a      	adds	r2, r3, #1
 8008fe4:	613a      	str	r2, [r7, #16]
 8008fe6:	781b      	ldrb	r3, [r3, #0]
 8008fe8:	73fb      	strb	r3, [r7, #15]
 8008fea:	6a3b      	ldr	r3, [r7, #32]
 8008fec:	3301      	adds	r3, #1
 8008fee:	623b      	str	r3, [r7, #32]
 8008ff0:	6a3b      	ldr	r3, [r7, #32]
 8008ff2:	781b      	ldrb	r3, [r3, #0]
 8008ff4:	77fb      	strb	r3, [r7, #31]
				if (IsLower(c)) c -= 0x20;
 8008ff6:	7bfb      	ldrb	r3, [r7, #15]
 8008ff8:	2b60      	cmp	r3, #96	@ 0x60
 8008ffa:	d905      	bls.n	8009008 <get_ldnumber+0xcc>
 8008ffc:	7bfb      	ldrb	r3, [r7, #15]
 8008ffe:	2b7a      	cmp	r3, #122	@ 0x7a
 8009000:	d802      	bhi.n	8009008 <get_ldnumber+0xcc>
 8009002:	7bfb      	ldrb	r3, [r7, #15]
 8009004:	3b20      	subs	r3, #32
 8009006:	73fb      	strb	r3, [r7, #15]
				if (IsLower(tc)) tc -= 0x20;
 8009008:	7ffb      	ldrb	r3, [r7, #31]
 800900a:	2b60      	cmp	r3, #96	@ 0x60
 800900c:	d905      	bls.n	800901a <get_ldnumber+0xde>
 800900e:	7ffb      	ldrb	r3, [r7, #31]
 8009010:	2b7a      	cmp	r3, #122	@ 0x7a
 8009012:	d802      	bhi.n	800901a <get_ldnumber+0xde>
 8009014:	7ffb      	ldrb	r3, [r7, #31]
 8009016:	3b20      	subs	r3, #32
 8009018:	77fb      	strb	r3, [r7, #31]
			} while (c && (TCHAR)c == tc);
 800901a:	7bfb      	ldrb	r3, [r7, #15]
 800901c:	2b00      	cmp	r3, #0
 800901e:	d003      	beq.n	8009028 <get_ldnumber+0xec>
 8009020:	7bfa      	ldrb	r2, [r7, #15]
 8009022:	7ffb      	ldrb	r3, [r7, #31]
 8009024:	429a      	cmp	r2, r3
 8009026:	d0db      	beq.n	8008fe0 <get_ldnumber+0xa4>
		} while ((c || (tc != '/' && !IsTerminator(tc))) && ++i < FF_VOLUMES);	/* Repeat for each ID until pattern match */
 8009028:	7bfb      	ldrb	r3, [r7, #15]
 800902a:	2b00      	cmp	r3, #0
 800902c:	d105      	bne.n	800903a <get_ldnumber+0xfe>
 800902e:	7ffb      	ldrb	r3, [r7, #31]
 8009030:	2b2f      	cmp	r3, #47	@ 0x2f
 8009032:	d008      	beq.n	8009046 <get_ldnumber+0x10a>
 8009034:	7ffb      	ldrb	r3, [r7, #31]
 8009036:	2b20      	cmp	r3, #32
 8009038:	d905      	bls.n	8009046 <get_ldnumber+0x10a>
 800903a:	69bb      	ldr	r3, [r7, #24]
 800903c:	3301      	adds	r3, #1
 800903e:	61bb      	str	r3, [r7, #24]
 8009040:	69bb      	ldr	r3, [r7, #24]
 8009042:	2b01      	cmp	r3, #1
 8009044:	ddc5      	ble.n	8008fd2 <get_ldnumber+0x96>
		if (i < FF_VOLUMES) {	/* If a volume ID is found, get the drive number and strip it */
 8009046:	69bb      	ldr	r3, [r7, #24]
 8009048:	2b01      	cmp	r3, #1
 800904a:	dc04      	bgt.n	8009056 <get_ldnumber+0x11a>
			vol = i;		/* Drive number */
 800904c:	69bb      	ldr	r3, [r7, #24]
 800904e:	617b      	str	r3, [r7, #20]
			*path = tt;		/* Snip the drive prefix off */
 8009050:	687b      	ldr	r3, [r7, #4]
 8009052:	6a3a      	ldr	r2, [r7, #32]
 8009054:	601a      	str	r2, [r3, #0]
		}
		return vol;
 8009056:	697b      	ldr	r3, [r7, #20]
 8009058:	e002      	b.n	8009060 <get_ldnumber+0x124>
#endif
	/* No drive prefix is found */
#if FF_FS_RPATH != 0
	vol = CurrVol;	/* Default drive is current drive */
#else
	vol = 0;		/* Default drive is 0 */
 800905a:	2300      	movs	r3, #0
 800905c:	617b      	str	r3, [r7, #20]
#endif
	return vol;		/* Return the default drive */
 800905e:	697b      	ldr	r3, [r7, #20]
}
 8009060:	4618      	mov	r0, r3
 8009062:	372c      	adds	r7, #44	@ 0x2c
 8009064:	46bd      	mov	sp, r7
 8009066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800906a:	4770      	bx	lr
 800906c:	2000026c 	.word	0x2000026c

08009070 <check_fs>:

static UINT check_fs (	/* 0:FAT/FAT32 VBR, 1:exFAT VBR, 2:Not FAT and valid BS, 3:Not FAT and invalid BS, 4:Disk error */
	FATFS* fs,			/* Filesystem object */
	LBA_t sect			/* Sector to load and check if it is an FAT-VBR or not */
)
{
 8009070:	b580      	push	{r7, lr}
 8009072:	b084      	sub	sp, #16
 8009074:	af00      	add	r7, sp, #0
 8009076:	6078      	str	r0, [r7, #4]
 8009078:	6039      	str	r1, [r7, #0]
	WORD w, sign;
	BYTE b;


	fs->wflag = 0; fs->winsect = (LBA_t)0 - 1;		/* Invaidate window */
 800907a:	687b      	ldr	r3, [r7, #4]
 800907c:	2200      	movs	r2, #0
 800907e:	711a      	strb	r2, [r3, #4]
 8009080:	687b      	ldr	r3, [r7, #4]
 8009082:	f04f 32ff 	mov.w	r2, #4294967295
 8009086:	631a      	str	r2, [r3, #48]	@ 0x30
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load the boot sector */
 8009088:	6839      	ldr	r1, [r7, #0]
 800908a:	6878      	ldr	r0, [r7, #4]
 800908c:	f7fe ffa9 	bl	8007fe2 <move_window>
 8009090:	4603      	mov	r3, r0
 8009092:	2b00      	cmp	r3, #0
 8009094:	d001      	beq.n	800909a <check_fs+0x2a>
 8009096:	2304      	movs	r3, #4
 8009098:	e088      	b.n	80091ac <check_fs+0x13c>
	sign = ld_word(fs->win + BS_55AA);
 800909a:	687b      	ldr	r3, [r7, #4]
 800909c:	3334      	adds	r3, #52	@ 0x34
 800909e:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 80090a2:	4618      	mov	r0, r3
 80090a4:	f7fe febc 	bl	8007e20 <ld_word>
 80090a8:	4603      	mov	r3, r0
 80090aa:	81fb      	strh	r3, [r7, #14]
#if FF_FS_EXFAT
	if (sign == 0xAA55 && !memcmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;	/* It is an exFAT VBR */
#endif
	b = fs->win[BS_JmpBoot];
 80090ac:	687b      	ldr	r3, [r7, #4]
 80090ae:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 80090b2:	737b      	strb	r3, [r7, #13]
	if (b == 0xEB || b == 0xE9 || b == 0xE8) {	/* Valid JumpBoot code? (short jump, near jump or near call) */
 80090b4:	7b7b      	ldrb	r3, [r7, #13]
 80090b6:	2beb      	cmp	r3, #235	@ 0xeb
 80090b8:	d005      	beq.n	80090c6 <check_fs+0x56>
 80090ba:	7b7b      	ldrb	r3, [r7, #13]
 80090bc:	2be9      	cmp	r3, #233	@ 0xe9
 80090be:	d002      	beq.n	80090c6 <check_fs+0x56>
 80090c0:	7b7b      	ldrb	r3, [r7, #13]
 80090c2:	2be8      	cmp	r3, #232	@ 0xe8
 80090c4:	d16a      	bne.n	800919c <check_fs+0x12c>
		if (sign == 0xAA55 && !memcmp(fs->win + BS_FilSysType32, "FAT32   ", 8)) {
 80090c6:	89fb      	ldrh	r3, [r7, #14]
 80090c8:	f64a 2255 	movw	r2, #43605	@ 0xaa55
 80090cc:	4293      	cmp	r3, r2
 80090ce:	d10c      	bne.n	80090ea <check_fs+0x7a>
 80090d0:	687b      	ldr	r3, [r7, #4]
 80090d2:	3334      	adds	r3, #52	@ 0x34
 80090d4:	3352      	adds	r3, #82	@ 0x52
 80090d6:	2208      	movs	r2, #8
 80090d8:	4936      	ldr	r1, [pc, #216]	@ (80091b4 <check_fs+0x144>)
 80090da:	4618      	mov	r0, r3
 80090dc:	f00c ff44 	bl	8015f68 <memcmp>
 80090e0:	4603      	mov	r3, r0
 80090e2:	2b00      	cmp	r3, #0
 80090e4:	d101      	bne.n	80090ea <check_fs+0x7a>
			return 0;	/* It is an FAT32 VBR */
 80090e6:	2300      	movs	r3, #0
 80090e8:	e060      	b.n	80091ac <check_fs+0x13c>
		}
		/* FAT volumes formatted with early MS-DOS lack BS_55AA and BS_FilSysType, so FAT VBR needs to be identified without them. */
		w = ld_word(fs->win + BPB_BytsPerSec);
 80090ea:	687b      	ldr	r3, [r7, #4]
 80090ec:	3334      	adds	r3, #52	@ 0x34
 80090ee:	330b      	adds	r3, #11
 80090f0:	4618      	mov	r0, r3
 80090f2:	f7fe fe95 	bl	8007e20 <ld_word>
 80090f6:	4603      	mov	r3, r0
 80090f8:	817b      	strh	r3, [r7, #10]
		b = fs->win[BPB_SecPerClus];
 80090fa:	687b      	ldr	r3, [r7, #4]
 80090fc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8009100:	737b      	strb	r3, [r7, #13]
		if ((w & (w - 1)) == 0 && w >= FF_MIN_SS && w <= FF_MAX_SS	/* Properness of sector size (512-4096 and 2^n) */
 8009102:	897a      	ldrh	r2, [r7, #10]
 8009104:	897b      	ldrh	r3, [r7, #10]
 8009106:	3b01      	subs	r3, #1
 8009108:	4013      	ands	r3, r2
 800910a:	2b00      	cmp	r3, #0
 800910c:	d146      	bne.n	800919c <check_fs+0x12c>
 800910e:	897b      	ldrh	r3, [r7, #10]
 8009110:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009114:	d342      	bcc.n	800919c <check_fs+0x12c>
 8009116:	897b      	ldrh	r3, [r7, #10]
 8009118:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800911c:	d83e      	bhi.n	800919c <check_fs+0x12c>
			&& b != 0 && (b & (b - 1)) == 0				/* Properness of cluster size (2^n) */
 800911e:	7b7b      	ldrb	r3, [r7, #13]
 8009120:	2b00      	cmp	r3, #0
 8009122:	d03b      	beq.n	800919c <check_fs+0x12c>
 8009124:	7b7a      	ldrb	r2, [r7, #13]
 8009126:	7b7b      	ldrb	r3, [r7, #13]
 8009128:	3b01      	subs	r3, #1
 800912a:	4013      	ands	r3, r2
 800912c:	2b00      	cmp	r3, #0
 800912e:	d135      	bne.n	800919c <check_fs+0x12c>
			&& ld_word(fs->win + BPB_RsvdSecCnt) != 0	/* Properness of reserved sectors (MNBZ) */
 8009130:	687b      	ldr	r3, [r7, #4]
 8009132:	3334      	adds	r3, #52	@ 0x34
 8009134:	330e      	adds	r3, #14
 8009136:	4618      	mov	r0, r3
 8009138:	f7fe fe72 	bl	8007e20 <ld_word>
 800913c:	4603      	mov	r3, r0
 800913e:	2b00      	cmp	r3, #0
 8009140:	d02c      	beq.n	800919c <check_fs+0x12c>
			&& (UINT)fs->win[BPB_NumFATs] - 1 <= 1		/* Properness of FATs (1 or 2) */
 8009142:	687b      	ldr	r3, [r7, #4]
 8009144:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8009148:	3b01      	subs	r3, #1
 800914a:	2b01      	cmp	r3, #1
 800914c:	d826      	bhi.n	800919c <check_fs+0x12c>
			&& ld_word(fs->win + BPB_RootEntCnt) != 0	/* Properness of root dir entries (MNBZ) */
 800914e:	687b      	ldr	r3, [r7, #4]
 8009150:	3334      	adds	r3, #52	@ 0x34
 8009152:	3311      	adds	r3, #17
 8009154:	4618      	mov	r0, r3
 8009156:	f7fe fe63 	bl	8007e20 <ld_word>
 800915a:	4603      	mov	r3, r0
 800915c:	2b00      	cmp	r3, #0
 800915e:	d01d      	beq.n	800919c <check_fs+0x12c>
			&& (ld_word(fs->win + BPB_TotSec16) >= 128 || ld_dword(fs->win + BPB_TotSec32) >= 0x10000)	/* Properness of volume sectors (>=128) */
 8009160:	687b      	ldr	r3, [r7, #4]
 8009162:	3334      	adds	r3, #52	@ 0x34
 8009164:	3313      	adds	r3, #19
 8009166:	4618      	mov	r0, r3
 8009168:	f7fe fe5a 	bl	8007e20 <ld_word>
 800916c:	4603      	mov	r3, r0
 800916e:	2b7f      	cmp	r3, #127	@ 0x7f
 8009170:	d809      	bhi.n	8009186 <check_fs+0x116>
 8009172:	687b      	ldr	r3, [r7, #4]
 8009174:	3334      	adds	r3, #52	@ 0x34
 8009176:	3320      	adds	r3, #32
 8009178:	4618      	mov	r0, r3
 800917a:	f7fe fe6a 	bl	8007e52 <ld_dword>
 800917e:	4603      	mov	r3, r0
 8009180:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009184:	d30a      	bcc.n	800919c <check_fs+0x12c>
			&& ld_word(fs->win + BPB_FATSz16) != 0) {	/* Properness of FAT size (MNBZ) */
 8009186:	687b      	ldr	r3, [r7, #4]
 8009188:	3334      	adds	r3, #52	@ 0x34
 800918a:	3316      	adds	r3, #22
 800918c:	4618      	mov	r0, r3
 800918e:	f7fe fe47 	bl	8007e20 <ld_word>
 8009192:	4603      	mov	r3, r0
 8009194:	2b00      	cmp	r3, #0
 8009196:	d001      	beq.n	800919c <check_fs+0x12c>
				return 0;	/* It can be presumed an FAT VBR */
 8009198:	2300      	movs	r3, #0
 800919a:	e007      	b.n	80091ac <check_fs+0x13c>
		}
	}
	return sign == 0xAA55 ? 2 : 3;	/* Not an FAT VBR (valid or invalid BS) */
 800919c:	89fb      	ldrh	r3, [r7, #14]
 800919e:	f64a 2255 	movw	r2, #43605	@ 0xaa55
 80091a2:	4293      	cmp	r3, r2
 80091a4:	d101      	bne.n	80091aa <check_fs+0x13a>
 80091a6:	2302      	movs	r3, #2
 80091a8:	e000      	b.n	80091ac <check_fs+0x13c>
 80091aa:	2303      	movs	r3, #3
}
 80091ac:	4618      	mov	r0, r3
 80091ae:	3710      	adds	r7, #16
 80091b0:	46bd      	mov	sp, r7
 80091b2:	bd80      	pop	{r7, pc}
 80091b4:	08017564 	.word	0x08017564

080091b8 <find_volume>:

static UINT find_volume (	/* Returns BS status found in the hosting drive */
	FATFS* fs,		/* Filesystem object */
	UINT part		/* Partition to fined = 0:find as SFD and partitions, >0:forced partition number */
)
{
 80091b8:	b580      	push	{r7, lr}
 80091ba:	b088      	sub	sp, #32
 80091bc:	af00      	add	r7, sp, #0
 80091be:	6078      	str	r0, [r7, #4]
 80091c0:	6039      	str	r1, [r7, #0]
	UINT fmt, i;
	DWORD mbr_pt[4];


	fmt = check_fs(fs, 0);				/* Load sector 0 and check if it is an FAT VBR as SFD format */
 80091c2:	2100      	movs	r1, #0
 80091c4:	6878      	ldr	r0, [r7, #4]
 80091c6:	f7ff ff53 	bl	8009070 <check_fs>
 80091ca:	61b8      	str	r0, [r7, #24]
	if (fmt != 2 && (fmt >= 3 || part == 0)) return fmt;	/* Returns if it is an FAT VBR as auto scan, not a BS or disk error */
 80091cc:	69bb      	ldr	r3, [r7, #24]
 80091ce:	2b02      	cmp	r3, #2
 80091d0:	d007      	beq.n	80091e2 <find_volume+0x2a>
 80091d2:	69bb      	ldr	r3, [r7, #24]
 80091d4:	2b02      	cmp	r3, #2
 80091d6:	d802      	bhi.n	80091de <find_volume+0x26>
 80091d8:	683b      	ldr	r3, [r7, #0]
 80091da:	2b00      	cmp	r3, #0
 80091dc:	d101      	bne.n	80091e2 <find_volume+0x2a>
 80091de:	69bb      	ldr	r3, [r7, #24]
 80091e0:	e045      	b.n	800926e <find_volume+0xb6>
		}
		return 3;	/* Not found */
	}
#endif
	if (FF_MULTI_PARTITION && part > 4) return 3;	/* MBR has 4 partitions max */
	for (i = 0; i < 4; i++) {		/* Load partition offset in the MBR */
 80091e2:	2300      	movs	r3, #0
 80091e4:	61fb      	str	r3, [r7, #28]
 80091e6:	e014      	b.n	8009212 <find_volume+0x5a>
		mbr_pt[i] = ld_dword(fs->win + MBR_Table + i * SZ_PTE + PTE_StLba);
 80091e8:	687b      	ldr	r3, [r7, #4]
 80091ea:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 80091ee:	69fb      	ldr	r3, [r7, #28]
 80091f0:	011b      	lsls	r3, r3, #4
 80091f2:	f503 73e3 	add.w	r3, r3, #454	@ 0x1c6
 80091f6:	4413      	add	r3, r2
 80091f8:	4618      	mov	r0, r3
 80091fa:	f7fe fe2a 	bl	8007e52 <ld_dword>
 80091fe:	4602      	mov	r2, r0
 8009200:	69fb      	ldr	r3, [r7, #28]
 8009202:	009b      	lsls	r3, r3, #2
 8009204:	3320      	adds	r3, #32
 8009206:	443b      	add	r3, r7
 8009208:	f843 2c18 	str.w	r2, [r3, #-24]
	for (i = 0; i < 4; i++) {		/* Load partition offset in the MBR */
 800920c:	69fb      	ldr	r3, [r7, #28]
 800920e:	3301      	adds	r3, #1
 8009210:	61fb      	str	r3, [r7, #28]
 8009212:	69fb      	ldr	r3, [r7, #28]
 8009214:	2b03      	cmp	r3, #3
 8009216:	d9e7      	bls.n	80091e8 <find_volume+0x30>
	}
	i = part ? part - 1 : 0;		/* Table index to find first */
 8009218:	683b      	ldr	r3, [r7, #0]
 800921a:	2b00      	cmp	r3, #0
 800921c:	d002      	beq.n	8009224 <find_volume+0x6c>
 800921e:	683b      	ldr	r3, [r7, #0]
 8009220:	3b01      	subs	r3, #1
 8009222:	e000      	b.n	8009226 <find_volume+0x6e>
 8009224:	2300      	movs	r3, #0
 8009226:	61fb      	str	r3, [r7, #28]
	do {							/* Find an FAT volume */
		fmt = mbr_pt[i] ? check_fs(fs, mbr_pt[i]) : 3;	/* Check if the partition is FAT */
 8009228:	69fb      	ldr	r3, [r7, #28]
 800922a:	009b      	lsls	r3, r3, #2
 800922c:	3320      	adds	r3, #32
 800922e:	443b      	add	r3, r7
 8009230:	f853 3c18 	ldr.w	r3, [r3, #-24]
 8009234:	2b00      	cmp	r3, #0
 8009236:	d00b      	beq.n	8009250 <find_volume+0x98>
 8009238:	69fb      	ldr	r3, [r7, #28]
 800923a:	009b      	lsls	r3, r3, #2
 800923c:	3320      	adds	r3, #32
 800923e:	443b      	add	r3, r7
 8009240:	f853 3c18 	ldr.w	r3, [r3, #-24]
 8009244:	4619      	mov	r1, r3
 8009246:	6878      	ldr	r0, [r7, #4]
 8009248:	f7ff ff12 	bl	8009070 <check_fs>
 800924c:	4603      	mov	r3, r0
 800924e:	e000      	b.n	8009252 <find_volume+0x9a>
 8009250:	2303      	movs	r3, #3
 8009252:	61bb      	str	r3, [r7, #24]
	} while (part == 0 && fmt >= 2 && ++i < 4);
 8009254:	683b      	ldr	r3, [r7, #0]
 8009256:	2b00      	cmp	r3, #0
 8009258:	d108      	bne.n	800926c <find_volume+0xb4>
 800925a:	69bb      	ldr	r3, [r7, #24]
 800925c:	2b01      	cmp	r3, #1
 800925e:	d905      	bls.n	800926c <find_volume+0xb4>
 8009260:	69fb      	ldr	r3, [r7, #28]
 8009262:	3301      	adds	r3, #1
 8009264:	61fb      	str	r3, [r7, #28]
 8009266:	69fb      	ldr	r3, [r7, #28]
 8009268:	2b03      	cmp	r3, #3
 800926a:	d9dd      	bls.n	8009228 <find_volume+0x70>
	return fmt;
 800926c:	69bb      	ldr	r3, [r7, #24]
}
 800926e:	4618      	mov	r0, r3
 8009270:	3720      	adds	r7, #32
 8009272:	46bd      	mov	sp, r7
 8009274:	bd80      	pop	{r7, pc}
	...

08009278 <mount_volume>:
static FRESULT mount_volume (	/* FR_OK(0): successful, !=0: an error occurred */
	const TCHAR** path,			/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,				/* Pointer to pointer to the found filesystem object */
	BYTE mode					/* Desiered access mode to check write protection */
)
{
 8009278:	b580      	push	{r7, lr}
 800927a:	b090      	sub	sp, #64	@ 0x40
 800927c:	af00      	add	r7, sp, #0
 800927e:	60f8      	str	r0, [r7, #12]
 8009280:	60b9      	str	r1, [r7, #8]
 8009282:	4613      	mov	r3, r2
 8009284:	71fb      	strb	r3, [r7, #7]
	WORD nrsv;
	UINT fmt;


	/* Get logical drive number */
	*rfs = 0;
 8009286:	68bb      	ldr	r3, [r7, #8]
 8009288:	2200      	movs	r2, #0
 800928a:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 800928c:	68f8      	ldr	r0, [r7, #12]
 800928e:	f7ff fe55 	bl	8008f3c <get_ldnumber>
 8009292:	62f8      	str	r0, [r7, #44]	@ 0x2c
	if (vol < 0) return FR_INVALID_DRIVE;
 8009294:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009296:	2b00      	cmp	r3, #0
 8009298:	da01      	bge.n	800929e <mount_volume+0x26>
 800929a:	230b      	movs	r3, #11
 800929c:	e207      	b.n	80096ae <mount_volume+0x436>

	/* Check if the filesystem object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the filesystem object */
 800929e:	4aa2      	ldr	r2, [pc, #648]	@ (8009528 <mount_volume+0x2b0>)
 80092a0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80092a2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80092a6:	62bb      	str	r3, [r7, #40]	@ 0x28
	if (!fs) return FR_NOT_ENABLED;		/* Is the filesystem object available? */
 80092a8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80092aa:	2b00      	cmp	r3, #0
 80092ac:	d101      	bne.n	80092b2 <mount_volume+0x3a>
 80092ae:	230c      	movs	r3, #12
 80092b0:	e1fd      	b.n	80096ae <mount_volume+0x436>
#if FF_FS_REENTRANT
	if (!lock_volume(fs, 1)) return FR_TIMEOUT;	/* Lock the volume, and system if needed */
#endif
	*rfs = fs;							/* Return pointer to the filesystem object */
 80092b2:	68bb      	ldr	r3, [r7, #8]
 80092b4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80092b6:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 80092b8:	79fb      	ldrb	r3, [r7, #7]
 80092ba:	f023 0301 	bic.w	r3, r3, #1
 80092be:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type != 0) {				/* If the volume has been mounted */
 80092c0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80092c2:	781b      	ldrb	r3, [r3, #0]
 80092c4:	2b00      	cmp	r3, #0
 80092c6:	d01a      	beq.n	80092fe <mount_volume+0x86>
		stat = disk_status(fs->pdrv);
 80092c8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80092ca:	785b      	ldrb	r3, [r3, #1]
 80092cc:	4618      	mov	r0, r3
 80092ce:	f7fe fc6f 	bl	8007bb0 <disk_status>
 80092d2:	4603      	mov	r3, r0
 80092d4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 80092d8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80092dc:	f003 0301 	and.w	r3, r3, #1
 80092e0:	2b00      	cmp	r3, #0
 80092e2:	d10c      	bne.n	80092fe <mount_volume+0x86>
			if (!FF_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 80092e4:	79fb      	ldrb	r3, [r7, #7]
 80092e6:	2b00      	cmp	r3, #0
 80092e8:	d007      	beq.n	80092fa <mount_volume+0x82>
 80092ea:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80092ee:	f003 0304 	and.w	r3, r3, #4
 80092f2:	2b00      	cmp	r3, #0
 80092f4:	d001      	beq.n	80092fa <mount_volume+0x82>
				return FR_WRITE_PROTECTED;
 80092f6:	230a      	movs	r3, #10
 80092f8:	e1d9      	b.n	80096ae <mount_volume+0x436>
			}
			return FR_OK;				/* The filesystem object is already valid */
 80092fa:	2300      	movs	r3, #0
 80092fc:	e1d7      	b.n	80096ae <mount_volume+0x436>
	}

	/* The filesystem object is not valid. */
	/* Following code attempts to mount the volume. (find an FAT volume, analyze the BPB and initialize the filesystem object) */

	fs->fs_type = 0;					/* Invalidate the filesystem object */
 80092fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009300:	2200      	movs	r2, #0
 8009302:	701a      	strb	r2, [r3, #0]
	stat = disk_initialize(fs->pdrv);	/* Initialize the volume hosting physical drive */
 8009304:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009306:	785b      	ldrb	r3, [r3, #1]
 8009308:	4618      	mov	r0, r3
 800930a:	f7fe fc79 	bl	8007c00 <disk_initialize>
 800930e:	4603      	mov	r3, r0
 8009310:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 8009314:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8009318:	f003 0301 	and.w	r3, r3, #1
 800931c:	2b00      	cmp	r3, #0
 800931e:	d001      	beq.n	8009324 <mount_volume+0xac>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8009320:	2303      	movs	r3, #3
 8009322:	e1c4      	b.n	80096ae <mount_volume+0x436>
	}
	if (!FF_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 8009324:	79fb      	ldrb	r3, [r7, #7]
 8009326:	2b00      	cmp	r3, #0
 8009328:	d007      	beq.n	800933a <mount_volume+0xc2>
 800932a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800932e:	f003 0304 	and.w	r3, r3, #4
 8009332:	2b00      	cmp	r3, #0
 8009334:	d001      	beq.n	800933a <mount_volume+0xc2>
		return FR_WRITE_PROTECTED;
 8009336:	230a      	movs	r3, #10
 8009338:	e1b9      	b.n	80096ae <mount_volume+0x436>
	}
#if FF_MAX_SS != FF_MIN_SS				/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->pdrv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
 800933a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800933c:	7858      	ldrb	r0, [r3, #1]
 800933e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009340:	330c      	adds	r3, #12
 8009342:	461a      	mov	r2, r3
 8009344:	2102      	movs	r1, #2
 8009346:	f7fe fce9 	bl	8007d1c <disk_ioctl>
 800934a:	4603      	mov	r3, r0
 800934c:	2b00      	cmp	r3, #0
 800934e:	d001      	beq.n	8009354 <mount_volume+0xdc>
 8009350:	2301      	movs	r3, #1
 8009352:	e1ac      	b.n	80096ae <mount_volume+0x436>
	if (SS(fs) > FF_MAX_SS || SS(fs) < FF_MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
 8009354:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009356:	899b      	ldrh	r3, [r3, #12]
 8009358:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800935c:	d80d      	bhi.n	800937a <mount_volume+0x102>
 800935e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009360:	899b      	ldrh	r3, [r3, #12]
 8009362:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009366:	d308      	bcc.n	800937a <mount_volume+0x102>
 8009368:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800936a:	899b      	ldrh	r3, [r3, #12]
 800936c:	461a      	mov	r2, r3
 800936e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009370:	899b      	ldrh	r3, [r3, #12]
 8009372:	3b01      	subs	r3, #1
 8009374:	4013      	ands	r3, r2
 8009376:	2b00      	cmp	r3, #0
 8009378:	d001      	beq.n	800937e <mount_volume+0x106>
 800937a:	2301      	movs	r3, #1
 800937c:	e197      	b.n	80096ae <mount_volume+0x436>
#endif

	/* Find an FAT volume on the hosting drive */
	fmt = find_volume(fs, LD2PT(vol));
 800937e:	2100      	movs	r1, #0
 8009380:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009382:	f7ff ff19 	bl	80091b8 <find_volume>
 8009386:	6338      	str	r0, [r7, #48]	@ 0x30
	if (fmt == 4) return FR_DISK_ERR;		/* An error occurred in the disk I/O layer */
 8009388:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800938a:	2b04      	cmp	r3, #4
 800938c:	d101      	bne.n	8009392 <mount_volume+0x11a>
 800938e:	2301      	movs	r3, #1
 8009390:	e18d      	b.n	80096ae <mount_volume+0x436>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 8009392:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009394:	2b01      	cmp	r3, #1
 8009396:	d901      	bls.n	800939c <mount_volume+0x124>
 8009398:	230d      	movs	r3, #13
 800939a:	e188      	b.n	80096ae <mount_volume+0x436>
	bsect = fs->winsect;					/* Volume offset in the hosting physical drive */
 800939c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800939e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80093a0:	623b      	str	r3, [r7, #32]
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* FF_FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 80093a2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80093a4:	3334      	adds	r3, #52	@ 0x34
 80093a6:	330b      	adds	r3, #11
 80093a8:	4618      	mov	r0, r3
 80093aa:	f7fe fd39 	bl	8007e20 <ld_word>
 80093ae:	4603      	mov	r3, r0
 80093b0:	461a      	mov	r2, r3
 80093b2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80093b4:	899b      	ldrh	r3, [r3, #12]
 80093b6:	429a      	cmp	r2, r3
 80093b8:	d001      	beq.n	80093be <mount_volume+0x146>
 80093ba:	230d      	movs	r3, #13
 80093bc:	e177      	b.n	80096ae <mount_volume+0x436>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 80093be:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80093c0:	3334      	adds	r3, #52	@ 0x34
 80093c2:	3316      	adds	r3, #22
 80093c4:	4618      	mov	r0, r3
 80093c6:	f7fe fd2b 	bl	8007e20 <ld_word>
 80093ca:	4603      	mov	r3, r0
 80093cc:	63bb      	str	r3, [r7, #56]	@ 0x38
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 80093ce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80093d0:	2b00      	cmp	r3, #0
 80093d2:	d106      	bne.n	80093e2 <mount_volume+0x16a>
 80093d4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80093d6:	3334      	adds	r3, #52	@ 0x34
 80093d8:	3324      	adds	r3, #36	@ 0x24
 80093da:	4618      	mov	r0, r3
 80093dc:	f7fe fd39 	bl	8007e52 <ld_dword>
 80093e0:	63b8      	str	r0, [r7, #56]	@ 0x38
		fs->fsize = fasize;
 80093e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80093e4:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80093e6:	61da      	str	r2, [r3, #28]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 80093e8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80093ea:	f893 2044 	ldrb.w	r2, [r3, #68]	@ 0x44
 80093ee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80093f0:	70da      	strb	r2, [r3, #3]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 80093f2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80093f4:	78db      	ldrb	r3, [r3, #3]
 80093f6:	2b01      	cmp	r3, #1
 80093f8:	d005      	beq.n	8009406 <mount_volume+0x18e>
 80093fa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80093fc:	78db      	ldrb	r3, [r3, #3]
 80093fe:	2b02      	cmp	r3, #2
 8009400:	d001      	beq.n	8009406 <mount_volume+0x18e>
 8009402:	230d      	movs	r3, #13
 8009404:	e153      	b.n	80096ae <mount_volume+0x436>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 8009406:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009408:	78db      	ldrb	r3, [r3, #3]
 800940a:	461a      	mov	r2, r3
 800940c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800940e:	fb02 f303 	mul.w	r3, r2, r3
 8009412:	63bb      	str	r3, [r7, #56]	@ 0x38

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 8009414:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009416:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800941a:	461a      	mov	r2, r3
 800941c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800941e:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 8009420:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009422:	895b      	ldrh	r3, [r3, #10]
 8009424:	2b00      	cmp	r3, #0
 8009426:	d008      	beq.n	800943a <mount_volume+0x1c2>
 8009428:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800942a:	895b      	ldrh	r3, [r3, #10]
 800942c:	461a      	mov	r2, r3
 800942e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009430:	895b      	ldrh	r3, [r3, #10]
 8009432:	3b01      	subs	r3, #1
 8009434:	4013      	ands	r3, r2
 8009436:	2b00      	cmp	r3, #0
 8009438:	d001      	beq.n	800943e <mount_volume+0x1c6>
 800943a:	230d      	movs	r3, #13
 800943c:	e137      	b.n	80096ae <mount_volume+0x436>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 800943e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009440:	3334      	adds	r3, #52	@ 0x34
 8009442:	3311      	adds	r3, #17
 8009444:	4618      	mov	r0, r3
 8009446:	f7fe fceb 	bl	8007e20 <ld_word>
 800944a:	4603      	mov	r3, r0
 800944c:	461a      	mov	r2, r3
 800944e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009450:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 8009452:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009454:	891b      	ldrh	r3, [r3, #8]
 8009456:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8009458:	8992      	ldrh	r2, [r2, #12]
 800945a:	0952      	lsrs	r2, r2, #5
 800945c:	b292      	uxth	r2, r2
 800945e:	fbb3 f1f2 	udiv	r1, r3, r2
 8009462:	fb01 f202 	mul.w	r2, r1, r2
 8009466:	1a9b      	subs	r3, r3, r2
 8009468:	b29b      	uxth	r3, r3
 800946a:	2b00      	cmp	r3, #0
 800946c:	d001      	beq.n	8009472 <mount_volume+0x1fa>
 800946e:	230d      	movs	r3, #13
 8009470:	e11d      	b.n	80096ae <mount_volume+0x436>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 8009472:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009474:	3334      	adds	r3, #52	@ 0x34
 8009476:	3313      	adds	r3, #19
 8009478:	4618      	mov	r0, r3
 800947a:	f7fe fcd1 	bl	8007e20 <ld_word>
 800947e:	4603      	mov	r3, r0
 8009480:	63fb      	str	r3, [r7, #60]	@ 0x3c
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 8009482:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009484:	2b00      	cmp	r3, #0
 8009486:	d106      	bne.n	8009496 <mount_volume+0x21e>
 8009488:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800948a:	3334      	adds	r3, #52	@ 0x34
 800948c:	3320      	adds	r3, #32
 800948e:	4618      	mov	r0, r3
 8009490:	f7fe fcdf 	bl	8007e52 <ld_dword>
 8009494:	63f8      	str	r0, [r7, #60]	@ 0x3c

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 8009496:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009498:	3334      	adds	r3, #52	@ 0x34
 800949a:	330e      	adds	r3, #14
 800949c:	4618      	mov	r0, r3
 800949e:	f7fe fcbf 	bl	8007e20 <ld_word>
 80094a2:	4603      	mov	r3, r0
 80094a4:	83fb      	strh	r3, [r7, #30]
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 80094a6:	8bfb      	ldrh	r3, [r7, #30]
 80094a8:	2b00      	cmp	r3, #0
 80094aa:	d101      	bne.n	80094b0 <mount_volume+0x238>
 80094ac:	230d      	movs	r3, #13
 80094ae:	e0fe      	b.n	80096ae <mount_volume+0x436>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 80094b0:	8bfa      	ldrh	r2, [r7, #30]
 80094b2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80094b4:	4413      	add	r3, r2
 80094b6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80094b8:	8911      	ldrh	r1, [r2, #8]
 80094ba:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80094bc:	8992      	ldrh	r2, [r2, #12]
 80094be:	0952      	lsrs	r2, r2, #5
 80094c0:	b292      	uxth	r2, r2
 80094c2:	fbb1 f2f2 	udiv	r2, r1, r2
 80094c6:	b292      	uxth	r2, r2
 80094c8:	4413      	add	r3, r2
 80094ca:	61bb      	str	r3, [r7, #24]
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 80094cc:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80094ce:	69bb      	ldr	r3, [r7, #24]
 80094d0:	429a      	cmp	r2, r3
 80094d2:	d201      	bcs.n	80094d8 <mount_volume+0x260>
 80094d4:	230d      	movs	r3, #13
 80094d6:	e0ea      	b.n	80096ae <mount_volume+0x436>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 80094d8:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80094da:	69bb      	ldr	r3, [r7, #24]
 80094dc:	1ad3      	subs	r3, r2, r3
 80094de:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80094e0:	8952      	ldrh	r2, [r2, #10]
 80094e2:	fbb3 f3f2 	udiv	r3, r3, r2
 80094e6:	617b      	str	r3, [r7, #20]
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 80094e8:	697b      	ldr	r3, [r7, #20]
 80094ea:	2b00      	cmp	r3, #0
 80094ec:	d101      	bne.n	80094f2 <mount_volume+0x27a>
 80094ee:	230d      	movs	r3, #13
 80094f0:	e0dd      	b.n	80096ae <mount_volume+0x436>
		fmt = 0;
 80094f2:	2300      	movs	r3, #0
 80094f4:	633b      	str	r3, [r7, #48]	@ 0x30
		if (nclst <= MAX_FAT32) fmt = FS_FAT32;
 80094f6:	697b      	ldr	r3, [r7, #20]
 80094f8:	4a0c      	ldr	r2, [pc, #48]	@ (800952c <mount_volume+0x2b4>)
 80094fa:	4293      	cmp	r3, r2
 80094fc:	d801      	bhi.n	8009502 <mount_volume+0x28a>
 80094fe:	2303      	movs	r3, #3
 8009500:	633b      	str	r3, [r7, #48]	@ 0x30
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 8009502:	697b      	ldr	r3, [r7, #20]
 8009504:	f64f 72f5 	movw	r2, #65525	@ 0xfff5
 8009508:	4293      	cmp	r3, r2
 800950a:	d801      	bhi.n	8009510 <mount_volume+0x298>
 800950c:	2302      	movs	r3, #2
 800950e:	633b      	str	r3, [r7, #48]	@ 0x30
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 8009510:	697b      	ldr	r3, [r7, #20]
 8009512:	f640 72f5 	movw	r2, #4085	@ 0xff5
 8009516:	4293      	cmp	r3, r2
 8009518:	d801      	bhi.n	800951e <mount_volume+0x2a6>
 800951a:	2301      	movs	r3, #1
 800951c:	633b      	str	r3, [r7, #48]	@ 0x30
		if (fmt == 0) return FR_NO_FILESYSTEM;
 800951e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009520:	2b00      	cmp	r3, #0
 8009522:	d105      	bne.n	8009530 <mount_volume+0x2b8>
 8009524:	230d      	movs	r3, #13
 8009526:	e0c2      	b.n	80096ae <mount_volume+0x436>
 8009528:	20005a00 	.word	0x20005a00
 800952c:	0ffffff5 	.word	0x0ffffff5

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 8009530:	697b      	ldr	r3, [r7, #20]
 8009532:	1c9a      	adds	r2, r3, #2
 8009534:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009536:	619a      	str	r2, [r3, #24]
		fs->volbase = bsect;							/* Volume start sector */
 8009538:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800953a:	6a3a      	ldr	r2, [r7, #32]
 800953c:	621a      	str	r2, [r3, #32]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800953e:	8bfa      	ldrh	r2, [r7, #30]
 8009540:	6a3b      	ldr	r3, [r7, #32]
 8009542:	441a      	add	r2, r3
 8009544:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009546:	625a      	str	r2, [r3, #36]	@ 0x24
		fs->database = bsect + sysect;					/* Data start sector */
 8009548:	6a3a      	ldr	r2, [r7, #32]
 800954a:	69bb      	ldr	r3, [r7, #24]
 800954c:	441a      	add	r2, r3
 800954e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009550:	62da      	str	r2, [r3, #44]	@ 0x2c
		if (fmt == FS_FAT32) {
 8009552:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009554:	2b03      	cmp	r3, #3
 8009556:	d11e      	bne.n	8009596 <mount_volume+0x31e>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 8009558:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800955a:	3334      	adds	r3, #52	@ 0x34
 800955c:	332a      	adds	r3, #42	@ 0x2a
 800955e:	4618      	mov	r0, r3
 8009560:	f7fe fc5e 	bl	8007e20 <ld_word>
 8009564:	4603      	mov	r3, r0
 8009566:	2b00      	cmp	r3, #0
 8009568:	d001      	beq.n	800956e <mount_volume+0x2f6>
 800956a:	230d      	movs	r3, #13
 800956c:	e09f      	b.n	80096ae <mount_volume+0x436>
			if (fs->n_rootdir != 0) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 800956e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009570:	891b      	ldrh	r3, [r3, #8]
 8009572:	2b00      	cmp	r3, #0
 8009574:	d001      	beq.n	800957a <mount_volume+0x302>
 8009576:	230d      	movs	r3, #13
 8009578:	e099      	b.n	80096ae <mount_volume+0x436>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 800957a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800957c:	3334      	adds	r3, #52	@ 0x34
 800957e:	332c      	adds	r3, #44	@ 0x2c
 8009580:	4618      	mov	r0, r3
 8009582:	f7fe fc66 	bl	8007e52 <ld_dword>
 8009586:	4602      	mov	r2, r0
 8009588:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800958a:	629a      	str	r2, [r3, #40]	@ 0x28
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 800958c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800958e:	699b      	ldr	r3, [r3, #24]
 8009590:	009b      	lsls	r3, r3, #2
 8009592:	637b      	str	r3, [r7, #52]	@ 0x34
 8009594:	e01e      	b.n	80095d4 <mount_volume+0x35c>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must not be 0) */
 8009596:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009598:	891b      	ldrh	r3, [r3, #8]
 800959a:	2b00      	cmp	r3, #0
 800959c:	d101      	bne.n	80095a2 <mount_volume+0x32a>
 800959e:	230d      	movs	r3, #13
 80095a0:	e085      	b.n	80096ae <mount_volume+0x436>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 80095a2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80095a4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80095a6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80095a8:	441a      	add	r2, r3
 80095aa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80095ac:	629a      	str	r2, [r3, #40]	@ 0x28
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 80095ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80095b0:	2b02      	cmp	r3, #2
 80095b2:	d103      	bne.n	80095bc <mount_volume+0x344>
 80095b4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80095b6:	699b      	ldr	r3, [r3, #24]
 80095b8:	005b      	lsls	r3, r3, #1
 80095ba:	e00a      	b.n	80095d2 <mount_volume+0x35a>
 80095bc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80095be:	699a      	ldr	r2, [r3, #24]
 80095c0:	4613      	mov	r3, r2
 80095c2:	005b      	lsls	r3, r3, #1
 80095c4:	4413      	add	r3, r2
 80095c6:	085a      	lsrs	r2, r3, #1
 80095c8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80095ca:	699b      	ldr	r3, [r3, #24]
 80095cc:	f003 0301 	and.w	r3, r3, #1
 80095d0:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 80095d2:	637b      	str	r3, [r7, #52]	@ 0x34
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 80095d4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80095d6:	69da      	ldr	r2, [r3, #28]
 80095d8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80095da:	899b      	ldrh	r3, [r3, #12]
 80095dc:	4619      	mov	r1, r3
 80095de:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80095e0:	440b      	add	r3, r1
 80095e2:	3b01      	subs	r3, #1
 80095e4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80095e6:	8989      	ldrh	r1, [r1, #12]
 80095e8:	fbb3 f3f1 	udiv	r3, r3, r1
 80095ec:	429a      	cmp	r2, r3
 80095ee:	d201      	bcs.n	80095f4 <mount_volume+0x37c>
 80095f0:	230d      	movs	r3, #13
 80095f2:	e05c      	b.n	80096ae <mount_volume+0x436>

#if !FF_FS_READONLY
		/* Get FSInfo if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 80095f4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80095f6:	f04f 32ff 	mov.w	r2, #4294967295
 80095fa:	615a      	str	r2, [r3, #20]
 80095fc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80095fe:	695a      	ldr	r2, [r3, #20]
 8009600:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009602:	611a      	str	r2, [r3, #16]
		fs->fsi_flag = 0x80;
 8009604:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009606:	2280      	movs	r2, #128	@ 0x80
 8009608:	715a      	strb	r2, [r3, #5]
#if (FF_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Allow to update FSInfo only if BPB_FSInfo32 == 1 */
 800960a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800960c:	2b03      	cmp	r3, #3
 800960e:	d13f      	bne.n	8009690 <mount_volume+0x418>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 8009610:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009612:	3334      	adds	r3, #52	@ 0x34
 8009614:	3330      	adds	r3, #48	@ 0x30
 8009616:	4618      	mov	r0, r3
 8009618:	f7fe fc02 	bl	8007e20 <ld_word>
 800961c:	4603      	mov	r3, r0
 800961e:	2b01      	cmp	r3, #1
 8009620:	d136      	bne.n	8009690 <mount_volume+0x418>
			&& move_window(fs, bsect + 1) == FR_OK)
 8009622:	6a3b      	ldr	r3, [r7, #32]
 8009624:	3301      	adds	r3, #1
 8009626:	4619      	mov	r1, r3
 8009628:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800962a:	f7fe fcda 	bl	8007fe2 <move_window>
 800962e:	4603      	mov	r3, r0
 8009630:	2b00      	cmp	r3, #0
 8009632:	d12d      	bne.n	8009690 <mount_volume+0x418>
		{
			fs->fsi_flag = 0;
 8009634:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009636:	2200      	movs	r2, #0
 8009638:	715a      	strb	r2, [r3, #5]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSInfo data if available */
 800963a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800963c:	3334      	adds	r3, #52	@ 0x34
 800963e:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 8009642:	4618      	mov	r0, r3
 8009644:	f7fe fbec 	bl	8007e20 <ld_word>
 8009648:	4603      	mov	r3, r0
 800964a:	461a      	mov	r2, r3
 800964c:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 8009650:	429a      	cmp	r2, r3
 8009652:	d11d      	bne.n	8009690 <mount_volume+0x418>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 8009654:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009656:	3334      	adds	r3, #52	@ 0x34
 8009658:	4618      	mov	r0, r3
 800965a:	f7fe fbfa 	bl	8007e52 <ld_dword>
 800965e:	4603      	mov	r3, r0
 8009660:	4a15      	ldr	r2, [pc, #84]	@ (80096b8 <mount_volume+0x440>)
 8009662:	4293      	cmp	r3, r2
 8009664:	d114      	bne.n	8009690 <mount_volume+0x418>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 8009666:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009668:	3334      	adds	r3, #52	@ 0x34
 800966a:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 800966e:	4618      	mov	r0, r3
 8009670:	f7fe fbef 	bl	8007e52 <ld_dword>
 8009674:	4603      	mov	r3, r0
 8009676:	4a11      	ldr	r2, [pc, #68]	@ (80096bc <mount_volume+0x444>)
 8009678:	4293      	cmp	r3, r2
 800967a:	d109      	bne.n	8009690 <mount_volume+0x418>
			{
#if (FF_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
#endif
#if (FF_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 800967c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800967e:	3334      	adds	r3, #52	@ 0x34
 8009680:	f503 73f6 	add.w	r3, r3, #492	@ 0x1ec
 8009684:	4618      	mov	r0, r3
 8009686:	f7fe fbe4 	bl	8007e52 <ld_dword>
 800968a:	4602      	mov	r2, r0
 800968c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800968e:	611a      	str	r2, [r3, #16]
		}
#endif	/* (FF_FS_NOFSINFO & 3) != 3 */
#endif	/* !FF_FS_READONLY */
	}

	fs->fs_type = (BYTE)fmt;/* FAT sub-type (the filesystem object gets valid) */
 8009690:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009692:	b2da      	uxtb	r2, r3
 8009694:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009696:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* Volume mount ID */
 8009698:	4b09      	ldr	r3, [pc, #36]	@ (80096c0 <mount_volume+0x448>)
 800969a:	881b      	ldrh	r3, [r3, #0]
 800969c:	3301      	adds	r3, #1
 800969e:	b29a      	uxth	r2, r3
 80096a0:	4b07      	ldr	r3, [pc, #28]	@ (80096c0 <mount_volume+0x448>)
 80096a2:	801a      	strh	r2, [r3, #0]
 80096a4:	4b06      	ldr	r3, [pc, #24]	@ (80096c0 <mount_volume+0x448>)
 80096a6:	881a      	ldrh	r2, [r3, #0]
 80096a8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80096aa:	80da      	strh	r2, [r3, #6]
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if FF_FS_LOCK				/* Clear file lock semaphores */
	clear_share(fs);
#endif
	return FR_OK;
 80096ac:	2300      	movs	r3, #0
}
 80096ae:	4618      	mov	r0, r3
 80096b0:	3740      	adds	r7, #64	@ 0x40
 80096b2:	46bd      	mov	sp, r7
 80096b4:	bd80      	pop	{r7, pc}
 80096b6:	bf00      	nop
 80096b8:	41615252 	.word	0x41615252
 80096bc:	61417272 	.word	0x61417272
 80096c0:	20005a08 	.word	0x20005a08

080096c4 <validate>:

static FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	FFOBJID* obj,			/* Pointer to the FFOBJID, the 1st member in the FIL/DIR structure, to check validity */
	FATFS** rfs				/* Pointer to pointer to the owner filesystem object to return */
)
{
 80096c4:	b580      	push	{r7, lr}
 80096c6:	b084      	sub	sp, #16
 80096c8:	af00      	add	r7, sp, #0
 80096ca:	6078      	str	r0, [r7, #4]
 80096cc:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 80096ce:	2309      	movs	r3, #9
 80096d0:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 80096d2:	687b      	ldr	r3, [r7, #4]
 80096d4:	2b00      	cmp	r3, #0
 80096d6:	d01c      	beq.n	8009712 <validate+0x4e>
 80096d8:	687b      	ldr	r3, [r7, #4]
 80096da:	681b      	ldr	r3, [r3, #0]
 80096dc:	2b00      	cmp	r3, #0
 80096de:	d018      	beq.n	8009712 <validate+0x4e>
 80096e0:	687b      	ldr	r3, [r7, #4]
 80096e2:	681b      	ldr	r3, [r3, #0]
 80096e4:	781b      	ldrb	r3, [r3, #0]
 80096e6:	2b00      	cmp	r3, #0
 80096e8:	d013      	beq.n	8009712 <validate+0x4e>
 80096ea:	687b      	ldr	r3, [r7, #4]
 80096ec:	889a      	ldrh	r2, [r3, #4]
 80096ee:	687b      	ldr	r3, [r7, #4]
 80096f0:	681b      	ldr	r3, [r3, #0]
 80096f2:	88db      	ldrh	r3, [r3, #6]
 80096f4:	429a      	cmp	r2, r3
 80096f6:	d10c      	bne.n	8009712 <validate+0x4e>
			}
		} else {	/* Could not take */
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->pdrv) & STA_NOINIT)) { /* Test if the hosting phsical drive is kept initialized */
 80096f8:	687b      	ldr	r3, [r7, #4]
 80096fa:	681b      	ldr	r3, [r3, #0]
 80096fc:	785b      	ldrb	r3, [r3, #1]
 80096fe:	4618      	mov	r0, r3
 8009700:	f7fe fa56 	bl	8007bb0 <disk_status>
 8009704:	4603      	mov	r3, r0
 8009706:	f003 0301 	and.w	r3, r3, #1
 800970a:	2b00      	cmp	r3, #0
 800970c:	d101      	bne.n	8009712 <validate+0x4e>
			res = FR_OK;
 800970e:	2300      	movs	r3, #0
 8009710:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*rfs = (res == FR_OK) ? obj->fs : 0;	/* Return corresponding filesystem object if it is valid */
 8009712:	7bfb      	ldrb	r3, [r7, #15]
 8009714:	2b00      	cmp	r3, #0
 8009716:	d102      	bne.n	800971e <validate+0x5a>
 8009718:	687b      	ldr	r3, [r7, #4]
 800971a:	681b      	ldr	r3, [r3, #0]
 800971c:	e000      	b.n	8009720 <validate+0x5c>
 800971e:	2300      	movs	r3, #0
 8009720:	683a      	ldr	r2, [r7, #0]
 8009722:	6013      	str	r3, [r2, #0]
	return res;
 8009724:	7bfb      	ldrb	r3, [r7, #15]
}
 8009726:	4618      	mov	r0, r3
 8009728:	3710      	adds	r7, #16
 800972a:	46bd      	mov	sp, r7
 800972c:	bd80      	pop	{r7, pc}
	...

08009730 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the filesystem object to be registered (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mount option: 0=Do not mount (delayed mount), 1=Mount immediately */
)
{
 8009730:	b580      	push	{r7, lr}
 8009732:	b088      	sub	sp, #32
 8009734:	af00      	add	r7, sp, #0
 8009736:	60f8      	str	r0, [r7, #12]
 8009738:	60b9      	str	r1, [r7, #8]
 800973a:	4613      	mov	r3, r2
 800973c:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800973e:	68bb      	ldr	r3, [r7, #8]
 8009740:	613b      	str	r3, [r7, #16]


	/* Get volume ID (logical drive number) */
	vol = get_ldnumber(&rp);
 8009742:	f107 0310 	add.w	r3, r7, #16
 8009746:	4618      	mov	r0, r3
 8009748:	f7ff fbf8 	bl	8008f3c <get_ldnumber>
 800974c:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 800974e:	69fb      	ldr	r3, [r7, #28]
 8009750:	2b00      	cmp	r3, #0
 8009752:	da01      	bge.n	8009758 <f_mount+0x28>
 8009754:	230b      	movs	r3, #11
 8009756:	e02e      	b.n	80097b6 <f_mount+0x86>
	cfs = FatFs[vol];			/* Pointer to the filesystem object of the volume */
 8009758:	4a19      	ldr	r2, [pc, #100]	@ (80097c0 <f_mount+0x90>)
 800975a:	69fb      	ldr	r3, [r7, #28]
 800975c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009760:	61bb      	str	r3, [r7, #24]

	if (cfs) {					/* Unregister current filesystem object if regsitered */
 8009762:	69bb      	ldr	r3, [r7, #24]
 8009764:	2b00      	cmp	r3, #0
 8009766:	d007      	beq.n	8009778 <f_mount+0x48>
		FatFs[vol] = 0;
 8009768:	4a15      	ldr	r2, [pc, #84]	@ (80097c0 <f_mount+0x90>)
 800976a:	69fb      	ldr	r3, [r7, #28]
 800976c:	2100      	movs	r1, #0
 800976e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		clear_share(cfs);
#endif
#if FF_FS_REENTRANT				/* Discard mutex of the current volume */
		ff_mutex_delete(vol);
#endif
		cfs->fs_type = 0;		/* Invalidate the filesystem object to be unregistered */
 8009772:	69bb      	ldr	r3, [r7, #24]
 8009774:	2200      	movs	r2, #0
 8009776:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {					/* Register new filesystem object */
 8009778:	68fb      	ldr	r3, [r7, #12]
 800977a:	2b00      	cmp	r3, #0
 800977c:	d00b      	beq.n	8009796 <f_mount+0x66>
		fs->pdrv = LD2PD(vol);	/* Volume hosting physical drive */
 800977e:	68fb      	ldr	r3, [r7, #12]
 8009780:	69fa      	ldr	r2, [r7, #28]
 8009782:	b2d2      	uxtb	r2, r2
 8009784:	705a      	strb	r2, [r3, #1]
			}
			SysLock = 1;		/* System mutex is ready */
		}
#endif
#endif
		fs->fs_type = 0;		/* Invalidate the new filesystem object */
 8009786:	68fb      	ldr	r3, [r7, #12]
 8009788:	2200      	movs	r2, #0
 800978a:	701a      	strb	r2, [r3, #0]
		FatFs[vol] = fs;		/* Register new fs object */
 800978c:	68fa      	ldr	r2, [r7, #12]
 800978e:	490c      	ldr	r1, [pc, #48]	@ (80097c0 <f_mount+0x90>)
 8009790:	69fb      	ldr	r3, [r7, #28]
 8009792:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	}

	if (opt == 0) return FR_OK;	/* Do not mount now, it will be mounted in subsequent file functions */
 8009796:	79fb      	ldrb	r3, [r7, #7]
 8009798:	2b00      	cmp	r3, #0
 800979a:	d101      	bne.n	80097a0 <f_mount+0x70>
 800979c:	2300      	movs	r3, #0
 800979e:	e00a      	b.n	80097b6 <f_mount+0x86>

	res = mount_volume(&path, &fs, 0);	/* Force mounted the volume */
 80097a0:	f107 010c 	add.w	r1, r7, #12
 80097a4:	f107 0308 	add.w	r3, r7, #8
 80097a8:	2200      	movs	r2, #0
 80097aa:	4618      	mov	r0, r3
 80097ac:	f7ff fd64 	bl	8009278 <mount_volume>
 80097b0:	4603      	mov	r3, r0
 80097b2:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 80097b4:	7dfb      	ldrb	r3, [r7, #23]
}
 80097b6:	4618      	mov	r0, r3
 80097b8:	3720      	adds	r7, #32
 80097ba:	46bd      	mov	sp, r7
 80097bc:	bd80      	pop	{r7, pc}
 80097be:	bf00      	nop
 80097c0:	20005a00 	.word	0x20005a00

080097c4 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and open mode flags */
)
{
 80097c4:	b580      	push	{r7, lr}
 80097c6:	b098      	sub	sp, #96	@ 0x60
 80097c8:	af00      	add	r7, sp, #0
 80097ca:	60f8      	str	r0, [r7, #12]
 80097cc:	60b9      	str	r1, [r7, #8]
 80097ce:	4613      	mov	r3, r2
 80097d0:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 80097d2:	68fb      	ldr	r3, [r7, #12]
 80097d4:	2b00      	cmp	r3, #0
 80097d6:	d101      	bne.n	80097dc <f_open+0x18>
 80097d8:	2309      	movs	r3, #9
 80097da:	e184      	b.n	8009ae6 <f_open+0x322>

	/* Get logical drive number */
	mode &= FF_FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND;
 80097dc:	79fb      	ldrb	r3, [r7, #7]
 80097de:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80097e2:	71fb      	strb	r3, [r7, #7]
	res = mount_volume(&path, &fs, mode);
 80097e4:	79fa      	ldrb	r2, [r7, #7]
 80097e6:	f107 0114 	add.w	r1, r7, #20
 80097ea:	f107 0308 	add.w	r3, r7, #8
 80097ee:	4618      	mov	r0, r3
 80097f0:	f7ff fd42 	bl	8009278 <mount_volume>
 80097f4:	4603      	mov	r3, r0
 80097f6:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
	if (res == FR_OK) {
 80097fa:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 80097fe:	2b00      	cmp	r3, #0
 8009800:	f040 8168 	bne.w	8009ad4 <f_open+0x310>
		dj.obj.fs = fs;
 8009804:	697b      	ldr	r3, [r7, #20]
 8009806:	61bb      	str	r3, [r7, #24]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 8009808:	68ba      	ldr	r2, [r7, #8]
 800980a:	f107 0318 	add.w	r3, r7, #24
 800980e:	4611      	mov	r1, r2
 8009810:	4618      	mov	r0, r3
 8009812:	f7ff fb1f 	bl	8008e54 <follow_path>
 8009816:	4603      	mov	r3, r0
 8009818:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
#if !FF_FS_READONLY	/* Read/Write configuration */
		if (res == FR_OK) {
 800981c:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8009820:	2b00      	cmp	r3, #0
 8009822:	d107      	bne.n	8009834 <f_open+0x70>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 8009824:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8009828:	b25b      	sxtb	r3, r3
 800982a:	2b00      	cmp	r3, #0
 800982c:	da02      	bge.n	8009834 <f_open+0x70>
				res = FR_INVALID_NAME;
 800982e:	2306      	movs	r3, #6
 8009830:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
				res = chk_share(&dj, (mode & ~FA_READ) ? 1 : 0);	/* Check if the file can be used */
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 8009834:	79fb      	ldrb	r3, [r7, #7]
 8009836:	f003 031c 	and.w	r3, r3, #28
 800983a:	2b00      	cmp	r3, #0
 800983c:	d077      	beq.n	800992e <f_open+0x16a>
			if (res != FR_OK) {					/* No file, create new */
 800983e:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8009842:	2b00      	cmp	r3, #0
 8009844:	d010      	beq.n	8009868 <f_open+0xa4>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 8009846:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800984a:	2b04      	cmp	r3, #4
 800984c:	d107      	bne.n	800985e <f_open+0x9a>
#if FF_FS_LOCK
					res = enq_share() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
#else
					res = dir_register(&dj);
 800984e:	f107 0318 	add.w	r3, r7, #24
 8009852:	4618      	mov	r0, r3
 8009854:	f7ff f9f4 	bl	8008c40 <dir_register>
 8009858:	4603      	mov	r3, r0
 800985a:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 800985e:	79fb      	ldrb	r3, [r7, #7]
 8009860:	f043 0308 	orr.w	r3, r3, #8
 8009864:	71fb      	strb	r3, [r7, #7]
 8009866:	e010      	b.n	800988a <f_open+0xc6>
			}
			else {								/* Any object with the same name is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 8009868:	7fbb      	ldrb	r3, [r7, #30]
 800986a:	f003 0311 	and.w	r3, r3, #17
 800986e:	2b00      	cmp	r3, #0
 8009870:	d003      	beq.n	800987a <f_open+0xb6>
					res = FR_DENIED;
 8009872:	2307      	movs	r3, #7
 8009874:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 8009878:	e007      	b.n	800988a <f_open+0xc6>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 800987a:	79fb      	ldrb	r3, [r7, #7]
 800987c:	f003 0304 	and.w	r3, r3, #4
 8009880:	2b00      	cmp	r3, #0
 8009882:	d002      	beq.n	800988a <f_open+0xc6>
 8009884:	2308      	movs	r3, #8
 8009886:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate the file if overwrite mode */
 800988a:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800988e:	2b00      	cmp	r3, #0
 8009890:	d167      	bne.n	8009962 <f_open+0x19e>
 8009892:	79fb      	ldrb	r3, [r7, #7]
 8009894:	f003 0308 	and.w	r3, r3, #8
 8009898:	2b00      	cmp	r3, #0
 800989a:	d062      	beq.n	8009962 <f_open+0x19e>
					}
				} else
#endif
				{
					/* Set directory entry initial state */
					tm = GET_FATTIME();					/* Set created time */
 800989c:	4b94      	ldr	r3, [pc, #592]	@ (8009af0 <f_open+0x32c>)
 800989e:	653b      	str	r3, [r7, #80]	@ 0x50
					st_dword(dj.dir + DIR_CrtTime, tm);
 80098a0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80098a2:	330e      	adds	r3, #14
 80098a4:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 80098a6:	4618      	mov	r0, r3
 80098a8:	f7fe fb11 	bl	8007ece <st_dword>
					st_dword(dj.dir + DIR_ModTime, tm);
 80098ac:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80098ae:	3316      	adds	r3, #22
 80098b0:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 80098b2:	4618      	mov	r0, r3
 80098b4:	f7fe fb0b 	bl	8007ece <st_dword>
					cl = ld_clust(fs, dj.dir);			/* Get current cluster chain */
 80098b8:	697b      	ldr	r3, [r7, #20]
 80098ba:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80098bc:	4611      	mov	r1, r2
 80098be:	4618      	mov	r0, r3
 80098c0:	f7ff f92a 	bl	8008b18 <ld_clust>
 80098c4:	64f8      	str	r0, [r7, #76]	@ 0x4c
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 80098c6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80098c8:	330b      	adds	r3, #11
 80098ca:	2220      	movs	r2, #32
 80098cc:	701a      	strb	r2, [r3, #0]
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 80098ce:	697b      	ldr	r3, [r7, #20]
 80098d0:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 80098d2:	2200      	movs	r2, #0
 80098d4:	4618      	mov	r0, r3
 80098d6:	f7ff f93e 	bl	8008b56 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 80098da:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80098dc:	331c      	adds	r3, #28
 80098de:	2100      	movs	r1, #0
 80098e0:	4618      	mov	r0, r3
 80098e2:	f7fe faf4 	bl	8007ece <st_dword>
					fs->wflag = 1;
 80098e6:	697b      	ldr	r3, [r7, #20]
 80098e8:	2201      	movs	r2, #1
 80098ea:	711a      	strb	r2, [r3, #4]
					if (cl != 0) {						/* Remove the cluster chain if exist */
 80098ec:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80098ee:	2b00      	cmp	r3, #0
 80098f0:	d037      	beq.n	8009962 <f_open+0x19e>
						sc = fs->winsect;
 80098f2:	697b      	ldr	r3, [r7, #20]
 80098f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80098f6:	64bb      	str	r3, [r7, #72]	@ 0x48
						res = remove_chain(&dj.obj, cl, 0);
 80098f8:	f107 0318 	add.w	r3, r7, #24
 80098fc:	2200      	movs	r2, #0
 80098fe:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 8009900:	4618      	mov	r0, r3
 8009902:	f7fe fe15 	bl	8008530 <remove_chain>
 8009906:	4603      	mov	r3, r0
 8009908:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
						if (res == FR_OK) {
 800990c:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8009910:	2b00      	cmp	r3, #0
 8009912:	d126      	bne.n	8009962 <f_open+0x19e>
							res = move_window(fs, sc);
 8009914:	697b      	ldr	r3, [r7, #20]
 8009916:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 8009918:	4618      	mov	r0, r3
 800991a:	f7fe fb62 	bl	8007fe2 <move_window>
 800991e:	4603      	mov	r3, r0
 8009920:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 8009924:	697b      	ldr	r3, [r7, #20]
 8009926:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8009928:	3a01      	subs	r2, #1
 800992a:	611a      	str	r2, [r3, #16]
 800992c:	e019      	b.n	8009962 <f_open+0x19e>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Is the object exsiting? */
 800992e:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8009932:	2b00      	cmp	r3, #0
 8009934:	d115      	bne.n	8009962 <f_open+0x19e>
				if (dj.obj.attr & AM_DIR) {		/* File open against a directory */
 8009936:	7fbb      	ldrb	r3, [r7, #30]
 8009938:	f003 0310 	and.w	r3, r3, #16
 800993c:	2b00      	cmp	r3, #0
 800993e:	d003      	beq.n	8009948 <f_open+0x184>
					res = FR_NO_FILE;
 8009940:	2304      	movs	r3, #4
 8009942:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 8009946:	e00c      	b.n	8009962 <f_open+0x19e>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* Write mode open against R/O file */
 8009948:	79fb      	ldrb	r3, [r7, #7]
 800994a:	f003 0302 	and.w	r3, r3, #2
 800994e:	2b00      	cmp	r3, #0
 8009950:	d007      	beq.n	8009962 <f_open+0x19e>
 8009952:	7fbb      	ldrb	r3, [r7, #30]
 8009954:	f003 0301 	and.w	r3, r3, #1
 8009958:	2b00      	cmp	r3, #0
 800995a:	d002      	beq.n	8009962 <f_open+0x19e>
						res = FR_DENIED;
 800995c:	2307      	movs	r3, #7
 800995e:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 8009962:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8009966:	2b00      	cmp	r3, #0
 8009968:	d10f      	bne.n	800998a <f_open+0x1c6>
			if (mode & FA_CREATE_ALWAYS) mode |= FA_MODIFIED;	/* Set file change flag if created or overwritten */
 800996a:	79fb      	ldrb	r3, [r7, #7]
 800996c:	f003 0308 	and.w	r3, r3, #8
 8009970:	2b00      	cmp	r3, #0
 8009972:	d003      	beq.n	800997c <f_open+0x1b8>
 8009974:	79fb      	ldrb	r3, [r7, #7]
 8009976:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800997a:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 800997c:	697b      	ldr	r3, [r7, #20]
 800997e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8009980:	68fb      	ldr	r3, [r7, #12]
 8009982:	621a      	str	r2, [r3, #32]
			fp->dir_ptr = dj.dir;
 8009984:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8009986:	68fb      	ldr	r3, [r7, #12]
 8009988:	625a      	str	r2, [r3, #36]	@ 0x24
				}
			}
		}
#endif

		if (res == FR_OK) {
 800998a:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800998e:	2b00      	cmp	r3, #0
 8009990:	f040 80a0 	bne.w	8009ad4 <f_open+0x310>
				fp->obj.c_ofs = dj.blk_ofs;
				init_alloc_info(fs, &fp->obj);
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 8009994:	697b      	ldr	r3, [r7, #20]
 8009996:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8009998:	4611      	mov	r1, r2
 800999a:	4618      	mov	r0, r3
 800999c:	f7ff f8bc 	bl	8008b18 <ld_clust>
 80099a0:	4602      	mov	r2, r0
 80099a2:	68fb      	ldr	r3, [r7, #12]
 80099a4:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 80099a6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80099a8:	331c      	adds	r3, #28
 80099aa:	4618      	mov	r0, r3
 80099ac:	f7fe fa51 	bl	8007e52 <ld_dword>
 80099b0:	4602      	mov	r2, r0
 80099b2:	68fb      	ldr	r3, [r7, #12]
 80099b4:	60da      	str	r2, [r3, #12]
			}
#if FF_USE_FASTSEEK
			fp->cltbl = 0;		/* Disable fast seek mode */
#endif
			fp->obj.fs = fs;	/* Validate the file object */
 80099b6:	697a      	ldr	r2, [r7, #20]
 80099b8:	68fb      	ldr	r3, [r7, #12]
 80099ba:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 80099bc:	697b      	ldr	r3, [r7, #20]
 80099be:	88da      	ldrh	r2, [r3, #6]
 80099c0:	68fb      	ldr	r3, [r7, #12]
 80099c2:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;	/* Set file access mode */
 80099c4:	68fb      	ldr	r3, [r7, #12]
 80099c6:	79fa      	ldrb	r2, [r7, #7]
 80099c8:	741a      	strb	r2, [r3, #16]
			fp->err = 0;		/* Clear error flag */
 80099ca:	68fb      	ldr	r3, [r7, #12]
 80099cc:	2200      	movs	r2, #0
 80099ce:	745a      	strb	r2, [r3, #17]
			fp->sect = 0;		/* Invalidate current data sector */
 80099d0:	68fb      	ldr	r3, [r7, #12]
 80099d2:	2200      	movs	r2, #0
 80099d4:	61da      	str	r2, [r3, #28]
			fp->fptr = 0;		/* Set file pointer top of the file */
 80099d6:	68fb      	ldr	r3, [r7, #12]
 80099d8:	2200      	movs	r2, #0
 80099da:	615a      	str	r2, [r3, #20]
#if !FF_FS_READONLY
#if !FF_FS_TINY
			memset(fp->buf, 0, sizeof fp->buf);	/* Clear sector buffer */
 80099dc:	68fb      	ldr	r3, [r7, #12]
 80099de:	3328      	adds	r3, #40	@ 0x28
 80099e0:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80099e4:	2100      	movs	r1, #0
 80099e6:	4618      	mov	r0, r3
 80099e8:	f00c face 	bl	8015f88 <memset>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 80099ec:	79fb      	ldrb	r3, [r7, #7]
 80099ee:	f003 0320 	and.w	r3, r3, #32
 80099f2:	2b00      	cmp	r3, #0
 80099f4:	d06e      	beq.n	8009ad4 <f_open+0x310>
 80099f6:	68fb      	ldr	r3, [r7, #12]
 80099f8:	68db      	ldr	r3, [r3, #12]
 80099fa:	2b00      	cmp	r3, #0
 80099fc:	d06a      	beq.n	8009ad4 <f_open+0x310>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 80099fe:	68fb      	ldr	r3, [r7, #12]
 8009a00:	68da      	ldr	r2, [r3, #12]
 8009a02:	68fb      	ldr	r3, [r7, #12]
 8009a04:	615a      	str	r2, [r3, #20]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 8009a06:	697b      	ldr	r3, [r7, #20]
 8009a08:	895b      	ldrh	r3, [r3, #10]
 8009a0a:	461a      	mov	r2, r3
 8009a0c:	697b      	ldr	r3, [r7, #20]
 8009a0e:	899b      	ldrh	r3, [r3, #12]
 8009a10:	fb02 f303 	mul.w	r3, r2, r3
 8009a14:	647b      	str	r3, [r7, #68]	@ 0x44
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 8009a16:	68fb      	ldr	r3, [r7, #12]
 8009a18:	689b      	ldr	r3, [r3, #8]
 8009a1a:	65bb      	str	r3, [r7, #88]	@ 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8009a1c:	68fb      	ldr	r3, [r7, #12]
 8009a1e:	68db      	ldr	r3, [r3, #12]
 8009a20:	657b      	str	r3, [r7, #84]	@ 0x54
 8009a22:	e016      	b.n	8009a52 <f_open+0x28e>
					clst = get_fat(&fp->obj, clst);
 8009a24:	68fb      	ldr	r3, [r7, #12]
 8009a26:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8009a28:	4618      	mov	r0, r3
 8009a2a:	f7fe fb94 	bl	8008156 <get_fat>
 8009a2e:	65b8      	str	r0, [r7, #88]	@ 0x58
					if (clst <= 1) res = FR_INT_ERR;
 8009a30:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8009a32:	2b01      	cmp	r3, #1
 8009a34:	d802      	bhi.n	8009a3c <f_open+0x278>
 8009a36:	2302      	movs	r3, #2
 8009a38:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 8009a3c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8009a3e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009a42:	d102      	bne.n	8009a4a <f_open+0x286>
 8009a44:	2301      	movs	r3, #1
 8009a46:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8009a4a:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8009a4c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009a4e:	1ad3      	subs	r3, r2, r3
 8009a50:	657b      	str	r3, [r7, #84]	@ 0x54
 8009a52:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8009a56:	2b00      	cmp	r3, #0
 8009a58:	d103      	bne.n	8009a62 <f_open+0x29e>
 8009a5a:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8009a5c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009a5e:	429a      	cmp	r2, r3
 8009a60:	d8e0      	bhi.n	8009a24 <f_open+0x260>
				}
				fp->clust = clst;
 8009a62:	68fb      	ldr	r3, [r7, #12]
 8009a64:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8009a66:	619a      	str	r2, [r3, #24]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 8009a68:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8009a6c:	2b00      	cmp	r3, #0
 8009a6e:	d131      	bne.n	8009ad4 <f_open+0x310>
 8009a70:	697b      	ldr	r3, [r7, #20]
 8009a72:	899b      	ldrh	r3, [r3, #12]
 8009a74:	461a      	mov	r2, r3
 8009a76:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009a78:	fbb3 f1f2 	udiv	r1, r3, r2
 8009a7c:	fb01 f202 	mul.w	r2, r1, r2
 8009a80:	1a9b      	subs	r3, r3, r2
 8009a82:	2b00      	cmp	r3, #0
 8009a84:	d026      	beq.n	8009ad4 <f_open+0x310>
					sc = clst2sect(fs, clst);
 8009a86:	697b      	ldr	r3, [r7, #20]
 8009a88:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8009a8a:	4618      	mov	r0, r3
 8009a8c:	f7fe fb44 	bl	8008118 <clst2sect>
 8009a90:	64b8      	str	r0, [r7, #72]	@ 0x48
					if (sc == 0) {
 8009a92:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009a94:	2b00      	cmp	r3, #0
 8009a96:	d103      	bne.n	8009aa0 <f_open+0x2dc>
						res = FR_INT_ERR;
 8009a98:	2302      	movs	r3, #2
 8009a9a:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 8009a9e:	e019      	b.n	8009ad4 <f_open+0x310>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 8009aa0:	697b      	ldr	r3, [r7, #20]
 8009aa2:	899b      	ldrh	r3, [r3, #12]
 8009aa4:	461a      	mov	r2, r3
 8009aa6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009aa8:	fbb3 f2f2 	udiv	r2, r3, r2
 8009aac:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009aae:	441a      	add	r2, r3
 8009ab0:	68fb      	ldr	r3, [r7, #12]
 8009ab2:	61da      	str	r2, [r3, #28]
#if !FF_FS_TINY
						if (disk_read(fs->pdrv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 8009ab4:	697b      	ldr	r3, [r7, #20]
 8009ab6:	7858      	ldrb	r0, [r3, #1]
 8009ab8:	68fb      	ldr	r3, [r7, #12]
 8009aba:	f103 0128 	add.w	r1, r3, #40	@ 0x28
 8009abe:	68fb      	ldr	r3, [r7, #12]
 8009ac0:	69da      	ldr	r2, [r3, #28]
 8009ac2:	2301      	movs	r3, #1
 8009ac4:	f7fe f8c4 	bl	8007c50 <disk_read>
 8009ac8:	4603      	mov	r3, r0
 8009aca:	2b00      	cmp	r3, #0
 8009acc:	d002      	beq.n	8009ad4 <f_open+0x310>
 8009ace:	2301      	movs	r3, #1
 8009ad0:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 8009ad4:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8009ad8:	2b00      	cmp	r3, #0
 8009ada:	d002      	beq.n	8009ae2 <f_open+0x31e>
 8009adc:	68fb      	ldr	r3, [r7, #12]
 8009ade:	2200      	movs	r2, #0
 8009ae0:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 8009ae2:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
}
 8009ae6:	4618      	mov	r0, r3
 8009ae8:	3760      	adds	r7, #96	@ 0x60
 8009aea:	46bd      	mov	sp, r7
 8009aec:	bd80      	pop	{r7, pc}
 8009aee:	bf00      	nop
 8009af0:	54210000 	.word	0x54210000

08009af4 <f_read>:
	FIL* fp, 	/* Open file to be read */
	void* buff,	/* Data buffer to store the read data */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Number of bytes read */
)
{
 8009af4:	b580      	push	{r7, lr}
 8009af6:	b08e      	sub	sp, #56	@ 0x38
 8009af8:	af00      	add	r7, sp, #0
 8009afa:	60f8      	str	r0, [r7, #12]
 8009afc:	60b9      	str	r1, [r7, #8]
 8009afe:	607a      	str	r2, [r7, #4]
 8009b00:	603b      	str	r3, [r7, #0]
	FATFS *fs;
	DWORD clst;
	LBA_t sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 8009b02:	68bb      	ldr	r3, [r7, #8]
 8009b04:	627b      	str	r3, [r7, #36]	@ 0x24


	*br = 0;	/* Clear read byte counter */
 8009b06:	683b      	ldr	r3, [r7, #0]
 8009b08:	2200      	movs	r2, #0
 8009b0a:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 8009b0c:	68fb      	ldr	r3, [r7, #12]
 8009b0e:	f107 0214 	add.w	r2, r7, #20
 8009b12:	4611      	mov	r1, r2
 8009b14:	4618      	mov	r0, r3
 8009b16:	f7ff fdd5 	bl	80096c4 <validate>
 8009b1a:	4603      	mov	r3, r0
 8009b1c:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8009b20:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8009b24:	2b00      	cmp	r3, #0
 8009b26:	d107      	bne.n	8009b38 <f_read+0x44>
 8009b28:	68fb      	ldr	r3, [r7, #12]
 8009b2a:	7c5b      	ldrb	r3, [r3, #17]
 8009b2c:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 8009b30:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8009b34:	2b00      	cmp	r3, #0
 8009b36:	d002      	beq.n	8009b3e <f_read+0x4a>
 8009b38:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8009b3c:	e129      	b.n	8009d92 <f_read+0x29e>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 8009b3e:	68fb      	ldr	r3, [r7, #12]
 8009b40:	7c1b      	ldrb	r3, [r3, #16]
 8009b42:	f003 0301 	and.w	r3, r3, #1
 8009b46:	2b00      	cmp	r3, #0
 8009b48:	d101      	bne.n	8009b4e <f_read+0x5a>
 8009b4a:	2307      	movs	r3, #7
 8009b4c:	e121      	b.n	8009d92 <f_read+0x29e>
	remain = fp->obj.objsize - fp->fptr;
 8009b4e:	68fb      	ldr	r3, [r7, #12]
 8009b50:	68da      	ldr	r2, [r3, #12]
 8009b52:	68fb      	ldr	r3, [r7, #12]
 8009b54:	695b      	ldr	r3, [r3, #20]
 8009b56:	1ad3      	subs	r3, r2, r3
 8009b58:	623b      	str	r3, [r7, #32]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 8009b5a:	687a      	ldr	r2, [r7, #4]
 8009b5c:	6a3b      	ldr	r3, [r7, #32]
 8009b5e:	429a      	cmp	r2, r3
 8009b60:	f240 8112 	bls.w	8009d88 <f_read+0x294>
 8009b64:	6a3b      	ldr	r3, [r7, #32]
 8009b66:	607b      	str	r3, [r7, #4]

	for ( ; btr > 0; btr -= rcnt, *br += rcnt, rbuff += rcnt, fp->fptr += rcnt) {	/* Repeat until btr bytes read */
 8009b68:	e10e      	b.n	8009d88 <f_read+0x294>
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 8009b6a:	68fb      	ldr	r3, [r7, #12]
 8009b6c:	695b      	ldr	r3, [r3, #20]
 8009b6e:	697a      	ldr	r2, [r7, #20]
 8009b70:	8992      	ldrh	r2, [r2, #12]
 8009b72:	fbb3 f1f2 	udiv	r1, r3, r2
 8009b76:	fb01 f202 	mul.w	r2, r1, r2
 8009b7a:	1a9b      	subs	r3, r3, r2
 8009b7c:	2b00      	cmp	r3, #0
 8009b7e:	f040 80c9 	bne.w	8009d14 <f_read+0x220>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 8009b82:	68fb      	ldr	r3, [r7, #12]
 8009b84:	695b      	ldr	r3, [r3, #20]
 8009b86:	697a      	ldr	r2, [r7, #20]
 8009b88:	8992      	ldrh	r2, [r2, #12]
 8009b8a:	fbb3 f3f2 	udiv	r3, r3, r2
 8009b8e:	697a      	ldr	r2, [r7, #20]
 8009b90:	8952      	ldrh	r2, [r2, #10]
 8009b92:	3a01      	subs	r2, #1
 8009b94:	4013      	ands	r3, r2
 8009b96:	61fb      	str	r3, [r7, #28]
			if (csect == 0) {					/* On the cluster boundary? */
 8009b98:	69fb      	ldr	r3, [r7, #28]
 8009b9a:	2b00      	cmp	r3, #0
 8009b9c:	d123      	bne.n	8009be6 <f_read+0xf2>
				if (fp->fptr == 0) {			/* On the top of the file? */
 8009b9e:	68fb      	ldr	r3, [r7, #12]
 8009ba0:	695b      	ldr	r3, [r3, #20]
 8009ba2:	2b00      	cmp	r3, #0
 8009ba4:	d103      	bne.n	8009bae <f_read+0xba>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 8009ba6:	68fb      	ldr	r3, [r7, #12]
 8009ba8:	689b      	ldr	r3, [r3, #8]
 8009baa:	633b      	str	r3, [r7, #48]	@ 0x30
 8009bac:	e007      	b.n	8009bbe <f_read+0xca>
					if (fp->cltbl) {
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 8009bae:	68fa      	ldr	r2, [r7, #12]
 8009bb0:	68fb      	ldr	r3, [r7, #12]
 8009bb2:	699b      	ldr	r3, [r3, #24]
 8009bb4:	4619      	mov	r1, r3
 8009bb6:	4610      	mov	r0, r2
 8009bb8:	f7fe facd 	bl	8008156 <get_fat>
 8009bbc:	6338      	str	r0, [r7, #48]	@ 0x30
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 8009bbe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009bc0:	2b01      	cmp	r3, #1
 8009bc2:	d804      	bhi.n	8009bce <f_read+0xda>
 8009bc4:	68fb      	ldr	r3, [r7, #12]
 8009bc6:	2202      	movs	r2, #2
 8009bc8:	745a      	strb	r2, [r3, #17]
 8009bca:	2302      	movs	r3, #2
 8009bcc:	e0e1      	b.n	8009d92 <f_read+0x29e>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8009bce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009bd0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009bd4:	d104      	bne.n	8009be0 <f_read+0xec>
 8009bd6:	68fb      	ldr	r3, [r7, #12]
 8009bd8:	2201      	movs	r2, #1
 8009bda:	745a      	strb	r2, [r3, #17]
 8009bdc:	2301      	movs	r3, #1
 8009bde:	e0d8      	b.n	8009d92 <f_read+0x29e>
				fp->clust = clst;				/* Update current cluster */
 8009be0:	68fb      	ldr	r3, [r7, #12]
 8009be2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009be4:	619a      	str	r2, [r3, #24]
			}
			sect = clst2sect(fs, fp->clust);	/* Get current sector */
 8009be6:	697a      	ldr	r2, [r7, #20]
 8009be8:	68fb      	ldr	r3, [r7, #12]
 8009bea:	699b      	ldr	r3, [r3, #24]
 8009bec:	4619      	mov	r1, r3
 8009bee:	4610      	mov	r0, r2
 8009bf0:	f7fe fa92 	bl	8008118 <clst2sect>
 8009bf4:	61b8      	str	r0, [r7, #24]
			if (sect == 0) ABORT(fs, FR_INT_ERR);
 8009bf6:	69bb      	ldr	r3, [r7, #24]
 8009bf8:	2b00      	cmp	r3, #0
 8009bfa:	d104      	bne.n	8009c06 <f_read+0x112>
 8009bfc:	68fb      	ldr	r3, [r7, #12]
 8009bfe:	2202      	movs	r2, #2
 8009c00:	745a      	strb	r2, [r3, #17]
 8009c02:	2302      	movs	r3, #2
 8009c04:	e0c5      	b.n	8009d92 <f_read+0x29e>
			sect += csect;
 8009c06:	69ba      	ldr	r2, [r7, #24]
 8009c08:	69fb      	ldr	r3, [r7, #28]
 8009c0a:	4413      	add	r3, r2
 8009c0c:	61bb      	str	r3, [r7, #24]
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 8009c0e:	697b      	ldr	r3, [r7, #20]
 8009c10:	899b      	ldrh	r3, [r3, #12]
 8009c12:	461a      	mov	r2, r3
 8009c14:	687b      	ldr	r3, [r7, #4]
 8009c16:	fbb3 f3f2 	udiv	r3, r3, r2
 8009c1a:	62bb      	str	r3, [r7, #40]	@ 0x28
			if (cc > 0) {						/* Read maximum contiguous sectors directly */
 8009c1c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009c1e:	2b00      	cmp	r3, #0
 8009c20:	d041      	beq.n	8009ca6 <f_read+0x1b2>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8009c22:	69fa      	ldr	r2, [r7, #28]
 8009c24:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009c26:	4413      	add	r3, r2
 8009c28:	697a      	ldr	r2, [r7, #20]
 8009c2a:	8952      	ldrh	r2, [r2, #10]
 8009c2c:	4293      	cmp	r3, r2
 8009c2e:	d905      	bls.n	8009c3c <f_read+0x148>
					cc = fs->csize - csect;
 8009c30:	697b      	ldr	r3, [r7, #20]
 8009c32:	895b      	ldrh	r3, [r3, #10]
 8009c34:	461a      	mov	r2, r3
 8009c36:	69fb      	ldr	r3, [r7, #28]
 8009c38:	1ad3      	subs	r3, r2, r3
 8009c3a:	62bb      	str	r3, [r7, #40]	@ 0x28
				}
				if (disk_read(fs->pdrv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8009c3c:	697b      	ldr	r3, [r7, #20]
 8009c3e:	7858      	ldrb	r0, [r3, #1]
 8009c40:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009c42:	69ba      	ldr	r2, [r7, #24]
 8009c44:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8009c46:	f7fe f803 	bl	8007c50 <disk_read>
 8009c4a:	4603      	mov	r3, r0
 8009c4c:	2b00      	cmp	r3, #0
 8009c4e:	d004      	beq.n	8009c5a <f_read+0x166>
 8009c50:	68fb      	ldr	r3, [r7, #12]
 8009c52:	2201      	movs	r2, #1
 8009c54:	745a      	strb	r2, [r3, #17]
 8009c56:	2301      	movs	r3, #1
 8009c58:	e09b      	b.n	8009d92 <f_read+0x29e>
#if FF_FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					memcpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 8009c5a:	68fb      	ldr	r3, [r7, #12]
 8009c5c:	7c1b      	ldrb	r3, [r3, #16]
 8009c5e:	b25b      	sxtb	r3, r3
 8009c60:	2b00      	cmp	r3, #0
 8009c62:	da18      	bge.n	8009c96 <f_read+0x1a2>
 8009c64:	68fb      	ldr	r3, [r7, #12]
 8009c66:	69da      	ldr	r2, [r3, #28]
 8009c68:	69bb      	ldr	r3, [r7, #24]
 8009c6a:	1ad3      	subs	r3, r2, r3
 8009c6c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8009c6e:	429a      	cmp	r2, r3
 8009c70:	d911      	bls.n	8009c96 <f_read+0x1a2>
					memcpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 8009c72:	68fb      	ldr	r3, [r7, #12]
 8009c74:	69da      	ldr	r2, [r3, #28]
 8009c76:	69bb      	ldr	r3, [r7, #24]
 8009c78:	1ad3      	subs	r3, r2, r3
 8009c7a:	697a      	ldr	r2, [r7, #20]
 8009c7c:	8992      	ldrh	r2, [r2, #12]
 8009c7e:	fb02 f303 	mul.w	r3, r2, r3
 8009c82:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009c84:	18d0      	adds	r0, r2, r3
 8009c86:	68fb      	ldr	r3, [r7, #12]
 8009c88:	f103 0128 	add.w	r1, r3, #40	@ 0x28
 8009c8c:	697b      	ldr	r3, [r7, #20]
 8009c8e:	899b      	ldrh	r3, [r3, #12]
 8009c90:	461a      	mov	r2, r3
 8009c92:	f00c f9fd 	bl	8016090 <memcpy>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 8009c96:	697b      	ldr	r3, [r7, #20]
 8009c98:	899b      	ldrh	r3, [r3, #12]
 8009c9a:	461a      	mov	r2, r3
 8009c9c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009c9e:	fb02 f303 	mul.w	r3, r2, r3
 8009ca2:	62fb      	str	r3, [r7, #44]	@ 0x2c
				continue;
 8009ca4:	e05c      	b.n	8009d60 <f_read+0x26c>
			}
#if !FF_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 8009ca6:	68fb      	ldr	r3, [r7, #12]
 8009ca8:	69db      	ldr	r3, [r3, #28]
 8009caa:	69ba      	ldr	r2, [r7, #24]
 8009cac:	429a      	cmp	r2, r3
 8009cae:	d02e      	beq.n	8009d0e <f_read+0x21a>
#if !FF_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 8009cb0:	68fb      	ldr	r3, [r7, #12]
 8009cb2:	7c1b      	ldrb	r3, [r3, #16]
 8009cb4:	b25b      	sxtb	r3, r3
 8009cb6:	2b00      	cmp	r3, #0
 8009cb8:	da18      	bge.n	8009cec <f_read+0x1f8>
					if (disk_write(fs->pdrv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8009cba:	697b      	ldr	r3, [r7, #20]
 8009cbc:	7858      	ldrb	r0, [r3, #1]
 8009cbe:	68fb      	ldr	r3, [r7, #12]
 8009cc0:	f103 0128 	add.w	r1, r3, #40	@ 0x28
 8009cc4:	68fb      	ldr	r3, [r7, #12]
 8009cc6:	69da      	ldr	r2, [r3, #28]
 8009cc8:	2301      	movs	r3, #1
 8009cca:	f7fd fff3 	bl	8007cb4 <disk_write>
 8009cce:	4603      	mov	r3, r0
 8009cd0:	2b00      	cmp	r3, #0
 8009cd2:	d004      	beq.n	8009cde <f_read+0x1ea>
 8009cd4:	68fb      	ldr	r3, [r7, #12]
 8009cd6:	2201      	movs	r2, #1
 8009cd8:	745a      	strb	r2, [r3, #17]
 8009cda:	2301      	movs	r3, #1
 8009cdc:	e059      	b.n	8009d92 <f_read+0x29e>
					fp->flag &= (BYTE)~FA_DIRTY;
 8009cde:	68fb      	ldr	r3, [r7, #12]
 8009ce0:	7c1b      	ldrb	r3, [r3, #16]
 8009ce2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009ce6:	b2da      	uxtb	r2, r3
 8009ce8:	68fb      	ldr	r3, [r7, #12]
 8009cea:	741a      	strb	r2, [r3, #16]
				}
#endif
				if (disk_read(fs->pdrv, fp->buf, sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 8009cec:	697b      	ldr	r3, [r7, #20]
 8009cee:	7858      	ldrb	r0, [r3, #1]
 8009cf0:	68fb      	ldr	r3, [r7, #12]
 8009cf2:	f103 0128 	add.w	r1, r3, #40	@ 0x28
 8009cf6:	2301      	movs	r3, #1
 8009cf8:	69ba      	ldr	r2, [r7, #24]
 8009cfa:	f7fd ffa9 	bl	8007c50 <disk_read>
 8009cfe:	4603      	mov	r3, r0
 8009d00:	2b00      	cmp	r3, #0
 8009d02:	d004      	beq.n	8009d0e <f_read+0x21a>
 8009d04:	68fb      	ldr	r3, [r7, #12]
 8009d06:	2201      	movs	r2, #1
 8009d08:	745a      	strb	r2, [r3, #17]
 8009d0a:	2301      	movs	r3, #1
 8009d0c:	e041      	b.n	8009d92 <f_read+0x29e>
			}
#endif
			fp->sect = sect;
 8009d0e:	68fb      	ldr	r3, [r7, #12]
 8009d10:	69ba      	ldr	r2, [r7, #24]
 8009d12:	61da      	str	r2, [r3, #28]
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes remains in the sector */
 8009d14:	697b      	ldr	r3, [r7, #20]
 8009d16:	899b      	ldrh	r3, [r3, #12]
 8009d18:	4618      	mov	r0, r3
 8009d1a:	68fb      	ldr	r3, [r7, #12]
 8009d1c:	695b      	ldr	r3, [r3, #20]
 8009d1e:	697a      	ldr	r2, [r7, #20]
 8009d20:	8992      	ldrh	r2, [r2, #12]
 8009d22:	fbb3 f1f2 	udiv	r1, r3, r2
 8009d26:	fb01 f202 	mul.w	r2, r1, r2
 8009d2a:	1a9b      	subs	r3, r3, r2
 8009d2c:	1ac3      	subs	r3, r0, r3
 8009d2e:	62fb      	str	r3, [r7, #44]	@ 0x2c
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 8009d30:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009d32:	687b      	ldr	r3, [r7, #4]
 8009d34:	429a      	cmp	r2, r3
 8009d36:	d901      	bls.n	8009d3c <f_read+0x248>
 8009d38:	687b      	ldr	r3, [r7, #4]
 8009d3a:	62fb      	str	r3, [r7, #44]	@ 0x2c
#if FF_FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		memcpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		memcpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 8009d3c:	68fb      	ldr	r3, [r7, #12]
 8009d3e:	f103 0128 	add.w	r1, r3, #40	@ 0x28
 8009d42:	68fb      	ldr	r3, [r7, #12]
 8009d44:	695b      	ldr	r3, [r3, #20]
 8009d46:	697a      	ldr	r2, [r7, #20]
 8009d48:	8992      	ldrh	r2, [r2, #12]
 8009d4a:	fbb3 f0f2 	udiv	r0, r3, r2
 8009d4e:	fb00 f202 	mul.w	r2, r0, r2
 8009d52:	1a9b      	subs	r3, r3, r2
 8009d54:	440b      	add	r3, r1
 8009d56:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009d58:	4619      	mov	r1, r3
 8009d5a:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8009d5c:	f00c f998 	bl	8016090 <memcpy>
	for ( ; btr > 0; btr -= rcnt, *br += rcnt, rbuff += rcnt, fp->fptr += rcnt) {	/* Repeat until btr bytes read */
 8009d60:	687a      	ldr	r2, [r7, #4]
 8009d62:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009d64:	1ad3      	subs	r3, r2, r3
 8009d66:	607b      	str	r3, [r7, #4]
 8009d68:	683b      	ldr	r3, [r7, #0]
 8009d6a:	681a      	ldr	r2, [r3, #0]
 8009d6c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009d6e:	441a      	add	r2, r3
 8009d70:	683b      	ldr	r3, [r7, #0]
 8009d72:	601a      	str	r2, [r3, #0]
 8009d74:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009d76:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009d78:	4413      	add	r3, r2
 8009d7a:	627b      	str	r3, [r7, #36]	@ 0x24
 8009d7c:	68fb      	ldr	r3, [r7, #12]
 8009d7e:	695a      	ldr	r2, [r3, #20]
 8009d80:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009d82:	441a      	add	r2, r3
 8009d84:	68fb      	ldr	r3, [r7, #12]
 8009d86:	615a      	str	r2, [r3, #20]
 8009d88:	687b      	ldr	r3, [r7, #4]
 8009d8a:	2b00      	cmp	r3, #0
 8009d8c:	f47f aeed 	bne.w	8009b6a <f_read+0x76>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 8009d90:	2300      	movs	r3, #0
}
 8009d92:	4618      	mov	r0, r3
 8009d94:	3738      	adds	r7, #56	@ 0x38
 8009d96:	46bd      	mov	sp, r7
 8009d98:	bd80      	pop	{r7, pc}

08009d9a <f_write>:
	FIL* fp,			/* Open file to be written */
	const void* buff,	/* Data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Number of bytes written */
)
{
 8009d9a:	b580      	push	{r7, lr}
 8009d9c:	b08c      	sub	sp, #48	@ 0x30
 8009d9e:	af00      	add	r7, sp, #0
 8009da0:	60f8      	str	r0, [r7, #12]
 8009da2:	60b9      	str	r1, [r7, #8]
 8009da4:	607a      	str	r2, [r7, #4]
 8009da6:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst;
	LBA_t sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 8009da8:	68bb      	ldr	r3, [r7, #8]
 8009daa:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 8009dac:	683b      	ldr	r3, [r7, #0]
 8009dae:	2200      	movs	r2, #0
 8009db0:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 8009db2:	68fb      	ldr	r3, [r7, #12]
 8009db4:	f107 0210 	add.w	r2, r7, #16
 8009db8:	4611      	mov	r1, r2
 8009dba:	4618      	mov	r0, r3
 8009dbc:	f7ff fc82 	bl	80096c4 <validate>
 8009dc0:	4603      	mov	r3, r0
 8009dc2:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8009dc6:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8009dca:	2b00      	cmp	r3, #0
 8009dcc:	d107      	bne.n	8009dde <f_write+0x44>
 8009dce:	68fb      	ldr	r3, [r7, #12]
 8009dd0:	7c5b      	ldrb	r3, [r3, #17]
 8009dd2:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 8009dd6:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8009dda:	2b00      	cmp	r3, #0
 8009ddc:	d002      	beq.n	8009de4 <f_write+0x4a>
 8009dde:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8009de2:	e15e      	b.n	800a0a2 <f_write+0x308>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 8009de4:	68fb      	ldr	r3, [r7, #12]
 8009de6:	7c1b      	ldrb	r3, [r3, #16]
 8009de8:	f003 0302 	and.w	r3, r3, #2
 8009dec:	2b00      	cmp	r3, #0
 8009dee:	d101      	bne.n	8009df4 <f_write+0x5a>
 8009df0:	2307      	movs	r3, #7
 8009df2:	e156      	b.n	800a0a2 <f_write+0x308>

	/* Check fptr wrap-around (file size cannot reach 4 GiB at FAT volume) */
	if ((!FF_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 8009df4:	68fb      	ldr	r3, [r7, #12]
 8009df6:	695a      	ldr	r2, [r3, #20]
 8009df8:	687b      	ldr	r3, [r7, #4]
 8009dfa:	441a      	add	r2, r3
 8009dfc:	68fb      	ldr	r3, [r7, #12]
 8009dfe:	695b      	ldr	r3, [r3, #20]
 8009e00:	429a      	cmp	r2, r3
 8009e02:	f080 8140 	bcs.w	800a086 <f_write+0x2ec>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 8009e06:	68fb      	ldr	r3, [r7, #12]
 8009e08:	695b      	ldr	r3, [r3, #20]
 8009e0a:	43db      	mvns	r3, r3
 8009e0c:	607b      	str	r3, [r7, #4]
	}

	for ( ; btw > 0; btw -= wcnt, *bw += wcnt, wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize) {	/* Repeat until all data written */
 8009e0e:	e13a      	b.n	800a086 <f_write+0x2ec>
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 8009e10:	68fb      	ldr	r3, [r7, #12]
 8009e12:	695b      	ldr	r3, [r3, #20]
 8009e14:	693a      	ldr	r2, [r7, #16]
 8009e16:	8992      	ldrh	r2, [r2, #12]
 8009e18:	fbb3 f1f2 	udiv	r1, r3, r2
 8009e1c:	fb01 f202 	mul.w	r2, r1, r2
 8009e20:	1a9b      	subs	r3, r3, r2
 8009e22:	2b00      	cmp	r3, #0
 8009e24:	f040 80e5 	bne.w	8009ff2 <f_write+0x258>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 8009e28:	68fb      	ldr	r3, [r7, #12]
 8009e2a:	695b      	ldr	r3, [r3, #20]
 8009e2c:	693a      	ldr	r2, [r7, #16]
 8009e2e:	8992      	ldrh	r2, [r2, #12]
 8009e30:	fbb3 f3f2 	udiv	r3, r3, r2
 8009e34:	693a      	ldr	r2, [r7, #16]
 8009e36:	8952      	ldrh	r2, [r2, #10]
 8009e38:	3a01      	subs	r2, #1
 8009e3a:	4013      	ands	r3, r2
 8009e3c:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 8009e3e:	69bb      	ldr	r3, [r7, #24]
 8009e40:	2b00      	cmp	r3, #0
 8009e42:	d137      	bne.n	8009eb4 <f_write+0x11a>
				if (fp->fptr == 0) {		/* On the top of the file? */
 8009e44:	68fb      	ldr	r3, [r7, #12]
 8009e46:	695b      	ldr	r3, [r3, #20]
 8009e48:	2b00      	cmp	r3, #0
 8009e4a:	d10c      	bne.n	8009e66 <f_write+0xcc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 8009e4c:	68fb      	ldr	r3, [r7, #12]
 8009e4e:	689b      	ldr	r3, [r3, #8]
 8009e50:	62bb      	str	r3, [r7, #40]	@ 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 8009e52:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009e54:	2b00      	cmp	r3, #0
 8009e56:	d10e      	bne.n	8009e76 <f_write+0xdc>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 8009e58:	68fb      	ldr	r3, [r7, #12]
 8009e5a:	2100      	movs	r1, #0
 8009e5c:	4618      	mov	r0, r3
 8009e5e:	f7fe fbcc 	bl	80085fa <create_chain>
 8009e62:	62b8      	str	r0, [r7, #40]	@ 0x28
 8009e64:	e007      	b.n	8009e76 <f_write+0xdc>
					if (fp->cltbl) {
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 8009e66:	68fa      	ldr	r2, [r7, #12]
 8009e68:	68fb      	ldr	r3, [r7, #12]
 8009e6a:	699b      	ldr	r3, [r3, #24]
 8009e6c:	4619      	mov	r1, r3
 8009e6e:	4610      	mov	r0, r2
 8009e70:	f7fe fbc3 	bl	80085fa <create_chain>
 8009e74:	62b8      	str	r0, [r7, #40]	@ 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8009e76:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009e78:	2b00      	cmp	r3, #0
 8009e7a:	f000 8109 	beq.w	800a090 <f_write+0x2f6>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 8009e7e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009e80:	2b01      	cmp	r3, #1
 8009e82:	d104      	bne.n	8009e8e <f_write+0xf4>
 8009e84:	68fb      	ldr	r3, [r7, #12]
 8009e86:	2202      	movs	r2, #2
 8009e88:	745a      	strb	r2, [r3, #17]
 8009e8a:	2302      	movs	r3, #2
 8009e8c:	e109      	b.n	800a0a2 <f_write+0x308>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8009e8e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009e90:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009e94:	d104      	bne.n	8009ea0 <f_write+0x106>
 8009e96:	68fb      	ldr	r3, [r7, #12]
 8009e98:	2201      	movs	r2, #1
 8009e9a:	745a      	strb	r2, [r3, #17]
 8009e9c:	2301      	movs	r3, #1
 8009e9e:	e100      	b.n	800a0a2 <f_write+0x308>
				fp->clust = clst;			/* Update current cluster */
 8009ea0:	68fb      	ldr	r3, [r7, #12]
 8009ea2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8009ea4:	619a      	str	r2, [r3, #24]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 8009ea6:	68fb      	ldr	r3, [r7, #12]
 8009ea8:	689b      	ldr	r3, [r3, #8]
 8009eaa:	2b00      	cmp	r3, #0
 8009eac:	d102      	bne.n	8009eb4 <f_write+0x11a>
 8009eae:	68fb      	ldr	r3, [r7, #12]
 8009eb0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8009eb2:	609a      	str	r2, [r3, #8]
			}
#if FF_FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 8009eb4:	68fb      	ldr	r3, [r7, #12]
 8009eb6:	7c1b      	ldrb	r3, [r3, #16]
 8009eb8:	b25b      	sxtb	r3, r3
 8009eba:	2b00      	cmp	r3, #0
 8009ebc:	da18      	bge.n	8009ef0 <f_write+0x156>
				if (disk_write(fs->pdrv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8009ebe:	693b      	ldr	r3, [r7, #16]
 8009ec0:	7858      	ldrb	r0, [r3, #1]
 8009ec2:	68fb      	ldr	r3, [r7, #12]
 8009ec4:	f103 0128 	add.w	r1, r3, #40	@ 0x28
 8009ec8:	68fb      	ldr	r3, [r7, #12]
 8009eca:	69da      	ldr	r2, [r3, #28]
 8009ecc:	2301      	movs	r3, #1
 8009ece:	f7fd fef1 	bl	8007cb4 <disk_write>
 8009ed2:	4603      	mov	r3, r0
 8009ed4:	2b00      	cmp	r3, #0
 8009ed6:	d004      	beq.n	8009ee2 <f_write+0x148>
 8009ed8:	68fb      	ldr	r3, [r7, #12]
 8009eda:	2201      	movs	r2, #1
 8009edc:	745a      	strb	r2, [r3, #17]
 8009ede:	2301      	movs	r3, #1
 8009ee0:	e0df      	b.n	800a0a2 <f_write+0x308>
				fp->flag &= (BYTE)~FA_DIRTY;
 8009ee2:	68fb      	ldr	r3, [r7, #12]
 8009ee4:	7c1b      	ldrb	r3, [r3, #16]
 8009ee6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009eea:	b2da      	uxtb	r2, r3
 8009eec:	68fb      	ldr	r3, [r7, #12]
 8009eee:	741a      	strb	r2, [r3, #16]
			}
#endif
			sect = clst2sect(fs, fp->clust);	/* Get current sector */
 8009ef0:	693a      	ldr	r2, [r7, #16]
 8009ef2:	68fb      	ldr	r3, [r7, #12]
 8009ef4:	699b      	ldr	r3, [r3, #24]
 8009ef6:	4619      	mov	r1, r3
 8009ef8:	4610      	mov	r0, r2
 8009efa:	f7fe f90d 	bl	8008118 <clst2sect>
 8009efe:	6178      	str	r0, [r7, #20]
			if (sect == 0) ABORT(fs, FR_INT_ERR);
 8009f00:	697b      	ldr	r3, [r7, #20]
 8009f02:	2b00      	cmp	r3, #0
 8009f04:	d104      	bne.n	8009f10 <f_write+0x176>
 8009f06:	68fb      	ldr	r3, [r7, #12]
 8009f08:	2202      	movs	r2, #2
 8009f0a:	745a      	strb	r2, [r3, #17]
 8009f0c:	2302      	movs	r3, #2
 8009f0e:	e0c8      	b.n	800a0a2 <f_write+0x308>
			sect += csect;
 8009f10:	697a      	ldr	r2, [r7, #20]
 8009f12:	69bb      	ldr	r3, [r7, #24]
 8009f14:	4413      	add	r3, r2
 8009f16:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 8009f18:	693b      	ldr	r3, [r7, #16]
 8009f1a:	899b      	ldrh	r3, [r3, #12]
 8009f1c:	461a      	mov	r2, r3
 8009f1e:	687b      	ldr	r3, [r7, #4]
 8009f20:	fbb3 f3f2 	udiv	r3, r3, r2
 8009f24:	623b      	str	r3, [r7, #32]
			if (cc > 0) {					/* Write maximum contiguous sectors directly */
 8009f26:	6a3b      	ldr	r3, [r7, #32]
 8009f28:	2b00      	cmp	r3, #0
 8009f2a:	d043      	beq.n	8009fb4 <f_write+0x21a>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8009f2c:	69ba      	ldr	r2, [r7, #24]
 8009f2e:	6a3b      	ldr	r3, [r7, #32]
 8009f30:	4413      	add	r3, r2
 8009f32:	693a      	ldr	r2, [r7, #16]
 8009f34:	8952      	ldrh	r2, [r2, #10]
 8009f36:	4293      	cmp	r3, r2
 8009f38:	d905      	bls.n	8009f46 <f_write+0x1ac>
					cc = fs->csize - csect;
 8009f3a:	693b      	ldr	r3, [r7, #16]
 8009f3c:	895b      	ldrh	r3, [r3, #10]
 8009f3e:	461a      	mov	r2, r3
 8009f40:	69bb      	ldr	r3, [r7, #24]
 8009f42:	1ad3      	subs	r3, r2, r3
 8009f44:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->pdrv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8009f46:	693b      	ldr	r3, [r7, #16]
 8009f48:	7858      	ldrb	r0, [r3, #1]
 8009f4a:	6a3b      	ldr	r3, [r7, #32]
 8009f4c:	697a      	ldr	r2, [r7, #20]
 8009f4e:	69f9      	ldr	r1, [r7, #28]
 8009f50:	f7fd feb0 	bl	8007cb4 <disk_write>
 8009f54:	4603      	mov	r3, r0
 8009f56:	2b00      	cmp	r3, #0
 8009f58:	d004      	beq.n	8009f64 <f_write+0x1ca>
 8009f5a:	68fb      	ldr	r3, [r7, #12]
 8009f5c:	2201      	movs	r2, #1
 8009f5e:	745a      	strb	r2, [r3, #17]
 8009f60:	2301      	movs	r3, #1
 8009f62:	e09e      	b.n	800a0a2 <f_write+0x308>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					memcpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 8009f64:	68fb      	ldr	r3, [r7, #12]
 8009f66:	69da      	ldr	r2, [r3, #28]
 8009f68:	697b      	ldr	r3, [r7, #20]
 8009f6a:	1ad3      	subs	r3, r2, r3
 8009f6c:	6a3a      	ldr	r2, [r7, #32]
 8009f6e:	429a      	cmp	r2, r3
 8009f70:	d918      	bls.n	8009fa4 <f_write+0x20a>
					memcpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 8009f72:	68fb      	ldr	r3, [r7, #12]
 8009f74:	f103 0028 	add.w	r0, r3, #40	@ 0x28
 8009f78:	68fb      	ldr	r3, [r7, #12]
 8009f7a:	69da      	ldr	r2, [r3, #28]
 8009f7c:	697b      	ldr	r3, [r7, #20]
 8009f7e:	1ad3      	subs	r3, r2, r3
 8009f80:	693a      	ldr	r2, [r7, #16]
 8009f82:	8992      	ldrh	r2, [r2, #12]
 8009f84:	fb02 f303 	mul.w	r3, r2, r3
 8009f88:	69fa      	ldr	r2, [r7, #28]
 8009f8a:	18d1      	adds	r1, r2, r3
 8009f8c:	693b      	ldr	r3, [r7, #16]
 8009f8e:	899b      	ldrh	r3, [r3, #12]
 8009f90:	461a      	mov	r2, r3
 8009f92:	f00c f87d 	bl	8016090 <memcpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 8009f96:	68fb      	ldr	r3, [r7, #12]
 8009f98:	7c1b      	ldrb	r3, [r3, #16]
 8009f9a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009f9e:	b2da      	uxtb	r2, r3
 8009fa0:	68fb      	ldr	r3, [r7, #12]
 8009fa2:	741a      	strb	r2, [r3, #16]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 8009fa4:	693b      	ldr	r3, [r7, #16]
 8009fa6:	899b      	ldrh	r3, [r3, #12]
 8009fa8:	461a      	mov	r2, r3
 8009faa:	6a3b      	ldr	r3, [r7, #32]
 8009fac:	fb02 f303 	mul.w	r3, r2, r3
 8009fb0:	627b      	str	r3, [r7, #36]	@ 0x24
				continue;
 8009fb2:	e04b      	b.n	800a04c <f_write+0x2b2>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8009fb4:	68fb      	ldr	r3, [r7, #12]
 8009fb6:	69db      	ldr	r3, [r3, #28]
 8009fb8:	697a      	ldr	r2, [r7, #20]
 8009fba:	429a      	cmp	r2, r3
 8009fbc:	d016      	beq.n	8009fec <f_write+0x252>
				fp->fptr < fp->obj.objsize &&
 8009fbe:	68fb      	ldr	r3, [r7, #12]
 8009fc0:	695a      	ldr	r2, [r3, #20]
 8009fc2:	68fb      	ldr	r3, [r7, #12]
 8009fc4:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8009fc6:	429a      	cmp	r2, r3
 8009fc8:	d210      	bcs.n	8009fec <f_write+0x252>
				disk_read(fs->pdrv, fp->buf, sect, 1) != RES_OK) {
 8009fca:	693b      	ldr	r3, [r7, #16]
 8009fcc:	7858      	ldrb	r0, [r3, #1]
 8009fce:	68fb      	ldr	r3, [r7, #12]
 8009fd0:	f103 0128 	add.w	r1, r3, #40	@ 0x28
 8009fd4:	2301      	movs	r3, #1
 8009fd6:	697a      	ldr	r2, [r7, #20]
 8009fd8:	f7fd fe3a 	bl	8007c50 <disk_read>
 8009fdc:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 8009fde:	2b00      	cmp	r3, #0
 8009fe0:	d004      	beq.n	8009fec <f_write+0x252>
					ABORT(fs, FR_DISK_ERR);
 8009fe2:	68fb      	ldr	r3, [r7, #12]
 8009fe4:	2201      	movs	r2, #1
 8009fe6:	745a      	strb	r2, [r3, #17]
 8009fe8:	2301      	movs	r3, #1
 8009fea:	e05a      	b.n	800a0a2 <f_write+0x308>
			}
#endif
			fp->sect = sect;
 8009fec:	68fb      	ldr	r3, [r7, #12]
 8009fee:	697a      	ldr	r2, [r7, #20]
 8009ff0:	61da      	str	r2, [r3, #28]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes remains in the sector */
 8009ff2:	693b      	ldr	r3, [r7, #16]
 8009ff4:	899b      	ldrh	r3, [r3, #12]
 8009ff6:	4618      	mov	r0, r3
 8009ff8:	68fb      	ldr	r3, [r7, #12]
 8009ffa:	695b      	ldr	r3, [r3, #20]
 8009ffc:	693a      	ldr	r2, [r7, #16]
 8009ffe:	8992      	ldrh	r2, [r2, #12]
 800a000:	fbb3 f1f2 	udiv	r1, r3, r2
 800a004:	fb01 f202 	mul.w	r2, r1, r2
 800a008:	1a9b      	subs	r3, r3, r2
 800a00a:	1ac3      	subs	r3, r0, r3
 800a00c:	627b      	str	r3, [r7, #36]	@ 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 800a00e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a010:	687b      	ldr	r3, [r7, #4]
 800a012:	429a      	cmp	r2, r3
 800a014:	d901      	bls.n	800a01a <f_write+0x280>
 800a016:	687b      	ldr	r3, [r7, #4]
 800a018:	627b      	str	r3, [r7, #36]	@ 0x24
#if FF_FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		memcpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		memcpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 800a01a:	68fb      	ldr	r3, [r7, #12]
 800a01c:	f103 0128 	add.w	r1, r3, #40	@ 0x28
 800a020:	68fb      	ldr	r3, [r7, #12]
 800a022:	695b      	ldr	r3, [r3, #20]
 800a024:	693a      	ldr	r2, [r7, #16]
 800a026:	8992      	ldrh	r2, [r2, #12]
 800a028:	fbb3 f0f2 	udiv	r0, r3, r2
 800a02c:	fb00 f202 	mul.w	r2, r0, r2
 800a030:	1a9b      	subs	r3, r3, r2
 800a032:	440b      	add	r3, r1
 800a034:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a036:	69f9      	ldr	r1, [r7, #28]
 800a038:	4618      	mov	r0, r3
 800a03a:	f00c f829 	bl	8016090 <memcpy>
		fp->flag |= FA_DIRTY;
 800a03e:	68fb      	ldr	r3, [r7, #12]
 800a040:	7c1b      	ldrb	r3, [r3, #16]
 800a042:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800a046:	b2da      	uxtb	r2, r3
 800a048:	68fb      	ldr	r3, [r7, #12]
 800a04a:	741a      	strb	r2, [r3, #16]
	for ( ; btw > 0; btw -= wcnt, *bw += wcnt, wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize) {	/* Repeat until all data written */
 800a04c:	687a      	ldr	r2, [r7, #4]
 800a04e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a050:	1ad3      	subs	r3, r2, r3
 800a052:	607b      	str	r3, [r7, #4]
 800a054:	683b      	ldr	r3, [r7, #0]
 800a056:	681a      	ldr	r2, [r3, #0]
 800a058:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a05a:	441a      	add	r2, r3
 800a05c:	683b      	ldr	r3, [r7, #0]
 800a05e:	601a      	str	r2, [r3, #0]
 800a060:	69fa      	ldr	r2, [r7, #28]
 800a062:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a064:	4413      	add	r3, r2
 800a066:	61fb      	str	r3, [r7, #28]
 800a068:	68fb      	ldr	r3, [r7, #12]
 800a06a:	695a      	ldr	r2, [r3, #20]
 800a06c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a06e:	441a      	add	r2, r3
 800a070:	68fb      	ldr	r3, [r7, #12]
 800a072:	615a      	str	r2, [r3, #20]
 800a074:	68fb      	ldr	r3, [r7, #12]
 800a076:	68da      	ldr	r2, [r3, #12]
 800a078:	68fb      	ldr	r3, [r7, #12]
 800a07a:	695b      	ldr	r3, [r3, #20]
 800a07c:	429a      	cmp	r2, r3
 800a07e:	bf38      	it	cc
 800a080:	461a      	movcc	r2, r3
 800a082:	68fb      	ldr	r3, [r7, #12]
 800a084:	60da      	str	r2, [r3, #12]
 800a086:	687b      	ldr	r3, [r7, #4]
 800a088:	2b00      	cmp	r3, #0
 800a08a:	f47f aec1 	bne.w	8009e10 <f_write+0x76>
 800a08e:	e000      	b.n	800a092 <f_write+0x2f8>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800a090:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 800a092:	68fb      	ldr	r3, [r7, #12]
 800a094:	7c1b      	ldrb	r3, [r3, #16]
 800a096:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a09a:	b2da      	uxtb	r2, r3
 800a09c:	68fb      	ldr	r3, [r7, #12]
 800a09e:	741a      	strb	r2, [r3, #16]

	LEAVE_FF(fs, FR_OK);
 800a0a0:	2300      	movs	r3, #0
}
 800a0a2:	4618      	mov	r0, r3
 800a0a4:	3730      	adds	r7, #48	@ 0x30
 800a0a6:	46bd      	mov	sp, r7
 800a0a8:	bd80      	pop	{r7, pc}
	...

0800a0ac <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Open file to be synced */
)
{
 800a0ac:	b580      	push	{r7, lr}
 800a0ae:	b086      	sub	sp, #24
 800a0b0:	af00      	add	r7, sp, #0
 800a0b2:	6078      	str	r0, [r7, #4]
	FATFS *fs;
	DWORD tm;
	BYTE *dir;


	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 800a0b4:	687b      	ldr	r3, [r7, #4]
 800a0b6:	f107 0208 	add.w	r2, r7, #8
 800a0ba:	4611      	mov	r1, r2
 800a0bc:	4618      	mov	r0, r3
 800a0be:	f7ff fb01 	bl	80096c4 <validate>
 800a0c2:	4603      	mov	r3, r0
 800a0c4:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800a0c6:	7dfb      	ldrb	r3, [r7, #23]
 800a0c8:	2b00      	cmp	r3, #0
 800a0ca:	d167      	bne.n	800a19c <f_sync+0xf0>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 800a0cc:	687b      	ldr	r3, [r7, #4]
 800a0ce:	7c1b      	ldrb	r3, [r3, #16]
 800a0d0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a0d4:	2b00      	cmp	r3, #0
 800a0d6:	d061      	beq.n	800a19c <f_sync+0xf0>
#if !FF_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 800a0d8:	687b      	ldr	r3, [r7, #4]
 800a0da:	7c1b      	ldrb	r3, [r3, #16]
 800a0dc:	b25b      	sxtb	r3, r3
 800a0de:	2b00      	cmp	r3, #0
 800a0e0:	da15      	bge.n	800a10e <f_sync+0x62>
				if (disk_write(fs->pdrv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 800a0e2:	68bb      	ldr	r3, [r7, #8]
 800a0e4:	7858      	ldrb	r0, [r3, #1]
 800a0e6:	687b      	ldr	r3, [r7, #4]
 800a0e8:	f103 0128 	add.w	r1, r3, #40	@ 0x28
 800a0ec:	687b      	ldr	r3, [r7, #4]
 800a0ee:	69da      	ldr	r2, [r3, #28]
 800a0f0:	2301      	movs	r3, #1
 800a0f2:	f7fd fddf 	bl	8007cb4 <disk_write>
 800a0f6:	4603      	mov	r3, r0
 800a0f8:	2b00      	cmp	r3, #0
 800a0fa:	d001      	beq.n	800a100 <f_sync+0x54>
 800a0fc:	2301      	movs	r3, #1
 800a0fe:	e04e      	b.n	800a19e <f_sync+0xf2>
				fp->flag &= (BYTE)~FA_DIRTY;
 800a100:	687b      	ldr	r3, [r7, #4]
 800a102:	7c1b      	ldrb	r3, [r3, #16]
 800a104:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a108:	b2da      	uxtb	r2, r3
 800a10a:	687b      	ldr	r3, [r7, #4]
 800a10c:	741a      	strb	r2, [r3, #16]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 800a10e:	4b26      	ldr	r3, [pc, #152]	@ (800a1a8 <f_sync+0xfc>)
 800a110:	613b      	str	r3, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 800a112:	68ba      	ldr	r2, [r7, #8]
 800a114:	687b      	ldr	r3, [r7, #4]
 800a116:	6a1b      	ldr	r3, [r3, #32]
 800a118:	4619      	mov	r1, r3
 800a11a:	4610      	mov	r0, r2
 800a11c:	f7fd ff61 	bl	8007fe2 <move_window>
 800a120:	4603      	mov	r3, r0
 800a122:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 800a124:	7dfb      	ldrb	r3, [r7, #23]
 800a126:	2b00      	cmp	r3, #0
 800a128:	d138      	bne.n	800a19c <f_sync+0xf0>
					dir = fp->dir_ptr;
 800a12a:	687b      	ldr	r3, [r7, #4]
 800a12c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a12e:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive attribute to indicate that the file has been changed */
 800a130:	68fb      	ldr	r3, [r7, #12]
 800a132:	330b      	adds	r3, #11
 800a134:	781a      	ldrb	r2, [r3, #0]
 800a136:	68fb      	ldr	r3, [r7, #12]
 800a138:	330b      	adds	r3, #11
 800a13a:	f042 0220 	orr.w	r2, r2, #32
 800a13e:	b2d2      	uxtb	r2, r2
 800a140:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation information  */
 800a142:	687b      	ldr	r3, [r7, #4]
 800a144:	6818      	ldr	r0, [r3, #0]
 800a146:	687b      	ldr	r3, [r7, #4]
 800a148:	689b      	ldr	r3, [r3, #8]
 800a14a:	461a      	mov	r2, r3
 800a14c:	68f9      	ldr	r1, [r7, #12]
 800a14e:	f7fe fd02 	bl	8008b56 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 800a152:	68fb      	ldr	r3, [r7, #12]
 800a154:	f103 021c 	add.w	r2, r3, #28
 800a158:	687b      	ldr	r3, [r7, #4]
 800a15a:	68db      	ldr	r3, [r3, #12]
 800a15c:	4619      	mov	r1, r3
 800a15e:	4610      	mov	r0, r2
 800a160:	f7fd feb5 	bl	8007ece <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 800a164:	68fb      	ldr	r3, [r7, #12]
 800a166:	3316      	adds	r3, #22
 800a168:	6939      	ldr	r1, [r7, #16]
 800a16a:	4618      	mov	r0, r3
 800a16c:	f7fd feaf 	bl	8007ece <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 800a170:	68fb      	ldr	r3, [r7, #12]
 800a172:	3312      	adds	r3, #18
 800a174:	2100      	movs	r1, #0
 800a176:	4618      	mov	r0, r3
 800a178:	f7fd fe8e 	bl	8007e98 <st_word>
					fs->wflag = 1;
 800a17c:	68bb      	ldr	r3, [r7, #8]
 800a17e:	2201      	movs	r2, #1
 800a180:	711a      	strb	r2, [r3, #4]
					res = sync_fs(fs);					/* Restore it to the directory */
 800a182:	68bb      	ldr	r3, [r7, #8]
 800a184:	4618      	mov	r0, r3
 800a186:	f7fd ff59 	bl	800803c <sync_fs>
 800a18a:	4603      	mov	r3, r0
 800a18c:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 800a18e:	687b      	ldr	r3, [r7, #4]
 800a190:	7c1b      	ldrb	r3, [r3, #16]
 800a192:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800a196:	b2da      	uxtb	r2, r3
 800a198:	687b      	ldr	r3, [r7, #4]
 800a19a:	741a      	strb	r2, [r3, #16]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 800a19c:	7dfb      	ldrb	r3, [r7, #23]
}
 800a19e:	4618      	mov	r0, r3
 800a1a0:	3718      	adds	r7, #24
 800a1a2:	46bd      	mov	sp, r7
 800a1a4:	bd80      	pop	{r7, pc}
 800a1a6:	bf00      	nop
 800a1a8:	54210000 	.word	0x54210000

0800a1ac <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Open file to be closed */
)
{
 800a1ac:	b580      	push	{r7, lr}
 800a1ae:	b084      	sub	sp, #16
 800a1b0:	af00      	add	r7, sp, #0
 800a1b2:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !FF_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 800a1b4:	6878      	ldr	r0, [r7, #4]
 800a1b6:	f7ff ff79 	bl	800a0ac <f_sync>
 800a1ba:	4603      	mov	r3, r0
 800a1bc:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 800a1be:	7bfb      	ldrb	r3, [r7, #15]
 800a1c0:	2b00      	cmp	r3, #0
 800a1c2:	d10e      	bne.n	800a1e2 <f_close+0x36>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 800a1c4:	687b      	ldr	r3, [r7, #4]
 800a1c6:	f107 0208 	add.w	r2, r7, #8
 800a1ca:	4611      	mov	r1, r2
 800a1cc:	4618      	mov	r0, r3
 800a1ce:	f7ff fa79 	bl	80096c4 <validate>
 800a1d2:	4603      	mov	r3, r0
 800a1d4:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800a1d6:	7bfb      	ldrb	r3, [r7, #15]
 800a1d8:	2b00      	cmp	r3, #0
 800a1da:	d102      	bne.n	800a1e2 <f_close+0x36>
#if FF_FS_LOCK
			res = dec_share(fp->obj.lockid);		/* Decrement file open counter */
			if (res == FR_OK) fp->obj.fs = 0;	/* Invalidate file object */
#else
			fp->obj.fs = 0;	/* Invalidate file object */
 800a1dc:	687b      	ldr	r3, [r7, #4]
 800a1de:	2200      	movs	r2, #0
 800a1e0:	601a      	str	r2, [r3, #0]
#if FF_FS_REENTRANT
			unlock_volume(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 800a1e2:	7bfb      	ldrb	r3, [r7, #15]
}
 800a1e4:	4618      	mov	r0, r3
 800a1e6:	3710      	adds	r7, #16
 800a1e8:	46bd      	mov	sp, r7
 800a1ea:	bd80      	pop	{r7, pc}

0800a1ec <create_partition>:
	BYTE drv,			/* Physical drive number */
	const LBA_t plst[],	/* Partition list */
	BYTE sys,			/* System ID for each partition (for only MBR) */
	BYTE *buf			/* Working buffer for a sector */
)
{
 800a1ec:	b580      	push	{r7, lr}
 800a1ee:	b08e      	sub	sp, #56	@ 0x38
 800a1f0:	af00      	add	r7, sp, #0
 800a1f2:	60b9      	str	r1, [r7, #8]
 800a1f4:	607b      	str	r3, [r7, #4]
 800a1f6:	4603      	mov	r3, r0
 800a1f8:	73fb      	strb	r3, [r7, #15]
 800a1fa:	4613      	mov	r3, r2
 800a1fc:	73bb      	strb	r3, [r7, #14]
	DWORD sz_drv32, nxt_alloc32, sz_part32;
	BYTE *pte;
	BYTE hd, n_hd, sc, n_sc;

	/* Get physical drive size */
	if (disk_ioctl(drv, GET_SECTOR_COUNT, &sz_drv) != RES_OK) return FR_DISK_ERR;
 800a1fe:	f107 0210 	add.w	r2, r7, #16
 800a202:	7bfb      	ldrb	r3, [r7, #15]
 800a204:	2101      	movs	r1, #1
 800a206:	4618      	mov	r0, r3
 800a208:	f7fd fd88 	bl	8007d1c <disk_ioctl>
 800a20c:	4603      	mov	r3, r0
 800a20e:	2b00      	cmp	r3, #0
 800a210:	d001      	beq.n	800a216 <create_partition+0x2a>
 800a212:	2301      	movs	r3, #1
 800a214:	e108      	b.n	800a428 <create_partition+0x23c>
		if (disk_write(drv, buf, 0, 1) != RES_OK) return FR_DISK_ERR;

	} else
#endif
	{	/* Create partitions in MBR format */
		sz_drv32 = (DWORD)sz_drv;
 800a216:	693b      	ldr	r3, [r7, #16]
 800a218:	623b      	str	r3, [r7, #32]
		n_sc = N_SEC_TRACK;				/* Determine drive CHS without any consideration of the drive geometry */
 800a21a:	233f      	movs	r3, #63	@ 0x3f
 800a21c:	77fb      	strb	r3, [r7, #31]
		for (n_hd = 8; n_hd != 0 && sz_drv32 / n_hd / n_sc > 1024; n_hd *= 2) ;
 800a21e:	2308      	movs	r3, #8
 800a220:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800a224:	e004      	b.n	800a230 <create_partition+0x44>
 800a226:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800a22a:	005b      	lsls	r3, r3, #1
 800a22c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800a230:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800a234:	2b00      	cmp	r3, #0
 800a236:	d00a      	beq.n	800a24e <create_partition+0x62>
 800a238:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800a23c:	6a3a      	ldr	r2, [r7, #32]
 800a23e:	fbb2 f2f3 	udiv	r2, r2, r3
 800a242:	7ffb      	ldrb	r3, [r7, #31]
 800a244:	fbb2 f3f3 	udiv	r3, r2, r3
 800a248:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800a24c:	d8eb      	bhi.n	800a226 <create_partition+0x3a>
		if (n_hd == 0) n_hd = 255;		/* Number of heads needs to be <256 */
 800a24e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800a252:	2b00      	cmp	r3, #0
 800a254:	d102      	bne.n	800a25c <create_partition+0x70>
 800a256:	23ff      	movs	r3, #255	@ 0xff
 800a258:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

		memset(buf, 0, FF_MAX_SS);		/* Clear MBR */
 800a25c:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 800a260:	2100      	movs	r1, #0
 800a262:	6878      	ldr	r0, [r7, #4]
 800a264:	f00b fe90 	bl	8015f88 <memset>
		pte = buf + MBR_Table;	/* Partition table in the MBR */
 800a268:	687b      	ldr	r3, [r7, #4]
 800a26a:	f503 73df 	add.w	r3, r3, #446	@ 0x1be
 800a26e:	62bb      	str	r3, [r7, #40]	@ 0x28
		for (i = 0, nxt_alloc32 = n_sc; i < 4 && nxt_alloc32 != 0 && nxt_alloc32 < sz_drv32; i++, nxt_alloc32 += sz_part32) {
 800a270:	2300      	movs	r3, #0
 800a272:	637b      	str	r3, [r7, #52]	@ 0x34
 800a274:	7ffb      	ldrb	r3, [r7, #31]
 800a276:	633b      	str	r3, [r7, #48]	@ 0x30
 800a278:	e0b5      	b.n	800a3e6 <create_partition+0x1fa>
			sz_part32 = (DWORD)plst[i];	/* Get partition size */
 800a27a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a27c:	009b      	lsls	r3, r3, #2
 800a27e:	68ba      	ldr	r2, [r7, #8]
 800a280:	4413      	add	r3, r2
 800a282:	681b      	ldr	r3, [r3, #0]
 800a284:	62fb      	str	r3, [r7, #44]	@ 0x2c
			if (sz_part32 <= 100) sz_part32 = (sz_part32 == 100) ? sz_drv32 : sz_drv32 / 100 * sz_part32;	/* Size in percentage? */
 800a286:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a288:	2b64      	cmp	r3, #100	@ 0x64
 800a28a:	d80d      	bhi.n	800a2a8 <create_partition+0xbc>
 800a28c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a28e:	2b64      	cmp	r3, #100	@ 0x64
 800a290:	d008      	beq.n	800a2a4 <create_partition+0xb8>
 800a292:	6a3b      	ldr	r3, [r7, #32]
 800a294:	4a66      	ldr	r2, [pc, #408]	@ (800a430 <create_partition+0x244>)
 800a296:	fba2 2303 	umull	r2, r3, r2, r3
 800a29a:	095b      	lsrs	r3, r3, #5
 800a29c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800a29e:	fb02 f303 	mul.w	r3, r2, r3
 800a2a2:	e000      	b.n	800a2a6 <create_partition+0xba>
 800a2a4:	6a3b      	ldr	r3, [r7, #32]
 800a2a6:	62fb      	str	r3, [r7, #44]	@ 0x2c
			if (nxt_alloc32 + sz_part32 > sz_drv32 || nxt_alloc32 + sz_part32 < nxt_alloc32) sz_part32 = sz_drv32 - nxt_alloc32;	/* Clip at drive size */
 800a2a8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a2aa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a2ac:	4413      	add	r3, r2
 800a2ae:	6a3a      	ldr	r2, [r7, #32]
 800a2b0:	429a      	cmp	r2, r3
 800a2b2:	d305      	bcc.n	800a2c0 <create_partition+0xd4>
 800a2b4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a2b6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a2b8:	4413      	add	r3, r2
 800a2ba:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a2bc:	429a      	cmp	r2, r3
 800a2be:	d903      	bls.n	800a2c8 <create_partition+0xdc>
 800a2c0:	6a3a      	ldr	r2, [r7, #32]
 800a2c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a2c4:	1ad3      	subs	r3, r2, r3
 800a2c6:	62fb      	str	r3, [r7, #44]	@ 0x2c
			if (sz_part32 == 0) break;	/* End of table or no sector to allocate? */
 800a2c8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a2ca:	2b00      	cmp	r3, #0
 800a2cc:	f000 8097 	beq.w	800a3fe <create_partition+0x212>

			st_dword(pte + PTE_StLba, nxt_alloc32);	/* Start LBA */
 800a2d0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a2d2:	3308      	adds	r3, #8
 800a2d4:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800a2d6:	4618      	mov	r0, r3
 800a2d8:	f7fd fdf9 	bl	8007ece <st_dword>
			st_dword(pte + PTE_SizLba, sz_part32);	/* Number of sectors */
 800a2dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a2de:	330c      	adds	r3, #12
 800a2e0:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800a2e2:	4618      	mov	r0, r3
 800a2e4:	f7fd fdf3 	bl	8007ece <st_dword>
			pte[PTE_System] = sys;					/* System type */
 800a2e8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a2ea:	3304      	adds	r3, #4
 800a2ec:	7bba      	ldrb	r2, [r7, #14]
 800a2ee:	701a      	strb	r2, [r3, #0]

			cy = (UINT)(nxt_alloc32 / n_sc / n_hd);	/* Start cylinder */
 800a2f0:	7ffb      	ldrb	r3, [r7, #31]
 800a2f2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a2f4:	fbb2 f2f3 	udiv	r2, r2, r3
 800a2f8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800a2fc:	fbb2 f3f3 	udiv	r3, r2, r3
 800a300:	61bb      	str	r3, [r7, #24]
			hd = (BYTE)(nxt_alloc32 / n_sc % n_hd);	/* Start head */
 800a302:	7ffb      	ldrb	r3, [r7, #31]
 800a304:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a306:	fbb2 f3f3 	udiv	r3, r2, r3
 800a30a:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 800a30e:	fbb3 f1f2 	udiv	r1, r3, r2
 800a312:	fb01 f202 	mul.w	r2, r1, r2
 800a316:	1a9b      	subs	r3, r3, r2
 800a318:	75fb      	strb	r3, [r7, #23]
			sc = (BYTE)(nxt_alloc32 % n_sc + 1);	/* Start sector */
 800a31a:	7ffa      	ldrb	r2, [r7, #31]
 800a31c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a31e:	fbb3 f1f2 	udiv	r1, r3, r2
 800a322:	fb01 f202 	mul.w	r2, r1, r2
 800a326:	1a9b      	subs	r3, r3, r2
 800a328:	b2db      	uxtb	r3, r3
 800a32a:	3301      	adds	r3, #1
 800a32c:	75bb      	strb	r3, [r7, #22]
			pte[PTE_StHead] = hd;
 800a32e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a330:	3301      	adds	r3, #1
 800a332:	7dfa      	ldrb	r2, [r7, #23]
 800a334:	701a      	strb	r2, [r3, #0]
			pte[PTE_StSec] = (BYTE)((cy >> 2 & 0xC0) | sc);
 800a336:	69bb      	ldr	r3, [r7, #24]
 800a338:	089b      	lsrs	r3, r3, #2
 800a33a:	b2db      	uxtb	r3, r3
 800a33c:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800a340:	b2d9      	uxtb	r1, r3
 800a342:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a344:	3302      	adds	r3, #2
 800a346:	7dba      	ldrb	r2, [r7, #22]
 800a348:	430a      	orrs	r2, r1
 800a34a:	b2d2      	uxtb	r2, r2
 800a34c:	701a      	strb	r2, [r3, #0]
			pte[PTE_StCyl] = (BYTE)cy;
 800a34e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a350:	3303      	adds	r3, #3
 800a352:	69ba      	ldr	r2, [r7, #24]
 800a354:	b2d2      	uxtb	r2, r2
 800a356:	701a      	strb	r2, [r3, #0]

			cy = (UINT)((nxt_alloc32 + sz_part32 - 1) / n_sc / n_hd);	/* End cylinder */
 800a358:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a35a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a35c:	4413      	add	r3, r2
 800a35e:	1e5a      	subs	r2, r3, #1
 800a360:	7ffb      	ldrb	r3, [r7, #31]
 800a362:	fbb2 f2f3 	udiv	r2, r2, r3
 800a366:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800a36a:	fbb2 f3f3 	udiv	r3, r2, r3
 800a36e:	61bb      	str	r3, [r7, #24]
			hd = (BYTE)((nxt_alloc32 + sz_part32 - 1) / n_sc % n_hd);	/* End head */
 800a370:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a372:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a374:	4413      	add	r3, r2
 800a376:	1e5a      	subs	r2, r3, #1
 800a378:	7ffb      	ldrb	r3, [r7, #31]
 800a37a:	fbb2 f3f3 	udiv	r3, r2, r3
 800a37e:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 800a382:	fbb3 f1f2 	udiv	r1, r3, r2
 800a386:	fb01 f202 	mul.w	r2, r1, r2
 800a38a:	1a9b      	subs	r3, r3, r2
 800a38c:	75fb      	strb	r3, [r7, #23]
			sc = (BYTE)((nxt_alloc32 + sz_part32 - 1) % n_sc + 1);		/* End sector */
 800a38e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a390:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a392:	4413      	add	r3, r2
 800a394:	3b01      	subs	r3, #1
 800a396:	7ffa      	ldrb	r2, [r7, #31]
 800a398:	fbb3 f1f2 	udiv	r1, r3, r2
 800a39c:	fb01 f202 	mul.w	r2, r1, r2
 800a3a0:	1a9b      	subs	r3, r3, r2
 800a3a2:	b2db      	uxtb	r3, r3
 800a3a4:	3301      	adds	r3, #1
 800a3a6:	75bb      	strb	r3, [r7, #22]
			pte[PTE_EdHead] = hd;
 800a3a8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a3aa:	3305      	adds	r3, #5
 800a3ac:	7dfa      	ldrb	r2, [r7, #23]
 800a3ae:	701a      	strb	r2, [r3, #0]
			pte[PTE_EdSec] = (BYTE)((cy >> 2 & 0xC0) | sc);
 800a3b0:	69bb      	ldr	r3, [r7, #24]
 800a3b2:	089b      	lsrs	r3, r3, #2
 800a3b4:	b2db      	uxtb	r3, r3
 800a3b6:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800a3ba:	b2d9      	uxtb	r1, r3
 800a3bc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a3be:	3306      	adds	r3, #6
 800a3c0:	7dba      	ldrb	r2, [r7, #22]
 800a3c2:	430a      	orrs	r2, r1
 800a3c4:	b2d2      	uxtb	r2, r2
 800a3c6:	701a      	strb	r2, [r3, #0]
			pte[PTE_EdCyl] = (BYTE)cy;
 800a3c8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a3ca:	3307      	adds	r3, #7
 800a3cc:	69ba      	ldr	r2, [r7, #24]
 800a3ce:	b2d2      	uxtb	r2, r2
 800a3d0:	701a      	strb	r2, [r3, #0]

			pte += SZ_PTE;		/* Next entry */
 800a3d2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a3d4:	3310      	adds	r3, #16
 800a3d6:	62bb      	str	r3, [r7, #40]	@ 0x28
		for (i = 0, nxt_alloc32 = n_sc; i < 4 && nxt_alloc32 != 0 && nxt_alloc32 < sz_drv32; i++, nxt_alloc32 += sz_part32) {
 800a3d8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a3da:	3301      	adds	r3, #1
 800a3dc:	637b      	str	r3, [r7, #52]	@ 0x34
 800a3de:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a3e0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a3e2:	4413      	add	r3, r2
 800a3e4:	633b      	str	r3, [r7, #48]	@ 0x30
 800a3e6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a3e8:	2b03      	cmp	r3, #3
 800a3ea:	d809      	bhi.n	800a400 <create_partition+0x214>
 800a3ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a3ee:	2b00      	cmp	r3, #0
 800a3f0:	d006      	beq.n	800a400 <create_partition+0x214>
 800a3f2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a3f4:	6a3b      	ldr	r3, [r7, #32]
 800a3f6:	429a      	cmp	r2, r3
 800a3f8:	f4ff af3f 	bcc.w	800a27a <create_partition+0x8e>
 800a3fc:	e000      	b.n	800a400 <create_partition+0x214>
			if (sz_part32 == 0) break;	/* End of table or no sector to allocate? */
 800a3fe:	bf00      	nop
		}

		st_word(buf + BS_55AA, 0xAA55);		/* MBR signature */
 800a400:	687b      	ldr	r3, [r7, #4]
 800a402:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 800a406:	f64a 2155 	movw	r1, #43605	@ 0xaa55
 800a40a:	4618      	mov	r0, r3
 800a40c:	f7fd fd44 	bl	8007e98 <st_word>
		if (disk_write(drv, buf, 0, 1) != RES_OK) return FR_DISK_ERR;	/* Write it to the MBR */
 800a410:	7bf8      	ldrb	r0, [r7, #15]
 800a412:	2301      	movs	r3, #1
 800a414:	2200      	movs	r2, #0
 800a416:	6879      	ldr	r1, [r7, #4]
 800a418:	f7fd fc4c 	bl	8007cb4 <disk_write>
 800a41c:	4603      	mov	r3, r0
 800a41e:	2b00      	cmp	r3, #0
 800a420:	d001      	beq.n	800a426 <create_partition+0x23a>
 800a422:	2301      	movs	r3, #1
 800a424:	e000      	b.n	800a428 <create_partition+0x23c>
	}

	return FR_OK;
 800a426:	2300      	movs	r3, #0
}
 800a428:	4618      	mov	r0, r3
 800a42a:	3738      	adds	r7, #56	@ 0x38
 800a42c:	46bd      	mov	sp, r7
 800a42e:	bd80      	pop	{r7, pc}
 800a430:	51eb851f 	.word	0x51eb851f

0800a434 <f_mkfs>:
	const TCHAR* path,		/* Logical drive number */
	const MKFS_PARM* opt,	/* Format options */
	void* work,				/* Pointer to working buffer (null: use len bytes of heap memory) */
	UINT len				/* Size of working buffer [byte] */
)
{
 800a434:	b580      	push	{r7, lr}
 800a436:	b09e      	sub	sp, #120	@ 0x78
 800a438:	af00      	add	r7, sp, #0
 800a43a:	60f8      	str	r0, [r7, #12]
 800a43c:	60b9      	str	r1, [r7, #8]
 800a43e:	607a      	str	r2, [r7, #4]
 800a440:	603b      	str	r3, [r7, #0]
	DSTATUS ds;
	FRESULT res;


	/* Check mounted drive and clear work area */
	vol = get_ldnumber(&path);					/* Get target logical drive */
 800a442:	f107 030c 	add.w	r3, r7, #12
 800a446:	4618      	mov	r0, r3
 800a448:	f7fe fd78 	bl	8008f3c <get_ldnumber>
 800a44c:	6478      	str	r0, [r7, #68]	@ 0x44
	if (vol < 0) return FR_INVALID_DRIVE;
 800a44e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a450:	2b00      	cmp	r3, #0
 800a452:	da02      	bge.n	800a45a <f_mkfs+0x26>
 800a454:	230b      	movs	r3, #11
 800a456:	f000 bc39 	b.w	800accc <f_mkfs+0x898>
	if (FatFs[vol]) FatFs[vol]->fs_type = 0;	/* Clear the fs object if mounted */
 800a45a:	4a90      	ldr	r2, [pc, #576]	@ (800a69c <f_mkfs+0x268>)
 800a45c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a45e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a462:	2b00      	cmp	r3, #0
 800a464:	d005      	beq.n	800a472 <f_mkfs+0x3e>
 800a466:	4a8d      	ldr	r2, [pc, #564]	@ (800a69c <f_mkfs+0x268>)
 800a468:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a46a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a46e:	2200      	movs	r2, #0
 800a470:	701a      	strb	r2, [r3, #0]
	pdrv = LD2PD(vol);		/* Hosting physical drive */
 800a472:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a474:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
	ipart = LD2PT(vol);		/* Hosting partition (0:create as new, 1..:existing partition) */
 800a478:	2300      	movs	r3, #0
 800a47a:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42

	/* Initialize the hosting physical drive */
	ds = disk_initialize(pdrv);
 800a47e:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800a482:	4618      	mov	r0, r3
 800a484:	f7fd fbbc 	bl	8007c00 <disk_initialize>
 800a488:	4603      	mov	r3, r0
 800a48a:	f887 3041 	strb.w	r3, [r7, #65]	@ 0x41
	if (ds & STA_NOINIT) return FR_NOT_READY;
 800a48e:	f897 3041 	ldrb.w	r3, [r7, #65]	@ 0x41
 800a492:	f003 0301 	and.w	r3, r3, #1
 800a496:	2b00      	cmp	r3, #0
 800a498:	d002      	beq.n	800a4a0 <f_mkfs+0x6c>
 800a49a:	2303      	movs	r3, #3
 800a49c:	f000 bc16 	b.w	800accc <f_mkfs+0x898>
	if (ds & STA_PROTECT) return FR_WRITE_PROTECTED;
 800a4a0:	f897 3041 	ldrb.w	r3, [r7, #65]	@ 0x41
 800a4a4:	f003 0304 	and.w	r3, r3, #4
 800a4a8:	2b00      	cmp	r3, #0
 800a4aa:	d002      	beq.n	800a4b2 <f_mkfs+0x7e>
 800a4ac:	230a      	movs	r3, #10
 800a4ae:	f000 bc0d 	b.w	800accc <f_mkfs+0x898>

	/* Get physical drive parameters (sz_drv, sz_blk and ss) */
	if (!opt) opt = &defopt;	/* Use default parameter if it is not given */
 800a4b2:	68bb      	ldr	r3, [r7, #8]
 800a4b4:	2b00      	cmp	r3, #0
 800a4b6:	d101      	bne.n	800a4bc <f_mkfs+0x88>
 800a4b8:	4b79      	ldr	r3, [pc, #484]	@ (800a6a0 <f_mkfs+0x26c>)
 800a4ba:	60bb      	str	r3, [r7, #8]
	sz_blk = opt->align;
 800a4bc:	68bb      	ldr	r3, [r7, #8]
 800a4be:	685b      	ldr	r3, [r3, #4]
 800a4c0:	61fb      	str	r3, [r7, #28]
	if (sz_blk == 0) disk_ioctl(pdrv, GET_BLOCK_SIZE, &sz_blk);					/* Block size from the paramter or lower layer */
 800a4c2:	69fb      	ldr	r3, [r7, #28]
 800a4c4:	2b00      	cmp	r3, #0
 800a4c6:	d107      	bne.n	800a4d8 <f_mkfs+0xa4>
 800a4c8:	f107 021c 	add.w	r2, r7, #28
 800a4cc:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800a4d0:	2103      	movs	r1, #3
 800a4d2:	4618      	mov	r0, r3
 800a4d4:	f7fd fc22 	bl	8007d1c <disk_ioctl>
 	if (sz_blk == 0 || sz_blk > 0x8000 || (sz_blk & (sz_blk - 1))) sz_blk = 1;	/* Use default if the block size is invalid */
 800a4d8:	69fb      	ldr	r3, [r7, #28]
 800a4da:	2b00      	cmp	r3, #0
 800a4dc:	d009      	beq.n	800a4f2 <f_mkfs+0xbe>
 800a4de:	69fb      	ldr	r3, [r7, #28]
 800a4e0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800a4e4:	d805      	bhi.n	800a4f2 <f_mkfs+0xbe>
 800a4e6:	69fb      	ldr	r3, [r7, #28]
 800a4e8:	1e5a      	subs	r2, r3, #1
 800a4ea:	69fb      	ldr	r3, [r7, #28]
 800a4ec:	4013      	ands	r3, r2
 800a4ee:	2b00      	cmp	r3, #0
 800a4f0:	d001      	beq.n	800a4f6 <f_mkfs+0xc2>
 800a4f2:	2301      	movs	r3, #1
 800a4f4:	61fb      	str	r3, [r7, #28]
#if FF_MAX_SS != FF_MIN_SS
	if (disk_ioctl(pdrv, GET_SECTOR_SIZE, &ss) != RES_OK) return FR_DISK_ERR;
 800a4f6:	f107 0220 	add.w	r2, r7, #32
 800a4fa:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800a4fe:	2102      	movs	r1, #2
 800a500:	4618      	mov	r0, r3
 800a502:	f7fd fc0b 	bl	8007d1c <disk_ioctl>
 800a506:	4603      	mov	r3, r0
 800a508:	2b00      	cmp	r3, #0
 800a50a:	d001      	beq.n	800a510 <f_mkfs+0xdc>
 800a50c:	2301      	movs	r3, #1
 800a50e:	e3dd      	b.n	800accc <f_mkfs+0x898>
	if (ss > FF_MAX_SS || ss < FF_MIN_SS || (ss & (ss - 1))) return FR_DISK_ERR;
 800a510:	8c3b      	ldrh	r3, [r7, #32]
 800a512:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a516:	d80a      	bhi.n	800a52e <f_mkfs+0xfa>
 800a518:	8c3b      	ldrh	r3, [r7, #32]
 800a51a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a51e:	d306      	bcc.n	800a52e <f_mkfs+0xfa>
 800a520:	8c3b      	ldrh	r3, [r7, #32]
 800a522:	461a      	mov	r2, r3
 800a524:	8c3b      	ldrh	r3, [r7, #32]
 800a526:	3b01      	subs	r3, #1
 800a528:	4013      	ands	r3, r2
 800a52a:	2b00      	cmp	r3, #0
 800a52c:	d001      	beq.n	800a532 <f_mkfs+0xfe>
 800a52e:	2301      	movs	r3, #1
 800a530:	e3cc      	b.n	800accc <f_mkfs+0x898>
#else
	ss = FF_MAX_SS;
#endif

	/* Options for FAT sub-type and FAT parameters */
	fsopt = opt->fmt & (FM_ANY | FM_SFD);
 800a532:	68bb      	ldr	r3, [r7, #8]
 800a534:	781b      	ldrb	r3, [r3, #0]
 800a536:	f003 030f 	and.w	r3, r3, #15
 800a53a:	f887 3040 	strb.w	r3, [r7, #64]	@ 0x40
	n_fat = (opt->n_fat >= 1 && opt->n_fat <= 2) ? opt->n_fat : 1;
 800a53e:	68bb      	ldr	r3, [r7, #8]
 800a540:	785b      	ldrb	r3, [r3, #1]
 800a542:	2b00      	cmp	r3, #0
 800a544:	d006      	beq.n	800a554 <f_mkfs+0x120>
 800a546:	68bb      	ldr	r3, [r7, #8]
 800a548:	785b      	ldrb	r3, [r3, #1]
 800a54a:	2b02      	cmp	r3, #2
 800a54c:	d802      	bhi.n	800a554 <f_mkfs+0x120>
 800a54e:	68bb      	ldr	r3, [r7, #8]
 800a550:	785b      	ldrb	r3, [r3, #1]
 800a552:	e000      	b.n	800a556 <f_mkfs+0x122>
 800a554:	2301      	movs	r3, #1
 800a556:	63fb      	str	r3, [r7, #60]	@ 0x3c
	n_root = (opt->n_root >= 1 && opt->n_root <= 32768 && (opt->n_root % (ss / SZDIRE)) == 0) ? opt->n_root : 512;
 800a558:	68bb      	ldr	r3, [r7, #8]
 800a55a:	689b      	ldr	r3, [r3, #8]
 800a55c:	2b00      	cmp	r3, #0
 800a55e:	d013      	beq.n	800a588 <f_mkfs+0x154>
 800a560:	68bb      	ldr	r3, [r7, #8]
 800a562:	689b      	ldr	r3, [r3, #8]
 800a564:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800a568:	d80e      	bhi.n	800a588 <f_mkfs+0x154>
 800a56a:	68bb      	ldr	r3, [r7, #8]
 800a56c:	689b      	ldr	r3, [r3, #8]
 800a56e:	8c3a      	ldrh	r2, [r7, #32]
 800a570:	0952      	lsrs	r2, r2, #5
 800a572:	b292      	uxth	r2, r2
 800a574:	fbb3 f1f2 	udiv	r1, r3, r2
 800a578:	fb01 f202 	mul.w	r2, r1, r2
 800a57c:	1a9b      	subs	r3, r3, r2
 800a57e:	2b00      	cmp	r3, #0
 800a580:	d102      	bne.n	800a588 <f_mkfs+0x154>
 800a582:	68bb      	ldr	r3, [r7, #8]
 800a584:	689b      	ldr	r3, [r3, #8]
 800a586:	e001      	b.n	800a58c <f_mkfs+0x158>
 800a588:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800a58c:	63bb      	str	r3, [r7, #56]	@ 0x38
	sz_au = (opt->au_size <= 0x1000000 && (opt->au_size & (opt->au_size - 1)) == 0) ? opt->au_size : 0;
 800a58e:	68bb      	ldr	r3, [r7, #8]
 800a590:	68db      	ldr	r3, [r3, #12]
 800a592:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800a596:	d80a      	bhi.n	800a5ae <f_mkfs+0x17a>
 800a598:	68bb      	ldr	r3, [r7, #8]
 800a59a:	68da      	ldr	r2, [r3, #12]
 800a59c:	68bb      	ldr	r3, [r7, #8]
 800a59e:	68db      	ldr	r3, [r3, #12]
 800a5a0:	3b01      	subs	r3, #1
 800a5a2:	4013      	ands	r3, r2
 800a5a4:	2b00      	cmp	r3, #0
 800a5a6:	d102      	bne.n	800a5ae <f_mkfs+0x17a>
 800a5a8:	68bb      	ldr	r3, [r7, #8]
 800a5aa:	68db      	ldr	r3, [r3, #12]
 800a5ac:	e000      	b.n	800a5b0 <f_mkfs+0x17c>
 800a5ae:	2300      	movs	r3, #0
 800a5b0:	64fb      	str	r3, [r7, #76]	@ 0x4c
	sz_au /= ss;	/* Byte --> Sector */
 800a5b2:	8c3b      	ldrh	r3, [r7, #32]
 800a5b4:	461a      	mov	r2, r3
 800a5b6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a5b8:	fbb3 f3f2 	udiv	r3, r3, r2
 800a5bc:	64fb      	str	r3, [r7, #76]	@ 0x4c

	/* Get working buffer */
	sz_buf = len / ss;		/* Size of working buffer [sector] */
 800a5be:	8c3b      	ldrh	r3, [r7, #32]
 800a5c0:	461a      	mov	r2, r3
 800a5c2:	683b      	ldr	r3, [r7, #0]
 800a5c4:	fbb3 f3f2 	udiv	r3, r3, r2
 800a5c8:	637b      	str	r3, [r7, #52]	@ 0x34
	if (sz_buf == 0) return FR_NOT_ENOUGH_CORE;
 800a5ca:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a5cc:	2b00      	cmp	r3, #0
 800a5ce:	d101      	bne.n	800a5d4 <f_mkfs+0x1a0>
 800a5d0:	2311      	movs	r3, #17
 800a5d2:	e37b      	b.n	800accc <f_mkfs+0x898>
	buf = (BYTE*)work;		/* Working buffer */
 800a5d4:	687b      	ldr	r3, [r7, #4]
 800a5d6:	633b      	str	r3, [r7, #48]	@ 0x30
#if FF_USE_LFN == 3
	if (!buf) buf = ff_memalloc(sz_buf * ss);	/* Use heap memory for working buffer */
#endif
	if (!buf) return FR_NOT_ENOUGH_CORE;
 800a5d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a5da:	2b00      	cmp	r3, #0
 800a5dc:	d101      	bne.n	800a5e2 <f_mkfs+0x1ae>
 800a5de:	2311      	movs	r3, #17
 800a5e0:	e374      	b.n	800accc <f_mkfs+0x898>

	/* Determine where the volume to be located (b_vol, sz_vol) */
	b_vol = sz_vol = 0;
 800a5e2:	2300      	movs	r3, #0
 800a5e4:	61bb      	str	r3, [r7, #24]
 800a5e6:	69bb      	ldr	r3, [r7, #24]
 800a5e8:	66fb      	str	r3, [r7, #108]	@ 0x6c
			if (ipart > 4 || pte[PTE_System] == 0) LEAVE_MKFS(FR_MKFS_ABORTED);	/* No partition? */
			b_vol = ld_dword(pte + PTE_StLba);		/* Get volume start sector */
			sz_vol = ld_dword(pte + PTE_SizLba);	/* Get volume size */
		}
	} else {	/* The volume is associated with a physical drive */
		if (disk_ioctl(pdrv, GET_SECTOR_COUNT, &sz_vol) != RES_OK) LEAVE_MKFS(FR_DISK_ERR);
 800a5ea:	f107 0218 	add.w	r2, r7, #24
 800a5ee:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800a5f2:	2101      	movs	r1, #1
 800a5f4:	4618      	mov	r0, r3
 800a5f6:	f7fd fb91 	bl	8007d1c <disk_ioctl>
 800a5fa:	4603      	mov	r3, r0
 800a5fc:	2b00      	cmp	r3, #0
 800a5fe:	d001      	beq.n	800a604 <f_mkfs+0x1d0>
 800a600:	2301      	movs	r3, #1
 800a602:	e363      	b.n	800accc <f_mkfs+0x898>
		if (!(fsopt & FM_SFD)) {	/* To be partitioned? */
 800a604:	f897 3040 	ldrb.w	r3, [r7, #64]	@ 0x40
 800a608:	f003 0308 	and.w	r3, r3, #8
 800a60c:	2b00      	cmp	r3, #0
 800a60e:	d108      	bne.n	800a622 <f_mkfs+0x1ee>
				fsopt |= 0x80;		/* Partitioning is in GPT */
				b_vol = GPT_ALIGN / ss; sz_vol -= b_vol + GPT_ITEMS * SZ_GPTE / ss + 1;	/* Estimated partition offset and size */
			} else
#endif
			{	/* Partitioning is in MBR */
				if (sz_vol > N_SEC_TRACK) {
 800a610:	69bb      	ldr	r3, [r7, #24]
 800a612:	2b3f      	cmp	r3, #63	@ 0x3f
 800a614:	d905      	bls.n	800a622 <f_mkfs+0x1ee>
					b_vol = N_SEC_TRACK; sz_vol -= b_vol;	/* Estimated partition offset and size */
 800a616:	233f      	movs	r3, #63	@ 0x3f
 800a618:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800a61a:	69ba      	ldr	r2, [r7, #24]
 800a61c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a61e:	1ad3      	subs	r3, r2, r3
 800a620:	61bb      	str	r3, [r7, #24]
				}
			}
		}
	}
	if (sz_vol < 128) LEAVE_MKFS(FR_MKFS_ABORTED);	/* Check if volume size is >=128s */
 800a622:	69bb      	ldr	r3, [r7, #24]
 800a624:	2b7f      	cmp	r3, #127	@ 0x7f
 800a626:	d801      	bhi.n	800a62c <f_mkfs+0x1f8>
 800a628:	230e      	movs	r3, #14
 800a62a:	e34f      	b.n	800accc <f_mkfs+0x898>
			}
		}
#if FF_LBA64
		if (sz_vol >= 0x100000000) LEAVE_MKFS(FR_MKFS_ABORTED);	/* Too large volume for FAT/FAT32 */
#endif
		if (sz_au > 128) sz_au = 128;	/* Invalid AU for FAT/FAT32? */
 800a62c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a62e:	2b80      	cmp	r3, #128	@ 0x80
 800a630:	d901      	bls.n	800a636 <f_mkfs+0x202>
 800a632:	2380      	movs	r3, #128	@ 0x80
 800a634:	64fb      	str	r3, [r7, #76]	@ 0x4c
		if (fsopt & FM_FAT32) {	/* FAT32 possible? */
 800a636:	f897 3040 	ldrb.w	r3, [r7, #64]	@ 0x40
 800a63a:	f003 0302 	and.w	r3, r3, #2
 800a63e:	2b00      	cmp	r3, #0
 800a640:	d009      	beq.n	800a656 <f_mkfs+0x222>
			if (!(fsopt & FM_FAT)) {	/* no-FAT? */
 800a642:	f897 3040 	ldrb.w	r3, [r7, #64]	@ 0x40
 800a646:	f003 0301 	and.w	r3, r3, #1
 800a64a:	2b00      	cmp	r3, #0
 800a64c:	d103      	bne.n	800a656 <f_mkfs+0x222>
				fsty = FS_FAT32; break;
 800a64e:	2303      	movs	r3, #3
 800a650:	f887 305b 	strb.w	r3, [r7, #91]	@ 0x5b
 800a654:	e00a      	b.n	800a66c <f_mkfs+0x238>
			}
		}
		if (!(fsopt & FM_FAT)) LEAVE_MKFS(FR_INVALID_PARAMETER);	/* no-FAT? */
 800a656:	f897 3040 	ldrb.w	r3, [r7, #64]	@ 0x40
 800a65a:	f003 0301 	and.w	r3, r3, #1
 800a65e:	2b00      	cmp	r3, #0
 800a660:	d101      	bne.n	800a666 <f_mkfs+0x232>
 800a662:	2313      	movs	r3, #19
 800a664:	e332      	b.n	800accc <f_mkfs+0x898>
		fsty = FS_FAT16;
 800a666:	2302      	movs	r3, #2
 800a668:	f887 305b 	strb.w	r3, [r7, #91]	@ 0x5b
	} while (0);

	vsn = (DWORD)sz_vol + GET_FATTIME();	/* VSN generated from current time and partitiion size */
 800a66c:	69bb      	ldr	r3, [r7, #24]
 800a66e:	f103 43a8 	add.w	r3, r3, #1409286144	@ 0x54000000
 800a672:	f503 1304 	add.w	r3, r3, #2162688	@ 0x210000
 800a676:	62fb      	str	r3, [r7, #44]	@ 0x2c

	} else
#endif	/* FF_FS_EXFAT */
	{	/* Create an FAT/FAT32 volume */
		do {
			pau = sz_au;
 800a678:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a67a:	663b      	str	r3, [r7, #96]	@ 0x60
			/* Pre-determine number of clusters and FAT sub-type */
			if (fsty == FS_FAT32) {	/* FAT32 volume */
 800a67c:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 800a680:	2b03      	cmp	r3, #3
 800a682:	d141      	bne.n	800a708 <f_mkfs+0x2d4>
				if (pau == 0) {	/* AU auto-selection */
 800a684:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800a686:	2b00      	cmp	r3, #0
 800a688:	d120      	bne.n	800a6cc <f_mkfs+0x298>
					n = (DWORD)sz_vol / 0x20000;	/* Volume size in unit of 128KS */
 800a68a:	69bb      	ldr	r3, [r7, #24]
 800a68c:	0c5b      	lsrs	r3, r3, #17
 800a68e:	667b      	str	r3, [r7, #100]	@ 0x64
					for (i = 0, pau = 1; cst32[i] && cst32[i] <= n; i++, pau <<= 1) ;	/* Get from table */
 800a690:	2300      	movs	r3, #0
 800a692:	64bb      	str	r3, [r7, #72]	@ 0x48
 800a694:	2301      	movs	r3, #1
 800a696:	663b      	str	r3, [r7, #96]	@ 0x60
 800a698:	e00a      	b.n	800a6b0 <f_mkfs+0x27c>
 800a69a:	bf00      	nop
 800a69c:	20005a00 	.word	0x20005a00
 800a6a0:	080176b8 	.word	0x080176b8
 800a6a4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800a6a6:	3301      	adds	r3, #1
 800a6a8:	64bb      	str	r3, [r7, #72]	@ 0x48
 800a6aa:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800a6ac:	005b      	lsls	r3, r3, #1
 800a6ae:	663b      	str	r3, [r7, #96]	@ 0x60
 800a6b0:	4a95      	ldr	r2, [pc, #596]	@ (800a908 <f_mkfs+0x4d4>)
 800a6b2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800a6b4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a6b8:	2b00      	cmp	r3, #0
 800a6ba:	d007      	beq.n	800a6cc <f_mkfs+0x298>
 800a6bc:	4a92      	ldr	r2, [pc, #584]	@ (800a908 <f_mkfs+0x4d4>)
 800a6be:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800a6c0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a6c4:	461a      	mov	r2, r3
 800a6c6:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800a6c8:	4293      	cmp	r3, r2
 800a6ca:	d2eb      	bcs.n	800a6a4 <f_mkfs+0x270>
				}
				n_clst = (DWORD)sz_vol / pau;	/* Number of clusters */
 800a6cc:	69ba      	ldr	r2, [r7, #24]
 800a6ce:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800a6d0:	fbb2 f3f3 	udiv	r3, r2, r3
 800a6d4:	62bb      	str	r3, [r7, #40]	@ 0x28
				sz_fat = (n_clst * 4 + 8 + ss - 1) / ss;	/* FAT size [sector] */
 800a6d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a6d8:	3302      	adds	r3, #2
 800a6da:	009b      	lsls	r3, r3, #2
 800a6dc:	8c3a      	ldrh	r2, [r7, #32]
 800a6de:	4413      	add	r3, r2
 800a6e0:	3b01      	subs	r3, #1
 800a6e2:	8c3a      	ldrh	r2, [r7, #32]
 800a6e4:	fbb3 f3f2 	udiv	r3, r3, r2
 800a6e8:	657b      	str	r3, [r7, #84]	@ 0x54
				sz_rsv = 32;	/* Number of reserved sectors */
 800a6ea:	2320      	movs	r3, #32
 800a6ec:	677b      	str	r3, [r7, #116]	@ 0x74
				sz_dir = 0;		/* No static directory */
 800a6ee:	2300      	movs	r3, #0
 800a6f0:	653b      	str	r3, [r7, #80]	@ 0x50
				if (n_clst <= MAX_FAT16 || n_clst > MAX_FAT32) LEAVE_MKFS(FR_MKFS_ABORTED);
 800a6f2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a6f4:	f64f 72f5 	movw	r2, #65525	@ 0xfff5
 800a6f8:	4293      	cmp	r3, r2
 800a6fa:	d903      	bls.n	800a704 <f_mkfs+0x2d0>
 800a6fc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a6fe:	4a83      	ldr	r2, [pc, #524]	@ (800a90c <f_mkfs+0x4d8>)
 800a700:	4293      	cmp	r3, r2
 800a702:	d94b      	bls.n	800a79c <f_mkfs+0x368>
 800a704:	230e      	movs	r3, #14
 800a706:	e2e1      	b.n	800accc <f_mkfs+0x898>
			} else {				/* FAT volume */
				if (pau == 0) {	/* au auto-selection */
 800a708:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800a70a:	2b00      	cmp	r3, #0
 800a70c:	d11b      	bne.n	800a746 <f_mkfs+0x312>
					n = (DWORD)sz_vol / 0x1000;	/* Volume size in unit of 4KS */
 800a70e:	69bb      	ldr	r3, [r7, #24]
 800a710:	0b1b      	lsrs	r3, r3, #12
 800a712:	667b      	str	r3, [r7, #100]	@ 0x64
					for (i = 0, pau = 1; cst[i] && cst[i] <= n; i++, pau <<= 1) ;	/* Get from table */
 800a714:	2300      	movs	r3, #0
 800a716:	64bb      	str	r3, [r7, #72]	@ 0x48
 800a718:	2301      	movs	r3, #1
 800a71a:	663b      	str	r3, [r7, #96]	@ 0x60
 800a71c:	e005      	b.n	800a72a <f_mkfs+0x2f6>
 800a71e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800a720:	3301      	adds	r3, #1
 800a722:	64bb      	str	r3, [r7, #72]	@ 0x48
 800a724:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800a726:	005b      	lsls	r3, r3, #1
 800a728:	663b      	str	r3, [r7, #96]	@ 0x60
 800a72a:	4a79      	ldr	r2, [pc, #484]	@ (800a910 <f_mkfs+0x4dc>)
 800a72c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800a72e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a732:	2b00      	cmp	r3, #0
 800a734:	d007      	beq.n	800a746 <f_mkfs+0x312>
 800a736:	4a76      	ldr	r2, [pc, #472]	@ (800a910 <f_mkfs+0x4dc>)
 800a738:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800a73a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a73e:	461a      	mov	r2, r3
 800a740:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800a742:	4293      	cmp	r3, r2
 800a744:	d2eb      	bcs.n	800a71e <f_mkfs+0x2ea>
				}
				n_clst = (DWORD)sz_vol / pau;
 800a746:	69ba      	ldr	r2, [r7, #24]
 800a748:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800a74a:	fbb2 f3f3 	udiv	r3, r2, r3
 800a74e:	62bb      	str	r3, [r7, #40]	@ 0x28
				if (n_clst > MAX_FAT12) {
 800a750:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a752:	f640 72f5 	movw	r2, #4085	@ 0xff5
 800a756:	4293      	cmp	r3, r2
 800a758:	d904      	bls.n	800a764 <f_mkfs+0x330>
					n = n_clst * 2 + 4;		/* FAT size [byte] */
 800a75a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a75c:	3302      	adds	r3, #2
 800a75e:	005b      	lsls	r3, r3, #1
 800a760:	667b      	str	r3, [r7, #100]	@ 0x64
 800a762:	e00a      	b.n	800a77a <f_mkfs+0x346>
				} else {
					fsty = FS_FAT12;
 800a764:	2301      	movs	r3, #1
 800a766:	f887 305b 	strb.w	r3, [r7, #91]	@ 0x5b
					n = (n_clst * 3 + 1) / 2 + 3;	/* FAT size [byte] */
 800a76a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800a76c:	4613      	mov	r3, r2
 800a76e:	005b      	lsls	r3, r3, #1
 800a770:	4413      	add	r3, r2
 800a772:	3301      	adds	r3, #1
 800a774:	085b      	lsrs	r3, r3, #1
 800a776:	3303      	adds	r3, #3
 800a778:	667b      	str	r3, [r7, #100]	@ 0x64
				}
				sz_fat = (n + ss - 1) / ss;		/* FAT size [sector] */
 800a77a:	8c3b      	ldrh	r3, [r7, #32]
 800a77c:	461a      	mov	r2, r3
 800a77e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800a780:	4413      	add	r3, r2
 800a782:	3b01      	subs	r3, #1
 800a784:	8c3a      	ldrh	r2, [r7, #32]
 800a786:	fbb3 f3f2 	udiv	r3, r3, r2
 800a78a:	657b      	str	r3, [r7, #84]	@ 0x54
				sz_rsv = 1;						/* Number of reserved sectors */
 800a78c:	2301      	movs	r3, #1
 800a78e:	677b      	str	r3, [r7, #116]	@ 0x74
				sz_dir = (DWORD)n_root * SZDIRE / ss;	/* Root dir size [sector] */
 800a790:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a792:	015b      	lsls	r3, r3, #5
 800a794:	8c3a      	ldrh	r2, [r7, #32]
 800a796:	fbb3 f3f2 	udiv	r3, r3, r2
 800a79a:	653b      	str	r3, [r7, #80]	@ 0x50
			}
			b_fat = b_vol + sz_rsv;						/* FAT base */
 800a79c:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800a79e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800a7a0:	4413      	add	r3, r2
 800a7a2:	66bb      	str	r3, [r7, #104]	@ 0x68
			b_data = b_fat + sz_fat * n_fat + sz_dir;	/* Data base */
 800a7a4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800a7a6:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800a7a8:	fb03 f202 	mul.w	r2, r3, r2
 800a7ac:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800a7ae:	4413      	add	r3, r2
 800a7b0:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800a7b2:	4413      	add	r3, r2
 800a7b4:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Align data area to erase block boundary (for flash memory media) */
			n = (DWORD)(((b_data + sz_blk - 1) & ~(sz_blk - 1)) - b_data);	/* Sectors to next nearest from current data base */
 800a7b6:	69fa      	ldr	r2, [r7, #28]
 800a7b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a7ba:	4413      	add	r3, r2
 800a7bc:	1e5a      	subs	r2, r3, #1
 800a7be:	69fb      	ldr	r3, [r7, #28]
 800a7c0:	425b      	negs	r3, r3
 800a7c2:	401a      	ands	r2, r3
 800a7c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a7c6:	1ad3      	subs	r3, r2, r3
 800a7c8:	667b      	str	r3, [r7, #100]	@ 0x64
			if (fsty == FS_FAT32) {		/* FAT32: Move FAT */
 800a7ca:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 800a7ce:	2b03      	cmp	r3, #3
 800a7d0:	d108      	bne.n	800a7e4 <f_mkfs+0x3b0>
				sz_rsv += n; b_fat += n;
 800a7d2:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 800a7d4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800a7d6:	4413      	add	r3, r2
 800a7d8:	677b      	str	r3, [r7, #116]	@ 0x74
 800a7da:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 800a7dc:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800a7de:	4413      	add	r3, r2
 800a7e0:	66bb      	str	r3, [r7, #104]	@ 0x68
 800a7e2:	e019      	b.n	800a818 <f_mkfs+0x3e4>
			} else {					/* FAT: Expand FAT */
				if (n % n_fat) {	/* Adjust fractional error if needed */
 800a7e4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800a7e6:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800a7e8:	fbb3 f2f2 	udiv	r2, r3, r2
 800a7ec:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800a7ee:	fb01 f202 	mul.w	r2, r1, r2
 800a7f2:	1a9b      	subs	r3, r3, r2
 800a7f4:	2b00      	cmp	r3, #0
 800a7f6:	d008      	beq.n	800a80a <f_mkfs+0x3d6>
					n--; sz_rsv++; b_fat++;
 800a7f8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800a7fa:	3b01      	subs	r3, #1
 800a7fc:	667b      	str	r3, [r7, #100]	@ 0x64
 800a7fe:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800a800:	3301      	adds	r3, #1
 800a802:	677b      	str	r3, [r7, #116]	@ 0x74
 800a804:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800a806:	3301      	adds	r3, #1
 800a808:	66bb      	str	r3, [r7, #104]	@ 0x68
				}
				sz_fat += n / n_fat;
 800a80a:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800a80c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a80e:	fbb2 f3f3 	udiv	r3, r2, r3
 800a812:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800a814:	4413      	add	r3, r2
 800a816:	657b      	str	r3, [r7, #84]	@ 0x54
			}

			/* Determine number of clusters and final check of validity of the FAT sub-type */
			if (sz_vol < b_data + pau * 16 - b_vol) LEAVE_MKFS(FR_MKFS_ABORTED);	/* Too small volume? */
 800a818:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800a81a:	011a      	lsls	r2, r3, #4
 800a81c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a81e:	441a      	add	r2, r3
 800a820:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a822:	1ad2      	subs	r2, r2, r3
 800a824:	69bb      	ldr	r3, [r7, #24]
 800a826:	429a      	cmp	r2, r3
 800a828:	d901      	bls.n	800a82e <f_mkfs+0x3fa>
 800a82a:	230e      	movs	r3, #14
 800a82c:	e24e      	b.n	800accc <f_mkfs+0x898>
			n_clst = ((DWORD)sz_vol - sz_rsv - sz_fat * n_fat - sz_dir) / pau;
 800a82e:	69ba      	ldr	r2, [r7, #24]
 800a830:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800a832:	1ad2      	subs	r2, r2, r3
 800a834:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800a836:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800a838:	fb01 f303 	mul.w	r3, r1, r3
 800a83c:	1ad2      	subs	r2, r2, r3
 800a83e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a840:	1ad2      	subs	r2, r2, r3
 800a842:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800a844:	fbb2 f3f3 	udiv	r3, r2, r3
 800a848:	62bb      	str	r3, [r7, #40]	@ 0x28
			if (fsty == FS_FAT32) {
 800a84a:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 800a84e:	2b03      	cmp	r3, #3
 800a850:	d10f      	bne.n	800a872 <f_mkfs+0x43e>
				if (n_clst <= MAX_FAT16) {	/* Too few clusters for FAT32? */
 800a852:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a854:	f64f 72f5 	movw	r2, #65525	@ 0xfff5
 800a858:	4293      	cmp	r3, r2
 800a85a:	d80a      	bhi.n	800a872 <f_mkfs+0x43e>
					if (sz_au == 0 && (sz_au = pau / 2) != 0) continue;	/* Adjust cluster size and retry */
 800a85c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a85e:	2b00      	cmp	r3, #0
 800a860:	d105      	bne.n	800a86e <f_mkfs+0x43a>
 800a862:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800a864:	085b      	lsrs	r3, r3, #1
 800a866:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800a868:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a86a:	2b00      	cmp	r3, #0
 800a86c:	d145      	bne.n	800a8fa <f_mkfs+0x4c6>
					LEAVE_MKFS(FR_MKFS_ABORTED);
 800a86e:	230e      	movs	r3, #14
 800a870:	e22c      	b.n	800accc <f_mkfs+0x898>
				}
			}
			if (fsty == FS_FAT16) {
 800a872:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 800a876:	2b02      	cmp	r3, #2
 800a878:	d134      	bne.n	800a8e4 <f_mkfs+0x4b0>
				if (n_clst > MAX_FAT16) {	/* Too many clusters for FAT16 */
 800a87a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a87c:	f64f 72f5 	movw	r2, #65525	@ 0xfff5
 800a880:	4293      	cmp	r3, r2
 800a882:	d91f      	bls.n	800a8c4 <f_mkfs+0x490>
					if (sz_au == 0 && (pau * 2) <= 64) {
 800a884:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a886:	2b00      	cmp	r3, #0
 800a888:	d107      	bne.n	800a89a <f_mkfs+0x466>
 800a88a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800a88c:	005b      	lsls	r3, r3, #1
 800a88e:	2b40      	cmp	r3, #64	@ 0x40
 800a890:	d803      	bhi.n	800a89a <f_mkfs+0x466>
						sz_au = pau * 2; continue;	/* Adjust cluster size and retry */
 800a892:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800a894:	005b      	lsls	r3, r3, #1
 800a896:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800a898:	e034      	b.n	800a904 <f_mkfs+0x4d0>
					}
					if ((fsopt & FM_FAT32)) {
 800a89a:	f897 3040 	ldrb.w	r3, [r7, #64]	@ 0x40
 800a89e:	f003 0302 	and.w	r3, r3, #2
 800a8a2:	2b00      	cmp	r3, #0
 800a8a4:	d003      	beq.n	800a8ae <f_mkfs+0x47a>
						fsty = FS_FAT32; continue;	/* Switch type to FAT32 and retry */
 800a8a6:	2303      	movs	r3, #3
 800a8a8:	f887 305b 	strb.w	r3, [r7, #91]	@ 0x5b
 800a8ac:	e02a      	b.n	800a904 <f_mkfs+0x4d0>
					}
					if (sz_au == 0 && (sz_au = pau * 2) <= 128) continue;	/* Adjust cluster size and retry */
 800a8ae:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a8b0:	2b00      	cmp	r3, #0
 800a8b2:	d105      	bne.n	800a8c0 <f_mkfs+0x48c>
 800a8b4:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800a8b6:	005b      	lsls	r3, r3, #1
 800a8b8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800a8ba:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a8bc:	2b80      	cmp	r3, #128	@ 0x80
 800a8be:	d91e      	bls.n	800a8fe <f_mkfs+0x4ca>
					LEAVE_MKFS(FR_MKFS_ABORTED);
 800a8c0:	230e      	movs	r3, #14
 800a8c2:	e203      	b.n	800accc <f_mkfs+0x898>
				}
				if  (n_clst <= MAX_FAT12) {	/* Too few clusters for FAT16 */
 800a8c4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a8c6:	f640 72f5 	movw	r2, #4085	@ 0xff5
 800a8ca:	4293      	cmp	r3, r2
 800a8cc:	d80a      	bhi.n	800a8e4 <f_mkfs+0x4b0>
					if (sz_au == 0 && (sz_au = pau * 2) <= 128) continue;	/* Adjust cluster size and retry */
 800a8ce:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a8d0:	2b00      	cmp	r3, #0
 800a8d2:	d105      	bne.n	800a8e0 <f_mkfs+0x4ac>
 800a8d4:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800a8d6:	005b      	lsls	r3, r3, #1
 800a8d8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800a8da:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a8dc:	2b80      	cmp	r3, #128	@ 0x80
 800a8de:	d910      	bls.n	800a902 <f_mkfs+0x4ce>
					LEAVE_MKFS(FR_MKFS_ABORTED);
 800a8e0:	230e      	movs	r3, #14
 800a8e2:	e1f3      	b.n	800accc <f_mkfs+0x898>
				}
			}
			if (fsty == FS_FAT12 && n_clst > MAX_FAT12) LEAVE_MKFS(FR_MKFS_ABORTED);	/* Too many clusters for FAT12 */
 800a8e4:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 800a8e8:	2b01      	cmp	r3, #1
 800a8ea:	d113      	bne.n	800a914 <f_mkfs+0x4e0>
 800a8ec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a8ee:	f640 72f5 	movw	r2, #4085	@ 0xff5
 800a8f2:	4293      	cmp	r3, r2
 800a8f4:	d90e      	bls.n	800a914 <f_mkfs+0x4e0>
 800a8f6:	230e      	movs	r3, #14
 800a8f8:	e1e8      	b.n	800accc <f_mkfs+0x898>
					if (sz_au == 0 && (sz_au = pau / 2) != 0) continue;	/* Adjust cluster size and retry */
 800a8fa:	bf00      	nop
 800a8fc:	e6bc      	b.n	800a678 <f_mkfs+0x244>
					if (sz_au == 0 && (sz_au = pau * 2) <= 128) continue;	/* Adjust cluster size and retry */
 800a8fe:	bf00      	nop
 800a900:	e6ba      	b.n	800a678 <f_mkfs+0x244>
					if (sz_au == 0 && (sz_au = pau * 2) <= 128) continue;	/* Adjust cluster size and retry */
 800a902:	bf00      	nop
			pau = sz_au;
 800a904:	e6b8      	b.n	800a678 <f_mkfs+0x244>
 800a906:	bf00      	nop
 800a908:	080176c8 	.word	0x080176c8
 800a90c:	0ffffff5 	.word	0x0ffffff5
 800a910:	080176d8 	.word	0x080176d8

			/* Ok, it is the valid cluster configuration */
			break;
 800a914:	bf00      	nop
#if FF_USE_TRIM
		lba[0] = b_vol; lba[1] = b_vol + sz_vol - 1;	/* Inform storage device that the volume area may be erased */
		disk_ioctl(pdrv, CTRL_TRIM, lba);
#endif
		/* Create FAT VBR */
		memset(buf, 0, ss);
 800a916:	8c3b      	ldrh	r3, [r7, #32]
 800a918:	461a      	mov	r2, r3
 800a91a:	2100      	movs	r1, #0
 800a91c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800a91e:	f00b fb33 	bl	8015f88 <memset>
		memcpy(buf + BS_JmpBoot, "\xEB\xFE\x90" "MSDOS5.0", 11);	/* Boot jump code (x86), OEM name */
 800a922:	220b      	movs	r2, #11
 800a924:	49b1      	ldr	r1, [pc, #708]	@ (800abec <f_mkfs+0x7b8>)
 800a926:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800a928:	f00b fbb2 	bl	8016090 <memcpy>
		st_word(buf + BPB_BytsPerSec, ss);				/* Sector size [byte] */
 800a92c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a92e:	330b      	adds	r3, #11
 800a930:	8c3a      	ldrh	r2, [r7, #32]
 800a932:	4611      	mov	r1, r2
 800a934:	4618      	mov	r0, r3
 800a936:	f7fd faaf 	bl	8007e98 <st_word>
		buf[BPB_SecPerClus] = (BYTE)pau;				/* Cluster size [sector] */
 800a93a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a93c:	330d      	adds	r3, #13
 800a93e:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800a940:	b2d2      	uxtb	r2, r2
 800a942:	701a      	strb	r2, [r3, #0]
		st_word(buf + BPB_RsvdSecCnt, (WORD)sz_rsv);	/* Size of reserved area */
 800a944:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a946:	330e      	adds	r3, #14
 800a948:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 800a94a:	b292      	uxth	r2, r2
 800a94c:	4611      	mov	r1, r2
 800a94e:	4618      	mov	r0, r3
 800a950:	f7fd faa2 	bl	8007e98 <st_word>
		buf[BPB_NumFATs] = (BYTE)n_fat;					/* Number of FATs */
 800a954:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a956:	3310      	adds	r3, #16
 800a958:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800a95a:	b2d2      	uxtb	r2, r2
 800a95c:	701a      	strb	r2, [r3, #0]
		st_word(buf + BPB_RootEntCnt, (WORD)((fsty == FS_FAT32) ? 0 : n_root));	/* Number of root directory entries */
 800a95e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a960:	f103 0211 	add.w	r2, r3, #17
 800a964:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 800a968:	2b03      	cmp	r3, #3
 800a96a:	d002      	beq.n	800a972 <f_mkfs+0x53e>
 800a96c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a96e:	b29b      	uxth	r3, r3
 800a970:	e000      	b.n	800a974 <f_mkfs+0x540>
 800a972:	2300      	movs	r3, #0
 800a974:	4619      	mov	r1, r3
 800a976:	4610      	mov	r0, r2
 800a978:	f7fd fa8e 	bl	8007e98 <st_word>
		if (sz_vol < 0x10000) {
 800a97c:	69bb      	ldr	r3, [r7, #24]
 800a97e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a982:	d208      	bcs.n	800a996 <f_mkfs+0x562>
			st_word(buf + BPB_TotSec16, (WORD)sz_vol);	/* Volume size in 16-bit LBA */
 800a984:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a986:	3313      	adds	r3, #19
 800a988:	69ba      	ldr	r2, [r7, #24]
 800a98a:	b292      	uxth	r2, r2
 800a98c:	4611      	mov	r1, r2
 800a98e:	4618      	mov	r0, r3
 800a990:	f7fd fa82 	bl	8007e98 <st_word>
 800a994:	e006      	b.n	800a9a4 <f_mkfs+0x570>
		} else {
			st_dword(buf + BPB_TotSec32, (DWORD)sz_vol);	/* Volume size in 32-bit LBA */
 800a996:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a998:	3320      	adds	r3, #32
 800a99a:	69ba      	ldr	r2, [r7, #24]
 800a99c:	4611      	mov	r1, r2
 800a99e:	4618      	mov	r0, r3
 800a9a0:	f7fd fa95 	bl	8007ece <st_dword>
		}
		buf[BPB_Media] = 0xF8;							/* Media descriptor byte */
 800a9a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a9a6:	3315      	adds	r3, #21
 800a9a8:	22f8      	movs	r2, #248	@ 0xf8
 800a9aa:	701a      	strb	r2, [r3, #0]
		st_word(buf + BPB_SecPerTrk, 63);				/* Number of sectors per track (for int13) */
 800a9ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a9ae:	3318      	adds	r3, #24
 800a9b0:	213f      	movs	r1, #63	@ 0x3f
 800a9b2:	4618      	mov	r0, r3
 800a9b4:	f7fd fa70 	bl	8007e98 <st_word>
		st_word(buf + BPB_NumHeads, 255);				/* Number of heads (for int13) */
 800a9b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a9ba:	331a      	adds	r3, #26
 800a9bc:	21ff      	movs	r1, #255	@ 0xff
 800a9be:	4618      	mov	r0, r3
 800a9c0:	f7fd fa6a 	bl	8007e98 <st_word>
		st_dword(buf + BPB_HiddSec, (DWORD)b_vol);		/* Volume offset in the physical drive [sector] */
 800a9c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a9c6:	331c      	adds	r3, #28
 800a9c8:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 800a9ca:	4618      	mov	r0, r3
 800a9cc:	f7fd fa7f 	bl	8007ece <st_dword>
		if (fsty == FS_FAT32) {
 800a9d0:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 800a9d4:	2b03      	cmp	r3, #3
 800a9d6:	d12d      	bne.n	800aa34 <f_mkfs+0x600>
			st_dword(buf + BS_VolID32, vsn);			/* VSN */
 800a9d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a9da:	3343      	adds	r3, #67	@ 0x43
 800a9dc:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800a9de:	4618      	mov	r0, r3
 800a9e0:	f7fd fa75 	bl	8007ece <st_dword>
			st_dword(buf + BPB_FATSz32, sz_fat);		/* FAT size [sector] */
 800a9e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a9e6:	3324      	adds	r3, #36	@ 0x24
 800a9e8:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800a9ea:	4618      	mov	r0, r3
 800a9ec:	f7fd fa6f 	bl	8007ece <st_dword>
			st_dword(buf + BPB_RootClus32, 2);			/* Root directory cluster # (2) */
 800a9f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a9f2:	332c      	adds	r3, #44	@ 0x2c
 800a9f4:	2102      	movs	r1, #2
 800a9f6:	4618      	mov	r0, r3
 800a9f8:	f7fd fa69 	bl	8007ece <st_dword>
			st_word(buf + BPB_FSInfo32, 1);				/* Offset of FSINFO sector (VBR + 1) */
 800a9fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a9fe:	3330      	adds	r3, #48	@ 0x30
 800aa00:	2101      	movs	r1, #1
 800aa02:	4618      	mov	r0, r3
 800aa04:	f7fd fa48 	bl	8007e98 <st_word>
			st_word(buf + BPB_BkBootSec32, 6);			/* Offset of backup VBR (VBR + 6) */
 800aa08:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aa0a:	3332      	adds	r3, #50	@ 0x32
 800aa0c:	2106      	movs	r1, #6
 800aa0e:	4618      	mov	r0, r3
 800aa10:	f7fd fa42 	bl	8007e98 <st_word>
			buf[BS_DrvNum32] = 0x80;					/* Drive number (for int13) */
 800aa14:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aa16:	3340      	adds	r3, #64	@ 0x40
 800aa18:	2280      	movs	r2, #128	@ 0x80
 800aa1a:	701a      	strb	r2, [r3, #0]
			buf[BS_BootSig32] = 0x29;					/* Extended boot signature */
 800aa1c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aa1e:	3342      	adds	r3, #66	@ 0x42
 800aa20:	2229      	movs	r2, #41	@ 0x29
 800aa22:	701a      	strb	r2, [r3, #0]
			memcpy(buf + BS_VolLab32, "NO NAME    " "FAT32   ", 19);	/* Volume label, FAT signature */
 800aa24:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aa26:	3347      	adds	r3, #71	@ 0x47
 800aa28:	2213      	movs	r2, #19
 800aa2a:	4971      	ldr	r1, [pc, #452]	@ (800abf0 <f_mkfs+0x7bc>)
 800aa2c:	4618      	mov	r0, r3
 800aa2e:	f00b fb2f 	bl	8016090 <memcpy>
 800aa32:	e01c      	b.n	800aa6e <f_mkfs+0x63a>
		} else {
			st_dword(buf + BS_VolID, vsn);				/* VSN */
 800aa34:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aa36:	3327      	adds	r3, #39	@ 0x27
 800aa38:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800aa3a:	4618      	mov	r0, r3
 800aa3c:	f7fd fa47 	bl	8007ece <st_dword>
			st_word(buf + BPB_FATSz16, (WORD)sz_fat);	/* FAT size [sector] */
 800aa40:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aa42:	3316      	adds	r3, #22
 800aa44:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800aa46:	b292      	uxth	r2, r2
 800aa48:	4611      	mov	r1, r2
 800aa4a:	4618      	mov	r0, r3
 800aa4c:	f7fd fa24 	bl	8007e98 <st_word>
			buf[BS_DrvNum] = 0x80;						/* Drive number (for int13) */
 800aa50:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aa52:	3324      	adds	r3, #36	@ 0x24
 800aa54:	2280      	movs	r2, #128	@ 0x80
 800aa56:	701a      	strb	r2, [r3, #0]
			buf[BS_BootSig] = 0x29;						/* Extended boot signature */
 800aa58:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aa5a:	3326      	adds	r3, #38	@ 0x26
 800aa5c:	2229      	movs	r2, #41	@ 0x29
 800aa5e:	701a      	strb	r2, [r3, #0]
			memcpy(buf + BS_VolLab, "NO NAME    " "FAT     ", 19);	/* Volume label, FAT signature */
 800aa60:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aa62:	332b      	adds	r3, #43	@ 0x2b
 800aa64:	2213      	movs	r2, #19
 800aa66:	4963      	ldr	r1, [pc, #396]	@ (800abf4 <f_mkfs+0x7c0>)
 800aa68:	4618      	mov	r0, r3
 800aa6a:	f00b fb11 	bl	8016090 <memcpy>
		}
		st_word(buf + BS_55AA, 0xAA55);					/* Signature (offset is fixed here regardless of sector size) */
 800aa6e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aa70:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 800aa74:	f64a 2155 	movw	r1, #43605	@ 0xaa55
 800aa78:	4618      	mov	r0, r3
 800aa7a:	f7fd fa0d 	bl	8007e98 <st_word>
		if (disk_write(pdrv, buf, b_vol, 1) != RES_OK) LEAVE_MKFS(FR_DISK_ERR);	/* Write it to the VBR sector */
 800aa7e:	f897 0043 	ldrb.w	r0, [r7, #67]	@ 0x43
 800aa82:	2301      	movs	r3, #1
 800aa84:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800aa86:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800aa88:	f7fd f914 	bl	8007cb4 <disk_write>
 800aa8c:	4603      	mov	r3, r0
 800aa8e:	2b00      	cmp	r3, #0
 800aa90:	d001      	beq.n	800aa96 <f_mkfs+0x662>
 800aa92:	2301      	movs	r3, #1
 800aa94:	e11a      	b.n	800accc <f_mkfs+0x898>

		/* Create FSINFO record if needed */
		if (fsty == FS_FAT32) {
 800aa96:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 800aa9a:	2b03      	cmp	r3, #3
 800aa9c:	d140      	bne.n	800ab20 <f_mkfs+0x6ec>
			disk_write(pdrv, buf, b_vol + 6, 1);		/* Write backup VBR (VBR + 6) */
 800aa9e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800aaa0:	1d9a      	adds	r2, r3, #6
 800aaa2:	f897 0043 	ldrb.w	r0, [r7, #67]	@ 0x43
 800aaa6:	2301      	movs	r3, #1
 800aaa8:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800aaaa:	f7fd f903 	bl	8007cb4 <disk_write>
			memset(buf, 0, ss);
 800aaae:	8c3b      	ldrh	r3, [r7, #32]
 800aab0:	461a      	mov	r2, r3
 800aab2:	2100      	movs	r1, #0
 800aab4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800aab6:	f00b fa67 	bl	8015f88 <memset>
			st_dword(buf + FSI_LeadSig, 0x41615252);
 800aaba:	494f      	ldr	r1, [pc, #316]	@ (800abf8 <f_mkfs+0x7c4>)
 800aabc:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800aabe:	f7fd fa06 	bl	8007ece <st_dword>
			st_dword(buf + FSI_StrucSig, 0x61417272);
 800aac2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aac4:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 800aac8:	494c      	ldr	r1, [pc, #304]	@ (800abfc <f_mkfs+0x7c8>)
 800aaca:	4618      	mov	r0, r3
 800aacc:	f7fd f9ff 	bl	8007ece <st_dword>
			st_dword(buf + FSI_Free_Count, n_clst - 1);	/* Number of free clusters */
 800aad0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aad2:	f503 72f4 	add.w	r2, r3, #488	@ 0x1e8
 800aad6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800aad8:	3b01      	subs	r3, #1
 800aada:	4619      	mov	r1, r3
 800aadc:	4610      	mov	r0, r2
 800aade:	f7fd f9f6 	bl	8007ece <st_dword>
			st_dword(buf + FSI_Nxt_Free, 2);			/* Last allocated cluster# */
 800aae2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aae4:	f503 73f6 	add.w	r3, r3, #492	@ 0x1ec
 800aae8:	2102      	movs	r1, #2
 800aaea:	4618      	mov	r0, r3
 800aaec:	f7fd f9ef 	bl	8007ece <st_dword>
			st_word(buf + BS_55AA, 0xAA55);
 800aaf0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aaf2:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 800aaf6:	f64a 2155 	movw	r1, #43605	@ 0xaa55
 800aafa:	4618      	mov	r0, r3
 800aafc:	f7fd f9cc 	bl	8007e98 <st_word>
			disk_write(pdrv, buf, b_vol + 7, 1);		/* Write backup FSINFO (VBR + 7) */
 800ab00:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800ab02:	1dda      	adds	r2, r3, #7
 800ab04:	f897 0043 	ldrb.w	r0, [r7, #67]	@ 0x43
 800ab08:	2301      	movs	r3, #1
 800ab0a:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800ab0c:	f7fd f8d2 	bl	8007cb4 <disk_write>
			disk_write(pdrv, buf, b_vol + 1, 1);		/* Write original FSINFO (VBR + 1) */
 800ab10:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800ab12:	1c5a      	adds	r2, r3, #1
 800ab14:	f897 0043 	ldrb.w	r0, [r7, #67]	@ 0x43
 800ab18:	2301      	movs	r3, #1
 800ab1a:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800ab1c:	f7fd f8ca 	bl	8007cb4 <disk_write>
		}

		/* Initialize FAT area */
		memset(buf, 0, sz_buf * ss);
 800ab20:	8c3b      	ldrh	r3, [r7, #32]
 800ab22:	461a      	mov	r2, r3
 800ab24:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ab26:	fb02 f303 	mul.w	r3, r2, r3
 800ab2a:	461a      	mov	r2, r3
 800ab2c:	2100      	movs	r1, #0
 800ab2e:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800ab30:	f00b fa2a 	bl	8015f88 <memset>
		sect = b_fat;		/* FAT start sector */
 800ab34:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800ab36:	673b      	str	r3, [r7, #112]	@ 0x70
		for (i = 0; i < n_fat; i++) {			/* Initialize FATs each */
 800ab38:	2300      	movs	r3, #0
 800ab3a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800ab3c:	e04b      	b.n	800abd6 <f_mkfs+0x7a2>
			if (fsty == FS_FAT32) {
 800ab3e:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 800ab42:	2b03      	cmp	r3, #3
 800ab44:	d113      	bne.n	800ab6e <f_mkfs+0x73a>
				st_dword(buf + 0, 0xFFFFFFF8);	/* FAT[0] */
 800ab46:	f06f 0107 	mvn.w	r1, #7
 800ab4a:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800ab4c:	f7fd f9bf 	bl	8007ece <st_dword>
				st_dword(buf + 4, 0xFFFFFFFF);	/* FAT[1] */
 800ab50:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ab52:	3304      	adds	r3, #4
 800ab54:	f04f 31ff 	mov.w	r1, #4294967295
 800ab58:	4618      	mov	r0, r3
 800ab5a:	f7fd f9b8 	bl	8007ece <st_dword>
				st_dword(buf + 8, 0x0FFFFFFF);	/* FAT[2] (root directory) */
 800ab5e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ab60:	3308      	adds	r3, #8
 800ab62:	f06f 4170 	mvn.w	r1, #4026531840	@ 0xf0000000
 800ab66:	4618      	mov	r0, r3
 800ab68:	f7fd f9b1 	bl	8007ece <st_dword>
 800ab6c:	e00b      	b.n	800ab86 <f_mkfs+0x752>
			} else {
				st_dword(buf + 0, (fsty == FS_FAT12) ? 0xFFFFF8 : 0xFFFFFFF8);	/* FAT[0] and FAT[1] */
 800ab6e:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 800ab72:	2b01      	cmp	r3, #1
 800ab74:	d101      	bne.n	800ab7a <f_mkfs+0x746>
 800ab76:	4b22      	ldr	r3, [pc, #136]	@ (800ac00 <f_mkfs+0x7cc>)
 800ab78:	e001      	b.n	800ab7e <f_mkfs+0x74a>
 800ab7a:	f06f 0307 	mvn.w	r3, #7
 800ab7e:	4619      	mov	r1, r3
 800ab80:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800ab82:	f7fd f9a4 	bl	8007ece <st_dword>
			}
			nsect = sz_fat;		/* Number of FAT sectors */
 800ab86:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ab88:	65fb      	str	r3, [r7, #92]	@ 0x5c
			do {	/* Fill FAT sectors */
				n = (nsect > sz_buf) ? sz_buf : nsect;
 800ab8a:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800ab8c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ab8e:	4293      	cmp	r3, r2
 800ab90:	bf28      	it	cs
 800ab92:	4613      	movcs	r3, r2
 800ab94:	667b      	str	r3, [r7, #100]	@ 0x64
				if (disk_write(pdrv, buf, sect, (UINT)n) != RES_OK) LEAVE_MKFS(FR_DISK_ERR);
 800ab96:	f897 0043 	ldrb.w	r0, [r7, #67]	@ 0x43
 800ab9a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800ab9c:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 800ab9e:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800aba0:	f7fd f888 	bl	8007cb4 <disk_write>
 800aba4:	4603      	mov	r3, r0
 800aba6:	2b00      	cmp	r3, #0
 800aba8:	d001      	beq.n	800abae <f_mkfs+0x77a>
 800abaa:	2301      	movs	r3, #1
 800abac:	e08e      	b.n	800accc <f_mkfs+0x898>
				memset(buf, 0, ss);	/* Rest of FAT all are cleared */
 800abae:	8c3b      	ldrh	r3, [r7, #32]
 800abb0:	461a      	mov	r2, r3
 800abb2:	2100      	movs	r1, #0
 800abb4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800abb6:	f00b f9e7 	bl	8015f88 <memset>
				sect += n; nsect -= n;
 800abba:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 800abbc:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800abbe:	4413      	add	r3, r2
 800abc0:	673b      	str	r3, [r7, #112]	@ 0x70
 800abc2:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800abc4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800abc6:	1ad3      	subs	r3, r2, r3
 800abc8:	65fb      	str	r3, [r7, #92]	@ 0x5c
			} while (nsect);
 800abca:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800abcc:	2b00      	cmp	r3, #0
 800abce:	d1dc      	bne.n	800ab8a <f_mkfs+0x756>
		for (i = 0; i < n_fat; i++) {			/* Initialize FATs each */
 800abd0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800abd2:	3301      	adds	r3, #1
 800abd4:	64bb      	str	r3, [r7, #72]	@ 0x48
 800abd6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800abd8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800abda:	429a      	cmp	r2, r3
 800abdc:	d3af      	bcc.n	800ab3e <f_mkfs+0x70a>
		}

		/* Initialize root directory (fill with zero) */
		nsect = (fsty == FS_FAT32) ? pau : sz_dir;	/* Number of root directory sectors */
 800abde:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 800abe2:	2b03      	cmp	r3, #3
 800abe4:	d10e      	bne.n	800ac04 <f_mkfs+0x7d0>
 800abe6:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800abe8:	e00d      	b.n	800ac06 <f_mkfs+0x7d2>
 800abea:	bf00      	nop
 800abec:	08017570 	.word	0x08017570
 800abf0:	0801757c 	.word	0x0801757c
 800abf4:	08017590 	.word	0x08017590
 800abf8:	41615252 	.word	0x41615252
 800abfc:	61417272 	.word	0x61417272
 800ac00:	00fffff8 	.word	0x00fffff8
 800ac04:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800ac06:	65fb      	str	r3, [r7, #92]	@ 0x5c
		do {
			n = (nsect > sz_buf) ? sz_buf : nsect;
 800ac08:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800ac0a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ac0c:	4293      	cmp	r3, r2
 800ac0e:	bf28      	it	cs
 800ac10:	4613      	movcs	r3, r2
 800ac12:	667b      	str	r3, [r7, #100]	@ 0x64
			if (disk_write(pdrv, buf, sect, (UINT)n) != RES_OK) LEAVE_MKFS(FR_DISK_ERR);
 800ac14:	f897 0043 	ldrb.w	r0, [r7, #67]	@ 0x43
 800ac18:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800ac1a:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 800ac1c:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800ac1e:	f7fd f849 	bl	8007cb4 <disk_write>
 800ac22:	4603      	mov	r3, r0
 800ac24:	2b00      	cmp	r3, #0
 800ac26:	d001      	beq.n	800ac2c <f_mkfs+0x7f8>
 800ac28:	2301      	movs	r3, #1
 800ac2a:	e04f      	b.n	800accc <f_mkfs+0x898>
			sect += n; nsect -= n;
 800ac2c:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 800ac2e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800ac30:	4413      	add	r3, r2
 800ac32:	673b      	str	r3, [r7, #112]	@ 0x70
 800ac34:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800ac36:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800ac38:	1ad3      	subs	r3, r2, r3
 800ac3a:	65fb      	str	r3, [r7, #92]	@ 0x5c
		} while (nsect);
 800ac3c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800ac3e:	2b00      	cmp	r3, #0
 800ac40:	d1e2      	bne.n	800ac08 <f_mkfs+0x7d4>
	/* A FAT volume has been created here */

	/* Determine system ID in the MBR partition table */
	if (FF_FS_EXFAT && fsty == FS_EXFAT) {
		sys = 0x07;		/* exFAT */
	} else if (fsty == FS_FAT32) {
 800ac42:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 800ac46:	2b03      	cmp	r3, #3
 800ac48:	d103      	bne.n	800ac52 <f_mkfs+0x81e>
		sys = 0x0C;		/* FAT32X */
 800ac4a:	230c      	movs	r3, #12
 800ac4c:	f887 305a 	strb.w	r3, [r7, #90]	@ 0x5a
 800ac50:	e012      	b.n	800ac78 <f_mkfs+0x844>
	} else if (sz_vol >= 0x10000) {
 800ac52:	69bb      	ldr	r3, [r7, #24]
 800ac54:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800ac58:	d303      	bcc.n	800ac62 <f_mkfs+0x82e>
		sys = 0x06;		/* FAT12/16 (large) */
 800ac5a:	2306      	movs	r3, #6
 800ac5c:	f887 305a 	strb.w	r3, [r7, #90]	@ 0x5a
 800ac60:	e00a      	b.n	800ac78 <f_mkfs+0x844>
	} else if (fsty == FS_FAT16) {
 800ac62:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 800ac66:	2b02      	cmp	r3, #2
 800ac68:	d103      	bne.n	800ac72 <f_mkfs+0x83e>
		sys = 0x04;		/* FAT16 */
 800ac6a:	2304      	movs	r3, #4
 800ac6c:	f887 305a 	strb.w	r3, [r7, #90]	@ 0x5a
 800ac70:	e002      	b.n	800ac78 <f_mkfs+0x844>
	} else {
		sys = 0x01;		/* FAT12 */
 800ac72:	2301      	movs	r3, #1
 800ac74:	f887 305a 	strb.w	r3, [r7, #90]	@ 0x5a
			if (disk_read(pdrv, buf, 0, 1) != RES_OK) LEAVE_MKFS(FR_DISK_ERR);	/* Read the MBR */
			buf[MBR_Table + (ipart - 1) * SZ_PTE + PTE_System] = sys;			/* Set system ID */
			if (disk_write(pdrv, buf, 0, 1) != RES_OK) LEAVE_MKFS(FR_DISK_ERR);	/* Write it back to the MBR */
		}
	} else {								/* Volume as a new single partition */
		if (!(fsopt & FM_SFD)) {			/* Create partition table if not in SFD format */
 800ac78:	f897 3040 	ldrb.w	r3, [r7, #64]	@ 0x40
 800ac7c:	f003 0308 	and.w	r3, r3, #8
 800ac80:	2b00      	cmp	r3, #0
 800ac82:	d116      	bne.n	800acb2 <f_mkfs+0x87e>
			lba[0] = sz_vol; lba[1] = 0;
 800ac84:	69bb      	ldr	r3, [r7, #24]
 800ac86:	613b      	str	r3, [r7, #16]
 800ac88:	2300      	movs	r3, #0
 800ac8a:	617b      	str	r3, [r7, #20]
			res = create_partition(pdrv, lba, sys, buf);
 800ac8c:	f897 205a 	ldrb.w	r2, [r7, #90]	@ 0x5a
 800ac90:	f107 0110 	add.w	r1, r7, #16
 800ac94:	f897 0043 	ldrb.w	r0, [r7, #67]	@ 0x43
 800ac98:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ac9a:	f7ff faa7 	bl	800a1ec <create_partition>
 800ac9e:	4603      	mov	r3, r0
 800aca0:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
			if (res != FR_OK) LEAVE_MKFS(res);
 800aca4:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800aca8:	2b00      	cmp	r3, #0
 800acaa:	d002      	beq.n	800acb2 <f_mkfs+0x87e>
 800acac:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800acb0:	e00c      	b.n	800accc <f_mkfs+0x898>
		}
	}

	if (disk_ioctl(pdrv, CTRL_SYNC, 0) != RES_OK) LEAVE_MKFS(FR_DISK_ERR);
 800acb2:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800acb6:	2200      	movs	r2, #0
 800acb8:	2100      	movs	r1, #0
 800acba:	4618      	mov	r0, r3
 800acbc:	f7fd f82e 	bl	8007d1c <disk_ioctl>
 800acc0:	4603      	mov	r3, r0
 800acc2:	2b00      	cmp	r3, #0
 800acc4:	d001      	beq.n	800acca <f_mkfs+0x896>
 800acc6:	2301      	movs	r3, #1
 800acc8:	e000      	b.n	800accc <f_mkfs+0x898>

	LEAVE_MKFS(FR_OK);
 800acca:	2300      	movs	r3, #0
}
 800accc:	4618      	mov	r0, r3
 800acce:	3778      	adds	r7, #120	@ 0x78
 800acd0:	46bd      	mov	sp, r7
 800acd2:	bd80      	pop	{r7, pc}

0800acd4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 800acd4:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800ad0c <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 800acd8:	f7fc ff58 	bl	8007b8c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800acdc:	480c      	ldr	r0, [pc, #48]	@ (800ad10 <LoopForever+0x6>)
  ldr r1, =_edata
 800acde:	490d      	ldr	r1, [pc, #52]	@ (800ad14 <LoopForever+0xa>)
  ldr r2, =_sidata
 800ace0:	4a0d      	ldr	r2, [pc, #52]	@ (800ad18 <LoopForever+0xe>)
  movs r3, #0
 800ace2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800ace4:	e002      	b.n	800acec <LoopCopyDataInit>

0800ace6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800ace6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800ace8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800acea:	3304      	adds	r3, #4

0800acec <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800acec:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800acee:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800acf0:	d3f9      	bcc.n	800ace6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800acf2:	4a0a      	ldr	r2, [pc, #40]	@ (800ad1c <LoopForever+0x12>)
  ldr r4, =_ebss
 800acf4:	4c0a      	ldr	r4, [pc, #40]	@ (800ad20 <LoopForever+0x16>)
  movs r3, #0
 800acf6:	2300      	movs	r3, #0
  b LoopFillZerobss
 800acf8:	e001      	b.n	800acfe <LoopFillZerobss>

0800acfa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800acfa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800acfc:	3204      	adds	r2, #4

0800acfe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800acfe:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800ad00:	d3fb      	bcc.n	800acfa <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800ad02:	f00b f997 	bl	8016034 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800ad06:	f7f9 f9dd 	bl	80040c4 <main>

0800ad0a <LoopForever>:

LoopForever:
    b LoopForever
 800ad0a:	e7fe      	b.n	800ad0a <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 800ad0c:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 800ad10:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800ad14:	200002ec 	.word	0x200002ec
  ldr r2, =_sidata
 800ad18:	08017848 	.word	0x08017848
  ldr r2, =_sbss
 800ad1c:	200002f0 	.word	0x200002f0
  ldr r4, =_ebss
 800ad20:	20005b58 	.word	0x20005b58

0800ad24 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800ad24:	e7fe      	b.n	800ad24 <ADC1_2_IRQHandler>

0800ad26 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800ad26:	b580      	push	{r7, lr}
 800ad28:	b082      	sub	sp, #8
 800ad2a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800ad2c:	2300      	movs	r3, #0
 800ad2e:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800ad30:	2003      	movs	r0, #3
 800ad32:	f001 fd11 	bl	800c758 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800ad36:	200f      	movs	r0, #15
 800ad38:	f000 f80e 	bl	800ad58 <HAL_InitTick>
 800ad3c:	4603      	mov	r3, r0
 800ad3e:	2b00      	cmp	r3, #0
 800ad40:	d002      	beq.n	800ad48 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800ad42:	2301      	movs	r3, #1
 800ad44:	71fb      	strb	r3, [r7, #7]
 800ad46:	e001      	b.n	800ad4c <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800ad48:	f7fc fa56 	bl	80071f8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800ad4c:	79fb      	ldrb	r3, [r7, #7]
}
 800ad4e:	4618      	mov	r0, r3
 800ad50:	3708      	adds	r7, #8
 800ad52:	46bd      	mov	sp, r7
 800ad54:	bd80      	pop	{r7, pc}
	...

0800ad58 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800ad58:	b580      	push	{r7, lr}
 800ad5a:	b084      	sub	sp, #16
 800ad5c:	af00      	add	r7, sp, #0
 800ad5e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 800ad60:	2300      	movs	r3, #0
 800ad62:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 800ad64:	4b17      	ldr	r3, [pc, #92]	@ (800adc4 <HAL_InitTick+0x6c>)
 800ad66:	781b      	ldrb	r3, [r3, #0]
 800ad68:	2b00      	cmp	r3, #0
 800ad6a:	d023      	beq.n	800adb4 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 800ad6c:	4b16      	ldr	r3, [pc, #88]	@ (800adc8 <HAL_InitTick+0x70>)
 800ad6e:	681a      	ldr	r2, [r3, #0]
 800ad70:	4b14      	ldr	r3, [pc, #80]	@ (800adc4 <HAL_InitTick+0x6c>)
 800ad72:	781b      	ldrb	r3, [r3, #0]
 800ad74:	4619      	mov	r1, r3
 800ad76:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800ad7a:	fbb3 f3f1 	udiv	r3, r3, r1
 800ad7e:	fbb2 f3f3 	udiv	r3, r2, r3
 800ad82:	4618      	mov	r0, r3
 800ad84:	f001 fd21 	bl	800c7ca <HAL_SYSTICK_Config>
 800ad88:	4603      	mov	r3, r0
 800ad8a:	2b00      	cmp	r3, #0
 800ad8c:	d10f      	bne.n	800adae <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800ad8e:	687b      	ldr	r3, [r7, #4]
 800ad90:	2b0f      	cmp	r3, #15
 800ad92:	d809      	bhi.n	800ada8 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800ad94:	2200      	movs	r2, #0
 800ad96:	6879      	ldr	r1, [r7, #4]
 800ad98:	f04f 30ff 	mov.w	r0, #4294967295
 800ad9c:	f001 fce7 	bl	800c76e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800ada0:	4a0a      	ldr	r2, [pc, #40]	@ (800adcc <HAL_InitTick+0x74>)
 800ada2:	687b      	ldr	r3, [r7, #4]
 800ada4:	6013      	str	r3, [r2, #0]
 800ada6:	e007      	b.n	800adb8 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 800ada8:	2301      	movs	r3, #1
 800adaa:	73fb      	strb	r3, [r7, #15]
 800adac:	e004      	b.n	800adb8 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 800adae:	2301      	movs	r3, #1
 800adb0:	73fb      	strb	r3, [r7, #15]
 800adb2:	e001      	b.n	800adb8 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 800adb4:	2301      	movs	r3, #1
 800adb6:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800adb8:	7bfb      	ldrb	r3, [r7, #15]
}
 800adba:	4618      	mov	r0, r3
 800adbc:	3710      	adds	r7, #16
 800adbe:	46bd      	mov	sp, r7
 800adc0:	bd80      	pop	{r7, pc}
 800adc2:	bf00      	nop
 800adc4:	20000278 	.word	0x20000278
 800adc8:	20000268 	.word	0x20000268
 800adcc:	20000274 	.word	0x20000274

0800add0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800add0:	b480      	push	{r7}
 800add2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800add4:	4b06      	ldr	r3, [pc, #24]	@ (800adf0 <HAL_IncTick+0x20>)
 800add6:	781b      	ldrb	r3, [r3, #0]
 800add8:	461a      	mov	r2, r3
 800adda:	4b06      	ldr	r3, [pc, #24]	@ (800adf4 <HAL_IncTick+0x24>)
 800addc:	681b      	ldr	r3, [r3, #0]
 800adde:	4413      	add	r3, r2
 800ade0:	4a04      	ldr	r2, [pc, #16]	@ (800adf4 <HAL_IncTick+0x24>)
 800ade2:	6013      	str	r3, [r2, #0]
}
 800ade4:	bf00      	nop
 800ade6:	46bd      	mov	sp, r7
 800ade8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adec:	4770      	bx	lr
 800adee:	bf00      	nop
 800adf0:	20000278 	.word	0x20000278
 800adf4:	20005a0c 	.word	0x20005a0c

0800adf8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800adf8:	b480      	push	{r7}
 800adfa:	af00      	add	r7, sp, #0
  return uwTick;
 800adfc:	4b03      	ldr	r3, [pc, #12]	@ (800ae0c <HAL_GetTick+0x14>)
 800adfe:	681b      	ldr	r3, [r3, #0]
}
 800ae00:	4618      	mov	r0, r3
 800ae02:	46bd      	mov	sp, r7
 800ae04:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae08:	4770      	bx	lr
 800ae0a:	bf00      	nop
 800ae0c:	20005a0c 	.word	0x20005a0c

0800ae10 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800ae10:	b580      	push	{r7, lr}
 800ae12:	b084      	sub	sp, #16
 800ae14:	af00      	add	r7, sp, #0
 800ae16:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800ae18:	f7ff ffee 	bl	800adf8 <HAL_GetTick>
 800ae1c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800ae1e:	687b      	ldr	r3, [r7, #4]
 800ae20:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 800ae22:	68fb      	ldr	r3, [r7, #12]
 800ae24:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ae28:	d005      	beq.n	800ae36 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 800ae2a:	4b0a      	ldr	r3, [pc, #40]	@ (800ae54 <HAL_Delay+0x44>)
 800ae2c:	781b      	ldrb	r3, [r3, #0]
 800ae2e:	461a      	mov	r2, r3
 800ae30:	68fb      	ldr	r3, [r7, #12]
 800ae32:	4413      	add	r3, r2
 800ae34:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800ae36:	bf00      	nop
 800ae38:	f7ff ffde 	bl	800adf8 <HAL_GetTick>
 800ae3c:	4602      	mov	r2, r0
 800ae3e:	68bb      	ldr	r3, [r7, #8]
 800ae40:	1ad3      	subs	r3, r2, r3
 800ae42:	68fa      	ldr	r2, [r7, #12]
 800ae44:	429a      	cmp	r2, r3
 800ae46:	d8f7      	bhi.n	800ae38 <HAL_Delay+0x28>
  {
  }
}
 800ae48:	bf00      	nop
 800ae4a:	bf00      	nop
 800ae4c:	3710      	adds	r7, #16
 800ae4e:	46bd      	mov	sp, r7
 800ae50:	bd80      	pop	{r7, pc}
 800ae52:	bf00      	nop
 800ae54:	20000278 	.word	0x20000278

0800ae58 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 800ae58:	b480      	push	{r7}
 800ae5a:	b083      	sub	sp, #12
 800ae5c:	af00      	add	r7, sp, #0
 800ae5e:	6078      	str	r0, [r7, #4]
 800ae60:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 800ae62:	687b      	ldr	r3, [r7, #4]
 800ae64:	689b      	ldr	r3, [r3, #8]
 800ae66:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 800ae6a:	683b      	ldr	r3, [r7, #0]
 800ae6c:	431a      	orrs	r2, r3
 800ae6e:	687b      	ldr	r3, [r7, #4]
 800ae70:	609a      	str	r2, [r3, #8]
}
 800ae72:	bf00      	nop
 800ae74:	370c      	adds	r7, #12
 800ae76:	46bd      	mov	sp, r7
 800ae78:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae7c:	4770      	bx	lr

0800ae7e <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 800ae7e:	b480      	push	{r7}
 800ae80:	b083      	sub	sp, #12
 800ae82:	af00      	add	r7, sp, #0
 800ae84:	6078      	str	r0, [r7, #4]
 800ae86:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 800ae88:	687b      	ldr	r3, [r7, #4]
 800ae8a:	689b      	ldr	r3, [r3, #8]
 800ae8c:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 800ae90:	683b      	ldr	r3, [r7, #0]
 800ae92:	431a      	orrs	r2, r3
 800ae94:	687b      	ldr	r3, [r7, #4]
 800ae96:	609a      	str	r2, [r3, #8]
}
 800ae98:	bf00      	nop
 800ae9a:	370c      	adds	r7, #12
 800ae9c:	46bd      	mov	sp, r7
 800ae9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aea2:	4770      	bx	lr

0800aea4 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 800aea4:	b480      	push	{r7}
 800aea6:	b083      	sub	sp, #12
 800aea8:	af00      	add	r7, sp, #0
 800aeaa:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 800aeac:	687b      	ldr	r3, [r7, #4]
 800aeae:	689b      	ldr	r3, [r3, #8]
 800aeb0:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 800aeb4:	4618      	mov	r0, r3
 800aeb6:	370c      	adds	r7, #12
 800aeb8:	46bd      	mov	sp, r7
 800aeba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aebe:	4770      	bx	lr

0800aec0 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 800aec0:	b480      	push	{r7}
 800aec2:	b087      	sub	sp, #28
 800aec4:	af00      	add	r7, sp, #0
 800aec6:	60f8      	str	r0, [r7, #12]
 800aec8:	60b9      	str	r1, [r7, #8]
 800aeca:	607a      	str	r2, [r7, #4]
 800aecc:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800aece:	68fb      	ldr	r3, [r7, #12]
 800aed0:	3360      	adds	r3, #96	@ 0x60
 800aed2:	461a      	mov	r2, r3
 800aed4:	68bb      	ldr	r3, [r7, #8]
 800aed6:	009b      	lsls	r3, r3, #2
 800aed8:	4413      	add	r3, r2
 800aeda:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800aedc:	697b      	ldr	r3, [r7, #20]
 800aede:	681a      	ldr	r2, [r3, #0]
 800aee0:	4b08      	ldr	r3, [pc, #32]	@ (800af04 <LL_ADC_SetOffset+0x44>)
 800aee2:	4013      	ands	r3, r2
 800aee4:	687a      	ldr	r2, [r7, #4]
 800aee6:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 800aeea:	683a      	ldr	r2, [r7, #0]
 800aeec:	430a      	orrs	r2, r1
 800aeee:	4313      	orrs	r3, r2
 800aef0:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 800aef4:	697b      	ldr	r3, [r7, #20]
 800aef6:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 800aef8:	bf00      	nop
 800aefa:	371c      	adds	r7, #28
 800aefc:	46bd      	mov	sp, r7
 800aefe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af02:	4770      	bx	lr
 800af04:	03fff000 	.word	0x03fff000

0800af08 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 800af08:	b480      	push	{r7}
 800af0a:	b085      	sub	sp, #20
 800af0c:	af00      	add	r7, sp, #0
 800af0e:	6078      	str	r0, [r7, #4]
 800af10:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800af12:	687b      	ldr	r3, [r7, #4]
 800af14:	3360      	adds	r3, #96	@ 0x60
 800af16:	461a      	mov	r2, r3
 800af18:	683b      	ldr	r3, [r7, #0]
 800af1a:	009b      	lsls	r3, r3, #2
 800af1c:	4413      	add	r3, r2
 800af1e:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 800af20:	68fb      	ldr	r3, [r7, #12]
 800af22:	681b      	ldr	r3, [r3, #0]
 800af24:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 800af28:	4618      	mov	r0, r3
 800af2a:	3714      	adds	r7, #20
 800af2c:	46bd      	mov	sp, r7
 800af2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af32:	4770      	bx	lr

0800af34 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 800af34:	b480      	push	{r7}
 800af36:	b087      	sub	sp, #28
 800af38:	af00      	add	r7, sp, #0
 800af3a:	60f8      	str	r0, [r7, #12]
 800af3c:	60b9      	str	r1, [r7, #8]
 800af3e:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800af40:	68fb      	ldr	r3, [r7, #12]
 800af42:	3360      	adds	r3, #96	@ 0x60
 800af44:	461a      	mov	r2, r3
 800af46:	68bb      	ldr	r3, [r7, #8]
 800af48:	009b      	lsls	r3, r3, #2
 800af4a:	4413      	add	r3, r2
 800af4c:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800af4e:	697b      	ldr	r3, [r7, #20]
 800af50:	681b      	ldr	r3, [r3, #0]
 800af52:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800af56:	687b      	ldr	r3, [r7, #4]
 800af58:	431a      	orrs	r2, r3
 800af5a:	697b      	ldr	r3, [r7, #20]
 800af5c:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 800af5e:	bf00      	nop
 800af60:	371c      	adds	r7, #28
 800af62:	46bd      	mov	sp, r7
 800af64:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af68:	4770      	bx	lr

0800af6a <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 800af6a:	b480      	push	{r7}
 800af6c:	b083      	sub	sp, #12
 800af6e:	af00      	add	r7, sp, #0
 800af70:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 800af72:	687b      	ldr	r3, [r7, #4]
 800af74:	68db      	ldr	r3, [r3, #12]
 800af76:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800af7a:	2b00      	cmp	r3, #0
 800af7c:	d101      	bne.n	800af82 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 800af7e:	2301      	movs	r3, #1
 800af80:	e000      	b.n	800af84 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 800af82:	2300      	movs	r3, #0
}
 800af84:	4618      	mov	r0, r3
 800af86:	370c      	adds	r7, #12
 800af88:	46bd      	mov	sp, r7
 800af8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af8e:	4770      	bx	lr

0800af90 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 800af90:	b480      	push	{r7}
 800af92:	b087      	sub	sp, #28
 800af94:	af00      	add	r7, sp, #0
 800af96:	60f8      	str	r0, [r7, #12]
 800af98:	60b9      	str	r1, [r7, #8]
 800af9a:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 800af9c:	68fb      	ldr	r3, [r7, #12]
 800af9e:	3330      	adds	r3, #48	@ 0x30
 800afa0:	461a      	mov	r2, r3
 800afa2:	68bb      	ldr	r3, [r7, #8]
 800afa4:	0a1b      	lsrs	r3, r3, #8
 800afa6:	009b      	lsls	r3, r3, #2
 800afa8:	f003 030c 	and.w	r3, r3, #12
 800afac:	4413      	add	r3, r2
 800afae:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 800afb0:	697b      	ldr	r3, [r7, #20]
 800afb2:	681a      	ldr	r2, [r3, #0]
 800afb4:	68bb      	ldr	r3, [r7, #8]
 800afb6:	f003 031f 	and.w	r3, r3, #31
 800afba:	211f      	movs	r1, #31
 800afbc:	fa01 f303 	lsl.w	r3, r1, r3
 800afc0:	43db      	mvns	r3, r3
 800afc2:	401a      	ands	r2, r3
 800afc4:	687b      	ldr	r3, [r7, #4]
 800afc6:	0e9b      	lsrs	r3, r3, #26
 800afc8:	f003 011f 	and.w	r1, r3, #31
 800afcc:	68bb      	ldr	r3, [r7, #8]
 800afce:	f003 031f 	and.w	r3, r3, #31
 800afd2:	fa01 f303 	lsl.w	r3, r1, r3
 800afd6:	431a      	orrs	r2, r3
 800afd8:	697b      	ldr	r3, [r7, #20]
 800afda:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 800afdc:	bf00      	nop
 800afde:	371c      	adds	r7, #28
 800afe0:	46bd      	mov	sp, r7
 800afe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afe6:	4770      	bx	lr

0800afe8 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 800afe8:	b480      	push	{r7}
 800afea:	b087      	sub	sp, #28
 800afec:	af00      	add	r7, sp, #0
 800afee:	60f8      	str	r0, [r7, #12]
 800aff0:	60b9      	str	r1, [r7, #8]
 800aff2:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 800aff4:	68fb      	ldr	r3, [r7, #12]
 800aff6:	3314      	adds	r3, #20
 800aff8:	461a      	mov	r2, r3
 800affa:	68bb      	ldr	r3, [r7, #8]
 800affc:	0e5b      	lsrs	r3, r3, #25
 800affe:	009b      	lsls	r3, r3, #2
 800b000:	f003 0304 	and.w	r3, r3, #4
 800b004:	4413      	add	r3, r2
 800b006:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 800b008:	697b      	ldr	r3, [r7, #20]
 800b00a:	681a      	ldr	r2, [r3, #0]
 800b00c:	68bb      	ldr	r3, [r7, #8]
 800b00e:	0d1b      	lsrs	r3, r3, #20
 800b010:	f003 031f 	and.w	r3, r3, #31
 800b014:	2107      	movs	r1, #7
 800b016:	fa01 f303 	lsl.w	r3, r1, r3
 800b01a:	43db      	mvns	r3, r3
 800b01c:	401a      	ands	r2, r3
 800b01e:	68bb      	ldr	r3, [r7, #8]
 800b020:	0d1b      	lsrs	r3, r3, #20
 800b022:	f003 031f 	and.w	r3, r3, #31
 800b026:	6879      	ldr	r1, [r7, #4]
 800b028:	fa01 f303 	lsl.w	r3, r1, r3
 800b02c:	431a      	orrs	r2, r3
 800b02e:	697b      	ldr	r3, [r7, #20]
 800b030:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 800b032:	bf00      	nop
 800b034:	371c      	adds	r7, #28
 800b036:	46bd      	mov	sp, r7
 800b038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b03c:	4770      	bx	lr
	...

0800b040 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 800b040:	b480      	push	{r7}
 800b042:	b085      	sub	sp, #20
 800b044:	af00      	add	r7, sp, #0
 800b046:	60f8      	str	r0, [r7, #12]
 800b048:	60b9      	str	r1, [r7, #8]
 800b04a:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 800b04c:	68fb      	ldr	r3, [r7, #12]
 800b04e:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 800b052:	68bb      	ldr	r3, [r7, #8]
 800b054:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800b058:	43db      	mvns	r3, r3
 800b05a:	401a      	ands	r2, r3
 800b05c:	687b      	ldr	r3, [r7, #4]
 800b05e:	f003 0318 	and.w	r3, r3, #24
 800b062:	4908      	ldr	r1, [pc, #32]	@ (800b084 <LL_ADC_SetChannelSingleDiff+0x44>)
 800b064:	40d9      	lsrs	r1, r3
 800b066:	68bb      	ldr	r3, [r7, #8]
 800b068:	400b      	ands	r3, r1
 800b06a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800b06e:	431a      	orrs	r2, r3
 800b070:	68fb      	ldr	r3, [r7, #12]
 800b072:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 800b076:	bf00      	nop
 800b078:	3714      	adds	r7, #20
 800b07a:	46bd      	mov	sp, r7
 800b07c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b080:	4770      	bx	lr
 800b082:	bf00      	nop
 800b084:	0007ffff 	.word	0x0007ffff

0800b088 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 800b088:	b480      	push	{r7}
 800b08a:	b083      	sub	sp, #12
 800b08c:	af00      	add	r7, sp, #0
 800b08e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 800b090:	687b      	ldr	r3, [r7, #4]
 800b092:	689b      	ldr	r3, [r3, #8]
 800b094:	f003 031f 	and.w	r3, r3, #31
}
 800b098:	4618      	mov	r0, r3
 800b09a:	370c      	adds	r7, #12
 800b09c:	46bd      	mov	sp, r7
 800b09e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0a2:	4770      	bx	lr

0800b0a4 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 800b0a4:	b480      	push	{r7}
 800b0a6:	b083      	sub	sp, #12
 800b0a8:	af00      	add	r7, sp, #0
 800b0aa:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 800b0ac:	687b      	ldr	r3, [r7, #4]
 800b0ae:	689b      	ldr	r3, [r3, #8]
 800b0b0:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 800b0b4:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800b0b8:	687a      	ldr	r2, [r7, #4]
 800b0ba:	6093      	str	r3, [r2, #8]
}
 800b0bc:	bf00      	nop
 800b0be:	370c      	adds	r7, #12
 800b0c0:	46bd      	mov	sp, r7
 800b0c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0c6:	4770      	bx	lr

0800b0c8 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 800b0c8:	b480      	push	{r7}
 800b0ca:	b083      	sub	sp, #12
 800b0cc:	af00      	add	r7, sp, #0
 800b0ce:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 800b0d0:	687b      	ldr	r3, [r7, #4]
 800b0d2:	689b      	ldr	r3, [r3, #8]
 800b0d4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800b0d8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800b0dc:	d101      	bne.n	800b0e2 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 800b0de:	2301      	movs	r3, #1
 800b0e0:	e000      	b.n	800b0e4 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 800b0e2:	2300      	movs	r3, #0
}
 800b0e4:	4618      	mov	r0, r3
 800b0e6:	370c      	adds	r7, #12
 800b0e8:	46bd      	mov	sp, r7
 800b0ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0ee:	4770      	bx	lr

0800b0f0 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 800b0f0:	b480      	push	{r7}
 800b0f2:	b083      	sub	sp, #12
 800b0f4:	af00      	add	r7, sp, #0
 800b0f6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800b0f8:	687b      	ldr	r3, [r7, #4]
 800b0fa:	689b      	ldr	r3, [r3, #8]
 800b0fc:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 800b100:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800b104:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 800b108:	687b      	ldr	r3, [r7, #4]
 800b10a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 800b10c:	bf00      	nop
 800b10e:	370c      	adds	r7, #12
 800b110:	46bd      	mov	sp, r7
 800b112:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b116:	4770      	bx	lr

0800b118 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 800b118:	b480      	push	{r7}
 800b11a:	b083      	sub	sp, #12
 800b11c:	af00      	add	r7, sp, #0
 800b11e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 800b120:	687b      	ldr	r3, [r7, #4]
 800b122:	689b      	ldr	r3, [r3, #8]
 800b124:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800b128:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800b12c:	d101      	bne.n	800b132 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 800b12e:	2301      	movs	r3, #1
 800b130:	e000      	b.n	800b134 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 800b132:	2300      	movs	r3, #0
}
 800b134:	4618      	mov	r0, r3
 800b136:	370c      	adds	r7, #12
 800b138:	46bd      	mov	sp, r7
 800b13a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b13e:	4770      	bx	lr

0800b140 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 800b140:	b480      	push	{r7}
 800b142:	b083      	sub	sp, #12
 800b144:	af00      	add	r7, sp, #0
 800b146:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800b148:	687b      	ldr	r3, [r7, #4]
 800b14a:	689b      	ldr	r3, [r3, #8]
 800b14c:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800b150:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800b154:	f043 0201 	orr.w	r2, r3, #1
 800b158:	687b      	ldr	r3, [r7, #4]
 800b15a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 800b15c:	bf00      	nop
 800b15e:	370c      	adds	r7, #12
 800b160:	46bd      	mov	sp, r7
 800b162:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b166:	4770      	bx	lr

0800b168 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 800b168:	b480      	push	{r7}
 800b16a:	b083      	sub	sp, #12
 800b16c:	af00      	add	r7, sp, #0
 800b16e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800b170:	687b      	ldr	r3, [r7, #4]
 800b172:	689b      	ldr	r3, [r3, #8]
 800b174:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800b178:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800b17c:	f043 0202 	orr.w	r2, r3, #2
 800b180:	687b      	ldr	r3, [r7, #4]
 800b182:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 800b184:	bf00      	nop
 800b186:	370c      	adds	r7, #12
 800b188:	46bd      	mov	sp, r7
 800b18a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b18e:	4770      	bx	lr

0800b190 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 800b190:	b480      	push	{r7}
 800b192:	b083      	sub	sp, #12
 800b194:	af00      	add	r7, sp, #0
 800b196:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800b198:	687b      	ldr	r3, [r7, #4]
 800b19a:	689b      	ldr	r3, [r3, #8]
 800b19c:	f003 0301 	and.w	r3, r3, #1
 800b1a0:	2b01      	cmp	r3, #1
 800b1a2:	d101      	bne.n	800b1a8 <LL_ADC_IsEnabled+0x18>
 800b1a4:	2301      	movs	r3, #1
 800b1a6:	e000      	b.n	800b1aa <LL_ADC_IsEnabled+0x1a>
 800b1a8:	2300      	movs	r3, #0
}
 800b1aa:	4618      	mov	r0, r3
 800b1ac:	370c      	adds	r7, #12
 800b1ae:	46bd      	mov	sp, r7
 800b1b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1b4:	4770      	bx	lr

0800b1b6 <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(const ADC_TypeDef *ADCx)
{
 800b1b6:	b480      	push	{r7}
 800b1b8:	b083      	sub	sp, #12
 800b1ba:	af00      	add	r7, sp, #0
 800b1bc:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 800b1be:	687b      	ldr	r3, [r7, #4]
 800b1c0:	689b      	ldr	r3, [r3, #8]
 800b1c2:	f003 0302 	and.w	r3, r3, #2
 800b1c6:	2b02      	cmp	r3, #2
 800b1c8:	d101      	bne.n	800b1ce <LL_ADC_IsDisableOngoing+0x18>
 800b1ca:	2301      	movs	r3, #1
 800b1cc:	e000      	b.n	800b1d0 <LL_ADC_IsDisableOngoing+0x1a>
 800b1ce:	2300      	movs	r3, #0
}
 800b1d0:	4618      	mov	r0, r3
 800b1d2:	370c      	adds	r7, #12
 800b1d4:	46bd      	mov	sp, r7
 800b1d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1da:	4770      	bx	lr

0800b1dc <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 800b1dc:	b480      	push	{r7}
 800b1de:	b083      	sub	sp, #12
 800b1e0:	af00      	add	r7, sp, #0
 800b1e2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800b1e4:	687b      	ldr	r3, [r7, #4]
 800b1e6:	689b      	ldr	r3, [r3, #8]
 800b1e8:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800b1ec:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800b1f0:	f043 0204 	orr.w	r2, r3, #4
 800b1f4:	687b      	ldr	r3, [r7, #4]
 800b1f6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 800b1f8:	bf00      	nop
 800b1fa:	370c      	adds	r7, #12
 800b1fc:	46bd      	mov	sp, r7
 800b1fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b202:	4770      	bx	lr

0800b204 <LL_ADC_REG_StopConversion>:
  * @rmtoll CR       ADSTP          LL_ADC_REG_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StopConversion(ADC_TypeDef *ADCx)
{
 800b204:	b480      	push	{r7}
 800b206:	b083      	sub	sp, #12
 800b208:	af00      	add	r7, sp, #0
 800b20a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800b20c:	687b      	ldr	r3, [r7, #4]
 800b20e:	689b      	ldr	r3, [r3, #8]
 800b210:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800b214:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800b218:	f043 0210 	orr.w	r2, r3, #16
 800b21c:	687b      	ldr	r3, [r7, #4]
 800b21e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTP);
}
 800b220:	bf00      	nop
 800b222:	370c      	adds	r7, #12
 800b224:	46bd      	mov	sp, r7
 800b226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b22a:	4770      	bx	lr

0800b22c <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 800b22c:	b480      	push	{r7}
 800b22e:	b083      	sub	sp, #12
 800b230:	af00      	add	r7, sp, #0
 800b232:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800b234:	687b      	ldr	r3, [r7, #4]
 800b236:	689b      	ldr	r3, [r3, #8]
 800b238:	f003 0304 	and.w	r3, r3, #4
 800b23c:	2b04      	cmp	r3, #4
 800b23e:	d101      	bne.n	800b244 <LL_ADC_REG_IsConversionOngoing+0x18>
 800b240:	2301      	movs	r3, #1
 800b242:	e000      	b.n	800b246 <LL_ADC_REG_IsConversionOngoing+0x1a>
 800b244:	2300      	movs	r3, #0
}
 800b246:	4618      	mov	r0, r3
 800b248:	370c      	adds	r7, #12
 800b24a:	46bd      	mov	sp, r7
 800b24c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b250:	4770      	bx	lr

0800b252 <LL_ADC_INJ_StopConversion>:
  * @rmtoll CR       JADSTP         LL_ADC_INJ_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_INJ_StopConversion(ADC_TypeDef *ADCx)
{
 800b252:	b480      	push	{r7}
 800b254:	b083      	sub	sp, #12
 800b256:	af00      	add	r7, sp, #0
 800b258:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800b25a:	687b      	ldr	r3, [r7, #4]
 800b25c:	689b      	ldr	r3, [r3, #8]
 800b25e:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800b262:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800b266:	f043 0220 	orr.w	r2, r3, #32
 800b26a:	687b      	ldr	r3, [r7, #4]
 800b26c:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_JADSTP);
}
 800b26e:	bf00      	nop
 800b270:	370c      	adds	r7, #12
 800b272:	46bd      	mov	sp, r7
 800b274:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b278:	4770      	bx	lr

0800b27a <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 800b27a:	b480      	push	{r7}
 800b27c:	b083      	sub	sp, #12
 800b27e:	af00      	add	r7, sp, #0
 800b280:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 800b282:	687b      	ldr	r3, [r7, #4]
 800b284:	689b      	ldr	r3, [r3, #8]
 800b286:	f003 0308 	and.w	r3, r3, #8
 800b28a:	2b08      	cmp	r3, #8
 800b28c:	d101      	bne.n	800b292 <LL_ADC_INJ_IsConversionOngoing+0x18>
 800b28e:	2301      	movs	r3, #1
 800b290:	e000      	b.n	800b294 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 800b292:	2300      	movs	r3, #0
}
 800b294:	4618      	mov	r0, r3
 800b296:	370c      	adds	r7, #12
 800b298:	46bd      	mov	sp, r7
 800b29a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b29e:	4770      	bx	lr

0800b2a0 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 800b2a0:	b590      	push	{r4, r7, lr}
 800b2a2:	b089      	sub	sp, #36	@ 0x24
 800b2a4:	af00      	add	r7, sp, #0
 800b2a6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800b2a8:	2300      	movs	r3, #0
 800b2aa:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 800b2ac:	2300      	movs	r3, #0
 800b2ae:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 800b2b0:	687b      	ldr	r3, [r7, #4]
 800b2b2:	2b00      	cmp	r3, #0
 800b2b4:	d101      	bne.n	800b2ba <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 800b2b6:	2301      	movs	r3, #1
 800b2b8:	e130      	b.n	800b51c <HAL_ADC_Init+0x27c>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800b2ba:	687b      	ldr	r3, [r7, #4]
 800b2bc:	691b      	ldr	r3, [r3, #16]
 800b2be:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800b2c0:	687b      	ldr	r3, [r7, #4]
 800b2c2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b2c4:	2b00      	cmp	r3, #0
 800b2c6:	d109      	bne.n	800b2dc <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800b2c8:	6878      	ldr	r0, [r7, #4]
 800b2ca:	f7fb ffb9 	bl	8007240 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800b2ce:	687b      	ldr	r3, [r7, #4]
 800b2d0:	2200      	movs	r2, #0
 800b2d2:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 800b2d4:	687b      	ldr	r3, [r7, #4]
 800b2d6:	2200      	movs	r2, #0
 800b2d8:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 800b2dc:	687b      	ldr	r3, [r7, #4]
 800b2de:	681b      	ldr	r3, [r3, #0]
 800b2e0:	4618      	mov	r0, r3
 800b2e2:	f7ff fef1 	bl	800b0c8 <LL_ADC_IsDeepPowerDownEnabled>
 800b2e6:	4603      	mov	r3, r0
 800b2e8:	2b00      	cmp	r3, #0
 800b2ea:	d004      	beq.n	800b2f6 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 800b2ec:	687b      	ldr	r3, [r7, #4]
 800b2ee:	681b      	ldr	r3, [r3, #0]
 800b2f0:	4618      	mov	r0, r3
 800b2f2:	f7ff fed7 	bl	800b0a4 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800b2f6:	687b      	ldr	r3, [r7, #4]
 800b2f8:	681b      	ldr	r3, [r3, #0]
 800b2fa:	4618      	mov	r0, r3
 800b2fc:	f7ff ff0c 	bl	800b118 <LL_ADC_IsInternalRegulatorEnabled>
 800b300:	4603      	mov	r3, r0
 800b302:	2b00      	cmp	r3, #0
 800b304:	d115      	bne.n	800b332 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 800b306:	687b      	ldr	r3, [r7, #4]
 800b308:	681b      	ldr	r3, [r3, #0]
 800b30a:	4618      	mov	r0, r3
 800b30c:	f7ff fef0 	bl	800b0f0 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800b310:	4b84      	ldr	r3, [pc, #528]	@ (800b524 <HAL_ADC_Init+0x284>)
 800b312:	681b      	ldr	r3, [r3, #0]
 800b314:	099b      	lsrs	r3, r3, #6
 800b316:	4a84      	ldr	r2, [pc, #528]	@ (800b528 <HAL_ADC_Init+0x288>)
 800b318:	fba2 2303 	umull	r2, r3, r2, r3
 800b31c:	099b      	lsrs	r3, r3, #6
 800b31e:	3301      	adds	r3, #1
 800b320:	005b      	lsls	r3, r3, #1
 800b322:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 800b324:	e002      	b.n	800b32c <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 800b326:	68fb      	ldr	r3, [r7, #12]
 800b328:	3b01      	subs	r3, #1
 800b32a:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 800b32c:	68fb      	ldr	r3, [r7, #12]
 800b32e:	2b00      	cmp	r3, #0
 800b330:	d1f9      	bne.n	800b326 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800b332:	687b      	ldr	r3, [r7, #4]
 800b334:	681b      	ldr	r3, [r3, #0]
 800b336:	4618      	mov	r0, r3
 800b338:	f7ff feee 	bl	800b118 <LL_ADC_IsInternalRegulatorEnabled>
 800b33c:	4603      	mov	r3, r0
 800b33e:	2b00      	cmp	r3, #0
 800b340:	d10d      	bne.n	800b35e <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800b342:	687b      	ldr	r3, [r7, #4]
 800b344:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b346:	f043 0210 	orr.w	r2, r3, #16
 800b34a:	687b      	ldr	r3, [r7, #4]
 800b34c:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800b34e:	687b      	ldr	r3, [r7, #4]
 800b350:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800b352:	f043 0201 	orr.w	r2, r3, #1
 800b356:	687b      	ldr	r3, [r7, #4]
 800b358:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 800b35a:	2301      	movs	r3, #1
 800b35c:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800b35e:	687b      	ldr	r3, [r7, #4]
 800b360:	681b      	ldr	r3, [r3, #0]
 800b362:	4618      	mov	r0, r3
 800b364:	f7ff ff62 	bl	800b22c <LL_ADC_REG_IsConversionOngoing>
 800b368:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800b36a:	687b      	ldr	r3, [r7, #4]
 800b36c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b36e:	f003 0310 	and.w	r3, r3, #16
 800b372:	2b00      	cmp	r3, #0
 800b374:	f040 80c9 	bne.w	800b50a <HAL_ADC_Init+0x26a>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 800b378:	697b      	ldr	r3, [r7, #20]
 800b37a:	2b00      	cmp	r3, #0
 800b37c:	f040 80c5 	bne.w	800b50a <HAL_ADC_Init+0x26a>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800b380:	687b      	ldr	r3, [r7, #4]
 800b382:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b384:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 800b388:	f043 0202 	orr.w	r2, r3, #2
 800b38c:	687b      	ldr	r3, [r7, #4]
 800b38e:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800b390:	687b      	ldr	r3, [r7, #4]
 800b392:	681b      	ldr	r3, [r3, #0]
 800b394:	4618      	mov	r0, r3
 800b396:	f7ff fefb 	bl	800b190 <LL_ADC_IsEnabled>
 800b39a:	4603      	mov	r3, r0
 800b39c:	2b00      	cmp	r3, #0
 800b39e:	d115      	bne.n	800b3cc <HAL_ADC_Init+0x12c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800b3a0:	4862      	ldr	r0, [pc, #392]	@ (800b52c <HAL_ADC_Init+0x28c>)
 800b3a2:	f7ff fef5 	bl	800b190 <LL_ADC_IsEnabled>
 800b3a6:	4604      	mov	r4, r0
 800b3a8:	4861      	ldr	r0, [pc, #388]	@ (800b530 <HAL_ADC_Init+0x290>)
 800b3aa:	f7ff fef1 	bl	800b190 <LL_ADC_IsEnabled>
 800b3ae:	4603      	mov	r3, r0
 800b3b0:	431c      	orrs	r4, r3
 800b3b2:	4860      	ldr	r0, [pc, #384]	@ (800b534 <HAL_ADC_Init+0x294>)
 800b3b4:	f7ff feec 	bl	800b190 <LL_ADC_IsEnabled>
 800b3b8:	4603      	mov	r3, r0
 800b3ba:	4323      	orrs	r3, r4
 800b3bc:	2b00      	cmp	r3, #0
 800b3be:	d105      	bne.n	800b3cc <HAL_ADC_Init+0x12c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 800b3c0:	687b      	ldr	r3, [r7, #4]
 800b3c2:	685b      	ldr	r3, [r3, #4]
 800b3c4:	4619      	mov	r1, r3
 800b3c6:	485c      	ldr	r0, [pc, #368]	@ (800b538 <HAL_ADC_Init+0x298>)
 800b3c8:	f7ff fd46 	bl	800ae58 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800b3cc:	687b      	ldr	r3, [r7, #4]
 800b3ce:	7e5b      	ldrb	r3, [r3, #25]
 800b3d0:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 800b3d2:	687b      	ldr	r3, [r7, #4]
 800b3d4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800b3d6:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 800b3d8:	687b      	ldr	r3, [r7, #4]
 800b3da:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 800b3dc:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 800b3de:	687b      	ldr	r3, [r7, #4]
 800b3e0:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 800b3e2:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 800b3e4:	687b      	ldr	r3, [r7, #4]
 800b3e6:	f893 3020 	ldrb.w	r3, [r3, #32]
 800b3ea:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800b3ec:	4313      	orrs	r3, r2
 800b3ee:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800b3f0:	687b      	ldr	r3, [r7, #4]
 800b3f2:	f893 3020 	ldrb.w	r3, [r3, #32]
 800b3f6:	2b01      	cmp	r3, #1
 800b3f8:	d106      	bne.n	800b408 <HAL_ADC_Init+0x168>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 800b3fa:	687b      	ldr	r3, [r7, #4]
 800b3fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b3fe:	3b01      	subs	r3, #1
 800b400:	045b      	lsls	r3, r3, #17
 800b402:	69ba      	ldr	r2, [r7, #24]
 800b404:	4313      	orrs	r3, r2
 800b406:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800b408:	687b      	ldr	r3, [r7, #4]
 800b40a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b40c:	2b00      	cmp	r3, #0
 800b40e:	d009      	beq.n	800b424 <HAL_ADC_Init+0x184>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800b410:	687b      	ldr	r3, [r7, #4]
 800b412:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b414:	f403 7270 	and.w	r2, r3, #960	@ 0x3c0
                   | hadc->Init.ExternalTrigConvEdge
 800b418:	687b      	ldr	r3, [r7, #4]
 800b41a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b41c:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800b41e:	69ba      	ldr	r2, [r7, #24]
 800b420:	4313      	orrs	r3, r2
 800b422:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 800b424:	687b      	ldr	r3, [r7, #4]
 800b426:	681b      	ldr	r3, [r3, #0]
 800b428:	68da      	ldr	r2, [r3, #12]
 800b42a:	4b44      	ldr	r3, [pc, #272]	@ (800b53c <HAL_ADC_Init+0x29c>)
 800b42c:	4013      	ands	r3, r2
 800b42e:	687a      	ldr	r2, [r7, #4]
 800b430:	6812      	ldr	r2, [r2, #0]
 800b432:	69b9      	ldr	r1, [r7, #24]
 800b434:	430b      	orrs	r3, r1
 800b436:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800b438:	687b      	ldr	r3, [r7, #4]
 800b43a:	681b      	ldr	r3, [r3, #0]
 800b43c:	4618      	mov	r0, r3
 800b43e:	f7ff ff1c 	bl	800b27a <LL_ADC_INJ_IsConversionOngoing>
 800b442:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800b444:	697b      	ldr	r3, [r7, #20]
 800b446:	2b00      	cmp	r3, #0
 800b448:	d13d      	bne.n	800b4c6 <HAL_ADC_Init+0x226>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800b44a:	693b      	ldr	r3, [r7, #16]
 800b44c:	2b00      	cmp	r3, #0
 800b44e:	d13a      	bne.n	800b4c6 <HAL_ADC_Init+0x226>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800b450:	687b      	ldr	r3, [r7, #4]
 800b452:	7e1b      	ldrb	r3, [r3, #24]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 800b454:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 800b456:	687b      	ldr	r3, [r7, #4]
 800b458:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800b45c:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 800b45e:	4313      	orrs	r3, r2
 800b460:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 800b462:	687b      	ldr	r3, [r7, #4]
 800b464:	681b      	ldr	r3, [r3, #0]
 800b466:	68db      	ldr	r3, [r3, #12]
 800b468:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800b46c:	f023 0302 	bic.w	r3, r3, #2
 800b470:	687a      	ldr	r2, [r7, #4]
 800b472:	6812      	ldr	r2, [r2, #0]
 800b474:	69b9      	ldr	r1, [r7, #24]
 800b476:	430b      	orrs	r3, r1
 800b478:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 800b47a:	687b      	ldr	r3, [r7, #4]
 800b47c:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800b480:	2b01      	cmp	r3, #1
 800b482:	d118      	bne.n	800b4b6 <HAL_ADC_Init+0x216>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 800b484:	687b      	ldr	r3, [r7, #4]
 800b486:	681b      	ldr	r3, [r3, #0]
 800b488:	691b      	ldr	r3, [r3, #16]
 800b48a:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 800b48e:	f023 0304 	bic.w	r3, r3, #4
 800b492:	687a      	ldr	r2, [r7, #4]
 800b494:	6bd1      	ldr	r1, [r2, #60]	@ 0x3c
 800b496:	687a      	ldr	r2, [r7, #4]
 800b498:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 800b49a:	4311      	orrs	r1, r2
 800b49c:	687a      	ldr	r2, [r7, #4]
 800b49e:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 800b4a0:	4311      	orrs	r1, r2
 800b4a2:	687a      	ldr	r2, [r7, #4]
 800b4a4:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800b4a6:	430a      	orrs	r2, r1
 800b4a8:	431a      	orrs	r2, r3
 800b4aa:	687b      	ldr	r3, [r7, #4]
 800b4ac:	681b      	ldr	r3, [r3, #0]
 800b4ae:	f042 0201 	orr.w	r2, r2, #1
 800b4b2:	611a      	str	r2, [r3, #16]
 800b4b4:	e007      	b.n	800b4c6 <HAL_ADC_Init+0x226>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 800b4b6:	687b      	ldr	r3, [r7, #4]
 800b4b8:	681b      	ldr	r3, [r3, #0]
 800b4ba:	691a      	ldr	r2, [r3, #16]
 800b4bc:	687b      	ldr	r3, [r7, #4]
 800b4be:	681b      	ldr	r3, [r3, #0]
 800b4c0:	f022 0201 	bic.w	r2, r2, #1
 800b4c4:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 800b4c6:	687b      	ldr	r3, [r7, #4]
 800b4c8:	691b      	ldr	r3, [r3, #16]
 800b4ca:	2b01      	cmp	r3, #1
 800b4cc:	d10c      	bne.n	800b4e8 <HAL_ADC_Init+0x248>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 800b4ce:	687b      	ldr	r3, [r7, #4]
 800b4d0:	681b      	ldr	r3, [r3, #0]
 800b4d2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b4d4:	f023 010f 	bic.w	r1, r3, #15
 800b4d8:	687b      	ldr	r3, [r7, #4]
 800b4da:	69db      	ldr	r3, [r3, #28]
 800b4dc:	1e5a      	subs	r2, r3, #1
 800b4de:	687b      	ldr	r3, [r7, #4]
 800b4e0:	681b      	ldr	r3, [r3, #0]
 800b4e2:	430a      	orrs	r2, r1
 800b4e4:	631a      	str	r2, [r3, #48]	@ 0x30
 800b4e6:	e007      	b.n	800b4f8 <HAL_ADC_Init+0x258>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 800b4e8:	687b      	ldr	r3, [r7, #4]
 800b4ea:	681b      	ldr	r3, [r3, #0]
 800b4ec:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800b4ee:	687b      	ldr	r3, [r7, #4]
 800b4f0:	681b      	ldr	r3, [r3, #0]
 800b4f2:	f022 020f 	bic.w	r2, r2, #15
 800b4f6:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 800b4f8:	687b      	ldr	r3, [r7, #4]
 800b4fa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b4fc:	f023 0303 	bic.w	r3, r3, #3
 800b500:	f043 0201 	orr.w	r2, r3, #1
 800b504:	687b      	ldr	r3, [r7, #4]
 800b506:	655a      	str	r2, [r3, #84]	@ 0x54
 800b508:	e007      	b.n	800b51a <HAL_ADC_Init+0x27a>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800b50a:	687b      	ldr	r3, [r7, #4]
 800b50c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b50e:	f043 0210 	orr.w	r2, r3, #16
 800b512:	687b      	ldr	r3, [r7, #4]
 800b514:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 800b516:	2301      	movs	r3, #1
 800b518:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 800b51a:	7ffb      	ldrb	r3, [r7, #31]
}
 800b51c:	4618      	mov	r0, r3
 800b51e:	3724      	adds	r7, #36	@ 0x24
 800b520:	46bd      	mov	sp, r7
 800b522:	bd90      	pop	{r4, r7, pc}
 800b524:	20000268 	.word	0x20000268
 800b528:	053e2d63 	.word	0x053e2d63
 800b52c:	50040000 	.word	0x50040000
 800b530:	50040100 	.word	0x50040100
 800b534:	50040200 	.word	0x50040200
 800b538:	50040300 	.word	0x50040300
 800b53c:	fff0c007 	.word	0xfff0c007

0800b540 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 800b540:	b580      	push	{r7, lr}
 800b542:	b086      	sub	sp, #24
 800b544:	af00      	add	r7, sp, #0
 800b546:	60f8      	str	r0, [r7, #12]
 800b548:	60b9      	str	r1, [r7, #8]
 800b54a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800b54c:	4853      	ldr	r0, [pc, #332]	@ (800b69c <HAL_ADC_Start_DMA+0x15c>)
 800b54e:	f7ff fd9b 	bl	800b088 <LL_ADC_GetMultimode>
 800b552:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800b554:	68fb      	ldr	r3, [r7, #12]
 800b556:	681b      	ldr	r3, [r3, #0]
 800b558:	4618      	mov	r0, r3
 800b55a:	f7ff fe67 	bl	800b22c <LL_ADC_REG_IsConversionOngoing>
 800b55e:	4603      	mov	r3, r0
 800b560:	2b00      	cmp	r3, #0
 800b562:	f040 8093 	bne.w	800b68c <HAL_ADC_Start_DMA+0x14c>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 800b566:	68fb      	ldr	r3, [r7, #12]
 800b568:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800b56c:	2b01      	cmp	r3, #1
 800b56e:	d101      	bne.n	800b574 <HAL_ADC_Start_DMA+0x34>
 800b570:	2302      	movs	r3, #2
 800b572:	e08e      	b.n	800b692 <HAL_ADC_Start_DMA+0x152>
 800b574:	68fb      	ldr	r3, [r7, #12]
 800b576:	2201      	movs	r2, #1
 800b578:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

#if defined(ADC_MULTIMODE_SUPPORT)
    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((ADC_IS_INDEPENDENT(hadc) != RESET)
 800b57c:	68fb      	ldr	r3, [r7, #12]
 800b57e:	681b      	ldr	r3, [r3, #0]
 800b580:	4a47      	ldr	r2, [pc, #284]	@ (800b6a0 <HAL_ADC_Start_DMA+0x160>)
 800b582:	4293      	cmp	r3, r2
 800b584:	d008      	beq.n	800b598 <HAL_ADC_Start_DMA+0x58>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800b586:	693b      	ldr	r3, [r7, #16]
 800b588:	2b00      	cmp	r3, #0
 800b58a:	d005      	beq.n	800b598 <HAL_ADC_Start_DMA+0x58>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 800b58c:	693b      	ldr	r3, [r7, #16]
 800b58e:	2b05      	cmp	r3, #5
 800b590:	d002      	beq.n	800b598 <HAL_ADC_Start_DMA+0x58>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 800b592:	693b      	ldr	r3, [r7, #16]
 800b594:	2b09      	cmp	r3, #9
 800b596:	d172      	bne.n	800b67e <HAL_ADC_Start_DMA+0x13e>
       )
#endif /* ADC_MULTIMODE_SUPPORT */
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 800b598:	68f8      	ldr	r0, [r7, #12]
 800b59a:	f000 fda7 	bl	800c0ec <ADC_Enable>
 800b59e:	4603      	mov	r3, r0
 800b5a0:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 800b5a2:	7dfb      	ldrb	r3, [r7, #23]
 800b5a4:	2b00      	cmp	r3, #0
 800b5a6:	d165      	bne.n	800b674 <HAL_ADC_Start_DMA+0x134>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 800b5a8:	68fb      	ldr	r3, [r7, #12]
 800b5aa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b5ac:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 800b5b0:	f023 0301 	bic.w	r3, r3, #1
 800b5b4:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800b5b8:	68fb      	ldr	r3, [r7, #12]
 800b5ba:	655a      	str	r2, [r3, #84]	@ 0x54

#if defined(ADC_MULTIMODE_SUPPORT)
        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800b5bc:	68fb      	ldr	r3, [r7, #12]
 800b5be:	681b      	ldr	r3, [r3, #0]
 800b5c0:	4a38      	ldr	r2, [pc, #224]	@ (800b6a4 <HAL_ADC_Start_DMA+0x164>)
 800b5c2:	4293      	cmp	r3, r2
 800b5c4:	d002      	beq.n	800b5cc <HAL_ADC_Start_DMA+0x8c>
 800b5c6:	68fb      	ldr	r3, [r7, #12]
 800b5c8:	681b      	ldr	r3, [r3, #0]
 800b5ca:	e000      	b.n	800b5ce <HAL_ADC_Start_DMA+0x8e>
 800b5cc:	4b36      	ldr	r3, [pc, #216]	@ (800b6a8 <HAL_ADC_Start_DMA+0x168>)
 800b5ce:	68fa      	ldr	r2, [r7, #12]
 800b5d0:	6812      	ldr	r2, [r2, #0]
 800b5d2:	4293      	cmp	r3, r2
 800b5d4:	d002      	beq.n	800b5dc <HAL_ADC_Start_DMA+0x9c>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800b5d6:	693b      	ldr	r3, [r7, #16]
 800b5d8:	2b00      	cmp	r3, #0
 800b5da:	d105      	bne.n	800b5e8 <HAL_ADC_Start_DMA+0xa8>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800b5dc:	68fb      	ldr	r3, [r7, #12]
 800b5de:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b5e0:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 800b5e4:	68fb      	ldr	r3, [r7, #12]
 800b5e6:	655a      	str	r2, [r3, #84]	@ 0x54
        }
#endif /* ADC_MULTIMODE_SUPPORT */

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 800b5e8:	68fb      	ldr	r3, [r7, #12]
 800b5ea:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b5ec:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800b5f0:	2b00      	cmp	r3, #0
 800b5f2:	d006      	beq.n	800b602 <HAL_ADC_Start_DMA+0xc2>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 800b5f4:	68fb      	ldr	r3, [r7, #12]
 800b5f6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800b5f8:	f023 0206 	bic.w	r2, r3, #6
 800b5fc:	68fb      	ldr	r3, [r7, #12]
 800b5fe:	659a      	str	r2, [r3, #88]	@ 0x58
 800b600:	e002      	b.n	800b608 <HAL_ADC_Start_DMA+0xc8>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 800b602:	68fb      	ldr	r3, [r7, #12]
 800b604:	2200      	movs	r2, #0
 800b606:	659a      	str	r2, [r3, #88]	@ 0x58
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800b608:	68fb      	ldr	r3, [r7, #12]
 800b60a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800b60c:	4a27      	ldr	r2, [pc, #156]	@ (800b6ac <HAL_ADC_Start_DMA+0x16c>)
 800b60e:	62da      	str	r2, [r3, #44]	@ 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 800b610:	68fb      	ldr	r3, [r7, #12]
 800b612:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800b614:	4a26      	ldr	r2, [pc, #152]	@ (800b6b0 <HAL_ADC_Start_DMA+0x170>)
 800b616:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800b618:	68fb      	ldr	r3, [r7, #12]
 800b61a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800b61c:	4a25      	ldr	r2, [pc, #148]	@ (800b6b4 <HAL_ADC_Start_DMA+0x174>)
 800b61e:	635a      	str	r2, [r3, #52]	@ 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 800b620:	68fb      	ldr	r3, [r7, #12]
 800b622:	681b      	ldr	r3, [r3, #0]
 800b624:	221c      	movs	r2, #28
 800b626:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 800b628:	68fb      	ldr	r3, [r7, #12]
 800b62a:	2200      	movs	r2, #0
 800b62c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 800b630:	68fb      	ldr	r3, [r7, #12]
 800b632:	681b      	ldr	r3, [r3, #0]
 800b634:	685a      	ldr	r2, [r3, #4]
 800b636:	68fb      	ldr	r3, [r7, #12]
 800b638:	681b      	ldr	r3, [r3, #0]
 800b63a:	f042 0210 	orr.w	r2, r2, #16
 800b63e:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 800b640:	68fb      	ldr	r3, [r7, #12]
 800b642:	681b      	ldr	r3, [r3, #0]
 800b644:	68da      	ldr	r2, [r3, #12]
 800b646:	68fb      	ldr	r3, [r7, #12]
 800b648:	681b      	ldr	r3, [r3, #0]
 800b64a:	f042 0201 	orr.w	r2, r2, #1
 800b64e:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 800b650:	68fb      	ldr	r3, [r7, #12]
 800b652:	6cd8      	ldr	r0, [r3, #76]	@ 0x4c
 800b654:	68fb      	ldr	r3, [r7, #12]
 800b656:	681b      	ldr	r3, [r3, #0]
 800b658:	3340      	adds	r3, #64	@ 0x40
 800b65a:	4619      	mov	r1, r3
 800b65c:	68ba      	ldr	r2, [r7, #8]
 800b65e:	687b      	ldr	r3, [r7, #4]
 800b660:	f001 fbb0 	bl	800cdc4 <HAL_DMA_Start_IT>
 800b664:	4603      	mov	r3, r0
 800b666:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 800b668:	68fb      	ldr	r3, [r7, #12]
 800b66a:	681b      	ldr	r3, [r3, #0]
 800b66c:	4618      	mov	r0, r3
 800b66e:	f7ff fdb5 	bl	800b1dc <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 800b672:	e00d      	b.n	800b690 <HAL_ADC_Start_DMA+0x150>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 800b674:	68fb      	ldr	r3, [r7, #12]
 800b676:	2200      	movs	r2, #0
 800b678:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
      if (tmp_hal_status == HAL_OK)
 800b67c:	e008      	b.n	800b690 <HAL_ADC_Start_DMA+0x150>

    }
#if defined(ADC_MULTIMODE_SUPPORT)
    else
    {
      tmp_hal_status = HAL_ERROR;
 800b67e:	2301      	movs	r3, #1
 800b680:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 800b682:	68fb      	ldr	r3, [r7, #12]
 800b684:	2200      	movs	r2, #0
 800b686:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
 800b68a:	e001      	b.n	800b690 <HAL_ADC_Start_DMA+0x150>
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 800b68c:	2302      	movs	r3, #2
 800b68e:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 800b690:	7dfb      	ldrb	r3, [r7, #23]
}
 800b692:	4618      	mov	r0, r3
 800b694:	3718      	adds	r7, #24
 800b696:	46bd      	mov	sp, r7
 800b698:	bd80      	pop	{r7, pc}
 800b69a:	bf00      	nop
 800b69c:	50040300 	.word	0x50040300
 800b6a0:	50040200 	.word	0x50040200
 800b6a4:	50040100 	.word	0x50040100
 800b6a8:	50040000 	.word	0x50040000
 800b6ac:	0800c2b7 	.word	0x0800c2b7
 800b6b0:	0800c38f 	.word	0x0800c38f
 800b6b4:	0800c3ab 	.word	0x0800c3ab

0800b6b8 <HAL_ADC_Stop_DMA>:
  *         For multimode, the dedicated HAL_ADCEx_MultiModeStop_DMA() API must be used.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop_DMA(ADC_HandleTypeDef *hadc)
{
 800b6b8:	b580      	push	{r7, lr}
 800b6ba:	b084      	sub	sp, #16
 800b6bc:	af00      	add	r7, sp, #0
 800b6be:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 800b6c0:	687b      	ldr	r3, [r7, #4]
 800b6c2:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800b6c6:	2b01      	cmp	r3, #1
 800b6c8:	d101      	bne.n	800b6ce <HAL_ADC_Stop_DMA+0x16>
 800b6ca:	2302      	movs	r3, #2
 800b6cc:	e051      	b.n	800b772 <HAL_ADC_Stop_DMA+0xba>
 800b6ce:	687b      	ldr	r3, [r7, #4]
 800b6d0:	2201      	movs	r2, #1
 800b6d2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* 1. Stop potential ADC group regular conversion on going */
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 800b6d6:	2103      	movs	r1, #3
 800b6d8:	6878      	ldr	r0, [r7, #4]
 800b6da:	f000 fc4b 	bl	800bf74 <ADC_ConversionStop>
 800b6de:	4603      	mov	r3, r0
 800b6e0:	73fb      	strb	r3, [r7, #15]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 800b6e2:	7bfb      	ldrb	r3, [r7, #15]
 800b6e4:	2b00      	cmp	r3, #0
 800b6e6:	d13f      	bne.n	800b768 <HAL_ADC_Stop_DMA+0xb0>
  {
    /* Disable ADC DMA (ADC DMA configuration of continuous requests is kept) */
    CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 800b6e8:	687b      	ldr	r3, [r7, #4]
 800b6ea:	681b      	ldr	r3, [r3, #0]
 800b6ec:	68da      	ldr	r2, [r3, #12]
 800b6ee:	687b      	ldr	r3, [r7, #4]
 800b6f0:	681b      	ldr	r3, [r3, #0]
 800b6f2:	f022 0201 	bic.w	r2, r2, #1
 800b6f6:	60da      	str	r2, [r3, #12]

    /* Disable the DMA channel (in case of DMA in circular mode or stop       */
    /* while DMA transfer is on going)                                        */
    if (hadc->DMA_Handle->State == HAL_DMA_STATE_BUSY)
 800b6f8:	687b      	ldr	r3, [r7, #4]
 800b6fa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800b6fc:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 800b700:	b2db      	uxtb	r3, r3
 800b702:	2b02      	cmp	r3, #2
 800b704:	d10f      	bne.n	800b726 <HAL_ADC_Stop_DMA+0x6e>
    {
      tmp_hal_status = HAL_DMA_Abort(hadc->DMA_Handle);
 800b706:	687b      	ldr	r3, [r7, #4]
 800b708:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800b70a:	4618      	mov	r0, r3
 800b70c:	f001 fbba 	bl	800ce84 <HAL_DMA_Abort>
 800b710:	4603      	mov	r3, r0
 800b712:	73fb      	strb	r3, [r7, #15]

      /* Check if DMA channel effectively disabled */
      if (tmp_hal_status != HAL_OK)
 800b714:	7bfb      	ldrb	r3, [r7, #15]
 800b716:	2b00      	cmp	r3, #0
 800b718:	d005      	beq.n	800b726 <HAL_ADC_Stop_DMA+0x6e>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 800b71a:	687b      	ldr	r3, [r7, #4]
 800b71c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b71e:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800b722:	687b      	ldr	r3, [r7, #4]
 800b724:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }

    /* Disable ADC overrun interrupt */
    __HAL_ADC_DISABLE_IT(hadc, ADC_IT_OVR);
 800b726:	687b      	ldr	r3, [r7, #4]
 800b728:	681b      	ldr	r3, [r3, #0]
 800b72a:	685a      	ldr	r2, [r3, #4]
 800b72c:	687b      	ldr	r3, [r7, #4]
 800b72e:	681b      	ldr	r3, [r3, #0]
 800b730:	f022 0210 	bic.w	r2, r2, #16
 800b734:	605a      	str	r2, [r3, #4]

    /* 2. Disable the ADC peripheral */
    /* Update "tmp_hal_status" only if DMA channel disabling passed,          */
    /* to keep in memory a potential failing status.                          */
    if (tmp_hal_status == HAL_OK)
 800b736:	7bfb      	ldrb	r3, [r7, #15]
 800b738:	2b00      	cmp	r3, #0
 800b73a:	d105      	bne.n	800b748 <HAL_ADC_Stop_DMA+0x90>
    {
      tmp_hal_status = ADC_Disable(hadc);
 800b73c:	6878      	ldr	r0, [r7, #4]
 800b73e:	f000 fd5b 	bl	800c1f8 <ADC_Disable>
 800b742:	4603      	mov	r3, r0
 800b744:	73fb      	strb	r3, [r7, #15]
 800b746:	e002      	b.n	800b74e <HAL_ADC_Stop_DMA+0x96>
    }
    else
    {
      (void)ADC_Disable(hadc);
 800b748:	6878      	ldr	r0, [r7, #4]
 800b74a:	f000 fd55 	bl	800c1f8 <ADC_Disable>
    }

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 800b74e:	7bfb      	ldrb	r3, [r7, #15]
 800b750:	2b00      	cmp	r3, #0
 800b752:	d109      	bne.n	800b768 <HAL_ADC_Stop_DMA+0xb0>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 800b754:	687b      	ldr	r3, [r7, #4]
 800b756:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b758:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 800b75c:	f023 0301 	bic.w	r3, r3, #1
 800b760:	f043 0201 	orr.w	r2, r3, #1
 800b764:	687b      	ldr	r3, [r7, #4]
 800b766:	655a      	str	r2, [r3, #84]	@ 0x54
    }

  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800b768:	687b      	ldr	r3, [r7, #4]
 800b76a:	2200      	movs	r2, #0
 800b76c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 800b770:	7bfb      	ldrb	r3, [r7, #15]
}
 800b772:	4618      	mov	r0, r3
 800b774:	3710      	adds	r7, #16
 800b776:	46bd      	mov	sp, r7
 800b778:	bd80      	pop	{r7, pc}

0800b77a <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 800b77a:	b480      	push	{r7}
 800b77c:	b083      	sub	sp, #12
 800b77e:	af00      	add	r7, sp, #0
 800b780:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 800b782:	bf00      	nop
 800b784:	370c      	adds	r7, #12
 800b786:	46bd      	mov	sp, r7
 800b788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b78c:	4770      	bx	lr
	...

0800b790 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 800b790:	b580      	push	{r7, lr}
 800b792:	b0b6      	sub	sp, #216	@ 0xd8
 800b794:	af00      	add	r7, sp, #0
 800b796:	6078      	str	r0, [r7, #4]
 800b798:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800b79a:	2300      	movs	r3, #0
 800b79c:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 800b7a0:	2300      	movs	r3, #0
 800b7a2:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 800b7a4:	687b      	ldr	r3, [r7, #4]
 800b7a6:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800b7aa:	2b01      	cmp	r3, #1
 800b7ac:	d101      	bne.n	800b7b2 <HAL_ADC_ConfigChannel+0x22>
 800b7ae:	2302      	movs	r3, #2
 800b7b0:	e3c9      	b.n	800bf46 <HAL_ADC_ConfigChannel+0x7b6>
 800b7b2:	687b      	ldr	r3, [r7, #4]
 800b7b4:	2201      	movs	r2, #1
 800b7b6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800b7ba:	687b      	ldr	r3, [r7, #4]
 800b7bc:	681b      	ldr	r3, [r3, #0]
 800b7be:	4618      	mov	r0, r3
 800b7c0:	f7ff fd34 	bl	800b22c <LL_ADC_REG_IsConversionOngoing>
 800b7c4:	4603      	mov	r3, r0
 800b7c6:	2b00      	cmp	r3, #0
 800b7c8:	f040 83aa 	bne.w	800bf20 <HAL_ADC_ConfigChannel+0x790>
  {
#if !defined (USE_FULL_ASSERT)
    uint32_t config_rank = pConfig->Rank;
 800b7cc:	683b      	ldr	r3, [r7, #0]
 800b7ce:	685b      	ldr	r3, [r3, #4]
 800b7d0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (pConfig->Rank <= 5U)
 800b7d4:	683b      	ldr	r3, [r7, #0]
 800b7d6:	685b      	ldr	r3, [r3, #4]
 800b7d8:	2b05      	cmp	r3, #5
 800b7da:	d824      	bhi.n	800b826 <HAL_ADC_ConfigChannel+0x96>
    {
      switch (pConfig->Rank)
 800b7dc:	683b      	ldr	r3, [r7, #0]
 800b7de:	685b      	ldr	r3, [r3, #4]
 800b7e0:	3b02      	subs	r3, #2
 800b7e2:	2b03      	cmp	r3, #3
 800b7e4:	d81b      	bhi.n	800b81e <HAL_ADC_ConfigChannel+0x8e>
 800b7e6:	a201      	add	r2, pc, #4	@ (adr r2, 800b7ec <HAL_ADC_ConfigChannel+0x5c>)
 800b7e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b7ec:	0800b7fd 	.word	0x0800b7fd
 800b7f0:	0800b805 	.word	0x0800b805
 800b7f4:	0800b80d 	.word	0x0800b80d
 800b7f8:	0800b815 	.word	0x0800b815
      {
        case 2U:
          config_rank = ADC_REGULAR_RANK_2;
 800b7fc:	230c      	movs	r3, #12
 800b7fe:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 800b802:	e010      	b.n	800b826 <HAL_ADC_ConfigChannel+0x96>
        case 3U:
          config_rank = ADC_REGULAR_RANK_3;
 800b804:	2312      	movs	r3, #18
 800b806:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 800b80a:	e00c      	b.n	800b826 <HAL_ADC_ConfigChannel+0x96>
        case 4U:
          config_rank = ADC_REGULAR_RANK_4;
 800b80c:	2318      	movs	r3, #24
 800b80e:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 800b812:	e008      	b.n	800b826 <HAL_ADC_ConfigChannel+0x96>
        case 5U:
          config_rank = ADC_REGULAR_RANK_5;
 800b814:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800b818:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 800b81c:	e003      	b.n	800b826 <HAL_ADC_ConfigChannel+0x96>
        /* case 1U */
        default:
          config_rank = ADC_REGULAR_RANK_1;
 800b81e:	2306      	movs	r3, #6
 800b820:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 800b824:	bf00      	nop
      }
    }
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, config_rank, pConfig->Channel);
 800b826:	687b      	ldr	r3, [r7, #4]
 800b828:	6818      	ldr	r0, [r3, #0]
 800b82a:	683b      	ldr	r3, [r7, #0]
 800b82c:	681b      	ldr	r3, [r3, #0]
 800b82e:	461a      	mov	r2, r3
 800b830:	f8d7 10d0 	ldr.w	r1, [r7, #208]	@ 0xd0
 800b834:	f7ff fbac 	bl	800af90 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800b838:	687b      	ldr	r3, [r7, #4]
 800b83a:	681b      	ldr	r3, [r3, #0]
 800b83c:	4618      	mov	r0, r3
 800b83e:	f7ff fcf5 	bl	800b22c <LL_ADC_REG_IsConversionOngoing>
 800b842:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800b846:	687b      	ldr	r3, [r7, #4]
 800b848:	681b      	ldr	r3, [r3, #0]
 800b84a:	4618      	mov	r0, r3
 800b84c:	f7ff fd15 	bl	800b27a <LL_ADC_INJ_IsConversionOngoing>
 800b850:	f8c7 00c8 	str.w	r0, [r7, #200]	@ 0xc8
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800b854:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800b858:	2b00      	cmp	r3, #0
 800b85a:	f040 81a4 	bne.w	800bba6 <HAL_ADC_ConfigChannel+0x416>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800b85e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800b862:	2b00      	cmp	r3, #0
 800b864:	f040 819f 	bne.w	800bba6 <HAL_ADC_ConfigChannel+0x416>
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 800b868:	687b      	ldr	r3, [r7, #4]
 800b86a:	6818      	ldr	r0, [r3, #0]
 800b86c:	683b      	ldr	r3, [r7, #0]
 800b86e:	6819      	ldr	r1, [r3, #0]
 800b870:	683b      	ldr	r3, [r7, #0]
 800b872:	689b      	ldr	r3, [r3, #8]
 800b874:	461a      	mov	r2, r3
 800b876:	f7ff fbb7 	bl	800afe8 <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 800b87a:	683b      	ldr	r3, [r7, #0]
 800b87c:	695a      	ldr	r2, [r3, #20]
 800b87e:	687b      	ldr	r3, [r7, #4]
 800b880:	681b      	ldr	r3, [r3, #0]
 800b882:	68db      	ldr	r3, [r3, #12]
 800b884:	08db      	lsrs	r3, r3, #3
 800b886:	f003 0303 	and.w	r3, r3, #3
 800b88a:	005b      	lsls	r3, r3, #1
 800b88c:	fa02 f303 	lsl.w	r3, r2, r3
 800b890:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 800b894:	683b      	ldr	r3, [r7, #0]
 800b896:	691b      	ldr	r3, [r3, #16]
 800b898:	2b04      	cmp	r3, #4
 800b89a:	d00a      	beq.n	800b8b2 <HAL_ADC_ConfigChannel+0x122>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 800b89c:	687b      	ldr	r3, [r7, #4]
 800b89e:	6818      	ldr	r0, [r3, #0]
 800b8a0:	683b      	ldr	r3, [r7, #0]
 800b8a2:	6919      	ldr	r1, [r3, #16]
 800b8a4:	683b      	ldr	r3, [r7, #0]
 800b8a6:	681a      	ldr	r2, [r3, #0]
 800b8a8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800b8ac:	f7ff fb08 	bl	800aec0 <LL_ADC_SetOffset>
 800b8b0:	e179      	b.n	800bba6 <HAL_ADC_ConfigChannel+0x416>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 800b8b2:	687b      	ldr	r3, [r7, #4]
 800b8b4:	681b      	ldr	r3, [r3, #0]
 800b8b6:	2100      	movs	r1, #0
 800b8b8:	4618      	mov	r0, r3
 800b8ba:	f7ff fb25 	bl	800af08 <LL_ADC_GetOffsetChannel>
 800b8be:	4603      	mov	r3, r0
 800b8c0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800b8c4:	2b00      	cmp	r3, #0
 800b8c6:	d10a      	bne.n	800b8de <HAL_ADC_ConfigChannel+0x14e>
 800b8c8:	687b      	ldr	r3, [r7, #4]
 800b8ca:	681b      	ldr	r3, [r3, #0]
 800b8cc:	2100      	movs	r1, #0
 800b8ce:	4618      	mov	r0, r3
 800b8d0:	f7ff fb1a 	bl	800af08 <LL_ADC_GetOffsetChannel>
 800b8d4:	4603      	mov	r3, r0
 800b8d6:	0e9b      	lsrs	r3, r3, #26
 800b8d8:	f003 021f 	and.w	r2, r3, #31
 800b8dc:	e01e      	b.n	800b91c <HAL_ADC_ConfigChannel+0x18c>
 800b8de:	687b      	ldr	r3, [r7, #4]
 800b8e0:	681b      	ldr	r3, [r3, #0]
 800b8e2:	2100      	movs	r1, #0
 800b8e4:	4618      	mov	r0, r3
 800b8e6:	f7ff fb0f 	bl	800af08 <LL_ADC_GetOffsetChannel>
 800b8ea:	4603      	mov	r3, r0
 800b8ec:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800b8f0:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800b8f4:	fa93 f3a3 	rbit	r3, r3
 800b8f8:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800b8fc:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 800b900:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 800b904:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800b908:	2b00      	cmp	r3, #0
 800b90a:	d101      	bne.n	800b910 <HAL_ADC_ConfigChannel+0x180>
  {
    return 32U;
 800b90c:	2320      	movs	r3, #32
 800b90e:	e004      	b.n	800b91a <HAL_ADC_ConfigChannel+0x18a>
  }
  return __builtin_clz(value);
 800b910:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800b914:	fab3 f383 	clz	r3, r3
 800b918:	b2db      	uxtb	r3, r3
 800b91a:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800b91c:	683b      	ldr	r3, [r7, #0]
 800b91e:	681b      	ldr	r3, [r3, #0]
 800b920:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800b924:	2b00      	cmp	r3, #0
 800b926:	d105      	bne.n	800b934 <HAL_ADC_ConfigChannel+0x1a4>
 800b928:	683b      	ldr	r3, [r7, #0]
 800b92a:	681b      	ldr	r3, [r3, #0]
 800b92c:	0e9b      	lsrs	r3, r3, #26
 800b92e:	f003 031f 	and.w	r3, r3, #31
 800b932:	e018      	b.n	800b966 <HAL_ADC_ConfigChannel+0x1d6>
 800b934:	683b      	ldr	r3, [r7, #0]
 800b936:	681b      	ldr	r3, [r3, #0]
 800b938:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800b93c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800b940:	fa93 f3a3 	rbit	r3, r3
 800b944:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  return result;
 800b948:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800b94c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
  if (value == 0U)
 800b950:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 800b954:	2b00      	cmp	r3, #0
 800b956:	d101      	bne.n	800b95c <HAL_ADC_ConfigChannel+0x1cc>
    return 32U;
 800b958:	2320      	movs	r3, #32
 800b95a:	e004      	b.n	800b966 <HAL_ADC_ConfigChannel+0x1d6>
  return __builtin_clz(value);
 800b95c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 800b960:	fab3 f383 	clz	r3, r3
 800b964:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 800b966:	429a      	cmp	r2, r3
 800b968:	d106      	bne.n	800b978 <HAL_ADC_ConfigChannel+0x1e8>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 800b96a:	687b      	ldr	r3, [r7, #4]
 800b96c:	681b      	ldr	r3, [r3, #0]
 800b96e:	2200      	movs	r2, #0
 800b970:	2100      	movs	r1, #0
 800b972:	4618      	mov	r0, r3
 800b974:	f7ff fade 	bl	800af34 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 800b978:	687b      	ldr	r3, [r7, #4]
 800b97a:	681b      	ldr	r3, [r3, #0]
 800b97c:	2101      	movs	r1, #1
 800b97e:	4618      	mov	r0, r3
 800b980:	f7ff fac2 	bl	800af08 <LL_ADC_GetOffsetChannel>
 800b984:	4603      	mov	r3, r0
 800b986:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800b98a:	2b00      	cmp	r3, #0
 800b98c:	d10a      	bne.n	800b9a4 <HAL_ADC_ConfigChannel+0x214>
 800b98e:	687b      	ldr	r3, [r7, #4]
 800b990:	681b      	ldr	r3, [r3, #0]
 800b992:	2101      	movs	r1, #1
 800b994:	4618      	mov	r0, r3
 800b996:	f7ff fab7 	bl	800af08 <LL_ADC_GetOffsetChannel>
 800b99a:	4603      	mov	r3, r0
 800b99c:	0e9b      	lsrs	r3, r3, #26
 800b99e:	f003 021f 	and.w	r2, r3, #31
 800b9a2:	e01e      	b.n	800b9e2 <HAL_ADC_ConfigChannel+0x252>
 800b9a4:	687b      	ldr	r3, [r7, #4]
 800b9a6:	681b      	ldr	r3, [r3, #0]
 800b9a8:	2101      	movs	r1, #1
 800b9aa:	4618      	mov	r0, r3
 800b9ac:	f7ff faac 	bl	800af08 <LL_ADC_GetOffsetChannel>
 800b9b0:	4603      	mov	r3, r0
 800b9b2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800b9b6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800b9ba:	fa93 f3a3 	rbit	r3, r3
 800b9be:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  return result;
 800b9c2:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800b9c6:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  if (value == 0U)
 800b9ca:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800b9ce:	2b00      	cmp	r3, #0
 800b9d0:	d101      	bne.n	800b9d6 <HAL_ADC_ConfigChannel+0x246>
    return 32U;
 800b9d2:	2320      	movs	r3, #32
 800b9d4:	e004      	b.n	800b9e0 <HAL_ADC_ConfigChannel+0x250>
  return __builtin_clz(value);
 800b9d6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800b9da:	fab3 f383 	clz	r3, r3
 800b9de:	b2db      	uxtb	r3, r3
 800b9e0:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800b9e2:	683b      	ldr	r3, [r7, #0]
 800b9e4:	681b      	ldr	r3, [r3, #0]
 800b9e6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800b9ea:	2b00      	cmp	r3, #0
 800b9ec:	d105      	bne.n	800b9fa <HAL_ADC_ConfigChannel+0x26a>
 800b9ee:	683b      	ldr	r3, [r7, #0]
 800b9f0:	681b      	ldr	r3, [r3, #0]
 800b9f2:	0e9b      	lsrs	r3, r3, #26
 800b9f4:	f003 031f 	and.w	r3, r3, #31
 800b9f8:	e018      	b.n	800ba2c <HAL_ADC_ConfigChannel+0x29c>
 800b9fa:	683b      	ldr	r3, [r7, #0]
 800b9fc:	681b      	ldr	r3, [r3, #0]
 800b9fe:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800ba02:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800ba06:	fa93 f3a3 	rbit	r3, r3
 800ba0a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  return result;
 800ba0e:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800ba12:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
  if (value == 0U)
 800ba16:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800ba1a:	2b00      	cmp	r3, #0
 800ba1c:	d101      	bne.n	800ba22 <HAL_ADC_ConfigChannel+0x292>
    return 32U;
 800ba1e:	2320      	movs	r3, #32
 800ba20:	e004      	b.n	800ba2c <HAL_ADC_ConfigChannel+0x29c>
  return __builtin_clz(value);
 800ba22:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800ba26:	fab3 f383 	clz	r3, r3
 800ba2a:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 800ba2c:	429a      	cmp	r2, r3
 800ba2e:	d106      	bne.n	800ba3e <HAL_ADC_ConfigChannel+0x2ae>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 800ba30:	687b      	ldr	r3, [r7, #4]
 800ba32:	681b      	ldr	r3, [r3, #0]
 800ba34:	2200      	movs	r2, #0
 800ba36:	2101      	movs	r1, #1
 800ba38:	4618      	mov	r0, r3
 800ba3a:	f7ff fa7b 	bl	800af34 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 800ba3e:	687b      	ldr	r3, [r7, #4]
 800ba40:	681b      	ldr	r3, [r3, #0]
 800ba42:	2102      	movs	r1, #2
 800ba44:	4618      	mov	r0, r3
 800ba46:	f7ff fa5f 	bl	800af08 <LL_ADC_GetOffsetChannel>
 800ba4a:	4603      	mov	r3, r0
 800ba4c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800ba50:	2b00      	cmp	r3, #0
 800ba52:	d10a      	bne.n	800ba6a <HAL_ADC_ConfigChannel+0x2da>
 800ba54:	687b      	ldr	r3, [r7, #4]
 800ba56:	681b      	ldr	r3, [r3, #0]
 800ba58:	2102      	movs	r1, #2
 800ba5a:	4618      	mov	r0, r3
 800ba5c:	f7ff fa54 	bl	800af08 <LL_ADC_GetOffsetChannel>
 800ba60:	4603      	mov	r3, r0
 800ba62:	0e9b      	lsrs	r3, r3, #26
 800ba64:	f003 021f 	and.w	r2, r3, #31
 800ba68:	e01e      	b.n	800baa8 <HAL_ADC_ConfigChannel+0x318>
 800ba6a:	687b      	ldr	r3, [r7, #4]
 800ba6c:	681b      	ldr	r3, [r3, #0]
 800ba6e:	2102      	movs	r1, #2
 800ba70:	4618      	mov	r0, r3
 800ba72:	f7ff fa49 	bl	800af08 <LL_ADC_GetOffsetChannel>
 800ba76:	4603      	mov	r3, r0
 800ba78:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800ba7c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800ba80:	fa93 f3a3 	rbit	r3, r3
 800ba84:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  return result;
 800ba88:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800ba8c:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  if (value == 0U)
 800ba90:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800ba94:	2b00      	cmp	r3, #0
 800ba96:	d101      	bne.n	800ba9c <HAL_ADC_ConfigChannel+0x30c>
    return 32U;
 800ba98:	2320      	movs	r3, #32
 800ba9a:	e004      	b.n	800baa6 <HAL_ADC_ConfigChannel+0x316>
  return __builtin_clz(value);
 800ba9c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800baa0:	fab3 f383 	clz	r3, r3
 800baa4:	b2db      	uxtb	r3, r3
 800baa6:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800baa8:	683b      	ldr	r3, [r7, #0]
 800baaa:	681b      	ldr	r3, [r3, #0]
 800baac:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800bab0:	2b00      	cmp	r3, #0
 800bab2:	d105      	bne.n	800bac0 <HAL_ADC_ConfigChannel+0x330>
 800bab4:	683b      	ldr	r3, [r7, #0]
 800bab6:	681b      	ldr	r3, [r3, #0]
 800bab8:	0e9b      	lsrs	r3, r3, #26
 800baba:	f003 031f 	and.w	r3, r3, #31
 800babe:	e014      	b.n	800baea <HAL_ADC_ConfigChannel+0x35a>
 800bac0:	683b      	ldr	r3, [r7, #0]
 800bac2:	681b      	ldr	r3, [r3, #0]
 800bac4:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800bac6:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800bac8:	fa93 f3a3 	rbit	r3, r3
 800bacc:	67bb      	str	r3, [r7, #120]	@ 0x78
  return result;
 800bace:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800bad0:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  if (value == 0U)
 800bad4:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800bad8:	2b00      	cmp	r3, #0
 800bada:	d101      	bne.n	800bae0 <HAL_ADC_ConfigChannel+0x350>
    return 32U;
 800badc:	2320      	movs	r3, #32
 800bade:	e004      	b.n	800baea <HAL_ADC_ConfigChannel+0x35a>
  return __builtin_clz(value);
 800bae0:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800bae4:	fab3 f383 	clz	r3, r3
 800bae8:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 800baea:	429a      	cmp	r2, r3
 800baec:	d106      	bne.n	800bafc <HAL_ADC_ConfigChannel+0x36c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 800baee:	687b      	ldr	r3, [r7, #4]
 800baf0:	681b      	ldr	r3, [r3, #0]
 800baf2:	2200      	movs	r2, #0
 800baf4:	2102      	movs	r1, #2
 800baf6:	4618      	mov	r0, r3
 800baf8:	f7ff fa1c 	bl	800af34 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800bafc:	687b      	ldr	r3, [r7, #4]
 800bafe:	681b      	ldr	r3, [r3, #0]
 800bb00:	2103      	movs	r1, #3
 800bb02:	4618      	mov	r0, r3
 800bb04:	f7ff fa00 	bl	800af08 <LL_ADC_GetOffsetChannel>
 800bb08:	4603      	mov	r3, r0
 800bb0a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800bb0e:	2b00      	cmp	r3, #0
 800bb10:	d10a      	bne.n	800bb28 <HAL_ADC_ConfigChannel+0x398>
 800bb12:	687b      	ldr	r3, [r7, #4]
 800bb14:	681b      	ldr	r3, [r3, #0]
 800bb16:	2103      	movs	r1, #3
 800bb18:	4618      	mov	r0, r3
 800bb1a:	f7ff f9f5 	bl	800af08 <LL_ADC_GetOffsetChannel>
 800bb1e:	4603      	mov	r3, r0
 800bb20:	0e9b      	lsrs	r3, r3, #26
 800bb22:	f003 021f 	and.w	r2, r3, #31
 800bb26:	e017      	b.n	800bb58 <HAL_ADC_ConfigChannel+0x3c8>
 800bb28:	687b      	ldr	r3, [r7, #4]
 800bb2a:	681b      	ldr	r3, [r3, #0]
 800bb2c:	2103      	movs	r1, #3
 800bb2e:	4618      	mov	r0, r3
 800bb30:	f7ff f9ea 	bl	800af08 <LL_ADC_GetOffsetChannel>
 800bb34:	4603      	mov	r3, r0
 800bb36:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800bb38:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800bb3a:	fa93 f3a3 	rbit	r3, r3
 800bb3e:	66fb      	str	r3, [r7, #108]	@ 0x6c
  return result;
 800bb40:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800bb42:	677b      	str	r3, [r7, #116]	@ 0x74
  if (value == 0U)
 800bb44:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800bb46:	2b00      	cmp	r3, #0
 800bb48:	d101      	bne.n	800bb4e <HAL_ADC_ConfigChannel+0x3be>
    return 32U;
 800bb4a:	2320      	movs	r3, #32
 800bb4c:	e003      	b.n	800bb56 <HAL_ADC_ConfigChannel+0x3c6>
  return __builtin_clz(value);
 800bb4e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800bb50:	fab3 f383 	clz	r3, r3
 800bb54:	b2db      	uxtb	r3, r3
 800bb56:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800bb58:	683b      	ldr	r3, [r7, #0]
 800bb5a:	681b      	ldr	r3, [r3, #0]
 800bb5c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800bb60:	2b00      	cmp	r3, #0
 800bb62:	d105      	bne.n	800bb70 <HAL_ADC_ConfigChannel+0x3e0>
 800bb64:	683b      	ldr	r3, [r7, #0]
 800bb66:	681b      	ldr	r3, [r3, #0]
 800bb68:	0e9b      	lsrs	r3, r3, #26
 800bb6a:	f003 031f 	and.w	r3, r3, #31
 800bb6e:	e011      	b.n	800bb94 <HAL_ADC_ConfigChannel+0x404>
 800bb70:	683b      	ldr	r3, [r7, #0]
 800bb72:	681b      	ldr	r3, [r3, #0]
 800bb74:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800bb76:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800bb78:	fa93 f3a3 	rbit	r3, r3
 800bb7c:	663b      	str	r3, [r7, #96]	@ 0x60
  return result;
 800bb7e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800bb80:	66bb      	str	r3, [r7, #104]	@ 0x68
  if (value == 0U)
 800bb82:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800bb84:	2b00      	cmp	r3, #0
 800bb86:	d101      	bne.n	800bb8c <HAL_ADC_ConfigChannel+0x3fc>
    return 32U;
 800bb88:	2320      	movs	r3, #32
 800bb8a:	e003      	b.n	800bb94 <HAL_ADC_ConfigChannel+0x404>
  return __builtin_clz(value);
 800bb8c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800bb8e:	fab3 f383 	clz	r3, r3
 800bb92:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800bb94:	429a      	cmp	r2, r3
 800bb96:	d106      	bne.n	800bba6 <HAL_ADC_ConfigChannel+0x416>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 800bb98:	687b      	ldr	r3, [r7, #4]
 800bb9a:	681b      	ldr	r3, [r3, #0]
 800bb9c:	2200      	movs	r2, #0
 800bb9e:	2103      	movs	r1, #3
 800bba0:	4618      	mov	r0, r3
 800bba2:	f7ff f9c7 	bl	800af34 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800bba6:	687b      	ldr	r3, [r7, #4]
 800bba8:	681b      	ldr	r3, [r3, #0]
 800bbaa:	4618      	mov	r0, r3
 800bbac:	f7ff faf0 	bl	800b190 <LL_ADC_IsEnabled>
 800bbb0:	4603      	mov	r3, r0
 800bbb2:	2b00      	cmp	r3, #0
 800bbb4:	f040 8140 	bne.w	800be38 <HAL_ADC_ConfigChannel+0x6a8>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 800bbb8:	687b      	ldr	r3, [r7, #4]
 800bbba:	6818      	ldr	r0, [r3, #0]
 800bbbc:	683b      	ldr	r3, [r7, #0]
 800bbbe:	6819      	ldr	r1, [r3, #0]
 800bbc0:	683b      	ldr	r3, [r7, #0]
 800bbc2:	68db      	ldr	r3, [r3, #12]
 800bbc4:	461a      	mov	r2, r3
 800bbc6:	f7ff fa3b 	bl	800b040 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 800bbca:	683b      	ldr	r3, [r7, #0]
 800bbcc:	68db      	ldr	r3, [r3, #12]
 800bbce:	4a8f      	ldr	r2, [pc, #572]	@ (800be0c <HAL_ADC_ConfigChannel+0x67c>)
 800bbd0:	4293      	cmp	r3, r2
 800bbd2:	f040 8131 	bne.w	800be38 <HAL_ADC_ConfigChannel+0x6a8>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800bbd6:	687b      	ldr	r3, [r7, #4]
 800bbd8:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 800bbda:	683b      	ldr	r3, [r7, #0]
 800bbdc:	681b      	ldr	r3, [r3, #0]
 800bbde:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800bbe2:	2b00      	cmp	r3, #0
 800bbe4:	d10b      	bne.n	800bbfe <HAL_ADC_ConfigChannel+0x46e>
 800bbe6:	683b      	ldr	r3, [r7, #0]
 800bbe8:	681b      	ldr	r3, [r3, #0]
 800bbea:	0e9b      	lsrs	r3, r3, #26
 800bbec:	3301      	adds	r3, #1
 800bbee:	f003 031f 	and.w	r3, r3, #31
 800bbf2:	2b09      	cmp	r3, #9
 800bbf4:	bf94      	ite	ls
 800bbf6:	2301      	movls	r3, #1
 800bbf8:	2300      	movhi	r3, #0
 800bbfa:	b2db      	uxtb	r3, r3
 800bbfc:	e019      	b.n	800bc32 <HAL_ADC_ConfigChannel+0x4a2>
 800bbfe:	683b      	ldr	r3, [r7, #0]
 800bc00:	681b      	ldr	r3, [r3, #0]
 800bc02:	65bb      	str	r3, [r7, #88]	@ 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800bc04:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800bc06:	fa93 f3a3 	rbit	r3, r3
 800bc0a:	657b      	str	r3, [r7, #84]	@ 0x54
  return result;
 800bc0c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800bc0e:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (value == 0U)
 800bc10:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800bc12:	2b00      	cmp	r3, #0
 800bc14:	d101      	bne.n	800bc1a <HAL_ADC_ConfigChannel+0x48a>
    return 32U;
 800bc16:	2320      	movs	r3, #32
 800bc18:	e003      	b.n	800bc22 <HAL_ADC_ConfigChannel+0x492>
  return __builtin_clz(value);
 800bc1a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800bc1c:	fab3 f383 	clz	r3, r3
 800bc20:	b2db      	uxtb	r3, r3
 800bc22:	3301      	adds	r3, #1
 800bc24:	f003 031f 	and.w	r3, r3, #31
 800bc28:	2b09      	cmp	r3, #9
 800bc2a:	bf94      	ite	ls
 800bc2c:	2301      	movls	r3, #1
 800bc2e:	2300      	movhi	r3, #0
 800bc30:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800bc32:	2b00      	cmp	r3, #0
 800bc34:	d079      	beq.n	800bd2a <HAL_ADC_ConfigChannel+0x59a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 800bc36:	683b      	ldr	r3, [r7, #0]
 800bc38:	681b      	ldr	r3, [r3, #0]
 800bc3a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800bc3e:	2b00      	cmp	r3, #0
 800bc40:	d107      	bne.n	800bc52 <HAL_ADC_ConfigChannel+0x4c2>
 800bc42:	683b      	ldr	r3, [r7, #0]
 800bc44:	681b      	ldr	r3, [r3, #0]
 800bc46:	0e9b      	lsrs	r3, r3, #26
 800bc48:	3301      	adds	r3, #1
 800bc4a:	069b      	lsls	r3, r3, #26
 800bc4c:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800bc50:	e015      	b.n	800bc7e <HAL_ADC_ConfigChannel+0x4ee>
 800bc52:	683b      	ldr	r3, [r7, #0]
 800bc54:	681b      	ldr	r3, [r3, #0]
 800bc56:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800bc58:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800bc5a:	fa93 f3a3 	rbit	r3, r3
 800bc5e:	64bb      	str	r3, [r7, #72]	@ 0x48
  return result;
 800bc60:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800bc62:	653b      	str	r3, [r7, #80]	@ 0x50
  if (value == 0U)
 800bc64:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800bc66:	2b00      	cmp	r3, #0
 800bc68:	d101      	bne.n	800bc6e <HAL_ADC_ConfigChannel+0x4de>
    return 32U;
 800bc6a:	2320      	movs	r3, #32
 800bc6c:	e003      	b.n	800bc76 <HAL_ADC_ConfigChannel+0x4e6>
  return __builtin_clz(value);
 800bc6e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800bc70:	fab3 f383 	clz	r3, r3
 800bc74:	b2db      	uxtb	r3, r3
 800bc76:	3301      	adds	r3, #1
 800bc78:	069b      	lsls	r3, r3, #26
 800bc7a:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800bc7e:	683b      	ldr	r3, [r7, #0]
 800bc80:	681b      	ldr	r3, [r3, #0]
 800bc82:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800bc86:	2b00      	cmp	r3, #0
 800bc88:	d109      	bne.n	800bc9e <HAL_ADC_ConfigChannel+0x50e>
 800bc8a:	683b      	ldr	r3, [r7, #0]
 800bc8c:	681b      	ldr	r3, [r3, #0]
 800bc8e:	0e9b      	lsrs	r3, r3, #26
 800bc90:	3301      	adds	r3, #1
 800bc92:	f003 031f 	and.w	r3, r3, #31
 800bc96:	2101      	movs	r1, #1
 800bc98:	fa01 f303 	lsl.w	r3, r1, r3
 800bc9c:	e017      	b.n	800bcce <HAL_ADC_ConfigChannel+0x53e>
 800bc9e:	683b      	ldr	r3, [r7, #0]
 800bca0:	681b      	ldr	r3, [r3, #0]
 800bca2:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800bca4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800bca6:	fa93 f3a3 	rbit	r3, r3
 800bcaa:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return result;
 800bcac:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800bcae:	647b      	str	r3, [r7, #68]	@ 0x44
  if (value == 0U)
 800bcb0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800bcb2:	2b00      	cmp	r3, #0
 800bcb4:	d101      	bne.n	800bcba <HAL_ADC_ConfigChannel+0x52a>
    return 32U;
 800bcb6:	2320      	movs	r3, #32
 800bcb8:	e003      	b.n	800bcc2 <HAL_ADC_ConfigChannel+0x532>
  return __builtin_clz(value);
 800bcba:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800bcbc:	fab3 f383 	clz	r3, r3
 800bcc0:	b2db      	uxtb	r3, r3
 800bcc2:	3301      	adds	r3, #1
 800bcc4:	f003 031f 	and.w	r3, r3, #31
 800bcc8:	2101      	movs	r1, #1
 800bcca:	fa01 f303 	lsl.w	r3, r1, r3
 800bcce:	ea42 0103 	orr.w	r1, r2, r3
 800bcd2:	683b      	ldr	r3, [r7, #0]
 800bcd4:	681b      	ldr	r3, [r3, #0]
 800bcd6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800bcda:	2b00      	cmp	r3, #0
 800bcdc:	d10a      	bne.n	800bcf4 <HAL_ADC_ConfigChannel+0x564>
 800bcde:	683b      	ldr	r3, [r7, #0]
 800bce0:	681b      	ldr	r3, [r3, #0]
 800bce2:	0e9b      	lsrs	r3, r3, #26
 800bce4:	3301      	adds	r3, #1
 800bce6:	f003 021f 	and.w	r2, r3, #31
 800bcea:	4613      	mov	r3, r2
 800bcec:	005b      	lsls	r3, r3, #1
 800bcee:	4413      	add	r3, r2
 800bcf0:	051b      	lsls	r3, r3, #20
 800bcf2:	e018      	b.n	800bd26 <HAL_ADC_ConfigChannel+0x596>
 800bcf4:	683b      	ldr	r3, [r7, #0]
 800bcf6:	681b      	ldr	r3, [r3, #0]
 800bcf8:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800bcfa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800bcfc:	fa93 f3a3 	rbit	r3, r3
 800bd00:	633b      	str	r3, [r7, #48]	@ 0x30
  return result;
 800bd02:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bd04:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (value == 0U)
 800bd06:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bd08:	2b00      	cmp	r3, #0
 800bd0a:	d101      	bne.n	800bd10 <HAL_ADC_ConfigChannel+0x580>
    return 32U;
 800bd0c:	2320      	movs	r3, #32
 800bd0e:	e003      	b.n	800bd18 <HAL_ADC_ConfigChannel+0x588>
  return __builtin_clz(value);
 800bd10:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bd12:	fab3 f383 	clz	r3, r3
 800bd16:	b2db      	uxtb	r3, r3
 800bd18:	3301      	adds	r3, #1
 800bd1a:	f003 021f 	and.w	r2, r3, #31
 800bd1e:	4613      	mov	r3, r2
 800bd20:	005b      	lsls	r3, r3, #1
 800bd22:	4413      	add	r3, r2
 800bd24:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800bd26:	430b      	orrs	r3, r1
 800bd28:	e081      	b.n	800be2e <HAL_ADC_ConfigChannel+0x69e>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 800bd2a:	683b      	ldr	r3, [r7, #0]
 800bd2c:	681b      	ldr	r3, [r3, #0]
 800bd2e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800bd32:	2b00      	cmp	r3, #0
 800bd34:	d107      	bne.n	800bd46 <HAL_ADC_ConfigChannel+0x5b6>
 800bd36:	683b      	ldr	r3, [r7, #0]
 800bd38:	681b      	ldr	r3, [r3, #0]
 800bd3a:	0e9b      	lsrs	r3, r3, #26
 800bd3c:	3301      	adds	r3, #1
 800bd3e:	069b      	lsls	r3, r3, #26
 800bd40:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800bd44:	e015      	b.n	800bd72 <HAL_ADC_ConfigChannel+0x5e2>
 800bd46:	683b      	ldr	r3, [r7, #0]
 800bd48:	681b      	ldr	r3, [r3, #0]
 800bd4a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800bd4c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bd4e:	fa93 f3a3 	rbit	r3, r3
 800bd52:	627b      	str	r3, [r7, #36]	@ 0x24
  return result;
 800bd54:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bd56:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (value == 0U)
 800bd58:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bd5a:	2b00      	cmp	r3, #0
 800bd5c:	d101      	bne.n	800bd62 <HAL_ADC_ConfigChannel+0x5d2>
    return 32U;
 800bd5e:	2320      	movs	r3, #32
 800bd60:	e003      	b.n	800bd6a <HAL_ADC_ConfigChannel+0x5da>
  return __builtin_clz(value);
 800bd62:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bd64:	fab3 f383 	clz	r3, r3
 800bd68:	b2db      	uxtb	r3, r3
 800bd6a:	3301      	adds	r3, #1
 800bd6c:	069b      	lsls	r3, r3, #26
 800bd6e:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800bd72:	683b      	ldr	r3, [r7, #0]
 800bd74:	681b      	ldr	r3, [r3, #0]
 800bd76:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800bd7a:	2b00      	cmp	r3, #0
 800bd7c:	d109      	bne.n	800bd92 <HAL_ADC_ConfigChannel+0x602>
 800bd7e:	683b      	ldr	r3, [r7, #0]
 800bd80:	681b      	ldr	r3, [r3, #0]
 800bd82:	0e9b      	lsrs	r3, r3, #26
 800bd84:	3301      	adds	r3, #1
 800bd86:	f003 031f 	and.w	r3, r3, #31
 800bd8a:	2101      	movs	r1, #1
 800bd8c:	fa01 f303 	lsl.w	r3, r1, r3
 800bd90:	e017      	b.n	800bdc2 <HAL_ADC_ConfigChannel+0x632>
 800bd92:	683b      	ldr	r3, [r7, #0]
 800bd94:	681b      	ldr	r3, [r3, #0]
 800bd96:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800bd98:	69fb      	ldr	r3, [r7, #28]
 800bd9a:	fa93 f3a3 	rbit	r3, r3
 800bd9e:	61bb      	str	r3, [r7, #24]
  return result;
 800bda0:	69bb      	ldr	r3, [r7, #24]
 800bda2:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 800bda4:	6a3b      	ldr	r3, [r7, #32]
 800bda6:	2b00      	cmp	r3, #0
 800bda8:	d101      	bne.n	800bdae <HAL_ADC_ConfigChannel+0x61e>
    return 32U;
 800bdaa:	2320      	movs	r3, #32
 800bdac:	e003      	b.n	800bdb6 <HAL_ADC_ConfigChannel+0x626>
  return __builtin_clz(value);
 800bdae:	6a3b      	ldr	r3, [r7, #32]
 800bdb0:	fab3 f383 	clz	r3, r3
 800bdb4:	b2db      	uxtb	r3, r3
 800bdb6:	3301      	adds	r3, #1
 800bdb8:	f003 031f 	and.w	r3, r3, #31
 800bdbc:	2101      	movs	r1, #1
 800bdbe:	fa01 f303 	lsl.w	r3, r1, r3
 800bdc2:	ea42 0103 	orr.w	r1, r2, r3
 800bdc6:	683b      	ldr	r3, [r7, #0]
 800bdc8:	681b      	ldr	r3, [r3, #0]
 800bdca:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800bdce:	2b00      	cmp	r3, #0
 800bdd0:	d10d      	bne.n	800bdee <HAL_ADC_ConfigChannel+0x65e>
 800bdd2:	683b      	ldr	r3, [r7, #0]
 800bdd4:	681b      	ldr	r3, [r3, #0]
 800bdd6:	0e9b      	lsrs	r3, r3, #26
 800bdd8:	3301      	adds	r3, #1
 800bdda:	f003 021f 	and.w	r2, r3, #31
 800bdde:	4613      	mov	r3, r2
 800bde0:	005b      	lsls	r3, r3, #1
 800bde2:	4413      	add	r3, r2
 800bde4:	3b1e      	subs	r3, #30
 800bde6:	051b      	lsls	r3, r3, #20
 800bde8:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800bdec:	e01e      	b.n	800be2c <HAL_ADC_ConfigChannel+0x69c>
 800bdee:	683b      	ldr	r3, [r7, #0]
 800bdf0:	681b      	ldr	r3, [r3, #0]
 800bdf2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800bdf4:	693b      	ldr	r3, [r7, #16]
 800bdf6:	fa93 f3a3 	rbit	r3, r3
 800bdfa:	60fb      	str	r3, [r7, #12]
  return result;
 800bdfc:	68fb      	ldr	r3, [r7, #12]
 800bdfe:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 800be00:	697b      	ldr	r3, [r7, #20]
 800be02:	2b00      	cmp	r3, #0
 800be04:	d104      	bne.n	800be10 <HAL_ADC_ConfigChannel+0x680>
    return 32U;
 800be06:	2320      	movs	r3, #32
 800be08:	e006      	b.n	800be18 <HAL_ADC_ConfigChannel+0x688>
 800be0a:	bf00      	nop
 800be0c:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 800be10:	697b      	ldr	r3, [r7, #20]
 800be12:	fab3 f383 	clz	r3, r3
 800be16:	b2db      	uxtb	r3, r3
 800be18:	3301      	adds	r3, #1
 800be1a:	f003 021f 	and.w	r2, r3, #31
 800be1e:	4613      	mov	r3, r2
 800be20:	005b      	lsls	r3, r3, #1
 800be22:	4413      	add	r3, r2
 800be24:	3b1e      	subs	r3, #30
 800be26:	051b      	lsls	r3, r3, #20
 800be28:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800be2c:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 800be2e:	683a      	ldr	r2, [r7, #0]
 800be30:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800be32:	4619      	mov	r1, r3
 800be34:	f7ff f8d8 	bl	800afe8 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 800be38:	683b      	ldr	r3, [r7, #0]
 800be3a:	681a      	ldr	r2, [r3, #0]
 800be3c:	4b44      	ldr	r3, [pc, #272]	@ (800bf50 <HAL_ADC_ConfigChannel+0x7c0>)
 800be3e:	4013      	ands	r3, r2
 800be40:	2b00      	cmp	r3, #0
 800be42:	d07a      	beq.n	800bf3a <HAL_ADC_ConfigChannel+0x7aa>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800be44:	4843      	ldr	r0, [pc, #268]	@ (800bf54 <HAL_ADC_ConfigChannel+0x7c4>)
 800be46:	f7ff f82d 	bl	800aea4 <LL_ADC_GetCommonPathInternalCh>
 800be4a:	f8c7 00c0 	str.w	r0, [r7, #192]	@ 0xc0

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800be4e:	683b      	ldr	r3, [r7, #0]
 800be50:	681b      	ldr	r3, [r3, #0]
 800be52:	4a41      	ldr	r2, [pc, #260]	@ (800bf58 <HAL_ADC_ConfigChannel+0x7c8>)
 800be54:	4293      	cmp	r3, r2
 800be56:	d12c      	bne.n	800beb2 <HAL_ADC_ConfigChannel+0x722>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 800be58:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800be5c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800be60:	2b00      	cmp	r3, #0
 800be62:	d126      	bne.n	800beb2 <HAL_ADC_ConfigChannel+0x722>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800be64:	687b      	ldr	r3, [r7, #4]
 800be66:	681b      	ldr	r3, [r3, #0]
 800be68:	4a3c      	ldr	r2, [pc, #240]	@ (800bf5c <HAL_ADC_ConfigChannel+0x7cc>)
 800be6a:	4293      	cmp	r3, r2
 800be6c:	d004      	beq.n	800be78 <HAL_ADC_ConfigChannel+0x6e8>
 800be6e:	687b      	ldr	r3, [r7, #4]
 800be70:	681b      	ldr	r3, [r3, #0]
 800be72:	4a3b      	ldr	r2, [pc, #236]	@ (800bf60 <HAL_ADC_ConfigChannel+0x7d0>)
 800be74:	4293      	cmp	r3, r2
 800be76:	d15d      	bne.n	800bf34 <HAL_ADC_ConfigChannel+0x7a4>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800be78:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800be7c:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800be80:	4619      	mov	r1, r3
 800be82:	4834      	ldr	r0, [pc, #208]	@ (800bf54 <HAL_ADC_ConfigChannel+0x7c4>)
 800be84:	f7fe fffb 	bl	800ae7e <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800be88:	4b36      	ldr	r3, [pc, #216]	@ (800bf64 <HAL_ADC_ConfigChannel+0x7d4>)
 800be8a:	681b      	ldr	r3, [r3, #0]
 800be8c:	099b      	lsrs	r3, r3, #6
 800be8e:	4a36      	ldr	r2, [pc, #216]	@ (800bf68 <HAL_ADC_ConfigChannel+0x7d8>)
 800be90:	fba2 2303 	umull	r2, r3, r2, r3
 800be94:	099b      	lsrs	r3, r3, #6
 800be96:	1c5a      	adds	r2, r3, #1
 800be98:	4613      	mov	r3, r2
 800be9a:	005b      	lsls	r3, r3, #1
 800be9c:	4413      	add	r3, r2
 800be9e:	009b      	lsls	r3, r3, #2
 800bea0:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 800bea2:	e002      	b.n	800beaa <HAL_ADC_ConfigChannel+0x71a>
          {
            wait_loop_index--;
 800bea4:	68bb      	ldr	r3, [r7, #8]
 800bea6:	3b01      	subs	r3, #1
 800bea8:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 800beaa:	68bb      	ldr	r3, [r7, #8]
 800beac:	2b00      	cmp	r3, #0
 800beae:	d1f9      	bne.n	800bea4 <HAL_ADC_ConfigChannel+0x714>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800beb0:	e040      	b.n	800bf34 <HAL_ADC_ConfigChannel+0x7a4>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 800beb2:	683b      	ldr	r3, [r7, #0]
 800beb4:	681b      	ldr	r3, [r3, #0]
 800beb6:	4a2d      	ldr	r2, [pc, #180]	@ (800bf6c <HAL_ADC_ConfigChannel+0x7dc>)
 800beb8:	4293      	cmp	r3, r2
 800beba:	d118      	bne.n	800beee <HAL_ADC_ConfigChannel+0x75e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 800bebc:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800bec0:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800bec4:	2b00      	cmp	r3, #0
 800bec6:	d112      	bne.n	800beee <HAL_ADC_ConfigChannel+0x75e>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800bec8:	687b      	ldr	r3, [r7, #4]
 800beca:	681b      	ldr	r3, [r3, #0]
 800becc:	4a23      	ldr	r2, [pc, #140]	@ (800bf5c <HAL_ADC_ConfigChannel+0x7cc>)
 800bece:	4293      	cmp	r3, r2
 800bed0:	d004      	beq.n	800bedc <HAL_ADC_ConfigChannel+0x74c>
 800bed2:	687b      	ldr	r3, [r7, #4]
 800bed4:	681b      	ldr	r3, [r3, #0]
 800bed6:	4a22      	ldr	r2, [pc, #136]	@ (800bf60 <HAL_ADC_ConfigChannel+0x7d0>)
 800bed8:	4293      	cmp	r3, r2
 800beda:	d12d      	bne.n	800bf38 <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800bedc:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800bee0:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800bee4:	4619      	mov	r1, r3
 800bee6:	481b      	ldr	r0, [pc, #108]	@ (800bf54 <HAL_ADC_ConfigChannel+0x7c4>)
 800bee8:	f7fe ffc9 	bl	800ae7e <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800beec:	e024      	b.n	800bf38 <HAL_ADC_ConfigChannel+0x7a8>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 800beee:	683b      	ldr	r3, [r7, #0]
 800bef0:	681b      	ldr	r3, [r3, #0]
 800bef2:	4a1f      	ldr	r2, [pc, #124]	@ (800bf70 <HAL_ADC_ConfigChannel+0x7e0>)
 800bef4:	4293      	cmp	r3, r2
 800bef6:	d120      	bne.n	800bf3a <HAL_ADC_ConfigChannel+0x7aa>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 800bef8:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800befc:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800bf00:	2b00      	cmp	r3, #0
 800bf02:	d11a      	bne.n	800bf3a <HAL_ADC_ConfigChannel+0x7aa>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 800bf04:	687b      	ldr	r3, [r7, #4]
 800bf06:	681b      	ldr	r3, [r3, #0]
 800bf08:	4a14      	ldr	r2, [pc, #80]	@ (800bf5c <HAL_ADC_ConfigChannel+0x7cc>)
 800bf0a:	4293      	cmp	r3, r2
 800bf0c:	d115      	bne.n	800bf3a <HAL_ADC_ConfigChannel+0x7aa>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800bf0e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800bf12:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800bf16:	4619      	mov	r1, r3
 800bf18:	480e      	ldr	r0, [pc, #56]	@ (800bf54 <HAL_ADC_ConfigChannel+0x7c4>)
 800bf1a:	f7fe ffb0 	bl	800ae7e <LL_ADC_SetCommonPathInternalCh>
 800bf1e:	e00c      	b.n	800bf3a <HAL_ADC_ConfigChannel+0x7aa>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800bf20:	687b      	ldr	r3, [r7, #4]
 800bf22:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800bf24:	f043 0220 	orr.w	r2, r3, #32
 800bf28:	687b      	ldr	r3, [r7, #4]
 800bf2a:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 800bf2c:	2301      	movs	r3, #1
 800bf2e:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
 800bf32:	e002      	b.n	800bf3a <HAL_ADC_ConfigChannel+0x7aa>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800bf34:	bf00      	nop
 800bf36:	e000      	b.n	800bf3a <HAL_ADC_ConfigChannel+0x7aa>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800bf38:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800bf3a:	687b      	ldr	r3, [r7, #4]
 800bf3c:	2200      	movs	r2, #0
 800bf3e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 800bf42:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 800bf46:	4618      	mov	r0, r3
 800bf48:	37d8      	adds	r7, #216	@ 0xd8
 800bf4a:	46bd      	mov	sp, r7
 800bf4c:	bd80      	pop	{r7, pc}
 800bf4e:	bf00      	nop
 800bf50:	80080000 	.word	0x80080000
 800bf54:	50040300 	.word	0x50040300
 800bf58:	c7520000 	.word	0xc7520000
 800bf5c:	50040000 	.word	0x50040000
 800bf60:	50040200 	.word	0x50040200
 800bf64:	20000268 	.word	0x20000268
 800bf68:	053e2d63 	.word	0x053e2d63
 800bf6c:	cb840000 	.word	0xcb840000
 800bf70:	80000001 	.word	0x80000001

0800bf74 <ADC_ConversionStop>:
  *            @arg @ref ADC_INJECTED_GROUP          ADC injected conversion type.
  *            @arg @ref ADC_REGULAR_INJECTED_GROUP  ADC regular and injected conversion type.
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc, uint32_t ConversionGroup)
{
 800bf74:	b580      	push	{r7, lr}
 800bf76:	b088      	sub	sp, #32
 800bf78:	af00      	add	r7, sp, #0
 800bf7a:	6078      	str	r0, [r7, #4]
 800bf7c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t Conversion_Timeout_CPU_cycles = 0UL;
 800bf7e:	2300      	movs	r3, #0
 800bf80:	61fb      	str	r3, [r7, #28]
  uint32_t conversion_group_reassigned = ConversionGroup;
 800bf82:	683b      	ldr	r3, [r7, #0]
 800bf84:	61bb      	str	r3, [r7, #24]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CONVERSION_GROUP(ConversionGroup));

  /* Verification if ADC is not already stopped (on regular and injected      */
  /* groups) to bypass this function if not needed.                           */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800bf86:	687b      	ldr	r3, [r7, #4]
 800bf88:	681b      	ldr	r3, [r3, #0]
 800bf8a:	4618      	mov	r0, r3
 800bf8c:	f7ff f94e 	bl	800b22c <LL_ADC_REG_IsConversionOngoing>
 800bf90:	6138      	str	r0, [r7, #16]
  tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800bf92:	687b      	ldr	r3, [r7, #4]
 800bf94:	681b      	ldr	r3, [r3, #0]
 800bf96:	4618      	mov	r0, r3
 800bf98:	f7ff f96f 	bl	800b27a <LL_ADC_INJ_IsConversionOngoing>
 800bf9c:	60f8      	str	r0, [r7, #12]
  if ((tmp_adc_is_conversion_on_going_regular != 0UL)
 800bf9e:	693b      	ldr	r3, [r7, #16]
 800bfa0:	2b00      	cmp	r3, #0
 800bfa2:	d103      	bne.n	800bfac <ADC_ConversionStop+0x38>
      || (tmp_adc_is_conversion_on_going_injected != 0UL)
 800bfa4:	68fb      	ldr	r3, [r7, #12]
 800bfa6:	2b00      	cmp	r3, #0
 800bfa8:	f000 8098 	beq.w	800c0dc <ADC_ConversionStop+0x168>
    /* auto-delay mode.                                                       */
    /* In auto-injection mode, regular group stop ADC_CR_ADSTP is used (not   */
    /* injected group stop ADC_CR_JADSTP).                                    */
    /* Procedure to be followed: Wait until JEOS=1, clear JEOS, set ADSTP=1   */
    /* (see reference manual).                                                */
    if (((hadc->Instance->CFGR & ADC_CFGR_JAUTO) != 0UL)
 800bfac:	687b      	ldr	r3, [r7, #4]
 800bfae:	681b      	ldr	r3, [r3, #0]
 800bfb0:	68db      	ldr	r3, [r3, #12]
 800bfb2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800bfb6:	2b00      	cmp	r3, #0
 800bfb8:	d02a      	beq.n	800c010 <ADC_ConversionStop+0x9c>
        && (hadc->Init.ContinuousConvMode == ENABLE)
 800bfba:	687b      	ldr	r3, [r7, #4]
 800bfbc:	7e5b      	ldrb	r3, [r3, #25]
 800bfbe:	2b01      	cmp	r3, #1
 800bfc0:	d126      	bne.n	800c010 <ADC_ConversionStop+0x9c>
        && (hadc->Init.LowPowerAutoWait == ENABLE)
 800bfc2:	687b      	ldr	r3, [r7, #4]
 800bfc4:	7e1b      	ldrb	r3, [r3, #24]
 800bfc6:	2b01      	cmp	r3, #1
 800bfc8:	d122      	bne.n	800c010 <ADC_ConversionStop+0x9c>
       )
    {
      /* Use stop of regular group */
      conversion_group_reassigned = ADC_REGULAR_GROUP;
 800bfca:	2301      	movs	r3, #1
 800bfcc:	61bb      	str	r3, [r7, #24]

      /* Wait until JEOS=1 (maximum Timeout: 4 injected conversions) */
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 800bfce:	e014      	b.n	800bffa <ADC_ConversionStop+0x86>
      {
        if (Conversion_Timeout_CPU_cycles >= (ADC_CONVERSION_TIME_MAX_CPU_CYCLES * 4UL))
 800bfd0:	69fb      	ldr	r3, [r7, #28]
 800bfd2:	4a45      	ldr	r2, [pc, #276]	@ (800c0e8 <ADC_ConversionStop+0x174>)
 800bfd4:	4293      	cmp	r3, r2
 800bfd6:	d90d      	bls.n	800bff4 <ADC_ConversionStop+0x80>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800bfd8:	687b      	ldr	r3, [r7, #4]
 800bfda:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800bfdc:	f043 0210 	orr.w	r2, r3, #16
 800bfe0:	687b      	ldr	r3, [r7, #4]
 800bfe2:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800bfe4:	687b      	ldr	r3, [r7, #4]
 800bfe6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800bfe8:	f043 0201 	orr.w	r2, r3, #1
 800bfec:	687b      	ldr	r3, [r7, #4]
 800bfee:	659a      	str	r2, [r3, #88]	@ 0x58

          return HAL_ERROR;
 800bff0:	2301      	movs	r3, #1
 800bff2:	e074      	b.n	800c0de <ADC_ConversionStop+0x16a>
        }
        Conversion_Timeout_CPU_cycles ++;
 800bff4:	69fb      	ldr	r3, [r7, #28]
 800bff6:	3301      	adds	r3, #1
 800bff8:	61fb      	str	r3, [r7, #28]
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 800bffa:	687b      	ldr	r3, [r7, #4]
 800bffc:	681b      	ldr	r3, [r3, #0]
 800bffe:	681b      	ldr	r3, [r3, #0]
 800c000:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c004:	2b40      	cmp	r3, #64	@ 0x40
 800c006:	d1e3      	bne.n	800bfd0 <ADC_ConversionStop+0x5c>
      }

      /* Clear JEOS */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
 800c008:	687b      	ldr	r3, [r7, #4]
 800c00a:	681b      	ldr	r3, [r3, #0]
 800c00c:	2240      	movs	r2, #64	@ 0x40
 800c00e:	601a      	str	r2, [r3, #0]
    }

    /* Stop potential conversion on going on ADC group regular */
    if (conversion_group_reassigned != ADC_INJECTED_GROUP)
 800c010:	69bb      	ldr	r3, [r7, #24]
 800c012:	2b02      	cmp	r3, #2
 800c014:	d014      	beq.n	800c040 <ADC_ConversionStop+0xcc>
    {
      /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 800c016:	687b      	ldr	r3, [r7, #4]
 800c018:	681b      	ldr	r3, [r3, #0]
 800c01a:	4618      	mov	r0, r3
 800c01c:	f7ff f906 	bl	800b22c <LL_ADC_REG_IsConversionOngoing>
 800c020:	4603      	mov	r3, r0
 800c022:	2b00      	cmp	r3, #0
 800c024:	d00c      	beq.n	800c040 <ADC_ConversionStop+0xcc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 800c026:	687b      	ldr	r3, [r7, #4]
 800c028:	681b      	ldr	r3, [r3, #0]
 800c02a:	4618      	mov	r0, r3
 800c02c:	f7ff f8c3 	bl	800b1b6 <LL_ADC_IsDisableOngoing>
 800c030:	4603      	mov	r3, r0
 800c032:	2b00      	cmp	r3, #0
 800c034:	d104      	bne.n	800c040 <ADC_ConversionStop+0xcc>
        {
          /* Stop ADC group regular conversion */
          LL_ADC_REG_StopConversion(hadc->Instance);
 800c036:	687b      	ldr	r3, [r7, #4]
 800c038:	681b      	ldr	r3, [r3, #0]
 800c03a:	4618      	mov	r0, r3
 800c03c:	f7ff f8e2 	bl	800b204 <LL_ADC_REG_StopConversion>
        }
      }
    }

    /* Stop potential conversion on going on ADC group injected */
    if (conversion_group_reassigned != ADC_REGULAR_GROUP)
 800c040:	69bb      	ldr	r3, [r7, #24]
 800c042:	2b01      	cmp	r3, #1
 800c044:	d014      	beq.n	800c070 <ADC_ConversionStop+0xfc>
    {
      /* Software is allowed to set JADSTP only when JADSTART=1 and ADDIS=0 */
      if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) != 0UL)
 800c046:	687b      	ldr	r3, [r7, #4]
 800c048:	681b      	ldr	r3, [r3, #0]
 800c04a:	4618      	mov	r0, r3
 800c04c:	f7ff f915 	bl	800b27a <LL_ADC_INJ_IsConversionOngoing>
 800c050:	4603      	mov	r3, r0
 800c052:	2b00      	cmp	r3, #0
 800c054:	d00c      	beq.n	800c070 <ADC_ConversionStop+0xfc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 800c056:	687b      	ldr	r3, [r7, #4]
 800c058:	681b      	ldr	r3, [r3, #0]
 800c05a:	4618      	mov	r0, r3
 800c05c:	f7ff f8ab 	bl	800b1b6 <LL_ADC_IsDisableOngoing>
 800c060:	4603      	mov	r3, r0
 800c062:	2b00      	cmp	r3, #0
 800c064:	d104      	bne.n	800c070 <ADC_ConversionStop+0xfc>
        {
          /* Stop ADC group injected conversion */
          LL_ADC_INJ_StopConversion(hadc->Instance);
 800c066:	687b      	ldr	r3, [r7, #4]
 800c068:	681b      	ldr	r3, [r3, #0]
 800c06a:	4618      	mov	r0, r3
 800c06c:	f7ff f8f1 	bl	800b252 <LL_ADC_INJ_StopConversion>
        }
      }
    }

    /* Selection of start and stop bits with respect to the regular or injected group */
    switch (conversion_group_reassigned)
 800c070:	69bb      	ldr	r3, [r7, #24]
 800c072:	2b02      	cmp	r3, #2
 800c074:	d005      	beq.n	800c082 <ADC_ConversionStop+0x10e>
 800c076:	69bb      	ldr	r3, [r7, #24]
 800c078:	2b03      	cmp	r3, #3
 800c07a:	d105      	bne.n	800c088 <ADC_ConversionStop+0x114>
    {
      case ADC_REGULAR_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = (ADC_CR_ADSTART | ADC_CR_JADSTART);
 800c07c:	230c      	movs	r3, #12
 800c07e:	617b      	str	r3, [r7, #20]
        break;
 800c080:	e005      	b.n	800c08e <ADC_ConversionStop+0x11a>
      case ADC_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_JADSTART;
 800c082:	2308      	movs	r3, #8
 800c084:	617b      	str	r3, [r7, #20]
        break;
 800c086:	e002      	b.n	800c08e <ADC_ConversionStop+0x11a>
      /* Case ADC_REGULAR_GROUP only*/
      default:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
 800c088:	2304      	movs	r3, #4
 800c08a:	617b      	str	r3, [r7, #20]
        break;
 800c08c:	bf00      	nop
    }

    /* Wait for conversion effectively stopped */
    tickstart = HAL_GetTick();
 800c08e:	f7fe feb3 	bl	800adf8 <HAL_GetTick>
 800c092:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 800c094:	e01b      	b.n	800c0ce <ADC_ConversionStop+0x15a>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 800c096:	f7fe feaf 	bl	800adf8 <HAL_GetTick>
 800c09a:	4602      	mov	r2, r0
 800c09c:	68bb      	ldr	r3, [r7, #8]
 800c09e:	1ad3      	subs	r3, r2, r3
 800c0a0:	2b05      	cmp	r3, #5
 800c0a2:	d914      	bls.n	800c0ce <ADC_ConversionStop+0x15a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 800c0a4:	687b      	ldr	r3, [r7, #4]
 800c0a6:	681b      	ldr	r3, [r3, #0]
 800c0a8:	689a      	ldr	r2, [r3, #8]
 800c0aa:	697b      	ldr	r3, [r7, #20]
 800c0ac:	4013      	ands	r3, r2
 800c0ae:	2b00      	cmp	r3, #0
 800c0b0:	d00d      	beq.n	800c0ce <ADC_ConversionStop+0x15a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800c0b2:	687b      	ldr	r3, [r7, #4]
 800c0b4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c0b6:	f043 0210 	orr.w	r2, r3, #16
 800c0ba:	687b      	ldr	r3, [r7, #4]
 800c0bc:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800c0be:	687b      	ldr	r3, [r7, #4]
 800c0c0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800c0c2:	f043 0201 	orr.w	r2, r3, #1
 800c0c6:	687b      	ldr	r3, [r7, #4]
 800c0c8:	659a      	str	r2, [r3, #88]	@ 0x58

          return HAL_ERROR;
 800c0ca:	2301      	movs	r3, #1
 800c0cc:	e007      	b.n	800c0de <ADC_ConversionStop+0x16a>
    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 800c0ce:	687b      	ldr	r3, [r7, #4]
 800c0d0:	681b      	ldr	r3, [r3, #0]
 800c0d2:	689a      	ldr	r2, [r3, #8]
 800c0d4:	697b      	ldr	r3, [r7, #20]
 800c0d6:	4013      	ands	r3, r2
 800c0d8:	2b00      	cmp	r3, #0
 800c0da:	d1dc      	bne.n	800c096 <ADC_ConversionStop+0x122>
    }

  }

  /* Return HAL status */
  return HAL_OK;
 800c0dc:	2300      	movs	r3, #0
}
 800c0de:	4618      	mov	r0, r3
 800c0e0:	3720      	adds	r7, #32
 800c0e2:	46bd      	mov	sp, r7
 800c0e4:	bd80      	pop	{r7, pc}
 800c0e6:	bf00      	nop
 800c0e8:	a33fffff 	.word	0xa33fffff

0800c0ec <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 800c0ec:	b580      	push	{r7, lr}
 800c0ee:	b084      	sub	sp, #16
 800c0f0:	af00      	add	r7, sp, #0
 800c0f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 800c0f4:	2300      	movs	r3, #0
 800c0f6:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800c0f8:	687b      	ldr	r3, [r7, #4]
 800c0fa:	681b      	ldr	r3, [r3, #0]
 800c0fc:	4618      	mov	r0, r3
 800c0fe:	f7ff f847 	bl	800b190 <LL_ADC_IsEnabled>
 800c102:	4603      	mov	r3, r0
 800c104:	2b00      	cmp	r3, #0
 800c106:	d169      	bne.n	800c1dc <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 800c108:	687b      	ldr	r3, [r7, #4]
 800c10a:	681b      	ldr	r3, [r3, #0]
 800c10c:	689a      	ldr	r2, [r3, #8]
 800c10e:	4b36      	ldr	r3, [pc, #216]	@ (800c1e8 <ADC_Enable+0xfc>)
 800c110:	4013      	ands	r3, r2
 800c112:	2b00      	cmp	r3, #0
 800c114:	d00d      	beq.n	800c132 <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800c116:	687b      	ldr	r3, [r7, #4]
 800c118:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c11a:	f043 0210 	orr.w	r2, r3, #16
 800c11e:	687b      	ldr	r3, [r7, #4]
 800c120:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800c122:	687b      	ldr	r3, [r7, #4]
 800c124:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800c126:	f043 0201 	orr.w	r2, r3, #1
 800c12a:	687b      	ldr	r3, [r7, #4]
 800c12c:	659a      	str	r2, [r3, #88]	@ 0x58

      return HAL_ERROR;
 800c12e:	2301      	movs	r3, #1
 800c130:	e055      	b.n	800c1de <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 800c132:	687b      	ldr	r3, [r7, #4]
 800c134:	681b      	ldr	r3, [r3, #0]
 800c136:	4618      	mov	r0, r3
 800c138:	f7ff f802 	bl	800b140 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 800c13c:	482b      	ldr	r0, [pc, #172]	@ (800c1ec <ADC_Enable+0x100>)
 800c13e:	f7fe feb1 	bl	800aea4 <LL_ADC_GetCommonPathInternalCh>
 800c142:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 800c144:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 800c148:	2b00      	cmp	r3, #0
 800c14a:	d013      	beq.n	800c174 <ADC_Enable+0x88>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800c14c:	4b28      	ldr	r3, [pc, #160]	@ (800c1f0 <ADC_Enable+0x104>)
 800c14e:	681b      	ldr	r3, [r3, #0]
 800c150:	099b      	lsrs	r3, r3, #6
 800c152:	4a28      	ldr	r2, [pc, #160]	@ (800c1f4 <ADC_Enable+0x108>)
 800c154:	fba2 2303 	umull	r2, r3, r2, r3
 800c158:	099b      	lsrs	r3, r3, #6
 800c15a:	1c5a      	adds	r2, r3, #1
 800c15c:	4613      	mov	r3, r2
 800c15e:	005b      	lsls	r3, r3, #1
 800c160:	4413      	add	r3, r2
 800c162:	009b      	lsls	r3, r3, #2
 800c164:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 800c166:	e002      	b.n	800c16e <ADC_Enable+0x82>
      {
        wait_loop_index--;
 800c168:	68bb      	ldr	r3, [r7, #8]
 800c16a:	3b01      	subs	r3, #1
 800c16c:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 800c16e:	68bb      	ldr	r3, [r7, #8]
 800c170:	2b00      	cmp	r3, #0
 800c172:	d1f9      	bne.n	800c168 <ADC_Enable+0x7c>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 800c174:	f7fe fe40 	bl	800adf8 <HAL_GetTick>
 800c178:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800c17a:	e028      	b.n	800c1ce <ADC_Enable+0xe2>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800c17c:	687b      	ldr	r3, [r7, #4]
 800c17e:	681b      	ldr	r3, [r3, #0]
 800c180:	4618      	mov	r0, r3
 800c182:	f7ff f805 	bl	800b190 <LL_ADC_IsEnabled>
 800c186:	4603      	mov	r3, r0
 800c188:	2b00      	cmp	r3, #0
 800c18a:	d104      	bne.n	800c196 <ADC_Enable+0xaa>
      {
        LL_ADC_Enable(hadc->Instance);
 800c18c:	687b      	ldr	r3, [r7, #4]
 800c18e:	681b      	ldr	r3, [r3, #0]
 800c190:	4618      	mov	r0, r3
 800c192:	f7fe ffd5 	bl	800b140 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800c196:	f7fe fe2f 	bl	800adf8 <HAL_GetTick>
 800c19a:	4602      	mov	r2, r0
 800c19c:	68fb      	ldr	r3, [r7, #12]
 800c19e:	1ad3      	subs	r3, r2, r3
 800c1a0:	2b02      	cmp	r3, #2
 800c1a2:	d914      	bls.n	800c1ce <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800c1a4:	687b      	ldr	r3, [r7, #4]
 800c1a6:	681b      	ldr	r3, [r3, #0]
 800c1a8:	681b      	ldr	r3, [r3, #0]
 800c1aa:	f003 0301 	and.w	r3, r3, #1
 800c1ae:	2b01      	cmp	r3, #1
 800c1b0:	d00d      	beq.n	800c1ce <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800c1b2:	687b      	ldr	r3, [r7, #4]
 800c1b4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c1b6:	f043 0210 	orr.w	r2, r3, #16
 800c1ba:	687b      	ldr	r3, [r7, #4]
 800c1bc:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800c1be:	687b      	ldr	r3, [r7, #4]
 800c1c0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800c1c2:	f043 0201 	orr.w	r2, r3, #1
 800c1c6:	687b      	ldr	r3, [r7, #4]
 800c1c8:	659a      	str	r2, [r3, #88]	@ 0x58

          return HAL_ERROR;
 800c1ca:	2301      	movs	r3, #1
 800c1cc:	e007      	b.n	800c1de <ADC_Enable+0xf2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800c1ce:	687b      	ldr	r3, [r7, #4]
 800c1d0:	681b      	ldr	r3, [r3, #0]
 800c1d2:	681b      	ldr	r3, [r3, #0]
 800c1d4:	f003 0301 	and.w	r3, r3, #1
 800c1d8:	2b01      	cmp	r3, #1
 800c1da:	d1cf      	bne.n	800c17c <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 800c1dc:	2300      	movs	r3, #0
}
 800c1de:	4618      	mov	r0, r3
 800c1e0:	3710      	adds	r7, #16
 800c1e2:	46bd      	mov	sp, r7
 800c1e4:	bd80      	pop	{r7, pc}
 800c1e6:	bf00      	nop
 800c1e8:	8000003f 	.word	0x8000003f
 800c1ec:	50040300 	.word	0x50040300
 800c1f0:	20000268 	.word	0x20000268
 800c1f4:	053e2d63 	.word	0x053e2d63

0800c1f8 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 800c1f8:	b580      	push	{r7, lr}
 800c1fa:	b084      	sub	sp, #16
 800c1fc:	af00      	add	r7, sp, #0
 800c1fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 800c200:	687b      	ldr	r3, [r7, #4]
 800c202:	681b      	ldr	r3, [r3, #0]
 800c204:	4618      	mov	r0, r3
 800c206:	f7fe ffd6 	bl	800b1b6 <LL_ADC_IsDisableOngoing>
 800c20a:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 800c20c:	687b      	ldr	r3, [r7, #4]
 800c20e:	681b      	ldr	r3, [r3, #0]
 800c210:	4618      	mov	r0, r3
 800c212:	f7fe ffbd 	bl	800b190 <LL_ADC_IsEnabled>
 800c216:	4603      	mov	r3, r0
 800c218:	2b00      	cmp	r3, #0
 800c21a:	d047      	beq.n	800c2ac <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 800c21c:	68fb      	ldr	r3, [r7, #12]
 800c21e:	2b00      	cmp	r3, #0
 800c220:	d144      	bne.n	800c2ac <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 800c222:	687b      	ldr	r3, [r7, #4]
 800c224:	681b      	ldr	r3, [r3, #0]
 800c226:	689b      	ldr	r3, [r3, #8]
 800c228:	f003 030d 	and.w	r3, r3, #13
 800c22c:	2b01      	cmp	r3, #1
 800c22e:	d10c      	bne.n	800c24a <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 800c230:	687b      	ldr	r3, [r7, #4]
 800c232:	681b      	ldr	r3, [r3, #0]
 800c234:	4618      	mov	r0, r3
 800c236:	f7fe ff97 	bl	800b168 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 800c23a:	687b      	ldr	r3, [r7, #4]
 800c23c:	681b      	ldr	r3, [r3, #0]
 800c23e:	2203      	movs	r2, #3
 800c240:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 800c242:	f7fe fdd9 	bl	800adf8 <HAL_GetTick>
 800c246:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 800c248:	e029      	b.n	800c29e <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800c24a:	687b      	ldr	r3, [r7, #4]
 800c24c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c24e:	f043 0210 	orr.w	r2, r3, #16
 800c252:	687b      	ldr	r3, [r7, #4]
 800c254:	655a      	str	r2, [r3, #84]	@ 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800c256:	687b      	ldr	r3, [r7, #4]
 800c258:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800c25a:	f043 0201 	orr.w	r2, r3, #1
 800c25e:	687b      	ldr	r3, [r7, #4]
 800c260:	659a      	str	r2, [r3, #88]	@ 0x58
      return HAL_ERROR;
 800c262:	2301      	movs	r3, #1
 800c264:	e023      	b.n	800c2ae <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800c266:	f7fe fdc7 	bl	800adf8 <HAL_GetTick>
 800c26a:	4602      	mov	r2, r0
 800c26c:	68bb      	ldr	r3, [r7, #8]
 800c26e:	1ad3      	subs	r3, r2, r3
 800c270:	2b02      	cmp	r3, #2
 800c272:	d914      	bls.n	800c29e <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 800c274:	687b      	ldr	r3, [r7, #4]
 800c276:	681b      	ldr	r3, [r3, #0]
 800c278:	689b      	ldr	r3, [r3, #8]
 800c27a:	f003 0301 	and.w	r3, r3, #1
 800c27e:	2b00      	cmp	r3, #0
 800c280:	d00d      	beq.n	800c29e <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800c282:	687b      	ldr	r3, [r7, #4]
 800c284:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c286:	f043 0210 	orr.w	r2, r3, #16
 800c28a:	687b      	ldr	r3, [r7, #4]
 800c28c:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800c28e:	687b      	ldr	r3, [r7, #4]
 800c290:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800c292:	f043 0201 	orr.w	r2, r3, #1
 800c296:	687b      	ldr	r3, [r7, #4]
 800c298:	659a      	str	r2, [r3, #88]	@ 0x58

          return HAL_ERROR;
 800c29a:	2301      	movs	r3, #1
 800c29c:	e007      	b.n	800c2ae <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 800c29e:	687b      	ldr	r3, [r7, #4]
 800c2a0:	681b      	ldr	r3, [r3, #0]
 800c2a2:	689b      	ldr	r3, [r3, #8]
 800c2a4:	f003 0301 	and.w	r3, r3, #1
 800c2a8:	2b00      	cmp	r3, #0
 800c2aa:	d1dc      	bne.n	800c266 <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 800c2ac:	2300      	movs	r3, #0
}
 800c2ae:	4618      	mov	r0, r3
 800c2b0:	3710      	adds	r7, #16
 800c2b2:	46bd      	mov	sp, r7
 800c2b4:	bd80      	pop	{r7, pc}

0800c2b6 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 800c2b6:	b580      	push	{r7, lr}
 800c2b8:	b084      	sub	sp, #16
 800c2ba:	af00      	add	r7, sp, #0
 800c2bc:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800c2be:	687b      	ldr	r3, [r7, #4]
 800c2c0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c2c2:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 800c2c4:	68fb      	ldr	r3, [r7, #12]
 800c2c6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c2c8:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800c2cc:	2b00      	cmp	r3, #0
 800c2ce:	d14b      	bne.n	800c368 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800c2d0:	68fb      	ldr	r3, [r7, #12]
 800c2d2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c2d4:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 800c2d8:	68fb      	ldr	r3, [r7, #12]
 800c2da:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 800c2dc:	68fb      	ldr	r3, [r7, #12]
 800c2de:	681b      	ldr	r3, [r3, #0]
 800c2e0:	681b      	ldr	r3, [r3, #0]
 800c2e2:	f003 0308 	and.w	r3, r3, #8
 800c2e6:	2b00      	cmp	r3, #0
 800c2e8:	d021      	beq.n	800c32e <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 800c2ea:	68fb      	ldr	r3, [r7, #12]
 800c2ec:	681b      	ldr	r3, [r3, #0]
 800c2ee:	4618      	mov	r0, r3
 800c2f0:	f7fe fe3b 	bl	800af6a <LL_ADC_REG_IsTriggerSourceSWStart>
 800c2f4:	4603      	mov	r3, r0
 800c2f6:	2b00      	cmp	r3, #0
 800c2f8:	d032      	beq.n	800c360 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 800c2fa:	68fb      	ldr	r3, [r7, #12]
 800c2fc:	681b      	ldr	r3, [r3, #0]
 800c2fe:	68db      	ldr	r3, [r3, #12]
 800c300:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800c304:	2b00      	cmp	r3, #0
 800c306:	d12b      	bne.n	800c360 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800c308:	68fb      	ldr	r3, [r7, #12]
 800c30a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c30c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800c310:	68fb      	ldr	r3, [r7, #12]
 800c312:	655a      	str	r2, [r3, #84]	@ 0x54
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 800c314:	68fb      	ldr	r3, [r7, #12]
 800c316:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c318:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800c31c:	2b00      	cmp	r3, #0
 800c31e:	d11f      	bne.n	800c360 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800c320:	68fb      	ldr	r3, [r7, #12]
 800c322:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c324:	f043 0201 	orr.w	r2, r3, #1
 800c328:	68fb      	ldr	r3, [r7, #12]
 800c32a:	655a      	str	r2, [r3, #84]	@ 0x54
 800c32c:	e018      	b.n	800c360 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 800c32e:	68fb      	ldr	r3, [r7, #12]
 800c330:	681b      	ldr	r3, [r3, #0]
 800c332:	68db      	ldr	r3, [r3, #12]
 800c334:	f003 0302 	and.w	r3, r3, #2
 800c338:	2b00      	cmp	r3, #0
 800c33a:	d111      	bne.n	800c360 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800c33c:	68fb      	ldr	r3, [r7, #12]
 800c33e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c340:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800c344:	68fb      	ldr	r3, [r7, #12]
 800c346:	655a      	str	r2, [r3, #84]	@ 0x54
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 800c348:	68fb      	ldr	r3, [r7, #12]
 800c34a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c34c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800c350:	2b00      	cmp	r3, #0
 800c352:	d105      	bne.n	800c360 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800c354:	68fb      	ldr	r3, [r7, #12]
 800c356:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c358:	f043 0201 	orr.w	r2, r3, #1
 800c35c:	68fb      	ldr	r3, [r7, #12]
 800c35e:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800c360:	68f8      	ldr	r0, [r7, #12]
 800c362:	f7f6 fb35 	bl	80029d0 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 800c366:	e00e      	b.n	800c386 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 800c368:	68fb      	ldr	r3, [r7, #12]
 800c36a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c36c:	f003 0310 	and.w	r3, r3, #16
 800c370:	2b00      	cmp	r3, #0
 800c372:	d003      	beq.n	800c37c <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 800c374:	68f8      	ldr	r0, [r7, #12]
 800c376:	f7ff fa00 	bl	800b77a <HAL_ADC_ErrorCallback>
}
 800c37a:	e004      	b.n	800c386 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 800c37c:	68fb      	ldr	r3, [r7, #12]
 800c37e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800c380:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c382:	6878      	ldr	r0, [r7, #4]
 800c384:	4798      	blx	r3
}
 800c386:	bf00      	nop
 800c388:	3710      	adds	r7, #16
 800c38a:	46bd      	mov	sp, r7
 800c38c:	bd80      	pop	{r7, pc}

0800c38e <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 800c38e:	b580      	push	{r7, lr}
 800c390:	b084      	sub	sp, #16
 800c392:	af00      	add	r7, sp, #0
 800c394:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800c396:	687b      	ldr	r3, [r7, #4]
 800c398:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c39a:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 800c39c:	68f8      	ldr	r0, [r7, #12]
 800c39e:	f7f6 fafb 	bl	8002998 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800c3a2:	bf00      	nop
 800c3a4:	3710      	adds	r7, #16
 800c3a6:	46bd      	mov	sp, r7
 800c3a8:	bd80      	pop	{r7, pc}

0800c3aa <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 800c3aa:	b580      	push	{r7, lr}
 800c3ac:	b084      	sub	sp, #16
 800c3ae:	af00      	add	r7, sp, #0
 800c3b0:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800c3b2:	687b      	ldr	r3, [r7, #4]
 800c3b4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c3b6:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 800c3b8:	68fb      	ldr	r3, [r7, #12]
 800c3ba:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c3bc:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800c3c0:	68fb      	ldr	r3, [r7, #12]
 800c3c2:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 800c3c4:	68fb      	ldr	r3, [r7, #12]
 800c3c6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800c3c8:	f043 0204 	orr.w	r2, r3, #4
 800c3cc:	68fb      	ldr	r3, [r7, #12]
 800c3ce:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 800c3d0:	68f8      	ldr	r0, [r7, #12]
 800c3d2:	f7ff f9d2 	bl	800b77a <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800c3d6:	bf00      	nop
 800c3d8:	3710      	adds	r7, #16
 800c3da:	46bd      	mov	sp, r7
 800c3dc:	bd80      	pop	{r7, pc}

0800c3de <LL_ADC_IsEnabled>:
{
 800c3de:	b480      	push	{r7}
 800c3e0:	b083      	sub	sp, #12
 800c3e2:	af00      	add	r7, sp, #0
 800c3e4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800c3e6:	687b      	ldr	r3, [r7, #4]
 800c3e8:	689b      	ldr	r3, [r3, #8]
 800c3ea:	f003 0301 	and.w	r3, r3, #1
 800c3ee:	2b01      	cmp	r3, #1
 800c3f0:	d101      	bne.n	800c3f6 <LL_ADC_IsEnabled+0x18>
 800c3f2:	2301      	movs	r3, #1
 800c3f4:	e000      	b.n	800c3f8 <LL_ADC_IsEnabled+0x1a>
 800c3f6:	2300      	movs	r3, #0
}
 800c3f8:	4618      	mov	r0, r3
 800c3fa:	370c      	adds	r7, #12
 800c3fc:	46bd      	mov	sp, r7
 800c3fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c402:	4770      	bx	lr

0800c404 <LL_ADC_REG_IsConversionOngoing>:
{
 800c404:	b480      	push	{r7}
 800c406:	b083      	sub	sp, #12
 800c408:	af00      	add	r7, sp, #0
 800c40a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800c40c:	687b      	ldr	r3, [r7, #4]
 800c40e:	689b      	ldr	r3, [r3, #8]
 800c410:	f003 0304 	and.w	r3, r3, #4
 800c414:	2b04      	cmp	r3, #4
 800c416:	d101      	bne.n	800c41c <LL_ADC_REG_IsConversionOngoing+0x18>
 800c418:	2301      	movs	r3, #1
 800c41a:	e000      	b.n	800c41e <LL_ADC_REG_IsConversionOngoing+0x1a>
 800c41c:	2300      	movs	r3, #0
}
 800c41e:	4618      	mov	r0, r3
 800c420:	370c      	adds	r7, #12
 800c422:	46bd      	mov	sp, r7
 800c424:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c428:	4770      	bx	lr
	...

0800c42c <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 800c42c:	b590      	push	{r4, r7, lr}
 800c42e:	b09f      	sub	sp, #124	@ 0x7c
 800c430:	af00      	add	r7, sp, #0
 800c432:	6078      	str	r0, [r7, #4]
 800c434:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800c436:	2300      	movs	r3, #0
 800c438:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 800c43c:	687b      	ldr	r3, [r7, #4]
 800c43e:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800c442:	2b01      	cmp	r3, #1
 800c444:	d101      	bne.n	800c44a <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 800c446:	2302      	movs	r3, #2
 800c448:	e093      	b.n	800c572 <HAL_ADCEx_MultiModeConfigChannel+0x146>
 800c44a:	687b      	ldr	r3, [r7, #4]
 800c44c:	2201      	movs	r2, #1
 800c44e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 800c452:	2300      	movs	r3, #0
 800c454:	65fb      	str	r3, [r7, #92]	@ 0x5c
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 800c456:	2300      	movs	r3, #0
 800c458:	663b      	str	r3, [r7, #96]	@ 0x60

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 800c45a:	687b      	ldr	r3, [r7, #4]
 800c45c:	681b      	ldr	r3, [r3, #0]
 800c45e:	4a47      	ldr	r2, [pc, #284]	@ (800c57c <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 800c460:	4293      	cmp	r3, r2
 800c462:	d102      	bne.n	800c46a <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 800c464:	4b46      	ldr	r3, [pc, #280]	@ (800c580 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 800c466:	60bb      	str	r3, [r7, #8]
 800c468:	e001      	b.n	800c46e <HAL_ADCEx_MultiModeConfigChannel+0x42>
 800c46a:	2300      	movs	r3, #0
 800c46c:	60bb      	str	r3, [r7, #8]

  if (tmp_hadc_slave.Instance == NULL)
 800c46e:	68bb      	ldr	r3, [r7, #8]
 800c470:	2b00      	cmp	r3, #0
 800c472:	d10b      	bne.n	800c48c <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800c474:	687b      	ldr	r3, [r7, #4]
 800c476:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c478:	f043 0220 	orr.w	r2, r3, #32
 800c47c:	687b      	ldr	r3, [r7, #4]
 800c47e:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800c480:	687b      	ldr	r3, [r7, #4]
 800c482:	2200      	movs	r2, #0
 800c484:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    return HAL_ERROR;
 800c488:	2301      	movs	r3, #1
 800c48a:	e072      	b.n	800c572 <HAL_ADCEx_MultiModeConfigChannel+0x146>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 800c48c:	68bb      	ldr	r3, [r7, #8]
 800c48e:	4618      	mov	r0, r3
 800c490:	f7ff ffb8 	bl	800c404 <LL_ADC_REG_IsConversionOngoing>
 800c494:	6738      	str	r0, [r7, #112]	@ 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800c496:	687b      	ldr	r3, [r7, #4]
 800c498:	681b      	ldr	r3, [r3, #0]
 800c49a:	4618      	mov	r0, r3
 800c49c:	f7ff ffb2 	bl	800c404 <LL_ADC_REG_IsConversionOngoing>
 800c4a0:	4603      	mov	r3, r0
 800c4a2:	2b00      	cmp	r3, #0
 800c4a4:	d154      	bne.n	800c550 <HAL_ADCEx_MultiModeConfigChannel+0x124>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 800c4a6:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800c4a8:	2b00      	cmp	r3, #0
 800c4aa:	d151      	bne.n	800c550 <HAL_ADCEx_MultiModeConfigChannel+0x124>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 800c4ac:	4b35      	ldr	r3, [pc, #212]	@ (800c584 <HAL_ADCEx_MultiModeConfigChannel+0x158>)
 800c4ae:	66fb      	str	r3, [r7, #108]	@ 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 800c4b0:	683b      	ldr	r3, [r7, #0]
 800c4b2:	681b      	ldr	r3, [r3, #0]
 800c4b4:	2b00      	cmp	r3, #0
 800c4b6:	d02c      	beq.n	800c512 <HAL_ADCEx_MultiModeConfigChannel+0xe6>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 800c4b8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800c4ba:	689b      	ldr	r3, [r3, #8]
 800c4bc:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800c4c0:	683b      	ldr	r3, [r7, #0]
 800c4c2:	6859      	ldr	r1, [r3, #4]
 800c4c4:	687b      	ldr	r3, [r7, #4]
 800c4c6:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800c4ca:	035b      	lsls	r3, r3, #13
 800c4cc:	430b      	orrs	r3, r1
 800c4ce:	431a      	orrs	r2, r3
 800c4d0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800c4d2:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800c4d4:	4829      	ldr	r0, [pc, #164]	@ (800c57c <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 800c4d6:	f7ff ff82 	bl	800c3de <LL_ADC_IsEnabled>
 800c4da:	4604      	mov	r4, r0
 800c4dc:	4828      	ldr	r0, [pc, #160]	@ (800c580 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 800c4de:	f7ff ff7e 	bl	800c3de <LL_ADC_IsEnabled>
 800c4e2:	4603      	mov	r3, r0
 800c4e4:	431c      	orrs	r4, r3
 800c4e6:	4828      	ldr	r0, [pc, #160]	@ (800c588 <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 800c4e8:	f7ff ff79 	bl	800c3de <LL_ADC_IsEnabled>
 800c4ec:	4603      	mov	r3, r0
 800c4ee:	4323      	orrs	r3, r4
 800c4f0:	2b00      	cmp	r3, #0
 800c4f2:	d137      	bne.n	800c564 <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 800c4f4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800c4f6:	689b      	ldr	r3, [r3, #8]
 800c4f8:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 800c4fc:	f023 030f 	bic.w	r3, r3, #15
 800c500:	683a      	ldr	r2, [r7, #0]
 800c502:	6811      	ldr	r1, [r2, #0]
 800c504:	683a      	ldr	r2, [r7, #0]
 800c506:	6892      	ldr	r2, [r2, #8]
 800c508:	430a      	orrs	r2, r1
 800c50a:	431a      	orrs	r2, r3
 800c50c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800c50e:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 800c510:	e028      	b.n	800c564 <HAL_ADCEx_MultiModeConfigChannel+0x138>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 800c512:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800c514:	689b      	ldr	r3, [r3, #8]
 800c516:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800c51a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800c51c:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800c51e:	4817      	ldr	r0, [pc, #92]	@ (800c57c <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 800c520:	f7ff ff5d 	bl	800c3de <LL_ADC_IsEnabled>
 800c524:	4604      	mov	r4, r0
 800c526:	4816      	ldr	r0, [pc, #88]	@ (800c580 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 800c528:	f7ff ff59 	bl	800c3de <LL_ADC_IsEnabled>
 800c52c:	4603      	mov	r3, r0
 800c52e:	431c      	orrs	r4, r3
 800c530:	4815      	ldr	r0, [pc, #84]	@ (800c588 <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 800c532:	f7ff ff54 	bl	800c3de <LL_ADC_IsEnabled>
 800c536:	4603      	mov	r3, r0
 800c538:	4323      	orrs	r3, r4
 800c53a:	2b00      	cmp	r3, #0
 800c53c:	d112      	bne.n	800c564 <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 800c53e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800c540:	689b      	ldr	r3, [r3, #8]
 800c542:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 800c546:	f023 030f 	bic.w	r3, r3, #15
 800c54a:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800c54c:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 800c54e:	e009      	b.n	800c564 <HAL_ADCEx_MultiModeConfigChannel+0x138>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800c550:	687b      	ldr	r3, [r7, #4]
 800c552:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c554:	f043 0220 	orr.w	r2, r3, #32
 800c558:	687b      	ldr	r3, [r7, #4]
 800c55a:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 800c55c:	2301      	movs	r3, #1
 800c55e:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
 800c562:	e000      	b.n	800c566 <HAL_ADCEx_MultiModeConfigChannel+0x13a>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 800c564:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800c566:	687b      	ldr	r3, [r7, #4]
 800c568:	2200      	movs	r2, #0
 800c56a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 800c56e:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
}
 800c572:	4618      	mov	r0, r3
 800c574:	377c      	adds	r7, #124	@ 0x7c
 800c576:	46bd      	mov	sp, r7
 800c578:	bd90      	pop	{r4, r7, pc}
 800c57a:	bf00      	nop
 800c57c:	50040000 	.word	0x50040000
 800c580:	50040100 	.word	0x50040100
 800c584:	50040300 	.word	0x50040300
 800c588:	50040200 	.word	0x50040200

0800c58c <__NVIC_SetPriorityGrouping>:
{
 800c58c:	b480      	push	{r7}
 800c58e:	b085      	sub	sp, #20
 800c590:	af00      	add	r7, sp, #0
 800c592:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800c594:	687b      	ldr	r3, [r7, #4]
 800c596:	f003 0307 	and.w	r3, r3, #7
 800c59a:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800c59c:	4b0c      	ldr	r3, [pc, #48]	@ (800c5d0 <__NVIC_SetPriorityGrouping+0x44>)
 800c59e:	68db      	ldr	r3, [r3, #12]
 800c5a0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800c5a2:	68ba      	ldr	r2, [r7, #8]
 800c5a4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800c5a8:	4013      	ands	r3, r2
 800c5aa:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800c5ac:	68fb      	ldr	r3, [r7, #12]
 800c5ae:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800c5b0:	68bb      	ldr	r3, [r7, #8]
 800c5b2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800c5b4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800c5b8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800c5bc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800c5be:	4a04      	ldr	r2, [pc, #16]	@ (800c5d0 <__NVIC_SetPriorityGrouping+0x44>)
 800c5c0:	68bb      	ldr	r3, [r7, #8]
 800c5c2:	60d3      	str	r3, [r2, #12]
}
 800c5c4:	bf00      	nop
 800c5c6:	3714      	adds	r7, #20
 800c5c8:	46bd      	mov	sp, r7
 800c5ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5ce:	4770      	bx	lr
 800c5d0:	e000ed00 	.word	0xe000ed00

0800c5d4 <__NVIC_GetPriorityGrouping>:
{
 800c5d4:	b480      	push	{r7}
 800c5d6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800c5d8:	4b04      	ldr	r3, [pc, #16]	@ (800c5ec <__NVIC_GetPriorityGrouping+0x18>)
 800c5da:	68db      	ldr	r3, [r3, #12]
 800c5dc:	0a1b      	lsrs	r3, r3, #8
 800c5de:	f003 0307 	and.w	r3, r3, #7
}
 800c5e2:	4618      	mov	r0, r3
 800c5e4:	46bd      	mov	sp, r7
 800c5e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5ea:	4770      	bx	lr
 800c5ec:	e000ed00 	.word	0xe000ed00

0800c5f0 <__NVIC_EnableIRQ>:
{
 800c5f0:	b480      	push	{r7}
 800c5f2:	b083      	sub	sp, #12
 800c5f4:	af00      	add	r7, sp, #0
 800c5f6:	4603      	mov	r3, r0
 800c5f8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800c5fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800c5fe:	2b00      	cmp	r3, #0
 800c600:	db0b      	blt.n	800c61a <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800c602:	79fb      	ldrb	r3, [r7, #7]
 800c604:	f003 021f 	and.w	r2, r3, #31
 800c608:	4907      	ldr	r1, [pc, #28]	@ (800c628 <__NVIC_EnableIRQ+0x38>)
 800c60a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800c60e:	095b      	lsrs	r3, r3, #5
 800c610:	2001      	movs	r0, #1
 800c612:	fa00 f202 	lsl.w	r2, r0, r2
 800c616:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800c61a:	bf00      	nop
 800c61c:	370c      	adds	r7, #12
 800c61e:	46bd      	mov	sp, r7
 800c620:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c624:	4770      	bx	lr
 800c626:	bf00      	nop
 800c628:	e000e100 	.word	0xe000e100

0800c62c <__NVIC_SetPriority>:
{
 800c62c:	b480      	push	{r7}
 800c62e:	b083      	sub	sp, #12
 800c630:	af00      	add	r7, sp, #0
 800c632:	4603      	mov	r3, r0
 800c634:	6039      	str	r1, [r7, #0]
 800c636:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800c638:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800c63c:	2b00      	cmp	r3, #0
 800c63e:	db0a      	blt.n	800c656 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800c640:	683b      	ldr	r3, [r7, #0]
 800c642:	b2da      	uxtb	r2, r3
 800c644:	490c      	ldr	r1, [pc, #48]	@ (800c678 <__NVIC_SetPriority+0x4c>)
 800c646:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800c64a:	0112      	lsls	r2, r2, #4
 800c64c:	b2d2      	uxtb	r2, r2
 800c64e:	440b      	add	r3, r1
 800c650:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 800c654:	e00a      	b.n	800c66c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800c656:	683b      	ldr	r3, [r7, #0]
 800c658:	b2da      	uxtb	r2, r3
 800c65a:	4908      	ldr	r1, [pc, #32]	@ (800c67c <__NVIC_SetPriority+0x50>)
 800c65c:	79fb      	ldrb	r3, [r7, #7]
 800c65e:	f003 030f 	and.w	r3, r3, #15
 800c662:	3b04      	subs	r3, #4
 800c664:	0112      	lsls	r2, r2, #4
 800c666:	b2d2      	uxtb	r2, r2
 800c668:	440b      	add	r3, r1
 800c66a:	761a      	strb	r2, [r3, #24]
}
 800c66c:	bf00      	nop
 800c66e:	370c      	adds	r7, #12
 800c670:	46bd      	mov	sp, r7
 800c672:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c676:	4770      	bx	lr
 800c678:	e000e100 	.word	0xe000e100
 800c67c:	e000ed00 	.word	0xe000ed00

0800c680 <NVIC_EncodePriority>:
{
 800c680:	b480      	push	{r7}
 800c682:	b089      	sub	sp, #36	@ 0x24
 800c684:	af00      	add	r7, sp, #0
 800c686:	60f8      	str	r0, [r7, #12]
 800c688:	60b9      	str	r1, [r7, #8]
 800c68a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800c68c:	68fb      	ldr	r3, [r7, #12]
 800c68e:	f003 0307 	and.w	r3, r3, #7
 800c692:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800c694:	69fb      	ldr	r3, [r7, #28]
 800c696:	f1c3 0307 	rsb	r3, r3, #7
 800c69a:	2b04      	cmp	r3, #4
 800c69c:	bf28      	it	cs
 800c69e:	2304      	movcs	r3, #4
 800c6a0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800c6a2:	69fb      	ldr	r3, [r7, #28]
 800c6a4:	3304      	adds	r3, #4
 800c6a6:	2b06      	cmp	r3, #6
 800c6a8:	d902      	bls.n	800c6b0 <NVIC_EncodePriority+0x30>
 800c6aa:	69fb      	ldr	r3, [r7, #28]
 800c6ac:	3b03      	subs	r3, #3
 800c6ae:	e000      	b.n	800c6b2 <NVIC_EncodePriority+0x32>
 800c6b0:	2300      	movs	r3, #0
 800c6b2:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800c6b4:	f04f 32ff 	mov.w	r2, #4294967295
 800c6b8:	69bb      	ldr	r3, [r7, #24]
 800c6ba:	fa02 f303 	lsl.w	r3, r2, r3
 800c6be:	43da      	mvns	r2, r3
 800c6c0:	68bb      	ldr	r3, [r7, #8]
 800c6c2:	401a      	ands	r2, r3
 800c6c4:	697b      	ldr	r3, [r7, #20]
 800c6c6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800c6c8:	f04f 31ff 	mov.w	r1, #4294967295
 800c6cc:	697b      	ldr	r3, [r7, #20]
 800c6ce:	fa01 f303 	lsl.w	r3, r1, r3
 800c6d2:	43d9      	mvns	r1, r3
 800c6d4:	687b      	ldr	r3, [r7, #4]
 800c6d6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800c6d8:	4313      	orrs	r3, r2
}
 800c6da:	4618      	mov	r0, r3
 800c6dc:	3724      	adds	r7, #36	@ 0x24
 800c6de:	46bd      	mov	sp, r7
 800c6e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6e4:	4770      	bx	lr
	...

0800c6e8 <__NVIC_SystemReset>:
{
 800c6e8:	b480      	push	{r7}
 800c6ea:	af00      	add	r7, sp, #0
  __ASM volatile ("dsb 0xF":::"memory");
 800c6ec:	f3bf 8f4f 	dsb	sy
}
 800c6f0:	bf00      	nop
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 800c6f2:	4b06      	ldr	r3, [pc, #24]	@ (800c70c <__NVIC_SystemReset+0x24>)
 800c6f4:	68db      	ldr	r3, [r3, #12]
 800c6f6:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 800c6fa:	4904      	ldr	r1, [pc, #16]	@ (800c70c <__NVIC_SystemReset+0x24>)
 800c6fc:	4b04      	ldr	r3, [pc, #16]	@ (800c710 <__NVIC_SystemReset+0x28>)
 800c6fe:	4313      	orrs	r3, r2
 800c700:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 800c702:	f3bf 8f4f 	dsb	sy
}
 800c706:	bf00      	nop
    __NOP();
 800c708:	bf00      	nop
 800c70a:	e7fd      	b.n	800c708 <__NVIC_SystemReset+0x20>
 800c70c:	e000ed00 	.word	0xe000ed00
 800c710:	05fa0004 	.word	0x05fa0004

0800c714 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800c714:	b580      	push	{r7, lr}
 800c716:	b082      	sub	sp, #8
 800c718:	af00      	add	r7, sp, #0
 800c71a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800c71c:	687b      	ldr	r3, [r7, #4]
 800c71e:	3b01      	subs	r3, #1
 800c720:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800c724:	d301      	bcc.n	800c72a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800c726:	2301      	movs	r3, #1
 800c728:	e00f      	b.n	800c74a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800c72a:	4a0a      	ldr	r2, [pc, #40]	@ (800c754 <SysTick_Config+0x40>)
 800c72c:	687b      	ldr	r3, [r7, #4]
 800c72e:	3b01      	subs	r3, #1
 800c730:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800c732:	210f      	movs	r1, #15
 800c734:	f04f 30ff 	mov.w	r0, #4294967295
 800c738:	f7ff ff78 	bl	800c62c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800c73c:	4b05      	ldr	r3, [pc, #20]	@ (800c754 <SysTick_Config+0x40>)
 800c73e:	2200      	movs	r2, #0
 800c740:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800c742:	4b04      	ldr	r3, [pc, #16]	@ (800c754 <SysTick_Config+0x40>)
 800c744:	2207      	movs	r2, #7
 800c746:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800c748:	2300      	movs	r3, #0
}
 800c74a:	4618      	mov	r0, r3
 800c74c:	3708      	adds	r7, #8
 800c74e:	46bd      	mov	sp, r7
 800c750:	bd80      	pop	{r7, pc}
 800c752:	bf00      	nop
 800c754:	e000e010 	.word	0xe000e010

0800c758 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800c758:	b580      	push	{r7, lr}
 800c75a:	b082      	sub	sp, #8
 800c75c:	af00      	add	r7, sp, #0
 800c75e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800c760:	6878      	ldr	r0, [r7, #4]
 800c762:	f7ff ff13 	bl	800c58c <__NVIC_SetPriorityGrouping>
}
 800c766:	bf00      	nop
 800c768:	3708      	adds	r7, #8
 800c76a:	46bd      	mov	sp, r7
 800c76c:	bd80      	pop	{r7, pc}

0800c76e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800c76e:	b580      	push	{r7, lr}
 800c770:	b086      	sub	sp, #24
 800c772:	af00      	add	r7, sp, #0
 800c774:	4603      	mov	r3, r0
 800c776:	60b9      	str	r1, [r7, #8]
 800c778:	607a      	str	r2, [r7, #4]
 800c77a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800c77c:	2300      	movs	r3, #0
 800c77e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800c780:	f7ff ff28 	bl	800c5d4 <__NVIC_GetPriorityGrouping>
 800c784:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800c786:	687a      	ldr	r2, [r7, #4]
 800c788:	68b9      	ldr	r1, [r7, #8]
 800c78a:	6978      	ldr	r0, [r7, #20]
 800c78c:	f7ff ff78 	bl	800c680 <NVIC_EncodePriority>
 800c790:	4602      	mov	r2, r0
 800c792:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c796:	4611      	mov	r1, r2
 800c798:	4618      	mov	r0, r3
 800c79a:	f7ff ff47 	bl	800c62c <__NVIC_SetPriority>
}
 800c79e:	bf00      	nop
 800c7a0:	3718      	adds	r7, #24
 800c7a2:	46bd      	mov	sp, r7
 800c7a4:	bd80      	pop	{r7, pc}

0800c7a6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800c7a6:	b580      	push	{r7, lr}
 800c7a8:	b082      	sub	sp, #8
 800c7aa:	af00      	add	r7, sp, #0
 800c7ac:	4603      	mov	r3, r0
 800c7ae:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800c7b0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800c7b4:	4618      	mov	r0, r3
 800c7b6:	f7ff ff1b 	bl	800c5f0 <__NVIC_EnableIRQ>
}
 800c7ba:	bf00      	nop
 800c7bc:	3708      	adds	r7, #8
 800c7be:	46bd      	mov	sp, r7
 800c7c0:	bd80      	pop	{r7, pc}

0800c7c2 <HAL_NVIC_SystemReset>:
/**
  * @brief  Initiate a system reset request to reset the MCU.
  * @retval None
  */
void HAL_NVIC_SystemReset(void)
{
 800c7c2:	b580      	push	{r7, lr}
 800c7c4:	af00      	add	r7, sp, #0
  /* System Reset */
  NVIC_SystemReset();
 800c7c6:	f7ff ff8f 	bl	800c6e8 <__NVIC_SystemReset>

0800c7ca <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800c7ca:	b580      	push	{r7, lr}
 800c7cc:	b082      	sub	sp, #8
 800c7ce:	af00      	add	r7, sp, #0
 800c7d0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800c7d2:	6878      	ldr	r0, [r7, #4]
 800c7d4:	f7ff ff9e 	bl	800c714 <SysTick_Config>
 800c7d8:	4603      	mov	r3, r0
}
 800c7da:	4618      	mov	r0, r3
 800c7dc:	3708      	adds	r7, #8
 800c7de:	46bd      	mov	sp, r7
 800c7e0:	bd80      	pop	{r7, pc}
	...

0800c7e4 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 800c7e4:	b580      	push	{r7, lr}
 800c7e6:	b082      	sub	sp, #8
 800c7e8:	af00      	add	r7, sp, #0
 800c7ea:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 800c7ec:	687b      	ldr	r3, [r7, #4]
 800c7ee:	2b00      	cmp	r3, #0
 800c7f0:	d101      	bne.n	800c7f6 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 800c7f2:	2301      	movs	r3, #1
 800c7f4:	e054      	b.n	800c8a0 <HAL_CRC_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 800c7f6:	687b      	ldr	r3, [r7, #4]
 800c7f8:	7f5b      	ldrb	r3, [r3, #29]
 800c7fa:	b2db      	uxtb	r3, r3
 800c7fc:	2b00      	cmp	r3, #0
 800c7fe:	d105      	bne.n	800c80c <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 800c800:	687b      	ldr	r3, [r7, #4]
 800c802:	2200      	movs	r2, #0
 800c804:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 800c806:	6878      	ldr	r0, [r7, #4]
 800c808:	f7fa fdb2 	bl	8007370 <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 800c80c:	687b      	ldr	r3, [r7, #4]
 800c80e:	2202      	movs	r2, #2
 800c810:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 800c812:	687b      	ldr	r3, [r7, #4]
 800c814:	791b      	ldrb	r3, [r3, #4]
 800c816:	2b00      	cmp	r3, #0
 800c818:	d10c      	bne.n	800c834 <HAL_CRC_Init+0x50>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 800c81a:	687b      	ldr	r3, [r7, #4]
 800c81c:	681b      	ldr	r3, [r3, #0]
 800c81e:	4a22      	ldr	r2, [pc, #136]	@ (800c8a8 <HAL_CRC_Init+0xc4>)
 800c820:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 800c822:	687b      	ldr	r3, [r7, #4]
 800c824:	681b      	ldr	r3, [r3, #0]
 800c826:	689a      	ldr	r2, [r3, #8]
 800c828:	687b      	ldr	r3, [r7, #4]
 800c82a:	681b      	ldr	r3, [r3, #0]
 800c82c:	f022 0218 	bic.w	r2, r2, #24
 800c830:	609a      	str	r2, [r3, #8]
 800c832:	e00c      	b.n	800c84e <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 800c834:	687b      	ldr	r3, [r7, #4]
 800c836:	6899      	ldr	r1, [r3, #8]
 800c838:	687b      	ldr	r3, [r7, #4]
 800c83a:	68db      	ldr	r3, [r3, #12]
 800c83c:	461a      	mov	r2, r3
 800c83e:	6878      	ldr	r0, [r7, #4]
 800c840:	f000 f942 	bl	800cac8 <HAL_CRCEx_Polynomial_Set>
 800c844:	4603      	mov	r3, r0
 800c846:	2b00      	cmp	r3, #0
 800c848:	d001      	beq.n	800c84e <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 800c84a:	2301      	movs	r3, #1
 800c84c:	e028      	b.n	800c8a0 <HAL_CRC_Init+0xbc>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 800c84e:	687b      	ldr	r3, [r7, #4]
 800c850:	795b      	ldrb	r3, [r3, #5]
 800c852:	2b00      	cmp	r3, #0
 800c854:	d105      	bne.n	800c862 <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 800c856:	687b      	ldr	r3, [r7, #4]
 800c858:	681b      	ldr	r3, [r3, #0]
 800c85a:	f04f 32ff 	mov.w	r2, #4294967295
 800c85e:	611a      	str	r2, [r3, #16]
 800c860:	e004      	b.n	800c86c <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 800c862:	687b      	ldr	r3, [r7, #4]
 800c864:	681b      	ldr	r3, [r3, #0]
 800c866:	687a      	ldr	r2, [r7, #4]
 800c868:	6912      	ldr	r2, [r2, #16]
 800c86a:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 800c86c:	687b      	ldr	r3, [r7, #4]
 800c86e:	681b      	ldr	r3, [r3, #0]
 800c870:	689b      	ldr	r3, [r3, #8]
 800c872:	f023 0160 	bic.w	r1, r3, #96	@ 0x60
 800c876:	687b      	ldr	r3, [r7, #4]
 800c878:	695a      	ldr	r2, [r3, #20]
 800c87a:	687b      	ldr	r3, [r7, #4]
 800c87c:	681b      	ldr	r3, [r3, #0]
 800c87e:	430a      	orrs	r2, r1
 800c880:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 800c882:	687b      	ldr	r3, [r7, #4]
 800c884:	681b      	ldr	r3, [r3, #0]
 800c886:	689b      	ldr	r3, [r3, #8]
 800c888:	f023 0180 	bic.w	r1, r3, #128	@ 0x80
 800c88c:	687b      	ldr	r3, [r7, #4]
 800c88e:	699a      	ldr	r2, [r3, #24]
 800c890:	687b      	ldr	r3, [r7, #4]
 800c892:	681b      	ldr	r3, [r3, #0]
 800c894:	430a      	orrs	r2, r1
 800c896:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 800c898:	687b      	ldr	r3, [r7, #4]
 800c89a:	2201      	movs	r2, #1
 800c89c:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 800c89e:	2300      	movs	r3, #0
}
 800c8a0:	4618      	mov	r0, r3
 800c8a2:	3708      	adds	r7, #8
 800c8a4:	46bd      	mov	sp, r7
 800c8a6:	bd80      	pop	{r7, pc}
 800c8a8:	04c11db7 	.word	0x04c11db7

0800c8ac <HAL_CRC_Accumulate>:
  *        and the API will internally adjust its input data processing based on the
  *        handle field hcrc->InputDataFormat.
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
uint32_t HAL_CRC_Accumulate(CRC_HandleTypeDef *hcrc, uint32_t pBuffer[], uint32_t BufferLength)
{
 800c8ac:	b580      	push	{r7, lr}
 800c8ae:	b086      	sub	sp, #24
 800c8b0:	af00      	add	r7, sp, #0
 800c8b2:	60f8      	str	r0, [r7, #12]
 800c8b4:	60b9      	str	r1, [r7, #8]
 800c8b6:	607a      	str	r2, [r7, #4]
  uint32_t index;      /* CRC input data buffer index */
  uint32_t temp = 0U;  /* CRC output (read from hcrc->Instance->DR register) */
 800c8b8:	2300      	movs	r3, #0
 800c8ba:	613b      	str	r3, [r7, #16]

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_BUSY;
 800c8bc:	68fb      	ldr	r3, [r7, #12]
 800c8be:	2202      	movs	r2, #2
 800c8c0:	775a      	strb	r2, [r3, #29]

  switch (hcrc->InputDataFormat)
 800c8c2:	68fb      	ldr	r3, [r7, #12]
 800c8c4:	6a1b      	ldr	r3, [r3, #32]
 800c8c6:	2b03      	cmp	r3, #3
 800c8c8:	d006      	beq.n	800c8d8 <HAL_CRC_Accumulate+0x2c>
 800c8ca:	2b03      	cmp	r3, #3
 800c8cc:	d829      	bhi.n	800c922 <HAL_CRC_Accumulate+0x76>
 800c8ce:	2b01      	cmp	r3, #1
 800c8d0:	d019      	beq.n	800c906 <HAL_CRC_Accumulate+0x5a>
 800c8d2:	2b02      	cmp	r3, #2
 800c8d4:	d01e      	beq.n	800c914 <HAL_CRC_Accumulate+0x68>

    case CRC_INPUTDATA_FORMAT_HALFWORDS:
      temp = CRC_Handle_16(hcrc, (uint16_t *)(void *)pBuffer, BufferLength);    /* Derogation MisraC2012 R.11.5 */
      break;
    default:
      break;
 800c8d6:	e024      	b.n	800c922 <HAL_CRC_Accumulate+0x76>
      for (index = 0U; index < BufferLength; index++)
 800c8d8:	2300      	movs	r3, #0
 800c8da:	617b      	str	r3, [r7, #20]
 800c8dc:	e00a      	b.n	800c8f4 <HAL_CRC_Accumulate+0x48>
        hcrc->Instance->DR = pBuffer[index];
 800c8de:	697b      	ldr	r3, [r7, #20]
 800c8e0:	009b      	lsls	r3, r3, #2
 800c8e2:	68ba      	ldr	r2, [r7, #8]
 800c8e4:	441a      	add	r2, r3
 800c8e6:	68fb      	ldr	r3, [r7, #12]
 800c8e8:	681b      	ldr	r3, [r3, #0]
 800c8ea:	6812      	ldr	r2, [r2, #0]
 800c8ec:	601a      	str	r2, [r3, #0]
      for (index = 0U; index < BufferLength; index++)
 800c8ee:	697b      	ldr	r3, [r7, #20]
 800c8f0:	3301      	adds	r3, #1
 800c8f2:	617b      	str	r3, [r7, #20]
 800c8f4:	697a      	ldr	r2, [r7, #20]
 800c8f6:	687b      	ldr	r3, [r7, #4]
 800c8f8:	429a      	cmp	r2, r3
 800c8fa:	d3f0      	bcc.n	800c8de <HAL_CRC_Accumulate+0x32>
      temp = hcrc->Instance->DR;
 800c8fc:	68fb      	ldr	r3, [r7, #12]
 800c8fe:	681b      	ldr	r3, [r3, #0]
 800c900:	681b      	ldr	r3, [r3, #0]
 800c902:	613b      	str	r3, [r7, #16]
      break;
 800c904:	e00e      	b.n	800c924 <HAL_CRC_Accumulate+0x78>
      temp = CRC_Handle_8(hcrc, (uint8_t *)pBuffer, BufferLength);
 800c906:	687a      	ldr	r2, [r7, #4]
 800c908:	68b9      	ldr	r1, [r7, #8]
 800c90a:	68f8      	ldr	r0, [r7, #12]
 800c90c:	f000 f812 	bl	800c934 <CRC_Handle_8>
 800c910:	6138      	str	r0, [r7, #16]
      break;
 800c912:	e007      	b.n	800c924 <HAL_CRC_Accumulate+0x78>
      temp = CRC_Handle_16(hcrc, (uint16_t *)(void *)pBuffer, BufferLength);    /* Derogation MisraC2012 R.11.5 */
 800c914:	687a      	ldr	r2, [r7, #4]
 800c916:	68b9      	ldr	r1, [r7, #8]
 800c918:	68f8      	ldr	r0, [r7, #12]
 800c91a:	f000 f89b 	bl	800ca54 <CRC_Handle_16>
 800c91e:	6138      	str	r0, [r7, #16]
      break;
 800c920:	e000      	b.n	800c924 <HAL_CRC_Accumulate+0x78>
      break;
 800c922:	bf00      	nop
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 800c924:	68fb      	ldr	r3, [r7, #12]
 800c926:	2201      	movs	r2, #1
 800c928:	775a      	strb	r2, [r3, #29]

  /* Return the CRC computed value */
  return temp;
 800c92a:	693b      	ldr	r3, [r7, #16]
}
 800c92c:	4618      	mov	r0, r3
 800c92e:	3718      	adds	r7, #24
 800c930:	46bd      	mov	sp, r7
 800c932:	bd80      	pop	{r7, pc}

0800c934 <CRC_Handle_8>:
  * @param  pBuffer pointer to the input data buffer
  * @param  BufferLength input data buffer length
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
static uint32_t CRC_Handle_8(CRC_HandleTypeDef *hcrc, uint8_t pBuffer[], uint32_t BufferLength)
{
 800c934:	b480      	push	{r7}
 800c936:	b089      	sub	sp, #36	@ 0x24
 800c938:	af00      	add	r7, sp, #0
 800c93a:	60f8      	str	r0, [r7, #12]
 800c93c:	60b9      	str	r1, [r7, #8]
 800c93e:	607a      	str	r2, [r7, #4]
  __IO uint16_t *pReg;

  /* Processing time optimization: 4 bytes are entered in a row with a single word write,
   * last bytes must be carefully fed to the CRC calculator to ensure a correct type
   * handling by the peripheral */
  for (i = 0U; i < (BufferLength / 4U); i++)
 800c940:	2300      	movs	r3, #0
 800c942:	61fb      	str	r3, [r7, #28]
 800c944:	e023      	b.n	800c98e <CRC_Handle_8+0x5a>
  {
    hcrc->Instance->DR = ((uint32_t)pBuffer[4U * i] << 24U) | \
 800c946:	69fb      	ldr	r3, [r7, #28]
 800c948:	009b      	lsls	r3, r3, #2
 800c94a:	68ba      	ldr	r2, [r7, #8]
 800c94c:	4413      	add	r3, r2
 800c94e:	781b      	ldrb	r3, [r3, #0]
 800c950:	061a      	lsls	r2, r3, #24
                         ((uint32_t)pBuffer[(4U * i) + 1U] << 16U) | \
 800c952:	69fb      	ldr	r3, [r7, #28]
 800c954:	009b      	lsls	r3, r3, #2
 800c956:	3301      	adds	r3, #1
 800c958:	68b9      	ldr	r1, [r7, #8]
 800c95a:	440b      	add	r3, r1
 800c95c:	781b      	ldrb	r3, [r3, #0]
 800c95e:	041b      	lsls	r3, r3, #16
    hcrc->Instance->DR = ((uint32_t)pBuffer[4U * i] << 24U) | \
 800c960:	431a      	orrs	r2, r3
                         ((uint32_t)pBuffer[(4U * i) + 2U] << 8U)  | \
 800c962:	69fb      	ldr	r3, [r7, #28]
 800c964:	009b      	lsls	r3, r3, #2
 800c966:	3302      	adds	r3, #2
 800c968:	68b9      	ldr	r1, [r7, #8]
 800c96a:	440b      	add	r3, r1
 800c96c:	781b      	ldrb	r3, [r3, #0]
 800c96e:	021b      	lsls	r3, r3, #8
                         ((uint32_t)pBuffer[(4U * i) + 1U] << 16U) | \
 800c970:	431a      	orrs	r2, r3
                         (uint32_t)pBuffer[(4U * i) + 3U];
 800c972:	69fb      	ldr	r3, [r7, #28]
 800c974:	009b      	lsls	r3, r3, #2
 800c976:	3303      	adds	r3, #3
 800c978:	68b9      	ldr	r1, [r7, #8]
 800c97a:	440b      	add	r3, r1
 800c97c:	781b      	ldrb	r3, [r3, #0]
 800c97e:	4619      	mov	r1, r3
    hcrc->Instance->DR = ((uint32_t)pBuffer[4U * i] << 24U) | \
 800c980:	68fb      	ldr	r3, [r7, #12]
 800c982:	681b      	ldr	r3, [r3, #0]
                         ((uint32_t)pBuffer[(4U * i) + 2U] << 8U)  | \
 800c984:	430a      	orrs	r2, r1
    hcrc->Instance->DR = ((uint32_t)pBuffer[4U * i] << 24U) | \
 800c986:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < (BufferLength / 4U); i++)
 800c988:	69fb      	ldr	r3, [r7, #28]
 800c98a:	3301      	adds	r3, #1
 800c98c:	61fb      	str	r3, [r7, #28]
 800c98e:	687b      	ldr	r3, [r7, #4]
 800c990:	089b      	lsrs	r3, r3, #2
 800c992:	69fa      	ldr	r2, [r7, #28]
 800c994:	429a      	cmp	r2, r3
 800c996:	d3d6      	bcc.n	800c946 <CRC_Handle_8+0x12>
  }
  /* last bytes specific handling */
  if ((BufferLength % 4U) != 0U)
 800c998:	687b      	ldr	r3, [r7, #4]
 800c99a:	f003 0303 	and.w	r3, r3, #3
 800c99e:	2b00      	cmp	r3, #0
 800c9a0:	d04f      	beq.n	800ca42 <CRC_Handle_8+0x10e>
  {
    if ((BufferLength % 4U) == 1U)
 800c9a2:	687b      	ldr	r3, [r7, #4]
 800c9a4:	f003 0303 	and.w	r3, r3, #3
 800c9a8:	2b01      	cmp	r3, #1
 800c9aa:	d107      	bne.n	800c9bc <CRC_Handle_8+0x88>
    {
      *(__IO uint8_t *)(__IO void *)(&hcrc->Instance->DR) = pBuffer[4U * i];         /* Derogation MisraC2012 R.11.5 */
 800c9ac:	69fb      	ldr	r3, [r7, #28]
 800c9ae:	009b      	lsls	r3, r3, #2
 800c9b0:	68ba      	ldr	r2, [r7, #8]
 800c9b2:	4413      	add	r3, r2
 800c9b4:	68fa      	ldr	r2, [r7, #12]
 800c9b6:	6812      	ldr	r2, [r2, #0]
 800c9b8:	781b      	ldrb	r3, [r3, #0]
 800c9ba:	7013      	strb	r3, [r2, #0]
    }
    if ((BufferLength % 4U) == 2U)
 800c9bc:	687b      	ldr	r3, [r7, #4]
 800c9be:	f003 0303 	and.w	r3, r3, #3
 800c9c2:	2b02      	cmp	r3, #2
 800c9c4:	d117      	bne.n	800c9f6 <CRC_Handle_8+0xc2>
    {
      data = ((uint16_t)(pBuffer[4U * i]) << 8U) | (uint16_t)pBuffer[(4U * i) + 1U];
 800c9c6:	69fb      	ldr	r3, [r7, #28]
 800c9c8:	009b      	lsls	r3, r3, #2
 800c9ca:	68ba      	ldr	r2, [r7, #8]
 800c9cc:	4413      	add	r3, r2
 800c9ce:	781b      	ldrb	r3, [r3, #0]
 800c9d0:	b21b      	sxth	r3, r3
 800c9d2:	021b      	lsls	r3, r3, #8
 800c9d4:	b21a      	sxth	r2, r3
 800c9d6:	69fb      	ldr	r3, [r7, #28]
 800c9d8:	009b      	lsls	r3, r3, #2
 800c9da:	3301      	adds	r3, #1
 800c9dc:	68b9      	ldr	r1, [r7, #8]
 800c9de:	440b      	add	r3, r1
 800c9e0:	781b      	ldrb	r3, [r3, #0]
 800c9e2:	b21b      	sxth	r3, r3
 800c9e4:	4313      	orrs	r3, r2
 800c9e6:	b21b      	sxth	r3, r3
 800c9e8:	837b      	strh	r3, [r7, #26]
      pReg = (__IO uint16_t *)(__IO void *)(&hcrc->Instance->DR);                    /* Derogation MisraC2012 R.11.5 */
 800c9ea:	68fb      	ldr	r3, [r7, #12]
 800c9ec:	681b      	ldr	r3, [r3, #0]
 800c9ee:	617b      	str	r3, [r7, #20]
      *pReg = data;
 800c9f0:	697b      	ldr	r3, [r7, #20]
 800c9f2:	8b7a      	ldrh	r2, [r7, #26]
 800c9f4:	801a      	strh	r2, [r3, #0]
    }
    if ((BufferLength % 4U) == 3U)
 800c9f6:	687b      	ldr	r3, [r7, #4]
 800c9f8:	f003 0303 	and.w	r3, r3, #3
 800c9fc:	2b03      	cmp	r3, #3
 800c9fe:	d120      	bne.n	800ca42 <CRC_Handle_8+0x10e>
    {
      data = ((uint16_t)(pBuffer[4U * i]) << 8U) | (uint16_t)pBuffer[(4U * i) + 1U];
 800ca00:	69fb      	ldr	r3, [r7, #28]
 800ca02:	009b      	lsls	r3, r3, #2
 800ca04:	68ba      	ldr	r2, [r7, #8]
 800ca06:	4413      	add	r3, r2
 800ca08:	781b      	ldrb	r3, [r3, #0]
 800ca0a:	b21b      	sxth	r3, r3
 800ca0c:	021b      	lsls	r3, r3, #8
 800ca0e:	b21a      	sxth	r2, r3
 800ca10:	69fb      	ldr	r3, [r7, #28]
 800ca12:	009b      	lsls	r3, r3, #2
 800ca14:	3301      	adds	r3, #1
 800ca16:	68b9      	ldr	r1, [r7, #8]
 800ca18:	440b      	add	r3, r1
 800ca1a:	781b      	ldrb	r3, [r3, #0]
 800ca1c:	b21b      	sxth	r3, r3
 800ca1e:	4313      	orrs	r3, r2
 800ca20:	b21b      	sxth	r3, r3
 800ca22:	837b      	strh	r3, [r7, #26]
      pReg = (__IO uint16_t *)(__IO void *)(&hcrc->Instance->DR);                    /* Derogation MisraC2012 R.11.5 */
 800ca24:	68fb      	ldr	r3, [r7, #12]
 800ca26:	681b      	ldr	r3, [r3, #0]
 800ca28:	617b      	str	r3, [r7, #20]
      *pReg = data;
 800ca2a:	697b      	ldr	r3, [r7, #20]
 800ca2c:	8b7a      	ldrh	r2, [r7, #26]
 800ca2e:	801a      	strh	r2, [r3, #0]

      *(__IO uint8_t *)(__IO void *)(&hcrc->Instance->DR) = pBuffer[(4U * i) + 2U];  /* Derogation MisraC2012 R.11.5 */
 800ca30:	69fb      	ldr	r3, [r7, #28]
 800ca32:	009b      	lsls	r3, r3, #2
 800ca34:	3302      	adds	r3, #2
 800ca36:	68ba      	ldr	r2, [r7, #8]
 800ca38:	4413      	add	r3, r2
 800ca3a:	68fa      	ldr	r2, [r7, #12]
 800ca3c:	6812      	ldr	r2, [r2, #0]
 800ca3e:	781b      	ldrb	r3, [r3, #0]
 800ca40:	7013      	strb	r3, [r2, #0]
    }
  }

  /* Return the CRC computed value */
  return hcrc->Instance->DR;
 800ca42:	68fb      	ldr	r3, [r7, #12]
 800ca44:	681b      	ldr	r3, [r3, #0]
 800ca46:	681b      	ldr	r3, [r3, #0]
}
 800ca48:	4618      	mov	r0, r3
 800ca4a:	3724      	adds	r7, #36	@ 0x24
 800ca4c:	46bd      	mov	sp, r7
 800ca4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca52:	4770      	bx	lr

0800ca54 <CRC_Handle_16>:
  * @param  pBuffer pointer to the input data buffer
  * @param  BufferLength input data buffer length
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
static uint32_t CRC_Handle_16(CRC_HandleTypeDef *hcrc, uint16_t pBuffer[], uint32_t BufferLength)
{
 800ca54:	b480      	push	{r7}
 800ca56:	b087      	sub	sp, #28
 800ca58:	af00      	add	r7, sp, #0
 800ca5a:	60f8      	str	r0, [r7, #12]
 800ca5c:	60b9      	str	r1, [r7, #8]
 800ca5e:	607a      	str	r2, [r7, #4]
  __IO uint16_t *pReg;

  /* Processing time optimization: 2 HalfWords are entered in a row with a single word write,
   * in case of odd length, last HalfWord must be carefully fed to the CRC calculator to ensure
   * a correct type handling by the peripheral */
  for (i = 0U; i < (BufferLength / 2U); i++)
 800ca60:	2300      	movs	r3, #0
 800ca62:	617b      	str	r3, [r7, #20]
 800ca64:	e013      	b.n	800ca8e <CRC_Handle_16+0x3a>
  {
    hcrc->Instance->DR = ((uint32_t)pBuffer[2U * i] << 16U) | (uint32_t)pBuffer[(2U * i) + 1U];
 800ca66:	697b      	ldr	r3, [r7, #20]
 800ca68:	009b      	lsls	r3, r3, #2
 800ca6a:	68ba      	ldr	r2, [r7, #8]
 800ca6c:	4413      	add	r3, r2
 800ca6e:	881b      	ldrh	r3, [r3, #0]
 800ca70:	041a      	lsls	r2, r3, #16
 800ca72:	697b      	ldr	r3, [r7, #20]
 800ca74:	009b      	lsls	r3, r3, #2
 800ca76:	3302      	adds	r3, #2
 800ca78:	68b9      	ldr	r1, [r7, #8]
 800ca7a:	440b      	add	r3, r1
 800ca7c:	881b      	ldrh	r3, [r3, #0]
 800ca7e:	4619      	mov	r1, r3
 800ca80:	68fb      	ldr	r3, [r7, #12]
 800ca82:	681b      	ldr	r3, [r3, #0]
 800ca84:	430a      	orrs	r2, r1
 800ca86:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < (BufferLength / 2U); i++)
 800ca88:	697b      	ldr	r3, [r7, #20]
 800ca8a:	3301      	adds	r3, #1
 800ca8c:	617b      	str	r3, [r7, #20]
 800ca8e:	687b      	ldr	r3, [r7, #4]
 800ca90:	085b      	lsrs	r3, r3, #1
 800ca92:	697a      	ldr	r2, [r7, #20]
 800ca94:	429a      	cmp	r2, r3
 800ca96:	d3e6      	bcc.n	800ca66 <CRC_Handle_16+0x12>
  }
  if ((BufferLength % 2U) != 0U)
 800ca98:	687b      	ldr	r3, [r7, #4]
 800ca9a:	f003 0301 	and.w	r3, r3, #1
 800ca9e:	2b00      	cmp	r3, #0
 800caa0:	d009      	beq.n	800cab6 <CRC_Handle_16+0x62>
  {
    pReg = (__IO uint16_t *)(__IO void *)(&hcrc->Instance->DR);                 /* Derogation MisraC2012 R.11.5 */
 800caa2:	68fb      	ldr	r3, [r7, #12]
 800caa4:	681b      	ldr	r3, [r3, #0]
 800caa6:	613b      	str	r3, [r7, #16]
    *pReg = pBuffer[2U * i];
 800caa8:	697b      	ldr	r3, [r7, #20]
 800caaa:	009b      	lsls	r3, r3, #2
 800caac:	68ba      	ldr	r2, [r7, #8]
 800caae:	4413      	add	r3, r2
 800cab0:	881a      	ldrh	r2, [r3, #0]
 800cab2:	693b      	ldr	r3, [r7, #16]
 800cab4:	801a      	strh	r2, [r3, #0]
  }

  /* Return the CRC computed value */
  return hcrc->Instance->DR;
 800cab6:	68fb      	ldr	r3, [r7, #12]
 800cab8:	681b      	ldr	r3, [r3, #0]
 800caba:	681b      	ldr	r3, [r3, #0]
}
 800cabc:	4618      	mov	r0, r3
 800cabe:	371c      	adds	r7, #28
 800cac0:	46bd      	mov	sp, r7
 800cac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cac6:	4770      	bx	lr

0800cac8 <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 800cac8:	b480      	push	{r7}
 800caca:	b087      	sub	sp, #28
 800cacc:	af00      	add	r7, sp, #0
 800cace:	60f8      	str	r0, [r7, #12]
 800cad0:	60b9      	str	r1, [r7, #8]
 800cad2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800cad4:	2300      	movs	r3, #0
 800cad6:	75fb      	strb	r3, [r7, #23]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 800cad8:	231f      	movs	r3, #31
 800cada:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_CRC_POL_LENGTH(PolyLength));

  /* Ensure that the generating polynomial is odd */
  if ((Pol & (uint32_t)(0x1U)) ==  0U)
 800cadc:	68bb      	ldr	r3, [r7, #8]
 800cade:	f003 0301 	and.w	r3, r3, #1
 800cae2:	2b00      	cmp	r3, #0
 800cae4:	d102      	bne.n	800caec <HAL_CRCEx_Polynomial_Set+0x24>
  {
    status =  HAL_ERROR;
 800cae6:	2301      	movs	r3, #1
 800cae8:	75fb      	strb	r3, [r7, #23]
 800caea:	e063      	b.n	800cbb4 <HAL_CRCEx_Polynomial_Set+0xec>
     * definition. HAL_ERROR is reported if Pol degree is
     * larger than that indicated by PolyLength.
     * Look for MSB position: msb will contain the degree of
     *  the second to the largest polynomial member. E.g., for
     *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
    while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 800caec:	bf00      	nop
 800caee:	693b      	ldr	r3, [r7, #16]
 800caf0:	1e5a      	subs	r2, r3, #1
 800caf2:	613a      	str	r2, [r7, #16]
 800caf4:	2b00      	cmp	r3, #0
 800caf6:	d009      	beq.n	800cb0c <HAL_CRCEx_Polynomial_Set+0x44>
 800caf8:	693b      	ldr	r3, [r7, #16]
 800cafa:	f003 031f 	and.w	r3, r3, #31
 800cafe:	68ba      	ldr	r2, [r7, #8]
 800cb00:	fa22 f303 	lsr.w	r3, r2, r3
 800cb04:	f003 0301 	and.w	r3, r3, #1
 800cb08:	2b00      	cmp	r3, #0
 800cb0a:	d0f0      	beq.n	800caee <HAL_CRCEx_Polynomial_Set+0x26>
    {
    }

    switch (PolyLength)
 800cb0c:	687b      	ldr	r3, [r7, #4]
 800cb0e:	2b18      	cmp	r3, #24
 800cb10:	d846      	bhi.n	800cba0 <HAL_CRCEx_Polynomial_Set+0xd8>
 800cb12:	a201      	add	r2, pc, #4	@ (adr r2, 800cb18 <HAL_CRCEx_Polynomial_Set+0x50>)
 800cb14:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cb18:	0800cba7 	.word	0x0800cba7
 800cb1c:	0800cba1 	.word	0x0800cba1
 800cb20:	0800cba1 	.word	0x0800cba1
 800cb24:	0800cba1 	.word	0x0800cba1
 800cb28:	0800cba1 	.word	0x0800cba1
 800cb2c:	0800cba1 	.word	0x0800cba1
 800cb30:	0800cba1 	.word	0x0800cba1
 800cb34:	0800cba1 	.word	0x0800cba1
 800cb38:	0800cb95 	.word	0x0800cb95
 800cb3c:	0800cba1 	.word	0x0800cba1
 800cb40:	0800cba1 	.word	0x0800cba1
 800cb44:	0800cba1 	.word	0x0800cba1
 800cb48:	0800cba1 	.word	0x0800cba1
 800cb4c:	0800cba1 	.word	0x0800cba1
 800cb50:	0800cba1 	.word	0x0800cba1
 800cb54:	0800cba1 	.word	0x0800cba1
 800cb58:	0800cb89 	.word	0x0800cb89
 800cb5c:	0800cba1 	.word	0x0800cba1
 800cb60:	0800cba1 	.word	0x0800cba1
 800cb64:	0800cba1 	.word	0x0800cba1
 800cb68:	0800cba1 	.word	0x0800cba1
 800cb6c:	0800cba1 	.word	0x0800cba1
 800cb70:	0800cba1 	.word	0x0800cba1
 800cb74:	0800cba1 	.word	0x0800cba1
 800cb78:	0800cb7d 	.word	0x0800cb7d
    {

      case CRC_POLYLENGTH_7B:
        if (msb >= HAL_CRC_LENGTH_7B)
 800cb7c:	693b      	ldr	r3, [r7, #16]
 800cb7e:	2b06      	cmp	r3, #6
 800cb80:	d913      	bls.n	800cbaa <HAL_CRCEx_Polynomial_Set+0xe2>
        {
          status =   HAL_ERROR;
 800cb82:	2301      	movs	r3, #1
 800cb84:	75fb      	strb	r3, [r7, #23]
        }
        break;
 800cb86:	e010      	b.n	800cbaa <HAL_CRCEx_Polynomial_Set+0xe2>
      case CRC_POLYLENGTH_8B:
        if (msb >= HAL_CRC_LENGTH_8B)
 800cb88:	693b      	ldr	r3, [r7, #16]
 800cb8a:	2b07      	cmp	r3, #7
 800cb8c:	d90f      	bls.n	800cbae <HAL_CRCEx_Polynomial_Set+0xe6>
        {
          status =   HAL_ERROR;
 800cb8e:	2301      	movs	r3, #1
 800cb90:	75fb      	strb	r3, [r7, #23]
        }
        break;
 800cb92:	e00c      	b.n	800cbae <HAL_CRCEx_Polynomial_Set+0xe6>
      case CRC_POLYLENGTH_16B:
        if (msb >= HAL_CRC_LENGTH_16B)
 800cb94:	693b      	ldr	r3, [r7, #16]
 800cb96:	2b0f      	cmp	r3, #15
 800cb98:	d90b      	bls.n	800cbb2 <HAL_CRCEx_Polynomial_Set+0xea>
        {
          status =   HAL_ERROR;
 800cb9a:	2301      	movs	r3, #1
 800cb9c:	75fb      	strb	r3, [r7, #23]
        }
        break;
 800cb9e:	e008      	b.n	800cbb2 <HAL_CRCEx_Polynomial_Set+0xea>

      case CRC_POLYLENGTH_32B:
        /* no polynomial definition vs. polynomial length issue possible */
        break;
      default:
        status =  HAL_ERROR;
 800cba0:	2301      	movs	r3, #1
 800cba2:	75fb      	strb	r3, [r7, #23]
        break;
 800cba4:	e006      	b.n	800cbb4 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 800cba6:	bf00      	nop
 800cba8:	e004      	b.n	800cbb4 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 800cbaa:	bf00      	nop
 800cbac:	e002      	b.n	800cbb4 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 800cbae:	bf00      	nop
 800cbb0:	e000      	b.n	800cbb4 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 800cbb2:	bf00      	nop
    }
  }
  if (status == HAL_OK)
 800cbb4:	7dfb      	ldrb	r3, [r7, #23]
 800cbb6:	2b00      	cmp	r3, #0
 800cbb8:	d10d      	bne.n	800cbd6 <HAL_CRCEx_Polynomial_Set+0x10e>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 800cbba:	68fb      	ldr	r3, [r7, #12]
 800cbbc:	681b      	ldr	r3, [r3, #0]
 800cbbe:	68ba      	ldr	r2, [r7, #8]
 800cbc0:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 800cbc2:	68fb      	ldr	r3, [r7, #12]
 800cbc4:	681b      	ldr	r3, [r3, #0]
 800cbc6:	689b      	ldr	r3, [r3, #8]
 800cbc8:	f023 0118 	bic.w	r1, r3, #24
 800cbcc:	68fb      	ldr	r3, [r7, #12]
 800cbce:	681b      	ldr	r3, [r3, #0]
 800cbd0:	687a      	ldr	r2, [r7, #4]
 800cbd2:	430a      	orrs	r2, r1
 800cbd4:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 800cbd6:	7dfb      	ldrb	r3, [r7, #23]
}
 800cbd8:	4618      	mov	r0, r3
 800cbda:	371c      	adds	r7, #28
 800cbdc:	46bd      	mov	sp, r7
 800cbde:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbe2:	4770      	bx	lr

0800cbe4 <HAL_CRCEx_Input_Data_Reverse>:
  *          @arg @ref CRC_INPUTDATA_INVERSION_HALFWORD HalfWord-wise bit reversal
  *          @arg @ref CRC_INPUTDATA_INVERSION_WORD     Word-wise bit reversal
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Input_Data_Reverse(CRC_HandleTypeDef *hcrc, uint32_t InputReverseMode)
{
 800cbe4:	b480      	push	{r7}
 800cbe6:	b083      	sub	sp, #12
 800cbe8:	af00      	add	r7, sp, #0
 800cbea:	6078      	str	r0, [r7, #4]
 800cbec:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(InputReverseMode));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_BUSY;
 800cbee:	687b      	ldr	r3, [r7, #4]
 800cbf0:	2202      	movs	r2, #2
 800cbf2:	775a      	strb	r2, [r3, #29]

  /* set input data inversion mode */
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, InputReverseMode);
 800cbf4:	687b      	ldr	r3, [r7, #4]
 800cbf6:	681b      	ldr	r3, [r3, #0]
 800cbf8:	689b      	ldr	r3, [r3, #8]
 800cbfa:	f023 0160 	bic.w	r1, r3, #96	@ 0x60
 800cbfe:	687b      	ldr	r3, [r7, #4]
 800cc00:	681b      	ldr	r3, [r3, #0]
 800cc02:	683a      	ldr	r2, [r7, #0]
 800cc04:	430a      	orrs	r2, r1
 800cc06:	609a      	str	r2, [r3, #8]
  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 800cc08:	687b      	ldr	r3, [r7, #4]
 800cc0a:	2201      	movs	r2, #1
 800cc0c:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 800cc0e:	2300      	movs	r3, #0
}
 800cc10:	4618      	mov	r0, r3
 800cc12:	370c      	adds	r7, #12
 800cc14:	46bd      	mov	sp, r7
 800cc16:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc1a:	4770      	bx	lr

0800cc1c <HAL_CRCEx_Output_Data_Reverse>:
  *          @arg @ref CRC_OUTPUTDATA_INVERSION_DISABLE no CRC inversion (default value)
  *          @arg @ref CRC_OUTPUTDATA_INVERSION_ENABLE  bit-level inversion (e.g. for a 8-bit CRC: 0xB5 becomes 0xAD)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Output_Data_Reverse(CRC_HandleTypeDef *hcrc, uint32_t OutputReverseMode)
{
 800cc1c:	b480      	push	{r7}
 800cc1e:	b083      	sub	sp, #12
 800cc20:	af00      	add	r7, sp, #0
 800cc22:	6078      	str	r0, [r7, #4]
 800cc24:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(OutputReverseMode));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_BUSY;
 800cc26:	687b      	ldr	r3, [r7, #4]
 800cc28:	2202      	movs	r2, #2
 800cc2a:	775a      	strb	r2, [r3, #29]

  /* set output data inversion mode */
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, OutputReverseMode);
 800cc2c:	687b      	ldr	r3, [r7, #4]
 800cc2e:	681b      	ldr	r3, [r3, #0]
 800cc30:	689b      	ldr	r3, [r3, #8]
 800cc32:	f023 0180 	bic.w	r1, r3, #128	@ 0x80
 800cc36:	687b      	ldr	r3, [r7, #4]
 800cc38:	681b      	ldr	r3, [r3, #0]
 800cc3a:	683a      	ldr	r2, [r7, #0]
 800cc3c:	430a      	orrs	r2, r1
 800cc3e:	609a      	str	r2, [r3, #8]

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 800cc40:	687b      	ldr	r3, [r7, #4]
 800cc42:	2201      	movs	r2, #1
 800cc44:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 800cc46:	2300      	movs	r3, #0
}
 800cc48:	4618      	mov	r0, r3
 800cc4a:	370c      	adds	r7, #12
 800cc4c:	46bd      	mov	sp, r7
 800cc4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc52:	4770      	bx	lr

0800cc54 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800cc54:	b480      	push	{r7}
 800cc56:	b085      	sub	sp, #20
 800cc58:	af00      	add	r7, sp, #0
 800cc5a:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 800cc5c:	687b      	ldr	r3, [r7, #4]
 800cc5e:	2b00      	cmp	r3, #0
 800cc60:	d101      	bne.n	800cc66 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 800cc62:	2301      	movs	r3, #1
 800cc64:	e098      	b.n	800cd98 <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 800cc66:	687b      	ldr	r3, [r7, #4]
 800cc68:	681b      	ldr	r3, [r3, #0]
 800cc6a:	461a      	mov	r2, r3
 800cc6c:	4b4d      	ldr	r3, [pc, #308]	@ (800cda4 <HAL_DMA_Init+0x150>)
 800cc6e:	429a      	cmp	r2, r3
 800cc70:	d80f      	bhi.n	800cc92 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 800cc72:	687b      	ldr	r3, [r7, #4]
 800cc74:	681b      	ldr	r3, [r3, #0]
 800cc76:	461a      	mov	r2, r3
 800cc78:	4b4b      	ldr	r3, [pc, #300]	@ (800cda8 <HAL_DMA_Init+0x154>)
 800cc7a:	4413      	add	r3, r2
 800cc7c:	4a4b      	ldr	r2, [pc, #300]	@ (800cdac <HAL_DMA_Init+0x158>)
 800cc7e:	fba2 2303 	umull	r2, r3, r2, r3
 800cc82:	091b      	lsrs	r3, r3, #4
 800cc84:	009a      	lsls	r2, r3, #2
 800cc86:	687b      	ldr	r3, [r7, #4]
 800cc88:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 800cc8a:	687b      	ldr	r3, [r7, #4]
 800cc8c:	4a48      	ldr	r2, [pc, #288]	@ (800cdb0 <HAL_DMA_Init+0x15c>)
 800cc8e:	641a      	str	r2, [r3, #64]	@ 0x40
 800cc90:	e00e      	b.n	800ccb0 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 800cc92:	687b      	ldr	r3, [r7, #4]
 800cc94:	681b      	ldr	r3, [r3, #0]
 800cc96:	461a      	mov	r2, r3
 800cc98:	4b46      	ldr	r3, [pc, #280]	@ (800cdb4 <HAL_DMA_Init+0x160>)
 800cc9a:	4413      	add	r3, r2
 800cc9c:	4a43      	ldr	r2, [pc, #268]	@ (800cdac <HAL_DMA_Init+0x158>)
 800cc9e:	fba2 2303 	umull	r2, r3, r2, r3
 800cca2:	091b      	lsrs	r3, r3, #4
 800cca4:	009a      	lsls	r2, r3, #2
 800cca6:	687b      	ldr	r3, [r7, #4]
 800cca8:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 800ccaa:	687b      	ldr	r3, [r7, #4]
 800ccac:	4a42      	ldr	r2, [pc, #264]	@ (800cdb8 <HAL_DMA_Init+0x164>)
 800ccae:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800ccb0:	687b      	ldr	r3, [r7, #4]
 800ccb2:	2202      	movs	r2, #2
 800ccb4:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 800ccb8:	687b      	ldr	r3, [r7, #4]
 800ccba:	681b      	ldr	r3, [r3, #0]
 800ccbc:	681b      	ldr	r3, [r3, #0]
 800ccbe:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 800ccc0:	68fb      	ldr	r3, [r7, #12]
 800ccc2:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 800ccc6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800ccca:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 800cccc:	687b      	ldr	r3, [r7, #4]
 800ccce:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800ccd0:	687b      	ldr	r3, [r7, #4]
 800ccd2:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 800ccd4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800ccd6:	687b      	ldr	r3, [r7, #4]
 800ccd8:	691b      	ldr	r3, [r3, #16]
 800ccda:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800ccdc:	687b      	ldr	r3, [r7, #4]
 800ccde:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800cce0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800cce2:	687b      	ldr	r3, [r7, #4]
 800cce4:	699b      	ldr	r3, [r3, #24]
 800cce6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800cce8:	687b      	ldr	r3, [r7, #4]
 800ccea:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800ccec:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800ccee:	687b      	ldr	r3, [r7, #4]
 800ccf0:	6a1b      	ldr	r3, [r3, #32]
 800ccf2:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 800ccf4:	68fa      	ldr	r2, [r7, #12]
 800ccf6:	4313      	orrs	r3, r2
 800ccf8:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800ccfa:	687b      	ldr	r3, [r7, #4]
 800ccfc:	681b      	ldr	r3, [r3, #0]
 800ccfe:	68fa      	ldr	r2, [r7, #12]
 800cd00:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if (hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 800cd02:	687b      	ldr	r3, [r7, #4]
 800cd04:	689b      	ldr	r3, [r3, #8]
 800cd06:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800cd0a:	d039      	beq.n	800cd80 <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 800cd0c:	687b      	ldr	r3, [r7, #4]
 800cd0e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800cd10:	4a27      	ldr	r2, [pc, #156]	@ (800cdb0 <HAL_DMA_Init+0x15c>)
 800cd12:	4293      	cmp	r3, r2
 800cd14:	d11a      	bne.n	800cd4c <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 800cd16:	4b29      	ldr	r3, [pc, #164]	@ (800cdbc <HAL_DMA_Init+0x168>)
 800cd18:	681a      	ldr	r2, [r3, #0]
 800cd1a:	687b      	ldr	r3, [r7, #4]
 800cd1c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800cd1e:	f003 031c 	and.w	r3, r3, #28
 800cd22:	210f      	movs	r1, #15
 800cd24:	fa01 f303 	lsl.w	r3, r1, r3
 800cd28:	43db      	mvns	r3, r3
 800cd2a:	4924      	ldr	r1, [pc, #144]	@ (800cdbc <HAL_DMA_Init+0x168>)
 800cd2c:	4013      	ands	r3, r2
 800cd2e:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 800cd30:	4b22      	ldr	r3, [pc, #136]	@ (800cdbc <HAL_DMA_Init+0x168>)
 800cd32:	681a      	ldr	r2, [r3, #0]
 800cd34:	687b      	ldr	r3, [r7, #4]
 800cd36:	6859      	ldr	r1, [r3, #4]
 800cd38:	687b      	ldr	r3, [r7, #4]
 800cd3a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800cd3c:	f003 031c 	and.w	r3, r3, #28
 800cd40:	fa01 f303 	lsl.w	r3, r1, r3
 800cd44:	491d      	ldr	r1, [pc, #116]	@ (800cdbc <HAL_DMA_Init+0x168>)
 800cd46:	4313      	orrs	r3, r2
 800cd48:	600b      	str	r3, [r1, #0]
 800cd4a:	e019      	b.n	800cd80 <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 800cd4c:	4b1c      	ldr	r3, [pc, #112]	@ (800cdc0 <HAL_DMA_Init+0x16c>)
 800cd4e:	681a      	ldr	r2, [r3, #0]
 800cd50:	687b      	ldr	r3, [r7, #4]
 800cd52:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800cd54:	f003 031c 	and.w	r3, r3, #28
 800cd58:	210f      	movs	r1, #15
 800cd5a:	fa01 f303 	lsl.w	r3, r1, r3
 800cd5e:	43db      	mvns	r3, r3
 800cd60:	4917      	ldr	r1, [pc, #92]	@ (800cdc0 <HAL_DMA_Init+0x16c>)
 800cd62:	4013      	ands	r3, r2
 800cd64:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 800cd66:	4b16      	ldr	r3, [pc, #88]	@ (800cdc0 <HAL_DMA_Init+0x16c>)
 800cd68:	681a      	ldr	r2, [r3, #0]
 800cd6a:	687b      	ldr	r3, [r7, #4]
 800cd6c:	6859      	ldr	r1, [r3, #4]
 800cd6e:	687b      	ldr	r3, [r7, #4]
 800cd70:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800cd72:	f003 031c 	and.w	r3, r3, #28
 800cd76:	fa01 f303 	lsl.w	r3, r1, r3
 800cd7a:	4911      	ldr	r1, [pc, #68]	@ (800cdc0 <HAL_DMA_Init+0x16c>)
 800cd7c:	4313      	orrs	r3, r2
 800cd7e:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
  /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
  /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800cd80:	687b      	ldr	r3, [r7, #4]
 800cd82:	2200      	movs	r2, #0
 800cd84:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 800cd86:	687b      	ldr	r3, [r7, #4]
 800cd88:	2201      	movs	r2, #1
 800cd8a:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 800cd8e:	687b      	ldr	r3, [r7, #4]
 800cd90:	2200      	movs	r2, #0
 800cd92:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 800cd96:	2300      	movs	r3, #0
}
 800cd98:	4618      	mov	r0, r3
 800cd9a:	3714      	adds	r7, #20
 800cd9c:	46bd      	mov	sp, r7
 800cd9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cda2:	4770      	bx	lr
 800cda4:	40020407 	.word	0x40020407
 800cda8:	bffdfff8 	.word	0xbffdfff8
 800cdac:	cccccccd 	.word	0xcccccccd
 800cdb0:	40020000 	.word	0x40020000
 800cdb4:	bffdfbf8 	.word	0xbffdfbf8
 800cdb8:	40020400 	.word	0x40020400
 800cdbc:	400200a8 	.word	0x400200a8
 800cdc0:	400204a8 	.word	0x400204a8

0800cdc4 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800cdc4:	b580      	push	{r7, lr}
 800cdc6:	b086      	sub	sp, #24
 800cdc8:	af00      	add	r7, sp, #0
 800cdca:	60f8      	str	r0, [r7, #12]
 800cdcc:	60b9      	str	r1, [r7, #8]
 800cdce:	607a      	str	r2, [r7, #4]
 800cdd0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800cdd2:	2300      	movs	r3, #0
 800cdd4:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800cdd6:	68fb      	ldr	r3, [r7, #12]
 800cdd8:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800cddc:	2b01      	cmp	r3, #1
 800cdde:	d101      	bne.n	800cde4 <HAL_DMA_Start_IT+0x20>
 800cde0:	2302      	movs	r3, #2
 800cde2:	e04b      	b.n	800ce7c <HAL_DMA_Start_IT+0xb8>
 800cde4:	68fb      	ldr	r3, [r7, #12]
 800cde6:	2201      	movs	r2, #1
 800cde8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 800cdec:	68fb      	ldr	r3, [r7, #12]
 800cdee:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 800cdf2:	b2db      	uxtb	r3, r3
 800cdf4:	2b01      	cmp	r3, #1
 800cdf6:	d13a      	bne.n	800ce6e <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800cdf8:	68fb      	ldr	r3, [r7, #12]
 800cdfa:	2202      	movs	r2, #2
 800cdfc:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800ce00:	68fb      	ldr	r3, [r7, #12]
 800ce02:	2200      	movs	r2, #0
 800ce04:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800ce06:	68fb      	ldr	r3, [r7, #12]
 800ce08:	681b      	ldr	r3, [r3, #0]
 800ce0a:	681a      	ldr	r2, [r3, #0]
 800ce0c:	68fb      	ldr	r3, [r7, #12]
 800ce0e:	681b      	ldr	r3, [r3, #0]
 800ce10:	f022 0201 	bic.w	r2, r2, #1
 800ce14:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800ce16:	683b      	ldr	r3, [r7, #0]
 800ce18:	687a      	ldr	r2, [r7, #4]
 800ce1a:	68b9      	ldr	r1, [r7, #8]
 800ce1c:	68f8      	ldr	r0, [r7, #12]
 800ce1e:	f000 f92a 	bl	800d076 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 800ce22:	68fb      	ldr	r3, [r7, #12]
 800ce24:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ce26:	2b00      	cmp	r3, #0
 800ce28:	d008      	beq.n	800ce3c <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800ce2a:	68fb      	ldr	r3, [r7, #12]
 800ce2c:	681b      	ldr	r3, [r3, #0]
 800ce2e:	681a      	ldr	r2, [r3, #0]
 800ce30:	68fb      	ldr	r3, [r7, #12]
 800ce32:	681b      	ldr	r3, [r3, #0]
 800ce34:	f042 020e 	orr.w	r2, r2, #14
 800ce38:	601a      	str	r2, [r3, #0]
 800ce3a:	e00f      	b.n	800ce5c <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800ce3c:	68fb      	ldr	r3, [r7, #12]
 800ce3e:	681b      	ldr	r3, [r3, #0]
 800ce40:	681a      	ldr	r2, [r3, #0]
 800ce42:	68fb      	ldr	r3, [r7, #12]
 800ce44:	681b      	ldr	r3, [r3, #0]
 800ce46:	f022 0204 	bic.w	r2, r2, #4
 800ce4a:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 800ce4c:	68fb      	ldr	r3, [r7, #12]
 800ce4e:	681b      	ldr	r3, [r3, #0]
 800ce50:	681a      	ldr	r2, [r3, #0]
 800ce52:	68fb      	ldr	r3, [r7, #12]
 800ce54:	681b      	ldr	r3, [r3, #0]
 800ce56:	f042 020a 	orr.w	r2, r2, #10
 800ce5a:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800ce5c:	68fb      	ldr	r3, [r7, #12]
 800ce5e:	681b      	ldr	r3, [r3, #0]
 800ce60:	681a      	ldr	r2, [r3, #0]
 800ce62:	68fb      	ldr	r3, [r7, #12]
 800ce64:	681b      	ldr	r3, [r3, #0]
 800ce66:	f042 0201 	orr.w	r2, r2, #1
 800ce6a:	601a      	str	r2, [r3, #0]
 800ce6c:	e005      	b.n	800ce7a <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800ce6e:	68fb      	ldr	r3, [r7, #12]
 800ce70:	2200      	movs	r2, #0
 800ce72:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 800ce76:	2302      	movs	r3, #2
 800ce78:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 800ce7a:	7dfb      	ldrb	r3, [r7, #23]
}
 800ce7c:	4618      	mov	r0, r3
 800ce7e:	3718      	adds	r7, #24
 800ce80:	46bd      	mov	sp, r7
 800ce82:	bd80      	pop	{r7, pc}

0800ce84 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800ce84:	b480      	push	{r7}
 800ce86:	b085      	sub	sp, #20
 800ce88:	af00      	add	r7, sp, #0
 800ce8a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800ce8c:	2300      	movs	r3, #0
 800ce8e:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 800ce90:	687b      	ldr	r3, [r7, #4]
 800ce92:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 800ce96:	b2db      	uxtb	r3, r3
 800ce98:	2b02      	cmp	r3, #2
 800ce9a:	d008      	beq.n	800ceae <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800ce9c:	687b      	ldr	r3, [r7, #4]
 800ce9e:	2204      	movs	r2, #4
 800cea0:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800cea2:	687b      	ldr	r3, [r7, #4]
 800cea4:	2200      	movs	r2, #0
 800cea6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 800ceaa:	2301      	movs	r3, #1
 800ceac:	e022      	b.n	800cef4 <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800ceae:	687b      	ldr	r3, [r7, #4]
 800ceb0:	681b      	ldr	r3, [r3, #0]
 800ceb2:	681a      	ldr	r2, [r3, #0]
 800ceb4:	687b      	ldr	r3, [r7, #4]
 800ceb6:	681b      	ldr	r3, [r3, #0]
 800ceb8:	f022 020e 	bic.w	r2, r2, #14
 800cebc:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800cebe:	687b      	ldr	r3, [r7, #4]
 800cec0:	681b      	ldr	r3, [r3, #0]
 800cec2:	681a      	ldr	r2, [r3, #0]
 800cec4:	687b      	ldr	r3, [r7, #4]
 800cec6:	681b      	ldr	r3, [r3, #0]
 800cec8:	f022 0201 	bic.w	r2, r2, #1
 800cecc:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800cece:	687b      	ldr	r3, [r7, #4]
 800ced0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800ced2:	f003 021c 	and.w	r2, r3, #28
 800ced6:	687b      	ldr	r3, [r7, #4]
 800ced8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ceda:	2101      	movs	r1, #1
 800cedc:	fa01 f202 	lsl.w	r2, r1, r2
 800cee0:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800cee2:	687b      	ldr	r3, [r7, #4]
 800cee4:	2201      	movs	r2, #1
 800cee6:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800ceea:	687b      	ldr	r3, [r7, #4]
 800ceec:	2200      	movs	r2, #0
 800ceee:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return status;
 800cef2:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 800cef4:	4618      	mov	r0, r3
 800cef6:	3714      	adds	r7, #20
 800cef8:	46bd      	mov	sp, r7
 800cefa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cefe:	4770      	bx	lr

0800cf00 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800cf00:	b580      	push	{r7, lr}
 800cf02:	b084      	sub	sp, #16
 800cf04:	af00      	add	r7, sp, #0
 800cf06:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800cf08:	687b      	ldr	r3, [r7, #4]
 800cf0a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800cf0c:	681b      	ldr	r3, [r3, #0]
 800cf0e:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800cf10:	687b      	ldr	r3, [r7, #4]
 800cf12:	681b      	ldr	r3, [r3, #0]
 800cf14:	681b      	ldr	r3, [r3, #0]
 800cf16:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 800cf18:	687b      	ldr	r3, [r7, #4]
 800cf1a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800cf1c:	f003 031c 	and.w	r3, r3, #28
 800cf20:	2204      	movs	r2, #4
 800cf22:	409a      	lsls	r2, r3
 800cf24:	68fb      	ldr	r3, [r7, #12]
 800cf26:	4013      	ands	r3, r2
 800cf28:	2b00      	cmp	r3, #0
 800cf2a:	d026      	beq.n	800cf7a <HAL_DMA_IRQHandler+0x7a>
 800cf2c:	68bb      	ldr	r3, [r7, #8]
 800cf2e:	f003 0304 	and.w	r3, r3, #4
 800cf32:	2b00      	cmp	r3, #0
 800cf34:	d021      	beq.n	800cf7a <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800cf36:	687b      	ldr	r3, [r7, #4]
 800cf38:	681b      	ldr	r3, [r3, #0]
 800cf3a:	681b      	ldr	r3, [r3, #0]
 800cf3c:	f003 0320 	and.w	r3, r3, #32
 800cf40:	2b00      	cmp	r3, #0
 800cf42:	d107      	bne.n	800cf54 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800cf44:	687b      	ldr	r3, [r7, #4]
 800cf46:	681b      	ldr	r3, [r3, #0]
 800cf48:	681a      	ldr	r2, [r3, #0]
 800cf4a:	687b      	ldr	r3, [r7, #4]
 800cf4c:	681b      	ldr	r3, [r3, #0]
 800cf4e:	f022 0204 	bic.w	r2, r2, #4
 800cf52:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 800cf54:	687b      	ldr	r3, [r7, #4]
 800cf56:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800cf58:	f003 021c 	and.w	r2, r3, #28
 800cf5c:	687b      	ldr	r3, [r7, #4]
 800cf5e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800cf60:	2104      	movs	r1, #4
 800cf62:	fa01 f202 	lsl.w	r2, r1, r2
 800cf66:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 800cf68:	687b      	ldr	r3, [r7, #4]
 800cf6a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800cf6c:	2b00      	cmp	r3, #0
 800cf6e:	d071      	beq.n	800d054 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 800cf70:	687b      	ldr	r3, [r7, #4]
 800cf72:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800cf74:	6878      	ldr	r0, [r7, #4]
 800cf76:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 800cf78:	e06c      	b.n	800d054 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 800cf7a:	687b      	ldr	r3, [r7, #4]
 800cf7c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800cf7e:	f003 031c 	and.w	r3, r3, #28
 800cf82:	2202      	movs	r2, #2
 800cf84:	409a      	lsls	r2, r3
 800cf86:	68fb      	ldr	r3, [r7, #12]
 800cf88:	4013      	ands	r3, r2
 800cf8a:	2b00      	cmp	r3, #0
 800cf8c:	d02e      	beq.n	800cfec <HAL_DMA_IRQHandler+0xec>
 800cf8e:	68bb      	ldr	r3, [r7, #8]
 800cf90:	f003 0302 	and.w	r3, r3, #2
 800cf94:	2b00      	cmp	r3, #0
 800cf96:	d029      	beq.n	800cfec <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800cf98:	687b      	ldr	r3, [r7, #4]
 800cf9a:	681b      	ldr	r3, [r3, #0]
 800cf9c:	681b      	ldr	r3, [r3, #0]
 800cf9e:	f003 0320 	and.w	r3, r3, #32
 800cfa2:	2b00      	cmp	r3, #0
 800cfa4:	d10b      	bne.n	800cfbe <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800cfa6:	687b      	ldr	r3, [r7, #4]
 800cfa8:	681b      	ldr	r3, [r3, #0]
 800cfaa:	681a      	ldr	r2, [r3, #0]
 800cfac:	687b      	ldr	r3, [r7, #4]
 800cfae:	681b      	ldr	r3, [r3, #0]
 800cfb0:	f022 020a 	bic.w	r2, r2, #10
 800cfb4:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800cfb6:	687b      	ldr	r3, [r7, #4]
 800cfb8:	2201      	movs	r2, #1
 800cfba:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 800cfbe:	687b      	ldr	r3, [r7, #4]
 800cfc0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800cfc2:	f003 021c 	and.w	r2, r3, #28
 800cfc6:	687b      	ldr	r3, [r7, #4]
 800cfc8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800cfca:	2102      	movs	r1, #2
 800cfcc:	fa01 f202 	lsl.w	r2, r1, r2
 800cfd0:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800cfd2:	687b      	ldr	r3, [r7, #4]
 800cfd4:	2200      	movs	r2, #0
 800cfd6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 800cfda:	687b      	ldr	r3, [r7, #4]
 800cfdc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800cfde:	2b00      	cmp	r3, #0
 800cfe0:	d038      	beq.n	800d054 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 800cfe2:	687b      	ldr	r3, [r7, #4]
 800cfe4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800cfe6:	6878      	ldr	r0, [r7, #4]
 800cfe8:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 800cfea:	e033      	b.n	800d054 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 800cfec:	687b      	ldr	r3, [r7, #4]
 800cfee:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800cff0:	f003 031c 	and.w	r3, r3, #28
 800cff4:	2208      	movs	r2, #8
 800cff6:	409a      	lsls	r2, r3
 800cff8:	68fb      	ldr	r3, [r7, #12]
 800cffa:	4013      	ands	r3, r2
 800cffc:	2b00      	cmp	r3, #0
 800cffe:	d02a      	beq.n	800d056 <HAL_DMA_IRQHandler+0x156>
 800d000:	68bb      	ldr	r3, [r7, #8]
 800d002:	f003 0308 	and.w	r3, r3, #8
 800d006:	2b00      	cmp	r3, #0
 800d008:	d025      	beq.n	800d056 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800d00a:	687b      	ldr	r3, [r7, #4]
 800d00c:	681b      	ldr	r3, [r3, #0]
 800d00e:	681a      	ldr	r2, [r3, #0]
 800d010:	687b      	ldr	r3, [r7, #4]
 800d012:	681b      	ldr	r3, [r3, #0]
 800d014:	f022 020e 	bic.w	r2, r2, #14
 800d018:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800d01a:	687b      	ldr	r3, [r7, #4]
 800d01c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800d01e:	f003 021c 	and.w	r2, r3, #28
 800d022:	687b      	ldr	r3, [r7, #4]
 800d024:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d026:	2101      	movs	r1, #1
 800d028:	fa01 f202 	lsl.w	r2, r1, r2
 800d02c:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800d02e:	687b      	ldr	r3, [r7, #4]
 800d030:	2201      	movs	r2, #1
 800d032:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800d034:	687b      	ldr	r3, [r7, #4]
 800d036:	2201      	movs	r2, #1
 800d038:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800d03c:	687b      	ldr	r3, [r7, #4]
 800d03e:	2200      	movs	r2, #0
 800d040:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 800d044:	687b      	ldr	r3, [r7, #4]
 800d046:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d048:	2b00      	cmp	r3, #0
 800d04a:	d004      	beq.n	800d056 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800d04c:	687b      	ldr	r3, [r7, #4]
 800d04e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d050:	6878      	ldr	r0, [r7, #4]
 800d052:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 800d054:	bf00      	nop
 800d056:	bf00      	nop
}
 800d058:	3710      	adds	r7, #16
 800d05a:	46bd      	mov	sp, r7
 800d05c:	bd80      	pop	{r7, pc}

0800d05e <HAL_DMA_GetError>:
  * @param  hdma : pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 800d05e:	b480      	push	{r7}
 800d060:	b083      	sub	sp, #12
 800d062:	af00      	add	r7, sp, #0
 800d064:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 800d066:	687b      	ldr	r3, [r7, #4]
 800d068:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
}
 800d06a:	4618      	mov	r0, r3
 800d06c:	370c      	adds	r7, #12
 800d06e:	46bd      	mov	sp, r7
 800d070:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d074:	4770      	bx	lr

0800d076 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800d076:	b480      	push	{r7}
 800d078:	b085      	sub	sp, #20
 800d07a:	af00      	add	r7, sp, #0
 800d07c:	60f8      	str	r0, [r7, #12]
 800d07e:	60b9      	str	r1, [r7, #8]
 800d080:	607a      	str	r2, [r7, #4]
 800d082:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800d084:	68fb      	ldr	r3, [r7, #12]
 800d086:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800d088:	f003 021c 	and.w	r2, r3, #28
 800d08c:	68fb      	ldr	r3, [r7, #12]
 800d08e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d090:	2101      	movs	r1, #1
 800d092:	fa01 f202 	lsl.w	r2, r1, r2
 800d096:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800d098:	68fb      	ldr	r3, [r7, #12]
 800d09a:	681b      	ldr	r3, [r3, #0]
 800d09c:	683a      	ldr	r2, [r7, #0]
 800d09e:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800d0a0:	68fb      	ldr	r3, [r7, #12]
 800d0a2:	689b      	ldr	r3, [r3, #8]
 800d0a4:	2b10      	cmp	r3, #16
 800d0a6:	d108      	bne.n	800d0ba <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800d0a8:	68fb      	ldr	r3, [r7, #12]
 800d0aa:	681b      	ldr	r3, [r3, #0]
 800d0ac:	687a      	ldr	r2, [r7, #4]
 800d0ae:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800d0b0:	68fb      	ldr	r3, [r7, #12]
 800d0b2:	681b      	ldr	r3, [r3, #0]
 800d0b4:	68ba      	ldr	r2, [r7, #8]
 800d0b6:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800d0b8:	e007      	b.n	800d0ca <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 800d0ba:	68fb      	ldr	r3, [r7, #12]
 800d0bc:	681b      	ldr	r3, [r3, #0]
 800d0be:	68ba      	ldr	r2, [r7, #8]
 800d0c0:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 800d0c2:	68fb      	ldr	r3, [r7, #12]
 800d0c4:	681b      	ldr	r3, [r3, #0]
 800d0c6:	687a      	ldr	r2, [r7, #4]
 800d0c8:	60da      	str	r2, [r3, #12]
}
 800d0ca:	bf00      	nop
 800d0cc:	3714      	adds	r7, #20
 800d0ce:	46bd      	mov	sp, r7
 800d0d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0d4:	4770      	bx	lr
	...

0800d0d8 <HAL_FLASH_Program>:
  *                are stored the data for the row fast program
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 800d0d8:	b580      	push	{r7, lr}
 800d0da:	b086      	sub	sp, #24
 800d0dc:	af00      	add	r7, sp, #0
 800d0de:	60f8      	str	r0, [r7, #12]
 800d0e0:	60b9      	str	r1, [r7, #8]
 800d0e2:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status;
  uint32_t prog_bit = 0;
 800d0e6:	2300      	movs	r3, #0
 800d0e8:	613b      	str	r3, [r7, #16]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 800d0ea:	4b2f      	ldr	r3, [pc, #188]	@ (800d1a8 <HAL_FLASH_Program+0xd0>)
 800d0ec:	781b      	ldrb	r3, [r3, #0]
 800d0ee:	2b01      	cmp	r3, #1
 800d0f0:	d101      	bne.n	800d0f6 <HAL_FLASH_Program+0x1e>
 800d0f2:	2302      	movs	r3, #2
 800d0f4:	e053      	b.n	800d19e <HAL_FLASH_Program+0xc6>
 800d0f6:	4b2c      	ldr	r3, [pc, #176]	@ (800d1a8 <HAL_FLASH_Program+0xd0>)
 800d0f8:	2201      	movs	r2, #1
 800d0fa:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800d0fc:	f24c 3050 	movw	r0, #50000	@ 0xc350
 800d100:	f000 f8c6 	bl	800d290 <FLASH_WaitForLastOperation>
 800d104:	4603      	mov	r3, r0
 800d106:	75fb      	strb	r3, [r7, #23]

  if(status == HAL_OK)
 800d108:	7dfb      	ldrb	r3, [r7, #23]
 800d10a:	2b00      	cmp	r3, #0
 800d10c:	d143      	bne.n	800d196 <HAL_FLASH_Program+0xbe>
  {
    pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 800d10e:	4b26      	ldr	r3, [pc, #152]	@ (800d1a8 <HAL_FLASH_Program+0xd0>)
 800d110:	2200      	movs	r2, #0
 800d112:	605a      	str	r2, [r3, #4]

    /* Deactivate the data cache if they are activated to avoid data misbehavior */
    if(READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != 0U)
 800d114:	4b25      	ldr	r3, [pc, #148]	@ (800d1ac <HAL_FLASH_Program+0xd4>)
 800d116:	681b      	ldr	r3, [r3, #0]
 800d118:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800d11c:	2b00      	cmp	r3, #0
 800d11e:	d009      	beq.n	800d134 <HAL_FLASH_Program+0x5c>
    {
      /* Disable data cache  */
      __HAL_FLASH_DATA_CACHE_DISABLE();
 800d120:	4b22      	ldr	r3, [pc, #136]	@ (800d1ac <HAL_FLASH_Program+0xd4>)
 800d122:	681b      	ldr	r3, [r3, #0]
 800d124:	4a21      	ldr	r2, [pc, #132]	@ (800d1ac <HAL_FLASH_Program+0xd4>)
 800d126:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800d12a:	6013      	str	r3, [r2, #0]
      pFlash.CacheToReactivate = FLASH_CACHE_DCACHE_ENABLED;
 800d12c:	4b1e      	ldr	r3, [pc, #120]	@ (800d1a8 <HAL_FLASH_Program+0xd0>)
 800d12e:	2202      	movs	r2, #2
 800d130:	771a      	strb	r2, [r3, #28]
 800d132:	e002      	b.n	800d13a <HAL_FLASH_Program+0x62>
    }
    else
    {
      pFlash.CacheToReactivate = FLASH_CACHE_DISABLED;
 800d134:	4b1c      	ldr	r3, [pc, #112]	@ (800d1a8 <HAL_FLASH_Program+0xd0>)
 800d136:	2200      	movs	r2, #0
 800d138:	771a      	strb	r2, [r3, #28]
    }

    if(TypeProgram == FLASH_TYPEPROGRAM_DOUBLEWORD)
 800d13a:	68fb      	ldr	r3, [r7, #12]
 800d13c:	2b00      	cmp	r3, #0
 800d13e:	d107      	bne.n	800d150 <HAL_FLASH_Program+0x78>
    {
      /* Program double-word (64-bit) at a specified address */
      FLASH_Program_DoubleWord(Address, Data);
 800d140:	e9d7 2300 	ldrd	r2, r3, [r7]
 800d144:	68b8      	ldr	r0, [r7, #8]
 800d146:	f000 f8f9 	bl	800d33c <FLASH_Program_DoubleWord>
      prog_bit = FLASH_CR_PG;
 800d14a:	2301      	movs	r3, #1
 800d14c:	613b      	str	r3, [r7, #16]
 800d14e:	e010      	b.n	800d172 <HAL_FLASH_Program+0x9a>
    }
    else if((TypeProgram == FLASH_TYPEPROGRAM_FAST) || (TypeProgram == FLASH_TYPEPROGRAM_FAST_AND_LAST))
 800d150:	68fb      	ldr	r3, [r7, #12]
 800d152:	2b01      	cmp	r3, #1
 800d154:	d002      	beq.n	800d15c <HAL_FLASH_Program+0x84>
 800d156:	68fb      	ldr	r3, [r7, #12]
 800d158:	2b02      	cmp	r3, #2
 800d15a:	d10a      	bne.n	800d172 <HAL_FLASH_Program+0x9a>
    {
      /* Fast program a 32 row double-word (64-bit) at a specified address */
      FLASH_Program_Fast(Address, (uint32_t)Data);
 800d15c:	683b      	ldr	r3, [r7, #0]
 800d15e:	4619      	mov	r1, r3
 800d160:	68b8      	ldr	r0, [r7, #8]
 800d162:	f000 f911 	bl	800d388 <FLASH_Program_Fast>

      /* If it is the last row, the bit will be cleared at the end of the operation */
      if(TypeProgram == FLASH_TYPEPROGRAM_FAST_AND_LAST)
 800d166:	68fb      	ldr	r3, [r7, #12]
 800d168:	2b02      	cmp	r3, #2
 800d16a:	d102      	bne.n	800d172 <HAL_FLASH_Program+0x9a>
      {
        prog_bit = FLASH_CR_FSTPG;
 800d16c:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 800d170:	613b      	str	r3, [r7, #16]
    {
      /* Nothing to do */
    }

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800d172:	f24c 3050 	movw	r0, #50000	@ 0xc350
 800d176:	f000 f88b 	bl	800d290 <FLASH_WaitForLastOperation>
 800d17a:	4603      	mov	r3, r0
 800d17c:	75fb      	strb	r3, [r7, #23]

    /* If the program operation is completed, disable the PG or FSTPG Bit */
    if (prog_bit != 0U)
 800d17e:	693b      	ldr	r3, [r7, #16]
 800d180:	2b00      	cmp	r3, #0
 800d182:	d006      	beq.n	800d192 <HAL_FLASH_Program+0xba>
    {
      CLEAR_BIT(FLASH->CR, prog_bit);
 800d184:	4b09      	ldr	r3, [pc, #36]	@ (800d1ac <HAL_FLASH_Program+0xd4>)
 800d186:	695a      	ldr	r2, [r3, #20]
 800d188:	693b      	ldr	r3, [r7, #16]
 800d18a:	43db      	mvns	r3, r3
 800d18c:	4907      	ldr	r1, [pc, #28]	@ (800d1ac <HAL_FLASH_Program+0xd4>)
 800d18e:	4013      	ands	r3, r2
 800d190:	614b      	str	r3, [r1, #20]
    }

    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();
 800d192:	f000 fae5 	bl	800d760 <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 800d196:	4b04      	ldr	r3, [pc, #16]	@ (800d1a8 <HAL_FLASH_Program+0xd0>)
 800d198:	2200      	movs	r2, #0
 800d19a:	701a      	strb	r2, [r3, #0]

  return status;
 800d19c:	7dfb      	ldrb	r3, [r7, #23]
}
 800d19e:	4618      	mov	r0, r3
 800d1a0:	3718      	adds	r7, #24
 800d1a2:	46bd      	mov	sp, r7
 800d1a4:	bd80      	pop	{r7, pc}
 800d1a6:	bf00      	nop
 800d1a8:	2000027c 	.word	0x2000027c
 800d1ac:	40022000 	.word	0x40022000

0800d1b0 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 800d1b0:	b480      	push	{r7}
 800d1b2:	b083      	sub	sp, #12
 800d1b4:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 800d1b6:	2300      	movs	r3, #0
 800d1b8:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 800d1ba:	4b0b      	ldr	r3, [pc, #44]	@ (800d1e8 <HAL_FLASH_Unlock+0x38>)
 800d1bc:	695b      	ldr	r3, [r3, #20]
 800d1be:	2b00      	cmp	r3, #0
 800d1c0:	da0b      	bge.n	800d1da <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 800d1c2:	4b09      	ldr	r3, [pc, #36]	@ (800d1e8 <HAL_FLASH_Unlock+0x38>)
 800d1c4:	4a09      	ldr	r2, [pc, #36]	@ (800d1ec <HAL_FLASH_Unlock+0x3c>)
 800d1c6:	609a      	str	r2, [r3, #8]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 800d1c8:	4b07      	ldr	r3, [pc, #28]	@ (800d1e8 <HAL_FLASH_Unlock+0x38>)
 800d1ca:	4a09      	ldr	r2, [pc, #36]	@ (800d1f0 <HAL_FLASH_Unlock+0x40>)
 800d1cc:	609a      	str	r2, [r3, #8]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 800d1ce:	4b06      	ldr	r3, [pc, #24]	@ (800d1e8 <HAL_FLASH_Unlock+0x38>)
 800d1d0:	695b      	ldr	r3, [r3, #20]
 800d1d2:	2b00      	cmp	r3, #0
 800d1d4:	da01      	bge.n	800d1da <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 800d1d6:	2301      	movs	r3, #1
 800d1d8:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 800d1da:	79fb      	ldrb	r3, [r7, #7]
}
 800d1dc:	4618      	mov	r0, r3
 800d1de:	370c      	adds	r7, #12
 800d1e0:	46bd      	mov	sp, r7
 800d1e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1e6:	4770      	bx	lr
 800d1e8:	40022000 	.word	0x40022000
 800d1ec:	45670123 	.word	0x45670123
 800d1f0:	cdef89ab 	.word	0xcdef89ab

0800d1f4 <HAL_FLASH_Lock>:
/**
  * @brief  Lock the FLASH control register access.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 800d1f4:	b480      	push	{r7}
 800d1f6:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 800d1f8:	4b05      	ldr	r3, [pc, #20]	@ (800d210 <HAL_FLASH_Lock+0x1c>)
 800d1fa:	695b      	ldr	r3, [r3, #20]
 800d1fc:	4a04      	ldr	r2, [pc, #16]	@ (800d210 <HAL_FLASH_Lock+0x1c>)
 800d1fe:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800d202:	6153      	str	r3, [r2, #20]

  return HAL_OK;
 800d204:	2300      	movs	r3, #0
}
 800d206:	4618      	mov	r0, r3
 800d208:	46bd      	mov	sp, r7
 800d20a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d20e:	4770      	bx	lr
 800d210:	40022000 	.word	0x40022000

0800d214 <HAL_FLASH_OB_Unlock>:
/**
  * @brief  Unlock the FLASH Option Bytes Registers access.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_OB_Unlock(void)
{
 800d214:	b480      	push	{r7}
 800d216:	af00      	add	r7, sp, #0
  if(READ_BIT(FLASH->CR, FLASH_CR_OPTLOCK) != 0U)
 800d218:	4b09      	ldr	r3, [pc, #36]	@ (800d240 <HAL_FLASH_OB_Unlock+0x2c>)
 800d21a:	695b      	ldr	r3, [r3, #20]
 800d21c:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800d220:	2b00      	cmp	r3, #0
 800d222:	d007      	beq.n	800d234 <HAL_FLASH_OB_Unlock+0x20>
  {
    /* Authorizes the Option Byte register programming */
    WRITE_REG(FLASH->OPTKEYR, FLASH_OPTKEY1);
 800d224:	4b06      	ldr	r3, [pc, #24]	@ (800d240 <HAL_FLASH_OB_Unlock+0x2c>)
 800d226:	4a07      	ldr	r2, [pc, #28]	@ (800d244 <HAL_FLASH_OB_Unlock+0x30>)
 800d228:	60da      	str	r2, [r3, #12]
    WRITE_REG(FLASH->OPTKEYR, FLASH_OPTKEY2);
 800d22a:	4b05      	ldr	r3, [pc, #20]	@ (800d240 <HAL_FLASH_OB_Unlock+0x2c>)
 800d22c:	4a06      	ldr	r2, [pc, #24]	@ (800d248 <HAL_FLASH_OB_Unlock+0x34>)
 800d22e:	60da      	str	r2, [r3, #12]
  else
  {
    return HAL_ERROR;
  }

  return HAL_OK;
 800d230:	2300      	movs	r3, #0
 800d232:	e000      	b.n	800d236 <HAL_FLASH_OB_Unlock+0x22>
    return HAL_ERROR;
 800d234:	2301      	movs	r3, #1
}
 800d236:	4618      	mov	r0, r3
 800d238:	46bd      	mov	sp, r7
 800d23a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d23e:	4770      	bx	lr
 800d240:	40022000 	.word	0x40022000
 800d244:	08192a3b 	.word	0x08192a3b
 800d248:	4c5d6e7f 	.word	0x4c5d6e7f

0800d24c <HAL_FLASH_OB_Lock>:
/**
  * @brief  Lock the FLASH Option Bytes Registers access.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_OB_Lock(void)
{
 800d24c:	b480      	push	{r7}
 800d24e:	af00      	add	r7, sp, #0
  /* Set the OPTLOCK Bit to lock the FLASH Option Byte Registers access */
  SET_BIT(FLASH->CR, FLASH_CR_OPTLOCK);
 800d250:	4b05      	ldr	r3, [pc, #20]	@ (800d268 <HAL_FLASH_OB_Lock+0x1c>)
 800d252:	695b      	ldr	r3, [r3, #20]
 800d254:	4a04      	ldr	r2, [pc, #16]	@ (800d268 <HAL_FLASH_OB_Lock+0x1c>)
 800d256:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800d25a:	6153      	str	r3, [r2, #20]

  return HAL_OK;
 800d25c:	2300      	movs	r3, #0
}
 800d25e:	4618      	mov	r0, r3
 800d260:	46bd      	mov	sp, r7
 800d262:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d266:	4770      	bx	lr
 800d268:	40022000 	.word	0x40022000

0800d26c <HAL_FLASH_OB_Launch>:
/**
  * @brief  Launch the option byte loading.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_OB_Launch(void)
{
 800d26c:	b580      	push	{r7, lr}
 800d26e:	af00      	add	r7, sp, #0
  /* Set the bit to force the option byte reloading */
  SET_BIT(FLASH->CR, FLASH_CR_OBL_LAUNCH);
 800d270:	4b06      	ldr	r3, [pc, #24]	@ (800d28c <HAL_FLASH_OB_Launch+0x20>)
 800d272:	695b      	ldr	r3, [r3, #20]
 800d274:	4a05      	ldr	r2, [pc, #20]	@ (800d28c <HAL_FLASH_OB_Launch+0x20>)
 800d276:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800d27a:	6153      	str	r3, [r2, #20]

  /* Wait for last operation to be completed */
  return(FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE));
 800d27c:	f24c 3050 	movw	r0, #50000	@ 0xc350
 800d280:	f000 f806 	bl	800d290 <FLASH_WaitForLastOperation>
 800d284:	4603      	mov	r3, r0
}
 800d286:	4618      	mov	r0, r3
 800d288:	bd80      	pop	{r7, pc}
 800d28a:	bf00      	nop
 800d28c:	40022000 	.word	0x40022000

0800d290 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operation timeout
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 800d290:	b580      	push	{r7, lr}
 800d292:	b084      	sub	sp, #16
 800d294:	af00      	add	r7, sp, #0
 800d296:	6078      	str	r0, [r7, #4]
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */

  uint32_t tickstart = HAL_GetTick();
 800d298:	f7fd fdae 	bl	800adf8 <HAL_GetTick>
 800d29c:	60f8      	str	r0, [r7, #12]
  uint32_t error;

  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY))
 800d29e:	e00d      	b.n	800d2bc <FLASH_WaitForLastOperation+0x2c>
  {
    if(Timeout != HAL_MAX_DELAY)
 800d2a0:	687b      	ldr	r3, [r7, #4]
 800d2a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d2a6:	d009      	beq.n	800d2bc <FLASH_WaitForLastOperation+0x2c>
    {
      if((HAL_GetTick() - tickstart) >= Timeout)
 800d2a8:	f7fd fda6 	bl	800adf8 <HAL_GetTick>
 800d2ac:	4602      	mov	r2, r0
 800d2ae:	68fb      	ldr	r3, [r7, #12]
 800d2b0:	1ad3      	subs	r3, r2, r3
 800d2b2:	687a      	ldr	r2, [r7, #4]
 800d2b4:	429a      	cmp	r2, r3
 800d2b6:	d801      	bhi.n	800d2bc <FLASH_WaitForLastOperation+0x2c>
      {
        return HAL_TIMEOUT;
 800d2b8:	2303      	movs	r3, #3
 800d2ba:	e036      	b.n	800d32a <FLASH_WaitForLastOperation+0x9a>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY))
 800d2bc:	4b1d      	ldr	r3, [pc, #116]	@ (800d334 <FLASH_WaitForLastOperation+0xa4>)
 800d2be:	691b      	ldr	r3, [r3, #16]
 800d2c0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800d2c4:	2b00      	cmp	r3, #0
 800d2c6:	d1eb      	bne.n	800d2a0 <FLASH_WaitForLastOperation+0x10>
      }
    }
  }

  error = (FLASH->SR & FLASH_FLAG_SR_ERRORS);
 800d2c8:	4b1a      	ldr	r3, [pc, #104]	@ (800d334 <FLASH_WaitForLastOperation+0xa4>)
 800d2ca:	691a      	ldr	r2, [r3, #16]
 800d2cc:	f24c 33fa 	movw	r3, #50170	@ 0xc3fa
 800d2d0:	4013      	ands	r3, r2
 800d2d2:	60bb      	str	r3, [r7, #8]

  if(error != 0u)
 800d2d4:	68bb      	ldr	r3, [r7, #8]
 800d2d6:	2b00      	cmp	r3, #0
 800d2d8:	d01d      	beq.n	800d316 <FLASH_WaitForLastOperation+0x86>
  {
    /*Save the error code*/
    pFlash.ErrorCode |= error;
 800d2da:	4b17      	ldr	r3, [pc, #92]	@ (800d338 <FLASH_WaitForLastOperation+0xa8>)
 800d2dc:	685a      	ldr	r2, [r3, #4]
 800d2de:	68bb      	ldr	r3, [r7, #8]
 800d2e0:	4313      	orrs	r3, r2
 800d2e2:	4a15      	ldr	r2, [pc, #84]	@ (800d338 <FLASH_WaitForLastOperation+0xa8>)
 800d2e4:	6053      	str	r3, [r2, #4]

    /* Clear error programming flags */
    __HAL_FLASH_CLEAR_FLAG(error);
 800d2e6:	68bb      	ldr	r3, [r7, #8]
 800d2e8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800d2ec:	d307      	bcc.n	800d2fe <FLASH_WaitForLastOperation+0x6e>
 800d2ee:	4b11      	ldr	r3, [pc, #68]	@ (800d334 <FLASH_WaitForLastOperation+0xa4>)
 800d2f0:	699a      	ldr	r2, [r3, #24]
 800d2f2:	68bb      	ldr	r3, [r7, #8]
 800d2f4:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 800d2f8:	490e      	ldr	r1, [pc, #56]	@ (800d334 <FLASH_WaitForLastOperation+0xa4>)
 800d2fa:	4313      	orrs	r3, r2
 800d2fc:	618b      	str	r3, [r1, #24]
 800d2fe:	68bb      	ldr	r3, [r7, #8]
 800d300:	f023 4340 	bic.w	r3, r3, #3221225472	@ 0xc0000000
 800d304:	2b00      	cmp	r3, #0
 800d306:	d004      	beq.n	800d312 <FLASH_WaitForLastOperation+0x82>
 800d308:	4a0a      	ldr	r2, [pc, #40]	@ (800d334 <FLASH_WaitForLastOperation+0xa4>)
 800d30a:	68bb      	ldr	r3, [r7, #8]
 800d30c:	f023 4340 	bic.w	r3, r3, #3221225472	@ 0xc0000000
 800d310:	6113      	str	r3, [r2, #16]

    return HAL_ERROR;
 800d312:	2301      	movs	r3, #1
 800d314:	e009      	b.n	800d32a <FLASH_WaitForLastOperation+0x9a>
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 800d316:	4b07      	ldr	r3, [pc, #28]	@ (800d334 <FLASH_WaitForLastOperation+0xa4>)
 800d318:	691b      	ldr	r3, [r3, #16]
 800d31a:	f003 0301 	and.w	r3, r3, #1
 800d31e:	2b00      	cmp	r3, #0
 800d320:	d002      	beq.n	800d328 <FLASH_WaitForLastOperation+0x98>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 800d322:	4b04      	ldr	r3, [pc, #16]	@ (800d334 <FLASH_WaitForLastOperation+0xa4>)
 800d324:	2201      	movs	r2, #1
 800d326:	611a      	str	r2, [r3, #16]
  }

  /* If there is an error flag set */
  return HAL_OK;
 800d328:	2300      	movs	r3, #0
}
 800d32a:	4618      	mov	r0, r3
 800d32c:	3710      	adds	r7, #16
 800d32e:	46bd      	mov	sp, r7
 800d330:	bd80      	pop	{r7, pc}
 800d332:	bf00      	nop
 800d334:	40022000 	.word	0x40022000
 800d338:	2000027c 	.word	0x2000027c

0800d33c <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 800d33c:	b480      	push	{r7}
 800d33e:	b085      	sub	sp, #20
 800d340:	af00      	add	r7, sp, #0
 800d342:	60f8      	str	r0, [r7, #12]
 800d344:	e9c7 2300 	strd	r2, r3, [r7]
  /* Check the parameters */
  assert_param(IS_FLASH_PROGRAM_ADDRESS(Address));

  /* Set PG bit */
  SET_BIT(FLASH->CR, FLASH_CR_PG);
 800d348:	4b0e      	ldr	r3, [pc, #56]	@ (800d384 <FLASH_Program_DoubleWord+0x48>)
 800d34a:	695b      	ldr	r3, [r3, #20]
 800d34c:	4a0d      	ldr	r2, [pc, #52]	@ (800d384 <FLASH_Program_DoubleWord+0x48>)
 800d34e:	f043 0301 	orr.w	r3, r3, #1
 800d352:	6153      	str	r3, [r2, #20]

  /* Program first word */
  *(__IO uint32_t*)Address = (uint32_t)Data;
 800d354:	68fb      	ldr	r3, [r7, #12]
 800d356:	683a      	ldr	r2, [r7, #0]
 800d358:	601a      	str	r2, [r3, #0]
  __ASM volatile ("isb 0xF":::"memory");
 800d35a:	f3bf 8f6f 	isb	sy
}
 800d35e:	bf00      	nop
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(__IO uint32_t*)(Address+4U) = (uint32_t)(Data >> 32);
 800d360:	e9d7 0100 	ldrd	r0, r1, [r7]
 800d364:	f04f 0200 	mov.w	r2, #0
 800d368:	f04f 0300 	mov.w	r3, #0
 800d36c:	000a      	movs	r2, r1
 800d36e:	2300      	movs	r3, #0
 800d370:	68f9      	ldr	r1, [r7, #12]
 800d372:	3104      	adds	r1, #4
 800d374:	4613      	mov	r3, r2
 800d376:	600b      	str	r3, [r1, #0]
}
 800d378:	bf00      	nop
 800d37a:	3714      	adds	r7, #20
 800d37c:	46bd      	mov	sp, r7
 800d37e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d382:	4770      	bx	lr
 800d384:	40022000 	.word	0x40022000

0800d388 <FLASH_Program_Fast>:
  * @param  Address specifies the address to be programmed.
  * @param  DataAddress specifies the address where the data are stored.
  * @retval None
  */
static void FLASH_Program_Fast(uint32_t Address, uint32_t DataAddress)
{
 800d388:	b480      	push	{r7}
 800d38a:	b089      	sub	sp, #36	@ 0x24
 800d38c:	af00      	add	r7, sp, #0
 800d38e:	6078      	str	r0, [r7, #4]
 800d390:	6039      	str	r1, [r7, #0]
  uint32_t primask_bit;
  uint8_t row_index = (2*FLASH_NB_DOUBLE_WORDS_IN_ROW);
 800d392:	2340      	movs	r3, #64	@ 0x40
 800d394:	77fb      	strb	r3, [r7, #31]
  __IO uint32_t *dest_addr = (__IO uint32_t*)Address;
 800d396:	687b      	ldr	r3, [r7, #4]
 800d398:	61bb      	str	r3, [r7, #24]
  __IO uint32_t *src_addr = (__IO uint32_t*)DataAddress;
 800d39a:	683b      	ldr	r3, [r7, #0]
 800d39c:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_FLASH_MAIN_MEM_ADDRESS(Address));

  /* Set FSTPG bit */
  SET_BIT(FLASH->CR, FLASH_CR_FSTPG);
 800d39e:	4b14      	ldr	r3, [pc, #80]	@ (800d3f0 <FLASH_Program_Fast+0x68>)
 800d3a0:	695b      	ldr	r3, [r3, #20]
 800d3a2:	4a13      	ldr	r2, [pc, #76]	@ (800d3f0 <FLASH_Program_Fast+0x68>)
 800d3a4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800d3a8:	6153      	str	r3, [r2, #20]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800d3aa:	f3ef 8310 	mrs	r3, PRIMASK
 800d3ae:	60fb      	str	r3, [r7, #12]
  return(result);
 800d3b0:	68fb      	ldr	r3, [r7, #12]

  /* Disable interrupts to avoid any interruption during the loop */
  primask_bit = __get_PRIMASK();
 800d3b2:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 800d3b4:	b672      	cpsid	i
}
 800d3b6:	bf00      	nop
  __disable_irq();

  /* Program the double word of the row */
  do
  {
    *dest_addr = *src_addr;
 800d3b8:	697b      	ldr	r3, [r7, #20]
 800d3ba:	681a      	ldr	r2, [r3, #0]
 800d3bc:	69bb      	ldr	r3, [r7, #24]
 800d3be:	601a      	str	r2, [r3, #0]
    dest_addr++;
 800d3c0:	69bb      	ldr	r3, [r7, #24]
 800d3c2:	3304      	adds	r3, #4
 800d3c4:	61bb      	str	r3, [r7, #24]
    src_addr++;
 800d3c6:	697b      	ldr	r3, [r7, #20]
 800d3c8:	3304      	adds	r3, #4
 800d3ca:	617b      	str	r3, [r7, #20]
    row_index--;
 800d3cc:	7ffb      	ldrb	r3, [r7, #31]
 800d3ce:	3b01      	subs	r3, #1
 800d3d0:	77fb      	strb	r3, [r7, #31]
  } while (row_index != 0U);
 800d3d2:	7ffb      	ldrb	r3, [r7, #31]
 800d3d4:	2b00      	cmp	r3, #0
 800d3d6:	d1ef      	bne.n	800d3b8 <FLASH_Program_Fast+0x30>
 800d3d8:	693b      	ldr	r3, [r7, #16]
 800d3da:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800d3dc:	68bb      	ldr	r3, [r7, #8]
 800d3de:	f383 8810 	msr	PRIMASK, r3
}
 800d3e2:	bf00      	nop

  /* Re-enable the interrupts */
  __set_PRIMASK(primask_bit);
}
 800d3e4:	bf00      	nop
 800d3e6:	3724      	adds	r7, #36	@ 0x24
 800d3e8:	46bd      	mov	sp, r7
 800d3ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3ee:	4770      	bx	lr
 800d3f0:	40022000 	.word	0x40022000

0800d3f4 <HAL_FLASHEx_Erase>:
  *         the pages have been correctly erased)
  *
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *PageError)
{
 800d3f4:	b580      	push	{r7, lr}
 800d3f6:	b084      	sub	sp, #16
 800d3f8:	af00      	add	r7, sp, #0
 800d3fa:	6078      	str	r0, [r7, #4]
 800d3fc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t page_index;

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 800d3fe:	4b49      	ldr	r3, [pc, #292]	@ (800d524 <HAL_FLASHEx_Erase+0x130>)
 800d400:	781b      	ldrb	r3, [r3, #0]
 800d402:	2b01      	cmp	r3, #1
 800d404:	d101      	bne.n	800d40a <HAL_FLASHEx_Erase+0x16>
 800d406:	2302      	movs	r3, #2
 800d408:	e087      	b.n	800d51a <HAL_FLASHEx_Erase+0x126>
 800d40a:	4b46      	ldr	r3, [pc, #280]	@ (800d524 <HAL_FLASHEx_Erase+0x130>)
 800d40c:	2201      	movs	r2, #1
 800d40e:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800d410:	f24c 3050 	movw	r0, #50000	@ 0xc350
 800d414:	f7ff ff3c 	bl	800d290 <FLASH_WaitForLastOperation>
 800d418:	4603      	mov	r3, r0
 800d41a:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 800d41c:	7bfb      	ldrb	r3, [r7, #15]
 800d41e:	2b00      	cmp	r3, #0
 800d420:	d177      	bne.n	800d512 <HAL_FLASHEx_Erase+0x11e>
  {
    pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 800d422:	4b40      	ldr	r3, [pc, #256]	@ (800d524 <HAL_FLASHEx_Erase+0x130>)
 800d424:	2200      	movs	r2, #0
 800d426:	605a      	str	r2, [r3, #4]

    /* Deactivate the cache if they are activated to avoid data misbehavior */
    if(READ_BIT(FLASH->ACR, FLASH_ACR_ICEN) != 0U)
 800d428:	4b3f      	ldr	r3, [pc, #252]	@ (800d528 <HAL_FLASHEx_Erase+0x134>)
 800d42a:	681b      	ldr	r3, [r3, #0]
 800d42c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800d430:	2b00      	cmp	r3, #0
 800d432:	d013      	beq.n	800d45c <HAL_FLASHEx_Erase+0x68>
    {
      if(READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != 0U)
 800d434:	4b3c      	ldr	r3, [pc, #240]	@ (800d528 <HAL_FLASHEx_Erase+0x134>)
 800d436:	681b      	ldr	r3, [r3, #0]
 800d438:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800d43c:	2b00      	cmp	r3, #0
 800d43e:	d009      	beq.n	800d454 <HAL_FLASHEx_Erase+0x60>
      {
        /* Disable data cache  */
        __HAL_FLASH_DATA_CACHE_DISABLE();
 800d440:	4b39      	ldr	r3, [pc, #228]	@ (800d528 <HAL_FLASHEx_Erase+0x134>)
 800d442:	681b      	ldr	r3, [r3, #0]
 800d444:	4a38      	ldr	r2, [pc, #224]	@ (800d528 <HAL_FLASHEx_Erase+0x134>)
 800d446:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800d44a:	6013      	str	r3, [r2, #0]
        pFlash.CacheToReactivate = FLASH_CACHE_ICACHE_DCACHE_ENABLED;
 800d44c:	4b35      	ldr	r3, [pc, #212]	@ (800d524 <HAL_FLASHEx_Erase+0x130>)
 800d44e:	2203      	movs	r2, #3
 800d450:	771a      	strb	r2, [r3, #28]
 800d452:	e016      	b.n	800d482 <HAL_FLASHEx_Erase+0x8e>
      }
      else
      {
        pFlash.CacheToReactivate = FLASH_CACHE_ICACHE_ENABLED;
 800d454:	4b33      	ldr	r3, [pc, #204]	@ (800d524 <HAL_FLASHEx_Erase+0x130>)
 800d456:	2201      	movs	r2, #1
 800d458:	771a      	strb	r2, [r3, #28]
 800d45a:	e012      	b.n	800d482 <HAL_FLASHEx_Erase+0x8e>
      }
    }
    else if(READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != 0U)
 800d45c:	4b32      	ldr	r3, [pc, #200]	@ (800d528 <HAL_FLASHEx_Erase+0x134>)
 800d45e:	681b      	ldr	r3, [r3, #0]
 800d460:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800d464:	2b00      	cmp	r3, #0
 800d466:	d009      	beq.n	800d47c <HAL_FLASHEx_Erase+0x88>
    {
      /* Disable data cache  */
      __HAL_FLASH_DATA_CACHE_DISABLE();
 800d468:	4b2f      	ldr	r3, [pc, #188]	@ (800d528 <HAL_FLASHEx_Erase+0x134>)
 800d46a:	681b      	ldr	r3, [r3, #0]
 800d46c:	4a2e      	ldr	r2, [pc, #184]	@ (800d528 <HAL_FLASHEx_Erase+0x134>)
 800d46e:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800d472:	6013      	str	r3, [r2, #0]
      pFlash.CacheToReactivate = FLASH_CACHE_DCACHE_ENABLED;
 800d474:	4b2b      	ldr	r3, [pc, #172]	@ (800d524 <HAL_FLASHEx_Erase+0x130>)
 800d476:	2202      	movs	r2, #2
 800d478:	771a      	strb	r2, [r3, #28]
 800d47a:	e002      	b.n	800d482 <HAL_FLASHEx_Erase+0x8e>
    }
    else
    {
      pFlash.CacheToReactivate = FLASH_CACHE_DISABLED;
 800d47c:	4b29      	ldr	r3, [pc, #164]	@ (800d524 <HAL_FLASHEx_Erase+0x130>)
 800d47e:	2200      	movs	r2, #0
 800d480:	771a      	strb	r2, [r3, #28]
    }

    if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 800d482:	687b      	ldr	r3, [r7, #4]
 800d484:	681b      	ldr	r3, [r3, #0]
 800d486:	2b01      	cmp	r3, #1
 800d488:	d113      	bne.n	800d4b2 <HAL_FLASHEx_Erase+0xbe>
    {
      /* Mass erase to be done */
      FLASH_MassErase(pEraseInit->Banks);
 800d48a:	687b      	ldr	r3, [r7, #4]
 800d48c:	685b      	ldr	r3, [r3, #4]
 800d48e:	4618      	mov	r0, r3
 800d490:	f000 f908 	bl	800d6a4 <FLASH_MassErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800d494:	f24c 3050 	movw	r0, #50000	@ 0xc350
 800d498:	f7ff fefa 	bl	800d290 <FLASH_WaitForLastOperation>
 800d49c:	4603      	mov	r3, r0
 800d49e:	73fb      	strb	r3, [r7, #15]
#if defined (STM32L471xx) || defined (STM32L475xx) || defined (STM32L476xx) || defined (STM32L485xx) || defined (STM32L486xx) || \
    defined (STM32L496xx) || defined (STM32L4A6xx) || \
    defined (STM32L4P5xx) || defined (STM32L4Q5xx) || \
    defined (STM32L4R5xx) || defined (STM32L4R7xx) || defined (STM32L4R9xx) || defined (STM32L4S5xx) || defined (STM32L4S7xx) || defined (STM32L4S9xx)
      /* If the erase operation is completed, disable the MER1 and MER2 Bits */
      CLEAR_BIT(FLASH->CR, (FLASH_CR_MER1 | FLASH_CR_MER2));
 800d4a0:	4b21      	ldr	r3, [pc, #132]	@ (800d528 <HAL_FLASHEx_Erase+0x134>)
 800d4a2:	695b      	ldr	r3, [r3, #20]
 800d4a4:	4a20      	ldr	r2, [pc, #128]	@ (800d528 <HAL_FLASHEx_Erase+0x134>)
 800d4a6:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800d4aa:	f023 0304 	bic.w	r3, r3, #4
 800d4ae:	6153      	str	r3, [r2, #20]
 800d4b0:	e02d      	b.n	800d50e <HAL_FLASHEx_Erase+0x11a>
#endif
    }
    else
    {
      /*Initialization of PageError variable*/
      *PageError = 0xFFFFFFFFU;
 800d4b2:	683b      	ldr	r3, [r7, #0]
 800d4b4:	f04f 32ff 	mov.w	r2, #4294967295
 800d4b8:	601a      	str	r2, [r3, #0]

      for(page_index = pEraseInit->Page; page_index < (pEraseInit->Page + pEraseInit->NbPages); page_index++)
 800d4ba:	687b      	ldr	r3, [r7, #4]
 800d4bc:	689b      	ldr	r3, [r3, #8]
 800d4be:	60bb      	str	r3, [r7, #8]
 800d4c0:	e01d      	b.n	800d4fe <HAL_FLASHEx_Erase+0x10a>
      {
        FLASH_PageErase(page_index, pEraseInit->Banks);
 800d4c2:	687b      	ldr	r3, [r7, #4]
 800d4c4:	685b      	ldr	r3, [r3, #4]
 800d4c6:	4619      	mov	r1, r3
 800d4c8:	68b8      	ldr	r0, [r7, #8]
 800d4ca:	f000 f913 	bl	800d6f4 <FLASH_PageErase>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800d4ce:	f24c 3050 	movw	r0, #50000	@ 0xc350
 800d4d2:	f7ff fedd 	bl	800d290 <FLASH_WaitForLastOperation>
 800d4d6:	4603      	mov	r3, r0
 800d4d8:	73fb      	strb	r3, [r7, #15]

        /* If the erase operation is completed, disable the PER Bit */
        CLEAR_BIT(FLASH->CR, (FLASH_CR_PER | FLASH_CR_PNB));
 800d4da:	4b13      	ldr	r3, [pc, #76]	@ (800d528 <HAL_FLASHEx_Erase+0x134>)
 800d4dc:	695b      	ldr	r3, [r3, #20]
 800d4de:	4a12      	ldr	r2, [pc, #72]	@ (800d528 <HAL_FLASHEx_Erase+0x134>)
 800d4e0:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 800d4e4:	f023 0302 	bic.w	r3, r3, #2
 800d4e8:	6153      	str	r3, [r2, #20]

        if (status != HAL_OK)
 800d4ea:	7bfb      	ldrb	r3, [r7, #15]
 800d4ec:	2b00      	cmp	r3, #0
 800d4ee:	d003      	beq.n	800d4f8 <HAL_FLASHEx_Erase+0x104>
        {
          /* In case of error, stop erase procedure and return the faulty address */
          *PageError = page_index;
 800d4f0:	683b      	ldr	r3, [r7, #0]
 800d4f2:	68ba      	ldr	r2, [r7, #8]
 800d4f4:	601a      	str	r2, [r3, #0]
          break;
 800d4f6:	e00a      	b.n	800d50e <HAL_FLASHEx_Erase+0x11a>
      for(page_index = pEraseInit->Page; page_index < (pEraseInit->Page + pEraseInit->NbPages); page_index++)
 800d4f8:	68bb      	ldr	r3, [r7, #8]
 800d4fa:	3301      	adds	r3, #1
 800d4fc:	60bb      	str	r3, [r7, #8]
 800d4fe:	687b      	ldr	r3, [r7, #4]
 800d500:	689a      	ldr	r2, [r3, #8]
 800d502:	687b      	ldr	r3, [r7, #4]
 800d504:	68db      	ldr	r3, [r3, #12]
 800d506:	4413      	add	r3, r2
 800d508:	68ba      	ldr	r2, [r7, #8]
 800d50a:	429a      	cmp	r2, r3
 800d50c:	d3d9      	bcc.n	800d4c2 <HAL_FLASHEx_Erase+0xce>
        }
      }
    }

    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();
 800d50e:	f000 f927 	bl	800d760 <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 800d512:	4b04      	ldr	r3, [pc, #16]	@ (800d524 <HAL_FLASHEx_Erase+0x130>)
 800d514:	2200      	movs	r2, #0
 800d516:	701a      	strb	r2, [r3, #0]

  return status;
 800d518:	7bfb      	ldrb	r3, [r7, #15]
}
 800d51a:	4618      	mov	r0, r3
 800d51c:	3710      	adds	r7, #16
 800d51e:	46bd      	mov	sp, r7
 800d520:	bd80      	pop	{r7, pc}
 800d522:	bf00      	nop
 800d524:	2000027c 	.word	0x2000027c
 800d528:	40022000 	.word	0x40022000

0800d52c <HAL_FLASHEx_OBProgram>:
  *         contains the configuration information for the programming.
  *
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_OBProgram(FLASH_OBProgramInitTypeDef *pOBInit)
{
 800d52c:	b580      	push	{r7, lr}
 800d52e:	b084      	sub	sp, #16
 800d530:	af00      	add	r7, sp, #0
 800d532:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800d534:	2300      	movs	r3, #0
 800d536:	73fb      	strb	r3, [r7, #15]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 800d538:	4b32      	ldr	r3, [pc, #200]	@ (800d604 <HAL_FLASHEx_OBProgram+0xd8>)
 800d53a:	781b      	ldrb	r3, [r3, #0]
 800d53c:	2b01      	cmp	r3, #1
 800d53e:	d101      	bne.n	800d544 <HAL_FLASHEx_OBProgram+0x18>
 800d540:	2302      	movs	r3, #2
 800d542:	e05a      	b.n	800d5fa <HAL_FLASHEx_OBProgram+0xce>
 800d544:	4b2f      	ldr	r3, [pc, #188]	@ (800d604 <HAL_FLASHEx_OBProgram+0xd8>)
 800d546:	2201      	movs	r2, #1
 800d548:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_OPTIONBYTE(pOBInit->OptionType));

  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 800d54a:	4b2e      	ldr	r3, [pc, #184]	@ (800d604 <HAL_FLASHEx_OBProgram+0xd8>)
 800d54c:	2200      	movs	r2, #0
 800d54e:	605a      	str	r2, [r3, #4]

  /* Write protection configuration */
  if((pOBInit->OptionType & OPTIONBYTE_WRP) != 0U)
 800d550:	687b      	ldr	r3, [r7, #4]
 800d552:	681b      	ldr	r3, [r3, #0]
 800d554:	f003 0301 	and.w	r3, r3, #1
 800d558:	2b00      	cmp	r3, #0
 800d55a:	d00d      	beq.n	800d578 <HAL_FLASHEx_OBProgram+0x4c>
  {
    /* Configure of Write protection on the selected area */
    if(FLASH_OB_WRPConfig(pOBInit->WRPArea, pOBInit->WRPStartOffset, pOBInit->WRPEndOffset) != HAL_OK)
 800d55c:	687b      	ldr	r3, [r7, #4]
 800d55e:	6858      	ldr	r0, [r3, #4]
 800d560:	687b      	ldr	r3, [r7, #4]
 800d562:	6899      	ldr	r1, [r3, #8]
 800d564:	687b      	ldr	r3, [r7, #4]
 800d566:	68db      	ldr	r3, [r3, #12]
 800d568:	461a      	mov	r2, r3
 800d56a:	f000 f943 	bl	800d7f4 <FLASH_OB_WRPConfig>
 800d56e:	4603      	mov	r3, r0
 800d570:	2b00      	cmp	r3, #0
 800d572:	d001      	beq.n	800d578 <HAL_FLASHEx_OBProgram+0x4c>
    {
      status = HAL_ERROR;
 800d574:	2301      	movs	r3, #1
 800d576:	73fb      	strb	r3, [r7, #15]
    }

  }

  /* Read protection configuration */
  if((pOBInit->OptionType & OPTIONBYTE_RDP) != 0U)
 800d578:	687b      	ldr	r3, [r7, #4]
 800d57a:	681b      	ldr	r3, [r3, #0]
 800d57c:	f003 0302 	and.w	r3, r3, #2
 800d580:	2b00      	cmp	r3, #0
 800d582:	d009      	beq.n	800d598 <HAL_FLASHEx_OBProgram+0x6c>
  {
    /* Configure the Read protection level */
    if(FLASH_OB_RDPConfig(pOBInit->RDPLevel) != HAL_OK)
 800d584:	687b      	ldr	r3, [r7, #4]
 800d586:	691b      	ldr	r3, [r3, #16]
 800d588:	4618      	mov	r0, r3
 800d58a:	f000 f997 	bl	800d8bc <FLASH_OB_RDPConfig>
 800d58e:	4603      	mov	r3, r0
 800d590:	2b00      	cmp	r3, #0
 800d592:	d001      	beq.n	800d598 <HAL_FLASHEx_OBProgram+0x6c>
    {
      status = HAL_ERROR;
 800d594:	2301      	movs	r3, #1
 800d596:	73fb      	strb	r3, [r7, #15]
    }
  }

  /* User Configuration */
  if((pOBInit->OptionType & OPTIONBYTE_USER) != 0U)
 800d598:	687b      	ldr	r3, [r7, #4]
 800d59a:	681b      	ldr	r3, [r3, #0]
 800d59c:	f003 0304 	and.w	r3, r3, #4
 800d5a0:	2b00      	cmp	r3, #0
 800d5a2:	d00c      	beq.n	800d5be <HAL_FLASHEx_OBProgram+0x92>
  {
    /* Configure the user option bytes */
    if(FLASH_OB_UserConfig(pOBInit->USERType, pOBInit->USERConfig) != HAL_OK)
 800d5a4:	687b      	ldr	r3, [r7, #4]
 800d5a6:	695a      	ldr	r2, [r3, #20]
 800d5a8:	687b      	ldr	r3, [r7, #4]
 800d5aa:	699b      	ldr	r3, [r3, #24]
 800d5ac:	4619      	mov	r1, r3
 800d5ae:	4610      	mov	r0, r2
 800d5b0:	f000 f9b2 	bl	800d918 <FLASH_OB_UserConfig>
 800d5b4:	4603      	mov	r3, r0
 800d5b6:	2b00      	cmp	r3, #0
 800d5b8:	d001      	beq.n	800d5be <HAL_FLASHEx_OBProgram+0x92>
    {
      status = HAL_ERROR;
 800d5ba:	2301      	movs	r3, #1
 800d5bc:	73fb      	strb	r3, [r7, #15]
    }
  }

  /* PCROP Configuration */
  if((pOBInit->OptionType & OPTIONBYTE_PCROP) != 0U)
 800d5be:	687b      	ldr	r3, [r7, #4]
 800d5c0:	681b      	ldr	r3, [r3, #0]
 800d5c2:	f003 0308 	and.w	r3, r3, #8
 800d5c6:	2b00      	cmp	r3, #0
 800d5c8:	d013      	beq.n	800d5f2 <HAL_FLASHEx_OBProgram+0xc6>
  {
    if (pOBInit->PCROPStartAddr != pOBInit->PCROPEndAddr)
 800d5ca:	687b      	ldr	r3, [r7, #4]
 800d5cc:	6a1a      	ldr	r2, [r3, #32]
 800d5ce:	687b      	ldr	r3, [r7, #4]
 800d5d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d5d2:	429a      	cmp	r2, r3
 800d5d4:	d00d      	beq.n	800d5f2 <HAL_FLASHEx_OBProgram+0xc6>
    {
      /* Configure the Proprietary code readout protection */
      if(FLASH_OB_PCROPConfig(pOBInit->PCROPConfig, pOBInit->PCROPStartAddr, pOBInit->PCROPEndAddr) != HAL_OK)
 800d5d6:	687b      	ldr	r3, [r7, #4]
 800d5d8:	69d8      	ldr	r0, [r3, #28]
 800d5da:	687b      	ldr	r3, [r7, #4]
 800d5dc:	6a19      	ldr	r1, [r3, #32]
 800d5de:	687b      	ldr	r3, [r7, #4]
 800d5e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d5e2:	461a      	mov	r2, r3
 800d5e4:	f000 fa90 	bl	800db08 <FLASH_OB_PCROPConfig>
 800d5e8:	4603      	mov	r3, r0
 800d5ea:	2b00      	cmp	r3, #0
 800d5ec:	d001      	beq.n	800d5f2 <HAL_FLASHEx_OBProgram+0xc6>
      {
        status = HAL_ERROR;
 800d5ee:	2301      	movs	r3, #1
 800d5f0:	73fb      	strb	r3, [r7, #15]
      }
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 800d5f2:	4b04      	ldr	r3, [pc, #16]	@ (800d604 <HAL_FLASHEx_OBProgram+0xd8>)
 800d5f4:	2200      	movs	r2, #0
 800d5f6:	701a      	strb	r2, [r3, #0]

  return status;
 800d5f8:	7bfb      	ldrb	r3, [r7, #15]
}
 800d5fa:	4618      	mov	r0, r3
 800d5fc:	3710      	adds	r7, #16
 800d5fe:	46bd      	mov	sp, r7
 800d600:	bd80      	pop	{r7, pc}
 800d602:	bf00      	nop
 800d604:	2000027c 	.word	0x2000027c

0800d608 <HAL_FLASHEx_OBGetConfig>:
  *         which area is requested for the WRP and PCROP, else no information will be returned
  *
  * @retval None
  */
void HAL_FLASHEx_OBGetConfig(FLASH_OBProgramInitTypeDef *pOBInit)
{
 800d608:	b580      	push	{r7, lr}
 800d60a:	b082      	sub	sp, #8
 800d60c:	af00      	add	r7, sp, #0
 800d60e:	6078      	str	r0, [r7, #4]
  pOBInit->OptionType = (OPTIONBYTE_RDP | OPTIONBYTE_USER);
 800d610:	687b      	ldr	r3, [r7, #4]
 800d612:	2206      	movs	r2, #6
 800d614:	601a      	str	r2, [r3, #0]

#if defined (STM32L471xx) || defined (STM32L475xx) || defined (STM32L476xx) || defined (STM32L485xx) || defined (STM32L486xx) || \
    defined (STM32L496xx) || defined (STM32L4A6xx) || \
    defined (STM32L4P5xx) || defined (STM32L4Q5xx) || \
    defined (STM32L4R5xx) || defined (STM32L4R7xx) || defined (STM32L4R9xx) || defined (STM32L4S5xx) || defined (STM32L4S7xx) || defined (STM32L4S9xx)
  if((pOBInit->WRPArea == OB_WRPAREA_BANK1_AREAA) || (pOBInit->WRPArea == OB_WRPAREA_BANK1_AREAB) ||
 800d616:	687b      	ldr	r3, [r7, #4]
 800d618:	685b      	ldr	r3, [r3, #4]
 800d61a:	2b00      	cmp	r3, #0
 800d61c:	d00b      	beq.n	800d636 <HAL_FLASHEx_OBGetConfig+0x2e>
 800d61e:	687b      	ldr	r3, [r7, #4]
 800d620:	685b      	ldr	r3, [r3, #4]
 800d622:	2b01      	cmp	r3, #1
 800d624:	d007      	beq.n	800d636 <HAL_FLASHEx_OBGetConfig+0x2e>
     (pOBInit->WRPArea == OB_WRPAREA_BANK2_AREAA) || (pOBInit->WRPArea == OB_WRPAREA_BANK2_AREAB))
 800d626:	687b      	ldr	r3, [r7, #4]
 800d628:	685b      	ldr	r3, [r3, #4]
  if((pOBInit->WRPArea == OB_WRPAREA_BANK1_AREAA) || (pOBInit->WRPArea == OB_WRPAREA_BANK1_AREAB) ||
 800d62a:	2b02      	cmp	r3, #2
 800d62c:	d003      	beq.n	800d636 <HAL_FLASHEx_OBGetConfig+0x2e>
     (pOBInit->WRPArea == OB_WRPAREA_BANK2_AREAA) || (pOBInit->WRPArea == OB_WRPAREA_BANK2_AREAB))
 800d62e:	687b      	ldr	r3, [r7, #4]
 800d630:	685b      	ldr	r3, [r3, #4]
 800d632:	2b04      	cmp	r3, #4
 800d634:	d10f      	bne.n	800d656 <HAL_FLASHEx_OBGetConfig+0x4e>
#else
  if((pOBInit->WRPArea == OB_WRPAREA_BANK1_AREAA) || (pOBInit->WRPArea == OB_WRPAREA_BANK1_AREAB))
#endif
  {
    pOBInit->OptionType |= OPTIONBYTE_WRP;
 800d636:	687b      	ldr	r3, [r7, #4]
 800d638:	681b      	ldr	r3, [r3, #0]
 800d63a:	f043 0201 	orr.w	r2, r3, #1
 800d63e:	687b      	ldr	r3, [r7, #4]
 800d640:	601a      	str	r2, [r3, #0]
    /* Get write protection on the selected area */
    FLASH_OB_GetWRP(pOBInit->WRPArea, &(pOBInit->WRPStartOffset), &(pOBInit->WRPEndOffset));
 800d642:	687b      	ldr	r3, [r7, #4]
 800d644:	6858      	ldr	r0, [r3, #4]
 800d646:	687b      	ldr	r3, [r7, #4]
 800d648:	f103 0108 	add.w	r1, r3, #8
 800d64c:	687b      	ldr	r3, [r7, #4]
 800d64e:	330c      	adds	r3, #12
 800d650:	461a      	mov	r2, r3
 800d652:	f000 fb05 	bl	800dc60 <FLASH_OB_GetWRP>
  }

  /* Get Read protection level */
  pOBInit->RDPLevel = FLASH_OB_GetRDP();
 800d656:	f000 fb4d 	bl	800dcf4 <FLASH_OB_GetRDP>
 800d65a:	4602      	mov	r2, r0
 800d65c:	687b      	ldr	r3, [r7, #4]
 800d65e:	611a      	str	r2, [r3, #16]

  /* Get the user option bytes */
  pOBInit->USERConfig = FLASH_OB_GetUser();
 800d660:	f000 fb62 	bl	800dd28 <FLASH_OB_GetUser>
 800d664:	4602      	mov	r2, r0
 800d666:	687b      	ldr	r3, [r7, #4]
 800d668:	619a      	str	r2, [r3, #24]

#if defined (STM32L471xx) || defined (STM32L475xx) || defined (STM32L476xx) || defined (STM32L485xx) || defined (STM32L486xx) || \
    defined (STM32L496xx) || defined (STM32L4A6xx) || \
    defined (STM32L4P5xx) || defined (STM32L4Q5xx) || \
    defined (STM32L4R5xx) || defined (STM32L4R7xx) || defined (STM32L4R9xx) || defined (STM32L4S5xx) || defined (STM32L4S7xx) || defined (STM32L4S9xx)
  if((pOBInit->PCROPConfig == FLASH_BANK_1) || (pOBInit->PCROPConfig == FLASH_BANK_2))
 800d66a:	687b      	ldr	r3, [r7, #4]
 800d66c:	69db      	ldr	r3, [r3, #28]
 800d66e:	2b01      	cmp	r3, #1
 800d670:	d003      	beq.n	800d67a <HAL_FLASHEx_OBGetConfig+0x72>
 800d672:	687b      	ldr	r3, [r7, #4]
 800d674:	69db      	ldr	r3, [r3, #28]
 800d676:	2b02      	cmp	r3, #2
 800d678:	d110      	bne.n	800d69c <HAL_FLASHEx_OBGetConfig+0x94>
#else
  if(pOBInit->PCROPConfig == FLASH_BANK_1)
#endif
  {
    pOBInit->OptionType |= OPTIONBYTE_PCROP;
 800d67a:	687b      	ldr	r3, [r7, #4]
 800d67c:	681b      	ldr	r3, [r3, #0]
 800d67e:	f043 0208 	orr.w	r2, r3, #8
 800d682:	687b      	ldr	r3, [r7, #4]
 800d684:	601a      	str	r2, [r3, #0]
    /* Get the Proprietary code readout protection */
    FLASH_OB_GetPCROP(&(pOBInit->PCROPConfig), &(pOBInit->PCROPStartAddr), &(pOBInit->PCROPEndAddr));
 800d686:	687b      	ldr	r3, [r7, #4]
 800d688:	f103 001c 	add.w	r0, r3, #28
 800d68c:	687b      	ldr	r3, [r7, #4]
 800d68e:	f103 0120 	add.w	r1, r3, #32
 800d692:	687b      	ldr	r3, [r7, #4]
 800d694:	3324      	adds	r3, #36	@ 0x24
 800d696:	461a      	mov	r2, r3
 800d698:	f000 fb5a 	bl	800dd50 <FLASH_OB_GetPCROP>
  }
}
 800d69c:	bf00      	nop
 800d69e:	3708      	adds	r7, #8
 800d6a0:	46bd      	mov	sp, r7
 800d6a2:	bd80      	pop	{r7, pc}

0800d6a4 <FLASH_MassErase>:
  *            @arg FLASH_BANK_2: Bank2 to be erased
  *            @arg FLASH_BANK_BOTH: Bank1 and Bank2 to be erased
  * @retval None
  */
static void FLASH_MassErase(uint32_t Banks)
{
 800d6a4:	b480      	push	{r7}
 800d6a6:	b083      	sub	sp, #12
 800d6a8:	af00      	add	r7, sp, #0
 800d6aa:	6078      	str	r0, [r7, #4]
  {
    /* Check the parameters */
    assert_param(IS_FLASH_BANK(Banks));

    /* Set the Mass Erase Bit for the bank 1 if requested */
    if((Banks & FLASH_BANK_1) != 0U)
 800d6ac:	687b      	ldr	r3, [r7, #4]
 800d6ae:	f003 0301 	and.w	r3, r3, #1
 800d6b2:	2b00      	cmp	r3, #0
 800d6b4:	d005      	beq.n	800d6c2 <FLASH_MassErase+0x1e>
    {
      SET_BIT(FLASH->CR, FLASH_CR_MER1);
 800d6b6:	4b0e      	ldr	r3, [pc, #56]	@ (800d6f0 <FLASH_MassErase+0x4c>)
 800d6b8:	695b      	ldr	r3, [r3, #20]
 800d6ba:	4a0d      	ldr	r2, [pc, #52]	@ (800d6f0 <FLASH_MassErase+0x4c>)
 800d6bc:	f043 0304 	orr.w	r3, r3, #4
 800d6c0:	6153      	str	r3, [r2, #20]
#if defined (STM32L471xx) || defined (STM32L475xx) || defined (STM32L476xx) || defined (STM32L485xx) || defined (STM32L486xx) || \
    defined (STM32L496xx) || defined (STM32L4A6xx) || \
    defined (STM32L4P5xx) || defined (STM32L4Q5xx) || \
    defined (STM32L4R5xx) || defined (STM32L4R7xx) || defined (STM32L4R9xx) || defined (STM32L4S5xx) || defined (STM32L4S7xx) || defined (STM32L4S9xx)
    /* Set the Mass Erase Bit for the bank 2 if requested */
    if((Banks & FLASH_BANK_2) != 0U)
 800d6c2:	687b      	ldr	r3, [r7, #4]
 800d6c4:	f003 0302 	and.w	r3, r3, #2
 800d6c8:	2b00      	cmp	r3, #0
 800d6ca:	d005      	beq.n	800d6d8 <FLASH_MassErase+0x34>
    {
      SET_BIT(FLASH->CR, FLASH_CR_MER2);
 800d6cc:	4b08      	ldr	r3, [pc, #32]	@ (800d6f0 <FLASH_MassErase+0x4c>)
 800d6ce:	695b      	ldr	r3, [r3, #20]
 800d6d0:	4a07      	ldr	r2, [pc, #28]	@ (800d6f0 <FLASH_MassErase+0x4c>)
 800d6d2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800d6d6:	6153      	str	r3, [r2, #20]
    SET_BIT(FLASH->CR, (FLASH_CR_MER1 | FLASH_CR_MER2));
  }
#endif

  /* Proceed to erase all sectors */
  SET_BIT(FLASH->CR, FLASH_CR_STRT);
 800d6d8:	4b05      	ldr	r3, [pc, #20]	@ (800d6f0 <FLASH_MassErase+0x4c>)
 800d6da:	695b      	ldr	r3, [r3, #20]
 800d6dc:	4a04      	ldr	r2, [pc, #16]	@ (800d6f0 <FLASH_MassErase+0x4c>)
 800d6de:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800d6e2:	6153      	str	r3, [r2, #20]
}
 800d6e4:	bf00      	nop
 800d6e6:	370c      	adds	r7, #12
 800d6e8:	46bd      	mov	sp, r7
 800d6ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6ee:	4770      	bx	lr
 800d6f0:	40022000 	.word	0x40022000

0800d6f4 <FLASH_PageErase>:
  *            @arg FLASH_BANK_1: Page in bank 1 to be erased
  *            @arg FLASH_BANK_2: Page in bank 2 to be erased
  * @retval None
  */
void FLASH_PageErase(uint32_t Page, uint32_t Banks)
{
 800d6f4:	b480      	push	{r7}
 800d6f6:	b083      	sub	sp, #12
 800d6f8:	af00      	add	r7, sp, #0
 800d6fa:	6078      	str	r0, [r7, #4]
 800d6fc:	6039      	str	r1, [r7, #0]
  else
#endif
  {
    assert_param(IS_FLASH_BANK_EXCLUSIVE(Banks));

    if((Banks & FLASH_BANK_1) != 0U)
 800d6fe:	683b      	ldr	r3, [r7, #0]
 800d700:	f003 0301 	and.w	r3, r3, #1
 800d704:	2b00      	cmp	r3, #0
 800d706:	d006      	beq.n	800d716 <FLASH_PageErase+0x22>
    {
      CLEAR_BIT(FLASH->CR, FLASH_CR_BKER);
 800d708:	4b14      	ldr	r3, [pc, #80]	@ (800d75c <FLASH_PageErase+0x68>)
 800d70a:	695b      	ldr	r3, [r3, #20]
 800d70c:	4a13      	ldr	r2, [pc, #76]	@ (800d75c <FLASH_PageErase+0x68>)
 800d70e:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800d712:	6153      	str	r3, [r2, #20]
 800d714:	e005      	b.n	800d722 <FLASH_PageErase+0x2e>
    }
    else
    {
      SET_BIT(FLASH->CR, FLASH_CR_BKER);
 800d716:	4b11      	ldr	r3, [pc, #68]	@ (800d75c <FLASH_PageErase+0x68>)
 800d718:	695b      	ldr	r3, [r3, #20]
 800d71a:	4a10      	ldr	r2, [pc, #64]	@ (800d75c <FLASH_PageErase+0x68>)
 800d71c:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 800d720:	6153      	str	r3, [r2, #20]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Banks);
#endif

  /* Proceed to erase the page */
  MODIFY_REG(FLASH->CR, FLASH_CR_PNB, ((Page & 0xFFU) << FLASH_CR_PNB_Pos));
 800d722:	4b0e      	ldr	r3, [pc, #56]	@ (800d75c <FLASH_PageErase+0x68>)
 800d724:	695b      	ldr	r3, [r3, #20]
 800d726:	f423 62ff 	bic.w	r2, r3, #2040	@ 0x7f8
 800d72a:	687b      	ldr	r3, [r7, #4]
 800d72c:	00db      	lsls	r3, r3, #3
 800d72e:	f403 63ff 	and.w	r3, r3, #2040	@ 0x7f8
 800d732:	490a      	ldr	r1, [pc, #40]	@ (800d75c <FLASH_PageErase+0x68>)
 800d734:	4313      	orrs	r3, r2
 800d736:	614b      	str	r3, [r1, #20]
  SET_BIT(FLASH->CR, FLASH_CR_PER);
 800d738:	4b08      	ldr	r3, [pc, #32]	@ (800d75c <FLASH_PageErase+0x68>)
 800d73a:	695b      	ldr	r3, [r3, #20]
 800d73c:	4a07      	ldr	r2, [pc, #28]	@ (800d75c <FLASH_PageErase+0x68>)
 800d73e:	f043 0302 	orr.w	r3, r3, #2
 800d742:	6153      	str	r3, [r2, #20]
  SET_BIT(FLASH->CR, FLASH_CR_STRT);
 800d744:	4b05      	ldr	r3, [pc, #20]	@ (800d75c <FLASH_PageErase+0x68>)
 800d746:	695b      	ldr	r3, [r3, #20]
 800d748:	4a04      	ldr	r2, [pc, #16]	@ (800d75c <FLASH_PageErase+0x68>)
 800d74a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800d74e:	6153      	str	r3, [r2, #20]
}
 800d750:	bf00      	nop
 800d752:	370c      	adds	r7, #12
 800d754:	46bd      	mov	sp, r7
 800d756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d75a:	4770      	bx	lr
 800d75c:	40022000 	.word	0x40022000

0800d760 <FLASH_FlushCaches>:
/**
  * @brief  Flush the instruction and data caches.
  * @retval None
  */
void FLASH_FlushCaches(void)
{
 800d760:	b480      	push	{r7}
 800d762:	b083      	sub	sp, #12
 800d764:	af00      	add	r7, sp, #0
  FLASH_CacheTypeDef cache = pFlash.CacheToReactivate;
 800d766:	4b21      	ldr	r3, [pc, #132]	@ (800d7ec <FLASH_FlushCaches+0x8c>)
 800d768:	7f1b      	ldrb	r3, [r3, #28]
 800d76a:	71fb      	strb	r3, [r7, #7]

  /* Flush instruction cache  */
  if((cache == FLASH_CACHE_ICACHE_ENABLED) ||
 800d76c:	79fb      	ldrb	r3, [r7, #7]
 800d76e:	2b01      	cmp	r3, #1
 800d770:	d002      	beq.n	800d778 <FLASH_FlushCaches+0x18>
 800d772:	79fb      	ldrb	r3, [r7, #7]
 800d774:	2b03      	cmp	r3, #3
 800d776:	d117      	bne.n	800d7a8 <FLASH_FlushCaches+0x48>
     (cache == FLASH_CACHE_ICACHE_DCACHE_ENABLED))
  {
    /* Disable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 800d778:	4b1d      	ldr	r3, [pc, #116]	@ (800d7f0 <FLASH_FlushCaches+0x90>)
 800d77a:	681b      	ldr	r3, [r3, #0]
 800d77c:	4a1c      	ldr	r2, [pc, #112]	@ (800d7f0 <FLASH_FlushCaches+0x90>)
 800d77e:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800d782:	6013      	str	r3, [r2, #0]
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 800d784:	4b1a      	ldr	r3, [pc, #104]	@ (800d7f0 <FLASH_FlushCaches+0x90>)
 800d786:	681b      	ldr	r3, [r3, #0]
 800d788:	4a19      	ldr	r2, [pc, #100]	@ (800d7f0 <FLASH_FlushCaches+0x90>)
 800d78a:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 800d78e:	6013      	str	r3, [r2, #0]
 800d790:	4b17      	ldr	r3, [pc, #92]	@ (800d7f0 <FLASH_FlushCaches+0x90>)
 800d792:	681b      	ldr	r3, [r3, #0]
 800d794:	4a16      	ldr	r2, [pc, #88]	@ (800d7f0 <FLASH_FlushCaches+0x90>)
 800d796:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800d79a:	6013      	str	r3, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800d79c:	4b14      	ldr	r3, [pc, #80]	@ (800d7f0 <FLASH_FlushCaches+0x90>)
 800d79e:	681b      	ldr	r3, [r3, #0]
 800d7a0:	4a13      	ldr	r2, [pc, #76]	@ (800d7f0 <FLASH_FlushCaches+0x90>)
 800d7a2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800d7a6:	6013      	str	r3, [r2, #0]
  }

  /* Flush data cache */
  if((cache == FLASH_CACHE_DCACHE_ENABLED) ||
 800d7a8:	79fb      	ldrb	r3, [r7, #7]
 800d7aa:	2b02      	cmp	r3, #2
 800d7ac:	d002      	beq.n	800d7b4 <FLASH_FlushCaches+0x54>
 800d7ae:	79fb      	ldrb	r3, [r7, #7]
 800d7b0:	2b03      	cmp	r3, #3
 800d7b2:	d111      	bne.n	800d7d8 <FLASH_FlushCaches+0x78>
     (cache == FLASH_CACHE_ICACHE_DCACHE_ENABLED))
  {
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 800d7b4:	4b0e      	ldr	r3, [pc, #56]	@ (800d7f0 <FLASH_FlushCaches+0x90>)
 800d7b6:	681b      	ldr	r3, [r3, #0]
 800d7b8:	4a0d      	ldr	r2, [pc, #52]	@ (800d7f0 <FLASH_FlushCaches+0x90>)
 800d7ba:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800d7be:	6013      	str	r3, [r2, #0]
 800d7c0:	4b0b      	ldr	r3, [pc, #44]	@ (800d7f0 <FLASH_FlushCaches+0x90>)
 800d7c2:	681b      	ldr	r3, [r3, #0]
 800d7c4:	4a0a      	ldr	r2, [pc, #40]	@ (800d7f0 <FLASH_FlushCaches+0x90>)
 800d7c6:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800d7ca:	6013      	str	r3, [r2, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 800d7cc:	4b08      	ldr	r3, [pc, #32]	@ (800d7f0 <FLASH_FlushCaches+0x90>)
 800d7ce:	681b      	ldr	r3, [r3, #0]
 800d7d0:	4a07      	ldr	r2, [pc, #28]	@ (800d7f0 <FLASH_FlushCaches+0x90>)
 800d7d2:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800d7d6:	6013      	str	r3, [r2, #0]
  }

  /* Reset internal variable */
  pFlash.CacheToReactivate = FLASH_CACHE_DISABLED;
 800d7d8:	4b04      	ldr	r3, [pc, #16]	@ (800d7ec <FLASH_FlushCaches+0x8c>)
 800d7da:	2200      	movs	r2, #0
 800d7dc:	771a      	strb	r2, [r3, #28]
}
 800d7de:	bf00      	nop
 800d7e0:	370c      	adds	r7, #12
 800d7e2:	46bd      	mov	sp, r7
 800d7e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7e8:	4770      	bx	lr
 800d7ea:	bf00      	nop
 800d7ec:	2000027c 	.word	0x2000027c
 800d7f0:	40022000 	.word	0x40022000

0800d7f4 <FLASH_OB_WRPConfig>:
  *          This parameter can be page number between WRPStartOffset and (max number of pages in the bank - 1)
  *
  * @retval HAL Status
  */
static HAL_StatusTypeDef FLASH_OB_WRPConfig(uint32_t WRPArea, uint32_t WRPStartOffset, uint32_t WRDPEndOffset)
{
 800d7f4:	b580      	push	{r7, lr}
 800d7f6:	b086      	sub	sp, #24
 800d7f8:	af00      	add	r7, sp, #0
 800d7fa:	60f8      	str	r0, [r7, #12]
 800d7fc:	60b9      	str	r1, [r7, #8]
 800d7fe:	607a      	str	r2, [r7, #4]
  assert_param(IS_OB_WRPAREA(WRPArea));
  assert_param(IS_FLASH_PAGE(WRPStartOffset));
  assert_param(IS_FLASH_PAGE(WRDPEndOffset));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800d800:	f24c 3050 	movw	r0, #50000	@ 0xc350
 800d804:	f7ff fd44 	bl	800d290 <FLASH_WaitForLastOperation>
 800d808:	4603      	mov	r3, r0
 800d80a:	75fb      	strb	r3, [r7, #23]

  if(status == HAL_OK)
 800d80c:	7dfb      	ldrb	r3, [r7, #23]
 800d80e:	2b00      	cmp	r3, #0
 800d810:	d14c      	bne.n	800d8ac <FLASH_OB_WRPConfig+0xb8>
  {
    /* Configure the write protected area */
    if(WRPArea == OB_WRPAREA_BANK1_AREAA)
 800d812:	68fb      	ldr	r3, [r7, #12]
 800d814:	2b00      	cmp	r3, #0
 800d816:	d10b      	bne.n	800d830 <FLASH_OB_WRPConfig+0x3c>
    {
      MODIFY_REG(FLASH->WRP1AR, (FLASH_WRP1AR_WRP1A_STRT | FLASH_WRP1AR_WRP1A_END),
 800d818:	4b27      	ldr	r3, [pc, #156]	@ (800d8b8 <FLASH_OB_WRPConfig+0xc4>)
 800d81a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d81c:	f003 22ff 	and.w	r2, r3, #4278255360	@ 0xff00ff00
 800d820:	687b      	ldr	r3, [r7, #4]
 800d822:	0419      	lsls	r1, r3, #16
 800d824:	68bb      	ldr	r3, [r7, #8]
 800d826:	430b      	orrs	r3, r1
 800d828:	4923      	ldr	r1, [pc, #140]	@ (800d8b8 <FLASH_OB_WRPConfig+0xc4>)
 800d82a:	4313      	orrs	r3, r2
 800d82c:	62cb      	str	r3, [r1, #44]	@ 0x2c
 800d82e:	e02b      	b.n	800d888 <FLASH_OB_WRPConfig+0x94>
                 (WRPStartOffset | (WRDPEndOffset << 16)));
    }
    else if(WRPArea == OB_WRPAREA_BANK1_AREAB)
 800d830:	68fb      	ldr	r3, [r7, #12]
 800d832:	2b01      	cmp	r3, #1
 800d834:	d10b      	bne.n	800d84e <FLASH_OB_WRPConfig+0x5a>
    {
      MODIFY_REG(FLASH->WRP1BR, (FLASH_WRP1BR_WRP1B_STRT | FLASH_WRP1BR_WRP1B_END),
 800d836:	4b20      	ldr	r3, [pc, #128]	@ (800d8b8 <FLASH_OB_WRPConfig+0xc4>)
 800d838:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d83a:	f003 22ff 	and.w	r2, r3, #4278255360	@ 0xff00ff00
 800d83e:	687b      	ldr	r3, [r7, #4]
 800d840:	0419      	lsls	r1, r3, #16
 800d842:	68bb      	ldr	r3, [r7, #8]
 800d844:	430b      	orrs	r3, r1
 800d846:	491c      	ldr	r1, [pc, #112]	@ (800d8b8 <FLASH_OB_WRPConfig+0xc4>)
 800d848:	4313      	orrs	r3, r2
 800d84a:	630b      	str	r3, [r1, #48]	@ 0x30
 800d84c:	e01c      	b.n	800d888 <FLASH_OB_WRPConfig+0x94>
    }
#if defined (STM32L471xx) || defined (STM32L475xx) || defined (STM32L476xx) || defined (STM32L485xx) || defined (STM32L486xx) || \
    defined (STM32L496xx) || defined (STM32L4A6xx) || \
    defined (STM32L4P5xx) || defined (STM32L4Q5xx) || \
    defined (STM32L4R5xx) || defined (STM32L4R7xx) || defined (STM32L4R9xx) || defined (STM32L4S5xx) || defined (STM32L4S7xx) || defined (STM32L4S9xx)
    else if(WRPArea == OB_WRPAREA_BANK2_AREAA)
 800d84e:	68fb      	ldr	r3, [r7, #12]
 800d850:	2b02      	cmp	r3, #2
 800d852:	d10b      	bne.n	800d86c <FLASH_OB_WRPConfig+0x78>
    {
      MODIFY_REG(FLASH->WRP2AR, (FLASH_WRP2AR_WRP2A_STRT | FLASH_WRP2AR_WRP2A_END),
 800d854:	4b18      	ldr	r3, [pc, #96]	@ (800d8b8 <FLASH_OB_WRPConfig+0xc4>)
 800d856:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800d858:	f003 22ff 	and.w	r2, r3, #4278255360	@ 0xff00ff00
 800d85c:	687b      	ldr	r3, [r7, #4]
 800d85e:	0419      	lsls	r1, r3, #16
 800d860:	68bb      	ldr	r3, [r7, #8]
 800d862:	430b      	orrs	r3, r1
 800d864:	4914      	ldr	r1, [pc, #80]	@ (800d8b8 <FLASH_OB_WRPConfig+0xc4>)
 800d866:	4313      	orrs	r3, r2
 800d868:	64cb      	str	r3, [r1, #76]	@ 0x4c
 800d86a:	e00d      	b.n	800d888 <FLASH_OB_WRPConfig+0x94>
                 (WRPStartOffset | (WRDPEndOffset << 16)));
    }
    else if(WRPArea == OB_WRPAREA_BANK2_AREAB)
 800d86c:	68fb      	ldr	r3, [r7, #12]
 800d86e:	2b04      	cmp	r3, #4
 800d870:	d10a      	bne.n	800d888 <FLASH_OB_WRPConfig+0x94>
    {
      MODIFY_REG(FLASH->WRP2BR, (FLASH_WRP2BR_WRP2B_STRT | FLASH_WRP2BR_WRP2B_END),
 800d872:	4b11      	ldr	r3, [pc, #68]	@ (800d8b8 <FLASH_OB_WRPConfig+0xc4>)
 800d874:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800d876:	f003 22ff 	and.w	r2, r3, #4278255360	@ 0xff00ff00
 800d87a:	687b      	ldr	r3, [r7, #4]
 800d87c:	0419      	lsls	r1, r3, #16
 800d87e:	68bb      	ldr	r3, [r7, #8]
 800d880:	430b      	orrs	r3, r1
 800d882:	490d      	ldr	r1, [pc, #52]	@ (800d8b8 <FLASH_OB_WRPConfig+0xc4>)
 800d884:	4313      	orrs	r3, r2
 800d886:	650b      	str	r3, [r1, #80]	@ 0x50
    {
      /* Nothing to do */
    }

    /* Set OPTSTRT Bit */
    SET_BIT(FLASH->CR, FLASH_CR_OPTSTRT);
 800d888:	4b0b      	ldr	r3, [pc, #44]	@ (800d8b8 <FLASH_OB_WRPConfig+0xc4>)
 800d88a:	695b      	ldr	r3, [r3, #20]
 800d88c:	4a0a      	ldr	r2, [pc, #40]	@ (800d8b8 <FLASH_OB_WRPConfig+0xc4>)
 800d88e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800d892:	6153      	str	r3, [r2, #20]

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800d894:	f24c 3050 	movw	r0, #50000	@ 0xc350
 800d898:	f7ff fcfa 	bl	800d290 <FLASH_WaitForLastOperation>
 800d89c:	4603      	mov	r3, r0
 800d89e:	75fb      	strb	r3, [r7, #23]

    /* If the option byte program operation is completed, disable the OPTSTRT Bit */
    CLEAR_BIT(FLASH->CR, FLASH_CR_OPTSTRT);
 800d8a0:	4b05      	ldr	r3, [pc, #20]	@ (800d8b8 <FLASH_OB_WRPConfig+0xc4>)
 800d8a2:	695b      	ldr	r3, [r3, #20]
 800d8a4:	4a04      	ldr	r2, [pc, #16]	@ (800d8b8 <FLASH_OB_WRPConfig+0xc4>)
 800d8a6:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 800d8aa:	6153      	str	r3, [r2, #20]
  }

  return status;
 800d8ac:	7dfb      	ldrb	r3, [r7, #23]
}
 800d8ae:	4618      	mov	r0, r3
 800d8b0:	3718      	adds	r7, #24
 800d8b2:	46bd      	mov	sp, r7
 800d8b4:	bd80      	pop	{r7, pc}
 800d8b6:	bf00      	nop
 800d8b8:	40022000 	.word	0x40022000

0800d8bc <FLASH_OB_RDPConfig>:
  *            @arg OB_RDP_LEVEL_2: Full chip protection
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef FLASH_OB_RDPConfig(uint32_t RDPLevel)
{
 800d8bc:	b580      	push	{r7, lr}
 800d8be:	b084      	sub	sp, #16
 800d8c0:	af00      	add	r7, sp, #0
 800d8c2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_OB_RDP_LEVEL(RDPLevel));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800d8c4:	f24c 3050 	movw	r0, #50000	@ 0xc350
 800d8c8:	f7ff fce2 	bl	800d290 <FLASH_WaitForLastOperation>
 800d8cc:	4603      	mov	r3, r0
 800d8ce:	73fb      	strb	r3, [r7, #15]

  if(status == HAL_OK)
 800d8d0:	7bfb      	ldrb	r3, [r7, #15]
 800d8d2:	2b00      	cmp	r3, #0
 800d8d4:	d119      	bne.n	800d90a <FLASH_OB_RDPConfig+0x4e>
  {
    /* Configure the RDP level in the option bytes register */
    MODIFY_REG(FLASH->OPTR, FLASH_OPTR_RDP, RDPLevel);
 800d8d6:	4b0f      	ldr	r3, [pc, #60]	@ (800d914 <FLASH_OB_RDPConfig+0x58>)
 800d8d8:	6a1b      	ldr	r3, [r3, #32]
 800d8da:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 800d8de:	490d      	ldr	r1, [pc, #52]	@ (800d914 <FLASH_OB_RDPConfig+0x58>)
 800d8e0:	687b      	ldr	r3, [r7, #4]
 800d8e2:	4313      	orrs	r3, r2
 800d8e4:	620b      	str	r3, [r1, #32]

    /* Set OPTSTRT Bit */
    SET_BIT(FLASH->CR, FLASH_CR_OPTSTRT);
 800d8e6:	4b0b      	ldr	r3, [pc, #44]	@ (800d914 <FLASH_OB_RDPConfig+0x58>)
 800d8e8:	695b      	ldr	r3, [r3, #20]
 800d8ea:	4a0a      	ldr	r2, [pc, #40]	@ (800d914 <FLASH_OB_RDPConfig+0x58>)
 800d8ec:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800d8f0:	6153      	str	r3, [r2, #20]

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800d8f2:	f24c 3050 	movw	r0, #50000	@ 0xc350
 800d8f6:	f7ff fccb 	bl	800d290 <FLASH_WaitForLastOperation>
 800d8fa:	4603      	mov	r3, r0
 800d8fc:	73fb      	strb	r3, [r7, #15]

    /* If the option byte program operation is completed, disable the OPTSTRT Bit */
    CLEAR_BIT(FLASH->CR, FLASH_CR_OPTSTRT);
 800d8fe:	4b05      	ldr	r3, [pc, #20]	@ (800d914 <FLASH_OB_RDPConfig+0x58>)
 800d900:	695b      	ldr	r3, [r3, #20]
 800d902:	4a04      	ldr	r2, [pc, #16]	@ (800d914 <FLASH_OB_RDPConfig+0x58>)
 800d904:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 800d908:	6153      	str	r3, [r2, #20]
  }

  return status;
 800d90a:	7bfb      	ldrb	r3, [r7, #15]
}
 800d90c:	4618      	mov	r0, r3
 800d90e:	3710      	adds	r7, #16
 800d910:	46bd      	mov	sp, r7
 800d912:	bd80      	pop	{r7, pc}
 800d914:	40022000 	.word	0x40022000

0800d918 <FLASH_OB_UserConfig>:
  *         DUALBANK(Bit21), nBOOT1(Bit23), SRAM2_PE(Bit24) and SRAM2_RST(Bit25).
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef FLASH_OB_UserConfig(uint32_t UserType, uint32_t UserConfig)
{
 800d918:	b580      	push	{r7, lr}
 800d91a:	b086      	sub	sp, #24
 800d91c:	af00      	add	r7, sp, #0
 800d91e:	6078      	str	r0, [r7, #4]
 800d920:	6039      	str	r1, [r7, #0]
  uint32_t optr_reg_val = 0;
 800d922:	2300      	movs	r3, #0
 800d924:	617b      	str	r3, [r7, #20]
  uint32_t optr_reg_mask = 0;
 800d926:	2300      	movs	r3, #0
 800d928:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_OB_USER_TYPE(UserType));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800d92a:	f24c 3050 	movw	r0, #50000	@ 0xc350
 800d92e:	f7ff fcaf 	bl	800d290 <FLASH_WaitForLastOperation>
 800d932:	4603      	mov	r3, r0
 800d934:	73fb      	strb	r3, [r7, #15]

  if(status == HAL_OK)
 800d936:	7bfb      	ldrb	r3, [r7, #15]
 800d938:	2b00      	cmp	r3, #0
 800d93a:	f040 80de 	bne.w	800dafa <FLASH_OB_UserConfig+0x1e2>
  {
    if((UserType & OB_USER_BOR_LEV) != 0U)
 800d93e:	687b      	ldr	r3, [r7, #4]
 800d940:	f003 0301 	and.w	r3, r3, #1
 800d944:	2b00      	cmp	r3, #0
 800d946:	d009      	beq.n	800d95c <FLASH_OB_UserConfig+0x44>
    {
      /* BOR level option byte should be modified */
      assert_param(IS_OB_USER_BOR_LEVEL(UserConfig & FLASH_OPTR_BOR_LEV));

      /* Set value and mask for BOR level option byte */
      optr_reg_val |= (UserConfig & FLASH_OPTR_BOR_LEV);
 800d948:	683b      	ldr	r3, [r7, #0]
 800d94a:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800d94e:	697a      	ldr	r2, [r7, #20]
 800d950:	4313      	orrs	r3, r2
 800d952:	617b      	str	r3, [r7, #20]
      optr_reg_mask |= FLASH_OPTR_BOR_LEV;
 800d954:	693b      	ldr	r3, [r7, #16]
 800d956:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800d95a:	613b      	str	r3, [r7, #16]
    }

    if((UserType & OB_USER_nRST_STOP) != 0U)
 800d95c:	687b      	ldr	r3, [r7, #4]
 800d95e:	f003 0302 	and.w	r3, r3, #2
 800d962:	2b00      	cmp	r3, #0
 800d964:	d009      	beq.n	800d97a <FLASH_OB_UserConfig+0x62>
    {
      /* nRST_STOP option byte should be modified */
      assert_param(IS_OB_USER_STOP(UserConfig & FLASH_OPTR_nRST_STOP));

      /* Set value and mask for nRST_STOP option byte */
      optr_reg_val |= (UserConfig & FLASH_OPTR_nRST_STOP);
 800d966:	683b      	ldr	r3, [r7, #0]
 800d968:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800d96c:	697a      	ldr	r2, [r7, #20]
 800d96e:	4313      	orrs	r3, r2
 800d970:	617b      	str	r3, [r7, #20]
      optr_reg_mask |= FLASH_OPTR_nRST_STOP;
 800d972:	693b      	ldr	r3, [r7, #16]
 800d974:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800d978:	613b      	str	r3, [r7, #16]
    }

    if((UserType & OB_USER_nRST_STDBY) != 0U)
 800d97a:	687b      	ldr	r3, [r7, #4]
 800d97c:	f003 0304 	and.w	r3, r3, #4
 800d980:	2b00      	cmp	r3, #0
 800d982:	d009      	beq.n	800d998 <FLASH_OB_UserConfig+0x80>
    {
      /* nRST_STDBY option byte should be modified */
      assert_param(IS_OB_USER_STANDBY(UserConfig & FLASH_OPTR_nRST_STDBY));

      /* Set value and mask for nRST_STDBY option byte */
      optr_reg_val |= (UserConfig & FLASH_OPTR_nRST_STDBY);
 800d984:	683b      	ldr	r3, [r7, #0]
 800d986:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800d98a:	697a      	ldr	r2, [r7, #20]
 800d98c:	4313      	orrs	r3, r2
 800d98e:	617b      	str	r3, [r7, #20]
      optr_reg_mask |= FLASH_OPTR_nRST_STDBY;
 800d990:	693b      	ldr	r3, [r7, #16]
 800d992:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 800d996:	613b      	str	r3, [r7, #16]
    }

    if((UserType & OB_USER_nRST_SHDW) != 0U)
 800d998:	687b      	ldr	r3, [r7, #4]
 800d99a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800d99e:	2b00      	cmp	r3, #0
 800d9a0:	d009      	beq.n	800d9b6 <FLASH_OB_UserConfig+0x9e>
    {
      /* nRST_SHDW option byte should be modified */
      assert_param(IS_OB_USER_SHUTDOWN(UserConfig & FLASH_OPTR_nRST_SHDW));

      /* Set value and mask for nRST_SHDW option byte */
      optr_reg_val |= (UserConfig & FLASH_OPTR_nRST_SHDW);
 800d9a2:	683b      	ldr	r3, [r7, #0]
 800d9a4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800d9a8:	697a      	ldr	r2, [r7, #20]
 800d9aa:	4313      	orrs	r3, r2
 800d9ac:	617b      	str	r3, [r7, #20]
      optr_reg_mask |= FLASH_OPTR_nRST_SHDW;
 800d9ae:	693b      	ldr	r3, [r7, #16]
 800d9b0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800d9b4:	613b      	str	r3, [r7, #16]
    }

    if((UserType & OB_USER_IWDG_SW) != 0U)
 800d9b6:	687b      	ldr	r3, [r7, #4]
 800d9b8:	f003 0308 	and.w	r3, r3, #8
 800d9bc:	2b00      	cmp	r3, #0
 800d9be:	d009      	beq.n	800d9d4 <FLASH_OB_UserConfig+0xbc>
    {
      /* IWDG_SW option byte should be modified */
      assert_param(IS_OB_USER_IWDG(UserConfig & FLASH_OPTR_IWDG_SW));

      /* Set value and mask for IWDG_SW option byte */
      optr_reg_val |= (UserConfig & FLASH_OPTR_IWDG_SW);
 800d9c0:	683b      	ldr	r3, [r7, #0]
 800d9c2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800d9c6:	697a      	ldr	r2, [r7, #20]
 800d9c8:	4313      	orrs	r3, r2
 800d9ca:	617b      	str	r3, [r7, #20]
      optr_reg_mask |= FLASH_OPTR_IWDG_SW;
 800d9cc:	693b      	ldr	r3, [r7, #16]
 800d9ce:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800d9d2:	613b      	str	r3, [r7, #16]
    }

    if((UserType & OB_USER_IWDG_STOP) != 0U)
 800d9d4:	687b      	ldr	r3, [r7, #4]
 800d9d6:	f003 0310 	and.w	r3, r3, #16
 800d9da:	2b00      	cmp	r3, #0
 800d9dc:	d009      	beq.n	800d9f2 <FLASH_OB_UserConfig+0xda>
    {
      /* IWDG_STOP option byte should be modified */
      assert_param(IS_OB_USER_IWDG_STOP(UserConfig & FLASH_OPTR_IWDG_STOP));

      /* Set value and mask for IWDG_STOP option byte */
      optr_reg_val |= (UserConfig & FLASH_OPTR_IWDG_STOP);
 800d9de:	683b      	ldr	r3, [r7, #0]
 800d9e0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800d9e4:	697a      	ldr	r2, [r7, #20]
 800d9e6:	4313      	orrs	r3, r2
 800d9e8:	617b      	str	r3, [r7, #20]
      optr_reg_mask |= FLASH_OPTR_IWDG_STOP;
 800d9ea:	693b      	ldr	r3, [r7, #16]
 800d9ec:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800d9f0:	613b      	str	r3, [r7, #16]
    }

    if((UserType & OB_USER_IWDG_STDBY) != 0U)
 800d9f2:	687b      	ldr	r3, [r7, #4]
 800d9f4:	f003 0320 	and.w	r3, r3, #32
 800d9f8:	2b00      	cmp	r3, #0
 800d9fa:	d009      	beq.n	800da10 <FLASH_OB_UserConfig+0xf8>
    {
      /* IWDG_STDBY option byte should be modified */
      assert_param(IS_OB_USER_IWDG_STDBY(UserConfig & FLASH_OPTR_IWDG_STDBY));

      /* Set value and mask for IWDG_STDBY option byte */
      optr_reg_val |= (UserConfig & FLASH_OPTR_IWDG_STDBY);
 800d9fc:	683b      	ldr	r3, [r7, #0]
 800d9fe:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800da02:	697a      	ldr	r2, [r7, #20]
 800da04:	4313      	orrs	r3, r2
 800da06:	617b      	str	r3, [r7, #20]
      optr_reg_mask |= FLASH_OPTR_IWDG_STDBY;
 800da08:	693b      	ldr	r3, [r7, #16]
 800da0a:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800da0e:	613b      	str	r3, [r7, #16]
    }

    if((UserType & OB_USER_WWDG_SW) != 0U)
 800da10:	687b      	ldr	r3, [r7, #4]
 800da12:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800da16:	2b00      	cmp	r3, #0
 800da18:	d009      	beq.n	800da2e <FLASH_OB_UserConfig+0x116>
    {
      /* WWDG_SW option byte should be modified */
      assert_param(IS_OB_USER_WWDG(UserConfig & FLASH_OPTR_WWDG_SW));

      /* Set value and mask for WWDG_SW option byte */
      optr_reg_val |= (UserConfig & FLASH_OPTR_WWDG_SW);
 800da1a:	683b      	ldr	r3, [r7, #0]
 800da1c:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800da20:	697a      	ldr	r2, [r7, #20]
 800da22:	4313      	orrs	r3, r2
 800da24:	617b      	str	r3, [r7, #20]
      optr_reg_mask |= FLASH_OPTR_WWDG_SW;
 800da26:	693b      	ldr	r3, [r7, #16]
 800da28:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800da2c:	613b      	str	r3, [r7, #16]

#if defined (STM32L471xx) || defined (STM32L475xx) || defined (STM32L476xx) || defined (STM32L485xx) || defined (STM32L486xx) || \
    defined (STM32L496xx) || defined (STM32L4A6xx) || \
    defined (STM32L4P5xx) || defined (STM32L4Q5xx) || \
    defined (STM32L4R5xx) || defined (STM32L4R7xx) || defined (STM32L4R9xx) || defined (STM32L4S5xx) || defined (STM32L4S7xx) || defined (STM32L4S9xx)
    if((UserType & OB_USER_BFB2) != 0U)
 800da2e:	687b      	ldr	r3, [r7, #4]
 800da30:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800da34:	2b00      	cmp	r3, #0
 800da36:	d009      	beq.n	800da4c <FLASH_OB_UserConfig+0x134>
    {
      /* BFB2 option byte should be modified */
      assert_param(IS_OB_USER_BFB2(UserConfig & FLASH_OPTR_BFB2));

      /* Set value and mask for BFB2 option byte */
      optr_reg_val |= (UserConfig & FLASH_OPTR_BFB2);
 800da38:	683b      	ldr	r3, [r7, #0]
 800da3a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800da3e:	697a      	ldr	r2, [r7, #20]
 800da40:	4313      	orrs	r3, r2
 800da42:	617b      	str	r3, [r7, #20]
      optr_reg_mask |= FLASH_OPTR_BFB2;
 800da44:	693b      	ldr	r3, [r7, #16]
 800da46:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800da4a:	613b      	str	r3, [r7, #16]
    }

    if((UserType & OB_USER_DUALBANK) != 0U)
 800da4c:	687b      	ldr	r3, [r7, #4]
 800da4e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800da52:	2b00      	cmp	r3, #0
 800da54:	d009      	beq.n	800da6a <FLASH_OB_UserConfig+0x152>
#else
      /* DUALBANK option byte should be modified */
      assert_param(IS_OB_USER_DUALBANK(UserConfig & FLASH_OPTR_DUALBANK));

      /* Set value and mask for DUALBANK option byte */
      optr_reg_val |= (UserConfig & FLASH_OPTR_DUALBANK);
 800da56:	683b      	ldr	r3, [r7, #0]
 800da58:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800da5c:	697a      	ldr	r2, [r7, #20]
 800da5e:	4313      	orrs	r3, r2
 800da60:	617b      	str	r3, [r7, #20]
      optr_reg_mask |= FLASH_OPTR_DUALBANK;
 800da62:	693b      	ldr	r3, [r7, #16]
 800da64:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800da68:	613b      	str	r3, [r7, #16]
#endif
    }
#endif

    if((UserType & OB_USER_nBOOT1) != 0U)
 800da6a:	687b      	ldr	r3, [r7, #4]
 800da6c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800da70:	2b00      	cmp	r3, #0
 800da72:	d009      	beq.n	800da88 <FLASH_OB_UserConfig+0x170>
    {
      /* nBOOT1 option byte should be modified */
      assert_param(IS_OB_USER_BOOT1(UserConfig & FLASH_OPTR_nBOOT1));

      /* Set value and mask for nBOOT1 option byte */
      optr_reg_val |= (UserConfig & FLASH_OPTR_nBOOT1);
 800da74:	683b      	ldr	r3, [r7, #0]
 800da76:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800da7a:	697a      	ldr	r2, [r7, #20]
 800da7c:	4313      	orrs	r3, r2
 800da7e:	617b      	str	r3, [r7, #20]
      optr_reg_mask |= FLASH_OPTR_nBOOT1;
 800da80:	693b      	ldr	r3, [r7, #16]
 800da82:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800da86:	613b      	str	r3, [r7, #16]
    }

    if((UserType & OB_USER_SRAM2_PE) != 0U)
 800da88:	687b      	ldr	r3, [r7, #4]
 800da8a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800da8e:	2b00      	cmp	r3, #0
 800da90:	d009      	beq.n	800daa6 <FLASH_OB_UserConfig+0x18e>
    {
      /* SRAM2_PE option byte should be modified */
      assert_param(IS_OB_USER_SRAM2_PARITY(UserConfig & FLASH_OPTR_SRAM2_PE));

      /* Set value and mask for SRAM2_PE option byte */
      optr_reg_val |= (UserConfig & FLASH_OPTR_SRAM2_PE);
 800da92:	683b      	ldr	r3, [r7, #0]
 800da94:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800da98:	697a      	ldr	r2, [r7, #20]
 800da9a:	4313      	orrs	r3, r2
 800da9c:	617b      	str	r3, [r7, #20]
      optr_reg_mask |= FLASH_OPTR_SRAM2_PE;
 800da9e:	693b      	ldr	r3, [r7, #16]
 800daa0:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800daa4:	613b      	str	r3, [r7, #16]
    }

    if((UserType & OB_USER_SRAM2_RST) != 0U)
 800daa6:	687b      	ldr	r3, [r7, #4]
 800daa8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800daac:	2b00      	cmp	r3, #0
 800daae:	d009      	beq.n	800dac4 <FLASH_OB_UserConfig+0x1ac>
    {
      /* SRAM2_RST option byte should be modified */
      assert_param(IS_OB_USER_SRAM2_RST(UserConfig & FLASH_OPTR_SRAM2_RST));

      /* Set value and mask for SRAM2_RST option byte */
      optr_reg_val |= (UserConfig & FLASH_OPTR_SRAM2_RST);
 800dab0:	683b      	ldr	r3, [r7, #0]
 800dab2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800dab6:	697a      	ldr	r2, [r7, #20]
 800dab8:	4313      	orrs	r3, r2
 800daba:	617b      	str	r3, [r7, #20]
      optr_reg_mask |= FLASH_OPTR_SRAM2_RST;
 800dabc:	693b      	ldr	r3, [r7, #16]
 800dabe:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800dac2:	613b      	str	r3, [r7, #16]
      optr_reg_mask |= FLASH_OPTR_nBOOT0;
    }
#endif

    /* Configure the option bytes register */
    MODIFY_REG(FLASH->OPTR, optr_reg_mask, optr_reg_val);
 800dac4:	4b0f      	ldr	r3, [pc, #60]	@ (800db04 <FLASH_OB_UserConfig+0x1ec>)
 800dac6:	6a1a      	ldr	r2, [r3, #32]
 800dac8:	693b      	ldr	r3, [r7, #16]
 800daca:	43db      	mvns	r3, r3
 800dacc:	401a      	ands	r2, r3
 800dace:	490d      	ldr	r1, [pc, #52]	@ (800db04 <FLASH_OB_UserConfig+0x1ec>)
 800dad0:	697b      	ldr	r3, [r7, #20]
 800dad2:	4313      	orrs	r3, r2
 800dad4:	620b      	str	r3, [r1, #32]

    /* Set OPTSTRT Bit */
    SET_BIT(FLASH->CR, FLASH_CR_OPTSTRT);
 800dad6:	4b0b      	ldr	r3, [pc, #44]	@ (800db04 <FLASH_OB_UserConfig+0x1ec>)
 800dad8:	695b      	ldr	r3, [r3, #20]
 800dada:	4a0a      	ldr	r2, [pc, #40]	@ (800db04 <FLASH_OB_UserConfig+0x1ec>)
 800dadc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800dae0:	6153      	str	r3, [r2, #20]

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800dae2:	f24c 3050 	movw	r0, #50000	@ 0xc350
 800dae6:	f7ff fbd3 	bl	800d290 <FLASH_WaitForLastOperation>
 800daea:	4603      	mov	r3, r0
 800daec:	73fb      	strb	r3, [r7, #15]

    /* If the option byte program operation is completed, disable the OPTSTRT Bit */
    CLEAR_BIT(FLASH->CR, FLASH_CR_OPTSTRT);
 800daee:	4b05      	ldr	r3, [pc, #20]	@ (800db04 <FLASH_OB_UserConfig+0x1ec>)
 800daf0:	695b      	ldr	r3, [r3, #20]
 800daf2:	4a04      	ldr	r2, [pc, #16]	@ (800db04 <FLASH_OB_UserConfig+0x1ec>)
 800daf4:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 800daf8:	6153      	str	r3, [r2, #20]
  }

  return status;
 800dafa:	7bfb      	ldrb	r3, [r7, #15]
}
 800dafc:	4618      	mov	r0, r3
 800dafe:	3718      	adds	r7, #24
 800db00:	46bd      	mov	sp, r7
 800db02:	bd80      	pop	{r7, pc}
 800db04:	40022000 	.word	0x40022000

0800db08 <FLASH_OB_PCROPConfig>:
  *          This parameter can be an address between PCROPStartAddr and end of the bank
  *
  * @retval HAL Status
  */
static HAL_StatusTypeDef FLASH_OB_PCROPConfig(uint32_t PCROPConfig, uint32_t PCROPStartAddr, uint32_t PCROPEndAddr)
{
 800db08:	b580      	push	{r7, lr}
 800db0a:	b088      	sub	sp, #32
 800db0c:	af00      	add	r7, sp, #0
 800db0e:	60f8      	str	r0, [r7, #12]
 800db10:	60b9      	str	r1, [r7, #8]
 800db12:	607a      	str	r2, [r7, #4]
  assert_param(IS_OB_PCROP_RDP(PCROPConfig & FLASH_PCROP1ER_PCROP_RDP));
  assert_param(IS_FLASH_MAIN_MEM_ADDRESS(PCROPStartAddr));
  assert_param(IS_FLASH_MAIN_MEM_ADDRESS(PCROPEndAddr));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800db14:	f24c 3050 	movw	r0, #50000	@ 0xc350
 800db18:	f7ff fbba 	bl	800d290 <FLASH_WaitForLastOperation>
 800db1c:	4603      	mov	r3, r0
 800db1e:	77fb      	strb	r3, [r7, #31]

  if(status == HAL_OK)
 800db20:	7ffb      	ldrb	r3, [r7, #31]
 800db22:	2b00      	cmp	r3, #0
 800db24:	f040 808c 	bne.w	800dc40 <FLASH_OB_PCROPConfig+0x138>
#if defined (STM32L471xx) || defined (STM32L475xx) || defined (STM32L476xx) || defined (STM32L485xx) || defined (STM32L486xx) || \
    defined (STM32L496xx) || defined (STM32L4A6xx) || \
    defined (STM32L4P5xx) || defined (STM32L4Q5xx) || \
    defined (STM32L4R5xx) || defined (STM32L4R7xx) || defined (STM32L4R9xx) || defined (STM32L4S5xx) || defined (STM32L4S7xx) || defined (STM32L4S9xx)
    /* Get the information about the bank swapping */
    if (READ_BIT(SYSCFG->MEMRMP, SYSCFG_MEMRMP_FB_MODE) == 0U)
 800db28:	4b48      	ldr	r3, [pc, #288]	@ (800dc4c <FLASH_OB_PCROPConfig+0x144>)
 800db2a:	681b      	ldr	r3, [r3, #0]
 800db2c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800db30:	2b00      	cmp	r3, #0
 800db32:	d115      	bne.n	800db60 <FLASH_OB_PCROPConfig+0x58>
    {
      bank1_addr = FLASH_BASE;
 800db34:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800db38:	61bb      	str	r3, [r7, #24]
      bank2_addr = FLASH_BASE + FLASH_BANK_SIZE;
 800db3a:	4b45      	ldr	r3, [pc, #276]	@ (800dc50 <FLASH_OB_PCROPConfig+0x148>)
 800db3c:	681b      	ldr	r3, [r3, #0]
 800db3e:	b29b      	uxth	r3, r3
 800db40:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800db44:	4293      	cmp	r3, r2
 800db46:	d008      	beq.n	800db5a <FLASH_OB_PCROPConfig+0x52>
 800db48:	4b41      	ldr	r3, [pc, #260]	@ (800dc50 <FLASH_OB_PCROPConfig+0x148>)
 800db4a:	681b      	ldr	r3, [r3, #0]
 800db4c:	029b      	lsls	r3, r3, #10
 800db4e:	085a      	lsrs	r2, r3, #1
 800db50:	4b40      	ldr	r3, [pc, #256]	@ (800dc54 <FLASH_OB_PCROPConfig+0x14c>)
 800db52:	4013      	ands	r3, r2
 800db54:	f103 6300 	add.w	r3, r3, #134217728	@ 0x8000000
 800db58:	e000      	b.n	800db5c <FLASH_OB_PCROPConfig+0x54>
 800db5a:	4b3f      	ldr	r3, [pc, #252]	@ (800dc58 <FLASH_OB_PCROPConfig+0x150>)
 800db5c:	617b      	str	r3, [r7, #20]
 800db5e:	e014      	b.n	800db8a <FLASH_OB_PCROPConfig+0x82>
    }
    else
    {
      bank1_addr = FLASH_BASE + FLASH_BANK_SIZE;
 800db60:	4b3b      	ldr	r3, [pc, #236]	@ (800dc50 <FLASH_OB_PCROPConfig+0x148>)
 800db62:	681b      	ldr	r3, [r3, #0]
 800db64:	b29b      	uxth	r3, r3
 800db66:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800db6a:	4293      	cmp	r3, r2
 800db6c:	d008      	beq.n	800db80 <FLASH_OB_PCROPConfig+0x78>
 800db6e:	4b38      	ldr	r3, [pc, #224]	@ (800dc50 <FLASH_OB_PCROPConfig+0x148>)
 800db70:	681b      	ldr	r3, [r3, #0]
 800db72:	029b      	lsls	r3, r3, #10
 800db74:	085a      	lsrs	r2, r3, #1
 800db76:	4b37      	ldr	r3, [pc, #220]	@ (800dc54 <FLASH_OB_PCROPConfig+0x14c>)
 800db78:	4013      	ands	r3, r2
 800db7a:	f103 6300 	add.w	r3, r3, #134217728	@ 0x8000000
 800db7e:	e000      	b.n	800db82 <FLASH_OB_PCROPConfig+0x7a>
 800db80:	4b35      	ldr	r3, [pc, #212]	@ (800dc58 <FLASH_OB_PCROPConfig+0x150>)
 800db82:	61bb      	str	r3, [r7, #24]
      bank2_addr = FLASH_BASE;
 800db84:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800db88:	617b      	str	r3, [r7, #20]
    }
    else
#endif
    {
      /* Configure the Proprietary code readout protection */
      if((PCROPConfig & FLASH_BANK_BOTH) == FLASH_BANK_1)
 800db8a:	68fb      	ldr	r3, [r7, #12]
 800db8c:	f003 0303 	and.w	r3, r3, #3
 800db90:	2b01      	cmp	r3, #1
 800db92:	d11a      	bne.n	800dbca <FLASH_OB_PCROPConfig+0xc2>
      {
        reg_value = ((PCROPStartAddr - bank1_addr) >> 3);
 800db94:	68ba      	ldr	r2, [r7, #8]
 800db96:	69bb      	ldr	r3, [r7, #24]
 800db98:	1ad3      	subs	r3, r2, r3
 800db9a:	08db      	lsrs	r3, r3, #3
 800db9c:	613b      	str	r3, [r7, #16]
        MODIFY_REG(FLASH->PCROP1SR, FLASH_PCROP1SR_PCROP1_STRT, reg_value);
 800db9e:	4b2f      	ldr	r3, [pc, #188]	@ (800dc5c <FLASH_OB_PCROPConfig+0x154>)
 800dba0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800dba2:	0c1b      	lsrs	r3, r3, #16
 800dba4:	041b      	lsls	r3, r3, #16
 800dba6:	492d      	ldr	r1, [pc, #180]	@ (800dc5c <FLASH_OB_PCROPConfig+0x154>)
 800dba8:	693a      	ldr	r2, [r7, #16]
 800dbaa:	4313      	orrs	r3, r2
 800dbac:	624b      	str	r3, [r1, #36]	@ 0x24

        reg_value = ((PCROPEndAddr - bank1_addr) >> 3);
 800dbae:	687a      	ldr	r2, [r7, #4]
 800dbb0:	69bb      	ldr	r3, [r7, #24]
 800dbb2:	1ad3      	subs	r3, r2, r3
 800dbb4:	08db      	lsrs	r3, r3, #3
 800dbb6:	613b      	str	r3, [r7, #16]
        MODIFY_REG(FLASH->PCROP1ER, FLASH_PCROP1ER_PCROP1_END, reg_value);
 800dbb8:	4b28      	ldr	r3, [pc, #160]	@ (800dc5c <FLASH_OB_PCROPConfig+0x154>)
 800dbba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800dbbc:	0c1b      	lsrs	r3, r3, #16
 800dbbe:	041b      	lsls	r3, r3, #16
 800dbc0:	4926      	ldr	r1, [pc, #152]	@ (800dc5c <FLASH_OB_PCROPConfig+0x154>)
 800dbc2:	693a      	ldr	r2, [r7, #16]
 800dbc4:	4313      	orrs	r3, r2
 800dbc6:	628b      	str	r3, [r1, #40]	@ 0x28
 800dbc8:	e01e      	b.n	800dc08 <FLASH_OB_PCROPConfig+0x100>
      }
#if defined (STM32L471xx) || defined (STM32L475xx) || defined (STM32L476xx) || defined (STM32L485xx) || defined (STM32L486xx) || \
    defined (STM32L496xx) || defined (STM32L4A6xx) || \
    defined (STM32L4P5xx) || defined (STM32L4Q5xx) || \
    defined (STM32L4R5xx) || defined (STM32L4R7xx) || defined (STM32L4R9xx) || defined (STM32L4S5xx) || defined (STM32L4S7xx) || defined (STM32L4S9xx)
      else if((PCROPConfig & FLASH_BANK_BOTH) == FLASH_BANK_2)
 800dbca:	68fb      	ldr	r3, [r7, #12]
 800dbcc:	f003 0303 	and.w	r3, r3, #3
 800dbd0:	2b02      	cmp	r3, #2
 800dbd2:	d119      	bne.n	800dc08 <FLASH_OB_PCROPConfig+0x100>
      {
        reg_value = ((PCROPStartAddr - bank2_addr) >> 3);
 800dbd4:	68ba      	ldr	r2, [r7, #8]
 800dbd6:	697b      	ldr	r3, [r7, #20]
 800dbd8:	1ad3      	subs	r3, r2, r3
 800dbda:	08db      	lsrs	r3, r3, #3
 800dbdc:	613b      	str	r3, [r7, #16]
        MODIFY_REG(FLASH->PCROP2SR, FLASH_PCROP2SR_PCROP2_STRT, reg_value);
 800dbde:	4b1f      	ldr	r3, [pc, #124]	@ (800dc5c <FLASH_OB_PCROPConfig+0x154>)
 800dbe0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800dbe2:	0c1b      	lsrs	r3, r3, #16
 800dbe4:	041b      	lsls	r3, r3, #16
 800dbe6:	491d      	ldr	r1, [pc, #116]	@ (800dc5c <FLASH_OB_PCROPConfig+0x154>)
 800dbe8:	693a      	ldr	r2, [r7, #16]
 800dbea:	4313      	orrs	r3, r2
 800dbec:	644b      	str	r3, [r1, #68]	@ 0x44

        reg_value = ((PCROPEndAddr - bank2_addr) >> 3);
 800dbee:	687a      	ldr	r2, [r7, #4]
 800dbf0:	697b      	ldr	r3, [r7, #20]
 800dbf2:	1ad3      	subs	r3, r2, r3
 800dbf4:	08db      	lsrs	r3, r3, #3
 800dbf6:	613b      	str	r3, [r7, #16]
        MODIFY_REG(FLASH->PCROP2ER, FLASH_PCROP2ER_PCROP2_END, reg_value);
 800dbf8:	4b18      	ldr	r3, [pc, #96]	@ (800dc5c <FLASH_OB_PCROPConfig+0x154>)
 800dbfa:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800dbfc:	0c1b      	lsrs	r3, r3, #16
 800dbfe:	041b      	lsls	r3, r3, #16
 800dc00:	4916      	ldr	r1, [pc, #88]	@ (800dc5c <FLASH_OB_PCROPConfig+0x154>)
 800dc02:	693a      	ldr	r2, [r7, #16]
 800dc04:	4313      	orrs	r3, r2
 800dc06:	648b      	str	r3, [r1, #72]	@ 0x48
      {
        /* Nothing to do */
      }
    }

    MODIFY_REG(FLASH->PCROP1ER, FLASH_PCROP1ER_PCROP_RDP, (PCROPConfig & FLASH_PCROP1ER_PCROP_RDP));
 800dc08:	4b14      	ldr	r3, [pc, #80]	@ (800dc5c <FLASH_OB_PCROPConfig+0x154>)
 800dc0a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800dc0c:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800dc10:	68fb      	ldr	r3, [r7, #12]
 800dc12:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800dc16:	4911      	ldr	r1, [pc, #68]	@ (800dc5c <FLASH_OB_PCROPConfig+0x154>)
 800dc18:	4313      	orrs	r3, r2
 800dc1a:	628b      	str	r3, [r1, #40]	@ 0x28

    /* Set OPTSTRT Bit */
    SET_BIT(FLASH->CR, FLASH_CR_OPTSTRT);
 800dc1c:	4b0f      	ldr	r3, [pc, #60]	@ (800dc5c <FLASH_OB_PCROPConfig+0x154>)
 800dc1e:	695b      	ldr	r3, [r3, #20]
 800dc20:	4a0e      	ldr	r2, [pc, #56]	@ (800dc5c <FLASH_OB_PCROPConfig+0x154>)
 800dc22:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800dc26:	6153      	str	r3, [r2, #20]

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800dc28:	f24c 3050 	movw	r0, #50000	@ 0xc350
 800dc2c:	f7ff fb30 	bl	800d290 <FLASH_WaitForLastOperation>
 800dc30:	4603      	mov	r3, r0
 800dc32:	77fb      	strb	r3, [r7, #31]

    /* If the option byte program operation is completed, disable the OPTSTRT Bit */
    CLEAR_BIT(FLASH->CR, FLASH_CR_OPTSTRT);
 800dc34:	4b09      	ldr	r3, [pc, #36]	@ (800dc5c <FLASH_OB_PCROPConfig+0x154>)
 800dc36:	695b      	ldr	r3, [r3, #20]
 800dc38:	4a08      	ldr	r2, [pc, #32]	@ (800dc5c <FLASH_OB_PCROPConfig+0x154>)
 800dc3a:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 800dc3e:	6153      	str	r3, [r2, #20]
  }

  return status;
 800dc40:	7ffb      	ldrb	r3, [r7, #31]
}
 800dc42:	4618      	mov	r0, r3
 800dc44:	3720      	adds	r7, #32
 800dc46:	46bd      	mov	sp, r7
 800dc48:	bd80      	pop	{r7, pc}
 800dc4a:	bf00      	nop
 800dc4c:	40010000 	.word	0x40010000
 800dc50:	1fff75e0 	.word	0x1fff75e0
 800dc54:	01fffe00 	.word	0x01fffe00
 800dc58:	08080000 	.word	0x08080000
 800dc5c:	40022000 	.word	0x40022000

0800dc60 <FLASH_OB_GetWRP>:
  *                        the write protected area
  *
  * @retval None
  */
static void FLASH_OB_GetWRP(uint32_t WRPArea, uint32_t * WRPStartOffset, uint32_t * WRDPEndOffset)
{
 800dc60:	b480      	push	{r7}
 800dc62:	b085      	sub	sp, #20
 800dc64:	af00      	add	r7, sp, #0
 800dc66:	60f8      	str	r0, [r7, #12]
 800dc68:	60b9      	str	r1, [r7, #8]
 800dc6a:	607a      	str	r2, [r7, #4]
  /* Get the configuration of the write protected area */
  if(WRPArea == OB_WRPAREA_BANK1_AREAA)
 800dc6c:	68fb      	ldr	r3, [r7, #12]
 800dc6e:	2b00      	cmp	r3, #0
 800dc70:	d10b      	bne.n	800dc8a <FLASH_OB_GetWRP+0x2a>
  {
    *WRPStartOffset = READ_BIT(FLASH->WRP1AR, FLASH_WRP1AR_WRP1A_STRT);
 800dc72:	4b1f      	ldr	r3, [pc, #124]	@ (800dcf0 <FLASH_OB_GetWRP+0x90>)
 800dc74:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800dc76:	b2da      	uxtb	r2, r3
 800dc78:	68bb      	ldr	r3, [r7, #8]
 800dc7a:	601a      	str	r2, [r3, #0]
    *WRDPEndOffset = (READ_BIT(FLASH->WRP1AR, FLASH_WRP1AR_WRP1A_END) >> 16);
 800dc7c:	4b1c      	ldr	r3, [pc, #112]	@ (800dcf0 <FLASH_OB_GetWRP+0x90>)
 800dc7e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800dc80:	0c1b      	lsrs	r3, r3, #16
 800dc82:	b2da      	uxtb	r2, r3
 800dc84:	687b      	ldr	r3, [r7, #4]
 800dc86:	601a      	str	r2, [r3, #0]
#endif
  else
  {
    /* Nothing to do */
  }
}
 800dc88:	e02b      	b.n	800dce2 <FLASH_OB_GetWRP+0x82>
  else if(WRPArea == OB_WRPAREA_BANK1_AREAB)
 800dc8a:	68fb      	ldr	r3, [r7, #12]
 800dc8c:	2b01      	cmp	r3, #1
 800dc8e:	d10b      	bne.n	800dca8 <FLASH_OB_GetWRP+0x48>
    *WRPStartOffset = READ_BIT(FLASH->WRP1BR, FLASH_WRP1BR_WRP1B_STRT);
 800dc90:	4b17      	ldr	r3, [pc, #92]	@ (800dcf0 <FLASH_OB_GetWRP+0x90>)
 800dc92:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800dc94:	b2da      	uxtb	r2, r3
 800dc96:	68bb      	ldr	r3, [r7, #8]
 800dc98:	601a      	str	r2, [r3, #0]
    *WRDPEndOffset = (READ_BIT(FLASH->WRP1BR, FLASH_WRP1BR_WRP1B_END) >> 16);
 800dc9a:	4b15      	ldr	r3, [pc, #84]	@ (800dcf0 <FLASH_OB_GetWRP+0x90>)
 800dc9c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800dc9e:	0c1b      	lsrs	r3, r3, #16
 800dca0:	b2da      	uxtb	r2, r3
 800dca2:	687b      	ldr	r3, [r7, #4]
 800dca4:	601a      	str	r2, [r3, #0]
}
 800dca6:	e01c      	b.n	800dce2 <FLASH_OB_GetWRP+0x82>
  else if(WRPArea == OB_WRPAREA_BANK2_AREAA)
 800dca8:	68fb      	ldr	r3, [r7, #12]
 800dcaa:	2b02      	cmp	r3, #2
 800dcac:	d10b      	bne.n	800dcc6 <FLASH_OB_GetWRP+0x66>
    *WRPStartOffset = READ_BIT(FLASH->WRP2AR, FLASH_WRP2AR_WRP2A_STRT);
 800dcae:	4b10      	ldr	r3, [pc, #64]	@ (800dcf0 <FLASH_OB_GetWRP+0x90>)
 800dcb0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800dcb2:	b2da      	uxtb	r2, r3
 800dcb4:	68bb      	ldr	r3, [r7, #8]
 800dcb6:	601a      	str	r2, [r3, #0]
    *WRDPEndOffset = (READ_BIT(FLASH->WRP2AR, FLASH_WRP2AR_WRP2A_END) >> 16);
 800dcb8:	4b0d      	ldr	r3, [pc, #52]	@ (800dcf0 <FLASH_OB_GetWRP+0x90>)
 800dcba:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800dcbc:	0c1b      	lsrs	r3, r3, #16
 800dcbe:	b2da      	uxtb	r2, r3
 800dcc0:	687b      	ldr	r3, [r7, #4]
 800dcc2:	601a      	str	r2, [r3, #0]
}
 800dcc4:	e00d      	b.n	800dce2 <FLASH_OB_GetWRP+0x82>
  else if(WRPArea == OB_WRPAREA_BANK2_AREAB)
 800dcc6:	68fb      	ldr	r3, [r7, #12]
 800dcc8:	2b04      	cmp	r3, #4
 800dcca:	d10a      	bne.n	800dce2 <FLASH_OB_GetWRP+0x82>
    *WRPStartOffset = READ_BIT(FLASH->WRP2BR, FLASH_WRP2BR_WRP2B_STRT);
 800dccc:	4b08      	ldr	r3, [pc, #32]	@ (800dcf0 <FLASH_OB_GetWRP+0x90>)
 800dcce:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800dcd0:	b2da      	uxtb	r2, r3
 800dcd2:	68bb      	ldr	r3, [r7, #8]
 800dcd4:	601a      	str	r2, [r3, #0]
    *WRDPEndOffset = (READ_BIT(FLASH->WRP2BR, FLASH_WRP2BR_WRP2B_END) >> 16);
 800dcd6:	4b06      	ldr	r3, [pc, #24]	@ (800dcf0 <FLASH_OB_GetWRP+0x90>)
 800dcd8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800dcda:	0c1b      	lsrs	r3, r3, #16
 800dcdc:	b2da      	uxtb	r2, r3
 800dcde:	687b      	ldr	r3, [r7, #4]
 800dce0:	601a      	str	r2, [r3, #0]
}
 800dce2:	bf00      	nop
 800dce4:	3714      	adds	r7, #20
 800dce6:	46bd      	mov	sp, r7
 800dce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dcec:	4770      	bx	lr
 800dcee:	bf00      	nop
 800dcf0:	40022000 	.word	0x40022000

0800dcf4 <FLASH_OB_GetRDP>:
  *            @arg OB_RDP_LEVEL_0: No protection
  *            @arg OB_RDP_LEVEL_1: Read protection of the memory
  *            @arg OB_RDP_LEVEL_2: Full chip protection
  */
static uint32_t FLASH_OB_GetRDP(void)
{
 800dcf4:	b480      	push	{r7}
 800dcf6:	b083      	sub	sp, #12
 800dcf8:	af00      	add	r7, sp, #0
  uint32_t rdp_level = READ_BIT(FLASH->OPTR, FLASH_OPTR_RDP);
 800dcfa:	4b0a      	ldr	r3, [pc, #40]	@ (800dd24 <FLASH_OB_GetRDP+0x30>)
 800dcfc:	6a1b      	ldr	r3, [r3, #32]
 800dcfe:	b2db      	uxtb	r3, r3
 800dd00:	607b      	str	r3, [r7, #4]

  if ((rdp_level != OB_RDP_LEVEL_0) && (rdp_level != OB_RDP_LEVEL_2))
 800dd02:	687b      	ldr	r3, [r7, #4]
 800dd04:	2baa      	cmp	r3, #170	@ 0xaa
 800dd06:	d004      	beq.n	800dd12 <FLASH_OB_GetRDP+0x1e>
 800dd08:	687b      	ldr	r3, [r7, #4]
 800dd0a:	2bcc      	cmp	r3, #204	@ 0xcc
 800dd0c:	d001      	beq.n	800dd12 <FLASH_OB_GetRDP+0x1e>
  {
    return (OB_RDP_LEVEL_1);
 800dd0e:	23bb      	movs	r3, #187	@ 0xbb
 800dd10:	e002      	b.n	800dd18 <FLASH_OB_GetRDP+0x24>
  }
  else
  {
    return (READ_BIT(FLASH->OPTR, FLASH_OPTR_RDP));
 800dd12:	4b04      	ldr	r3, [pc, #16]	@ (800dd24 <FLASH_OB_GetRDP+0x30>)
 800dd14:	6a1b      	ldr	r3, [r3, #32]
 800dd16:	b2db      	uxtb	r3, r3
  }
}
 800dd18:	4618      	mov	r0, r3
 800dd1a:	370c      	adds	r7, #12
 800dd1c:	46bd      	mov	sp, r7
 800dd1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd22:	4770      	bx	lr
 800dd24:	40022000 	.word	0x40022000

0800dd28 <FLASH_OB_GetUser>:
  *         BOR_LEV(Bit8-10), nRST_STOP(Bit12), nRST_STDBY(Bit13), nRST_SHDW(Bit14),
  *         IWDG_SW(Bit16), IWDG_STOP(Bit17), IWDG_STDBY(Bit18), WWDG_SW(Bit19),
  *         nBOOT1(Bit23), SRAM2_PE(Bit24), SRAM2_RST(Bit25), nSWBOOT0(Bit26) and nBOOT0(Bit27).
  */
static uint32_t FLASH_OB_GetUser(void)
{
 800dd28:	b480      	push	{r7}
 800dd2a:	b083      	sub	sp, #12
 800dd2c:	af00      	add	r7, sp, #0
  uint32_t user_config = READ_REG(FLASH->OPTR);
 800dd2e:	4b07      	ldr	r3, [pc, #28]	@ (800dd4c <FLASH_OB_GetUser+0x24>)
 800dd30:	6a1b      	ldr	r3, [r3, #32]
 800dd32:	607b      	str	r3, [r7, #4]
  CLEAR_BIT(user_config, FLASH_OPTR_RDP);
 800dd34:	687b      	ldr	r3, [r7, #4]
 800dd36:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800dd3a:	607b      	str	r3, [r7, #4]

  return user_config;
 800dd3c:	687b      	ldr	r3, [r7, #4]
}
 800dd3e:	4618      	mov	r0, r3
 800dd40:	370c      	adds	r7, #12
 800dd42:	46bd      	mov	sp, r7
 800dd44:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd48:	4770      	bx	lr
 800dd4a:	bf00      	nop
 800dd4c:	40022000 	.word	0x40022000

0800dd50 <FLASH_OB_GetPCROP>:
  *                       the Proprietary code readout protection
  *
  * @retval None
  */
static void FLASH_OB_GetPCROP(uint32_t * PCROPConfig, uint32_t * PCROPStartAddr, uint32_t * PCROPEndAddr)
{
 800dd50:	b480      	push	{r7}
 800dd52:	b089      	sub	sp, #36	@ 0x24
 800dd54:	af00      	add	r7, sp, #0
 800dd56:	60f8      	str	r0, [r7, #12]
 800dd58:	60b9      	str	r1, [r7, #8]
 800dd5a:	607a      	str	r2, [r7, #4]
#if defined (STM32L471xx) || defined (STM32L475xx) || defined (STM32L476xx) || defined (STM32L485xx) || defined (STM32L486xx) || \
    defined (STM32L496xx) || defined (STM32L4A6xx) || \
    defined (STM32L4P5xx) || defined (STM32L4Q5xx) || \
    defined (STM32L4R5xx) || defined (STM32L4R7xx) || defined (STM32L4R9xx) || defined (STM32L4S5xx) || defined (STM32L4S7xx) || defined (STM32L4S9xx)
  /* Get the information about the bank swapping */
  if (READ_BIT(SYSCFG->MEMRMP, SYSCFG_MEMRMP_FB_MODE) == 0U)
 800dd5c:	4b3b      	ldr	r3, [pc, #236]	@ (800de4c <FLASH_OB_GetPCROP+0xfc>)
 800dd5e:	681b      	ldr	r3, [r3, #0]
 800dd60:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800dd64:	2b00      	cmp	r3, #0
 800dd66:	d115      	bne.n	800dd94 <FLASH_OB_GetPCROP+0x44>
  {
    bank1_addr = FLASH_BASE;
 800dd68:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800dd6c:	61fb      	str	r3, [r7, #28]
    bank2_addr = FLASH_BASE + FLASH_BANK_SIZE;
 800dd6e:	4b38      	ldr	r3, [pc, #224]	@ (800de50 <FLASH_OB_GetPCROP+0x100>)
 800dd70:	681b      	ldr	r3, [r3, #0]
 800dd72:	b29b      	uxth	r3, r3
 800dd74:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800dd78:	4293      	cmp	r3, r2
 800dd7a:	d008      	beq.n	800dd8e <FLASH_OB_GetPCROP+0x3e>
 800dd7c:	4b34      	ldr	r3, [pc, #208]	@ (800de50 <FLASH_OB_GetPCROP+0x100>)
 800dd7e:	681b      	ldr	r3, [r3, #0]
 800dd80:	029b      	lsls	r3, r3, #10
 800dd82:	085a      	lsrs	r2, r3, #1
 800dd84:	4b33      	ldr	r3, [pc, #204]	@ (800de54 <FLASH_OB_GetPCROP+0x104>)
 800dd86:	4013      	ands	r3, r2
 800dd88:	f103 6300 	add.w	r3, r3, #134217728	@ 0x8000000
 800dd8c:	e000      	b.n	800dd90 <FLASH_OB_GetPCROP+0x40>
 800dd8e:	4b32      	ldr	r3, [pc, #200]	@ (800de58 <FLASH_OB_GetPCROP+0x108>)
 800dd90:	61bb      	str	r3, [r7, #24]
 800dd92:	e014      	b.n	800ddbe <FLASH_OB_GetPCROP+0x6e>
  }
  else
  {
    bank1_addr = FLASH_BASE + FLASH_BANK_SIZE;
 800dd94:	4b2e      	ldr	r3, [pc, #184]	@ (800de50 <FLASH_OB_GetPCROP+0x100>)
 800dd96:	681b      	ldr	r3, [r3, #0]
 800dd98:	b29b      	uxth	r3, r3
 800dd9a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800dd9e:	4293      	cmp	r3, r2
 800dda0:	d008      	beq.n	800ddb4 <FLASH_OB_GetPCROP+0x64>
 800dda2:	4b2b      	ldr	r3, [pc, #172]	@ (800de50 <FLASH_OB_GetPCROP+0x100>)
 800dda4:	681b      	ldr	r3, [r3, #0]
 800dda6:	029b      	lsls	r3, r3, #10
 800dda8:	085a      	lsrs	r2, r3, #1
 800ddaa:	4b2a      	ldr	r3, [pc, #168]	@ (800de54 <FLASH_OB_GetPCROP+0x104>)
 800ddac:	4013      	ands	r3, r2
 800ddae:	f103 6300 	add.w	r3, r3, #134217728	@ 0x8000000
 800ddb2:	e000      	b.n	800ddb6 <FLASH_OB_GetPCROP+0x66>
 800ddb4:	4b28      	ldr	r3, [pc, #160]	@ (800de58 <FLASH_OB_GetPCROP+0x108>)
 800ddb6:	61fb      	str	r3, [r7, #28]
    bank2_addr = FLASH_BASE;
 800ddb8:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800ddbc:	61bb      	str	r3, [r7, #24]
    }
  }
  else
#endif
  {
    if(((*PCROPConfig) & FLASH_BANK_BOTH) == FLASH_BANK_1)
 800ddbe:	68fb      	ldr	r3, [r7, #12]
 800ddc0:	681b      	ldr	r3, [r3, #0]
 800ddc2:	f003 0303 	and.w	r3, r3, #3
 800ddc6:	2b01      	cmp	r3, #1
 800ddc8:	d115      	bne.n	800ddf6 <FLASH_OB_GetPCROP+0xa6>
    {
      reg_value       = (READ_REG(FLASH->PCROP1SR) & FLASH_PCROP1SR_PCROP1_STRT);
 800ddca:	4b24      	ldr	r3, [pc, #144]	@ (800de5c <FLASH_OB_GetPCROP+0x10c>)
 800ddcc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ddce:	b29b      	uxth	r3, r3
 800ddd0:	617b      	str	r3, [r7, #20]
      *PCROPStartAddr = (reg_value << 3) + bank1_addr;
 800ddd2:	697b      	ldr	r3, [r7, #20]
 800ddd4:	00da      	lsls	r2, r3, #3
 800ddd6:	69fb      	ldr	r3, [r7, #28]
 800ddd8:	441a      	add	r2, r3
 800ddda:	68bb      	ldr	r3, [r7, #8]
 800dddc:	601a      	str	r2, [r3, #0]

      reg_value     = (READ_REG(FLASH->PCROP1ER) & FLASH_PCROP1ER_PCROP1_END);
 800ddde:	4b1f      	ldr	r3, [pc, #124]	@ (800de5c <FLASH_OB_GetPCROP+0x10c>)
 800dde0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800dde2:	b29b      	uxth	r3, r3
 800dde4:	617b      	str	r3, [r7, #20]
      *PCROPEndAddr = (reg_value << 3) + bank1_addr + 0x7U;
 800dde6:	697b      	ldr	r3, [r7, #20]
 800dde8:	00da      	lsls	r2, r3, #3
 800ddea:	69fb      	ldr	r3, [r7, #28]
 800ddec:	4413      	add	r3, r2
 800ddee:	1dda      	adds	r2, r3, #7
 800ddf0:	687b      	ldr	r3, [r7, #4]
 800ddf2:	601a      	str	r2, [r3, #0]
 800ddf4:	e01a      	b.n	800de2c <FLASH_OB_GetPCROP+0xdc>
    }
#if defined (STM32L471xx) || defined (STM32L475xx) || defined (STM32L476xx) || defined (STM32L485xx) || defined (STM32L486xx) || \
    defined (STM32L496xx) || defined (STM32L4A6xx) || \
    defined (STM32L4P5xx) || defined (STM32L4Q5xx) || \
    defined (STM32L4R5xx) || defined (STM32L4R7xx) || defined (STM32L4R9xx) || defined (STM32L4S5xx) || defined (STM32L4S7xx) || defined (STM32L4S9xx)
    else if(((*PCROPConfig) & FLASH_BANK_BOTH) == FLASH_BANK_2)
 800ddf6:	68fb      	ldr	r3, [r7, #12]
 800ddf8:	681b      	ldr	r3, [r3, #0]
 800ddfa:	f003 0303 	and.w	r3, r3, #3
 800ddfe:	2b02      	cmp	r3, #2
 800de00:	d114      	bne.n	800de2c <FLASH_OB_GetPCROP+0xdc>
    {
      reg_value       = (READ_REG(FLASH->PCROP2SR) & FLASH_PCROP2SR_PCROP2_STRT);
 800de02:	4b16      	ldr	r3, [pc, #88]	@ (800de5c <FLASH_OB_GetPCROP+0x10c>)
 800de04:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800de06:	b29b      	uxth	r3, r3
 800de08:	617b      	str	r3, [r7, #20]
      *PCROPStartAddr = (reg_value << 3) + bank2_addr;
 800de0a:	697b      	ldr	r3, [r7, #20]
 800de0c:	00da      	lsls	r2, r3, #3
 800de0e:	69bb      	ldr	r3, [r7, #24]
 800de10:	441a      	add	r2, r3
 800de12:	68bb      	ldr	r3, [r7, #8]
 800de14:	601a      	str	r2, [r3, #0]

      reg_value     = (READ_REG(FLASH->PCROP2ER) & FLASH_PCROP2ER_PCROP2_END);
 800de16:	4b11      	ldr	r3, [pc, #68]	@ (800de5c <FLASH_OB_GetPCROP+0x10c>)
 800de18:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800de1a:	b29b      	uxth	r3, r3
 800de1c:	617b      	str	r3, [r7, #20]
      *PCROPEndAddr = (reg_value << 3) + bank2_addr + 0x7U;
 800de1e:	697b      	ldr	r3, [r7, #20]
 800de20:	00da      	lsls	r2, r3, #3
 800de22:	69bb      	ldr	r3, [r7, #24]
 800de24:	4413      	add	r3, r2
 800de26:	1dda      	adds	r2, r3, #7
 800de28:	687b      	ldr	r3, [r7, #4]
 800de2a:	601a      	str	r2, [r3, #0]
    {
      /* Nothing to do */
    }
  }

  *PCROPConfig |= (READ_REG(FLASH->PCROP1ER) & FLASH_PCROP1ER_PCROP_RDP);
 800de2c:	4b0b      	ldr	r3, [pc, #44]	@ (800de5c <FLASH_OB_GetPCROP+0x10c>)
 800de2e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800de30:	f003 4200 	and.w	r2, r3, #2147483648	@ 0x80000000
 800de34:	68fb      	ldr	r3, [r7, #12]
 800de36:	681b      	ldr	r3, [r3, #0]
 800de38:	431a      	orrs	r2, r3
 800de3a:	68fb      	ldr	r3, [r7, #12]
 800de3c:	601a      	str	r2, [r3, #0]
}
 800de3e:	bf00      	nop
 800de40:	3724      	adds	r7, #36	@ 0x24
 800de42:	46bd      	mov	sp, r7
 800de44:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de48:	4770      	bx	lr
 800de4a:	bf00      	nop
 800de4c:	40010000 	.word	0x40010000
 800de50:	1fff75e0 	.word	0x1fff75e0
 800de54:	01fffe00 	.word	0x01fffe00
 800de58:	08080000 	.word	0x08080000
 800de5c:	40022000 	.word	0x40022000

0800de60 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800de60:	b480      	push	{r7}
 800de62:	b087      	sub	sp, #28
 800de64:	af00      	add	r7, sp, #0
 800de66:	6078      	str	r0, [r7, #4]
 800de68:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800de6a:	2300      	movs	r3, #0
 800de6c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800de6e:	e17f      	b.n	800e170 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800de70:	683b      	ldr	r3, [r7, #0]
 800de72:	681a      	ldr	r2, [r3, #0]
 800de74:	2101      	movs	r1, #1
 800de76:	697b      	ldr	r3, [r7, #20]
 800de78:	fa01 f303 	lsl.w	r3, r1, r3
 800de7c:	4013      	ands	r3, r2
 800de7e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800de80:	68fb      	ldr	r3, [r7, #12]
 800de82:	2b00      	cmp	r3, #0
 800de84:	f000 8171 	beq.w	800e16a <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800de88:	683b      	ldr	r3, [r7, #0]
 800de8a:	685b      	ldr	r3, [r3, #4]
 800de8c:	f003 0303 	and.w	r3, r3, #3
 800de90:	2b01      	cmp	r3, #1
 800de92:	d005      	beq.n	800dea0 <HAL_GPIO_Init+0x40>
 800de94:	683b      	ldr	r3, [r7, #0]
 800de96:	685b      	ldr	r3, [r3, #4]
 800de98:	f003 0303 	and.w	r3, r3, #3
 800de9c:	2b02      	cmp	r3, #2
 800de9e:	d130      	bne.n	800df02 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800dea0:	687b      	ldr	r3, [r7, #4]
 800dea2:	689b      	ldr	r3, [r3, #8]
 800dea4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800dea6:	697b      	ldr	r3, [r7, #20]
 800dea8:	005b      	lsls	r3, r3, #1
 800deaa:	2203      	movs	r2, #3
 800deac:	fa02 f303 	lsl.w	r3, r2, r3
 800deb0:	43db      	mvns	r3, r3
 800deb2:	693a      	ldr	r2, [r7, #16]
 800deb4:	4013      	ands	r3, r2
 800deb6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800deb8:	683b      	ldr	r3, [r7, #0]
 800deba:	68da      	ldr	r2, [r3, #12]
 800debc:	697b      	ldr	r3, [r7, #20]
 800debe:	005b      	lsls	r3, r3, #1
 800dec0:	fa02 f303 	lsl.w	r3, r2, r3
 800dec4:	693a      	ldr	r2, [r7, #16]
 800dec6:	4313      	orrs	r3, r2
 800dec8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800deca:	687b      	ldr	r3, [r7, #4]
 800decc:	693a      	ldr	r2, [r7, #16]
 800dece:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800ded0:	687b      	ldr	r3, [r7, #4]
 800ded2:	685b      	ldr	r3, [r3, #4]
 800ded4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800ded6:	2201      	movs	r2, #1
 800ded8:	697b      	ldr	r3, [r7, #20]
 800deda:	fa02 f303 	lsl.w	r3, r2, r3
 800dede:	43db      	mvns	r3, r3
 800dee0:	693a      	ldr	r2, [r7, #16]
 800dee2:	4013      	ands	r3, r2
 800dee4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800dee6:	683b      	ldr	r3, [r7, #0]
 800dee8:	685b      	ldr	r3, [r3, #4]
 800deea:	091b      	lsrs	r3, r3, #4
 800deec:	f003 0201 	and.w	r2, r3, #1
 800def0:	697b      	ldr	r3, [r7, #20]
 800def2:	fa02 f303 	lsl.w	r3, r2, r3
 800def6:	693a      	ldr	r2, [r7, #16]
 800def8:	4313      	orrs	r3, r2
 800defa:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800defc:	687b      	ldr	r3, [r7, #4]
 800defe:	693a      	ldr	r2, [r7, #16]
 800df00:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 800df02:	683b      	ldr	r3, [r7, #0]
 800df04:	685b      	ldr	r3, [r3, #4]
 800df06:	f003 0303 	and.w	r3, r3, #3
 800df0a:	2b03      	cmp	r3, #3
 800df0c:	d118      	bne.n	800df40 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 800df0e:	687b      	ldr	r3, [r7, #4]
 800df10:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800df12:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 800df14:	2201      	movs	r2, #1
 800df16:	697b      	ldr	r3, [r7, #20]
 800df18:	fa02 f303 	lsl.w	r3, r2, r3
 800df1c:	43db      	mvns	r3, r3
 800df1e:	693a      	ldr	r2, [r7, #16]
 800df20:	4013      	ands	r3, r2
 800df22:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 800df24:	683b      	ldr	r3, [r7, #0]
 800df26:	685b      	ldr	r3, [r3, #4]
 800df28:	08db      	lsrs	r3, r3, #3
 800df2a:	f003 0201 	and.w	r2, r3, #1
 800df2e:	697b      	ldr	r3, [r7, #20]
 800df30:	fa02 f303 	lsl.w	r3, r2, r3
 800df34:	693a      	ldr	r2, [r7, #16]
 800df36:	4313      	orrs	r3, r2
 800df38:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 800df3a:	687b      	ldr	r3, [r7, #4]
 800df3c:	693a      	ldr	r2, [r7, #16]
 800df3e:	62da      	str	r2, [r3, #44]	@ 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800df40:	683b      	ldr	r3, [r7, #0]
 800df42:	685b      	ldr	r3, [r3, #4]
 800df44:	f003 0303 	and.w	r3, r3, #3
 800df48:	2b03      	cmp	r3, #3
 800df4a:	d017      	beq.n	800df7c <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 800df4c:	687b      	ldr	r3, [r7, #4]
 800df4e:	68db      	ldr	r3, [r3, #12]
 800df50:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800df52:	697b      	ldr	r3, [r7, #20]
 800df54:	005b      	lsls	r3, r3, #1
 800df56:	2203      	movs	r2, #3
 800df58:	fa02 f303 	lsl.w	r3, r2, r3
 800df5c:	43db      	mvns	r3, r3
 800df5e:	693a      	ldr	r2, [r7, #16]
 800df60:	4013      	ands	r3, r2
 800df62:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800df64:	683b      	ldr	r3, [r7, #0]
 800df66:	689a      	ldr	r2, [r3, #8]
 800df68:	697b      	ldr	r3, [r7, #20]
 800df6a:	005b      	lsls	r3, r3, #1
 800df6c:	fa02 f303 	lsl.w	r3, r2, r3
 800df70:	693a      	ldr	r2, [r7, #16]
 800df72:	4313      	orrs	r3, r2
 800df74:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800df76:	687b      	ldr	r3, [r7, #4]
 800df78:	693a      	ldr	r2, [r7, #16]
 800df7a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800df7c:	683b      	ldr	r3, [r7, #0]
 800df7e:	685b      	ldr	r3, [r3, #4]
 800df80:	f003 0303 	and.w	r3, r3, #3
 800df84:	2b02      	cmp	r3, #2
 800df86:	d123      	bne.n	800dfd0 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800df88:	697b      	ldr	r3, [r7, #20]
 800df8a:	08da      	lsrs	r2, r3, #3
 800df8c:	687b      	ldr	r3, [r7, #4]
 800df8e:	3208      	adds	r2, #8
 800df90:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800df94:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800df96:	697b      	ldr	r3, [r7, #20]
 800df98:	f003 0307 	and.w	r3, r3, #7
 800df9c:	009b      	lsls	r3, r3, #2
 800df9e:	220f      	movs	r2, #15
 800dfa0:	fa02 f303 	lsl.w	r3, r2, r3
 800dfa4:	43db      	mvns	r3, r3
 800dfa6:	693a      	ldr	r2, [r7, #16]
 800dfa8:	4013      	ands	r3, r2
 800dfaa:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800dfac:	683b      	ldr	r3, [r7, #0]
 800dfae:	691a      	ldr	r2, [r3, #16]
 800dfb0:	697b      	ldr	r3, [r7, #20]
 800dfb2:	f003 0307 	and.w	r3, r3, #7
 800dfb6:	009b      	lsls	r3, r3, #2
 800dfb8:	fa02 f303 	lsl.w	r3, r2, r3
 800dfbc:	693a      	ldr	r2, [r7, #16]
 800dfbe:	4313      	orrs	r3, r2
 800dfc0:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800dfc2:	697b      	ldr	r3, [r7, #20]
 800dfc4:	08da      	lsrs	r2, r3, #3
 800dfc6:	687b      	ldr	r3, [r7, #4]
 800dfc8:	3208      	adds	r2, #8
 800dfca:	6939      	ldr	r1, [r7, #16]
 800dfcc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800dfd0:	687b      	ldr	r3, [r7, #4]
 800dfd2:	681b      	ldr	r3, [r3, #0]
 800dfd4:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800dfd6:	697b      	ldr	r3, [r7, #20]
 800dfd8:	005b      	lsls	r3, r3, #1
 800dfda:	2203      	movs	r2, #3
 800dfdc:	fa02 f303 	lsl.w	r3, r2, r3
 800dfe0:	43db      	mvns	r3, r3
 800dfe2:	693a      	ldr	r2, [r7, #16]
 800dfe4:	4013      	ands	r3, r2
 800dfe6:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800dfe8:	683b      	ldr	r3, [r7, #0]
 800dfea:	685b      	ldr	r3, [r3, #4]
 800dfec:	f003 0203 	and.w	r2, r3, #3
 800dff0:	697b      	ldr	r3, [r7, #20]
 800dff2:	005b      	lsls	r3, r3, #1
 800dff4:	fa02 f303 	lsl.w	r3, r2, r3
 800dff8:	693a      	ldr	r2, [r7, #16]
 800dffa:	4313      	orrs	r3, r2
 800dffc:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800dffe:	687b      	ldr	r3, [r7, #4]
 800e000:	693a      	ldr	r2, [r7, #16]
 800e002:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800e004:	683b      	ldr	r3, [r7, #0]
 800e006:	685b      	ldr	r3, [r3, #4]
 800e008:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800e00c:	2b00      	cmp	r3, #0
 800e00e:	f000 80ac 	beq.w	800e16a <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800e012:	4b5f      	ldr	r3, [pc, #380]	@ (800e190 <HAL_GPIO_Init+0x330>)
 800e014:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800e016:	4a5e      	ldr	r2, [pc, #376]	@ (800e190 <HAL_GPIO_Init+0x330>)
 800e018:	f043 0301 	orr.w	r3, r3, #1
 800e01c:	6613      	str	r3, [r2, #96]	@ 0x60
 800e01e:	4b5c      	ldr	r3, [pc, #368]	@ (800e190 <HAL_GPIO_Init+0x330>)
 800e020:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800e022:	f003 0301 	and.w	r3, r3, #1
 800e026:	60bb      	str	r3, [r7, #8]
 800e028:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800e02a:	4a5a      	ldr	r2, [pc, #360]	@ (800e194 <HAL_GPIO_Init+0x334>)
 800e02c:	697b      	ldr	r3, [r7, #20]
 800e02e:	089b      	lsrs	r3, r3, #2
 800e030:	3302      	adds	r3, #2
 800e032:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e036:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800e038:	697b      	ldr	r3, [r7, #20]
 800e03a:	f003 0303 	and.w	r3, r3, #3
 800e03e:	009b      	lsls	r3, r3, #2
 800e040:	220f      	movs	r2, #15
 800e042:	fa02 f303 	lsl.w	r3, r2, r3
 800e046:	43db      	mvns	r3, r3
 800e048:	693a      	ldr	r2, [r7, #16]
 800e04a:	4013      	ands	r3, r2
 800e04c:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800e04e:	687b      	ldr	r3, [r7, #4]
 800e050:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 800e054:	d025      	beq.n	800e0a2 <HAL_GPIO_Init+0x242>
 800e056:	687b      	ldr	r3, [r7, #4]
 800e058:	4a4f      	ldr	r2, [pc, #316]	@ (800e198 <HAL_GPIO_Init+0x338>)
 800e05a:	4293      	cmp	r3, r2
 800e05c:	d01f      	beq.n	800e09e <HAL_GPIO_Init+0x23e>
 800e05e:	687b      	ldr	r3, [r7, #4]
 800e060:	4a4e      	ldr	r2, [pc, #312]	@ (800e19c <HAL_GPIO_Init+0x33c>)
 800e062:	4293      	cmp	r3, r2
 800e064:	d019      	beq.n	800e09a <HAL_GPIO_Init+0x23a>
 800e066:	687b      	ldr	r3, [r7, #4]
 800e068:	4a4d      	ldr	r2, [pc, #308]	@ (800e1a0 <HAL_GPIO_Init+0x340>)
 800e06a:	4293      	cmp	r3, r2
 800e06c:	d013      	beq.n	800e096 <HAL_GPIO_Init+0x236>
 800e06e:	687b      	ldr	r3, [r7, #4]
 800e070:	4a4c      	ldr	r2, [pc, #304]	@ (800e1a4 <HAL_GPIO_Init+0x344>)
 800e072:	4293      	cmp	r3, r2
 800e074:	d00d      	beq.n	800e092 <HAL_GPIO_Init+0x232>
 800e076:	687b      	ldr	r3, [r7, #4]
 800e078:	4a4b      	ldr	r2, [pc, #300]	@ (800e1a8 <HAL_GPIO_Init+0x348>)
 800e07a:	4293      	cmp	r3, r2
 800e07c:	d007      	beq.n	800e08e <HAL_GPIO_Init+0x22e>
 800e07e:	687b      	ldr	r3, [r7, #4]
 800e080:	4a4a      	ldr	r2, [pc, #296]	@ (800e1ac <HAL_GPIO_Init+0x34c>)
 800e082:	4293      	cmp	r3, r2
 800e084:	d101      	bne.n	800e08a <HAL_GPIO_Init+0x22a>
 800e086:	2306      	movs	r3, #6
 800e088:	e00c      	b.n	800e0a4 <HAL_GPIO_Init+0x244>
 800e08a:	2307      	movs	r3, #7
 800e08c:	e00a      	b.n	800e0a4 <HAL_GPIO_Init+0x244>
 800e08e:	2305      	movs	r3, #5
 800e090:	e008      	b.n	800e0a4 <HAL_GPIO_Init+0x244>
 800e092:	2304      	movs	r3, #4
 800e094:	e006      	b.n	800e0a4 <HAL_GPIO_Init+0x244>
 800e096:	2303      	movs	r3, #3
 800e098:	e004      	b.n	800e0a4 <HAL_GPIO_Init+0x244>
 800e09a:	2302      	movs	r3, #2
 800e09c:	e002      	b.n	800e0a4 <HAL_GPIO_Init+0x244>
 800e09e:	2301      	movs	r3, #1
 800e0a0:	e000      	b.n	800e0a4 <HAL_GPIO_Init+0x244>
 800e0a2:	2300      	movs	r3, #0
 800e0a4:	697a      	ldr	r2, [r7, #20]
 800e0a6:	f002 0203 	and.w	r2, r2, #3
 800e0aa:	0092      	lsls	r2, r2, #2
 800e0ac:	4093      	lsls	r3, r2
 800e0ae:	693a      	ldr	r2, [r7, #16]
 800e0b0:	4313      	orrs	r3, r2
 800e0b2:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800e0b4:	4937      	ldr	r1, [pc, #220]	@ (800e194 <HAL_GPIO_Init+0x334>)
 800e0b6:	697b      	ldr	r3, [r7, #20]
 800e0b8:	089b      	lsrs	r3, r3, #2
 800e0ba:	3302      	adds	r3, #2
 800e0bc:	693a      	ldr	r2, [r7, #16]
 800e0be:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800e0c2:	4b3b      	ldr	r3, [pc, #236]	@ (800e1b0 <HAL_GPIO_Init+0x350>)
 800e0c4:	689b      	ldr	r3, [r3, #8]
 800e0c6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800e0c8:	68fb      	ldr	r3, [r7, #12]
 800e0ca:	43db      	mvns	r3, r3
 800e0cc:	693a      	ldr	r2, [r7, #16]
 800e0ce:	4013      	ands	r3, r2
 800e0d0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800e0d2:	683b      	ldr	r3, [r7, #0]
 800e0d4:	685b      	ldr	r3, [r3, #4]
 800e0d6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800e0da:	2b00      	cmp	r3, #0
 800e0dc:	d003      	beq.n	800e0e6 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 800e0de:	693a      	ldr	r2, [r7, #16]
 800e0e0:	68fb      	ldr	r3, [r7, #12]
 800e0e2:	4313      	orrs	r3, r2
 800e0e4:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800e0e6:	4a32      	ldr	r2, [pc, #200]	@ (800e1b0 <HAL_GPIO_Init+0x350>)
 800e0e8:	693b      	ldr	r3, [r7, #16]
 800e0ea:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800e0ec:	4b30      	ldr	r3, [pc, #192]	@ (800e1b0 <HAL_GPIO_Init+0x350>)
 800e0ee:	68db      	ldr	r3, [r3, #12]
 800e0f0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800e0f2:	68fb      	ldr	r3, [r7, #12]
 800e0f4:	43db      	mvns	r3, r3
 800e0f6:	693a      	ldr	r2, [r7, #16]
 800e0f8:	4013      	ands	r3, r2
 800e0fa:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800e0fc:	683b      	ldr	r3, [r7, #0]
 800e0fe:	685b      	ldr	r3, [r3, #4]
 800e100:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800e104:	2b00      	cmp	r3, #0
 800e106:	d003      	beq.n	800e110 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 800e108:	693a      	ldr	r2, [r7, #16]
 800e10a:	68fb      	ldr	r3, [r7, #12]
 800e10c:	4313      	orrs	r3, r2
 800e10e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800e110:	4a27      	ldr	r2, [pc, #156]	@ (800e1b0 <HAL_GPIO_Init+0x350>)
 800e112:	693b      	ldr	r3, [r7, #16]
 800e114:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 800e116:	4b26      	ldr	r3, [pc, #152]	@ (800e1b0 <HAL_GPIO_Init+0x350>)
 800e118:	685b      	ldr	r3, [r3, #4]
 800e11a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800e11c:	68fb      	ldr	r3, [r7, #12]
 800e11e:	43db      	mvns	r3, r3
 800e120:	693a      	ldr	r2, [r7, #16]
 800e122:	4013      	ands	r3, r2
 800e124:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800e126:	683b      	ldr	r3, [r7, #0]
 800e128:	685b      	ldr	r3, [r3, #4]
 800e12a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800e12e:	2b00      	cmp	r3, #0
 800e130:	d003      	beq.n	800e13a <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 800e132:	693a      	ldr	r2, [r7, #16]
 800e134:	68fb      	ldr	r3, [r7, #12]
 800e136:	4313      	orrs	r3, r2
 800e138:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800e13a:	4a1d      	ldr	r2, [pc, #116]	@ (800e1b0 <HAL_GPIO_Init+0x350>)
 800e13c:	693b      	ldr	r3, [r7, #16]
 800e13e:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 800e140:	4b1b      	ldr	r3, [pc, #108]	@ (800e1b0 <HAL_GPIO_Init+0x350>)
 800e142:	681b      	ldr	r3, [r3, #0]
 800e144:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800e146:	68fb      	ldr	r3, [r7, #12]
 800e148:	43db      	mvns	r3, r3
 800e14a:	693a      	ldr	r2, [r7, #16]
 800e14c:	4013      	ands	r3, r2
 800e14e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800e150:	683b      	ldr	r3, [r7, #0]
 800e152:	685b      	ldr	r3, [r3, #4]
 800e154:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800e158:	2b00      	cmp	r3, #0
 800e15a:	d003      	beq.n	800e164 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 800e15c:	693a      	ldr	r2, [r7, #16]
 800e15e:	68fb      	ldr	r3, [r7, #12]
 800e160:	4313      	orrs	r3, r2
 800e162:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800e164:	4a12      	ldr	r2, [pc, #72]	@ (800e1b0 <HAL_GPIO_Init+0x350>)
 800e166:	693b      	ldr	r3, [r7, #16]
 800e168:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800e16a:	697b      	ldr	r3, [r7, #20]
 800e16c:	3301      	adds	r3, #1
 800e16e:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800e170:	683b      	ldr	r3, [r7, #0]
 800e172:	681a      	ldr	r2, [r3, #0]
 800e174:	697b      	ldr	r3, [r7, #20]
 800e176:	fa22 f303 	lsr.w	r3, r2, r3
 800e17a:	2b00      	cmp	r3, #0
 800e17c:	f47f ae78 	bne.w	800de70 <HAL_GPIO_Init+0x10>
  }
}
 800e180:	bf00      	nop
 800e182:	bf00      	nop
 800e184:	371c      	adds	r7, #28
 800e186:	46bd      	mov	sp, r7
 800e188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e18c:	4770      	bx	lr
 800e18e:	bf00      	nop
 800e190:	40021000 	.word	0x40021000
 800e194:	40010000 	.word	0x40010000
 800e198:	48000400 	.word	0x48000400
 800e19c:	48000800 	.word	0x48000800
 800e1a0:	48000c00 	.word	0x48000c00
 800e1a4:	48001000 	.word	0x48001000
 800e1a8:	48001400 	.word	0x48001400
 800e1ac:	48001800 	.word	0x48001800
 800e1b0:	40010400 	.word	0x40010400

0800e1b4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800e1b4:	b480      	push	{r7}
 800e1b6:	b085      	sub	sp, #20
 800e1b8:	af00      	add	r7, sp, #0
 800e1ba:	6078      	str	r0, [r7, #4]
 800e1bc:	460b      	mov	r3, r1
 800e1be:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 800e1c0:	687b      	ldr	r3, [r7, #4]
 800e1c2:	691a      	ldr	r2, [r3, #16]
 800e1c4:	887b      	ldrh	r3, [r7, #2]
 800e1c6:	4013      	ands	r3, r2
 800e1c8:	2b00      	cmp	r3, #0
 800e1ca:	d002      	beq.n	800e1d2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800e1cc:	2301      	movs	r3, #1
 800e1ce:	73fb      	strb	r3, [r7, #15]
 800e1d0:	e001      	b.n	800e1d6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800e1d2:	2300      	movs	r3, #0
 800e1d4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800e1d6:	7bfb      	ldrb	r3, [r7, #15]
}
 800e1d8:	4618      	mov	r0, r3
 800e1da:	3714      	adds	r7, #20
 800e1dc:	46bd      	mov	sp, r7
 800e1de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e1e2:	4770      	bx	lr

0800e1e4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800e1e4:	b480      	push	{r7}
 800e1e6:	b083      	sub	sp, #12
 800e1e8:	af00      	add	r7, sp, #0
 800e1ea:	6078      	str	r0, [r7, #4]
 800e1ec:	460b      	mov	r3, r1
 800e1ee:	807b      	strh	r3, [r7, #2]
 800e1f0:	4613      	mov	r3, r2
 800e1f2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800e1f4:	787b      	ldrb	r3, [r7, #1]
 800e1f6:	2b00      	cmp	r3, #0
 800e1f8:	d003      	beq.n	800e202 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800e1fa:	887a      	ldrh	r2, [r7, #2]
 800e1fc:	687b      	ldr	r3, [r7, #4]
 800e1fe:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800e200:	e002      	b.n	800e208 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800e202:	887a      	ldrh	r2, [r7, #2]
 800e204:	687b      	ldr	r3, [r7, #4]
 800e206:	629a      	str	r2, [r3, #40]	@ 0x28
}
 800e208:	bf00      	nop
 800e20a:	370c      	adds	r7, #12
 800e20c:	46bd      	mov	sp, r7
 800e20e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e212:	4770      	bx	lr

0800e214 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800e214:	b580      	push	{r7, lr}
 800e216:	b082      	sub	sp, #8
 800e218:	af00      	add	r7, sp, #0
 800e21a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800e21c:	687b      	ldr	r3, [r7, #4]
 800e21e:	2b00      	cmp	r3, #0
 800e220:	d101      	bne.n	800e226 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800e222:	2301      	movs	r3, #1
 800e224:	e08d      	b.n	800e342 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800e226:	687b      	ldr	r3, [r7, #4]
 800e228:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800e22c:	b2db      	uxtb	r3, r3
 800e22e:	2b00      	cmp	r3, #0
 800e230:	d106      	bne.n	800e240 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800e232:	687b      	ldr	r3, [r7, #4]
 800e234:	2200      	movs	r2, #0
 800e236:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800e23a:	6878      	ldr	r0, [r7, #4]
 800e23c:	f7f9 f8b8 	bl	80073b0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800e240:	687b      	ldr	r3, [r7, #4]
 800e242:	2224      	movs	r2, #36	@ 0x24
 800e244:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800e248:	687b      	ldr	r3, [r7, #4]
 800e24a:	681b      	ldr	r3, [r3, #0]
 800e24c:	681a      	ldr	r2, [r3, #0]
 800e24e:	687b      	ldr	r3, [r7, #4]
 800e250:	681b      	ldr	r3, [r3, #0]
 800e252:	f022 0201 	bic.w	r2, r2, #1
 800e256:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800e258:	687b      	ldr	r3, [r7, #4]
 800e25a:	685a      	ldr	r2, [r3, #4]
 800e25c:	687b      	ldr	r3, [r7, #4]
 800e25e:	681b      	ldr	r3, [r3, #0]
 800e260:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 800e264:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800e266:	687b      	ldr	r3, [r7, #4]
 800e268:	681b      	ldr	r3, [r3, #0]
 800e26a:	689a      	ldr	r2, [r3, #8]
 800e26c:	687b      	ldr	r3, [r7, #4]
 800e26e:	681b      	ldr	r3, [r3, #0]
 800e270:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800e274:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800e276:	687b      	ldr	r3, [r7, #4]
 800e278:	68db      	ldr	r3, [r3, #12]
 800e27a:	2b01      	cmp	r3, #1
 800e27c:	d107      	bne.n	800e28e <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800e27e:	687b      	ldr	r3, [r7, #4]
 800e280:	689a      	ldr	r2, [r3, #8]
 800e282:	687b      	ldr	r3, [r7, #4]
 800e284:	681b      	ldr	r3, [r3, #0]
 800e286:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800e28a:	609a      	str	r2, [r3, #8]
 800e28c:	e006      	b.n	800e29c <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800e28e:	687b      	ldr	r3, [r7, #4]
 800e290:	689a      	ldr	r2, [r3, #8]
 800e292:	687b      	ldr	r3, [r7, #4]
 800e294:	681b      	ldr	r3, [r3, #0]
 800e296:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 800e29a:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800e29c:	687b      	ldr	r3, [r7, #4]
 800e29e:	68db      	ldr	r3, [r3, #12]
 800e2a0:	2b02      	cmp	r3, #2
 800e2a2:	d108      	bne.n	800e2b6 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800e2a4:	687b      	ldr	r3, [r7, #4]
 800e2a6:	681b      	ldr	r3, [r3, #0]
 800e2a8:	685a      	ldr	r2, [r3, #4]
 800e2aa:	687b      	ldr	r3, [r7, #4]
 800e2ac:	681b      	ldr	r3, [r3, #0]
 800e2ae:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800e2b2:	605a      	str	r2, [r3, #4]
 800e2b4:	e007      	b.n	800e2c6 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800e2b6:	687b      	ldr	r3, [r7, #4]
 800e2b8:	681b      	ldr	r3, [r3, #0]
 800e2ba:	685a      	ldr	r2, [r3, #4]
 800e2bc:	687b      	ldr	r3, [r7, #4]
 800e2be:	681b      	ldr	r3, [r3, #0]
 800e2c0:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800e2c4:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800e2c6:	687b      	ldr	r3, [r7, #4]
 800e2c8:	681b      	ldr	r3, [r3, #0]
 800e2ca:	685b      	ldr	r3, [r3, #4]
 800e2cc:	687a      	ldr	r2, [r7, #4]
 800e2ce:	6812      	ldr	r2, [r2, #0]
 800e2d0:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800e2d4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800e2d8:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800e2da:	687b      	ldr	r3, [r7, #4]
 800e2dc:	681b      	ldr	r3, [r3, #0]
 800e2de:	68da      	ldr	r2, [r3, #12]
 800e2e0:	687b      	ldr	r3, [r7, #4]
 800e2e2:	681b      	ldr	r3, [r3, #0]
 800e2e4:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800e2e8:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800e2ea:	687b      	ldr	r3, [r7, #4]
 800e2ec:	691a      	ldr	r2, [r3, #16]
 800e2ee:	687b      	ldr	r3, [r7, #4]
 800e2f0:	695b      	ldr	r3, [r3, #20]
 800e2f2:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800e2f6:	687b      	ldr	r3, [r7, #4]
 800e2f8:	699b      	ldr	r3, [r3, #24]
 800e2fa:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800e2fc:	687b      	ldr	r3, [r7, #4]
 800e2fe:	681b      	ldr	r3, [r3, #0]
 800e300:	430a      	orrs	r2, r1
 800e302:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800e304:	687b      	ldr	r3, [r7, #4]
 800e306:	69d9      	ldr	r1, [r3, #28]
 800e308:	687b      	ldr	r3, [r7, #4]
 800e30a:	6a1a      	ldr	r2, [r3, #32]
 800e30c:	687b      	ldr	r3, [r7, #4]
 800e30e:	681b      	ldr	r3, [r3, #0]
 800e310:	430a      	orrs	r2, r1
 800e312:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800e314:	687b      	ldr	r3, [r7, #4]
 800e316:	681b      	ldr	r3, [r3, #0]
 800e318:	681a      	ldr	r2, [r3, #0]
 800e31a:	687b      	ldr	r3, [r7, #4]
 800e31c:	681b      	ldr	r3, [r3, #0]
 800e31e:	f042 0201 	orr.w	r2, r2, #1
 800e322:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800e324:	687b      	ldr	r3, [r7, #4]
 800e326:	2200      	movs	r2, #0
 800e328:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800e32a:	687b      	ldr	r3, [r7, #4]
 800e32c:	2220      	movs	r2, #32
 800e32e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800e332:	687b      	ldr	r3, [r7, #4]
 800e334:	2200      	movs	r2, #0
 800e336:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800e338:	687b      	ldr	r3, [r7, #4]
 800e33a:	2200      	movs	r2, #0
 800e33c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 800e340:	2300      	movs	r3, #0
}
 800e342:	4618      	mov	r0, r3
 800e344:	3708      	adds	r7, #8
 800e346:	46bd      	mov	sp, r7
 800e348:	bd80      	pop	{r7, pc}
	...

0800e34c <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 800e34c:	b580      	push	{r7, lr}
 800e34e:	b088      	sub	sp, #32
 800e350:	af02      	add	r7, sp, #8
 800e352:	60f8      	str	r0, [r7, #12]
 800e354:	607a      	str	r2, [r7, #4]
 800e356:	461a      	mov	r2, r3
 800e358:	460b      	mov	r3, r1
 800e35a:	817b      	strh	r3, [r7, #10]
 800e35c:	4613      	mov	r3, r2
 800e35e:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800e360:	68fb      	ldr	r3, [r7, #12]
 800e362:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800e366:	b2db      	uxtb	r3, r3
 800e368:	2b20      	cmp	r3, #32
 800e36a:	f040 80fd 	bne.w	800e568 <HAL_I2C_Master_Transmit+0x21c>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800e36e:	68fb      	ldr	r3, [r7, #12]
 800e370:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800e374:	2b01      	cmp	r3, #1
 800e376:	d101      	bne.n	800e37c <HAL_I2C_Master_Transmit+0x30>
 800e378:	2302      	movs	r3, #2
 800e37a:	e0f6      	b.n	800e56a <HAL_I2C_Master_Transmit+0x21e>
 800e37c:	68fb      	ldr	r3, [r7, #12]
 800e37e:	2201      	movs	r2, #1
 800e380:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800e384:	f7fc fd38 	bl	800adf8 <HAL_GetTick>
 800e388:	6138      	str	r0, [r7, #16]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800e38a:	693b      	ldr	r3, [r7, #16]
 800e38c:	9300      	str	r3, [sp, #0]
 800e38e:	2319      	movs	r3, #25
 800e390:	2201      	movs	r2, #1
 800e392:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800e396:	68f8      	ldr	r0, [r7, #12]
 800e398:	f000 fa0a 	bl	800e7b0 <I2C_WaitOnFlagUntilTimeout>
 800e39c:	4603      	mov	r3, r0
 800e39e:	2b00      	cmp	r3, #0
 800e3a0:	d001      	beq.n	800e3a6 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 800e3a2:	2301      	movs	r3, #1
 800e3a4:	e0e1      	b.n	800e56a <HAL_I2C_Master_Transmit+0x21e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800e3a6:	68fb      	ldr	r3, [r7, #12]
 800e3a8:	2221      	movs	r2, #33	@ 0x21
 800e3aa:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800e3ae:	68fb      	ldr	r3, [r7, #12]
 800e3b0:	2210      	movs	r2, #16
 800e3b2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800e3b6:	68fb      	ldr	r3, [r7, #12]
 800e3b8:	2200      	movs	r2, #0
 800e3ba:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800e3bc:	68fb      	ldr	r3, [r7, #12]
 800e3be:	687a      	ldr	r2, [r7, #4]
 800e3c0:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 800e3c2:	68fb      	ldr	r3, [r7, #12]
 800e3c4:	893a      	ldrh	r2, [r7, #8]
 800e3c6:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 800e3c8:	68fb      	ldr	r3, [r7, #12]
 800e3ca:	2200      	movs	r2, #0
 800e3cc:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800e3ce:	68fb      	ldr	r3, [r7, #12]
 800e3d0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800e3d2:	b29b      	uxth	r3, r3
 800e3d4:	2bff      	cmp	r3, #255	@ 0xff
 800e3d6:	d906      	bls.n	800e3e6 <HAL_I2C_Master_Transmit+0x9a>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800e3d8:	68fb      	ldr	r3, [r7, #12]
 800e3da:	22ff      	movs	r2, #255	@ 0xff
 800e3dc:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 800e3de:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800e3e2:	617b      	str	r3, [r7, #20]
 800e3e4:	e007      	b.n	800e3f6 <HAL_I2C_Master_Transmit+0xaa>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800e3e6:	68fb      	ldr	r3, [r7, #12]
 800e3e8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800e3ea:	b29a      	uxth	r2, r3
 800e3ec:	68fb      	ldr	r3, [r7, #12]
 800e3ee:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 800e3f0:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800e3f4:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 800e3f6:	68fb      	ldr	r3, [r7, #12]
 800e3f8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800e3fa:	2b00      	cmp	r3, #0
 800e3fc:	d024      	beq.n	800e448 <HAL_I2C_Master_Transmit+0xfc>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800e3fe:	68fb      	ldr	r3, [r7, #12]
 800e400:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e402:	781a      	ldrb	r2, [r3, #0]
 800e404:	68fb      	ldr	r3, [r7, #12]
 800e406:	681b      	ldr	r3, [r3, #0]
 800e408:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800e40a:	68fb      	ldr	r3, [r7, #12]
 800e40c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e40e:	1c5a      	adds	r2, r3, #1
 800e410:	68fb      	ldr	r3, [r7, #12]
 800e412:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 800e414:	68fb      	ldr	r3, [r7, #12]
 800e416:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800e418:	b29b      	uxth	r3, r3
 800e41a:	3b01      	subs	r3, #1
 800e41c:	b29a      	uxth	r2, r3
 800e41e:	68fb      	ldr	r3, [r7, #12]
 800e420:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 800e422:	68fb      	ldr	r3, [r7, #12]
 800e424:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800e426:	3b01      	subs	r3, #1
 800e428:	b29a      	uxth	r2, r3
 800e42a:	68fb      	ldr	r3, [r7, #12]
 800e42c:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U), xfermode,
 800e42e:	68fb      	ldr	r3, [r7, #12]
 800e430:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800e432:	b2db      	uxtb	r3, r3
 800e434:	3301      	adds	r3, #1
 800e436:	b2da      	uxtb	r2, r3
 800e438:	8979      	ldrh	r1, [r7, #10]
 800e43a:	4b4e      	ldr	r3, [pc, #312]	@ (800e574 <HAL_I2C_Master_Transmit+0x228>)
 800e43c:	9300      	str	r3, [sp, #0]
 800e43e:	697b      	ldr	r3, [r7, #20]
 800e440:	68f8      	ldr	r0, [r7, #12]
 800e442:	f000 fc05 	bl	800ec50 <I2C_TransferConfig>
 800e446:	e066      	b.n	800e516 <HAL_I2C_Master_Transmit+0x1ca>
    }
    else
    {
      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode,
 800e448:	68fb      	ldr	r3, [r7, #12]
 800e44a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800e44c:	b2da      	uxtb	r2, r3
 800e44e:	8979      	ldrh	r1, [r7, #10]
 800e450:	4b48      	ldr	r3, [pc, #288]	@ (800e574 <HAL_I2C_Master_Transmit+0x228>)
 800e452:	9300      	str	r3, [sp, #0]
 800e454:	697b      	ldr	r3, [r7, #20]
 800e456:	68f8      	ldr	r0, [r7, #12]
 800e458:	f000 fbfa 	bl	800ec50 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 800e45c:	e05b      	b.n	800e516 <HAL_I2C_Master_Transmit+0x1ca>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800e45e:	693a      	ldr	r2, [r7, #16]
 800e460:	6a39      	ldr	r1, [r7, #32]
 800e462:	68f8      	ldr	r0, [r7, #12]
 800e464:	f000 f9fd 	bl	800e862 <I2C_WaitOnTXISFlagUntilTimeout>
 800e468:	4603      	mov	r3, r0
 800e46a:	2b00      	cmp	r3, #0
 800e46c:	d001      	beq.n	800e472 <HAL_I2C_Master_Transmit+0x126>
      {
        return HAL_ERROR;
 800e46e:	2301      	movs	r3, #1
 800e470:	e07b      	b.n	800e56a <HAL_I2C_Master_Transmit+0x21e>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800e472:	68fb      	ldr	r3, [r7, #12]
 800e474:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e476:	781a      	ldrb	r2, [r3, #0]
 800e478:	68fb      	ldr	r3, [r7, #12]
 800e47a:	681b      	ldr	r3, [r3, #0]
 800e47c:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800e47e:	68fb      	ldr	r3, [r7, #12]
 800e480:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e482:	1c5a      	adds	r2, r3, #1
 800e484:	68fb      	ldr	r3, [r7, #12]
 800e486:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 800e488:	68fb      	ldr	r3, [r7, #12]
 800e48a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800e48c:	b29b      	uxth	r3, r3
 800e48e:	3b01      	subs	r3, #1
 800e490:	b29a      	uxth	r2, r3
 800e492:	68fb      	ldr	r3, [r7, #12]
 800e494:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 800e496:	68fb      	ldr	r3, [r7, #12]
 800e498:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800e49a:	3b01      	subs	r3, #1
 800e49c:	b29a      	uxth	r2, r3
 800e49e:	68fb      	ldr	r3, [r7, #12]
 800e4a0:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800e4a2:	68fb      	ldr	r3, [r7, #12]
 800e4a4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800e4a6:	b29b      	uxth	r3, r3
 800e4a8:	2b00      	cmp	r3, #0
 800e4aa:	d034      	beq.n	800e516 <HAL_I2C_Master_Transmit+0x1ca>
 800e4ac:	68fb      	ldr	r3, [r7, #12]
 800e4ae:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800e4b0:	2b00      	cmp	r3, #0
 800e4b2:	d130      	bne.n	800e516 <HAL_I2C_Master_Transmit+0x1ca>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800e4b4:	693b      	ldr	r3, [r7, #16]
 800e4b6:	9300      	str	r3, [sp, #0]
 800e4b8:	6a3b      	ldr	r3, [r7, #32]
 800e4ba:	2200      	movs	r2, #0
 800e4bc:	2180      	movs	r1, #128	@ 0x80
 800e4be:	68f8      	ldr	r0, [r7, #12]
 800e4c0:	f000 f976 	bl	800e7b0 <I2C_WaitOnFlagUntilTimeout>
 800e4c4:	4603      	mov	r3, r0
 800e4c6:	2b00      	cmp	r3, #0
 800e4c8:	d001      	beq.n	800e4ce <HAL_I2C_Master_Transmit+0x182>
        {
          return HAL_ERROR;
 800e4ca:	2301      	movs	r3, #1
 800e4cc:	e04d      	b.n	800e56a <HAL_I2C_Master_Transmit+0x21e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800e4ce:	68fb      	ldr	r3, [r7, #12]
 800e4d0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800e4d2:	b29b      	uxth	r3, r3
 800e4d4:	2bff      	cmp	r3, #255	@ 0xff
 800e4d6:	d90e      	bls.n	800e4f6 <HAL_I2C_Master_Transmit+0x1aa>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800e4d8:	68fb      	ldr	r3, [r7, #12]
 800e4da:	22ff      	movs	r2, #255	@ 0xff
 800e4dc:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800e4de:	68fb      	ldr	r3, [r7, #12]
 800e4e0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800e4e2:	b2da      	uxtb	r2, r3
 800e4e4:	8979      	ldrh	r1, [r7, #10]
 800e4e6:	2300      	movs	r3, #0
 800e4e8:	9300      	str	r3, [sp, #0]
 800e4ea:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800e4ee:	68f8      	ldr	r0, [r7, #12]
 800e4f0:	f000 fbae 	bl	800ec50 <I2C_TransferConfig>
 800e4f4:	e00f      	b.n	800e516 <HAL_I2C_Master_Transmit+0x1ca>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800e4f6:	68fb      	ldr	r3, [r7, #12]
 800e4f8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800e4fa:	b29a      	uxth	r2, r3
 800e4fc:	68fb      	ldr	r3, [r7, #12]
 800e4fe:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800e500:	68fb      	ldr	r3, [r7, #12]
 800e502:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800e504:	b2da      	uxtb	r2, r3
 800e506:	8979      	ldrh	r1, [r7, #10]
 800e508:	2300      	movs	r3, #0
 800e50a:	9300      	str	r3, [sp, #0]
 800e50c:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800e510:	68f8      	ldr	r0, [r7, #12]
 800e512:	f000 fb9d 	bl	800ec50 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 800e516:	68fb      	ldr	r3, [r7, #12]
 800e518:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800e51a:	b29b      	uxth	r3, r3
 800e51c:	2b00      	cmp	r3, #0
 800e51e:	d19e      	bne.n	800e45e <HAL_I2C_Master_Transmit+0x112>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800e520:	693a      	ldr	r2, [r7, #16]
 800e522:	6a39      	ldr	r1, [r7, #32]
 800e524:	68f8      	ldr	r0, [r7, #12]
 800e526:	f000 f9e3 	bl	800e8f0 <I2C_WaitOnSTOPFlagUntilTimeout>
 800e52a:	4603      	mov	r3, r0
 800e52c:	2b00      	cmp	r3, #0
 800e52e:	d001      	beq.n	800e534 <HAL_I2C_Master_Transmit+0x1e8>
    {
      return HAL_ERROR;
 800e530:	2301      	movs	r3, #1
 800e532:	e01a      	b.n	800e56a <HAL_I2C_Master_Transmit+0x21e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800e534:	68fb      	ldr	r3, [r7, #12]
 800e536:	681b      	ldr	r3, [r3, #0]
 800e538:	2220      	movs	r2, #32
 800e53a:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800e53c:	68fb      	ldr	r3, [r7, #12]
 800e53e:	681b      	ldr	r3, [r3, #0]
 800e540:	6859      	ldr	r1, [r3, #4]
 800e542:	68fb      	ldr	r3, [r7, #12]
 800e544:	681a      	ldr	r2, [r3, #0]
 800e546:	4b0c      	ldr	r3, [pc, #48]	@ (800e578 <HAL_I2C_Master_Transmit+0x22c>)
 800e548:	400b      	ands	r3, r1
 800e54a:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800e54c:	68fb      	ldr	r3, [r7, #12]
 800e54e:	2220      	movs	r2, #32
 800e550:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800e554:	68fb      	ldr	r3, [r7, #12]
 800e556:	2200      	movs	r2, #0
 800e558:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800e55c:	68fb      	ldr	r3, [r7, #12]
 800e55e:	2200      	movs	r2, #0
 800e560:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800e564:	2300      	movs	r3, #0
 800e566:	e000      	b.n	800e56a <HAL_I2C_Master_Transmit+0x21e>
  }
  else
  {
    return HAL_BUSY;
 800e568:	2302      	movs	r3, #2
  }
}
 800e56a:	4618      	mov	r0, r3
 800e56c:	3718      	adds	r7, #24
 800e56e:	46bd      	mov	sp, r7
 800e570:	bd80      	pop	{r7, pc}
 800e572:	bf00      	nop
 800e574:	80002000 	.word	0x80002000
 800e578:	fe00e800 	.word	0xfe00e800

0800e57c <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 800e57c:	b580      	push	{r7, lr}
 800e57e:	b088      	sub	sp, #32
 800e580:	af02      	add	r7, sp, #8
 800e582:	60f8      	str	r0, [r7, #12]
 800e584:	607a      	str	r2, [r7, #4]
 800e586:	461a      	mov	r2, r3
 800e588:	460b      	mov	r3, r1
 800e58a:	817b      	strh	r3, [r7, #10]
 800e58c:	4613      	mov	r3, r2
 800e58e:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800e590:	68fb      	ldr	r3, [r7, #12]
 800e592:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800e596:	b2db      	uxtb	r3, r3
 800e598:	2b20      	cmp	r3, #32
 800e59a:	f040 80db 	bne.w	800e754 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800e59e:	68fb      	ldr	r3, [r7, #12]
 800e5a0:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800e5a4:	2b01      	cmp	r3, #1
 800e5a6:	d101      	bne.n	800e5ac <HAL_I2C_Master_Receive+0x30>
 800e5a8:	2302      	movs	r3, #2
 800e5aa:	e0d4      	b.n	800e756 <HAL_I2C_Master_Receive+0x1da>
 800e5ac:	68fb      	ldr	r3, [r7, #12]
 800e5ae:	2201      	movs	r2, #1
 800e5b0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800e5b4:	f7fc fc20 	bl	800adf8 <HAL_GetTick>
 800e5b8:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800e5ba:	697b      	ldr	r3, [r7, #20]
 800e5bc:	9300      	str	r3, [sp, #0]
 800e5be:	2319      	movs	r3, #25
 800e5c0:	2201      	movs	r2, #1
 800e5c2:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800e5c6:	68f8      	ldr	r0, [r7, #12]
 800e5c8:	f000 f8f2 	bl	800e7b0 <I2C_WaitOnFlagUntilTimeout>
 800e5cc:	4603      	mov	r3, r0
 800e5ce:	2b00      	cmp	r3, #0
 800e5d0:	d001      	beq.n	800e5d6 <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 800e5d2:	2301      	movs	r3, #1
 800e5d4:	e0bf      	b.n	800e756 <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800e5d6:	68fb      	ldr	r3, [r7, #12]
 800e5d8:	2222      	movs	r2, #34	@ 0x22
 800e5da:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800e5de:	68fb      	ldr	r3, [r7, #12]
 800e5e0:	2210      	movs	r2, #16
 800e5e2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800e5e6:	68fb      	ldr	r3, [r7, #12]
 800e5e8:	2200      	movs	r2, #0
 800e5ea:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800e5ec:	68fb      	ldr	r3, [r7, #12]
 800e5ee:	687a      	ldr	r2, [r7, #4]
 800e5f0:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 800e5f2:	68fb      	ldr	r3, [r7, #12]
 800e5f4:	893a      	ldrh	r2, [r7, #8]
 800e5f6:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 800e5f8:	68fb      	ldr	r3, [r7, #12]
 800e5fa:	2200      	movs	r2, #0
 800e5fc:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800e5fe:	68fb      	ldr	r3, [r7, #12]
 800e600:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800e602:	b29b      	uxth	r3, r3
 800e604:	2bff      	cmp	r3, #255	@ 0xff
 800e606:	d90e      	bls.n	800e626 <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = 1U;
 800e608:	68fb      	ldr	r3, [r7, #12]
 800e60a:	2201      	movs	r2, #1
 800e60c:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800e60e:	68fb      	ldr	r3, [r7, #12]
 800e610:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800e612:	b2da      	uxtb	r2, r3
 800e614:	8979      	ldrh	r1, [r7, #10]
 800e616:	4b52      	ldr	r3, [pc, #328]	@ (800e760 <HAL_I2C_Master_Receive+0x1e4>)
 800e618:	9300      	str	r3, [sp, #0]
 800e61a:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800e61e:	68f8      	ldr	r0, [r7, #12]
 800e620:	f000 fb16 	bl	800ec50 <I2C_TransferConfig>
 800e624:	e06d      	b.n	800e702 <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800e626:	68fb      	ldr	r3, [r7, #12]
 800e628:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800e62a:	b29a      	uxth	r2, r3
 800e62c:	68fb      	ldr	r3, [r7, #12]
 800e62e:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800e630:	68fb      	ldr	r3, [r7, #12]
 800e632:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800e634:	b2da      	uxtb	r2, r3
 800e636:	8979      	ldrh	r1, [r7, #10]
 800e638:	4b49      	ldr	r3, [pc, #292]	@ (800e760 <HAL_I2C_Master_Receive+0x1e4>)
 800e63a:	9300      	str	r3, [sp, #0]
 800e63c:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800e640:	68f8      	ldr	r0, [r7, #12]
 800e642:	f000 fb05 	bl	800ec50 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 800e646:	e05c      	b.n	800e702 <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800e648:	697a      	ldr	r2, [r7, #20]
 800e64a:	6a39      	ldr	r1, [r7, #32]
 800e64c:	68f8      	ldr	r0, [r7, #12]
 800e64e:	f000 f993 	bl	800e978 <I2C_WaitOnRXNEFlagUntilTimeout>
 800e652:	4603      	mov	r3, r0
 800e654:	2b00      	cmp	r3, #0
 800e656:	d001      	beq.n	800e65c <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 800e658:	2301      	movs	r3, #1
 800e65a:	e07c      	b.n	800e756 <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800e65c:	68fb      	ldr	r3, [r7, #12]
 800e65e:	681b      	ldr	r3, [r3, #0]
 800e660:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800e662:	68fb      	ldr	r3, [r7, #12]
 800e664:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e666:	b2d2      	uxtb	r2, r2
 800e668:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800e66a:	68fb      	ldr	r3, [r7, #12]
 800e66c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e66e:	1c5a      	adds	r2, r3, #1
 800e670:	68fb      	ldr	r3, [r7, #12]
 800e672:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 800e674:	68fb      	ldr	r3, [r7, #12]
 800e676:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800e678:	3b01      	subs	r3, #1
 800e67a:	b29a      	uxth	r2, r3
 800e67c:	68fb      	ldr	r3, [r7, #12]
 800e67e:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 800e680:	68fb      	ldr	r3, [r7, #12]
 800e682:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800e684:	b29b      	uxth	r3, r3
 800e686:	3b01      	subs	r3, #1
 800e688:	b29a      	uxth	r2, r3
 800e68a:	68fb      	ldr	r3, [r7, #12]
 800e68c:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800e68e:	68fb      	ldr	r3, [r7, #12]
 800e690:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800e692:	b29b      	uxth	r3, r3
 800e694:	2b00      	cmp	r3, #0
 800e696:	d034      	beq.n	800e702 <HAL_I2C_Master_Receive+0x186>
 800e698:	68fb      	ldr	r3, [r7, #12]
 800e69a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800e69c:	2b00      	cmp	r3, #0
 800e69e:	d130      	bne.n	800e702 <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800e6a0:	697b      	ldr	r3, [r7, #20]
 800e6a2:	9300      	str	r3, [sp, #0]
 800e6a4:	6a3b      	ldr	r3, [r7, #32]
 800e6a6:	2200      	movs	r2, #0
 800e6a8:	2180      	movs	r1, #128	@ 0x80
 800e6aa:	68f8      	ldr	r0, [r7, #12]
 800e6ac:	f000 f880 	bl	800e7b0 <I2C_WaitOnFlagUntilTimeout>
 800e6b0:	4603      	mov	r3, r0
 800e6b2:	2b00      	cmp	r3, #0
 800e6b4:	d001      	beq.n	800e6ba <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 800e6b6:	2301      	movs	r3, #1
 800e6b8:	e04d      	b.n	800e756 <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800e6ba:	68fb      	ldr	r3, [r7, #12]
 800e6bc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800e6be:	b29b      	uxth	r3, r3
 800e6c0:	2bff      	cmp	r3, #255	@ 0xff
 800e6c2:	d90e      	bls.n	800e6e2 <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800e6c4:	68fb      	ldr	r3, [r7, #12]
 800e6c6:	22ff      	movs	r2, #255	@ 0xff
 800e6c8:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800e6ca:	68fb      	ldr	r3, [r7, #12]
 800e6cc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800e6ce:	b2da      	uxtb	r2, r3
 800e6d0:	8979      	ldrh	r1, [r7, #10]
 800e6d2:	2300      	movs	r3, #0
 800e6d4:	9300      	str	r3, [sp, #0]
 800e6d6:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800e6da:	68f8      	ldr	r0, [r7, #12]
 800e6dc:	f000 fab8 	bl	800ec50 <I2C_TransferConfig>
 800e6e0:	e00f      	b.n	800e702 <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800e6e2:	68fb      	ldr	r3, [r7, #12]
 800e6e4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800e6e6:	b29a      	uxth	r2, r3
 800e6e8:	68fb      	ldr	r3, [r7, #12]
 800e6ea:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800e6ec:	68fb      	ldr	r3, [r7, #12]
 800e6ee:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800e6f0:	b2da      	uxtb	r2, r3
 800e6f2:	8979      	ldrh	r1, [r7, #10]
 800e6f4:	2300      	movs	r3, #0
 800e6f6:	9300      	str	r3, [sp, #0]
 800e6f8:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800e6fc:	68f8      	ldr	r0, [r7, #12]
 800e6fe:	f000 faa7 	bl	800ec50 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 800e702:	68fb      	ldr	r3, [r7, #12]
 800e704:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800e706:	b29b      	uxth	r3, r3
 800e708:	2b00      	cmp	r3, #0
 800e70a:	d19d      	bne.n	800e648 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800e70c:	697a      	ldr	r2, [r7, #20]
 800e70e:	6a39      	ldr	r1, [r7, #32]
 800e710:	68f8      	ldr	r0, [r7, #12]
 800e712:	f000 f8ed 	bl	800e8f0 <I2C_WaitOnSTOPFlagUntilTimeout>
 800e716:	4603      	mov	r3, r0
 800e718:	2b00      	cmp	r3, #0
 800e71a:	d001      	beq.n	800e720 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 800e71c:	2301      	movs	r3, #1
 800e71e:	e01a      	b.n	800e756 <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800e720:	68fb      	ldr	r3, [r7, #12]
 800e722:	681b      	ldr	r3, [r3, #0]
 800e724:	2220      	movs	r2, #32
 800e726:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800e728:	68fb      	ldr	r3, [r7, #12]
 800e72a:	681b      	ldr	r3, [r3, #0]
 800e72c:	6859      	ldr	r1, [r3, #4]
 800e72e:	68fb      	ldr	r3, [r7, #12]
 800e730:	681a      	ldr	r2, [r3, #0]
 800e732:	4b0c      	ldr	r3, [pc, #48]	@ (800e764 <HAL_I2C_Master_Receive+0x1e8>)
 800e734:	400b      	ands	r3, r1
 800e736:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800e738:	68fb      	ldr	r3, [r7, #12]
 800e73a:	2220      	movs	r2, #32
 800e73c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800e740:	68fb      	ldr	r3, [r7, #12]
 800e742:	2200      	movs	r2, #0
 800e744:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800e748:	68fb      	ldr	r3, [r7, #12]
 800e74a:	2200      	movs	r2, #0
 800e74c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800e750:	2300      	movs	r3, #0
 800e752:	e000      	b.n	800e756 <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 800e754:	2302      	movs	r3, #2
  }
}
 800e756:	4618      	mov	r0, r3
 800e758:	3718      	adds	r7, #24
 800e75a:	46bd      	mov	sp, r7
 800e75c:	bd80      	pop	{r7, pc}
 800e75e:	bf00      	nop
 800e760:	80002400 	.word	0x80002400
 800e764:	fe00e800 	.word	0xfe00e800

0800e768 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 800e768:	b480      	push	{r7}
 800e76a:	b083      	sub	sp, #12
 800e76c:	af00      	add	r7, sp, #0
 800e76e:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800e770:	687b      	ldr	r3, [r7, #4]
 800e772:	681b      	ldr	r3, [r3, #0]
 800e774:	699b      	ldr	r3, [r3, #24]
 800e776:	f003 0302 	and.w	r3, r3, #2
 800e77a:	2b02      	cmp	r3, #2
 800e77c:	d103      	bne.n	800e786 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800e77e:	687b      	ldr	r3, [r7, #4]
 800e780:	681b      	ldr	r3, [r3, #0]
 800e782:	2200      	movs	r2, #0
 800e784:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800e786:	687b      	ldr	r3, [r7, #4]
 800e788:	681b      	ldr	r3, [r3, #0]
 800e78a:	699b      	ldr	r3, [r3, #24]
 800e78c:	f003 0301 	and.w	r3, r3, #1
 800e790:	2b01      	cmp	r3, #1
 800e792:	d007      	beq.n	800e7a4 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800e794:	687b      	ldr	r3, [r7, #4]
 800e796:	681b      	ldr	r3, [r3, #0]
 800e798:	699a      	ldr	r2, [r3, #24]
 800e79a:	687b      	ldr	r3, [r7, #4]
 800e79c:	681b      	ldr	r3, [r3, #0]
 800e79e:	f042 0201 	orr.w	r2, r2, #1
 800e7a2:	619a      	str	r2, [r3, #24]
  }
}
 800e7a4:	bf00      	nop
 800e7a6:	370c      	adds	r7, #12
 800e7a8:	46bd      	mov	sp, r7
 800e7aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e7ae:	4770      	bx	lr

0800e7b0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 800e7b0:	b580      	push	{r7, lr}
 800e7b2:	b084      	sub	sp, #16
 800e7b4:	af00      	add	r7, sp, #0
 800e7b6:	60f8      	str	r0, [r7, #12]
 800e7b8:	60b9      	str	r1, [r7, #8]
 800e7ba:	603b      	str	r3, [r7, #0]
 800e7bc:	4613      	mov	r3, r2
 800e7be:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800e7c0:	e03b      	b.n	800e83a <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800e7c2:	69ba      	ldr	r2, [r7, #24]
 800e7c4:	6839      	ldr	r1, [r7, #0]
 800e7c6:	68f8      	ldr	r0, [r7, #12]
 800e7c8:	f000 f962 	bl	800ea90 <I2C_IsErrorOccurred>
 800e7cc:	4603      	mov	r3, r0
 800e7ce:	2b00      	cmp	r3, #0
 800e7d0:	d001      	beq.n	800e7d6 <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 800e7d2:	2301      	movs	r3, #1
 800e7d4:	e041      	b.n	800e85a <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800e7d6:	683b      	ldr	r3, [r7, #0]
 800e7d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e7dc:	d02d      	beq.n	800e83a <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800e7de:	f7fc fb0b 	bl	800adf8 <HAL_GetTick>
 800e7e2:	4602      	mov	r2, r0
 800e7e4:	69bb      	ldr	r3, [r7, #24]
 800e7e6:	1ad3      	subs	r3, r2, r3
 800e7e8:	683a      	ldr	r2, [r7, #0]
 800e7ea:	429a      	cmp	r2, r3
 800e7ec:	d302      	bcc.n	800e7f4 <I2C_WaitOnFlagUntilTimeout+0x44>
 800e7ee:	683b      	ldr	r3, [r7, #0]
 800e7f0:	2b00      	cmp	r3, #0
 800e7f2:	d122      	bne.n	800e83a <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 800e7f4:	68fb      	ldr	r3, [r7, #12]
 800e7f6:	681b      	ldr	r3, [r3, #0]
 800e7f8:	699a      	ldr	r2, [r3, #24]
 800e7fa:	68bb      	ldr	r3, [r7, #8]
 800e7fc:	4013      	ands	r3, r2
 800e7fe:	68ba      	ldr	r2, [r7, #8]
 800e800:	429a      	cmp	r2, r3
 800e802:	bf0c      	ite	eq
 800e804:	2301      	moveq	r3, #1
 800e806:	2300      	movne	r3, #0
 800e808:	b2db      	uxtb	r3, r3
 800e80a:	461a      	mov	r2, r3
 800e80c:	79fb      	ldrb	r3, [r7, #7]
 800e80e:	429a      	cmp	r2, r3
 800e810:	d113      	bne.n	800e83a <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800e812:	68fb      	ldr	r3, [r7, #12]
 800e814:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800e816:	f043 0220 	orr.w	r2, r3, #32
 800e81a:	68fb      	ldr	r3, [r7, #12]
 800e81c:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800e81e:	68fb      	ldr	r3, [r7, #12]
 800e820:	2220      	movs	r2, #32
 800e822:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800e826:	68fb      	ldr	r3, [r7, #12]
 800e828:	2200      	movs	r2, #0
 800e82a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800e82e:	68fb      	ldr	r3, [r7, #12]
 800e830:	2200      	movs	r2, #0
 800e832:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 800e836:	2301      	movs	r3, #1
 800e838:	e00f      	b.n	800e85a <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800e83a:	68fb      	ldr	r3, [r7, #12]
 800e83c:	681b      	ldr	r3, [r3, #0]
 800e83e:	699a      	ldr	r2, [r3, #24]
 800e840:	68bb      	ldr	r3, [r7, #8]
 800e842:	4013      	ands	r3, r2
 800e844:	68ba      	ldr	r2, [r7, #8]
 800e846:	429a      	cmp	r2, r3
 800e848:	bf0c      	ite	eq
 800e84a:	2301      	moveq	r3, #1
 800e84c:	2300      	movne	r3, #0
 800e84e:	b2db      	uxtb	r3, r3
 800e850:	461a      	mov	r2, r3
 800e852:	79fb      	ldrb	r3, [r7, #7]
 800e854:	429a      	cmp	r2, r3
 800e856:	d0b4      	beq.n	800e7c2 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800e858:	2300      	movs	r3, #0
}
 800e85a:	4618      	mov	r0, r3
 800e85c:	3710      	adds	r7, #16
 800e85e:	46bd      	mov	sp, r7
 800e860:	bd80      	pop	{r7, pc}

0800e862 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800e862:	b580      	push	{r7, lr}
 800e864:	b084      	sub	sp, #16
 800e866:	af00      	add	r7, sp, #0
 800e868:	60f8      	str	r0, [r7, #12]
 800e86a:	60b9      	str	r1, [r7, #8]
 800e86c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800e86e:	e033      	b.n	800e8d8 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800e870:	687a      	ldr	r2, [r7, #4]
 800e872:	68b9      	ldr	r1, [r7, #8]
 800e874:	68f8      	ldr	r0, [r7, #12]
 800e876:	f000 f90b 	bl	800ea90 <I2C_IsErrorOccurred>
 800e87a:	4603      	mov	r3, r0
 800e87c:	2b00      	cmp	r3, #0
 800e87e:	d001      	beq.n	800e884 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800e880:	2301      	movs	r3, #1
 800e882:	e031      	b.n	800e8e8 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800e884:	68bb      	ldr	r3, [r7, #8]
 800e886:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e88a:	d025      	beq.n	800e8d8 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800e88c:	f7fc fab4 	bl	800adf8 <HAL_GetTick>
 800e890:	4602      	mov	r2, r0
 800e892:	687b      	ldr	r3, [r7, #4]
 800e894:	1ad3      	subs	r3, r2, r3
 800e896:	68ba      	ldr	r2, [r7, #8]
 800e898:	429a      	cmp	r2, r3
 800e89a:	d302      	bcc.n	800e8a2 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 800e89c:	68bb      	ldr	r3, [r7, #8]
 800e89e:	2b00      	cmp	r3, #0
 800e8a0:	d11a      	bne.n	800e8d8 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 800e8a2:	68fb      	ldr	r3, [r7, #12]
 800e8a4:	681b      	ldr	r3, [r3, #0]
 800e8a6:	699b      	ldr	r3, [r3, #24]
 800e8a8:	f003 0302 	and.w	r3, r3, #2
 800e8ac:	2b02      	cmp	r3, #2
 800e8ae:	d013      	beq.n	800e8d8 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800e8b0:	68fb      	ldr	r3, [r7, #12]
 800e8b2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800e8b4:	f043 0220 	orr.w	r2, r3, #32
 800e8b8:	68fb      	ldr	r3, [r7, #12]
 800e8ba:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800e8bc:	68fb      	ldr	r3, [r7, #12]
 800e8be:	2220      	movs	r2, #32
 800e8c0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800e8c4:	68fb      	ldr	r3, [r7, #12]
 800e8c6:	2200      	movs	r2, #0
 800e8c8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800e8cc:	68fb      	ldr	r3, [r7, #12]
 800e8ce:	2200      	movs	r2, #0
 800e8d0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 800e8d4:	2301      	movs	r3, #1
 800e8d6:	e007      	b.n	800e8e8 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800e8d8:	68fb      	ldr	r3, [r7, #12]
 800e8da:	681b      	ldr	r3, [r3, #0]
 800e8dc:	699b      	ldr	r3, [r3, #24]
 800e8de:	f003 0302 	and.w	r3, r3, #2
 800e8e2:	2b02      	cmp	r3, #2
 800e8e4:	d1c4      	bne.n	800e870 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800e8e6:	2300      	movs	r3, #0
}
 800e8e8:	4618      	mov	r0, r3
 800e8ea:	3710      	adds	r7, #16
 800e8ec:	46bd      	mov	sp, r7
 800e8ee:	bd80      	pop	{r7, pc}

0800e8f0 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800e8f0:	b580      	push	{r7, lr}
 800e8f2:	b084      	sub	sp, #16
 800e8f4:	af00      	add	r7, sp, #0
 800e8f6:	60f8      	str	r0, [r7, #12]
 800e8f8:	60b9      	str	r1, [r7, #8]
 800e8fa:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800e8fc:	e02f      	b.n	800e95e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800e8fe:	687a      	ldr	r2, [r7, #4]
 800e900:	68b9      	ldr	r1, [r7, #8]
 800e902:	68f8      	ldr	r0, [r7, #12]
 800e904:	f000 f8c4 	bl	800ea90 <I2C_IsErrorOccurred>
 800e908:	4603      	mov	r3, r0
 800e90a:	2b00      	cmp	r3, #0
 800e90c:	d001      	beq.n	800e912 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800e90e:	2301      	movs	r3, #1
 800e910:	e02d      	b.n	800e96e <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800e912:	f7fc fa71 	bl	800adf8 <HAL_GetTick>
 800e916:	4602      	mov	r2, r0
 800e918:	687b      	ldr	r3, [r7, #4]
 800e91a:	1ad3      	subs	r3, r2, r3
 800e91c:	68ba      	ldr	r2, [r7, #8]
 800e91e:	429a      	cmp	r2, r3
 800e920:	d302      	bcc.n	800e928 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800e922:	68bb      	ldr	r3, [r7, #8]
 800e924:	2b00      	cmp	r3, #0
 800e926:	d11a      	bne.n	800e95e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 800e928:	68fb      	ldr	r3, [r7, #12]
 800e92a:	681b      	ldr	r3, [r3, #0]
 800e92c:	699b      	ldr	r3, [r3, #24]
 800e92e:	f003 0320 	and.w	r3, r3, #32
 800e932:	2b20      	cmp	r3, #32
 800e934:	d013      	beq.n	800e95e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800e936:	68fb      	ldr	r3, [r7, #12]
 800e938:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800e93a:	f043 0220 	orr.w	r2, r3, #32
 800e93e:	68fb      	ldr	r3, [r7, #12]
 800e940:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800e942:	68fb      	ldr	r3, [r7, #12]
 800e944:	2220      	movs	r2, #32
 800e946:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800e94a:	68fb      	ldr	r3, [r7, #12]
 800e94c:	2200      	movs	r2, #0
 800e94e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800e952:	68fb      	ldr	r3, [r7, #12]
 800e954:	2200      	movs	r2, #0
 800e956:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 800e95a:	2301      	movs	r3, #1
 800e95c:	e007      	b.n	800e96e <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800e95e:	68fb      	ldr	r3, [r7, #12]
 800e960:	681b      	ldr	r3, [r3, #0]
 800e962:	699b      	ldr	r3, [r3, #24]
 800e964:	f003 0320 	and.w	r3, r3, #32
 800e968:	2b20      	cmp	r3, #32
 800e96a:	d1c8      	bne.n	800e8fe <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800e96c:	2300      	movs	r3, #0
}
 800e96e:	4618      	mov	r0, r3
 800e970:	3710      	adds	r7, #16
 800e972:	46bd      	mov	sp, r7
 800e974:	bd80      	pop	{r7, pc}
	...

0800e978 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800e978:	b580      	push	{r7, lr}
 800e97a:	b086      	sub	sp, #24
 800e97c:	af00      	add	r7, sp, #0
 800e97e:	60f8      	str	r0, [r7, #12]
 800e980:	60b9      	str	r1, [r7, #8]
 800e982:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800e984:	2300      	movs	r3, #0
 800e986:	75fb      	strb	r3, [r7, #23]

  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 800e988:	e071      	b.n	800ea6e <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800e98a:	687a      	ldr	r2, [r7, #4]
 800e98c:	68b9      	ldr	r1, [r7, #8]
 800e98e:	68f8      	ldr	r0, [r7, #12]
 800e990:	f000 f87e 	bl	800ea90 <I2C_IsErrorOccurred>
 800e994:	4603      	mov	r3, r0
 800e996:	2b00      	cmp	r3, #0
 800e998:	d001      	beq.n	800e99e <I2C_WaitOnRXNEFlagUntilTimeout+0x26>
    {
      status = HAL_ERROR;
 800e99a:	2301      	movs	r3, #1
 800e99c:	75fb      	strb	r3, [r7, #23]
    }

    /* Check if a STOPF is detected */
    if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET) && (status == HAL_OK))
 800e99e:	68fb      	ldr	r3, [r7, #12]
 800e9a0:	681b      	ldr	r3, [r3, #0]
 800e9a2:	699b      	ldr	r3, [r3, #24]
 800e9a4:	f003 0320 	and.w	r3, r3, #32
 800e9a8:	2b20      	cmp	r3, #32
 800e9aa:	d13b      	bne.n	800ea24 <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
 800e9ac:	7dfb      	ldrb	r3, [r7, #23]
 800e9ae:	2b00      	cmp	r3, #0
 800e9b0:	d138      	bne.n	800ea24 <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 800e9b2:	68fb      	ldr	r3, [r7, #12]
 800e9b4:	681b      	ldr	r3, [r3, #0]
 800e9b6:	699b      	ldr	r3, [r3, #24]
 800e9b8:	f003 0304 	and.w	r3, r3, #4
 800e9bc:	2b04      	cmp	r3, #4
 800e9be:	d105      	bne.n	800e9cc <I2C_WaitOnRXNEFlagUntilTimeout+0x54>
 800e9c0:	68fb      	ldr	r3, [r7, #12]
 800e9c2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800e9c4:	2b00      	cmp	r3, #0
 800e9c6:	d001      	beq.n	800e9cc <I2C_WaitOnRXNEFlagUntilTimeout+0x54>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        status = HAL_OK;
 800e9c8:	2300      	movs	r3, #0
 800e9ca:	75fb      	strb	r3, [r7, #23]
      }

      /* Check a no-acknowledge have been detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800e9cc:	68fb      	ldr	r3, [r7, #12]
 800e9ce:	681b      	ldr	r3, [r3, #0]
 800e9d0:	699b      	ldr	r3, [r3, #24]
 800e9d2:	f003 0310 	and.w	r3, r3, #16
 800e9d6:	2b10      	cmp	r3, #16
 800e9d8:	d121      	bne.n	800ea1e <I2C_WaitOnRXNEFlagUntilTimeout+0xa6>
      {
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800e9da:	68fb      	ldr	r3, [r7, #12]
 800e9dc:	681b      	ldr	r3, [r3, #0]
 800e9de:	2210      	movs	r2, #16
 800e9e0:	61da      	str	r2, [r3, #28]
        hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 800e9e2:	68fb      	ldr	r3, [r7, #12]
 800e9e4:	2204      	movs	r2, #4
 800e9e6:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800e9e8:	68fb      	ldr	r3, [r7, #12]
 800e9ea:	681b      	ldr	r3, [r3, #0]
 800e9ec:	2220      	movs	r2, #32
 800e9ee:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 800e9f0:	68fb      	ldr	r3, [r7, #12]
 800e9f2:	681b      	ldr	r3, [r3, #0]
 800e9f4:	6859      	ldr	r1, [r3, #4]
 800e9f6:	68fb      	ldr	r3, [r7, #12]
 800e9f8:	681a      	ldr	r2, [r3, #0]
 800e9fa:	4b24      	ldr	r3, [pc, #144]	@ (800ea8c <I2C_WaitOnRXNEFlagUntilTimeout+0x114>)
 800e9fc:	400b      	ands	r3, r1
 800e9fe:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 800ea00:	68fb      	ldr	r3, [r7, #12]
 800ea02:	2220      	movs	r2, #32
 800ea04:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800ea08:	68fb      	ldr	r3, [r7, #12]
 800ea0a:	2200      	movs	r2, #0
 800ea0c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800ea10:	68fb      	ldr	r3, [r7, #12]
 800ea12:	2200      	movs	r2, #0
 800ea14:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        status = HAL_ERROR;
 800ea18:	2301      	movs	r3, #1
 800ea1a:	75fb      	strb	r3, [r7, #23]
 800ea1c:	e002      	b.n	800ea24 <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
      }
      else
      {
        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800ea1e:	68fb      	ldr	r3, [r7, #12]
 800ea20:	2200      	movs	r2, #0
 800ea22:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }

    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U)) && (status == HAL_OK))
 800ea24:	f7fc f9e8 	bl	800adf8 <HAL_GetTick>
 800ea28:	4602      	mov	r2, r0
 800ea2a:	687b      	ldr	r3, [r7, #4]
 800ea2c:	1ad3      	subs	r3, r2, r3
 800ea2e:	68ba      	ldr	r2, [r7, #8]
 800ea30:	429a      	cmp	r2, r3
 800ea32:	d302      	bcc.n	800ea3a <I2C_WaitOnRXNEFlagUntilTimeout+0xc2>
 800ea34:	68bb      	ldr	r3, [r7, #8]
 800ea36:	2b00      	cmp	r3, #0
 800ea38:	d119      	bne.n	800ea6e <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
 800ea3a:	7dfb      	ldrb	r3, [r7, #23]
 800ea3c:	2b00      	cmp	r3, #0
 800ea3e:	d116      	bne.n	800ea6e <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 800ea40:	68fb      	ldr	r3, [r7, #12]
 800ea42:	681b      	ldr	r3, [r3, #0]
 800ea44:	699b      	ldr	r3, [r3, #24]
 800ea46:	f003 0304 	and.w	r3, r3, #4
 800ea4a:	2b04      	cmp	r3, #4
 800ea4c:	d00f      	beq.n	800ea6e <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800ea4e:	68fb      	ldr	r3, [r7, #12]
 800ea50:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800ea52:	f043 0220 	orr.w	r2, r3, #32
 800ea56:	68fb      	ldr	r3, [r7, #12]
 800ea58:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800ea5a:	68fb      	ldr	r3, [r7, #12]
 800ea5c:	2220      	movs	r2, #32
 800ea5e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800ea62:	68fb      	ldr	r3, [r7, #12]
 800ea64:	2200      	movs	r2, #0
 800ea66:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        status = HAL_ERROR;
 800ea6a:	2301      	movs	r3, #1
 800ea6c:	75fb      	strb	r3, [r7, #23]
  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 800ea6e:	68fb      	ldr	r3, [r7, #12]
 800ea70:	681b      	ldr	r3, [r3, #0]
 800ea72:	699b      	ldr	r3, [r3, #24]
 800ea74:	f003 0304 	and.w	r3, r3, #4
 800ea78:	2b04      	cmp	r3, #4
 800ea7a:	d002      	beq.n	800ea82 <I2C_WaitOnRXNEFlagUntilTimeout+0x10a>
 800ea7c:	7dfb      	ldrb	r3, [r7, #23]
 800ea7e:	2b00      	cmp	r3, #0
 800ea80:	d083      	beq.n	800e98a <I2C_WaitOnRXNEFlagUntilTimeout+0x12>
      }
    }
  }
  return status;
 800ea82:	7dfb      	ldrb	r3, [r7, #23]
}
 800ea84:	4618      	mov	r0, r3
 800ea86:	3718      	adds	r7, #24
 800ea88:	46bd      	mov	sp, r7
 800ea8a:	bd80      	pop	{r7, pc}
 800ea8c:	fe00e800 	.word	0xfe00e800

0800ea90 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800ea90:	b580      	push	{r7, lr}
 800ea92:	b08a      	sub	sp, #40	@ 0x28
 800ea94:	af00      	add	r7, sp, #0
 800ea96:	60f8      	str	r0, [r7, #12]
 800ea98:	60b9      	str	r1, [r7, #8]
 800ea9a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800ea9c:	2300      	movs	r3, #0
 800ea9e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 800eaa2:	68fb      	ldr	r3, [r7, #12]
 800eaa4:	681b      	ldr	r3, [r3, #0]
 800eaa6:	699b      	ldr	r3, [r3, #24]
 800eaa8:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 800eaaa:	2300      	movs	r3, #0
 800eaac:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 800eaae:	687b      	ldr	r3, [r7, #4]
 800eab0:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 800eab2:	69bb      	ldr	r3, [r7, #24]
 800eab4:	f003 0310 	and.w	r3, r3, #16
 800eab8:	2b00      	cmp	r3, #0
 800eaba:	d068      	beq.n	800eb8e <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800eabc:	68fb      	ldr	r3, [r7, #12]
 800eabe:	681b      	ldr	r3, [r3, #0]
 800eac0:	2210      	movs	r2, #16
 800eac2:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800eac4:	e049      	b.n	800eb5a <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800eac6:	68bb      	ldr	r3, [r7, #8]
 800eac8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800eacc:	d045      	beq.n	800eb5a <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800eace:	f7fc f993 	bl	800adf8 <HAL_GetTick>
 800ead2:	4602      	mov	r2, r0
 800ead4:	69fb      	ldr	r3, [r7, #28]
 800ead6:	1ad3      	subs	r3, r2, r3
 800ead8:	68ba      	ldr	r2, [r7, #8]
 800eada:	429a      	cmp	r2, r3
 800eadc:	d302      	bcc.n	800eae4 <I2C_IsErrorOccurred+0x54>
 800eade:	68bb      	ldr	r3, [r7, #8]
 800eae0:	2b00      	cmp	r3, #0
 800eae2:	d13a      	bne.n	800eb5a <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 800eae4:	68fb      	ldr	r3, [r7, #12]
 800eae6:	681b      	ldr	r3, [r3, #0]
 800eae8:	685b      	ldr	r3, [r3, #4]
 800eaea:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800eaee:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 800eaf0:	68fb      	ldr	r3, [r7, #12]
 800eaf2:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800eaf6:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 800eaf8:	68fb      	ldr	r3, [r7, #12]
 800eafa:	681b      	ldr	r3, [r3, #0]
 800eafc:	699b      	ldr	r3, [r3, #24]
 800eafe:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800eb02:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800eb06:	d121      	bne.n	800eb4c <I2C_IsErrorOccurred+0xbc>
 800eb08:	697b      	ldr	r3, [r7, #20]
 800eb0a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800eb0e:	d01d      	beq.n	800eb4c <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 800eb10:	7cfb      	ldrb	r3, [r7, #19]
 800eb12:	2b20      	cmp	r3, #32
 800eb14:	d01a      	beq.n	800eb4c <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800eb16:	68fb      	ldr	r3, [r7, #12]
 800eb18:	681b      	ldr	r3, [r3, #0]
 800eb1a:	685a      	ldr	r2, [r3, #4]
 800eb1c:	68fb      	ldr	r3, [r7, #12]
 800eb1e:	681b      	ldr	r3, [r3, #0]
 800eb20:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800eb24:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 800eb26:	f7fc f967 	bl	800adf8 <HAL_GetTick>
 800eb2a:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800eb2c:	e00e      	b.n	800eb4c <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800eb2e:	f7fc f963 	bl	800adf8 <HAL_GetTick>
 800eb32:	4602      	mov	r2, r0
 800eb34:	69fb      	ldr	r3, [r7, #28]
 800eb36:	1ad3      	subs	r3, r2, r3
 800eb38:	2b19      	cmp	r3, #25
 800eb3a:	d907      	bls.n	800eb4c <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 800eb3c:	6a3b      	ldr	r3, [r7, #32]
 800eb3e:	f043 0320 	orr.w	r3, r3, #32
 800eb42:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 800eb44:	2301      	movs	r3, #1
 800eb46:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 800eb4a:	e006      	b.n	800eb5a <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800eb4c:	68fb      	ldr	r3, [r7, #12]
 800eb4e:	681b      	ldr	r3, [r3, #0]
 800eb50:	699b      	ldr	r3, [r3, #24]
 800eb52:	f003 0320 	and.w	r3, r3, #32
 800eb56:	2b20      	cmp	r3, #32
 800eb58:	d1e9      	bne.n	800eb2e <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800eb5a:	68fb      	ldr	r3, [r7, #12]
 800eb5c:	681b      	ldr	r3, [r3, #0]
 800eb5e:	699b      	ldr	r3, [r3, #24]
 800eb60:	f003 0320 	and.w	r3, r3, #32
 800eb64:	2b20      	cmp	r3, #32
 800eb66:	d003      	beq.n	800eb70 <I2C_IsErrorOccurred+0xe0>
 800eb68:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800eb6c:	2b00      	cmp	r3, #0
 800eb6e:	d0aa      	beq.n	800eac6 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 800eb70:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800eb74:	2b00      	cmp	r3, #0
 800eb76:	d103      	bne.n	800eb80 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800eb78:	68fb      	ldr	r3, [r7, #12]
 800eb7a:	681b      	ldr	r3, [r3, #0]
 800eb7c:	2220      	movs	r2, #32
 800eb7e:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 800eb80:	6a3b      	ldr	r3, [r7, #32]
 800eb82:	f043 0304 	orr.w	r3, r3, #4
 800eb86:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 800eb88:	2301      	movs	r3, #1
 800eb8a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 800eb8e:	68fb      	ldr	r3, [r7, #12]
 800eb90:	681b      	ldr	r3, [r3, #0]
 800eb92:	699b      	ldr	r3, [r3, #24]
 800eb94:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 800eb96:	69bb      	ldr	r3, [r7, #24]
 800eb98:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800eb9c:	2b00      	cmp	r3, #0
 800eb9e:	d00b      	beq.n	800ebb8 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 800eba0:	6a3b      	ldr	r3, [r7, #32]
 800eba2:	f043 0301 	orr.w	r3, r3, #1
 800eba6:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800eba8:	68fb      	ldr	r3, [r7, #12]
 800ebaa:	681b      	ldr	r3, [r3, #0]
 800ebac:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800ebb0:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800ebb2:	2301      	movs	r3, #1
 800ebb4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 800ebb8:	69bb      	ldr	r3, [r7, #24]
 800ebba:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800ebbe:	2b00      	cmp	r3, #0
 800ebc0:	d00b      	beq.n	800ebda <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 800ebc2:	6a3b      	ldr	r3, [r7, #32]
 800ebc4:	f043 0308 	orr.w	r3, r3, #8
 800ebc8:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800ebca:	68fb      	ldr	r3, [r7, #12]
 800ebcc:	681b      	ldr	r3, [r3, #0]
 800ebce:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800ebd2:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800ebd4:	2301      	movs	r3, #1
 800ebd6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 800ebda:	69bb      	ldr	r3, [r7, #24]
 800ebdc:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800ebe0:	2b00      	cmp	r3, #0
 800ebe2:	d00b      	beq.n	800ebfc <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 800ebe4:	6a3b      	ldr	r3, [r7, #32]
 800ebe6:	f043 0302 	orr.w	r3, r3, #2
 800ebea:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800ebec:	68fb      	ldr	r3, [r7, #12]
 800ebee:	681b      	ldr	r3, [r3, #0]
 800ebf0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800ebf4:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800ebf6:	2301      	movs	r3, #1
 800ebf8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 800ebfc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800ec00:	2b00      	cmp	r3, #0
 800ec02:	d01c      	beq.n	800ec3e <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800ec04:	68f8      	ldr	r0, [r7, #12]
 800ec06:	f7ff fdaf 	bl	800e768 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800ec0a:	68fb      	ldr	r3, [r7, #12]
 800ec0c:	681b      	ldr	r3, [r3, #0]
 800ec0e:	6859      	ldr	r1, [r3, #4]
 800ec10:	68fb      	ldr	r3, [r7, #12]
 800ec12:	681a      	ldr	r2, [r3, #0]
 800ec14:	4b0d      	ldr	r3, [pc, #52]	@ (800ec4c <I2C_IsErrorOccurred+0x1bc>)
 800ec16:	400b      	ands	r3, r1
 800ec18:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 800ec1a:	68fb      	ldr	r3, [r7, #12]
 800ec1c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800ec1e:	6a3b      	ldr	r3, [r7, #32]
 800ec20:	431a      	orrs	r2, r3
 800ec22:	68fb      	ldr	r3, [r7, #12]
 800ec24:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800ec26:	68fb      	ldr	r3, [r7, #12]
 800ec28:	2220      	movs	r2, #32
 800ec2a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800ec2e:	68fb      	ldr	r3, [r7, #12]
 800ec30:	2200      	movs	r2, #0
 800ec32:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800ec36:	68fb      	ldr	r3, [r7, #12]
 800ec38:	2200      	movs	r2, #0
 800ec3a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 800ec3e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 800ec42:	4618      	mov	r0, r3
 800ec44:	3728      	adds	r7, #40	@ 0x28
 800ec46:	46bd      	mov	sp, r7
 800ec48:	bd80      	pop	{r7, pc}
 800ec4a:	bf00      	nop
 800ec4c:	fe00e800 	.word	0xfe00e800

0800ec50 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 800ec50:	b480      	push	{r7}
 800ec52:	b087      	sub	sp, #28
 800ec54:	af00      	add	r7, sp, #0
 800ec56:	60f8      	str	r0, [r7, #12]
 800ec58:	607b      	str	r3, [r7, #4]
 800ec5a:	460b      	mov	r3, r1
 800ec5c:	817b      	strh	r3, [r7, #10]
 800ec5e:	4613      	mov	r3, r2
 800ec60:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800ec62:	897b      	ldrh	r3, [r7, #10]
 800ec64:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800ec68:	7a7b      	ldrb	r3, [r7, #9]
 800ec6a:	041b      	lsls	r3, r3, #16
 800ec6c:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800ec70:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800ec72:	687b      	ldr	r3, [r7, #4]
 800ec74:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800ec76:	6a3b      	ldr	r3, [r7, #32]
 800ec78:	4313      	orrs	r3, r2
 800ec7a:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800ec7e:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 800ec80:	68fb      	ldr	r3, [r7, #12]
 800ec82:	681b      	ldr	r3, [r3, #0]
 800ec84:	685a      	ldr	r2, [r3, #4]
 800ec86:	6a3b      	ldr	r3, [r7, #32]
 800ec88:	0d5b      	lsrs	r3, r3, #21
 800ec8a:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 800ec8e:	4b08      	ldr	r3, [pc, #32]	@ (800ecb0 <I2C_TransferConfig+0x60>)
 800ec90:	430b      	orrs	r3, r1
 800ec92:	43db      	mvns	r3, r3
 800ec94:	ea02 0103 	and.w	r1, r2, r3
 800ec98:	68fb      	ldr	r3, [r7, #12]
 800ec9a:	681b      	ldr	r3, [r3, #0]
 800ec9c:	697a      	ldr	r2, [r7, #20]
 800ec9e:	430a      	orrs	r2, r1
 800eca0:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800eca2:	bf00      	nop
 800eca4:	371c      	adds	r7, #28
 800eca6:	46bd      	mov	sp, r7
 800eca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ecac:	4770      	bx	lr
 800ecae:	bf00      	nop
 800ecb0:	03ff63ff 	.word	0x03ff63ff

0800ecb4 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800ecb4:	b480      	push	{r7}
 800ecb6:	b083      	sub	sp, #12
 800ecb8:	af00      	add	r7, sp, #0
 800ecba:	6078      	str	r0, [r7, #4]
 800ecbc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800ecbe:	687b      	ldr	r3, [r7, #4]
 800ecc0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800ecc4:	b2db      	uxtb	r3, r3
 800ecc6:	2b20      	cmp	r3, #32
 800ecc8:	d138      	bne.n	800ed3c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800ecca:	687b      	ldr	r3, [r7, #4]
 800eccc:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800ecd0:	2b01      	cmp	r3, #1
 800ecd2:	d101      	bne.n	800ecd8 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800ecd4:	2302      	movs	r3, #2
 800ecd6:	e032      	b.n	800ed3e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800ecd8:	687b      	ldr	r3, [r7, #4]
 800ecda:	2201      	movs	r2, #1
 800ecdc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800ece0:	687b      	ldr	r3, [r7, #4]
 800ece2:	2224      	movs	r2, #36	@ 0x24
 800ece4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800ece8:	687b      	ldr	r3, [r7, #4]
 800ecea:	681b      	ldr	r3, [r3, #0]
 800ecec:	681a      	ldr	r2, [r3, #0]
 800ecee:	687b      	ldr	r3, [r7, #4]
 800ecf0:	681b      	ldr	r3, [r3, #0]
 800ecf2:	f022 0201 	bic.w	r2, r2, #1
 800ecf6:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800ecf8:	687b      	ldr	r3, [r7, #4]
 800ecfa:	681b      	ldr	r3, [r3, #0]
 800ecfc:	681a      	ldr	r2, [r3, #0]
 800ecfe:	687b      	ldr	r3, [r7, #4]
 800ed00:	681b      	ldr	r3, [r3, #0]
 800ed02:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800ed06:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800ed08:	687b      	ldr	r3, [r7, #4]
 800ed0a:	681b      	ldr	r3, [r3, #0]
 800ed0c:	6819      	ldr	r1, [r3, #0]
 800ed0e:	687b      	ldr	r3, [r7, #4]
 800ed10:	681b      	ldr	r3, [r3, #0]
 800ed12:	683a      	ldr	r2, [r7, #0]
 800ed14:	430a      	orrs	r2, r1
 800ed16:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800ed18:	687b      	ldr	r3, [r7, #4]
 800ed1a:	681b      	ldr	r3, [r3, #0]
 800ed1c:	681a      	ldr	r2, [r3, #0]
 800ed1e:	687b      	ldr	r3, [r7, #4]
 800ed20:	681b      	ldr	r3, [r3, #0]
 800ed22:	f042 0201 	orr.w	r2, r2, #1
 800ed26:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800ed28:	687b      	ldr	r3, [r7, #4]
 800ed2a:	2220      	movs	r2, #32
 800ed2c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800ed30:	687b      	ldr	r3, [r7, #4]
 800ed32:	2200      	movs	r2, #0
 800ed34:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800ed38:	2300      	movs	r3, #0
 800ed3a:	e000      	b.n	800ed3e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800ed3c:	2302      	movs	r3, #2
  }
}
 800ed3e:	4618      	mov	r0, r3
 800ed40:	370c      	adds	r7, #12
 800ed42:	46bd      	mov	sp, r7
 800ed44:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed48:	4770      	bx	lr

0800ed4a <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800ed4a:	b480      	push	{r7}
 800ed4c:	b085      	sub	sp, #20
 800ed4e:	af00      	add	r7, sp, #0
 800ed50:	6078      	str	r0, [r7, #4]
 800ed52:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800ed54:	687b      	ldr	r3, [r7, #4]
 800ed56:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800ed5a:	b2db      	uxtb	r3, r3
 800ed5c:	2b20      	cmp	r3, #32
 800ed5e:	d139      	bne.n	800edd4 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800ed60:	687b      	ldr	r3, [r7, #4]
 800ed62:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800ed66:	2b01      	cmp	r3, #1
 800ed68:	d101      	bne.n	800ed6e <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800ed6a:	2302      	movs	r3, #2
 800ed6c:	e033      	b.n	800edd6 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800ed6e:	687b      	ldr	r3, [r7, #4]
 800ed70:	2201      	movs	r2, #1
 800ed72:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800ed76:	687b      	ldr	r3, [r7, #4]
 800ed78:	2224      	movs	r2, #36	@ 0x24
 800ed7a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800ed7e:	687b      	ldr	r3, [r7, #4]
 800ed80:	681b      	ldr	r3, [r3, #0]
 800ed82:	681a      	ldr	r2, [r3, #0]
 800ed84:	687b      	ldr	r3, [r7, #4]
 800ed86:	681b      	ldr	r3, [r3, #0]
 800ed88:	f022 0201 	bic.w	r2, r2, #1
 800ed8c:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800ed8e:	687b      	ldr	r3, [r7, #4]
 800ed90:	681b      	ldr	r3, [r3, #0]
 800ed92:	681b      	ldr	r3, [r3, #0]
 800ed94:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800ed96:	68fb      	ldr	r3, [r7, #12]
 800ed98:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 800ed9c:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800ed9e:	683b      	ldr	r3, [r7, #0]
 800eda0:	021b      	lsls	r3, r3, #8
 800eda2:	68fa      	ldr	r2, [r7, #12]
 800eda4:	4313      	orrs	r3, r2
 800eda6:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800eda8:	687b      	ldr	r3, [r7, #4]
 800edaa:	681b      	ldr	r3, [r3, #0]
 800edac:	68fa      	ldr	r2, [r7, #12]
 800edae:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800edb0:	687b      	ldr	r3, [r7, #4]
 800edb2:	681b      	ldr	r3, [r3, #0]
 800edb4:	681a      	ldr	r2, [r3, #0]
 800edb6:	687b      	ldr	r3, [r7, #4]
 800edb8:	681b      	ldr	r3, [r3, #0]
 800edba:	f042 0201 	orr.w	r2, r2, #1
 800edbe:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800edc0:	687b      	ldr	r3, [r7, #4]
 800edc2:	2220      	movs	r2, #32
 800edc4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800edc8:	687b      	ldr	r3, [r7, #4]
 800edca:	2200      	movs	r2, #0
 800edcc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800edd0:	2300      	movs	r3, #0
 800edd2:	e000      	b.n	800edd6 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800edd4:	2302      	movs	r3, #2
  }
}
 800edd6:	4618      	mov	r0, r3
 800edd8:	3714      	adds	r7, #20
 800edda:	46bd      	mov	sp, r7
 800eddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ede0:	4770      	bx	lr
	...

0800ede4 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 800ede4:	b480      	push	{r7}
 800ede6:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 800ede8:	4b04      	ldr	r3, [pc, #16]	@ (800edfc <HAL_PWREx_GetVoltageRange+0x18>)
 800edea:	681b      	ldr	r3, [r3, #0]
 800edec:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 800edf0:	4618      	mov	r0, r3
 800edf2:	46bd      	mov	sp, r7
 800edf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800edf8:	4770      	bx	lr
 800edfa:	bf00      	nop
 800edfc:	40007000 	.word	0x40007000

0800ee00 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800ee00:	b480      	push	{r7}
 800ee02:	b085      	sub	sp, #20
 800ee04:	af00      	add	r7, sp, #0
 800ee06:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800ee08:	687b      	ldr	r3, [r7, #4]
 800ee0a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800ee0e:	d130      	bne.n	800ee72 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 800ee10:	4b23      	ldr	r3, [pc, #140]	@ (800eea0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800ee12:	681b      	ldr	r3, [r3, #0]
 800ee14:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800ee18:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800ee1c:	d038      	beq.n	800ee90 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800ee1e:	4b20      	ldr	r3, [pc, #128]	@ (800eea0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800ee20:	681b      	ldr	r3, [r3, #0]
 800ee22:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800ee26:	4a1e      	ldr	r2, [pc, #120]	@ (800eea0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800ee28:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800ee2c:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800ee2e:	4b1d      	ldr	r3, [pc, #116]	@ (800eea4 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 800ee30:	681b      	ldr	r3, [r3, #0]
 800ee32:	2232      	movs	r2, #50	@ 0x32
 800ee34:	fb02 f303 	mul.w	r3, r2, r3
 800ee38:	4a1b      	ldr	r2, [pc, #108]	@ (800eea8 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800ee3a:	fba2 2303 	umull	r2, r3, r2, r3
 800ee3e:	0c9b      	lsrs	r3, r3, #18
 800ee40:	3301      	adds	r3, #1
 800ee42:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800ee44:	e002      	b.n	800ee4c <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800ee46:	68fb      	ldr	r3, [r7, #12]
 800ee48:	3b01      	subs	r3, #1
 800ee4a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800ee4c:	4b14      	ldr	r3, [pc, #80]	@ (800eea0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800ee4e:	695b      	ldr	r3, [r3, #20]
 800ee50:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800ee54:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800ee58:	d102      	bne.n	800ee60 <HAL_PWREx_ControlVoltageScaling+0x60>
 800ee5a:	68fb      	ldr	r3, [r7, #12]
 800ee5c:	2b00      	cmp	r3, #0
 800ee5e:	d1f2      	bne.n	800ee46 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800ee60:	4b0f      	ldr	r3, [pc, #60]	@ (800eea0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800ee62:	695b      	ldr	r3, [r3, #20]
 800ee64:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800ee68:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800ee6c:	d110      	bne.n	800ee90 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800ee6e:	2303      	movs	r3, #3
 800ee70:	e00f      	b.n	800ee92 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800ee72:	4b0b      	ldr	r3, [pc, #44]	@ (800eea0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800ee74:	681b      	ldr	r3, [r3, #0]
 800ee76:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800ee7a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800ee7e:	d007      	beq.n	800ee90 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800ee80:	4b07      	ldr	r3, [pc, #28]	@ (800eea0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800ee82:	681b      	ldr	r3, [r3, #0]
 800ee84:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800ee88:	4a05      	ldr	r2, [pc, #20]	@ (800eea0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800ee8a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800ee8e:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 800ee90:	2300      	movs	r3, #0
}
 800ee92:	4618      	mov	r0, r3
 800ee94:	3714      	adds	r7, #20
 800ee96:	46bd      	mov	sp, r7
 800ee98:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee9c:	4770      	bx	lr
 800ee9e:	bf00      	nop
 800eea0:	40007000 	.word	0x40007000
 800eea4:	20000268 	.word	0x20000268
 800eea8:	431bde83 	.word	0x431bde83

0800eeac <HAL_QSPI_Init>:
  *        in the QSPI_InitTypeDef and initialize the associated handle.
  * @param hqspi QSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Init(QSPI_HandleTypeDef *hqspi)
{
 800eeac:	b580      	push	{r7, lr}
 800eeae:	b086      	sub	sp, #24
 800eeb0:	af02      	add	r7, sp, #8
 800eeb2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 800eeb4:	f7fb ffa0 	bl	800adf8 <HAL_GetTick>
 800eeb8:	60f8      	str	r0, [r7, #12]

  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 800eeba:	687b      	ldr	r3, [r7, #4]
 800eebc:	2b00      	cmp	r3, #0
 800eebe:	d101      	bne.n	800eec4 <HAL_QSPI_Init+0x18>
  {
    return HAL_ERROR;
 800eec0:	2301      	movs	r3, #1
 800eec2:	e063      	b.n	800ef8c <HAL_QSPI_Init+0xe0>
  {
    assert_param(IS_QSPI_FLASH_ID(hqspi->Init.FlashID));
  }
#endif

  if(hqspi->State == HAL_QSPI_STATE_RESET)
 800eec4:	687b      	ldr	r3, [r7, #4]
 800eec6:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 800eeca:	b2db      	uxtb	r3, r3
 800eecc:	2b00      	cmp	r3, #0
 800eece:	d10b      	bne.n	800eee8 <HAL_QSPI_Init+0x3c>
  {
    /* Allocate lock resource and initialize it */
    hqspi->Lock = HAL_UNLOCKED;
 800eed0:	687b      	ldr	r3, [r7, #4]
 800eed2:	2200      	movs	r2, #0
 800eed4:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

    /* Init the low level hardware */
    hqspi->MspInitCallback(hqspi);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_QSPI_MspInit(hqspi);
 800eed8:	6878      	ldr	r0, [r7, #4]
 800eeda:	f7f8 fac7 	bl	800746c <HAL_QSPI_MspInit>
#endif

    /* Configure the default timeout for the QSPI memory access */
    HAL_QSPI_SetTimeout(hqspi, HAL_QSPI_TIMEOUT_DEFAULT_VALUE);
 800eede:	f241 3188 	movw	r1, #5000	@ 0x1388
 800eee2:	6878      	ldr	r0, [r7, #4]
 800eee4:	f000 fa68 	bl	800f3b8 <HAL_QSPI_SetTimeout>
  }

  /* Configure QSPI FIFO Threshold */
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 800eee8:	687b      	ldr	r3, [r7, #4]
 800eeea:	681b      	ldr	r3, [r3, #0]
 800eeec:	681b      	ldr	r3, [r3, #0]
 800eeee:	f423 6170 	bic.w	r1, r3, #3840	@ 0xf00
 800eef2:	687b      	ldr	r3, [r7, #4]
 800eef4:	689b      	ldr	r3, [r3, #8]
 800eef6:	3b01      	subs	r3, #1
 800eef8:	021a      	lsls	r2, r3, #8
 800eefa:	687b      	ldr	r3, [r7, #4]
 800eefc:	681b      	ldr	r3, [r3, #0]
 800eefe:	430a      	orrs	r2, r1
 800ef00:	601a      	str	r2, [r3, #0]
             ((hqspi->Init.FifoThreshold - 1U) << QUADSPI_CR_FTHRES_Pos));

  /* Wait till BUSY flag reset */
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 800ef02:	687b      	ldr	r3, [r7, #4]
 800ef04:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ef06:	9300      	str	r3, [sp, #0]
 800ef08:	68fb      	ldr	r3, [r7, #12]
 800ef0a:	2200      	movs	r2, #0
 800ef0c:	2120      	movs	r1, #32
 800ef0e:	6878      	ldr	r0, [r7, #4]
 800ef10:	f000 fa60 	bl	800f3d4 <QSPI_WaitFlagStateUntilTimeout>
 800ef14:	4603      	mov	r3, r0
 800ef16:	72fb      	strb	r3, [r7, #11]

  if(status == HAL_OK)
 800ef18:	7afb      	ldrb	r3, [r7, #11]
 800ef1a:	2b00      	cmp	r3, #0
 800ef1c:	d131      	bne.n	800ef82 <HAL_QSPI_Init+0xd6>
#if defined(QUADSPI_CR_DFM)
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM),
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting  | hqspi->Init.FlashID | hqspi->Init.DualFlash));
#else
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT),
 800ef1e:	687b      	ldr	r3, [r7, #4]
 800ef20:	681b      	ldr	r3, [r3, #0]
 800ef22:	681b      	ldr	r3, [r3, #0]
 800ef24:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 800ef28:	f023 0310 	bic.w	r3, r3, #16
 800ef2c:	687a      	ldr	r2, [r7, #4]
 800ef2e:	6852      	ldr	r2, [r2, #4]
 800ef30:	0611      	lsls	r1, r2, #24
 800ef32:	687a      	ldr	r2, [r7, #4]
 800ef34:	68d2      	ldr	r2, [r2, #12]
 800ef36:	4311      	orrs	r1, r2
 800ef38:	687a      	ldr	r2, [r7, #4]
 800ef3a:	6812      	ldr	r2, [r2, #0]
 800ef3c:	430b      	orrs	r3, r1
 800ef3e:	6013      	str	r3, [r2, #0]
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting));
#endif

    /* Configure QSPI Flash Size, CS High Time and Clock Mode */
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
 800ef40:	687b      	ldr	r3, [r7, #4]
 800ef42:	681b      	ldr	r3, [r3, #0]
 800ef44:	685a      	ldr	r2, [r3, #4]
 800ef46:	4b13      	ldr	r3, [pc, #76]	@ (800ef94 <HAL_QSPI_Init+0xe8>)
 800ef48:	4013      	ands	r3, r2
 800ef4a:	687a      	ldr	r2, [r7, #4]
 800ef4c:	6912      	ldr	r2, [r2, #16]
 800ef4e:	0411      	lsls	r1, r2, #16
 800ef50:	687a      	ldr	r2, [r7, #4]
 800ef52:	6952      	ldr	r2, [r2, #20]
 800ef54:	4311      	orrs	r1, r2
 800ef56:	687a      	ldr	r2, [r7, #4]
 800ef58:	6992      	ldr	r2, [r2, #24]
 800ef5a:	4311      	orrs	r1, r2
 800ef5c:	687a      	ldr	r2, [r7, #4]
 800ef5e:	6812      	ldr	r2, [r2, #0]
 800ef60:	430b      	orrs	r3, r1
 800ef62:	6053      	str	r3, [r2, #4]
               ((hqspi->Init.FlashSize << QUADSPI_DCR_FSIZE_Pos) |
                hqspi->Init.ChipSelectHighTime | hqspi->Init.ClockMode));

    /* Enable the QSPI peripheral */
    __HAL_QSPI_ENABLE(hqspi);
 800ef64:	687b      	ldr	r3, [r7, #4]
 800ef66:	681b      	ldr	r3, [r3, #0]
 800ef68:	681a      	ldr	r2, [r3, #0]
 800ef6a:	687b      	ldr	r3, [r7, #4]
 800ef6c:	681b      	ldr	r3, [r3, #0]
 800ef6e:	f042 0201 	orr.w	r2, r2, #1
 800ef72:	601a      	str	r2, [r3, #0]

    /* Set QSPI error code to none */
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 800ef74:	687b      	ldr	r3, [r7, #4]
 800ef76:	2200      	movs	r2, #0
 800ef78:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Initialize the QSPI state */
    hqspi->State = HAL_QSPI_STATE_READY;
 800ef7a:	687b      	ldr	r3, [r7, #4]
 800ef7c:	2201      	movs	r2, #1
 800ef7e:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
  }

  /* Release Lock */
  __HAL_UNLOCK(hqspi);
 800ef82:	687b      	ldr	r3, [r7, #4]
 800ef84:	2200      	movs	r2, #0
 800ef86:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  /* Return function status */
  return status;
 800ef8a:	7afb      	ldrb	r3, [r7, #11]
}
 800ef8c:	4618      	mov	r0, r3
 800ef8e:	3710      	adds	r7, #16
 800ef90:	46bd      	mov	sp, r7
 800ef92:	bd80      	pop	{r7, pc}
 800ef94:	ffe0f8fe 	.word	0xffe0f8fe

0800ef98 <HAL_QSPI_Command>:
  * @param Timeout Timeout duration
  * @note   This function is used only in Indirect Read or Write Modes
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Command(QSPI_HandleTypeDef *hqspi, QSPI_CommandTypeDef *cmd, uint32_t Timeout)
{
 800ef98:	b580      	push	{r7, lr}
 800ef9a:	b088      	sub	sp, #32
 800ef9c:	af02      	add	r7, sp, #8
 800ef9e:	60f8      	str	r0, [r7, #12]
 800efa0:	60b9      	str	r1, [r7, #8]
 800efa2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 800efa4:	f7fb ff28 	bl	800adf8 <HAL_GetTick>
 800efa8:	6138      	str	r0, [r7, #16]
  assert_param(IS_QSPI_DDR_MODE(cmd->DdrMode));
  assert_param(IS_QSPI_DDR_HHC(cmd->DdrHoldHalfCycle));
  assert_param(IS_QSPI_SIOO_MODE(cmd->SIOOMode));

  /* Process locked */
  __HAL_LOCK(hqspi);
 800efaa:	68fb      	ldr	r3, [r7, #12]
 800efac:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800efb0:	b2db      	uxtb	r3, r3
 800efb2:	2b01      	cmp	r3, #1
 800efb4:	d101      	bne.n	800efba <HAL_QSPI_Command+0x22>
 800efb6:	2302      	movs	r3, #2
 800efb8:	e048      	b.n	800f04c <HAL_QSPI_Command+0xb4>
 800efba:	68fb      	ldr	r3, [r7, #12]
 800efbc:	2201      	movs	r2, #1
 800efbe:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  if(hqspi->State == HAL_QSPI_STATE_READY)
 800efc2:	68fb      	ldr	r3, [r7, #12]
 800efc4:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 800efc8:	b2db      	uxtb	r3, r3
 800efca:	2b01      	cmp	r3, #1
 800efcc:	d137      	bne.n	800f03e <HAL_QSPI_Command+0xa6>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 800efce:	68fb      	ldr	r3, [r7, #12]
 800efd0:	2200      	movs	r2, #0
 800efd2:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Update QSPI state */
    hqspi->State = HAL_QSPI_STATE_BUSY;
 800efd4:	68fb      	ldr	r3, [r7, #12]
 800efd6:	2202      	movs	r2, #2
 800efd8:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

    /* Wait till BUSY flag reset */
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 800efdc:	687b      	ldr	r3, [r7, #4]
 800efde:	9300      	str	r3, [sp, #0]
 800efe0:	693b      	ldr	r3, [r7, #16]
 800efe2:	2200      	movs	r2, #0
 800efe4:	2120      	movs	r1, #32
 800efe6:	68f8      	ldr	r0, [r7, #12]
 800efe8:	f000 f9f4 	bl	800f3d4 <QSPI_WaitFlagStateUntilTimeout>
 800efec:	4603      	mov	r3, r0
 800efee:	75fb      	strb	r3, [r7, #23]

    if (status == HAL_OK)
 800eff0:	7dfb      	ldrb	r3, [r7, #23]
 800eff2:	2b00      	cmp	r3, #0
 800eff4:	d125      	bne.n	800f042 <HAL_QSPI_Command+0xaa>
    {
      /* Call the configuration function */
      QSPI_Config(hqspi, cmd, QSPI_FUNCTIONAL_MODE_INDIRECT_WRITE);
 800eff6:	2200      	movs	r2, #0
 800eff8:	68b9      	ldr	r1, [r7, #8]
 800effa:	68f8      	ldr	r0, [r7, #12]
 800effc:	f000 fa21 	bl	800f442 <QSPI_Config>

      if (cmd->DataMode == QSPI_DATA_NONE)
 800f000:	68bb      	ldr	r3, [r7, #8]
 800f002:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f004:	2b00      	cmp	r3, #0
 800f006:	d115      	bne.n	800f034 <HAL_QSPI_Command+0x9c>
      {
        /* When there is no data phase, the transfer start as soon as the configuration is done
        so wait until TC flag is set to go back in idle state */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, Timeout);
 800f008:	687b      	ldr	r3, [r7, #4]
 800f00a:	9300      	str	r3, [sp, #0]
 800f00c:	693b      	ldr	r3, [r7, #16]
 800f00e:	2201      	movs	r2, #1
 800f010:	2102      	movs	r1, #2
 800f012:	68f8      	ldr	r0, [r7, #12]
 800f014:	f000 f9de 	bl	800f3d4 <QSPI_WaitFlagStateUntilTimeout>
 800f018:	4603      	mov	r3, r0
 800f01a:	75fb      	strb	r3, [r7, #23]

        if (status == HAL_OK)
 800f01c:	7dfb      	ldrb	r3, [r7, #23]
 800f01e:	2b00      	cmp	r3, #0
 800f020:	d10f      	bne.n	800f042 <HAL_QSPI_Command+0xaa>
        {
          __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 800f022:	68fb      	ldr	r3, [r7, #12]
 800f024:	681b      	ldr	r3, [r3, #0]
 800f026:	2202      	movs	r2, #2
 800f028:	60da      	str	r2, [r3, #12]

          /* Update QSPI state */
          hqspi->State = HAL_QSPI_STATE_READY;
 800f02a:	68fb      	ldr	r3, [r7, #12]
 800f02c:	2201      	movs	r2, #1
 800f02e:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
 800f032:	e006      	b.n	800f042 <HAL_QSPI_Command+0xaa>
        }
      }
      else
      {
        /* Update QSPI state */
        hqspi->State = HAL_QSPI_STATE_READY;
 800f034:	68fb      	ldr	r3, [r7, #12]
 800f036:	2201      	movs	r2, #1
 800f038:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
 800f03c:	e001      	b.n	800f042 <HAL_QSPI_Command+0xaa>
      }
    }
  }
  else
  {
    status = HAL_BUSY;
 800f03e:	2302      	movs	r3, #2
 800f040:	75fb      	strb	r3, [r7, #23]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hqspi);
 800f042:	68fb      	ldr	r3, [r7, #12]
 800f044:	2200      	movs	r2, #0
 800f046:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  /* Return function status */
  return status;
 800f04a:	7dfb      	ldrb	r3, [r7, #23]
}
 800f04c:	4618      	mov	r0, r3
 800f04e:	3718      	adds	r7, #24
 800f050:	46bd      	mov	sp, r7
 800f052:	bd80      	pop	{r7, pc}

0800f054 <HAL_QSPI_Transmit>:
  * @param Timeout Timeout duration
  * @note   This function is used only in Indirect Write Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Transmit(QSPI_HandleTypeDef *hqspi, uint8_t *pData, uint32_t Timeout)
{
 800f054:	b580      	push	{r7, lr}
 800f056:	b08a      	sub	sp, #40	@ 0x28
 800f058:	af02      	add	r7, sp, #8
 800f05a:	60f8      	str	r0, [r7, #12]
 800f05c:	60b9      	str	r1, [r7, #8]
 800f05e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800f060:	2300      	movs	r3, #0
 800f062:	77fb      	strb	r3, [r7, #31]
  uint32_t tickstart = HAL_GetTick();
 800f064:	f7fb fec8 	bl	800adf8 <HAL_GetTick>
 800f068:	61b8      	str	r0, [r7, #24]
  __IO uint32_t *data_reg = &hqspi->Instance->DR;
 800f06a:	68fb      	ldr	r3, [r7, #12]
 800f06c:	681b      	ldr	r3, [r3, #0]
 800f06e:	3320      	adds	r3, #32
 800f070:	617b      	str	r3, [r7, #20]

  /* Process locked */
  __HAL_LOCK(hqspi);
 800f072:	68fb      	ldr	r3, [r7, #12]
 800f074:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800f078:	b2db      	uxtb	r3, r3
 800f07a:	2b01      	cmp	r3, #1
 800f07c:	d101      	bne.n	800f082 <HAL_QSPI_Transmit+0x2e>
 800f07e:	2302      	movs	r3, #2
 800f080:	e07b      	b.n	800f17a <HAL_QSPI_Transmit+0x126>
 800f082:	68fb      	ldr	r3, [r7, #12]
 800f084:	2201      	movs	r2, #1
 800f086:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  if(hqspi->State == HAL_QSPI_STATE_READY)
 800f08a:	68fb      	ldr	r3, [r7, #12]
 800f08c:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 800f090:	b2db      	uxtb	r3, r3
 800f092:	2b01      	cmp	r3, #1
 800f094:	d16a      	bne.n	800f16c <HAL_QSPI_Transmit+0x118>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 800f096:	68fb      	ldr	r3, [r7, #12]
 800f098:	2200      	movs	r2, #0
 800f09a:	63da      	str	r2, [r3, #60]	@ 0x3c

    if(pData != NULL )
 800f09c:	68bb      	ldr	r3, [r7, #8]
 800f09e:	2b00      	cmp	r3, #0
 800f0a0:	d05b      	beq.n	800f15a <HAL_QSPI_Transmit+0x106>
    {
      /* Update state */
      hqspi->State = HAL_QSPI_STATE_BUSY_INDIRECT_TX;
 800f0a2:	68fb      	ldr	r3, [r7, #12]
 800f0a4:	2212      	movs	r2, #18
 800f0a6:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

      /* Configure counters and size of the handle */
      hqspi->TxXferCount = READ_REG(hqspi->Instance->DLR) + 1U;
 800f0aa:	68fb      	ldr	r3, [r7, #12]
 800f0ac:	681b      	ldr	r3, [r3, #0]
 800f0ae:	691b      	ldr	r3, [r3, #16]
 800f0b0:	1c5a      	adds	r2, r3, #1
 800f0b2:	68fb      	ldr	r3, [r7, #12]
 800f0b4:	625a      	str	r2, [r3, #36]	@ 0x24
      hqspi->TxXferSize = READ_REG(hqspi->Instance->DLR) + 1U;
 800f0b6:	68fb      	ldr	r3, [r7, #12]
 800f0b8:	681b      	ldr	r3, [r3, #0]
 800f0ba:	691b      	ldr	r3, [r3, #16]
 800f0bc:	1c5a      	adds	r2, r3, #1
 800f0be:	68fb      	ldr	r3, [r7, #12]
 800f0c0:	621a      	str	r2, [r3, #32]
      hqspi->pTxBuffPtr = pData;
 800f0c2:	68fb      	ldr	r3, [r7, #12]
 800f0c4:	68ba      	ldr	r2, [r7, #8]
 800f0c6:	61da      	str	r2, [r3, #28]

      /* Configure QSPI: CCR register with functional as indirect write */
      MODIFY_REG(hqspi->Instance->CCR, QUADSPI_CCR_FMODE, QSPI_FUNCTIONAL_MODE_INDIRECT_WRITE);
 800f0c8:	68fb      	ldr	r3, [r7, #12]
 800f0ca:	681b      	ldr	r3, [r3, #0]
 800f0cc:	695a      	ldr	r2, [r3, #20]
 800f0ce:	68fb      	ldr	r3, [r7, #12]
 800f0d0:	681b      	ldr	r3, [r3, #0]
 800f0d2:	f022 6240 	bic.w	r2, r2, #201326592	@ 0xc000000
 800f0d6:	615a      	str	r2, [r3, #20]

      while(hqspi->TxXferCount > 0U)
 800f0d8:	e01b      	b.n	800f112 <HAL_QSPI_Transmit+0xbe>
      {
        /* Wait until FT flag is set to send data */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_FT, SET, tickstart, Timeout);
 800f0da:	687b      	ldr	r3, [r7, #4]
 800f0dc:	9300      	str	r3, [sp, #0]
 800f0de:	69bb      	ldr	r3, [r7, #24]
 800f0e0:	2201      	movs	r2, #1
 800f0e2:	2104      	movs	r1, #4
 800f0e4:	68f8      	ldr	r0, [r7, #12]
 800f0e6:	f000 f975 	bl	800f3d4 <QSPI_WaitFlagStateUntilTimeout>
 800f0ea:	4603      	mov	r3, r0
 800f0ec:	77fb      	strb	r3, [r7, #31]

        if (status != HAL_OK)
 800f0ee:	7ffb      	ldrb	r3, [r7, #31]
 800f0f0:	2b00      	cmp	r3, #0
 800f0f2:	d113      	bne.n	800f11c <HAL_QSPI_Transmit+0xc8>
        {
          break;
        }

        *((__IO uint8_t *)data_reg) = *hqspi->pTxBuffPtr;
 800f0f4:	68fb      	ldr	r3, [r7, #12]
 800f0f6:	69db      	ldr	r3, [r3, #28]
 800f0f8:	781a      	ldrb	r2, [r3, #0]
 800f0fa:	697b      	ldr	r3, [r7, #20]
 800f0fc:	701a      	strb	r2, [r3, #0]
        hqspi->pTxBuffPtr++;
 800f0fe:	68fb      	ldr	r3, [r7, #12]
 800f100:	69db      	ldr	r3, [r3, #28]
 800f102:	1c5a      	adds	r2, r3, #1
 800f104:	68fb      	ldr	r3, [r7, #12]
 800f106:	61da      	str	r2, [r3, #28]
        hqspi->TxXferCount--;
 800f108:	68fb      	ldr	r3, [r7, #12]
 800f10a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f10c:	1e5a      	subs	r2, r3, #1
 800f10e:	68fb      	ldr	r3, [r7, #12]
 800f110:	625a      	str	r2, [r3, #36]	@ 0x24
      while(hqspi->TxXferCount > 0U)
 800f112:	68fb      	ldr	r3, [r7, #12]
 800f114:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f116:	2b00      	cmp	r3, #0
 800f118:	d1df      	bne.n	800f0da <HAL_QSPI_Transmit+0x86>
 800f11a:	e000      	b.n	800f11e <HAL_QSPI_Transmit+0xca>
          break;
 800f11c:	bf00      	nop
      }

      if (status == HAL_OK)
 800f11e:	7ffb      	ldrb	r3, [r7, #31]
 800f120:	2b00      	cmp	r3, #0
 800f122:	d115      	bne.n	800f150 <HAL_QSPI_Transmit+0xfc>
      {
        /* Wait until TC flag is set to go back in idle state */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, Timeout);
 800f124:	687b      	ldr	r3, [r7, #4]
 800f126:	9300      	str	r3, [sp, #0]
 800f128:	69bb      	ldr	r3, [r7, #24]
 800f12a:	2201      	movs	r2, #1
 800f12c:	2102      	movs	r1, #2
 800f12e:	68f8      	ldr	r0, [r7, #12]
 800f130:	f000 f950 	bl	800f3d4 <QSPI_WaitFlagStateUntilTimeout>
 800f134:	4603      	mov	r3, r0
 800f136:	77fb      	strb	r3, [r7, #31]

        if (status == HAL_OK)
 800f138:	7ffb      	ldrb	r3, [r7, #31]
 800f13a:	2b00      	cmp	r3, #0
 800f13c:	d108      	bne.n	800f150 <HAL_QSPI_Transmit+0xfc>
        {
          /* Clear Transfer Complete bit */
          __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 800f13e:	68fb      	ldr	r3, [r7, #12]
 800f140:	681b      	ldr	r3, [r3, #0]
 800f142:	2202      	movs	r2, #2
 800f144:	60da      	str	r2, [r3, #12]

#if  (defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx))
          /* Clear Busy bit */
          status = HAL_QSPI_Abort(hqspi);
 800f146:	68f8      	ldr	r0, [r7, #12]
 800f148:	f000 f8bd 	bl	800f2c6 <HAL_QSPI_Abort>
 800f14c:	4603      	mov	r3, r0
 800f14e:	77fb      	strb	r3, [r7, #31]
#endif
        }
      }

      /* Update QSPI state */
      hqspi->State = HAL_QSPI_STATE_READY;
 800f150:	68fb      	ldr	r3, [r7, #12]
 800f152:	2201      	movs	r2, #1
 800f154:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
 800f158:	e00a      	b.n	800f170 <HAL_QSPI_Transmit+0x11c>
    }
    else
    {
      hqspi->ErrorCode |= HAL_QSPI_ERROR_INVALID_PARAM;
 800f15a:	68fb      	ldr	r3, [r7, #12]
 800f15c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800f15e:	f043 0208 	orr.w	r2, r3, #8
 800f162:	68fb      	ldr	r3, [r7, #12]
 800f164:	63da      	str	r2, [r3, #60]	@ 0x3c
      status = HAL_ERROR;
 800f166:	2301      	movs	r3, #1
 800f168:	77fb      	strb	r3, [r7, #31]
 800f16a:	e001      	b.n	800f170 <HAL_QSPI_Transmit+0x11c>
    }
  }
  else
  {
    status = HAL_BUSY;
 800f16c:	2302      	movs	r3, #2
 800f16e:	77fb      	strb	r3, [r7, #31]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hqspi);
 800f170:	68fb      	ldr	r3, [r7, #12]
 800f172:	2200      	movs	r2, #0
 800f174:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  return status;
 800f178:	7ffb      	ldrb	r3, [r7, #31]
}
 800f17a:	4618      	mov	r0, r3
 800f17c:	3720      	adds	r7, #32
 800f17e:	46bd      	mov	sp, r7
 800f180:	bd80      	pop	{r7, pc}

0800f182 <HAL_QSPI_Receive>:
  * @param Timeout Timeout duration
  * @note   This function is used only in Indirect Read Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Receive(QSPI_HandleTypeDef *hqspi, uint8_t *pData, uint32_t Timeout)
{
 800f182:	b580      	push	{r7, lr}
 800f184:	b08a      	sub	sp, #40	@ 0x28
 800f186:	af02      	add	r7, sp, #8
 800f188:	60f8      	str	r0, [r7, #12]
 800f18a:	60b9      	str	r1, [r7, #8]
 800f18c:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800f18e:	2300      	movs	r3, #0
 800f190:	77fb      	strb	r3, [r7, #31]
  uint32_t tickstart = HAL_GetTick();
 800f192:	f7fb fe31 	bl	800adf8 <HAL_GetTick>
 800f196:	61b8      	str	r0, [r7, #24]
  uint32_t addr_reg = READ_REG(hqspi->Instance->AR);
 800f198:	68fb      	ldr	r3, [r7, #12]
 800f19a:	681b      	ldr	r3, [r3, #0]
 800f19c:	699b      	ldr	r3, [r3, #24]
 800f19e:	617b      	str	r3, [r7, #20]
  __IO uint32_t *data_reg = &hqspi->Instance->DR;
 800f1a0:	68fb      	ldr	r3, [r7, #12]
 800f1a2:	681b      	ldr	r3, [r3, #0]
 800f1a4:	3320      	adds	r3, #32
 800f1a6:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hqspi);
 800f1a8:	68fb      	ldr	r3, [r7, #12]
 800f1aa:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800f1ae:	b2db      	uxtb	r3, r3
 800f1b0:	2b01      	cmp	r3, #1
 800f1b2:	d101      	bne.n	800f1b8 <HAL_QSPI_Receive+0x36>
 800f1b4:	2302      	movs	r3, #2
 800f1b6:	e082      	b.n	800f2be <HAL_QSPI_Receive+0x13c>
 800f1b8:	68fb      	ldr	r3, [r7, #12]
 800f1ba:	2201      	movs	r2, #1
 800f1bc:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  if(hqspi->State == HAL_QSPI_STATE_READY)
 800f1c0:	68fb      	ldr	r3, [r7, #12]
 800f1c2:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 800f1c6:	b2db      	uxtb	r3, r3
 800f1c8:	2b01      	cmp	r3, #1
 800f1ca:	d171      	bne.n	800f2b0 <HAL_QSPI_Receive+0x12e>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 800f1cc:	68fb      	ldr	r3, [r7, #12]
 800f1ce:	2200      	movs	r2, #0
 800f1d0:	63da      	str	r2, [r3, #60]	@ 0x3c

    if(pData != NULL )
 800f1d2:	68bb      	ldr	r3, [r7, #8]
 800f1d4:	2b00      	cmp	r3, #0
 800f1d6:	d062      	beq.n	800f29e <HAL_QSPI_Receive+0x11c>
    {
      /* Update state */
      hqspi->State = HAL_QSPI_STATE_BUSY_INDIRECT_RX;
 800f1d8:	68fb      	ldr	r3, [r7, #12]
 800f1da:	2222      	movs	r2, #34	@ 0x22
 800f1dc:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

      /* Configure counters and size of the handle */
      hqspi->RxXferCount = READ_REG(hqspi->Instance->DLR) + 1U;
 800f1e0:	68fb      	ldr	r3, [r7, #12]
 800f1e2:	681b      	ldr	r3, [r3, #0]
 800f1e4:	691b      	ldr	r3, [r3, #16]
 800f1e6:	1c5a      	adds	r2, r3, #1
 800f1e8:	68fb      	ldr	r3, [r7, #12]
 800f1ea:	631a      	str	r2, [r3, #48]	@ 0x30
      hqspi->RxXferSize = READ_REG(hqspi->Instance->DLR) + 1U;
 800f1ec:	68fb      	ldr	r3, [r7, #12]
 800f1ee:	681b      	ldr	r3, [r3, #0]
 800f1f0:	691b      	ldr	r3, [r3, #16]
 800f1f2:	1c5a      	adds	r2, r3, #1
 800f1f4:	68fb      	ldr	r3, [r7, #12]
 800f1f6:	62da      	str	r2, [r3, #44]	@ 0x2c
      hqspi->pRxBuffPtr = pData;
 800f1f8:	68fb      	ldr	r3, [r7, #12]
 800f1fa:	68ba      	ldr	r2, [r7, #8]
 800f1fc:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Configure QSPI: CCR register with functional as indirect read */
      MODIFY_REG(hqspi->Instance->CCR, QUADSPI_CCR_FMODE, QSPI_FUNCTIONAL_MODE_INDIRECT_READ);
 800f1fe:	68fb      	ldr	r3, [r7, #12]
 800f200:	681b      	ldr	r3, [r3, #0]
 800f202:	695b      	ldr	r3, [r3, #20]
 800f204:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800f208:	68fb      	ldr	r3, [r7, #12]
 800f20a:	681b      	ldr	r3, [r3, #0]
 800f20c:	f042 6280 	orr.w	r2, r2, #67108864	@ 0x4000000
 800f210:	615a      	str	r2, [r3, #20]

      /* Start the transfer by re-writing the address in AR register */
      WRITE_REG(hqspi->Instance->AR, addr_reg);
 800f212:	68fb      	ldr	r3, [r7, #12]
 800f214:	681b      	ldr	r3, [r3, #0]
 800f216:	697a      	ldr	r2, [r7, #20]
 800f218:	619a      	str	r2, [r3, #24]

      while(hqspi->RxXferCount > 0U)
 800f21a:	e01c      	b.n	800f256 <HAL_QSPI_Receive+0xd4>
      {
        /* Wait until FT or TC flag is set to read received data */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, (QSPI_FLAG_FT | QSPI_FLAG_TC), SET, tickstart, Timeout);
 800f21c:	687b      	ldr	r3, [r7, #4]
 800f21e:	9300      	str	r3, [sp, #0]
 800f220:	69bb      	ldr	r3, [r7, #24]
 800f222:	2201      	movs	r2, #1
 800f224:	2106      	movs	r1, #6
 800f226:	68f8      	ldr	r0, [r7, #12]
 800f228:	f000 f8d4 	bl	800f3d4 <QSPI_WaitFlagStateUntilTimeout>
 800f22c:	4603      	mov	r3, r0
 800f22e:	77fb      	strb	r3, [r7, #31]

        if  (status != HAL_OK)
 800f230:	7ffb      	ldrb	r3, [r7, #31]
 800f232:	2b00      	cmp	r3, #0
 800f234:	d114      	bne.n	800f260 <HAL_QSPI_Receive+0xde>
        {
          break;
        }

        *hqspi->pRxBuffPtr = *((__IO uint8_t *)data_reg);
 800f236:	68fb      	ldr	r3, [r7, #12]
 800f238:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f23a:	693a      	ldr	r2, [r7, #16]
 800f23c:	7812      	ldrb	r2, [r2, #0]
 800f23e:	b2d2      	uxtb	r2, r2
 800f240:	701a      	strb	r2, [r3, #0]
        hqspi->pRxBuffPtr++;
 800f242:	68fb      	ldr	r3, [r7, #12]
 800f244:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f246:	1c5a      	adds	r2, r3, #1
 800f248:	68fb      	ldr	r3, [r7, #12]
 800f24a:	629a      	str	r2, [r3, #40]	@ 0x28
        hqspi->RxXferCount--;
 800f24c:	68fb      	ldr	r3, [r7, #12]
 800f24e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800f250:	1e5a      	subs	r2, r3, #1
 800f252:	68fb      	ldr	r3, [r7, #12]
 800f254:	631a      	str	r2, [r3, #48]	@ 0x30
      while(hqspi->RxXferCount > 0U)
 800f256:	68fb      	ldr	r3, [r7, #12]
 800f258:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800f25a:	2b00      	cmp	r3, #0
 800f25c:	d1de      	bne.n	800f21c <HAL_QSPI_Receive+0x9a>
 800f25e:	e000      	b.n	800f262 <HAL_QSPI_Receive+0xe0>
          break;
 800f260:	bf00      	nop
      }

      if (status == HAL_OK)
 800f262:	7ffb      	ldrb	r3, [r7, #31]
 800f264:	2b00      	cmp	r3, #0
 800f266:	d115      	bne.n	800f294 <HAL_QSPI_Receive+0x112>
      {
        /* Wait until TC flag is set to go back in idle state */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, Timeout);
 800f268:	687b      	ldr	r3, [r7, #4]
 800f26a:	9300      	str	r3, [sp, #0]
 800f26c:	69bb      	ldr	r3, [r7, #24]
 800f26e:	2201      	movs	r2, #1
 800f270:	2102      	movs	r1, #2
 800f272:	68f8      	ldr	r0, [r7, #12]
 800f274:	f000 f8ae 	bl	800f3d4 <QSPI_WaitFlagStateUntilTimeout>
 800f278:	4603      	mov	r3, r0
 800f27a:	77fb      	strb	r3, [r7, #31]

        if  (status == HAL_OK)
 800f27c:	7ffb      	ldrb	r3, [r7, #31]
 800f27e:	2b00      	cmp	r3, #0
 800f280:	d108      	bne.n	800f294 <HAL_QSPI_Receive+0x112>
        {
          /* Clear Transfer Complete bit */
          __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 800f282:	68fb      	ldr	r3, [r7, #12]
 800f284:	681b      	ldr	r3, [r3, #0]
 800f286:	2202      	movs	r2, #2
 800f288:	60da      	str	r2, [r3, #12]

#if  (defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx))
          /* Workaround - Extra data written in the FIFO at the end of a read transfer */
          status = HAL_QSPI_Abort(hqspi);
 800f28a:	68f8      	ldr	r0, [r7, #12]
 800f28c:	f000 f81b 	bl	800f2c6 <HAL_QSPI_Abort>
 800f290:	4603      	mov	r3, r0
 800f292:	77fb      	strb	r3, [r7, #31]
#endif
        }
      }

      /* Update QSPI state */
      hqspi->State = HAL_QSPI_STATE_READY;
 800f294:	68fb      	ldr	r3, [r7, #12]
 800f296:	2201      	movs	r2, #1
 800f298:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
 800f29c:	e00a      	b.n	800f2b4 <HAL_QSPI_Receive+0x132>
    }
    else
    {
      hqspi->ErrorCode |= HAL_QSPI_ERROR_INVALID_PARAM;
 800f29e:	68fb      	ldr	r3, [r7, #12]
 800f2a0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800f2a2:	f043 0208 	orr.w	r2, r3, #8
 800f2a6:	68fb      	ldr	r3, [r7, #12]
 800f2a8:	63da      	str	r2, [r3, #60]	@ 0x3c
      status = HAL_ERROR;
 800f2aa:	2301      	movs	r3, #1
 800f2ac:	77fb      	strb	r3, [r7, #31]
 800f2ae:	e001      	b.n	800f2b4 <HAL_QSPI_Receive+0x132>
    }
  }
  else
  {
    status = HAL_BUSY;
 800f2b0:	2302      	movs	r3, #2
 800f2b2:	77fb      	strb	r3, [r7, #31]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hqspi);
 800f2b4:	68fb      	ldr	r3, [r7, #12]
 800f2b6:	2200      	movs	r2, #0
 800f2b8:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  return status;
 800f2bc:	7ffb      	ldrb	r3, [r7, #31]
}
 800f2be:	4618      	mov	r0, r3
 800f2c0:	3720      	adds	r7, #32
 800f2c2:	46bd      	mov	sp, r7
 800f2c4:	bd80      	pop	{r7, pc}

0800f2c6 <HAL_QSPI_Abort>:
* @brief  Abort the current transmission.
* @param  hqspi QSPI handle
* @retval HAL status
*/
HAL_StatusTypeDef HAL_QSPI_Abort(QSPI_HandleTypeDef *hqspi)
{
 800f2c6:	b580      	push	{r7, lr}
 800f2c8:	b086      	sub	sp, #24
 800f2ca:	af02      	add	r7, sp, #8
 800f2cc:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800f2ce:	2300      	movs	r3, #0
 800f2d0:	73fb      	strb	r3, [r7, #15]
  uint32_t tickstart = HAL_GetTick();
 800f2d2:	f7fb fd91 	bl	800adf8 <HAL_GetTick>
 800f2d6:	60b8      	str	r0, [r7, #8]

  /* Check if the state is in one of the busy states */
  if (((uint32_t)hqspi->State & 0x2U) != 0U)
 800f2d8:	687b      	ldr	r3, [r7, #4]
 800f2da:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 800f2de:	b2db      	uxtb	r3, r3
 800f2e0:	f003 0302 	and.w	r3, r3, #2
 800f2e4:	2b00      	cmp	r3, #0
 800f2e6:	d062      	beq.n	800f3ae <HAL_QSPI_Abort+0xe8>
  {
    /* Process unlocked */
    __HAL_UNLOCK(hqspi);
 800f2e8:	687b      	ldr	r3, [r7, #4]
 800f2ea:	2200      	movs	r2, #0
 800f2ec:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

    if ((hqspi->Instance->CR & QUADSPI_CR_DMAEN) != 0U)
 800f2f0:	687b      	ldr	r3, [r7, #4]
 800f2f2:	681b      	ldr	r3, [r3, #0]
 800f2f4:	681b      	ldr	r3, [r3, #0]
 800f2f6:	f003 0304 	and.w	r3, r3, #4
 800f2fa:	2b00      	cmp	r3, #0
 800f2fc:	d017      	beq.n	800f32e <HAL_QSPI_Abort+0x68>
    {
      /* Disable the DMA transfer by clearing the DMAEN bit in the QSPI CR register */
      CLEAR_BIT(hqspi->Instance->CR, QUADSPI_CR_DMAEN);
 800f2fe:	687b      	ldr	r3, [r7, #4]
 800f300:	681b      	ldr	r3, [r3, #0]
 800f302:	681a      	ldr	r2, [r3, #0]
 800f304:	687b      	ldr	r3, [r7, #4]
 800f306:	681b      	ldr	r3, [r3, #0]
 800f308:	f022 0204 	bic.w	r2, r2, #4
 800f30c:	601a      	str	r2, [r3, #0]

      /* Abort DMA channel */
      status = HAL_DMA_Abort(hqspi->hdma);
 800f30e:	687b      	ldr	r3, [r7, #4]
 800f310:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800f312:	4618      	mov	r0, r3
 800f314:	f7fd fdb6 	bl	800ce84 <HAL_DMA_Abort>
 800f318:	4603      	mov	r3, r0
 800f31a:	73fb      	strb	r3, [r7, #15]
      if(status != HAL_OK)
 800f31c:	7bfb      	ldrb	r3, [r7, #15]
 800f31e:	2b00      	cmp	r3, #0
 800f320:	d005      	beq.n	800f32e <HAL_QSPI_Abort+0x68>
      {
        hqspi->ErrorCode |= HAL_QSPI_ERROR_DMA;
 800f322:	687b      	ldr	r3, [r7, #4]
 800f324:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800f326:	f043 0204 	orr.w	r2, r3, #4
 800f32a:	687b      	ldr	r3, [r7, #4]
 800f32c:	63da      	str	r2, [r3, #60]	@ 0x3c
      }
    }

    if (__HAL_QSPI_GET_FLAG(hqspi, QSPI_FLAG_BUSY) != RESET)
 800f32e:	687b      	ldr	r3, [r7, #4]
 800f330:	681b      	ldr	r3, [r3, #0]
 800f332:	689b      	ldr	r3, [r3, #8]
 800f334:	f003 0320 	and.w	r3, r3, #32
 800f338:	2b00      	cmp	r3, #0
 800f33a:	d034      	beq.n	800f3a6 <HAL_QSPI_Abort+0xe0>
    {
      /* Configure QSPI: CR register with Abort request */
      SET_BIT(hqspi->Instance->CR, QUADSPI_CR_ABORT);
 800f33c:	687b      	ldr	r3, [r7, #4]
 800f33e:	681b      	ldr	r3, [r3, #0]
 800f340:	681a      	ldr	r2, [r3, #0]
 800f342:	687b      	ldr	r3, [r7, #4]
 800f344:	681b      	ldr	r3, [r3, #0]
 800f346:	f042 0202 	orr.w	r2, r2, #2
 800f34a:	601a      	str	r2, [r3, #0]
      
      /* Wait until TC flag is set to go back in idle state */
      status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, hqspi->Timeout);
 800f34c:	687b      	ldr	r3, [r7, #4]
 800f34e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800f350:	9300      	str	r3, [sp, #0]
 800f352:	68bb      	ldr	r3, [r7, #8]
 800f354:	2201      	movs	r2, #1
 800f356:	2102      	movs	r1, #2
 800f358:	6878      	ldr	r0, [r7, #4]
 800f35a:	f000 f83b 	bl	800f3d4 <QSPI_WaitFlagStateUntilTimeout>
 800f35e:	4603      	mov	r3, r0
 800f360:	73fb      	strb	r3, [r7, #15]
      
      if (status == HAL_OK)
 800f362:	7bfb      	ldrb	r3, [r7, #15]
 800f364:	2b00      	cmp	r3, #0
 800f366:	d10e      	bne.n	800f386 <HAL_QSPI_Abort+0xc0>
      {
        __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 800f368:	687b      	ldr	r3, [r7, #4]
 800f36a:	681b      	ldr	r3, [r3, #0]
 800f36c:	2202      	movs	r2, #2
 800f36e:	60da      	str	r2, [r3, #12]
        
        /* Wait until BUSY flag is reset */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 800f370:	687b      	ldr	r3, [r7, #4]
 800f372:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800f374:	9300      	str	r3, [sp, #0]
 800f376:	68bb      	ldr	r3, [r7, #8]
 800f378:	2200      	movs	r2, #0
 800f37a:	2120      	movs	r1, #32
 800f37c:	6878      	ldr	r0, [r7, #4]
 800f37e:	f000 f829 	bl	800f3d4 <QSPI_WaitFlagStateUntilTimeout>
 800f382:	4603      	mov	r3, r0
 800f384:	73fb      	strb	r3, [r7, #15]
      }

      if (status == HAL_OK)
 800f386:	7bfb      	ldrb	r3, [r7, #15]
 800f388:	2b00      	cmp	r3, #0
 800f38a:	d110      	bne.n	800f3ae <HAL_QSPI_Abort+0xe8>
      {
        /* Reset functional mode configuration to indirect write mode by default */
        CLEAR_BIT(hqspi->Instance->CCR, QUADSPI_CCR_FMODE);
 800f38c:	687b      	ldr	r3, [r7, #4]
 800f38e:	681b      	ldr	r3, [r3, #0]
 800f390:	695a      	ldr	r2, [r3, #20]
 800f392:	687b      	ldr	r3, [r7, #4]
 800f394:	681b      	ldr	r3, [r3, #0]
 800f396:	f022 6240 	bic.w	r2, r2, #201326592	@ 0xc000000
 800f39a:	615a      	str	r2, [r3, #20]
        
        /* Update state */
        hqspi->State = HAL_QSPI_STATE_READY;
 800f39c:	687b      	ldr	r3, [r7, #4]
 800f39e:	2201      	movs	r2, #1
 800f3a0:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
 800f3a4:	e003      	b.n	800f3ae <HAL_QSPI_Abort+0xe8>
      }
    }
    else
    {
      /* Update state */
      hqspi->State = HAL_QSPI_STATE_READY;
 800f3a6:	687b      	ldr	r3, [r7, #4]
 800f3a8:	2201      	movs	r2, #1
 800f3aa:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
    }
  }

  return status;
 800f3ae:	7bfb      	ldrb	r3, [r7, #15]
}
 800f3b0:	4618      	mov	r0, r3
 800f3b2:	3710      	adds	r7, #16
 800f3b4:	46bd      	mov	sp, r7
 800f3b6:	bd80      	pop	{r7, pc}

0800f3b8 <HAL_QSPI_SetTimeout>:
  * @param  hqspi QSPI handle.
  * @param  Timeout Timeout for the QSPI memory access.
  * @retval None
  */
void HAL_QSPI_SetTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
{
 800f3b8:	b480      	push	{r7}
 800f3ba:	b083      	sub	sp, #12
 800f3bc:	af00      	add	r7, sp, #0
 800f3be:	6078      	str	r0, [r7, #4]
 800f3c0:	6039      	str	r1, [r7, #0]
  hqspi->Timeout = Timeout;
 800f3c2:	687b      	ldr	r3, [r7, #4]
 800f3c4:	683a      	ldr	r2, [r7, #0]
 800f3c6:	641a      	str	r2, [r3, #64]	@ 0x40
}
 800f3c8:	bf00      	nop
 800f3ca:	370c      	adds	r7, #12
 800f3cc:	46bd      	mov	sp, r7
 800f3ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f3d2:	4770      	bx	lr

0800f3d4 <QSPI_WaitFlagStateUntilTimeout>:
  * @param  Timeout Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef QSPI_WaitFlagStateUntilTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 800f3d4:	b580      	push	{r7, lr}
 800f3d6:	b084      	sub	sp, #16
 800f3d8:	af00      	add	r7, sp, #0
 800f3da:	60f8      	str	r0, [r7, #12]
 800f3dc:	60b9      	str	r1, [r7, #8]
 800f3de:	603b      	str	r3, [r7, #0]
 800f3e0:	4613      	mov	r3, r2
 800f3e2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 800f3e4:	e01a      	b.n	800f41c <QSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800f3e6:	69bb      	ldr	r3, [r7, #24]
 800f3e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f3ec:	d016      	beq.n	800f41c <QSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800f3ee:	f7fb fd03 	bl	800adf8 <HAL_GetTick>
 800f3f2:	4602      	mov	r2, r0
 800f3f4:	683b      	ldr	r3, [r7, #0]
 800f3f6:	1ad3      	subs	r3, r2, r3
 800f3f8:	69ba      	ldr	r2, [r7, #24]
 800f3fa:	429a      	cmp	r2, r3
 800f3fc:	d302      	bcc.n	800f404 <QSPI_WaitFlagStateUntilTimeout+0x30>
 800f3fe:	69bb      	ldr	r3, [r7, #24]
 800f400:	2b00      	cmp	r3, #0
 800f402:	d10b      	bne.n	800f41c <QSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 800f404:	68fb      	ldr	r3, [r7, #12]
 800f406:	2204      	movs	r2, #4
 800f408:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 800f40c:	68fb      	ldr	r3, [r7, #12]
 800f40e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800f410:	f043 0201 	orr.w	r2, r3, #1
 800f414:	68fb      	ldr	r3, [r7, #12]
 800f416:	63da      	str	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 800f418:	2301      	movs	r3, #1
 800f41a:	e00e      	b.n	800f43a <QSPI_WaitFlagStateUntilTimeout+0x66>
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 800f41c:	68fb      	ldr	r3, [r7, #12]
 800f41e:	681b      	ldr	r3, [r3, #0]
 800f420:	689a      	ldr	r2, [r3, #8]
 800f422:	68bb      	ldr	r3, [r7, #8]
 800f424:	4013      	ands	r3, r2
 800f426:	2b00      	cmp	r3, #0
 800f428:	bf14      	ite	ne
 800f42a:	2301      	movne	r3, #1
 800f42c:	2300      	moveq	r3, #0
 800f42e:	b2db      	uxtb	r3, r3
 800f430:	461a      	mov	r2, r3
 800f432:	79fb      	ldrb	r3, [r7, #7]
 800f434:	429a      	cmp	r2, r3
 800f436:	d1d6      	bne.n	800f3e6 <QSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800f438:	2300      	movs	r3, #0
}
 800f43a:	4618      	mov	r0, r3
 800f43c:	3710      	adds	r7, #16
 800f43e:	46bd      	mov	sp, r7
 800f440:	bd80      	pop	{r7, pc}

0800f442 <QSPI_Config>:
  *            @arg QSPI_FUNCTIONAL_MODE_AUTO_POLLING: Automatic polling mode
  *            @arg QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED: Memory-mapped mode
  * @retval None
  */
static void QSPI_Config(QSPI_HandleTypeDef *hqspi, QSPI_CommandTypeDef *cmd, uint32_t FunctionalMode)
{
 800f442:	b480      	push	{r7}
 800f444:	b085      	sub	sp, #20
 800f446:	af00      	add	r7, sp, #0
 800f448:	60f8      	str	r0, [r7, #12]
 800f44a:	60b9      	str	r1, [r7, #8]
 800f44c:	607a      	str	r2, [r7, #4]
  assert_param(IS_QSPI_FUNCTIONAL_MODE(FunctionalMode));

  if ((cmd->DataMode != QSPI_DATA_NONE) && (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED))
 800f44e:	68bb      	ldr	r3, [r7, #8]
 800f450:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f452:	2b00      	cmp	r3, #0
 800f454:	d009      	beq.n	800f46a <QSPI_Config+0x28>
 800f456:	687b      	ldr	r3, [r7, #4]
 800f458:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 800f45c:	d005      	beq.n	800f46a <QSPI_Config+0x28>
  {
    /* Configure QSPI: DLR register with the number of data to read or write */
    WRITE_REG(hqspi->Instance->DLR, (cmd->NbData - 1U));
 800f45e:	68bb      	ldr	r3, [r7, #8]
 800f460:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800f462:	68fb      	ldr	r3, [r7, #12]
 800f464:	681b      	ldr	r3, [r3, #0]
 800f466:	3a01      	subs	r2, #1
 800f468:	611a      	str	r2, [r3, #16]
  }

  if (cmd->InstructionMode != QSPI_INSTRUCTION_NONE)
 800f46a:	68bb      	ldr	r3, [r7, #8]
 800f46c:	699b      	ldr	r3, [r3, #24]
 800f46e:	2b00      	cmp	r3, #0
 800f470:	f000 80c1 	beq.w	800f5f6 <QSPI_Config+0x1b4>
  {
    if (cmd->AlternateByteMode != QSPI_ALTERNATE_BYTES_NONE)
 800f474:	68bb      	ldr	r3, [r7, #8]
 800f476:	6a1b      	ldr	r3, [r3, #32]
 800f478:	2b00      	cmp	r3, #0
 800f47a:	d063      	beq.n	800f544 <QSPI_Config+0x102>
    {
      /* Configure QSPI: ABR register with alternate bytes value */
      WRITE_REG(hqspi->Instance->ABR, cmd->AlternateBytes);
 800f47c:	68fb      	ldr	r3, [r7, #12]
 800f47e:	681b      	ldr	r3, [r3, #0]
 800f480:	68ba      	ldr	r2, [r7, #8]
 800f482:	6892      	ldr	r2, [r2, #8]
 800f484:	61da      	str	r2, [r3, #28]

      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 800f486:	68bb      	ldr	r3, [r7, #8]
 800f488:	69db      	ldr	r3, [r3, #28]
 800f48a:	2b00      	cmp	r3, #0
 800f48c:	d031      	beq.n	800f4f2 <QSPI_Config+0xb0>
      {
        /*---- Command with instruction, address and alternate bytes ----*/
        /* Configure QSPI: CCR register with all communications parameters */
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800f48e:	68bb      	ldr	r3, [r7, #8]
 800f490:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800f492:	68bb      	ldr	r3, [r7, #8]
 800f494:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800f496:	431a      	orrs	r2, r3
 800f498:	68bb      	ldr	r3, [r7, #8]
 800f49a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800f49c:	431a      	orrs	r2, r3
 800f49e:	68bb      	ldr	r3, [r7, #8]
 800f4a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f4a2:	431a      	orrs	r2, r3
 800f4a4:	68bb      	ldr	r3, [r7, #8]
 800f4a6:	695b      	ldr	r3, [r3, #20]
 800f4a8:	049b      	lsls	r3, r3, #18
 800f4aa:	431a      	orrs	r2, r3
 800f4ac:	68bb      	ldr	r3, [r7, #8]
 800f4ae:	691b      	ldr	r3, [r3, #16]
 800f4b0:	431a      	orrs	r2, r3
 800f4b2:	68bb      	ldr	r3, [r7, #8]
 800f4b4:	6a1b      	ldr	r3, [r3, #32]
 800f4b6:	431a      	orrs	r2, r3
 800f4b8:	68bb      	ldr	r3, [r7, #8]
 800f4ba:	68db      	ldr	r3, [r3, #12]
 800f4bc:	431a      	orrs	r2, r3
 800f4be:	68bb      	ldr	r3, [r7, #8]
 800f4c0:	69db      	ldr	r3, [r3, #28]
 800f4c2:	431a      	orrs	r2, r3
 800f4c4:	68bb      	ldr	r3, [r7, #8]
 800f4c6:	699b      	ldr	r3, [r3, #24]
 800f4c8:	431a      	orrs	r2, r3
 800f4ca:	68bb      	ldr	r3, [r7, #8]
 800f4cc:	681b      	ldr	r3, [r3, #0]
 800f4ce:	ea42 0103 	orr.w	r1, r2, r3
 800f4d2:	68fb      	ldr	r3, [r7, #12]
 800f4d4:	681b      	ldr	r3, [r3, #0]
 800f4d6:	687a      	ldr	r2, [r7, #4]
 800f4d8:	430a      	orrs	r2, r1
 800f4da:	615a      	str	r2, [r3, #20]
                                         cmd->DataMode | (cmd->DummyCycles << QUADSPI_CCR_DCYC_Pos) |
                                         cmd->AlternateBytesSize | cmd->AlternateByteMode |
                                         cmd->AddressSize | cmd->AddressMode | cmd->InstructionMode |
                                         cmd->Instruction | FunctionalMode));

        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 800f4dc:	687b      	ldr	r3, [r7, #4]
 800f4de:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 800f4e2:	f000 813f 	beq.w	800f764 <QSPI_Config+0x322>
        {
          /* Configure QSPI: AR register with address value */
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 800f4e6:	68fb      	ldr	r3, [r7, #12]
 800f4e8:	681b      	ldr	r3, [r3, #0]
 800f4ea:	68ba      	ldr	r2, [r7, #8]
 800f4ec:	6852      	ldr	r2, [r2, #4]
 800f4ee:	619a      	str	r2, [r3, #24]
          CLEAR_REG(hqspi->Instance->AR);
        }
      }
    }
  }
}
 800f4f0:	e138      	b.n	800f764 <QSPI_Config+0x322>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800f4f2:	68bb      	ldr	r3, [r7, #8]
 800f4f4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800f4f6:	68bb      	ldr	r3, [r7, #8]
 800f4f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800f4fa:	431a      	orrs	r2, r3
 800f4fc:	68bb      	ldr	r3, [r7, #8]
 800f4fe:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800f500:	431a      	orrs	r2, r3
 800f502:	68bb      	ldr	r3, [r7, #8]
 800f504:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f506:	431a      	orrs	r2, r3
 800f508:	68bb      	ldr	r3, [r7, #8]
 800f50a:	695b      	ldr	r3, [r3, #20]
 800f50c:	049b      	lsls	r3, r3, #18
 800f50e:	431a      	orrs	r2, r3
 800f510:	68bb      	ldr	r3, [r7, #8]
 800f512:	691b      	ldr	r3, [r3, #16]
 800f514:	431a      	orrs	r2, r3
 800f516:	68bb      	ldr	r3, [r7, #8]
 800f518:	6a1b      	ldr	r3, [r3, #32]
 800f51a:	431a      	orrs	r2, r3
 800f51c:	68bb      	ldr	r3, [r7, #8]
 800f51e:	69db      	ldr	r3, [r3, #28]
 800f520:	431a      	orrs	r2, r3
 800f522:	68bb      	ldr	r3, [r7, #8]
 800f524:	699b      	ldr	r3, [r3, #24]
 800f526:	431a      	orrs	r2, r3
 800f528:	68bb      	ldr	r3, [r7, #8]
 800f52a:	681b      	ldr	r3, [r3, #0]
 800f52c:	ea42 0103 	orr.w	r1, r2, r3
 800f530:	68fb      	ldr	r3, [r7, #12]
 800f532:	681b      	ldr	r3, [r3, #0]
 800f534:	687a      	ldr	r2, [r7, #4]
 800f536:	430a      	orrs	r2, r1
 800f538:	615a      	str	r2, [r3, #20]
        CLEAR_REG(hqspi->Instance->AR);
 800f53a:	68fb      	ldr	r3, [r7, #12]
 800f53c:	681b      	ldr	r3, [r3, #0]
 800f53e:	2200      	movs	r2, #0
 800f540:	619a      	str	r2, [r3, #24]
}
 800f542:	e10f      	b.n	800f764 <QSPI_Config+0x322>
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 800f544:	68bb      	ldr	r3, [r7, #8]
 800f546:	69db      	ldr	r3, [r3, #28]
 800f548:	2b00      	cmp	r3, #0
 800f54a:	d02e      	beq.n	800f5aa <QSPI_Config+0x168>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800f54c:	68bb      	ldr	r3, [r7, #8]
 800f54e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800f550:	68bb      	ldr	r3, [r7, #8]
 800f552:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800f554:	431a      	orrs	r2, r3
 800f556:	68bb      	ldr	r3, [r7, #8]
 800f558:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800f55a:	431a      	orrs	r2, r3
 800f55c:	68bb      	ldr	r3, [r7, #8]
 800f55e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f560:	431a      	orrs	r2, r3
 800f562:	68bb      	ldr	r3, [r7, #8]
 800f564:	695b      	ldr	r3, [r3, #20]
 800f566:	049b      	lsls	r3, r3, #18
 800f568:	431a      	orrs	r2, r3
 800f56a:	68bb      	ldr	r3, [r7, #8]
 800f56c:	6a1b      	ldr	r3, [r3, #32]
 800f56e:	431a      	orrs	r2, r3
 800f570:	68bb      	ldr	r3, [r7, #8]
 800f572:	68db      	ldr	r3, [r3, #12]
 800f574:	431a      	orrs	r2, r3
 800f576:	68bb      	ldr	r3, [r7, #8]
 800f578:	69db      	ldr	r3, [r3, #28]
 800f57a:	431a      	orrs	r2, r3
 800f57c:	68bb      	ldr	r3, [r7, #8]
 800f57e:	699b      	ldr	r3, [r3, #24]
 800f580:	431a      	orrs	r2, r3
 800f582:	68bb      	ldr	r3, [r7, #8]
 800f584:	681b      	ldr	r3, [r3, #0]
 800f586:	ea42 0103 	orr.w	r1, r2, r3
 800f58a:	68fb      	ldr	r3, [r7, #12]
 800f58c:	681b      	ldr	r3, [r3, #0]
 800f58e:	687a      	ldr	r2, [r7, #4]
 800f590:	430a      	orrs	r2, r1
 800f592:	615a      	str	r2, [r3, #20]
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 800f594:	687b      	ldr	r3, [r7, #4]
 800f596:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 800f59a:	f000 80e3 	beq.w	800f764 <QSPI_Config+0x322>
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 800f59e:	68fb      	ldr	r3, [r7, #12]
 800f5a0:	681b      	ldr	r3, [r3, #0]
 800f5a2:	68ba      	ldr	r2, [r7, #8]
 800f5a4:	6852      	ldr	r2, [r2, #4]
 800f5a6:	619a      	str	r2, [r3, #24]
}
 800f5a8:	e0dc      	b.n	800f764 <QSPI_Config+0x322>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800f5aa:	68bb      	ldr	r3, [r7, #8]
 800f5ac:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800f5ae:	68bb      	ldr	r3, [r7, #8]
 800f5b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800f5b2:	431a      	orrs	r2, r3
 800f5b4:	68bb      	ldr	r3, [r7, #8]
 800f5b6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800f5b8:	431a      	orrs	r2, r3
 800f5ba:	68bb      	ldr	r3, [r7, #8]
 800f5bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f5be:	431a      	orrs	r2, r3
 800f5c0:	68bb      	ldr	r3, [r7, #8]
 800f5c2:	695b      	ldr	r3, [r3, #20]
 800f5c4:	049b      	lsls	r3, r3, #18
 800f5c6:	431a      	orrs	r2, r3
 800f5c8:	68bb      	ldr	r3, [r7, #8]
 800f5ca:	6a1b      	ldr	r3, [r3, #32]
 800f5cc:	431a      	orrs	r2, r3
 800f5ce:	68bb      	ldr	r3, [r7, #8]
 800f5d0:	69db      	ldr	r3, [r3, #28]
 800f5d2:	431a      	orrs	r2, r3
 800f5d4:	68bb      	ldr	r3, [r7, #8]
 800f5d6:	699b      	ldr	r3, [r3, #24]
 800f5d8:	431a      	orrs	r2, r3
 800f5da:	68bb      	ldr	r3, [r7, #8]
 800f5dc:	681b      	ldr	r3, [r3, #0]
 800f5de:	ea42 0103 	orr.w	r1, r2, r3
 800f5e2:	68fb      	ldr	r3, [r7, #12]
 800f5e4:	681b      	ldr	r3, [r3, #0]
 800f5e6:	687a      	ldr	r2, [r7, #4]
 800f5e8:	430a      	orrs	r2, r1
 800f5ea:	615a      	str	r2, [r3, #20]
        CLEAR_REG(hqspi->Instance->AR);
 800f5ec:	68fb      	ldr	r3, [r7, #12]
 800f5ee:	681b      	ldr	r3, [r3, #0]
 800f5f0:	2200      	movs	r2, #0
 800f5f2:	619a      	str	r2, [r3, #24]
}
 800f5f4:	e0b6      	b.n	800f764 <QSPI_Config+0x322>
    if (cmd->AlternateByteMode != QSPI_ALTERNATE_BYTES_NONE)
 800f5f6:	68bb      	ldr	r3, [r7, #8]
 800f5f8:	6a1b      	ldr	r3, [r3, #32]
 800f5fa:	2b00      	cmp	r3, #0
 800f5fc:	d05d      	beq.n	800f6ba <QSPI_Config+0x278>
      WRITE_REG(hqspi->Instance->ABR, cmd->AlternateBytes);
 800f5fe:	68fb      	ldr	r3, [r7, #12]
 800f600:	681b      	ldr	r3, [r3, #0]
 800f602:	68ba      	ldr	r2, [r7, #8]
 800f604:	6892      	ldr	r2, [r2, #8]
 800f606:	61da      	str	r2, [r3, #28]
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 800f608:	68bb      	ldr	r3, [r7, #8]
 800f60a:	69db      	ldr	r3, [r3, #28]
 800f60c:	2b00      	cmp	r3, #0
 800f60e:	d02e      	beq.n	800f66e <QSPI_Config+0x22c>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800f610:	68bb      	ldr	r3, [r7, #8]
 800f612:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800f614:	68bb      	ldr	r3, [r7, #8]
 800f616:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800f618:	431a      	orrs	r2, r3
 800f61a:	68bb      	ldr	r3, [r7, #8]
 800f61c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800f61e:	431a      	orrs	r2, r3
 800f620:	68bb      	ldr	r3, [r7, #8]
 800f622:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f624:	431a      	orrs	r2, r3
 800f626:	68bb      	ldr	r3, [r7, #8]
 800f628:	695b      	ldr	r3, [r3, #20]
 800f62a:	049b      	lsls	r3, r3, #18
 800f62c:	431a      	orrs	r2, r3
 800f62e:	68bb      	ldr	r3, [r7, #8]
 800f630:	691b      	ldr	r3, [r3, #16]
 800f632:	431a      	orrs	r2, r3
 800f634:	68bb      	ldr	r3, [r7, #8]
 800f636:	6a1b      	ldr	r3, [r3, #32]
 800f638:	431a      	orrs	r2, r3
 800f63a:	68bb      	ldr	r3, [r7, #8]
 800f63c:	68db      	ldr	r3, [r3, #12]
 800f63e:	431a      	orrs	r2, r3
 800f640:	68bb      	ldr	r3, [r7, #8]
 800f642:	69db      	ldr	r3, [r3, #28]
 800f644:	431a      	orrs	r2, r3
 800f646:	68bb      	ldr	r3, [r7, #8]
 800f648:	699b      	ldr	r3, [r3, #24]
 800f64a:	ea42 0103 	orr.w	r1, r2, r3
 800f64e:	68fb      	ldr	r3, [r7, #12]
 800f650:	681b      	ldr	r3, [r3, #0]
 800f652:	687a      	ldr	r2, [r7, #4]
 800f654:	430a      	orrs	r2, r1
 800f656:	615a      	str	r2, [r3, #20]
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 800f658:	687b      	ldr	r3, [r7, #4]
 800f65a:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 800f65e:	f000 8081 	beq.w	800f764 <QSPI_Config+0x322>
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 800f662:	68fb      	ldr	r3, [r7, #12]
 800f664:	681b      	ldr	r3, [r3, #0]
 800f666:	68ba      	ldr	r2, [r7, #8]
 800f668:	6852      	ldr	r2, [r2, #4]
 800f66a:	619a      	str	r2, [r3, #24]
}
 800f66c:	e07a      	b.n	800f764 <QSPI_Config+0x322>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800f66e:	68bb      	ldr	r3, [r7, #8]
 800f670:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800f672:	68bb      	ldr	r3, [r7, #8]
 800f674:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800f676:	431a      	orrs	r2, r3
 800f678:	68bb      	ldr	r3, [r7, #8]
 800f67a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800f67c:	431a      	orrs	r2, r3
 800f67e:	68bb      	ldr	r3, [r7, #8]
 800f680:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f682:	431a      	orrs	r2, r3
 800f684:	68bb      	ldr	r3, [r7, #8]
 800f686:	695b      	ldr	r3, [r3, #20]
 800f688:	049b      	lsls	r3, r3, #18
 800f68a:	431a      	orrs	r2, r3
 800f68c:	68bb      	ldr	r3, [r7, #8]
 800f68e:	691b      	ldr	r3, [r3, #16]
 800f690:	431a      	orrs	r2, r3
 800f692:	68bb      	ldr	r3, [r7, #8]
 800f694:	6a1b      	ldr	r3, [r3, #32]
 800f696:	431a      	orrs	r2, r3
 800f698:	68bb      	ldr	r3, [r7, #8]
 800f69a:	69db      	ldr	r3, [r3, #28]
 800f69c:	431a      	orrs	r2, r3
 800f69e:	68bb      	ldr	r3, [r7, #8]
 800f6a0:	699b      	ldr	r3, [r3, #24]
 800f6a2:	ea42 0103 	orr.w	r1, r2, r3
 800f6a6:	68fb      	ldr	r3, [r7, #12]
 800f6a8:	681b      	ldr	r3, [r3, #0]
 800f6aa:	687a      	ldr	r2, [r7, #4]
 800f6ac:	430a      	orrs	r2, r1
 800f6ae:	615a      	str	r2, [r3, #20]
        CLEAR_REG(hqspi->Instance->AR);
 800f6b0:	68fb      	ldr	r3, [r7, #12]
 800f6b2:	681b      	ldr	r3, [r3, #0]
 800f6b4:	2200      	movs	r2, #0
 800f6b6:	619a      	str	r2, [r3, #24]
}
 800f6b8:	e054      	b.n	800f764 <QSPI_Config+0x322>
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 800f6ba:	68bb      	ldr	r3, [r7, #8]
 800f6bc:	69db      	ldr	r3, [r3, #28]
 800f6be:	2b00      	cmp	r3, #0
 800f6c0:	d02a      	beq.n	800f718 <QSPI_Config+0x2d6>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800f6c2:	68bb      	ldr	r3, [r7, #8]
 800f6c4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800f6c6:	68bb      	ldr	r3, [r7, #8]
 800f6c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800f6ca:	431a      	orrs	r2, r3
 800f6cc:	68bb      	ldr	r3, [r7, #8]
 800f6ce:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800f6d0:	431a      	orrs	r2, r3
 800f6d2:	68bb      	ldr	r3, [r7, #8]
 800f6d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f6d6:	431a      	orrs	r2, r3
 800f6d8:	68bb      	ldr	r3, [r7, #8]
 800f6da:	695b      	ldr	r3, [r3, #20]
 800f6dc:	049b      	lsls	r3, r3, #18
 800f6de:	431a      	orrs	r2, r3
 800f6e0:	68bb      	ldr	r3, [r7, #8]
 800f6e2:	6a1b      	ldr	r3, [r3, #32]
 800f6e4:	431a      	orrs	r2, r3
 800f6e6:	68bb      	ldr	r3, [r7, #8]
 800f6e8:	68db      	ldr	r3, [r3, #12]
 800f6ea:	431a      	orrs	r2, r3
 800f6ec:	68bb      	ldr	r3, [r7, #8]
 800f6ee:	69db      	ldr	r3, [r3, #28]
 800f6f0:	431a      	orrs	r2, r3
 800f6f2:	68bb      	ldr	r3, [r7, #8]
 800f6f4:	699b      	ldr	r3, [r3, #24]
 800f6f6:	ea42 0103 	orr.w	r1, r2, r3
 800f6fa:	68fb      	ldr	r3, [r7, #12]
 800f6fc:	681b      	ldr	r3, [r3, #0]
 800f6fe:	687a      	ldr	r2, [r7, #4]
 800f700:	430a      	orrs	r2, r1
 800f702:	615a      	str	r2, [r3, #20]
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 800f704:	687b      	ldr	r3, [r7, #4]
 800f706:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 800f70a:	d02b      	beq.n	800f764 <QSPI_Config+0x322>
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 800f70c:	68fb      	ldr	r3, [r7, #12]
 800f70e:	681b      	ldr	r3, [r3, #0]
 800f710:	68ba      	ldr	r2, [r7, #8]
 800f712:	6852      	ldr	r2, [r2, #4]
 800f714:	619a      	str	r2, [r3, #24]
}
 800f716:	e025      	b.n	800f764 <QSPI_Config+0x322>
        if (cmd->DataMode != QSPI_DATA_NONE)
 800f718:	68bb      	ldr	r3, [r7, #8]
 800f71a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f71c:	2b00      	cmp	r3, #0
 800f71e:	d021      	beq.n	800f764 <QSPI_Config+0x322>
          WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800f720:	68bb      	ldr	r3, [r7, #8]
 800f722:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800f724:	68bb      	ldr	r3, [r7, #8]
 800f726:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800f728:	431a      	orrs	r2, r3
 800f72a:	68bb      	ldr	r3, [r7, #8]
 800f72c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800f72e:	431a      	orrs	r2, r3
 800f730:	68bb      	ldr	r3, [r7, #8]
 800f732:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f734:	431a      	orrs	r2, r3
 800f736:	68bb      	ldr	r3, [r7, #8]
 800f738:	695b      	ldr	r3, [r3, #20]
 800f73a:	049b      	lsls	r3, r3, #18
 800f73c:	431a      	orrs	r2, r3
 800f73e:	68bb      	ldr	r3, [r7, #8]
 800f740:	6a1b      	ldr	r3, [r3, #32]
 800f742:	431a      	orrs	r2, r3
 800f744:	68bb      	ldr	r3, [r7, #8]
 800f746:	69db      	ldr	r3, [r3, #28]
 800f748:	431a      	orrs	r2, r3
 800f74a:	68bb      	ldr	r3, [r7, #8]
 800f74c:	699b      	ldr	r3, [r3, #24]
 800f74e:	ea42 0103 	orr.w	r1, r2, r3
 800f752:	68fb      	ldr	r3, [r7, #12]
 800f754:	681b      	ldr	r3, [r3, #0]
 800f756:	687a      	ldr	r2, [r7, #4]
 800f758:	430a      	orrs	r2, r1
 800f75a:	615a      	str	r2, [r3, #20]
          CLEAR_REG(hqspi->Instance->AR);
 800f75c:	68fb      	ldr	r3, [r7, #12]
 800f75e:	681b      	ldr	r3, [r3, #0]
 800f760:	2200      	movs	r2, #0
 800f762:	619a      	str	r2, [r3, #24]
}
 800f764:	bf00      	nop
 800f766:	3714      	adds	r7, #20
 800f768:	46bd      	mov	sp, r7
 800f76a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f76e:	4770      	bx	lr

0800f770 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800f770:	b580      	push	{r7, lr}
 800f772:	b088      	sub	sp, #32
 800f774:	af00      	add	r7, sp, #0
 800f776:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800f778:	687b      	ldr	r3, [r7, #4]
 800f77a:	2b00      	cmp	r3, #0
 800f77c:	d101      	bne.n	800f782 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800f77e:	2301      	movs	r3, #1
 800f780:	e3ca      	b.n	800ff18 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800f782:	4b97      	ldr	r3, [pc, #604]	@ (800f9e0 <HAL_RCC_OscConfig+0x270>)
 800f784:	689b      	ldr	r3, [r3, #8]
 800f786:	f003 030c 	and.w	r3, r3, #12
 800f78a:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800f78c:	4b94      	ldr	r3, [pc, #592]	@ (800f9e0 <HAL_RCC_OscConfig+0x270>)
 800f78e:	68db      	ldr	r3, [r3, #12]
 800f790:	f003 0303 	and.w	r3, r3, #3
 800f794:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800f796:	687b      	ldr	r3, [r7, #4]
 800f798:	681b      	ldr	r3, [r3, #0]
 800f79a:	f003 0310 	and.w	r3, r3, #16
 800f79e:	2b00      	cmp	r3, #0
 800f7a0:	f000 80e4 	beq.w	800f96c <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800f7a4:	69bb      	ldr	r3, [r7, #24]
 800f7a6:	2b00      	cmp	r3, #0
 800f7a8:	d007      	beq.n	800f7ba <HAL_RCC_OscConfig+0x4a>
 800f7aa:	69bb      	ldr	r3, [r7, #24]
 800f7ac:	2b0c      	cmp	r3, #12
 800f7ae:	f040 808b 	bne.w	800f8c8 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800f7b2:	697b      	ldr	r3, [r7, #20]
 800f7b4:	2b01      	cmp	r3, #1
 800f7b6:	f040 8087 	bne.w	800f8c8 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800f7ba:	4b89      	ldr	r3, [pc, #548]	@ (800f9e0 <HAL_RCC_OscConfig+0x270>)
 800f7bc:	681b      	ldr	r3, [r3, #0]
 800f7be:	f003 0302 	and.w	r3, r3, #2
 800f7c2:	2b00      	cmp	r3, #0
 800f7c4:	d005      	beq.n	800f7d2 <HAL_RCC_OscConfig+0x62>
 800f7c6:	687b      	ldr	r3, [r7, #4]
 800f7c8:	699b      	ldr	r3, [r3, #24]
 800f7ca:	2b00      	cmp	r3, #0
 800f7cc:	d101      	bne.n	800f7d2 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 800f7ce:	2301      	movs	r3, #1
 800f7d0:	e3a2      	b.n	800ff18 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800f7d2:	687b      	ldr	r3, [r7, #4]
 800f7d4:	6a1a      	ldr	r2, [r3, #32]
 800f7d6:	4b82      	ldr	r3, [pc, #520]	@ (800f9e0 <HAL_RCC_OscConfig+0x270>)
 800f7d8:	681b      	ldr	r3, [r3, #0]
 800f7da:	f003 0308 	and.w	r3, r3, #8
 800f7de:	2b00      	cmp	r3, #0
 800f7e0:	d004      	beq.n	800f7ec <HAL_RCC_OscConfig+0x7c>
 800f7e2:	4b7f      	ldr	r3, [pc, #508]	@ (800f9e0 <HAL_RCC_OscConfig+0x270>)
 800f7e4:	681b      	ldr	r3, [r3, #0]
 800f7e6:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800f7ea:	e005      	b.n	800f7f8 <HAL_RCC_OscConfig+0x88>
 800f7ec:	4b7c      	ldr	r3, [pc, #496]	@ (800f9e0 <HAL_RCC_OscConfig+0x270>)
 800f7ee:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800f7f2:	091b      	lsrs	r3, r3, #4
 800f7f4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800f7f8:	4293      	cmp	r3, r2
 800f7fa:	d223      	bcs.n	800f844 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800f7fc:	687b      	ldr	r3, [r7, #4]
 800f7fe:	6a1b      	ldr	r3, [r3, #32]
 800f800:	4618      	mov	r0, r3
 800f802:	f000 fd55 	bl	80102b0 <RCC_SetFlashLatencyFromMSIRange>
 800f806:	4603      	mov	r3, r0
 800f808:	2b00      	cmp	r3, #0
 800f80a:	d001      	beq.n	800f810 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 800f80c:	2301      	movs	r3, #1
 800f80e:	e383      	b.n	800ff18 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800f810:	4b73      	ldr	r3, [pc, #460]	@ (800f9e0 <HAL_RCC_OscConfig+0x270>)
 800f812:	681b      	ldr	r3, [r3, #0]
 800f814:	4a72      	ldr	r2, [pc, #456]	@ (800f9e0 <HAL_RCC_OscConfig+0x270>)
 800f816:	f043 0308 	orr.w	r3, r3, #8
 800f81a:	6013      	str	r3, [r2, #0]
 800f81c:	4b70      	ldr	r3, [pc, #448]	@ (800f9e0 <HAL_RCC_OscConfig+0x270>)
 800f81e:	681b      	ldr	r3, [r3, #0]
 800f820:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800f824:	687b      	ldr	r3, [r7, #4]
 800f826:	6a1b      	ldr	r3, [r3, #32]
 800f828:	496d      	ldr	r1, [pc, #436]	@ (800f9e0 <HAL_RCC_OscConfig+0x270>)
 800f82a:	4313      	orrs	r3, r2
 800f82c:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800f82e:	4b6c      	ldr	r3, [pc, #432]	@ (800f9e0 <HAL_RCC_OscConfig+0x270>)
 800f830:	685b      	ldr	r3, [r3, #4]
 800f832:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 800f836:	687b      	ldr	r3, [r7, #4]
 800f838:	69db      	ldr	r3, [r3, #28]
 800f83a:	021b      	lsls	r3, r3, #8
 800f83c:	4968      	ldr	r1, [pc, #416]	@ (800f9e0 <HAL_RCC_OscConfig+0x270>)
 800f83e:	4313      	orrs	r3, r2
 800f840:	604b      	str	r3, [r1, #4]
 800f842:	e025      	b.n	800f890 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800f844:	4b66      	ldr	r3, [pc, #408]	@ (800f9e0 <HAL_RCC_OscConfig+0x270>)
 800f846:	681b      	ldr	r3, [r3, #0]
 800f848:	4a65      	ldr	r2, [pc, #404]	@ (800f9e0 <HAL_RCC_OscConfig+0x270>)
 800f84a:	f043 0308 	orr.w	r3, r3, #8
 800f84e:	6013      	str	r3, [r2, #0]
 800f850:	4b63      	ldr	r3, [pc, #396]	@ (800f9e0 <HAL_RCC_OscConfig+0x270>)
 800f852:	681b      	ldr	r3, [r3, #0]
 800f854:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800f858:	687b      	ldr	r3, [r7, #4]
 800f85a:	6a1b      	ldr	r3, [r3, #32]
 800f85c:	4960      	ldr	r1, [pc, #384]	@ (800f9e0 <HAL_RCC_OscConfig+0x270>)
 800f85e:	4313      	orrs	r3, r2
 800f860:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800f862:	4b5f      	ldr	r3, [pc, #380]	@ (800f9e0 <HAL_RCC_OscConfig+0x270>)
 800f864:	685b      	ldr	r3, [r3, #4]
 800f866:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 800f86a:	687b      	ldr	r3, [r7, #4]
 800f86c:	69db      	ldr	r3, [r3, #28]
 800f86e:	021b      	lsls	r3, r3, #8
 800f870:	495b      	ldr	r1, [pc, #364]	@ (800f9e0 <HAL_RCC_OscConfig+0x270>)
 800f872:	4313      	orrs	r3, r2
 800f874:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 800f876:	69bb      	ldr	r3, [r7, #24]
 800f878:	2b00      	cmp	r3, #0
 800f87a:	d109      	bne.n	800f890 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800f87c:	687b      	ldr	r3, [r7, #4]
 800f87e:	6a1b      	ldr	r3, [r3, #32]
 800f880:	4618      	mov	r0, r3
 800f882:	f000 fd15 	bl	80102b0 <RCC_SetFlashLatencyFromMSIRange>
 800f886:	4603      	mov	r3, r0
 800f888:	2b00      	cmp	r3, #0
 800f88a:	d001      	beq.n	800f890 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 800f88c:	2301      	movs	r3, #1
 800f88e:	e343      	b.n	800ff18 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800f890:	f000 fc4a 	bl	8010128 <HAL_RCC_GetSysClockFreq>
 800f894:	4602      	mov	r2, r0
 800f896:	4b52      	ldr	r3, [pc, #328]	@ (800f9e0 <HAL_RCC_OscConfig+0x270>)
 800f898:	689b      	ldr	r3, [r3, #8]
 800f89a:	091b      	lsrs	r3, r3, #4
 800f89c:	f003 030f 	and.w	r3, r3, #15
 800f8a0:	4950      	ldr	r1, [pc, #320]	@ (800f9e4 <HAL_RCC_OscConfig+0x274>)
 800f8a2:	5ccb      	ldrb	r3, [r1, r3]
 800f8a4:	f003 031f 	and.w	r3, r3, #31
 800f8a8:	fa22 f303 	lsr.w	r3, r2, r3
 800f8ac:	4a4e      	ldr	r2, [pc, #312]	@ (800f9e8 <HAL_RCC_OscConfig+0x278>)
 800f8ae:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800f8b0:	4b4e      	ldr	r3, [pc, #312]	@ (800f9ec <HAL_RCC_OscConfig+0x27c>)
 800f8b2:	681b      	ldr	r3, [r3, #0]
 800f8b4:	4618      	mov	r0, r3
 800f8b6:	f7fb fa4f 	bl	800ad58 <HAL_InitTick>
 800f8ba:	4603      	mov	r3, r0
 800f8bc:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 800f8be:	7bfb      	ldrb	r3, [r7, #15]
 800f8c0:	2b00      	cmp	r3, #0
 800f8c2:	d052      	beq.n	800f96a <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 800f8c4:	7bfb      	ldrb	r3, [r7, #15]
 800f8c6:	e327      	b.n	800ff18 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800f8c8:	687b      	ldr	r3, [r7, #4]
 800f8ca:	699b      	ldr	r3, [r3, #24]
 800f8cc:	2b00      	cmp	r3, #0
 800f8ce:	d032      	beq.n	800f936 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800f8d0:	4b43      	ldr	r3, [pc, #268]	@ (800f9e0 <HAL_RCC_OscConfig+0x270>)
 800f8d2:	681b      	ldr	r3, [r3, #0]
 800f8d4:	4a42      	ldr	r2, [pc, #264]	@ (800f9e0 <HAL_RCC_OscConfig+0x270>)
 800f8d6:	f043 0301 	orr.w	r3, r3, #1
 800f8da:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800f8dc:	f7fb fa8c 	bl	800adf8 <HAL_GetTick>
 800f8e0:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800f8e2:	e008      	b.n	800f8f6 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800f8e4:	f7fb fa88 	bl	800adf8 <HAL_GetTick>
 800f8e8:	4602      	mov	r2, r0
 800f8ea:	693b      	ldr	r3, [r7, #16]
 800f8ec:	1ad3      	subs	r3, r2, r3
 800f8ee:	2b02      	cmp	r3, #2
 800f8f0:	d901      	bls.n	800f8f6 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 800f8f2:	2303      	movs	r3, #3
 800f8f4:	e310      	b.n	800ff18 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800f8f6:	4b3a      	ldr	r3, [pc, #232]	@ (800f9e0 <HAL_RCC_OscConfig+0x270>)
 800f8f8:	681b      	ldr	r3, [r3, #0]
 800f8fa:	f003 0302 	and.w	r3, r3, #2
 800f8fe:	2b00      	cmp	r3, #0
 800f900:	d0f0      	beq.n	800f8e4 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800f902:	4b37      	ldr	r3, [pc, #220]	@ (800f9e0 <HAL_RCC_OscConfig+0x270>)
 800f904:	681b      	ldr	r3, [r3, #0]
 800f906:	4a36      	ldr	r2, [pc, #216]	@ (800f9e0 <HAL_RCC_OscConfig+0x270>)
 800f908:	f043 0308 	orr.w	r3, r3, #8
 800f90c:	6013      	str	r3, [r2, #0]
 800f90e:	4b34      	ldr	r3, [pc, #208]	@ (800f9e0 <HAL_RCC_OscConfig+0x270>)
 800f910:	681b      	ldr	r3, [r3, #0]
 800f912:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800f916:	687b      	ldr	r3, [r7, #4]
 800f918:	6a1b      	ldr	r3, [r3, #32]
 800f91a:	4931      	ldr	r1, [pc, #196]	@ (800f9e0 <HAL_RCC_OscConfig+0x270>)
 800f91c:	4313      	orrs	r3, r2
 800f91e:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800f920:	4b2f      	ldr	r3, [pc, #188]	@ (800f9e0 <HAL_RCC_OscConfig+0x270>)
 800f922:	685b      	ldr	r3, [r3, #4]
 800f924:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 800f928:	687b      	ldr	r3, [r7, #4]
 800f92a:	69db      	ldr	r3, [r3, #28]
 800f92c:	021b      	lsls	r3, r3, #8
 800f92e:	492c      	ldr	r1, [pc, #176]	@ (800f9e0 <HAL_RCC_OscConfig+0x270>)
 800f930:	4313      	orrs	r3, r2
 800f932:	604b      	str	r3, [r1, #4]
 800f934:	e01a      	b.n	800f96c <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800f936:	4b2a      	ldr	r3, [pc, #168]	@ (800f9e0 <HAL_RCC_OscConfig+0x270>)
 800f938:	681b      	ldr	r3, [r3, #0]
 800f93a:	4a29      	ldr	r2, [pc, #164]	@ (800f9e0 <HAL_RCC_OscConfig+0x270>)
 800f93c:	f023 0301 	bic.w	r3, r3, #1
 800f940:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800f942:	f7fb fa59 	bl	800adf8 <HAL_GetTick>
 800f946:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800f948:	e008      	b.n	800f95c <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800f94a:	f7fb fa55 	bl	800adf8 <HAL_GetTick>
 800f94e:	4602      	mov	r2, r0
 800f950:	693b      	ldr	r3, [r7, #16]
 800f952:	1ad3      	subs	r3, r2, r3
 800f954:	2b02      	cmp	r3, #2
 800f956:	d901      	bls.n	800f95c <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 800f958:	2303      	movs	r3, #3
 800f95a:	e2dd      	b.n	800ff18 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800f95c:	4b20      	ldr	r3, [pc, #128]	@ (800f9e0 <HAL_RCC_OscConfig+0x270>)
 800f95e:	681b      	ldr	r3, [r3, #0]
 800f960:	f003 0302 	and.w	r3, r3, #2
 800f964:	2b00      	cmp	r3, #0
 800f966:	d1f0      	bne.n	800f94a <HAL_RCC_OscConfig+0x1da>
 800f968:	e000      	b.n	800f96c <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800f96a:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800f96c:	687b      	ldr	r3, [r7, #4]
 800f96e:	681b      	ldr	r3, [r3, #0]
 800f970:	f003 0301 	and.w	r3, r3, #1
 800f974:	2b00      	cmp	r3, #0
 800f976:	d074      	beq.n	800fa62 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 800f978:	69bb      	ldr	r3, [r7, #24]
 800f97a:	2b08      	cmp	r3, #8
 800f97c:	d005      	beq.n	800f98a <HAL_RCC_OscConfig+0x21a>
 800f97e:	69bb      	ldr	r3, [r7, #24]
 800f980:	2b0c      	cmp	r3, #12
 800f982:	d10e      	bne.n	800f9a2 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 800f984:	697b      	ldr	r3, [r7, #20]
 800f986:	2b03      	cmp	r3, #3
 800f988:	d10b      	bne.n	800f9a2 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800f98a:	4b15      	ldr	r3, [pc, #84]	@ (800f9e0 <HAL_RCC_OscConfig+0x270>)
 800f98c:	681b      	ldr	r3, [r3, #0]
 800f98e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800f992:	2b00      	cmp	r3, #0
 800f994:	d064      	beq.n	800fa60 <HAL_RCC_OscConfig+0x2f0>
 800f996:	687b      	ldr	r3, [r7, #4]
 800f998:	685b      	ldr	r3, [r3, #4]
 800f99a:	2b00      	cmp	r3, #0
 800f99c:	d160      	bne.n	800fa60 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 800f99e:	2301      	movs	r3, #1
 800f9a0:	e2ba      	b.n	800ff18 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800f9a2:	687b      	ldr	r3, [r7, #4]
 800f9a4:	685b      	ldr	r3, [r3, #4]
 800f9a6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800f9aa:	d106      	bne.n	800f9ba <HAL_RCC_OscConfig+0x24a>
 800f9ac:	4b0c      	ldr	r3, [pc, #48]	@ (800f9e0 <HAL_RCC_OscConfig+0x270>)
 800f9ae:	681b      	ldr	r3, [r3, #0]
 800f9b0:	4a0b      	ldr	r2, [pc, #44]	@ (800f9e0 <HAL_RCC_OscConfig+0x270>)
 800f9b2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800f9b6:	6013      	str	r3, [r2, #0]
 800f9b8:	e026      	b.n	800fa08 <HAL_RCC_OscConfig+0x298>
 800f9ba:	687b      	ldr	r3, [r7, #4]
 800f9bc:	685b      	ldr	r3, [r3, #4]
 800f9be:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800f9c2:	d115      	bne.n	800f9f0 <HAL_RCC_OscConfig+0x280>
 800f9c4:	4b06      	ldr	r3, [pc, #24]	@ (800f9e0 <HAL_RCC_OscConfig+0x270>)
 800f9c6:	681b      	ldr	r3, [r3, #0]
 800f9c8:	4a05      	ldr	r2, [pc, #20]	@ (800f9e0 <HAL_RCC_OscConfig+0x270>)
 800f9ca:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800f9ce:	6013      	str	r3, [r2, #0]
 800f9d0:	4b03      	ldr	r3, [pc, #12]	@ (800f9e0 <HAL_RCC_OscConfig+0x270>)
 800f9d2:	681b      	ldr	r3, [r3, #0]
 800f9d4:	4a02      	ldr	r2, [pc, #8]	@ (800f9e0 <HAL_RCC_OscConfig+0x270>)
 800f9d6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800f9da:	6013      	str	r3, [r2, #0]
 800f9dc:	e014      	b.n	800fa08 <HAL_RCC_OscConfig+0x298>
 800f9de:	bf00      	nop
 800f9e0:	40021000 	.word	0x40021000
 800f9e4:	080175f0 	.word	0x080175f0
 800f9e8:	20000268 	.word	0x20000268
 800f9ec:	20000274 	.word	0x20000274
 800f9f0:	4ba0      	ldr	r3, [pc, #640]	@ (800fc74 <HAL_RCC_OscConfig+0x504>)
 800f9f2:	681b      	ldr	r3, [r3, #0]
 800f9f4:	4a9f      	ldr	r2, [pc, #636]	@ (800fc74 <HAL_RCC_OscConfig+0x504>)
 800f9f6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800f9fa:	6013      	str	r3, [r2, #0]
 800f9fc:	4b9d      	ldr	r3, [pc, #628]	@ (800fc74 <HAL_RCC_OscConfig+0x504>)
 800f9fe:	681b      	ldr	r3, [r3, #0]
 800fa00:	4a9c      	ldr	r2, [pc, #624]	@ (800fc74 <HAL_RCC_OscConfig+0x504>)
 800fa02:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800fa06:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800fa08:	687b      	ldr	r3, [r7, #4]
 800fa0a:	685b      	ldr	r3, [r3, #4]
 800fa0c:	2b00      	cmp	r3, #0
 800fa0e:	d013      	beq.n	800fa38 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800fa10:	f7fb f9f2 	bl	800adf8 <HAL_GetTick>
 800fa14:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800fa16:	e008      	b.n	800fa2a <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800fa18:	f7fb f9ee 	bl	800adf8 <HAL_GetTick>
 800fa1c:	4602      	mov	r2, r0
 800fa1e:	693b      	ldr	r3, [r7, #16]
 800fa20:	1ad3      	subs	r3, r2, r3
 800fa22:	2b64      	cmp	r3, #100	@ 0x64
 800fa24:	d901      	bls.n	800fa2a <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800fa26:	2303      	movs	r3, #3
 800fa28:	e276      	b.n	800ff18 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800fa2a:	4b92      	ldr	r3, [pc, #584]	@ (800fc74 <HAL_RCC_OscConfig+0x504>)
 800fa2c:	681b      	ldr	r3, [r3, #0]
 800fa2e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800fa32:	2b00      	cmp	r3, #0
 800fa34:	d0f0      	beq.n	800fa18 <HAL_RCC_OscConfig+0x2a8>
 800fa36:	e014      	b.n	800fa62 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800fa38:	f7fb f9de 	bl	800adf8 <HAL_GetTick>
 800fa3c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800fa3e:	e008      	b.n	800fa52 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800fa40:	f7fb f9da 	bl	800adf8 <HAL_GetTick>
 800fa44:	4602      	mov	r2, r0
 800fa46:	693b      	ldr	r3, [r7, #16]
 800fa48:	1ad3      	subs	r3, r2, r3
 800fa4a:	2b64      	cmp	r3, #100	@ 0x64
 800fa4c:	d901      	bls.n	800fa52 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800fa4e:	2303      	movs	r3, #3
 800fa50:	e262      	b.n	800ff18 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800fa52:	4b88      	ldr	r3, [pc, #544]	@ (800fc74 <HAL_RCC_OscConfig+0x504>)
 800fa54:	681b      	ldr	r3, [r3, #0]
 800fa56:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800fa5a:	2b00      	cmp	r3, #0
 800fa5c:	d1f0      	bne.n	800fa40 <HAL_RCC_OscConfig+0x2d0>
 800fa5e:	e000      	b.n	800fa62 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800fa60:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800fa62:	687b      	ldr	r3, [r7, #4]
 800fa64:	681b      	ldr	r3, [r3, #0]
 800fa66:	f003 0302 	and.w	r3, r3, #2
 800fa6a:	2b00      	cmp	r3, #0
 800fa6c:	d060      	beq.n	800fb30 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800fa6e:	69bb      	ldr	r3, [r7, #24]
 800fa70:	2b04      	cmp	r3, #4
 800fa72:	d005      	beq.n	800fa80 <HAL_RCC_OscConfig+0x310>
 800fa74:	69bb      	ldr	r3, [r7, #24]
 800fa76:	2b0c      	cmp	r3, #12
 800fa78:	d119      	bne.n	800faae <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800fa7a:	697b      	ldr	r3, [r7, #20]
 800fa7c:	2b02      	cmp	r3, #2
 800fa7e:	d116      	bne.n	800faae <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800fa80:	4b7c      	ldr	r3, [pc, #496]	@ (800fc74 <HAL_RCC_OscConfig+0x504>)
 800fa82:	681b      	ldr	r3, [r3, #0]
 800fa84:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800fa88:	2b00      	cmp	r3, #0
 800fa8a:	d005      	beq.n	800fa98 <HAL_RCC_OscConfig+0x328>
 800fa8c:	687b      	ldr	r3, [r7, #4]
 800fa8e:	68db      	ldr	r3, [r3, #12]
 800fa90:	2b00      	cmp	r3, #0
 800fa92:	d101      	bne.n	800fa98 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 800fa94:	2301      	movs	r3, #1
 800fa96:	e23f      	b.n	800ff18 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800fa98:	4b76      	ldr	r3, [pc, #472]	@ (800fc74 <HAL_RCC_OscConfig+0x504>)
 800fa9a:	685b      	ldr	r3, [r3, #4]
 800fa9c:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 800faa0:	687b      	ldr	r3, [r7, #4]
 800faa2:	691b      	ldr	r3, [r3, #16]
 800faa4:	061b      	lsls	r3, r3, #24
 800faa6:	4973      	ldr	r1, [pc, #460]	@ (800fc74 <HAL_RCC_OscConfig+0x504>)
 800faa8:	4313      	orrs	r3, r2
 800faaa:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800faac:	e040      	b.n	800fb30 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800faae:	687b      	ldr	r3, [r7, #4]
 800fab0:	68db      	ldr	r3, [r3, #12]
 800fab2:	2b00      	cmp	r3, #0
 800fab4:	d023      	beq.n	800fafe <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800fab6:	4b6f      	ldr	r3, [pc, #444]	@ (800fc74 <HAL_RCC_OscConfig+0x504>)
 800fab8:	681b      	ldr	r3, [r3, #0]
 800faba:	4a6e      	ldr	r2, [pc, #440]	@ (800fc74 <HAL_RCC_OscConfig+0x504>)
 800fabc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800fac0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800fac2:	f7fb f999 	bl	800adf8 <HAL_GetTick>
 800fac6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800fac8:	e008      	b.n	800fadc <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800faca:	f7fb f995 	bl	800adf8 <HAL_GetTick>
 800face:	4602      	mov	r2, r0
 800fad0:	693b      	ldr	r3, [r7, #16]
 800fad2:	1ad3      	subs	r3, r2, r3
 800fad4:	2b02      	cmp	r3, #2
 800fad6:	d901      	bls.n	800fadc <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 800fad8:	2303      	movs	r3, #3
 800fada:	e21d      	b.n	800ff18 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800fadc:	4b65      	ldr	r3, [pc, #404]	@ (800fc74 <HAL_RCC_OscConfig+0x504>)
 800fade:	681b      	ldr	r3, [r3, #0]
 800fae0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800fae4:	2b00      	cmp	r3, #0
 800fae6:	d0f0      	beq.n	800faca <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800fae8:	4b62      	ldr	r3, [pc, #392]	@ (800fc74 <HAL_RCC_OscConfig+0x504>)
 800faea:	685b      	ldr	r3, [r3, #4]
 800faec:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 800faf0:	687b      	ldr	r3, [r7, #4]
 800faf2:	691b      	ldr	r3, [r3, #16]
 800faf4:	061b      	lsls	r3, r3, #24
 800faf6:	495f      	ldr	r1, [pc, #380]	@ (800fc74 <HAL_RCC_OscConfig+0x504>)
 800faf8:	4313      	orrs	r3, r2
 800fafa:	604b      	str	r3, [r1, #4]
 800fafc:	e018      	b.n	800fb30 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800fafe:	4b5d      	ldr	r3, [pc, #372]	@ (800fc74 <HAL_RCC_OscConfig+0x504>)
 800fb00:	681b      	ldr	r3, [r3, #0]
 800fb02:	4a5c      	ldr	r2, [pc, #368]	@ (800fc74 <HAL_RCC_OscConfig+0x504>)
 800fb04:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800fb08:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800fb0a:	f7fb f975 	bl	800adf8 <HAL_GetTick>
 800fb0e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800fb10:	e008      	b.n	800fb24 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800fb12:	f7fb f971 	bl	800adf8 <HAL_GetTick>
 800fb16:	4602      	mov	r2, r0
 800fb18:	693b      	ldr	r3, [r7, #16]
 800fb1a:	1ad3      	subs	r3, r2, r3
 800fb1c:	2b02      	cmp	r3, #2
 800fb1e:	d901      	bls.n	800fb24 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 800fb20:	2303      	movs	r3, #3
 800fb22:	e1f9      	b.n	800ff18 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800fb24:	4b53      	ldr	r3, [pc, #332]	@ (800fc74 <HAL_RCC_OscConfig+0x504>)
 800fb26:	681b      	ldr	r3, [r3, #0]
 800fb28:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800fb2c:	2b00      	cmp	r3, #0
 800fb2e:	d1f0      	bne.n	800fb12 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800fb30:	687b      	ldr	r3, [r7, #4]
 800fb32:	681b      	ldr	r3, [r3, #0]
 800fb34:	f003 0308 	and.w	r3, r3, #8
 800fb38:	2b00      	cmp	r3, #0
 800fb3a:	d03c      	beq.n	800fbb6 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800fb3c:	687b      	ldr	r3, [r7, #4]
 800fb3e:	695b      	ldr	r3, [r3, #20]
 800fb40:	2b00      	cmp	r3, #0
 800fb42:	d01c      	beq.n	800fb7e <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800fb44:	4b4b      	ldr	r3, [pc, #300]	@ (800fc74 <HAL_RCC_OscConfig+0x504>)
 800fb46:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800fb4a:	4a4a      	ldr	r2, [pc, #296]	@ (800fc74 <HAL_RCC_OscConfig+0x504>)
 800fb4c:	f043 0301 	orr.w	r3, r3, #1
 800fb50:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800fb54:	f7fb f950 	bl	800adf8 <HAL_GetTick>
 800fb58:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800fb5a:	e008      	b.n	800fb6e <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800fb5c:	f7fb f94c 	bl	800adf8 <HAL_GetTick>
 800fb60:	4602      	mov	r2, r0
 800fb62:	693b      	ldr	r3, [r7, #16]
 800fb64:	1ad3      	subs	r3, r2, r3
 800fb66:	2b02      	cmp	r3, #2
 800fb68:	d901      	bls.n	800fb6e <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800fb6a:	2303      	movs	r3, #3
 800fb6c:	e1d4      	b.n	800ff18 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800fb6e:	4b41      	ldr	r3, [pc, #260]	@ (800fc74 <HAL_RCC_OscConfig+0x504>)
 800fb70:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800fb74:	f003 0302 	and.w	r3, r3, #2
 800fb78:	2b00      	cmp	r3, #0
 800fb7a:	d0ef      	beq.n	800fb5c <HAL_RCC_OscConfig+0x3ec>
 800fb7c:	e01b      	b.n	800fbb6 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800fb7e:	4b3d      	ldr	r3, [pc, #244]	@ (800fc74 <HAL_RCC_OscConfig+0x504>)
 800fb80:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800fb84:	4a3b      	ldr	r2, [pc, #236]	@ (800fc74 <HAL_RCC_OscConfig+0x504>)
 800fb86:	f023 0301 	bic.w	r3, r3, #1
 800fb8a:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800fb8e:	f7fb f933 	bl	800adf8 <HAL_GetTick>
 800fb92:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800fb94:	e008      	b.n	800fba8 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800fb96:	f7fb f92f 	bl	800adf8 <HAL_GetTick>
 800fb9a:	4602      	mov	r2, r0
 800fb9c:	693b      	ldr	r3, [r7, #16]
 800fb9e:	1ad3      	subs	r3, r2, r3
 800fba0:	2b02      	cmp	r3, #2
 800fba2:	d901      	bls.n	800fba8 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 800fba4:	2303      	movs	r3, #3
 800fba6:	e1b7      	b.n	800ff18 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800fba8:	4b32      	ldr	r3, [pc, #200]	@ (800fc74 <HAL_RCC_OscConfig+0x504>)
 800fbaa:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800fbae:	f003 0302 	and.w	r3, r3, #2
 800fbb2:	2b00      	cmp	r3, #0
 800fbb4:	d1ef      	bne.n	800fb96 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800fbb6:	687b      	ldr	r3, [r7, #4]
 800fbb8:	681b      	ldr	r3, [r3, #0]
 800fbba:	f003 0304 	and.w	r3, r3, #4
 800fbbe:	2b00      	cmp	r3, #0
 800fbc0:	f000 80a6 	beq.w	800fd10 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 800fbc4:	2300      	movs	r3, #0
 800fbc6:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 800fbc8:	4b2a      	ldr	r3, [pc, #168]	@ (800fc74 <HAL_RCC_OscConfig+0x504>)
 800fbca:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800fbcc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800fbd0:	2b00      	cmp	r3, #0
 800fbd2:	d10d      	bne.n	800fbf0 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800fbd4:	4b27      	ldr	r3, [pc, #156]	@ (800fc74 <HAL_RCC_OscConfig+0x504>)
 800fbd6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800fbd8:	4a26      	ldr	r2, [pc, #152]	@ (800fc74 <HAL_RCC_OscConfig+0x504>)
 800fbda:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800fbde:	6593      	str	r3, [r2, #88]	@ 0x58
 800fbe0:	4b24      	ldr	r3, [pc, #144]	@ (800fc74 <HAL_RCC_OscConfig+0x504>)
 800fbe2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800fbe4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800fbe8:	60bb      	str	r3, [r7, #8]
 800fbea:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800fbec:	2301      	movs	r3, #1
 800fbee:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800fbf0:	4b21      	ldr	r3, [pc, #132]	@ (800fc78 <HAL_RCC_OscConfig+0x508>)
 800fbf2:	681b      	ldr	r3, [r3, #0]
 800fbf4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800fbf8:	2b00      	cmp	r3, #0
 800fbfa:	d118      	bne.n	800fc2e <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800fbfc:	4b1e      	ldr	r3, [pc, #120]	@ (800fc78 <HAL_RCC_OscConfig+0x508>)
 800fbfe:	681b      	ldr	r3, [r3, #0]
 800fc00:	4a1d      	ldr	r2, [pc, #116]	@ (800fc78 <HAL_RCC_OscConfig+0x508>)
 800fc02:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800fc06:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800fc08:	f7fb f8f6 	bl	800adf8 <HAL_GetTick>
 800fc0c:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800fc0e:	e008      	b.n	800fc22 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800fc10:	f7fb f8f2 	bl	800adf8 <HAL_GetTick>
 800fc14:	4602      	mov	r2, r0
 800fc16:	693b      	ldr	r3, [r7, #16]
 800fc18:	1ad3      	subs	r3, r2, r3
 800fc1a:	2b02      	cmp	r3, #2
 800fc1c:	d901      	bls.n	800fc22 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800fc1e:	2303      	movs	r3, #3
 800fc20:	e17a      	b.n	800ff18 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800fc22:	4b15      	ldr	r3, [pc, #84]	@ (800fc78 <HAL_RCC_OscConfig+0x508>)
 800fc24:	681b      	ldr	r3, [r3, #0]
 800fc26:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800fc2a:	2b00      	cmp	r3, #0
 800fc2c:	d0f0      	beq.n	800fc10 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800fc2e:	687b      	ldr	r3, [r7, #4]
 800fc30:	689b      	ldr	r3, [r3, #8]
 800fc32:	2b01      	cmp	r3, #1
 800fc34:	d108      	bne.n	800fc48 <HAL_RCC_OscConfig+0x4d8>
 800fc36:	4b0f      	ldr	r3, [pc, #60]	@ (800fc74 <HAL_RCC_OscConfig+0x504>)
 800fc38:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800fc3c:	4a0d      	ldr	r2, [pc, #52]	@ (800fc74 <HAL_RCC_OscConfig+0x504>)
 800fc3e:	f043 0301 	orr.w	r3, r3, #1
 800fc42:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800fc46:	e029      	b.n	800fc9c <HAL_RCC_OscConfig+0x52c>
 800fc48:	687b      	ldr	r3, [r7, #4]
 800fc4a:	689b      	ldr	r3, [r3, #8]
 800fc4c:	2b05      	cmp	r3, #5
 800fc4e:	d115      	bne.n	800fc7c <HAL_RCC_OscConfig+0x50c>
 800fc50:	4b08      	ldr	r3, [pc, #32]	@ (800fc74 <HAL_RCC_OscConfig+0x504>)
 800fc52:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800fc56:	4a07      	ldr	r2, [pc, #28]	@ (800fc74 <HAL_RCC_OscConfig+0x504>)
 800fc58:	f043 0304 	orr.w	r3, r3, #4
 800fc5c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800fc60:	4b04      	ldr	r3, [pc, #16]	@ (800fc74 <HAL_RCC_OscConfig+0x504>)
 800fc62:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800fc66:	4a03      	ldr	r2, [pc, #12]	@ (800fc74 <HAL_RCC_OscConfig+0x504>)
 800fc68:	f043 0301 	orr.w	r3, r3, #1
 800fc6c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800fc70:	e014      	b.n	800fc9c <HAL_RCC_OscConfig+0x52c>
 800fc72:	bf00      	nop
 800fc74:	40021000 	.word	0x40021000
 800fc78:	40007000 	.word	0x40007000
 800fc7c:	4b9c      	ldr	r3, [pc, #624]	@ (800fef0 <HAL_RCC_OscConfig+0x780>)
 800fc7e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800fc82:	4a9b      	ldr	r2, [pc, #620]	@ (800fef0 <HAL_RCC_OscConfig+0x780>)
 800fc84:	f023 0301 	bic.w	r3, r3, #1
 800fc88:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800fc8c:	4b98      	ldr	r3, [pc, #608]	@ (800fef0 <HAL_RCC_OscConfig+0x780>)
 800fc8e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800fc92:	4a97      	ldr	r2, [pc, #604]	@ (800fef0 <HAL_RCC_OscConfig+0x780>)
 800fc94:	f023 0304 	bic.w	r3, r3, #4
 800fc98:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800fc9c:	687b      	ldr	r3, [r7, #4]
 800fc9e:	689b      	ldr	r3, [r3, #8]
 800fca0:	2b00      	cmp	r3, #0
 800fca2:	d016      	beq.n	800fcd2 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800fca4:	f7fb f8a8 	bl	800adf8 <HAL_GetTick>
 800fca8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800fcaa:	e00a      	b.n	800fcc2 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800fcac:	f7fb f8a4 	bl	800adf8 <HAL_GetTick>
 800fcb0:	4602      	mov	r2, r0
 800fcb2:	693b      	ldr	r3, [r7, #16]
 800fcb4:	1ad3      	subs	r3, r2, r3
 800fcb6:	f241 3288 	movw	r2, #5000	@ 0x1388
 800fcba:	4293      	cmp	r3, r2
 800fcbc:	d901      	bls.n	800fcc2 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 800fcbe:	2303      	movs	r3, #3
 800fcc0:	e12a      	b.n	800ff18 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800fcc2:	4b8b      	ldr	r3, [pc, #556]	@ (800fef0 <HAL_RCC_OscConfig+0x780>)
 800fcc4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800fcc8:	f003 0302 	and.w	r3, r3, #2
 800fccc:	2b00      	cmp	r3, #0
 800fcce:	d0ed      	beq.n	800fcac <HAL_RCC_OscConfig+0x53c>
 800fcd0:	e015      	b.n	800fcfe <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800fcd2:	f7fb f891 	bl	800adf8 <HAL_GetTick>
 800fcd6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800fcd8:	e00a      	b.n	800fcf0 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800fcda:	f7fb f88d 	bl	800adf8 <HAL_GetTick>
 800fcde:	4602      	mov	r2, r0
 800fce0:	693b      	ldr	r3, [r7, #16]
 800fce2:	1ad3      	subs	r3, r2, r3
 800fce4:	f241 3288 	movw	r2, #5000	@ 0x1388
 800fce8:	4293      	cmp	r3, r2
 800fcea:	d901      	bls.n	800fcf0 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 800fcec:	2303      	movs	r3, #3
 800fcee:	e113      	b.n	800ff18 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800fcf0:	4b7f      	ldr	r3, [pc, #508]	@ (800fef0 <HAL_RCC_OscConfig+0x780>)
 800fcf2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800fcf6:	f003 0302 	and.w	r3, r3, #2
 800fcfa:	2b00      	cmp	r3, #0
 800fcfc:	d1ed      	bne.n	800fcda <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800fcfe:	7ffb      	ldrb	r3, [r7, #31]
 800fd00:	2b01      	cmp	r3, #1
 800fd02:	d105      	bne.n	800fd10 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800fd04:	4b7a      	ldr	r3, [pc, #488]	@ (800fef0 <HAL_RCC_OscConfig+0x780>)
 800fd06:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800fd08:	4a79      	ldr	r2, [pc, #484]	@ (800fef0 <HAL_RCC_OscConfig+0x780>)
 800fd0a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800fd0e:	6593      	str	r3, [r2, #88]	@ 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800fd10:	687b      	ldr	r3, [r7, #4]
 800fd12:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800fd14:	2b00      	cmp	r3, #0
 800fd16:	f000 80fe 	beq.w	800ff16 <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800fd1a:	687b      	ldr	r3, [r7, #4]
 800fd1c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800fd1e:	2b02      	cmp	r3, #2
 800fd20:	f040 80d0 	bne.w	800fec4 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 800fd24:	4b72      	ldr	r3, [pc, #456]	@ (800fef0 <HAL_RCC_OscConfig+0x780>)
 800fd26:	68db      	ldr	r3, [r3, #12]
 800fd28:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800fd2a:	697b      	ldr	r3, [r7, #20]
 800fd2c:	f003 0203 	and.w	r2, r3, #3
 800fd30:	687b      	ldr	r3, [r7, #4]
 800fd32:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800fd34:	429a      	cmp	r2, r3
 800fd36:	d130      	bne.n	800fd9a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800fd38:	697b      	ldr	r3, [r7, #20]
 800fd3a:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 800fd3e:	687b      	ldr	r3, [r7, #4]
 800fd40:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800fd42:	3b01      	subs	r3, #1
 800fd44:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800fd46:	429a      	cmp	r2, r3
 800fd48:	d127      	bne.n	800fd9a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800fd4a:	697b      	ldr	r3, [r7, #20]
 800fd4c:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 800fd50:	687b      	ldr	r3, [r7, #4]
 800fd52:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800fd54:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800fd56:	429a      	cmp	r2, r3
 800fd58:	d11f      	bne.n	800fd9a <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800fd5a:	697b      	ldr	r3, [r7, #20]
 800fd5c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800fd60:	687a      	ldr	r2, [r7, #4]
 800fd62:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 800fd64:	2a07      	cmp	r2, #7
 800fd66:	bf14      	ite	ne
 800fd68:	2201      	movne	r2, #1
 800fd6a:	2200      	moveq	r2, #0
 800fd6c:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800fd6e:	4293      	cmp	r3, r2
 800fd70:	d113      	bne.n	800fd9a <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800fd72:	697b      	ldr	r3, [r7, #20]
 800fd74:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 800fd78:	687b      	ldr	r3, [r7, #4]
 800fd7a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800fd7c:	085b      	lsrs	r3, r3, #1
 800fd7e:	3b01      	subs	r3, #1
 800fd80:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800fd82:	429a      	cmp	r2, r3
 800fd84:	d109      	bne.n	800fd9a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800fd86:	697b      	ldr	r3, [r7, #20]
 800fd88:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 800fd8c:	687b      	ldr	r3, [r7, #4]
 800fd8e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800fd90:	085b      	lsrs	r3, r3, #1
 800fd92:	3b01      	subs	r3, #1
 800fd94:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800fd96:	429a      	cmp	r2, r3
 800fd98:	d06e      	beq.n	800fe78 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800fd9a:	69bb      	ldr	r3, [r7, #24]
 800fd9c:	2b0c      	cmp	r3, #12
 800fd9e:	d069      	beq.n	800fe74 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 800fda0:	4b53      	ldr	r3, [pc, #332]	@ (800fef0 <HAL_RCC_OscConfig+0x780>)
 800fda2:	681b      	ldr	r3, [r3, #0]
 800fda4:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800fda8:	2b00      	cmp	r3, #0
 800fdaa:	d105      	bne.n	800fdb8 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 800fdac:	4b50      	ldr	r3, [pc, #320]	@ (800fef0 <HAL_RCC_OscConfig+0x780>)
 800fdae:	681b      	ldr	r3, [r3, #0]
 800fdb0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800fdb4:	2b00      	cmp	r3, #0
 800fdb6:	d001      	beq.n	800fdbc <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 800fdb8:	2301      	movs	r3, #1
 800fdba:	e0ad      	b.n	800ff18 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800fdbc:	4b4c      	ldr	r3, [pc, #304]	@ (800fef0 <HAL_RCC_OscConfig+0x780>)
 800fdbe:	681b      	ldr	r3, [r3, #0]
 800fdc0:	4a4b      	ldr	r2, [pc, #300]	@ (800fef0 <HAL_RCC_OscConfig+0x780>)
 800fdc2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800fdc6:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800fdc8:	f7fb f816 	bl	800adf8 <HAL_GetTick>
 800fdcc:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800fdce:	e008      	b.n	800fde2 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800fdd0:	f7fb f812 	bl	800adf8 <HAL_GetTick>
 800fdd4:	4602      	mov	r2, r0
 800fdd6:	693b      	ldr	r3, [r7, #16]
 800fdd8:	1ad3      	subs	r3, r2, r3
 800fdda:	2b02      	cmp	r3, #2
 800fddc:	d901      	bls.n	800fde2 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 800fdde:	2303      	movs	r3, #3
 800fde0:	e09a      	b.n	800ff18 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800fde2:	4b43      	ldr	r3, [pc, #268]	@ (800fef0 <HAL_RCC_OscConfig+0x780>)
 800fde4:	681b      	ldr	r3, [r3, #0]
 800fde6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800fdea:	2b00      	cmp	r3, #0
 800fdec:	d1f0      	bne.n	800fdd0 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800fdee:	4b40      	ldr	r3, [pc, #256]	@ (800fef0 <HAL_RCC_OscConfig+0x780>)
 800fdf0:	68da      	ldr	r2, [r3, #12]
 800fdf2:	4b40      	ldr	r3, [pc, #256]	@ (800fef4 <HAL_RCC_OscConfig+0x784>)
 800fdf4:	4013      	ands	r3, r2
 800fdf6:	687a      	ldr	r2, [r7, #4]
 800fdf8:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 800fdfa:	687a      	ldr	r2, [r7, #4]
 800fdfc:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800fdfe:	3a01      	subs	r2, #1
 800fe00:	0112      	lsls	r2, r2, #4
 800fe02:	4311      	orrs	r1, r2
 800fe04:	687a      	ldr	r2, [r7, #4]
 800fe06:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 800fe08:	0212      	lsls	r2, r2, #8
 800fe0a:	4311      	orrs	r1, r2
 800fe0c:	687a      	ldr	r2, [r7, #4]
 800fe0e:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 800fe10:	0852      	lsrs	r2, r2, #1
 800fe12:	3a01      	subs	r2, #1
 800fe14:	0552      	lsls	r2, r2, #21
 800fe16:	4311      	orrs	r1, r2
 800fe18:	687a      	ldr	r2, [r7, #4]
 800fe1a:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 800fe1c:	0852      	lsrs	r2, r2, #1
 800fe1e:	3a01      	subs	r2, #1
 800fe20:	0652      	lsls	r2, r2, #25
 800fe22:	4311      	orrs	r1, r2
 800fe24:	687a      	ldr	r2, [r7, #4]
 800fe26:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 800fe28:	0912      	lsrs	r2, r2, #4
 800fe2a:	0452      	lsls	r2, r2, #17
 800fe2c:	430a      	orrs	r2, r1
 800fe2e:	4930      	ldr	r1, [pc, #192]	@ (800fef0 <HAL_RCC_OscConfig+0x780>)
 800fe30:	4313      	orrs	r3, r2
 800fe32:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 800fe34:	4b2e      	ldr	r3, [pc, #184]	@ (800fef0 <HAL_RCC_OscConfig+0x780>)
 800fe36:	681b      	ldr	r3, [r3, #0]
 800fe38:	4a2d      	ldr	r2, [pc, #180]	@ (800fef0 <HAL_RCC_OscConfig+0x780>)
 800fe3a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800fe3e:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800fe40:	4b2b      	ldr	r3, [pc, #172]	@ (800fef0 <HAL_RCC_OscConfig+0x780>)
 800fe42:	68db      	ldr	r3, [r3, #12]
 800fe44:	4a2a      	ldr	r2, [pc, #168]	@ (800fef0 <HAL_RCC_OscConfig+0x780>)
 800fe46:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800fe4a:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800fe4c:	f7fa ffd4 	bl	800adf8 <HAL_GetTick>
 800fe50:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800fe52:	e008      	b.n	800fe66 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800fe54:	f7fa ffd0 	bl	800adf8 <HAL_GetTick>
 800fe58:	4602      	mov	r2, r0
 800fe5a:	693b      	ldr	r3, [r7, #16]
 800fe5c:	1ad3      	subs	r3, r2, r3
 800fe5e:	2b02      	cmp	r3, #2
 800fe60:	d901      	bls.n	800fe66 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 800fe62:	2303      	movs	r3, #3
 800fe64:	e058      	b.n	800ff18 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800fe66:	4b22      	ldr	r3, [pc, #136]	@ (800fef0 <HAL_RCC_OscConfig+0x780>)
 800fe68:	681b      	ldr	r3, [r3, #0]
 800fe6a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800fe6e:	2b00      	cmp	r3, #0
 800fe70:	d0f0      	beq.n	800fe54 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800fe72:	e050      	b.n	800ff16 <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 800fe74:	2301      	movs	r3, #1
 800fe76:	e04f      	b.n	800ff18 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800fe78:	4b1d      	ldr	r3, [pc, #116]	@ (800fef0 <HAL_RCC_OscConfig+0x780>)
 800fe7a:	681b      	ldr	r3, [r3, #0]
 800fe7c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800fe80:	2b00      	cmp	r3, #0
 800fe82:	d148      	bne.n	800ff16 <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 800fe84:	4b1a      	ldr	r3, [pc, #104]	@ (800fef0 <HAL_RCC_OscConfig+0x780>)
 800fe86:	681b      	ldr	r3, [r3, #0]
 800fe88:	4a19      	ldr	r2, [pc, #100]	@ (800fef0 <HAL_RCC_OscConfig+0x780>)
 800fe8a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800fe8e:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800fe90:	4b17      	ldr	r3, [pc, #92]	@ (800fef0 <HAL_RCC_OscConfig+0x780>)
 800fe92:	68db      	ldr	r3, [r3, #12]
 800fe94:	4a16      	ldr	r2, [pc, #88]	@ (800fef0 <HAL_RCC_OscConfig+0x780>)
 800fe96:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800fe9a:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800fe9c:	f7fa ffac 	bl	800adf8 <HAL_GetTick>
 800fea0:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800fea2:	e008      	b.n	800feb6 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800fea4:	f7fa ffa8 	bl	800adf8 <HAL_GetTick>
 800fea8:	4602      	mov	r2, r0
 800feaa:	693b      	ldr	r3, [r7, #16]
 800feac:	1ad3      	subs	r3, r2, r3
 800feae:	2b02      	cmp	r3, #2
 800feb0:	d901      	bls.n	800feb6 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 800feb2:	2303      	movs	r3, #3
 800feb4:	e030      	b.n	800ff18 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800feb6:	4b0e      	ldr	r3, [pc, #56]	@ (800fef0 <HAL_RCC_OscConfig+0x780>)
 800feb8:	681b      	ldr	r3, [r3, #0]
 800feba:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800febe:	2b00      	cmp	r3, #0
 800fec0:	d0f0      	beq.n	800fea4 <HAL_RCC_OscConfig+0x734>
 800fec2:	e028      	b.n	800ff16 <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 800fec4:	69bb      	ldr	r3, [r7, #24]
 800fec6:	2b0c      	cmp	r3, #12
 800fec8:	d023      	beq.n	800ff12 <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800feca:	4b09      	ldr	r3, [pc, #36]	@ (800fef0 <HAL_RCC_OscConfig+0x780>)
 800fecc:	681b      	ldr	r3, [r3, #0]
 800fece:	4a08      	ldr	r2, [pc, #32]	@ (800fef0 <HAL_RCC_OscConfig+0x780>)
 800fed0:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800fed4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800fed6:	f7fa ff8f 	bl	800adf8 <HAL_GetTick>
 800feda:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800fedc:	e00c      	b.n	800fef8 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800fede:	f7fa ff8b 	bl	800adf8 <HAL_GetTick>
 800fee2:	4602      	mov	r2, r0
 800fee4:	693b      	ldr	r3, [r7, #16]
 800fee6:	1ad3      	subs	r3, r2, r3
 800fee8:	2b02      	cmp	r3, #2
 800feea:	d905      	bls.n	800fef8 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 800feec:	2303      	movs	r3, #3
 800feee:	e013      	b.n	800ff18 <HAL_RCC_OscConfig+0x7a8>
 800fef0:	40021000 	.word	0x40021000
 800fef4:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800fef8:	4b09      	ldr	r3, [pc, #36]	@ (800ff20 <HAL_RCC_OscConfig+0x7b0>)
 800fefa:	681b      	ldr	r3, [r3, #0]
 800fefc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800ff00:	2b00      	cmp	r3, #0
 800ff02:	d1ec      	bne.n	800fede <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 800ff04:	4b06      	ldr	r3, [pc, #24]	@ (800ff20 <HAL_RCC_OscConfig+0x7b0>)
 800ff06:	68da      	ldr	r2, [r3, #12]
 800ff08:	4905      	ldr	r1, [pc, #20]	@ (800ff20 <HAL_RCC_OscConfig+0x7b0>)
 800ff0a:	4b06      	ldr	r3, [pc, #24]	@ (800ff24 <HAL_RCC_OscConfig+0x7b4>)
 800ff0c:	4013      	ands	r3, r2
 800ff0e:	60cb      	str	r3, [r1, #12]
 800ff10:	e001      	b.n	800ff16 <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800ff12:	2301      	movs	r3, #1
 800ff14:	e000      	b.n	800ff18 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 800ff16:	2300      	movs	r3, #0
}
 800ff18:	4618      	mov	r0, r3
 800ff1a:	3720      	adds	r7, #32
 800ff1c:	46bd      	mov	sp, r7
 800ff1e:	bd80      	pop	{r7, pc}
 800ff20:	40021000 	.word	0x40021000
 800ff24:	feeefffc 	.word	0xfeeefffc

0800ff28 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800ff28:	b580      	push	{r7, lr}
 800ff2a:	b084      	sub	sp, #16
 800ff2c:	af00      	add	r7, sp, #0
 800ff2e:	6078      	str	r0, [r7, #4]
 800ff30:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800ff32:	687b      	ldr	r3, [r7, #4]
 800ff34:	2b00      	cmp	r3, #0
 800ff36:	d101      	bne.n	800ff3c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800ff38:	2301      	movs	r3, #1
 800ff3a:	e0e7      	b.n	801010c <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800ff3c:	4b75      	ldr	r3, [pc, #468]	@ (8010114 <HAL_RCC_ClockConfig+0x1ec>)
 800ff3e:	681b      	ldr	r3, [r3, #0]
 800ff40:	f003 0307 	and.w	r3, r3, #7
 800ff44:	683a      	ldr	r2, [r7, #0]
 800ff46:	429a      	cmp	r2, r3
 800ff48:	d910      	bls.n	800ff6c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800ff4a:	4b72      	ldr	r3, [pc, #456]	@ (8010114 <HAL_RCC_ClockConfig+0x1ec>)
 800ff4c:	681b      	ldr	r3, [r3, #0]
 800ff4e:	f023 0207 	bic.w	r2, r3, #7
 800ff52:	4970      	ldr	r1, [pc, #448]	@ (8010114 <HAL_RCC_ClockConfig+0x1ec>)
 800ff54:	683b      	ldr	r3, [r7, #0]
 800ff56:	4313      	orrs	r3, r2
 800ff58:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800ff5a:	4b6e      	ldr	r3, [pc, #440]	@ (8010114 <HAL_RCC_ClockConfig+0x1ec>)
 800ff5c:	681b      	ldr	r3, [r3, #0]
 800ff5e:	f003 0307 	and.w	r3, r3, #7
 800ff62:	683a      	ldr	r2, [r7, #0]
 800ff64:	429a      	cmp	r2, r3
 800ff66:	d001      	beq.n	800ff6c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800ff68:	2301      	movs	r3, #1
 800ff6a:	e0cf      	b.n	801010c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800ff6c:	687b      	ldr	r3, [r7, #4]
 800ff6e:	681b      	ldr	r3, [r3, #0]
 800ff70:	f003 0302 	and.w	r3, r3, #2
 800ff74:	2b00      	cmp	r3, #0
 800ff76:	d010      	beq.n	800ff9a <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 800ff78:	687b      	ldr	r3, [r7, #4]
 800ff7a:	689a      	ldr	r2, [r3, #8]
 800ff7c:	4b66      	ldr	r3, [pc, #408]	@ (8010118 <HAL_RCC_ClockConfig+0x1f0>)
 800ff7e:	689b      	ldr	r3, [r3, #8]
 800ff80:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800ff84:	429a      	cmp	r2, r3
 800ff86:	d908      	bls.n	800ff9a <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800ff88:	4b63      	ldr	r3, [pc, #396]	@ (8010118 <HAL_RCC_ClockConfig+0x1f0>)
 800ff8a:	689b      	ldr	r3, [r3, #8]
 800ff8c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800ff90:	687b      	ldr	r3, [r7, #4]
 800ff92:	689b      	ldr	r3, [r3, #8]
 800ff94:	4960      	ldr	r1, [pc, #384]	@ (8010118 <HAL_RCC_ClockConfig+0x1f0>)
 800ff96:	4313      	orrs	r3, r2
 800ff98:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800ff9a:	687b      	ldr	r3, [r7, #4]
 800ff9c:	681b      	ldr	r3, [r3, #0]
 800ff9e:	f003 0301 	and.w	r3, r3, #1
 800ffa2:	2b00      	cmp	r3, #0
 800ffa4:	d04c      	beq.n	8010040 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800ffa6:	687b      	ldr	r3, [r7, #4]
 800ffa8:	685b      	ldr	r3, [r3, #4]
 800ffaa:	2b03      	cmp	r3, #3
 800ffac:	d107      	bne.n	800ffbe <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800ffae:	4b5a      	ldr	r3, [pc, #360]	@ (8010118 <HAL_RCC_ClockConfig+0x1f0>)
 800ffb0:	681b      	ldr	r3, [r3, #0]
 800ffb2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800ffb6:	2b00      	cmp	r3, #0
 800ffb8:	d121      	bne.n	800fffe <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 800ffba:	2301      	movs	r3, #1
 800ffbc:	e0a6      	b.n	801010c <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800ffbe:	687b      	ldr	r3, [r7, #4]
 800ffc0:	685b      	ldr	r3, [r3, #4]
 800ffc2:	2b02      	cmp	r3, #2
 800ffc4:	d107      	bne.n	800ffd6 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800ffc6:	4b54      	ldr	r3, [pc, #336]	@ (8010118 <HAL_RCC_ClockConfig+0x1f0>)
 800ffc8:	681b      	ldr	r3, [r3, #0]
 800ffca:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800ffce:	2b00      	cmp	r3, #0
 800ffd0:	d115      	bne.n	800fffe <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800ffd2:	2301      	movs	r3, #1
 800ffd4:	e09a      	b.n	801010c <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800ffd6:	687b      	ldr	r3, [r7, #4]
 800ffd8:	685b      	ldr	r3, [r3, #4]
 800ffda:	2b00      	cmp	r3, #0
 800ffdc:	d107      	bne.n	800ffee <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800ffde:	4b4e      	ldr	r3, [pc, #312]	@ (8010118 <HAL_RCC_ClockConfig+0x1f0>)
 800ffe0:	681b      	ldr	r3, [r3, #0]
 800ffe2:	f003 0302 	and.w	r3, r3, #2
 800ffe6:	2b00      	cmp	r3, #0
 800ffe8:	d109      	bne.n	800fffe <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800ffea:	2301      	movs	r3, #1
 800ffec:	e08e      	b.n	801010c <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800ffee:	4b4a      	ldr	r3, [pc, #296]	@ (8010118 <HAL_RCC_ClockConfig+0x1f0>)
 800fff0:	681b      	ldr	r3, [r3, #0]
 800fff2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800fff6:	2b00      	cmp	r3, #0
 800fff8:	d101      	bne.n	800fffe <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800fffa:	2301      	movs	r3, #1
 800fffc:	e086      	b.n	801010c <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800fffe:	4b46      	ldr	r3, [pc, #280]	@ (8010118 <HAL_RCC_ClockConfig+0x1f0>)
 8010000:	689b      	ldr	r3, [r3, #8]
 8010002:	f023 0203 	bic.w	r2, r3, #3
 8010006:	687b      	ldr	r3, [r7, #4]
 8010008:	685b      	ldr	r3, [r3, #4]
 801000a:	4943      	ldr	r1, [pc, #268]	@ (8010118 <HAL_RCC_ClockConfig+0x1f0>)
 801000c:	4313      	orrs	r3, r2
 801000e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8010010:	f7fa fef2 	bl	800adf8 <HAL_GetTick>
 8010014:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8010016:	e00a      	b.n	801002e <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8010018:	f7fa feee 	bl	800adf8 <HAL_GetTick>
 801001c:	4602      	mov	r2, r0
 801001e:	68fb      	ldr	r3, [r7, #12]
 8010020:	1ad3      	subs	r3, r2, r3
 8010022:	f241 3288 	movw	r2, #5000	@ 0x1388
 8010026:	4293      	cmp	r3, r2
 8010028:	d901      	bls.n	801002e <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 801002a:	2303      	movs	r3, #3
 801002c:	e06e      	b.n	801010c <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 801002e:	4b3a      	ldr	r3, [pc, #232]	@ (8010118 <HAL_RCC_ClockConfig+0x1f0>)
 8010030:	689b      	ldr	r3, [r3, #8]
 8010032:	f003 020c 	and.w	r2, r3, #12
 8010036:	687b      	ldr	r3, [r7, #4]
 8010038:	685b      	ldr	r3, [r3, #4]
 801003a:	009b      	lsls	r3, r3, #2
 801003c:	429a      	cmp	r2, r3
 801003e:	d1eb      	bne.n	8010018 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8010040:	687b      	ldr	r3, [r7, #4]
 8010042:	681b      	ldr	r3, [r3, #0]
 8010044:	f003 0302 	and.w	r3, r3, #2
 8010048:	2b00      	cmp	r3, #0
 801004a:	d010      	beq.n	801006e <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 801004c:	687b      	ldr	r3, [r7, #4]
 801004e:	689a      	ldr	r2, [r3, #8]
 8010050:	4b31      	ldr	r3, [pc, #196]	@ (8010118 <HAL_RCC_ClockConfig+0x1f0>)
 8010052:	689b      	ldr	r3, [r3, #8]
 8010054:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8010058:	429a      	cmp	r2, r3
 801005a:	d208      	bcs.n	801006e <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 801005c:	4b2e      	ldr	r3, [pc, #184]	@ (8010118 <HAL_RCC_ClockConfig+0x1f0>)
 801005e:	689b      	ldr	r3, [r3, #8]
 8010060:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8010064:	687b      	ldr	r3, [r7, #4]
 8010066:	689b      	ldr	r3, [r3, #8]
 8010068:	492b      	ldr	r1, [pc, #172]	@ (8010118 <HAL_RCC_ClockConfig+0x1f0>)
 801006a:	4313      	orrs	r3, r2
 801006c:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 801006e:	4b29      	ldr	r3, [pc, #164]	@ (8010114 <HAL_RCC_ClockConfig+0x1ec>)
 8010070:	681b      	ldr	r3, [r3, #0]
 8010072:	f003 0307 	and.w	r3, r3, #7
 8010076:	683a      	ldr	r2, [r7, #0]
 8010078:	429a      	cmp	r2, r3
 801007a:	d210      	bcs.n	801009e <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 801007c:	4b25      	ldr	r3, [pc, #148]	@ (8010114 <HAL_RCC_ClockConfig+0x1ec>)
 801007e:	681b      	ldr	r3, [r3, #0]
 8010080:	f023 0207 	bic.w	r2, r3, #7
 8010084:	4923      	ldr	r1, [pc, #140]	@ (8010114 <HAL_RCC_ClockConfig+0x1ec>)
 8010086:	683b      	ldr	r3, [r7, #0]
 8010088:	4313      	orrs	r3, r2
 801008a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 801008c:	4b21      	ldr	r3, [pc, #132]	@ (8010114 <HAL_RCC_ClockConfig+0x1ec>)
 801008e:	681b      	ldr	r3, [r3, #0]
 8010090:	f003 0307 	and.w	r3, r3, #7
 8010094:	683a      	ldr	r2, [r7, #0]
 8010096:	429a      	cmp	r2, r3
 8010098:	d001      	beq.n	801009e <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 801009a:	2301      	movs	r3, #1
 801009c:	e036      	b.n	801010c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 801009e:	687b      	ldr	r3, [r7, #4]
 80100a0:	681b      	ldr	r3, [r3, #0]
 80100a2:	f003 0304 	and.w	r3, r3, #4
 80100a6:	2b00      	cmp	r3, #0
 80100a8:	d008      	beq.n	80100bc <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80100aa:	4b1b      	ldr	r3, [pc, #108]	@ (8010118 <HAL_RCC_ClockConfig+0x1f0>)
 80100ac:	689b      	ldr	r3, [r3, #8]
 80100ae:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80100b2:	687b      	ldr	r3, [r7, #4]
 80100b4:	68db      	ldr	r3, [r3, #12]
 80100b6:	4918      	ldr	r1, [pc, #96]	@ (8010118 <HAL_RCC_ClockConfig+0x1f0>)
 80100b8:	4313      	orrs	r3, r2
 80100ba:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80100bc:	687b      	ldr	r3, [r7, #4]
 80100be:	681b      	ldr	r3, [r3, #0]
 80100c0:	f003 0308 	and.w	r3, r3, #8
 80100c4:	2b00      	cmp	r3, #0
 80100c6:	d009      	beq.n	80100dc <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80100c8:	4b13      	ldr	r3, [pc, #76]	@ (8010118 <HAL_RCC_ClockConfig+0x1f0>)
 80100ca:	689b      	ldr	r3, [r3, #8]
 80100cc:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80100d0:	687b      	ldr	r3, [r7, #4]
 80100d2:	691b      	ldr	r3, [r3, #16]
 80100d4:	00db      	lsls	r3, r3, #3
 80100d6:	4910      	ldr	r1, [pc, #64]	@ (8010118 <HAL_RCC_ClockConfig+0x1f0>)
 80100d8:	4313      	orrs	r3, r2
 80100da:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80100dc:	f000 f824 	bl	8010128 <HAL_RCC_GetSysClockFreq>
 80100e0:	4602      	mov	r2, r0
 80100e2:	4b0d      	ldr	r3, [pc, #52]	@ (8010118 <HAL_RCC_ClockConfig+0x1f0>)
 80100e4:	689b      	ldr	r3, [r3, #8]
 80100e6:	091b      	lsrs	r3, r3, #4
 80100e8:	f003 030f 	and.w	r3, r3, #15
 80100ec:	490b      	ldr	r1, [pc, #44]	@ (801011c <HAL_RCC_ClockConfig+0x1f4>)
 80100ee:	5ccb      	ldrb	r3, [r1, r3]
 80100f0:	f003 031f 	and.w	r3, r3, #31
 80100f4:	fa22 f303 	lsr.w	r3, r2, r3
 80100f8:	4a09      	ldr	r2, [pc, #36]	@ (8010120 <HAL_RCC_ClockConfig+0x1f8>)
 80100fa:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80100fc:	4b09      	ldr	r3, [pc, #36]	@ (8010124 <HAL_RCC_ClockConfig+0x1fc>)
 80100fe:	681b      	ldr	r3, [r3, #0]
 8010100:	4618      	mov	r0, r3
 8010102:	f7fa fe29 	bl	800ad58 <HAL_InitTick>
 8010106:	4603      	mov	r3, r0
 8010108:	72fb      	strb	r3, [r7, #11]

  return status;
 801010a:	7afb      	ldrb	r3, [r7, #11]
}
 801010c:	4618      	mov	r0, r3
 801010e:	3710      	adds	r7, #16
 8010110:	46bd      	mov	sp, r7
 8010112:	bd80      	pop	{r7, pc}
 8010114:	40022000 	.word	0x40022000
 8010118:	40021000 	.word	0x40021000
 801011c:	080175f0 	.word	0x080175f0
 8010120:	20000268 	.word	0x20000268
 8010124:	20000274 	.word	0x20000274

08010128 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8010128:	b480      	push	{r7}
 801012a:	b089      	sub	sp, #36	@ 0x24
 801012c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 801012e:	2300      	movs	r3, #0
 8010130:	61fb      	str	r3, [r7, #28]
 8010132:	2300      	movs	r3, #0
 8010134:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8010136:	4b3e      	ldr	r3, [pc, #248]	@ (8010230 <HAL_RCC_GetSysClockFreq+0x108>)
 8010138:	689b      	ldr	r3, [r3, #8]
 801013a:	f003 030c 	and.w	r3, r3, #12
 801013e:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8010140:	4b3b      	ldr	r3, [pc, #236]	@ (8010230 <HAL_RCC_GetSysClockFreq+0x108>)
 8010142:	68db      	ldr	r3, [r3, #12]
 8010144:	f003 0303 	and.w	r3, r3, #3
 8010148:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 801014a:	693b      	ldr	r3, [r7, #16]
 801014c:	2b00      	cmp	r3, #0
 801014e:	d005      	beq.n	801015c <HAL_RCC_GetSysClockFreq+0x34>
 8010150:	693b      	ldr	r3, [r7, #16]
 8010152:	2b0c      	cmp	r3, #12
 8010154:	d121      	bne.n	801019a <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8010156:	68fb      	ldr	r3, [r7, #12]
 8010158:	2b01      	cmp	r3, #1
 801015a:	d11e      	bne.n	801019a <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 801015c:	4b34      	ldr	r3, [pc, #208]	@ (8010230 <HAL_RCC_GetSysClockFreq+0x108>)
 801015e:	681b      	ldr	r3, [r3, #0]
 8010160:	f003 0308 	and.w	r3, r3, #8
 8010164:	2b00      	cmp	r3, #0
 8010166:	d107      	bne.n	8010178 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8010168:	4b31      	ldr	r3, [pc, #196]	@ (8010230 <HAL_RCC_GetSysClockFreq+0x108>)
 801016a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 801016e:	0a1b      	lsrs	r3, r3, #8
 8010170:	f003 030f 	and.w	r3, r3, #15
 8010174:	61fb      	str	r3, [r7, #28]
 8010176:	e005      	b.n	8010184 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8010178:	4b2d      	ldr	r3, [pc, #180]	@ (8010230 <HAL_RCC_GetSysClockFreq+0x108>)
 801017a:	681b      	ldr	r3, [r3, #0]
 801017c:	091b      	lsrs	r3, r3, #4
 801017e:	f003 030f 	and.w	r3, r3, #15
 8010182:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8010184:	4a2b      	ldr	r2, [pc, #172]	@ (8010234 <HAL_RCC_GetSysClockFreq+0x10c>)
 8010186:	69fb      	ldr	r3, [r7, #28]
 8010188:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801018c:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 801018e:	693b      	ldr	r3, [r7, #16]
 8010190:	2b00      	cmp	r3, #0
 8010192:	d10d      	bne.n	80101b0 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8010194:	69fb      	ldr	r3, [r7, #28]
 8010196:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8010198:	e00a      	b.n	80101b0 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 801019a:	693b      	ldr	r3, [r7, #16]
 801019c:	2b04      	cmp	r3, #4
 801019e:	d102      	bne.n	80101a6 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80101a0:	4b25      	ldr	r3, [pc, #148]	@ (8010238 <HAL_RCC_GetSysClockFreq+0x110>)
 80101a2:	61bb      	str	r3, [r7, #24]
 80101a4:	e004      	b.n	80101b0 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80101a6:	693b      	ldr	r3, [r7, #16]
 80101a8:	2b08      	cmp	r3, #8
 80101aa:	d101      	bne.n	80101b0 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80101ac:	4b23      	ldr	r3, [pc, #140]	@ (801023c <HAL_RCC_GetSysClockFreq+0x114>)
 80101ae:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80101b0:	693b      	ldr	r3, [r7, #16]
 80101b2:	2b0c      	cmp	r3, #12
 80101b4:	d134      	bne.n	8010220 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80101b6:	4b1e      	ldr	r3, [pc, #120]	@ (8010230 <HAL_RCC_GetSysClockFreq+0x108>)
 80101b8:	68db      	ldr	r3, [r3, #12]
 80101ba:	f003 0303 	and.w	r3, r3, #3
 80101be:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80101c0:	68bb      	ldr	r3, [r7, #8]
 80101c2:	2b02      	cmp	r3, #2
 80101c4:	d003      	beq.n	80101ce <HAL_RCC_GetSysClockFreq+0xa6>
 80101c6:	68bb      	ldr	r3, [r7, #8]
 80101c8:	2b03      	cmp	r3, #3
 80101ca:	d003      	beq.n	80101d4 <HAL_RCC_GetSysClockFreq+0xac>
 80101cc:	e005      	b.n	80101da <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80101ce:	4b1a      	ldr	r3, [pc, #104]	@ (8010238 <HAL_RCC_GetSysClockFreq+0x110>)
 80101d0:	617b      	str	r3, [r7, #20]
      break;
 80101d2:	e005      	b.n	80101e0 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80101d4:	4b19      	ldr	r3, [pc, #100]	@ (801023c <HAL_RCC_GetSysClockFreq+0x114>)
 80101d6:	617b      	str	r3, [r7, #20]
      break;
 80101d8:	e002      	b.n	80101e0 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80101da:	69fb      	ldr	r3, [r7, #28]
 80101dc:	617b      	str	r3, [r7, #20]
      break;
 80101de:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80101e0:	4b13      	ldr	r3, [pc, #76]	@ (8010230 <HAL_RCC_GetSysClockFreq+0x108>)
 80101e2:	68db      	ldr	r3, [r3, #12]
 80101e4:	091b      	lsrs	r3, r3, #4
 80101e6:	f003 0307 	and.w	r3, r3, #7
 80101ea:	3301      	adds	r3, #1
 80101ec:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80101ee:	4b10      	ldr	r3, [pc, #64]	@ (8010230 <HAL_RCC_GetSysClockFreq+0x108>)
 80101f0:	68db      	ldr	r3, [r3, #12]
 80101f2:	0a1b      	lsrs	r3, r3, #8
 80101f4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80101f8:	697a      	ldr	r2, [r7, #20]
 80101fa:	fb03 f202 	mul.w	r2, r3, r2
 80101fe:	687b      	ldr	r3, [r7, #4]
 8010200:	fbb2 f3f3 	udiv	r3, r2, r3
 8010204:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8010206:	4b0a      	ldr	r3, [pc, #40]	@ (8010230 <HAL_RCC_GetSysClockFreq+0x108>)
 8010208:	68db      	ldr	r3, [r3, #12]
 801020a:	0e5b      	lsrs	r3, r3, #25
 801020c:	f003 0303 	and.w	r3, r3, #3
 8010210:	3301      	adds	r3, #1
 8010212:	005b      	lsls	r3, r3, #1
 8010214:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8010216:	697a      	ldr	r2, [r7, #20]
 8010218:	683b      	ldr	r3, [r7, #0]
 801021a:	fbb2 f3f3 	udiv	r3, r2, r3
 801021e:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8010220:	69bb      	ldr	r3, [r7, #24]
}
 8010222:	4618      	mov	r0, r3
 8010224:	3724      	adds	r7, #36	@ 0x24
 8010226:	46bd      	mov	sp, r7
 8010228:	f85d 7b04 	ldr.w	r7, [sp], #4
 801022c:	4770      	bx	lr
 801022e:	bf00      	nop
 8010230:	40021000 	.word	0x40021000
 8010234:	08017608 	.word	0x08017608
 8010238:	00f42400 	.word	0x00f42400
 801023c:	007a1200 	.word	0x007a1200

08010240 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8010240:	b480      	push	{r7}
 8010242:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8010244:	4b03      	ldr	r3, [pc, #12]	@ (8010254 <HAL_RCC_GetHCLKFreq+0x14>)
 8010246:	681b      	ldr	r3, [r3, #0]
}
 8010248:	4618      	mov	r0, r3
 801024a:	46bd      	mov	sp, r7
 801024c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010250:	4770      	bx	lr
 8010252:	bf00      	nop
 8010254:	20000268 	.word	0x20000268

08010258 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8010258:	b580      	push	{r7, lr}
 801025a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 801025c:	f7ff fff0 	bl	8010240 <HAL_RCC_GetHCLKFreq>
 8010260:	4602      	mov	r2, r0
 8010262:	4b06      	ldr	r3, [pc, #24]	@ (801027c <HAL_RCC_GetPCLK1Freq+0x24>)
 8010264:	689b      	ldr	r3, [r3, #8]
 8010266:	0a1b      	lsrs	r3, r3, #8
 8010268:	f003 0307 	and.w	r3, r3, #7
 801026c:	4904      	ldr	r1, [pc, #16]	@ (8010280 <HAL_RCC_GetPCLK1Freq+0x28>)
 801026e:	5ccb      	ldrb	r3, [r1, r3]
 8010270:	f003 031f 	and.w	r3, r3, #31
 8010274:	fa22 f303 	lsr.w	r3, r2, r3
}
 8010278:	4618      	mov	r0, r3
 801027a:	bd80      	pop	{r7, pc}
 801027c:	40021000 	.word	0x40021000
 8010280:	08017600 	.word	0x08017600

08010284 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8010284:	b580      	push	{r7, lr}
 8010286:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8010288:	f7ff ffda 	bl	8010240 <HAL_RCC_GetHCLKFreq>
 801028c:	4602      	mov	r2, r0
 801028e:	4b06      	ldr	r3, [pc, #24]	@ (80102a8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8010290:	689b      	ldr	r3, [r3, #8]
 8010292:	0adb      	lsrs	r3, r3, #11
 8010294:	f003 0307 	and.w	r3, r3, #7
 8010298:	4904      	ldr	r1, [pc, #16]	@ (80102ac <HAL_RCC_GetPCLK2Freq+0x28>)
 801029a:	5ccb      	ldrb	r3, [r1, r3]
 801029c:	f003 031f 	and.w	r3, r3, #31
 80102a0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80102a4:	4618      	mov	r0, r3
 80102a6:	bd80      	pop	{r7, pc}
 80102a8:	40021000 	.word	0x40021000
 80102ac:	08017600 	.word	0x08017600

080102b0 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80102b0:	b580      	push	{r7, lr}
 80102b2:	b086      	sub	sp, #24
 80102b4:	af00      	add	r7, sp, #0
 80102b6:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80102b8:	2300      	movs	r3, #0
 80102ba:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80102bc:	4b2a      	ldr	r3, [pc, #168]	@ (8010368 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80102be:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80102c0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80102c4:	2b00      	cmp	r3, #0
 80102c6:	d003      	beq.n	80102d0 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80102c8:	f7fe fd8c 	bl	800ede4 <HAL_PWREx_GetVoltageRange>
 80102cc:	6178      	str	r0, [r7, #20]
 80102ce:	e014      	b.n	80102fa <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80102d0:	4b25      	ldr	r3, [pc, #148]	@ (8010368 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80102d2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80102d4:	4a24      	ldr	r2, [pc, #144]	@ (8010368 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80102d6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80102da:	6593      	str	r3, [r2, #88]	@ 0x58
 80102dc:	4b22      	ldr	r3, [pc, #136]	@ (8010368 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80102de:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80102e0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80102e4:	60fb      	str	r3, [r7, #12]
 80102e6:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80102e8:	f7fe fd7c 	bl	800ede4 <HAL_PWREx_GetVoltageRange>
 80102ec:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80102ee:	4b1e      	ldr	r3, [pc, #120]	@ (8010368 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80102f0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80102f2:	4a1d      	ldr	r2, [pc, #116]	@ (8010368 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80102f4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80102f8:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80102fa:	697b      	ldr	r3, [r7, #20]
 80102fc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8010300:	d10b      	bne.n	801031a <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8010302:	687b      	ldr	r3, [r7, #4]
 8010304:	2b80      	cmp	r3, #128	@ 0x80
 8010306:	d919      	bls.n	801033c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8010308:	687b      	ldr	r3, [r7, #4]
 801030a:	2ba0      	cmp	r3, #160	@ 0xa0
 801030c:	d902      	bls.n	8010314 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 801030e:	2302      	movs	r3, #2
 8010310:	613b      	str	r3, [r7, #16]
 8010312:	e013      	b.n	801033c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8010314:	2301      	movs	r3, #1
 8010316:	613b      	str	r3, [r7, #16]
 8010318:	e010      	b.n	801033c <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 801031a:	687b      	ldr	r3, [r7, #4]
 801031c:	2b80      	cmp	r3, #128	@ 0x80
 801031e:	d902      	bls.n	8010326 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8010320:	2303      	movs	r3, #3
 8010322:	613b      	str	r3, [r7, #16]
 8010324:	e00a      	b.n	801033c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8010326:	687b      	ldr	r3, [r7, #4]
 8010328:	2b80      	cmp	r3, #128	@ 0x80
 801032a:	d102      	bne.n	8010332 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 801032c:	2302      	movs	r3, #2
 801032e:	613b      	str	r3, [r7, #16]
 8010330:	e004      	b.n	801033c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8010332:	687b      	ldr	r3, [r7, #4]
 8010334:	2b70      	cmp	r3, #112	@ 0x70
 8010336:	d101      	bne.n	801033c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8010338:	2301      	movs	r3, #1
 801033a:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 801033c:	4b0b      	ldr	r3, [pc, #44]	@ (801036c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 801033e:	681b      	ldr	r3, [r3, #0]
 8010340:	f023 0207 	bic.w	r2, r3, #7
 8010344:	4909      	ldr	r1, [pc, #36]	@ (801036c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8010346:	693b      	ldr	r3, [r7, #16]
 8010348:	4313      	orrs	r3, r2
 801034a:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 801034c:	4b07      	ldr	r3, [pc, #28]	@ (801036c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 801034e:	681b      	ldr	r3, [r3, #0]
 8010350:	f003 0307 	and.w	r3, r3, #7
 8010354:	693a      	ldr	r2, [r7, #16]
 8010356:	429a      	cmp	r2, r3
 8010358:	d001      	beq.n	801035e <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 801035a:	2301      	movs	r3, #1
 801035c:	e000      	b.n	8010360 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 801035e:	2300      	movs	r3, #0
}
 8010360:	4618      	mov	r0, r3
 8010362:	3718      	adds	r7, #24
 8010364:	46bd      	mov	sp, r7
 8010366:	bd80      	pop	{r7, pc}
 8010368:	40021000 	.word	0x40021000
 801036c:	40022000 	.word	0x40022000

08010370 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8010370:	b580      	push	{r7, lr}
 8010372:	b086      	sub	sp, #24
 8010374:	af00      	add	r7, sp, #0
 8010376:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8010378:	2300      	movs	r3, #0
 801037a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 801037c:	2300      	movs	r3, #0
 801037e:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8010380:	687b      	ldr	r3, [r7, #4]
 8010382:	681b      	ldr	r3, [r3, #0]
 8010384:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8010388:	2b00      	cmp	r3, #0
 801038a:	d041      	beq.n	8010410 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 801038c:	687b      	ldr	r3, [r7, #4]
 801038e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8010390:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8010394:	d02a      	beq.n	80103ec <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8010396:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 801039a:	d824      	bhi.n	80103e6 <HAL_RCCEx_PeriphCLKConfig+0x76>
 801039c:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80103a0:	d008      	beq.n	80103b4 <HAL_RCCEx_PeriphCLKConfig+0x44>
 80103a2:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80103a6:	d81e      	bhi.n	80103e6 <HAL_RCCEx_PeriphCLKConfig+0x76>
 80103a8:	2b00      	cmp	r3, #0
 80103aa:	d00a      	beq.n	80103c2 <HAL_RCCEx_PeriphCLKConfig+0x52>
 80103ac:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80103b0:	d010      	beq.n	80103d4 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80103b2:	e018      	b.n	80103e6 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80103b4:	4b86      	ldr	r3, [pc, #536]	@ (80105d0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80103b6:	68db      	ldr	r3, [r3, #12]
 80103b8:	4a85      	ldr	r2, [pc, #532]	@ (80105d0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80103ba:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80103be:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80103c0:	e015      	b.n	80103ee <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80103c2:	687b      	ldr	r3, [r7, #4]
 80103c4:	3304      	adds	r3, #4
 80103c6:	2100      	movs	r1, #0
 80103c8:	4618      	mov	r0, r3
 80103ca:	f000 fabb 	bl	8010944 <RCCEx_PLLSAI1_Config>
 80103ce:	4603      	mov	r3, r0
 80103d0:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80103d2:	e00c      	b.n	80103ee <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80103d4:	687b      	ldr	r3, [r7, #4]
 80103d6:	3320      	adds	r3, #32
 80103d8:	2100      	movs	r1, #0
 80103da:	4618      	mov	r0, r3
 80103dc:	f000 fba6 	bl	8010b2c <RCCEx_PLLSAI2_Config>
 80103e0:	4603      	mov	r3, r0
 80103e2:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80103e4:	e003      	b.n	80103ee <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80103e6:	2301      	movs	r3, #1
 80103e8:	74fb      	strb	r3, [r7, #19]
      break;
 80103ea:	e000      	b.n	80103ee <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 80103ec:	bf00      	nop
    }

    if(ret == HAL_OK)
 80103ee:	7cfb      	ldrb	r3, [r7, #19]
 80103f0:	2b00      	cmp	r3, #0
 80103f2:	d10b      	bne.n	801040c <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80103f4:	4b76      	ldr	r3, [pc, #472]	@ (80105d0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80103f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80103fa:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80103fe:	687b      	ldr	r3, [r7, #4]
 8010400:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8010402:	4973      	ldr	r1, [pc, #460]	@ (80105d0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8010404:	4313      	orrs	r3, r2
 8010406:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 801040a:	e001      	b.n	8010410 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 801040c:	7cfb      	ldrb	r3, [r7, #19]
 801040e:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8010410:	687b      	ldr	r3, [r7, #4]
 8010412:	681b      	ldr	r3, [r3, #0]
 8010414:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8010418:	2b00      	cmp	r3, #0
 801041a:	d041      	beq.n	80104a0 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 801041c:	687b      	ldr	r3, [r7, #4]
 801041e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8010420:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8010424:	d02a      	beq.n	801047c <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8010426:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 801042a:	d824      	bhi.n	8010476 <HAL_RCCEx_PeriphCLKConfig+0x106>
 801042c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8010430:	d008      	beq.n	8010444 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8010432:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8010436:	d81e      	bhi.n	8010476 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8010438:	2b00      	cmp	r3, #0
 801043a:	d00a      	beq.n	8010452 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 801043c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8010440:	d010      	beq.n	8010464 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8010442:	e018      	b.n	8010476 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8010444:	4b62      	ldr	r3, [pc, #392]	@ (80105d0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8010446:	68db      	ldr	r3, [r3, #12]
 8010448:	4a61      	ldr	r2, [pc, #388]	@ (80105d0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 801044a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 801044e:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8010450:	e015      	b.n	801047e <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8010452:	687b      	ldr	r3, [r7, #4]
 8010454:	3304      	adds	r3, #4
 8010456:	2100      	movs	r1, #0
 8010458:	4618      	mov	r0, r3
 801045a:	f000 fa73 	bl	8010944 <RCCEx_PLLSAI1_Config>
 801045e:	4603      	mov	r3, r0
 8010460:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8010462:	e00c      	b.n	801047e <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8010464:	687b      	ldr	r3, [r7, #4]
 8010466:	3320      	adds	r3, #32
 8010468:	2100      	movs	r1, #0
 801046a:	4618      	mov	r0, r3
 801046c:	f000 fb5e 	bl	8010b2c <RCCEx_PLLSAI2_Config>
 8010470:	4603      	mov	r3, r0
 8010472:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8010474:	e003      	b.n	801047e <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8010476:	2301      	movs	r3, #1
 8010478:	74fb      	strb	r3, [r7, #19]
      break;
 801047a:	e000      	b.n	801047e <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 801047c:	bf00      	nop
    }

    if(ret == HAL_OK)
 801047e:	7cfb      	ldrb	r3, [r7, #19]
 8010480:	2b00      	cmp	r3, #0
 8010482:	d10b      	bne.n	801049c <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8010484:	4b52      	ldr	r3, [pc, #328]	@ (80105d0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8010486:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 801048a:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 801048e:	687b      	ldr	r3, [r7, #4]
 8010490:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8010492:	494f      	ldr	r1, [pc, #316]	@ (80105d0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8010494:	4313      	orrs	r3, r2
 8010496:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 801049a:	e001      	b.n	80104a0 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 801049c:	7cfb      	ldrb	r3, [r7, #19]
 801049e:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80104a0:	687b      	ldr	r3, [r7, #4]
 80104a2:	681b      	ldr	r3, [r3, #0]
 80104a4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80104a8:	2b00      	cmp	r3, #0
 80104aa:	f000 80a0 	beq.w	80105ee <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80104ae:	2300      	movs	r3, #0
 80104b0:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80104b2:	4b47      	ldr	r3, [pc, #284]	@ (80105d0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80104b4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80104b6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80104ba:	2b00      	cmp	r3, #0
 80104bc:	d101      	bne.n	80104c2 <HAL_RCCEx_PeriphCLKConfig+0x152>
 80104be:	2301      	movs	r3, #1
 80104c0:	e000      	b.n	80104c4 <HAL_RCCEx_PeriphCLKConfig+0x154>
 80104c2:	2300      	movs	r3, #0
 80104c4:	2b00      	cmp	r3, #0
 80104c6:	d00d      	beq.n	80104e4 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80104c8:	4b41      	ldr	r3, [pc, #260]	@ (80105d0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80104ca:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80104cc:	4a40      	ldr	r2, [pc, #256]	@ (80105d0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80104ce:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80104d2:	6593      	str	r3, [r2, #88]	@ 0x58
 80104d4:	4b3e      	ldr	r3, [pc, #248]	@ (80105d0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80104d6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80104d8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80104dc:	60bb      	str	r3, [r7, #8]
 80104de:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80104e0:	2301      	movs	r3, #1
 80104e2:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80104e4:	4b3b      	ldr	r3, [pc, #236]	@ (80105d4 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80104e6:	681b      	ldr	r3, [r3, #0]
 80104e8:	4a3a      	ldr	r2, [pc, #232]	@ (80105d4 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80104ea:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80104ee:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80104f0:	f7fa fc82 	bl	800adf8 <HAL_GetTick>
 80104f4:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80104f6:	e009      	b.n	801050c <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80104f8:	f7fa fc7e 	bl	800adf8 <HAL_GetTick>
 80104fc:	4602      	mov	r2, r0
 80104fe:	68fb      	ldr	r3, [r7, #12]
 8010500:	1ad3      	subs	r3, r2, r3
 8010502:	2b02      	cmp	r3, #2
 8010504:	d902      	bls.n	801050c <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8010506:	2303      	movs	r3, #3
 8010508:	74fb      	strb	r3, [r7, #19]
        break;
 801050a:	e005      	b.n	8010518 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 801050c:	4b31      	ldr	r3, [pc, #196]	@ (80105d4 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 801050e:	681b      	ldr	r3, [r3, #0]
 8010510:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8010514:	2b00      	cmp	r3, #0
 8010516:	d0ef      	beq.n	80104f8 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8010518:	7cfb      	ldrb	r3, [r7, #19]
 801051a:	2b00      	cmp	r3, #0
 801051c:	d15c      	bne.n	80105d8 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 801051e:	4b2c      	ldr	r3, [pc, #176]	@ (80105d0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8010520:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8010524:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8010528:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 801052a:	697b      	ldr	r3, [r7, #20]
 801052c:	2b00      	cmp	r3, #0
 801052e:	d01f      	beq.n	8010570 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8010530:	687b      	ldr	r3, [r7, #4]
 8010532:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8010536:	697a      	ldr	r2, [r7, #20]
 8010538:	429a      	cmp	r2, r3
 801053a:	d019      	beq.n	8010570 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 801053c:	4b24      	ldr	r3, [pc, #144]	@ (80105d0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 801053e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8010542:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8010546:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8010548:	4b21      	ldr	r3, [pc, #132]	@ (80105d0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 801054a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 801054e:	4a20      	ldr	r2, [pc, #128]	@ (80105d0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8010550:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8010554:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8010558:	4b1d      	ldr	r3, [pc, #116]	@ (80105d0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 801055a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 801055e:	4a1c      	ldr	r2, [pc, #112]	@ (80105d0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8010560:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8010564:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8010568:	4a19      	ldr	r2, [pc, #100]	@ (80105d0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 801056a:	697b      	ldr	r3, [r7, #20]
 801056c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8010570:	697b      	ldr	r3, [r7, #20]
 8010572:	f003 0301 	and.w	r3, r3, #1
 8010576:	2b00      	cmp	r3, #0
 8010578:	d016      	beq.n	80105a8 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 801057a:	f7fa fc3d 	bl	800adf8 <HAL_GetTick>
 801057e:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8010580:	e00b      	b.n	801059a <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8010582:	f7fa fc39 	bl	800adf8 <HAL_GetTick>
 8010586:	4602      	mov	r2, r0
 8010588:	68fb      	ldr	r3, [r7, #12]
 801058a:	1ad3      	subs	r3, r2, r3
 801058c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8010590:	4293      	cmp	r3, r2
 8010592:	d902      	bls.n	801059a <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8010594:	2303      	movs	r3, #3
 8010596:	74fb      	strb	r3, [r7, #19]
            break;
 8010598:	e006      	b.n	80105a8 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 801059a:	4b0d      	ldr	r3, [pc, #52]	@ (80105d0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 801059c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80105a0:	f003 0302 	and.w	r3, r3, #2
 80105a4:	2b00      	cmp	r3, #0
 80105a6:	d0ec      	beq.n	8010582 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 80105a8:	7cfb      	ldrb	r3, [r7, #19]
 80105aa:	2b00      	cmp	r3, #0
 80105ac:	d10c      	bne.n	80105c8 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80105ae:	4b08      	ldr	r3, [pc, #32]	@ (80105d0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80105b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80105b4:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80105b8:	687b      	ldr	r3, [r7, #4]
 80105ba:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80105be:	4904      	ldr	r1, [pc, #16]	@ (80105d0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80105c0:	4313      	orrs	r3, r2
 80105c2:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 80105c6:	e009      	b.n	80105dc <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80105c8:	7cfb      	ldrb	r3, [r7, #19]
 80105ca:	74bb      	strb	r3, [r7, #18]
 80105cc:	e006      	b.n	80105dc <HAL_RCCEx_PeriphCLKConfig+0x26c>
 80105ce:	bf00      	nop
 80105d0:	40021000 	.word	0x40021000
 80105d4:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80105d8:	7cfb      	ldrb	r3, [r7, #19]
 80105da:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80105dc:	7c7b      	ldrb	r3, [r7, #17]
 80105de:	2b01      	cmp	r3, #1
 80105e0:	d105      	bne.n	80105ee <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80105e2:	4b9e      	ldr	r3, [pc, #632]	@ (801085c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80105e4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80105e6:	4a9d      	ldr	r2, [pc, #628]	@ (801085c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80105e8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80105ec:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80105ee:	687b      	ldr	r3, [r7, #4]
 80105f0:	681b      	ldr	r3, [r3, #0]
 80105f2:	f003 0301 	and.w	r3, r3, #1
 80105f6:	2b00      	cmp	r3, #0
 80105f8:	d00a      	beq.n	8010610 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80105fa:	4b98      	ldr	r3, [pc, #608]	@ (801085c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80105fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8010600:	f023 0203 	bic.w	r2, r3, #3
 8010604:	687b      	ldr	r3, [r7, #4]
 8010606:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8010608:	4994      	ldr	r1, [pc, #592]	@ (801085c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 801060a:	4313      	orrs	r3, r2
 801060c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8010610:	687b      	ldr	r3, [r7, #4]
 8010612:	681b      	ldr	r3, [r3, #0]
 8010614:	f003 0302 	and.w	r3, r3, #2
 8010618:	2b00      	cmp	r3, #0
 801061a:	d00a      	beq.n	8010632 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 801061c:	4b8f      	ldr	r3, [pc, #572]	@ (801085c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 801061e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8010622:	f023 020c 	bic.w	r2, r3, #12
 8010626:	687b      	ldr	r3, [r7, #4]
 8010628:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801062a:	498c      	ldr	r1, [pc, #560]	@ (801085c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 801062c:	4313      	orrs	r3, r2
 801062e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8010632:	687b      	ldr	r3, [r7, #4]
 8010634:	681b      	ldr	r3, [r3, #0]
 8010636:	f003 0304 	and.w	r3, r3, #4
 801063a:	2b00      	cmp	r3, #0
 801063c:	d00a      	beq.n	8010654 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 801063e:	4b87      	ldr	r3, [pc, #540]	@ (801085c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8010640:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8010644:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8010648:	687b      	ldr	r3, [r7, #4]
 801064a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801064c:	4983      	ldr	r1, [pc, #524]	@ (801085c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 801064e:	4313      	orrs	r3, r2
 8010650:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8010654:	687b      	ldr	r3, [r7, #4]
 8010656:	681b      	ldr	r3, [r3, #0]
 8010658:	f003 0308 	and.w	r3, r3, #8
 801065c:	2b00      	cmp	r3, #0
 801065e:	d00a      	beq.n	8010676 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8010660:	4b7e      	ldr	r3, [pc, #504]	@ (801085c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8010662:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8010666:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 801066a:	687b      	ldr	r3, [r7, #4]
 801066c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801066e:	497b      	ldr	r1, [pc, #492]	@ (801085c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8010670:	4313      	orrs	r3, r2
 8010672:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8010676:	687b      	ldr	r3, [r7, #4]
 8010678:	681b      	ldr	r3, [r3, #0]
 801067a:	f003 0310 	and.w	r3, r3, #16
 801067e:	2b00      	cmp	r3, #0
 8010680:	d00a      	beq.n	8010698 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8010682:	4b76      	ldr	r3, [pc, #472]	@ (801085c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8010684:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8010688:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 801068c:	687b      	ldr	r3, [r7, #4]
 801068e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8010690:	4972      	ldr	r1, [pc, #456]	@ (801085c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8010692:	4313      	orrs	r3, r2
 8010694:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8010698:	687b      	ldr	r3, [r7, #4]
 801069a:	681b      	ldr	r3, [r3, #0]
 801069c:	f003 0320 	and.w	r3, r3, #32
 80106a0:	2b00      	cmp	r3, #0
 80106a2:	d00a      	beq.n	80106ba <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80106a4:	4b6d      	ldr	r3, [pc, #436]	@ (801085c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80106a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80106aa:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80106ae:	687b      	ldr	r3, [r7, #4]
 80106b0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80106b2:	496a      	ldr	r1, [pc, #424]	@ (801085c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80106b4:	4313      	orrs	r3, r2
 80106b6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80106ba:	687b      	ldr	r3, [r7, #4]
 80106bc:	681b      	ldr	r3, [r3, #0]
 80106be:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80106c2:	2b00      	cmp	r3, #0
 80106c4:	d00a      	beq.n	80106dc <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80106c6:	4b65      	ldr	r3, [pc, #404]	@ (801085c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80106c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80106cc:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 80106d0:	687b      	ldr	r3, [r7, #4]
 80106d2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80106d4:	4961      	ldr	r1, [pc, #388]	@ (801085c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80106d6:	4313      	orrs	r3, r2
 80106d8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80106dc:	687b      	ldr	r3, [r7, #4]
 80106de:	681b      	ldr	r3, [r3, #0]
 80106e0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80106e4:	2b00      	cmp	r3, #0
 80106e6:	d00a      	beq.n	80106fe <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80106e8:	4b5c      	ldr	r3, [pc, #368]	@ (801085c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80106ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80106ee:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80106f2:	687b      	ldr	r3, [r7, #4]
 80106f4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80106f6:	4959      	ldr	r1, [pc, #356]	@ (801085c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80106f8:	4313      	orrs	r3, r2
 80106fa:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80106fe:	687b      	ldr	r3, [r7, #4]
 8010700:	681b      	ldr	r3, [r3, #0]
 8010702:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8010706:	2b00      	cmp	r3, #0
 8010708:	d00a      	beq.n	8010720 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 801070a:	4b54      	ldr	r3, [pc, #336]	@ (801085c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 801070c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8010710:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8010714:	687b      	ldr	r3, [r7, #4]
 8010716:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8010718:	4950      	ldr	r1, [pc, #320]	@ (801085c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 801071a:	4313      	orrs	r3, r2
 801071c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8010720:	687b      	ldr	r3, [r7, #4]
 8010722:	681b      	ldr	r3, [r3, #0]
 8010724:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8010728:	2b00      	cmp	r3, #0
 801072a:	d00a      	beq.n	8010742 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 801072c:	4b4b      	ldr	r3, [pc, #300]	@ (801085c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 801072e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8010732:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8010736:	687b      	ldr	r3, [r7, #4]
 8010738:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801073a:	4948      	ldr	r1, [pc, #288]	@ (801085c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 801073c:	4313      	orrs	r3, r2
 801073e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8010742:	687b      	ldr	r3, [r7, #4]
 8010744:	681b      	ldr	r3, [r3, #0]
 8010746:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 801074a:	2b00      	cmp	r3, #0
 801074c:	d00a      	beq.n	8010764 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 801074e:	4b43      	ldr	r3, [pc, #268]	@ (801085c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8010750:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8010754:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8010758:	687b      	ldr	r3, [r7, #4]
 801075a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 801075c:	493f      	ldr	r1, [pc, #252]	@ (801085c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 801075e:	4313      	orrs	r3, r2
 8010760:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8010764:	687b      	ldr	r3, [r7, #4]
 8010766:	681b      	ldr	r3, [r3, #0]
 8010768:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 801076c:	2b00      	cmp	r3, #0
 801076e:	d028      	beq.n	80107c2 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8010770:	4b3a      	ldr	r3, [pc, #232]	@ (801085c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8010772:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8010776:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 801077a:	687b      	ldr	r3, [r7, #4]
 801077c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801077e:	4937      	ldr	r1, [pc, #220]	@ (801085c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8010780:	4313      	orrs	r3, r2
 8010782:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8010786:	687b      	ldr	r3, [r7, #4]
 8010788:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801078a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 801078e:	d106      	bne.n	801079e <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8010790:	4b32      	ldr	r3, [pc, #200]	@ (801085c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8010792:	68db      	ldr	r3, [r3, #12]
 8010794:	4a31      	ldr	r2, [pc, #196]	@ (801085c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8010796:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 801079a:	60d3      	str	r3, [r2, #12]
 801079c:	e011      	b.n	80107c2 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 801079e:	687b      	ldr	r3, [r7, #4]
 80107a0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80107a2:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80107a6:	d10c      	bne.n	80107c2 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80107a8:	687b      	ldr	r3, [r7, #4]
 80107aa:	3304      	adds	r3, #4
 80107ac:	2101      	movs	r1, #1
 80107ae:	4618      	mov	r0, r3
 80107b0:	f000 f8c8 	bl	8010944 <RCCEx_PLLSAI1_Config>
 80107b4:	4603      	mov	r3, r0
 80107b6:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80107b8:	7cfb      	ldrb	r3, [r7, #19]
 80107ba:	2b00      	cmp	r3, #0
 80107bc:	d001      	beq.n	80107c2 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 80107be:	7cfb      	ldrb	r3, [r7, #19]
 80107c0:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80107c2:	687b      	ldr	r3, [r7, #4]
 80107c4:	681b      	ldr	r3, [r3, #0]
 80107c6:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80107ca:	2b00      	cmp	r3, #0
 80107cc:	d028      	beq.n	8010820 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80107ce:	4b23      	ldr	r3, [pc, #140]	@ (801085c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80107d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80107d4:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80107d8:	687b      	ldr	r3, [r7, #4]
 80107da:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80107dc:	491f      	ldr	r1, [pc, #124]	@ (801085c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80107de:	4313      	orrs	r3, r2
 80107e0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80107e4:	687b      	ldr	r3, [r7, #4]
 80107e6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80107e8:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80107ec:	d106      	bne.n	80107fc <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80107ee:	4b1b      	ldr	r3, [pc, #108]	@ (801085c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80107f0:	68db      	ldr	r3, [r3, #12]
 80107f2:	4a1a      	ldr	r2, [pc, #104]	@ (801085c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80107f4:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80107f8:	60d3      	str	r3, [r2, #12]
 80107fa:	e011      	b.n	8010820 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80107fc:	687b      	ldr	r3, [r7, #4]
 80107fe:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8010800:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8010804:	d10c      	bne.n	8010820 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8010806:	687b      	ldr	r3, [r7, #4]
 8010808:	3304      	adds	r3, #4
 801080a:	2101      	movs	r1, #1
 801080c:	4618      	mov	r0, r3
 801080e:	f000 f899 	bl	8010944 <RCCEx_PLLSAI1_Config>
 8010812:	4603      	mov	r3, r0
 8010814:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8010816:	7cfb      	ldrb	r3, [r7, #19]
 8010818:	2b00      	cmp	r3, #0
 801081a:	d001      	beq.n	8010820 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 801081c:	7cfb      	ldrb	r3, [r7, #19]
 801081e:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8010820:	687b      	ldr	r3, [r7, #4]
 8010822:	681b      	ldr	r3, [r3, #0]
 8010824:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8010828:	2b00      	cmp	r3, #0
 801082a:	d02b      	beq.n	8010884 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 801082c:	4b0b      	ldr	r3, [pc, #44]	@ (801085c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 801082e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8010832:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8010836:	687b      	ldr	r3, [r7, #4]
 8010838:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801083a:	4908      	ldr	r1, [pc, #32]	@ (801085c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 801083c:	4313      	orrs	r3, r2
 801083e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8010842:	687b      	ldr	r3, [r7, #4]
 8010844:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8010846:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 801084a:	d109      	bne.n	8010860 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 801084c:	4b03      	ldr	r3, [pc, #12]	@ (801085c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 801084e:	68db      	ldr	r3, [r3, #12]
 8010850:	4a02      	ldr	r2, [pc, #8]	@ (801085c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8010852:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8010856:	60d3      	str	r3, [r2, #12]
 8010858:	e014      	b.n	8010884 <HAL_RCCEx_PeriphCLKConfig+0x514>
 801085a:	bf00      	nop
 801085c:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8010860:	687b      	ldr	r3, [r7, #4]
 8010862:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8010864:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8010868:	d10c      	bne.n	8010884 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 801086a:	687b      	ldr	r3, [r7, #4]
 801086c:	3304      	adds	r3, #4
 801086e:	2101      	movs	r1, #1
 8010870:	4618      	mov	r0, r3
 8010872:	f000 f867 	bl	8010944 <RCCEx_PLLSAI1_Config>
 8010876:	4603      	mov	r3, r0
 8010878:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 801087a:	7cfb      	ldrb	r3, [r7, #19]
 801087c:	2b00      	cmp	r3, #0
 801087e:	d001      	beq.n	8010884 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8010880:	7cfb      	ldrb	r3, [r7, #19]
 8010882:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8010884:	687b      	ldr	r3, [r7, #4]
 8010886:	681b      	ldr	r3, [r3, #0]
 8010888:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 801088c:	2b00      	cmp	r3, #0
 801088e:	d02f      	beq.n	80108f0 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8010890:	4b2b      	ldr	r3, [pc, #172]	@ (8010940 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8010892:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8010896:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 801089a:	687b      	ldr	r3, [r7, #4]
 801089c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 801089e:	4928      	ldr	r1, [pc, #160]	@ (8010940 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80108a0:	4313      	orrs	r3, r2
 80108a2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80108a6:	687b      	ldr	r3, [r7, #4]
 80108a8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80108aa:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80108ae:	d10d      	bne.n	80108cc <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80108b0:	687b      	ldr	r3, [r7, #4]
 80108b2:	3304      	adds	r3, #4
 80108b4:	2102      	movs	r1, #2
 80108b6:	4618      	mov	r0, r3
 80108b8:	f000 f844 	bl	8010944 <RCCEx_PLLSAI1_Config>
 80108bc:	4603      	mov	r3, r0
 80108be:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80108c0:	7cfb      	ldrb	r3, [r7, #19]
 80108c2:	2b00      	cmp	r3, #0
 80108c4:	d014      	beq.n	80108f0 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80108c6:	7cfb      	ldrb	r3, [r7, #19]
 80108c8:	74bb      	strb	r3, [r7, #18]
 80108ca:	e011      	b.n	80108f0 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 80108cc:	687b      	ldr	r3, [r7, #4]
 80108ce:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80108d0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80108d4:	d10c      	bne.n	80108f0 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 80108d6:	687b      	ldr	r3, [r7, #4]
 80108d8:	3320      	adds	r3, #32
 80108da:	2102      	movs	r1, #2
 80108dc:	4618      	mov	r0, r3
 80108de:	f000 f925 	bl	8010b2c <RCCEx_PLLSAI2_Config>
 80108e2:	4603      	mov	r3, r0
 80108e4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80108e6:	7cfb      	ldrb	r3, [r7, #19]
 80108e8:	2b00      	cmp	r3, #0
 80108ea:	d001      	beq.n	80108f0 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80108ec:	7cfb      	ldrb	r3, [r7, #19]
 80108ee:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80108f0:	687b      	ldr	r3, [r7, #4]
 80108f2:	681b      	ldr	r3, [r3, #0]
 80108f4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80108f8:	2b00      	cmp	r3, #0
 80108fa:	d00a      	beq.n	8010912 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80108fc:	4b10      	ldr	r3, [pc, #64]	@ (8010940 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80108fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8010902:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 8010906:	687b      	ldr	r3, [r7, #4]
 8010908:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 801090a:	490d      	ldr	r1, [pc, #52]	@ (8010940 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 801090c:	4313      	orrs	r3, r2
 801090e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8010912:	687b      	ldr	r3, [r7, #4]
 8010914:	681b      	ldr	r3, [r3, #0]
 8010916:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 801091a:	2b00      	cmp	r3, #0
 801091c:	d00b      	beq.n	8010936 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 801091e:	4b08      	ldr	r3, [pc, #32]	@ (8010940 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8010920:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8010924:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8010928:	687b      	ldr	r3, [r7, #4]
 801092a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 801092e:	4904      	ldr	r1, [pc, #16]	@ (8010940 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8010930:	4313      	orrs	r3, r2
 8010932:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8010936:	7cbb      	ldrb	r3, [r7, #18]
}
 8010938:	4618      	mov	r0, r3
 801093a:	3718      	adds	r7, #24
 801093c:	46bd      	mov	sp, r7
 801093e:	bd80      	pop	{r7, pc}
 8010940:	40021000 	.word	0x40021000

08010944 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8010944:	b580      	push	{r7, lr}
 8010946:	b084      	sub	sp, #16
 8010948:	af00      	add	r7, sp, #0
 801094a:	6078      	str	r0, [r7, #4]
 801094c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 801094e:	2300      	movs	r3, #0
 8010950:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8010952:	4b75      	ldr	r3, [pc, #468]	@ (8010b28 <RCCEx_PLLSAI1_Config+0x1e4>)
 8010954:	68db      	ldr	r3, [r3, #12]
 8010956:	f003 0303 	and.w	r3, r3, #3
 801095a:	2b00      	cmp	r3, #0
 801095c:	d018      	beq.n	8010990 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 801095e:	4b72      	ldr	r3, [pc, #456]	@ (8010b28 <RCCEx_PLLSAI1_Config+0x1e4>)
 8010960:	68db      	ldr	r3, [r3, #12]
 8010962:	f003 0203 	and.w	r2, r3, #3
 8010966:	687b      	ldr	r3, [r7, #4]
 8010968:	681b      	ldr	r3, [r3, #0]
 801096a:	429a      	cmp	r2, r3
 801096c:	d10d      	bne.n	801098a <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 801096e:	687b      	ldr	r3, [r7, #4]
 8010970:	681b      	ldr	r3, [r3, #0]
       ||
 8010972:	2b00      	cmp	r3, #0
 8010974:	d009      	beq.n	801098a <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8010976:	4b6c      	ldr	r3, [pc, #432]	@ (8010b28 <RCCEx_PLLSAI1_Config+0x1e4>)
 8010978:	68db      	ldr	r3, [r3, #12]
 801097a:	091b      	lsrs	r3, r3, #4
 801097c:	f003 0307 	and.w	r3, r3, #7
 8010980:	1c5a      	adds	r2, r3, #1
 8010982:	687b      	ldr	r3, [r7, #4]
 8010984:	685b      	ldr	r3, [r3, #4]
       ||
 8010986:	429a      	cmp	r2, r3
 8010988:	d047      	beq.n	8010a1a <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 801098a:	2301      	movs	r3, #1
 801098c:	73fb      	strb	r3, [r7, #15]
 801098e:	e044      	b.n	8010a1a <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8010990:	687b      	ldr	r3, [r7, #4]
 8010992:	681b      	ldr	r3, [r3, #0]
 8010994:	2b03      	cmp	r3, #3
 8010996:	d018      	beq.n	80109ca <RCCEx_PLLSAI1_Config+0x86>
 8010998:	2b03      	cmp	r3, #3
 801099a:	d825      	bhi.n	80109e8 <RCCEx_PLLSAI1_Config+0xa4>
 801099c:	2b01      	cmp	r3, #1
 801099e:	d002      	beq.n	80109a6 <RCCEx_PLLSAI1_Config+0x62>
 80109a0:	2b02      	cmp	r3, #2
 80109a2:	d009      	beq.n	80109b8 <RCCEx_PLLSAI1_Config+0x74>
 80109a4:	e020      	b.n	80109e8 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80109a6:	4b60      	ldr	r3, [pc, #384]	@ (8010b28 <RCCEx_PLLSAI1_Config+0x1e4>)
 80109a8:	681b      	ldr	r3, [r3, #0]
 80109aa:	f003 0302 	and.w	r3, r3, #2
 80109ae:	2b00      	cmp	r3, #0
 80109b0:	d11d      	bne.n	80109ee <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 80109b2:	2301      	movs	r3, #1
 80109b4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80109b6:	e01a      	b.n	80109ee <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80109b8:	4b5b      	ldr	r3, [pc, #364]	@ (8010b28 <RCCEx_PLLSAI1_Config+0x1e4>)
 80109ba:	681b      	ldr	r3, [r3, #0]
 80109bc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80109c0:	2b00      	cmp	r3, #0
 80109c2:	d116      	bne.n	80109f2 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 80109c4:	2301      	movs	r3, #1
 80109c6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80109c8:	e013      	b.n	80109f2 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80109ca:	4b57      	ldr	r3, [pc, #348]	@ (8010b28 <RCCEx_PLLSAI1_Config+0x1e4>)
 80109cc:	681b      	ldr	r3, [r3, #0]
 80109ce:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80109d2:	2b00      	cmp	r3, #0
 80109d4:	d10f      	bne.n	80109f6 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80109d6:	4b54      	ldr	r3, [pc, #336]	@ (8010b28 <RCCEx_PLLSAI1_Config+0x1e4>)
 80109d8:	681b      	ldr	r3, [r3, #0]
 80109da:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80109de:	2b00      	cmp	r3, #0
 80109e0:	d109      	bne.n	80109f6 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 80109e2:	2301      	movs	r3, #1
 80109e4:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80109e6:	e006      	b.n	80109f6 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 80109e8:	2301      	movs	r3, #1
 80109ea:	73fb      	strb	r3, [r7, #15]
      break;
 80109ec:	e004      	b.n	80109f8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80109ee:	bf00      	nop
 80109f0:	e002      	b.n	80109f8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80109f2:	bf00      	nop
 80109f4:	e000      	b.n	80109f8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80109f6:	bf00      	nop
    }

    if(status == HAL_OK)
 80109f8:	7bfb      	ldrb	r3, [r7, #15]
 80109fa:	2b00      	cmp	r3, #0
 80109fc:	d10d      	bne.n	8010a1a <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80109fe:	4b4a      	ldr	r3, [pc, #296]	@ (8010b28 <RCCEx_PLLSAI1_Config+0x1e4>)
 8010a00:	68db      	ldr	r3, [r3, #12]
 8010a02:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8010a06:	687b      	ldr	r3, [r7, #4]
 8010a08:	6819      	ldr	r1, [r3, #0]
 8010a0a:	687b      	ldr	r3, [r7, #4]
 8010a0c:	685b      	ldr	r3, [r3, #4]
 8010a0e:	3b01      	subs	r3, #1
 8010a10:	011b      	lsls	r3, r3, #4
 8010a12:	430b      	orrs	r3, r1
 8010a14:	4944      	ldr	r1, [pc, #272]	@ (8010b28 <RCCEx_PLLSAI1_Config+0x1e4>)
 8010a16:	4313      	orrs	r3, r2
 8010a18:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8010a1a:	7bfb      	ldrb	r3, [r7, #15]
 8010a1c:	2b00      	cmp	r3, #0
 8010a1e:	d17d      	bne.n	8010b1c <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8010a20:	4b41      	ldr	r3, [pc, #260]	@ (8010b28 <RCCEx_PLLSAI1_Config+0x1e4>)
 8010a22:	681b      	ldr	r3, [r3, #0]
 8010a24:	4a40      	ldr	r2, [pc, #256]	@ (8010b28 <RCCEx_PLLSAI1_Config+0x1e4>)
 8010a26:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8010a2a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8010a2c:	f7fa f9e4 	bl	800adf8 <HAL_GetTick>
 8010a30:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8010a32:	e009      	b.n	8010a48 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8010a34:	f7fa f9e0 	bl	800adf8 <HAL_GetTick>
 8010a38:	4602      	mov	r2, r0
 8010a3a:	68bb      	ldr	r3, [r7, #8]
 8010a3c:	1ad3      	subs	r3, r2, r3
 8010a3e:	2b02      	cmp	r3, #2
 8010a40:	d902      	bls.n	8010a48 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8010a42:	2303      	movs	r3, #3
 8010a44:	73fb      	strb	r3, [r7, #15]
        break;
 8010a46:	e005      	b.n	8010a54 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8010a48:	4b37      	ldr	r3, [pc, #220]	@ (8010b28 <RCCEx_PLLSAI1_Config+0x1e4>)
 8010a4a:	681b      	ldr	r3, [r3, #0]
 8010a4c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8010a50:	2b00      	cmp	r3, #0
 8010a52:	d1ef      	bne.n	8010a34 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8010a54:	7bfb      	ldrb	r3, [r7, #15]
 8010a56:	2b00      	cmp	r3, #0
 8010a58:	d160      	bne.n	8010b1c <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8010a5a:	683b      	ldr	r3, [r7, #0]
 8010a5c:	2b00      	cmp	r3, #0
 8010a5e:	d111      	bne.n	8010a84 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8010a60:	4b31      	ldr	r3, [pc, #196]	@ (8010b28 <RCCEx_PLLSAI1_Config+0x1e4>)
 8010a62:	691b      	ldr	r3, [r3, #16]
 8010a64:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8010a68:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8010a6c:	687a      	ldr	r2, [r7, #4]
 8010a6e:	6892      	ldr	r2, [r2, #8]
 8010a70:	0211      	lsls	r1, r2, #8
 8010a72:	687a      	ldr	r2, [r7, #4]
 8010a74:	68d2      	ldr	r2, [r2, #12]
 8010a76:	0912      	lsrs	r2, r2, #4
 8010a78:	0452      	lsls	r2, r2, #17
 8010a7a:	430a      	orrs	r2, r1
 8010a7c:	492a      	ldr	r1, [pc, #168]	@ (8010b28 <RCCEx_PLLSAI1_Config+0x1e4>)
 8010a7e:	4313      	orrs	r3, r2
 8010a80:	610b      	str	r3, [r1, #16]
 8010a82:	e027      	b.n	8010ad4 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8010a84:	683b      	ldr	r3, [r7, #0]
 8010a86:	2b01      	cmp	r3, #1
 8010a88:	d112      	bne.n	8010ab0 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8010a8a:	4b27      	ldr	r3, [pc, #156]	@ (8010b28 <RCCEx_PLLSAI1_Config+0x1e4>)
 8010a8c:	691b      	ldr	r3, [r3, #16]
 8010a8e:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 8010a92:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8010a96:	687a      	ldr	r2, [r7, #4]
 8010a98:	6892      	ldr	r2, [r2, #8]
 8010a9a:	0211      	lsls	r1, r2, #8
 8010a9c:	687a      	ldr	r2, [r7, #4]
 8010a9e:	6912      	ldr	r2, [r2, #16]
 8010aa0:	0852      	lsrs	r2, r2, #1
 8010aa2:	3a01      	subs	r2, #1
 8010aa4:	0552      	lsls	r2, r2, #21
 8010aa6:	430a      	orrs	r2, r1
 8010aa8:	491f      	ldr	r1, [pc, #124]	@ (8010b28 <RCCEx_PLLSAI1_Config+0x1e4>)
 8010aaa:	4313      	orrs	r3, r2
 8010aac:	610b      	str	r3, [r1, #16]
 8010aae:	e011      	b.n	8010ad4 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8010ab0:	4b1d      	ldr	r3, [pc, #116]	@ (8010b28 <RCCEx_PLLSAI1_Config+0x1e4>)
 8010ab2:	691b      	ldr	r3, [r3, #16]
 8010ab4:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8010ab8:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8010abc:	687a      	ldr	r2, [r7, #4]
 8010abe:	6892      	ldr	r2, [r2, #8]
 8010ac0:	0211      	lsls	r1, r2, #8
 8010ac2:	687a      	ldr	r2, [r7, #4]
 8010ac4:	6952      	ldr	r2, [r2, #20]
 8010ac6:	0852      	lsrs	r2, r2, #1
 8010ac8:	3a01      	subs	r2, #1
 8010aca:	0652      	lsls	r2, r2, #25
 8010acc:	430a      	orrs	r2, r1
 8010ace:	4916      	ldr	r1, [pc, #88]	@ (8010b28 <RCCEx_PLLSAI1_Config+0x1e4>)
 8010ad0:	4313      	orrs	r3, r2
 8010ad2:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8010ad4:	4b14      	ldr	r3, [pc, #80]	@ (8010b28 <RCCEx_PLLSAI1_Config+0x1e4>)
 8010ad6:	681b      	ldr	r3, [r3, #0]
 8010ad8:	4a13      	ldr	r2, [pc, #76]	@ (8010b28 <RCCEx_PLLSAI1_Config+0x1e4>)
 8010ada:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8010ade:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8010ae0:	f7fa f98a 	bl	800adf8 <HAL_GetTick>
 8010ae4:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8010ae6:	e009      	b.n	8010afc <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8010ae8:	f7fa f986 	bl	800adf8 <HAL_GetTick>
 8010aec:	4602      	mov	r2, r0
 8010aee:	68bb      	ldr	r3, [r7, #8]
 8010af0:	1ad3      	subs	r3, r2, r3
 8010af2:	2b02      	cmp	r3, #2
 8010af4:	d902      	bls.n	8010afc <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8010af6:	2303      	movs	r3, #3
 8010af8:	73fb      	strb	r3, [r7, #15]
          break;
 8010afa:	e005      	b.n	8010b08 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8010afc:	4b0a      	ldr	r3, [pc, #40]	@ (8010b28 <RCCEx_PLLSAI1_Config+0x1e4>)
 8010afe:	681b      	ldr	r3, [r3, #0]
 8010b00:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8010b04:	2b00      	cmp	r3, #0
 8010b06:	d0ef      	beq.n	8010ae8 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8010b08:	7bfb      	ldrb	r3, [r7, #15]
 8010b0a:	2b00      	cmp	r3, #0
 8010b0c:	d106      	bne.n	8010b1c <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8010b0e:	4b06      	ldr	r3, [pc, #24]	@ (8010b28 <RCCEx_PLLSAI1_Config+0x1e4>)
 8010b10:	691a      	ldr	r2, [r3, #16]
 8010b12:	687b      	ldr	r3, [r7, #4]
 8010b14:	699b      	ldr	r3, [r3, #24]
 8010b16:	4904      	ldr	r1, [pc, #16]	@ (8010b28 <RCCEx_PLLSAI1_Config+0x1e4>)
 8010b18:	4313      	orrs	r3, r2
 8010b1a:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8010b1c:	7bfb      	ldrb	r3, [r7, #15]
}
 8010b1e:	4618      	mov	r0, r3
 8010b20:	3710      	adds	r7, #16
 8010b22:	46bd      	mov	sp, r7
 8010b24:	bd80      	pop	{r7, pc}
 8010b26:	bf00      	nop
 8010b28:	40021000 	.word	0x40021000

08010b2c <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8010b2c:	b580      	push	{r7, lr}
 8010b2e:	b084      	sub	sp, #16
 8010b30:	af00      	add	r7, sp, #0
 8010b32:	6078      	str	r0, [r7, #4]
 8010b34:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8010b36:	2300      	movs	r3, #0
 8010b38:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8010b3a:	4b6a      	ldr	r3, [pc, #424]	@ (8010ce4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8010b3c:	68db      	ldr	r3, [r3, #12]
 8010b3e:	f003 0303 	and.w	r3, r3, #3
 8010b42:	2b00      	cmp	r3, #0
 8010b44:	d018      	beq.n	8010b78 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8010b46:	4b67      	ldr	r3, [pc, #412]	@ (8010ce4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8010b48:	68db      	ldr	r3, [r3, #12]
 8010b4a:	f003 0203 	and.w	r2, r3, #3
 8010b4e:	687b      	ldr	r3, [r7, #4]
 8010b50:	681b      	ldr	r3, [r3, #0]
 8010b52:	429a      	cmp	r2, r3
 8010b54:	d10d      	bne.n	8010b72 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8010b56:	687b      	ldr	r3, [r7, #4]
 8010b58:	681b      	ldr	r3, [r3, #0]
       ||
 8010b5a:	2b00      	cmp	r3, #0
 8010b5c:	d009      	beq.n	8010b72 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8010b5e:	4b61      	ldr	r3, [pc, #388]	@ (8010ce4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8010b60:	68db      	ldr	r3, [r3, #12]
 8010b62:	091b      	lsrs	r3, r3, #4
 8010b64:	f003 0307 	and.w	r3, r3, #7
 8010b68:	1c5a      	adds	r2, r3, #1
 8010b6a:	687b      	ldr	r3, [r7, #4]
 8010b6c:	685b      	ldr	r3, [r3, #4]
       ||
 8010b6e:	429a      	cmp	r2, r3
 8010b70:	d047      	beq.n	8010c02 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8010b72:	2301      	movs	r3, #1
 8010b74:	73fb      	strb	r3, [r7, #15]
 8010b76:	e044      	b.n	8010c02 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8010b78:	687b      	ldr	r3, [r7, #4]
 8010b7a:	681b      	ldr	r3, [r3, #0]
 8010b7c:	2b03      	cmp	r3, #3
 8010b7e:	d018      	beq.n	8010bb2 <RCCEx_PLLSAI2_Config+0x86>
 8010b80:	2b03      	cmp	r3, #3
 8010b82:	d825      	bhi.n	8010bd0 <RCCEx_PLLSAI2_Config+0xa4>
 8010b84:	2b01      	cmp	r3, #1
 8010b86:	d002      	beq.n	8010b8e <RCCEx_PLLSAI2_Config+0x62>
 8010b88:	2b02      	cmp	r3, #2
 8010b8a:	d009      	beq.n	8010ba0 <RCCEx_PLLSAI2_Config+0x74>
 8010b8c:	e020      	b.n	8010bd0 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8010b8e:	4b55      	ldr	r3, [pc, #340]	@ (8010ce4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8010b90:	681b      	ldr	r3, [r3, #0]
 8010b92:	f003 0302 	and.w	r3, r3, #2
 8010b96:	2b00      	cmp	r3, #0
 8010b98:	d11d      	bne.n	8010bd6 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8010b9a:	2301      	movs	r3, #1
 8010b9c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8010b9e:	e01a      	b.n	8010bd6 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8010ba0:	4b50      	ldr	r3, [pc, #320]	@ (8010ce4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8010ba2:	681b      	ldr	r3, [r3, #0]
 8010ba4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8010ba8:	2b00      	cmp	r3, #0
 8010baa:	d116      	bne.n	8010bda <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8010bac:	2301      	movs	r3, #1
 8010bae:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8010bb0:	e013      	b.n	8010bda <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8010bb2:	4b4c      	ldr	r3, [pc, #304]	@ (8010ce4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8010bb4:	681b      	ldr	r3, [r3, #0]
 8010bb6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8010bba:	2b00      	cmp	r3, #0
 8010bbc:	d10f      	bne.n	8010bde <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8010bbe:	4b49      	ldr	r3, [pc, #292]	@ (8010ce4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8010bc0:	681b      	ldr	r3, [r3, #0]
 8010bc2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8010bc6:	2b00      	cmp	r3, #0
 8010bc8:	d109      	bne.n	8010bde <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8010bca:	2301      	movs	r3, #1
 8010bcc:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8010bce:	e006      	b.n	8010bde <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8010bd0:	2301      	movs	r3, #1
 8010bd2:	73fb      	strb	r3, [r7, #15]
      break;
 8010bd4:	e004      	b.n	8010be0 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8010bd6:	bf00      	nop
 8010bd8:	e002      	b.n	8010be0 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8010bda:	bf00      	nop
 8010bdc:	e000      	b.n	8010be0 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8010bde:	bf00      	nop
    }

    if(status == HAL_OK)
 8010be0:	7bfb      	ldrb	r3, [r7, #15]
 8010be2:	2b00      	cmp	r3, #0
 8010be4:	d10d      	bne.n	8010c02 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8010be6:	4b3f      	ldr	r3, [pc, #252]	@ (8010ce4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8010be8:	68db      	ldr	r3, [r3, #12]
 8010bea:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8010bee:	687b      	ldr	r3, [r7, #4]
 8010bf0:	6819      	ldr	r1, [r3, #0]
 8010bf2:	687b      	ldr	r3, [r7, #4]
 8010bf4:	685b      	ldr	r3, [r3, #4]
 8010bf6:	3b01      	subs	r3, #1
 8010bf8:	011b      	lsls	r3, r3, #4
 8010bfa:	430b      	orrs	r3, r1
 8010bfc:	4939      	ldr	r1, [pc, #228]	@ (8010ce4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8010bfe:	4313      	orrs	r3, r2
 8010c00:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8010c02:	7bfb      	ldrb	r3, [r7, #15]
 8010c04:	2b00      	cmp	r3, #0
 8010c06:	d167      	bne.n	8010cd8 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8010c08:	4b36      	ldr	r3, [pc, #216]	@ (8010ce4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8010c0a:	681b      	ldr	r3, [r3, #0]
 8010c0c:	4a35      	ldr	r2, [pc, #212]	@ (8010ce4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8010c0e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8010c12:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8010c14:	f7fa f8f0 	bl	800adf8 <HAL_GetTick>
 8010c18:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8010c1a:	e009      	b.n	8010c30 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8010c1c:	f7fa f8ec 	bl	800adf8 <HAL_GetTick>
 8010c20:	4602      	mov	r2, r0
 8010c22:	68bb      	ldr	r3, [r7, #8]
 8010c24:	1ad3      	subs	r3, r2, r3
 8010c26:	2b02      	cmp	r3, #2
 8010c28:	d902      	bls.n	8010c30 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8010c2a:	2303      	movs	r3, #3
 8010c2c:	73fb      	strb	r3, [r7, #15]
        break;
 8010c2e:	e005      	b.n	8010c3c <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8010c30:	4b2c      	ldr	r3, [pc, #176]	@ (8010ce4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8010c32:	681b      	ldr	r3, [r3, #0]
 8010c34:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8010c38:	2b00      	cmp	r3, #0
 8010c3a:	d1ef      	bne.n	8010c1c <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8010c3c:	7bfb      	ldrb	r3, [r7, #15]
 8010c3e:	2b00      	cmp	r3, #0
 8010c40:	d14a      	bne.n	8010cd8 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8010c42:	683b      	ldr	r3, [r7, #0]
 8010c44:	2b00      	cmp	r3, #0
 8010c46:	d111      	bne.n	8010c6c <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8010c48:	4b26      	ldr	r3, [pc, #152]	@ (8010ce4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8010c4a:	695b      	ldr	r3, [r3, #20]
 8010c4c:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8010c50:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8010c54:	687a      	ldr	r2, [r7, #4]
 8010c56:	6892      	ldr	r2, [r2, #8]
 8010c58:	0211      	lsls	r1, r2, #8
 8010c5a:	687a      	ldr	r2, [r7, #4]
 8010c5c:	68d2      	ldr	r2, [r2, #12]
 8010c5e:	0912      	lsrs	r2, r2, #4
 8010c60:	0452      	lsls	r2, r2, #17
 8010c62:	430a      	orrs	r2, r1
 8010c64:	491f      	ldr	r1, [pc, #124]	@ (8010ce4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8010c66:	4313      	orrs	r3, r2
 8010c68:	614b      	str	r3, [r1, #20]
 8010c6a:	e011      	b.n	8010c90 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8010c6c:	4b1d      	ldr	r3, [pc, #116]	@ (8010ce4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8010c6e:	695b      	ldr	r3, [r3, #20]
 8010c70:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8010c74:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8010c78:	687a      	ldr	r2, [r7, #4]
 8010c7a:	6892      	ldr	r2, [r2, #8]
 8010c7c:	0211      	lsls	r1, r2, #8
 8010c7e:	687a      	ldr	r2, [r7, #4]
 8010c80:	6912      	ldr	r2, [r2, #16]
 8010c82:	0852      	lsrs	r2, r2, #1
 8010c84:	3a01      	subs	r2, #1
 8010c86:	0652      	lsls	r2, r2, #25
 8010c88:	430a      	orrs	r2, r1
 8010c8a:	4916      	ldr	r1, [pc, #88]	@ (8010ce4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8010c8c:	4313      	orrs	r3, r2
 8010c8e:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8010c90:	4b14      	ldr	r3, [pc, #80]	@ (8010ce4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8010c92:	681b      	ldr	r3, [r3, #0]
 8010c94:	4a13      	ldr	r2, [pc, #76]	@ (8010ce4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8010c96:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8010c9a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8010c9c:	f7fa f8ac 	bl	800adf8 <HAL_GetTick>
 8010ca0:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8010ca2:	e009      	b.n	8010cb8 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8010ca4:	f7fa f8a8 	bl	800adf8 <HAL_GetTick>
 8010ca8:	4602      	mov	r2, r0
 8010caa:	68bb      	ldr	r3, [r7, #8]
 8010cac:	1ad3      	subs	r3, r2, r3
 8010cae:	2b02      	cmp	r3, #2
 8010cb0:	d902      	bls.n	8010cb8 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8010cb2:	2303      	movs	r3, #3
 8010cb4:	73fb      	strb	r3, [r7, #15]
          break;
 8010cb6:	e005      	b.n	8010cc4 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8010cb8:	4b0a      	ldr	r3, [pc, #40]	@ (8010ce4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8010cba:	681b      	ldr	r3, [r3, #0]
 8010cbc:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8010cc0:	2b00      	cmp	r3, #0
 8010cc2:	d0ef      	beq.n	8010ca4 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8010cc4:	7bfb      	ldrb	r3, [r7, #15]
 8010cc6:	2b00      	cmp	r3, #0
 8010cc8:	d106      	bne.n	8010cd8 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8010cca:	4b06      	ldr	r3, [pc, #24]	@ (8010ce4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8010ccc:	695a      	ldr	r2, [r3, #20]
 8010cce:	687b      	ldr	r3, [r7, #4]
 8010cd0:	695b      	ldr	r3, [r3, #20]
 8010cd2:	4904      	ldr	r1, [pc, #16]	@ (8010ce4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8010cd4:	4313      	orrs	r3, r2
 8010cd6:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8010cd8:	7bfb      	ldrb	r3, [r7, #15]
}
 8010cda:	4618      	mov	r0, r3
 8010cdc:	3710      	adds	r7, #16
 8010cde:	46bd      	mov	sp, r7
 8010ce0:	bd80      	pop	{r7, pc}
 8010ce2:	bf00      	nop
 8010ce4:	40021000 	.word	0x40021000

08010ce8 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8010ce8:	b580      	push	{r7, lr}
 8010cea:	b084      	sub	sp, #16
 8010cec:	af00      	add	r7, sp, #0
 8010cee:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8010cf0:	2301      	movs	r3, #1
 8010cf2:	73fb      	strb	r3, [r7, #15]

  /* Check the RTC peripheral state */
  if (hrtc != NULL)
 8010cf4:	687b      	ldr	r3, [r7, #4]
 8010cf6:	2b00      	cmp	r3, #0
 8010cf8:	d079      	beq.n	8010dee <HAL_RTC_Init+0x106>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else /* #if (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */
    if (hrtc->State == HAL_RTC_STATE_RESET)
 8010cfa:	687b      	ldr	r3, [r7, #4]
 8010cfc:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8010d00:	b2db      	uxtb	r3, r3
 8010d02:	2b00      	cmp	r3, #0
 8010d04:	d106      	bne.n	8010d14 <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 8010d06:	687b      	ldr	r3, [r7, #4]
 8010d08:	2200      	movs	r2, #0
 8010d0a:	f883 2020 	strb.w	r2, [r3, #32]

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 8010d0e:	6878      	ldr	r0, [r7, #4]
 8010d10:	f7f6 fc0e 	bl	8007530 <HAL_RTC_MspInit>
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
    /* Process TAMP ip offset from RTC one */
    hrtc->TampOffset = (TAMP_BASE - RTC_BASE);
#endif
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 8010d14:	687b      	ldr	r3, [r7, #4]
 8010d16:	2202      	movs	r2, #2
 8010d18:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Check whether the calendar needs to be initialized */
    if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 8010d1c:	687b      	ldr	r3, [r7, #4]
 8010d1e:	681b      	ldr	r3, [r3, #0]
 8010d20:	68db      	ldr	r3, [r3, #12]
 8010d22:	f003 0310 	and.w	r3, r3, #16
 8010d26:	2b10      	cmp	r3, #16
 8010d28:	d058      	beq.n	8010ddc <HAL_RTC_Init+0xf4>
    {
      /* Disable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8010d2a:	687b      	ldr	r3, [r7, #4]
 8010d2c:	681b      	ldr	r3, [r3, #0]
 8010d2e:	22ca      	movs	r2, #202	@ 0xca
 8010d30:	625a      	str	r2, [r3, #36]	@ 0x24
 8010d32:	687b      	ldr	r3, [r7, #4]
 8010d34:	681b      	ldr	r3, [r3, #0]
 8010d36:	2253      	movs	r2, #83	@ 0x53
 8010d38:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Enter Initialization mode */
      status = RTC_EnterInitMode(hrtc);
 8010d3a:	6878      	ldr	r0, [r7, #4]
 8010d3c:	f000 fb82 	bl	8011444 <RTC_EnterInitMode>
 8010d40:	4603      	mov	r3, r0
 8010d42:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 8010d44:	7bfb      	ldrb	r3, [r7, #15]
 8010d46:	2b00      	cmp	r3, #0
 8010d48:	d127      	bne.n	8010d9a <HAL_RTC_Init+0xb2>
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
        /* Clear RTC_CR FMT, OSEL, POL and TAMPOE Bits */
        hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
#else
        /* Clear RTC_CR FMT, OSEL and POL Bits */
        hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL);
 8010d4a:	687b      	ldr	r3, [r7, #4]
 8010d4c:	681b      	ldr	r3, [r3, #0]
 8010d4e:	689b      	ldr	r3, [r3, #8]
 8010d50:	687a      	ldr	r2, [r7, #4]
 8010d52:	6812      	ldr	r2, [r2, #0]
 8010d54:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 8010d58:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8010d5c:	6093      	str	r3, [r2, #8]
#endif
        /* Set RTC_CR register */
        hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8010d5e:	687b      	ldr	r3, [r7, #4]
 8010d60:	681b      	ldr	r3, [r3, #0]
 8010d62:	6899      	ldr	r1, [r3, #8]
 8010d64:	687b      	ldr	r3, [r7, #4]
 8010d66:	685a      	ldr	r2, [r3, #4]
 8010d68:	687b      	ldr	r3, [r7, #4]
 8010d6a:	691b      	ldr	r3, [r3, #16]
 8010d6c:	431a      	orrs	r2, r3
 8010d6e:	687b      	ldr	r3, [r7, #4]
 8010d70:	699b      	ldr	r3, [r3, #24]
 8010d72:	431a      	orrs	r2, r3
 8010d74:	687b      	ldr	r3, [r7, #4]
 8010d76:	681b      	ldr	r3, [r3, #0]
 8010d78:	430a      	orrs	r2, r1
 8010d7a:	609a      	str	r2, [r3, #8]

        /* Configure the RTC PRER */
        hrtc->Instance->PRER = (hrtc->Init.SynchPrediv);
 8010d7c:	687b      	ldr	r3, [r7, #4]
 8010d7e:	681b      	ldr	r3, [r3, #0]
 8010d80:	687a      	ldr	r2, [r7, #4]
 8010d82:	68d2      	ldr	r2, [r2, #12]
 8010d84:	611a      	str	r2, [r3, #16]
        hrtc->Instance->PRER |= (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8010d86:	687b      	ldr	r3, [r7, #4]
 8010d88:	681b      	ldr	r3, [r3, #0]
 8010d8a:	6919      	ldr	r1, [r3, #16]
 8010d8c:	687b      	ldr	r3, [r7, #4]
 8010d8e:	689b      	ldr	r3, [r3, #8]
 8010d90:	041a      	lsls	r2, r3, #16
 8010d92:	687b      	ldr	r3, [r7, #4]
 8010d94:	681b      	ldr	r3, [r3, #0]
 8010d96:	430a      	orrs	r2, r1
 8010d98:	611a      	str	r2, [r3, #16]
        MODIFY_REG(RTC->ICSR, RTC_ICSR_BIN | RTC_ICSR_BCDU, hrtc->Init.BinMode | hrtc->Init.BinMixBcdU);
#endif
      }

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 8010d9a:	6878      	ldr	r0, [r7, #4]
 8010d9c:	f000 fb86 	bl	80114ac <RTC_ExitInitMode>
 8010da0:	4603      	mov	r3, r0
 8010da2:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 8010da4:	7bfb      	ldrb	r3, [r7, #15]
 8010da6:	2b00      	cmp	r3, #0
 8010da8:	d113      	bne.n	8010dd2 <HAL_RTC_Init+0xea>
      {
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU | RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
#else
        hrtc->Instance->OR &= ~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 8010daa:	687b      	ldr	r3, [r7, #4]
 8010dac:	681b      	ldr	r3, [r3, #0]
 8010dae:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8010db0:	687b      	ldr	r3, [r7, #4]
 8010db2:	681b      	ldr	r3, [r3, #0]
 8010db4:	f022 0203 	bic.w	r2, r2, #3
 8010db8:	64da      	str	r2, [r3, #76]	@ 0x4c
        hrtc->Instance->OR |= (hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 8010dba:	687b      	ldr	r3, [r7, #4]
 8010dbc:	681b      	ldr	r3, [r3, #0]
 8010dbe:	6cd9      	ldr	r1, [r3, #76]	@ 0x4c
 8010dc0:	687b      	ldr	r3, [r7, #4]
 8010dc2:	69da      	ldr	r2, [r3, #28]
 8010dc4:	687b      	ldr	r3, [r7, #4]
 8010dc6:	695b      	ldr	r3, [r3, #20]
 8010dc8:	431a      	orrs	r2, r3
 8010dca:	687b      	ldr	r3, [r7, #4]
 8010dcc:	681b      	ldr	r3, [r3, #0]
 8010dce:	430a      	orrs	r2, r1
 8010dd0:	64da      	str	r2, [r3, #76]	@ 0x4c
#endif
      }

      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8010dd2:	687b      	ldr	r3, [r7, #4]
 8010dd4:	681b      	ldr	r3, [r3, #0]
 8010dd6:	22ff      	movs	r2, #255	@ 0xff
 8010dd8:	625a      	str	r2, [r3, #36]	@ 0x24
 8010dda:	e001      	b.n	8010de0 <HAL_RTC_Init+0xf8>
    }
    else
    {
      /* The calendar is already initialized */
      status = HAL_OK;
 8010ddc:	2300      	movs	r3, #0
 8010dde:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 8010de0:	7bfb      	ldrb	r3, [r7, #15]
 8010de2:	2b00      	cmp	r3, #0
 8010de4:	d103      	bne.n	8010dee <HAL_RTC_Init+0x106>
    {
        hrtc->State = HAL_RTC_STATE_READY;
 8010de6:	687b      	ldr	r3, [r7, #4]
 8010de8:	2201      	movs	r2, #1
 8010dea:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    }
  }

  return status;
 8010dee:	7bfb      	ldrb	r3, [r7, #15]
}
 8010df0:	4618      	mov	r0, r3
 8010df2:	3710      	adds	r7, #16
 8010df4:	46bd      	mov	sp, r7
 8010df6:	bd80      	pop	{r7, pc}

08010df8 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8010df8:	b590      	push	{r4, r7, lr}
 8010dfa:	b087      	sub	sp, #28
 8010dfc:	af00      	add	r7, sp, #0
 8010dfe:	60f8      	str	r0, [r7, #12]
 8010e00:	60b9      	str	r1, [r7, #8]
 8010e02:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8010e04:	68fb      	ldr	r3, [r7, #12]
 8010e06:	f893 3020 	ldrb.w	r3, [r3, #32]
 8010e0a:	2b01      	cmp	r3, #1
 8010e0c:	d101      	bne.n	8010e12 <HAL_RTC_SetTime+0x1a>
 8010e0e:	2302      	movs	r3, #2
 8010e10:	e08b      	b.n	8010f2a <HAL_RTC_SetTime+0x132>
 8010e12:	68fb      	ldr	r3, [r7, #12]
 8010e14:	2201      	movs	r2, #1
 8010e16:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8010e1a:	68fb      	ldr	r3, [r7, #12]
 8010e1c:	2202      	movs	r2, #2
 8010e1e:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8010e22:	68fb      	ldr	r3, [r7, #12]
 8010e24:	681b      	ldr	r3, [r3, #0]
 8010e26:	22ca      	movs	r2, #202	@ 0xca
 8010e28:	625a      	str	r2, [r3, #36]	@ 0x24
 8010e2a:	68fb      	ldr	r3, [r7, #12]
 8010e2c:	681b      	ldr	r3, [r3, #0]
 8010e2e:	2253      	movs	r2, #83	@ 0x53
 8010e30:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8010e32:	68f8      	ldr	r0, [r7, #12]
 8010e34:	f000 fb06 	bl	8011444 <RTC_EnterInitMode>
 8010e38:	4603      	mov	r3, r0
 8010e3a:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 8010e3c:	7cfb      	ldrb	r3, [r7, #19]
 8010e3e:	2b00      	cmp	r3, #0
 8010e40:	d163      	bne.n	8010f0a <HAL_RTC_SetTime+0x112>
  {
    if (Format == RTC_FORMAT_BIN)
 8010e42:	687b      	ldr	r3, [r7, #4]
 8010e44:	2b00      	cmp	r3, #0
 8010e46:	d126      	bne.n	8010e96 <HAL_RTC_SetTime+0x9e>
    {
      if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8010e48:	68fb      	ldr	r3, [r7, #12]
 8010e4a:	681b      	ldr	r3, [r3, #0]
 8010e4c:	689b      	ldr	r3, [r3, #8]
 8010e4e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8010e52:	2b00      	cmp	r3, #0
 8010e54:	d102      	bne.n	8010e5c <HAL_RTC_SetTime+0x64>
        assert_param(IS_RTC_HOUR12(sTime->Hours));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 8010e56:	68bb      	ldr	r3, [r7, #8]
 8010e58:	2200      	movs	r2, #0
 8010e5a:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(sTime->Hours));
      }
      assert_param(IS_RTC_MINUTES(sTime->Minutes));
      assert_param(IS_RTC_SECONDS(sTime->Seconds));

      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8010e5c:	68bb      	ldr	r3, [r7, #8]
 8010e5e:	781b      	ldrb	r3, [r3, #0]
 8010e60:	4618      	mov	r0, r3
 8010e62:	f000 fb61 	bl	8011528 <RTC_ByteToBcd2>
 8010e66:	4603      	mov	r3, r0
 8010e68:	041c      	lsls	r4, r3, #16
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8010e6a:	68bb      	ldr	r3, [r7, #8]
 8010e6c:	785b      	ldrb	r3, [r3, #1]
 8010e6e:	4618      	mov	r0, r3
 8010e70:	f000 fb5a 	bl	8011528 <RTC_ByteToBcd2>
 8010e74:	4603      	mov	r3, r0
 8010e76:	021b      	lsls	r3, r3, #8
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8010e78:	431c      	orrs	r4, r3
                          ((uint32_t)RTC_ByteToBcd2(sTime->Seconds) << RTC_TR_SU_Pos) | \
 8010e7a:	68bb      	ldr	r3, [r7, #8]
 8010e7c:	789b      	ldrb	r3, [r3, #2]
 8010e7e:	4618      	mov	r0, r3
 8010e80:	f000 fb52 	bl	8011528 <RTC_ByteToBcd2>
 8010e84:	4603      	mov	r3, r0
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8010e86:	ea44 0203 	orr.w	r2, r4, r3
                          (((uint32_t)sTime->TimeFormat) << RTC_TR_PM_Pos));
 8010e8a:	68bb      	ldr	r3, [r7, #8]
 8010e8c:	78db      	ldrb	r3, [r3, #3]
 8010e8e:	059b      	lsls	r3, r3, #22
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8010e90:	4313      	orrs	r3, r2
 8010e92:	617b      	str	r3, [r7, #20]
 8010e94:	e018      	b.n	8010ec8 <HAL_RTC_SetTime+0xd0>
    }
    else
    {
      if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8010e96:	68fb      	ldr	r3, [r7, #12]
 8010e98:	681b      	ldr	r3, [r3, #0]
 8010e9a:	689b      	ldr	r3, [r3, #8]
 8010e9c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8010ea0:	2b00      	cmp	r3, #0
 8010ea2:	d102      	bne.n	8010eaa <HAL_RTC_SetTime+0xb2>
        assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 8010ea4:	68bb      	ldr	r3, [r7, #8]
 8010ea6:	2200      	movs	r2, #0
 8010ea8:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
      }
      assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
      assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8010eaa:	68bb      	ldr	r3, [r7, #8]
 8010eac:	781b      	ldrb	r3, [r3, #0]
 8010eae:	041a      	lsls	r2, r3, #16
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8010eb0:	68bb      	ldr	r3, [r7, #8]
 8010eb2:	785b      	ldrb	r3, [r3, #1]
 8010eb4:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8010eb6:	4313      	orrs	r3, r2
                ((uint32_t)(sTime->Seconds) << RTC_TR_SU_Pos) | \
 8010eb8:	68ba      	ldr	r2, [r7, #8]
 8010eba:	7892      	ldrb	r2, [r2, #2]
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8010ebc:	431a      	orrs	r2, r3
                ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 8010ebe:	68bb      	ldr	r3, [r7, #8]
 8010ec0:	78db      	ldrb	r3, [r3, #3]
 8010ec2:	059b      	lsls	r3, r3, #22
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8010ec4:	4313      	orrs	r3, r2
 8010ec6:	617b      	str	r3, [r7, #20]
    }

    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8010ec8:	68fb      	ldr	r3, [r7, #12]
 8010eca:	681a      	ldr	r2, [r3, #0]
 8010ecc:	697b      	ldr	r3, [r7, #20]
 8010ece:	f003 337f 	and.w	r3, r3, #2139062143	@ 0x7f7f7f7f
 8010ed2:	f023 43fe 	bic.w	r3, r3, #2130706432	@ 0x7f000000
 8010ed6:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured */
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 8010ed8:	68fb      	ldr	r3, [r7, #12]
 8010eda:	681b      	ldr	r3, [r3, #0]
 8010edc:	689a      	ldr	r2, [r3, #8]
 8010ede:	68fb      	ldr	r3, [r7, #12]
 8010ee0:	681b      	ldr	r3, [r3, #0]
 8010ee2:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8010ee6:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8010ee8:	68fb      	ldr	r3, [r7, #12]
 8010eea:	681b      	ldr	r3, [r3, #0]
 8010eec:	6899      	ldr	r1, [r3, #8]
 8010eee:	68bb      	ldr	r3, [r7, #8]
 8010ef0:	68da      	ldr	r2, [r3, #12]
 8010ef2:	68bb      	ldr	r3, [r7, #8]
 8010ef4:	691b      	ldr	r3, [r3, #16]
 8010ef6:	431a      	orrs	r2, r3
 8010ef8:	68fb      	ldr	r3, [r7, #12]
 8010efa:	681b      	ldr	r3, [r3, #0]
 8010efc:	430a      	orrs	r2, r1
 8010efe:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8010f00:	68f8      	ldr	r0, [r7, #12]
 8010f02:	f000 fad3 	bl	80114ac <RTC_ExitInitMode>
 8010f06:	4603      	mov	r3, r0
 8010f08:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8010f0a:	68fb      	ldr	r3, [r7, #12]
 8010f0c:	681b      	ldr	r3, [r3, #0]
 8010f0e:	22ff      	movs	r2, #255	@ 0xff
 8010f10:	625a      	str	r2, [r3, #36]	@ 0x24

  if (status == HAL_OK)
 8010f12:	7cfb      	ldrb	r3, [r7, #19]
 8010f14:	2b00      	cmp	r3, #0
 8010f16:	d103      	bne.n	8010f20 <HAL_RTC_SetTime+0x128>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8010f18:	68fb      	ldr	r3, [r7, #12]
 8010f1a:	2201      	movs	r2, #1
 8010f1c:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8010f20:	68fb      	ldr	r3, [r7, #12]
 8010f22:	2200      	movs	r2, #0
 8010f24:	f883 2020 	strb.w	r2, [r3, #32]

  return status;
 8010f28:	7cfb      	ldrb	r3, [r7, #19]
}
 8010f2a:	4618      	mov	r0, r3
 8010f2c:	371c      	adds	r7, #28
 8010f2e:	46bd      	mov	sp, r7
 8010f30:	bd90      	pop	{r4, r7, pc}

08010f32 <HAL_RTC_GetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8010f32:	b580      	push	{r7, lr}
 8010f34:	b086      	sub	sp, #24
 8010f36:	af00      	add	r7, sp, #0
 8010f38:	60f8      	str	r0, [r7, #12]
 8010f3a:	60b9      	str	r1, [r7, #8]
 8010f3c:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds structure field from the corresponding register*/
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8010f3e:	68fb      	ldr	r3, [r7, #12]
 8010f40:	681b      	ldr	r3, [r3, #0]
 8010f42:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8010f44:	68bb      	ldr	r3, [r7, #8]
 8010f46:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 8010f48:	68fb      	ldr	r3, [r7, #12]
 8010f4a:	681b      	ldr	r3, [r3, #0]
 8010f4c:	691b      	ldr	r3, [r3, #16]
 8010f4e:	f3c3 020e 	ubfx	r2, r3, #0, #15
 8010f52:	68bb      	ldr	r3, [r7, #8]
 8010f54:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 8010f56:	68fb      	ldr	r3, [r7, #12]
 8010f58:	681b      	ldr	r3, [r3, #0]
 8010f5a:	681b      	ldr	r3, [r3, #0]
 8010f5c:	f003 337f 	and.w	r3, r3, #2139062143	@ 0x7f7f7f7f
 8010f60:	f023 43fe 	bic.w	r3, r3, #2130706432	@ 0x7f000000
 8010f64:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> RTC_TR_HU_Pos);
 8010f66:	697b      	ldr	r3, [r7, #20]
 8010f68:	0c1b      	lsrs	r3, r3, #16
 8010f6a:	b2db      	uxtb	r3, r3
 8010f6c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8010f70:	b2da      	uxtb	r2, r3
 8010f72:	68bb      	ldr	r3, [r7, #8]
 8010f74:	701a      	strb	r2, [r3, #0]
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 8010f76:	697b      	ldr	r3, [r7, #20]
 8010f78:	0a1b      	lsrs	r3, r3, #8
 8010f7a:	b2db      	uxtb	r3, r3
 8010f7c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8010f80:	b2da      	uxtb	r2, r3
 8010f82:	68bb      	ldr	r3, [r7, #8]
 8010f84:	705a      	strb	r2, [r3, #1]
  sTime->Seconds = (uint8_t)((tmpreg & (RTC_TR_ST | RTC_TR_SU)) >> RTC_TR_SU_Pos);
 8010f86:	697b      	ldr	r3, [r7, #20]
 8010f88:	b2db      	uxtb	r3, r3
 8010f8a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8010f8e:	b2da      	uxtb	r2, r3
 8010f90:	68bb      	ldr	r3, [r7, #8]
 8010f92:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> RTC_TR_PM_Pos);
 8010f94:	697b      	ldr	r3, [r7, #20]
 8010f96:	0d9b      	lsrs	r3, r3, #22
 8010f98:	b2db      	uxtb	r3, r3
 8010f9a:	f003 0301 	and.w	r3, r3, #1
 8010f9e:	b2da      	uxtb	r2, r3
 8010fa0:	68bb      	ldr	r3, [r7, #8]
 8010fa2:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8010fa4:	687b      	ldr	r3, [r7, #4]
 8010fa6:	2b00      	cmp	r3, #0
 8010fa8:	d11a      	bne.n	8010fe0 <HAL_RTC_GetTime+0xae>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8010faa:	68bb      	ldr	r3, [r7, #8]
 8010fac:	781b      	ldrb	r3, [r3, #0]
 8010fae:	4618      	mov	r0, r3
 8010fb0:	f000 fada 	bl	8011568 <RTC_Bcd2ToByte>
 8010fb4:	4603      	mov	r3, r0
 8010fb6:	461a      	mov	r2, r3
 8010fb8:	68bb      	ldr	r3, [r7, #8]
 8010fba:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 8010fbc:	68bb      	ldr	r3, [r7, #8]
 8010fbe:	785b      	ldrb	r3, [r3, #1]
 8010fc0:	4618      	mov	r0, r3
 8010fc2:	f000 fad1 	bl	8011568 <RTC_Bcd2ToByte>
 8010fc6:	4603      	mov	r3, r0
 8010fc8:	461a      	mov	r2, r3
 8010fca:	68bb      	ldr	r3, [r7, #8]
 8010fcc:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 8010fce:	68bb      	ldr	r3, [r7, #8]
 8010fd0:	789b      	ldrb	r3, [r3, #2]
 8010fd2:	4618      	mov	r0, r3
 8010fd4:	f000 fac8 	bl	8011568 <RTC_Bcd2ToByte>
 8010fd8:	4603      	mov	r3, r0
 8010fda:	461a      	mov	r2, r3
 8010fdc:	68bb      	ldr	r3, [r7, #8]
 8010fde:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 8010fe0:	2300      	movs	r3, #0
}
 8010fe2:	4618      	mov	r0, r3
 8010fe4:	3718      	adds	r7, #24
 8010fe6:	46bd      	mov	sp, r7
 8010fe8:	bd80      	pop	{r7, pc}

08010fea <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8010fea:	b590      	push	{r4, r7, lr}
 8010fec:	b087      	sub	sp, #28
 8010fee:	af00      	add	r7, sp, #0
 8010ff0:	60f8      	str	r0, [r7, #12]
 8010ff2:	60b9      	str	r1, [r7, #8]
 8010ff4:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8010ff6:	68fb      	ldr	r3, [r7, #12]
 8010ff8:	f893 3020 	ldrb.w	r3, [r3, #32]
 8010ffc:	2b01      	cmp	r3, #1
 8010ffe:	d101      	bne.n	8011004 <HAL_RTC_SetDate+0x1a>
 8011000:	2302      	movs	r3, #2
 8011002:	e075      	b.n	80110f0 <HAL_RTC_SetDate+0x106>
 8011004:	68fb      	ldr	r3, [r7, #12]
 8011006:	2201      	movs	r2, #1
 8011008:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 801100c:	68fb      	ldr	r3, [r7, #12]
 801100e:	2202      	movs	r2, #2
 8011010:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8011014:	687b      	ldr	r3, [r7, #4]
 8011016:	2b00      	cmp	r3, #0
 8011018:	d10e      	bne.n	8011038 <HAL_RTC_SetDate+0x4e>
 801101a:	68bb      	ldr	r3, [r7, #8]
 801101c:	785b      	ldrb	r3, [r3, #1]
 801101e:	f003 0310 	and.w	r3, r3, #16
 8011022:	2b00      	cmp	r3, #0
 8011024:	d008      	beq.n	8011038 <HAL_RTC_SetDate+0x4e>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8011026:	68bb      	ldr	r3, [r7, #8]
 8011028:	785b      	ldrb	r3, [r3, #1]
 801102a:	f023 0310 	bic.w	r3, r3, #16
 801102e:	b2db      	uxtb	r3, r3
 8011030:	330a      	adds	r3, #10
 8011032:	b2da      	uxtb	r2, r3
 8011034:	68bb      	ldr	r3, [r7, #8]
 8011036:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 8011038:	687b      	ldr	r3, [r7, #4]
 801103a:	2b00      	cmp	r3, #0
 801103c:	d11c      	bne.n	8011078 <HAL_RTC_SetDate+0x8e>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 801103e:	68bb      	ldr	r3, [r7, #8]
 8011040:	78db      	ldrb	r3, [r3, #3]
 8011042:	4618      	mov	r0, r3
 8011044:	f000 fa70 	bl	8011528 <RTC_ByteToBcd2>
 8011048:	4603      	mov	r3, r0
 801104a:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 801104c:	68bb      	ldr	r3, [r7, #8]
 801104e:	785b      	ldrb	r3, [r3, #1]
 8011050:	4618      	mov	r0, r3
 8011052:	f000 fa69 	bl	8011528 <RTC_ByteToBcd2>
 8011056:	4603      	mov	r3, r0
 8011058:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 801105a:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date) << RTC_DR_DU_Pos) | \
 801105c:	68bb      	ldr	r3, [r7, #8]
 801105e:	789b      	ldrb	r3, [r3, #2]
 8011060:	4618      	mov	r0, r3
 8011062:	f000 fa61 	bl	8011528 <RTC_ByteToBcd2>
 8011066:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8011068:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay << RTC_DR_WDU_Pos));
 801106c:	68bb      	ldr	r3, [r7, #8]
 801106e:	781b      	ldrb	r3, [r3, #0]
 8011070:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 8011072:	4313      	orrs	r3, r2
 8011074:	617b      	str	r3, [r7, #20]
 8011076:	e00e      	b.n	8011096 <HAL_RTC_SetDate+0xac>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8011078:	68bb      	ldr	r3, [r7, #8]
 801107a:	78db      	ldrb	r3, [r3, #3]
 801107c:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 801107e:	68bb      	ldr	r3, [r7, #8]
 8011080:	785b      	ldrb	r3, [r3, #1]
 8011082:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8011084:	4313      	orrs	r3, r2
                  (((uint32_t)sDate->Date) << RTC_DR_DU_Pos) | \
 8011086:	68ba      	ldr	r2, [r7, #8]
 8011088:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 801108a:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 801108c:	68bb      	ldr	r3, [r7, #8]
 801108e:	781b      	ldrb	r3, [r3, #0]
 8011090:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8011092:	4313      	orrs	r3, r2
 8011094:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8011096:	68fb      	ldr	r3, [r7, #12]
 8011098:	681b      	ldr	r3, [r3, #0]
 801109a:	22ca      	movs	r2, #202	@ 0xca
 801109c:	625a      	str	r2, [r3, #36]	@ 0x24
 801109e:	68fb      	ldr	r3, [r7, #12]
 80110a0:	681b      	ldr	r3, [r3, #0]
 80110a2:	2253      	movs	r2, #83	@ 0x53
 80110a4:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 80110a6:	68f8      	ldr	r0, [r7, #12]
 80110a8:	f000 f9cc 	bl	8011444 <RTC_EnterInitMode>
 80110ac:	4603      	mov	r3, r0
 80110ae:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 80110b0:	7cfb      	ldrb	r3, [r7, #19]
 80110b2:	2b00      	cmp	r3, #0
 80110b4:	d10c      	bne.n	80110d0 <HAL_RTC_SetDate+0xe6>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 80110b6:	68fb      	ldr	r3, [r7, #12]
 80110b8:	681a      	ldr	r2, [r3, #0]
 80110ba:	697b      	ldr	r3, [r7, #20]
 80110bc:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 80110c0:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 80110c4:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 80110c6:	68f8      	ldr	r0, [r7, #12]
 80110c8:	f000 f9f0 	bl	80114ac <RTC_ExitInitMode>
 80110cc:	4603      	mov	r3, r0
 80110ce:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80110d0:	68fb      	ldr	r3, [r7, #12]
 80110d2:	681b      	ldr	r3, [r3, #0]
 80110d4:	22ff      	movs	r2, #255	@ 0xff
 80110d6:	625a      	str	r2, [r3, #36]	@ 0x24

  if (status == HAL_OK)
 80110d8:	7cfb      	ldrb	r3, [r7, #19]
 80110da:	2b00      	cmp	r3, #0
 80110dc:	d103      	bne.n	80110e6 <HAL_RTC_SetDate+0xfc>
  {
    hrtc->State = HAL_RTC_STATE_READY ;
 80110de:	68fb      	ldr	r3, [r7, #12]
 80110e0:	2201      	movs	r2, #1
 80110e2:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80110e6:	68fb      	ldr	r3, [r7, #12]
 80110e8:	2200      	movs	r2, #0
 80110ea:	f883 2020 	strb.w	r2, [r3, #32]

  return status;
 80110ee:	7cfb      	ldrb	r3, [r7, #19]
}
 80110f0:	4618      	mov	r0, r3
 80110f2:	371c      	adds	r7, #28
 80110f4:	46bd      	mov	sp, r7
 80110f6:	bd90      	pop	{r4, r7, pc}

080110f8 <HAL_RTC_SetAlarm_IT>:
  *             @arg RTC_FORMAT_BIN: Binary data format
  *             @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm_IT(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 80110f8:	b590      	push	{r4, r7, lr}
 80110fa:	b089      	sub	sp, #36	@ 0x24
 80110fc:	af00      	add	r7, sp, #0
 80110fe:	60f8      	str	r0, [r7, #12]
 8011100:	60b9      	str	r1, [r7, #8]
 8011102:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_ALARM_DATE_WEEKDAY_SEL(sAlarm->AlarmDateWeekDaySel));
  assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(sAlarm->AlarmTime.SubSeconds));
  assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(sAlarm->AlarmSubSecondMask));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8011104:	68fb      	ldr	r3, [r7, #12]
 8011106:	f893 3020 	ldrb.w	r3, [r3, #32]
 801110a:	2b01      	cmp	r3, #1
 801110c:	d101      	bne.n	8011112 <HAL_RTC_SetAlarm_IT+0x1a>
 801110e:	2302      	movs	r3, #2
 8011110:	e127      	b.n	8011362 <HAL_RTC_SetAlarm_IT+0x26a>
 8011112:	68fb      	ldr	r3, [r7, #12]
 8011114:	2201      	movs	r2, #1
 8011116:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 801111a:	68fb      	ldr	r3, [r7, #12]
 801111c:	2202      	movs	r2, #2
 801111e:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  if (Format == RTC_FORMAT_BIN)
 8011122:	687b      	ldr	r3, [r7, #4]
 8011124:	2b00      	cmp	r3, #0
 8011126:	d137      	bne.n	8011198 <HAL_RTC_SetAlarm_IT+0xa0>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8011128:	68fb      	ldr	r3, [r7, #12]
 801112a:	681b      	ldr	r3, [r3, #0]
 801112c:	689b      	ldr	r3, [r3, #8]
 801112e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8011132:	2b00      	cmp	r3, #0
 8011134:	d102      	bne.n	801113c <HAL_RTC_SetAlarm_IT+0x44>
      assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 8011136:	68bb      	ldr	r3, [r7, #8]
 8011138:	2200      	movs	r2, #0
 801113a:	70da      	strb	r2, [r3, #3]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
    }

    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 801113c:	68bb      	ldr	r3, [r7, #8]
 801113e:	781b      	ldrb	r3, [r3, #0]
 8011140:	4618      	mov	r0, r3
 8011142:	f000 f9f1 	bl	8011528 <RTC_ByteToBcd2>
 8011146:	4603      	mov	r3, r0
 8011148:	041c      	lsls	r4, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 801114a:	68bb      	ldr	r3, [r7, #8]
 801114c:	785b      	ldrb	r3, [r3, #1]
 801114e:	4618      	mov	r0, r3
 8011150:	f000 f9ea 	bl	8011528 <RTC_ByteToBcd2>
 8011154:	4603      	mov	r3, r0
 8011156:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8011158:	431c      	orrs	r4, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 801115a:	68bb      	ldr	r3, [r7, #8]
 801115c:	789b      	ldrb	r3, [r3, #2]
 801115e:	4618      	mov	r0, r3
 8011160:	f000 f9e2 	bl	8011528 <RTC_ByteToBcd2>
 8011164:	4603      	mov	r3, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8011166:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 801116a:	68bb      	ldr	r3, [r7, #8]
 801116c:	78db      	ldrb	r3, [r3, #3]
 801116e:	059b      	lsls	r3, r3, #22
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8011170:	ea42 0403 	orr.w	r4, r2, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8011174:	68bb      	ldr	r3, [r7, #8]
 8011176:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 801117a:	4618      	mov	r0, r3
 801117c:	f000 f9d4 	bl	8011528 <RTC_ByteToBcd2>
 8011180:	4603      	mov	r3, r0
 8011182:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8011184:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 8011188:	68bb      	ldr	r3, [r7, #8]
 801118a:	6a1b      	ldr	r3, [r3, #32]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 801118c:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 801118e:	68bb      	ldr	r3, [r7, #8]
 8011190:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8011192:	4313      	orrs	r3, r2
 8011194:	61fb      	str	r3, [r7, #28]
 8011196:	e023      	b.n	80111e0 <HAL_RTC_SetAlarm_IT+0xe8>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8011198:	68fb      	ldr	r3, [r7, #12]
 801119a:	681b      	ldr	r3, [r3, #0]
 801119c:	689b      	ldr	r3, [r3, #8]
 801119e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80111a2:	2b00      	cmp	r3, #0
 80111a4:	d102      	bne.n	80111ac <HAL_RTC_SetAlarm_IT+0xb4>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 80111a6:	68bb      	ldr	r3, [r7, #8]
 80111a8:	2200      	movs	r2, #0
 80111aa:	70da      	strb	r2, [r3, #3]
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
    }

#endif /* USE_FULL_ASSERT */
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 80111ac:	68bb      	ldr	r3, [r7, #8]
 80111ae:	781b      	ldrb	r3, [r3, #0]
 80111b0:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 80111b2:	68bb      	ldr	r3, [r7, #8]
 80111b4:	785b      	ldrb	r3, [r3, #1]
 80111b6:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 80111b8:	4313      	orrs	r3, r2
              ((uint32_t)(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 80111ba:	68ba      	ldr	r2, [r7, #8]
 80111bc:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 80111be:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 80111c0:	68bb      	ldr	r3, [r7, #8]
 80111c2:	78db      	ldrb	r3, [r3, #3]
 80111c4:	059b      	lsls	r3, r3, #22
              ((uint32_t)(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 80111c6:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 80111c8:	68bb      	ldr	r3, [r7, #8]
 80111ca:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80111ce:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 80111d0:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 80111d2:	68bb      	ldr	r3, [r7, #8]
 80111d4:	6a1b      	ldr	r3, [r3, #32]
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 80111d6:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 80111d8:	68bb      	ldr	r3, [r7, #8]
 80111da:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 80111dc:	4313      	orrs	r3, r2
 80111de:	61fb      	str	r3, [r7, #28]
  }
  /* Configure the Alarm A or Alarm B Sub Second registers */
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | (uint32_t)(sAlarm->AlarmSubSecondMask));
 80111e0:	68bb      	ldr	r3, [r7, #8]
 80111e2:	685a      	ldr	r2, [r3, #4]
 80111e4:	68bb      	ldr	r3, [r7, #8]
 80111e6:	69db      	ldr	r3, [r3, #28]
 80111e8:	4313      	orrs	r3, r2
 80111ea:	61bb      	str	r3, [r7, #24]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80111ec:	68fb      	ldr	r3, [r7, #12]
 80111ee:	681b      	ldr	r3, [r3, #0]
 80111f0:	22ca      	movs	r2, #202	@ 0xca
 80111f2:	625a      	str	r2, [r3, #36]	@ 0x24
 80111f4:	68fb      	ldr	r3, [r7, #12]
 80111f6:	681b      	ldr	r3, [r3, #0]
 80111f8:	2253      	movs	r2, #83	@ 0x53
 80111fa:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Configure the Alarm register */
  if (sAlarm->Alarm == RTC_ALARM_A)
 80111fc:	68bb      	ldr	r3, [r7, #8]
 80111fe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8011200:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8011204:	d14a      	bne.n	801129c <HAL_RTC_SetAlarm_IT+0x1a4>
  {
    /* Disable the Alarm A interrupt */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 8011206:	68fb      	ldr	r3, [r7, #12]
 8011208:	681b      	ldr	r3, [r3, #0]
 801120a:	689a      	ldr	r2, [r3, #8]
 801120c:	68fb      	ldr	r3, [r7, #12]
 801120e:	681b      	ldr	r3, [r3, #0]
 8011210:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8011214:	609a      	str	r2, [r3, #8]

    /* Clear flag alarm A */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 8011216:	68fb      	ldr	r3, [r7, #12]
 8011218:	681b      	ldr	r3, [r3, #0]
 801121a:	68db      	ldr	r3, [r3, #12]
 801121c:	b2da      	uxtb	r2, r3
 801121e:	68fb      	ldr	r3, [r7, #12]
 8011220:	681b      	ldr	r3, [r3, #0]
 8011222:	f462 72c0 	orn	r2, r2, #384	@ 0x180
 8011226:	60da      	str	r2, [r3, #12]

#if defined (RTC_FLAG_ALRAWF)
    uint32_t tickstart = HAL_GetTick();
 8011228:	f7f9 fde6 	bl	800adf8 <HAL_GetTick>
 801122c:	6138      	str	r0, [r7, #16]
    /* Wait till RTC ALRAWF flag is set and if Time out is reached exit */
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 801122e:	e015      	b.n	801125c <HAL_RTC_SetAlarm_IT+0x164>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8011230:	f7f9 fde2 	bl	800adf8 <HAL_GetTick>
 8011234:	4602      	mov	r2, r0
 8011236:	693b      	ldr	r3, [r7, #16]
 8011238:	1ad3      	subs	r3, r2, r3
 801123a:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 801123e:	d90d      	bls.n	801125c <HAL_RTC_SetAlarm_IT+0x164>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8011240:	68fb      	ldr	r3, [r7, #12]
 8011242:	681b      	ldr	r3, [r3, #0]
 8011244:	22ff      	movs	r2, #255	@ 0xff
 8011246:	625a      	str	r2, [r3, #36]	@ 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8011248:	68fb      	ldr	r3, [r7, #12]
 801124a:	2203      	movs	r2, #3
 801124c:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8011250:	68fb      	ldr	r3, [r7, #12]
 8011252:	2200      	movs	r2, #0
 8011254:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_TIMEOUT;
 8011258:	2303      	movs	r3, #3
 801125a:	e082      	b.n	8011362 <HAL_RTC_SetAlarm_IT+0x26a>
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 801125c:	68fb      	ldr	r3, [r7, #12]
 801125e:	681b      	ldr	r3, [r3, #0]
 8011260:	68db      	ldr	r3, [r3, #12]
 8011262:	f003 0301 	and.w	r3, r3, #1
 8011266:	2b00      	cmp	r3, #0
 8011268:	d0e2      	beq.n	8011230 <HAL_RTC_SetAlarm_IT+0x138>
      }
    }
#endif

    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 801126a:	68fb      	ldr	r3, [r7, #12]
 801126c:	681b      	ldr	r3, [r3, #0]
 801126e:	69fa      	ldr	r2, [r7, #28]
 8011270:	61da      	str	r2, [r3, #28]
    /* Configure the Alarm A Sub Second register */
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 8011272:	68fb      	ldr	r3, [r7, #12]
 8011274:	681b      	ldr	r3, [r3, #0]
 8011276:	69ba      	ldr	r2, [r7, #24]
 8011278:	645a      	str	r2, [r3, #68]	@ 0x44
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 801127a:	68fb      	ldr	r3, [r7, #12]
 801127c:	681b      	ldr	r3, [r3, #0]
 801127e:	689a      	ldr	r2, [r3, #8]
 8011280:	68fb      	ldr	r3, [r7, #12]
 8011282:	681b      	ldr	r3, [r3, #0]
 8011284:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8011288:	609a      	str	r2, [r3, #8]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRA);
 801128a:	68fb      	ldr	r3, [r7, #12]
 801128c:	681b      	ldr	r3, [r3, #0]
 801128e:	689a      	ldr	r2, [r3, #8]
 8011290:	68fb      	ldr	r3, [r7, #12]
 8011292:	681b      	ldr	r3, [r3, #0]
 8011294:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8011298:	609a      	str	r2, [r3, #8]
 801129a:	e049      	b.n	8011330 <HAL_RTC_SetAlarm_IT+0x238>
  }
  else
  {
    /* Disable the Alarm B interrupt */
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 801129c:	68fb      	ldr	r3, [r7, #12]
 801129e:	681b      	ldr	r3, [r3, #0]
 80112a0:	689a      	ldr	r2, [r3, #8]
 80112a2:	68fb      	ldr	r3, [r7, #12]
 80112a4:	681b      	ldr	r3, [r3, #0]
 80112a6:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 80112aa:	609a      	str	r2, [r3, #8]

    /* Clear flag alarm B */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 80112ac:	68fb      	ldr	r3, [r7, #12]
 80112ae:	681b      	ldr	r3, [r3, #0]
 80112b0:	68db      	ldr	r3, [r3, #12]
 80112b2:	b2da      	uxtb	r2, r3
 80112b4:	68fb      	ldr	r3, [r7, #12]
 80112b6:	681b      	ldr	r3, [r3, #0]
 80112b8:	f462 7220 	orn	r2, r2, #640	@ 0x280
 80112bc:	60da      	str	r2, [r3, #12]

#if defined (RTC_FLAG_ALRBWF)
    uint32_t tickstart = HAL_GetTick();
 80112be:	f7f9 fd9b 	bl	800adf8 <HAL_GetTick>
 80112c2:	6178      	str	r0, [r7, #20]
    /* Wait till RTC ALRBWF flag is set and if Time out is reached exit */
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 80112c4:	e015      	b.n	80112f2 <HAL_RTC_SetAlarm_IT+0x1fa>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80112c6:	f7f9 fd97 	bl	800adf8 <HAL_GetTick>
 80112ca:	4602      	mov	r2, r0
 80112cc:	697b      	ldr	r3, [r7, #20]
 80112ce:	1ad3      	subs	r3, r2, r3
 80112d0:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80112d4:	d90d      	bls.n	80112f2 <HAL_RTC_SetAlarm_IT+0x1fa>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80112d6:	68fb      	ldr	r3, [r7, #12]
 80112d8:	681b      	ldr	r3, [r3, #0]
 80112da:	22ff      	movs	r2, #255	@ 0xff
 80112dc:	625a      	str	r2, [r3, #36]	@ 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80112de:	68fb      	ldr	r3, [r7, #12]
 80112e0:	2203      	movs	r2, #3
 80112e2:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 80112e6:	68fb      	ldr	r3, [r7, #12]
 80112e8:	2200      	movs	r2, #0
 80112ea:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_TIMEOUT;
 80112ee:	2303      	movs	r3, #3
 80112f0:	e037      	b.n	8011362 <HAL_RTC_SetAlarm_IT+0x26a>
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 80112f2:	68fb      	ldr	r3, [r7, #12]
 80112f4:	681b      	ldr	r3, [r3, #0]
 80112f6:	68db      	ldr	r3, [r3, #12]
 80112f8:	f003 0302 	and.w	r3, r3, #2
 80112fc:	2b00      	cmp	r3, #0
 80112fe:	d0e2      	beq.n	80112c6 <HAL_RTC_SetAlarm_IT+0x1ce>
      }
    }
#endif

    hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 8011300:	68fb      	ldr	r3, [r7, #12]
 8011302:	681b      	ldr	r3, [r3, #0]
 8011304:	69fa      	ldr	r2, [r7, #28]
 8011306:	621a      	str	r2, [r3, #32]
    /* Configure the Alarm B Sub Second register */
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 8011308:	68fb      	ldr	r3, [r7, #12]
 801130a:	681b      	ldr	r3, [r3, #0]
 801130c:	69ba      	ldr	r2, [r7, #24]
 801130e:	649a      	str	r2, [r3, #72]	@ 0x48
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMB_ENABLE(hrtc);
 8011310:	68fb      	ldr	r3, [r7, #12]
 8011312:	681b      	ldr	r3, [r3, #0]
 8011314:	689a      	ldr	r2, [r3, #8]
 8011316:	68fb      	ldr	r3, [r7, #12]
 8011318:	681b      	ldr	r3, [r3, #0]
 801131a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 801131e:	609a      	str	r2, [r3, #8]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRB);
 8011320:	68fb      	ldr	r3, [r7, #12]
 8011322:	681b      	ldr	r3, [r3, #0]
 8011324:	689a      	ldr	r2, [r3, #8]
 8011326:	68fb      	ldr	r3, [r7, #12]
 8011328:	681b      	ldr	r3, [r3, #0]
 801132a:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 801132e:	609a      	str	r2, [r3, #8]
  }

  /* RTC Alarm Interrupt Configuration: EXTI configuration */
  __HAL_RTC_ALARM_EXTI_ENABLE_IT();
 8011330:	4b0e      	ldr	r3, [pc, #56]	@ (801136c <HAL_RTC_SetAlarm_IT+0x274>)
 8011332:	681b      	ldr	r3, [r3, #0]
 8011334:	4a0d      	ldr	r2, [pc, #52]	@ (801136c <HAL_RTC_SetAlarm_IT+0x274>)
 8011336:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 801133a:	6013      	str	r3, [r2, #0]
  __HAL_RTC_ALARM_EXTI_ENABLE_RISING_EDGE();
 801133c:	4b0b      	ldr	r3, [pc, #44]	@ (801136c <HAL_RTC_SetAlarm_IT+0x274>)
 801133e:	689b      	ldr	r3, [r3, #8]
 8011340:	4a0a      	ldr	r2, [pc, #40]	@ (801136c <HAL_RTC_SetAlarm_IT+0x274>)
 8011342:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8011346:	6093      	str	r3, [r2, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8011348:	68fb      	ldr	r3, [r7, #12]
 801134a:	681b      	ldr	r3, [r3, #0]
 801134c:	22ff      	movs	r2, #255	@ 0xff
 801134e:	625a      	str	r2, [r3, #36]	@ 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8011350:	68fb      	ldr	r3, [r7, #12]
 8011352:	2201      	movs	r2, #1
 8011354:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8011358:	68fb      	ldr	r3, [r7, #12]
 801135a:	2200      	movs	r2, #0
 801135c:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8011360:	2300      	movs	r3, #0
}
 8011362:	4618      	mov	r0, r3
 8011364:	3724      	adds	r7, #36	@ 0x24
 8011366:	46bd      	mov	sp, r7
 8011368:	bd90      	pop	{r4, r7, pc}
 801136a:	bf00      	nop
 801136c:	40010400 	.word	0x40010400

08011370 <HAL_RTC_AlarmIRQHandler>:
  * @brief  Handle Alarm interrupt request.
  * @param  hrtc RTC handle
  * @retval None
  */
void HAL_RTC_AlarmIRQHandler(RTC_HandleTypeDef *hrtc)
{
 8011370:	b580      	push	{r7, lr}
 8011372:	b082      	sub	sp, #8
 8011374:	af00      	add	r7, sp, #0
 8011376:	6078      	str	r0, [r7, #4]
  /* Clear the EXTI's line Flag for RTC Alarm */
  __HAL_RTC_ALARM_EXTI_CLEAR_FLAG();
 8011378:	4b1f      	ldr	r3, [pc, #124]	@ (80113f8 <HAL_RTC_AlarmIRQHandler+0x88>)
 801137a:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 801137e:	615a      	str	r2, [r3, #20]
  }

#else /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */

  /* Get the AlarmA interrupt source enable status */
  if (__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRA) != 0U)
 8011380:	687b      	ldr	r3, [r7, #4]
 8011382:	681b      	ldr	r3, [r3, #0]
 8011384:	689b      	ldr	r3, [r3, #8]
 8011386:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 801138a:	2b00      	cmp	r3, #0
 801138c:	d012      	beq.n	80113b4 <HAL_RTC_AlarmIRQHandler+0x44>
  {
    /* Get the pending status of the AlarmA Interrupt */
    if (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAF) != 0U)
 801138e:	687b      	ldr	r3, [r7, #4]
 8011390:	681b      	ldr	r3, [r3, #0]
 8011392:	68db      	ldr	r3, [r3, #12]
 8011394:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8011398:	2b00      	cmp	r3, #0
 801139a:	d00b      	beq.n	80113b4 <HAL_RTC_AlarmIRQHandler+0x44>
    {
      /* Clear the AlarmA interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 801139c:	687b      	ldr	r3, [r7, #4]
 801139e:	681b      	ldr	r3, [r3, #0]
 80113a0:	68db      	ldr	r3, [r3, #12]
 80113a2:	b2da      	uxtb	r2, r3
 80113a4:	687b      	ldr	r3, [r7, #4]
 80113a6:	681b      	ldr	r3, [r3, #0]
 80113a8:	f462 72c0 	orn	r2, r2, #384	@ 0x180
 80113ac:	60da      	str	r2, [r3, #12]

#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->AlarmAEventCallback(hrtc);
#else
      HAL_RTC_AlarmAEventCallback(hrtc);
 80113ae:	6878      	ldr	r0, [r7, #4]
 80113b0:	f7f1 fb2a 	bl	8002a08 <HAL_RTC_AlarmAEventCallback>
#endif
    }
  }

  /* Get the AlarmB interrupt source enable status */
  if (__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRB) != 0U)
 80113b4:	687b      	ldr	r3, [r7, #4]
 80113b6:	681b      	ldr	r3, [r3, #0]
 80113b8:	689b      	ldr	r3, [r3, #8]
 80113ba:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80113be:	2b00      	cmp	r3, #0
 80113c0:	d012      	beq.n	80113e8 <HAL_RTC_AlarmIRQHandler+0x78>
  {
    /* Get the pending status of the AlarmB Interrupt */
    if (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBF) != 0U)
 80113c2:	687b      	ldr	r3, [r7, #4]
 80113c4:	681b      	ldr	r3, [r3, #0]
 80113c6:	68db      	ldr	r3, [r3, #12]
 80113c8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80113cc:	2b00      	cmp	r3, #0
 80113ce:	d00b      	beq.n	80113e8 <HAL_RTC_AlarmIRQHandler+0x78>
    {
      /* Clear the AlarmB interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 80113d0:	687b      	ldr	r3, [r7, #4]
 80113d2:	681b      	ldr	r3, [r3, #0]
 80113d4:	68db      	ldr	r3, [r3, #12]
 80113d6:	b2da      	uxtb	r2, r3
 80113d8:	687b      	ldr	r3, [r7, #4]
 80113da:	681b      	ldr	r3, [r3, #0]
 80113dc:	f462 7220 	orn	r2, r2, #640	@ 0x280
 80113e0:	60da      	str	r2, [r3, #12]

#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->AlarmBEventCallback(hrtc);
#else
      HAL_RTCEx_AlarmBEventCallback(hrtc);
 80113e2:	6878      	ldr	r0, [r7, #4]
 80113e4:	f000 f8da 	bl	801159c <HAL_RTCEx_AlarmBEventCallback>
    }
  }
#endif /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 80113e8:	687b      	ldr	r3, [r7, #4]
 80113ea:	2201      	movs	r2, #1
 80113ec:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
}
 80113f0:	bf00      	nop
 80113f2:	3708      	adds	r7, #8
 80113f4:	46bd      	mov	sp, r7
 80113f6:	bd80      	pop	{r7, pc}
 80113f8:	40010400 	.word	0x40010400

080113fc <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 80113fc:	b580      	push	{r7, lr}
 80113fe:	b084      	sub	sp, #16
 8011400:	af00      	add	r7, sp, #0
 8011402:	6078      	str	r0, [r7, #4]
#elif defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  /* Clear RSF flag (use a read-modify-write sequence to preserve the other read-write bits) */
  hrtc->Instance->ICSR &= (uint32_t)RTC_RSF_MASK;
#else
  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 8011404:	687b      	ldr	r3, [r7, #4]
 8011406:	681b      	ldr	r3, [r3, #0]
 8011408:	4a0d      	ldr	r2, [pc, #52]	@ (8011440 <HAL_RTC_WaitForSynchro+0x44>)
 801140a:	60da      	str	r2, [r3, #12]
#endif

  tickstart = HAL_GetTick();
 801140c:	f7f9 fcf4 	bl	800adf8 <HAL_GetTick>
 8011410:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  while ((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
#else
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8011412:	e009      	b.n	8011428 <HAL_RTC_WaitForSynchro+0x2c>
#endif
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8011414:	f7f9 fcf0 	bl	800adf8 <HAL_GetTick>
 8011418:	4602      	mov	r2, r0
 801141a:	68fb      	ldr	r3, [r7, #12]
 801141c:	1ad3      	subs	r3, r2, r3
 801141e:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8011422:	d901      	bls.n	8011428 <HAL_RTC_WaitForSynchro+0x2c>
    {
      return HAL_TIMEOUT;
 8011424:	2303      	movs	r3, #3
 8011426:	e007      	b.n	8011438 <HAL_RTC_WaitForSynchro+0x3c>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8011428:	687b      	ldr	r3, [r7, #4]
 801142a:	681b      	ldr	r3, [r3, #0]
 801142c:	68db      	ldr	r3, [r3, #12]
 801142e:	f003 0320 	and.w	r3, r3, #32
 8011432:	2b00      	cmp	r3, #0
 8011434:	d0ee      	beq.n	8011414 <HAL_RTC_WaitForSynchro+0x18>
    }
  }

  return HAL_OK;
 8011436:	2300      	movs	r3, #0
}
 8011438:	4618      	mov	r0, r3
 801143a:	3710      	adds	r7, #16
 801143c:	46bd      	mov	sp, r7
 801143e:	bd80      	pop	{r7, pc}
 8011440:	0003ff5f 	.word	0x0003ff5f

08011444 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8011444:	b580      	push	{r7, lr}
 8011446:	b084      	sub	sp, #16
 8011448:	af00      	add	r7, sp, #0
 801144a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 801144c:	2300      	movs	r3, #0
 801144e:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
      }
    }
  }
#else /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8011450:	687b      	ldr	r3, [r7, #4]
 8011452:	681b      	ldr	r3, [r3, #0]
 8011454:	68db      	ldr	r3, [r3, #12]
 8011456:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 801145a:	2b00      	cmp	r3, #0
 801145c:	d120      	bne.n	80114a0 <RTC_EnterInitMode+0x5c>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 801145e:	687b      	ldr	r3, [r7, #4]
 8011460:	681b      	ldr	r3, [r3, #0]
 8011462:	f04f 32ff 	mov.w	r2, #4294967295
 8011466:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8011468:	f7f9 fcc6 	bl	800adf8 <HAL_GetTick>
 801146c:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 801146e:	e00d      	b.n	801148c <RTC_EnterInitMode+0x48>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8011470:	f7f9 fcc2 	bl	800adf8 <HAL_GetTick>
 8011474:	4602      	mov	r2, r0
 8011476:	68bb      	ldr	r3, [r7, #8]
 8011478:	1ad3      	subs	r3, r2, r3
 801147a:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 801147e:	d905      	bls.n	801148c <RTC_EnterInitMode+0x48>
      {
        status = HAL_TIMEOUT;
 8011480:	2303      	movs	r3, #3
 8011482:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8011484:	687b      	ldr	r3, [r7, #4]
 8011486:	2203      	movs	r2, #3
 8011488:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 801148c:	687b      	ldr	r3, [r7, #4]
 801148e:	681b      	ldr	r3, [r3, #0]
 8011490:	68db      	ldr	r3, [r3, #12]
 8011492:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8011496:	2b00      	cmp	r3, #0
 8011498:	d102      	bne.n	80114a0 <RTC_EnterInitMode+0x5c>
 801149a:	7bfb      	ldrb	r3, [r7, #15]
 801149c:	2b03      	cmp	r3, #3
 801149e:	d1e7      	bne.n	8011470 <RTC_EnterInitMode+0x2c>
      }
    }
  }
#endif /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */

  return status;
 80114a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80114a2:	4618      	mov	r0, r3
 80114a4:	3710      	adds	r7, #16
 80114a6:	46bd      	mov	sp, r7
 80114a8:	bd80      	pop	{r7, pc}
	...

080114ac <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 80114ac:	b580      	push	{r7, lr}
 80114ae:	b084      	sub	sp, #16
 80114b0:	af00      	add	r7, sp, #0
 80114b2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80114b4:	2300      	movs	r3, #0
 80114b6:	73fb      	strb	r3, [r7, #15]
  /* Exit Initialization mode */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined(STM32L4P5xx) || defined(STM32L4Q5xx)
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
#else
  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ISR, RTC_ISR_INIT);
 80114b8:	4b1a      	ldr	r3, [pc, #104]	@ (8011524 <RTC_ExitInitMode+0x78>)
 80114ba:	68db      	ldr	r3, [r3, #12]
 80114bc:	4a19      	ldr	r2, [pc, #100]	@ (8011524 <RTC_ExitInitMode+0x78>)
 80114be:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80114c2:	60d3      	str	r3, [r2, #12]
#endif

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 80114c4:	4b17      	ldr	r3, [pc, #92]	@ (8011524 <RTC_ExitInitMode+0x78>)
 80114c6:	689b      	ldr	r3, [r3, #8]
 80114c8:	f003 0320 	and.w	r3, r3, #32
 80114cc:	2b00      	cmp	r3, #0
 80114ce:	d10c      	bne.n	80114ea <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80114d0:	6878      	ldr	r0, [r7, #4]
 80114d2:	f7ff ff93 	bl	80113fc <HAL_RTC_WaitForSynchro>
 80114d6:	4603      	mov	r3, r0
 80114d8:	2b00      	cmp	r3, #0
 80114da:	d01e      	beq.n	801151a <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80114dc:	687b      	ldr	r3, [r7, #4]
 80114de:	2203      	movs	r2, #3
 80114e0:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
      status = HAL_TIMEOUT;
 80114e4:	2303      	movs	r3, #3
 80114e6:	73fb      	strb	r3, [r7, #15]
 80114e8:	e017      	b.n	801151a <RTC_ExitInitMode+0x6e>
    }
  }
  else /* WA 2.9.6 Calendar initialization may fail in case of consecutive INIT mode entry */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 80114ea:	4b0e      	ldr	r3, [pc, #56]	@ (8011524 <RTC_ExitInitMode+0x78>)
 80114ec:	689b      	ldr	r3, [r3, #8]
 80114ee:	4a0d      	ldr	r2, [pc, #52]	@ (8011524 <RTC_ExitInitMode+0x78>)
 80114f0:	f023 0320 	bic.w	r3, r3, #32
 80114f4:	6093      	str	r3, [r2, #8]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80114f6:	6878      	ldr	r0, [r7, #4]
 80114f8:	f7ff ff80 	bl	80113fc <HAL_RTC_WaitForSynchro>
 80114fc:	4603      	mov	r3, r0
 80114fe:	2b00      	cmp	r3, #0
 8011500:	d005      	beq.n	801150e <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8011502:	687b      	ldr	r3, [r7, #4]
 8011504:	2203      	movs	r2, #3
 8011506:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
      status = HAL_TIMEOUT;
 801150a:	2303      	movs	r3, #3
 801150c:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 801150e:	4b05      	ldr	r3, [pc, #20]	@ (8011524 <RTC_ExitInitMode+0x78>)
 8011510:	689b      	ldr	r3, [r3, #8]
 8011512:	4a04      	ldr	r2, [pc, #16]	@ (8011524 <RTC_ExitInitMode+0x78>)
 8011514:	f043 0320 	orr.w	r3, r3, #32
 8011518:	6093      	str	r3, [r2, #8]
  }

  return status;
 801151a:	7bfb      	ldrb	r3, [r7, #15]
}
 801151c:	4618      	mov	r0, r3
 801151e:	3710      	adds	r7, #16
 8011520:	46bd      	mov	sp, r7
 8011522:	bd80      	pop	{r7, pc}
 8011524:	40002800 	.word	0x40002800

08011528 <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8011528:	b480      	push	{r7}
 801152a:	b085      	sub	sp, #20
 801152c:	af00      	add	r7, sp, #0
 801152e:	4603      	mov	r3, r0
 8011530:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 8011532:	2300      	movs	r3, #0
 8011534:	60fb      	str	r3, [r7, #12]
  uint8_t temp = Value;
 8011536:	79fb      	ldrb	r3, [r7, #7]
 8011538:	72fb      	strb	r3, [r7, #11]

  while (temp >= 10U)
 801153a:	e005      	b.n	8011548 <RTC_ByteToBcd2+0x20>
  {
    bcdhigh++;
 801153c:	68fb      	ldr	r3, [r7, #12]
 801153e:	3301      	adds	r3, #1
 8011540:	60fb      	str	r3, [r7, #12]
    temp -= 10U;
 8011542:	7afb      	ldrb	r3, [r7, #11]
 8011544:	3b0a      	subs	r3, #10
 8011546:	72fb      	strb	r3, [r7, #11]
  while (temp >= 10U)
 8011548:	7afb      	ldrb	r3, [r7, #11]
 801154a:	2b09      	cmp	r3, #9
 801154c:	d8f6      	bhi.n	801153c <RTC_ByteToBcd2+0x14>
  }

  return ((uint8_t)(bcdhigh << 4U) | temp);
 801154e:	68fb      	ldr	r3, [r7, #12]
 8011550:	b2db      	uxtb	r3, r3
 8011552:	011b      	lsls	r3, r3, #4
 8011554:	b2da      	uxtb	r2, r3
 8011556:	7afb      	ldrb	r3, [r7, #11]
 8011558:	4313      	orrs	r3, r2
 801155a:	b2db      	uxtb	r3, r3
}
 801155c:	4618      	mov	r0, r3
 801155e:	3714      	adds	r7, #20
 8011560:	46bd      	mov	sp, r7
 8011562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011566:	4770      	bx	lr

08011568 <RTC_Bcd2ToByte>:
  * @brief  Convert from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 8011568:	b480      	push	{r7}
 801156a:	b085      	sub	sp, #20
 801156c:	af00      	add	r7, sp, #0
 801156e:	4603      	mov	r3, r0
 8011570:	71fb      	strb	r3, [r7, #7]
  uint8_t tmp;
  tmp = ((Value & 0xF0U) >> 4U) * 10U;
 8011572:	79fb      	ldrb	r3, [r7, #7]
 8011574:	091b      	lsrs	r3, r3, #4
 8011576:	b2db      	uxtb	r3, r3
 8011578:	461a      	mov	r2, r3
 801157a:	0092      	lsls	r2, r2, #2
 801157c:	4413      	add	r3, r2
 801157e:	005b      	lsls	r3, r3, #1
 8011580:	73fb      	strb	r3, [r7, #15]
  return (tmp + (Value & 0x0FU));
 8011582:	79fb      	ldrb	r3, [r7, #7]
 8011584:	f003 030f 	and.w	r3, r3, #15
 8011588:	b2da      	uxtb	r2, r3
 801158a:	7bfb      	ldrb	r3, [r7, #15]
 801158c:	4413      	add	r3, r2
 801158e:	b2db      	uxtb	r3, r3
}
 8011590:	4618      	mov	r0, r3
 8011592:	3714      	adds	r7, #20
 8011594:	46bd      	mov	sp, r7
 8011596:	f85d 7b04 	ldr.w	r7, [sp], #4
 801159a:	4770      	bx	lr

0801159c <HAL_RTCEx_AlarmBEventCallback>:
  * @brief  Alarm B callback.
  * @param  hrtc RTC handle
  * @retval None
  */
__weak void HAL_RTCEx_AlarmBEventCallback(RTC_HandleTypeDef *hrtc)
{
 801159c:	b480      	push	{r7}
 801159e:	b083      	sub	sp, #12
 80115a0:	af00      	add	r7, sp, #0
 80115a2:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RTCEx_AlarmBEventCallback could be implemented in the user file
   */
}
 80115a4:	bf00      	nop
 80115a6:	370c      	adds	r7, #12
 80115a8:	46bd      	mov	sp, r7
 80115aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80115ae:	4770      	bx	lr

080115b0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80115b0:	b580      	push	{r7, lr}
 80115b2:	b084      	sub	sp, #16
 80115b4:	af00      	add	r7, sp, #0
 80115b6:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80115b8:	687b      	ldr	r3, [r7, #4]
 80115ba:	2b00      	cmp	r3, #0
 80115bc:	d101      	bne.n	80115c2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80115be:	2301      	movs	r3, #1
 80115c0:	e095      	b.n	80116ee <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80115c2:	687b      	ldr	r3, [r7, #4]
 80115c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80115c6:	2b00      	cmp	r3, #0
 80115c8:	d108      	bne.n	80115dc <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80115ca:	687b      	ldr	r3, [r7, #4]
 80115cc:	685b      	ldr	r3, [r3, #4]
 80115ce:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80115d2:	d009      	beq.n	80115e8 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80115d4:	687b      	ldr	r3, [r7, #4]
 80115d6:	2200      	movs	r2, #0
 80115d8:	61da      	str	r2, [r3, #28]
 80115da:	e005      	b.n	80115e8 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80115dc:	687b      	ldr	r3, [r7, #4]
 80115de:	2200      	movs	r2, #0
 80115e0:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80115e2:	687b      	ldr	r3, [r7, #4]
 80115e4:	2200      	movs	r2, #0
 80115e6:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80115e8:	687b      	ldr	r3, [r7, #4]
 80115ea:	2200      	movs	r2, #0
 80115ec:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80115ee:	687b      	ldr	r3, [r7, #4]
 80115f0:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 80115f4:	b2db      	uxtb	r3, r3
 80115f6:	2b00      	cmp	r3, #0
 80115f8:	d106      	bne.n	8011608 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80115fa:	687b      	ldr	r3, [r7, #4]
 80115fc:	2200      	movs	r2, #0
 80115fe:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8011602:	6878      	ldr	r0, [r7, #4]
 8011604:	f7f5 ffce 	bl	80075a4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8011608:	687b      	ldr	r3, [r7, #4]
 801160a:	2202      	movs	r2, #2
 801160c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8011610:	687b      	ldr	r3, [r7, #4]
 8011612:	681b      	ldr	r3, [r3, #0]
 8011614:	681a      	ldr	r2, [r3, #0]
 8011616:	687b      	ldr	r3, [r7, #4]
 8011618:	681b      	ldr	r3, [r3, #0]
 801161a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 801161e:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8011620:	687b      	ldr	r3, [r7, #4]
 8011622:	68db      	ldr	r3, [r3, #12]
 8011624:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8011628:	d902      	bls.n	8011630 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 801162a:	2300      	movs	r3, #0
 801162c:	60fb      	str	r3, [r7, #12]
 801162e:	e002      	b.n	8011636 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8011630:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8011634:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8011636:	687b      	ldr	r3, [r7, #4]
 8011638:	68db      	ldr	r3, [r3, #12]
 801163a:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 801163e:	d007      	beq.n	8011650 <HAL_SPI_Init+0xa0>
 8011640:	687b      	ldr	r3, [r7, #4]
 8011642:	68db      	ldr	r3, [r3, #12]
 8011644:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8011648:	d002      	beq.n	8011650 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 801164a:	687b      	ldr	r3, [r7, #4]
 801164c:	2200      	movs	r2, #0
 801164e:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8011650:	687b      	ldr	r3, [r7, #4]
 8011652:	685b      	ldr	r3, [r3, #4]
 8011654:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8011658:	687b      	ldr	r3, [r7, #4]
 801165a:	689b      	ldr	r3, [r3, #8]
 801165c:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8011660:	431a      	orrs	r2, r3
 8011662:	687b      	ldr	r3, [r7, #4]
 8011664:	691b      	ldr	r3, [r3, #16]
 8011666:	f003 0302 	and.w	r3, r3, #2
 801166a:	431a      	orrs	r2, r3
 801166c:	687b      	ldr	r3, [r7, #4]
 801166e:	695b      	ldr	r3, [r3, #20]
 8011670:	f003 0301 	and.w	r3, r3, #1
 8011674:	431a      	orrs	r2, r3
 8011676:	687b      	ldr	r3, [r7, #4]
 8011678:	699b      	ldr	r3, [r3, #24]
 801167a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 801167e:	431a      	orrs	r2, r3
 8011680:	687b      	ldr	r3, [r7, #4]
 8011682:	69db      	ldr	r3, [r3, #28]
 8011684:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8011688:	431a      	orrs	r2, r3
 801168a:	687b      	ldr	r3, [r7, #4]
 801168c:	6a1b      	ldr	r3, [r3, #32]
 801168e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8011692:	ea42 0103 	orr.w	r1, r2, r3
 8011696:	687b      	ldr	r3, [r7, #4]
 8011698:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801169a:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 801169e:	687b      	ldr	r3, [r7, #4]
 80116a0:	681b      	ldr	r3, [r3, #0]
 80116a2:	430a      	orrs	r2, r1
 80116a4:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80116a6:	687b      	ldr	r3, [r7, #4]
 80116a8:	699b      	ldr	r3, [r3, #24]
 80116aa:	0c1b      	lsrs	r3, r3, #16
 80116ac:	f003 0204 	and.w	r2, r3, #4
 80116b0:	687b      	ldr	r3, [r7, #4]
 80116b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80116b4:	f003 0310 	and.w	r3, r3, #16
 80116b8:	431a      	orrs	r2, r3
 80116ba:	687b      	ldr	r3, [r7, #4]
 80116bc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80116be:	f003 0308 	and.w	r3, r3, #8
 80116c2:	431a      	orrs	r2, r3
 80116c4:	687b      	ldr	r3, [r7, #4]
 80116c6:	68db      	ldr	r3, [r3, #12]
 80116c8:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 80116cc:	ea42 0103 	orr.w	r1, r2, r3
 80116d0:	68fb      	ldr	r3, [r7, #12]
 80116d2:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 80116d6:	687b      	ldr	r3, [r7, #4]
 80116d8:	681b      	ldr	r3, [r3, #0]
 80116da:	430a      	orrs	r2, r1
 80116dc:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80116de:	687b      	ldr	r3, [r7, #4]
 80116e0:	2200      	movs	r2, #0
 80116e2:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80116e4:	687b      	ldr	r3, [r7, #4]
 80116e6:	2201      	movs	r2, #1
 80116e8:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 80116ec:	2300      	movs	r3, #0
}
 80116ee:	4618      	mov	r0, r3
 80116f0:	3710      	adds	r7, #16
 80116f2:	46bd      	mov	sp, r7
 80116f4:	bd80      	pop	{r7, pc}

080116f6 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80116f6:	b580      	push	{r7, lr}
 80116f8:	b088      	sub	sp, #32
 80116fa:	af00      	add	r7, sp, #0
 80116fc:	60f8      	str	r0, [r7, #12]
 80116fe:	60b9      	str	r1, [r7, #8]
 8011700:	603b      	str	r3, [r7, #0]
 8011702:	4613      	mov	r3, r2
 8011704:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8011706:	f7f9 fb77 	bl	800adf8 <HAL_GetTick>
 801170a:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 801170c:	88fb      	ldrh	r3, [r7, #6]
 801170e:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 8011710:	68fb      	ldr	r3, [r7, #12]
 8011712:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8011716:	b2db      	uxtb	r3, r3
 8011718:	2b01      	cmp	r3, #1
 801171a:	d001      	beq.n	8011720 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 801171c:	2302      	movs	r3, #2
 801171e:	e15c      	b.n	80119da <HAL_SPI_Transmit+0x2e4>
  }

  if ((pData == NULL) || (Size == 0U))
 8011720:	68bb      	ldr	r3, [r7, #8]
 8011722:	2b00      	cmp	r3, #0
 8011724:	d002      	beq.n	801172c <HAL_SPI_Transmit+0x36>
 8011726:	88fb      	ldrh	r3, [r7, #6]
 8011728:	2b00      	cmp	r3, #0
 801172a:	d101      	bne.n	8011730 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 801172c:	2301      	movs	r3, #1
 801172e:	e154      	b.n	80119da <HAL_SPI_Transmit+0x2e4>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8011730:	68fb      	ldr	r3, [r7, #12]
 8011732:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8011736:	2b01      	cmp	r3, #1
 8011738:	d101      	bne.n	801173e <HAL_SPI_Transmit+0x48>
 801173a:	2302      	movs	r3, #2
 801173c:	e14d      	b.n	80119da <HAL_SPI_Transmit+0x2e4>
 801173e:	68fb      	ldr	r3, [r7, #12]
 8011740:	2201      	movs	r2, #1
 8011742:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8011746:	68fb      	ldr	r3, [r7, #12]
 8011748:	2203      	movs	r2, #3
 801174a:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 801174e:	68fb      	ldr	r3, [r7, #12]
 8011750:	2200      	movs	r2, #0
 8011752:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8011754:	68fb      	ldr	r3, [r7, #12]
 8011756:	68ba      	ldr	r2, [r7, #8]
 8011758:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 801175a:	68fb      	ldr	r3, [r7, #12]
 801175c:	88fa      	ldrh	r2, [r7, #6]
 801175e:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 8011760:	68fb      	ldr	r3, [r7, #12]
 8011762:	88fa      	ldrh	r2, [r7, #6]
 8011764:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8011766:	68fb      	ldr	r3, [r7, #12]
 8011768:	2200      	movs	r2, #0
 801176a:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 801176c:	68fb      	ldr	r3, [r7, #12]
 801176e:	2200      	movs	r2, #0
 8011770:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = 0U;
 8011774:	68fb      	ldr	r3, [r7, #12]
 8011776:	2200      	movs	r2, #0
 8011778:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxISR       = NULL;
 801177c:	68fb      	ldr	r3, [r7, #12]
 801177e:	2200      	movs	r2, #0
 8011780:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->RxISR       = NULL;
 8011782:	68fb      	ldr	r3, [r7, #12]
 8011784:	2200      	movs	r2, #0
 8011786:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8011788:	68fb      	ldr	r3, [r7, #12]
 801178a:	689b      	ldr	r3, [r3, #8]
 801178c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8011790:	d10f      	bne.n	80117b2 <HAL_SPI_Transmit+0xbc>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8011792:	68fb      	ldr	r3, [r7, #12]
 8011794:	681b      	ldr	r3, [r3, #0]
 8011796:	681a      	ldr	r2, [r3, #0]
 8011798:	68fb      	ldr	r3, [r7, #12]
 801179a:	681b      	ldr	r3, [r3, #0]
 801179c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80117a0:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80117a2:	68fb      	ldr	r3, [r7, #12]
 80117a4:	681b      	ldr	r3, [r3, #0]
 80117a6:	681a      	ldr	r2, [r3, #0]
 80117a8:	68fb      	ldr	r3, [r7, #12]
 80117aa:	681b      	ldr	r3, [r3, #0]
 80117ac:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80117b0:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80117b2:	68fb      	ldr	r3, [r7, #12]
 80117b4:	681b      	ldr	r3, [r3, #0]
 80117b6:	681b      	ldr	r3, [r3, #0]
 80117b8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80117bc:	2b40      	cmp	r3, #64	@ 0x40
 80117be:	d007      	beq.n	80117d0 <HAL_SPI_Transmit+0xda>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80117c0:	68fb      	ldr	r3, [r7, #12]
 80117c2:	681b      	ldr	r3, [r3, #0]
 80117c4:	681a      	ldr	r2, [r3, #0]
 80117c6:	68fb      	ldr	r3, [r7, #12]
 80117c8:	681b      	ldr	r3, [r3, #0]
 80117ca:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80117ce:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80117d0:	68fb      	ldr	r3, [r7, #12]
 80117d2:	68db      	ldr	r3, [r3, #12]
 80117d4:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80117d8:	d952      	bls.n	8011880 <HAL_SPI_Transmit+0x18a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80117da:	68fb      	ldr	r3, [r7, #12]
 80117dc:	685b      	ldr	r3, [r3, #4]
 80117de:	2b00      	cmp	r3, #0
 80117e0:	d002      	beq.n	80117e8 <HAL_SPI_Transmit+0xf2>
 80117e2:	8b7b      	ldrh	r3, [r7, #26]
 80117e4:	2b01      	cmp	r3, #1
 80117e6:	d145      	bne.n	8011874 <HAL_SPI_Transmit+0x17e>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80117e8:	68fb      	ldr	r3, [r7, #12]
 80117ea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80117ec:	881a      	ldrh	r2, [r3, #0]
 80117ee:	68fb      	ldr	r3, [r7, #12]
 80117f0:	681b      	ldr	r3, [r3, #0]
 80117f2:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80117f4:	68fb      	ldr	r3, [r7, #12]
 80117f6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80117f8:	1c9a      	adds	r2, r3, #2
 80117fa:	68fb      	ldr	r3, [r7, #12]
 80117fc:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 80117fe:	68fb      	ldr	r3, [r7, #12]
 8011800:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8011802:	b29b      	uxth	r3, r3
 8011804:	3b01      	subs	r3, #1
 8011806:	b29a      	uxth	r2, r3
 8011808:	68fb      	ldr	r3, [r7, #12]
 801180a:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 801180c:	e032      	b.n	8011874 <HAL_SPI_Transmit+0x17e>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 801180e:	68fb      	ldr	r3, [r7, #12]
 8011810:	681b      	ldr	r3, [r3, #0]
 8011812:	689b      	ldr	r3, [r3, #8]
 8011814:	f003 0302 	and.w	r3, r3, #2
 8011818:	2b02      	cmp	r3, #2
 801181a:	d112      	bne.n	8011842 <HAL_SPI_Transmit+0x14c>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 801181c:	68fb      	ldr	r3, [r7, #12]
 801181e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8011820:	881a      	ldrh	r2, [r3, #0]
 8011822:	68fb      	ldr	r3, [r7, #12]
 8011824:	681b      	ldr	r3, [r3, #0]
 8011826:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8011828:	68fb      	ldr	r3, [r7, #12]
 801182a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801182c:	1c9a      	adds	r2, r3, #2
 801182e:	68fb      	ldr	r3, [r7, #12]
 8011830:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8011832:	68fb      	ldr	r3, [r7, #12]
 8011834:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8011836:	b29b      	uxth	r3, r3
 8011838:	3b01      	subs	r3, #1
 801183a:	b29a      	uxth	r2, r3
 801183c:	68fb      	ldr	r3, [r7, #12]
 801183e:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8011840:	e018      	b.n	8011874 <HAL_SPI_Transmit+0x17e>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8011842:	f7f9 fad9 	bl	800adf8 <HAL_GetTick>
 8011846:	4602      	mov	r2, r0
 8011848:	69fb      	ldr	r3, [r7, #28]
 801184a:	1ad3      	subs	r3, r2, r3
 801184c:	683a      	ldr	r2, [r7, #0]
 801184e:	429a      	cmp	r2, r3
 8011850:	d803      	bhi.n	801185a <HAL_SPI_Transmit+0x164>
 8011852:	683b      	ldr	r3, [r7, #0]
 8011854:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011858:	d102      	bne.n	8011860 <HAL_SPI_Transmit+0x16a>
 801185a:	683b      	ldr	r3, [r7, #0]
 801185c:	2b00      	cmp	r3, #0
 801185e:	d109      	bne.n	8011874 <HAL_SPI_Transmit+0x17e>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8011860:	68fb      	ldr	r3, [r7, #12]
 8011862:	2201      	movs	r2, #1
 8011864:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 8011868:	68fb      	ldr	r3, [r7, #12]
 801186a:	2200      	movs	r2, #0
 801186c:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 8011870:	2303      	movs	r3, #3
 8011872:	e0b2      	b.n	80119da <HAL_SPI_Transmit+0x2e4>
    while (hspi->TxXferCount > 0U)
 8011874:	68fb      	ldr	r3, [r7, #12]
 8011876:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8011878:	b29b      	uxth	r3, r3
 801187a:	2b00      	cmp	r3, #0
 801187c:	d1c7      	bne.n	801180e <HAL_SPI_Transmit+0x118>
 801187e:	e083      	b.n	8011988 <HAL_SPI_Transmit+0x292>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8011880:	68fb      	ldr	r3, [r7, #12]
 8011882:	685b      	ldr	r3, [r3, #4]
 8011884:	2b00      	cmp	r3, #0
 8011886:	d002      	beq.n	801188e <HAL_SPI_Transmit+0x198>
 8011888:	8b7b      	ldrh	r3, [r7, #26]
 801188a:	2b01      	cmp	r3, #1
 801188c:	d177      	bne.n	801197e <HAL_SPI_Transmit+0x288>
    {
      if (hspi->TxXferCount > 1U)
 801188e:	68fb      	ldr	r3, [r7, #12]
 8011890:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8011892:	b29b      	uxth	r3, r3
 8011894:	2b01      	cmp	r3, #1
 8011896:	d912      	bls.n	80118be <HAL_SPI_Transmit+0x1c8>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8011898:	68fb      	ldr	r3, [r7, #12]
 801189a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801189c:	881a      	ldrh	r2, [r3, #0]
 801189e:	68fb      	ldr	r3, [r7, #12]
 80118a0:	681b      	ldr	r3, [r3, #0]
 80118a2:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80118a4:	68fb      	ldr	r3, [r7, #12]
 80118a6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80118a8:	1c9a      	adds	r2, r3, #2
 80118aa:	68fb      	ldr	r3, [r7, #12]
 80118ac:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 80118ae:	68fb      	ldr	r3, [r7, #12]
 80118b0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80118b2:	b29b      	uxth	r3, r3
 80118b4:	3b02      	subs	r3, #2
 80118b6:	b29a      	uxth	r2, r3
 80118b8:	68fb      	ldr	r3, [r7, #12]
 80118ba:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80118bc:	e05f      	b.n	801197e <HAL_SPI_Transmit+0x288>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 80118be:	68fb      	ldr	r3, [r7, #12]
 80118c0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80118c2:	68fb      	ldr	r3, [r7, #12]
 80118c4:	681b      	ldr	r3, [r3, #0]
 80118c6:	330c      	adds	r3, #12
 80118c8:	7812      	ldrb	r2, [r2, #0]
 80118ca:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 80118cc:	68fb      	ldr	r3, [r7, #12]
 80118ce:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80118d0:	1c5a      	adds	r2, r3, #1
 80118d2:	68fb      	ldr	r3, [r7, #12]
 80118d4:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 80118d6:	68fb      	ldr	r3, [r7, #12]
 80118d8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80118da:	b29b      	uxth	r3, r3
 80118dc:	3b01      	subs	r3, #1
 80118de:	b29a      	uxth	r2, r3
 80118e0:	68fb      	ldr	r3, [r7, #12]
 80118e2:	87da      	strh	r2, [r3, #62]	@ 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 80118e4:	e04b      	b.n	801197e <HAL_SPI_Transmit+0x288>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80118e6:	68fb      	ldr	r3, [r7, #12]
 80118e8:	681b      	ldr	r3, [r3, #0]
 80118ea:	689b      	ldr	r3, [r3, #8]
 80118ec:	f003 0302 	and.w	r3, r3, #2
 80118f0:	2b02      	cmp	r3, #2
 80118f2:	d12b      	bne.n	801194c <HAL_SPI_Transmit+0x256>
      {
        if (hspi->TxXferCount > 1U)
 80118f4:	68fb      	ldr	r3, [r7, #12]
 80118f6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80118f8:	b29b      	uxth	r3, r3
 80118fa:	2b01      	cmp	r3, #1
 80118fc:	d912      	bls.n	8011924 <HAL_SPI_Transmit+0x22e>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80118fe:	68fb      	ldr	r3, [r7, #12]
 8011900:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8011902:	881a      	ldrh	r2, [r3, #0]
 8011904:	68fb      	ldr	r3, [r7, #12]
 8011906:	681b      	ldr	r3, [r3, #0]
 8011908:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 801190a:	68fb      	ldr	r3, [r7, #12]
 801190c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801190e:	1c9a      	adds	r2, r3, #2
 8011910:	68fb      	ldr	r3, [r7, #12]
 8011912:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 8011914:	68fb      	ldr	r3, [r7, #12]
 8011916:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8011918:	b29b      	uxth	r3, r3
 801191a:	3b02      	subs	r3, #2
 801191c:	b29a      	uxth	r2, r3
 801191e:	68fb      	ldr	r3, [r7, #12]
 8011920:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8011922:	e02c      	b.n	801197e <HAL_SPI_Transmit+0x288>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8011924:	68fb      	ldr	r3, [r7, #12]
 8011926:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8011928:	68fb      	ldr	r3, [r7, #12]
 801192a:	681b      	ldr	r3, [r3, #0]
 801192c:	330c      	adds	r3, #12
 801192e:	7812      	ldrb	r2, [r2, #0]
 8011930:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8011932:	68fb      	ldr	r3, [r7, #12]
 8011934:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8011936:	1c5a      	adds	r2, r3, #1
 8011938:	68fb      	ldr	r3, [r7, #12]
 801193a:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 801193c:	68fb      	ldr	r3, [r7, #12]
 801193e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8011940:	b29b      	uxth	r3, r3
 8011942:	3b01      	subs	r3, #1
 8011944:	b29a      	uxth	r2, r3
 8011946:	68fb      	ldr	r3, [r7, #12]
 8011948:	87da      	strh	r2, [r3, #62]	@ 0x3e
 801194a:	e018      	b.n	801197e <HAL_SPI_Transmit+0x288>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 801194c:	f7f9 fa54 	bl	800adf8 <HAL_GetTick>
 8011950:	4602      	mov	r2, r0
 8011952:	69fb      	ldr	r3, [r7, #28]
 8011954:	1ad3      	subs	r3, r2, r3
 8011956:	683a      	ldr	r2, [r7, #0]
 8011958:	429a      	cmp	r2, r3
 801195a:	d803      	bhi.n	8011964 <HAL_SPI_Transmit+0x26e>
 801195c:	683b      	ldr	r3, [r7, #0]
 801195e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011962:	d102      	bne.n	801196a <HAL_SPI_Transmit+0x274>
 8011964:	683b      	ldr	r3, [r7, #0]
 8011966:	2b00      	cmp	r3, #0
 8011968:	d109      	bne.n	801197e <HAL_SPI_Transmit+0x288>
        {
          hspi->State = HAL_SPI_STATE_READY;
 801196a:	68fb      	ldr	r3, [r7, #12]
 801196c:	2201      	movs	r2, #1
 801196e:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 8011972:	68fb      	ldr	r3, [r7, #12]
 8011974:	2200      	movs	r2, #0
 8011976:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 801197a:	2303      	movs	r3, #3
 801197c:	e02d      	b.n	80119da <HAL_SPI_Transmit+0x2e4>
    while (hspi->TxXferCount > 0U)
 801197e:	68fb      	ldr	r3, [r7, #12]
 8011980:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8011982:	b29b      	uxth	r3, r3
 8011984:	2b00      	cmp	r3, #0
 8011986:	d1ae      	bne.n	80118e6 <HAL_SPI_Transmit+0x1f0>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8011988:	69fa      	ldr	r2, [r7, #28]
 801198a:	6839      	ldr	r1, [r7, #0]
 801198c:	68f8      	ldr	r0, [r7, #12]
 801198e:	f000 fcf5 	bl	801237c <SPI_EndRxTxTransaction>
 8011992:	4603      	mov	r3, r0
 8011994:	2b00      	cmp	r3, #0
 8011996:	d002      	beq.n	801199e <HAL_SPI_Transmit+0x2a8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8011998:	68fb      	ldr	r3, [r7, #12]
 801199a:	2220      	movs	r2, #32
 801199c:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 801199e:	68fb      	ldr	r3, [r7, #12]
 80119a0:	689b      	ldr	r3, [r3, #8]
 80119a2:	2b00      	cmp	r3, #0
 80119a4:	d10a      	bne.n	80119bc <HAL_SPI_Transmit+0x2c6>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80119a6:	2300      	movs	r3, #0
 80119a8:	617b      	str	r3, [r7, #20]
 80119aa:	68fb      	ldr	r3, [r7, #12]
 80119ac:	681b      	ldr	r3, [r3, #0]
 80119ae:	68db      	ldr	r3, [r3, #12]
 80119b0:	617b      	str	r3, [r7, #20]
 80119b2:	68fb      	ldr	r3, [r7, #12]
 80119b4:	681b      	ldr	r3, [r3, #0]
 80119b6:	689b      	ldr	r3, [r3, #8]
 80119b8:	617b      	str	r3, [r7, #20]
 80119ba:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 80119bc:	68fb      	ldr	r3, [r7, #12]
 80119be:	2201      	movs	r2, #1
 80119c0:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80119c4:	68fb      	ldr	r3, [r7, #12]
 80119c6:	2200      	movs	r2, #0
 80119c8:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80119cc:	68fb      	ldr	r3, [r7, #12]
 80119ce:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80119d0:	2b00      	cmp	r3, #0
 80119d2:	d001      	beq.n	80119d8 <HAL_SPI_Transmit+0x2e2>
  {
    return HAL_ERROR;
 80119d4:	2301      	movs	r3, #1
 80119d6:	e000      	b.n	80119da <HAL_SPI_Transmit+0x2e4>
  }
  else
  {
    return HAL_OK;
 80119d8:	2300      	movs	r3, #0
  }
}
 80119da:	4618      	mov	r0, r3
 80119dc:	3720      	adds	r7, #32
 80119de:	46bd      	mov	sp, r7
 80119e0:	bd80      	pop	{r7, pc}

080119e2 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80119e2:	b580      	push	{r7, lr}
 80119e4:	b088      	sub	sp, #32
 80119e6:	af02      	add	r7, sp, #8
 80119e8:	60f8      	str	r0, [r7, #12]
 80119ea:	60b9      	str	r1, [r7, #8]
 80119ec:	603b      	str	r3, [r7, #0]
 80119ee:	4613      	mov	r3, r2
 80119f0:	80fb      	strh	r3, [r7, #6]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;

  if (hspi->State != HAL_SPI_STATE_READY)
 80119f2:	68fb      	ldr	r3, [r7, #12]
 80119f4:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 80119f8:	b2db      	uxtb	r3, r3
 80119fa:	2b01      	cmp	r3, #1
 80119fc:	d001      	beq.n	8011a02 <HAL_SPI_Receive+0x20>
  {
    return HAL_BUSY;
 80119fe:	2302      	movs	r3, #2
 8011a00:	e123      	b.n	8011c4a <HAL_SPI_Receive+0x268>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8011a02:	68fb      	ldr	r3, [r7, #12]
 8011a04:	685b      	ldr	r3, [r3, #4]
 8011a06:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8011a0a:	d112      	bne.n	8011a32 <HAL_SPI_Receive+0x50>
 8011a0c:	68fb      	ldr	r3, [r7, #12]
 8011a0e:	689b      	ldr	r3, [r3, #8]
 8011a10:	2b00      	cmp	r3, #0
 8011a12:	d10e      	bne.n	8011a32 <HAL_SPI_Receive+0x50>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8011a14:	68fb      	ldr	r3, [r7, #12]
 8011a16:	2204      	movs	r2, #4
 8011a18:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8011a1c:	88fa      	ldrh	r2, [r7, #6]
 8011a1e:	683b      	ldr	r3, [r7, #0]
 8011a20:	9300      	str	r3, [sp, #0]
 8011a22:	4613      	mov	r3, r2
 8011a24:	68ba      	ldr	r2, [r7, #8]
 8011a26:	68b9      	ldr	r1, [r7, #8]
 8011a28:	68f8      	ldr	r0, [r7, #12]
 8011a2a:	f000 f912 	bl	8011c52 <HAL_SPI_TransmitReceive>
 8011a2e:	4603      	mov	r3, r0
 8011a30:	e10b      	b.n	8011c4a <HAL_SPI_Receive+0x268>
  }

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8011a32:	f7f9 f9e1 	bl	800adf8 <HAL_GetTick>
 8011a36:	6178      	str	r0, [r7, #20]

  if ((pData == NULL) || (Size == 0U))
 8011a38:	68bb      	ldr	r3, [r7, #8]
 8011a3a:	2b00      	cmp	r3, #0
 8011a3c:	d002      	beq.n	8011a44 <HAL_SPI_Receive+0x62>
 8011a3e:	88fb      	ldrh	r3, [r7, #6]
 8011a40:	2b00      	cmp	r3, #0
 8011a42:	d101      	bne.n	8011a48 <HAL_SPI_Receive+0x66>
  {
    return HAL_ERROR;
 8011a44:	2301      	movs	r3, #1
 8011a46:	e100      	b.n	8011c4a <HAL_SPI_Receive+0x268>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8011a48:	68fb      	ldr	r3, [r7, #12]
 8011a4a:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8011a4e:	2b01      	cmp	r3, #1
 8011a50:	d101      	bne.n	8011a56 <HAL_SPI_Receive+0x74>
 8011a52:	2302      	movs	r3, #2
 8011a54:	e0f9      	b.n	8011c4a <HAL_SPI_Receive+0x268>
 8011a56:	68fb      	ldr	r3, [r7, #12]
 8011a58:	2201      	movs	r2, #1
 8011a5a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8011a5e:	68fb      	ldr	r3, [r7, #12]
 8011a60:	2204      	movs	r2, #4
 8011a62:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8011a66:	68fb      	ldr	r3, [r7, #12]
 8011a68:	2200      	movs	r2, #0
 8011a6a:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8011a6c:	68fb      	ldr	r3, [r7, #12]
 8011a6e:	68ba      	ldr	r2, [r7, #8]
 8011a70:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = Size;
 8011a72:	68fb      	ldr	r3, [r7, #12]
 8011a74:	88fa      	ldrh	r2, [r7, #6]
 8011a76:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = Size;
 8011a7a:	68fb      	ldr	r3, [r7, #12]
 8011a7c:	88fa      	ldrh	r2, [r7, #6]
 8011a7e:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8011a82:	68fb      	ldr	r3, [r7, #12]
 8011a84:	2200      	movs	r2, #0
 8011a86:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = 0U;
 8011a88:	68fb      	ldr	r3, [r7, #12]
 8011a8a:	2200      	movs	r2, #0
 8011a8c:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = 0U;
 8011a8e:	68fb      	ldr	r3, [r7, #12]
 8011a90:	2200      	movs	r2, #0
 8011a92:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxISR       = NULL;
 8011a94:	68fb      	ldr	r3, [r7, #12]
 8011a96:	2200      	movs	r2, #0
 8011a98:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 8011a9a:	68fb      	ldr	r3, [r7, #12]
 8011a9c:	2200      	movs	r2, #0
 8011a9e:	651a      	str	r2, [r3, #80]	@ 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8011aa0:	68fb      	ldr	r3, [r7, #12]
 8011aa2:	68db      	ldr	r3, [r3, #12]
 8011aa4:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8011aa8:	d908      	bls.n	8011abc <HAL_SPI_Receive+0xda>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8011aaa:	68fb      	ldr	r3, [r7, #12]
 8011aac:	681b      	ldr	r3, [r3, #0]
 8011aae:	685a      	ldr	r2, [r3, #4]
 8011ab0:	68fb      	ldr	r3, [r7, #12]
 8011ab2:	681b      	ldr	r3, [r3, #0]
 8011ab4:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8011ab8:	605a      	str	r2, [r3, #4]
 8011aba:	e007      	b.n	8011acc <HAL_SPI_Receive+0xea>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8011abc:	68fb      	ldr	r3, [r7, #12]
 8011abe:	681b      	ldr	r3, [r3, #0]
 8011ac0:	685a      	ldr	r2, [r3, #4]
 8011ac2:	68fb      	ldr	r3, [r7, #12]
 8011ac4:	681b      	ldr	r3, [r3, #0]
 8011ac6:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8011aca:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8011acc:	68fb      	ldr	r3, [r7, #12]
 8011ace:	689b      	ldr	r3, [r3, #8]
 8011ad0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8011ad4:	d10f      	bne.n	8011af6 <HAL_SPI_Receive+0x114>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8011ad6:	68fb      	ldr	r3, [r7, #12]
 8011ad8:	681b      	ldr	r3, [r3, #0]
 8011ada:	681a      	ldr	r2, [r3, #0]
 8011adc:	68fb      	ldr	r3, [r7, #12]
 8011ade:	681b      	ldr	r3, [r3, #0]
 8011ae0:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8011ae4:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8011ae6:	68fb      	ldr	r3, [r7, #12]
 8011ae8:	681b      	ldr	r3, [r3, #0]
 8011aea:	681a      	ldr	r2, [r3, #0]
 8011aec:	68fb      	ldr	r3, [r7, #12]
 8011aee:	681b      	ldr	r3, [r3, #0]
 8011af0:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8011af4:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8011af6:	68fb      	ldr	r3, [r7, #12]
 8011af8:	681b      	ldr	r3, [r3, #0]
 8011afa:	681b      	ldr	r3, [r3, #0]
 8011afc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8011b00:	2b40      	cmp	r3, #64	@ 0x40
 8011b02:	d007      	beq.n	8011b14 <HAL_SPI_Receive+0x132>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8011b04:	68fb      	ldr	r3, [r7, #12]
 8011b06:	681b      	ldr	r3, [r3, #0]
 8011b08:	681a      	ldr	r2, [r3, #0]
 8011b0a:	68fb      	ldr	r3, [r7, #12]
 8011b0c:	681b      	ldr	r3, [r3, #0]
 8011b0e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8011b12:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 8011b14:	68fb      	ldr	r3, [r7, #12]
 8011b16:	68db      	ldr	r3, [r3, #12]
 8011b18:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8011b1c:	d875      	bhi.n	8011c0a <HAL_SPI_Receive+0x228>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8011b1e:	e037      	b.n	8011b90 <HAL_SPI_Receive+0x1ae>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8011b20:	68fb      	ldr	r3, [r7, #12]
 8011b22:	681b      	ldr	r3, [r3, #0]
 8011b24:	689b      	ldr	r3, [r3, #8]
 8011b26:	f003 0301 	and.w	r3, r3, #1
 8011b2a:	2b01      	cmp	r3, #1
 8011b2c:	d117      	bne.n	8011b5e <HAL_SPI_Receive+0x17c>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8011b2e:	68fb      	ldr	r3, [r7, #12]
 8011b30:	681b      	ldr	r3, [r3, #0]
 8011b32:	f103 020c 	add.w	r2, r3, #12
 8011b36:	68fb      	ldr	r3, [r7, #12]
 8011b38:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8011b3a:	7812      	ldrb	r2, [r2, #0]
 8011b3c:	b2d2      	uxtb	r2, r2
 8011b3e:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8011b40:	68fb      	ldr	r3, [r7, #12]
 8011b42:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8011b44:	1c5a      	adds	r2, r3, #1
 8011b46:	68fb      	ldr	r3, [r7, #12]
 8011b48:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 8011b4a:	68fb      	ldr	r3, [r7, #12]
 8011b4c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8011b50:	b29b      	uxth	r3, r3
 8011b52:	3b01      	subs	r3, #1
 8011b54:	b29a      	uxth	r2, r3
 8011b56:	68fb      	ldr	r3, [r7, #12]
 8011b58:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
 8011b5c:	e018      	b.n	8011b90 <HAL_SPI_Receive+0x1ae>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8011b5e:	f7f9 f94b 	bl	800adf8 <HAL_GetTick>
 8011b62:	4602      	mov	r2, r0
 8011b64:	697b      	ldr	r3, [r7, #20]
 8011b66:	1ad3      	subs	r3, r2, r3
 8011b68:	683a      	ldr	r2, [r7, #0]
 8011b6a:	429a      	cmp	r2, r3
 8011b6c:	d803      	bhi.n	8011b76 <HAL_SPI_Receive+0x194>
 8011b6e:	683b      	ldr	r3, [r7, #0]
 8011b70:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011b74:	d102      	bne.n	8011b7c <HAL_SPI_Receive+0x19a>
 8011b76:	683b      	ldr	r3, [r7, #0]
 8011b78:	2b00      	cmp	r3, #0
 8011b7a:	d109      	bne.n	8011b90 <HAL_SPI_Receive+0x1ae>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8011b7c:	68fb      	ldr	r3, [r7, #12]
 8011b7e:	2201      	movs	r2, #1
 8011b80:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 8011b84:	68fb      	ldr	r3, [r7, #12]
 8011b86:	2200      	movs	r2, #0
 8011b88:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 8011b8c:	2303      	movs	r3, #3
 8011b8e:	e05c      	b.n	8011c4a <HAL_SPI_Receive+0x268>
    while (hspi->RxXferCount > 0U)
 8011b90:	68fb      	ldr	r3, [r7, #12]
 8011b92:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8011b96:	b29b      	uxth	r3, r3
 8011b98:	2b00      	cmp	r3, #0
 8011b9a:	d1c1      	bne.n	8011b20 <HAL_SPI_Receive+0x13e>
 8011b9c:	e03b      	b.n	8011c16 <HAL_SPI_Receive+0x234>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8011b9e:	68fb      	ldr	r3, [r7, #12]
 8011ba0:	681b      	ldr	r3, [r3, #0]
 8011ba2:	689b      	ldr	r3, [r3, #8]
 8011ba4:	f003 0301 	and.w	r3, r3, #1
 8011ba8:	2b01      	cmp	r3, #1
 8011baa:	d115      	bne.n	8011bd8 <HAL_SPI_Receive+0x1f6>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8011bac:	68fb      	ldr	r3, [r7, #12]
 8011bae:	681b      	ldr	r3, [r3, #0]
 8011bb0:	68da      	ldr	r2, [r3, #12]
 8011bb2:	68fb      	ldr	r3, [r7, #12]
 8011bb4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8011bb6:	b292      	uxth	r2, r2
 8011bb8:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8011bba:	68fb      	ldr	r3, [r7, #12]
 8011bbc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8011bbe:	1c9a      	adds	r2, r3, #2
 8011bc0:	68fb      	ldr	r3, [r7, #12]
 8011bc2:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 8011bc4:	68fb      	ldr	r3, [r7, #12]
 8011bc6:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8011bca:	b29b      	uxth	r3, r3
 8011bcc:	3b01      	subs	r3, #1
 8011bce:	b29a      	uxth	r2, r3
 8011bd0:	68fb      	ldr	r3, [r7, #12]
 8011bd2:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
 8011bd6:	e018      	b.n	8011c0a <HAL_SPI_Receive+0x228>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8011bd8:	f7f9 f90e 	bl	800adf8 <HAL_GetTick>
 8011bdc:	4602      	mov	r2, r0
 8011bde:	697b      	ldr	r3, [r7, #20]
 8011be0:	1ad3      	subs	r3, r2, r3
 8011be2:	683a      	ldr	r2, [r7, #0]
 8011be4:	429a      	cmp	r2, r3
 8011be6:	d803      	bhi.n	8011bf0 <HAL_SPI_Receive+0x20e>
 8011be8:	683b      	ldr	r3, [r7, #0]
 8011bea:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011bee:	d102      	bne.n	8011bf6 <HAL_SPI_Receive+0x214>
 8011bf0:	683b      	ldr	r3, [r7, #0]
 8011bf2:	2b00      	cmp	r3, #0
 8011bf4:	d109      	bne.n	8011c0a <HAL_SPI_Receive+0x228>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8011bf6:	68fb      	ldr	r3, [r7, #12]
 8011bf8:	2201      	movs	r2, #1
 8011bfa:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 8011bfe:	68fb      	ldr	r3, [r7, #12]
 8011c00:	2200      	movs	r2, #0
 8011c02:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 8011c06:	2303      	movs	r3, #3
 8011c08:	e01f      	b.n	8011c4a <HAL_SPI_Receive+0x268>
    while (hspi->RxXferCount > 0U)
 8011c0a:	68fb      	ldr	r3, [r7, #12]
 8011c0c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8011c10:	b29b      	uxth	r3, r3
 8011c12:	2b00      	cmp	r3, #0
 8011c14:	d1c3      	bne.n	8011b9e <HAL_SPI_Receive+0x1bc>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8011c16:	697a      	ldr	r2, [r7, #20]
 8011c18:	6839      	ldr	r1, [r7, #0]
 8011c1a:	68f8      	ldr	r0, [r7, #12]
 8011c1c:	f000 fb56 	bl	80122cc <SPI_EndRxTransaction>
 8011c20:	4603      	mov	r3, r0
 8011c22:	2b00      	cmp	r3, #0
 8011c24:	d002      	beq.n	8011c2c <HAL_SPI_Receive+0x24a>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8011c26:	68fb      	ldr	r3, [r7, #12]
 8011c28:	2220      	movs	r2, #32
 8011c2a:	661a      	str	r2, [r3, #96]	@ 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  hspi->State = HAL_SPI_STATE_READY;
 8011c2c:	68fb      	ldr	r3, [r7, #12]
 8011c2e:	2201      	movs	r2, #1
 8011c30:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8011c34:	68fb      	ldr	r3, [r7, #12]
 8011c36:	2200      	movs	r2, #0
 8011c38:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8011c3c:	68fb      	ldr	r3, [r7, #12]
 8011c3e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8011c40:	2b00      	cmp	r3, #0
 8011c42:	d001      	beq.n	8011c48 <HAL_SPI_Receive+0x266>
  {
    return HAL_ERROR;
 8011c44:	2301      	movs	r3, #1
 8011c46:	e000      	b.n	8011c4a <HAL_SPI_Receive+0x268>
  }
  else
  {
    return HAL_OK;
 8011c48:	2300      	movs	r3, #0
  }
}
 8011c4a:	4618      	mov	r0, r3
 8011c4c:	3718      	adds	r7, #24
 8011c4e:	46bd      	mov	sp, r7
 8011c50:	bd80      	pop	{r7, pc}

08011c52 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 8011c52:	b580      	push	{r7, lr}
 8011c54:	b08a      	sub	sp, #40	@ 0x28
 8011c56:	af00      	add	r7, sp, #0
 8011c58:	60f8      	str	r0, [r7, #12]
 8011c5a:	60b9      	str	r1, [r7, #8]
 8011c5c:	607a      	str	r2, [r7, #4]
 8011c5e:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8011c60:	2301      	movs	r3, #1
 8011c62:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8011c64:	f7f9 f8c8 	bl	800adf8 <HAL_GetTick>
 8011c68:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8011c6a:	68fb      	ldr	r3, [r7, #12]
 8011c6c:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8011c70:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 8011c72:	68fb      	ldr	r3, [r7, #12]
 8011c74:	685b      	ldr	r3, [r3, #4]
 8011c76:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8011c78:	887b      	ldrh	r3, [r7, #2]
 8011c7a:	82fb      	strh	r3, [r7, #22]
  initial_RxXferCount = Size;
 8011c7c:	887b      	ldrh	r3, [r7, #2]
 8011c7e:	82bb      	strh	r3, [r7, #20]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8011c80:	7ffb      	ldrb	r3, [r7, #31]
 8011c82:	2b01      	cmp	r3, #1
 8011c84:	d00c      	beq.n	8011ca0 <HAL_SPI_TransmitReceive+0x4e>
 8011c86:	69bb      	ldr	r3, [r7, #24]
 8011c88:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8011c8c:	d106      	bne.n	8011c9c <HAL_SPI_TransmitReceive+0x4a>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) &&
 8011c8e:	68fb      	ldr	r3, [r7, #12]
 8011c90:	689b      	ldr	r3, [r3, #8]
 8011c92:	2b00      	cmp	r3, #0
 8011c94:	d102      	bne.n	8011c9c <HAL_SPI_TransmitReceive+0x4a>
 8011c96:	7ffb      	ldrb	r3, [r7, #31]
 8011c98:	2b04      	cmp	r3, #4
 8011c9a:	d001      	beq.n	8011ca0 <HAL_SPI_TransmitReceive+0x4e>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    return HAL_BUSY;
 8011c9c:	2302      	movs	r3, #2
 8011c9e:	e1f3      	b.n	8012088 <HAL_SPI_TransmitReceive+0x436>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8011ca0:	68bb      	ldr	r3, [r7, #8]
 8011ca2:	2b00      	cmp	r3, #0
 8011ca4:	d005      	beq.n	8011cb2 <HAL_SPI_TransmitReceive+0x60>
 8011ca6:	687b      	ldr	r3, [r7, #4]
 8011ca8:	2b00      	cmp	r3, #0
 8011caa:	d002      	beq.n	8011cb2 <HAL_SPI_TransmitReceive+0x60>
 8011cac:	887b      	ldrh	r3, [r7, #2]
 8011cae:	2b00      	cmp	r3, #0
 8011cb0:	d101      	bne.n	8011cb6 <HAL_SPI_TransmitReceive+0x64>
  {
    return HAL_ERROR;
 8011cb2:	2301      	movs	r3, #1
 8011cb4:	e1e8      	b.n	8012088 <HAL_SPI_TransmitReceive+0x436>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8011cb6:	68fb      	ldr	r3, [r7, #12]
 8011cb8:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8011cbc:	2b01      	cmp	r3, #1
 8011cbe:	d101      	bne.n	8011cc4 <HAL_SPI_TransmitReceive+0x72>
 8011cc0:	2302      	movs	r3, #2
 8011cc2:	e1e1      	b.n	8012088 <HAL_SPI_TransmitReceive+0x436>
 8011cc4:	68fb      	ldr	r3, [r7, #12]
 8011cc6:	2201      	movs	r2, #1
 8011cc8:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8011ccc:	68fb      	ldr	r3, [r7, #12]
 8011cce:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8011cd2:	b2db      	uxtb	r3, r3
 8011cd4:	2b04      	cmp	r3, #4
 8011cd6:	d003      	beq.n	8011ce0 <HAL_SPI_TransmitReceive+0x8e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8011cd8:	68fb      	ldr	r3, [r7, #12]
 8011cda:	2205      	movs	r2, #5
 8011cdc:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8011ce0:	68fb      	ldr	r3, [r7, #12]
 8011ce2:	2200      	movs	r2, #0
 8011ce4:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8011ce6:	68fb      	ldr	r3, [r7, #12]
 8011ce8:	687a      	ldr	r2, [r7, #4]
 8011cea:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferCount = Size;
 8011cec:	68fb      	ldr	r3, [r7, #12]
 8011cee:	887a      	ldrh	r2, [r7, #2]
 8011cf0:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->RxXferSize  = Size;
 8011cf4:	68fb      	ldr	r3, [r7, #12]
 8011cf6:	887a      	ldrh	r2, [r7, #2]
 8011cf8:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 8011cfc:	68fb      	ldr	r3, [r7, #12]
 8011cfe:	68ba      	ldr	r2, [r7, #8]
 8011d00:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferCount = Size;
 8011d02:	68fb      	ldr	r3, [r7, #12]
 8011d04:	887a      	ldrh	r2, [r7, #2]
 8011d06:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferSize  = Size;
 8011d08:	68fb      	ldr	r3, [r7, #12]
 8011d0a:	887a      	ldrh	r2, [r7, #2]
 8011d0c:	879a      	strh	r2, [r3, #60]	@ 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8011d0e:	68fb      	ldr	r3, [r7, #12]
 8011d10:	2200      	movs	r2, #0
 8011d12:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 8011d14:	68fb      	ldr	r3, [r7, #12]
 8011d16:	2200      	movs	r2, #0
 8011d18:	651a      	str	r2, [r3, #80]	@ 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8011d1a:	68fb      	ldr	r3, [r7, #12]
 8011d1c:	68db      	ldr	r3, [r3, #12]
 8011d1e:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8011d22:	d802      	bhi.n	8011d2a <HAL_SPI_TransmitReceive+0xd8>
 8011d24:	8abb      	ldrh	r3, [r7, #20]
 8011d26:	2b01      	cmp	r3, #1
 8011d28:	d908      	bls.n	8011d3c <HAL_SPI_TransmitReceive+0xea>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8011d2a:	68fb      	ldr	r3, [r7, #12]
 8011d2c:	681b      	ldr	r3, [r3, #0]
 8011d2e:	685a      	ldr	r2, [r3, #4]
 8011d30:	68fb      	ldr	r3, [r7, #12]
 8011d32:	681b      	ldr	r3, [r3, #0]
 8011d34:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8011d38:	605a      	str	r2, [r3, #4]
 8011d3a:	e007      	b.n	8011d4c <HAL_SPI_TransmitReceive+0xfa>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8011d3c:	68fb      	ldr	r3, [r7, #12]
 8011d3e:	681b      	ldr	r3, [r3, #0]
 8011d40:	685a      	ldr	r2, [r3, #4]
 8011d42:	68fb      	ldr	r3, [r7, #12]
 8011d44:	681b      	ldr	r3, [r3, #0]
 8011d46:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8011d4a:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8011d4c:	68fb      	ldr	r3, [r7, #12]
 8011d4e:	681b      	ldr	r3, [r3, #0]
 8011d50:	681b      	ldr	r3, [r3, #0]
 8011d52:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8011d56:	2b40      	cmp	r3, #64	@ 0x40
 8011d58:	d007      	beq.n	8011d6a <HAL_SPI_TransmitReceive+0x118>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8011d5a:	68fb      	ldr	r3, [r7, #12]
 8011d5c:	681b      	ldr	r3, [r3, #0]
 8011d5e:	681a      	ldr	r2, [r3, #0]
 8011d60:	68fb      	ldr	r3, [r7, #12]
 8011d62:	681b      	ldr	r3, [r3, #0]
 8011d64:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8011d68:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8011d6a:	68fb      	ldr	r3, [r7, #12]
 8011d6c:	68db      	ldr	r3, [r3, #12]
 8011d6e:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8011d72:	f240 8083 	bls.w	8011e7c <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8011d76:	68fb      	ldr	r3, [r7, #12]
 8011d78:	685b      	ldr	r3, [r3, #4]
 8011d7a:	2b00      	cmp	r3, #0
 8011d7c:	d002      	beq.n	8011d84 <HAL_SPI_TransmitReceive+0x132>
 8011d7e:	8afb      	ldrh	r3, [r7, #22]
 8011d80:	2b01      	cmp	r3, #1
 8011d82:	d16f      	bne.n	8011e64 <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8011d84:	68fb      	ldr	r3, [r7, #12]
 8011d86:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8011d88:	881a      	ldrh	r2, [r3, #0]
 8011d8a:	68fb      	ldr	r3, [r7, #12]
 8011d8c:	681b      	ldr	r3, [r3, #0]
 8011d8e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8011d90:	68fb      	ldr	r3, [r7, #12]
 8011d92:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8011d94:	1c9a      	adds	r2, r3, #2
 8011d96:	68fb      	ldr	r3, [r7, #12]
 8011d98:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8011d9a:	68fb      	ldr	r3, [r7, #12]
 8011d9c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8011d9e:	b29b      	uxth	r3, r3
 8011da0:	3b01      	subs	r3, #1
 8011da2:	b29a      	uxth	r2, r3
 8011da4:	68fb      	ldr	r3, [r7, #12]
 8011da6:	87da      	strh	r2, [r3, #62]	@ 0x3e
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8011da8:	e05c      	b.n	8011e64 <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8011daa:	68fb      	ldr	r3, [r7, #12]
 8011dac:	681b      	ldr	r3, [r3, #0]
 8011dae:	689b      	ldr	r3, [r3, #8]
 8011db0:	f003 0302 	and.w	r3, r3, #2
 8011db4:	2b02      	cmp	r3, #2
 8011db6:	d11b      	bne.n	8011df0 <HAL_SPI_TransmitReceive+0x19e>
 8011db8:	68fb      	ldr	r3, [r7, #12]
 8011dba:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8011dbc:	b29b      	uxth	r3, r3
 8011dbe:	2b00      	cmp	r3, #0
 8011dc0:	d016      	beq.n	8011df0 <HAL_SPI_TransmitReceive+0x19e>
 8011dc2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011dc4:	2b01      	cmp	r3, #1
 8011dc6:	d113      	bne.n	8011df0 <HAL_SPI_TransmitReceive+0x19e>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8011dc8:	68fb      	ldr	r3, [r7, #12]
 8011dca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8011dcc:	881a      	ldrh	r2, [r3, #0]
 8011dce:	68fb      	ldr	r3, [r7, #12]
 8011dd0:	681b      	ldr	r3, [r3, #0]
 8011dd2:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8011dd4:	68fb      	ldr	r3, [r7, #12]
 8011dd6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8011dd8:	1c9a      	adds	r2, r3, #2
 8011dda:	68fb      	ldr	r3, [r7, #12]
 8011ddc:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8011dde:	68fb      	ldr	r3, [r7, #12]
 8011de0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8011de2:	b29b      	uxth	r3, r3
 8011de4:	3b01      	subs	r3, #1
 8011de6:	b29a      	uxth	r2, r3
 8011de8:	68fb      	ldr	r3, [r7, #12]
 8011dea:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8011dec:	2300      	movs	r3, #0
 8011dee:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8011df0:	68fb      	ldr	r3, [r7, #12]
 8011df2:	681b      	ldr	r3, [r3, #0]
 8011df4:	689b      	ldr	r3, [r3, #8]
 8011df6:	f003 0301 	and.w	r3, r3, #1
 8011dfa:	2b01      	cmp	r3, #1
 8011dfc:	d11c      	bne.n	8011e38 <HAL_SPI_TransmitReceive+0x1e6>
 8011dfe:	68fb      	ldr	r3, [r7, #12]
 8011e00:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8011e04:	b29b      	uxth	r3, r3
 8011e06:	2b00      	cmp	r3, #0
 8011e08:	d016      	beq.n	8011e38 <HAL_SPI_TransmitReceive+0x1e6>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8011e0a:	68fb      	ldr	r3, [r7, #12]
 8011e0c:	681b      	ldr	r3, [r3, #0]
 8011e0e:	68da      	ldr	r2, [r3, #12]
 8011e10:	68fb      	ldr	r3, [r7, #12]
 8011e12:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8011e14:	b292      	uxth	r2, r2
 8011e16:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8011e18:	68fb      	ldr	r3, [r7, #12]
 8011e1a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8011e1c:	1c9a      	adds	r2, r3, #2
 8011e1e:	68fb      	ldr	r3, [r7, #12]
 8011e20:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 8011e22:	68fb      	ldr	r3, [r7, #12]
 8011e24:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8011e28:	b29b      	uxth	r3, r3
 8011e2a:	3b01      	subs	r3, #1
 8011e2c:	b29a      	uxth	r2, r3
 8011e2e:	68fb      	ldr	r3, [r7, #12]
 8011e30:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8011e34:	2301      	movs	r3, #1
 8011e36:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8011e38:	f7f8 ffde 	bl	800adf8 <HAL_GetTick>
 8011e3c:	4602      	mov	r2, r0
 8011e3e:	6a3b      	ldr	r3, [r7, #32]
 8011e40:	1ad3      	subs	r3, r2, r3
 8011e42:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8011e44:	429a      	cmp	r2, r3
 8011e46:	d80d      	bhi.n	8011e64 <HAL_SPI_TransmitReceive+0x212>
 8011e48:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011e4a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011e4e:	d009      	beq.n	8011e64 <HAL_SPI_TransmitReceive+0x212>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8011e50:	68fb      	ldr	r3, [r7, #12]
 8011e52:	2201      	movs	r2, #1
 8011e54:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        __HAL_UNLOCK(hspi);
 8011e58:	68fb      	ldr	r3, [r7, #12]
 8011e5a:	2200      	movs	r2, #0
 8011e5c:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
        return HAL_TIMEOUT;
 8011e60:	2303      	movs	r3, #3
 8011e62:	e111      	b.n	8012088 <HAL_SPI_TransmitReceive+0x436>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8011e64:	68fb      	ldr	r3, [r7, #12]
 8011e66:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8011e68:	b29b      	uxth	r3, r3
 8011e6a:	2b00      	cmp	r3, #0
 8011e6c:	d19d      	bne.n	8011daa <HAL_SPI_TransmitReceive+0x158>
 8011e6e:	68fb      	ldr	r3, [r7, #12]
 8011e70:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8011e74:	b29b      	uxth	r3, r3
 8011e76:	2b00      	cmp	r3, #0
 8011e78:	d197      	bne.n	8011daa <HAL_SPI_TransmitReceive+0x158>
 8011e7a:	e0e5      	b.n	8012048 <HAL_SPI_TransmitReceive+0x3f6>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8011e7c:	68fb      	ldr	r3, [r7, #12]
 8011e7e:	685b      	ldr	r3, [r3, #4]
 8011e80:	2b00      	cmp	r3, #0
 8011e82:	d003      	beq.n	8011e8c <HAL_SPI_TransmitReceive+0x23a>
 8011e84:	8afb      	ldrh	r3, [r7, #22]
 8011e86:	2b01      	cmp	r3, #1
 8011e88:	f040 80d1 	bne.w	801202e <HAL_SPI_TransmitReceive+0x3dc>
    {
      if (hspi->TxXferCount > 1U)
 8011e8c:	68fb      	ldr	r3, [r7, #12]
 8011e8e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8011e90:	b29b      	uxth	r3, r3
 8011e92:	2b01      	cmp	r3, #1
 8011e94:	d912      	bls.n	8011ebc <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8011e96:	68fb      	ldr	r3, [r7, #12]
 8011e98:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8011e9a:	881a      	ldrh	r2, [r3, #0]
 8011e9c:	68fb      	ldr	r3, [r7, #12]
 8011e9e:	681b      	ldr	r3, [r3, #0]
 8011ea0:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8011ea2:	68fb      	ldr	r3, [r7, #12]
 8011ea4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8011ea6:	1c9a      	adds	r2, r3, #2
 8011ea8:	68fb      	ldr	r3, [r7, #12]
 8011eaa:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 8011eac:	68fb      	ldr	r3, [r7, #12]
 8011eae:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8011eb0:	b29b      	uxth	r3, r3
 8011eb2:	3b02      	subs	r3, #2
 8011eb4:	b29a      	uxth	r2, r3
 8011eb6:	68fb      	ldr	r3, [r7, #12]
 8011eb8:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8011eba:	e0b8      	b.n	801202e <HAL_SPI_TransmitReceive+0x3dc>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 8011ebc:	68fb      	ldr	r3, [r7, #12]
 8011ebe:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8011ec0:	68fb      	ldr	r3, [r7, #12]
 8011ec2:	681b      	ldr	r3, [r3, #0]
 8011ec4:	330c      	adds	r3, #12
 8011ec6:	7812      	ldrb	r2, [r2, #0]
 8011ec8:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8011eca:	68fb      	ldr	r3, [r7, #12]
 8011ecc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8011ece:	1c5a      	adds	r2, r3, #1
 8011ed0:	68fb      	ldr	r3, [r7, #12]
 8011ed2:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8011ed4:	68fb      	ldr	r3, [r7, #12]
 8011ed6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8011ed8:	b29b      	uxth	r3, r3
 8011eda:	3b01      	subs	r3, #1
 8011edc:	b29a      	uxth	r2, r3
 8011ede:	68fb      	ldr	r3, [r7, #12]
 8011ee0:	87da      	strh	r2, [r3, #62]	@ 0x3e
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
        }
#endif /* USE_SPI_CRC */
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8011ee2:	e0a4      	b.n	801202e <HAL_SPI_TransmitReceive+0x3dc>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8011ee4:	68fb      	ldr	r3, [r7, #12]
 8011ee6:	681b      	ldr	r3, [r3, #0]
 8011ee8:	689b      	ldr	r3, [r3, #8]
 8011eea:	f003 0302 	and.w	r3, r3, #2
 8011eee:	2b02      	cmp	r3, #2
 8011ef0:	d134      	bne.n	8011f5c <HAL_SPI_TransmitReceive+0x30a>
 8011ef2:	68fb      	ldr	r3, [r7, #12]
 8011ef4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8011ef6:	b29b      	uxth	r3, r3
 8011ef8:	2b00      	cmp	r3, #0
 8011efa:	d02f      	beq.n	8011f5c <HAL_SPI_TransmitReceive+0x30a>
 8011efc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011efe:	2b01      	cmp	r3, #1
 8011f00:	d12c      	bne.n	8011f5c <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 8011f02:	68fb      	ldr	r3, [r7, #12]
 8011f04:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8011f06:	b29b      	uxth	r3, r3
 8011f08:	2b01      	cmp	r3, #1
 8011f0a:	d912      	bls.n	8011f32 <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8011f0c:	68fb      	ldr	r3, [r7, #12]
 8011f0e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8011f10:	881a      	ldrh	r2, [r3, #0]
 8011f12:	68fb      	ldr	r3, [r7, #12]
 8011f14:	681b      	ldr	r3, [r3, #0]
 8011f16:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8011f18:	68fb      	ldr	r3, [r7, #12]
 8011f1a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8011f1c:	1c9a      	adds	r2, r3, #2
 8011f1e:	68fb      	ldr	r3, [r7, #12]
 8011f20:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 8011f22:	68fb      	ldr	r3, [r7, #12]
 8011f24:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8011f26:	b29b      	uxth	r3, r3
 8011f28:	3b02      	subs	r3, #2
 8011f2a:	b29a      	uxth	r2, r3
 8011f2c:	68fb      	ldr	r3, [r7, #12]
 8011f2e:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8011f30:	e012      	b.n	8011f58 <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 8011f32:	68fb      	ldr	r3, [r7, #12]
 8011f34:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8011f36:	68fb      	ldr	r3, [r7, #12]
 8011f38:	681b      	ldr	r3, [r3, #0]
 8011f3a:	330c      	adds	r3, #12
 8011f3c:	7812      	ldrb	r2, [r2, #0]
 8011f3e:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8011f40:	68fb      	ldr	r3, [r7, #12]
 8011f42:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8011f44:	1c5a      	adds	r2, r3, #1
 8011f46:	68fb      	ldr	r3, [r7, #12]
 8011f48:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 8011f4a:	68fb      	ldr	r3, [r7, #12]
 8011f4c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8011f4e:	b29b      	uxth	r3, r3
 8011f50:	3b01      	subs	r3, #1
 8011f52:	b29a      	uxth	r2, r3
 8011f54:	68fb      	ldr	r3, [r7, #12]
 8011f56:	87da      	strh	r2, [r3, #62]	@ 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8011f58:	2300      	movs	r3, #0
 8011f5a:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8011f5c:	68fb      	ldr	r3, [r7, #12]
 8011f5e:	681b      	ldr	r3, [r3, #0]
 8011f60:	689b      	ldr	r3, [r3, #8]
 8011f62:	f003 0301 	and.w	r3, r3, #1
 8011f66:	2b01      	cmp	r3, #1
 8011f68:	d148      	bne.n	8011ffc <HAL_SPI_TransmitReceive+0x3aa>
 8011f6a:	68fb      	ldr	r3, [r7, #12]
 8011f6c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8011f70:	b29b      	uxth	r3, r3
 8011f72:	2b00      	cmp	r3, #0
 8011f74:	d042      	beq.n	8011ffc <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 8011f76:	68fb      	ldr	r3, [r7, #12]
 8011f78:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8011f7c:	b29b      	uxth	r3, r3
 8011f7e:	2b01      	cmp	r3, #1
 8011f80:	d923      	bls.n	8011fca <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8011f82:	68fb      	ldr	r3, [r7, #12]
 8011f84:	681b      	ldr	r3, [r3, #0]
 8011f86:	68da      	ldr	r2, [r3, #12]
 8011f88:	68fb      	ldr	r3, [r7, #12]
 8011f8a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8011f8c:	b292      	uxth	r2, r2
 8011f8e:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8011f90:	68fb      	ldr	r3, [r7, #12]
 8011f92:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8011f94:	1c9a      	adds	r2, r3, #2
 8011f96:	68fb      	ldr	r3, [r7, #12]
 8011f98:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount -= 2U;
 8011f9a:	68fb      	ldr	r3, [r7, #12]
 8011f9c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8011fa0:	b29b      	uxth	r3, r3
 8011fa2:	3b02      	subs	r3, #2
 8011fa4:	b29a      	uxth	r2, r3
 8011fa6:	68fb      	ldr	r3, [r7, #12]
 8011fa8:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
          if (hspi->RxXferCount <= 1U)
 8011fac:	68fb      	ldr	r3, [r7, #12]
 8011fae:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8011fb2:	b29b      	uxth	r3, r3
 8011fb4:	2b01      	cmp	r3, #1
 8011fb6:	d81f      	bhi.n	8011ff8 <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8011fb8:	68fb      	ldr	r3, [r7, #12]
 8011fba:	681b      	ldr	r3, [r3, #0]
 8011fbc:	685a      	ldr	r2, [r3, #4]
 8011fbe:	68fb      	ldr	r3, [r7, #12]
 8011fc0:	681b      	ldr	r3, [r3, #0]
 8011fc2:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8011fc6:	605a      	str	r2, [r3, #4]
 8011fc8:	e016      	b.n	8011ff8 <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8011fca:	68fb      	ldr	r3, [r7, #12]
 8011fcc:	681b      	ldr	r3, [r3, #0]
 8011fce:	f103 020c 	add.w	r2, r3, #12
 8011fd2:	68fb      	ldr	r3, [r7, #12]
 8011fd4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8011fd6:	7812      	ldrb	r2, [r2, #0]
 8011fd8:	b2d2      	uxtb	r2, r2
 8011fda:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8011fdc:	68fb      	ldr	r3, [r7, #12]
 8011fde:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8011fe0:	1c5a      	adds	r2, r3, #1
 8011fe2:	68fb      	ldr	r3, [r7, #12]
 8011fe4:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount--;
 8011fe6:	68fb      	ldr	r3, [r7, #12]
 8011fe8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8011fec:	b29b      	uxth	r3, r3
 8011fee:	3b01      	subs	r3, #1
 8011ff0:	b29a      	uxth	r2, r3
 8011ff2:	68fb      	ldr	r3, [r7, #12]
 8011ff4:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8011ff8:	2301      	movs	r3, #1
 8011ffa:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8011ffc:	f7f8 fefc 	bl	800adf8 <HAL_GetTick>
 8012000:	4602      	mov	r2, r0
 8012002:	6a3b      	ldr	r3, [r7, #32]
 8012004:	1ad3      	subs	r3, r2, r3
 8012006:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8012008:	429a      	cmp	r2, r3
 801200a:	d803      	bhi.n	8012014 <HAL_SPI_TransmitReceive+0x3c2>
 801200c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801200e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012012:	d102      	bne.n	801201a <HAL_SPI_TransmitReceive+0x3c8>
 8012014:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012016:	2b00      	cmp	r3, #0
 8012018:	d109      	bne.n	801202e <HAL_SPI_TransmitReceive+0x3dc>
      {
        hspi->State = HAL_SPI_STATE_READY;
 801201a:	68fb      	ldr	r3, [r7, #12]
 801201c:	2201      	movs	r2, #1
 801201e:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        __HAL_UNLOCK(hspi);
 8012022:	68fb      	ldr	r3, [r7, #12]
 8012024:	2200      	movs	r2, #0
 8012026:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
        return HAL_TIMEOUT;
 801202a:	2303      	movs	r3, #3
 801202c:	e02c      	b.n	8012088 <HAL_SPI_TransmitReceive+0x436>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 801202e:	68fb      	ldr	r3, [r7, #12]
 8012030:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8012032:	b29b      	uxth	r3, r3
 8012034:	2b00      	cmp	r3, #0
 8012036:	f47f af55 	bne.w	8011ee4 <HAL_SPI_TransmitReceive+0x292>
 801203a:	68fb      	ldr	r3, [r7, #12]
 801203c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8012040:	b29b      	uxth	r3, r3
 8012042:	2b00      	cmp	r3, #0
 8012044:	f47f af4e 	bne.w	8011ee4 <HAL_SPI_TransmitReceive+0x292>
    return HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8012048:	6a3a      	ldr	r2, [r7, #32]
 801204a:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 801204c:	68f8      	ldr	r0, [r7, #12]
 801204e:	f000 f995 	bl	801237c <SPI_EndRxTxTransaction>
 8012052:	4603      	mov	r3, r0
 8012054:	2b00      	cmp	r3, #0
 8012056:	d008      	beq.n	801206a <HAL_SPI_TransmitReceive+0x418>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8012058:	68fb      	ldr	r3, [r7, #12]
 801205a:	2220      	movs	r2, #32
 801205c:	661a      	str	r2, [r3, #96]	@ 0x60
    __HAL_UNLOCK(hspi);
 801205e:	68fb      	ldr	r3, [r7, #12]
 8012060:	2200      	movs	r2, #0
 8012062:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
    return HAL_ERROR;
 8012066:	2301      	movs	r3, #1
 8012068:	e00e      	b.n	8012088 <HAL_SPI_TransmitReceive+0x436>
  }


  hspi->State = HAL_SPI_STATE_READY;
 801206a:	68fb      	ldr	r3, [r7, #12]
 801206c:	2201      	movs	r2, #1
 801206e:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8012072:	68fb      	ldr	r3, [r7, #12]
 8012074:	2200      	movs	r2, #0
 8012076:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 801207a:	68fb      	ldr	r3, [r7, #12]
 801207c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 801207e:	2b00      	cmp	r3, #0
 8012080:	d001      	beq.n	8012086 <HAL_SPI_TransmitReceive+0x434>
  {
    return HAL_ERROR;
 8012082:	2301      	movs	r3, #1
 8012084:	e000      	b.n	8012088 <HAL_SPI_TransmitReceive+0x436>
  }
  else
  {
    return HAL_OK;
 8012086:	2300      	movs	r3, #0
  }
}
 8012088:	4618      	mov	r0, r3
 801208a:	3728      	adds	r7, #40	@ 0x28
 801208c:	46bd      	mov	sp, r7
 801208e:	bd80      	pop	{r7, pc}

08012090 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8012090:	b580      	push	{r7, lr}
 8012092:	b088      	sub	sp, #32
 8012094:	af00      	add	r7, sp, #0
 8012096:	60f8      	str	r0, [r7, #12]
 8012098:	60b9      	str	r1, [r7, #8]
 801209a:	603b      	str	r3, [r7, #0]
 801209c:	4613      	mov	r3, r2
 801209e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80120a0:	f7f8 feaa 	bl	800adf8 <HAL_GetTick>
 80120a4:	4602      	mov	r2, r0
 80120a6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80120a8:	1a9b      	subs	r3, r3, r2
 80120aa:	683a      	ldr	r2, [r7, #0]
 80120ac:	4413      	add	r3, r2
 80120ae:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80120b0:	f7f8 fea2 	bl	800adf8 <HAL_GetTick>
 80120b4:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80120b6:	4b39      	ldr	r3, [pc, #228]	@ (801219c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80120b8:	681b      	ldr	r3, [r3, #0]
 80120ba:	015b      	lsls	r3, r3, #5
 80120bc:	0d1b      	lsrs	r3, r3, #20
 80120be:	69fa      	ldr	r2, [r7, #28]
 80120c0:	fb02 f303 	mul.w	r3, r2, r3
 80120c4:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80120c6:	e054      	b.n	8012172 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80120c8:	683b      	ldr	r3, [r7, #0]
 80120ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 80120ce:	d050      	beq.n	8012172 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80120d0:	f7f8 fe92 	bl	800adf8 <HAL_GetTick>
 80120d4:	4602      	mov	r2, r0
 80120d6:	69bb      	ldr	r3, [r7, #24]
 80120d8:	1ad3      	subs	r3, r2, r3
 80120da:	69fa      	ldr	r2, [r7, #28]
 80120dc:	429a      	cmp	r2, r3
 80120de:	d902      	bls.n	80120e6 <SPI_WaitFlagStateUntilTimeout+0x56>
 80120e0:	69fb      	ldr	r3, [r7, #28]
 80120e2:	2b00      	cmp	r3, #0
 80120e4:	d13d      	bne.n	8012162 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80120e6:	68fb      	ldr	r3, [r7, #12]
 80120e8:	681b      	ldr	r3, [r3, #0]
 80120ea:	685a      	ldr	r2, [r3, #4]
 80120ec:	68fb      	ldr	r3, [r7, #12]
 80120ee:	681b      	ldr	r3, [r3, #0]
 80120f0:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 80120f4:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80120f6:	68fb      	ldr	r3, [r7, #12]
 80120f8:	685b      	ldr	r3, [r3, #4]
 80120fa:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80120fe:	d111      	bne.n	8012124 <SPI_WaitFlagStateUntilTimeout+0x94>
 8012100:	68fb      	ldr	r3, [r7, #12]
 8012102:	689b      	ldr	r3, [r3, #8]
 8012104:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8012108:	d004      	beq.n	8012114 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 801210a:	68fb      	ldr	r3, [r7, #12]
 801210c:	689b      	ldr	r3, [r3, #8]
 801210e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8012112:	d107      	bne.n	8012124 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8012114:	68fb      	ldr	r3, [r7, #12]
 8012116:	681b      	ldr	r3, [r3, #0]
 8012118:	681a      	ldr	r2, [r3, #0]
 801211a:	68fb      	ldr	r3, [r7, #12]
 801211c:	681b      	ldr	r3, [r3, #0]
 801211e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8012122:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8012124:	68fb      	ldr	r3, [r7, #12]
 8012126:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8012128:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 801212c:	d10f      	bne.n	801214e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 801212e:	68fb      	ldr	r3, [r7, #12]
 8012130:	681b      	ldr	r3, [r3, #0]
 8012132:	681a      	ldr	r2, [r3, #0]
 8012134:	68fb      	ldr	r3, [r7, #12]
 8012136:	681b      	ldr	r3, [r3, #0]
 8012138:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 801213c:	601a      	str	r2, [r3, #0]
 801213e:	68fb      	ldr	r3, [r7, #12]
 8012140:	681b      	ldr	r3, [r3, #0]
 8012142:	681a      	ldr	r2, [r3, #0]
 8012144:	68fb      	ldr	r3, [r7, #12]
 8012146:	681b      	ldr	r3, [r3, #0]
 8012148:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 801214c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 801214e:	68fb      	ldr	r3, [r7, #12]
 8012150:	2201      	movs	r2, #1
 8012152:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8012156:	68fb      	ldr	r3, [r7, #12]
 8012158:	2200      	movs	r2, #0
 801215a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 801215e:	2303      	movs	r3, #3
 8012160:	e017      	b.n	8012192 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8012162:	697b      	ldr	r3, [r7, #20]
 8012164:	2b00      	cmp	r3, #0
 8012166:	d101      	bne.n	801216c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8012168:	2300      	movs	r3, #0
 801216a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 801216c:	697b      	ldr	r3, [r7, #20]
 801216e:	3b01      	subs	r3, #1
 8012170:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8012172:	68fb      	ldr	r3, [r7, #12]
 8012174:	681b      	ldr	r3, [r3, #0]
 8012176:	689a      	ldr	r2, [r3, #8]
 8012178:	68bb      	ldr	r3, [r7, #8]
 801217a:	4013      	ands	r3, r2
 801217c:	68ba      	ldr	r2, [r7, #8]
 801217e:	429a      	cmp	r2, r3
 8012180:	bf0c      	ite	eq
 8012182:	2301      	moveq	r3, #1
 8012184:	2300      	movne	r3, #0
 8012186:	b2db      	uxtb	r3, r3
 8012188:	461a      	mov	r2, r3
 801218a:	79fb      	ldrb	r3, [r7, #7]
 801218c:	429a      	cmp	r2, r3
 801218e:	d19b      	bne.n	80120c8 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8012190:	2300      	movs	r3, #0
}
 8012192:	4618      	mov	r0, r3
 8012194:	3720      	adds	r7, #32
 8012196:	46bd      	mov	sp, r7
 8012198:	bd80      	pop	{r7, pc}
 801219a:	bf00      	nop
 801219c:	20000268 	.word	0x20000268

080121a0 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80121a0:	b580      	push	{r7, lr}
 80121a2:	b08a      	sub	sp, #40	@ 0x28
 80121a4:	af00      	add	r7, sp, #0
 80121a6:	60f8      	str	r0, [r7, #12]
 80121a8:	60b9      	str	r1, [r7, #8]
 80121aa:	607a      	str	r2, [r7, #4]
 80121ac:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO const uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 80121ae:	2300      	movs	r3, #0
 80121b0:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 80121b2:	f7f8 fe21 	bl	800adf8 <HAL_GetTick>
 80121b6:	4602      	mov	r2, r0
 80121b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80121ba:	1a9b      	subs	r3, r3, r2
 80121bc:	683a      	ldr	r2, [r7, #0]
 80121be:	4413      	add	r3, r2
 80121c0:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 80121c2:	f7f8 fe19 	bl	800adf8 <HAL_GetTick>
 80121c6:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 80121c8:	68fb      	ldr	r3, [r7, #12]
 80121ca:	681b      	ldr	r3, [r3, #0]
 80121cc:	330c      	adds	r3, #12
 80121ce:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 80121d0:	4b3d      	ldr	r3, [pc, #244]	@ (80122c8 <SPI_WaitFifoStateUntilTimeout+0x128>)
 80121d2:	681a      	ldr	r2, [r3, #0]
 80121d4:	4613      	mov	r3, r2
 80121d6:	009b      	lsls	r3, r3, #2
 80121d8:	4413      	add	r3, r2
 80121da:	00da      	lsls	r2, r3, #3
 80121dc:	1ad3      	subs	r3, r2, r3
 80121de:	0d1b      	lsrs	r3, r3, #20
 80121e0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80121e2:	fb02 f303 	mul.w	r3, r2, r3
 80121e6:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 80121e8:	e060      	b.n	80122ac <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 80121ea:	68bb      	ldr	r3, [r7, #8]
 80121ec:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 80121f0:	d107      	bne.n	8012202 <SPI_WaitFifoStateUntilTimeout+0x62>
 80121f2:	687b      	ldr	r3, [r7, #4]
 80121f4:	2b00      	cmp	r3, #0
 80121f6:	d104      	bne.n	8012202 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 80121f8:	69fb      	ldr	r3, [r7, #28]
 80121fa:	781b      	ldrb	r3, [r3, #0]
 80121fc:	b2db      	uxtb	r3, r3
 80121fe:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8012200:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8012202:	683b      	ldr	r3, [r7, #0]
 8012204:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012208:	d050      	beq.n	80122ac <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 801220a:	f7f8 fdf5 	bl	800adf8 <HAL_GetTick>
 801220e:	4602      	mov	r2, r0
 8012210:	6a3b      	ldr	r3, [r7, #32]
 8012212:	1ad3      	subs	r3, r2, r3
 8012214:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8012216:	429a      	cmp	r2, r3
 8012218:	d902      	bls.n	8012220 <SPI_WaitFifoStateUntilTimeout+0x80>
 801221a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801221c:	2b00      	cmp	r3, #0
 801221e:	d13d      	bne.n	801229c <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8012220:	68fb      	ldr	r3, [r7, #12]
 8012222:	681b      	ldr	r3, [r3, #0]
 8012224:	685a      	ldr	r2, [r3, #4]
 8012226:	68fb      	ldr	r3, [r7, #12]
 8012228:	681b      	ldr	r3, [r3, #0]
 801222a:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 801222e:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8012230:	68fb      	ldr	r3, [r7, #12]
 8012232:	685b      	ldr	r3, [r3, #4]
 8012234:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8012238:	d111      	bne.n	801225e <SPI_WaitFifoStateUntilTimeout+0xbe>
 801223a:	68fb      	ldr	r3, [r7, #12]
 801223c:	689b      	ldr	r3, [r3, #8]
 801223e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8012242:	d004      	beq.n	801224e <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8012244:	68fb      	ldr	r3, [r7, #12]
 8012246:	689b      	ldr	r3, [r3, #8]
 8012248:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 801224c:	d107      	bne.n	801225e <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 801224e:	68fb      	ldr	r3, [r7, #12]
 8012250:	681b      	ldr	r3, [r3, #0]
 8012252:	681a      	ldr	r2, [r3, #0]
 8012254:	68fb      	ldr	r3, [r7, #12]
 8012256:	681b      	ldr	r3, [r3, #0]
 8012258:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 801225c:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 801225e:	68fb      	ldr	r3, [r7, #12]
 8012260:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8012262:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8012266:	d10f      	bne.n	8012288 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8012268:	68fb      	ldr	r3, [r7, #12]
 801226a:	681b      	ldr	r3, [r3, #0]
 801226c:	681a      	ldr	r2, [r3, #0]
 801226e:	68fb      	ldr	r3, [r7, #12]
 8012270:	681b      	ldr	r3, [r3, #0]
 8012272:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8012276:	601a      	str	r2, [r3, #0]
 8012278:	68fb      	ldr	r3, [r7, #12]
 801227a:	681b      	ldr	r3, [r3, #0]
 801227c:	681a      	ldr	r2, [r3, #0]
 801227e:	68fb      	ldr	r3, [r7, #12]
 8012280:	681b      	ldr	r3, [r3, #0]
 8012282:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8012286:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8012288:	68fb      	ldr	r3, [r7, #12]
 801228a:	2201      	movs	r2, #1
 801228c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8012290:	68fb      	ldr	r3, [r7, #12]
 8012292:	2200      	movs	r2, #0
 8012294:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8012298:	2303      	movs	r3, #3
 801229a:	e010      	b.n	80122be <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 801229c:	69bb      	ldr	r3, [r7, #24]
 801229e:	2b00      	cmp	r3, #0
 80122a0:	d101      	bne.n	80122a6 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 80122a2:	2300      	movs	r3, #0
 80122a4:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 80122a6:	69bb      	ldr	r3, [r7, #24]
 80122a8:	3b01      	subs	r3, #1
 80122aa:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 80122ac:	68fb      	ldr	r3, [r7, #12]
 80122ae:	681b      	ldr	r3, [r3, #0]
 80122b0:	689a      	ldr	r2, [r3, #8]
 80122b2:	68bb      	ldr	r3, [r7, #8]
 80122b4:	4013      	ands	r3, r2
 80122b6:	687a      	ldr	r2, [r7, #4]
 80122b8:	429a      	cmp	r2, r3
 80122ba:	d196      	bne.n	80121ea <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 80122bc:	2300      	movs	r3, #0
}
 80122be:	4618      	mov	r0, r3
 80122c0:	3728      	adds	r7, #40	@ 0x28
 80122c2:	46bd      	mov	sp, r7
 80122c4:	bd80      	pop	{r7, pc}
 80122c6:	bf00      	nop
 80122c8:	20000268 	.word	0x20000268

080122cc <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 80122cc:	b580      	push	{r7, lr}
 80122ce:	b086      	sub	sp, #24
 80122d0:	af02      	add	r7, sp, #8
 80122d2:	60f8      	str	r0, [r7, #12]
 80122d4:	60b9      	str	r1, [r7, #8]
 80122d6:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80122d8:	68fb      	ldr	r3, [r7, #12]
 80122da:	685b      	ldr	r3, [r3, #4]
 80122dc:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80122e0:	d111      	bne.n	8012306 <SPI_EndRxTransaction+0x3a>
 80122e2:	68fb      	ldr	r3, [r7, #12]
 80122e4:	689b      	ldr	r3, [r3, #8]
 80122e6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80122ea:	d004      	beq.n	80122f6 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80122ec:	68fb      	ldr	r3, [r7, #12]
 80122ee:	689b      	ldr	r3, [r3, #8]
 80122f0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80122f4:	d107      	bne.n	8012306 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 80122f6:	68fb      	ldr	r3, [r7, #12]
 80122f8:	681b      	ldr	r3, [r3, #0]
 80122fa:	681a      	ldr	r2, [r3, #0]
 80122fc:	68fb      	ldr	r3, [r7, #12]
 80122fe:	681b      	ldr	r3, [r3, #0]
 8012300:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8012304:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8012306:	687b      	ldr	r3, [r7, #4]
 8012308:	9300      	str	r3, [sp, #0]
 801230a:	68bb      	ldr	r3, [r7, #8]
 801230c:	2200      	movs	r2, #0
 801230e:	2180      	movs	r1, #128	@ 0x80
 8012310:	68f8      	ldr	r0, [r7, #12]
 8012312:	f7ff febd 	bl	8012090 <SPI_WaitFlagStateUntilTimeout>
 8012316:	4603      	mov	r3, r0
 8012318:	2b00      	cmp	r3, #0
 801231a:	d007      	beq.n	801232c <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 801231c:	68fb      	ldr	r3, [r7, #12]
 801231e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8012320:	f043 0220 	orr.w	r2, r3, #32
 8012324:	68fb      	ldr	r3, [r7, #12]
 8012326:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8012328:	2303      	movs	r3, #3
 801232a:	e023      	b.n	8012374 <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 801232c:	68fb      	ldr	r3, [r7, #12]
 801232e:	685b      	ldr	r3, [r3, #4]
 8012330:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8012334:	d11d      	bne.n	8012372 <SPI_EndRxTransaction+0xa6>
 8012336:	68fb      	ldr	r3, [r7, #12]
 8012338:	689b      	ldr	r3, [r3, #8]
 801233a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 801233e:	d004      	beq.n	801234a <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8012340:	68fb      	ldr	r3, [r7, #12]
 8012342:	689b      	ldr	r3, [r3, #8]
 8012344:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8012348:	d113      	bne.n	8012372 <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 801234a:	687b      	ldr	r3, [r7, #4]
 801234c:	9300      	str	r3, [sp, #0]
 801234e:	68bb      	ldr	r3, [r7, #8]
 8012350:	2200      	movs	r2, #0
 8012352:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 8012356:	68f8      	ldr	r0, [r7, #12]
 8012358:	f7ff ff22 	bl	80121a0 <SPI_WaitFifoStateUntilTimeout>
 801235c:	4603      	mov	r3, r0
 801235e:	2b00      	cmp	r3, #0
 8012360:	d007      	beq.n	8012372 <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8012362:	68fb      	ldr	r3, [r7, #12]
 8012364:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8012366:	f043 0220 	orr.w	r2, r3, #32
 801236a:	68fb      	ldr	r3, [r7, #12]
 801236c:	661a      	str	r2, [r3, #96]	@ 0x60
      return HAL_TIMEOUT;
 801236e:	2303      	movs	r3, #3
 8012370:	e000      	b.n	8012374 <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 8012372:	2300      	movs	r3, #0
}
 8012374:	4618      	mov	r0, r3
 8012376:	3710      	adds	r7, #16
 8012378:	46bd      	mov	sp, r7
 801237a:	bd80      	pop	{r7, pc}

0801237c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 801237c:	b580      	push	{r7, lr}
 801237e:	b086      	sub	sp, #24
 8012380:	af02      	add	r7, sp, #8
 8012382:	60f8      	str	r0, [r7, #12]
 8012384:	60b9      	str	r1, [r7, #8]
 8012386:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8012388:	687b      	ldr	r3, [r7, #4]
 801238a:	9300      	str	r3, [sp, #0]
 801238c:	68bb      	ldr	r3, [r7, #8]
 801238e:	2200      	movs	r2, #0
 8012390:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 8012394:	68f8      	ldr	r0, [r7, #12]
 8012396:	f7ff ff03 	bl	80121a0 <SPI_WaitFifoStateUntilTimeout>
 801239a:	4603      	mov	r3, r0
 801239c:	2b00      	cmp	r3, #0
 801239e:	d007      	beq.n	80123b0 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80123a0:	68fb      	ldr	r3, [r7, #12]
 80123a2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80123a4:	f043 0220 	orr.w	r2, r3, #32
 80123a8:	68fb      	ldr	r3, [r7, #12]
 80123aa:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 80123ac:	2303      	movs	r3, #3
 80123ae:	e027      	b.n	8012400 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80123b0:	687b      	ldr	r3, [r7, #4]
 80123b2:	9300      	str	r3, [sp, #0]
 80123b4:	68bb      	ldr	r3, [r7, #8]
 80123b6:	2200      	movs	r2, #0
 80123b8:	2180      	movs	r1, #128	@ 0x80
 80123ba:	68f8      	ldr	r0, [r7, #12]
 80123bc:	f7ff fe68 	bl	8012090 <SPI_WaitFlagStateUntilTimeout>
 80123c0:	4603      	mov	r3, r0
 80123c2:	2b00      	cmp	r3, #0
 80123c4:	d007      	beq.n	80123d6 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80123c6:	68fb      	ldr	r3, [r7, #12]
 80123c8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80123ca:	f043 0220 	orr.w	r2, r3, #32
 80123ce:	68fb      	ldr	r3, [r7, #12]
 80123d0:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 80123d2:	2303      	movs	r3, #3
 80123d4:	e014      	b.n	8012400 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80123d6:	687b      	ldr	r3, [r7, #4]
 80123d8:	9300      	str	r3, [sp, #0]
 80123da:	68bb      	ldr	r3, [r7, #8]
 80123dc:	2200      	movs	r2, #0
 80123de:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 80123e2:	68f8      	ldr	r0, [r7, #12]
 80123e4:	f7ff fedc 	bl	80121a0 <SPI_WaitFifoStateUntilTimeout>
 80123e8:	4603      	mov	r3, r0
 80123ea:	2b00      	cmp	r3, #0
 80123ec:	d007      	beq.n	80123fe <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80123ee:	68fb      	ldr	r3, [r7, #12]
 80123f0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80123f2:	f043 0220 	orr.w	r2, r3, #32
 80123f6:	68fb      	ldr	r3, [r7, #12]
 80123f8:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 80123fa:	2303      	movs	r3, #3
 80123fc:	e000      	b.n	8012400 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 80123fe:	2300      	movs	r3, #0
}
 8012400:	4618      	mov	r0, r3
 8012402:	3710      	adds	r7, #16
 8012404:	46bd      	mov	sp, r7
 8012406:	bd80      	pop	{r7, pc}

08012408 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8012408:	b580      	push	{r7, lr}
 801240a:	b082      	sub	sp, #8
 801240c:	af00      	add	r7, sp, #0
 801240e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8012410:	687b      	ldr	r3, [r7, #4]
 8012412:	2b00      	cmp	r3, #0
 8012414:	d101      	bne.n	801241a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8012416:	2301      	movs	r3, #1
 8012418:	e049      	b.n	80124ae <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 801241a:	687b      	ldr	r3, [r7, #4]
 801241c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8012420:	b2db      	uxtb	r3, r3
 8012422:	2b00      	cmp	r3, #0
 8012424:	d106      	bne.n	8012434 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8012426:	687b      	ldr	r3, [r7, #4]
 8012428:	2200      	movs	r2, #0
 801242a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 801242e:	6878      	ldr	r0, [r7, #4]
 8012430:	f7f5 f990 	bl	8007754 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8012434:	687b      	ldr	r3, [r7, #4]
 8012436:	2202      	movs	r2, #2
 8012438:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 801243c:	687b      	ldr	r3, [r7, #4]
 801243e:	681a      	ldr	r2, [r3, #0]
 8012440:	687b      	ldr	r3, [r7, #4]
 8012442:	3304      	adds	r3, #4
 8012444:	4619      	mov	r1, r3
 8012446:	4610      	mov	r0, r2
 8012448:	f001 fa58 	bl	80138fc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 801244c:	687b      	ldr	r3, [r7, #4]
 801244e:	2201      	movs	r2, #1
 8012450:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8012454:	687b      	ldr	r3, [r7, #4]
 8012456:	2201      	movs	r2, #1
 8012458:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 801245c:	687b      	ldr	r3, [r7, #4]
 801245e:	2201      	movs	r2, #1
 8012460:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8012464:	687b      	ldr	r3, [r7, #4]
 8012466:	2201      	movs	r2, #1
 8012468:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 801246c:	687b      	ldr	r3, [r7, #4]
 801246e:	2201      	movs	r2, #1
 8012470:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8012474:	687b      	ldr	r3, [r7, #4]
 8012476:	2201      	movs	r2, #1
 8012478:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 801247c:	687b      	ldr	r3, [r7, #4]
 801247e:	2201      	movs	r2, #1
 8012480:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8012484:	687b      	ldr	r3, [r7, #4]
 8012486:	2201      	movs	r2, #1
 8012488:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 801248c:	687b      	ldr	r3, [r7, #4]
 801248e:	2201      	movs	r2, #1
 8012490:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8012494:	687b      	ldr	r3, [r7, #4]
 8012496:	2201      	movs	r2, #1
 8012498:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 801249c:	687b      	ldr	r3, [r7, #4]
 801249e:	2201      	movs	r2, #1
 80124a0:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80124a4:	687b      	ldr	r3, [r7, #4]
 80124a6:	2201      	movs	r2, #1
 80124a8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80124ac:	2300      	movs	r3, #0
}
 80124ae:	4618      	mov	r0, r3
 80124b0:	3708      	adds	r7, #8
 80124b2:	46bd      	mov	sp, r7
 80124b4:	bd80      	pop	{r7, pc}

080124b6 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 80124b6:	b580      	push	{r7, lr}
 80124b8:	b082      	sub	sp, #8
 80124ba:	af00      	add	r7, sp, #0
 80124bc:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80124be:	687b      	ldr	r3, [r7, #4]
 80124c0:	2b00      	cmp	r3, #0
 80124c2:	d101      	bne.n	80124c8 <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 80124c4:	2301      	movs	r3, #1
 80124c6:	e049      	b.n	801255c <HAL_TIM_OC_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80124c8:	687b      	ldr	r3, [r7, #4]
 80124ca:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80124ce:	b2db      	uxtb	r3, r3
 80124d0:	2b00      	cmp	r3, #0
 80124d2:	d106      	bne.n	80124e2 <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80124d4:	687b      	ldr	r3, [r7, #4]
 80124d6:	2200      	movs	r2, #0
 80124d8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 80124dc:	6878      	ldr	r0, [r7, #4]
 80124de:	f000 f841 	bl	8012564 <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80124e2:	687b      	ldr	r3, [r7, #4]
 80124e4:	2202      	movs	r2, #2
 80124e6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 80124ea:	687b      	ldr	r3, [r7, #4]
 80124ec:	681a      	ldr	r2, [r3, #0]
 80124ee:	687b      	ldr	r3, [r7, #4]
 80124f0:	3304      	adds	r3, #4
 80124f2:	4619      	mov	r1, r3
 80124f4:	4610      	mov	r0, r2
 80124f6:	f001 fa01 	bl	80138fc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80124fa:	687b      	ldr	r3, [r7, #4]
 80124fc:	2201      	movs	r2, #1
 80124fe:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8012502:	687b      	ldr	r3, [r7, #4]
 8012504:	2201      	movs	r2, #1
 8012506:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 801250a:	687b      	ldr	r3, [r7, #4]
 801250c:	2201      	movs	r2, #1
 801250e:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8012512:	687b      	ldr	r3, [r7, #4]
 8012514:	2201      	movs	r2, #1
 8012516:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 801251a:	687b      	ldr	r3, [r7, #4]
 801251c:	2201      	movs	r2, #1
 801251e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8012522:	687b      	ldr	r3, [r7, #4]
 8012524:	2201      	movs	r2, #1
 8012526:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 801252a:	687b      	ldr	r3, [r7, #4]
 801252c:	2201      	movs	r2, #1
 801252e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8012532:	687b      	ldr	r3, [r7, #4]
 8012534:	2201      	movs	r2, #1
 8012536:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 801253a:	687b      	ldr	r3, [r7, #4]
 801253c:	2201      	movs	r2, #1
 801253e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8012542:	687b      	ldr	r3, [r7, #4]
 8012544:	2201      	movs	r2, #1
 8012546:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 801254a:	687b      	ldr	r3, [r7, #4]
 801254c:	2201      	movs	r2, #1
 801254e:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8012552:	687b      	ldr	r3, [r7, #4]
 8012554:	2201      	movs	r2, #1
 8012556:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 801255a:	2300      	movs	r3, #0
}
 801255c:	4618      	mov	r0, r3
 801255e:	3708      	adds	r7, #8
 8012560:	46bd      	mov	sp, r7
 8012562:	bd80      	pop	{r7, pc}

08012564 <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 8012564:	b480      	push	{r7}
 8012566:	b083      	sub	sp, #12
 8012568:	af00      	add	r7, sp, #0
 801256a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 801256c:	bf00      	nop
 801256e:	370c      	adds	r7, #12
 8012570:	46bd      	mov	sp, r7
 8012572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012576:	4770      	bx	lr

08012578 <HAL_TIM_OC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8012578:	b580      	push	{r7, lr}
 801257a:	b084      	sub	sp, #16
 801257c:	af00      	add	r7, sp, #0
 801257e:	6078      	str	r0, [r7, #4]
 8012580:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8012582:	2300      	movs	r3, #0
 8012584:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_CHANNEL(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8012586:	683b      	ldr	r3, [r7, #0]
 8012588:	2b00      	cmp	r3, #0
 801258a:	d109      	bne.n	80125a0 <HAL_TIM_OC_Start_IT+0x28>
 801258c:	687b      	ldr	r3, [r7, #4]
 801258e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8012592:	b2db      	uxtb	r3, r3
 8012594:	2b01      	cmp	r3, #1
 8012596:	bf14      	ite	ne
 8012598:	2301      	movne	r3, #1
 801259a:	2300      	moveq	r3, #0
 801259c:	b2db      	uxtb	r3, r3
 801259e:	e03c      	b.n	801261a <HAL_TIM_OC_Start_IT+0xa2>
 80125a0:	683b      	ldr	r3, [r7, #0]
 80125a2:	2b04      	cmp	r3, #4
 80125a4:	d109      	bne.n	80125ba <HAL_TIM_OC_Start_IT+0x42>
 80125a6:	687b      	ldr	r3, [r7, #4]
 80125a8:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80125ac:	b2db      	uxtb	r3, r3
 80125ae:	2b01      	cmp	r3, #1
 80125b0:	bf14      	ite	ne
 80125b2:	2301      	movne	r3, #1
 80125b4:	2300      	moveq	r3, #0
 80125b6:	b2db      	uxtb	r3, r3
 80125b8:	e02f      	b.n	801261a <HAL_TIM_OC_Start_IT+0xa2>
 80125ba:	683b      	ldr	r3, [r7, #0]
 80125bc:	2b08      	cmp	r3, #8
 80125be:	d109      	bne.n	80125d4 <HAL_TIM_OC_Start_IT+0x5c>
 80125c0:	687b      	ldr	r3, [r7, #4]
 80125c2:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80125c6:	b2db      	uxtb	r3, r3
 80125c8:	2b01      	cmp	r3, #1
 80125ca:	bf14      	ite	ne
 80125cc:	2301      	movne	r3, #1
 80125ce:	2300      	moveq	r3, #0
 80125d0:	b2db      	uxtb	r3, r3
 80125d2:	e022      	b.n	801261a <HAL_TIM_OC_Start_IT+0xa2>
 80125d4:	683b      	ldr	r3, [r7, #0]
 80125d6:	2b0c      	cmp	r3, #12
 80125d8:	d109      	bne.n	80125ee <HAL_TIM_OC_Start_IT+0x76>
 80125da:	687b      	ldr	r3, [r7, #4]
 80125dc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80125e0:	b2db      	uxtb	r3, r3
 80125e2:	2b01      	cmp	r3, #1
 80125e4:	bf14      	ite	ne
 80125e6:	2301      	movne	r3, #1
 80125e8:	2300      	moveq	r3, #0
 80125ea:	b2db      	uxtb	r3, r3
 80125ec:	e015      	b.n	801261a <HAL_TIM_OC_Start_IT+0xa2>
 80125ee:	683b      	ldr	r3, [r7, #0]
 80125f0:	2b10      	cmp	r3, #16
 80125f2:	d109      	bne.n	8012608 <HAL_TIM_OC_Start_IT+0x90>
 80125f4:	687b      	ldr	r3, [r7, #4]
 80125f6:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80125fa:	b2db      	uxtb	r3, r3
 80125fc:	2b01      	cmp	r3, #1
 80125fe:	bf14      	ite	ne
 8012600:	2301      	movne	r3, #1
 8012602:	2300      	moveq	r3, #0
 8012604:	b2db      	uxtb	r3, r3
 8012606:	e008      	b.n	801261a <HAL_TIM_OC_Start_IT+0xa2>
 8012608:	687b      	ldr	r3, [r7, #4]
 801260a:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 801260e:	b2db      	uxtb	r3, r3
 8012610:	2b01      	cmp	r3, #1
 8012612:	bf14      	ite	ne
 8012614:	2301      	movne	r3, #1
 8012616:	2300      	moveq	r3, #0
 8012618:	b2db      	uxtb	r3, r3
 801261a:	2b00      	cmp	r3, #0
 801261c:	d001      	beq.n	8012622 <HAL_TIM_OC_Start_IT+0xaa>
  {
    return HAL_ERROR;
 801261e:	2301      	movs	r3, #1
 8012620:	e0e7      	b.n	80127f2 <HAL_TIM_OC_Start_IT+0x27a>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8012622:	683b      	ldr	r3, [r7, #0]
 8012624:	2b00      	cmp	r3, #0
 8012626:	d104      	bne.n	8012632 <HAL_TIM_OC_Start_IT+0xba>
 8012628:	687b      	ldr	r3, [r7, #4]
 801262a:	2202      	movs	r2, #2
 801262c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8012630:	e023      	b.n	801267a <HAL_TIM_OC_Start_IT+0x102>
 8012632:	683b      	ldr	r3, [r7, #0]
 8012634:	2b04      	cmp	r3, #4
 8012636:	d104      	bne.n	8012642 <HAL_TIM_OC_Start_IT+0xca>
 8012638:	687b      	ldr	r3, [r7, #4]
 801263a:	2202      	movs	r2, #2
 801263c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8012640:	e01b      	b.n	801267a <HAL_TIM_OC_Start_IT+0x102>
 8012642:	683b      	ldr	r3, [r7, #0]
 8012644:	2b08      	cmp	r3, #8
 8012646:	d104      	bne.n	8012652 <HAL_TIM_OC_Start_IT+0xda>
 8012648:	687b      	ldr	r3, [r7, #4]
 801264a:	2202      	movs	r2, #2
 801264c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8012650:	e013      	b.n	801267a <HAL_TIM_OC_Start_IT+0x102>
 8012652:	683b      	ldr	r3, [r7, #0]
 8012654:	2b0c      	cmp	r3, #12
 8012656:	d104      	bne.n	8012662 <HAL_TIM_OC_Start_IT+0xea>
 8012658:	687b      	ldr	r3, [r7, #4]
 801265a:	2202      	movs	r2, #2
 801265c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8012660:	e00b      	b.n	801267a <HAL_TIM_OC_Start_IT+0x102>
 8012662:	683b      	ldr	r3, [r7, #0]
 8012664:	2b10      	cmp	r3, #16
 8012666:	d104      	bne.n	8012672 <HAL_TIM_OC_Start_IT+0xfa>
 8012668:	687b      	ldr	r3, [r7, #4]
 801266a:	2202      	movs	r2, #2
 801266c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8012670:	e003      	b.n	801267a <HAL_TIM_OC_Start_IT+0x102>
 8012672:	687b      	ldr	r3, [r7, #4]
 8012674:	2202      	movs	r2, #2
 8012676:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  switch (Channel)
 801267a:	683b      	ldr	r3, [r7, #0]
 801267c:	2b0c      	cmp	r3, #12
 801267e:	d841      	bhi.n	8012704 <HAL_TIM_OC_Start_IT+0x18c>
 8012680:	a201      	add	r2, pc, #4	@ (adr r2, 8012688 <HAL_TIM_OC_Start_IT+0x110>)
 8012682:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012686:	bf00      	nop
 8012688:	080126bd 	.word	0x080126bd
 801268c:	08012705 	.word	0x08012705
 8012690:	08012705 	.word	0x08012705
 8012694:	08012705 	.word	0x08012705
 8012698:	080126cf 	.word	0x080126cf
 801269c:	08012705 	.word	0x08012705
 80126a0:	08012705 	.word	0x08012705
 80126a4:	08012705 	.word	0x08012705
 80126a8:	080126e1 	.word	0x080126e1
 80126ac:	08012705 	.word	0x08012705
 80126b0:	08012705 	.word	0x08012705
 80126b4:	08012705 	.word	0x08012705
 80126b8:	080126f3 	.word	0x080126f3
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 80126bc:	687b      	ldr	r3, [r7, #4]
 80126be:	681b      	ldr	r3, [r3, #0]
 80126c0:	68da      	ldr	r2, [r3, #12]
 80126c2:	687b      	ldr	r3, [r7, #4]
 80126c4:	681b      	ldr	r3, [r3, #0]
 80126c6:	f042 0202 	orr.w	r2, r2, #2
 80126ca:	60da      	str	r2, [r3, #12]
      break;
 80126cc:	e01d      	b.n	801270a <HAL_TIM_OC_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 80126ce:	687b      	ldr	r3, [r7, #4]
 80126d0:	681b      	ldr	r3, [r3, #0]
 80126d2:	68da      	ldr	r2, [r3, #12]
 80126d4:	687b      	ldr	r3, [r7, #4]
 80126d6:	681b      	ldr	r3, [r3, #0]
 80126d8:	f042 0204 	orr.w	r2, r2, #4
 80126dc:	60da      	str	r2, [r3, #12]
      break;
 80126de:	e014      	b.n	801270a <HAL_TIM_OC_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 80126e0:	687b      	ldr	r3, [r7, #4]
 80126e2:	681b      	ldr	r3, [r3, #0]
 80126e4:	68da      	ldr	r2, [r3, #12]
 80126e6:	687b      	ldr	r3, [r7, #4]
 80126e8:	681b      	ldr	r3, [r3, #0]
 80126ea:	f042 0208 	orr.w	r2, r2, #8
 80126ee:	60da      	str	r2, [r3, #12]
      break;
 80126f0:	e00b      	b.n	801270a <HAL_TIM_OC_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 80126f2:	687b      	ldr	r3, [r7, #4]
 80126f4:	681b      	ldr	r3, [r3, #0]
 80126f6:	68da      	ldr	r2, [r3, #12]
 80126f8:	687b      	ldr	r3, [r7, #4]
 80126fa:	681b      	ldr	r3, [r3, #0]
 80126fc:	f042 0210 	orr.w	r2, r2, #16
 8012700:	60da      	str	r2, [r3, #12]
      break;
 8012702:	e002      	b.n	801270a <HAL_TIM_OC_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 8012704:	2301      	movs	r3, #1
 8012706:	73fb      	strb	r3, [r7, #15]
      break;
 8012708:	bf00      	nop
  }

  if (status == HAL_OK)
 801270a:	7bfb      	ldrb	r3, [r7, #15]
 801270c:	2b00      	cmp	r3, #0
 801270e:	d16f      	bne.n	80127f0 <HAL_TIM_OC_Start_IT+0x278>
  {
    /* Enable the Output compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8012710:	687b      	ldr	r3, [r7, #4]
 8012712:	681b      	ldr	r3, [r3, #0]
 8012714:	2201      	movs	r2, #1
 8012716:	6839      	ldr	r1, [r7, #0]
 8012718:	4618      	mov	r0, r3
 801271a:	f001 febd 	bl	8014498 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 801271e:	687b      	ldr	r3, [r7, #4]
 8012720:	681b      	ldr	r3, [r3, #0]
 8012722:	4a36      	ldr	r2, [pc, #216]	@ (80127fc <HAL_TIM_OC_Start_IT+0x284>)
 8012724:	4293      	cmp	r3, r2
 8012726:	d013      	beq.n	8012750 <HAL_TIM_OC_Start_IT+0x1d8>
 8012728:	687b      	ldr	r3, [r7, #4]
 801272a:	681b      	ldr	r3, [r3, #0]
 801272c:	4a34      	ldr	r2, [pc, #208]	@ (8012800 <HAL_TIM_OC_Start_IT+0x288>)
 801272e:	4293      	cmp	r3, r2
 8012730:	d00e      	beq.n	8012750 <HAL_TIM_OC_Start_IT+0x1d8>
 8012732:	687b      	ldr	r3, [r7, #4]
 8012734:	681b      	ldr	r3, [r3, #0]
 8012736:	4a33      	ldr	r2, [pc, #204]	@ (8012804 <HAL_TIM_OC_Start_IT+0x28c>)
 8012738:	4293      	cmp	r3, r2
 801273a:	d009      	beq.n	8012750 <HAL_TIM_OC_Start_IT+0x1d8>
 801273c:	687b      	ldr	r3, [r7, #4]
 801273e:	681b      	ldr	r3, [r3, #0]
 8012740:	4a31      	ldr	r2, [pc, #196]	@ (8012808 <HAL_TIM_OC_Start_IT+0x290>)
 8012742:	4293      	cmp	r3, r2
 8012744:	d004      	beq.n	8012750 <HAL_TIM_OC_Start_IT+0x1d8>
 8012746:	687b      	ldr	r3, [r7, #4]
 8012748:	681b      	ldr	r3, [r3, #0]
 801274a:	4a30      	ldr	r2, [pc, #192]	@ (801280c <HAL_TIM_OC_Start_IT+0x294>)
 801274c:	4293      	cmp	r3, r2
 801274e:	d101      	bne.n	8012754 <HAL_TIM_OC_Start_IT+0x1dc>
 8012750:	2301      	movs	r3, #1
 8012752:	e000      	b.n	8012756 <HAL_TIM_OC_Start_IT+0x1de>
 8012754:	2300      	movs	r3, #0
 8012756:	2b00      	cmp	r3, #0
 8012758:	d007      	beq.n	801276a <HAL_TIM_OC_Start_IT+0x1f2>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 801275a:	687b      	ldr	r3, [r7, #4]
 801275c:	681b      	ldr	r3, [r3, #0]
 801275e:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8012760:	687b      	ldr	r3, [r7, #4]
 8012762:	681b      	ldr	r3, [r3, #0]
 8012764:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8012768:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 801276a:	687b      	ldr	r3, [r7, #4]
 801276c:	681b      	ldr	r3, [r3, #0]
 801276e:	4a23      	ldr	r2, [pc, #140]	@ (80127fc <HAL_TIM_OC_Start_IT+0x284>)
 8012770:	4293      	cmp	r3, r2
 8012772:	d01d      	beq.n	80127b0 <HAL_TIM_OC_Start_IT+0x238>
 8012774:	687b      	ldr	r3, [r7, #4]
 8012776:	681b      	ldr	r3, [r3, #0]
 8012778:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 801277c:	d018      	beq.n	80127b0 <HAL_TIM_OC_Start_IT+0x238>
 801277e:	687b      	ldr	r3, [r7, #4]
 8012780:	681b      	ldr	r3, [r3, #0]
 8012782:	4a23      	ldr	r2, [pc, #140]	@ (8012810 <HAL_TIM_OC_Start_IT+0x298>)
 8012784:	4293      	cmp	r3, r2
 8012786:	d013      	beq.n	80127b0 <HAL_TIM_OC_Start_IT+0x238>
 8012788:	687b      	ldr	r3, [r7, #4]
 801278a:	681b      	ldr	r3, [r3, #0]
 801278c:	4a21      	ldr	r2, [pc, #132]	@ (8012814 <HAL_TIM_OC_Start_IT+0x29c>)
 801278e:	4293      	cmp	r3, r2
 8012790:	d00e      	beq.n	80127b0 <HAL_TIM_OC_Start_IT+0x238>
 8012792:	687b      	ldr	r3, [r7, #4]
 8012794:	681b      	ldr	r3, [r3, #0]
 8012796:	4a20      	ldr	r2, [pc, #128]	@ (8012818 <HAL_TIM_OC_Start_IT+0x2a0>)
 8012798:	4293      	cmp	r3, r2
 801279a:	d009      	beq.n	80127b0 <HAL_TIM_OC_Start_IT+0x238>
 801279c:	687b      	ldr	r3, [r7, #4]
 801279e:	681b      	ldr	r3, [r3, #0]
 80127a0:	4a17      	ldr	r2, [pc, #92]	@ (8012800 <HAL_TIM_OC_Start_IT+0x288>)
 80127a2:	4293      	cmp	r3, r2
 80127a4:	d004      	beq.n	80127b0 <HAL_TIM_OC_Start_IT+0x238>
 80127a6:	687b      	ldr	r3, [r7, #4]
 80127a8:	681b      	ldr	r3, [r3, #0]
 80127aa:	4a16      	ldr	r2, [pc, #88]	@ (8012804 <HAL_TIM_OC_Start_IT+0x28c>)
 80127ac:	4293      	cmp	r3, r2
 80127ae:	d115      	bne.n	80127dc <HAL_TIM_OC_Start_IT+0x264>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80127b0:	687b      	ldr	r3, [r7, #4]
 80127b2:	681b      	ldr	r3, [r3, #0]
 80127b4:	689a      	ldr	r2, [r3, #8]
 80127b6:	4b19      	ldr	r3, [pc, #100]	@ (801281c <HAL_TIM_OC_Start_IT+0x2a4>)
 80127b8:	4013      	ands	r3, r2
 80127ba:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80127bc:	68bb      	ldr	r3, [r7, #8]
 80127be:	2b06      	cmp	r3, #6
 80127c0:	d015      	beq.n	80127ee <HAL_TIM_OC_Start_IT+0x276>
 80127c2:	68bb      	ldr	r3, [r7, #8]
 80127c4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80127c8:	d011      	beq.n	80127ee <HAL_TIM_OC_Start_IT+0x276>
      {
        __HAL_TIM_ENABLE(htim);
 80127ca:	687b      	ldr	r3, [r7, #4]
 80127cc:	681b      	ldr	r3, [r3, #0]
 80127ce:	681a      	ldr	r2, [r3, #0]
 80127d0:	687b      	ldr	r3, [r7, #4]
 80127d2:	681b      	ldr	r3, [r3, #0]
 80127d4:	f042 0201 	orr.w	r2, r2, #1
 80127d8:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80127da:	e008      	b.n	80127ee <HAL_TIM_OC_Start_IT+0x276>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 80127dc:	687b      	ldr	r3, [r7, #4]
 80127de:	681b      	ldr	r3, [r3, #0]
 80127e0:	681a      	ldr	r2, [r3, #0]
 80127e2:	687b      	ldr	r3, [r7, #4]
 80127e4:	681b      	ldr	r3, [r3, #0]
 80127e6:	f042 0201 	orr.w	r2, r2, #1
 80127ea:	601a      	str	r2, [r3, #0]
 80127ec:	e000      	b.n	80127f0 <HAL_TIM_OC_Start_IT+0x278>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80127ee:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 80127f0:	7bfb      	ldrb	r3, [r7, #15]
}
 80127f2:	4618      	mov	r0, r3
 80127f4:	3710      	adds	r7, #16
 80127f6:	46bd      	mov	sp, r7
 80127f8:	bd80      	pop	{r7, pc}
 80127fa:	bf00      	nop
 80127fc:	40012c00 	.word	0x40012c00
 8012800:	40013400 	.word	0x40013400
 8012804:	40014000 	.word	0x40014000
 8012808:	40014400 	.word	0x40014400
 801280c:	40014800 	.word	0x40014800
 8012810:	40000400 	.word	0x40000400
 8012814:	40000800 	.word	0x40000800
 8012818:	40000c00 	.word	0x40000c00
 801281c:	00010007 	.word	0x00010007

08012820 <HAL_TIM_OC_Stop_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Stop_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8012820:	b580      	push	{r7, lr}
 8012822:	b084      	sub	sp, #16
 8012824:	af00      	add	r7, sp, #0
 8012826:	6078      	str	r0, [r7, #4]
 8012828:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 801282a:	2300      	movs	r3, #0
 801282c:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_CHANNEL(htim->Instance, Channel));

  switch (Channel)
 801282e:	683b      	ldr	r3, [r7, #0]
 8012830:	2b0c      	cmp	r3, #12
 8012832:	d841      	bhi.n	80128b8 <HAL_TIM_OC_Stop_IT+0x98>
 8012834:	a201      	add	r2, pc, #4	@ (adr r2, 801283c <HAL_TIM_OC_Stop_IT+0x1c>)
 8012836:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801283a:	bf00      	nop
 801283c:	08012871 	.word	0x08012871
 8012840:	080128b9 	.word	0x080128b9
 8012844:	080128b9 	.word	0x080128b9
 8012848:	080128b9 	.word	0x080128b9
 801284c:	08012883 	.word	0x08012883
 8012850:	080128b9 	.word	0x080128b9
 8012854:	080128b9 	.word	0x080128b9
 8012858:	080128b9 	.word	0x080128b9
 801285c:	08012895 	.word	0x08012895
 8012860:	080128b9 	.word	0x080128b9
 8012864:	080128b9 	.word	0x080128b9
 8012868:	080128b9 	.word	0x080128b9
 801286c:	080128a7 	.word	0x080128a7
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 8012870:	687b      	ldr	r3, [r7, #4]
 8012872:	681b      	ldr	r3, [r3, #0]
 8012874:	68da      	ldr	r2, [r3, #12]
 8012876:	687b      	ldr	r3, [r7, #4]
 8012878:	681b      	ldr	r3, [r3, #0]
 801287a:	f022 0202 	bic.w	r2, r2, #2
 801287e:	60da      	str	r2, [r3, #12]
      break;
 8012880:	e01d      	b.n	80128be <HAL_TIM_OC_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 8012882:	687b      	ldr	r3, [r7, #4]
 8012884:	681b      	ldr	r3, [r3, #0]
 8012886:	68da      	ldr	r2, [r3, #12]
 8012888:	687b      	ldr	r3, [r7, #4]
 801288a:	681b      	ldr	r3, [r3, #0]
 801288c:	f022 0204 	bic.w	r2, r2, #4
 8012890:	60da      	str	r2, [r3, #12]
      break;
 8012892:	e014      	b.n	80128be <HAL_TIM_OC_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC3);
 8012894:	687b      	ldr	r3, [r7, #4]
 8012896:	681b      	ldr	r3, [r3, #0]
 8012898:	68da      	ldr	r2, [r3, #12]
 801289a:	687b      	ldr	r3, [r7, #4]
 801289c:	681b      	ldr	r3, [r3, #0]
 801289e:	f022 0208 	bic.w	r2, r2, #8
 80128a2:	60da      	str	r2, [r3, #12]
      break;
 80128a4:	e00b      	b.n	80128be <HAL_TIM_OC_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC4);
 80128a6:	687b      	ldr	r3, [r7, #4]
 80128a8:	681b      	ldr	r3, [r3, #0]
 80128aa:	68da      	ldr	r2, [r3, #12]
 80128ac:	687b      	ldr	r3, [r7, #4]
 80128ae:	681b      	ldr	r3, [r3, #0]
 80128b0:	f022 0210 	bic.w	r2, r2, #16
 80128b4:	60da      	str	r2, [r3, #12]
      break;
 80128b6:	e002      	b.n	80128be <HAL_TIM_OC_Stop_IT+0x9e>
    }

    default:
      status = HAL_ERROR;
 80128b8:	2301      	movs	r3, #1
 80128ba:	73fb      	strb	r3, [r7, #15]
      break;
 80128bc:	bf00      	nop
  }

  if (status == HAL_OK)
 80128be:	7bfb      	ldrb	r3, [r7, #15]
 80128c0:	2b00      	cmp	r3, #0
 80128c2:	f040 8081 	bne.w	80129c8 <HAL_TIM_OC_Stop_IT+0x1a8>
  {
    /* Disable the Output compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 80128c6:	687b      	ldr	r3, [r7, #4]
 80128c8:	681b      	ldr	r3, [r3, #0]
 80128ca:	2200      	movs	r2, #0
 80128cc:	6839      	ldr	r1, [r7, #0]
 80128ce:	4618      	mov	r0, r3
 80128d0:	f001 fde2 	bl	8014498 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80128d4:	687b      	ldr	r3, [r7, #4]
 80128d6:	681b      	ldr	r3, [r3, #0]
 80128d8:	4a3e      	ldr	r2, [pc, #248]	@ (80129d4 <HAL_TIM_OC_Stop_IT+0x1b4>)
 80128da:	4293      	cmp	r3, r2
 80128dc:	d013      	beq.n	8012906 <HAL_TIM_OC_Stop_IT+0xe6>
 80128de:	687b      	ldr	r3, [r7, #4]
 80128e0:	681b      	ldr	r3, [r3, #0]
 80128e2:	4a3d      	ldr	r2, [pc, #244]	@ (80129d8 <HAL_TIM_OC_Stop_IT+0x1b8>)
 80128e4:	4293      	cmp	r3, r2
 80128e6:	d00e      	beq.n	8012906 <HAL_TIM_OC_Stop_IT+0xe6>
 80128e8:	687b      	ldr	r3, [r7, #4]
 80128ea:	681b      	ldr	r3, [r3, #0]
 80128ec:	4a3b      	ldr	r2, [pc, #236]	@ (80129dc <HAL_TIM_OC_Stop_IT+0x1bc>)
 80128ee:	4293      	cmp	r3, r2
 80128f0:	d009      	beq.n	8012906 <HAL_TIM_OC_Stop_IT+0xe6>
 80128f2:	687b      	ldr	r3, [r7, #4]
 80128f4:	681b      	ldr	r3, [r3, #0]
 80128f6:	4a3a      	ldr	r2, [pc, #232]	@ (80129e0 <HAL_TIM_OC_Stop_IT+0x1c0>)
 80128f8:	4293      	cmp	r3, r2
 80128fa:	d004      	beq.n	8012906 <HAL_TIM_OC_Stop_IT+0xe6>
 80128fc:	687b      	ldr	r3, [r7, #4]
 80128fe:	681b      	ldr	r3, [r3, #0]
 8012900:	4a38      	ldr	r2, [pc, #224]	@ (80129e4 <HAL_TIM_OC_Stop_IT+0x1c4>)
 8012902:	4293      	cmp	r3, r2
 8012904:	d101      	bne.n	801290a <HAL_TIM_OC_Stop_IT+0xea>
 8012906:	2301      	movs	r3, #1
 8012908:	e000      	b.n	801290c <HAL_TIM_OC_Stop_IT+0xec>
 801290a:	2300      	movs	r3, #0
 801290c:	2b00      	cmp	r3, #0
 801290e:	d017      	beq.n	8012940 <HAL_TIM_OC_Stop_IT+0x120>
    {
      /* Disable the Main Output */
      __HAL_TIM_MOE_DISABLE(htim);
 8012910:	687b      	ldr	r3, [r7, #4]
 8012912:	681b      	ldr	r3, [r3, #0]
 8012914:	6a1a      	ldr	r2, [r3, #32]
 8012916:	f241 1311 	movw	r3, #4369	@ 0x1111
 801291a:	4013      	ands	r3, r2
 801291c:	2b00      	cmp	r3, #0
 801291e:	d10f      	bne.n	8012940 <HAL_TIM_OC_Stop_IT+0x120>
 8012920:	687b      	ldr	r3, [r7, #4]
 8012922:	681b      	ldr	r3, [r3, #0]
 8012924:	6a1a      	ldr	r2, [r3, #32]
 8012926:	f240 4344 	movw	r3, #1092	@ 0x444
 801292a:	4013      	ands	r3, r2
 801292c:	2b00      	cmp	r3, #0
 801292e:	d107      	bne.n	8012940 <HAL_TIM_OC_Stop_IT+0x120>
 8012930:	687b      	ldr	r3, [r7, #4]
 8012932:	681b      	ldr	r3, [r3, #0]
 8012934:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8012936:	687b      	ldr	r3, [r7, #4]
 8012938:	681b      	ldr	r3, [r3, #0]
 801293a:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 801293e:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 8012940:	687b      	ldr	r3, [r7, #4]
 8012942:	681b      	ldr	r3, [r3, #0]
 8012944:	6a1a      	ldr	r2, [r3, #32]
 8012946:	f241 1311 	movw	r3, #4369	@ 0x1111
 801294a:	4013      	ands	r3, r2
 801294c:	2b00      	cmp	r3, #0
 801294e:	d10f      	bne.n	8012970 <HAL_TIM_OC_Stop_IT+0x150>
 8012950:	687b      	ldr	r3, [r7, #4]
 8012952:	681b      	ldr	r3, [r3, #0]
 8012954:	6a1a      	ldr	r2, [r3, #32]
 8012956:	f240 4344 	movw	r3, #1092	@ 0x444
 801295a:	4013      	ands	r3, r2
 801295c:	2b00      	cmp	r3, #0
 801295e:	d107      	bne.n	8012970 <HAL_TIM_OC_Stop_IT+0x150>
 8012960:	687b      	ldr	r3, [r7, #4]
 8012962:	681b      	ldr	r3, [r3, #0]
 8012964:	681a      	ldr	r2, [r3, #0]
 8012966:	687b      	ldr	r3, [r7, #4]
 8012968:	681b      	ldr	r3, [r3, #0]
 801296a:	f022 0201 	bic.w	r2, r2, #1
 801296e:	601a      	str	r2, [r3, #0]

    /* Set the TIM channel state */
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8012970:	683b      	ldr	r3, [r7, #0]
 8012972:	2b00      	cmp	r3, #0
 8012974:	d104      	bne.n	8012980 <HAL_TIM_OC_Stop_IT+0x160>
 8012976:	687b      	ldr	r3, [r7, #4]
 8012978:	2201      	movs	r2, #1
 801297a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 801297e:	e023      	b.n	80129c8 <HAL_TIM_OC_Stop_IT+0x1a8>
 8012980:	683b      	ldr	r3, [r7, #0]
 8012982:	2b04      	cmp	r3, #4
 8012984:	d104      	bne.n	8012990 <HAL_TIM_OC_Stop_IT+0x170>
 8012986:	687b      	ldr	r3, [r7, #4]
 8012988:	2201      	movs	r2, #1
 801298a:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 801298e:	e01b      	b.n	80129c8 <HAL_TIM_OC_Stop_IT+0x1a8>
 8012990:	683b      	ldr	r3, [r7, #0]
 8012992:	2b08      	cmp	r3, #8
 8012994:	d104      	bne.n	80129a0 <HAL_TIM_OC_Stop_IT+0x180>
 8012996:	687b      	ldr	r3, [r7, #4]
 8012998:	2201      	movs	r2, #1
 801299a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 801299e:	e013      	b.n	80129c8 <HAL_TIM_OC_Stop_IT+0x1a8>
 80129a0:	683b      	ldr	r3, [r7, #0]
 80129a2:	2b0c      	cmp	r3, #12
 80129a4:	d104      	bne.n	80129b0 <HAL_TIM_OC_Stop_IT+0x190>
 80129a6:	687b      	ldr	r3, [r7, #4]
 80129a8:	2201      	movs	r2, #1
 80129aa:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80129ae:	e00b      	b.n	80129c8 <HAL_TIM_OC_Stop_IT+0x1a8>
 80129b0:	683b      	ldr	r3, [r7, #0]
 80129b2:	2b10      	cmp	r3, #16
 80129b4:	d104      	bne.n	80129c0 <HAL_TIM_OC_Stop_IT+0x1a0>
 80129b6:	687b      	ldr	r3, [r7, #4]
 80129b8:	2201      	movs	r2, #1
 80129ba:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80129be:	e003      	b.n	80129c8 <HAL_TIM_OC_Stop_IT+0x1a8>
 80129c0:	687b      	ldr	r3, [r7, #4]
 80129c2:	2201      	movs	r2, #1
 80129c4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  }

  /* Return function status */
  return status;
 80129c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80129ca:	4618      	mov	r0, r3
 80129cc:	3710      	adds	r7, #16
 80129ce:	46bd      	mov	sp, r7
 80129d0:	bd80      	pop	{r7, pc}
 80129d2:	bf00      	nop
 80129d4:	40012c00 	.word	0x40012c00
 80129d8:	40013400 	.word	0x40013400
 80129dc:	40014000 	.word	0x40014000
 80129e0:	40014400 	.word	0x40014400
 80129e4:	40014800 	.word	0x40014800

080129e8 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80129e8:	b580      	push	{r7, lr}
 80129ea:	b082      	sub	sp, #8
 80129ec:	af00      	add	r7, sp, #0
 80129ee:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80129f0:	687b      	ldr	r3, [r7, #4]
 80129f2:	2b00      	cmp	r3, #0
 80129f4:	d101      	bne.n	80129fa <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80129f6:	2301      	movs	r3, #1
 80129f8:	e049      	b.n	8012a8e <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80129fa:	687b      	ldr	r3, [r7, #4]
 80129fc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8012a00:	b2db      	uxtb	r3, r3
 8012a02:	2b00      	cmp	r3, #0
 8012a04:	d106      	bne.n	8012a14 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8012a06:	687b      	ldr	r3, [r7, #4]
 8012a08:	2200      	movs	r2, #0
 8012a0a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8012a0e:	6878      	ldr	r0, [r7, #4]
 8012a10:	f7f4 fe40 	bl	8007694 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8012a14:	687b      	ldr	r3, [r7, #4]
 8012a16:	2202      	movs	r2, #2
 8012a18:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8012a1c:	687b      	ldr	r3, [r7, #4]
 8012a1e:	681a      	ldr	r2, [r3, #0]
 8012a20:	687b      	ldr	r3, [r7, #4]
 8012a22:	3304      	adds	r3, #4
 8012a24:	4619      	mov	r1, r3
 8012a26:	4610      	mov	r0, r2
 8012a28:	f000 ff68 	bl	80138fc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8012a2c:	687b      	ldr	r3, [r7, #4]
 8012a2e:	2201      	movs	r2, #1
 8012a30:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8012a34:	687b      	ldr	r3, [r7, #4]
 8012a36:	2201      	movs	r2, #1
 8012a38:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8012a3c:	687b      	ldr	r3, [r7, #4]
 8012a3e:	2201      	movs	r2, #1
 8012a40:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8012a44:	687b      	ldr	r3, [r7, #4]
 8012a46:	2201      	movs	r2, #1
 8012a48:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8012a4c:	687b      	ldr	r3, [r7, #4]
 8012a4e:	2201      	movs	r2, #1
 8012a50:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8012a54:	687b      	ldr	r3, [r7, #4]
 8012a56:	2201      	movs	r2, #1
 8012a58:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8012a5c:	687b      	ldr	r3, [r7, #4]
 8012a5e:	2201      	movs	r2, #1
 8012a60:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8012a64:	687b      	ldr	r3, [r7, #4]
 8012a66:	2201      	movs	r2, #1
 8012a68:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8012a6c:	687b      	ldr	r3, [r7, #4]
 8012a6e:	2201      	movs	r2, #1
 8012a70:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8012a74:	687b      	ldr	r3, [r7, #4]
 8012a76:	2201      	movs	r2, #1
 8012a78:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8012a7c:	687b      	ldr	r3, [r7, #4]
 8012a7e:	2201      	movs	r2, #1
 8012a80:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8012a84:	687b      	ldr	r3, [r7, #4]
 8012a86:	2201      	movs	r2, #1
 8012a88:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8012a8c:	2300      	movs	r3, #0
}
 8012a8e:	4618      	mov	r0, r3
 8012a90:	3708      	adds	r7, #8
 8012a92:	46bd      	mov	sp, r7
 8012a94:	bd80      	pop	{r7, pc}
	...

08012a98 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8012a98:	b580      	push	{r7, lr}
 8012a9a:	b084      	sub	sp, #16
 8012a9c:	af00      	add	r7, sp, #0
 8012a9e:	6078      	str	r0, [r7, #4]
 8012aa0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8012aa2:	683b      	ldr	r3, [r7, #0]
 8012aa4:	2b00      	cmp	r3, #0
 8012aa6:	d109      	bne.n	8012abc <HAL_TIM_PWM_Start+0x24>
 8012aa8:	687b      	ldr	r3, [r7, #4]
 8012aaa:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8012aae:	b2db      	uxtb	r3, r3
 8012ab0:	2b01      	cmp	r3, #1
 8012ab2:	bf14      	ite	ne
 8012ab4:	2301      	movne	r3, #1
 8012ab6:	2300      	moveq	r3, #0
 8012ab8:	b2db      	uxtb	r3, r3
 8012aba:	e03c      	b.n	8012b36 <HAL_TIM_PWM_Start+0x9e>
 8012abc:	683b      	ldr	r3, [r7, #0]
 8012abe:	2b04      	cmp	r3, #4
 8012ac0:	d109      	bne.n	8012ad6 <HAL_TIM_PWM_Start+0x3e>
 8012ac2:	687b      	ldr	r3, [r7, #4]
 8012ac4:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8012ac8:	b2db      	uxtb	r3, r3
 8012aca:	2b01      	cmp	r3, #1
 8012acc:	bf14      	ite	ne
 8012ace:	2301      	movne	r3, #1
 8012ad0:	2300      	moveq	r3, #0
 8012ad2:	b2db      	uxtb	r3, r3
 8012ad4:	e02f      	b.n	8012b36 <HAL_TIM_PWM_Start+0x9e>
 8012ad6:	683b      	ldr	r3, [r7, #0]
 8012ad8:	2b08      	cmp	r3, #8
 8012ada:	d109      	bne.n	8012af0 <HAL_TIM_PWM_Start+0x58>
 8012adc:	687b      	ldr	r3, [r7, #4]
 8012ade:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8012ae2:	b2db      	uxtb	r3, r3
 8012ae4:	2b01      	cmp	r3, #1
 8012ae6:	bf14      	ite	ne
 8012ae8:	2301      	movne	r3, #1
 8012aea:	2300      	moveq	r3, #0
 8012aec:	b2db      	uxtb	r3, r3
 8012aee:	e022      	b.n	8012b36 <HAL_TIM_PWM_Start+0x9e>
 8012af0:	683b      	ldr	r3, [r7, #0]
 8012af2:	2b0c      	cmp	r3, #12
 8012af4:	d109      	bne.n	8012b0a <HAL_TIM_PWM_Start+0x72>
 8012af6:	687b      	ldr	r3, [r7, #4]
 8012af8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8012afc:	b2db      	uxtb	r3, r3
 8012afe:	2b01      	cmp	r3, #1
 8012b00:	bf14      	ite	ne
 8012b02:	2301      	movne	r3, #1
 8012b04:	2300      	moveq	r3, #0
 8012b06:	b2db      	uxtb	r3, r3
 8012b08:	e015      	b.n	8012b36 <HAL_TIM_PWM_Start+0x9e>
 8012b0a:	683b      	ldr	r3, [r7, #0]
 8012b0c:	2b10      	cmp	r3, #16
 8012b0e:	d109      	bne.n	8012b24 <HAL_TIM_PWM_Start+0x8c>
 8012b10:	687b      	ldr	r3, [r7, #4]
 8012b12:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8012b16:	b2db      	uxtb	r3, r3
 8012b18:	2b01      	cmp	r3, #1
 8012b1a:	bf14      	ite	ne
 8012b1c:	2301      	movne	r3, #1
 8012b1e:	2300      	moveq	r3, #0
 8012b20:	b2db      	uxtb	r3, r3
 8012b22:	e008      	b.n	8012b36 <HAL_TIM_PWM_Start+0x9e>
 8012b24:	687b      	ldr	r3, [r7, #4]
 8012b26:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8012b2a:	b2db      	uxtb	r3, r3
 8012b2c:	2b01      	cmp	r3, #1
 8012b2e:	bf14      	ite	ne
 8012b30:	2301      	movne	r3, #1
 8012b32:	2300      	moveq	r3, #0
 8012b34:	b2db      	uxtb	r3, r3
 8012b36:	2b00      	cmp	r3, #0
 8012b38:	d001      	beq.n	8012b3e <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8012b3a:	2301      	movs	r3, #1
 8012b3c:	e09c      	b.n	8012c78 <HAL_TIM_PWM_Start+0x1e0>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8012b3e:	683b      	ldr	r3, [r7, #0]
 8012b40:	2b00      	cmp	r3, #0
 8012b42:	d104      	bne.n	8012b4e <HAL_TIM_PWM_Start+0xb6>
 8012b44:	687b      	ldr	r3, [r7, #4]
 8012b46:	2202      	movs	r2, #2
 8012b48:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8012b4c:	e023      	b.n	8012b96 <HAL_TIM_PWM_Start+0xfe>
 8012b4e:	683b      	ldr	r3, [r7, #0]
 8012b50:	2b04      	cmp	r3, #4
 8012b52:	d104      	bne.n	8012b5e <HAL_TIM_PWM_Start+0xc6>
 8012b54:	687b      	ldr	r3, [r7, #4]
 8012b56:	2202      	movs	r2, #2
 8012b58:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8012b5c:	e01b      	b.n	8012b96 <HAL_TIM_PWM_Start+0xfe>
 8012b5e:	683b      	ldr	r3, [r7, #0]
 8012b60:	2b08      	cmp	r3, #8
 8012b62:	d104      	bne.n	8012b6e <HAL_TIM_PWM_Start+0xd6>
 8012b64:	687b      	ldr	r3, [r7, #4]
 8012b66:	2202      	movs	r2, #2
 8012b68:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8012b6c:	e013      	b.n	8012b96 <HAL_TIM_PWM_Start+0xfe>
 8012b6e:	683b      	ldr	r3, [r7, #0]
 8012b70:	2b0c      	cmp	r3, #12
 8012b72:	d104      	bne.n	8012b7e <HAL_TIM_PWM_Start+0xe6>
 8012b74:	687b      	ldr	r3, [r7, #4]
 8012b76:	2202      	movs	r2, #2
 8012b78:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8012b7c:	e00b      	b.n	8012b96 <HAL_TIM_PWM_Start+0xfe>
 8012b7e:	683b      	ldr	r3, [r7, #0]
 8012b80:	2b10      	cmp	r3, #16
 8012b82:	d104      	bne.n	8012b8e <HAL_TIM_PWM_Start+0xf6>
 8012b84:	687b      	ldr	r3, [r7, #4]
 8012b86:	2202      	movs	r2, #2
 8012b88:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8012b8c:	e003      	b.n	8012b96 <HAL_TIM_PWM_Start+0xfe>
 8012b8e:	687b      	ldr	r3, [r7, #4]
 8012b90:	2202      	movs	r2, #2
 8012b92:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8012b96:	687b      	ldr	r3, [r7, #4]
 8012b98:	681b      	ldr	r3, [r3, #0]
 8012b9a:	2201      	movs	r2, #1
 8012b9c:	6839      	ldr	r1, [r7, #0]
 8012b9e:	4618      	mov	r0, r3
 8012ba0:	f001 fc7a 	bl	8014498 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8012ba4:	687b      	ldr	r3, [r7, #4]
 8012ba6:	681b      	ldr	r3, [r3, #0]
 8012ba8:	4a35      	ldr	r2, [pc, #212]	@ (8012c80 <HAL_TIM_PWM_Start+0x1e8>)
 8012baa:	4293      	cmp	r3, r2
 8012bac:	d013      	beq.n	8012bd6 <HAL_TIM_PWM_Start+0x13e>
 8012bae:	687b      	ldr	r3, [r7, #4]
 8012bb0:	681b      	ldr	r3, [r3, #0]
 8012bb2:	4a34      	ldr	r2, [pc, #208]	@ (8012c84 <HAL_TIM_PWM_Start+0x1ec>)
 8012bb4:	4293      	cmp	r3, r2
 8012bb6:	d00e      	beq.n	8012bd6 <HAL_TIM_PWM_Start+0x13e>
 8012bb8:	687b      	ldr	r3, [r7, #4]
 8012bba:	681b      	ldr	r3, [r3, #0]
 8012bbc:	4a32      	ldr	r2, [pc, #200]	@ (8012c88 <HAL_TIM_PWM_Start+0x1f0>)
 8012bbe:	4293      	cmp	r3, r2
 8012bc0:	d009      	beq.n	8012bd6 <HAL_TIM_PWM_Start+0x13e>
 8012bc2:	687b      	ldr	r3, [r7, #4]
 8012bc4:	681b      	ldr	r3, [r3, #0]
 8012bc6:	4a31      	ldr	r2, [pc, #196]	@ (8012c8c <HAL_TIM_PWM_Start+0x1f4>)
 8012bc8:	4293      	cmp	r3, r2
 8012bca:	d004      	beq.n	8012bd6 <HAL_TIM_PWM_Start+0x13e>
 8012bcc:	687b      	ldr	r3, [r7, #4]
 8012bce:	681b      	ldr	r3, [r3, #0]
 8012bd0:	4a2f      	ldr	r2, [pc, #188]	@ (8012c90 <HAL_TIM_PWM_Start+0x1f8>)
 8012bd2:	4293      	cmp	r3, r2
 8012bd4:	d101      	bne.n	8012bda <HAL_TIM_PWM_Start+0x142>
 8012bd6:	2301      	movs	r3, #1
 8012bd8:	e000      	b.n	8012bdc <HAL_TIM_PWM_Start+0x144>
 8012bda:	2300      	movs	r3, #0
 8012bdc:	2b00      	cmp	r3, #0
 8012bde:	d007      	beq.n	8012bf0 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8012be0:	687b      	ldr	r3, [r7, #4]
 8012be2:	681b      	ldr	r3, [r3, #0]
 8012be4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8012be6:	687b      	ldr	r3, [r7, #4]
 8012be8:	681b      	ldr	r3, [r3, #0]
 8012bea:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8012bee:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8012bf0:	687b      	ldr	r3, [r7, #4]
 8012bf2:	681b      	ldr	r3, [r3, #0]
 8012bf4:	4a22      	ldr	r2, [pc, #136]	@ (8012c80 <HAL_TIM_PWM_Start+0x1e8>)
 8012bf6:	4293      	cmp	r3, r2
 8012bf8:	d01d      	beq.n	8012c36 <HAL_TIM_PWM_Start+0x19e>
 8012bfa:	687b      	ldr	r3, [r7, #4]
 8012bfc:	681b      	ldr	r3, [r3, #0]
 8012bfe:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8012c02:	d018      	beq.n	8012c36 <HAL_TIM_PWM_Start+0x19e>
 8012c04:	687b      	ldr	r3, [r7, #4]
 8012c06:	681b      	ldr	r3, [r3, #0]
 8012c08:	4a22      	ldr	r2, [pc, #136]	@ (8012c94 <HAL_TIM_PWM_Start+0x1fc>)
 8012c0a:	4293      	cmp	r3, r2
 8012c0c:	d013      	beq.n	8012c36 <HAL_TIM_PWM_Start+0x19e>
 8012c0e:	687b      	ldr	r3, [r7, #4]
 8012c10:	681b      	ldr	r3, [r3, #0]
 8012c12:	4a21      	ldr	r2, [pc, #132]	@ (8012c98 <HAL_TIM_PWM_Start+0x200>)
 8012c14:	4293      	cmp	r3, r2
 8012c16:	d00e      	beq.n	8012c36 <HAL_TIM_PWM_Start+0x19e>
 8012c18:	687b      	ldr	r3, [r7, #4]
 8012c1a:	681b      	ldr	r3, [r3, #0]
 8012c1c:	4a1f      	ldr	r2, [pc, #124]	@ (8012c9c <HAL_TIM_PWM_Start+0x204>)
 8012c1e:	4293      	cmp	r3, r2
 8012c20:	d009      	beq.n	8012c36 <HAL_TIM_PWM_Start+0x19e>
 8012c22:	687b      	ldr	r3, [r7, #4]
 8012c24:	681b      	ldr	r3, [r3, #0]
 8012c26:	4a17      	ldr	r2, [pc, #92]	@ (8012c84 <HAL_TIM_PWM_Start+0x1ec>)
 8012c28:	4293      	cmp	r3, r2
 8012c2a:	d004      	beq.n	8012c36 <HAL_TIM_PWM_Start+0x19e>
 8012c2c:	687b      	ldr	r3, [r7, #4]
 8012c2e:	681b      	ldr	r3, [r3, #0]
 8012c30:	4a15      	ldr	r2, [pc, #84]	@ (8012c88 <HAL_TIM_PWM_Start+0x1f0>)
 8012c32:	4293      	cmp	r3, r2
 8012c34:	d115      	bne.n	8012c62 <HAL_TIM_PWM_Start+0x1ca>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8012c36:	687b      	ldr	r3, [r7, #4]
 8012c38:	681b      	ldr	r3, [r3, #0]
 8012c3a:	689a      	ldr	r2, [r3, #8]
 8012c3c:	4b18      	ldr	r3, [pc, #96]	@ (8012ca0 <HAL_TIM_PWM_Start+0x208>)
 8012c3e:	4013      	ands	r3, r2
 8012c40:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8012c42:	68fb      	ldr	r3, [r7, #12]
 8012c44:	2b06      	cmp	r3, #6
 8012c46:	d015      	beq.n	8012c74 <HAL_TIM_PWM_Start+0x1dc>
 8012c48:	68fb      	ldr	r3, [r7, #12]
 8012c4a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8012c4e:	d011      	beq.n	8012c74 <HAL_TIM_PWM_Start+0x1dc>
    {
      __HAL_TIM_ENABLE(htim);
 8012c50:	687b      	ldr	r3, [r7, #4]
 8012c52:	681b      	ldr	r3, [r3, #0]
 8012c54:	681a      	ldr	r2, [r3, #0]
 8012c56:	687b      	ldr	r3, [r7, #4]
 8012c58:	681b      	ldr	r3, [r3, #0]
 8012c5a:	f042 0201 	orr.w	r2, r2, #1
 8012c5e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8012c60:	e008      	b.n	8012c74 <HAL_TIM_PWM_Start+0x1dc>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8012c62:	687b      	ldr	r3, [r7, #4]
 8012c64:	681b      	ldr	r3, [r3, #0]
 8012c66:	681a      	ldr	r2, [r3, #0]
 8012c68:	687b      	ldr	r3, [r7, #4]
 8012c6a:	681b      	ldr	r3, [r3, #0]
 8012c6c:	f042 0201 	orr.w	r2, r2, #1
 8012c70:	601a      	str	r2, [r3, #0]
 8012c72:	e000      	b.n	8012c76 <HAL_TIM_PWM_Start+0x1de>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8012c74:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8012c76:	2300      	movs	r3, #0
}
 8012c78:	4618      	mov	r0, r3
 8012c7a:	3710      	adds	r7, #16
 8012c7c:	46bd      	mov	sp, r7
 8012c7e:	bd80      	pop	{r7, pc}
 8012c80:	40012c00 	.word	0x40012c00
 8012c84:	40013400 	.word	0x40013400
 8012c88:	40014000 	.word	0x40014000
 8012c8c:	40014400 	.word	0x40014400
 8012c90:	40014800 	.word	0x40014800
 8012c94:	40000400 	.word	0x40000400
 8012c98:	40000800 	.word	0x40000800
 8012c9c:	40000c00 	.word	0x40000c00
 8012ca0:	00010007 	.word	0x00010007

08012ca4 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8012ca4:	b580      	push	{r7, lr}
 8012ca6:	b082      	sub	sp, #8
 8012ca8:	af00      	add	r7, sp, #0
 8012caa:	6078      	str	r0, [r7, #4]
 8012cac:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8012cae:	687b      	ldr	r3, [r7, #4]
 8012cb0:	681b      	ldr	r3, [r3, #0]
 8012cb2:	2200      	movs	r2, #0
 8012cb4:	6839      	ldr	r1, [r7, #0]
 8012cb6:	4618      	mov	r0, r3
 8012cb8:	f001 fbee 	bl	8014498 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8012cbc:	687b      	ldr	r3, [r7, #4]
 8012cbe:	681b      	ldr	r3, [r3, #0]
 8012cc0:	4a3e      	ldr	r2, [pc, #248]	@ (8012dbc <HAL_TIM_PWM_Stop+0x118>)
 8012cc2:	4293      	cmp	r3, r2
 8012cc4:	d013      	beq.n	8012cee <HAL_TIM_PWM_Stop+0x4a>
 8012cc6:	687b      	ldr	r3, [r7, #4]
 8012cc8:	681b      	ldr	r3, [r3, #0]
 8012cca:	4a3d      	ldr	r2, [pc, #244]	@ (8012dc0 <HAL_TIM_PWM_Stop+0x11c>)
 8012ccc:	4293      	cmp	r3, r2
 8012cce:	d00e      	beq.n	8012cee <HAL_TIM_PWM_Stop+0x4a>
 8012cd0:	687b      	ldr	r3, [r7, #4]
 8012cd2:	681b      	ldr	r3, [r3, #0]
 8012cd4:	4a3b      	ldr	r2, [pc, #236]	@ (8012dc4 <HAL_TIM_PWM_Stop+0x120>)
 8012cd6:	4293      	cmp	r3, r2
 8012cd8:	d009      	beq.n	8012cee <HAL_TIM_PWM_Stop+0x4a>
 8012cda:	687b      	ldr	r3, [r7, #4]
 8012cdc:	681b      	ldr	r3, [r3, #0]
 8012cde:	4a3a      	ldr	r2, [pc, #232]	@ (8012dc8 <HAL_TIM_PWM_Stop+0x124>)
 8012ce0:	4293      	cmp	r3, r2
 8012ce2:	d004      	beq.n	8012cee <HAL_TIM_PWM_Stop+0x4a>
 8012ce4:	687b      	ldr	r3, [r7, #4]
 8012ce6:	681b      	ldr	r3, [r3, #0]
 8012ce8:	4a38      	ldr	r2, [pc, #224]	@ (8012dcc <HAL_TIM_PWM_Stop+0x128>)
 8012cea:	4293      	cmp	r3, r2
 8012cec:	d101      	bne.n	8012cf2 <HAL_TIM_PWM_Stop+0x4e>
 8012cee:	2301      	movs	r3, #1
 8012cf0:	e000      	b.n	8012cf4 <HAL_TIM_PWM_Stop+0x50>
 8012cf2:	2300      	movs	r3, #0
 8012cf4:	2b00      	cmp	r3, #0
 8012cf6:	d017      	beq.n	8012d28 <HAL_TIM_PWM_Stop+0x84>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8012cf8:	687b      	ldr	r3, [r7, #4]
 8012cfa:	681b      	ldr	r3, [r3, #0]
 8012cfc:	6a1a      	ldr	r2, [r3, #32]
 8012cfe:	f241 1311 	movw	r3, #4369	@ 0x1111
 8012d02:	4013      	ands	r3, r2
 8012d04:	2b00      	cmp	r3, #0
 8012d06:	d10f      	bne.n	8012d28 <HAL_TIM_PWM_Stop+0x84>
 8012d08:	687b      	ldr	r3, [r7, #4]
 8012d0a:	681b      	ldr	r3, [r3, #0]
 8012d0c:	6a1a      	ldr	r2, [r3, #32]
 8012d0e:	f240 4344 	movw	r3, #1092	@ 0x444
 8012d12:	4013      	ands	r3, r2
 8012d14:	2b00      	cmp	r3, #0
 8012d16:	d107      	bne.n	8012d28 <HAL_TIM_PWM_Stop+0x84>
 8012d18:	687b      	ldr	r3, [r7, #4]
 8012d1a:	681b      	ldr	r3, [r3, #0]
 8012d1c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8012d1e:	687b      	ldr	r3, [r7, #4]
 8012d20:	681b      	ldr	r3, [r3, #0]
 8012d22:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8012d26:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8012d28:	687b      	ldr	r3, [r7, #4]
 8012d2a:	681b      	ldr	r3, [r3, #0]
 8012d2c:	6a1a      	ldr	r2, [r3, #32]
 8012d2e:	f241 1311 	movw	r3, #4369	@ 0x1111
 8012d32:	4013      	ands	r3, r2
 8012d34:	2b00      	cmp	r3, #0
 8012d36:	d10f      	bne.n	8012d58 <HAL_TIM_PWM_Stop+0xb4>
 8012d38:	687b      	ldr	r3, [r7, #4]
 8012d3a:	681b      	ldr	r3, [r3, #0]
 8012d3c:	6a1a      	ldr	r2, [r3, #32]
 8012d3e:	f240 4344 	movw	r3, #1092	@ 0x444
 8012d42:	4013      	ands	r3, r2
 8012d44:	2b00      	cmp	r3, #0
 8012d46:	d107      	bne.n	8012d58 <HAL_TIM_PWM_Stop+0xb4>
 8012d48:	687b      	ldr	r3, [r7, #4]
 8012d4a:	681b      	ldr	r3, [r3, #0]
 8012d4c:	681a      	ldr	r2, [r3, #0]
 8012d4e:	687b      	ldr	r3, [r7, #4]
 8012d50:	681b      	ldr	r3, [r3, #0]
 8012d52:	f022 0201 	bic.w	r2, r2, #1
 8012d56:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8012d58:	683b      	ldr	r3, [r7, #0]
 8012d5a:	2b00      	cmp	r3, #0
 8012d5c:	d104      	bne.n	8012d68 <HAL_TIM_PWM_Stop+0xc4>
 8012d5e:	687b      	ldr	r3, [r7, #4]
 8012d60:	2201      	movs	r2, #1
 8012d62:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8012d66:	e023      	b.n	8012db0 <HAL_TIM_PWM_Stop+0x10c>
 8012d68:	683b      	ldr	r3, [r7, #0]
 8012d6a:	2b04      	cmp	r3, #4
 8012d6c:	d104      	bne.n	8012d78 <HAL_TIM_PWM_Stop+0xd4>
 8012d6e:	687b      	ldr	r3, [r7, #4]
 8012d70:	2201      	movs	r2, #1
 8012d72:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8012d76:	e01b      	b.n	8012db0 <HAL_TIM_PWM_Stop+0x10c>
 8012d78:	683b      	ldr	r3, [r7, #0]
 8012d7a:	2b08      	cmp	r3, #8
 8012d7c:	d104      	bne.n	8012d88 <HAL_TIM_PWM_Stop+0xe4>
 8012d7e:	687b      	ldr	r3, [r7, #4]
 8012d80:	2201      	movs	r2, #1
 8012d82:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8012d86:	e013      	b.n	8012db0 <HAL_TIM_PWM_Stop+0x10c>
 8012d88:	683b      	ldr	r3, [r7, #0]
 8012d8a:	2b0c      	cmp	r3, #12
 8012d8c:	d104      	bne.n	8012d98 <HAL_TIM_PWM_Stop+0xf4>
 8012d8e:	687b      	ldr	r3, [r7, #4]
 8012d90:	2201      	movs	r2, #1
 8012d92:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8012d96:	e00b      	b.n	8012db0 <HAL_TIM_PWM_Stop+0x10c>
 8012d98:	683b      	ldr	r3, [r7, #0]
 8012d9a:	2b10      	cmp	r3, #16
 8012d9c:	d104      	bne.n	8012da8 <HAL_TIM_PWM_Stop+0x104>
 8012d9e:	687b      	ldr	r3, [r7, #4]
 8012da0:	2201      	movs	r2, #1
 8012da2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8012da6:	e003      	b.n	8012db0 <HAL_TIM_PWM_Stop+0x10c>
 8012da8:	687b      	ldr	r3, [r7, #4]
 8012daa:	2201      	movs	r2, #1
 8012dac:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Return function status */
  return HAL_OK;
 8012db0:	2300      	movs	r3, #0
}
 8012db2:	4618      	mov	r0, r3
 8012db4:	3708      	adds	r7, #8
 8012db6:	46bd      	mov	sp, r7
 8012db8:	bd80      	pop	{r7, pc}
 8012dba:	bf00      	nop
 8012dbc:	40012c00 	.word	0x40012c00
 8012dc0:	40013400 	.word	0x40013400
 8012dc4:	40014000 	.word	0x40014000
 8012dc8:	40014400 	.word	0x40014400
 8012dcc:	40014800 	.word	0x40014800

08012dd0 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8012dd0:	b580      	push	{r7, lr}
 8012dd2:	b082      	sub	sp, #8
 8012dd4:	af00      	add	r7, sp, #0
 8012dd6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8012dd8:	687b      	ldr	r3, [r7, #4]
 8012dda:	2b00      	cmp	r3, #0
 8012ddc:	d101      	bne.n	8012de2 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8012dde:	2301      	movs	r3, #1
 8012de0:	e049      	b.n	8012e76 <HAL_TIM_IC_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8012de2:	687b      	ldr	r3, [r7, #4]
 8012de4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8012de8:	b2db      	uxtb	r3, r3
 8012dea:	2b00      	cmp	r3, #0
 8012dec:	d106      	bne.n	8012dfc <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8012dee:	687b      	ldr	r3, [r7, #4]
 8012df0:	2200      	movs	r2, #0
 8012df2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8012df6:	6878      	ldr	r0, [r7, #4]
 8012df8:	f7f4 fc6c 	bl	80076d4 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8012dfc:	687b      	ldr	r3, [r7, #4]
 8012dfe:	2202      	movs	r2, #2
 8012e00:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8012e04:	687b      	ldr	r3, [r7, #4]
 8012e06:	681a      	ldr	r2, [r3, #0]
 8012e08:	687b      	ldr	r3, [r7, #4]
 8012e0a:	3304      	adds	r3, #4
 8012e0c:	4619      	mov	r1, r3
 8012e0e:	4610      	mov	r0, r2
 8012e10:	f000 fd74 	bl	80138fc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8012e14:	687b      	ldr	r3, [r7, #4]
 8012e16:	2201      	movs	r2, #1
 8012e18:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8012e1c:	687b      	ldr	r3, [r7, #4]
 8012e1e:	2201      	movs	r2, #1
 8012e20:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8012e24:	687b      	ldr	r3, [r7, #4]
 8012e26:	2201      	movs	r2, #1
 8012e28:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8012e2c:	687b      	ldr	r3, [r7, #4]
 8012e2e:	2201      	movs	r2, #1
 8012e30:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8012e34:	687b      	ldr	r3, [r7, #4]
 8012e36:	2201      	movs	r2, #1
 8012e38:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8012e3c:	687b      	ldr	r3, [r7, #4]
 8012e3e:	2201      	movs	r2, #1
 8012e40:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8012e44:	687b      	ldr	r3, [r7, #4]
 8012e46:	2201      	movs	r2, #1
 8012e48:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8012e4c:	687b      	ldr	r3, [r7, #4]
 8012e4e:	2201      	movs	r2, #1
 8012e50:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8012e54:	687b      	ldr	r3, [r7, #4]
 8012e56:	2201      	movs	r2, #1
 8012e58:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8012e5c:	687b      	ldr	r3, [r7, #4]
 8012e5e:	2201      	movs	r2, #1
 8012e60:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8012e64:	687b      	ldr	r3, [r7, #4]
 8012e66:	2201      	movs	r2, #1
 8012e68:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8012e6c:	687b      	ldr	r3, [r7, #4]
 8012e6e:	2201      	movs	r2, #1
 8012e70:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8012e74:	2300      	movs	r3, #0
}
 8012e76:	4618      	mov	r0, r3
 8012e78:	3708      	adds	r7, #8
 8012e7a:	46bd      	mov	sp, r7
 8012e7c:	bd80      	pop	{r7, pc}
	...

08012e80 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8012e80:	b580      	push	{r7, lr}
 8012e82:	b084      	sub	sp, #16
 8012e84:	af00      	add	r7, sp, #0
 8012e86:	6078      	str	r0, [r7, #4]
 8012e88:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8012e8a:	2300      	movs	r3, #0
 8012e8c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8012e8e:	683b      	ldr	r3, [r7, #0]
 8012e90:	2b00      	cmp	r3, #0
 8012e92:	d104      	bne.n	8012e9e <HAL_TIM_IC_Start_IT+0x1e>
 8012e94:	687b      	ldr	r3, [r7, #4]
 8012e96:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8012e9a:	b2db      	uxtb	r3, r3
 8012e9c:	e023      	b.n	8012ee6 <HAL_TIM_IC_Start_IT+0x66>
 8012e9e:	683b      	ldr	r3, [r7, #0]
 8012ea0:	2b04      	cmp	r3, #4
 8012ea2:	d104      	bne.n	8012eae <HAL_TIM_IC_Start_IT+0x2e>
 8012ea4:	687b      	ldr	r3, [r7, #4]
 8012ea6:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8012eaa:	b2db      	uxtb	r3, r3
 8012eac:	e01b      	b.n	8012ee6 <HAL_TIM_IC_Start_IT+0x66>
 8012eae:	683b      	ldr	r3, [r7, #0]
 8012eb0:	2b08      	cmp	r3, #8
 8012eb2:	d104      	bne.n	8012ebe <HAL_TIM_IC_Start_IT+0x3e>
 8012eb4:	687b      	ldr	r3, [r7, #4]
 8012eb6:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8012eba:	b2db      	uxtb	r3, r3
 8012ebc:	e013      	b.n	8012ee6 <HAL_TIM_IC_Start_IT+0x66>
 8012ebe:	683b      	ldr	r3, [r7, #0]
 8012ec0:	2b0c      	cmp	r3, #12
 8012ec2:	d104      	bne.n	8012ece <HAL_TIM_IC_Start_IT+0x4e>
 8012ec4:	687b      	ldr	r3, [r7, #4]
 8012ec6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8012eca:	b2db      	uxtb	r3, r3
 8012ecc:	e00b      	b.n	8012ee6 <HAL_TIM_IC_Start_IT+0x66>
 8012ece:	683b      	ldr	r3, [r7, #0]
 8012ed0:	2b10      	cmp	r3, #16
 8012ed2:	d104      	bne.n	8012ede <HAL_TIM_IC_Start_IT+0x5e>
 8012ed4:	687b      	ldr	r3, [r7, #4]
 8012ed6:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8012eda:	b2db      	uxtb	r3, r3
 8012edc:	e003      	b.n	8012ee6 <HAL_TIM_IC_Start_IT+0x66>
 8012ede:	687b      	ldr	r3, [r7, #4]
 8012ee0:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8012ee4:	b2db      	uxtb	r3, r3
 8012ee6:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8012ee8:	683b      	ldr	r3, [r7, #0]
 8012eea:	2b00      	cmp	r3, #0
 8012eec:	d104      	bne.n	8012ef8 <HAL_TIM_IC_Start_IT+0x78>
 8012eee:	687b      	ldr	r3, [r7, #4]
 8012ef0:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8012ef4:	b2db      	uxtb	r3, r3
 8012ef6:	e013      	b.n	8012f20 <HAL_TIM_IC_Start_IT+0xa0>
 8012ef8:	683b      	ldr	r3, [r7, #0]
 8012efa:	2b04      	cmp	r3, #4
 8012efc:	d104      	bne.n	8012f08 <HAL_TIM_IC_Start_IT+0x88>
 8012efe:	687b      	ldr	r3, [r7, #4]
 8012f00:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8012f04:	b2db      	uxtb	r3, r3
 8012f06:	e00b      	b.n	8012f20 <HAL_TIM_IC_Start_IT+0xa0>
 8012f08:	683b      	ldr	r3, [r7, #0]
 8012f0a:	2b08      	cmp	r3, #8
 8012f0c:	d104      	bne.n	8012f18 <HAL_TIM_IC_Start_IT+0x98>
 8012f0e:	687b      	ldr	r3, [r7, #4]
 8012f10:	f893 3046 	ldrb.w	r3, [r3, #70]	@ 0x46
 8012f14:	b2db      	uxtb	r3, r3
 8012f16:	e003      	b.n	8012f20 <HAL_TIM_IC_Start_IT+0xa0>
 8012f18:	687b      	ldr	r3, [r7, #4]
 8012f1a:	f893 3047 	ldrb.w	r3, [r3, #71]	@ 0x47
 8012f1e:	b2db      	uxtb	r3, r3
 8012f20:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_CHANNEL(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 8012f22:	7bbb      	ldrb	r3, [r7, #14]
 8012f24:	2b01      	cmp	r3, #1
 8012f26:	d102      	bne.n	8012f2e <HAL_TIM_IC_Start_IT+0xae>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8012f28:	7b7b      	ldrb	r3, [r7, #13]
 8012f2a:	2b01      	cmp	r3, #1
 8012f2c:	d001      	beq.n	8012f32 <HAL_TIM_IC_Start_IT+0xb2>
  {
    return HAL_ERROR;
 8012f2e:	2301      	movs	r3, #1
 8012f30:	e0dd      	b.n	80130ee <HAL_TIM_IC_Start_IT+0x26e>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8012f32:	683b      	ldr	r3, [r7, #0]
 8012f34:	2b00      	cmp	r3, #0
 8012f36:	d104      	bne.n	8012f42 <HAL_TIM_IC_Start_IT+0xc2>
 8012f38:	687b      	ldr	r3, [r7, #4]
 8012f3a:	2202      	movs	r2, #2
 8012f3c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8012f40:	e023      	b.n	8012f8a <HAL_TIM_IC_Start_IT+0x10a>
 8012f42:	683b      	ldr	r3, [r7, #0]
 8012f44:	2b04      	cmp	r3, #4
 8012f46:	d104      	bne.n	8012f52 <HAL_TIM_IC_Start_IT+0xd2>
 8012f48:	687b      	ldr	r3, [r7, #4]
 8012f4a:	2202      	movs	r2, #2
 8012f4c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8012f50:	e01b      	b.n	8012f8a <HAL_TIM_IC_Start_IT+0x10a>
 8012f52:	683b      	ldr	r3, [r7, #0]
 8012f54:	2b08      	cmp	r3, #8
 8012f56:	d104      	bne.n	8012f62 <HAL_TIM_IC_Start_IT+0xe2>
 8012f58:	687b      	ldr	r3, [r7, #4]
 8012f5a:	2202      	movs	r2, #2
 8012f5c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8012f60:	e013      	b.n	8012f8a <HAL_TIM_IC_Start_IT+0x10a>
 8012f62:	683b      	ldr	r3, [r7, #0]
 8012f64:	2b0c      	cmp	r3, #12
 8012f66:	d104      	bne.n	8012f72 <HAL_TIM_IC_Start_IT+0xf2>
 8012f68:	687b      	ldr	r3, [r7, #4]
 8012f6a:	2202      	movs	r2, #2
 8012f6c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8012f70:	e00b      	b.n	8012f8a <HAL_TIM_IC_Start_IT+0x10a>
 8012f72:	683b      	ldr	r3, [r7, #0]
 8012f74:	2b10      	cmp	r3, #16
 8012f76:	d104      	bne.n	8012f82 <HAL_TIM_IC_Start_IT+0x102>
 8012f78:	687b      	ldr	r3, [r7, #4]
 8012f7a:	2202      	movs	r2, #2
 8012f7c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8012f80:	e003      	b.n	8012f8a <HAL_TIM_IC_Start_IT+0x10a>
 8012f82:	687b      	ldr	r3, [r7, #4]
 8012f84:	2202      	movs	r2, #2
 8012f86:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8012f8a:	683b      	ldr	r3, [r7, #0]
 8012f8c:	2b00      	cmp	r3, #0
 8012f8e:	d104      	bne.n	8012f9a <HAL_TIM_IC_Start_IT+0x11a>
 8012f90:	687b      	ldr	r3, [r7, #4]
 8012f92:	2202      	movs	r2, #2
 8012f94:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8012f98:	e013      	b.n	8012fc2 <HAL_TIM_IC_Start_IT+0x142>
 8012f9a:	683b      	ldr	r3, [r7, #0]
 8012f9c:	2b04      	cmp	r3, #4
 8012f9e:	d104      	bne.n	8012faa <HAL_TIM_IC_Start_IT+0x12a>
 8012fa0:	687b      	ldr	r3, [r7, #4]
 8012fa2:	2202      	movs	r2, #2
 8012fa4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8012fa8:	e00b      	b.n	8012fc2 <HAL_TIM_IC_Start_IT+0x142>
 8012faa:	683b      	ldr	r3, [r7, #0]
 8012fac:	2b08      	cmp	r3, #8
 8012fae:	d104      	bne.n	8012fba <HAL_TIM_IC_Start_IT+0x13a>
 8012fb0:	687b      	ldr	r3, [r7, #4]
 8012fb2:	2202      	movs	r2, #2
 8012fb4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8012fb8:	e003      	b.n	8012fc2 <HAL_TIM_IC_Start_IT+0x142>
 8012fba:	687b      	ldr	r3, [r7, #4]
 8012fbc:	2202      	movs	r2, #2
 8012fbe:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  switch (Channel)
 8012fc2:	683b      	ldr	r3, [r7, #0]
 8012fc4:	2b0c      	cmp	r3, #12
 8012fc6:	d841      	bhi.n	801304c <HAL_TIM_IC_Start_IT+0x1cc>
 8012fc8:	a201      	add	r2, pc, #4	@ (adr r2, 8012fd0 <HAL_TIM_IC_Start_IT+0x150>)
 8012fca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012fce:	bf00      	nop
 8012fd0:	08013005 	.word	0x08013005
 8012fd4:	0801304d 	.word	0x0801304d
 8012fd8:	0801304d 	.word	0x0801304d
 8012fdc:	0801304d 	.word	0x0801304d
 8012fe0:	08013017 	.word	0x08013017
 8012fe4:	0801304d 	.word	0x0801304d
 8012fe8:	0801304d 	.word	0x0801304d
 8012fec:	0801304d 	.word	0x0801304d
 8012ff0:	08013029 	.word	0x08013029
 8012ff4:	0801304d 	.word	0x0801304d
 8012ff8:	0801304d 	.word	0x0801304d
 8012ffc:	0801304d 	.word	0x0801304d
 8013000:	0801303b 	.word	0x0801303b
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8013004:	687b      	ldr	r3, [r7, #4]
 8013006:	681b      	ldr	r3, [r3, #0]
 8013008:	68da      	ldr	r2, [r3, #12]
 801300a:	687b      	ldr	r3, [r7, #4]
 801300c:	681b      	ldr	r3, [r3, #0]
 801300e:	f042 0202 	orr.w	r2, r2, #2
 8013012:	60da      	str	r2, [r3, #12]
      break;
 8013014:	e01d      	b.n	8013052 <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8013016:	687b      	ldr	r3, [r7, #4]
 8013018:	681b      	ldr	r3, [r3, #0]
 801301a:	68da      	ldr	r2, [r3, #12]
 801301c:	687b      	ldr	r3, [r7, #4]
 801301e:	681b      	ldr	r3, [r3, #0]
 8013020:	f042 0204 	orr.w	r2, r2, #4
 8013024:	60da      	str	r2, [r3, #12]
      break;
 8013026:	e014      	b.n	8013052 <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8013028:	687b      	ldr	r3, [r7, #4]
 801302a:	681b      	ldr	r3, [r3, #0]
 801302c:	68da      	ldr	r2, [r3, #12]
 801302e:	687b      	ldr	r3, [r7, #4]
 8013030:	681b      	ldr	r3, [r3, #0]
 8013032:	f042 0208 	orr.w	r2, r2, #8
 8013036:	60da      	str	r2, [r3, #12]
      break;
 8013038:	e00b      	b.n	8013052 <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 801303a:	687b      	ldr	r3, [r7, #4]
 801303c:	681b      	ldr	r3, [r3, #0]
 801303e:	68da      	ldr	r2, [r3, #12]
 8013040:	687b      	ldr	r3, [r7, #4]
 8013042:	681b      	ldr	r3, [r3, #0]
 8013044:	f042 0210 	orr.w	r2, r2, #16
 8013048:	60da      	str	r2, [r3, #12]
      break;
 801304a:	e002      	b.n	8013052 <HAL_TIM_IC_Start_IT+0x1d2>
    }

    default:
      status = HAL_ERROR;
 801304c:	2301      	movs	r3, #1
 801304e:	73fb      	strb	r3, [r7, #15]
      break;
 8013050:	bf00      	nop
  }

  if (status == HAL_OK)
 8013052:	7bfb      	ldrb	r3, [r7, #15]
 8013054:	2b00      	cmp	r3, #0
 8013056:	d149      	bne.n	80130ec <HAL_TIM_IC_Start_IT+0x26c>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8013058:	687b      	ldr	r3, [r7, #4]
 801305a:	681b      	ldr	r3, [r3, #0]
 801305c:	2201      	movs	r2, #1
 801305e:	6839      	ldr	r1, [r7, #0]
 8013060:	4618      	mov	r0, r3
 8013062:	f001 fa19 	bl	8014498 <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8013066:	687b      	ldr	r3, [r7, #4]
 8013068:	681b      	ldr	r3, [r3, #0]
 801306a:	4a23      	ldr	r2, [pc, #140]	@ (80130f8 <HAL_TIM_IC_Start_IT+0x278>)
 801306c:	4293      	cmp	r3, r2
 801306e:	d01d      	beq.n	80130ac <HAL_TIM_IC_Start_IT+0x22c>
 8013070:	687b      	ldr	r3, [r7, #4]
 8013072:	681b      	ldr	r3, [r3, #0]
 8013074:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8013078:	d018      	beq.n	80130ac <HAL_TIM_IC_Start_IT+0x22c>
 801307a:	687b      	ldr	r3, [r7, #4]
 801307c:	681b      	ldr	r3, [r3, #0]
 801307e:	4a1f      	ldr	r2, [pc, #124]	@ (80130fc <HAL_TIM_IC_Start_IT+0x27c>)
 8013080:	4293      	cmp	r3, r2
 8013082:	d013      	beq.n	80130ac <HAL_TIM_IC_Start_IT+0x22c>
 8013084:	687b      	ldr	r3, [r7, #4]
 8013086:	681b      	ldr	r3, [r3, #0]
 8013088:	4a1d      	ldr	r2, [pc, #116]	@ (8013100 <HAL_TIM_IC_Start_IT+0x280>)
 801308a:	4293      	cmp	r3, r2
 801308c:	d00e      	beq.n	80130ac <HAL_TIM_IC_Start_IT+0x22c>
 801308e:	687b      	ldr	r3, [r7, #4]
 8013090:	681b      	ldr	r3, [r3, #0]
 8013092:	4a1c      	ldr	r2, [pc, #112]	@ (8013104 <HAL_TIM_IC_Start_IT+0x284>)
 8013094:	4293      	cmp	r3, r2
 8013096:	d009      	beq.n	80130ac <HAL_TIM_IC_Start_IT+0x22c>
 8013098:	687b      	ldr	r3, [r7, #4]
 801309a:	681b      	ldr	r3, [r3, #0]
 801309c:	4a1a      	ldr	r2, [pc, #104]	@ (8013108 <HAL_TIM_IC_Start_IT+0x288>)
 801309e:	4293      	cmp	r3, r2
 80130a0:	d004      	beq.n	80130ac <HAL_TIM_IC_Start_IT+0x22c>
 80130a2:	687b      	ldr	r3, [r7, #4]
 80130a4:	681b      	ldr	r3, [r3, #0]
 80130a6:	4a19      	ldr	r2, [pc, #100]	@ (801310c <HAL_TIM_IC_Start_IT+0x28c>)
 80130a8:	4293      	cmp	r3, r2
 80130aa:	d115      	bne.n	80130d8 <HAL_TIM_IC_Start_IT+0x258>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80130ac:	687b      	ldr	r3, [r7, #4]
 80130ae:	681b      	ldr	r3, [r3, #0]
 80130b0:	689a      	ldr	r2, [r3, #8]
 80130b2:	4b17      	ldr	r3, [pc, #92]	@ (8013110 <HAL_TIM_IC_Start_IT+0x290>)
 80130b4:	4013      	ands	r3, r2
 80130b6:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80130b8:	68bb      	ldr	r3, [r7, #8]
 80130ba:	2b06      	cmp	r3, #6
 80130bc:	d015      	beq.n	80130ea <HAL_TIM_IC_Start_IT+0x26a>
 80130be:	68bb      	ldr	r3, [r7, #8]
 80130c0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80130c4:	d011      	beq.n	80130ea <HAL_TIM_IC_Start_IT+0x26a>
      {
        __HAL_TIM_ENABLE(htim);
 80130c6:	687b      	ldr	r3, [r7, #4]
 80130c8:	681b      	ldr	r3, [r3, #0]
 80130ca:	681a      	ldr	r2, [r3, #0]
 80130cc:	687b      	ldr	r3, [r7, #4]
 80130ce:	681b      	ldr	r3, [r3, #0]
 80130d0:	f042 0201 	orr.w	r2, r2, #1
 80130d4:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80130d6:	e008      	b.n	80130ea <HAL_TIM_IC_Start_IT+0x26a>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 80130d8:	687b      	ldr	r3, [r7, #4]
 80130da:	681b      	ldr	r3, [r3, #0]
 80130dc:	681a      	ldr	r2, [r3, #0]
 80130de:	687b      	ldr	r3, [r7, #4]
 80130e0:	681b      	ldr	r3, [r3, #0]
 80130e2:	f042 0201 	orr.w	r2, r2, #1
 80130e6:	601a      	str	r2, [r3, #0]
 80130e8:	e000      	b.n	80130ec <HAL_TIM_IC_Start_IT+0x26c>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80130ea:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 80130ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80130ee:	4618      	mov	r0, r3
 80130f0:	3710      	adds	r7, #16
 80130f2:	46bd      	mov	sp, r7
 80130f4:	bd80      	pop	{r7, pc}
 80130f6:	bf00      	nop
 80130f8:	40012c00 	.word	0x40012c00
 80130fc:	40000400 	.word	0x40000400
 8013100:	40000800 	.word	0x40000800
 8013104:	40000c00 	.word	0x40000c00
 8013108:	40013400 	.word	0x40013400
 801310c:	40014000 	.word	0x40014000
 8013110:	00010007 	.word	0x00010007

08013114 <HAL_TIM_IC_Stop_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Stop_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8013114:	b580      	push	{r7, lr}
 8013116:	b084      	sub	sp, #16
 8013118:	af00      	add	r7, sp, #0
 801311a:	6078      	str	r0, [r7, #4]
 801311c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 801311e:	2300      	movs	r3, #0
 8013120:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_CHANNEL(htim->Instance, Channel));

  switch (Channel)
 8013122:	683b      	ldr	r3, [r7, #0]
 8013124:	2b0c      	cmp	r3, #12
 8013126:	d841      	bhi.n	80131ac <HAL_TIM_IC_Stop_IT+0x98>
 8013128:	a201      	add	r2, pc, #4	@ (adr r2, 8013130 <HAL_TIM_IC_Stop_IT+0x1c>)
 801312a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801312e:	bf00      	nop
 8013130:	08013165 	.word	0x08013165
 8013134:	080131ad 	.word	0x080131ad
 8013138:	080131ad 	.word	0x080131ad
 801313c:	080131ad 	.word	0x080131ad
 8013140:	08013177 	.word	0x08013177
 8013144:	080131ad 	.word	0x080131ad
 8013148:	080131ad 	.word	0x080131ad
 801314c:	080131ad 	.word	0x080131ad
 8013150:	08013189 	.word	0x08013189
 8013154:	080131ad 	.word	0x080131ad
 8013158:	080131ad 	.word	0x080131ad
 801315c:	080131ad 	.word	0x080131ad
 8013160:	0801319b 	.word	0x0801319b
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 8013164:	687b      	ldr	r3, [r7, #4]
 8013166:	681b      	ldr	r3, [r3, #0]
 8013168:	68da      	ldr	r2, [r3, #12]
 801316a:	687b      	ldr	r3, [r7, #4]
 801316c:	681b      	ldr	r3, [r3, #0]
 801316e:	f022 0202 	bic.w	r2, r2, #2
 8013172:	60da      	str	r2, [r3, #12]
      break;
 8013174:	e01d      	b.n	80131b2 <HAL_TIM_IC_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 8013176:	687b      	ldr	r3, [r7, #4]
 8013178:	681b      	ldr	r3, [r3, #0]
 801317a:	68da      	ldr	r2, [r3, #12]
 801317c:	687b      	ldr	r3, [r7, #4]
 801317e:	681b      	ldr	r3, [r3, #0]
 8013180:	f022 0204 	bic.w	r2, r2, #4
 8013184:	60da      	str	r2, [r3, #12]
      break;
 8013186:	e014      	b.n	80131b2 <HAL_TIM_IC_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC3);
 8013188:	687b      	ldr	r3, [r7, #4]
 801318a:	681b      	ldr	r3, [r3, #0]
 801318c:	68da      	ldr	r2, [r3, #12]
 801318e:	687b      	ldr	r3, [r7, #4]
 8013190:	681b      	ldr	r3, [r3, #0]
 8013192:	f022 0208 	bic.w	r2, r2, #8
 8013196:	60da      	str	r2, [r3, #12]
      break;
 8013198:	e00b      	b.n	80131b2 <HAL_TIM_IC_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC4);
 801319a:	687b      	ldr	r3, [r7, #4]
 801319c:	681b      	ldr	r3, [r3, #0]
 801319e:	68da      	ldr	r2, [r3, #12]
 80131a0:	687b      	ldr	r3, [r7, #4]
 80131a2:	681b      	ldr	r3, [r3, #0]
 80131a4:	f022 0210 	bic.w	r2, r2, #16
 80131a8:	60da      	str	r2, [r3, #12]
      break;
 80131aa:	e002      	b.n	80131b2 <HAL_TIM_IC_Stop_IT+0x9e>
    }

    default:
      status = HAL_ERROR;
 80131ac:	2301      	movs	r3, #1
 80131ae:	73fb      	strb	r3, [r7, #15]
      break;
 80131b0:	bf00      	nop
  }

  if (status == HAL_OK)
 80131b2:	7bfb      	ldrb	r3, [r7, #15]
 80131b4:	2b00      	cmp	r3, #0
 80131b6:	d166      	bne.n	8013286 <HAL_TIM_IC_Stop_IT+0x172>
  {
    /* Disable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 80131b8:	687b      	ldr	r3, [r7, #4]
 80131ba:	681b      	ldr	r3, [r3, #0]
 80131bc:	2200      	movs	r2, #0
 80131be:	6839      	ldr	r1, [r7, #0]
 80131c0:	4618      	mov	r0, r3
 80131c2:	f001 f969 	bl	8014498 <TIM_CCxChannelCmd>

    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 80131c6:	687b      	ldr	r3, [r7, #4]
 80131c8:	681b      	ldr	r3, [r3, #0]
 80131ca:	6a1a      	ldr	r2, [r3, #32]
 80131cc:	f241 1311 	movw	r3, #4369	@ 0x1111
 80131d0:	4013      	ands	r3, r2
 80131d2:	2b00      	cmp	r3, #0
 80131d4:	d10f      	bne.n	80131f6 <HAL_TIM_IC_Stop_IT+0xe2>
 80131d6:	687b      	ldr	r3, [r7, #4]
 80131d8:	681b      	ldr	r3, [r3, #0]
 80131da:	6a1a      	ldr	r2, [r3, #32]
 80131dc:	f240 4344 	movw	r3, #1092	@ 0x444
 80131e0:	4013      	ands	r3, r2
 80131e2:	2b00      	cmp	r3, #0
 80131e4:	d107      	bne.n	80131f6 <HAL_TIM_IC_Stop_IT+0xe2>
 80131e6:	687b      	ldr	r3, [r7, #4]
 80131e8:	681b      	ldr	r3, [r3, #0]
 80131ea:	681a      	ldr	r2, [r3, #0]
 80131ec:	687b      	ldr	r3, [r7, #4]
 80131ee:	681b      	ldr	r3, [r3, #0]
 80131f0:	f022 0201 	bic.w	r2, r2, #1
 80131f4:	601a      	str	r2, [r3, #0]

    /* Set the TIM channel state */
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 80131f6:	683b      	ldr	r3, [r7, #0]
 80131f8:	2b00      	cmp	r3, #0
 80131fa:	d104      	bne.n	8013206 <HAL_TIM_IC_Stop_IT+0xf2>
 80131fc:	687b      	ldr	r3, [r7, #4]
 80131fe:	2201      	movs	r2, #1
 8013200:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8013204:	e023      	b.n	801324e <HAL_TIM_IC_Stop_IT+0x13a>
 8013206:	683b      	ldr	r3, [r7, #0]
 8013208:	2b04      	cmp	r3, #4
 801320a:	d104      	bne.n	8013216 <HAL_TIM_IC_Stop_IT+0x102>
 801320c:	687b      	ldr	r3, [r7, #4]
 801320e:	2201      	movs	r2, #1
 8013210:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8013214:	e01b      	b.n	801324e <HAL_TIM_IC_Stop_IT+0x13a>
 8013216:	683b      	ldr	r3, [r7, #0]
 8013218:	2b08      	cmp	r3, #8
 801321a:	d104      	bne.n	8013226 <HAL_TIM_IC_Stop_IT+0x112>
 801321c:	687b      	ldr	r3, [r7, #4]
 801321e:	2201      	movs	r2, #1
 8013220:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8013224:	e013      	b.n	801324e <HAL_TIM_IC_Stop_IT+0x13a>
 8013226:	683b      	ldr	r3, [r7, #0]
 8013228:	2b0c      	cmp	r3, #12
 801322a:	d104      	bne.n	8013236 <HAL_TIM_IC_Stop_IT+0x122>
 801322c:	687b      	ldr	r3, [r7, #4]
 801322e:	2201      	movs	r2, #1
 8013230:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8013234:	e00b      	b.n	801324e <HAL_TIM_IC_Stop_IT+0x13a>
 8013236:	683b      	ldr	r3, [r7, #0]
 8013238:	2b10      	cmp	r3, #16
 801323a:	d104      	bne.n	8013246 <HAL_TIM_IC_Stop_IT+0x132>
 801323c:	687b      	ldr	r3, [r7, #4]
 801323e:	2201      	movs	r2, #1
 8013240:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8013244:	e003      	b.n	801324e <HAL_TIM_IC_Stop_IT+0x13a>
 8013246:	687b      	ldr	r3, [r7, #4]
 8013248:	2201      	movs	r2, #1
 801324a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
    TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 801324e:	683b      	ldr	r3, [r7, #0]
 8013250:	2b00      	cmp	r3, #0
 8013252:	d104      	bne.n	801325e <HAL_TIM_IC_Stop_IT+0x14a>
 8013254:	687b      	ldr	r3, [r7, #4]
 8013256:	2201      	movs	r2, #1
 8013258:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 801325c:	e013      	b.n	8013286 <HAL_TIM_IC_Stop_IT+0x172>
 801325e:	683b      	ldr	r3, [r7, #0]
 8013260:	2b04      	cmp	r3, #4
 8013262:	d104      	bne.n	801326e <HAL_TIM_IC_Stop_IT+0x15a>
 8013264:	687b      	ldr	r3, [r7, #4]
 8013266:	2201      	movs	r2, #1
 8013268:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 801326c:	e00b      	b.n	8013286 <HAL_TIM_IC_Stop_IT+0x172>
 801326e:	683b      	ldr	r3, [r7, #0]
 8013270:	2b08      	cmp	r3, #8
 8013272:	d104      	bne.n	801327e <HAL_TIM_IC_Stop_IT+0x16a>
 8013274:	687b      	ldr	r3, [r7, #4]
 8013276:	2201      	movs	r2, #1
 8013278:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 801327c:	e003      	b.n	8013286 <HAL_TIM_IC_Stop_IT+0x172>
 801327e:	687b      	ldr	r3, [r7, #4]
 8013280:	2201      	movs	r2, #1
 8013282:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47
  }

  /* Return function status */
  return status;
 8013286:	7bfb      	ldrb	r3, [r7, #15]
}
 8013288:	4618      	mov	r0, r3
 801328a:	3710      	adds	r7, #16
 801328c:	46bd      	mov	sp, r7
 801328e:	bd80      	pop	{r7, pc}

08013290 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           const TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 8013290:	b580      	push	{r7, lr}
 8013292:	b086      	sub	sp, #24
 8013294:	af00      	add	r7, sp, #0
 8013296:	60f8      	str	r0, [r7, #12]
 8013298:	60b9      	str	r1, [r7, #8]
 801329a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 801329c:	2300      	movs	r3, #0
 801329e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 80132a0:	68fb      	ldr	r3, [r7, #12]
 80132a2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80132a6:	2b01      	cmp	r3, #1
 80132a8:	d101      	bne.n	80132ae <HAL_TIM_OC_ConfigChannel+0x1e>
 80132aa:	2302      	movs	r3, #2
 80132ac:	e066      	b.n	801337c <HAL_TIM_OC_ConfigChannel+0xec>
 80132ae:	68fb      	ldr	r3, [r7, #12]
 80132b0:	2201      	movs	r2, #1
 80132b2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 80132b6:	687b      	ldr	r3, [r7, #4]
 80132b8:	2b14      	cmp	r3, #20
 80132ba:	d857      	bhi.n	801336c <HAL_TIM_OC_ConfigChannel+0xdc>
 80132bc:	a201      	add	r2, pc, #4	@ (adr r2, 80132c4 <HAL_TIM_OC_ConfigChannel+0x34>)
 80132be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80132c2:	bf00      	nop
 80132c4:	08013319 	.word	0x08013319
 80132c8:	0801336d 	.word	0x0801336d
 80132cc:	0801336d 	.word	0x0801336d
 80132d0:	0801336d 	.word	0x0801336d
 80132d4:	08013327 	.word	0x08013327
 80132d8:	0801336d 	.word	0x0801336d
 80132dc:	0801336d 	.word	0x0801336d
 80132e0:	0801336d 	.word	0x0801336d
 80132e4:	08013335 	.word	0x08013335
 80132e8:	0801336d 	.word	0x0801336d
 80132ec:	0801336d 	.word	0x0801336d
 80132f0:	0801336d 	.word	0x0801336d
 80132f4:	08013343 	.word	0x08013343
 80132f8:	0801336d 	.word	0x0801336d
 80132fc:	0801336d 	.word	0x0801336d
 8013300:	0801336d 	.word	0x0801336d
 8013304:	08013351 	.word	0x08013351
 8013308:	0801336d 	.word	0x0801336d
 801330c:	0801336d 	.word	0x0801336d
 8013310:	0801336d 	.word	0x0801336d
 8013314:	0801335f 	.word	0x0801335f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8013318:	68fb      	ldr	r3, [r7, #12]
 801331a:	681b      	ldr	r3, [r3, #0]
 801331c:	68b9      	ldr	r1, [r7, #8]
 801331e:	4618      	mov	r0, r3
 8013320:	f000 fb92 	bl	8013a48 <TIM_OC1_SetConfig>
      break;
 8013324:	e025      	b.n	8013372 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8013326:	68fb      	ldr	r3, [r7, #12]
 8013328:	681b      	ldr	r3, [r3, #0]
 801332a:	68b9      	ldr	r1, [r7, #8]
 801332c:	4618      	mov	r0, r3
 801332e:	f000 fc1b 	bl	8013b68 <TIM_OC2_SetConfig>
      break;
 8013332:	e01e      	b.n	8013372 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8013334:	68fb      	ldr	r3, [r7, #12]
 8013336:	681b      	ldr	r3, [r3, #0]
 8013338:	68b9      	ldr	r1, [r7, #8]
 801333a:	4618      	mov	r0, r3
 801333c:	f000 fc9e 	bl	8013c7c <TIM_OC3_SetConfig>
      break;
 8013340:	e017      	b.n	8013372 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8013342:	68fb      	ldr	r3, [r7, #12]
 8013344:	681b      	ldr	r3, [r3, #0]
 8013346:	68b9      	ldr	r1, [r7, #8]
 8013348:	4618      	mov	r0, r3
 801334a:	f000 fd1f 	bl	8013d8c <TIM_OC4_SetConfig>
      break;
 801334e:	e010      	b.n	8013372 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 5 in Output Compare */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8013350:	68fb      	ldr	r3, [r7, #12]
 8013352:	681b      	ldr	r3, [r3, #0]
 8013354:	68b9      	ldr	r1, [r7, #8]
 8013356:	4618      	mov	r0, r3
 8013358:	f000 fd82 	bl	8013e60 <TIM_OC5_SetConfig>
      break;
 801335c:	e009      	b.n	8013372 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 6 in Output Compare */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 801335e:	68fb      	ldr	r3, [r7, #12]
 8013360:	681b      	ldr	r3, [r3, #0]
 8013362:	68b9      	ldr	r1, [r7, #8]
 8013364:	4618      	mov	r0, r3
 8013366:	f000 fddf 	bl	8013f28 <TIM_OC6_SetConfig>
      break;
 801336a:	e002      	b.n	8013372 <HAL_TIM_OC_ConfigChannel+0xe2>
    }

    default:
      status = HAL_ERROR;
 801336c:	2301      	movs	r3, #1
 801336e:	75fb      	strb	r3, [r7, #23]
      break;
 8013370:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8013372:	68fb      	ldr	r3, [r7, #12]
 8013374:	2200      	movs	r2, #0
 8013376:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 801337a:	7dfb      	ldrb	r3, [r7, #23]
}
 801337c:	4618      	mov	r0, r3
 801337e:	3718      	adds	r7, #24
 8013380:	46bd      	mov	sp, r7
 8013382:	bd80      	pop	{r7, pc}

08013384 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8013384:	b580      	push	{r7, lr}
 8013386:	b086      	sub	sp, #24
 8013388:	af00      	add	r7, sp, #0
 801338a:	60f8      	str	r0, [r7, #12]
 801338c:	60b9      	str	r1, [r7, #8]
 801338e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8013390:	2300      	movs	r3, #0
 8013392:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8013394:	68fb      	ldr	r3, [r7, #12]
 8013396:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 801339a:	2b01      	cmp	r3, #1
 801339c:	d101      	bne.n	80133a2 <HAL_TIM_IC_ConfigChannel+0x1e>
 801339e:	2302      	movs	r3, #2
 80133a0:	e088      	b.n	80134b4 <HAL_TIM_IC_ConfigChannel+0x130>
 80133a2:	68fb      	ldr	r3, [r7, #12]
 80133a4:	2201      	movs	r2, #1
 80133a6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  if (Channel == TIM_CHANNEL_1)
 80133aa:	687b      	ldr	r3, [r7, #4]
 80133ac:	2b00      	cmp	r3, #0
 80133ae:	d11b      	bne.n	80133e8 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 80133b0:	68fb      	ldr	r3, [r7, #12]
 80133b2:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 80133b4:	68bb      	ldr	r3, [r7, #8]
 80133b6:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 80133b8:	68bb      	ldr	r3, [r7, #8]
 80133ba:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 80133bc:	68bb      	ldr	r3, [r7, #8]
 80133be:	68db      	ldr	r3, [r3, #12]
    TIM_TI1_SetConfig(htim->Instance,
 80133c0:	f000 feac 	bl	801411c <TIM_TI1_SetConfig>

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 80133c4:	68fb      	ldr	r3, [r7, #12]
 80133c6:	681b      	ldr	r3, [r3, #0]
 80133c8:	699a      	ldr	r2, [r3, #24]
 80133ca:	68fb      	ldr	r3, [r7, #12]
 80133cc:	681b      	ldr	r3, [r3, #0]
 80133ce:	f022 020c 	bic.w	r2, r2, #12
 80133d2:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 80133d4:	68fb      	ldr	r3, [r7, #12]
 80133d6:	681b      	ldr	r3, [r3, #0]
 80133d8:	6999      	ldr	r1, [r3, #24]
 80133da:	68bb      	ldr	r3, [r7, #8]
 80133dc:	689a      	ldr	r2, [r3, #8]
 80133de:	68fb      	ldr	r3, [r7, #12]
 80133e0:	681b      	ldr	r3, [r3, #0]
 80133e2:	430a      	orrs	r2, r1
 80133e4:	619a      	str	r2, [r3, #24]
 80133e6:	e060      	b.n	80134aa <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 80133e8:	687b      	ldr	r3, [r7, #4]
 80133ea:	2b04      	cmp	r3, #4
 80133ec:	d11c      	bne.n	8013428 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 80133ee:	68fb      	ldr	r3, [r7, #12]
 80133f0:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 80133f2:	68bb      	ldr	r3, [r7, #8]
 80133f4:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 80133f6:	68bb      	ldr	r3, [r7, #8]
 80133f8:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 80133fa:	68bb      	ldr	r3, [r7, #8]
 80133fc:	68db      	ldr	r3, [r3, #12]
    TIM_TI2_SetConfig(htim->Instance,
 80133fe:	f000 ff2a 	bl	8014256 <TIM_TI2_SetConfig>

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8013402:	68fb      	ldr	r3, [r7, #12]
 8013404:	681b      	ldr	r3, [r3, #0]
 8013406:	699a      	ldr	r2, [r3, #24]
 8013408:	68fb      	ldr	r3, [r7, #12]
 801340a:	681b      	ldr	r3, [r3, #0]
 801340c:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 8013410:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8013412:	68fb      	ldr	r3, [r7, #12]
 8013414:	681b      	ldr	r3, [r3, #0]
 8013416:	6999      	ldr	r1, [r3, #24]
 8013418:	68bb      	ldr	r3, [r7, #8]
 801341a:	689b      	ldr	r3, [r3, #8]
 801341c:	021a      	lsls	r2, r3, #8
 801341e:	68fb      	ldr	r3, [r7, #12]
 8013420:	681b      	ldr	r3, [r3, #0]
 8013422:	430a      	orrs	r2, r1
 8013424:	619a      	str	r2, [r3, #24]
 8013426:	e040      	b.n	80134aa <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8013428:	687b      	ldr	r3, [r7, #4]
 801342a:	2b08      	cmp	r3, #8
 801342c:	d11b      	bne.n	8013466 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 801342e:	68fb      	ldr	r3, [r7, #12]
 8013430:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8013432:	68bb      	ldr	r3, [r7, #8]
 8013434:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8013436:	68bb      	ldr	r3, [r7, #8]
 8013438:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 801343a:	68bb      	ldr	r3, [r7, #8]
 801343c:	68db      	ldr	r3, [r3, #12]
    TIM_TI3_SetConfig(htim->Instance,
 801343e:	f000 ff77 	bl	8014330 <TIM_TI3_SetConfig>

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8013442:	68fb      	ldr	r3, [r7, #12]
 8013444:	681b      	ldr	r3, [r3, #0]
 8013446:	69da      	ldr	r2, [r3, #28]
 8013448:	68fb      	ldr	r3, [r7, #12]
 801344a:	681b      	ldr	r3, [r3, #0]
 801344c:	f022 020c 	bic.w	r2, r2, #12
 8013450:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8013452:	68fb      	ldr	r3, [r7, #12]
 8013454:	681b      	ldr	r3, [r3, #0]
 8013456:	69d9      	ldr	r1, [r3, #28]
 8013458:	68bb      	ldr	r3, [r7, #8]
 801345a:	689a      	ldr	r2, [r3, #8]
 801345c:	68fb      	ldr	r3, [r7, #12]
 801345e:	681b      	ldr	r3, [r3, #0]
 8013460:	430a      	orrs	r2, r1
 8013462:	61da      	str	r2, [r3, #28]
 8013464:	e021      	b.n	80134aa <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8013466:	687b      	ldr	r3, [r7, #4]
 8013468:	2b0c      	cmp	r3, #12
 801346a:	d11c      	bne.n	80134a6 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 801346c:	68fb      	ldr	r3, [r7, #12]
 801346e:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8013470:	68bb      	ldr	r3, [r7, #8]
 8013472:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8013474:	68bb      	ldr	r3, [r7, #8]
 8013476:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8013478:	68bb      	ldr	r3, [r7, #8]
 801347a:	68db      	ldr	r3, [r3, #12]
    TIM_TI4_SetConfig(htim->Instance,
 801347c:	f000 ff94 	bl	80143a8 <TIM_TI4_SetConfig>

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8013480:	68fb      	ldr	r3, [r7, #12]
 8013482:	681b      	ldr	r3, [r3, #0]
 8013484:	69da      	ldr	r2, [r3, #28]
 8013486:	68fb      	ldr	r3, [r7, #12]
 8013488:	681b      	ldr	r3, [r3, #0]
 801348a:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 801348e:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8013490:	68fb      	ldr	r3, [r7, #12]
 8013492:	681b      	ldr	r3, [r3, #0]
 8013494:	69d9      	ldr	r1, [r3, #28]
 8013496:	68bb      	ldr	r3, [r7, #8]
 8013498:	689b      	ldr	r3, [r3, #8]
 801349a:	021a      	lsls	r2, r3, #8
 801349c:	68fb      	ldr	r3, [r7, #12]
 801349e:	681b      	ldr	r3, [r3, #0]
 80134a0:	430a      	orrs	r2, r1
 80134a2:	61da      	str	r2, [r3, #28]
 80134a4:	e001      	b.n	80134aa <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 80134a6:	2301      	movs	r3, #1
 80134a8:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 80134aa:	68fb      	ldr	r3, [r7, #12]
 80134ac:	2200      	movs	r2, #0
 80134ae:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80134b2:	7dfb      	ldrb	r3, [r7, #23]
}
 80134b4:	4618      	mov	r0, r3
 80134b6:	3718      	adds	r7, #24
 80134b8:	46bd      	mov	sp, r7
 80134ba:	bd80      	pop	{r7, pc}

080134bc <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80134bc:	b580      	push	{r7, lr}
 80134be:	b086      	sub	sp, #24
 80134c0:	af00      	add	r7, sp, #0
 80134c2:	60f8      	str	r0, [r7, #12]
 80134c4:	60b9      	str	r1, [r7, #8]
 80134c6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80134c8:	2300      	movs	r3, #0
 80134ca:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80134cc:	68fb      	ldr	r3, [r7, #12]
 80134ce:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80134d2:	2b01      	cmp	r3, #1
 80134d4:	d101      	bne.n	80134da <HAL_TIM_PWM_ConfigChannel+0x1e>
 80134d6:	2302      	movs	r3, #2
 80134d8:	e0ff      	b.n	80136da <HAL_TIM_PWM_ConfigChannel+0x21e>
 80134da:	68fb      	ldr	r3, [r7, #12]
 80134dc:	2201      	movs	r2, #1
 80134de:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 80134e2:	687b      	ldr	r3, [r7, #4]
 80134e4:	2b14      	cmp	r3, #20
 80134e6:	f200 80f0 	bhi.w	80136ca <HAL_TIM_PWM_ConfigChannel+0x20e>
 80134ea:	a201      	add	r2, pc, #4	@ (adr r2, 80134f0 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80134ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80134f0:	08013545 	.word	0x08013545
 80134f4:	080136cb 	.word	0x080136cb
 80134f8:	080136cb 	.word	0x080136cb
 80134fc:	080136cb 	.word	0x080136cb
 8013500:	08013585 	.word	0x08013585
 8013504:	080136cb 	.word	0x080136cb
 8013508:	080136cb 	.word	0x080136cb
 801350c:	080136cb 	.word	0x080136cb
 8013510:	080135c7 	.word	0x080135c7
 8013514:	080136cb 	.word	0x080136cb
 8013518:	080136cb 	.word	0x080136cb
 801351c:	080136cb 	.word	0x080136cb
 8013520:	08013607 	.word	0x08013607
 8013524:	080136cb 	.word	0x080136cb
 8013528:	080136cb 	.word	0x080136cb
 801352c:	080136cb 	.word	0x080136cb
 8013530:	08013649 	.word	0x08013649
 8013534:	080136cb 	.word	0x080136cb
 8013538:	080136cb 	.word	0x080136cb
 801353c:	080136cb 	.word	0x080136cb
 8013540:	08013689 	.word	0x08013689
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8013544:	68fb      	ldr	r3, [r7, #12]
 8013546:	681b      	ldr	r3, [r3, #0]
 8013548:	68b9      	ldr	r1, [r7, #8]
 801354a:	4618      	mov	r0, r3
 801354c:	f000 fa7c 	bl	8013a48 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8013550:	68fb      	ldr	r3, [r7, #12]
 8013552:	681b      	ldr	r3, [r3, #0]
 8013554:	699a      	ldr	r2, [r3, #24]
 8013556:	68fb      	ldr	r3, [r7, #12]
 8013558:	681b      	ldr	r3, [r3, #0]
 801355a:	f042 0208 	orr.w	r2, r2, #8
 801355e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8013560:	68fb      	ldr	r3, [r7, #12]
 8013562:	681b      	ldr	r3, [r3, #0]
 8013564:	699a      	ldr	r2, [r3, #24]
 8013566:	68fb      	ldr	r3, [r7, #12]
 8013568:	681b      	ldr	r3, [r3, #0]
 801356a:	f022 0204 	bic.w	r2, r2, #4
 801356e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8013570:	68fb      	ldr	r3, [r7, #12]
 8013572:	681b      	ldr	r3, [r3, #0]
 8013574:	6999      	ldr	r1, [r3, #24]
 8013576:	68bb      	ldr	r3, [r7, #8]
 8013578:	691a      	ldr	r2, [r3, #16]
 801357a:	68fb      	ldr	r3, [r7, #12]
 801357c:	681b      	ldr	r3, [r3, #0]
 801357e:	430a      	orrs	r2, r1
 8013580:	619a      	str	r2, [r3, #24]
      break;
 8013582:	e0a5      	b.n	80136d0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8013584:	68fb      	ldr	r3, [r7, #12]
 8013586:	681b      	ldr	r3, [r3, #0]
 8013588:	68b9      	ldr	r1, [r7, #8]
 801358a:	4618      	mov	r0, r3
 801358c:	f000 faec 	bl	8013b68 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8013590:	68fb      	ldr	r3, [r7, #12]
 8013592:	681b      	ldr	r3, [r3, #0]
 8013594:	699a      	ldr	r2, [r3, #24]
 8013596:	68fb      	ldr	r3, [r7, #12]
 8013598:	681b      	ldr	r3, [r3, #0]
 801359a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 801359e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80135a0:	68fb      	ldr	r3, [r7, #12]
 80135a2:	681b      	ldr	r3, [r3, #0]
 80135a4:	699a      	ldr	r2, [r3, #24]
 80135a6:	68fb      	ldr	r3, [r7, #12]
 80135a8:	681b      	ldr	r3, [r3, #0]
 80135aa:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80135ae:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80135b0:	68fb      	ldr	r3, [r7, #12]
 80135b2:	681b      	ldr	r3, [r3, #0]
 80135b4:	6999      	ldr	r1, [r3, #24]
 80135b6:	68bb      	ldr	r3, [r7, #8]
 80135b8:	691b      	ldr	r3, [r3, #16]
 80135ba:	021a      	lsls	r2, r3, #8
 80135bc:	68fb      	ldr	r3, [r7, #12]
 80135be:	681b      	ldr	r3, [r3, #0]
 80135c0:	430a      	orrs	r2, r1
 80135c2:	619a      	str	r2, [r3, #24]
      break;
 80135c4:	e084      	b.n	80136d0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80135c6:	68fb      	ldr	r3, [r7, #12]
 80135c8:	681b      	ldr	r3, [r3, #0]
 80135ca:	68b9      	ldr	r1, [r7, #8]
 80135cc:	4618      	mov	r0, r3
 80135ce:	f000 fb55 	bl	8013c7c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80135d2:	68fb      	ldr	r3, [r7, #12]
 80135d4:	681b      	ldr	r3, [r3, #0]
 80135d6:	69da      	ldr	r2, [r3, #28]
 80135d8:	68fb      	ldr	r3, [r7, #12]
 80135da:	681b      	ldr	r3, [r3, #0]
 80135dc:	f042 0208 	orr.w	r2, r2, #8
 80135e0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80135e2:	68fb      	ldr	r3, [r7, #12]
 80135e4:	681b      	ldr	r3, [r3, #0]
 80135e6:	69da      	ldr	r2, [r3, #28]
 80135e8:	68fb      	ldr	r3, [r7, #12]
 80135ea:	681b      	ldr	r3, [r3, #0]
 80135ec:	f022 0204 	bic.w	r2, r2, #4
 80135f0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80135f2:	68fb      	ldr	r3, [r7, #12]
 80135f4:	681b      	ldr	r3, [r3, #0]
 80135f6:	69d9      	ldr	r1, [r3, #28]
 80135f8:	68bb      	ldr	r3, [r7, #8]
 80135fa:	691a      	ldr	r2, [r3, #16]
 80135fc:	68fb      	ldr	r3, [r7, #12]
 80135fe:	681b      	ldr	r3, [r3, #0]
 8013600:	430a      	orrs	r2, r1
 8013602:	61da      	str	r2, [r3, #28]
      break;
 8013604:	e064      	b.n	80136d0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8013606:	68fb      	ldr	r3, [r7, #12]
 8013608:	681b      	ldr	r3, [r3, #0]
 801360a:	68b9      	ldr	r1, [r7, #8]
 801360c:	4618      	mov	r0, r3
 801360e:	f000 fbbd 	bl	8013d8c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8013612:	68fb      	ldr	r3, [r7, #12]
 8013614:	681b      	ldr	r3, [r3, #0]
 8013616:	69da      	ldr	r2, [r3, #28]
 8013618:	68fb      	ldr	r3, [r7, #12]
 801361a:	681b      	ldr	r3, [r3, #0]
 801361c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8013620:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8013622:	68fb      	ldr	r3, [r7, #12]
 8013624:	681b      	ldr	r3, [r3, #0]
 8013626:	69da      	ldr	r2, [r3, #28]
 8013628:	68fb      	ldr	r3, [r7, #12]
 801362a:	681b      	ldr	r3, [r3, #0]
 801362c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8013630:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8013632:	68fb      	ldr	r3, [r7, #12]
 8013634:	681b      	ldr	r3, [r3, #0]
 8013636:	69d9      	ldr	r1, [r3, #28]
 8013638:	68bb      	ldr	r3, [r7, #8]
 801363a:	691b      	ldr	r3, [r3, #16]
 801363c:	021a      	lsls	r2, r3, #8
 801363e:	68fb      	ldr	r3, [r7, #12]
 8013640:	681b      	ldr	r3, [r3, #0]
 8013642:	430a      	orrs	r2, r1
 8013644:	61da      	str	r2, [r3, #28]
      break;
 8013646:	e043      	b.n	80136d0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8013648:	68fb      	ldr	r3, [r7, #12]
 801364a:	681b      	ldr	r3, [r3, #0]
 801364c:	68b9      	ldr	r1, [r7, #8]
 801364e:	4618      	mov	r0, r3
 8013650:	f000 fc06 	bl	8013e60 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8013654:	68fb      	ldr	r3, [r7, #12]
 8013656:	681b      	ldr	r3, [r3, #0]
 8013658:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 801365a:	68fb      	ldr	r3, [r7, #12]
 801365c:	681b      	ldr	r3, [r3, #0]
 801365e:	f042 0208 	orr.w	r2, r2, #8
 8013662:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8013664:	68fb      	ldr	r3, [r7, #12]
 8013666:	681b      	ldr	r3, [r3, #0]
 8013668:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 801366a:	68fb      	ldr	r3, [r7, #12]
 801366c:	681b      	ldr	r3, [r3, #0]
 801366e:	f022 0204 	bic.w	r2, r2, #4
 8013672:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8013674:	68fb      	ldr	r3, [r7, #12]
 8013676:	681b      	ldr	r3, [r3, #0]
 8013678:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 801367a:	68bb      	ldr	r3, [r7, #8]
 801367c:	691a      	ldr	r2, [r3, #16]
 801367e:	68fb      	ldr	r3, [r7, #12]
 8013680:	681b      	ldr	r3, [r3, #0]
 8013682:	430a      	orrs	r2, r1
 8013684:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8013686:	e023      	b.n	80136d0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8013688:	68fb      	ldr	r3, [r7, #12]
 801368a:	681b      	ldr	r3, [r3, #0]
 801368c:	68b9      	ldr	r1, [r7, #8]
 801368e:	4618      	mov	r0, r3
 8013690:	f000 fc4a 	bl	8013f28 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8013694:	68fb      	ldr	r3, [r7, #12]
 8013696:	681b      	ldr	r3, [r3, #0]
 8013698:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 801369a:	68fb      	ldr	r3, [r7, #12]
 801369c:	681b      	ldr	r3, [r3, #0]
 801369e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80136a2:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80136a4:	68fb      	ldr	r3, [r7, #12]
 80136a6:	681b      	ldr	r3, [r3, #0]
 80136a8:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80136aa:	68fb      	ldr	r3, [r7, #12]
 80136ac:	681b      	ldr	r3, [r3, #0]
 80136ae:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80136b2:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80136b4:	68fb      	ldr	r3, [r7, #12]
 80136b6:	681b      	ldr	r3, [r3, #0]
 80136b8:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 80136ba:	68bb      	ldr	r3, [r7, #8]
 80136bc:	691b      	ldr	r3, [r3, #16]
 80136be:	021a      	lsls	r2, r3, #8
 80136c0:	68fb      	ldr	r3, [r7, #12]
 80136c2:	681b      	ldr	r3, [r3, #0]
 80136c4:	430a      	orrs	r2, r1
 80136c6:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 80136c8:	e002      	b.n	80136d0 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 80136ca:	2301      	movs	r3, #1
 80136cc:	75fb      	strb	r3, [r7, #23]
      break;
 80136ce:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80136d0:	68fb      	ldr	r3, [r7, #12]
 80136d2:	2200      	movs	r2, #0
 80136d4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80136d8:	7dfb      	ldrb	r3, [r7, #23]
}
 80136da:	4618      	mov	r0, r3
 80136dc:	3718      	adds	r7, #24
 80136de:	46bd      	mov	sp, r7
 80136e0:	bd80      	pop	{r7, pc}
 80136e2:	bf00      	nop

080136e4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80136e4:	b580      	push	{r7, lr}
 80136e6:	b084      	sub	sp, #16
 80136e8:	af00      	add	r7, sp, #0
 80136ea:	6078      	str	r0, [r7, #4]
 80136ec:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80136ee:	2300      	movs	r3, #0
 80136f0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80136f2:	687b      	ldr	r3, [r7, #4]
 80136f4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80136f8:	2b01      	cmp	r3, #1
 80136fa:	d101      	bne.n	8013700 <HAL_TIM_ConfigClockSource+0x1c>
 80136fc:	2302      	movs	r3, #2
 80136fe:	e0b6      	b.n	801386e <HAL_TIM_ConfigClockSource+0x18a>
 8013700:	687b      	ldr	r3, [r7, #4]
 8013702:	2201      	movs	r2, #1
 8013704:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8013708:	687b      	ldr	r3, [r7, #4]
 801370a:	2202      	movs	r2, #2
 801370c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8013710:	687b      	ldr	r3, [r7, #4]
 8013712:	681b      	ldr	r3, [r3, #0]
 8013714:	689b      	ldr	r3, [r3, #8]
 8013716:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8013718:	68bb      	ldr	r3, [r7, #8]
 801371a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 801371e:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8013722:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8013724:	68bb      	ldr	r3, [r7, #8]
 8013726:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 801372a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 801372c:	687b      	ldr	r3, [r7, #4]
 801372e:	681b      	ldr	r3, [r3, #0]
 8013730:	68ba      	ldr	r2, [r7, #8]
 8013732:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8013734:	683b      	ldr	r3, [r7, #0]
 8013736:	681b      	ldr	r3, [r3, #0]
 8013738:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 801373c:	d03e      	beq.n	80137bc <HAL_TIM_ConfigClockSource+0xd8>
 801373e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8013742:	f200 8087 	bhi.w	8013854 <HAL_TIM_ConfigClockSource+0x170>
 8013746:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 801374a:	f000 8086 	beq.w	801385a <HAL_TIM_ConfigClockSource+0x176>
 801374e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8013752:	d87f      	bhi.n	8013854 <HAL_TIM_ConfigClockSource+0x170>
 8013754:	2b70      	cmp	r3, #112	@ 0x70
 8013756:	d01a      	beq.n	801378e <HAL_TIM_ConfigClockSource+0xaa>
 8013758:	2b70      	cmp	r3, #112	@ 0x70
 801375a:	d87b      	bhi.n	8013854 <HAL_TIM_ConfigClockSource+0x170>
 801375c:	2b60      	cmp	r3, #96	@ 0x60
 801375e:	d050      	beq.n	8013802 <HAL_TIM_ConfigClockSource+0x11e>
 8013760:	2b60      	cmp	r3, #96	@ 0x60
 8013762:	d877      	bhi.n	8013854 <HAL_TIM_ConfigClockSource+0x170>
 8013764:	2b50      	cmp	r3, #80	@ 0x50
 8013766:	d03c      	beq.n	80137e2 <HAL_TIM_ConfigClockSource+0xfe>
 8013768:	2b50      	cmp	r3, #80	@ 0x50
 801376a:	d873      	bhi.n	8013854 <HAL_TIM_ConfigClockSource+0x170>
 801376c:	2b40      	cmp	r3, #64	@ 0x40
 801376e:	d058      	beq.n	8013822 <HAL_TIM_ConfigClockSource+0x13e>
 8013770:	2b40      	cmp	r3, #64	@ 0x40
 8013772:	d86f      	bhi.n	8013854 <HAL_TIM_ConfigClockSource+0x170>
 8013774:	2b30      	cmp	r3, #48	@ 0x30
 8013776:	d064      	beq.n	8013842 <HAL_TIM_ConfigClockSource+0x15e>
 8013778:	2b30      	cmp	r3, #48	@ 0x30
 801377a:	d86b      	bhi.n	8013854 <HAL_TIM_ConfigClockSource+0x170>
 801377c:	2b20      	cmp	r3, #32
 801377e:	d060      	beq.n	8013842 <HAL_TIM_ConfigClockSource+0x15e>
 8013780:	2b20      	cmp	r3, #32
 8013782:	d867      	bhi.n	8013854 <HAL_TIM_ConfigClockSource+0x170>
 8013784:	2b00      	cmp	r3, #0
 8013786:	d05c      	beq.n	8013842 <HAL_TIM_ConfigClockSource+0x15e>
 8013788:	2b10      	cmp	r3, #16
 801378a:	d05a      	beq.n	8013842 <HAL_TIM_ConfigClockSource+0x15e>
 801378c:	e062      	b.n	8013854 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 801378e:	687b      	ldr	r3, [r7, #4]
 8013790:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8013792:	683b      	ldr	r3, [r7, #0]
 8013794:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8013796:	683b      	ldr	r3, [r7, #0]
 8013798:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 801379a:	683b      	ldr	r3, [r7, #0]
 801379c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 801379e:	f000 fe5b 	bl	8014458 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80137a2:	687b      	ldr	r3, [r7, #4]
 80137a4:	681b      	ldr	r3, [r3, #0]
 80137a6:	689b      	ldr	r3, [r3, #8]
 80137a8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80137aa:	68bb      	ldr	r3, [r7, #8]
 80137ac:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80137b0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80137b2:	687b      	ldr	r3, [r7, #4]
 80137b4:	681b      	ldr	r3, [r3, #0]
 80137b6:	68ba      	ldr	r2, [r7, #8]
 80137b8:	609a      	str	r2, [r3, #8]
      break;
 80137ba:	e04f      	b.n	801385c <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80137bc:	687b      	ldr	r3, [r7, #4]
 80137be:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80137c0:	683b      	ldr	r3, [r7, #0]
 80137c2:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80137c4:	683b      	ldr	r3, [r7, #0]
 80137c6:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80137c8:	683b      	ldr	r3, [r7, #0]
 80137ca:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80137cc:	f000 fe44 	bl	8014458 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80137d0:	687b      	ldr	r3, [r7, #4]
 80137d2:	681b      	ldr	r3, [r3, #0]
 80137d4:	689a      	ldr	r2, [r3, #8]
 80137d6:	687b      	ldr	r3, [r7, #4]
 80137d8:	681b      	ldr	r3, [r3, #0]
 80137da:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80137de:	609a      	str	r2, [r3, #8]
      break;
 80137e0:	e03c      	b.n	801385c <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80137e2:	687b      	ldr	r3, [r7, #4]
 80137e4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80137e6:	683b      	ldr	r3, [r7, #0]
 80137e8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80137ea:	683b      	ldr	r3, [r7, #0]
 80137ec:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80137ee:	461a      	mov	r2, r3
 80137f0:	f000 fd02 	bl	80141f8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80137f4:	687b      	ldr	r3, [r7, #4]
 80137f6:	681b      	ldr	r3, [r3, #0]
 80137f8:	2150      	movs	r1, #80	@ 0x50
 80137fa:	4618      	mov	r0, r3
 80137fc:	f000 fe11 	bl	8014422 <TIM_ITRx_SetConfig>
      break;
 8013800:	e02c      	b.n	801385c <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8013802:	687b      	ldr	r3, [r7, #4]
 8013804:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8013806:	683b      	ldr	r3, [r7, #0]
 8013808:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 801380a:	683b      	ldr	r3, [r7, #0]
 801380c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 801380e:	461a      	mov	r2, r3
 8013810:	f000 fd5e 	bl	80142d0 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8013814:	687b      	ldr	r3, [r7, #4]
 8013816:	681b      	ldr	r3, [r3, #0]
 8013818:	2160      	movs	r1, #96	@ 0x60
 801381a:	4618      	mov	r0, r3
 801381c:	f000 fe01 	bl	8014422 <TIM_ITRx_SetConfig>
      break;
 8013820:	e01c      	b.n	801385c <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8013822:	687b      	ldr	r3, [r7, #4]
 8013824:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8013826:	683b      	ldr	r3, [r7, #0]
 8013828:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 801382a:	683b      	ldr	r3, [r7, #0]
 801382c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 801382e:	461a      	mov	r2, r3
 8013830:	f000 fce2 	bl	80141f8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8013834:	687b      	ldr	r3, [r7, #4]
 8013836:	681b      	ldr	r3, [r3, #0]
 8013838:	2140      	movs	r1, #64	@ 0x40
 801383a:	4618      	mov	r0, r3
 801383c:	f000 fdf1 	bl	8014422 <TIM_ITRx_SetConfig>
      break;
 8013840:	e00c      	b.n	801385c <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8013842:	687b      	ldr	r3, [r7, #4]
 8013844:	681a      	ldr	r2, [r3, #0]
 8013846:	683b      	ldr	r3, [r7, #0]
 8013848:	681b      	ldr	r3, [r3, #0]
 801384a:	4619      	mov	r1, r3
 801384c:	4610      	mov	r0, r2
 801384e:	f000 fde8 	bl	8014422 <TIM_ITRx_SetConfig>
      break;
 8013852:	e003      	b.n	801385c <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8013854:	2301      	movs	r3, #1
 8013856:	73fb      	strb	r3, [r7, #15]
      break;
 8013858:	e000      	b.n	801385c <HAL_TIM_ConfigClockSource+0x178>
      break;
 801385a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 801385c:	687b      	ldr	r3, [r7, #4]
 801385e:	2201      	movs	r2, #1
 8013860:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8013864:	687b      	ldr	r3, [r7, #4]
 8013866:	2200      	movs	r2, #0
 8013868:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 801386c:	7bfb      	ldrb	r3, [r7, #15]
}
 801386e:	4618      	mov	r0, r3
 8013870:	3710      	adds	r7, #16
 8013872:	46bd      	mov	sp, r7
 8013874:	bd80      	pop	{r7, pc}

08013876 <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8013876:	b580      	push	{r7, lr}
 8013878:	b082      	sub	sp, #8
 801387a:	af00      	add	r7, sp, #0
 801387c:	6078      	str	r0, [r7, #4]
 801387e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 8013880:	687b      	ldr	r3, [r7, #4]
 8013882:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8013886:	2b01      	cmp	r3, #1
 8013888:	d101      	bne.n	801388e <HAL_TIM_SlaveConfigSynchro+0x18>
 801388a:	2302      	movs	r3, #2
 801388c:	e031      	b.n	80138f2 <HAL_TIM_SlaveConfigSynchro+0x7c>
 801388e:	687b      	ldr	r3, [r7, #4]
 8013890:	2201      	movs	r2, #1
 8013892:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8013896:	687b      	ldr	r3, [r7, #4]
 8013898:	2202      	movs	r2, #2
 801389a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 801389e:	6839      	ldr	r1, [r7, #0]
 80138a0:	6878      	ldr	r0, [r7, #4]
 80138a2:	f000 fba7 	bl	8013ff4 <TIM_SlaveTimer_SetConfig>
 80138a6:	4603      	mov	r3, r0
 80138a8:	2b00      	cmp	r3, #0
 80138aa:	d009      	beq.n	80138c0 <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 80138ac:	687b      	ldr	r3, [r7, #4]
 80138ae:	2201      	movs	r2, #1
 80138b0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    __HAL_UNLOCK(htim);
 80138b4:	687b      	ldr	r3, [r7, #4]
 80138b6:	2200      	movs	r2, #0
 80138b8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    return HAL_ERROR;
 80138bc:	2301      	movs	r3, #1
 80138be:	e018      	b.n	80138f2 <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 80138c0:	687b      	ldr	r3, [r7, #4]
 80138c2:	681b      	ldr	r3, [r3, #0]
 80138c4:	68da      	ldr	r2, [r3, #12]
 80138c6:	687b      	ldr	r3, [r7, #4]
 80138c8:	681b      	ldr	r3, [r3, #0]
 80138ca:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80138ce:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 80138d0:	687b      	ldr	r3, [r7, #4]
 80138d2:	681b      	ldr	r3, [r3, #0]
 80138d4:	68da      	ldr	r2, [r3, #12]
 80138d6:	687b      	ldr	r3, [r7, #4]
 80138d8:	681b      	ldr	r3, [r3, #0]
 80138da:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 80138de:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 80138e0:	687b      	ldr	r3, [r7, #4]
 80138e2:	2201      	movs	r2, #1
 80138e4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80138e8:	687b      	ldr	r3, [r7, #4]
 80138ea:	2200      	movs	r2, #0
 80138ec:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80138f0:	2300      	movs	r3, #0
}
 80138f2:	4618      	mov	r0, r3
 80138f4:	3708      	adds	r7, #8
 80138f6:	46bd      	mov	sp, r7
 80138f8:	bd80      	pop	{r7, pc}
	...

080138fc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80138fc:	b480      	push	{r7}
 80138fe:	b085      	sub	sp, #20
 8013900:	af00      	add	r7, sp, #0
 8013902:	6078      	str	r0, [r7, #4]
 8013904:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8013906:	687b      	ldr	r3, [r7, #4]
 8013908:	681b      	ldr	r3, [r3, #0]
 801390a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 801390c:	687b      	ldr	r3, [r7, #4]
 801390e:	4a46      	ldr	r2, [pc, #280]	@ (8013a28 <TIM_Base_SetConfig+0x12c>)
 8013910:	4293      	cmp	r3, r2
 8013912:	d013      	beq.n	801393c <TIM_Base_SetConfig+0x40>
 8013914:	687b      	ldr	r3, [r7, #4]
 8013916:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 801391a:	d00f      	beq.n	801393c <TIM_Base_SetConfig+0x40>
 801391c:	687b      	ldr	r3, [r7, #4]
 801391e:	4a43      	ldr	r2, [pc, #268]	@ (8013a2c <TIM_Base_SetConfig+0x130>)
 8013920:	4293      	cmp	r3, r2
 8013922:	d00b      	beq.n	801393c <TIM_Base_SetConfig+0x40>
 8013924:	687b      	ldr	r3, [r7, #4]
 8013926:	4a42      	ldr	r2, [pc, #264]	@ (8013a30 <TIM_Base_SetConfig+0x134>)
 8013928:	4293      	cmp	r3, r2
 801392a:	d007      	beq.n	801393c <TIM_Base_SetConfig+0x40>
 801392c:	687b      	ldr	r3, [r7, #4]
 801392e:	4a41      	ldr	r2, [pc, #260]	@ (8013a34 <TIM_Base_SetConfig+0x138>)
 8013930:	4293      	cmp	r3, r2
 8013932:	d003      	beq.n	801393c <TIM_Base_SetConfig+0x40>
 8013934:	687b      	ldr	r3, [r7, #4]
 8013936:	4a40      	ldr	r2, [pc, #256]	@ (8013a38 <TIM_Base_SetConfig+0x13c>)
 8013938:	4293      	cmp	r3, r2
 801393a:	d108      	bne.n	801394e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 801393c:	68fb      	ldr	r3, [r7, #12]
 801393e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8013942:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8013944:	683b      	ldr	r3, [r7, #0]
 8013946:	685b      	ldr	r3, [r3, #4]
 8013948:	68fa      	ldr	r2, [r7, #12]
 801394a:	4313      	orrs	r3, r2
 801394c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 801394e:	687b      	ldr	r3, [r7, #4]
 8013950:	4a35      	ldr	r2, [pc, #212]	@ (8013a28 <TIM_Base_SetConfig+0x12c>)
 8013952:	4293      	cmp	r3, r2
 8013954:	d01f      	beq.n	8013996 <TIM_Base_SetConfig+0x9a>
 8013956:	687b      	ldr	r3, [r7, #4]
 8013958:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 801395c:	d01b      	beq.n	8013996 <TIM_Base_SetConfig+0x9a>
 801395e:	687b      	ldr	r3, [r7, #4]
 8013960:	4a32      	ldr	r2, [pc, #200]	@ (8013a2c <TIM_Base_SetConfig+0x130>)
 8013962:	4293      	cmp	r3, r2
 8013964:	d017      	beq.n	8013996 <TIM_Base_SetConfig+0x9a>
 8013966:	687b      	ldr	r3, [r7, #4]
 8013968:	4a31      	ldr	r2, [pc, #196]	@ (8013a30 <TIM_Base_SetConfig+0x134>)
 801396a:	4293      	cmp	r3, r2
 801396c:	d013      	beq.n	8013996 <TIM_Base_SetConfig+0x9a>
 801396e:	687b      	ldr	r3, [r7, #4]
 8013970:	4a30      	ldr	r2, [pc, #192]	@ (8013a34 <TIM_Base_SetConfig+0x138>)
 8013972:	4293      	cmp	r3, r2
 8013974:	d00f      	beq.n	8013996 <TIM_Base_SetConfig+0x9a>
 8013976:	687b      	ldr	r3, [r7, #4]
 8013978:	4a2f      	ldr	r2, [pc, #188]	@ (8013a38 <TIM_Base_SetConfig+0x13c>)
 801397a:	4293      	cmp	r3, r2
 801397c:	d00b      	beq.n	8013996 <TIM_Base_SetConfig+0x9a>
 801397e:	687b      	ldr	r3, [r7, #4]
 8013980:	4a2e      	ldr	r2, [pc, #184]	@ (8013a3c <TIM_Base_SetConfig+0x140>)
 8013982:	4293      	cmp	r3, r2
 8013984:	d007      	beq.n	8013996 <TIM_Base_SetConfig+0x9a>
 8013986:	687b      	ldr	r3, [r7, #4]
 8013988:	4a2d      	ldr	r2, [pc, #180]	@ (8013a40 <TIM_Base_SetConfig+0x144>)
 801398a:	4293      	cmp	r3, r2
 801398c:	d003      	beq.n	8013996 <TIM_Base_SetConfig+0x9a>
 801398e:	687b      	ldr	r3, [r7, #4]
 8013990:	4a2c      	ldr	r2, [pc, #176]	@ (8013a44 <TIM_Base_SetConfig+0x148>)
 8013992:	4293      	cmp	r3, r2
 8013994:	d108      	bne.n	80139a8 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8013996:	68fb      	ldr	r3, [r7, #12]
 8013998:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 801399c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 801399e:	683b      	ldr	r3, [r7, #0]
 80139a0:	68db      	ldr	r3, [r3, #12]
 80139a2:	68fa      	ldr	r2, [r7, #12]
 80139a4:	4313      	orrs	r3, r2
 80139a6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80139a8:	68fb      	ldr	r3, [r7, #12]
 80139aa:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80139ae:	683b      	ldr	r3, [r7, #0]
 80139b0:	695b      	ldr	r3, [r3, #20]
 80139b2:	4313      	orrs	r3, r2
 80139b4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80139b6:	687b      	ldr	r3, [r7, #4]
 80139b8:	68fa      	ldr	r2, [r7, #12]
 80139ba:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80139bc:	683b      	ldr	r3, [r7, #0]
 80139be:	689a      	ldr	r2, [r3, #8]
 80139c0:	687b      	ldr	r3, [r7, #4]
 80139c2:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80139c4:	683b      	ldr	r3, [r7, #0]
 80139c6:	681a      	ldr	r2, [r3, #0]
 80139c8:	687b      	ldr	r3, [r7, #4]
 80139ca:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80139cc:	687b      	ldr	r3, [r7, #4]
 80139ce:	4a16      	ldr	r2, [pc, #88]	@ (8013a28 <TIM_Base_SetConfig+0x12c>)
 80139d0:	4293      	cmp	r3, r2
 80139d2:	d00f      	beq.n	80139f4 <TIM_Base_SetConfig+0xf8>
 80139d4:	687b      	ldr	r3, [r7, #4]
 80139d6:	4a18      	ldr	r2, [pc, #96]	@ (8013a38 <TIM_Base_SetConfig+0x13c>)
 80139d8:	4293      	cmp	r3, r2
 80139da:	d00b      	beq.n	80139f4 <TIM_Base_SetConfig+0xf8>
 80139dc:	687b      	ldr	r3, [r7, #4]
 80139de:	4a17      	ldr	r2, [pc, #92]	@ (8013a3c <TIM_Base_SetConfig+0x140>)
 80139e0:	4293      	cmp	r3, r2
 80139e2:	d007      	beq.n	80139f4 <TIM_Base_SetConfig+0xf8>
 80139e4:	687b      	ldr	r3, [r7, #4]
 80139e6:	4a16      	ldr	r2, [pc, #88]	@ (8013a40 <TIM_Base_SetConfig+0x144>)
 80139e8:	4293      	cmp	r3, r2
 80139ea:	d003      	beq.n	80139f4 <TIM_Base_SetConfig+0xf8>
 80139ec:	687b      	ldr	r3, [r7, #4]
 80139ee:	4a15      	ldr	r2, [pc, #84]	@ (8013a44 <TIM_Base_SetConfig+0x148>)
 80139f0:	4293      	cmp	r3, r2
 80139f2:	d103      	bne.n	80139fc <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80139f4:	683b      	ldr	r3, [r7, #0]
 80139f6:	691a      	ldr	r2, [r3, #16]
 80139f8:	687b      	ldr	r3, [r7, #4]
 80139fa:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80139fc:	687b      	ldr	r3, [r7, #4]
 80139fe:	2201      	movs	r2, #1
 8013a00:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8013a02:	687b      	ldr	r3, [r7, #4]
 8013a04:	691b      	ldr	r3, [r3, #16]
 8013a06:	f003 0301 	and.w	r3, r3, #1
 8013a0a:	2b01      	cmp	r3, #1
 8013a0c:	d105      	bne.n	8013a1a <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8013a0e:	687b      	ldr	r3, [r7, #4]
 8013a10:	691b      	ldr	r3, [r3, #16]
 8013a12:	f023 0201 	bic.w	r2, r3, #1
 8013a16:	687b      	ldr	r3, [r7, #4]
 8013a18:	611a      	str	r2, [r3, #16]
  }
}
 8013a1a:	bf00      	nop
 8013a1c:	3714      	adds	r7, #20
 8013a1e:	46bd      	mov	sp, r7
 8013a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013a24:	4770      	bx	lr
 8013a26:	bf00      	nop
 8013a28:	40012c00 	.word	0x40012c00
 8013a2c:	40000400 	.word	0x40000400
 8013a30:	40000800 	.word	0x40000800
 8013a34:	40000c00 	.word	0x40000c00
 8013a38:	40013400 	.word	0x40013400
 8013a3c:	40014000 	.word	0x40014000
 8013a40:	40014400 	.word	0x40014400
 8013a44:	40014800 	.word	0x40014800

08013a48 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8013a48:	b480      	push	{r7}
 8013a4a:	b087      	sub	sp, #28
 8013a4c:	af00      	add	r7, sp, #0
 8013a4e:	6078      	str	r0, [r7, #4]
 8013a50:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8013a52:	687b      	ldr	r3, [r7, #4]
 8013a54:	6a1b      	ldr	r3, [r3, #32]
 8013a56:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8013a58:	687b      	ldr	r3, [r7, #4]
 8013a5a:	6a1b      	ldr	r3, [r3, #32]
 8013a5c:	f023 0201 	bic.w	r2, r3, #1
 8013a60:	687b      	ldr	r3, [r7, #4]
 8013a62:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8013a64:	687b      	ldr	r3, [r7, #4]
 8013a66:	685b      	ldr	r3, [r3, #4]
 8013a68:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8013a6a:	687b      	ldr	r3, [r7, #4]
 8013a6c:	699b      	ldr	r3, [r3, #24]
 8013a6e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8013a70:	68fb      	ldr	r3, [r7, #12]
 8013a72:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8013a76:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8013a7a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8013a7c:	68fb      	ldr	r3, [r7, #12]
 8013a7e:	f023 0303 	bic.w	r3, r3, #3
 8013a82:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8013a84:	683b      	ldr	r3, [r7, #0]
 8013a86:	681b      	ldr	r3, [r3, #0]
 8013a88:	68fa      	ldr	r2, [r7, #12]
 8013a8a:	4313      	orrs	r3, r2
 8013a8c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8013a8e:	697b      	ldr	r3, [r7, #20]
 8013a90:	f023 0302 	bic.w	r3, r3, #2
 8013a94:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8013a96:	683b      	ldr	r3, [r7, #0]
 8013a98:	689b      	ldr	r3, [r3, #8]
 8013a9a:	697a      	ldr	r2, [r7, #20]
 8013a9c:	4313      	orrs	r3, r2
 8013a9e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8013aa0:	687b      	ldr	r3, [r7, #4]
 8013aa2:	4a2c      	ldr	r2, [pc, #176]	@ (8013b54 <TIM_OC1_SetConfig+0x10c>)
 8013aa4:	4293      	cmp	r3, r2
 8013aa6:	d00f      	beq.n	8013ac8 <TIM_OC1_SetConfig+0x80>
 8013aa8:	687b      	ldr	r3, [r7, #4]
 8013aaa:	4a2b      	ldr	r2, [pc, #172]	@ (8013b58 <TIM_OC1_SetConfig+0x110>)
 8013aac:	4293      	cmp	r3, r2
 8013aae:	d00b      	beq.n	8013ac8 <TIM_OC1_SetConfig+0x80>
 8013ab0:	687b      	ldr	r3, [r7, #4]
 8013ab2:	4a2a      	ldr	r2, [pc, #168]	@ (8013b5c <TIM_OC1_SetConfig+0x114>)
 8013ab4:	4293      	cmp	r3, r2
 8013ab6:	d007      	beq.n	8013ac8 <TIM_OC1_SetConfig+0x80>
 8013ab8:	687b      	ldr	r3, [r7, #4]
 8013aba:	4a29      	ldr	r2, [pc, #164]	@ (8013b60 <TIM_OC1_SetConfig+0x118>)
 8013abc:	4293      	cmp	r3, r2
 8013abe:	d003      	beq.n	8013ac8 <TIM_OC1_SetConfig+0x80>
 8013ac0:	687b      	ldr	r3, [r7, #4]
 8013ac2:	4a28      	ldr	r2, [pc, #160]	@ (8013b64 <TIM_OC1_SetConfig+0x11c>)
 8013ac4:	4293      	cmp	r3, r2
 8013ac6:	d10c      	bne.n	8013ae2 <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8013ac8:	697b      	ldr	r3, [r7, #20]
 8013aca:	f023 0308 	bic.w	r3, r3, #8
 8013ace:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8013ad0:	683b      	ldr	r3, [r7, #0]
 8013ad2:	68db      	ldr	r3, [r3, #12]
 8013ad4:	697a      	ldr	r2, [r7, #20]
 8013ad6:	4313      	orrs	r3, r2
 8013ad8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8013ada:	697b      	ldr	r3, [r7, #20]
 8013adc:	f023 0304 	bic.w	r3, r3, #4
 8013ae0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8013ae2:	687b      	ldr	r3, [r7, #4]
 8013ae4:	4a1b      	ldr	r2, [pc, #108]	@ (8013b54 <TIM_OC1_SetConfig+0x10c>)
 8013ae6:	4293      	cmp	r3, r2
 8013ae8:	d00f      	beq.n	8013b0a <TIM_OC1_SetConfig+0xc2>
 8013aea:	687b      	ldr	r3, [r7, #4]
 8013aec:	4a1a      	ldr	r2, [pc, #104]	@ (8013b58 <TIM_OC1_SetConfig+0x110>)
 8013aee:	4293      	cmp	r3, r2
 8013af0:	d00b      	beq.n	8013b0a <TIM_OC1_SetConfig+0xc2>
 8013af2:	687b      	ldr	r3, [r7, #4]
 8013af4:	4a19      	ldr	r2, [pc, #100]	@ (8013b5c <TIM_OC1_SetConfig+0x114>)
 8013af6:	4293      	cmp	r3, r2
 8013af8:	d007      	beq.n	8013b0a <TIM_OC1_SetConfig+0xc2>
 8013afa:	687b      	ldr	r3, [r7, #4]
 8013afc:	4a18      	ldr	r2, [pc, #96]	@ (8013b60 <TIM_OC1_SetConfig+0x118>)
 8013afe:	4293      	cmp	r3, r2
 8013b00:	d003      	beq.n	8013b0a <TIM_OC1_SetConfig+0xc2>
 8013b02:	687b      	ldr	r3, [r7, #4]
 8013b04:	4a17      	ldr	r2, [pc, #92]	@ (8013b64 <TIM_OC1_SetConfig+0x11c>)
 8013b06:	4293      	cmp	r3, r2
 8013b08:	d111      	bne.n	8013b2e <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8013b0a:	693b      	ldr	r3, [r7, #16]
 8013b0c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8013b10:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8013b12:	693b      	ldr	r3, [r7, #16]
 8013b14:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8013b18:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8013b1a:	683b      	ldr	r3, [r7, #0]
 8013b1c:	695b      	ldr	r3, [r3, #20]
 8013b1e:	693a      	ldr	r2, [r7, #16]
 8013b20:	4313      	orrs	r3, r2
 8013b22:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8013b24:	683b      	ldr	r3, [r7, #0]
 8013b26:	699b      	ldr	r3, [r3, #24]
 8013b28:	693a      	ldr	r2, [r7, #16]
 8013b2a:	4313      	orrs	r3, r2
 8013b2c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8013b2e:	687b      	ldr	r3, [r7, #4]
 8013b30:	693a      	ldr	r2, [r7, #16]
 8013b32:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8013b34:	687b      	ldr	r3, [r7, #4]
 8013b36:	68fa      	ldr	r2, [r7, #12]
 8013b38:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8013b3a:	683b      	ldr	r3, [r7, #0]
 8013b3c:	685a      	ldr	r2, [r3, #4]
 8013b3e:	687b      	ldr	r3, [r7, #4]
 8013b40:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8013b42:	687b      	ldr	r3, [r7, #4]
 8013b44:	697a      	ldr	r2, [r7, #20]
 8013b46:	621a      	str	r2, [r3, #32]
}
 8013b48:	bf00      	nop
 8013b4a:	371c      	adds	r7, #28
 8013b4c:	46bd      	mov	sp, r7
 8013b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013b52:	4770      	bx	lr
 8013b54:	40012c00 	.word	0x40012c00
 8013b58:	40013400 	.word	0x40013400
 8013b5c:	40014000 	.word	0x40014000
 8013b60:	40014400 	.word	0x40014400
 8013b64:	40014800 	.word	0x40014800

08013b68 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8013b68:	b480      	push	{r7}
 8013b6a:	b087      	sub	sp, #28
 8013b6c:	af00      	add	r7, sp, #0
 8013b6e:	6078      	str	r0, [r7, #4]
 8013b70:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8013b72:	687b      	ldr	r3, [r7, #4]
 8013b74:	6a1b      	ldr	r3, [r3, #32]
 8013b76:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8013b78:	687b      	ldr	r3, [r7, #4]
 8013b7a:	6a1b      	ldr	r3, [r3, #32]
 8013b7c:	f023 0210 	bic.w	r2, r3, #16
 8013b80:	687b      	ldr	r3, [r7, #4]
 8013b82:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8013b84:	687b      	ldr	r3, [r7, #4]
 8013b86:	685b      	ldr	r3, [r3, #4]
 8013b88:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8013b8a:	687b      	ldr	r3, [r7, #4]
 8013b8c:	699b      	ldr	r3, [r3, #24]
 8013b8e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8013b90:	68fb      	ldr	r3, [r7, #12]
 8013b92:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8013b96:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8013b9a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8013b9c:	68fb      	ldr	r3, [r7, #12]
 8013b9e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8013ba2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8013ba4:	683b      	ldr	r3, [r7, #0]
 8013ba6:	681b      	ldr	r3, [r3, #0]
 8013ba8:	021b      	lsls	r3, r3, #8
 8013baa:	68fa      	ldr	r2, [r7, #12]
 8013bac:	4313      	orrs	r3, r2
 8013bae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8013bb0:	697b      	ldr	r3, [r7, #20]
 8013bb2:	f023 0320 	bic.w	r3, r3, #32
 8013bb6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8013bb8:	683b      	ldr	r3, [r7, #0]
 8013bba:	689b      	ldr	r3, [r3, #8]
 8013bbc:	011b      	lsls	r3, r3, #4
 8013bbe:	697a      	ldr	r2, [r7, #20]
 8013bc0:	4313      	orrs	r3, r2
 8013bc2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8013bc4:	687b      	ldr	r3, [r7, #4]
 8013bc6:	4a28      	ldr	r2, [pc, #160]	@ (8013c68 <TIM_OC2_SetConfig+0x100>)
 8013bc8:	4293      	cmp	r3, r2
 8013bca:	d003      	beq.n	8013bd4 <TIM_OC2_SetConfig+0x6c>
 8013bcc:	687b      	ldr	r3, [r7, #4]
 8013bce:	4a27      	ldr	r2, [pc, #156]	@ (8013c6c <TIM_OC2_SetConfig+0x104>)
 8013bd0:	4293      	cmp	r3, r2
 8013bd2:	d10d      	bne.n	8013bf0 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8013bd4:	697b      	ldr	r3, [r7, #20]
 8013bd6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8013bda:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8013bdc:	683b      	ldr	r3, [r7, #0]
 8013bde:	68db      	ldr	r3, [r3, #12]
 8013be0:	011b      	lsls	r3, r3, #4
 8013be2:	697a      	ldr	r2, [r7, #20]
 8013be4:	4313      	orrs	r3, r2
 8013be6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8013be8:	697b      	ldr	r3, [r7, #20]
 8013bea:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8013bee:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8013bf0:	687b      	ldr	r3, [r7, #4]
 8013bf2:	4a1d      	ldr	r2, [pc, #116]	@ (8013c68 <TIM_OC2_SetConfig+0x100>)
 8013bf4:	4293      	cmp	r3, r2
 8013bf6:	d00f      	beq.n	8013c18 <TIM_OC2_SetConfig+0xb0>
 8013bf8:	687b      	ldr	r3, [r7, #4]
 8013bfa:	4a1c      	ldr	r2, [pc, #112]	@ (8013c6c <TIM_OC2_SetConfig+0x104>)
 8013bfc:	4293      	cmp	r3, r2
 8013bfe:	d00b      	beq.n	8013c18 <TIM_OC2_SetConfig+0xb0>
 8013c00:	687b      	ldr	r3, [r7, #4]
 8013c02:	4a1b      	ldr	r2, [pc, #108]	@ (8013c70 <TIM_OC2_SetConfig+0x108>)
 8013c04:	4293      	cmp	r3, r2
 8013c06:	d007      	beq.n	8013c18 <TIM_OC2_SetConfig+0xb0>
 8013c08:	687b      	ldr	r3, [r7, #4]
 8013c0a:	4a1a      	ldr	r2, [pc, #104]	@ (8013c74 <TIM_OC2_SetConfig+0x10c>)
 8013c0c:	4293      	cmp	r3, r2
 8013c0e:	d003      	beq.n	8013c18 <TIM_OC2_SetConfig+0xb0>
 8013c10:	687b      	ldr	r3, [r7, #4]
 8013c12:	4a19      	ldr	r2, [pc, #100]	@ (8013c78 <TIM_OC2_SetConfig+0x110>)
 8013c14:	4293      	cmp	r3, r2
 8013c16:	d113      	bne.n	8013c40 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8013c18:	693b      	ldr	r3, [r7, #16]
 8013c1a:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8013c1e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8013c20:	693b      	ldr	r3, [r7, #16]
 8013c22:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8013c26:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8013c28:	683b      	ldr	r3, [r7, #0]
 8013c2a:	695b      	ldr	r3, [r3, #20]
 8013c2c:	009b      	lsls	r3, r3, #2
 8013c2e:	693a      	ldr	r2, [r7, #16]
 8013c30:	4313      	orrs	r3, r2
 8013c32:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8013c34:	683b      	ldr	r3, [r7, #0]
 8013c36:	699b      	ldr	r3, [r3, #24]
 8013c38:	009b      	lsls	r3, r3, #2
 8013c3a:	693a      	ldr	r2, [r7, #16]
 8013c3c:	4313      	orrs	r3, r2
 8013c3e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8013c40:	687b      	ldr	r3, [r7, #4]
 8013c42:	693a      	ldr	r2, [r7, #16]
 8013c44:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8013c46:	687b      	ldr	r3, [r7, #4]
 8013c48:	68fa      	ldr	r2, [r7, #12]
 8013c4a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8013c4c:	683b      	ldr	r3, [r7, #0]
 8013c4e:	685a      	ldr	r2, [r3, #4]
 8013c50:	687b      	ldr	r3, [r7, #4]
 8013c52:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8013c54:	687b      	ldr	r3, [r7, #4]
 8013c56:	697a      	ldr	r2, [r7, #20]
 8013c58:	621a      	str	r2, [r3, #32]
}
 8013c5a:	bf00      	nop
 8013c5c:	371c      	adds	r7, #28
 8013c5e:	46bd      	mov	sp, r7
 8013c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013c64:	4770      	bx	lr
 8013c66:	bf00      	nop
 8013c68:	40012c00 	.word	0x40012c00
 8013c6c:	40013400 	.word	0x40013400
 8013c70:	40014000 	.word	0x40014000
 8013c74:	40014400 	.word	0x40014400
 8013c78:	40014800 	.word	0x40014800

08013c7c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8013c7c:	b480      	push	{r7}
 8013c7e:	b087      	sub	sp, #28
 8013c80:	af00      	add	r7, sp, #0
 8013c82:	6078      	str	r0, [r7, #4]
 8013c84:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8013c86:	687b      	ldr	r3, [r7, #4]
 8013c88:	6a1b      	ldr	r3, [r3, #32]
 8013c8a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8013c8c:	687b      	ldr	r3, [r7, #4]
 8013c8e:	6a1b      	ldr	r3, [r3, #32]
 8013c90:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8013c94:	687b      	ldr	r3, [r7, #4]
 8013c96:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8013c98:	687b      	ldr	r3, [r7, #4]
 8013c9a:	685b      	ldr	r3, [r3, #4]
 8013c9c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8013c9e:	687b      	ldr	r3, [r7, #4]
 8013ca0:	69db      	ldr	r3, [r3, #28]
 8013ca2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8013ca4:	68fb      	ldr	r3, [r7, #12]
 8013ca6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8013caa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8013cae:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8013cb0:	68fb      	ldr	r3, [r7, #12]
 8013cb2:	f023 0303 	bic.w	r3, r3, #3
 8013cb6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8013cb8:	683b      	ldr	r3, [r7, #0]
 8013cba:	681b      	ldr	r3, [r3, #0]
 8013cbc:	68fa      	ldr	r2, [r7, #12]
 8013cbe:	4313      	orrs	r3, r2
 8013cc0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8013cc2:	697b      	ldr	r3, [r7, #20]
 8013cc4:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8013cc8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8013cca:	683b      	ldr	r3, [r7, #0]
 8013ccc:	689b      	ldr	r3, [r3, #8]
 8013cce:	021b      	lsls	r3, r3, #8
 8013cd0:	697a      	ldr	r2, [r7, #20]
 8013cd2:	4313      	orrs	r3, r2
 8013cd4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8013cd6:	687b      	ldr	r3, [r7, #4]
 8013cd8:	4a27      	ldr	r2, [pc, #156]	@ (8013d78 <TIM_OC3_SetConfig+0xfc>)
 8013cda:	4293      	cmp	r3, r2
 8013cdc:	d003      	beq.n	8013ce6 <TIM_OC3_SetConfig+0x6a>
 8013cde:	687b      	ldr	r3, [r7, #4]
 8013ce0:	4a26      	ldr	r2, [pc, #152]	@ (8013d7c <TIM_OC3_SetConfig+0x100>)
 8013ce2:	4293      	cmp	r3, r2
 8013ce4:	d10d      	bne.n	8013d02 <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8013ce6:	697b      	ldr	r3, [r7, #20]
 8013ce8:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8013cec:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8013cee:	683b      	ldr	r3, [r7, #0]
 8013cf0:	68db      	ldr	r3, [r3, #12]
 8013cf2:	021b      	lsls	r3, r3, #8
 8013cf4:	697a      	ldr	r2, [r7, #20]
 8013cf6:	4313      	orrs	r3, r2
 8013cf8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8013cfa:	697b      	ldr	r3, [r7, #20]
 8013cfc:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8013d00:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8013d02:	687b      	ldr	r3, [r7, #4]
 8013d04:	4a1c      	ldr	r2, [pc, #112]	@ (8013d78 <TIM_OC3_SetConfig+0xfc>)
 8013d06:	4293      	cmp	r3, r2
 8013d08:	d00f      	beq.n	8013d2a <TIM_OC3_SetConfig+0xae>
 8013d0a:	687b      	ldr	r3, [r7, #4]
 8013d0c:	4a1b      	ldr	r2, [pc, #108]	@ (8013d7c <TIM_OC3_SetConfig+0x100>)
 8013d0e:	4293      	cmp	r3, r2
 8013d10:	d00b      	beq.n	8013d2a <TIM_OC3_SetConfig+0xae>
 8013d12:	687b      	ldr	r3, [r7, #4]
 8013d14:	4a1a      	ldr	r2, [pc, #104]	@ (8013d80 <TIM_OC3_SetConfig+0x104>)
 8013d16:	4293      	cmp	r3, r2
 8013d18:	d007      	beq.n	8013d2a <TIM_OC3_SetConfig+0xae>
 8013d1a:	687b      	ldr	r3, [r7, #4]
 8013d1c:	4a19      	ldr	r2, [pc, #100]	@ (8013d84 <TIM_OC3_SetConfig+0x108>)
 8013d1e:	4293      	cmp	r3, r2
 8013d20:	d003      	beq.n	8013d2a <TIM_OC3_SetConfig+0xae>
 8013d22:	687b      	ldr	r3, [r7, #4]
 8013d24:	4a18      	ldr	r2, [pc, #96]	@ (8013d88 <TIM_OC3_SetConfig+0x10c>)
 8013d26:	4293      	cmp	r3, r2
 8013d28:	d113      	bne.n	8013d52 <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8013d2a:	693b      	ldr	r3, [r7, #16]
 8013d2c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8013d30:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8013d32:	693b      	ldr	r3, [r7, #16]
 8013d34:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8013d38:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8013d3a:	683b      	ldr	r3, [r7, #0]
 8013d3c:	695b      	ldr	r3, [r3, #20]
 8013d3e:	011b      	lsls	r3, r3, #4
 8013d40:	693a      	ldr	r2, [r7, #16]
 8013d42:	4313      	orrs	r3, r2
 8013d44:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8013d46:	683b      	ldr	r3, [r7, #0]
 8013d48:	699b      	ldr	r3, [r3, #24]
 8013d4a:	011b      	lsls	r3, r3, #4
 8013d4c:	693a      	ldr	r2, [r7, #16]
 8013d4e:	4313      	orrs	r3, r2
 8013d50:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8013d52:	687b      	ldr	r3, [r7, #4]
 8013d54:	693a      	ldr	r2, [r7, #16]
 8013d56:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8013d58:	687b      	ldr	r3, [r7, #4]
 8013d5a:	68fa      	ldr	r2, [r7, #12]
 8013d5c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8013d5e:	683b      	ldr	r3, [r7, #0]
 8013d60:	685a      	ldr	r2, [r3, #4]
 8013d62:	687b      	ldr	r3, [r7, #4]
 8013d64:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8013d66:	687b      	ldr	r3, [r7, #4]
 8013d68:	697a      	ldr	r2, [r7, #20]
 8013d6a:	621a      	str	r2, [r3, #32]
}
 8013d6c:	bf00      	nop
 8013d6e:	371c      	adds	r7, #28
 8013d70:	46bd      	mov	sp, r7
 8013d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013d76:	4770      	bx	lr
 8013d78:	40012c00 	.word	0x40012c00
 8013d7c:	40013400 	.word	0x40013400
 8013d80:	40014000 	.word	0x40014000
 8013d84:	40014400 	.word	0x40014400
 8013d88:	40014800 	.word	0x40014800

08013d8c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8013d8c:	b480      	push	{r7}
 8013d8e:	b087      	sub	sp, #28
 8013d90:	af00      	add	r7, sp, #0
 8013d92:	6078      	str	r0, [r7, #4]
 8013d94:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8013d96:	687b      	ldr	r3, [r7, #4]
 8013d98:	6a1b      	ldr	r3, [r3, #32]
 8013d9a:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8013d9c:	687b      	ldr	r3, [r7, #4]
 8013d9e:	6a1b      	ldr	r3, [r3, #32]
 8013da0:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8013da4:	687b      	ldr	r3, [r7, #4]
 8013da6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8013da8:	687b      	ldr	r3, [r7, #4]
 8013daa:	685b      	ldr	r3, [r3, #4]
 8013dac:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8013dae:	687b      	ldr	r3, [r7, #4]
 8013db0:	69db      	ldr	r3, [r3, #28]
 8013db2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8013db4:	68fb      	ldr	r3, [r7, #12]
 8013db6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8013dba:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8013dbe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8013dc0:	68fb      	ldr	r3, [r7, #12]
 8013dc2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8013dc6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8013dc8:	683b      	ldr	r3, [r7, #0]
 8013dca:	681b      	ldr	r3, [r3, #0]
 8013dcc:	021b      	lsls	r3, r3, #8
 8013dce:	68fa      	ldr	r2, [r7, #12]
 8013dd0:	4313      	orrs	r3, r2
 8013dd2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8013dd4:	693b      	ldr	r3, [r7, #16]
 8013dd6:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8013dda:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8013ddc:	683b      	ldr	r3, [r7, #0]
 8013dde:	689b      	ldr	r3, [r3, #8]
 8013de0:	031b      	lsls	r3, r3, #12
 8013de2:	693a      	ldr	r2, [r7, #16]
 8013de4:	4313      	orrs	r3, r2
 8013de6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8013de8:	687b      	ldr	r3, [r7, #4]
 8013dea:	4a18      	ldr	r2, [pc, #96]	@ (8013e4c <TIM_OC4_SetConfig+0xc0>)
 8013dec:	4293      	cmp	r3, r2
 8013dee:	d00f      	beq.n	8013e10 <TIM_OC4_SetConfig+0x84>
 8013df0:	687b      	ldr	r3, [r7, #4]
 8013df2:	4a17      	ldr	r2, [pc, #92]	@ (8013e50 <TIM_OC4_SetConfig+0xc4>)
 8013df4:	4293      	cmp	r3, r2
 8013df6:	d00b      	beq.n	8013e10 <TIM_OC4_SetConfig+0x84>
 8013df8:	687b      	ldr	r3, [r7, #4]
 8013dfa:	4a16      	ldr	r2, [pc, #88]	@ (8013e54 <TIM_OC4_SetConfig+0xc8>)
 8013dfc:	4293      	cmp	r3, r2
 8013dfe:	d007      	beq.n	8013e10 <TIM_OC4_SetConfig+0x84>
 8013e00:	687b      	ldr	r3, [r7, #4]
 8013e02:	4a15      	ldr	r2, [pc, #84]	@ (8013e58 <TIM_OC4_SetConfig+0xcc>)
 8013e04:	4293      	cmp	r3, r2
 8013e06:	d003      	beq.n	8013e10 <TIM_OC4_SetConfig+0x84>
 8013e08:	687b      	ldr	r3, [r7, #4]
 8013e0a:	4a14      	ldr	r2, [pc, #80]	@ (8013e5c <TIM_OC4_SetConfig+0xd0>)
 8013e0c:	4293      	cmp	r3, r2
 8013e0e:	d109      	bne.n	8013e24 <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8013e10:	697b      	ldr	r3, [r7, #20]
 8013e12:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8013e16:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8013e18:	683b      	ldr	r3, [r7, #0]
 8013e1a:	695b      	ldr	r3, [r3, #20]
 8013e1c:	019b      	lsls	r3, r3, #6
 8013e1e:	697a      	ldr	r2, [r7, #20]
 8013e20:	4313      	orrs	r3, r2
 8013e22:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8013e24:	687b      	ldr	r3, [r7, #4]
 8013e26:	697a      	ldr	r2, [r7, #20]
 8013e28:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8013e2a:	687b      	ldr	r3, [r7, #4]
 8013e2c:	68fa      	ldr	r2, [r7, #12]
 8013e2e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8013e30:	683b      	ldr	r3, [r7, #0]
 8013e32:	685a      	ldr	r2, [r3, #4]
 8013e34:	687b      	ldr	r3, [r7, #4]
 8013e36:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8013e38:	687b      	ldr	r3, [r7, #4]
 8013e3a:	693a      	ldr	r2, [r7, #16]
 8013e3c:	621a      	str	r2, [r3, #32]
}
 8013e3e:	bf00      	nop
 8013e40:	371c      	adds	r7, #28
 8013e42:	46bd      	mov	sp, r7
 8013e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013e48:	4770      	bx	lr
 8013e4a:	bf00      	nop
 8013e4c:	40012c00 	.word	0x40012c00
 8013e50:	40013400 	.word	0x40013400
 8013e54:	40014000 	.word	0x40014000
 8013e58:	40014400 	.word	0x40014400
 8013e5c:	40014800 	.word	0x40014800

08013e60 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8013e60:	b480      	push	{r7}
 8013e62:	b087      	sub	sp, #28
 8013e64:	af00      	add	r7, sp, #0
 8013e66:	6078      	str	r0, [r7, #4]
 8013e68:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8013e6a:	687b      	ldr	r3, [r7, #4]
 8013e6c:	6a1b      	ldr	r3, [r3, #32]
 8013e6e:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8013e70:	687b      	ldr	r3, [r7, #4]
 8013e72:	6a1b      	ldr	r3, [r3, #32]
 8013e74:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8013e78:	687b      	ldr	r3, [r7, #4]
 8013e7a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8013e7c:	687b      	ldr	r3, [r7, #4]
 8013e7e:	685b      	ldr	r3, [r3, #4]
 8013e80:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8013e82:	687b      	ldr	r3, [r7, #4]
 8013e84:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8013e86:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8013e88:	68fb      	ldr	r3, [r7, #12]
 8013e8a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8013e8e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8013e92:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8013e94:	683b      	ldr	r3, [r7, #0]
 8013e96:	681b      	ldr	r3, [r3, #0]
 8013e98:	68fa      	ldr	r2, [r7, #12]
 8013e9a:	4313      	orrs	r3, r2
 8013e9c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8013e9e:	693b      	ldr	r3, [r7, #16]
 8013ea0:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8013ea4:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8013ea6:	683b      	ldr	r3, [r7, #0]
 8013ea8:	689b      	ldr	r3, [r3, #8]
 8013eaa:	041b      	lsls	r3, r3, #16
 8013eac:	693a      	ldr	r2, [r7, #16]
 8013eae:	4313      	orrs	r3, r2
 8013eb0:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8013eb2:	687b      	ldr	r3, [r7, #4]
 8013eb4:	4a17      	ldr	r2, [pc, #92]	@ (8013f14 <TIM_OC5_SetConfig+0xb4>)
 8013eb6:	4293      	cmp	r3, r2
 8013eb8:	d00f      	beq.n	8013eda <TIM_OC5_SetConfig+0x7a>
 8013eba:	687b      	ldr	r3, [r7, #4]
 8013ebc:	4a16      	ldr	r2, [pc, #88]	@ (8013f18 <TIM_OC5_SetConfig+0xb8>)
 8013ebe:	4293      	cmp	r3, r2
 8013ec0:	d00b      	beq.n	8013eda <TIM_OC5_SetConfig+0x7a>
 8013ec2:	687b      	ldr	r3, [r7, #4]
 8013ec4:	4a15      	ldr	r2, [pc, #84]	@ (8013f1c <TIM_OC5_SetConfig+0xbc>)
 8013ec6:	4293      	cmp	r3, r2
 8013ec8:	d007      	beq.n	8013eda <TIM_OC5_SetConfig+0x7a>
 8013eca:	687b      	ldr	r3, [r7, #4]
 8013ecc:	4a14      	ldr	r2, [pc, #80]	@ (8013f20 <TIM_OC5_SetConfig+0xc0>)
 8013ece:	4293      	cmp	r3, r2
 8013ed0:	d003      	beq.n	8013eda <TIM_OC5_SetConfig+0x7a>
 8013ed2:	687b      	ldr	r3, [r7, #4]
 8013ed4:	4a13      	ldr	r2, [pc, #76]	@ (8013f24 <TIM_OC5_SetConfig+0xc4>)
 8013ed6:	4293      	cmp	r3, r2
 8013ed8:	d109      	bne.n	8013eee <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8013eda:	697b      	ldr	r3, [r7, #20]
 8013edc:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8013ee0:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8013ee2:	683b      	ldr	r3, [r7, #0]
 8013ee4:	695b      	ldr	r3, [r3, #20]
 8013ee6:	021b      	lsls	r3, r3, #8
 8013ee8:	697a      	ldr	r2, [r7, #20]
 8013eea:	4313      	orrs	r3, r2
 8013eec:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8013eee:	687b      	ldr	r3, [r7, #4]
 8013ef0:	697a      	ldr	r2, [r7, #20]
 8013ef2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8013ef4:	687b      	ldr	r3, [r7, #4]
 8013ef6:	68fa      	ldr	r2, [r7, #12]
 8013ef8:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8013efa:	683b      	ldr	r3, [r7, #0]
 8013efc:	685a      	ldr	r2, [r3, #4]
 8013efe:	687b      	ldr	r3, [r7, #4]
 8013f00:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8013f02:	687b      	ldr	r3, [r7, #4]
 8013f04:	693a      	ldr	r2, [r7, #16]
 8013f06:	621a      	str	r2, [r3, #32]
}
 8013f08:	bf00      	nop
 8013f0a:	371c      	adds	r7, #28
 8013f0c:	46bd      	mov	sp, r7
 8013f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013f12:	4770      	bx	lr
 8013f14:	40012c00 	.word	0x40012c00
 8013f18:	40013400 	.word	0x40013400
 8013f1c:	40014000 	.word	0x40014000
 8013f20:	40014400 	.word	0x40014400
 8013f24:	40014800 	.word	0x40014800

08013f28 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8013f28:	b480      	push	{r7}
 8013f2a:	b087      	sub	sp, #28
 8013f2c:	af00      	add	r7, sp, #0
 8013f2e:	6078      	str	r0, [r7, #4]
 8013f30:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8013f32:	687b      	ldr	r3, [r7, #4]
 8013f34:	6a1b      	ldr	r3, [r3, #32]
 8013f36:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8013f38:	687b      	ldr	r3, [r7, #4]
 8013f3a:	6a1b      	ldr	r3, [r3, #32]
 8013f3c:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8013f40:	687b      	ldr	r3, [r7, #4]
 8013f42:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8013f44:	687b      	ldr	r3, [r7, #4]
 8013f46:	685b      	ldr	r3, [r3, #4]
 8013f48:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8013f4a:	687b      	ldr	r3, [r7, #4]
 8013f4c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8013f4e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8013f50:	68fb      	ldr	r3, [r7, #12]
 8013f52:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8013f56:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8013f5a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8013f5c:	683b      	ldr	r3, [r7, #0]
 8013f5e:	681b      	ldr	r3, [r3, #0]
 8013f60:	021b      	lsls	r3, r3, #8
 8013f62:	68fa      	ldr	r2, [r7, #12]
 8013f64:	4313      	orrs	r3, r2
 8013f66:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8013f68:	693b      	ldr	r3, [r7, #16]
 8013f6a:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8013f6e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8013f70:	683b      	ldr	r3, [r7, #0]
 8013f72:	689b      	ldr	r3, [r3, #8]
 8013f74:	051b      	lsls	r3, r3, #20
 8013f76:	693a      	ldr	r2, [r7, #16]
 8013f78:	4313      	orrs	r3, r2
 8013f7a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8013f7c:	687b      	ldr	r3, [r7, #4]
 8013f7e:	4a18      	ldr	r2, [pc, #96]	@ (8013fe0 <TIM_OC6_SetConfig+0xb8>)
 8013f80:	4293      	cmp	r3, r2
 8013f82:	d00f      	beq.n	8013fa4 <TIM_OC6_SetConfig+0x7c>
 8013f84:	687b      	ldr	r3, [r7, #4]
 8013f86:	4a17      	ldr	r2, [pc, #92]	@ (8013fe4 <TIM_OC6_SetConfig+0xbc>)
 8013f88:	4293      	cmp	r3, r2
 8013f8a:	d00b      	beq.n	8013fa4 <TIM_OC6_SetConfig+0x7c>
 8013f8c:	687b      	ldr	r3, [r7, #4]
 8013f8e:	4a16      	ldr	r2, [pc, #88]	@ (8013fe8 <TIM_OC6_SetConfig+0xc0>)
 8013f90:	4293      	cmp	r3, r2
 8013f92:	d007      	beq.n	8013fa4 <TIM_OC6_SetConfig+0x7c>
 8013f94:	687b      	ldr	r3, [r7, #4]
 8013f96:	4a15      	ldr	r2, [pc, #84]	@ (8013fec <TIM_OC6_SetConfig+0xc4>)
 8013f98:	4293      	cmp	r3, r2
 8013f9a:	d003      	beq.n	8013fa4 <TIM_OC6_SetConfig+0x7c>
 8013f9c:	687b      	ldr	r3, [r7, #4]
 8013f9e:	4a14      	ldr	r2, [pc, #80]	@ (8013ff0 <TIM_OC6_SetConfig+0xc8>)
 8013fa0:	4293      	cmp	r3, r2
 8013fa2:	d109      	bne.n	8013fb8 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8013fa4:	697b      	ldr	r3, [r7, #20]
 8013fa6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8013faa:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8013fac:	683b      	ldr	r3, [r7, #0]
 8013fae:	695b      	ldr	r3, [r3, #20]
 8013fb0:	029b      	lsls	r3, r3, #10
 8013fb2:	697a      	ldr	r2, [r7, #20]
 8013fb4:	4313      	orrs	r3, r2
 8013fb6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8013fb8:	687b      	ldr	r3, [r7, #4]
 8013fba:	697a      	ldr	r2, [r7, #20]
 8013fbc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8013fbe:	687b      	ldr	r3, [r7, #4]
 8013fc0:	68fa      	ldr	r2, [r7, #12]
 8013fc2:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8013fc4:	683b      	ldr	r3, [r7, #0]
 8013fc6:	685a      	ldr	r2, [r3, #4]
 8013fc8:	687b      	ldr	r3, [r7, #4]
 8013fca:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8013fcc:	687b      	ldr	r3, [r7, #4]
 8013fce:	693a      	ldr	r2, [r7, #16]
 8013fd0:	621a      	str	r2, [r3, #32]
}
 8013fd2:	bf00      	nop
 8013fd4:	371c      	adds	r7, #28
 8013fd6:	46bd      	mov	sp, r7
 8013fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013fdc:	4770      	bx	lr
 8013fde:	bf00      	nop
 8013fe0:	40012c00 	.word	0x40012c00
 8013fe4:	40013400 	.word	0x40013400
 8013fe8:	40014000 	.word	0x40014000
 8013fec:	40014400 	.word	0x40014400
 8013ff0:	40014800 	.word	0x40014800

08013ff4 <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8013ff4:	b580      	push	{r7, lr}
 8013ff6:	b086      	sub	sp, #24
 8013ff8:	af00      	add	r7, sp, #0
 8013ffa:	6078      	str	r0, [r7, #4]
 8013ffc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8013ffe:	2300      	movs	r3, #0
 8014000:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8014002:	687b      	ldr	r3, [r7, #4]
 8014004:	681b      	ldr	r3, [r3, #0]
 8014006:	689b      	ldr	r3, [r3, #8]
 8014008:	613b      	str	r3, [r7, #16]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 801400a:	693b      	ldr	r3, [r7, #16]
 801400c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8014010:	613b      	str	r3, [r7, #16]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 8014012:	683b      	ldr	r3, [r7, #0]
 8014014:	685b      	ldr	r3, [r3, #4]
 8014016:	693a      	ldr	r2, [r7, #16]
 8014018:	4313      	orrs	r3, r2
 801401a:	613b      	str	r3, [r7, #16]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 801401c:	693b      	ldr	r3, [r7, #16]
 801401e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8014022:	f023 0307 	bic.w	r3, r3, #7
 8014026:	613b      	str	r3, [r7, #16]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 8014028:	683b      	ldr	r3, [r7, #0]
 801402a:	681b      	ldr	r3, [r3, #0]
 801402c:	693a      	ldr	r2, [r7, #16]
 801402e:	4313      	orrs	r3, r2
 8014030:	613b      	str	r3, [r7, #16]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8014032:	687b      	ldr	r3, [r7, #4]
 8014034:	681b      	ldr	r3, [r3, #0]
 8014036:	693a      	ldr	r2, [r7, #16]
 8014038:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 801403a:	683b      	ldr	r3, [r7, #0]
 801403c:	685b      	ldr	r3, [r3, #4]
 801403e:	2b70      	cmp	r3, #112	@ 0x70
 8014040:	d01a      	beq.n	8014078 <TIM_SlaveTimer_SetConfig+0x84>
 8014042:	2b70      	cmp	r3, #112	@ 0x70
 8014044:	d860      	bhi.n	8014108 <TIM_SlaveTimer_SetConfig+0x114>
 8014046:	2b60      	cmp	r3, #96	@ 0x60
 8014048:	d054      	beq.n	80140f4 <TIM_SlaveTimer_SetConfig+0x100>
 801404a:	2b60      	cmp	r3, #96	@ 0x60
 801404c:	d85c      	bhi.n	8014108 <TIM_SlaveTimer_SetConfig+0x114>
 801404e:	2b50      	cmp	r3, #80	@ 0x50
 8014050:	d046      	beq.n	80140e0 <TIM_SlaveTimer_SetConfig+0xec>
 8014052:	2b50      	cmp	r3, #80	@ 0x50
 8014054:	d858      	bhi.n	8014108 <TIM_SlaveTimer_SetConfig+0x114>
 8014056:	2b40      	cmp	r3, #64	@ 0x40
 8014058:	d019      	beq.n	801408e <TIM_SlaveTimer_SetConfig+0x9a>
 801405a:	2b40      	cmp	r3, #64	@ 0x40
 801405c:	d854      	bhi.n	8014108 <TIM_SlaveTimer_SetConfig+0x114>
 801405e:	2b30      	cmp	r3, #48	@ 0x30
 8014060:	d055      	beq.n	801410e <TIM_SlaveTimer_SetConfig+0x11a>
 8014062:	2b30      	cmp	r3, #48	@ 0x30
 8014064:	d850      	bhi.n	8014108 <TIM_SlaveTimer_SetConfig+0x114>
 8014066:	2b20      	cmp	r3, #32
 8014068:	d051      	beq.n	801410e <TIM_SlaveTimer_SetConfig+0x11a>
 801406a:	2b20      	cmp	r3, #32
 801406c:	d84c      	bhi.n	8014108 <TIM_SlaveTimer_SetConfig+0x114>
 801406e:	2b00      	cmp	r3, #0
 8014070:	d04d      	beq.n	801410e <TIM_SlaveTimer_SetConfig+0x11a>
 8014072:	2b10      	cmp	r3, #16
 8014074:	d04b      	beq.n	801410e <TIM_SlaveTimer_SetConfig+0x11a>
 8014076:	e047      	b.n	8014108 <TIM_SlaveTimer_SetConfig+0x114>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPRESCALER(sSlaveConfig->TriggerPrescaler));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
      /* Configure the ETR Trigger source */
      TIM_ETR_SetConfig(htim->Instance,
 8014078:	687b      	ldr	r3, [r7, #4]
 801407a:	6818      	ldr	r0, [r3, #0]
                        sSlaveConfig->TriggerPrescaler,
 801407c:	683b      	ldr	r3, [r7, #0]
 801407e:	68d9      	ldr	r1, [r3, #12]
                        sSlaveConfig->TriggerPolarity,
 8014080:	683b      	ldr	r3, [r7, #0]
 8014082:	689a      	ldr	r2, [r3, #8]
                        sSlaveConfig->TriggerFilter);
 8014084:	683b      	ldr	r3, [r7, #0]
 8014086:	691b      	ldr	r3, [r3, #16]
      TIM_ETR_SetConfig(htim->Instance,
 8014088:	f000 f9e6 	bl	8014458 <TIM_ETR_SetConfig>
      break;
 801408c:	e040      	b.n	8014110 <TIM_SlaveTimer_SetConfig+0x11c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      if (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 801408e:	683b      	ldr	r3, [r7, #0]
 8014090:	681b      	ldr	r3, [r3, #0]
 8014092:	2b05      	cmp	r3, #5
 8014094:	d101      	bne.n	801409a <TIM_SlaveTimer_SetConfig+0xa6>
      {
        return HAL_ERROR;
 8014096:	2301      	movs	r3, #1
 8014098:	e03b      	b.n	8014112 <TIM_SlaveTimer_SetConfig+0x11e>
      }

      /* Disable the Channel 1: Reset the CC1E Bit */
      tmpccer = htim->Instance->CCER;
 801409a:	687b      	ldr	r3, [r7, #4]
 801409c:	681b      	ldr	r3, [r3, #0]
 801409e:	6a1b      	ldr	r3, [r3, #32]
 80140a0:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 80140a2:	687b      	ldr	r3, [r7, #4]
 80140a4:	681b      	ldr	r3, [r3, #0]
 80140a6:	6a1a      	ldr	r2, [r3, #32]
 80140a8:	687b      	ldr	r3, [r7, #4]
 80140aa:	681b      	ldr	r3, [r3, #0]
 80140ac:	f022 0201 	bic.w	r2, r2, #1
 80140b0:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 80140b2:	687b      	ldr	r3, [r7, #4]
 80140b4:	681b      	ldr	r3, [r3, #0]
 80140b6:	699b      	ldr	r3, [r3, #24]
 80140b8:	60bb      	str	r3, [r7, #8]

      /* Set the filter */
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80140ba:	68bb      	ldr	r3, [r7, #8]
 80140bc:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80140c0:	60bb      	str	r3, [r7, #8]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 80140c2:	683b      	ldr	r3, [r7, #0]
 80140c4:	691b      	ldr	r3, [r3, #16]
 80140c6:	011b      	lsls	r3, r3, #4
 80140c8:	68ba      	ldr	r2, [r7, #8]
 80140ca:	4313      	orrs	r3, r2
 80140cc:	60bb      	str	r3, [r7, #8]

      /* Write to TIMx CCMR1 and CCER registers */
      htim->Instance->CCMR1 = tmpccmr1;
 80140ce:	687b      	ldr	r3, [r7, #4]
 80140d0:	681b      	ldr	r3, [r3, #0]
 80140d2:	68ba      	ldr	r2, [r7, #8]
 80140d4:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 80140d6:	687b      	ldr	r3, [r7, #4]
 80140d8:	681b      	ldr	r3, [r3, #0]
 80140da:	68fa      	ldr	r2, [r7, #12]
 80140dc:	621a      	str	r2, [r3, #32]
      break;
 80140de:	e017      	b.n	8014110 <TIM_SlaveTimer_SetConfig+0x11c>
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI1 Filter and Polarity */
      TIM_TI1_ConfigInputStage(htim->Instance,
 80140e0:	687b      	ldr	r3, [r7, #4]
 80140e2:	6818      	ldr	r0, [r3, #0]
                               sSlaveConfig->TriggerPolarity,
 80140e4:	683b      	ldr	r3, [r7, #0]
 80140e6:	6899      	ldr	r1, [r3, #8]
                               sSlaveConfig->TriggerFilter);
 80140e8:	683b      	ldr	r3, [r7, #0]
 80140ea:	691b      	ldr	r3, [r3, #16]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80140ec:	461a      	mov	r2, r3
 80140ee:	f000 f883 	bl	80141f8 <TIM_TI1_ConfigInputStage>
      break;
 80140f2:	e00d      	b.n	8014110 <TIM_SlaveTimer_SetConfig+0x11c>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI2 Filter and Polarity */
      TIM_TI2_ConfigInputStage(htim->Instance,
 80140f4:	687b      	ldr	r3, [r7, #4]
 80140f6:	6818      	ldr	r0, [r3, #0]
                               sSlaveConfig->TriggerPolarity,
 80140f8:	683b      	ldr	r3, [r7, #0]
 80140fa:	6899      	ldr	r1, [r3, #8]
                               sSlaveConfig->TriggerFilter);
 80140fc:	683b      	ldr	r3, [r7, #0]
 80140fe:	691b      	ldr	r3, [r3, #16]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8014100:	461a      	mov	r2, r3
 8014102:	f000 f8e5 	bl	80142d0 <TIM_TI2_ConfigInputStage>
      break;
 8014106:	e003      	b.n	8014110 <TIM_SlaveTimer_SetConfig+0x11c>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      break;
    }

    default:
      status = HAL_ERROR;
 8014108:	2301      	movs	r3, #1
 801410a:	75fb      	strb	r3, [r7, #23]
      break;
 801410c:	e000      	b.n	8014110 <TIM_SlaveTimer_SetConfig+0x11c>
      break;
 801410e:	bf00      	nop
  }

  return status;
 8014110:	7dfb      	ldrb	r3, [r7, #23]
}
 8014112:	4618      	mov	r0, r3
 8014114:	3718      	adds	r7, #24
 8014116:	46bd      	mov	sp, r7
 8014118:	bd80      	pop	{r7, pc}
	...

0801411c <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 801411c:	b480      	push	{r7}
 801411e:	b087      	sub	sp, #28
 8014120:	af00      	add	r7, sp, #0
 8014122:	60f8      	str	r0, [r7, #12]
 8014124:	60b9      	str	r1, [r7, #8]
 8014126:	607a      	str	r2, [r7, #4]
 8014128:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 801412a:	68fb      	ldr	r3, [r7, #12]
 801412c:	6a1b      	ldr	r3, [r3, #32]
 801412e:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8014130:	68fb      	ldr	r3, [r7, #12]
 8014132:	6a1b      	ldr	r3, [r3, #32]
 8014134:	f023 0201 	bic.w	r2, r3, #1
 8014138:	68fb      	ldr	r3, [r7, #12]
 801413a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 801413c:	68fb      	ldr	r3, [r7, #12]
 801413e:	699b      	ldr	r3, [r3, #24]
 8014140:	617b      	str	r3, [r7, #20]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8014142:	68fb      	ldr	r3, [r7, #12]
 8014144:	4a26      	ldr	r2, [pc, #152]	@ (80141e0 <TIM_TI1_SetConfig+0xc4>)
 8014146:	4293      	cmp	r3, r2
 8014148:	d017      	beq.n	801417a <TIM_TI1_SetConfig+0x5e>
 801414a:	68fb      	ldr	r3, [r7, #12]
 801414c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8014150:	d013      	beq.n	801417a <TIM_TI1_SetConfig+0x5e>
 8014152:	68fb      	ldr	r3, [r7, #12]
 8014154:	4a23      	ldr	r2, [pc, #140]	@ (80141e4 <TIM_TI1_SetConfig+0xc8>)
 8014156:	4293      	cmp	r3, r2
 8014158:	d00f      	beq.n	801417a <TIM_TI1_SetConfig+0x5e>
 801415a:	68fb      	ldr	r3, [r7, #12]
 801415c:	4a22      	ldr	r2, [pc, #136]	@ (80141e8 <TIM_TI1_SetConfig+0xcc>)
 801415e:	4293      	cmp	r3, r2
 8014160:	d00b      	beq.n	801417a <TIM_TI1_SetConfig+0x5e>
 8014162:	68fb      	ldr	r3, [r7, #12]
 8014164:	4a21      	ldr	r2, [pc, #132]	@ (80141ec <TIM_TI1_SetConfig+0xd0>)
 8014166:	4293      	cmp	r3, r2
 8014168:	d007      	beq.n	801417a <TIM_TI1_SetConfig+0x5e>
 801416a:	68fb      	ldr	r3, [r7, #12]
 801416c:	4a20      	ldr	r2, [pc, #128]	@ (80141f0 <TIM_TI1_SetConfig+0xd4>)
 801416e:	4293      	cmp	r3, r2
 8014170:	d003      	beq.n	801417a <TIM_TI1_SetConfig+0x5e>
 8014172:	68fb      	ldr	r3, [r7, #12]
 8014174:	4a1f      	ldr	r2, [pc, #124]	@ (80141f4 <TIM_TI1_SetConfig+0xd8>)
 8014176:	4293      	cmp	r3, r2
 8014178:	d101      	bne.n	801417e <TIM_TI1_SetConfig+0x62>
 801417a:	2301      	movs	r3, #1
 801417c:	e000      	b.n	8014180 <TIM_TI1_SetConfig+0x64>
 801417e:	2300      	movs	r3, #0
 8014180:	2b00      	cmp	r3, #0
 8014182:	d008      	beq.n	8014196 <TIM_TI1_SetConfig+0x7a>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8014184:	697b      	ldr	r3, [r7, #20]
 8014186:	f023 0303 	bic.w	r3, r3, #3
 801418a:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 801418c:	697a      	ldr	r2, [r7, #20]
 801418e:	687b      	ldr	r3, [r7, #4]
 8014190:	4313      	orrs	r3, r2
 8014192:	617b      	str	r3, [r7, #20]
 8014194:	e003      	b.n	801419e <TIM_TI1_SetConfig+0x82>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8014196:	697b      	ldr	r3, [r7, #20]
 8014198:	f043 0301 	orr.w	r3, r3, #1
 801419c:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 801419e:	697b      	ldr	r3, [r7, #20]
 80141a0:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80141a4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 80141a6:	683b      	ldr	r3, [r7, #0]
 80141a8:	011b      	lsls	r3, r3, #4
 80141aa:	b2db      	uxtb	r3, r3
 80141ac:	697a      	ldr	r2, [r7, #20]
 80141ae:	4313      	orrs	r3, r2
 80141b0:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80141b2:	693b      	ldr	r3, [r7, #16]
 80141b4:	f023 030a 	bic.w	r3, r3, #10
 80141b8:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 80141ba:	68bb      	ldr	r3, [r7, #8]
 80141bc:	f003 030a 	and.w	r3, r3, #10
 80141c0:	693a      	ldr	r2, [r7, #16]
 80141c2:	4313      	orrs	r3, r2
 80141c4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80141c6:	68fb      	ldr	r3, [r7, #12]
 80141c8:	697a      	ldr	r2, [r7, #20]
 80141ca:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80141cc:	68fb      	ldr	r3, [r7, #12]
 80141ce:	693a      	ldr	r2, [r7, #16]
 80141d0:	621a      	str	r2, [r3, #32]
}
 80141d2:	bf00      	nop
 80141d4:	371c      	adds	r7, #28
 80141d6:	46bd      	mov	sp, r7
 80141d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80141dc:	4770      	bx	lr
 80141de:	bf00      	nop
 80141e0:	40012c00 	.word	0x40012c00
 80141e4:	40000400 	.word	0x40000400
 80141e8:	40000800 	.word	0x40000800
 80141ec:	40000c00 	.word	0x40000c00
 80141f0:	40013400 	.word	0x40013400
 80141f4:	40014000 	.word	0x40014000

080141f8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80141f8:	b480      	push	{r7}
 80141fa:	b087      	sub	sp, #28
 80141fc:	af00      	add	r7, sp, #0
 80141fe:	60f8      	str	r0, [r7, #12]
 8014200:	60b9      	str	r1, [r7, #8]
 8014202:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8014204:	68fb      	ldr	r3, [r7, #12]
 8014206:	6a1b      	ldr	r3, [r3, #32]
 8014208:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 801420a:	68fb      	ldr	r3, [r7, #12]
 801420c:	6a1b      	ldr	r3, [r3, #32]
 801420e:	f023 0201 	bic.w	r2, r3, #1
 8014212:	68fb      	ldr	r3, [r7, #12]
 8014214:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8014216:	68fb      	ldr	r3, [r7, #12]
 8014218:	699b      	ldr	r3, [r3, #24]
 801421a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 801421c:	693b      	ldr	r3, [r7, #16]
 801421e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8014222:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8014224:	687b      	ldr	r3, [r7, #4]
 8014226:	011b      	lsls	r3, r3, #4
 8014228:	693a      	ldr	r2, [r7, #16]
 801422a:	4313      	orrs	r3, r2
 801422c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 801422e:	697b      	ldr	r3, [r7, #20]
 8014230:	f023 030a 	bic.w	r3, r3, #10
 8014234:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8014236:	697a      	ldr	r2, [r7, #20]
 8014238:	68bb      	ldr	r3, [r7, #8]
 801423a:	4313      	orrs	r3, r2
 801423c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 801423e:	68fb      	ldr	r3, [r7, #12]
 8014240:	693a      	ldr	r2, [r7, #16]
 8014242:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8014244:	68fb      	ldr	r3, [r7, #12]
 8014246:	697a      	ldr	r2, [r7, #20]
 8014248:	621a      	str	r2, [r3, #32]
}
 801424a:	bf00      	nop
 801424c:	371c      	adds	r7, #28
 801424e:	46bd      	mov	sp, r7
 8014250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014254:	4770      	bx	lr

08014256 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8014256:	b480      	push	{r7}
 8014258:	b087      	sub	sp, #28
 801425a:	af00      	add	r7, sp, #0
 801425c:	60f8      	str	r0, [r7, #12]
 801425e:	60b9      	str	r1, [r7, #8]
 8014260:	607a      	str	r2, [r7, #4]
 8014262:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8014264:	68fb      	ldr	r3, [r7, #12]
 8014266:	6a1b      	ldr	r3, [r3, #32]
 8014268:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 801426a:	68fb      	ldr	r3, [r7, #12]
 801426c:	6a1b      	ldr	r3, [r3, #32]
 801426e:	f023 0210 	bic.w	r2, r3, #16
 8014272:	68fb      	ldr	r3, [r7, #12]
 8014274:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8014276:	68fb      	ldr	r3, [r7, #12]
 8014278:	699b      	ldr	r3, [r3, #24]
 801427a:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 801427c:	693b      	ldr	r3, [r7, #16]
 801427e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8014282:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8014284:	687b      	ldr	r3, [r7, #4]
 8014286:	021b      	lsls	r3, r3, #8
 8014288:	693a      	ldr	r2, [r7, #16]
 801428a:	4313      	orrs	r3, r2
 801428c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 801428e:	693b      	ldr	r3, [r7, #16]
 8014290:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8014294:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8014296:	683b      	ldr	r3, [r7, #0]
 8014298:	031b      	lsls	r3, r3, #12
 801429a:	b29b      	uxth	r3, r3
 801429c:	693a      	ldr	r2, [r7, #16]
 801429e:	4313      	orrs	r3, r2
 80142a0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80142a2:	697b      	ldr	r3, [r7, #20]
 80142a4:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80142a8:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 80142aa:	68bb      	ldr	r3, [r7, #8]
 80142ac:	011b      	lsls	r3, r3, #4
 80142ae:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
 80142b2:	697a      	ldr	r2, [r7, #20]
 80142b4:	4313      	orrs	r3, r2
 80142b6:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80142b8:	68fb      	ldr	r3, [r7, #12]
 80142ba:	693a      	ldr	r2, [r7, #16]
 80142bc:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80142be:	68fb      	ldr	r3, [r7, #12]
 80142c0:	697a      	ldr	r2, [r7, #20]
 80142c2:	621a      	str	r2, [r3, #32]
}
 80142c4:	bf00      	nop
 80142c6:	371c      	adds	r7, #28
 80142c8:	46bd      	mov	sp, r7
 80142ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80142ce:	4770      	bx	lr

080142d0 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80142d0:	b480      	push	{r7}
 80142d2:	b087      	sub	sp, #28
 80142d4:	af00      	add	r7, sp, #0
 80142d6:	60f8      	str	r0, [r7, #12]
 80142d8:	60b9      	str	r1, [r7, #8]
 80142da:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80142dc:	68fb      	ldr	r3, [r7, #12]
 80142de:	6a1b      	ldr	r3, [r3, #32]
 80142e0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80142e2:	68fb      	ldr	r3, [r7, #12]
 80142e4:	6a1b      	ldr	r3, [r3, #32]
 80142e6:	f023 0210 	bic.w	r2, r3, #16
 80142ea:	68fb      	ldr	r3, [r7, #12]
 80142ec:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80142ee:	68fb      	ldr	r3, [r7, #12]
 80142f0:	699b      	ldr	r3, [r3, #24]
 80142f2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80142f4:	693b      	ldr	r3, [r7, #16]
 80142f6:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80142fa:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80142fc:	687b      	ldr	r3, [r7, #4]
 80142fe:	031b      	lsls	r3, r3, #12
 8014300:	693a      	ldr	r2, [r7, #16]
 8014302:	4313      	orrs	r3, r2
 8014304:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8014306:	697b      	ldr	r3, [r7, #20]
 8014308:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 801430c:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 801430e:	68bb      	ldr	r3, [r7, #8]
 8014310:	011b      	lsls	r3, r3, #4
 8014312:	697a      	ldr	r2, [r7, #20]
 8014314:	4313      	orrs	r3, r2
 8014316:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8014318:	68fb      	ldr	r3, [r7, #12]
 801431a:	693a      	ldr	r2, [r7, #16]
 801431c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 801431e:	68fb      	ldr	r3, [r7, #12]
 8014320:	697a      	ldr	r2, [r7, #20]
 8014322:	621a      	str	r2, [r3, #32]
}
 8014324:	bf00      	nop
 8014326:	371c      	adds	r7, #28
 8014328:	46bd      	mov	sp, r7
 801432a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801432e:	4770      	bx	lr

08014330 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8014330:	b480      	push	{r7}
 8014332:	b087      	sub	sp, #28
 8014334:	af00      	add	r7, sp, #0
 8014336:	60f8      	str	r0, [r7, #12]
 8014338:	60b9      	str	r1, [r7, #8]
 801433a:	607a      	str	r2, [r7, #4]
 801433c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  tmpccer = TIMx->CCER;
 801433e:	68fb      	ldr	r3, [r7, #12]
 8014340:	6a1b      	ldr	r3, [r3, #32]
 8014342:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8014344:	68fb      	ldr	r3, [r7, #12]
 8014346:	6a1b      	ldr	r3, [r3, #32]
 8014348:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 801434c:	68fb      	ldr	r3, [r7, #12]
 801434e:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8014350:	68fb      	ldr	r3, [r7, #12]
 8014352:	69db      	ldr	r3, [r3, #28]
 8014354:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8014356:	693b      	ldr	r3, [r7, #16]
 8014358:	f023 0303 	bic.w	r3, r3, #3
 801435c:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= TIM_ICSelection;
 801435e:	693a      	ldr	r2, [r7, #16]
 8014360:	687b      	ldr	r3, [r7, #4]
 8014362:	4313      	orrs	r3, r2
 8014364:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8014366:	693b      	ldr	r3, [r7, #16]
 8014368:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 801436c:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 801436e:	683b      	ldr	r3, [r7, #0]
 8014370:	011b      	lsls	r3, r3, #4
 8014372:	b2db      	uxtb	r3, r3
 8014374:	693a      	ldr	r2, [r7, #16]
 8014376:	4313      	orrs	r3, r2
 8014378:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 801437a:	697b      	ldr	r3, [r7, #20]
 801437c:	f423 6320 	bic.w	r3, r3, #2560	@ 0xa00
 8014380:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8014382:	68bb      	ldr	r3, [r7, #8]
 8014384:	021b      	lsls	r3, r3, #8
 8014386:	f403 6320 	and.w	r3, r3, #2560	@ 0xa00
 801438a:	697a      	ldr	r2, [r7, #20]
 801438c:	4313      	orrs	r3, r2
 801438e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8014390:	68fb      	ldr	r3, [r7, #12]
 8014392:	693a      	ldr	r2, [r7, #16]
 8014394:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8014396:	68fb      	ldr	r3, [r7, #12]
 8014398:	697a      	ldr	r2, [r7, #20]
 801439a:	621a      	str	r2, [r3, #32]
}
 801439c:	bf00      	nop
 801439e:	371c      	adds	r7, #28
 80143a0:	46bd      	mov	sp, r7
 80143a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80143a6:	4770      	bx	lr

080143a8 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80143a8:	b480      	push	{r7}
 80143aa:	b087      	sub	sp, #28
 80143ac:	af00      	add	r7, sp, #0
 80143ae:	60f8      	str	r0, [r7, #12]
 80143b0:	60b9      	str	r1, [r7, #8]
 80143b2:	607a      	str	r2, [r7, #4]
 80143b4:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  tmpccer = TIMx->CCER;
 80143b6:	68fb      	ldr	r3, [r7, #12]
 80143b8:	6a1b      	ldr	r3, [r3, #32]
 80143ba:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80143bc:	68fb      	ldr	r3, [r7, #12]
 80143be:	6a1b      	ldr	r3, [r3, #32]
 80143c0:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80143c4:	68fb      	ldr	r3, [r7, #12]
 80143c6:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80143c8:	68fb      	ldr	r3, [r7, #12]
 80143ca:	69db      	ldr	r3, [r3, #28]
 80143cc:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 80143ce:	693b      	ldr	r3, [r7, #16]
 80143d0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80143d4:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 80143d6:	687b      	ldr	r3, [r7, #4]
 80143d8:	021b      	lsls	r3, r3, #8
 80143da:	693a      	ldr	r2, [r7, #16]
 80143dc:	4313      	orrs	r3, r2
 80143de:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 80143e0:	693b      	ldr	r3, [r7, #16]
 80143e2:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80143e6:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 80143e8:	683b      	ldr	r3, [r7, #0]
 80143ea:	031b      	lsls	r3, r3, #12
 80143ec:	b29b      	uxth	r3, r3
 80143ee:	693a      	ldr	r2, [r7, #16]
 80143f0:	4313      	orrs	r3, r2
 80143f2:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 80143f4:	697b      	ldr	r3, [r7, #20]
 80143f6:	f423 4320 	bic.w	r3, r3, #40960	@ 0xa000
 80143fa:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 80143fc:	68bb      	ldr	r3, [r7, #8]
 80143fe:	031b      	lsls	r3, r3, #12
 8014400:	f403 4320 	and.w	r3, r3, #40960	@ 0xa000
 8014404:	697a      	ldr	r2, [r7, #20]
 8014406:	4313      	orrs	r3, r2
 8014408:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 801440a:	68fb      	ldr	r3, [r7, #12]
 801440c:	693a      	ldr	r2, [r7, #16]
 801440e:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8014410:	68fb      	ldr	r3, [r7, #12]
 8014412:	697a      	ldr	r2, [r7, #20]
 8014414:	621a      	str	r2, [r3, #32]
}
 8014416:	bf00      	nop
 8014418:	371c      	adds	r7, #28
 801441a:	46bd      	mov	sp, r7
 801441c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014420:	4770      	bx	lr

08014422 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8014422:	b480      	push	{r7}
 8014424:	b085      	sub	sp, #20
 8014426:	af00      	add	r7, sp, #0
 8014428:	6078      	str	r0, [r7, #4]
 801442a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 801442c:	687b      	ldr	r3, [r7, #4]
 801442e:	689b      	ldr	r3, [r3, #8]
 8014430:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8014432:	68fb      	ldr	r3, [r7, #12]
 8014434:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8014438:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 801443a:	683a      	ldr	r2, [r7, #0]
 801443c:	68fb      	ldr	r3, [r7, #12]
 801443e:	4313      	orrs	r3, r2
 8014440:	f043 0307 	orr.w	r3, r3, #7
 8014444:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8014446:	687b      	ldr	r3, [r7, #4]
 8014448:	68fa      	ldr	r2, [r7, #12]
 801444a:	609a      	str	r2, [r3, #8]
}
 801444c:	bf00      	nop
 801444e:	3714      	adds	r7, #20
 8014450:	46bd      	mov	sp, r7
 8014452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014456:	4770      	bx	lr

08014458 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8014458:	b480      	push	{r7}
 801445a:	b087      	sub	sp, #28
 801445c:	af00      	add	r7, sp, #0
 801445e:	60f8      	str	r0, [r7, #12]
 8014460:	60b9      	str	r1, [r7, #8]
 8014462:	607a      	str	r2, [r7, #4]
 8014464:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8014466:	68fb      	ldr	r3, [r7, #12]
 8014468:	689b      	ldr	r3, [r3, #8]
 801446a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 801446c:	697b      	ldr	r3, [r7, #20]
 801446e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8014472:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8014474:	683b      	ldr	r3, [r7, #0]
 8014476:	021a      	lsls	r2, r3, #8
 8014478:	687b      	ldr	r3, [r7, #4]
 801447a:	431a      	orrs	r2, r3
 801447c:	68bb      	ldr	r3, [r7, #8]
 801447e:	4313      	orrs	r3, r2
 8014480:	697a      	ldr	r2, [r7, #20]
 8014482:	4313      	orrs	r3, r2
 8014484:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8014486:	68fb      	ldr	r3, [r7, #12]
 8014488:	697a      	ldr	r2, [r7, #20]
 801448a:	609a      	str	r2, [r3, #8]
}
 801448c:	bf00      	nop
 801448e:	371c      	adds	r7, #28
 8014490:	46bd      	mov	sp, r7
 8014492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014496:	4770      	bx	lr

08014498 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8014498:	b480      	push	{r7}
 801449a:	b087      	sub	sp, #28
 801449c:	af00      	add	r7, sp, #0
 801449e:	60f8      	str	r0, [r7, #12]
 80144a0:	60b9      	str	r1, [r7, #8]
 80144a2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80144a4:	68bb      	ldr	r3, [r7, #8]
 80144a6:	f003 031f 	and.w	r3, r3, #31
 80144aa:	2201      	movs	r2, #1
 80144ac:	fa02 f303 	lsl.w	r3, r2, r3
 80144b0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80144b2:	68fb      	ldr	r3, [r7, #12]
 80144b4:	6a1a      	ldr	r2, [r3, #32]
 80144b6:	697b      	ldr	r3, [r7, #20]
 80144b8:	43db      	mvns	r3, r3
 80144ba:	401a      	ands	r2, r3
 80144bc:	68fb      	ldr	r3, [r7, #12]
 80144be:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80144c0:	68fb      	ldr	r3, [r7, #12]
 80144c2:	6a1a      	ldr	r2, [r3, #32]
 80144c4:	68bb      	ldr	r3, [r7, #8]
 80144c6:	f003 031f 	and.w	r3, r3, #31
 80144ca:	6879      	ldr	r1, [r7, #4]
 80144cc:	fa01 f303 	lsl.w	r3, r1, r3
 80144d0:	431a      	orrs	r2, r3
 80144d2:	68fb      	ldr	r3, [r7, #12]
 80144d4:	621a      	str	r2, [r3, #32]
}
 80144d6:	bf00      	nop
 80144d8:	371c      	adds	r7, #28
 80144da:	46bd      	mov	sp, r7
 80144dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80144e0:	4770      	bx	lr
	...

080144e4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80144e4:	b480      	push	{r7}
 80144e6:	b085      	sub	sp, #20
 80144e8:	af00      	add	r7, sp, #0
 80144ea:	6078      	str	r0, [r7, #4]
 80144ec:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80144ee:	687b      	ldr	r3, [r7, #4]
 80144f0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80144f4:	2b01      	cmp	r3, #1
 80144f6:	d101      	bne.n	80144fc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80144f8:	2302      	movs	r3, #2
 80144fa:	e068      	b.n	80145ce <HAL_TIMEx_MasterConfigSynchronization+0xea>
 80144fc:	687b      	ldr	r3, [r7, #4]
 80144fe:	2201      	movs	r2, #1
 8014500:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8014504:	687b      	ldr	r3, [r7, #4]
 8014506:	2202      	movs	r2, #2
 8014508:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 801450c:	687b      	ldr	r3, [r7, #4]
 801450e:	681b      	ldr	r3, [r3, #0]
 8014510:	685b      	ldr	r3, [r3, #4]
 8014512:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8014514:	687b      	ldr	r3, [r7, #4]
 8014516:	681b      	ldr	r3, [r3, #0]
 8014518:	689b      	ldr	r3, [r3, #8]
 801451a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 801451c:	687b      	ldr	r3, [r7, #4]
 801451e:	681b      	ldr	r3, [r3, #0]
 8014520:	4a2e      	ldr	r2, [pc, #184]	@ (80145dc <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8014522:	4293      	cmp	r3, r2
 8014524:	d004      	beq.n	8014530 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8014526:	687b      	ldr	r3, [r7, #4]
 8014528:	681b      	ldr	r3, [r3, #0]
 801452a:	4a2d      	ldr	r2, [pc, #180]	@ (80145e0 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 801452c:	4293      	cmp	r3, r2
 801452e:	d108      	bne.n	8014542 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8014530:	68fb      	ldr	r3, [r7, #12]
 8014532:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8014536:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8014538:	683b      	ldr	r3, [r7, #0]
 801453a:	685b      	ldr	r3, [r3, #4]
 801453c:	68fa      	ldr	r2, [r7, #12]
 801453e:	4313      	orrs	r3, r2
 8014540:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8014542:	68fb      	ldr	r3, [r7, #12]
 8014544:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8014548:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 801454a:	683b      	ldr	r3, [r7, #0]
 801454c:	681b      	ldr	r3, [r3, #0]
 801454e:	68fa      	ldr	r2, [r7, #12]
 8014550:	4313      	orrs	r3, r2
 8014552:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8014554:	687b      	ldr	r3, [r7, #4]
 8014556:	681b      	ldr	r3, [r3, #0]
 8014558:	68fa      	ldr	r2, [r7, #12]
 801455a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 801455c:	687b      	ldr	r3, [r7, #4]
 801455e:	681b      	ldr	r3, [r3, #0]
 8014560:	4a1e      	ldr	r2, [pc, #120]	@ (80145dc <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8014562:	4293      	cmp	r3, r2
 8014564:	d01d      	beq.n	80145a2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8014566:	687b      	ldr	r3, [r7, #4]
 8014568:	681b      	ldr	r3, [r3, #0]
 801456a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 801456e:	d018      	beq.n	80145a2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8014570:	687b      	ldr	r3, [r7, #4]
 8014572:	681b      	ldr	r3, [r3, #0]
 8014574:	4a1b      	ldr	r2, [pc, #108]	@ (80145e4 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8014576:	4293      	cmp	r3, r2
 8014578:	d013      	beq.n	80145a2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 801457a:	687b      	ldr	r3, [r7, #4]
 801457c:	681b      	ldr	r3, [r3, #0]
 801457e:	4a1a      	ldr	r2, [pc, #104]	@ (80145e8 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8014580:	4293      	cmp	r3, r2
 8014582:	d00e      	beq.n	80145a2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8014584:	687b      	ldr	r3, [r7, #4]
 8014586:	681b      	ldr	r3, [r3, #0]
 8014588:	4a18      	ldr	r2, [pc, #96]	@ (80145ec <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 801458a:	4293      	cmp	r3, r2
 801458c:	d009      	beq.n	80145a2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 801458e:	687b      	ldr	r3, [r7, #4]
 8014590:	681b      	ldr	r3, [r3, #0]
 8014592:	4a13      	ldr	r2, [pc, #76]	@ (80145e0 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8014594:	4293      	cmp	r3, r2
 8014596:	d004      	beq.n	80145a2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8014598:	687b      	ldr	r3, [r7, #4]
 801459a:	681b      	ldr	r3, [r3, #0]
 801459c:	4a14      	ldr	r2, [pc, #80]	@ (80145f0 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 801459e:	4293      	cmp	r3, r2
 80145a0:	d10c      	bne.n	80145bc <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80145a2:	68bb      	ldr	r3, [r7, #8]
 80145a4:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80145a8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80145aa:	683b      	ldr	r3, [r7, #0]
 80145ac:	689b      	ldr	r3, [r3, #8]
 80145ae:	68ba      	ldr	r2, [r7, #8]
 80145b0:	4313      	orrs	r3, r2
 80145b2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80145b4:	687b      	ldr	r3, [r7, #4]
 80145b6:	681b      	ldr	r3, [r3, #0]
 80145b8:	68ba      	ldr	r2, [r7, #8]
 80145ba:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80145bc:	687b      	ldr	r3, [r7, #4]
 80145be:	2201      	movs	r2, #1
 80145c0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80145c4:	687b      	ldr	r3, [r7, #4]
 80145c6:	2200      	movs	r2, #0
 80145c8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80145cc:	2300      	movs	r3, #0
}
 80145ce:	4618      	mov	r0, r3
 80145d0:	3714      	adds	r7, #20
 80145d2:	46bd      	mov	sp, r7
 80145d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80145d8:	4770      	bx	lr
 80145da:	bf00      	nop
 80145dc:	40012c00 	.word	0x40012c00
 80145e0:	40013400 	.word	0x40013400
 80145e4:	40000400 	.word	0x40000400
 80145e8:	40000800 	.word	0x40000800
 80145ec:	40000c00 	.word	0x40000c00
 80145f0:	40014000 	.word	0x40014000

080145f4 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80145f4:	b480      	push	{r7}
 80145f6:	b085      	sub	sp, #20
 80145f8:	af00      	add	r7, sp, #0
 80145fa:	6078      	str	r0, [r7, #4]
 80145fc:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80145fe:	2300      	movs	r3, #0
 8014600:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8014602:	687b      	ldr	r3, [r7, #4]
 8014604:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8014608:	2b01      	cmp	r3, #1
 801460a:	d101      	bne.n	8014610 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 801460c:	2302      	movs	r3, #2
 801460e:	e065      	b.n	80146dc <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 8014610:	687b      	ldr	r3, [r7, #4]
 8014612:	2201      	movs	r2, #1
 8014614:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8014618:	68fb      	ldr	r3, [r7, #12]
 801461a:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 801461e:	683b      	ldr	r3, [r7, #0]
 8014620:	68db      	ldr	r3, [r3, #12]
 8014622:	4313      	orrs	r3, r2
 8014624:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8014626:	68fb      	ldr	r3, [r7, #12]
 8014628:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 801462c:	683b      	ldr	r3, [r7, #0]
 801462e:	689b      	ldr	r3, [r3, #8]
 8014630:	4313      	orrs	r3, r2
 8014632:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8014634:	68fb      	ldr	r3, [r7, #12]
 8014636:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 801463a:	683b      	ldr	r3, [r7, #0]
 801463c:	685b      	ldr	r3, [r3, #4]
 801463e:	4313      	orrs	r3, r2
 8014640:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8014642:	68fb      	ldr	r3, [r7, #12]
 8014644:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8014648:	683b      	ldr	r3, [r7, #0]
 801464a:	681b      	ldr	r3, [r3, #0]
 801464c:	4313      	orrs	r3, r2
 801464e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8014650:	68fb      	ldr	r3, [r7, #12]
 8014652:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8014656:	683b      	ldr	r3, [r7, #0]
 8014658:	691b      	ldr	r3, [r3, #16]
 801465a:	4313      	orrs	r3, r2
 801465c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 801465e:	68fb      	ldr	r3, [r7, #12]
 8014660:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8014664:	683b      	ldr	r3, [r7, #0]
 8014666:	695b      	ldr	r3, [r3, #20]
 8014668:	4313      	orrs	r3, r2
 801466a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 801466c:	68fb      	ldr	r3, [r7, #12]
 801466e:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8014672:	683b      	ldr	r3, [r7, #0]
 8014674:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8014676:	4313      	orrs	r3, r2
 8014678:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 801467a:	68fb      	ldr	r3, [r7, #12]
 801467c:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 8014680:	683b      	ldr	r3, [r7, #0]
 8014682:	699b      	ldr	r3, [r3, #24]
 8014684:	041b      	lsls	r3, r3, #16
 8014686:	4313      	orrs	r3, r2
 8014688:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 801468a:	687b      	ldr	r3, [r7, #4]
 801468c:	681b      	ldr	r3, [r3, #0]
 801468e:	4a16      	ldr	r2, [pc, #88]	@ (80146e8 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 8014690:	4293      	cmp	r3, r2
 8014692:	d004      	beq.n	801469e <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 8014694:	687b      	ldr	r3, [r7, #4]
 8014696:	681b      	ldr	r3, [r3, #0]
 8014698:	4a14      	ldr	r2, [pc, #80]	@ (80146ec <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 801469a:	4293      	cmp	r3, r2
 801469c:	d115      	bne.n	80146ca <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 801469e:	68fb      	ldr	r3, [r7, #12]
 80146a0:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 80146a4:	683b      	ldr	r3, [r7, #0]
 80146a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80146a8:	051b      	lsls	r3, r3, #20
 80146aa:	4313      	orrs	r3, r2
 80146ac:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 80146ae:	68fb      	ldr	r3, [r7, #12]
 80146b0:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 80146b4:	683b      	ldr	r3, [r7, #0]
 80146b6:	69db      	ldr	r3, [r3, #28]
 80146b8:	4313      	orrs	r3, r2
 80146ba:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 80146bc:	68fb      	ldr	r3, [r7, #12]
 80146be:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 80146c2:	683b      	ldr	r3, [r7, #0]
 80146c4:	6a1b      	ldr	r3, [r3, #32]
 80146c6:	4313      	orrs	r3, r2
 80146c8:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80146ca:	687b      	ldr	r3, [r7, #4]
 80146cc:	681b      	ldr	r3, [r3, #0]
 80146ce:	68fa      	ldr	r2, [r7, #12]
 80146d0:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 80146d2:	687b      	ldr	r3, [r7, #4]
 80146d4:	2200      	movs	r2, #0
 80146d6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80146da:	2300      	movs	r3, #0
}
 80146dc:	4618      	mov	r0, r3
 80146de:	3714      	adds	r7, #20
 80146e0:	46bd      	mov	sp, r7
 80146e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80146e6:	4770      	bx	lr
 80146e8:	40012c00 	.word	0x40012c00
 80146ec:	40013400 	.word	0x40013400

080146f0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80146f0:	b580      	push	{r7, lr}
 80146f2:	b082      	sub	sp, #8
 80146f4:	af00      	add	r7, sp, #0
 80146f6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80146f8:	687b      	ldr	r3, [r7, #4]
 80146fa:	2b00      	cmp	r3, #0
 80146fc:	d101      	bne.n	8014702 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80146fe:	2301      	movs	r3, #1
 8014700:	e040      	b.n	8014784 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8014702:	687b      	ldr	r3, [r7, #4]
 8014704:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8014706:	2b00      	cmp	r3, #0
 8014708:	d106      	bne.n	8014718 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 801470a:	687b      	ldr	r3, [r7, #4]
 801470c:	2200      	movs	r2, #0
 801470e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8014712:	6878      	ldr	r0, [r7, #4]
 8014714:	f7f3 f8b0 	bl	8007878 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8014718:	687b      	ldr	r3, [r7, #4]
 801471a:	2224      	movs	r2, #36	@ 0x24
 801471c:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 801471e:	687b      	ldr	r3, [r7, #4]
 8014720:	681b      	ldr	r3, [r3, #0]
 8014722:	681a      	ldr	r2, [r3, #0]
 8014724:	687b      	ldr	r3, [r7, #4]
 8014726:	681b      	ldr	r3, [r3, #0]
 8014728:	f022 0201 	bic.w	r2, r2, #1
 801472c:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 801472e:	687b      	ldr	r3, [r7, #4]
 8014730:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8014732:	2b00      	cmp	r3, #0
 8014734:	d002      	beq.n	801473c <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8014736:	6878      	ldr	r0, [r7, #4]
 8014738:	f000 fdb4 	bl	80152a4 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 801473c:	6878      	ldr	r0, [r7, #4]
 801473e:	f000 faf9 	bl	8014d34 <UART_SetConfig>
 8014742:	4603      	mov	r3, r0
 8014744:	2b01      	cmp	r3, #1
 8014746:	d101      	bne.n	801474c <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8014748:	2301      	movs	r3, #1
 801474a:	e01b      	b.n	8014784 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 801474c:	687b      	ldr	r3, [r7, #4]
 801474e:	681b      	ldr	r3, [r3, #0]
 8014750:	685a      	ldr	r2, [r3, #4]
 8014752:	687b      	ldr	r3, [r7, #4]
 8014754:	681b      	ldr	r3, [r3, #0]
 8014756:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 801475a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 801475c:	687b      	ldr	r3, [r7, #4]
 801475e:	681b      	ldr	r3, [r3, #0]
 8014760:	689a      	ldr	r2, [r3, #8]
 8014762:	687b      	ldr	r3, [r7, #4]
 8014764:	681b      	ldr	r3, [r3, #0]
 8014766:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 801476a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 801476c:	687b      	ldr	r3, [r7, #4]
 801476e:	681b      	ldr	r3, [r3, #0]
 8014770:	681a      	ldr	r2, [r3, #0]
 8014772:	687b      	ldr	r3, [r7, #4]
 8014774:	681b      	ldr	r3, [r3, #0]
 8014776:	f042 0201 	orr.w	r2, r2, #1
 801477a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 801477c:	6878      	ldr	r0, [r7, #4]
 801477e:	f000 fe33 	bl	80153e8 <UART_CheckIdleState>
 8014782:	4603      	mov	r3, r0
}
 8014784:	4618      	mov	r0, r3
 8014786:	3708      	adds	r7, #8
 8014788:	46bd      	mov	sp, r7
 801478a:	bd80      	pop	{r7, pc}

0801478c <HAL_HalfDuplex_Init>:
  *        parameters in the UART_InitTypeDef and creates the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HalfDuplex_Init(UART_HandleTypeDef *huart)
{
 801478c:	b580      	push	{r7, lr}
 801478e:	b082      	sub	sp, #8
 8014790:	af00      	add	r7, sp, #0
 8014792:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8014794:	687b      	ldr	r3, [r7, #4]
 8014796:	2b00      	cmp	r3, #0
 8014798:	d101      	bne.n	801479e <HAL_HalfDuplex_Init+0x12>
  {
    return HAL_ERROR;
 801479a:	2301      	movs	r3, #1
 801479c:	e048      	b.n	8014830 <HAL_HalfDuplex_Init+0xa4>
  }

  /* Check UART instance */
  assert_param(IS_UART_HALFDUPLEX_INSTANCE(huart->Instance));

  if (huart->gState == HAL_UART_STATE_RESET)
 801479e:	687b      	ldr	r3, [r7, #4]
 80147a0:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80147a2:	2b00      	cmp	r3, #0
 80147a4:	d106      	bne.n	80147b4 <HAL_HalfDuplex_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80147a6:	687b      	ldr	r3, [r7, #4]
 80147a8:	2200      	movs	r2, #0
 80147aa:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80147ae:	6878      	ldr	r0, [r7, #4]
 80147b0:	f7f3 f862 	bl	8007878 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80147b4:	687b      	ldr	r3, [r7, #4]
 80147b6:	2224      	movs	r2, #36	@ 0x24
 80147b8:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 80147ba:	687b      	ldr	r3, [r7, #4]
 80147bc:	681b      	ldr	r3, [r3, #0]
 80147be:	681a      	ldr	r2, [r3, #0]
 80147c0:	687b      	ldr	r3, [r7, #4]
 80147c2:	681b      	ldr	r3, [r3, #0]
 80147c4:	f022 0201 	bic.w	r2, r2, #1
 80147c8:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80147ca:	687b      	ldr	r3, [r7, #4]
 80147cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80147ce:	2b00      	cmp	r3, #0
 80147d0:	d002      	beq.n	80147d8 <HAL_HalfDuplex_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 80147d2:	6878      	ldr	r0, [r7, #4]
 80147d4:	f000 fd66 	bl	80152a4 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80147d8:	6878      	ldr	r0, [r7, #4]
 80147da:	f000 faab 	bl	8014d34 <UART_SetConfig>
 80147de:	4603      	mov	r3, r0
 80147e0:	2b01      	cmp	r3, #1
 80147e2:	d101      	bne.n	80147e8 <HAL_HalfDuplex_Init+0x5c>
  {
    return HAL_ERROR;
 80147e4:	2301      	movs	r3, #1
 80147e6:	e023      	b.n	8014830 <HAL_HalfDuplex_Init+0xa4>
  }

  /* In half-duplex mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN and IREN bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80147e8:	687b      	ldr	r3, [r7, #4]
 80147ea:	681b      	ldr	r3, [r3, #0]
 80147ec:	685a      	ldr	r2, [r3, #4]
 80147ee:	687b      	ldr	r3, [r7, #4]
 80147f0:	681b      	ldr	r3, [r3, #0]
 80147f2:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80147f6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_IREN | USART_CR3_SCEN));
 80147f8:	687b      	ldr	r3, [r7, #4]
 80147fa:	681b      	ldr	r3, [r3, #0]
 80147fc:	689a      	ldr	r2, [r3, #8]
 80147fe:	687b      	ldr	r3, [r7, #4]
 8014800:	681b      	ldr	r3, [r3, #0]
 8014802:	f022 0222 	bic.w	r2, r2, #34	@ 0x22
 8014806:	609a      	str	r2, [r3, #8]

  /* Enable the Half-Duplex mode by setting the HDSEL bit in the CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
 8014808:	687b      	ldr	r3, [r7, #4]
 801480a:	681b      	ldr	r3, [r3, #0]
 801480c:	689a      	ldr	r2, [r3, #8]
 801480e:	687b      	ldr	r3, [r7, #4]
 8014810:	681b      	ldr	r3, [r3, #0]
 8014812:	f042 0208 	orr.w	r2, r2, #8
 8014816:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8014818:	687b      	ldr	r3, [r7, #4]
 801481a:	681b      	ldr	r3, [r3, #0]
 801481c:	681a      	ldr	r2, [r3, #0]
 801481e:	687b      	ldr	r3, [r7, #4]
 8014820:	681b      	ldr	r3, [r3, #0]
 8014822:	f042 0201 	orr.w	r2, r2, #1
 8014826:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8014828:	6878      	ldr	r0, [r7, #4]
 801482a:	f000 fddd 	bl	80153e8 <UART_CheckIdleState>
 801482e:	4603      	mov	r3, r0
}
 8014830:	4618      	mov	r0, r3
 8014832:	3708      	adds	r7, #8
 8014834:	46bd      	mov	sp, r7
 8014836:	bd80      	pop	{r7, pc}

08014838 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8014838:	b580      	push	{r7, lr}
 801483a:	b08a      	sub	sp, #40	@ 0x28
 801483c:	af02      	add	r7, sp, #8
 801483e:	60f8      	str	r0, [r7, #12]
 8014840:	60b9      	str	r1, [r7, #8]
 8014842:	603b      	str	r3, [r7, #0]
 8014844:	4613      	mov	r3, r2
 8014846:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8014848:	68fb      	ldr	r3, [r7, #12]
 801484a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 801484c:	2b20      	cmp	r3, #32
 801484e:	d177      	bne.n	8014940 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 8014850:	68bb      	ldr	r3, [r7, #8]
 8014852:	2b00      	cmp	r3, #0
 8014854:	d002      	beq.n	801485c <HAL_UART_Transmit+0x24>
 8014856:	88fb      	ldrh	r3, [r7, #6]
 8014858:	2b00      	cmp	r3, #0
 801485a:	d101      	bne.n	8014860 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 801485c:	2301      	movs	r3, #1
 801485e:	e070      	b.n	8014942 <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8014860:	68fb      	ldr	r3, [r7, #12]
 8014862:	2200      	movs	r2, #0
 8014864:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8014868:	68fb      	ldr	r3, [r7, #12]
 801486a:	2221      	movs	r2, #33	@ 0x21
 801486c:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 801486e:	f7f6 fac3 	bl	800adf8 <HAL_GetTick>
 8014872:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8014874:	68fb      	ldr	r3, [r7, #12]
 8014876:	88fa      	ldrh	r2, [r7, #6]
 8014878:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 801487c:	68fb      	ldr	r3, [r7, #12]
 801487e:	88fa      	ldrh	r2, [r7, #6]
 8014880:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8014884:	68fb      	ldr	r3, [r7, #12]
 8014886:	689b      	ldr	r3, [r3, #8]
 8014888:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 801488c:	d108      	bne.n	80148a0 <HAL_UART_Transmit+0x68>
 801488e:	68fb      	ldr	r3, [r7, #12]
 8014890:	691b      	ldr	r3, [r3, #16]
 8014892:	2b00      	cmp	r3, #0
 8014894:	d104      	bne.n	80148a0 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8014896:	2300      	movs	r3, #0
 8014898:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 801489a:	68bb      	ldr	r3, [r7, #8]
 801489c:	61bb      	str	r3, [r7, #24]
 801489e:	e003      	b.n	80148a8 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 80148a0:	68bb      	ldr	r3, [r7, #8]
 80148a2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80148a4:	2300      	movs	r3, #0
 80148a6:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80148a8:	e02f      	b.n	801490a <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80148aa:	683b      	ldr	r3, [r7, #0]
 80148ac:	9300      	str	r3, [sp, #0]
 80148ae:	697b      	ldr	r3, [r7, #20]
 80148b0:	2200      	movs	r2, #0
 80148b2:	2180      	movs	r1, #128	@ 0x80
 80148b4:	68f8      	ldr	r0, [r7, #12]
 80148b6:	f000 fe3f 	bl	8015538 <UART_WaitOnFlagUntilTimeout>
 80148ba:	4603      	mov	r3, r0
 80148bc:	2b00      	cmp	r3, #0
 80148be:	d004      	beq.n	80148ca <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 80148c0:	68fb      	ldr	r3, [r7, #12]
 80148c2:	2220      	movs	r2, #32
 80148c4:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 80148c6:	2303      	movs	r3, #3
 80148c8:	e03b      	b.n	8014942 <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 80148ca:	69fb      	ldr	r3, [r7, #28]
 80148cc:	2b00      	cmp	r3, #0
 80148ce:	d10b      	bne.n	80148e8 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80148d0:	69bb      	ldr	r3, [r7, #24]
 80148d2:	881a      	ldrh	r2, [r3, #0]
 80148d4:	68fb      	ldr	r3, [r7, #12]
 80148d6:	681b      	ldr	r3, [r3, #0]
 80148d8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80148dc:	b292      	uxth	r2, r2
 80148de:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 80148e0:	69bb      	ldr	r3, [r7, #24]
 80148e2:	3302      	adds	r3, #2
 80148e4:	61bb      	str	r3, [r7, #24]
 80148e6:	e007      	b.n	80148f8 <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80148e8:	69fb      	ldr	r3, [r7, #28]
 80148ea:	781a      	ldrb	r2, [r3, #0]
 80148ec:	68fb      	ldr	r3, [r7, #12]
 80148ee:	681b      	ldr	r3, [r3, #0]
 80148f0:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 80148f2:	69fb      	ldr	r3, [r7, #28]
 80148f4:	3301      	adds	r3, #1
 80148f6:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80148f8:	68fb      	ldr	r3, [r7, #12]
 80148fa:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 80148fe:	b29b      	uxth	r3, r3
 8014900:	3b01      	subs	r3, #1
 8014902:	b29a      	uxth	r2, r3
 8014904:	68fb      	ldr	r3, [r7, #12]
 8014906:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 801490a:	68fb      	ldr	r3, [r7, #12]
 801490c:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8014910:	b29b      	uxth	r3, r3
 8014912:	2b00      	cmp	r3, #0
 8014914:	d1c9      	bne.n	80148aa <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8014916:	683b      	ldr	r3, [r7, #0]
 8014918:	9300      	str	r3, [sp, #0]
 801491a:	697b      	ldr	r3, [r7, #20]
 801491c:	2200      	movs	r2, #0
 801491e:	2140      	movs	r1, #64	@ 0x40
 8014920:	68f8      	ldr	r0, [r7, #12]
 8014922:	f000 fe09 	bl	8015538 <UART_WaitOnFlagUntilTimeout>
 8014926:	4603      	mov	r3, r0
 8014928:	2b00      	cmp	r3, #0
 801492a:	d004      	beq.n	8014936 <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 801492c:	68fb      	ldr	r3, [r7, #12]
 801492e:	2220      	movs	r2, #32
 8014930:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 8014932:	2303      	movs	r3, #3
 8014934:	e005      	b.n	8014942 <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8014936:	68fb      	ldr	r3, [r7, #12]
 8014938:	2220      	movs	r2, #32
 801493a:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 801493c:	2300      	movs	r3, #0
 801493e:	e000      	b.n	8014942 <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 8014940:	2302      	movs	r3, #2
  }
}
 8014942:	4618      	mov	r0, r3
 8014944:	3720      	adds	r7, #32
 8014946:	46bd      	mov	sp, r7
 8014948:	bd80      	pop	{r7, pc}

0801494a <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 801494a:	b580      	push	{r7, lr}
 801494c:	b08a      	sub	sp, #40	@ 0x28
 801494e:	af02      	add	r7, sp, #8
 8014950:	60f8      	str	r0, [r7, #12]
 8014952:	60b9      	str	r1, [r7, #8]
 8014954:	603b      	str	r3, [r7, #0]
 8014956:	4613      	mov	r3, r2
 8014958:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 801495a:	68fb      	ldr	r3, [r7, #12]
 801495c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8014960:	2b20      	cmp	r3, #32
 8014962:	f040 80b6 	bne.w	8014ad2 <HAL_UART_Receive+0x188>
  {
    if ((pData == NULL) || (Size == 0U))
 8014966:	68bb      	ldr	r3, [r7, #8]
 8014968:	2b00      	cmp	r3, #0
 801496a:	d002      	beq.n	8014972 <HAL_UART_Receive+0x28>
 801496c:	88fb      	ldrh	r3, [r7, #6]
 801496e:	2b00      	cmp	r3, #0
 8014970:	d101      	bne.n	8014976 <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 8014972:	2301      	movs	r3, #1
 8014974:	e0ae      	b.n	8014ad4 <HAL_UART_Receive+0x18a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8014976:	68fb      	ldr	r3, [r7, #12]
 8014978:	2200      	movs	r2, #0
 801497a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 801497e:	68fb      	ldr	r3, [r7, #12]
 8014980:	2222      	movs	r2, #34	@ 0x22
 8014982:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8014986:	68fb      	ldr	r3, [r7, #12]
 8014988:	2200      	movs	r2, #0
 801498a:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 801498c:	f7f6 fa34 	bl	800adf8 <HAL_GetTick>
 8014990:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 8014992:	68fb      	ldr	r3, [r7, #12]
 8014994:	88fa      	ldrh	r2, [r7, #6]
 8014996:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58
    huart->RxXferCount = Size;
 801499a:	68fb      	ldr	r3, [r7, #12]
 801499c:	88fa      	ldrh	r2, [r7, #6]
 801499e:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 80149a2:	68fb      	ldr	r3, [r7, #12]
 80149a4:	689b      	ldr	r3, [r3, #8]
 80149a6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80149aa:	d10e      	bne.n	80149ca <HAL_UART_Receive+0x80>
 80149ac:	68fb      	ldr	r3, [r7, #12]
 80149ae:	691b      	ldr	r3, [r3, #16]
 80149b0:	2b00      	cmp	r3, #0
 80149b2:	d105      	bne.n	80149c0 <HAL_UART_Receive+0x76>
 80149b4:	68fb      	ldr	r3, [r7, #12]
 80149b6:	f240 12ff 	movw	r2, #511	@ 0x1ff
 80149ba:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 80149be:	e02d      	b.n	8014a1c <HAL_UART_Receive+0xd2>
 80149c0:	68fb      	ldr	r3, [r7, #12]
 80149c2:	22ff      	movs	r2, #255	@ 0xff
 80149c4:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 80149c8:	e028      	b.n	8014a1c <HAL_UART_Receive+0xd2>
 80149ca:	68fb      	ldr	r3, [r7, #12]
 80149cc:	689b      	ldr	r3, [r3, #8]
 80149ce:	2b00      	cmp	r3, #0
 80149d0:	d10d      	bne.n	80149ee <HAL_UART_Receive+0xa4>
 80149d2:	68fb      	ldr	r3, [r7, #12]
 80149d4:	691b      	ldr	r3, [r3, #16]
 80149d6:	2b00      	cmp	r3, #0
 80149d8:	d104      	bne.n	80149e4 <HAL_UART_Receive+0x9a>
 80149da:	68fb      	ldr	r3, [r7, #12]
 80149dc:	22ff      	movs	r2, #255	@ 0xff
 80149de:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 80149e2:	e01b      	b.n	8014a1c <HAL_UART_Receive+0xd2>
 80149e4:	68fb      	ldr	r3, [r7, #12]
 80149e6:	227f      	movs	r2, #127	@ 0x7f
 80149e8:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 80149ec:	e016      	b.n	8014a1c <HAL_UART_Receive+0xd2>
 80149ee:	68fb      	ldr	r3, [r7, #12]
 80149f0:	689b      	ldr	r3, [r3, #8]
 80149f2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80149f6:	d10d      	bne.n	8014a14 <HAL_UART_Receive+0xca>
 80149f8:	68fb      	ldr	r3, [r7, #12]
 80149fa:	691b      	ldr	r3, [r3, #16]
 80149fc:	2b00      	cmp	r3, #0
 80149fe:	d104      	bne.n	8014a0a <HAL_UART_Receive+0xc0>
 8014a00:	68fb      	ldr	r3, [r7, #12]
 8014a02:	227f      	movs	r2, #127	@ 0x7f
 8014a04:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8014a08:	e008      	b.n	8014a1c <HAL_UART_Receive+0xd2>
 8014a0a:	68fb      	ldr	r3, [r7, #12]
 8014a0c:	223f      	movs	r2, #63	@ 0x3f
 8014a0e:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8014a12:	e003      	b.n	8014a1c <HAL_UART_Receive+0xd2>
 8014a14:	68fb      	ldr	r3, [r7, #12]
 8014a16:	2200      	movs	r2, #0
 8014a18:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
    uhMask = huart->Mask;
 8014a1c:	68fb      	ldr	r3, [r7, #12]
 8014a1e:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8014a22:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8014a24:	68fb      	ldr	r3, [r7, #12]
 8014a26:	689b      	ldr	r3, [r3, #8]
 8014a28:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8014a2c:	d108      	bne.n	8014a40 <HAL_UART_Receive+0xf6>
 8014a2e:	68fb      	ldr	r3, [r7, #12]
 8014a30:	691b      	ldr	r3, [r3, #16]
 8014a32:	2b00      	cmp	r3, #0
 8014a34:	d104      	bne.n	8014a40 <HAL_UART_Receive+0xf6>
    {
      pdata8bits  = NULL;
 8014a36:	2300      	movs	r3, #0
 8014a38:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8014a3a:	68bb      	ldr	r3, [r7, #8]
 8014a3c:	61bb      	str	r3, [r7, #24]
 8014a3e:	e003      	b.n	8014a48 <HAL_UART_Receive+0xfe>
    }
    else
    {
      pdata8bits  = pData;
 8014a40:	68bb      	ldr	r3, [r7, #8]
 8014a42:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8014a44:	2300      	movs	r3, #0
 8014a46:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8014a48:	e037      	b.n	8014aba <HAL_UART_Receive+0x170>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8014a4a:	683b      	ldr	r3, [r7, #0]
 8014a4c:	9300      	str	r3, [sp, #0]
 8014a4e:	697b      	ldr	r3, [r7, #20]
 8014a50:	2200      	movs	r2, #0
 8014a52:	2120      	movs	r1, #32
 8014a54:	68f8      	ldr	r0, [r7, #12]
 8014a56:	f000 fd6f 	bl	8015538 <UART_WaitOnFlagUntilTimeout>
 8014a5a:	4603      	mov	r3, r0
 8014a5c:	2b00      	cmp	r3, #0
 8014a5e:	d005      	beq.n	8014a6c <HAL_UART_Receive+0x122>
      {
        huart->RxState = HAL_UART_STATE_READY;
 8014a60:	68fb      	ldr	r3, [r7, #12]
 8014a62:	2220      	movs	r2, #32
 8014a64:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

        return HAL_TIMEOUT;
 8014a68:	2303      	movs	r3, #3
 8014a6a:	e033      	b.n	8014ad4 <HAL_UART_Receive+0x18a>
      }
      if (pdata8bits == NULL)
 8014a6c:	69fb      	ldr	r3, [r7, #28]
 8014a6e:	2b00      	cmp	r3, #0
 8014a70:	d10c      	bne.n	8014a8c <HAL_UART_Receive+0x142>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8014a72:	68fb      	ldr	r3, [r7, #12]
 8014a74:	681b      	ldr	r3, [r3, #0]
 8014a76:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8014a78:	b29a      	uxth	r2, r3
 8014a7a:	8a7b      	ldrh	r3, [r7, #18]
 8014a7c:	4013      	ands	r3, r2
 8014a7e:	b29a      	uxth	r2, r3
 8014a80:	69bb      	ldr	r3, [r7, #24]
 8014a82:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8014a84:	69bb      	ldr	r3, [r7, #24]
 8014a86:	3302      	adds	r3, #2
 8014a88:	61bb      	str	r3, [r7, #24]
 8014a8a:	e00d      	b.n	8014aa8 <HAL_UART_Receive+0x15e>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8014a8c:	68fb      	ldr	r3, [r7, #12]
 8014a8e:	681b      	ldr	r3, [r3, #0]
 8014a90:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8014a92:	b29b      	uxth	r3, r3
 8014a94:	b2da      	uxtb	r2, r3
 8014a96:	8a7b      	ldrh	r3, [r7, #18]
 8014a98:	b2db      	uxtb	r3, r3
 8014a9a:	4013      	ands	r3, r2
 8014a9c:	b2da      	uxtb	r2, r3
 8014a9e:	69fb      	ldr	r3, [r7, #28]
 8014aa0:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8014aa2:	69fb      	ldr	r3, [r7, #28]
 8014aa4:	3301      	adds	r3, #1
 8014aa6:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8014aa8:	68fb      	ldr	r3, [r7, #12]
 8014aaa:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8014aae:	b29b      	uxth	r3, r3
 8014ab0:	3b01      	subs	r3, #1
 8014ab2:	b29a      	uxth	r2, r3
 8014ab4:	68fb      	ldr	r3, [r7, #12]
 8014ab6:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
    while (huart->RxXferCount > 0U)
 8014aba:	68fb      	ldr	r3, [r7, #12]
 8014abc:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8014ac0:	b29b      	uxth	r3, r3
 8014ac2:	2b00      	cmp	r3, #0
 8014ac4:	d1c1      	bne.n	8014a4a <HAL_UART_Receive+0x100>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8014ac6:	68fb      	ldr	r3, [r7, #12]
 8014ac8:	2220      	movs	r2, #32
 8014aca:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

    return HAL_OK;
 8014ace:	2300      	movs	r3, #0
 8014ad0:	e000      	b.n	8014ad4 <HAL_UART_Receive+0x18a>
  }
  else
  {
    return HAL_BUSY;
 8014ad2:	2302      	movs	r3, #2
  }
}
 8014ad4:	4618      	mov	r0, r3
 8014ad6:	3720      	adds	r7, #32
 8014ad8:	46bd      	mov	sp, r7
 8014ada:	bd80      	pop	{r7, pc}

08014adc <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8014adc:	b580      	push	{r7, lr}
 8014ade:	b08a      	sub	sp, #40	@ 0x28
 8014ae0:	af00      	add	r7, sp, #0
 8014ae2:	60f8      	str	r0, [r7, #12]
 8014ae4:	60b9      	str	r1, [r7, #8]
 8014ae6:	4613      	mov	r3, r2
 8014ae8:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8014aea:	68fb      	ldr	r3, [r7, #12]
 8014aec:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8014aee:	2b20      	cmp	r3, #32
 8014af0:	d165      	bne.n	8014bbe <HAL_UART_Transmit_DMA+0xe2>
  {
    if ((pData == NULL) || (Size == 0U))
 8014af2:	68bb      	ldr	r3, [r7, #8]
 8014af4:	2b00      	cmp	r3, #0
 8014af6:	d002      	beq.n	8014afe <HAL_UART_Transmit_DMA+0x22>
 8014af8:	88fb      	ldrh	r3, [r7, #6]
 8014afa:	2b00      	cmp	r3, #0
 8014afc:	d101      	bne.n	8014b02 <HAL_UART_Transmit_DMA+0x26>
    {
      return HAL_ERROR;
 8014afe:	2301      	movs	r3, #1
 8014b00:	e05e      	b.n	8014bc0 <HAL_UART_Transmit_DMA+0xe4>
    }

    huart->pTxBuffPtr  = pData;
 8014b02:	68fb      	ldr	r3, [r7, #12]
 8014b04:	68ba      	ldr	r2, [r7, #8]
 8014b06:	64da      	str	r2, [r3, #76]	@ 0x4c
    huart->TxXferSize  = Size;
 8014b08:	68fb      	ldr	r3, [r7, #12]
 8014b0a:	88fa      	ldrh	r2, [r7, #6]
 8014b0c:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 8014b10:	68fb      	ldr	r3, [r7, #12]
 8014b12:	88fa      	ldrh	r2, [r7, #6]
 8014b14:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8014b18:	68fb      	ldr	r3, [r7, #12]
 8014b1a:	2200      	movs	r2, #0
 8014b1c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8014b20:	68fb      	ldr	r3, [r7, #12]
 8014b22:	2221      	movs	r2, #33	@ 0x21
 8014b24:	67da      	str	r2, [r3, #124]	@ 0x7c

    if (huart->hdmatx != NULL)
 8014b26:	68fb      	ldr	r3, [r7, #12]
 8014b28:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8014b2a:	2b00      	cmp	r3, #0
 8014b2c:	d027      	beq.n	8014b7e <HAL_UART_Transmit_DMA+0xa2>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8014b2e:	68fb      	ldr	r3, [r7, #12]
 8014b30:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8014b32:	4a25      	ldr	r2, [pc, #148]	@ (8014bc8 <HAL_UART_Transmit_DMA+0xec>)
 8014b34:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8014b36:	68fb      	ldr	r3, [r7, #12]
 8014b38:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8014b3a:	4a24      	ldr	r2, [pc, #144]	@ (8014bcc <HAL_UART_Transmit_DMA+0xf0>)
 8014b3c:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 8014b3e:	68fb      	ldr	r3, [r7, #12]
 8014b40:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8014b42:	4a23      	ldr	r2, [pc, #140]	@ (8014bd0 <HAL_UART_Transmit_DMA+0xf4>)
 8014b44:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 8014b46:	68fb      	ldr	r3, [r7, #12]
 8014b48:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8014b4a:	2200      	movs	r2, #0
 8014b4c:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 8014b4e:	68fb      	ldr	r3, [r7, #12]
 8014b50:	6f18      	ldr	r0, [r3, #112]	@ 0x70
 8014b52:	68fb      	ldr	r3, [r7, #12]
 8014b54:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8014b56:	4619      	mov	r1, r3
 8014b58:	68fb      	ldr	r3, [r7, #12]
 8014b5a:	681b      	ldr	r3, [r3, #0]
 8014b5c:	3328      	adds	r3, #40	@ 0x28
 8014b5e:	461a      	mov	r2, r3
 8014b60:	88fb      	ldrh	r3, [r7, #6]
 8014b62:	f7f8 f92f 	bl	800cdc4 <HAL_DMA_Start_IT>
 8014b66:	4603      	mov	r3, r0
 8014b68:	2b00      	cmp	r3, #0
 8014b6a:	d008      	beq.n	8014b7e <HAL_UART_Transmit_DMA+0xa2>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 8014b6c:	68fb      	ldr	r3, [r7, #12]
 8014b6e:	2210      	movs	r2, #16
 8014b70:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 8014b74:	68fb      	ldr	r3, [r7, #12]
 8014b76:	2220      	movs	r2, #32
 8014b78:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_ERROR;
 8014b7a:	2301      	movs	r3, #1
 8014b7c:	e020      	b.n	8014bc0 <HAL_UART_Transmit_DMA+0xe4>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 8014b7e:	68fb      	ldr	r3, [r7, #12]
 8014b80:	681b      	ldr	r3, [r3, #0]
 8014b82:	2240      	movs	r2, #64	@ 0x40
 8014b84:	621a      	str	r2, [r3, #32]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8014b86:	68fb      	ldr	r3, [r7, #12]
 8014b88:	681b      	ldr	r3, [r3, #0]
 8014b8a:	3308      	adds	r3, #8
 8014b8c:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8014b8e:	697b      	ldr	r3, [r7, #20]
 8014b90:	e853 3f00 	ldrex	r3, [r3]
 8014b94:	613b      	str	r3, [r7, #16]
   return(result);
 8014b96:	693b      	ldr	r3, [r7, #16]
 8014b98:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8014b9c:	627b      	str	r3, [r7, #36]	@ 0x24
 8014b9e:	68fb      	ldr	r3, [r7, #12]
 8014ba0:	681b      	ldr	r3, [r3, #0]
 8014ba2:	3308      	adds	r3, #8
 8014ba4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8014ba6:	623a      	str	r2, [r7, #32]
 8014ba8:	61fb      	str	r3, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8014baa:	69f9      	ldr	r1, [r7, #28]
 8014bac:	6a3a      	ldr	r2, [r7, #32]
 8014bae:	e841 2300 	strex	r3, r2, [r1]
 8014bb2:	61bb      	str	r3, [r7, #24]
   return(result);
 8014bb4:	69bb      	ldr	r3, [r7, #24]
 8014bb6:	2b00      	cmp	r3, #0
 8014bb8:	d1e5      	bne.n	8014b86 <HAL_UART_Transmit_DMA+0xaa>

    return HAL_OK;
 8014bba:	2300      	movs	r3, #0
 8014bbc:	e000      	b.n	8014bc0 <HAL_UART_Transmit_DMA+0xe4>
  }
  else
  {
    return HAL_BUSY;
 8014bbe:	2302      	movs	r3, #2
  }
}
 8014bc0:	4618      	mov	r0, r3
 8014bc2:	3728      	adds	r7, #40	@ 0x28
 8014bc4:	46bd      	mov	sp, r7
 8014bc6:	bd80      	pop	{r7, pc}
 8014bc8:	08015869 	.word	0x08015869
 8014bcc:	08015903 	.word	0x08015903
 8014bd0:	08015a89 	.word	0x08015a89

08014bd4 <HAL_UART_DMAStop>:
  * @brief Stop the DMA Transfer.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DMAStop(UART_HandleTypeDef *huart)
{
 8014bd4:	b580      	push	{r7, lr}
 8014bd6:	b090      	sub	sp, #64	@ 0x40
 8014bd8:	af00      	add	r7, sp, #0
 8014bda:	6078      	str	r0, [r7, #4]
     HAL_UART_TxHalfCpltCallback / HAL_UART_RxHalfCpltCallback:
     indeed, when HAL_DMA_Abort() API is called, the DMA TX/RX Transfer or Half Transfer complete
     interrupt is generated if the DMA transfer interruption occurs at the middle or at the end of
     the stream and the corresponding call back is executed. */

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8014bdc:	687b      	ldr	r3, [r7, #4]
 8014bde:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8014be0:	63fb      	str	r3, [r7, #60]	@ 0x3c
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8014be2:	687b      	ldr	r3, [r7, #4]
 8014be4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8014be8:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8014bea:	687b      	ldr	r3, [r7, #4]
 8014bec:	681b      	ldr	r3, [r3, #0]
 8014bee:	689b      	ldr	r3, [r3, #8]
 8014bf0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8014bf4:	2b80      	cmp	r3, #128	@ 0x80
 8014bf6:	d139      	bne.n	8014c6c <HAL_UART_DMAStop+0x98>
 8014bf8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8014bfa:	2b21      	cmp	r3, #33	@ 0x21
 8014bfc:	d136      	bne.n	8014c6c <HAL_UART_DMAStop+0x98>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8014bfe:	687b      	ldr	r3, [r7, #4]
 8014c00:	681b      	ldr	r3, [r3, #0]
 8014c02:	3308      	adds	r3, #8
 8014c04:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8014c06:	6a3b      	ldr	r3, [r7, #32]
 8014c08:	e853 3f00 	ldrex	r3, [r3]
 8014c0c:	61fb      	str	r3, [r7, #28]
   return(result);
 8014c0e:	69fb      	ldr	r3, [r7, #28]
 8014c10:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8014c14:	637b      	str	r3, [r7, #52]	@ 0x34
 8014c16:	687b      	ldr	r3, [r7, #4]
 8014c18:	681b      	ldr	r3, [r3, #0]
 8014c1a:	3308      	adds	r3, #8
 8014c1c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8014c1e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8014c20:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8014c22:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8014c24:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8014c26:	e841 2300 	strex	r3, r2, [r1]
 8014c2a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8014c2c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014c2e:	2b00      	cmp	r3, #0
 8014c30:	d1e5      	bne.n	8014bfe <HAL_UART_DMAStop+0x2a>

    /* Abort the UART DMA Tx channel */
    if (huart->hdmatx != NULL)
 8014c32:	687b      	ldr	r3, [r7, #4]
 8014c34:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8014c36:	2b00      	cmp	r3, #0
 8014c38:	d015      	beq.n	8014c66 <HAL_UART_DMAStop+0x92>
    {
      if (HAL_DMA_Abort(huart->hdmatx) != HAL_OK)
 8014c3a:	687b      	ldr	r3, [r7, #4]
 8014c3c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8014c3e:	4618      	mov	r0, r3
 8014c40:	f7f8 f920 	bl	800ce84 <HAL_DMA_Abort>
 8014c44:	4603      	mov	r3, r0
 8014c46:	2b00      	cmp	r3, #0
 8014c48:	d00d      	beq.n	8014c66 <HAL_UART_DMAStop+0x92>
      {
        if (HAL_DMA_GetError(huart->hdmatx) == HAL_DMA_ERROR_TIMEOUT)
 8014c4a:	687b      	ldr	r3, [r7, #4]
 8014c4c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8014c4e:	4618      	mov	r0, r3
 8014c50:	f7f8 fa05 	bl	800d05e <HAL_DMA_GetError>
 8014c54:	4603      	mov	r3, r0
 8014c56:	2b20      	cmp	r3, #32
 8014c58:	d105      	bne.n	8014c66 <HAL_UART_DMAStop+0x92>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 8014c5a:	687b      	ldr	r3, [r7, #4]
 8014c5c:	2210      	movs	r2, #16
 8014c5e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8014c62:	2303      	movs	r3, #3
 8014c64:	e044      	b.n	8014cf0 <HAL_UART_DMAStop+0x11c>
        }
      }
    }

    UART_EndTxTransfer(huart);
 8014c66:	6878      	ldr	r0, [r7, #4]
 8014c68:	f000 fd74 	bl	8015754 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8014c6c:	687b      	ldr	r3, [r7, #4]
 8014c6e:	681b      	ldr	r3, [r3, #0]
 8014c70:	689b      	ldr	r3, [r3, #8]
 8014c72:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8014c76:	2b40      	cmp	r3, #64	@ 0x40
 8014c78:	d139      	bne.n	8014cee <HAL_UART_DMAStop+0x11a>
 8014c7a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8014c7c:	2b22      	cmp	r3, #34	@ 0x22
 8014c7e:	d136      	bne.n	8014cee <HAL_UART_DMAStop+0x11a>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8014c80:	687b      	ldr	r3, [r7, #4]
 8014c82:	681b      	ldr	r3, [r3, #0]
 8014c84:	3308      	adds	r3, #8
 8014c86:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8014c88:	68fb      	ldr	r3, [r7, #12]
 8014c8a:	e853 3f00 	ldrex	r3, [r3]
 8014c8e:	60bb      	str	r3, [r7, #8]
   return(result);
 8014c90:	68bb      	ldr	r3, [r7, #8]
 8014c92:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8014c96:	633b      	str	r3, [r7, #48]	@ 0x30
 8014c98:	687b      	ldr	r3, [r7, #4]
 8014c9a:	681b      	ldr	r3, [r3, #0]
 8014c9c:	3308      	adds	r3, #8
 8014c9e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8014ca0:	61ba      	str	r2, [r7, #24]
 8014ca2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8014ca4:	6979      	ldr	r1, [r7, #20]
 8014ca6:	69ba      	ldr	r2, [r7, #24]
 8014ca8:	e841 2300 	strex	r3, r2, [r1]
 8014cac:	613b      	str	r3, [r7, #16]
   return(result);
 8014cae:	693b      	ldr	r3, [r7, #16]
 8014cb0:	2b00      	cmp	r3, #0
 8014cb2:	d1e5      	bne.n	8014c80 <HAL_UART_DMAStop+0xac>

    /* Abort the UART DMA Rx channel */
    if (huart->hdmarx != NULL)
 8014cb4:	687b      	ldr	r3, [r7, #4]
 8014cb6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8014cb8:	2b00      	cmp	r3, #0
 8014cba:	d015      	beq.n	8014ce8 <HAL_UART_DMAStop+0x114>
    {
      if (HAL_DMA_Abort(huart->hdmarx) != HAL_OK)
 8014cbc:	687b      	ldr	r3, [r7, #4]
 8014cbe:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8014cc0:	4618      	mov	r0, r3
 8014cc2:	f7f8 f8df 	bl	800ce84 <HAL_DMA_Abort>
 8014cc6:	4603      	mov	r3, r0
 8014cc8:	2b00      	cmp	r3, #0
 8014cca:	d00d      	beq.n	8014ce8 <HAL_UART_DMAStop+0x114>
      {
        if (HAL_DMA_GetError(huart->hdmarx) == HAL_DMA_ERROR_TIMEOUT)
 8014ccc:	687b      	ldr	r3, [r7, #4]
 8014cce:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8014cd0:	4618      	mov	r0, r3
 8014cd2:	f7f8 f9c4 	bl	800d05e <HAL_DMA_GetError>
 8014cd6:	4603      	mov	r3, r0
 8014cd8:	2b20      	cmp	r3, #32
 8014cda:	d105      	bne.n	8014ce8 <HAL_UART_DMAStop+0x114>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 8014cdc:	687b      	ldr	r3, [r7, #4]
 8014cde:	2210      	movs	r2, #16
 8014ce0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8014ce4:	2303      	movs	r3, #3
 8014ce6:	e003      	b.n	8014cf0 <HAL_UART_DMAStop+0x11c>
        }
      }
    }

    UART_EndRxTransfer(huart);
 8014ce8:	6878      	ldr	r0, [r7, #4]
 8014cea:	f000 fd59 	bl	80157a0 <UART_EndRxTransfer>
  }

  return HAL_OK;
 8014cee:	2300      	movs	r3, #0
}
 8014cf0:	4618      	mov	r0, r3
 8014cf2:	3740      	adds	r7, #64	@ 0x40
 8014cf4:	46bd      	mov	sp, r7
 8014cf6:	bd80      	pop	{r7, pc}

08014cf8 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8014cf8:	b480      	push	{r7}
 8014cfa:	b083      	sub	sp, #12
 8014cfc:	af00      	add	r7, sp, #0
 8014cfe:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 8014d00:	bf00      	nop
 8014d02:	370c      	adds	r7, #12
 8014d04:	46bd      	mov	sp, r7
 8014d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014d0a:	4770      	bx	lr

08014d0c <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8014d0c:	b480      	push	{r7}
 8014d0e:	b083      	sub	sp, #12
 8014d10:	af00      	add	r7, sp, #0
 8014d12:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 8014d14:	bf00      	nop
 8014d16:	370c      	adds	r7, #12
 8014d18:	46bd      	mov	sp, r7
 8014d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014d1e:	4770      	bx	lr

08014d20 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8014d20:	b480      	push	{r7}
 8014d22:	b083      	sub	sp, #12
 8014d24:	af00      	add	r7, sp, #0
 8014d26:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8014d28:	bf00      	nop
 8014d2a:	370c      	adds	r7, #12
 8014d2c:	46bd      	mov	sp, r7
 8014d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014d32:	4770      	bx	lr

08014d34 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8014d34:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8014d38:	b08a      	sub	sp, #40	@ 0x28
 8014d3a:	af00      	add	r7, sp, #0
 8014d3c:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8014d3e:	2300      	movs	r3, #0
 8014d40:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8014d44:	68fb      	ldr	r3, [r7, #12]
 8014d46:	689a      	ldr	r2, [r3, #8]
 8014d48:	68fb      	ldr	r3, [r7, #12]
 8014d4a:	691b      	ldr	r3, [r3, #16]
 8014d4c:	431a      	orrs	r2, r3
 8014d4e:	68fb      	ldr	r3, [r7, #12]
 8014d50:	695b      	ldr	r3, [r3, #20]
 8014d52:	431a      	orrs	r2, r3
 8014d54:	68fb      	ldr	r3, [r7, #12]
 8014d56:	69db      	ldr	r3, [r3, #28]
 8014d58:	4313      	orrs	r3, r2
 8014d5a:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8014d5c:	68fb      	ldr	r3, [r7, #12]
 8014d5e:	681b      	ldr	r3, [r3, #0]
 8014d60:	681a      	ldr	r2, [r3, #0]
 8014d62:	4ba4      	ldr	r3, [pc, #656]	@ (8014ff4 <UART_SetConfig+0x2c0>)
 8014d64:	4013      	ands	r3, r2
 8014d66:	68fa      	ldr	r2, [r7, #12]
 8014d68:	6812      	ldr	r2, [r2, #0]
 8014d6a:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8014d6c:	430b      	orrs	r3, r1
 8014d6e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8014d70:	68fb      	ldr	r3, [r7, #12]
 8014d72:	681b      	ldr	r3, [r3, #0]
 8014d74:	685b      	ldr	r3, [r3, #4]
 8014d76:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8014d7a:	68fb      	ldr	r3, [r7, #12]
 8014d7c:	68da      	ldr	r2, [r3, #12]
 8014d7e:	68fb      	ldr	r3, [r7, #12]
 8014d80:	681b      	ldr	r3, [r3, #0]
 8014d82:	430a      	orrs	r2, r1
 8014d84:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8014d86:	68fb      	ldr	r3, [r7, #12]
 8014d88:	699b      	ldr	r3, [r3, #24]
 8014d8a:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8014d8c:	68fb      	ldr	r3, [r7, #12]
 8014d8e:	681b      	ldr	r3, [r3, #0]
 8014d90:	4a99      	ldr	r2, [pc, #612]	@ (8014ff8 <UART_SetConfig+0x2c4>)
 8014d92:	4293      	cmp	r3, r2
 8014d94:	d004      	beq.n	8014da0 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8014d96:	68fb      	ldr	r3, [r7, #12]
 8014d98:	6a1b      	ldr	r3, [r3, #32]
 8014d9a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8014d9c:	4313      	orrs	r3, r2
 8014d9e:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8014da0:	68fb      	ldr	r3, [r7, #12]
 8014da2:	681b      	ldr	r3, [r3, #0]
 8014da4:	689b      	ldr	r3, [r3, #8]
 8014da6:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8014daa:	68fb      	ldr	r3, [r7, #12]
 8014dac:	681b      	ldr	r3, [r3, #0]
 8014dae:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8014db0:	430a      	orrs	r2, r1
 8014db2:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8014db4:	68fb      	ldr	r3, [r7, #12]
 8014db6:	681b      	ldr	r3, [r3, #0]
 8014db8:	4a90      	ldr	r2, [pc, #576]	@ (8014ffc <UART_SetConfig+0x2c8>)
 8014dba:	4293      	cmp	r3, r2
 8014dbc:	d126      	bne.n	8014e0c <UART_SetConfig+0xd8>
 8014dbe:	4b90      	ldr	r3, [pc, #576]	@ (8015000 <UART_SetConfig+0x2cc>)
 8014dc0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8014dc4:	f003 0303 	and.w	r3, r3, #3
 8014dc8:	2b03      	cmp	r3, #3
 8014dca:	d81b      	bhi.n	8014e04 <UART_SetConfig+0xd0>
 8014dcc:	a201      	add	r2, pc, #4	@ (adr r2, 8014dd4 <UART_SetConfig+0xa0>)
 8014dce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014dd2:	bf00      	nop
 8014dd4:	08014de5 	.word	0x08014de5
 8014dd8:	08014df5 	.word	0x08014df5
 8014ddc:	08014ded 	.word	0x08014ded
 8014de0:	08014dfd 	.word	0x08014dfd
 8014de4:	2301      	movs	r3, #1
 8014de6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8014dea:	e116      	b.n	801501a <UART_SetConfig+0x2e6>
 8014dec:	2302      	movs	r3, #2
 8014dee:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8014df2:	e112      	b.n	801501a <UART_SetConfig+0x2e6>
 8014df4:	2304      	movs	r3, #4
 8014df6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8014dfa:	e10e      	b.n	801501a <UART_SetConfig+0x2e6>
 8014dfc:	2308      	movs	r3, #8
 8014dfe:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8014e02:	e10a      	b.n	801501a <UART_SetConfig+0x2e6>
 8014e04:	2310      	movs	r3, #16
 8014e06:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8014e0a:	e106      	b.n	801501a <UART_SetConfig+0x2e6>
 8014e0c:	68fb      	ldr	r3, [r7, #12]
 8014e0e:	681b      	ldr	r3, [r3, #0]
 8014e10:	4a7c      	ldr	r2, [pc, #496]	@ (8015004 <UART_SetConfig+0x2d0>)
 8014e12:	4293      	cmp	r3, r2
 8014e14:	d138      	bne.n	8014e88 <UART_SetConfig+0x154>
 8014e16:	4b7a      	ldr	r3, [pc, #488]	@ (8015000 <UART_SetConfig+0x2cc>)
 8014e18:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8014e1c:	f003 030c 	and.w	r3, r3, #12
 8014e20:	2b0c      	cmp	r3, #12
 8014e22:	d82d      	bhi.n	8014e80 <UART_SetConfig+0x14c>
 8014e24:	a201      	add	r2, pc, #4	@ (adr r2, 8014e2c <UART_SetConfig+0xf8>)
 8014e26:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014e2a:	bf00      	nop
 8014e2c:	08014e61 	.word	0x08014e61
 8014e30:	08014e81 	.word	0x08014e81
 8014e34:	08014e81 	.word	0x08014e81
 8014e38:	08014e81 	.word	0x08014e81
 8014e3c:	08014e71 	.word	0x08014e71
 8014e40:	08014e81 	.word	0x08014e81
 8014e44:	08014e81 	.word	0x08014e81
 8014e48:	08014e81 	.word	0x08014e81
 8014e4c:	08014e69 	.word	0x08014e69
 8014e50:	08014e81 	.word	0x08014e81
 8014e54:	08014e81 	.word	0x08014e81
 8014e58:	08014e81 	.word	0x08014e81
 8014e5c:	08014e79 	.word	0x08014e79
 8014e60:	2300      	movs	r3, #0
 8014e62:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8014e66:	e0d8      	b.n	801501a <UART_SetConfig+0x2e6>
 8014e68:	2302      	movs	r3, #2
 8014e6a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8014e6e:	e0d4      	b.n	801501a <UART_SetConfig+0x2e6>
 8014e70:	2304      	movs	r3, #4
 8014e72:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8014e76:	e0d0      	b.n	801501a <UART_SetConfig+0x2e6>
 8014e78:	2308      	movs	r3, #8
 8014e7a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8014e7e:	e0cc      	b.n	801501a <UART_SetConfig+0x2e6>
 8014e80:	2310      	movs	r3, #16
 8014e82:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8014e86:	e0c8      	b.n	801501a <UART_SetConfig+0x2e6>
 8014e88:	68fb      	ldr	r3, [r7, #12]
 8014e8a:	681b      	ldr	r3, [r3, #0]
 8014e8c:	4a5e      	ldr	r2, [pc, #376]	@ (8015008 <UART_SetConfig+0x2d4>)
 8014e8e:	4293      	cmp	r3, r2
 8014e90:	d125      	bne.n	8014ede <UART_SetConfig+0x1aa>
 8014e92:	4b5b      	ldr	r3, [pc, #364]	@ (8015000 <UART_SetConfig+0x2cc>)
 8014e94:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8014e98:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8014e9c:	2b30      	cmp	r3, #48	@ 0x30
 8014e9e:	d016      	beq.n	8014ece <UART_SetConfig+0x19a>
 8014ea0:	2b30      	cmp	r3, #48	@ 0x30
 8014ea2:	d818      	bhi.n	8014ed6 <UART_SetConfig+0x1a2>
 8014ea4:	2b20      	cmp	r3, #32
 8014ea6:	d00a      	beq.n	8014ebe <UART_SetConfig+0x18a>
 8014ea8:	2b20      	cmp	r3, #32
 8014eaa:	d814      	bhi.n	8014ed6 <UART_SetConfig+0x1a2>
 8014eac:	2b00      	cmp	r3, #0
 8014eae:	d002      	beq.n	8014eb6 <UART_SetConfig+0x182>
 8014eb0:	2b10      	cmp	r3, #16
 8014eb2:	d008      	beq.n	8014ec6 <UART_SetConfig+0x192>
 8014eb4:	e00f      	b.n	8014ed6 <UART_SetConfig+0x1a2>
 8014eb6:	2300      	movs	r3, #0
 8014eb8:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8014ebc:	e0ad      	b.n	801501a <UART_SetConfig+0x2e6>
 8014ebe:	2302      	movs	r3, #2
 8014ec0:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8014ec4:	e0a9      	b.n	801501a <UART_SetConfig+0x2e6>
 8014ec6:	2304      	movs	r3, #4
 8014ec8:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8014ecc:	e0a5      	b.n	801501a <UART_SetConfig+0x2e6>
 8014ece:	2308      	movs	r3, #8
 8014ed0:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8014ed4:	e0a1      	b.n	801501a <UART_SetConfig+0x2e6>
 8014ed6:	2310      	movs	r3, #16
 8014ed8:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8014edc:	e09d      	b.n	801501a <UART_SetConfig+0x2e6>
 8014ede:	68fb      	ldr	r3, [r7, #12]
 8014ee0:	681b      	ldr	r3, [r3, #0]
 8014ee2:	4a4a      	ldr	r2, [pc, #296]	@ (801500c <UART_SetConfig+0x2d8>)
 8014ee4:	4293      	cmp	r3, r2
 8014ee6:	d125      	bne.n	8014f34 <UART_SetConfig+0x200>
 8014ee8:	4b45      	ldr	r3, [pc, #276]	@ (8015000 <UART_SetConfig+0x2cc>)
 8014eea:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8014eee:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8014ef2:	2bc0      	cmp	r3, #192	@ 0xc0
 8014ef4:	d016      	beq.n	8014f24 <UART_SetConfig+0x1f0>
 8014ef6:	2bc0      	cmp	r3, #192	@ 0xc0
 8014ef8:	d818      	bhi.n	8014f2c <UART_SetConfig+0x1f8>
 8014efa:	2b80      	cmp	r3, #128	@ 0x80
 8014efc:	d00a      	beq.n	8014f14 <UART_SetConfig+0x1e0>
 8014efe:	2b80      	cmp	r3, #128	@ 0x80
 8014f00:	d814      	bhi.n	8014f2c <UART_SetConfig+0x1f8>
 8014f02:	2b00      	cmp	r3, #0
 8014f04:	d002      	beq.n	8014f0c <UART_SetConfig+0x1d8>
 8014f06:	2b40      	cmp	r3, #64	@ 0x40
 8014f08:	d008      	beq.n	8014f1c <UART_SetConfig+0x1e8>
 8014f0a:	e00f      	b.n	8014f2c <UART_SetConfig+0x1f8>
 8014f0c:	2300      	movs	r3, #0
 8014f0e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8014f12:	e082      	b.n	801501a <UART_SetConfig+0x2e6>
 8014f14:	2302      	movs	r3, #2
 8014f16:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8014f1a:	e07e      	b.n	801501a <UART_SetConfig+0x2e6>
 8014f1c:	2304      	movs	r3, #4
 8014f1e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8014f22:	e07a      	b.n	801501a <UART_SetConfig+0x2e6>
 8014f24:	2308      	movs	r3, #8
 8014f26:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8014f2a:	e076      	b.n	801501a <UART_SetConfig+0x2e6>
 8014f2c:	2310      	movs	r3, #16
 8014f2e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8014f32:	e072      	b.n	801501a <UART_SetConfig+0x2e6>
 8014f34:	68fb      	ldr	r3, [r7, #12]
 8014f36:	681b      	ldr	r3, [r3, #0]
 8014f38:	4a35      	ldr	r2, [pc, #212]	@ (8015010 <UART_SetConfig+0x2dc>)
 8014f3a:	4293      	cmp	r3, r2
 8014f3c:	d12a      	bne.n	8014f94 <UART_SetConfig+0x260>
 8014f3e:	4b30      	ldr	r3, [pc, #192]	@ (8015000 <UART_SetConfig+0x2cc>)
 8014f40:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8014f44:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8014f48:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8014f4c:	d01a      	beq.n	8014f84 <UART_SetConfig+0x250>
 8014f4e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8014f52:	d81b      	bhi.n	8014f8c <UART_SetConfig+0x258>
 8014f54:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8014f58:	d00c      	beq.n	8014f74 <UART_SetConfig+0x240>
 8014f5a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8014f5e:	d815      	bhi.n	8014f8c <UART_SetConfig+0x258>
 8014f60:	2b00      	cmp	r3, #0
 8014f62:	d003      	beq.n	8014f6c <UART_SetConfig+0x238>
 8014f64:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8014f68:	d008      	beq.n	8014f7c <UART_SetConfig+0x248>
 8014f6a:	e00f      	b.n	8014f8c <UART_SetConfig+0x258>
 8014f6c:	2300      	movs	r3, #0
 8014f6e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8014f72:	e052      	b.n	801501a <UART_SetConfig+0x2e6>
 8014f74:	2302      	movs	r3, #2
 8014f76:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8014f7a:	e04e      	b.n	801501a <UART_SetConfig+0x2e6>
 8014f7c:	2304      	movs	r3, #4
 8014f7e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8014f82:	e04a      	b.n	801501a <UART_SetConfig+0x2e6>
 8014f84:	2308      	movs	r3, #8
 8014f86:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8014f8a:	e046      	b.n	801501a <UART_SetConfig+0x2e6>
 8014f8c:	2310      	movs	r3, #16
 8014f8e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8014f92:	e042      	b.n	801501a <UART_SetConfig+0x2e6>
 8014f94:	68fb      	ldr	r3, [r7, #12]
 8014f96:	681b      	ldr	r3, [r3, #0]
 8014f98:	4a17      	ldr	r2, [pc, #92]	@ (8014ff8 <UART_SetConfig+0x2c4>)
 8014f9a:	4293      	cmp	r3, r2
 8014f9c:	d13a      	bne.n	8015014 <UART_SetConfig+0x2e0>
 8014f9e:	4b18      	ldr	r3, [pc, #96]	@ (8015000 <UART_SetConfig+0x2cc>)
 8014fa0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8014fa4:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8014fa8:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8014fac:	d01a      	beq.n	8014fe4 <UART_SetConfig+0x2b0>
 8014fae:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8014fb2:	d81b      	bhi.n	8014fec <UART_SetConfig+0x2b8>
 8014fb4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8014fb8:	d00c      	beq.n	8014fd4 <UART_SetConfig+0x2a0>
 8014fba:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8014fbe:	d815      	bhi.n	8014fec <UART_SetConfig+0x2b8>
 8014fc0:	2b00      	cmp	r3, #0
 8014fc2:	d003      	beq.n	8014fcc <UART_SetConfig+0x298>
 8014fc4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8014fc8:	d008      	beq.n	8014fdc <UART_SetConfig+0x2a8>
 8014fca:	e00f      	b.n	8014fec <UART_SetConfig+0x2b8>
 8014fcc:	2300      	movs	r3, #0
 8014fce:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8014fd2:	e022      	b.n	801501a <UART_SetConfig+0x2e6>
 8014fd4:	2302      	movs	r3, #2
 8014fd6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8014fda:	e01e      	b.n	801501a <UART_SetConfig+0x2e6>
 8014fdc:	2304      	movs	r3, #4
 8014fde:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8014fe2:	e01a      	b.n	801501a <UART_SetConfig+0x2e6>
 8014fe4:	2308      	movs	r3, #8
 8014fe6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8014fea:	e016      	b.n	801501a <UART_SetConfig+0x2e6>
 8014fec:	2310      	movs	r3, #16
 8014fee:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8014ff2:	e012      	b.n	801501a <UART_SetConfig+0x2e6>
 8014ff4:	efff69f3 	.word	0xefff69f3
 8014ff8:	40008000 	.word	0x40008000
 8014ffc:	40013800 	.word	0x40013800
 8015000:	40021000 	.word	0x40021000
 8015004:	40004400 	.word	0x40004400
 8015008:	40004800 	.word	0x40004800
 801500c:	40004c00 	.word	0x40004c00
 8015010:	40005000 	.word	0x40005000
 8015014:	2310      	movs	r3, #16
 8015016:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 801501a:	68fb      	ldr	r3, [r7, #12]
 801501c:	681b      	ldr	r3, [r3, #0]
 801501e:	4a9f      	ldr	r2, [pc, #636]	@ (801529c <UART_SetConfig+0x568>)
 8015020:	4293      	cmp	r3, r2
 8015022:	d17a      	bne.n	801511a <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8015024:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8015028:	2b08      	cmp	r3, #8
 801502a:	d824      	bhi.n	8015076 <UART_SetConfig+0x342>
 801502c:	a201      	add	r2, pc, #4	@ (adr r2, 8015034 <UART_SetConfig+0x300>)
 801502e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8015032:	bf00      	nop
 8015034:	08015059 	.word	0x08015059
 8015038:	08015077 	.word	0x08015077
 801503c:	08015061 	.word	0x08015061
 8015040:	08015077 	.word	0x08015077
 8015044:	08015067 	.word	0x08015067
 8015048:	08015077 	.word	0x08015077
 801504c:	08015077 	.word	0x08015077
 8015050:	08015077 	.word	0x08015077
 8015054:	0801506f 	.word	0x0801506f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8015058:	f7fb f8fe 	bl	8010258 <HAL_RCC_GetPCLK1Freq>
 801505c:	61f8      	str	r0, [r7, #28]
        break;
 801505e:	e010      	b.n	8015082 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8015060:	4b8f      	ldr	r3, [pc, #572]	@ (80152a0 <UART_SetConfig+0x56c>)
 8015062:	61fb      	str	r3, [r7, #28]
        break;
 8015064:	e00d      	b.n	8015082 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8015066:	f7fb f85f 	bl	8010128 <HAL_RCC_GetSysClockFreq>
 801506a:	61f8      	str	r0, [r7, #28]
        break;
 801506c:	e009      	b.n	8015082 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 801506e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8015072:	61fb      	str	r3, [r7, #28]
        break;
 8015074:	e005      	b.n	8015082 <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 8015076:	2300      	movs	r3, #0
 8015078:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 801507a:	2301      	movs	r3, #1
 801507c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8015080:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8015082:	69fb      	ldr	r3, [r7, #28]
 8015084:	2b00      	cmp	r3, #0
 8015086:	f000 80fb 	beq.w	8015280 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 801508a:	68fb      	ldr	r3, [r7, #12]
 801508c:	685a      	ldr	r2, [r3, #4]
 801508e:	4613      	mov	r3, r2
 8015090:	005b      	lsls	r3, r3, #1
 8015092:	4413      	add	r3, r2
 8015094:	69fa      	ldr	r2, [r7, #28]
 8015096:	429a      	cmp	r2, r3
 8015098:	d305      	bcc.n	80150a6 <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 801509a:	68fb      	ldr	r3, [r7, #12]
 801509c:	685b      	ldr	r3, [r3, #4]
 801509e:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80150a0:	69fa      	ldr	r2, [r7, #28]
 80150a2:	429a      	cmp	r2, r3
 80150a4:	d903      	bls.n	80150ae <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 80150a6:	2301      	movs	r3, #1
 80150a8:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 80150ac:	e0e8      	b.n	8015280 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 80150ae:	69fb      	ldr	r3, [r7, #28]
 80150b0:	2200      	movs	r2, #0
 80150b2:	461c      	mov	r4, r3
 80150b4:	4615      	mov	r5, r2
 80150b6:	f04f 0200 	mov.w	r2, #0
 80150ba:	f04f 0300 	mov.w	r3, #0
 80150be:	022b      	lsls	r3, r5, #8
 80150c0:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 80150c4:	0222      	lsls	r2, r4, #8
 80150c6:	68f9      	ldr	r1, [r7, #12]
 80150c8:	6849      	ldr	r1, [r1, #4]
 80150ca:	0849      	lsrs	r1, r1, #1
 80150cc:	2000      	movs	r0, #0
 80150ce:	4688      	mov	r8, r1
 80150d0:	4681      	mov	r9, r0
 80150d2:	eb12 0a08 	adds.w	sl, r2, r8
 80150d6:	eb43 0b09 	adc.w	fp, r3, r9
 80150da:	68fb      	ldr	r3, [r7, #12]
 80150dc:	685b      	ldr	r3, [r3, #4]
 80150de:	2200      	movs	r2, #0
 80150e0:	603b      	str	r3, [r7, #0]
 80150e2:	607a      	str	r2, [r7, #4]
 80150e4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80150e8:	4650      	mov	r0, sl
 80150ea:	4659      	mov	r1, fp
 80150ec:	f7eb fcc6 	bl	8000a7c <__aeabi_uldivmod>
 80150f0:	4602      	mov	r2, r0
 80150f2:	460b      	mov	r3, r1
 80150f4:	4613      	mov	r3, r2
 80150f6:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80150f8:	69bb      	ldr	r3, [r7, #24]
 80150fa:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80150fe:	d308      	bcc.n	8015112 <UART_SetConfig+0x3de>
 8015100:	69bb      	ldr	r3, [r7, #24]
 8015102:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8015106:	d204      	bcs.n	8015112 <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8015108:	68fb      	ldr	r3, [r7, #12]
 801510a:	681b      	ldr	r3, [r3, #0]
 801510c:	69ba      	ldr	r2, [r7, #24]
 801510e:	60da      	str	r2, [r3, #12]
 8015110:	e0b6      	b.n	8015280 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 8015112:	2301      	movs	r3, #1
 8015114:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8015118:	e0b2      	b.n	8015280 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 801511a:	68fb      	ldr	r3, [r7, #12]
 801511c:	69db      	ldr	r3, [r3, #28]
 801511e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8015122:	d15e      	bne.n	80151e2 <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8015124:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8015128:	2b08      	cmp	r3, #8
 801512a:	d828      	bhi.n	801517e <UART_SetConfig+0x44a>
 801512c:	a201      	add	r2, pc, #4	@ (adr r2, 8015134 <UART_SetConfig+0x400>)
 801512e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8015132:	bf00      	nop
 8015134:	08015159 	.word	0x08015159
 8015138:	08015161 	.word	0x08015161
 801513c:	08015169 	.word	0x08015169
 8015140:	0801517f 	.word	0x0801517f
 8015144:	0801516f 	.word	0x0801516f
 8015148:	0801517f 	.word	0x0801517f
 801514c:	0801517f 	.word	0x0801517f
 8015150:	0801517f 	.word	0x0801517f
 8015154:	08015177 	.word	0x08015177
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8015158:	f7fb f87e 	bl	8010258 <HAL_RCC_GetPCLK1Freq>
 801515c:	61f8      	str	r0, [r7, #28]
        break;
 801515e:	e014      	b.n	801518a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8015160:	f7fb f890 	bl	8010284 <HAL_RCC_GetPCLK2Freq>
 8015164:	61f8      	str	r0, [r7, #28]
        break;
 8015166:	e010      	b.n	801518a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8015168:	4b4d      	ldr	r3, [pc, #308]	@ (80152a0 <UART_SetConfig+0x56c>)
 801516a:	61fb      	str	r3, [r7, #28]
        break;
 801516c:	e00d      	b.n	801518a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 801516e:	f7fa ffdb 	bl	8010128 <HAL_RCC_GetSysClockFreq>
 8015172:	61f8      	str	r0, [r7, #28]
        break;
 8015174:	e009      	b.n	801518a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8015176:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 801517a:	61fb      	str	r3, [r7, #28]
        break;
 801517c:	e005      	b.n	801518a <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 801517e:	2300      	movs	r3, #0
 8015180:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8015182:	2301      	movs	r3, #1
 8015184:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8015188:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 801518a:	69fb      	ldr	r3, [r7, #28]
 801518c:	2b00      	cmp	r3, #0
 801518e:	d077      	beq.n	8015280 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8015190:	69fb      	ldr	r3, [r7, #28]
 8015192:	005a      	lsls	r2, r3, #1
 8015194:	68fb      	ldr	r3, [r7, #12]
 8015196:	685b      	ldr	r3, [r3, #4]
 8015198:	085b      	lsrs	r3, r3, #1
 801519a:	441a      	add	r2, r3
 801519c:	68fb      	ldr	r3, [r7, #12]
 801519e:	685b      	ldr	r3, [r3, #4]
 80151a0:	fbb2 f3f3 	udiv	r3, r2, r3
 80151a4:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80151a6:	69bb      	ldr	r3, [r7, #24]
 80151a8:	2b0f      	cmp	r3, #15
 80151aa:	d916      	bls.n	80151da <UART_SetConfig+0x4a6>
 80151ac:	69bb      	ldr	r3, [r7, #24]
 80151ae:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80151b2:	d212      	bcs.n	80151da <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80151b4:	69bb      	ldr	r3, [r7, #24]
 80151b6:	b29b      	uxth	r3, r3
 80151b8:	f023 030f 	bic.w	r3, r3, #15
 80151bc:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80151be:	69bb      	ldr	r3, [r7, #24]
 80151c0:	085b      	lsrs	r3, r3, #1
 80151c2:	b29b      	uxth	r3, r3
 80151c4:	f003 0307 	and.w	r3, r3, #7
 80151c8:	b29a      	uxth	r2, r3
 80151ca:	8afb      	ldrh	r3, [r7, #22]
 80151cc:	4313      	orrs	r3, r2
 80151ce:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 80151d0:	68fb      	ldr	r3, [r7, #12]
 80151d2:	681b      	ldr	r3, [r3, #0]
 80151d4:	8afa      	ldrh	r2, [r7, #22]
 80151d6:	60da      	str	r2, [r3, #12]
 80151d8:	e052      	b.n	8015280 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 80151da:	2301      	movs	r3, #1
 80151dc:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 80151e0:	e04e      	b.n	8015280 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 80151e2:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80151e6:	2b08      	cmp	r3, #8
 80151e8:	d827      	bhi.n	801523a <UART_SetConfig+0x506>
 80151ea:	a201      	add	r2, pc, #4	@ (adr r2, 80151f0 <UART_SetConfig+0x4bc>)
 80151ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80151f0:	08015215 	.word	0x08015215
 80151f4:	0801521d 	.word	0x0801521d
 80151f8:	08015225 	.word	0x08015225
 80151fc:	0801523b 	.word	0x0801523b
 8015200:	0801522b 	.word	0x0801522b
 8015204:	0801523b 	.word	0x0801523b
 8015208:	0801523b 	.word	0x0801523b
 801520c:	0801523b 	.word	0x0801523b
 8015210:	08015233 	.word	0x08015233
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8015214:	f7fb f820 	bl	8010258 <HAL_RCC_GetPCLK1Freq>
 8015218:	61f8      	str	r0, [r7, #28]
        break;
 801521a:	e014      	b.n	8015246 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 801521c:	f7fb f832 	bl	8010284 <HAL_RCC_GetPCLK2Freq>
 8015220:	61f8      	str	r0, [r7, #28]
        break;
 8015222:	e010      	b.n	8015246 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8015224:	4b1e      	ldr	r3, [pc, #120]	@ (80152a0 <UART_SetConfig+0x56c>)
 8015226:	61fb      	str	r3, [r7, #28]
        break;
 8015228:	e00d      	b.n	8015246 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 801522a:	f7fa ff7d 	bl	8010128 <HAL_RCC_GetSysClockFreq>
 801522e:	61f8      	str	r0, [r7, #28]
        break;
 8015230:	e009      	b.n	8015246 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8015232:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8015236:	61fb      	str	r3, [r7, #28]
        break;
 8015238:	e005      	b.n	8015246 <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 801523a:	2300      	movs	r3, #0
 801523c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 801523e:	2301      	movs	r3, #1
 8015240:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8015244:	bf00      	nop
    }

    if (pclk != 0U)
 8015246:	69fb      	ldr	r3, [r7, #28]
 8015248:	2b00      	cmp	r3, #0
 801524a:	d019      	beq.n	8015280 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 801524c:	68fb      	ldr	r3, [r7, #12]
 801524e:	685b      	ldr	r3, [r3, #4]
 8015250:	085a      	lsrs	r2, r3, #1
 8015252:	69fb      	ldr	r3, [r7, #28]
 8015254:	441a      	add	r2, r3
 8015256:	68fb      	ldr	r3, [r7, #12]
 8015258:	685b      	ldr	r3, [r3, #4]
 801525a:	fbb2 f3f3 	udiv	r3, r2, r3
 801525e:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8015260:	69bb      	ldr	r3, [r7, #24]
 8015262:	2b0f      	cmp	r3, #15
 8015264:	d909      	bls.n	801527a <UART_SetConfig+0x546>
 8015266:	69bb      	ldr	r3, [r7, #24]
 8015268:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 801526c:	d205      	bcs.n	801527a <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 801526e:	69bb      	ldr	r3, [r7, #24]
 8015270:	b29a      	uxth	r2, r3
 8015272:	68fb      	ldr	r3, [r7, #12]
 8015274:	681b      	ldr	r3, [r3, #0]
 8015276:	60da      	str	r2, [r3, #12]
 8015278:	e002      	b.n	8015280 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 801527a:	2301      	movs	r3, #1
 801527c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8015280:	68fb      	ldr	r3, [r7, #12]
 8015282:	2200      	movs	r2, #0
 8015284:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8015286:	68fb      	ldr	r3, [r7, #12]
 8015288:	2200      	movs	r2, #0
 801528a:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 801528c:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 8015290:	4618      	mov	r0, r3
 8015292:	3728      	adds	r7, #40	@ 0x28
 8015294:	46bd      	mov	sp, r7
 8015296:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 801529a:	bf00      	nop
 801529c:	40008000 	.word	0x40008000
 80152a0:	00f42400 	.word	0x00f42400

080152a4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80152a4:	b480      	push	{r7}
 80152a6:	b083      	sub	sp, #12
 80152a8:	af00      	add	r7, sp, #0
 80152aa:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80152ac:	687b      	ldr	r3, [r7, #4]
 80152ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80152b0:	f003 0308 	and.w	r3, r3, #8
 80152b4:	2b00      	cmp	r3, #0
 80152b6:	d00a      	beq.n	80152ce <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80152b8:	687b      	ldr	r3, [r7, #4]
 80152ba:	681b      	ldr	r3, [r3, #0]
 80152bc:	685b      	ldr	r3, [r3, #4]
 80152be:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 80152c2:	687b      	ldr	r3, [r7, #4]
 80152c4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80152c6:	687b      	ldr	r3, [r7, #4]
 80152c8:	681b      	ldr	r3, [r3, #0]
 80152ca:	430a      	orrs	r2, r1
 80152cc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80152ce:	687b      	ldr	r3, [r7, #4]
 80152d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80152d2:	f003 0301 	and.w	r3, r3, #1
 80152d6:	2b00      	cmp	r3, #0
 80152d8:	d00a      	beq.n	80152f0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80152da:	687b      	ldr	r3, [r7, #4]
 80152dc:	681b      	ldr	r3, [r3, #0]
 80152de:	685b      	ldr	r3, [r3, #4]
 80152e0:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 80152e4:	687b      	ldr	r3, [r7, #4]
 80152e6:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80152e8:	687b      	ldr	r3, [r7, #4]
 80152ea:	681b      	ldr	r3, [r3, #0]
 80152ec:	430a      	orrs	r2, r1
 80152ee:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80152f0:	687b      	ldr	r3, [r7, #4]
 80152f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80152f4:	f003 0302 	and.w	r3, r3, #2
 80152f8:	2b00      	cmp	r3, #0
 80152fa:	d00a      	beq.n	8015312 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80152fc:	687b      	ldr	r3, [r7, #4]
 80152fe:	681b      	ldr	r3, [r3, #0]
 8015300:	685b      	ldr	r3, [r3, #4]
 8015302:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8015306:	687b      	ldr	r3, [r7, #4]
 8015308:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801530a:	687b      	ldr	r3, [r7, #4]
 801530c:	681b      	ldr	r3, [r3, #0]
 801530e:	430a      	orrs	r2, r1
 8015310:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8015312:	687b      	ldr	r3, [r7, #4]
 8015314:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8015316:	f003 0304 	and.w	r3, r3, #4
 801531a:	2b00      	cmp	r3, #0
 801531c:	d00a      	beq.n	8015334 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 801531e:	687b      	ldr	r3, [r7, #4]
 8015320:	681b      	ldr	r3, [r3, #0]
 8015322:	685b      	ldr	r3, [r3, #4]
 8015324:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8015328:	687b      	ldr	r3, [r7, #4]
 801532a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 801532c:	687b      	ldr	r3, [r7, #4]
 801532e:	681b      	ldr	r3, [r3, #0]
 8015330:	430a      	orrs	r2, r1
 8015332:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8015334:	687b      	ldr	r3, [r7, #4]
 8015336:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8015338:	f003 0310 	and.w	r3, r3, #16
 801533c:	2b00      	cmp	r3, #0
 801533e:	d00a      	beq.n	8015356 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8015340:	687b      	ldr	r3, [r7, #4]
 8015342:	681b      	ldr	r3, [r3, #0]
 8015344:	689b      	ldr	r3, [r3, #8]
 8015346:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 801534a:	687b      	ldr	r3, [r7, #4]
 801534c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 801534e:	687b      	ldr	r3, [r7, #4]
 8015350:	681b      	ldr	r3, [r3, #0]
 8015352:	430a      	orrs	r2, r1
 8015354:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8015356:	687b      	ldr	r3, [r7, #4]
 8015358:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801535a:	f003 0320 	and.w	r3, r3, #32
 801535e:	2b00      	cmp	r3, #0
 8015360:	d00a      	beq.n	8015378 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8015362:	687b      	ldr	r3, [r7, #4]
 8015364:	681b      	ldr	r3, [r3, #0]
 8015366:	689b      	ldr	r3, [r3, #8]
 8015368:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 801536c:	687b      	ldr	r3, [r7, #4]
 801536e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8015370:	687b      	ldr	r3, [r7, #4]
 8015372:	681b      	ldr	r3, [r3, #0]
 8015374:	430a      	orrs	r2, r1
 8015376:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8015378:	687b      	ldr	r3, [r7, #4]
 801537a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801537c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8015380:	2b00      	cmp	r3, #0
 8015382:	d01a      	beq.n	80153ba <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8015384:	687b      	ldr	r3, [r7, #4]
 8015386:	681b      	ldr	r3, [r3, #0]
 8015388:	685b      	ldr	r3, [r3, #4]
 801538a:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 801538e:	687b      	ldr	r3, [r7, #4]
 8015390:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8015392:	687b      	ldr	r3, [r7, #4]
 8015394:	681b      	ldr	r3, [r3, #0]
 8015396:	430a      	orrs	r2, r1
 8015398:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 801539a:	687b      	ldr	r3, [r7, #4]
 801539c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801539e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80153a2:	d10a      	bne.n	80153ba <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80153a4:	687b      	ldr	r3, [r7, #4]
 80153a6:	681b      	ldr	r3, [r3, #0]
 80153a8:	685b      	ldr	r3, [r3, #4]
 80153aa:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 80153ae:	687b      	ldr	r3, [r7, #4]
 80153b0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80153b2:	687b      	ldr	r3, [r7, #4]
 80153b4:	681b      	ldr	r3, [r3, #0]
 80153b6:	430a      	orrs	r2, r1
 80153b8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80153ba:	687b      	ldr	r3, [r7, #4]
 80153bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80153be:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80153c2:	2b00      	cmp	r3, #0
 80153c4:	d00a      	beq.n	80153dc <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80153c6:	687b      	ldr	r3, [r7, #4]
 80153c8:	681b      	ldr	r3, [r3, #0]
 80153ca:	685b      	ldr	r3, [r3, #4]
 80153cc:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 80153d0:	687b      	ldr	r3, [r7, #4]
 80153d2:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80153d4:	687b      	ldr	r3, [r7, #4]
 80153d6:	681b      	ldr	r3, [r3, #0]
 80153d8:	430a      	orrs	r2, r1
 80153da:	605a      	str	r2, [r3, #4]
  }
}
 80153dc:	bf00      	nop
 80153de:	370c      	adds	r7, #12
 80153e0:	46bd      	mov	sp, r7
 80153e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80153e6:	4770      	bx	lr

080153e8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80153e8:	b580      	push	{r7, lr}
 80153ea:	b098      	sub	sp, #96	@ 0x60
 80153ec:	af02      	add	r7, sp, #8
 80153ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80153f0:	687b      	ldr	r3, [r7, #4]
 80153f2:	2200      	movs	r2, #0
 80153f4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80153f8:	f7f5 fcfe 	bl	800adf8 <HAL_GetTick>
 80153fc:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80153fe:	687b      	ldr	r3, [r7, #4]
 8015400:	681b      	ldr	r3, [r3, #0]
 8015402:	681b      	ldr	r3, [r3, #0]
 8015404:	f003 0308 	and.w	r3, r3, #8
 8015408:	2b08      	cmp	r3, #8
 801540a:	d12e      	bne.n	801546a <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 801540c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8015410:	9300      	str	r3, [sp, #0]
 8015412:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8015414:	2200      	movs	r2, #0
 8015416:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 801541a:	6878      	ldr	r0, [r7, #4]
 801541c:	f000 f88c 	bl	8015538 <UART_WaitOnFlagUntilTimeout>
 8015420:	4603      	mov	r3, r0
 8015422:	2b00      	cmp	r3, #0
 8015424:	d021      	beq.n	801546a <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8015426:	687b      	ldr	r3, [r7, #4]
 8015428:	681b      	ldr	r3, [r3, #0]
 801542a:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801542c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801542e:	e853 3f00 	ldrex	r3, [r3]
 8015432:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8015434:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8015436:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 801543a:	653b      	str	r3, [r7, #80]	@ 0x50
 801543c:	687b      	ldr	r3, [r7, #4]
 801543e:	681b      	ldr	r3, [r3, #0]
 8015440:	461a      	mov	r2, r3
 8015442:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8015444:	647b      	str	r3, [r7, #68]	@ 0x44
 8015446:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8015448:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 801544a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 801544c:	e841 2300 	strex	r3, r2, [r1]
 8015450:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8015452:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8015454:	2b00      	cmp	r3, #0
 8015456:	d1e6      	bne.n	8015426 <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8015458:	687b      	ldr	r3, [r7, #4]
 801545a:	2220      	movs	r2, #32
 801545c:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 801545e:	687b      	ldr	r3, [r7, #4]
 8015460:	2200      	movs	r2, #0
 8015462:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8015466:	2303      	movs	r3, #3
 8015468:	e062      	b.n	8015530 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 801546a:	687b      	ldr	r3, [r7, #4]
 801546c:	681b      	ldr	r3, [r3, #0]
 801546e:	681b      	ldr	r3, [r3, #0]
 8015470:	f003 0304 	and.w	r3, r3, #4
 8015474:	2b04      	cmp	r3, #4
 8015476:	d149      	bne.n	801550c <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8015478:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 801547c:	9300      	str	r3, [sp, #0]
 801547e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8015480:	2200      	movs	r2, #0
 8015482:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8015486:	6878      	ldr	r0, [r7, #4]
 8015488:	f000 f856 	bl	8015538 <UART_WaitOnFlagUntilTimeout>
 801548c:	4603      	mov	r3, r0
 801548e:	2b00      	cmp	r3, #0
 8015490:	d03c      	beq.n	801550c <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8015492:	687b      	ldr	r3, [r7, #4]
 8015494:	681b      	ldr	r3, [r3, #0]
 8015496:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8015498:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801549a:	e853 3f00 	ldrex	r3, [r3]
 801549e:	623b      	str	r3, [r7, #32]
   return(result);
 80154a0:	6a3b      	ldr	r3, [r7, #32]
 80154a2:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80154a6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80154a8:	687b      	ldr	r3, [r7, #4]
 80154aa:	681b      	ldr	r3, [r3, #0]
 80154ac:	461a      	mov	r2, r3
 80154ae:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80154b0:	633b      	str	r3, [r7, #48]	@ 0x30
 80154b2:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80154b4:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80154b6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80154b8:	e841 2300 	strex	r3, r2, [r1]
 80154bc:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80154be:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80154c0:	2b00      	cmp	r3, #0
 80154c2:	d1e6      	bne.n	8015492 <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80154c4:	687b      	ldr	r3, [r7, #4]
 80154c6:	681b      	ldr	r3, [r3, #0]
 80154c8:	3308      	adds	r3, #8
 80154ca:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80154cc:	693b      	ldr	r3, [r7, #16]
 80154ce:	e853 3f00 	ldrex	r3, [r3]
 80154d2:	60fb      	str	r3, [r7, #12]
   return(result);
 80154d4:	68fb      	ldr	r3, [r7, #12]
 80154d6:	f023 0301 	bic.w	r3, r3, #1
 80154da:	64bb      	str	r3, [r7, #72]	@ 0x48
 80154dc:	687b      	ldr	r3, [r7, #4]
 80154de:	681b      	ldr	r3, [r3, #0]
 80154e0:	3308      	adds	r3, #8
 80154e2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80154e4:	61fa      	str	r2, [r7, #28]
 80154e6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80154e8:	69b9      	ldr	r1, [r7, #24]
 80154ea:	69fa      	ldr	r2, [r7, #28]
 80154ec:	e841 2300 	strex	r3, r2, [r1]
 80154f0:	617b      	str	r3, [r7, #20]
   return(result);
 80154f2:	697b      	ldr	r3, [r7, #20]
 80154f4:	2b00      	cmp	r3, #0
 80154f6:	d1e5      	bne.n	80154c4 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 80154f8:	687b      	ldr	r3, [r7, #4]
 80154fa:	2220      	movs	r2, #32
 80154fc:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8015500:	687b      	ldr	r3, [r7, #4]
 8015502:	2200      	movs	r2, #0
 8015504:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8015508:	2303      	movs	r3, #3
 801550a:	e011      	b.n	8015530 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 801550c:	687b      	ldr	r3, [r7, #4]
 801550e:	2220      	movs	r2, #32
 8015510:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8015512:	687b      	ldr	r3, [r7, #4]
 8015514:	2220      	movs	r2, #32
 8015516:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801551a:	687b      	ldr	r3, [r7, #4]
 801551c:	2200      	movs	r2, #0
 801551e:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8015520:	687b      	ldr	r3, [r7, #4]
 8015522:	2200      	movs	r2, #0
 8015524:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8015526:	687b      	ldr	r3, [r7, #4]
 8015528:	2200      	movs	r2, #0
 801552a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 801552e:	2300      	movs	r3, #0
}
 8015530:	4618      	mov	r0, r3
 8015532:	3758      	adds	r7, #88	@ 0x58
 8015534:	46bd      	mov	sp, r7
 8015536:	bd80      	pop	{r7, pc}

08015538 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8015538:	b580      	push	{r7, lr}
 801553a:	b084      	sub	sp, #16
 801553c:	af00      	add	r7, sp, #0
 801553e:	60f8      	str	r0, [r7, #12]
 8015540:	60b9      	str	r1, [r7, #8]
 8015542:	603b      	str	r3, [r7, #0]
 8015544:	4613      	mov	r3, r2
 8015546:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8015548:	e04f      	b.n	80155ea <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 801554a:	69bb      	ldr	r3, [r7, #24]
 801554c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8015550:	d04b      	beq.n	80155ea <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8015552:	f7f5 fc51 	bl	800adf8 <HAL_GetTick>
 8015556:	4602      	mov	r2, r0
 8015558:	683b      	ldr	r3, [r7, #0]
 801555a:	1ad3      	subs	r3, r2, r3
 801555c:	69ba      	ldr	r2, [r7, #24]
 801555e:	429a      	cmp	r2, r3
 8015560:	d302      	bcc.n	8015568 <UART_WaitOnFlagUntilTimeout+0x30>
 8015562:	69bb      	ldr	r3, [r7, #24]
 8015564:	2b00      	cmp	r3, #0
 8015566:	d101      	bne.n	801556c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8015568:	2303      	movs	r3, #3
 801556a:	e04e      	b.n	801560a <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 801556c:	68fb      	ldr	r3, [r7, #12]
 801556e:	681b      	ldr	r3, [r3, #0]
 8015570:	681b      	ldr	r3, [r3, #0]
 8015572:	f003 0304 	and.w	r3, r3, #4
 8015576:	2b00      	cmp	r3, #0
 8015578:	d037      	beq.n	80155ea <UART_WaitOnFlagUntilTimeout+0xb2>
 801557a:	68bb      	ldr	r3, [r7, #8]
 801557c:	2b80      	cmp	r3, #128	@ 0x80
 801557e:	d034      	beq.n	80155ea <UART_WaitOnFlagUntilTimeout+0xb2>
 8015580:	68bb      	ldr	r3, [r7, #8]
 8015582:	2b40      	cmp	r3, #64	@ 0x40
 8015584:	d031      	beq.n	80155ea <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8015586:	68fb      	ldr	r3, [r7, #12]
 8015588:	681b      	ldr	r3, [r3, #0]
 801558a:	69db      	ldr	r3, [r3, #28]
 801558c:	f003 0308 	and.w	r3, r3, #8
 8015590:	2b08      	cmp	r3, #8
 8015592:	d110      	bne.n	80155b6 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8015594:	68fb      	ldr	r3, [r7, #12]
 8015596:	681b      	ldr	r3, [r3, #0]
 8015598:	2208      	movs	r2, #8
 801559a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 801559c:	68f8      	ldr	r0, [r7, #12]
 801559e:	f000 f8ff 	bl	80157a0 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80155a2:	68fb      	ldr	r3, [r7, #12]
 80155a4:	2208      	movs	r2, #8
 80155a6:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80155aa:	68fb      	ldr	r3, [r7, #12]
 80155ac:	2200      	movs	r2, #0
 80155ae:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 80155b2:	2301      	movs	r3, #1
 80155b4:	e029      	b.n	801560a <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80155b6:	68fb      	ldr	r3, [r7, #12]
 80155b8:	681b      	ldr	r3, [r3, #0]
 80155ba:	69db      	ldr	r3, [r3, #28]
 80155bc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80155c0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80155c4:	d111      	bne.n	80155ea <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80155c6:	68fb      	ldr	r3, [r7, #12]
 80155c8:	681b      	ldr	r3, [r3, #0]
 80155ca:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80155ce:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80155d0:	68f8      	ldr	r0, [r7, #12]
 80155d2:	f000 f8e5 	bl	80157a0 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80155d6:	68fb      	ldr	r3, [r7, #12]
 80155d8:	2220      	movs	r2, #32
 80155da:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80155de:	68fb      	ldr	r3, [r7, #12]
 80155e0:	2200      	movs	r2, #0
 80155e2:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 80155e6:	2303      	movs	r3, #3
 80155e8:	e00f      	b.n	801560a <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80155ea:	68fb      	ldr	r3, [r7, #12]
 80155ec:	681b      	ldr	r3, [r3, #0]
 80155ee:	69da      	ldr	r2, [r3, #28]
 80155f0:	68bb      	ldr	r3, [r7, #8]
 80155f2:	4013      	ands	r3, r2
 80155f4:	68ba      	ldr	r2, [r7, #8]
 80155f6:	429a      	cmp	r2, r3
 80155f8:	bf0c      	ite	eq
 80155fa:	2301      	moveq	r3, #1
 80155fc:	2300      	movne	r3, #0
 80155fe:	b2db      	uxtb	r3, r3
 8015600:	461a      	mov	r2, r3
 8015602:	79fb      	ldrb	r3, [r7, #7]
 8015604:	429a      	cmp	r2, r3
 8015606:	d0a0      	beq.n	801554a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8015608:	2300      	movs	r3, #0
}
 801560a:	4618      	mov	r0, r3
 801560c:	3710      	adds	r7, #16
 801560e:	46bd      	mov	sp, r7
 8015610:	bd80      	pop	{r7, pc}
	...

08015614 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8015614:	b580      	push	{r7, lr}
 8015616:	b096      	sub	sp, #88	@ 0x58
 8015618:	af00      	add	r7, sp, #0
 801561a:	60f8      	str	r0, [r7, #12]
 801561c:	60b9      	str	r1, [r7, #8]
 801561e:	4613      	mov	r3, r2
 8015620:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8015622:	68fb      	ldr	r3, [r7, #12]
 8015624:	68ba      	ldr	r2, [r7, #8]
 8015626:	655a      	str	r2, [r3, #84]	@ 0x54
  huart->RxXferSize = Size;
 8015628:	68fb      	ldr	r3, [r7, #12]
 801562a:	88fa      	ldrh	r2, [r7, #6]
 801562c:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8015630:	68fb      	ldr	r3, [r7, #12]
 8015632:	2200      	movs	r2, #0
 8015634:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8015638:	68fb      	ldr	r3, [r7, #12]
 801563a:	2222      	movs	r2, #34	@ 0x22
 801563c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  if (huart->hdmarx != NULL)
 8015640:	68fb      	ldr	r3, [r7, #12]
 8015642:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8015644:	2b00      	cmp	r3, #0
 8015646:	d028      	beq.n	801569a <UART_Start_Receive_DMA+0x86>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8015648:	68fb      	ldr	r3, [r7, #12]
 801564a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801564c:	4a3e      	ldr	r2, [pc, #248]	@ (8015748 <UART_Start_Receive_DMA+0x134>)
 801564e:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8015650:	68fb      	ldr	r3, [r7, #12]
 8015652:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8015654:	4a3d      	ldr	r2, [pc, #244]	@ (801574c <UART_Start_Receive_DMA+0x138>)
 8015656:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8015658:	68fb      	ldr	r3, [r7, #12]
 801565a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801565c:	4a3c      	ldr	r2, [pc, #240]	@ (8015750 <UART_Start_Receive_DMA+0x13c>)
 801565e:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 8015660:	68fb      	ldr	r3, [r7, #12]
 8015662:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8015664:	2200      	movs	r2, #0
 8015666:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 8015668:	68fb      	ldr	r3, [r7, #12]
 801566a:	6f58      	ldr	r0, [r3, #116]	@ 0x74
 801566c:	68fb      	ldr	r3, [r7, #12]
 801566e:	681b      	ldr	r3, [r3, #0]
 8015670:	3324      	adds	r3, #36	@ 0x24
 8015672:	4619      	mov	r1, r3
 8015674:	68fb      	ldr	r3, [r7, #12]
 8015676:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8015678:	461a      	mov	r2, r3
 801567a:	88fb      	ldrh	r3, [r7, #6]
 801567c:	f7f7 fba2 	bl	800cdc4 <HAL_DMA_Start_IT>
 8015680:	4603      	mov	r3, r0
 8015682:	2b00      	cmp	r3, #0
 8015684:	d009      	beq.n	801569a <UART_Start_Receive_DMA+0x86>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 8015686:	68fb      	ldr	r3, [r7, #12]
 8015688:	2210      	movs	r2, #16
 801568a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 801568e:	68fb      	ldr	r3, [r7, #12]
 8015690:	2220      	movs	r2, #32
 8015692:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      return HAL_ERROR;
 8015696:	2301      	movs	r3, #1
 8015698:	e051      	b.n	801573e <UART_Start_Receive_DMA+0x12a>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 801569a:	68fb      	ldr	r3, [r7, #12]
 801569c:	691b      	ldr	r3, [r3, #16]
 801569e:	2b00      	cmp	r3, #0
 80156a0:	d018      	beq.n	80156d4 <UART_Start_Receive_DMA+0xc0>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80156a2:	68fb      	ldr	r3, [r7, #12]
 80156a4:	681b      	ldr	r3, [r3, #0]
 80156a6:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80156a8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80156aa:	e853 3f00 	ldrex	r3, [r3]
 80156ae:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80156b0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80156b2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80156b6:	657b      	str	r3, [r7, #84]	@ 0x54
 80156b8:	68fb      	ldr	r3, [r7, #12]
 80156ba:	681b      	ldr	r3, [r3, #0]
 80156bc:	461a      	mov	r2, r3
 80156be:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80156c0:	64bb      	str	r3, [r7, #72]	@ 0x48
 80156c2:	647a      	str	r2, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80156c4:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 80156c6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80156c8:	e841 2300 	strex	r3, r2, [r1]
 80156cc:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 80156ce:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80156d0:	2b00      	cmp	r3, #0
 80156d2:	d1e6      	bne.n	80156a2 <UART_Start_Receive_DMA+0x8e>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80156d4:	68fb      	ldr	r3, [r7, #12]
 80156d6:	681b      	ldr	r3, [r3, #0]
 80156d8:	3308      	adds	r3, #8
 80156da:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80156dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80156de:	e853 3f00 	ldrex	r3, [r3]
 80156e2:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80156e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80156e6:	f043 0301 	orr.w	r3, r3, #1
 80156ea:	653b      	str	r3, [r7, #80]	@ 0x50
 80156ec:	68fb      	ldr	r3, [r7, #12]
 80156ee:	681b      	ldr	r3, [r3, #0]
 80156f0:	3308      	adds	r3, #8
 80156f2:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 80156f4:	637a      	str	r2, [r7, #52]	@ 0x34
 80156f6:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80156f8:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80156fa:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80156fc:	e841 2300 	strex	r3, r2, [r1]
 8015700:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8015702:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015704:	2b00      	cmp	r3, #0
 8015706:	d1e5      	bne.n	80156d4 <UART_Start_Receive_DMA+0xc0>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8015708:	68fb      	ldr	r3, [r7, #12]
 801570a:	681b      	ldr	r3, [r3, #0]
 801570c:	3308      	adds	r3, #8
 801570e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8015710:	697b      	ldr	r3, [r7, #20]
 8015712:	e853 3f00 	ldrex	r3, [r3]
 8015716:	613b      	str	r3, [r7, #16]
   return(result);
 8015718:	693b      	ldr	r3, [r7, #16]
 801571a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801571e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8015720:	68fb      	ldr	r3, [r7, #12]
 8015722:	681b      	ldr	r3, [r3, #0]
 8015724:	3308      	adds	r3, #8
 8015726:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8015728:	623a      	str	r2, [r7, #32]
 801572a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801572c:	69f9      	ldr	r1, [r7, #28]
 801572e:	6a3a      	ldr	r2, [r7, #32]
 8015730:	e841 2300 	strex	r3, r2, [r1]
 8015734:	61bb      	str	r3, [r7, #24]
   return(result);
 8015736:	69bb      	ldr	r3, [r7, #24]
 8015738:	2b00      	cmp	r3, #0
 801573a:	d1e5      	bne.n	8015708 <UART_Start_Receive_DMA+0xf4>

  return HAL_OK;
 801573c:	2300      	movs	r3, #0
}
 801573e:	4618      	mov	r0, r3
 8015740:	3758      	adds	r7, #88	@ 0x58
 8015742:	46bd      	mov	sp, r7
 8015744:	bd80      	pop	{r7, pc}
 8015746:	bf00      	nop
 8015748:	0801591f 	.word	0x0801591f
 801574c:	08015a4b 	.word	0x08015a4b
 8015750:	08015a89 	.word	0x08015a89

08015754 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8015754:	b480      	push	{r7}
 8015756:	b089      	sub	sp, #36	@ 0x24
 8015758:	af00      	add	r7, sp, #0
 801575a:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
#else
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 801575c:	687b      	ldr	r3, [r7, #4]
 801575e:	681b      	ldr	r3, [r3, #0]
 8015760:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8015762:	68fb      	ldr	r3, [r7, #12]
 8015764:	e853 3f00 	ldrex	r3, [r3]
 8015768:	60bb      	str	r3, [r7, #8]
   return(result);
 801576a:	68bb      	ldr	r3, [r7, #8]
 801576c:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8015770:	61fb      	str	r3, [r7, #28]
 8015772:	687b      	ldr	r3, [r7, #4]
 8015774:	681b      	ldr	r3, [r3, #0]
 8015776:	461a      	mov	r2, r3
 8015778:	69fb      	ldr	r3, [r7, #28]
 801577a:	61bb      	str	r3, [r7, #24]
 801577c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801577e:	6979      	ldr	r1, [r7, #20]
 8015780:	69ba      	ldr	r2, [r7, #24]
 8015782:	e841 2300 	strex	r3, r2, [r1]
 8015786:	613b      	str	r3, [r7, #16]
   return(result);
 8015788:	693b      	ldr	r3, [r7, #16]
 801578a:	2b00      	cmp	r3, #0
 801578c:	d1e6      	bne.n	801575c <UART_EndTxTransfer+0x8>
#endif /* USART_CR1_FIFOEN */

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 801578e:	687b      	ldr	r3, [r7, #4]
 8015790:	2220      	movs	r2, #32
 8015792:	67da      	str	r2, [r3, #124]	@ 0x7c
}
 8015794:	bf00      	nop
 8015796:	3724      	adds	r7, #36	@ 0x24
 8015798:	46bd      	mov	sp, r7
 801579a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801579e:	4770      	bx	lr

080157a0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80157a0:	b480      	push	{r7}
 80157a2:	b095      	sub	sp, #84	@ 0x54
 80157a4:	af00      	add	r7, sp, #0
 80157a6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80157a8:	687b      	ldr	r3, [r7, #4]
 80157aa:	681b      	ldr	r3, [r3, #0]
 80157ac:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80157ae:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80157b0:	e853 3f00 	ldrex	r3, [r3]
 80157b4:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80157b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80157b8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80157bc:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80157be:	687b      	ldr	r3, [r7, #4]
 80157c0:	681b      	ldr	r3, [r3, #0]
 80157c2:	461a      	mov	r2, r3
 80157c4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80157c6:	643b      	str	r3, [r7, #64]	@ 0x40
 80157c8:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80157ca:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80157cc:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80157ce:	e841 2300 	strex	r3, r2, [r1]
 80157d2:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80157d4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80157d6:	2b00      	cmp	r3, #0
 80157d8:	d1e6      	bne.n	80157a8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80157da:	687b      	ldr	r3, [r7, #4]
 80157dc:	681b      	ldr	r3, [r3, #0]
 80157de:	3308      	adds	r3, #8
 80157e0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80157e2:	6a3b      	ldr	r3, [r7, #32]
 80157e4:	e853 3f00 	ldrex	r3, [r3]
 80157e8:	61fb      	str	r3, [r7, #28]
   return(result);
 80157ea:	69fb      	ldr	r3, [r7, #28]
 80157ec:	f023 0301 	bic.w	r3, r3, #1
 80157f0:	64bb      	str	r3, [r7, #72]	@ 0x48
 80157f2:	687b      	ldr	r3, [r7, #4]
 80157f4:	681b      	ldr	r3, [r3, #0]
 80157f6:	3308      	adds	r3, #8
 80157f8:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80157fa:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80157fc:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80157fe:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8015800:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8015802:	e841 2300 	strex	r3, r2, [r1]
 8015806:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8015808:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801580a:	2b00      	cmp	r3, #0
 801580c:	d1e5      	bne.n	80157da <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 801580e:	687b      	ldr	r3, [r7, #4]
 8015810:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8015812:	2b01      	cmp	r3, #1
 8015814:	d118      	bne.n	8015848 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8015816:	687b      	ldr	r3, [r7, #4]
 8015818:	681b      	ldr	r3, [r3, #0]
 801581a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801581c:	68fb      	ldr	r3, [r7, #12]
 801581e:	e853 3f00 	ldrex	r3, [r3]
 8015822:	60bb      	str	r3, [r7, #8]
   return(result);
 8015824:	68bb      	ldr	r3, [r7, #8]
 8015826:	f023 0310 	bic.w	r3, r3, #16
 801582a:	647b      	str	r3, [r7, #68]	@ 0x44
 801582c:	687b      	ldr	r3, [r7, #4]
 801582e:	681b      	ldr	r3, [r3, #0]
 8015830:	461a      	mov	r2, r3
 8015832:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8015834:	61bb      	str	r3, [r7, #24]
 8015836:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8015838:	6979      	ldr	r1, [r7, #20]
 801583a:	69ba      	ldr	r2, [r7, #24]
 801583c:	e841 2300 	strex	r3, r2, [r1]
 8015840:	613b      	str	r3, [r7, #16]
   return(result);
 8015842:	693b      	ldr	r3, [r7, #16]
 8015844:	2b00      	cmp	r3, #0
 8015846:	d1e6      	bne.n	8015816 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8015848:	687b      	ldr	r3, [r7, #4]
 801584a:	2220      	movs	r2, #32
 801584c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8015850:	687b      	ldr	r3, [r7, #4]
 8015852:	2200      	movs	r2, #0
 8015854:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8015856:	687b      	ldr	r3, [r7, #4]
 8015858:	2200      	movs	r2, #0
 801585a:	669a      	str	r2, [r3, #104]	@ 0x68
}
 801585c:	bf00      	nop
 801585e:	3754      	adds	r7, #84	@ 0x54
 8015860:	46bd      	mov	sp, r7
 8015862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015866:	4770      	bx	lr

08015868 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8015868:	b580      	push	{r7, lr}
 801586a:	b090      	sub	sp, #64	@ 0x40
 801586c:	af00      	add	r7, sp, #0
 801586e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8015870:	687b      	ldr	r3, [r7, #4]
 8015872:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8015874:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8015876:	687b      	ldr	r3, [r7, #4]
 8015878:	681b      	ldr	r3, [r3, #0]
 801587a:	681b      	ldr	r3, [r3, #0]
 801587c:	f003 0320 	and.w	r3, r3, #32
 8015880:	2b00      	cmp	r3, #0
 8015882:	d137      	bne.n	80158f4 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0U;
 8015884:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8015886:	2200      	movs	r2, #0
 8015888:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 801588c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801588e:	681b      	ldr	r3, [r3, #0]
 8015890:	3308      	adds	r3, #8
 8015892:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8015894:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015896:	e853 3f00 	ldrex	r3, [r3]
 801589a:	623b      	str	r3, [r7, #32]
   return(result);
 801589c:	6a3b      	ldr	r3, [r7, #32]
 801589e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80158a2:	63bb      	str	r3, [r7, #56]	@ 0x38
 80158a4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80158a6:	681b      	ldr	r3, [r3, #0]
 80158a8:	3308      	adds	r3, #8
 80158aa:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80158ac:	633a      	str	r2, [r7, #48]	@ 0x30
 80158ae:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80158b0:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80158b2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80158b4:	e841 2300 	strex	r3, r2, [r1]
 80158b8:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80158ba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80158bc:	2b00      	cmp	r3, #0
 80158be:	d1e5      	bne.n	801588c <UART_DMATransmitCplt+0x24>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80158c0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80158c2:	681b      	ldr	r3, [r3, #0]
 80158c4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80158c6:	693b      	ldr	r3, [r7, #16]
 80158c8:	e853 3f00 	ldrex	r3, [r3]
 80158cc:	60fb      	str	r3, [r7, #12]
   return(result);
 80158ce:	68fb      	ldr	r3, [r7, #12]
 80158d0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80158d4:	637b      	str	r3, [r7, #52]	@ 0x34
 80158d6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80158d8:	681b      	ldr	r3, [r3, #0]
 80158da:	461a      	mov	r2, r3
 80158dc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80158de:	61fb      	str	r3, [r7, #28]
 80158e0:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80158e2:	69b9      	ldr	r1, [r7, #24]
 80158e4:	69fa      	ldr	r2, [r7, #28]
 80158e6:	e841 2300 	strex	r3, r2, [r1]
 80158ea:	617b      	str	r3, [r7, #20]
   return(result);
 80158ec:	697b      	ldr	r3, [r7, #20]
 80158ee:	2b00      	cmp	r3, #0
 80158f0:	d1e6      	bne.n	80158c0 <UART_DMATransmitCplt+0x58>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80158f2:	e002      	b.n	80158fa <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 80158f4:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 80158f6:	f7ed f845 	bl	8002984 <HAL_UART_TxCpltCallback>
}
 80158fa:	bf00      	nop
 80158fc:	3740      	adds	r7, #64	@ 0x40
 80158fe:	46bd      	mov	sp, r7
 8015900:	bd80      	pop	{r7, pc}

08015902 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8015902:	b580      	push	{r7, lr}
 8015904:	b084      	sub	sp, #16
 8015906:	af00      	add	r7, sp, #0
 8015908:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 801590a:	687b      	ldr	r3, [r7, #4]
 801590c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801590e:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8015910:	68f8      	ldr	r0, [r7, #12]
 8015912:	f7ff f9f1 	bl	8014cf8 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8015916:	bf00      	nop
 8015918:	3710      	adds	r7, #16
 801591a:	46bd      	mov	sp, r7
 801591c:	bd80      	pop	{r7, pc}

0801591e <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 801591e:	b580      	push	{r7, lr}
 8015920:	b09c      	sub	sp, #112	@ 0x70
 8015922:	af00      	add	r7, sp, #0
 8015924:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8015926:	687b      	ldr	r3, [r7, #4]
 8015928:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801592a:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 801592c:	687b      	ldr	r3, [r7, #4]
 801592e:	681b      	ldr	r3, [r3, #0]
 8015930:	681b      	ldr	r3, [r3, #0]
 8015932:	f003 0320 	and.w	r3, r3, #32
 8015936:	2b00      	cmp	r3, #0
 8015938:	d171      	bne.n	8015a1e <UART_DMAReceiveCplt+0x100>
  {
    huart->RxXferCount = 0U;
 801593a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 801593c:	2200      	movs	r2, #0
 801593e:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8015942:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8015944:	681b      	ldr	r3, [r3, #0]
 8015946:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8015948:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801594a:	e853 3f00 	ldrex	r3, [r3]
 801594e:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8015950:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8015952:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8015956:	66bb      	str	r3, [r7, #104]	@ 0x68
 8015958:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 801595a:	681b      	ldr	r3, [r3, #0]
 801595c:	461a      	mov	r2, r3
 801595e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8015960:	65bb      	str	r3, [r7, #88]	@ 0x58
 8015962:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8015964:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8015966:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8015968:	e841 2300 	strex	r3, r2, [r1]
 801596c:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 801596e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8015970:	2b00      	cmp	r3, #0
 8015972:	d1e6      	bne.n	8015942 <UART_DMAReceiveCplt+0x24>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8015974:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8015976:	681b      	ldr	r3, [r3, #0]
 8015978:	3308      	adds	r3, #8
 801597a:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801597c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801597e:	e853 3f00 	ldrex	r3, [r3]
 8015982:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8015984:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8015986:	f023 0301 	bic.w	r3, r3, #1
 801598a:	667b      	str	r3, [r7, #100]	@ 0x64
 801598c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 801598e:	681b      	ldr	r3, [r3, #0]
 8015990:	3308      	adds	r3, #8
 8015992:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8015994:	647a      	str	r2, [r7, #68]	@ 0x44
 8015996:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8015998:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 801599a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 801599c:	e841 2300 	strex	r3, r2, [r1]
 80159a0:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80159a2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80159a4:	2b00      	cmp	r3, #0
 80159a6:	d1e5      	bne.n	8015974 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80159a8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80159aa:	681b      	ldr	r3, [r3, #0]
 80159ac:	3308      	adds	r3, #8
 80159ae:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80159b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80159b2:	e853 3f00 	ldrex	r3, [r3]
 80159b6:	623b      	str	r3, [r7, #32]
   return(result);
 80159b8:	6a3b      	ldr	r3, [r7, #32]
 80159ba:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80159be:	663b      	str	r3, [r7, #96]	@ 0x60
 80159c0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80159c2:	681b      	ldr	r3, [r3, #0]
 80159c4:	3308      	adds	r3, #8
 80159c6:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 80159c8:	633a      	str	r2, [r7, #48]	@ 0x30
 80159ca:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80159cc:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80159ce:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80159d0:	e841 2300 	strex	r3, r2, [r1]
 80159d4:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80159d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80159d8:	2b00      	cmp	r3, #0
 80159da:	d1e5      	bne.n	80159a8 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80159dc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80159de:	2220      	movs	r2, #32
 80159e0:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80159e4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80159e6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80159e8:	2b01      	cmp	r3, #1
 80159ea:	d118      	bne.n	8015a1e <UART_DMAReceiveCplt+0x100>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80159ec:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80159ee:	681b      	ldr	r3, [r3, #0]
 80159f0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80159f2:	693b      	ldr	r3, [r7, #16]
 80159f4:	e853 3f00 	ldrex	r3, [r3]
 80159f8:	60fb      	str	r3, [r7, #12]
   return(result);
 80159fa:	68fb      	ldr	r3, [r7, #12]
 80159fc:	f023 0310 	bic.w	r3, r3, #16
 8015a00:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8015a02:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8015a04:	681b      	ldr	r3, [r3, #0]
 8015a06:	461a      	mov	r2, r3
 8015a08:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8015a0a:	61fb      	str	r3, [r7, #28]
 8015a0c:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8015a0e:	69b9      	ldr	r1, [r7, #24]
 8015a10:	69fa      	ldr	r2, [r7, #28]
 8015a12:	e841 2300 	strex	r3, r2, [r1]
 8015a16:	617b      	str	r3, [r7, #20]
   return(result);
 8015a18:	697b      	ldr	r3, [r7, #20]
 8015a1a:	2b00      	cmp	r3, #0
 8015a1c:	d1e6      	bne.n	80159ec <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8015a1e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8015a20:	2200      	movs	r2, #0
 8015a22:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8015a24:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8015a26:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8015a28:	2b01      	cmp	r3, #1
 8015a2a:	d107      	bne.n	8015a3c <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8015a2c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8015a2e:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8015a32:	4619      	mov	r1, r3
 8015a34:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8015a36:	f7ec ff23 	bl	8002880 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8015a3a:	e002      	b.n	8015a42 <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 8015a3c:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8015a3e:	f7ec ff97 	bl	8002970 <HAL_UART_RxCpltCallback>
}
 8015a42:	bf00      	nop
 8015a44:	3770      	adds	r7, #112	@ 0x70
 8015a46:	46bd      	mov	sp, r7
 8015a48:	bd80      	pop	{r7, pc}

08015a4a <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8015a4a:	b580      	push	{r7, lr}
 8015a4c:	b084      	sub	sp, #16
 8015a4e:	af00      	add	r7, sp, #0
 8015a50:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8015a52:	687b      	ldr	r3, [r7, #4]
 8015a54:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8015a56:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8015a58:	68fb      	ldr	r3, [r7, #12]
 8015a5a:	2201      	movs	r2, #1
 8015a5c:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8015a5e:	68fb      	ldr	r3, [r7, #12]
 8015a60:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8015a62:	2b01      	cmp	r3, #1
 8015a64:	d109      	bne.n	8015a7a <UART_DMARxHalfCplt+0x30>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8015a66:	68fb      	ldr	r3, [r7, #12]
 8015a68:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8015a6c:	085b      	lsrs	r3, r3, #1
 8015a6e:	b29b      	uxth	r3, r3
 8015a70:	4619      	mov	r1, r3
 8015a72:	68f8      	ldr	r0, [r7, #12]
 8015a74:	f7ec ff04 	bl	8002880 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8015a78:	e002      	b.n	8015a80 <UART_DMARxHalfCplt+0x36>
    HAL_UART_RxHalfCpltCallback(huart);
 8015a7a:	68f8      	ldr	r0, [r7, #12]
 8015a7c:	f7ff f946 	bl	8014d0c <HAL_UART_RxHalfCpltCallback>
}
 8015a80:	bf00      	nop
 8015a82:	3710      	adds	r7, #16
 8015a84:	46bd      	mov	sp, r7
 8015a86:	bd80      	pop	{r7, pc}

08015a88 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8015a88:	b580      	push	{r7, lr}
 8015a8a:	b086      	sub	sp, #24
 8015a8c:	af00      	add	r7, sp, #0
 8015a8e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8015a90:	687b      	ldr	r3, [r7, #4]
 8015a92:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8015a94:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8015a96:	697b      	ldr	r3, [r7, #20]
 8015a98:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8015a9a:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8015a9c:	697b      	ldr	r3, [r7, #20]
 8015a9e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8015aa2:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8015aa4:	697b      	ldr	r3, [r7, #20]
 8015aa6:	681b      	ldr	r3, [r3, #0]
 8015aa8:	689b      	ldr	r3, [r3, #8]
 8015aaa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8015aae:	2b80      	cmp	r3, #128	@ 0x80
 8015ab0:	d109      	bne.n	8015ac6 <UART_DMAError+0x3e>
 8015ab2:	693b      	ldr	r3, [r7, #16]
 8015ab4:	2b21      	cmp	r3, #33	@ 0x21
 8015ab6:	d106      	bne.n	8015ac6 <UART_DMAError+0x3e>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8015ab8:	697b      	ldr	r3, [r7, #20]
 8015aba:	2200      	movs	r2, #0
 8015abc:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    UART_EndTxTransfer(huart);
 8015ac0:	6978      	ldr	r0, [r7, #20]
 8015ac2:	f7ff fe47 	bl	8015754 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8015ac6:	697b      	ldr	r3, [r7, #20]
 8015ac8:	681b      	ldr	r3, [r3, #0]
 8015aca:	689b      	ldr	r3, [r3, #8]
 8015acc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8015ad0:	2b40      	cmp	r3, #64	@ 0x40
 8015ad2:	d109      	bne.n	8015ae8 <UART_DMAError+0x60>
 8015ad4:	68fb      	ldr	r3, [r7, #12]
 8015ad6:	2b22      	cmp	r3, #34	@ 0x22
 8015ad8:	d106      	bne.n	8015ae8 <UART_DMAError+0x60>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8015ada:	697b      	ldr	r3, [r7, #20]
 8015adc:	2200      	movs	r2, #0
 8015ade:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
    UART_EndRxTransfer(huart);
 8015ae2:	6978      	ldr	r0, [r7, #20]
 8015ae4:	f7ff fe5c 	bl	80157a0 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8015ae8:	697b      	ldr	r3, [r7, #20]
 8015aea:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8015aee:	f043 0210 	orr.w	r2, r3, #16
 8015af2:	697b      	ldr	r3, [r7, #20]
 8015af4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8015af8:	6978      	ldr	r0, [r7, #20]
 8015afa:	f7ff f911 	bl	8014d20 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8015afe:	bf00      	nop
 8015b00:	3718      	adds	r7, #24
 8015b02:	46bd      	mov	sp, r7
 8015b04:	bd80      	pop	{r7, pc}

08015b06 <HAL_UARTEx_ReceiveToIdle>:
  * @param Timeout Timeout duration expressed in ms (covers the whole reception sequence).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint16_t *RxLen,
                                           uint32_t Timeout)
{
 8015b06:	b580      	push	{r7, lr}
 8015b08:	b088      	sub	sp, #32
 8015b0a:	af00      	add	r7, sp, #0
 8015b0c:	60f8      	str	r0, [r7, #12]
 8015b0e:	60b9      	str	r1, [r7, #8]
 8015b10:	603b      	str	r3, [r7, #0]
 8015b12:	4613      	mov	r3, r2
 8015b14:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8015b16:	68fb      	ldr	r3, [r7, #12]
 8015b18:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8015b1c:	2b20      	cmp	r3, #32
 8015b1e:	f040 80f0 	bne.w	8015d02 <HAL_UARTEx_ReceiveToIdle+0x1fc>
  {
    if ((pData == NULL) || (Size == 0U))
 8015b22:	68bb      	ldr	r3, [r7, #8]
 8015b24:	2b00      	cmp	r3, #0
 8015b26:	d002      	beq.n	8015b2e <HAL_UARTEx_ReceiveToIdle+0x28>
 8015b28:	88fb      	ldrh	r3, [r7, #6]
 8015b2a:	2b00      	cmp	r3, #0
 8015b2c:	d101      	bne.n	8015b32 <HAL_UARTEx_ReceiveToIdle+0x2c>
    {
      return  HAL_ERROR;
 8015b2e:	2301      	movs	r3, #1
 8015b30:	e0e8      	b.n	8015d04 <HAL_UARTEx_ReceiveToIdle+0x1fe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8015b32:	68fb      	ldr	r3, [r7, #12]
 8015b34:	2200      	movs	r2, #0
 8015b36:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8015b3a:	68fb      	ldr	r3, [r7, #12]
 8015b3c:	2222      	movs	r2, #34	@ 0x22
 8015b3e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 8015b42:	68fb      	ldr	r3, [r7, #12]
 8015b44:	2201      	movs	r2, #1
 8015b46:	661a      	str	r2, [r3, #96]	@ 0x60
    huart->RxEventType = HAL_UART_RXEVENT_TC;
 8015b48:	68fb      	ldr	r3, [r7, #12]
 8015b4a:	2200      	movs	r2, #0
 8015b4c:	665a      	str	r2, [r3, #100]	@ 0x64

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8015b4e:	f7f5 f953 	bl	800adf8 <HAL_GetTick>
 8015b52:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 8015b54:	68fb      	ldr	r3, [r7, #12]
 8015b56:	88fa      	ldrh	r2, [r7, #6]
 8015b58:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58
    huart->RxXferCount = Size;
 8015b5c:	68fb      	ldr	r3, [r7, #12]
 8015b5e:	88fa      	ldrh	r2, [r7, #6]
 8015b60:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8015b64:	68fb      	ldr	r3, [r7, #12]
 8015b66:	689b      	ldr	r3, [r3, #8]
 8015b68:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8015b6c:	d10e      	bne.n	8015b8c <HAL_UARTEx_ReceiveToIdle+0x86>
 8015b6e:	68fb      	ldr	r3, [r7, #12]
 8015b70:	691b      	ldr	r3, [r3, #16]
 8015b72:	2b00      	cmp	r3, #0
 8015b74:	d105      	bne.n	8015b82 <HAL_UARTEx_ReceiveToIdle+0x7c>
 8015b76:	68fb      	ldr	r3, [r7, #12]
 8015b78:	f240 12ff 	movw	r2, #511	@ 0x1ff
 8015b7c:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8015b80:	e02d      	b.n	8015bde <HAL_UARTEx_ReceiveToIdle+0xd8>
 8015b82:	68fb      	ldr	r3, [r7, #12]
 8015b84:	22ff      	movs	r2, #255	@ 0xff
 8015b86:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8015b8a:	e028      	b.n	8015bde <HAL_UARTEx_ReceiveToIdle+0xd8>
 8015b8c:	68fb      	ldr	r3, [r7, #12]
 8015b8e:	689b      	ldr	r3, [r3, #8]
 8015b90:	2b00      	cmp	r3, #0
 8015b92:	d10d      	bne.n	8015bb0 <HAL_UARTEx_ReceiveToIdle+0xaa>
 8015b94:	68fb      	ldr	r3, [r7, #12]
 8015b96:	691b      	ldr	r3, [r3, #16]
 8015b98:	2b00      	cmp	r3, #0
 8015b9a:	d104      	bne.n	8015ba6 <HAL_UARTEx_ReceiveToIdle+0xa0>
 8015b9c:	68fb      	ldr	r3, [r7, #12]
 8015b9e:	22ff      	movs	r2, #255	@ 0xff
 8015ba0:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8015ba4:	e01b      	b.n	8015bde <HAL_UARTEx_ReceiveToIdle+0xd8>
 8015ba6:	68fb      	ldr	r3, [r7, #12]
 8015ba8:	227f      	movs	r2, #127	@ 0x7f
 8015baa:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8015bae:	e016      	b.n	8015bde <HAL_UARTEx_ReceiveToIdle+0xd8>
 8015bb0:	68fb      	ldr	r3, [r7, #12]
 8015bb2:	689b      	ldr	r3, [r3, #8]
 8015bb4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8015bb8:	d10d      	bne.n	8015bd6 <HAL_UARTEx_ReceiveToIdle+0xd0>
 8015bba:	68fb      	ldr	r3, [r7, #12]
 8015bbc:	691b      	ldr	r3, [r3, #16]
 8015bbe:	2b00      	cmp	r3, #0
 8015bc0:	d104      	bne.n	8015bcc <HAL_UARTEx_ReceiveToIdle+0xc6>
 8015bc2:	68fb      	ldr	r3, [r7, #12]
 8015bc4:	227f      	movs	r2, #127	@ 0x7f
 8015bc6:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8015bca:	e008      	b.n	8015bde <HAL_UARTEx_ReceiveToIdle+0xd8>
 8015bcc:	68fb      	ldr	r3, [r7, #12]
 8015bce:	223f      	movs	r2, #63	@ 0x3f
 8015bd0:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8015bd4:	e003      	b.n	8015bde <HAL_UARTEx_ReceiveToIdle+0xd8>
 8015bd6:	68fb      	ldr	r3, [r7, #12]
 8015bd8:	2200      	movs	r2, #0
 8015bda:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
    uhMask = huart->Mask;
 8015bde:	68fb      	ldr	r3, [r7, #12]
 8015be0:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8015be4:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8015be6:	68fb      	ldr	r3, [r7, #12]
 8015be8:	689b      	ldr	r3, [r3, #8]
 8015bea:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8015bee:	d108      	bne.n	8015c02 <HAL_UARTEx_ReceiveToIdle+0xfc>
 8015bf0:	68fb      	ldr	r3, [r7, #12]
 8015bf2:	691b      	ldr	r3, [r3, #16]
 8015bf4:	2b00      	cmp	r3, #0
 8015bf6:	d104      	bne.n	8015c02 <HAL_UARTEx_ReceiveToIdle+0xfc>
    {
      pdata8bits  = NULL;
 8015bf8:	2300      	movs	r3, #0
 8015bfa:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8015bfc:	68bb      	ldr	r3, [r7, #8]
 8015bfe:	61bb      	str	r3, [r7, #24]
 8015c00:	e003      	b.n	8015c0a <HAL_UARTEx_ReceiveToIdle+0x104>
    }
    else
    {
      pdata8bits  = pData;
 8015c02:	68bb      	ldr	r3, [r7, #8]
 8015c04:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8015c06:	2300      	movs	r3, #0
 8015c08:	61bb      	str	r3, [r7, #24]
    }

    /* Initialize output number of received elements */
    *RxLen = 0U;
 8015c0a:	683b      	ldr	r3, [r7, #0]
 8015c0c:	2200      	movs	r2, #0
 8015c0e:	801a      	strh	r2, [r3, #0]

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8015c10:	e060      	b.n	8015cd4 <HAL_UARTEx_ReceiveToIdle+0x1ce>
    {
      /* Check if IDLE flag is set */
      if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8015c12:	68fb      	ldr	r3, [r7, #12]
 8015c14:	681b      	ldr	r3, [r3, #0]
 8015c16:	69db      	ldr	r3, [r3, #28]
 8015c18:	f003 0310 	and.w	r3, r3, #16
 8015c1c:	2b10      	cmp	r3, #16
 8015c1e:	d110      	bne.n	8015c42 <HAL_UARTEx_ReceiveToIdle+0x13c>
      {
        /* Clear IDLE flag in ISR */
        __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8015c20:	68fb      	ldr	r3, [r7, #12]
 8015c22:	681b      	ldr	r3, [r3, #0]
 8015c24:	2210      	movs	r2, #16
 8015c26:	621a      	str	r2, [r3, #32]

        /* If Set, but no data ever received, clear flag without exiting loop */
        /* If Set, and data has already been received, this means Idle Event is valid : End reception */
        if (*RxLen > 0U)
 8015c28:	683b      	ldr	r3, [r7, #0]
 8015c2a:	881b      	ldrh	r3, [r3, #0]
 8015c2c:	2b00      	cmp	r3, #0
 8015c2e:	d008      	beq.n	8015c42 <HAL_UARTEx_ReceiveToIdle+0x13c>
        {
          huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8015c30:	68fb      	ldr	r3, [r7, #12]
 8015c32:	2202      	movs	r2, #2
 8015c34:	665a      	str	r2, [r3, #100]	@ 0x64
          huart->RxState = HAL_UART_STATE_READY;
 8015c36:	68fb      	ldr	r3, [r7, #12]
 8015c38:	2220      	movs	r2, #32
 8015c3a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

          return HAL_OK;
 8015c3e:	2300      	movs	r3, #0
 8015c40:	e060      	b.n	8015d04 <HAL_UARTEx_ReceiveToIdle+0x1fe>
        }
      }

      /* Check if RXNE flag is set */
      if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RXNE))
 8015c42:	68fb      	ldr	r3, [r7, #12]
 8015c44:	681b      	ldr	r3, [r3, #0]
 8015c46:	69db      	ldr	r3, [r3, #28]
 8015c48:	f003 0320 	and.w	r3, r3, #32
 8015c4c:	2b20      	cmp	r3, #32
 8015c4e:	d12c      	bne.n	8015caa <HAL_UARTEx_ReceiveToIdle+0x1a4>
      {
        if (pdata8bits == NULL)
 8015c50:	69fb      	ldr	r3, [r7, #28]
 8015c52:	2b00      	cmp	r3, #0
 8015c54:	d10c      	bne.n	8015c70 <HAL_UARTEx_ReceiveToIdle+0x16a>
        {
          *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8015c56:	68fb      	ldr	r3, [r7, #12]
 8015c58:	681b      	ldr	r3, [r3, #0]
 8015c5a:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8015c5c:	b29a      	uxth	r2, r3
 8015c5e:	8a7b      	ldrh	r3, [r7, #18]
 8015c60:	4013      	ands	r3, r2
 8015c62:	b29a      	uxth	r2, r3
 8015c64:	69bb      	ldr	r3, [r7, #24]
 8015c66:	801a      	strh	r2, [r3, #0]
          pdata16bits++;
 8015c68:	69bb      	ldr	r3, [r7, #24]
 8015c6a:	3302      	adds	r3, #2
 8015c6c:	61bb      	str	r3, [r7, #24]
 8015c6e:	e00d      	b.n	8015c8c <HAL_UARTEx_ReceiveToIdle+0x186>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8015c70:	68fb      	ldr	r3, [r7, #12]
 8015c72:	681b      	ldr	r3, [r3, #0]
 8015c74:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8015c76:	b29b      	uxth	r3, r3
 8015c78:	b2da      	uxtb	r2, r3
 8015c7a:	8a7b      	ldrh	r3, [r7, #18]
 8015c7c:	b2db      	uxtb	r3, r3
 8015c7e:	4013      	ands	r3, r2
 8015c80:	b2da      	uxtb	r2, r3
 8015c82:	69fb      	ldr	r3, [r7, #28]
 8015c84:	701a      	strb	r2, [r3, #0]
          pdata8bits++;
 8015c86:	69fb      	ldr	r3, [r7, #28]
 8015c88:	3301      	adds	r3, #1
 8015c8a:	61fb      	str	r3, [r7, #28]
        }
        /* Increment number of received elements */
        *RxLen += 1U;
 8015c8c:	683b      	ldr	r3, [r7, #0]
 8015c8e:	881b      	ldrh	r3, [r3, #0]
 8015c90:	3301      	adds	r3, #1
 8015c92:	b29a      	uxth	r2, r3
 8015c94:	683b      	ldr	r3, [r7, #0]
 8015c96:	801a      	strh	r2, [r3, #0]
        huart->RxXferCount--;
 8015c98:	68fb      	ldr	r3, [r7, #12]
 8015c9a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8015c9e:	b29b      	uxth	r3, r3
 8015ca0:	3b01      	subs	r3, #1
 8015ca2:	b29a      	uxth	r2, r3
 8015ca4:	68fb      	ldr	r3, [r7, #12]
 8015ca6:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
      }

      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8015caa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015cac:	f1b3 3fff 	cmp.w	r3, #4294967295
 8015cb0:	d010      	beq.n	8015cd4 <HAL_UARTEx_ReceiveToIdle+0x1ce>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8015cb2:	f7f5 f8a1 	bl	800adf8 <HAL_GetTick>
 8015cb6:	4602      	mov	r2, r0
 8015cb8:	697b      	ldr	r3, [r7, #20]
 8015cba:	1ad3      	subs	r3, r2, r3
 8015cbc:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8015cbe:	429a      	cmp	r2, r3
 8015cc0:	d302      	bcc.n	8015cc8 <HAL_UARTEx_ReceiveToIdle+0x1c2>
 8015cc2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015cc4:	2b00      	cmp	r3, #0
 8015cc6:	d105      	bne.n	8015cd4 <HAL_UARTEx_ReceiveToIdle+0x1ce>
        {
          huart->RxState = HAL_UART_STATE_READY;
 8015cc8:	68fb      	ldr	r3, [r7, #12]
 8015cca:	2220      	movs	r2, #32
 8015ccc:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 8015cd0:	2303      	movs	r3, #3
 8015cd2:	e017      	b.n	8015d04 <HAL_UARTEx_ReceiveToIdle+0x1fe>
    while (huart->RxXferCount > 0U)
 8015cd4:	68fb      	ldr	r3, [r7, #12]
 8015cd6:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8015cda:	b29b      	uxth	r3, r3
 8015cdc:	2b00      	cmp	r3, #0
 8015cde:	d198      	bne.n	8015c12 <HAL_UARTEx_ReceiveToIdle+0x10c>
        }
      }
    }

    /* Set number of received elements in output parameter : RxLen */
    *RxLen = huart->RxXferSize - huart->RxXferCount;
 8015ce0:	68fb      	ldr	r3, [r7, #12]
 8015ce2:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 8015ce6:	68fb      	ldr	r3, [r7, #12]
 8015ce8:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8015cec:	b29b      	uxth	r3, r3
 8015cee:	1ad3      	subs	r3, r2, r3
 8015cf0:	b29a      	uxth	r2, r3
 8015cf2:	683b      	ldr	r3, [r7, #0]
 8015cf4:	801a      	strh	r2, [r3, #0]
    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8015cf6:	68fb      	ldr	r3, [r7, #12]
 8015cf8:	2220      	movs	r2, #32
 8015cfa:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

    return HAL_OK;
 8015cfe:	2300      	movs	r3, #0
 8015d00:	e000      	b.n	8015d04 <HAL_UARTEx_ReceiveToIdle+0x1fe>
  }
  else
  {
    return HAL_BUSY;
 8015d02:	2302      	movs	r3, #2
  }
}
 8015d04:	4618      	mov	r0, r3
 8015d06:	3720      	adds	r7, #32
 8015d08:	46bd      	mov	sp, r7
 8015d0a:	bd80      	pop	{r7, pc}

08015d0c <HAL_UARTEx_ReceiveToIdle_DMA>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8015d0c:	b580      	push	{r7, lr}
 8015d0e:	b08c      	sub	sp, #48	@ 0x30
 8015d10:	af00      	add	r7, sp, #0
 8015d12:	60f8      	str	r0, [r7, #12]
 8015d14:	60b9      	str	r1, [r7, #8]
 8015d16:	4613      	mov	r3, r2
 8015d18:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8015d1a:	68fb      	ldr	r3, [r7, #12]
 8015d1c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8015d20:	2b20      	cmp	r3, #32
 8015d22:	d142      	bne.n	8015daa <HAL_UARTEx_ReceiveToIdle_DMA+0x9e>
  {
    if ((pData == NULL) || (Size == 0U))
 8015d24:	68bb      	ldr	r3, [r7, #8]
 8015d26:	2b00      	cmp	r3, #0
 8015d28:	d002      	beq.n	8015d30 <HAL_UARTEx_ReceiveToIdle_DMA+0x24>
 8015d2a:	88fb      	ldrh	r3, [r7, #6]
 8015d2c:	2b00      	cmp	r3, #0
 8015d2e:	d101      	bne.n	8015d34 <HAL_UARTEx_ReceiveToIdle_DMA+0x28>
    {
      return HAL_ERROR;
 8015d30:	2301      	movs	r3, #1
 8015d32:	e03b      	b.n	8015dac <HAL_UARTEx_ReceiveToIdle_DMA+0xa0>
    }

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 8015d34:	68fb      	ldr	r3, [r7, #12]
 8015d36:	2201      	movs	r2, #1
 8015d38:	661a      	str	r2, [r3, #96]	@ 0x60
    huart->RxEventType = HAL_UART_RXEVENT_TC;
 8015d3a:	68fb      	ldr	r3, [r7, #12]
 8015d3c:	2200      	movs	r2, #0
 8015d3e:	665a      	str	r2, [r3, #100]	@ 0x64

    status =  UART_Start_Receive_DMA(huart, pData, Size);
 8015d40:	88fb      	ldrh	r3, [r7, #6]
 8015d42:	461a      	mov	r2, r3
 8015d44:	68b9      	ldr	r1, [r7, #8]
 8015d46:	68f8      	ldr	r0, [r7, #12]
 8015d48:	f7ff fc64 	bl	8015614 <UART_Start_Receive_DMA>
 8015d4c:	4603      	mov	r3, r0
 8015d4e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 8015d52:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8015d56:	2b00      	cmp	r3, #0
 8015d58:	d124      	bne.n	8015da4 <HAL_UARTEx_ReceiveToIdle_DMA+0x98>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8015d5a:	68fb      	ldr	r3, [r7, #12]
 8015d5c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8015d5e:	2b01      	cmp	r3, #1
 8015d60:	d11d      	bne.n	8015d9e <HAL_UARTEx_ReceiveToIdle_DMA+0x92>
      {
        __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8015d62:	68fb      	ldr	r3, [r7, #12]
 8015d64:	681b      	ldr	r3, [r3, #0]
 8015d66:	2210      	movs	r2, #16
 8015d68:	621a      	str	r2, [r3, #32]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8015d6a:	68fb      	ldr	r3, [r7, #12]
 8015d6c:	681b      	ldr	r3, [r3, #0]
 8015d6e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8015d70:	69bb      	ldr	r3, [r7, #24]
 8015d72:	e853 3f00 	ldrex	r3, [r3]
 8015d76:	617b      	str	r3, [r7, #20]
   return(result);
 8015d78:	697b      	ldr	r3, [r7, #20]
 8015d7a:	f043 0310 	orr.w	r3, r3, #16
 8015d7e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8015d80:	68fb      	ldr	r3, [r7, #12]
 8015d82:	681b      	ldr	r3, [r3, #0]
 8015d84:	461a      	mov	r2, r3
 8015d86:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015d88:	627b      	str	r3, [r7, #36]	@ 0x24
 8015d8a:	623a      	str	r2, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8015d8c:	6a39      	ldr	r1, [r7, #32]
 8015d8e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8015d90:	e841 2300 	strex	r3, r2, [r1]
 8015d94:	61fb      	str	r3, [r7, #28]
   return(result);
 8015d96:	69fb      	ldr	r3, [r7, #28]
 8015d98:	2b00      	cmp	r3, #0
 8015d9a:	d1e6      	bne.n	8015d6a <HAL_UARTEx_ReceiveToIdle_DMA+0x5e>
 8015d9c:	e002      	b.n	8015da4 <HAL_UARTEx_ReceiveToIdle_DMA+0x98>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 8015d9e:	2301      	movs	r3, #1
 8015da0:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }

    return status;
 8015da4:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8015da8:	e000      	b.n	8015dac <HAL_UARTEx_ReceiveToIdle_DMA+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8015daa:	2302      	movs	r3, #2
  }
}
 8015dac:	4618      	mov	r0, r3
 8015dae:	3730      	adds	r7, #48	@ 0x30
 8015db0:	46bd      	mov	sp, r7
 8015db2:	bd80      	pop	{r7, pc}

08015db4 <atoi>:
 8015db4:	220a      	movs	r2, #10
 8015db6:	2100      	movs	r1, #0
 8015db8:	f000 b87c 	b.w	8015eb4 <strtol>

08015dbc <_strtol_l.isra.0>:
 8015dbc:	2b24      	cmp	r3, #36	@ 0x24
 8015dbe:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8015dc2:	4686      	mov	lr, r0
 8015dc4:	4690      	mov	r8, r2
 8015dc6:	d801      	bhi.n	8015dcc <_strtol_l.isra.0+0x10>
 8015dc8:	2b01      	cmp	r3, #1
 8015dca:	d106      	bne.n	8015dda <_strtol_l.isra.0+0x1e>
 8015dcc:	f000 f92c 	bl	8016028 <__errno>
 8015dd0:	2316      	movs	r3, #22
 8015dd2:	6003      	str	r3, [r0, #0]
 8015dd4:	2000      	movs	r0, #0
 8015dd6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8015dda:	4834      	ldr	r0, [pc, #208]	@ (8015eac <_strtol_l.isra.0+0xf0>)
 8015ddc:	460d      	mov	r5, r1
 8015dde:	462a      	mov	r2, r5
 8015de0:	f815 4b01 	ldrb.w	r4, [r5], #1
 8015de4:	5d06      	ldrb	r6, [r0, r4]
 8015de6:	f016 0608 	ands.w	r6, r6, #8
 8015dea:	d1f8      	bne.n	8015dde <_strtol_l.isra.0+0x22>
 8015dec:	2c2d      	cmp	r4, #45	@ 0x2d
 8015dee:	d110      	bne.n	8015e12 <_strtol_l.isra.0+0x56>
 8015df0:	782c      	ldrb	r4, [r5, #0]
 8015df2:	2601      	movs	r6, #1
 8015df4:	1c95      	adds	r5, r2, #2
 8015df6:	f033 0210 	bics.w	r2, r3, #16
 8015dfa:	d115      	bne.n	8015e28 <_strtol_l.isra.0+0x6c>
 8015dfc:	2c30      	cmp	r4, #48	@ 0x30
 8015dfe:	d10d      	bne.n	8015e1c <_strtol_l.isra.0+0x60>
 8015e00:	782a      	ldrb	r2, [r5, #0]
 8015e02:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8015e06:	2a58      	cmp	r2, #88	@ 0x58
 8015e08:	d108      	bne.n	8015e1c <_strtol_l.isra.0+0x60>
 8015e0a:	786c      	ldrb	r4, [r5, #1]
 8015e0c:	3502      	adds	r5, #2
 8015e0e:	2310      	movs	r3, #16
 8015e10:	e00a      	b.n	8015e28 <_strtol_l.isra.0+0x6c>
 8015e12:	2c2b      	cmp	r4, #43	@ 0x2b
 8015e14:	bf04      	itt	eq
 8015e16:	782c      	ldrbeq	r4, [r5, #0]
 8015e18:	1c95      	addeq	r5, r2, #2
 8015e1a:	e7ec      	b.n	8015df6 <_strtol_l.isra.0+0x3a>
 8015e1c:	2b00      	cmp	r3, #0
 8015e1e:	d1f6      	bne.n	8015e0e <_strtol_l.isra.0+0x52>
 8015e20:	2c30      	cmp	r4, #48	@ 0x30
 8015e22:	bf14      	ite	ne
 8015e24:	230a      	movne	r3, #10
 8015e26:	2308      	moveq	r3, #8
 8015e28:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 8015e2c:	f10c 3cff 	add.w	ip, ip, #4294967295
 8015e30:	2200      	movs	r2, #0
 8015e32:	fbbc f9f3 	udiv	r9, ip, r3
 8015e36:	4610      	mov	r0, r2
 8015e38:	fb03 ca19 	mls	sl, r3, r9, ip
 8015e3c:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 8015e40:	2f09      	cmp	r7, #9
 8015e42:	d80f      	bhi.n	8015e64 <_strtol_l.isra.0+0xa8>
 8015e44:	463c      	mov	r4, r7
 8015e46:	42a3      	cmp	r3, r4
 8015e48:	dd1b      	ble.n	8015e82 <_strtol_l.isra.0+0xc6>
 8015e4a:	1c57      	adds	r7, r2, #1
 8015e4c:	d007      	beq.n	8015e5e <_strtol_l.isra.0+0xa2>
 8015e4e:	4581      	cmp	r9, r0
 8015e50:	d314      	bcc.n	8015e7c <_strtol_l.isra.0+0xc0>
 8015e52:	d101      	bne.n	8015e58 <_strtol_l.isra.0+0x9c>
 8015e54:	45a2      	cmp	sl, r4
 8015e56:	db11      	blt.n	8015e7c <_strtol_l.isra.0+0xc0>
 8015e58:	fb00 4003 	mla	r0, r0, r3, r4
 8015e5c:	2201      	movs	r2, #1
 8015e5e:	f815 4b01 	ldrb.w	r4, [r5], #1
 8015e62:	e7eb      	b.n	8015e3c <_strtol_l.isra.0+0x80>
 8015e64:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8015e68:	2f19      	cmp	r7, #25
 8015e6a:	d801      	bhi.n	8015e70 <_strtol_l.isra.0+0xb4>
 8015e6c:	3c37      	subs	r4, #55	@ 0x37
 8015e6e:	e7ea      	b.n	8015e46 <_strtol_l.isra.0+0x8a>
 8015e70:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 8015e74:	2f19      	cmp	r7, #25
 8015e76:	d804      	bhi.n	8015e82 <_strtol_l.isra.0+0xc6>
 8015e78:	3c57      	subs	r4, #87	@ 0x57
 8015e7a:	e7e4      	b.n	8015e46 <_strtol_l.isra.0+0x8a>
 8015e7c:	f04f 32ff 	mov.w	r2, #4294967295
 8015e80:	e7ed      	b.n	8015e5e <_strtol_l.isra.0+0xa2>
 8015e82:	1c53      	adds	r3, r2, #1
 8015e84:	d108      	bne.n	8015e98 <_strtol_l.isra.0+0xdc>
 8015e86:	2322      	movs	r3, #34	@ 0x22
 8015e88:	f8ce 3000 	str.w	r3, [lr]
 8015e8c:	4660      	mov	r0, ip
 8015e8e:	f1b8 0f00 	cmp.w	r8, #0
 8015e92:	d0a0      	beq.n	8015dd6 <_strtol_l.isra.0+0x1a>
 8015e94:	1e69      	subs	r1, r5, #1
 8015e96:	e006      	b.n	8015ea6 <_strtol_l.isra.0+0xea>
 8015e98:	b106      	cbz	r6, 8015e9c <_strtol_l.isra.0+0xe0>
 8015e9a:	4240      	negs	r0, r0
 8015e9c:	f1b8 0f00 	cmp.w	r8, #0
 8015ea0:	d099      	beq.n	8015dd6 <_strtol_l.isra.0+0x1a>
 8015ea2:	2a00      	cmp	r2, #0
 8015ea4:	d1f6      	bne.n	8015e94 <_strtol_l.isra.0+0xd8>
 8015ea6:	f8c8 1000 	str.w	r1, [r8]
 8015eaa:	e794      	b.n	8015dd6 <_strtol_l.isra.0+0x1a>
 8015eac:	080176e7 	.word	0x080176e7

08015eb0 <_strtol_r>:
 8015eb0:	f7ff bf84 	b.w	8015dbc <_strtol_l.isra.0>

08015eb4 <strtol>:
 8015eb4:	4613      	mov	r3, r2
 8015eb6:	460a      	mov	r2, r1
 8015eb8:	4601      	mov	r1, r0
 8015eba:	4802      	ldr	r0, [pc, #8]	@ (8015ec4 <strtol+0x10>)
 8015ebc:	6800      	ldr	r0, [r0, #0]
 8015ebe:	f7ff bf7d 	b.w	8015dbc <_strtol_l.isra.0>
 8015ec2:	bf00      	nop
 8015ec4:	2000029c 	.word	0x2000029c

08015ec8 <siprintf>:
 8015ec8:	b40e      	push	{r1, r2, r3}
 8015eca:	b510      	push	{r4, lr}
 8015ecc:	b09d      	sub	sp, #116	@ 0x74
 8015ece:	ab1f      	add	r3, sp, #124	@ 0x7c
 8015ed0:	9002      	str	r0, [sp, #8]
 8015ed2:	9006      	str	r0, [sp, #24]
 8015ed4:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8015ed8:	480a      	ldr	r0, [pc, #40]	@ (8015f04 <siprintf+0x3c>)
 8015eda:	9107      	str	r1, [sp, #28]
 8015edc:	9104      	str	r1, [sp, #16]
 8015ede:	490a      	ldr	r1, [pc, #40]	@ (8015f08 <siprintf+0x40>)
 8015ee0:	f853 2b04 	ldr.w	r2, [r3], #4
 8015ee4:	9105      	str	r1, [sp, #20]
 8015ee6:	2400      	movs	r4, #0
 8015ee8:	a902      	add	r1, sp, #8
 8015eea:	6800      	ldr	r0, [r0, #0]
 8015eec:	9301      	str	r3, [sp, #4]
 8015eee:	941b      	str	r4, [sp, #108]	@ 0x6c
 8015ef0:	f000 fa30 	bl	8016354 <_svfiprintf_r>
 8015ef4:	9b02      	ldr	r3, [sp, #8]
 8015ef6:	701c      	strb	r4, [r3, #0]
 8015ef8:	b01d      	add	sp, #116	@ 0x74
 8015efa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8015efe:	b003      	add	sp, #12
 8015f00:	4770      	bx	lr
 8015f02:	bf00      	nop
 8015f04:	2000029c 	.word	0x2000029c
 8015f08:	ffff0208 	.word	0xffff0208

08015f0c <siscanf>:
 8015f0c:	b40e      	push	{r1, r2, r3}
 8015f0e:	b570      	push	{r4, r5, r6, lr}
 8015f10:	b09d      	sub	sp, #116	@ 0x74
 8015f12:	ac21      	add	r4, sp, #132	@ 0x84
 8015f14:	2500      	movs	r5, #0
 8015f16:	f44f 7201 	mov.w	r2, #516	@ 0x204
 8015f1a:	f854 6b04 	ldr.w	r6, [r4], #4
 8015f1e:	f8ad 2014 	strh.w	r2, [sp, #20]
 8015f22:	951b      	str	r5, [sp, #108]	@ 0x6c
 8015f24:	9002      	str	r0, [sp, #8]
 8015f26:	9006      	str	r0, [sp, #24]
 8015f28:	f7ea f95c 	bl	80001e4 <strlen>
 8015f2c:	4b0b      	ldr	r3, [pc, #44]	@ (8015f5c <siscanf+0x50>)
 8015f2e:	9003      	str	r0, [sp, #12]
 8015f30:	9007      	str	r0, [sp, #28]
 8015f32:	480b      	ldr	r0, [pc, #44]	@ (8015f60 <siscanf+0x54>)
 8015f34:	930b      	str	r3, [sp, #44]	@ 0x2c
 8015f36:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8015f3a:	f8ad 3016 	strh.w	r3, [sp, #22]
 8015f3e:	4632      	mov	r2, r6
 8015f40:	4623      	mov	r3, r4
 8015f42:	a902      	add	r1, sp, #8
 8015f44:	6800      	ldr	r0, [r0, #0]
 8015f46:	950f      	str	r5, [sp, #60]	@ 0x3c
 8015f48:	9514      	str	r5, [sp, #80]	@ 0x50
 8015f4a:	9401      	str	r4, [sp, #4]
 8015f4c:	f000 fb58 	bl	8016600 <__ssvfiscanf_r>
 8015f50:	b01d      	add	sp, #116	@ 0x74
 8015f52:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8015f56:	b003      	add	sp, #12
 8015f58:	4770      	bx	lr
 8015f5a:	bf00      	nop
 8015f5c:	08015f65 	.word	0x08015f65
 8015f60:	2000029c 	.word	0x2000029c

08015f64 <__seofread>:
 8015f64:	2000      	movs	r0, #0
 8015f66:	4770      	bx	lr

08015f68 <memcmp>:
 8015f68:	b510      	push	{r4, lr}
 8015f6a:	3901      	subs	r1, #1
 8015f6c:	4402      	add	r2, r0
 8015f6e:	4290      	cmp	r0, r2
 8015f70:	d101      	bne.n	8015f76 <memcmp+0xe>
 8015f72:	2000      	movs	r0, #0
 8015f74:	e005      	b.n	8015f82 <memcmp+0x1a>
 8015f76:	7803      	ldrb	r3, [r0, #0]
 8015f78:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8015f7c:	42a3      	cmp	r3, r4
 8015f7e:	d001      	beq.n	8015f84 <memcmp+0x1c>
 8015f80:	1b18      	subs	r0, r3, r4
 8015f82:	bd10      	pop	{r4, pc}
 8015f84:	3001      	adds	r0, #1
 8015f86:	e7f2      	b.n	8015f6e <memcmp+0x6>

08015f88 <memset>:
 8015f88:	4402      	add	r2, r0
 8015f8a:	4603      	mov	r3, r0
 8015f8c:	4293      	cmp	r3, r2
 8015f8e:	d100      	bne.n	8015f92 <memset+0xa>
 8015f90:	4770      	bx	lr
 8015f92:	f803 1b01 	strb.w	r1, [r3], #1
 8015f96:	e7f9      	b.n	8015f8c <memset+0x4>

08015f98 <strchr>:
 8015f98:	b2c9      	uxtb	r1, r1
 8015f9a:	4603      	mov	r3, r0
 8015f9c:	4618      	mov	r0, r3
 8015f9e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8015fa2:	b112      	cbz	r2, 8015faa <strchr+0x12>
 8015fa4:	428a      	cmp	r2, r1
 8015fa6:	d1f9      	bne.n	8015f9c <strchr+0x4>
 8015fa8:	4770      	bx	lr
 8015faa:	2900      	cmp	r1, #0
 8015fac:	bf18      	it	ne
 8015fae:	2000      	movne	r0, #0
 8015fb0:	4770      	bx	lr

08015fb2 <strncmp>:
 8015fb2:	b510      	push	{r4, lr}
 8015fb4:	b16a      	cbz	r2, 8015fd2 <strncmp+0x20>
 8015fb6:	3901      	subs	r1, #1
 8015fb8:	1884      	adds	r4, r0, r2
 8015fba:	f810 2b01 	ldrb.w	r2, [r0], #1
 8015fbe:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8015fc2:	429a      	cmp	r2, r3
 8015fc4:	d103      	bne.n	8015fce <strncmp+0x1c>
 8015fc6:	42a0      	cmp	r0, r4
 8015fc8:	d001      	beq.n	8015fce <strncmp+0x1c>
 8015fca:	2a00      	cmp	r2, #0
 8015fcc:	d1f5      	bne.n	8015fba <strncmp+0x8>
 8015fce:	1ad0      	subs	r0, r2, r3
 8015fd0:	bd10      	pop	{r4, pc}
 8015fd2:	4610      	mov	r0, r2
 8015fd4:	e7fc      	b.n	8015fd0 <strncmp+0x1e>

08015fd6 <strncpy>:
 8015fd6:	b510      	push	{r4, lr}
 8015fd8:	3901      	subs	r1, #1
 8015fda:	4603      	mov	r3, r0
 8015fdc:	b132      	cbz	r2, 8015fec <strncpy+0x16>
 8015fde:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8015fe2:	f803 4b01 	strb.w	r4, [r3], #1
 8015fe6:	3a01      	subs	r2, #1
 8015fe8:	2c00      	cmp	r4, #0
 8015fea:	d1f7      	bne.n	8015fdc <strncpy+0x6>
 8015fec:	441a      	add	r2, r3
 8015fee:	2100      	movs	r1, #0
 8015ff0:	4293      	cmp	r3, r2
 8015ff2:	d100      	bne.n	8015ff6 <strncpy+0x20>
 8015ff4:	bd10      	pop	{r4, pc}
 8015ff6:	f803 1b01 	strb.w	r1, [r3], #1
 8015ffa:	e7f9      	b.n	8015ff0 <strncpy+0x1a>

08015ffc <strstr>:
 8015ffc:	780a      	ldrb	r2, [r1, #0]
 8015ffe:	b570      	push	{r4, r5, r6, lr}
 8016000:	b96a      	cbnz	r2, 801601e <strstr+0x22>
 8016002:	bd70      	pop	{r4, r5, r6, pc}
 8016004:	429a      	cmp	r2, r3
 8016006:	d109      	bne.n	801601c <strstr+0x20>
 8016008:	460c      	mov	r4, r1
 801600a:	4605      	mov	r5, r0
 801600c:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 8016010:	2b00      	cmp	r3, #0
 8016012:	d0f6      	beq.n	8016002 <strstr+0x6>
 8016014:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 8016018:	429e      	cmp	r6, r3
 801601a:	d0f7      	beq.n	801600c <strstr+0x10>
 801601c:	3001      	adds	r0, #1
 801601e:	7803      	ldrb	r3, [r0, #0]
 8016020:	2b00      	cmp	r3, #0
 8016022:	d1ef      	bne.n	8016004 <strstr+0x8>
 8016024:	4618      	mov	r0, r3
 8016026:	e7ec      	b.n	8016002 <strstr+0x6>

08016028 <__errno>:
 8016028:	4b01      	ldr	r3, [pc, #4]	@ (8016030 <__errno+0x8>)
 801602a:	6818      	ldr	r0, [r3, #0]
 801602c:	4770      	bx	lr
 801602e:	bf00      	nop
 8016030:	2000029c 	.word	0x2000029c

08016034 <__libc_init_array>:
 8016034:	b570      	push	{r4, r5, r6, lr}
 8016036:	4d0d      	ldr	r5, [pc, #52]	@ (801606c <__libc_init_array+0x38>)
 8016038:	4c0d      	ldr	r4, [pc, #52]	@ (8016070 <__libc_init_array+0x3c>)
 801603a:	1b64      	subs	r4, r4, r5
 801603c:	10a4      	asrs	r4, r4, #2
 801603e:	2600      	movs	r6, #0
 8016040:	42a6      	cmp	r6, r4
 8016042:	d109      	bne.n	8016058 <__libc_init_array+0x24>
 8016044:	4d0b      	ldr	r5, [pc, #44]	@ (8016074 <__libc_init_array+0x40>)
 8016046:	4c0c      	ldr	r4, [pc, #48]	@ (8016078 <__libc_init_array+0x44>)
 8016048:	f001 f86e 	bl	8017128 <_init>
 801604c:	1b64      	subs	r4, r4, r5
 801604e:	10a4      	asrs	r4, r4, #2
 8016050:	2600      	movs	r6, #0
 8016052:	42a6      	cmp	r6, r4
 8016054:	d105      	bne.n	8016062 <__libc_init_array+0x2e>
 8016056:	bd70      	pop	{r4, r5, r6, pc}
 8016058:	f855 3b04 	ldr.w	r3, [r5], #4
 801605c:	4798      	blx	r3
 801605e:	3601      	adds	r6, #1
 8016060:	e7ee      	b.n	8016040 <__libc_init_array+0xc>
 8016062:	f855 3b04 	ldr.w	r3, [r5], #4
 8016066:	4798      	blx	r3
 8016068:	3601      	adds	r6, #1
 801606a:	e7f2      	b.n	8016052 <__libc_init_array+0x1e>
 801606c:	08017840 	.word	0x08017840
 8016070:	08017840 	.word	0x08017840
 8016074:	08017840 	.word	0x08017840
 8016078:	08017844 	.word	0x08017844

0801607c <__retarget_lock_acquire_recursive>:
 801607c:	4770      	bx	lr

0801607e <__retarget_lock_release_recursive>:
 801607e:	4770      	bx	lr

08016080 <strcpy>:
 8016080:	4603      	mov	r3, r0
 8016082:	f811 2b01 	ldrb.w	r2, [r1], #1
 8016086:	f803 2b01 	strb.w	r2, [r3], #1
 801608a:	2a00      	cmp	r2, #0
 801608c:	d1f9      	bne.n	8016082 <strcpy+0x2>
 801608e:	4770      	bx	lr

08016090 <memcpy>:
 8016090:	440a      	add	r2, r1
 8016092:	4291      	cmp	r1, r2
 8016094:	f100 33ff 	add.w	r3, r0, #4294967295
 8016098:	d100      	bne.n	801609c <memcpy+0xc>
 801609a:	4770      	bx	lr
 801609c:	b510      	push	{r4, lr}
 801609e:	f811 4b01 	ldrb.w	r4, [r1], #1
 80160a2:	f803 4f01 	strb.w	r4, [r3, #1]!
 80160a6:	4291      	cmp	r1, r2
 80160a8:	d1f9      	bne.n	801609e <memcpy+0xe>
 80160aa:	bd10      	pop	{r4, pc}

080160ac <_free_r>:
 80160ac:	b538      	push	{r3, r4, r5, lr}
 80160ae:	4605      	mov	r5, r0
 80160b0:	2900      	cmp	r1, #0
 80160b2:	d041      	beq.n	8016138 <_free_r+0x8c>
 80160b4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80160b8:	1f0c      	subs	r4, r1, #4
 80160ba:	2b00      	cmp	r3, #0
 80160bc:	bfb8      	it	lt
 80160be:	18e4      	addlt	r4, r4, r3
 80160c0:	f000 f8e0 	bl	8016284 <__malloc_lock>
 80160c4:	4a1d      	ldr	r2, [pc, #116]	@ (801613c <_free_r+0x90>)
 80160c6:	6813      	ldr	r3, [r2, #0]
 80160c8:	b933      	cbnz	r3, 80160d8 <_free_r+0x2c>
 80160ca:	6063      	str	r3, [r4, #4]
 80160cc:	6014      	str	r4, [r2, #0]
 80160ce:	4628      	mov	r0, r5
 80160d0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80160d4:	f000 b8dc 	b.w	8016290 <__malloc_unlock>
 80160d8:	42a3      	cmp	r3, r4
 80160da:	d908      	bls.n	80160ee <_free_r+0x42>
 80160dc:	6820      	ldr	r0, [r4, #0]
 80160de:	1821      	adds	r1, r4, r0
 80160e0:	428b      	cmp	r3, r1
 80160e2:	bf01      	itttt	eq
 80160e4:	6819      	ldreq	r1, [r3, #0]
 80160e6:	685b      	ldreq	r3, [r3, #4]
 80160e8:	1809      	addeq	r1, r1, r0
 80160ea:	6021      	streq	r1, [r4, #0]
 80160ec:	e7ed      	b.n	80160ca <_free_r+0x1e>
 80160ee:	461a      	mov	r2, r3
 80160f0:	685b      	ldr	r3, [r3, #4]
 80160f2:	b10b      	cbz	r3, 80160f8 <_free_r+0x4c>
 80160f4:	42a3      	cmp	r3, r4
 80160f6:	d9fa      	bls.n	80160ee <_free_r+0x42>
 80160f8:	6811      	ldr	r1, [r2, #0]
 80160fa:	1850      	adds	r0, r2, r1
 80160fc:	42a0      	cmp	r0, r4
 80160fe:	d10b      	bne.n	8016118 <_free_r+0x6c>
 8016100:	6820      	ldr	r0, [r4, #0]
 8016102:	4401      	add	r1, r0
 8016104:	1850      	adds	r0, r2, r1
 8016106:	4283      	cmp	r3, r0
 8016108:	6011      	str	r1, [r2, #0]
 801610a:	d1e0      	bne.n	80160ce <_free_r+0x22>
 801610c:	6818      	ldr	r0, [r3, #0]
 801610e:	685b      	ldr	r3, [r3, #4]
 8016110:	6053      	str	r3, [r2, #4]
 8016112:	4408      	add	r0, r1
 8016114:	6010      	str	r0, [r2, #0]
 8016116:	e7da      	b.n	80160ce <_free_r+0x22>
 8016118:	d902      	bls.n	8016120 <_free_r+0x74>
 801611a:	230c      	movs	r3, #12
 801611c:	602b      	str	r3, [r5, #0]
 801611e:	e7d6      	b.n	80160ce <_free_r+0x22>
 8016120:	6820      	ldr	r0, [r4, #0]
 8016122:	1821      	adds	r1, r4, r0
 8016124:	428b      	cmp	r3, r1
 8016126:	bf04      	itt	eq
 8016128:	6819      	ldreq	r1, [r3, #0]
 801612a:	685b      	ldreq	r3, [r3, #4]
 801612c:	6063      	str	r3, [r4, #4]
 801612e:	bf04      	itt	eq
 8016130:	1809      	addeq	r1, r1, r0
 8016132:	6021      	streq	r1, [r4, #0]
 8016134:	6054      	str	r4, [r2, #4]
 8016136:	e7ca      	b.n	80160ce <_free_r+0x22>
 8016138:	bd38      	pop	{r3, r4, r5, pc}
 801613a:	bf00      	nop
 801613c:	20005b54 	.word	0x20005b54

08016140 <sbrk_aligned>:
 8016140:	b570      	push	{r4, r5, r6, lr}
 8016142:	4e0f      	ldr	r6, [pc, #60]	@ (8016180 <sbrk_aligned+0x40>)
 8016144:	460c      	mov	r4, r1
 8016146:	6831      	ldr	r1, [r6, #0]
 8016148:	4605      	mov	r5, r0
 801614a:	b911      	cbnz	r1, 8016152 <sbrk_aligned+0x12>
 801614c:	f000 ff36 	bl	8016fbc <_sbrk_r>
 8016150:	6030      	str	r0, [r6, #0]
 8016152:	4621      	mov	r1, r4
 8016154:	4628      	mov	r0, r5
 8016156:	f000 ff31 	bl	8016fbc <_sbrk_r>
 801615a:	1c43      	adds	r3, r0, #1
 801615c:	d103      	bne.n	8016166 <sbrk_aligned+0x26>
 801615e:	f04f 34ff 	mov.w	r4, #4294967295
 8016162:	4620      	mov	r0, r4
 8016164:	bd70      	pop	{r4, r5, r6, pc}
 8016166:	1cc4      	adds	r4, r0, #3
 8016168:	f024 0403 	bic.w	r4, r4, #3
 801616c:	42a0      	cmp	r0, r4
 801616e:	d0f8      	beq.n	8016162 <sbrk_aligned+0x22>
 8016170:	1a21      	subs	r1, r4, r0
 8016172:	4628      	mov	r0, r5
 8016174:	f000 ff22 	bl	8016fbc <_sbrk_r>
 8016178:	3001      	adds	r0, #1
 801617a:	d1f2      	bne.n	8016162 <sbrk_aligned+0x22>
 801617c:	e7ef      	b.n	801615e <sbrk_aligned+0x1e>
 801617e:	bf00      	nop
 8016180:	20005b50 	.word	0x20005b50

08016184 <_malloc_r>:
 8016184:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8016188:	1ccd      	adds	r5, r1, #3
 801618a:	f025 0503 	bic.w	r5, r5, #3
 801618e:	3508      	adds	r5, #8
 8016190:	2d0c      	cmp	r5, #12
 8016192:	bf38      	it	cc
 8016194:	250c      	movcc	r5, #12
 8016196:	2d00      	cmp	r5, #0
 8016198:	4606      	mov	r6, r0
 801619a:	db01      	blt.n	80161a0 <_malloc_r+0x1c>
 801619c:	42a9      	cmp	r1, r5
 801619e:	d904      	bls.n	80161aa <_malloc_r+0x26>
 80161a0:	230c      	movs	r3, #12
 80161a2:	6033      	str	r3, [r6, #0]
 80161a4:	2000      	movs	r0, #0
 80161a6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80161aa:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8016280 <_malloc_r+0xfc>
 80161ae:	f000 f869 	bl	8016284 <__malloc_lock>
 80161b2:	f8d8 3000 	ldr.w	r3, [r8]
 80161b6:	461c      	mov	r4, r3
 80161b8:	bb44      	cbnz	r4, 801620c <_malloc_r+0x88>
 80161ba:	4629      	mov	r1, r5
 80161bc:	4630      	mov	r0, r6
 80161be:	f7ff ffbf 	bl	8016140 <sbrk_aligned>
 80161c2:	1c43      	adds	r3, r0, #1
 80161c4:	4604      	mov	r4, r0
 80161c6:	d158      	bne.n	801627a <_malloc_r+0xf6>
 80161c8:	f8d8 4000 	ldr.w	r4, [r8]
 80161cc:	4627      	mov	r7, r4
 80161ce:	2f00      	cmp	r7, #0
 80161d0:	d143      	bne.n	801625a <_malloc_r+0xd6>
 80161d2:	2c00      	cmp	r4, #0
 80161d4:	d04b      	beq.n	801626e <_malloc_r+0xea>
 80161d6:	6823      	ldr	r3, [r4, #0]
 80161d8:	4639      	mov	r1, r7
 80161da:	4630      	mov	r0, r6
 80161dc:	eb04 0903 	add.w	r9, r4, r3
 80161e0:	f000 feec 	bl	8016fbc <_sbrk_r>
 80161e4:	4581      	cmp	r9, r0
 80161e6:	d142      	bne.n	801626e <_malloc_r+0xea>
 80161e8:	6821      	ldr	r1, [r4, #0]
 80161ea:	1a6d      	subs	r5, r5, r1
 80161ec:	4629      	mov	r1, r5
 80161ee:	4630      	mov	r0, r6
 80161f0:	f7ff ffa6 	bl	8016140 <sbrk_aligned>
 80161f4:	3001      	adds	r0, #1
 80161f6:	d03a      	beq.n	801626e <_malloc_r+0xea>
 80161f8:	6823      	ldr	r3, [r4, #0]
 80161fa:	442b      	add	r3, r5
 80161fc:	6023      	str	r3, [r4, #0]
 80161fe:	f8d8 3000 	ldr.w	r3, [r8]
 8016202:	685a      	ldr	r2, [r3, #4]
 8016204:	bb62      	cbnz	r2, 8016260 <_malloc_r+0xdc>
 8016206:	f8c8 7000 	str.w	r7, [r8]
 801620a:	e00f      	b.n	801622c <_malloc_r+0xa8>
 801620c:	6822      	ldr	r2, [r4, #0]
 801620e:	1b52      	subs	r2, r2, r5
 8016210:	d420      	bmi.n	8016254 <_malloc_r+0xd0>
 8016212:	2a0b      	cmp	r2, #11
 8016214:	d917      	bls.n	8016246 <_malloc_r+0xc2>
 8016216:	1961      	adds	r1, r4, r5
 8016218:	42a3      	cmp	r3, r4
 801621a:	6025      	str	r5, [r4, #0]
 801621c:	bf18      	it	ne
 801621e:	6059      	strne	r1, [r3, #4]
 8016220:	6863      	ldr	r3, [r4, #4]
 8016222:	bf08      	it	eq
 8016224:	f8c8 1000 	streq.w	r1, [r8]
 8016228:	5162      	str	r2, [r4, r5]
 801622a:	604b      	str	r3, [r1, #4]
 801622c:	4630      	mov	r0, r6
 801622e:	f000 f82f 	bl	8016290 <__malloc_unlock>
 8016232:	f104 000b 	add.w	r0, r4, #11
 8016236:	1d23      	adds	r3, r4, #4
 8016238:	f020 0007 	bic.w	r0, r0, #7
 801623c:	1ac2      	subs	r2, r0, r3
 801623e:	bf1c      	itt	ne
 8016240:	1a1b      	subne	r3, r3, r0
 8016242:	50a3      	strne	r3, [r4, r2]
 8016244:	e7af      	b.n	80161a6 <_malloc_r+0x22>
 8016246:	6862      	ldr	r2, [r4, #4]
 8016248:	42a3      	cmp	r3, r4
 801624a:	bf0c      	ite	eq
 801624c:	f8c8 2000 	streq.w	r2, [r8]
 8016250:	605a      	strne	r2, [r3, #4]
 8016252:	e7eb      	b.n	801622c <_malloc_r+0xa8>
 8016254:	4623      	mov	r3, r4
 8016256:	6864      	ldr	r4, [r4, #4]
 8016258:	e7ae      	b.n	80161b8 <_malloc_r+0x34>
 801625a:	463c      	mov	r4, r7
 801625c:	687f      	ldr	r7, [r7, #4]
 801625e:	e7b6      	b.n	80161ce <_malloc_r+0x4a>
 8016260:	461a      	mov	r2, r3
 8016262:	685b      	ldr	r3, [r3, #4]
 8016264:	42a3      	cmp	r3, r4
 8016266:	d1fb      	bne.n	8016260 <_malloc_r+0xdc>
 8016268:	2300      	movs	r3, #0
 801626a:	6053      	str	r3, [r2, #4]
 801626c:	e7de      	b.n	801622c <_malloc_r+0xa8>
 801626e:	230c      	movs	r3, #12
 8016270:	6033      	str	r3, [r6, #0]
 8016272:	4630      	mov	r0, r6
 8016274:	f000 f80c 	bl	8016290 <__malloc_unlock>
 8016278:	e794      	b.n	80161a4 <_malloc_r+0x20>
 801627a:	6005      	str	r5, [r0, #0]
 801627c:	e7d6      	b.n	801622c <_malloc_r+0xa8>
 801627e:	bf00      	nop
 8016280:	20005b54 	.word	0x20005b54

08016284 <__malloc_lock>:
 8016284:	4801      	ldr	r0, [pc, #4]	@ (801628c <__malloc_lock+0x8>)
 8016286:	f7ff bef9 	b.w	801607c <__retarget_lock_acquire_recursive>
 801628a:	bf00      	nop
 801628c:	20005b4c 	.word	0x20005b4c

08016290 <__malloc_unlock>:
 8016290:	4801      	ldr	r0, [pc, #4]	@ (8016298 <__malloc_unlock+0x8>)
 8016292:	f7ff bef4 	b.w	801607e <__retarget_lock_release_recursive>
 8016296:	bf00      	nop
 8016298:	20005b4c 	.word	0x20005b4c

0801629c <__ssputs_r>:
 801629c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80162a0:	688e      	ldr	r6, [r1, #8]
 80162a2:	461f      	mov	r7, r3
 80162a4:	42be      	cmp	r6, r7
 80162a6:	680b      	ldr	r3, [r1, #0]
 80162a8:	4682      	mov	sl, r0
 80162aa:	460c      	mov	r4, r1
 80162ac:	4690      	mov	r8, r2
 80162ae:	d82d      	bhi.n	801630c <__ssputs_r+0x70>
 80162b0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80162b4:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80162b8:	d026      	beq.n	8016308 <__ssputs_r+0x6c>
 80162ba:	6965      	ldr	r5, [r4, #20]
 80162bc:	6909      	ldr	r1, [r1, #16]
 80162be:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80162c2:	eba3 0901 	sub.w	r9, r3, r1
 80162c6:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80162ca:	1c7b      	adds	r3, r7, #1
 80162cc:	444b      	add	r3, r9
 80162ce:	106d      	asrs	r5, r5, #1
 80162d0:	429d      	cmp	r5, r3
 80162d2:	bf38      	it	cc
 80162d4:	461d      	movcc	r5, r3
 80162d6:	0553      	lsls	r3, r2, #21
 80162d8:	d527      	bpl.n	801632a <__ssputs_r+0x8e>
 80162da:	4629      	mov	r1, r5
 80162dc:	f7ff ff52 	bl	8016184 <_malloc_r>
 80162e0:	4606      	mov	r6, r0
 80162e2:	b360      	cbz	r0, 801633e <__ssputs_r+0xa2>
 80162e4:	6921      	ldr	r1, [r4, #16]
 80162e6:	464a      	mov	r2, r9
 80162e8:	f7ff fed2 	bl	8016090 <memcpy>
 80162ec:	89a3      	ldrh	r3, [r4, #12]
 80162ee:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80162f2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80162f6:	81a3      	strh	r3, [r4, #12]
 80162f8:	6126      	str	r6, [r4, #16]
 80162fa:	6165      	str	r5, [r4, #20]
 80162fc:	444e      	add	r6, r9
 80162fe:	eba5 0509 	sub.w	r5, r5, r9
 8016302:	6026      	str	r6, [r4, #0]
 8016304:	60a5      	str	r5, [r4, #8]
 8016306:	463e      	mov	r6, r7
 8016308:	42be      	cmp	r6, r7
 801630a:	d900      	bls.n	801630e <__ssputs_r+0x72>
 801630c:	463e      	mov	r6, r7
 801630e:	6820      	ldr	r0, [r4, #0]
 8016310:	4632      	mov	r2, r6
 8016312:	4641      	mov	r1, r8
 8016314:	f000 fe37 	bl	8016f86 <memmove>
 8016318:	68a3      	ldr	r3, [r4, #8]
 801631a:	1b9b      	subs	r3, r3, r6
 801631c:	60a3      	str	r3, [r4, #8]
 801631e:	6823      	ldr	r3, [r4, #0]
 8016320:	4433      	add	r3, r6
 8016322:	6023      	str	r3, [r4, #0]
 8016324:	2000      	movs	r0, #0
 8016326:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801632a:	462a      	mov	r2, r5
 801632c:	f000 fe56 	bl	8016fdc <_realloc_r>
 8016330:	4606      	mov	r6, r0
 8016332:	2800      	cmp	r0, #0
 8016334:	d1e0      	bne.n	80162f8 <__ssputs_r+0x5c>
 8016336:	6921      	ldr	r1, [r4, #16]
 8016338:	4650      	mov	r0, sl
 801633a:	f7ff feb7 	bl	80160ac <_free_r>
 801633e:	230c      	movs	r3, #12
 8016340:	f8ca 3000 	str.w	r3, [sl]
 8016344:	89a3      	ldrh	r3, [r4, #12]
 8016346:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801634a:	81a3      	strh	r3, [r4, #12]
 801634c:	f04f 30ff 	mov.w	r0, #4294967295
 8016350:	e7e9      	b.n	8016326 <__ssputs_r+0x8a>
	...

08016354 <_svfiprintf_r>:
 8016354:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016358:	4698      	mov	r8, r3
 801635a:	898b      	ldrh	r3, [r1, #12]
 801635c:	061b      	lsls	r3, r3, #24
 801635e:	b09d      	sub	sp, #116	@ 0x74
 8016360:	4607      	mov	r7, r0
 8016362:	460d      	mov	r5, r1
 8016364:	4614      	mov	r4, r2
 8016366:	d510      	bpl.n	801638a <_svfiprintf_r+0x36>
 8016368:	690b      	ldr	r3, [r1, #16]
 801636a:	b973      	cbnz	r3, 801638a <_svfiprintf_r+0x36>
 801636c:	2140      	movs	r1, #64	@ 0x40
 801636e:	f7ff ff09 	bl	8016184 <_malloc_r>
 8016372:	6028      	str	r0, [r5, #0]
 8016374:	6128      	str	r0, [r5, #16]
 8016376:	b930      	cbnz	r0, 8016386 <_svfiprintf_r+0x32>
 8016378:	230c      	movs	r3, #12
 801637a:	603b      	str	r3, [r7, #0]
 801637c:	f04f 30ff 	mov.w	r0, #4294967295
 8016380:	b01d      	add	sp, #116	@ 0x74
 8016382:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016386:	2340      	movs	r3, #64	@ 0x40
 8016388:	616b      	str	r3, [r5, #20]
 801638a:	2300      	movs	r3, #0
 801638c:	9309      	str	r3, [sp, #36]	@ 0x24
 801638e:	2320      	movs	r3, #32
 8016390:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8016394:	f8cd 800c 	str.w	r8, [sp, #12]
 8016398:	2330      	movs	r3, #48	@ 0x30
 801639a:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8016538 <_svfiprintf_r+0x1e4>
 801639e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80163a2:	f04f 0901 	mov.w	r9, #1
 80163a6:	4623      	mov	r3, r4
 80163a8:	469a      	mov	sl, r3
 80163aa:	f813 2b01 	ldrb.w	r2, [r3], #1
 80163ae:	b10a      	cbz	r2, 80163b4 <_svfiprintf_r+0x60>
 80163b0:	2a25      	cmp	r2, #37	@ 0x25
 80163b2:	d1f9      	bne.n	80163a8 <_svfiprintf_r+0x54>
 80163b4:	ebba 0b04 	subs.w	fp, sl, r4
 80163b8:	d00b      	beq.n	80163d2 <_svfiprintf_r+0x7e>
 80163ba:	465b      	mov	r3, fp
 80163bc:	4622      	mov	r2, r4
 80163be:	4629      	mov	r1, r5
 80163c0:	4638      	mov	r0, r7
 80163c2:	f7ff ff6b 	bl	801629c <__ssputs_r>
 80163c6:	3001      	adds	r0, #1
 80163c8:	f000 80a7 	beq.w	801651a <_svfiprintf_r+0x1c6>
 80163cc:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80163ce:	445a      	add	r2, fp
 80163d0:	9209      	str	r2, [sp, #36]	@ 0x24
 80163d2:	f89a 3000 	ldrb.w	r3, [sl]
 80163d6:	2b00      	cmp	r3, #0
 80163d8:	f000 809f 	beq.w	801651a <_svfiprintf_r+0x1c6>
 80163dc:	2300      	movs	r3, #0
 80163de:	f04f 32ff 	mov.w	r2, #4294967295
 80163e2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80163e6:	f10a 0a01 	add.w	sl, sl, #1
 80163ea:	9304      	str	r3, [sp, #16]
 80163ec:	9307      	str	r3, [sp, #28]
 80163ee:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80163f2:	931a      	str	r3, [sp, #104]	@ 0x68
 80163f4:	4654      	mov	r4, sl
 80163f6:	2205      	movs	r2, #5
 80163f8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80163fc:	484e      	ldr	r0, [pc, #312]	@ (8016538 <_svfiprintf_r+0x1e4>)
 80163fe:	f7e9 feff 	bl	8000200 <memchr>
 8016402:	9a04      	ldr	r2, [sp, #16]
 8016404:	b9d8      	cbnz	r0, 801643e <_svfiprintf_r+0xea>
 8016406:	06d0      	lsls	r0, r2, #27
 8016408:	bf44      	itt	mi
 801640a:	2320      	movmi	r3, #32
 801640c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8016410:	0711      	lsls	r1, r2, #28
 8016412:	bf44      	itt	mi
 8016414:	232b      	movmi	r3, #43	@ 0x2b
 8016416:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801641a:	f89a 3000 	ldrb.w	r3, [sl]
 801641e:	2b2a      	cmp	r3, #42	@ 0x2a
 8016420:	d015      	beq.n	801644e <_svfiprintf_r+0xfa>
 8016422:	9a07      	ldr	r2, [sp, #28]
 8016424:	4654      	mov	r4, sl
 8016426:	2000      	movs	r0, #0
 8016428:	f04f 0c0a 	mov.w	ip, #10
 801642c:	4621      	mov	r1, r4
 801642e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8016432:	3b30      	subs	r3, #48	@ 0x30
 8016434:	2b09      	cmp	r3, #9
 8016436:	d94b      	bls.n	80164d0 <_svfiprintf_r+0x17c>
 8016438:	b1b0      	cbz	r0, 8016468 <_svfiprintf_r+0x114>
 801643a:	9207      	str	r2, [sp, #28]
 801643c:	e014      	b.n	8016468 <_svfiprintf_r+0x114>
 801643e:	eba0 0308 	sub.w	r3, r0, r8
 8016442:	fa09 f303 	lsl.w	r3, r9, r3
 8016446:	4313      	orrs	r3, r2
 8016448:	9304      	str	r3, [sp, #16]
 801644a:	46a2      	mov	sl, r4
 801644c:	e7d2      	b.n	80163f4 <_svfiprintf_r+0xa0>
 801644e:	9b03      	ldr	r3, [sp, #12]
 8016450:	1d19      	adds	r1, r3, #4
 8016452:	681b      	ldr	r3, [r3, #0]
 8016454:	9103      	str	r1, [sp, #12]
 8016456:	2b00      	cmp	r3, #0
 8016458:	bfbb      	ittet	lt
 801645a:	425b      	neglt	r3, r3
 801645c:	f042 0202 	orrlt.w	r2, r2, #2
 8016460:	9307      	strge	r3, [sp, #28]
 8016462:	9307      	strlt	r3, [sp, #28]
 8016464:	bfb8      	it	lt
 8016466:	9204      	strlt	r2, [sp, #16]
 8016468:	7823      	ldrb	r3, [r4, #0]
 801646a:	2b2e      	cmp	r3, #46	@ 0x2e
 801646c:	d10a      	bne.n	8016484 <_svfiprintf_r+0x130>
 801646e:	7863      	ldrb	r3, [r4, #1]
 8016470:	2b2a      	cmp	r3, #42	@ 0x2a
 8016472:	d132      	bne.n	80164da <_svfiprintf_r+0x186>
 8016474:	9b03      	ldr	r3, [sp, #12]
 8016476:	1d1a      	adds	r2, r3, #4
 8016478:	681b      	ldr	r3, [r3, #0]
 801647a:	9203      	str	r2, [sp, #12]
 801647c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8016480:	3402      	adds	r4, #2
 8016482:	9305      	str	r3, [sp, #20]
 8016484:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8016548 <_svfiprintf_r+0x1f4>
 8016488:	7821      	ldrb	r1, [r4, #0]
 801648a:	2203      	movs	r2, #3
 801648c:	4650      	mov	r0, sl
 801648e:	f7e9 feb7 	bl	8000200 <memchr>
 8016492:	b138      	cbz	r0, 80164a4 <_svfiprintf_r+0x150>
 8016494:	9b04      	ldr	r3, [sp, #16]
 8016496:	eba0 000a 	sub.w	r0, r0, sl
 801649a:	2240      	movs	r2, #64	@ 0x40
 801649c:	4082      	lsls	r2, r0
 801649e:	4313      	orrs	r3, r2
 80164a0:	3401      	adds	r4, #1
 80164a2:	9304      	str	r3, [sp, #16]
 80164a4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80164a8:	4824      	ldr	r0, [pc, #144]	@ (801653c <_svfiprintf_r+0x1e8>)
 80164aa:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80164ae:	2206      	movs	r2, #6
 80164b0:	f7e9 fea6 	bl	8000200 <memchr>
 80164b4:	2800      	cmp	r0, #0
 80164b6:	d036      	beq.n	8016526 <_svfiprintf_r+0x1d2>
 80164b8:	4b21      	ldr	r3, [pc, #132]	@ (8016540 <_svfiprintf_r+0x1ec>)
 80164ba:	bb1b      	cbnz	r3, 8016504 <_svfiprintf_r+0x1b0>
 80164bc:	9b03      	ldr	r3, [sp, #12]
 80164be:	3307      	adds	r3, #7
 80164c0:	f023 0307 	bic.w	r3, r3, #7
 80164c4:	3308      	adds	r3, #8
 80164c6:	9303      	str	r3, [sp, #12]
 80164c8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80164ca:	4433      	add	r3, r6
 80164cc:	9309      	str	r3, [sp, #36]	@ 0x24
 80164ce:	e76a      	b.n	80163a6 <_svfiprintf_r+0x52>
 80164d0:	fb0c 3202 	mla	r2, ip, r2, r3
 80164d4:	460c      	mov	r4, r1
 80164d6:	2001      	movs	r0, #1
 80164d8:	e7a8      	b.n	801642c <_svfiprintf_r+0xd8>
 80164da:	2300      	movs	r3, #0
 80164dc:	3401      	adds	r4, #1
 80164de:	9305      	str	r3, [sp, #20]
 80164e0:	4619      	mov	r1, r3
 80164e2:	f04f 0c0a 	mov.w	ip, #10
 80164e6:	4620      	mov	r0, r4
 80164e8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80164ec:	3a30      	subs	r2, #48	@ 0x30
 80164ee:	2a09      	cmp	r2, #9
 80164f0:	d903      	bls.n	80164fa <_svfiprintf_r+0x1a6>
 80164f2:	2b00      	cmp	r3, #0
 80164f4:	d0c6      	beq.n	8016484 <_svfiprintf_r+0x130>
 80164f6:	9105      	str	r1, [sp, #20]
 80164f8:	e7c4      	b.n	8016484 <_svfiprintf_r+0x130>
 80164fa:	fb0c 2101 	mla	r1, ip, r1, r2
 80164fe:	4604      	mov	r4, r0
 8016500:	2301      	movs	r3, #1
 8016502:	e7f0      	b.n	80164e6 <_svfiprintf_r+0x192>
 8016504:	ab03      	add	r3, sp, #12
 8016506:	9300      	str	r3, [sp, #0]
 8016508:	462a      	mov	r2, r5
 801650a:	4b0e      	ldr	r3, [pc, #56]	@ (8016544 <_svfiprintf_r+0x1f0>)
 801650c:	a904      	add	r1, sp, #16
 801650e:	4638      	mov	r0, r7
 8016510:	f3af 8000 	nop.w
 8016514:	1c42      	adds	r2, r0, #1
 8016516:	4606      	mov	r6, r0
 8016518:	d1d6      	bne.n	80164c8 <_svfiprintf_r+0x174>
 801651a:	89ab      	ldrh	r3, [r5, #12]
 801651c:	065b      	lsls	r3, r3, #25
 801651e:	f53f af2d 	bmi.w	801637c <_svfiprintf_r+0x28>
 8016522:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8016524:	e72c      	b.n	8016380 <_svfiprintf_r+0x2c>
 8016526:	ab03      	add	r3, sp, #12
 8016528:	9300      	str	r3, [sp, #0]
 801652a:	462a      	mov	r2, r5
 801652c:	4b05      	ldr	r3, [pc, #20]	@ (8016544 <_svfiprintf_r+0x1f0>)
 801652e:	a904      	add	r1, sp, #16
 8016530:	4638      	mov	r0, r7
 8016532:	f000 fa49 	bl	80169c8 <_printf_i>
 8016536:	e7ed      	b.n	8016514 <_svfiprintf_r+0x1c0>
 8016538:	080177e7 	.word	0x080177e7
 801653c:	080177f1 	.word	0x080177f1
 8016540:	00000000 	.word	0x00000000
 8016544:	0801629d 	.word	0x0801629d
 8016548:	080177ed 	.word	0x080177ed

0801654c <_sungetc_r>:
 801654c:	b538      	push	{r3, r4, r5, lr}
 801654e:	1c4b      	adds	r3, r1, #1
 8016550:	4614      	mov	r4, r2
 8016552:	d103      	bne.n	801655c <_sungetc_r+0x10>
 8016554:	f04f 35ff 	mov.w	r5, #4294967295
 8016558:	4628      	mov	r0, r5
 801655a:	bd38      	pop	{r3, r4, r5, pc}
 801655c:	8993      	ldrh	r3, [r2, #12]
 801655e:	f023 0320 	bic.w	r3, r3, #32
 8016562:	8193      	strh	r3, [r2, #12]
 8016564:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8016566:	6852      	ldr	r2, [r2, #4]
 8016568:	b2cd      	uxtb	r5, r1
 801656a:	b18b      	cbz	r3, 8016590 <_sungetc_r+0x44>
 801656c:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 801656e:	4293      	cmp	r3, r2
 8016570:	dd08      	ble.n	8016584 <_sungetc_r+0x38>
 8016572:	6823      	ldr	r3, [r4, #0]
 8016574:	1e5a      	subs	r2, r3, #1
 8016576:	6022      	str	r2, [r4, #0]
 8016578:	f803 5c01 	strb.w	r5, [r3, #-1]
 801657c:	6863      	ldr	r3, [r4, #4]
 801657e:	3301      	adds	r3, #1
 8016580:	6063      	str	r3, [r4, #4]
 8016582:	e7e9      	b.n	8016558 <_sungetc_r+0xc>
 8016584:	4621      	mov	r1, r4
 8016586:	f000 fcc4 	bl	8016f12 <__submore>
 801658a:	2800      	cmp	r0, #0
 801658c:	d0f1      	beq.n	8016572 <_sungetc_r+0x26>
 801658e:	e7e1      	b.n	8016554 <_sungetc_r+0x8>
 8016590:	6921      	ldr	r1, [r4, #16]
 8016592:	6823      	ldr	r3, [r4, #0]
 8016594:	b151      	cbz	r1, 80165ac <_sungetc_r+0x60>
 8016596:	4299      	cmp	r1, r3
 8016598:	d208      	bcs.n	80165ac <_sungetc_r+0x60>
 801659a:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 801659e:	42a9      	cmp	r1, r5
 80165a0:	d104      	bne.n	80165ac <_sungetc_r+0x60>
 80165a2:	3b01      	subs	r3, #1
 80165a4:	3201      	adds	r2, #1
 80165a6:	6023      	str	r3, [r4, #0]
 80165a8:	6062      	str	r2, [r4, #4]
 80165aa:	e7d5      	b.n	8016558 <_sungetc_r+0xc>
 80165ac:	e9c4 320f 	strd	r3, r2, [r4, #60]	@ 0x3c
 80165b0:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80165b4:	6363      	str	r3, [r4, #52]	@ 0x34
 80165b6:	2303      	movs	r3, #3
 80165b8:	63a3      	str	r3, [r4, #56]	@ 0x38
 80165ba:	4623      	mov	r3, r4
 80165bc:	f803 5f46 	strb.w	r5, [r3, #70]!
 80165c0:	6023      	str	r3, [r4, #0]
 80165c2:	2301      	movs	r3, #1
 80165c4:	e7dc      	b.n	8016580 <_sungetc_r+0x34>

080165c6 <__ssrefill_r>:
 80165c6:	b510      	push	{r4, lr}
 80165c8:	460c      	mov	r4, r1
 80165ca:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 80165cc:	b169      	cbz	r1, 80165ea <__ssrefill_r+0x24>
 80165ce:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80165d2:	4299      	cmp	r1, r3
 80165d4:	d001      	beq.n	80165da <__ssrefill_r+0x14>
 80165d6:	f7ff fd69 	bl	80160ac <_free_r>
 80165da:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80165dc:	6063      	str	r3, [r4, #4]
 80165de:	2000      	movs	r0, #0
 80165e0:	6360      	str	r0, [r4, #52]	@ 0x34
 80165e2:	b113      	cbz	r3, 80165ea <__ssrefill_r+0x24>
 80165e4:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 80165e6:	6023      	str	r3, [r4, #0]
 80165e8:	bd10      	pop	{r4, pc}
 80165ea:	6923      	ldr	r3, [r4, #16]
 80165ec:	6023      	str	r3, [r4, #0]
 80165ee:	2300      	movs	r3, #0
 80165f0:	6063      	str	r3, [r4, #4]
 80165f2:	89a3      	ldrh	r3, [r4, #12]
 80165f4:	f043 0320 	orr.w	r3, r3, #32
 80165f8:	81a3      	strh	r3, [r4, #12]
 80165fa:	f04f 30ff 	mov.w	r0, #4294967295
 80165fe:	e7f3      	b.n	80165e8 <__ssrefill_r+0x22>

08016600 <__ssvfiscanf_r>:
 8016600:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016604:	460c      	mov	r4, r1
 8016606:	f5ad 7d23 	sub.w	sp, sp, #652	@ 0x28c
 801660a:	2100      	movs	r1, #0
 801660c:	e9cd 1144 	strd	r1, r1, [sp, #272]	@ 0x110
 8016610:	49a6      	ldr	r1, [pc, #664]	@ (80168ac <__ssvfiscanf_r+0x2ac>)
 8016612:	91a0      	str	r1, [sp, #640]	@ 0x280
 8016614:	f10d 0804 	add.w	r8, sp, #4
 8016618:	49a5      	ldr	r1, [pc, #660]	@ (80168b0 <__ssvfiscanf_r+0x2b0>)
 801661a:	4fa6      	ldr	r7, [pc, #664]	@ (80168b4 <__ssvfiscanf_r+0x2b4>)
 801661c:	f8cd 8118 	str.w	r8, [sp, #280]	@ 0x118
 8016620:	4606      	mov	r6, r0
 8016622:	91a1      	str	r1, [sp, #644]	@ 0x284
 8016624:	9300      	str	r3, [sp, #0]
 8016626:	f892 9000 	ldrb.w	r9, [r2]
 801662a:	f1b9 0f00 	cmp.w	r9, #0
 801662e:	f000 8158 	beq.w	80168e2 <__ssvfiscanf_r+0x2e2>
 8016632:	f817 3009 	ldrb.w	r3, [r7, r9]
 8016636:	f013 0308 	ands.w	r3, r3, #8
 801663a:	f102 0501 	add.w	r5, r2, #1
 801663e:	d019      	beq.n	8016674 <__ssvfiscanf_r+0x74>
 8016640:	6863      	ldr	r3, [r4, #4]
 8016642:	2b00      	cmp	r3, #0
 8016644:	dd0f      	ble.n	8016666 <__ssvfiscanf_r+0x66>
 8016646:	6823      	ldr	r3, [r4, #0]
 8016648:	781a      	ldrb	r2, [r3, #0]
 801664a:	5cba      	ldrb	r2, [r7, r2]
 801664c:	0712      	lsls	r2, r2, #28
 801664e:	d401      	bmi.n	8016654 <__ssvfiscanf_r+0x54>
 8016650:	462a      	mov	r2, r5
 8016652:	e7e8      	b.n	8016626 <__ssvfiscanf_r+0x26>
 8016654:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 8016656:	3201      	adds	r2, #1
 8016658:	9245      	str	r2, [sp, #276]	@ 0x114
 801665a:	6862      	ldr	r2, [r4, #4]
 801665c:	3301      	adds	r3, #1
 801665e:	3a01      	subs	r2, #1
 8016660:	6062      	str	r2, [r4, #4]
 8016662:	6023      	str	r3, [r4, #0]
 8016664:	e7ec      	b.n	8016640 <__ssvfiscanf_r+0x40>
 8016666:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 8016668:	4621      	mov	r1, r4
 801666a:	4630      	mov	r0, r6
 801666c:	4798      	blx	r3
 801666e:	2800      	cmp	r0, #0
 8016670:	d0e9      	beq.n	8016646 <__ssvfiscanf_r+0x46>
 8016672:	e7ed      	b.n	8016650 <__ssvfiscanf_r+0x50>
 8016674:	f1b9 0f25 	cmp.w	r9, #37	@ 0x25
 8016678:	f040 8085 	bne.w	8016786 <__ssvfiscanf_r+0x186>
 801667c:	9341      	str	r3, [sp, #260]	@ 0x104
 801667e:	9343      	str	r3, [sp, #268]	@ 0x10c
 8016680:	7853      	ldrb	r3, [r2, #1]
 8016682:	2b2a      	cmp	r3, #42	@ 0x2a
 8016684:	bf02      	ittt	eq
 8016686:	2310      	moveq	r3, #16
 8016688:	1c95      	addeq	r5, r2, #2
 801668a:	9341      	streq	r3, [sp, #260]	@ 0x104
 801668c:	220a      	movs	r2, #10
 801668e:	46aa      	mov	sl, r5
 8016690:	f81a 1b01 	ldrb.w	r1, [sl], #1
 8016694:	f1a1 0330 	sub.w	r3, r1, #48	@ 0x30
 8016698:	2b09      	cmp	r3, #9
 801669a:	d91e      	bls.n	80166da <__ssvfiscanf_r+0xda>
 801669c:	f8df b218 	ldr.w	fp, [pc, #536]	@ 80168b8 <__ssvfiscanf_r+0x2b8>
 80166a0:	2203      	movs	r2, #3
 80166a2:	4658      	mov	r0, fp
 80166a4:	f7e9 fdac 	bl	8000200 <memchr>
 80166a8:	b138      	cbz	r0, 80166ba <__ssvfiscanf_r+0xba>
 80166aa:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 80166ac:	eba0 000b 	sub.w	r0, r0, fp
 80166b0:	2301      	movs	r3, #1
 80166b2:	4083      	lsls	r3, r0
 80166b4:	4313      	orrs	r3, r2
 80166b6:	9341      	str	r3, [sp, #260]	@ 0x104
 80166b8:	4655      	mov	r5, sl
 80166ba:	f815 3b01 	ldrb.w	r3, [r5], #1
 80166be:	2b78      	cmp	r3, #120	@ 0x78
 80166c0:	d806      	bhi.n	80166d0 <__ssvfiscanf_r+0xd0>
 80166c2:	2b57      	cmp	r3, #87	@ 0x57
 80166c4:	d810      	bhi.n	80166e8 <__ssvfiscanf_r+0xe8>
 80166c6:	2b25      	cmp	r3, #37	@ 0x25
 80166c8:	d05d      	beq.n	8016786 <__ssvfiscanf_r+0x186>
 80166ca:	d857      	bhi.n	801677c <__ssvfiscanf_r+0x17c>
 80166cc:	2b00      	cmp	r3, #0
 80166ce:	d075      	beq.n	80167bc <__ssvfiscanf_r+0x1bc>
 80166d0:	2303      	movs	r3, #3
 80166d2:	9347      	str	r3, [sp, #284]	@ 0x11c
 80166d4:	230a      	movs	r3, #10
 80166d6:	9342      	str	r3, [sp, #264]	@ 0x108
 80166d8:	e088      	b.n	80167ec <__ssvfiscanf_r+0x1ec>
 80166da:	9b43      	ldr	r3, [sp, #268]	@ 0x10c
 80166dc:	fb02 1103 	mla	r1, r2, r3, r1
 80166e0:	3930      	subs	r1, #48	@ 0x30
 80166e2:	9143      	str	r1, [sp, #268]	@ 0x10c
 80166e4:	4655      	mov	r5, sl
 80166e6:	e7d2      	b.n	801668e <__ssvfiscanf_r+0x8e>
 80166e8:	f1a3 0258 	sub.w	r2, r3, #88	@ 0x58
 80166ec:	2a20      	cmp	r2, #32
 80166ee:	d8ef      	bhi.n	80166d0 <__ssvfiscanf_r+0xd0>
 80166f0:	a101      	add	r1, pc, #4	@ (adr r1, 80166f8 <__ssvfiscanf_r+0xf8>)
 80166f2:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 80166f6:	bf00      	nop
 80166f8:	080167cb 	.word	0x080167cb
 80166fc:	080166d1 	.word	0x080166d1
 8016700:	080166d1 	.word	0x080166d1
 8016704:	08016825 	.word	0x08016825
 8016708:	080166d1 	.word	0x080166d1
 801670c:	080166d1 	.word	0x080166d1
 8016710:	080166d1 	.word	0x080166d1
 8016714:	080166d1 	.word	0x080166d1
 8016718:	080166d1 	.word	0x080166d1
 801671c:	080166d1 	.word	0x080166d1
 8016720:	080166d1 	.word	0x080166d1
 8016724:	0801683b 	.word	0x0801683b
 8016728:	08016821 	.word	0x08016821
 801672c:	08016783 	.word	0x08016783
 8016730:	08016783 	.word	0x08016783
 8016734:	08016783 	.word	0x08016783
 8016738:	080166d1 	.word	0x080166d1
 801673c:	080167dd 	.word	0x080167dd
 8016740:	080166d1 	.word	0x080166d1
 8016744:	080166d1 	.word	0x080166d1
 8016748:	080166d1 	.word	0x080166d1
 801674c:	080166d1 	.word	0x080166d1
 8016750:	0801684b 	.word	0x0801684b
 8016754:	080167e5 	.word	0x080167e5
 8016758:	080167c3 	.word	0x080167c3
 801675c:	080166d1 	.word	0x080166d1
 8016760:	080166d1 	.word	0x080166d1
 8016764:	08016847 	.word	0x08016847
 8016768:	080166d1 	.word	0x080166d1
 801676c:	08016821 	.word	0x08016821
 8016770:	080166d1 	.word	0x080166d1
 8016774:	080166d1 	.word	0x080166d1
 8016778:	080167cb 	.word	0x080167cb
 801677c:	3b45      	subs	r3, #69	@ 0x45
 801677e:	2b02      	cmp	r3, #2
 8016780:	d8a6      	bhi.n	80166d0 <__ssvfiscanf_r+0xd0>
 8016782:	2305      	movs	r3, #5
 8016784:	e031      	b.n	80167ea <__ssvfiscanf_r+0x1ea>
 8016786:	6863      	ldr	r3, [r4, #4]
 8016788:	2b00      	cmp	r3, #0
 801678a:	dd0d      	ble.n	80167a8 <__ssvfiscanf_r+0x1a8>
 801678c:	6823      	ldr	r3, [r4, #0]
 801678e:	781a      	ldrb	r2, [r3, #0]
 8016790:	454a      	cmp	r2, r9
 8016792:	f040 80a6 	bne.w	80168e2 <__ssvfiscanf_r+0x2e2>
 8016796:	3301      	adds	r3, #1
 8016798:	6862      	ldr	r2, [r4, #4]
 801679a:	6023      	str	r3, [r4, #0]
 801679c:	9b45      	ldr	r3, [sp, #276]	@ 0x114
 801679e:	3a01      	subs	r2, #1
 80167a0:	3301      	adds	r3, #1
 80167a2:	6062      	str	r2, [r4, #4]
 80167a4:	9345      	str	r3, [sp, #276]	@ 0x114
 80167a6:	e753      	b.n	8016650 <__ssvfiscanf_r+0x50>
 80167a8:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 80167aa:	4621      	mov	r1, r4
 80167ac:	4630      	mov	r0, r6
 80167ae:	4798      	blx	r3
 80167b0:	2800      	cmp	r0, #0
 80167b2:	d0eb      	beq.n	801678c <__ssvfiscanf_r+0x18c>
 80167b4:	9844      	ldr	r0, [sp, #272]	@ 0x110
 80167b6:	2800      	cmp	r0, #0
 80167b8:	f040 808b 	bne.w	80168d2 <__ssvfiscanf_r+0x2d2>
 80167bc:	f04f 30ff 	mov.w	r0, #4294967295
 80167c0:	e08b      	b.n	80168da <__ssvfiscanf_r+0x2da>
 80167c2:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 80167c4:	f042 0220 	orr.w	r2, r2, #32
 80167c8:	9241      	str	r2, [sp, #260]	@ 0x104
 80167ca:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 80167cc:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80167d0:	9241      	str	r2, [sp, #260]	@ 0x104
 80167d2:	2210      	movs	r2, #16
 80167d4:	2b6e      	cmp	r3, #110	@ 0x6e
 80167d6:	9242      	str	r2, [sp, #264]	@ 0x108
 80167d8:	d902      	bls.n	80167e0 <__ssvfiscanf_r+0x1e0>
 80167da:	e005      	b.n	80167e8 <__ssvfiscanf_r+0x1e8>
 80167dc:	2300      	movs	r3, #0
 80167de:	9342      	str	r3, [sp, #264]	@ 0x108
 80167e0:	2303      	movs	r3, #3
 80167e2:	e002      	b.n	80167ea <__ssvfiscanf_r+0x1ea>
 80167e4:	2308      	movs	r3, #8
 80167e6:	9342      	str	r3, [sp, #264]	@ 0x108
 80167e8:	2304      	movs	r3, #4
 80167ea:	9347      	str	r3, [sp, #284]	@ 0x11c
 80167ec:	6863      	ldr	r3, [r4, #4]
 80167ee:	2b00      	cmp	r3, #0
 80167f0:	dd39      	ble.n	8016866 <__ssvfiscanf_r+0x266>
 80167f2:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 80167f4:	0659      	lsls	r1, r3, #25
 80167f6:	d404      	bmi.n	8016802 <__ssvfiscanf_r+0x202>
 80167f8:	6823      	ldr	r3, [r4, #0]
 80167fa:	781a      	ldrb	r2, [r3, #0]
 80167fc:	5cba      	ldrb	r2, [r7, r2]
 80167fe:	0712      	lsls	r2, r2, #28
 8016800:	d438      	bmi.n	8016874 <__ssvfiscanf_r+0x274>
 8016802:	9b47      	ldr	r3, [sp, #284]	@ 0x11c
 8016804:	2b02      	cmp	r3, #2
 8016806:	dc47      	bgt.n	8016898 <__ssvfiscanf_r+0x298>
 8016808:	466b      	mov	r3, sp
 801680a:	4622      	mov	r2, r4
 801680c:	a941      	add	r1, sp, #260	@ 0x104
 801680e:	4630      	mov	r0, r6
 8016810:	f000 f9f8 	bl	8016c04 <_scanf_chars>
 8016814:	2801      	cmp	r0, #1
 8016816:	d064      	beq.n	80168e2 <__ssvfiscanf_r+0x2e2>
 8016818:	2802      	cmp	r0, #2
 801681a:	f47f af19 	bne.w	8016650 <__ssvfiscanf_r+0x50>
 801681e:	e7c9      	b.n	80167b4 <__ssvfiscanf_r+0x1b4>
 8016820:	220a      	movs	r2, #10
 8016822:	e7d7      	b.n	80167d4 <__ssvfiscanf_r+0x1d4>
 8016824:	4629      	mov	r1, r5
 8016826:	4640      	mov	r0, r8
 8016828:	f000 fb3a 	bl	8016ea0 <__sccl>
 801682c:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 801682e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8016832:	9341      	str	r3, [sp, #260]	@ 0x104
 8016834:	4605      	mov	r5, r0
 8016836:	2301      	movs	r3, #1
 8016838:	e7d7      	b.n	80167ea <__ssvfiscanf_r+0x1ea>
 801683a:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 801683c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8016840:	9341      	str	r3, [sp, #260]	@ 0x104
 8016842:	2300      	movs	r3, #0
 8016844:	e7d1      	b.n	80167ea <__ssvfiscanf_r+0x1ea>
 8016846:	2302      	movs	r3, #2
 8016848:	e7cf      	b.n	80167ea <__ssvfiscanf_r+0x1ea>
 801684a:	9841      	ldr	r0, [sp, #260]	@ 0x104
 801684c:	06c3      	lsls	r3, r0, #27
 801684e:	f53f aeff 	bmi.w	8016650 <__ssvfiscanf_r+0x50>
 8016852:	9b00      	ldr	r3, [sp, #0]
 8016854:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 8016856:	1d19      	adds	r1, r3, #4
 8016858:	9100      	str	r1, [sp, #0]
 801685a:	681b      	ldr	r3, [r3, #0]
 801685c:	07c0      	lsls	r0, r0, #31
 801685e:	bf4c      	ite	mi
 8016860:	801a      	strhmi	r2, [r3, #0]
 8016862:	601a      	strpl	r2, [r3, #0]
 8016864:	e6f4      	b.n	8016650 <__ssvfiscanf_r+0x50>
 8016866:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 8016868:	4621      	mov	r1, r4
 801686a:	4630      	mov	r0, r6
 801686c:	4798      	blx	r3
 801686e:	2800      	cmp	r0, #0
 8016870:	d0bf      	beq.n	80167f2 <__ssvfiscanf_r+0x1f2>
 8016872:	e79f      	b.n	80167b4 <__ssvfiscanf_r+0x1b4>
 8016874:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 8016876:	3201      	adds	r2, #1
 8016878:	9245      	str	r2, [sp, #276]	@ 0x114
 801687a:	6862      	ldr	r2, [r4, #4]
 801687c:	3a01      	subs	r2, #1
 801687e:	2a00      	cmp	r2, #0
 8016880:	6062      	str	r2, [r4, #4]
 8016882:	dd02      	ble.n	801688a <__ssvfiscanf_r+0x28a>
 8016884:	3301      	adds	r3, #1
 8016886:	6023      	str	r3, [r4, #0]
 8016888:	e7b6      	b.n	80167f8 <__ssvfiscanf_r+0x1f8>
 801688a:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 801688c:	4621      	mov	r1, r4
 801688e:	4630      	mov	r0, r6
 8016890:	4798      	blx	r3
 8016892:	2800      	cmp	r0, #0
 8016894:	d0b0      	beq.n	80167f8 <__ssvfiscanf_r+0x1f8>
 8016896:	e78d      	b.n	80167b4 <__ssvfiscanf_r+0x1b4>
 8016898:	2b04      	cmp	r3, #4
 801689a:	dc0f      	bgt.n	80168bc <__ssvfiscanf_r+0x2bc>
 801689c:	466b      	mov	r3, sp
 801689e:	4622      	mov	r2, r4
 80168a0:	a941      	add	r1, sp, #260	@ 0x104
 80168a2:	4630      	mov	r0, r6
 80168a4:	f000 fa08 	bl	8016cb8 <_scanf_i>
 80168a8:	e7b4      	b.n	8016814 <__ssvfiscanf_r+0x214>
 80168aa:	bf00      	nop
 80168ac:	0801654d 	.word	0x0801654d
 80168b0:	080165c7 	.word	0x080165c7
 80168b4:	080176e7 	.word	0x080176e7
 80168b8:	080177ed 	.word	0x080177ed
 80168bc:	4b0a      	ldr	r3, [pc, #40]	@ (80168e8 <__ssvfiscanf_r+0x2e8>)
 80168be:	2b00      	cmp	r3, #0
 80168c0:	f43f aec6 	beq.w	8016650 <__ssvfiscanf_r+0x50>
 80168c4:	466b      	mov	r3, sp
 80168c6:	4622      	mov	r2, r4
 80168c8:	a941      	add	r1, sp, #260	@ 0x104
 80168ca:	4630      	mov	r0, r6
 80168cc:	f3af 8000 	nop.w
 80168d0:	e7a0      	b.n	8016814 <__ssvfiscanf_r+0x214>
 80168d2:	89a3      	ldrh	r3, [r4, #12]
 80168d4:	065b      	lsls	r3, r3, #25
 80168d6:	f53f af71 	bmi.w	80167bc <__ssvfiscanf_r+0x1bc>
 80168da:	f50d 7d23 	add.w	sp, sp, #652	@ 0x28c
 80168de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80168e2:	9844      	ldr	r0, [sp, #272]	@ 0x110
 80168e4:	e7f9      	b.n	80168da <__ssvfiscanf_r+0x2da>
 80168e6:	bf00      	nop
 80168e8:	00000000 	.word	0x00000000

080168ec <_printf_common>:
 80168ec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80168f0:	4616      	mov	r6, r2
 80168f2:	4698      	mov	r8, r3
 80168f4:	688a      	ldr	r2, [r1, #8]
 80168f6:	690b      	ldr	r3, [r1, #16]
 80168f8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80168fc:	4293      	cmp	r3, r2
 80168fe:	bfb8      	it	lt
 8016900:	4613      	movlt	r3, r2
 8016902:	6033      	str	r3, [r6, #0]
 8016904:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8016908:	4607      	mov	r7, r0
 801690a:	460c      	mov	r4, r1
 801690c:	b10a      	cbz	r2, 8016912 <_printf_common+0x26>
 801690e:	3301      	adds	r3, #1
 8016910:	6033      	str	r3, [r6, #0]
 8016912:	6823      	ldr	r3, [r4, #0]
 8016914:	0699      	lsls	r1, r3, #26
 8016916:	bf42      	ittt	mi
 8016918:	6833      	ldrmi	r3, [r6, #0]
 801691a:	3302      	addmi	r3, #2
 801691c:	6033      	strmi	r3, [r6, #0]
 801691e:	6825      	ldr	r5, [r4, #0]
 8016920:	f015 0506 	ands.w	r5, r5, #6
 8016924:	d106      	bne.n	8016934 <_printf_common+0x48>
 8016926:	f104 0a19 	add.w	sl, r4, #25
 801692a:	68e3      	ldr	r3, [r4, #12]
 801692c:	6832      	ldr	r2, [r6, #0]
 801692e:	1a9b      	subs	r3, r3, r2
 8016930:	42ab      	cmp	r3, r5
 8016932:	dc26      	bgt.n	8016982 <_printf_common+0x96>
 8016934:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8016938:	6822      	ldr	r2, [r4, #0]
 801693a:	3b00      	subs	r3, #0
 801693c:	bf18      	it	ne
 801693e:	2301      	movne	r3, #1
 8016940:	0692      	lsls	r2, r2, #26
 8016942:	d42b      	bmi.n	801699c <_printf_common+0xb0>
 8016944:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8016948:	4641      	mov	r1, r8
 801694a:	4638      	mov	r0, r7
 801694c:	47c8      	blx	r9
 801694e:	3001      	adds	r0, #1
 8016950:	d01e      	beq.n	8016990 <_printf_common+0xa4>
 8016952:	6823      	ldr	r3, [r4, #0]
 8016954:	6922      	ldr	r2, [r4, #16]
 8016956:	f003 0306 	and.w	r3, r3, #6
 801695a:	2b04      	cmp	r3, #4
 801695c:	bf02      	ittt	eq
 801695e:	68e5      	ldreq	r5, [r4, #12]
 8016960:	6833      	ldreq	r3, [r6, #0]
 8016962:	1aed      	subeq	r5, r5, r3
 8016964:	68a3      	ldr	r3, [r4, #8]
 8016966:	bf0c      	ite	eq
 8016968:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 801696c:	2500      	movne	r5, #0
 801696e:	4293      	cmp	r3, r2
 8016970:	bfc4      	itt	gt
 8016972:	1a9b      	subgt	r3, r3, r2
 8016974:	18ed      	addgt	r5, r5, r3
 8016976:	2600      	movs	r6, #0
 8016978:	341a      	adds	r4, #26
 801697a:	42b5      	cmp	r5, r6
 801697c:	d11a      	bne.n	80169b4 <_printf_common+0xc8>
 801697e:	2000      	movs	r0, #0
 8016980:	e008      	b.n	8016994 <_printf_common+0xa8>
 8016982:	2301      	movs	r3, #1
 8016984:	4652      	mov	r2, sl
 8016986:	4641      	mov	r1, r8
 8016988:	4638      	mov	r0, r7
 801698a:	47c8      	blx	r9
 801698c:	3001      	adds	r0, #1
 801698e:	d103      	bne.n	8016998 <_printf_common+0xac>
 8016990:	f04f 30ff 	mov.w	r0, #4294967295
 8016994:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8016998:	3501      	adds	r5, #1
 801699a:	e7c6      	b.n	801692a <_printf_common+0x3e>
 801699c:	18e1      	adds	r1, r4, r3
 801699e:	1c5a      	adds	r2, r3, #1
 80169a0:	2030      	movs	r0, #48	@ 0x30
 80169a2:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80169a6:	4422      	add	r2, r4
 80169a8:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80169ac:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80169b0:	3302      	adds	r3, #2
 80169b2:	e7c7      	b.n	8016944 <_printf_common+0x58>
 80169b4:	2301      	movs	r3, #1
 80169b6:	4622      	mov	r2, r4
 80169b8:	4641      	mov	r1, r8
 80169ba:	4638      	mov	r0, r7
 80169bc:	47c8      	blx	r9
 80169be:	3001      	adds	r0, #1
 80169c0:	d0e6      	beq.n	8016990 <_printf_common+0xa4>
 80169c2:	3601      	adds	r6, #1
 80169c4:	e7d9      	b.n	801697a <_printf_common+0x8e>
	...

080169c8 <_printf_i>:
 80169c8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80169cc:	7e0f      	ldrb	r7, [r1, #24]
 80169ce:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80169d0:	2f78      	cmp	r7, #120	@ 0x78
 80169d2:	4691      	mov	r9, r2
 80169d4:	4680      	mov	r8, r0
 80169d6:	460c      	mov	r4, r1
 80169d8:	469a      	mov	sl, r3
 80169da:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80169de:	d807      	bhi.n	80169f0 <_printf_i+0x28>
 80169e0:	2f62      	cmp	r7, #98	@ 0x62
 80169e2:	d80a      	bhi.n	80169fa <_printf_i+0x32>
 80169e4:	2f00      	cmp	r7, #0
 80169e6:	f000 80d1 	beq.w	8016b8c <_printf_i+0x1c4>
 80169ea:	2f58      	cmp	r7, #88	@ 0x58
 80169ec:	f000 80b8 	beq.w	8016b60 <_printf_i+0x198>
 80169f0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80169f4:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80169f8:	e03a      	b.n	8016a70 <_printf_i+0xa8>
 80169fa:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80169fe:	2b15      	cmp	r3, #21
 8016a00:	d8f6      	bhi.n	80169f0 <_printf_i+0x28>
 8016a02:	a101      	add	r1, pc, #4	@ (adr r1, 8016a08 <_printf_i+0x40>)
 8016a04:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8016a08:	08016a61 	.word	0x08016a61
 8016a0c:	08016a75 	.word	0x08016a75
 8016a10:	080169f1 	.word	0x080169f1
 8016a14:	080169f1 	.word	0x080169f1
 8016a18:	080169f1 	.word	0x080169f1
 8016a1c:	080169f1 	.word	0x080169f1
 8016a20:	08016a75 	.word	0x08016a75
 8016a24:	080169f1 	.word	0x080169f1
 8016a28:	080169f1 	.word	0x080169f1
 8016a2c:	080169f1 	.word	0x080169f1
 8016a30:	080169f1 	.word	0x080169f1
 8016a34:	08016b73 	.word	0x08016b73
 8016a38:	08016a9f 	.word	0x08016a9f
 8016a3c:	08016b2d 	.word	0x08016b2d
 8016a40:	080169f1 	.word	0x080169f1
 8016a44:	080169f1 	.word	0x080169f1
 8016a48:	08016b95 	.word	0x08016b95
 8016a4c:	080169f1 	.word	0x080169f1
 8016a50:	08016a9f 	.word	0x08016a9f
 8016a54:	080169f1 	.word	0x080169f1
 8016a58:	080169f1 	.word	0x080169f1
 8016a5c:	08016b35 	.word	0x08016b35
 8016a60:	6833      	ldr	r3, [r6, #0]
 8016a62:	1d1a      	adds	r2, r3, #4
 8016a64:	681b      	ldr	r3, [r3, #0]
 8016a66:	6032      	str	r2, [r6, #0]
 8016a68:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8016a6c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8016a70:	2301      	movs	r3, #1
 8016a72:	e09c      	b.n	8016bae <_printf_i+0x1e6>
 8016a74:	6833      	ldr	r3, [r6, #0]
 8016a76:	6820      	ldr	r0, [r4, #0]
 8016a78:	1d19      	adds	r1, r3, #4
 8016a7a:	6031      	str	r1, [r6, #0]
 8016a7c:	0606      	lsls	r6, r0, #24
 8016a7e:	d501      	bpl.n	8016a84 <_printf_i+0xbc>
 8016a80:	681d      	ldr	r5, [r3, #0]
 8016a82:	e003      	b.n	8016a8c <_printf_i+0xc4>
 8016a84:	0645      	lsls	r5, r0, #25
 8016a86:	d5fb      	bpl.n	8016a80 <_printf_i+0xb8>
 8016a88:	f9b3 5000 	ldrsh.w	r5, [r3]
 8016a8c:	2d00      	cmp	r5, #0
 8016a8e:	da03      	bge.n	8016a98 <_printf_i+0xd0>
 8016a90:	232d      	movs	r3, #45	@ 0x2d
 8016a92:	426d      	negs	r5, r5
 8016a94:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8016a98:	4858      	ldr	r0, [pc, #352]	@ (8016bfc <_printf_i+0x234>)
 8016a9a:	230a      	movs	r3, #10
 8016a9c:	e011      	b.n	8016ac2 <_printf_i+0xfa>
 8016a9e:	6821      	ldr	r1, [r4, #0]
 8016aa0:	6833      	ldr	r3, [r6, #0]
 8016aa2:	0608      	lsls	r0, r1, #24
 8016aa4:	f853 5b04 	ldr.w	r5, [r3], #4
 8016aa8:	d402      	bmi.n	8016ab0 <_printf_i+0xe8>
 8016aaa:	0649      	lsls	r1, r1, #25
 8016aac:	bf48      	it	mi
 8016aae:	b2ad      	uxthmi	r5, r5
 8016ab0:	2f6f      	cmp	r7, #111	@ 0x6f
 8016ab2:	4852      	ldr	r0, [pc, #328]	@ (8016bfc <_printf_i+0x234>)
 8016ab4:	6033      	str	r3, [r6, #0]
 8016ab6:	bf14      	ite	ne
 8016ab8:	230a      	movne	r3, #10
 8016aba:	2308      	moveq	r3, #8
 8016abc:	2100      	movs	r1, #0
 8016abe:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8016ac2:	6866      	ldr	r6, [r4, #4]
 8016ac4:	60a6      	str	r6, [r4, #8]
 8016ac6:	2e00      	cmp	r6, #0
 8016ac8:	db05      	blt.n	8016ad6 <_printf_i+0x10e>
 8016aca:	6821      	ldr	r1, [r4, #0]
 8016acc:	432e      	orrs	r6, r5
 8016ace:	f021 0104 	bic.w	r1, r1, #4
 8016ad2:	6021      	str	r1, [r4, #0]
 8016ad4:	d04b      	beq.n	8016b6e <_printf_i+0x1a6>
 8016ad6:	4616      	mov	r6, r2
 8016ad8:	fbb5 f1f3 	udiv	r1, r5, r3
 8016adc:	fb03 5711 	mls	r7, r3, r1, r5
 8016ae0:	5dc7      	ldrb	r7, [r0, r7]
 8016ae2:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8016ae6:	462f      	mov	r7, r5
 8016ae8:	42bb      	cmp	r3, r7
 8016aea:	460d      	mov	r5, r1
 8016aec:	d9f4      	bls.n	8016ad8 <_printf_i+0x110>
 8016aee:	2b08      	cmp	r3, #8
 8016af0:	d10b      	bne.n	8016b0a <_printf_i+0x142>
 8016af2:	6823      	ldr	r3, [r4, #0]
 8016af4:	07df      	lsls	r7, r3, #31
 8016af6:	d508      	bpl.n	8016b0a <_printf_i+0x142>
 8016af8:	6923      	ldr	r3, [r4, #16]
 8016afa:	6861      	ldr	r1, [r4, #4]
 8016afc:	4299      	cmp	r1, r3
 8016afe:	bfde      	ittt	le
 8016b00:	2330      	movle	r3, #48	@ 0x30
 8016b02:	f806 3c01 	strble.w	r3, [r6, #-1]
 8016b06:	f106 36ff 	addle.w	r6, r6, #4294967295
 8016b0a:	1b92      	subs	r2, r2, r6
 8016b0c:	6122      	str	r2, [r4, #16]
 8016b0e:	f8cd a000 	str.w	sl, [sp]
 8016b12:	464b      	mov	r3, r9
 8016b14:	aa03      	add	r2, sp, #12
 8016b16:	4621      	mov	r1, r4
 8016b18:	4640      	mov	r0, r8
 8016b1a:	f7ff fee7 	bl	80168ec <_printf_common>
 8016b1e:	3001      	adds	r0, #1
 8016b20:	d14a      	bne.n	8016bb8 <_printf_i+0x1f0>
 8016b22:	f04f 30ff 	mov.w	r0, #4294967295
 8016b26:	b004      	add	sp, #16
 8016b28:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8016b2c:	6823      	ldr	r3, [r4, #0]
 8016b2e:	f043 0320 	orr.w	r3, r3, #32
 8016b32:	6023      	str	r3, [r4, #0]
 8016b34:	4832      	ldr	r0, [pc, #200]	@ (8016c00 <_printf_i+0x238>)
 8016b36:	2778      	movs	r7, #120	@ 0x78
 8016b38:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8016b3c:	6823      	ldr	r3, [r4, #0]
 8016b3e:	6831      	ldr	r1, [r6, #0]
 8016b40:	061f      	lsls	r7, r3, #24
 8016b42:	f851 5b04 	ldr.w	r5, [r1], #4
 8016b46:	d402      	bmi.n	8016b4e <_printf_i+0x186>
 8016b48:	065f      	lsls	r7, r3, #25
 8016b4a:	bf48      	it	mi
 8016b4c:	b2ad      	uxthmi	r5, r5
 8016b4e:	6031      	str	r1, [r6, #0]
 8016b50:	07d9      	lsls	r1, r3, #31
 8016b52:	bf44      	itt	mi
 8016b54:	f043 0320 	orrmi.w	r3, r3, #32
 8016b58:	6023      	strmi	r3, [r4, #0]
 8016b5a:	b11d      	cbz	r5, 8016b64 <_printf_i+0x19c>
 8016b5c:	2310      	movs	r3, #16
 8016b5e:	e7ad      	b.n	8016abc <_printf_i+0xf4>
 8016b60:	4826      	ldr	r0, [pc, #152]	@ (8016bfc <_printf_i+0x234>)
 8016b62:	e7e9      	b.n	8016b38 <_printf_i+0x170>
 8016b64:	6823      	ldr	r3, [r4, #0]
 8016b66:	f023 0320 	bic.w	r3, r3, #32
 8016b6a:	6023      	str	r3, [r4, #0]
 8016b6c:	e7f6      	b.n	8016b5c <_printf_i+0x194>
 8016b6e:	4616      	mov	r6, r2
 8016b70:	e7bd      	b.n	8016aee <_printf_i+0x126>
 8016b72:	6833      	ldr	r3, [r6, #0]
 8016b74:	6825      	ldr	r5, [r4, #0]
 8016b76:	6961      	ldr	r1, [r4, #20]
 8016b78:	1d18      	adds	r0, r3, #4
 8016b7a:	6030      	str	r0, [r6, #0]
 8016b7c:	062e      	lsls	r6, r5, #24
 8016b7e:	681b      	ldr	r3, [r3, #0]
 8016b80:	d501      	bpl.n	8016b86 <_printf_i+0x1be>
 8016b82:	6019      	str	r1, [r3, #0]
 8016b84:	e002      	b.n	8016b8c <_printf_i+0x1c4>
 8016b86:	0668      	lsls	r0, r5, #25
 8016b88:	d5fb      	bpl.n	8016b82 <_printf_i+0x1ba>
 8016b8a:	8019      	strh	r1, [r3, #0]
 8016b8c:	2300      	movs	r3, #0
 8016b8e:	6123      	str	r3, [r4, #16]
 8016b90:	4616      	mov	r6, r2
 8016b92:	e7bc      	b.n	8016b0e <_printf_i+0x146>
 8016b94:	6833      	ldr	r3, [r6, #0]
 8016b96:	1d1a      	adds	r2, r3, #4
 8016b98:	6032      	str	r2, [r6, #0]
 8016b9a:	681e      	ldr	r6, [r3, #0]
 8016b9c:	6862      	ldr	r2, [r4, #4]
 8016b9e:	2100      	movs	r1, #0
 8016ba0:	4630      	mov	r0, r6
 8016ba2:	f7e9 fb2d 	bl	8000200 <memchr>
 8016ba6:	b108      	cbz	r0, 8016bac <_printf_i+0x1e4>
 8016ba8:	1b80      	subs	r0, r0, r6
 8016baa:	6060      	str	r0, [r4, #4]
 8016bac:	6863      	ldr	r3, [r4, #4]
 8016bae:	6123      	str	r3, [r4, #16]
 8016bb0:	2300      	movs	r3, #0
 8016bb2:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8016bb6:	e7aa      	b.n	8016b0e <_printf_i+0x146>
 8016bb8:	6923      	ldr	r3, [r4, #16]
 8016bba:	4632      	mov	r2, r6
 8016bbc:	4649      	mov	r1, r9
 8016bbe:	4640      	mov	r0, r8
 8016bc0:	47d0      	blx	sl
 8016bc2:	3001      	adds	r0, #1
 8016bc4:	d0ad      	beq.n	8016b22 <_printf_i+0x15a>
 8016bc6:	6823      	ldr	r3, [r4, #0]
 8016bc8:	079b      	lsls	r3, r3, #30
 8016bca:	d413      	bmi.n	8016bf4 <_printf_i+0x22c>
 8016bcc:	68e0      	ldr	r0, [r4, #12]
 8016bce:	9b03      	ldr	r3, [sp, #12]
 8016bd0:	4298      	cmp	r0, r3
 8016bd2:	bfb8      	it	lt
 8016bd4:	4618      	movlt	r0, r3
 8016bd6:	e7a6      	b.n	8016b26 <_printf_i+0x15e>
 8016bd8:	2301      	movs	r3, #1
 8016bda:	4632      	mov	r2, r6
 8016bdc:	4649      	mov	r1, r9
 8016bde:	4640      	mov	r0, r8
 8016be0:	47d0      	blx	sl
 8016be2:	3001      	adds	r0, #1
 8016be4:	d09d      	beq.n	8016b22 <_printf_i+0x15a>
 8016be6:	3501      	adds	r5, #1
 8016be8:	68e3      	ldr	r3, [r4, #12]
 8016bea:	9903      	ldr	r1, [sp, #12]
 8016bec:	1a5b      	subs	r3, r3, r1
 8016bee:	42ab      	cmp	r3, r5
 8016bf0:	dcf2      	bgt.n	8016bd8 <_printf_i+0x210>
 8016bf2:	e7eb      	b.n	8016bcc <_printf_i+0x204>
 8016bf4:	2500      	movs	r5, #0
 8016bf6:	f104 0619 	add.w	r6, r4, #25
 8016bfa:	e7f5      	b.n	8016be8 <_printf_i+0x220>
 8016bfc:	080177f8 	.word	0x080177f8
 8016c00:	08017809 	.word	0x08017809

08016c04 <_scanf_chars>:
 8016c04:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8016c08:	4615      	mov	r5, r2
 8016c0a:	688a      	ldr	r2, [r1, #8]
 8016c0c:	4680      	mov	r8, r0
 8016c0e:	460c      	mov	r4, r1
 8016c10:	b932      	cbnz	r2, 8016c20 <_scanf_chars+0x1c>
 8016c12:	698a      	ldr	r2, [r1, #24]
 8016c14:	2a00      	cmp	r2, #0
 8016c16:	bf14      	ite	ne
 8016c18:	f04f 32ff 	movne.w	r2, #4294967295
 8016c1c:	2201      	moveq	r2, #1
 8016c1e:	608a      	str	r2, [r1, #8]
 8016c20:	6822      	ldr	r2, [r4, #0]
 8016c22:	f8df 9090 	ldr.w	r9, [pc, #144]	@ 8016cb4 <_scanf_chars+0xb0>
 8016c26:	06d1      	lsls	r1, r2, #27
 8016c28:	bf5f      	itttt	pl
 8016c2a:	681a      	ldrpl	r2, [r3, #0]
 8016c2c:	1d11      	addpl	r1, r2, #4
 8016c2e:	6019      	strpl	r1, [r3, #0]
 8016c30:	6816      	ldrpl	r6, [r2, #0]
 8016c32:	2700      	movs	r7, #0
 8016c34:	69a0      	ldr	r0, [r4, #24]
 8016c36:	b188      	cbz	r0, 8016c5c <_scanf_chars+0x58>
 8016c38:	2801      	cmp	r0, #1
 8016c3a:	d107      	bne.n	8016c4c <_scanf_chars+0x48>
 8016c3c:	682b      	ldr	r3, [r5, #0]
 8016c3e:	781a      	ldrb	r2, [r3, #0]
 8016c40:	6963      	ldr	r3, [r4, #20]
 8016c42:	5c9b      	ldrb	r3, [r3, r2]
 8016c44:	b953      	cbnz	r3, 8016c5c <_scanf_chars+0x58>
 8016c46:	2f00      	cmp	r7, #0
 8016c48:	d031      	beq.n	8016cae <_scanf_chars+0xaa>
 8016c4a:	e022      	b.n	8016c92 <_scanf_chars+0x8e>
 8016c4c:	2802      	cmp	r0, #2
 8016c4e:	d120      	bne.n	8016c92 <_scanf_chars+0x8e>
 8016c50:	682b      	ldr	r3, [r5, #0]
 8016c52:	781b      	ldrb	r3, [r3, #0]
 8016c54:	f819 3003 	ldrb.w	r3, [r9, r3]
 8016c58:	071b      	lsls	r3, r3, #28
 8016c5a:	d41a      	bmi.n	8016c92 <_scanf_chars+0x8e>
 8016c5c:	6823      	ldr	r3, [r4, #0]
 8016c5e:	06da      	lsls	r2, r3, #27
 8016c60:	bf5e      	ittt	pl
 8016c62:	682b      	ldrpl	r3, [r5, #0]
 8016c64:	781b      	ldrbpl	r3, [r3, #0]
 8016c66:	f806 3b01 	strbpl.w	r3, [r6], #1
 8016c6a:	682a      	ldr	r2, [r5, #0]
 8016c6c:	686b      	ldr	r3, [r5, #4]
 8016c6e:	3201      	adds	r2, #1
 8016c70:	602a      	str	r2, [r5, #0]
 8016c72:	68a2      	ldr	r2, [r4, #8]
 8016c74:	3b01      	subs	r3, #1
 8016c76:	3a01      	subs	r2, #1
 8016c78:	606b      	str	r3, [r5, #4]
 8016c7a:	3701      	adds	r7, #1
 8016c7c:	60a2      	str	r2, [r4, #8]
 8016c7e:	b142      	cbz	r2, 8016c92 <_scanf_chars+0x8e>
 8016c80:	2b00      	cmp	r3, #0
 8016c82:	dcd7      	bgt.n	8016c34 <_scanf_chars+0x30>
 8016c84:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 8016c88:	4629      	mov	r1, r5
 8016c8a:	4640      	mov	r0, r8
 8016c8c:	4798      	blx	r3
 8016c8e:	2800      	cmp	r0, #0
 8016c90:	d0d0      	beq.n	8016c34 <_scanf_chars+0x30>
 8016c92:	6823      	ldr	r3, [r4, #0]
 8016c94:	f013 0310 	ands.w	r3, r3, #16
 8016c98:	d105      	bne.n	8016ca6 <_scanf_chars+0xa2>
 8016c9a:	68e2      	ldr	r2, [r4, #12]
 8016c9c:	3201      	adds	r2, #1
 8016c9e:	60e2      	str	r2, [r4, #12]
 8016ca0:	69a2      	ldr	r2, [r4, #24]
 8016ca2:	b102      	cbz	r2, 8016ca6 <_scanf_chars+0xa2>
 8016ca4:	7033      	strb	r3, [r6, #0]
 8016ca6:	6923      	ldr	r3, [r4, #16]
 8016ca8:	443b      	add	r3, r7
 8016caa:	6123      	str	r3, [r4, #16]
 8016cac:	2000      	movs	r0, #0
 8016cae:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8016cb2:	bf00      	nop
 8016cb4:	080176e7 	.word	0x080176e7

08016cb8 <_scanf_i>:
 8016cb8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016cbc:	4698      	mov	r8, r3
 8016cbe:	4b74      	ldr	r3, [pc, #464]	@ (8016e90 <_scanf_i+0x1d8>)
 8016cc0:	460c      	mov	r4, r1
 8016cc2:	4682      	mov	sl, r0
 8016cc4:	4616      	mov	r6, r2
 8016cc6:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8016cca:	b087      	sub	sp, #28
 8016ccc:	ab03      	add	r3, sp, #12
 8016cce:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8016cd2:	4b70      	ldr	r3, [pc, #448]	@ (8016e94 <_scanf_i+0x1dc>)
 8016cd4:	69a1      	ldr	r1, [r4, #24]
 8016cd6:	4a70      	ldr	r2, [pc, #448]	@ (8016e98 <_scanf_i+0x1e0>)
 8016cd8:	2903      	cmp	r1, #3
 8016cda:	bf08      	it	eq
 8016cdc:	461a      	moveq	r2, r3
 8016cde:	68a3      	ldr	r3, [r4, #8]
 8016ce0:	9201      	str	r2, [sp, #4]
 8016ce2:	1e5a      	subs	r2, r3, #1
 8016ce4:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 8016ce8:	bf88      	it	hi
 8016cea:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 8016cee:	4627      	mov	r7, r4
 8016cf0:	bf82      	ittt	hi
 8016cf2:	eb03 0905 	addhi.w	r9, r3, r5
 8016cf6:	f240 135d 	movwhi	r3, #349	@ 0x15d
 8016cfa:	60a3      	strhi	r3, [r4, #8]
 8016cfc:	f857 3b1c 	ldr.w	r3, [r7], #28
 8016d00:	f443 6350 	orr.w	r3, r3, #3328	@ 0xd00
 8016d04:	bf98      	it	ls
 8016d06:	f04f 0900 	movls.w	r9, #0
 8016d0a:	6023      	str	r3, [r4, #0]
 8016d0c:	463d      	mov	r5, r7
 8016d0e:	f04f 0b00 	mov.w	fp, #0
 8016d12:	6831      	ldr	r1, [r6, #0]
 8016d14:	ab03      	add	r3, sp, #12
 8016d16:	7809      	ldrb	r1, [r1, #0]
 8016d18:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 8016d1c:	2202      	movs	r2, #2
 8016d1e:	f7e9 fa6f 	bl	8000200 <memchr>
 8016d22:	b328      	cbz	r0, 8016d70 <_scanf_i+0xb8>
 8016d24:	f1bb 0f01 	cmp.w	fp, #1
 8016d28:	d159      	bne.n	8016dde <_scanf_i+0x126>
 8016d2a:	6862      	ldr	r2, [r4, #4]
 8016d2c:	b92a      	cbnz	r2, 8016d3a <_scanf_i+0x82>
 8016d2e:	6822      	ldr	r2, [r4, #0]
 8016d30:	2108      	movs	r1, #8
 8016d32:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8016d36:	6061      	str	r1, [r4, #4]
 8016d38:	6022      	str	r2, [r4, #0]
 8016d3a:	6822      	ldr	r2, [r4, #0]
 8016d3c:	f422 62a0 	bic.w	r2, r2, #1280	@ 0x500
 8016d40:	6022      	str	r2, [r4, #0]
 8016d42:	68a2      	ldr	r2, [r4, #8]
 8016d44:	1e51      	subs	r1, r2, #1
 8016d46:	60a1      	str	r1, [r4, #8]
 8016d48:	b192      	cbz	r2, 8016d70 <_scanf_i+0xb8>
 8016d4a:	6832      	ldr	r2, [r6, #0]
 8016d4c:	1c51      	adds	r1, r2, #1
 8016d4e:	6031      	str	r1, [r6, #0]
 8016d50:	7812      	ldrb	r2, [r2, #0]
 8016d52:	f805 2b01 	strb.w	r2, [r5], #1
 8016d56:	6872      	ldr	r2, [r6, #4]
 8016d58:	3a01      	subs	r2, #1
 8016d5a:	2a00      	cmp	r2, #0
 8016d5c:	6072      	str	r2, [r6, #4]
 8016d5e:	dc07      	bgt.n	8016d70 <_scanf_i+0xb8>
 8016d60:	f8d4 2180 	ldr.w	r2, [r4, #384]	@ 0x180
 8016d64:	4631      	mov	r1, r6
 8016d66:	4650      	mov	r0, sl
 8016d68:	4790      	blx	r2
 8016d6a:	2800      	cmp	r0, #0
 8016d6c:	f040 8085 	bne.w	8016e7a <_scanf_i+0x1c2>
 8016d70:	f10b 0b01 	add.w	fp, fp, #1
 8016d74:	f1bb 0f03 	cmp.w	fp, #3
 8016d78:	d1cb      	bne.n	8016d12 <_scanf_i+0x5a>
 8016d7a:	6863      	ldr	r3, [r4, #4]
 8016d7c:	b90b      	cbnz	r3, 8016d82 <_scanf_i+0xca>
 8016d7e:	230a      	movs	r3, #10
 8016d80:	6063      	str	r3, [r4, #4]
 8016d82:	6863      	ldr	r3, [r4, #4]
 8016d84:	4945      	ldr	r1, [pc, #276]	@ (8016e9c <_scanf_i+0x1e4>)
 8016d86:	6960      	ldr	r0, [r4, #20]
 8016d88:	1ac9      	subs	r1, r1, r3
 8016d8a:	f000 f889 	bl	8016ea0 <__sccl>
 8016d8e:	f04f 0b00 	mov.w	fp, #0
 8016d92:	68a3      	ldr	r3, [r4, #8]
 8016d94:	6822      	ldr	r2, [r4, #0]
 8016d96:	2b00      	cmp	r3, #0
 8016d98:	d03d      	beq.n	8016e16 <_scanf_i+0x15e>
 8016d9a:	6831      	ldr	r1, [r6, #0]
 8016d9c:	6960      	ldr	r0, [r4, #20]
 8016d9e:	f891 c000 	ldrb.w	ip, [r1]
 8016da2:	f810 000c 	ldrb.w	r0, [r0, ip]
 8016da6:	2800      	cmp	r0, #0
 8016da8:	d035      	beq.n	8016e16 <_scanf_i+0x15e>
 8016daa:	f1bc 0f30 	cmp.w	ip, #48	@ 0x30
 8016dae:	d124      	bne.n	8016dfa <_scanf_i+0x142>
 8016db0:	0510      	lsls	r0, r2, #20
 8016db2:	d522      	bpl.n	8016dfa <_scanf_i+0x142>
 8016db4:	f10b 0b01 	add.w	fp, fp, #1
 8016db8:	f1b9 0f00 	cmp.w	r9, #0
 8016dbc:	d003      	beq.n	8016dc6 <_scanf_i+0x10e>
 8016dbe:	3301      	adds	r3, #1
 8016dc0:	f109 39ff 	add.w	r9, r9, #4294967295
 8016dc4:	60a3      	str	r3, [r4, #8]
 8016dc6:	6873      	ldr	r3, [r6, #4]
 8016dc8:	3b01      	subs	r3, #1
 8016dca:	2b00      	cmp	r3, #0
 8016dcc:	6073      	str	r3, [r6, #4]
 8016dce:	dd1b      	ble.n	8016e08 <_scanf_i+0x150>
 8016dd0:	6833      	ldr	r3, [r6, #0]
 8016dd2:	3301      	adds	r3, #1
 8016dd4:	6033      	str	r3, [r6, #0]
 8016dd6:	68a3      	ldr	r3, [r4, #8]
 8016dd8:	3b01      	subs	r3, #1
 8016dda:	60a3      	str	r3, [r4, #8]
 8016ddc:	e7d9      	b.n	8016d92 <_scanf_i+0xda>
 8016dde:	f1bb 0f02 	cmp.w	fp, #2
 8016de2:	d1ae      	bne.n	8016d42 <_scanf_i+0x8a>
 8016de4:	6822      	ldr	r2, [r4, #0]
 8016de6:	f402 61c0 	and.w	r1, r2, #1536	@ 0x600
 8016dea:	f5b1 7f00 	cmp.w	r1, #512	@ 0x200
 8016dee:	d1c4      	bne.n	8016d7a <_scanf_i+0xc2>
 8016df0:	2110      	movs	r1, #16
 8016df2:	6061      	str	r1, [r4, #4]
 8016df4:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8016df8:	e7a2      	b.n	8016d40 <_scanf_i+0x88>
 8016dfa:	f422 6210 	bic.w	r2, r2, #2304	@ 0x900
 8016dfe:	6022      	str	r2, [r4, #0]
 8016e00:	780b      	ldrb	r3, [r1, #0]
 8016e02:	f805 3b01 	strb.w	r3, [r5], #1
 8016e06:	e7de      	b.n	8016dc6 <_scanf_i+0x10e>
 8016e08:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 8016e0c:	4631      	mov	r1, r6
 8016e0e:	4650      	mov	r0, sl
 8016e10:	4798      	blx	r3
 8016e12:	2800      	cmp	r0, #0
 8016e14:	d0df      	beq.n	8016dd6 <_scanf_i+0x11e>
 8016e16:	6823      	ldr	r3, [r4, #0]
 8016e18:	05d9      	lsls	r1, r3, #23
 8016e1a:	d50d      	bpl.n	8016e38 <_scanf_i+0x180>
 8016e1c:	42bd      	cmp	r5, r7
 8016e1e:	d909      	bls.n	8016e34 <_scanf_i+0x17c>
 8016e20:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 8016e24:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8016e28:	4632      	mov	r2, r6
 8016e2a:	4650      	mov	r0, sl
 8016e2c:	4798      	blx	r3
 8016e2e:	f105 39ff 	add.w	r9, r5, #4294967295
 8016e32:	464d      	mov	r5, r9
 8016e34:	42bd      	cmp	r5, r7
 8016e36:	d028      	beq.n	8016e8a <_scanf_i+0x1d2>
 8016e38:	6822      	ldr	r2, [r4, #0]
 8016e3a:	f012 0210 	ands.w	r2, r2, #16
 8016e3e:	d113      	bne.n	8016e68 <_scanf_i+0x1b0>
 8016e40:	702a      	strb	r2, [r5, #0]
 8016e42:	6863      	ldr	r3, [r4, #4]
 8016e44:	9e01      	ldr	r6, [sp, #4]
 8016e46:	4639      	mov	r1, r7
 8016e48:	4650      	mov	r0, sl
 8016e4a:	47b0      	blx	r6
 8016e4c:	f8d8 3000 	ldr.w	r3, [r8]
 8016e50:	6821      	ldr	r1, [r4, #0]
 8016e52:	1d1a      	adds	r2, r3, #4
 8016e54:	f8c8 2000 	str.w	r2, [r8]
 8016e58:	f011 0f20 	tst.w	r1, #32
 8016e5c:	681b      	ldr	r3, [r3, #0]
 8016e5e:	d00f      	beq.n	8016e80 <_scanf_i+0x1c8>
 8016e60:	6018      	str	r0, [r3, #0]
 8016e62:	68e3      	ldr	r3, [r4, #12]
 8016e64:	3301      	adds	r3, #1
 8016e66:	60e3      	str	r3, [r4, #12]
 8016e68:	6923      	ldr	r3, [r4, #16]
 8016e6a:	1bed      	subs	r5, r5, r7
 8016e6c:	445d      	add	r5, fp
 8016e6e:	442b      	add	r3, r5
 8016e70:	6123      	str	r3, [r4, #16]
 8016e72:	2000      	movs	r0, #0
 8016e74:	b007      	add	sp, #28
 8016e76:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016e7a:	f04f 0b00 	mov.w	fp, #0
 8016e7e:	e7ca      	b.n	8016e16 <_scanf_i+0x15e>
 8016e80:	07ca      	lsls	r2, r1, #31
 8016e82:	bf4c      	ite	mi
 8016e84:	8018      	strhmi	r0, [r3, #0]
 8016e86:	6018      	strpl	r0, [r3, #0]
 8016e88:	e7eb      	b.n	8016e62 <_scanf_i+0x1aa>
 8016e8a:	2001      	movs	r0, #1
 8016e8c:	e7f2      	b.n	8016e74 <_scanf_i+0x1bc>
 8016e8e:	bf00      	nop
 8016e90:	080175a4 	.word	0x080175a4
 8016e94:	08015eb1 	.word	0x08015eb1
 8016e98:	08017115 	.word	0x08017115
 8016e9c:	0801782a 	.word	0x0801782a

08016ea0 <__sccl>:
 8016ea0:	b570      	push	{r4, r5, r6, lr}
 8016ea2:	780b      	ldrb	r3, [r1, #0]
 8016ea4:	4604      	mov	r4, r0
 8016ea6:	2b5e      	cmp	r3, #94	@ 0x5e
 8016ea8:	bf0b      	itete	eq
 8016eaa:	784b      	ldrbeq	r3, [r1, #1]
 8016eac:	1c4a      	addne	r2, r1, #1
 8016eae:	1c8a      	addeq	r2, r1, #2
 8016eb0:	2100      	movne	r1, #0
 8016eb2:	bf08      	it	eq
 8016eb4:	2101      	moveq	r1, #1
 8016eb6:	3801      	subs	r0, #1
 8016eb8:	f104 05ff 	add.w	r5, r4, #255	@ 0xff
 8016ebc:	f800 1f01 	strb.w	r1, [r0, #1]!
 8016ec0:	42a8      	cmp	r0, r5
 8016ec2:	d1fb      	bne.n	8016ebc <__sccl+0x1c>
 8016ec4:	b90b      	cbnz	r3, 8016eca <__sccl+0x2a>
 8016ec6:	1e50      	subs	r0, r2, #1
 8016ec8:	bd70      	pop	{r4, r5, r6, pc}
 8016eca:	f081 0101 	eor.w	r1, r1, #1
 8016ece:	54e1      	strb	r1, [r4, r3]
 8016ed0:	4610      	mov	r0, r2
 8016ed2:	4602      	mov	r2, r0
 8016ed4:	f812 5b01 	ldrb.w	r5, [r2], #1
 8016ed8:	2d2d      	cmp	r5, #45	@ 0x2d
 8016eda:	d005      	beq.n	8016ee8 <__sccl+0x48>
 8016edc:	2d5d      	cmp	r5, #93	@ 0x5d
 8016ede:	d016      	beq.n	8016f0e <__sccl+0x6e>
 8016ee0:	2d00      	cmp	r5, #0
 8016ee2:	d0f1      	beq.n	8016ec8 <__sccl+0x28>
 8016ee4:	462b      	mov	r3, r5
 8016ee6:	e7f2      	b.n	8016ece <__sccl+0x2e>
 8016ee8:	7846      	ldrb	r6, [r0, #1]
 8016eea:	2e5d      	cmp	r6, #93	@ 0x5d
 8016eec:	d0fa      	beq.n	8016ee4 <__sccl+0x44>
 8016eee:	42b3      	cmp	r3, r6
 8016ef0:	dcf8      	bgt.n	8016ee4 <__sccl+0x44>
 8016ef2:	3002      	adds	r0, #2
 8016ef4:	461a      	mov	r2, r3
 8016ef6:	3201      	adds	r2, #1
 8016ef8:	4296      	cmp	r6, r2
 8016efa:	54a1      	strb	r1, [r4, r2]
 8016efc:	dcfb      	bgt.n	8016ef6 <__sccl+0x56>
 8016efe:	1af2      	subs	r2, r6, r3
 8016f00:	3a01      	subs	r2, #1
 8016f02:	1c5d      	adds	r5, r3, #1
 8016f04:	42b3      	cmp	r3, r6
 8016f06:	bfa8      	it	ge
 8016f08:	2200      	movge	r2, #0
 8016f0a:	18ab      	adds	r3, r5, r2
 8016f0c:	e7e1      	b.n	8016ed2 <__sccl+0x32>
 8016f0e:	4610      	mov	r0, r2
 8016f10:	e7da      	b.n	8016ec8 <__sccl+0x28>

08016f12 <__submore>:
 8016f12:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016f16:	460c      	mov	r4, r1
 8016f18:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 8016f1a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8016f1e:	4299      	cmp	r1, r3
 8016f20:	d11d      	bne.n	8016f5e <__submore+0x4c>
 8016f22:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8016f26:	f7ff f92d 	bl	8016184 <_malloc_r>
 8016f2a:	b918      	cbnz	r0, 8016f34 <__submore+0x22>
 8016f2c:	f04f 30ff 	mov.w	r0, #4294967295
 8016f30:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016f34:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8016f38:	63a3      	str	r3, [r4, #56]	@ 0x38
 8016f3a:	f894 3046 	ldrb.w	r3, [r4, #70]	@ 0x46
 8016f3e:	6360      	str	r0, [r4, #52]	@ 0x34
 8016f40:	f880 33ff 	strb.w	r3, [r0, #1023]	@ 0x3ff
 8016f44:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 8016f48:	f880 33fe 	strb.w	r3, [r0, #1022]	@ 0x3fe
 8016f4c:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 8016f50:	f880 33fd 	strb.w	r3, [r0, #1021]	@ 0x3fd
 8016f54:	f200 30fd 	addw	r0, r0, #1021	@ 0x3fd
 8016f58:	6020      	str	r0, [r4, #0]
 8016f5a:	2000      	movs	r0, #0
 8016f5c:	e7e8      	b.n	8016f30 <__submore+0x1e>
 8016f5e:	6ba6      	ldr	r6, [r4, #56]	@ 0x38
 8016f60:	0077      	lsls	r7, r6, #1
 8016f62:	463a      	mov	r2, r7
 8016f64:	f000 f83a 	bl	8016fdc <_realloc_r>
 8016f68:	4605      	mov	r5, r0
 8016f6a:	2800      	cmp	r0, #0
 8016f6c:	d0de      	beq.n	8016f2c <__submore+0x1a>
 8016f6e:	eb00 0806 	add.w	r8, r0, r6
 8016f72:	4601      	mov	r1, r0
 8016f74:	4632      	mov	r2, r6
 8016f76:	4640      	mov	r0, r8
 8016f78:	f7ff f88a 	bl	8016090 <memcpy>
 8016f7c:	e9c4 570d 	strd	r5, r7, [r4, #52]	@ 0x34
 8016f80:	f8c4 8000 	str.w	r8, [r4]
 8016f84:	e7e9      	b.n	8016f5a <__submore+0x48>

08016f86 <memmove>:
 8016f86:	4288      	cmp	r0, r1
 8016f88:	b510      	push	{r4, lr}
 8016f8a:	eb01 0402 	add.w	r4, r1, r2
 8016f8e:	d902      	bls.n	8016f96 <memmove+0x10>
 8016f90:	4284      	cmp	r4, r0
 8016f92:	4623      	mov	r3, r4
 8016f94:	d807      	bhi.n	8016fa6 <memmove+0x20>
 8016f96:	1e43      	subs	r3, r0, #1
 8016f98:	42a1      	cmp	r1, r4
 8016f9a:	d008      	beq.n	8016fae <memmove+0x28>
 8016f9c:	f811 2b01 	ldrb.w	r2, [r1], #1
 8016fa0:	f803 2f01 	strb.w	r2, [r3, #1]!
 8016fa4:	e7f8      	b.n	8016f98 <memmove+0x12>
 8016fa6:	4402      	add	r2, r0
 8016fa8:	4601      	mov	r1, r0
 8016faa:	428a      	cmp	r2, r1
 8016fac:	d100      	bne.n	8016fb0 <memmove+0x2a>
 8016fae:	bd10      	pop	{r4, pc}
 8016fb0:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8016fb4:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8016fb8:	e7f7      	b.n	8016faa <memmove+0x24>
	...

08016fbc <_sbrk_r>:
 8016fbc:	b538      	push	{r3, r4, r5, lr}
 8016fbe:	4d06      	ldr	r5, [pc, #24]	@ (8016fd8 <_sbrk_r+0x1c>)
 8016fc0:	2300      	movs	r3, #0
 8016fc2:	4604      	mov	r4, r0
 8016fc4:	4608      	mov	r0, r1
 8016fc6:	602b      	str	r3, [r5, #0]
 8016fc8:	f7f0 fdaa 	bl	8007b20 <_sbrk>
 8016fcc:	1c43      	adds	r3, r0, #1
 8016fce:	d102      	bne.n	8016fd6 <_sbrk_r+0x1a>
 8016fd0:	682b      	ldr	r3, [r5, #0]
 8016fd2:	b103      	cbz	r3, 8016fd6 <_sbrk_r+0x1a>
 8016fd4:	6023      	str	r3, [r4, #0]
 8016fd6:	bd38      	pop	{r3, r4, r5, pc}
 8016fd8:	20005b48 	.word	0x20005b48

08016fdc <_realloc_r>:
 8016fdc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016fe0:	4607      	mov	r7, r0
 8016fe2:	4614      	mov	r4, r2
 8016fe4:	460d      	mov	r5, r1
 8016fe6:	b921      	cbnz	r1, 8016ff2 <_realloc_r+0x16>
 8016fe8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8016fec:	4611      	mov	r1, r2
 8016fee:	f7ff b8c9 	b.w	8016184 <_malloc_r>
 8016ff2:	b92a      	cbnz	r2, 8017000 <_realloc_r+0x24>
 8016ff4:	f7ff f85a 	bl	80160ac <_free_r>
 8016ff8:	4625      	mov	r5, r4
 8016ffa:	4628      	mov	r0, r5
 8016ffc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017000:	f000 f88a 	bl	8017118 <_malloc_usable_size_r>
 8017004:	4284      	cmp	r4, r0
 8017006:	4606      	mov	r6, r0
 8017008:	d802      	bhi.n	8017010 <_realloc_r+0x34>
 801700a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 801700e:	d8f4      	bhi.n	8016ffa <_realloc_r+0x1e>
 8017010:	4621      	mov	r1, r4
 8017012:	4638      	mov	r0, r7
 8017014:	f7ff f8b6 	bl	8016184 <_malloc_r>
 8017018:	4680      	mov	r8, r0
 801701a:	b908      	cbnz	r0, 8017020 <_realloc_r+0x44>
 801701c:	4645      	mov	r5, r8
 801701e:	e7ec      	b.n	8016ffa <_realloc_r+0x1e>
 8017020:	42b4      	cmp	r4, r6
 8017022:	4622      	mov	r2, r4
 8017024:	4629      	mov	r1, r5
 8017026:	bf28      	it	cs
 8017028:	4632      	movcs	r2, r6
 801702a:	f7ff f831 	bl	8016090 <memcpy>
 801702e:	4629      	mov	r1, r5
 8017030:	4638      	mov	r0, r7
 8017032:	f7ff f83b 	bl	80160ac <_free_r>
 8017036:	e7f1      	b.n	801701c <_realloc_r+0x40>

08017038 <_strtoul_l.isra.0>:
 8017038:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801703c:	4e34      	ldr	r6, [pc, #208]	@ (8017110 <_strtoul_l.isra.0+0xd8>)
 801703e:	4686      	mov	lr, r0
 8017040:	460d      	mov	r5, r1
 8017042:	4628      	mov	r0, r5
 8017044:	f815 4b01 	ldrb.w	r4, [r5], #1
 8017048:	5d37      	ldrb	r7, [r6, r4]
 801704a:	f017 0708 	ands.w	r7, r7, #8
 801704e:	d1f8      	bne.n	8017042 <_strtoul_l.isra.0+0xa>
 8017050:	2c2d      	cmp	r4, #45	@ 0x2d
 8017052:	d110      	bne.n	8017076 <_strtoul_l.isra.0+0x3e>
 8017054:	782c      	ldrb	r4, [r5, #0]
 8017056:	2701      	movs	r7, #1
 8017058:	1c85      	adds	r5, r0, #2
 801705a:	f033 0010 	bics.w	r0, r3, #16
 801705e:	d115      	bne.n	801708c <_strtoul_l.isra.0+0x54>
 8017060:	2c30      	cmp	r4, #48	@ 0x30
 8017062:	d10d      	bne.n	8017080 <_strtoul_l.isra.0+0x48>
 8017064:	7828      	ldrb	r0, [r5, #0]
 8017066:	f000 00df 	and.w	r0, r0, #223	@ 0xdf
 801706a:	2858      	cmp	r0, #88	@ 0x58
 801706c:	d108      	bne.n	8017080 <_strtoul_l.isra.0+0x48>
 801706e:	786c      	ldrb	r4, [r5, #1]
 8017070:	3502      	adds	r5, #2
 8017072:	2310      	movs	r3, #16
 8017074:	e00a      	b.n	801708c <_strtoul_l.isra.0+0x54>
 8017076:	2c2b      	cmp	r4, #43	@ 0x2b
 8017078:	bf04      	itt	eq
 801707a:	782c      	ldrbeq	r4, [r5, #0]
 801707c:	1c85      	addeq	r5, r0, #2
 801707e:	e7ec      	b.n	801705a <_strtoul_l.isra.0+0x22>
 8017080:	2b00      	cmp	r3, #0
 8017082:	d1f6      	bne.n	8017072 <_strtoul_l.isra.0+0x3a>
 8017084:	2c30      	cmp	r4, #48	@ 0x30
 8017086:	bf14      	ite	ne
 8017088:	230a      	movne	r3, #10
 801708a:	2308      	moveq	r3, #8
 801708c:	f04f 38ff 	mov.w	r8, #4294967295
 8017090:	2600      	movs	r6, #0
 8017092:	fbb8 f8f3 	udiv	r8, r8, r3
 8017096:	fb03 f908 	mul.w	r9, r3, r8
 801709a:	ea6f 0909 	mvn.w	r9, r9
 801709e:	4630      	mov	r0, r6
 80170a0:	f1a4 0c30 	sub.w	ip, r4, #48	@ 0x30
 80170a4:	f1bc 0f09 	cmp.w	ip, #9
 80170a8:	d810      	bhi.n	80170cc <_strtoul_l.isra.0+0x94>
 80170aa:	4664      	mov	r4, ip
 80170ac:	42a3      	cmp	r3, r4
 80170ae:	dd1e      	ble.n	80170ee <_strtoul_l.isra.0+0xb6>
 80170b0:	f1b6 3fff 	cmp.w	r6, #4294967295
 80170b4:	d007      	beq.n	80170c6 <_strtoul_l.isra.0+0x8e>
 80170b6:	4580      	cmp	r8, r0
 80170b8:	d316      	bcc.n	80170e8 <_strtoul_l.isra.0+0xb0>
 80170ba:	d101      	bne.n	80170c0 <_strtoul_l.isra.0+0x88>
 80170bc:	45a1      	cmp	r9, r4
 80170be:	db13      	blt.n	80170e8 <_strtoul_l.isra.0+0xb0>
 80170c0:	fb00 4003 	mla	r0, r0, r3, r4
 80170c4:	2601      	movs	r6, #1
 80170c6:	f815 4b01 	ldrb.w	r4, [r5], #1
 80170ca:	e7e9      	b.n	80170a0 <_strtoul_l.isra.0+0x68>
 80170cc:	f1a4 0c41 	sub.w	ip, r4, #65	@ 0x41
 80170d0:	f1bc 0f19 	cmp.w	ip, #25
 80170d4:	d801      	bhi.n	80170da <_strtoul_l.isra.0+0xa2>
 80170d6:	3c37      	subs	r4, #55	@ 0x37
 80170d8:	e7e8      	b.n	80170ac <_strtoul_l.isra.0+0x74>
 80170da:	f1a4 0c61 	sub.w	ip, r4, #97	@ 0x61
 80170de:	f1bc 0f19 	cmp.w	ip, #25
 80170e2:	d804      	bhi.n	80170ee <_strtoul_l.isra.0+0xb6>
 80170e4:	3c57      	subs	r4, #87	@ 0x57
 80170e6:	e7e1      	b.n	80170ac <_strtoul_l.isra.0+0x74>
 80170e8:	f04f 36ff 	mov.w	r6, #4294967295
 80170ec:	e7eb      	b.n	80170c6 <_strtoul_l.isra.0+0x8e>
 80170ee:	1c73      	adds	r3, r6, #1
 80170f0:	d106      	bne.n	8017100 <_strtoul_l.isra.0+0xc8>
 80170f2:	2322      	movs	r3, #34	@ 0x22
 80170f4:	f8ce 3000 	str.w	r3, [lr]
 80170f8:	4630      	mov	r0, r6
 80170fa:	b932      	cbnz	r2, 801710a <_strtoul_l.isra.0+0xd2>
 80170fc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8017100:	b107      	cbz	r7, 8017104 <_strtoul_l.isra.0+0xcc>
 8017102:	4240      	negs	r0, r0
 8017104:	2a00      	cmp	r2, #0
 8017106:	d0f9      	beq.n	80170fc <_strtoul_l.isra.0+0xc4>
 8017108:	b106      	cbz	r6, 801710c <_strtoul_l.isra.0+0xd4>
 801710a:	1e69      	subs	r1, r5, #1
 801710c:	6011      	str	r1, [r2, #0]
 801710e:	e7f5      	b.n	80170fc <_strtoul_l.isra.0+0xc4>
 8017110:	080176e7 	.word	0x080176e7

08017114 <_strtoul_r>:
 8017114:	f7ff bf90 	b.w	8017038 <_strtoul_l.isra.0>

08017118 <_malloc_usable_size_r>:
 8017118:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801711c:	1f18      	subs	r0, r3, #4
 801711e:	2b00      	cmp	r3, #0
 8017120:	bfbc      	itt	lt
 8017122:	580b      	ldrlt	r3, [r1, r0]
 8017124:	18c0      	addlt	r0, r0, r3
 8017126:	4770      	bx	lr

08017128 <_init>:
 8017128:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801712a:	bf00      	nop
 801712c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801712e:	bc08      	pop	{r3}
 8017130:	469e      	mov	lr, r3
 8017132:	4770      	bx	lr

08017134 <_fini>:
 8017134:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017136:	bf00      	nop
 8017138:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801713a:	bc08      	pop	{r3}
 801713c:	469e      	mov	lr, r3
 801713e:	4770      	bx	lr
