
Smart_Joint.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000174bc  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000009c4  0801764c  0801764c  0001864c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08018010  08018010  0001a084  2**0
                  CONTENTS
  4 .ARM          00000008  08018010  08018010  00019010  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08018018  08018018  0001a084  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08018018  08018018  00019018  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801801c  0801801c  0001901c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000084  20000000  08018020  0001a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00005d20  20000088  080180a4  0001a088  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20005da8  080180a4  0001ada8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0001a084  2**0
                  CONTENTS, READONLY
 12 .debug_info   00039f52  00000000  00000000  0001a0b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00006891  00000000  00000000  00054006  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002e68  00000000  00000000  0005a898  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000247f  00000000  00000000  0005d700  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0003157c  00000000  00000000  0005fb7f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00038b6d  00000000  00000000  000910fb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00124a37  00000000  00000000  000c9c68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001ee69f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000d11c  00000000  00000000  001ee6e4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000066  00000000  00000000  001fb800  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000088 	.word	0x20000088
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08017634 	.word	0x08017634

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000008c 	.word	0x2000008c
 80001cc:	08017634 	.word	0x08017634

080001d0 <strcmp>:
 80001d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001d8:	2a01      	cmp	r2, #1
 80001da:	bf28      	it	cs
 80001dc:	429a      	cmpcs	r2, r3
 80001de:	d0f7      	beq.n	80001d0 <strcmp>
 80001e0:	1ad0      	subs	r0, r2, r3
 80001e2:	4770      	bx	lr

080001e4 <strlen>:
 80001e4:	4603      	mov	r3, r0
 80001e6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ea:	2a00      	cmp	r2, #0
 80001ec:	d1fb      	bne.n	80001e6 <strlen+0x2>
 80001ee:	1a18      	subs	r0, r3, r0
 80001f0:	3801      	subs	r0, #1
 80001f2:	4770      	bx	lr
	...

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_drsub>:
 80002a0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002a4:	e002      	b.n	80002ac <__adddf3>
 80002a6:	bf00      	nop

080002a8 <__aeabi_dsub>:
 80002a8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002ac <__adddf3>:
 80002ac:	b530      	push	{r4, r5, lr}
 80002ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002b6:	ea94 0f05 	teq	r4, r5
 80002ba:	bf08      	it	eq
 80002bc:	ea90 0f02 	teqeq	r0, r2
 80002c0:	bf1f      	itttt	ne
 80002c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002d2:	f000 80e2 	beq.w	800049a <__adddf3+0x1ee>
 80002d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002de:	bfb8      	it	lt
 80002e0:	426d      	neglt	r5, r5
 80002e2:	dd0c      	ble.n	80002fe <__adddf3+0x52>
 80002e4:	442c      	add	r4, r5
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	ea82 0000 	eor.w	r0, r2, r0
 80002f2:	ea83 0101 	eor.w	r1, r3, r1
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	2d36      	cmp	r5, #54	@ 0x36
 8000300:	bf88      	it	hi
 8000302:	bd30      	pophi	{r4, r5, pc}
 8000304:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000308:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800030c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000310:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000314:	d002      	beq.n	800031c <__adddf3+0x70>
 8000316:	4240      	negs	r0, r0
 8000318:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800031c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000320:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000324:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000328:	d002      	beq.n	8000330 <__adddf3+0x84>
 800032a:	4252      	negs	r2, r2
 800032c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000330:	ea94 0f05 	teq	r4, r5
 8000334:	f000 80a7 	beq.w	8000486 <__adddf3+0x1da>
 8000338:	f1a4 0401 	sub.w	r4, r4, #1
 800033c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000340:	db0d      	blt.n	800035e <__adddf3+0xb2>
 8000342:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000346:	fa22 f205 	lsr.w	r2, r2, r5
 800034a:	1880      	adds	r0, r0, r2
 800034c:	f141 0100 	adc.w	r1, r1, #0
 8000350:	fa03 f20e 	lsl.w	r2, r3, lr
 8000354:	1880      	adds	r0, r0, r2
 8000356:	fa43 f305 	asr.w	r3, r3, r5
 800035a:	4159      	adcs	r1, r3
 800035c:	e00e      	b.n	800037c <__adddf3+0xd0>
 800035e:	f1a5 0520 	sub.w	r5, r5, #32
 8000362:	f10e 0e20 	add.w	lr, lr, #32
 8000366:	2a01      	cmp	r2, #1
 8000368:	fa03 fc0e 	lsl.w	ip, r3, lr
 800036c:	bf28      	it	cs
 800036e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000372:	fa43 f305 	asr.w	r3, r3, r5
 8000376:	18c0      	adds	r0, r0, r3
 8000378:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800037c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000380:	d507      	bpl.n	8000392 <__adddf3+0xe6>
 8000382:	f04f 0e00 	mov.w	lr, #0
 8000386:	f1dc 0c00 	rsbs	ip, ip, #0
 800038a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800038e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000392:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000396:	d31b      	bcc.n	80003d0 <__adddf3+0x124>
 8000398:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800039c:	d30c      	bcc.n	80003b8 <__adddf3+0x10c>
 800039e:	0849      	lsrs	r1, r1, #1
 80003a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003a8:	f104 0401 	add.w	r4, r4, #1
 80003ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003b0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003b4:	f080 809a 	bcs.w	80004ec <__adddf3+0x240>
 80003b8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003bc:	bf08      	it	eq
 80003be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003c2:	f150 0000 	adcs.w	r0, r0, #0
 80003c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ca:	ea41 0105 	orr.w	r1, r1, r5
 80003ce:	bd30      	pop	{r4, r5, pc}
 80003d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003d4:	4140      	adcs	r0, r0
 80003d6:	eb41 0101 	adc.w	r1, r1, r1
 80003da:	3c01      	subs	r4, #1
 80003dc:	bf28      	it	cs
 80003de:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003e2:	d2e9      	bcs.n	80003b8 <__adddf3+0x10c>
 80003e4:	f091 0f00 	teq	r1, #0
 80003e8:	bf04      	itt	eq
 80003ea:	4601      	moveq	r1, r0
 80003ec:	2000      	moveq	r0, #0
 80003ee:	fab1 f381 	clz	r3, r1
 80003f2:	bf08      	it	eq
 80003f4:	3320      	addeq	r3, #32
 80003f6:	f1a3 030b 	sub.w	r3, r3, #11
 80003fa:	f1b3 0220 	subs.w	r2, r3, #32
 80003fe:	da0c      	bge.n	800041a <__adddf3+0x16e>
 8000400:	320c      	adds	r2, #12
 8000402:	dd08      	ble.n	8000416 <__adddf3+0x16a>
 8000404:	f102 0c14 	add.w	ip, r2, #20
 8000408:	f1c2 020c 	rsb	r2, r2, #12
 800040c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000410:	fa21 f102 	lsr.w	r1, r1, r2
 8000414:	e00c      	b.n	8000430 <__adddf3+0x184>
 8000416:	f102 0214 	add.w	r2, r2, #20
 800041a:	bfd8      	it	le
 800041c:	f1c2 0c20 	rsble	ip, r2, #32
 8000420:	fa01 f102 	lsl.w	r1, r1, r2
 8000424:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000428:	bfdc      	itt	le
 800042a:	ea41 010c 	orrle.w	r1, r1, ip
 800042e:	4090      	lslle	r0, r2
 8000430:	1ae4      	subs	r4, r4, r3
 8000432:	bfa2      	ittt	ge
 8000434:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000438:	4329      	orrge	r1, r5
 800043a:	bd30      	popge	{r4, r5, pc}
 800043c:	ea6f 0404 	mvn.w	r4, r4
 8000440:	3c1f      	subs	r4, #31
 8000442:	da1c      	bge.n	800047e <__adddf3+0x1d2>
 8000444:	340c      	adds	r4, #12
 8000446:	dc0e      	bgt.n	8000466 <__adddf3+0x1ba>
 8000448:	f104 0414 	add.w	r4, r4, #20
 800044c:	f1c4 0220 	rsb	r2, r4, #32
 8000450:	fa20 f004 	lsr.w	r0, r0, r4
 8000454:	fa01 f302 	lsl.w	r3, r1, r2
 8000458:	ea40 0003 	orr.w	r0, r0, r3
 800045c:	fa21 f304 	lsr.w	r3, r1, r4
 8000460:	ea45 0103 	orr.w	r1, r5, r3
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f1c4 040c 	rsb	r4, r4, #12
 800046a:	f1c4 0220 	rsb	r2, r4, #32
 800046e:	fa20 f002 	lsr.w	r0, r0, r2
 8000472:	fa01 f304 	lsl.w	r3, r1, r4
 8000476:	ea40 0003 	orr.w	r0, r0, r3
 800047a:	4629      	mov	r1, r5
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	fa21 f004 	lsr.w	r0, r1, r4
 8000482:	4629      	mov	r1, r5
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f094 0f00 	teq	r4, #0
 800048a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800048e:	bf06      	itte	eq
 8000490:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000494:	3401      	addeq	r4, #1
 8000496:	3d01      	subne	r5, #1
 8000498:	e74e      	b.n	8000338 <__adddf3+0x8c>
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf18      	it	ne
 80004a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004a4:	d029      	beq.n	80004fa <__adddf3+0x24e>
 80004a6:	ea94 0f05 	teq	r4, r5
 80004aa:	bf08      	it	eq
 80004ac:	ea90 0f02 	teqeq	r0, r2
 80004b0:	d005      	beq.n	80004be <__adddf3+0x212>
 80004b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004b6:	bf04      	itt	eq
 80004b8:	4619      	moveq	r1, r3
 80004ba:	4610      	moveq	r0, r2
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	ea91 0f03 	teq	r1, r3
 80004c2:	bf1e      	ittt	ne
 80004c4:	2100      	movne	r1, #0
 80004c6:	2000      	movne	r0, #0
 80004c8:	bd30      	popne	{r4, r5, pc}
 80004ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ce:	d105      	bne.n	80004dc <__adddf3+0x230>
 80004d0:	0040      	lsls	r0, r0, #1
 80004d2:	4149      	adcs	r1, r1
 80004d4:	bf28      	it	cs
 80004d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004da:	bd30      	pop	{r4, r5, pc}
 80004dc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004e0:	bf3c      	itt	cc
 80004e2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004e6:	bd30      	popcc	{r4, r5, pc}
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004ec:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd30      	pop	{r4, r5, pc}
 80004fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fe:	bf1a      	itte	ne
 8000500:	4619      	movne	r1, r3
 8000502:	4610      	movne	r0, r2
 8000504:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000508:	bf1c      	itt	ne
 800050a:	460b      	movne	r3, r1
 800050c:	4602      	movne	r2, r0
 800050e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000512:	bf06      	itte	eq
 8000514:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000518:	ea91 0f03 	teqeq	r1, r3
 800051c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	bf00      	nop

08000524 <__aeabi_ui2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f04f 0500 	mov.w	r5, #0
 800053c:	f04f 0100 	mov.w	r1, #0
 8000540:	e750      	b.n	80003e4 <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_i2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000558:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800055c:	bf48      	it	mi
 800055e:	4240      	negmi	r0, r0
 8000560:	f04f 0100 	mov.w	r1, #0
 8000564:	e73e      	b.n	80003e4 <__adddf3+0x138>
 8000566:	bf00      	nop

08000568 <__aeabi_f2d>:
 8000568:	0042      	lsls	r2, r0, #1
 800056a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800056e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000572:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000576:	bf1f      	itttt	ne
 8000578:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800057c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000580:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000584:	4770      	bxne	lr
 8000586:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800058a:	bf08      	it	eq
 800058c:	4770      	bxeq	lr
 800058e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000592:	bf04      	itt	eq
 8000594:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000598:	4770      	bxeq	lr
 800059a:	b530      	push	{r4, r5, lr}
 800059c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005a4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005a8:	e71c      	b.n	80003e4 <__adddf3+0x138>
 80005aa:	bf00      	nop

080005ac <__aeabi_ul2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f04f 0500 	mov.w	r5, #0
 80005ba:	e00a      	b.n	80005d2 <__aeabi_l2d+0x16>

080005bc <__aeabi_l2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ca:	d502      	bpl.n	80005d2 <__aeabi_l2d+0x16>
 80005cc:	4240      	negs	r0, r0
 80005ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005d2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005d6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005de:	f43f aed8 	beq.w	8000392 <__adddf3+0xe6>
 80005e2:	f04f 0203 	mov.w	r2, #3
 80005e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ea:	bf18      	it	ne
 80005ec:	3203      	addne	r2, #3
 80005ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005f2:	bf18      	it	ne
 80005f4:	3203      	addne	r2, #3
 80005f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005fa:	f1c2 0320 	rsb	r3, r2, #32
 80005fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000602:	fa20 f002 	lsr.w	r0, r0, r2
 8000606:	fa01 fe03 	lsl.w	lr, r1, r3
 800060a:	ea40 000e 	orr.w	r0, r0, lr
 800060e:	fa21 f102 	lsr.w	r1, r1, r2
 8000612:	4414      	add	r4, r2
 8000614:	e6bd      	b.n	8000392 <__adddf3+0xe6>
 8000616:	bf00      	nop

08000618 <__aeabi_dmul>:
 8000618:	b570      	push	{r4, r5, r6, lr}
 800061a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800061e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000622:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000626:	bf1d      	ittte	ne
 8000628:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800062c:	ea94 0f0c 	teqne	r4, ip
 8000630:	ea95 0f0c 	teqne	r5, ip
 8000634:	f000 f8de 	bleq	80007f4 <__aeabi_dmul+0x1dc>
 8000638:	442c      	add	r4, r5
 800063a:	ea81 0603 	eor.w	r6, r1, r3
 800063e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000642:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000646:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800064a:	bf18      	it	ne
 800064c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000650:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000654:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000658:	d038      	beq.n	80006cc <__aeabi_dmul+0xb4>
 800065a:	fba0 ce02 	umull	ip, lr, r0, r2
 800065e:	f04f 0500 	mov.w	r5, #0
 8000662:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000666:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800066a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800066e:	f04f 0600 	mov.w	r6, #0
 8000672:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000676:	f09c 0f00 	teq	ip, #0
 800067a:	bf18      	it	ne
 800067c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000680:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000684:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000688:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800068c:	d204      	bcs.n	8000698 <__aeabi_dmul+0x80>
 800068e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000692:	416d      	adcs	r5, r5
 8000694:	eb46 0606 	adc.w	r6, r6, r6
 8000698:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800069c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ac:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006b0:	bf88      	it	hi
 80006b2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006b6:	d81e      	bhi.n	80006f6 <__aeabi_dmul+0xde>
 80006b8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006bc:	bf08      	it	eq
 80006be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006c2:	f150 0000 	adcs.w	r0, r0, #0
 80006c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006d0:	ea46 0101 	orr.w	r1, r6, r1
 80006d4:	ea40 0002 	orr.w	r0, r0, r2
 80006d8:	ea81 0103 	eor.w	r1, r1, r3
 80006dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006e0:	bfc2      	ittt	gt
 80006e2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	popgt	{r4, r5, r6, pc}
 80006ec:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006f0:	f04f 0e00 	mov.w	lr, #0
 80006f4:	3c01      	subs	r4, #1
 80006f6:	f300 80ab 	bgt.w	8000850 <__aeabi_dmul+0x238>
 80006fa:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006fe:	bfde      	ittt	le
 8000700:	2000      	movle	r0, #0
 8000702:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000706:	bd70      	pople	{r4, r5, r6, pc}
 8000708:	f1c4 0400 	rsb	r4, r4, #0
 800070c:	3c20      	subs	r4, #32
 800070e:	da35      	bge.n	800077c <__aeabi_dmul+0x164>
 8000710:	340c      	adds	r4, #12
 8000712:	dc1b      	bgt.n	800074c <__aeabi_dmul+0x134>
 8000714:	f104 0414 	add.w	r4, r4, #20
 8000718:	f1c4 0520 	rsb	r5, r4, #32
 800071c:	fa00 f305 	lsl.w	r3, r0, r5
 8000720:	fa20 f004 	lsr.w	r0, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea40 0002 	orr.w	r0, r0, r2
 800072c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000730:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000734:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000738:	fa21 f604 	lsr.w	r6, r1, r4
 800073c:	eb42 0106 	adc.w	r1, r2, r6
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 040c 	rsb	r4, r4, #12
 8000750:	f1c4 0520 	rsb	r5, r4, #32
 8000754:	fa00 f304 	lsl.w	r3, r0, r4
 8000758:	fa20 f005 	lsr.w	r0, r0, r5
 800075c:	fa01 f204 	lsl.w	r2, r1, r4
 8000760:	ea40 0002 	orr.w	r0, r0, r2
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000768:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800076c:	f141 0100 	adc.w	r1, r1, #0
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 0520 	rsb	r5, r4, #32
 8000780:	fa00 f205 	lsl.w	r2, r0, r5
 8000784:	ea4e 0e02 	orr.w	lr, lr, r2
 8000788:	fa20 f304 	lsr.w	r3, r0, r4
 800078c:	fa01 f205 	lsl.w	r2, r1, r5
 8000790:	ea43 0302 	orr.w	r3, r3, r2
 8000794:	fa21 f004 	lsr.w	r0, r1, r4
 8000798:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800079c:	fa21 f204 	lsr.w	r2, r1, r4
 80007a0:	ea20 0002 	bic.w	r0, r0, r2
 80007a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ac:	bf08      	it	eq
 80007ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007b2:	bd70      	pop	{r4, r5, r6, pc}
 80007b4:	f094 0f00 	teq	r4, #0
 80007b8:	d10f      	bne.n	80007da <__aeabi_dmul+0x1c2>
 80007ba:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007be:	0040      	lsls	r0, r0, #1
 80007c0:	eb41 0101 	adc.w	r1, r1, r1
 80007c4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3c01      	subeq	r4, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1a6>
 80007ce:	ea41 0106 	orr.w	r1, r1, r6
 80007d2:	f095 0f00 	teq	r5, #0
 80007d6:	bf18      	it	ne
 80007d8:	4770      	bxne	lr
 80007da:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007de:	0052      	lsls	r2, r2, #1
 80007e0:	eb43 0303 	adc.w	r3, r3, r3
 80007e4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3d01      	subeq	r5, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1c6>
 80007ee:	ea43 0306 	orr.w	r3, r3, r6
 80007f2:	4770      	bx	lr
 80007f4:	ea94 0f0c 	teq	r4, ip
 80007f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007fc:	bf18      	it	ne
 80007fe:	ea95 0f0c 	teqne	r5, ip
 8000802:	d00c      	beq.n	800081e <__aeabi_dmul+0x206>
 8000804:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000808:	bf18      	it	ne
 800080a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080e:	d1d1      	bne.n	80007b4 <__aeabi_dmul+0x19c>
 8000810:	ea81 0103 	eor.w	r1, r1, r3
 8000814:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000818:	f04f 0000 	mov.w	r0, #0
 800081c:	bd70      	pop	{r4, r5, r6, pc}
 800081e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000822:	bf06      	itte	eq
 8000824:	4610      	moveq	r0, r2
 8000826:	4619      	moveq	r1, r3
 8000828:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082c:	d019      	beq.n	8000862 <__aeabi_dmul+0x24a>
 800082e:	ea94 0f0c 	teq	r4, ip
 8000832:	d102      	bne.n	800083a <__aeabi_dmul+0x222>
 8000834:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000838:	d113      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800083a:	ea95 0f0c 	teq	r5, ip
 800083e:	d105      	bne.n	800084c <__aeabi_dmul+0x234>
 8000840:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000844:	bf1c      	itt	ne
 8000846:	4610      	movne	r0, r2
 8000848:	4619      	movne	r1, r3
 800084a:	d10a      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800084c:	ea81 0103 	eor.w	r1, r1, r3
 8000850:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000854:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000858:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800085c:	f04f 0000 	mov.w	r0, #0
 8000860:	bd70      	pop	{r4, r5, r6, pc}
 8000862:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000866:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800086a:	bd70      	pop	{r4, r5, r6, pc}

0800086c <__aeabi_ddiv>:
 800086c:	b570      	push	{r4, r5, r6, lr}
 800086e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000872:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000876:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800087a:	bf1d      	ittte	ne
 800087c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000880:	ea94 0f0c 	teqne	r4, ip
 8000884:	ea95 0f0c 	teqne	r5, ip
 8000888:	f000 f8a7 	bleq	80009da <__aeabi_ddiv+0x16e>
 800088c:	eba4 0405 	sub.w	r4, r4, r5
 8000890:	ea81 0e03 	eor.w	lr, r1, r3
 8000894:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000898:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800089c:	f000 8088 	beq.w	80009b0 <__aeabi_ddiv+0x144>
 80008a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008a4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008a8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ac:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008b0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008b4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008b8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008bc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008c0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008c4:	429d      	cmp	r5, r3
 80008c6:	bf08      	it	eq
 80008c8:	4296      	cmpeq	r6, r2
 80008ca:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ce:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008d2:	d202      	bcs.n	80008da <__aeabi_ddiv+0x6e>
 80008d4:	085b      	lsrs	r3, r3, #1
 80008d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008da:	1ab6      	subs	r6, r6, r2
 80008dc:	eb65 0503 	sbc.w	r5, r5, r3
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ea:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000948:	ea55 0e06 	orrs.w	lr, r5, r6
 800094c:	d018      	beq.n	8000980 <__aeabi_ddiv+0x114>
 800094e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000952:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000956:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800095a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800095e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000962:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000966:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800096a:	d1c0      	bne.n	80008ee <__aeabi_ddiv+0x82>
 800096c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000970:	d10b      	bne.n	800098a <__aeabi_ddiv+0x11e>
 8000972:	ea41 0100 	orr.w	r1, r1, r0
 8000976:	f04f 0000 	mov.w	r0, #0
 800097a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800097e:	e7b6      	b.n	80008ee <__aeabi_ddiv+0x82>
 8000980:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000984:	bf04      	itt	eq
 8000986:	4301      	orreq	r1, r0
 8000988:	2000      	moveq	r0, #0
 800098a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800098e:	bf88      	it	hi
 8000990:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000994:	f63f aeaf 	bhi.w	80006f6 <__aeabi_dmul+0xde>
 8000998:	ebb5 0c03 	subs.w	ip, r5, r3
 800099c:	bf04      	itt	eq
 800099e:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009a2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009a6:	f150 0000 	adcs.w	r0, r0, #0
 80009aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ae:	bd70      	pop	{r4, r5, r6, pc}
 80009b0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009b4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009b8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009bc:	bfc2      	ittt	gt
 80009be:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009c2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009c6:	bd70      	popgt	{r4, r5, r6, pc}
 80009c8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009cc:	f04f 0e00 	mov.w	lr, #0
 80009d0:	3c01      	subs	r4, #1
 80009d2:	e690      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009d4:	ea45 0e06 	orr.w	lr, r5, r6
 80009d8:	e68d      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009da:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009de:	ea94 0f0c 	teq	r4, ip
 80009e2:	bf08      	it	eq
 80009e4:	ea95 0f0c 	teqeq	r5, ip
 80009e8:	f43f af3b 	beq.w	8000862 <__aeabi_dmul+0x24a>
 80009ec:	ea94 0f0c 	teq	r4, ip
 80009f0:	d10a      	bne.n	8000a08 <__aeabi_ddiv+0x19c>
 80009f2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009f6:	f47f af34 	bne.w	8000862 <__aeabi_dmul+0x24a>
 80009fa:	ea95 0f0c 	teq	r5, ip
 80009fe:	f47f af25 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a02:	4610      	mov	r0, r2
 8000a04:	4619      	mov	r1, r3
 8000a06:	e72c      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a08:	ea95 0f0c 	teq	r5, ip
 8000a0c:	d106      	bne.n	8000a1c <__aeabi_ddiv+0x1b0>
 8000a0e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a12:	f43f aefd 	beq.w	8000810 <__aeabi_dmul+0x1f8>
 8000a16:	4610      	mov	r0, r2
 8000a18:	4619      	mov	r1, r3
 8000a1a:	e722      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a1c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a20:	bf18      	it	ne
 8000a22:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a26:	f47f aec5 	bne.w	80007b4 <__aeabi_dmul+0x19c>
 8000a2a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a2e:	f47f af0d 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a32:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a36:	f47f aeeb 	bne.w	8000810 <__aeabi_dmul+0x1f8>
 8000a3a:	e712      	b.n	8000862 <__aeabi_dmul+0x24a>

08000a3c <__aeabi_d2uiz>:
 8000a3c:	004a      	lsls	r2, r1, #1
 8000a3e:	d211      	bcs.n	8000a64 <__aeabi_d2uiz+0x28>
 8000a40:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a44:	d211      	bcs.n	8000a6a <__aeabi_d2uiz+0x2e>
 8000a46:	d50d      	bpl.n	8000a64 <__aeabi_d2uiz+0x28>
 8000a48:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a4c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a50:	d40e      	bmi.n	8000a70 <__aeabi_d2uiz+0x34>
 8000a52:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a56:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000a5a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	4770      	bx	lr
 8000a64:	f04f 0000 	mov.w	r0, #0
 8000a68:	4770      	bx	lr
 8000a6a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a6e:	d102      	bne.n	8000a76 <__aeabi_d2uiz+0x3a>
 8000a70:	f04f 30ff 	mov.w	r0, #4294967295
 8000a74:	4770      	bx	lr
 8000a76:	f04f 0000 	mov.w	r0, #0
 8000a7a:	4770      	bx	lr

08000a7c <__aeabi_uldivmod>:
 8000a7c:	b953      	cbnz	r3, 8000a94 <__aeabi_uldivmod+0x18>
 8000a7e:	b94a      	cbnz	r2, 8000a94 <__aeabi_uldivmod+0x18>
 8000a80:	2900      	cmp	r1, #0
 8000a82:	bf08      	it	eq
 8000a84:	2800      	cmpeq	r0, #0
 8000a86:	bf1c      	itt	ne
 8000a88:	f04f 31ff 	movne.w	r1, #4294967295
 8000a8c:	f04f 30ff 	movne.w	r0, #4294967295
 8000a90:	f000 b988 	b.w	8000da4 <__aeabi_idiv0>
 8000a94:	f1ad 0c08 	sub.w	ip, sp, #8
 8000a98:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000a9c:	f000 f806 	bl	8000aac <__udivmoddi4>
 8000aa0:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000aa4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000aa8:	b004      	add	sp, #16
 8000aaa:	4770      	bx	lr

08000aac <__udivmoddi4>:
 8000aac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000ab0:	9d08      	ldr	r5, [sp, #32]
 8000ab2:	468e      	mov	lr, r1
 8000ab4:	4604      	mov	r4, r0
 8000ab6:	4688      	mov	r8, r1
 8000ab8:	2b00      	cmp	r3, #0
 8000aba:	d14a      	bne.n	8000b52 <__udivmoddi4+0xa6>
 8000abc:	428a      	cmp	r2, r1
 8000abe:	4617      	mov	r7, r2
 8000ac0:	d962      	bls.n	8000b88 <__udivmoddi4+0xdc>
 8000ac2:	fab2 f682 	clz	r6, r2
 8000ac6:	b14e      	cbz	r6, 8000adc <__udivmoddi4+0x30>
 8000ac8:	f1c6 0320 	rsb	r3, r6, #32
 8000acc:	fa01 f806 	lsl.w	r8, r1, r6
 8000ad0:	fa20 f303 	lsr.w	r3, r0, r3
 8000ad4:	40b7      	lsls	r7, r6
 8000ad6:	ea43 0808 	orr.w	r8, r3, r8
 8000ada:	40b4      	lsls	r4, r6
 8000adc:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000ae0:	fa1f fc87 	uxth.w	ip, r7
 8000ae4:	fbb8 f1fe 	udiv	r1, r8, lr
 8000ae8:	0c23      	lsrs	r3, r4, #16
 8000aea:	fb0e 8811 	mls	r8, lr, r1, r8
 8000aee:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000af2:	fb01 f20c 	mul.w	r2, r1, ip
 8000af6:	429a      	cmp	r2, r3
 8000af8:	d909      	bls.n	8000b0e <__udivmoddi4+0x62>
 8000afa:	18fb      	adds	r3, r7, r3
 8000afc:	f101 30ff 	add.w	r0, r1, #4294967295
 8000b00:	f080 80ea 	bcs.w	8000cd8 <__udivmoddi4+0x22c>
 8000b04:	429a      	cmp	r2, r3
 8000b06:	f240 80e7 	bls.w	8000cd8 <__udivmoddi4+0x22c>
 8000b0a:	3902      	subs	r1, #2
 8000b0c:	443b      	add	r3, r7
 8000b0e:	1a9a      	subs	r2, r3, r2
 8000b10:	b2a3      	uxth	r3, r4
 8000b12:	fbb2 f0fe 	udiv	r0, r2, lr
 8000b16:	fb0e 2210 	mls	r2, lr, r0, r2
 8000b1a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000b1e:	fb00 fc0c 	mul.w	ip, r0, ip
 8000b22:	459c      	cmp	ip, r3
 8000b24:	d909      	bls.n	8000b3a <__udivmoddi4+0x8e>
 8000b26:	18fb      	adds	r3, r7, r3
 8000b28:	f100 32ff 	add.w	r2, r0, #4294967295
 8000b2c:	f080 80d6 	bcs.w	8000cdc <__udivmoddi4+0x230>
 8000b30:	459c      	cmp	ip, r3
 8000b32:	f240 80d3 	bls.w	8000cdc <__udivmoddi4+0x230>
 8000b36:	443b      	add	r3, r7
 8000b38:	3802      	subs	r0, #2
 8000b3a:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000b3e:	eba3 030c 	sub.w	r3, r3, ip
 8000b42:	2100      	movs	r1, #0
 8000b44:	b11d      	cbz	r5, 8000b4e <__udivmoddi4+0xa2>
 8000b46:	40f3      	lsrs	r3, r6
 8000b48:	2200      	movs	r2, #0
 8000b4a:	e9c5 3200 	strd	r3, r2, [r5]
 8000b4e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b52:	428b      	cmp	r3, r1
 8000b54:	d905      	bls.n	8000b62 <__udivmoddi4+0xb6>
 8000b56:	b10d      	cbz	r5, 8000b5c <__udivmoddi4+0xb0>
 8000b58:	e9c5 0100 	strd	r0, r1, [r5]
 8000b5c:	2100      	movs	r1, #0
 8000b5e:	4608      	mov	r0, r1
 8000b60:	e7f5      	b.n	8000b4e <__udivmoddi4+0xa2>
 8000b62:	fab3 f183 	clz	r1, r3
 8000b66:	2900      	cmp	r1, #0
 8000b68:	d146      	bne.n	8000bf8 <__udivmoddi4+0x14c>
 8000b6a:	4573      	cmp	r3, lr
 8000b6c:	d302      	bcc.n	8000b74 <__udivmoddi4+0xc8>
 8000b6e:	4282      	cmp	r2, r0
 8000b70:	f200 8105 	bhi.w	8000d7e <__udivmoddi4+0x2d2>
 8000b74:	1a84      	subs	r4, r0, r2
 8000b76:	eb6e 0203 	sbc.w	r2, lr, r3
 8000b7a:	2001      	movs	r0, #1
 8000b7c:	4690      	mov	r8, r2
 8000b7e:	2d00      	cmp	r5, #0
 8000b80:	d0e5      	beq.n	8000b4e <__udivmoddi4+0xa2>
 8000b82:	e9c5 4800 	strd	r4, r8, [r5]
 8000b86:	e7e2      	b.n	8000b4e <__udivmoddi4+0xa2>
 8000b88:	2a00      	cmp	r2, #0
 8000b8a:	f000 8090 	beq.w	8000cae <__udivmoddi4+0x202>
 8000b8e:	fab2 f682 	clz	r6, r2
 8000b92:	2e00      	cmp	r6, #0
 8000b94:	f040 80a4 	bne.w	8000ce0 <__udivmoddi4+0x234>
 8000b98:	1a8a      	subs	r2, r1, r2
 8000b9a:	0c03      	lsrs	r3, r0, #16
 8000b9c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000ba0:	b280      	uxth	r0, r0
 8000ba2:	b2bc      	uxth	r4, r7
 8000ba4:	2101      	movs	r1, #1
 8000ba6:	fbb2 fcfe 	udiv	ip, r2, lr
 8000baa:	fb0e 221c 	mls	r2, lr, ip, r2
 8000bae:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000bb2:	fb04 f20c 	mul.w	r2, r4, ip
 8000bb6:	429a      	cmp	r2, r3
 8000bb8:	d907      	bls.n	8000bca <__udivmoddi4+0x11e>
 8000bba:	18fb      	adds	r3, r7, r3
 8000bbc:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000bc0:	d202      	bcs.n	8000bc8 <__udivmoddi4+0x11c>
 8000bc2:	429a      	cmp	r2, r3
 8000bc4:	f200 80e0 	bhi.w	8000d88 <__udivmoddi4+0x2dc>
 8000bc8:	46c4      	mov	ip, r8
 8000bca:	1a9b      	subs	r3, r3, r2
 8000bcc:	fbb3 f2fe 	udiv	r2, r3, lr
 8000bd0:	fb0e 3312 	mls	r3, lr, r2, r3
 8000bd4:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000bd8:	fb02 f404 	mul.w	r4, r2, r4
 8000bdc:	429c      	cmp	r4, r3
 8000bde:	d907      	bls.n	8000bf0 <__udivmoddi4+0x144>
 8000be0:	18fb      	adds	r3, r7, r3
 8000be2:	f102 30ff 	add.w	r0, r2, #4294967295
 8000be6:	d202      	bcs.n	8000bee <__udivmoddi4+0x142>
 8000be8:	429c      	cmp	r4, r3
 8000bea:	f200 80ca 	bhi.w	8000d82 <__udivmoddi4+0x2d6>
 8000bee:	4602      	mov	r2, r0
 8000bf0:	1b1b      	subs	r3, r3, r4
 8000bf2:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000bf6:	e7a5      	b.n	8000b44 <__udivmoddi4+0x98>
 8000bf8:	f1c1 0620 	rsb	r6, r1, #32
 8000bfc:	408b      	lsls	r3, r1
 8000bfe:	fa22 f706 	lsr.w	r7, r2, r6
 8000c02:	431f      	orrs	r7, r3
 8000c04:	fa0e f401 	lsl.w	r4, lr, r1
 8000c08:	fa20 f306 	lsr.w	r3, r0, r6
 8000c0c:	fa2e fe06 	lsr.w	lr, lr, r6
 8000c10:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000c14:	4323      	orrs	r3, r4
 8000c16:	fa00 f801 	lsl.w	r8, r0, r1
 8000c1a:	fa1f fc87 	uxth.w	ip, r7
 8000c1e:	fbbe f0f9 	udiv	r0, lr, r9
 8000c22:	0c1c      	lsrs	r4, r3, #16
 8000c24:	fb09 ee10 	mls	lr, r9, r0, lr
 8000c28:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000c2c:	fb00 fe0c 	mul.w	lr, r0, ip
 8000c30:	45a6      	cmp	lr, r4
 8000c32:	fa02 f201 	lsl.w	r2, r2, r1
 8000c36:	d909      	bls.n	8000c4c <__udivmoddi4+0x1a0>
 8000c38:	193c      	adds	r4, r7, r4
 8000c3a:	f100 3aff 	add.w	sl, r0, #4294967295
 8000c3e:	f080 809c 	bcs.w	8000d7a <__udivmoddi4+0x2ce>
 8000c42:	45a6      	cmp	lr, r4
 8000c44:	f240 8099 	bls.w	8000d7a <__udivmoddi4+0x2ce>
 8000c48:	3802      	subs	r0, #2
 8000c4a:	443c      	add	r4, r7
 8000c4c:	eba4 040e 	sub.w	r4, r4, lr
 8000c50:	fa1f fe83 	uxth.w	lr, r3
 8000c54:	fbb4 f3f9 	udiv	r3, r4, r9
 8000c58:	fb09 4413 	mls	r4, r9, r3, r4
 8000c5c:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000c60:	fb03 fc0c 	mul.w	ip, r3, ip
 8000c64:	45a4      	cmp	ip, r4
 8000c66:	d908      	bls.n	8000c7a <__udivmoddi4+0x1ce>
 8000c68:	193c      	adds	r4, r7, r4
 8000c6a:	f103 3eff 	add.w	lr, r3, #4294967295
 8000c6e:	f080 8082 	bcs.w	8000d76 <__udivmoddi4+0x2ca>
 8000c72:	45a4      	cmp	ip, r4
 8000c74:	d97f      	bls.n	8000d76 <__udivmoddi4+0x2ca>
 8000c76:	3b02      	subs	r3, #2
 8000c78:	443c      	add	r4, r7
 8000c7a:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000c7e:	eba4 040c 	sub.w	r4, r4, ip
 8000c82:	fba0 ec02 	umull	lr, ip, r0, r2
 8000c86:	4564      	cmp	r4, ip
 8000c88:	4673      	mov	r3, lr
 8000c8a:	46e1      	mov	r9, ip
 8000c8c:	d362      	bcc.n	8000d54 <__udivmoddi4+0x2a8>
 8000c8e:	d05f      	beq.n	8000d50 <__udivmoddi4+0x2a4>
 8000c90:	b15d      	cbz	r5, 8000caa <__udivmoddi4+0x1fe>
 8000c92:	ebb8 0203 	subs.w	r2, r8, r3
 8000c96:	eb64 0409 	sbc.w	r4, r4, r9
 8000c9a:	fa04 f606 	lsl.w	r6, r4, r6
 8000c9e:	fa22 f301 	lsr.w	r3, r2, r1
 8000ca2:	431e      	orrs	r6, r3
 8000ca4:	40cc      	lsrs	r4, r1
 8000ca6:	e9c5 6400 	strd	r6, r4, [r5]
 8000caa:	2100      	movs	r1, #0
 8000cac:	e74f      	b.n	8000b4e <__udivmoddi4+0xa2>
 8000cae:	fbb1 fcf2 	udiv	ip, r1, r2
 8000cb2:	0c01      	lsrs	r1, r0, #16
 8000cb4:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000cb8:	b280      	uxth	r0, r0
 8000cba:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000cbe:	463b      	mov	r3, r7
 8000cc0:	4638      	mov	r0, r7
 8000cc2:	463c      	mov	r4, r7
 8000cc4:	46b8      	mov	r8, r7
 8000cc6:	46be      	mov	lr, r7
 8000cc8:	2620      	movs	r6, #32
 8000cca:	fbb1 f1f7 	udiv	r1, r1, r7
 8000cce:	eba2 0208 	sub.w	r2, r2, r8
 8000cd2:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000cd6:	e766      	b.n	8000ba6 <__udivmoddi4+0xfa>
 8000cd8:	4601      	mov	r1, r0
 8000cda:	e718      	b.n	8000b0e <__udivmoddi4+0x62>
 8000cdc:	4610      	mov	r0, r2
 8000cde:	e72c      	b.n	8000b3a <__udivmoddi4+0x8e>
 8000ce0:	f1c6 0220 	rsb	r2, r6, #32
 8000ce4:	fa2e f302 	lsr.w	r3, lr, r2
 8000ce8:	40b7      	lsls	r7, r6
 8000cea:	40b1      	lsls	r1, r6
 8000cec:	fa20 f202 	lsr.w	r2, r0, r2
 8000cf0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000cf4:	430a      	orrs	r2, r1
 8000cf6:	fbb3 f8fe 	udiv	r8, r3, lr
 8000cfa:	b2bc      	uxth	r4, r7
 8000cfc:	fb0e 3318 	mls	r3, lr, r8, r3
 8000d00:	0c11      	lsrs	r1, r2, #16
 8000d02:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d06:	fb08 f904 	mul.w	r9, r8, r4
 8000d0a:	40b0      	lsls	r0, r6
 8000d0c:	4589      	cmp	r9, r1
 8000d0e:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000d12:	b280      	uxth	r0, r0
 8000d14:	d93e      	bls.n	8000d94 <__udivmoddi4+0x2e8>
 8000d16:	1879      	adds	r1, r7, r1
 8000d18:	f108 3cff 	add.w	ip, r8, #4294967295
 8000d1c:	d201      	bcs.n	8000d22 <__udivmoddi4+0x276>
 8000d1e:	4589      	cmp	r9, r1
 8000d20:	d81f      	bhi.n	8000d62 <__udivmoddi4+0x2b6>
 8000d22:	eba1 0109 	sub.w	r1, r1, r9
 8000d26:	fbb1 f9fe 	udiv	r9, r1, lr
 8000d2a:	fb09 f804 	mul.w	r8, r9, r4
 8000d2e:	fb0e 1119 	mls	r1, lr, r9, r1
 8000d32:	b292      	uxth	r2, r2
 8000d34:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000d38:	4542      	cmp	r2, r8
 8000d3a:	d229      	bcs.n	8000d90 <__udivmoddi4+0x2e4>
 8000d3c:	18ba      	adds	r2, r7, r2
 8000d3e:	f109 31ff 	add.w	r1, r9, #4294967295
 8000d42:	d2c4      	bcs.n	8000cce <__udivmoddi4+0x222>
 8000d44:	4542      	cmp	r2, r8
 8000d46:	d2c2      	bcs.n	8000cce <__udivmoddi4+0x222>
 8000d48:	f1a9 0102 	sub.w	r1, r9, #2
 8000d4c:	443a      	add	r2, r7
 8000d4e:	e7be      	b.n	8000cce <__udivmoddi4+0x222>
 8000d50:	45f0      	cmp	r8, lr
 8000d52:	d29d      	bcs.n	8000c90 <__udivmoddi4+0x1e4>
 8000d54:	ebbe 0302 	subs.w	r3, lr, r2
 8000d58:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000d5c:	3801      	subs	r0, #1
 8000d5e:	46e1      	mov	r9, ip
 8000d60:	e796      	b.n	8000c90 <__udivmoddi4+0x1e4>
 8000d62:	eba7 0909 	sub.w	r9, r7, r9
 8000d66:	4449      	add	r1, r9
 8000d68:	f1a8 0c02 	sub.w	ip, r8, #2
 8000d6c:	fbb1 f9fe 	udiv	r9, r1, lr
 8000d70:	fb09 f804 	mul.w	r8, r9, r4
 8000d74:	e7db      	b.n	8000d2e <__udivmoddi4+0x282>
 8000d76:	4673      	mov	r3, lr
 8000d78:	e77f      	b.n	8000c7a <__udivmoddi4+0x1ce>
 8000d7a:	4650      	mov	r0, sl
 8000d7c:	e766      	b.n	8000c4c <__udivmoddi4+0x1a0>
 8000d7e:	4608      	mov	r0, r1
 8000d80:	e6fd      	b.n	8000b7e <__udivmoddi4+0xd2>
 8000d82:	443b      	add	r3, r7
 8000d84:	3a02      	subs	r2, #2
 8000d86:	e733      	b.n	8000bf0 <__udivmoddi4+0x144>
 8000d88:	f1ac 0c02 	sub.w	ip, ip, #2
 8000d8c:	443b      	add	r3, r7
 8000d8e:	e71c      	b.n	8000bca <__udivmoddi4+0x11e>
 8000d90:	4649      	mov	r1, r9
 8000d92:	e79c      	b.n	8000cce <__udivmoddi4+0x222>
 8000d94:	eba1 0109 	sub.w	r1, r1, r9
 8000d98:	46c4      	mov	ip, r8
 8000d9a:	fbb1 f9fe 	udiv	r9, r1, lr
 8000d9e:	fb09 f804 	mul.w	r8, r9, r4
 8000da2:	e7c4      	b.n	8000d2e <__udivmoddi4+0x282>

08000da4 <__aeabi_idiv0>:
 8000da4:	4770      	bx	lr
 8000da6:	bf00      	nop

08000da8 <LL_USART_SetBaudRate>:
                                          uint32_t BaudRate)
#else
__STATIC_INLINE void LL_USART_SetBaudRate(USART_TypeDef *USARTx, uint32_t PeriphClk, uint32_t OverSampling,
                                          uint32_t BaudRate)
#endif /* USART_PRESC_PRESCALER */
{
 8000da8:	b480      	push	{r7}
 8000daa:	b087      	sub	sp, #28
 8000dac:	af00      	add	r7, sp, #0
 8000dae:	60f8      	str	r0, [r7, #12]
 8000db0:	60b9      	str	r1, [r7, #8]
 8000db2:	607a      	str	r2, [r7, #4]
 8000db4:	603b      	str	r3, [r7, #0]
  {
    /* Can Not divide per 0 */
  }
  else if (OverSampling == LL_USART_OVERSAMPLING_8)
#else
  if (OverSampling == LL_USART_OVERSAMPLING_8)
 8000db6:	687b      	ldr	r3, [r7, #4]
 8000db8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8000dbc:	d11a      	bne.n	8000df4 <LL_USART_SetBaudRate+0x4c>
#endif /* USART_PRESC_PRESCALER */
  {
#if defined(USART_PRESC_PRESCALER)
    usartdiv = (uint16_t)(__LL_USART_DIV_SAMPLING8(PeriphClk, (uint8_t)PrescalerValue, BaudRate));
#else
    usartdiv = (uint16_t)(__LL_USART_DIV_SAMPLING8(PeriphClk, BaudRate));
 8000dbe:	68bb      	ldr	r3, [r7, #8]
 8000dc0:	005a      	lsls	r2, r3, #1
 8000dc2:	683b      	ldr	r3, [r7, #0]
 8000dc4:	085b      	lsrs	r3, r3, #1
 8000dc6:	441a      	add	r2, r3
 8000dc8:	683b      	ldr	r3, [r7, #0]
 8000dca:	fbb2 f3f3 	udiv	r3, r2, r3
 8000dce:	b29b      	uxth	r3, r3
 8000dd0:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
    brrtemp = usartdiv & 0xFFF0U;
 8000dd2:	697a      	ldr	r2, [r7, #20]
 8000dd4:	f64f 73f0 	movw	r3, #65520	@ 0xfff0
 8000dd8:	4013      	ands	r3, r2
 8000dda:	613b      	str	r3, [r7, #16]
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8000ddc:	697b      	ldr	r3, [r7, #20]
 8000dde:	085b      	lsrs	r3, r3, #1
 8000de0:	b29b      	uxth	r3, r3
 8000de2:	f003 0307 	and.w	r3, r3, #7
 8000de6:	693a      	ldr	r2, [r7, #16]
 8000de8:	4313      	orrs	r3, r2
 8000dea:	613b      	str	r3, [r7, #16]
    USARTx->BRR = brrtemp;
 8000dec:	68fb      	ldr	r3, [r7, #12]
 8000dee:	693a      	ldr	r2, [r7, #16]
 8000df0:	60da      	str	r2, [r3, #12]
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, (uint8_t)PrescalerValue, BaudRate));
#else
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, BaudRate));
#endif /* USART_PRESC_PRESCALER */
  }
}
 8000df2:	e00a      	b.n	8000e0a <LL_USART_SetBaudRate+0x62>
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, BaudRate));
 8000df4:	683b      	ldr	r3, [r7, #0]
 8000df6:	085a      	lsrs	r2, r3, #1
 8000df8:	68bb      	ldr	r3, [r7, #8]
 8000dfa:	441a      	add	r2, r3
 8000dfc:	683b      	ldr	r3, [r7, #0]
 8000dfe:	fbb2 f3f3 	udiv	r3, r2, r3
 8000e02:	b29b      	uxth	r3, r3
 8000e04:	461a      	mov	r2, r3
 8000e06:	68fb      	ldr	r3, [r7, #12]
 8000e08:	60da      	str	r2, [r3, #12]
}
 8000e0a:	bf00      	nop
 8000e0c:	371c      	adds	r7, #28
 8000e0e:	46bd      	mov	sp, r7
 8000e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e14:	4770      	bx	lr
	...

08000e18 <Temp_Sensor_Init>:
#include "stm32l4xx_ll_usart.h"


/*------INIZIALIZZAZIONE SENSORE DI TEMPERATURA------*/
void Temp_Sensor_Init(void)
{
 8000e18:	b590      	push	{r4, r7, lr}
 8000e1a:	b083      	sub	sp, #12
 8000e1c:	af00      	add	r7, sp, #0
	uint8_t data = 0xF0;
 8000e1e:	23f0      	movs	r3, #240	@ 0xf0
 8000e20:	71fb      	strb	r3, [r7, #7]

	LL_USART_SetBaudRate(huart4.Instance, HAL_RCC_GetPCLK2Freq(), UART_OVERSAMPLING_16, 9600);
 8000e22:	4b1a      	ldr	r3, [pc, #104]	@ (8000e8c <Temp_Sensor_Init+0x74>)
 8000e24:	681c      	ldr	r4, [r3, #0]
 8000e26:	f00f fcb3 	bl	8010790 <HAL_RCC_GetPCLK2Freq>
 8000e2a:	4601      	mov	r1, r0
 8000e2c:	f44f 5316 	mov.w	r3, #9600	@ 0x2580
 8000e30:	2200      	movs	r2, #0
 8000e32:	4620      	mov	r0, r4
 8000e34:	f7ff ffb8 	bl	8000da8 <LL_USART_SetBaudRate>

	HAL_UART_Transmit(TEMP_UART, &data, 1, 100);  // low for 500+us
 8000e38:	1df9      	adds	r1, r7, #7
 8000e3a:	2364      	movs	r3, #100	@ 0x64
 8000e3c:	2201      	movs	r2, #1
 8000e3e:	4813      	ldr	r0, [pc, #76]	@ (8000e8c <Temp_Sensor_Init+0x74>)
 8000e40:	f013 ff80 	bl	8014d44 <HAL_UART_Transmit>
	if (HAL_UART_Receive(TEMP_UART, &data, 1, 1000) != HAL_OK)
 8000e44:	1df9      	adds	r1, r7, #7
 8000e46:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000e4a:	2201      	movs	r2, #1
 8000e4c:	480f      	ldr	r0, [pc, #60]	@ (8000e8c <Temp_Sensor_Init+0x74>)
 8000e4e:	f014 f802 	bl	8014e56 <HAL_UART_Receive>
 8000e52:	4603      	mov	r3, r0
 8000e54:	2b00      	cmp	r3, #0
 8000e56:	d001      	beq.n	8000e5c <Temp_Sensor_Init+0x44>
		while(1);
 8000e58:	bf00      	nop
 8000e5a:	e7fd      	b.n	8000e58 <Temp_Sensor_Init+0x40>

	LL_USART_SetBaudRate(huart4.Instance, HAL_RCC_GetPCLK2Freq(), UART_OVERSAMPLING_16, 115200);
 8000e5c:	4b0b      	ldr	r3, [pc, #44]	@ (8000e8c <Temp_Sensor_Init+0x74>)
 8000e5e:	681c      	ldr	r4, [r3, #0]
 8000e60:	f00f fc96 	bl	8010790 <HAL_RCC_GetPCLK2Freq>
 8000e64:	4601      	mov	r1, r0
 8000e66:	f44f 33e1 	mov.w	r3, #115200	@ 0x1c200
 8000e6a:	2200      	movs	r2, #0
 8000e6c:	4620      	mov	r0, r4
 8000e6e:	f7ff ff9b 	bl	8000da8 <LL_USART_SetBaudRate>

	if (data == 0xF0)
 8000e72:	79fb      	ldrb	r3, [r7, #7]
 8000e74:	2bf0      	cmp	r3, #240	@ 0xf0
 8000e76:	d101      	bne.n	8000e7c <Temp_Sensor_Init+0x64>
		while(1);
 8000e78:	bf00      	nop
 8000e7a:	e7fd      	b.n	8000e78 <Temp_Sensor_Init+0x60>

	Temp_Sensor_Write(0xCC);  // skip ROM
 8000e7c:	20cc      	movs	r0, #204	@ 0xcc
 8000e7e:	f000 f807 	bl	8000e90 <Temp_Sensor_Write>
}
 8000e82:	bf00      	nop
 8000e84:	370c      	adds	r7, #12
 8000e86:	46bd      	mov	sp, r7
 8000e88:	bd90      	pop	{r4, r7, pc}
 8000e8a:	bf00      	nop
 8000e8c:	20000434 	.word	0x20000434

08000e90 <Temp_Sensor_Write>:

/*------SCRITTURA SU SENSORE DI TEMPERATURA------*/
void Temp_Sensor_Write(uint8_t data)
{
 8000e90:	b580      	push	{r7, lr}
 8000e92:	b086      	sub	sp, #24
 8000e94:	af00      	add	r7, sp, #0
 8000e96:	4603      	mov	r3, r0
 8000e98:	71fb      	strb	r3, [r7, #7]
	uint8_t buffer[8];

	for (int i=0; i<8; i++)
 8000e9a:	2300      	movs	r3, #0
 8000e9c:	617b      	str	r3, [r7, #20]
 8000e9e:	e017      	b.n	8000ed0 <Temp_Sensor_Write+0x40>
	{
		if ((data & (1<<i))!=0)  // if the bit is high
 8000ea0:	79fa      	ldrb	r2, [r7, #7]
 8000ea2:	697b      	ldr	r3, [r7, #20]
 8000ea4:	fa42 f303 	asr.w	r3, r2, r3
 8000ea8:	f003 0301 	and.w	r3, r3, #1
 8000eac:	2b00      	cmp	r3, #0
 8000eae:	d006      	beq.n	8000ebe <Temp_Sensor_Write+0x2e>
		{
			buffer[i] = 0xFF;  // write 1
 8000eb0:	f107 020c 	add.w	r2, r7, #12
 8000eb4:	697b      	ldr	r3, [r7, #20]
 8000eb6:	4413      	add	r3, r2
 8000eb8:	22ff      	movs	r2, #255	@ 0xff
 8000eba:	701a      	strb	r2, [r3, #0]
 8000ebc:	e005      	b.n	8000eca <Temp_Sensor_Write+0x3a>
		}
		else  // if the bit is low
		{
			buffer[i] = 0;  // write 0
 8000ebe:	f107 020c 	add.w	r2, r7, #12
 8000ec2:	697b      	ldr	r3, [r7, #20]
 8000ec4:	4413      	add	r3, r2
 8000ec6:	2200      	movs	r2, #0
 8000ec8:	701a      	strb	r2, [r3, #0]
	for (int i=0; i<8; i++)
 8000eca:	697b      	ldr	r3, [r7, #20]
 8000ecc:	3301      	adds	r3, #1
 8000ece:	617b      	str	r3, [r7, #20]
 8000ed0:	697b      	ldr	r3, [r7, #20]
 8000ed2:	2b07      	cmp	r3, #7
 8000ed4:	dde4      	ble.n	8000ea0 <Temp_Sensor_Write+0x10>
		}
	}

	HAL_UART_Transmit(TEMP_UART, buffer, 8, 100);
 8000ed6:	f107 010c 	add.w	r1, r7, #12
 8000eda:	2364      	movs	r3, #100	@ 0x64
 8000edc:	2208      	movs	r2, #8
 8000ede:	4803      	ldr	r0, [pc, #12]	@ (8000eec <Temp_Sensor_Write+0x5c>)
 8000ee0:	f013 ff30 	bl	8014d44 <HAL_UART_Transmit>
}
 8000ee4:	bf00      	nop
 8000ee6:	3718      	adds	r7, #24
 8000ee8:	46bd      	mov	sp, r7
 8000eea:	bd80      	pop	{r7, pc}
 8000eec:	20000434 	.word	0x20000434

08000ef0 <Temp_Sensor_ReadByte>:

/*------LETTURA BYTE DA SENSORE DI TEMPERATURA------*/
uint8_t Temp_Sensor_ReadByte(void)
{
 8000ef0:	b580      	push	{r7, lr}
 8000ef2:	b082      	sub	sp, #8
 8000ef4:	af00      	add	r7, sp, #0
	uint8_t RxByte = 0;
 8000ef6:	2300      	movs	r3, #0
 8000ef8:	71fb      	strb	r3, [r7, #7]
	for (uint8_t i = 0; i < 8; i++)
 8000efa:	2300      	movs	r3, #0
 8000efc:	71bb      	strb	r3, [r7, #6]
 8000efe:	e00e      	b.n	8000f1e <Temp_Sensor_ReadByte+0x2e>
	{
		RxByte >>= 1;
 8000f00:	79fb      	ldrb	r3, [r7, #7]
 8000f02:	085b      	lsrs	r3, r3, #1
 8000f04:	71fb      	strb	r3, [r7, #7]
		if (Temp_Sensor_ReadBit())
 8000f06:	f000 f813 	bl	8000f30 <Temp_Sensor_ReadBit>
 8000f0a:	4603      	mov	r3, r0
 8000f0c:	2b00      	cmp	r3, #0
 8000f0e:	d003      	beq.n	8000f18 <Temp_Sensor_ReadByte+0x28>
		{
			RxByte |= 0x80;
 8000f10:	79fb      	ldrb	r3, [r7, #7]
 8000f12:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8000f16:	71fb      	strb	r3, [r7, #7]
	for (uint8_t i = 0; i < 8; i++)
 8000f18:	79bb      	ldrb	r3, [r7, #6]
 8000f1a:	3301      	adds	r3, #1
 8000f1c:	71bb      	strb	r3, [r7, #6]
 8000f1e:	79bb      	ldrb	r3, [r7, #6]
 8000f20:	2b07      	cmp	r3, #7
 8000f22:	d9ed      	bls.n	8000f00 <Temp_Sensor_ReadByte+0x10>
		}
	}
	return RxByte;
 8000f24:	79fb      	ldrb	r3, [r7, #7]
}
 8000f26:	4618      	mov	r0, r3
 8000f28:	3708      	adds	r7, #8
 8000f2a:	46bd      	mov	sp, r7
 8000f2c:	bd80      	pop	{r7, pc}
	...

08000f30 <Temp_Sensor_ReadBit>:

/*------LETTURA BIT DA SENSORE DI TEMPERATURA------*/
uint8_t Temp_Sensor_ReadBit(void)
{
 8000f30:	b580      	push	{r7, lr}
 8000f32:	b082      	sub	sp, #8
 8000f34:	af00      	add	r7, sp, #0
    uint8_t ReadBitCMD = 0xFF;
 8000f36:	23ff      	movs	r3, #255	@ 0xff
 8000f38:	71fb      	strb	r3, [r7, #7]
    uint8_t RxBit;

    // Send Read Bit CMD
    HAL_UART_Transmit(&huart1, &ReadBitCMD, 1, 1);
 8000f3a:	1df9      	adds	r1, r7, #7
 8000f3c:	2301      	movs	r3, #1
 8000f3e:	2201      	movs	r2, #1
 8000f40:	4808      	ldr	r0, [pc, #32]	@ (8000f64 <Temp_Sensor_ReadBit+0x34>)
 8000f42:	f013 feff 	bl	8014d44 <HAL_UART_Transmit>
    // Receive The Bit
    HAL_UART_Receive(&huart1, &RxBit, 1, 1);
 8000f46:	1db9      	adds	r1, r7, #6
 8000f48:	2301      	movs	r3, #1
 8000f4a:	2201      	movs	r2, #1
 8000f4c:	4805      	ldr	r0, [pc, #20]	@ (8000f64 <Temp_Sensor_ReadBit+0x34>)
 8000f4e:	f013 ff82 	bl	8014e56 <HAL_UART_Receive>

    return (RxBit & 0x01);
 8000f52:	79bb      	ldrb	r3, [r7, #6]
 8000f54:	f003 0301 	and.w	r3, r3, #1
 8000f58:	b2db      	uxtb	r3, r3
}
 8000f5a:	4618      	mov	r0, r3
 8000f5c:	3708      	adds	r7, #8
 8000f5e:	46bd      	mov	sp, r7
 8000f60:	bd80      	pop	{r7, pc}
 8000f62:	bf00      	nop
 8000f64:	200004bc 	.word	0x200004bc

08000f68 <Read_Temperature>:

/*------LETTURA TEMPERATURA------*/
uint16_t Read_Temperature(void)
{
 8000f68:	b580      	push	{r7, lr}
 8000f6a:	b082      	sub	sp, #8
 8000f6c:	af00      	add	r7, sp, #0
	uint8_t Temp_LSB = 0;
 8000f6e:	2300      	movs	r3, #0
 8000f70:	71fb      	strb	r3, [r7, #7]
	uint8_t Temp_MSB = 0;
 8000f72:	2300      	movs	r3, #0
 8000f74:	71bb      	strb	r3, [r7, #6]
	uint16_t Temp = 0;
 8000f76:	2300      	movs	r3, #0
 8000f78:	80bb      	strh	r3, [r7, #4]
	
	Temp_Sensor_Init();
 8000f7a:	f7ff ff4d 	bl	8000e18 <Temp_Sensor_Init>
	Temp_Sensor_Write(0xCC);  // skip ROM
 8000f7e:	20cc      	movs	r0, #204	@ 0xcc
 8000f80:	f7ff ff86 	bl	8000e90 <Temp_Sensor_Write>

	uint8_t status = Temp_Sensor_ReadBit();
 8000f84:	f7ff ffd4 	bl	8000f30 <Temp_Sensor_ReadBit>
 8000f88:	4603      	mov	r3, r0
 8000f8a:	70fb      	strb	r3, [r7, #3]

	if (status) 
 8000f8c:	78fb      	ldrb	r3, [r7, #3]
 8000f8e:	2b00      	cmp	r3, #0
 8000f90:	d01d      	beq.n	8000fce <Read_Temperature+0x66>
	{
		Temp_Sensor_Write(0xBE);  // read Scratch-pad
 8000f92:	20be      	movs	r0, #190	@ 0xbe
 8000f94:	f7ff ff7c 	bl	8000e90 <Temp_Sensor_Write>
		Temp_LSB = Temp_Sensor_ReadByte();
 8000f98:	f7ff ffaa 	bl	8000ef0 <Temp_Sensor_ReadByte>
 8000f9c:	4603      	mov	r3, r0
 8000f9e:	71fb      	strb	r3, [r7, #7]
	    Temp_MSB = Temp_Sensor_ReadByte();
 8000fa0:	f7ff ffa6 	bl	8000ef0 <Temp_Sensor_ReadByte>
 8000fa4:	4603      	mov	r3, r0
 8000fa6:	71bb      	strb	r3, [r7, #6]
		Temp_Sensor_Init();
 8000fa8:	f7ff ff36 	bl	8000e18 <Temp_Sensor_Init>
		Temp_Sensor_Write(0xCC);  // skip ROM
 8000fac:	20cc      	movs	r0, #204	@ 0xcc
 8000fae:	f7ff ff6f 	bl	8000e90 <Temp_Sensor_Write>
		Temp_Sensor_Write(0x44);  // convert t
 8000fb2:	2044      	movs	r0, #68	@ 0x44
 8000fb4:	f7ff ff6c 	bl	8000e90 <Temp_Sensor_Write>
		Temp = ((Temp_MSB << 8)) | Temp_LSB;
 8000fb8:	79bb      	ldrb	r3, [r7, #6]
 8000fba:	b21b      	sxth	r3, r3
 8000fbc:	021b      	lsls	r3, r3, #8
 8000fbe:	b21a      	sxth	r2, r3
 8000fc0:	79fb      	ldrb	r3, [r7, #7]
 8000fc2:	b21b      	sxth	r3, r3
 8000fc4:	4313      	orrs	r3, r2
 8000fc6:	b21b      	sxth	r3, r3
 8000fc8:	80bb      	strh	r3, [r7, #4]
		return Temp;
 8000fca:	88bb      	ldrh	r3, [r7, #4]
 8000fcc:	e000      	b.n	8000fd0 <Read_Temperature+0x68>
	}
	
	return 0; 
 8000fce:	2300      	movs	r3, #0
}
 8000fd0:	4618      	mov	r0, r3
 8000fd2:	3708      	adds	r7, #8
 8000fd4:	46bd      	mov	sp, r7
 8000fd6:	bd80      	pop	{r7, pc}

08000fd8 <INA3221_Init>:
#include "INA3221_reg.h"
#include "peripherals.h"
#include "global_variables.h"

void INA3221_Init()
{
 8000fd8:	b580      	push	{r7, lr}
 8000fda:	b082      	sub	sp, #8
 8000fdc:	af00      	add	r7, sp, #0
	uint16_t rcheck = 0;
 8000fde:	2300      	movs	r3, #0
 8000fe0:	80fb      	strh	r3, [r7, #6]

	INA3221_write_reg(INA3221_REG_CONFIG, 0x8000);   //RESET
 8000fe2:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000fe6:	2000      	movs	r0, #0
 8000fe8:	f000 f880 	bl	80010ec <INA3221_write_reg>

	HAL_Delay(100);
 8000fec:	2064      	movs	r0, #100	@ 0x64
 8000fee:	f00a f995 	bl	800b31c <HAL_Delay>

	INA3221_read_reg(INA3221_REG_MID, &rcheck);
 8000ff2:	1dbb      	adds	r3, r7, #6
 8000ff4:	4619      	mov	r1, r3
 8000ff6:	20fe      	movs	r0, #254	@ 0xfe
 8000ff8:	f000 f842 	bl	8001080 <INA3221_read_reg>

	if(rcheck != INA3221_DEFAULT_MID)
 8000ffc:	88fb      	ldrh	r3, [r7, #6]
 8000ffe:	f245 4249 	movw	r2, #21577	@ 0x5449
 8001002:	4293      	cmp	r3, r2
 8001004:	d001      	beq.n	800100a <INA3221_Init+0x32>
		while(1);
 8001006:	bf00      	nop
 8001008:	e7fd      	b.n	8001006 <INA3221_Init+0x2e>

	INA3221_write_reg(INA3221_REG_CONFIG, 0x7D27);   //CH1 CH2 CH3 Enabled, 512 AVG, 1.1ms conv time, continous mode
 800100a:	f647 5127 	movw	r1, #32039	@ 0x7d27
 800100e:	2000      	movs	r0, #0
 8001010:	f000 f86c 	bl	80010ec <INA3221_write_reg>
	INA3221_Read_Measure(&Supply);
 8001014:	4803      	ldr	r0, [pc, #12]	@ (8001024 <INA3221_Init+0x4c>)
 8001016:	f000 f807 	bl	8001028 <INA3221_Read_Measure>
}
 800101a:	bf00      	nop
 800101c:	3708      	adds	r7, #8
 800101e:	46bd      	mov	sp, r7
 8001020:	bd80      	pop	{r7, pc}
 8001022:	bf00      	nop
 8001024:	200038e0 	.word	0x200038e0

08001028 <INA3221_Read_Measure>:

void INA3221_Read_Measure(supply_bus_t *measure)
{
 8001028:	b580      	push	{r7, lr}
 800102a:	b082      	sub	sp, #8
 800102c:	af00      	add	r7, sp, #0
 800102e:	6078      	str	r0, [r7, #4]
	INA3221_read_reg(INA3221_REG_BUSVOLTAGE_1, (uint16_t *)&(measure->v1));
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	4619      	mov	r1, r3
 8001034:	2002      	movs	r0, #2
 8001036:	f000 f823 	bl	8001080 <INA3221_read_reg>
	INA3221_read_reg(INA3221_REG_BUSVOLTAGE_2, (uint16_t *)&(measure->v2));
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	3302      	adds	r3, #2
 800103e:	4619      	mov	r1, r3
 8001040:	2004      	movs	r0, #4
 8001042:	f000 f81d 	bl	8001080 <INA3221_read_reg>
	INA3221_read_reg(INA3221_REG_BUSVOLTAGE_3, (uint16_t *)&(measure->v3));
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	3304      	adds	r3, #4
 800104a:	4619      	mov	r1, r3
 800104c:	2006      	movs	r0, #6
 800104e:	f000 f817 	bl	8001080 <INA3221_read_reg>
	INA3221_read_reg(INA3221_REG_SHUNTVOLTAGE_1, (uint16_t *)&(measure->i1));
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	3306      	adds	r3, #6
 8001056:	4619      	mov	r1, r3
 8001058:	2001      	movs	r0, #1
 800105a:	f000 f811 	bl	8001080 <INA3221_read_reg>
	INA3221_read_reg(INA3221_REG_SHUNTVOLTAGE_2, (uint16_t *)&(measure->i2));
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	3308      	adds	r3, #8
 8001062:	4619      	mov	r1, r3
 8001064:	2003      	movs	r0, #3
 8001066:	f000 f80b 	bl	8001080 <INA3221_read_reg>
	INA3221_read_reg(INA3221_REG_SHUNTVOLTAGE_3, (uint16_t *)&(measure->i3));
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	330a      	adds	r3, #10
 800106e:	4619      	mov	r1, r3
 8001070:	2005      	movs	r0, #5
 8001072:	f000 f805 	bl	8001080 <INA3221_read_reg>
}
 8001076:	bf00      	nop
 8001078:	3708      	adds	r7, #8
 800107a:	46bd      	mov	sp, r7
 800107c:	bd80      	pop	{r7, pc}
	...

08001080 <INA3221_read_reg>:


int INA3221_read_reg(uint8_t reg, uint16_t *rdata)
{
 8001080:	b580      	push	{r7, lr}
 8001082:	b086      	sub	sp, #24
 8001084:	af02      	add	r7, sp, #8
 8001086:	4603      	mov	r3, r0
 8001088:	6039      	str	r1, [r7, #0]
 800108a:	71fb      	strb	r3, [r7, #7]
	int result = -1;
 800108c:	f04f 33ff 	mov.w	r3, #4294967295
 8001090:	60fb      	str	r3, [r7, #12]
	uint8_t data[2] = {0};
 8001092:	2300      	movs	r3, #0
 8001094:	813b      	strh	r3, [r7, #8]

	if(HAL_I2C_Master_Transmit(I2C, INA3221_ADDR_0 << 1, &reg, 1, 100) == HAL_OK)
 8001096:	1dfa      	adds	r2, r7, #7
 8001098:	2364      	movs	r3, #100	@ 0x64
 800109a:	9300      	str	r3, [sp, #0]
 800109c:	2301      	movs	r3, #1
 800109e:	2180      	movs	r1, #128	@ 0x80
 80010a0:	4811      	ldr	r0, [pc, #68]	@ (80010e8 <INA3221_read_reg+0x68>)
 80010a2:	f00d fbd9 	bl	800e858 <HAL_I2C_Master_Transmit>
 80010a6:	4603      	mov	r3, r0
 80010a8:	2b00      	cmp	r3, #0
 80010aa:	d118      	bne.n	80010de <INA3221_read_reg+0x5e>
	{

		if(HAL_I2C_Master_Receive(I2C,  INA3221_ADDR_0 << 1, data, 2, 100) == HAL_OK)
 80010ac:	f107 0208 	add.w	r2, r7, #8
 80010b0:	2364      	movs	r3, #100	@ 0x64
 80010b2:	9300      	str	r3, [sp, #0]
 80010b4:	2302      	movs	r3, #2
 80010b6:	2180      	movs	r1, #128	@ 0x80
 80010b8:	480b      	ldr	r0, [pc, #44]	@ (80010e8 <INA3221_read_reg+0x68>)
 80010ba:	f00d fce5 	bl	800ea88 <HAL_I2C_Master_Receive>
 80010be:	4603      	mov	r3, r0
 80010c0:	2b00      	cmp	r3, #0
 80010c2:	d10c      	bne.n	80010de <INA3221_read_reg+0x5e>
		{
			result = 0;
 80010c4:	2300      	movs	r3, #0
 80010c6:	60fb      	str	r3, [r7, #12]
			*rdata = (data[0] << 8) | data[1];
 80010c8:	7a3b      	ldrb	r3, [r7, #8]
 80010ca:	b21b      	sxth	r3, r3
 80010cc:	021b      	lsls	r3, r3, #8
 80010ce:	b21a      	sxth	r2, r3
 80010d0:	7a7b      	ldrb	r3, [r7, #9]
 80010d2:	b21b      	sxth	r3, r3
 80010d4:	4313      	orrs	r3, r2
 80010d6:	b21b      	sxth	r3, r3
 80010d8:	b29a      	uxth	r2, r3
 80010da:	683b      	ldr	r3, [r7, #0]
 80010dc:	801a      	strh	r2, [r3, #0]
		}
	}

	return result;
 80010de:	68fb      	ldr	r3, [r7, #12]
}
 80010e0:	4618      	mov	r0, r3
 80010e2:	3710      	adds	r7, #16
 80010e4:	46bd      	mov	sp, r7
 80010e6:	bd80      	pop	{r7, pc}
 80010e8:	20000180 	.word	0x20000180

080010ec <INA3221_write_reg>:


int INA3221_write_reg(uint8_t reg, uint16_t wdata)
{
 80010ec:	b580      	push	{r7, lr}
 80010ee:	b086      	sub	sp, #24
 80010f0:	af02      	add	r7, sp, #8
 80010f2:	4603      	mov	r3, r0
 80010f4:	460a      	mov	r2, r1
 80010f6:	71fb      	strb	r3, [r7, #7]
 80010f8:	4613      	mov	r3, r2
 80010fa:	80bb      	strh	r3, [r7, #4]
    int result = -1;
 80010fc:	f04f 33ff 	mov.w	r3, #4294967295
 8001100:	60fb      	str	r3, [r7, #12]
    uint8_t data[3];
    
    data[0] = reg;                    
 8001102:	79fb      	ldrb	r3, [r7, #7]
 8001104:	723b      	strb	r3, [r7, #8]
    data[1] = (wdata >> 8);          
 8001106:	88bb      	ldrh	r3, [r7, #4]
 8001108:	0a1b      	lsrs	r3, r3, #8
 800110a:	b29b      	uxth	r3, r3
 800110c:	b2db      	uxtb	r3, r3
 800110e:	727b      	strb	r3, [r7, #9]
    data[2] = (wdata & 0xFF);        
 8001110:	88bb      	ldrh	r3, [r7, #4]
 8001112:	b2db      	uxtb	r3, r3
 8001114:	72bb      	strb	r3, [r7, #10]

    if(HAL_I2C_Master_Transmit(I2C, INA3221_ADDR_0 << 1, data, 3, 100) == HAL_OK)
 8001116:	f107 0208 	add.w	r2, r7, #8
 800111a:	2364      	movs	r3, #100	@ 0x64
 800111c:	9300      	str	r3, [sp, #0]
 800111e:	2303      	movs	r3, #3
 8001120:	2180      	movs	r1, #128	@ 0x80
 8001122:	4806      	ldr	r0, [pc, #24]	@ (800113c <INA3221_write_reg+0x50>)
 8001124:	f00d fb98 	bl	800e858 <HAL_I2C_Master_Transmit>
 8001128:	4603      	mov	r3, r0
 800112a:	2b00      	cmp	r3, #0
 800112c:	d101      	bne.n	8001132 <INA3221_write_reg+0x46>
    {
        result = 0;
 800112e:	2300      	movs	r3, #0
 8001130:	60fb      	str	r3, [r7, #12]
    }
    
    return result;
 8001132:	68fb      	ldr	r3, [r7, #12]
}
 8001134:	4618      	mov	r0, r3
 8001136:	3710      	adds	r7, #16
 8001138:	46bd      	mov	sp, r7
 800113a:	bd80      	pop	{r7, pc}
 800113c:	20000180 	.word	0x20000180

08001140 <RTC_Init>:
#include "RTC.h"


/*-----INIZiALIZZAZIONE ORA RTC-----*/
void RTC_Init(void)
{
 8001140:	b580      	push	{r7, lr}
 8001142:	b082      	sub	sp, #8
 8001144:	af00      	add	r7, sp, #0
	for (int retry = 0; retry < 3; retry++)
 8001146:	2300      	movs	r3, #0
 8001148:	607b      	str	r3, [r7, #4]
 800114a:	e00b      	b.n	8001164 <RTC_Init+0x24>
	{
		if (Get_DateTime_From_Network())
 800114c:	f000 f814 	bl	8001178 <Get_DateTime_From_Network>
 8001150:	4603      	mov	r3, r0
 8001152:	2b00      	cmp	r3, #0
 8001154:	d10c      	bne.n	8001170 <RTC_Init+0x30>
		{
			return;
		}
		HAL_Delay(1000);
 8001156:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800115a:	f00a f8df 	bl	800b31c <HAL_Delay>
	for (int retry = 0; retry < 3; retry++)
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	3301      	adds	r3, #1
 8001162:	607b      	str	r3, [r7, #4]
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	2b02      	cmp	r3, #2
 8001168:	ddf0      	ble.n	800114c <RTC_Init+0xc>
	}
	Set_Default_DateTime();
 800116a:	f000 f905 	bl	8001378 <Set_Default_DateTime>
 800116e:	e000      	b.n	8001172 <RTC_Init+0x32>
			return;
 8001170:	bf00      	nop
}
 8001172:	3708      	adds	r7, #8
 8001174:	46bd      	mov	sp, r7
 8001176:	bd80      	pop	{r7, pc}

08001178 <Get_DateTime_From_Network>:

/*-----SINCRONIZZAZIONE RTC DA RETE-----*/
int Get_DateTime_From_Network(void)
{
 8001178:	b5b0      	push	{r4, r5, r7, lr}
 800117a:	b0a2      	sub	sp, #136	@ 0x88
 800117c:	af00      	add	r7, sp, #0
	char response[100] = {0};
 800117e:	f107 031c 	add.w	r3, r7, #28
 8001182:	2264      	movs	r2, #100	@ 0x64
 8001184:	2100      	movs	r1, #0
 8001186:	4618      	mov	r0, r3
 8001188:	f015 f984 	bl	8016494 <memset>
	RTC_DateTypeDef sDate = {0};
 800118c:	2300      	movs	r3, #0
 800118e:	61bb      	str	r3, [r7, #24]
	RTC_TimeTypeDef sTime = {0};
 8001190:	1d3b      	adds	r3, r7, #4
 8001192:	2200      	movs	r2, #0
 8001194:	601a      	str	r2, [r3, #0]
 8001196:	605a      	str	r2, [r3, #4]
 8001198:	609a      	str	r2, [r3, #8]
 800119a:	60da      	str	r2, [r3, #12]
 800119c:	611a      	str	r2, [r3, #16]

	SIM_Send_Command("AT+CCLK?\r");
 800119e:	4872      	ldr	r0, [pc, #456]	@ (8001368 <Get_DateTime_From_Network+0x1f0>)
 80011a0:	f000 fcc8 	bl	8001b34 <SIM_Send_Command>
	SIM_Receive_Response(response, 5000);
 80011a4:	f107 031c 	add.w	r3, r7, #28
 80011a8:	f241 3188 	movw	r1, #5000	@ 0x1388
 80011ac:	4618      	mov	r0, r3
 80011ae:	f000 fced 	bl	8001b8c <SIM_Receive_Response>

    char* cclk_pos = strstr(response, "+CCLK: \"");
 80011b2:	f107 031c 	add.w	r3, r7, #28
 80011b6:	496d      	ldr	r1, [pc, #436]	@ (800136c <Get_DateTime_From_Network+0x1f4>)
 80011b8:	4618      	mov	r0, r3
 80011ba:	f015 f9a5 	bl	8016508 <strstr>
 80011be:	f8c7 0084 	str.w	r0, [r7, #132]	@ 0x84
    if (cclk_pos == NULL)
 80011c2:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80011c6:	2b00      	cmp	r3, #0
 80011c8:	d101      	bne.n	80011ce <Get_DateTime_From_Network+0x56>
	{
        return 0;
 80011ca:	2300      	movs	r3, #0
 80011cc:	e0c8      	b.n	8001360 <Get_DateTime_From_Network+0x1e8>
    }

    char* time_start = cclk_pos + 8;
 80011ce:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80011d2:	3308      	adds	r3, #8
 80011d4:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80

    if (strlen(time_start) < 17)
 80011d8:	f8d7 0080 	ldr.w	r0, [r7, #128]	@ 0x80
 80011dc:	f7ff f802 	bl	80001e4 <strlen>
 80011e0:	4603      	mov	r3, r0
 80011e2:	2b10      	cmp	r3, #16
 80011e4:	d801      	bhi.n	80011ea <Get_DateTime_From_Network+0x72>
	{
		return 0;
 80011e6:	2300      	movs	r3, #0
 80011e8:	e0ba      	b.n	8001360 <Get_DateTime_From_Network+0x1e8>
	}

	sDate.Year = (time_start[0] - '0') * 10 + (time_start[1] - '0');
 80011ea:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80011ee:	781b      	ldrb	r3, [r3, #0]
 80011f0:	3b30      	subs	r3, #48	@ 0x30
 80011f2:	b2db      	uxtb	r3, r3
 80011f4:	461a      	mov	r2, r3
 80011f6:	0092      	lsls	r2, r2, #2
 80011f8:	4413      	add	r3, r2
 80011fa:	005b      	lsls	r3, r3, #1
 80011fc:	b2da      	uxtb	r2, r3
 80011fe:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8001202:	3301      	adds	r3, #1
 8001204:	781b      	ldrb	r3, [r3, #0]
 8001206:	4413      	add	r3, r2
 8001208:	b2db      	uxtb	r3, r3
 800120a:	3b30      	subs	r3, #48	@ 0x30
 800120c:	b2db      	uxtb	r3, r3
 800120e:	76fb      	strb	r3, [r7, #27]
	sDate.Month = (time_start[3] - '0') * 10 + (time_start[4] - '0');
 8001210:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8001214:	3303      	adds	r3, #3
 8001216:	781b      	ldrb	r3, [r3, #0]
 8001218:	3b30      	subs	r3, #48	@ 0x30
 800121a:	b2db      	uxtb	r3, r3
 800121c:	461a      	mov	r2, r3
 800121e:	0092      	lsls	r2, r2, #2
 8001220:	4413      	add	r3, r2
 8001222:	005b      	lsls	r3, r3, #1
 8001224:	b2da      	uxtb	r2, r3
 8001226:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800122a:	3304      	adds	r3, #4
 800122c:	781b      	ldrb	r3, [r3, #0]
 800122e:	4413      	add	r3, r2
 8001230:	b2db      	uxtb	r3, r3
 8001232:	3b30      	subs	r3, #48	@ 0x30
 8001234:	b2db      	uxtb	r3, r3
 8001236:	767b      	strb	r3, [r7, #25]
	sDate.Date = (time_start[6] - '0') * 10 + (time_start[7] - '0');
 8001238:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800123c:	3306      	adds	r3, #6
 800123e:	781b      	ldrb	r3, [r3, #0]
 8001240:	3b30      	subs	r3, #48	@ 0x30
 8001242:	b2db      	uxtb	r3, r3
 8001244:	461a      	mov	r2, r3
 8001246:	0092      	lsls	r2, r2, #2
 8001248:	4413      	add	r3, r2
 800124a:	005b      	lsls	r3, r3, #1
 800124c:	b2da      	uxtb	r2, r3
 800124e:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8001252:	3307      	adds	r3, #7
 8001254:	781b      	ldrb	r3, [r3, #0]
 8001256:	4413      	add	r3, r2
 8001258:	b2db      	uxtb	r3, r3
 800125a:	3b30      	subs	r3, #48	@ 0x30
 800125c:	b2db      	uxtb	r3, r3
 800125e:	76bb      	strb	r3, [r7, #26]

	sTime.Hours = (time_start[9] - '0') * 10 + (time_start[10] - '0');
 8001260:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8001264:	3309      	adds	r3, #9
 8001266:	781b      	ldrb	r3, [r3, #0]
 8001268:	3b30      	subs	r3, #48	@ 0x30
 800126a:	b2db      	uxtb	r3, r3
 800126c:	461a      	mov	r2, r3
 800126e:	0092      	lsls	r2, r2, #2
 8001270:	4413      	add	r3, r2
 8001272:	005b      	lsls	r3, r3, #1
 8001274:	b2da      	uxtb	r2, r3
 8001276:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800127a:	330a      	adds	r3, #10
 800127c:	781b      	ldrb	r3, [r3, #0]
 800127e:	4413      	add	r3, r2
 8001280:	b2db      	uxtb	r3, r3
 8001282:	3b30      	subs	r3, #48	@ 0x30
 8001284:	b2db      	uxtb	r3, r3
 8001286:	713b      	strb	r3, [r7, #4]
	sTime.Minutes = (time_start[12] - '0') * 10 + (time_start[13] - '0');
 8001288:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800128c:	330c      	adds	r3, #12
 800128e:	781b      	ldrb	r3, [r3, #0]
 8001290:	3b30      	subs	r3, #48	@ 0x30
 8001292:	b2db      	uxtb	r3, r3
 8001294:	461a      	mov	r2, r3
 8001296:	0092      	lsls	r2, r2, #2
 8001298:	4413      	add	r3, r2
 800129a:	005b      	lsls	r3, r3, #1
 800129c:	b2da      	uxtb	r2, r3
 800129e:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80012a2:	330d      	adds	r3, #13
 80012a4:	781b      	ldrb	r3, [r3, #0]
 80012a6:	4413      	add	r3, r2
 80012a8:	b2db      	uxtb	r3, r3
 80012aa:	3b30      	subs	r3, #48	@ 0x30
 80012ac:	b2db      	uxtb	r3, r3
 80012ae:	717b      	strb	r3, [r7, #5]
	sTime.Seconds = (time_start[15] - '0') * 10 + (time_start[16] - '0');
 80012b0:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80012b4:	330f      	adds	r3, #15
 80012b6:	781b      	ldrb	r3, [r3, #0]
 80012b8:	3b30      	subs	r3, #48	@ 0x30
 80012ba:	b2db      	uxtb	r3, r3
 80012bc:	461a      	mov	r2, r3
 80012be:	0092      	lsls	r2, r2, #2
 80012c0:	4413      	add	r3, r2
 80012c2:	005b      	lsls	r3, r3, #1
 80012c4:	b2da      	uxtb	r2, r3
 80012c6:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80012ca:	3310      	adds	r3, #16
 80012cc:	781b      	ldrb	r3, [r3, #0]
 80012ce:	4413      	add	r3, r2
 80012d0:	b2db      	uxtb	r3, r3
 80012d2:	3b30      	subs	r3, #48	@ 0x30
 80012d4:	b2db      	uxtb	r3, r3
 80012d6:	71bb      	strb	r3, [r7, #6]

	if (sDate.Month < 1 || sDate.Month > 12 ||
 80012d8:	7e7b      	ldrb	r3, [r7, #25]
 80012da:	2b00      	cmp	r3, #0
 80012dc:	d011      	beq.n	8001302 <Get_DateTime_From_Network+0x18a>
 80012de:	7e7b      	ldrb	r3, [r7, #25]
 80012e0:	2b0c      	cmp	r3, #12
 80012e2:	d80e      	bhi.n	8001302 <Get_DateTime_From_Network+0x18a>
        sDate.Date < 1 || sDate.Date > 31 ||
 80012e4:	7ebb      	ldrb	r3, [r7, #26]
	if (sDate.Month < 1 || sDate.Month > 12 ||
 80012e6:	2b00      	cmp	r3, #0
 80012e8:	d00b      	beq.n	8001302 <Get_DateTime_From_Network+0x18a>
        sDate.Date < 1 || sDate.Date > 31 ||
 80012ea:	7ebb      	ldrb	r3, [r7, #26]
 80012ec:	2b1f      	cmp	r3, #31
 80012ee:	d808      	bhi.n	8001302 <Get_DateTime_From_Network+0x18a>
        sTime.Hours > 23 || sTime.Minutes > 59 || sTime.Seconds > 59) {
 80012f0:	793b      	ldrb	r3, [r7, #4]
        sDate.Date < 1 || sDate.Date > 31 ||
 80012f2:	2b17      	cmp	r3, #23
 80012f4:	d805      	bhi.n	8001302 <Get_DateTime_From_Network+0x18a>
        sTime.Hours > 23 || sTime.Minutes > 59 || sTime.Seconds > 59) {
 80012f6:	797b      	ldrb	r3, [r7, #5]
 80012f8:	2b3b      	cmp	r3, #59	@ 0x3b
 80012fa:	d802      	bhi.n	8001302 <Get_DateTime_From_Network+0x18a>
 80012fc:	79bb      	ldrb	r3, [r7, #6]
 80012fe:	2b3b      	cmp	r3, #59	@ 0x3b
 8001300:	d901      	bls.n	8001306 <Get_DateTime_From_Network+0x18e>
        return 0;
 8001302:	2300      	movs	r3, #0
 8001304:	e02c      	b.n	8001360 <Get_DateTime_From_Network+0x1e8>
    }

	sDate.WeekDay = Calculate_Weekday(sDate.Year + 2000, sDate.Month, sDate.Date);
 8001306:	7efb      	ldrb	r3, [r7, #27]
 8001308:	f503 63fa 	add.w	r3, r3, #2000	@ 0x7d0
 800130c:	b29b      	uxth	r3, r3
 800130e:	7e79      	ldrb	r1, [r7, #25]
 8001310:	7eba      	ldrb	r2, [r7, #26]
 8001312:	4618      	mov	r0, r3
 8001314:	f000 f874 	bl	8001400 <Calculate_Weekday>
 8001318:	4603      	mov	r3, r0
 800131a:	763b      	strb	r3, [r7, #24]
	sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 800131c:	2300      	movs	r3, #0
 800131e:	613b      	str	r3, [r7, #16]
	sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8001320:	2300      	movs	r3, #0
 8001322:	617b      	str	r3, [r7, #20]

	HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN);
 8001324:	f107 0318 	add.w	r3, r7, #24
 8001328:	2200      	movs	r2, #0
 800132a:	4619      	mov	r1, r3
 800132c:	4810      	ldr	r0, [pc, #64]	@ (8001370 <Get_DateTime_From_Network+0x1f8>)
 800132e:	f010 f8e2 	bl	80114f6 <HAL_RTC_SetDate>
	HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN);
 8001332:	1d3b      	adds	r3, r7, #4
 8001334:	2200      	movs	r2, #0
 8001336:	4619      	mov	r1, r3
 8001338:	480d      	ldr	r0, [pc, #52]	@ (8001370 <Get_DateTime_From_Network+0x1f8>)
 800133a:	f00f ffe3 	bl	8011304 <HAL_RTC_SetTime>

    sys.onDate = sDate;
 800133e:	4b0d      	ldr	r3, [pc, #52]	@ (8001374 <Get_DateTime_From_Network+0x1fc>)
 8001340:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001344:	461a      	mov	r2, r3
 8001346:	69bb      	ldr	r3, [r7, #24]
 8001348:	6413      	str	r3, [r2, #64]	@ 0x40
    sys.onTime = sTime;
 800134a:	4b0a      	ldr	r3, [pc, #40]	@ (8001374 <Get_DateTime_From_Network+0x1fc>)
 800134c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001350:	f103 0444 	add.w	r4, r3, #68	@ 0x44
 8001354:	1d3d      	adds	r5, r7, #4
 8001356:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001358:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800135a:	682b      	ldr	r3, [r5, #0]
 800135c:	6023      	str	r3, [r4, #0]
    
	return 1;
 800135e:	2301      	movs	r3, #1
}
 8001360:	4618      	mov	r0, r3
 8001362:	3788      	adds	r7, #136	@ 0x88
 8001364:	46bd      	mov	sp, r7
 8001366:	bdb0      	pop	{r4, r5, r7, pc}
 8001368:	0801764c 	.word	0x0801764c
 800136c:	08017658 	.word	0x08017658
 8001370:	20000218 	.word	0x20000218
 8001374:	200005d8 	.word	0x200005d8

08001378 <Set_Default_DateTime>:

/*-----DATA E ORA DI DEFAULT 1/1/2020 00:00:00-----*/
void Set_Default_DateTime(void)
{
 8001378:	b5b0      	push	{r4, r5, r7, lr}
 800137a:	b086      	sub	sp, #24
 800137c:	af00      	add	r7, sp, #0
    RTC_DateTypeDef sDate = {0};
 800137e:	2300      	movs	r3, #0
 8001380:	617b      	str	r3, [r7, #20]
    RTC_TimeTypeDef sTime = {0};
 8001382:	463b      	mov	r3, r7
 8001384:	2200      	movs	r2, #0
 8001386:	601a      	str	r2, [r3, #0]
 8001388:	605a      	str	r2, [r3, #4]
 800138a:	609a      	str	r2, [r3, #8]
 800138c:	60da      	str	r2, [r3, #12]
 800138e:	611a      	str	r2, [r3, #16]

    // Default: 01/01/2020 00:00:00
    sDate.Year = 20;  // 2020
 8001390:	2314      	movs	r3, #20
 8001392:	75fb      	strb	r3, [r7, #23]
    sDate.Month = RTC_MONTH_JANUARY;
 8001394:	2301      	movs	r3, #1
 8001396:	757b      	strb	r3, [r7, #21]
    sDate.Date = 1;
 8001398:	2301      	movs	r3, #1
 800139a:	75bb      	strb	r3, [r7, #22]
    sDate.WeekDay = RTC_WEEKDAY_WEDNESDAY; // 1 Jan 2020 era mercoledì
 800139c:	2303      	movs	r3, #3
 800139e:	753b      	strb	r3, [r7, #20]

    sTime.Hours = 0;
 80013a0:	2300      	movs	r3, #0
 80013a2:	703b      	strb	r3, [r7, #0]
    sTime.Minutes = 0;
 80013a4:	2300      	movs	r3, #0
 80013a6:	707b      	strb	r3, [r7, #1]
    sTime.Seconds = 0;
 80013a8:	2300      	movs	r3, #0
 80013aa:	70bb      	strb	r3, [r7, #2]
    sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 80013ac:	2300      	movs	r3, #0
 80013ae:	60fb      	str	r3, [r7, #12]
    sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 80013b0:	2300      	movs	r3, #0
 80013b2:	613b      	str	r3, [r7, #16]

    HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN);
 80013b4:	f107 0314 	add.w	r3, r7, #20
 80013b8:	2200      	movs	r2, #0
 80013ba:	4619      	mov	r1, r3
 80013bc:	480e      	ldr	r0, [pc, #56]	@ (80013f8 <Set_Default_DateTime+0x80>)
 80013be:	f010 f89a 	bl	80114f6 <HAL_RTC_SetDate>
    HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN);
 80013c2:	463b      	mov	r3, r7
 80013c4:	2200      	movs	r2, #0
 80013c6:	4619      	mov	r1, r3
 80013c8:	480b      	ldr	r0, [pc, #44]	@ (80013f8 <Set_Default_DateTime+0x80>)
 80013ca:	f00f ff9b 	bl	8011304 <HAL_RTC_SetTime>

    sys.onDate = sDate;
 80013ce:	4b0b      	ldr	r3, [pc, #44]	@ (80013fc <Set_Default_DateTime+0x84>)
 80013d0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80013d4:	461a      	mov	r2, r3
 80013d6:	697b      	ldr	r3, [r7, #20]
 80013d8:	6413      	str	r3, [r2, #64]	@ 0x40
    sys.onTime = sTime;
 80013da:	4b08      	ldr	r3, [pc, #32]	@ (80013fc <Set_Default_DateTime+0x84>)
 80013dc:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80013e0:	f103 0444 	add.w	r4, r3, #68	@ 0x44
 80013e4:	463d      	mov	r5, r7
 80013e6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80013e8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80013ea:	682b      	ldr	r3, [r5, #0]
 80013ec:	6023      	str	r3, [r4, #0]
}
 80013ee:	bf00      	nop
 80013f0:	3718      	adds	r7, #24
 80013f2:	46bd      	mov	sp, r7
 80013f4:	bdb0      	pop	{r4, r5, r7, pc}
 80013f6:	bf00      	nop
 80013f8:	20000218 	.word	0x20000218
 80013fc:	200005d8 	.word	0x200005d8

08001400 <Calculate_Weekday>:

/*-----CALCOLO GIORNO SETTIMANA-----*/
uint8_t Calculate_Weekday(uint16_t year, uint8_t month, uint8_t day)
{
 8001400:	b480      	push	{r7}
 8001402:	b085      	sub	sp, #20
 8001404:	af00      	add	r7, sp, #0
 8001406:	4603      	mov	r3, r0
 8001408:	80fb      	strh	r3, [r7, #6]
 800140a:	460b      	mov	r3, r1
 800140c:	717b      	strb	r3, [r7, #5]
 800140e:	4613      	mov	r3, r2
 8001410:	713b      	strb	r3, [r7, #4]
    // Algoritmo di Zeller per calcolo giorno settimana
    if (month < 3) {
 8001412:	797b      	ldrb	r3, [r7, #5]
 8001414:	2b02      	cmp	r3, #2
 8001416:	d805      	bhi.n	8001424 <Calculate_Weekday+0x24>
        month += 12;
 8001418:	797b      	ldrb	r3, [r7, #5]
 800141a:	330c      	adds	r3, #12
 800141c:	717b      	strb	r3, [r7, #5]
        year--;
 800141e:	88fb      	ldrh	r3, [r7, #6]
 8001420:	3b01      	subs	r3, #1
 8001422:	80fb      	strh	r3, [r7, #6]
    }
    uint8_t zeller_day = (day + ((13 * (month + 1)) / 5) + year + (year / 4) - (year / 100) + (year / 400)) % 7;
 8001424:	7939      	ldrb	r1, [r7, #4]
 8001426:	797b      	ldrb	r3, [r7, #5]
 8001428:	1c5a      	adds	r2, r3, #1
 800142a:	4613      	mov	r3, r2
 800142c:	005b      	lsls	r3, r3, #1
 800142e:	4413      	add	r3, r2
 8001430:	009b      	lsls	r3, r3, #2
 8001432:	4413      	add	r3, r2
 8001434:	4a1e      	ldr	r2, [pc, #120]	@ (80014b0 <Calculate_Weekday+0xb0>)
 8001436:	fb82 0203 	smull	r0, r2, r2, r3
 800143a:	1052      	asrs	r2, r2, #1
 800143c:	17db      	asrs	r3, r3, #31
 800143e:	1ad3      	subs	r3, r2, r3
 8001440:	18ca      	adds	r2, r1, r3
 8001442:	88fb      	ldrh	r3, [r7, #6]
 8001444:	4413      	add	r3, r2
 8001446:	88fa      	ldrh	r2, [r7, #6]
 8001448:	0892      	lsrs	r2, r2, #2
 800144a:	b292      	uxth	r2, r2
 800144c:	4413      	add	r3, r2
 800144e:	88fa      	ldrh	r2, [r7, #6]
 8001450:	4918      	ldr	r1, [pc, #96]	@ (80014b4 <Calculate_Weekday+0xb4>)
 8001452:	fba1 1202 	umull	r1, r2, r1, r2
 8001456:	0952      	lsrs	r2, r2, #5
 8001458:	b292      	uxth	r2, r2
 800145a:	1a9b      	subs	r3, r3, r2
 800145c:	88fa      	ldrh	r2, [r7, #6]
 800145e:	4915      	ldr	r1, [pc, #84]	@ (80014b4 <Calculate_Weekday+0xb4>)
 8001460:	fba1 1202 	umull	r1, r2, r1, r2
 8001464:	09d2      	lsrs	r2, r2, #7
 8001466:	b292      	uxth	r2, r2
 8001468:	441a      	add	r2, r3
 800146a:	4b13      	ldr	r3, [pc, #76]	@ (80014b8 <Calculate_Weekday+0xb8>)
 800146c:	fb83 1302 	smull	r1, r3, r3, r2
 8001470:	4413      	add	r3, r2
 8001472:	1099      	asrs	r1, r3, #2
 8001474:	17d3      	asrs	r3, r2, #31
 8001476:	1ac9      	subs	r1, r1, r3
 8001478:	460b      	mov	r3, r1
 800147a:	00db      	lsls	r3, r3, #3
 800147c:	1a5b      	subs	r3, r3, r1
 800147e:	1ad1      	subs	r1, r2, r3
 8001480:	460b      	mov	r3, r1
 8001482:	73fb      	strb	r3, [r7, #15]

    uint8_t hal_weekday_map[] = {RTC_WEEKDAY_SATURDAY, RTC_WEEKDAY_SUNDAY, RTC_WEEKDAY_MONDAY,
 8001484:	4a0d      	ldr	r2, [pc, #52]	@ (80014bc <Calculate_Weekday+0xbc>)
 8001486:	f107 0308 	add.w	r3, r7, #8
 800148a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800148e:	6018      	str	r0, [r3, #0]
 8001490:	3304      	adds	r3, #4
 8001492:	8019      	strh	r1, [r3, #0]
 8001494:	3302      	adds	r3, #2
 8001496:	0c0a      	lsrs	r2, r1, #16
 8001498:	701a      	strb	r2, [r3, #0]
                                 RTC_WEEKDAY_TUESDAY, RTC_WEEKDAY_WEDNESDAY, RTC_WEEKDAY_THURSDAY, RTC_WEEKDAY_FRIDAY};

    return hal_weekday_map[zeller_day];
 800149a:	7bfb      	ldrb	r3, [r7, #15]
 800149c:	3310      	adds	r3, #16
 800149e:	443b      	add	r3, r7
 80014a0:	f813 3c08 	ldrb.w	r3, [r3, #-8]
}
 80014a4:	4618      	mov	r0, r3
 80014a6:	3714      	adds	r7, #20
 80014a8:	46bd      	mov	sp, r7
 80014aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ae:	4770      	bx	lr
 80014b0:	66666667 	.word	0x66666667
 80014b4:	51eb851f 	.word	0x51eb851f
 80014b8:	92492493 	.word	0x92492493
 80014bc:	08017664 	.word	0x08017664

080014c0 <SIM_Init>:
#include "process.h"
#include "leds.h"

/*------INIZIALIZZAZIONE DEL MODULO LTE------*/
int SIM_Init(void)
{
 80014c0:	b580      	push	{r7, lr}
 80014c2:	f5ad 7d08 	sub.w	sp, sp, #544	@ 0x220
 80014c6:	af00      	add	r7, sp, #0
	char command[256];
	char response[256];
	sprintf(sys.apn, "iot.1nce.net");
 80014c8:	49c5      	ldr	r1, [pc, #788]	@ (80017e0 <SIM_Init+0x320>)
 80014ca:	48c6      	ldr	r0, [pc, #792]	@ (80017e4 <SIM_Init+0x324>)
 80014cc:	f014 ff82 	bl	80163d4 <siprintf>
	strcpy(sys.TCP.IP_address, config.tcp_IPaddress);
 80014d0:	49c5      	ldr	r1, [pc, #788]	@ (80017e8 <SIM_Init+0x328>)
 80014d2:	48c6      	ldr	r0, [pc, #792]	@ (80017ec <SIM_Init+0x32c>)
 80014d4:	f015 f85a 	bl	801658c <strcpy>
	strcpy(sys.TCP.Port, config.tcp_Port);
 80014d8:	49c5      	ldr	r1, [pc, #788]	@ (80017f0 <SIM_Init+0x330>)
 80014da:	48c6      	ldr	r0, [pc, #792]	@ (80017f4 <SIM_Init+0x334>)
 80014dc:	f015 f856 	bl	801658c <strcpy>
	sprintf(sys.TCP.IP_address, "a");
 80014e0:	49c5      	ldr	r1, [pc, #788]	@ (80017f8 <SIM_Init+0x338>)
 80014e2:	48c2      	ldr	r0, [pc, #776]	@ (80017ec <SIM_Init+0x32c>)
 80014e4:	f014 ff76 	bl	80163d4 <siprintf>
	sprintf(sys.TCP.Port, "a");
 80014e8:	49c3      	ldr	r1, [pc, #780]	@ (80017f8 <SIM_Init+0x338>)
 80014ea:	48c2      	ldr	r0, [pc, #776]	@ (80017f4 <SIM_Init+0x334>)
 80014ec:	f014 ff72 	bl	80163d4 <siprintf>

	memset(response, 0, sizeof(response));
 80014f0:	f107 0314 	add.w	r3, r7, #20
 80014f4:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80014f8:	2100      	movs	r1, #0
 80014fa:	4618      	mov	r0, r3
 80014fc:	f014 ffca 	bl	8016494 <memset>

	if(HAL_GPIO_ReadPin(LTE_STATUS_GPIO_Port, LTE_STATUS_Pin) != GPIO_PIN_SET)
 8001500:	2108      	movs	r1, #8
 8001502:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001506:	f00d f8db 	bl	800e6c0 <HAL_GPIO_ReadPin>
 800150a:	4603      	mov	r3, r0
 800150c:	2b01      	cmp	r3, #1
 800150e:	d00a      	beq.n	8001526 <SIM_Init+0x66>
	{
		SIM_Power_On();
 8001510:	f000 fae4 	bl	8001adc <SIM_Power_On>
		while(HAL_GPIO_ReadPin(LTE_STATUS_GPIO_Port, LTE_STATUS_Pin) != GPIO_PIN_SET);            //Attesa accensione modulo
 8001514:	bf00      	nop
 8001516:	2108      	movs	r1, #8
 8001518:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800151c:	f00d f8d0 	bl	800e6c0 <HAL_GPIO_ReadPin>
 8001520:	4603      	mov	r3, r0
 8001522:	2b01      	cmp	r3, #1
 8001524:	d1f7      	bne.n	8001516 <SIM_Init+0x56>
		
	}

	SIM_Send_Command("AT\r");                                                                     //Verifica comunicazione
 8001526:	48b5      	ldr	r0, [pc, #724]	@ (80017fc <SIM_Init+0x33c>)
 8001528:	f000 fb04 	bl	8001b34 <SIM_Send_Command>
	SIM_Receive_Response(response, 2000);
 800152c:	f107 0314 	add.w	r3, r7, #20
 8001530:	f44f 61fa 	mov.w	r1, #2000	@ 0x7d0
 8001534:	4618      	mov	r0, r3
 8001536:	f000 fb29 	bl	8001b8c <SIM_Receive_Response>
	if(strstr(response, "OK") == NULL)
 800153a:	f107 0314 	add.w	r3, r7, #20
 800153e:	49b0      	ldr	r1, [pc, #704]	@ (8001800 <SIM_Init+0x340>)
 8001540:	4618      	mov	r0, r3
 8001542:	f014 ffe1 	bl	8016508 <strstr>
 8001546:	4603      	mov	r3, r0
 8001548:	2b00      	cmp	r3, #0
 800154a:	d11c      	bne.n	8001586 <SIM_Init+0xc6>
	{
		if(huart1.Init.BaudRate != 921600)
 800154c:	4bad      	ldr	r3, [pc, #692]	@ (8001804 <SIM_Init+0x344>)
 800154e:	685b      	ldr	r3, [r3, #4]
 8001550:	f5b3 2f61 	cmp.w	r3, #921600	@ 0xe1000
 8001554:	d00d      	beq.n	8001572 <SIM_Init+0xb2>
		{
			huart1.Init.BaudRate = 921600;
 8001556:	4bab      	ldr	r3, [pc, #684]	@ (8001804 <SIM_Init+0x344>)
 8001558:	f44f 2261 	mov.w	r2, #921600	@ 0xe1000
 800155c:	605a      	str	r2, [r3, #4]
			HAL_UART_Init(SIM_UART);
 800155e:	48a9      	ldr	r0, [pc, #676]	@ (8001804 <SIM_Init+0x344>)
 8001560:	f013 fb4c 	bl	8014bfc <HAL_UART_Init>
			SIM_Send_Command("AT+IPR=921600\r");               						              //Baudrate a 921600
 8001564:	48a8      	ldr	r0, [pc, #672]	@ (8001808 <SIM_Init+0x348>)
 8001566:	f000 fae5 	bl	8001b34 <SIM_Send_Command>
			SIM_Wait_Response("OK");
 800156a:	48a5      	ldr	r0, [pc, #660]	@ (8001800 <SIM_Init+0x340>)
 800156c:	f000 fe76 	bl	800225c <SIM_Wait_Response>
 8001570:	e009      	b.n	8001586 <SIM_Init+0xc6>
		}
		else
		{
			huart1.Init.BaudRate = 38400;
 8001572:	4ba4      	ldr	r3, [pc, #656]	@ (8001804 <SIM_Init+0x344>)
 8001574:	f44f 4216 	mov.w	r2, #38400	@ 0x9600
 8001578:	605a      	str	r2, [r3, #4]
			HAL_UART_Init(SIM_UART);
 800157a:	48a2      	ldr	r0, [pc, #648]	@ (8001804 <SIM_Init+0x344>)
 800157c:	f013 fb3e 	bl	8014bfc <HAL_UART_Init>
			return -1;
 8001580:	f04f 33ff 	mov.w	r3, #4294967295
 8001584:	e284      	b.n	8001a90 <SIM_Init+0x5d0>
		}

	}

	huart1.Init.BaudRate = 921600;
 8001586:	4b9f      	ldr	r3, [pc, #636]	@ (8001804 <SIM_Init+0x344>)
 8001588:	f44f 2261 	mov.w	r2, #921600	@ 0xe1000
 800158c:	605a      	str	r2, [r3, #4]
	HAL_UART_Init(SIM_UART);
 800158e:	489d      	ldr	r0, [pc, #628]	@ (8001804 <SIM_Init+0x344>)
 8001590:	f013 fb34 	bl	8014bfc <HAL_UART_Init>

	SIM_Send_Command("ATE0\r");                                                                   //Non verbose mode
 8001594:	489d      	ldr	r0, [pc, #628]	@ (800180c <SIM_Init+0x34c>)
 8001596:	f000 facd 	bl	8001b34 <SIM_Send_Command>
	SIM_Wait_Response("OK");
 800159a:	4899      	ldr	r0, [pc, #612]	@ (8001800 <SIM_Init+0x340>)
 800159c:	f000 fe5e 	bl	800225c <SIM_Wait_Response>


	SIM_Send_Command("AT+CFUN=1\r");                                                              //Full functionality
 80015a0:	489b      	ldr	r0, [pc, #620]	@ (8001810 <SIM_Init+0x350>)
 80015a2:	f000 fac7 	bl	8001b34 <SIM_Send_Command>
	if(SIM_Wait_Response("OK") != HAL_OK) return -1;
 80015a6:	4896      	ldr	r0, [pc, #600]	@ (8001800 <SIM_Init+0x340>)
 80015a8:	f000 fe58 	bl	800225c <SIM_Wait_Response>
 80015ac:	4603      	mov	r3, r0
 80015ae:	2b00      	cmp	r3, #0
 80015b0:	d002      	beq.n	80015b8 <SIM_Init+0xf8>
 80015b2:	f04f 33ff 	mov.w	r3, #4294967295
 80015b6:	e26b      	b.n	8001a90 <SIM_Init+0x5d0>

	SIM_Send_Command("AT+CNMP=38\r");                                                             //Modalità solo LTE o NB-IoT
 80015b8:	4896      	ldr	r0, [pc, #600]	@ (8001814 <SIM_Init+0x354>)
 80015ba:	f000 fabb 	bl	8001b34 <SIM_Send_Command>
	if(SIM_Wait_Response("OK") != HAL_OK) return -1;
 80015be:	4890      	ldr	r0, [pc, #576]	@ (8001800 <SIM_Init+0x340>)
 80015c0:	f000 fe4c 	bl	800225c <SIM_Wait_Response>
 80015c4:	4603      	mov	r3, r0
 80015c6:	2b00      	cmp	r3, #0
 80015c8:	d002      	beq.n	80015d0 <SIM_Init+0x110>
 80015ca:	f04f 33ff 	mov.w	r3, #4294967295
 80015ce:	e25f      	b.n	8001a90 <SIM_Init+0x5d0>

	SIM_Send_Command("AT+CMNB=1\r");                                                              //1=CAT-M, 2=NB-IoT, 3=Automatico
 80015d0:	4891      	ldr	r0, [pc, #580]	@ (8001818 <SIM_Init+0x358>)
 80015d2:	f000 faaf 	bl	8001b34 <SIM_Send_Command>
	if(SIM_Wait_Response("OK") != HAL_OK) return -1;
 80015d6:	488a      	ldr	r0, [pc, #552]	@ (8001800 <SIM_Init+0x340>)
 80015d8:	f000 fe40 	bl	800225c <SIM_Wait_Response>
 80015dc:	4603      	mov	r3, r0
 80015de:	2b00      	cmp	r3, #0
 80015e0:	d002      	beq.n	80015e8 <SIM_Init+0x128>
 80015e2:	f04f 33ff 	mov.w	r3, #4294967295
 80015e6:	e253      	b.n	8001a90 <SIM_Init+0x5d0>

	SIM_Send_Command("AT+CPIN?\r");																  //Controllo PIN
 80015e8:	488c      	ldr	r0, [pc, #560]	@ (800181c <SIM_Init+0x35c>)
 80015ea:	f000 faa3 	bl	8001b34 <SIM_Send_Command>
	SIM_Receive_Response(response, 5000);
 80015ee:	f107 0314 	add.w	r3, r7, #20
 80015f2:	f241 3188 	movw	r1, #5000	@ 0x1388
 80015f6:	4618      	mov	r0, r3
 80015f8:	f000 fac8 	bl	8001b8c <SIM_Receive_Response>
	if(strstr(response, "READY") == NULL)
 80015fc:	f107 0314 	add.w	r3, r7, #20
 8001600:	4987      	ldr	r1, [pc, #540]	@ (8001820 <SIM_Init+0x360>)
 8001602:	4618      	mov	r0, r3
 8001604:	f014 ff80 	bl	8016508 <strstr>
 8001608:	4603      	mov	r3, r0
 800160a:	2b00      	cmp	r3, #0
 800160c:	d11e      	bne.n	800164c <SIM_Init+0x18c>
	{
		if(strstr(response, "SIM PIN") != NULL)
 800160e:	f107 0314 	add.w	r3, r7, #20
 8001612:	4984      	ldr	r1, [pc, #528]	@ (8001824 <SIM_Init+0x364>)
 8001614:	4618      	mov	r0, r3
 8001616:	f014 ff77 	bl	8016508 <strstr>
 800161a:	4603      	mov	r3, r0
 800161c:	2b00      	cmp	r3, #0
 800161e:	d012      	beq.n	8001646 <SIM_Init+0x186>
		{
			SIM_Send_Command("AT+CPIN=0000\r");
 8001620:	4881      	ldr	r0, [pc, #516]	@ (8001828 <SIM_Init+0x368>)
 8001622:	f000 fa87 	bl	8001b34 <SIM_Send_Command>
			SIM_Receive_Response(response, 5000);
 8001626:	f107 0314 	add.w	r3, r7, #20
 800162a:	f241 3188 	movw	r1, #5000	@ 0x1388
 800162e:	4618      	mov	r0, r3
 8001630:	f000 faac 	bl	8001b8c <SIM_Receive_Response>
			if(SIM_Wait_Response("OK") != HAL_OK) return -1;
 8001634:	4872      	ldr	r0, [pc, #456]	@ (8001800 <SIM_Init+0x340>)
 8001636:	f000 fe11 	bl	800225c <SIM_Wait_Response>
 800163a:	4603      	mov	r3, r0
 800163c:	2b00      	cmp	r3, #0
 800163e:	d005      	beq.n	800164c <SIM_Init+0x18c>
 8001640:	f04f 33ff 	mov.w	r3, #4294967295
 8001644:	e224      	b.n	8001a90 <SIM_Init+0x5d0>
		}
		else
		{
			return -1;
 8001646:	f04f 33ff 	mov.w	r3, #4294967295
 800164a:	e221      	b.n	8001a90 <SIM_Init+0x5d0>
		}
	}

	SIM_Send_Command("AT+CSQ\r");																  //Controllo qualità connessione
 800164c:	4877      	ldr	r0, [pc, #476]	@ (800182c <SIM_Init+0x36c>)
 800164e:	f000 fa71 	bl	8001b34 <SIM_Send_Command>
	SIM_Receive_Response(response, 5000);
 8001652:	f107 0314 	add.w	r3, r7, #20
 8001656:	f241 3188 	movw	r1, #5000	@ 0x1388
 800165a:	4618      	mov	r0, r3
 800165c:	f000 fa96 	bl	8001b8c <SIM_Receive_Response>
	if(strstr(response, "+CSQ: 99") != NULL)
 8001660:	f107 0314 	add.w	r3, r7, #20
 8001664:	4972      	ldr	r1, [pc, #456]	@ (8001830 <SIM_Init+0x370>)
 8001666:	4618      	mov	r0, r3
 8001668:	f014 ff4e 	bl	8016508 <strstr>
 800166c:	4603      	mov	r3, r0
 800166e:	2b00      	cmp	r3, #0
 8001670:	d04d      	beq.n	800170e <SIM_Init+0x24e>
	{
		SIM_Send_Command("AT+CFUN=0\r");     //Reset RF
 8001672:	4870      	ldr	r0, [pc, #448]	@ (8001834 <SIM_Init+0x374>)
 8001674:	f000 fa5e 	bl	8001b34 <SIM_Send_Command>
		SIM_Wait_Response("OK");
 8001678:	4861      	ldr	r0, [pc, #388]	@ (8001800 <SIM_Init+0x340>)
 800167a:	f000 fdef 	bl	800225c <SIM_Wait_Response>
		HAL_Delay(2000);                    
 800167e:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8001682:	f009 fe4b 	bl	800b31c <HAL_Delay>
		SIM_Send_Command("AT+CFUN=1\r");     
 8001686:	4862      	ldr	r0, [pc, #392]	@ (8001810 <SIM_Init+0x350>)
 8001688:	f000 fa54 	bl	8001b34 <SIM_Send_Command>
		SIM_Wait_Response("OK");
 800168c:	485c      	ldr	r0, [pc, #368]	@ (8001800 <SIM_Init+0x340>)
 800168e:	f000 fde5 	bl	800225c <SIM_Wait_Response>
		HAL_Delay(3000);                     
 8001692:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 8001696:	f009 fe41 	bl	800b31c <HAL_Delay>

		SIM_Send_Command("AT+CSQ\r");
 800169a:	4864      	ldr	r0, [pc, #400]	@ (800182c <SIM_Init+0x36c>)
 800169c:	f000 fa4a 	bl	8001b34 <SIM_Send_Command>
		SIM_Receive_Response(response, 5000);
 80016a0:	f107 0314 	add.w	r3, r7, #20
 80016a4:	f241 3188 	movw	r1, #5000	@ 0x1388
 80016a8:	4618      	mov	r0, r3
 80016aa:	f000 fa6f 	bl	8001b8c <SIM_Receive_Response>
		
		if(strstr(response, "+CSQ: 99") != NULL)
 80016ae:	f107 0314 	add.w	r3, r7, #20
 80016b2:	495f      	ldr	r1, [pc, #380]	@ (8001830 <SIM_Init+0x370>)
 80016b4:	4618      	mov	r0, r3
 80016b6:	f014 ff27 	bl	8016508 <strstr>
 80016ba:	4603      	mov	r3, r0
 80016bc:	2b00      	cmp	r3, #0
 80016be:	d026      	beq.n	800170e <SIM_Init+0x24e>
		{
			SIM_Send_Command("AT+CFUN=1,1\r");   // Software reset
 80016c0:	485d      	ldr	r0, [pc, #372]	@ (8001838 <SIM_Init+0x378>)
 80016c2:	f000 fa37 	bl	8001b34 <SIM_Send_Command>
			HAL_Delay(12000);          
 80016c6:	f642 60e0 	movw	r0, #12000	@ 0x2ee0
 80016ca:	f009 fe27 	bl	800b31c <HAL_Delay>
			memset(response, 0, sizeof(response));           
 80016ce:	f107 0314 	add.w	r3, r7, #20
 80016d2:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80016d6:	2100      	movs	r1, #0
 80016d8:	4618      	mov	r0, r3
 80016da:	f014 fedb 	bl	8016494 <memset>
			
			SIM_Send_Command("AT+CSQ\r");
 80016de:	4853      	ldr	r0, [pc, #332]	@ (800182c <SIM_Init+0x36c>)
 80016e0:	f000 fa28 	bl	8001b34 <SIM_Send_Command>
			SIM_Receive_Response(response, 5000);
 80016e4:	f107 0314 	add.w	r3, r7, #20
 80016e8:	f241 3188 	movw	r1, #5000	@ 0x1388
 80016ec:	4618      	mov	r0, r3
 80016ee:	f000 fa4d 	bl	8001b8c <SIM_Receive_Response>
			if(strstr(response, "+CSQ: 99") != NULL)
 80016f2:	f107 0314 	add.w	r3, r7, #20
 80016f6:	494e      	ldr	r1, [pc, #312]	@ (8001830 <SIM_Init+0x370>)
 80016f8:	4618      	mov	r0, r3
 80016fa:	f014 ff05 	bl	8016508 <strstr>
 80016fe:	4603      	mov	r3, r0
 8001700:	2b00      	cmp	r3, #0
 8001702:	d004      	beq.n	800170e <SIM_Init+0x24e>
			{
				SIM_Power_Off();                 //Power cycle fisico
 8001704:	f000 fa00 	bl	8001b08 <SIM_Power_Off>
				return -1;
 8001708:	f04f 33ff 	mov.w	r3, #4294967295
 800170c:	e1c0      	b.n	8001a90 <SIM_Init+0x5d0>
			}
		}
	}

	SIM_Send_Command("AT+CEREG?\r");                                                              //Controllo registrazione alla rete
 800170e:	484b      	ldr	r0, [pc, #300]	@ (800183c <SIM_Init+0x37c>)
 8001710:	f000 fa10 	bl	8001b34 <SIM_Send_Command>
	SIM_Receive_Response(response, 5000);
 8001714:	f107 0314 	add.w	r3, r7, #20
 8001718:	f241 3188 	movw	r1, #5000	@ 0x1388
 800171c:	4618      	mov	r0, r3
 800171e:	f000 fa35 	bl	8001b8c <SIM_Receive_Response>
	char* cereg_ptr = strstr(response, "+CEREG:");
 8001722:	f107 0314 	add.w	r3, r7, #20
 8001726:	4946      	ldr	r1, [pc, #280]	@ (8001840 <SIM_Init+0x380>)
 8001728:	4618      	mov	r0, r3
 800172a:	f014 feed 	bl	8016508 <strstr>
 800172e:	f8c7 0218 	str.w	r0, [r7, #536]	@ 0x218
	int n = 0, stat_value = 0;
 8001732:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8001736:	f5a3 7304 	sub.w	r3, r3, #528	@ 0x210
 800173a:	2200      	movs	r2, #0
 800173c:	601a      	str	r2, [r3, #0]
 800173e:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8001742:	f5a3 7305 	sub.w	r3, r3, #532	@ 0x214
 8001746:	2200      	movs	r2, #0
 8001748:	601a      	str	r2, [r3, #0]
	if(cereg_ptr && sscanf(cereg_ptr, "+CEREG: %d,%d", &n, &stat_value) >= 2)
 800174a:	f8d7 3218 	ldr.w	r3, [r7, #536]	@ 0x218
 800174e:	2b00      	cmp	r3, #0
 8001750:	d01b      	beq.n	800178a <SIM_Init+0x2ca>
 8001752:	f107 030c 	add.w	r3, r7, #12
 8001756:	f107 0210 	add.w	r2, r7, #16
 800175a:	493a      	ldr	r1, [pc, #232]	@ (8001844 <SIM_Init+0x384>)
 800175c:	f8d7 0218 	ldr.w	r0, [r7, #536]	@ 0x218
 8001760:	f014 fe5a 	bl	8016418 <siscanf>
 8001764:	4603      	mov	r3, r0
 8001766:	2b01      	cmp	r3, #1
 8001768:	dd0f      	ble.n	800178a <SIM_Init+0x2ca>
	{
		if(stat_value == 1 || stat_value == 5)
 800176a:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 800176e:	f5a3 7305 	sub.w	r3, r3, #532	@ 0x214
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	2b01      	cmp	r3, #1
 8001776:	f000 80c8 	beq.w	800190a <SIM_Init+0x44a>
 800177a:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 800177e:	f5a3 7305 	sub.w	r3, r3, #532	@ 0x214
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	2b05      	cmp	r3, #5
 8001786:	f000 80c0 	beq.w	800190a <SIM_Init+0x44a>
		{
			goto APN;
		}
	}

	SIM_Send_Command("AT+COPS?\r");																  //Controllo modalità di connessione
 800178a:	482f      	ldr	r0, [pc, #188]	@ (8001848 <SIM_Init+0x388>)
 800178c:	f000 f9d2 	bl	8001b34 <SIM_Send_Command>
	SIM_Receive_Response(response, 5000);
 8001790:	f107 0314 	add.w	r3, r7, #20
 8001794:	f241 3188 	movw	r1, #5000	@ 0x1388
 8001798:	4618      	mov	r0, r3
 800179a:	f000 f9f7 	bl	8001b8c <SIM_Receive_Response>

	SIM_Send_Command("AT+COPS=?\r");
 800179e:	482b      	ldr	r0, [pc, #172]	@ (800184c <SIM_Init+0x38c>)
 80017a0:	f000 f9c8 	bl	8001b34 <SIM_Send_Command>
	SIM_Receive_Response(response, 120000);
 80017a4:	f107 0314 	add.w	r3, r7, #20
 80017a8:	4929      	ldr	r1, [pc, #164]	@ (8001850 <SIM_Init+0x390>)
 80017aa:	4618      	mov	r0, r3
 80017ac:	f000 f9ee 	bl	8001b8c <SIM_Receive_Response>

	SIM_Send_Command("AT+COPS=0,0\r");                                                            // Miglior operatore disponibile. In caso di operatore fisso: AT+COPS=1,2,\"22201\" ---- 22201: TIM,  22210: Vodafone
 80017b0:	4828      	ldr	r0, [pc, #160]	@ (8001854 <SIM_Init+0x394>)
 80017b2:	f000 f9bf 	bl	8001b34 <SIM_Send_Command>
	SIM_Receive_Response(response, 180000);
 80017b6:	f107 0314 	add.w	r3, r7, #20
 80017ba:	4927      	ldr	r1, [pc, #156]	@ (8001858 <SIM_Init+0x398>)
 80017bc:	4618      	mov	r0, r3
 80017be:	f000 f9e5 	bl	8001b8c <SIM_Receive_Response>
//	if(SIM_Wait_Response("OK") != HAL_OK) return -1;

	SIM_Send_Command("AT+CEREG?\r");                                                              //Controllo registrazione alla rete
 80017c2:	481e      	ldr	r0, [pc, #120]	@ (800183c <SIM_Init+0x37c>)
 80017c4:	f000 f9b6 	bl	8001b34 <SIM_Send_Command>
	SIM_Receive_Response(response, 5000);
 80017c8:	f107 0314 	add.w	r3, r7, #20
 80017cc:	f241 3188 	movw	r1, #5000	@ 0x1388
 80017d0:	4618      	mov	r0, r3
 80017d2:	f000 f9db 	bl	8001b8c <SIM_Receive_Response>
	int stat = 0;
 80017d6:	2300      	movs	r3, #0
 80017d8:	f8c7 321c 	str.w	r3, [r7, #540]	@ 0x21c
	while(stat != 1)
 80017dc:	e090      	b.n	8001900 <SIM_Init+0x440>
 80017de:	bf00      	nop
 80017e0:	0801766c 	.word	0x0801766c
 80017e4:	20001630 	.word	0x20001630
 80017e8:	200017f6 	.word	0x200017f6
 80017ec:	200016b8 	.word	0x200016b8
 80017f0:	20001836 	.word	0x20001836
 80017f4:	2000171c 	.word	0x2000171c
 80017f8:	0801767c 	.word	0x0801767c
 80017fc:	08017680 	.word	0x08017680
 8001800:	08017684 	.word	0x08017684
 8001804:	200004bc 	.word	0x200004bc
 8001808:	08017688 	.word	0x08017688
 800180c:	08017698 	.word	0x08017698
 8001810:	080176a0 	.word	0x080176a0
 8001814:	080176ac 	.word	0x080176ac
 8001818:	080176b8 	.word	0x080176b8
 800181c:	080176c4 	.word	0x080176c4
 8001820:	080176d0 	.word	0x080176d0
 8001824:	080176d8 	.word	0x080176d8
 8001828:	080176e0 	.word	0x080176e0
 800182c:	080176f0 	.word	0x080176f0
 8001830:	080176f8 	.word	0x080176f8
 8001834:	08017704 	.word	0x08017704
 8001838:	08017710 	.word	0x08017710
 800183c:	08017720 	.word	0x08017720
 8001840:	0801772c 	.word	0x0801772c
 8001844:	08017734 	.word	0x08017734
 8001848:	08017744 	.word	0x08017744
 800184c:	08017750 	.word	0x08017750
 8001850:	0001d4c0 	.word	0x0001d4c0
 8001854:	0801775c 	.word	0x0801775c
 8001858:	0002bf20 	.word	0x0002bf20
	{
		char* cereg_ptr = strstr(response, "+CEREG:");
 800185c:	f107 0314 	add.w	r3, r7, #20
 8001860:	498e      	ldr	r1, [pc, #568]	@ (8001a9c <SIM_Init+0x5dc>)
 8001862:	4618      	mov	r0, r3
 8001864:	f014 fe50 	bl	8016508 <strstr>
 8001868:	f8c7 0214 	str.w	r0, [r7, #532]	@ 0x214
		int n = 0, stat_value = 0;
 800186c:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8001870:	f5a3 7306 	sub.w	r3, r3, #536	@ 0x218
 8001874:	2200      	movs	r2, #0
 8001876:	601a      	str	r2, [r3, #0]
 8001878:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 800187c:	f5a3 7307 	sub.w	r3, r3, #540	@ 0x21c
 8001880:	2200      	movs	r2, #0
 8001882:	601a      	str	r2, [r3, #0]
		if(cereg_ptr && sscanf(cereg_ptr, "+CEREG: %d,%d", &n, &stat_value) >= 2)
 8001884:	f8d7 3214 	ldr.w	r3, [r7, #532]	@ 0x214
 8001888:	2b00      	cmp	r3, #0
 800188a:	d02b      	beq.n	80018e4 <SIM_Init+0x424>
 800188c:	1d3b      	adds	r3, r7, #4
 800188e:	f107 0208 	add.w	r2, r7, #8
 8001892:	4983      	ldr	r1, [pc, #524]	@ (8001aa0 <SIM_Init+0x5e0>)
 8001894:	f8d7 0214 	ldr.w	r0, [r7, #532]	@ 0x214
 8001898:	f014 fdbe 	bl	8016418 <siscanf>
 800189c:	4603      	mov	r3, r0
 800189e:	2b01      	cmp	r3, #1
 80018a0:	dd20      	ble.n	80018e4 <SIM_Init+0x424>
		{
			if(stat_value == 1 || stat_value == 5)
 80018a2:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 80018a6:	f5a3 7307 	sub.w	r3, r3, #540	@ 0x21c
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	2b01      	cmp	r3, #1
 80018ae:	d006      	beq.n	80018be <SIM_Init+0x3fe>
 80018b0:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 80018b4:	f5a3 7307 	sub.w	r3, r3, #540	@ 0x21c
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	2b05      	cmp	r3, #5
 80018bc:	d103      	bne.n	80018c6 <SIM_Init+0x406>
			{
				stat = 1;
 80018be:	2301      	movs	r3, #1
 80018c0:	f8c7 321c 	str.w	r3, [r7, #540]	@ 0x21c
			if(stat_value == 1 || stat_value == 5)
 80018c4:	e01c      	b.n	8001900 <SIM_Init+0x440>
			}
			else
			{
				SIM_Send_Command("AT+CEREG?\r");
 80018c6:	4877      	ldr	r0, [pc, #476]	@ (8001aa4 <SIM_Init+0x5e4>)
 80018c8:	f000 f934 	bl	8001b34 <SIM_Send_Command>
				SIM_Receive_Response(response, 5000);
 80018cc:	f107 0314 	add.w	r3, r7, #20
 80018d0:	f241 3188 	movw	r1, #5000	@ 0x1388
 80018d4:	4618      	mov	r0, r3
 80018d6:	f000 f959 	bl	8001b8c <SIM_Receive_Response>
				HAL_Delay(1000);
 80018da:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80018de:	f009 fd1d 	bl	800b31c <HAL_Delay>
			if(stat_value == 1 || stat_value == 5)
 80018e2:	e00d      	b.n	8001900 <SIM_Init+0x440>
			}
		}
		else
		{
			SIM_Send_Command("AT+CEREG?\r");
 80018e4:	486f      	ldr	r0, [pc, #444]	@ (8001aa4 <SIM_Init+0x5e4>)
 80018e6:	f000 f925 	bl	8001b34 <SIM_Send_Command>
			SIM_Receive_Response(response, 5000);
 80018ea:	f107 0314 	add.w	r3, r7, #20
 80018ee:	f241 3188 	movw	r1, #5000	@ 0x1388
 80018f2:	4618      	mov	r0, r3
 80018f4:	f000 f94a 	bl	8001b8c <SIM_Receive_Response>
			HAL_Delay(1000);
 80018f8:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80018fc:	f009 fd0e 	bl	800b31c <HAL_Delay>
	while(stat != 1)
 8001900:	f8d7 321c 	ldr.w	r3, [r7, #540]	@ 0x21c
 8001904:	2b01      	cmp	r3, #1
 8001906:	d1a9      	bne.n	800185c <SIM_Init+0x39c>
		}
	}

	APN:
 8001908:	e000      	b.n	800190c <SIM_Init+0x44c>
			goto APN;
 800190a:	bf00      	nop
	SIM_Send_Command("AT+CNACT?\r");                                                              //Verifica indirizzo IP
 800190c:	4866      	ldr	r0, [pc, #408]	@ (8001aa8 <SIM_Init+0x5e8>)
 800190e:	f000 f911 	bl	8001b34 <SIM_Send_Command>
	SIM_Receive_Response(response, 5000);
 8001912:	f107 0314 	add.w	r3, r7, #20
 8001916:	f241 3188 	movw	r1, #5000	@ 0x1388
 800191a:	4618      	mov	r0, r3
 800191c:	f000 f936 	bl	8001b8c <SIM_Receive_Response>
	if(SIM_Check_IP(response))
 8001920:	f107 0314 	add.w	r3, r7, #20
 8001924:	4618      	mov	r0, r3
 8001926:	f000 f95b 	bl	8001be0 <SIM_Check_IP>
 800192a:	4603      	mov	r3, r0
 800192c:	2b00      	cmp	r3, #0
 800192e:	d16b      	bne.n	8001a08 <SIM_Init+0x548>
	{
		goto TCP;
	}

	sprintf(command, "AT+CGDCONT=1,\"IP\",\"%s\"\r", sys.apn);                                    //Configurazione APN
 8001930:	f507 738a 	add.w	r3, r7, #276	@ 0x114
 8001934:	4a5d      	ldr	r2, [pc, #372]	@ (8001aac <SIM_Init+0x5ec>)
 8001936:	495e      	ldr	r1, [pc, #376]	@ (8001ab0 <SIM_Init+0x5f0>)
 8001938:	4618      	mov	r0, r3
 800193a:	f014 fd4b 	bl	80163d4 <siprintf>
	SIM_Send_Command(command);
 800193e:	f507 738a 	add.w	r3, r7, #276	@ 0x114
 8001942:	4618      	mov	r0, r3
 8001944:	f000 f8f6 	bl	8001b34 <SIM_Send_Command>
	SIM_Receive_Response(response, 5000);
 8001948:	f107 0314 	add.w	r3, r7, #20
 800194c:	f241 3188 	movw	r1, #5000	@ 0x1388
 8001950:	4618      	mov	r0, r3
 8001952:	f000 f91b 	bl	8001b8c <SIM_Receive_Response>
	if(strstr(response, "ERROR") != NULL)
 8001956:	f107 0314 	add.w	r3, r7, #20
 800195a:	4956      	ldr	r1, [pc, #344]	@ (8001ab4 <SIM_Init+0x5f4>)
 800195c:	4618      	mov	r0, r3
 800195e:	f014 fdd3 	bl	8016508 <strstr>
 8001962:	4603      	mov	r3, r0
 8001964:	2b00      	cmp	r3, #0
 8001966:	d002      	beq.n	800196e <SIM_Init+0x4ae>
	{
		return -1;
 8001968:	f04f 33ff 	mov.w	r3, #4294967295
 800196c:	e090      	b.n	8001a90 <SIM_Init+0x5d0>
	}

	SIM_Send_Command("AT+CNACT=1\r");                                                             //Attivazione della rete
 800196e:	4852      	ldr	r0, [pc, #328]	@ (8001ab8 <SIM_Init+0x5f8>)
 8001970:	f000 f8e0 	bl	8001b34 <SIM_Send_Command>
	SIM_Receive_Response(response, 5000);
 8001974:	f107 0314 	add.w	r3, r7, #20
 8001978:	f241 3188 	movw	r1, #5000	@ 0x1388
 800197c:	4618      	mov	r0, r3
 800197e:	f000 f905 	bl	8001b8c <SIM_Receive_Response>
	if(strstr(response, "+APP PDP: ACTIVE") == NULL)
 8001982:	f107 0314 	add.w	r3, r7, #20
 8001986:	494d      	ldr	r1, [pc, #308]	@ (8001abc <SIM_Init+0x5fc>)
 8001988:	4618      	mov	r0, r3
 800198a:	f014 fdbd 	bl	8016508 <strstr>
 800198e:	4603      	mov	r3, r0
 8001990:	2b00      	cmp	r3, #0
 8001992:	d117      	bne.n	80019c4 <SIM_Init+0x504>
	{
		while(strstr(response, "+APP PDP: ACTIVE") == NULL)
 8001994:	e00d      	b.n	80019b2 <SIM_Init+0x4f2>
		{
			SIM_Send_Command("AT+CNACT=1\r");
 8001996:	4848      	ldr	r0, [pc, #288]	@ (8001ab8 <SIM_Init+0x5f8>)
 8001998:	f000 f8cc 	bl	8001b34 <SIM_Send_Command>
			SIM_Receive_Response(response, 5000);
 800199c:	f107 0314 	add.w	r3, r7, #20
 80019a0:	f241 3188 	movw	r1, #5000	@ 0x1388
 80019a4:	4618      	mov	r0, r3
 80019a6:	f000 f8f1 	bl	8001b8c <SIM_Receive_Response>
			HAL_Delay(1000);
 80019aa:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80019ae:	f009 fcb5 	bl	800b31c <HAL_Delay>
		while(strstr(response, "+APP PDP: ACTIVE") == NULL)
 80019b2:	f107 0314 	add.w	r3, r7, #20
 80019b6:	4941      	ldr	r1, [pc, #260]	@ (8001abc <SIM_Init+0x5fc>)
 80019b8:	4618      	mov	r0, r3
 80019ba:	f014 fda5 	bl	8016508 <strstr>
 80019be:	4603      	mov	r3, r0
 80019c0:	2b00      	cmp	r3, #0
 80019c2:	d0e8      	beq.n	8001996 <SIM_Init+0x4d6>
		}
	}

	SIM_Send_Command("AT+CNACT?\r");                                                              //Verifica indirizzo IP
 80019c4:	4838      	ldr	r0, [pc, #224]	@ (8001aa8 <SIM_Init+0x5e8>)
 80019c6:	f000 f8b5 	bl	8001b34 <SIM_Send_Command>
	SIM_Receive_Response(response, 5000);
 80019ca:	f107 0314 	add.w	r3, r7, #20
 80019ce:	f241 3188 	movw	r1, #5000	@ 0x1388
 80019d2:	4618      	mov	r0, r3
 80019d4:	f000 f8da 	bl	8001b8c <SIM_Receive_Response>
	while(!SIM_Check_IP(response))
 80019d8:	e00d      	b.n	80019f6 <SIM_Init+0x536>
	{
		SIM_Send_Command("AT+CNACT?\r");
 80019da:	4833      	ldr	r0, [pc, #204]	@ (8001aa8 <SIM_Init+0x5e8>)
 80019dc:	f000 f8aa 	bl	8001b34 <SIM_Send_Command>
		SIM_Receive_Response(response, 5000);
 80019e0:	f107 0314 	add.w	r3, r7, #20
 80019e4:	f241 3188 	movw	r1, #5000	@ 0x1388
 80019e8:	4618      	mov	r0, r3
 80019ea:	f000 f8cf 	bl	8001b8c <SIM_Receive_Response>
		HAL_Delay(1000);
 80019ee:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80019f2:	f009 fc93 	bl	800b31c <HAL_Delay>
	while(!SIM_Check_IP(response))
 80019f6:	f107 0314 	add.w	r3, r7, #20
 80019fa:	4618      	mov	r0, r3
 80019fc:	f000 f8f0 	bl	8001be0 <SIM_Check_IP>
 8001a00:	4603      	mov	r3, r0
 8001a02:	2b00      	cmp	r3, #0
 8001a04:	d0e9      	beq.n	80019da <SIM_Init+0x51a>
	}
	
	TCP:
 8001a06:	e000      	b.n	8001a0a <SIM_Init+0x54a>
		goto TCP;
 8001a08:	bf00      	nop
	SIM_Send_Command("AT+CIPRXGET=0\r");                                                         //Impostazione ricezione automatica da server TCP
 8001a0a:	482d      	ldr	r0, [pc, #180]	@ (8001ac0 <SIM_Init+0x600>)
 8001a0c:	f000 f892 	bl	8001b34 <SIM_Send_Command>
	if(SIM_Wait_Response("OK") != HAL_OK) return -1;
 8001a10:	482c      	ldr	r0, [pc, #176]	@ (8001ac4 <SIM_Init+0x604>)
 8001a12:	f000 fc23 	bl	800225c <SIM_Wait_Response>
 8001a16:	4603      	mov	r3, r0
 8001a18:	2b00      	cmp	r3, #0
 8001a1a:	d002      	beq.n	8001a22 <SIM_Init+0x562>
 8001a1c:	f04f 33ff 	mov.w	r3, #4294967295
 8001a20:	e036      	b.n	8001a90 <SIM_Init+0x5d0>

	sprintf(command, "AT+CIPSTART=\"TCP\",\"%s\",%s\r", sys.TCP.IP_address, sys.TCP.Port);       //Connessione TCP
 8001a22:	f507 708a 	add.w	r0, r7, #276	@ 0x114
 8001a26:	4b28      	ldr	r3, [pc, #160]	@ (8001ac8 <SIM_Init+0x608>)
 8001a28:	4a28      	ldr	r2, [pc, #160]	@ (8001acc <SIM_Init+0x60c>)
 8001a2a:	4929      	ldr	r1, [pc, #164]	@ (8001ad0 <SIM_Init+0x610>)
 8001a2c:	f014 fcd2 	bl	80163d4 <siprintf>
	SIM_Send_Command(command);
 8001a30:	f507 738a 	add.w	r3, r7, #276	@ 0x114
 8001a34:	4618      	mov	r0, r3
 8001a36:	f000 f87d 	bl	8001b34 <SIM_Send_Command>
	if(SIM_Wait_Response("CONNECT OK") != HAL_OK) return -1;
 8001a3a:	4826      	ldr	r0, [pc, #152]	@ (8001ad4 <SIM_Init+0x614>)
 8001a3c:	f000 fc0e 	bl	800225c <SIM_Wait_Response>
 8001a40:	4603      	mov	r3, r0
 8001a42:	2b00      	cmp	r3, #0
 8001a44:	d002      	beq.n	8001a4c <SIM_Init+0x58c>
 8001a46:	f04f 33ff 	mov.w	r3, #4294967295
 8001a4a:	e021      	b.n	8001a90 <SIM_Init+0x5d0>

	SIM_Send_Command("AT+CIPSTATUS=0\r");                                                        //Verifica connessione al server TCP
 8001a4c:	4822      	ldr	r0, [pc, #136]	@ (8001ad8 <SIM_Init+0x618>)
 8001a4e:	f000 f871 	bl	8001b34 <SIM_Send_Command>
	SIM_Receive_Response(response, 5000);
 8001a52:	f107 0314 	add.w	r3, r7, #20
 8001a56:	f241 3188 	movw	r1, #5000	@ 0x1388
 8001a5a:	4618      	mov	r0, r3
 8001a5c:	f000 f896 	bl	8001b8c <SIM_Receive_Response>
	while(!SIM_Check_TCP_State(response))
 8001a60:	e00d      	b.n	8001a7e <SIM_Init+0x5be>
	{
		SIM_Send_Command("AT+CIPSTATUS=0\r");
 8001a62:	481d      	ldr	r0, [pc, #116]	@ (8001ad8 <SIM_Init+0x618>)
 8001a64:	f000 f866 	bl	8001b34 <SIM_Send_Command>
		SIM_Receive_Response(response, 5000);
 8001a68:	f107 0314 	add.w	r3, r7, #20
 8001a6c:	f241 3188 	movw	r1, #5000	@ 0x1388
 8001a70:	4618      	mov	r0, r3
 8001a72:	f000 f88b 	bl	8001b8c <SIM_Receive_Response>
		HAL_Delay(1000);
 8001a76:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001a7a:	f009 fc4f 	bl	800b31c <HAL_Delay>
	while(!SIM_Check_TCP_State(response))
 8001a7e:	f107 0314 	add.w	r3, r7, #20
 8001a82:	4618      	mov	r0, r3
 8001a84:	f000 f8e0 	bl	8001c48 <SIM_Check_TCP_State>
 8001a88:	4603      	mov	r3, r0
 8001a8a:	2b00      	cmp	r3, #0
 8001a8c:	d0e9      	beq.n	8001a62 <SIM_Init+0x5a2>
	}

	return 0;
 8001a8e:	2300      	movs	r3, #0
}
 8001a90:	4618      	mov	r0, r3
 8001a92:	f507 7708 	add.w	r7, r7, #544	@ 0x220
 8001a96:	46bd      	mov	sp, r7
 8001a98:	bd80      	pop	{r7, pc}
 8001a9a:	bf00      	nop
 8001a9c:	0801772c 	.word	0x0801772c
 8001aa0:	08017734 	.word	0x08017734
 8001aa4:	08017720 	.word	0x08017720
 8001aa8:	0801776c 	.word	0x0801776c
 8001aac:	20001630 	.word	0x20001630
 8001ab0:	08017778 	.word	0x08017778
 8001ab4:	08017790 	.word	0x08017790
 8001ab8:	08017798 	.word	0x08017798
 8001abc:	080177a4 	.word	0x080177a4
 8001ac0:	080177b8 	.word	0x080177b8
 8001ac4:	08017684 	.word	0x08017684
 8001ac8:	2000171c 	.word	0x2000171c
 8001acc:	200016b8 	.word	0x200016b8
 8001ad0:	080177c8 	.word	0x080177c8
 8001ad4:	080177e4 	.word	0x080177e4
 8001ad8:	080177f0 	.word	0x080177f0

08001adc <SIM_Power_On>:

/*------ACCENSIONE DEL MODULO LTE------*/
void SIM_Power_On(void)
{
 8001adc:	b580      	push	{r7, lr}
 8001ade:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LTE_POWER_ON_GPIO_Port, LTE_POWER_ON_Pin, GPIO_PIN_SET);
 8001ae0:	2201      	movs	r2, #1
 8001ae2:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8001ae6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001aea:	f00c fe01 	bl	800e6f0 <HAL_GPIO_WritePin>
	HAL_Delay(1500);
 8001aee:	f240 50dc 	movw	r0, #1500	@ 0x5dc
 8001af2:	f009 fc13 	bl	800b31c <HAL_Delay>
	HAL_GPIO_WritePin(LTE_POWER_ON_GPIO_Port, LTE_POWER_ON_Pin, GPIO_PIN_RESET);
 8001af6:	2200      	movs	r2, #0
 8001af8:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8001afc:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001b00:	f00c fdf6 	bl	800e6f0 <HAL_GPIO_WritePin>
}
 8001b04:	bf00      	nop
 8001b06:	bd80      	pop	{r7, pc}

08001b08 <SIM_Power_Off>:

/*------SPEGNIMENTO DEL MODULO LTE------*/
void SIM_Power_Off(void)
{
 8001b08:	b580      	push	{r7, lr}
 8001b0a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LTE_POWER_ON_GPIO_Port, LTE_POWER_ON_Pin, GPIO_PIN_SET);
 8001b0c:	2201      	movs	r2, #1
 8001b0e:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8001b12:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001b16:	f00c fdeb 	bl	800e6f0 <HAL_GPIO_WritePin>
	HAL_Delay(1500);
 8001b1a:	f240 50dc 	movw	r0, #1500	@ 0x5dc
 8001b1e:	f009 fbfd 	bl	800b31c <HAL_Delay>
	HAL_GPIO_WritePin(LTE_POWER_ON_GPIO_Port, LTE_POWER_ON_Pin, GPIO_PIN_RESET);
 8001b22:	2200      	movs	r2, #0
 8001b24:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8001b28:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001b2c:	f00c fde0 	bl	800e6f0 <HAL_GPIO_WritePin>
}
 8001b30:	bf00      	nop
 8001b32:	bd80      	pop	{r7, pc}

08001b34 <SIM_Send_Command>:
	HAL_GPIO_WritePin(LTE_RESET_GPIO_Port, LTE_RESET_Pin, GPIO_PIN_RESET);
}

/*------INVIO COMANDO AL MODULO LTE------*/
void SIM_Send_Command(char* command)
{
 8001b34:	b580      	push	{r7, lr}
 8001b36:	b084      	sub	sp, #16
 8001b38:	af00      	add	r7, sp, #0
 8001b3a:	6078      	str	r0, [r7, #4]
	uint16_t len = (uint16_t)strlen(command);
 8001b3c:	6878      	ldr	r0, [r7, #4]
 8001b3e:	f7fe fb51 	bl	80001e4 <strlen>
 8001b42:	4603      	mov	r3, r0
 8001b44:	81fb      	strh	r3, [r7, #14]

	HAL_UART_Transmit(SIM_UART, (uint8_t*)command, len, 100);
 8001b46:	89fa      	ldrh	r2, [r7, #14]
 8001b48:	2364      	movs	r3, #100	@ 0x64
 8001b4a:	6879      	ldr	r1, [r7, #4]
 8001b4c:	4803      	ldr	r0, [pc, #12]	@ (8001b5c <SIM_Send_Command+0x28>)
 8001b4e:	f013 f8f9 	bl	8014d44 <HAL_UART_Transmit>
}
 8001b52:	bf00      	nop
 8001b54:	3710      	adds	r7, #16
 8001b56:	46bd      	mov	sp, r7
 8001b58:	bd80      	pop	{r7, pc}
 8001b5a:	bf00      	nop
 8001b5c:	200004bc 	.word	0x200004bc

08001b60 <SIM_Send_Command_DMA>:

/*------INVIO COMANDO AL MODULO LTE (DMA)------*/
void SIM_Send_Command_DMA(char* command)
{
 8001b60:	b580      	push	{r7, lr}
 8001b62:	b084      	sub	sp, #16
 8001b64:	af00      	add	r7, sp, #0
 8001b66:	6078      	str	r0, [r7, #4]
	uint16_t len = (uint16_t)strlen(command);
 8001b68:	6878      	ldr	r0, [r7, #4]
 8001b6a:	f7fe fb3b 	bl	80001e4 <strlen>
 8001b6e:	4603      	mov	r3, r0
 8001b70:	81fb      	strh	r3, [r7, #14]

	HAL_UART_Transmit_DMA(SIM_UART, (uint8_t*)command, len);
 8001b72:	89fb      	ldrh	r3, [r7, #14]
 8001b74:	461a      	mov	r2, r3
 8001b76:	6879      	ldr	r1, [r7, #4]
 8001b78:	4803      	ldr	r0, [pc, #12]	@ (8001b88 <SIM_Send_Command_DMA+0x28>)
 8001b7a:	f013 fa35 	bl	8014fe8 <HAL_UART_Transmit_DMA>
}
 8001b7e:	bf00      	nop
 8001b80:	3710      	adds	r7, #16
 8001b82:	46bd      	mov	sp, r7
 8001b84:	bd80      	pop	{r7, pc}
 8001b86:	bf00      	nop
 8001b88:	200004bc 	.word	0x200004bc

08001b8c <SIM_Receive_Response>:

/*------RICEZIONE RISPOSTA DAL MODULO LTE------*/
uint16_t SIM_Receive_Response(char* rx, uint32_t timeout_ms)
{
 8001b8c:	b580      	push	{r7, lr}
 8001b8e:	b086      	sub	sp, #24
 8001b90:	af02      	add	r7, sp, #8
 8001b92:	6078      	str	r0, [r7, #4]
 8001b94:	6039      	str	r1, [r7, #0]
	uint16_t RxLen = 0;
 8001b96:	2300      	movs	r3, #0
 8001b98:	817b      	strh	r3, [r7, #10]
	uint32_t start_time = HAL_GetTick();
 8001b9a:	f009 fbb3 	bl	800b304 <HAL_GetTick>
 8001b9e:	60f8      	str	r0, [r7, #12]

	while ((HAL_GetTick() - start_time) < timeout_ms)
 8001ba0:	e00d      	b.n	8001bbe <SIM_Receive_Response+0x32>
	{
		HAL_UARTEx_ReceiveToIdle(SIM_UART, (uint8_t *)rx, 256, &RxLen, 500);
 8001ba2:	f107 030a 	add.w	r3, r7, #10
 8001ba6:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 8001baa:	9200      	str	r2, [sp, #0]
 8001bac:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001bb0:	6879      	ldr	r1, [r7, #4]
 8001bb2:	480a      	ldr	r0, [pc, #40]	@ (8001bdc <SIM_Receive_Response+0x50>)
 8001bb4:	f014 fa2d 	bl	8016012 <HAL_UARTEx_ReceiveToIdle>
		if (RxLen > 0)
 8001bb8:	897b      	ldrh	r3, [r7, #10]
 8001bba:	2b00      	cmp	r3, #0
 8001bbc:	d108      	bne.n	8001bd0 <SIM_Receive_Response+0x44>
	while ((HAL_GetTick() - start_time) < timeout_ms)
 8001bbe:	f009 fba1 	bl	800b304 <HAL_GetTick>
 8001bc2:	4602      	mov	r2, r0
 8001bc4:	68fb      	ldr	r3, [r7, #12]
 8001bc6:	1ad3      	subs	r3, r2, r3
 8001bc8:	683a      	ldr	r2, [r7, #0]
 8001bca:	429a      	cmp	r2, r3
 8001bcc:	d8e9      	bhi.n	8001ba2 <SIM_Receive_Response+0x16>
 8001bce:	e000      	b.n	8001bd2 <SIM_Receive_Response+0x46>
			break;
 8001bd0:	bf00      	nop
	}
	return RxLen;
 8001bd2:	897b      	ldrh	r3, [r7, #10]
}
 8001bd4:	4618      	mov	r0, r3
 8001bd6:	3710      	adds	r7, #16
 8001bd8:	46bd      	mov	sp, r7
 8001bda:	bd80      	pop	{r7, pc}
 8001bdc:	200004bc 	.word	0x200004bc

08001be0 <SIM_Check_IP>:

/*------CONTROLLO INDIRIZZO IP------*/
int SIM_Check_IP(const char* response)
{
 8001be0:	b580      	push	{r7, lr}
 8001be2:	b08c      	sub	sp, #48	@ 0x30
 8001be4:	af00      	add	r7, sp, #0
 8001be6:	6078      	str	r0, [r7, #4]
	char* cnact_pos = strstr(response, "+CNACT:");
 8001be8:	4915      	ldr	r1, [pc, #84]	@ (8001c40 <SIM_Check_IP+0x60>)
 8001bea:	6878      	ldr	r0, [r7, #4]
 8001bec:	f014 fc8c 	bl	8016508 <strstr>
 8001bf0:	62f8      	str	r0, [r7, #44]	@ 0x2c
	if(cnact_pos != NULL) 
 8001bf2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001bf4:	2b00      	cmp	r3, #0
 8001bf6:	d01d      	beq.n	8001c34 <SIM_Check_IP+0x54>
	{
		int status;
		char ip_addr[32] = {0};
 8001bf8:	f107 0308 	add.w	r3, r7, #8
 8001bfc:	2220      	movs	r2, #32
 8001bfe:	2100      	movs	r1, #0
 8001c00:	4618      	mov	r0, r3
 8001c02:	f014 fc47 	bl	8016494 <memset>
		if(sscanf(cnact_pos, "+CNACT: %d,%31s", &status, ip_addr) == 2)
 8001c06:	f107 0308 	add.w	r3, r7, #8
 8001c0a:	f107 0228 	add.w	r2, r7, #40	@ 0x28
 8001c0e:	490d      	ldr	r1, [pc, #52]	@ (8001c44 <SIM_Check_IP+0x64>)
 8001c10:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8001c12:	f014 fc01 	bl	8016418 <siscanf>
 8001c16:	4603      	mov	r3, r0
 8001c18:	2b02      	cmp	r3, #2
 8001c1a:	d10b      	bne.n	8001c34 <SIM_Check_IP+0x54>
		{
			return (status == 1 && strlen(ip_addr) > 0) ? 1 : 0;
 8001c1c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001c1e:	2b01      	cmp	r3, #1
 8001c20:	d106      	bne.n	8001c30 <SIM_Check_IP+0x50>
 8001c22:	f107 0308 	add.w	r3, r7, #8
 8001c26:	781b      	ldrb	r3, [r3, #0]
 8001c28:	2b00      	cmp	r3, #0
 8001c2a:	d001      	beq.n	8001c30 <SIM_Check_IP+0x50>
 8001c2c:	2301      	movs	r3, #1
 8001c2e:	e002      	b.n	8001c36 <SIM_Check_IP+0x56>
 8001c30:	2300      	movs	r3, #0
 8001c32:	e000      	b.n	8001c36 <SIM_Check_IP+0x56>
		}
	}
	return 0;
 8001c34:	2300      	movs	r3, #0
}
 8001c36:	4618      	mov	r0, r3
 8001c38:	3730      	adds	r7, #48	@ 0x30
 8001c3a:	46bd      	mov	sp, r7
 8001c3c:	bd80      	pop	{r7, pc}
 8001c3e:	bf00      	nop
 8001c40:	08017800 	.word	0x08017800
 8001c44:	08017808 	.word	0x08017808

08001c48 <SIM_Check_TCP_State>:
    return 0;
}

/*------CONTROLLO STATO CONNESSIONE TCP------*/
int SIM_Check_TCP_State(const char* response)
{
 8001c48:	b580      	push	{r7, lr}
 8001c4a:	b084      	sub	sp, #16
 8001c4c:	af00      	add	r7, sp, #0
 8001c4e:	6078      	str	r0, [r7, #4]
    char* cipstatus_pos = strstr(response, "+CIPSTATUS: 0");
 8001c50:	490a      	ldr	r1, [pc, #40]	@ (8001c7c <SIM_Check_TCP_State+0x34>)
 8001c52:	6878      	ldr	r0, [r7, #4]
 8001c54:	f014 fc58 	bl	8016508 <strstr>
 8001c58:	60f8      	str	r0, [r7, #12]
    if(cipstatus_pos != NULL) {
 8001c5a:	68fb      	ldr	r3, [r7, #12]
 8001c5c:	2b00      	cmp	r3, #0
 8001c5e:	d008      	beq.n	8001c72 <SIM_Check_TCP_State+0x2a>
        // Cerca "CONNECTED" nella stessa riga
        if(strstr(cipstatus_pos, "CONNECTED") != NULL) {
 8001c60:	4907      	ldr	r1, [pc, #28]	@ (8001c80 <SIM_Check_TCP_State+0x38>)
 8001c62:	68f8      	ldr	r0, [r7, #12]
 8001c64:	f014 fc50 	bl	8016508 <strstr>
 8001c68:	4603      	mov	r3, r0
 8001c6a:	2b00      	cmp	r3, #0
 8001c6c:	d001      	beq.n	8001c72 <SIM_Check_TCP_State+0x2a>
            return 1;
 8001c6e:	2301      	movs	r3, #1
 8001c70:	e000      	b.n	8001c74 <SIM_Check_TCP_State+0x2c>
        }
    }
    return 0;
 8001c72:	2300      	movs	r3, #0
}
 8001c74:	4618      	mov	r0, r3
 8001c76:	3710      	adds	r7, #16
 8001c78:	46bd      	mov	sp, r7
 8001c7a:	bd80      	pop	{r7, pc}
 8001c7c:	08017834 	.word	0x08017834
 8001c80:	08017844 	.word	0x08017844

08001c84 <SIM_Parse_Command>:

/*------PARSING MESSAGGIO MQTT------*/
void SIM_Parse_Command(void)
{
 8001c84:	b580      	push	{r7, lr}
 8001c86:	b086      	sub	sp, #24
 8001c88:	af00      	add	r7, sp, #0
	char* buf = (char*)sim_rx_buffer;
 8001c8a:	4b7b      	ldr	r3, [pc, #492]	@ (8001e78 <SIM_Parse_Command+0x1f4>)
 8001c8c:	60fb      	str	r3, [r7, #12]

	if(strncmp(buf, "+CMD,", 5) == 0)
 8001c8e:	2205      	movs	r2, #5
 8001c90:	497a      	ldr	r1, [pc, #488]	@ (8001e7c <SIM_Parse_Command+0x1f8>)
 8001c92:	68f8      	ldr	r0, [r7, #12]
 8001c94:	f014 fc13 	bl	80164be <strncmp>
 8001c98:	4603      	mov	r3, r0
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	f040 80e7 	bne.w	8001e6e <SIM_Parse_Command+0x1ea>
	{
		char* pos = buf + 5;
 8001ca0:	68fb      	ldr	r3, [r7, #12]
 8001ca2:	3305      	adds	r3, #5
 8001ca4:	60bb      	str	r3, [r7, #8]
		// Estrai il valore del comando (cmd_val) come stringa
		char cmd_str[8] = {0};
 8001ca6:	463b      	mov	r3, r7
 8001ca8:	2200      	movs	r2, #0
 8001caa:	601a      	str	r2, [r3, #0]
 8001cac:	605a      	str	r2, [r3, #4]
		int i = 0;
 8001cae:	2300      	movs	r3, #0
 8001cb0:	617b      	str	r3, [r7, #20]
		while(pos[i] != ',' && pos[i] != '\0' && i < 7) 
 8001cb2:	e00b      	b.n	8001ccc <SIM_Parse_Command+0x48>
		{
			cmd_str[i] = pos[i];
 8001cb4:	697b      	ldr	r3, [r7, #20]
 8001cb6:	68ba      	ldr	r2, [r7, #8]
 8001cb8:	4413      	add	r3, r2
 8001cba:	7819      	ldrb	r1, [r3, #0]
 8001cbc:	463a      	mov	r2, r7
 8001cbe:	697b      	ldr	r3, [r7, #20]
 8001cc0:	4413      	add	r3, r2
 8001cc2:	460a      	mov	r2, r1
 8001cc4:	701a      	strb	r2, [r3, #0]
			i++;
 8001cc6:	697b      	ldr	r3, [r7, #20]
 8001cc8:	3301      	adds	r3, #1
 8001cca:	617b      	str	r3, [r7, #20]
		while(pos[i] != ',' && pos[i] != '\0' && i < 7) 
 8001ccc:	697b      	ldr	r3, [r7, #20]
 8001cce:	68ba      	ldr	r2, [r7, #8]
 8001cd0:	4413      	add	r3, r2
 8001cd2:	781b      	ldrb	r3, [r3, #0]
 8001cd4:	2b2c      	cmp	r3, #44	@ 0x2c
 8001cd6:	d008      	beq.n	8001cea <SIM_Parse_Command+0x66>
 8001cd8:	697b      	ldr	r3, [r7, #20]
 8001cda:	68ba      	ldr	r2, [r7, #8]
 8001cdc:	4413      	add	r3, r2
 8001cde:	781b      	ldrb	r3, [r3, #0]
 8001ce0:	2b00      	cmp	r3, #0
 8001ce2:	d002      	beq.n	8001cea <SIM_Parse_Command+0x66>
 8001ce4:	697b      	ldr	r3, [r7, #20]
 8001ce6:	2b06      	cmp	r3, #6
 8001ce8:	dde4      	ble.n	8001cb4 <SIM_Parse_Command+0x30>
		}
		cmd_str[i] = '\0';
 8001cea:	463a      	mov	r2, r7
 8001cec:	697b      	ldr	r3, [r7, #20]
 8001cee:	4413      	add	r3, r2
 8001cf0:	2200      	movs	r2, #0
 8001cf2:	701a      	strb	r2, [r3, #0]

		// Avanza oltre la virgola per eventuale parsing successivo
		char* data_pos = pos + i;
 8001cf4:	697b      	ldr	r3, [r7, #20]
 8001cf6:	68ba      	ldr	r2, [r7, #8]
 8001cf8:	4413      	add	r3, r2
 8001cfa:	613b      	str	r3, [r7, #16]
		if(*data_pos == ',') data_pos++;
 8001cfc:	693b      	ldr	r3, [r7, #16]
 8001cfe:	781b      	ldrb	r3, [r3, #0]
 8001d00:	2b2c      	cmp	r3, #44	@ 0x2c
 8001d02:	d102      	bne.n	8001d0a <SIM_Parse_Command+0x86>
 8001d04:	693b      	ldr	r3, [r7, #16]
 8001d06:	3301      	adds	r3, #1
 8001d08:	613b      	str	r3, [r7, #16]

		if(strcmp(cmd_str, "IDL") == 0) 
 8001d0a:	463b      	mov	r3, r7
 8001d0c:	495c      	ldr	r1, [pc, #368]	@ (8001e80 <SIM_Parse_Command+0x1fc>)
 8001d0e:	4618      	mov	r0, r3
 8001d10:	f7fe fa5e 	bl	80001d0 <strcmp>
 8001d14:	4603      	mov	r3, r0
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	d105      	bne.n	8001d26 <SIM_Parse_Command+0xa2>
		{
			flags.CMD.Idle = 1;
 8001d1a:	4a5a      	ldr	r2, [pc, #360]	@ (8001e84 <SIM_Parse_Command+0x200>)
 8001d1c:	7893      	ldrb	r3, [r2, #2]
 8001d1e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001d22:	7093      	strb	r3, [r2, #2]
		else if(strcmp(cmd_str, "RST") == 0) 
		{
			HAL_NVIC_SystemReset();
		}
	}
}
 8001d24:	e0a3      	b.n	8001e6e <SIM_Parse_Command+0x1ea>
		else if(strcmp(cmd_str, "SRT") == 0) 
 8001d26:	463b      	mov	r3, r7
 8001d28:	4957      	ldr	r1, [pc, #348]	@ (8001e88 <SIM_Parse_Command+0x204>)
 8001d2a:	4618      	mov	r0, r3
 8001d2c:	f7fe fa50 	bl	80001d0 <strcmp>
 8001d30:	4603      	mov	r3, r0
 8001d32:	2b00      	cmp	r3, #0
 8001d34:	d105      	bne.n	8001d42 <SIM_Parse_Command+0xbe>
			flags.CMD.Start_Meas = 1;
 8001d36:	4a53      	ldr	r2, [pc, #332]	@ (8001e84 <SIM_Parse_Command+0x200>)
 8001d38:	7893      	ldrb	r3, [r2, #2]
 8001d3a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001d3e:	7093      	strb	r3, [r2, #2]
}
 8001d40:	e095      	b.n	8001e6e <SIM_Parse_Command+0x1ea>
		else if(strcmp(cmd_str, "PNG") == 0) 
 8001d42:	463b      	mov	r3, r7
 8001d44:	4951      	ldr	r1, [pc, #324]	@ (8001e8c <SIM_Parse_Command+0x208>)
 8001d46:	4618      	mov	r0, r3
 8001d48:	f7fe fa42 	bl	80001d0 <strcmp>
 8001d4c:	4603      	mov	r3, r0
 8001d4e:	2b00      	cmp	r3, #0
 8001d50:	d105      	bne.n	8001d5e <SIM_Parse_Command+0xda>
			flags.CMD.Ping = 1;
 8001d52:	4a4c      	ldr	r2, [pc, #304]	@ (8001e84 <SIM_Parse_Command+0x200>)
 8001d54:	7893      	ldrb	r3, [r2, #2]
 8001d56:	f043 0308 	orr.w	r3, r3, #8
 8001d5a:	7093      	strb	r3, [r2, #2]
}
 8001d5c:	e087      	b.n	8001e6e <SIM_Parse_Command+0x1ea>
		else if(strcmp(cmd_str, "SND") == 0) 
 8001d5e:	463b      	mov	r3, r7
 8001d60:	494b      	ldr	r1, [pc, #300]	@ (8001e90 <SIM_Parse_Command+0x20c>)
 8001d62:	4618      	mov	r0, r3
 8001d64:	f7fe fa34 	bl	80001d0 <strcmp>
 8001d68:	4603      	mov	r3, r0
 8001d6a:	2b00      	cmp	r3, #0
 8001d6c:	d119      	bne.n	8001da2 <SIM_Parse_Command+0x11e>
			if(strcmp(data_pos, "1") == 0)
 8001d6e:	4949      	ldr	r1, [pc, #292]	@ (8001e94 <SIM_Parse_Command+0x210>)
 8001d70:	6938      	ldr	r0, [r7, #16]
 8001d72:	f7fe fa2d 	bl	80001d0 <strcmp>
 8001d76:	4603      	mov	r3, r0
 8001d78:	2b00      	cmp	r3, #0
 8001d7a:	d105      	bne.n	8001d88 <SIM_Parse_Command+0x104>
				flags.CMD.Data_Request = 1;
 8001d7c:	4a41      	ldr	r2, [pc, #260]	@ (8001e84 <SIM_Parse_Command+0x200>)
 8001d7e:	7893      	ldrb	r3, [r2, #2]
 8001d80:	f043 0301 	orr.w	r3, r3, #1
 8001d84:	7093      	strb	r3, [r2, #2]
}
 8001d86:	e072      	b.n	8001e6e <SIM_Parse_Command+0x1ea>
			else if(strcmp(data_pos, "0") == 0)
 8001d88:	4943      	ldr	r1, [pc, #268]	@ (8001e98 <SIM_Parse_Command+0x214>)
 8001d8a:	6938      	ldr	r0, [r7, #16]
 8001d8c:	f7fe fa20 	bl	80001d0 <strcmp>
 8001d90:	4603      	mov	r3, r0
 8001d92:	2b00      	cmp	r3, #0
 8001d94:	d16b      	bne.n	8001e6e <SIM_Parse_Command+0x1ea>
				flags.CMD.Data_Request = 0;
 8001d96:	4a3b      	ldr	r2, [pc, #236]	@ (8001e84 <SIM_Parse_Command+0x200>)
 8001d98:	7893      	ldrb	r3, [r2, #2]
 8001d9a:	f023 0301 	bic.w	r3, r3, #1
 8001d9e:	7093      	strb	r3, [r2, #2]
}
 8001da0:	e065      	b.n	8001e6e <SIM_Parse_Command+0x1ea>
		else if(strcmp(cmd_str, "MSR") == 0) 
 8001da2:	463b      	mov	r3, r7
 8001da4:	493d      	ldr	r1, [pc, #244]	@ (8001e9c <SIM_Parse_Command+0x218>)
 8001da6:	4618      	mov	r0, r3
 8001da8:	f7fe fa12 	bl	80001d0 <strcmp>
 8001dac:	4603      	mov	r3, r0
 8001dae:	2b00      	cmp	r3, #0
 8001db0:	d117      	bne.n	8001de2 <SIM_Parse_Command+0x15e>
			if(!flags.CMD.Measure_Request) 
 8001db2:	4b34      	ldr	r3, [pc, #208]	@ (8001e84 <SIM_Parse_Command+0x200>)
 8001db4:	789b      	ldrb	r3, [r3, #2]
 8001db6:	f003 0302 	and.w	r3, r3, #2
 8001dba:	b2db      	uxtb	r3, r3
 8001dbc:	2b00      	cmp	r3, #0
 8001dbe:	d156      	bne.n	8001e6e <SIM_Parse_Command+0x1ea>
				LED_Start(RED_LED, FAST, LOW);
 8001dc0:	2207      	movs	r2, #7
 8001dc2:	2100      	movs	r1, #0
 8001dc4:	2004      	movs	r0, #4
 8001dc6:	f001 fd0b 	bl	80037e0 <LED_Start>
				Send_Measure_Addr = Saved_Bytes;
 8001dca:	4b35      	ldr	r3, [pc, #212]	@ (8001ea0 <SIM_Parse_Command+0x21c>)
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	4a35      	ldr	r2, [pc, #212]	@ (8001ea4 <SIM_Parse_Command+0x220>)
 8001dd0:	6013      	str	r3, [r2, #0]
				flags.CMD.Measure_Request = 1;
 8001dd2:	4a2c      	ldr	r2, [pc, #176]	@ (8001e84 <SIM_Parse_Command+0x200>)
 8001dd4:	7893      	ldrb	r3, [r2, #2]
 8001dd6:	f043 0302 	orr.w	r3, r3, #2
 8001dda:	7093      	strb	r3, [r2, #2]
				Switch_Buffer();
 8001ddc:	f003 fff8 	bl	8005dd0 <Switch_Buffer>
}
 8001de0:	e045      	b.n	8001e6e <SIM_Parse_Command+0x1ea>
		else if(strcmp(cmd_str, "OTA") == 0) 
 8001de2:	463b      	mov	r3, r7
 8001de4:	4930      	ldr	r1, [pc, #192]	@ (8001ea8 <SIM_Parse_Command+0x224>)
 8001de6:	4618      	mov	r0, r3
 8001de8:	f7fe f9f2 	bl	80001d0 <strcmp>
 8001dec:	4603      	mov	r3, r0
 8001dee:	2b00      	cmp	r3, #0
 8001df0:	d109      	bne.n	8001e06 <SIM_Parse_Command+0x182>
			if(state == IDLE) 
 8001df2:	4b2e      	ldr	r3, [pc, #184]	@ (8001eac <SIM_Parse_Command+0x228>)
 8001df4:	781b      	ldrb	r3, [r3, #0]
 8001df6:	2b00      	cmp	r3, #0
 8001df8:	d139      	bne.n	8001e6e <SIM_Parse_Command+0x1ea>
				flags.CMD.Start_OTA = 1;
 8001dfa:	4a22      	ldr	r2, [pc, #136]	@ (8001e84 <SIM_Parse_Command+0x200>)
 8001dfc:	7893      	ldrb	r3, [r2, #2]
 8001dfe:	f043 0304 	orr.w	r3, r3, #4
 8001e02:	7093      	strb	r3, [r2, #2]
}
 8001e04:	e033      	b.n	8001e6e <SIM_Parse_Command+0x1ea>
		else if(strcmp(cmd_str, "SET") == 0) 
 8001e06:	463b      	mov	r3, r7
 8001e08:	4929      	ldr	r1, [pc, #164]	@ (8001eb0 <SIM_Parse_Command+0x22c>)
 8001e0a:	4618      	mov	r0, r3
 8001e0c:	f7fe f9e0 	bl	80001d0 <strcmp>
 8001e10:	4603      	mov	r3, r0
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	d10c      	bne.n	8001e30 <SIM_Parse_Command+0x1ac>
			if(state == IDLE) 
 8001e16:	4b25      	ldr	r3, [pc, #148]	@ (8001eac <SIM_Parse_Command+0x228>)
 8001e18:	781b      	ldrb	r3, [r3, #0]
 8001e1a:	2b00      	cmp	r3, #0
 8001e1c:	d127      	bne.n	8001e6e <SIM_Parse_Command+0x1ea>
				flags.CMD.Set_Config = 1;
 8001e1e:	4a19      	ldr	r2, [pc, #100]	@ (8001e84 <SIM_Parse_Command+0x200>)
 8001e20:	7893      	ldrb	r3, [r2, #2]
 8001e22:	f043 0310 	orr.w	r3, r3, #16
 8001e26:	7093      	strb	r3, [r2, #2]
				SIM_Parse_Cfg(data_pos); 
 8001e28:	6938      	ldr	r0, [r7, #16]
 8001e2a:	f000 f847 	bl	8001ebc <SIM_Parse_Cfg>
}
 8001e2e:	e01e      	b.n	8001e6e <SIM_Parse_Command+0x1ea>
		else if(strcmp(cmd_str, "GET") == 0) 
 8001e30:	463b      	mov	r3, r7
 8001e32:	4920      	ldr	r1, [pc, #128]	@ (8001eb4 <SIM_Parse_Command+0x230>)
 8001e34:	4618      	mov	r0, r3
 8001e36:	f7fe f9cb 	bl	80001d0 <strcmp>
 8001e3a:	4603      	mov	r3, r0
 8001e3c:	2b00      	cmp	r3, #0
 8001e3e:	d10c      	bne.n	8001e5a <SIM_Parse_Command+0x1d6>
			if(state == IDLE) 
 8001e40:	4b1a      	ldr	r3, [pc, #104]	@ (8001eac <SIM_Parse_Command+0x228>)
 8001e42:	781b      	ldrb	r3, [r3, #0]
 8001e44:	2b00      	cmp	r3, #0
 8001e46:	d112      	bne.n	8001e6e <SIM_Parse_Command+0x1ea>
				flags.CMD.Get_Config = 1;
 8001e48:	4a0e      	ldr	r2, [pc, #56]	@ (8001e84 <SIM_Parse_Command+0x200>)
 8001e4a:	7893      	ldrb	r3, [r2, #2]
 8001e4c:	f043 0320 	orr.w	r3, r3, #32
 8001e50:	7093      	strb	r3, [r2, #2]
				SIM_Get_Cfg(data_pos);
 8001e52:	6938      	ldr	r0, [r7, #16]
 8001e54:	f000 f8a6 	bl	8001fa4 <SIM_Get_Cfg>
}
 8001e58:	e009      	b.n	8001e6e <SIM_Parse_Command+0x1ea>
		else if(strcmp(cmd_str, "RST") == 0) 
 8001e5a:	463b      	mov	r3, r7
 8001e5c:	4916      	ldr	r1, [pc, #88]	@ (8001eb8 <SIM_Parse_Command+0x234>)
 8001e5e:	4618      	mov	r0, r3
 8001e60:	f7fe f9b6 	bl	80001d0 <strcmp>
 8001e64:	4603      	mov	r3, r0
 8001e66:	2b00      	cmp	r3, #0
 8001e68:	d101      	bne.n	8001e6e <SIM_Parse_Command+0x1ea>
			HAL_NVIC_SystemReset();
 8001e6a:	f00a ff30 	bl	800ccce <HAL_NVIC_SystemReset>
}
 8001e6e:	bf00      	nop
 8001e70:	3718      	adds	r7, #24
 8001e72:	46bd      	mov	sp, r7
 8001e74:	bd80      	pop	{r7, pc}
 8001e76:	bf00      	nop
 8001e78:	20004f94 	.word	0x20004f94
 8001e7c:	08017850 	.word	0x08017850
 8001e80:	08017858 	.word	0x08017858
 8001e84:	20001780 	.word	0x20001780
 8001e88:	0801785c 	.word	0x0801785c
 8001e8c:	08017860 	.word	0x08017860
 8001e90:	08017864 	.word	0x08017864
 8001e94:	08017868 	.word	0x08017868
 8001e98:	0801786c 	.word	0x0801786c
 8001e9c:	08017870 	.word	0x08017870
 8001ea0:	20004960 	.word	0x20004960
 8001ea4:	20004968 	.word	0x20004968
 8001ea8:	08017874 	.word	0x08017874
 8001eac:	200005d4 	.word	0x200005d4
 8001eb0:	08017878 	.word	0x08017878
 8001eb4:	0801787c 	.word	0x0801787c
 8001eb8:	08017880 	.word	0x08017880

08001ebc <SIM_Parse_Cfg>:

/*-----PARSING CONFIGURAZIONE-----*/
void SIM_Parse_Cfg(char* cmd_start)
{   
 8001ebc:	b580      	push	{r7, lr}
 8001ebe:	b088      	sub	sp, #32
 8001ec0:	af00      	add	r7, sp, #0
 8001ec2:	6078      	str	r0, [r7, #4]
    memset(cfg_var, 0, sizeof(cfg_var));
 8001ec4:	2214      	movs	r2, #20
 8001ec6:	2100      	movs	r1, #0
 8001ec8:	4833      	ldr	r0, [pc, #204]	@ (8001f98 <SIM_Parse_Cfg+0xdc>)
 8001eca:	f014 fae3 	bl	8016494 <memset>
    memset(new_cfg_val, 0, sizeof(new_cfg_val));
 8001ece:	220a      	movs	r2, #10
 8001ed0:	2100      	movs	r1, #0
 8001ed2:	4832      	ldr	r0, [pc, #200]	@ (8001f9c <SIM_Parse_Cfg+0xe0>)
 8001ed4:	f014 fade 	bl	8016494 <memset>
    
	char* pos = cmd_start + 4; // Salta "SET,"
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	3304      	adds	r3, #4
 8001edc:	61fb      	str	r3, [r7, #28]

	// Prima virgola (dopo SET)
	char* comma1 = strchr(pos, ',');
 8001ede:	212c      	movs	r1, #44	@ 0x2c
 8001ee0:	69f8      	ldr	r0, [r7, #28]
 8001ee2:	f014 fadf 	bl	80164a4 <strchr>
 8001ee6:	61b8      	str	r0, [r7, #24]
	if(!comma1) return;
 8001ee8:	69bb      	ldr	r3, [r7, #24]
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	d04c      	beq.n	8001f88 <SIM_Parse_Cfg+0xcc>

	// Seconda virgola
	char* comma2 = strchr(comma1 + 1, ',');
 8001eee:	69bb      	ldr	r3, [r7, #24]
 8001ef0:	3301      	adds	r3, #1
 8001ef2:	212c      	movs	r1, #44	@ 0x2c
 8001ef4:	4618      	mov	r0, r3
 8001ef6:	f014 fad5 	bl	80164a4 <strchr>
 8001efa:	6178      	str	r0, [r7, #20]
	if(!comma2) return;
 8001efc:	697b      	ldr	r3, [r7, #20]
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	d044      	beq.n	8001f8c <SIM_Parse_Cfg+0xd0>

	// Terza virgola
	char* comma3 = strchr(comma2 + 1, ',');
 8001f02:	697b      	ldr	r3, [r7, #20]
 8001f04:	3301      	adds	r3, #1
 8001f06:	212c      	movs	r1, #44	@ 0x2c
 8001f08:	4618      	mov	r0, r3
 8001f0a:	f014 facb 	bl	80164a4 <strchr>
 8001f0e:	6138      	str	r0, [r7, #16]
	if(!comma3) return;
 8001f10:	693b      	ldr	r3, [r7, #16]
 8001f12:	2b00      	cmp	r3, #0
 8001f14:	d03c      	beq.n	8001f90 <SIM_Parse_Cfg+0xd4>

	// Estrai cfg_var (tra SET, e prima virgola)
	int var_len = comma2 - comma1 - 1;
 8001f16:	697a      	ldr	r2, [r7, #20]
 8001f18:	69bb      	ldr	r3, [r7, #24]
 8001f1a:	1ad3      	subs	r3, r2, r3
 8001f1c:	3b01      	subs	r3, #1
 8001f1e:	60fb      	str	r3, [r7, #12]
	if(var_len > 0 && var_len < sizeof(cfg_var)) 
 8001f20:	68fb      	ldr	r3, [r7, #12]
 8001f22:	2b00      	cmp	r3, #0
 8001f24:	dd0e      	ble.n	8001f44 <SIM_Parse_Cfg+0x88>
 8001f26:	68fb      	ldr	r3, [r7, #12]
 8001f28:	2b13      	cmp	r3, #19
 8001f2a:	d80b      	bhi.n	8001f44 <SIM_Parse_Cfg+0x88>
	{
		strncpy(cfg_var, comma1 + 1, var_len);
 8001f2c:	69bb      	ldr	r3, [r7, #24]
 8001f2e:	3301      	adds	r3, #1
 8001f30:	68fa      	ldr	r2, [r7, #12]
 8001f32:	4619      	mov	r1, r3
 8001f34:	4818      	ldr	r0, [pc, #96]	@ (8001f98 <SIM_Parse_Cfg+0xdc>)
 8001f36:	f014 fad4 	bl	80164e2 <strncpy>
		cfg_var[var_len] = '\0';
 8001f3a:	4a17      	ldr	r2, [pc, #92]	@ (8001f98 <SIM_Parse_Cfg+0xdc>)
 8001f3c:	68fb      	ldr	r3, [r7, #12]
 8001f3e:	4413      	add	r3, r2
 8001f40:	2200      	movs	r2, #0
 8001f42:	701a      	strb	r2, [r3, #0]
	}

	// Estrai cfg_idx
	cfg_idx = atoi(comma2 + 1);
 8001f44:	697b      	ldr	r3, [r7, #20]
 8001f46:	3301      	adds	r3, #1
 8001f48:	4618      	mov	r0, r3
 8001f4a:	f014 f9b9 	bl	80162c0 <atoi>
 8001f4e:	4603      	mov	r3, r0
 8001f50:	4a13      	ldr	r2, [pc, #76]	@ (8001fa0 <SIM_Parse_Cfg+0xe4>)
 8001f52:	6013      	str	r3, [r2, #0]

	// Estrai new_cfg_val
	int val_len = strlen(comma3 + 1);
 8001f54:	693b      	ldr	r3, [r7, #16]
 8001f56:	3301      	adds	r3, #1
 8001f58:	4618      	mov	r0, r3
 8001f5a:	f7fe f943 	bl	80001e4 <strlen>
 8001f5e:	4603      	mov	r3, r0
 8001f60:	60bb      	str	r3, [r7, #8]
	if(val_len > 0 && val_len < sizeof(new_cfg_val)) 
 8001f62:	68bb      	ldr	r3, [r7, #8]
 8001f64:	2b00      	cmp	r3, #0
 8001f66:	dd14      	ble.n	8001f92 <SIM_Parse_Cfg+0xd6>
 8001f68:	68bb      	ldr	r3, [r7, #8]
 8001f6a:	2b09      	cmp	r3, #9
 8001f6c:	d811      	bhi.n	8001f92 <SIM_Parse_Cfg+0xd6>
	{
		strncpy(new_cfg_val, comma3 + 1, val_len);
 8001f6e:	693b      	ldr	r3, [r7, #16]
 8001f70:	3301      	adds	r3, #1
 8001f72:	68ba      	ldr	r2, [r7, #8]
 8001f74:	4619      	mov	r1, r3
 8001f76:	4809      	ldr	r0, [pc, #36]	@ (8001f9c <SIM_Parse_Cfg+0xe0>)
 8001f78:	f014 fab3 	bl	80164e2 <strncpy>
		new_cfg_val[val_len] = '\0';
 8001f7c:	4a07      	ldr	r2, [pc, #28]	@ (8001f9c <SIM_Parse_Cfg+0xe0>)
 8001f7e:	68bb      	ldr	r3, [r7, #8]
 8001f80:	4413      	add	r3, r2
 8001f82:	2200      	movs	r2, #0
 8001f84:	701a      	strb	r2, [r3, #0]
 8001f86:	e004      	b.n	8001f92 <SIM_Parse_Cfg+0xd6>
	if(!comma1) return;
 8001f88:	bf00      	nop
 8001f8a:	e002      	b.n	8001f92 <SIM_Parse_Cfg+0xd6>
	if(!comma2) return;
 8001f8c:	bf00      	nop
 8001f8e:	e000      	b.n	8001f92 <SIM_Parse_Cfg+0xd6>
	if(!comma3) return;
 8001f90:	bf00      	nop
	}
}
 8001f92:	3720      	adds	r7, #32
 8001f94:	46bd      	mov	sp, r7
 8001f96:	bd80      	pop	{r7, pc}
 8001f98:	20005764 	.word	0x20005764
 8001f9c:	2000577c 	.word	0x2000577c
 8001fa0:	20005778 	.word	0x20005778

08001fa4 <SIM_Get_Cfg>:

/*-----RECUPERO VALORE DI CONFIGURAZIONE-----*/
void SIM_Get_Cfg(char* cmd_start)
{   
 8001fa4:	b580      	push	{r7, lr}
 8001fa6:	b086      	sub	sp, #24
 8001fa8:	af00      	add	r7, sp, #0
 8001faa:	6078      	str	r0, [r7, #4]
	memset(cfg_var, 0, sizeof(cfg_var));
 8001fac:	2214      	movs	r2, #20
 8001fae:	2100      	movs	r1, #0
 8001fb0:	4821      	ldr	r0, [pc, #132]	@ (8002038 <SIM_Get_Cfg+0x94>)
 8001fb2:	f014 fa6f 	bl	8016494 <memset>
	memset(new_cfg_val, 0, sizeof(new_cfg_val));
 8001fb6:	220a      	movs	r2, #10
 8001fb8:	2100      	movs	r1, #0
 8001fba:	4820      	ldr	r0, [pc, #128]	@ (800203c <SIM_Get_Cfg+0x98>)
 8001fbc:	f014 fa6a 	bl	8016494 <memset>
	
	char* pos = cmd_start + 4; // Salta "GET,"
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	3304      	adds	r3, #4
 8001fc4:	617b      	str	r3, [r7, #20]

	// Prima virgola (dopo GET)
	char* comma1 = strchr(pos, ',');
 8001fc6:	212c      	movs	r1, #44	@ 0x2c
 8001fc8:	6978      	ldr	r0, [r7, #20]
 8001fca:	f014 fa6b 	bl	80164a4 <strchr>
 8001fce:	6138      	str	r0, [r7, #16]
	if(!comma1) return;
 8001fd0:	693b      	ldr	r3, [r7, #16]
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	d029      	beq.n	800202a <SIM_Get_Cfg+0x86>

	// Seconda virgola
	char* comma2 = strchr(comma1 + 1, ',');
 8001fd6:	693b      	ldr	r3, [r7, #16]
 8001fd8:	3301      	adds	r3, #1
 8001fda:	212c      	movs	r1, #44	@ 0x2c
 8001fdc:	4618      	mov	r0, r3
 8001fde:	f014 fa61 	bl	80164a4 <strchr>
 8001fe2:	60f8      	str	r0, [r7, #12]
	if(!comma2) return;
 8001fe4:	68fb      	ldr	r3, [r7, #12]
 8001fe6:	2b00      	cmp	r3, #0
 8001fe8:	d021      	beq.n	800202e <SIM_Get_Cfg+0x8a>

	// Estrai cfg_var (tra GET, e prima virgola)
	int var_len = comma2 - comma1 - 1;
 8001fea:	68fa      	ldr	r2, [r7, #12]
 8001fec:	693b      	ldr	r3, [r7, #16]
 8001fee:	1ad3      	subs	r3, r2, r3
 8001ff0:	3b01      	subs	r3, #1
 8001ff2:	60bb      	str	r3, [r7, #8]
	if(var_len > 0 && var_len < sizeof(cfg_var)) 
 8001ff4:	68bb      	ldr	r3, [r7, #8]
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	dd0e      	ble.n	8002018 <SIM_Get_Cfg+0x74>
 8001ffa:	68bb      	ldr	r3, [r7, #8]
 8001ffc:	2b13      	cmp	r3, #19
 8001ffe:	d80b      	bhi.n	8002018 <SIM_Get_Cfg+0x74>
	{
		strncpy(cfg_var, comma1 + 1, var_len);
 8002000:	693b      	ldr	r3, [r7, #16]
 8002002:	3301      	adds	r3, #1
 8002004:	68ba      	ldr	r2, [r7, #8]
 8002006:	4619      	mov	r1, r3
 8002008:	480b      	ldr	r0, [pc, #44]	@ (8002038 <SIM_Get_Cfg+0x94>)
 800200a:	f014 fa6a 	bl	80164e2 <strncpy>
		cfg_var[var_len] = '\0';
 800200e:	4a0a      	ldr	r2, [pc, #40]	@ (8002038 <SIM_Get_Cfg+0x94>)
 8002010:	68bb      	ldr	r3, [r7, #8]
 8002012:	4413      	add	r3, r2
 8002014:	2200      	movs	r2, #0
 8002016:	701a      	strb	r2, [r3, #0]
	}

	// Estrai cfg_idx
	cfg_idx = atoi(comma2 + 1);
 8002018:	68fb      	ldr	r3, [r7, #12]
 800201a:	3301      	adds	r3, #1
 800201c:	4618      	mov	r0, r3
 800201e:	f014 f94f 	bl	80162c0 <atoi>
 8002022:	4603      	mov	r3, r0
 8002024:	4a06      	ldr	r2, [pc, #24]	@ (8002040 <SIM_Get_Cfg+0x9c>)
 8002026:	6013      	str	r3, [r2, #0]
 8002028:	e002      	b.n	8002030 <SIM_Get_Cfg+0x8c>
	if(!comma1) return;
 800202a:	bf00      	nop
 800202c:	e000      	b.n	8002030 <SIM_Get_Cfg+0x8c>
	if(!comma2) return;
 800202e:	bf00      	nop
}
 8002030:	3718      	adds	r7, #24
 8002032:	46bd      	mov	sp, r7
 8002034:	bd80      	pop	{r7, pc}
 8002036:	bf00      	nop
 8002038:	20005764 	.word	0x20005764
 800203c:	2000577c 	.word	0x2000577c
 8002040:	20005778 	.word	0x20005778

08002044 <SIM_Send_TCP>:
    SIM_Wait_Response("OK");
}

/*-----INVIO DATI AL SERVER TCP-----*/
void SIM_Send_TCP(char* data)
{
 8002044:	b580      	push	{r7, lr}
 8002046:	b090      	sub	sp, #64	@ 0x40
 8002048:	af00      	add	r7, sp, #0
 800204a:	6078      	str	r0, [r7, #4]
    char cmd[50];
	uint16_t size = (uint16_t)strlen(data);
 800204c:	6878      	ldr	r0, [r7, #4]
 800204e:	f7fe f8c9 	bl	80001e4 <strlen>
 8002052:	4603      	mov	r3, r0
 8002054:	87fb      	strh	r3, [r7, #62]	@ 0x3e

    sprintf(cmd, "AT+CIPSEND=%u\r", size);
 8002056:	8ffa      	ldrh	r2, [r7, #62]	@ 0x3e
 8002058:	f107 030c 	add.w	r3, r7, #12
 800205c:	490c      	ldr	r1, [pc, #48]	@ (8002090 <SIM_Send_TCP+0x4c>)
 800205e:	4618      	mov	r0, r3
 8002060:	f014 f9b8 	bl	80163d4 <siprintf>
    SIM_Send_Command(cmd);
 8002064:	f107 030c 	add.w	r3, r7, #12
 8002068:	4618      	mov	r0, r3
 800206a:	f7ff fd63 	bl	8001b34 <SIM_Send_Command>

    SIM_Wait_Response(">");
 800206e:	4809      	ldr	r0, [pc, #36]	@ (8002094 <SIM_Send_TCP+0x50>)
 8002070:	f000 f8f4 	bl	800225c <SIM_Wait_Response>

    HAL_UART_Transmit(SIM_UART, (uint8_t*)data, size, 1000);
 8002074:	8ffa      	ldrh	r2, [r7, #62]	@ 0x3e
 8002076:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800207a:	6879      	ldr	r1, [r7, #4]
 800207c:	4806      	ldr	r0, [pc, #24]	@ (8002098 <SIM_Send_TCP+0x54>)
 800207e:	f012 fe61 	bl	8014d44 <HAL_UART_Transmit>
    
    SIM_Wait_Response("SEND OK");
 8002082:	4806      	ldr	r0, [pc, #24]	@ (800209c <SIM_Send_TCP+0x58>)
 8002084:	f000 f8ea 	bl	800225c <SIM_Wait_Response>
}
 8002088:	bf00      	nop
 800208a:	3740      	adds	r7, #64	@ 0x40
 800208c:	46bd      	mov	sp, r7
 800208e:	bd80      	pop	{r7, pc}
 8002090:	080178b0 	.word	0x080178b0
 8002094:	080178ac 	.word	0x080178ac
 8002098:	200004bc 	.word	0x200004bc
 800209c:	080178c0 	.word	0x080178c0

080020a0 <SIM_Send_TCP_Chunk_DMA>:

/*-----INVIO DATI AL SERVER TCP CON DMA-----*/
void SIM_Send_TCP_Chunk_DMA(uint16_t size)
{
 80020a0:	b580      	push	{r7, lr}
 80020a2:	b090      	sub	sp, #64	@ 0x40
 80020a4:	af00      	add	r7, sp, #0
 80020a6:	4603      	mov	r3, r0
 80020a8:	80fb      	strh	r3, [r7, #6]
    char cmd[50];

    sprintf(cmd, "AT+CIPSEND=%u\r", size);
 80020aa:	88fa      	ldrh	r2, [r7, #6]
 80020ac:	f107 030c 	add.w	r3, r7, #12
 80020b0:	4906      	ldr	r1, [pc, #24]	@ (80020cc <SIM_Send_TCP_Chunk_DMA+0x2c>)
 80020b2:	4618      	mov	r0, r3
 80020b4:	f014 f98e 	bl	80163d4 <siprintf>
    SIM_Send_Command_DMA(cmd);
 80020b8:	f107 030c 	add.w	r3, r7, #12
 80020bc:	4618      	mov	r0, r3
 80020be:	f7ff fd4f 	bl	8001b60 <SIM_Send_Command_DMA>
}
 80020c2:	bf00      	nop
 80020c4:	3740      	adds	r7, #64	@ 0x40
 80020c6:	46bd      	mov	sp, r7
 80020c8:	bd80      	pop	{r7, pc}
 80020ca:	bf00      	nop
 80020cc:	080178b0 	.word	0x080178b0

080020d0 <SIM_Send_Infos>:

/*-----INVIO INFORMAZIONI AL SERVER MQTT-----*/
void SIM_Send_Infos(void)
{
 80020d0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80020d2:	f5ad 7d3f 	sub.w	sp, sp, #764	@ 0x2fc
 80020d6:	af10      	add	r7, sp, #64	@ 0x40
	uint16_t len = 0;
 80020d8:	2300      	movs	r3, #0
 80020da:	f8a7 32b6 	strh.w	r3, [r7, #694]	@ 0x2b6
	char command[128];
	char infos[512];
	uint16_t new_temp = 0;
 80020de:	2300      	movs	r3, #0
 80020e0:	f8a7 32b4 	strh.w	r3, [r7, #692]	@ 0x2b4

	BC_MultiRead_Reg(REG3B_VBAT_ADC, &Vbatt);
 80020e4:	4953      	ldr	r1, [pc, #332]	@ (8002234 <SIM_Send_Infos+0x164>)
 80020e6:	203b      	movs	r0, #59	@ 0x3b
 80020e8:	f000 fb40 	bl	800276c <BC_MultiRead_Reg>
	INA3221_Read_Measure(&Supply);
 80020ec:	4852      	ldr	r0, [pc, #328]	@ (8002238 <SIM_Send_Infos+0x168>)
 80020ee:	f7fe ff9b 	bl	8001028 <INA3221_Read_Measure>
	if((new_temp = Read_Temperature()) != 0)
 80020f2:	f7fe ff39 	bl	8000f68 <Read_Temperature>
 80020f6:	4603      	mov	r3, r0
 80020f8:	f8a7 32b4 	strh.w	r3, [r7, #692]	@ 0x2b4
 80020fc:	f8b7 32b4 	ldrh.w	r3, [r7, #692]	@ 0x2b4
 8002100:	2b00      	cmp	r3, #0
 8002102:	d003      	beq.n	800210c <SIM_Send_Infos+0x3c>
	{
		Temperature = new_temp;
 8002104:	4a4d      	ldr	r2, [pc, #308]	@ (800223c <SIM_Send_Infos+0x16c>)
 8002106:	f8b7 32b4 	ldrh.w	r3, [r7, #692]	@ 0x2b4
 800210a:	8013      	strh	r3, [r2, #0]
	}
	uint16_t fw_ver = FW_VERSION;
 800210c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002110:	f8a7 32b2 	strh.w	r3, [r7, #690]	@ 0x2b2

	sprintf(infos, "R:%u,%u,%u,%u,%u,%u,%u,%u,%u,%u,%u,%u,%u,%u,%u,%u,%u,%u", config.device_id, fw_ver, sys.onDate.Year, sys.onDate.Month, sys.onDate.Date, sys.onTime.Hours, sys.onTime.Minutes, sys.onTime.Seconds, Vbatt, config.samp_freq, config.buffering_secs, Supply.v1, Supply.v2, Supply.v3, Supply.i1, Supply.i2, Supply.i3, Temperature);
 8002114:	4b4a      	ldr	r3, [pc, #296]	@ (8002240 <SIM_Send_Infos+0x170>)
 8002116:	781b      	ldrb	r3, [r3, #0]
 8002118:	469c      	mov	ip, r3
 800211a:	f8b7 42b2 	ldrh.w	r4, [r7, #690]	@ 0x2b2
 800211e:	4b49      	ldr	r3, [pc, #292]	@ (8002244 <SIM_Send_Infos+0x174>)
 8002120:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002124:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8002128:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800212a:	4b46      	ldr	r3, [pc, #280]	@ (8002244 <SIM_Send_Infos+0x174>)
 800212c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002130:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002134:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002136:	4b43      	ldr	r3, [pc, #268]	@ (8002244 <SIM_Send_Infos+0x174>)
 8002138:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800213c:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8002140:	627b      	str	r3, [r7, #36]	@ 0x24
 8002142:	4b40      	ldr	r3, [pc, #256]	@ (8002244 <SIM_Send_Infos+0x174>)
 8002144:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002148:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800214c:	623b      	str	r3, [r7, #32]
 800214e:	4b3d      	ldr	r3, [pc, #244]	@ (8002244 <SIM_Send_Infos+0x174>)
 8002150:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002154:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8002158:	61fb      	str	r3, [r7, #28]
 800215a:	4b3a      	ldr	r3, [pc, #232]	@ (8002244 <SIM_Send_Infos+0x174>)
 800215c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002160:	f893 3046 	ldrb.w	r3, [r3, #70]	@ 0x46
 8002164:	61bb      	str	r3, [r7, #24]
 8002166:	4b33      	ldr	r3, [pc, #204]	@ (8002234 <SIM_Send_Infos+0x164>)
 8002168:	881b      	ldrh	r3, [r3, #0]
 800216a:	617b      	str	r3, [r7, #20]
 800216c:	4b34      	ldr	r3, [pc, #208]	@ (8002240 <SIM_Send_Infos+0x170>)
 800216e:	885b      	ldrh	r3, [r3, #2]
 8002170:	613b      	str	r3, [r7, #16]
 8002172:	4b33      	ldr	r3, [pc, #204]	@ (8002240 <SIM_Send_Infos+0x170>)
 8002174:	791b      	ldrb	r3, [r3, #4]
 8002176:	60fb      	str	r3, [r7, #12]
 8002178:	4b2f      	ldr	r3, [pc, #188]	@ (8002238 <SIM_Send_Infos+0x168>)
 800217a:	881b      	ldrh	r3, [r3, #0]
 800217c:	60bb      	str	r3, [r7, #8]
 800217e:	4b2e      	ldr	r3, [pc, #184]	@ (8002238 <SIM_Send_Infos+0x168>)
 8002180:	885b      	ldrh	r3, [r3, #2]
 8002182:	607b      	str	r3, [r7, #4]
 8002184:	4b2c      	ldr	r3, [pc, #176]	@ (8002238 <SIM_Send_Infos+0x168>)
 8002186:	889b      	ldrh	r3, [r3, #4]
 8002188:	461e      	mov	r6, r3
 800218a:	4b2b      	ldr	r3, [pc, #172]	@ (8002238 <SIM_Send_Infos+0x168>)
 800218c:	88db      	ldrh	r3, [r3, #6]
 800218e:	461d      	mov	r5, r3
 8002190:	4b29      	ldr	r3, [pc, #164]	@ (8002238 <SIM_Send_Infos+0x168>)
 8002192:	891b      	ldrh	r3, [r3, #8]
 8002194:	4619      	mov	r1, r3
 8002196:	4b28      	ldr	r3, [pc, #160]	@ (8002238 <SIM_Send_Infos+0x168>)
 8002198:	895b      	ldrh	r3, [r3, #10]
 800219a:	461a      	mov	r2, r3
 800219c:	4b27      	ldr	r3, [pc, #156]	@ (800223c <SIM_Send_Infos+0x16c>)
 800219e:	881b      	ldrh	r3, [r3, #0]
 80021a0:	f107 0030 	add.w	r0, r7, #48	@ 0x30
 80021a4:	930f      	str	r3, [sp, #60]	@ 0x3c
 80021a6:	920e      	str	r2, [sp, #56]	@ 0x38
 80021a8:	910d      	str	r1, [sp, #52]	@ 0x34
 80021aa:	950c      	str	r5, [sp, #48]	@ 0x30
 80021ac:	960b      	str	r6, [sp, #44]	@ 0x2c
 80021ae:	687a      	ldr	r2, [r7, #4]
 80021b0:	920a      	str	r2, [sp, #40]	@ 0x28
 80021b2:	68ba      	ldr	r2, [r7, #8]
 80021b4:	9209      	str	r2, [sp, #36]	@ 0x24
 80021b6:	68fa      	ldr	r2, [r7, #12]
 80021b8:	9208      	str	r2, [sp, #32]
 80021ba:	693a      	ldr	r2, [r7, #16]
 80021bc:	9207      	str	r2, [sp, #28]
 80021be:	697a      	ldr	r2, [r7, #20]
 80021c0:	9206      	str	r2, [sp, #24]
 80021c2:	69ba      	ldr	r2, [r7, #24]
 80021c4:	9205      	str	r2, [sp, #20]
 80021c6:	69fa      	ldr	r2, [r7, #28]
 80021c8:	9204      	str	r2, [sp, #16]
 80021ca:	6a3a      	ldr	r2, [r7, #32]
 80021cc:	9203      	str	r2, [sp, #12]
 80021ce:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80021d0:	9202      	str	r2, [sp, #8]
 80021d2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80021d4:	9201      	str	r2, [sp, #4]
 80021d6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80021d8:	9300      	str	r3, [sp, #0]
 80021da:	4623      	mov	r3, r4
 80021dc:	4662      	mov	r2, ip
 80021de:	491a      	ldr	r1, [pc, #104]	@ (8002248 <SIM_Send_Infos+0x178>)
 80021e0:	f014 f8f8 	bl	80163d4 <siprintf>
	len = (uint16_t)strlen(infos);
 80021e4:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80021e8:	4618      	mov	r0, r3
 80021ea:	f7fd fffb 	bl	80001e4 <strlen>
 80021ee:	4603      	mov	r3, r0
 80021f0:	f8a7 32b6 	strh.w	r3, [r7, #694]	@ 0x2b6

	sprintf(command, "AT+CIPSEND=%u\r",len);
 80021f4:	f8b7 22b6 	ldrh.w	r2, [r7, #694]	@ 0x2b6
 80021f8:	f507 730c 	add.w	r3, r7, #560	@ 0x230
 80021fc:	4913      	ldr	r1, [pc, #76]	@ (800224c <SIM_Send_Infos+0x17c>)
 80021fe:	4618      	mov	r0, r3
 8002200:	f014 f8e8 	bl	80163d4 <siprintf>
	SIM_Send_Command(command);
 8002204:	f507 730c 	add.w	r3, r7, #560	@ 0x230
 8002208:	4618      	mov	r0, r3
 800220a:	f7ff fc93 	bl	8001b34 <SIM_Send_Command>
	SIM_Wait_Response(">");
 800220e:	4810      	ldr	r0, [pc, #64]	@ (8002250 <SIM_Send_Infos+0x180>)
 8002210:	f000 f824 	bl	800225c <SIM_Wait_Response>
	HAL_UART_Transmit(SIM_UART, (uint8_t*)infos, len, 100);
 8002214:	f8b7 22b6 	ldrh.w	r2, [r7, #694]	@ 0x2b6
 8002218:	f107 0130 	add.w	r1, r7, #48	@ 0x30
 800221c:	2364      	movs	r3, #100	@ 0x64
 800221e:	480d      	ldr	r0, [pc, #52]	@ (8002254 <SIM_Send_Infos+0x184>)
 8002220:	f012 fd90 	bl	8014d44 <HAL_UART_Transmit>
	SIM_Wait_Response("OK");
 8002224:	480c      	ldr	r0, [pc, #48]	@ (8002258 <SIM_Send_Infos+0x188>)
 8002226:	f000 f819 	bl	800225c <SIM_Wait_Response>
}
 800222a:	bf00      	nop
 800222c:	f507 772f 	add.w	r7, r7, #700	@ 0x2bc
 8002230:	46bd      	mov	sp, r7
 8002232:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002234:	200041c2 	.word	0x200041c2
 8002238:	200038e0 	.word	0x200038e0
 800223c:	200041c0 	.word	0x200041c0
 8002240:	20001784 	.word	0x20001784
 8002244:	200005d8 	.word	0x200005d8
 8002248:	080178c8 	.word	0x080178c8
 800224c:	080178b0 	.word	0x080178b0
 8002250:	080178ac 	.word	0x080178ac
 8002254:	200004bc 	.word	0x200004bc
 8002258:	08017684 	.word	0x08017684

0800225c <SIM_Wait_Response>:

/*-----ATTESA RISPOSTA-----*/
int SIM_Wait_Response(const char* expected)
{
 800225c:	b580      	push	{r7, lr}
 800225e:	b0c8      	sub	sp, #288	@ 0x120
 8002260:	af02      	add	r7, sp, #8
 8002262:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8002266:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 800226a:	6018      	str	r0, [r3, #0]
    char rx[256];
    memset(rx, 0, sizeof(rx));
 800226c:	f107 0310 	add.w	r3, r7, #16
 8002270:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002274:	2100      	movs	r1, #0
 8002276:	4618      	mov	r0, r3
 8002278:	f014 f90c 	bl	8016494 <memset>
    uint16_t timeout = 10000; // 10 secondi
 800227c:	f242 7310 	movw	r3, #10000	@ 0x2710
 8002280:	f8a7 3116 	strh.w	r3, [r7, #278]	@ 0x116
    uint32_t start_time = HAL_GetTick();
 8002284:	f009 f83e 	bl	800b304 <HAL_GetTick>
 8002288:	f8c7 0110 	str.w	r0, [r7, #272]	@ 0x110

    while((HAL_GetTick() - start_time) < timeout)
 800228c:	e02a      	b.n	80022e4 <SIM_Wait_Response+0x88>
    {
        uint16_t RxLen = 0;
 800228e:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8002292:	f5a3 7385 	sub.w	r3, r3, #266	@ 0x10a
 8002296:	2200      	movs	r2, #0
 8002298:	801a      	strh	r2, [r3, #0]
        HAL_UARTEx_ReceiveToIdle(SIM_UART, (uint8_t*)rx, sizeof(rx), &RxLen, 500);
 800229a:	f107 030e 	add.w	r3, r7, #14
 800229e:	f107 0110 	add.w	r1, r7, #16
 80022a2:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 80022a6:	9200      	str	r2, [sp, #0]
 80022a8:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80022ac:	4816      	ldr	r0, [pc, #88]	@ (8002308 <SIM_Wait_Response+0xac>)
 80022ae:	f013 feb0 	bl	8016012 <HAL_UARTEx_ReceiveToIdle>
        
        if(RxLen > 0)
 80022b2:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 80022b6:	f5a3 7385 	sub.w	r3, r3, #266	@ 0x10a
 80022ba:	881b      	ldrh	r3, [r3, #0]
 80022bc:	2b00      	cmp	r3, #0
 80022be:	d00e      	beq.n	80022de <SIM_Wait_Response+0x82>
        {
        	if(strstr(rx, expected))
 80022c0:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 80022c4:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 80022c8:	f107 0210 	add.w	r2, r7, #16
 80022cc:	6819      	ldr	r1, [r3, #0]
 80022ce:	4610      	mov	r0, r2
 80022d0:	f014 f91a 	bl	8016508 <strstr>
 80022d4:	4603      	mov	r3, r0
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	d001      	beq.n	80022de <SIM_Wait_Response+0x82>
        	{
        		return 0;
 80022da:	2300      	movs	r3, #0
 80022dc:	e00e      	b.n	80022fc <SIM_Wait_Response+0xa0>
        	}
        }
        
        HAL_Delay(10);
 80022de:	200a      	movs	r0, #10
 80022e0:	f009 f81c 	bl	800b31c <HAL_Delay>
    while((HAL_GetTick() - start_time) < timeout)
 80022e4:	f009 f80e 	bl	800b304 <HAL_GetTick>
 80022e8:	4602      	mov	r2, r0
 80022ea:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 80022ee:	1ad2      	subs	r2, r2, r3
 80022f0:	f8b7 3116 	ldrh.w	r3, [r7, #278]	@ 0x116
 80022f4:	429a      	cmp	r2, r3
 80022f6:	d3ca      	bcc.n	800228e <SIM_Wait_Response+0x32>
    }
	return -1;
 80022f8:	f04f 33ff 	mov.w	r3, #4294967295
}
 80022fc:	4618      	mov	r0, r3
 80022fe:	f507 778c 	add.w	r7, r7, #280	@ 0x118
 8002302:	46bd      	mov	sp, r7
 8002304:	bd80      	pop	{r7, pc}
 8002306:	bf00      	nop
 8002308:	200004bc 	.word	0x200004bc

0800230c <SIM_Check_Connection>:

/*-----CONTROLLA STATO CONNESSIONE-----*/
void SIM_Check_Connection(void)
{
 800230c:	b580      	push	{r7, lr}
 800230e:	f5ad 7d04 	sub.w	sp, sp, #528	@ 0x210
 8002312:	af00      	add	r7, sp, #0
	char command_sim[256];
	char response_sim[256];

	int registered = 0;
 8002314:	2300      	movs	r3, #0
 8002316:	f8c7 320c 	str.w	r3, [r7, #524]	@ 0x20c
    while(!registered)
 800231a:	e041      	b.n	80023a0 <SIM_Check_Connection+0x94>
    {
        SIM_Send_Command("AT+CEREG?\r");
 800231c:	483d      	ldr	r0, [pc, #244]	@ (8002414 <SIM_Check_Connection+0x108>)
 800231e:	f7ff fc09 	bl	8001b34 <SIM_Send_Command>
        SIM_Receive_Response(response_sim, 5000);
 8002322:	f107 0308 	add.w	r3, r7, #8
 8002326:	f241 3188 	movw	r1, #5000	@ 0x1388
 800232a:	4618      	mov	r0, r3
 800232c:	f7ff fc2e 	bl	8001b8c <SIM_Receive_Response>
        int n = 0, stat_value = 0;
 8002330:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 8002334:	f5a3 7303 	sub.w	r3, r3, #524	@ 0x20c
 8002338:	2200      	movs	r2, #0
 800233a:	601a      	str	r2, [r3, #0]
 800233c:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 8002340:	f5a3 7304 	sub.w	r3, r3, #528	@ 0x210
 8002344:	2200      	movs	r2, #0
 8002346:	601a      	str	r2, [r3, #0]
        char* cereg_ptr = strstr(response_sim, "+CEREG:");
 8002348:	f107 0308 	add.w	r3, r7, #8
 800234c:	4932      	ldr	r1, [pc, #200]	@ (8002418 <SIM_Check_Connection+0x10c>)
 800234e:	4618      	mov	r0, r3
 8002350:	f014 f8da 	bl	8016508 <strstr>
 8002354:	f8c7 0208 	str.w	r0, [r7, #520]	@ 0x208
        if(cereg_ptr && sscanf(cereg_ptr, "+CEREG: %d,%d", &n, &stat_value) >= 2 && (stat_value == 1 || stat_value == 5))
 8002358:	f8d7 3208 	ldr.w	r3, [r7, #520]	@ 0x208
 800235c:	2b00      	cmp	r3, #0
 800235e:	d01b      	beq.n	8002398 <SIM_Check_Connection+0x8c>
 8002360:	463b      	mov	r3, r7
 8002362:	1d3a      	adds	r2, r7, #4
 8002364:	492d      	ldr	r1, [pc, #180]	@ (800241c <SIM_Check_Connection+0x110>)
 8002366:	f8d7 0208 	ldr.w	r0, [r7, #520]	@ 0x208
 800236a:	f014 f855 	bl	8016418 <siscanf>
 800236e:	4603      	mov	r3, r0
 8002370:	2b01      	cmp	r3, #1
 8002372:	dd11      	ble.n	8002398 <SIM_Check_Connection+0x8c>
 8002374:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 8002378:	f5a3 7304 	sub.w	r3, r3, #528	@ 0x210
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	2b01      	cmp	r3, #1
 8002380:	d006      	beq.n	8002390 <SIM_Check_Connection+0x84>
 8002382:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 8002386:	f5a3 7304 	sub.w	r3, r3, #528	@ 0x210
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	2b05      	cmp	r3, #5
 800238e:	d103      	bne.n	8002398 <SIM_Check_Connection+0x8c>
        {
            registered = 1;
 8002390:	2301      	movs	r3, #1
 8002392:	f8c7 320c 	str.w	r3, [r7, #524]	@ 0x20c
 8002396:	e003      	b.n	80023a0 <SIM_Check_Connection+0x94>
        }
        else
        {
            HAL_Delay(2000);
 8002398:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 800239c:	f008 ffbe 	bl	800b31c <HAL_Delay>
    while(!registered)
 80023a0:	f8d7 320c 	ldr.w	r3, [r7, #524]	@ 0x20c
 80023a4:	2b00      	cmp	r3, #0
 80023a6:	d0b9      	beq.n	800231c <SIM_Check_Connection+0x10>
        }
    }

	SIM_Send_Command("AT+CIPSTATUS=0\r");                                                        
 80023a8:	481d      	ldr	r0, [pc, #116]	@ (8002420 <SIM_Check_Connection+0x114>)
 80023aa:	f7ff fbc3 	bl	8001b34 <SIM_Send_Command>
	SIM_Receive_Response(response_sim, 5000);
 80023ae:	f107 0308 	add.w	r3, r7, #8
 80023b2:	f241 3188 	movw	r1, #5000	@ 0x1388
 80023b6:	4618      	mov	r0, r3
 80023b8:	f7ff fbe8 	bl	8001b8c <SIM_Receive_Response>
	while(!SIM_Check_TCP_State(response_sim))
 80023bc:	e01c      	b.n	80023f8 <SIM_Check_Connection+0xec>
	{
		sprintf(command_sim, "AT+CIPSTART=\"TCP\",\"%s\",%s\r", sys.TCP.IP_address, sys.TCP.Port);       
 80023be:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 80023c2:	4b18      	ldr	r3, [pc, #96]	@ (8002424 <SIM_Check_Connection+0x118>)
 80023c4:	4a18      	ldr	r2, [pc, #96]	@ (8002428 <SIM_Check_Connection+0x11c>)
 80023c6:	4919      	ldr	r1, [pc, #100]	@ (800242c <SIM_Check_Connection+0x120>)
 80023c8:	f014 f804 	bl	80163d4 <siprintf>
		SIM_Send_Command(command_sim);
 80023cc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80023d0:	4618      	mov	r0, r3
 80023d2:	f7ff fbaf 	bl	8001b34 <SIM_Send_Command>
		SIM_Wait_Response("CONNECT OK");
 80023d6:	4816      	ldr	r0, [pc, #88]	@ (8002430 <SIM_Check_Connection+0x124>)
 80023d8:	f7ff ff40 	bl	800225c <SIM_Wait_Response>
		SIM_Send_Command("AT+CIPSTATUS=0\r");                                                        
 80023dc:	4810      	ldr	r0, [pc, #64]	@ (8002420 <SIM_Check_Connection+0x114>)
 80023de:	f7ff fba9 	bl	8001b34 <SIM_Send_Command>
		SIM_Receive_Response(response_sim, 5000);
 80023e2:	f107 0308 	add.w	r3, r7, #8
 80023e6:	f241 3188 	movw	r1, #5000	@ 0x1388
 80023ea:	4618      	mov	r0, r3
 80023ec:	f7ff fbce 	bl	8001b8c <SIM_Receive_Response>
		HAL_Delay(2000);
 80023f0:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 80023f4:	f008 ff92 	bl	800b31c <HAL_Delay>
	while(!SIM_Check_TCP_State(response_sim))
 80023f8:	f107 0308 	add.w	r3, r7, #8
 80023fc:	4618      	mov	r0, r3
 80023fe:	f7ff fc23 	bl	8001c48 <SIM_Check_TCP_State>
 8002402:	4603      	mov	r3, r0
 8002404:	2b00      	cmp	r3, #0
 8002406:	d0da      	beq.n	80023be <SIM_Check_Connection+0xb2>
	}
}
 8002408:	bf00      	nop
 800240a:	bf00      	nop
 800240c:	f507 7704 	add.w	r7, r7, #528	@ 0x210
 8002410:	46bd      	mov	sp, r7
 8002412:	bd80      	pop	{r7, pc}
 8002414:	08017720 	.word	0x08017720
 8002418:	0801772c 	.word	0x0801772c
 800241c:	08017734 	.word	0x08017734
 8002420:	080177f0 	.word	0x080177f0
 8002424:	2000171c 	.word	0x2000171c
 8002428:	200016b8 	.word	0x200016b8
 800242c:	080177c8 	.word	0x080177c8
 8002430:	080177e4 	.word	0x080177e4

08002434 <Base64_Decode>:
#include "global_variables.h"


/*-----DECODIFICA BASE64-----*/
size_t Base64_Decode(const char *in, uint8_t *out, size_t out_len)
{
 8002434:	b480      	push	{r7}
 8002436:	b08b      	sub	sp, #44	@ 0x2c
 8002438:	af00      	add	r7, sp, #0
 800243a:	60f8      	str	r0, [r7, #12]
 800243c:	60b9      	str	r1, [r7, #8]
 800243e:	607a      	str	r2, [r7, #4]
    size_t i = 0, j = 0;
 8002440:	2300      	movs	r3, #0
 8002442:	627b      	str	r3, [r7, #36]	@ 0x24
 8002444:	2300      	movs	r3, #0
 8002446:	623b      	str	r3, [r7, #32]
    int v = 0, val = 0;
 8002448:	2300      	movs	r3, #0
 800244a:	61fb      	str	r3, [r7, #28]
 800244c:	2300      	movs	r3, #0
 800244e:	61bb      	str	r3, [r7, #24]
    while (in[i] && in[i] != '\n' && in[i] != '\r')
 8002450:	e02b      	b.n	80024aa <Base64_Decode+0x76>
    {
        unsigned char c = base64_table[(unsigned char)in[i++]];
 8002452:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002454:	1c5a      	adds	r2, r3, #1
 8002456:	627a      	str	r2, [r7, #36]	@ 0x24
 8002458:	68fa      	ldr	r2, [r7, #12]
 800245a:	4413      	add	r3, r2
 800245c:	781b      	ldrb	r3, [r3, #0]
 800245e:	461a      	mov	r2, r3
 8002460:	4b1e      	ldr	r3, [pc, #120]	@ (80024dc <Base64_Decode+0xa8>)
 8002462:	5c9b      	ldrb	r3, [r3, r2]
 8002464:	75fb      	strb	r3, [r7, #23]
        if (c == 0x80) continue; // carattere non valido
 8002466:	7dfb      	ldrb	r3, [r7, #23]
 8002468:	2b80      	cmp	r3, #128	@ 0x80
 800246a:	d01d      	beq.n	80024a8 <Base64_Decode+0x74>
        val = (val << 6) | c;
 800246c:	69bb      	ldr	r3, [r7, #24]
 800246e:	019a      	lsls	r2, r3, #6
 8002470:	7dfb      	ldrb	r3, [r7, #23]
 8002472:	4313      	orrs	r3, r2
 8002474:	61bb      	str	r3, [r7, #24]
        v += 6;
 8002476:	69fb      	ldr	r3, [r7, #28]
 8002478:	3306      	adds	r3, #6
 800247a:	61fb      	str	r3, [r7, #28]
        if (v >= 8)
 800247c:	69fb      	ldr	r3, [r7, #28]
 800247e:	2b07      	cmp	r3, #7
 8002480:	dd13      	ble.n	80024aa <Base64_Decode+0x76>
        {
            v -= 8;
 8002482:	69fb      	ldr	r3, [r7, #28]
 8002484:	3b08      	subs	r3, #8
 8002486:	61fb      	str	r3, [r7, #28]
            if (j < out_len) out[j++] = (val >> v) & 0xFF;
 8002488:	6a3a      	ldr	r2, [r7, #32]
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	429a      	cmp	r2, r3
 800248e:	d20c      	bcs.n	80024aa <Base64_Decode+0x76>
 8002490:	69ba      	ldr	r2, [r7, #24]
 8002492:	69fb      	ldr	r3, [r7, #28]
 8002494:	fa42 f103 	asr.w	r1, r2, r3
 8002498:	6a3b      	ldr	r3, [r7, #32]
 800249a:	1c5a      	adds	r2, r3, #1
 800249c:	623a      	str	r2, [r7, #32]
 800249e:	68ba      	ldr	r2, [r7, #8]
 80024a0:	4413      	add	r3, r2
 80024a2:	b2ca      	uxtb	r2, r1
 80024a4:	701a      	strb	r2, [r3, #0]
 80024a6:	e000      	b.n	80024aa <Base64_Decode+0x76>
        if (c == 0x80) continue; // carattere non valido
 80024a8:	bf00      	nop
    while (in[i] && in[i] != '\n' && in[i] != '\r')
 80024aa:	68fa      	ldr	r2, [r7, #12]
 80024ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80024ae:	4413      	add	r3, r2
 80024b0:	781b      	ldrb	r3, [r3, #0]
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	d00b      	beq.n	80024ce <Base64_Decode+0x9a>
 80024b6:	68fa      	ldr	r2, [r7, #12]
 80024b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80024ba:	4413      	add	r3, r2
 80024bc:	781b      	ldrb	r3, [r3, #0]
 80024be:	2b0a      	cmp	r3, #10
 80024c0:	d005      	beq.n	80024ce <Base64_Decode+0x9a>
 80024c2:	68fa      	ldr	r2, [r7, #12]
 80024c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80024c6:	4413      	add	r3, r2
 80024c8:	781b      	ldrb	r3, [r3, #0]
 80024ca:	2b0d      	cmp	r3, #13
 80024cc:	d1c1      	bne.n	8002452 <Base64_Decode+0x1e>
        }
    }
    return j; // numero di byte decodificati
 80024ce:	6a3b      	ldr	r3, [r7, #32]
}
 80024d0:	4618      	mov	r0, r3
 80024d2:	372c      	adds	r7, #44	@ 0x2c
 80024d4:	46bd      	mov	sp, r7
 80024d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024da:	4770      	bx	lr
 80024dc:	08017c88 	.word	0x08017c88

080024e0 <Base64_Encode>:

/*-----CODIFICA BASE64-----*/
size_t Base64_Encode(const uint8_t *in, size_t in_len, char *out, size_t out_size)
{
 80024e0:	b480      	push	{r7}
 80024e2:	b08b      	sub	sp, #44	@ 0x2c
 80024e4:	af00      	add	r7, sp, #0
 80024e6:	60f8      	str	r0, [r7, #12]
 80024e8:	60b9      	str	r1, [r7, #8]
 80024ea:	607a      	str	r2, [r7, #4]
 80024ec:	603b      	str	r3, [r7, #0]
    size_t i = 0, j = 0;
 80024ee:	2300      	movs	r3, #0
 80024f0:	627b      	str	r3, [r7, #36]	@ 0x24
 80024f2:	2300      	movs	r3, #0
 80024f4:	623b      	str	r3, [r7, #32]
    while (i < in_len && (j + 4) <= out_size)
 80024f6:	e06c      	b.n	80025d2 <Base64_Encode+0xf2>
    {
        uint32_t octet_a = i < in_len ? in[i++] : 0;
 80024f8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80024fa:	68bb      	ldr	r3, [r7, #8]
 80024fc:	429a      	cmp	r2, r3
 80024fe:	d206      	bcs.n	800250e <Base64_Encode+0x2e>
 8002500:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002502:	1c5a      	adds	r2, r3, #1
 8002504:	627a      	str	r2, [r7, #36]	@ 0x24
 8002506:	68fa      	ldr	r2, [r7, #12]
 8002508:	4413      	add	r3, r2
 800250a:	781b      	ldrb	r3, [r3, #0]
 800250c:	e000      	b.n	8002510 <Base64_Encode+0x30>
 800250e:	2300      	movs	r3, #0
 8002510:	61fb      	str	r3, [r7, #28]
        uint32_t octet_b = i < in_len ? in[i++] : 0;
 8002512:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002514:	68bb      	ldr	r3, [r7, #8]
 8002516:	429a      	cmp	r2, r3
 8002518:	d206      	bcs.n	8002528 <Base64_Encode+0x48>
 800251a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800251c:	1c5a      	adds	r2, r3, #1
 800251e:	627a      	str	r2, [r7, #36]	@ 0x24
 8002520:	68fa      	ldr	r2, [r7, #12]
 8002522:	4413      	add	r3, r2
 8002524:	781b      	ldrb	r3, [r3, #0]
 8002526:	e000      	b.n	800252a <Base64_Encode+0x4a>
 8002528:	2300      	movs	r3, #0
 800252a:	61bb      	str	r3, [r7, #24]
        uint32_t octet_c = i < in_len ? in[i++] : 0;
 800252c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800252e:	68bb      	ldr	r3, [r7, #8]
 8002530:	429a      	cmp	r2, r3
 8002532:	d206      	bcs.n	8002542 <Base64_Encode+0x62>
 8002534:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002536:	1c5a      	adds	r2, r3, #1
 8002538:	627a      	str	r2, [r7, #36]	@ 0x24
 800253a:	68fa      	ldr	r2, [r7, #12]
 800253c:	4413      	add	r3, r2
 800253e:	781b      	ldrb	r3, [r3, #0]
 8002540:	e000      	b.n	8002544 <Base64_Encode+0x64>
 8002542:	2300      	movs	r3, #0
 8002544:	617b      	str	r3, [r7, #20]
        uint32_t triple = (octet_a << 16) | (octet_b << 8) | octet_c;
 8002546:	69fb      	ldr	r3, [r7, #28]
 8002548:	041a      	lsls	r2, r3, #16
 800254a:	69bb      	ldr	r3, [r7, #24]
 800254c:	021b      	lsls	r3, r3, #8
 800254e:	4313      	orrs	r3, r2
 8002550:	697a      	ldr	r2, [r7, #20]
 8002552:	4313      	orrs	r3, r2
 8002554:	613b      	str	r3, [r7, #16]

        out[j++] = base64_enc_table[(triple >> 18) & 0x3F];
 8002556:	693b      	ldr	r3, [r7, #16]
 8002558:	0c9b      	lsrs	r3, r3, #18
 800255a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800255e:	6a3b      	ldr	r3, [r7, #32]
 8002560:	1c59      	adds	r1, r3, #1
 8002562:	6239      	str	r1, [r7, #32]
 8002564:	6879      	ldr	r1, [r7, #4]
 8002566:	440b      	add	r3, r1
 8002568:	4926      	ldr	r1, [pc, #152]	@ (8002604 <Base64_Encode+0x124>)
 800256a:	5c8a      	ldrb	r2, [r1, r2]
 800256c:	701a      	strb	r2, [r3, #0]
        out[j++] = base64_enc_table[(triple >> 12) & 0x3F];
 800256e:	693b      	ldr	r3, [r7, #16]
 8002570:	0b1b      	lsrs	r3, r3, #12
 8002572:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8002576:	6a3b      	ldr	r3, [r7, #32]
 8002578:	1c59      	adds	r1, r3, #1
 800257a:	6239      	str	r1, [r7, #32]
 800257c:	6879      	ldr	r1, [r7, #4]
 800257e:	440b      	add	r3, r1
 8002580:	4920      	ldr	r1, [pc, #128]	@ (8002604 <Base64_Encode+0x124>)
 8002582:	5c8a      	ldrb	r2, [r1, r2]
 8002584:	701a      	strb	r2, [r3, #0]
        out[j++] = (i > in_len + 1) ? '=' : base64_enc_table[(triple >> 6) & 0x3F];
 8002586:	68bb      	ldr	r3, [r7, #8]
 8002588:	3301      	adds	r3, #1
 800258a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800258c:	429a      	cmp	r2, r3
 800258e:	d806      	bhi.n	800259e <Base64_Encode+0xbe>
 8002590:	693b      	ldr	r3, [r7, #16]
 8002592:	099b      	lsrs	r3, r3, #6
 8002594:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002598:	4a1a      	ldr	r2, [pc, #104]	@ (8002604 <Base64_Encode+0x124>)
 800259a:	5cd1      	ldrb	r1, [r2, r3]
 800259c:	e000      	b.n	80025a0 <Base64_Encode+0xc0>
 800259e:	213d      	movs	r1, #61	@ 0x3d
 80025a0:	6a3b      	ldr	r3, [r7, #32]
 80025a2:	1c5a      	adds	r2, r3, #1
 80025a4:	623a      	str	r2, [r7, #32]
 80025a6:	687a      	ldr	r2, [r7, #4]
 80025a8:	4413      	add	r3, r2
 80025aa:	460a      	mov	r2, r1
 80025ac:	701a      	strb	r2, [r3, #0]
        out[j++] = (i > in_len) ? '=' : base64_enc_table[triple & 0x3F];
 80025ae:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80025b0:	68bb      	ldr	r3, [r7, #8]
 80025b2:	429a      	cmp	r2, r3
 80025b4:	d805      	bhi.n	80025c2 <Base64_Encode+0xe2>
 80025b6:	693b      	ldr	r3, [r7, #16]
 80025b8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80025bc:	4a11      	ldr	r2, [pc, #68]	@ (8002604 <Base64_Encode+0x124>)
 80025be:	5cd1      	ldrb	r1, [r2, r3]
 80025c0:	e000      	b.n	80025c4 <Base64_Encode+0xe4>
 80025c2:	213d      	movs	r1, #61	@ 0x3d
 80025c4:	6a3b      	ldr	r3, [r7, #32]
 80025c6:	1c5a      	adds	r2, r3, #1
 80025c8:	623a      	str	r2, [r7, #32]
 80025ca:	687a      	ldr	r2, [r7, #4]
 80025cc:	4413      	add	r3, r2
 80025ce:	460a      	mov	r2, r1
 80025d0:	701a      	strb	r2, [r3, #0]
    while (i < in_len && (j + 4) <= out_size)
 80025d2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80025d4:	68bb      	ldr	r3, [r7, #8]
 80025d6:	429a      	cmp	r2, r3
 80025d8:	d204      	bcs.n	80025e4 <Base64_Encode+0x104>
 80025da:	6a3b      	ldr	r3, [r7, #32]
 80025dc:	3304      	adds	r3, #4
 80025de:	683a      	ldr	r2, [r7, #0]
 80025e0:	429a      	cmp	r2, r3
 80025e2:	d289      	bcs.n	80024f8 <Base64_Encode+0x18>
    }
    if (j < out_size) out[j] = '\0'; // null-terminate se vuoi una stringa
 80025e4:	6a3a      	ldr	r2, [r7, #32]
 80025e6:	683b      	ldr	r3, [r7, #0]
 80025e8:	429a      	cmp	r2, r3
 80025ea:	d204      	bcs.n	80025f6 <Base64_Encode+0x116>
 80025ec:	687a      	ldr	r2, [r7, #4]
 80025ee:	6a3b      	ldr	r3, [r7, #32]
 80025f0:	4413      	add	r3, r2
 80025f2:	2200      	movs	r2, #0
 80025f4:	701a      	strb	r2, [r3, #0]
    return j; // lunghezza della stringa base64 prodotta (senza null)
 80025f6:	6a3b      	ldr	r3, [r7, #32]
}
 80025f8:	4618      	mov	r0, r3
 80025fa:	372c      	adds	r7, #44	@ 0x2c
 80025fc:	46bd      	mov	sp, r7
 80025fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002602:	4770      	bx	lr
 8002604:	08017d88 	.word	0x08017d88

08002608 <BC_Init>:
#include "global_variables.h"


/*------INIZIALIZZAZIONE BATTERY CHARGER------*/
void BC_Init(void)
{
 8002608:	b580      	push	{r7, lr}
 800260a:	af00      	add	r7, sp, #0
	BC_Write_Reg(REG00_MINIMAL_SYSTEM_VOLTAGE, 0x1A);           //Tensione minima di uscita con 3 celle = 9V   <----- Senza Batteria il sistema fornisce questa tensione
 800260c:	211a      	movs	r1, #26
 800260e:	2000      	movs	r0, #0
 8002610:	f000 f836 	bl	8002680 <BC_Write_Reg>
	BC_MultiWrite_Reg(REG01_CHARGE_VOLTAGE_LIMIT, 0x04EC);      //Limite tensione di carica con 3 celle = 12.6V
 8002614:	f240 41ec 	movw	r1, #1260	@ 0x4ec
 8002618:	2001      	movs	r0, #1
 800261a:	f000 f87d 	bl	8002718 <BC_MultiWrite_Reg>
	BC_MultiWrite_Reg(REG03_CHARGE_CURRENT_LIMIT, 0x0064);      //Limite corrente di carica con 3 celle = 1A
 800261e:	2164      	movs	r1, #100	@ 0x64
 8002620:	2003      	movs	r0, #3
 8002622:	f000 f879 	bl	8002718 <BC_MultiWrite_Reg>
	BC_Write_Reg(REG10_CHARGER_CONTROL_1, 0x85);                //Tensione di OVP in ingresso = 26V
 8002626:	2185      	movs	r1, #133	@ 0x85
 8002628:	2010      	movs	r0, #16
 800262a:	f000 f829 	bl	8002680 <BC_Write_Reg>
	BC_Write_Reg(REG14_CHARGER_CONTROL_5, 0x96);                //Informazione sulla presenza dello Ship-FET
 800262e:	2196      	movs	r1, #150	@ 0x96
 8002630:	2014      	movs	r0, #20
 8002632:	f000 f825 	bl	8002680 <BC_Write_Reg>
	BC_Write_Reg(REG15_MPPT_CONTROL, 0xAB);                     //MPPT attivato, tensione di MPP = 0.875*Vin, misura di 300ms ogni 2 minuti della Vin
 8002636:	21ab      	movs	r1, #171	@ 0xab
 8002638:	2015      	movs	r0, #21
 800263a:	f000 f821 	bl	8002680 <BC_Write_Reg>
	BC_Write_Reg(REG28_CHARGER_MASK_0, 0xE1);                   //Interrupt attivati: Poor source, Power good, VAC2 present, VAC1 present
 800263e:	21e1      	movs	r1, #225	@ 0xe1
 8002640:	2028      	movs	r0, #40	@ 0x28
 8002642:	f000 f81d 	bl	8002680 <BC_Write_Reg>
	BC_Write_Reg(REG29_CHARGER_MASK_1, 0xD7);                   //Interrupt attivati: nessuno
 8002646:	21d7      	movs	r1, #215	@ 0xd7
 8002648:	2029      	movs	r0, #41	@ 0x29
 800264a:	f000 f819 	bl	8002680 <BC_Write_Reg>
	BC_Write_Reg(REG2A_CHARGER_MASK_2, 0x7F);                   //Interrupt attivati: nessuno
 800264e:	217f      	movs	r1, #127	@ 0x7f
 8002650:	202a      	movs	r0, #42	@ 0x2a
 8002652:	f000 f815 	bl	8002680 <BC_Write_Reg>
	BC_Write_Reg(REG2B_CHARGER_MASK_3, 0x1F);                   //Interrupt attivati: nessuno
 8002656:	211f      	movs	r1, #31
 8002658:	202b      	movs	r0, #43	@ 0x2b
 800265a:	f000 f811 	bl	8002680 <BC_Write_Reg>
	BC_Write_Reg(REG2C_FAULT_MASK_0, 0xFC);                     //Interrupt attivati: VAC2 over-voltage, VAC1 over-voltage
 800265e:	21fc      	movs	r1, #252	@ 0xfc
 8002660:	202c      	movs	r0, #44	@ 0x2c
 8002662:	f000 f80d 	bl	8002680 <BC_Write_Reg>
	BC_Write_Reg(REG2D_FAULT_MASK_1, 0xF4);                     //Interrupt attivati: nessuno
 8002666:	21f4      	movs	r1, #244	@ 0xf4
 8002668:	202d      	movs	r0, #45	@ 0x2d
 800266a:	f000 f809 	bl	8002680 <BC_Write_Reg>

	BC_MultiRead_Reg(REG3B_VBAT_ADC, &Vbatt);
 800266e:	4903      	ldr	r1, [pc, #12]	@ (800267c <BC_Init+0x74>)
 8002670:	203b      	movs	r0, #59	@ 0x3b
 8002672:	f000 f87b 	bl	800276c <BC_MultiRead_Reg>
}
 8002676:	bf00      	nop
 8002678:	bd80      	pop	{r7, pc}
 800267a:	bf00      	nop
 800267c:	200041c2 	.word	0x200041c2

08002680 <BC_Write_Reg>:

/*------SCRITTURA REGISTRO 8 BIT------*/
int BC_Write_Reg(uint8_t reg, uint8_t wdata)
{
 8002680:	b580      	push	{r7, lr}
 8002682:	b086      	sub	sp, #24
 8002684:	af02      	add	r7, sp, #8
 8002686:	4603      	mov	r3, r0
 8002688:	460a      	mov	r2, r1
 800268a:	71fb      	strb	r3, [r7, #7]
 800268c:	4613      	mov	r3, r2
 800268e:	71bb      	strb	r3, [r7, #6]
	int result = -1;
 8002690:	f04f 33ff 	mov.w	r3, #4294967295
 8002694:	60fb      	str	r3, [r7, #12]
	uint8_t toSend[2];
	toSend[0] = reg;
 8002696:	79fb      	ldrb	r3, [r7, #7]
 8002698:	723b      	strb	r3, [r7, #8]
	toSend[1] = wdata;
 800269a:	79bb      	ldrb	r3, [r7, #6]
 800269c:	727b      	strb	r3, [r7, #9]

	if(HAL_I2C_Master_Transmit(I2C, BATTERY_CHARGER_ADDR << 1, toSend, 2, 100) == HAL_OK)
 800269e:	f107 0208 	add.w	r2, r7, #8
 80026a2:	2364      	movs	r3, #100	@ 0x64
 80026a4:	9300      	str	r3, [sp, #0]
 80026a6:	2302      	movs	r3, #2
 80026a8:	21d6      	movs	r1, #214	@ 0xd6
 80026aa:	4806      	ldr	r0, [pc, #24]	@ (80026c4 <BC_Write_Reg+0x44>)
 80026ac:	f00c f8d4 	bl	800e858 <HAL_I2C_Master_Transmit>
 80026b0:	4603      	mov	r3, r0
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	d101      	bne.n	80026ba <BC_Write_Reg+0x3a>
	{
		result = 0;
 80026b6:	2300      	movs	r3, #0
 80026b8:	60fb      	str	r3, [r7, #12]
	}

	return result;
 80026ba:	68fb      	ldr	r3, [r7, #12]
}
 80026bc:	4618      	mov	r0, r3
 80026be:	3710      	adds	r7, #16
 80026c0:	46bd      	mov	sp, r7
 80026c2:	bd80      	pop	{r7, pc}
 80026c4:	20000180 	.word	0x20000180

080026c8 <BC_Read_Reg>:

/*------LETTURA REGISTRO 8 BIT------*/
int BC_Read_Reg(uint8_t reg, uint8_t *rdata)
{
 80026c8:	b580      	push	{r7, lr}
 80026ca:	b086      	sub	sp, #24
 80026cc:	af02      	add	r7, sp, #8
 80026ce:	4603      	mov	r3, r0
 80026d0:	6039      	str	r1, [r7, #0]
 80026d2:	71fb      	strb	r3, [r7, #7]
	int result = -1;
 80026d4:	f04f 33ff 	mov.w	r3, #4294967295
 80026d8:	60fb      	str	r3, [r7, #12]

	if(HAL_I2C_Master_Transmit(I2C, BATTERY_CHARGER_ADDR << 1, &reg, 1, 100) == HAL_OK)
 80026da:	1dfa      	adds	r2, r7, #7
 80026dc:	2364      	movs	r3, #100	@ 0x64
 80026de:	9300      	str	r3, [sp, #0]
 80026e0:	2301      	movs	r3, #1
 80026e2:	21d6      	movs	r1, #214	@ 0xd6
 80026e4:	480b      	ldr	r0, [pc, #44]	@ (8002714 <BC_Read_Reg+0x4c>)
 80026e6:	f00c f8b7 	bl	800e858 <HAL_I2C_Master_Transmit>
 80026ea:	4603      	mov	r3, r0
 80026ec:	2b00      	cmp	r3, #0
 80026ee:	d10c      	bne.n	800270a <BC_Read_Reg+0x42>
	{
		if(HAL_I2C_Master_Receive(I2C,  BATTERY_CHARGER_ADDR << 1, rdata, 1, 100) == HAL_OK)
 80026f0:	2364      	movs	r3, #100	@ 0x64
 80026f2:	9300      	str	r3, [sp, #0]
 80026f4:	2301      	movs	r3, #1
 80026f6:	683a      	ldr	r2, [r7, #0]
 80026f8:	21d6      	movs	r1, #214	@ 0xd6
 80026fa:	4806      	ldr	r0, [pc, #24]	@ (8002714 <BC_Read_Reg+0x4c>)
 80026fc:	f00c f9c4 	bl	800ea88 <HAL_I2C_Master_Receive>
 8002700:	4603      	mov	r3, r0
 8002702:	2b00      	cmp	r3, #0
 8002704:	d101      	bne.n	800270a <BC_Read_Reg+0x42>
		{
			result = 0;
 8002706:	2300      	movs	r3, #0
 8002708:	60fb      	str	r3, [r7, #12]
		}
	}

	return result;
 800270a:	68fb      	ldr	r3, [r7, #12]
}
 800270c:	4618      	mov	r0, r3
 800270e:	3710      	adds	r7, #16
 8002710:	46bd      	mov	sp, r7
 8002712:	bd80      	pop	{r7, pc}
 8002714:	20000180 	.word	0x20000180

08002718 <BC_MultiWrite_Reg>:

/*------SCRITTURA REGISTRO 16 BIT------*/
int BC_MultiWrite_Reg(uint8_t reg, uint16_t wdata)
{
 8002718:	b580      	push	{r7, lr}
 800271a:	b086      	sub	sp, #24
 800271c:	af02      	add	r7, sp, #8
 800271e:	4603      	mov	r3, r0
 8002720:	460a      	mov	r2, r1
 8002722:	71fb      	strb	r3, [r7, #7]
 8002724:	4613      	mov	r3, r2
 8002726:	80bb      	strh	r3, [r7, #4]
	int result = -1;
 8002728:	f04f 33ff 	mov.w	r3, #4294967295
 800272c:	60fb      	str	r3, [r7, #12]
	uint8_t toSend[3];
	toSend[0] = reg;
 800272e:	79fb      	ldrb	r3, [r7, #7]
 8002730:	723b      	strb	r3, [r7, #8]
	toSend[1] = (wdata & 0xFF00) >> 8;
 8002732:	88bb      	ldrh	r3, [r7, #4]
 8002734:	0a1b      	lsrs	r3, r3, #8
 8002736:	b29b      	uxth	r3, r3
 8002738:	b2db      	uxtb	r3, r3
 800273a:	727b      	strb	r3, [r7, #9]
	toSend[2] = wdata & 0x00FF;
 800273c:	88bb      	ldrh	r3, [r7, #4]
 800273e:	b2db      	uxtb	r3, r3
 8002740:	72bb      	strb	r3, [r7, #10]

	if(HAL_I2C_Master_Transmit(I2C, BATTERY_CHARGER_ADDR << 1, toSend, 3, 100) == HAL_OK)
 8002742:	f107 0208 	add.w	r2, r7, #8
 8002746:	2364      	movs	r3, #100	@ 0x64
 8002748:	9300      	str	r3, [sp, #0]
 800274a:	2303      	movs	r3, #3
 800274c:	21d6      	movs	r1, #214	@ 0xd6
 800274e:	4806      	ldr	r0, [pc, #24]	@ (8002768 <BC_MultiWrite_Reg+0x50>)
 8002750:	f00c f882 	bl	800e858 <HAL_I2C_Master_Transmit>
 8002754:	4603      	mov	r3, r0
 8002756:	2b00      	cmp	r3, #0
 8002758:	d101      	bne.n	800275e <BC_MultiWrite_Reg+0x46>
	{
		result = 0;
 800275a:	2300      	movs	r3, #0
 800275c:	60fb      	str	r3, [r7, #12]
	}

	return result;
 800275e:	68fb      	ldr	r3, [r7, #12]
}
 8002760:	4618      	mov	r0, r3
 8002762:	3710      	adds	r7, #16
 8002764:	46bd      	mov	sp, r7
 8002766:	bd80      	pop	{r7, pc}
 8002768:	20000180 	.word	0x20000180

0800276c <BC_MultiRead_Reg>:

/*------LETTURA REGISTRO 16 BIT------*/
int BC_MultiRead_Reg(uint8_t reg, uint16_t *rdata)
{
 800276c:	b580      	push	{r7, lr}
 800276e:	b086      	sub	sp, #24
 8002770:	af02      	add	r7, sp, #8
 8002772:	4603      	mov	r3, r0
 8002774:	6039      	str	r1, [r7, #0]
 8002776:	71fb      	strb	r3, [r7, #7]
	int result = -1;
 8002778:	f04f 33ff 	mov.w	r3, #4294967295
 800277c:	60fb      	str	r3, [r7, #12]
	uint8_t data[2] = {0};
 800277e:	2300      	movs	r3, #0
 8002780:	813b      	strh	r3, [r7, #8]

	if(HAL_I2C_Master_Transmit(I2C, BATTERY_CHARGER_ADDR << 1, &reg, 1, 100) == HAL_OK)
 8002782:	1dfa      	adds	r2, r7, #7
 8002784:	2364      	movs	r3, #100	@ 0x64
 8002786:	9300      	str	r3, [sp, #0]
 8002788:	2301      	movs	r3, #1
 800278a:	21d6      	movs	r1, #214	@ 0xd6
 800278c:	4811      	ldr	r0, [pc, #68]	@ (80027d4 <BC_MultiRead_Reg+0x68>)
 800278e:	f00c f863 	bl	800e858 <HAL_I2C_Master_Transmit>
 8002792:	4603      	mov	r3, r0
 8002794:	2b00      	cmp	r3, #0
 8002796:	d118      	bne.n	80027ca <BC_MultiRead_Reg+0x5e>
	{
		if(HAL_I2C_Master_Receive(I2C,  BATTERY_CHARGER_ADDR << 1, data, 2, 100) == HAL_OK)
 8002798:	f107 0208 	add.w	r2, r7, #8
 800279c:	2364      	movs	r3, #100	@ 0x64
 800279e:	9300      	str	r3, [sp, #0]
 80027a0:	2302      	movs	r3, #2
 80027a2:	21d6      	movs	r1, #214	@ 0xd6
 80027a4:	480b      	ldr	r0, [pc, #44]	@ (80027d4 <BC_MultiRead_Reg+0x68>)
 80027a6:	f00c f96f 	bl	800ea88 <HAL_I2C_Master_Receive>
 80027aa:	4603      	mov	r3, r0
 80027ac:	2b00      	cmp	r3, #0
 80027ae:	d10c      	bne.n	80027ca <BC_MultiRead_Reg+0x5e>
		{
			result = 0;
 80027b0:	2300      	movs	r3, #0
 80027b2:	60fb      	str	r3, [r7, #12]
			*rdata = (data[0] << 8) | data[1];
 80027b4:	7a3b      	ldrb	r3, [r7, #8]
 80027b6:	b21b      	sxth	r3, r3
 80027b8:	021b      	lsls	r3, r3, #8
 80027ba:	b21a      	sxth	r2, r3
 80027bc:	7a7b      	ldrb	r3, [r7, #9]
 80027be:	b21b      	sxth	r3, r3
 80027c0:	4313      	orrs	r3, r2
 80027c2:	b21b      	sxth	r3, r3
 80027c4:	b29a      	uxth	r2, r3
 80027c6:	683b      	ldr	r3, [r7, #0]
 80027c8:	801a      	strh	r2, [r3, #0]
		}
	}

	return result;
 80027ca:	68fb      	ldr	r3, [r7, #12]
}
 80027cc:	4618      	mov	r0, r3
 80027ce:	3710      	adds	r7, #16
 80027d0:	46bd      	mov	sp, r7
 80027d2:	bd80      	pop	{r7, pc}
 80027d4:	20000180 	.word	0x20000180

080027d8 <BC_Read_Flags>:

/*------LETTURA FLAGS DI INTERRUZIONE------*/
int BC_Read_Flags(uint64_t *flags)
{
 80027d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80027dc:	b09b      	sub	sp, #108	@ 0x6c
 80027de:	af02      	add	r7, sp, #8
 80027e0:	64f8      	str	r0, [r7, #76]	@ 0x4c
	int result = -1;
 80027e2:	f04f 33ff 	mov.w	r3, #4294967295
 80027e6:	65fb      	str	r3, [r7, #92]	@ 0x5c
	uint8_t data[6] = {0};
 80027e8:	f107 0254 	add.w	r2, r7, #84	@ 0x54
 80027ec:	2300      	movs	r3, #0
 80027ee:	6013      	str	r3, [r2, #0]
 80027f0:	8093      	strh	r3, [r2, #4]
	uint8_t reg = REG22_CHARGER_FLAG_0;
 80027f2:	2322      	movs	r3, #34	@ 0x22
 80027f4:	f887 3053 	strb.w	r3, [r7, #83]	@ 0x53

	if(HAL_I2C_Master_Transmit(I2C, BATTERY_CHARGER_ADDR << 1, &reg, 1, 100) == HAL_OK)
 80027f8:	f107 0253 	add.w	r2, r7, #83	@ 0x53
 80027fc:	2364      	movs	r3, #100	@ 0x64
 80027fe:	9300      	str	r3, [sp, #0]
 8002800:	2301      	movs	r3, #1
 8002802:	21d6      	movs	r1, #214	@ 0xd6
 8002804:	484a      	ldr	r0, [pc, #296]	@ (8002930 <BC_Read_Flags+0x158>)
 8002806:	f00c f827 	bl	800e858 <HAL_I2C_Master_Transmit>
 800280a:	4603      	mov	r3, r0
 800280c:	2b00      	cmp	r3, #0
 800280e:	f040 8089 	bne.w	8002924 <BC_Read_Flags+0x14c>
	{
		if(HAL_I2C_Master_Receive(I2C,  BATTERY_CHARGER_ADDR << 1 , (uint8_t *)data, 6, 100) == HAL_OK)
 8002812:	f107 0254 	add.w	r2, r7, #84	@ 0x54
 8002816:	2364      	movs	r3, #100	@ 0x64
 8002818:	9300      	str	r3, [sp, #0]
 800281a:	2306      	movs	r3, #6
 800281c:	21d6      	movs	r1, #214	@ 0xd6
 800281e:	4844      	ldr	r0, [pc, #272]	@ (8002930 <BC_Read_Flags+0x158>)
 8002820:	f00c f932 	bl	800ea88 <HAL_I2C_Master_Receive>
 8002824:	4603      	mov	r3, r0
 8002826:	2b00      	cmp	r3, #0
 8002828:	d17c      	bne.n	8002924 <BC_Read_Flags+0x14c>
		{
			result = 0;
 800282a:	2300      	movs	r3, #0
 800282c:	65fb      	str	r3, [r7, #92]	@ 0x5c
			*flags = ((uint64_t)data[0] << 40) | ((uint64_t)data[1] << 32) | ((uint64_t)data[2] << 24) | ((uint64_t)data[3] << 16) | ((uint64_t)data[4] << 8) | (uint64_t)data[5];
 800282e:	f897 3054 	ldrb.w	r3, [r7, #84]	@ 0x54
 8002832:	b2db      	uxtb	r3, r3
 8002834:	2200      	movs	r2, #0
 8002836:	643b      	str	r3, [r7, #64]	@ 0x40
 8002838:	647a      	str	r2, [r7, #68]	@ 0x44
 800283a:	f04f 0000 	mov.w	r0, #0
 800283e:	f04f 0100 	mov.w	r1, #0
 8002842:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002844:	0219      	lsls	r1, r3, #8
 8002846:	2000      	movs	r0, #0
 8002848:	f897 3055 	ldrb.w	r3, [r7, #85]	@ 0x55
 800284c:	b2db      	uxtb	r3, r3
 800284e:	2200      	movs	r2, #0
 8002850:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002852:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8002854:	f04f 0200 	mov.w	r2, #0
 8002858:	f04f 0300 	mov.w	r3, #0
 800285c:	6bbe      	ldr	r6, [r7, #56]	@ 0x38
 800285e:	0033      	movs	r3, r6
 8002860:	2200      	movs	r2, #0
 8002862:	ea40 0802 	orr.w	r8, r0, r2
 8002866:	ea41 0903 	orr.w	r9, r1, r3
 800286a:	f897 3056 	ldrb.w	r3, [r7, #86]	@ 0x56
 800286e:	b2db      	uxtb	r3, r3
 8002870:	2200      	movs	r2, #0
 8002872:	633b      	str	r3, [r7, #48]	@ 0x30
 8002874:	637a      	str	r2, [r7, #52]	@ 0x34
 8002876:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 800287a:	460b      	mov	r3, r1
 800287c:	0a1d      	lsrs	r5, r3, #8
 800287e:	460b      	mov	r3, r1
 8002880:	061c      	lsls	r4, r3, #24
 8002882:	ea48 0304 	orr.w	r3, r8, r4
 8002886:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002888:	ea49 0305 	orr.w	r3, r9, r5
 800288c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800288e:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8002892:	b2db      	uxtb	r3, r3
 8002894:	2200      	movs	r2, #0
 8002896:	623b      	str	r3, [r7, #32]
 8002898:	627a      	str	r2, [r7, #36]	@ 0x24
 800289a:	f04f 0200 	mov.w	r2, #0
 800289e:	f04f 0300 	mov.w	r3, #0
 80028a2:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 80028a6:	4629      	mov	r1, r5
 80028a8:	040b      	lsls	r3, r1, #16
 80028aa:	4621      	mov	r1, r4
 80028ac:	ea43 4311 	orr.w	r3, r3, r1, lsr #16
 80028b0:	4621      	mov	r1, r4
 80028b2:	040a      	lsls	r2, r1, #16
 80028b4:	e9d7 450a 	ldrd	r4, r5, [r7, #40]	@ 0x28
 80028b8:	4621      	mov	r1, r4
 80028ba:	4311      	orrs	r1, r2
 80028bc:	61b9      	str	r1, [r7, #24]
 80028be:	4629      	mov	r1, r5
 80028c0:	4319      	orrs	r1, r3
 80028c2:	61f9      	str	r1, [r7, #28]
 80028c4:	f897 3058 	ldrb.w	r3, [r7, #88]	@ 0x58
 80028c8:	b2db      	uxtb	r3, r3
 80028ca:	2200      	movs	r2, #0
 80028cc:	613b      	str	r3, [r7, #16]
 80028ce:	617a      	str	r2, [r7, #20]
 80028d0:	f04f 0200 	mov.w	r2, #0
 80028d4:	f04f 0300 	mov.w	r3, #0
 80028d8:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 80028dc:	4629      	mov	r1, r5
 80028de:	020b      	lsls	r3, r1, #8
 80028e0:	4621      	mov	r1, r4
 80028e2:	ea43 6311 	orr.w	r3, r3, r1, lsr #24
 80028e6:	4621      	mov	r1, r4
 80028e8:	020a      	lsls	r2, r1, #8
 80028ea:	e9d7 4506 	ldrd	r4, r5, [r7, #24]
 80028ee:	4621      	mov	r1, r4
 80028f0:	ea41 0a02 	orr.w	sl, r1, r2
 80028f4:	4629      	mov	r1, r5
 80028f6:	ea41 0b03 	orr.w	fp, r1, r3
 80028fa:	f897 3059 	ldrb.w	r3, [r7, #89]	@ 0x59
 80028fe:	b2db      	uxtb	r3, r3
 8002900:	2200      	movs	r2, #0
 8002902:	60bb      	str	r3, [r7, #8]
 8002904:	60fa      	str	r2, [r7, #12]
 8002906:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800290a:	460b      	mov	r3, r1
 800290c:	ea4a 0303 	orr.w	r3, sl, r3
 8002910:	603b      	str	r3, [r7, #0]
 8002912:	4613      	mov	r3, r2
 8002914:	ea4b 0303 	orr.w	r3, fp, r3
 8002918:	607b      	str	r3, [r7, #4]
 800291a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800291c:	e9d7 1200 	ldrd	r1, r2, [r7]
 8002920:	e9c3 1200 	strd	r1, r2, [r3]
		}
	}

	return result;
 8002924:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
}
 8002926:	4618      	mov	r0, r3
 8002928:	3764      	adds	r7, #100	@ 0x64
 800292a:	46bd      	mov	sp, r7
 800292c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002930:	20000180 	.word	0x20000180

08002934 <BC_Manage_Interrupts>:

/*------GESTIONE DELLE INTERRUZIONI------*/
void BC_Manage_Interrupts(uint64_t flags)
{
 8002934:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8002938:	b084      	sub	sp, #16
 800293a:	af00      	add	r7, sp, #0
 800293c:	e9c7 0100 	strd	r0, r1, [r7]
	uint8_t status = 0;
 8002940:	2100      	movs	r1, #0
 8002942:	73f9      	strb	r1, [r7, #15]

	if((flags & POOR_SOURCE_MASK) != 0)   //INGRESSO NON BUONO
 8002944:	e9d7 0100 	ldrd	r0, r1, [r7]
 8002948:	2200      	movs	r2, #0
 800294a:	f401 5380 	and.w	r3, r1, #4096	@ 0x1000
 800294e:	4313      	orrs	r3, r2
 8002950:	d00c      	beq.n	800296c <BC_Manage_Interrupts+0x38>
	{
		// ...gestione evento...
		BC_Write_Reg(REG22_CHARGER_FLAG_0, (flags >> 40) & 0xFF);
 8002952:	e9d7 0100 	ldrd	r0, r1, [r7]
 8002956:	f04f 0200 	mov.w	r2, #0
 800295a:	f04f 0300 	mov.w	r3, #0
 800295e:	0a0a      	lsrs	r2, r1, #8
 8002960:	2300      	movs	r3, #0
 8002962:	b2d3      	uxtb	r3, r2
 8002964:	4619      	mov	r1, r3
 8002966:	2022      	movs	r0, #34	@ 0x22
 8002968:	f7ff fe8a 	bl	8002680 <BC_Write_Reg>
	}

	if((flags & VAC2_CHANGE_MASK) != 0)  //PANNELLO INSERITO O RIMOSSO
 800296c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002970:	f04f 0800 	mov.w	r8, #0
 8002974:	f403 6980 	and.w	r9, r3, #1024	@ 0x400
 8002978:	ea58 0309 	orrs.w	r3, r8, r9
 800297c:	d020      	beq.n	80029c0 <BC_Manage_Interrupts+0x8c>
	{
		BC_Read_Reg(REG1B_CHARGER_STATUS_0, &status);
 800297e:	f107 030f 	add.w	r3, r7, #15
 8002982:	4619      	mov	r1, r3
 8002984:	201b      	movs	r0, #27
 8002986:	f7ff fe9f 	bl	80026c8 <BC_Read_Reg>
		if((status & VAC2_PRESENT_MASK) != 0)
 800298a:	7bfb      	ldrb	r3, [r7, #15]
 800298c:	f003 0302 	and.w	r3, r3, #2
 8002990:	2b00      	cmp	r3, #0
 8002992:	d004      	beq.n	800299e <BC_Manage_Interrupts+0x6a>
		{
			BC_Write_Reg(REG13_CHARGER_CONTROL_4, 0x80);                //Usa Pannello
 8002994:	2180      	movs	r1, #128	@ 0x80
 8002996:	2013      	movs	r0, #19
 8002998:	f7ff fe72 	bl	8002680 <BC_Write_Reg>
 800299c:	e003      	b.n	80029a6 <BC_Manage_Interrupts+0x72>
		}
		else
		{
			BC_Write_Reg(REG13_CHARGER_CONTROL_4, 0x40);                //Usa Turbina
 800299e:	2140      	movs	r1, #64	@ 0x40
 80029a0:	2013      	movs	r0, #19
 80029a2:	f7ff fe6d 	bl	8002680 <BC_Write_Reg>
		}
		BC_Write_Reg(REG22_CHARGER_FLAG_0, (flags >> 40) & 0xFF);
 80029a6:	e9d7 0100 	ldrd	r0, r1, [r7]
 80029aa:	f04f 0200 	mov.w	r2, #0
 80029ae:	f04f 0300 	mov.w	r3, #0
 80029b2:	0a0a      	lsrs	r2, r1, #8
 80029b4:	2300      	movs	r3, #0
 80029b6:	b2d3      	uxtb	r3, r2
 80029b8:	4619      	mov	r1, r3
 80029ba:	2022      	movs	r0, #34	@ 0x22
 80029bc:	f7ff fe60 	bl	8002680 <BC_Write_Reg>
	}

	if((flags & VAC1_CHANGE_MASK) != 0)  //TURBINA INSERITA O RIMOSSA
 80029c0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80029c4:	2400      	movs	r4, #0
 80029c6:	f403 7500 	and.w	r5, r3, #512	@ 0x200
 80029ca:	ea54 0305 	orrs.w	r3, r4, r5
 80029ce:	d00c      	beq.n	80029ea <BC_Manage_Interrupts+0xb6>
	{
		// ...gestione evento...
		BC_Write_Reg(REG22_CHARGER_FLAG_0, (flags >> 40) & 0xFF);
 80029d0:	e9d7 0100 	ldrd	r0, r1, [r7]
 80029d4:	f04f 0200 	mov.w	r2, #0
 80029d8:	f04f 0300 	mov.w	r3, #0
 80029dc:	0a0a      	lsrs	r2, r1, #8
 80029de:	2300      	movs	r3, #0
 80029e0:	b2d3      	uxtb	r3, r2
 80029e2:	4619      	mov	r1, r3
 80029e4:	2022      	movs	r0, #34	@ 0x22
 80029e6:	f7ff fe4b 	bl	8002680 <BC_Write_Reg>
	}

	flags = 0;
 80029ea:	f04f 0200 	mov.w	r2, #0
 80029ee:	f04f 0300 	mov.w	r3, #0
 80029f2:	e9c7 2300 	strd	r2, r3, [r7]
}
 80029f6:	bf00      	nop
 80029f8:	3710      	adds	r7, #16
 80029fa:	46bd      	mov	sp, r7
 80029fc:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}

08002a00 <HAL_UARTEx_RxEventCallback>:
	}
}

/* ------CALLBACK UART RX IDLE------*/
void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8002a00:	b580      	push	{r7, lr}
 8002a02:	b082      	sub	sp, #8
 8002a04:	af00      	add	r7, sp, #0
 8002a06:	6078      	str	r0, [r7, #4]
 8002a08:	460b      	mov	r3, r1
 8002a0a:	807b      	strh	r3, [r7, #2]
	if(huart == SIM_UART)
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	4a3d      	ldr	r2, [pc, #244]	@ (8002b04 <HAL_UARTEx_RxEventCallback+0x104>)
 8002a10:	4293      	cmp	r3, r2
 8002a12:	d16d      	bne.n	8002af0 <HAL_UARTEx_RxEventCallback+0xf0>
	{
		if(*(uint8_t*)sim_rx_buffer == '>')
 8002a14:	4b3c      	ldr	r3, [pc, #240]	@ (8002b08 <HAL_UARTEx_RxEventCallback+0x108>)
 8002a16:	781b      	ldrb	r3, [r3, #0]
 8002a18:	2b3e      	cmp	r3, #62	@ 0x3e
 8002a1a:	d127      	bne.n	8002a6c <HAL_UARTEx_RxEventCallback+0x6c>
		{
			if(flags.Log_TransferInProgress)
 8002a1c:	4b3b      	ldr	r3, [pc, #236]	@ (8002b0c <HAL_UARTEx_RxEventCallback+0x10c>)
 8002a1e:	785b      	ldrb	r3, [r3, #1]
 8002a20:	f003 0308 	and.w	r3, r3, #8
 8002a24:	b2db      	uxtb	r3, r3
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	d00c      	beq.n	8002a44 <HAL_UARTEx_RxEventCallback+0x44>
			{
				flags.Log_ReadytoSend = 1;
 8002a2a:	4a38      	ldr	r2, [pc, #224]	@ (8002b0c <HAL_UARTEx_RxEventCallback+0x10c>)
 8002a2c:	7853      	ldrb	r3, [r2, #1]
 8002a2e:	f043 0301 	orr.w	r3, r3, #1
 8002a32:	7053      	strb	r3, [r2, #1]
				sys.SIM_Prompt_Status = 0;
 8002a34:	4b36      	ldr	r3, [pc, #216]	@ (8002b10 <HAL_UARTEx_RxEventCallback+0x110>)
 8002a36:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002a3a:	461a      	mov	r2, r3
 8002a3c:	2300      	movs	r3, #0
 8002a3e:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
 8002a42:	e055      	b.n	8002af0 <HAL_UARTEx_RxEventCallback+0xf0>
			}
			else if(flags.CMD.Measure_Request)
 8002a44:	4b31      	ldr	r3, [pc, #196]	@ (8002b0c <HAL_UARTEx_RxEventCallback+0x10c>)
 8002a46:	789b      	ldrb	r3, [r3, #2]
 8002a48:	f003 0302 	and.w	r3, r3, #2
 8002a4c:	b2db      	uxtb	r3, r3
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	d04e      	beq.n	8002af0 <HAL_UARTEx_RxEventCallback+0xf0>
			{
				flags.Measure_ReadytoSend = 1;
 8002a52:	4a2e      	ldr	r2, [pc, #184]	@ (8002b0c <HAL_UARTEx_RxEventCallback+0x10c>)
 8002a54:	7853      	ldrb	r3, [r2, #1]
 8002a56:	f043 0302 	orr.w	r3, r3, #2
 8002a5a:	7053      	strb	r3, [r2, #1]
				sys.SIM_Prompt_Status = 0;
 8002a5c:	4b2c      	ldr	r3, [pc, #176]	@ (8002b10 <HAL_UARTEx_RxEventCallback+0x110>)
 8002a5e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002a62:	461a      	mov	r2, r3
 8002a64:	2300      	movs	r3, #0
 8002a66:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
 8002a6a:	e041      	b.n	8002af0 <HAL_UARTEx_RxEventCallback+0xf0>
			}
		}

		else if(*(uint32_t*)sim_rx_buffer == 0x444E4553 &&              // "SEND"
 8002a6c:	4b26      	ldr	r3, [pc, #152]	@ (8002b08 <HAL_UARTEx_RxEventCallback+0x108>)
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	4a28      	ldr	r2, [pc, #160]	@ (8002b14 <HAL_UARTEx_RxEventCallback+0x114>)
 8002a72:	4293      	cmp	r3, r2
 8002a74:	d11e      	bne.n	8002ab4 <HAL_UARTEx_RxEventCallback+0xb4>
				   *(uint32_t*)(sim_rx_buffer + 4) == 0x004B204F)       // " OK\0"
 8002a76:	4b28      	ldr	r3, [pc, #160]	@ (8002b18 <HAL_UARTEx_RxEventCallback+0x118>)
 8002a78:	681b      	ldr	r3, [r3, #0]
		else if(*(uint32_t*)sim_rx_buffer == 0x444E4553 &&              // "SEND"
 8002a7a:	4a28      	ldr	r2, [pc, #160]	@ (8002b1c <HAL_UARTEx_RxEventCallback+0x11c>)
 8002a7c:	4293      	cmp	r3, r2
 8002a7e:	d119      	bne.n	8002ab4 <HAL_UARTEx_RxEventCallback+0xb4>
		{
			if(flags.Log_TransferInProgress)
 8002a80:	4b22      	ldr	r3, [pc, #136]	@ (8002b0c <HAL_UARTEx_RxEventCallback+0x10c>)
 8002a82:	785b      	ldrb	r3, [r3, #1]
 8002a84:	f003 0308 	and.w	r3, r3, #8
 8002a88:	b2db      	uxtb	r3, r3
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	d005      	beq.n	8002a9a <HAL_UARTEx_RxEventCallback+0x9a>
			{
				flags.Log_TransferInProgress = 0;
 8002a8e:	4a1f      	ldr	r2, [pc, #124]	@ (8002b0c <HAL_UARTEx_RxEventCallback+0x10c>)
 8002a90:	7853      	ldrb	r3, [r2, #1]
 8002a92:	f023 0308 	bic.w	r3, r3, #8
 8002a96:	7053      	strb	r3, [r2, #1]
			if(flags.Log_TransferInProgress)
 8002a98:	e029      	b.n	8002aee <HAL_UARTEx_RxEventCallback+0xee>
			}
			else if(flags.Meas_TransferInProgress)
 8002a9a:	4b1c      	ldr	r3, [pc, #112]	@ (8002b0c <HAL_UARTEx_RxEventCallback+0x10c>)
 8002a9c:	785b      	ldrb	r3, [r3, #1]
 8002a9e:	f003 0304 	and.w	r3, r3, #4
 8002aa2:	b2db      	uxtb	r3, r3
 8002aa4:	2b00      	cmp	r3, #0
 8002aa6:	d022      	beq.n	8002aee <HAL_UARTEx_RxEventCallback+0xee>
			{
				flags.Meas_TransferInProgress = 0;
 8002aa8:	4a18      	ldr	r2, [pc, #96]	@ (8002b0c <HAL_UARTEx_RxEventCallback+0x10c>)
 8002aaa:	7853      	ldrb	r3, [r2, #1]
 8002aac:	f023 0304 	bic.w	r3, r3, #4
 8002ab0:	7053      	strb	r3, [r2, #1]
			if(flags.Log_TransferInProgress)
 8002ab2:	e01c      	b.n	8002aee <HAL_UARTEx_RxEventCallback+0xee>
			}
		}

		else if(*(uint32_t*)sim_rx_buffer == 0x4552524F)                 //"ERRO"
 8002ab4:	4b14      	ldr	r3, [pc, #80]	@ (8002b08 <HAL_UARTEx_RxEventCallback+0x108>)
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	4a19      	ldr	r2, [pc, #100]	@ (8002b20 <HAL_UARTEx_RxEventCallback+0x120>)
 8002aba:	4293      	cmp	r3, r2
 8002abc:	d10c      	bne.n	8002ad8 <HAL_UARTEx_RxEventCallback+0xd8>
		{
			flags.Log_ReadytoSend = 0;
 8002abe:	4a13      	ldr	r2, [pc, #76]	@ (8002b0c <HAL_UARTEx_RxEventCallback+0x10c>)
 8002ac0:	7853      	ldrb	r3, [r2, #1]
 8002ac2:	f023 0301 	bic.w	r3, r3, #1
 8002ac6:	7053      	strb	r3, [r2, #1]
			sys.SIM_Prompt_Status = 0;
 8002ac8:	4b11      	ldr	r3, [pc, #68]	@ (8002b10 <HAL_UARTEx_RxEventCallback+0x110>)
 8002aca:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002ace:	461a      	mov	r2, r3
 8002ad0:	2300      	movs	r3, #0
 8002ad2:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
 8002ad6:	e00b      	b.n	8002af0 <HAL_UARTEx_RxEventCallback+0xf0>
		}

		else if(*(uint32_t*)sim_rx_buffer == 0x444D432B)                 // "+CMD"
 8002ad8:	4b0b      	ldr	r3, [pc, #44]	@ (8002b08 <HAL_UARTEx_RxEventCallback+0x108>)
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	4a11      	ldr	r2, [pc, #68]	@ (8002b24 <HAL_UARTEx_RxEventCallback+0x124>)
 8002ade:	4293      	cmp	r3, r2
 8002ae0:	d106      	bne.n	8002af0 <HAL_UARTEx_RxEventCallback+0xf0>
		{     
			flags.Message_Rx = 1;
 8002ae2:	4a0a      	ldr	r2, [pc, #40]	@ (8002b0c <HAL_UARTEx_RxEventCallback+0x10c>)
 8002ae4:	7813      	ldrb	r3, [r2, #0]
 8002ae6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002aea:	7013      	strb	r3, [r2, #0]
 8002aec:	e000      	b.n	8002af0 <HAL_UARTEx_RxEventCallback+0xf0>
			if(flags.Log_TransferInProgress)
 8002aee:	bf00      	nop
		}


	}
	
	HAL_UARTEx_ReceiveToIdle_DMA(SIM_UART, sim_rx_buffer, SIM_RXBUFFER_SIZE);
 8002af0:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 8002af4:	4904      	ldr	r1, [pc, #16]	@ (8002b08 <HAL_UARTEx_RxEventCallback+0x108>)
 8002af6:	4803      	ldr	r0, [pc, #12]	@ (8002b04 <HAL_UARTEx_RxEventCallback+0x104>)
 8002af8:	f013 fb8e 	bl	8016218 <HAL_UARTEx_ReceiveToIdle_DMA>
}
 8002afc:	bf00      	nop
 8002afe:	3708      	adds	r7, #8
 8002b00:	46bd      	mov	sp, r7
 8002b02:	bd80      	pop	{r7, pc}
 8002b04:	200004bc 	.word	0x200004bc
 8002b08:	20004f94 	.word	0x20004f94
 8002b0c:	20001780 	.word	0x20001780
 8002b10:	200005d8 	.word	0x200005d8
 8002b14:	444e4553 	.word	0x444e4553
 8002b18:	20004f98 	.word	0x20004f98
 8002b1c:	004b204f 	.word	0x004b204f
 8002b20:	4552524f 	.word	0x4552524f
 8002b24:	444d432b 	.word	0x444d432b

08002b28 <HAL_UART_RxCpltCallback>:

/* ------CALLBACK UART RX COMPLETE------*/
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8002b28:	b480      	push	{r7}
 8002b2a:	b083      	sub	sp, #12
 8002b2c:	af00      	add	r7, sp, #0
 8002b2e:	6078      	str	r0, [r7, #4]
	if (huart == SIM_UART)
	{

	}

}
 8002b30:	bf00      	nop
 8002b32:	370c      	adds	r7, #12
 8002b34:	46bd      	mov	sp, r7
 8002b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b3a:	4770      	bx	lr

08002b3c <HAL_UART_TxCpltCallback>:

/* ------CALLBACK UART TX COMPLETE------*/
void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002b3c:	b480      	push	{r7}
 8002b3e:	b083      	sub	sp, #12
 8002b40:	af00      	add	r7, sp, #0
 8002b42:	6078      	str	r0, [r7, #4]
	if (huart == SIM_UART)
	{

	}

}
 8002b44:	bf00      	nop
 8002b46:	370c      	adds	r7, #12
 8002b48:	46bd      	mov	sp, r7
 8002b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b4e:	4770      	bx	lr

08002b50 <HAL_ADC_ConvHalfCpltCallback>:

/* ------CALLBACK HALF ADC------*/
void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8002b50:	b480      	push	{r7}
 8002b52:	b083      	sub	sp, #12
 8002b54:	af00      	add	r7, sp, #0
 8002b56:	6078      	str	r0, [r7, #4]
	if(hadc == PRESSURE_ADC)
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	4a09      	ldr	r2, [pc, #36]	@ (8002b80 <HAL_ADC_ConvHalfCpltCallback+0x30>)
 8002b5c:	4293      	cmp	r3, r2
 8002b5e:	d109      	bne.n	8002b74 <HAL_ADC_ConvHalfCpltCallback+0x24>
	{
		flags.ADC_Complete = 1;
 8002b60:	4a08      	ldr	r2, [pc, #32]	@ (8002b84 <HAL_ADC_ConvHalfCpltCallback+0x34>)
 8002b62:	7813      	ldrb	r3, [r2, #0]
 8002b64:	f043 0301 	orr.w	r3, r3, #1
 8002b68:	7013      	strb	r3, [r2, #0]
		flags.ADC_Half_Buffer = 1;
 8002b6a:	4a06      	ldr	r2, [pc, #24]	@ (8002b84 <HAL_ADC_ConvHalfCpltCallback+0x34>)
 8002b6c:	7813      	ldrb	r3, [r2, #0]
 8002b6e:	f043 0302 	orr.w	r3, r3, #2
 8002b72:	7013      	strb	r3, [r2, #0]
	}
}
 8002b74:	bf00      	nop
 8002b76:	370c      	adds	r7, #12
 8002b78:	46bd      	mov	sp, r7
 8002b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b7e:	4770      	bx	lr
 8002b80:	200000b0 	.word	0x200000b0
 8002b84:	20001780 	.word	0x20001780

08002b88 <HAL_ADC_ConvCpltCallback>:

/*------CALLBACK FULL ADC------*/
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8002b88:	b480      	push	{r7}
 8002b8a:	b083      	sub	sp, #12
 8002b8c:	af00      	add	r7, sp, #0
 8002b8e:	6078      	str	r0, [r7, #4]
	if(hadc == PRESSURE_ADC)
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	4a09      	ldr	r2, [pc, #36]	@ (8002bb8 <HAL_ADC_ConvCpltCallback+0x30>)
 8002b94:	4293      	cmp	r3, r2
 8002b96:	d109      	bne.n	8002bac <HAL_ADC_ConvCpltCallback+0x24>
	{
		flags.ADC_Complete = 1;
 8002b98:	4a08      	ldr	r2, [pc, #32]	@ (8002bbc <HAL_ADC_ConvCpltCallback+0x34>)
 8002b9a:	7813      	ldrb	r3, [r2, #0]
 8002b9c:	f043 0301 	orr.w	r3, r3, #1
 8002ba0:	7013      	strb	r3, [r2, #0]
		flags.ADC_Full_Buffer = 1;
 8002ba2:	4a06      	ldr	r2, [pc, #24]	@ (8002bbc <HAL_ADC_ConvCpltCallback+0x34>)
 8002ba4:	7813      	ldrb	r3, [r2, #0]
 8002ba6:	f043 0304 	orr.w	r3, r3, #4
 8002baa:	7013      	strb	r3, [r2, #0]
	}
}
 8002bac:	bf00      	nop
 8002bae:	370c      	adds	r7, #12
 8002bb0:	46bd      	mov	sp, r7
 8002bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bb6:	4770      	bx	lr
 8002bb8:	200000b0 	.word	0x200000b0
 8002bbc:	20001780 	.word	0x20001780

08002bc0 <HAL_RTC_AlarmAEventCallback>:

/*------CALLBACK RTC CAMBIO ORA------*/
void HAL_RTC_AlarmAEventCallback(RTC_HandleTypeDef *hrtc)
{
 8002bc0:	b580      	push	{r7, lr}
 8002bc2:	b092      	sub	sp, #72	@ 0x48
 8002bc4:	af00      	add	r7, sp, #0
 8002bc6:	6078      	str	r0, [r7, #4]
	RTC_TimeTypeDef gTime;
	RTC_AlarmTypeDef sAlarm = {0};
 8002bc8:	f107 0308 	add.w	r3, r7, #8
 8002bcc:	222c      	movs	r2, #44	@ 0x2c
 8002bce:	2100      	movs	r1, #0
 8002bd0:	4618      	mov	r0, r3
 8002bd2:	f013 fc5f 	bl	8016494 <memset>

	HAL_RTC_GetTime(hrtc, &gTime, RTC_FORMAT_BIN);
 8002bd6:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8002bda:	2200      	movs	r2, #0
 8002bdc:	4619      	mov	r1, r3
 8002bde:	6878      	ldr	r0, [r7, #4]
 8002be0:	f00e fc2d 	bl	801143e <HAL_RTC_GetTime>

	sys.Low_th = Low_TH_Array[gTime.Hours];
 8002be4:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 8002be8:	461a      	mov	r2, r3
 8002bea:	4b17      	ldr	r3, [pc, #92]	@ (8002c48 <HAL_RTC_AlarmAEventCallback+0x88>)
 8002bec:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 8002bf0:	4b16      	ldr	r3, [pc, #88]	@ (8002c4c <HAL_RTC_AlarmAEventCallback+0x8c>)
 8002bf2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002bf6:	85da      	strh	r2, [r3, #46]	@ 0x2e
	sys.High_th = High_TH_Array[gTime.Hours];
 8002bf8:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 8002bfc:	461a      	mov	r2, r3
 8002bfe:	4b14      	ldr	r3, [pc, #80]	@ (8002c50 <HAL_RTC_AlarmAEventCallback+0x90>)
 8002c00:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 8002c04:	4b11      	ldr	r3, [pc, #68]	@ (8002c4c <HAL_RTC_AlarmAEventCallback+0x8c>)
 8002c06:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002c0a:	861a      	strh	r2, [r3, #48]	@ 0x30

	sAlarm.AlarmTime.Hours = 0;
 8002c0c:	2300      	movs	r3, #0
 8002c0e:	723b      	strb	r3, [r7, #8]
    sAlarm.AlarmTime.Minutes = 0;
 8002c10:	2300      	movs	r3, #0
 8002c12:	727b      	strb	r3, [r7, #9]
    sAlarm.AlarmTime.Seconds = 0;
 8002c14:	2300      	movs	r3, #0
 8002c16:	72bb      	strb	r3, [r7, #10]
    sAlarm.AlarmMask = RTC_ALARMMASK_DATEWEEKDAY | RTC_ALARMMASK_HOURS | RTC_ALARMMASK_SECONDS;
 8002c18:	4b0e      	ldr	r3, [pc, #56]	@ (8002c54 <HAL_RTC_AlarmAEventCallback+0x94>)
 8002c1a:	61fb      	str	r3, [r7, #28]
    sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 8002c1c:	2300      	movs	r3, #0
 8002c1e:	627b      	str	r3, [r7, #36]	@ 0x24
    sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 8002c20:	2300      	movs	r3, #0
 8002c22:	62bb      	str	r3, [r7, #40]	@ 0x28
    sAlarm.AlarmDateWeekDay = 1;
 8002c24:	2301      	movs	r3, #1
 8002c26:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
    sAlarm.Alarm = RTC_ALARM_A;
 8002c2a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002c2e:	633b      	str	r3, [r7, #48]	@ 0x30
    
    HAL_RTC_SetAlarm_IT(hrtc, &sAlarm, RTC_FORMAT_BIN);
 8002c30:	f107 0308 	add.w	r3, r7, #8
 8002c34:	2200      	movs	r2, #0
 8002c36:	4619      	mov	r1, r3
 8002c38:	6878      	ldr	r0, [r7, #4]
 8002c3a:	f00e fce3 	bl	8011604 <HAL_RTC_SetAlarm_IT>
}
 8002c3e:	bf00      	nop
 8002c40:	3748      	adds	r7, #72	@ 0x48
 8002c42:	46bd      	mov	sp, r7
 8002c44:	bd80      	pop	{r7, pc}
 8002c46:	bf00      	nop
 8002c48:	20004f54 	.word	0x20004f54
 8002c4c:	200005d8 	.word	0x200005d8
 8002c50:	20004f24 	.word	0x20004f24
 8002c54:	80800080 	.word	0x80800080

08002c58 <extflash_cs_set>:
uint32_t	exflashNumSectors = 0;
uint8_t		exflashInitDone = 0;


void extflash_cs_set()
{
 8002c58:	b580      	push	{r7, lr}
 8002c5a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(FLASH_nCS_GPIO_Port, FLASH_nCS_Pin, GPIO_PIN_RESET);
 8002c5c:	2200      	movs	r2, #0
 8002c5e:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8002c62:	4802      	ldr	r0, [pc, #8]	@ (8002c6c <extflash_cs_set+0x14>)
 8002c64:	f00b fd44 	bl	800e6f0 <HAL_GPIO_WritePin>
}
 8002c68:	bf00      	nop
 8002c6a:	bd80      	pop	{r7, pc}
 8002c6c:	48000400 	.word	0x48000400

08002c70 <extflash_cs_reset>:

void extflash_cs_reset()
{
 8002c70:	b580      	push	{r7, lr}
 8002c72:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(FLASH_nCS_GPIO_Port, FLASH_nCS_Pin, GPIO_PIN_SET);
 8002c74:	2201      	movs	r2, #1
 8002c76:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8002c7a:	4802      	ldr	r0, [pc, #8]	@ (8002c84 <extflash_cs_reset+0x14>)
 8002c7c:	f00b fd38 	bl	800e6f0 <HAL_GPIO_WritePin>
}
 8002c80:	bf00      	nop
 8002c82:	bd80      	pop	{r7, pc}
 8002c84:	48000400 	.word	0x48000400

08002c88 <extflash_wp_reset>:
{
	HAL_GPIO_WritePin(FLASH_nWP_GPIO_Port, FLASH_nWP_Pin, GPIO_PIN_RESET);
}

void extflash_wp_reset()
{
 8002c88:	b580      	push	{r7, lr}
 8002c8a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(FLASH_nWP_GPIO_Port, FLASH_nWP_Pin, GPIO_PIN_SET);
 8002c8c:	2201      	movs	r2, #1
 8002c8e:	2140      	movs	r1, #64	@ 0x40
 8002c90:	4802      	ldr	r0, [pc, #8]	@ (8002c9c <extflash_wp_reset+0x14>)
 8002c92:	f00b fd2d 	bl	800e6f0 <HAL_GPIO_WritePin>
}
 8002c96:	bf00      	nop
 8002c98:	bd80      	pop	{r7, pc}
 8002c9a:	bf00      	nop
 8002c9c:	48000800 	.word	0x48000800

08002ca0 <extflash_hard_reset>:


void extflash_hard_reset()
{
 8002ca0:	b580      	push	{r7, lr}
 8002ca2:	af00      	add	r7, sp, #0

	HAL_GPIO_WritePin(FLASH_nRESET_GPIO_Port, FLASH_nRESET_Pin, GPIO_PIN_RESET);
 8002ca4:	2200      	movs	r2, #0
 8002ca6:	2180      	movs	r1, #128	@ 0x80
 8002ca8:	4806      	ldr	r0, [pc, #24]	@ (8002cc4 <extflash_hard_reset+0x24>)
 8002caa:	f00b fd21 	bl	800e6f0 <HAL_GPIO_WritePin>

	HAL_Delay(50);
 8002cae:	2032      	movs	r0, #50	@ 0x32
 8002cb0:	f008 fb34 	bl	800b31c <HAL_Delay>

	HAL_GPIO_WritePin(FLASH_nRESET_GPIO_Port, FLASH_nRESET_Pin, GPIO_PIN_SET);
 8002cb4:	2201      	movs	r2, #1
 8002cb6:	2180      	movs	r1, #128	@ 0x80
 8002cb8:	4802      	ldr	r0, [pc, #8]	@ (8002cc4 <extflash_hard_reset+0x24>)
 8002cba:	f00b fd19 	bl	800e6f0 <HAL_GPIO_WritePin>

	return;
 8002cbe:	bf00      	nop
}
 8002cc0:	bd80      	pop	{r7, pc}
 8002cc2:	bf00      	nop
 8002cc4:	48000800 	.word	0x48000800

08002cc8 <extflash_send_cmd>:


int32_t extflash_send_cmd(extflash_cmd_t command)
{
 8002cc8:	b580      	push	{r7, lr}
 8002cca:	b088      	sub	sp, #32
 8002ccc:	af00      	add	r7, sp, #0
 8002cce:	6078      	str	r0, [r7, #4]

	uint8_t addr_bytes[4] = {0};
 8002cd0:	2300      	movs	r3, #0
 8002cd2:	61bb      	str	r3, [r7, #24]
	uint8_t dummy_bytes[8] = {0};
 8002cd4:	f107 0310 	add.w	r3, r7, #16
 8002cd8:	2200      	movs	r2, #0
 8002cda:	601a      	str	r2, [r3, #0]
 8002cdc:	605a      	str	r2, [r3, #4]
	uint8_t dummy = 0;
 8002cde:	2300      	movs	r3, #0
 8002ce0:	77fb      	strb	r3, [r7, #31]
	uint8_t cmd_data = command->cmd;
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	781b      	ldrb	r3, [r3, #0]
 8002ce6:	73fb      	strb	r3, [r7, #15]

	if(command->address_en != 0)
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	785b      	ldrb	r3, [r3, #1]
 8002cec:	2b00      	cmp	r3, #0
 8002cee:	d00d      	beq.n	8002d0c <extflash_send_cmd+0x44>
	{
		addr_bytes[0] = (command->address >> 16) & 0xFF;
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	689b      	ldr	r3, [r3, #8]
 8002cf4:	0c1b      	lsrs	r3, r3, #16
 8002cf6:	b2db      	uxtb	r3, r3
 8002cf8:	763b      	strb	r3, [r7, #24]
		addr_bytes[1] = (command->address >> 8) & 0xFF;
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	689b      	ldr	r3, [r3, #8]
 8002cfe:	0a1b      	lsrs	r3, r3, #8
 8002d00:	b2db      	uxtb	r3, r3
 8002d02:	767b      	strb	r3, [r7, #25]
		addr_bytes[2] = (command->address) & 0xFF;
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	689b      	ldr	r3, [r3, #8]
 8002d08:	b2db      	uxtb	r3, r3
 8002d0a:	76bb      	strb	r3, [r7, #26]
	}

	extflash_cs_set();
 8002d0c:	f7ff ffa4 	bl	8002c58 <extflash_cs_set>

	HAL_SPI_Transmit(EXTFLASH_SPI, &cmd_data, 1, FLASH_SPI_DEF_TIMEOUT);
 8002d10:	f107 010f 	add.w	r1, r7, #15
 8002d14:	2364      	movs	r3, #100	@ 0x64
 8002d16:	2201      	movs	r2, #1
 8002d18:	4823      	ldr	r0, [pc, #140]	@ (8002da8 <extflash_send_cmd+0xe0>)
 8002d1a:	f00e ff72 	bl	8011c02 <HAL_SPI_Transmit>

	if(command->address_en != 0)
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	785b      	ldrb	r3, [r3, #1]
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	d006      	beq.n	8002d34 <extflash_send_cmd+0x6c>
	{
		HAL_SPI_Transmit(EXTFLASH_SPI, addr_bytes, 3, FLASH_SPI_DEF_TIMEOUT);
 8002d26:	f107 0118 	add.w	r1, r7, #24
 8002d2a:	2364      	movs	r3, #100	@ 0x64
 8002d2c:	2203      	movs	r2, #3
 8002d2e:	481e      	ldr	r0, [pc, #120]	@ (8002da8 <extflash_send_cmd+0xe0>)
 8002d30:	f00e ff67 	bl	8011c02 <HAL_SPI_Transmit>
	}

	if(command->dummy_nb > 0)
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	88db      	ldrh	r3, [r3, #6]
 8002d38:	2b00      	cmp	r3, #0
 8002d3a:	d00e      	beq.n	8002d5a <extflash_send_cmd+0x92>
	{
		dummy = command->dummy_nb > sizeof(dummy_bytes) ? sizeof(dummy_bytes) : command->dummy_nb;
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	88db      	ldrh	r3, [r3, #6]
 8002d40:	2b08      	cmp	r3, #8
 8002d42:	bf28      	it	cs
 8002d44:	2308      	movcs	r3, #8
 8002d46:	b29b      	uxth	r3, r3
 8002d48:	77fb      	strb	r3, [r7, #31]
		HAL_SPI_Transmit(EXTFLASH_SPI, dummy_bytes, dummy, FLASH_SPI_DEF_TIMEOUT);
 8002d4a:	7ffb      	ldrb	r3, [r7, #31]
 8002d4c:	b29a      	uxth	r2, r3
 8002d4e:	f107 0110 	add.w	r1, r7, #16
 8002d52:	2364      	movs	r3, #100	@ 0x64
 8002d54:	4814      	ldr	r0, [pc, #80]	@ (8002da8 <extflash_send_cmd+0xe0>)
 8002d56:	f00e ff54 	bl	8011c02 <HAL_SPI_Transmit>
	}

	if(command->tx_nb > 0 && command->tx_data != NULL)
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	885b      	ldrh	r3, [r3, #2]
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	d00b      	beq.n	8002d7a <extflash_send_cmd+0xb2>
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	68db      	ldr	r3, [r3, #12]
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	d007      	beq.n	8002d7a <extflash_send_cmd+0xb2>
	{
		HAL_SPI_Transmit(EXTFLASH_SPI, command->tx_data, command->tx_nb, FLASH_SPI_DEF_TIMEOUT);
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	68d9      	ldr	r1, [r3, #12]
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	885a      	ldrh	r2, [r3, #2]
 8002d72:	2364      	movs	r3, #100	@ 0x64
 8002d74:	480c      	ldr	r0, [pc, #48]	@ (8002da8 <extflash_send_cmd+0xe0>)
 8002d76:	f00e ff44 	bl	8011c02 <HAL_SPI_Transmit>
	}

	if(command->rx_nb > 0 && command->rx_data != NULL)
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	889b      	ldrh	r3, [r3, #4]
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	d00b      	beq.n	8002d9a <extflash_send_cmd+0xd2>
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	691b      	ldr	r3, [r3, #16]
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	d007      	beq.n	8002d9a <extflash_send_cmd+0xd2>
	{
		HAL_SPI_Receive(EXTFLASH_SPI, command->rx_data, command->rx_nb, FLASH_SPI_DEF_TIMEOUT);
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	6919      	ldr	r1, [r3, #16]
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	889a      	ldrh	r2, [r3, #4]
 8002d92:	2364      	movs	r3, #100	@ 0x64
 8002d94:	4804      	ldr	r0, [pc, #16]	@ (8002da8 <extflash_send_cmd+0xe0>)
 8002d96:	f00f f8aa 	bl	8011eee <HAL_SPI_Receive>
	}

	extflash_cs_reset();
 8002d9a:	f7ff ff69 	bl	8002c70 <extflash_cs_reset>

	return 0;
 8002d9e:	2300      	movs	r3, #0
}
 8002da0:	4618      	mov	r0, r3
 8002da2:	3720      	adds	r7, #32
 8002da4:	46bd      	mov	sp, r7
 8002da6:	bd80      	pop	{r7, pc}
 8002da8:	2000023c 	.word	0x2000023c

08002dac <extflash_read_extended_read_reg>:

}


int extflash_read_extended_read_reg(uint8_t *ereg)
{
 8002dac:	b580      	push	{r7, lr}
 8002dae:	b088      	sub	sp, #32
 8002db0:	af00      	add	r7, sp, #0
 8002db2:	6078      	str	r0, [r7, #4]

	extflash_cmd command = {0};
 8002db4:	f107 030c 	add.w	r3, r7, #12
 8002db8:	2200      	movs	r2, #0
 8002dba:	601a      	str	r2, [r3, #0]
 8002dbc:	605a      	str	r2, [r3, #4]
 8002dbe:	609a      	str	r2, [r3, #8]
 8002dc0:	60da      	str	r2, [r3, #12]
 8002dc2:	611a      	str	r2, [r3, #16]
	command.cmd = EFLASH_CMD_RDERP;
 8002dc4:	2381      	movs	r3, #129	@ 0x81
 8002dc6:	733b      	strb	r3, [r7, #12]
	command.address_en = 0;
 8002dc8:	2300      	movs	r3, #0
 8002dca:	737b      	strb	r3, [r7, #13]
	command.address = 0;
 8002dcc:	2300      	movs	r3, #0
 8002dce:	617b      	str	r3, [r7, #20]
	command.rx_nb = 1;
 8002dd0:	2301      	movs	r3, #1
 8002dd2:	823b      	strh	r3, [r7, #16]
	command.rx_data = ereg;
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	61fb      	str	r3, [r7, #28]

	return extflash_send_cmd(&command);
 8002dd8:	f107 030c 	add.w	r3, r7, #12
 8002ddc:	4618      	mov	r0, r3
 8002dde:	f7ff ff73 	bl	8002cc8 <extflash_send_cmd>
 8002de2:	4603      	mov	r3, r0
}
 8002de4:	4618      	mov	r0, r3
 8002de6:	3720      	adds	r7, #32
 8002de8:	46bd      	mov	sp, r7
 8002dea:	bd80      	pop	{r7, pc}

08002dec <extflash_clear_extended_read_reg>:


int extflash_clear_extended_read_reg()
{
 8002dec:	b580      	push	{r7, lr}
 8002dee:	b086      	sub	sp, #24
 8002df0:	af00      	add	r7, sp, #0
	extflash_cmd command = {0};
 8002df2:	1d3b      	adds	r3, r7, #4
 8002df4:	2200      	movs	r2, #0
 8002df6:	601a      	str	r2, [r3, #0]
 8002df8:	605a      	str	r2, [r3, #4]
 8002dfa:	609a      	str	r2, [r3, #8]
 8002dfc:	60da      	str	r2, [r3, #12]
 8002dfe:	611a      	str	r2, [r3, #16]
	command.cmd = EFLASH_CMD_CLERP;
 8002e00:	2382      	movs	r3, #130	@ 0x82
 8002e02:	713b      	strb	r3, [r7, #4]

	return extflash_send_cmd(&command);
 8002e04:	1d3b      	adds	r3, r7, #4
 8002e06:	4618      	mov	r0, r3
 8002e08:	f7ff ff5e 	bl	8002cc8 <extflash_send_cmd>
 8002e0c:	4603      	mov	r3, r0
}
 8002e0e:	4618      	mov	r0, r3
 8002e10:	3718      	adds	r7, #24
 8002e12:	46bd      	mov	sp, r7
 8002e14:	bd80      	pop	{r7, pc}

08002e16 <extflash_set_write_protection>:
	return extflash_send_cmd(&command);

}

int extflash_set_write_protection(uint8_t enable)
{
 8002e16:	b580      	push	{r7, lr}
 8002e18:	b088      	sub	sp, #32
 8002e1a:	af00      	add	r7, sp, #0
 8002e1c:	4603      	mov	r3, r0
 8002e1e:	71fb      	strb	r3, [r7, #7]

	extflash_cmd command = {0};
 8002e20:	f107 030c 	add.w	r3, r7, #12
 8002e24:	2200      	movs	r2, #0
 8002e26:	601a      	str	r2, [r3, #0]
 8002e28:	605a      	str	r2, [r3, #4]
 8002e2a:	609a      	str	r2, [r3, #8]
 8002e2c:	60da      	str	r2, [r3, #12]
 8002e2e:	611a      	str	r2, [r3, #16]
	command.cmd = enable==0 ? EFLASH_CMD_WREN : EFLASH_CMD_WRDI;
 8002e30:	79fb      	ldrb	r3, [r7, #7]
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	d101      	bne.n	8002e3a <extflash_set_write_protection+0x24>
 8002e36:	2306      	movs	r3, #6
 8002e38:	e000      	b.n	8002e3c <extflash_set_write_protection+0x26>
 8002e3a:	2304      	movs	r3, #4
 8002e3c:	733b      	strb	r3, [r7, #12]

	return extflash_send_cmd(&command);
 8002e3e:	f107 030c 	add.w	r3, r7, #12
 8002e42:	4618      	mov	r0, r3
 8002e44:	f7ff ff40 	bl	8002cc8 <extflash_send_cmd>
 8002e48:	4603      	mov	r3, r0
}
 8002e4a:	4618      	mov	r0, r3
 8002e4c:	3720      	adds	r7, #32
 8002e4e:	46bd      	mov	sp, r7
 8002e50:	bd80      	pop	{r7, pc}

08002e52 <extflash_read_sfdp>:

int extflash_read_sfdp(uint32_t regaddr, uint8_t *reg, uint8_t nregs)
{
 8002e52:	b580      	push	{r7, lr}
 8002e54:	b08a      	sub	sp, #40	@ 0x28
 8002e56:	af00      	add	r7, sp, #0
 8002e58:	60f8      	str	r0, [r7, #12]
 8002e5a:	60b9      	str	r1, [r7, #8]
 8002e5c:	4613      	mov	r3, r2
 8002e5e:	71fb      	strb	r3, [r7, #7]

	extflash_cmd command = {0};
 8002e60:	f107 0314 	add.w	r3, r7, #20
 8002e64:	2200      	movs	r2, #0
 8002e66:	601a      	str	r2, [r3, #0]
 8002e68:	605a      	str	r2, [r3, #4]
 8002e6a:	609a      	str	r2, [r3, #8]
 8002e6c:	60da      	str	r2, [r3, #12]
 8002e6e:	611a      	str	r2, [r3, #16]
	command.cmd = EFLASH_CMD_RDSFDP;
 8002e70:	235a      	movs	r3, #90	@ 0x5a
 8002e72:	753b      	strb	r3, [r7, #20]
	command.address_en = 1;
 8002e74:	2301      	movs	r3, #1
 8002e76:	757b      	strb	r3, [r7, #21]
	command.address = regaddr;
 8002e78:	68fb      	ldr	r3, [r7, #12]
 8002e7a:	61fb      	str	r3, [r7, #28]
	command.dummy_nb = 1;
 8002e7c:	2301      	movs	r3, #1
 8002e7e:	837b      	strh	r3, [r7, #26]
	command.rx_nb = nregs;
 8002e80:	79fb      	ldrb	r3, [r7, #7]
 8002e82:	b29b      	uxth	r3, r3
 8002e84:	833b      	strh	r3, [r7, #24]
	command.rx_data = reg;
 8002e86:	68bb      	ldr	r3, [r7, #8]
 8002e88:	627b      	str	r3, [r7, #36]	@ 0x24

	return extflash_send_cmd(&command);
 8002e8a:	f107 0314 	add.w	r3, r7, #20
 8002e8e:	4618      	mov	r0, r3
 8002e90:	f7ff ff1a 	bl	8002cc8 <extflash_send_cmd>
 8002e94:	4603      	mov	r3, r0

}
 8002e96:	4618      	mov	r0, r3
 8002e98:	3728      	adds	r7, #40	@ 0x28
 8002e9a:	46bd      	mov	sp, r7
 8002e9c:	bd80      	pop	{r7, pc}

08002e9e <extflash_raw_read>:

int extflash_raw_read(uint32_t address, uint8_t *pBuffer, uint16_t nbytes)
{
 8002e9e:	b580      	push	{r7, lr}
 8002ea0:	b08a      	sub	sp, #40	@ 0x28
 8002ea2:	af00      	add	r7, sp, #0
 8002ea4:	60f8      	str	r0, [r7, #12]
 8002ea6:	60b9      	str	r1, [r7, #8]
 8002ea8:	4613      	mov	r3, r2
 8002eaa:	80fb      	strh	r3, [r7, #6]

	extflash_cmd command = {0};
 8002eac:	f107 0314 	add.w	r3, r7, #20
 8002eb0:	2200      	movs	r2, #0
 8002eb2:	601a      	str	r2, [r3, #0]
 8002eb4:	605a      	str	r2, [r3, #4]
 8002eb6:	609a      	str	r2, [r3, #8]
 8002eb8:	60da      	str	r2, [r3, #12]
 8002eba:	611a      	str	r2, [r3, #16]
	command.cmd = EFLASH_CMD_FRD;
 8002ebc:	230b      	movs	r3, #11
 8002ebe:	753b      	strb	r3, [r7, #20]
	command.address_en = 1;
 8002ec0:	2301      	movs	r3, #1
 8002ec2:	757b      	strb	r3, [r7, #21]
	command.address = address;
 8002ec4:	68fb      	ldr	r3, [r7, #12]
 8002ec6:	61fb      	str	r3, [r7, #28]
	command.dummy_nb = 1;
 8002ec8:	2301      	movs	r3, #1
 8002eca:	837b      	strh	r3, [r7, #26]
	command.rx_nb = nbytes;
 8002ecc:	88fb      	ldrh	r3, [r7, #6]
 8002ece:	833b      	strh	r3, [r7, #24]
	command.rx_data = pBuffer;
 8002ed0:	68bb      	ldr	r3, [r7, #8]
 8002ed2:	627b      	str	r3, [r7, #36]	@ 0x24

	return extflash_send_cmd(&command);
 8002ed4:	f107 0314 	add.w	r3, r7, #20
 8002ed8:	4618      	mov	r0, r3
 8002eda:	f7ff fef5 	bl	8002cc8 <extflash_send_cmd>
 8002ede:	4603      	mov	r3, r0

}
 8002ee0:	4618      	mov	r0, r3
 8002ee2:	3728      	adds	r7, #40	@ 0x28
 8002ee4:	46bd      	mov	sp, r7
 8002ee6:	bd80      	pop	{r7, pc}

08002ee8 <extflash_raw_erase>:

int extflash_raw_erase(uint32_t address)
{
 8002ee8:	b580      	push	{r7, lr}
 8002eea:	b088      	sub	sp, #32
 8002eec:	af00      	add	r7, sp, #0
 8002eee:	6078      	str	r0, [r7, #4]

	extflash_cmd command = {0};
 8002ef0:	f107 030c 	add.w	r3, r7, #12
 8002ef4:	2200      	movs	r2, #0
 8002ef6:	601a      	str	r2, [r3, #0]
 8002ef8:	605a      	str	r2, [r3, #4]
 8002efa:	609a      	str	r2, [r3, #8]
 8002efc:	60da      	str	r2, [r3, #12]
 8002efe:	611a      	str	r2, [r3, #16]
	command.cmd = EFLASH_CMD_SER;
 8002f00:	23d7      	movs	r3, #215	@ 0xd7
 8002f02:	733b      	strb	r3, [r7, #12]
	command.address_en = 1;
 8002f04:	2301      	movs	r3, #1
 8002f06:	737b      	strb	r3, [r7, #13]
	command.address = address;
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	617b      	str	r3, [r7, #20]

	return extflash_send_cmd(&command);
 8002f0c:	f107 030c 	add.w	r3, r7, #12
 8002f10:	4618      	mov	r0, r3
 8002f12:	f7ff fed9 	bl	8002cc8 <extflash_send_cmd>
 8002f16:	4603      	mov	r3, r0
}
 8002f18:	4618      	mov	r0, r3
 8002f1a:	3720      	adds	r7, #32
 8002f1c:	46bd      	mov	sp, r7
 8002f1e:	bd80      	pop	{r7, pc}

08002f20 <extflash_raw_page_write>:

int extflash_raw_page_write(uint32_t address, const uint8_t *pBuffer)
{
 8002f20:	b580      	push	{r7, lr}
 8002f22:	b088      	sub	sp, #32
 8002f24:	af00      	add	r7, sp, #0
 8002f26:	6078      	str	r0, [r7, #4]
 8002f28:	6039      	str	r1, [r7, #0]

	extflash_cmd command = {0};
 8002f2a:	f107 030c 	add.w	r3, r7, #12
 8002f2e:	2200      	movs	r2, #0
 8002f30:	601a      	str	r2, [r3, #0]
 8002f32:	605a      	str	r2, [r3, #4]
 8002f34:	609a      	str	r2, [r3, #8]
 8002f36:	60da      	str	r2, [r3, #12]
 8002f38:	611a      	str	r2, [r3, #16]
	command.cmd = EFLASH_CMD_PP;
 8002f3a:	2302      	movs	r3, #2
 8002f3c:	733b      	strb	r3, [r7, #12]
	command.address_en = 1;
 8002f3e:	2301      	movs	r3, #1
 8002f40:	737b      	strb	r3, [r7, #13]
	command.address = address;
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	617b      	str	r3, [r7, #20]
	command.tx_nb = EFLASH_DEF_PAGE_SIZE;
 8002f46:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002f4a:	81fb      	strh	r3, [r7, #14]
	command.tx_data = pBuffer;
 8002f4c:	683b      	ldr	r3, [r7, #0]
 8002f4e:	61bb      	str	r3, [r7, #24]

	return extflash_send_cmd(&command);
 8002f50:	f107 030c 	add.w	r3, r7, #12
 8002f54:	4618      	mov	r0, r3
 8002f56:	f7ff feb7 	bl	8002cc8 <extflash_send_cmd>
 8002f5a:	4603      	mov	r3, r0
}
 8002f5c:	4618      	mov	r0, r3
 8002f5e:	3720      	adds	r7, #32
 8002f60:	46bd      	mov	sp, r7
 8002f62:	bd80      	pop	{r7, pc}

08002f64 <extflash_sector_read>:


int extflash_sector_read(uint32_t sector, uint32_t nsectors, uint8_t *pBuffer)
{
 8002f64:	b580      	push	{r7, lr}
 8002f66:	b08a      	sub	sp, #40	@ 0x28
 8002f68:	af00      	add	r7, sp, #0
 8002f6a:	60f8      	str	r0, [r7, #12]
 8002f6c:	60b9      	str	r1, [r7, #8]
 8002f6e:	607a      	str	r2, [r7, #4]
	int result = 0;
 8002f70:	2300      	movs	r3, #0
 8002f72:	61fb      	str	r3, [r7, #28]
	uint8_t ereg = 0;
 8002f74:	2300      	movs	r3, #0
 8002f76:	75fb      	strb	r3, [r7, #23]
	uint32_t tmo = HAL_GetTick();
 8002f78:	f008 f9c4 	bl	800b304 <HAL_GetTick>
 8002f7c:	61b8      	str	r0, [r7, #24]
	uint8_t *wPtr = pBuffer;
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	627b      	str	r3, [r7, #36]	@ 0x24
	uint32_t address = sector * EFLASH_DEF_SECTOR_SIZE;
 8002f82:	68fb      	ldr	r3, [r7, #12]
 8002f84:	031b      	lsls	r3, r3, #12
 8002f86:	623b      	str	r3, [r7, #32]

	if(extflash_read_extended_read_reg(&ereg) < 0)return -1;
 8002f88:	f107 0317 	add.w	r3, r7, #23
 8002f8c:	4618      	mov	r0, r3
 8002f8e:	f7ff ff0d 	bl	8002dac <extflash_read_extended_read_reg>
 8002f92:	4603      	mov	r3, r0
 8002f94:	2b00      	cmp	r3, #0
 8002f96:	da10      	bge.n	8002fba <extflash_sector_read+0x56>
 8002f98:	f04f 33ff 	mov.w	r3, #4294967295
 8002f9c:	e037      	b.n	800300e <extflash_sector_read+0xaa>

	while((ereg & ESTATUS_WIP) && (HAL_GetTick() - tmo < FLASH_WRITE_ERASE_TIMEOUT))
	{
		//Scrittura-erase in corso
		if(extflash_read_extended_read_reg(&ereg) < 0)return -1;
 8002f9e:	f107 0317 	add.w	r3, r7, #23
 8002fa2:	4618      	mov	r0, r3
 8002fa4:	f7ff ff02 	bl	8002dac <extflash_read_extended_read_reg>
 8002fa8:	4603      	mov	r3, r0
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	da02      	bge.n	8002fb4 <extflash_sector_read+0x50>
 8002fae:	f04f 33ff 	mov.w	r3, #4294967295
 8002fb2:	e02c      	b.n	800300e <extflash_sector_read+0xaa>
		HAL_Delay(FLASH_STATUS_POLL_INTERVAL);
 8002fb4:	2001      	movs	r0, #1
 8002fb6:	f008 f9b1 	bl	800b31c <HAL_Delay>
	while((ereg & ESTATUS_WIP) && (HAL_GetTick() - tmo < FLASH_WRITE_ERASE_TIMEOUT))
 8002fba:	7dfb      	ldrb	r3, [r7, #23]
 8002fbc:	f003 0301 	and.w	r3, r3, #1
 8002fc0:	2b00      	cmp	r3, #0
 8002fc2:	d020      	beq.n	8003006 <extflash_sector_read+0xa2>
 8002fc4:	f008 f99e 	bl	800b304 <HAL_GetTick>
 8002fc8:	4602      	mov	r2, r0
 8002fca:	69bb      	ldr	r3, [r7, #24]
 8002fcc:	1ad3      	subs	r3, r2, r3
 8002fce:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8002fd2:	d3e4      	bcc.n	8002f9e <extflash_sector_read+0x3a>
	}

	while(nsectors > 0)
 8002fd4:	e017      	b.n	8003006 <extflash_sector_read+0xa2>
	{
		result = extflash_raw_read(address, wPtr, EFLASH_DEF_SECTOR_SIZE);
 8002fd6:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8002fda:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002fdc:	6a38      	ldr	r0, [r7, #32]
 8002fde:	f7ff ff5e 	bl	8002e9e <extflash_raw_read>
 8002fe2:	61f8      	str	r0, [r7, #28]
		if(result < 0)return -1;
 8002fe4:	69fb      	ldr	r3, [r7, #28]
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	da02      	bge.n	8002ff0 <extflash_sector_read+0x8c>
 8002fea:	f04f 33ff 	mov.w	r3, #4294967295
 8002fee:	e00e      	b.n	800300e <extflash_sector_read+0xaa>

		address += EFLASH_DEF_SECTOR_SIZE;
 8002ff0:	6a3b      	ldr	r3, [r7, #32]
 8002ff2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002ff6:	623b      	str	r3, [r7, #32]
		wPtr += EFLASH_DEF_SECTOR_SIZE;
 8002ff8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ffa:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002ffe:	627b      	str	r3, [r7, #36]	@ 0x24
		nsectors--;
 8003000:	68bb      	ldr	r3, [r7, #8]
 8003002:	3b01      	subs	r3, #1
 8003004:	60bb      	str	r3, [r7, #8]
	while(nsectors > 0)
 8003006:	68bb      	ldr	r3, [r7, #8]
 8003008:	2b00      	cmp	r3, #0
 800300a:	d1e4      	bne.n	8002fd6 <extflash_sector_read+0x72>
	}

	return 0;
 800300c:	2300      	movs	r3, #0

}
 800300e:	4618      	mov	r0, r3
 8003010:	3728      	adds	r7, #40	@ 0x28
 8003012:	46bd      	mov	sp, r7
 8003014:	bd80      	pop	{r7, pc}

08003016 <extflash_wait_for_wop>:

int extflash_wait_for_wop(uint32_t timeout)
{
 8003016:	b580      	push	{r7, lr}
 8003018:	b084      	sub	sp, #16
 800301a:	af00      	add	r7, sp, #0
 800301c:	6078      	str	r0, [r7, #4]
	uint8_t ereg = 0;
 800301e:	2300      	movs	r3, #0
 8003020:	72fb      	strb	r3, [r7, #11]
	uint32_t tmo = HAL_GetTick();
 8003022:	f008 f96f 	bl	800b304 <HAL_GetTick>
 8003026:	60f8      	str	r0, [r7, #12]

	if(extflash_read_extended_read_reg(&ereg) < 0)return -1;
 8003028:	f107 030b 	add.w	r3, r7, #11
 800302c:	4618      	mov	r0, r3
 800302e:	f7ff febd 	bl	8002dac <extflash_read_extended_read_reg>
 8003032:	4603      	mov	r3, r0
 8003034:	2b00      	cmp	r3, #0
 8003036:	da10      	bge.n	800305a <extflash_wait_for_wop+0x44>
 8003038:	f04f 33ff 	mov.w	r3, #4294967295
 800303c:	e023      	b.n	8003086 <extflash_wait_for_wop+0x70>

	while((ereg & ESTATUS_WIP) && (HAL_GetTick() - tmo < timeout))
	{
		//Scrittura-erase in corso
		if(extflash_read_extended_read_reg(&ereg) < 0)return -1;
 800303e:	f107 030b 	add.w	r3, r7, #11
 8003042:	4618      	mov	r0, r3
 8003044:	f7ff feb2 	bl	8002dac <extflash_read_extended_read_reg>
 8003048:	4603      	mov	r3, r0
 800304a:	2b00      	cmp	r3, #0
 800304c:	da02      	bge.n	8003054 <extflash_wait_for_wop+0x3e>
 800304e:	f04f 33ff 	mov.w	r3, #4294967295
 8003052:	e018      	b.n	8003086 <extflash_wait_for_wop+0x70>
		HAL_Delay(FLASH_STATUS_POLL_INTERVAL);
 8003054:	2001      	movs	r0, #1
 8003056:	f008 f961 	bl	800b31c <HAL_Delay>
	while((ereg & ESTATUS_WIP) && (HAL_GetTick() - tmo < timeout))
 800305a:	7afb      	ldrb	r3, [r7, #11]
 800305c:	f003 0301 	and.w	r3, r3, #1
 8003060:	2b00      	cmp	r3, #0
 8003062:	d007      	beq.n	8003074 <extflash_wait_for_wop+0x5e>
 8003064:	f008 f94e 	bl	800b304 <HAL_GetTick>
 8003068:	4602      	mov	r2, r0
 800306a:	68fb      	ldr	r3, [r7, #12]
 800306c:	1ad3      	subs	r3, r2, r3
 800306e:	687a      	ldr	r2, [r7, #4]
 8003070:	429a      	cmp	r2, r3
 8003072:	d8e4      	bhi.n	800303e <extflash_wait_for_wop+0x28>
	}

	if(ereg & (ESTATUS_PROT_ERR | ESTATUS_P_ERR | ESTATUS_E_ERR))
 8003074:	7afb      	ldrb	r3, [r7, #11]
 8003076:	f003 030e 	and.w	r3, r3, #14
 800307a:	2b00      	cmp	r3, #0
 800307c:	d002      	beq.n	8003084 <extflash_wait_for_wop+0x6e>
	{
		return -2; //Erase o write error
 800307e:	f06f 0301 	mvn.w	r3, #1
 8003082:	e000      	b.n	8003086 <extflash_wait_for_wop+0x70>
	}

	return 0;
 8003084:	2300      	movs	r3, #0
}
 8003086:	4618      	mov	r0, r3
 8003088:	3710      	adds	r7, #16
 800308a:	46bd      	mov	sp, r7
 800308c:	bd80      	pop	{r7, pc}

0800308e <extflash_sector_write>:

int extflash_sector_write(uint32_t sector, uint32_t nsectors, const uint8_t *pBuffer)
{
 800308e:	b580      	push	{r7, lr}
 8003090:	b088      	sub	sp, #32
 8003092:	af00      	add	r7, sp, #0
 8003094:	60f8      	str	r0, [r7, #12]
 8003096:	60b9      	str	r1, [r7, #8]
 8003098:	607a      	str	r2, [r7, #4]
	int result = 0;
 800309a:	2300      	movs	r3, #0
 800309c:	613b      	str	r3, [r7, #16]
	const uint8_t *wPtr = pBuffer;
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	61fb      	str	r3, [r7, #28]
	uint32_t address = sector * EFLASH_DEF_SECTOR_SIZE;
 80030a2:	68fb      	ldr	r3, [r7, #12]
 80030a4:	031b      	lsls	r3, r3, #12
 80030a6:	61bb      	str	r3, [r7, #24]

	extflash_clear_extended_read_reg();
 80030a8:	f7ff fea0 	bl	8002dec <extflash_clear_extended_read_reg>

	while(nsectors > 0)
 80030ac:	e04e      	b.n	800314c <extflash_sector_write+0xbe>
	{
		//Controllo operazioni in corso
		result = extflash_wait_for_wop(FLASH_WRITE_ERASE_TIMEOUT);
 80030ae:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80030b2:	f7ff ffb0 	bl	8003016 <extflash_wait_for_wop>
 80030b6:	6138      	str	r0, [r7, #16]
		if(result < 0)break;
 80030b8:	693b      	ldr	r3, [r7, #16]
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	db4a      	blt.n	8003154 <extflash_sector_write+0xc6>

		//Erase del settore
		result = extflash_set_write_protection(0);
 80030be:	2000      	movs	r0, #0
 80030c0:	f7ff fea9 	bl	8002e16 <extflash_set_write_protection>
 80030c4:	6138      	str	r0, [r7, #16]
		if(result < 0)break;
 80030c6:	693b      	ldr	r3, [r7, #16]
 80030c8:	2b00      	cmp	r3, #0
 80030ca:	db45      	blt.n	8003158 <extflash_sector_write+0xca>
		result = extflash_raw_erase(address);
 80030cc:	69b8      	ldr	r0, [r7, #24]
 80030ce:	f7ff ff0b 	bl	8002ee8 <extflash_raw_erase>
 80030d2:	6138      	str	r0, [r7, #16]
		if(result < 0)break;
 80030d4:	693b      	ldr	r3, [r7, #16]
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	db40      	blt.n	800315c <extflash_sector_write+0xce>

		//Attesa ERASE
		result = extflash_wait_for_wop(FLASH_WRITE_ERASE_TIMEOUT);
 80030da:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80030de:	f7ff ff9a 	bl	8003016 <extflash_wait_for_wop>
 80030e2:	6138      	str	r0, [r7, #16]
		if(result < 0)break;
 80030e4:	693b      	ldr	r3, [r7, #16]
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	db3a      	blt.n	8003160 <extflash_sector_write+0xd2>

		for(int i=0; i < EFLASH_PAGES_PER_SECTOR; i++)
 80030ea:	2300      	movs	r3, #0
 80030ec:	617b      	str	r3, [r7, #20]
 80030ee:	e021      	b.n	8003134 <extflash_sector_write+0xa6>
		{
			result = extflash_set_write_protection(0);
 80030f0:	2000      	movs	r0, #0
 80030f2:	f7ff fe90 	bl	8002e16 <extflash_set_write_protection>
 80030f6:	6138      	str	r0, [r7, #16]
			if(result < 0)break;
 80030f8:	693b      	ldr	r3, [r7, #16]
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	db1e      	blt.n	800313c <extflash_sector_write+0xae>
			result = extflash_raw_page_write(address, wPtr);
 80030fe:	69f9      	ldr	r1, [r7, #28]
 8003100:	69b8      	ldr	r0, [r7, #24]
 8003102:	f7ff ff0d 	bl	8002f20 <extflash_raw_page_write>
 8003106:	6138      	str	r0, [r7, #16]
			if(result < 0)break;
 8003108:	693b      	ldr	r3, [r7, #16]
 800310a:	2b00      	cmp	r3, #0
 800310c:	db18      	blt.n	8003140 <extflash_sector_write+0xb2>

			address += EFLASH_DEF_PAGE_SIZE;
 800310e:	69bb      	ldr	r3, [r7, #24]
 8003110:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 8003114:	61bb      	str	r3, [r7, #24]
			wPtr += EFLASH_DEF_PAGE_SIZE;
 8003116:	69fb      	ldr	r3, [r7, #28]
 8003118:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 800311c:	61fb      	str	r3, [r7, #28]
			//Attesa write
			result = extflash_wait_for_wop(FLASH_WRITE_ERASE_TIMEOUT);
 800311e:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8003122:	f7ff ff78 	bl	8003016 <extflash_wait_for_wop>
 8003126:	6138      	str	r0, [r7, #16]
			if(result < 0)break;
 8003128:	693b      	ldr	r3, [r7, #16]
 800312a:	2b00      	cmp	r3, #0
 800312c:	db0a      	blt.n	8003144 <extflash_sector_write+0xb6>
		for(int i=0; i < EFLASH_PAGES_PER_SECTOR; i++)
 800312e:	697b      	ldr	r3, [r7, #20]
 8003130:	3301      	adds	r3, #1
 8003132:	617b      	str	r3, [r7, #20]
 8003134:	697b      	ldr	r3, [r7, #20]
 8003136:	2b0f      	cmp	r3, #15
 8003138:	ddda      	ble.n	80030f0 <extflash_sector_write+0x62>
 800313a:	e004      	b.n	8003146 <extflash_sector_write+0xb8>
			if(result < 0)break;
 800313c:	bf00      	nop
 800313e:	e002      	b.n	8003146 <extflash_sector_write+0xb8>
			if(result < 0)break;
 8003140:	bf00      	nop
 8003142:	e000      	b.n	8003146 <extflash_sector_write+0xb8>
			if(result < 0)break;
 8003144:	bf00      	nop
		}

		nsectors--;
 8003146:	68bb      	ldr	r3, [r7, #8]
 8003148:	3b01      	subs	r3, #1
 800314a:	60bb      	str	r3, [r7, #8]
	while(nsectors > 0)
 800314c:	68bb      	ldr	r3, [r7, #8]
 800314e:	2b00      	cmp	r3, #0
 8003150:	d1ad      	bne.n	80030ae <extflash_sector_write+0x20>
 8003152:	e006      	b.n	8003162 <extflash_sector_write+0xd4>
		if(result < 0)break;
 8003154:	bf00      	nop
 8003156:	e004      	b.n	8003162 <extflash_sector_write+0xd4>
		if(result < 0)break;
 8003158:	bf00      	nop
 800315a:	e002      	b.n	8003162 <extflash_sector_write+0xd4>
		if(result < 0)break;
 800315c:	bf00      	nop
 800315e:	e000      	b.n	8003162 <extflash_sector_write+0xd4>
		if(result < 0)break;
 8003160:	bf00      	nop
	}

	extflash_set_write_protection(1);
 8003162:	2001      	movs	r0, #1
 8003164:	f7ff fe57 	bl	8002e16 <extflash_set_write_protection>

	return 0;
 8003168:	2300      	movs	r3, #0

}
 800316a:	4618      	mov	r0, r3
 800316c:	3720      	adds	r7, #32
 800316e:	46bd      	mov	sp, r7
 8003170:	bd80      	pop	{r7, pc}

08003172 <extflash_get_sector_size>:


unsigned int extflash_get_sector_size()
{
 8003172:	b480      	push	{r7}
 8003174:	af00      	add	r7, sp, #0
	return EFLASH_DEF_SECTOR_SIZE;
 8003176:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
}
 800317a:	4618      	mov	r0, r3
 800317c:	46bd      	mov	sp, r7
 800317e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003182:	4770      	bx	lr

08003184 <extflash_get_sector_count>:

unsigned int extflash_get_sector_count()
{
 8003184:	b480      	push	{r7}
 8003186:	af00      	add	r7, sp, #0
	return exflashNumSectors;
 8003188:	4b03      	ldr	r3, [pc, #12]	@ (8003198 <extflash_get_sector_count+0x14>)
 800318a:	681b      	ldr	r3, [r3, #0]
}
 800318c:	4618      	mov	r0, r3
 800318e:	46bd      	mov	sp, r7
 8003190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003194:	4770      	bx	lr
 8003196:	bf00      	nop
 8003198:	200000a8 	.word	0x200000a8

0800319c <extflash_is_initialized>:
{
	return exflashSize;
}

int extflash_is_initialized()
{
 800319c:	b480      	push	{r7}
 800319e:	af00      	add	r7, sp, #0
	return exflashInitDone;
 80031a0:	4b03      	ldr	r3, [pc, #12]	@ (80031b0 <extflash_is_initialized+0x14>)
 80031a2:	781b      	ldrb	r3, [r3, #0]
}
 80031a4:	4618      	mov	r0, r3
 80031a6:	46bd      	mov	sp, r7
 80031a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ac:	4770      	bx	lr
 80031ae:	bf00      	nop
 80031b0:	200000ac 	.word	0x200000ac

080031b4 <extflash_init>:

int extflash_init()
{
 80031b4:	b580      	push	{r7, lr}
 80031b6:	b088      	sub	sp, #32
 80031b8:	af00      	add	r7, sp, #0
	uint8_t manufacturer_id[2] = {0};
 80031ba:	2300      	movs	r3, #0
 80031bc:	83bb      	strh	r3, [r7, #28]
	extflash_cmd command = {0};
 80031be:	f107 0308 	add.w	r3, r7, #8
 80031c2:	2200      	movs	r2, #0
 80031c4:	601a      	str	r2, [r3, #0]
 80031c6:	605a      	str	r2, [r3, #4]
 80031c8:	609a      	str	r2, [r3, #8]
 80031ca:	60da      	str	r2, [r3, #12]
 80031cc:	611a      	str	r2, [r3, #16]
	uint8_t density[4] = {0};
 80031ce:	2300      	movs	r3, #0
 80031d0:	607b      	str	r3, [r7, #4]

	exflashInitDone = 0;
 80031d2:	4b26      	ldr	r3, [pc, #152]	@ (800326c <extflash_init+0xb8>)
 80031d4:	2200      	movs	r2, #0
 80031d6:	701a      	strb	r2, [r3, #0]
	exflashNumSectors = 0;
 80031d8:	4b25      	ldr	r3, [pc, #148]	@ (8003270 <extflash_init+0xbc>)
 80031da:	2200      	movs	r2, #0
 80031dc:	601a      	str	r2, [r3, #0]

	extflash_hard_reset();
 80031de:	f7ff fd5f 	bl	8002ca0 <extflash_hard_reset>
	extflash_cs_reset();
 80031e2:	f7ff fd45 	bl	8002c70 <extflash_cs_reset>
	extflash_wp_reset();
 80031e6:	f7ff fd4f 	bl	8002c88 <extflash_wp_reset>

	command.cmd = EFLASH_CMD_RDMDID;
 80031ea:	2390      	movs	r3, #144	@ 0x90
 80031ec:	723b      	strb	r3, [r7, #8]
	command.address_en = 1;
 80031ee:	2301      	movs	r3, #1
 80031f0:	727b      	strb	r3, [r7, #9]
	command.address = 0;
 80031f2:	2300      	movs	r3, #0
 80031f4:	613b      	str	r3, [r7, #16]
	command.rx_nb = 2;
 80031f6:	2302      	movs	r3, #2
 80031f8:	81bb      	strh	r3, [r7, #12]
	command.rx_data = manufacturer_id;
 80031fa:	f107 031c 	add.w	r3, r7, #28
 80031fe:	61bb      	str	r3, [r7, #24]

	extflash_send_cmd(&command);
 8003200:	f107 0308 	add.w	r3, r7, #8
 8003204:	4618      	mov	r0, r3
 8003206:	f7ff fd5f 	bl	8002cc8 <extflash_send_cmd>

	if(manufacturer_id[0] != EFLASH_DEF_MANIFACTURER || manufacturer_id[1] != EFLASH_DEF_DEVID)
 800320a:	7f3b      	ldrb	r3, [r7, #28]
 800320c:	2b9d      	cmp	r3, #157	@ 0x9d
 800320e:	d102      	bne.n	8003216 <extflash_init+0x62>
 8003210:	7f7b      	ldrb	r3, [r7, #29]
 8003212:	2b17      	cmp	r3, #23
 8003214:	d002      	beq.n	800321c <extflash_init+0x68>
	{
		return -1;
 8003216:	f04f 33ff 	mov.w	r3, #4294967295
 800321a:	e022      	b.n	8003262 <extflash_init+0xae>
	}

	memset((void *)&command, 0, sizeof(command));
 800321c:	f107 0308 	add.w	r3, r7, #8
 8003220:	2214      	movs	r2, #20
 8003222:	2100      	movs	r1, #0
 8003224:	4618      	mov	r0, r3
 8003226:	f013 f935 	bl	8016494 <memset>

	extflash_read_sfdp(SFDP_FLASH_DENSITY, density, sizeof(density));
 800322a:	1d3b      	adds	r3, r7, #4
 800322c:	2204      	movs	r2, #4
 800322e:	4619      	mov	r1, r3
 8003230:	2034      	movs	r0, #52	@ 0x34
 8003232:	f7ff fe0e 	bl	8002e52 <extflash_read_sfdp>

	memcpy(&exflashSize, density, sizeof(uint32_t));
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	4a0e      	ldr	r2, [pc, #56]	@ (8003274 <extflash_init+0xc0>)
 800323a:	6013      	str	r3, [r2, #0]

	exflashSize += 1;
 800323c:	4b0d      	ldr	r3, [pc, #52]	@ (8003274 <extflash_init+0xc0>)
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	3301      	adds	r3, #1
 8003242:	4a0c      	ldr	r2, [pc, #48]	@ (8003274 <extflash_init+0xc0>)
 8003244:	6013      	str	r3, [r2, #0]
	exflashSize >>= 3;
 8003246:	4b0b      	ldr	r3, [pc, #44]	@ (8003274 <extflash_init+0xc0>)
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	08db      	lsrs	r3, r3, #3
 800324c:	4a09      	ldr	r2, [pc, #36]	@ (8003274 <extflash_init+0xc0>)
 800324e:	6013      	str	r3, [r2, #0]

	exflashNumSectors = exflashSize / EFLASH_DEF_SECTOR_SIZE;
 8003250:	4b08      	ldr	r3, [pc, #32]	@ (8003274 <extflash_init+0xc0>)
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	0b1b      	lsrs	r3, r3, #12
 8003256:	4a06      	ldr	r2, [pc, #24]	@ (8003270 <extflash_init+0xbc>)
 8003258:	6013      	str	r3, [r2, #0]

	exflashInitDone = 1;
 800325a:	4b04      	ldr	r3, [pc, #16]	@ (800326c <extflash_init+0xb8>)
 800325c:	2201      	movs	r2, #1
 800325e:	701a      	strb	r2, [r3, #0]

	return 0;
 8003260:	2300      	movs	r3, #0

}
 8003262:	4618      	mov	r0, r3
 8003264:	3720      	adds	r7, #32
 8003266:	46bd      	mov	sp, r7
 8003268:	bd80      	pop	{r7, pc}
 800326a:	bf00      	nop
 800326c:	200000ac 	.word	0x200000ac
 8003270:	200000a8 	.word	0x200000a8
 8003274:	200000a4 	.word	0x200000a4

08003278 <System_Init>:
#include "lsm6dsv16x_rw.h"
#include "DS18B20.h"

/*-----INIZiALIZZAZIONE SISTEMA-----*/
void System_Init(void)
{
 8003278:	b580      	push	{r7, lr}
 800327a:	af00      	add	r7, sp, #0
	acc.write_reg = acc_write;
 800327c:	4b22      	ldr	r3, [pc, #136]	@ (8003308 <System_Init+0x90>)
 800327e:	4a23      	ldr	r2, [pc, #140]	@ (800330c <System_Init+0x94>)
 8003280:	601a      	str	r2, [r3, #0]
	acc.read_reg = acc_read;
 8003282:	4b21      	ldr	r3, [pc, #132]	@ (8003308 <System_Init+0x90>)
 8003284:	4a22      	ldr	r2, [pc, #136]	@ (8003310 <System_Init+0x98>)
 8003286:	605a      	str	r2, [r3, #4]
	acc.handle = &hspi3;
 8003288:	4b1f      	ldr	r3, [pc, #124]	@ (8003308 <System_Init+0x90>)
 800328a:	4a22      	ldr	r2, [pc, #136]	@ (8003314 <System_Init+0x9c>)
 800328c:	60da      	str	r2, [r3, #12]

	LED_Init();	
 800328e:	f000 fa87 	bl	80037a0 <LED_Init>
	LED_Start(GRN_LED, FAST, HIGH);
 8003292:	2205      	movs	r2, #5
 8003294:	2100      	movs	r1, #0
 8003296:	2008      	movs	r0, #8
 8003298:	f000 faa2 	bl	80037e0 <LED_Start>

	BC_Init();
 800329c:	f7ff f9b4 	bl	8002608 <BC_Init>
	INA3221_Init();
 80032a0:	f7fd fe9a 	bl	8000fd8 <INA3221_Init>
	FatFS_Init();
 80032a4:	f000 f840 	bl	8003328 <FatFS_Init>
	Config_Init();
 80032a8:	f000 f9ae 	bl	8003608 <Config_Init>
	Acc_Init(&acc, config.samp_freq);
 80032ac:	4b1a      	ldr	r3, [pc, #104]	@ (8003318 <System_Init+0xa0>)
 80032ae:	885b      	ldrh	r3, [r3, #2]
 80032b0:	4619      	mov	r1, r3
 80032b2:	4815      	ldr	r0, [pc, #84]	@ (8003308 <System_Init+0x90>)
 80032b4:	f000 f8d4 	bl	8003460 <Acc_Init>
	LED_Start(ORG_LED, FAST, HALF);
 80032b8:	2206      	movs	r2, #6
 80032ba:	2100      	movs	r1, #0
 80032bc:	2000      	movs	r0, #0
 80032be:	f000 fa8f 	bl	80037e0 <LED_Start>
	while(SIM_Init() != HAL_OK);
 80032c2:	bf00      	nop
 80032c4:	f7fe f8fc 	bl	80014c0 <SIM_Init>
 80032c8:	4603      	mov	r3, r0
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	d1fa      	bne.n	80032c4 <System_Init+0x4c>
	LED_Stop(ORG_LED);
 80032ce:	2000      	movs	r0, #0
 80032d0:	f000 fb52 	bl	8003978 <LED_Stop>
	RTC_Init();
 80032d4:	f7fd ff34 	bl	8001140 <RTC_Init>
	Temperature = Read_Temperature();
 80032d8:	f7fd fe46 	bl	8000f68 <Read_Temperature>
 80032dc:	4603      	mov	r3, r0
 80032de:	461a      	mov	r2, r3
 80032e0:	4b0e      	ldr	r3, [pc, #56]	@ (800331c <System_Init+0xa4>)
 80032e2:	801a      	strh	r2, [r3, #0]

	HAL_UARTEx_ReceiveToIdle_DMA(SIM_UART, sim_rx_buffer, SIM_RXBUFFER_SIZE);
 80032e4:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 80032e8:	490d      	ldr	r1, [pc, #52]	@ (8003320 <System_Init+0xa8>)
 80032ea:	480e      	ldr	r0, [pc, #56]	@ (8003324 <System_Init+0xac>)
 80032ec:	f012 ff94 	bl	8016218 <HAL_UARTEx_ReceiveToIdle_DMA>

	HAL_Delay(9000);
 80032f0:	f242 3028 	movw	r0, #9000	@ 0x2328
 80032f4:	f008 f812 	bl	800b31c <HAL_Delay>
	LED_Start(GRN_LED, MEDIUM, HALF);
 80032f8:	2206      	movs	r2, #6
 80032fa:	2101      	movs	r1, #1
 80032fc:	2008      	movs	r0, #8
 80032fe:	f000 fa6f 	bl	80037e0 <LED_Start>
}
 8003302:	bf00      	nop
 8003304:	bd80      	pop	{r7, pc}
 8003306:	bf00      	nop
 8003308:	20004f84 	.word	0x20004f84
 800330c:	080041cf 	.word	0x080041cf
 8003310:	08004227 	.word	0x08004227
 8003314:	200002a0 	.word	0x200002a0
 8003318:	20001784 	.word	0x20001784
 800331c:	200041c0 	.word	0x200041c0
 8003320:	20004f94 	.word	0x20004f94
 8003324:	200004bc 	.word	0x200004bc

08003328 <FatFS_Init>:

/*-----INIZiALIZZAZIONE MEMORIE-----*/
void FatFS_Init(void)
{
 8003328:	b580      	push	{r7, lr}
 800332a:	b086      	sub	sp, #24
 800332c:	af00      	add	r7, sp, #0
	FRESULT fRes = 0;
 800332e:	2300      	movs	r3, #0
 8003330:	75fb      	strb	r3, [r7, #23]
	MKFS_PARM mkfs_opt = {0};
 8003332:	1d3b      	adds	r3, r7, #4
 8003334:	2200      	movs	r2, #0
 8003336:	601a      	str	r2, [r3, #0]
 8003338:	605a      	str	r2, [r3, #4]
 800333a:	609a      	str	r2, [r3, #8]
 800333c:	60da      	str	r2, [r3, #12]

	do
	{
		sys.RAM_Mounted = 0;
 800333e:	4b41      	ldr	r3, [pc, #260]	@ (8003444 <FatFS_Init+0x11c>)
 8003340:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003344:	461a      	mov	r2, r3
 8003346:	f892 302c 	ldrb.w	r3, [r2, #44]	@ 0x2c
 800334a:	f023 0302 	bic.w	r3, r3, #2
 800334e:	f882 302c 	strb.w	r3, [r2, #44]	@ 0x2c
		
		mkfs_opt.fmt = FM_FAT;
 8003352:	2301      	movs	r3, #1
 8003354:	713b      	strb	r3, [r7, #4]
		mkfs_opt.au_size = 1024;
 8003356:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800335a:	613b      	str	r3, [r7, #16]
		mkfs_opt.n_fat = 1;
 800335c:	2301      	movs	r3, #1
 800335e:	717b      	strb	r3, [r7, #5]
		mkfs_opt.align = 1;
 8003360:	2301      	movs	r3, #1
 8003362:	60bb      	str	r3, [r7, #8]

		fRes = f_mkfs("/ram", &mkfs_opt, psram_fs.win, sizeof(psram_fs.win));
 8003364:	1d39      	adds	r1, r7, #4
 8003366:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800336a:	4a37      	ldr	r2, [pc, #220]	@ (8003448 <FatFS_Init+0x120>)
 800336c:	4837      	ldr	r0, [pc, #220]	@ (800344c <FatFS_Init+0x124>)
 800336e:	f007 fae7 	bl	800a940 <f_mkfs>
 8003372:	4603      	mov	r3, r0
 8003374:	75fb      	strb	r3, [r7, #23]
		if (fRes != FR_OK)
 8003376:	7dfb      	ldrb	r3, [r7, #23]
 8003378:	2b00      	cmp	r3, #0
 800337a:	d114      	bne.n	80033a6 <FatFS_Init+0x7e>
		{
			break;
		}

		fRes = f_mount(&psram_fs, "/ram", 1);
 800337c:	2201      	movs	r2, #1
 800337e:	4933      	ldr	r1, [pc, #204]	@ (800344c <FatFS_Init+0x124>)
 8003380:	4833      	ldr	r0, [pc, #204]	@ (8003450 <FatFS_Init+0x128>)
 8003382:	f006 fc5b 	bl	8009c3c <f_mount>
 8003386:	4603      	mov	r3, r0
 8003388:	75fb      	strb	r3, [r7, #23]

		if (fRes != FR_OK)
 800338a:	7dfb      	ldrb	r3, [r7, #23]
 800338c:	2b00      	cmp	r3, #0
 800338e:	d10c      	bne.n	80033aa <FatFS_Init+0x82>
		{
			break;
		}

		sys.RAM_Mounted = 1;
 8003390:	4b2c      	ldr	r3, [pc, #176]	@ (8003444 <FatFS_Init+0x11c>)
 8003392:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003396:	461a      	mov	r2, r3
 8003398:	f892 302c 	ldrb.w	r3, [r2, #44]	@ 0x2c
 800339c:	f043 0302 	orr.w	r3, r3, #2
 80033a0:	f882 302c 	strb.w	r3, [r2, #44]	@ 0x2c

		break;
 80033a4:	e002      	b.n	80033ac <FatFS_Init+0x84>
			break;
 80033a6:	bf00      	nop
 80033a8:	e000      	b.n	80033ac <FatFS_Init+0x84>
			break;
 80033aa:	bf00      	nop
	} while (1);

	do
	{
		sys.FLASH_Mounted = 0;
 80033ac:	4b25      	ldr	r3, [pc, #148]	@ (8003444 <FatFS_Init+0x11c>)
 80033ae:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80033b2:	461a      	mov	r2, r3
 80033b4:	f892 302c 	ldrb.w	r3, [r2, #44]	@ 0x2c
 80033b8:	f023 0304 	bic.w	r3, r3, #4
 80033bc:	f882 302c 	strb.w	r3, [r2, #44]	@ 0x2c
		fRes = f_mount(&flash_fs, "/flash", 1);
 80033c0:	2201      	movs	r2, #1
 80033c2:	4924      	ldr	r1, [pc, #144]	@ (8003454 <FatFS_Init+0x12c>)
 80033c4:	4824      	ldr	r0, [pc, #144]	@ (8003458 <FatFS_Init+0x130>)
 80033c6:	f006 fc39 	bl	8009c3c <f_mount>
 80033ca:	4603      	mov	r3, r0
 80033cc:	75fb      	strb	r3, [r7, #23]

		if (fRes == FR_NO_FILESYSTEM)
 80033ce:	7dfb      	ldrb	r3, [r7, #23]
 80033d0:	2b0d      	cmp	r3, #13
 80033d2:	d124      	bne.n	800341e <FatFS_Init+0xf6>
		{
			memset((void *)&mkfs_opt, 0, sizeof(mkfs_opt));
 80033d4:	1d3b      	adds	r3, r7, #4
 80033d6:	2210      	movs	r2, #16
 80033d8:	2100      	movs	r1, #0
 80033da:	4618      	mov	r0, r3
 80033dc:	f013 f85a 	bl	8016494 <memset>
			mkfs_opt.fmt = FM_FAT;
 80033e0:	2301      	movs	r3, #1
 80033e2:	713b      	strb	r3, [r7, #4]
			mkfs_opt.au_size = 4096;    
 80033e4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80033e8:	613b      	str	r3, [r7, #16]
			mkfs_opt.n_fat = 1;
 80033ea:	2301      	movs	r3, #1
 80033ec:	717b      	strb	r3, [r7, #5]
			mkfs_opt.align = 1;
 80033ee:	2301      	movs	r3, #1
 80033f0:	60bb      	str	r3, [r7, #8]

			fRes = f_mkfs("/flash", &mkfs_opt, flash_fs.win, sizeof(flash_fs.win));
 80033f2:	1d39      	adds	r1, r7, #4
 80033f4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80033f8:	4a18      	ldr	r2, [pc, #96]	@ (800345c <FatFS_Init+0x134>)
 80033fa:	4816      	ldr	r0, [pc, #88]	@ (8003454 <FatFS_Init+0x12c>)
 80033fc:	f007 faa0 	bl	800a940 <f_mkfs>
 8003400:	4603      	mov	r3, r0
 8003402:	75fb      	strb	r3, [r7, #23]
			if (fRes != FR_OK)
 8003404:	7dfb      	ldrb	r3, [r7, #23]
 8003406:	2b00      	cmp	r3, #0
 8003408:	d114      	bne.n	8003434 <FatFS_Init+0x10c>
			{
				break;
			}

			fRes = f_mount(&flash_fs, "/flash", 1);
 800340a:	2201      	movs	r2, #1
 800340c:	4911      	ldr	r1, [pc, #68]	@ (8003454 <FatFS_Init+0x12c>)
 800340e:	4812      	ldr	r0, [pc, #72]	@ (8003458 <FatFS_Init+0x130>)
 8003410:	f006 fc14 	bl	8009c3c <f_mount>
 8003414:	4603      	mov	r3, r0
 8003416:	75fb      	strb	r3, [r7, #23]
			if (fRes != FR_OK)
 8003418:	7dfb      	ldrb	r3, [r7, #23]
 800341a:	2b00      	cmp	r3, #0
 800341c:	d10c      	bne.n	8003438 <FatFS_Init+0x110>
			{
				break;
			}
		}

		sys.FLASH_Mounted = 1;
 800341e:	4b09      	ldr	r3, [pc, #36]	@ (8003444 <FatFS_Init+0x11c>)
 8003420:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003424:	461a      	mov	r2, r3
 8003426:	f892 302c 	ldrb.w	r3, [r2, #44]	@ 0x2c
 800342a:	f043 0304 	orr.w	r3, r3, #4
 800342e:	f882 302c 	strb.w	r3, [r2, #44]	@ 0x2c

		break;
 8003432:	e002      	b.n	800343a <FatFS_Init+0x112>
				break;
 8003434:	bf00      	nop
 8003436:	e000      	b.n	800343a <FatFS_Init+0x112>
				break;
 8003438:	bf00      	nop
	} while (1);


}
 800343a:	bf00      	nop
 800343c:	3718      	adds	r7, #24
 800343e:	46bd      	mov	sp, r7
 8003440:	bd80      	pop	{r7, pc}
 8003442:	bf00      	nop
 8003444:	200005d8 	.word	0x200005d8
 8003448:	200018ac 	.word	0x200018ac
 800344c:	08017900 	.word	0x08017900
 8003450:	20001878 	.word	0x20001878
 8003454:	08017908 	.word	0x08017908
 8003458:	200028ac 	.word	0x200028ac
 800345c:	200028e0 	.word	0x200028e0

08003460 <Acc_Init>:

/*-----INIZiALIZZAZIONE ACCELEROMETRO-----*/
int Acc_Init(stmdev_ctx_t* acc, uint16_t fs)
{
 8003460:	b580      	push	{r7, lr}
 8003462:	b086      	sub	sp, #24
 8003464:	af00      	add	r7, sp, #0
 8003466:	6078      	str	r0, [r7, #4]
 8003468:	460b      	mov	r3, r1
 800346a:	807b      	strh	r3, [r7, #2]
	lsm6dsv16x_reset_t rst;
	lsm6dsv16x_pin_int_route_t pin_int = {0};
 800346c:	f107 0310 	add.w	r3, r7, #16
 8003470:	2100      	movs	r1, #0
 8003472:	460a      	mov	r2, r1
 8003474:	801a      	strh	r2, [r3, #0]
 8003476:	460a      	mov	r2, r1
 8003478:	709a      	strb	r2, [r3, #2]
	uint8_t acc_whoamI = 0;
 800347a:	2300      	movs	r3, #0
 800347c:	73fb      	strb	r3, [r7, #15]
	uint8_t wmi_cnt = 0;
 800347e:	2300      	movs	r3, #0
 8003480:	75fb      	strb	r3, [r7, #23]

	pin_int.fifo_th = PROPERTY_ENABLE;
 8003482:	7c3b      	ldrb	r3, [r7, #16]
 8003484:	f043 0308 	orr.w	r3, r3, #8
 8003488:	743b      	strb	r3, [r7, #16]


	lsm6dsv16x_device_id_get(acc, &acc_whoamI);
 800348a:	f107 030f 	add.w	r3, r7, #15
 800348e:	4619      	mov	r1, r3
 8003490:	6878      	ldr	r0, [r7, #4]
 8003492:	f000 fb6f 	bl	8003b74 <lsm6dsv16x_device_id_get>
	if (acc_whoamI != LSM6DSV16X_ID)
 8003496:	7bfb      	ldrb	r3, [r7, #15]
 8003498:	2b70      	cmp	r3, #112	@ 0x70
 800349a:	d020      	beq.n	80034de <Acc_Init+0x7e>
		while (acc_whoamI != LSM6DSV16X_ID)
 800349c:	e01c      	b.n	80034d8 <Acc_Init+0x78>
		{
			lsm6dsv16x_device_id_get(acc, &acc_whoamI);
 800349e:	f107 030f 	add.w	r3, r7, #15
 80034a2:	4619      	mov	r1, r3
 80034a4:	6878      	ldr	r0, [r7, #4]
 80034a6:	f000 fb65 	bl	8003b74 <lsm6dsv16x_device_id_get>
			wmi_cnt++;
 80034aa:	7dfb      	ldrb	r3, [r7, #23]
 80034ac:	3301      	adds	r3, #1
 80034ae:	75fb      	strb	r3, [r7, #23]
			if (wmi_cnt == 3)
 80034b0:	7dfb      	ldrb	r3, [r7, #23]
 80034b2:	2b03      	cmp	r3, #3
 80034b4:	d110      	bne.n	80034d8 <Acc_Init+0x78>
			{
				sys.ACC_Present = 0;
 80034b6:	4b51      	ldr	r3, [pc, #324]	@ (80035fc <Acc_Init+0x19c>)
 80034b8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80034bc:	461a      	mov	r2, r3
 80034be:	f892 302c 	ldrb.w	r3, [r2, #44]	@ 0x2c
 80034c2:	f023 0301 	bic.w	r3, r3, #1
 80034c6:	f882 302c 	strb.w	r3, [r2, #44]	@ 0x2c
				flags.ACC_Complete = 1;
 80034ca:	4a4d      	ldr	r2, [pc, #308]	@ (8003600 <Acc_Init+0x1a0>)
 80034cc:	7813      	ldrb	r3, [r2, #0]
 80034ce:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80034d2:	7013      	strb	r3, [r2, #0]
				return 0;
 80034d4:	2300      	movs	r3, #0
 80034d6:	e08c      	b.n	80035f2 <Acc_Init+0x192>
		while (acc_whoamI != LSM6DSV16X_ID)
 80034d8:	7bfb      	ldrb	r3, [r7, #15]
 80034da:	2b70      	cmp	r3, #112	@ 0x70
 80034dc:	d1df      	bne.n	800349e <Acc_Init+0x3e>
			}
		}
	sys.ACC_Present = 1;
 80034de:	4b47      	ldr	r3, [pc, #284]	@ (80035fc <Acc_Init+0x19c>)
 80034e0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80034e4:	461a      	mov	r2, r3
 80034e6:	f892 302c 	ldrb.w	r3, [r2, #44]	@ 0x2c
 80034ea:	f043 0301 	orr.w	r3, r3, #1
 80034ee:	f882 302c 	strb.w	r3, [r2, #44]	@ 0x2c
	lsm6dsv16x_reset_set(acc, LSM6DSV16X_GLOBAL_RST);
 80034f2:	2101      	movs	r1, #1
 80034f4:	6878      	ldr	r0, [r7, #4]
 80034f6:	f000 fa97 	bl	8003a28 <lsm6dsv16x_reset_set>
	do {
		lsm6dsv16x_reset_get(acc, &rst);
 80034fa:	f107 0316 	add.w	r3, r7, #22
 80034fe:	4619      	mov	r1, r3
 8003500:	6878      	ldr	r0, [r7, #4]
 8003502:	f000 fae1 	bl	8003ac8 <lsm6dsv16x_reset_get>
		HAL_Delay(10);
 8003506:	200a      	movs	r0, #10
 8003508:	f007 ff08 	bl	800b31c <HAL_Delay>
	} while (rst != LSM6DSV16X_READY);
 800350c:	7dbb      	ldrb	r3, [r7, #22]
 800350e:	2b00      	cmp	r3, #0
 8003510:	d1f3      	bne.n	80034fa <Acc_Init+0x9a>

	lsm6dsv16x_block_data_update_set(acc, PROPERTY_ENABLE);
 8003512:	2101      	movs	r1, #1
 8003514:	6878      	ldr	r0, [r7, #4]
 8003516:	f000 fc2a 	bl	8003d6e <lsm6dsv16x_block_data_update_set>
	lsm6dsv16x_ui_i2c_i3c_mode_set(acc, LSM6DSV16X_I2C_I3C_DISABLE);
 800351a:	2101      	movs	r1, #1
 800351c:	6878      	ldr	r0, [r7, #4]
 800351e:	f000 fe30 	bl	8004182 <lsm6dsv16x_ui_i2c_i3c_mode_set>
	lsm6dsv16x_xl_mode_set(acc, LSM6DSV16X_XL_HIGH_PERFORMANCE_MD);
 8003522:	2100      	movs	r1, #0
 8003524:	6878      	ldr	r0, [r7, #4]
 8003526:	f000 fb87 	bl	8003c38 <lsm6dsv16x_xl_mode_set>
	lsm6dsv16x_gy_mode_set(acc, LSM6DSV16X_GY_HIGH_PERFORMANCE_MD);
 800352a:	2100      	movs	r1, #0
 800352c:	6878      	ldr	r0, [r7, #4]
 800352e:	f000 fbf8 	bl	8003d22 <lsm6dsv16x_gy_mode_set>
	if(fs == 1600)
 8003532:	887b      	ldrh	r3, [r7, #2]
 8003534:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 8003538:	d104      	bne.n	8003544 <Acc_Init+0xe4>
	{
		lsm6dsv16x_fifo_xl_batch_set(acc, LSM6DSV16X_XL_BATCHED_AT_1920Hz);
 800353a:	210a      	movs	r1, #10
 800353c:	6878      	ldr	r0, [r7, #4]
 800353e:	f000 fdae 	bl	800409e <lsm6dsv16x_fifo_xl_batch_set>
 8003542:	e00b      	b.n	800355c <Acc_Init+0xfc>
	}
	else if(fs == 800)
 8003544:	887b      	ldrh	r3, [r7, #2]
 8003546:	f5b3 7f48 	cmp.w	r3, #800	@ 0x320
 800354a:	d104      	bne.n	8003556 <Acc_Init+0xf6>
	{
		lsm6dsv16x_fifo_xl_batch_set(acc, LSM6DSV16X_XL_BATCHED_AT_960Hz);
 800354c:	2109      	movs	r1, #9
 800354e:	6878      	ldr	r0, [r7, #4]
 8003550:	f000 fda5 	bl	800409e <lsm6dsv16x_fifo_xl_batch_set>
 8003554:	e002      	b.n	800355c <Acc_Init+0xfc>
	}
	else
	{
		return -1;
 8003556:	f04f 33ff 	mov.w	r3, #4294967295
 800355a:	e04a      	b.n	80035f2 <Acc_Init+0x192>
	}
	lsm6dsv16x_fifo_gy_batch_set(acc, LSM6DSV16X_GY_NOT_BATCHED);
 800355c:	2100      	movs	r1, #0
 800355e:	6878      	ldr	r0, [r7, #4]
 8003560:	f000 fdc3 	bl	80040ea <lsm6dsv16x_fifo_gy_batch_set>
	lsm6dsv16x_fifo_mode_set(acc, LSM6DSV16X_BYPASS_MODE);
 8003564:	2100      	movs	r1, #0
 8003566:	6878      	ldr	r0, [r7, #4]
 8003568:	f000 fde5 	bl	8004136 <lsm6dsv16x_fifo_mode_set>
	lsm6dsv16x_xl_data_rate_set(acc, LSM6DSV16X_ODR_OFF);
 800356c:	2100      	movs	r1, #0
 800356e:	6878      	ldr	r0, [r7, #4]
 8003570:	f000 fb11 	bl	8003b96 <lsm6dsv16x_xl_data_rate_set>
	lsm6dsv16x_gy_data_rate_set(acc, LSM6DSV16X_ODR_OFF);
 8003574:	2100      	movs	r1, #0
 8003576:	6878      	ldr	r0, [r7, #4]
 8003578:	f000 fb84 	bl	8003c84 <lsm6dsv16x_gy_data_rate_set>
	if(fs == 1600)
 800357c:	887b      	ldrh	r3, [r7, #2]
 800357e:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 8003582:	d104      	bne.n	800358e <Acc_Init+0x12e>
	{
		lsm6dsv16x_odr_trig_cfg_set(acc, 32);  //800SPS
 8003584:	2120      	movs	r1, #32
 8003586:	6878      	ldr	r0, [r7, #4]
 8003588:	f000 fc17 	bl	8003dba <lsm6dsv16x_odr_trig_cfg_set>
 800358c:	e00b      	b.n	80035a6 <Acc_Init+0x146>
	}
	else if(fs == 800)
 800358e:	887b      	ldrh	r3, [r7, #2]
 8003590:	f5b3 7f48 	cmp.w	r3, #800	@ 0x320
 8003594:	d104      	bne.n	80035a0 <Acc_Init+0x140>
	{
		lsm6dsv16x_odr_trig_cfg_set(acc, 16);  //800SPS
 8003596:	2110      	movs	r1, #16
 8003598:	6878      	ldr	r0, [r7, #4]
 800359a:	f000 fc0e 	bl	8003dba <lsm6dsv16x_odr_trig_cfg_set>
 800359e:	e002      	b.n	80035a6 <Acc_Init+0x146>
	}
	else
	{
		return -1;
 80035a0:	f04f 33ff 	mov.w	r3, #4294967295
 80035a4:	e025      	b.n	80035f2 <Acc_Init+0x192>
	}
	lsm6dsv16x_xl_mode_set(acc, LSM6DSV16X_XL_ODR_TRIGGERED_MD);
 80035a6:	2103      	movs	r1, #3
 80035a8:	6878      	ldr	r0, [r7, #4]
 80035aa:	f000 fb45 	bl	8003c38 <lsm6dsv16x_xl_mode_set>
	lsm6dsv16x_gy_mode_set(acc, LSM6DSV16X_GY_ODR_TRIGGERED_MD);
 80035ae:	2103      	movs	r1, #3
 80035b0:	6878      	ldr	r0, [r7, #4]
 80035b2:	f000 fbb6 	bl	8003d22 <lsm6dsv16x_gy_mode_set>
	lsm6dsv16x_den_polarity_set(acc, LSM6DSV16X_DEN_ACT_HIGH);
 80035b6:	2101      	movs	r1, #1
 80035b8:	6878      	ldr	r0, [r7, #4]
 80035ba:	f000 fd2a 	bl	8004012 <lsm6dsv16x_den_polarity_set>
	lsm6dsv16x_xl_data_rate_set(acc, LSM6DSV16X_ODR_AT_960Hz);
 80035be:	2109      	movs	r1, #9
 80035c0:	6878      	ldr	r0, [r7, #4]
 80035c2:	f000 fae8 	bl	8003b96 <lsm6dsv16x_xl_data_rate_set>
	lsm6dsv16x_xl_full_scale_set(acc, LSM6DSV16X_2g);
 80035c6:	2100      	movs	r1, #0
 80035c8:	6878      	ldr	r0, [r7, #4]
 80035ca:	f000 fc45 	bl	8003e58 <lsm6dsv16x_xl_full_scale_set>
	lsm6dsv16x_gy_full_scale_set(acc, LSM6DSV16X_2000dps);
 80035ce:	2104      	movs	r1, #4
 80035d0:	6878      	ldr	r0, [r7, #4]
 80035d2:	f000 fc1b 	bl	8003e0c <lsm6dsv16x_gy_full_scale_set>
	lsm6dsv16x_fifo_watermark_set(acc, ACC_FIFO_WATERMARK);
 80035d6:	21c8      	movs	r1, #200	@ 0xc8
 80035d8:	6878      	ldr	r0, [r7, #4]
 80035da:	f000 fd40 	bl	800405e <lsm6dsv16x_fifo_watermark_set>
	lsm6dsv16x_pin_int1_route_set(acc, &pin_int);
 80035de:	f107 0310 	add.w	r3, r7, #16
 80035e2:	4619      	mov	r1, r3
 80035e4:	6878      	ldr	r0, [r7, #4]
 80035e6:	f000 fc5d 	bl	8003ea4 <lsm6dsv16x_pin_int1_route_set>

	__HAL_GPIO_EXTI_CLEAR_IT(ACC_INTERRUPT);
 80035ea:	4b06      	ldr	r3, [pc, #24]	@ (8003604 <Acc_Init+0x1a4>)
 80035ec:	2204      	movs	r2, #4
 80035ee:	615a      	str	r2, [r3, #20]
	return 0;
 80035f0:	2300      	movs	r3, #0
}
 80035f2:	4618      	mov	r0, r3
 80035f4:	3718      	adds	r7, #24
 80035f6:	46bd      	mov	sp, r7
 80035f8:	bd80      	pop	{r7, pc}
 80035fa:	bf00      	nop
 80035fc:	200005d8 	.word	0x200005d8
 8003600:	20001780 	.word	0x20001780
 8003604:	40010400 	.word	0x40010400

08003608 <Config_Init>:

/*-----INIZiALIZZAZIONE CONFIGURAZIONE-----*/
void Config_Init(void)
{
 8003608:	b5b0      	push	{r4, r5, r7, lr}
 800360a:	f5ad 5d81 	sub.w	sp, sp, #4128	@ 0x1020
 800360e:	b086      	sub	sp, #24
 8003610:	af00      	add	r7, sp, #0
    FIL config_file;
    UINT bytes_read;
    UINT bytes_written;

    if (f_open(&config_file, CONFIG_FILE, FA_READ) == FR_OK) 
 8003612:	f107 0318 	add.w	r3, r7, #24
 8003616:	3b0c      	subs	r3, #12
 8003618:	2201      	movs	r2, #1
 800361a:	495b      	ldr	r1, [pc, #364]	@ (8003788 <Config_Init+0x180>)
 800361c:	4618      	mov	r0, r3
 800361e:	f006 fb57 	bl	8009cd0 <f_open>
 8003622:	4603      	mov	r3, r0
 8003624:	2b00      	cmp	r3, #0
 8003626:	d11f      	bne.n	8003668 <Config_Init+0x60>
	{
        if (f_read(&config_file, &config, sizeof(config), &bytes_read) == FR_OK && bytes_read == sizeof(config))
 8003628:	f107 0318 	add.w	r3, r7, #24
 800362c:	3b10      	subs	r3, #16
 800362e:	f107 0018 	add.w	r0, r7, #24
 8003632:	380c      	subs	r0, #12
 8003634:	22f4      	movs	r2, #244	@ 0xf4
 8003636:	4955      	ldr	r1, [pc, #340]	@ (800378c <Config_Init+0x184>)
 8003638:	f006 fce2 	bl	800a000 <f_read>
 800363c:	4603      	mov	r3, r0
 800363e:	2b00      	cmp	r3, #0
 8003640:	d10c      	bne.n	800365c <Config_Init+0x54>
 8003642:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8003646:	f853 3c30 	ldr.w	r3, [r3, #-48]
 800364a:	2bf4      	cmp	r3, #244	@ 0xf4
 800364c:	d106      	bne.n	800365c <Config_Init+0x54>
		{
			f_close(&config_file);
 800364e:	f107 0318 	add.w	r3, r7, #24
 8003652:	3b0c      	subs	r3, #12
 8003654:	4618      	mov	r0, r3
 8003656:	f007 f82f 	bl	800a6b8 <f_close>
			return;
 800365a:	e08f      	b.n	800377c <Config_Init+0x174>
        }
        f_close(&config_file);
 800365c:	f107 0318 	add.w	r3, r7, #24
 8003660:	3b0c      	subs	r3, #12
 8003662:	4618      	mov	r0, r3
 8003664:	f007 f828 	bl	800a6b8 <f_close>
    }

    config.device_id = 0;
 8003668:	4b48      	ldr	r3, [pc, #288]	@ (800378c <Config_Init+0x184>)
 800366a:	2200      	movs	r2, #0
 800366c:	701a      	strb	r2, [r3, #0]
	config.samp_freq = 800;
 800366e:	4b47      	ldr	r3, [pc, #284]	@ (800378c <Config_Init+0x184>)
 8003670:	f44f 7248 	mov.w	r2, #800	@ 0x320
 8003674:	805a      	strh	r2, [r3, #2]
	config.buffering_secs = 30;
 8003676:	4b45      	ldr	r3, [pc, #276]	@ (800378c <Config_Init+0x184>)
 8003678:	221e      	movs	r2, #30
 800367a:	711a      	strb	r2, [r3, #4]
	config.connection_timeout_ms = 60000;
 800367c:	4b43      	ldr	r3, [pc, #268]	@ (800378c <Config_Init+0x184>)
 800367e:	f64e 2260 	movw	r2, #60000	@ 0xea60
 8003682:	609a      	str	r2, [r3, #8]
	config.log_period_ms = 10000;
 8003684:	4b41      	ldr	r3, [pc, #260]	@ (800378c <Config_Init+0x184>)
 8003686:	f242 7210 	movw	r2, #10000	@ 0x2710
 800368a:	60da      	str	r2, [r3, #12]
	config.hammer_th = 4096;
 800368c:	4b3f      	ldr	r3, [pc, #252]	@ (800378c <Config_Init+0x184>)
 800368e:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8003692:	821a      	strh	r2, [r3, #16]
    for(int i = 0; i < 24; i++) 
 8003694:	2300      	movs	r3, #0
 8003696:	f507 5281 	add.w	r2, r7, #4128	@ 0x1020
 800369a:	f102 0214 	add.w	r2, r2, #20
 800369e:	6013      	str	r3, [r2, #0]
 80036a0:	e021      	b.n	80036e6 <Config_Init+0xde>
	{
        config.low_th[i] = 0;
 80036a2:	4a3a      	ldr	r2, [pc, #232]	@ (800378c <Config_Init+0x184>)
 80036a4:	f507 5381 	add.w	r3, r7, #4128	@ 0x1020
 80036a8:	f103 0314 	add.w	r3, r3, #20
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	3308      	adds	r3, #8
 80036b0:	005b      	lsls	r3, r3, #1
 80036b2:	4413      	add	r3, r2
 80036b4:	2200      	movs	r2, #0
 80036b6:	805a      	strh	r2, [r3, #2]
        config.high_th[i] = 4096;
 80036b8:	4a34      	ldr	r2, [pc, #208]	@ (800378c <Config_Init+0x184>)
 80036ba:	f507 5381 	add.w	r3, r7, #4128	@ 0x1020
 80036be:	f103 0314 	add.w	r3, r3, #20
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	3320      	adds	r3, #32
 80036c6:	005b      	lsls	r3, r3, #1
 80036c8:	4413      	add	r3, r2
 80036ca:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80036ce:	805a      	strh	r2, [r3, #2]
    for(int i = 0; i < 24; i++) 
 80036d0:	f507 5381 	add.w	r3, r7, #4128	@ 0x1020
 80036d4:	f103 0314 	add.w	r3, r3, #20
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	3301      	adds	r3, #1
 80036dc:	f507 5281 	add.w	r2, r7, #4128	@ 0x1020
 80036e0:	f102 0214 	add.w	r2, r2, #20
 80036e4:	6013      	str	r3, [r2, #0]
 80036e6:	f507 5381 	add.w	r3, r7, #4128	@ 0x1020
 80036ea:	f103 0314 	add.w	r3, r3, #20
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	2b17      	cmp	r3, #23
 80036f2:	ddd6      	ble.n	80036a2 <Config_Init+0x9a>
    }
    strcpy(config.tcp_IPaddress, "esdplab.unipa.it");
 80036f4:	4a26      	ldr	r2, [pc, #152]	@ (8003790 <Config_Init+0x188>)
 80036f6:	4b27      	ldr	r3, [pc, #156]	@ (8003794 <Config_Init+0x18c>)
 80036f8:	4615      	mov	r5, r2
 80036fa:	461c      	mov	r4, r3
 80036fc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80036fe:	6028      	str	r0, [r5, #0]
 8003700:	6069      	str	r1, [r5, #4]
 8003702:	60aa      	str	r2, [r5, #8]
 8003704:	60eb      	str	r3, [r5, #12]
 8003706:	7823      	ldrb	r3, [r4, #0]
 8003708:	742b      	strb	r3, [r5, #16]
    strcpy(config.tcp_Port, "8080");
 800370a:	4b23      	ldr	r3, [pc, #140]	@ (8003798 <Config_Init+0x190>)
 800370c:	4a23      	ldr	r2, [pc, #140]	@ (800379c <Config_Init+0x194>)
 800370e:	6810      	ldr	r0, [r2, #0]
 8003710:	6018      	str	r0, [r3, #0]
 8003712:	7912      	ldrb	r2, [r2, #4]
 8003714:	711a      	strb	r2, [r3, #4]

    if (f_open(&config_file, CONFIG_FILE, FA_WRITE | FA_CREATE_ALWAYS) != FR_OK)
 8003716:	f107 0318 	add.w	r3, r7, #24
 800371a:	3b0c      	subs	r3, #12
 800371c:	220a      	movs	r2, #10
 800371e:	491a      	ldr	r1, [pc, #104]	@ (8003788 <Config_Init+0x180>)
 8003720:	4618      	mov	r0, r3
 8003722:	f006 fad5 	bl	8009cd0 <f_open>
 8003726:	4603      	mov	r3, r0
 8003728:	2b00      	cmp	r3, #0
 800372a:	d126      	bne.n	800377a <Config_Init+0x172>
    {
        return;
    }

    if (f_write(&config_file, &config, sizeof(Config_Typedef), &bytes_written) != FR_OK || bytes_written != sizeof(Config_Typedef)) 
 800372c:	f107 0318 	add.w	r3, r7, #24
 8003730:	3b14      	subs	r3, #20
 8003732:	f107 0018 	add.w	r0, r7, #24
 8003736:	380c      	subs	r0, #12
 8003738:	22f4      	movs	r2, #244	@ 0xf4
 800373a:	4914      	ldr	r1, [pc, #80]	@ (800378c <Config_Init+0x184>)
 800373c:	f006 fdb3 	bl	800a2a6 <f_write>
 8003740:	4603      	mov	r3, r0
 8003742:	2b00      	cmp	r3, #0
 8003744:	d105      	bne.n	8003752 <Config_Init+0x14a>
 8003746:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 800374a:	f853 3c34 	ldr.w	r3, [r3, #-52]
 800374e:	2bf4      	cmp	r3, #244	@ 0xf4
 8003750:	d006      	beq.n	8003760 <Config_Init+0x158>
	{
        f_close(&config_file);
 8003752:	f107 0318 	add.w	r3, r7, #24
 8003756:	3b0c      	subs	r3, #12
 8003758:	4618      	mov	r0, r3
 800375a:	f006 ffad 	bl	800a6b8 <f_close>
        return;
 800375e:	e00d      	b.n	800377c <Config_Init+0x174>
    }
    
    f_sync(&config_file);
 8003760:	f107 0318 	add.w	r3, r7, #24
 8003764:	3b0c      	subs	r3, #12
 8003766:	4618      	mov	r0, r3
 8003768:	f006 ff26 	bl	800a5b8 <f_sync>
    f_close(&config_file);
 800376c:	f107 0318 	add.w	r3, r7, #24
 8003770:	3b0c      	subs	r3, #12
 8003772:	4618      	mov	r0, r3
 8003774:	f006 ffa0 	bl	800a6b8 <f_close>
 8003778:	e000      	b.n	800377c <Config_Init+0x174>
        return;
 800377a:	bf00      	nop
}
 800377c:	f507 5781 	add.w	r7, r7, #4128	@ 0x1020
 8003780:	3718      	adds	r7, #24
 8003782:	46bd      	mov	sp, r7
 8003784:	bdb0      	pop	{r4, r5, r7, pc}
 8003786:	bf00      	nop
 8003788:	08017910 	.word	0x08017910
 800378c:	20001784 	.word	0x20001784
 8003790:	200017f6 	.word	0x200017f6
 8003794:	08017924 	.word	0x08017924
 8003798:	20001836 	.word	0x20001836
 800379c:	08017938 	.word	0x08017938

080037a0 <LED_Init>:
#include "peripherals.h"


/*-----INIZIALIZZAZIONE LEDs-----*/
void LED_Init(void)
{
 80037a0:	b580      	push	{r7, lr}
 80037a2:	af00      	add	r7, sp, #0
    LED_TIMER->Instance->CCR1 = 0;
 80037a4:	4b0c      	ldr	r3, [pc, #48]	@ (80037d8 <LED_Init+0x38>)
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	2200      	movs	r2, #0
 80037aa:	635a      	str	r2, [r3, #52]	@ 0x34
    LED_TIMER->Instance->CCR2 = 0;
 80037ac:	4b0a      	ldr	r3, [pc, #40]	@ (80037d8 <LED_Init+0x38>)
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	2200      	movs	r2, #0
 80037b2:	639a      	str	r2, [r3, #56]	@ 0x38
    LED_TIMER->Instance->CCR3 = 0;
 80037b4:	4b08      	ldr	r3, [pc, #32]	@ (80037d8 <LED_Init+0x38>)
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	2200      	movs	r2, #0
 80037ba:	63da      	str	r2, [r3, #60]	@ 0x3c
	HAL_TIM_PWM_Start(LED_TIMER, GRN_LED);
 80037bc:	2108      	movs	r1, #8
 80037be:	4806      	ldr	r0, [pc, #24]	@ (80037d8 <LED_Init+0x38>)
 80037c0:	f00f fbf0 	bl	8012fa4 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(LED_TIMER, ORG_LED);
 80037c4:	2100      	movs	r1, #0
 80037c6:	4804      	ldr	r0, [pc, #16]	@ (80037d8 <LED_Init+0x38>)
 80037c8:	f00f fbec 	bl	8012fa4 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(LED_TIMER, RED_LED);
 80037cc:	2104      	movs	r1, #4
 80037ce:	4802      	ldr	r0, [pc, #8]	@ (80037d8 <LED_Init+0x38>)
 80037d0:	f00f fbe8 	bl	8012fa4 <HAL_TIM_PWM_Start>
}
 80037d4:	bf00      	nop
 80037d6:	bd80      	pop	{r7, pc}
 80037d8:	20000304 	.word	0x20000304
 80037dc:	00000000 	.word	0x00000000

080037e0 <LED_Start>:

/*------ACCENSIONE LED------*/
void LED_Start(uint32_t LED, uint8_t freq, uint8_t duty)
{
 80037e0:	b580      	push	{r7, lr}
 80037e2:	b086      	sub	sp, #24
 80037e4:	af00      	add	r7, sp, #0
 80037e6:	6078      	str	r0, [r7, #4]
 80037e8:	460b      	mov	r3, r1
 80037ea:	70fb      	strb	r3, [r7, #3]
 80037ec:	4613      	mov	r3, r2
 80037ee:	70bb      	strb	r3, [r7, #2]
    TIM_HandleTypeDef *htim = LED_TIMER;
 80037f0:	4b5d      	ldr	r3, [pc, #372]	@ (8003968 <LED_Start+0x188>)
 80037f2:	613b      	str	r3, [r7, #16]
	uint16_t pulse = 0;
 80037f4:	2300      	movs	r3, #0
 80037f6:	82fb      	strh	r3, [r7, #22]

    uint16_t prescaler = (uint16_t)(80000000 / 5000 - 1);
 80037f8:	f643 637f 	movw	r3, #15999	@ 0x3e7f
 80037fc:	81fb      	strh	r3, [r7, #14]
    uint16_t period = 0;
 80037fe:	2300      	movs	r3, #0
 8003800:	82bb      	strh	r3, [r7, #20]

    switch(freq)
 8003802:	78fb      	ldrb	r3, [r7, #3]
 8003804:	2b03      	cmp	r3, #3
 8003806:	f200 80a4 	bhi.w	8003952 <LED_Start+0x172>
 800380a:	a201      	add	r2, pc, #4	@ (adr r2, 8003810 <LED_Start+0x30>)
 800380c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003810:	08003821 	.word	0x08003821
 8003814:	08003839 	.word	0x08003839
 8003818:	08003849 	.word	0x08003849
 800381c:	08003885 	.word	0x08003885
    {
        case FAST:  
            period = (uint16_t)((80000000 / prescaler / 4) - 1);
 8003820:	89fb      	ldrh	r3, [r7, #14]
 8003822:	4a52      	ldr	r2, [pc, #328]	@ (800396c <LED_Start+0x18c>)
 8003824:	fb92 f3f3 	sdiv	r3, r2, r3
 8003828:	2b00      	cmp	r3, #0
 800382a:	da00      	bge.n	800382e <LED_Start+0x4e>
 800382c:	3303      	adds	r3, #3
 800382e:	109b      	asrs	r3, r3, #2
 8003830:	b29b      	uxth	r3, r3
 8003832:	3b01      	subs	r3, #1
 8003834:	82bb      	strh	r3, [r7, #20]
            break;
 8003836:	e043      	b.n	80038c0 <LED_Start+0xe0>
        case MEDIUM:
            period = (uint16_t)((80000000 / prescaler / 1) - 1);
 8003838:	89fb      	ldrh	r3, [r7, #14]
 800383a:	4a4c      	ldr	r2, [pc, #304]	@ (800396c <LED_Start+0x18c>)
 800383c:	fb92 f3f3 	sdiv	r3, r2, r3
 8003840:	b29b      	uxth	r3, r3
 8003842:	3b01      	subs	r3, #1
 8003844:	82bb      	strh	r3, [r7, #20]
            break;
 8003846:	e03b      	b.n	80038c0 <LED_Start+0xe0>
        case SLOW:
            period = (uint16_t)((80000000 / prescaler / 0.5) - 1);
 8003848:	89fb      	ldrh	r3, [r7, #14]
 800384a:	4a48      	ldr	r2, [pc, #288]	@ (800396c <LED_Start+0x18c>)
 800384c:	fb92 f3f3 	sdiv	r3, r2, r3
 8003850:	4618      	mov	r0, r3
 8003852:	f7fc fe77 	bl	8000544 <__aeabi_i2d>
 8003856:	f04f 0200 	mov.w	r2, #0
 800385a:	4b45      	ldr	r3, [pc, #276]	@ (8003970 <LED_Start+0x190>)
 800385c:	f7fd f806 	bl	800086c <__aeabi_ddiv>
 8003860:	4602      	mov	r2, r0
 8003862:	460b      	mov	r3, r1
 8003864:	4610      	mov	r0, r2
 8003866:	4619      	mov	r1, r3
 8003868:	f04f 0200 	mov.w	r2, #0
 800386c:	4b41      	ldr	r3, [pc, #260]	@ (8003974 <LED_Start+0x194>)
 800386e:	f7fc fd1b 	bl	80002a8 <__aeabi_dsub>
 8003872:	4602      	mov	r2, r0
 8003874:	460b      	mov	r3, r1
 8003876:	4610      	mov	r0, r2
 8003878:	4619      	mov	r1, r3
 800387a:	f7fd f8df 	bl	8000a3c <__aeabi_d2uiz>
 800387e:	4603      	mov	r3, r0
 8003880:	82bb      	strh	r3, [r7, #20]
            break;
 8003882:	e01d      	b.n	80038c0 <LED_Start+0xe0>
        case VERY_SLOW:
            period = (uint16_t)((80000000 / prescaler / 0.1) - 1);
 8003884:	89fb      	ldrh	r3, [r7, #14]
 8003886:	4a39      	ldr	r2, [pc, #228]	@ (800396c <LED_Start+0x18c>)
 8003888:	fb92 f3f3 	sdiv	r3, r2, r3
 800388c:	4618      	mov	r0, r3
 800388e:	f7fc fe59 	bl	8000544 <__aeabi_i2d>
 8003892:	a333      	add	r3, pc, #204	@ (adr r3, 8003960 <LED_Start+0x180>)
 8003894:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003898:	f7fc ffe8 	bl	800086c <__aeabi_ddiv>
 800389c:	4602      	mov	r2, r0
 800389e:	460b      	mov	r3, r1
 80038a0:	4610      	mov	r0, r2
 80038a2:	4619      	mov	r1, r3
 80038a4:	f04f 0200 	mov.w	r2, #0
 80038a8:	4b32      	ldr	r3, [pc, #200]	@ (8003974 <LED_Start+0x194>)
 80038aa:	f7fc fcfd 	bl	80002a8 <__aeabi_dsub>
 80038ae:	4602      	mov	r2, r0
 80038b0:	460b      	mov	r3, r1
 80038b2:	4610      	mov	r0, r2
 80038b4:	4619      	mov	r1, r3
 80038b6:	f7fd f8c1 	bl	8000a3c <__aeabi_d2uiz>
 80038ba:	4603      	mov	r3, r0
 80038bc:	82bb      	strh	r3, [r7, #20]
            break;
 80038be:	bf00      	nop
        default:
            return;
    }

	switch(duty)
 80038c0:	78bb      	ldrb	r3, [r7, #2]
 80038c2:	3b04      	subs	r3, #4
 80038c4:	2b03      	cmp	r3, #3
 80038c6:	d846      	bhi.n	8003956 <LED_Start+0x176>
 80038c8:	a201      	add	r2, pc, #4	@ (adr r2, 80038d0 <LED_Start+0xf0>)
 80038ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80038ce:	bf00      	nop
 80038d0:	080038e1 	.word	0x080038e1
 80038d4:	080038e7 	.word	0x080038e7
 80038d8:	080038fb 	.word	0x080038fb
 80038dc:	08003903 	.word	0x08003903
	{
		case FULL:
			pulse = period; 
 80038e0:	8abb      	ldrh	r3, [r7, #20]
 80038e2:	82fb      	strh	r3, [r7, #22]
		    break;
 80038e4:	e011      	b.n	800390a <LED_Start+0x12a>
        case HIGH:
			pulse = period * 3 / 4;
 80038e6:	8aba      	ldrh	r2, [r7, #20]
 80038e8:	4613      	mov	r3, r2
 80038ea:	005b      	lsls	r3, r3, #1
 80038ec:	4413      	add	r3, r2
 80038ee:	2b00      	cmp	r3, #0
 80038f0:	da00      	bge.n	80038f4 <LED_Start+0x114>
 80038f2:	3303      	adds	r3, #3
 80038f4:	109b      	asrs	r3, r3, #2
 80038f6:	82fb      	strh	r3, [r7, #22]
			break;
 80038f8:	e007      	b.n	800390a <LED_Start+0x12a>
		case HALF:
			pulse = period / 2;
 80038fa:	8abb      	ldrh	r3, [r7, #20]
 80038fc:	085b      	lsrs	r3, r3, #1
 80038fe:	82fb      	strh	r3, [r7, #22]
			break;
 8003900:	e003      	b.n	800390a <LED_Start+0x12a>
		case LOW:
			pulse = period / 4;
 8003902:	8abb      	ldrh	r3, [r7, #20]
 8003904:	089b      	lsrs	r3, r3, #2
 8003906:	82fb      	strh	r3, [r7, #22]
			break;
 8003908:	bf00      	nop
        default:
            return;
	}

    // Imposta periodo e prescaler
    htim->Instance->PSC = prescaler;
 800390a:	693b      	ldr	r3, [r7, #16]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	89fa      	ldrh	r2, [r7, #14]
 8003910:	629a      	str	r2, [r3, #40]	@ 0x28
    htim->Instance->ARR = period;
 8003912:	693b      	ldr	r3, [r7, #16]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	8aba      	ldrh	r2, [r7, #20]
 8003918:	62da      	str	r2, [r3, #44]	@ 0x2c
	switch(LED)
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	2b08      	cmp	r3, #8
 800391e:	d009      	beq.n	8003934 <LED_Start+0x154>
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	2b08      	cmp	r3, #8
 8003924:	d818      	bhi.n	8003958 <LED_Start+0x178>
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	2b00      	cmp	r3, #0
 800392a:	d008      	beq.n	800393e <LED_Start+0x15e>
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	2b04      	cmp	r3, #4
 8003930:	d00a      	beq.n	8003948 <LED_Start+0x168>
 8003932:	e011      	b.n	8003958 <LED_Start+0x178>
    {
    case GRN_LED:
        LED_TIMER->Instance->CCR3 = pulse;
 8003934:	4b0c      	ldr	r3, [pc, #48]	@ (8003968 <LED_Start+0x188>)
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	8afa      	ldrh	r2, [r7, #22]
 800393a:	63da      	str	r2, [r3, #60]	@ 0x3c
        break;
 800393c:	e00c      	b.n	8003958 <LED_Start+0x178>
    case ORG_LED:
        LED_TIMER->Instance->CCR1 = pulse;
 800393e:	4b0a      	ldr	r3, [pc, #40]	@ (8003968 <LED_Start+0x188>)
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	8afa      	ldrh	r2, [r7, #22]
 8003944:	635a      	str	r2, [r3, #52]	@ 0x34
        break;
 8003946:	e007      	b.n	8003958 <LED_Start+0x178>
    case RED_LED:
        LED_TIMER->Instance->CCR2 = pulse;
 8003948:	4b07      	ldr	r3, [pc, #28]	@ (8003968 <LED_Start+0x188>)
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	8afa      	ldrh	r2, [r7, #22]
 800394e:	639a      	str	r2, [r3, #56]	@ 0x38
        break;
 8003950:	e002      	b.n	8003958 <LED_Start+0x178>
            return;
 8003952:	bf00      	nop
 8003954:	e000      	b.n	8003958 <LED_Start+0x178>
            return;
 8003956:	bf00      	nop
    }
}
 8003958:	3718      	adds	r7, #24
 800395a:	46bd      	mov	sp, r7
 800395c:	bd80      	pop	{r7, pc}
 800395e:	bf00      	nop
 8003960:	9999999a 	.word	0x9999999a
 8003964:	3fb99999 	.word	0x3fb99999
 8003968:	20000304 	.word	0x20000304
 800396c:	04c4b400 	.word	0x04c4b400
 8003970:	3fe00000 	.word	0x3fe00000
 8003974:	3ff00000 	.word	0x3ff00000

08003978 <LED_Stop>:

/*------SPEGNIMENTO LED------*/
void LED_Stop(uint32_t LED)
{
 8003978:	b480      	push	{r7}
 800397a:	b083      	sub	sp, #12
 800397c:	af00      	add	r7, sp, #0
 800397e:	6078      	str	r0, [r7, #4]
	switch(LED)
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	2b08      	cmp	r3, #8
 8003984:	d009      	beq.n	800399a <LED_Stop+0x22>
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	2b08      	cmp	r3, #8
 800398a:	d815      	bhi.n	80039b8 <LED_Stop+0x40>
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	2b00      	cmp	r3, #0
 8003990:	d008      	beq.n	80039a4 <LED_Stop+0x2c>
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	2b04      	cmp	r3, #4
 8003996:	d00a      	beq.n	80039ae <LED_Stop+0x36>
        break;
    case RED_LED:
        LED_TIMER->Instance->CCR2 = 0;
        break;
    }
}
 8003998:	e00e      	b.n	80039b8 <LED_Stop+0x40>
        LED_TIMER->Instance->CCR3 = 0;
 800399a:	4b0a      	ldr	r3, [pc, #40]	@ (80039c4 <LED_Stop+0x4c>)
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	2200      	movs	r2, #0
 80039a0:	63da      	str	r2, [r3, #60]	@ 0x3c
        break;
 80039a2:	e009      	b.n	80039b8 <LED_Stop+0x40>
        LED_TIMER->Instance->CCR1 = 0;
 80039a4:	4b07      	ldr	r3, [pc, #28]	@ (80039c4 <LED_Stop+0x4c>)
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	2200      	movs	r2, #0
 80039aa:	635a      	str	r2, [r3, #52]	@ 0x34
        break;
 80039ac:	e004      	b.n	80039b8 <LED_Stop+0x40>
        LED_TIMER->Instance->CCR2 = 0;
 80039ae:	4b05      	ldr	r3, [pc, #20]	@ (80039c4 <LED_Stop+0x4c>)
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	2200      	movs	r2, #0
 80039b4:	639a      	str	r2, [r3, #56]	@ 0x38
        break;
 80039b6:	bf00      	nop
}
 80039b8:	bf00      	nop
 80039ba:	370c      	adds	r7, #12
 80039bc:	46bd      	mov	sp, r7
 80039be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039c2:	4770      	bx	lr
 80039c4:	20000304 	.word	0x20000304

080039c8 <lsm6dsv16x_read_reg>:
  *
  */
int32_t __weak lsm6dsv16x_read_reg(stmdev_ctx_t *ctx, uint8_t reg,
                                   uint8_t *data,
                                   uint16_t len)
{
 80039c8:	b590      	push	{r4, r7, lr}
 80039ca:	b087      	sub	sp, #28
 80039cc:	af00      	add	r7, sp, #0
 80039ce:	60f8      	str	r0, [r7, #12]
 80039d0:	607a      	str	r2, [r7, #4]
 80039d2:	461a      	mov	r2, r3
 80039d4:	460b      	mov	r3, r1
 80039d6:	72fb      	strb	r3, [r7, #11]
 80039d8:	4613      	mov	r3, r2
 80039da:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->read_reg(ctx->handle, reg, data, len);
 80039dc:	68fb      	ldr	r3, [r7, #12]
 80039de:	685c      	ldr	r4, [r3, #4]
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	68d8      	ldr	r0, [r3, #12]
 80039e4:	893b      	ldrh	r3, [r7, #8]
 80039e6:	7af9      	ldrb	r1, [r7, #11]
 80039e8:	687a      	ldr	r2, [r7, #4]
 80039ea:	47a0      	blx	r4
 80039ec:	6178      	str	r0, [r7, #20]

  return ret;
 80039ee:	697b      	ldr	r3, [r7, #20]
}
 80039f0:	4618      	mov	r0, r3
 80039f2:	371c      	adds	r7, #28
 80039f4:	46bd      	mov	sp, r7
 80039f6:	bd90      	pop	{r4, r7, pc}

080039f8 <lsm6dsv16x_write_reg>:
  *
  */
int32_t __weak lsm6dsv16x_write_reg(stmdev_ctx_t *ctx, uint8_t reg,
                                    uint8_t *data,
                                    uint16_t len)
{
 80039f8:	b590      	push	{r4, r7, lr}
 80039fa:	b087      	sub	sp, #28
 80039fc:	af00      	add	r7, sp, #0
 80039fe:	60f8      	str	r0, [r7, #12]
 8003a00:	607a      	str	r2, [r7, #4]
 8003a02:	461a      	mov	r2, r3
 8003a04:	460b      	mov	r3, r1
 8003a06:	72fb      	strb	r3, [r7, #11]
 8003a08:	4613      	mov	r3, r2
 8003a0a:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8003a0c:	68fb      	ldr	r3, [r7, #12]
 8003a0e:	681c      	ldr	r4, [r3, #0]
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	68d8      	ldr	r0, [r3, #12]
 8003a14:	893b      	ldrh	r3, [r7, #8]
 8003a16:	7af9      	ldrb	r1, [r7, #11]
 8003a18:	687a      	ldr	r2, [r7, #4]
 8003a1a:	47a0      	blx	r4
 8003a1c:	6178      	str	r0, [r7, #20]

  return ret;
 8003a1e:	697b      	ldr	r3, [r7, #20]
}
 8003a20:	4618      	mov	r0, r3
 8003a22:	371c      	adds	r7, #28
 8003a24:	46bd      	mov	sp, r7
 8003a26:	bd90      	pop	{r4, r7, pc}

08003a28 <lsm6dsv16x_reset_set>:
  * @param  val      Reset of the device.
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dsv16x_reset_set(stmdev_ctx_t *ctx, lsm6dsv16x_reset_t val)
{
 8003a28:	b580      	push	{r7, lr}
 8003a2a:	b086      	sub	sp, #24
 8003a2c:	af00      	add	r7, sp, #0
 8003a2e:	6078      	str	r0, [r7, #4]
 8003a30:	460b      	mov	r3, r1
 8003a32:	70fb      	strb	r3, [r7, #3]
  lsm6dsv16x_func_cfg_access_t func_cfg_access;
  lsm6dsv16x_ctrl3_t ctrl3;
  int32_t ret;

  ret = lsm6dsv16x_read_reg(ctx, LSM6DSV16X_CTRL3, (uint8_t *)&ctrl3, 1);
 8003a34:	f107 020c 	add.w	r2, r7, #12
 8003a38:	2301      	movs	r3, #1
 8003a3a:	2112      	movs	r1, #18
 8003a3c:	6878      	ldr	r0, [r7, #4]
 8003a3e:	f7ff ffc3 	bl	80039c8 <lsm6dsv16x_read_reg>
 8003a42:	6178      	str	r0, [r7, #20]
  ret += lsm6dsv16x_read_reg(ctx, LSM6DSV16X_FUNC_CFG_ACCESS, (uint8_t *)&func_cfg_access, 1);
 8003a44:	f107 0210 	add.w	r2, r7, #16
 8003a48:	2301      	movs	r3, #1
 8003a4a:	2101      	movs	r1, #1
 8003a4c:	6878      	ldr	r0, [r7, #4]
 8003a4e:	f7ff ffbb 	bl	80039c8 <lsm6dsv16x_read_reg>
 8003a52:	4602      	mov	r2, r0
 8003a54:	697b      	ldr	r3, [r7, #20]
 8003a56:	4413      	add	r3, r2
 8003a58:	617b      	str	r3, [r7, #20]
  if (ret != 0) { return ret; }
 8003a5a:	697b      	ldr	r3, [r7, #20]
 8003a5c:	2b00      	cmp	r3, #0
 8003a5e:	d001      	beq.n	8003a64 <lsm6dsv16x_reset_set+0x3c>
 8003a60:	697b      	ldr	r3, [r7, #20]
 8003a62:	e02d      	b.n	8003ac0 <lsm6dsv16x_reset_set+0x98>

  ctrl3.boot = ((uint8_t)val & 0x04U) >> 2;
 8003a64:	78fb      	ldrb	r3, [r7, #3]
 8003a66:	089b      	lsrs	r3, r3, #2
 8003a68:	f003 0301 	and.w	r3, r3, #1
 8003a6c:	b2da      	uxtb	r2, r3
 8003a6e:	7b3b      	ldrb	r3, [r7, #12]
 8003a70:	f362 13c7 	bfi	r3, r2, #7, #1
 8003a74:	733b      	strb	r3, [r7, #12]
  ctrl3.sw_reset = ((uint8_t)val & 0x02U) >> 1;
 8003a76:	78fb      	ldrb	r3, [r7, #3]
 8003a78:	085b      	lsrs	r3, r3, #1
 8003a7a:	f003 0301 	and.w	r3, r3, #1
 8003a7e:	b2da      	uxtb	r2, r3
 8003a80:	7b3b      	ldrb	r3, [r7, #12]
 8003a82:	f362 0300 	bfi	r3, r2, #0, #1
 8003a86:	733b      	strb	r3, [r7, #12]
  func_cfg_access.sw_por = (uint8_t)val & 0x01U;
 8003a88:	78fb      	ldrb	r3, [r7, #3]
 8003a8a:	f003 0301 	and.w	r3, r3, #1
 8003a8e:	b2da      	uxtb	r2, r3
 8003a90:	7c3b      	ldrb	r3, [r7, #16]
 8003a92:	f362 0382 	bfi	r3, r2, #2, #1
 8003a96:	743b      	strb	r3, [r7, #16]

  ret = lsm6dsv16x_write_reg(ctx, LSM6DSV16X_CTRL3, (uint8_t *)&ctrl3, 1);
 8003a98:	f107 020c 	add.w	r2, r7, #12
 8003a9c:	2301      	movs	r3, #1
 8003a9e:	2112      	movs	r1, #18
 8003aa0:	6878      	ldr	r0, [r7, #4]
 8003aa2:	f7ff ffa9 	bl	80039f8 <lsm6dsv16x_write_reg>
 8003aa6:	6178      	str	r0, [r7, #20]
  ret += lsm6dsv16x_write_reg(ctx, LSM6DSV16X_FUNC_CFG_ACCESS, (uint8_t *)&func_cfg_access, 1);
 8003aa8:	f107 0210 	add.w	r2, r7, #16
 8003aac:	2301      	movs	r3, #1
 8003aae:	2101      	movs	r1, #1
 8003ab0:	6878      	ldr	r0, [r7, #4]
 8003ab2:	f7ff ffa1 	bl	80039f8 <lsm6dsv16x_write_reg>
 8003ab6:	4602      	mov	r2, r0
 8003ab8:	697b      	ldr	r3, [r7, #20]
 8003aba:	4413      	add	r3, r2
 8003abc:	617b      	str	r3, [r7, #20]

  return ret;
 8003abe:	697b      	ldr	r3, [r7, #20]
}
 8003ac0:	4618      	mov	r0, r3
 8003ac2:	3718      	adds	r7, #24
 8003ac4:	46bd      	mov	sp, r7
 8003ac6:	bd80      	pop	{r7, pc}

08003ac8 <lsm6dsv16x_reset_get>:
  * @param  val      Global reset of the device.
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dsv16x_reset_get(stmdev_ctx_t *ctx, lsm6dsv16x_reset_t *val)
{
 8003ac8:	b580      	push	{r7, lr}
 8003aca:	b086      	sub	sp, #24
 8003acc:	af00      	add	r7, sp, #0
 8003ace:	6078      	str	r0, [r7, #4]
 8003ad0:	6039      	str	r1, [r7, #0]
  lsm6dsv16x_func_cfg_access_t func_cfg_access;
  lsm6dsv16x_ctrl3_t ctrl3;
  int32_t ret;

  ret = lsm6dsv16x_read_reg(ctx, LSM6DSV16X_CTRL3, (uint8_t *)&ctrl3, 1);
 8003ad2:	f107 020c 	add.w	r2, r7, #12
 8003ad6:	2301      	movs	r3, #1
 8003ad8:	2112      	movs	r1, #18
 8003ada:	6878      	ldr	r0, [r7, #4]
 8003adc:	f7ff ff74 	bl	80039c8 <lsm6dsv16x_read_reg>
 8003ae0:	6178      	str	r0, [r7, #20]
  ret += lsm6dsv16x_read_reg(ctx, LSM6DSV16X_FUNC_CFG_ACCESS, (uint8_t *)&func_cfg_access, 1);
 8003ae2:	f107 0210 	add.w	r2, r7, #16
 8003ae6:	2301      	movs	r3, #1
 8003ae8:	2101      	movs	r1, #1
 8003aea:	6878      	ldr	r0, [r7, #4]
 8003aec:	f7ff ff6c 	bl	80039c8 <lsm6dsv16x_read_reg>
 8003af0:	4602      	mov	r2, r0
 8003af2:	697b      	ldr	r3, [r7, #20]
 8003af4:	4413      	add	r3, r2
 8003af6:	617b      	str	r3, [r7, #20]
  if (ret != 0) { return ret; }
 8003af8:	697b      	ldr	r3, [r7, #20]
 8003afa:	2b00      	cmp	r3, #0
 8003afc:	d001      	beq.n	8003b02 <lsm6dsv16x_reset_get+0x3a>
 8003afe:	697b      	ldr	r3, [r7, #20]
 8003b00:	e033      	b.n	8003b6a <lsm6dsv16x_reset_get+0xa2>

  switch ((ctrl3.sw_reset << 2) + (ctrl3.boot << 1) + func_cfg_access.sw_por)
 8003b02:	7b3b      	ldrb	r3, [r7, #12]
 8003b04:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8003b08:	b2db      	uxtb	r3, r3
 8003b0a:	009a      	lsls	r2, r3, #2
 8003b0c:	7b3b      	ldrb	r3, [r7, #12]
 8003b0e:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8003b12:	b2db      	uxtb	r3, r3
 8003b14:	005b      	lsls	r3, r3, #1
 8003b16:	4413      	add	r3, r2
 8003b18:	7c3a      	ldrb	r2, [r7, #16]
 8003b1a:	f3c2 0280 	ubfx	r2, r2, #2, #1
 8003b1e:	b2d2      	uxtb	r2, r2
 8003b20:	4413      	add	r3, r2
 8003b22:	2b04      	cmp	r3, #4
 8003b24:	d81c      	bhi.n	8003b60 <lsm6dsv16x_reset_get+0x98>
 8003b26:	a201      	add	r2, pc, #4	@ (adr r2, 8003b2c <lsm6dsv16x_reset_get+0x64>)
 8003b28:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b2c:	08003b41 	.word	0x08003b41
 8003b30:	08003b49 	.word	0x08003b49
 8003b34:	08003b51 	.word	0x08003b51
 8003b38:	08003b61 	.word	0x08003b61
 8003b3c:	08003b59 	.word	0x08003b59
  {
    case LSM6DSV16X_READY:
      *val = LSM6DSV16X_READY;
 8003b40:	683b      	ldr	r3, [r7, #0]
 8003b42:	2200      	movs	r2, #0
 8003b44:	701a      	strb	r2, [r3, #0]
      break;
 8003b46:	e00f      	b.n	8003b68 <lsm6dsv16x_reset_get+0xa0>

    case LSM6DSV16X_GLOBAL_RST:
      *val = LSM6DSV16X_GLOBAL_RST;
 8003b48:	683b      	ldr	r3, [r7, #0]
 8003b4a:	2201      	movs	r2, #1
 8003b4c:	701a      	strb	r2, [r3, #0]
      break;
 8003b4e:	e00b      	b.n	8003b68 <lsm6dsv16x_reset_get+0xa0>

    case LSM6DSV16X_RESTORE_CAL_PARAM:
      *val = LSM6DSV16X_RESTORE_CAL_PARAM;
 8003b50:	683b      	ldr	r3, [r7, #0]
 8003b52:	2202      	movs	r2, #2
 8003b54:	701a      	strb	r2, [r3, #0]
      break;
 8003b56:	e007      	b.n	8003b68 <lsm6dsv16x_reset_get+0xa0>

    case LSM6DSV16X_RESTORE_CTRL_REGS:
      *val = LSM6DSV16X_RESTORE_CTRL_REGS;
 8003b58:	683b      	ldr	r3, [r7, #0]
 8003b5a:	2204      	movs	r2, #4
 8003b5c:	701a      	strb	r2, [r3, #0]
      break;
 8003b5e:	e003      	b.n	8003b68 <lsm6dsv16x_reset_get+0xa0>

    default:
      *val = LSM6DSV16X_GLOBAL_RST;
 8003b60:	683b      	ldr	r3, [r7, #0]
 8003b62:	2201      	movs	r2, #1
 8003b64:	701a      	strb	r2, [r3, #0]
      break;
 8003b66:	bf00      	nop
  }

  return ret;
 8003b68:	697b      	ldr	r3, [r7, #20]
}
 8003b6a:	4618      	mov	r0, r3
 8003b6c:	3718      	adds	r7, #24
 8003b6e:	46bd      	mov	sp, r7
 8003b70:	bd80      	pop	{r7, pc}
 8003b72:	bf00      	nop

08003b74 <lsm6dsv16x_device_id_get>:
  * @param  val      Device ID.
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dsv16x_device_id_get(stmdev_ctx_t *ctx, uint8_t *val)
{
 8003b74:	b580      	push	{r7, lr}
 8003b76:	b084      	sub	sp, #16
 8003b78:	af00      	add	r7, sp, #0
 8003b7a:	6078      	str	r0, [r7, #4]
 8003b7c:	6039      	str	r1, [r7, #0]
  int32_t ret;

  ret = lsm6dsv16x_read_reg(ctx, LSM6DSV16X_WHO_AM_I, val, 1);
 8003b7e:	2301      	movs	r3, #1
 8003b80:	683a      	ldr	r2, [r7, #0]
 8003b82:	210f      	movs	r1, #15
 8003b84:	6878      	ldr	r0, [r7, #4]
 8003b86:	f7ff ff1f 	bl	80039c8 <lsm6dsv16x_read_reg>
 8003b8a:	60f8      	str	r0, [r7, #12]

  return ret;
 8003b8c:	68fb      	ldr	r3, [r7, #12]
}
 8003b8e:	4618      	mov	r0, r3
 8003b90:	3710      	adds	r7, #16
 8003b92:	46bd      	mov	sp, r7
 8003b94:	bd80      	pop	{r7, pc}

08003b96 <lsm6dsv16x_xl_data_rate_set>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dsv16x_xl_data_rate_set(stmdev_ctx_t *ctx,
                                    lsm6dsv16x_data_rate_t val)
{
 8003b96:	b580      	push	{r7, lr}
 8003b98:	b086      	sub	sp, #24
 8003b9a:	af00      	add	r7, sp, #0
 8003b9c:	6078      	str	r0, [r7, #4]
 8003b9e:	460b      	mov	r3, r1
 8003ba0:	70fb      	strb	r3, [r7, #3]
  lsm6dsv16x_ctrl1_t ctrl1;
  lsm6dsv16x_haodr_cfg_t haodr;
  uint8_t sel;
  int32_t ret;

  ret = lsm6dsv16x_read_reg(ctx, LSM6DSV16X_CTRL1, (uint8_t *)&ctrl1, 1);
 8003ba2:	f107 0210 	add.w	r2, r7, #16
 8003ba6:	2301      	movs	r3, #1
 8003ba8:	2110      	movs	r1, #16
 8003baa:	6878      	ldr	r0, [r7, #4]
 8003bac:	f7ff ff0c 	bl	80039c8 <lsm6dsv16x_read_reg>
 8003bb0:	6178      	str	r0, [r7, #20]
  if (ret != 0) { return ret; }
 8003bb2:	697b      	ldr	r3, [r7, #20]
 8003bb4:	2b00      	cmp	r3, #0
 8003bb6:	d001      	beq.n	8003bbc <lsm6dsv16x_xl_data_rate_set+0x26>
 8003bb8:	697b      	ldr	r3, [r7, #20]
 8003bba:	e039      	b.n	8003c30 <lsm6dsv16x_xl_data_rate_set+0x9a>

  ctrl1.odr_xl = (uint8_t)val & 0x0Fu;
 8003bbc:	78fb      	ldrb	r3, [r7, #3]
 8003bbe:	f003 030f 	and.w	r3, r3, #15
 8003bc2:	b2da      	uxtb	r2, r3
 8003bc4:	7c3b      	ldrb	r3, [r7, #16]
 8003bc6:	f362 0303 	bfi	r3, r2, #0, #4
 8003bca:	743b      	strb	r3, [r7, #16]
  ret = lsm6dsv16x_write_reg(ctx, LSM6DSV16X_CTRL1, (uint8_t *)&ctrl1, 1);
 8003bcc:	f107 0210 	add.w	r2, r7, #16
 8003bd0:	2301      	movs	r3, #1
 8003bd2:	2110      	movs	r1, #16
 8003bd4:	6878      	ldr	r0, [r7, #4]
 8003bd6:	f7ff ff0f 	bl	80039f8 <lsm6dsv16x_write_reg>
 8003bda:	6178      	str	r0, [r7, #20]
  if (ret != 0) { return ret; }
 8003bdc:	697b      	ldr	r3, [r7, #20]
 8003bde:	2b00      	cmp	r3, #0
 8003be0:	d001      	beq.n	8003be6 <lsm6dsv16x_xl_data_rate_set+0x50>
 8003be2:	697b      	ldr	r3, [r7, #20]
 8003be4:	e024      	b.n	8003c30 <lsm6dsv16x_xl_data_rate_set+0x9a>

  sel = ((uint8_t)val >> 4) & 0xFU;
 8003be6:	78fb      	ldrb	r3, [r7, #3]
 8003be8:	091b      	lsrs	r3, r3, #4
 8003bea:	74fb      	strb	r3, [r7, #19]
  if (sel != 0U)
 8003bec:	7cfb      	ldrb	r3, [r7, #19]
 8003bee:	2b00      	cmp	r3, #0
 8003bf0:	d01d      	beq.n	8003c2e <lsm6dsv16x_xl_data_rate_set+0x98>
  {
    ret += lsm6dsv16x_read_reg(ctx, LSM6DSV16X_HAODR_CFG, (uint8_t *)&haodr, 1);
 8003bf2:	f107 020c 	add.w	r2, r7, #12
 8003bf6:	2301      	movs	r3, #1
 8003bf8:	2162      	movs	r1, #98	@ 0x62
 8003bfa:	6878      	ldr	r0, [r7, #4]
 8003bfc:	f7ff fee4 	bl	80039c8 <lsm6dsv16x_read_reg>
 8003c00:	4602      	mov	r2, r0
 8003c02:	697b      	ldr	r3, [r7, #20]
 8003c04:	4413      	add	r3, r2
 8003c06:	617b      	str	r3, [r7, #20]
    haodr.haodr_sel = sel;
 8003c08:	7cfb      	ldrb	r3, [r7, #19]
 8003c0a:	f003 0303 	and.w	r3, r3, #3
 8003c0e:	b2da      	uxtb	r2, r3
 8003c10:	7b3b      	ldrb	r3, [r7, #12]
 8003c12:	f362 0301 	bfi	r3, r2, #0, #2
 8003c16:	733b      	strb	r3, [r7, #12]
    ret += lsm6dsv16x_write_reg(ctx, LSM6DSV16X_HAODR_CFG, (uint8_t *)&haodr, 1);
 8003c18:	f107 020c 	add.w	r2, r7, #12
 8003c1c:	2301      	movs	r3, #1
 8003c1e:	2162      	movs	r1, #98	@ 0x62
 8003c20:	6878      	ldr	r0, [r7, #4]
 8003c22:	f7ff fee9 	bl	80039f8 <lsm6dsv16x_write_reg>
 8003c26:	4602      	mov	r2, r0
 8003c28:	697b      	ldr	r3, [r7, #20]
 8003c2a:	4413      	add	r3, r2
 8003c2c:	617b      	str	r3, [r7, #20]
  }

  return ret;
 8003c2e:	697b      	ldr	r3, [r7, #20]
}
 8003c30:	4618      	mov	r0, r3
 8003c32:	3718      	adds	r7, #24
 8003c34:	46bd      	mov	sp, r7
 8003c36:	bd80      	pop	{r7, pc}

08003c38 <lsm6dsv16x_xl_mode_set>:
  * @param  val      XL_HIGH_PERFORMANCE_MD, XL_HIGH_ACCURACY_ODR_MD, XL_LOW_POWER_2_AVG_MD, XL_LOW_POWER_4_AVG_MD, XL_LOW_POWER_8_AVG_MD, XL_NORMAL_MD,
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dsv16x_xl_mode_set(stmdev_ctx_t *ctx, lsm6dsv16x_xl_mode_t val)
{
 8003c38:	b580      	push	{r7, lr}
 8003c3a:	b084      	sub	sp, #16
 8003c3c:	af00      	add	r7, sp, #0
 8003c3e:	6078      	str	r0, [r7, #4]
 8003c40:	460b      	mov	r3, r1
 8003c42:	70fb      	strb	r3, [r7, #3]
  lsm6dsv16x_ctrl1_t ctrl1;
  int32_t ret;

  ret = lsm6dsv16x_read_reg(ctx, LSM6DSV16X_CTRL1, (uint8_t *)&ctrl1, 1);
 8003c44:	f107 0208 	add.w	r2, r7, #8
 8003c48:	2301      	movs	r3, #1
 8003c4a:	2110      	movs	r1, #16
 8003c4c:	6878      	ldr	r0, [r7, #4]
 8003c4e:	f7ff febb 	bl	80039c8 <lsm6dsv16x_read_reg>
 8003c52:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	2b00      	cmp	r3, #0
 8003c58:	d10f      	bne.n	8003c7a <lsm6dsv16x_xl_mode_set+0x42>
  {
    ctrl1.op_mode_xl = (uint8_t)val & 0x07U;
 8003c5a:	78fb      	ldrb	r3, [r7, #3]
 8003c5c:	f003 0307 	and.w	r3, r3, #7
 8003c60:	b2da      	uxtb	r2, r3
 8003c62:	7a3b      	ldrb	r3, [r7, #8]
 8003c64:	f362 1306 	bfi	r3, r2, #4, #3
 8003c68:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsv16x_write_reg(ctx, LSM6DSV16X_CTRL1, (uint8_t *)&ctrl1, 1);
 8003c6a:	f107 0208 	add.w	r2, r7, #8
 8003c6e:	2301      	movs	r3, #1
 8003c70:	2110      	movs	r1, #16
 8003c72:	6878      	ldr	r0, [r7, #4]
 8003c74:	f7ff fec0 	bl	80039f8 <lsm6dsv16x_write_reg>
 8003c78:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8003c7a:	68fb      	ldr	r3, [r7, #12]
}
 8003c7c:	4618      	mov	r0, r3
 8003c7e:	3710      	adds	r7, #16
 8003c80:	46bd      	mov	sp, r7
 8003c82:	bd80      	pop	{r7, pc}

08003c84 <lsm6dsv16x_gy_data_rate_set>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dsv16x_gy_data_rate_set(stmdev_ctx_t *ctx,
                                    lsm6dsv16x_data_rate_t val)
{
 8003c84:	b580      	push	{r7, lr}
 8003c86:	b086      	sub	sp, #24
 8003c88:	af00      	add	r7, sp, #0
 8003c8a:	6078      	str	r0, [r7, #4]
 8003c8c:	460b      	mov	r3, r1
 8003c8e:	70fb      	strb	r3, [r7, #3]
  lsm6dsv16x_ctrl2_t ctrl2;
  lsm6dsv16x_haodr_cfg_t haodr;
  uint8_t sel;
  int32_t ret;

  ret = lsm6dsv16x_read_reg(ctx, LSM6DSV16X_CTRL2, (uint8_t *)&ctrl2, 1);
 8003c90:	f107 0210 	add.w	r2, r7, #16
 8003c94:	2301      	movs	r3, #1
 8003c96:	2111      	movs	r1, #17
 8003c98:	6878      	ldr	r0, [r7, #4]
 8003c9a:	f7ff fe95 	bl	80039c8 <lsm6dsv16x_read_reg>
 8003c9e:	6178      	str	r0, [r7, #20]
  ctrl2.odr_g = (uint8_t)val & 0x0Fu;
 8003ca0:	78fb      	ldrb	r3, [r7, #3]
 8003ca2:	f003 030f 	and.w	r3, r3, #15
 8003ca6:	b2da      	uxtb	r2, r3
 8003ca8:	7c3b      	ldrb	r3, [r7, #16]
 8003caa:	f362 0303 	bfi	r3, r2, #0, #4
 8003cae:	743b      	strb	r3, [r7, #16]
  ret += lsm6dsv16x_write_reg(ctx, LSM6DSV16X_CTRL2, (uint8_t *)&ctrl2, 1);
 8003cb0:	f107 0210 	add.w	r2, r7, #16
 8003cb4:	2301      	movs	r3, #1
 8003cb6:	2111      	movs	r1, #17
 8003cb8:	6878      	ldr	r0, [r7, #4]
 8003cba:	f7ff fe9d 	bl	80039f8 <lsm6dsv16x_write_reg>
 8003cbe:	4602      	mov	r2, r0
 8003cc0:	697b      	ldr	r3, [r7, #20]
 8003cc2:	4413      	add	r3, r2
 8003cc4:	617b      	str	r3, [r7, #20]
  if (ret != 0) { return ret; }
 8003cc6:	697b      	ldr	r3, [r7, #20]
 8003cc8:	2b00      	cmp	r3, #0
 8003cca:	d001      	beq.n	8003cd0 <lsm6dsv16x_gy_data_rate_set+0x4c>
 8003ccc:	697b      	ldr	r3, [r7, #20]
 8003cce:	e024      	b.n	8003d1a <lsm6dsv16x_gy_data_rate_set+0x96>

  sel = ((uint8_t)val >> 4) & 0xFU;
 8003cd0:	78fb      	ldrb	r3, [r7, #3]
 8003cd2:	091b      	lsrs	r3, r3, #4
 8003cd4:	74fb      	strb	r3, [r7, #19]
  if (sel != 0U)
 8003cd6:	7cfb      	ldrb	r3, [r7, #19]
 8003cd8:	2b00      	cmp	r3, #0
 8003cda:	d01d      	beq.n	8003d18 <lsm6dsv16x_gy_data_rate_set+0x94>
  {
    ret += lsm6dsv16x_read_reg(ctx, LSM6DSV16X_HAODR_CFG, (uint8_t *)&haodr, 1);
 8003cdc:	f107 020c 	add.w	r2, r7, #12
 8003ce0:	2301      	movs	r3, #1
 8003ce2:	2162      	movs	r1, #98	@ 0x62
 8003ce4:	6878      	ldr	r0, [r7, #4]
 8003ce6:	f7ff fe6f 	bl	80039c8 <lsm6dsv16x_read_reg>
 8003cea:	4602      	mov	r2, r0
 8003cec:	697b      	ldr	r3, [r7, #20]
 8003cee:	4413      	add	r3, r2
 8003cf0:	617b      	str	r3, [r7, #20]
    haodr.haodr_sel = sel;
 8003cf2:	7cfb      	ldrb	r3, [r7, #19]
 8003cf4:	f003 0303 	and.w	r3, r3, #3
 8003cf8:	b2da      	uxtb	r2, r3
 8003cfa:	7b3b      	ldrb	r3, [r7, #12]
 8003cfc:	f362 0301 	bfi	r3, r2, #0, #2
 8003d00:	733b      	strb	r3, [r7, #12]
    ret += lsm6dsv16x_write_reg(ctx, LSM6DSV16X_HAODR_CFG, (uint8_t *)&haodr, 1);
 8003d02:	f107 020c 	add.w	r2, r7, #12
 8003d06:	2301      	movs	r3, #1
 8003d08:	2162      	movs	r1, #98	@ 0x62
 8003d0a:	6878      	ldr	r0, [r7, #4]
 8003d0c:	f7ff fe74 	bl	80039f8 <lsm6dsv16x_write_reg>
 8003d10:	4602      	mov	r2, r0
 8003d12:	697b      	ldr	r3, [r7, #20]
 8003d14:	4413      	add	r3, r2
 8003d16:	617b      	str	r3, [r7, #20]
  }

  return ret;
 8003d18:	697b      	ldr	r3, [r7, #20]
}
 8003d1a:	4618      	mov	r0, r3
 8003d1c:	3718      	adds	r7, #24
 8003d1e:	46bd      	mov	sp, r7
 8003d20:	bd80      	pop	{r7, pc}

08003d22 <lsm6dsv16x_gy_mode_set>:
  * @param  val      GY_HIGH_PERFORMANCE_MD, GY_HIGH_ACCURACY_ODR_MD, GY_SLEEP_MD, GY_LOW_POWER_MD,
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dsv16x_gy_mode_set(stmdev_ctx_t *ctx, lsm6dsv16x_gy_mode_t val)
{
 8003d22:	b580      	push	{r7, lr}
 8003d24:	b084      	sub	sp, #16
 8003d26:	af00      	add	r7, sp, #0
 8003d28:	6078      	str	r0, [r7, #4]
 8003d2a:	460b      	mov	r3, r1
 8003d2c:	70fb      	strb	r3, [r7, #3]
  lsm6dsv16x_ctrl2_t ctrl2;
  int32_t ret;

  ret = lsm6dsv16x_read_reg(ctx, LSM6DSV16X_CTRL2, (uint8_t *)&ctrl2, 1);
 8003d2e:	f107 0208 	add.w	r2, r7, #8
 8003d32:	2301      	movs	r3, #1
 8003d34:	2111      	movs	r1, #17
 8003d36:	6878      	ldr	r0, [r7, #4]
 8003d38:	f7ff fe46 	bl	80039c8 <lsm6dsv16x_read_reg>
 8003d3c:	60f8      	str	r0, [r7, #12]
  if (ret == 0)
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	2b00      	cmp	r3, #0
 8003d42:	d10f      	bne.n	8003d64 <lsm6dsv16x_gy_mode_set+0x42>
  {
    ctrl2.op_mode_g = (uint8_t)val & 0x07U;
 8003d44:	78fb      	ldrb	r3, [r7, #3]
 8003d46:	f003 0307 	and.w	r3, r3, #7
 8003d4a:	b2da      	uxtb	r2, r3
 8003d4c:	7a3b      	ldrb	r3, [r7, #8]
 8003d4e:	f362 1306 	bfi	r3, r2, #4, #3
 8003d52:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsv16x_write_reg(ctx, LSM6DSV16X_CTRL2, (uint8_t *)&ctrl2, 1);
 8003d54:	f107 0208 	add.w	r2, r7, #8
 8003d58:	2301      	movs	r3, #1
 8003d5a:	2111      	movs	r1, #17
 8003d5c:	6878      	ldr	r0, [r7, #4]
 8003d5e:	f7ff fe4b 	bl	80039f8 <lsm6dsv16x_write_reg>
 8003d62:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8003d64:	68fb      	ldr	r3, [r7, #12]
}
 8003d66:	4618      	mov	r0, r3
 8003d68:	3710      	adds	r7, #16
 8003d6a:	46bd      	mov	sp, r7
 8003d6c:	bd80      	pop	{r7, pc}

08003d6e <lsm6dsv16x_block_data_update_set>:
  * @param  val      Block Data Update (BDU): output registers are not updated until LSB and MSB have been read).
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dsv16x_block_data_update_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8003d6e:	b580      	push	{r7, lr}
 8003d70:	b084      	sub	sp, #16
 8003d72:	af00      	add	r7, sp, #0
 8003d74:	6078      	str	r0, [r7, #4]
 8003d76:	460b      	mov	r3, r1
 8003d78:	70fb      	strb	r3, [r7, #3]
  lsm6dsv16x_ctrl3_t ctrl3;
  int32_t ret;

  ret = lsm6dsv16x_read_reg(ctx, LSM6DSV16X_CTRL3, (uint8_t *)&ctrl3, 1);
 8003d7a:	f107 0208 	add.w	r2, r7, #8
 8003d7e:	2301      	movs	r3, #1
 8003d80:	2112      	movs	r1, #18
 8003d82:	6878      	ldr	r0, [r7, #4]
 8003d84:	f7ff fe20 	bl	80039c8 <lsm6dsv16x_read_reg>
 8003d88:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8003d8a:	68fb      	ldr	r3, [r7, #12]
 8003d8c:	2b00      	cmp	r3, #0
 8003d8e:	d10f      	bne.n	8003db0 <lsm6dsv16x_block_data_update_set+0x42>
  {
    ctrl3.bdu = val;
 8003d90:	78fb      	ldrb	r3, [r7, #3]
 8003d92:	f003 0301 	and.w	r3, r3, #1
 8003d96:	b2da      	uxtb	r2, r3
 8003d98:	7a3b      	ldrb	r3, [r7, #8]
 8003d9a:	f362 1386 	bfi	r3, r2, #6, #1
 8003d9e:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsv16x_write_reg(ctx, LSM6DSV16X_CTRL3, (uint8_t *)&ctrl3, 1);
 8003da0:	f107 0208 	add.w	r2, r7, #8
 8003da4:	2301      	movs	r3, #1
 8003da6:	2112      	movs	r1, #18
 8003da8:	6878      	ldr	r0, [r7, #4]
 8003daa:	f7ff fe25 	bl	80039f8 <lsm6dsv16x_write_reg>
 8003dae:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8003db0:	68fb      	ldr	r3, [r7, #12]
}
 8003db2:	4618      	mov	r0, r3
 8003db4:	3710      	adds	r7, #16
 8003db6:	46bd      	mov	sp, r7
 8003db8:	bd80      	pop	{r7, pc}

08003dba <lsm6dsv16x_odr_trig_cfg_set>:
  * @param  val      number of data in the reference period.
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dsv16x_odr_trig_cfg_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8003dba:	b580      	push	{r7, lr}
 8003dbc:	b084      	sub	sp, #16
 8003dbe:	af00      	add	r7, sp, #0
 8003dc0:	6078      	str	r0, [r7, #4]
 8003dc2:	460b      	mov	r3, r1
 8003dc4:	70fb      	strb	r3, [r7, #3]
  lsm6dsv16x_odr_trig_cfg_t odr_trig;
  int32_t ret;

  if (val >= 1U && val <= 3U) {
 8003dc6:	78fb      	ldrb	r3, [r7, #3]
 8003dc8:	2b00      	cmp	r3, #0
 8003dca:	d005      	beq.n	8003dd8 <lsm6dsv16x_odr_trig_cfg_set+0x1e>
 8003dcc:	78fb      	ldrb	r3, [r7, #3]
 8003dce:	2b03      	cmp	r3, #3
 8003dd0:	d802      	bhi.n	8003dd8 <lsm6dsv16x_odr_trig_cfg_set+0x1e>
    return -1;
 8003dd2:	f04f 33ff 	mov.w	r3, #4294967295
 8003dd6:	e015      	b.n	8003e04 <lsm6dsv16x_odr_trig_cfg_set+0x4a>
  }

  ret = lsm6dsv16x_read_reg(ctx, LSM6DSV16X_ODR_TRIG_CFG, (uint8_t *)&odr_trig, 1);
 8003dd8:	f107 0208 	add.w	r2, r7, #8
 8003ddc:	2301      	movs	r3, #1
 8003dde:	2106      	movs	r1, #6
 8003de0:	6878      	ldr	r0, [r7, #4]
 8003de2:	f7ff fdf1 	bl	80039c8 <lsm6dsv16x_read_reg>
 8003de6:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8003de8:	68fb      	ldr	r3, [r7, #12]
 8003dea:	2b00      	cmp	r3, #0
 8003dec:	d109      	bne.n	8003e02 <lsm6dsv16x_odr_trig_cfg_set+0x48>
  {
    odr_trig.odr_trig_nodr = val;
 8003dee:	78fb      	ldrb	r3, [r7, #3]
 8003df0:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsv16x_write_reg(ctx, LSM6DSV16X_ODR_TRIG_CFG, (uint8_t *)&odr_trig, 1);
 8003df2:	f107 0208 	add.w	r2, r7, #8
 8003df6:	2301      	movs	r3, #1
 8003df8:	2106      	movs	r1, #6
 8003dfa:	6878      	ldr	r0, [r7, #4]
 8003dfc:	f7ff fdfc 	bl	80039f8 <lsm6dsv16x_write_reg>
 8003e00:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8003e02:	68fb      	ldr	r3, [r7, #12]
}
 8003e04:	4618      	mov	r0, r3
 8003e06:	3710      	adds	r7, #16
 8003e08:	46bd      	mov	sp, r7
 8003e0a:	bd80      	pop	{r7, pc}

08003e0c <lsm6dsv16x_gy_full_scale_set>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dsv16x_gy_full_scale_set(stmdev_ctx_t *ctx,
                                     lsm6dsv16x_gy_full_scale_t val)
{
 8003e0c:	b580      	push	{r7, lr}
 8003e0e:	b084      	sub	sp, #16
 8003e10:	af00      	add	r7, sp, #0
 8003e12:	6078      	str	r0, [r7, #4]
 8003e14:	460b      	mov	r3, r1
 8003e16:	70fb      	strb	r3, [r7, #3]
  lsm6dsv16x_ctrl6_t ctrl6;
  int32_t ret;

  ret = lsm6dsv16x_read_reg(ctx, LSM6DSV16X_CTRL6, (uint8_t *)&ctrl6, 1);
 8003e18:	f107 0208 	add.w	r2, r7, #8
 8003e1c:	2301      	movs	r3, #1
 8003e1e:	2115      	movs	r1, #21
 8003e20:	6878      	ldr	r0, [r7, #4]
 8003e22:	f7ff fdd1 	bl	80039c8 <lsm6dsv16x_read_reg>
 8003e26:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8003e28:	68fb      	ldr	r3, [r7, #12]
 8003e2a:	2b00      	cmp	r3, #0
 8003e2c:	d10f      	bne.n	8003e4e <lsm6dsv16x_gy_full_scale_set+0x42>
  {
    ctrl6.fs_g = (uint8_t)val & 0xfu;
 8003e2e:	78fb      	ldrb	r3, [r7, #3]
 8003e30:	f003 030f 	and.w	r3, r3, #15
 8003e34:	b2da      	uxtb	r2, r3
 8003e36:	7a3b      	ldrb	r3, [r7, #8]
 8003e38:	f362 0303 	bfi	r3, r2, #0, #4
 8003e3c:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsv16x_write_reg(ctx, LSM6DSV16X_CTRL6, (uint8_t *)&ctrl6, 1);
 8003e3e:	f107 0208 	add.w	r2, r7, #8
 8003e42:	2301      	movs	r3, #1
 8003e44:	2115      	movs	r1, #21
 8003e46:	6878      	ldr	r0, [r7, #4]
 8003e48:	f7ff fdd6 	bl	80039f8 <lsm6dsv16x_write_reg>
 8003e4c:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8003e4e:	68fb      	ldr	r3, [r7, #12]
}
 8003e50:	4618      	mov	r0, r3
 8003e52:	3710      	adds	r7, #16
 8003e54:	46bd      	mov	sp, r7
 8003e56:	bd80      	pop	{r7, pc}

08003e58 <lsm6dsv16x_xl_full_scale_set>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dsv16x_xl_full_scale_set(stmdev_ctx_t *ctx,
                                     lsm6dsv16x_xl_full_scale_t val)
{
 8003e58:	b580      	push	{r7, lr}
 8003e5a:	b084      	sub	sp, #16
 8003e5c:	af00      	add	r7, sp, #0
 8003e5e:	6078      	str	r0, [r7, #4]
 8003e60:	460b      	mov	r3, r1
 8003e62:	70fb      	strb	r3, [r7, #3]
  lsm6dsv16x_ctrl8_t ctrl8;
  int32_t ret;

  ret = lsm6dsv16x_read_reg(ctx, LSM6DSV16X_CTRL8, (uint8_t *)&ctrl8, 1);
 8003e64:	f107 0208 	add.w	r2, r7, #8
 8003e68:	2301      	movs	r3, #1
 8003e6a:	2117      	movs	r1, #23
 8003e6c:	6878      	ldr	r0, [r7, #4]
 8003e6e:	f7ff fdab 	bl	80039c8 <lsm6dsv16x_read_reg>
 8003e72:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8003e74:	68fb      	ldr	r3, [r7, #12]
 8003e76:	2b00      	cmp	r3, #0
 8003e78:	d10f      	bne.n	8003e9a <lsm6dsv16x_xl_full_scale_set+0x42>
  {
    ctrl8.fs_xl = (uint8_t)val & 0x3U;
 8003e7a:	78fb      	ldrb	r3, [r7, #3]
 8003e7c:	f003 0303 	and.w	r3, r3, #3
 8003e80:	b2da      	uxtb	r2, r3
 8003e82:	7a3b      	ldrb	r3, [r7, #8]
 8003e84:	f362 0301 	bfi	r3, r2, #0, #2
 8003e88:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsv16x_write_reg(ctx, LSM6DSV16X_CTRL8, (uint8_t *)&ctrl8, 1);
 8003e8a:	f107 0208 	add.w	r2, r7, #8
 8003e8e:	2301      	movs	r3, #1
 8003e90:	2117      	movs	r1, #23
 8003e92:	6878      	ldr	r0, [r7, #4]
 8003e94:	f7ff fdb0 	bl	80039f8 <lsm6dsv16x_write_reg>
 8003e98:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8003e9a:	68fb      	ldr	r3, [r7, #12]
}
 8003e9c:	4618      	mov	r0, r3
 8003e9e:	3710      	adds	r7, #16
 8003ea0:	46bd      	mov	sp, r7
 8003ea2:	bd80      	pop	{r7, pc}

08003ea4 <lsm6dsv16x_pin_int1_route_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsv16x_pin_int1_route_set(stmdev_ctx_t *ctx,
                                      lsm6dsv16x_pin_int_route_t *val)
{
 8003ea4:	b580      	push	{r7, lr}
 8003ea6:	b086      	sub	sp, #24
 8003ea8:	af00      	add	r7, sp, #0
 8003eaa:	6078      	str	r0, [r7, #4]
 8003eac:	6039      	str	r1, [r7, #0]
  lsm6dsv16x_int1_ctrl_t          int1_ctrl;
  lsm6dsv16x_md1_cfg_t            md1_cfg;
  int32_t ret;

  ret = lsm6dsv16x_read_reg(ctx, LSM6DSV16X_INT1_CTRL, (uint8_t *)&int1_ctrl, 1);
 8003eae:	f107 0210 	add.w	r2, r7, #16
 8003eb2:	2301      	movs	r3, #1
 8003eb4:	210d      	movs	r1, #13
 8003eb6:	6878      	ldr	r0, [r7, #4]
 8003eb8:	f7ff fd86 	bl	80039c8 <lsm6dsv16x_read_reg>
 8003ebc:	6178      	str	r0, [r7, #20]
  if (ret != 0) { return ret; }
 8003ebe:	697b      	ldr	r3, [r7, #20]
 8003ec0:	2b00      	cmp	r3, #0
 8003ec2:	d001      	beq.n	8003ec8 <lsm6dsv16x_pin_int1_route_set+0x24>
 8003ec4:	697b      	ldr	r3, [r7, #20]
 8003ec6:	e0a0      	b.n	800400a <lsm6dsv16x_pin_int1_route_set+0x166>

  int1_ctrl.int1_drdy_xl       = val->drdy_xl;
 8003ec8:	683b      	ldr	r3, [r7, #0]
 8003eca:	781b      	ldrb	r3, [r3, #0]
 8003ecc:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8003ed0:	b2da      	uxtb	r2, r3
 8003ed2:	7c3b      	ldrb	r3, [r7, #16]
 8003ed4:	f362 0300 	bfi	r3, r2, #0, #1
 8003ed8:	743b      	strb	r3, [r7, #16]
  int1_ctrl.int1_drdy_g        = val->drdy_g;
 8003eda:	683b      	ldr	r3, [r7, #0]
 8003edc:	781b      	ldrb	r3, [r3, #0]
 8003ede:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8003ee2:	b2da      	uxtb	r2, r3
 8003ee4:	7c3b      	ldrb	r3, [r7, #16]
 8003ee6:	f362 0341 	bfi	r3, r2, #1, #1
 8003eea:	743b      	strb	r3, [r7, #16]
  int1_ctrl.int1_fifo_th       = val->fifo_th;
 8003eec:	683b      	ldr	r3, [r7, #0]
 8003eee:	781b      	ldrb	r3, [r3, #0]
 8003ef0:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8003ef4:	b2da      	uxtb	r2, r3
 8003ef6:	7c3b      	ldrb	r3, [r7, #16]
 8003ef8:	f362 03c3 	bfi	r3, r2, #3, #1
 8003efc:	743b      	strb	r3, [r7, #16]
  int1_ctrl.int1_fifo_ovr      = val->fifo_ovr;
 8003efe:	683b      	ldr	r3, [r7, #0]
 8003f00:	781b      	ldrb	r3, [r3, #0]
 8003f02:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8003f06:	b2da      	uxtb	r2, r3
 8003f08:	7c3b      	ldrb	r3, [r7, #16]
 8003f0a:	f362 1304 	bfi	r3, r2, #4, #1
 8003f0e:	743b      	strb	r3, [r7, #16]
  int1_ctrl.int1_fifo_full     = val->fifo_full;
 8003f10:	683b      	ldr	r3, [r7, #0]
 8003f12:	781b      	ldrb	r3, [r3, #0]
 8003f14:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8003f18:	b2da      	uxtb	r2, r3
 8003f1a:	7c3b      	ldrb	r3, [r7, #16]
 8003f1c:	f362 1345 	bfi	r3, r2, #5, #1
 8003f20:	743b      	strb	r3, [r7, #16]
  int1_ctrl.int1_cnt_bdr       = val->cnt_bdr;
 8003f22:	683b      	ldr	r3, [r7, #0]
 8003f24:	781b      	ldrb	r3, [r3, #0]
 8003f26:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8003f2a:	b2da      	uxtb	r2, r3
 8003f2c:	7c3b      	ldrb	r3, [r7, #16]
 8003f2e:	f362 1386 	bfi	r3, r2, #6, #1
 8003f32:	743b      	strb	r3, [r7, #16]

  ret = lsm6dsv16x_write_reg(ctx, LSM6DSV16X_INT1_CTRL, (uint8_t *)&int1_ctrl, 1);
 8003f34:	f107 0210 	add.w	r2, r7, #16
 8003f38:	2301      	movs	r3, #1
 8003f3a:	210d      	movs	r1, #13
 8003f3c:	6878      	ldr	r0, [r7, #4]
 8003f3e:	f7ff fd5b 	bl	80039f8 <lsm6dsv16x_write_reg>
 8003f42:	6178      	str	r0, [r7, #20]
  if (ret != 0) { return ret; }
 8003f44:	697b      	ldr	r3, [r7, #20]
 8003f46:	2b00      	cmp	r3, #0
 8003f48:	d001      	beq.n	8003f4e <lsm6dsv16x_pin_int1_route_set+0xaa>
 8003f4a:	697b      	ldr	r3, [r7, #20]
 8003f4c:	e05d      	b.n	800400a <lsm6dsv16x_pin_int1_route_set+0x166>

  ret = lsm6dsv16x_read_reg(ctx, LSM6DSV16X_MD1_CFG, (uint8_t *)&md1_cfg, 1);
 8003f4e:	f107 020c 	add.w	r2, r7, #12
 8003f52:	2301      	movs	r3, #1
 8003f54:	215e      	movs	r1, #94	@ 0x5e
 8003f56:	6878      	ldr	r0, [r7, #4]
 8003f58:	f7ff fd36 	bl	80039c8 <lsm6dsv16x_read_reg>
 8003f5c:	6178      	str	r0, [r7, #20]
  if (ret != 0) { return ret; }
 8003f5e:	697b      	ldr	r3, [r7, #20]
 8003f60:	2b00      	cmp	r3, #0
 8003f62:	d001      	beq.n	8003f68 <lsm6dsv16x_pin_int1_route_set+0xc4>
 8003f64:	697b      	ldr	r3, [r7, #20]
 8003f66:	e050      	b.n	800400a <lsm6dsv16x_pin_int1_route_set+0x166>

  md1_cfg.int1_shub            = val->shub;
 8003f68:	683b      	ldr	r3, [r7, #0]
 8003f6a:	785b      	ldrb	r3, [r3, #1]
 8003f6c:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8003f70:	b2da      	uxtb	r2, r3
 8003f72:	7b3b      	ldrb	r3, [r7, #12]
 8003f74:	f362 0300 	bfi	r3, r2, #0, #1
 8003f78:	733b      	strb	r3, [r7, #12]
  md1_cfg.int1_emb_func        = val->emb_func;
 8003f7a:	683b      	ldr	r3, [r7, #0]
 8003f7c:	785b      	ldrb	r3, [r3, #1]
 8003f7e:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8003f82:	b2da      	uxtb	r2, r3
 8003f84:	7b3b      	ldrb	r3, [r7, #12]
 8003f86:	f362 0341 	bfi	r3, r2, #1, #1
 8003f8a:	733b      	strb	r3, [r7, #12]
  md1_cfg.int1_6d              = val->sixd;
 8003f8c:	683b      	ldr	r3, [r7, #0]
 8003f8e:	785b      	ldrb	r3, [r3, #1]
 8003f90:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8003f94:	b2da      	uxtb	r2, r3
 8003f96:	7b3b      	ldrb	r3, [r7, #12]
 8003f98:	f362 0382 	bfi	r3, r2, #2, #1
 8003f9c:	733b      	strb	r3, [r7, #12]
  md1_cfg.int1_single_tap      = val->single_tap;
 8003f9e:	683b      	ldr	r3, [r7, #0]
 8003fa0:	785b      	ldrb	r3, [r3, #1]
 8003fa2:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8003fa6:	b2da      	uxtb	r2, r3
 8003fa8:	7b3b      	ldrb	r3, [r7, #12]
 8003faa:	f362 1386 	bfi	r3, r2, #6, #1
 8003fae:	733b      	strb	r3, [r7, #12]
  md1_cfg.int1_double_tap      = val->double_tap;
 8003fb0:	683b      	ldr	r3, [r7, #0]
 8003fb2:	785b      	ldrb	r3, [r3, #1]
 8003fb4:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8003fb8:	b2da      	uxtb	r2, r3
 8003fba:	7b3b      	ldrb	r3, [r7, #12]
 8003fbc:	f362 03c3 	bfi	r3, r2, #3, #1
 8003fc0:	733b      	strb	r3, [r7, #12]
  md1_cfg.int1_wu              = val->wakeup;
 8003fc2:	683b      	ldr	r3, [r7, #0]
 8003fc4:	785b      	ldrb	r3, [r3, #1]
 8003fc6:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8003fca:	b2da      	uxtb	r2, r3
 8003fcc:	7b3b      	ldrb	r3, [r7, #12]
 8003fce:	f362 1345 	bfi	r3, r2, #5, #1
 8003fd2:	733b      	strb	r3, [r7, #12]
  md1_cfg.int1_ff              = val->freefall;
 8003fd4:	683b      	ldr	r3, [r7, #0]
 8003fd6:	785b      	ldrb	r3, [r3, #1]
 8003fd8:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8003fdc:	b2da      	uxtb	r2, r3
 8003fde:	7b3b      	ldrb	r3, [r7, #12]
 8003fe0:	f362 1304 	bfi	r3, r2, #4, #1
 8003fe4:	733b      	strb	r3, [r7, #12]
  md1_cfg.int1_sleep_change    = val->sleep_change;
 8003fe6:	683b      	ldr	r3, [r7, #0]
 8003fe8:	789b      	ldrb	r3, [r3, #2]
 8003fea:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8003fee:	b2da      	uxtb	r2, r3
 8003ff0:	7b3b      	ldrb	r3, [r7, #12]
 8003ff2:	f362 13c7 	bfi	r3, r2, #7, #1
 8003ff6:	733b      	strb	r3, [r7, #12]

  ret = lsm6dsv16x_write_reg(ctx, LSM6DSV16X_MD1_CFG, (uint8_t *)&md1_cfg, 1);
 8003ff8:	f107 020c 	add.w	r2, r7, #12
 8003ffc:	2301      	movs	r3, #1
 8003ffe:	215e      	movs	r1, #94	@ 0x5e
 8004000:	6878      	ldr	r0, [r7, #4]
 8004002:	f7ff fcf9 	bl	80039f8 <lsm6dsv16x_write_reg>
 8004006:	6178      	str	r0, [r7, #20]

  return ret;
 8004008:	697b      	ldr	r3, [r7, #20]
}
 800400a:	4618      	mov	r0, r3
 800400c:	3718      	adds	r7, #24
 800400e:	46bd      	mov	sp, r7
 8004010:	bd80      	pop	{r7, pc}

08004012 <lsm6dsv16x_den_polarity_set>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dsv16x_den_polarity_set(stmdev_ctx_t *ctx,
                                    lsm6dsv16x_den_polarity_t val)
{
 8004012:	b580      	push	{r7, lr}
 8004014:	b084      	sub	sp, #16
 8004016:	af00      	add	r7, sp, #0
 8004018:	6078      	str	r0, [r7, #4]
 800401a:	460b      	mov	r3, r1
 800401c:	70fb      	strb	r3, [r7, #3]
  lsm6dsv16x_ctrl4_t ctrl4;
  int32_t ret;

  ret = lsm6dsv16x_read_reg(ctx, LSM6DSV16X_CTRL4, (uint8_t *)&ctrl4, 1);
 800401e:	f107 0208 	add.w	r2, r7, #8
 8004022:	2301      	movs	r3, #1
 8004024:	2113      	movs	r1, #19
 8004026:	6878      	ldr	r0, [r7, #4]
 8004028:	f7ff fcce 	bl	80039c8 <lsm6dsv16x_read_reg>
 800402c:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 800402e:	68fb      	ldr	r3, [r7, #12]
 8004030:	2b00      	cmp	r3, #0
 8004032:	d10f      	bne.n	8004054 <lsm6dsv16x_den_polarity_set+0x42>
  {
    ctrl4.int2_in_lh = (uint8_t)val & 0x1U;
 8004034:	78fb      	ldrb	r3, [r7, #3]
 8004036:	f003 0301 	and.w	r3, r3, #1
 800403a:	b2da      	uxtb	r2, r3
 800403c:	7a3b      	ldrb	r3, [r7, #8]
 800403e:	f362 0300 	bfi	r3, r2, #0, #1
 8004042:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsv16x_write_reg(ctx, LSM6DSV16X_CTRL4, (uint8_t *)&ctrl4, 1);
 8004044:	f107 0208 	add.w	r2, r7, #8
 8004048:	2301      	movs	r3, #1
 800404a:	2113      	movs	r1, #19
 800404c:	6878      	ldr	r0, [r7, #4]
 800404e:	f7ff fcd3 	bl	80039f8 <lsm6dsv16x_write_reg>
 8004052:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8004054:	68fb      	ldr	r3, [r7, #12]
}
 8004056:	4618      	mov	r0, r3
 8004058:	3710      	adds	r7, #16
 800405a:	46bd      	mov	sp, r7
 800405c:	bd80      	pop	{r7, pc}

0800405e <lsm6dsv16x_fifo_watermark_set>:
  * @param  val      FIFO watermark threshold (1 LSb = TAG (1 Byte) + 1 sensor (6 Bytes) written in FIFO).
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dsv16x_fifo_watermark_set(stmdev_ctx_t *ctx, uint8_t val)
{
 800405e:	b580      	push	{r7, lr}
 8004060:	b084      	sub	sp, #16
 8004062:	af00      	add	r7, sp, #0
 8004064:	6078      	str	r0, [r7, #4]
 8004066:	460b      	mov	r3, r1
 8004068:	70fb      	strb	r3, [r7, #3]
  lsm6dsv16x_fifo_ctrl1_t fifo_ctrl1;
  int32_t ret;

  ret = lsm6dsv16x_read_reg(ctx, LSM6DSV16X_FIFO_CTRL1, (uint8_t *)&fifo_ctrl1, 1);
 800406a:	f107 0208 	add.w	r2, r7, #8
 800406e:	2301      	movs	r3, #1
 8004070:	2107      	movs	r1, #7
 8004072:	6878      	ldr	r0, [r7, #4]
 8004074:	f7ff fca8 	bl	80039c8 <lsm6dsv16x_read_reg>
 8004078:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 800407a:	68fb      	ldr	r3, [r7, #12]
 800407c:	2b00      	cmp	r3, #0
 800407e:	d109      	bne.n	8004094 <lsm6dsv16x_fifo_watermark_set+0x36>
  {
    fifo_ctrl1.wtm = val;
 8004080:	78fb      	ldrb	r3, [r7, #3]
 8004082:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsv16x_write_reg(ctx, LSM6DSV16X_FIFO_CTRL1, (uint8_t *)&fifo_ctrl1, 1);
 8004084:	f107 0208 	add.w	r2, r7, #8
 8004088:	2301      	movs	r3, #1
 800408a:	2107      	movs	r1, #7
 800408c:	6878      	ldr	r0, [r7, #4]
 800408e:	f7ff fcb3 	bl	80039f8 <lsm6dsv16x_write_reg>
 8004092:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8004094:	68fb      	ldr	r3, [r7, #12]
}
 8004096:	4618      	mov	r0, r3
 8004098:	3710      	adds	r7, #16
 800409a:	46bd      	mov	sp, r7
 800409c:	bd80      	pop	{r7, pc}

0800409e <lsm6dsv16x_fifo_xl_batch_set>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dsv16x_fifo_xl_batch_set(stmdev_ctx_t *ctx,
                                     lsm6dsv16x_fifo_xl_batch_t val)
{
 800409e:	b580      	push	{r7, lr}
 80040a0:	b084      	sub	sp, #16
 80040a2:	af00      	add	r7, sp, #0
 80040a4:	6078      	str	r0, [r7, #4]
 80040a6:	460b      	mov	r3, r1
 80040a8:	70fb      	strb	r3, [r7, #3]
  lsm6dsv16x_fifo_ctrl3_t fifo_ctrl3;
  int32_t ret;

  ret = lsm6dsv16x_read_reg(ctx, LSM6DSV16X_FIFO_CTRL3, (uint8_t *)&fifo_ctrl3, 1);
 80040aa:	f107 0208 	add.w	r2, r7, #8
 80040ae:	2301      	movs	r3, #1
 80040b0:	2109      	movs	r1, #9
 80040b2:	6878      	ldr	r0, [r7, #4]
 80040b4:	f7ff fc88 	bl	80039c8 <lsm6dsv16x_read_reg>
 80040b8:	60f8      	str	r0, [r7, #12]
  if (ret == 0)
 80040ba:	68fb      	ldr	r3, [r7, #12]
 80040bc:	2b00      	cmp	r3, #0
 80040be:	d10f      	bne.n	80040e0 <lsm6dsv16x_fifo_xl_batch_set+0x42>
  {
    fifo_ctrl3.bdr_xl = (uint8_t)val & 0xFu;
 80040c0:	78fb      	ldrb	r3, [r7, #3]
 80040c2:	f003 030f 	and.w	r3, r3, #15
 80040c6:	b2da      	uxtb	r2, r3
 80040c8:	7a3b      	ldrb	r3, [r7, #8]
 80040ca:	f362 0303 	bfi	r3, r2, #0, #4
 80040ce:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsv16x_write_reg(ctx, LSM6DSV16X_FIFO_CTRL3, (uint8_t *)&fifo_ctrl3, 1);
 80040d0:	f107 0208 	add.w	r2, r7, #8
 80040d4:	2301      	movs	r3, #1
 80040d6:	2109      	movs	r1, #9
 80040d8:	6878      	ldr	r0, [r7, #4]
 80040da:	f7ff fc8d 	bl	80039f8 <lsm6dsv16x_write_reg>
 80040de:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 80040e0:	68fb      	ldr	r3, [r7, #12]
}
 80040e2:	4618      	mov	r0, r3
 80040e4:	3710      	adds	r7, #16
 80040e6:	46bd      	mov	sp, r7
 80040e8:	bd80      	pop	{r7, pc}

080040ea <lsm6dsv16x_fifo_gy_batch_set>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dsv16x_fifo_gy_batch_set(stmdev_ctx_t *ctx,
                                     lsm6dsv16x_fifo_gy_batch_t val)
{
 80040ea:	b580      	push	{r7, lr}
 80040ec:	b084      	sub	sp, #16
 80040ee:	af00      	add	r7, sp, #0
 80040f0:	6078      	str	r0, [r7, #4]
 80040f2:	460b      	mov	r3, r1
 80040f4:	70fb      	strb	r3, [r7, #3]
  lsm6dsv16x_fifo_ctrl3_t fifo_ctrl3;
  int32_t ret;

  ret = lsm6dsv16x_read_reg(ctx, LSM6DSV16X_FIFO_CTRL3, (uint8_t *)&fifo_ctrl3, 1);
 80040f6:	f107 0208 	add.w	r2, r7, #8
 80040fa:	2301      	movs	r3, #1
 80040fc:	2109      	movs	r1, #9
 80040fe:	6878      	ldr	r0, [r7, #4]
 8004100:	f7ff fc62 	bl	80039c8 <lsm6dsv16x_read_reg>
 8004104:	60f8      	str	r0, [r7, #12]
  if (ret == 0)
 8004106:	68fb      	ldr	r3, [r7, #12]
 8004108:	2b00      	cmp	r3, #0
 800410a:	d10f      	bne.n	800412c <lsm6dsv16x_fifo_gy_batch_set+0x42>
  {
    fifo_ctrl3.bdr_gy = (uint8_t)val & 0x0Fu;
 800410c:	78fb      	ldrb	r3, [r7, #3]
 800410e:	f003 030f 	and.w	r3, r3, #15
 8004112:	b2da      	uxtb	r2, r3
 8004114:	7a3b      	ldrb	r3, [r7, #8]
 8004116:	f362 1307 	bfi	r3, r2, #4, #4
 800411a:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsv16x_write_reg(ctx, LSM6DSV16X_FIFO_CTRL3, (uint8_t *)&fifo_ctrl3, 1);
 800411c:	f107 0208 	add.w	r2, r7, #8
 8004120:	2301      	movs	r3, #1
 8004122:	2109      	movs	r1, #9
 8004124:	6878      	ldr	r0, [r7, #4]
 8004126:	f7ff fc67 	bl	80039f8 <lsm6dsv16x_write_reg>
 800412a:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 800412c:	68fb      	ldr	r3, [r7, #12]
}
 800412e:	4618      	mov	r0, r3
 8004130:	3710      	adds	r7, #16
 8004132:	46bd      	mov	sp, r7
 8004134:	bd80      	pop	{r7, pc}

08004136 <lsm6dsv16x_fifo_mode_set>:
  * @param  val      BYPASS_MODE, FIFO_MODE, STREAM_WTM_TO_FULL_MODE, STREAM_TO_FIFO_MODE, BYPASS_TO_STREAM_MODE, STREAM_MODE, BYPASS_TO_FIFO_MODE,
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dsv16x_fifo_mode_set(stmdev_ctx_t *ctx, lsm6dsv16x_fifo_mode_t val)
{
 8004136:	b580      	push	{r7, lr}
 8004138:	b084      	sub	sp, #16
 800413a:	af00      	add	r7, sp, #0
 800413c:	6078      	str	r0, [r7, #4]
 800413e:	460b      	mov	r3, r1
 8004140:	70fb      	strb	r3, [r7, #3]
  lsm6dsv16x_fifo_ctrl4_t fifo_ctrl4;
  int32_t ret;

  ret = lsm6dsv16x_read_reg(ctx, LSM6DSV16X_FIFO_CTRL4, (uint8_t *)&fifo_ctrl4, 1);
 8004142:	f107 0208 	add.w	r2, r7, #8
 8004146:	2301      	movs	r3, #1
 8004148:	210a      	movs	r1, #10
 800414a:	6878      	ldr	r0, [r7, #4]
 800414c:	f7ff fc3c 	bl	80039c8 <lsm6dsv16x_read_reg>
 8004150:	60f8      	str	r0, [r7, #12]
  if (ret == 0)
 8004152:	68fb      	ldr	r3, [r7, #12]
 8004154:	2b00      	cmp	r3, #0
 8004156:	d10f      	bne.n	8004178 <lsm6dsv16x_fifo_mode_set+0x42>
  {
    fifo_ctrl4.fifo_mode = (uint8_t)val & 0x07U;
 8004158:	78fb      	ldrb	r3, [r7, #3]
 800415a:	f003 0307 	and.w	r3, r3, #7
 800415e:	b2da      	uxtb	r2, r3
 8004160:	7a3b      	ldrb	r3, [r7, #8]
 8004162:	f362 0302 	bfi	r3, r2, #0, #3
 8004166:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsv16x_write_reg(ctx, LSM6DSV16X_FIFO_CTRL4, (uint8_t *)&fifo_ctrl4, 1);
 8004168:	f107 0208 	add.w	r2, r7, #8
 800416c:	2301      	movs	r3, #1
 800416e:	210a      	movs	r1, #10
 8004170:	6878      	ldr	r0, [r7, #4]
 8004172:	f7ff fc41 	bl	80039f8 <lsm6dsv16x_write_reg>
 8004176:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8004178:	68fb      	ldr	r3, [r7, #12]
}
 800417a:	4618      	mov	r0, r3
 800417c:	3710      	adds	r7, #16
 800417e:	46bd      	mov	sp, r7
 8004180:	bd80      	pop	{r7, pc}

08004182 <lsm6dsv16x_ui_i2c_i3c_mode_set>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dsv16x_ui_i2c_i3c_mode_set(stmdev_ctx_t *ctx,
                                       lsm6dsv16x_ui_i2c_i3c_mode_t val)
{
 8004182:	b580      	push	{r7, lr}
 8004184:	b084      	sub	sp, #16
 8004186:	af00      	add	r7, sp, #0
 8004188:	6078      	str	r0, [r7, #4]
 800418a:	460b      	mov	r3, r1
 800418c:	70fb      	strb	r3, [r7, #3]
  lsm6dsv16x_if_cfg_t if_cfg;
  int32_t ret;

  ret = lsm6dsv16x_read_reg(ctx, LSM6DSV16X_IF_CFG, (uint8_t *)&if_cfg, 1);
 800418e:	f107 0208 	add.w	r2, r7, #8
 8004192:	2301      	movs	r3, #1
 8004194:	2103      	movs	r1, #3
 8004196:	6878      	ldr	r0, [r7, #4]
 8004198:	f7ff fc16 	bl	80039c8 <lsm6dsv16x_read_reg>
 800419c:	60f8      	str	r0, [r7, #12]
  if (ret == 0)
 800419e:	68fb      	ldr	r3, [r7, #12]
 80041a0:	2b00      	cmp	r3, #0
 80041a2:	d10f      	bne.n	80041c4 <lsm6dsv16x_ui_i2c_i3c_mode_set+0x42>
  {
    if_cfg.i2c_i3c_disable = (uint8_t)val & 0x1U;
 80041a4:	78fb      	ldrb	r3, [r7, #3]
 80041a6:	f003 0301 	and.w	r3, r3, #1
 80041aa:	b2da      	uxtb	r2, r3
 80041ac:	7a3b      	ldrb	r3, [r7, #8]
 80041ae:	f362 0300 	bfi	r3, r2, #0, #1
 80041b2:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsv16x_write_reg(ctx, LSM6DSV16X_IF_CFG, (uint8_t *)&if_cfg, 1);
 80041b4:	f107 0208 	add.w	r2, r7, #8
 80041b8:	2301      	movs	r3, #1
 80041ba:	2103      	movs	r1, #3
 80041bc:	6878      	ldr	r0, [r7, #4]
 80041be:	f7ff fc1b 	bl	80039f8 <lsm6dsv16x_write_reg>
 80041c2:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 80041c4:	68fb      	ldr	r3, [r7, #12]
}
 80041c6:	4618      	mov	r0, r3
 80041c8:	3710      	adds	r7, #16
 80041ca:	46bd      	mov	sp, r7
 80041cc:	bd80      	pop	{r7, pc}

080041ce <acc_write>:
#include "global_variables.h"
#include "peripherals.h"

/* -------------SCRITTURA ACCELEROMETRO-------------*/
int32_t acc_write(void *handle, uint8_t reg, const uint8_t *bufp, uint16_t len)
{
 80041ce:	b580      	push	{r7, lr}
 80041d0:	b084      	sub	sp, #16
 80041d2:	af00      	add	r7, sp, #0
 80041d4:	60f8      	str	r0, [r7, #12]
 80041d6:	607a      	str	r2, [r7, #4]
 80041d8:	461a      	mov	r2, r3
 80041da:	460b      	mov	r3, r1
 80041dc:	72fb      	strb	r3, [r7, #11]
 80041de:	4613      	mov	r3, r2
 80041e0:	813b      	strh	r3, [r7, #8]
	HAL_GPIO_WritePin(ACC_nCS_GPIO_Port, ACC_nCS_Pin, GPIO_PIN_RESET);
 80041e2:	2200      	movs	r2, #0
 80041e4:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80041e8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80041ec:	f00a fa80 	bl	800e6f0 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(handle, &reg, 1, 1000);
 80041f0:	f107 010b 	add.w	r1, r7, #11
 80041f4:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80041f8:	2201      	movs	r2, #1
 80041fa:	68f8      	ldr	r0, [r7, #12]
 80041fc:	f00d fd01 	bl	8011c02 <HAL_SPI_Transmit>
	HAL_SPI_Transmit(handle, (uint8_t*) bufp, len, 1000);
 8004200:	893a      	ldrh	r2, [r7, #8]
 8004202:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8004206:	6879      	ldr	r1, [r7, #4]
 8004208:	68f8      	ldr	r0, [r7, #12]
 800420a:	f00d fcfa 	bl	8011c02 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(ACC_nCS_GPIO_Port, ACC_nCS_Pin, GPIO_PIN_SET);
 800420e:	2201      	movs	r2, #1
 8004210:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8004214:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8004218:	f00a fa6a 	bl	800e6f0 <HAL_GPIO_WritePin>
	return 0;
 800421c:	2300      	movs	r3, #0
}
 800421e:	4618      	mov	r0, r3
 8004220:	3710      	adds	r7, #16
 8004222:	46bd      	mov	sp, r7
 8004224:	bd80      	pop	{r7, pc}

08004226 <acc_read>:

/* -------------LETTURA ACCELEROMETRO-------------*/
int32_t acc_read(void *handle, uint8_t reg, uint8_t *bufp, uint16_t len)
{
 8004226:	b580      	push	{r7, lr}
 8004228:	b084      	sub	sp, #16
 800422a:	af00      	add	r7, sp, #0
 800422c:	60f8      	str	r0, [r7, #12]
 800422e:	607a      	str	r2, [r7, #4]
 8004230:	461a      	mov	r2, r3
 8004232:	460b      	mov	r3, r1
 8004234:	72fb      	strb	r3, [r7, #11]
 8004236:	4613      	mov	r3, r2
 8004238:	813b      	strh	r3, [r7, #8]
	reg |= 0x80;
 800423a:	7afb      	ldrb	r3, [r7, #11]
 800423c:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8004240:	b2db      	uxtb	r3, r3
 8004242:	72fb      	strb	r3, [r7, #11]
	HAL_GPIO_WritePin(ACC_nCS_GPIO_Port, ACC_nCS_Pin, GPIO_PIN_RESET);
 8004244:	2200      	movs	r2, #0
 8004246:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800424a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800424e:	f00a fa4f 	bl	800e6f0 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(handle, &reg, 1, 1000);
 8004252:	f107 010b 	add.w	r1, r7, #11
 8004256:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800425a:	2201      	movs	r2, #1
 800425c:	68f8      	ldr	r0, [r7, #12]
 800425e:	f00d fcd0 	bl	8011c02 <HAL_SPI_Transmit>
	HAL_SPI_Receive(handle, bufp, len, 1000);
 8004262:	893a      	ldrh	r2, [r7, #8]
 8004264:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8004268:	6879      	ldr	r1, [r7, #4]
 800426a:	68f8      	ldr	r0, [r7, #12]
 800426c:	f00d fe3f 	bl	8011eee <HAL_SPI_Receive>
	HAL_GPIO_WritePin(ACC_nCS_GPIO_Port, ACC_nCS_Pin, GPIO_PIN_SET);
 8004270:	2201      	movs	r2, #1
 8004272:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8004276:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800427a:	f00a fa39 	bl	800e6f0 <HAL_GPIO_WritePin>
	return 0;
 800427e:	2300      	movs	r3, #0
}
 8004280:	4618      	mov	r0, r3
 8004282:	3710      	adds	r7, #16
 8004284:	46bd      	mov	sp, r7
 8004286:	bd80      	pop	{r7, pc}

08004288 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 8004288:	b480      	push	{r7}
 800428a:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 800428c:	f3bf 8f4f 	dsb	sy
}
 8004290:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8004292:	4b06      	ldr	r3, [pc, #24]	@ (80042ac <__NVIC_SystemReset+0x24>)
 8004294:	68db      	ldr	r3, [r3, #12]
 8004296:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 800429a:	4904      	ldr	r1, [pc, #16]	@ (80042ac <__NVIC_SystemReset+0x24>)
 800429c:	4b04      	ldr	r3, [pc, #16]	@ (80042b0 <__NVIC_SystemReset+0x28>)
 800429e:	4313      	orrs	r3, r2
 80042a0:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 80042a2:	f3bf 8f4f 	dsb	sy
}
 80042a6:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 80042a8:	bf00      	nop
 80042aa:	e7fd      	b.n	80042a8 <__NVIC_SystemReset+0x20>
 80042ac:	e000ed00 	.word	0xe000ed00
 80042b0:	05fa0004 	.word	0x05fa0004

080042b4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80042b4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80042b6:	b093      	sub	sp, #76	@ 0x4c
 80042b8:	af0c      	add	r7, sp, #48	@ 0x30
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80042ba:	f006 ffba 	bl	800b232 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80042be:	f000 fb5b 	bl	8004978 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80042c2:	f001 f82f 	bl	8005324 <MX_GPIO_Init>
  MX_DMA_Init();
 80042c6:	f000 ffff 	bl	80052c8 <MX_DMA_Init>
  MX_QUADSPI_Init();
 80042ca:	f000 fc81 	bl	8004bd0 <MX_QUADSPI_Init>
  MX_SPI2_Init();
 80042ce:	f000 fd37 	bl	8004d40 <MX_SPI2_Init>
  MX_USART1_UART_Init();
 80042d2:	f000 ffc9 	bl	8005268 <MX_USART1_UART_Init>
  MX_ADC1_Init();
 80042d6:	f000 fba1 	bl	8004a1c <MX_ADC1_Init>
  MX_I2C3_Init();
 80042da:	f000 fc39 	bl	8004b50 <MX_I2C3_Init>
  MX_TIM2_Init();
 80042de:	f000 fe53 	bl	8004f88 <MX_TIM2_Init>
  MX_UART4_Init();
 80042e2:	f000 ff91 	bl	8005208 <MX_UART4_Init>
  MX_TIM1_Init();
 80042e6:	f000 fda7 	bl	8004e38 <MX_TIM1_Init>
  MX_CRC_Init();
 80042ea:	f000 fc0f 	bl	8004b0c <MX_CRC_Init>
  MX_TIM4_Init();
 80042ee:	f000 ff17 	bl	8005120 <MX_TIM4_Init>
  MX_RTC_Init();
 80042f2:	f000 fc93 	bl	8004c1c <MX_RTC_Init>
  MX_SPI3_Init();
 80042f6:	f000 fd61 	bl	8004dbc <MX_SPI3_Init>
  MX_TIM3_Init();
 80042fa:	f000 fe99 	bl	8005030 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
	System_Init();
 80042fe:	f7fe ffbb 	bl	8003278 <System_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1)
	{
		switch(state)
 8004302:	4b56      	ldr	r3, [pc, #344]	@ (800445c <main+0x1a8>)
 8004304:	781b      	ldrb	r3, [r3, #0]
 8004306:	2b03      	cmp	r3, #3
 8004308:	f200 8311 	bhi.w	800492e <main+0x67a>
 800430c:	a201      	add	r2, pc, #4	@ (adr r2, 8004314 <main+0x60>)
 800430e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004312:	bf00      	nop
 8004314:	08004325 	.word	0x08004325
 8004318:	08004447 	.word	0x08004447
 800431c:	0800446d 	.word	0x0800446d
 8004320:	08004811 	.word	0x08004811
		{
		case IDLE:
			if(flags.Message_Rx)
 8004324:	4b4e      	ldr	r3, [pc, #312]	@ (8004460 <main+0x1ac>)
 8004326:	781b      	ldrb	r3, [r3, #0]
 8004328:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800432c:	b2db      	uxtb	r3, r3
 800432e:	2b00      	cmp	r3, #0
 8004330:	d068      	beq.n	8004404 <main+0x150>
			{
				LED_Start(RED_LED, MEDIUM, HIGH);
 8004332:	2205      	movs	r2, #5
 8004334:	2101      	movs	r1, #1
 8004336:	2004      	movs	r0, #4
 8004338:	f7ff fa52 	bl	80037e0 <LED_Start>
				SIM_Parse_Command();
 800433c:	f7fd fca2 	bl	8001c84 <SIM_Parse_Command>
				flags.Message_Rx = 0;
 8004340:	4a47      	ldr	r2, [pc, #284]	@ (8004460 <main+0x1ac>)
 8004342:	7813      	ldrb	r3, [r2, #0]
 8004344:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004348:	7013      	strb	r3, [r2, #0]
				if(flags.CMD.Start_Meas)
 800434a:	4b45      	ldr	r3, [pc, #276]	@ (8004460 <main+0x1ac>)
 800434c:	789b      	ldrb	r3, [r3, #2]
 800434e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004352:	b2db      	uxtb	r3, r3
 8004354:	2b00      	cmp	r3, #0
 8004356:	d008      	beq.n	800436a <main+0xb6>
				{
					state = MEASURE_INIT_STATE;
 8004358:	4b40      	ldr	r3, [pc, #256]	@ (800445c <main+0x1a8>)
 800435a:	2201      	movs	r2, #1
 800435c:	701a      	strb	r2, [r3, #0]
					flags.CMD.Start_Meas = 0;
 800435e:	4a40      	ldr	r2, [pc, #256]	@ (8004460 <main+0x1ac>)
 8004360:	7893      	ldrb	r3, [r2, #2]
 8004362:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004366:	7093      	strb	r3, [r2, #2]
 8004368:	e048      	b.n	80043fc <main+0x148>
				}
				else if(flags.CMD.Set_Config)
 800436a:	4b3d      	ldr	r3, [pc, #244]	@ (8004460 <main+0x1ac>)
 800436c:	789b      	ldrb	r3, [r3, #2]
 800436e:	f003 0310 	and.w	r3, r3, #16
 8004372:	b2db      	uxtb	r3, r3
 8004374:	2b00      	cmp	r3, #0
 8004376:	d007      	beq.n	8004388 <main+0xd4>
				{
					Apply_Config();
 8004378:	f002 fc5e 	bl	8006c38 <Apply_Config>
					flags.CMD.Set_Config = 0;
 800437c:	4a38      	ldr	r2, [pc, #224]	@ (8004460 <main+0x1ac>)
 800437e:	7893      	ldrb	r3, [r2, #2]
 8004380:	f023 0310 	bic.w	r3, r3, #16
 8004384:	7093      	strb	r3, [r2, #2]
 8004386:	e039      	b.n	80043fc <main+0x148>
				}
				else if(flags.CMD.Get_Config)
 8004388:	4b35      	ldr	r3, [pc, #212]	@ (8004460 <main+0x1ac>)
 800438a:	789b      	ldrb	r3, [r3, #2]
 800438c:	f003 0320 	and.w	r3, r3, #32
 8004390:	b2db      	uxtb	r3, r3
 8004392:	2b00      	cmp	r3, #0
 8004394:	d007      	beq.n	80043a6 <main+0xf2>
				{
					Get_Config();
 8004396:	f002 fdc3 	bl	8006f20 <Get_Config>
					flags.CMD.Get_Config = 0;
 800439a:	4a31      	ldr	r2, [pc, #196]	@ (8004460 <main+0x1ac>)
 800439c:	7893      	ldrb	r3, [r2, #2]
 800439e:	f023 0320 	bic.w	r3, r3, #32
 80043a2:	7093      	strb	r3, [r2, #2]
 80043a4:	e02a      	b.n	80043fc <main+0x148>
				}
				else if(flags.CMD.Start_OTA)
 80043a6:	4b2e      	ldr	r3, [pc, #184]	@ (8004460 <main+0x1ac>)
 80043a8:	789b      	ldrb	r3, [r3, #2]
 80043aa:	f003 0304 	and.w	r3, r3, #4
 80043ae:	b2db      	uxtb	r3, r3
 80043b0:	2b00      	cmp	r3, #0
 80043b2:	d015      	beq.n	80043e0 <main+0x12c>
				{
					LED_Stop(GRN_LED);
 80043b4:	2008      	movs	r0, #8
 80043b6:	f7ff fadf 	bl	8003978 <LED_Stop>
					LED_Start(ORG_LED, FAST, FULL);
 80043ba:	2204      	movs	r2, #4
 80043bc:	2100      	movs	r1, #0
 80043be:	2000      	movs	r0, #0
 80043c0:	f7ff fa0e 	bl	80037e0 <LED_Start>
					LED_Start(RED_LED, FAST, HIGH);
 80043c4:	2205      	movs	r2, #5
 80043c6:	2100      	movs	r1, #0
 80043c8:	2004      	movs	r0, #4
 80043ca:	f7ff fa09 	bl	80037e0 <LED_Start>
					state = OTA_STATE;
 80043ce:	4b23      	ldr	r3, [pc, #140]	@ (800445c <main+0x1a8>)
 80043d0:	2203      	movs	r2, #3
 80043d2:	701a      	strb	r2, [r3, #0]
					flags.CMD.Start_OTA = 0;
 80043d4:	4a22      	ldr	r2, [pc, #136]	@ (8004460 <main+0x1ac>)
 80043d6:	7893      	ldrb	r3, [r2, #2]
 80043d8:	f023 0304 	bic.w	r3, r3, #4
 80043dc:	7093      	strb	r3, [r2, #2]
 80043de:	e00d      	b.n	80043fc <main+0x148>
				}
				else if(flags.CMD.Ping)
 80043e0:	4b1f      	ldr	r3, [pc, #124]	@ (8004460 <main+0x1ac>)
 80043e2:	789b      	ldrb	r3, [r3, #2]
 80043e4:	f003 0308 	and.w	r3, r3, #8
 80043e8:	b2db      	uxtb	r3, r3
 80043ea:	2b00      	cmp	r3, #0
 80043ec:	d006      	beq.n	80043fc <main+0x148>
				{
					SIM_Send_Infos();
 80043ee:	f7fd fe6f 	bl	80020d0 <SIM_Send_Infos>
					flags.CMD.Ping = 0;
 80043f2:	4a1b      	ldr	r2, [pc, #108]	@ (8004460 <main+0x1ac>)
 80043f4:	7893      	ldrb	r3, [r2, #2]
 80043f6:	f023 0308 	bic.w	r3, r3, #8
 80043fa:	7093      	strb	r3, [r2, #2]
				}
				LED_Stop(RED_LED);
 80043fc:	2004      	movs	r0, #4
 80043fe:	f7ff fabb 	bl	8003978 <LED_Stop>
				LED_Start(ORG_LED, MEDIUM, HALF);
				SIM_Check_Connection();
				sys.SIM_Connection_Status = HAL_GetTick();
				LED_Stop(ORG_LED);
			}
			break;
 8004402:	e296      	b.n	8004932 <main+0x67e>
			else if(HAL_GetTick() - sys.SIM_Connection_Status > config.connection_timeout_ms)                  // Controllo connessione al server TCP ogni config.connection_timeout_ms millisecondi
 8004404:	f006 ff7e 	bl	800b304 <HAL_GetTick>
 8004408:	4602      	mov	r2, r0
 800440a:	4b16      	ldr	r3, [pc, #88]	@ (8004464 <main+0x1b0>)
 800440c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004410:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8004414:	1ad2      	subs	r2, r2, r3
 8004416:	4b14      	ldr	r3, [pc, #80]	@ (8004468 <main+0x1b4>)
 8004418:	689b      	ldr	r3, [r3, #8]
 800441a:	429a      	cmp	r2, r3
 800441c:	f240 8289 	bls.w	8004932 <main+0x67e>
				LED_Start(ORG_LED, MEDIUM, HALF);
 8004420:	2206      	movs	r2, #6
 8004422:	2101      	movs	r1, #1
 8004424:	2000      	movs	r0, #0
 8004426:	f7ff f9db 	bl	80037e0 <LED_Start>
				SIM_Check_Connection();
 800442a:	f7fd ff6f 	bl	800230c <SIM_Check_Connection>
				sys.SIM_Connection_Status = HAL_GetTick();
 800442e:	f006 ff69 	bl	800b304 <HAL_GetTick>
 8004432:	4603      	mov	r3, r0
 8004434:	4a0b      	ldr	r2, [pc, #44]	@ (8004464 <main+0x1b0>)
 8004436:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800443a:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
				LED_Stop(ORG_LED);
 800443e:	2000      	movs	r0, #0
 8004440:	f7ff fa9a 	bl	8003978 <LED_Stop>
			break;
 8004444:	e275      	b.n	8004932 <main+0x67e>

		case MEASURE_INIT_STATE:
			Start_Measure();
 8004446:	f001 fd45 	bl	8005ed4 <Start_Measure>
			LED_Start(GRN_LED, FAST, FULL);
 800444a:	2204      	movs	r2, #4
 800444c:	2100      	movs	r1, #0
 800444e:	2008      	movs	r0, #8
 8004450:	f7ff f9c6 	bl	80037e0 <LED_Start>
			state = MEASURING_STATE;
 8004454:	4b01      	ldr	r3, [pc, #4]	@ (800445c <main+0x1a8>)
 8004456:	2202      	movs	r2, #2
 8004458:	701a      	strb	r2, [r3, #0]
			break;
 800445a:	e26d      	b.n	8004938 <main+0x684>
 800445c:	200005d4 	.word	0x200005d4
 8004460:	20001780 	.word	0x20001780
 8004464:	200005d8 	.word	0x200005d8
 8004468:	20001784 	.word	0x20001784

		case MEASURING_STATE:
			if(flags.ADC_Complete && flags.ACC_Complete)
 800446c:	4bab      	ldr	r3, [pc, #684]	@ (800471c <main+0x468>)
 800446e:	781b      	ldrb	r3, [r3, #0]
 8004470:	f003 0301 	and.w	r3, r3, #1
 8004474:	b2db      	uxtb	r3, r3
 8004476:	2b00      	cmp	r3, #0
 8004478:	f000 825d 	beq.w	8004936 <main+0x682>
 800447c:	4ba7      	ldr	r3, [pc, #668]	@ (800471c <main+0x468>)
 800447e:	781b      	ldrb	r3, [r3, #0]
 8004480:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004484:	b2db      	uxtb	r3, r3
 8004486:	2b00      	cmp	r3, #0
 8004488:	f000 8255 	beq.w	8004936 <main+0x682>
			{
				Save_Data();
 800448c:	f001 fa92 	bl	80059b4 <Save_Data>
				if(flags.BC_Interrupt)
 8004490:	4ba2      	ldr	r3, [pc, #648]	@ (800471c <main+0x468>)
 8004492:	781b      	ldrb	r3, [r3, #0]
 8004494:	f003 0320 	and.w	r3, r3, #32
 8004498:	b2db      	uxtb	r3, r3
 800449a:	2b00      	cmp	r3, #0
 800449c:	d010      	beq.n	80044c0 <main+0x20c>
				{
					BC_Read_Flags(&sys.BC_Flags);
 800449e:	48a0      	ldr	r0, [pc, #640]	@ (8004720 <main+0x46c>)
 80044a0:	f7fe f99a 	bl	80027d8 <BC_Read_Flags>
					BC_Manage_Interrupts(sys.BC_Flags);
 80044a4:	4b9f      	ldr	r3, [pc, #636]	@ (8004724 <main+0x470>)
 80044a6:	f503 5382 	add.w	r3, r3, #4160	@ 0x1040
 80044aa:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80044ae:	4610      	mov	r0, r2
 80044b0:	4619      	mov	r1, r3
 80044b2:	f7fe fa3f 	bl	8002934 <BC_Manage_Interrupts>
					flags.BC_Interrupt = 0;
 80044b6:	4a99      	ldr	r2, [pc, #612]	@ (800471c <main+0x468>)
 80044b8:	7813      	ldrb	r3, [r2, #0]
 80044ba:	f023 0320 	bic.w	r3, r3, #32
 80044be:	7013      	strb	r3, [r2, #0]
				}
				if(flags.Message_Rx)
 80044c0:	4b96      	ldr	r3, [pc, #600]	@ (800471c <main+0x468>)
 80044c2:	781b      	ldrb	r3, [r3, #0]
 80044c4:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 80044c8:	b2db      	uxtb	r3, r3
 80044ca:	2b00      	cmp	r3, #0
 80044cc:	d00b      	beq.n	80044e6 <main+0x232>
				{
					SIM_Parse_Command();
 80044ce:	f7fd fbd9 	bl	8001c84 <SIM_Parse_Command>
					flags.SIM_isConnected = 1;
 80044d2:	4a92      	ldr	r2, [pc, #584]	@ (800471c <main+0x468>)
 80044d4:	7853      	ldrb	r3, [r2, #1]
 80044d6:	f043 0310 	orr.w	r3, r3, #16
 80044da:	7053      	strb	r3, [r2, #1]
					flags.Message_Rx = 0;
 80044dc:	4a8f      	ldr	r2, [pc, #572]	@ (800471c <main+0x468>)
 80044de:	7813      	ldrb	r3, [r2, #0]
 80044e0:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80044e4:	7013      	strb	r3, [r2, #0]
				}
				if(flags.CMD.Idle)
 80044e6:	4b8d      	ldr	r3, [pc, #564]	@ (800471c <main+0x468>)
 80044e8:	789b      	ldrb	r3, [r3, #2]
 80044ea:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 80044ee:	b2db      	uxtb	r3, r3
 80044f0:	2b00      	cmp	r3, #0
 80044f2:	d022      	beq.n	800453a <main+0x286>
				{
					if(!flags.Log_TransferInProgress && !flags.Meas_TransferInProgress)
 80044f4:	4b89      	ldr	r3, [pc, #548]	@ (800471c <main+0x468>)
 80044f6:	785b      	ldrb	r3, [r3, #1]
 80044f8:	f003 0308 	and.w	r3, r3, #8
 80044fc:	b2db      	uxtb	r3, r3
 80044fe:	2b00      	cmp	r3, #0
 8004500:	d11b      	bne.n	800453a <main+0x286>
 8004502:	4b86      	ldr	r3, [pc, #536]	@ (800471c <main+0x468>)
 8004504:	785b      	ldrb	r3, [r3, #1]
 8004506:	f003 0304 	and.w	r3, r3, #4
 800450a:	b2db      	uxtb	r3, r3
 800450c:	2b00      	cmp	r3, #0
 800450e:	d114      	bne.n	800453a <main+0x286>
					{
						Stop_Measure();
 8004510:	f001 fdae 	bl	8006070 <Stop_Measure>
						LED_Stop(ORG_LED);
 8004514:	2000      	movs	r0, #0
 8004516:	f7ff fa2f 	bl	8003978 <LED_Stop>
						LED_Stop(RED_LED);
 800451a:	2004      	movs	r0, #4
 800451c:	f7ff fa2c 	bl	8003978 <LED_Stop>
						LED_Start(GRN_LED, MEDIUM, HALF);
 8004520:	2206      	movs	r2, #6
 8004522:	2101      	movs	r1, #1
 8004524:	2008      	movs	r0, #8
 8004526:	f7ff f95b 	bl	80037e0 <LED_Start>
						state = IDLE;
 800452a:	4b7f      	ldr	r3, [pc, #508]	@ (8004728 <main+0x474>)
 800452c:	2200      	movs	r2, #0
 800452e:	701a      	strb	r2, [r3, #0]
						flags.CMD.Idle = 0;
 8004530:	4a7a      	ldr	r2, [pc, #488]	@ (800471c <main+0x468>)
 8004532:	7893      	ldrb	r3, [r2, #2]
 8004534:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004538:	7093      	strb	r3, [r2, #2]
					}
				}
				if(flags.CMD.Data_Request)
 800453a:	4b78      	ldr	r3, [pc, #480]	@ (800471c <main+0x468>)
 800453c:	789b      	ldrb	r3, [r3, #2]
 800453e:	f003 0301 	and.w	r3, r3, #1
 8004542:	b2db      	uxtb	r3, r3
 8004544:	2b00      	cmp	r3, #0
 8004546:	f000 8098 	beq.w	800467a <main+0x3c6>
				{
					if(HAL_GetTick() - sys.Log_Status > config.log_period_ms && !flags.Log_TransferInProgress && !flags.Meas_TransferInProgress)
 800454a:	f006 fedb 	bl	800b304 <HAL_GetTick>
 800454e:	4602      	mov	r2, r0
 8004550:	4b74      	ldr	r3, [pc, #464]	@ (8004724 <main+0x470>)
 8004552:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004556:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 800455a:	1ad2      	subs	r2, r2, r3
 800455c:	4b73      	ldr	r3, [pc, #460]	@ (800472c <main+0x478>)
 800455e:	68db      	ldr	r3, [r3, #12]
 8004560:	429a      	cmp	r2, r3
 8004562:	d96e      	bls.n	8004642 <main+0x38e>
 8004564:	4b6d      	ldr	r3, [pc, #436]	@ (800471c <main+0x468>)
 8004566:	785b      	ldrb	r3, [r3, #1]
 8004568:	f003 0308 	and.w	r3, r3, #8
 800456c:	b2db      	uxtb	r3, r3
 800456e:	2b00      	cmp	r3, #0
 8004570:	d167      	bne.n	8004642 <main+0x38e>
 8004572:	4b6a      	ldr	r3, [pc, #424]	@ (800471c <main+0x468>)
 8004574:	785b      	ldrb	r3, [r3, #1]
 8004576:	f003 0304 	and.w	r3, r3, #4
 800457a:	b2db      	uxtb	r3, r3
 800457c:	2b00      	cmp	r3, #0
 800457e:	d160      	bne.n	8004642 <main+0x38e>
					{
						LED_Start(ORG_LED, FAST, HIGH);
 8004580:	2205      	movs	r2, #5
 8004582:	2100      	movs	r1, #0
 8004584:	2000      	movs	r0, #0
 8004586:	f7ff f92b 	bl	80037e0 <LED_Start>
						sprintf(Data_Logging, "L:%u,%u,%lu,%u,%u,%u,%u,%u,%u,%u,%u,%u,%u,%u", config.device_id, Last_Pressure, Last_Volume, Last_Acceleration.x, Last_Acceleration.y, Last_Acceleration.z, Vbatt, Supply.i1, Supply.i2, Supply.i3, Supply.v1, Supply.v2, Supply.v3, Temperature);
 800458a:	4b68      	ldr	r3, [pc, #416]	@ (800472c <main+0x478>)
 800458c:	781b      	ldrb	r3, [r3, #0]
 800458e:	469c      	mov	ip, r3
 8004590:	4b67      	ldr	r3, [pc, #412]	@ (8004730 <main+0x47c>)
 8004592:	881b      	ldrh	r3, [r3, #0]
 8004594:	469e      	mov	lr, r3
 8004596:	4b67      	ldr	r3, [pc, #412]	@ (8004734 <main+0x480>)
 8004598:	681a      	ldr	r2, [r3, #0]
 800459a:	4b67      	ldr	r3, [pc, #412]	@ (8004738 <main+0x484>)
 800459c:	885b      	ldrh	r3, [r3, #2]
 800459e:	4619      	mov	r1, r3
 80045a0:	4b65      	ldr	r3, [pc, #404]	@ (8004738 <main+0x484>)
 80045a2:	889b      	ldrh	r3, [r3, #4]
 80045a4:	4618      	mov	r0, r3
 80045a6:	4b64      	ldr	r3, [pc, #400]	@ (8004738 <main+0x484>)
 80045a8:	88db      	ldrh	r3, [r3, #6]
 80045aa:	461c      	mov	r4, r3
 80045ac:	4b63      	ldr	r3, [pc, #396]	@ (800473c <main+0x488>)
 80045ae:	881b      	ldrh	r3, [r3, #0]
 80045b0:	461d      	mov	r5, r3
 80045b2:	4b63      	ldr	r3, [pc, #396]	@ (8004740 <main+0x48c>)
 80045b4:	88db      	ldrh	r3, [r3, #6]
 80045b6:	461e      	mov	r6, r3
 80045b8:	4b61      	ldr	r3, [pc, #388]	@ (8004740 <main+0x48c>)
 80045ba:	891b      	ldrh	r3, [r3, #8]
 80045bc:	617b      	str	r3, [r7, #20]
 80045be:	4b60      	ldr	r3, [pc, #384]	@ (8004740 <main+0x48c>)
 80045c0:	895b      	ldrh	r3, [r3, #10]
 80045c2:	613b      	str	r3, [r7, #16]
 80045c4:	4b5e      	ldr	r3, [pc, #376]	@ (8004740 <main+0x48c>)
 80045c6:	881b      	ldrh	r3, [r3, #0]
 80045c8:	60fb      	str	r3, [r7, #12]
 80045ca:	4b5d      	ldr	r3, [pc, #372]	@ (8004740 <main+0x48c>)
 80045cc:	885b      	ldrh	r3, [r3, #2]
 80045ce:	60bb      	str	r3, [r7, #8]
 80045d0:	4b5b      	ldr	r3, [pc, #364]	@ (8004740 <main+0x48c>)
 80045d2:	889b      	ldrh	r3, [r3, #4]
 80045d4:	607b      	str	r3, [r7, #4]
 80045d6:	4b5b      	ldr	r3, [pc, #364]	@ (8004744 <main+0x490>)
 80045d8:	881b      	ldrh	r3, [r3, #0]
 80045da:	930b      	str	r3, [sp, #44]	@ 0x2c
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	930a      	str	r3, [sp, #40]	@ 0x28
 80045e0:	68bb      	ldr	r3, [r7, #8]
 80045e2:	9309      	str	r3, [sp, #36]	@ 0x24
 80045e4:	68fb      	ldr	r3, [r7, #12]
 80045e6:	9308      	str	r3, [sp, #32]
 80045e8:	693b      	ldr	r3, [r7, #16]
 80045ea:	9307      	str	r3, [sp, #28]
 80045ec:	697b      	ldr	r3, [r7, #20]
 80045ee:	9306      	str	r3, [sp, #24]
 80045f0:	9605      	str	r6, [sp, #20]
 80045f2:	9504      	str	r5, [sp, #16]
 80045f4:	9403      	str	r4, [sp, #12]
 80045f6:	9002      	str	r0, [sp, #8]
 80045f8:	9101      	str	r1, [sp, #4]
 80045fa:	9200      	str	r2, [sp, #0]
 80045fc:	4673      	mov	r3, lr
 80045fe:	4662      	mov	r2, ip
 8004600:	4951      	ldr	r1, [pc, #324]	@ (8004748 <main+0x494>)
 8004602:	4852      	ldr	r0, [pc, #328]	@ (800474c <main+0x498>)
 8004604:	f011 fee6 	bl	80163d4 <siprintf>
						SIM_Send_TCP_Chunk_DMA(strlen(Data_Logging));
 8004608:	4850      	ldr	r0, [pc, #320]	@ (800474c <main+0x498>)
 800460a:	f7fb fdeb 	bl	80001e4 <strlen>
 800460e:	4603      	mov	r3, r0
 8004610:	b29b      	uxth	r3, r3
 8004612:	4618      	mov	r0, r3
 8004614:	f7fd fd44 	bl	80020a0 <SIM_Send_TCP_Chunk_DMA>
						sys.SIM_Prompt_Status = HAL_GetTick();
 8004618:	f006 fe74 	bl	800b304 <HAL_GetTick>
 800461c:	4603      	mov	r3, r0
 800461e:	4a41      	ldr	r2, [pc, #260]	@ (8004724 <main+0x470>)
 8004620:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8004624:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
						sys.Log_Status = HAL_GetTick();
 8004628:	f006 fe6c 	bl	800b304 <HAL_GetTick>
 800462c:	4603      	mov	r3, r0
 800462e:	4a3d      	ldr	r2, [pc, #244]	@ (8004724 <main+0x470>)
 8004630:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8004634:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
						flags.Log_TransferInProgress = 1;
 8004638:	4a38      	ldr	r2, [pc, #224]	@ (800471c <main+0x468>)
 800463a:	7853      	ldrb	r3, [r2, #1]
 800463c:	f043 0308 	orr.w	r3, r3, #8
 8004640:	7053      	strb	r3, [r2, #1]
					}
					if(flags.Log_ReadytoSend)
 8004642:	4b36      	ldr	r3, [pc, #216]	@ (800471c <main+0x468>)
 8004644:	785b      	ldrb	r3, [r3, #1]
 8004646:	f003 0301 	and.w	r3, r3, #1
 800464a:	b2db      	uxtb	r3, r3
 800464c:	2b00      	cmp	r3, #0
 800464e:	d014      	beq.n	800467a <main+0x3c6>
					{
						SIM_Send_Command_DMA(Data_Logging);
 8004650:	483e      	ldr	r0, [pc, #248]	@ (800474c <main+0x498>)
 8004652:	f7fd fa85 	bl	8001b60 <SIM_Send_Command_DMA>
						LED_Stop(ORG_LED);
 8004656:	2000      	movs	r0, #0
 8004658:	f7ff f98e 	bl	8003978 <LED_Stop>
						flags.SIM_isConnected = 1;
 800465c:	4a2f      	ldr	r2, [pc, #188]	@ (800471c <main+0x468>)
 800465e:	7853      	ldrb	r3, [r2, #1]
 8004660:	f043 0310 	orr.w	r3, r3, #16
 8004664:	7053      	strb	r3, [r2, #1]
						flags.Log_ReadytoSend = 0;
 8004666:	4a2d      	ldr	r2, [pc, #180]	@ (800471c <main+0x468>)
 8004668:	7853      	ldrb	r3, [r2, #1]
 800466a:	f023 0301 	bic.w	r3, r3, #1
 800466e:	7053      	strb	r3, [r2, #1]
						flags.Log_TransferInProgress = 0;
 8004670:	4a2a      	ldr	r2, [pc, #168]	@ (800471c <main+0x468>)
 8004672:	7853      	ldrb	r3, [r2, #1]
 8004674:	f023 0308 	bic.w	r3, r3, #8
 8004678:	7053      	strb	r3, [r2, #1]
					}
				}
				if(flags.CMD.Measure_Request)
 800467a:	4b28      	ldr	r3, [pc, #160]	@ (800471c <main+0x468>)
 800467c:	789b      	ldrb	r3, [r3, #2]
 800467e:	f003 0302 	and.w	r3, r3, #2
 8004682:	b2db      	uxtb	r3, r3
 8004684:	2b00      	cmp	r3, #0
 8004686:	d075      	beq.n	8004774 <main+0x4c0>
				{
					if(!flags.Meas_TransferInProgress && !flags.Log_TransferInProgress && !flags.Measure_ReadytoSend)
 8004688:	4b24      	ldr	r3, [pc, #144]	@ (800471c <main+0x468>)
 800468a:	785b      	ldrb	r3, [r3, #1]
 800468c:	f003 0304 	and.w	r3, r3, #4
 8004690:	b2db      	uxtb	r3, r3
 8004692:	2b00      	cmp	r3, #0
 8004694:	d12c      	bne.n	80046f0 <main+0x43c>
 8004696:	4b21      	ldr	r3, [pc, #132]	@ (800471c <main+0x468>)
 8004698:	785b      	ldrb	r3, [r3, #1]
 800469a:	f003 0308 	and.w	r3, r3, #8
 800469e:	b2db      	uxtb	r3, r3
 80046a0:	2b00      	cmp	r3, #0
 80046a2:	d125      	bne.n	80046f0 <main+0x43c>
 80046a4:	4b1d      	ldr	r3, [pc, #116]	@ (800471c <main+0x468>)
 80046a6:	785b      	ldrb	r3, [r3, #1]
 80046a8:	f003 0302 	and.w	r3, r3, #2
 80046ac:	b2db      	uxtb	r3, r3
 80046ae:	2b00      	cmp	r3, #0
 80046b0:	d11e      	bne.n	80046f0 <main+0x43c>
					{
						Send_Measure_Addr = Send_Measure_Chunk(sys.RAM_Buffer_Base_tosend, sys.Inactive_RAM_Len, Send_Measure_Addr);
 80046b2:	4b1c      	ldr	r3, [pc, #112]	@ (8004724 <main+0x470>)
 80046b4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80046b8:	f8d3 30cc 	ldr.w	r3, [r3, #204]	@ 0xcc
 80046bc:	4a19      	ldr	r2, [pc, #100]	@ (8004724 <main+0x470>)
 80046be:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80046c2:	f8d2 10d0 	ldr.w	r1, [r2, #208]	@ 0xd0
 80046c6:	4a22      	ldr	r2, [pc, #136]	@ (8004750 <main+0x49c>)
 80046c8:	6812      	ldr	r2, [r2, #0]
 80046ca:	4618      	mov	r0, r3
 80046cc:	f001 fde2 	bl	8006294 <Send_Measure_Chunk>
 80046d0:	4603      	mov	r3, r0
 80046d2:	4a1f      	ldr	r2, [pc, #124]	@ (8004750 <main+0x49c>)
 80046d4:	6013      	str	r3, [r2, #0]
            sys.SIM_Prompt_Status = HAL_GetTick();
 80046d6:	f006 fe15 	bl	800b304 <HAL_GetTick>
 80046da:	4603      	mov	r3, r0
 80046dc:	4a11      	ldr	r2, [pc, #68]	@ (8004724 <main+0x470>)
 80046de:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80046e2:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
						flags.Meas_TransferInProgress = 1;
 80046e6:	4a0d      	ldr	r2, [pc, #52]	@ (800471c <main+0x468>)
 80046e8:	7853      	ldrb	r3, [r2, #1]
 80046ea:	f043 0304 	orr.w	r3, r3, #4
 80046ee:	7053      	strb	r3, [r2, #1]
					}
					if(flags.Measure_ReadytoSend)
 80046f0:	4b0a      	ldr	r3, [pc, #40]	@ (800471c <main+0x468>)
 80046f2:	785b      	ldrb	r3, [r3, #1]
 80046f4:	f003 0302 	and.w	r3, r3, #2
 80046f8:	b2db      	uxtb	r3, r3
 80046fa:	2b00      	cmp	r3, #0
 80046fc:	d03a      	beq.n	8004774 <main+0x4c0>
					{
						SIM_Send_Command_DMA((char*)tcp_chunk);
 80046fe:	4815      	ldr	r0, [pc, #84]	@ (8004754 <main+0x4a0>)
 8004700:	f7fd fa2e 	bl	8001b60 <SIM_Send_Command_DMA>
						flags.Measure_ReadytoSend = 0;
 8004704:	4a05      	ldr	r2, [pc, #20]	@ (800471c <main+0x468>)
 8004706:	7853      	ldrb	r3, [r2, #1]
 8004708:	f023 0302 	bic.w	r3, r3, #2
 800470c:	7053      	strb	r3, [r2, #1]
						if (Send_Measure_Addr == (uint32_t)-1)
 800470e:	4b10      	ldr	r3, [pc, #64]	@ (8004750 <main+0x49c>)
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004716:	d12d      	bne.n	8004774 <main+0x4c0>
 8004718:	e01e      	b.n	8004758 <main+0x4a4>
 800471a:	bf00      	nop
 800471c:	20001780 	.word	0x20001780
 8004720:	20001610 	.word	0x20001610
 8004724:	200005d8 	.word	0x200005d8
 8004728:	200005d4 	.word	0x200005d4
 800472c:	20001784 	.word	0x20001784
 8004730:	200041b0 	.word	0x200041b0
 8004734:	200041b4 	.word	0x200041b4
 8004738:	200041b8 	.word	0x200041b8
 800473c:	200041c2 	.word	0x200041c2
 8004740:	200038e0 	.word	0x200038e0
 8004744:	200041c0 	.word	0x200041c0
 8004748:	08017940 	.word	0x08017940
 800474c:	200041c4 	.word	0x200041c4
 8004750:	20004968 	.word	0x20004968
 8004754:	2000496c 	.word	0x2000496c
						{
							  memset(tcp_chunk, 0, 1460);
 8004758:	f240 52b4 	movw	r2, #1460	@ 0x5b4
 800475c:	2100      	movs	r1, #0
 800475e:	4877      	ldr	r0, [pc, #476]	@ (800493c <main+0x688>)
 8004760:	f011 fe98 	bl	8016494 <memset>
							  LED_Stop(RED_LED);
 8004764:	2004      	movs	r0, #4
 8004766:	f7ff f907 	bl	8003978 <LED_Stop>
							  flags.CMD.Measure_Request = 0;
 800476a:	4a75      	ldr	r2, [pc, #468]	@ (8004940 <main+0x68c>)
 800476c:	7893      	ldrb	r3, [r2, #2]
 800476e:	f023 0302 	bic.w	r3, r3, #2
 8004772:	7093      	strb	r3, [r2, #2]
						}
					}
				}
				if(sys.SIM_Prompt_Status > 0 && (HAL_GetTick() - sys.SIM_Prompt_Status) > SIM_PROMPT_TIMEOUT_MS)
 8004774:	4b73      	ldr	r3, [pc, #460]	@ (8004944 <main+0x690>)
 8004776:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800477a:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 800477e:	2b00      	cmp	r3, #0
 8004780:	d013      	beq.n	80047aa <main+0x4f6>
 8004782:	f006 fdbf 	bl	800b304 <HAL_GetTick>
 8004786:	4602      	mov	r2, r0
 8004788:	4b6e      	ldr	r3, [pc, #440]	@ (8004944 <main+0x690>)
 800478a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800478e:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8004792:	1ad3      	subs	r3, r2, r3
 8004794:	f640 32b8 	movw	r2, #3000	@ 0xbb8
 8004798:	4293      	cmp	r3, r2
 800479a:	d906      	bls.n	80047aa <main+0x4f6>
				{
					sys.SIM_Prompt_Status = 0;
 800479c:	4b69      	ldr	r3, [pc, #420]	@ (8004944 <main+0x690>)
 800479e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80047a2:	461a      	mov	r2, r3
 80047a4:	2300      	movs	r3, #0
 80047a6:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
				}
				if(HAL_GetTick() - sys.SIM_Connection_Status > config.connection_timeout_ms)
 80047aa:	f006 fdab 	bl	800b304 <HAL_GetTick>
 80047ae:	4602      	mov	r2, r0
 80047b0:	4b64      	ldr	r3, [pc, #400]	@ (8004944 <main+0x690>)
 80047b2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80047b6:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80047ba:	1ad2      	subs	r2, r2, r3
 80047bc:	4b62      	ldr	r3, [pc, #392]	@ (8004948 <main+0x694>)
 80047be:	689b      	ldr	r3, [r3, #8]
 80047c0:	429a      	cmp	r2, r3
 80047c2:	f240 80b8 	bls.w	8004936 <main+0x682>
				{
					sys.SIM_Connection_Status = HAL_GetTick();
 80047c6:	f006 fd9d 	bl	800b304 <HAL_GetTick>
 80047ca:	4603      	mov	r3, r0
 80047cc:	4a5d      	ldr	r2, [pc, #372]	@ (8004944 <main+0x690>)
 80047ce:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80047d2:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
					if(flags.SIM_isConnected)
 80047d6:	4b5a      	ldr	r3, [pc, #360]	@ (8004940 <main+0x68c>)
 80047d8:	785b      	ldrb	r3, [r3, #1]
 80047da:	f003 0310 	and.w	r3, r3, #16
 80047de:	b2db      	uxtb	r3, r3
 80047e0:	2b00      	cmp	r3, #0
 80047e2:	d005      	beq.n	80047f0 <main+0x53c>
					{
						flags.SIM_isConnected = 0;
 80047e4:	4a56      	ldr	r2, [pc, #344]	@ (8004940 <main+0x68c>)
 80047e6:	7853      	ldrb	r3, [r2, #1]
 80047e8:	f023 0310 	bic.w	r3, r3, #16
 80047ec:	7053      	strb	r3, [r2, #1]
						flags.Meas_TransferInProgress = 0;
						flags.CMD.Idle = 1;
					}
				}
			}
			break;
 80047ee:	e0a2      	b.n	8004936 <main+0x682>
						flags.Log_TransferInProgress = 0;
 80047f0:	4a53      	ldr	r2, [pc, #332]	@ (8004940 <main+0x68c>)
 80047f2:	7853      	ldrb	r3, [r2, #1]
 80047f4:	f023 0308 	bic.w	r3, r3, #8
 80047f8:	7053      	strb	r3, [r2, #1]
						flags.Meas_TransferInProgress = 0;
 80047fa:	4a51      	ldr	r2, [pc, #324]	@ (8004940 <main+0x68c>)
 80047fc:	7853      	ldrb	r3, [r2, #1]
 80047fe:	f023 0304 	bic.w	r3, r3, #4
 8004802:	7053      	strb	r3, [r2, #1]
						flags.CMD.Idle = 1;
 8004804:	4a4e      	ldr	r2, [pc, #312]	@ (8004940 <main+0x68c>)
 8004806:	7893      	ldrb	r3, [r2, #2]
 8004808:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800480c:	7093      	strb	r3, [r2, #2]
			break;
 800480e:	e092      	b.n	8004936 <main+0x682>

		case OTA_STATE:
			if(OTA_Init() == HAL_OK)
 8004810:	f000 fe6e 	bl	80054f0 <OTA_Init>
 8004814:	4603      	mov	r3, r0
 8004816:	2b00      	cmp	r3, #0
 8004818:	d171      	bne.n	80048fe <main+0x64a>
			{
				HAL_UART_DMAStop(SIM_UART);
 800481a:	484c      	ldr	r0, [pc, #304]	@ (800494c <main+0x698>)
 800481c:	f010 fc60 	bl	80150e0 <HAL_UART_DMAStop>
				memset(sim_rx_buffer, 0, sizeof(sim_rx_buffer));
 8004820:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 8004824:	2100      	movs	r1, #0
 8004826:	484a      	ldr	r0, [pc, #296]	@ (8004950 <main+0x69c>)
 8004828:	f011 fe34 	bl	8016494 <memset>

				SIM_Send_TCP("R:OTA_READY");
 800482c:	4849      	ldr	r0, [pc, #292]	@ (8004954 <main+0x6a0>)
 800482e:	f7fd fc09 	bl	8002044 <SIM_Send_TCP>
				if(OTA_Receive() == HAL_OK)
 8004832:	f000 fe89 	bl	8005548 <OTA_Receive>
 8004836:	4603      	mov	r3, r0
 8004838:	2b00      	cmp	r3, #0
 800483a:	d148      	bne.n	80048ce <main+0x61a>
				{
					SIM_Send_TCP("R:OTA_RECEIVED");
 800483c:	4846      	ldr	r0, [pc, #280]	@ (8004958 <main+0x6a4>)
 800483e:	f7fd fc01 	bl	8002044 <SIM_Send_TCP>
					if(OTA_CRC_Check() == HAL_OK)
 8004842:	f000 ff05 	bl	8005650 <OTA_CRC_Check>
 8004846:	4603      	mov	r3, r0
 8004848:	2b00      	cmp	r3, #0
 800484a:	d128      	bne.n	800489e <main+0x5ea>
					{
						SIM_Send_TCP("R:OTA_CRC_OK");
 800484c:	4843      	ldr	r0, [pc, #268]	@ (800495c <main+0x6a8>)
 800484e:	f7fd fbf9 	bl	8002044 <SIM_Send_TCP>
						if(OTA_Apply() == HAL_OK)
 8004852:	f000 ffb1 	bl	80057b8 <OTA_Apply>
 8004856:	4603      	mov	r3, r0
 8004858:	2b00      	cmp	r3, #0
 800485a:	d108      	bne.n	800486e <main+0x5ba>
						{
							SIM_Send_TCP("R:OTA_SUCCESS");
 800485c:	4840      	ldr	r0, [pc, #256]	@ (8004960 <main+0x6ac>)
 800485e:	f7fd fbf1 	bl	8002044 <SIM_Send_TCP>
							HAL_Delay(500);
 8004862:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8004866:	f006 fd59 	bl	800b31c <HAL_Delay>
							NVIC_SystemReset();
 800486a:	f7ff fd0d 	bl	8004288 <__NVIC_SystemReset>
						}
						else
						{
							SIM_Send_TCP("R:OTA_APPLY_ERROR");
 800486e:	483d      	ldr	r0, [pc, #244]	@ (8004964 <main+0x6b0>)
 8004870:	f7fd fbe8 	bl	8002044 <SIM_Send_TCP>
							HAL_UARTEx_ReceiveToIdle_DMA(SIM_UART, (uint8_t *)sim_rx_buffer, SIM_RXBUFFER_SIZE);
 8004874:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 8004878:	4935      	ldr	r1, [pc, #212]	@ (8004950 <main+0x69c>)
 800487a:	4834      	ldr	r0, [pc, #208]	@ (800494c <main+0x698>)
 800487c:	f011 fccc 	bl	8016218 <HAL_UARTEx_ReceiveToIdle_DMA>
							LED_Stop(ORG_LED);
 8004880:	2000      	movs	r0, #0
 8004882:	f7ff f879 	bl	8003978 <LED_Stop>
							LED_Stop(RED_LED);
 8004886:	2004      	movs	r0, #4
 8004888:	f7ff f876 	bl	8003978 <LED_Stop>
							LED_Start(GRN_LED, MEDIUM, HALF);
 800488c:	2206      	movs	r2, #6
 800488e:	2101      	movs	r1, #1
 8004890:	2008      	movs	r0, #8
 8004892:	f7fe ffa5 	bl	80037e0 <LED_Start>
							state = IDLE;
 8004896:	4b34      	ldr	r3, [pc, #208]	@ (8004968 <main+0x6b4>)
 8004898:	2200      	movs	r2, #0
 800489a:	701a      	strb	r2, [r3, #0]
				LED_Stop(ORG_LED);
				LED_Stop(RED_LED);
				LED_Start(GRN_LED, MEDIUM, HALF);
				state = IDLE;
			}
			break;
 800489c:	e04c      	b.n	8004938 <main+0x684>
						SIM_Send_TCP("R:OTA_CRC_ERROR");
 800489e:	4833      	ldr	r0, [pc, #204]	@ (800496c <main+0x6b8>)
 80048a0:	f7fd fbd0 	bl	8002044 <SIM_Send_TCP>
						HAL_UARTEx_ReceiveToIdle_DMA(SIM_UART, (uint8_t *)sim_rx_buffer, SIM_RXBUFFER_SIZE);
 80048a4:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 80048a8:	4929      	ldr	r1, [pc, #164]	@ (8004950 <main+0x69c>)
 80048aa:	4828      	ldr	r0, [pc, #160]	@ (800494c <main+0x698>)
 80048ac:	f011 fcb4 	bl	8016218 <HAL_UARTEx_ReceiveToIdle_DMA>
						LED_Stop(ORG_LED);
 80048b0:	2000      	movs	r0, #0
 80048b2:	f7ff f861 	bl	8003978 <LED_Stop>
						LED_Stop(RED_LED);
 80048b6:	2004      	movs	r0, #4
 80048b8:	f7ff f85e 	bl	8003978 <LED_Stop>
						LED_Start(GRN_LED, MEDIUM, HALF);
 80048bc:	2206      	movs	r2, #6
 80048be:	2101      	movs	r1, #1
 80048c0:	2008      	movs	r0, #8
 80048c2:	f7fe ff8d 	bl	80037e0 <LED_Start>
						state = IDLE;
 80048c6:	4b28      	ldr	r3, [pc, #160]	@ (8004968 <main+0x6b4>)
 80048c8:	2200      	movs	r2, #0
 80048ca:	701a      	strb	r2, [r3, #0]
						break;
 80048cc:	e034      	b.n	8004938 <main+0x684>
					SIM_Send_TCP("R:OTA_RECEIVE_ERROR");
 80048ce:	4828      	ldr	r0, [pc, #160]	@ (8004970 <main+0x6bc>)
 80048d0:	f7fd fbb8 	bl	8002044 <SIM_Send_TCP>
					HAL_UARTEx_ReceiveToIdle_DMA(SIM_UART, (uint8_t *)sim_rx_buffer, SIM_RXBUFFER_SIZE);
 80048d4:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 80048d8:	491d      	ldr	r1, [pc, #116]	@ (8004950 <main+0x69c>)
 80048da:	481c      	ldr	r0, [pc, #112]	@ (800494c <main+0x698>)
 80048dc:	f011 fc9c 	bl	8016218 <HAL_UARTEx_ReceiveToIdle_DMA>
					LED_Stop(ORG_LED);
 80048e0:	2000      	movs	r0, #0
 80048e2:	f7ff f849 	bl	8003978 <LED_Stop>
					LED_Stop(RED_LED);
 80048e6:	2004      	movs	r0, #4
 80048e8:	f7ff f846 	bl	8003978 <LED_Stop>
					LED_Start(GRN_LED, MEDIUM, HALF);
 80048ec:	2206      	movs	r2, #6
 80048ee:	2101      	movs	r1, #1
 80048f0:	2008      	movs	r0, #8
 80048f2:	f7fe ff75 	bl	80037e0 <LED_Start>
					state = IDLE;
 80048f6:	4b1c      	ldr	r3, [pc, #112]	@ (8004968 <main+0x6b4>)
 80048f8:	2200      	movs	r2, #0
 80048fa:	701a      	strb	r2, [r3, #0]
			break;
 80048fc:	e01c      	b.n	8004938 <main+0x684>
				SIM_Send_TCP("R:OTA_INIT_ERROR");
 80048fe:	481d      	ldr	r0, [pc, #116]	@ (8004974 <main+0x6c0>)
 8004900:	f7fd fba0 	bl	8002044 <SIM_Send_TCP>
				HAL_UARTEx_ReceiveToIdle_DMA(SIM_UART, (uint8_t *)sim_rx_buffer, SIM_RXBUFFER_SIZE);
 8004904:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 8004908:	4911      	ldr	r1, [pc, #68]	@ (8004950 <main+0x69c>)
 800490a:	4810      	ldr	r0, [pc, #64]	@ (800494c <main+0x698>)
 800490c:	f011 fc84 	bl	8016218 <HAL_UARTEx_ReceiveToIdle_DMA>
				LED_Stop(ORG_LED);
 8004910:	2000      	movs	r0, #0
 8004912:	f7ff f831 	bl	8003978 <LED_Stop>
				LED_Stop(RED_LED);
 8004916:	2004      	movs	r0, #4
 8004918:	f7ff f82e 	bl	8003978 <LED_Stop>
				LED_Start(GRN_LED, MEDIUM, HALF);
 800491c:	2206      	movs	r2, #6
 800491e:	2101      	movs	r1, #1
 8004920:	2008      	movs	r0, #8
 8004922:	f7fe ff5d 	bl	80037e0 <LED_Start>
				state = IDLE;
 8004926:	4b10      	ldr	r3, [pc, #64]	@ (8004968 <main+0x6b4>)
 8004928:	2200      	movs	r2, #0
 800492a:	701a      	strb	r2, [r3, #0]
			break;
 800492c:	e004      	b.n	8004938 <main+0x684>

		default:
			break;
 800492e:	bf00      	nop
 8004930:	e4e7      	b.n	8004302 <main+0x4e>
			break;
 8004932:	bf00      	nop
 8004934:	e4e5      	b.n	8004302 <main+0x4e>
			break;
 8004936:	bf00      	nop
		switch(state)
 8004938:	e4e3      	b.n	8004302 <main+0x4e>
 800493a:	bf00      	nop
 800493c:	2000496c 	.word	0x2000496c
 8004940:	20001780 	.word	0x20001780
 8004944:	200005d8 	.word	0x200005d8
 8004948:	20001784 	.word	0x20001784
 800494c:	200004bc 	.word	0x200004bc
 8004950:	20004f94 	.word	0x20004f94
 8004954:	08017970 	.word	0x08017970
 8004958:	0801797c 	.word	0x0801797c
 800495c:	0801798c 	.word	0x0801798c
 8004960:	0801799c 	.word	0x0801799c
 8004964:	080179ac 	.word	0x080179ac
 8004968:	200005d4 	.word	0x200005d4
 800496c:	080179c0 	.word	0x080179c0
 8004970:	080179d0 	.word	0x080179d0
 8004974:	080179e4 	.word	0x080179e4

08004978 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8004978:	b580      	push	{r7, lr}
 800497a:	b096      	sub	sp, #88	@ 0x58
 800497c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800497e:	f107 0314 	add.w	r3, r7, #20
 8004982:	2244      	movs	r2, #68	@ 0x44
 8004984:	2100      	movs	r1, #0
 8004986:	4618      	mov	r0, r3
 8004988:	f011 fd84 	bl	8016494 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800498c:	463b      	mov	r3, r7
 800498e:	2200      	movs	r2, #0
 8004990:	601a      	str	r2, [r3, #0]
 8004992:	605a      	str	r2, [r3, #4]
 8004994:	609a      	str	r2, [r3, #8]
 8004996:	60da      	str	r2, [r3, #12]
 8004998:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800499a:	f44f 7000 	mov.w	r0, #512	@ 0x200
 800499e:	f00a fcb5 	bl	800f30c <HAL_PWREx_ControlVoltageScaling>
 80049a2:	4603      	mov	r3, r0
 80049a4:	2b00      	cmp	r3, #0
 80049a6:	d001      	beq.n	80049ac <SystemClock_Config+0x34>
  {
    Error_Handler();
 80049a8:	f000 fd9c 	bl	80054e4 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 80049ac:	2309      	movs	r3, #9
 80049ae:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80049b0:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80049b4:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 80049b6:	2301      	movs	r3, #1
 80049b8:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80049ba:	2302      	movs	r3, #2
 80049bc:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80049be:	2303      	movs	r3, #3
 80049c0:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 80049c2:	2301      	movs	r3, #1
 80049c4:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 20;
 80049c6:	2314      	movs	r3, #20
 80049c8:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80049ca:	2307      	movs	r3, #7
 80049cc:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80049ce:	2302      	movs	r3, #2
 80049d0:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80049d2:	2302      	movs	r3, #2
 80049d4:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80049d6:	f107 0314 	add.w	r3, r7, #20
 80049da:	4618      	mov	r0, r3
 80049dc:	f00b f94e 	bl	800fc7c <HAL_RCC_OscConfig>
 80049e0:	4603      	mov	r3, r0
 80049e2:	2b00      	cmp	r3, #0
 80049e4:	d001      	beq.n	80049ea <SystemClock_Config+0x72>
  {
    Error_Handler();
 80049e6:	f000 fd7d 	bl	80054e4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80049ea:	230f      	movs	r3, #15
 80049ec:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80049ee:	2303      	movs	r3, #3
 80049f0:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80049f2:	2300      	movs	r3, #0
 80049f4:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80049f6:	2300      	movs	r3, #0
 80049f8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80049fa:	2300      	movs	r3, #0
 80049fc:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80049fe:	463b      	mov	r3, r7
 8004a00:	2104      	movs	r1, #4
 8004a02:	4618      	mov	r0, r3
 8004a04:	f00b fd16 	bl	8010434 <HAL_RCC_ClockConfig>
 8004a08:	4603      	mov	r3, r0
 8004a0a:	2b00      	cmp	r3, #0
 8004a0c:	d001      	beq.n	8004a12 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8004a0e:	f000 fd69 	bl	80054e4 <Error_Handler>
  }
}
 8004a12:	bf00      	nop
 8004a14:	3758      	adds	r7, #88	@ 0x58
 8004a16:	46bd      	mov	sp, r7
 8004a18:	bd80      	pop	{r7, pc}
	...

08004a1c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8004a1c:	b580      	push	{r7, lr}
 8004a1e:	b08a      	sub	sp, #40	@ 0x28
 8004a20:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8004a22:	f107 031c 	add.w	r3, r7, #28
 8004a26:	2200      	movs	r2, #0
 8004a28:	601a      	str	r2, [r3, #0]
 8004a2a:	605a      	str	r2, [r3, #4]
 8004a2c:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8004a2e:	1d3b      	adds	r3, r7, #4
 8004a30:	2200      	movs	r2, #0
 8004a32:	601a      	str	r2, [r3, #0]
 8004a34:	605a      	str	r2, [r3, #4]
 8004a36:	609a      	str	r2, [r3, #8]
 8004a38:	60da      	str	r2, [r3, #12]
 8004a3a:	611a      	str	r2, [r3, #16]
 8004a3c:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8004a3e:	4b30      	ldr	r3, [pc, #192]	@ (8004b00 <MX_ADC1_Init+0xe4>)
 8004a40:	4a30      	ldr	r2, [pc, #192]	@ (8004b04 <MX_ADC1_Init+0xe8>)
 8004a42:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8004a44:	4b2e      	ldr	r3, [pc, #184]	@ (8004b00 <MX_ADC1_Init+0xe4>)
 8004a46:	2200      	movs	r2, #0
 8004a48:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8004a4a:	4b2d      	ldr	r3, [pc, #180]	@ (8004b00 <MX_ADC1_Init+0xe4>)
 8004a4c:	2200      	movs	r2, #0
 8004a4e:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8004a50:	4b2b      	ldr	r3, [pc, #172]	@ (8004b00 <MX_ADC1_Init+0xe4>)
 8004a52:	2200      	movs	r2, #0
 8004a54:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8004a56:	4b2a      	ldr	r3, [pc, #168]	@ (8004b00 <MX_ADC1_Init+0xe4>)
 8004a58:	2200      	movs	r2, #0
 8004a5a:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8004a5c:	4b28      	ldr	r3, [pc, #160]	@ (8004b00 <MX_ADC1_Init+0xe4>)
 8004a5e:	2208      	movs	r2, #8
 8004a60:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8004a62:	4b27      	ldr	r3, [pc, #156]	@ (8004b00 <MX_ADC1_Init+0xe4>)
 8004a64:	2200      	movs	r2, #0
 8004a66:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8004a68:	4b25      	ldr	r3, [pc, #148]	@ (8004b00 <MX_ADC1_Init+0xe4>)
 8004a6a:	2200      	movs	r2, #0
 8004a6c:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 8004a6e:	4b24      	ldr	r3, [pc, #144]	@ (8004b00 <MX_ADC1_Init+0xe4>)
 8004a70:	2201      	movs	r2, #1
 8004a72:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8004a74:	4b22      	ldr	r3, [pc, #136]	@ (8004b00 <MX_ADC1_Init+0xe4>)
 8004a76:	2200      	movs	r2, #0
 8004a78:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T4_TRGO;
 8004a7c:	4b20      	ldr	r3, [pc, #128]	@ (8004b00 <MX_ADC1_Init+0xe4>)
 8004a7e:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 8004a82:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8004a84:	4b1e      	ldr	r3, [pc, #120]	@ (8004b00 <MX_ADC1_Init+0xe4>)
 8004a86:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8004a8a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8004a8c:	4b1c      	ldr	r3, [pc, #112]	@ (8004b00 <MX_ADC1_Init+0xe4>)
 8004a8e:	2201      	movs	r2, #1
 8004a90:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8004a94:	4b1a      	ldr	r3, [pc, #104]	@ (8004b00 <MX_ADC1_Init+0xe4>)
 8004a96:	2200      	movs	r2, #0
 8004a98:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8004a9a:	4b19      	ldr	r3, [pc, #100]	@ (8004b00 <MX_ADC1_Init+0xe4>)
 8004a9c:	2200      	movs	r2, #0
 8004a9e:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8004aa2:	4817      	ldr	r0, [pc, #92]	@ (8004b00 <MX_ADC1_Init+0xe4>)
 8004aa4:	f006 fe82 	bl	800b7ac <HAL_ADC_Init>
 8004aa8:	4603      	mov	r3, r0
 8004aaa:	2b00      	cmp	r3, #0
 8004aac:	d001      	beq.n	8004ab2 <MX_ADC1_Init+0x96>
  {
    Error_Handler();
 8004aae:	f000 fd19 	bl	80054e4 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8004ab2:	2300      	movs	r3, #0
 8004ab4:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8004ab6:	f107 031c 	add.w	r3, r7, #28
 8004aba:	4619      	mov	r1, r3
 8004abc:	4810      	ldr	r0, [pc, #64]	@ (8004b00 <MX_ADC1_Init+0xe4>)
 8004abe:	f007 ff3b 	bl	800c938 <HAL_ADCEx_MultiModeConfigChannel>
 8004ac2:	4603      	mov	r3, r0
 8004ac4:	2b00      	cmp	r3, #0
 8004ac6:	d001      	beq.n	8004acc <MX_ADC1_Init+0xb0>
  {
    Error_Handler();
 8004ac8:	f000 fd0c 	bl	80054e4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_9;
 8004acc:	4b0e      	ldr	r3, [pc, #56]	@ (8004b08 <MX_ADC1_Init+0xec>)
 8004ace:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8004ad0:	2306      	movs	r3, #6
 8004ad2:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8004ad4:	2300      	movs	r3, #0
 8004ad6:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8004ad8:	237f      	movs	r3, #127	@ 0x7f
 8004ada:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8004adc:	2304      	movs	r3, #4
 8004ade:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8004ae0:	2300      	movs	r3, #0
 8004ae2:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8004ae4:	1d3b      	adds	r3, r7, #4
 8004ae6:	4619      	mov	r1, r3
 8004ae8:	4805      	ldr	r0, [pc, #20]	@ (8004b00 <MX_ADC1_Init+0xe4>)
 8004aea:	f007 f8d7 	bl	800bc9c <HAL_ADC_ConfigChannel>
 8004aee:	4603      	mov	r3, r0
 8004af0:	2b00      	cmp	r3, #0
 8004af2:	d001      	beq.n	8004af8 <MX_ADC1_Init+0xdc>
  {
    Error_Handler();
 8004af4:	f000 fcf6 	bl	80054e4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8004af8:	bf00      	nop
 8004afa:	3728      	adds	r7, #40	@ 0x28
 8004afc:	46bd      	mov	sp, r7
 8004afe:	bd80      	pop	{r7, pc}
 8004b00:	200000b0 	.word	0x200000b0
 8004b04:	50040000 	.word	0x50040000
 8004b08:	25b00200 	.word	0x25b00200

08004b0c <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 8004b0c:	b580      	push	{r7, lr}
 8004b0e:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8004b10:	4b0d      	ldr	r3, [pc, #52]	@ (8004b48 <MX_CRC_Init+0x3c>)
 8004b12:	4a0e      	ldr	r2, [pc, #56]	@ (8004b4c <MX_CRC_Init+0x40>)
 8004b14:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 8004b16:	4b0c      	ldr	r3, [pc, #48]	@ (8004b48 <MX_CRC_Init+0x3c>)
 8004b18:	2200      	movs	r2, #0
 8004b1a:	711a      	strb	r2, [r3, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 8004b1c:	4b0a      	ldr	r3, [pc, #40]	@ (8004b48 <MX_CRC_Init+0x3c>)
 8004b1e:	2200      	movs	r2, #0
 8004b20:	715a      	strb	r2, [r3, #5]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 8004b22:	4b09      	ldr	r3, [pc, #36]	@ (8004b48 <MX_CRC_Init+0x3c>)
 8004b24:	2200      	movs	r2, #0
 8004b26:	615a      	str	r2, [r3, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 8004b28:	4b07      	ldr	r3, [pc, #28]	@ (8004b48 <MX_CRC_Init+0x3c>)
 8004b2a:	2200      	movs	r2, #0
 8004b2c:	619a      	str	r2, [r3, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 8004b2e:	4b06      	ldr	r3, [pc, #24]	@ (8004b48 <MX_CRC_Init+0x3c>)
 8004b30:	2201      	movs	r2, #1
 8004b32:	621a      	str	r2, [r3, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8004b34:	4804      	ldr	r0, [pc, #16]	@ (8004b48 <MX_CRC_Init+0x3c>)
 8004b36:	f008 f8db 	bl	800ccf0 <HAL_CRC_Init>
 8004b3a:	4603      	mov	r3, r0
 8004b3c:	2b00      	cmp	r3, #0
 8004b3e:	d001      	beq.n	8004b44 <MX_CRC_Init+0x38>
  {
    Error_Handler();
 8004b40:	f000 fcd0 	bl	80054e4 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 8004b44:	bf00      	nop
 8004b46:	bd80      	pop	{r7, pc}
 8004b48:	2000015c 	.word	0x2000015c
 8004b4c:	40023000 	.word	0x40023000

08004b50 <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 8004b50:	b580      	push	{r7, lr}
 8004b52:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8004b54:	4b1b      	ldr	r3, [pc, #108]	@ (8004bc4 <MX_I2C3_Init+0x74>)
 8004b56:	4a1c      	ldr	r2, [pc, #112]	@ (8004bc8 <MX_I2C3_Init+0x78>)
 8004b58:	601a      	str	r2, [r3, #0]
  hi2c3.Init.Timing = 0x10D19CE4;
 8004b5a:	4b1a      	ldr	r3, [pc, #104]	@ (8004bc4 <MX_I2C3_Init+0x74>)
 8004b5c:	4a1b      	ldr	r2, [pc, #108]	@ (8004bcc <MX_I2C3_Init+0x7c>)
 8004b5e:	605a      	str	r2, [r3, #4]
  hi2c3.Init.OwnAddress1 = 0;
 8004b60:	4b18      	ldr	r3, [pc, #96]	@ (8004bc4 <MX_I2C3_Init+0x74>)
 8004b62:	2200      	movs	r2, #0
 8004b64:	609a      	str	r2, [r3, #8]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8004b66:	4b17      	ldr	r3, [pc, #92]	@ (8004bc4 <MX_I2C3_Init+0x74>)
 8004b68:	2201      	movs	r2, #1
 8004b6a:	60da      	str	r2, [r3, #12]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8004b6c:	4b15      	ldr	r3, [pc, #84]	@ (8004bc4 <MX_I2C3_Init+0x74>)
 8004b6e:	2200      	movs	r2, #0
 8004b70:	611a      	str	r2, [r3, #16]
  hi2c3.Init.OwnAddress2 = 0;
 8004b72:	4b14      	ldr	r3, [pc, #80]	@ (8004bc4 <MX_I2C3_Init+0x74>)
 8004b74:	2200      	movs	r2, #0
 8004b76:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8004b78:	4b12      	ldr	r3, [pc, #72]	@ (8004bc4 <MX_I2C3_Init+0x74>)
 8004b7a:	2200      	movs	r2, #0
 8004b7c:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8004b7e:	4b11      	ldr	r3, [pc, #68]	@ (8004bc4 <MX_I2C3_Init+0x74>)
 8004b80:	2200      	movs	r2, #0
 8004b82:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8004b84:	4b0f      	ldr	r3, [pc, #60]	@ (8004bc4 <MX_I2C3_Init+0x74>)
 8004b86:	2200      	movs	r2, #0
 8004b88:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8004b8a:	480e      	ldr	r0, [pc, #56]	@ (8004bc4 <MX_I2C3_Init+0x74>)
 8004b8c:	f009 fdc8 	bl	800e720 <HAL_I2C_Init>
 8004b90:	4603      	mov	r3, r0
 8004b92:	2b00      	cmp	r3, #0
 8004b94:	d001      	beq.n	8004b9a <MX_I2C3_Init+0x4a>
  {
    Error_Handler();
 8004b96:	f000 fca5 	bl	80054e4 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8004b9a:	2100      	movs	r1, #0
 8004b9c:	4809      	ldr	r0, [pc, #36]	@ (8004bc4 <MX_I2C3_Init+0x74>)
 8004b9e:	f00a fb0f 	bl	800f1c0 <HAL_I2CEx_ConfigAnalogFilter>
 8004ba2:	4603      	mov	r3, r0
 8004ba4:	2b00      	cmp	r3, #0
 8004ba6:	d001      	beq.n	8004bac <MX_I2C3_Init+0x5c>
  {
    Error_Handler();
 8004ba8:	f000 fc9c 	bl	80054e4 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 8004bac:	2100      	movs	r1, #0
 8004bae:	4805      	ldr	r0, [pc, #20]	@ (8004bc4 <MX_I2C3_Init+0x74>)
 8004bb0:	f00a fb51 	bl	800f256 <HAL_I2CEx_ConfigDigitalFilter>
 8004bb4:	4603      	mov	r3, r0
 8004bb6:	2b00      	cmp	r3, #0
 8004bb8:	d001      	beq.n	8004bbe <MX_I2C3_Init+0x6e>
  {
    Error_Handler();
 8004bba:	f000 fc93 	bl	80054e4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8004bbe:	bf00      	nop
 8004bc0:	bd80      	pop	{r7, pc}
 8004bc2:	bf00      	nop
 8004bc4:	20000180 	.word	0x20000180
 8004bc8:	40005c00 	.word	0x40005c00
 8004bcc:	10d19ce4 	.word	0x10d19ce4

08004bd0 <MX_QUADSPI_Init>:
  * @brief QUADSPI Initialization Function
  * @param None
  * @retval None
  */
static void MX_QUADSPI_Init(void)
{
 8004bd0:	b580      	push	{r7, lr}
 8004bd2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN QUADSPI_Init 1 */

  /* USER CODE END QUADSPI_Init 1 */
  /* QUADSPI parameter configuration*/
  hqspi.Instance = QUADSPI;
 8004bd4:	4b0f      	ldr	r3, [pc, #60]	@ (8004c14 <MX_QUADSPI_Init+0x44>)
 8004bd6:	4a10      	ldr	r2, [pc, #64]	@ (8004c18 <MX_QUADSPI_Init+0x48>)
 8004bd8:	601a      	str	r2, [r3, #0]
  hqspi.Init.ClockPrescaler = 1;
 8004bda:	4b0e      	ldr	r3, [pc, #56]	@ (8004c14 <MX_QUADSPI_Init+0x44>)
 8004bdc:	2201      	movs	r2, #1
 8004bde:	605a      	str	r2, [r3, #4]
  hqspi.Init.FifoThreshold = 1;
 8004be0:	4b0c      	ldr	r3, [pc, #48]	@ (8004c14 <MX_QUADSPI_Init+0x44>)
 8004be2:	2201      	movs	r2, #1
 8004be4:	609a      	str	r2, [r3, #8]
  hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_NONE;
 8004be6:	4b0b      	ldr	r3, [pc, #44]	@ (8004c14 <MX_QUADSPI_Init+0x44>)
 8004be8:	2200      	movs	r2, #0
 8004bea:	60da      	str	r2, [r3, #12]
  hqspi.Init.FlashSize = 24;
 8004bec:	4b09      	ldr	r3, [pc, #36]	@ (8004c14 <MX_QUADSPI_Init+0x44>)
 8004bee:	2218      	movs	r2, #24
 8004bf0:	611a      	str	r2, [r3, #16]
  hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_1_CYCLE;
 8004bf2:	4b08      	ldr	r3, [pc, #32]	@ (8004c14 <MX_QUADSPI_Init+0x44>)
 8004bf4:	2200      	movs	r2, #0
 8004bf6:	615a      	str	r2, [r3, #20]
  hqspi.Init.ClockMode = QSPI_CLOCK_MODE_0;
 8004bf8:	4b06      	ldr	r3, [pc, #24]	@ (8004c14 <MX_QUADSPI_Init+0x44>)
 8004bfa:	2200      	movs	r2, #0
 8004bfc:	619a      	str	r2, [r3, #24]
  if (HAL_QSPI_Init(&hqspi) != HAL_OK)
 8004bfe:	4805      	ldr	r0, [pc, #20]	@ (8004c14 <MX_QUADSPI_Init+0x44>)
 8004c00:	f00a fbda 	bl	800f3b8 <HAL_QSPI_Init>
 8004c04:	4603      	mov	r3, r0
 8004c06:	2b00      	cmp	r3, #0
 8004c08:	d001      	beq.n	8004c0e <MX_QUADSPI_Init+0x3e>
  {
    Error_Handler();
 8004c0a:	f000 fc6b 	bl	80054e4 <Error_Handler>
  }
  /* USER CODE BEGIN QUADSPI_Init 2 */

  /* USER CODE END QUADSPI_Init 2 */

}
 8004c0e:	bf00      	nop
 8004c10:	bd80      	pop	{r7, pc}
 8004c12:	bf00      	nop
 8004c14:	200001d4 	.word	0x200001d4
 8004c18:	a0001000 	.word	0xa0001000

08004c1c <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8004c1c:	b580      	push	{r7, lr}
 8004c1e:	b092      	sub	sp, #72	@ 0x48
 8004c20:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8004c22:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8004c26:	2200      	movs	r2, #0
 8004c28:	601a      	str	r2, [r3, #0]
 8004c2a:	605a      	str	r2, [r3, #4]
 8004c2c:	609a      	str	r2, [r3, #8]
 8004c2e:	60da      	str	r2, [r3, #12]
 8004c30:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 8004c32:	2300      	movs	r3, #0
 8004c34:	633b      	str	r3, [r7, #48]	@ 0x30
  RTC_AlarmTypeDef sAlarm = {0};
 8004c36:	1d3b      	adds	r3, r7, #4
 8004c38:	222c      	movs	r2, #44	@ 0x2c
 8004c3a:	2100      	movs	r1, #0
 8004c3c:	4618      	mov	r0, r3
 8004c3e:	f011 fc29 	bl	8016494 <memset>

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8004c42:	4b3c      	ldr	r3, [pc, #240]	@ (8004d34 <MX_RTC_Init+0x118>)
 8004c44:	4a3c      	ldr	r2, [pc, #240]	@ (8004d38 <MX_RTC_Init+0x11c>)
 8004c46:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8004c48:	4b3a      	ldr	r3, [pc, #232]	@ (8004d34 <MX_RTC_Init+0x118>)
 8004c4a:	2200      	movs	r2, #0
 8004c4c:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8004c4e:	4b39      	ldr	r3, [pc, #228]	@ (8004d34 <MX_RTC_Init+0x118>)
 8004c50:	227f      	movs	r2, #127	@ 0x7f
 8004c52:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8004c54:	4b37      	ldr	r3, [pc, #220]	@ (8004d34 <MX_RTC_Init+0x118>)
 8004c56:	22ff      	movs	r2, #255	@ 0xff
 8004c58:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8004c5a:	4b36      	ldr	r3, [pc, #216]	@ (8004d34 <MX_RTC_Init+0x118>)
 8004c5c:	2200      	movs	r2, #0
 8004c5e:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8004c60:	4b34      	ldr	r3, [pc, #208]	@ (8004d34 <MX_RTC_Init+0x118>)
 8004c62:	2200      	movs	r2, #0
 8004c64:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8004c66:	4b33      	ldr	r3, [pc, #204]	@ (8004d34 <MX_RTC_Init+0x118>)
 8004c68:	2200      	movs	r2, #0
 8004c6a:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8004c6c:	4b31      	ldr	r3, [pc, #196]	@ (8004d34 <MX_RTC_Init+0x118>)
 8004c6e:	2200      	movs	r2, #0
 8004c70:	61da      	str	r2, [r3, #28]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8004c72:	4830      	ldr	r0, [pc, #192]	@ (8004d34 <MX_RTC_Init+0x118>)
 8004c74:	f00c fabe 	bl	80111f4 <HAL_RTC_Init>
 8004c78:	4603      	mov	r3, r0
 8004c7a:	2b00      	cmp	r3, #0
 8004c7c:	d001      	beq.n	8004c82 <MX_RTC_Init+0x66>
  {
    Error_Handler();
 8004c7e:	f000 fc31 	bl	80054e4 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0;
 8004c82:	2300      	movs	r3, #0
 8004c84:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
  sTime.Minutes = 0;
 8004c88:	2300      	movs	r3, #0
 8004c8a:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
  sTime.Seconds = 0;
 8004c8e:	2300      	movs	r3, #0
 8004c90:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8004c94:	2300      	movs	r3, #0
 8004c96:	643b      	str	r3, [r7, #64]	@ 0x40
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8004c98:	2300      	movs	r3, #0
 8004c9a:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK)
 8004c9c:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8004ca0:	2200      	movs	r2, #0
 8004ca2:	4619      	mov	r1, r3
 8004ca4:	4823      	ldr	r0, [pc, #140]	@ (8004d34 <MX_RTC_Init+0x118>)
 8004ca6:	f00c fb2d 	bl	8011304 <HAL_RTC_SetTime>
 8004caa:	4603      	mov	r3, r0
 8004cac:	2b00      	cmp	r3, #0
 8004cae:	d001      	beq.n	8004cb4 <MX_RTC_Init+0x98>
  {
    Error_Handler();
 8004cb0:	f000 fc18 	bl	80054e4 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8004cb4:	2301      	movs	r3, #1
 8004cb6:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
  sDate.Month = RTC_MONTH_JANUARY;
 8004cba:	2301      	movs	r3, #1
 8004cbc:	f887 3031 	strb.w	r3, [r7, #49]	@ 0x31
  sDate.Date = 1;
 8004cc0:	2301      	movs	r3, #1
 8004cc2:	f887 3032 	strb.w	r3, [r7, #50]	@ 0x32
  sDate.Year = 0;
 8004cc6:	2300      	movs	r3, #0
 8004cc8:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN) != HAL_OK)
 8004ccc:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8004cd0:	2200      	movs	r2, #0
 8004cd2:	4619      	mov	r1, r3
 8004cd4:	4817      	ldr	r0, [pc, #92]	@ (8004d34 <MX_RTC_Init+0x118>)
 8004cd6:	f00c fc0e 	bl	80114f6 <HAL_RTC_SetDate>
 8004cda:	4603      	mov	r3, r0
 8004cdc:	2b00      	cmp	r3, #0
 8004cde:	d001      	beq.n	8004ce4 <MX_RTC_Init+0xc8>
  {
    Error_Handler();
 8004ce0:	f000 fc00 	bl	80054e4 <Error_Handler>
  }

  /** Enable the Alarm A
  */
  sAlarm.AlarmTime.Hours = 0;
 8004ce4:	2300      	movs	r3, #0
 8004ce6:	713b      	strb	r3, [r7, #4]
  sAlarm.AlarmTime.Minutes = 0;
 8004ce8:	2300      	movs	r3, #0
 8004cea:	717b      	strb	r3, [r7, #5]
  sAlarm.AlarmTime.Seconds = 0;
 8004cec:	2300      	movs	r3, #0
 8004cee:	71bb      	strb	r3, [r7, #6]
  sAlarm.AlarmTime.SubSeconds = 0;
 8004cf0:	2300      	movs	r3, #0
 8004cf2:	60bb      	str	r3, [r7, #8]
  sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8004cf4:	2300      	movs	r3, #0
 8004cf6:	613b      	str	r3, [r7, #16]
  sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8004cf8:	2300      	movs	r3, #0
 8004cfa:	617b      	str	r3, [r7, #20]
  sAlarm.AlarmMask = RTC_ALARMMASK_DATEWEEKDAY|RTC_ALARMMASK_HOURS
 8004cfc:	4b0f      	ldr	r3, [pc, #60]	@ (8004d3c <MX_RTC_Init+0x120>)
 8004cfe:	61bb      	str	r3, [r7, #24]
                              |RTC_ALARMMASK_SECONDS;
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 8004d00:	2300      	movs	r3, #0
 8004d02:	623b      	str	r3, [r7, #32]
  sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 8004d04:	2300      	movs	r3, #0
 8004d06:	627b      	str	r3, [r7, #36]	@ 0x24
  sAlarm.AlarmDateWeekDay = 1;
 8004d08:	2301      	movs	r3, #1
 8004d0a:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
  sAlarm.Alarm = RTC_ALARM_A;
 8004d0e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8004d12:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BIN) != HAL_OK)
 8004d14:	1d3b      	adds	r3, r7, #4
 8004d16:	2200      	movs	r2, #0
 8004d18:	4619      	mov	r1, r3
 8004d1a:	4806      	ldr	r0, [pc, #24]	@ (8004d34 <MX_RTC_Init+0x118>)
 8004d1c:	f00c fc72 	bl	8011604 <HAL_RTC_SetAlarm_IT>
 8004d20:	4603      	mov	r3, r0
 8004d22:	2b00      	cmp	r3, #0
 8004d24:	d001      	beq.n	8004d2a <MX_RTC_Init+0x10e>
  {
    Error_Handler();
 8004d26:	f000 fbdd 	bl	80054e4 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8004d2a:	bf00      	nop
 8004d2c:	3748      	adds	r7, #72	@ 0x48
 8004d2e:	46bd      	mov	sp, r7
 8004d30:	bd80      	pop	{r7, pc}
 8004d32:	bf00      	nop
 8004d34:	20000218 	.word	0x20000218
 8004d38:	40002800 	.word	0x40002800
 8004d3c:	80800080 	.word	0x80800080

08004d40 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8004d40:	b580      	push	{r7, lr}
 8004d42:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8004d44:	4b1b      	ldr	r3, [pc, #108]	@ (8004db4 <MX_SPI2_Init+0x74>)
 8004d46:	4a1c      	ldr	r2, [pc, #112]	@ (8004db8 <MX_SPI2_Init+0x78>)
 8004d48:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8004d4a:	4b1a      	ldr	r3, [pc, #104]	@ (8004db4 <MX_SPI2_Init+0x74>)
 8004d4c:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8004d50:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8004d52:	4b18      	ldr	r3, [pc, #96]	@ (8004db4 <MX_SPI2_Init+0x74>)
 8004d54:	2200      	movs	r2, #0
 8004d56:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8004d58:	4b16      	ldr	r3, [pc, #88]	@ (8004db4 <MX_SPI2_Init+0x74>)
 8004d5a:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 8004d5e:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8004d60:	4b14      	ldr	r3, [pc, #80]	@ (8004db4 <MX_SPI2_Init+0x74>)
 8004d62:	2200      	movs	r2, #0
 8004d64:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8004d66:	4b13      	ldr	r3, [pc, #76]	@ (8004db4 <MX_SPI2_Init+0x74>)
 8004d68:	2200      	movs	r2, #0
 8004d6a:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8004d6c:	4b11      	ldr	r3, [pc, #68]	@ (8004db4 <MX_SPI2_Init+0x74>)
 8004d6e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004d72:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004d74:	4b0f      	ldr	r3, [pc, #60]	@ (8004db4 <MX_SPI2_Init+0x74>)
 8004d76:	2200      	movs	r2, #0
 8004d78:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8004d7a:	4b0e      	ldr	r3, [pc, #56]	@ (8004db4 <MX_SPI2_Init+0x74>)
 8004d7c:	2200      	movs	r2, #0
 8004d7e:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8004d80:	4b0c      	ldr	r3, [pc, #48]	@ (8004db4 <MX_SPI2_Init+0x74>)
 8004d82:	2200      	movs	r2, #0
 8004d84:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004d86:	4b0b      	ldr	r3, [pc, #44]	@ (8004db4 <MX_SPI2_Init+0x74>)
 8004d88:	2200      	movs	r2, #0
 8004d8a:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 7;
 8004d8c:	4b09      	ldr	r3, [pc, #36]	@ (8004db4 <MX_SPI2_Init+0x74>)
 8004d8e:	2207      	movs	r2, #7
 8004d90:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8004d92:	4b08      	ldr	r3, [pc, #32]	@ (8004db4 <MX_SPI2_Init+0x74>)
 8004d94:	2200      	movs	r2, #0
 8004d96:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8004d98:	4b06      	ldr	r3, [pc, #24]	@ (8004db4 <MX_SPI2_Init+0x74>)
 8004d9a:	2208      	movs	r2, #8
 8004d9c:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8004d9e:	4805      	ldr	r0, [pc, #20]	@ (8004db4 <MX_SPI2_Init+0x74>)
 8004da0:	f00c fe8c 	bl	8011abc <HAL_SPI_Init>
 8004da4:	4603      	mov	r3, r0
 8004da6:	2b00      	cmp	r3, #0
 8004da8:	d001      	beq.n	8004dae <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 8004daa:	f000 fb9b 	bl	80054e4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8004dae:	bf00      	nop
 8004db0:	bd80      	pop	{r7, pc}
 8004db2:	bf00      	nop
 8004db4:	2000023c 	.word	0x2000023c
 8004db8:	40003800 	.word	0x40003800

08004dbc <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 8004dbc:	b580      	push	{r7, lr}
 8004dbe:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 8004dc0:	4b1b      	ldr	r3, [pc, #108]	@ (8004e30 <MX_SPI3_Init+0x74>)
 8004dc2:	4a1c      	ldr	r2, [pc, #112]	@ (8004e34 <MX_SPI3_Init+0x78>)
 8004dc4:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8004dc6:	4b1a      	ldr	r3, [pc, #104]	@ (8004e30 <MX_SPI3_Init+0x74>)
 8004dc8:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8004dcc:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8004dce:	4b18      	ldr	r3, [pc, #96]	@ (8004e30 <MX_SPI3_Init+0x74>)
 8004dd0:	2200      	movs	r2, #0
 8004dd2:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8004dd4:	4b16      	ldr	r3, [pc, #88]	@ (8004e30 <MX_SPI3_Init+0x74>)
 8004dd6:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 8004dda:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8004ddc:	4b14      	ldr	r3, [pc, #80]	@ (8004e30 <MX_SPI3_Init+0x74>)
 8004dde:	2200      	movs	r2, #0
 8004de0:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8004de2:	4b13      	ldr	r3, [pc, #76]	@ (8004e30 <MX_SPI3_Init+0x74>)
 8004de4:	2200      	movs	r2, #0
 8004de6:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8004de8:	4b11      	ldr	r3, [pc, #68]	@ (8004e30 <MX_SPI3_Init+0x74>)
 8004dea:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004dee:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8004df0:	4b0f      	ldr	r3, [pc, #60]	@ (8004e30 <MX_SPI3_Init+0x74>)
 8004df2:	2218      	movs	r2, #24
 8004df4:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8004df6:	4b0e      	ldr	r3, [pc, #56]	@ (8004e30 <MX_SPI3_Init+0x74>)
 8004df8:	2200      	movs	r2, #0
 8004dfa:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8004dfc:	4b0c      	ldr	r3, [pc, #48]	@ (8004e30 <MX_SPI3_Init+0x74>)
 8004dfe:	2200      	movs	r2, #0
 8004e00:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004e02:	4b0b      	ldr	r3, [pc, #44]	@ (8004e30 <MX_SPI3_Init+0x74>)
 8004e04:	2200      	movs	r2, #0
 8004e06:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi3.Init.CRCPolynomial = 7;
 8004e08:	4b09      	ldr	r3, [pc, #36]	@ (8004e30 <MX_SPI3_Init+0x74>)
 8004e0a:	2207      	movs	r2, #7
 8004e0c:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8004e0e:	4b08      	ldr	r3, [pc, #32]	@ (8004e30 <MX_SPI3_Init+0x74>)
 8004e10:	2200      	movs	r2, #0
 8004e12:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8004e14:	4b06      	ldr	r3, [pc, #24]	@ (8004e30 <MX_SPI3_Init+0x74>)
 8004e16:	2208      	movs	r2, #8
 8004e18:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8004e1a:	4805      	ldr	r0, [pc, #20]	@ (8004e30 <MX_SPI3_Init+0x74>)
 8004e1c:	f00c fe4e 	bl	8011abc <HAL_SPI_Init>
 8004e20:	4603      	mov	r3, r0
 8004e22:	2b00      	cmp	r3, #0
 8004e24:	d001      	beq.n	8004e2a <MX_SPI3_Init+0x6e>
  {
    Error_Handler();
 8004e26:	f000 fb5d 	bl	80054e4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8004e2a:	bf00      	nop
 8004e2c:	bd80      	pop	{r7, pc}
 8004e2e:	bf00      	nop
 8004e30:	200002a0 	.word	0x200002a0
 8004e34:	40003c00 	.word	0x40003c00

08004e38 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8004e38:	b580      	push	{r7, lr}
 8004e3a:	b096      	sub	sp, #88	@ 0x58
 8004e3c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004e3e:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8004e42:	2200      	movs	r2, #0
 8004e44:	601a      	str	r2, [r3, #0]
 8004e46:	605a      	str	r2, [r3, #4]
 8004e48:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8004e4a:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8004e4e:	2200      	movs	r2, #0
 8004e50:	601a      	str	r2, [r3, #0]
 8004e52:	605a      	str	r2, [r3, #4]
 8004e54:	609a      	str	r2, [r3, #8]
 8004e56:	60da      	str	r2, [r3, #12]
 8004e58:	611a      	str	r2, [r3, #16]
 8004e5a:	615a      	str	r2, [r3, #20]
 8004e5c:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8004e5e:	1d3b      	adds	r3, r7, #4
 8004e60:	222c      	movs	r2, #44	@ 0x2c
 8004e62:	2100      	movs	r1, #0
 8004e64:	4618      	mov	r0, r3
 8004e66:	f011 fb15 	bl	8016494 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8004e6a:	4b45      	ldr	r3, [pc, #276]	@ (8004f80 <MX_TIM1_Init+0x148>)
 8004e6c:	4a45      	ldr	r2, [pc, #276]	@ (8004f84 <MX_TIM1_Init+0x14c>)
 8004e6e:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 1599;
 8004e70:	4b43      	ldr	r3, [pc, #268]	@ (8004f80 <MX_TIM1_Init+0x148>)
 8004e72:	f240 623f 	movw	r2, #1599	@ 0x63f
 8004e76:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004e78:	4b41      	ldr	r3, [pc, #260]	@ (8004f80 <MX_TIM1_Init+0x148>)
 8004e7a:	2200      	movs	r2, #0
 8004e7c:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 49999;
 8004e7e:	4b40      	ldr	r3, [pc, #256]	@ (8004f80 <MX_TIM1_Init+0x148>)
 8004e80:	f24c 324f 	movw	r2, #49999	@ 0xc34f
 8004e84:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004e86:	4b3e      	ldr	r3, [pc, #248]	@ (8004f80 <MX_TIM1_Init+0x148>)
 8004e88:	2200      	movs	r2, #0
 8004e8a:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8004e8c:	4b3c      	ldr	r3, [pc, #240]	@ (8004f80 <MX_TIM1_Init+0x148>)
 8004e8e:	2200      	movs	r2, #0
 8004e90:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004e92:	4b3b      	ldr	r3, [pc, #236]	@ (8004f80 <MX_TIM1_Init+0x148>)
 8004e94:	2200      	movs	r2, #0
 8004e96:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8004e98:	4839      	ldr	r0, [pc, #228]	@ (8004f80 <MX_TIM1_Init+0x148>)
 8004e9a:	f00e f82b 	bl	8012ef4 <HAL_TIM_PWM_Init>
 8004e9e:	4603      	mov	r3, r0
 8004ea0:	2b00      	cmp	r3, #0
 8004ea2:	d001      	beq.n	8004ea8 <MX_TIM1_Init+0x70>
  {
    Error_Handler();
 8004ea4:	f000 fb1e 	bl	80054e4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004ea8:	2300      	movs	r3, #0
 8004eaa:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8004eac:	2300      	movs	r3, #0
 8004eae:	653b      	str	r3, [r7, #80]	@ 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004eb0:	2300      	movs	r3, #0
 8004eb2:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8004eb4:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8004eb8:	4619      	mov	r1, r3
 8004eba:	4831      	ldr	r0, [pc, #196]	@ (8004f80 <MX_TIM1_Init+0x148>)
 8004ebc:	f00f fd98 	bl	80149f0 <HAL_TIMEx_MasterConfigSynchronization>
 8004ec0:	4603      	mov	r3, r0
 8004ec2:	2b00      	cmp	r3, #0
 8004ec4:	d001      	beq.n	8004eca <MX_TIM1_Init+0x92>
  {
    Error_Handler();
 8004ec6:	f000 fb0d 	bl	80054e4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8004eca:	2360      	movs	r3, #96	@ 0x60
 8004ecc:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.Pulse = 0;
 8004ece:	2300      	movs	r3, #0
 8004ed0:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8004ed2:	2300      	movs	r3, #0
 8004ed4:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8004ed6:	2300      	movs	r3, #0
 8004ed8:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8004eda:	2300      	movs	r3, #0
 8004edc:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8004ede:	2300      	movs	r3, #0
 8004ee0:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8004ee2:	2300      	movs	r3, #0
 8004ee4:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8004ee6:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8004eea:	2200      	movs	r2, #0
 8004eec:	4619      	mov	r1, r3
 8004eee:	4824      	ldr	r0, [pc, #144]	@ (8004f80 <MX_TIM1_Init+0x148>)
 8004ef0:	f00e fd6a 	bl	80139c8 <HAL_TIM_PWM_ConfigChannel>
 8004ef4:	4603      	mov	r3, r0
 8004ef6:	2b00      	cmp	r3, #0
 8004ef8:	d001      	beq.n	8004efe <MX_TIM1_Init+0xc6>
  {
    Error_Handler();
 8004efa:	f000 faf3 	bl	80054e4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8004efe:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8004f02:	2204      	movs	r2, #4
 8004f04:	4619      	mov	r1, r3
 8004f06:	481e      	ldr	r0, [pc, #120]	@ (8004f80 <MX_TIM1_Init+0x148>)
 8004f08:	f00e fd5e 	bl	80139c8 <HAL_TIM_PWM_ConfigChannel>
 8004f0c:	4603      	mov	r3, r0
 8004f0e:	2b00      	cmp	r3, #0
 8004f10:	d001      	beq.n	8004f16 <MX_TIM1_Init+0xde>
  {
    Error_Handler();
 8004f12:	f000 fae7 	bl	80054e4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8004f16:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8004f1a:	2208      	movs	r2, #8
 8004f1c:	4619      	mov	r1, r3
 8004f1e:	4818      	ldr	r0, [pc, #96]	@ (8004f80 <MX_TIM1_Init+0x148>)
 8004f20:	f00e fd52 	bl	80139c8 <HAL_TIM_PWM_ConfigChannel>
 8004f24:	4603      	mov	r3, r0
 8004f26:	2b00      	cmp	r3, #0
 8004f28:	d001      	beq.n	8004f2e <MX_TIM1_Init+0xf6>
  {
    Error_Handler();
 8004f2a:	f000 fadb 	bl	80054e4 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8004f2e:	2300      	movs	r3, #0
 8004f30:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8004f32:	2300      	movs	r3, #0
 8004f34:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8004f36:	2300      	movs	r3, #0
 8004f38:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8004f3a:	2300      	movs	r3, #0
 8004f3c:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8004f3e:	2300      	movs	r3, #0
 8004f40:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8004f42:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8004f46:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8004f48:	2300      	movs	r3, #0
 8004f4a:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8004f4c:	2300      	movs	r3, #0
 8004f4e:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8004f50:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8004f54:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8004f56:	2300      	movs	r3, #0
 8004f58:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8004f5a:	2300      	movs	r3, #0
 8004f5c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8004f5e:	1d3b      	adds	r3, r7, #4
 8004f60:	4619      	mov	r1, r3
 8004f62:	4807      	ldr	r0, [pc, #28]	@ (8004f80 <MX_TIM1_Init+0x148>)
 8004f64:	f00f fdcc 	bl	8014b00 <HAL_TIMEx_ConfigBreakDeadTime>
 8004f68:	4603      	mov	r3, r0
 8004f6a:	2b00      	cmp	r3, #0
 8004f6c:	d001      	beq.n	8004f72 <MX_TIM1_Init+0x13a>
  {
    Error_Handler();
 8004f6e:	f000 fab9 	bl	80054e4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8004f72:	4803      	ldr	r0, [pc, #12]	@ (8004f80 <MX_TIM1_Init+0x148>)
 8004f74:	f002 fea8 	bl	8007cc8 <HAL_TIM_MspPostInit>

}
 8004f78:	bf00      	nop
 8004f7a:	3758      	adds	r7, #88	@ 0x58
 8004f7c:	46bd      	mov	sp, r7
 8004f7e:	bd80      	pop	{r7, pc}
 8004f80:	20000304 	.word	0x20000304
 8004f84:	40012c00 	.word	0x40012c00

08004f88 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8004f88:	b580      	push	{r7, lr}
 8004f8a:	b088      	sub	sp, #32
 8004f8c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004f8e:	f107 0314 	add.w	r3, r7, #20
 8004f92:	2200      	movs	r2, #0
 8004f94:	601a      	str	r2, [r3, #0]
 8004f96:	605a      	str	r2, [r3, #4]
 8004f98:	609a      	str	r2, [r3, #8]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8004f9a:	1d3b      	adds	r3, r7, #4
 8004f9c:	2200      	movs	r2, #0
 8004f9e:	601a      	str	r2, [r3, #0]
 8004fa0:	605a      	str	r2, [r3, #4]
 8004fa2:	609a      	str	r2, [r3, #8]
 8004fa4:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8004fa6:	4b21      	ldr	r3, [pc, #132]	@ (800502c <MX_TIM2_Init+0xa4>)
 8004fa8:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8004fac:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8004fae:	4b1f      	ldr	r3, [pc, #124]	@ (800502c <MX_TIM2_Init+0xa4>)
 8004fb0:	2200      	movs	r2, #0
 8004fb2:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004fb4:	4b1d      	ldr	r3, [pc, #116]	@ (800502c <MX_TIM2_Init+0xa4>)
 8004fb6:	2200      	movs	r2, #0
 8004fb8:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8004fba:	4b1c      	ldr	r3, [pc, #112]	@ (800502c <MX_TIM2_Init+0xa4>)
 8004fbc:	f04f 32ff 	mov.w	r2, #4294967295
 8004fc0:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004fc2:	4b1a      	ldr	r3, [pc, #104]	@ (800502c <MX_TIM2_Init+0xa4>)
 8004fc4:	2200      	movs	r2, #0
 8004fc6:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004fc8:	4b18      	ldr	r3, [pc, #96]	@ (800502c <MX_TIM2_Init+0xa4>)
 8004fca:	2200      	movs	r2, #0
 8004fcc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 8004fce:	4817      	ldr	r0, [pc, #92]	@ (800502c <MX_TIM2_Init+0xa4>)
 8004fd0:	f00e f984 	bl	80132dc <HAL_TIM_IC_Init>
 8004fd4:	4603      	mov	r3, r0
 8004fd6:	2b00      	cmp	r3, #0
 8004fd8:	d001      	beq.n	8004fde <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8004fda:	f000 fa83 	bl	80054e4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004fde:	2300      	movs	r3, #0
 8004fe0:	617b      	str	r3, [r7, #20]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004fe2:	2300      	movs	r3, #0
 8004fe4:	61fb      	str	r3, [r7, #28]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8004fe6:	f107 0314 	add.w	r3, r7, #20
 8004fea:	4619      	mov	r1, r3
 8004fec:	480f      	ldr	r0, [pc, #60]	@ (800502c <MX_TIM2_Init+0xa4>)
 8004fee:	f00f fcff 	bl	80149f0 <HAL_TIMEx_MasterConfigSynchronization>
 8004ff2:	4603      	mov	r3, r0
 8004ff4:	2b00      	cmp	r3, #0
 8004ff6:	d001      	beq.n	8004ffc <MX_TIM2_Init+0x74>
  {
    Error_Handler();
 8004ff8:	f000 fa74 	bl	80054e4 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8004ffc:	2300      	movs	r3, #0
 8004ffe:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8005000:	2301      	movs	r3, #1
 8005002:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8005004:	2300      	movs	r3, #0
 8005006:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICFilter = 0;
 8005008:	2300      	movs	r3, #0
 800500a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 800500c:	1d3b      	adds	r3, r7, #4
 800500e:	2200      	movs	r2, #0
 8005010:	4619      	mov	r1, r3
 8005012:	4806      	ldr	r0, [pc, #24]	@ (800502c <MX_TIM2_Init+0xa4>)
 8005014:	f00e fc3c 	bl	8013890 <HAL_TIM_IC_ConfigChannel>
 8005018:	4603      	mov	r3, r0
 800501a:	2b00      	cmp	r3, #0
 800501c:	d001      	beq.n	8005022 <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 800501e:	f000 fa61 	bl	80054e4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8005022:	bf00      	nop
 8005024:	3720      	adds	r7, #32
 8005026:	46bd      	mov	sp, r7
 8005028:	bd80      	pop	{r7, pc}
 800502a:	bf00      	nop
 800502c:	20000350 	.word	0x20000350

08005030 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8005030:	b580      	push	{r7, lr}
 8005032:	b090      	sub	sp, #64	@ 0x40
 8005034:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8005036:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800503a:	2200      	movs	r2, #0
 800503c:	601a      	str	r2, [r3, #0]
 800503e:	605a      	str	r2, [r3, #4]
 8005040:	609a      	str	r2, [r3, #8]
 8005042:	60da      	str	r2, [r3, #12]
 8005044:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8005046:	f107 0320 	add.w	r3, r7, #32
 800504a:	2200      	movs	r2, #0
 800504c:	601a      	str	r2, [r3, #0]
 800504e:	605a      	str	r2, [r3, #4]
 8005050:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8005052:	1d3b      	adds	r3, r7, #4
 8005054:	2200      	movs	r2, #0
 8005056:	601a      	str	r2, [r3, #0]
 8005058:	605a      	str	r2, [r3, #4]
 800505a:	609a      	str	r2, [r3, #8]
 800505c:	60da      	str	r2, [r3, #12]
 800505e:	611a      	str	r2, [r3, #16]
 8005060:	615a      	str	r2, [r3, #20]
 8005062:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8005064:	4b2c      	ldr	r3, [pc, #176]	@ (8005118 <MX_TIM3_Init+0xe8>)
 8005066:	4a2d      	ldr	r2, [pc, #180]	@ (800511c <MX_TIM3_Init+0xec>)
 8005068:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 800506a:	4b2b      	ldr	r3, [pc, #172]	@ (8005118 <MX_TIM3_Init+0xe8>)
 800506c:	2200      	movs	r2, #0
 800506e:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005070:	4b29      	ldr	r3, [pc, #164]	@ (8005118 <MX_TIM3_Init+0xe8>)
 8005072:	2200      	movs	r2, #0
 8005074:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 31;
 8005076:	4b28      	ldr	r3, [pc, #160]	@ (8005118 <MX_TIM3_Init+0xe8>)
 8005078:	221f      	movs	r2, #31
 800507a:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800507c:	4b26      	ldr	r3, [pc, #152]	@ (8005118 <MX_TIM3_Init+0xe8>)
 800507e:	2200      	movs	r2, #0
 8005080:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8005082:	4b25      	ldr	r3, [pc, #148]	@ (8005118 <MX_TIM3_Init+0xe8>)
 8005084:	2200      	movs	r2, #0
 8005086:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8005088:	4823      	ldr	r0, [pc, #140]	@ (8005118 <MX_TIM3_Init+0xe8>)
 800508a:	f00d fc43 	bl	8012914 <HAL_TIM_Base_Init>
 800508e:	4603      	mov	r3, r0
 8005090:	2b00      	cmp	r3, #0
 8005092:	d001      	beq.n	8005098 <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 8005094:	f000 fa26 	bl	80054e4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8005098:	481f      	ldr	r0, [pc, #124]	@ (8005118 <MX_TIM3_Init+0xe8>)
 800509a:	f00d ff2b 	bl	8012ef4 <HAL_TIM_PWM_Init>
 800509e:	4603      	mov	r3, r0
 80050a0:	2b00      	cmp	r3, #0
 80050a2:	d001      	beq.n	80050a8 <MX_TIM3_Init+0x78>
  {
    Error_Handler();
 80050a4:	f000 fa1e 	bl	80054e4 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_EXTERNAL1;
 80050a8:	2307      	movs	r3, #7
 80050aa:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sSlaveConfig.InputTrigger = TIM_TS_ITR3;
 80050ac:	2330      	movs	r3, #48	@ 0x30
 80050ae:	633b      	str	r3, [r7, #48]	@ 0x30
  if (HAL_TIM_SlaveConfigSynchro(&htim3, &sSlaveConfig) != HAL_OK)
 80050b0:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80050b4:	4619      	mov	r1, r3
 80050b6:	4818      	ldr	r0, [pc, #96]	@ (8005118 <MX_TIM3_Init+0xe8>)
 80050b8:	f00e fe63 	bl	8013d82 <HAL_TIM_SlaveConfigSynchro>
 80050bc:	4603      	mov	r3, r0
 80050be:	2b00      	cmp	r3, #0
 80050c0:	d001      	beq.n	80050c6 <MX_TIM3_Init+0x96>
  {
    Error_Handler();
 80050c2:	f000 fa0f 	bl	80054e4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80050c6:	2300      	movs	r3, #0
 80050c8:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80050ca:	2300      	movs	r3, #0
 80050cc:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80050ce:	f107 0320 	add.w	r3, r7, #32
 80050d2:	4619      	mov	r1, r3
 80050d4:	4810      	ldr	r0, [pc, #64]	@ (8005118 <MX_TIM3_Init+0xe8>)
 80050d6:	f00f fc8b 	bl	80149f0 <HAL_TIMEx_MasterConfigSynchronization>
 80050da:	4603      	mov	r3, r0
 80050dc:	2b00      	cmp	r3, #0
 80050de:	d001      	beq.n	80050e4 <MX_TIM3_Init+0xb4>
  {
    Error_Handler();
 80050e0:	f000 fa00 	bl	80054e4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80050e4:	2360      	movs	r3, #96	@ 0x60
 80050e6:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 15;
 80050e8:	230f      	movs	r3, #15
 80050ea:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80050ec:	2300      	movs	r3, #0
 80050ee:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80050f0:	2300      	movs	r3, #0
 80050f2:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80050f4:	1d3b      	adds	r3, r7, #4
 80050f6:	2208      	movs	r2, #8
 80050f8:	4619      	mov	r1, r3
 80050fa:	4807      	ldr	r0, [pc, #28]	@ (8005118 <MX_TIM3_Init+0xe8>)
 80050fc:	f00e fc64 	bl	80139c8 <HAL_TIM_PWM_ConfigChannel>
 8005100:	4603      	mov	r3, r0
 8005102:	2b00      	cmp	r3, #0
 8005104:	d001      	beq.n	800510a <MX_TIM3_Init+0xda>
  {
    Error_Handler();
 8005106:	f000 f9ed 	bl	80054e4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 800510a:	4803      	ldr	r0, [pc, #12]	@ (8005118 <MX_TIM3_Init+0xe8>)
 800510c:	f002 fddc 	bl	8007cc8 <HAL_TIM_MspPostInit>

}
 8005110:	bf00      	nop
 8005112:	3740      	adds	r7, #64	@ 0x40
 8005114:	46bd      	mov	sp, r7
 8005116:	bd80      	pop	{r7, pc}
 8005118:	2000039c 	.word	0x2000039c
 800511c:	40000400 	.word	0x40000400

08005120 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8005120:	b580      	push	{r7, lr}
 8005122:	b08e      	sub	sp, #56	@ 0x38
 8005124:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8005126:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800512a:	2200      	movs	r2, #0
 800512c:	601a      	str	r2, [r3, #0]
 800512e:	605a      	str	r2, [r3, #4]
 8005130:	609a      	str	r2, [r3, #8]
 8005132:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8005134:	f107 031c 	add.w	r3, r7, #28
 8005138:	2200      	movs	r2, #0
 800513a:	601a      	str	r2, [r3, #0]
 800513c:	605a      	str	r2, [r3, #4]
 800513e:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8005140:	463b      	mov	r3, r7
 8005142:	2200      	movs	r2, #0
 8005144:	601a      	str	r2, [r3, #0]
 8005146:	605a      	str	r2, [r3, #4]
 8005148:	609a      	str	r2, [r3, #8]
 800514a:	60da      	str	r2, [r3, #12]
 800514c:	611a      	str	r2, [r3, #16]
 800514e:	615a      	str	r2, [r3, #20]
 8005150:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8005152:	4b2b      	ldr	r3, [pc, #172]	@ (8005200 <MX_TIM4_Init+0xe0>)
 8005154:	4a2b      	ldr	r2, [pc, #172]	@ (8005204 <MX_TIM4_Init+0xe4>)
 8005156:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 99;
 8005158:	4b29      	ldr	r3, [pc, #164]	@ (8005200 <MX_TIM4_Init+0xe0>)
 800515a:	2263      	movs	r2, #99	@ 0x63
 800515c:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800515e:	4b28      	ldr	r3, [pc, #160]	@ (8005200 <MX_TIM4_Init+0xe0>)
 8005160:	2200      	movs	r2, #0
 8005162:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 999;
 8005164:	4b26      	ldr	r3, [pc, #152]	@ (8005200 <MX_TIM4_Init+0xe0>)
 8005166:	f240 32e7 	movw	r2, #999	@ 0x3e7
 800516a:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800516c:	4b24      	ldr	r3, [pc, #144]	@ (8005200 <MX_TIM4_Init+0xe0>)
 800516e:	2200      	movs	r2, #0
 8005170:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8005172:	4b23      	ldr	r3, [pc, #140]	@ (8005200 <MX_TIM4_Init+0xe0>)
 8005174:	2280      	movs	r2, #128	@ 0x80
 8005176:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8005178:	4821      	ldr	r0, [pc, #132]	@ (8005200 <MX_TIM4_Init+0xe0>)
 800517a:	f00d fbcb 	bl	8012914 <HAL_TIM_Base_Init>
 800517e:	4603      	mov	r3, r0
 8005180:	2b00      	cmp	r3, #0
 8005182:	d001      	beq.n	8005188 <MX_TIM4_Init+0x68>
  {
    Error_Handler();
 8005184:	f000 f9ae 	bl	80054e4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8005188:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800518c:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 800518e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8005192:	4619      	mov	r1, r3
 8005194:	481a      	ldr	r0, [pc, #104]	@ (8005200 <MX_TIM4_Init+0xe0>)
 8005196:	f00e fd2b 	bl	8013bf0 <HAL_TIM_ConfigClockSource>
 800519a:	4603      	mov	r3, r0
 800519c:	2b00      	cmp	r3, #0
 800519e:	d001      	beq.n	80051a4 <MX_TIM4_Init+0x84>
  {
    Error_Handler();
 80051a0:	f000 f9a0 	bl	80054e4 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim4) != HAL_OK)
 80051a4:	4816      	ldr	r0, [pc, #88]	@ (8005200 <MX_TIM4_Init+0xe0>)
 80051a6:	f00d fc0c 	bl	80129c2 <HAL_TIM_OC_Init>
 80051aa:	4603      	mov	r3, r0
 80051ac:	2b00      	cmp	r3, #0
 80051ae:	d001      	beq.n	80051b4 <MX_TIM4_Init+0x94>
  {
    Error_Handler();
 80051b0:	f000 f998 	bl	80054e4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80051b4:	2320      	movs	r3, #32
 80051b6:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80051b8:	2300      	movs	r3, #0
 80051ba:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80051bc:	f107 031c 	add.w	r3, r7, #28
 80051c0:	4619      	mov	r1, r3
 80051c2:	480f      	ldr	r0, [pc, #60]	@ (8005200 <MX_TIM4_Init+0xe0>)
 80051c4:	f00f fc14 	bl	80149f0 <HAL_TIMEx_MasterConfigSynchronization>
 80051c8:	4603      	mov	r3, r0
 80051ca:	2b00      	cmp	r3, #0
 80051cc:	d001      	beq.n	80051d2 <MX_TIM4_Init+0xb2>
  {
    Error_Handler();
 80051ce:	f000 f989 	bl	80054e4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 80051d2:	2300      	movs	r3, #0
 80051d4:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80051d6:	2300      	movs	r3, #0
 80051d8:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80051da:	2300      	movs	r3, #0
 80051dc:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80051de:	2300      	movs	r3, #0
 80051e0:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_OC_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80051e2:	463b      	mov	r3, r7
 80051e4:	2208      	movs	r2, #8
 80051e6:	4619      	mov	r1, r3
 80051e8:	4805      	ldr	r0, [pc, #20]	@ (8005200 <MX_TIM4_Init+0xe0>)
 80051ea:	f00e fad7 	bl	801379c <HAL_TIM_OC_ConfigChannel>
 80051ee:	4603      	mov	r3, r0
 80051f0:	2b00      	cmp	r3, #0
 80051f2:	d001      	beq.n	80051f8 <MX_TIM4_Init+0xd8>
  {
    Error_Handler();
 80051f4:	f000 f976 	bl	80054e4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 80051f8:	bf00      	nop
 80051fa:	3738      	adds	r7, #56	@ 0x38
 80051fc:	46bd      	mov	sp, r7
 80051fe:	bd80      	pop	{r7, pc}
 8005200:	200003e8 	.word	0x200003e8
 8005204:	40000800 	.word	0x40000800

08005208 <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 8005208:	b580      	push	{r7, lr}
 800520a:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 800520c:	4b14      	ldr	r3, [pc, #80]	@ (8005260 <MX_UART4_Init+0x58>)
 800520e:	4a15      	ldr	r2, [pc, #84]	@ (8005264 <MX_UART4_Init+0x5c>)
 8005210:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 8005212:	4b13      	ldr	r3, [pc, #76]	@ (8005260 <MX_UART4_Init+0x58>)
 8005214:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8005218:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 800521a:	4b11      	ldr	r3, [pc, #68]	@ (8005260 <MX_UART4_Init+0x58>)
 800521c:	2200      	movs	r2, #0
 800521e:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8005220:	4b0f      	ldr	r3, [pc, #60]	@ (8005260 <MX_UART4_Init+0x58>)
 8005222:	2200      	movs	r2, #0
 8005224:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8005226:	4b0e      	ldr	r3, [pc, #56]	@ (8005260 <MX_UART4_Init+0x58>)
 8005228:	2200      	movs	r2, #0
 800522a:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 800522c:	4b0c      	ldr	r3, [pc, #48]	@ (8005260 <MX_UART4_Init+0x58>)
 800522e:	220c      	movs	r2, #12
 8005230:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8005232:	4b0b      	ldr	r3, [pc, #44]	@ (8005260 <MX_UART4_Init+0x58>)
 8005234:	2200      	movs	r2, #0
 8005236:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8005238:	4b09      	ldr	r3, [pc, #36]	@ (8005260 <MX_UART4_Init+0x58>)
 800523a:	2200      	movs	r2, #0
 800523c:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800523e:	4b08      	ldr	r3, [pc, #32]	@ (8005260 <MX_UART4_Init+0x58>)
 8005240:	2200      	movs	r2, #0
 8005242:	621a      	str	r2, [r3, #32]
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8005244:	4b06      	ldr	r3, [pc, #24]	@ (8005260 <MX_UART4_Init+0x58>)
 8005246:	2200      	movs	r2, #0
 8005248:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_HalfDuplex_Init(&huart4) != HAL_OK)
 800524a:	4805      	ldr	r0, [pc, #20]	@ (8005260 <MX_UART4_Init+0x58>)
 800524c:	f00f fd24 	bl	8014c98 <HAL_HalfDuplex_Init>
 8005250:	4603      	mov	r3, r0
 8005252:	2b00      	cmp	r3, #0
 8005254:	d001      	beq.n	800525a <MX_UART4_Init+0x52>
  {
    Error_Handler();
 8005256:	f000 f945 	bl	80054e4 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 800525a:	bf00      	nop
 800525c:	bd80      	pop	{r7, pc}
 800525e:	bf00      	nop
 8005260:	20000434 	.word	0x20000434
 8005264:	40004c00 	.word	0x40004c00

08005268 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8005268:	b580      	push	{r7, lr}
 800526a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800526c:	4b14      	ldr	r3, [pc, #80]	@ (80052c0 <MX_USART1_UART_Init+0x58>)
 800526e:	4a15      	ldr	r2, [pc, #84]	@ (80052c4 <MX_USART1_UART_Init+0x5c>)
 8005270:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 38400;
 8005272:	4b13      	ldr	r3, [pc, #76]	@ (80052c0 <MX_USART1_UART_Init+0x58>)
 8005274:	f44f 4216 	mov.w	r2, #38400	@ 0x9600
 8005278:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800527a:	4b11      	ldr	r3, [pc, #68]	@ (80052c0 <MX_USART1_UART_Init+0x58>)
 800527c:	2200      	movs	r2, #0
 800527e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8005280:	4b0f      	ldr	r3, [pc, #60]	@ (80052c0 <MX_USART1_UART_Init+0x58>)
 8005282:	2200      	movs	r2, #0
 8005284:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8005286:	4b0e      	ldr	r3, [pc, #56]	@ (80052c0 <MX_USART1_UART_Init+0x58>)
 8005288:	2200      	movs	r2, #0
 800528a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800528c:	4b0c      	ldr	r3, [pc, #48]	@ (80052c0 <MX_USART1_UART_Init+0x58>)
 800528e:	220c      	movs	r2, #12
 8005290:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8005292:	4b0b      	ldr	r3, [pc, #44]	@ (80052c0 <MX_USART1_UART_Init+0x58>)
 8005294:	2200      	movs	r2, #0
 8005296:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8005298:	4b09      	ldr	r3, [pc, #36]	@ (80052c0 <MX_USART1_UART_Init+0x58>)
 800529a:	2200      	movs	r2, #0
 800529c:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800529e:	4b08      	ldr	r3, [pc, #32]	@ (80052c0 <MX_USART1_UART_Init+0x58>)
 80052a0:	2200      	movs	r2, #0
 80052a2:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80052a4:	4b06      	ldr	r3, [pc, #24]	@ (80052c0 <MX_USART1_UART_Init+0x58>)
 80052a6:	2200      	movs	r2, #0
 80052a8:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80052aa:	4805      	ldr	r0, [pc, #20]	@ (80052c0 <MX_USART1_UART_Init+0x58>)
 80052ac:	f00f fca6 	bl	8014bfc <HAL_UART_Init>
 80052b0:	4603      	mov	r3, r0
 80052b2:	2b00      	cmp	r3, #0
 80052b4:	d001      	beq.n	80052ba <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 80052b6:	f000 f915 	bl	80054e4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80052ba:	bf00      	nop
 80052bc:	bd80      	pop	{r7, pc}
 80052be:	bf00      	nop
 80052c0:	200004bc 	.word	0x200004bc
 80052c4:	40013800 	.word	0x40013800

080052c8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80052c8:	b580      	push	{r7, lr}
 80052ca:	b082      	sub	sp, #8
 80052cc:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80052ce:	4b14      	ldr	r3, [pc, #80]	@ (8005320 <MX_DMA_Init+0x58>)
 80052d0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80052d2:	4a13      	ldr	r2, [pc, #76]	@ (8005320 <MX_DMA_Init+0x58>)
 80052d4:	f043 0301 	orr.w	r3, r3, #1
 80052d8:	6493      	str	r3, [r2, #72]	@ 0x48
 80052da:	4b11      	ldr	r3, [pc, #68]	@ (8005320 <MX_DMA_Init+0x58>)
 80052dc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80052de:	f003 0301 	and.w	r3, r3, #1
 80052e2:	607b      	str	r3, [r7, #4]
 80052e4:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 80052e6:	2200      	movs	r2, #0
 80052e8:	2100      	movs	r1, #0
 80052ea:	200b      	movs	r0, #11
 80052ec:	f007 fcc5 	bl	800cc7a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80052f0:	200b      	movs	r0, #11
 80052f2:	f007 fcde 	bl	800ccb2 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 0, 0);
 80052f6:	2200      	movs	r2, #0
 80052f8:	2100      	movs	r1, #0
 80052fa:	200e      	movs	r0, #14
 80052fc:	f007 fcbd 	bl	800cc7a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 8005300:	200e      	movs	r0, #14
 8005302:	f007 fcd6 	bl	800ccb2 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 8005306:	2200      	movs	r2, #0
 8005308:	2100      	movs	r1, #0
 800530a:	200f      	movs	r0, #15
 800530c:	f007 fcb5 	bl	800cc7a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 8005310:	200f      	movs	r0, #15
 8005312:	f007 fcce 	bl	800ccb2 <HAL_NVIC_EnableIRQ>

}
 8005316:	bf00      	nop
 8005318:	3708      	adds	r7, #8
 800531a:	46bd      	mov	sp, r7
 800531c:	bd80      	pop	{r7, pc}
 800531e:	bf00      	nop
 8005320:	40021000 	.word	0x40021000

08005324 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8005324:	b580      	push	{r7, lr}
 8005326:	b08a      	sub	sp, #40	@ 0x28
 8005328:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800532a:	f107 0314 	add.w	r3, r7, #20
 800532e:	2200      	movs	r2, #0
 8005330:	601a      	str	r2, [r3, #0]
 8005332:	605a      	str	r2, [r3, #4]
 8005334:	609a      	str	r2, [r3, #8]
 8005336:	60da      	str	r2, [r3, #12]
 8005338:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */
  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800533a:	4b66      	ldr	r3, [pc, #408]	@ (80054d4 <MX_GPIO_Init+0x1b0>)
 800533c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800533e:	4a65      	ldr	r2, [pc, #404]	@ (80054d4 <MX_GPIO_Init+0x1b0>)
 8005340:	f043 0304 	orr.w	r3, r3, #4
 8005344:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8005346:	4b63      	ldr	r3, [pc, #396]	@ (80054d4 <MX_GPIO_Init+0x1b0>)
 8005348:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800534a:	f003 0304 	and.w	r3, r3, #4
 800534e:	613b      	str	r3, [r7, #16]
 8005350:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8005352:	4b60      	ldr	r3, [pc, #384]	@ (80054d4 <MX_GPIO_Init+0x1b0>)
 8005354:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005356:	4a5f      	ldr	r2, [pc, #380]	@ (80054d4 <MX_GPIO_Init+0x1b0>)
 8005358:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800535c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800535e:	4b5d      	ldr	r3, [pc, #372]	@ (80054d4 <MX_GPIO_Init+0x1b0>)
 8005360:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005362:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005366:	60fb      	str	r3, [r7, #12]
 8005368:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800536a:	4b5a      	ldr	r3, [pc, #360]	@ (80054d4 <MX_GPIO_Init+0x1b0>)
 800536c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800536e:	4a59      	ldr	r2, [pc, #356]	@ (80054d4 <MX_GPIO_Init+0x1b0>)
 8005370:	f043 0301 	orr.w	r3, r3, #1
 8005374:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8005376:	4b57      	ldr	r3, [pc, #348]	@ (80054d4 <MX_GPIO_Init+0x1b0>)
 8005378:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800537a:	f003 0301 	and.w	r3, r3, #1
 800537e:	60bb      	str	r3, [r7, #8]
 8005380:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8005382:	4b54      	ldr	r3, [pc, #336]	@ (80054d4 <MX_GPIO_Init+0x1b0>)
 8005384:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005386:	4a53      	ldr	r2, [pc, #332]	@ (80054d4 <MX_GPIO_Init+0x1b0>)
 8005388:	f043 0302 	orr.w	r3, r3, #2
 800538c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800538e:	4b51      	ldr	r3, [pc, #324]	@ (80054d4 <MX_GPIO_Init+0x1b0>)
 8005390:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005392:	f003 0302 	and.w	r3, r3, #2
 8005396:	607b      	str	r3, [r7, #4]
 8005398:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800539a:	4b4e      	ldr	r3, [pc, #312]	@ (80054d4 <MX_GPIO_Init+0x1b0>)
 800539c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800539e:	4a4d      	ldr	r2, [pc, #308]	@ (80054d4 <MX_GPIO_Init+0x1b0>)
 80053a0:	f043 0308 	orr.w	r3, r3, #8
 80053a4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80053a6:	4b4b      	ldr	r3, [pc, #300]	@ (80054d4 <MX_GPIO_Init+0x1b0>)
 80053a8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80053aa:	f003 0308 	and.w	r3, r3, #8
 80053ae:	603b      	str	r3, [r7, #0]
 80053b0:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DBG_GPIO_Port, DBG_Pin, GPIO_PIN_RESET);
 80053b2:	2200      	movs	r2, #0
 80053b4:	2108      	movs	r1, #8
 80053b6:	4848      	ldr	r0, [pc, #288]	@ (80054d8 <MX_GPIO_Init+0x1b4>)
 80053b8:	f009 f99a 	bl	800e6f0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(FLASH_nCS_GPIO_Port, FLASH_nCS_Pin, GPIO_PIN_SET);
 80053bc:	2201      	movs	r2, #1
 80053be:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80053c2:	4846      	ldr	r0, [pc, #280]	@ (80054dc <MX_GPIO_Init+0x1b8>)
 80053c4:	f009 f994 	bl	800e6f0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, FLASH_nWP_Pin|FLASH_nRESET_Pin, GPIO_PIN_SET);
 80053c8:	2201      	movs	r2, #1
 80053ca:	21c0      	movs	r1, #192	@ 0xc0
 80053cc:	4842      	ldr	r0, [pc, #264]	@ (80054d8 <MX_GPIO_Init+0x1b4>)
 80053ce:	f009 f98f 	bl	800e6f0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LTE_POWER_ON_Pin|LTE_RESET_Pin|ACC_nCS_Pin, GPIO_PIN_RESET);
 80053d2:	2200      	movs	r2, #0
 80053d4:	f44f 4118 	mov.w	r1, #38912	@ 0x9800
 80053d8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80053dc:	f009 f988 	bl	800e6f0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DTR_GPIO_Port, DTR_Pin, GPIO_PIN_RESET);
 80053e0:	2200      	movs	r2, #0
 80053e2:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80053e6:	483d      	ldr	r0, [pc, #244]	@ (80054dc <MX_GPIO_Init+0x1b8>)
 80053e8:	f009 f982 	bl	800e6f0 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : USR_BTN_Pin PC4 */
  GPIO_InitStruct.Pin = USR_BTN_Pin|GPIO_PIN_4;
 80053ec:	f242 0310 	movw	r3, #8208	@ 0x2010
 80053f0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80053f2:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80053f6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80053f8:	2300      	movs	r3, #0
 80053fa:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80053fc:	f107 0314 	add.w	r3, r7, #20
 8005400:	4619      	mov	r1, r3
 8005402:	4835      	ldr	r0, [pc, #212]	@ (80054d8 <MX_GPIO_Init+0x1b4>)
 8005404:	f008 ffb2 	bl	800e36c <HAL_GPIO_Init>

  /*Configure GPIO pins : DBG_Pin FLASH_nWP_Pin FLASH_nRESET_Pin */
  GPIO_InitStruct.Pin = DBG_Pin|FLASH_nWP_Pin|FLASH_nRESET_Pin;
 8005408:	23c8      	movs	r3, #200	@ 0xc8
 800540a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800540c:	2301      	movs	r3, #1
 800540e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005410:	2300      	movs	r3, #0
 8005412:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005414:	2300      	movs	r3, #0
 8005416:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005418:	f107 0314 	add.w	r3, r7, #20
 800541c:	4619      	mov	r1, r3
 800541e:	482e      	ldr	r0, [pc, #184]	@ (80054d8 <MX_GPIO_Init+0x1b4>)
 8005420:	f008 ffa4 	bl	800e36c <HAL_GPIO_Init>

  /*Configure GPIO pin : LTE_STATUS_Pin */
  GPIO_InitStruct.Pin = LTE_STATUS_Pin;
 8005424:	2308      	movs	r3, #8
 8005426:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8005428:	2300      	movs	r3, #0
 800542a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800542c:	2300      	movs	r3, #0
 800542e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LTE_STATUS_GPIO_Port, &GPIO_InitStruct);
 8005430:	f107 0314 	add.w	r3, r7, #20
 8005434:	4619      	mov	r1, r3
 8005436:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800543a:	f008 ff97 	bl	800e36c <HAL_GPIO_Init>

  /*Configure GPIO pins : FLASH_nCS_Pin DTR_Pin */
  GPIO_InitStruct.Pin = FLASH_nCS_Pin|DTR_Pin;
 800543e:	f44f 5390 	mov.w	r3, #4608	@ 0x1200
 8005442:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8005444:	2301      	movs	r3, #1
 8005446:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005448:	2300      	movs	r3, #0
 800544a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800544c:	2300      	movs	r3, #0
 800544e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005450:	f107 0314 	add.w	r3, r7, #20
 8005454:	4619      	mov	r1, r3
 8005456:	4821      	ldr	r0, [pc, #132]	@ (80054dc <MX_GPIO_Init+0x1b8>)
 8005458:	f008 ff88 	bl	800e36c <HAL_GPIO_Init>

  /*Configure GPIO pins : LTE_POWER_ON_Pin LTE_RESET_Pin ACC_nCS_Pin */
  GPIO_InitStruct.Pin = LTE_POWER_ON_Pin|LTE_RESET_Pin|ACC_nCS_Pin;
 800545c:	f44f 4318 	mov.w	r3, #38912	@ 0x9800
 8005460:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8005462:	2301      	movs	r3, #1
 8005464:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005466:	2300      	movs	r3, #0
 8005468:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800546a:	2300      	movs	r3, #0
 800546c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800546e:	f107 0314 	add.w	r3, r7, #20
 8005472:	4619      	mov	r1, r3
 8005474:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8005478:	f008 ff78 	bl	800e36c <HAL_GPIO_Init>

  /*Configure GPIO pin : PD2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 800547c:	2304      	movs	r3, #4
 800547e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8005480:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8005484:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005486:	2300      	movs	r3, #0
 8005488:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800548a:	f107 0314 	add.w	r3, r7, #20
 800548e:	4619      	mov	r1, r3
 8005490:	4813      	ldr	r0, [pc, #76]	@ (80054e0 <MX_GPIO_Init+0x1bc>)
 8005492:	f008 ff6b 	bl	800e36c <HAL_GPIO_Init>

  /*Configure GPIO pin : DCD_Pin */
  GPIO_InitStruct.Pin = DCD_Pin;
 8005496:	2320      	movs	r3, #32
 8005498:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800549a:	2300      	movs	r3, #0
 800549c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800549e:	2300      	movs	r3, #0
 80054a0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(DCD_GPIO_Port, &GPIO_InitStruct);
 80054a2:	f107 0314 	add.w	r3, r7, #20
 80054a6:	4619      	mov	r1, r3
 80054a8:	480c      	ldr	r0, [pc, #48]	@ (80054dc <MX_GPIO_Init+0x1b8>)
 80054aa:	f008 ff5f 	bl	800e36c <HAL_GPIO_Init>

  /*Configure GPIO pin : PB8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 80054ae:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80054b2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80054b4:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80054b8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80054ba:	2300      	movs	r3, #0
 80054bc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80054be:	f107 0314 	add.w	r3, r7, #20
 80054c2:	4619      	mov	r1, r3
 80054c4:	4805      	ldr	r0, [pc, #20]	@ (80054dc <MX_GPIO_Init+0x1b8>)
 80054c6:	f008 ff51 	bl	800e36c <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */
  /* USER CODE END MX_GPIO_Init_2 */
}
 80054ca:	bf00      	nop
 80054cc:	3728      	adds	r7, #40	@ 0x28
 80054ce:	46bd      	mov	sp, r7
 80054d0:	bd80      	pop	{r7, pc}
 80054d2:	bf00      	nop
 80054d4:	40021000 	.word	0x40021000
 80054d8:	48000800 	.word	0x48000800
 80054dc:	48000400 	.word	0x48000400
 80054e0:	48000c00 	.word	0x48000c00

080054e4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80054e4:	b480      	push	{r7}
 80054e6:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 80054e8:	b672      	cpsid	i
}
 80054ea:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
		/* User can add his own implementation to report the HAL error return state */
		__disable_irq();
		while (1)
 80054ec:	bf00      	nop
 80054ee:	e7fd      	b.n	80054ec <Error_Handler+0x8>

080054f0 <OTA_Init>:
#include "base64.h"


/*-----INIZIALIZZAZIONE OTA-----*/
int OTA_Init(void)
{
 80054f0:	b580      	push	{r7, lr}
 80054f2:	b082      	sub	sp, #8
 80054f4:	af00      	add	r7, sp, #0
	FRESULT fRes = 0;
 80054f6:	2300      	movs	r3, #0
 80054f8:	71fb      	strb	r3, [r7, #7]

	if (sys.OTA_File_isOpen)
 80054fa:	4b10      	ldr	r3, [pc, #64]	@ (800553c <OTA_Init+0x4c>)
 80054fc:	781b      	ldrb	r3, [r3, #0]
 80054fe:	f003 0301 	and.w	r3, r3, #1
 8005502:	b2db      	uxtb	r3, r3
 8005504:	2b00      	cmp	r3, #0
 8005506:	d002      	beq.n	800550e <OTA_Init+0x1e>
	{
		f_close(&sys.OTA_File);
 8005508:	480d      	ldr	r0, [pc, #52]	@ (8005540 <OTA_Init+0x50>)
 800550a:	f005 f8d5 	bl	800a6b8 <f_close>
	}

	sys.OTA_File_isOpen = 0;
 800550e:	4a0b      	ldr	r2, [pc, #44]	@ (800553c <OTA_Init+0x4c>)
 8005510:	7813      	ldrb	r3, [r2, #0]
 8005512:	f023 0301 	bic.w	r3, r3, #1
 8005516:	7013      	strb	r3, [r2, #0]

	fRes = f_open(&sys.OTA_File, OTA_FILE_NAME, FA_READ | FA_WRITE | FA_CREATE_ALWAYS);
 8005518:	220b      	movs	r2, #11
 800551a:	490a      	ldr	r1, [pc, #40]	@ (8005544 <OTA_Init+0x54>)
 800551c:	4808      	ldr	r0, [pc, #32]	@ (8005540 <OTA_Init+0x50>)
 800551e:	f004 fbd7 	bl	8009cd0 <f_open>
 8005522:	4603      	mov	r3, r0
 8005524:	71fb      	strb	r3, [r7, #7]

	if (fRes != FR_OK)
 8005526:	79fb      	ldrb	r3, [r7, #7]
 8005528:	2b00      	cmp	r3, #0
 800552a:	d002      	beq.n	8005532 <OTA_Init+0x42>
	{
		return -1;
 800552c:	f04f 33ff 	mov.w	r3, #4294967295
 8005530:	e000      	b.n	8005534 <OTA_Init+0x44>
	}

	return 0;
 8005532:	2300      	movs	r3, #0
}
 8005534:	4618      	mov	r0, r3
 8005536:	3708      	adds	r7, #8
 8005538:	46bd      	mov	sp, r7
 800553a:	bd80      	pop	{r7, pc}
 800553c:	200005d8 	.word	0x200005d8
 8005540:	200005dc 	.word	0x200005dc
 8005544:	080179f8 	.word	0x080179f8

08005548 <OTA_Receive>:

/*-----RICEZIONE FILE OTA-----*/
int OTA_Receive(void)
{
 8005548:	b580      	push	{r7, lr}
 800554a:	f6ad 3dc8 	subw	sp, sp, #3016	@ 0xbc8
 800554e:	af00      	add	r7, sp, #0
	uint8_t rx_buffer[1500];
	UINT bytes_written = 0;
 8005550:	f607 33c8 	addw	r3, r7, #3016	@ 0xbc8
 8005554:	f2a3 53ec 	subw	r3, r3, #1516	@ 0x5ec
 8005558:	2200      	movs	r2, #0
 800555a:	601a      	str	r2, [r3, #0]
	uint8_t bin_buffer[1500];
	uint16_t Rx_Len = 0;
 800555c:	2300      	movs	r3, #0
 800555e:	f8a7 3bc6 	strh.w	r3, [r7, #3014]	@ 0xbc6

	while (1)
	{
		Rx_Len = SIM_Receive_Response((char*)rx_buffer, 5000);
 8005562:	f507 63bc 	add.w	r3, r7, #1504	@ 0x5e0
 8005566:	f241 3188 	movw	r1, #5000	@ 0x1388
 800556a:	4618      	mov	r0, r3
 800556c:	f7fc fb0e 	bl	8001b8c <SIM_Receive_Response>
 8005570:	4603      	mov	r3, r0
 8005572:	f8a7 3bc6 	strh.w	r3, [r7, #3014]	@ 0xbc6
		if (rx_buffer[0] == '\0' || (rx_buffer[0] == '\r' && rx_buffer[1] == '\n'))
 8005576:	f607 33c8 	addw	r3, r7, #3016	@ 0xbc8
 800557a:	f5a3 63bd 	sub.w	r3, r3, #1512	@ 0x5e8
 800557e:	781b      	ldrb	r3, [r3, #0]
 8005580:	2b00      	cmp	r3, #0
 8005582:	d04e      	beq.n	8005622 <OTA_Receive+0xda>
 8005584:	f607 33c8 	addw	r3, r7, #3016	@ 0xbc8
 8005588:	f5a3 63bd 	sub.w	r3, r3, #1512	@ 0x5e8
 800558c:	781b      	ldrb	r3, [r3, #0]
 800558e:	2b0d      	cmp	r3, #13
 8005590:	d106      	bne.n	80055a0 <OTA_Receive+0x58>
 8005592:	f607 33c8 	addw	r3, r7, #3016	@ 0xbc8
 8005596:	f5a3 63bd 	sub.w	r3, r3, #1512	@ 0x5e8
 800559a:	785b      	ldrb	r3, [r3, #1]
 800559c:	2b0a      	cmp	r3, #10
 800559e:	d040      	beq.n	8005622 <OTA_Receive+0xda>
		{
			break;
		}
		if(strncmp((char*)rx_buffer, "EOF", 3) == 0)
 80055a0:	f507 63bc 	add.w	r3, r7, #1504	@ 0x5e0
 80055a4:	2203      	movs	r2, #3
 80055a6:	4926      	ldr	r1, [pc, #152]	@ (8005640 <OTA_Receive+0xf8>)
 80055a8:	4618      	mov	r0, r3
 80055aa:	f010 ff88 	bl	80164be <strncmp>
 80055ae:	4603      	mov	r3, r0
 80055b0:	2b00      	cmp	r3, #0
 80055b2:	d035      	beq.n	8005620 <OTA_Receive+0xd8>
		{
			break;
		}
		if (Rx_Len == 0)
 80055b4:	f8b7 3bc6 	ldrh.w	r3, [r7, #3014]	@ 0xbc6
 80055b8:	2b00      	cmp	r3, #0
 80055ba:	d105      	bne.n	80055c8 <OTA_Receive+0x80>
		{
			f_close(&sys.OTA_File);
 80055bc:	4821      	ldr	r0, [pc, #132]	@ (8005644 <OTA_Receive+0xfc>)
 80055be:	f005 f87b 	bl	800a6b8 <f_close>
			return -1;
 80055c2:	f04f 33ff 	mov.w	r3, #4294967295
 80055c6:	e035      	b.n	8005634 <OTA_Receive+0xec>
		}
		size_t base64_len = strlen((char*)rx_buffer);
 80055c8:	f507 63bc 	add.w	r3, r7, #1504	@ 0x5e0
 80055cc:	4618      	mov	r0, r3
 80055ce:	f7fa fe09 	bl	80001e4 <strlen>
 80055d2:	f8c7 0bc0 	str.w	r0, [r7, #3008]	@ 0xbc0
		size_t bin_len = Base64_Decode((char*)rx_buffer, bin_buffer, base64_len);
 80055d6:	4639      	mov	r1, r7
 80055d8:	f507 63bc 	add.w	r3, r7, #1504	@ 0x5e0
 80055dc:	f8d7 2bc0 	ldr.w	r2, [r7, #3008]	@ 0xbc0
 80055e0:	4618      	mov	r0, r3
 80055e2:	f7fc ff27 	bl	8002434 <Base64_Decode>
 80055e6:	f8c7 0bbc 	str.w	r0, [r7, #3004]	@ 0xbbc
		f_write(&sys.OTA_File, bin_buffer, bin_len, &bytes_written);
 80055ea:	f207 53dc 	addw	r3, r7, #1500	@ 0x5dc
 80055ee:	4639      	mov	r1, r7
 80055f0:	f8d7 2bbc 	ldr.w	r2, [r7, #3004]	@ 0xbbc
 80055f4:	4813      	ldr	r0, [pc, #76]	@ (8005644 <OTA_Receive+0xfc>)
 80055f6:	f004 fe56 	bl	800a2a6 <f_write>
		if (bytes_written != bin_len)
 80055fa:	f607 33c8 	addw	r3, r7, #3016	@ 0xbc8
 80055fe:	f2a3 53ec 	subw	r3, r3, #1516	@ 0x5ec
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	f8d7 2bbc 	ldr.w	r2, [r7, #3004]	@ 0xbbc
 8005608:	429a      	cmp	r2, r3
 800560a:	d005      	beq.n	8005618 <OTA_Receive+0xd0>
		{
			f_close(&sys.OTA_File);
 800560c:	480d      	ldr	r0, [pc, #52]	@ (8005644 <OTA_Receive+0xfc>)
 800560e:	f005 f853 	bl	800a6b8 <f_close>
			return -1;
 8005612:	f04f 33ff 	mov.w	r3, #4294967295
 8005616:	e00d      	b.n	8005634 <OTA_Receive+0xec>
		}
		SIM_Send_TCP("ACK");
 8005618:	480b      	ldr	r0, [pc, #44]	@ (8005648 <OTA_Receive+0x100>)
 800561a:	f7fc fd13 	bl	8002044 <SIM_Send_TCP>
	{
 800561e:	e7a0      	b.n	8005562 <OTA_Receive+0x1a>
			break;
 8005620:	bf00      	nop
	}

	f_close(&sys.OTA_File);
 8005622:	4808      	ldr	r0, [pc, #32]	@ (8005644 <OTA_Receive+0xfc>)
 8005624:	f005 f848 	bl	800a6b8 <f_close>
    sys.OTA_File_isOpen = 0;
 8005628:	4a08      	ldr	r2, [pc, #32]	@ (800564c <OTA_Receive+0x104>)
 800562a:	7813      	ldrb	r3, [r2, #0]
 800562c:	f023 0301 	bic.w	r3, r3, #1
 8005630:	7013      	strb	r3, [r2, #0]
	return 0;
 8005632:	2300      	movs	r3, #0
}
 8005634:	4618      	mov	r0, r3
 8005636:	f607 37c8 	addw	r7, r7, #3016	@ 0xbc8
 800563a:	46bd      	mov	sp, r7
 800563c:	bd80      	pop	{r7, pc}
 800563e:	bf00      	nop
 8005640:	08017a08 	.word	0x08017a08
 8005644:	200005dc 	.word	0x200005dc
 8005648:	08017a0c 	.word	0x08017a0c
 800564c:	200005d8 	.word	0x200005d8

08005650 <OTA_CRC_Check>:

int OTA_CRC_Check(void)
{
 8005650:	b580      	push	{r7, lr}
 8005652:	f5ad 6d8c 	sub.w	sp, sp, #1120	@ 0x460
 8005656:	af00      	add	r7, sp, #0
	FRESULT fRes = 0;
 8005658:	2300      	movs	r3, #0
 800565a:	f887 3457 	strb.w	r3, [r7, #1111]	@ 0x457
	UINT read = 0;
 800565e:	2300      	movs	r3, #0
 8005660:	f8c7 3448 	str.w	r3, [r7, #1096]	@ 0x448
	uint16_t ota_crc = 0;
 8005664:	2300      	movs	r3, #0
 8005666:	f8a7 3454 	strh.w	r3, [r7, #1108]	@ 0x454
	uint8_t rx_buffer[64];
	uint32_t calc_crc = 0;
 800566a:	2300      	movs	r3, #0
 800566c:	f8c7 345c 	str.w	r3, [r7, #1116]	@ 0x45c

	SIM_Receive_Response((char*)rx_buffer, 5000);
 8005670:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8005674:	f241 3188 	movw	r1, #5000	@ 0x1388
 8005678:	4618      	mov	r0, r3
 800567a:	f7fc fa87 	bl	8001b8c <SIM_Receive_Response>
	uint8_t crc_bin[8];
	size_t crc_len = Base64_Decode((char*)rx_buffer, crc_bin, sizeof(crc_bin));
 800567e:	f507 6180 	add.w	r1, r7, #1024	@ 0x400
 8005682:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8005686:	2208      	movs	r2, #8
 8005688:	4618      	mov	r0, r3
 800568a:	f7fc fed3 	bl	8002434 <Base64_Decode>
 800568e:	f8c7 0450 	str.w	r0, [r7, #1104]	@ 0x450
	if (crc_len == 4)
 8005692:	f8d7 3450 	ldr.w	r3, [r7, #1104]	@ 0x450
 8005696:	2b04      	cmp	r3, #4
 8005698:	d118      	bne.n	80056cc <OTA_CRC_Check+0x7c>
	{
		ota_crc = (crc_bin[0] << 24) | (crc_bin[1] << 16) | (crc_bin[2] << 8) | crc_bin[3];
 800569a:	f897 3402 	ldrb.w	r3, [r7, #1026]	@ 0x402
 800569e:	b21b      	sxth	r3, r3
 80056a0:	021b      	lsls	r3, r3, #8
 80056a2:	b21a      	sxth	r2, r3
 80056a4:	f897 3403 	ldrb.w	r3, [r7, #1027]	@ 0x403
 80056a8:	b21b      	sxth	r3, r3
 80056aa:	4313      	orrs	r3, r2
 80056ac:	b21b      	sxth	r3, r3
 80056ae:	f8a7 3454 	strh.w	r3, [r7, #1108]	@ 0x454
	else
	{
		return -1;
	}

	fRes = f_open(&sys.OTA_File, OTA_FILE_NAME, FA_READ);
 80056b2:	2201      	movs	r2, #1
 80056b4:	493b      	ldr	r1, [pc, #236]	@ (80057a4 <OTA_CRC_Check+0x154>)
 80056b6:	483c      	ldr	r0, [pc, #240]	@ (80057a8 <OTA_CRC_Check+0x158>)
 80056b8:	f004 fb0a 	bl	8009cd0 <f_open>
 80056bc:	4603      	mov	r3, r0
 80056be:	f887 3457 	strb.w	r3, [r7, #1111]	@ 0x457
	if (fRes != FR_OK)
 80056c2:	f897 3457 	ldrb.w	r3, [r7, #1111]	@ 0x457
 80056c6:	2b00      	cmp	r3, #0
 80056c8:	d006      	beq.n	80056d8 <OTA_CRC_Check+0x88>
 80056ca:	e002      	b.n	80056d2 <OTA_CRC_Check+0x82>
		return -1;
 80056cc:	f04f 33ff 	mov.w	r3, #4294967295
 80056d0:	e063      	b.n	800579a <OTA_CRC_Check+0x14a>
	{
		return -1;
 80056d2:	f04f 33ff 	mov.w	r3, #4294967295
 80056d6:	e060      	b.n	800579a <OTA_CRC_Check+0x14a>
	}

	uint32_t size = f_size(&sys.OTA_File);
 80056d8:	4b34      	ldr	r3, [pc, #208]	@ (80057ac <OTA_CRC_Check+0x15c>)
 80056da:	691b      	ldr	r3, [r3, #16]
 80056dc:	f8c7 3458 	str.w	r3, [r7, #1112]	@ 0x458
    HAL_CRCEx_Input_Data_Reverse(HCRC, CRC_INPUTDATA_INVERSION_BYTE);
 80056e0:	2120      	movs	r1, #32
 80056e2:	4833      	ldr	r0, [pc, #204]	@ (80057b0 <OTA_CRC_Check+0x160>)
 80056e4:	f007 fd04 	bl	800d0f0 <HAL_CRCEx_Input_Data_Reverse>
    HAL_CRCEx_Output_Data_Reverse(HCRC, CRC_OUTPUTDATA_INVERSION_ENABLE);
 80056e8:	2180      	movs	r1, #128	@ 0x80
 80056ea:	4831      	ldr	r0, [pc, #196]	@ (80057b0 <OTA_CRC_Check+0x160>)
 80056ec:	f007 fd1c 	bl	800d128 <HAL_CRCEx_Output_Data_Reverse>
    HCRC->Instance->INIT = 0xFFFFFFFF;
 80056f0:	4b2f      	ldr	r3, [pc, #188]	@ (80057b0 <OTA_CRC_Check+0x160>)
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	f04f 32ff 	mov.w	r2, #4294967295
 80056f8:	611a      	str	r2, [r3, #16]
    HAL_CRCEx_Polynomial_Set(HCRC, 0x04c11db7, CRC_POLYLENGTH_32B);
 80056fa:	2200      	movs	r2, #0
 80056fc:	492d      	ldr	r1, [pc, #180]	@ (80057b4 <OTA_CRC_Check+0x164>)
 80056fe:	482c      	ldr	r0, [pc, #176]	@ (80057b0 <OTA_CRC_Check+0x160>)
 8005700:	f007 fc68 	bl	800cfd4 <HAL_CRCEx_Polynomial_Set>

	while (size > 0)
 8005704:	e038      	b.n	8005778 <OTA_CRC_Check+0x128>
	{
		uint8_t buffer[1024];
		UINT to_read = (size > sizeof(buffer)) ? sizeof(buffer) : size;
 8005706:	f8d7 3458 	ldr.w	r3, [r7, #1112]	@ 0x458
 800570a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800570e:	bf28      	it	cs
 8005710:	f44f 6380 	movcs.w	r3, #1024	@ 0x400
 8005714:	f8c7 344c 	str.w	r3, [r7, #1100]	@ 0x44c
		if (f_read(&sys.OTA_File, buffer, to_read, &read) != FR_OK || read == 0)
 8005718:	f507 6389 	add.w	r3, r7, #1096	@ 0x448
 800571c:	4639      	mov	r1, r7
 800571e:	f8d7 244c 	ldr.w	r2, [r7, #1100]	@ 0x44c
 8005722:	4821      	ldr	r0, [pc, #132]	@ (80057a8 <OTA_CRC_Check+0x158>)
 8005724:	f004 fc6c 	bl	800a000 <f_read>
 8005728:	4603      	mov	r3, r0
 800572a:	2b00      	cmp	r3, #0
 800572c:	d103      	bne.n	8005736 <OTA_CRC_Check+0xe6>
 800572e:	f8d7 3448 	ldr.w	r3, [r7, #1096]	@ 0x448
 8005732:	2b00      	cmp	r3, #0
 8005734:	d105      	bne.n	8005742 <OTA_CRC_Check+0xf2>
		{
			f_close(&sys.OTA_File);
 8005736:	481c      	ldr	r0, [pc, #112]	@ (80057a8 <OTA_CRC_Check+0x158>)
 8005738:	f004 ffbe 	bl	800a6b8 <f_close>
			return -1;
 800573c:	f04f 33ff 	mov.w	r3, #4294967295
 8005740:	e02b      	b.n	800579a <OTA_CRC_Check+0x14a>
		}
		calc_crc = HAL_CRC_Accumulate(HCRC, (uint32_t *)buffer, read / 4 + (read % 4 != 0));
 8005742:	f8d7 3448 	ldr.w	r3, [r7, #1096]	@ 0x448
 8005746:	089b      	lsrs	r3, r3, #2
 8005748:	f8d7 2448 	ldr.w	r2, [r7, #1096]	@ 0x448
 800574c:	f002 0203 	and.w	r2, r2, #3
 8005750:	2a00      	cmp	r2, #0
 8005752:	bf14      	ite	ne
 8005754:	2201      	movne	r2, #1
 8005756:	2200      	moveq	r2, #0
 8005758:	b2d2      	uxtb	r2, r2
 800575a:	441a      	add	r2, r3
 800575c:	463b      	mov	r3, r7
 800575e:	4619      	mov	r1, r3
 8005760:	4813      	ldr	r0, [pc, #76]	@ (80057b0 <OTA_CRC_Check+0x160>)
 8005762:	f007 fb29 	bl	800cdb8 <HAL_CRC_Accumulate>
 8005766:	f8c7 045c 	str.w	r0, [r7, #1116]	@ 0x45c
		size -= read;
 800576a:	f8d7 3448 	ldr.w	r3, [r7, #1096]	@ 0x448
 800576e:	f8d7 2458 	ldr.w	r2, [r7, #1112]	@ 0x458
 8005772:	1ad3      	subs	r3, r2, r3
 8005774:	f8c7 3458 	str.w	r3, [r7, #1112]	@ 0x458
	while (size > 0)
 8005778:	f8d7 3458 	ldr.w	r3, [r7, #1112]	@ 0x458
 800577c:	2b00      	cmp	r3, #0
 800577e:	d1c2      	bne.n	8005706 <OTA_CRC_Check+0xb6>
	}

	f_close(&sys.OTA_File);
 8005780:	4809      	ldr	r0, [pc, #36]	@ (80057a8 <OTA_CRC_Check+0x158>)
 8005782:	f004 ff99 	bl	800a6b8 <f_close>

	if (calc_crc != ota_crc)
 8005786:	f8b7 3454 	ldrh.w	r3, [r7, #1108]	@ 0x454
 800578a:	f8d7 245c 	ldr.w	r2, [r7, #1116]	@ 0x45c
 800578e:	429a      	cmp	r2, r3
 8005790:	d002      	beq.n	8005798 <OTA_CRC_Check+0x148>
	{
		return -1; // CRC non corrisponde
 8005792:	f04f 33ff 	mov.w	r3, #4294967295
 8005796:	e000      	b.n	800579a <OTA_CRC_Check+0x14a>
	}
	
	return 0; // CRC OK
 8005798:	2300      	movs	r3, #0
}
 800579a:	4618      	mov	r0, r3
 800579c:	f507 678c 	add.w	r7, r7, #1120	@ 0x460
 80057a0:	46bd      	mov	sp, r7
 80057a2:	bd80      	pop	{r7, pc}
 80057a4:	080179f8 	.word	0x080179f8
 80057a8:	200005dc 	.word	0x200005dc
 80057ac:	200005d8 	.word	0x200005d8
 80057b0:	2000015c 	.word	0x2000015c
 80057b4:	04c11db7 	.word	0x04c11db7

080057b8 <OTA_Apply>:


/*-----APPLICAZIONE UPDATE-----*/
int OTA_Apply(void)
{
 80057b8:	b580      	push	{r7, lr}
 80057ba:	b098      	sub	sp, #96	@ 0x60
 80057bc:	af00      	add	r7, sp, #0
	FRESULT fRes = 0;
 80057be:	2300      	movs	r3, #0
 80057c0:	f887 3053 	strb.w	r3, [r7, #83]	@ 0x53
	int32_t result = 0;
 80057c4:	2300      	movs	r3, #0
 80057c6:	65fb      	str	r3, [r7, #92]	@ 0x5c
	uint8_t ota_bank = 0;
 80057c8:	2300      	movs	r3, #0
 80057ca:	f887 3052 	strb.w	r3, [r7, #82]	@ 0x52
	uint32_t faddr = 0;
 80057ce:	2300      	movs	r3, #0
 80057d0:	64fb      	str	r3, [r7, #76]	@ 0x4c
	uint32_t size = 0;
 80057d2:	2300      	movs	r3, #0
 80057d4:	65bb      	str	r3, [r7, #88]	@ 0x58
	uint64_t pword = 0;
 80057d6:	f04f 0200 	mov.w	r2, #0
 80057da:	f04f 0300 	mov.w	r3, #0
 80057de:	e9c7 2310 	strd	r2, r3, [r7, #64]	@ 0x40
	uint32_t faddr_off = 0;
 80057e2:	2300      	movs	r3, #0
 80057e4:	657b      	str	r3, [r7, #84]	@ 0x54
	UINT read = 0;
 80057e6:	2300      	movs	r3, #0
 80057e8:	63fb      	str	r3, [r7, #60]	@ 0x3c
	uint32_t PageError = 0;
 80057ea:	2300      	movs	r3, #0
 80057ec:	63bb      	str	r3, [r7, #56]	@ 0x38
	FLASH_EraseInitTypeDef erase_cfg = {0};
 80057ee:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80057f2:	2200      	movs	r2, #0
 80057f4:	601a      	str	r2, [r3, #0]
 80057f6:	605a      	str	r2, [r3, #4]
 80057f8:	609a      	str	r2, [r3, #8]
 80057fa:	60da      	str	r2, [r3, #12]

	const uint32_t BANKSIZE = FLASH_SIZE >> 1;
 80057fc:	4b68      	ldr	r3, [pc, #416]	@ (80059a0 <OTA_Apply+0x1e8>)
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	b29b      	uxth	r3, r3
 8005802:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8005806:	4293      	cmp	r3, r2
 8005808:	d006      	beq.n	8005818 <OTA_Apply+0x60>
 800580a:	4b65      	ldr	r3, [pc, #404]	@ (80059a0 <OTA_Apply+0x1e8>)
 800580c:	681b      	ldr	r3, [r3, #0]
 800580e:	029b      	lsls	r3, r3, #10
 8005810:	085a      	lsrs	r2, r3, #1
 8005812:	4b64      	ldr	r3, [pc, #400]	@ (80059a4 <OTA_Apply+0x1ec>)
 8005814:	4013      	ands	r3, r2
 8005816:	e001      	b.n	800581c <OTA_Apply+0x64>
 8005818:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 800581c:	64bb      	str	r3, [r7, #72]	@ 0x48

	FLASH_OBProgramInitTypeDef ob = {0};
 800581e:	463b      	mov	r3, r7
 8005820:	2228      	movs	r2, #40	@ 0x28
 8005822:	2100      	movs	r1, #0
 8005824:	4618      	mov	r0, r3
 8005826:	f010 fe35 	bl	8016494 <memset>

	HAL_FLASHEx_OBGetConfig(&ob);
 800582a:	463b      	mov	r3, r7
 800582c:	4618      	mov	r0, r3
 800582e:	f008 f971 	bl	800db14 <HAL_FLASHEx_OBGetConfig>

	if ((ob.USERConfig & FLASH_OPTR_DUALBANK) == 0)
 8005832:	69bb      	ldr	r3, [r7, #24]
 8005834:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8005838:	2b00      	cmp	r3, #0
 800583a:	d102      	bne.n	8005842 <OTA_Apply+0x8a>
	{
		return -1;
 800583c:	f04f 33ff 	mov.w	r3, #4294967295
 8005840:	e0aa      	b.n	8005998 <OTA_Apply+0x1e0>
	}

	ota_bank = (ob.USERConfig & FLASH_OPTR_BFB2) ? FLASH_BANK_1 : FLASH_BANK_2;
 8005842:	69bb      	ldr	r3, [r7, #24]
 8005844:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005848:	2b00      	cmp	r3, #0
 800584a:	d001      	beq.n	8005850 <OTA_Apply+0x98>
 800584c:	2301      	movs	r3, #1
 800584e:	e000      	b.n	8005852 <OTA_Apply+0x9a>
 8005850:	2302      	movs	r3, #2
 8005852:	f887 3052 	strb.w	r3, [r7, #82]	@ 0x52

	// L'indirizzo deve essere sempre quello del banco 2 (se fa il boot da BANK2 il BANK1 viene rimappato)
	faddr = FLASH_BASE + BANKSIZE;
 8005856:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005858:	f103 6300 	add.w	r3, r3, #134217728	@ 0x8000000
 800585c:	64fb      	str	r3, [r7, #76]	@ 0x4c

	if (HAL_FLASH_Unlock() != HAL_OK)
 800585e:	f007 ff2d 	bl	800d6bc <HAL_FLASH_Unlock>
 8005862:	4603      	mov	r3, r0
 8005864:	2b00      	cmp	r3, #0
 8005866:	d002      	beq.n	800586e <OTA_Apply+0xb6>
	{
		return -1;
 8005868:	f04f 33ff 	mov.w	r3, #4294967295
 800586c:	e094      	b.n	8005998 <OTA_Apply+0x1e0>
	}

	f_close(&sys.OTA_File);
 800586e:	484e      	ldr	r0, [pc, #312]	@ (80059a8 <OTA_Apply+0x1f0>)
 8005870:	f004 ff22 	bl	800a6b8 <f_close>
	fRes = f_open(&sys.OTA_File, OTA_FILE_NAME, FA_READ);
 8005874:	2201      	movs	r2, #1
 8005876:	494d      	ldr	r1, [pc, #308]	@ (80059ac <OTA_Apply+0x1f4>)
 8005878:	484b      	ldr	r0, [pc, #300]	@ (80059a8 <OTA_Apply+0x1f0>)
 800587a:	f004 fa29 	bl	8009cd0 <f_open>
 800587e:	4603      	mov	r3, r0
 8005880:	f887 3053 	strb.w	r3, [r7, #83]	@ 0x53

	if (fRes != FR_OK)
 8005884:	f897 3053 	ldrb.w	r3, [r7, #83]	@ 0x53
 8005888:	2b00      	cmp	r3, #0
 800588a:	d003      	beq.n	8005894 <OTA_Apply+0xdc>
	{
		result = -1;
 800588c:	f04f 33ff 	mov.w	r3, #4294967295
 8005890:	65fb      	str	r3, [r7, #92]	@ 0x5c
		goto DONE;
 8005892:	e07b      	b.n	800598c <OTA_Apply+0x1d4>
	}

	if ((size = f_size(&sys.OTA_File)) > BANKSIZE)
 8005894:	4b46      	ldr	r3, [pc, #280]	@ (80059b0 <OTA_Apply+0x1f8>)
 8005896:	691b      	ldr	r3, [r3, #16]
 8005898:	65bb      	str	r3, [r7, #88]	@ 0x58
 800589a:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800589c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800589e:	429a      	cmp	r2, r3
 80058a0:	d903      	bls.n	80058aa <OTA_Apply+0xf2>
	{
		result = -1;
 80058a2:	f04f 33ff 	mov.w	r3, #4294967295
 80058a6:	65fb      	str	r3, [r7, #92]	@ 0x5c
		goto DONE;
 80058a8:	e070      	b.n	800598c <OTA_Apply+0x1d4>
	}

	erase_cfg.TypeErase = FLASH_TYPEERASE_MASSERASE;
 80058aa:	2301      	movs	r3, #1
 80058ac:	62bb      	str	r3, [r7, #40]	@ 0x28
	erase_cfg.Banks = ota_bank;
 80058ae:	f897 3052 	ldrb.w	r3, [r7, #82]	@ 0x52
 80058b2:	62fb      	str	r3, [r7, #44]	@ 0x2c

	if (HAL_FLASHEx_Erase(&erase_cfg, &PageError) != HAL_OK)
 80058b4:	f107 0238 	add.w	r2, r7, #56	@ 0x38
 80058b8:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80058bc:	4611      	mov	r1, r2
 80058be:	4618      	mov	r0, r3
 80058c0:	f008 f81e 	bl	800d900 <HAL_FLASHEx_Erase>
 80058c4:	4603      	mov	r3, r0
 80058c6:	2b00      	cmp	r3, #0
 80058c8:	d026      	beq.n	8005918 <OTA_Apply+0x160>
	{
		result = -1;
 80058ca:	f04f 33ff 	mov.w	r3, #4294967295
 80058ce:	65fb      	str	r3, [r7, #92]	@ 0x5c
		goto DONE;
 80058d0:	e05c      	b.n	800598c <OTA_Apply+0x1d4>
	}

	while (size > 0)
	{
		pword = 0;
 80058d2:	f04f 0200 	mov.w	r2, #0
 80058d6:	f04f 0300 	mov.w	r3, #0
 80058da:	e9c7 2310 	strd	r2, r3, [r7, #64]	@ 0x40
		if (f_read(&sys.OTA_File, (uint8_t *)&pword, sizeof(pword), &read) < 0)
 80058de:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 80058e2:	f107 0140 	add.w	r1, r7, #64	@ 0x40
 80058e6:	2208      	movs	r2, #8
 80058e8:	482f      	ldr	r0, [pc, #188]	@ (80059a8 <OTA_Apply+0x1f0>)
 80058ea:	f004 fb89 	bl	800a000 <f_read>
			break;
		if (read == 0)
 80058ee:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80058f0:	2b00      	cmp	r3, #0
 80058f2:	d015      	beq.n	8005920 <OTA_Apply+0x168>
			break;
		if (HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, faddr + faddr_off, pword) != HAL_OK)
 80058f4:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80058f6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80058f8:	18d1      	adds	r1, r2, r3
 80058fa:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80058fe:	2000      	movs	r0, #0
 8005900:	f007 fe70 	bl	800d5e4 <HAL_FLASH_Program>
 8005904:	4603      	mov	r3, r0
 8005906:	2b00      	cmp	r3, #0
 8005908:	d10c      	bne.n	8005924 <OTA_Apply+0x16c>
			break;
		faddr_off += sizeof(pword);
 800590a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800590c:	3308      	adds	r3, #8
 800590e:	657b      	str	r3, [r7, #84]	@ 0x54
		size -= read;
 8005910:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005912:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8005914:	1ad3      	subs	r3, r2, r3
 8005916:	65bb      	str	r3, [r7, #88]	@ 0x58
	while (size > 0)
 8005918:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800591a:	2b00      	cmp	r3, #0
 800591c:	d1d9      	bne.n	80058d2 <OTA_Apply+0x11a>
 800591e:	e002      	b.n	8005926 <OTA_Apply+0x16e>
			break;
 8005920:	bf00      	nop
 8005922:	e000      	b.n	8005926 <OTA_Apply+0x16e>
			break;
 8005924:	bf00      	nop
	}

	if (size > 0)
 8005926:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8005928:	2b00      	cmp	r3, #0
 800592a:	d003      	beq.n	8005934 <OTA_Apply+0x17c>
	{
		result = -1;
 800592c:	f04f 33ff 	mov.w	r3, #4294967295
 8005930:	65fb      	str	r3, [r7, #92]	@ 0x5c
		goto DONE;
 8005932:	e02b      	b.n	800598c <OTA_Apply+0x1d4>
	}

	HAL_FLASH_Lock();
 8005934:	f007 fee4 	bl	800d700 <HAL_FLASH_Lock>

	HAL_FLASHEx_OBGetConfig(&ob);
 8005938:	463b      	mov	r3, r7
 800593a:	4618      	mov	r0, r3
 800593c:	f008 f8ea 	bl	800db14 <HAL_FLASHEx_OBGetConfig>
	HAL_FLASH_Unlock();
 8005940:	f007 febc 	bl	800d6bc <HAL_FLASH_Unlock>
	HAL_FLASH_OB_Unlock();
 8005944:	f007 feec 	bl	800d720 <HAL_FLASH_OB_Unlock>

	ob.OptionType = OPTIONBYTE_USER;
 8005948:	2304      	movs	r3, #4
 800594a:	603b      	str	r3, [r7, #0]
	ob.USERType = OB_USER_BFB2;
 800594c:	2380      	movs	r3, #128	@ 0x80
 800594e:	617b      	str	r3, [r7, #20]
	ob.USERConfig = (ota_bank == FLASH_BANK_2) ? FLASH_OPTR_BFB2 : 0;
 8005950:	f897 3052 	ldrb.w	r3, [r7, #82]	@ 0x52
 8005954:	2b02      	cmp	r3, #2
 8005956:	d102      	bne.n	800595e <OTA_Apply+0x1a6>
 8005958:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 800595c:	e000      	b.n	8005960 <OTA_Apply+0x1a8>
 800595e:	2300      	movs	r3, #0
 8005960:	61bb      	str	r3, [r7, #24]

	if (HAL_FLASHEx_OBProgram(&ob) != HAL_OK)
 8005962:	463b      	mov	r3, r7
 8005964:	4618      	mov	r0, r3
 8005966:	f008 f867 	bl	800da38 <HAL_FLASHEx_OBProgram>
 800596a:	4603      	mov	r3, r0
 800596c:	2b00      	cmp	r3, #0
 800596e:	d007      	beq.n	8005980 <OTA_Apply+0x1c8>
	{
		HAL_FLASH_OB_Lock();
 8005970:	f007 fef2 	bl	800d758 <HAL_FLASH_OB_Lock>
		HAL_FLASH_Lock();
 8005974:	f007 fec4 	bl	800d700 <HAL_FLASH_Lock>
		result = -1;
 8005978:	f04f 33ff 	mov.w	r3, #4294967295
 800597c:	65fb      	str	r3, [r7, #92]	@ 0x5c
		goto DONE;
 800597e:	e005      	b.n	800598c <OTA_Apply+0x1d4>
	}

	HAL_FLASH_OB_Launch();
 8005980:	f007 fefa 	bl	800d778 <HAL_FLASH_OB_Launch>
	HAL_FLASH_OB_Lock();
 8005984:	f007 fee8 	bl	800d758 <HAL_FLASH_OB_Lock>
	HAL_FLASH_Lock();
 8005988:	f007 feba 	bl	800d700 <HAL_FLASH_Lock>

	DONE:

	f_close(&sys.OTA_File);
 800598c:	4806      	ldr	r0, [pc, #24]	@ (80059a8 <OTA_Apply+0x1f0>)
 800598e:	f004 fe93 	bl	800a6b8 <f_close>

	HAL_FLASH_Lock();
 8005992:	f007 feb5 	bl	800d700 <HAL_FLASH_Lock>

	return result;
 8005996:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
}
 8005998:	4618      	mov	r0, r3
 800599a:	3760      	adds	r7, #96	@ 0x60
 800599c:	46bd      	mov	sp, r7
 800599e:	bd80      	pop	{r7, pc}
 80059a0:	1fff75e0 	.word	0x1fff75e0
 80059a4:	01fffe00 	.word	0x01fffe00
 80059a8:	200005dc 	.word	0x200005dc
 80059ac:	080179f8 	.word	0x080179f8
 80059b0:	200005d8 	.word	0x200005d8

080059b4 <Save_Data>:
#include "init.h"


/*-----ACQUISIZIONE MISURE E LOG DEI DATI-----*/
void Save_Data(void)
{
 80059b4:	b580      	push	{r7, lr}
 80059b6:	b08a      	sub	sp, #40	@ 0x28
 80059b8:	af00      	add	r7, sp, #0
	if(flags.ADC_Half_Buffer)
 80059ba:	4b6d      	ldr	r3, [pc, #436]	@ (8005b70 <Save_Data+0x1bc>)
 80059bc:	781b      	ldrb	r3, [r3, #0]
 80059be:	f003 0302 	and.w	r3, r3, #2
 80059c2:	b2db      	uxtb	r3, r3
 80059c4:	2b00      	cmp	r3, #0
 80059c6:	d032      	beq.n	8005a2e <Save_Data+0x7a>
	{
		memcpy(Saving_Buffer + Address_Offset, &Pressure[0], PRESS_HALF_LEN);
 80059c8:	4b6a      	ldr	r3, [pc, #424]	@ (8005b74 <Save_Data+0x1c0>)
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	461a      	mov	r2, r3
 80059ce:	4b6a      	ldr	r3, [pc, #424]	@ (8005b78 <Save_Data+0x1c4>)
 80059d0:	4413      	add	r3, r2
 80059d2:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 80059d6:	4969      	ldr	r1, [pc, #420]	@ (8005b7c <Save_Data+0x1c8>)
 80059d8:	4618      	mov	r0, r3
 80059da:	f010 fddf 	bl	801659c <memcpy>
		Last_Pressure = 0;
 80059de:	4b68      	ldr	r3, [pc, #416]	@ (8005b80 <Save_Data+0x1cc>)
 80059e0:	2200      	movs	r2, #0
 80059e2:	801a      	strh	r2, [r3, #0]
		for(int i = 0; i < PRESS_HALF_SAMPLES; i++)
 80059e4:	2300      	movs	r3, #0
 80059e6:	627b      	str	r3, [r7, #36]	@ 0x24
 80059e8:	e00c      	b.n	8005a04 <Save_Data+0x50>
		{
			Last_Pressure += Pressure[i];
 80059ea:	4a64      	ldr	r2, [pc, #400]	@ (8005b7c <Save_Data+0x1c8>)
 80059ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80059ee:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 80059f2:	4b63      	ldr	r3, [pc, #396]	@ (8005b80 <Save_Data+0x1cc>)
 80059f4:	881b      	ldrh	r3, [r3, #0]
 80059f6:	4413      	add	r3, r2
 80059f8:	b29a      	uxth	r2, r3
 80059fa:	4b61      	ldr	r3, [pc, #388]	@ (8005b80 <Save_Data+0x1cc>)
 80059fc:	801a      	strh	r2, [r3, #0]
		for(int i = 0; i < PRESS_HALF_SAMPLES; i++)
 80059fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a00:	3301      	adds	r3, #1
 8005a02:	627b      	str	r3, [r7, #36]	@ 0x24
 8005a04:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a06:	2bc7      	cmp	r3, #199	@ 0xc7
 8005a08:	ddef      	ble.n	80059ea <Save_Data+0x36>
		}
		Last_Pressure = (uint16_t)(Last_Pressure / PRESS_HALF_SAMPLES);
 8005a0a:	4b5d      	ldr	r3, [pc, #372]	@ (8005b80 <Save_Data+0x1cc>)
 8005a0c:	881b      	ldrh	r3, [r3, #0]
 8005a0e:	4a5d      	ldr	r2, [pc, #372]	@ (8005b84 <Save_Data+0x1d0>)
 8005a10:	fba2 2303 	umull	r2, r3, r2, r3
 8005a14:	099b      	lsrs	r3, r3, #6
 8005a16:	b29a      	uxth	r2, r3
 8005a18:	4b59      	ldr	r3, [pc, #356]	@ (8005b80 <Save_Data+0x1cc>)
 8005a1a:	801a      	strh	r2, [r3, #0]
		Warning_Detection(&Pressure[0]);
 8005a1c:	4857      	ldr	r0, [pc, #348]	@ (8005b7c <Save_Data+0x1c8>)
 8005a1e:	f000 fb47 	bl	80060b0 <Warning_Detection>
		flags.ADC_Half_Buffer = 0;
 8005a22:	4a53      	ldr	r2, [pc, #332]	@ (8005b70 <Save_Data+0x1bc>)
 8005a24:	7813      	ldrb	r3, [r2, #0]
 8005a26:	f023 0302 	bic.w	r3, r3, #2
 8005a2a:	7013      	strb	r3, [r2, #0]
 8005a2c:	e039      	b.n	8005aa2 <Save_Data+0xee>
	}
	else if(flags.ADC_Full_Buffer)
 8005a2e:	4b50      	ldr	r3, [pc, #320]	@ (8005b70 <Save_Data+0x1bc>)
 8005a30:	781b      	ldrb	r3, [r3, #0]
 8005a32:	f003 0304 	and.w	r3, r3, #4
 8005a36:	b2db      	uxtb	r3, r3
 8005a38:	2b00      	cmp	r3, #0
 8005a3a:	d032      	beq.n	8005aa2 <Save_Data+0xee>
	{
		memcpy(Saving_Buffer + Address_Offset, &Pressure[PRESS_HALF_SAMPLES], PRESS_HALF_LEN);
 8005a3c:	4b4d      	ldr	r3, [pc, #308]	@ (8005b74 <Save_Data+0x1c0>)
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	461a      	mov	r2, r3
 8005a42:	4b4d      	ldr	r3, [pc, #308]	@ (8005b78 <Save_Data+0x1c4>)
 8005a44:	4413      	add	r3, r2
 8005a46:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 8005a4a:	494f      	ldr	r1, [pc, #316]	@ (8005b88 <Save_Data+0x1d4>)
 8005a4c:	4618      	mov	r0, r3
 8005a4e:	f010 fda5 	bl	801659c <memcpy>
		Last_Pressure = 0;
 8005a52:	4b4b      	ldr	r3, [pc, #300]	@ (8005b80 <Save_Data+0x1cc>)
 8005a54:	2200      	movs	r2, #0
 8005a56:	801a      	strh	r2, [r3, #0]
		for(int i = PRESS_HALF_SAMPLES; i < PRESS_FULL_SAMPLES; i++)
 8005a58:	23c8      	movs	r3, #200	@ 0xc8
 8005a5a:	623b      	str	r3, [r7, #32]
 8005a5c:	e00c      	b.n	8005a78 <Save_Data+0xc4>
		{
			Last_Pressure += Pressure[i];
 8005a5e:	4a47      	ldr	r2, [pc, #284]	@ (8005b7c <Save_Data+0x1c8>)
 8005a60:	6a3b      	ldr	r3, [r7, #32]
 8005a62:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8005a66:	4b46      	ldr	r3, [pc, #280]	@ (8005b80 <Save_Data+0x1cc>)
 8005a68:	881b      	ldrh	r3, [r3, #0]
 8005a6a:	4413      	add	r3, r2
 8005a6c:	b29a      	uxth	r2, r3
 8005a6e:	4b44      	ldr	r3, [pc, #272]	@ (8005b80 <Save_Data+0x1cc>)
 8005a70:	801a      	strh	r2, [r3, #0]
		for(int i = PRESS_HALF_SAMPLES; i < PRESS_FULL_SAMPLES; i++)
 8005a72:	6a3b      	ldr	r3, [r7, #32]
 8005a74:	3301      	adds	r3, #1
 8005a76:	623b      	str	r3, [r7, #32]
 8005a78:	6a3b      	ldr	r3, [r7, #32]
 8005a7a:	f5b3 7fc8 	cmp.w	r3, #400	@ 0x190
 8005a7e:	dbee      	blt.n	8005a5e <Save_Data+0xaa>
		}
		Last_Pressure = (uint16_t)(Last_Pressure / PRESS_HALF_SAMPLES);
 8005a80:	4b3f      	ldr	r3, [pc, #252]	@ (8005b80 <Save_Data+0x1cc>)
 8005a82:	881b      	ldrh	r3, [r3, #0]
 8005a84:	4a3f      	ldr	r2, [pc, #252]	@ (8005b84 <Save_Data+0x1d0>)
 8005a86:	fba2 2303 	umull	r2, r3, r2, r3
 8005a8a:	099b      	lsrs	r3, r3, #6
 8005a8c:	b29a      	uxth	r2, r3
 8005a8e:	4b3c      	ldr	r3, [pc, #240]	@ (8005b80 <Save_Data+0x1cc>)
 8005a90:	801a      	strh	r2, [r3, #0]
		Warning_Detection(&Pressure[PRESS_HALF_SAMPLES]);
 8005a92:	483d      	ldr	r0, [pc, #244]	@ (8005b88 <Save_Data+0x1d4>)
 8005a94:	f000 fb0c 	bl	80060b0 <Warning_Detection>
		flags.ADC_Full_Buffer = 0;
 8005a98:	4a35      	ldr	r2, [pc, #212]	@ (8005b70 <Save_Data+0x1bc>)
 8005a9a:	7813      	ldrb	r3, [r2, #0]
 8005a9c:	f023 0304 	bic.w	r3, r3, #4
 8005aa0:	7013      	strb	r3, [r2, #0]
	}
	flags.ADC_Complete = 0;
 8005aa2:	4a33      	ldr	r2, [pc, #204]	@ (8005b70 <Save_Data+0x1bc>)
 8005aa4:	7813      	ldrb	r3, [r2, #0]
 8005aa6:	f023 0301 	bic.w	r3, r3, #1
 8005aaa:	7013      	strb	r3, [r2, #0]
	Address_Offset += PRESS_HALF_LEN;
 8005aac:	4b31      	ldr	r3, [pc, #196]	@ (8005b74 <Save_Data+0x1c0>)
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	f503 73c8 	add.w	r3, r3, #400	@ 0x190
 8005ab4:	4a2f      	ldr	r2, [pc, #188]	@ (8005b74 <Save_Data+0x1c0>)
 8005ab6:	6013      	str	r3, [r2, #0]

	memcpy(Saving_Buffer + Address_Offset, Volume_Period, MAX_VOLUME_LEN);
 8005ab8:	4b2e      	ldr	r3, [pc, #184]	@ (8005b74 <Save_Data+0x1c0>)
 8005aba:	681b      	ldr	r3, [r3, #0]
 8005abc:	461a      	mov	r2, r3
 8005abe:	4b2e      	ldr	r3, [pc, #184]	@ (8005b78 <Save_Data+0x1c4>)
 8005ac0:	4413      	add	r3, r2
 8005ac2:	2228      	movs	r2, #40	@ 0x28
 8005ac4:	4931      	ldr	r1, [pc, #196]	@ (8005b8c <Save_Data+0x1d8>)
 8005ac6:	4618      	mov	r0, r3
 8005ac8:	f010 fd68 	bl	801659c <memcpy>
	uint8_t current_period_cnt = Period_cnt;
 8005acc:	4b30      	ldr	r3, [pc, #192]	@ (8005b90 <Save_Data+0x1dc>)
 8005ace:	781b      	ldrb	r3, [r3, #0]
 8005ad0:	75fb      	strb	r3, [r7, #23]
	Last_Volume = 0;
 8005ad2:	4b30      	ldr	r3, [pc, #192]	@ (8005b94 <Save_Data+0x1e0>)
 8005ad4:	2200      	movs	r2, #0
 8005ad6:	601a      	str	r2, [r3, #0]
	for(int i = 0; i < current_period_cnt; i++)
 8005ad8:	2300      	movs	r3, #0
 8005ada:	61fb      	str	r3, [r7, #28]
 8005adc:	e00b      	b.n	8005af6 <Save_Data+0x142>
	{
		Last_Volume += Volume_Period[i];
 8005ade:	4a2b      	ldr	r2, [pc, #172]	@ (8005b8c <Save_Data+0x1d8>)
 8005ae0:	69fb      	ldr	r3, [r7, #28]
 8005ae2:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8005ae6:	4b2b      	ldr	r3, [pc, #172]	@ (8005b94 <Save_Data+0x1e0>)
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	4413      	add	r3, r2
 8005aec:	4a29      	ldr	r2, [pc, #164]	@ (8005b94 <Save_Data+0x1e0>)
 8005aee:	6013      	str	r3, [r2, #0]
	for(int i = 0; i < current_period_cnt; i++)
 8005af0:	69fb      	ldr	r3, [r7, #28]
 8005af2:	3301      	adds	r3, #1
 8005af4:	61fb      	str	r3, [r7, #28]
 8005af6:	7dfb      	ldrb	r3, [r7, #23]
 8005af8:	69fa      	ldr	r2, [r7, #28]
 8005afa:	429a      	cmp	r2, r3
 8005afc:	dbef      	blt.n	8005ade <Save_Data+0x12a>
	}
	Last_Volume = (uint32_t)(Last_Volume / current_period_cnt);
 8005afe:	4b25      	ldr	r3, [pc, #148]	@ (8005b94 <Save_Data+0x1e0>)
 8005b00:	681a      	ldr	r2, [r3, #0]
 8005b02:	7dfb      	ldrb	r3, [r7, #23]
 8005b04:	fbb2 f3f3 	udiv	r3, r2, r3
 8005b08:	4a22      	ldr	r2, [pc, #136]	@ (8005b94 <Save_Data+0x1e0>)
 8005b0a:	6013      	str	r3, [r2, #0]
	memset(Volume_Period, 0, sizeof(Volume_Period));
 8005b0c:	2228      	movs	r2, #40	@ 0x28
 8005b0e:	2100      	movs	r1, #0
 8005b10:	481e      	ldr	r0, [pc, #120]	@ (8005b8c <Save_Data+0x1d8>)
 8005b12:	f010 fcbf 	bl	8016494 <memset>
	Period_cnt = 0;
 8005b16:	4b1e      	ldr	r3, [pc, #120]	@ (8005b90 <Save_Data+0x1dc>)
 8005b18:	2200      	movs	r2, #0
 8005b1a:	701a      	strb	r2, [r3, #0]
	Address_Offset += MAX_VOLUME_LEN;
 8005b1c:	4b15      	ldr	r3, [pc, #84]	@ (8005b74 <Save_Data+0x1c0>)
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	3328      	adds	r3, #40	@ 0x28
 8005b22:	4a14      	ldr	r2, [pc, #80]	@ (8005b74 <Save_Data+0x1c0>)
 8005b24:	6013      	str	r3, [r2, #0]

	if(sys.ACC_Present)
 8005b26:	4b1c      	ldr	r3, [pc, #112]	@ (8005b98 <Save_Data+0x1e4>)
 8005b28:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005b2c:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8005b30:	f003 0301 	and.w	r3, r3, #1
 8005b34:	b2db      	uxtb	r3, r3
 8005b36:	2b00      	cmp	r3, #0
 8005b38:	f000 809a 	beq.w	8005c70 <Save_Data+0x2bc>
	{
		memcpy(Saving_Buffer + Address_Offset, Acceleration, ACCELERATION_LEN);
 8005b3c:	4b0d      	ldr	r3, [pc, #52]	@ (8005b74 <Save_Data+0x1c0>)
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	461a      	mov	r2, r3
 8005b42:	4b0d      	ldr	r3, [pc, #52]	@ (8005b78 <Save_Data+0x1c4>)
 8005b44:	4413      	add	r3, r2
 8005b46:	4a15      	ldr	r2, [pc, #84]	@ (8005b9c <Save_Data+0x1e8>)
 8005b48:	4618      	mov	r0, r3
 8005b4a:	4611      	mov	r1, r2
 8005b4c:	f44f 63af 	mov.w	r3, #1400	@ 0x578
 8005b50:	461a      	mov	r2, r3
 8005b52:	f010 fd23 	bl	801659c <memcpy>
		Last_Acceleration.x = 0;
 8005b56:	4b12      	ldr	r3, [pc, #72]	@ (8005ba0 <Save_Data+0x1ec>)
 8005b58:	2200      	movs	r2, #0
 8005b5a:	805a      	strh	r2, [r3, #2]
		Last_Acceleration.y = 0;
 8005b5c:	4b10      	ldr	r3, [pc, #64]	@ (8005ba0 <Save_Data+0x1ec>)
 8005b5e:	2200      	movs	r2, #0
 8005b60:	809a      	strh	r2, [r3, #4]
		Last_Acceleration.z = 0;
 8005b62:	4b0f      	ldr	r3, [pc, #60]	@ (8005ba0 <Save_Data+0x1ec>)
 8005b64:	2200      	movs	r2, #0
 8005b66:	80da      	strh	r2, [r3, #6]
		for(int i = 0; i < ACCELERATION_LEN; i += 7)
 8005b68:	2300      	movs	r3, #0
 8005b6a:	61bb      	str	r3, [r7, #24]
 8005b6c:	e05c      	b.n	8005c28 <Save_Data+0x274>
 8005b6e:	bf00      	nop
 8005b70:	20001780 	.word	0x20001780
 8005b74:	20004958 	.word	0x20004958
 8005b78:	20004228 	.word	0x20004228
 8005b7c:	200038f0 	.word	0x200038f0
 8005b80:	200041b0 	.word	0x200041b0
 8005b84:	51eb851f 	.word	0x51eb851f
 8005b88:	20003a80 	.word	0x20003a80
 8005b8c:	20003c10 	.word	0x20003c10
 8005b90:	200038ec 	.word	0x200038ec
 8005b94:	200041b4 	.word	0x200041b4
 8005b98:	200005d8 	.word	0x200005d8
 8005b9c:	20003c38 	.word	0x20003c38
 8005ba0:	200041b8 	.word	0x200041b8
		{
			Last_Acceleration.x += Acceleration[i+1] | (Acceleration[i+2] << 8); 
 8005ba4:	4b7d      	ldr	r3, [pc, #500]	@ (8005d9c <Save_Data+0x3e8>)
 8005ba6:	885a      	ldrh	r2, [r3, #2]
 8005ba8:	69bb      	ldr	r3, [r7, #24]
 8005baa:	3301      	adds	r3, #1
 8005bac:	497c      	ldr	r1, [pc, #496]	@ (8005da0 <Save_Data+0x3ec>)
 8005bae:	5ccb      	ldrb	r3, [r1, r3]
 8005bb0:	b219      	sxth	r1, r3
 8005bb2:	69bb      	ldr	r3, [r7, #24]
 8005bb4:	3302      	adds	r3, #2
 8005bb6:	487a      	ldr	r0, [pc, #488]	@ (8005da0 <Save_Data+0x3ec>)
 8005bb8:	5cc3      	ldrb	r3, [r0, r3]
 8005bba:	b21b      	sxth	r3, r3
 8005bbc:	021b      	lsls	r3, r3, #8
 8005bbe:	b21b      	sxth	r3, r3
 8005bc0:	430b      	orrs	r3, r1
 8005bc2:	b21b      	sxth	r3, r3
 8005bc4:	b29b      	uxth	r3, r3
 8005bc6:	4413      	add	r3, r2
 8005bc8:	b29a      	uxth	r2, r3
 8005bca:	4b74      	ldr	r3, [pc, #464]	@ (8005d9c <Save_Data+0x3e8>)
 8005bcc:	805a      	strh	r2, [r3, #2]
			Last_Acceleration.y += Acceleration[i+3] | (Acceleration[i+4] << 8); 
 8005bce:	4b73      	ldr	r3, [pc, #460]	@ (8005d9c <Save_Data+0x3e8>)
 8005bd0:	889a      	ldrh	r2, [r3, #4]
 8005bd2:	69bb      	ldr	r3, [r7, #24]
 8005bd4:	3303      	adds	r3, #3
 8005bd6:	4972      	ldr	r1, [pc, #456]	@ (8005da0 <Save_Data+0x3ec>)
 8005bd8:	5ccb      	ldrb	r3, [r1, r3]
 8005bda:	b219      	sxth	r1, r3
 8005bdc:	69bb      	ldr	r3, [r7, #24]
 8005bde:	3304      	adds	r3, #4
 8005be0:	486f      	ldr	r0, [pc, #444]	@ (8005da0 <Save_Data+0x3ec>)
 8005be2:	5cc3      	ldrb	r3, [r0, r3]
 8005be4:	b21b      	sxth	r3, r3
 8005be6:	021b      	lsls	r3, r3, #8
 8005be8:	b21b      	sxth	r3, r3
 8005bea:	430b      	orrs	r3, r1
 8005bec:	b21b      	sxth	r3, r3
 8005bee:	b29b      	uxth	r3, r3
 8005bf0:	4413      	add	r3, r2
 8005bf2:	b29a      	uxth	r2, r3
 8005bf4:	4b69      	ldr	r3, [pc, #420]	@ (8005d9c <Save_Data+0x3e8>)
 8005bf6:	809a      	strh	r2, [r3, #4]
			Last_Acceleration.z += Acceleration[i+5] | (Acceleration[i+6] << 8); 
 8005bf8:	4b68      	ldr	r3, [pc, #416]	@ (8005d9c <Save_Data+0x3e8>)
 8005bfa:	88da      	ldrh	r2, [r3, #6]
 8005bfc:	69bb      	ldr	r3, [r7, #24]
 8005bfe:	3305      	adds	r3, #5
 8005c00:	4967      	ldr	r1, [pc, #412]	@ (8005da0 <Save_Data+0x3ec>)
 8005c02:	5ccb      	ldrb	r3, [r1, r3]
 8005c04:	b219      	sxth	r1, r3
 8005c06:	69bb      	ldr	r3, [r7, #24]
 8005c08:	3306      	adds	r3, #6
 8005c0a:	4865      	ldr	r0, [pc, #404]	@ (8005da0 <Save_Data+0x3ec>)
 8005c0c:	5cc3      	ldrb	r3, [r0, r3]
 8005c0e:	b21b      	sxth	r3, r3
 8005c10:	021b      	lsls	r3, r3, #8
 8005c12:	b21b      	sxth	r3, r3
 8005c14:	430b      	orrs	r3, r1
 8005c16:	b21b      	sxth	r3, r3
 8005c18:	b29b      	uxth	r3, r3
 8005c1a:	4413      	add	r3, r2
 8005c1c:	b29a      	uxth	r2, r3
 8005c1e:	4b5f      	ldr	r3, [pc, #380]	@ (8005d9c <Save_Data+0x3e8>)
 8005c20:	80da      	strh	r2, [r3, #6]
		for(int i = 0; i < ACCELERATION_LEN; i += 7)
 8005c22:	69bb      	ldr	r3, [r7, #24]
 8005c24:	3307      	adds	r3, #7
 8005c26:	61bb      	str	r3, [r7, #24]
 8005c28:	69bb      	ldr	r3, [r7, #24]
 8005c2a:	f5b3 6faf 	cmp.w	r3, #1400	@ 0x578
 8005c2e:	dbb9      	blt.n	8005ba4 <Save_Data+0x1f0>
		}
		Last_Acceleration.x = (uint16_t)(Last_Acceleration.x / (ACCELERATION_LEN / 7));
 8005c30:	4b5a      	ldr	r3, [pc, #360]	@ (8005d9c <Save_Data+0x3e8>)
 8005c32:	885b      	ldrh	r3, [r3, #2]
 8005c34:	4a5b      	ldr	r2, [pc, #364]	@ (8005da4 <Save_Data+0x3f0>)
 8005c36:	fba2 2303 	umull	r2, r3, r2, r3
 8005c3a:	099b      	lsrs	r3, r3, #6
 8005c3c:	b29a      	uxth	r2, r3
 8005c3e:	4b57      	ldr	r3, [pc, #348]	@ (8005d9c <Save_Data+0x3e8>)
 8005c40:	805a      	strh	r2, [r3, #2]
		Last_Acceleration.y = (uint16_t)(Last_Acceleration.y / (ACCELERATION_LEN / 7));
 8005c42:	4b56      	ldr	r3, [pc, #344]	@ (8005d9c <Save_Data+0x3e8>)
 8005c44:	889b      	ldrh	r3, [r3, #4]
 8005c46:	4a57      	ldr	r2, [pc, #348]	@ (8005da4 <Save_Data+0x3f0>)
 8005c48:	fba2 2303 	umull	r2, r3, r2, r3
 8005c4c:	099b      	lsrs	r3, r3, #6
 8005c4e:	b29a      	uxth	r2, r3
 8005c50:	4b52      	ldr	r3, [pc, #328]	@ (8005d9c <Save_Data+0x3e8>)
 8005c52:	809a      	strh	r2, [r3, #4]
		Last_Acceleration.z = (uint16_t)(Last_Acceleration.z / (ACCELERATION_LEN / 7));
 8005c54:	4b51      	ldr	r3, [pc, #324]	@ (8005d9c <Save_Data+0x3e8>)
 8005c56:	88db      	ldrh	r3, [r3, #6]
 8005c58:	4a52      	ldr	r2, [pc, #328]	@ (8005da4 <Save_Data+0x3f0>)
 8005c5a:	fba2 2303 	umull	r2, r3, r2, r3
 8005c5e:	099b      	lsrs	r3, r3, #6
 8005c60:	b29a      	uxth	r2, r3
 8005c62:	4b4e      	ldr	r3, [pc, #312]	@ (8005d9c <Save_Data+0x3e8>)
 8005c64:	80da      	strh	r2, [r3, #6]
		flags.ACC_Complete = 0;
 8005c66:	4a50      	ldr	r2, [pc, #320]	@ (8005da8 <Save_Data+0x3f4>)
 8005c68:	7813      	ldrb	r3, [r2, #0]
 8005c6a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005c6e:	7013      	strb	r3, [r2, #0]
	}
	Address_Offset += ACCELERATION_LEN;
 8005c70:	4b4e      	ldr	r3, [pc, #312]	@ (8005dac <Save_Data+0x3f8>)
 8005c72:	681b      	ldr	r3, [r3, #0]
 8005c74:	f503 63af 	add.w	r3, r3, #1400	@ 0x578
 8005c78:	4a4c      	ldr	r2, [pc, #304]	@ (8005dac <Save_Data+0x3f8>)
 8005c7a:	6013      	str	r3, [r2, #0]

	INA3221_Read_Measure(&Supply);
 8005c7c:	484c      	ldr	r0, [pc, #304]	@ (8005db0 <Save_Data+0x3fc>)
 8005c7e:	f7fb f9d3 	bl	8001028 <INA3221_Read_Measure>
	uint16_t new_temp = 0;
 8005c82:	2300      	movs	r3, #0
 8005c84:	82bb      	strh	r3, [r7, #20]
	if((new_temp = Read_Temperature()) != 0)
 8005c86:	f7fb f96f 	bl	8000f68 <Read_Temperature>
 8005c8a:	4603      	mov	r3, r0
 8005c8c:	82bb      	strh	r3, [r7, #20]
 8005c8e:	8abb      	ldrh	r3, [r7, #20]
 8005c90:	2b00      	cmp	r3, #0
 8005c92:	d002      	beq.n	8005c9a <Save_Data+0x2e6>
	{
		Temperature = new_temp;
 8005c94:	4a47      	ldr	r2, [pc, #284]	@ (8005db4 <Save_Data+0x400>)
 8005c96:	8abb      	ldrh	r3, [r7, #20]
 8005c98:	8013      	strh	r3, [r2, #0]
	}
	BC_MultiRead_Reg(REG3B_VBAT_ADC, &Vbatt);
 8005c9a:	4947      	ldr	r1, [pc, #284]	@ (8005db8 <Save_Data+0x404>)
 8005c9c:	203b      	movs	r0, #59	@ 0x3b
 8005c9e:	f7fc fd65 	bl	800276c <BC_MultiRead_Reg>
  __ASM volatile ("cpsid i" : : : "memory");
 8005ca2:	b672      	cpsid	i
}
 8005ca4:	bf00      	nop

	__disable_irq();
	Compressed_Sample_Typedef sample;
    sample.compressed_size = Compress_Sample(Saving_Buffer, SAVING_BUFFER_LEN, compressed_data);
 8005ca6:	4638      	mov	r0, r7
 8005ca8:	4b44      	ldr	r3, [pc, #272]	@ (8005dbc <Save_Data+0x408>)
 8005caa:	f44f 62e6 	mov.w	r2, #1840	@ 0x730
 8005cae:	4944      	ldr	r1, [pc, #272]	@ (8005dc0 <Save_Data+0x40c>)
 8005cb0:	f000 fcfa 	bl	80066a8 <Compress_Sample>
 8005cb4:	f107 030c 	add.w	r3, r7, #12
 8005cb8:	463a      	mov	r2, r7
 8005cba:	6810      	ldr	r0, [r2, #0]
 8005cbc:	6018      	str	r0, [r3, #0]
 8005cbe:	8892      	ldrh	r2, [r2, #4]
 8005cc0:	809a      	strh	r2, [r3, #4]
	RAM_Save_Measure(&sample, compressed_data);
 8005cc2:	f107 030c 	add.w	r3, r7, #12
 8005cc6:	493d      	ldr	r1, [pc, #244]	@ (8005dbc <Save_Data+0x408>)
 8005cc8:	4618      	mov	r0, r3
 8005cca:	f000 fa55 	bl	8006178 <RAM_Save_Measure>
  __ASM volatile ("cpsie i" : : : "memory");
 8005cce:	b662      	cpsie	i
}
 8005cd0:	bf00      	nop
	__enable_irq();

	Address_Offset = 0;
 8005cd2:	4b36      	ldr	r3, [pc, #216]	@ (8005dac <Save_Data+0x3f8>)
 8005cd4:	2200      	movs	r2, #0
 8005cd6:	601a      	str	r2, [r3, #0]

	if(flags.Hammer_Detected || flags.Threshold_Detected)
 8005cd8:	4b33      	ldr	r3, [pc, #204]	@ (8005da8 <Save_Data+0x3f4>)
 8005cda:	781b      	ldrb	r3, [r3, #0]
 8005cdc:	f003 0308 	and.w	r3, r3, #8
 8005ce0:	b2db      	uxtb	r3, r3
 8005ce2:	2b00      	cmp	r3, #0
 8005ce4:	d106      	bne.n	8005cf4 <Save_Data+0x340>
 8005ce6:	4b30      	ldr	r3, [pc, #192]	@ (8005da8 <Save_Data+0x3f4>)
 8005ce8:	781b      	ldrb	r3, [r3, #0]
 8005cea:	f003 0310 	and.w	r3, r3, #16
 8005cee:	b2db      	uxtb	r3, r3
 8005cf0:	2b00      	cmp	r3, #0
 8005cf2:	d04e      	beq.n	8005d92 <Save_Data+0x3de>
	{
		Cycles_After_Warning++;
 8005cf4:	4b33      	ldr	r3, [pc, #204]	@ (8005dc4 <Save_Data+0x410>)
 8005cf6:	881b      	ldrh	r3, [r3, #0]
 8005cf8:	3301      	adds	r3, #1
 8005cfa:	b29a      	uxth	r2, r3
 8005cfc:	4b31      	ldr	r3, [pc, #196]	@ (8005dc4 <Save_Data+0x410>)
 8005cfe:	801a      	strh	r2, [r3, #0]
		if(Cycles_After_Warning >= config.buffering_secs * (config.samp_freq / ACC_FIFO_WATERMARK))
 8005d00:	4b30      	ldr	r3, [pc, #192]	@ (8005dc4 <Save_Data+0x410>)
 8005d02:	881b      	ldrh	r3, [r3, #0]
 8005d04:	4619      	mov	r1, r3
 8005d06:	4b30      	ldr	r3, [pc, #192]	@ (8005dc8 <Save_Data+0x414>)
 8005d08:	791b      	ldrb	r3, [r3, #4]
 8005d0a:	4618      	mov	r0, r3
 8005d0c:	4b2e      	ldr	r3, [pc, #184]	@ (8005dc8 <Save_Data+0x414>)
 8005d0e:	885b      	ldrh	r3, [r3, #2]
 8005d10:	4a24      	ldr	r2, [pc, #144]	@ (8005da4 <Save_Data+0x3f0>)
 8005d12:	fba2 2303 	umull	r2, r3, r2, r3
 8005d16:	099b      	lsrs	r3, r3, #6
 8005d18:	b29b      	uxth	r3, r3
 8005d1a:	fb00 f303 	mul.w	r3, r0, r3
 8005d1e:	4299      	cmp	r1, r3
 8005d20:	db37      	blt.n	8005d92 <Save_Data+0x3de>
		{
			if(!flags.CMD.Measure_Request)
 8005d22:	4b21      	ldr	r3, [pc, #132]	@ (8005da8 <Save_Data+0x3f4>)
 8005d24:	789b      	ldrb	r3, [r3, #2]
 8005d26:	f003 0302 	and.w	r3, r3, #2
 8005d2a:	b2db      	uxtb	r3, r3
 8005d2c:	2b00      	cmp	r3, #0
 8005d2e:	d130      	bne.n	8005d92 <Save_Data+0x3de>
			{
				if (!flags.Meas_TransferInProgress)
 8005d30:	4b1d      	ldr	r3, [pc, #116]	@ (8005da8 <Save_Data+0x3f4>)
 8005d32:	785b      	ldrb	r3, [r3, #1]
 8005d34:	f003 0304 	and.w	r3, r3, #4
 8005d38:	b2db      	uxtb	r3, r3
 8005d3a:	2b00      	cmp	r3, #0
 8005d3c:	d129      	bne.n	8005d92 <Save_Data+0x3de>
				{
					LED_Start(RED_LED, FAST, LOW);
 8005d3e:	2207      	movs	r2, #7
 8005d40:	2100      	movs	r1, #0
 8005d42:	2004      	movs	r0, #4
 8005d44:	f7fd fd4c 	bl	80037e0 <LED_Start>
					Switch_Buffer();
 8005d48:	f000 f842 	bl	8005dd0 <Switch_Buffer>
					flags.CMD.Measure_Request = 1;
 8005d4c:	4a16      	ldr	r2, [pc, #88]	@ (8005da8 <Save_Data+0x3f4>)
 8005d4e:	7893      	ldrb	r3, [r2, #2]
 8005d50:	f043 0302 	orr.w	r3, r3, #2
 8005d54:	7093      	strb	r3, [r2, #2]
					Send_Measure_Addr = 0;
 8005d56:	4b1d      	ldr	r3, [pc, #116]	@ (8005dcc <Save_Data+0x418>)
 8005d58:	2200      	movs	r2, #0
 8005d5a:	601a      	str	r2, [r3, #0]
					Cycles_After_Warning = 0;
 8005d5c:	4b19      	ldr	r3, [pc, #100]	@ (8005dc4 <Save_Data+0x410>)
 8005d5e:	2200      	movs	r2, #0
 8005d60:	801a      	strh	r2, [r3, #0]
					if(flags.Hammer_Detected)
 8005d62:	4b11      	ldr	r3, [pc, #68]	@ (8005da8 <Save_Data+0x3f4>)
 8005d64:	781b      	ldrb	r3, [r3, #0]
 8005d66:	f003 0308 	and.w	r3, r3, #8
 8005d6a:	b2db      	uxtb	r3, r3
 8005d6c:	2b00      	cmp	r3, #0
 8005d6e:	d004      	beq.n	8005d7a <Save_Data+0x3c6>
					{
						flags.Hammer_Detected = 0;
 8005d70:	4a0d      	ldr	r2, [pc, #52]	@ (8005da8 <Save_Data+0x3f4>)
 8005d72:	7813      	ldrb	r3, [r2, #0]
 8005d74:	f023 0308 	bic.w	r3, r3, #8
 8005d78:	7013      	strb	r3, [r2, #0]
					}
					if(flags.Threshold_Detected)
 8005d7a:	4b0b      	ldr	r3, [pc, #44]	@ (8005da8 <Save_Data+0x3f4>)
 8005d7c:	781b      	ldrb	r3, [r3, #0]
 8005d7e:	f003 0310 	and.w	r3, r3, #16
 8005d82:	b2db      	uxtb	r3, r3
 8005d84:	2b00      	cmp	r3, #0
 8005d86:	d004      	beq.n	8005d92 <Save_Data+0x3de>
					{
						flags.Threshold_Detected = 0;
 8005d88:	4a07      	ldr	r2, [pc, #28]	@ (8005da8 <Save_Data+0x3f4>)
 8005d8a:	7813      	ldrb	r3, [r2, #0]
 8005d8c:	f023 0310 	bic.w	r3, r3, #16
 8005d90:	7013      	strb	r3, [r2, #0]
				
			}
		}
	}

}
 8005d92:	bf00      	nop
 8005d94:	3728      	adds	r7, #40	@ 0x28
 8005d96:	46bd      	mov	sp, r7
 8005d98:	bd80      	pop	{r7, pc}
 8005d9a:	bf00      	nop
 8005d9c:	200041b8 	.word	0x200041b8
 8005da0:	20003c38 	.word	0x20003c38
 8005da4:	51eb851f 	.word	0x51eb851f
 8005da8:	20001780 	.word	0x20001780
 8005dac:	20004958 	.word	0x20004958
 8005db0:	200038e0 	.word	0x200038e0
 8005db4:	200041c0 	.word	0x200041c0
 8005db8:	200041c2 	.word	0x200041c2
 8005dbc:	20005788 	.word	0x20005788
 8005dc0:	20004228 	.word	0x20004228
 8005dc4:	2000495c 	.word	0x2000495c
 8005dc8:	20001784 	.word	0x20001784
 8005dcc:	20004968 	.word	0x20004968

08005dd0 <Switch_Buffer>:

/*-----CAMBIO BUFFER-----*/
void Switch_Buffer(void)
{
 8005dd0:	b480      	push	{r7}
 8005dd2:	b083      	sub	sp, #12
 8005dd4:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8005dd6:	b672      	cpsid	i
}
 8005dd8:	bf00      	nop
	__disable_irq();
    uint32_t temp_len = sys.Current_RAM_Len;
 8005dda:	4b27      	ldr	r3, [pc, #156]	@ (8005e78 <Switch_Buffer+0xa8>)
 8005ddc:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005de0:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 8005de4:	607b      	str	r3, [r7, #4]
    sys.Inactive_RAM_Len = temp_len;
 8005de6:	4b24      	ldr	r3, [pc, #144]	@ (8005e78 <Switch_Buffer+0xa8>)
 8005de8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005dec:	461a      	mov	r2, r3
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	f8c2 30d0 	str.w	r3, [r2, #208]	@ 0xd0

    if (sys.Active_RAM_Buffer == 0) 
 8005df4:	4b20      	ldr	r3, [pc, #128]	@ (8005e78 <Switch_Buffer+0xa8>)
 8005df6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005dfa:	f893 30c0 	ldrb.w	r3, [r3, #192]	@ 0xc0
 8005dfe:	2b00      	cmp	r3, #0
 8005e00:	d116      	bne.n	8005e30 <Switch_Buffer+0x60>
	{
		sys.RAM_Buffer_Base_tosend = RAM_SECOND_BUFFER_ADD;
 8005e02:	4b1d      	ldr	r3, [pc, #116]	@ (8005e78 <Switch_Buffer+0xa8>)
 8005e04:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005e08:	461a      	mov	r2, r3
 8005e0a:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8005e0e:	f8c2 30cc 	str.w	r3, [r2, #204]	@ 0xcc
        sys.Active_RAM_Buffer = 1;
 8005e12:	4b19      	ldr	r3, [pc, #100]	@ (8005e78 <Switch_Buffer+0xa8>)
 8005e14:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005e18:	2201      	movs	r2, #1
 8005e1a:	f883 20c0 	strb.w	r2, [r3, #192]	@ 0xc0
        sys.Current_RAM_Base = RAM_SECOND_BUFFER_ADD;
 8005e1e:	4b16      	ldr	r3, [pc, #88]	@ (8005e78 <Switch_Buffer+0xa8>)
 8005e20:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005e24:	461a      	mov	r2, r3
 8005e26:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8005e2a:	f8c2 30c4 	str.w	r3, [r2, #196]	@ 0xc4
 8005e2e:	e013      	b.n	8005e58 <Switch_Buffer+0x88>
    } 
	else 
	{
		sys.RAM_Buffer_Base_tosend = RAM_FIRST_BUFFER_ADD;
 8005e30:	4b11      	ldr	r3, [pc, #68]	@ (8005e78 <Switch_Buffer+0xa8>)
 8005e32:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005e36:	461a      	mov	r2, r3
 8005e38:	2300      	movs	r3, #0
 8005e3a:	f8c2 30cc 	str.w	r3, [r2, #204]	@ 0xcc
        sys.Active_RAM_Buffer = 0;
 8005e3e:	4b0e      	ldr	r3, [pc, #56]	@ (8005e78 <Switch_Buffer+0xa8>)
 8005e40:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005e44:	2200      	movs	r2, #0
 8005e46:	f883 20c0 	strb.w	r2, [r3, #192]	@ 0xc0
        sys.Current_RAM_Base = RAM_FIRST_BUFFER_ADD;
 8005e4a:	4b0b      	ldr	r3, [pc, #44]	@ (8005e78 <Switch_Buffer+0xa8>)
 8005e4c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005e50:	461a      	mov	r2, r3
 8005e52:	2300      	movs	r3, #0
 8005e54:	f8c2 30c4 	str.w	r3, [r2, #196]	@ 0xc4
    }

    sys.Current_RAM_Len = 0;
 8005e58:	4b07      	ldr	r3, [pc, #28]	@ (8005e78 <Switch_Buffer+0xa8>)
 8005e5a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005e5e:	461a      	mov	r2, r3
 8005e60:	2300      	movs	r3, #0
 8005e62:	f8c2 30c8 	str.w	r3, [r2, #200]	@ 0xc8
  __ASM volatile ("cpsie i" : : : "memory");
 8005e66:	b662      	cpsie	i
}
 8005e68:	bf00      	nop
	__enable_irq();
}
 8005e6a:	bf00      	nop
 8005e6c:	370c      	adds	r7, #12
 8005e6e:	46bd      	mov	sp, r7
 8005e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e74:	4770      	bx	lr
 8005e76:	bf00      	nop
 8005e78:	200005d8 	.word	0x200005d8

08005e7c <Erase_RAM_Data>:

/*-----CANCELLAZIONE DATI RAM-----*/
void Erase_RAM_Data(void)
{
 8005e7c:	b580      	push	{r7, lr}
 8005e7e:	f5ad 6d81 	sub.w	sp, sp, #1032	@ 0x408
 8005e82:	af00      	add	r7, sp, #0
	uint8_t zero_buffer[1024] = {0};
 8005e84:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8005e88:	f2a3 4304 	subw	r3, r3, #1028	@ 0x404
 8005e8c:	4618      	mov	r0, r3
 8005e8e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8005e92:	461a      	mov	r2, r3
 8005e94:	2100      	movs	r1, #0
 8005e96:	f010 fafd 	bl	8016494 <memset>
	for (uint32_t addr = 0; addr < 0x800000; addr += sizeof(zero_buffer)) 
 8005e9a:	2300      	movs	r3, #0
 8005e9c:	f8c7 3404 	str.w	r3, [r7, #1028]	@ 0x404
 8005ea0:	e00d      	b.n	8005ebe <Erase_RAM_Data+0x42>
	{
		RAM_Write(addr, sizeof(zero_buffer), zero_buffer);
 8005ea2:	1d3b      	adds	r3, r7, #4
 8005ea4:	461a      	mov	r2, r3
 8005ea6:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8005eaa:	f8d7 0404 	ldr.w	r0, [r7, #1028]	@ 0x404
 8005eae:	f001 fb8b 	bl	80075c8 <RAM_Write>
	for (uint32_t addr = 0; addr < 0x800000; addr += sizeof(zero_buffer)) 
 8005eb2:	f8d7 3404 	ldr.w	r3, [r7, #1028]	@ 0x404
 8005eb6:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8005eba:	f8c7 3404 	str.w	r3, [r7, #1028]	@ 0x404
 8005ebe:	f8d7 3404 	ldr.w	r3, [r7, #1028]	@ 0x404
 8005ec2:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8005ec6:	d3ec      	bcc.n	8005ea2 <Erase_RAM_Data+0x26>
	}
}
 8005ec8:	bf00      	nop
 8005eca:	bf00      	nop
 8005ecc:	f507 6781 	add.w	r7, r7, #1032	@ 0x408
 8005ed0:	46bd      	mov	sp, r7
 8005ed2:	bd80      	pop	{r7, pc}

08005ed4 <Start_Measure>:


/*-----AVVIO MISURA-----*/
void Start_Measure(void)
{
 8005ed4:	b580      	push	{r7, lr}
 8005ed6:	af00      	add	r7, sp, #0
	Erase_RAM_Data();
 8005ed8:	f7ff ffd0 	bl	8005e7c <Erase_RAM_Data>
	sys.RAM_Samples_Number = (config.samp_freq / ACC_FIFO_WATERMARK) * config.buffering_secs * 2;
 8005edc:	4b50      	ldr	r3, [pc, #320]	@ (8006020 <Start_Measure+0x14c>)
 8005ede:	885b      	ldrh	r3, [r3, #2]
 8005ee0:	4a50      	ldr	r2, [pc, #320]	@ (8006024 <Start_Measure+0x150>)
 8005ee2:	fba2 2303 	umull	r2, r3, r2, r3
 8005ee6:	099b      	lsrs	r3, r3, #6
 8005ee8:	b29b      	uxth	r3, r3
 8005eea:	461a      	mov	r2, r3
 8005eec:	4b4c      	ldr	r3, [pc, #304]	@ (8006020 <Start_Measure+0x14c>)
 8005eee:	791b      	ldrb	r3, [r3, #4]
 8005ef0:	fb02 f303 	mul.w	r3, r2, r3
 8005ef4:	005b      	lsls	r3, r3, #1
 8005ef6:	461a      	mov	r2, r3
 8005ef8:	4b4b      	ldr	r3, [pc, #300]	@ (8006028 <Start_Measure+0x154>)
 8005efa:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005efe:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
	sys.Active_RAM_Buffer = 0;
 8005f02:	4b49      	ldr	r3, [pc, #292]	@ (8006028 <Start_Measure+0x154>)
 8005f04:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005f08:	2200      	movs	r2, #0
 8005f0a:	f883 20c0 	strb.w	r2, [r3, #192]	@ 0xc0
	sys.Inactive_RAM_Len = 0;
 8005f0e:	4b46      	ldr	r3, [pc, #280]	@ (8006028 <Start_Measure+0x154>)
 8005f10:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005f14:	461a      	mov	r2, r3
 8005f16:	2300      	movs	r3, #0
 8005f18:	f8c2 30d0 	str.w	r3, [r2, #208]	@ 0xd0
	sys.Current_RAM_Base = RAM_FIRST_BUFFER_ADD;
 8005f1c:	4b42      	ldr	r3, [pc, #264]	@ (8006028 <Start_Measure+0x154>)
 8005f1e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005f22:	461a      	mov	r2, r3
 8005f24:	2300      	movs	r3, #0
 8005f26:	f8c2 30c4 	str.w	r3, [r2, #196]	@ 0xc4
	sys.Current_RAM_Len = 0;
 8005f2a:	4b3f      	ldr	r3, [pc, #252]	@ (8006028 <Start_Measure+0x154>)
 8005f2c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005f30:	461a      	mov	r2, r3
 8005f32:	2300      	movs	r3, #0
 8005f34:	f8c2 30c8 	str.w	r3, [r2, #200]	@ 0xc8
	flags.SIM_isConnected = 1;
 8005f38:	4a3c      	ldr	r2, [pc, #240]	@ (800602c <Start_Measure+0x158>)
 8005f3a:	7853      	ldrb	r3, [r2, #1]
 8005f3c:	f043 0310 	orr.w	r3, r3, #16
 8005f40:	7053      	strb	r3, [r2, #1]
	memset(Pressure, 0, sizeof(Pressure));
 8005f42:	f44f 7248 	mov.w	r2, #800	@ 0x320
 8005f46:	2100      	movs	r1, #0
 8005f48:	4839      	ldr	r0, [pc, #228]	@ (8006030 <Start_Measure+0x15c>)
 8005f4a:	f010 faa3 	bl	8016494 <memset>
	memset(Volume_Period, 0, sizeof(Volume_Period));
 8005f4e:	2228      	movs	r2, #40	@ 0x28
 8005f50:	2100      	movs	r1, #0
 8005f52:	4838      	ldr	r0, [pc, #224]	@ (8006034 <Start_Measure+0x160>)
 8005f54:	f010 fa9e 	bl	8016494 <memset>
	memset(Acceleration, 0, sizeof(Acceleration));
 8005f58:	f44f 62af 	mov.w	r2, #1400	@ 0x578
 8005f5c:	2100      	movs	r1, #0
 8005f5e:	4836      	ldr	r0, [pc, #216]	@ (8006038 <Start_Measure+0x164>)
 8005f60:	f010 fa98 	bl	8016494 <memset>
	memset(&Supply, 0, sizeof(Supply));
 8005f64:	220c      	movs	r2, #12
 8005f66:	2100      	movs	r1, #0
 8005f68:	4834      	ldr	r0, [pc, #208]	@ (800603c <Start_Measure+0x168>)
 8005f6a:	f010 fa93 	bl	8016494 <memset>
	Temperature = 0;
 8005f6e:	4b34      	ldr	r3, [pc, #208]	@ (8006040 <Start_Measure+0x16c>)
 8005f70:	2200      	movs	r2, #0
 8005f72:	801a      	strh	r2, [r3, #0]
	Saved_Bytes = 0;
 8005f74:	4b33      	ldr	r3, [pc, #204]	@ (8006044 <Start_Measure+0x170>)
 8005f76:	2200      	movs	r2, #0
 8005f78:	601a      	str	r2, [r3, #0]
	Saved_Samples = 0;
 8005f7a:	4b33      	ldr	r3, [pc, #204]	@ (8006048 <Start_Measure+0x174>)
 8005f7c:	2200      	movs	r2, #0
 8005f7e:	801a      	strh	r2, [r3, #0]
	Address_Offset = 0;
 8005f80:	4b32      	ldr	r3, [pc, #200]	@ (800604c <Start_Measure+0x178>)
 8005f82:	2200      	movs	r2, #0
 8005f84:	601a      	str	r2, [r3, #0]
	Cycles_After_Warning = 0;
 8005f86:	4b32      	ldr	r3, [pc, #200]	@ (8006050 <Start_Measure+0x17c>)
 8005f88:	2200      	movs	r2, #0
 8005f8a:	801a      	strh	r2, [r3, #0]
	Clear_Flags();
 8005f8c:	f001 f8c8 	bl	8007120 <Clear_Flags>

	ADC_TIMER->Instance->PSC = 100 - 1;
 8005f90:	4b30      	ldr	r3, [pc, #192]	@ (8006054 <Start_Measure+0x180>)
 8005f92:	681b      	ldr	r3, [r3, #0]
 8005f94:	2263      	movs	r2, #99	@ 0x63
 8005f96:	629a      	str	r2, [r3, #40]	@ 0x28
	ADC_TIMER->Instance->ARR = (uint32_t)(SystemCoreClock / (ADC_TIMER->Instance->PSC * config.samp_freq)) - 1;
 8005f98:	4b2f      	ldr	r3, [pc, #188]	@ (8006058 <Start_Measure+0x184>)
 8005f9a:	681a      	ldr	r2, [r3, #0]
 8005f9c:	4b2d      	ldr	r3, [pc, #180]	@ (8006054 <Start_Measure+0x180>)
 8005f9e:	681b      	ldr	r3, [r3, #0]
 8005fa0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005fa2:	491f      	ldr	r1, [pc, #124]	@ (8006020 <Start_Measure+0x14c>)
 8005fa4:	8849      	ldrh	r1, [r1, #2]
 8005fa6:	fb01 f303 	mul.w	r3, r1, r3
 8005faa:	fbb2 f2f3 	udiv	r2, r2, r3
 8005fae:	4b29      	ldr	r3, [pc, #164]	@ (8006054 <Start_Measure+0x180>)
 8005fb0:	681b      	ldr	r3, [r3, #0]
 8005fb2:	3a01      	subs	r2, #1
 8005fb4:	62da      	str	r2, [r3, #44]	@ 0x2c
	ACC_TIMER->Instance->ARR = (uint32_t)(config.samp_freq / 25) - 1;
 8005fb6:	4b1a      	ldr	r3, [pc, #104]	@ (8006020 <Start_Measure+0x14c>)
 8005fb8:	885b      	ldrh	r3, [r3, #2]
 8005fba:	4a1a      	ldr	r2, [pc, #104]	@ (8006024 <Start_Measure+0x150>)
 8005fbc:	fba2 2303 	umull	r2, r3, r2, r3
 8005fc0:	08db      	lsrs	r3, r3, #3
 8005fc2:	b29b      	uxth	r3, r3
 8005fc4:	461a      	mov	r2, r3
 8005fc6:	4b25      	ldr	r3, [pc, #148]	@ (800605c <Start_Measure+0x188>)
 8005fc8:	681b      	ldr	r3, [r3, #0]
 8005fca:	3a01      	subs	r2, #1
 8005fcc:	62da      	str	r2, [r3, #44]	@ 0x2c
	ACC_TIMER->Instance->CCR3 = (uint32_t)((ACC_TIMER->Instance->ARR + 1) / 2);
 8005fce:	4b23      	ldr	r3, [pc, #140]	@ (800605c <Start_Measure+0x188>)
 8005fd0:	681b      	ldr	r3, [r3, #0]
 8005fd2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005fd4:	1c5a      	adds	r2, r3, #1
 8005fd6:	4b21      	ldr	r3, [pc, #132]	@ (800605c <Start_Measure+0x188>)
 8005fd8:	681b      	ldr	r3, [r3, #0]
 8005fda:	0852      	lsrs	r2, r2, #1
 8005fdc:	63da      	str	r2, [r3, #60]	@ 0x3c
	if(Acc_Init(&acc, config.samp_freq) != HAL_OK)
 8005fde:	4b10      	ldr	r3, [pc, #64]	@ (8006020 <Start_Measure+0x14c>)
 8005fe0:	885b      	ldrh	r3, [r3, #2]
 8005fe2:	4619      	mov	r1, r3
 8005fe4:	481e      	ldr	r0, [pc, #120]	@ (8006060 <Start_Measure+0x18c>)
 8005fe6:	f7fd fa3b 	bl	8003460 <Acc_Init>
 8005fea:	4603      	mov	r3, r0
 8005fec:	2b00      	cmp	r3, #0
 8005fee:	d003      	beq.n	8005ff8 <Start_Measure+0x124>
	{
		state = IDLE;
 8005ff0:	4b1c      	ldr	r3, [pc, #112]	@ (8006064 <Start_Measure+0x190>)
 8005ff2:	2200      	movs	r2, #0
 8005ff4:	701a      	strb	r2, [r3, #0]
		return;
 8005ff6:	e011      	b.n	800601c <Start_Measure+0x148>
	}

	HAL_TIM_IC_Start_IT(VOLUME_TIMER, TIM_CHANNEL_1);
 8005ff8:	2100      	movs	r1, #0
 8005ffa:	481b      	ldr	r0, [pc, #108]	@ (8006068 <Start_Measure+0x194>)
 8005ffc:	f00d f9c6 	bl	801338c <HAL_TIM_IC_Start_IT>
	HAL_TIM_PWM_Start(ACC_TIMER, TIM_CHANNEL_3);
 8006000:	2108      	movs	r1, #8
 8006002:	4816      	ldr	r0, [pc, #88]	@ (800605c <Start_Measure+0x188>)
 8006004:	f00c ffce 	bl	8012fa4 <HAL_TIM_PWM_Start>
	HAL_ADC_Start_DMA(PRESSURE_ADC, (uint32_t*)&Pressure, PRESS_FULL_SAMPLES);
 8006008:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 800600c:	4908      	ldr	r1, [pc, #32]	@ (8006030 <Start_Measure+0x15c>)
 800600e:	4817      	ldr	r0, [pc, #92]	@ (800606c <Start_Measure+0x198>)
 8006010:	f005 fd1c 	bl	800ba4c <HAL_ADC_Start_DMA>
	HAL_TIM_OC_Start_IT(ADC_TIMER, TIM_CHANNEL_3);
 8006014:	2108      	movs	r1, #8
 8006016:	480f      	ldr	r0, [pc, #60]	@ (8006054 <Start_Measure+0x180>)
 8006018:	f00c fd34 	bl	8012a84 <HAL_TIM_OC_Start_IT>
}
 800601c:	bd80      	pop	{r7, pc}
 800601e:	bf00      	nop
 8006020:	20001784 	.word	0x20001784
 8006024:	51eb851f 	.word	0x51eb851f
 8006028:	200005d8 	.word	0x200005d8
 800602c:	20001780 	.word	0x20001780
 8006030:	200038f0 	.word	0x200038f0
 8006034:	20003c10 	.word	0x20003c10
 8006038:	20003c38 	.word	0x20003c38
 800603c:	200038e0 	.word	0x200038e0
 8006040:	200041c0 	.word	0x200041c0
 8006044:	20004960 	.word	0x20004960
 8006048:	20004964 	.word	0x20004964
 800604c:	20004958 	.word	0x20004958
 8006050:	2000495c 	.word	0x2000495c
 8006054:	200003e8 	.word	0x200003e8
 8006058:	20000000 	.word	0x20000000
 800605c:	2000039c 	.word	0x2000039c
 8006060:	20004f84 	.word	0x20004f84
 8006064:	200005d4 	.word	0x200005d4
 8006068:	20000350 	.word	0x20000350
 800606c:	200000b0 	.word	0x200000b0

08006070 <Stop_Measure>:

/*-----FINE MISURA-----*/
void Stop_Measure(void)
{
 8006070:	b580      	push	{r7, lr}
 8006072:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8006074:	b672      	cpsid	i
}
 8006076:	bf00      	nop
	__disable_irq();
	HAL_ADC_Stop_DMA(PRESSURE_ADC);
 8006078:	4809      	ldr	r0, [pc, #36]	@ (80060a0 <Stop_Measure+0x30>)
 800607a:	f005 fda3 	bl	800bbc4 <HAL_ADC_Stop_DMA>
	HAL_TIM_OC_Stop_IT(ADC_TIMER, TIM_CHANNEL_3);
 800607e:	2108      	movs	r1, #8
 8006080:	4808      	ldr	r0, [pc, #32]	@ (80060a4 <Stop_Measure+0x34>)
 8006082:	f00c fe53 	bl	8012d2c <HAL_TIM_OC_Stop_IT>
	HAL_TIM_PWM_Stop(ACC_TIMER, TIM_CHANNEL_3);
 8006086:	2108      	movs	r1, #8
 8006088:	4807      	ldr	r0, [pc, #28]	@ (80060a8 <Stop_Measure+0x38>)
 800608a:	f00d f891 	bl	80131b0 <HAL_TIM_PWM_Stop>
	HAL_TIM_IC_Stop_IT(VOLUME_TIMER, TIM_CHANNEL_1);
 800608e:	2100      	movs	r1, #0
 8006090:	4806      	ldr	r0, [pc, #24]	@ (80060ac <Stop_Measure+0x3c>)
 8006092:	f00d fac5 	bl	8013620 <HAL_TIM_IC_Stop_IT>
  __ASM volatile ("cpsie i" : : : "memory");
 8006096:	b662      	cpsie	i
}
 8006098:	bf00      	nop
	__enable_irq();
}
 800609a:	bf00      	nop
 800609c:	bd80      	pop	{r7, pc}
 800609e:	bf00      	nop
 80060a0:	200000b0 	.word	0x200000b0
 80060a4:	200003e8 	.word	0x200003e8
 80060a8:	2000039c 	.word	0x2000039c
 80060ac:	20000350 	.word	0x20000350

080060b0 <Warning_Detection>:

/*-----DETECTION COLPO D'ARIETE-----*/
void Warning_Detection(uint16_t* Data)
{
 80060b0:	b480      	push	{r7}
 80060b2:	b085      	sub	sp, #20
 80060b4:	af00      	add	r7, sp, #0
 80060b6:	6078      	str	r0, [r7, #4]
	uint16_t max = Data[0];
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	881b      	ldrh	r3, [r3, #0]
 80060bc:	81fb      	strh	r3, [r7, #14]
	uint16_t min = Data[0];
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	881b      	ldrh	r3, [r3, #0]
 80060c2:	81bb      	strh	r3, [r7, #12]

	for(int i = 1; i < PRESS_HALF_SAMPLES; i++)
 80060c4:	2301      	movs	r3, #1
 80060c6:	60bb      	str	r3, [r7, #8]
 80060c8:	e03a      	b.n	8006140 <Warning_Detection+0x90>
	{
		if(Data[i] > max)
 80060ca:	68bb      	ldr	r3, [r7, #8]
 80060cc:	005b      	lsls	r3, r3, #1
 80060ce:	687a      	ldr	r2, [r7, #4]
 80060d0:	4413      	add	r3, r2
 80060d2:	881b      	ldrh	r3, [r3, #0]
 80060d4:	89fa      	ldrh	r2, [r7, #14]
 80060d6:	429a      	cmp	r2, r3
 80060d8:	d206      	bcs.n	80060e8 <Warning_Detection+0x38>
		{
			max = Data[i];
 80060da:	68bb      	ldr	r3, [r7, #8]
 80060dc:	005b      	lsls	r3, r3, #1
 80060de:	687a      	ldr	r2, [r7, #4]
 80060e0:	4413      	add	r3, r2
 80060e2:	881b      	ldrh	r3, [r3, #0]
 80060e4:	81fb      	strh	r3, [r7, #14]
 80060e6:	e00d      	b.n	8006104 <Warning_Detection+0x54>
		}
		else if(Data[i] < min)
 80060e8:	68bb      	ldr	r3, [r7, #8]
 80060ea:	005b      	lsls	r3, r3, #1
 80060ec:	687a      	ldr	r2, [r7, #4]
 80060ee:	4413      	add	r3, r2
 80060f0:	881b      	ldrh	r3, [r3, #0]
 80060f2:	89ba      	ldrh	r2, [r7, #12]
 80060f4:	429a      	cmp	r2, r3
 80060f6:	d905      	bls.n	8006104 <Warning_Detection+0x54>
		{
			min = Data[i];
 80060f8:	68bb      	ldr	r3, [r7, #8]
 80060fa:	005b      	lsls	r3, r3, #1
 80060fc:	687a      	ldr	r2, [r7, #4]
 80060fe:	4413      	add	r3, r2
 8006100:	881b      	ldrh	r3, [r3, #0]
 8006102:	81bb      	strh	r3, [r7, #12]
		}

		if(Data[i] < sys.Low_th || Data[i] > sys.High_th)
 8006104:	68bb      	ldr	r3, [r7, #8]
 8006106:	005b      	lsls	r3, r3, #1
 8006108:	687a      	ldr	r2, [r7, #4]
 800610a:	4413      	add	r3, r2
 800610c:	881a      	ldrh	r2, [r3, #0]
 800610e:	4b17      	ldr	r3, [pc, #92]	@ (800616c <Warning_Detection+0xbc>)
 8006110:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006114:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8006116:	429a      	cmp	r2, r3
 8006118:	d30a      	bcc.n	8006130 <Warning_Detection+0x80>
 800611a:	68bb      	ldr	r3, [r7, #8]
 800611c:	005b      	lsls	r3, r3, #1
 800611e:	687a      	ldr	r2, [r7, #4]
 8006120:	4413      	add	r3, r2
 8006122:	881a      	ldrh	r2, [r3, #0]
 8006124:	4b11      	ldr	r3, [pc, #68]	@ (800616c <Warning_Detection+0xbc>)
 8006126:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800612a:	8e1b      	ldrh	r3, [r3, #48]	@ 0x30
 800612c:	429a      	cmp	r2, r3
 800612e:	d904      	bls.n	800613a <Warning_Detection+0x8a>
		{
			flags.Threshold_Detected= 1;
 8006130:	4a0f      	ldr	r2, [pc, #60]	@ (8006170 <Warning_Detection+0xc0>)
 8006132:	7813      	ldrb	r3, [r2, #0]
 8006134:	f043 0310 	orr.w	r3, r3, #16
 8006138:	7013      	strb	r3, [r2, #0]
	for(int i = 1; i < PRESS_HALF_SAMPLES; i++)
 800613a:	68bb      	ldr	r3, [r7, #8]
 800613c:	3301      	adds	r3, #1
 800613e:	60bb      	str	r3, [r7, #8]
 8006140:	68bb      	ldr	r3, [r7, #8]
 8006142:	2bc7      	cmp	r3, #199	@ 0xc7
 8006144:	ddc1      	ble.n	80060ca <Warning_Detection+0x1a>
		}
	}

	if(max - min >= Hammer_Th)
 8006146:	89fa      	ldrh	r2, [r7, #14]
 8006148:	89bb      	ldrh	r3, [r7, #12]
 800614a:	1ad3      	subs	r3, r2, r3
 800614c:	4a09      	ldr	r2, [pc, #36]	@ (8006174 <Warning_Detection+0xc4>)
 800614e:	8812      	ldrh	r2, [r2, #0]
 8006150:	4293      	cmp	r3, r2
 8006152:	db04      	blt.n	800615e <Warning_Detection+0xae>
	{
		flags.Hammer_Detected = 1;
 8006154:	4a06      	ldr	r2, [pc, #24]	@ (8006170 <Warning_Detection+0xc0>)
 8006156:	7813      	ldrb	r3, [r2, #0]
 8006158:	f043 0308 	orr.w	r3, r3, #8
 800615c:	7013      	strb	r3, [r2, #0]
	}

}
 800615e:	bf00      	nop
 8006160:	3714      	adds	r7, #20
 8006162:	46bd      	mov	sp, r7
 8006164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006168:	4770      	bx	lr
 800616a:	bf00      	nop
 800616c:	200005d8 	.word	0x200005d8
 8006170:	20001780 	.word	0x20001780
 8006174:	20004f20 	.word	0x20004f20

08006178 <RAM_Save_Measure>:

/*-----SALVATAGGIO MISURA IN RAM-----*/
void RAM_Save_Measure(Compressed_Sample_Typedef* sample, uint8_t* compressed_data)
{
 8006178:	b580      	push	{r7, lr}
 800617a:	b086      	sub	sp, #24
 800617c:	af00      	add	r7, sp, #0
 800617e:	6078      	str	r0, [r7, #4]
 8006180:	6039      	str	r1, [r7, #0]
    uint32_t samples_size = sample->compressed_size.pressure_size +
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	881b      	ldrh	r3, [r3, #0]
 8006186:	b29b      	uxth	r3, r3
 8006188:	461a      	mov	r2, r3
                            sample->compressed_size.volume_size +
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	885b      	ldrh	r3, [r3, #2]
 800618e:	b29b      	uxth	r3, r3
    uint32_t samples_size = sample->compressed_size.pressure_size +
 8006190:	4413      	add	r3, r2
                            sample->compressed_size.acceleration_size;
 8006192:	687a      	ldr	r2, [r7, #4]
 8006194:	8892      	ldrh	r2, [r2, #4]
 8006196:	b292      	uxth	r2, r2
                            sample->compressed_size.volume_size +
 8006198:	4413      	add	r3, r2
    uint32_t samples_size = sample->compressed_size.pressure_size +
 800619a:	617b      	str	r3, [r7, #20]
    uint32_t total_size = METADATA_SIZE + samples_size;
 800619c:	697b      	ldr	r3, [r7, #20]
 800619e:	3306      	adds	r3, #6
 80061a0:	613b      	str	r3, [r7, #16]

    // Controllo corruzione
    if (sys.Current_RAM_Len >= (RAM_SECOND_BUFFER_ADD - RAM_FIRST_BUFFER_ADD)) 
 80061a2:	4b38      	ldr	r3, [pc, #224]	@ (8006284 <RAM_Save_Measure+0x10c>)
 80061a4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80061a8:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 80061ac:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80061b0:	d30c      	bcc.n	80061cc <RAM_Save_Measure+0x54>
	{
        sys.Current_RAM_Len = 0;
 80061b2:	4b34      	ldr	r3, [pc, #208]	@ (8006284 <RAM_Save_Measure+0x10c>)
 80061b4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80061b8:	461a      	mov	r2, r3
 80061ba:	2300      	movs	r3, #0
 80061bc:	f8c2 30c8 	str.w	r3, [r2, #200]	@ 0xc8
        Saved_Bytes = 0;
 80061c0:	4b31      	ldr	r3, [pc, #196]	@ (8006288 <RAM_Save_Measure+0x110>)
 80061c2:	2200      	movs	r2, #0
 80061c4:	601a      	str	r2, [r3, #0]
        Saved_Samples = 0;
 80061c6:	4b31      	ldr	r3, [pc, #196]	@ (800628c <RAM_Save_Measure+0x114>)
 80061c8:	2200      	movs	r2, #0
 80061ca:	801a      	strh	r2, [r3, #0]
    }

    // ========= LOGICA CIRCOLARE (PRIORITARIA) =========
    if(Saved_Samples >= sys.RAM_Samples_Number) 
 80061cc:	4b2f      	ldr	r3, [pc, #188]	@ (800628c <RAM_Save_Measure+0x114>)
 80061ce:	881b      	ldrh	r3, [r3, #0]
 80061d0:	461a      	mov	r2, r3
 80061d2:	4b2c      	ldr	r3, [pc, #176]	@ (8006284 <RAM_Save_Measure+0x10c>)
 80061d4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80061d8:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 80061dc:	429a      	cmp	r2, r3
 80061de:	d30c      	bcc.n	80061fa <RAM_Save_Measure+0x82>
	{
        // RESET CIRCOLARE - riparti dall'inizio dello stesso buffer
        sys.Current_RAM_Len = 0;        // ← CORRETTO: riparte da zero
 80061e0:	4b28      	ldr	r3, [pc, #160]	@ (8006284 <RAM_Save_Measure+0x10c>)
 80061e2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80061e6:	461a      	mov	r2, r3
 80061e8:	2300      	movs	r3, #0
 80061ea:	f8c2 30c8 	str.w	r3, [r2, #200]	@ 0xc8
        Saved_Bytes = 0;
 80061ee:	4b26      	ldr	r3, [pc, #152]	@ (8006288 <RAM_Save_Measure+0x110>)
 80061f0:	2200      	movs	r2, #0
 80061f2:	601a      	str	r2, [r3, #0]
        Saved_Samples = 0;
 80061f4:	4b25      	ldr	r3, [pc, #148]	@ (800628c <RAM_Save_Measure+0x114>)
 80061f6:	2200      	movs	r2, #0
 80061f8:	801a      	strh	r2, [r3, #0]
    }

    uint32_t address = sys.Current_RAM_Base + sys.Current_RAM_Len;
 80061fa:	4b22      	ldr	r3, [pc, #136]	@ (8006284 <RAM_Save_Measure+0x10c>)
 80061fc:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006200:	f8d3 20c4 	ldr.w	r2, [r3, #196]	@ 0xc4
 8006204:	4b1f      	ldr	r3, [pc, #124]	@ (8006284 <RAM_Save_Measure+0x10c>)
 8006206:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800620a:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 800620e:	4413      	add	r3, r2
 8006210:	60fb      	str	r3, [r7, #12]

    // Controllo overflow SOLO se non siamo in modalità circolare
    if (sys.Current_RAM_Len + total_size > (RAM_SECOND_BUFFER_ADD - RAM_FIRST_BUFFER_ADD)) 
 8006212:	4b1c      	ldr	r3, [pc, #112]	@ (8006284 <RAM_Save_Measure+0x10c>)
 8006214:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006218:	f8d3 20c8 	ldr.w	r2, [r3, #200]	@ 0xc8
 800621c:	693b      	ldr	r3, [r7, #16]
 800621e:	4413      	add	r3, r2
 8006220:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8006224:	d905      	bls.n	8006232 <RAM_Save_Measure+0xba>
	{
        // Overflow - forza switch buffer
        Switch_Buffer();
 8006226:	f7ff fdd3 	bl	8005dd0 <Switch_Buffer>
        Send_Measure_Addr = 0;
 800622a:	4b19      	ldr	r3, [pc, #100]	@ (8006290 <RAM_Save_Measure+0x118>)
 800622c:	2200      	movs	r2, #0
 800622e:	601a      	str	r2, [r3, #0]
        return;
 8006230:	e024      	b.n	800627c <RAM_Save_Measure+0x104>
    }

    // Salvataggio normale
    RAM_Write(address, METADATA_SIZE, (uint8_t*)sample);
 8006232:	687a      	ldr	r2, [r7, #4]
 8006234:	2106      	movs	r1, #6
 8006236:	68f8      	ldr	r0, [r7, #12]
 8006238:	f001 f9c6 	bl	80075c8 <RAM_Write>
    address += METADATA_SIZE;
 800623c:	68fb      	ldr	r3, [r7, #12]
 800623e:	3306      	adds	r3, #6
 8006240:	60fb      	str	r3, [r7, #12]
    RAM_Write(address, samples_size, compressed_data);
 8006242:	683a      	ldr	r2, [r7, #0]
 8006244:	6979      	ldr	r1, [r7, #20]
 8006246:	68f8      	ldr	r0, [r7, #12]
 8006248:	f001 f9be 	bl	80075c8 <RAM_Write>
    
    Saved_Bytes += total_size;
 800624c:	4b0e      	ldr	r3, [pc, #56]	@ (8006288 <RAM_Save_Measure+0x110>)
 800624e:	681a      	ldr	r2, [r3, #0]
 8006250:	693b      	ldr	r3, [r7, #16]
 8006252:	4413      	add	r3, r2
 8006254:	4a0c      	ldr	r2, [pc, #48]	@ (8006288 <RAM_Save_Measure+0x110>)
 8006256:	6013      	str	r3, [r2, #0]
    sys.Current_RAM_Len += total_size;
 8006258:	4b0a      	ldr	r3, [pc, #40]	@ (8006284 <RAM_Save_Measure+0x10c>)
 800625a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800625e:	f8d3 20c8 	ldr.w	r2, [r3, #200]	@ 0xc8
 8006262:	693b      	ldr	r3, [r7, #16]
 8006264:	4413      	add	r3, r2
 8006266:	4a07      	ldr	r2, [pc, #28]	@ (8006284 <RAM_Save_Measure+0x10c>)
 8006268:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800626c:	f8c2 30c8 	str.w	r3, [r2, #200]	@ 0xc8
    Saved_Samples++;
 8006270:	4b06      	ldr	r3, [pc, #24]	@ (800628c <RAM_Save_Measure+0x114>)
 8006272:	881b      	ldrh	r3, [r3, #0]
 8006274:	3301      	adds	r3, #1
 8006276:	b29a      	uxth	r2, r3
 8006278:	4b04      	ldr	r3, [pc, #16]	@ (800628c <RAM_Save_Measure+0x114>)
 800627a:	801a      	strh	r2, [r3, #0]
}
 800627c:	3718      	adds	r7, #24
 800627e:	46bd      	mov	sp, r7
 8006280:	bd80      	pop	{r7, pc}
 8006282:	bf00      	nop
 8006284:	200005d8 	.word	0x200005d8
 8006288:	20004960 	.word	0x20004960
 800628c:	20004964 	.word	0x20004964
 8006290:	20004968 	.word	0x20004968

08006294 <Send_Measure_Chunk>:

/*-----INVIO CHUNK MISURA-----*/
uint32_t Send_Measure_Chunk(uint32_t buffer_base, uint32_t buffer_len, uint32_t start_address)
{
 8006294:	b580      	push	{r7, lr}
 8006296:	f5ad 6d8b 	sub.w	sp, sp, #1112	@ 0x458
 800629a:	af00      	add	r7, sp, #0
 800629c:	f507 638b 	add.w	r3, r7, #1112	@ 0x458
 80062a0:	f2a3 434c 	subw	r3, r3, #1100	@ 0x44c
 80062a4:	6018      	str	r0, [r3, #0]
 80062a6:	f507 638b 	add.w	r3, r7, #1112	@ 0x458
 80062aa:	f5a3 638a 	sub.w	r3, r3, #1104	@ 0x450
 80062ae:	6019      	str	r1, [r3, #0]
 80062b0:	f507 638b 	add.w	r3, r7, #1112	@ 0x458
 80062b4:	f2a3 4354 	subw	r3, r3, #1108	@ 0x454
 80062b8:	601a      	str	r2, [r3, #0]
    uint32_t raw_fill = 0;
 80062ba:	2300      	movs	r3, #0
 80062bc:	f8c7 3454 	str.w	r3, [r7, #1108]	@ 0x454
    uint8_t raw_buffer[1050]; // Dimensione ottimale per 1400 bytes TCP
    uint32_t address = start_address;
 80062c0:	f507 638b 	add.w	r3, r7, #1112	@ 0x458
 80062c4:	f2a3 4354 	subw	r3, r3, #1108	@ 0x454
 80062c8:	681b      	ldr	r3, [r3, #0]
 80062ca:	f8c7 3450 	str.w	r3, [r7, #1104]	@ 0x450
    uint32_t end_address = start_address;
 80062ce:	f507 638b 	add.w	r3, r7, #1112	@ 0x458
 80062d2:	f2a3 4354 	subw	r3, r3, #1108	@ 0x454
 80062d6:	681b      	ldr	r3, [r3, #0]
 80062d8:	f8c7 3444 	str.w	r3, [r7, #1092]	@ 0x444
    uint8_t first_loop = 1;
 80062dc:	2301      	movs	r3, #1
 80062de:	f887 344f 	strb.w	r3, [r7, #1103]	@ 0x44f

    if (buffer_len == 0) 
 80062e2:	f507 638b 	add.w	r3, r7, #1112	@ 0x458
 80062e6:	f5a3 638a 	sub.w	r3, r3, #1104	@ 0x450
 80062ea:	681b      	ldr	r3, [r3, #0]
 80062ec:	2b00      	cmp	r3, #0
 80062ee:	d101      	bne.n	80062f4 <Send_Measure_Chunk+0x60>
	{
        return 0;
 80062f0:	2300      	movs	r3, #0
 80062f2:	e1d1      	b.n	8006698 <Send_Measure_Chunk+0x404>
    }

    do 
	{
        // Wraparound check
        if (address >= buffer_base + buffer_len) 
 80062f4:	f507 638b 	add.w	r3, r7, #1112	@ 0x458
 80062f8:	f2a3 424c 	subw	r2, r3, #1100	@ 0x44c
 80062fc:	f507 638b 	add.w	r3, r7, #1112	@ 0x458
 8006300:	f5a3 638a 	sub.w	r3, r3, #1104	@ 0x450
 8006304:	6812      	ldr	r2, [r2, #0]
 8006306:	681b      	ldr	r3, [r3, #0]
 8006308:	4413      	add	r3, r2
 800630a:	f8d7 2450 	ldr.w	r2, [r7, #1104]	@ 0x450
 800630e:	429a      	cmp	r2, r3
 8006310:	d306      	bcc.n	8006320 <Send_Measure_Chunk+0x8c>
		{
            address = buffer_base;
 8006312:	f507 638b 	add.w	r3, r7, #1112	@ 0x458
 8006316:	f2a3 434c 	subw	r3, r3, #1100	@ 0x44c
 800631a:	681b      	ldr	r3, [r3, #0]
 800631c:	f8c7 3450 	str.w	r3, [r7, #1104]	@ 0x450
        }

        // Spazio insufficiente per metadata
        if ((buffer_base + buffer_len - address) < METADATA_SIZE && address < buffer_base + buffer_len) 
 8006320:	f507 638b 	add.w	r3, r7, #1112	@ 0x458
 8006324:	f2a3 424c 	subw	r2, r3, #1100	@ 0x44c
 8006328:	f507 638b 	add.w	r3, r7, #1112	@ 0x458
 800632c:	f5a3 638a 	sub.w	r3, r3, #1104	@ 0x450
 8006330:	6812      	ldr	r2, [r2, #0]
 8006332:	681b      	ldr	r3, [r3, #0]
 8006334:	441a      	add	r2, r3
 8006336:	f8d7 3450 	ldr.w	r3, [r7, #1104]	@ 0x450
 800633a:	1ad3      	subs	r3, r2, r3
 800633c:	2b05      	cmp	r3, #5
 800633e:	d80f      	bhi.n	8006360 <Send_Measure_Chunk+0xcc>
 8006340:	f507 638b 	add.w	r3, r7, #1112	@ 0x458
 8006344:	f2a3 424c 	subw	r2, r3, #1100	@ 0x44c
 8006348:	f507 638b 	add.w	r3, r7, #1112	@ 0x458
 800634c:	f5a3 638a 	sub.w	r3, r3, #1104	@ 0x450
 8006350:	6812      	ldr	r2, [r2, #0]
 8006352:	681b      	ldr	r3, [r3, #0]
 8006354:	4413      	add	r3, r2
 8006356:	f8d7 2450 	ldr.w	r2, [r7, #1104]	@ 0x450
 800635a:	429a      	cmp	r2, r3
 800635c:	f0c0 8175 	bcc.w	800664a <Send_Measure_Chunk+0x3b6>
		{
            break;
        }
        
        // Buffer chunk pieno per metadata
        if ((raw_fill + METADATA_SIZE) > sizeof(raw_buffer)) 
 8006360:	f8d7 3454 	ldr.w	r3, [r7, #1108]	@ 0x454
 8006364:	3306      	adds	r3, #6
 8006366:	f240 421a 	movw	r2, #1050	@ 0x41a
 800636a:	4293      	cmp	r3, r2
 800636c:	f200 816f 	bhi.w	800664e <Send_Measure_Chunk+0x3ba>
            break;
        }

        // ========= SINGOLA LETTURA METADATA =========
        Compressed_Sample_Typedef sample_header;
        RAM_Read(address, METADATA_SIZE, (uint8_t*)&sample_header);
 8006370:	f107 0310 	add.w	r3, r7, #16
 8006374:	461a      	mov	r2, r3
 8006376:	2106      	movs	r1, #6
 8006378:	f8d7 0450 	ldr.w	r0, [r7, #1104]	@ 0x450
 800637c:	f001 f935 	bl	80075ea <RAM_Read>

        uint32_t sample_size = sample_header.compressed_size.pressure_size +
 8006380:	f507 638b 	add.w	r3, r7, #1112	@ 0x458
 8006384:	f5a3 6389 	sub.w	r3, r3, #1096	@ 0x448
 8006388:	881b      	ldrh	r3, [r3, #0]
 800638a:	461a      	mov	r2, r3
                               sample_header.compressed_size.volume_size +
 800638c:	f507 638b 	add.w	r3, r7, #1112	@ 0x458
 8006390:	f5a3 6389 	sub.w	r3, r3, #1096	@ 0x448
 8006394:	885b      	ldrh	r3, [r3, #2]
        uint32_t sample_size = sample_header.compressed_size.pressure_size +
 8006396:	4413      	add	r3, r2
                               sample_header.compressed_size.acceleration_size;
 8006398:	f507 628b 	add.w	r2, r7, #1112	@ 0x458
 800639c:	f5a2 6289 	sub.w	r2, r2, #1096	@ 0x448
 80063a0:	8892      	ldrh	r2, [r2, #4]
                               sample_header.compressed_size.volume_size +
 80063a2:	4413      	add	r3, r2
        uint32_t sample_size = sample_header.compressed_size.pressure_size +
 80063a4:	f8c7 3448 	str.w	r3, [r7, #1096]	@ 0x448

        // ========= VALIDAZIONE E CORREZIONE SAMPLE =========
        if (sample_size == 0 || 
 80063a8:	f8d7 3448 	ldr.w	r3, [r7, #1096]	@ 0x448
 80063ac:	2b00      	cmp	r3, #0
 80063ae:	d01b      	beq.n	80063e8 <Send_Measure_Chunk+0x154>
 80063b0:	f8d7 3448 	ldr.w	r3, [r7, #1096]	@ 0x448
 80063b4:	f5b3 6f96 	cmp.w	r3, #1200	@ 0x4b0
 80063b8:	d816      	bhi.n	80063e8 <Send_Measure_Chunk+0x154>
            sample_size > MAX_COMPRESSED_SIZE ||
            sample_header.compressed_size.pressure_size > 500 ||    // Limite ragionevole pressione
 80063ba:	f507 638b 	add.w	r3, r7, #1112	@ 0x458
 80063be:	f5a3 6389 	sub.w	r3, r3, #1096	@ 0x448
 80063c2:	881b      	ldrh	r3, [r3, #0]
            sample_size > MAX_COMPRESSED_SIZE ||
 80063c4:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 80063c8:	d80e      	bhi.n	80063e8 <Send_Measure_Chunk+0x154>
            sample_header.compressed_size.volume_size > 100 ||      // Limite ragionevole volume  
 80063ca:	f507 638b 	add.w	r3, r7, #1112	@ 0x458
 80063ce:	f5a3 6389 	sub.w	r3, r3, #1096	@ 0x448
 80063d2:	885b      	ldrh	r3, [r3, #2]
            sample_header.compressed_size.pressure_size > 500 ||    // Limite ragionevole pressione
 80063d4:	2b64      	cmp	r3, #100	@ 0x64
 80063d6:	d807      	bhi.n	80063e8 <Send_Measure_Chunk+0x154>
            sample_header.compressed_size.acceleration_size > 1000) // Limite ragionevole acc
 80063d8:	f507 638b 	add.w	r3, r7, #1112	@ 0x458
 80063dc:	f5a3 6389 	sub.w	r3, r3, #1096	@ 0x448
 80063e0:	889b      	ldrh	r3, [r3, #4]
            sample_header.compressed_size.volume_size > 100 ||      // Limite ragionevole volume  
 80063e2:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80063e6:	d914      	bls.n	8006412 <Send_Measure_Chunk+0x17e>
        { 
            // Sample corrotto - crea metadata di emergenza
            sample_header.compressed_size.pressure_size = sizeof(uint16_t);
 80063e8:	f507 638b 	add.w	r3, r7, #1112	@ 0x458
 80063ec:	f5a3 6389 	sub.w	r3, r3, #1096	@ 0x448
 80063f0:	2202      	movs	r2, #2
 80063f2:	801a      	strh	r2, [r3, #0]
            sample_header.compressed_size.volume_size = sizeof(uint16_t);
 80063f4:	f507 638b 	add.w	r3, r7, #1112	@ 0x458
 80063f8:	f5a3 6389 	sub.w	r3, r3, #1096	@ 0x448
 80063fc:	2202      	movs	r2, #2
 80063fe:	805a      	strh	r2, [r3, #2]
            sample_header.compressed_size.acceleration_size = sizeof(uint16_t);
 8006400:	f507 638b 	add.w	r3, r7, #1112	@ 0x458
 8006404:	f5a3 6389 	sub.w	r3, r3, #1096	@ 0x448
 8006408:	2202      	movs	r2, #2
 800640a:	809a      	strh	r2, [r3, #4]
            sample_size = sizeof(uint16_t) + sizeof(uint16_t) + sizeof(uint16_t);
 800640c:	2306      	movs	r3, #6
 800640e:	f8c7 3448 	str.w	r3, [r7, #1096]	@ 0x448
        }

        uint32_t sample_total_size = METADATA_SIZE + sample_size;
 8006412:	f8d7 3448 	ldr.w	r3, [r7, #1096]	@ 0x448
 8006416:	3306      	adds	r3, #6
 8006418:	f8c7 3440 	str.w	r3, [r7, #1088]	@ 0x440

        // Buffer chunk non può contenere questo sample
        if ((raw_fill + sample_total_size) > sizeof(raw_buffer)) 
 800641c:	f8d7 2454 	ldr.w	r2, [r7, #1108]	@ 0x454
 8006420:	f8d7 3440 	ldr.w	r3, [r7, #1088]	@ 0x440
 8006424:	4413      	add	r3, r2
 8006426:	f240 421a 	movw	r2, #1050	@ 0x41a
 800642a:	4293      	cmp	r3, r2
 800642c:	f200 8111 	bhi.w	8006652 <Send_Measure_Chunk+0x3be>
		{
            break;
        }

        // ========= COPIA METADATA (CORRETTI) NEL BUFFER =========
        memcpy(raw_buffer + raw_fill, (uint8_t*)&sample_header, METADATA_SIZE);
 8006430:	f107 0218 	add.w	r2, r7, #24
 8006434:	f8d7 3454 	ldr.w	r3, [r7, #1108]	@ 0x454
 8006438:	18d1      	adds	r1, r2, r3
 800643a:	f507 638b 	add.w	r3, r7, #1112	@ 0x458
 800643e:	f5a3 6289 	sub.w	r2, r3, #1096	@ 0x448
 8006442:	460b      	mov	r3, r1
 8006444:	6810      	ldr	r0, [r2, #0]
 8006446:	6018      	str	r0, [r3, #0]
 8006448:	8892      	ldrh	r2, [r2, #4]
 800644a:	809a      	strh	r2, [r3, #4]
        raw_fill += METADATA_SIZE;
 800644c:	f8d7 3454 	ldr.w	r3, [r7, #1108]	@ 0x454
 8006450:	3306      	adds	r3, #6
 8006452:	f8c7 3454 	str.w	r3, [r7, #1108]	@ 0x454
        address += METADATA_SIZE;
 8006456:	f8d7 3450 	ldr.w	r3, [r7, #1104]	@ 0x450
 800645a:	3306      	adds	r3, #6
 800645c:	f8c7 3450 	str.w	r3, [r7, #1104]	@ 0x450
        if (address >= buffer_base + buffer_len) address = buffer_base;
 8006460:	f507 638b 	add.w	r3, r7, #1112	@ 0x458
 8006464:	f2a3 424c 	subw	r2, r3, #1100	@ 0x44c
 8006468:	f507 638b 	add.w	r3, r7, #1112	@ 0x458
 800646c:	f5a3 638a 	sub.w	r3, r3, #1104	@ 0x450
 8006470:	6812      	ldr	r2, [r2, #0]
 8006472:	681b      	ldr	r3, [r3, #0]
 8006474:	4413      	add	r3, r2
 8006476:	f8d7 2450 	ldr.w	r2, [r7, #1104]	@ 0x450
 800647a:	429a      	cmp	r2, r3
 800647c:	d306      	bcc.n	800648c <Send_Measure_Chunk+0x1f8>
 800647e:	f507 638b 	add.w	r3, r7, #1112	@ 0x458
 8006482:	f2a3 434c 	subw	r3, r3, #1100	@ 0x44c
 8006486:	681b      	ldr	r3, [r3, #0]
 8006488:	f8c7 3450 	str.w	r3, [r7, #1104]	@ 0x450

        // ========= GESTIONE DATI SAMPLE =========
        if (sample_header.compressed_size.pressure_size == sizeof(uint16_t) && 
 800648c:	f507 638b 	add.w	r3, r7, #1112	@ 0x458
 8006490:	f5a3 6389 	sub.w	r3, r3, #1096	@ 0x448
 8006494:	881b      	ldrh	r3, [r3, #0]
 8006496:	2b02      	cmp	r3, #2
 8006498:	d152      	bne.n	8006540 <Send_Measure_Chunk+0x2ac>
            sample_header.compressed_size.volume_size == sizeof(uint16_t) &&
 800649a:	f507 638b 	add.w	r3, r7, #1112	@ 0x458
 800649e:	f5a3 6389 	sub.w	r3, r3, #1096	@ 0x448
 80064a2:	885b      	ldrh	r3, [r3, #2]
        if (sample_header.compressed_size.pressure_size == sizeof(uint16_t) && 
 80064a4:	2b02      	cmp	r3, #2
 80064a6:	d14b      	bne.n	8006540 <Send_Measure_Chunk+0x2ac>
            sample_header.compressed_size.acceleration_size == sizeof(uint16_t)) 
 80064a8:	f507 638b 	add.w	r3, r7, #1112	@ 0x458
 80064ac:	f5a3 6389 	sub.w	r3, r3, #1096	@ 0x448
 80064b0:	889b      	ldrh	r3, [r3, #4]
            sample_header.compressed_size.volume_size == sizeof(uint16_t) &&
 80064b2:	2b02      	cmp	r3, #2
 80064b4:	d144      	bne.n	8006540 <Send_Measure_Chunk+0x2ac>
			{

            // Sample era corrotto - riempi con zeri
            memset(raw_buffer + raw_fill, 0, sample_size);
 80064b6:	f107 0218 	add.w	r2, r7, #24
 80064ba:	f8d7 3454 	ldr.w	r3, [r7, #1108]	@ 0x454
 80064be:	4413      	add	r3, r2
 80064c0:	f8d7 2448 	ldr.w	r2, [r7, #1096]	@ 0x448
 80064c4:	2100      	movs	r1, #0
 80064c6:	4618      	mov	r0, r3
 80064c8:	f00f ffe4 	bl	8016494 <memset>
            raw_fill += sample_size;
 80064cc:	f8d7 2454 	ldr.w	r2, [r7, #1108]	@ 0x454
 80064d0:	f8d7 3448 	ldr.w	r3, [r7, #1096]	@ 0x448
 80064d4:	4413      	add	r3, r2
 80064d6:	f8c7 3454 	str.w	r3, [r7, #1108]	@ 0x454
            
            // Salta i dati corrotti in RAM (avanza di sample_size originale)
            // Nota: questo potrebbe non essere allineato, ma è meglio che rimanere bloccati
            address += sample_size;
 80064da:	f8d7 2450 	ldr.w	r2, [r7, #1104]	@ 0x450
 80064de:	f8d7 3448 	ldr.w	r3, [r7, #1096]	@ 0x448
 80064e2:	4413      	add	r3, r2
 80064e4:	f8c7 3450 	str.w	r3, [r7, #1104]	@ 0x450
            if (address >= buffer_base + buffer_len) 
 80064e8:	f507 638b 	add.w	r3, r7, #1112	@ 0x458
 80064ec:	f2a3 424c 	subw	r2, r3, #1100	@ 0x44c
 80064f0:	f507 638b 	add.w	r3, r7, #1112	@ 0x458
 80064f4:	f5a3 638a 	sub.w	r3, r3, #1104	@ 0x450
 80064f8:	6812      	ldr	r2, [r2, #0]
 80064fa:	681b      	ldr	r3, [r3, #0]
 80064fc:	4413      	add	r3, r2
 80064fe:	f8d7 2450 	ldr.w	r2, [r7, #1104]	@ 0x450
 8006502:	429a      	cmp	r2, r3
 8006504:	f0c0 8093 	bcc.w	800662e <Send_Measure_Chunk+0x39a>
			{
                address = buffer_base + ((address - buffer_base) % buffer_len);
 8006508:	f507 638b 	add.w	r3, r7, #1112	@ 0x458
 800650c:	f2a3 434c 	subw	r3, r3, #1100	@ 0x44c
 8006510:	f8d7 2450 	ldr.w	r2, [r7, #1104]	@ 0x450
 8006514:	681b      	ldr	r3, [r3, #0]
 8006516:	1ad3      	subs	r3, r2, r3
 8006518:	f507 628b 	add.w	r2, r7, #1112	@ 0x458
 800651c:	f5a2 628a 	sub.w	r2, r2, #1104	@ 0x450
 8006520:	6811      	ldr	r1, [r2, #0]
 8006522:	fbb3 f1f1 	udiv	r1, r3, r1
 8006526:	6812      	ldr	r2, [r2, #0]
 8006528:	fb01 f202 	mul.w	r2, r1, r2
 800652c:	1a9b      	subs	r3, r3, r2
 800652e:	f507 628b 	add.w	r2, r7, #1112	@ 0x458
 8006532:	f2a2 424c 	subw	r2, r2, #1100	@ 0x44c
 8006536:	6812      	ldr	r2, [r2, #0]
 8006538:	4413      	add	r3, r2
 800653a:	f8c7 3450 	str.w	r3, [r7, #1104]	@ 0x450
            if (address >= buffer_base + buffer_len) 
 800653e:	e076      	b.n	800662e <Send_Measure_Chunk+0x39a>
            }
        } else {
            // Sample valido - leggi dati reali dalla RAM
            // Gestione wraparound sicura
            if (address + sample_size <= buffer_base + buffer_len) 
 8006540:	f8d7 2450 	ldr.w	r2, [r7, #1104]	@ 0x450
 8006544:	f8d7 3448 	ldr.w	r3, [r7, #1096]	@ 0x448
 8006548:	441a      	add	r2, r3
 800654a:	f507 638b 	add.w	r3, r7, #1112	@ 0x458
 800654e:	f2a3 414c 	subw	r1, r3, #1100	@ 0x44c
 8006552:	f507 638b 	add.w	r3, r7, #1112	@ 0x458
 8006556:	f5a3 638a 	sub.w	r3, r3, #1104	@ 0x450
 800655a:	6809      	ldr	r1, [r1, #0]
 800655c:	681b      	ldr	r3, [r3, #0]
 800655e:	440b      	add	r3, r1
 8006560:	429a      	cmp	r2, r3
 8006562:	d80c      	bhi.n	800657e <Send_Measure_Chunk+0x2ea>
			{
                // Dati non vanno oltre il buffer
                RAM_Read(address, sample_size, raw_buffer + raw_fill);
 8006564:	f107 0218 	add.w	r2, r7, #24
 8006568:	f8d7 3454 	ldr.w	r3, [r7, #1108]	@ 0x454
 800656c:	4413      	add	r3, r2
 800656e:	461a      	mov	r2, r3
 8006570:	f8d7 1448 	ldr.w	r1, [r7, #1096]	@ 0x448
 8006574:	f8d7 0450 	ldr.w	r0, [r7, #1104]	@ 0x450
 8006578:	f001 f837 	bl	80075ea <RAM_Read>
 800657c:	e033      	b.n	80065e6 <Send_Measure_Chunk+0x352>
            } 
			else 
			{
                // Dati si split tra fine e inizio buffer
                uint32_t first_part = (buffer_base + buffer_len) - address;
 800657e:	f507 638b 	add.w	r3, r7, #1112	@ 0x458
 8006582:	f2a3 424c 	subw	r2, r3, #1100	@ 0x44c
 8006586:	f507 638b 	add.w	r3, r7, #1112	@ 0x458
 800658a:	f5a3 638a 	sub.w	r3, r3, #1104	@ 0x450
 800658e:	6812      	ldr	r2, [r2, #0]
 8006590:	681b      	ldr	r3, [r3, #0]
 8006592:	441a      	add	r2, r3
 8006594:	f8d7 3450 	ldr.w	r3, [r7, #1104]	@ 0x450
 8006598:	1ad3      	subs	r3, r2, r3
 800659a:	f8c7 343c 	str.w	r3, [r7, #1084]	@ 0x43c
                uint32_t second_part = sample_size - first_part;
 800659e:	f8d7 2448 	ldr.w	r2, [r7, #1096]	@ 0x448
 80065a2:	f8d7 343c 	ldr.w	r3, [r7, #1084]	@ 0x43c
 80065a6:	1ad3      	subs	r3, r2, r3
 80065a8:	f8c7 3438 	str.w	r3, [r7, #1080]	@ 0x438
                RAM_Read(address, first_part, raw_buffer + raw_fill);
 80065ac:	f107 0218 	add.w	r2, r7, #24
 80065b0:	f8d7 3454 	ldr.w	r3, [r7, #1108]	@ 0x454
 80065b4:	4413      	add	r3, r2
 80065b6:	461a      	mov	r2, r3
 80065b8:	f8d7 143c 	ldr.w	r1, [r7, #1084]	@ 0x43c
 80065bc:	f8d7 0450 	ldr.w	r0, [r7, #1104]	@ 0x450
 80065c0:	f001 f813 	bl	80075ea <RAM_Read>
                RAM_Read(buffer_base, second_part, raw_buffer + raw_fill + first_part);
 80065c4:	f8d7 2454 	ldr.w	r2, [r7, #1108]	@ 0x454
 80065c8:	f8d7 343c 	ldr.w	r3, [r7, #1084]	@ 0x43c
 80065cc:	4413      	add	r3, r2
 80065ce:	f107 0218 	add.w	r2, r7, #24
 80065d2:	441a      	add	r2, r3
 80065d4:	f507 638b 	add.w	r3, r7, #1112	@ 0x458
 80065d8:	f2a3 434c 	subw	r3, r3, #1100	@ 0x44c
 80065dc:	f8d7 1438 	ldr.w	r1, [r7, #1080]	@ 0x438
 80065e0:	6818      	ldr	r0, [r3, #0]
 80065e2:	f001 f802 	bl	80075ea <RAM_Read>
            }
            raw_fill += sample_size;
 80065e6:	f8d7 2454 	ldr.w	r2, [r7, #1108]	@ 0x454
 80065ea:	f8d7 3448 	ldr.w	r3, [r7, #1096]	@ 0x448
 80065ee:	4413      	add	r3, r2
 80065f0:	f8c7 3454 	str.w	r3, [r7, #1108]	@ 0x454
            address += sample_size;
 80065f4:	f8d7 2450 	ldr.w	r2, [r7, #1104]	@ 0x450
 80065f8:	f8d7 3448 	ldr.w	r3, [r7, #1096]	@ 0x448
 80065fc:	4413      	add	r3, r2
 80065fe:	f8c7 3450 	str.w	r3, [r7, #1104]	@ 0x450
            if (address >= buffer_base + buffer_len) address = buffer_base;
 8006602:	f507 638b 	add.w	r3, r7, #1112	@ 0x458
 8006606:	f2a3 424c 	subw	r2, r3, #1100	@ 0x44c
 800660a:	f507 638b 	add.w	r3, r7, #1112	@ 0x458
 800660e:	f5a3 638a 	sub.w	r3, r3, #1104	@ 0x450
 8006612:	6812      	ldr	r2, [r2, #0]
 8006614:	681b      	ldr	r3, [r3, #0]
 8006616:	4413      	add	r3, r2
 8006618:	f8d7 2450 	ldr.w	r2, [r7, #1104]	@ 0x450
 800661c:	429a      	cmp	r2, r3
 800661e:	d306      	bcc.n	800662e <Send_Measure_Chunk+0x39a>
 8006620:	f507 638b 	add.w	r3, r7, #1112	@ 0x458
 8006624:	f2a3 434c 	subw	r3, r3, #1100	@ 0x44c
 8006628:	681b      	ldr	r3, [r3, #0]
 800662a:	f8c7 3450 	str.w	r3, [r7, #1104]	@ 0x450
        }

        // Condizione di fine
        if (address == end_address && !first_loop) 
 800662e:	f8d7 2450 	ldr.w	r2, [r7, #1104]	@ 0x450
 8006632:	f8d7 3444 	ldr.w	r3, [r7, #1092]	@ 0x444
 8006636:	429a      	cmp	r2, r3
 8006638:	d103      	bne.n	8006642 <Send_Measure_Chunk+0x3ae>
 800663a:	f897 344f 	ldrb.w	r3, [r7, #1103]	@ 0x44f
 800663e:	2b00      	cmp	r3, #0
 8006640:	d009      	beq.n	8006656 <Send_Measure_Chunk+0x3c2>
		{
            break;
        }
        first_loop = 0;
 8006642:	2300      	movs	r3, #0
 8006644:	f887 344f 	strb.w	r3, [r7, #1103]	@ 0x44f
	{
 8006648:	e654      	b.n	80062f4 <Send_Measure_Chunk+0x60>
            break;
 800664a:	bf00      	nop
 800664c:	e004      	b.n	8006658 <Send_Measure_Chunk+0x3c4>
            break;
 800664e:	bf00      	nop
 8006650:	e002      	b.n	8006658 <Send_Measure_Chunk+0x3c4>
            break;
 8006652:	bf00      	nop
 8006654:	e000      	b.n	8006658 <Send_Measure_Chunk+0x3c4>
            break;
 8006656:	bf00      	nop
    } while (1);

    if (raw_fill > 0) 
 8006658:	f8d7 3454 	ldr.w	r3, [r7, #1108]	@ 0x454
 800665c:	2b00      	cmp	r3, #0
 800665e:	d010      	beq.n	8006682 <Send_Measure_Chunk+0x3ee>
	{
        // Codifica in base64
        size_t b64_len = Base64_Encode(raw_buffer, raw_fill, (char*)tcp_chunk, sizeof(tcp_chunk));
 8006660:	f107 0018 	add.w	r0, r7, #24
 8006664:	f240 53b4 	movw	r3, #1460	@ 0x5b4
 8006668:	4a0e      	ldr	r2, [pc, #56]	@ (80066a4 <Send_Measure_Chunk+0x410>)
 800666a:	f8d7 1454 	ldr.w	r1, [r7, #1108]	@ 0x454
 800666e:	f7fb ff37 	bl	80024e0 <Base64_Encode>
 8006672:	f8c7 0434 	str.w	r0, [r7, #1076]	@ 0x434
        SIM_Send_TCP_Chunk_DMA(b64_len);
 8006676:	f8d7 3434 	ldr.w	r3, [r7, #1076]	@ 0x434
 800667a:	b29b      	uxth	r3, r3
 800667c:	4618      	mov	r0, r3
 800667e:	f7fb fd0f 	bl	80020a0 <SIM_Send_TCP_Chunk_DMA>
    }

    if (address == end_address) 
 8006682:	f8d7 2450 	ldr.w	r2, [r7, #1104]	@ 0x450
 8006686:	f8d7 3444 	ldr.w	r3, [r7, #1092]	@ 0x444
 800668a:	429a      	cmp	r2, r3
 800668c:	d102      	bne.n	8006694 <Send_Measure_Chunk+0x400>
	{
        return (uint32_t)-1;
 800668e:	f04f 33ff 	mov.w	r3, #4294967295
 8006692:	e001      	b.n	8006698 <Send_Measure_Chunk+0x404>
    }
    return address;
 8006694:	f8d7 3450 	ldr.w	r3, [r7, #1104]	@ 0x450
}
 8006698:	4618      	mov	r0, r3
 800669a:	f507 678b 	add.w	r7, r7, #1112	@ 0x458
 800669e:	46bd      	mov	sp, r7
 80066a0:	bd80      	pop	{r7, pc}
 80066a2:	bf00      	nop
 80066a4:	2000496c 	.word	0x2000496c

080066a8 <Compress_Sample>:

/*-----COMPRESSIONE DATI-----*/
Compressed_Sizes_Typedef Compress_Sample(uint8_t *input, uint16_t input_len, uint8_t *output)
{
 80066a8:	b580      	push	{r7, lr}
 80066aa:	b09a      	sub	sp, #104	@ 0x68
 80066ac:	af00      	add	r7, sp, #0
 80066ae:	60f8      	str	r0, [r7, #12]
 80066b0:	60b9      	str	r1, [r7, #8]
 80066b2:	603b      	str	r3, [r7, #0]
 80066b4:	4613      	mov	r3, r2
 80066b6:	80fb      	strh	r3, [r7, #6]
	uint16_t out_idx = 0;
 80066b8:	2300      	movs	r3, #0
 80066ba:	f8a7 3066 	strh.w	r3, [r7, #102]	@ 0x66
	uint8_t packed_byte = 0;
 80066be:	2300      	movs	r3, #0
 80066c0:	f887 3065 	strb.w	r3, [r7, #101]	@ 0x65
	Compressed_Sizes_Typedef sizes = {0, 0, 0};
 80066c4:	2300      	movs	r3, #0
 80066c6:	843b      	strh	r3, [r7, #32]
 80066c8:	2300      	movs	r3, #0
 80066ca:	847b      	strh	r3, [r7, #34]	@ 0x22
 80066cc:	2300      	movs	r3, #0
 80066ce:	84bb      	strh	r3, [r7, #36]	@ 0x24

    AdpcmState_Typedef press_state = {0, 0};
 80066d0:	2300      	movs	r3, #0
 80066d2:	83bb      	strh	r3, [r7, #28]
 80066d4:	2300      	movs	r3, #0
 80066d6:	77bb      	strb	r3, [r7, #30]
    AdpcmState_Typedef acc_x_state = {0, 0}, acc_y_state = {0, 0}, acc_z_state = {0, 0};
 80066d8:	2300      	movs	r3, #0
 80066da:	833b      	strh	r3, [r7, #24]
 80066dc:	2300      	movs	r3, #0
 80066de:	76bb      	strb	r3, [r7, #26]
 80066e0:	2300      	movs	r3, #0
 80066e2:	82bb      	strh	r3, [r7, #20]
 80066e4:	2300      	movs	r3, #0
 80066e6:	75bb      	strb	r3, [r7, #22]
 80066e8:	2300      	movs	r3, #0
 80066ea:	823b      	strh	r3, [r7, #16]
 80066ec:	2300      	movs	r3, #0
 80066ee:	74bb      	strb	r3, [r7, #18]

	// --- 1. Pressione ---
	uint16_t *adc = (uint16_t*)input;
 80066f0:	68bb      	ldr	r3, [r7, #8]
 80066f2:	64bb      	str	r3, [r7, #72]	@ 0x48
	uint16_t pressure_start = out_idx;
 80066f4:	f8b7 3066 	ldrh.w	r3, [r7, #102]	@ 0x66
 80066f8:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46

	output[out_idx++] = adc[0] & 0xFF;
 80066fc:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80066fe:	881a      	ldrh	r2, [r3, #0]
 8006700:	f8b7 3066 	ldrh.w	r3, [r7, #102]	@ 0x66
 8006704:	1c59      	adds	r1, r3, #1
 8006706:	f8a7 1066 	strh.w	r1, [r7, #102]	@ 0x66
 800670a:	4619      	mov	r1, r3
 800670c:	683b      	ldr	r3, [r7, #0]
 800670e:	440b      	add	r3, r1
 8006710:	b2d2      	uxtb	r2, r2
 8006712:	701a      	strb	r2, [r3, #0]
	output[out_idx++] = adc[0] >> 8;
 8006714:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006716:	881b      	ldrh	r3, [r3, #0]
 8006718:	0a1b      	lsrs	r3, r3, #8
 800671a:	b29a      	uxth	r2, r3
 800671c:	f8b7 3066 	ldrh.w	r3, [r7, #102]	@ 0x66
 8006720:	1c59      	adds	r1, r3, #1
 8006722:	f8a7 1066 	strh.w	r1, [r7, #102]	@ 0x66
 8006726:	4619      	mov	r1, r3
 8006728:	683b      	ldr	r3, [r7, #0]
 800672a:	440b      	add	r3, r1
 800672c:	b2d2      	uxtb	r2, r2
 800672e:	701a      	strb	r2, [r3, #0]
	press_state.previous_value = adc[0];
 8006730:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006732:	881b      	ldrh	r3, [r3, #0]
 8006734:	b21b      	sxth	r3, r3
 8006736:	83bb      	strh	r3, [r7, #28]
	for (int i = 1; i < PRESS_HALF_SAMPLES; i++) 
 8006738:	2301      	movs	r3, #1
 800673a:	663b      	str	r3, [r7, #96]	@ 0x60
 800673c:	e033      	b.n	80067a6 <Compress_Sample+0xfe>
	{
		uint8_t nibble = ADPCM_Compression(adc[i], &press_state, step_size_table_12bit);
 800673e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8006740:	005b      	lsls	r3, r3, #1
 8006742:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006744:	4413      	add	r3, r2
 8006746:	881b      	ldrh	r3, [r3, #0]
 8006748:	b21b      	sxth	r3, r3
 800674a:	f107 011c 	add.w	r1, r7, #28
 800674e:	4a99      	ldr	r2, [pc, #612]	@ (80069b4 <Compress_Sample+0x30c>)
 8006750:	4618      	mov	r0, r3
 8006752:	f000 f9cf 	bl	8006af4 <ADPCM_Compression>
 8006756:	4603      	mov	r3, r0
 8006758:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
		if (i % 2 != 0) 
 800675c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800675e:	f003 0301 	and.w	r3, r3, #1
 8006762:	2b00      	cmp	r3, #0
 8006764:	d004      	beq.n	8006770 <Compress_Sample+0xc8>
		{
			packed_byte = nibble;
 8006766:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800676a:	f887 3065 	strb.w	r3, [r7, #101]	@ 0x65
 800676e:	e017      	b.n	80067a0 <Compress_Sample+0xf8>
		} else 
		{
			packed_byte |= (nibble << 4);
 8006770:	f997 3026 	ldrsb.w	r3, [r7, #38]	@ 0x26
 8006774:	011b      	lsls	r3, r3, #4
 8006776:	b25a      	sxtb	r2, r3
 8006778:	f997 3065 	ldrsb.w	r3, [r7, #101]	@ 0x65
 800677c:	4313      	orrs	r3, r2
 800677e:	b25b      	sxtb	r3, r3
 8006780:	f887 3065 	strb.w	r3, [r7, #101]	@ 0x65
			output[out_idx++] = packed_byte;
 8006784:	f8b7 3066 	ldrh.w	r3, [r7, #102]	@ 0x66
 8006788:	1c5a      	adds	r2, r3, #1
 800678a:	f8a7 2066 	strh.w	r2, [r7, #102]	@ 0x66
 800678e:	461a      	mov	r2, r3
 8006790:	683b      	ldr	r3, [r7, #0]
 8006792:	4413      	add	r3, r2
 8006794:	f897 2065 	ldrb.w	r2, [r7, #101]	@ 0x65
 8006798:	701a      	strb	r2, [r3, #0]
			packed_byte = 0;
 800679a:	2300      	movs	r3, #0
 800679c:	f887 3065 	strb.w	r3, [r7, #101]	@ 0x65
	for (int i = 1; i < PRESS_HALF_SAMPLES; i++) 
 80067a0:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80067a2:	3301      	adds	r3, #1
 80067a4:	663b      	str	r3, [r7, #96]	@ 0x60
 80067a6:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80067a8:	2bc7      	cmp	r3, #199	@ 0xc7
 80067aa:	ddc8      	ble.n	800673e <Compress_Sample+0x96>
	if (PRESS_HALF_SAMPLES % 2 != 0) 
	{
		output[out_idx++] = packed_byte;
		packed_byte = 0;
	}
	sizes.pressure_size = out_idx - pressure_start;
 80067ac:	f8b7 2066 	ldrh.w	r2, [r7, #102]	@ 0x66
 80067b0:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 80067b4:	1ad3      	subs	r3, r2, r3
 80067b6:	b29b      	uxth	r3, r3
 80067b8:	843b      	strh	r3, [r7, #32]

	// --- 2. Flusso (RLE) ---
	uint32_t *counter = (uint32_t*)(input + PRESS_HALF_LEN);
 80067ba:	68bb      	ldr	r3, [r7, #8]
 80067bc:	f503 73c8 	add.w	r3, r3, #400	@ 0x190
 80067c0:	643b      	str	r3, [r7, #64]	@ 0x40
	uint16_t volume_start = out_idx;
 80067c2:	f8b7 3066 	ldrh.w	r3, [r7, #102]	@ 0x66
 80067c6:	87fb      	strh	r3, [r7, #62]	@ 0x3e

	uint32_t prev = counter[0];
 80067c8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80067ca:	681b      	ldr	r3, [r3, #0]
 80067cc:	65fb      	str	r3, [r7, #92]	@ 0x5c
	uint16_t run_len = 1;
 80067ce:	2301      	movs	r3, #1
 80067d0:	f8a7 305a 	strh.w	r3, [r7, #90]	@ 0x5a

	for (int i = 1; i < MAX_VOLUME_SAMPLES; i++) {
 80067d4:	2301      	movs	r3, #1
 80067d6:	657b      	str	r3, [r7, #84]	@ 0x54
 80067d8:	e058      	b.n	800688c <Compress_Sample+0x1e4>
		if (counter[i] == prev && run_len < 255) {
 80067da:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80067dc:	009b      	lsls	r3, r3, #2
 80067de:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80067e0:	4413      	add	r3, r2
 80067e2:	681b      	ldr	r3, [r3, #0]
 80067e4:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 80067e6:	429a      	cmp	r2, r3
 80067e8:	d109      	bne.n	80067fe <Compress_Sample+0x156>
 80067ea:	f8b7 305a 	ldrh.w	r3, [r7, #90]	@ 0x5a
 80067ee:	2bfe      	cmp	r3, #254	@ 0xfe
 80067f0:	d805      	bhi.n	80067fe <Compress_Sample+0x156>
			run_len++;
 80067f2:	f8b7 305a 	ldrh.w	r3, [r7, #90]	@ 0x5a
 80067f6:	3301      	adds	r3, #1
 80067f8:	f8a7 305a 	strh.w	r3, [r7, #90]	@ 0x5a
 80067fc:	e043      	b.n	8006886 <Compress_Sample+0x1de>
		} else {
			// Scrivi valore e run_len (4 byte valore + 1 byte run_len)
			output[out_idx++] = prev & 0xFF;
 80067fe:	f8b7 3066 	ldrh.w	r3, [r7, #102]	@ 0x66
 8006802:	1c5a      	adds	r2, r3, #1
 8006804:	f8a7 2066 	strh.w	r2, [r7, #102]	@ 0x66
 8006808:	461a      	mov	r2, r3
 800680a:	683b      	ldr	r3, [r7, #0]
 800680c:	4413      	add	r3, r2
 800680e:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8006810:	b2d2      	uxtb	r2, r2
 8006812:	701a      	strb	r2, [r3, #0]
			output[out_idx++] = (prev >> 8) & 0xFF;
 8006814:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006816:	0a1a      	lsrs	r2, r3, #8
 8006818:	f8b7 3066 	ldrh.w	r3, [r7, #102]	@ 0x66
 800681c:	1c59      	adds	r1, r3, #1
 800681e:	f8a7 1066 	strh.w	r1, [r7, #102]	@ 0x66
 8006822:	4619      	mov	r1, r3
 8006824:	683b      	ldr	r3, [r7, #0]
 8006826:	440b      	add	r3, r1
 8006828:	b2d2      	uxtb	r2, r2
 800682a:	701a      	strb	r2, [r3, #0]
			output[out_idx++] = (prev >> 16) & 0xFF;
 800682c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800682e:	0c1a      	lsrs	r2, r3, #16
 8006830:	f8b7 3066 	ldrh.w	r3, [r7, #102]	@ 0x66
 8006834:	1c59      	adds	r1, r3, #1
 8006836:	f8a7 1066 	strh.w	r1, [r7, #102]	@ 0x66
 800683a:	4619      	mov	r1, r3
 800683c:	683b      	ldr	r3, [r7, #0]
 800683e:	440b      	add	r3, r1
 8006840:	b2d2      	uxtb	r2, r2
 8006842:	701a      	strb	r2, [r3, #0]
			output[out_idx++] = (prev >> 24) & 0xFF;
 8006844:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006846:	0e1a      	lsrs	r2, r3, #24
 8006848:	f8b7 3066 	ldrh.w	r3, [r7, #102]	@ 0x66
 800684c:	1c59      	adds	r1, r3, #1
 800684e:	f8a7 1066 	strh.w	r1, [r7, #102]	@ 0x66
 8006852:	4619      	mov	r1, r3
 8006854:	683b      	ldr	r3, [r7, #0]
 8006856:	440b      	add	r3, r1
 8006858:	b2d2      	uxtb	r2, r2
 800685a:	701a      	strb	r2, [r3, #0]
			output[out_idx++] = run_len;
 800685c:	f8b7 3066 	ldrh.w	r3, [r7, #102]	@ 0x66
 8006860:	1c5a      	adds	r2, r3, #1
 8006862:	f8a7 2066 	strh.w	r2, [r7, #102]	@ 0x66
 8006866:	461a      	mov	r2, r3
 8006868:	683b      	ldr	r3, [r7, #0]
 800686a:	4413      	add	r3, r2
 800686c:	f8b7 205a 	ldrh.w	r2, [r7, #90]	@ 0x5a
 8006870:	b2d2      	uxtb	r2, r2
 8006872:	701a      	strb	r2, [r3, #0]
			prev = counter[i];
 8006874:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006876:	009b      	lsls	r3, r3, #2
 8006878:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800687a:	4413      	add	r3, r2
 800687c:	681b      	ldr	r3, [r3, #0]
 800687e:	65fb      	str	r3, [r7, #92]	@ 0x5c
			run_len = 1;
 8006880:	2301      	movs	r3, #1
 8006882:	f8a7 305a 	strh.w	r3, [r7, #90]	@ 0x5a
	for (int i = 1; i < MAX_VOLUME_SAMPLES; i++) {
 8006886:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006888:	3301      	adds	r3, #1
 800688a:	657b      	str	r3, [r7, #84]	@ 0x54
 800688c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800688e:	2b09      	cmp	r3, #9
 8006890:	dda3      	ble.n	80067da <Compress_Sample+0x132>
		}
	}
	// Scrivi l'ultimo run
	output[out_idx++] = prev & 0xFF;
 8006892:	f8b7 3066 	ldrh.w	r3, [r7, #102]	@ 0x66
 8006896:	1c5a      	adds	r2, r3, #1
 8006898:	f8a7 2066 	strh.w	r2, [r7, #102]	@ 0x66
 800689c:	461a      	mov	r2, r3
 800689e:	683b      	ldr	r3, [r7, #0]
 80068a0:	4413      	add	r3, r2
 80068a2:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 80068a4:	b2d2      	uxtb	r2, r2
 80068a6:	701a      	strb	r2, [r3, #0]
	output[out_idx++] = (prev >> 8) & 0xFF;
 80068a8:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80068aa:	0a1a      	lsrs	r2, r3, #8
 80068ac:	f8b7 3066 	ldrh.w	r3, [r7, #102]	@ 0x66
 80068b0:	1c59      	adds	r1, r3, #1
 80068b2:	f8a7 1066 	strh.w	r1, [r7, #102]	@ 0x66
 80068b6:	4619      	mov	r1, r3
 80068b8:	683b      	ldr	r3, [r7, #0]
 80068ba:	440b      	add	r3, r1
 80068bc:	b2d2      	uxtb	r2, r2
 80068be:	701a      	strb	r2, [r3, #0]
	output[out_idx++] = (prev >> 16) & 0xFF;
 80068c0:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80068c2:	0c1a      	lsrs	r2, r3, #16
 80068c4:	f8b7 3066 	ldrh.w	r3, [r7, #102]	@ 0x66
 80068c8:	1c59      	adds	r1, r3, #1
 80068ca:	f8a7 1066 	strh.w	r1, [r7, #102]	@ 0x66
 80068ce:	4619      	mov	r1, r3
 80068d0:	683b      	ldr	r3, [r7, #0]
 80068d2:	440b      	add	r3, r1
 80068d4:	b2d2      	uxtb	r2, r2
 80068d6:	701a      	strb	r2, [r3, #0]
	output[out_idx++] = (prev >> 24) & 0xFF;
 80068d8:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80068da:	0e1a      	lsrs	r2, r3, #24
 80068dc:	f8b7 3066 	ldrh.w	r3, [r7, #102]	@ 0x66
 80068e0:	1c59      	adds	r1, r3, #1
 80068e2:	f8a7 1066 	strh.w	r1, [r7, #102]	@ 0x66
 80068e6:	4619      	mov	r1, r3
 80068e8:	683b      	ldr	r3, [r7, #0]
 80068ea:	440b      	add	r3, r1
 80068ec:	b2d2      	uxtb	r2, r2
 80068ee:	701a      	strb	r2, [r3, #0]
	output[out_idx++] = run_len;
 80068f0:	f8b7 3066 	ldrh.w	r3, [r7, #102]	@ 0x66
 80068f4:	1c5a      	adds	r2, r3, #1
 80068f6:	f8a7 2066 	strh.w	r2, [r7, #102]	@ 0x66
 80068fa:	461a      	mov	r2, r3
 80068fc:	683b      	ldr	r3, [r7, #0]
 80068fe:	4413      	add	r3, r2
 8006900:	f8b7 205a 	ldrh.w	r2, [r7, #90]	@ 0x5a
 8006904:	b2d2      	uxtb	r2, r2
 8006906:	701a      	strb	r2, [r3, #0]

	sizes.volume_size = out_idx - volume_start;
 8006908:	f8b7 2066 	ldrh.w	r2, [r7, #102]	@ 0x66
 800690c:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 800690e:	1ad3      	subs	r3, r2, r3
 8006910:	b29b      	uxth	r3, r3
 8006912:	847b      	strh	r3, [r7, #34]	@ 0x22

	// --- 3. Accelerometro (3 canali separati) ---
	uint8_t *accel = input + PRESS_HALF_LEN + MAX_VOLUME_LEN;
 8006914:	68bb      	ldr	r3, [r7, #8]
 8006916:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 800691a:	63bb      	str	r3, [r7, #56]	@ 0x38
	uint16_t accel_start = out_idx;
 800691c:	f8b7 3066 	ldrh.w	r3, [r7, #102]	@ 0x66
 8006920:	86fb      	strh	r3, [r7, #54]	@ 0x36

	uint16_t x0 = accel[1] | (accel[2] << 8);
 8006922:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006924:	3301      	adds	r3, #1
 8006926:	781b      	ldrb	r3, [r3, #0]
 8006928:	b21a      	sxth	r2, r3
 800692a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800692c:	3302      	adds	r3, #2
 800692e:	781b      	ldrb	r3, [r3, #0]
 8006930:	b21b      	sxth	r3, r3
 8006932:	021b      	lsls	r3, r3, #8
 8006934:	b21b      	sxth	r3, r3
 8006936:	4313      	orrs	r3, r2
 8006938:	b21b      	sxth	r3, r3
 800693a:	86bb      	strh	r3, [r7, #52]	@ 0x34
	uint16_t y0 = accel[3] | (accel[4] << 8);
 800693c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800693e:	3303      	adds	r3, #3
 8006940:	781b      	ldrb	r3, [r3, #0]
 8006942:	b21a      	sxth	r2, r3
 8006944:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006946:	3304      	adds	r3, #4
 8006948:	781b      	ldrb	r3, [r3, #0]
 800694a:	b21b      	sxth	r3, r3
 800694c:	021b      	lsls	r3, r3, #8
 800694e:	b21b      	sxth	r3, r3
 8006950:	4313      	orrs	r3, r2
 8006952:	b21b      	sxth	r3, r3
 8006954:	867b      	strh	r3, [r7, #50]	@ 0x32
	uint16_t z0 = accel[5] | (accel[6] << 8);
 8006956:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006958:	3305      	adds	r3, #5
 800695a:	781b      	ldrb	r3, [r3, #0]
 800695c:	b21a      	sxth	r2, r3
 800695e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006960:	3306      	adds	r3, #6
 8006962:	781b      	ldrb	r3, [r3, #0]
 8006964:	b21b      	sxth	r3, r3
 8006966:	021b      	lsls	r3, r3, #8
 8006968:	b21b      	sxth	r3, r3
 800696a:	4313      	orrs	r3, r2
 800696c:	b21b      	sxth	r3, r3
 800696e:	863b      	strh	r3, [r7, #48]	@ 0x30
	acc_x_state.previous_value = x0;
 8006970:	f9b7 3034 	ldrsh.w	r3, [r7, #52]	@ 0x34
 8006974:	833b      	strh	r3, [r7, #24]
	acc_y_state.previous_value = y0;
 8006976:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	@ 0x32
 800697a:	82bb      	strh	r3, [r7, #20]
	acc_z_state.previous_value = z0;
 800697c:	f9b7 3030 	ldrsh.w	r3, [r7, #48]	@ 0x30
 8006980:	823b      	strh	r3, [r7, #16]
	for(int k=0; k<7; ++k) output[out_idx++] = accel[k];
 8006982:	2300      	movs	r3, #0
 8006984:	653b      	str	r3, [r7, #80]	@ 0x50
 8006986:	e00f      	b.n	80069a8 <Compress_Sample+0x300>
 8006988:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800698a:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800698c:	441a      	add	r2, r3
 800698e:	f8b7 3066 	ldrh.w	r3, [r7, #102]	@ 0x66
 8006992:	1c59      	adds	r1, r3, #1
 8006994:	f8a7 1066 	strh.w	r1, [r7, #102]	@ 0x66
 8006998:	4619      	mov	r1, r3
 800699a:	683b      	ldr	r3, [r7, #0]
 800699c:	440b      	add	r3, r1
 800699e:	7812      	ldrb	r2, [r2, #0]
 80069a0:	701a      	strb	r2, [r3, #0]
 80069a2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80069a4:	3301      	adds	r3, #1
 80069a6:	653b      	str	r3, [r7, #80]	@ 0x50
 80069a8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80069aa:	2b06      	cmp	r3, #6
 80069ac:	ddec      	ble.n	8006988 <Compress_Sample+0x2e0>
	for (int i = 1; i < ACC_FIFO_WATERMARK; i++) 
 80069ae:	2301      	movs	r3, #1
 80069b0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80069b2:	e087      	b.n	8006ac4 <Compress_Sample+0x41c>
 80069b4:	08017bd0 	.word	0x08017bd0
	{
		uint16_t x = accel[i*7+1] | (accel[i*7+2] << 8);
 80069b8:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80069ba:	4613      	mov	r3, r2
 80069bc:	00db      	lsls	r3, r3, #3
 80069be:	1a9b      	subs	r3, r3, r2
 80069c0:	3301      	adds	r3, #1
 80069c2:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80069c4:	4413      	add	r3, r2
 80069c6:	781b      	ldrb	r3, [r3, #0]
 80069c8:	b219      	sxth	r1, r3
 80069ca:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80069cc:	4613      	mov	r3, r2
 80069ce:	00db      	lsls	r3, r3, #3
 80069d0:	1a9b      	subs	r3, r3, r2
 80069d2:	3302      	adds	r3, #2
 80069d4:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80069d6:	4413      	add	r3, r2
 80069d8:	781b      	ldrb	r3, [r3, #0]
 80069da:	b21b      	sxth	r3, r3
 80069dc:	021b      	lsls	r3, r3, #8
 80069de:	b21b      	sxth	r3, r3
 80069e0:	430b      	orrs	r3, r1
 80069e2:	b21b      	sxth	r3, r3
 80069e4:	85fb      	strh	r3, [r7, #46]	@ 0x2e
		uint16_t y = accel[i*7+3] | (accel[i*7+4] << 8);
 80069e6:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80069e8:	4613      	mov	r3, r2
 80069ea:	00db      	lsls	r3, r3, #3
 80069ec:	1a9b      	subs	r3, r3, r2
 80069ee:	3303      	adds	r3, #3
 80069f0:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80069f2:	4413      	add	r3, r2
 80069f4:	781b      	ldrb	r3, [r3, #0]
 80069f6:	b219      	sxth	r1, r3
 80069f8:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80069fa:	4613      	mov	r3, r2
 80069fc:	00db      	lsls	r3, r3, #3
 80069fe:	1a9b      	subs	r3, r3, r2
 8006a00:	3304      	adds	r3, #4
 8006a02:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8006a04:	4413      	add	r3, r2
 8006a06:	781b      	ldrb	r3, [r3, #0]
 8006a08:	b21b      	sxth	r3, r3
 8006a0a:	021b      	lsls	r3, r3, #8
 8006a0c:	b21b      	sxth	r3, r3
 8006a0e:	430b      	orrs	r3, r1
 8006a10:	b21b      	sxth	r3, r3
 8006a12:	85bb      	strh	r3, [r7, #44]	@ 0x2c
		uint16_t z = accel[i*7+5] | (accel[i*7+6] << 8);
 8006a14:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8006a16:	4613      	mov	r3, r2
 8006a18:	00db      	lsls	r3, r3, #3
 8006a1a:	1a9b      	subs	r3, r3, r2
 8006a1c:	3305      	adds	r3, #5
 8006a1e:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8006a20:	4413      	add	r3, r2
 8006a22:	781b      	ldrb	r3, [r3, #0]
 8006a24:	b219      	sxth	r1, r3
 8006a26:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8006a28:	4613      	mov	r3, r2
 8006a2a:	00db      	lsls	r3, r3, #3
 8006a2c:	1a9b      	subs	r3, r3, r2
 8006a2e:	3306      	adds	r3, #6
 8006a30:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8006a32:	4413      	add	r3, r2
 8006a34:	781b      	ldrb	r3, [r3, #0]
 8006a36:	b21b      	sxth	r3, r3
 8006a38:	021b      	lsls	r3, r3, #8
 8006a3a:	b21b      	sxth	r3, r3
 8006a3c:	430b      	orrs	r3, r1
 8006a3e:	b21b      	sxth	r3, r3
 8006a40:	857b      	strh	r3, [r7, #42]	@ 0x2a
		uint8_t nibble_x = ADPCM_Compression(x, &acc_x_state, step_size_table_16bit);
 8006a42:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	@ 0x2e
 8006a46:	f107 0118 	add.w	r1, r7, #24
 8006a4a:	4a29      	ldr	r2, [pc, #164]	@ (8006af0 <Compress_Sample+0x448>)
 8006a4c:	4618      	mov	r0, r3
 8006a4e:	f000 f851 	bl	8006af4 <ADPCM_Compression>
 8006a52:	4603      	mov	r3, r0
 8006a54:	f887 3029 	strb.w	r3, [r7, #41]	@ 0x29
		uint8_t nibble_y = ADPCM_Compression(y, &acc_y_state, step_size_table_16bit);
 8006a58:	f9b7 302c 	ldrsh.w	r3, [r7, #44]	@ 0x2c
 8006a5c:	f107 0114 	add.w	r1, r7, #20
 8006a60:	4a23      	ldr	r2, [pc, #140]	@ (8006af0 <Compress_Sample+0x448>)
 8006a62:	4618      	mov	r0, r3
 8006a64:	f000 f846 	bl	8006af4 <ADPCM_Compression>
 8006a68:	4603      	mov	r3, r0
 8006a6a:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
		uint8_t nibble_z = ADPCM_Compression(z, &acc_z_state, step_size_table_16bit);
 8006a6e:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	@ 0x2a
 8006a72:	f107 0110 	add.w	r1, r7, #16
 8006a76:	4a1e      	ldr	r2, [pc, #120]	@ (8006af0 <Compress_Sample+0x448>)
 8006a78:	4618      	mov	r0, r3
 8006a7a:	f000 f83b 	bl	8006af4 <ADPCM_Compression>
 8006a7e:	4603      	mov	r3, r0
 8006a80:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
		output[out_idx++] = nibble_x | (nibble_y << 4);
 8006a84:	f997 3028 	ldrsb.w	r3, [r7, #40]	@ 0x28
 8006a88:	011b      	lsls	r3, r3, #4
 8006a8a:	b25a      	sxtb	r2, r3
 8006a8c:	f997 3029 	ldrsb.w	r3, [r7, #41]	@ 0x29
 8006a90:	4313      	orrs	r3, r2
 8006a92:	b25a      	sxtb	r2, r3
 8006a94:	f8b7 3066 	ldrh.w	r3, [r7, #102]	@ 0x66
 8006a98:	1c59      	adds	r1, r3, #1
 8006a9a:	f8a7 1066 	strh.w	r1, [r7, #102]	@ 0x66
 8006a9e:	4619      	mov	r1, r3
 8006aa0:	683b      	ldr	r3, [r7, #0]
 8006aa2:	440b      	add	r3, r1
 8006aa4:	b2d2      	uxtb	r2, r2
 8006aa6:	701a      	strb	r2, [r3, #0]
		output[out_idx++] = nibble_z;
 8006aa8:	f8b7 3066 	ldrh.w	r3, [r7, #102]	@ 0x66
 8006aac:	1c5a      	adds	r2, r3, #1
 8006aae:	f8a7 2066 	strh.w	r2, [r7, #102]	@ 0x66
 8006ab2:	461a      	mov	r2, r3
 8006ab4:	683b      	ldr	r3, [r7, #0]
 8006ab6:	4413      	add	r3, r2
 8006ab8:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 8006abc:	701a      	strb	r2, [r3, #0]
	for (int i = 1; i < ACC_FIFO_WATERMARK; i++) 
 8006abe:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006ac0:	3301      	adds	r3, #1
 8006ac2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006ac4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006ac6:	2bc7      	cmp	r3, #199	@ 0xc7
 8006ac8:	f77f af76 	ble.w	80069b8 <Compress_Sample+0x310>
	}
	sizes.acceleration_size = out_idx - accel_start;
 8006acc:	f8b7 2066 	ldrh.w	r2, [r7, #102]	@ 0x66
 8006ad0:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8006ad2:	1ad3      	subs	r3, r2, r3
 8006ad4:	b29b      	uxth	r3, r3
 8006ad6:	84bb      	strh	r3, [r7, #36]	@ 0x24

	return sizes;
 8006ad8:	68fb      	ldr	r3, [r7, #12]
 8006ada:	461a      	mov	r2, r3
 8006adc:	f107 0320 	add.w	r3, r7, #32
 8006ae0:	6818      	ldr	r0, [r3, #0]
 8006ae2:	6010      	str	r0, [r2, #0]
 8006ae4:	889b      	ldrh	r3, [r3, #4]
 8006ae6:	8093      	strh	r3, [r2, #4]
}
 8006ae8:	68f8      	ldr	r0, [r7, #12]
 8006aea:	3768      	adds	r7, #104	@ 0x68
 8006aec:	46bd      	mov	sp, r7
 8006aee:	bd80      	pop	{r7, pc}
 8006af0:	08017b20 	.word	0x08017b20

08006af4 <ADPCM_Compression>:

/*-----FUNZIONE DI COMPRESSIONE ADPCM-----*/
uint8_t ADPCM_Compression(int16_t sample, AdpcmState_Typedef* state, const uint16_t* step_size_table) 
{
 8006af4:	b480      	push	{r7}
 8006af6:	b089      	sub	sp, #36	@ 0x24
 8006af8:	af00      	add	r7, sp, #0
 8006afa:	4603      	mov	r3, r0
 8006afc:	60b9      	str	r1, [r7, #8]
 8006afe:	607a      	str	r2, [r7, #4]
 8006b00:	81fb      	strh	r3, [r7, #14]
    int32_t diff = (int32_t)sample - state->previous_value;
 8006b02:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8006b06:	68ba      	ldr	r2, [r7, #8]
 8006b08:	f9b2 2000 	ldrsh.w	r2, [r2]
 8006b0c:	1a9b      	subs	r3, r3, r2
 8006b0e:	61fb      	str	r3, [r7, #28]
    uint16_t step = step_size_table[state->step_index];
 8006b10:	68bb      	ldr	r3, [r7, #8]
 8006b12:	f993 3002 	ldrsb.w	r3, [r3, #2]
 8006b16:	005b      	lsls	r3, r3, #1
 8006b18:	687a      	ldr	r2, [r7, #4]
 8006b1a:	4413      	add	r3, r2
 8006b1c:	881b      	ldrh	r3, [r3, #0]
 8006b1e:	837b      	strh	r3, [r7, #26]
    uint8_t nibble = 0;
 8006b20:	2300      	movs	r3, #0
 8006b22:	767b      	strb	r3, [r7, #25]

    if (diff < 0) 
 8006b24:	69fb      	ldr	r3, [r7, #28]
 8006b26:	2b00      	cmp	r3, #0
 8006b28:	da04      	bge.n	8006b34 <ADPCM_Compression+0x40>
	{
        nibble = 8; // Bit di segno
 8006b2a:	2308      	movs	r3, #8
 8006b2c:	767b      	strb	r3, [r7, #25]
        diff = -diff;
 8006b2e:	69fb      	ldr	r3, [r7, #28]
 8006b30:	425b      	negs	r3, r3
 8006b32:	61fb      	str	r3, [r7, #28]
    }

	if (step == 0) step = 1;
 8006b34:	8b7b      	ldrh	r3, [r7, #26]
 8006b36:	2b00      	cmp	r3, #0
 8006b38:	d101      	bne.n	8006b3e <ADPCM_Compression+0x4a>
 8006b3a:	2301      	movs	r3, #1
 8006b3c:	837b      	strh	r3, [r7, #26]
    // Calcola il nibble quantizzato
    uint32_t temp = (uint32_t)diff * 4;
 8006b3e:	69fb      	ldr	r3, [r7, #28]
 8006b40:	009b      	lsls	r3, r3, #2
 8006b42:	613b      	str	r3, [r7, #16]
    if (temp < step) 
 8006b44:	8b7b      	ldrh	r3, [r7, #26]
 8006b46:	693a      	ldr	r2, [r7, #16]
 8006b48:	429a      	cmp	r2, r3
 8006b4a:	d311      	bcc.n	8006b70 <ADPCM_Compression+0x7c>
	{
        nibble |= 0;
    } 
	else 
	{
        nibble |= (uint8_t)((temp / step > 7) ? 7 : (temp / step));
 8006b4c:	8b7b      	ldrh	r3, [r7, #26]
 8006b4e:	693a      	ldr	r2, [r7, #16]
 8006b50:	fbb2 f3f3 	udiv	r3, r2, r3
 8006b54:	2b07      	cmp	r3, #7
 8006b56:	d805      	bhi.n	8006b64 <ADPCM_Compression+0x70>
 8006b58:	8b7b      	ldrh	r3, [r7, #26]
 8006b5a:	693a      	ldr	r2, [r7, #16]
 8006b5c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006b60:	b25b      	sxtb	r3, r3
 8006b62:	e000      	b.n	8006b66 <ADPCM_Compression+0x72>
 8006b64:	2307      	movs	r3, #7
 8006b66:	f997 2019 	ldrsb.w	r2, [r7, #25]
 8006b6a:	4313      	orrs	r3, r2
 8006b6c:	b25b      	sxtb	r3, r3
 8006b6e:	767b      	strb	r3, [r7, #25]
    }

    // Ricostruisci il valore per la predizione successiva (usando solo il nibble)
    int32_t reconstructed_diff = (step * (nibble & 7)) / 4 + step / 8;
 8006b70:	8b7b      	ldrh	r3, [r7, #26]
 8006b72:	7e7a      	ldrb	r2, [r7, #25]
 8006b74:	f002 0207 	and.w	r2, r2, #7
 8006b78:	fb02 f303 	mul.w	r3, r2, r3
 8006b7c:	2b00      	cmp	r3, #0
 8006b7e:	da00      	bge.n	8006b82 <ADPCM_Compression+0x8e>
 8006b80:	3303      	adds	r3, #3
 8006b82:	109b      	asrs	r3, r3, #2
 8006b84:	461a      	mov	r2, r3
 8006b86:	8b7b      	ldrh	r3, [r7, #26]
 8006b88:	08db      	lsrs	r3, r3, #3
 8006b8a:	b29b      	uxth	r3, r3
 8006b8c:	4413      	add	r3, r2
 8006b8e:	617b      	str	r3, [r7, #20]
    if (nibble & 8) {
 8006b90:	7e7b      	ldrb	r3, [r7, #25]
 8006b92:	f003 0308 	and.w	r3, r3, #8
 8006b96:	2b00      	cmp	r3, #0
 8006b98:	d002      	beq.n	8006ba0 <ADPCM_Compression+0xac>
        reconstructed_diff = -reconstructed_diff;
 8006b9a:	697b      	ldr	r3, [r7, #20]
 8006b9c:	425b      	negs	r3, r3
 8006b9e:	617b      	str	r3, [r7, #20]
    }
    
    state->previous_value += reconstructed_diff;
 8006ba0:	68bb      	ldr	r3, [r7, #8]
 8006ba2:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006ba6:	b29a      	uxth	r2, r3
 8006ba8:	697b      	ldr	r3, [r7, #20]
 8006baa:	b29b      	uxth	r3, r3
 8006bac:	4413      	add	r3, r2
 8006bae:	b29b      	uxth	r3, r3
 8006bb0:	b21a      	sxth	r2, r3
 8006bb2:	68bb      	ldr	r3, [r7, #8]
 8006bb4:	801a      	strh	r2, [r3, #0]

    // CLAMP DINAMICO BASATO SULLA LUT
    if (step_size_table == step_size_table_12bit) 
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	4a1d      	ldr	r2, [pc, #116]	@ (8006c30 <ADPCM_Compression+0x13c>)
 8006bba:	4293      	cmp	r3, r2
 8006bbc:	d111      	bne.n	8006be2 <ADPCM_Compression+0xee>
    {
        // Dati 12-bit ADC: unsigned 0-4095
        if (state->previous_value > 4095) state->previous_value = 4095;
 8006bbe:	68bb      	ldr	r3, [r7, #8]
 8006bc0:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006bc4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006bc8:	db03      	blt.n	8006bd2 <ADPCM_Compression+0xde>
 8006bca:	68bb      	ldr	r3, [r7, #8]
 8006bcc:	f640 72ff 	movw	r2, #4095	@ 0xfff
 8006bd0:	801a      	strh	r2, [r3, #0]
        if (state->previous_value < 0) state->previous_value = 0;
 8006bd2:	68bb      	ldr	r3, [r7, #8]
 8006bd4:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006bd8:	2b00      	cmp	r3, #0
 8006bda:	da02      	bge.n	8006be2 <ADPCM_Compression+0xee>
 8006bdc:	68bb      	ldr	r3, [r7, #8]
 8006bde:	2200      	movs	r2, #0
 8006be0:	801a      	strh	r2, [r3, #0]
        if (state->previous_value > 32767) state->previous_value = 32767;
        if (state->previous_value < -32768) state->previous_value = -32768;
    }

    // Aggiorna l'indice dello step
    state->step_index += index_adjustment_table[nibble & 7];
 8006be2:	68bb      	ldr	r3, [r7, #8]
 8006be4:	f993 3002 	ldrsb.w	r3, [r3, #2]
 8006be8:	b2da      	uxtb	r2, r3
 8006bea:	7e7b      	ldrb	r3, [r7, #25]
 8006bec:	f003 0307 	and.w	r3, r3, #7
 8006bf0:	4910      	ldr	r1, [pc, #64]	@ (8006c34 <ADPCM_Compression+0x140>)
 8006bf2:	56cb      	ldrsb	r3, [r1, r3]
 8006bf4:	b2db      	uxtb	r3, r3
 8006bf6:	4413      	add	r3, r2
 8006bf8:	b2db      	uxtb	r3, r3
 8006bfa:	b25a      	sxtb	r2, r3
 8006bfc:	68bb      	ldr	r3, [r7, #8]
 8006bfe:	709a      	strb	r2, [r3, #2]
    if (state->step_index < 0) state->step_index = 0;
 8006c00:	68bb      	ldr	r3, [r7, #8]
 8006c02:	f993 3002 	ldrsb.w	r3, [r3, #2]
 8006c06:	2b00      	cmp	r3, #0
 8006c08:	da02      	bge.n	8006c10 <ADPCM_Compression+0x11c>
 8006c0a:	68bb      	ldr	r3, [r7, #8]
 8006c0c:	2200      	movs	r2, #0
 8006c0e:	709a      	strb	r2, [r3, #2]
    if (state->step_index > 87) state->step_index = 87;
 8006c10:	68bb      	ldr	r3, [r7, #8]
 8006c12:	f993 3002 	ldrsb.w	r3, [r3, #2]
 8006c16:	2b57      	cmp	r3, #87	@ 0x57
 8006c18:	dd02      	ble.n	8006c20 <ADPCM_Compression+0x12c>
 8006c1a:	68bb      	ldr	r3, [r7, #8]
 8006c1c:	2257      	movs	r2, #87	@ 0x57
 8006c1e:	709a      	strb	r2, [r3, #2]

    return nibble;
 8006c20:	7e7b      	ldrb	r3, [r7, #25]
}
 8006c22:	4618      	mov	r0, r3
 8006c24:	3724      	adds	r7, #36	@ 0x24
 8006c26:	46bd      	mov	sp, r7
 8006c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c2c:	4770      	bx	lr
 8006c2e:	bf00      	nop
 8006c30:	08017bd0 	.word	0x08017bd0
 8006c34:	08017c80 	.word	0x08017c80

08006c38 <Apply_Config>:


/*-----APPLICA VALORI CONFIGURAZIONE-----*/
void Apply_Config(void)
{
 8006c38:	b590      	push	{r4, r7, lr}
 8006c3a:	f5ad 5d81 	sub.w	sp, sp, #4128	@ 0x1020
 8006c3e:	b085      	sub	sp, #20
 8006c40:	af00      	add	r7, sp, #0
	FIL config_file;
	UINT bytes_written;
	
	if(strcmp(cfg_var, "DEVICE_ID") == 0) 
 8006c42:	49a3      	ldr	r1, [pc, #652]	@ (8006ed0 <Apply_Config+0x298>)
 8006c44:	48a3      	ldr	r0, [pc, #652]	@ (8006ed4 <Apply_Config+0x29c>)
 8006c46:	f7f9 fac3 	bl	80001d0 <strcmp>
 8006c4a:	4603      	mov	r3, r0
 8006c4c:	2b00      	cmp	r3, #0
 8006c4e:	d107      	bne.n	8006c60 <Apply_Config+0x28>
	{
		config.device_id = (uint8_t)atoi(new_cfg_val);
 8006c50:	48a1      	ldr	r0, [pc, #644]	@ (8006ed8 <Apply_Config+0x2a0>)
 8006c52:	f00f fb35 	bl	80162c0 <atoi>
 8006c56:	4603      	mov	r3, r0
 8006c58:	b2da      	uxtb	r2, r3
 8006c5a:	4ba0      	ldr	r3, [pc, #640]	@ (8006edc <Apply_Config+0x2a4>)
 8006c5c:	701a      	strb	r2, [r3, #0]
 8006c5e:	e102      	b.n	8006e66 <Apply_Config+0x22e>
    }
	else if(strcmp(cfg_var, "SAMP_FREQ") == 0)
 8006c60:	499f      	ldr	r1, [pc, #636]	@ (8006ee0 <Apply_Config+0x2a8>)
 8006c62:	489c      	ldr	r0, [pc, #624]	@ (8006ed4 <Apply_Config+0x29c>)
 8006c64:	f7f9 fab4 	bl	80001d0 <strcmp>
 8006c68:	4603      	mov	r3, r0
 8006c6a:	2b00      	cmp	r3, #0
 8006c6c:	d132      	bne.n	8006cd4 <Apply_Config+0x9c>
	{
		if((uint16_t)atoi(new_cfg_val) != 800 && (uint16_t)atoi(new_cfg_val) != 1600)
 8006c6e:	489a      	ldr	r0, [pc, #616]	@ (8006ed8 <Apply_Config+0x2a0>)
 8006c70:	f00f fb26 	bl	80162c0 <atoi>
 8006c74:	4603      	mov	r3, r0
 8006c76:	b29b      	uxth	r3, r3
 8006c78:	f5b3 7f48 	cmp.w	r3, #800	@ 0x320
 8006c7c:	d008      	beq.n	8006c90 <Apply_Config+0x58>
 8006c7e:	4896      	ldr	r0, [pc, #600]	@ (8006ed8 <Apply_Config+0x2a0>)
 8006c80:	f00f fb1e 	bl	80162c0 <atoi>
 8006c84:	4603      	mov	r3, r0
 8006c86:	b29b      	uxth	r3, r3
 8006c88:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 8006c8c:	f040 8114 	bne.w	8006eb8 <Apply_Config+0x280>
		{
			return;
		}
		else
		{
			if(((config.samp_freq / ACC_FIFO_WATERMARK) * config.buffering_secs * SAVING_BUFFER_LEN) * 2 > psram_get_size()) 
 8006c90:	4b92      	ldr	r3, [pc, #584]	@ (8006edc <Apply_Config+0x2a4>)
 8006c92:	885b      	ldrh	r3, [r3, #2]
 8006c94:	4a93      	ldr	r2, [pc, #588]	@ (8006ee4 <Apply_Config+0x2ac>)
 8006c96:	fba2 2303 	umull	r2, r3, r2, r3
 8006c9a:	099b      	lsrs	r3, r3, #6
 8006c9c:	b29b      	uxth	r3, r3
 8006c9e:	461a      	mov	r2, r3
 8006ca0:	4b8e      	ldr	r3, [pc, #568]	@ (8006edc <Apply_Config+0x2a4>)
 8006ca2:	791b      	ldrb	r3, [r3, #4]
 8006ca4:	fb02 f303 	mul.w	r3, r2, r3
 8006ca8:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 8006cac:	fb02 f303 	mul.w	r3, r2, r3
 8006cb0:	f503 63b4 	add.w	r3, r3, #1440	@ 0x5a0
 8006cb4:	005b      	lsls	r3, r3, #1
 8006cb6:	461c      	mov	r4, r3
 8006cb8:	f000 fcca 	bl	8007650 <psram_get_size>
 8006cbc:	4603      	mov	r3, r0
 8006cbe:	429c      	cmp	r4, r3
 8006cc0:	f240 80d1 	bls.w	8006e66 <Apply_Config+0x22e>
			{
				config.samp_freq = (uint16_t)atoi(new_cfg_val);
 8006cc4:	4884      	ldr	r0, [pc, #528]	@ (8006ed8 <Apply_Config+0x2a0>)
 8006cc6:	f00f fafb 	bl	80162c0 <atoi>
 8006cca:	4603      	mov	r3, r0
 8006ccc:	b29a      	uxth	r2, r3
 8006cce:	4b83      	ldr	r3, [pc, #524]	@ (8006edc <Apply_Config+0x2a4>)
 8006cd0:	805a      	strh	r2, [r3, #2]
 8006cd2:	e0c8      	b.n	8006e66 <Apply_Config+0x22e>
			}
		}
	}
	else if(strcmp(cfg_var, "BUFFER_SECS") == 0)
 8006cd4:	4984      	ldr	r1, [pc, #528]	@ (8006ee8 <Apply_Config+0x2b0>)
 8006cd6:	487f      	ldr	r0, [pc, #508]	@ (8006ed4 <Apply_Config+0x29c>)
 8006cd8:	f7f9 fa7a 	bl	80001d0 <strcmp>
 8006cdc:	4603      	mov	r3, r0
 8006cde:	2b00      	cmp	r3, #0
 8006ce0:	d131      	bne.n	8006d46 <Apply_Config+0x10e>
	{
		if((uint8_t)atoi(new_cfg_val) < 5 || (uint8_t)atoi(new_cfg_val) > 30)
 8006ce2:	487d      	ldr	r0, [pc, #500]	@ (8006ed8 <Apply_Config+0x2a0>)
 8006ce4:	f00f faec 	bl	80162c0 <atoi>
 8006ce8:	4603      	mov	r3, r0
 8006cea:	b2db      	uxtb	r3, r3
 8006cec:	2b04      	cmp	r3, #4
 8006cee:	f240 80e5 	bls.w	8006ebc <Apply_Config+0x284>
 8006cf2:	4879      	ldr	r0, [pc, #484]	@ (8006ed8 <Apply_Config+0x2a0>)
 8006cf4:	f00f fae4 	bl	80162c0 <atoi>
 8006cf8:	4603      	mov	r3, r0
 8006cfa:	b2db      	uxtb	r3, r3
 8006cfc:	2b1e      	cmp	r3, #30
 8006cfe:	f200 80dd 	bhi.w	8006ebc <Apply_Config+0x284>
		{
			return;
		}
		else
		{
			if(((config.samp_freq / ACC_FIFO_WATERMARK) * config.buffering_secs * SAVING_BUFFER_LEN) * 2 > psram_get_size()) 
 8006d02:	4b76      	ldr	r3, [pc, #472]	@ (8006edc <Apply_Config+0x2a4>)
 8006d04:	885b      	ldrh	r3, [r3, #2]
 8006d06:	4a77      	ldr	r2, [pc, #476]	@ (8006ee4 <Apply_Config+0x2ac>)
 8006d08:	fba2 2303 	umull	r2, r3, r2, r3
 8006d0c:	099b      	lsrs	r3, r3, #6
 8006d0e:	b29b      	uxth	r3, r3
 8006d10:	461a      	mov	r2, r3
 8006d12:	4b72      	ldr	r3, [pc, #456]	@ (8006edc <Apply_Config+0x2a4>)
 8006d14:	791b      	ldrb	r3, [r3, #4]
 8006d16:	fb02 f303 	mul.w	r3, r2, r3
 8006d1a:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 8006d1e:	fb02 f303 	mul.w	r3, r2, r3
 8006d22:	f503 63b4 	add.w	r3, r3, #1440	@ 0x5a0
 8006d26:	005b      	lsls	r3, r3, #1
 8006d28:	461c      	mov	r4, r3
 8006d2a:	f000 fc91 	bl	8007650 <psram_get_size>
 8006d2e:	4603      	mov	r3, r0
 8006d30:	429c      	cmp	r4, r3
 8006d32:	f240 8098 	bls.w	8006e66 <Apply_Config+0x22e>
			{
				config.buffering_secs = (uint8_t)atoi(new_cfg_val);
 8006d36:	4868      	ldr	r0, [pc, #416]	@ (8006ed8 <Apply_Config+0x2a0>)
 8006d38:	f00f fac2 	bl	80162c0 <atoi>
 8006d3c:	4603      	mov	r3, r0
 8006d3e:	b2da      	uxtb	r2, r3
 8006d40:	4b66      	ldr	r3, [pc, #408]	@ (8006edc <Apply_Config+0x2a4>)
 8006d42:	711a      	strb	r2, [r3, #4]
 8006d44:	e08f      	b.n	8006e66 <Apply_Config+0x22e>
			}
		}
	}
	else if(strcmp(cfg_var, "CONN_TIMEOUT") == 0)
 8006d46:	4969      	ldr	r1, [pc, #420]	@ (8006eec <Apply_Config+0x2b4>)
 8006d48:	4862      	ldr	r0, [pc, #392]	@ (8006ed4 <Apply_Config+0x29c>)
 8006d4a:	f7f9 fa41 	bl	80001d0 <strcmp>
 8006d4e:	4603      	mov	r3, r0
 8006d50:	2b00      	cmp	r3, #0
 8006d52:	d107      	bne.n	8006d64 <Apply_Config+0x12c>
	{
		config.connection_timeout_ms = (uint32_t)atoi(new_cfg_val);
 8006d54:	4860      	ldr	r0, [pc, #384]	@ (8006ed8 <Apply_Config+0x2a0>)
 8006d56:	f00f fab3 	bl	80162c0 <atoi>
 8006d5a:	4603      	mov	r3, r0
 8006d5c:	461a      	mov	r2, r3
 8006d5e:	4b5f      	ldr	r3, [pc, #380]	@ (8006edc <Apply_Config+0x2a4>)
 8006d60:	609a      	str	r2, [r3, #8]
 8006d62:	e080      	b.n	8006e66 <Apply_Config+0x22e>
	}
	else if(strcmp(cfg_var, "LOG_PERIOD") == 0)
 8006d64:	4962      	ldr	r1, [pc, #392]	@ (8006ef0 <Apply_Config+0x2b8>)
 8006d66:	485b      	ldr	r0, [pc, #364]	@ (8006ed4 <Apply_Config+0x29c>)
 8006d68:	f7f9 fa32 	bl	80001d0 <strcmp>
 8006d6c:	4603      	mov	r3, r0
 8006d6e:	2b00      	cmp	r3, #0
 8006d70:	d107      	bne.n	8006d82 <Apply_Config+0x14a>
	{
		config.log_period_ms = (uint32_t)atoi(new_cfg_val);
 8006d72:	4859      	ldr	r0, [pc, #356]	@ (8006ed8 <Apply_Config+0x2a0>)
 8006d74:	f00f faa4 	bl	80162c0 <atoi>
 8006d78:	4603      	mov	r3, r0
 8006d7a:	461a      	mov	r2, r3
 8006d7c:	4b57      	ldr	r3, [pc, #348]	@ (8006edc <Apply_Config+0x2a4>)
 8006d7e:	60da      	str	r2, [r3, #12]
 8006d80:	e071      	b.n	8006e66 <Apply_Config+0x22e>
	}
	else if(strcmp(cfg_var, "HAMMER_TH") == 0)
 8006d82:	495c      	ldr	r1, [pc, #368]	@ (8006ef4 <Apply_Config+0x2bc>)
 8006d84:	4853      	ldr	r0, [pc, #332]	@ (8006ed4 <Apply_Config+0x29c>)
 8006d86:	f7f9 fa23 	bl	80001d0 <strcmp>
 8006d8a:	4603      	mov	r3, r0
 8006d8c:	2b00      	cmp	r3, #0
 8006d8e:	d107      	bne.n	8006da0 <Apply_Config+0x168>
	{
		config.hammer_th = (uint16_t)atoi(new_cfg_val);
 8006d90:	4851      	ldr	r0, [pc, #324]	@ (8006ed8 <Apply_Config+0x2a0>)
 8006d92:	f00f fa95 	bl	80162c0 <atoi>
 8006d96:	4603      	mov	r3, r0
 8006d98:	b29a      	uxth	r2, r3
 8006d9a:	4b50      	ldr	r3, [pc, #320]	@ (8006edc <Apply_Config+0x2a4>)
 8006d9c:	821a      	strh	r2, [r3, #16]
 8006d9e:	e062      	b.n	8006e66 <Apply_Config+0x22e>
	}
    else if(strcmp(cfg_var, "HIGH_TH") == 0) 
 8006da0:	4955      	ldr	r1, [pc, #340]	@ (8006ef8 <Apply_Config+0x2c0>)
 8006da2:	484c      	ldr	r0, [pc, #304]	@ (8006ed4 <Apply_Config+0x29c>)
 8006da4:	f7f9 fa14 	bl	80001d0 <strcmp>
 8006da8:	4603      	mov	r3, r0
 8006daa:	2b00      	cmp	r3, #0
 8006dac:	d115      	bne.n	8006dda <Apply_Config+0x1a2>
	{
        if(cfg_idx >= 0 && cfg_idx < 24) 
 8006dae:	4b53      	ldr	r3, [pc, #332]	@ (8006efc <Apply_Config+0x2c4>)
 8006db0:	681b      	ldr	r3, [r3, #0]
 8006db2:	2b00      	cmp	r3, #0
 8006db4:	db57      	blt.n	8006e66 <Apply_Config+0x22e>
 8006db6:	4b51      	ldr	r3, [pc, #324]	@ (8006efc <Apply_Config+0x2c4>)
 8006db8:	681b      	ldr	r3, [r3, #0]
 8006dba:	2b17      	cmp	r3, #23
 8006dbc:	dc53      	bgt.n	8006e66 <Apply_Config+0x22e>
		{
            config.high_th[cfg_idx] = (uint16_t)atoi(new_cfg_val);
 8006dbe:	4846      	ldr	r0, [pc, #280]	@ (8006ed8 <Apply_Config+0x2a0>)
 8006dc0:	f00f fa7e 	bl	80162c0 <atoi>
 8006dc4:	4602      	mov	r2, r0
 8006dc6:	4b4d      	ldr	r3, [pc, #308]	@ (8006efc <Apply_Config+0x2c4>)
 8006dc8:	681b      	ldr	r3, [r3, #0]
 8006dca:	b291      	uxth	r1, r2
 8006dcc:	4a43      	ldr	r2, [pc, #268]	@ (8006edc <Apply_Config+0x2a4>)
 8006dce:	3320      	adds	r3, #32
 8006dd0:	005b      	lsls	r3, r3, #1
 8006dd2:	4413      	add	r3, r2
 8006dd4:	460a      	mov	r2, r1
 8006dd6:	805a      	strh	r2, [r3, #2]
 8006dd8:	e045      	b.n	8006e66 <Apply_Config+0x22e>
        }
    }
    else if(strcmp(cfg_var, "LOW_TH") == 0) 
 8006dda:	4949      	ldr	r1, [pc, #292]	@ (8006f00 <Apply_Config+0x2c8>)
 8006ddc:	483d      	ldr	r0, [pc, #244]	@ (8006ed4 <Apply_Config+0x29c>)
 8006dde:	f7f9 f9f7 	bl	80001d0 <strcmp>
 8006de2:	4603      	mov	r3, r0
 8006de4:	2b00      	cmp	r3, #0
 8006de6:	d115      	bne.n	8006e14 <Apply_Config+0x1dc>
	{
        if(cfg_idx >= 0 && cfg_idx < 24) 
 8006de8:	4b44      	ldr	r3, [pc, #272]	@ (8006efc <Apply_Config+0x2c4>)
 8006dea:	681b      	ldr	r3, [r3, #0]
 8006dec:	2b00      	cmp	r3, #0
 8006dee:	db3a      	blt.n	8006e66 <Apply_Config+0x22e>
 8006df0:	4b42      	ldr	r3, [pc, #264]	@ (8006efc <Apply_Config+0x2c4>)
 8006df2:	681b      	ldr	r3, [r3, #0]
 8006df4:	2b17      	cmp	r3, #23
 8006df6:	dc36      	bgt.n	8006e66 <Apply_Config+0x22e>
		{
            config.low_th[cfg_idx] = (uint16_t)atoi(new_cfg_val);
 8006df8:	4837      	ldr	r0, [pc, #220]	@ (8006ed8 <Apply_Config+0x2a0>)
 8006dfa:	f00f fa61 	bl	80162c0 <atoi>
 8006dfe:	4602      	mov	r2, r0
 8006e00:	4b3e      	ldr	r3, [pc, #248]	@ (8006efc <Apply_Config+0x2c4>)
 8006e02:	681b      	ldr	r3, [r3, #0]
 8006e04:	b291      	uxth	r1, r2
 8006e06:	4a35      	ldr	r2, [pc, #212]	@ (8006edc <Apply_Config+0x2a4>)
 8006e08:	3308      	adds	r3, #8
 8006e0a:	005b      	lsls	r3, r3, #1
 8006e0c:	4413      	add	r3, r2
 8006e0e:	460a      	mov	r2, r1
 8006e10:	805a      	strh	r2, [r3, #2]
 8006e12:	e028      	b.n	8006e66 <Apply_Config+0x22e>
        }
    }
    else if(strcmp(cfg_var, "TCP_IP") == 0)
 8006e14:	493b      	ldr	r1, [pc, #236]	@ (8006f04 <Apply_Config+0x2cc>)
 8006e16:	482f      	ldr	r0, [pc, #188]	@ (8006ed4 <Apply_Config+0x29c>)
 8006e18:	f7f9 f9da 	bl	80001d0 <strcmp>
 8006e1c:	4603      	mov	r3, r0
 8006e1e:	2b00      	cmp	r3, #0
 8006e20:	d10d      	bne.n	8006e3e <Apply_Config+0x206>
	{
        strncpy(config.tcp_IPaddress, new_cfg_val, sizeof(config.tcp_IPaddress) - 1);
 8006e22:	223f      	movs	r2, #63	@ 0x3f
 8006e24:	492c      	ldr	r1, [pc, #176]	@ (8006ed8 <Apply_Config+0x2a0>)
 8006e26:	4838      	ldr	r0, [pc, #224]	@ (8006f08 <Apply_Config+0x2d0>)
 8006e28:	f00f fb5b 	bl	80164e2 <strncpy>
        config.tcp_IPaddress[sizeof(config.tcp_IPaddress) - 1] = '\0';
 8006e2c:	4b2b      	ldr	r3, [pc, #172]	@ (8006edc <Apply_Config+0x2a4>)
 8006e2e:	2200      	movs	r2, #0
 8006e30:	f883 20b1 	strb.w	r2, [r3, #177]	@ 0xb1
		strcpy(sys.TCP.IP_address, config.tcp_IPaddress);
 8006e34:	4934      	ldr	r1, [pc, #208]	@ (8006f08 <Apply_Config+0x2d0>)
 8006e36:	4835      	ldr	r0, [pc, #212]	@ (8006f0c <Apply_Config+0x2d4>)
 8006e38:	f00f fba8 	bl	801658c <strcpy>
 8006e3c:	e013      	b.n	8006e66 <Apply_Config+0x22e>
    }
    else if(strcmp(cfg_var, "TCP_PORT") == 0)
 8006e3e:	4934      	ldr	r1, [pc, #208]	@ (8006f10 <Apply_Config+0x2d8>)
 8006e40:	4824      	ldr	r0, [pc, #144]	@ (8006ed4 <Apply_Config+0x29c>)
 8006e42:	f7f9 f9c5 	bl	80001d0 <strcmp>
 8006e46:	4603      	mov	r3, r0
 8006e48:	2b00      	cmp	r3, #0
 8006e4a:	d139      	bne.n	8006ec0 <Apply_Config+0x288>
	{
        strncpy(config.tcp_Port, new_cfg_val, sizeof(config.tcp_Port) - 1);
 8006e4c:	223f      	movs	r2, #63	@ 0x3f
 8006e4e:	4922      	ldr	r1, [pc, #136]	@ (8006ed8 <Apply_Config+0x2a0>)
 8006e50:	4830      	ldr	r0, [pc, #192]	@ (8006f14 <Apply_Config+0x2dc>)
 8006e52:	f00f fb46 	bl	80164e2 <strncpy>
        config.tcp_Port[sizeof(config.tcp_Port) - 1] = '\0';
 8006e56:	4b21      	ldr	r3, [pc, #132]	@ (8006edc <Apply_Config+0x2a4>)
 8006e58:	2200      	movs	r2, #0
 8006e5a:	f883 20f1 	strb.w	r2, [r3, #241]	@ 0xf1
		strcpy(sys.TCP.Port, config.tcp_Port);
 8006e5e:	492d      	ldr	r1, [pc, #180]	@ (8006f14 <Apply_Config+0x2dc>)
 8006e60:	482d      	ldr	r0, [pc, #180]	@ (8006f18 <Apply_Config+0x2e0>)
 8006e62:	f00f fb93 	bl	801658c <strcpy>
	else
	{
		return;
	}

	if (f_open(&config_file, CONFIG_FILE, FA_WRITE | FA_CREATE_ALWAYS) == FR_OK)
 8006e66:	f107 0310 	add.w	r3, r7, #16
 8006e6a:	3b08      	subs	r3, #8
 8006e6c:	220a      	movs	r2, #10
 8006e6e:	492b      	ldr	r1, [pc, #172]	@ (8006f1c <Apply_Config+0x2e4>)
 8006e70:	4618      	mov	r0, r3
 8006e72:	f002 ff2d 	bl	8009cd0 <f_open>
 8006e76:	4603      	mov	r3, r0
 8006e78:	2b00      	cmp	r3, #0
 8006e7a:	d123      	bne.n	8006ec4 <Apply_Config+0x28c>
	{
		f_write(&config_file, &config, sizeof(config), &bytes_written);
 8006e7c:	f107 0310 	add.w	r3, r7, #16
 8006e80:	3b0c      	subs	r3, #12
 8006e82:	f107 0010 	add.w	r0, r7, #16
 8006e86:	3808      	subs	r0, #8
 8006e88:	22f4      	movs	r2, #244	@ 0xf4
 8006e8a:	4914      	ldr	r1, [pc, #80]	@ (8006edc <Apply_Config+0x2a4>)
 8006e8c:	f003 fa0b 	bl	800a2a6 <f_write>
		f_close(&config_file);
 8006e90:	f107 0310 	add.w	r3, r7, #16
 8006e94:	3b08      	subs	r3, #8
 8006e96:	4618      	mov	r0, r3
 8006e98:	f003 fc0e 	bl	800a6b8 <f_close>
	else
	{
		return;
	}
	
	memset(cfg_var, 0, sizeof(cfg_var));
 8006e9c:	2214      	movs	r2, #20
 8006e9e:	2100      	movs	r1, #0
 8006ea0:	480c      	ldr	r0, [pc, #48]	@ (8006ed4 <Apply_Config+0x29c>)
 8006ea2:	f00f faf7 	bl	8016494 <memset>
	cfg_idx = 0;
 8006ea6:	4b15      	ldr	r3, [pc, #84]	@ (8006efc <Apply_Config+0x2c4>)
 8006ea8:	2200      	movs	r2, #0
 8006eaa:	601a      	str	r2, [r3, #0]
	memset(new_cfg_val, 0, sizeof(new_cfg_val));	
 8006eac:	220a      	movs	r2, #10
 8006eae:	2100      	movs	r1, #0
 8006eb0:	4809      	ldr	r0, [pc, #36]	@ (8006ed8 <Apply_Config+0x2a0>)
 8006eb2:	f00f faef 	bl	8016494 <memset>
 8006eb6:	e006      	b.n	8006ec6 <Apply_Config+0x28e>
			return;
 8006eb8:	bf00      	nop
 8006eba:	e004      	b.n	8006ec6 <Apply_Config+0x28e>
			return;
 8006ebc:	bf00      	nop
 8006ebe:	e002      	b.n	8006ec6 <Apply_Config+0x28e>
		return;
 8006ec0:	bf00      	nop
 8006ec2:	e000      	b.n	8006ec6 <Apply_Config+0x28e>
		return;
 8006ec4:	bf00      	nop
}
 8006ec6:	f507 5781 	add.w	r7, r7, #4128	@ 0x1020
 8006eca:	3714      	adds	r7, #20
 8006ecc:	46bd      	mov	sp, r7
 8006ece:	bd90      	pop	{r4, r7, pc}
 8006ed0:	08017a10 	.word	0x08017a10
 8006ed4:	20005764 	.word	0x20005764
 8006ed8:	2000577c 	.word	0x2000577c
 8006edc:	20001784 	.word	0x20001784
 8006ee0:	08017a1c 	.word	0x08017a1c
 8006ee4:	51eb851f 	.word	0x51eb851f
 8006ee8:	08017a28 	.word	0x08017a28
 8006eec:	08017a34 	.word	0x08017a34
 8006ef0:	08017a44 	.word	0x08017a44
 8006ef4:	08017a50 	.word	0x08017a50
 8006ef8:	08017a5c 	.word	0x08017a5c
 8006efc:	20005778 	.word	0x20005778
 8006f00:	08017a64 	.word	0x08017a64
 8006f04:	08017a6c 	.word	0x08017a6c
 8006f08:	200017f6 	.word	0x200017f6
 8006f0c:	200016b8 	.word	0x200016b8
 8006f10:	08017a74 	.word	0x08017a74
 8006f14:	20001836 	.word	0x20001836
 8006f18:	2000171c 	.word	0x2000171c
 8006f1c:	08017a80 	.word	0x08017a80

08006f20 <Get_Config>:

/*-----RECUPERO E INVIO VALORE DI CONFIGURAZIONE-----*/
void Get_Config(void)
{
 8006f20:	b580      	push	{r7, lr}
 8006f22:	b0a0      	sub	sp, #128	@ 0x80
 8006f24:	af00      	add	r7, sp, #0
	char value_str[128] = {0};
 8006f26:	463b      	mov	r3, r7
 8006f28:	2280      	movs	r2, #128	@ 0x80
 8006f2a:	2100      	movs	r1, #0
 8006f2c:	4618      	mov	r0, r3
 8006f2e:	f00f fab1 	bl	8016494 <memset>

	if(strcmp(cfg_var, "DEVICE_ID") == 0)
 8006f32:	4967      	ldr	r1, [pc, #412]	@ (80070d0 <Get_Config+0x1b0>)
 8006f34:	4867      	ldr	r0, [pc, #412]	@ (80070d4 <Get_Config+0x1b4>)
 8006f36:	f7f9 f94b 	bl	80001d0 <strcmp>
 8006f3a:	4603      	mov	r3, r0
 8006f3c:	2b00      	cmp	r3, #0
 8006f3e:	d108      	bne.n	8006f52 <Get_Config+0x32>
	{
		sprintf(value_str, "R:%u", config.device_id);
 8006f40:	4b65      	ldr	r3, [pc, #404]	@ (80070d8 <Get_Config+0x1b8>)
 8006f42:	781b      	ldrb	r3, [r3, #0]
 8006f44:	461a      	mov	r2, r3
 8006f46:	463b      	mov	r3, r7
 8006f48:	4964      	ldr	r1, [pc, #400]	@ (80070dc <Get_Config+0x1bc>)
 8006f4a:	4618      	mov	r0, r3
 8006f4c:	f00f fa42 	bl	80163d4 <siprintf>
 8006f50:	e0a9      	b.n	80070a6 <Get_Config+0x186>
	}
	else if(strcmp(cfg_var, "SAMP_FREQ") == 0)
 8006f52:	4963      	ldr	r1, [pc, #396]	@ (80070e0 <Get_Config+0x1c0>)
 8006f54:	485f      	ldr	r0, [pc, #380]	@ (80070d4 <Get_Config+0x1b4>)
 8006f56:	f7f9 f93b 	bl	80001d0 <strcmp>
 8006f5a:	4603      	mov	r3, r0
 8006f5c:	2b00      	cmp	r3, #0
 8006f5e:	d108      	bne.n	8006f72 <Get_Config+0x52>
	{
		sprintf(value_str, "R:%u", config.samp_freq);
 8006f60:	4b5d      	ldr	r3, [pc, #372]	@ (80070d8 <Get_Config+0x1b8>)
 8006f62:	885b      	ldrh	r3, [r3, #2]
 8006f64:	461a      	mov	r2, r3
 8006f66:	463b      	mov	r3, r7
 8006f68:	495c      	ldr	r1, [pc, #368]	@ (80070dc <Get_Config+0x1bc>)
 8006f6a:	4618      	mov	r0, r3
 8006f6c:	f00f fa32 	bl	80163d4 <siprintf>
 8006f70:	e099      	b.n	80070a6 <Get_Config+0x186>
	}
	else if(strcmp(cfg_var, "BUFFER_SECS") == 0)
 8006f72:	495c      	ldr	r1, [pc, #368]	@ (80070e4 <Get_Config+0x1c4>)
 8006f74:	4857      	ldr	r0, [pc, #348]	@ (80070d4 <Get_Config+0x1b4>)
 8006f76:	f7f9 f92b 	bl	80001d0 <strcmp>
 8006f7a:	4603      	mov	r3, r0
 8006f7c:	2b00      	cmp	r3, #0
 8006f7e:	d108      	bne.n	8006f92 <Get_Config+0x72>
	{
		sprintf(value_str, "R:%u", config.buffering_secs);
 8006f80:	4b55      	ldr	r3, [pc, #340]	@ (80070d8 <Get_Config+0x1b8>)
 8006f82:	791b      	ldrb	r3, [r3, #4]
 8006f84:	461a      	mov	r2, r3
 8006f86:	463b      	mov	r3, r7
 8006f88:	4954      	ldr	r1, [pc, #336]	@ (80070dc <Get_Config+0x1bc>)
 8006f8a:	4618      	mov	r0, r3
 8006f8c:	f00f fa22 	bl	80163d4 <siprintf>
 8006f90:	e089      	b.n	80070a6 <Get_Config+0x186>
	}
	else if(strcmp(cfg_var, "CONN_TIMEOUT") == 0)
 8006f92:	4955      	ldr	r1, [pc, #340]	@ (80070e8 <Get_Config+0x1c8>)
 8006f94:	484f      	ldr	r0, [pc, #316]	@ (80070d4 <Get_Config+0x1b4>)
 8006f96:	f7f9 f91b 	bl	80001d0 <strcmp>
 8006f9a:	4603      	mov	r3, r0
 8006f9c:	2b00      	cmp	r3, #0
 8006f9e:	d107      	bne.n	8006fb0 <Get_Config+0x90>
	{
		sprintf(value_str, "R:%lu", config.connection_timeout_ms);
 8006fa0:	4b4d      	ldr	r3, [pc, #308]	@ (80070d8 <Get_Config+0x1b8>)
 8006fa2:	689a      	ldr	r2, [r3, #8]
 8006fa4:	463b      	mov	r3, r7
 8006fa6:	4951      	ldr	r1, [pc, #324]	@ (80070ec <Get_Config+0x1cc>)
 8006fa8:	4618      	mov	r0, r3
 8006faa:	f00f fa13 	bl	80163d4 <siprintf>
 8006fae:	e07a      	b.n	80070a6 <Get_Config+0x186>
	}
	else if(strcmp(cfg_var, "LOG_PERIOD") == 0)
 8006fb0:	494f      	ldr	r1, [pc, #316]	@ (80070f0 <Get_Config+0x1d0>)
 8006fb2:	4848      	ldr	r0, [pc, #288]	@ (80070d4 <Get_Config+0x1b4>)
 8006fb4:	f7f9 f90c 	bl	80001d0 <strcmp>
 8006fb8:	4603      	mov	r3, r0
 8006fba:	2b00      	cmp	r3, #0
 8006fbc:	d107      	bne.n	8006fce <Get_Config+0xae>
	{
		sprintf(value_str, "R:%lu", config.log_period_ms);
 8006fbe:	4b46      	ldr	r3, [pc, #280]	@ (80070d8 <Get_Config+0x1b8>)
 8006fc0:	68da      	ldr	r2, [r3, #12]
 8006fc2:	463b      	mov	r3, r7
 8006fc4:	4949      	ldr	r1, [pc, #292]	@ (80070ec <Get_Config+0x1cc>)
 8006fc6:	4618      	mov	r0, r3
 8006fc8:	f00f fa04 	bl	80163d4 <siprintf>
 8006fcc:	e06b      	b.n	80070a6 <Get_Config+0x186>
	}
	else if(strcmp(cfg_var, "HAMMER_TH") == 0)
 8006fce:	4949      	ldr	r1, [pc, #292]	@ (80070f4 <Get_Config+0x1d4>)
 8006fd0:	4840      	ldr	r0, [pc, #256]	@ (80070d4 <Get_Config+0x1b4>)
 8006fd2:	f7f9 f8fd 	bl	80001d0 <strcmp>
 8006fd6:	4603      	mov	r3, r0
 8006fd8:	2b00      	cmp	r3, #0
 8006fda:	d108      	bne.n	8006fee <Get_Config+0xce>
	{
		sprintf(value_str, "R:%u", config.hammer_th);
 8006fdc:	4b3e      	ldr	r3, [pc, #248]	@ (80070d8 <Get_Config+0x1b8>)
 8006fde:	8a1b      	ldrh	r3, [r3, #16]
 8006fe0:	461a      	mov	r2, r3
 8006fe2:	463b      	mov	r3, r7
 8006fe4:	493d      	ldr	r1, [pc, #244]	@ (80070dc <Get_Config+0x1bc>)
 8006fe6:	4618      	mov	r0, r3
 8006fe8:	f00f f9f4 	bl	80163d4 <siprintf>
 8006fec:	e05b      	b.n	80070a6 <Get_Config+0x186>
	}
	else if(strcmp(cfg_var, "HIGH_TH") == 0 && cfg_idx >= 0 && cfg_idx < 24)
 8006fee:	4942      	ldr	r1, [pc, #264]	@ (80070f8 <Get_Config+0x1d8>)
 8006ff0:	4838      	ldr	r0, [pc, #224]	@ (80070d4 <Get_Config+0x1b4>)
 8006ff2:	f7f9 f8ed 	bl	80001d0 <strcmp>
 8006ff6:	4603      	mov	r3, r0
 8006ff8:	2b00      	cmp	r3, #0
 8006ffa:	d115      	bne.n	8007028 <Get_Config+0x108>
 8006ffc:	4b3f      	ldr	r3, [pc, #252]	@ (80070fc <Get_Config+0x1dc>)
 8006ffe:	681b      	ldr	r3, [r3, #0]
 8007000:	2b00      	cmp	r3, #0
 8007002:	db11      	blt.n	8007028 <Get_Config+0x108>
 8007004:	4b3d      	ldr	r3, [pc, #244]	@ (80070fc <Get_Config+0x1dc>)
 8007006:	681b      	ldr	r3, [r3, #0]
 8007008:	2b17      	cmp	r3, #23
 800700a:	dc0d      	bgt.n	8007028 <Get_Config+0x108>
	{
		sprintf(value_str, "R:%u", config.high_th[cfg_idx]);
 800700c:	4b3b      	ldr	r3, [pc, #236]	@ (80070fc <Get_Config+0x1dc>)
 800700e:	681b      	ldr	r3, [r3, #0]
 8007010:	4a31      	ldr	r2, [pc, #196]	@ (80070d8 <Get_Config+0x1b8>)
 8007012:	3320      	adds	r3, #32
 8007014:	005b      	lsls	r3, r3, #1
 8007016:	4413      	add	r3, r2
 8007018:	885b      	ldrh	r3, [r3, #2]
 800701a:	461a      	mov	r2, r3
 800701c:	463b      	mov	r3, r7
 800701e:	492f      	ldr	r1, [pc, #188]	@ (80070dc <Get_Config+0x1bc>)
 8007020:	4618      	mov	r0, r3
 8007022:	f00f f9d7 	bl	80163d4 <siprintf>
 8007026:	e03e      	b.n	80070a6 <Get_Config+0x186>
	}
	else if(strcmp(cfg_var, "LOW_TH") == 0 && cfg_idx >= 0 && cfg_idx < 24)
 8007028:	4935      	ldr	r1, [pc, #212]	@ (8007100 <Get_Config+0x1e0>)
 800702a:	482a      	ldr	r0, [pc, #168]	@ (80070d4 <Get_Config+0x1b4>)
 800702c:	f7f9 f8d0 	bl	80001d0 <strcmp>
 8007030:	4603      	mov	r3, r0
 8007032:	2b00      	cmp	r3, #0
 8007034:	d115      	bne.n	8007062 <Get_Config+0x142>
 8007036:	4b31      	ldr	r3, [pc, #196]	@ (80070fc <Get_Config+0x1dc>)
 8007038:	681b      	ldr	r3, [r3, #0]
 800703a:	2b00      	cmp	r3, #0
 800703c:	db11      	blt.n	8007062 <Get_Config+0x142>
 800703e:	4b2f      	ldr	r3, [pc, #188]	@ (80070fc <Get_Config+0x1dc>)
 8007040:	681b      	ldr	r3, [r3, #0]
 8007042:	2b17      	cmp	r3, #23
 8007044:	dc0d      	bgt.n	8007062 <Get_Config+0x142>
	{
		sprintf(value_str, "R:%u", config.low_th[cfg_idx]);
 8007046:	4b2d      	ldr	r3, [pc, #180]	@ (80070fc <Get_Config+0x1dc>)
 8007048:	681b      	ldr	r3, [r3, #0]
 800704a:	4a23      	ldr	r2, [pc, #140]	@ (80070d8 <Get_Config+0x1b8>)
 800704c:	3308      	adds	r3, #8
 800704e:	005b      	lsls	r3, r3, #1
 8007050:	4413      	add	r3, r2
 8007052:	885b      	ldrh	r3, [r3, #2]
 8007054:	461a      	mov	r2, r3
 8007056:	463b      	mov	r3, r7
 8007058:	4920      	ldr	r1, [pc, #128]	@ (80070dc <Get_Config+0x1bc>)
 800705a:	4618      	mov	r0, r3
 800705c:	f00f f9ba 	bl	80163d4 <siprintf>
 8007060:	e021      	b.n	80070a6 <Get_Config+0x186>
	}
	else if(strcmp(cfg_var, "TCP_IP") == 0)
 8007062:	4928      	ldr	r1, [pc, #160]	@ (8007104 <Get_Config+0x1e4>)
 8007064:	481b      	ldr	r0, [pc, #108]	@ (80070d4 <Get_Config+0x1b4>)
 8007066:	f7f9 f8b3 	bl	80001d0 <strcmp>
 800706a:	4603      	mov	r3, r0
 800706c:	2b00      	cmp	r3, #0
 800706e:	d106      	bne.n	800707e <Get_Config+0x15e>
	{
		sprintf(value_str, "R:%s", config.tcp_IPaddress);
 8007070:	463b      	mov	r3, r7
 8007072:	4a25      	ldr	r2, [pc, #148]	@ (8007108 <Get_Config+0x1e8>)
 8007074:	4925      	ldr	r1, [pc, #148]	@ (800710c <Get_Config+0x1ec>)
 8007076:	4618      	mov	r0, r3
 8007078:	f00f f9ac 	bl	80163d4 <siprintf>
 800707c:	e013      	b.n	80070a6 <Get_Config+0x186>
	}
	else if(strcmp(cfg_var, "TCP_PORT") == 0)
 800707e:	4924      	ldr	r1, [pc, #144]	@ (8007110 <Get_Config+0x1f0>)
 8007080:	4814      	ldr	r0, [pc, #80]	@ (80070d4 <Get_Config+0x1b4>)
 8007082:	f7f9 f8a5 	bl	80001d0 <strcmp>
 8007086:	4603      	mov	r3, r0
 8007088:	2b00      	cmp	r3, #0
 800708a:	d106      	bne.n	800709a <Get_Config+0x17a>
	{
		sprintf(value_str, "R:%s", config.tcp_Port);
 800708c:	463b      	mov	r3, r7
 800708e:	4a21      	ldr	r2, [pc, #132]	@ (8007114 <Get_Config+0x1f4>)
 8007090:	491e      	ldr	r1, [pc, #120]	@ (800710c <Get_Config+0x1ec>)
 8007092:	4618      	mov	r0, r3
 8007094:	f00f f99e 	bl	80163d4 <siprintf>
 8007098:	e005      	b.n	80070a6 <Get_Config+0x186>
	}
	else
	{
		strncpy(value_str, "R:UNKNOWN", sizeof(value_str)-1);
 800709a:	463b      	mov	r3, r7
 800709c:	227f      	movs	r2, #127	@ 0x7f
 800709e:	491e      	ldr	r1, [pc, #120]	@ (8007118 <Get_Config+0x1f8>)
 80070a0:	4618      	mov	r0, r3
 80070a2:	f00f fa1e 	bl	80164e2 <strncpy>
	}

	memset(cfg_var, 0, sizeof(cfg_var));
 80070a6:	2214      	movs	r2, #20
 80070a8:	2100      	movs	r1, #0
 80070aa:	480a      	ldr	r0, [pc, #40]	@ (80070d4 <Get_Config+0x1b4>)
 80070ac:	f00f f9f2 	bl	8016494 <memset>
	cfg_idx = 0;
 80070b0:	4b12      	ldr	r3, [pc, #72]	@ (80070fc <Get_Config+0x1dc>)
 80070b2:	2200      	movs	r2, #0
 80070b4:	601a      	str	r2, [r3, #0]
	memset(new_cfg_val, 0, sizeof(new_cfg_val));	
 80070b6:	220a      	movs	r2, #10
 80070b8:	2100      	movs	r1, #0
 80070ba:	4818      	ldr	r0, [pc, #96]	@ (800711c <Get_Config+0x1fc>)
 80070bc:	f00f f9ea 	bl	8016494 <memset>

	SIM_Send_TCP(value_str);
 80070c0:	463b      	mov	r3, r7
 80070c2:	4618      	mov	r0, r3
 80070c4:	f7fa ffbe 	bl	8002044 <SIM_Send_TCP>
}
 80070c8:	bf00      	nop
 80070ca:	3780      	adds	r7, #128	@ 0x80
 80070cc:	46bd      	mov	sp, r7
 80070ce:	bd80      	pop	{r7, pc}
 80070d0:	08017a10 	.word	0x08017a10
 80070d4:	20005764 	.word	0x20005764
 80070d8:	20001784 	.word	0x20001784
 80070dc:	08017a94 	.word	0x08017a94
 80070e0:	08017a1c 	.word	0x08017a1c
 80070e4:	08017a28 	.word	0x08017a28
 80070e8:	08017a34 	.word	0x08017a34
 80070ec:	08017a9c 	.word	0x08017a9c
 80070f0:	08017a44 	.word	0x08017a44
 80070f4:	08017a50 	.word	0x08017a50
 80070f8:	08017a5c 	.word	0x08017a5c
 80070fc:	20005778 	.word	0x20005778
 8007100:	08017a64 	.word	0x08017a64
 8007104:	08017a6c 	.word	0x08017a6c
 8007108:	200017f6 	.word	0x200017f6
 800710c:	08017aa4 	.word	0x08017aa4
 8007110:	08017a74 	.word	0x08017a74
 8007114:	20001836 	.word	0x20001836
 8007118:	08017aac 	.word	0x08017aac
 800711c:	2000577c 	.word	0x2000577c

08007120 <Clear_Flags>:

/*-----AZZERAMENTO FLAG-----*/
void Clear_Flags(void)
{
 8007120:	b580      	push	{r7, lr}
 8007122:	af00      	add	r7, sp, #0
	if(!sys.ACC_Present)
 8007124:	4b0d      	ldr	r3, [pc, #52]	@ (800715c <Clear_Flags+0x3c>)
 8007126:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800712a:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 800712e:	f003 0301 	and.w	r3, r3, #1
 8007132:	b2db      	uxtb	r3, r3
 8007134:	2b00      	cmp	r3, #0
 8007136:	d10a      	bne.n	800714e <Clear_Flags+0x2e>
	{
		memset(&flags, 0, sizeof(flags));
 8007138:	2203      	movs	r2, #3
 800713a:	2100      	movs	r1, #0
 800713c:	4808      	ldr	r0, [pc, #32]	@ (8007160 <Clear_Flags+0x40>)
 800713e:	f00f f9a9 	bl	8016494 <memset>
		flags.ACC_Complete = 1;
 8007142:	4a07      	ldr	r2, [pc, #28]	@ (8007160 <Clear_Flags+0x40>)
 8007144:	7813      	ldrb	r3, [r2, #0]
 8007146:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800714a:	7013      	strb	r3, [r2, #0]
	else
	{
		memset(&flags, 0, sizeof(flags));
	}

}
 800714c:	e004      	b.n	8007158 <Clear_Flags+0x38>
		memset(&flags, 0, sizeof(flags));
 800714e:	2203      	movs	r2, #3
 8007150:	2100      	movs	r1, #0
 8007152:	4803      	ldr	r0, [pc, #12]	@ (8007160 <Clear_Flags+0x40>)
 8007154:	f00f f99e 	bl	8016494 <memset>
}
 8007158:	bf00      	nop
 800715a:	bd80      	pop	{r7, pc}
 800715c:	200005d8 	.word	0x200005d8
 8007160:	20001780 	.word	0x20001780

08007164 <psram_reset>:
uint32_t	psramSize = 0;
uint32_t	psramNumPages = 0;


int psram_reset()
{
 8007164:	b580      	push	{r7, lr}
 8007166:	b08e      	sub	sp, #56	@ 0x38
 8007168:	af00      	add	r7, sp, #0

	QSPI_CommandTypeDef sCommand = {0};
 800716a:	463b      	mov	r3, r7
 800716c:	2238      	movs	r2, #56	@ 0x38
 800716e:	2100      	movs	r1, #0
 8007170:	4618      	mov	r0, r3
 8007172:	f00f f98f 	bl	8016494 <memset>

	sCommand.Instruction = 0x66;
 8007176:	2366      	movs	r3, #102	@ 0x66
 8007178:	603b      	str	r3, [r7, #0]
	sCommand.InstructionMode = QSPI_INSTRUCTION_1_LINE;
 800717a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800717e:	61bb      	str	r3, [r7, #24]
	sCommand.AddressSize = QSPI_ADDRESS_NONE;
 8007180:	2300      	movs	r3, #0
 8007182:	60fb      	str	r3, [r7, #12]
	sCommand.NbData = 0;
 8007184:	2300      	movs	r3, #0
 8007186:	62bb      	str	r3, [r7, #40]	@ 0x28

	if(HAL_QSPI_Command(PSRAM_SPI, &sCommand, HAL_QSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8007188:	463b      	mov	r3, r7
 800718a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800718e:	4619      	mov	r1, r3
 8007190:	480e      	ldr	r0, [pc, #56]	@ (80071cc <psram_reset+0x68>)
 8007192:	f008 f987 	bl	800f4a4 <HAL_QSPI_Command>
 8007196:	4603      	mov	r3, r0
 8007198:	2b00      	cmp	r3, #0
 800719a:	d002      	beq.n	80071a2 <psram_reset+0x3e>
	{
		return -1;
 800719c:	f04f 33ff 	mov.w	r3, #4294967295
 80071a0:	e00f      	b.n	80071c2 <psram_reset+0x5e>
	}

	sCommand.Instruction = 0x99;
 80071a2:	2399      	movs	r3, #153	@ 0x99
 80071a4:	603b      	str	r3, [r7, #0]

	if(HAL_QSPI_Command(PSRAM_SPI, &sCommand, HAL_QSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80071a6:	463b      	mov	r3, r7
 80071a8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80071ac:	4619      	mov	r1, r3
 80071ae:	4807      	ldr	r0, [pc, #28]	@ (80071cc <psram_reset+0x68>)
 80071b0:	f008 f978 	bl	800f4a4 <HAL_QSPI_Command>
 80071b4:	4603      	mov	r3, r0
 80071b6:	2b00      	cmp	r3, #0
 80071b8:	d002      	beq.n	80071c0 <psram_reset+0x5c>
	{
		return -1;
 80071ba:	f04f 33ff 	mov.w	r3, #4294967295
 80071be:	e000      	b.n	80071c2 <psram_reset+0x5e>
	}

	return 0;
 80071c0:	2300      	movs	r3, #0

}
 80071c2:	4618      	mov	r0, r3
 80071c4:	3738      	adds	r7, #56	@ 0x38
 80071c6:	46bd      	mov	sp, r7
 80071c8:	bd80      	pop	{r7, pc}
 80071ca:	bf00      	nop
 80071cc:	200001d4 	.word	0x200001d4

080071d0 <psram_qpi_mode>:
{
	return psramQSPI;
}

int psram_qpi_mode(uint8_t enable)
{
 80071d0:	b580      	push	{r7, lr}
 80071d2:	b090      	sub	sp, #64	@ 0x40
 80071d4:	af00      	add	r7, sp, #0
 80071d6:	4603      	mov	r3, r0
 80071d8:	71fb      	strb	r3, [r7, #7]

	QSPI_CommandTypeDef sCommand = {0};
 80071da:	f107 0308 	add.w	r3, r7, #8
 80071de:	2238      	movs	r2, #56	@ 0x38
 80071e0:	2100      	movs	r1, #0
 80071e2:	4618      	mov	r0, r3
 80071e4:	f00f f956 	bl	8016494 <memset>

	if(!psramInitDone)return -1;
 80071e8:	4b1c      	ldr	r3, [pc, #112]	@ (800725c <psram_qpi_mode+0x8c>)
 80071ea:	781b      	ldrb	r3, [r3, #0]
 80071ec:	2b00      	cmp	r3, #0
 80071ee:	d102      	bne.n	80071f6 <psram_qpi_mode+0x26>
 80071f0:	f04f 33ff 	mov.w	r3, #4294967295
 80071f4:	e02d      	b.n	8007252 <psram_qpi_mode+0x82>

	if(psramQSPI==1 && enable == 0)
 80071f6:	4b1a      	ldr	r3, [pc, #104]	@ (8007260 <psram_qpi_mode+0x90>)
 80071f8:	781b      	ldrb	r3, [r3, #0]
 80071fa:	2b01      	cmp	r3, #1
 80071fc:	d108      	bne.n	8007210 <psram_qpi_mode+0x40>
 80071fe:	79fb      	ldrb	r3, [r7, #7]
 8007200:	2b00      	cmp	r3, #0
 8007202:	d105      	bne.n	8007210 <psram_qpi_mode+0x40>
	{
		sCommand.Instruction = PSRAM_CMD_QPI_DISABLE;
 8007204:	23f5      	movs	r3, #245	@ 0xf5
 8007206:	60bb      	str	r3, [r7, #8]
		sCommand.InstructionMode = QSPI_INSTRUCTION_4_LINES;
 8007208:	f44f 7340 	mov.w	r3, #768	@ 0x300
 800720c:	623b      	str	r3, [r7, #32]
 800720e:	e00e      	b.n	800722e <psram_qpi_mode+0x5e>

	}else if(psramQSPI==0 && enable == 1)
 8007210:	4b13      	ldr	r3, [pc, #76]	@ (8007260 <psram_qpi_mode+0x90>)
 8007212:	781b      	ldrb	r3, [r3, #0]
 8007214:	2b00      	cmp	r3, #0
 8007216:	d108      	bne.n	800722a <psram_qpi_mode+0x5a>
 8007218:	79fb      	ldrb	r3, [r7, #7]
 800721a:	2b01      	cmp	r3, #1
 800721c:	d105      	bne.n	800722a <psram_qpi_mode+0x5a>
	{
		sCommand.Instruction = PSRAM_CMD_QPI_ENABLE;
 800721e:	2335      	movs	r3, #53	@ 0x35
 8007220:	60bb      	str	r3, [r7, #8]
		sCommand.InstructionMode = QSPI_INSTRUCTION_1_LINE;
 8007222:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8007226:	623b      	str	r3, [r7, #32]
 8007228:	e001      	b.n	800722e <psram_qpi_mode+0x5e>

	}else{

		return 0;
 800722a:	2300      	movs	r3, #0
 800722c:	e011      	b.n	8007252 <psram_qpi_mode+0x82>

	}

	if(HAL_QSPI_Command(PSRAM_SPI, &sCommand, HAL_QSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800722e:	f107 0308 	add.w	r3, r7, #8
 8007232:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007236:	4619      	mov	r1, r3
 8007238:	480a      	ldr	r0, [pc, #40]	@ (8007264 <psram_qpi_mode+0x94>)
 800723a:	f008 f933 	bl	800f4a4 <HAL_QSPI_Command>
 800723e:	4603      	mov	r3, r0
 8007240:	2b00      	cmp	r3, #0
 8007242:	d002      	beq.n	800724a <psram_qpi_mode+0x7a>
	{
		return -1;
 8007244:	f04f 33ff 	mov.w	r3, #4294967295
 8007248:	e003      	b.n	8007252 <psram_qpi_mode+0x82>
	}

	psramQSPI = enable;
 800724a:	4a05      	ldr	r2, [pc, #20]	@ (8007260 <psram_qpi_mode+0x90>)
 800724c:	79fb      	ldrb	r3, [r7, #7]
 800724e:	7013      	strb	r3, [r2, #0]

	return 0;
 8007250:	2300      	movs	r3, #0
}
 8007252:	4618      	mov	r0, r3
 8007254:	3740      	adds	r7, #64	@ 0x40
 8007256:	46bd      	mov	sp, r7
 8007258:	bd80      	pop	{r7, pc}
 800725a:	bf00      	nop
 800725c:	20005c38 	.word	0x20005c38
 8007260:	20005c39 	.word	0x20005c39
 8007264:	200001d4 	.word	0x200001d4

08007268 <psram_read_id>:

int psram_read_id(uint8_t *id_data, int id_data_size)
{
 8007268:	b580      	push	{r7, lr}
 800726a:	b090      	sub	sp, #64	@ 0x40
 800726c:	af00      	add	r7, sp, #0
 800726e:	6078      	str	r0, [r7, #4]
 8007270:	6039      	str	r1, [r7, #0]
	QSPI_CommandTypeDef sCommand = {0};
 8007272:	f107 0308 	add.w	r3, r7, #8
 8007276:	2238      	movs	r2, #56	@ 0x38
 8007278:	2100      	movs	r1, #0
 800727a:	4618      	mov	r0, r3
 800727c:	f00f f90a 	bl	8016494 <memset>

	if(id_data == NULL || id_data_size < 8)return -2;
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	2b00      	cmp	r3, #0
 8007284:	d002      	beq.n	800728c <psram_read_id+0x24>
 8007286:	683b      	ldr	r3, [r7, #0]
 8007288:	2b07      	cmp	r3, #7
 800728a:	dc02      	bgt.n	8007292 <psram_read_id+0x2a>
 800728c:	f06f 0301 	mvn.w	r3, #1
 8007290:	e034      	b.n	80072fc <psram_read_id+0x94>

	sCommand.Instruction = 0x9F;
 8007292:	239f      	movs	r3, #159	@ 0x9f
 8007294:	60bb      	str	r3, [r7, #8]
	sCommand.InstructionMode = QSPI_INSTRUCTION_1_LINE;
 8007296:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800729a:	623b      	str	r3, [r7, #32]
	sCommand.Address = 0;
 800729c:	2300      	movs	r3, #0
 800729e:	60fb      	str	r3, [r7, #12]
	sCommand.AddressSize = QSPI_ADDRESS_24_BITS;
 80072a0:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80072a4:	617b      	str	r3, [r7, #20]
	sCommand.AddressMode = QSPI_ADDRESS_1_LINE;
 80072a6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80072aa:	627b      	str	r3, [r7, #36]	@ 0x24
	sCommand.DataMode    = QSPI_DATA_1_LINE;
 80072ac:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80072b0:	62fb      	str	r3, [r7, #44]	@ 0x2c
	sCommand.NbData = 8;
 80072b2:	2308      	movs	r3, #8
 80072b4:	633b      	str	r3, [r7, #48]	@ 0x30
	sCommand.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 80072b6:	2300      	movs	r3, #0
 80072b8:	62bb      	str	r3, [r7, #40]	@ 0x28
	sCommand.DdrMode           = QSPI_DDR_MODE_DISABLE;
 80072ba:	2300      	movs	r3, #0
 80072bc:	637b      	str	r3, [r7, #52]	@ 0x34
	sCommand.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 80072be:	2300      	movs	r3, #0
 80072c0:	63bb      	str	r3, [r7, #56]	@ 0x38
	sCommand.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 80072c2:	2300      	movs	r3, #0
 80072c4:	63fb      	str	r3, [r7, #60]	@ 0x3c

	if(HAL_QSPI_Command(PSRAM_SPI, &sCommand, HAL_QSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80072c6:	f107 0308 	add.w	r3, r7, #8
 80072ca:	f241 3288 	movw	r2, #5000	@ 0x1388
 80072ce:	4619      	mov	r1, r3
 80072d0:	480c      	ldr	r0, [pc, #48]	@ (8007304 <psram_read_id+0x9c>)
 80072d2:	f008 f8e7 	bl	800f4a4 <HAL_QSPI_Command>
 80072d6:	4603      	mov	r3, r0
 80072d8:	2b00      	cmp	r3, #0
 80072da:	d002      	beq.n	80072e2 <psram_read_id+0x7a>
	{
		return -1;
 80072dc:	f04f 33ff 	mov.w	r3, #4294967295
 80072e0:	e00c      	b.n	80072fc <psram_read_id+0x94>
	}

	if (HAL_QSPI_Receive(PSRAM_SPI, id_data, HAL_QSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80072e2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80072e6:	6879      	ldr	r1, [r7, #4]
 80072e8:	4806      	ldr	r0, [pc, #24]	@ (8007304 <psram_read_id+0x9c>)
 80072ea:	f008 f9d0 	bl	800f68e <HAL_QSPI_Receive>
 80072ee:	4603      	mov	r3, r0
 80072f0:	2b00      	cmp	r3, #0
 80072f2:	d002      	beq.n	80072fa <psram_read_id+0x92>
	{
		return -1;
 80072f4:	f04f 33ff 	mov.w	r3, #4294967295
 80072f8:	e000      	b.n	80072fc <psram_read_id+0x94>
	}


	return 0;
 80072fa:	2300      	movs	r3, #0

}
 80072fc:	4618      	mov	r0, r3
 80072fe:	3740      	adds	r7, #64	@ 0x40
 8007300:	46bd      	mov	sp, r7
 8007302:	bd80      	pop	{r7, pc}
 8007304:	200001d4 	.word	0x200001d4

08007308 <psram_internal_read_write>:

int psram_internal_read_write(uint8_t write, uint32_t address, uint16_t nbytes, uint8_t *pBuffer)
{
 8007308:	b580      	push	{r7, lr}
 800730a:	b092      	sub	sp, #72	@ 0x48
 800730c:	af00      	add	r7, sp, #0
 800730e:	60b9      	str	r1, [r7, #8]
 8007310:	607b      	str	r3, [r7, #4]
 8007312:	4603      	mov	r3, r0
 8007314:	73fb      	strb	r3, [r7, #15]
 8007316:	4613      	mov	r3, r2
 8007318:	81bb      	strh	r3, [r7, #12]

	QSPI_CommandTypeDef sCommand = {0};
 800731a:	f107 0310 	add.w	r3, r7, #16
 800731e:	2238      	movs	r2, #56	@ 0x38
 8007320:	2100      	movs	r1, #0
 8007322:	4618      	mov	r0, r3
 8007324:	f00f f8b6 	bl	8016494 <memset>

	sCommand.Address = address;
 8007328:	68bb      	ldr	r3, [r7, #8]
 800732a:	617b      	str	r3, [r7, #20]
	sCommand.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 800732c:	2300      	movs	r3, #0
 800732e:	633b      	str	r3, [r7, #48]	@ 0x30
	sCommand.DdrMode           = QSPI_DDR_MODE_DISABLE;
 8007330:	2300      	movs	r3, #0
 8007332:	63fb      	str	r3, [r7, #60]	@ 0x3c
	sCommand.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 8007334:	2300      	movs	r3, #0
 8007336:	643b      	str	r3, [r7, #64]	@ 0x40
	sCommand.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 8007338:	2300      	movs	r3, #0
 800733a:	647b      	str	r3, [r7, #68]	@ 0x44
	sCommand.NbData = nbytes;
 800733c:	89bb      	ldrh	r3, [r7, #12]
 800733e:	63bb      	str	r3, [r7, #56]	@ 0x38

	if(psramQSPI)
 8007340:	4b33      	ldr	r3, [pc, #204]	@ (8007410 <psram_internal_read_write+0x108>)
 8007342:	781b      	ldrb	r3, [r3, #0]
 8007344:	2b00      	cmp	r3, #0
 8007346:	d01a      	beq.n	800737e <psram_internal_read_write+0x76>
	{
		//QSPI mode
		sCommand.Instruction = write ? PSRAM_CMD_WRITE_QUAD : PSRAM_CMD_READ_FAST_QIO;
 8007348:	7bfb      	ldrb	r3, [r7, #15]
 800734a:	2b00      	cmp	r3, #0
 800734c:	d001      	beq.n	8007352 <psram_internal_read_write+0x4a>
 800734e:	2338      	movs	r3, #56	@ 0x38
 8007350:	e000      	b.n	8007354 <psram_internal_read_write+0x4c>
 8007352:	23eb      	movs	r3, #235	@ 0xeb
 8007354:	613b      	str	r3, [r7, #16]
		sCommand.InstructionMode = QSPI_INSTRUCTION_4_LINES;
 8007356:	f44f 7340 	mov.w	r3, #768	@ 0x300
 800735a:	62bb      	str	r3, [r7, #40]	@ 0x28
		sCommand.AddressSize = QSPI_ADDRESS_24_BITS;
 800735c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8007360:	61fb      	str	r3, [r7, #28]
		sCommand.AddressMode = QSPI_ADDRESS_4_LINES;
 8007362:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8007366:	62fb      	str	r3, [r7, #44]	@ 0x2c
		sCommand.DataMode    = QSPI_DATA_4_LINES;
 8007368:	f04f 7340 	mov.w	r3, #50331648	@ 0x3000000
 800736c:	637b      	str	r3, [r7, #52]	@ 0x34
		sCommand.DummyCycles = write ? 0 : PSRAM_CMD_QPI_READ_FAST_QIO_WAIT;
 800736e:	7bfb      	ldrb	r3, [r7, #15]
 8007370:	2b00      	cmp	r3, #0
 8007372:	d001      	beq.n	8007378 <psram_internal_read_write+0x70>
 8007374:	2300      	movs	r3, #0
 8007376:	e000      	b.n	800737a <psram_internal_read_write+0x72>
 8007378:	2306      	movs	r3, #6
 800737a:	627b      	str	r3, [r7, #36]	@ 0x24
 800737c:	e019      	b.n	80073b2 <psram_internal_read_write+0xaa>
	}else{
		//SPI mode
		sCommand.Instruction = write ? PSRAM_CMD_WRITE : PSRAM_CMD_READ_FAST;
 800737e:	7bfb      	ldrb	r3, [r7, #15]
 8007380:	2b00      	cmp	r3, #0
 8007382:	d001      	beq.n	8007388 <psram_internal_read_write+0x80>
 8007384:	2302      	movs	r3, #2
 8007386:	e000      	b.n	800738a <psram_internal_read_write+0x82>
 8007388:	230b      	movs	r3, #11
 800738a:	613b      	str	r3, [r7, #16]
		sCommand.InstructionMode = QSPI_INSTRUCTION_1_LINE;
 800738c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8007390:	62bb      	str	r3, [r7, #40]	@ 0x28
		sCommand.AddressSize = QSPI_ADDRESS_24_BITS;
 8007392:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8007396:	61fb      	str	r3, [r7, #28]
		sCommand.AddressMode = QSPI_ADDRESS_1_LINE;
 8007398:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800739c:	62fb      	str	r3, [r7, #44]	@ 0x2c
		sCommand.DataMode    = QSPI_DATA_1_LINE;
 800739e:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80073a2:	637b      	str	r3, [r7, #52]	@ 0x34
		sCommand.DummyCycles = write ? 0 : PSRAM_CMD_READ_FAST_WAIT;
 80073a4:	7bfb      	ldrb	r3, [r7, #15]
 80073a6:	2b00      	cmp	r3, #0
 80073a8:	d001      	beq.n	80073ae <psram_internal_read_write+0xa6>
 80073aa:	2300      	movs	r3, #0
 80073ac:	e000      	b.n	80073b0 <psram_internal_read_write+0xa8>
 80073ae:	2308      	movs	r3, #8
 80073b0:	627b      	str	r3, [r7, #36]	@ 0x24
	}

	if(HAL_QSPI_Command(PSRAM_SPI, &sCommand, HAL_QSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80073b2:	f107 0310 	add.w	r3, r7, #16
 80073b6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80073ba:	4619      	mov	r1, r3
 80073bc:	4815      	ldr	r0, [pc, #84]	@ (8007414 <psram_internal_read_write+0x10c>)
 80073be:	f008 f871 	bl	800f4a4 <HAL_QSPI_Command>
 80073c2:	4603      	mov	r3, r0
 80073c4:	2b00      	cmp	r3, #0
 80073c6:	d002      	beq.n	80073ce <psram_internal_read_write+0xc6>
	{
		return -1;
 80073c8:	f04f 33ff 	mov.w	r3, #4294967295
 80073cc:	e01b      	b.n	8007406 <psram_internal_read_write+0xfe>
	}

	if(write)
 80073ce:	7bfb      	ldrb	r3, [r7, #15]
 80073d0:	2b00      	cmp	r3, #0
 80073d2:	d00b      	beq.n	80073ec <psram_internal_read_write+0xe4>
	{
		if (HAL_QSPI_Transmit(PSRAM_SPI, pBuffer, HAL_QSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80073d4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80073d8:	6879      	ldr	r1, [r7, #4]
 80073da:	480e      	ldr	r0, [pc, #56]	@ (8007414 <psram_internal_read_write+0x10c>)
 80073dc:	f008 f8c0 	bl	800f560 <HAL_QSPI_Transmit>
 80073e0:	4603      	mov	r3, r0
 80073e2:	2b00      	cmp	r3, #0
 80073e4:	d00e      	beq.n	8007404 <psram_internal_read_write+0xfc>
		{
			return -1;
 80073e6:	f04f 33ff 	mov.w	r3, #4294967295
 80073ea:	e00c      	b.n	8007406 <psram_internal_read_write+0xfe>
		}

	}else{

		if (HAL_QSPI_Receive(PSRAM_SPI, pBuffer, HAL_QSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80073ec:	f241 3288 	movw	r2, #5000	@ 0x1388
 80073f0:	6879      	ldr	r1, [r7, #4]
 80073f2:	4808      	ldr	r0, [pc, #32]	@ (8007414 <psram_internal_read_write+0x10c>)
 80073f4:	f008 f94b 	bl	800f68e <HAL_QSPI_Receive>
 80073f8:	4603      	mov	r3, r0
 80073fa:	2b00      	cmp	r3, #0
 80073fc:	d002      	beq.n	8007404 <psram_internal_read_write+0xfc>
		{
			return -1;
 80073fe:	f04f 33ff 	mov.w	r3, #4294967295
 8007402:	e000      	b.n	8007406 <psram_internal_read_write+0xfe>
		}

	}

	return 0;
 8007404:	2300      	movs	r3, #0
}
 8007406:	4618      	mov	r0, r3
 8007408:	3748      	adds	r7, #72	@ 0x48
 800740a:	46bd      	mov	sp, r7
 800740c:	bd80      	pop	{r7, pc}
 800740e:	bf00      	nop
 8007410:	20005c39 	.word	0x20005c39
 8007414:	200001d4 	.word	0x200001d4

08007418 <psram_sector_read_write>:


//Funzione usata da FatFs
int psram_sector_read_write(uint8_t write, uint32_t sector, uint32_t nsectors, uint8_t *pBuffer)
{
 8007418:	b580      	push	{r7, lr}
 800741a:	b088      	sub	sp, #32
 800741c:	af00      	add	r7, sp, #0
 800741e:	60b9      	str	r1, [r7, #8]
 8007420:	607a      	str	r2, [r7, #4]
 8007422:	603b      	str	r3, [r7, #0]
 8007424:	4603      	mov	r3, r0
 8007426:	73fb      	strb	r3, [r7, #15]
	int result = 0;
 8007428:	2300      	movs	r3, #0
 800742a:	617b      	str	r3, [r7, #20]
	uint8_t *wPtr = pBuffer;
 800742c:	683b      	ldr	r3, [r7, #0]
 800742e:	61fb      	str	r3, [r7, #28]
	uint32_t address = sector * PSRAM_PAGE_SIZE;
 8007430:	68bb      	ldr	r3, [r7, #8]
 8007432:	029b      	lsls	r3, r3, #10
 8007434:	61bb      	str	r3, [r7, #24]

	while(nsectors > 0)
 8007436:	e018      	b.n	800746a <psram_sector_read_write+0x52>
	{
		result = psram_internal_read_write(write, address, PSRAM_PAGE_SIZE, wPtr);
 8007438:	7bf8      	ldrb	r0, [r7, #15]
 800743a:	69fb      	ldr	r3, [r7, #28]
 800743c:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8007440:	69b9      	ldr	r1, [r7, #24]
 8007442:	f7ff ff61 	bl	8007308 <psram_internal_read_write>
 8007446:	6178      	str	r0, [r7, #20]
		if(result < 0)return -1;
 8007448:	697b      	ldr	r3, [r7, #20]
 800744a:	2b00      	cmp	r3, #0
 800744c:	da02      	bge.n	8007454 <psram_sector_read_write+0x3c>
 800744e:	f04f 33ff 	mov.w	r3, #4294967295
 8007452:	e00e      	b.n	8007472 <psram_sector_read_write+0x5a>
		address += PSRAM_PAGE_SIZE;
 8007454:	69bb      	ldr	r3, [r7, #24]
 8007456:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800745a:	61bb      	str	r3, [r7, #24]
		wPtr += PSRAM_PAGE_SIZE;
 800745c:	69fb      	ldr	r3, [r7, #28]
 800745e:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8007462:	61fb      	str	r3, [r7, #28]
		nsectors--;
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	3b01      	subs	r3, #1
 8007468:	607b      	str	r3, [r7, #4]
	while(nsectors > 0)
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	2b00      	cmp	r3, #0
 800746e:	d1e3      	bne.n	8007438 <psram_sector_read_write+0x20>
	}

	return 0;
 8007470:	2300      	movs	r3, #0
}
 8007472:	4618      	mov	r0, r3
 8007474:	3720      	adds	r7, #32
 8007476:	46bd      	mov	sp, r7
 8007478:	bd80      	pop	{r7, pc}
	...

0800747c <psram_read_write>:



int psram_read_write(uint8_t write, uint32_t address, uint32_t nbytes, uint8_t *pBuffer)
{
 800747c:	b580      	push	{r7, lr}
 800747e:	b088      	sub	sp, #32
 8007480:	af00      	add	r7, sp, #0
 8007482:	60b9      	str	r1, [r7, #8]
 8007484:	607a      	str	r2, [r7, #4]
 8007486:	603b      	str	r3, [r7, #0]
 8007488:	4603      	mov	r3, r0
 800748a:	73fb      	strb	r3, [r7, #15]
	int result = 0;
 800748c:	2300      	movs	r3, #0
 800748e:	61bb      	str	r3, [r7, #24]
	uint32_t trBytes = 0;
 8007490:	2300      	movs	r3, #0
 8007492:	617b      	str	r3, [r7, #20]
	uint8_t *wPtr = pBuffer;
 8007494:	683b      	ldr	r3, [r7, #0]
 8007496:	61fb      	str	r3, [r7, #28]

	//Check indirizzo
	if(!psramInitDone || pBuffer==NULL)return -1;
 8007498:	4b1e      	ldr	r3, [pc, #120]	@ (8007514 <psram_read_write+0x98>)
 800749a:	781b      	ldrb	r3, [r3, #0]
 800749c:	2b00      	cmp	r3, #0
 800749e:	d002      	beq.n	80074a6 <psram_read_write+0x2a>
 80074a0:	683b      	ldr	r3, [r7, #0]
 80074a2:	2b00      	cmp	r3, #0
 80074a4:	d102      	bne.n	80074ac <psram_read_write+0x30>
 80074a6:	f04f 33ff 	mov.w	r3, #4294967295
 80074aa:	e02e      	b.n	800750a <psram_read_write+0x8e>
	if(address + nbytes >= psramSize)return -2;
 80074ac:	68ba      	ldr	r2, [r7, #8]
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	441a      	add	r2, r3
 80074b2:	4b19      	ldr	r3, [pc, #100]	@ (8007518 <psram_read_write+0x9c>)
 80074b4:	681b      	ldr	r3, [r3, #0]
 80074b6:	429a      	cmp	r2, r3
 80074b8:	d323      	bcc.n	8007502 <psram_read_write+0x86>
 80074ba:	f06f 0301 	mvn.w	r3, #1
 80074be:	e024      	b.n	800750a <psram_read_write+0x8e>

	while(nbytes > 0)
	{
		trBytes = nbytes > PSRAM_PAGE_SIZE ? PSRAM_PAGE_SIZE : nbytes;
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80074c6:	bf28      	it	cs
 80074c8:	f44f 6380 	movcs.w	r3, #1024	@ 0x400
 80074cc:	617b      	str	r3, [r7, #20]
		result = psram_internal_read_write(write, address, trBytes, wPtr);
 80074ce:	697b      	ldr	r3, [r7, #20]
 80074d0:	b29a      	uxth	r2, r3
 80074d2:	7bf8      	ldrb	r0, [r7, #15]
 80074d4:	69fb      	ldr	r3, [r7, #28]
 80074d6:	68b9      	ldr	r1, [r7, #8]
 80074d8:	f7ff ff16 	bl	8007308 <psram_internal_read_write>
 80074dc:	61b8      	str	r0, [r7, #24]

		if(result < 0)return -1;
 80074de:	69bb      	ldr	r3, [r7, #24]
 80074e0:	2b00      	cmp	r3, #0
 80074e2:	da02      	bge.n	80074ea <psram_read_write+0x6e>
 80074e4:	f04f 33ff 	mov.w	r3, #4294967295
 80074e8:	e00f      	b.n	800750a <psram_read_write+0x8e>

		address += trBytes;
 80074ea:	68ba      	ldr	r2, [r7, #8]
 80074ec:	697b      	ldr	r3, [r7, #20]
 80074ee:	4413      	add	r3, r2
 80074f0:	60bb      	str	r3, [r7, #8]
		wPtr += trBytes;
 80074f2:	69fa      	ldr	r2, [r7, #28]
 80074f4:	697b      	ldr	r3, [r7, #20]
 80074f6:	4413      	add	r3, r2
 80074f8:	61fb      	str	r3, [r7, #28]
		nbytes -= trBytes;
 80074fa:	687a      	ldr	r2, [r7, #4]
 80074fc:	697b      	ldr	r3, [r7, #20]
 80074fe:	1ad3      	subs	r3, r2, r3
 8007500:	607b      	str	r3, [r7, #4]
	while(nbytes > 0)
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	2b00      	cmp	r3, #0
 8007506:	d1db      	bne.n	80074c0 <psram_read_write+0x44>
	}

	return 0;
 8007508:	2300      	movs	r3, #0
}
 800750a:	4618      	mov	r0, r3
 800750c:	3720      	adds	r7, #32
 800750e:	46bd      	mov	sp, r7
 8007510:	bd80      	pop	{r7, pc}
 8007512:	bf00      	nop
 8007514:	20005c38 	.word	0x20005c38
 8007518:	20005c44 	.word	0x20005c44

0800751c <raw_psram_read_write>:

int raw_psram_read_write(uint8_t write, uint32_t address, uint32_t nbytes, uint8_t *pBuffer)
{
 800751c:	b580      	push	{r7, lr}
 800751e:	b088      	sub	sp, #32
 8007520:	af00      	add	r7, sp, #0
 8007522:	60b9      	str	r1, [r7, #8]
 8007524:	607a      	str	r2, [r7, #4]
 8007526:	603b      	str	r3, [r7, #0]
 8007528:	4603      	mov	r3, r0
 800752a:	73fb      	strb	r3, [r7, #15]
	int result = 0;
 800752c:	2300      	movs	r3, #0
 800752e:	617b      	str	r3, [r7, #20]
	uint32_t trBytes = 0;
 8007530:	2300      	movs	r3, #0
 8007532:	61fb      	str	r3, [r7, #28]
	uint8_t *wPtr = pBuffer;
 8007534:	683b      	ldr	r3, [r7, #0]
 8007536:	61bb      	str	r3, [r7, #24]

	//Check indirizzo
	if(!psramInitDone || pBuffer==NULL)return -1;
 8007538:	4b21      	ldr	r3, [pc, #132]	@ (80075c0 <raw_psram_read_write+0xa4>)
 800753a:	781b      	ldrb	r3, [r3, #0]
 800753c:	2b00      	cmp	r3, #0
 800753e:	d002      	beq.n	8007546 <raw_psram_read_write+0x2a>
 8007540:	683b      	ldr	r3, [r7, #0]
 8007542:	2b00      	cmp	r3, #0
 8007544:	d102      	bne.n	800754c <raw_psram_read_write+0x30>
 8007546:	f04f 33ff 	mov.w	r3, #4294967295
 800754a:	e035      	b.n	80075b8 <raw_psram_read_write+0x9c>
	if(address + nbytes >= psramSize)return -2;
 800754c:	68ba      	ldr	r2, [r7, #8]
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	441a      	add	r2, r3
 8007552:	4b1c      	ldr	r3, [pc, #112]	@ (80075c4 <raw_psram_read_write+0xa8>)
 8007554:	681b      	ldr	r3, [r3, #0]
 8007556:	429a      	cmp	r2, r3
 8007558:	d302      	bcc.n	8007560 <raw_psram_read_write+0x44>
 800755a:	f06f 0301 	mvn.w	r3, #1
 800755e:	e02b      	b.n	80075b8 <raw_psram_read_write+0x9c>

	trBytes = 1024 - address % 1024;
 8007560:	68bb      	ldr	r3, [r7, #8]
 8007562:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007566:	f5c3 6380 	rsb	r3, r3, #1024	@ 0x400
 800756a:	61fb      	str	r3, [r7, #28]
	while(nbytes > 0)
 800756c:	e020      	b.n	80075b0 <raw_psram_read_write+0x94>
	{
		result = psram_internal_read_write(write, address, trBytes, wPtr);
 800756e:	69fb      	ldr	r3, [r7, #28]
 8007570:	b29a      	uxth	r2, r3
 8007572:	7bf8      	ldrb	r0, [r7, #15]
 8007574:	69bb      	ldr	r3, [r7, #24]
 8007576:	68b9      	ldr	r1, [r7, #8]
 8007578:	f7ff fec6 	bl	8007308 <psram_internal_read_write>
 800757c:	6178      	str	r0, [r7, #20]

		if(result < 0)return -1;
 800757e:	697b      	ldr	r3, [r7, #20]
 8007580:	2b00      	cmp	r3, #0
 8007582:	da02      	bge.n	800758a <raw_psram_read_write+0x6e>
 8007584:	f04f 33ff 	mov.w	r3, #4294967295
 8007588:	e016      	b.n	80075b8 <raw_psram_read_write+0x9c>

		address += trBytes;
 800758a:	68ba      	ldr	r2, [r7, #8]
 800758c:	69fb      	ldr	r3, [r7, #28]
 800758e:	4413      	add	r3, r2
 8007590:	60bb      	str	r3, [r7, #8]
		wPtr += trBytes;
 8007592:	69ba      	ldr	r2, [r7, #24]
 8007594:	69fb      	ldr	r3, [r7, #28]
 8007596:	4413      	add	r3, r2
 8007598:	61bb      	str	r3, [r7, #24]
		nbytes -= trBytes;
 800759a:	687a      	ldr	r2, [r7, #4]
 800759c:	69fb      	ldr	r3, [r7, #28]
 800759e:	1ad3      	subs	r3, r2, r3
 80075a0:	607b      	str	r3, [r7, #4]
		trBytes = nbytes > PSRAM_PAGE_SIZE ? PSRAM_PAGE_SIZE : nbytes;
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80075a8:	bf28      	it	cs
 80075aa:	f44f 6380 	movcs.w	r3, #1024	@ 0x400
 80075ae:	61fb      	str	r3, [r7, #28]
	while(nbytes > 0)
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	2b00      	cmp	r3, #0
 80075b4:	d1db      	bne.n	800756e <raw_psram_read_write+0x52>
	}

	return 0;
 80075b6:	2300      	movs	r3, #0
}
 80075b8:	4618      	mov	r0, r3
 80075ba:	3720      	adds	r7, #32
 80075bc:	46bd      	mov	sp, r7
 80075be:	bd80      	pop	{r7, pc}
 80075c0:	20005c38 	.word	0x20005c38
 80075c4:	20005c44 	.word	0x20005c44

080075c8 <RAM_Write>:
{
	return psram_read_write(1, address, nbytes, pBuffer);
}

int RAM_Write(uint32_t address, uint32_t nbytes, uint8_t *pBuffer)
{
 80075c8:	b580      	push	{r7, lr}
 80075ca:	b084      	sub	sp, #16
 80075cc:	af00      	add	r7, sp, #0
 80075ce:	60f8      	str	r0, [r7, #12]
 80075d0:	60b9      	str	r1, [r7, #8]
 80075d2:	607a      	str	r2, [r7, #4]
	return raw_psram_read_write(1, address, nbytes, pBuffer);
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	68ba      	ldr	r2, [r7, #8]
 80075d8:	68f9      	ldr	r1, [r7, #12]
 80075da:	2001      	movs	r0, #1
 80075dc:	f7ff ff9e 	bl	800751c <raw_psram_read_write>
 80075e0:	4603      	mov	r3, r0
}
 80075e2:	4618      	mov	r0, r3
 80075e4:	3710      	adds	r7, #16
 80075e6:	46bd      	mov	sp, r7
 80075e8:	bd80      	pop	{r7, pc}

080075ea <RAM_Read>:

int RAM_Read(uint32_t address, uint32_t nbytes, uint8_t *pBuffer)
{
 80075ea:	b580      	push	{r7, lr}
 80075ec:	b084      	sub	sp, #16
 80075ee:	af00      	add	r7, sp, #0
 80075f0:	60f8      	str	r0, [r7, #12]
 80075f2:	60b9      	str	r1, [r7, #8]
 80075f4:	607a      	str	r2, [r7, #4]
	return psram_read_write(0, address, nbytes, pBuffer);
 80075f6:	687b      	ldr	r3, [r7, #4]
 80075f8:	68ba      	ldr	r2, [r7, #8]
 80075fa:	68f9      	ldr	r1, [r7, #12]
 80075fc:	2000      	movs	r0, #0
 80075fe:	f7ff ff3d 	bl	800747c <psram_read_write>
 8007602:	4603      	mov	r3, r0
}
 8007604:	4618      	mov	r0, r3
 8007606:	3710      	adds	r7, #16
 8007608:	46bd      	mov	sp, r7
 800760a:	bd80      	pop	{r7, pc}

0800760c <psram_is_initialized>:


int psram_is_initialized()
{
 800760c:	b480      	push	{r7}
 800760e:	af00      	add	r7, sp, #0
	return psramInitDone;
 8007610:	4b03      	ldr	r3, [pc, #12]	@ (8007620 <psram_is_initialized+0x14>)
 8007612:	781b      	ldrb	r3, [r3, #0]
}
 8007614:	4618      	mov	r0, r3
 8007616:	46bd      	mov	sp, r7
 8007618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800761c:	4770      	bx	lr
 800761e:	bf00      	nop
 8007620:	20005c38 	.word	0x20005c38

08007624 <psram_get_sector_size>:

unsigned int psram_get_sector_size()
{
 8007624:	b480      	push	{r7}
 8007626:	af00      	add	r7, sp, #0
	return PSRAM_PAGE_SIZE;
 8007628:	f44f 6380 	mov.w	r3, #1024	@ 0x400
}
 800762c:	4618      	mov	r0, r3
 800762e:	46bd      	mov	sp, r7
 8007630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007634:	4770      	bx	lr
	...

08007638 <psram_get_sector_count>:

unsigned int psram_get_sector_count()
{
 8007638:	b480      	push	{r7}
 800763a:	af00      	add	r7, sp, #0
	return psramNumPages;
 800763c:	4b03      	ldr	r3, [pc, #12]	@ (800764c <psram_get_sector_count+0x14>)
 800763e:	681b      	ldr	r3, [r3, #0]
}
 8007640:	4618      	mov	r0, r3
 8007642:	46bd      	mov	sp, r7
 8007644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007648:	4770      	bx	lr
 800764a:	bf00      	nop
 800764c:	20005c48 	.word	0x20005c48

08007650 <psram_get_size>:

unsigned int psram_get_size()
{
 8007650:	b480      	push	{r7}
 8007652:	af00      	add	r7, sp, #0
	return psramSize;
 8007654:	4b03      	ldr	r3, [pc, #12]	@ (8007664 <psram_get_size+0x14>)
 8007656:	681b      	ldr	r3, [r3, #0]
}
 8007658:	4618      	mov	r0, r3
 800765a:	46bd      	mov	sp, r7
 800765c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007660:	4770      	bx	lr
 8007662:	bf00      	nop
 8007664:	20005c44 	.word	0x20005c44

08007668 <psram_init>:

int psram_init()
{
 8007668:	b580      	push	{r7, lr}
 800766a:	b082      	sub	sp, #8
 800766c:	af00      	add	r7, sp, #0

	uint8_t density = 0xFF;
 800766e:	23ff      	movs	r3, #255	@ 0xff
 8007670:	71fb      	strb	r3, [r7, #7]

	psramInitDone = 0;
 8007672:	4b20      	ldr	r3, [pc, #128]	@ (80076f4 <psram_init+0x8c>)
 8007674:	2200      	movs	r2, #0
 8007676:	701a      	strb	r2, [r3, #0]

	if(psram_reset() < 0)return -1;
 8007678:	f7ff fd74 	bl	8007164 <psram_reset>
 800767c:	4603      	mov	r3, r0
 800767e:	2b00      	cmp	r3, #0
 8007680:	da02      	bge.n	8007688 <psram_init+0x20>
 8007682:	f04f 33ff 	mov.w	r3, #4294967295
 8007686:	e030      	b.n	80076ea <psram_init+0x82>

	memset(psramId, 0xFF, sizeof(psramId));
 8007688:	2208      	movs	r2, #8
 800768a:	21ff      	movs	r1, #255	@ 0xff
 800768c:	481a      	ldr	r0, [pc, #104]	@ (80076f8 <psram_init+0x90>)
 800768e:	f00e ff01 	bl	8016494 <memset>

	if(psram_read_id(psramId, sizeof(psramId)) < 0)return -1;
 8007692:	2108      	movs	r1, #8
 8007694:	4818      	ldr	r0, [pc, #96]	@ (80076f8 <psram_init+0x90>)
 8007696:	f7ff fde7 	bl	8007268 <psram_read_id>
 800769a:	4603      	mov	r3, r0
 800769c:	2b00      	cmp	r3, #0
 800769e:	da02      	bge.n	80076a6 <psram_init+0x3e>
 80076a0:	f04f 33ff 	mov.w	r3, #4294967295
 80076a4:	e021      	b.n	80076ea <psram_init+0x82>

	density = psramId[2] >> 5;
 80076a6:	4b14      	ldr	r3, [pc, #80]	@ (80076f8 <psram_init+0x90>)
 80076a8:	789b      	ldrb	r3, [r3, #2]
 80076aa:	095b      	lsrs	r3, r3, #5
 80076ac:	71fb      	strb	r3, [r7, #7]

	if(psramId[0] == PSRAM_MANUFACTURER && psramId[1] == PSRAM_KGD && density <= PSRAM_DENSITY_64MB)
 80076ae:	4b12      	ldr	r3, [pc, #72]	@ (80076f8 <psram_init+0x90>)
 80076b0:	781b      	ldrb	r3, [r3, #0]
 80076b2:	2b0d      	cmp	r3, #13
 80076b4:	d117      	bne.n	80076e6 <psram_init+0x7e>
 80076b6:	4b10      	ldr	r3, [pc, #64]	@ (80076f8 <psram_init+0x90>)
 80076b8:	785b      	ldrb	r3, [r3, #1]
 80076ba:	2b5d      	cmp	r3, #93	@ 0x5d
 80076bc:	d113      	bne.n	80076e6 <psram_init+0x7e>
 80076be:	79fb      	ldrb	r3, [r7, #7]
 80076c0:	2b03      	cmp	r3, #3
 80076c2:	d810      	bhi.n	80076e6 <psram_init+0x7e>
	{
		psramSize = PSRAM_DENSITY_64MB_EADDR;
 80076c4:	4b0d      	ldr	r3, [pc, #52]	@ (80076fc <psram_init+0x94>)
 80076c6:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 80076ca:	601a      	str	r2, [r3, #0]
		psramNumPages = psramSize / PSRAM_PAGE_SIZE;
 80076cc:	4b0b      	ldr	r3, [pc, #44]	@ (80076fc <psram_init+0x94>)
 80076ce:	681b      	ldr	r3, [r3, #0]
 80076d0:	0a9b      	lsrs	r3, r3, #10
 80076d2:	4a0b      	ldr	r2, [pc, #44]	@ (8007700 <psram_init+0x98>)
 80076d4:	6013      	str	r3, [r2, #0]

		psram_qpi_mode(1);
 80076d6:	2001      	movs	r0, #1
 80076d8:	f7ff fd7a 	bl	80071d0 <psram_qpi_mode>

		psramInitDone = 1;
 80076dc:	4b05      	ldr	r3, [pc, #20]	@ (80076f4 <psram_init+0x8c>)
 80076de:	2201      	movs	r2, #1
 80076e0:	701a      	strb	r2, [r3, #0]
		return 0;
 80076e2:	2300      	movs	r3, #0
 80076e4:	e001      	b.n	80076ea <psram_init+0x82>
	}else{
		return -1;
 80076e6:	f04f 33ff 	mov.w	r3, #4294967295
	}

}
 80076ea:	4618      	mov	r0, r3
 80076ec:	3708      	adds	r7, #8
 80076ee:	46bd      	mov	sp, r7
 80076f0:	bd80      	pop	{r7, pc}
 80076f2:	bf00      	nop
 80076f4:	20005c38 	.word	0x20005c38
 80076f8:	20005c3c 	.word	0x20005c3c
 80076fc:	20005c44 	.word	0x20005c44
 8007700:	20005c48 	.word	0x20005c48

08007704 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8007704:	b480      	push	{r7}
 8007706:	b083      	sub	sp, #12
 8007708:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800770a:	4b0f      	ldr	r3, [pc, #60]	@ (8007748 <HAL_MspInit+0x44>)
 800770c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800770e:	4a0e      	ldr	r2, [pc, #56]	@ (8007748 <HAL_MspInit+0x44>)
 8007710:	f043 0301 	orr.w	r3, r3, #1
 8007714:	6613      	str	r3, [r2, #96]	@ 0x60
 8007716:	4b0c      	ldr	r3, [pc, #48]	@ (8007748 <HAL_MspInit+0x44>)
 8007718:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800771a:	f003 0301 	and.w	r3, r3, #1
 800771e:	607b      	str	r3, [r7, #4]
 8007720:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8007722:	4b09      	ldr	r3, [pc, #36]	@ (8007748 <HAL_MspInit+0x44>)
 8007724:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007726:	4a08      	ldr	r2, [pc, #32]	@ (8007748 <HAL_MspInit+0x44>)
 8007728:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800772c:	6593      	str	r3, [r2, #88]	@ 0x58
 800772e:	4b06      	ldr	r3, [pc, #24]	@ (8007748 <HAL_MspInit+0x44>)
 8007730:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007732:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007736:	603b      	str	r3, [r7, #0]
 8007738:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800773a:	bf00      	nop
 800773c:	370c      	adds	r7, #12
 800773e:	46bd      	mov	sp, r7
 8007740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007744:	4770      	bx	lr
 8007746:	bf00      	nop
 8007748:	40021000 	.word	0x40021000

0800774c <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800774c:	b580      	push	{r7, lr}
 800774e:	b0ac      	sub	sp, #176	@ 0xb0
 8007750:	af00      	add	r7, sp, #0
 8007752:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007754:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8007758:	2200      	movs	r2, #0
 800775a:	601a      	str	r2, [r3, #0]
 800775c:	605a      	str	r2, [r3, #4]
 800775e:	609a      	str	r2, [r3, #8]
 8007760:	60da      	str	r2, [r3, #12]
 8007762:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8007764:	f107 0314 	add.w	r3, r7, #20
 8007768:	2288      	movs	r2, #136	@ 0x88
 800776a:	2100      	movs	r1, #0
 800776c:	4618      	mov	r0, r3
 800776e:	f00e fe91 	bl	8016494 <memset>
  if(hadc->Instance==ADC1)
 8007772:	687b      	ldr	r3, [r7, #4]
 8007774:	681b      	ldr	r3, [r3, #0]
 8007776:	4a3d      	ldr	r2, [pc, #244]	@ (800786c <HAL_ADC_MspInit+0x120>)
 8007778:	4293      	cmp	r3, r2
 800777a:	d172      	bne.n	8007862 <HAL_ADC_MspInit+0x116>

    /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 800777c:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8007780:	617b      	str	r3, [r7, #20]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 8007782:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8007786:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_HSE;
 800778a:	2303      	movs	r3, #3
 800778c:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 800778e:	2301      	movs	r3, #1
 8007790:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 8;
 8007792:	2308      	movs	r3, #8
 8007794:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 8007796:	2307      	movs	r3, #7
 8007798:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 800779a:	2302      	movs	r3, #2
 800779c:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 800779e:	2302      	movs	r3, #2
 80077a0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 80077a2:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80077a6:	633b      	str	r3, [r7, #48]	@ 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80077a8:	f107 0314 	add.w	r3, r7, #20
 80077ac:	4618      	mov	r0, r3
 80077ae:	f009 f865 	bl	801087c <HAL_RCCEx_PeriphCLKConfig>
 80077b2:	4603      	mov	r3, r0
 80077b4:	2b00      	cmp	r3, #0
 80077b6:	d001      	beq.n	80077bc <HAL_ADC_MspInit+0x70>
    {
      Error_Handler();
 80077b8:	f7fd fe94 	bl	80054e4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 80077bc:	4b2c      	ldr	r3, [pc, #176]	@ (8007870 <HAL_ADC_MspInit+0x124>)
 80077be:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80077c0:	4a2b      	ldr	r2, [pc, #172]	@ (8007870 <HAL_ADC_MspInit+0x124>)
 80077c2:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80077c6:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80077c8:	4b29      	ldr	r3, [pc, #164]	@ (8007870 <HAL_ADC_MspInit+0x124>)
 80077ca:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80077cc:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80077d0:	613b      	str	r3, [r7, #16]
 80077d2:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80077d4:	4b26      	ldr	r3, [pc, #152]	@ (8007870 <HAL_ADC_MspInit+0x124>)
 80077d6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80077d8:	4a25      	ldr	r2, [pc, #148]	@ (8007870 <HAL_ADC_MspInit+0x124>)
 80077da:	f043 0301 	orr.w	r3, r3, #1
 80077de:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80077e0:	4b23      	ldr	r3, [pc, #140]	@ (8007870 <HAL_ADC_MspInit+0x124>)
 80077e2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80077e4:	f003 0301 	and.w	r3, r3, #1
 80077e8:	60fb      	str	r3, [r7, #12]
 80077ea:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA4     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 80077ec:	2310      	movs	r3, #16
 80077ee:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 80077f2:	230b      	movs	r3, #11
 80077f4:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80077f8:	2300      	movs	r3, #0
 80077fa:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80077fe:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8007802:	4619      	mov	r1, r3
 8007804:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8007808:	f006 fdb0 	bl	800e36c <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 800780c:	4b19      	ldr	r3, [pc, #100]	@ (8007874 <HAL_ADC_MspInit+0x128>)
 800780e:	4a1a      	ldr	r2, [pc, #104]	@ (8007878 <HAL_ADC_MspInit+0x12c>)
 8007810:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_0;
 8007812:	4b18      	ldr	r3, [pc, #96]	@ (8007874 <HAL_ADC_MspInit+0x128>)
 8007814:	2200      	movs	r2, #0
 8007816:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8007818:	4b16      	ldr	r3, [pc, #88]	@ (8007874 <HAL_ADC_MspInit+0x128>)
 800781a:	2200      	movs	r2, #0
 800781c:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 800781e:	4b15      	ldr	r3, [pc, #84]	@ (8007874 <HAL_ADC_MspInit+0x128>)
 8007820:	2200      	movs	r2, #0
 8007822:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8007824:	4b13      	ldr	r3, [pc, #76]	@ (8007874 <HAL_ADC_MspInit+0x128>)
 8007826:	2280      	movs	r2, #128	@ 0x80
 8007828:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800782a:	4b12      	ldr	r3, [pc, #72]	@ (8007874 <HAL_ADC_MspInit+0x128>)
 800782c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8007830:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8007832:	4b10      	ldr	r3, [pc, #64]	@ (8007874 <HAL_ADC_MspInit+0x128>)
 8007834:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8007838:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 800783a:	4b0e      	ldr	r3, [pc, #56]	@ (8007874 <HAL_ADC_MspInit+0x128>)
 800783c:	2220      	movs	r2, #32
 800783e:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8007840:	4b0c      	ldr	r3, [pc, #48]	@ (8007874 <HAL_ADC_MspInit+0x128>)
 8007842:	2200      	movs	r2, #0
 8007844:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8007846:	480b      	ldr	r0, [pc, #44]	@ (8007874 <HAL_ADC_MspInit+0x128>)
 8007848:	f005 fc8a 	bl	800d160 <HAL_DMA_Init>
 800784c:	4603      	mov	r3, r0
 800784e:	2b00      	cmp	r3, #0
 8007850:	d001      	beq.n	8007856 <HAL_ADC_MspInit+0x10a>
    {
      Error_Handler();
 8007852:	f7fd fe47 	bl	80054e4 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8007856:	687b      	ldr	r3, [r7, #4]
 8007858:	4a06      	ldr	r2, [pc, #24]	@ (8007874 <HAL_ADC_MspInit+0x128>)
 800785a:	64da      	str	r2, [r3, #76]	@ 0x4c
 800785c:	4a05      	ldr	r2, [pc, #20]	@ (8007874 <HAL_ADC_MspInit+0x128>)
 800785e:	687b      	ldr	r3, [r7, #4]
 8007860:	6293      	str	r3, [r2, #40]	@ 0x28

    /* USER CODE END ADC1_MspInit 1 */

  }

}
 8007862:	bf00      	nop
 8007864:	37b0      	adds	r7, #176	@ 0xb0
 8007866:	46bd      	mov	sp, r7
 8007868:	bd80      	pop	{r7, pc}
 800786a:	bf00      	nop
 800786c:	50040000 	.word	0x50040000
 8007870:	40021000 	.word	0x40021000
 8007874:	20000114 	.word	0x20000114
 8007878:	40020008 	.word	0x40020008

0800787c <HAL_CRC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hcrc: CRC handle pointer
  * @retval None
  */
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 800787c:	b480      	push	{r7}
 800787e:	b085      	sub	sp, #20
 8007880:	af00      	add	r7, sp, #0
 8007882:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	681b      	ldr	r3, [r3, #0]
 8007888:	4a0a      	ldr	r2, [pc, #40]	@ (80078b4 <HAL_CRC_MspInit+0x38>)
 800788a:	4293      	cmp	r3, r2
 800788c:	d10b      	bne.n	80078a6 <HAL_CRC_MspInit+0x2a>
  {
    /* USER CODE BEGIN CRC_MspInit 0 */

    /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 800788e:	4b0a      	ldr	r3, [pc, #40]	@ (80078b8 <HAL_CRC_MspInit+0x3c>)
 8007890:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007892:	4a09      	ldr	r2, [pc, #36]	@ (80078b8 <HAL_CRC_MspInit+0x3c>)
 8007894:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8007898:	6493      	str	r3, [r2, #72]	@ 0x48
 800789a:	4b07      	ldr	r3, [pc, #28]	@ (80078b8 <HAL_CRC_MspInit+0x3c>)
 800789c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800789e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80078a2:	60fb      	str	r3, [r7, #12]
 80078a4:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END CRC_MspInit 1 */

  }

}
 80078a6:	bf00      	nop
 80078a8:	3714      	adds	r7, #20
 80078aa:	46bd      	mov	sp, r7
 80078ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078b0:	4770      	bx	lr
 80078b2:	bf00      	nop
 80078b4:	40023000 	.word	0x40023000
 80078b8:	40021000 	.word	0x40021000

080078bc <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80078bc:	b580      	push	{r7, lr}
 80078be:	b0ac      	sub	sp, #176	@ 0xb0
 80078c0:	af00      	add	r7, sp, #0
 80078c2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80078c4:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 80078c8:	2200      	movs	r2, #0
 80078ca:	601a      	str	r2, [r3, #0]
 80078cc:	605a      	str	r2, [r3, #4]
 80078ce:	609a      	str	r2, [r3, #8]
 80078d0:	60da      	str	r2, [r3, #12]
 80078d2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80078d4:	f107 0314 	add.w	r3, r7, #20
 80078d8:	2288      	movs	r2, #136	@ 0x88
 80078da:	2100      	movs	r1, #0
 80078dc:	4618      	mov	r0, r3
 80078de:	f00e fdd9 	bl	8016494 <memset>
  if(hi2c->Instance==I2C3)
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	681b      	ldr	r3, [r3, #0]
 80078e6:	4a21      	ldr	r2, [pc, #132]	@ (800796c <HAL_I2C_MspInit+0xb0>)
 80078e8:	4293      	cmp	r3, r2
 80078ea:	d13b      	bne.n	8007964 <HAL_I2C_MspInit+0xa8>

    /* USER CODE END I2C3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C3;
 80078ec:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80078f0:	617b      	str	r3, [r7, #20]
    PeriphClkInit.I2c3ClockSelection = RCC_I2C3CLKSOURCE_PCLK1;
 80078f2:	2300      	movs	r3, #0
 80078f4:	66fb      	str	r3, [r7, #108]	@ 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80078f6:	f107 0314 	add.w	r3, r7, #20
 80078fa:	4618      	mov	r0, r3
 80078fc:	f008 ffbe 	bl	801087c <HAL_RCCEx_PeriphCLKConfig>
 8007900:	4603      	mov	r3, r0
 8007902:	2b00      	cmp	r3, #0
 8007904:	d001      	beq.n	800790a <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8007906:	f7fd fded 	bl	80054e4 <Error_Handler>
    }

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800790a:	4b19      	ldr	r3, [pc, #100]	@ (8007970 <HAL_I2C_MspInit+0xb4>)
 800790c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800790e:	4a18      	ldr	r2, [pc, #96]	@ (8007970 <HAL_I2C_MspInit+0xb4>)
 8007910:	f043 0304 	orr.w	r3, r3, #4
 8007914:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8007916:	4b16      	ldr	r3, [pc, #88]	@ (8007970 <HAL_I2C_MspInit+0xb4>)
 8007918:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800791a:	f003 0304 	and.w	r3, r3, #4
 800791e:	613b      	str	r3, [r7, #16]
 8007920:	693b      	ldr	r3, [r7, #16]
    /**I2C3 GPIO Configuration
    PC0     ------> I2C3_SCL
    PC1     ------> I2C3_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8007922:	2303      	movs	r3, #3
 8007924:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8007928:	2312      	movs	r3, #18
 800792a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800792e:	2300      	movs	r3, #0
 8007930:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007934:	2303      	movs	r3, #3
 8007936:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 800793a:	2304      	movs	r3, #4
 800793c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8007940:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8007944:	4619      	mov	r1, r3
 8007946:	480b      	ldr	r0, [pc, #44]	@ (8007974 <HAL_I2C_MspInit+0xb8>)
 8007948:	f006 fd10 	bl	800e36c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 800794c:	4b08      	ldr	r3, [pc, #32]	@ (8007970 <HAL_I2C_MspInit+0xb4>)
 800794e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007950:	4a07      	ldr	r2, [pc, #28]	@ (8007970 <HAL_I2C_MspInit+0xb4>)
 8007952:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8007956:	6593      	str	r3, [r2, #88]	@ 0x58
 8007958:	4b05      	ldr	r3, [pc, #20]	@ (8007970 <HAL_I2C_MspInit+0xb4>)
 800795a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800795c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007960:	60fb      	str	r3, [r7, #12]
 8007962:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END I2C3_MspInit 1 */

  }

}
 8007964:	bf00      	nop
 8007966:	37b0      	adds	r7, #176	@ 0xb0
 8007968:	46bd      	mov	sp, r7
 800796a:	bd80      	pop	{r7, pc}
 800796c:	40005c00 	.word	0x40005c00
 8007970:	40021000 	.word	0x40021000
 8007974:	48000800 	.word	0x48000800

08007978 <HAL_QSPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hqspi: QSPI handle pointer
  * @retval None
  */
void HAL_QSPI_MspInit(QSPI_HandleTypeDef* hqspi)
{
 8007978:	b580      	push	{r7, lr}
 800797a:	b08a      	sub	sp, #40	@ 0x28
 800797c:	af00      	add	r7, sp, #0
 800797e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007980:	f107 0314 	add.w	r3, r7, #20
 8007984:	2200      	movs	r2, #0
 8007986:	601a      	str	r2, [r3, #0]
 8007988:	605a      	str	r2, [r3, #4]
 800798a:	609a      	str	r2, [r3, #8]
 800798c:	60da      	str	r2, [r3, #12]
 800798e:	611a      	str	r2, [r3, #16]
  if(hqspi->Instance==QUADSPI)
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	681b      	ldr	r3, [r3, #0]
 8007994:	4a26      	ldr	r2, [pc, #152]	@ (8007a30 <HAL_QSPI_MspInit+0xb8>)
 8007996:	4293      	cmp	r3, r2
 8007998:	d145      	bne.n	8007a26 <HAL_QSPI_MspInit+0xae>
  {
    /* USER CODE BEGIN QUADSPI_MspInit 0 */

    /* USER CODE END QUADSPI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_QSPI_CLK_ENABLE();
 800799a:	4b26      	ldr	r3, [pc, #152]	@ (8007a34 <HAL_QSPI_MspInit+0xbc>)
 800799c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800799e:	4a25      	ldr	r2, [pc, #148]	@ (8007a34 <HAL_QSPI_MspInit+0xbc>)
 80079a0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80079a4:	6513      	str	r3, [r2, #80]	@ 0x50
 80079a6:	4b23      	ldr	r3, [pc, #140]	@ (8007a34 <HAL_QSPI_MspInit+0xbc>)
 80079a8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80079aa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80079ae:	613b      	str	r3, [r7, #16]
 80079b0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80079b2:	4b20      	ldr	r3, [pc, #128]	@ (8007a34 <HAL_QSPI_MspInit+0xbc>)
 80079b4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80079b6:	4a1f      	ldr	r2, [pc, #124]	@ (8007a34 <HAL_QSPI_MspInit+0xbc>)
 80079b8:	f043 0301 	orr.w	r3, r3, #1
 80079bc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80079be:	4b1d      	ldr	r3, [pc, #116]	@ (8007a34 <HAL_QSPI_MspInit+0xbc>)
 80079c0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80079c2:	f003 0301 	and.w	r3, r3, #1
 80079c6:	60fb      	str	r3, [r7, #12]
 80079c8:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80079ca:	4b1a      	ldr	r3, [pc, #104]	@ (8007a34 <HAL_QSPI_MspInit+0xbc>)
 80079cc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80079ce:	4a19      	ldr	r2, [pc, #100]	@ (8007a34 <HAL_QSPI_MspInit+0xbc>)
 80079d0:	f043 0302 	orr.w	r3, r3, #2
 80079d4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80079d6:	4b17      	ldr	r3, [pc, #92]	@ (8007a34 <HAL_QSPI_MspInit+0xbc>)
 80079d8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80079da:	f003 0302 	and.w	r3, r3, #2
 80079de:	60bb      	str	r3, [r7, #8]
 80079e0:	68bb      	ldr	r3, [r7, #8]
    PB0     ------> QUADSPI_BK1_IO1
    PB1     ------> QUADSPI_BK1_IO0
    PB10     ------> QUADSPI_CLK
    PB11     ------> QUADSPI_NCS
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80079e2:	23c0      	movs	r3, #192	@ 0xc0
 80079e4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80079e6:	2302      	movs	r3, #2
 80079e8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80079ea:	2300      	movs	r3, #0
 80079ec:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80079ee:	2303      	movs	r3, #3
 80079f0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 80079f2:	230a      	movs	r3, #10
 80079f4:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80079f6:	f107 0314 	add.w	r3, r7, #20
 80079fa:	4619      	mov	r1, r3
 80079fc:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8007a00:	f006 fcb4 	bl	800e36c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_10|GPIO_PIN_11;
 8007a04:	f640 4303 	movw	r3, #3075	@ 0xc03
 8007a08:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007a0a:	2302      	movs	r3, #2
 8007a0c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007a0e:	2300      	movs	r3, #0
 8007a10:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007a12:	2303      	movs	r3, #3
 8007a14:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8007a16:	230a      	movs	r3, #10
 8007a18:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8007a1a:	f107 0314 	add.w	r3, r7, #20
 8007a1e:	4619      	mov	r1, r3
 8007a20:	4805      	ldr	r0, [pc, #20]	@ (8007a38 <HAL_QSPI_MspInit+0xc0>)
 8007a22:	f006 fca3 	bl	800e36c <HAL_GPIO_Init>

    /* USER CODE END QUADSPI_MspInit 1 */

  }

}
 8007a26:	bf00      	nop
 8007a28:	3728      	adds	r7, #40	@ 0x28
 8007a2a:	46bd      	mov	sp, r7
 8007a2c:	bd80      	pop	{r7, pc}
 8007a2e:	bf00      	nop
 8007a30:	a0001000 	.word	0xa0001000
 8007a34:	40021000 	.word	0x40021000
 8007a38:	48000400 	.word	0x48000400

08007a3c <HAL_RTC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hrtc: RTC handle pointer
  * @retval None
  */
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8007a3c:	b580      	push	{r7, lr}
 8007a3e:	b0a4      	sub	sp, #144	@ 0x90
 8007a40:	af00      	add	r7, sp, #0
 8007a42:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8007a44:	f107 0308 	add.w	r3, r7, #8
 8007a48:	2288      	movs	r2, #136	@ 0x88
 8007a4a:	2100      	movs	r1, #0
 8007a4c:	4618      	mov	r0, r3
 8007a4e:	f00e fd21 	bl	8016494 <memset>
  if(hrtc->Instance==RTC)
 8007a52:	687b      	ldr	r3, [r7, #4]
 8007a54:	681b      	ldr	r3, [r3, #0]
 8007a56:	4a14      	ldr	r2, [pc, #80]	@ (8007aa8 <HAL_RTC_MspInit+0x6c>)
 8007a58:	4293      	cmp	r3, r2
 8007a5a:	d120      	bne.n	8007a9e <HAL_RTC_MspInit+0x62>

    /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8007a5c:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8007a60:	60bb      	str	r3, [r7, #8]
    PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8007a62:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8007a66:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8007a6a:	f107 0308 	add.w	r3, r7, #8
 8007a6e:	4618      	mov	r0, r3
 8007a70:	f008 ff04 	bl	801087c <HAL_RCCEx_PeriphCLKConfig>
 8007a74:	4603      	mov	r3, r0
 8007a76:	2b00      	cmp	r3, #0
 8007a78:	d001      	beq.n	8007a7e <HAL_RTC_MspInit+0x42>
    {
      Error_Handler();
 8007a7a:	f7fd fd33 	bl	80054e4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8007a7e:	4b0b      	ldr	r3, [pc, #44]	@ (8007aac <HAL_RTC_MspInit+0x70>)
 8007a80:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007a84:	4a09      	ldr	r2, [pc, #36]	@ (8007aac <HAL_RTC_MspInit+0x70>)
 8007a86:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007a8a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_Alarm_IRQn, 0, 0);
 8007a8e:	2200      	movs	r2, #0
 8007a90:	2100      	movs	r1, #0
 8007a92:	2029      	movs	r0, #41	@ 0x29
 8007a94:	f005 f8f1 	bl	800cc7a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_Alarm_IRQn);
 8007a98:	2029      	movs	r0, #41	@ 0x29
 8007a9a:	f005 f90a 	bl	800ccb2 <HAL_NVIC_EnableIRQ>

    /* USER CODE END RTC_MspInit 1 */

  }

}
 8007a9e:	bf00      	nop
 8007aa0:	3790      	adds	r7, #144	@ 0x90
 8007aa2:	46bd      	mov	sp, r7
 8007aa4:	bd80      	pop	{r7, pc}
 8007aa6:	bf00      	nop
 8007aa8:	40002800 	.word	0x40002800
 8007aac:	40021000 	.word	0x40021000

08007ab0 <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8007ab0:	b580      	push	{r7, lr}
 8007ab2:	b08c      	sub	sp, #48	@ 0x30
 8007ab4:	af00      	add	r7, sp, #0
 8007ab6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007ab8:	f107 031c 	add.w	r3, r7, #28
 8007abc:	2200      	movs	r2, #0
 8007abe:	601a      	str	r2, [r3, #0]
 8007ac0:	605a      	str	r2, [r3, #4]
 8007ac2:	609a      	str	r2, [r3, #8]
 8007ac4:	60da      	str	r2, [r3, #12]
 8007ac6:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	681b      	ldr	r3, [r3, #0]
 8007acc:	4a2f      	ldr	r2, [pc, #188]	@ (8007b8c <HAL_SPI_MspInit+0xdc>)
 8007ace:	4293      	cmp	r3, r2
 8007ad0:	d129      	bne.n	8007b26 <HAL_SPI_MspInit+0x76>
  {
    /* USER CODE BEGIN SPI2_MspInit 0 */

    /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8007ad2:	4b2f      	ldr	r3, [pc, #188]	@ (8007b90 <HAL_SPI_MspInit+0xe0>)
 8007ad4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007ad6:	4a2e      	ldr	r2, [pc, #184]	@ (8007b90 <HAL_SPI_MspInit+0xe0>)
 8007ad8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8007adc:	6593      	str	r3, [r2, #88]	@ 0x58
 8007ade:	4b2c      	ldr	r3, [pc, #176]	@ (8007b90 <HAL_SPI_MspInit+0xe0>)
 8007ae0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007ae2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8007ae6:	61bb      	str	r3, [r7, #24]
 8007ae8:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8007aea:	4b29      	ldr	r3, [pc, #164]	@ (8007b90 <HAL_SPI_MspInit+0xe0>)
 8007aec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007aee:	4a28      	ldr	r2, [pc, #160]	@ (8007b90 <HAL_SPI_MspInit+0xe0>)
 8007af0:	f043 0302 	orr.w	r3, r3, #2
 8007af4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8007af6:	4b26      	ldr	r3, [pc, #152]	@ (8007b90 <HAL_SPI_MspInit+0xe0>)
 8007af8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007afa:	f003 0302 	and.w	r3, r3, #2
 8007afe:	617b      	str	r3, [r7, #20]
 8007b00:	697b      	ldr	r3, [r7, #20]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8007b02:	f44f 4360 	mov.w	r3, #57344	@ 0xe000
 8007b06:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007b08:	2302      	movs	r3, #2
 8007b0a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007b0c:	2300      	movs	r3, #0
 8007b0e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007b10:	2303      	movs	r3, #3
 8007b12:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8007b14:	2305      	movs	r3, #5
 8007b16:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8007b18:	f107 031c 	add.w	r3, r7, #28
 8007b1c:	4619      	mov	r1, r3
 8007b1e:	481d      	ldr	r0, [pc, #116]	@ (8007b94 <HAL_SPI_MspInit+0xe4>)
 8007b20:	f006 fc24 	bl	800e36c <HAL_GPIO_Init>
    /* USER CODE BEGIN SPI3_MspInit 1 */

    /* USER CODE END SPI3_MspInit 1 */
  }

}
 8007b24:	e02d      	b.n	8007b82 <HAL_SPI_MspInit+0xd2>
  else if(hspi->Instance==SPI3)
 8007b26:	687b      	ldr	r3, [r7, #4]
 8007b28:	681b      	ldr	r3, [r3, #0]
 8007b2a:	4a1b      	ldr	r2, [pc, #108]	@ (8007b98 <HAL_SPI_MspInit+0xe8>)
 8007b2c:	4293      	cmp	r3, r2
 8007b2e:	d128      	bne.n	8007b82 <HAL_SPI_MspInit+0xd2>
    __HAL_RCC_SPI3_CLK_ENABLE();
 8007b30:	4b17      	ldr	r3, [pc, #92]	@ (8007b90 <HAL_SPI_MspInit+0xe0>)
 8007b32:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007b34:	4a16      	ldr	r2, [pc, #88]	@ (8007b90 <HAL_SPI_MspInit+0xe0>)
 8007b36:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007b3a:	6593      	str	r3, [r2, #88]	@ 0x58
 8007b3c:	4b14      	ldr	r3, [pc, #80]	@ (8007b90 <HAL_SPI_MspInit+0xe0>)
 8007b3e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007b40:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8007b44:	613b      	str	r3, [r7, #16]
 8007b46:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8007b48:	4b11      	ldr	r3, [pc, #68]	@ (8007b90 <HAL_SPI_MspInit+0xe0>)
 8007b4a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007b4c:	4a10      	ldr	r2, [pc, #64]	@ (8007b90 <HAL_SPI_MspInit+0xe0>)
 8007b4e:	f043 0304 	orr.w	r3, r3, #4
 8007b52:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8007b54:	4b0e      	ldr	r3, [pc, #56]	@ (8007b90 <HAL_SPI_MspInit+0xe0>)
 8007b56:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007b58:	f003 0304 	and.w	r3, r3, #4
 8007b5c:	60fb      	str	r3, [r7, #12]
 8007b5e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 8007b60:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 8007b64:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007b66:	2302      	movs	r3, #2
 8007b68:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007b6a:	2300      	movs	r3, #0
 8007b6c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007b6e:	2303      	movs	r3, #3
 8007b70:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8007b72:	2306      	movs	r3, #6
 8007b74:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8007b76:	f107 031c 	add.w	r3, r7, #28
 8007b7a:	4619      	mov	r1, r3
 8007b7c:	4807      	ldr	r0, [pc, #28]	@ (8007b9c <HAL_SPI_MspInit+0xec>)
 8007b7e:	f006 fbf5 	bl	800e36c <HAL_GPIO_Init>
}
 8007b82:	bf00      	nop
 8007b84:	3730      	adds	r7, #48	@ 0x30
 8007b86:	46bd      	mov	sp, r7
 8007b88:	bd80      	pop	{r7, pc}
 8007b8a:	bf00      	nop
 8007b8c:	40003800 	.word	0x40003800
 8007b90:	40021000 	.word	0x40021000
 8007b94:	48000400 	.word	0x48000400
 8007b98:	40003c00 	.word	0x40003c00
 8007b9c:	48000800 	.word	0x48000800

08007ba0 <HAL_TIM_PWM_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_pwm: TIM_PWM handle pointer
  * @retval None
  */
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8007ba0:	b480      	push	{r7}
 8007ba2:	b085      	sub	sp, #20
 8007ba4:	af00      	add	r7, sp, #0
 8007ba6:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	681b      	ldr	r3, [r3, #0]
 8007bac:	4a0a      	ldr	r2, [pc, #40]	@ (8007bd8 <HAL_TIM_PWM_MspInit+0x38>)
 8007bae:	4293      	cmp	r3, r2
 8007bb0:	d10b      	bne.n	8007bca <HAL_TIM_PWM_MspInit+0x2a>
  {
    /* USER CODE BEGIN TIM1_MspInit 0 */

    /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8007bb2:	4b0a      	ldr	r3, [pc, #40]	@ (8007bdc <HAL_TIM_PWM_MspInit+0x3c>)
 8007bb4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007bb6:	4a09      	ldr	r2, [pc, #36]	@ (8007bdc <HAL_TIM_PWM_MspInit+0x3c>)
 8007bb8:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8007bbc:	6613      	str	r3, [r2, #96]	@ 0x60
 8007bbe:	4b07      	ldr	r3, [pc, #28]	@ (8007bdc <HAL_TIM_PWM_MspInit+0x3c>)
 8007bc0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007bc2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007bc6:	60fb      	str	r3, [r7, #12]
 8007bc8:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END TIM1_MspInit 1 */

  }

}
 8007bca:	bf00      	nop
 8007bcc:	3714      	adds	r7, #20
 8007bce:	46bd      	mov	sp, r7
 8007bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bd4:	4770      	bx	lr
 8007bd6:	bf00      	nop
 8007bd8:	40012c00 	.word	0x40012c00
 8007bdc:	40021000 	.word	0x40021000

08007be0 <HAL_TIM_IC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_ic: TIM_IC handle pointer
  * @retval None
  */
void HAL_TIM_IC_MspInit(TIM_HandleTypeDef* htim_ic)
{
 8007be0:	b580      	push	{r7, lr}
 8007be2:	b08a      	sub	sp, #40	@ 0x28
 8007be4:	af00      	add	r7, sp, #0
 8007be6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007be8:	f107 0314 	add.w	r3, r7, #20
 8007bec:	2200      	movs	r2, #0
 8007bee:	601a      	str	r2, [r3, #0]
 8007bf0:	605a      	str	r2, [r3, #4]
 8007bf2:	609a      	str	r2, [r3, #8]
 8007bf4:	60da      	str	r2, [r3, #12]
 8007bf6:	611a      	str	r2, [r3, #16]
  if(htim_ic->Instance==TIM2)
 8007bf8:	687b      	ldr	r3, [r7, #4]
 8007bfa:	681b      	ldr	r3, [r3, #0]
 8007bfc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007c00:	d128      	bne.n	8007c54 <HAL_TIM_IC_MspInit+0x74>
  {
    /* USER CODE BEGIN TIM2_MspInit 0 */

    /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8007c02:	4b16      	ldr	r3, [pc, #88]	@ (8007c5c <HAL_TIM_IC_MspInit+0x7c>)
 8007c04:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007c06:	4a15      	ldr	r2, [pc, #84]	@ (8007c5c <HAL_TIM_IC_MspInit+0x7c>)
 8007c08:	f043 0301 	orr.w	r3, r3, #1
 8007c0c:	6593      	str	r3, [r2, #88]	@ 0x58
 8007c0e:	4b13      	ldr	r3, [pc, #76]	@ (8007c5c <HAL_TIM_IC_MspInit+0x7c>)
 8007c10:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007c12:	f003 0301 	and.w	r3, r3, #1
 8007c16:	613b      	str	r3, [r7, #16]
 8007c18:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8007c1a:	4b10      	ldr	r3, [pc, #64]	@ (8007c5c <HAL_TIM_IC_MspInit+0x7c>)
 8007c1c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007c1e:	4a0f      	ldr	r2, [pc, #60]	@ (8007c5c <HAL_TIM_IC_MspInit+0x7c>)
 8007c20:	f043 0301 	orr.w	r3, r3, #1
 8007c24:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8007c26:	4b0d      	ldr	r3, [pc, #52]	@ (8007c5c <HAL_TIM_IC_MspInit+0x7c>)
 8007c28:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007c2a:	f003 0301 	and.w	r3, r3, #1
 8007c2e:	60fb      	str	r3, [r7, #12]
 8007c30:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA5     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8007c32:	2320      	movs	r3, #32
 8007c34:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007c36:	2302      	movs	r3, #2
 8007c38:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8007c3a:	2301      	movs	r3, #1
 8007c3c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007c3e:	2300      	movs	r3, #0
 8007c40:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8007c42:	2301      	movs	r3, #1
 8007c44:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007c46:	f107 0314 	add.w	r3, r7, #20
 8007c4a:	4619      	mov	r1, r3
 8007c4c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8007c50:	f006 fb8c 	bl	800e36c <HAL_GPIO_Init>

    /* USER CODE END TIM2_MspInit 1 */

  }

}
 8007c54:	bf00      	nop
 8007c56:	3728      	adds	r7, #40	@ 0x28
 8007c58:	46bd      	mov	sp, r7
 8007c5a:	bd80      	pop	{r7, pc}
 8007c5c:	40021000 	.word	0x40021000

08007c60 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8007c60:	b480      	push	{r7}
 8007c62:	b085      	sub	sp, #20
 8007c64:	af00      	add	r7, sp, #0
 8007c66:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	681b      	ldr	r3, [r3, #0]
 8007c6c:	4a13      	ldr	r2, [pc, #76]	@ (8007cbc <HAL_TIM_Base_MspInit+0x5c>)
 8007c6e:	4293      	cmp	r3, r2
 8007c70:	d10c      	bne.n	8007c8c <HAL_TIM_Base_MspInit+0x2c>
  {
    /* USER CODE BEGIN TIM3_MspInit 0 */

    /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8007c72:	4b13      	ldr	r3, [pc, #76]	@ (8007cc0 <HAL_TIM_Base_MspInit+0x60>)
 8007c74:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007c76:	4a12      	ldr	r2, [pc, #72]	@ (8007cc0 <HAL_TIM_Base_MspInit+0x60>)
 8007c78:	f043 0302 	orr.w	r3, r3, #2
 8007c7c:	6593      	str	r3, [r2, #88]	@ 0x58
 8007c7e:	4b10      	ldr	r3, [pc, #64]	@ (8007cc0 <HAL_TIM_Base_MspInit+0x60>)
 8007c80:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007c82:	f003 0302 	and.w	r3, r3, #2
 8007c86:	60fb      	str	r3, [r7, #12]
 8007c88:	68fb      	ldr	r3, [r7, #12]
    /* USER CODE BEGIN TIM4_MspInit 1 */

    /* USER CODE END TIM4_MspInit 1 */
  }

}
 8007c8a:	e010      	b.n	8007cae <HAL_TIM_Base_MspInit+0x4e>
  else if(htim_base->Instance==TIM4)
 8007c8c:	687b      	ldr	r3, [r7, #4]
 8007c8e:	681b      	ldr	r3, [r3, #0]
 8007c90:	4a0c      	ldr	r2, [pc, #48]	@ (8007cc4 <HAL_TIM_Base_MspInit+0x64>)
 8007c92:	4293      	cmp	r3, r2
 8007c94:	d10b      	bne.n	8007cae <HAL_TIM_Base_MspInit+0x4e>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8007c96:	4b0a      	ldr	r3, [pc, #40]	@ (8007cc0 <HAL_TIM_Base_MspInit+0x60>)
 8007c98:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007c9a:	4a09      	ldr	r2, [pc, #36]	@ (8007cc0 <HAL_TIM_Base_MspInit+0x60>)
 8007c9c:	f043 0304 	orr.w	r3, r3, #4
 8007ca0:	6593      	str	r3, [r2, #88]	@ 0x58
 8007ca2:	4b07      	ldr	r3, [pc, #28]	@ (8007cc0 <HAL_TIM_Base_MspInit+0x60>)
 8007ca4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007ca6:	f003 0304 	and.w	r3, r3, #4
 8007caa:	60bb      	str	r3, [r7, #8]
 8007cac:	68bb      	ldr	r3, [r7, #8]
}
 8007cae:	bf00      	nop
 8007cb0:	3714      	adds	r7, #20
 8007cb2:	46bd      	mov	sp, r7
 8007cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cb8:	4770      	bx	lr
 8007cba:	bf00      	nop
 8007cbc:	40000400 	.word	0x40000400
 8007cc0:	40021000 	.word	0x40021000
 8007cc4:	40000800 	.word	0x40000800

08007cc8 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8007cc8:	b580      	push	{r7, lr}
 8007cca:	b08a      	sub	sp, #40	@ 0x28
 8007ccc:	af00      	add	r7, sp, #0
 8007cce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007cd0:	f107 0314 	add.w	r3, r7, #20
 8007cd4:	2200      	movs	r2, #0
 8007cd6:	601a      	str	r2, [r3, #0]
 8007cd8:	605a      	str	r2, [r3, #4]
 8007cda:	609a      	str	r2, [r3, #8]
 8007cdc:	60da      	str	r2, [r3, #12]
 8007cde:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8007ce0:	687b      	ldr	r3, [r7, #4]
 8007ce2:	681b      	ldr	r3, [r3, #0]
 8007ce4:	4a23      	ldr	r2, [pc, #140]	@ (8007d74 <HAL_TIM_MspPostInit+0xac>)
 8007ce6:	4293      	cmp	r3, r2
 8007ce8:	d11e      	bne.n	8007d28 <HAL_TIM_MspPostInit+0x60>
  {
    /* USER CODE BEGIN TIM1_MspPostInit 0 */

    /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8007cea:	4b23      	ldr	r3, [pc, #140]	@ (8007d78 <HAL_TIM_MspPostInit+0xb0>)
 8007cec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007cee:	4a22      	ldr	r2, [pc, #136]	@ (8007d78 <HAL_TIM_MspPostInit+0xb0>)
 8007cf0:	f043 0301 	orr.w	r3, r3, #1
 8007cf4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8007cf6:	4b20      	ldr	r3, [pc, #128]	@ (8007d78 <HAL_TIM_MspPostInit+0xb0>)
 8007cf8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007cfa:	f003 0301 	and.w	r3, r3, #1
 8007cfe:	613b      	str	r3, [r7, #16]
 8007d00:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10;
 8007d02:	f44f 63e0 	mov.w	r3, #1792	@ 0x700
 8007d06:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007d08:	2302      	movs	r3, #2
 8007d0a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007d0c:	2300      	movs	r3, #0
 8007d0e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007d10:	2300      	movs	r3, #0
 8007d12:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8007d14:	2301      	movs	r3, #1
 8007d16:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007d18:	f107 0314 	add.w	r3, r7, #20
 8007d1c:	4619      	mov	r1, r3
 8007d1e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8007d22:	f006 fb23 	bl	800e36c <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM3_MspPostInit 1 */

    /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8007d26:	e021      	b.n	8007d6c <HAL_TIM_MspPostInit+0xa4>
  else if(htim->Instance==TIM3)
 8007d28:	687b      	ldr	r3, [r7, #4]
 8007d2a:	681b      	ldr	r3, [r3, #0]
 8007d2c:	4a13      	ldr	r2, [pc, #76]	@ (8007d7c <HAL_TIM_MspPostInit+0xb4>)
 8007d2e:	4293      	cmp	r3, r2
 8007d30:	d11c      	bne.n	8007d6c <HAL_TIM_MspPostInit+0xa4>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8007d32:	4b11      	ldr	r3, [pc, #68]	@ (8007d78 <HAL_TIM_MspPostInit+0xb0>)
 8007d34:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007d36:	4a10      	ldr	r2, [pc, #64]	@ (8007d78 <HAL_TIM_MspPostInit+0xb0>)
 8007d38:	f043 0304 	orr.w	r3, r3, #4
 8007d3c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8007d3e:	4b0e      	ldr	r3, [pc, #56]	@ (8007d78 <HAL_TIM_MspPostInit+0xb0>)
 8007d40:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007d42:	f003 0304 	and.w	r3, r3, #4
 8007d46:	60fb      	str	r3, [r7, #12]
 8007d48:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8007d4a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8007d4e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007d50:	2302      	movs	r3, #2
 8007d52:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007d54:	2300      	movs	r3, #0
 8007d56:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007d58:	2300      	movs	r3, #0
 8007d5a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8007d5c:	2302      	movs	r3, #2
 8007d5e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8007d60:	f107 0314 	add.w	r3, r7, #20
 8007d64:	4619      	mov	r1, r3
 8007d66:	4806      	ldr	r0, [pc, #24]	@ (8007d80 <HAL_TIM_MspPostInit+0xb8>)
 8007d68:	f006 fb00 	bl	800e36c <HAL_GPIO_Init>
}
 8007d6c:	bf00      	nop
 8007d6e:	3728      	adds	r7, #40	@ 0x28
 8007d70:	46bd      	mov	sp, r7
 8007d72:	bd80      	pop	{r7, pc}
 8007d74:	40012c00 	.word	0x40012c00
 8007d78:	40021000 	.word	0x40021000
 8007d7c:	40000400 	.word	0x40000400
 8007d80:	48000800 	.word	0x48000800

08007d84 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8007d84:	b580      	push	{r7, lr}
 8007d86:	b0ae      	sub	sp, #184	@ 0xb8
 8007d88:	af00      	add	r7, sp, #0
 8007d8a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007d8c:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8007d90:	2200      	movs	r2, #0
 8007d92:	601a      	str	r2, [r3, #0]
 8007d94:	605a      	str	r2, [r3, #4]
 8007d96:	609a      	str	r2, [r3, #8]
 8007d98:	60da      	str	r2, [r3, #12]
 8007d9a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8007d9c:	f107 031c 	add.w	r3, r7, #28
 8007da0:	2288      	movs	r2, #136	@ 0x88
 8007da2:	2100      	movs	r1, #0
 8007da4:	4618      	mov	r0, r3
 8007da6:	f00e fb75 	bl	8016494 <memset>
  if(huart->Instance==UART4)
 8007daa:	687b      	ldr	r3, [r7, #4]
 8007dac:	681b      	ldr	r3, [r3, #0]
 8007dae:	4a6b      	ldr	r2, [pc, #428]	@ (8007f5c <HAL_UART_MspInit+0x1d8>)
 8007db0:	4293      	cmp	r3, r2
 8007db2:	d13c      	bne.n	8007e2e <HAL_UART_MspInit+0xaa>

    /* USER CODE END UART4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 8007db4:	2308      	movs	r3, #8
 8007db6:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.Uart4ClockSelection = RCC_UART4CLKSOURCE_PCLK1;
 8007db8:	2300      	movs	r3, #0
 8007dba:	663b      	str	r3, [r7, #96]	@ 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8007dbc:	f107 031c 	add.w	r3, r7, #28
 8007dc0:	4618      	mov	r0, r3
 8007dc2:	f008 fd5b 	bl	801087c <HAL_RCCEx_PeriphCLKConfig>
 8007dc6:	4603      	mov	r3, r0
 8007dc8:	2b00      	cmp	r3, #0
 8007dca:	d001      	beq.n	8007dd0 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8007dcc:	f7fd fb8a 	bl	80054e4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8007dd0:	4b63      	ldr	r3, [pc, #396]	@ (8007f60 <HAL_UART_MspInit+0x1dc>)
 8007dd2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007dd4:	4a62      	ldr	r2, [pc, #392]	@ (8007f60 <HAL_UART_MspInit+0x1dc>)
 8007dd6:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8007dda:	6593      	str	r3, [r2, #88]	@ 0x58
 8007ddc:	4b60      	ldr	r3, [pc, #384]	@ (8007f60 <HAL_UART_MspInit+0x1dc>)
 8007dde:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007de0:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8007de4:	61bb      	str	r3, [r7, #24]
 8007de6:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8007de8:	4b5d      	ldr	r3, [pc, #372]	@ (8007f60 <HAL_UART_MspInit+0x1dc>)
 8007dea:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007dec:	4a5c      	ldr	r2, [pc, #368]	@ (8007f60 <HAL_UART_MspInit+0x1dc>)
 8007dee:	f043 0301 	orr.w	r3, r3, #1
 8007df2:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8007df4:	4b5a      	ldr	r3, [pc, #360]	@ (8007f60 <HAL_UART_MspInit+0x1dc>)
 8007df6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007df8:	f003 0301 	and.w	r3, r3, #1
 8007dfc:	617b      	str	r3, [r7, #20]
 8007dfe:	697b      	ldr	r3, [r7, #20]
    /**UART4 GPIO Configuration
    PA0     ------> UART4_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8007e00:	2301      	movs	r3, #1
 8007e02:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8007e06:	2312      	movs	r3, #18
 8007e08:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8007e0c:	2301      	movs	r3, #1
 8007e0e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007e12:	2303      	movs	r3, #3
 8007e14:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8007e18:	2308      	movs	r3, #8
 8007e1a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007e1e:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8007e22:	4619      	mov	r1, r3
 8007e24:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8007e28:	f006 faa0 	bl	800e36c <HAL_GPIO_Init>
    /* USER CODE BEGIN USART1_MspInit 1 */

    /* USER CODE END USART1_MspInit 1 */
  }

}
 8007e2c:	e092      	b.n	8007f54 <HAL_UART_MspInit+0x1d0>
  else if(huart->Instance==USART1)
 8007e2e:	687b      	ldr	r3, [r7, #4]
 8007e30:	681b      	ldr	r3, [r3, #0]
 8007e32:	4a4c      	ldr	r2, [pc, #304]	@ (8007f64 <HAL_UART_MspInit+0x1e0>)
 8007e34:	4293      	cmp	r3, r2
 8007e36:	f040 808d 	bne.w	8007f54 <HAL_UART_MspInit+0x1d0>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8007e3a:	2301      	movs	r3, #1
 8007e3c:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8007e3e:	2300      	movs	r3, #0
 8007e40:	657b      	str	r3, [r7, #84]	@ 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8007e42:	f107 031c 	add.w	r3, r7, #28
 8007e46:	4618      	mov	r0, r3
 8007e48:	f008 fd18 	bl	801087c <HAL_RCCEx_PeriphCLKConfig>
 8007e4c:	4603      	mov	r3, r0
 8007e4e:	2b00      	cmp	r3, #0
 8007e50:	d001      	beq.n	8007e56 <HAL_UART_MspInit+0xd2>
      Error_Handler();
 8007e52:	f7fd fb47 	bl	80054e4 <Error_Handler>
    __HAL_RCC_USART1_CLK_ENABLE();
 8007e56:	4b42      	ldr	r3, [pc, #264]	@ (8007f60 <HAL_UART_MspInit+0x1dc>)
 8007e58:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007e5a:	4a41      	ldr	r2, [pc, #260]	@ (8007f60 <HAL_UART_MspInit+0x1dc>)
 8007e5c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8007e60:	6613      	str	r3, [r2, #96]	@ 0x60
 8007e62:	4b3f      	ldr	r3, [pc, #252]	@ (8007f60 <HAL_UART_MspInit+0x1dc>)
 8007e64:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007e66:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8007e6a:	613b      	str	r3, [r7, #16]
 8007e6c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8007e6e:	4b3c      	ldr	r3, [pc, #240]	@ (8007f60 <HAL_UART_MspInit+0x1dc>)
 8007e70:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007e72:	4a3b      	ldr	r2, [pc, #236]	@ (8007f60 <HAL_UART_MspInit+0x1dc>)
 8007e74:	f043 0302 	orr.w	r3, r3, #2
 8007e78:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8007e7a:	4b39      	ldr	r3, [pc, #228]	@ (8007f60 <HAL_UART_MspInit+0x1dc>)
 8007e7c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007e7e:	f003 0302 	and.w	r3, r3, #2
 8007e82:	60fb      	str	r3, [r7, #12]
 8007e84:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_6|GPIO_PIN_7;
 8007e86:	23d8      	movs	r3, #216	@ 0xd8
 8007e88:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007e8c:	2302      	movs	r3, #2
 8007e8e:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007e92:	2300      	movs	r3, #0
 8007e94:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007e98:	2303      	movs	r3, #3
 8007e9a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8007e9e:	2307      	movs	r3, #7
 8007ea0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8007ea4:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8007ea8:	4619      	mov	r1, r3
 8007eaa:	482f      	ldr	r0, [pc, #188]	@ (8007f68 <HAL_UART_MspInit+0x1e4>)
 8007eac:	f006 fa5e 	bl	800e36c <HAL_GPIO_Init>
    hdma_usart1_rx.Instance = DMA1_Channel5;
 8007eb0:	4b2e      	ldr	r3, [pc, #184]	@ (8007f6c <HAL_UART_MspInit+0x1e8>)
 8007eb2:	4a2f      	ldr	r2, [pc, #188]	@ (8007f70 <HAL_UART_MspInit+0x1ec>)
 8007eb4:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Request = DMA_REQUEST_2;
 8007eb6:	4b2d      	ldr	r3, [pc, #180]	@ (8007f6c <HAL_UART_MspInit+0x1e8>)
 8007eb8:	2202      	movs	r2, #2
 8007eba:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8007ebc:	4b2b      	ldr	r3, [pc, #172]	@ (8007f6c <HAL_UART_MspInit+0x1e8>)
 8007ebe:	2200      	movs	r2, #0
 8007ec0:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8007ec2:	4b2a      	ldr	r3, [pc, #168]	@ (8007f6c <HAL_UART_MspInit+0x1e8>)
 8007ec4:	2200      	movs	r2, #0
 8007ec6:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8007ec8:	4b28      	ldr	r3, [pc, #160]	@ (8007f6c <HAL_UART_MspInit+0x1e8>)
 8007eca:	2280      	movs	r2, #128	@ 0x80
 8007ecc:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8007ece:	4b27      	ldr	r3, [pc, #156]	@ (8007f6c <HAL_UART_MspInit+0x1e8>)
 8007ed0:	2200      	movs	r2, #0
 8007ed2:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8007ed4:	4b25      	ldr	r3, [pc, #148]	@ (8007f6c <HAL_UART_MspInit+0x1e8>)
 8007ed6:	2200      	movs	r2, #0
 8007ed8:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 8007eda:	4b24      	ldr	r3, [pc, #144]	@ (8007f6c <HAL_UART_MspInit+0x1e8>)
 8007edc:	2200      	movs	r2, #0
 8007ede:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8007ee0:	4b22      	ldr	r3, [pc, #136]	@ (8007f6c <HAL_UART_MspInit+0x1e8>)
 8007ee2:	2200      	movs	r2, #0
 8007ee4:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8007ee6:	4821      	ldr	r0, [pc, #132]	@ (8007f6c <HAL_UART_MspInit+0x1e8>)
 8007ee8:	f005 f93a 	bl	800d160 <HAL_DMA_Init>
 8007eec:	4603      	mov	r3, r0
 8007eee:	2b00      	cmp	r3, #0
 8007ef0:	d001      	beq.n	8007ef6 <HAL_UART_MspInit+0x172>
      Error_Handler();
 8007ef2:	f7fd faf7 	bl	80054e4 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 8007ef6:	687b      	ldr	r3, [r7, #4]
 8007ef8:	4a1c      	ldr	r2, [pc, #112]	@ (8007f6c <HAL_UART_MspInit+0x1e8>)
 8007efa:	675a      	str	r2, [r3, #116]	@ 0x74
 8007efc:	4a1b      	ldr	r2, [pc, #108]	@ (8007f6c <HAL_UART_MspInit+0x1e8>)
 8007efe:	687b      	ldr	r3, [r7, #4]
 8007f00:	6293      	str	r3, [r2, #40]	@ 0x28
    hdma_usart1_tx.Instance = DMA1_Channel4;
 8007f02:	4b1c      	ldr	r3, [pc, #112]	@ (8007f74 <HAL_UART_MspInit+0x1f0>)
 8007f04:	4a1c      	ldr	r2, [pc, #112]	@ (8007f78 <HAL_UART_MspInit+0x1f4>)
 8007f06:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Request = DMA_REQUEST_2;
 8007f08:	4b1a      	ldr	r3, [pc, #104]	@ (8007f74 <HAL_UART_MspInit+0x1f0>)
 8007f0a:	2202      	movs	r2, #2
 8007f0c:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8007f0e:	4b19      	ldr	r3, [pc, #100]	@ (8007f74 <HAL_UART_MspInit+0x1f0>)
 8007f10:	2210      	movs	r2, #16
 8007f12:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8007f14:	4b17      	ldr	r3, [pc, #92]	@ (8007f74 <HAL_UART_MspInit+0x1f0>)
 8007f16:	2200      	movs	r2, #0
 8007f18:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8007f1a:	4b16      	ldr	r3, [pc, #88]	@ (8007f74 <HAL_UART_MspInit+0x1f0>)
 8007f1c:	2280      	movs	r2, #128	@ 0x80
 8007f1e:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8007f20:	4b14      	ldr	r3, [pc, #80]	@ (8007f74 <HAL_UART_MspInit+0x1f0>)
 8007f22:	2200      	movs	r2, #0
 8007f24:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8007f26:	4b13      	ldr	r3, [pc, #76]	@ (8007f74 <HAL_UART_MspInit+0x1f0>)
 8007f28:	2200      	movs	r2, #0
 8007f2a:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8007f2c:	4b11      	ldr	r3, [pc, #68]	@ (8007f74 <HAL_UART_MspInit+0x1f0>)
 8007f2e:	2200      	movs	r2, #0
 8007f30:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8007f32:	4b10      	ldr	r3, [pc, #64]	@ (8007f74 <HAL_UART_MspInit+0x1f0>)
 8007f34:	2200      	movs	r2, #0
 8007f36:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8007f38:	480e      	ldr	r0, [pc, #56]	@ (8007f74 <HAL_UART_MspInit+0x1f0>)
 8007f3a:	f005 f911 	bl	800d160 <HAL_DMA_Init>
 8007f3e:	4603      	mov	r3, r0
 8007f40:	2b00      	cmp	r3, #0
 8007f42:	d001      	beq.n	8007f48 <HAL_UART_MspInit+0x1c4>
      Error_Handler();
 8007f44:	f7fd face 	bl	80054e4 <Error_Handler>
    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 8007f48:	687b      	ldr	r3, [r7, #4]
 8007f4a:	4a0a      	ldr	r2, [pc, #40]	@ (8007f74 <HAL_UART_MspInit+0x1f0>)
 8007f4c:	671a      	str	r2, [r3, #112]	@ 0x70
 8007f4e:	4a09      	ldr	r2, [pc, #36]	@ (8007f74 <HAL_UART_MspInit+0x1f0>)
 8007f50:	687b      	ldr	r3, [r7, #4]
 8007f52:	6293      	str	r3, [r2, #40]	@ 0x28
}
 8007f54:	bf00      	nop
 8007f56:	37b8      	adds	r7, #184	@ 0xb8
 8007f58:	46bd      	mov	sp, r7
 8007f5a:	bd80      	pop	{r7, pc}
 8007f5c:	40004c00 	.word	0x40004c00
 8007f60:	40021000 	.word	0x40021000
 8007f64:	40013800 	.word	0x40013800
 8007f68:	48000400 	.word	0x48000400
 8007f6c:	20000544 	.word	0x20000544
 8007f70:	40020058 	.word	0x40020058
 8007f74:	2000058c 	.word	0x2000058c
 8007f78:	40020044 	.word	0x40020044

08007f7c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8007f7c:	b480      	push	{r7}
 8007f7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8007f80:	bf00      	nop
 8007f82:	e7fd      	b.n	8007f80 <NMI_Handler+0x4>

08007f84 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8007f84:	b480      	push	{r7}
 8007f86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8007f88:	bf00      	nop
 8007f8a:	e7fd      	b.n	8007f88 <HardFault_Handler+0x4>

08007f8c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8007f8c:	b480      	push	{r7}
 8007f8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8007f90:	bf00      	nop
 8007f92:	e7fd      	b.n	8007f90 <MemManage_Handler+0x4>

08007f94 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8007f94:	b480      	push	{r7}
 8007f96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8007f98:	bf00      	nop
 8007f9a:	e7fd      	b.n	8007f98 <BusFault_Handler+0x4>

08007f9c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8007f9c:	b480      	push	{r7}
 8007f9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8007fa0:	bf00      	nop
 8007fa2:	e7fd      	b.n	8007fa0 <UsageFault_Handler+0x4>

08007fa4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8007fa4:	b480      	push	{r7}
 8007fa6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8007fa8:	bf00      	nop
 8007faa:	46bd      	mov	sp, r7
 8007fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fb0:	4770      	bx	lr

08007fb2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8007fb2:	b480      	push	{r7}
 8007fb4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8007fb6:	bf00      	nop
 8007fb8:	46bd      	mov	sp, r7
 8007fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fbe:	4770      	bx	lr

08007fc0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8007fc0:	b480      	push	{r7}
 8007fc2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8007fc4:	bf00      	nop
 8007fc6:	46bd      	mov	sp, r7
 8007fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fcc:	4770      	bx	lr

08007fce <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8007fce:	b580      	push	{r7, lr}
 8007fd0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8007fd2:	f003 f983 	bl	800b2dc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8007fd6:	bf00      	nop
 8007fd8:	bd80      	pop	{r7, pc}
	...

08007fdc <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8007fdc:	b580      	push	{r7, lr}
 8007fde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8007fe0:	4802      	ldr	r0, [pc, #8]	@ (8007fec <DMA1_Channel1_IRQHandler+0x10>)
 8007fe2:	f005 fa13 	bl	800d40c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8007fe6:	bf00      	nop
 8007fe8:	bd80      	pop	{r7, pc}
 8007fea:	bf00      	nop
 8007fec:	20000114 	.word	0x20000114

08007ff0 <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 8007ff0:	b580      	push	{r7, lr}
 8007ff2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8007ff4:	4802      	ldr	r0, [pc, #8]	@ (8008000 <DMA1_Channel4_IRQHandler+0x10>)
 8007ff6:	f005 fa09 	bl	800d40c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 8007ffa:	bf00      	nop
 8007ffc:	bd80      	pop	{r7, pc}
 8007ffe:	bf00      	nop
 8008000:	2000058c 	.word	0x2000058c

08008004 <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 8008004:	b580      	push	{r7, lr}
 8008006:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8008008:	4802      	ldr	r0, [pc, #8]	@ (8008014 <DMA1_Channel5_IRQHandler+0x10>)
 800800a:	f005 f9ff 	bl	800d40c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 800800e:	bf00      	nop
 8008010:	bd80      	pop	{r7, pc}
 8008012:	bf00      	nop
 8008014:	20000544 	.word	0x20000544

08008018 <RTC_Alarm_IRQHandler>:

/**
  * @brief This function handles RTC alarm interrupt through EXTI line 18.
  */
void RTC_Alarm_IRQHandler(void)
{
 8008018:	b580      	push	{r7, lr}
 800801a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_Alarm_IRQn 0 */

  /* USER CODE END RTC_Alarm_IRQn 0 */
  HAL_RTC_AlarmIRQHandler(&hrtc);
 800801c:	4802      	ldr	r0, [pc, #8]	@ (8008028 <RTC_Alarm_IRQHandler+0x10>)
 800801e:	f009 fc2d 	bl	801187c <HAL_RTC_AlarmIRQHandler>
  /* USER CODE BEGIN RTC_Alarm_IRQn 1 */

  /* USER CODE END RTC_Alarm_IRQn 1 */
}
 8008022:	bf00      	nop
 8008024:	bd80      	pop	{r7, pc}
 8008026:	bf00      	nop
 8008028:	20000218 	.word	0x20000218

0800802c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800802c:	b580      	push	{r7, lr}
 800802e:	b086      	sub	sp, #24
 8008030:	af00      	add	r7, sp, #0
 8008032:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8008034:	4a14      	ldr	r2, [pc, #80]	@ (8008088 <_sbrk+0x5c>)
 8008036:	4b15      	ldr	r3, [pc, #84]	@ (800808c <_sbrk+0x60>)
 8008038:	1ad3      	subs	r3, r2, r3
 800803a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800803c:	697b      	ldr	r3, [r7, #20]
 800803e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8008040:	4b13      	ldr	r3, [pc, #76]	@ (8008090 <_sbrk+0x64>)
 8008042:	681b      	ldr	r3, [r3, #0]
 8008044:	2b00      	cmp	r3, #0
 8008046:	d102      	bne.n	800804e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8008048:	4b11      	ldr	r3, [pc, #68]	@ (8008090 <_sbrk+0x64>)
 800804a:	4a12      	ldr	r2, [pc, #72]	@ (8008094 <_sbrk+0x68>)
 800804c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800804e:	4b10      	ldr	r3, [pc, #64]	@ (8008090 <_sbrk+0x64>)
 8008050:	681a      	ldr	r2, [r3, #0]
 8008052:	687b      	ldr	r3, [r7, #4]
 8008054:	4413      	add	r3, r2
 8008056:	693a      	ldr	r2, [r7, #16]
 8008058:	429a      	cmp	r2, r3
 800805a:	d207      	bcs.n	800806c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800805c:	f00e fa6a 	bl	8016534 <__errno>
 8008060:	4603      	mov	r3, r0
 8008062:	220c      	movs	r2, #12
 8008064:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8008066:	f04f 33ff 	mov.w	r3, #4294967295
 800806a:	e009      	b.n	8008080 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800806c:	4b08      	ldr	r3, [pc, #32]	@ (8008090 <_sbrk+0x64>)
 800806e:	681b      	ldr	r3, [r3, #0]
 8008070:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8008072:	4b07      	ldr	r3, [pc, #28]	@ (8008090 <_sbrk+0x64>)
 8008074:	681a      	ldr	r2, [r3, #0]
 8008076:	687b      	ldr	r3, [r7, #4]
 8008078:	4413      	add	r3, r2
 800807a:	4a05      	ldr	r2, [pc, #20]	@ (8008090 <_sbrk+0x64>)
 800807c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800807e:	68fb      	ldr	r3, [r7, #12]
}
 8008080:	4618      	mov	r0, r3
 8008082:	3718      	adds	r7, #24
 8008084:	46bd      	mov	sp, r7
 8008086:	bd80      	pop	{r7, pc}
 8008088:	20018000 	.word	0x20018000
 800808c:	00000400 	.word	0x00000400
 8008090:	20005c4c 	.word	0x20005c4c
 8008094:	20005da8 	.word	0x20005da8

08008098 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8008098:	b480      	push	{r7}
 800809a:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 800809c:	4b06      	ldr	r3, [pc, #24]	@ (80080b8 <SystemInit+0x20>)
 800809e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80080a2:	4a05      	ldr	r2, [pc, #20]	@ (80080b8 <SystemInit+0x20>)
 80080a4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80080a8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 80080ac:	bf00      	nop
 80080ae:	46bd      	mov	sp, r7
 80080b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080b4:	4770      	bx	lr
 80080b6:	bf00      	nop
 80080b8:	e000ed00 	.word	0xe000ed00

080080bc <disk_status>:
/*-----------------------------------------------------------------------*/

DSTATUS disk_status (
	BYTE pdrv		/* Physical drive nmuber to identify the drive */
)
{
 80080bc:	b580      	push	{r7, lr}
 80080be:	b084      	sub	sp, #16
 80080c0:	af00      	add	r7, sp, #0
 80080c2:	4603      	mov	r3, r0
 80080c4:	71fb      	strb	r3, [r7, #7]
	DSTATUS stat;

	switch (pdrv) {
 80080c6:	79fb      	ldrb	r3, [r7, #7]
 80080c8:	2b00      	cmp	r3, #0
 80080ca:	d002      	beq.n	80080d2 <disk_status+0x16>
 80080cc:	2b01      	cmp	r3, #1
 80080ce:	d00c      	beq.n	80080ea <disk_status+0x2e>
 80080d0:	e017      	b.n	8008102 <disk_status+0x46>
	case DEV_RAM :

		if(!psram_is_initialized())
 80080d2:	f7ff fa9b 	bl	800760c <psram_is_initialized>
 80080d6:	4603      	mov	r3, r0
 80080d8:	2b00      	cmp	r3, #0
 80080da:	d102      	bne.n	80080e2 <disk_status+0x26>
		{
			stat = STA_NOINIT;
 80080dc:	2301      	movs	r3, #1
 80080de:	73fb      	strb	r3, [r7, #15]
 80080e0:	e001      	b.n	80080e6 <disk_status+0x2a>
		}else{
			stat = 0;
 80080e2:	2300      	movs	r3, #0
 80080e4:	73fb      	strb	r3, [r7, #15]
		}

		return stat;
 80080e6:	7bfb      	ldrb	r3, [r7, #15]
 80080e8:	e00c      	b.n	8008104 <disk_status+0x48>

	case DEV_MMC :

		if(!extflash_is_initialized())
 80080ea:	f7fb f857 	bl	800319c <extflash_is_initialized>
 80080ee:	4603      	mov	r3, r0
 80080f0:	2b00      	cmp	r3, #0
 80080f2:	d102      	bne.n	80080fa <disk_status+0x3e>
		{
			stat = STA_NOINIT;
 80080f4:	2301      	movs	r3, #1
 80080f6:	73fb      	strb	r3, [r7, #15]
 80080f8:	e001      	b.n	80080fe <disk_status+0x42>
		}else{
			stat = 0;
 80080fa:	2300      	movs	r3, #0
 80080fc:	73fb      	strb	r3, [r7, #15]
		}

		return stat;
 80080fe:	7bfb      	ldrb	r3, [r7, #15]
 8008100:	e000      	b.n	8008104 <disk_status+0x48>

	}
	return STA_NOINIT;
 8008102:	2301      	movs	r3, #1
}
 8008104:	4618      	mov	r0, r3
 8008106:	3710      	adds	r7, #16
 8008108:	46bd      	mov	sp, r7
 800810a:	bd80      	pop	{r7, pc}

0800810c <disk_initialize>:
/*-----------------------------------------------------------------------*/

DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 800810c:	b580      	push	{r7, lr}
 800810e:	b084      	sub	sp, #16
 8008110:	af00      	add	r7, sp, #0
 8008112:	4603      	mov	r3, r0
 8008114:	71fb      	strb	r3, [r7, #7]
	DSTATUS stat;
	switch (pdrv) {
 8008116:	79fb      	ldrb	r3, [r7, #7]
 8008118:	2b00      	cmp	r3, #0
 800811a:	d002      	beq.n	8008122 <disk_initialize+0x16>
 800811c:	2b01      	cmp	r3, #1
 800811e:	d00c      	beq.n	800813a <disk_initialize+0x2e>
 8008120:	e017      	b.n	8008152 <disk_initialize+0x46>
	case DEV_RAM :

		if(psram_init() < 0)
 8008122:	f7ff faa1 	bl	8007668 <psram_init>
 8008126:	4603      	mov	r3, r0
 8008128:	2b00      	cmp	r3, #0
 800812a:	da02      	bge.n	8008132 <disk_initialize+0x26>
		{
			stat = STA_NODISK;
 800812c:	2302      	movs	r3, #2
 800812e:	73fb      	strb	r3, [r7, #15]
 8008130:	e001      	b.n	8008136 <disk_initialize+0x2a>
		}else{
			stat = 0;
 8008132:	2300      	movs	r3, #0
 8008134:	73fb      	strb	r3, [r7, #15]
		}

		return stat;
 8008136:	7bfb      	ldrb	r3, [r7, #15]
 8008138:	e00c      	b.n	8008154 <disk_initialize+0x48>

	case DEV_MMC :

		if(extflash_init() < 0)
 800813a:	f7fb f83b 	bl	80031b4 <extflash_init>
 800813e:	4603      	mov	r3, r0
 8008140:	2b00      	cmp	r3, #0
 8008142:	da02      	bge.n	800814a <disk_initialize+0x3e>
		{
			stat = STA_NODISK;
 8008144:	2302      	movs	r3, #2
 8008146:	73fb      	strb	r3, [r7, #15]
 8008148:	e001      	b.n	800814e <disk_initialize+0x42>
		}else{
			stat = 0;
 800814a:	2300      	movs	r3, #0
 800814c:	73fb      	strb	r3, [r7, #15]
		}

		return stat;
 800814e:	7bfb      	ldrb	r3, [r7, #15]
 8008150:	e000      	b.n	8008154 <disk_initialize+0x48>

	}
	return STA_NOINIT;
 8008152:	2301      	movs	r3, #1
}
 8008154:	4618      	mov	r0, r3
 8008156:	3710      	adds	r7, #16
 8008158:	46bd      	mov	sp, r7
 800815a:	bd80      	pop	{r7, pc}

0800815c <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	LBA_t sector,	/* Start sector in LBA */
	UINT count		/* Number of sectors to read */
)
{
 800815c:	b580      	push	{r7, lr}
 800815e:	b086      	sub	sp, #24
 8008160:	af00      	add	r7, sp, #0
 8008162:	60b9      	str	r1, [r7, #8]
 8008164:	607a      	str	r2, [r7, #4]
 8008166:	603b      	str	r3, [r7, #0]
 8008168:	4603      	mov	r3, r0
 800816a:	73fb      	strb	r3, [r7, #15]
	DRESULT res;
	int result;

	switch (pdrv) {
 800816c:	7bfb      	ldrb	r3, [r7, #15]
 800816e:	2b00      	cmp	r3, #0
 8008170:	d002      	beq.n	8008178 <disk_read+0x1c>
 8008172:	2b01      	cmp	r3, #1
 8008174:	d010      	beq.n	8008198 <disk_read+0x3c>
 8008176:	e01e      	b.n	80081b6 <disk_read+0x5a>
	case DEV_RAM :

		if(psram_sector_read_write(0, sector, count, buff) < 0)
 8008178:	68bb      	ldr	r3, [r7, #8]
 800817a:	683a      	ldr	r2, [r7, #0]
 800817c:	6879      	ldr	r1, [r7, #4]
 800817e:	2000      	movs	r0, #0
 8008180:	f7ff f94a 	bl	8007418 <psram_sector_read_write>
 8008184:	4603      	mov	r3, r0
 8008186:	2b00      	cmp	r3, #0
 8008188:	da02      	bge.n	8008190 <disk_read+0x34>
		{
			res = RES_ERROR;
 800818a:	2301      	movs	r3, #1
 800818c:	75fb      	strb	r3, [r7, #23]
 800818e:	e001      	b.n	8008194 <disk_read+0x38>
		}else{

			res = 0;
 8008190:	2300      	movs	r3, #0
 8008192:	75fb      	strb	r3, [r7, #23]
		}

		return res;
 8008194:	7dfb      	ldrb	r3, [r7, #23]
 8008196:	e00f      	b.n	80081b8 <disk_read+0x5c>

	case DEV_MMC :

		if(extflash_sector_read(sector, count, buff) < 0)
 8008198:	68ba      	ldr	r2, [r7, #8]
 800819a:	6839      	ldr	r1, [r7, #0]
 800819c:	6878      	ldr	r0, [r7, #4]
 800819e:	f7fa fee1 	bl	8002f64 <extflash_sector_read>
 80081a2:	4603      	mov	r3, r0
 80081a4:	2b00      	cmp	r3, #0
 80081a6:	da02      	bge.n	80081ae <disk_read+0x52>
		{
			res = RES_ERROR;
 80081a8:	2301      	movs	r3, #1
 80081aa:	75fb      	strb	r3, [r7, #23]
 80081ac:	e001      	b.n	80081b2 <disk_read+0x56>
		}else{

			res = 0;
 80081ae:	2300      	movs	r3, #0
 80081b0:	75fb      	strb	r3, [r7, #23]
		}

		return res;
 80081b2:	7dfb      	ldrb	r3, [r7, #23]
 80081b4:	e000      	b.n	80081b8 <disk_read+0x5c>

	}

	return RES_PARERR;
 80081b6:	2304      	movs	r3, #4
}
 80081b8:	4618      	mov	r0, r3
 80081ba:	3718      	adds	r7, #24
 80081bc:	46bd      	mov	sp, r7
 80081be:	bd80      	pop	{r7, pc}

080081c0 <disk_write>:
	BYTE pdrv,			/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	LBA_t sector,		/* Start sector in LBA */
	UINT count			/* Number of sectors to write */
)
{
 80081c0:	b580      	push	{r7, lr}
 80081c2:	b086      	sub	sp, #24
 80081c4:	af00      	add	r7, sp, #0
 80081c6:	60b9      	str	r1, [r7, #8]
 80081c8:	607a      	str	r2, [r7, #4]
 80081ca:	603b      	str	r3, [r7, #0]
 80081cc:	4603      	mov	r3, r0
 80081ce:	73fb      	strb	r3, [r7, #15]
	DRESULT res = RES_ERROR;
 80081d0:	2301      	movs	r3, #1
 80081d2:	75fb      	strb	r3, [r7, #23]

	switch (pdrv) {
 80081d4:	7bfb      	ldrb	r3, [r7, #15]
 80081d6:	2b00      	cmp	r3, #0
 80081d8:	d002      	beq.n	80081e0 <disk_write+0x20>
 80081da:	2b01      	cmp	r3, #1
 80081dc:	d010      	beq.n	8008200 <disk_write+0x40>
 80081de:	e01e      	b.n	800821e <disk_write+0x5e>
	case DEV_RAM :

		if(psram_sector_read_write(1, sector, count, (const uint8_t *)buff) < 0)
 80081e0:	68bb      	ldr	r3, [r7, #8]
 80081e2:	683a      	ldr	r2, [r7, #0]
 80081e4:	6879      	ldr	r1, [r7, #4]
 80081e6:	2001      	movs	r0, #1
 80081e8:	f7ff f916 	bl	8007418 <psram_sector_read_write>
 80081ec:	4603      	mov	r3, r0
 80081ee:	2b00      	cmp	r3, #0
 80081f0:	da02      	bge.n	80081f8 <disk_write+0x38>
		{
			res = RES_ERROR;
 80081f2:	2301      	movs	r3, #1
 80081f4:	75fb      	strb	r3, [r7, #23]
 80081f6:	e001      	b.n	80081fc <disk_write+0x3c>
		}else{

			res = 0;
 80081f8:	2300      	movs	r3, #0
 80081fa:	75fb      	strb	r3, [r7, #23]
		}

		return res;
 80081fc:	7dfb      	ldrb	r3, [r7, #23]
 80081fe:	e00f      	b.n	8008220 <disk_write+0x60>

	case DEV_MMC :

		if(extflash_sector_write(sector, count, buff) < 0)
 8008200:	68ba      	ldr	r2, [r7, #8]
 8008202:	6839      	ldr	r1, [r7, #0]
 8008204:	6878      	ldr	r0, [r7, #4]
 8008206:	f7fa ff42 	bl	800308e <extflash_sector_write>
 800820a:	4603      	mov	r3, r0
 800820c:	2b00      	cmp	r3, #0
 800820e:	da02      	bge.n	8008216 <disk_write+0x56>
		{
			res = RES_ERROR;
 8008210:	2301      	movs	r3, #1
 8008212:	75fb      	strb	r3, [r7, #23]
 8008214:	e001      	b.n	800821a <disk_write+0x5a>
		}else{

			res = 0;
 8008216:	2300      	movs	r3, #0
 8008218:	75fb      	strb	r3, [r7, #23]
		}

		return res;
 800821a:	7dfb      	ldrb	r3, [r7, #23]
 800821c:	e000      	b.n	8008220 <disk_write+0x60>

	}

	return RES_PARERR;
 800821e:	2304      	movs	r3, #4
}
 8008220:	4618      	mov	r0, r3
 8008222:	3718      	adds	r7, #24
 8008224:	46bd      	mov	sp, r7
 8008226:	bd80      	pop	{r7, pc}

08008228 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 8008228:	b580      	push	{r7, lr}
 800822a:	b084      	sub	sp, #16
 800822c:	af00      	add	r7, sp, #0
 800822e:	4603      	mov	r3, r0
 8008230:	603a      	str	r2, [r7, #0]
 8008232:	71fb      	strb	r3, [r7, #7]
 8008234:	460b      	mov	r3, r1
 8008236:	71bb      	strb	r3, [r7, #6]
	DRESULT res = RES_PARERR;
 8008238:	2304      	movs	r3, #4
 800823a:	73fb      	strb	r3, [r7, #15]

	switch (pdrv) {
 800823c:	79fb      	ldrb	r3, [r7, #7]
 800823e:	2b00      	cmp	r3, #0
 8008240:	d002      	beq.n	8008248 <disk_ioctl+0x20>
 8008242:	2b01      	cmp	r3, #1
 8008244:	d036      	beq.n	80082b4 <disk_ioctl+0x8c>
 8008246:	e06b      	b.n	8008320 <disk_ioctl+0xf8>
	case DEV_RAM :

		if(!psram_is_initialized())return RES_NOTRDY;
 8008248:	f7ff f9e0 	bl	800760c <psram_is_initialized>
 800824c:	4603      	mov	r3, r0
 800824e:	2b00      	cmp	r3, #0
 8008250:	d101      	bne.n	8008256 <disk_ioctl+0x2e>
 8008252:	2303      	movs	r3, #3
 8008254:	e065      	b.n	8008322 <disk_ioctl+0xfa>

		switch(cmd)
 8008256:	79bb      	ldrb	r3, [r7, #6]
 8008258:	2b04      	cmp	r3, #4
 800825a:	d826      	bhi.n	80082aa <disk_ioctl+0x82>
 800825c:	a201      	add	r2, pc, #4	@ (adr r2, 8008264 <disk_ioctl+0x3c>)
 800825e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008262:	bf00      	nop
 8008264:	080082a5 	.word	0x080082a5
 8008268:	08008279 	.word	0x08008279
 800826c:	08008289 	.word	0x08008289
 8008270:	08008299 	.word	0x08008299
 8008274:	080082a5 	.word	0x080082a5
		{
			case GET_SECTOR_COUNT:

				*((uint32_t *)buff) = psram_get_sector_count();
 8008278:	f7ff f9de 	bl	8007638 <psram_get_sector_count>
 800827c:	4602      	mov	r2, r0
 800827e:	683b      	ldr	r3, [r7, #0]
 8008280:	601a      	str	r2, [r3, #0]
				res = 0;
 8008282:	2300      	movs	r3, #0
 8008284:	73fb      	strb	r3, [r7, #15]
				break;
 8008286:	e013      	b.n	80082b0 <disk_ioctl+0x88>

			case GET_SECTOR_SIZE:

				*((uint32_t *)buff) = psram_get_sector_size();
 8008288:	f7ff f9cc 	bl	8007624 <psram_get_sector_size>
 800828c:	4602      	mov	r2, r0
 800828e:	683b      	ldr	r3, [r7, #0]
 8008290:	601a      	str	r2, [r3, #0]
				res = 0;
 8008292:	2300      	movs	r3, #0
 8008294:	73fb      	strb	r3, [r7, #15]
				break;
 8008296:	e00b      	b.n	80082b0 <disk_ioctl+0x88>

			case GET_BLOCK_SIZE:

				*((uint32_t *)buff) = 1; //Default
 8008298:	683b      	ldr	r3, [r7, #0]
 800829a:	2201      	movs	r2, #1
 800829c:	601a      	str	r2, [r3, #0]
				res = 0;
 800829e:	2300      	movs	r3, #0
 80082a0:	73fb      	strb	r3, [r7, #15]
				break;
 80082a2:	e005      	b.n	80082b0 <disk_ioctl+0x88>

			case CTRL_TRIM:
			case CTRL_SYNC:

				res = 0;
 80082a4:	2300      	movs	r3, #0
 80082a6:	73fb      	strb	r3, [r7, #15]
				break;
 80082a8:	e002      	b.n	80082b0 <disk_ioctl+0x88>

			default:
				res = RES_PARERR;
 80082aa:	2304      	movs	r3, #4
 80082ac:	73fb      	strb	r3, [r7, #15]
				break;
 80082ae:	bf00      	nop
		}

		return res;
 80082b0:	7bfb      	ldrb	r3, [r7, #15]
 80082b2:	e036      	b.n	8008322 <disk_ioctl+0xfa>

	case DEV_MMC :

		if(!extflash_is_initialized())return RES_NOTRDY;
 80082b4:	f7fa ff72 	bl	800319c <extflash_is_initialized>
 80082b8:	4603      	mov	r3, r0
 80082ba:	2b00      	cmp	r3, #0
 80082bc:	d101      	bne.n	80082c2 <disk_ioctl+0x9a>
 80082be:	2303      	movs	r3, #3
 80082c0:	e02f      	b.n	8008322 <disk_ioctl+0xfa>

		switch(cmd)
 80082c2:	79bb      	ldrb	r3, [r7, #6]
 80082c4:	2b04      	cmp	r3, #4
 80082c6:	d826      	bhi.n	8008316 <disk_ioctl+0xee>
 80082c8:	a201      	add	r2, pc, #4	@ (adr r2, 80082d0 <disk_ioctl+0xa8>)
 80082ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80082ce:	bf00      	nop
 80082d0:	08008311 	.word	0x08008311
 80082d4:	080082e5 	.word	0x080082e5
 80082d8:	080082f5 	.word	0x080082f5
 80082dc:	08008305 	.word	0x08008305
 80082e0:	08008311 	.word	0x08008311
		{
			case GET_SECTOR_COUNT:

				*((uint32_t *)buff) = extflash_get_sector_count();
 80082e4:	f7fa ff4e 	bl	8003184 <extflash_get_sector_count>
 80082e8:	4602      	mov	r2, r0
 80082ea:	683b      	ldr	r3, [r7, #0]
 80082ec:	601a      	str	r2, [r3, #0]
				res = 0;
 80082ee:	2300      	movs	r3, #0
 80082f0:	73fb      	strb	r3, [r7, #15]
				break;
 80082f2:	e013      	b.n	800831c <disk_ioctl+0xf4>

			case GET_SECTOR_SIZE:

				*((uint32_t *)buff) = extflash_get_sector_size();
 80082f4:	f7fa ff3d 	bl	8003172 <extflash_get_sector_size>
 80082f8:	4602      	mov	r2, r0
 80082fa:	683b      	ldr	r3, [r7, #0]
 80082fc:	601a      	str	r2, [r3, #0]
				res = 0;
 80082fe:	2300      	movs	r3, #0
 8008300:	73fb      	strb	r3, [r7, #15]
				break;
 8008302:	e00b      	b.n	800831c <disk_ioctl+0xf4>

			case GET_BLOCK_SIZE:

				*((uint32_t *)buff) = 1; //Default
 8008304:	683b      	ldr	r3, [r7, #0]
 8008306:	2201      	movs	r2, #1
 8008308:	601a      	str	r2, [r3, #0]
				res = 0;
 800830a:	2300      	movs	r3, #0
 800830c:	73fb      	strb	r3, [r7, #15]
				break;
 800830e:	e005      	b.n	800831c <disk_ioctl+0xf4>

			case CTRL_TRIM:
			case CTRL_SYNC:

				res = 0;
 8008310:	2300      	movs	r3, #0
 8008312:	73fb      	strb	r3, [r7, #15]
				break;
 8008314:	e002      	b.n	800831c <disk_ioctl+0xf4>

			default:
				res = RES_PARERR;
 8008316:	2304      	movs	r3, #4
 8008318:	73fb      	strb	r3, [r7, #15]
				break;
 800831a:	bf00      	nop
		}

		return res;
 800831c:	7bfb      	ldrb	r3, [r7, #15]
 800831e:	e000      	b.n	8008322 <disk_ioctl+0xfa>

	}

	return RES_PARERR;
 8008320:	2304      	movs	r3, #4
}
 8008322:	4618      	mov	r0, r3
 8008324:	3710      	adds	r7, #16
 8008326:	46bd      	mov	sp, r7
 8008328:	bd80      	pop	{r7, pc}
 800832a:	bf00      	nop

0800832c <ld_word>:
/*-----------------------------------------------------------------------*/
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 800832c:	b480      	push	{r7}
 800832e:	b085      	sub	sp, #20
 8008330:	af00      	add	r7, sp, #0
 8008332:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 8008334:	687b      	ldr	r3, [r7, #4]
 8008336:	3301      	adds	r3, #1
 8008338:	781b      	ldrb	r3, [r3, #0]
 800833a:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 800833c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8008340:	021b      	lsls	r3, r3, #8
 8008342:	b21a      	sxth	r2, r3
 8008344:	687b      	ldr	r3, [r7, #4]
 8008346:	781b      	ldrb	r3, [r3, #0]
 8008348:	b21b      	sxth	r3, r3
 800834a:	4313      	orrs	r3, r2
 800834c:	b21b      	sxth	r3, r3
 800834e:	81fb      	strh	r3, [r7, #14]
	return rv;
 8008350:	89fb      	ldrh	r3, [r7, #14]
}
 8008352:	4618      	mov	r0, r3
 8008354:	3714      	adds	r7, #20
 8008356:	46bd      	mov	sp, r7
 8008358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800835c:	4770      	bx	lr

0800835e <ld_dword>:

static DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 800835e:	b480      	push	{r7}
 8008360:	b085      	sub	sp, #20
 8008362:	af00      	add	r7, sp, #0
 8008364:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 8008366:	687b      	ldr	r3, [r7, #4]
 8008368:	3303      	adds	r3, #3
 800836a:	781b      	ldrb	r3, [r3, #0]
 800836c:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 800836e:	68fb      	ldr	r3, [r7, #12]
 8008370:	021b      	lsls	r3, r3, #8
 8008372:	687a      	ldr	r2, [r7, #4]
 8008374:	3202      	adds	r2, #2
 8008376:	7812      	ldrb	r2, [r2, #0]
 8008378:	4313      	orrs	r3, r2
 800837a:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 800837c:	68fb      	ldr	r3, [r7, #12]
 800837e:	021b      	lsls	r3, r3, #8
 8008380:	687a      	ldr	r2, [r7, #4]
 8008382:	3201      	adds	r2, #1
 8008384:	7812      	ldrb	r2, [r2, #0]
 8008386:	4313      	orrs	r3, r2
 8008388:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 800838a:	68fb      	ldr	r3, [r7, #12]
 800838c:	021b      	lsls	r3, r3, #8
 800838e:	687a      	ldr	r2, [r7, #4]
 8008390:	7812      	ldrb	r2, [r2, #0]
 8008392:	4313      	orrs	r3, r2
 8008394:	60fb      	str	r3, [r7, #12]
	return rv;
 8008396:	68fb      	ldr	r3, [r7, #12]
}
 8008398:	4618      	mov	r0, r3
 800839a:	3714      	adds	r7, #20
 800839c:	46bd      	mov	sp, r7
 800839e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083a2:	4770      	bx	lr

080083a4 <st_word>:
}
#endif

#if !FF_FS_READONLY
static void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 80083a4:	b480      	push	{r7}
 80083a6:	b083      	sub	sp, #12
 80083a8:	af00      	add	r7, sp, #0
 80083aa:	6078      	str	r0, [r7, #4]
 80083ac:	460b      	mov	r3, r1
 80083ae:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 80083b0:	687b      	ldr	r3, [r7, #4]
 80083b2:	1c5a      	adds	r2, r3, #1
 80083b4:	607a      	str	r2, [r7, #4]
 80083b6:	887a      	ldrh	r2, [r7, #2]
 80083b8:	b2d2      	uxtb	r2, r2
 80083ba:	701a      	strb	r2, [r3, #0]
 80083bc:	887b      	ldrh	r3, [r7, #2]
 80083be:	0a1b      	lsrs	r3, r3, #8
 80083c0:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 80083c2:	687b      	ldr	r3, [r7, #4]
 80083c4:	1c5a      	adds	r2, r3, #1
 80083c6:	607a      	str	r2, [r7, #4]
 80083c8:	887a      	ldrh	r2, [r7, #2]
 80083ca:	b2d2      	uxtb	r2, r2
 80083cc:	701a      	strb	r2, [r3, #0]
}
 80083ce:	bf00      	nop
 80083d0:	370c      	adds	r7, #12
 80083d2:	46bd      	mov	sp, r7
 80083d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083d8:	4770      	bx	lr

080083da <st_dword>:

static void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 80083da:	b480      	push	{r7}
 80083dc:	b083      	sub	sp, #12
 80083de:	af00      	add	r7, sp, #0
 80083e0:	6078      	str	r0, [r7, #4]
 80083e2:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 80083e4:	687b      	ldr	r3, [r7, #4]
 80083e6:	1c5a      	adds	r2, r3, #1
 80083e8:	607a      	str	r2, [r7, #4]
 80083ea:	683a      	ldr	r2, [r7, #0]
 80083ec:	b2d2      	uxtb	r2, r2
 80083ee:	701a      	strb	r2, [r3, #0]
 80083f0:	683b      	ldr	r3, [r7, #0]
 80083f2:	0a1b      	lsrs	r3, r3, #8
 80083f4:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 80083f6:	687b      	ldr	r3, [r7, #4]
 80083f8:	1c5a      	adds	r2, r3, #1
 80083fa:	607a      	str	r2, [r7, #4]
 80083fc:	683a      	ldr	r2, [r7, #0]
 80083fe:	b2d2      	uxtb	r2, r2
 8008400:	701a      	strb	r2, [r3, #0]
 8008402:	683b      	ldr	r3, [r7, #0]
 8008404:	0a1b      	lsrs	r3, r3, #8
 8008406:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8008408:	687b      	ldr	r3, [r7, #4]
 800840a:	1c5a      	adds	r2, r3, #1
 800840c:	607a      	str	r2, [r7, #4]
 800840e:	683a      	ldr	r2, [r7, #0]
 8008410:	b2d2      	uxtb	r2, r2
 8008412:	701a      	strb	r2, [r3, #0]
 8008414:	683b      	ldr	r3, [r7, #0]
 8008416:	0a1b      	lsrs	r3, r3, #8
 8008418:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 800841a:	687b      	ldr	r3, [r7, #4]
 800841c:	1c5a      	adds	r2, r3, #1
 800841e:	607a      	str	r2, [r7, #4]
 8008420:	683a      	ldr	r2, [r7, #0]
 8008422:	b2d2      	uxtb	r2, r2
 8008424:	701a      	strb	r2, [r3, #0]
}
 8008426:	bf00      	nop
 8008428:	370c      	adds	r7, #12
 800842a:	46bd      	mov	sp, r7
 800842c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008430:	4770      	bx	lr

08008432 <dbc_1st>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Test if the byte is DBC 1st byte */
static int dbc_1st (BYTE c)
{
 8008432:	b480      	push	{r7}
 8008434:	b083      	sub	sp, #12
 8008436:	af00      	add	r7, sp, #0
 8008438:	4603      	mov	r3, r0
 800843a:	71fb      	strb	r3, [r7, #7]
	if (c >= DbcTbl[0]) {
		if (c <= DbcTbl[1]) return 1;
		if (c >= DbcTbl[2] && c <= DbcTbl[3]) return 1;
	}
#else						/* SBCS fixed code page */
	if (c != 0) return 0;	/* Always false */
 800843c:	79fb      	ldrb	r3, [r7, #7]
 800843e:	2b00      	cmp	r3, #0
 8008440:	d001      	beq.n	8008446 <dbc_1st+0x14>
 8008442:	2300      	movs	r3, #0
 8008444:	e000      	b.n	8008448 <dbc_1st+0x16>
#endif
	return 0;
 8008446:	2300      	movs	r3, #0
}
 8008448:	4618      	mov	r0, r3
 800844a:	370c      	adds	r7, #12
 800844c:	46bd      	mov	sp, r7
 800844e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008452:	4770      	bx	lr

08008454 <dbc_2nd>:


/* Test if the byte is DBC 2nd byte */
static int dbc_2nd (BYTE c)
{
 8008454:	b480      	push	{r7}
 8008456:	b083      	sub	sp, #12
 8008458:	af00      	add	r7, sp, #0
 800845a:	4603      	mov	r3, r0
 800845c:	71fb      	strb	r3, [r7, #7]
		if (c <= DbcTbl[5]) return 1;
		if (c >= DbcTbl[6] && c <= DbcTbl[7]) return 1;
		if (c >= DbcTbl[8] && c <= DbcTbl[9]) return 1;
	}
#else						/* SBCS fixed code page */
	if (c != 0) return 0;	/* Always false */
 800845e:	79fb      	ldrb	r3, [r7, #7]
 8008460:	2b00      	cmp	r3, #0
 8008462:	d001      	beq.n	8008468 <dbc_2nd+0x14>
 8008464:	2300      	movs	r3, #0
 8008466:	e000      	b.n	800846a <dbc_2nd+0x16>
#endif
	return 0;
 8008468:	2300      	movs	r3, #0
}
 800846a:	4618      	mov	r0, r3
 800846c:	370c      	adds	r7, #12
 800846e:	46bd      	mov	sp, r7
 8008470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008474:	4770      	bx	lr

08008476 <sync_window>:
/*-----------------------------------------------------------------------*/
#if !FF_FS_READONLY
static FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERR */
	FATFS* fs			/* Filesystem object */
)
{
 8008476:	b580      	push	{r7, lr}
 8008478:	b084      	sub	sp, #16
 800847a:	af00      	add	r7, sp, #0
 800847c:	6078      	str	r0, [r7, #4]
	FRESULT res = FR_OK;
 800847e:	2300      	movs	r3, #0
 8008480:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Is the disk access window dirty? */
 8008482:	687b      	ldr	r3, [r7, #4]
 8008484:	791b      	ldrb	r3, [r3, #4]
 8008486:	2b00      	cmp	r3, #0
 8008488:	d02c      	beq.n	80084e4 <sync_window+0x6e>
		if (disk_write(fs->pdrv, fs->win, fs->winsect, 1) == RES_OK) {	/* Write it back into the volume */
 800848a:	687b      	ldr	r3, [r7, #4]
 800848c:	7858      	ldrb	r0, [r3, #1]
 800848e:	687b      	ldr	r3, [r7, #4]
 8008490:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 8008494:	687b      	ldr	r3, [r7, #4]
 8008496:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8008498:	2301      	movs	r3, #1
 800849a:	f7ff fe91 	bl	80081c0 <disk_write>
 800849e:	4603      	mov	r3, r0
 80084a0:	2b00      	cmp	r3, #0
 80084a2:	d11d      	bne.n	80084e0 <sync_window+0x6a>
			fs->wflag = 0;	/* Clear window dirty flag */
 80084a4:	687b      	ldr	r3, [r7, #4]
 80084a6:	2200      	movs	r2, #0
 80084a8:	711a      	strb	r2, [r3, #4]
			if (fs->winsect - fs->fatbase < fs->fsize) {	/* Is it in the 1st FAT? */
 80084aa:	687b      	ldr	r3, [r7, #4]
 80084ac:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80084ae:	687b      	ldr	r3, [r7, #4]
 80084b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80084b2:	1ad2      	subs	r2, r2, r3
 80084b4:	687b      	ldr	r3, [r7, #4]
 80084b6:	69db      	ldr	r3, [r3, #28]
 80084b8:	429a      	cmp	r2, r3
 80084ba:	d213      	bcs.n	80084e4 <sync_window+0x6e>
				if (fs->n_fats == 2) disk_write(fs->pdrv, fs->win, fs->winsect + fs->fsize, 1);	/* Reflect it to 2nd FAT if needed */
 80084bc:	687b      	ldr	r3, [r7, #4]
 80084be:	78db      	ldrb	r3, [r3, #3]
 80084c0:	2b02      	cmp	r3, #2
 80084c2:	d10f      	bne.n	80084e4 <sync_window+0x6e>
 80084c4:	687b      	ldr	r3, [r7, #4]
 80084c6:	7858      	ldrb	r0, [r3, #1]
 80084c8:	687b      	ldr	r3, [r7, #4]
 80084ca:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 80084ce:	687b      	ldr	r3, [r7, #4]
 80084d0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80084d2:	687b      	ldr	r3, [r7, #4]
 80084d4:	69db      	ldr	r3, [r3, #28]
 80084d6:	441a      	add	r2, r3
 80084d8:	2301      	movs	r3, #1
 80084da:	f7ff fe71 	bl	80081c0 <disk_write>
 80084de:	e001      	b.n	80084e4 <sync_window+0x6e>
			}
		} else {
			res = FR_DISK_ERR;
 80084e0:	2301      	movs	r3, #1
 80084e2:	73fb      	strb	r3, [r7, #15]
		}
	}
	return res;
 80084e4:	7bfb      	ldrb	r3, [r7, #15]
}
 80084e6:	4618      	mov	r0, r3
 80084e8:	3710      	adds	r7, #16
 80084ea:	46bd      	mov	sp, r7
 80084ec:	bd80      	pop	{r7, pc}

080084ee <move_window>:

static FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERR */
	FATFS* fs,		/* Filesystem object */
	LBA_t sect		/* Sector LBA to make appearance in the fs->win[] */
)
{
 80084ee:	b580      	push	{r7, lr}
 80084f0:	b084      	sub	sp, #16
 80084f2:	af00      	add	r7, sp, #0
 80084f4:	6078      	str	r0, [r7, #4]
 80084f6:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 80084f8:	2300      	movs	r3, #0
 80084fa:	73fb      	strb	r3, [r7, #15]


	if (sect != fs->winsect) {	/* Window offset changed? */
 80084fc:	687b      	ldr	r3, [r7, #4]
 80084fe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008500:	683a      	ldr	r2, [r7, #0]
 8008502:	429a      	cmp	r2, r3
 8008504:	d01b      	beq.n	800853e <move_window+0x50>
#if !FF_FS_READONLY
		res = sync_window(fs);		/* Flush the window */
 8008506:	6878      	ldr	r0, [r7, #4]
 8008508:	f7ff ffb5 	bl	8008476 <sync_window>
 800850c:	4603      	mov	r3, r0
 800850e:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 8008510:	7bfb      	ldrb	r3, [r7, #15]
 8008512:	2b00      	cmp	r3, #0
 8008514:	d113      	bne.n	800853e <move_window+0x50>
			if (disk_read(fs->pdrv, fs->win, sect, 1) != RES_OK) {
 8008516:	687b      	ldr	r3, [r7, #4]
 8008518:	7858      	ldrb	r0, [r3, #1]
 800851a:	687b      	ldr	r3, [r7, #4]
 800851c:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 8008520:	2301      	movs	r3, #1
 8008522:	683a      	ldr	r2, [r7, #0]
 8008524:	f7ff fe1a 	bl	800815c <disk_read>
 8008528:	4603      	mov	r3, r0
 800852a:	2b00      	cmp	r3, #0
 800852c:	d004      	beq.n	8008538 <move_window+0x4a>
				sect = (LBA_t)0 - 1;	/* Invalidate window if read data is not valid */
 800852e:	f04f 33ff 	mov.w	r3, #4294967295
 8008532:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 8008534:	2301      	movs	r3, #1
 8008536:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sect;
 8008538:	687b      	ldr	r3, [r7, #4]
 800853a:	683a      	ldr	r2, [r7, #0]
 800853c:	631a      	str	r2, [r3, #48]	@ 0x30
		}
	}
	return res;
 800853e:	7bfb      	ldrb	r3, [r7, #15]
}
 8008540:	4618      	mov	r0, r3
 8008542:	3710      	adds	r7, #16
 8008544:	46bd      	mov	sp, r7
 8008546:	bd80      	pop	{r7, pc}

08008548 <sync_fs>:
/*-----------------------------------------------------------------------*/

static FRESULT sync_fs (	/* Returns FR_OK or FR_DISK_ERR */
	FATFS* fs		/* Filesystem object */
)
{
 8008548:	b580      	push	{r7, lr}
 800854a:	b084      	sub	sp, #16
 800854c:	af00      	add	r7, sp, #0
 800854e:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 8008550:	6878      	ldr	r0, [r7, #4]
 8008552:	f7ff ff90 	bl	8008476 <sync_window>
 8008556:	4603      	mov	r3, r0
 8008558:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800855a:	7bfb      	ldrb	r3, [r7, #15]
 800855c:	2b00      	cmp	r3, #0
 800855e:	d158      	bne.n	8008612 <sync_fs+0xca>
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {	/* FAT32: Update FSInfo sector if needed */
 8008560:	687b      	ldr	r3, [r7, #4]
 8008562:	781b      	ldrb	r3, [r3, #0]
 8008564:	2b03      	cmp	r3, #3
 8008566:	d148      	bne.n	80085fa <sync_fs+0xb2>
 8008568:	687b      	ldr	r3, [r7, #4]
 800856a:	795b      	ldrb	r3, [r3, #5]
 800856c:	2b01      	cmp	r3, #1
 800856e:	d144      	bne.n	80085fa <sync_fs+0xb2>
			/* Create FSInfo structure */
			memset(fs->win, 0, sizeof fs->win);
 8008570:	687b      	ldr	r3, [r7, #4]
 8008572:	3334      	adds	r3, #52	@ 0x34
 8008574:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8008578:	2100      	movs	r1, #0
 800857a:	4618      	mov	r0, r3
 800857c:	f00d ff8a 	bl	8016494 <memset>
			st_word(fs->win + BS_55AA, 0xAA55);					/* Boot signature */
 8008580:	687b      	ldr	r3, [r7, #4]
 8008582:	3334      	adds	r3, #52	@ 0x34
 8008584:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 8008588:	f64a 2155 	movw	r1, #43605	@ 0xaa55
 800858c:	4618      	mov	r0, r3
 800858e:	f7ff ff09 	bl	80083a4 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);		/* Leading signature */
 8008592:	687b      	ldr	r3, [r7, #4]
 8008594:	3334      	adds	r3, #52	@ 0x34
 8008596:	4921      	ldr	r1, [pc, #132]	@ (800861c <sync_fs+0xd4>)
 8008598:	4618      	mov	r0, r3
 800859a:	f7ff ff1e 	bl	80083da <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);		/* Structure signature */
 800859e:	687b      	ldr	r3, [r7, #4]
 80085a0:	3334      	adds	r3, #52	@ 0x34
 80085a2:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 80085a6:	491e      	ldr	r1, [pc, #120]	@ (8008620 <sync_fs+0xd8>)
 80085a8:	4618      	mov	r0, r3
 80085aa:	f7ff ff16 	bl	80083da <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);	/* Number of free clusters */
 80085ae:	687b      	ldr	r3, [r7, #4]
 80085b0:	3334      	adds	r3, #52	@ 0x34
 80085b2:	f503 72f4 	add.w	r2, r3, #488	@ 0x1e8
 80085b6:	687b      	ldr	r3, [r7, #4]
 80085b8:	695b      	ldr	r3, [r3, #20]
 80085ba:	4619      	mov	r1, r3
 80085bc:	4610      	mov	r0, r2
 80085be:	f7ff ff0c 	bl	80083da <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);	/* Last allocated culuster */
 80085c2:	687b      	ldr	r3, [r7, #4]
 80085c4:	3334      	adds	r3, #52	@ 0x34
 80085c6:	f503 72f6 	add.w	r2, r3, #492	@ 0x1ec
 80085ca:	687b      	ldr	r3, [r7, #4]
 80085cc:	691b      	ldr	r3, [r3, #16]
 80085ce:	4619      	mov	r1, r3
 80085d0:	4610      	mov	r0, r2
 80085d2:	f7ff ff02 	bl	80083da <st_dword>
			fs->winsect = fs->volbase + 1;						/* Write it into the FSInfo sector (Next to VBR) */
 80085d6:	687b      	ldr	r3, [r7, #4]
 80085d8:	6a1b      	ldr	r3, [r3, #32]
 80085da:	1c5a      	adds	r2, r3, #1
 80085dc:	687b      	ldr	r3, [r7, #4]
 80085de:	631a      	str	r2, [r3, #48]	@ 0x30
			disk_write(fs->pdrv, fs->win, fs->winsect, 1);
 80085e0:	687b      	ldr	r3, [r7, #4]
 80085e2:	7858      	ldrb	r0, [r3, #1]
 80085e4:	687b      	ldr	r3, [r7, #4]
 80085e6:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 80085ea:	687b      	ldr	r3, [r7, #4]
 80085ec:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80085ee:	2301      	movs	r3, #1
 80085f0:	f7ff fde6 	bl	80081c0 <disk_write>
			fs->fsi_flag = 0;
 80085f4:	687b      	ldr	r3, [r7, #4]
 80085f6:	2200      	movs	r2, #0
 80085f8:	715a      	strb	r2, [r3, #5]
		}
		/* Make sure that no pending write process in the lower layer */
		if (disk_ioctl(fs->pdrv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 80085fa:	687b      	ldr	r3, [r7, #4]
 80085fc:	785b      	ldrb	r3, [r3, #1]
 80085fe:	2200      	movs	r2, #0
 8008600:	2100      	movs	r1, #0
 8008602:	4618      	mov	r0, r3
 8008604:	f7ff fe10 	bl	8008228 <disk_ioctl>
 8008608:	4603      	mov	r3, r0
 800860a:	2b00      	cmp	r3, #0
 800860c:	d001      	beq.n	8008612 <sync_fs+0xca>
 800860e:	2301      	movs	r3, #1
 8008610:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 8008612:	7bfb      	ldrb	r3, [r7, #15]
}
 8008614:	4618      	mov	r0, r3
 8008616:	3710      	adds	r7, #16
 8008618:	46bd      	mov	sp, r7
 800861a:	bd80      	pop	{r7, pc}
 800861c:	41615252 	.word	0x41615252
 8008620:	61417272 	.word	0x61417272

08008624 <clst2sect>:

static LBA_t clst2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* Filesystem object */
	DWORD clst		/* Cluster# to be converted */
)
{
 8008624:	b480      	push	{r7}
 8008626:	b083      	sub	sp, #12
 8008628:	af00      	add	r7, sp, #0
 800862a:	6078      	str	r0, [r7, #4]
 800862c:	6039      	str	r1, [r7, #0]
	clst -= 2;		/* Cluster number is origin from 2 */
 800862e:	683b      	ldr	r3, [r7, #0]
 8008630:	3b02      	subs	r3, #2
 8008632:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Is it invalid cluster number? */
 8008634:	687b      	ldr	r3, [r7, #4]
 8008636:	699b      	ldr	r3, [r3, #24]
 8008638:	3b02      	subs	r3, #2
 800863a:	683a      	ldr	r2, [r7, #0]
 800863c:	429a      	cmp	r2, r3
 800863e:	d301      	bcc.n	8008644 <clst2sect+0x20>
 8008640:	2300      	movs	r3, #0
 8008642:	e008      	b.n	8008656 <clst2sect+0x32>
	return fs->database + (LBA_t)fs->csize * clst;	/* Start sector number of the cluster */
 8008644:	687b      	ldr	r3, [r7, #4]
 8008646:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008648:	687b      	ldr	r3, [r7, #4]
 800864a:	895b      	ldrh	r3, [r3, #10]
 800864c:	4619      	mov	r1, r3
 800864e:	683b      	ldr	r3, [r7, #0]
 8008650:	fb01 f303 	mul.w	r3, r1, r3
 8008654:	4413      	add	r3, r2
}
 8008656:	4618      	mov	r0, r3
 8008658:	370c      	adds	r7, #12
 800865a:	46bd      	mov	sp, r7
 800865c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008660:	4770      	bx	lr

08008662 <get_fat>:

static DWORD get_fat (		/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	FFOBJID* obj,	/* Corresponding object */
	DWORD clst		/* Cluster number to get the value */
)
{
 8008662:	b580      	push	{r7, lr}
 8008664:	b086      	sub	sp, #24
 8008666:	af00      	add	r7, sp, #0
 8008668:	6078      	str	r0, [r7, #4]
 800866a:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 800866c:	687b      	ldr	r3, [r7, #4]
 800866e:	681b      	ldr	r3, [r3, #0]
 8008670:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 8008672:	683b      	ldr	r3, [r7, #0]
 8008674:	2b01      	cmp	r3, #1
 8008676:	d904      	bls.n	8008682 <get_fat+0x20>
 8008678:	693b      	ldr	r3, [r7, #16]
 800867a:	699b      	ldr	r3, [r3, #24]
 800867c:	683a      	ldr	r2, [r7, #0]
 800867e:	429a      	cmp	r2, r3
 8008680:	d302      	bcc.n	8008688 <get_fat+0x26>
		val = 1;	/* Internal error */
 8008682:	2301      	movs	r3, #1
 8008684:	617b      	str	r3, [r7, #20]
 8008686:	e0ba      	b.n	80087fe <get_fat+0x19c>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8008688:	f04f 33ff 	mov.w	r3, #4294967295
 800868c:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 800868e:	693b      	ldr	r3, [r7, #16]
 8008690:	781b      	ldrb	r3, [r3, #0]
 8008692:	2b03      	cmp	r3, #3
 8008694:	f000 8082 	beq.w	800879c <get_fat+0x13a>
 8008698:	2b03      	cmp	r3, #3
 800869a:	f300 80a6 	bgt.w	80087ea <get_fat+0x188>
 800869e:	2b01      	cmp	r3, #1
 80086a0:	d002      	beq.n	80086a8 <get_fat+0x46>
 80086a2:	2b02      	cmp	r3, #2
 80086a4:	d055      	beq.n	8008752 <get_fat+0xf0>
 80086a6:	e0a0      	b.n	80087ea <get_fat+0x188>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 80086a8:	683b      	ldr	r3, [r7, #0]
 80086aa:	60fb      	str	r3, [r7, #12]
 80086ac:	68fb      	ldr	r3, [r7, #12]
 80086ae:	085b      	lsrs	r3, r3, #1
 80086b0:	68fa      	ldr	r2, [r7, #12]
 80086b2:	4413      	add	r3, r2
 80086b4:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80086b6:	693b      	ldr	r3, [r7, #16]
 80086b8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80086ba:	693b      	ldr	r3, [r7, #16]
 80086bc:	899b      	ldrh	r3, [r3, #12]
 80086be:	4619      	mov	r1, r3
 80086c0:	68fb      	ldr	r3, [r7, #12]
 80086c2:	fbb3 f3f1 	udiv	r3, r3, r1
 80086c6:	4413      	add	r3, r2
 80086c8:	4619      	mov	r1, r3
 80086ca:	6938      	ldr	r0, [r7, #16]
 80086cc:	f7ff ff0f 	bl	80084ee <move_window>
 80086d0:	4603      	mov	r3, r0
 80086d2:	2b00      	cmp	r3, #0
 80086d4:	f040 808c 	bne.w	80087f0 <get_fat+0x18e>
			wc = fs->win[bc++ % SS(fs)];		/* Get 1st byte of the entry */
 80086d8:	68fb      	ldr	r3, [r7, #12]
 80086da:	1c5a      	adds	r2, r3, #1
 80086dc:	60fa      	str	r2, [r7, #12]
 80086de:	693a      	ldr	r2, [r7, #16]
 80086e0:	8992      	ldrh	r2, [r2, #12]
 80086e2:	fbb3 f1f2 	udiv	r1, r3, r2
 80086e6:	fb01 f202 	mul.w	r2, r1, r2
 80086ea:	1a9b      	subs	r3, r3, r2
 80086ec:	693a      	ldr	r2, [r7, #16]
 80086ee:	4413      	add	r3, r2
 80086f0:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 80086f4:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80086f6:	693b      	ldr	r3, [r7, #16]
 80086f8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80086fa:	693b      	ldr	r3, [r7, #16]
 80086fc:	899b      	ldrh	r3, [r3, #12]
 80086fe:	4619      	mov	r1, r3
 8008700:	68fb      	ldr	r3, [r7, #12]
 8008702:	fbb3 f3f1 	udiv	r3, r3, r1
 8008706:	4413      	add	r3, r2
 8008708:	4619      	mov	r1, r3
 800870a:	6938      	ldr	r0, [r7, #16]
 800870c:	f7ff feef 	bl	80084ee <move_window>
 8008710:	4603      	mov	r3, r0
 8008712:	2b00      	cmp	r3, #0
 8008714:	d16e      	bne.n	80087f4 <get_fat+0x192>
			wc |= fs->win[bc % SS(fs)] << 8;	/* Merge 2nd byte of the entry */
 8008716:	693b      	ldr	r3, [r7, #16]
 8008718:	899b      	ldrh	r3, [r3, #12]
 800871a:	461a      	mov	r2, r3
 800871c:	68fb      	ldr	r3, [r7, #12]
 800871e:	fbb3 f1f2 	udiv	r1, r3, r2
 8008722:	fb01 f202 	mul.w	r2, r1, r2
 8008726:	1a9b      	subs	r3, r3, r2
 8008728:	693a      	ldr	r2, [r7, #16]
 800872a:	4413      	add	r3, r2
 800872c:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8008730:	021b      	lsls	r3, r3, #8
 8008732:	68ba      	ldr	r2, [r7, #8]
 8008734:	4313      	orrs	r3, r2
 8008736:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);	/* Adjust bit position */
 8008738:	683b      	ldr	r3, [r7, #0]
 800873a:	f003 0301 	and.w	r3, r3, #1
 800873e:	2b00      	cmp	r3, #0
 8008740:	d002      	beq.n	8008748 <get_fat+0xe6>
 8008742:	68bb      	ldr	r3, [r7, #8]
 8008744:	091b      	lsrs	r3, r3, #4
 8008746:	e002      	b.n	800874e <get_fat+0xec>
 8008748:	68bb      	ldr	r3, [r7, #8]
 800874a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800874e:	617b      	str	r3, [r7, #20]
			break;
 8008750:	e055      	b.n	80087fe <get_fat+0x19c>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8008752:	693b      	ldr	r3, [r7, #16]
 8008754:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8008756:	693b      	ldr	r3, [r7, #16]
 8008758:	899b      	ldrh	r3, [r3, #12]
 800875a:	085b      	lsrs	r3, r3, #1
 800875c:	b29b      	uxth	r3, r3
 800875e:	4619      	mov	r1, r3
 8008760:	683b      	ldr	r3, [r7, #0]
 8008762:	fbb3 f3f1 	udiv	r3, r3, r1
 8008766:	4413      	add	r3, r2
 8008768:	4619      	mov	r1, r3
 800876a:	6938      	ldr	r0, [r7, #16]
 800876c:	f7ff febf 	bl	80084ee <move_window>
 8008770:	4603      	mov	r3, r0
 8008772:	2b00      	cmp	r3, #0
 8008774:	d140      	bne.n	80087f8 <get_fat+0x196>
			val = ld_word(fs->win + clst * 2 % SS(fs));		/* Simple WORD array */
 8008776:	693b      	ldr	r3, [r7, #16]
 8008778:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 800877c:	683b      	ldr	r3, [r7, #0]
 800877e:	005b      	lsls	r3, r3, #1
 8008780:	693a      	ldr	r2, [r7, #16]
 8008782:	8992      	ldrh	r2, [r2, #12]
 8008784:	fbb3 f0f2 	udiv	r0, r3, r2
 8008788:	fb00 f202 	mul.w	r2, r0, r2
 800878c:	1a9b      	subs	r3, r3, r2
 800878e:	440b      	add	r3, r1
 8008790:	4618      	mov	r0, r3
 8008792:	f7ff fdcb 	bl	800832c <ld_word>
 8008796:	4603      	mov	r3, r0
 8008798:	617b      	str	r3, [r7, #20]
			break;
 800879a:	e030      	b.n	80087fe <get_fat+0x19c>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800879c:	693b      	ldr	r3, [r7, #16]
 800879e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80087a0:	693b      	ldr	r3, [r7, #16]
 80087a2:	899b      	ldrh	r3, [r3, #12]
 80087a4:	089b      	lsrs	r3, r3, #2
 80087a6:	b29b      	uxth	r3, r3
 80087a8:	4619      	mov	r1, r3
 80087aa:	683b      	ldr	r3, [r7, #0]
 80087ac:	fbb3 f3f1 	udiv	r3, r3, r1
 80087b0:	4413      	add	r3, r2
 80087b2:	4619      	mov	r1, r3
 80087b4:	6938      	ldr	r0, [r7, #16]
 80087b6:	f7ff fe9a 	bl	80084ee <move_window>
 80087ba:	4603      	mov	r3, r0
 80087bc:	2b00      	cmp	r3, #0
 80087be:	d11d      	bne.n	80087fc <get_fat+0x19a>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;	/* Simple DWORD array but mask out upper 4 bits */
 80087c0:	693b      	ldr	r3, [r7, #16]
 80087c2:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 80087c6:	683b      	ldr	r3, [r7, #0]
 80087c8:	009b      	lsls	r3, r3, #2
 80087ca:	693a      	ldr	r2, [r7, #16]
 80087cc:	8992      	ldrh	r2, [r2, #12]
 80087ce:	fbb3 f0f2 	udiv	r0, r3, r2
 80087d2:	fb00 f202 	mul.w	r2, r0, r2
 80087d6:	1a9b      	subs	r3, r3, r2
 80087d8:	440b      	add	r3, r1
 80087da:	4618      	mov	r0, r3
 80087dc:	f7ff fdbf 	bl	800835e <ld_dword>
 80087e0:	4603      	mov	r3, r0
 80087e2:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 80087e6:	617b      	str	r3, [r7, #20]
			break;
 80087e8:	e009      	b.n	80087fe <get_fat+0x19c>
			}
			val = 1;	/* Internal error */
			break;
#endif
		default:
			val = 1;	/* Internal error */
 80087ea:	2301      	movs	r3, #1
 80087ec:	617b      	str	r3, [r7, #20]
 80087ee:	e006      	b.n	80087fe <get_fat+0x19c>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80087f0:	bf00      	nop
 80087f2:	e004      	b.n	80087fe <get_fat+0x19c>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80087f4:	bf00      	nop
 80087f6:	e002      	b.n	80087fe <get_fat+0x19c>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 80087f8:	bf00      	nop
 80087fa:	e000      	b.n	80087fe <get_fat+0x19c>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 80087fc:	bf00      	nop
		}
	}

	return val;
 80087fe:	697b      	ldr	r3, [r7, #20]
}
 8008800:	4618      	mov	r0, r3
 8008802:	3718      	adds	r7, #24
 8008804:	46bd      	mov	sp, r7
 8008806:	bd80      	pop	{r7, pc}

08008808 <put_fat>:
static FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding filesystem object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 8008808:	b590      	push	{r4, r7, lr}
 800880a:	b089      	sub	sp, #36	@ 0x24
 800880c:	af00      	add	r7, sp, #0
 800880e:	60f8      	str	r0, [r7, #12]
 8008810:	60b9      	str	r1, [r7, #8]
 8008812:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 8008814:	2302      	movs	r3, #2
 8008816:	77fb      	strb	r3, [r7, #31]


	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 8008818:	68bb      	ldr	r3, [r7, #8]
 800881a:	2b01      	cmp	r3, #1
 800881c:	f240 8109 	bls.w	8008a32 <put_fat+0x22a>
 8008820:	68fb      	ldr	r3, [r7, #12]
 8008822:	699b      	ldr	r3, [r3, #24]
 8008824:	68ba      	ldr	r2, [r7, #8]
 8008826:	429a      	cmp	r2, r3
 8008828:	f080 8103 	bcs.w	8008a32 <put_fat+0x22a>
		switch (fs->fs_type) {
 800882c:	68fb      	ldr	r3, [r7, #12]
 800882e:	781b      	ldrb	r3, [r3, #0]
 8008830:	2b03      	cmp	r3, #3
 8008832:	f000 80b6 	beq.w	80089a2 <put_fat+0x19a>
 8008836:	2b03      	cmp	r3, #3
 8008838:	f300 80fb 	bgt.w	8008a32 <put_fat+0x22a>
 800883c:	2b01      	cmp	r3, #1
 800883e:	d003      	beq.n	8008848 <put_fat+0x40>
 8008840:	2b02      	cmp	r3, #2
 8008842:	f000 8083 	beq.w	800894c <put_fat+0x144>
 8008846:	e0f4      	b.n	8008a32 <put_fat+0x22a>
		case FS_FAT12:
			bc = (UINT)clst; bc += bc / 2;	/* bc: byte offset of the entry */
 8008848:	68bb      	ldr	r3, [r7, #8]
 800884a:	61bb      	str	r3, [r7, #24]
 800884c:	69bb      	ldr	r3, [r7, #24]
 800884e:	085b      	lsrs	r3, r3, #1
 8008850:	69ba      	ldr	r2, [r7, #24]
 8008852:	4413      	add	r3, r2
 8008854:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8008856:	68fb      	ldr	r3, [r7, #12]
 8008858:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800885a:	68fb      	ldr	r3, [r7, #12]
 800885c:	899b      	ldrh	r3, [r3, #12]
 800885e:	4619      	mov	r1, r3
 8008860:	69bb      	ldr	r3, [r7, #24]
 8008862:	fbb3 f3f1 	udiv	r3, r3, r1
 8008866:	4413      	add	r3, r2
 8008868:	4619      	mov	r1, r3
 800886a:	68f8      	ldr	r0, [r7, #12]
 800886c:	f7ff fe3f 	bl	80084ee <move_window>
 8008870:	4603      	mov	r3, r0
 8008872:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8008874:	7ffb      	ldrb	r3, [r7, #31]
 8008876:	2b00      	cmp	r3, #0
 8008878:	f040 80d4 	bne.w	8008a24 <put_fat+0x21c>
			p = fs->win + bc++ % SS(fs);
 800887c:	68fb      	ldr	r3, [r7, #12]
 800887e:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 8008882:	69bb      	ldr	r3, [r7, #24]
 8008884:	1c5a      	adds	r2, r3, #1
 8008886:	61ba      	str	r2, [r7, #24]
 8008888:	68fa      	ldr	r2, [r7, #12]
 800888a:	8992      	ldrh	r2, [r2, #12]
 800888c:	fbb3 f0f2 	udiv	r0, r3, r2
 8008890:	fb00 f202 	mul.w	r2, r0, r2
 8008894:	1a9b      	subs	r3, r3, r2
 8008896:	440b      	add	r3, r1
 8008898:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;	/* Update 1st byte */
 800889a:	68bb      	ldr	r3, [r7, #8]
 800889c:	f003 0301 	and.w	r3, r3, #1
 80088a0:	2b00      	cmp	r3, #0
 80088a2:	d00d      	beq.n	80088c0 <put_fat+0xb8>
 80088a4:	697b      	ldr	r3, [r7, #20]
 80088a6:	781b      	ldrb	r3, [r3, #0]
 80088a8:	b25b      	sxtb	r3, r3
 80088aa:	f003 030f 	and.w	r3, r3, #15
 80088ae:	b25a      	sxtb	r2, r3
 80088b0:	687b      	ldr	r3, [r7, #4]
 80088b2:	b25b      	sxtb	r3, r3
 80088b4:	011b      	lsls	r3, r3, #4
 80088b6:	b25b      	sxtb	r3, r3
 80088b8:	4313      	orrs	r3, r2
 80088ba:	b25b      	sxtb	r3, r3
 80088bc:	b2db      	uxtb	r3, r3
 80088be:	e001      	b.n	80088c4 <put_fat+0xbc>
 80088c0:	687b      	ldr	r3, [r7, #4]
 80088c2:	b2db      	uxtb	r3, r3
 80088c4:	697a      	ldr	r2, [r7, #20]
 80088c6:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 80088c8:	68fb      	ldr	r3, [r7, #12]
 80088ca:	2201      	movs	r2, #1
 80088cc:	711a      	strb	r2, [r3, #4]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 80088ce:	68fb      	ldr	r3, [r7, #12]
 80088d0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80088d2:	68fb      	ldr	r3, [r7, #12]
 80088d4:	899b      	ldrh	r3, [r3, #12]
 80088d6:	4619      	mov	r1, r3
 80088d8:	69bb      	ldr	r3, [r7, #24]
 80088da:	fbb3 f3f1 	udiv	r3, r3, r1
 80088de:	4413      	add	r3, r2
 80088e0:	4619      	mov	r1, r3
 80088e2:	68f8      	ldr	r0, [r7, #12]
 80088e4:	f7ff fe03 	bl	80084ee <move_window>
 80088e8:	4603      	mov	r3, r0
 80088ea:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80088ec:	7ffb      	ldrb	r3, [r7, #31]
 80088ee:	2b00      	cmp	r3, #0
 80088f0:	f040 809a 	bne.w	8008a28 <put_fat+0x220>
			p = fs->win + bc % SS(fs);
 80088f4:	68fb      	ldr	r3, [r7, #12]
 80088f6:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 80088fa:	68fb      	ldr	r3, [r7, #12]
 80088fc:	899b      	ldrh	r3, [r3, #12]
 80088fe:	461a      	mov	r2, r3
 8008900:	69bb      	ldr	r3, [r7, #24]
 8008902:	fbb3 f0f2 	udiv	r0, r3, r2
 8008906:	fb00 f202 	mul.w	r2, r0, r2
 800890a:	1a9b      	subs	r3, r3, r2
 800890c:	440b      	add	r3, r1
 800890e:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));	/* Update 2nd byte */
 8008910:	68bb      	ldr	r3, [r7, #8]
 8008912:	f003 0301 	and.w	r3, r3, #1
 8008916:	2b00      	cmp	r3, #0
 8008918:	d003      	beq.n	8008922 <put_fat+0x11a>
 800891a:	687b      	ldr	r3, [r7, #4]
 800891c:	091b      	lsrs	r3, r3, #4
 800891e:	b2db      	uxtb	r3, r3
 8008920:	e00e      	b.n	8008940 <put_fat+0x138>
 8008922:	697b      	ldr	r3, [r7, #20]
 8008924:	781b      	ldrb	r3, [r3, #0]
 8008926:	b25b      	sxtb	r3, r3
 8008928:	f023 030f 	bic.w	r3, r3, #15
 800892c:	b25a      	sxtb	r2, r3
 800892e:	687b      	ldr	r3, [r7, #4]
 8008930:	0a1b      	lsrs	r3, r3, #8
 8008932:	b25b      	sxtb	r3, r3
 8008934:	f003 030f 	and.w	r3, r3, #15
 8008938:	b25b      	sxtb	r3, r3
 800893a:	4313      	orrs	r3, r2
 800893c:	b25b      	sxtb	r3, r3
 800893e:	b2db      	uxtb	r3, r3
 8008940:	697a      	ldr	r2, [r7, #20]
 8008942:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8008944:	68fb      	ldr	r3, [r7, #12]
 8008946:	2201      	movs	r2, #1
 8008948:	711a      	strb	r2, [r3, #4]
			break;
 800894a:	e072      	b.n	8008a32 <put_fat+0x22a>

		case FS_FAT16:
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 800894c:	68fb      	ldr	r3, [r7, #12]
 800894e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8008950:	68fb      	ldr	r3, [r7, #12]
 8008952:	899b      	ldrh	r3, [r3, #12]
 8008954:	085b      	lsrs	r3, r3, #1
 8008956:	b29b      	uxth	r3, r3
 8008958:	4619      	mov	r1, r3
 800895a:	68bb      	ldr	r3, [r7, #8]
 800895c:	fbb3 f3f1 	udiv	r3, r3, r1
 8008960:	4413      	add	r3, r2
 8008962:	4619      	mov	r1, r3
 8008964:	68f8      	ldr	r0, [r7, #12]
 8008966:	f7ff fdc2 	bl	80084ee <move_window>
 800896a:	4603      	mov	r3, r0
 800896c:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800896e:	7ffb      	ldrb	r3, [r7, #31]
 8008970:	2b00      	cmp	r3, #0
 8008972:	d15b      	bne.n	8008a2c <put_fat+0x224>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);	/* Simple WORD array */
 8008974:	68fb      	ldr	r3, [r7, #12]
 8008976:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 800897a:	68bb      	ldr	r3, [r7, #8]
 800897c:	005b      	lsls	r3, r3, #1
 800897e:	68fa      	ldr	r2, [r7, #12]
 8008980:	8992      	ldrh	r2, [r2, #12]
 8008982:	fbb3 f0f2 	udiv	r0, r3, r2
 8008986:	fb00 f202 	mul.w	r2, r0, r2
 800898a:	1a9b      	subs	r3, r3, r2
 800898c:	440b      	add	r3, r1
 800898e:	687a      	ldr	r2, [r7, #4]
 8008990:	b292      	uxth	r2, r2
 8008992:	4611      	mov	r1, r2
 8008994:	4618      	mov	r0, r3
 8008996:	f7ff fd05 	bl	80083a4 <st_word>
			fs->wflag = 1;
 800899a:	68fb      	ldr	r3, [r7, #12]
 800899c:	2201      	movs	r2, #1
 800899e:	711a      	strb	r2, [r3, #4]
			break;
 80089a0:	e047      	b.n	8008a32 <put_fat+0x22a>

		case FS_FAT32:
#if FF_FS_EXFAT
		case FS_EXFAT:
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 80089a2:	68fb      	ldr	r3, [r7, #12]
 80089a4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80089a6:	68fb      	ldr	r3, [r7, #12]
 80089a8:	899b      	ldrh	r3, [r3, #12]
 80089aa:	089b      	lsrs	r3, r3, #2
 80089ac:	b29b      	uxth	r3, r3
 80089ae:	4619      	mov	r1, r3
 80089b0:	68bb      	ldr	r3, [r7, #8]
 80089b2:	fbb3 f3f1 	udiv	r3, r3, r1
 80089b6:	4413      	add	r3, r2
 80089b8:	4619      	mov	r1, r3
 80089ba:	68f8      	ldr	r0, [r7, #12]
 80089bc:	f7ff fd97 	bl	80084ee <move_window>
 80089c0:	4603      	mov	r3, r0
 80089c2:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80089c4:	7ffb      	ldrb	r3, [r7, #31]
 80089c6:	2b00      	cmp	r3, #0
 80089c8:	d132      	bne.n	8008a30 <put_fat+0x228>
			if (!FF_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 80089ca:	687b      	ldr	r3, [r7, #4]
 80089cc:	f023 4470 	bic.w	r4, r3, #4026531840	@ 0xf0000000
 80089d0:	68fb      	ldr	r3, [r7, #12]
 80089d2:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 80089d6:	68bb      	ldr	r3, [r7, #8]
 80089d8:	009b      	lsls	r3, r3, #2
 80089da:	68fa      	ldr	r2, [r7, #12]
 80089dc:	8992      	ldrh	r2, [r2, #12]
 80089de:	fbb3 f0f2 	udiv	r0, r3, r2
 80089e2:	fb00 f202 	mul.w	r2, r0, r2
 80089e6:	1a9b      	subs	r3, r3, r2
 80089e8:	440b      	add	r3, r1
 80089ea:	4618      	mov	r0, r3
 80089ec:	f7ff fcb7 	bl	800835e <ld_dword>
 80089f0:	4603      	mov	r3, r0
 80089f2:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 80089f6:	4323      	orrs	r3, r4
 80089f8:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 80089fa:	68fb      	ldr	r3, [r7, #12]
 80089fc:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 8008a00:	68bb      	ldr	r3, [r7, #8]
 8008a02:	009b      	lsls	r3, r3, #2
 8008a04:	68fa      	ldr	r2, [r7, #12]
 8008a06:	8992      	ldrh	r2, [r2, #12]
 8008a08:	fbb3 f0f2 	udiv	r0, r3, r2
 8008a0c:	fb00 f202 	mul.w	r2, r0, r2
 8008a10:	1a9b      	subs	r3, r3, r2
 8008a12:	440b      	add	r3, r1
 8008a14:	6879      	ldr	r1, [r7, #4]
 8008a16:	4618      	mov	r0, r3
 8008a18:	f7ff fcdf 	bl	80083da <st_dword>
			fs->wflag = 1;
 8008a1c:	68fb      	ldr	r3, [r7, #12]
 8008a1e:	2201      	movs	r2, #1
 8008a20:	711a      	strb	r2, [r3, #4]
			break;
 8008a22:	e006      	b.n	8008a32 <put_fat+0x22a>
			if (res != FR_OK) break;
 8008a24:	bf00      	nop
 8008a26:	e004      	b.n	8008a32 <put_fat+0x22a>
			if (res != FR_OK) break;
 8008a28:	bf00      	nop
 8008a2a:	e002      	b.n	8008a32 <put_fat+0x22a>
			if (res != FR_OK) break;
 8008a2c:	bf00      	nop
 8008a2e:	e000      	b.n	8008a32 <put_fat+0x22a>
			if (res != FR_OK) break;
 8008a30:	bf00      	nop
		}
	}
	return res;
 8008a32:	7ffb      	ldrb	r3, [r7, #31]
}
 8008a34:	4618      	mov	r0, r3
 8008a36:	3724      	adds	r7, #36	@ 0x24
 8008a38:	46bd      	mov	sp, r7
 8008a3a:	bd90      	pop	{r4, r7, pc}

08008a3c <remove_chain>:
static FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	FFOBJID* obj,		/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0 if entire chain) */
)
{
 8008a3c:	b580      	push	{r7, lr}
 8008a3e:	b088      	sub	sp, #32
 8008a40:	af00      	add	r7, sp, #0
 8008a42:	60f8      	str	r0, [r7, #12]
 8008a44:	60b9      	str	r1, [r7, #8]
 8008a46:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 8008a48:	2300      	movs	r3, #0
 8008a4a:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 8008a4c:	68fb      	ldr	r3, [r7, #12]
 8008a4e:	681b      	ldr	r3, [r3, #0]
 8008a50:	61bb      	str	r3, [r7, #24]
#endif
#if FF_USE_TRIM
	LBA_t rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 8008a52:	68bb      	ldr	r3, [r7, #8]
 8008a54:	2b01      	cmp	r3, #1
 8008a56:	d904      	bls.n	8008a62 <remove_chain+0x26>
 8008a58:	69bb      	ldr	r3, [r7, #24]
 8008a5a:	699b      	ldr	r3, [r3, #24]
 8008a5c:	68ba      	ldr	r2, [r7, #8]
 8008a5e:	429a      	cmp	r2, r3
 8008a60:	d301      	bcc.n	8008a66 <remove_chain+0x2a>
 8008a62:	2302      	movs	r3, #2
 8008a64:	e04b      	b.n	8008afe <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst != 0 && (!FF_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 8008a66:	687b      	ldr	r3, [r7, #4]
 8008a68:	2b00      	cmp	r3, #0
 8008a6a:	d00c      	beq.n	8008a86 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 8008a6c:	f04f 32ff 	mov.w	r2, #4294967295
 8008a70:	6879      	ldr	r1, [r7, #4]
 8008a72:	69b8      	ldr	r0, [r7, #24]
 8008a74:	f7ff fec8 	bl	8008808 <put_fat>
 8008a78:	4603      	mov	r3, r0
 8008a7a:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 8008a7c:	7ffb      	ldrb	r3, [r7, #31]
 8008a7e:	2b00      	cmp	r3, #0
 8008a80:	d001      	beq.n	8008a86 <remove_chain+0x4a>
 8008a82:	7ffb      	ldrb	r3, [r7, #31]
 8008a84:	e03b      	b.n	8008afe <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 8008a86:	68b9      	ldr	r1, [r7, #8]
 8008a88:	68f8      	ldr	r0, [r7, #12]
 8008a8a:	f7ff fdea 	bl	8008662 <get_fat>
 8008a8e:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 8008a90:	697b      	ldr	r3, [r7, #20]
 8008a92:	2b00      	cmp	r3, #0
 8008a94:	d031      	beq.n	8008afa <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 8008a96:	697b      	ldr	r3, [r7, #20]
 8008a98:	2b01      	cmp	r3, #1
 8008a9a:	d101      	bne.n	8008aa0 <remove_chain+0x64>
 8008a9c:	2302      	movs	r3, #2
 8008a9e:	e02e      	b.n	8008afe <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 8008aa0:	697b      	ldr	r3, [r7, #20]
 8008aa2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008aa6:	d101      	bne.n	8008aac <remove_chain+0x70>
 8008aa8:	2301      	movs	r3, #1
 8008aaa:	e028      	b.n	8008afe <remove_chain+0xc2>
		if (!FF_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 8008aac:	2200      	movs	r2, #0
 8008aae:	68b9      	ldr	r1, [r7, #8]
 8008ab0:	69b8      	ldr	r0, [r7, #24]
 8008ab2:	f7ff fea9 	bl	8008808 <put_fat>
 8008ab6:	4603      	mov	r3, r0
 8008ab8:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 8008aba:	7ffb      	ldrb	r3, [r7, #31]
 8008abc:	2b00      	cmp	r3, #0
 8008abe:	d001      	beq.n	8008ac4 <remove_chain+0x88>
 8008ac0:	7ffb      	ldrb	r3, [r7, #31]
 8008ac2:	e01c      	b.n	8008afe <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 8008ac4:	69bb      	ldr	r3, [r7, #24]
 8008ac6:	695a      	ldr	r2, [r3, #20]
 8008ac8:	69bb      	ldr	r3, [r7, #24]
 8008aca:	699b      	ldr	r3, [r3, #24]
 8008acc:	3b02      	subs	r3, #2
 8008ace:	429a      	cmp	r2, r3
 8008ad0:	d20b      	bcs.n	8008aea <remove_chain+0xae>
			fs->free_clst++;
 8008ad2:	69bb      	ldr	r3, [r7, #24]
 8008ad4:	695b      	ldr	r3, [r3, #20]
 8008ad6:	1c5a      	adds	r2, r3, #1
 8008ad8:	69bb      	ldr	r3, [r7, #24]
 8008ada:	615a      	str	r2, [r3, #20]
			fs->fsi_flag |= 1;
 8008adc:	69bb      	ldr	r3, [r7, #24]
 8008ade:	795b      	ldrb	r3, [r3, #5]
 8008ae0:	f043 0301 	orr.w	r3, r3, #1
 8008ae4:	b2da      	uxtb	r2, r3
 8008ae6:	69bb      	ldr	r3, [r7, #24]
 8008ae8:	715a      	strb	r2, [r3, #5]
			disk_ioctl(fs->pdrv, CTRL_TRIM, rt);		/* Inform storage device that the data in the block may be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 8008aea:	697b      	ldr	r3, [r7, #20]
 8008aec:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 8008aee:	69bb      	ldr	r3, [r7, #24]
 8008af0:	699b      	ldr	r3, [r3, #24]
 8008af2:	68ba      	ldr	r2, [r7, #8]
 8008af4:	429a      	cmp	r2, r3
 8008af6:	d3c6      	bcc.n	8008a86 <remove_chain+0x4a>
 8008af8:	e000      	b.n	8008afc <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 8008afa:	bf00      	nop
				}
			}
		}
	}
#endif
	return FR_OK;
 8008afc:	2300      	movs	r3, #0
}
 8008afe:	4618      	mov	r0, r3
 8008b00:	3720      	adds	r7, #32
 8008b02:	46bd      	mov	sp, r7
 8008b04:	bd80      	pop	{r7, pc}

08008b06 <create_chain>:

static DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	FFOBJID* obj,		/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 8008b06:	b580      	push	{r7, lr}
 8008b08:	b088      	sub	sp, #32
 8008b0a:	af00      	add	r7, sp, #0
 8008b0c:	6078      	str	r0, [r7, #4]
 8008b0e:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 8008b10:	687b      	ldr	r3, [r7, #4]
 8008b12:	681b      	ldr	r3, [r3, #0]
 8008b14:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 8008b16:	683b      	ldr	r3, [r7, #0]
 8008b18:	2b00      	cmp	r3, #0
 8008b1a:	d10d      	bne.n	8008b38 <create_chain+0x32>
		scl = fs->last_clst;				/* Suggested cluster to start to find */
 8008b1c:	693b      	ldr	r3, [r7, #16]
 8008b1e:	691b      	ldr	r3, [r3, #16]
 8008b20:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 8008b22:	69bb      	ldr	r3, [r7, #24]
 8008b24:	2b00      	cmp	r3, #0
 8008b26:	d004      	beq.n	8008b32 <create_chain+0x2c>
 8008b28:	693b      	ldr	r3, [r7, #16]
 8008b2a:	699b      	ldr	r3, [r3, #24]
 8008b2c:	69ba      	ldr	r2, [r7, #24]
 8008b2e:	429a      	cmp	r2, r3
 8008b30:	d31b      	bcc.n	8008b6a <create_chain+0x64>
 8008b32:	2301      	movs	r3, #1
 8008b34:	61bb      	str	r3, [r7, #24]
 8008b36:	e018      	b.n	8008b6a <create_chain+0x64>
	}
	else {				/* Stretch a chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 8008b38:	6839      	ldr	r1, [r7, #0]
 8008b3a:	6878      	ldr	r0, [r7, #4]
 8008b3c:	f7ff fd91 	bl	8008662 <get_fat>
 8008b40:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Test for insanity */
 8008b42:	68fb      	ldr	r3, [r7, #12]
 8008b44:	2b01      	cmp	r3, #1
 8008b46:	d801      	bhi.n	8008b4c <create_chain+0x46>
 8008b48:	2301      	movs	r3, #1
 8008b4a:	e0a9      	b.n	8008ca0 <create_chain+0x19a>
		if (cs == 0xFFFFFFFF) return cs;	/* Test for disk error */
 8008b4c:	68fb      	ldr	r3, [r7, #12]
 8008b4e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008b52:	d101      	bne.n	8008b58 <create_chain+0x52>
 8008b54:	68fb      	ldr	r3, [r7, #12]
 8008b56:	e0a3      	b.n	8008ca0 <create_chain+0x19a>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 8008b58:	693b      	ldr	r3, [r7, #16]
 8008b5a:	699b      	ldr	r3, [r3, #24]
 8008b5c:	68fa      	ldr	r2, [r7, #12]
 8008b5e:	429a      	cmp	r2, r3
 8008b60:	d201      	bcs.n	8008b66 <create_chain+0x60>
 8008b62:	68fb      	ldr	r3, [r7, #12]
 8008b64:	e09c      	b.n	8008ca0 <create_chain+0x19a>
		scl = clst;							/* Cluster to start to find */
 8008b66:	683b      	ldr	r3, [r7, #0]
 8008b68:	61bb      	str	r3, [r7, #24]
	}
	if (fs->free_clst == 0) return 0;		/* No free cluster */
 8008b6a:	693b      	ldr	r3, [r7, #16]
 8008b6c:	695b      	ldr	r3, [r3, #20]
 8008b6e:	2b00      	cmp	r3, #0
 8008b70:	d101      	bne.n	8008b76 <create_chain+0x70>
 8008b72:	2300      	movs	r3, #0
 8008b74:	e094      	b.n	8008ca0 <create_chain+0x19a>
			}
		}
	} else
#endif
	{	/* On the FAT/FAT32 volume */
		ncl = 0;
 8008b76:	2300      	movs	r3, #0
 8008b78:	61fb      	str	r3, [r7, #28]
		if (scl == clst) {						/* Stretching an existing chain? */
 8008b7a:	69ba      	ldr	r2, [r7, #24]
 8008b7c:	683b      	ldr	r3, [r7, #0]
 8008b7e:	429a      	cmp	r2, r3
 8008b80:	d129      	bne.n	8008bd6 <create_chain+0xd0>
			ncl = scl + 1;						/* Test if next cluster is free */
 8008b82:	69bb      	ldr	r3, [r7, #24]
 8008b84:	3301      	adds	r3, #1
 8008b86:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) ncl = 2;
 8008b88:	693b      	ldr	r3, [r7, #16]
 8008b8a:	699b      	ldr	r3, [r3, #24]
 8008b8c:	69fa      	ldr	r2, [r7, #28]
 8008b8e:	429a      	cmp	r2, r3
 8008b90:	d301      	bcc.n	8008b96 <create_chain+0x90>
 8008b92:	2302      	movs	r3, #2
 8008b94:	61fb      	str	r3, [r7, #28]
			cs = get_fat(obj, ncl);				/* Get next cluster status */
 8008b96:	69f9      	ldr	r1, [r7, #28]
 8008b98:	6878      	ldr	r0, [r7, #4]
 8008b9a:	f7ff fd62 	bl	8008662 <get_fat>
 8008b9e:	60f8      	str	r0, [r7, #12]
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* Test for error */
 8008ba0:	68fb      	ldr	r3, [r7, #12]
 8008ba2:	2b01      	cmp	r3, #1
 8008ba4:	d003      	beq.n	8008bae <create_chain+0xa8>
 8008ba6:	68fb      	ldr	r3, [r7, #12]
 8008ba8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008bac:	d101      	bne.n	8008bb2 <create_chain+0xac>
 8008bae:	68fb      	ldr	r3, [r7, #12]
 8008bb0:	e076      	b.n	8008ca0 <create_chain+0x19a>
			if (cs != 0) {						/* Not free? */
 8008bb2:	68fb      	ldr	r3, [r7, #12]
 8008bb4:	2b00      	cmp	r3, #0
 8008bb6:	d00e      	beq.n	8008bd6 <create_chain+0xd0>
				cs = fs->last_clst;				/* Start at suggested cluster if it is valid */
 8008bb8:	693b      	ldr	r3, [r7, #16]
 8008bba:	691b      	ldr	r3, [r3, #16]
 8008bbc:	60fb      	str	r3, [r7, #12]
				if (cs >= 2 && cs < fs->n_fatent) scl = cs;
 8008bbe:	68fb      	ldr	r3, [r7, #12]
 8008bc0:	2b01      	cmp	r3, #1
 8008bc2:	d906      	bls.n	8008bd2 <create_chain+0xcc>
 8008bc4:	693b      	ldr	r3, [r7, #16]
 8008bc6:	699b      	ldr	r3, [r3, #24]
 8008bc8:	68fa      	ldr	r2, [r7, #12]
 8008bca:	429a      	cmp	r2, r3
 8008bcc:	d201      	bcs.n	8008bd2 <create_chain+0xcc>
 8008bce:	68fb      	ldr	r3, [r7, #12]
 8008bd0:	61bb      	str	r3, [r7, #24]
				ncl = 0;
 8008bd2:	2300      	movs	r3, #0
 8008bd4:	61fb      	str	r3, [r7, #28]
			}
		}
		if (ncl == 0) {	/* The new cluster cannot be contiguous and find another fragment */
 8008bd6:	69fb      	ldr	r3, [r7, #28]
 8008bd8:	2b00      	cmp	r3, #0
 8008bda:	d129      	bne.n	8008c30 <create_chain+0x12a>
			ncl = scl;	/* Start cluster */
 8008bdc:	69bb      	ldr	r3, [r7, #24]
 8008bde:	61fb      	str	r3, [r7, #28]
			for (;;) {
				ncl++;							/* Next cluster */
 8008be0:	69fb      	ldr	r3, [r7, #28]
 8008be2:	3301      	adds	r3, #1
 8008be4:	61fb      	str	r3, [r7, #28]
				if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 8008be6:	693b      	ldr	r3, [r7, #16]
 8008be8:	699b      	ldr	r3, [r3, #24]
 8008bea:	69fa      	ldr	r2, [r7, #28]
 8008bec:	429a      	cmp	r2, r3
 8008bee:	d307      	bcc.n	8008c00 <create_chain+0xfa>
					ncl = 2;
 8008bf0:	2302      	movs	r3, #2
 8008bf2:	61fb      	str	r3, [r7, #28]
					if (ncl > scl) return 0;	/* No free cluster found? */
 8008bf4:	69fa      	ldr	r2, [r7, #28]
 8008bf6:	69bb      	ldr	r3, [r7, #24]
 8008bf8:	429a      	cmp	r2, r3
 8008bfa:	d901      	bls.n	8008c00 <create_chain+0xfa>
 8008bfc:	2300      	movs	r3, #0
 8008bfe:	e04f      	b.n	8008ca0 <create_chain+0x19a>
				}
				cs = get_fat(obj, ncl);			/* Get the cluster status */
 8008c00:	69f9      	ldr	r1, [r7, #28]
 8008c02:	6878      	ldr	r0, [r7, #4]
 8008c04:	f7ff fd2d 	bl	8008662 <get_fat>
 8008c08:	60f8      	str	r0, [r7, #12]
				if (cs == 0) break;				/* Found a free cluster? */
 8008c0a:	68fb      	ldr	r3, [r7, #12]
 8008c0c:	2b00      	cmp	r3, #0
 8008c0e:	d00e      	beq.n	8008c2e <create_chain+0x128>
				if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* Test for error */
 8008c10:	68fb      	ldr	r3, [r7, #12]
 8008c12:	2b01      	cmp	r3, #1
 8008c14:	d003      	beq.n	8008c1e <create_chain+0x118>
 8008c16:	68fb      	ldr	r3, [r7, #12]
 8008c18:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008c1c:	d101      	bne.n	8008c22 <create_chain+0x11c>
 8008c1e:	68fb      	ldr	r3, [r7, #12]
 8008c20:	e03e      	b.n	8008ca0 <create_chain+0x19a>
				if (ncl == scl) return 0;		/* No free cluster found? */
 8008c22:	69fa      	ldr	r2, [r7, #28]
 8008c24:	69bb      	ldr	r3, [r7, #24]
 8008c26:	429a      	cmp	r2, r3
 8008c28:	d1da      	bne.n	8008be0 <create_chain+0xda>
 8008c2a:	2300      	movs	r3, #0
 8008c2c:	e038      	b.n	8008ca0 <create_chain+0x19a>
				if (cs == 0) break;				/* Found a free cluster? */
 8008c2e:	bf00      	nop
			}
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);		/* Mark the new cluster 'EOC' */
 8008c30:	f04f 32ff 	mov.w	r2, #4294967295
 8008c34:	69f9      	ldr	r1, [r7, #28]
 8008c36:	6938      	ldr	r0, [r7, #16]
 8008c38:	f7ff fde6 	bl	8008808 <put_fat>
 8008c3c:	4603      	mov	r3, r0
 8008c3e:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 8008c40:	7dfb      	ldrb	r3, [r7, #23]
 8008c42:	2b00      	cmp	r3, #0
 8008c44:	d109      	bne.n	8008c5a <create_chain+0x154>
 8008c46:	683b      	ldr	r3, [r7, #0]
 8008c48:	2b00      	cmp	r3, #0
 8008c4a:	d006      	beq.n	8008c5a <create_chain+0x154>
			res = put_fat(fs, clst, ncl);		/* Link it from the previous one if needed */
 8008c4c:	69fa      	ldr	r2, [r7, #28]
 8008c4e:	6839      	ldr	r1, [r7, #0]
 8008c50:	6938      	ldr	r0, [r7, #16]
 8008c52:	f7ff fdd9 	bl	8008808 <put_fat>
 8008c56:	4603      	mov	r3, r0
 8008c58:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 8008c5a:	7dfb      	ldrb	r3, [r7, #23]
 8008c5c:	2b00      	cmp	r3, #0
 8008c5e:	d116      	bne.n	8008c8e <create_chain+0x188>
		fs->last_clst = ncl;
 8008c60:	693b      	ldr	r3, [r7, #16]
 8008c62:	69fa      	ldr	r2, [r7, #28]
 8008c64:	611a      	str	r2, [r3, #16]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 8008c66:	693b      	ldr	r3, [r7, #16]
 8008c68:	695a      	ldr	r2, [r3, #20]
 8008c6a:	693b      	ldr	r3, [r7, #16]
 8008c6c:	699b      	ldr	r3, [r3, #24]
 8008c6e:	3b02      	subs	r3, #2
 8008c70:	429a      	cmp	r2, r3
 8008c72:	d804      	bhi.n	8008c7e <create_chain+0x178>
 8008c74:	693b      	ldr	r3, [r7, #16]
 8008c76:	695b      	ldr	r3, [r3, #20]
 8008c78:	1e5a      	subs	r2, r3, #1
 8008c7a:	693b      	ldr	r3, [r7, #16]
 8008c7c:	615a      	str	r2, [r3, #20]
		fs->fsi_flag |= 1;
 8008c7e:	693b      	ldr	r3, [r7, #16]
 8008c80:	795b      	ldrb	r3, [r3, #5]
 8008c82:	f043 0301 	orr.w	r3, r3, #1
 8008c86:	b2da      	uxtb	r2, r3
 8008c88:	693b      	ldr	r3, [r7, #16]
 8008c8a:	715a      	strb	r2, [r3, #5]
 8008c8c:	e007      	b.n	8008c9e <create_chain+0x198>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 8008c8e:	7dfb      	ldrb	r3, [r7, #23]
 8008c90:	2b01      	cmp	r3, #1
 8008c92:	d102      	bne.n	8008c9a <create_chain+0x194>
 8008c94:	f04f 33ff 	mov.w	r3, #4294967295
 8008c98:	e000      	b.n	8008c9c <create_chain+0x196>
 8008c9a:	2301      	movs	r3, #1
 8008c9c:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 8008c9e:	69fb      	ldr	r3, [r7, #28]
}
 8008ca0:	4618      	mov	r0, r3
 8008ca2:	3720      	adds	r7, #32
 8008ca4:	46bd      	mov	sp, r7
 8008ca6:	bd80      	pop	{r7, pc}

08008ca8 <dir_clear>:
#if !FF_FS_READONLY
static FRESULT dir_clear (	/* Returns FR_OK or FR_DISK_ERR */
	FATFS *fs,		/* Filesystem object */
	DWORD clst		/* Directory table to clear */
)
{
 8008ca8:	b580      	push	{r7, lr}
 8008caa:	b086      	sub	sp, #24
 8008cac:	af00      	add	r7, sp, #0
 8008cae:	6078      	str	r0, [r7, #4]
 8008cb0:	6039      	str	r1, [r7, #0]
	LBA_t sect;
	UINT n, szb;
	BYTE *ibuf;


	if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 8008cb2:	6878      	ldr	r0, [r7, #4]
 8008cb4:	f7ff fbdf 	bl	8008476 <sync_window>
 8008cb8:	4603      	mov	r3, r0
 8008cba:	2b00      	cmp	r3, #0
 8008cbc:	d001      	beq.n	8008cc2 <dir_clear+0x1a>
 8008cbe:	2301      	movs	r3, #1
 8008cc0:	e036      	b.n	8008d30 <dir_clear+0x88>
	sect = clst2sect(fs, clst);		/* Top of the cluster */
 8008cc2:	6839      	ldr	r1, [r7, #0]
 8008cc4:	6878      	ldr	r0, [r7, #4]
 8008cc6:	f7ff fcad 	bl	8008624 <clst2sect>
 8008cca:	6138      	str	r0, [r7, #16]
	fs->winsect = sect;				/* Set window to top of the cluster */
 8008ccc:	687b      	ldr	r3, [r7, #4]
 8008cce:	693a      	ldr	r2, [r7, #16]
 8008cd0:	631a      	str	r2, [r3, #48]	@ 0x30
	memset(fs->win, 0, sizeof fs->win);	/* Clear window buffer */
 8008cd2:	687b      	ldr	r3, [r7, #4]
 8008cd4:	3334      	adds	r3, #52	@ 0x34
 8008cd6:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8008cda:	2100      	movs	r1, #0
 8008cdc:	4618      	mov	r0, r3
 8008cde:	f00d fbd9 	bl	8016494 <memset>
		for (n = 0; n < fs->csize && disk_write(fs->pdrv, ibuf, sect + n, szb) == RES_OK; n += szb) ;	/* Fill the cluster with 0 */
		ff_memfree(ibuf);
	} else
#endif
	{
		ibuf = fs->win; szb = 1;	/* Use window buffer (many single-sector writes may take a time) */
 8008ce2:	687b      	ldr	r3, [r7, #4]
 8008ce4:	3334      	adds	r3, #52	@ 0x34
 8008ce6:	60fb      	str	r3, [r7, #12]
 8008ce8:	2301      	movs	r3, #1
 8008cea:	60bb      	str	r3, [r7, #8]
		for (n = 0; n < fs->csize && disk_write(fs->pdrv, ibuf, sect + n, szb) == RES_OK; n += szb) ;	/* Fill the cluster with 0 */
 8008cec:	2300      	movs	r3, #0
 8008cee:	617b      	str	r3, [r7, #20]
 8008cf0:	e003      	b.n	8008cfa <dir_clear+0x52>
 8008cf2:	697a      	ldr	r2, [r7, #20]
 8008cf4:	68bb      	ldr	r3, [r7, #8]
 8008cf6:	4413      	add	r3, r2
 8008cf8:	617b      	str	r3, [r7, #20]
 8008cfa:	687b      	ldr	r3, [r7, #4]
 8008cfc:	895b      	ldrh	r3, [r3, #10]
 8008cfe:	461a      	mov	r2, r3
 8008d00:	697b      	ldr	r3, [r7, #20]
 8008d02:	4293      	cmp	r3, r2
 8008d04:	d20b      	bcs.n	8008d1e <dir_clear+0x76>
 8008d06:	687b      	ldr	r3, [r7, #4]
 8008d08:	7858      	ldrb	r0, [r3, #1]
 8008d0a:	693a      	ldr	r2, [r7, #16]
 8008d0c:	697b      	ldr	r3, [r7, #20]
 8008d0e:	441a      	add	r2, r3
 8008d10:	68bb      	ldr	r3, [r7, #8]
 8008d12:	68f9      	ldr	r1, [r7, #12]
 8008d14:	f7ff fa54 	bl	80081c0 <disk_write>
 8008d18:	4603      	mov	r3, r0
 8008d1a:	2b00      	cmp	r3, #0
 8008d1c:	d0e9      	beq.n	8008cf2 <dir_clear+0x4a>
	}
	return (n == fs->csize) ? FR_OK : FR_DISK_ERR;
 8008d1e:	687b      	ldr	r3, [r7, #4]
 8008d20:	895b      	ldrh	r3, [r3, #10]
 8008d22:	461a      	mov	r2, r3
 8008d24:	697b      	ldr	r3, [r7, #20]
 8008d26:	4293      	cmp	r3, r2
 8008d28:	bf14      	ite	ne
 8008d2a:	2301      	movne	r3, #1
 8008d2c:	2300      	moveq	r3, #0
 8008d2e:	b2db      	uxtb	r3, r3
}
 8008d30:	4618      	mov	r0, r3
 8008d32:	3718      	adds	r7, #24
 8008d34:	46bd      	mov	sp, r7
 8008d36:	bd80      	pop	{r7, pc}

08008d38 <dir_sdi>:

static FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 8008d38:	b580      	push	{r7, lr}
 8008d3a:	b086      	sub	sp, #24
 8008d3c:	af00      	add	r7, sp, #0
 8008d3e:	6078      	str	r0, [r7, #4]
 8008d40:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 8008d42:	687b      	ldr	r3, [r7, #4]
 8008d44:	681b      	ldr	r3, [r3, #0]
 8008d46:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((FF_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 8008d48:	683b      	ldr	r3, [r7, #0]
 8008d4a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8008d4e:	d204      	bcs.n	8008d5a <dir_sdi+0x22>
 8008d50:	683b      	ldr	r3, [r7, #0]
 8008d52:	f003 031f 	and.w	r3, r3, #31
 8008d56:	2b00      	cmp	r3, #0
 8008d58:	d001      	beq.n	8008d5e <dir_sdi+0x26>
		return FR_INT_ERR;
 8008d5a:	2302      	movs	r3, #2
 8008d5c:	e071      	b.n	8008e42 <dir_sdi+0x10a>
	}
	dp->dptr = ofs;				/* Set current offset */
 8008d5e:	687b      	ldr	r3, [r7, #4]
 8008d60:	683a      	ldr	r2, [r7, #0]
 8008d62:	611a      	str	r2, [r3, #16]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 8008d64:	687b      	ldr	r3, [r7, #4]
 8008d66:	689b      	ldr	r3, [r3, #8]
 8008d68:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 8008d6a:	697b      	ldr	r3, [r7, #20]
 8008d6c:	2b00      	cmp	r3, #0
 8008d6e:	d106      	bne.n	8008d7e <dir_sdi+0x46>
 8008d70:	693b      	ldr	r3, [r7, #16]
 8008d72:	781b      	ldrb	r3, [r3, #0]
 8008d74:	2b02      	cmp	r3, #2
 8008d76:	d902      	bls.n	8008d7e <dir_sdi+0x46>
		clst = (DWORD)fs->dirbase;
 8008d78:	693b      	ldr	r3, [r7, #16]
 8008d7a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008d7c:	617b      	str	r3, [r7, #20]
		if (FF_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory on the FAT volume) */
 8008d7e:	697b      	ldr	r3, [r7, #20]
 8008d80:	2b00      	cmp	r3, #0
 8008d82:	d10c      	bne.n	8008d9e <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir) return FR_INT_ERR;	/* Is index out of range? */
 8008d84:	683b      	ldr	r3, [r7, #0]
 8008d86:	095b      	lsrs	r3, r3, #5
 8008d88:	693a      	ldr	r2, [r7, #16]
 8008d8a:	8912      	ldrh	r2, [r2, #8]
 8008d8c:	4293      	cmp	r3, r2
 8008d8e:	d301      	bcc.n	8008d94 <dir_sdi+0x5c>
 8008d90:	2302      	movs	r3, #2
 8008d92:	e056      	b.n	8008e42 <dir_sdi+0x10a>
		dp->sect = fs->dirbase;
 8008d94:	693b      	ldr	r3, [r7, #16]
 8008d96:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8008d98:	687b      	ldr	r3, [r7, #4]
 8008d9a:	619a      	str	r2, [r3, #24]
 8008d9c:	e02d      	b.n	8008dfa <dir_sdi+0xc2>

	} else {			/* Dynamic table (sub-directory or root-directory on the FAT32/exFAT volume) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 8008d9e:	693b      	ldr	r3, [r7, #16]
 8008da0:	895b      	ldrh	r3, [r3, #10]
 8008da2:	461a      	mov	r2, r3
 8008da4:	693b      	ldr	r3, [r7, #16]
 8008da6:	899b      	ldrh	r3, [r3, #12]
 8008da8:	fb02 f303 	mul.w	r3, r2, r3
 8008dac:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 8008dae:	e019      	b.n	8008de4 <dir_sdi+0xac>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 8008db0:	687b      	ldr	r3, [r7, #4]
 8008db2:	6979      	ldr	r1, [r7, #20]
 8008db4:	4618      	mov	r0, r3
 8008db6:	f7ff fc54 	bl	8008662 <get_fat>
 8008dba:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8008dbc:	697b      	ldr	r3, [r7, #20]
 8008dbe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008dc2:	d101      	bne.n	8008dc8 <dir_sdi+0x90>
 8008dc4:	2301      	movs	r3, #1
 8008dc6:	e03c      	b.n	8008e42 <dir_sdi+0x10a>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 8008dc8:	697b      	ldr	r3, [r7, #20]
 8008dca:	2b01      	cmp	r3, #1
 8008dcc:	d904      	bls.n	8008dd8 <dir_sdi+0xa0>
 8008dce:	693b      	ldr	r3, [r7, #16]
 8008dd0:	699b      	ldr	r3, [r3, #24]
 8008dd2:	697a      	ldr	r2, [r7, #20]
 8008dd4:	429a      	cmp	r2, r3
 8008dd6:	d301      	bcc.n	8008ddc <dir_sdi+0xa4>
 8008dd8:	2302      	movs	r3, #2
 8008dda:	e032      	b.n	8008e42 <dir_sdi+0x10a>
			ofs -= csz;
 8008ddc:	683a      	ldr	r2, [r7, #0]
 8008dde:	68fb      	ldr	r3, [r7, #12]
 8008de0:	1ad3      	subs	r3, r2, r3
 8008de2:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 8008de4:	683a      	ldr	r2, [r7, #0]
 8008de6:	68fb      	ldr	r3, [r7, #12]
 8008de8:	429a      	cmp	r2, r3
 8008dea:	d2e1      	bcs.n	8008db0 <dir_sdi+0x78>
		}
		dp->sect = clst2sect(fs, clst);
 8008dec:	6979      	ldr	r1, [r7, #20]
 8008dee:	6938      	ldr	r0, [r7, #16]
 8008df0:	f7ff fc18 	bl	8008624 <clst2sect>
 8008df4:	4602      	mov	r2, r0
 8008df6:	687b      	ldr	r3, [r7, #4]
 8008df8:	619a      	str	r2, [r3, #24]
	}
	dp->clust = clst;					/* Current cluster# */
 8008dfa:	687b      	ldr	r3, [r7, #4]
 8008dfc:	697a      	ldr	r2, [r7, #20]
 8008dfe:	615a      	str	r2, [r3, #20]
	if (dp->sect == 0) return FR_INT_ERR;
 8008e00:	687b      	ldr	r3, [r7, #4]
 8008e02:	699b      	ldr	r3, [r3, #24]
 8008e04:	2b00      	cmp	r3, #0
 8008e06:	d101      	bne.n	8008e0c <dir_sdi+0xd4>
 8008e08:	2302      	movs	r3, #2
 8008e0a:	e01a      	b.n	8008e42 <dir_sdi+0x10a>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 8008e0c:	687b      	ldr	r3, [r7, #4]
 8008e0e:	699a      	ldr	r2, [r3, #24]
 8008e10:	693b      	ldr	r3, [r7, #16]
 8008e12:	899b      	ldrh	r3, [r3, #12]
 8008e14:	4619      	mov	r1, r3
 8008e16:	683b      	ldr	r3, [r7, #0]
 8008e18:	fbb3 f3f1 	udiv	r3, r3, r1
 8008e1c:	441a      	add	r2, r3
 8008e1e:	687b      	ldr	r3, [r7, #4]
 8008e20:	619a      	str	r2, [r3, #24]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 8008e22:	693b      	ldr	r3, [r7, #16]
 8008e24:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 8008e28:	693b      	ldr	r3, [r7, #16]
 8008e2a:	899b      	ldrh	r3, [r3, #12]
 8008e2c:	461a      	mov	r2, r3
 8008e2e:	683b      	ldr	r3, [r7, #0]
 8008e30:	fbb3 f0f2 	udiv	r0, r3, r2
 8008e34:	fb00 f202 	mul.w	r2, r0, r2
 8008e38:	1a9b      	subs	r3, r3, r2
 8008e3a:	18ca      	adds	r2, r1, r3
 8008e3c:	687b      	ldr	r3, [r7, #4]
 8008e3e:	61da      	str	r2, [r3, #28]

	return FR_OK;
 8008e40:	2300      	movs	r3, #0
}
 8008e42:	4618      	mov	r0, r3
 8008e44:	3718      	adds	r7, #24
 8008e46:	46bd      	mov	sp, r7
 8008e48:	bd80      	pop	{r7, pc}

08008e4a <dir_next>:

static FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,				/* Pointer to the directory object */
	int stretch				/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 8008e4a:	b580      	push	{r7, lr}
 8008e4c:	b086      	sub	sp, #24
 8008e4e:	af00      	add	r7, sp, #0
 8008e50:	6078      	str	r0, [r7, #4]
 8008e52:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 8008e54:	687b      	ldr	r3, [r7, #4]
 8008e56:	681b      	ldr	r3, [r3, #0]
 8008e58:	613b      	str	r3, [r7, #16]


	ofs = dp->dptr + SZDIRE;	/* Next entry */
 8008e5a:	687b      	ldr	r3, [r7, #4]
 8008e5c:	691b      	ldr	r3, [r3, #16]
 8008e5e:	3320      	adds	r3, #32
 8008e60:	60fb      	str	r3, [r7, #12]
	if (ofs >= (DWORD)((FF_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) dp->sect = 0;	/* Disable it if the offset reached the max value */
 8008e62:	68fb      	ldr	r3, [r7, #12]
 8008e64:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8008e68:	d302      	bcc.n	8008e70 <dir_next+0x26>
 8008e6a:	687b      	ldr	r3, [r7, #4]
 8008e6c:	2200      	movs	r2, #0
 8008e6e:	619a      	str	r2, [r3, #24]
	if (dp->sect == 0) return FR_NO_FILE;	/* Report EOT if it has been disabled */
 8008e70:	687b      	ldr	r3, [r7, #4]
 8008e72:	699b      	ldr	r3, [r3, #24]
 8008e74:	2b00      	cmp	r3, #0
 8008e76:	d101      	bne.n	8008e7c <dir_next+0x32>
 8008e78:	2304      	movs	r3, #4
 8008e7a:	e088      	b.n	8008f8e <dir_next+0x144>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 8008e7c:	693b      	ldr	r3, [r7, #16]
 8008e7e:	899b      	ldrh	r3, [r3, #12]
 8008e80:	461a      	mov	r2, r3
 8008e82:	68fb      	ldr	r3, [r7, #12]
 8008e84:	fbb3 f1f2 	udiv	r1, r3, r2
 8008e88:	fb01 f202 	mul.w	r2, r1, r2
 8008e8c:	1a9b      	subs	r3, r3, r2
 8008e8e:	2b00      	cmp	r3, #0
 8008e90:	d16a      	bne.n	8008f68 <dir_next+0x11e>
		dp->sect++;				/* Next sector */
 8008e92:	687b      	ldr	r3, [r7, #4]
 8008e94:	699b      	ldr	r3, [r3, #24]
 8008e96:	1c5a      	adds	r2, r3, #1
 8008e98:	687b      	ldr	r3, [r7, #4]
 8008e9a:	619a      	str	r2, [r3, #24]

		if (dp->clust == 0) {	/* Static table */
 8008e9c:	687b      	ldr	r3, [r7, #4]
 8008e9e:	695b      	ldr	r3, [r3, #20]
 8008ea0:	2b00      	cmp	r3, #0
 8008ea2:	d10a      	bne.n	8008eba <dir_next+0x70>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 8008ea4:	68fb      	ldr	r3, [r7, #12]
 8008ea6:	095b      	lsrs	r3, r3, #5
 8008ea8:	693a      	ldr	r2, [r7, #16]
 8008eaa:	8912      	ldrh	r2, [r2, #8]
 8008eac:	4293      	cmp	r3, r2
 8008eae:	d35b      	bcc.n	8008f68 <dir_next+0x11e>
				dp->sect = 0; return FR_NO_FILE;
 8008eb0:	687b      	ldr	r3, [r7, #4]
 8008eb2:	2200      	movs	r2, #0
 8008eb4:	619a      	str	r2, [r3, #24]
 8008eb6:	2304      	movs	r3, #4
 8008eb8:	e069      	b.n	8008f8e <dir_next+0x144>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {	/* Cluster changed? */
 8008eba:	693b      	ldr	r3, [r7, #16]
 8008ebc:	899b      	ldrh	r3, [r3, #12]
 8008ebe:	461a      	mov	r2, r3
 8008ec0:	68fb      	ldr	r3, [r7, #12]
 8008ec2:	fbb3 f3f2 	udiv	r3, r3, r2
 8008ec6:	693a      	ldr	r2, [r7, #16]
 8008ec8:	8952      	ldrh	r2, [r2, #10]
 8008eca:	3a01      	subs	r2, #1
 8008ecc:	4013      	ands	r3, r2
 8008ece:	2b00      	cmp	r3, #0
 8008ed0:	d14a      	bne.n	8008f68 <dir_next+0x11e>
				clst = get_fat(&dp->obj, dp->clust);		/* Get next cluster */
 8008ed2:	687a      	ldr	r2, [r7, #4]
 8008ed4:	687b      	ldr	r3, [r7, #4]
 8008ed6:	695b      	ldr	r3, [r3, #20]
 8008ed8:	4619      	mov	r1, r3
 8008eda:	4610      	mov	r0, r2
 8008edc:	f7ff fbc1 	bl	8008662 <get_fat>
 8008ee0:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;			/* Internal error */
 8008ee2:	697b      	ldr	r3, [r7, #20]
 8008ee4:	2b01      	cmp	r3, #1
 8008ee6:	d801      	bhi.n	8008eec <dir_next+0xa2>
 8008ee8:	2302      	movs	r3, #2
 8008eea:	e050      	b.n	8008f8e <dir_next+0x144>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8008eec:	697b      	ldr	r3, [r7, #20]
 8008eee:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008ef2:	d101      	bne.n	8008ef8 <dir_next+0xae>
 8008ef4:	2301      	movs	r3, #1
 8008ef6:	e04a      	b.n	8008f8e <dir_next+0x144>
				if (clst >= fs->n_fatent) {					/* It reached end of dynamic table */
 8008ef8:	693b      	ldr	r3, [r7, #16]
 8008efa:	699b      	ldr	r3, [r3, #24]
 8008efc:	697a      	ldr	r2, [r7, #20]
 8008efe:	429a      	cmp	r2, r3
 8008f00:	d328      	bcc.n	8008f54 <dir_next+0x10a>
#if !FF_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 8008f02:	683b      	ldr	r3, [r7, #0]
 8008f04:	2b00      	cmp	r3, #0
 8008f06:	d104      	bne.n	8008f12 <dir_next+0xc8>
						dp->sect = 0; return FR_NO_FILE;
 8008f08:	687b      	ldr	r3, [r7, #4]
 8008f0a:	2200      	movs	r2, #0
 8008f0c:	619a      	str	r2, [r3, #24]
 8008f0e:	2304      	movs	r3, #4
 8008f10:	e03d      	b.n	8008f8e <dir_next+0x144>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 8008f12:	687a      	ldr	r2, [r7, #4]
 8008f14:	687b      	ldr	r3, [r7, #4]
 8008f16:	695b      	ldr	r3, [r3, #20]
 8008f18:	4619      	mov	r1, r3
 8008f1a:	4610      	mov	r0, r2
 8008f1c:	f7ff fdf3 	bl	8008b06 <create_chain>
 8008f20:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8008f22:	697b      	ldr	r3, [r7, #20]
 8008f24:	2b00      	cmp	r3, #0
 8008f26:	d101      	bne.n	8008f2c <dir_next+0xe2>
 8008f28:	2307      	movs	r3, #7
 8008f2a:	e030      	b.n	8008f8e <dir_next+0x144>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 8008f2c:	697b      	ldr	r3, [r7, #20]
 8008f2e:	2b01      	cmp	r3, #1
 8008f30:	d101      	bne.n	8008f36 <dir_next+0xec>
 8008f32:	2302      	movs	r3, #2
 8008f34:	e02b      	b.n	8008f8e <dir_next+0x144>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8008f36:	697b      	ldr	r3, [r7, #20]
 8008f38:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008f3c:	d101      	bne.n	8008f42 <dir_next+0xf8>
 8008f3e:	2301      	movs	r3, #1
 8008f40:	e025      	b.n	8008f8e <dir_next+0x144>
					if (dir_clear(fs, clst) != FR_OK) return FR_DISK_ERR;	/* Clean up the stretched table */
 8008f42:	6979      	ldr	r1, [r7, #20]
 8008f44:	6938      	ldr	r0, [r7, #16]
 8008f46:	f7ff feaf 	bl	8008ca8 <dir_clear>
 8008f4a:	4603      	mov	r3, r0
 8008f4c:	2b00      	cmp	r3, #0
 8008f4e:	d001      	beq.n	8008f54 <dir_next+0x10a>
 8008f50:	2301      	movs	r3, #1
 8008f52:	e01c      	b.n	8008f8e <dir_next+0x144>
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 8008f54:	687b      	ldr	r3, [r7, #4]
 8008f56:	697a      	ldr	r2, [r7, #20]
 8008f58:	615a      	str	r2, [r3, #20]
				dp->sect = clst2sect(fs, clst);
 8008f5a:	6979      	ldr	r1, [r7, #20]
 8008f5c:	6938      	ldr	r0, [r7, #16]
 8008f5e:	f7ff fb61 	bl	8008624 <clst2sect>
 8008f62:	4602      	mov	r2, r0
 8008f64:	687b      	ldr	r3, [r7, #4]
 8008f66:	619a      	str	r2, [r3, #24]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 8008f68:	687b      	ldr	r3, [r7, #4]
 8008f6a:	68fa      	ldr	r2, [r7, #12]
 8008f6c:	611a      	str	r2, [r3, #16]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8008f6e:	693b      	ldr	r3, [r7, #16]
 8008f70:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 8008f74:	693b      	ldr	r3, [r7, #16]
 8008f76:	899b      	ldrh	r3, [r3, #12]
 8008f78:	461a      	mov	r2, r3
 8008f7a:	68fb      	ldr	r3, [r7, #12]
 8008f7c:	fbb3 f0f2 	udiv	r0, r3, r2
 8008f80:	fb00 f202 	mul.w	r2, r0, r2
 8008f84:	1a9b      	subs	r3, r3, r2
 8008f86:	18ca      	adds	r2, r1, r3
 8008f88:	687b      	ldr	r3, [r7, #4]
 8008f8a:	61da      	str	r2, [r3, #28]

	return FR_OK;
 8008f8c:	2300      	movs	r3, #0
}
 8008f8e:	4618      	mov	r0, r3
 8008f90:	3718      	adds	r7, #24
 8008f92:	46bd      	mov	sp, r7
 8008f94:	bd80      	pop	{r7, pc}

08008f96 <dir_alloc>:

static FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,				/* Pointer to the directory object */
	UINT n_ent				/* Number of contiguous entries to allocate */
)
{
 8008f96:	b580      	push	{r7, lr}
 8008f98:	b086      	sub	sp, #24
 8008f9a:	af00      	add	r7, sp, #0
 8008f9c:	6078      	str	r0, [r7, #4]
 8008f9e:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 8008fa0:	687b      	ldr	r3, [r7, #4]
 8008fa2:	681b      	ldr	r3, [r3, #0]
 8008fa4:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 8008fa6:	2100      	movs	r1, #0
 8008fa8:	6878      	ldr	r0, [r7, #4]
 8008faa:	f7ff fec5 	bl	8008d38 <dir_sdi>
 8008fae:	4603      	mov	r3, r0
 8008fb0:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8008fb2:	7dfb      	ldrb	r3, [r7, #23]
 8008fb4:	2b00      	cmp	r3, #0
 8008fb6:	d12b      	bne.n	8009010 <dir_alloc+0x7a>
		n = 0;
 8008fb8:	2300      	movs	r3, #0
 8008fba:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 8008fbc:	687b      	ldr	r3, [r7, #4]
 8008fbe:	699b      	ldr	r3, [r3, #24]
 8008fc0:	4619      	mov	r1, r3
 8008fc2:	68f8      	ldr	r0, [r7, #12]
 8008fc4:	f7ff fa93 	bl	80084ee <move_window>
 8008fc8:	4603      	mov	r3, r0
 8008fca:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8008fcc:	7dfb      	ldrb	r3, [r7, #23]
 8008fce:	2b00      	cmp	r3, #0
 8008fd0:	d11d      	bne.n	800900e <dir_alloc+0x78>
#if FF_FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {	/* Is the entry free? */
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {	/* Is the entry free? */
 8008fd2:	687b      	ldr	r3, [r7, #4]
 8008fd4:	69db      	ldr	r3, [r3, #28]
 8008fd6:	781b      	ldrb	r3, [r3, #0]
 8008fd8:	2be5      	cmp	r3, #229	@ 0xe5
 8008fda:	d004      	beq.n	8008fe6 <dir_alloc+0x50>
 8008fdc:	687b      	ldr	r3, [r7, #4]
 8008fde:	69db      	ldr	r3, [r3, #28]
 8008fe0:	781b      	ldrb	r3, [r3, #0]
 8008fe2:	2b00      	cmp	r3, #0
 8008fe4:	d107      	bne.n	8008ff6 <dir_alloc+0x60>
#endif
				if (++n == n_ent) break;	/* Is a block of contiguous free entries found? */
 8008fe6:	693b      	ldr	r3, [r7, #16]
 8008fe8:	3301      	adds	r3, #1
 8008fea:	613b      	str	r3, [r7, #16]
 8008fec:	693a      	ldr	r2, [r7, #16]
 8008fee:	683b      	ldr	r3, [r7, #0]
 8008ff0:	429a      	cmp	r2, r3
 8008ff2:	d102      	bne.n	8008ffa <dir_alloc+0x64>
 8008ff4:	e00c      	b.n	8009010 <dir_alloc+0x7a>
			} else {
				n = 0;				/* Not a free entry, restart to search */
 8008ff6:	2300      	movs	r3, #0
 8008ff8:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);	/* Next entry with table stretch enabled */
 8008ffa:	2101      	movs	r1, #1
 8008ffc:	6878      	ldr	r0, [r7, #4]
 8008ffe:	f7ff ff24 	bl	8008e4a <dir_next>
 8009002:	4603      	mov	r3, r0
 8009004:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);
 8009006:	7dfb      	ldrb	r3, [r7, #23]
 8009008:	2b00      	cmp	r3, #0
 800900a:	d0d7      	beq.n	8008fbc <dir_alloc+0x26>
 800900c:	e000      	b.n	8009010 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 800900e:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 8009010:	7dfb      	ldrb	r3, [r7, #23]
 8009012:	2b04      	cmp	r3, #4
 8009014:	d101      	bne.n	800901a <dir_alloc+0x84>
 8009016:	2307      	movs	r3, #7
 8009018:	75fb      	strb	r3, [r7, #23]
	return res;
 800901a:	7dfb      	ldrb	r3, [r7, #23]
}
 800901c:	4618      	mov	r0, r3
 800901e:	3718      	adds	r7, #24
 8009020:	46bd      	mov	sp, r7
 8009022:	bd80      	pop	{r7, pc}

08009024 <ld_clust>:

static DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,			/* Pointer to the fs object */
	const BYTE* dir		/* Pointer to the key entry */
)
{
 8009024:	b580      	push	{r7, lr}
 8009026:	b084      	sub	sp, #16
 8009028:	af00      	add	r7, sp, #0
 800902a:	6078      	str	r0, [r7, #4]
 800902c:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 800902e:	683b      	ldr	r3, [r7, #0]
 8009030:	331a      	adds	r3, #26
 8009032:	4618      	mov	r0, r3
 8009034:	f7ff f97a 	bl	800832c <ld_word>
 8009038:	4603      	mov	r3, r0
 800903a:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 800903c:	687b      	ldr	r3, [r7, #4]
 800903e:	781b      	ldrb	r3, [r3, #0]
 8009040:	2b03      	cmp	r3, #3
 8009042:	d109      	bne.n	8009058 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 8009044:	683b      	ldr	r3, [r7, #0]
 8009046:	3314      	adds	r3, #20
 8009048:	4618      	mov	r0, r3
 800904a:	f7ff f96f 	bl	800832c <ld_word>
 800904e:	4603      	mov	r3, r0
 8009050:	041b      	lsls	r3, r3, #16
 8009052:	68fa      	ldr	r2, [r7, #12]
 8009054:	4313      	orrs	r3, r2
 8009056:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 8009058:	68fb      	ldr	r3, [r7, #12]
}
 800905a:	4618      	mov	r0, r3
 800905c:	3710      	adds	r7, #16
 800905e:	46bd      	mov	sp, r7
 8009060:	bd80      	pop	{r7, pc}

08009062 <st_clust>:
static void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 8009062:	b580      	push	{r7, lr}
 8009064:	b084      	sub	sp, #16
 8009066:	af00      	add	r7, sp, #0
 8009068:	60f8      	str	r0, [r7, #12]
 800906a:	60b9      	str	r1, [r7, #8]
 800906c:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 800906e:	68bb      	ldr	r3, [r7, #8]
 8009070:	331a      	adds	r3, #26
 8009072:	687a      	ldr	r2, [r7, #4]
 8009074:	b292      	uxth	r2, r2
 8009076:	4611      	mov	r1, r2
 8009078:	4618      	mov	r0, r3
 800907a:	f7ff f993 	bl	80083a4 <st_word>
	if (fs->fs_type == FS_FAT32) {
 800907e:	68fb      	ldr	r3, [r7, #12]
 8009080:	781b      	ldrb	r3, [r3, #0]
 8009082:	2b03      	cmp	r3, #3
 8009084:	d109      	bne.n	800909a <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 8009086:	68bb      	ldr	r3, [r7, #8]
 8009088:	f103 0214 	add.w	r2, r3, #20
 800908c:	687b      	ldr	r3, [r7, #4]
 800908e:	0c1b      	lsrs	r3, r3, #16
 8009090:	b29b      	uxth	r3, r3
 8009092:	4619      	mov	r1, r3
 8009094:	4610      	mov	r0, r2
 8009096:	f7ff f985 	bl	80083a4 <st_word>
	}
}
 800909a:	bf00      	nop
 800909c:	3710      	adds	r7, #16
 800909e:	46bd      	mov	sp, r7
 80090a0:	bd80      	pop	{r7, pc}

080090a2 <dir_find>:
/*-----------------------------------------------------------------------*/

static FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp					/* Pointer to the directory object with the file name */
)
{
 80090a2:	b580      	push	{r7, lr}
 80090a4:	b086      	sub	sp, #24
 80090a6:	af00      	add	r7, sp, #0
 80090a8:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 80090aa:	687b      	ldr	r3, [r7, #4]
 80090ac:	681b      	ldr	r3, [r3, #0]
 80090ae:	613b      	str	r3, [r7, #16]
	BYTE c;
#if FF_USE_LFN
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 80090b0:	2100      	movs	r1, #0
 80090b2:	6878      	ldr	r0, [r7, #4]
 80090b4:	f7ff fe40 	bl	8008d38 <dir_sdi>
 80090b8:	4603      	mov	r3, r0
 80090ba:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 80090bc:	7dfb      	ldrb	r3, [r7, #23]
 80090be:	2b00      	cmp	r3, #0
 80090c0:	d001      	beq.n	80090c6 <dir_find+0x24>
 80090c2:	7dfb      	ldrb	r3, [r7, #23]
 80090c4:	e03e      	b.n	8009144 <dir_find+0xa2>
	/* On the FAT/FAT32 volume */
#if FF_USE_LFN
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 80090c6:	687b      	ldr	r3, [r7, #4]
 80090c8:	699b      	ldr	r3, [r3, #24]
 80090ca:	4619      	mov	r1, r3
 80090cc:	6938      	ldr	r0, [r7, #16]
 80090ce:	f7ff fa0e 	bl	80084ee <move_window>
 80090d2:	4603      	mov	r3, r0
 80090d4:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 80090d6:	7dfb      	ldrb	r3, [r7, #23]
 80090d8:	2b00      	cmp	r3, #0
 80090da:	d12f      	bne.n	800913c <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 80090dc:	687b      	ldr	r3, [r7, #4]
 80090de:	69db      	ldr	r3, [r3, #28]
 80090e0:	781b      	ldrb	r3, [r3, #0]
 80090e2:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 80090e4:	7bfb      	ldrb	r3, [r7, #15]
 80090e6:	2b00      	cmp	r3, #0
 80090e8:	d102      	bne.n	80090f0 <dir_find+0x4e>
 80090ea:	2304      	movs	r3, #4
 80090ec:	75fb      	strb	r3, [r7, #23]
 80090ee:	e028      	b.n	8009142 <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !memcmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 80090f0:	687b      	ldr	r3, [r7, #4]
 80090f2:	69db      	ldr	r3, [r3, #28]
 80090f4:	330b      	adds	r3, #11
 80090f6:	781b      	ldrb	r3, [r3, #0]
 80090f8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80090fc:	b2da      	uxtb	r2, r3
 80090fe:	687b      	ldr	r3, [r7, #4]
 8009100:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !memcmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 8009102:	687b      	ldr	r3, [r7, #4]
 8009104:	69db      	ldr	r3, [r3, #28]
 8009106:	330b      	adds	r3, #11
 8009108:	781b      	ldrb	r3, [r3, #0]
 800910a:	f003 0308 	and.w	r3, r3, #8
 800910e:	2b00      	cmp	r3, #0
 8009110:	d10a      	bne.n	8009128 <dir_find+0x86>
 8009112:	687b      	ldr	r3, [r7, #4]
 8009114:	69d8      	ldr	r0, [r3, #28]
 8009116:	687b      	ldr	r3, [r7, #4]
 8009118:	3320      	adds	r3, #32
 800911a:	220b      	movs	r2, #11
 800911c:	4619      	mov	r1, r3
 800911e:	f00d f9a9 	bl	8016474 <memcmp>
 8009122:	4603      	mov	r3, r0
 8009124:	2b00      	cmp	r3, #0
 8009126:	d00b      	beq.n	8009140 <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 8009128:	2100      	movs	r1, #0
 800912a:	6878      	ldr	r0, [r7, #4]
 800912c:	f7ff fe8d 	bl	8008e4a <dir_next>
 8009130:	4603      	mov	r3, r0
 8009132:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 8009134:	7dfb      	ldrb	r3, [r7, #23]
 8009136:	2b00      	cmp	r3, #0
 8009138:	d0c5      	beq.n	80090c6 <dir_find+0x24>
 800913a:	e002      	b.n	8009142 <dir_find+0xa0>
		if (res != FR_OK) break;
 800913c:	bf00      	nop
 800913e:	e000      	b.n	8009142 <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !memcmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 8009140:	bf00      	nop

	return res;
 8009142:	7dfb      	ldrb	r3, [r7, #23]
}
 8009144:	4618      	mov	r0, r3
 8009146:	3718      	adds	r7, #24
 8009148:	46bd      	mov	sp, r7
 800914a:	bd80      	pop	{r7, pc}

0800914c <dir_register>:
/*-----------------------------------------------------------------------*/

static FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp						/* Target directory with object name to be created */
)
{
 800914c:	b580      	push	{r7, lr}
 800914e:	b084      	sub	sp, #16
 8009150:	af00      	add	r7, sp, #0
 8009152:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8009154:	687b      	ldr	r3, [r7, #4]
 8009156:	681b      	ldr	r3, [r3, #0]
 8009158:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --n_ent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 800915a:	2101      	movs	r1, #1
 800915c:	6878      	ldr	r0, [r7, #4]
 800915e:	f7ff ff1a 	bl	8008f96 <dir_alloc>
 8009162:	4603      	mov	r3, r0
 8009164:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 8009166:	7bfb      	ldrb	r3, [r7, #15]
 8009168:	2b00      	cmp	r3, #0
 800916a:	d11c      	bne.n	80091a6 <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 800916c:	687b      	ldr	r3, [r7, #4]
 800916e:	699b      	ldr	r3, [r3, #24]
 8009170:	4619      	mov	r1, r3
 8009172:	68b8      	ldr	r0, [r7, #8]
 8009174:	f7ff f9bb 	bl	80084ee <move_window>
 8009178:	4603      	mov	r3, r0
 800917a:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800917c:	7bfb      	ldrb	r3, [r7, #15]
 800917e:	2b00      	cmp	r3, #0
 8009180:	d111      	bne.n	80091a6 <dir_register+0x5a>
			memset(dp->dir, 0, SZDIRE);	/* Clean the entry */
 8009182:	687b      	ldr	r3, [r7, #4]
 8009184:	69db      	ldr	r3, [r3, #28]
 8009186:	2220      	movs	r2, #32
 8009188:	2100      	movs	r1, #0
 800918a:	4618      	mov	r0, r3
 800918c:	f00d f982 	bl	8016494 <memset>
			memcpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 8009190:	687b      	ldr	r3, [r7, #4]
 8009192:	69d8      	ldr	r0, [r3, #28]
 8009194:	687b      	ldr	r3, [r7, #4]
 8009196:	3320      	adds	r3, #32
 8009198:	220b      	movs	r2, #11
 800919a:	4619      	mov	r1, r3
 800919c:	f00d f9fe 	bl	801659c <memcpy>
#if FF_USE_LFN
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 80091a0:	68bb      	ldr	r3, [r7, #8]
 80091a2:	2201      	movs	r2, #1
 80091a4:	711a      	strb	r2, [r3, #4]
		}
	}

	return res;
 80091a6:	7bfb      	ldrb	r3, [r7, #15]
}
 80091a8:	4618      	mov	r0, r3
 80091aa:	3710      	adds	r7, #16
 80091ac:	46bd      	mov	sp, r7
 80091ae:	bd80      	pop	{r7, pc}

080091b0 <create_name>:

static FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,					/* Pointer to the directory object */
	const TCHAR** path			/* Pointer to pointer to the segment in the path string */
)
{
 80091b0:	b580      	push	{r7, lr}
 80091b2:	b08a      	sub	sp, #40	@ 0x28
 80091b4:	af00      	add	r7, sp, #0
 80091b6:	6078      	str	r0, [r7, #4]
 80091b8:	6039      	str	r1, [r7, #0]
	BYTE *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 80091ba:	683b      	ldr	r3, [r7, #0]
 80091bc:	681b      	ldr	r3, [r3, #0]
 80091be:	617b      	str	r3, [r7, #20]
 80091c0:	687b      	ldr	r3, [r7, #4]
 80091c2:	3320      	adds	r3, #32
 80091c4:	613b      	str	r3, [r7, #16]
	memset(sfn, ' ', 11);
 80091c6:	220b      	movs	r2, #11
 80091c8:	2120      	movs	r1, #32
 80091ca:	6938      	ldr	r0, [r7, #16]
 80091cc:	f00d f962 	bl	8016494 <memset>
	si = i = 0; ni = 8;
 80091d0:	2300      	movs	r3, #0
 80091d2:	61bb      	str	r3, [r7, #24]
 80091d4:	69bb      	ldr	r3, [r7, #24]
 80091d6:	61fb      	str	r3, [r7, #28]
 80091d8:	2308      	movs	r3, #8
 80091da:	623b      	str	r3, [r7, #32]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];				/* Get a byte */
 80091dc:	69fb      	ldr	r3, [r7, #28]
 80091de:	1c5a      	adds	r2, r3, #1
 80091e0:	61fa      	str	r2, [r7, #28]
 80091e2:	697a      	ldr	r2, [r7, #20]
 80091e4:	4413      	add	r3, r2
 80091e6:	781b      	ldrb	r3, [r3, #0]
 80091e8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
		if (c <= ' ') break; 			/* Break if end of the path name */
 80091ec:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80091f0:	2b20      	cmp	r3, #32
 80091f2:	f240 8089 	bls.w	8009308 <create_name+0x158>
		if (IsSeparator(c)) {			/* Break if a separator is found */
 80091f6:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80091fa:	2b2f      	cmp	r3, #47	@ 0x2f
 80091fc:	d007      	beq.n	800920e <create_name+0x5e>
 80091fe:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8009202:	2b5c      	cmp	r3, #92	@ 0x5c
 8009204:	d110      	bne.n	8009228 <create_name+0x78>
			while (IsSeparator(p[si])) si++;	/* Skip duplicated separator if exist */
 8009206:	e002      	b.n	800920e <create_name+0x5e>
 8009208:	69fb      	ldr	r3, [r7, #28]
 800920a:	3301      	adds	r3, #1
 800920c:	61fb      	str	r3, [r7, #28]
 800920e:	697a      	ldr	r2, [r7, #20]
 8009210:	69fb      	ldr	r3, [r7, #28]
 8009212:	4413      	add	r3, r2
 8009214:	781b      	ldrb	r3, [r3, #0]
 8009216:	2b2f      	cmp	r3, #47	@ 0x2f
 8009218:	d0f6      	beq.n	8009208 <create_name+0x58>
 800921a:	697a      	ldr	r2, [r7, #20]
 800921c:	69fb      	ldr	r3, [r7, #28]
 800921e:	4413      	add	r3, r2
 8009220:	781b      	ldrb	r3, [r3, #0]
 8009222:	2b5c      	cmp	r3, #92	@ 0x5c
 8009224:	d0f0      	beq.n	8009208 <create_name+0x58>
			break;
 8009226:	e070      	b.n	800930a <create_name+0x15a>
		}
		if (c == '.' || i >= ni) {		/* End of body or field overflow? */
 8009228:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800922c:	2b2e      	cmp	r3, #46	@ 0x2e
 800922e:	d003      	beq.n	8009238 <create_name+0x88>
 8009230:	69ba      	ldr	r2, [r7, #24]
 8009232:	6a3b      	ldr	r3, [r7, #32]
 8009234:	429a      	cmp	r2, r3
 8009236:	d30d      	bcc.n	8009254 <create_name+0xa4>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Field overflow or invalid dot? */
 8009238:	6a3b      	ldr	r3, [r7, #32]
 800923a:	2b0b      	cmp	r3, #11
 800923c:	d003      	beq.n	8009246 <create_name+0x96>
 800923e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8009242:	2b2e      	cmp	r3, #46	@ 0x2e
 8009244:	d001      	beq.n	800924a <create_name+0x9a>
 8009246:	2306      	movs	r3, #6
 8009248:	e081      	b.n	800934e <create_name+0x19e>
			i = 8; ni = 11;				/* Enter file extension field */
 800924a:	2308      	movs	r3, #8
 800924c:	61bb      	str	r3, [r7, #24]
 800924e:	230b      	movs	r3, #11
 8009250:	623b      	str	r3, [r7, #32]
			continue;
 8009252:	e058      	b.n	8009306 <create_name+0x156>
#if FF_CODE_PAGE == 0
		if (ExCvt && c >= 0x80) {		/* Is SBC extended character? */
			c = ExCvt[c & 0x7F];		/* To upper SBC extended character */
		}
#elif FF_CODE_PAGE < 900
		if (c >= 0x80) {				/* Is SBC extended character? */
 8009254:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8009258:	2b00      	cmp	r3, #0
 800925a:	da07      	bge.n	800926c <create_name+0xbc>
			c = ExCvt[c & 0x7F];		/* To upper SBC extended character */
 800925c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8009260:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009264:	4a3c      	ldr	r2, [pc, #240]	@ (8009358 <create_name+0x1a8>)
 8009266:	5cd3      	ldrb	r3, [r2, r3]
 8009268:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
		}
#endif
		if (dbc_1st(c)) {				/* Check if it is a DBC 1st byte */
 800926c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8009270:	4618      	mov	r0, r3
 8009272:	f7ff f8de 	bl	8008432 <dbc_1st>
 8009276:	4603      	mov	r3, r0
 8009278:	2b00      	cmp	r3, #0
 800927a:	d024      	beq.n	80092c6 <create_name+0x116>
			d = (BYTE)p[si++];			/* Get 2nd byte */
 800927c:	69fb      	ldr	r3, [r7, #28]
 800927e:	1c5a      	adds	r2, r3, #1
 8009280:	61fa      	str	r2, [r7, #28]
 8009282:	697a      	ldr	r2, [r7, #20]
 8009284:	4413      	add	r3, r2
 8009286:	781b      	ldrb	r3, [r3, #0]
 8009288:	73fb      	strb	r3, [r7, #15]
			if (!dbc_2nd(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
 800928a:	7bfb      	ldrb	r3, [r7, #15]
 800928c:	4618      	mov	r0, r3
 800928e:	f7ff f8e1 	bl	8008454 <dbc_2nd>
 8009292:	4603      	mov	r3, r0
 8009294:	2b00      	cmp	r3, #0
 8009296:	d004      	beq.n	80092a2 <create_name+0xf2>
 8009298:	6a3b      	ldr	r3, [r7, #32]
 800929a:	3b01      	subs	r3, #1
 800929c:	69ba      	ldr	r2, [r7, #24]
 800929e:	429a      	cmp	r2, r3
 80092a0:	d301      	bcc.n	80092a6 <create_name+0xf6>
 80092a2:	2306      	movs	r3, #6
 80092a4:	e053      	b.n	800934e <create_name+0x19e>
			sfn[i++] = c;
 80092a6:	69bb      	ldr	r3, [r7, #24]
 80092a8:	1c5a      	adds	r2, r3, #1
 80092aa:	61ba      	str	r2, [r7, #24]
 80092ac:	693a      	ldr	r2, [r7, #16]
 80092ae:	4413      	add	r3, r2
 80092b0:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 80092b4:	701a      	strb	r2, [r3, #0]
			sfn[i++] = d;
 80092b6:	69bb      	ldr	r3, [r7, #24]
 80092b8:	1c5a      	adds	r2, r3, #1
 80092ba:	61ba      	str	r2, [r7, #24]
 80092bc:	693a      	ldr	r2, [r7, #16]
 80092be:	4413      	add	r3, r2
 80092c0:	7bfa      	ldrb	r2, [r7, #15]
 80092c2:	701a      	strb	r2, [r3, #0]
 80092c4:	e78a      	b.n	80091dc <create_name+0x2c>
		} else {						/* SBC */
			if (strchr("*+,:;<=>[]|\"\?\x7F", (int)c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 80092c6:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80092ca:	4619      	mov	r1, r3
 80092cc:	4823      	ldr	r0, [pc, #140]	@ (800935c <create_name+0x1ac>)
 80092ce:	f00d f8e9 	bl	80164a4 <strchr>
 80092d2:	4603      	mov	r3, r0
 80092d4:	2b00      	cmp	r3, #0
 80092d6:	d001      	beq.n	80092dc <create_name+0x12c>
 80092d8:	2306      	movs	r3, #6
 80092da:	e038      	b.n	800934e <create_name+0x19e>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 80092dc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80092e0:	2b60      	cmp	r3, #96	@ 0x60
 80092e2:	d908      	bls.n	80092f6 <create_name+0x146>
 80092e4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80092e8:	2b7a      	cmp	r3, #122	@ 0x7a
 80092ea:	d804      	bhi.n	80092f6 <create_name+0x146>
 80092ec:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80092f0:	3b20      	subs	r3, #32
 80092f2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			sfn[i++] = c;
 80092f6:	69bb      	ldr	r3, [r7, #24]
 80092f8:	1c5a      	adds	r2, r3, #1
 80092fa:	61ba      	str	r2, [r7, #24]
 80092fc:	693a      	ldr	r2, [r7, #16]
 80092fe:	4413      	add	r3, r2
 8009300:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 8009304:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];				/* Get a byte */
 8009306:	e769      	b.n	80091dc <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 8009308:	bf00      	nop
		}
	}
	*path = &p[si];						/* Return pointer to the next segment */
 800930a:	697a      	ldr	r2, [r7, #20]
 800930c:	69fb      	ldr	r3, [r7, #28]
 800930e:	441a      	add	r2, r3
 8009310:	683b      	ldr	r3, [r7, #0]
 8009312:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 8009314:	69bb      	ldr	r3, [r7, #24]
 8009316:	2b00      	cmp	r3, #0
 8009318:	d101      	bne.n	800931e <create_name+0x16e>
 800931a:	2306      	movs	r3, #6
 800931c:	e017      	b.n	800934e <create_name+0x19e>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 800931e:	693b      	ldr	r3, [r7, #16]
 8009320:	781b      	ldrb	r3, [r3, #0]
 8009322:	2be5      	cmp	r3, #229	@ 0xe5
 8009324:	d102      	bne.n	800932c <create_name+0x17c>
 8009326:	693b      	ldr	r3, [r7, #16]
 8009328:	2205      	movs	r2, #5
 800932a:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ' || p[si] <= ' ') ? NS_LAST : 0;	/* Set last segment flag if end of the path */
 800932c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8009330:	2b20      	cmp	r3, #32
 8009332:	d905      	bls.n	8009340 <create_name+0x190>
 8009334:	697a      	ldr	r2, [r7, #20]
 8009336:	69fb      	ldr	r3, [r7, #28]
 8009338:	4413      	add	r3, r2
 800933a:	781b      	ldrb	r3, [r3, #0]
 800933c:	2b20      	cmp	r3, #32
 800933e:	d801      	bhi.n	8009344 <create_name+0x194>
 8009340:	2204      	movs	r2, #4
 8009342:	e000      	b.n	8009346 <create_name+0x196>
 8009344:	2200      	movs	r2, #0
 8009346:	693b      	ldr	r3, [r7, #16]
 8009348:	330b      	adds	r3, #11
 800934a:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 800934c:	2300      	movs	r3, #0
#endif /* FF_USE_LFN */
}
 800934e:	4618      	mov	r0, r3
 8009350:	3728      	adds	r7, #40	@ 0x28
 8009352:	46bd      	mov	sp, r7
 8009354:	bd80      	pop	{r7, pc}
 8009356:	bf00      	nop
 8009358:	08017e10 	.word	0x08017e10
 800935c:	08017ac4 	.word	0x08017ac4

08009360 <follow_path>:

static FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,					/* Directory object to return last directory and found object */
	const TCHAR* path			/* Full-path string to find a file or directory */
)
{
 8009360:	b580      	push	{r7, lr}
 8009362:	b086      	sub	sp, #24
 8009364:	af00      	add	r7, sp, #0
 8009366:	6078      	str	r0, [r7, #4]
 8009368:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	FATFS *fs = dp->obj.fs;
 800936a:	687b      	ldr	r3, [r7, #4]
 800936c:	681b      	ldr	r3, [r3, #0]
 800936e:	613b      	str	r3, [r7, #16]
	if (!IsSeparator(*path) && (FF_STR_VOLUME_ID != 2 || !IsTerminator(*path))) {	/* Without heading separator */
		dp->obj.sclust = fs->cdir;			/* Start at the current directory */
	} else
#endif
	{										/* With heading separator */
		while (IsSeparator(*path)) path++;	/* Strip separators */
 8009370:	e002      	b.n	8009378 <follow_path+0x18>
 8009372:	683b      	ldr	r3, [r7, #0]
 8009374:	3301      	adds	r3, #1
 8009376:	603b      	str	r3, [r7, #0]
 8009378:	683b      	ldr	r3, [r7, #0]
 800937a:	781b      	ldrb	r3, [r3, #0]
 800937c:	2b2f      	cmp	r3, #47	@ 0x2f
 800937e:	d0f8      	beq.n	8009372 <follow_path+0x12>
 8009380:	683b      	ldr	r3, [r7, #0]
 8009382:	781b      	ldrb	r3, [r3, #0]
 8009384:	2b5c      	cmp	r3, #92	@ 0x5c
 8009386:	d0f4      	beq.n	8009372 <follow_path+0x12>
		dp->obj.sclust = 0;					/* Start from the root directory */
 8009388:	687b      	ldr	r3, [r7, #4]
 800938a:	2200      	movs	r2, #0
 800938c:	609a      	str	r2, [r3, #8]
		dp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 800938e:	683b      	ldr	r3, [r7, #0]
 8009390:	781b      	ldrb	r3, [r3, #0]
 8009392:	2b1f      	cmp	r3, #31
 8009394:	d80a      	bhi.n	80093ac <follow_path+0x4c>
		dp->fn[NSFLAG] = NS_NONAME;
 8009396:	687b      	ldr	r3, [r7, #4]
 8009398:	2280      	movs	r2, #128	@ 0x80
 800939a:	f883 202b 	strb.w	r2, [r3, #43]	@ 0x2b
		res = dir_sdi(dp, 0);
 800939e:	2100      	movs	r1, #0
 80093a0:	6878      	ldr	r0, [r7, #4]
 80093a2:	f7ff fcc9 	bl	8008d38 <dir_sdi>
 80093a6:	4603      	mov	r3, r0
 80093a8:	75fb      	strb	r3, [r7, #23]
 80093aa:	e048      	b.n	800943e <follow_path+0xde>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 80093ac:	463b      	mov	r3, r7
 80093ae:	4619      	mov	r1, r3
 80093b0:	6878      	ldr	r0, [r7, #4]
 80093b2:	f7ff fefd 	bl	80091b0 <create_name>
 80093b6:	4603      	mov	r3, r0
 80093b8:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 80093ba:	7dfb      	ldrb	r3, [r7, #23]
 80093bc:	2b00      	cmp	r3, #0
 80093be:	d139      	bne.n	8009434 <follow_path+0xd4>
			res = dir_find(dp);				/* Find an object with the segment name */
 80093c0:	6878      	ldr	r0, [r7, #4]
 80093c2:	f7ff fe6e 	bl	80090a2 <dir_find>
 80093c6:	4603      	mov	r3, r0
 80093c8:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 80093ca:	687b      	ldr	r3, [r7, #4]
 80093cc:	f893 302b 	ldrb.w	r3, [r3, #43]	@ 0x2b
 80093d0:	73fb      	strb	r3, [r7, #15]
			if (res != FR_OK) {				/* Failed to find the object */
 80093d2:	7dfb      	ldrb	r3, [r7, #23]
 80093d4:	2b00      	cmp	r3, #0
 80093d6:	d00a      	beq.n	80093ee <follow_path+0x8e>
				if (res == FR_NO_FILE) {	/* Object is not found */
 80093d8:	7dfb      	ldrb	r3, [r7, #23]
 80093da:	2b04      	cmp	r3, #4
 80093dc:	d12c      	bne.n	8009438 <follow_path+0xd8>
					if (FF_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 80093de:	7bfb      	ldrb	r3, [r7, #15]
 80093e0:	f003 0304 	and.w	r3, r3, #4
 80093e4:	2b00      	cmp	r3, #0
 80093e6:	d127      	bne.n	8009438 <follow_path+0xd8>
 80093e8:	2305      	movs	r3, #5
 80093ea:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 80093ec:	e024      	b.n	8009438 <follow_path+0xd8>
			}
			if (ns & NS_LAST) break;		/* Last segment matched. Function completed. */
 80093ee:	7bfb      	ldrb	r3, [r7, #15]
 80093f0:	f003 0304 	and.w	r3, r3, #4
 80093f4:	2b00      	cmp	r3, #0
 80093f6:	d121      	bne.n	800943c <follow_path+0xdc>
			/* Get into the sub-directory */
			if (!(dp->obj.attr & AM_DIR)) {	/* It is not a sub-directory and cannot follow */
 80093f8:	687b      	ldr	r3, [r7, #4]
 80093fa:	799b      	ldrb	r3, [r3, #6]
 80093fc:	f003 0310 	and.w	r3, r3, #16
 8009400:	2b00      	cmp	r3, #0
 8009402:	d102      	bne.n	800940a <follow_path+0xaa>
				res = FR_NO_PATH; break;
 8009404:	2305      	movs	r3, #5
 8009406:	75fb      	strb	r3, [r7, #23]
 8009408:	e019      	b.n	800943e <follow_path+0xde>
				dp->obj.c_ofs = dp->blk_ofs;
				init_alloc_info(fs, &dp->obj);	/* Open next directory */
			} else
#endif
			{
				dp->obj.sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 800940a:	693b      	ldr	r3, [r7, #16]
 800940c:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 8009410:	687b      	ldr	r3, [r7, #4]
 8009412:	691b      	ldr	r3, [r3, #16]
 8009414:	693a      	ldr	r2, [r7, #16]
 8009416:	8992      	ldrh	r2, [r2, #12]
 8009418:	fbb3 f0f2 	udiv	r0, r3, r2
 800941c:	fb00 f202 	mul.w	r2, r0, r2
 8009420:	1a9b      	subs	r3, r3, r2
 8009422:	440b      	add	r3, r1
 8009424:	4619      	mov	r1, r3
 8009426:	6938      	ldr	r0, [r7, #16]
 8009428:	f7ff fdfc 	bl	8009024 <ld_clust>
 800942c:	4602      	mov	r2, r0
 800942e:	687b      	ldr	r3, [r7, #4]
 8009430:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8009432:	e7bb      	b.n	80093ac <follow_path+0x4c>
			if (res != FR_OK) break;
 8009434:	bf00      	nop
 8009436:	e002      	b.n	800943e <follow_path+0xde>
				break;
 8009438:	bf00      	nop
 800943a:	e000      	b.n	800943e <follow_path+0xde>
			if (ns & NS_LAST) break;		/* Last segment matched. Function completed. */
 800943c:	bf00      	nop
			}
		}
	}

	return res;
 800943e:	7dfb      	ldrb	r3, [r7, #23]
}
 8009440:	4618      	mov	r0, r3
 8009442:	3718      	adds	r7, #24
 8009444:	46bd      	mov	sp, r7
 8009446:	bd80      	pop	{r7, pc}

08009448 <get_ldnumber>:
/*-----------------------------------------------------------------------*/

static int get_ldnumber (	/* Returns logical drive number (-1:invalid drive number or null pointer) */
	const TCHAR** path		/* Pointer to pointer to the path name */
)
{
 8009448:	b480      	push	{r7}
 800944a:	b08b      	sub	sp, #44	@ 0x2c
 800944c:	af00      	add	r7, sp, #0
 800944e:	6078      	str	r0, [r7, #4]
	const TCHAR *tp;
	const TCHAR *tt;
	TCHAR tc;
	int i;
	int vol = -1;
 8009450:	f04f 33ff 	mov.w	r3, #4294967295
 8009454:	617b      	str	r3, [r7, #20]
#if FF_STR_VOLUME_ID		/* Find string volume ID */
	const char *sp;
	char c;
#endif

	tt = tp = *path;
 8009456:	687b      	ldr	r3, [r7, #4]
 8009458:	681b      	ldr	r3, [r3, #0]
 800945a:	627b      	str	r3, [r7, #36]	@ 0x24
 800945c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800945e:	623b      	str	r3, [r7, #32]
	if (!tp) return vol;	/* Invalid path name? */
 8009460:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009462:	2b00      	cmp	r3, #0
 8009464:	d101      	bne.n	800946a <get_ldnumber+0x22>
 8009466:	697b      	ldr	r3, [r7, #20]
 8009468:	e080      	b.n	800956c <get_ldnumber+0x124>
	do {					/* Find a colon in the path */
		tc = *tt++;
 800946a:	6a3b      	ldr	r3, [r7, #32]
 800946c:	1c5a      	adds	r2, r3, #1
 800946e:	623a      	str	r2, [r7, #32]
 8009470:	781b      	ldrb	r3, [r3, #0]
 8009472:	77fb      	strb	r3, [r7, #31]
	} while (!IsTerminator(tc) && tc != ':');
 8009474:	7ffb      	ldrb	r3, [r7, #31]
 8009476:	2b20      	cmp	r3, #32
 8009478:	d902      	bls.n	8009480 <get_ldnumber+0x38>
 800947a:	7ffb      	ldrb	r3, [r7, #31]
 800947c:	2b3a      	cmp	r3, #58	@ 0x3a
 800947e:	d1f4      	bne.n	800946a <get_ldnumber+0x22>

	if (tc == ':') {	/* DOS/Windows style volume ID? */
 8009480:	7ffb      	ldrb	r3, [r7, #31]
 8009482:	2b3a      	cmp	r3, #58	@ 0x3a
 8009484:	d11c      	bne.n	80094c0 <get_ldnumber+0x78>
		i = FF_VOLUMES;
 8009486:	2302      	movs	r3, #2
 8009488:	61bb      	str	r3, [r7, #24]
		if (IsDigit(*tp) && tp + 2 == tt) {	/* Is there a numeric volume ID + colon? */
 800948a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800948c:	781b      	ldrb	r3, [r3, #0]
 800948e:	2b2f      	cmp	r3, #47	@ 0x2f
 8009490:	d90c      	bls.n	80094ac <get_ldnumber+0x64>
 8009492:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009494:	781b      	ldrb	r3, [r3, #0]
 8009496:	2b39      	cmp	r3, #57	@ 0x39
 8009498:	d808      	bhi.n	80094ac <get_ldnumber+0x64>
 800949a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800949c:	3302      	adds	r3, #2
 800949e:	6a3a      	ldr	r2, [r7, #32]
 80094a0:	429a      	cmp	r2, r3
 80094a2:	d103      	bne.n	80094ac <get_ldnumber+0x64>
			i = (int)*tp - '0';	/* Get the LD number */
 80094a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80094a6:	781b      	ldrb	r3, [r3, #0]
 80094a8:	3b30      	subs	r3, #48	@ 0x30
 80094aa:	61bb      	str	r3, [r7, #24]
					if (IsLower(tc)) tc -= 0x20;
				} while (c && (TCHAR)c == tc);
			} while ((c || tp != tt) && ++i < FF_VOLUMES);	/* Repeat for each id until pattern match */
		}
#endif
		if (i < FF_VOLUMES) {	/* If a volume ID is found, get the drive number and strip it */
 80094ac:	69bb      	ldr	r3, [r7, #24]
 80094ae:	2b01      	cmp	r3, #1
 80094b0:	dc04      	bgt.n	80094bc <get_ldnumber+0x74>
			vol = i;		/* Drive number */
 80094b2:	69bb      	ldr	r3, [r7, #24]
 80094b4:	617b      	str	r3, [r7, #20]
			*path = tt;		/* Snip the drive prefix off */
 80094b6:	687b      	ldr	r3, [r7, #4]
 80094b8:	6a3a      	ldr	r2, [r7, #32]
 80094ba:	601a      	str	r2, [r3, #0]
		}
		return vol;
 80094bc:	697b      	ldr	r3, [r7, #20]
 80094be:	e055      	b.n	800956c <get_ldnumber+0x124>
	}
#if FF_STR_VOLUME_ID == 2		/* Unix style volume ID is enabled */
	if (*tp == '/') {			/* Is there a volume ID? */
 80094c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80094c2:	781b      	ldrb	r3, [r3, #0]
 80094c4:	2b2f      	cmp	r3, #47	@ 0x2f
 80094c6:	d14e      	bne.n	8009566 <get_ldnumber+0x11e>
		while (*(tp + 1) == '/') tp++;	/* Skip duplicated separator */
 80094c8:	e002      	b.n	80094d0 <get_ldnumber+0x88>
 80094ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80094cc:	3301      	adds	r3, #1
 80094ce:	627b      	str	r3, [r7, #36]	@ 0x24
 80094d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80094d2:	3301      	adds	r3, #1
 80094d4:	781b      	ldrb	r3, [r3, #0]
 80094d6:	2b2f      	cmp	r3, #47	@ 0x2f
 80094d8:	d0f7      	beq.n	80094ca <get_ldnumber+0x82>
		i = 0;
 80094da:	2300      	movs	r3, #0
 80094dc:	61bb      	str	r3, [r7, #24]
		do {
			tt = tp; sp = VolumeStr[i]; /* Path name and this string volume ID */
 80094de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80094e0:	623b      	str	r3, [r7, #32]
 80094e2:	4a25      	ldr	r2, [pc, #148]	@ (8009578 <get_ldnumber+0x130>)
 80094e4:	69bb      	ldr	r3, [r7, #24]
 80094e6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80094ea:	613b      	str	r3, [r7, #16]
			do {	/* Compare the volume ID with path name */
				c = *sp++; tc = *(++tt);
 80094ec:	693b      	ldr	r3, [r7, #16]
 80094ee:	1c5a      	adds	r2, r3, #1
 80094f0:	613a      	str	r2, [r7, #16]
 80094f2:	781b      	ldrb	r3, [r3, #0]
 80094f4:	73fb      	strb	r3, [r7, #15]
 80094f6:	6a3b      	ldr	r3, [r7, #32]
 80094f8:	3301      	adds	r3, #1
 80094fa:	623b      	str	r3, [r7, #32]
 80094fc:	6a3b      	ldr	r3, [r7, #32]
 80094fe:	781b      	ldrb	r3, [r3, #0]
 8009500:	77fb      	strb	r3, [r7, #31]
				if (IsLower(c)) c -= 0x20;
 8009502:	7bfb      	ldrb	r3, [r7, #15]
 8009504:	2b60      	cmp	r3, #96	@ 0x60
 8009506:	d905      	bls.n	8009514 <get_ldnumber+0xcc>
 8009508:	7bfb      	ldrb	r3, [r7, #15]
 800950a:	2b7a      	cmp	r3, #122	@ 0x7a
 800950c:	d802      	bhi.n	8009514 <get_ldnumber+0xcc>
 800950e:	7bfb      	ldrb	r3, [r7, #15]
 8009510:	3b20      	subs	r3, #32
 8009512:	73fb      	strb	r3, [r7, #15]
				if (IsLower(tc)) tc -= 0x20;
 8009514:	7ffb      	ldrb	r3, [r7, #31]
 8009516:	2b60      	cmp	r3, #96	@ 0x60
 8009518:	d905      	bls.n	8009526 <get_ldnumber+0xde>
 800951a:	7ffb      	ldrb	r3, [r7, #31]
 800951c:	2b7a      	cmp	r3, #122	@ 0x7a
 800951e:	d802      	bhi.n	8009526 <get_ldnumber+0xde>
 8009520:	7ffb      	ldrb	r3, [r7, #31]
 8009522:	3b20      	subs	r3, #32
 8009524:	77fb      	strb	r3, [r7, #31]
			} while (c && (TCHAR)c == tc);
 8009526:	7bfb      	ldrb	r3, [r7, #15]
 8009528:	2b00      	cmp	r3, #0
 800952a:	d003      	beq.n	8009534 <get_ldnumber+0xec>
 800952c:	7bfa      	ldrb	r2, [r7, #15]
 800952e:	7ffb      	ldrb	r3, [r7, #31]
 8009530:	429a      	cmp	r2, r3
 8009532:	d0db      	beq.n	80094ec <get_ldnumber+0xa4>
		} while ((c || (tc != '/' && !IsTerminator(tc))) && ++i < FF_VOLUMES);	/* Repeat for each ID until pattern match */
 8009534:	7bfb      	ldrb	r3, [r7, #15]
 8009536:	2b00      	cmp	r3, #0
 8009538:	d105      	bne.n	8009546 <get_ldnumber+0xfe>
 800953a:	7ffb      	ldrb	r3, [r7, #31]
 800953c:	2b2f      	cmp	r3, #47	@ 0x2f
 800953e:	d008      	beq.n	8009552 <get_ldnumber+0x10a>
 8009540:	7ffb      	ldrb	r3, [r7, #31]
 8009542:	2b20      	cmp	r3, #32
 8009544:	d905      	bls.n	8009552 <get_ldnumber+0x10a>
 8009546:	69bb      	ldr	r3, [r7, #24]
 8009548:	3301      	adds	r3, #1
 800954a:	61bb      	str	r3, [r7, #24]
 800954c:	69bb      	ldr	r3, [r7, #24]
 800954e:	2b01      	cmp	r3, #1
 8009550:	ddc5      	ble.n	80094de <get_ldnumber+0x96>
		if (i < FF_VOLUMES) {	/* If a volume ID is found, get the drive number and strip it */
 8009552:	69bb      	ldr	r3, [r7, #24]
 8009554:	2b01      	cmp	r3, #1
 8009556:	dc04      	bgt.n	8009562 <get_ldnumber+0x11a>
			vol = i;		/* Drive number */
 8009558:	69bb      	ldr	r3, [r7, #24]
 800955a:	617b      	str	r3, [r7, #20]
			*path = tt;		/* Snip the drive prefix off */
 800955c:	687b      	ldr	r3, [r7, #4]
 800955e:	6a3a      	ldr	r2, [r7, #32]
 8009560:	601a      	str	r2, [r3, #0]
		}
		return vol;
 8009562:	697b      	ldr	r3, [r7, #20]
 8009564:	e002      	b.n	800956c <get_ldnumber+0x124>
#endif
	/* No drive prefix is found */
#if FF_FS_RPATH != 0
	vol = CurrVol;	/* Default drive is current drive */
#else
	vol = 0;		/* Default drive is 0 */
 8009566:	2300      	movs	r3, #0
 8009568:	617b      	str	r3, [r7, #20]
#endif
	return vol;		/* Return the default drive */
 800956a:	697b      	ldr	r3, [r7, #20]
}
 800956c:	4618      	mov	r0, r3
 800956e:	372c      	adds	r7, #44	@ 0x2c
 8009570:	46bd      	mov	sp, r7
 8009572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009576:	4770      	bx	lr
 8009578:	20000004 	.word	0x20000004

0800957c <check_fs>:

static UINT check_fs (	/* 0:FAT/FAT32 VBR, 1:exFAT VBR, 2:Not FAT and valid BS, 3:Not FAT and invalid BS, 4:Disk error */
	FATFS* fs,			/* Filesystem object */
	LBA_t sect			/* Sector to load and check if it is an FAT-VBR or not */
)
{
 800957c:	b580      	push	{r7, lr}
 800957e:	b084      	sub	sp, #16
 8009580:	af00      	add	r7, sp, #0
 8009582:	6078      	str	r0, [r7, #4]
 8009584:	6039      	str	r1, [r7, #0]
	WORD w, sign;
	BYTE b;


	fs->wflag = 0; fs->winsect = (LBA_t)0 - 1;		/* Invaidate window */
 8009586:	687b      	ldr	r3, [r7, #4]
 8009588:	2200      	movs	r2, #0
 800958a:	711a      	strb	r2, [r3, #4]
 800958c:	687b      	ldr	r3, [r7, #4]
 800958e:	f04f 32ff 	mov.w	r2, #4294967295
 8009592:	631a      	str	r2, [r3, #48]	@ 0x30
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load the boot sector */
 8009594:	6839      	ldr	r1, [r7, #0]
 8009596:	6878      	ldr	r0, [r7, #4]
 8009598:	f7fe ffa9 	bl	80084ee <move_window>
 800959c:	4603      	mov	r3, r0
 800959e:	2b00      	cmp	r3, #0
 80095a0:	d001      	beq.n	80095a6 <check_fs+0x2a>
 80095a2:	2304      	movs	r3, #4
 80095a4:	e088      	b.n	80096b8 <check_fs+0x13c>
	sign = ld_word(fs->win + BS_55AA);
 80095a6:	687b      	ldr	r3, [r7, #4]
 80095a8:	3334      	adds	r3, #52	@ 0x34
 80095aa:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 80095ae:	4618      	mov	r0, r3
 80095b0:	f7fe febc 	bl	800832c <ld_word>
 80095b4:	4603      	mov	r3, r0
 80095b6:	81fb      	strh	r3, [r7, #14]
#if FF_FS_EXFAT
	if (sign == 0xAA55 && !memcmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;	/* It is an exFAT VBR */
#endif
	b = fs->win[BS_JmpBoot];
 80095b8:	687b      	ldr	r3, [r7, #4]
 80095ba:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 80095be:	737b      	strb	r3, [r7, #13]
	if (b == 0xEB || b == 0xE9 || b == 0xE8) {	/* Valid JumpBoot code? (short jump, near jump or near call) */
 80095c0:	7b7b      	ldrb	r3, [r7, #13]
 80095c2:	2beb      	cmp	r3, #235	@ 0xeb
 80095c4:	d005      	beq.n	80095d2 <check_fs+0x56>
 80095c6:	7b7b      	ldrb	r3, [r7, #13]
 80095c8:	2be9      	cmp	r3, #233	@ 0xe9
 80095ca:	d002      	beq.n	80095d2 <check_fs+0x56>
 80095cc:	7b7b      	ldrb	r3, [r7, #13]
 80095ce:	2be8      	cmp	r3, #232	@ 0xe8
 80095d0:	d16a      	bne.n	80096a8 <check_fs+0x12c>
		if (sign == 0xAA55 && !memcmp(fs->win + BS_FilSysType32, "FAT32   ", 8)) {
 80095d2:	89fb      	ldrh	r3, [r7, #14]
 80095d4:	f64a 2255 	movw	r2, #43605	@ 0xaa55
 80095d8:	4293      	cmp	r3, r2
 80095da:	d10c      	bne.n	80095f6 <check_fs+0x7a>
 80095dc:	687b      	ldr	r3, [r7, #4]
 80095de:	3334      	adds	r3, #52	@ 0x34
 80095e0:	3352      	adds	r3, #82	@ 0x52
 80095e2:	2208      	movs	r2, #8
 80095e4:	4936      	ldr	r1, [pc, #216]	@ (80096c0 <check_fs+0x144>)
 80095e6:	4618      	mov	r0, r3
 80095e8:	f00c ff44 	bl	8016474 <memcmp>
 80095ec:	4603      	mov	r3, r0
 80095ee:	2b00      	cmp	r3, #0
 80095f0:	d101      	bne.n	80095f6 <check_fs+0x7a>
			return 0;	/* It is an FAT32 VBR */
 80095f2:	2300      	movs	r3, #0
 80095f4:	e060      	b.n	80096b8 <check_fs+0x13c>
		}
		/* FAT volumes formatted with early MS-DOS lack BS_55AA and BS_FilSysType, so FAT VBR needs to be identified without them. */
		w = ld_word(fs->win + BPB_BytsPerSec);
 80095f6:	687b      	ldr	r3, [r7, #4]
 80095f8:	3334      	adds	r3, #52	@ 0x34
 80095fa:	330b      	adds	r3, #11
 80095fc:	4618      	mov	r0, r3
 80095fe:	f7fe fe95 	bl	800832c <ld_word>
 8009602:	4603      	mov	r3, r0
 8009604:	817b      	strh	r3, [r7, #10]
		b = fs->win[BPB_SecPerClus];
 8009606:	687b      	ldr	r3, [r7, #4]
 8009608:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800960c:	737b      	strb	r3, [r7, #13]
		if ((w & (w - 1)) == 0 && w >= FF_MIN_SS && w <= FF_MAX_SS	/* Properness of sector size (512-4096 and 2^n) */
 800960e:	897a      	ldrh	r2, [r7, #10]
 8009610:	897b      	ldrh	r3, [r7, #10]
 8009612:	3b01      	subs	r3, #1
 8009614:	4013      	ands	r3, r2
 8009616:	2b00      	cmp	r3, #0
 8009618:	d146      	bne.n	80096a8 <check_fs+0x12c>
 800961a:	897b      	ldrh	r3, [r7, #10]
 800961c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009620:	d342      	bcc.n	80096a8 <check_fs+0x12c>
 8009622:	897b      	ldrh	r3, [r7, #10]
 8009624:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009628:	d83e      	bhi.n	80096a8 <check_fs+0x12c>
			&& b != 0 && (b & (b - 1)) == 0				/* Properness of cluster size (2^n) */
 800962a:	7b7b      	ldrb	r3, [r7, #13]
 800962c:	2b00      	cmp	r3, #0
 800962e:	d03b      	beq.n	80096a8 <check_fs+0x12c>
 8009630:	7b7a      	ldrb	r2, [r7, #13]
 8009632:	7b7b      	ldrb	r3, [r7, #13]
 8009634:	3b01      	subs	r3, #1
 8009636:	4013      	ands	r3, r2
 8009638:	2b00      	cmp	r3, #0
 800963a:	d135      	bne.n	80096a8 <check_fs+0x12c>
			&& ld_word(fs->win + BPB_RsvdSecCnt) != 0	/* Properness of reserved sectors (MNBZ) */
 800963c:	687b      	ldr	r3, [r7, #4]
 800963e:	3334      	adds	r3, #52	@ 0x34
 8009640:	330e      	adds	r3, #14
 8009642:	4618      	mov	r0, r3
 8009644:	f7fe fe72 	bl	800832c <ld_word>
 8009648:	4603      	mov	r3, r0
 800964a:	2b00      	cmp	r3, #0
 800964c:	d02c      	beq.n	80096a8 <check_fs+0x12c>
			&& (UINT)fs->win[BPB_NumFATs] - 1 <= 1		/* Properness of FATs (1 or 2) */
 800964e:	687b      	ldr	r3, [r7, #4]
 8009650:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8009654:	3b01      	subs	r3, #1
 8009656:	2b01      	cmp	r3, #1
 8009658:	d826      	bhi.n	80096a8 <check_fs+0x12c>
			&& ld_word(fs->win + BPB_RootEntCnt) != 0	/* Properness of root dir entries (MNBZ) */
 800965a:	687b      	ldr	r3, [r7, #4]
 800965c:	3334      	adds	r3, #52	@ 0x34
 800965e:	3311      	adds	r3, #17
 8009660:	4618      	mov	r0, r3
 8009662:	f7fe fe63 	bl	800832c <ld_word>
 8009666:	4603      	mov	r3, r0
 8009668:	2b00      	cmp	r3, #0
 800966a:	d01d      	beq.n	80096a8 <check_fs+0x12c>
			&& (ld_word(fs->win + BPB_TotSec16) >= 128 || ld_dword(fs->win + BPB_TotSec32) >= 0x10000)	/* Properness of volume sectors (>=128) */
 800966c:	687b      	ldr	r3, [r7, #4]
 800966e:	3334      	adds	r3, #52	@ 0x34
 8009670:	3313      	adds	r3, #19
 8009672:	4618      	mov	r0, r3
 8009674:	f7fe fe5a 	bl	800832c <ld_word>
 8009678:	4603      	mov	r3, r0
 800967a:	2b7f      	cmp	r3, #127	@ 0x7f
 800967c:	d809      	bhi.n	8009692 <check_fs+0x116>
 800967e:	687b      	ldr	r3, [r7, #4]
 8009680:	3334      	adds	r3, #52	@ 0x34
 8009682:	3320      	adds	r3, #32
 8009684:	4618      	mov	r0, r3
 8009686:	f7fe fe6a 	bl	800835e <ld_dword>
 800968a:	4603      	mov	r3, r0
 800968c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009690:	d30a      	bcc.n	80096a8 <check_fs+0x12c>
			&& ld_word(fs->win + BPB_FATSz16) != 0) {	/* Properness of FAT size (MNBZ) */
 8009692:	687b      	ldr	r3, [r7, #4]
 8009694:	3334      	adds	r3, #52	@ 0x34
 8009696:	3316      	adds	r3, #22
 8009698:	4618      	mov	r0, r3
 800969a:	f7fe fe47 	bl	800832c <ld_word>
 800969e:	4603      	mov	r3, r0
 80096a0:	2b00      	cmp	r3, #0
 80096a2:	d001      	beq.n	80096a8 <check_fs+0x12c>
				return 0;	/* It can be presumed an FAT VBR */
 80096a4:	2300      	movs	r3, #0
 80096a6:	e007      	b.n	80096b8 <check_fs+0x13c>
		}
	}
	return sign == 0xAA55 ? 2 : 3;	/* Not an FAT VBR (valid or invalid BS) */
 80096a8:	89fb      	ldrh	r3, [r7, #14]
 80096aa:	f64a 2255 	movw	r2, #43605	@ 0xaa55
 80096ae:	4293      	cmp	r3, r2
 80096b0:	d101      	bne.n	80096b6 <check_fs+0x13a>
 80096b2:	2302      	movs	r3, #2
 80096b4:	e000      	b.n	80096b8 <check_fs+0x13c>
 80096b6:	2303      	movs	r3, #3
}
 80096b8:	4618      	mov	r0, r3
 80096ba:	3710      	adds	r7, #16
 80096bc:	46bd      	mov	sp, r7
 80096be:	bd80      	pop	{r7, pc}
 80096c0:	08017ad4 	.word	0x08017ad4

080096c4 <find_volume>:

static UINT find_volume (	/* Returns BS status found in the hosting drive */
	FATFS* fs,		/* Filesystem object */
	UINT part		/* Partition to fined = 0:find as SFD and partitions, >0:forced partition number */
)
{
 80096c4:	b580      	push	{r7, lr}
 80096c6:	b088      	sub	sp, #32
 80096c8:	af00      	add	r7, sp, #0
 80096ca:	6078      	str	r0, [r7, #4]
 80096cc:	6039      	str	r1, [r7, #0]
	UINT fmt, i;
	DWORD mbr_pt[4];


	fmt = check_fs(fs, 0);				/* Load sector 0 and check if it is an FAT VBR as SFD format */
 80096ce:	2100      	movs	r1, #0
 80096d0:	6878      	ldr	r0, [r7, #4]
 80096d2:	f7ff ff53 	bl	800957c <check_fs>
 80096d6:	61b8      	str	r0, [r7, #24]
	if (fmt != 2 && (fmt >= 3 || part == 0)) return fmt;	/* Returns if it is an FAT VBR as auto scan, not a BS or disk error */
 80096d8:	69bb      	ldr	r3, [r7, #24]
 80096da:	2b02      	cmp	r3, #2
 80096dc:	d007      	beq.n	80096ee <find_volume+0x2a>
 80096de:	69bb      	ldr	r3, [r7, #24]
 80096e0:	2b02      	cmp	r3, #2
 80096e2:	d802      	bhi.n	80096ea <find_volume+0x26>
 80096e4:	683b      	ldr	r3, [r7, #0]
 80096e6:	2b00      	cmp	r3, #0
 80096e8:	d101      	bne.n	80096ee <find_volume+0x2a>
 80096ea:	69bb      	ldr	r3, [r7, #24]
 80096ec:	e045      	b.n	800977a <find_volume+0xb6>
		}
		return 3;	/* Not found */
	}
#endif
	if (FF_MULTI_PARTITION && part > 4) return 3;	/* MBR has 4 partitions max */
	for (i = 0; i < 4; i++) {		/* Load partition offset in the MBR */
 80096ee:	2300      	movs	r3, #0
 80096f0:	61fb      	str	r3, [r7, #28]
 80096f2:	e014      	b.n	800971e <find_volume+0x5a>
		mbr_pt[i] = ld_dword(fs->win + MBR_Table + i * SZ_PTE + PTE_StLba);
 80096f4:	687b      	ldr	r3, [r7, #4]
 80096f6:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 80096fa:	69fb      	ldr	r3, [r7, #28]
 80096fc:	011b      	lsls	r3, r3, #4
 80096fe:	f503 73e3 	add.w	r3, r3, #454	@ 0x1c6
 8009702:	4413      	add	r3, r2
 8009704:	4618      	mov	r0, r3
 8009706:	f7fe fe2a 	bl	800835e <ld_dword>
 800970a:	4602      	mov	r2, r0
 800970c:	69fb      	ldr	r3, [r7, #28]
 800970e:	009b      	lsls	r3, r3, #2
 8009710:	3320      	adds	r3, #32
 8009712:	443b      	add	r3, r7
 8009714:	f843 2c18 	str.w	r2, [r3, #-24]
	for (i = 0; i < 4; i++) {		/* Load partition offset in the MBR */
 8009718:	69fb      	ldr	r3, [r7, #28]
 800971a:	3301      	adds	r3, #1
 800971c:	61fb      	str	r3, [r7, #28]
 800971e:	69fb      	ldr	r3, [r7, #28]
 8009720:	2b03      	cmp	r3, #3
 8009722:	d9e7      	bls.n	80096f4 <find_volume+0x30>
	}
	i = part ? part - 1 : 0;		/* Table index to find first */
 8009724:	683b      	ldr	r3, [r7, #0]
 8009726:	2b00      	cmp	r3, #0
 8009728:	d002      	beq.n	8009730 <find_volume+0x6c>
 800972a:	683b      	ldr	r3, [r7, #0]
 800972c:	3b01      	subs	r3, #1
 800972e:	e000      	b.n	8009732 <find_volume+0x6e>
 8009730:	2300      	movs	r3, #0
 8009732:	61fb      	str	r3, [r7, #28]
	do {							/* Find an FAT volume */
		fmt = mbr_pt[i] ? check_fs(fs, mbr_pt[i]) : 3;	/* Check if the partition is FAT */
 8009734:	69fb      	ldr	r3, [r7, #28]
 8009736:	009b      	lsls	r3, r3, #2
 8009738:	3320      	adds	r3, #32
 800973a:	443b      	add	r3, r7
 800973c:	f853 3c18 	ldr.w	r3, [r3, #-24]
 8009740:	2b00      	cmp	r3, #0
 8009742:	d00b      	beq.n	800975c <find_volume+0x98>
 8009744:	69fb      	ldr	r3, [r7, #28]
 8009746:	009b      	lsls	r3, r3, #2
 8009748:	3320      	adds	r3, #32
 800974a:	443b      	add	r3, r7
 800974c:	f853 3c18 	ldr.w	r3, [r3, #-24]
 8009750:	4619      	mov	r1, r3
 8009752:	6878      	ldr	r0, [r7, #4]
 8009754:	f7ff ff12 	bl	800957c <check_fs>
 8009758:	4603      	mov	r3, r0
 800975a:	e000      	b.n	800975e <find_volume+0x9a>
 800975c:	2303      	movs	r3, #3
 800975e:	61bb      	str	r3, [r7, #24]
	} while (part == 0 && fmt >= 2 && ++i < 4);
 8009760:	683b      	ldr	r3, [r7, #0]
 8009762:	2b00      	cmp	r3, #0
 8009764:	d108      	bne.n	8009778 <find_volume+0xb4>
 8009766:	69bb      	ldr	r3, [r7, #24]
 8009768:	2b01      	cmp	r3, #1
 800976a:	d905      	bls.n	8009778 <find_volume+0xb4>
 800976c:	69fb      	ldr	r3, [r7, #28]
 800976e:	3301      	adds	r3, #1
 8009770:	61fb      	str	r3, [r7, #28]
 8009772:	69fb      	ldr	r3, [r7, #28]
 8009774:	2b03      	cmp	r3, #3
 8009776:	d9dd      	bls.n	8009734 <find_volume+0x70>
	return fmt;
 8009778:	69bb      	ldr	r3, [r7, #24]
}
 800977a:	4618      	mov	r0, r3
 800977c:	3720      	adds	r7, #32
 800977e:	46bd      	mov	sp, r7
 8009780:	bd80      	pop	{r7, pc}
	...

08009784 <mount_volume>:
static FRESULT mount_volume (	/* FR_OK(0): successful, !=0: an error occurred */
	const TCHAR** path,			/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,				/* Pointer to pointer to the found filesystem object */
	BYTE mode					/* Desiered access mode to check write protection */
)
{
 8009784:	b580      	push	{r7, lr}
 8009786:	b090      	sub	sp, #64	@ 0x40
 8009788:	af00      	add	r7, sp, #0
 800978a:	60f8      	str	r0, [r7, #12]
 800978c:	60b9      	str	r1, [r7, #8]
 800978e:	4613      	mov	r3, r2
 8009790:	71fb      	strb	r3, [r7, #7]
	WORD nrsv;
	UINT fmt;


	/* Get logical drive number */
	*rfs = 0;
 8009792:	68bb      	ldr	r3, [r7, #8]
 8009794:	2200      	movs	r2, #0
 8009796:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 8009798:	68f8      	ldr	r0, [r7, #12]
 800979a:	f7ff fe55 	bl	8009448 <get_ldnumber>
 800979e:	62f8      	str	r0, [r7, #44]	@ 0x2c
	if (vol < 0) return FR_INVALID_DRIVE;
 80097a0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80097a2:	2b00      	cmp	r3, #0
 80097a4:	da01      	bge.n	80097aa <mount_volume+0x26>
 80097a6:	230b      	movs	r3, #11
 80097a8:	e207      	b.n	8009bba <mount_volume+0x436>

	/* Check if the filesystem object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the filesystem object */
 80097aa:	4aa2      	ldr	r2, [pc, #648]	@ (8009a34 <mount_volume+0x2b0>)
 80097ac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80097ae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80097b2:	62bb      	str	r3, [r7, #40]	@ 0x28
	if (!fs) return FR_NOT_ENABLED;		/* Is the filesystem object available? */
 80097b4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80097b6:	2b00      	cmp	r3, #0
 80097b8:	d101      	bne.n	80097be <mount_volume+0x3a>
 80097ba:	230c      	movs	r3, #12
 80097bc:	e1fd      	b.n	8009bba <mount_volume+0x436>
#if FF_FS_REENTRANT
	if (!lock_volume(fs, 1)) return FR_TIMEOUT;	/* Lock the volume, and system if needed */
#endif
	*rfs = fs;							/* Return pointer to the filesystem object */
 80097be:	68bb      	ldr	r3, [r7, #8]
 80097c0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80097c2:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 80097c4:	79fb      	ldrb	r3, [r7, #7]
 80097c6:	f023 0301 	bic.w	r3, r3, #1
 80097ca:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type != 0) {				/* If the volume has been mounted */
 80097cc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80097ce:	781b      	ldrb	r3, [r3, #0]
 80097d0:	2b00      	cmp	r3, #0
 80097d2:	d01a      	beq.n	800980a <mount_volume+0x86>
		stat = disk_status(fs->pdrv);
 80097d4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80097d6:	785b      	ldrb	r3, [r3, #1]
 80097d8:	4618      	mov	r0, r3
 80097da:	f7fe fc6f 	bl	80080bc <disk_status>
 80097de:	4603      	mov	r3, r0
 80097e0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 80097e4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80097e8:	f003 0301 	and.w	r3, r3, #1
 80097ec:	2b00      	cmp	r3, #0
 80097ee:	d10c      	bne.n	800980a <mount_volume+0x86>
			if (!FF_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 80097f0:	79fb      	ldrb	r3, [r7, #7]
 80097f2:	2b00      	cmp	r3, #0
 80097f4:	d007      	beq.n	8009806 <mount_volume+0x82>
 80097f6:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80097fa:	f003 0304 	and.w	r3, r3, #4
 80097fe:	2b00      	cmp	r3, #0
 8009800:	d001      	beq.n	8009806 <mount_volume+0x82>
				return FR_WRITE_PROTECTED;
 8009802:	230a      	movs	r3, #10
 8009804:	e1d9      	b.n	8009bba <mount_volume+0x436>
			}
			return FR_OK;				/* The filesystem object is already valid */
 8009806:	2300      	movs	r3, #0
 8009808:	e1d7      	b.n	8009bba <mount_volume+0x436>
	}

	/* The filesystem object is not valid. */
	/* Following code attempts to mount the volume. (find an FAT volume, analyze the BPB and initialize the filesystem object) */

	fs->fs_type = 0;					/* Invalidate the filesystem object */
 800980a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800980c:	2200      	movs	r2, #0
 800980e:	701a      	strb	r2, [r3, #0]
	stat = disk_initialize(fs->pdrv);	/* Initialize the volume hosting physical drive */
 8009810:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009812:	785b      	ldrb	r3, [r3, #1]
 8009814:	4618      	mov	r0, r3
 8009816:	f7fe fc79 	bl	800810c <disk_initialize>
 800981a:	4603      	mov	r3, r0
 800981c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 8009820:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8009824:	f003 0301 	and.w	r3, r3, #1
 8009828:	2b00      	cmp	r3, #0
 800982a:	d001      	beq.n	8009830 <mount_volume+0xac>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 800982c:	2303      	movs	r3, #3
 800982e:	e1c4      	b.n	8009bba <mount_volume+0x436>
	}
	if (!FF_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 8009830:	79fb      	ldrb	r3, [r7, #7]
 8009832:	2b00      	cmp	r3, #0
 8009834:	d007      	beq.n	8009846 <mount_volume+0xc2>
 8009836:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800983a:	f003 0304 	and.w	r3, r3, #4
 800983e:	2b00      	cmp	r3, #0
 8009840:	d001      	beq.n	8009846 <mount_volume+0xc2>
		return FR_WRITE_PROTECTED;
 8009842:	230a      	movs	r3, #10
 8009844:	e1b9      	b.n	8009bba <mount_volume+0x436>
	}
#if FF_MAX_SS != FF_MIN_SS				/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->pdrv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
 8009846:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009848:	7858      	ldrb	r0, [r3, #1]
 800984a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800984c:	330c      	adds	r3, #12
 800984e:	461a      	mov	r2, r3
 8009850:	2102      	movs	r1, #2
 8009852:	f7fe fce9 	bl	8008228 <disk_ioctl>
 8009856:	4603      	mov	r3, r0
 8009858:	2b00      	cmp	r3, #0
 800985a:	d001      	beq.n	8009860 <mount_volume+0xdc>
 800985c:	2301      	movs	r3, #1
 800985e:	e1ac      	b.n	8009bba <mount_volume+0x436>
	if (SS(fs) > FF_MAX_SS || SS(fs) < FF_MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
 8009860:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009862:	899b      	ldrh	r3, [r3, #12]
 8009864:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009868:	d80d      	bhi.n	8009886 <mount_volume+0x102>
 800986a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800986c:	899b      	ldrh	r3, [r3, #12]
 800986e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009872:	d308      	bcc.n	8009886 <mount_volume+0x102>
 8009874:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009876:	899b      	ldrh	r3, [r3, #12]
 8009878:	461a      	mov	r2, r3
 800987a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800987c:	899b      	ldrh	r3, [r3, #12]
 800987e:	3b01      	subs	r3, #1
 8009880:	4013      	ands	r3, r2
 8009882:	2b00      	cmp	r3, #0
 8009884:	d001      	beq.n	800988a <mount_volume+0x106>
 8009886:	2301      	movs	r3, #1
 8009888:	e197      	b.n	8009bba <mount_volume+0x436>
#endif

	/* Find an FAT volume on the hosting drive */
	fmt = find_volume(fs, LD2PT(vol));
 800988a:	2100      	movs	r1, #0
 800988c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800988e:	f7ff ff19 	bl	80096c4 <find_volume>
 8009892:	6338      	str	r0, [r7, #48]	@ 0x30
	if (fmt == 4) return FR_DISK_ERR;		/* An error occurred in the disk I/O layer */
 8009894:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009896:	2b04      	cmp	r3, #4
 8009898:	d101      	bne.n	800989e <mount_volume+0x11a>
 800989a:	2301      	movs	r3, #1
 800989c:	e18d      	b.n	8009bba <mount_volume+0x436>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 800989e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80098a0:	2b01      	cmp	r3, #1
 80098a2:	d901      	bls.n	80098a8 <mount_volume+0x124>
 80098a4:	230d      	movs	r3, #13
 80098a6:	e188      	b.n	8009bba <mount_volume+0x436>
	bsect = fs->winsect;					/* Volume offset in the hosting physical drive */
 80098a8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80098aa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80098ac:	623b      	str	r3, [r7, #32]
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* FF_FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 80098ae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80098b0:	3334      	adds	r3, #52	@ 0x34
 80098b2:	330b      	adds	r3, #11
 80098b4:	4618      	mov	r0, r3
 80098b6:	f7fe fd39 	bl	800832c <ld_word>
 80098ba:	4603      	mov	r3, r0
 80098bc:	461a      	mov	r2, r3
 80098be:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80098c0:	899b      	ldrh	r3, [r3, #12]
 80098c2:	429a      	cmp	r2, r3
 80098c4:	d001      	beq.n	80098ca <mount_volume+0x146>
 80098c6:	230d      	movs	r3, #13
 80098c8:	e177      	b.n	8009bba <mount_volume+0x436>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 80098ca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80098cc:	3334      	adds	r3, #52	@ 0x34
 80098ce:	3316      	adds	r3, #22
 80098d0:	4618      	mov	r0, r3
 80098d2:	f7fe fd2b 	bl	800832c <ld_word>
 80098d6:	4603      	mov	r3, r0
 80098d8:	63bb      	str	r3, [r7, #56]	@ 0x38
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 80098da:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80098dc:	2b00      	cmp	r3, #0
 80098de:	d106      	bne.n	80098ee <mount_volume+0x16a>
 80098e0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80098e2:	3334      	adds	r3, #52	@ 0x34
 80098e4:	3324      	adds	r3, #36	@ 0x24
 80098e6:	4618      	mov	r0, r3
 80098e8:	f7fe fd39 	bl	800835e <ld_dword>
 80098ec:	63b8      	str	r0, [r7, #56]	@ 0x38
		fs->fsize = fasize;
 80098ee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80098f0:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80098f2:	61da      	str	r2, [r3, #28]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 80098f4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80098f6:	f893 2044 	ldrb.w	r2, [r3, #68]	@ 0x44
 80098fa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80098fc:	70da      	strb	r2, [r3, #3]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 80098fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009900:	78db      	ldrb	r3, [r3, #3]
 8009902:	2b01      	cmp	r3, #1
 8009904:	d005      	beq.n	8009912 <mount_volume+0x18e>
 8009906:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009908:	78db      	ldrb	r3, [r3, #3]
 800990a:	2b02      	cmp	r3, #2
 800990c:	d001      	beq.n	8009912 <mount_volume+0x18e>
 800990e:	230d      	movs	r3, #13
 8009910:	e153      	b.n	8009bba <mount_volume+0x436>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 8009912:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009914:	78db      	ldrb	r3, [r3, #3]
 8009916:	461a      	mov	r2, r3
 8009918:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800991a:	fb02 f303 	mul.w	r3, r2, r3
 800991e:	63bb      	str	r3, [r7, #56]	@ 0x38

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 8009920:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009922:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8009926:	461a      	mov	r2, r3
 8009928:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800992a:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 800992c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800992e:	895b      	ldrh	r3, [r3, #10]
 8009930:	2b00      	cmp	r3, #0
 8009932:	d008      	beq.n	8009946 <mount_volume+0x1c2>
 8009934:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009936:	895b      	ldrh	r3, [r3, #10]
 8009938:	461a      	mov	r2, r3
 800993a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800993c:	895b      	ldrh	r3, [r3, #10]
 800993e:	3b01      	subs	r3, #1
 8009940:	4013      	ands	r3, r2
 8009942:	2b00      	cmp	r3, #0
 8009944:	d001      	beq.n	800994a <mount_volume+0x1c6>
 8009946:	230d      	movs	r3, #13
 8009948:	e137      	b.n	8009bba <mount_volume+0x436>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 800994a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800994c:	3334      	adds	r3, #52	@ 0x34
 800994e:	3311      	adds	r3, #17
 8009950:	4618      	mov	r0, r3
 8009952:	f7fe fceb 	bl	800832c <ld_word>
 8009956:	4603      	mov	r3, r0
 8009958:	461a      	mov	r2, r3
 800995a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800995c:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 800995e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009960:	891b      	ldrh	r3, [r3, #8]
 8009962:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8009964:	8992      	ldrh	r2, [r2, #12]
 8009966:	0952      	lsrs	r2, r2, #5
 8009968:	b292      	uxth	r2, r2
 800996a:	fbb3 f1f2 	udiv	r1, r3, r2
 800996e:	fb01 f202 	mul.w	r2, r1, r2
 8009972:	1a9b      	subs	r3, r3, r2
 8009974:	b29b      	uxth	r3, r3
 8009976:	2b00      	cmp	r3, #0
 8009978:	d001      	beq.n	800997e <mount_volume+0x1fa>
 800997a:	230d      	movs	r3, #13
 800997c:	e11d      	b.n	8009bba <mount_volume+0x436>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 800997e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009980:	3334      	adds	r3, #52	@ 0x34
 8009982:	3313      	adds	r3, #19
 8009984:	4618      	mov	r0, r3
 8009986:	f7fe fcd1 	bl	800832c <ld_word>
 800998a:	4603      	mov	r3, r0
 800998c:	63fb      	str	r3, [r7, #60]	@ 0x3c
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 800998e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009990:	2b00      	cmp	r3, #0
 8009992:	d106      	bne.n	80099a2 <mount_volume+0x21e>
 8009994:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009996:	3334      	adds	r3, #52	@ 0x34
 8009998:	3320      	adds	r3, #32
 800999a:	4618      	mov	r0, r3
 800999c:	f7fe fcdf 	bl	800835e <ld_dword>
 80099a0:	63f8      	str	r0, [r7, #60]	@ 0x3c

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 80099a2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80099a4:	3334      	adds	r3, #52	@ 0x34
 80099a6:	330e      	adds	r3, #14
 80099a8:	4618      	mov	r0, r3
 80099aa:	f7fe fcbf 	bl	800832c <ld_word>
 80099ae:	4603      	mov	r3, r0
 80099b0:	83fb      	strh	r3, [r7, #30]
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 80099b2:	8bfb      	ldrh	r3, [r7, #30]
 80099b4:	2b00      	cmp	r3, #0
 80099b6:	d101      	bne.n	80099bc <mount_volume+0x238>
 80099b8:	230d      	movs	r3, #13
 80099ba:	e0fe      	b.n	8009bba <mount_volume+0x436>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 80099bc:	8bfa      	ldrh	r2, [r7, #30]
 80099be:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80099c0:	4413      	add	r3, r2
 80099c2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80099c4:	8911      	ldrh	r1, [r2, #8]
 80099c6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80099c8:	8992      	ldrh	r2, [r2, #12]
 80099ca:	0952      	lsrs	r2, r2, #5
 80099cc:	b292      	uxth	r2, r2
 80099ce:	fbb1 f2f2 	udiv	r2, r1, r2
 80099d2:	b292      	uxth	r2, r2
 80099d4:	4413      	add	r3, r2
 80099d6:	61bb      	str	r3, [r7, #24]
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 80099d8:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80099da:	69bb      	ldr	r3, [r7, #24]
 80099dc:	429a      	cmp	r2, r3
 80099de:	d201      	bcs.n	80099e4 <mount_volume+0x260>
 80099e0:	230d      	movs	r3, #13
 80099e2:	e0ea      	b.n	8009bba <mount_volume+0x436>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 80099e4:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80099e6:	69bb      	ldr	r3, [r7, #24]
 80099e8:	1ad3      	subs	r3, r2, r3
 80099ea:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80099ec:	8952      	ldrh	r2, [r2, #10]
 80099ee:	fbb3 f3f2 	udiv	r3, r3, r2
 80099f2:	617b      	str	r3, [r7, #20]
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 80099f4:	697b      	ldr	r3, [r7, #20]
 80099f6:	2b00      	cmp	r3, #0
 80099f8:	d101      	bne.n	80099fe <mount_volume+0x27a>
 80099fa:	230d      	movs	r3, #13
 80099fc:	e0dd      	b.n	8009bba <mount_volume+0x436>
		fmt = 0;
 80099fe:	2300      	movs	r3, #0
 8009a00:	633b      	str	r3, [r7, #48]	@ 0x30
		if (nclst <= MAX_FAT32) fmt = FS_FAT32;
 8009a02:	697b      	ldr	r3, [r7, #20]
 8009a04:	4a0c      	ldr	r2, [pc, #48]	@ (8009a38 <mount_volume+0x2b4>)
 8009a06:	4293      	cmp	r3, r2
 8009a08:	d801      	bhi.n	8009a0e <mount_volume+0x28a>
 8009a0a:	2303      	movs	r3, #3
 8009a0c:	633b      	str	r3, [r7, #48]	@ 0x30
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 8009a0e:	697b      	ldr	r3, [r7, #20]
 8009a10:	f64f 72f5 	movw	r2, #65525	@ 0xfff5
 8009a14:	4293      	cmp	r3, r2
 8009a16:	d801      	bhi.n	8009a1c <mount_volume+0x298>
 8009a18:	2302      	movs	r3, #2
 8009a1a:	633b      	str	r3, [r7, #48]	@ 0x30
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 8009a1c:	697b      	ldr	r3, [r7, #20]
 8009a1e:	f640 72f5 	movw	r2, #4085	@ 0xff5
 8009a22:	4293      	cmp	r3, r2
 8009a24:	d801      	bhi.n	8009a2a <mount_volume+0x2a6>
 8009a26:	2301      	movs	r3, #1
 8009a28:	633b      	str	r3, [r7, #48]	@ 0x30
		if (fmt == 0) return FR_NO_FILESYSTEM;
 8009a2a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009a2c:	2b00      	cmp	r3, #0
 8009a2e:	d105      	bne.n	8009a3c <mount_volume+0x2b8>
 8009a30:	230d      	movs	r3, #13
 8009a32:	e0c2      	b.n	8009bba <mount_volume+0x436>
 8009a34:	20005c50 	.word	0x20005c50
 8009a38:	0ffffff5 	.word	0x0ffffff5

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 8009a3c:	697b      	ldr	r3, [r7, #20]
 8009a3e:	1c9a      	adds	r2, r3, #2
 8009a40:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009a42:	619a      	str	r2, [r3, #24]
		fs->volbase = bsect;							/* Volume start sector */
 8009a44:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009a46:	6a3a      	ldr	r2, [r7, #32]
 8009a48:	621a      	str	r2, [r3, #32]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 8009a4a:	8bfa      	ldrh	r2, [r7, #30]
 8009a4c:	6a3b      	ldr	r3, [r7, #32]
 8009a4e:	441a      	add	r2, r3
 8009a50:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009a52:	625a      	str	r2, [r3, #36]	@ 0x24
		fs->database = bsect + sysect;					/* Data start sector */
 8009a54:	6a3a      	ldr	r2, [r7, #32]
 8009a56:	69bb      	ldr	r3, [r7, #24]
 8009a58:	441a      	add	r2, r3
 8009a5a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009a5c:	62da      	str	r2, [r3, #44]	@ 0x2c
		if (fmt == FS_FAT32) {
 8009a5e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009a60:	2b03      	cmp	r3, #3
 8009a62:	d11e      	bne.n	8009aa2 <mount_volume+0x31e>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 8009a64:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009a66:	3334      	adds	r3, #52	@ 0x34
 8009a68:	332a      	adds	r3, #42	@ 0x2a
 8009a6a:	4618      	mov	r0, r3
 8009a6c:	f7fe fc5e 	bl	800832c <ld_word>
 8009a70:	4603      	mov	r3, r0
 8009a72:	2b00      	cmp	r3, #0
 8009a74:	d001      	beq.n	8009a7a <mount_volume+0x2f6>
 8009a76:	230d      	movs	r3, #13
 8009a78:	e09f      	b.n	8009bba <mount_volume+0x436>
			if (fs->n_rootdir != 0) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 8009a7a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009a7c:	891b      	ldrh	r3, [r3, #8]
 8009a7e:	2b00      	cmp	r3, #0
 8009a80:	d001      	beq.n	8009a86 <mount_volume+0x302>
 8009a82:	230d      	movs	r3, #13
 8009a84:	e099      	b.n	8009bba <mount_volume+0x436>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 8009a86:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009a88:	3334      	adds	r3, #52	@ 0x34
 8009a8a:	332c      	adds	r3, #44	@ 0x2c
 8009a8c:	4618      	mov	r0, r3
 8009a8e:	f7fe fc66 	bl	800835e <ld_dword>
 8009a92:	4602      	mov	r2, r0
 8009a94:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009a96:	629a      	str	r2, [r3, #40]	@ 0x28
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 8009a98:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009a9a:	699b      	ldr	r3, [r3, #24]
 8009a9c:	009b      	lsls	r3, r3, #2
 8009a9e:	637b      	str	r3, [r7, #52]	@ 0x34
 8009aa0:	e01e      	b.n	8009ae0 <mount_volume+0x35c>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must not be 0) */
 8009aa2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009aa4:	891b      	ldrh	r3, [r3, #8]
 8009aa6:	2b00      	cmp	r3, #0
 8009aa8:	d101      	bne.n	8009aae <mount_volume+0x32a>
 8009aaa:	230d      	movs	r3, #13
 8009aac:	e085      	b.n	8009bba <mount_volume+0x436>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 8009aae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009ab0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8009ab2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009ab4:	441a      	add	r2, r3
 8009ab6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009ab8:	629a      	str	r2, [r3, #40]	@ 0x28
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8009aba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009abc:	2b02      	cmp	r3, #2
 8009abe:	d103      	bne.n	8009ac8 <mount_volume+0x344>
 8009ac0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009ac2:	699b      	ldr	r3, [r3, #24]
 8009ac4:	005b      	lsls	r3, r3, #1
 8009ac6:	e00a      	b.n	8009ade <mount_volume+0x35a>
 8009ac8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009aca:	699a      	ldr	r2, [r3, #24]
 8009acc:	4613      	mov	r3, r2
 8009ace:	005b      	lsls	r3, r3, #1
 8009ad0:	4413      	add	r3, r2
 8009ad2:	085a      	lsrs	r2, r3, #1
 8009ad4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009ad6:	699b      	ldr	r3, [r3, #24]
 8009ad8:	f003 0301 	and.w	r3, r3, #1
 8009adc:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 8009ade:	637b      	str	r3, [r7, #52]	@ 0x34
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 8009ae0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009ae2:	69da      	ldr	r2, [r3, #28]
 8009ae4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009ae6:	899b      	ldrh	r3, [r3, #12]
 8009ae8:	4619      	mov	r1, r3
 8009aea:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009aec:	440b      	add	r3, r1
 8009aee:	3b01      	subs	r3, #1
 8009af0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8009af2:	8989      	ldrh	r1, [r1, #12]
 8009af4:	fbb3 f3f1 	udiv	r3, r3, r1
 8009af8:	429a      	cmp	r2, r3
 8009afa:	d201      	bcs.n	8009b00 <mount_volume+0x37c>
 8009afc:	230d      	movs	r3, #13
 8009afe:	e05c      	b.n	8009bba <mount_volume+0x436>

#if !FF_FS_READONLY
		/* Get FSInfo if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 8009b00:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009b02:	f04f 32ff 	mov.w	r2, #4294967295
 8009b06:	615a      	str	r2, [r3, #20]
 8009b08:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009b0a:	695a      	ldr	r2, [r3, #20]
 8009b0c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009b0e:	611a      	str	r2, [r3, #16]
		fs->fsi_flag = 0x80;
 8009b10:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009b12:	2280      	movs	r2, #128	@ 0x80
 8009b14:	715a      	strb	r2, [r3, #5]
#if (FF_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Allow to update FSInfo only if BPB_FSInfo32 == 1 */
 8009b16:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009b18:	2b03      	cmp	r3, #3
 8009b1a:	d13f      	bne.n	8009b9c <mount_volume+0x418>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 8009b1c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009b1e:	3334      	adds	r3, #52	@ 0x34
 8009b20:	3330      	adds	r3, #48	@ 0x30
 8009b22:	4618      	mov	r0, r3
 8009b24:	f7fe fc02 	bl	800832c <ld_word>
 8009b28:	4603      	mov	r3, r0
 8009b2a:	2b01      	cmp	r3, #1
 8009b2c:	d136      	bne.n	8009b9c <mount_volume+0x418>
			&& move_window(fs, bsect + 1) == FR_OK)
 8009b2e:	6a3b      	ldr	r3, [r7, #32]
 8009b30:	3301      	adds	r3, #1
 8009b32:	4619      	mov	r1, r3
 8009b34:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009b36:	f7fe fcda 	bl	80084ee <move_window>
 8009b3a:	4603      	mov	r3, r0
 8009b3c:	2b00      	cmp	r3, #0
 8009b3e:	d12d      	bne.n	8009b9c <mount_volume+0x418>
		{
			fs->fsi_flag = 0;
 8009b40:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009b42:	2200      	movs	r2, #0
 8009b44:	715a      	strb	r2, [r3, #5]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSInfo data if available */
 8009b46:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009b48:	3334      	adds	r3, #52	@ 0x34
 8009b4a:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 8009b4e:	4618      	mov	r0, r3
 8009b50:	f7fe fbec 	bl	800832c <ld_word>
 8009b54:	4603      	mov	r3, r0
 8009b56:	461a      	mov	r2, r3
 8009b58:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 8009b5c:	429a      	cmp	r2, r3
 8009b5e:	d11d      	bne.n	8009b9c <mount_volume+0x418>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 8009b60:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009b62:	3334      	adds	r3, #52	@ 0x34
 8009b64:	4618      	mov	r0, r3
 8009b66:	f7fe fbfa 	bl	800835e <ld_dword>
 8009b6a:	4603      	mov	r3, r0
 8009b6c:	4a15      	ldr	r2, [pc, #84]	@ (8009bc4 <mount_volume+0x440>)
 8009b6e:	4293      	cmp	r3, r2
 8009b70:	d114      	bne.n	8009b9c <mount_volume+0x418>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 8009b72:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009b74:	3334      	adds	r3, #52	@ 0x34
 8009b76:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 8009b7a:	4618      	mov	r0, r3
 8009b7c:	f7fe fbef 	bl	800835e <ld_dword>
 8009b80:	4603      	mov	r3, r0
 8009b82:	4a11      	ldr	r2, [pc, #68]	@ (8009bc8 <mount_volume+0x444>)
 8009b84:	4293      	cmp	r3, r2
 8009b86:	d109      	bne.n	8009b9c <mount_volume+0x418>
			{
#if (FF_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
#endif
#if (FF_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 8009b88:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009b8a:	3334      	adds	r3, #52	@ 0x34
 8009b8c:	f503 73f6 	add.w	r3, r3, #492	@ 0x1ec
 8009b90:	4618      	mov	r0, r3
 8009b92:	f7fe fbe4 	bl	800835e <ld_dword>
 8009b96:	4602      	mov	r2, r0
 8009b98:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009b9a:	611a      	str	r2, [r3, #16]
		}
#endif	/* (FF_FS_NOFSINFO & 3) != 3 */
#endif	/* !FF_FS_READONLY */
	}

	fs->fs_type = (BYTE)fmt;/* FAT sub-type (the filesystem object gets valid) */
 8009b9c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009b9e:	b2da      	uxtb	r2, r3
 8009ba0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009ba2:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* Volume mount ID */
 8009ba4:	4b09      	ldr	r3, [pc, #36]	@ (8009bcc <mount_volume+0x448>)
 8009ba6:	881b      	ldrh	r3, [r3, #0]
 8009ba8:	3301      	adds	r3, #1
 8009baa:	b29a      	uxth	r2, r3
 8009bac:	4b07      	ldr	r3, [pc, #28]	@ (8009bcc <mount_volume+0x448>)
 8009bae:	801a      	strh	r2, [r3, #0]
 8009bb0:	4b06      	ldr	r3, [pc, #24]	@ (8009bcc <mount_volume+0x448>)
 8009bb2:	881a      	ldrh	r2, [r3, #0]
 8009bb4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009bb6:	80da      	strh	r2, [r3, #6]
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if FF_FS_LOCK				/* Clear file lock semaphores */
	clear_share(fs);
#endif
	return FR_OK;
 8009bb8:	2300      	movs	r3, #0
}
 8009bba:	4618      	mov	r0, r3
 8009bbc:	3740      	adds	r7, #64	@ 0x40
 8009bbe:	46bd      	mov	sp, r7
 8009bc0:	bd80      	pop	{r7, pc}
 8009bc2:	bf00      	nop
 8009bc4:	41615252 	.word	0x41615252
 8009bc8:	61417272 	.word	0x61417272
 8009bcc:	20005c58 	.word	0x20005c58

08009bd0 <validate>:

static FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	FFOBJID* obj,			/* Pointer to the FFOBJID, the 1st member in the FIL/DIR structure, to check validity */
	FATFS** rfs				/* Pointer to pointer to the owner filesystem object to return */
)
{
 8009bd0:	b580      	push	{r7, lr}
 8009bd2:	b084      	sub	sp, #16
 8009bd4:	af00      	add	r7, sp, #0
 8009bd6:	6078      	str	r0, [r7, #4]
 8009bd8:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 8009bda:	2309      	movs	r3, #9
 8009bdc:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 8009bde:	687b      	ldr	r3, [r7, #4]
 8009be0:	2b00      	cmp	r3, #0
 8009be2:	d01c      	beq.n	8009c1e <validate+0x4e>
 8009be4:	687b      	ldr	r3, [r7, #4]
 8009be6:	681b      	ldr	r3, [r3, #0]
 8009be8:	2b00      	cmp	r3, #0
 8009bea:	d018      	beq.n	8009c1e <validate+0x4e>
 8009bec:	687b      	ldr	r3, [r7, #4]
 8009bee:	681b      	ldr	r3, [r3, #0]
 8009bf0:	781b      	ldrb	r3, [r3, #0]
 8009bf2:	2b00      	cmp	r3, #0
 8009bf4:	d013      	beq.n	8009c1e <validate+0x4e>
 8009bf6:	687b      	ldr	r3, [r7, #4]
 8009bf8:	889a      	ldrh	r2, [r3, #4]
 8009bfa:	687b      	ldr	r3, [r7, #4]
 8009bfc:	681b      	ldr	r3, [r3, #0]
 8009bfe:	88db      	ldrh	r3, [r3, #6]
 8009c00:	429a      	cmp	r2, r3
 8009c02:	d10c      	bne.n	8009c1e <validate+0x4e>
			}
		} else {	/* Could not take */
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->pdrv) & STA_NOINIT)) { /* Test if the hosting phsical drive is kept initialized */
 8009c04:	687b      	ldr	r3, [r7, #4]
 8009c06:	681b      	ldr	r3, [r3, #0]
 8009c08:	785b      	ldrb	r3, [r3, #1]
 8009c0a:	4618      	mov	r0, r3
 8009c0c:	f7fe fa56 	bl	80080bc <disk_status>
 8009c10:	4603      	mov	r3, r0
 8009c12:	f003 0301 	and.w	r3, r3, #1
 8009c16:	2b00      	cmp	r3, #0
 8009c18:	d101      	bne.n	8009c1e <validate+0x4e>
			res = FR_OK;
 8009c1a:	2300      	movs	r3, #0
 8009c1c:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*rfs = (res == FR_OK) ? obj->fs : 0;	/* Return corresponding filesystem object if it is valid */
 8009c1e:	7bfb      	ldrb	r3, [r7, #15]
 8009c20:	2b00      	cmp	r3, #0
 8009c22:	d102      	bne.n	8009c2a <validate+0x5a>
 8009c24:	687b      	ldr	r3, [r7, #4]
 8009c26:	681b      	ldr	r3, [r3, #0]
 8009c28:	e000      	b.n	8009c2c <validate+0x5c>
 8009c2a:	2300      	movs	r3, #0
 8009c2c:	683a      	ldr	r2, [r7, #0]
 8009c2e:	6013      	str	r3, [r2, #0]
	return res;
 8009c30:	7bfb      	ldrb	r3, [r7, #15]
}
 8009c32:	4618      	mov	r0, r3
 8009c34:	3710      	adds	r7, #16
 8009c36:	46bd      	mov	sp, r7
 8009c38:	bd80      	pop	{r7, pc}
	...

08009c3c <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the filesystem object to be registered (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mount option: 0=Do not mount (delayed mount), 1=Mount immediately */
)
{
 8009c3c:	b580      	push	{r7, lr}
 8009c3e:	b088      	sub	sp, #32
 8009c40:	af00      	add	r7, sp, #0
 8009c42:	60f8      	str	r0, [r7, #12]
 8009c44:	60b9      	str	r1, [r7, #8]
 8009c46:	4613      	mov	r3, r2
 8009c48:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 8009c4a:	68bb      	ldr	r3, [r7, #8]
 8009c4c:	613b      	str	r3, [r7, #16]


	/* Get volume ID (logical drive number) */
	vol = get_ldnumber(&rp);
 8009c4e:	f107 0310 	add.w	r3, r7, #16
 8009c52:	4618      	mov	r0, r3
 8009c54:	f7ff fbf8 	bl	8009448 <get_ldnumber>
 8009c58:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 8009c5a:	69fb      	ldr	r3, [r7, #28]
 8009c5c:	2b00      	cmp	r3, #0
 8009c5e:	da01      	bge.n	8009c64 <f_mount+0x28>
 8009c60:	230b      	movs	r3, #11
 8009c62:	e02e      	b.n	8009cc2 <f_mount+0x86>
	cfs = FatFs[vol];			/* Pointer to the filesystem object of the volume */
 8009c64:	4a19      	ldr	r2, [pc, #100]	@ (8009ccc <f_mount+0x90>)
 8009c66:	69fb      	ldr	r3, [r7, #28]
 8009c68:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009c6c:	61bb      	str	r3, [r7, #24]

	if (cfs) {					/* Unregister current filesystem object if regsitered */
 8009c6e:	69bb      	ldr	r3, [r7, #24]
 8009c70:	2b00      	cmp	r3, #0
 8009c72:	d007      	beq.n	8009c84 <f_mount+0x48>
		FatFs[vol] = 0;
 8009c74:	4a15      	ldr	r2, [pc, #84]	@ (8009ccc <f_mount+0x90>)
 8009c76:	69fb      	ldr	r3, [r7, #28]
 8009c78:	2100      	movs	r1, #0
 8009c7a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		clear_share(cfs);
#endif
#if FF_FS_REENTRANT				/* Discard mutex of the current volume */
		ff_mutex_delete(vol);
#endif
		cfs->fs_type = 0;		/* Invalidate the filesystem object to be unregistered */
 8009c7e:	69bb      	ldr	r3, [r7, #24]
 8009c80:	2200      	movs	r2, #0
 8009c82:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {					/* Register new filesystem object */
 8009c84:	68fb      	ldr	r3, [r7, #12]
 8009c86:	2b00      	cmp	r3, #0
 8009c88:	d00b      	beq.n	8009ca2 <f_mount+0x66>
		fs->pdrv = LD2PD(vol);	/* Volume hosting physical drive */
 8009c8a:	68fb      	ldr	r3, [r7, #12]
 8009c8c:	69fa      	ldr	r2, [r7, #28]
 8009c8e:	b2d2      	uxtb	r2, r2
 8009c90:	705a      	strb	r2, [r3, #1]
			}
			SysLock = 1;		/* System mutex is ready */
		}
#endif
#endif
		fs->fs_type = 0;		/* Invalidate the new filesystem object */
 8009c92:	68fb      	ldr	r3, [r7, #12]
 8009c94:	2200      	movs	r2, #0
 8009c96:	701a      	strb	r2, [r3, #0]
		FatFs[vol] = fs;		/* Register new fs object */
 8009c98:	68fa      	ldr	r2, [r7, #12]
 8009c9a:	490c      	ldr	r1, [pc, #48]	@ (8009ccc <f_mount+0x90>)
 8009c9c:	69fb      	ldr	r3, [r7, #28]
 8009c9e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	}

	if (opt == 0) return FR_OK;	/* Do not mount now, it will be mounted in subsequent file functions */
 8009ca2:	79fb      	ldrb	r3, [r7, #7]
 8009ca4:	2b00      	cmp	r3, #0
 8009ca6:	d101      	bne.n	8009cac <f_mount+0x70>
 8009ca8:	2300      	movs	r3, #0
 8009caa:	e00a      	b.n	8009cc2 <f_mount+0x86>

	res = mount_volume(&path, &fs, 0);	/* Force mounted the volume */
 8009cac:	f107 010c 	add.w	r1, r7, #12
 8009cb0:	f107 0308 	add.w	r3, r7, #8
 8009cb4:	2200      	movs	r2, #0
 8009cb6:	4618      	mov	r0, r3
 8009cb8:	f7ff fd64 	bl	8009784 <mount_volume>
 8009cbc:	4603      	mov	r3, r0
 8009cbe:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 8009cc0:	7dfb      	ldrb	r3, [r7, #23]
}
 8009cc2:	4618      	mov	r0, r3
 8009cc4:	3720      	adds	r7, #32
 8009cc6:	46bd      	mov	sp, r7
 8009cc8:	bd80      	pop	{r7, pc}
 8009cca:	bf00      	nop
 8009ccc:	20005c50 	.word	0x20005c50

08009cd0 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and open mode flags */
)
{
 8009cd0:	b580      	push	{r7, lr}
 8009cd2:	b098      	sub	sp, #96	@ 0x60
 8009cd4:	af00      	add	r7, sp, #0
 8009cd6:	60f8      	str	r0, [r7, #12]
 8009cd8:	60b9      	str	r1, [r7, #8]
 8009cda:	4613      	mov	r3, r2
 8009cdc:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 8009cde:	68fb      	ldr	r3, [r7, #12]
 8009ce0:	2b00      	cmp	r3, #0
 8009ce2:	d101      	bne.n	8009ce8 <f_open+0x18>
 8009ce4:	2309      	movs	r3, #9
 8009ce6:	e184      	b.n	8009ff2 <f_open+0x322>

	/* Get logical drive number */
	mode &= FF_FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND;
 8009ce8:	79fb      	ldrb	r3, [r7, #7]
 8009cea:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8009cee:	71fb      	strb	r3, [r7, #7]
	res = mount_volume(&path, &fs, mode);
 8009cf0:	79fa      	ldrb	r2, [r7, #7]
 8009cf2:	f107 0114 	add.w	r1, r7, #20
 8009cf6:	f107 0308 	add.w	r3, r7, #8
 8009cfa:	4618      	mov	r0, r3
 8009cfc:	f7ff fd42 	bl	8009784 <mount_volume>
 8009d00:	4603      	mov	r3, r0
 8009d02:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
	if (res == FR_OK) {
 8009d06:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8009d0a:	2b00      	cmp	r3, #0
 8009d0c:	f040 8168 	bne.w	8009fe0 <f_open+0x310>
		dj.obj.fs = fs;
 8009d10:	697b      	ldr	r3, [r7, #20]
 8009d12:	61bb      	str	r3, [r7, #24]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 8009d14:	68ba      	ldr	r2, [r7, #8]
 8009d16:	f107 0318 	add.w	r3, r7, #24
 8009d1a:	4611      	mov	r1, r2
 8009d1c:	4618      	mov	r0, r3
 8009d1e:	f7ff fb1f 	bl	8009360 <follow_path>
 8009d22:	4603      	mov	r3, r0
 8009d24:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
#if !FF_FS_READONLY	/* Read/Write configuration */
		if (res == FR_OK) {
 8009d28:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8009d2c:	2b00      	cmp	r3, #0
 8009d2e:	d107      	bne.n	8009d40 <f_open+0x70>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 8009d30:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8009d34:	b25b      	sxtb	r3, r3
 8009d36:	2b00      	cmp	r3, #0
 8009d38:	da02      	bge.n	8009d40 <f_open+0x70>
				res = FR_INVALID_NAME;
 8009d3a:	2306      	movs	r3, #6
 8009d3c:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
				res = chk_share(&dj, (mode & ~FA_READ) ? 1 : 0);	/* Check if the file can be used */
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 8009d40:	79fb      	ldrb	r3, [r7, #7]
 8009d42:	f003 031c 	and.w	r3, r3, #28
 8009d46:	2b00      	cmp	r3, #0
 8009d48:	d077      	beq.n	8009e3a <f_open+0x16a>
			if (res != FR_OK) {					/* No file, create new */
 8009d4a:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8009d4e:	2b00      	cmp	r3, #0
 8009d50:	d010      	beq.n	8009d74 <f_open+0xa4>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 8009d52:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8009d56:	2b04      	cmp	r3, #4
 8009d58:	d107      	bne.n	8009d6a <f_open+0x9a>
#if FF_FS_LOCK
					res = enq_share() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
#else
					res = dir_register(&dj);
 8009d5a:	f107 0318 	add.w	r3, r7, #24
 8009d5e:	4618      	mov	r0, r3
 8009d60:	f7ff f9f4 	bl	800914c <dir_register>
 8009d64:	4603      	mov	r3, r0
 8009d66:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 8009d6a:	79fb      	ldrb	r3, [r7, #7]
 8009d6c:	f043 0308 	orr.w	r3, r3, #8
 8009d70:	71fb      	strb	r3, [r7, #7]
 8009d72:	e010      	b.n	8009d96 <f_open+0xc6>
			}
			else {								/* Any object with the same name is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 8009d74:	7fbb      	ldrb	r3, [r7, #30]
 8009d76:	f003 0311 	and.w	r3, r3, #17
 8009d7a:	2b00      	cmp	r3, #0
 8009d7c:	d003      	beq.n	8009d86 <f_open+0xb6>
					res = FR_DENIED;
 8009d7e:	2307      	movs	r3, #7
 8009d80:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 8009d84:	e007      	b.n	8009d96 <f_open+0xc6>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 8009d86:	79fb      	ldrb	r3, [r7, #7]
 8009d88:	f003 0304 	and.w	r3, r3, #4
 8009d8c:	2b00      	cmp	r3, #0
 8009d8e:	d002      	beq.n	8009d96 <f_open+0xc6>
 8009d90:	2308      	movs	r3, #8
 8009d92:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate the file if overwrite mode */
 8009d96:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8009d9a:	2b00      	cmp	r3, #0
 8009d9c:	d167      	bne.n	8009e6e <f_open+0x19e>
 8009d9e:	79fb      	ldrb	r3, [r7, #7]
 8009da0:	f003 0308 	and.w	r3, r3, #8
 8009da4:	2b00      	cmp	r3, #0
 8009da6:	d062      	beq.n	8009e6e <f_open+0x19e>
					}
				} else
#endif
				{
					/* Set directory entry initial state */
					tm = GET_FATTIME();					/* Set created time */
 8009da8:	4b94      	ldr	r3, [pc, #592]	@ (8009ffc <f_open+0x32c>)
 8009daa:	653b      	str	r3, [r7, #80]	@ 0x50
					st_dword(dj.dir + DIR_CrtTime, tm);
 8009dac:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009dae:	330e      	adds	r3, #14
 8009db0:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8009db2:	4618      	mov	r0, r3
 8009db4:	f7fe fb11 	bl	80083da <st_dword>
					st_dword(dj.dir + DIR_ModTime, tm);
 8009db8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009dba:	3316      	adds	r3, #22
 8009dbc:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8009dbe:	4618      	mov	r0, r3
 8009dc0:	f7fe fb0b 	bl	80083da <st_dword>
					cl = ld_clust(fs, dj.dir);			/* Get current cluster chain */
 8009dc4:	697b      	ldr	r3, [r7, #20]
 8009dc6:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8009dc8:	4611      	mov	r1, r2
 8009dca:	4618      	mov	r0, r3
 8009dcc:	f7ff f92a 	bl	8009024 <ld_clust>
 8009dd0:	64f8      	str	r0, [r7, #76]	@ 0x4c
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 8009dd2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009dd4:	330b      	adds	r3, #11
 8009dd6:	2220      	movs	r2, #32
 8009dd8:	701a      	strb	r2, [r3, #0]
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 8009dda:	697b      	ldr	r3, [r7, #20]
 8009ddc:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8009dde:	2200      	movs	r2, #0
 8009de0:	4618      	mov	r0, r3
 8009de2:	f7ff f93e 	bl	8009062 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 8009de6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009de8:	331c      	adds	r3, #28
 8009dea:	2100      	movs	r1, #0
 8009dec:	4618      	mov	r0, r3
 8009dee:	f7fe faf4 	bl	80083da <st_dword>
					fs->wflag = 1;
 8009df2:	697b      	ldr	r3, [r7, #20]
 8009df4:	2201      	movs	r2, #1
 8009df6:	711a      	strb	r2, [r3, #4]
					if (cl != 0) {						/* Remove the cluster chain if exist */
 8009df8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009dfa:	2b00      	cmp	r3, #0
 8009dfc:	d037      	beq.n	8009e6e <f_open+0x19e>
						sc = fs->winsect;
 8009dfe:	697b      	ldr	r3, [r7, #20]
 8009e00:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009e02:	64bb      	str	r3, [r7, #72]	@ 0x48
						res = remove_chain(&dj.obj, cl, 0);
 8009e04:	f107 0318 	add.w	r3, r7, #24
 8009e08:	2200      	movs	r2, #0
 8009e0a:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 8009e0c:	4618      	mov	r0, r3
 8009e0e:	f7fe fe15 	bl	8008a3c <remove_chain>
 8009e12:	4603      	mov	r3, r0
 8009e14:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
						if (res == FR_OK) {
 8009e18:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8009e1c:	2b00      	cmp	r3, #0
 8009e1e:	d126      	bne.n	8009e6e <f_open+0x19e>
							res = move_window(fs, sc);
 8009e20:	697b      	ldr	r3, [r7, #20]
 8009e22:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 8009e24:	4618      	mov	r0, r3
 8009e26:	f7fe fb62 	bl	80084ee <move_window>
 8009e2a:	4603      	mov	r3, r0
 8009e2c:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 8009e30:	697b      	ldr	r3, [r7, #20]
 8009e32:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8009e34:	3a01      	subs	r2, #1
 8009e36:	611a      	str	r2, [r3, #16]
 8009e38:	e019      	b.n	8009e6e <f_open+0x19e>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Is the object exsiting? */
 8009e3a:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8009e3e:	2b00      	cmp	r3, #0
 8009e40:	d115      	bne.n	8009e6e <f_open+0x19e>
				if (dj.obj.attr & AM_DIR) {		/* File open against a directory */
 8009e42:	7fbb      	ldrb	r3, [r7, #30]
 8009e44:	f003 0310 	and.w	r3, r3, #16
 8009e48:	2b00      	cmp	r3, #0
 8009e4a:	d003      	beq.n	8009e54 <f_open+0x184>
					res = FR_NO_FILE;
 8009e4c:	2304      	movs	r3, #4
 8009e4e:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 8009e52:	e00c      	b.n	8009e6e <f_open+0x19e>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* Write mode open against R/O file */
 8009e54:	79fb      	ldrb	r3, [r7, #7]
 8009e56:	f003 0302 	and.w	r3, r3, #2
 8009e5a:	2b00      	cmp	r3, #0
 8009e5c:	d007      	beq.n	8009e6e <f_open+0x19e>
 8009e5e:	7fbb      	ldrb	r3, [r7, #30]
 8009e60:	f003 0301 	and.w	r3, r3, #1
 8009e64:	2b00      	cmp	r3, #0
 8009e66:	d002      	beq.n	8009e6e <f_open+0x19e>
						res = FR_DENIED;
 8009e68:	2307      	movs	r3, #7
 8009e6a:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 8009e6e:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8009e72:	2b00      	cmp	r3, #0
 8009e74:	d10f      	bne.n	8009e96 <f_open+0x1c6>
			if (mode & FA_CREATE_ALWAYS) mode |= FA_MODIFIED;	/* Set file change flag if created or overwritten */
 8009e76:	79fb      	ldrb	r3, [r7, #7]
 8009e78:	f003 0308 	and.w	r3, r3, #8
 8009e7c:	2b00      	cmp	r3, #0
 8009e7e:	d003      	beq.n	8009e88 <f_open+0x1b8>
 8009e80:	79fb      	ldrb	r3, [r7, #7]
 8009e82:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009e86:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 8009e88:	697b      	ldr	r3, [r7, #20]
 8009e8a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8009e8c:	68fb      	ldr	r3, [r7, #12]
 8009e8e:	621a      	str	r2, [r3, #32]
			fp->dir_ptr = dj.dir;
 8009e90:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8009e92:	68fb      	ldr	r3, [r7, #12]
 8009e94:	625a      	str	r2, [r3, #36]	@ 0x24
				}
			}
		}
#endif

		if (res == FR_OK) {
 8009e96:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8009e9a:	2b00      	cmp	r3, #0
 8009e9c:	f040 80a0 	bne.w	8009fe0 <f_open+0x310>
				fp->obj.c_ofs = dj.blk_ofs;
				init_alloc_info(fs, &fp->obj);
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 8009ea0:	697b      	ldr	r3, [r7, #20]
 8009ea2:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8009ea4:	4611      	mov	r1, r2
 8009ea6:	4618      	mov	r0, r3
 8009ea8:	f7ff f8bc 	bl	8009024 <ld_clust>
 8009eac:	4602      	mov	r2, r0
 8009eae:	68fb      	ldr	r3, [r7, #12]
 8009eb0:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 8009eb2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009eb4:	331c      	adds	r3, #28
 8009eb6:	4618      	mov	r0, r3
 8009eb8:	f7fe fa51 	bl	800835e <ld_dword>
 8009ebc:	4602      	mov	r2, r0
 8009ebe:	68fb      	ldr	r3, [r7, #12]
 8009ec0:	60da      	str	r2, [r3, #12]
			}
#if FF_USE_FASTSEEK
			fp->cltbl = 0;		/* Disable fast seek mode */
#endif
			fp->obj.fs = fs;	/* Validate the file object */
 8009ec2:	697a      	ldr	r2, [r7, #20]
 8009ec4:	68fb      	ldr	r3, [r7, #12]
 8009ec6:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 8009ec8:	697b      	ldr	r3, [r7, #20]
 8009eca:	88da      	ldrh	r2, [r3, #6]
 8009ecc:	68fb      	ldr	r3, [r7, #12]
 8009ece:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;	/* Set file access mode */
 8009ed0:	68fb      	ldr	r3, [r7, #12]
 8009ed2:	79fa      	ldrb	r2, [r7, #7]
 8009ed4:	741a      	strb	r2, [r3, #16]
			fp->err = 0;		/* Clear error flag */
 8009ed6:	68fb      	ldr	r3, [r7, #12]
 8009ed8:	2200      	movs	r2, #0
 8009eda:	745a      	strb	r2, [r3, #17]
			fp->sect = 0;		/* Invalidate current data sector */
 8009edc:	68fb      	ldr	r3, [r7, #12]
 8009ede:	2200      	movs	r2, #0
 8009ee0:	61da      	str	r2, [r3, #28]
			fp->fptr = 0;		/* Set file pointer top of the file */
 8009ee2:	68fb      	ldr	r3, [r7, #12]
 8009ee4:	2200      	movs	r2, #0
 8009ee6:	615a      	str	r2, [r3, #20]
#if !FF_FS_READONLY
#if !FF_FS_TINY
			memset(fp->buf, 0, sizeof fp->buf);	/* Clear sector buffer */
 8009ee8:	68fb      	ldr	r3, [r7, #12]
 8009eea:	3328      	adds	r3, #40	@ 0x28
 8009eec:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8009ef0:	2100      	movs	r1, #0
 8009ef2:	4618      	mov	r0, r3
 8009ef4:	f00c face 	bl	8016494 <memset>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 8009ef8:	79fb      	ldrb	r3, [r7, #7]
 8009efa:	f003 0320 	and.w	r3, r3, #32
 8009efe:	2b00      	cmp	r3, #0
 8009f00:	d06e      	beq.n	8009fe0 <f_open+0x310>
 8009f02:	68fb      	ldr	r3, [r7, #12]
 8009f04:	68db      	ldr	r3, [r3, #12]
 8009f06:	2b00      	cmp	r3, #0
 8009f08:	d06a      	beq.n	8009fe0 <f_open+0x310>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 8009f0a:	68fb      	ldr	r3, [r7, #12]
 8009f0c:	68da      	ldr	r2, [r3, #12]
 8009f0e:	68fb      	ldr	r3, [r7, #12]
 8009f10:	615a      	str	r2, [r3, #20]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 8009f12:	697b      	ldr	r3, [r7, #20]
 8009f14:	895b      	ldrh	r3, [r3, #10]
 8009f16:	461a      	mov	r2, r3
 8009f18:	697b      	ldr	r3, [r7, #20]
 8009f1a:	899b      	ldrh	r3, [r3, #12]
 8009f1c:	fb02 f303 	mul.w	r3, r2, r3
 8009f20:	647b      	str	r3, [r7, #68]	@ 0x44
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 8009f22:	68fb      	ldr	r3, [r7, #12]
 8009f24:	689b      	ldr	r3, [r3, #8]
 8009f26:	65bb      	str	r3, [r7, #88]	@ 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8009f28:	68fb      	ldr	r3, [r7, #12]
 8009f2a:	68db      	ldr	r3, [r3, #12]
 8009f2c:	657b      	str	r3, [r7, #84]	@ 0x54
 8009f2e:	e016      	b.n	8009f5e <f_open+0x28e>
					clst = get_fat(&fp->obj, clst);
 8009f30:	68fb      	ldr	r3, [r7, #12]
 8009f32:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8009f34:	4618      	mov	r0, r3
 8009f36:	f7fe fb94 	bl	8008662 <get_fat>
 8009f3a:	65b8      	str	r0, [r7, #88]	@ 0x58
					if (clst <= 1) res = FR_INT_ERR;
 8009f3c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8009f3e:	2b01      	cmp	r3, #1
 8009f40:	d802      	bhi.n	8009f48 <f_open+0x278>
 8009f42:	2302      	movs	r3, #2
 8009f44:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 8009f48:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8009f4a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009f4e:	d102      	bne.n	8009f56 <f_open+0x286>
 8009f50:	2301      	movs	r3, #1
 8009f52:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8009f56:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8009f58:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009f5a:	1ad3      	subs	r3, r2, r3
 8009f5c:	657b      	str	r3, [r7, #84]	@ 0x54
 8009f5e:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8009f62:	2b00      	cmp	r3, #0
 8009f64:	d103      	bne.n	8009f6e <f_open+0x29e>
 8009f66:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8009f68:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009f6a:	429a      	cmp	r2, r3
 8009f6c:	d8e0      	bhi.n	8009f30 <f_open+0x260>
				}
				fp->clust = clst;
 8009f6e:	68fb      	ldr	r3, [r7, #12]
 8009f70:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8009f72:	619a      	str	r2, [r3, #24]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 8009f74:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8009f78:	2b00      	cmp	r3, #0
 8009f7a:	d131      	bne.n	8009fe0 <f_open+0x310>
 8009f7c:	697b      	ldr	r3, [r7, #20]
 8009f7e:	899b      	ldrh	r3, [r3, #12]
 8009f80:	461a      	mov	r2, r3
 8009f82:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009f84:	fbb3 f1f2 	udiv	r1, r3, r2
 8009f88:	fb01 f202 	mul.w	r2, r1, r2
 8009f8c:	1a9b      	subs	r3, r3, r2
 8009f8e:	2b00      	cmp	r3, #0
 8009f90:	d026      	beq.n	8009fe0 <f_open+0x310>
					sc = clst2sect(fs, clst);
 8009f92:	697b      	ldr	r3, [r7, #20]
 8009f94:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8009f96:	4618      	mov	r0, r3
 8009f98:	f7fe fb44 	bl	8008624 <clst2sect>
 8009f9c:	64b8      	str	r0, [r7, #72]	@ 0x48
					if (sc == 0) {
 8009f9e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009fa0:	2b00      	cmp	r3, #0
 8009fa2:	d103      	bne.n	8009fac <f_open+0x2dc>
						res = FR_INT_ERR;
 8009fa4:	2302      	movs	r3, #2
 8009fa6:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 8009faa:	e019      	b.n	8009fe0 <f_open+0x310>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 8009fac:	697b      	ldr	r3, [r7, #20]
 8009fae:	899b      	ldrh	r3, [r3, #12]
 8009fb0:	461a      	mov	r2, r3
 8009fb2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009fb4:	fbb3 f2f2 	udiv	r2, r3, r2
 8009fb8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009fba:	441a      	add	r2, r3
 8009fbc:	68fb      	ldr	r3, [r7, #12]
 8009fbe:	61da      	str	r2, [r3, #28]
#if !FF_FS_TINY
						if (disk_read(fs->pdrv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 8009fc0:	697b      	ldr	r3, [r7, #20]
 8009fc2:	7858      	ldrb	r0, [r3, #1]
 8009fc4:	68fb      	ldr	r3, [r7, #12]
 8009fc6:	f103 0128 	add.w	r1, r3, #40	@ 0x28
 8009fca:	68fb      	ldr	r3, [r7, #12]
 8009fcc:	69da      	ldr	r2, [r3, #28]
 8009fce:	2301      	movs	r3, #1
 8009fd0:	f7fe f8c4 	bl	800815c <disk_read>
 8009fd4:	4603      	mov	r3, r0
 8009fd6:	2b00      	cmp	r3, #0
 8009fd8:	d002      	beq.n	8009fe0 <f_open+0x310>
 8009fda:	2301      	movs	r3, #1
 8009fdc:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 8009fe0:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8009fe4:	2b00      	cmp	r3, #0
 8009fe6:	d002      	beq.n	8009fee <f_open+0x31e>
 8009fe8:	68fb      	ldr	r3, [r7, #12]
 8009fea:	2200      	movs	r2, #0
 8009fec:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 8009fee:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
}
 8009ff2:	4618      	mov	r0, r3
 8009ff4:	3760      	adds	r7, #96	@ 0x60
 8009ff6:	46bd      	mov	sp, r7
 8009ff8:	bd80      	pop	{r7, pc}
 8009ffa:	bf00      	nop
 8009ffc:	54210000 	.word	0x54210000

0800a000 <f_read>:
	FIL* fp, 	/* Open file to be read */
	void* buff,	/* Data buffer to store the read data */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Number of bytes read */
)
{
 800a000:	b580      	push	{r7, lr}
 800a002:	b08e      	sub	sp, #56	@ 0x38
 800a004:	af00      	add	r7, sp, #0
 800a006:	60f8      	str	r0, [r7, #12]
 800a008:	60b9      	str	r1, [r7, #8]
 800a00a:	607a      	str	r2, [r7, #4]
 800a00c:	603b      	str	r3, [r7, #0]
	FATFS *fs;
	DWORD clst;
	LBA_t sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 800a00e:	68bb      	ldr	r3, [r7, #8]
 800a010:	627b      	str	r3, [r7, #36]	@ 0x24


	*br = 0;	/* Clear read byte counter */
 800a012:	683b      	ldr	r3, [r7, #0]
 800a014:	2200      	movs	r2, #0
 800a016:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 800a018:	68fb      	ldr	r3, [r7, #12]
 800a01a:	f107 0214 	add.w	r2, r7, #20
 800a01e:	4611      	mov	r1, r2
 800a020:	4618      	mov	r0, r3
 800a022:	f7ff fdd5 	bl	8009bd0 <validate>
 800a026:	4603      	mov	r3, r0
 800a028:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800a02c:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800a030:	2b00      	cmp	r3, #0
 800a032:	d107      	bne.n	800a044 <f_read+0x44>
 800a034:	68fb      	ldr	r3, [r7, #12]
 800a036:	7c5b      	ldrb	r3, [r3, #17]
 800a038:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 800a03c:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800a040:	2b00      	cmp	r3, #0
 800a042:	d002      	beq.n	800a04a <f_read+0x4a>
 800a044:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800a048:	e129      	b.n	800a29e <f_read+0x29e>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 800a04a:	68fb      	ldr	r3, [r7, #12]
 800a04c:	7c1b      	ldrb	r3, [r3, #16]
 800a04e:	f003 0301 	and.w	r3, r3, #1
 800a052:	2b00      	cmp	r3, #0
 800a054:	d101      	bne.n	800a05a <f_read+0x5a>
 800a056:	2307      	movs	r3, #7
 800a058:	e121      	b.n	800a29e <f_read+0x29e>
	remain = fp->obj.objsize - fp->fptr;
 800a05a:	68fb      	ldr	r3, [r7, #12]
 800a05c:	68da      	ldr	r2, [r3, #12]
 800a05e:	68fb      	ldr	r3, [r7, #12]
 800a060:	695b      	ldr	r3, [r3, #20]
 800a062:	1ad3      	subs	r3, r2, r3
 800a064:	623b      	str	r3, [r7, #32]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 800a066:	687a      	ldr	r2, [r7, #4]
 800a068:	6a3b      	ldr	r3, [r7, #32]
 800a06a:	429a      	cmp	r2, r3
 800a06c:	f240 8112 	bls.w	800a294 <f_read+0x294>
 800a070:	6a3b      	ldr	r3, [r7, #32]
 800a072:	607b      	str	r3, [r7, #4]

	for ( ; btr > 0; btr -= rcnt, *br += rcnt, rbuff += rcnt, fp->fptr += rcnt) {	/* Repeat until btr bytes read */
 800a074:	e10e      	b.n	800a294 <f_read+0x294>
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 800a076:	68fb      	ldr	r3, [r7, #12]
 800a078:	695b      	ldr	r3, [r3, #20]
 800a07a:	697a      	ldr	r2, [r7, #20]
 800a07c:	8992      	ldrh	r2, [r2, #12]
 800a07e:	fbb3 f1f2 	udiv	r1, r3, r2
 800a082:	fb01 f202 	mul.w	r2, r1, r2
 800a086:	1a9b      	subs	r3, r3, r2
 800a088:	2b00      	cmp	r3, #0
 800a08a:	f040 80c9 	bne.w	800a220 <f_read+0x220>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 800a08e:	68fb      	ldr	r3, [r7, #12]
 800a090:	695b      	ldr	r3, [r3, #20]
 800a092:	697a      	ldr	r2, [r7, #20]
 800a094:	8992      	ldrh	r2, [r2, #12]
 800a096:	fbb3 f3f2 	udiv	r3, r3, r2
 800a09a:	697a      	ldr	r2, [r7, #20]
 800a09c:	8952      	ldrh	r2, [r2, #10]
 800a09e:	3a01      	subs	r2, #1
 800a0a0:	4013      	ands	r3, r2
 800a0a2:	61fb      	str	r3, [r7, #28]
			if (csect == 0) {					/* On the cluster boundary? */
 800a0a4:	69fb      	ldr	r3, [r7, #28]
 800a0a6:	2b00      	cmp	r3, #0
 800a0a8:	d123      	bne.n	800a0f2 <f_read+0xf2>
				if (fp->fptr == 0) {			/* On the top of the file? */
 800a0aa:	68fb      	ldr	r3, [r7, #12]
 800a0ac:	695b      	ldr	r3, [r3, #20]
 800a0ae:	2b00      	cmp	r3, #0
 800a0b0:	d103      	bne.n	800a0ba <f_read+0xba>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 800a0b2:	68fb      	ldr	r3, [r7, #12]
 800a0b4:	689b      	ldr	r3, [r3, #8]
 800a0b6:	633b      	str	r3, [r7, #48]	@ 0x30
 800a0b8:	e007      	b.n	800a0ca <f_read+0xca>
					if (fp->cltbl) {
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 800a0ba:	68fa      	ldr	r2, [r7, #12]
 800a0bc:	68fb      	ldr	r3, [r7, #12]
 800a0be:	699b      	ldr	r3, [r3, #24]
 800a0c0:	4619      	mov	r1, r3
 800a0c2:	4610      	mov	r0, r2
 800a0c4:	f7fe facd 	bl	8008662 <get_fat>
 800a0c8:	6338      	str	r0, [r7, #48]	@ 0x30
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 800a0ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a0cc:	2b01      	cmp	r3, #1
 800a0ce:	d804      	bhi.n	800a0da <f_read+0xda>
 800a0d0:	68fb      	ldr	r3, [r7, #12]
 800a0d2:	2202      	movs	r2, #2
 800a0d4:	745a      	strb	r2, [r3, #17]
 800a0d6:	2302      	movs	r3, #2
 800a0d8:	e0e1      	b.n	800a29e <f_read+0x29e>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800a0da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a0dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a0e0:	d104      	bne.n	800a0ec <f_read+0xec>
 800a0e2:	68fb      	ldr	r3, [r7, #12]
 800a0e4:	2201      	movs	r2, #1
 800a0e6:	745a      	strb	r2, [r3, #17]
 800a0e8:	2301      	movs	r3, #1
 800a0ea:	e0d8      	b.n	800a29e <f_read+0x29e>
				fp->clust = clst;				/* Update current cluster */
 800a0ec:	68fb      	ldr	r3, [r7, #12]
 800a0ee:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a0f0:	619a      	str	r2, [r3, #24]
			}
			sect = clst2sect(fs, fp->clust);	/* Get current sector */
 800a0f2:	697a      	ldr	r2, [r7, #20]
 800a0f4:	68fb      	ldr	r3, [r7, #12]
 800a0f6:	699b      	ldr	r3, [r3, #24]
 800a0f8:	4619      	mov	r1, r3
 800a0fa:	4610      	mov	r0, r2
 800a0fc:	f7fe fa92 	bl	8008624 <clst2sect>
 800a100:	61b8      	str	r0, [r7, #24]
			if (sect == 0) ABORT(fs, FR_INT_ERR);
 800a102:	69bb      	ldr	r3, [r7, #24]
 800a104:	2b00      	cmp	r3, #0
 800a106:	d104      	bne.n	800a112 <f_read+0x112>
 800a108:	68fb      	ldr	r3, [r7, #12]
 800a10a:	2202      	movs	r2, #2
 800a10c:	745a      	strb	r2, [r3, #17]
 800a10e:	2302      	movs	r3, #2
 800a110:	e0c5      	b.n	800a29e <f_read+0x29e>
			sect += csect;
 800a112:	69ba      	ldr	r2, [r7, #24]
 800a114:	69fb      	ldr	r3, [r7, #28]
 800a116:	4413      	add	r3, r2
 800a118:	61bb      	str	r3, [r7, #24]
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 800a11a:	697b      	ldr	r3, [r7, #20]
 800a11c:	899b      	ldrh	r3, [r3, #12]
 800a11e:	461a      	mov	r2, r3
 800a120:	687b      	ldr	r3, [r7, #4]
 800a122:	fbb3 f3f2 	udiv	r3, r3, r2
 800a126:	62bb      	str	r3, [r7, #40]	@ 0x28
			if (cc > 0) {						/* Read maximum contiguous sectors directly */
 800a128:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a12a:	2b00      	cmp	r3, #0
 800a12c:	d041      	beq.n	800a1b2 <f_read+0x1b2>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800a12e:	69fa      	ldr	r2, [r7, #28]
 800a130:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a132:	4413      	add	r3, r2
 800a134:	697a      	ldr	r2, [r7, #20]
 800a136:	8952      	ldrh	r2, [r2, #10]
 800a138:	4293      	cmp	r3, r2
 800a13a:	d905      	bls.n	800a148 <f_read+0x148>
					cc = fs->csize - csect;
 800a13c:	697b      	ldr	r3, [r7, #20]
 800a13e:	895b      	ldrh	r3, [r3, #10]
 800a140:	461a      	mov	r2, r3
 800a142:	69fb      	ldr	r3, [r7, #28]
 800a144:	1ad3      	subs	r3, r2, r3
 800a146:	62bb      	str	r3, [r7, #40]	@ 0x28
				}
				if (disk_read(fs->pdrv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800a148:	697b      	ldr	r3, [r7, #20]
 800a14a:	7858      	ldrb	r0, [r3, #1]
 800a14c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a14e:	69ba      	ldr	r2, [r7, #24]
 800a150:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800a152:	f7fe f803 	bl	800815c <disk_read>
 800a156:	4603      	mov	r3, r0
 800a158:	2b00      	cmp	r3, #0
 800a15a:	d004      	beq.n	800a166 <f_read+0x166>
 800a15c:	68fb      	ldr	r3, [r7, #12]
 800a15e:	2201      	movs	r2, #1
 800a160:	745a      	strb	r2, [r3, #17]
 800a162:	2301      	movs	r3, #1
 800a164:	e09b      	b.n	800a29e <f_read+0x29e>
#if FF_FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					memcpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 800a166:	68fb      	ldr	r3, [r7, #12]
 800a168:	7c1b      	ldrb	r3, [r3, #16]
 800a16a:	b25b      	sxtb	r3, r3
 800a16c:	2b00      	cmp	r3, #0
 800a16e:	da18      	bge.n	800a1a2 <f_read+0x1a2>
 800a170:	68fb      	ldr	r3, [r7, #12]
 800a172:	69da      	ldr	r2, [r3, #28]
 800a174:	69bb      	ldr	r3, [r7, #24]
 800a176:	1ad3      	subs	r3, r2, r3
 800a178:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800a17a:	429a      	cmp	r2, r3
 800a17c:	d911      	bls.n	800a1a2 <f_read+0x1a2>
					memcpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 800a17e:	68fb      	ldr	r3, [r7, #12]
 800a180:	69da      	ldr	r2, [r3, #28]
 800a182:	69bb      	ldr	r3, [r7, #24]
 800a184:	1ad3      	subs	r3, r2, r3
 800a186:	697a      	ldr	r2, [r7, #20]
 800a188:	8992      	ldrh	r2, [r2, #12]
 800a18a:	fb02 f303 	mul.w	r3, r2, r3
 800a18e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a190:	18d0      	adds	r0, r2, r3
 800a192:	68fb      	ldr	r3, [r7, #12]
 800a194:	f103 0128 	add.w	r1, r3, #40	@ 0x28
 800a198:	697b      	ldr	r3, [r7, #20]
 800a19a:	899b      	ldrh	r3, [r3, #12]
 800a19c:	461a      	mov	r2, r3
 800a19e:	f00c f9fd 	bl	801659c <memcpy>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 800a1a2:	697b      	ldr	r3, [r7, #20]
 800a1a4:	899b      	ldrh	r3, [r3, #12]
 800a1a6:	461a      	mov	r2, r3
 800a1a8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a1aa:	fb02 f303 	mul.w	r3, r2, r3
 800a1ae:	62fb      	str	r3, [r7, #44]	@ 0x2c
				continue;
 800a1b0:	e05c      	b.n	800a26c <f_read+0x26c>
			}
#if !FF_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 800a1b2:	68fb      	ldr	r3, [r7, #12]
 800a1b4:	69db      	ldr	r3, [r3, #28]
 800a1b6:	69ba      	ldr	r2, [r7, #24]
 800a1b8:	429a      	cmp	r2, r3
 800a1ba:	d02e      	beq.n	800a21a <f_read+0x21a>
#if !FF_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 800a1bc:	68fb      	ldr	r3, [r7, #12]
 800a1be:	7c1b      	ldrb	r3, [r3, #16]
 800a1c0:	b25b      	sxtb	r3, r3
 800a1c2:	2b00      	cmp	r3, #0
 800a1c4:	da18      	bge.n	800a1f8 <f_read+0x1f8>
					if (disk_write(fs->pdrv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800a1c6:	697b      	ldr	r3, [r7, #20]
 800a1c8:	7858      	ldrb	r0, [r3, #1]
 800a1ca:	68fb      	ldr	r3, [r7, #12]
 800a1cc:	f103 0128 	add.w	r1, r3, #40	@ 0x28
 800a1d0:	68fb      	ldr	r3, [r7, #12]
 800a1d2:	69da      	ldr	r2, [r3, #28]
 800a1d4:	2301      	movs	r3, #1
 800a1d6:	f7fd fff3 	bl	80081c0 <disk_write>
 800a1da:	4603      	mov	r3, r0
 800a1dc:	2b00      	cmp	r3, #0
 800a1de:	d004      	beq.n	800a1ea <f_read+0x1ea>
 800a1e0:	68fb      	ldr	r3, [r7, #12]
 800a1e2:	2201      	movs	r2, #1
 800a1e4:	745a      	strb	r2, [r3, #17]
 800a1e6:	2301      	movs	r3, #1
 800a1e8:	e059      	b.n	800a29e <f_read+0x29e>
					fp->flag &= (BYTE)~FA_DIRTY;
 800a1ea:	68fb      	ldr	r3, [r7, #12]
 800a1ec:	7c1b      	ldrb	r3, [r3, #16]
 800a1ee:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a1f2:	b2da      	uxtb	r2, r3
 800a1f4:	68fb      	ldr	r3, [r7, #12]
 800a1f6:	741a      	strb	r2, [r3, #16]
				}
#endif
				if (disk_read(fs->pdrv, fp->buf, sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 800a1f8:	697b      	ldr	r3, [r7, #20]
 800a1fa:	7858      	ldrb	r0, [r3, #1]
 800a1fc:	68fb      	ldr	r3, [r7, #12]
 800a1fe:	f103 0128 	add.w	r1, r3, #40	@ 0x28
 800a202:	2301      	movs	r3, #1
 800a204:	69ba      	ldr	r2, [r7, #24]
 800a206:	f7fd ffa9 	bl	800815c <disk_read>
 800a20a:	4603      	mov	r3, r0
 800a20c:	2b00      	cmp	r3, #0
 800a20e:	d004      	beq.n	800a21a <f_read+0x21a>
 800a210:	68fb      	ldr	r3, [r7, #12]
 800a212:	2201      	movs	r2, #1
 800a214:	745a      	strb	r2, [r3, #17]
 800a216:	2301      	movs	r3, #1
 800a218:	e041      	b.n	800a29e <f_read+0x29e>
			}
#endif
			fp->sect = sect;
 800a21a:	68fb      	ldr	r3, [r7, #12]
 800a21c:	69ba      	ldr	r2, [r7, #24]
 800a21e:	61da      	str	r2, [r3, #28]
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes remains in the sector */
 800a220:	697b      	ldr	r3, [r7, #20]
 800a222:	899b      	ldrh	r3, [r3, #12]
 800a224:	4618      	mov	r0, r3
 800a226:	68fb      	ldr	r3, [r7, #12]
 800a228:	695b      	ldr	r3, [r3, #20]
 800a22a:	697a      	ldr	r2, [r7, #20]
 800a22c:	8992      	ldrh	r2, [r2, #12]
 800a22e:	fbb3 f1f2 	udiv	r1, r3, r2
 800a232:	fb01 f202 	mul.w	r2, r1, r2
 800a236:	1a9b      	subs	r3, r3, r2
 800a238:	1ac3      	subs	r3, r0, r3
 800a23a:	62fb      	str	r3, [r7, #44]	@ 0x2c
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 800a23c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800a23e:	687b      	ldr	r3, [r7, #4]
 800a240:	429a      	cmp	r2, r3
 800a242:	d901      	bls.n	800a248 <f_read+0x248>
 800a244:	687b      	ldr	r3, [r7, #4]
 800a246:	62fb      	str	r3, [r7, #44]	@ 0x2c
#if FF_FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		memcpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		memcpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 800a248:	68fb      	ldr	r3, [r7, #12]
 800a24a:	f103 0128 	add.w	r1, r3, #40	@ 0x28
 800a24e:	68fb      	ldr	r3, [r7, #12]
 800a250:	695b      	ldr	r3, [r3, #20]
 800a252:	697a      	ldr	r2, [r7, #20]
 800a254:	8992      	ldrh	r2, [r2, #12]
 800a256:	fbb3 f0f2 	udiv	r0, r3, r2
 800a25a:	fb00 f202 	mul.w	r2, r0, r2
 800a25e:	1a9b      	subs	r3, r3, r2
 800a260:	440b      	add	r3, r1
 800a262:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800a264:	4619      	mov	r1, r3
 800a266:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800a268:	f00c f998 	bl	801659c <memcpy>
	for ( ; btr > 0; btr -= rcnt, *br += rcnt, rbuff += rcnt, fp->fptr += rcnt) {	/* Repeat until btr bytes read */
 800a26c:	687a      	ldr	r2, [r7, #4]
 800a26e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a270:	1ad3      	subs	r3, r2, r3
 800a272:	607b      	str	r3, [r7, #4]
 800a274:	683b      	ldr	r3, [r7, #0]
 800a276:	681a      	ldr	r2, [r3, #0]
 800a278:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a27a:	441a      	add	r2, r3
 800a27c:	683b      	ldr	r3, [r7, #0]
 800a27e:	601a      	str	r2, [r3, #0]
 800a280:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a282:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a284:	4413      	add	r3, r2
 800a286:	627b      	str	r3, [r7, #36]	@ 0x24
 800a288:	68fb      	ldr	r3, [r7, #12]
 800a28a:	695a      	ldr	r2, [r3, #20]
 800a28c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a28e:	441a      	add	r2, r3
 800a290:	68fb      	ldr	r3, [r7, #12]
 800a292:	615a      	str	r2, [r3, #20]
 800a294:	687b      	ldr	r3, [r7, #4]
 800a296:	2b00      	cmp	r3, #0
 800a298:	f47f aeed 	bne.w	800a076 <f_read+0x76>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 800a29c:	2300      	movs	r3, #0
}
 800a29e:	4618      	mov	r0, r3
 800a2a0:	3738      	adds	r7, #56	@ 0x38
 800a2a2:	46bd      	mov	sp, r7
 800a2a4:	bd80      	pop	{r7, pc}

0800a2a6 <f_write>:
	FIL* fp,			/* Open file to be written */
	const void* buff,	/* Data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Number of bytes written */
)
{
 800a2a6:	b580      	push	{r7, lr}
 800a2a8:	b08c      	sub	sp, #48	@ 0x30
 800a2aa:	af00      	add	r7, sp, #0
 800a2ac:	60f8      	str	r0, [r7, #12]
 800a2ae:	60b9      	str	r1, [r7, #8]
 800a2b0:	607a      	str	r2, [r7, #4]
 800a2b2:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst;
	LBA_t sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 800a2b4:	68bb      	ldr	r3, [r7, #8]
 800a2b6:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 800a2b8:	683b      	ldr	r3, [r7, #0]
 800a2ba:	2200      	movs	r2, #0
 800a2bc:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 800a2be:	68fb      	ldr	r3, [r7, #12]
 800a2c0:	f107 0210 	add.w	r2, r7, #16
 800a2c4:	4611      	mov	r1, r2
 800a2c6:	4618      	mov	r0, r3
 800a2c8:	f7ff fc82 	bl	8009bd0 <validate>
 800a2cc:	4603      	mov	r3, r0
 800a2ce:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800a2d2:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800a2d6:	2b00      	cmp	r3, #0
 800a2d8:	d107      	bne.n	800a2ea <f_write+0x44>
 800a2da:	68fb      	ldr	r3, [r7, #12]
 800a2dc:	7c5b      	ldrb	r3, [r3, #17]
 800a2de:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 800a2e2:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800a2e6:	2b00      	cmp	r3, #0
 800a2e8:	d002      	beq.n	800a2f0 <f_write+0x4a>
 800a2ea:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800a2ee:	e15e      	b.n	800a5ae <f_write+0x308>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 800a2f0:	68fb      	ldr	r3, [r7, #12]
 800a2f2:	7c1b      	ldrb	r3, [r3, #16]
 800a2f4:	f003 0302 	and.w	r3, r3, #2
 800a2f8:	2b00      	cmp	r3, #0
 800a2fa:	d101      	bne.n	800a300 <f_write+0x5a>
 800a2fc:	2307      	movs	r3, #7
 800a2fe:	e156      	b.n	800a5ae <f_write+0x308>

	/* Check fptr wrap-around (file size cannot reach 4 GiB at FAT volume) */
	if ((!FF_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 800a300:	68fb      	ldr	r3, [r7, #12]
 800a302:	695a      	ldr	r2, [r3, #20]
 800a304:	687b      	ldr	r3, [r7, #4]
 800a306:	441a      	add	r2, r3
 800a308:	68fb      	ldr	r3, [r7, #12]
 800a30a:	695b      	ldr	r3, [r3, #20]
 800a30c:	429a      	cmp	r2, r3
 800a30e:	f080 8140 	bcs.w	800a592 <f_write+0x2ec>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 800a312:	68fb      	ldr	r3, [r7, #12]
 800a314:	695b      	ldr	r3, [r3, #20]
 800a316:	43db      	mvns	r3, r3
 800a318:	607b      	str	r3, [r7, #4]
	}

	for ( ; btw > 0; btw -= wcnt, *bw += wcnt, wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize) {	/* Repeat until all data written */
 800a31a:	e13a      	b.n	800a592 <f_write+0x2ec>
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 800a31c:	68fb      	ldr	r3, [r7, #12]
 800a31e:	695b      	ldr	r3, [r3, #20]
 800a320:	693a      	ldr	r2, [r7, #16]
 800a322:	8992      	ldrh	r2, [r2, #12]
 800a324:	fbb3 f1f2 	udiv	r1, r3, r2
 800a328:	fb01 f202 	mul.w	r2, r1, r2
 800a32c:	1a9b      	subs	r3, r3, r2
 800a32e:	2b00      	cmp	r3, #0
 800a330:	f040 80e5 	bne.w	800a4fe <f_write+0x258>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 800a334:	68fb      	ldr	r3, [r7, #12]
 800a336:	695b      	ldr	r3, [r3, #20]
 800a338:	693a      	ldr	r2, [r7, #16]
 800a33a:	8992      	ldrh	r2, [r2, #12]
 800a33c:	fbb3 f3f2 	udiv	r3, r3, r2
 800a340:	693a      	ldr	r2, [r7, #16]
 800a342:	8952      	ldrh	r2, [r2, #10]
 800a344:	3a01      	subs	r2, #1
 800a346:	4013      	ands	r3, r2
 800a348:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 800a34a:	69bb      	ldr	r3, [r7, #24]
 800a34c:	2b00      	cmp	r3, #0
 800a34e:	d137      	bne.n	800a3c0 <f_write+0x11a>
				if (fp->fptr == 0) {		/* On the top of the file? */
 800a350:	68fb      	ldr	r3, [r7, #12]
 800a352:	695b      	ldr	r3, [r3, #20]
 800a354:	2b00      	cmp	r3, #0
 800a356:	d10c      	bne.n	800a372 <f_write+0xcc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 800a358:	68fb      	ldr	r3, [r7, #12]
 800a35a:	689b      	ldr	r3, [r3, #8]
 800a35c:	62bb      	str	r3, [r7, #40]	@ 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 800a35e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a360:	2b00      	cmp	r3, #0
 800a362:	d10e      	bne.n	800a382 <f_write+0xdc>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 800a364:	68fb      	ldr	r3, [r7, #12]
 800a366:	2100      	movs	r1, #0
 800a368:	4618      	mov	r0, r3
 800a36a:	f7fe fbcc 	bl	8008b06 <create_chain>
 800a36e:	62b8      	str	r0, [r7, #40]	@ 0x28
 800a370:	e007      	b.n	800a382 <f_write+0xdc>
					if (fp->cltbl) {
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 800a372:	68fa      	ldr	r2, [r7, #12]
 800a374:	68fb      	ldr	r3, [r7, #12]
 800a376:	699b      	ldr	r3, [r3, #24]
 800a378:	4619      	mov	r1, r3
 800a37a:	4610      	mov	r0, r2
 800a37c:	f7fe fbc3 	bl	8008b06 <create_chain>
 800a380:	62b8      	str	r0, [r7, #40]	@ 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800a382:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a384:	2b00      	cmp	r3, #0
 800a386:	f000 8109 	beq.w	800a59c <f_write+0x2f6>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 800a38a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a38c:	2b01      	cmp	r3, #1
 800a38e:	d104      	bne.n	800a39a <f_write+0xf4>
 800a390:	68fb      	ldr	r3, [r7, #12]
 800a392:	2202      	movs	r2, #2
 800a394:	745a      	strb	r2, [r3, #17]
 800a396:	2302      	movs	r3, #2
 800a398:	e109      	b.n	800a5ae <f_write+0x308>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800a39a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a39c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a3a0:	d104      	bne.n	800a3ac <f_write+0x106>
 800a3a2:	68fb      	ldr	r3, [r7, #12]
 800a3a4:	2201      	movs	r2, #1
 800a3a6:	745a      	strb	r2, [r3, #17]
 800a3a8:	2301      	movs	r3, #1
 800a3aa:	e100      	b.n	800a5ae <f_write+0x308>
				fp->clust = clst;			/* Update current cluster */
 800a3ac:	68fb      	ldr	r3, [r7, #12]
 800a3ae:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800a3b0:	619a      	str	r2, [r3, #24]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 800a3b2:	68fb      	ldr	r3, [r7, #12]
 800a3b4:	689b      	ldr	r3, [r3, #8]
 800a3b6:	2b00      	cmp	r3, #0
 800a3b8:	d102      	bne.n	800a3c0 <f_write+0x11a>
 800a3ba:	68fb      	ldr	r3, [r7, #12]
 800a3bc:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800a3be:	609a      	str	r2, [r3, #8]
			}
#if FF_FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 800a3c0:	68fb      	ldr	r3, [r7, #12]
 800a3c2:	7c1b      	ldrb	r3, [r3, #16]
 800a3c4:	b25b      	sxtb	r3, r3
 800a3c6:	2b00      	cmp	r3, #0
 800a3c8:	da18      	bge.n	800a3fc <f_write+0x156>
				if (disk_write(fs->pdrv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800a3ca:	693b      	ldr	r3, [r7, #16]
 800a3cc:	7858      	ldrb	r0, [r3, #1]
 800a3ce:	68fb      	ldr	r3, [r7, #12]
 800a3d0:	f103 0128 	add.w	r1, r3, #40	@ 0x28
 800a3d4:	68fb      	ldr	r3, [r7, #12]
 800a3d6:	69da      	ldr	r2, [r3, #28]
 800a3d8:	2301      	movs	r3, #1
 800a3da:	f7fd fef1 	bl	80081c0 <disk_write>
 800a3de:	4603      	mov	r3, r0
 800a3e0:	2b00      	cmp	r3, #0
 800a3e2:	d004      	beq.n	800a3ee <f_write+0x148>
 800a3e4:	68fb      	ldr	r3, [r7, #12]
 800a3e6:	2201      	movs	r2, #1
 800a3e8:	745a      	strb	r2, [r3, #17]
 800a3ea:	2301      	movs	r3, #1
 800a3ec:	e0df      	b.n	800a5ae <f_write+0x308>
				fp->flag &= (BYTE)~FA_DIRTY;
 800a3ee:	68fb      	ldr	r3, [r7, #12]
 800a3f0:	7c1b      	ldrb	r3, [r3, #16]
 800a3f2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a3f6:	b2da      	uxtb	r2, r3
 800a3f8:	68fb      	ldr	r3, [r7, #12]
 800a3fa:	741a      	strb	r2, [r3, #16]
			}
#endif
			sect = clst2sect(fs, fp->clust);	/* Get current sector */
 800a3fc:	693a      	ldr	r2, [r7, #16]
 800a3fe:	68fb      	ldr	r3, [r7, #12]
 800a400:	699b      	ldr	r3, [r3, #24]
 800a402:	4619      	mov	r1, r3
 800a404:	4610      	mov	r0, r2
 800a406:	f7fe f90d 	bl	8008624 <clst2sect>
 800a40a:	6178      	str	r0, [r7, #20]
			if (sect == 0) ABORT(fs, FR_INT_ERR);
 800a40c:	697b      	ldr	r3, [r7, #20]
 800a40e:	2b00      	cmp	r3, #0
 800a410:	d104      	bne.n	800a41c <f_write+0x176>
 800a412:	68fb      	ldr	r3, [r7, #12]
 800a414:	2202      	movs	r2, #2
 800a416:	745a      	strb	r2, [r3, #17]
 800a418:	2302      	movs	r3, #2
 800a41a:	e0c8      	b.n	800a5ae <f_write+0x308>
			sect += csect;
 800a41c:	697a      	ldr	r2, [r7, #20]
 800a41e:	69bb      	ldr	r3, [r7, #24]
 800a420:	4413      	add	r3, r2
 800a422:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 800a424:	693b      	ldr	r3, [r7, #16]
 800a426:	899b      	ldrh	r3, [r3, #12]
 800a428:	461a      	mov	r2, r3
 800a42a:	687b      	ldr	r3, [r7, #4]
 800a42c:	fbb3 f3f2 	udiv	r3, r3, r2
 800a430:	623b      	str	r3, [r7, #32]
			if (cc > 0) {					/* Write maximum contiguous sectors directly */
 800a432:	6a3b      	ldr	r3, [r7, #32]
 800a434:	2b00      	cmp	r3, #0
 800a436:	d043      	beq.n	800a4c0 <f_write+0x21a>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800a438:	69ba      	ldr	r2, [r7, #24]
 800a43a:	6a3b      	ldr	r3, [r7, #32]
 800a43c:	4413      	add	r3, r2
 800a43e:	693a      	ldr	r2, [r7, #16]
 800a440:	8952      	ldrh	r2, [r2, #10]
 800a442:	4293      	cmp	r3, r2
 800a444:	d905      	bls.n	800a452 <f_write+0x1ac>
					cc = fs->csize - csect;
 800a446:	693b      	ldr	r3, [r7, #16]
 800a448:	895b      	ldrh	r3, [r3, #10]
 800a44a:	461a      	mov	r2, r3
 800a44c:	69bb      	ldr	r3, [r7, #24]
 800a44e:	1ad3      	subs	r3, r2, r3
 800a450:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->pdrv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800a452:	693b      	ldr	r3, [r7, #16]
 800a454:	7858      	ldrb	r0, [r3, #1]
 800a456:	6a3b      	ldr	r3, [r7, #32]
 800a458:	697a      	ldr	r2, [r7, #20]
 800a45a:	69f9      	ldr	r1, [r7, #28]
 800a45c:	f7fd feb0 	bl	80081c0 <disk_write>
 800a460:	4603      	mov	r3, r0
 800a462:	2b00      	cmp	r3, #0
 800a464:	d004      	beq.n	800a470 <f_write+0x1ca>
 800a466:	68fb      	ldr	r3, [r7, #12]
 800a468:	2201      	movs	r2, #1
 800a46a:	745a      	strb	r2, [r3, #17]
 800a46c:	2301      	movs	r3, #1
 800a46e:	e09e      	b.n	800a5ae <f_write+0x308>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					memcpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 800a470:	68fb      	ldr	r3, [r7, #12]
 800a472:	69da      	ldr	r2, [r3, #28]
 800a474:	697b      	ldr	r3, [r7, #20]
 800a476:	1ad3      	subs	r3, r2, r3
 800a478:	6a3a      	ldr	r2, [r7, #32]
 800a47a:	429a      	cmp	r2, r3
 800a47c:	d918      	bls.n	800a4b0 <f_write+0x20a>
					memcpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 800a47e:	68fb      	ldr	r3, [r7, #12]
 800a480:	f103 0028 	add.w	r0, r3, #40	@ 0x28
 800a484:	68fb      	ldr	r3, [r7, #12]
 800a486:	69da      	ldr	r2, [r3, #28]
 800a488:	697b      	ldr	r3, [r7, #20]
 800a48a:	1ad3      	subs	r3, r2, r3
 800a48c:	693a      	ldr	r2, [r7, #16]
 800a48e:	8992      	ldrh	r2, [r2, #12]
 800a490:	fb02 f303 	mul.w	r3, r2, r3
 800a494:	69fa      	ldr	r2, [r7, #28]
 800a496:	18d1      	adds	r1, r2, r3
 800a498:	693b      	ldr	r3, [r7, #16]
 800a49a:	899b      	ldrh	r3, [r3, #12]
 800a49c:	461a      	mov	r2, r3
 800a49e:	f00c f87d 	bl	801659c <memcpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 800a4a2:	68fb      	ldr	r3, [r7, #12]
 800a4a4:	7c1b      	ldrb	r3, [r3, #16]
 800a4a6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a4aa:	b2da      	uxtb	r2, r3
 800a4ac:	68fb      	ldr	r3, [r7, #12]
 800a4ae:	741a      	strb	r2, [r3, #16]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 800a4b0:	693b      	ldr	r3, [r7, #16]
 800a4b2:	899b      	ldrh	r3, [r3, #12]
 800a4b4:	461a      	mov	r2, r3
 800a4b6:	6a3b      	ldr	r3, [r7, #32]
 800a4b8:	fb02 f303 	mul.w	r3, r2, r3
 800a4bc:	627b      	str	r3, [r7, #36]	@ 0x24
				continue;
 800a4be:	e04b      	b.n	800a558 <f_write+0x2b2>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800a4c0:	68fb      	ldr	r3, [r7, #12]
 800a4c2:	69db      	ldr	r3, [r3, #28]
 800a4c4:	697a      	ldr	r2, [r7, #20]
 800a4c6:	429a      	cmp	r2, r3
 800a4c8:	d016      	beq.n	800a4f8 <f_write+0x252>
				fp->fptr < fp->obj.objsize &&
 800a4ca:	68fb      	ldr	r3, [r7, #12]
 800a4cc:	695a      	ldr	r2, [r3, #20]
 800a4ce:	68fb      	ldr	r3, [r7, #12]
 800a4d0:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800a4d2:	429a      	cmp	r2, r3
 800a4d4:	d210      	bcs.n	800a4f8 <f_write+0x252>
				disk_read(fs->pdrv, fp->buf, sect, 1) != RES_OK) {
 800a4d6:	693b      	ldr	r3, [r7, #16]
 800a4d8:	7858      	ldrb	r0, [r3, #1]
 800a4da:	68fb      	ldr	r3, [r7, #12]
 800a4dc:	f103 0128 	add.w	r1, r3, #40	@ 0x28
 800a4e0:	2301      	movs	r3, #1
 800a4e2:	697a      	ldr	r2, [r7, #20]
 800a4e4:	f7fd fe3a 	bl	800815c <disk_read>
 800a4e8:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 800a4ea:	2b00      	cmp	r3, #0
 800a4ec:	d004      	beq.n	800a4f8 <f_write+0x252>
					ABORT(fs, FR_DISK_ERR);
 800a4ee:	68fb      	ldr	r3, [r7, #12]
 800a4f0:	2201      	movs	r2, #1
 800a4f2:	745a      	strb	r2, [r3, #17]
 800a4f4:	2301      	movs	r3, #1
 800a4f6:	e05a      	b.n	800a5ae <f_write+0x308>
			}
#endif
			fp->sect = sect;
 800a4f8:	68fb      	ldr	r3, [r7, #12]
 800a4fa:	697a      	ldr	r2, [r7, #20]
 800a4fc:	61da      	str	r2, [r3, #28]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes remains in the sector */
 800a4fe:	693b      	ldr	r3, [r7, #16]
 800a500:	899b      	ldrh	r3, [r3, #12]
 800a502:	4618      	mov	r0, r3
 800a504:	68fb      	ldr	r3, [r7, #12]
 800a506:	695b      	ldr	r3, [r3, #20]
 800a508:	693a      	ldr	r2, [r7, #16]
 800a50a:	8992      	ldrh	r2, [r2, #12]
 800a50c:	fbb3 f1f2 	udiv	r1, r3, r2
 800a510:	fb01 f202 	mul.w	r2, r1, r2
 800a514:	1a9b      	subs	r3, r3, r2
 800a516:	1ac3      	subs	r3, r0, r3
 800a518:	627b      	str	r3, [r7, #36]	@ 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 800a51a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a51c:	687b      	ldr	r3, [r7, #4]
 800a51e:	429a      	cmp	r2, r3
 800a520:	d901      	bls.n	800a526 <f_write+0x280>
 800a522:	687b      	ldr	r3, [r7, #4]
 800a524:	627b      	str	r3, [r7, #36]	@ 0x24
#if FF_FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		memcpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		memcpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 800a526:	68fb      	ldr	r3, [r7, #12]
 800a528:	f103 0128 	add.w	r1, r3, #40	@ 0x28
 800a52c:	68fb      	ldr	r3, [r7, #12]
 800a52e:	695b      	ldr	r3, [r3, #20]
 800a530:	693a      	ldr	r2, [r7, #16]
 800a532:	8992      	ldrh	r2, [r2, #12]
 800a534:	fbb3 f0f2 	udiv	r0, r3, r2
 800a538:	fb00 f202 	mul.w	r2, r0, r2
 800a53c:	1a9b      	subs	r3, r3, r2
 800a53e:	440b      	add	r3, r1
 800a540:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a542:	69f9      	ldr	r1, [r7, #28]
 800a544:	4618      	mov	r0, r3
 800a546:	f00c f829 	bl	801659c <memcpy>
		fp->flag |= FA_DIRTY;
 800a54a:	68fb      	ldr	r3, [r7, #12]
 800a54c:	7c1b      	ldrb	r3, [r3, #16]
 800a54e:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800a552:	b2da      	uxtb	r2, r3
 800a554:	68fb      	ldr	r3, [r7, #12]
 800a556:	741a      	strb	r2, [r3, #16]
	for ( ; btw > 0; btw -= wcnt, *bw += wcnt, wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize) {	/* Repeat until all data written */
 800a558:	687a      	ldr	r2, [r7, #4]
 800a55a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a55c:	1ad3      	subs	r3, r2, r3
 800a55e:	607b      	str	r3, [r7, #4]
 800a560:	683b      	ldr	r3, [r7, #0]
 800a562:	681a      	ldr	r2, [r3, #0]
 800a564:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a566:	441a      	add	r2, r3
 800a568:	683b      	ldr	r3, [r7, #0]
 800a56a:	601a      	str	r2, [r3, #0]
 800a56c:	69fa      	ldr	r2, [r7, #28]
 800a56e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a570:	4413      	add	r3, r2
 800a572:	61fb      	str	r3, [r7, #28]
 800a574:	68fb      	ldr	r3, [r7, #12]
 800a576:	695a      	ldr	r2, [r3, #20]
 800a578:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a57a:	441a      	add	r2, r3
 800a57c:	68fb      	ldr	r3, [r7, #12]
 800a57e:	615a      	str	r2, [r3, #20]
 800a580:	68fb      	ldr	r3, [r7, #12]
 800a582:	68da      	ldr	r2, [r3, #12]
 800a584:	68fb      	ldr	r3, [r7, #12]
 800a586:	695b      	ldr	r3, [r3, #20]
 800a588:	429a      	cmp	r2, r3
 800a58a:	bf38      	it	cc
 800a58c:	461a      	movcc	r2, r3
 800a58e:	68fb      	ldr	r3, [r7, #12]
 800a590:	60da      	str	r2, [r3, #12]
 800a592:	687b      	ldr	r3, [r7, #4]
 800a594:	2b00      	cmp	r3, #0
 800a596:	f47f aec1 	bne.w	800a31c <f_write+0x76>
 800a59a:	e000      	b.n	800a59e <f_write+0x2f8>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800a59c:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 800a59e:	68fb      	ldr	r3, [r7, #12]
 800a5a0:	7c1b      	ldrb	r3, [r3, #16]
 800a5a2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a5a6:	b2da      	uxtb	r2, r3
 800a5a8:	68fb      	ldr	r3, [r7, #12]
 800a5aa:	741a      	strb	r2, [r3, #16]

	LEAVE_FF(fs, FR_OK);
 800a5ac:	2300      	movs	r3, #0
}
 800a5ae:	4618      	mov	r0, r3
 800a5b0:	3730      	adds	r7, #48	@ 0x30
 800a5b2:	46bd      	mov	sp, r7
 800a5b4:	bd80      	pop	{r7, pc}
	...

0800a5b8 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Open file to be synced */
)
{
 800a5b8:	b580      	push	{r7, lr}
 800a5ba:	b086      	sub	sp, #24
 800a5bc:	af00      	add	r7, sp, #0
 800a5be:	6078      	str	r0, [r7, #4]
	FATFS *fs;
	DWORD tm;
	BYTE *dir;


	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 800a5c0:	687b      	ldr	r3, [r7, #4]
 800a5c2:	f107 0208 	add.w	r2, r7, #8
 800a5c6:	4611      	mov	r1, r2
 800a5c8:	4618      	mov	r0, r3
 800a5ca:	f7ff fb01 	bl	8009bd0 <validate>
 800a5ce:	4603      	mov	r3, r0
 800a5d0:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800a5d2:	7dfb      	ldrb	r3, [r7, #23]
 800a5d4:	2b00      	cmp	r3, #0
 800a5d6:	d167      	bne.n	800a6a8 <f_sync+0xf0>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 800a5d8:	687b      	ldr	r3, [r7, #4]
 800a5da:	7c1b      	ldrb	r3, [r3, #16]
 800a5dc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a5e0:	2b00      	cmp	r3, #0
 800a5e2:	d061      	beq.n	800a6a8 <f_sync+0xf0>
#if !FF_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 800a5e4:	687b      	ldr	r3, [r7, #4]
 800a5e6:	7c1b      	ldrb	r3, [r3, #16]
 800a5e8:	b25b      	sxtb	r3, r3
 800a5ea:	2b00      	cmp	r3, #0
 800a5ec:	da15      	bge.n	800a61a <f_sync+0x62>
				if (disk_write(fs->pdrv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 800a5ee:	68bb      	ldr	r3, [r7, #8]
 800a5f0:	7858      	ldrb	r0, [r3, #1]
 800a5f2:	687b      	ldr	r3, [r7, #4]
 800a5f4:	f103 0128 	add.w	r1, r3, #40	@ 0x28
 800a5f8:	687b      	ldr	r3, [r7, #4]
 800a5fa:	69da      	ldr	r2, [r3, #28]
 800a5fc:	2301      	movs	r3, #1
 800a5fe:	f7fd fddf 	bl	80081c0 <disk_write>
 800a602:	4603      	mov	r3, r0
 800a604:	2b00      	cmp	r3, #0
 800a606:	d001      	beq.n	800a60c <f_sync+0x54>
 800a608:	2301      	movs	r3, #1
 800a60a:	e04e      	b.n	800a6aa <f_sync+0xf2>
				fp->flag &= (BYTE)~FA_DIRTY;
 800a60c:	687b      	ldr	r3, [r7, #4]
 800a60e:	7c1b      	ldrb	r3, [r3, #16]
 800a610:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a614:	b2da      	uxtb	r2, r3
 800a616:	687b      	ldr	r3, [r7, #4]
 800a618:	741a      	strb	r2, [r3, #16]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 800a61a:	4b26      	ldr	r3, [pc, #152]	@ (800a6b4 <f_sync+0xfc>)
 800a61c:	613b      	str	r3, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 800a61e:	68ba      	ldr	r2, [r7, #8]
 800a620:	687b      	ldr	r3, [r7, #4]
 800a622:	6a1b      	ldr	r3, [r3, #32]
 800a624:	4619      	mov	r1, r3
 800a626:	4610      	mov	r0, r2
 800a628:	f7fd ff61 	bl	80084ee <move_window>
 800a62c:	4603      	mov	r3, r0
 800a62e:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 800a630:	7dfb      	ldrb	r3, [r7, #23]
 800a632:	2b00      	cmp	r3, #0
 800a634:	d138      	bne.n	800a6a8 <f_sync+0xf0>
					dir = fp->dir_ptr;
 800a636:	687b      	ldr	r3, [r7, #4]
 800a638:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a63a:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive attribute to indicate that the file has been changed */
 800a63c:	68fb      	ldr	r3, [r7, #12]
 800a63e:	330b      	adds	r3, #11
 800a640:	781a      	ldrb	r2, [r3, #0]
 800a642:	68fb      	ldr	r3, [r7, #12]
 800a644:	330b      	adds	r3, #11
 800a646:	f042 0220 	orr.w	r2, r2, #32
 800a64a:	b2d2      	uxtb	r2, r2
 800a64c:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation information  */
 800a64e:	687b      	ldr	r3, [r7, #4]
 800a650:	6818      	ldr	r0, [r3, #0]
 800a652:	687b      	ldr	r3, [r7, #4]
 800a654:	689b      	ldr	r3, [r3, #8]
 800a656:	461a      	mov	r2, r3
 800a658:	68f9      	ldr	r1, [r7, #12]
 800a65a:	f7fe fd02 	bl	8009062 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 800a65e:	68fb      	ldr	r3, [r7, #12]
 800a660:	f103 021c 	add.w	r2, r3, #28
 800a664:	687b      	ldr	r3, [r7, #4]
 800a666:	68db      	ldr	r3, [r3, #12]
 800a668:	4619      	mov	r1, r3
 800a66a:	4610      	mov	r0, r2
 800a66c:	f7fd feb5 	bl	80083da <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 800a670:	68fb      	ldr	r3, [r7, #12]
 800a672:	3316      	adds	r3, #22
 800a674:	6939      	ldr	r1, [r7, #16]
 800a676:	4618      	mov	r0, r3
 800a678:	f7fd feaf 	bl	80083da <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 800a67c:	68fb      	ldr	r3, [r7, #12]
 800a67e:	3312      	adds	r3, #18
 800a680:	2100      	movs	r1, #0
 800a682:	4618      	mov	r0, r3
 800a684:	f7fd fe8e 	bl	80083a4 <st_word>
					fs->wflag = 1;
 800a688:	68bb      	ldr	r3, [r7, #8]
 800a68a:	2201      	movs	r2, #1
 800a68c:	711a      	strb	r2, [r3, #4]
					res = sync_fs(fs);					/* Restore it to the directory */
 800a68e:	68bb      	ldr	r3, [r7, #8]
 800a690:	4618      	mov	r0, r3
 800a692:	f7fd ff59 	bl	8008548 <sync_fs>
 800a696:	4603      	mov	r3, r0
 800a698:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 800a69a:	687b      	ldr	r3, [r7, #4]
 800a69c:	7c1b      	ldrb	r3, [r3, #16]
 800a69e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800a6a2:	b2da      	uxtb	r2, r3
 800a6a4:	687b      	ldr	r3, [r7, #4]
 800a6a6:	741a      	strb	r2, [r3, #16]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 800a6a8:	7dfb      	ldrb	r3, [r7, #23]
}
 800a6aa:	4618      	mov	r0, r3
 800a6ac:	3718      	adds	r7, #24
 800a6ae:	46bd      	mov	sp, r7
 800a6b0:	bd80      	pop	{r7, pc}
 800a6b2:	bf00      	nop
 800a6b4:	54210000 	.word	0x54210000

0800a6b8 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Open file to be closed */
)
{
 800a6b8:	b580      	push	{r7, lr}
 800a6ba:	b084      	sub	sp, #16
 800a6bc:	af00      	add	r7, sp, #0
 800a6be:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !FF_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 800a6c0:	6878      	ldr	r0, [r7, #4]
 800a6c2:	f7ff ff79 	bl	800a5b8 <f_sync>
 800a6c6:	4603      	mov	r3, r0
 800a6c8:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 800a6ca:	7bfb      	ldrb	r3, [r7, #15]
 800a6cc:	2b00      	cmp	r3, #0
 800a6ce:	d10e      	bne.n	800a6ee <f_close+0x36>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 800a6d0:	687b      	ldr	r3, [r7, #4]
 800a6d2:	f107 0208 	add.w	r2, r7, #8
 800a6d6:	4611      	mov	r1, r2
 800a6d8:	4618      	mov	r0, r3
 800a6da:	f7ff fa79 	bl	8009bd0 <validate>
 800a6de:	4603      	mov	r3, r0
 800a6e0:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800a6e2:	7bfb      	ldrb	r3, [r7, #15]
 800a6e4:	2b00      	cmp	r3, #0
 800a6e6:	d102      	bne.n	800a6ee <f_close+0x36>
#if FF_FS_LOCK
			res = dec_share(fp->obj.lockid);		/* Decrement file open counter */
			if (res == FR_OK) fp->obj.fs = 0;	/* Invalidate file object */
#else
			fp->obj.fs = 0;	/* Invalidate file object */
 800a6e8:	687b      	ldr	r3, [r7, #4]
 800a6ea:	2200      	movs	r2, #0
 800a6ec:	601a      	str	r2, [r3, #0]
#if FF_FS_REENTRANT
			unlock_volume(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 800a6ee:	7bfb      	ldrb	r3, [r7, #15]
}
 800a6f0:	4618      	mov	r0, r3
 800a6f2:	3710      	adds	r7, #16
 800a6f4:	46bd      	mov	sp, r7
 800a6f6:	bd80      	pop	{r7, pc}

0800a6f8 <create_partition>:
	BYTE drv,			/* Physical drive number */
	const LBA_t plst[],	/* Partition list */
	BYTE sys,			/* System ID for each partition (for only MBR) */
	BYTE *buf			/* Working buffer for a sector */
)
{
 800a6f8:	b580      	push	{r7, lr}
 800a6fa:	b08e      	sub	sp, #56	@ 0x38
 800a6fc:	af00      	add	r7, sp, #0
 800a6fe:	60b9      	str	r1, [r7, #8]
 800a700:	607b      	str	r3, [r7, #4]
 800a702:	4603      	mov	r3, r0
 800a704:	73fb      	strb	r3, [r7, #15]
 800a706:	4613      	mov	r3, r2
 800a708:	73bb      	strb	r3, [r7, #14]
	DWORD sz_drv32, nxt_alloc32, sz_part32;
	BYTE *pte;
	BYTE hd, n_hd, sc, n_sc;

	/* Get physical drive size */
	if (disk_ioctl(drv, GET_SECTOR_COUNT, &sz_drv) != RES_OK) return FR_DISK_ERR;
 800a70a:	f107 0210 	add.w	r2, r7, #16
 800a70e:	7bfb      	ldrb	r3, [r7, #15]
 800a710:	2101      	movs	r1, #1
 800a712:	4618      	mov	r0, r3
 800a714:	f7fd fd88 	bl	8008228 <disk_ioctl>
 800a718:	4603      	mov	r3, r0
 800a71a:	2b00      	cmp	r3, #0
 800a71c:	d001      	beq.n	800a722 <create_partition+0x2a>
 800a71e:	2301      	movs	r3, #1
 800a720:	e108      	b.n	800a934 <create_partition+0x23c>
		if (disk_write(drv, buf, 0, 1) != RES_OK) return FR_DISK_ERR;

	} else
#endif
	{	/* Create partitions in MBR format */
		sz_drv32 = (DWORD)sz_drv;
 800a722:	693b      	ldr	r3, [r7, #16]
 800a724:	623b      	str	r3, [r7, #32]
		n_sc = N_SEC_TRACK;				/* Determine drive CHS without any consideration of the drive geometry */
 800a726:	233f      	movs	r3, #63	@ 0x3f
 800a728:	77fb      	strb	r3, [r7, #31]
		for (n_hd = 8; n_hd != 0 && sz_drv32 / n_hd / n_sc > 1024; n_hd *= 2) ;
 800a72a:	2308      	movs	r3, #8
 800a72c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800a730:	e004      	b.n	800a73c <create_partition+0x44>
 800a732:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800a736:	005b      	lsls	r3, r3, #1
 800a738:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800a73c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800a740:	2b00      	cmp	r3, #0
 800a742:	d00a      	beq.n	800a75a <create_partition+0x62>
 800a744:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800a748:	6a3a      	ldr	r2, [r7, #32]
 800a74a:	fbb2 f2f3 	udiv	r2, r2, r3
 800a74e:	7ffb      	ldrb	r3, [r7, #31]
 800a750:	fbb2 f3f3 	udiv	r3, r2, r3
 800a754:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800a758:	d8eb      	bhi.n	800a732 <create_partition+0x3a>
		if (n_hd == 0) n_hd = 255;		/* Number of heads needs to be <256 */
 800a75a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800a75e:	2b00      	cmp	r3, #0
 800a760:	d102      	bne.n	800a768 <create_partition+0x70>
 800a762:	23ff      	movs	r3, #255	@ 0xff
 800a764:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

		memset(buf, 0, FF_MAX_SS);		/* Clear MBR */
 800a768:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 800a76c:	2100      	movs	r1, #0
 800a76e:	6878      	ldr	r0, [r7, #4]
 800a770:	f00b fe90 	bl	8016494 <memset>
		pte = buf + MBR_Table;	/* Partition table in the MBR */
 800a774:	687b      	ldr	r3, [r7, #4]
 800a776:	f503 73df 	add.w	r3, r3, #446	@ 0x1be
 800a77a:	62bb      	str	r3, [r7, #40]	@ 0x28
		for (i = 0, nxt_alloc32 = n_sc; i < 4 && nxt_alloc32 != 0 && nxt_alloc32 < sz_drv32; i++, nxt_alloc32 += sz_part32) {
 800a77c:	2300      	movs	r3, #0
 800a77e:	637b      	str	r3, [r7, #52]	@ 0x34
 800a780:	7ffb      	ldrb	r3, [r7, #31]
 800a782:	633b      	str	r3, [r7, #48]	@ 0x30
 800a784:	e0b5      	b.n	800a8f2 <create_partition+0x1fa>
			sz_part32 = (DWORD)plst[i];	/* Get partition size */
 800a786:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a788:	009b      	lsls	r3, r3, #2
 800a78a:	68ba      	ldr	r2, [r7, #8]
 800a78c:	4413      	add	r3, r2
 800a78e:	681b      	ldr	r3, [r3, #0]
 800a790:	62fb      	str	r3, [r7, #44]	@ 0x2c
			if (sz_part32 <= 100) sz_part32 = (sz_part32 == 100) ? sz_drv32 : sz_drv32 / 100 * sz_part32;	/* Size in percentage? */
 800a792:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a794:	2b64      	cmp	r3, #100	@ 0x64
 800a796:	d80d      	bhi.n	800a7b4 <create_partition+0xbc>
 800a798:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a79a:	2b64      	cmp	r3, #100	@ 0x64
 800a79c:	d008      	beq.n	800a7b0 <create_partition+0xb8>
 800a79e:	6a3b      	ldr	r3, [r7, #32]
 800a7a0:	4a66      	ldr	r2, [pc, #408]	@ (800a93c <create_partition+0x244>)
 800a7a2:	fba2 2303 	umull	r2, r3, r2, r3
 800a7a6:	095b      	lsrs	r3, r3, #5
 800a7a8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800a7aa:	fb02 f303 	mul.w	r3, r2, r3
 800a7ae:	e000      	b.n	800a7b2 <create_partition+0xba>
 800a7b0:	6a3b      	ldr	r3, [r7, #32]
 800a7b2:	62fb      	str	r3, [r7, #44]	@ 0x2c
			if (nxt_alloc32 + sz_part32 > sz_drv32 || nxt_alloc32 + sz_part32 < nxt_alloc32) sz_part32 = sz_drv32 - nxt_alloc32;	/* Clip at drive size */
 800a7b4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a7b6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a7b8:	4413      	add	r3, r2
 800a7ba:	6a3a      	ldr	r2, [r7, #32]
 800a7bc:	429a      	cmp	r2, r3
 800a7be:	d305      	bcc.n	800a7cc <create_partition+0xd4>
 800a7c0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a7c2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a7c4:	4413      	add	r3, r2
 800a7c6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a7c8:	429a      	cmp	r2, r3
 800a7ca:	d903      	bls.n	800a7d4 <create_partition+0xdc>
 800a7cc:	6a3a      	ldr	r2, [r7, #32]
 800a7ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a7d0:	1ad3      	subs	r3, r2, r3
 800a7d2:	62fb      	str	r3, [r7, #44]	@ 0x2c
			if (sz_part32 == 0) break;	/* End of table or no sector to allocate? */
 800a7d4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a7d6:	2b00      	cmp	r3, #0
 800a7d8:	f000 8097 	beq.w	800a90a <create_partition+0x212>

			st_dword(pte + PTE_StLba, nxt_alloc32);	/* Start LBA */
 800a7dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a7de:	3308      	adds	r3, #8
 800a7e0:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800a7e2:	4618      	mov	r0, r3
 800a7e4:	f7fd fdf9 	bl	80083da <st_dword>
			st_dword(pte + PTE_SizLba, sz_part32);	/* Number of sectors */
 800a7e8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a7ea:	330c      	adds	r3, #12
 800a7ec:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800a7ee:	4618      	mov	r0, r3
 800a7f0:	f7fd fdf3 	bl	80083da <st_dword>
			pte[PTE_System] = sys;					/* System type */
 800a7f4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a7f6:	3304      	adds	r3, #4
 800a7f8:	7bba      	ldrb	r2, [r7, #14]
 800a7fa:	701a      	strb	r2, [r3, #0]

			cy = (UINT)(nxt_alloc32 / n_sc / n_hd);	/* Start cylinder */
 800a7fc:	7ffb      	ldrb	r3, [r7, #31]
 800a7fe:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a800:	fbb2 f2f3 	udiv	r2, r2, r3
 800a804:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800a808:	fbb2 f3f3 	udiv	r3, r2, r3
 800a80c:	61bb      	str	r3, [r7, #24]
			hd = (BYTE)(nxt_alloc32 / n_sc % n_hd);	/* Start head */
 800a80e:	7ffb      	ldrb	r3, [r7, #31]
 800a810:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a812:	fbb2 f3f3 	udiv	r3, r2, r3
 800a816:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 800a81a:	fbb3 f1f2 	udiv	r1, r3, r2
 800a81e:	fb01 f202 	mul.w	r2, r1, r2
 800a822:	1a9b      	subs	r3, r3, r2
 800a824:	75fb      	strb	r3, [r7, #23]
			sc = (BYTE)(nxt_alloc32 % n_sc + 1);	/* Start sector */
 800a826:	7ffa      	ldrb	r2, [r7, #31]
 800a828:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a82a:	fbb3 f1f2 	udiv	r1, r3, r2
 800a82e:	fb01 f202 	mul.w	r2, r1, r2
 800a832:	1a9b      	subs	r3, r3, r2
 800a834:	b2db      	uxtb	r3, r3
 800a836:	3301      	adds	r3, #1
 800a838:	75bb      	strb	r3, [r7, #22]
			pte[PTE_StHead] = hd;
 800a83a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a83c:	3301      	adds	r3, #1
 800a83e:	7dfa      	ldrb	r2, [r7, #23]
 800a840:	701a      	strb	r2, [r3, #0]
			pte[PTE_StSec] = (BYTE)((cy >> 2 & 0xC0) | sc);
 800a842:	69bb      	ldr	r3, [r7, #24]
 800a844:	089b      	lsrs	r3, r3, #2
 800a846:	b2db      	uxtb	r3, r3
 800a848:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800a84c:	b2d9      	uxtb	r1, r3
 800a84e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a850:	3302      	adds	r3, #2
 800a852:	7dba      	ldrb	r2, [r7, #22]
 800a854:	430a      	orrs	r2, r1
 800a856:	b2d2      	uxtb	r2, r2
 800a858:	701a      	strb	r2, [r3, #0]
			pte[PTE_StCyl] = (BYTE)cy;
 800a85a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a85c:	3303      	adds	r3, #3
 800a85e:	69ba      	ldr	r2, [r7, #24]
 800a860:	b2d2      	uxtb	r2, r2
 800a862:	701a      	strb	r2, [r3, #0]

			cy = (UINT)((nxt_alloc32 + sz_part32 - 1) / n_sc / n_hd);	/* End cylinder */
 800a864:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a866:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a868:	4413      	add	r3, r2
 800a86a:	1e5a      	subs	r2, r3, #1
 800a86c:	7ffb      	ldrb	r3, [r7, #31]
 800a86e:	fbb2 f2f3 	udiv	r2, r2, r3
 800a872:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800a876:	fbb2 f3f3 	udiv	r3, r2, r3
 800a87a:	61bb      	str	r3, [r7, #24]
			hd = (BYTE)((nxt_alloc32 + sz_part32 - 1) / n_sc % n_hd);	/* End head */
 800a87c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a87e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a880:	4413      	add	r3, r2
 800a882:	1e5a      	subs	r2, r3, #1
 800a884:	7ffb      	ldrb	r3, [r7, #31]
 800a886:	fbb2 f3f3 	udiv	r3, r2, r3
 800a88a:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 800a88e:	fbb3 f1f2 	udiv	r1, r3, r2
 800a892:	fb01 f202 	mul.w	r2, r1, r2
 800a896:	1a9b      	subs	r3, r3, r2
 800a898:	75fb      	strb	r3, [r7, #23]
			sc = (BYTE)((nxt_alloc32 + sz_part32 - 1) % n_sc + 1);		/* End sector */
 800a89a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a89c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a89e:	4413      	add	r3, r2
 800a8a0:	3b01      	subs	r3, #1
 800a8a2:	7ffa      	ldrb	r2, [r7, #31]
 800a8a4:	fbb3 f1f2 	udiv	r1, r3, r2
 800a8a8:	fb01 f202 	mul.w	r2, r1, r2
 800a8ac:	1a9b      	subs	r3, r3, r2
 800a8ae:	b2db      	uxtb	r3, r3
 800a8b0:	3301      	adds	r3, #1
 800a8b2:	75bb      	strb	r3, [r7, #22]
			pte[PTE_EdHead] = hd;
 800a8b4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a8b6:	3305      	adds	r3, #5
 800a8b8:	7dfa      	ldrb	r2, [r7, #23]
 800a8ba:	701a      	strb	r2, [r3, #0]
			pte[PTE_EdSec] = (BYTE)((cy >> 2 & 0xC0) | sc);
 800a8bc:	69bb      	ldr	r3, [r7, #24]
 800a8be:	089b      	lsrs	r3, r3, #2
 800a8c0:	b2db      	uxtb	r3, r3
 800a8c2:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800a8c6:	b2d9      	uxtb	r1, r3
 800a8c8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a8ca:	3306      	adds	r3, #6
 800a8cc:	7dba      	ldrb	r2, [r7, #22]
 800a8ce:	430a      	orrs	r2, r1
 800a8d0:	b2d2      	uxtb	r2, r2
 800a8d2:	701a      	strb	r2, [r3, #0]
			pte[PTE_EdCyl] = (BYTE)cy;
 800a8d4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a8d6:	3307      	adds	r3, #7
 800a8d8:	69ba      	ldr	r2, [r7, #24]
 800a8da:	b2d2      	uxtb	r2, r2
 800a8dc:	701a      	strb	r2, [r3, #0]

			pte += SZ_PTE;		/* Next entry */
 800a8de:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a8e0:	3310      	adds	r3, #16
 800a8e2:	62bb      	str	r3, [r7, #40]	@ 0x28
		for (i = 0, nxt_alloc32 = n_sc; i < 4 && nxt_alloc32 != 0 && nxt_alloc32 < sz_drv32; i++, nxt_alloc32 += sz_part32) {
 800a8e4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a8e6:	3301      	adds	r3, #1
 800a8e8:	637b      	str	r3, [r7, #52]	@ 0x34
 800a8ea:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a8ec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a8ee:	4413      	add	r3, r2
 800a8f0:	633b      	str	r3, [r7, #48]	@ 0x30
 800a8f2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a8f4:	2b03      	cmp	r3, #3
 800a8f6:	d809      	bhi.n	800a90c <create_partition+0x214>
 800a8f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a8fa:	2b00      	cmp	r3, #0
 800a8fc:	d006      	beq.n	800a90c <create_partition+0x214>
 800a8fe:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a900:	6a3b      	ldr	r3, [r7, #32]
 800a902:	429a      	cmp	r2, r3
 800a904:	f4ff af3f 	bcc.w	800a786 <create_partition+0x8e>
 800a908:	e000      	b.n	800a90c <create_partition+0x214>
			if (sz_part32 == 0) break;	/* End of table or no sector to allocate? */
 800a90a:	bf00      	nop
		}

		st_word(buf + BS_55AA, 0xAA55);		/* MBR signature */
 800a90c:	687b      	ldr	r3, [r7, #4]
 800a90e:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 800a912:	f64a 2155 	movw	r1, #43605	@ 0xaa55
 800a916:	4618      	mov	r0, r3
 800a918:	f7fd fd44 	bl	80083a4 <st_word>
		if (disk_write(drv, buf, 0, 1) != RES_OK) return FR_DISK_ERR;	/* Write it to the MBR */
 800a91c:	7bf8      	ldrb	r0, [r7, #15]
 800a91e:	2301      	movs	r3, #1
 800a920:	2200      	movs	r2, #0
 800a922:	6879      	ldr	r1, [r7, #4]
 800a924:	f7fd fc4c 	bl	80081c0 <disk_write>
 800a928:	4603      	mov	r3, r0
 800a92a:	2b00      	cmp	r3, #0
 800a92c:	d001      	beq.n	800a932 <create_partition+0x23a>
 800a92e:	2301      	movs	r3, #1
 800a930:	e000      	b.n	800a934 <create_partition+0x23c>
	}

	return FR_OK;
 800a932:	2300      	movs	r3, #0
}
 800a934:	4618      	mov	r0, r3
 800a936:	3738      	adds	r7, #56	@ 0x38
 800a938:	46bd      	mov	sp, r7
 800a93a:	bd80      	pop	{r7, pc}
 800a93c:	51eb851f 	.word	0x51eb851f

0800a940 <f_mkfs>:
	const TCHAR* path,		/* Logical drive number */
	const MKFS_PARM* opt,	/* Format options */
	void* work,				/* Pointer to working buffer (null: use len bytes of heap memory) */
	UINT len				/* Size of working buffer [byte] */
)
{
 800a940:	b580      	push	{r7, lr}
 800a942:	b09e      	sub	sp, #120	@ 0x78
 800a944:	af00      	add	r7, sp, #0
 800a946:	60f8      	str	r0, [r7, #12]
 800a948:	60b9      	str	r1, [r7, #8]
 800a94a:	607a      	str	r2, [r7, #4]
 800a94c:	603b      	str	r3, [r7, #0]
	DSTATUS ds;
	FRESULT res;


	/* Check mounted drive and clear work area */
	vol = get_ldnumber(&path);					/* Get target logical drive */
 800a94e:	f107 030c 	add.w	r3, r7, #12
 800a952:	4618      	mov	r0, r3
 800a954:	f7fe fd78 	bl	8009448 <get_ldnumber>
 800a958:	6478      	str	r0, [r7, #68]	@ 0x44
	if (vol < 0) return FR_INVALID_DRIVE;
 800a95a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a95c:	2b00      	cmp	r3, #0
 800a95e:	da02      	bge.n	800a966 <f_mkfs+0x26>
 800a960:	230b      	movs	r3, #11
 800a962:	f000 bc39 	b.w	800b1d8 <f_mkfs+0x898>
	if (FatFs[vol]) FatFs[vol]->fs_type = 0;	/* Clear the fs object if mounted */
 800a966:	4a90      	ldr	r2, [pc, #576]	@ (800aba8 <f_mkfs+0x268>)
 800a968:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a96a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a96e:	2b00      	cmp	r3, #0
 800a970:	d005      	beq.n	800a97e <f_mkfs+0x3e>
 800a972:	4a8d      	ldr	r2, [pc, #564]	@ (800aba8 <f_mkfs+0x268>)
 800a974:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a976:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a97a:	2200      	movs	r2, #0
 800a97c:	701a      	strb	r2, [r3, #0]
	pdrv = LD2PD(vol);		/* Hosting physical drive */
 800a97e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a980:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
	ipart = LD2PT(vol);		/* Hosting partition (0:create as new, 1..:existing partition) */
 800a984:	2300      	movs	r3, #0
 800a986:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42

	/* Initialize the hosting physical drive */
	ds = disk_initialize(pdrv);
 800a98a:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800a98e:	4618      	mov	r0, r3
 800a990:	f7fd fbbc 	bl	800810c <disk_initialize>
 800a994:	4603      	mov	r3, r0
 800a996:	f887 3041 	strb.w	r3, [r7, #65]	@ 0x41
	if (ds & STA_NOINIT) return FR_NOT_READY;
 800a99a:	f897 3041 	ldrb.w	r3, [r7, #65]	@ 0x41
 800a99e:	f003 0301 	and.w	r3, r3, #1
 800a9a2:	2b00      	cmp	r3, #0
 800a9a4:	d002      	beq.n	800a9ac <f_mkfs+0x6c>
 800a9a6:	2303      	movs	r3, #3
 800a9a8:	f000 bc16 	b.w	800b1d8 <f_mkfs+0x898>
	if (ds & STA_PROTECT) return FR_WRITE_PROTECTED;
 800a9ac:	f897 3041 	ldrb.w	r3, [r7, #65]	@ 0x41
 800a9b0:	f003 0304 	and.w	r3, r3, #4
 800a9b4:	2b00      	cmp	r3, #0
 800a9b6:	d002      	beq.n	800a9be <f_mkfs+0x7e>
 800a9b8:	230a      	movs	r3, #10
 800a9ba:	f000 bc0d 	b.w	800b1d8 <f_mkfs+0x898>

	/* Get physical drive parameters (sz_drv, sz_blk and ss) */
	if (!opt) opt = &defopt;	/* Use default parameter if it is not given */
 800a9be:	68bb      	ldr	r3, [r7, #8]
 800a9c0:	2b00      	cmp	r3, #0
 800a9c2:	d101      	bne.n	800a9c8 <f_mkfs+0x88>
 800a9c4:	4b79      	ldr	r3, [pc, #484]	@ (800abac <f_mkfs+0x26c>)
 800a9c6:	60bb      	str	r3, [r7, #8]
	sz_blk = opt->align;
 800a9c8:	68bb      	ldr	r3, [r7, #8]
 800a9ca:	685b      	ldr	r3, [r3, #4]
 800a9cc:	61fb      	str	r3, [r7, #28]
	if (sz_blk == 0) disk_ioctl(pdrv, GET_BLOCK_SIZE, &sz_blk);					/* Block size from the paramter or lower layer */
 800a9ce:	69fb      	ldr	r3, [r7, #28]
 800a9d0:	2b00      	cmp	r3, #0
 800a9d2:	d107      	bne.n	800a9e4 <f_mkfs+0xa4>
 800a9d4:	f107 021c 	add.w	r2, r7, #28
 800a9d8:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800a9dc:	2103      	movs	r1, #3
 800a9de:	4618      	mov	r0, r3
 800a9e0:	f7fd fc22 	bl	8008228 <disk_ioctl>
 	if (sz_blk == 0 || sz_blk > 0x8000 || (sz_blk & (sz_blk - 1))) sz_blk = 1;	/* Use default if the block size is invalid */
 800a9e4:	69fb      	ldr	r3, [r7, #28]
 800a9e6:	2b00      	cmp	r3, #0
 800a9e8:	d009      	beq.n	800a9fe <f_mkfs+0xbe>
 800a9ea:	69fb      	ldr	r3, [r7, #28]
 800a9ec:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800a9f0:	d805      	bhi.n	800a9fe <f_mkfs+0xbe>
 800a9f2:	69fb      	ldr	r3, [r7, #28]
 800a9f4:	1e5a      	subs	r2, r3, #1
 800a9f6:	69fb      	ldr	r3, [r7, #28]
 800a9f8:	4013      	ands	r3, r2
 800a9fa:	2b00      	cmp	r3, #0
 800a9fc:	d001      	beq.n	800aa02 <f_mkfs+0xc2>
 800a9fe:	2301      	movs	r3, #1
 800aa00:	61fb      	str	r3, [r7, #28]
#if FF_MAX_SS != FF_MIN_SS
	if (disk_ioctl(pdrv, GET_SECTOR_SIZE, &ss) != RES_OK) return FR_DISK_ERR;
 800aa02:	f107 0220 	add.w	r2, r7, #32
 800aa06:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800aa0a:	2102      	movs	r1, #2
 800aa0c:	4618      	mov	r0, r3
 800aa0e:	f7fd fc0b 	bl	8008228 <disk_ioctl>
 800aa12:	4603      	mov	r3, r0
 800aa14:	2b00      	cmp	r3, #0
 800aa16:	d001      	beq.n	800aa1c <f_mkfs+0xdc>
 800aa18:	2301      	movs	r3, #1
 800aa1a:	e3dd      	b.n	800b1d8 <f_mkfs+0x898>
	if (ss > FF_MAX_SS || ss < FF_MIN_SS || (ss & (ss - 1))) return FR_DISK_ERR;
 800aa1c:	8c3b      	ldrh	r3, [r7, #32]
 800aa1e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800aa22:	d80a      	bhi.n	800aa3a <f_mkfs+0xfa>
 800aa24:	8c3b      	ldrh	r3, [r7, #32]
 800aa26:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800aa2a:	d306      	bcc.n	800aa3a <f_mkfs+0xfa>
 800aa2c:	8c3b      	ldrh	r3, [r7, #32]
 800aa2e:	461a      	mov	r2, r3
 800aa30:	8c3b      	ldrh	r3, [r7, #32]
 800aa32:	3b01      	subs	r3, #1
 800aa34:	4013      	ands	r3, r2
 800aa36:	2b00      	cmp	r3, #0
 800aa38:	d001      	beq.n	800aa3e <f_mkfs+0xfe>
 800aa3a:	2301      	movs	r3, #1
 800aa3c:	e3cc      	b.n	800b1d8 <f_mkfs+0x898>
#else
	ss = FF_MAX_SS;
#endif

	/* Options for FAT sub-type and FAT parameters */
	fsopt = opt->fmt & (FM_ANY | FM_SFD);
 800aa3e:	68bb      	ldr	r3, [r7, #8]
 800aa40:	781b      	ldrb	r3, [r3, #0]
 800aa42:	f003 030f 	and.w	r3, r3, #15
 800aa46:	f887 3040 	strb.w	r3, [r7, #64]	@ 0x40
	n_fat = (opt->n_fat >= 1 && opt->n_fat <= 2) ? opt->n_fat : 1;
 800aa4a:	68bb      	ldr	r3, [r7, #8]
 800aa4c:	785b      	ldrb	r3, [r3, #1]
 800aa4e:	2b00      	cmp	r3, #0
 800aa50:	d006      	beq.n	800aa60 <f_mkfs+0x120>
 800aa52:	68bb      	ldr	r3, [r7, #8]
 800aa54:	785b      	ldrb	r3, [r3, #1]
 800aa56:	2b02      	cmp	r3, #2
 800aa58:	d802      	bhi.n	800aa60 <f_mkfs+0x120>
 800aa5a:	68bb      	ldr	r3, [r7, #8]
 800aa5c:	785b      	ldrb	r3, [r3, #1]
 800aa5e:	e000      	b.n	800aa62 <f_mkfs+0x122>
 800aa60:	2301      	movs	r3, #1
 800aa62:	63fb      	str	r3, [r7, #60]	@ 0x3c
	n_root = (opt->n_root >= 1 && opt->n_root <= 32768 && (opt->n_root % (ss / SZDIRE)) == 0) ? opt->n_root : 512;
 800aa64:	68bb      	ldr	r3, [r7, #8]
 800aa66:	689b      	ldr	r3, [r3, #8]
 800aa68:	2b00      	cmp	r3, #0
 800aa6a:	d013      	beq.n	800aa94 <f_mkfs+0x154>
 800aa6c:	68bb      	ldr	r3, [r7, #8]
 800aa6e:	689b      	ldr	r3, [r3, #8]
 800aa70:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800aa74:	d80e      	bhi.n	800aa94 <f_mkfs+0x154>
 800aa76:	68bb      	ldr	r3, [r7, #8]
 800aa78:	689b      	ldr	r3, [r3, #8]
 800aa7a:	8c3a      	ldrh	r2, [r7, #32]
 800aa7c:	0952      	lsrs	r2, r2, #5
 800aa7e:	b292      	uxth	r2, r2
 800aa80:	fbb3 f1f2 	udiv	r1, r3, r2
 800aa84:	fb01 f202 	mul.w	r2, r1, r2
 800aa88:	1a9b      	subs	r3, r3, r2
 800aa8a:	2b00      	cmp	r3, #0
 800aa8c:	d102      	bne.n	800aa94 <f_mkfs+0x154>
 800aa8e:	68bb      	ldr	r3, [r7, #8]
 800aa90:	689b      	ldr	r3, [r3, #8]
 800aa92:	e001      	b.n	800aa98 <f_mkfs+0x158>
 800aa94:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800aa98:	63bb      	str	r3, [r7, #56]	@ 0x38
	sz_au = (opt->au_size <= 0x1000000 && (opt->au_size & (opt->au_size - 1)) == 0) ? opt->au_size : 0;
 800aa9a:	68bb      	ldr	r3, [r7, #8]
 800aa9c:	68db      	ldr	r3, [r3, #12]
 800aa9e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800aaa2:	d80a      	bhi.n	800aaba <f_mkfs+0x17a>
 800aaa4:	68bb      	ldr	r3, [r7, #8]
 800aaa6:	68da      	ldr	r2, [r3, #12]
 800aaa8:	68bb      	ldr	r3, [r7, #8]
 800aaaa:	68db      	ldr	r3, [r3, #12]
 800aaac:	3b01      	subs	r3, #1
 800aaae:	4013      	ands	r3, r2
 800aab0:	2b00      	cmp	r3, #0
 800aab2:	d102      	bne.n	800aaba <f_mkfs+0x17a>
 800aab4:	68bb      	ldr	r3, [r7, #8]
 800aab6:	68db      	ldr	r3, [r3, #12]
 800aab8:	e000      	b.n	800aabc <f_mkfs+0x17c>
 800aaba:	2300      	movs	r3, #0
 800aabc:	64fb      	str	r3, [r7, #76]	@ 0x4c
	sz_au /= ss;	/* Byte --> Sector */
 800aabe:	8c3b      	ldrh	r3, [r7, #32]
 800aac0:	461a      	mov	r2, r3
 800aac2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800aac4:	fbb3 f3f2 	udiv	r3, r3, r2
 800aac8:	64fb      	str	r3, [r7, #76]	@ 0x4c

	/* Get working buffer */
	sz_buf = len / ss;		/* Size of working buffer [sector] */
 800aaca:	8c3b      	ldrh	r3, [r7, #32]
 800aacc:	461a      	mov	r2, r3
 800aace:	683b      	ldr	r3, [r7, #0]
 800aad0:	fbb3 f3f2 	udiv	r3, r3, r2
 800aad4:	637b      	str	r3, [r7, #52]	@ 0x34
	if (sz_buf == 0) return FR_NOT_ENOUGH_CORE;
 800aad6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800aad8:	2b00      	cmp	r3, #0
 800aada:	d101      	bne.n	800aae0 <f_mkfs+0x1a0>
 800aadc:	2311      	movs	r3, #17
 800aade:	e37b      	b.n	800b1d8 <f_mkfs+0x898>
	buf = (BYTE*)work;		/* Working buffer */
 800aae0:	687b      	ldr	r3, [r7, #4]
 800aae2:	633b      	str	r3, [r7, #48]	@ 0x30
#if FF_USE_LFN == 3
	if (!buf) buf = ff_memalloc(sz_buf * ss);	/* Use heap memory for working buffer */
#endif
	if (!buf) return FR_NOT_ENOUGH_CORE;
 800aae4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aae6:	2b00      	cmp	r3, #0
 800aae8:	d101      	bne.n	800aaee <f_mkfs+0x1ae>
 800aaea:	2311      	movs	r3, #17
 800aaec:	e374      	b.n	800b1d8 <f_mkfs+0x898>

	/* Determine where the volume to be located (b_vol, sz_vol) */
	b_vol = sz_vol = 0;
 800aaee:	2300      	movs	r3, #0
 800aaf0:	61bb      	str	r3, [r7, #24]
 800aaf2:	69bb      	ldr	r3, [r7, #24]
 800aaf4:	66fb      	str	r3, [r7, #108]	@ 0x6c
			if (ipart > 4 || pte[PTE_System] == 0) LEAVE_MKFS(FR_MKFS_ABORTED);	/* No partition? */
			b_vol = ld_dword(pte + PTE_StLba);		/* Get volume start sector */
			sz_vol = ld_dword(pte + PTE_SizLba);	/* Get volume size */
		}
	} else {	/* The volume is associated with a physical drive */
		if (disk_ioctl(pdrv, GET_SECTOR_COUNT, &sz_vol) != RES_OK) LEAVE_MKFS(FR_DISK_ERR);
 800aaf6:	f107 0218 	add.w	r2, r7, #24
 800aafa:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800aafe:	2101      	movs	r1, #1
 800ab00:	4618      	mov	r0, r3
 800ab02:	f7fd fb91 	bl	8008228 <disk_ioctl>
 800ab06:	4603      	mov	r3, r0
 800ab08:	2b00      	cmp	r3, #0
 800ab0a:	d001      	beq.n	800ab10 <f_mkfs+0x1d0>
 800ab0c:	2301      	movs	r3, #1
 800ab0e:	e363      	b.n	800b1d8 <f_mkfs+0x898>
		if (!(fsopt & FM_SFD)) {	/* To be partitioned? */
 800ab10:	f897 3040 	ldrb.w	r3, [r7, #64]	@ 0x40
 800ab14:	f003 0308 	and.w	r3, r3, #8
 800ab18:	2b00      	cmp	r3, #0
 800ab1a:	d108      	bne.n	800ab2e <f_mkfs+0x1ee>
				fsopt |= 0x80;		/* Partitioning is in GPT */
				b_vol = GPT_ALIGN / ss; sz_vol -= b_vol + GPT_ITEMS * SZ_GPTE / ss + 1;	/* Estimated partition offset and size */
			} else
#endif
			{	/* Partitioning is in MBR */
				if (sz_vol > N_SEC_TRACK) {
 800ab1c:	69bb      	ldr	r3, [r7, #24]
 800ab1e:	2b3f      	cmp	r3, #63	@ 0x3f
 800ab20:	d905      	bls.n	800ab2e <f_mkfs+0x1ee>
					b_vol = N_SEC_TRACK; sz_vol -= b_vol;	/* Estimated partition offset and size */
 800ab22:	233f      	movs	r3, #63	@ 0x3f
 800ab24:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800ab26:	69ba      	ldr	r2, [r7, #24]
 800ab28:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800ab2a:	1ad3      	subs	r3, r2, r3
 800ab2c:	61bb      	str	r3, [r7, #24]
				}
			}
		}
	}
	if (sz_vol < 128) LEAVE_MKFS(FR_MKFS_ABORTED);	/* Check if volume size is >=128s */
 800ab2e:	69bb      	ldr	r3, [r7, #24]
 800ab30:	2b7f      	cmp	r3, #127	@ 0x7f
 800ab32:	d801      	bhi.n	800ab38 <f_mkfs+0x1f8>
 800ab34:	230e      	movs	r3, #14
 800ab36:	e34f      	b.n	800b1d8 <f_mkfs+0x898>
			}
		}
#if FF_LBA64
		if (sz_vol >= 0x100000000) LEAVE_MKFS(FR_MKFS_ABORTED);	/* Too large volume for FAT/FAT32 */
#endif
		if (sz_au > 128) sz_au = 128;	/* Invalid AU for FAT/FAT32? */
 800ab38:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800ab3a:	2b80      	cmp	r3, #128	@ 0x80
 800ab3c:	d901      	bls.n	800ab42 <f_mkfs+0x202>
 800ab3e:	2380      	movs	r3, #128	@ 0x80
 800ab40:	64fb      	str	r3, [r7, #76]	@ 0x4c
		if (fsopt & FM_FAT32) {	/* FAT32 possible? */
 800ab42:	f897 3040 	ldrb.w	r3, [r7, #64]	@ 0x40
 800ab46:	f003 0302 	and.w	r3, r3, #2
 800ab4a:	2b00      	cmp	r3, #0
 800ab4c:	d009      	beq.n	800ab62 <f_mkfs+0x222>
			if (!(fsopt & FM_FAT)) {	/* no-FAT? */
 800ab4e:	f897 3040 	ldrb.w	r3, [r7, #64]	@ 0x40
 800ab52:	f003 0301 	and.w	r3, r3, #1
 800ab56:	2b00      	cmp	r3, #0
 800ab58:	d103      	bne.n	800ab62 <f_mkfs+0x222>
				fsty = FS_FAT32; break;
 800ab5a:	2303      	movs	r3, #3
 800ab5c:	f887 305b 	strb.w	r3, [r7, #91]	@ 0x5b
 800ab60:	e00a      	b.n	800ab78 <f_mkfs+0x238>
			}
		}
		if (!(fsopt & FM_FAT)) LEAVE_MKFS(FR_INVALID_PARAMETER);	/* no-FAT? */
 800ab62:	f897 3040 	ldrb.w	r3, [r7, #64]	@ 0x40
 800ab66:	f003 0301 	and.w	r3, r3, #1
 800ab6a:	2b00      	cmp	r3, #0
 800ab6c:	d101      	bne.n	800ab72 <f_mkfs+0x232>
 800ab6e:	2313      	movs	r3, #19
 800ab70:	e332      	b.n	800b1d8 <f_mkfs+0x898>
		fsty = FS_FAT16;
 800ab72:	2302      	movs	r3, #2
 800ab74:	f887 305b 	strb.w	r3, [r7, #91]	@ 0x5b
	} while (0);

	vsn = (DWORD)sz_vol + GET_FATTIME();	/* VSN generated from current time and partitiion size */
 800ab78:	69bb      	ldr	r3, [r7, #24]
 800ab7a:	f103 43a8 	add.w	r3, r3, #1409286144	@ 0x54000000
 800ab7e:	f503 1304 	add.w	r3, r3, #2162688	@ 0x210000
 800ab82:	62fb      	str	r3, [r7, #44]	@ 0x2c

	} else
#endif	/* FF_FS_EXFAT */
	{	/* Create an FAT/FAT32 volume */
		do {
			pau = sz_au;
 800ab84:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800ab86:	663b      	str	r3, [r7, #96]	@ 0x60
			/* Pre-determine number of clusters and FAT sub-type */
			if (fsty == FS_FAT32) {	/* FAT32 volume */
 800ab88:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 800ab8c:	2b03      	cmp	r3, #3
 800ab8e:	d141      	bne.n	800ac14 <f_mkfs+0x2d4>
				if (pau == 0) {	/* AU auto-selection */
 800ab90:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800ab92:	2b00      	cmp	r3, #0
 800ab94:	d120      	bne.n	800abd8 <f_mkfs+0x298>
					n = (DWORD)sz_vol / 0x20000;	/* Volume size in unit of 128KS */
 800ab96:	69bb      	ldr	r3, [r7, #24]
 800ab98:	0c5b      	lsrs	r3, r3, #17
 800ab9a:	667b      	str	r3, [r7, #100]	@ 0x64
					for (i = 0, pau = 1; cst32[i] && cst32[i] <= n; i++, pau <<= 1) ;	/* Get from table */
 800ab9c:	2300      	movs	r3, #0
 800ab9e:	64bb      	str	r3, [r7, #72]	@ 0x48
 800aba0:	2301      	movs	r3, #1
 800aba2:	663b      	str	r3, [r7, #96]	@ 0x60
 800aba4:	e00a      	b.n	800abbc <f_mkfs+0x27c>
 800aba6:	bf00      	nop
 800aba8:	20005c50 	.word	0x20005c50
 800abac:	08017e90 	.word	0x08017e90
 800abb0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800abb2:	3301      	adds	r3, #1
 800abb4:	64bb      	str	r3, [r7, #72]	@ 0x48
 800abb6:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800abb8:	005b      	lsls	r3, r3, #1
 800abba:	663b      	str	r3, [r7, #96]	@ 0x60
 800abbc:	4a95      	ldr	r2, [pc, #596]	@ (800ae14 <f_mkfs+0x4d4>)
 800abbe:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800abc0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800abc4:	2b00      	cmp	r3, #0
 800abc6:	d007      	beq.n	800abd8 <f_mkfs+0x298>
 800abc8:	4a92      	ldr	r2, [pc, #584]	@ (800ae14 <f_mkfs+0x4d4>)
 800abca:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800abcc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800abd0:	461a      	mov	r2, r3
 800abd2:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800abd4:	4293      	cmp	r3, r2
 800abd6:	d2eb      	bcs.n	800abb0 <f_mkfs+0x270>
				}
				n_clst = (DWORD)sz_vol / pau;	/* Number of clusters */
 800abd8:	69ba      	ldr	r2, [r7, #24]
 800abda:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800abdc:	fbb2 f3f3 	udiv	r3, r2, r3
 800abe0:	62bb      	str	r3, [r7, #40]	@ 0x28
				sz_fat = (n_clst * 4 + 8 + ss - 1) / ss;	/* FAT size [sector] */
 800abe2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800abe4:	3302      	adds	r3, #2
 800abe6:	009b      	lsls	r3, r3, #2
 800abe8:	8c3a      	ldrh	r2, [r7, #32]
 800abea:	4413      	add	r3, r2
 800abec:	3b01      	subs	r3, #1
 800abee:	8c3a      	ldrh	r2, [r7, #32]
 800abf0:	fbb3 f3f2 	udiv	r3, r3, r2
 800abf4:	657b      	str	r3, [r7, #84]	@ 0x54
				sz_rsv = 32;	/* Number of reserved sectors */
 800abf6:	2320      	movs	r3, #32
 800abf8:	677b      	str	r3, [r7, #116]	@ 0x74
				sz_dir = 0;		/* No static directory */
 800abfa:	2300      	movs	r3, #0
 800abfc:	653b      	str	r3, [r7, #80]	@ 0x50
				if (n_clst <= MAX_FAT16 || n_clst > MAX_FAT32) LEAVE_MKFS(FR_MKFS_ABORTED);
 800abfe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ac00:	f64f 72f5 	movw	r2, #65525	@ 0xfff5
 800ac04:	4293      	cmp	r3, r2
 800ac06:	d903      	bls.n	800ac10 <f_mkfs+0x2d0>
 800ac08:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ac0a:	4a83      	ldr	r2, [pc, #524]	@ (800ae18 <f_mkfs+0x4d8>)
 800ac0c:	4293      	cmp	r3, r2
 800ac0e:	d94b      	bls.n	800aca8 <f_mkfs+0x368>
 800ac10:	230e      	movs	r3, #14
 800ac12:	e2e1      	b.n	800b1d8 <f_mkfs+0x898>
			} else {				/* FAT volume */
				if (pau == 0) {	/* au auto-selection */
 800ac14:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800ac16:	2b00      	cmp	r3, #0
 800ac18:	d11b      	bne.n	800ac52 <f_mkfs+0x312>
					n = (DWORD)sz_vol / 0x1000;	/* Volume size in unit of 4KS */
 800ac1a:	69bb      	ldr	r3, [r7, #24]
 800ac1c:	0b1b      	lsrs	r3, r3, #12
 800ac1e:	667b      	str	r3, [r7, #100]	@ 0x64
					for (i = 0, pau = 1; cst[i] && cst[i] <= n; i++, pau <<= 1) ;	/* Get from table */
 800ac20:	2300      	movs	r3, #0
 800ac22:	64bb      	str	r3, [r7, #72]	@ 0x48
 800ac24:	2301      	movs	r3, #1
 800ac26:	663b      	str	r3, [r7, #96]	@ 0x60
 800ac28:	e005      	b.n	800ac36 <f_mkfs+0x2f6>
 800ac2a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800ac2c:	3301      	adds	r3, #1
 800ac2e:	64bb      	str	r3, [r7, #72]	@ 0x48
 800ac30:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800ac32:	005b      	lsls	r3, r3, #1
 800ac34:	663b      	str	r3, [r7, #96]	@ 0x60
 800ac36:	4a79      	ldr	r2, [pc, #484]	@ (800ae1c <f_mkfs+0x4dc>)
 800ac38:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800ac3a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800ac3e:	2b00      	cmp	r3, #0
 800ac40:	d007      	beq.n	800ac52 <f_mkfs+0x312>
 800ac42:	4a76      	ldr	r2, [pc, #472]	@ (800ae1c <f_mkfs+0x4dc>)
 800ac44:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800ac46:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800ac4a:	461a      	mov	r2, r3
 800ac4c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800ac4e:	4293      	cmp	r3, r2
 800ac50:	d2eb      	bcs.n	800ac2a <f_mkfs+0x2ea>
				}
				n_clst = (DWORD)sz_vol / pau;
 800ac52:	69ba      	ldr	r2, [r7, #24]
 800ac54:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800ac56:	fbb2 f3f3 	udiv	r3, r2, r3
 800ac5a:	62bb      	str	r3, [r7, #40]	@ 0x28
				if (n_clst > MAX_FAT12) {
 800ac5c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ac5e:	f640 72f5 	movw	r2, #4085	@ 0xff5
 800ac62:	4293      	cmp	r3, r2
 800ac64:	d904      	bls.n	800ac70 <f_mkfs+0x330>
					n = n_clst * 2 + 4;		/* FAT size [byte] */
 800ac66:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ac68:	3302      	adds	r3, #2
 800ac6a:	005b      	lsls	r3, r3, #1
 800ac6c:	667b      	str	r3, [r7, #100]	@ 0x64
 800ac6e:	e00a      	b.n	800ac86 <f_mkfs+0x346>
				} else {
					fsty = FS_FAT12;
 800ac70:	2301      	movs	r3, #1
 800ac72:	f887 305b 	strb.w	r3, [r7, #91]	@ 0x5b
					n = (n_clst * 3 + 1) / 2 + 3;	/* FAT size [byte] */
 800ac76:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800ac78:	4613      	mov	r3, r2
 800ac7a:	005b      	lsls	r3, r3, #1
 800ac7c:	4413      	add	r3, r2
 800ac7e:	3301      	adds	r3, #1
 800ac80:	085b      	lsrs	r3, r3, #1
 800ac82:	3303      	adds	r3, #3
 800ac84:	667b      	str	r3, [r7, #100]	@ 0x64
				}
				sz_fat = (n + ss - 1) / ss;		/* FAT size [sector] */
 800ac86:	8c3b      	ldrh	r3, [r7, #32]
 800ac88:	461a      	mov	r2, r3
 800ac8a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800ac8c:	4413      	add	r3, r2
 800ac8e:	3b01      	subs	r3, #1
 800ac90:	8c3a      	ldrh	r2, [r7, #32]
 800ac92:	fbb3 f3f2 	udiv	r3, r3, r2
 800ac96:	657b      	str	r3, [r7, #84]	@ 0x54
				sz_rsv = 1;						/* Number of reserved sectors */
 800ac98:	2301      	movs	r3, #1
 800ac9a:	677b      	str	r3, [r7, #116]	@ 0x74
				sz_dir = (DWORD)n_root * SZDIRE / ss;	/* Root dir size [sector] */
 800ac9c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ac9e:	015b      	lsls	r3, r3, #5
 800aca0:	8c3a      	ldrh	r2, [r7, #32]
 800aca2:	fbb3 f3f2 	udiv	r3, r3, r2
 800aca6:	653b      	str	r3, [r7, #80]	@ 0x50
			}
			b_fat = b_vol + sz_rsv;						/* FAT base */
 800aca8:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800acaa:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800acac:	4413      	add	r3, r2
 800acae:	66bb      	str	r3, [r7, #104]	@ 0x68
			b_data = b_fat + sz_fat * n_fat + sz_dir;	/* Data base */
 800acb0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800acb2:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800acb4:	fb03 f202 	mul.w	r2, r3, r2
 800acb8:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800acba:	4413      	add	r3, r2
 800acbc:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800acbe:	4413      	add	r3, r2
 800acc0:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Align data area to erase block boundary (for flash memory media) */
			n = (DWORD)(((b_data + sz_blk - 1) & ~(sz_blk - 1)) - b_data);	/* Sectors to next nearest from current data base */
 800acc2:	69fa      	ldr	r2, [r7, #28]
 800acc4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800acc6:	4413      	add	r3, r2
 800acc8:	1e5a      	subs	r2, r3, #1
 800acca:	69fb      	ldr	r3, [r7, #28]
 800accc:	425b      	negs	r3, r3
 800acce:	401a      	ands	r2, r3
 800acd0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800acd2:	1ad3      	subs	r3, r2, r3
 800acd4:	667b      	str	r3, [r7, #100]	@ 0x64
			if (fsty == FS_FAT32) {		/* FAT32: Move FAT */
 800acd6:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 800acda:	2b03      	cmp	r3, #3
 800acdc:	d108      	bne.n	800acf0 <f_mkfs+0x3b0>
				sz_rsv += n; b_fat += n;
 800acde:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 800ace0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800ace2:	4413      	add	r3, r2
 800ace4:	677b      	str	r3, [r7, #116]	@ 0x74
 800ace6:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 800ace8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800acea:	4413      	add	r3, r2
 800acec:	66bb      	str	r3, [r7, #104]	@ 0x68
 800acee:	e019      	b.n	800ad24 <f_mkfs+0x3e4>
			} else {					/* FAT: Expand FAT */
				if (n % n_fat) {	/* Adjust fractional error if needed */
 800acf0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800acf2:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800acf4:	fbb3 f2f2 	udiv	r2, r3, r2
 800acf8:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800acfa:	fb01 f202 	mul.w	r2, r1, r2
 800acfe:	1a9b      	subs	r3, r3, r2
 800ad00:	2b00      	cmp	r3, #0
 800ad02:	d008      	beq.n	800ad16 <f_mkfs+0x3d6>
					n--; sz_rsv++; b_fat++;
 800ad04:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800ad06:	3b01      	subs	r3, #1
 800ad08:	667b      	str	r3, [r7, #100]	@ 0x64
 800ad0a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800ad0c:	3301      	adds	r3, #1
 800ad0e:	677b      	str	r3, [r7, #116]	@ 0x74
 800ad10:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800ad12:	3301      	adds	r3, #1
 800ad14:	66bb      	str	r3, [r7, #104]	@ 0x68
				}
				sz_fat += n / n_fat;
 800ad16:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800ad18:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ad1a:	fbb2 f3f3 	udiv	r3, r2, r3
 800ad1e:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800ad20:	4413      	add	r3, r2
 800ad22:	657b      	str	r3, [r7, #84]	@ 0x54
			}

			/* Determine number of clusters and final check of validity of the FAT sub-type */
			if (sz_vol < b_data + pau * 16 - b_vol) LEAVE_MKFS(FR_MKFS_ABORTED);	/* Too small volume? */
 800ad24:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800ad26:	011a      	lsls	r2, r3, #4
 800ad28:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ad2a:	441a      	add	r2, r3
 800ad2c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800ad2e:	1ad2      	subs	r2, r2, r3
 800ad30:	69bb      	ldr	r3, [r7, #24]
 800ad32:	429a      	cmp	r2, r3
 800ad34:	d901      	bls.n	800ad3a <f_mkfs+0x3fa>
 800ad36:	230e      	movs	r3, #14
 800ad38:	e24e      	b.n	800b1d8 <f_mkfs+0x898>
			n_clst = ((DWORD)sz_vol - sz_rsv - sz_fat * n_fat - sz_dir) / pau;
 800ad3a:	69ba      	ldr	r2, [r7, #24]
 800ad3c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800ad3e:	1ad2      	subs	r2, r2, r3
 800ad40:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ad42:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800ad44:	fb01 f303 	mul.w	r3, r1, r3
 800ad48:	1ad2      	subs	r2, r2, r3
 800ad4a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800ad4c:	1ad2      	subs	r2, r2, r3
 800ad4e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800ad50:	fbb2 f3f3 	udiv	r3, r2, r3
 800ad54:	62bb      	str	r3, [r7, #40]	@ 0x28
			if (fsty == FS_FAT32) {
 800ad56:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 800ad5a:	2b03      	cmp	r3, #3
 800ad5c:	d10f      	bne.n	800ad7e <f_mkfs+0x43e>
				if (n_clst <= MAX_FAT16) {	/* Too few clusters for FAT32? */
 800ad5e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ad60:	f64f 72f5 	movw	r2, #65525	@ 0xfff5
 800ad64:	4293      	cmp	r3, r2
 800ad66:	d80a      	bhi.n	800ad7e <f_mkfs+0x43e>
					if (sz_au == 0 && (sz_au = pau / 2) != 0) continue;	/* Adjust cluster size and retry */
 800ad68:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800ad6a:	2b00      	cmp	r3, #0
 800ad6c:	d105      	bne.n	800ad7a <f_mkfs+0x43a>
 800ad6e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800ad70:	085b      	lsrs	r3, r3, #1
 800ad72:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800ad74:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800ad76:	2b00      	cmp	r3, #0
 800ad78:	d145      	bne.n	800ae06 <f_mkfs+0x4c6>
					LEAVE_MKFS(FR_MKFS_ABORTED);
 800ad7a:	230e      	movs	r3, #14
 800ad7c:	e22c      	b.n	800b1d8 <f_mkfs+0x898>
				}
			}
			if (fsty == FS_FAT16) {
 800ad7e:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 800ad82:	2b02      	cmp	r3, #2
 800ad84:	d134      	bne.n	800adf0 <f_mkfs+0x4b0>
				if (n_clst > MAX_FAT16) {	/* Too many clusters for FAT16 */
 800ad86:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ad88:	f64f 72f5 	movw	r2, #65525	@ 0xfff5
 800ad8c:	4293      	cmp	r3, r2
 800ad8e:	d91f      	bls.n	800add0 <f_mkfs+0x490>
					if (sz_au == 0 && (pau * 2) <= 64) {
 800ad90:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800ad92:	2b00      	cmp	r3, #0
 800ad94:	d107      	bne.n	800ada6 <f_mkfs+0x466>
 800ad96:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800ad98:	005b      	lsls	r3, r3, #1
 800ad9a:	2b40      	cmp	r3, #64	@ 0x40
 800ad9c:	d803      	bhi.n	800ada6 <f_mkfs+0x466>
						sz_au = pau * 2; continue;	/* Adjust cluster size and retry */
 800ad9e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800ada0:	005b      	lsls	r3, r3, #1
 800ada2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800ada4:	e034      	b.n	800ae10 <f_mkfs+0x4d0>
					}
					if ((fsopt & FM_FAT32)) {
 800ada6:	f897 3040 	ldrb.w	r3, [r7, #64]	@ 0x40
 800adaa:	f003 0302 	and.w	r3, r3, #2
 800adae:	2b00      	cmp	r3, #0
 800adb0:	d003      	beq.n	800adba <f_mkfs+0x47a>
						fsty = FS_FAT32; continue;	/* Switch type to FAT32 and retry */
 800adb2:	2303      	movs	r3, #3
 800adb4:	f887 305b 	strb.w	r3, [r7, #91]	@ 0x5b
 800adb8:	e02a      	b.n	800ae10 <f_mkfs+0x4d0>
					}
					if (sz_au == 0 && (sz_au = pau * 2) <= 128) continue;	/* Adjust cluster size and retry */
 800adba:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800adbc:	2b00      	cmp	r3, #0
 800adbe:	d105      	bne.n	800adcc <f_mkfs+0x48c>
 800adc0:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800adc2:	005b      	lsls	r3, r3, #1
 800adc4:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800adc6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800adc8:	2b80      	cmp	r3, #128	@ 0x80
 800adca:	d91e      	bls.n	800ae0a <f_mkfs+0x4ca>
					LEAVE_MKFS(FR_MKFS_ABORTED);
 800adcc:	230e      	movs	r3, #14
 800adce:	e203      	b.n	800b1d8 <f_mkfs+0x898>
				}
				if  (n_clst <= MAX_FAT12) {	/* Too few clusters for FAT16 */
 800add0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800add2:	f640 72f5 	movw	r2, #4085	@ 0xff5
 800add6:	4293      	cmp	r3, r2
 800add8:	d80a      	bhi.n	800adf0 <f_mkfs+0x4b0>
					if (sz_au == 0 && (sz_au = pau * 2) <= 128) continue;	/* Adjust cluster size and retry */
 800adda:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800addc:	2b00      	cmp	r3, #0
 800adde:	d105      	bne.n	800adec <f_mkfs+0x4ac>
 800ade0:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800ade2:	005b      	lsls	r3, r3, #1
 800ade4:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800ade6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800ade8:	2b80      	cmp	r3, #128	@ 0x80
 800adea:	d910      	bls.n	800ae0e <f_mkfs+0x4ce>
					LEAVE_MKFS(FR_MKFS_ABORTED);
 800adec:	230e      	movs	r3, #14
 800adee:	e1f3      	b.n	800b1d8 <f_mkfs+0x898>
				}
			}
			if (fsty == FS_FAT12 && n_clst > MAX_FAT12) LEAVE_MKFS(FR_MKFS_ABORTED);	/* Too many clusters for FAT12 */
 800adf0:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 800adf4:	2b01      	cmp	r3, #1
 800adf6:	d113      	bne.n	800ae20 <f_mkfs+0x4e0>
 800adf8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800adfa:	f640 72f5 	movw	r2, #4085	@ 0xff5
 800adfe:	4293      	cmp	r3, r2
 800ae00:	d90e      	bls.n	800ae20 <f_mkfs+0x4e0>
 800ae02:	230e      	movs	r3, #14
 800ae04:	e1e8      	b.n	800b1d8 <f_mkfs+0x898>
					if (sz_au == 0 && (sz_au = pau / 2) != 0) continue;	/* Adjust cluster size and retry */
 800ae06:	bf00      	nop
 800ae08:	e6bc      	b.n	800ab84 <f_mkfs+0x244>
					if (sz_au == 0 && (sz_au = pau * 2) <= 128) continue;	/* Adjust cluster size and retry */
 800ae0a:	bf00      	nop
 800ae0c:	e6ba      	b.n	800ab84 <f_mkfs+0x244>
					if (sz_au == 0 && (sz_au = pau * 2) <= 128) continue;	/* Adjust cluster size and retry */
 800ae0e:	bf00      	nop
			pau = sz_au;
 800ae10:	e6b8      	b.n	800ab84 <f_mkfs+0x244>
 800ae12:	bf00      	nop
 800ae14:	08017ea0 	.word	0x08017ea0
 800ae18:	0ffffff5 	.word	0x0ffffff5
 800ae1c:	08017eb0 	.word	0x08017eb0

			/* Ok, it is the valid cluster configuration */
			break;
 800ae20:	bf00      	nop
#if FF_USE_TRIM
		lba[0] = b_vol; lba[1] = b_vol + sz_vol - 1;	/* Inform storage device that the volume area may be erased */
		disk_ioctl(pdrv, CTRL_TRIM, lba);
#endif
		/* Create FAT VBR */
		memset(buf, 0, ss);
 800ae22:	8c3b      	ldrh	r3, [r7, #32]
 800ae24:	461a      	mov	r2, r3
 800ae26:	2100      	movs	r1, #0
 800ae28:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800ae2a:	f00b fb33 	bl	8016494 <memset>
		memcpy(buf + BS_JmpBoot, "\xEB\xFE\x90" "MSDOS5.0", 11);	/* Boot jump code (x86), OEM name */
 800ae2e:	220b      	movs	r2, #11
 800ae30:	49b1      	ldr	r1, [pc, #708]	@ (800b0f8 <f_mkfs+0x7b8>)
 800ae32:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800ae34:	f00b fbb2 	bl	801659c <memcpy>
		st_word(buf + BPB_BytsPerSec, ss);				/* Sector size [byte] */
 800ae38:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ae3a:	330b      	adds	r3, #11
 800ae3c:	8c3a      	ldrh	r2, [r7, #32]
 800ae3e:	4611      	mov	r1, r2
 800ae40:	4618      	mov	r0, r3
 800ae42:	f7fd faaf 	bl	80083a4 <st_word>
		buf[BPB_SecPerClus] = (BYTE)pau;				/* Cluster size [sector] */
 800ae46:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ae48:	330d      	adds	r3, #13
 800ae4a:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800ae4c:	b2d2      	uxtb	r2, r2
 800ae4e:	701a      	strb	r2, [r3, #0]
		st_word(buf + BPB_RsvdSecCnt, (WORD)sz_rsv);	/* Size of reserved area */
 800ae50:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ae52:	330e      	adds	r3, #14
 800ae54:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 800ae56:	b292      	uxth	r2, r2
 800ae58:	4611      	mov	r1, r2
 800ae5a:	4618      	mov	r0, r3
 800ae5c:	f7fd faa2 	bl	80083a4 <st_word>
		buf[BPB_NumFATs] = (BYTE)n_fat;					/* Number of FATs */
 800ae60:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ae62:	3310      	adds	r3, #16
 800ae64:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800ae66:	b2d2      	uxtb	r2, r2
 800ae68:	701a      	strb	r2, [r3, #0]
		st_word(buf + BPB_RootEntCnt, (WORD)((fsty == FS_FAT32) ? 0 : n_root));	/* Number of root directory entries */
 800ae6a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ae6c:	f103 0211 	add.w	r2, r3, #17
 800ae70:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 800ae74:	2b03      	cmp	r3, #3
 800ae76:	d002      	beq.n	800ae7e <f_mkfs+0x53e>
 800ae78:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ae7a:	b29b      	uxth	r3, r3
 800ae7c:	e000      	b.n	800ae80 <f_mkfs+0x540>
 800ae7e:	2300      	movs	r3, #0
 800ae80:	4619      	mov	r1, r3
 800ae82:	4610      	mov	r0, r2
 800ae84:	f7fd fa8e 	bl	80083a4 <st_word>
		if (sz_vol < 0x10000) {
 800ae88:	69bb      	ldr	r3, [r7, #24]
 800ae8a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800ae8e:	d208      	bcs.n	800aea2 <f_mkfs+0x562>
			st_word(buf + BPB_TotSec16, (WORD)sz_vol);	/* Volume size in 16-bit LBA */
 800ae90:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ae92:	3313      	adds	r3, #19
 800ae94:	69ba      	ldr	r2, [r7, #24]
 800ae96:	b292      	uxth	r2, r2
 800ae98:	4611      	mov	r1, r2
 800ae9a:	4618      	mov	r0, r3
 800ae9c:	f7fd fa82 	bl	80083a4 <st_word>
 800aea0:	e006      	b.n	800aeb0 <f_mkfs+0x570>
		} else {
			st_dword(buf + BPB_TotSec32, (DWORD)sz_vol);	/* Volume size in 32-bit LBA */
 800aea2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aea4:	3320      	adds	r3, #32
 800aea6:	69ba      	ldr	r2, [r7, #24]
 800aea8:	4611      	mov	r1, r2
 800aeaa:	4618      	mov	r0, r3
 800aeac:	f7fd fa95 	bl	80083da <st_dword>
		}
		buf[BPB_Media] = 0xF8;							/* Media descriptor byte */
 800aeb0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aeb2:	3315      	adds	r3, #21
 800aeb4:	22f8      	movs	r2, #248	@ 0xf8
 800aeb6:	701a      	strb	r2, [r3, #0]
		st_word(buf + BPB_SecPerTrk, 63);				/* Number of sectors per track (for int13) */
 800aeb8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aeba:	3318      	adds	r3, #24
 800aebc:	213f      	movs	r1, #63	@ 0x3f
 800aebe:	4618      	mov	r0, r3
 800aec0:	f7fd fa70 	bl	80083a4 <st_word>
		st_word(buf + BPB_NumHeads, 255);				/* Number of heads (for int13) */
 800aec4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aec6:	331a      	adds	r3, #26
 800aec8:	21ff      	movs	r1, #255	@ 0xff
 800aeca:	4618      	mov	r0, r3
 800aecc:	f7fd fa6a 	bl	80083a4 <st_word>
		st_dword(buf + BPB_HiddSec, (DWORD)b_vol);		/* Volume offset in the physical drive [sector] */
 800aed0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aed2:	331c      	adds	r3, #28
 800aed4:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 800aed6:	4618      	mov	r0, r3
 800aed8:	f7fd fa7f 	bl	80083da <st_dword>
		if (fsty == FS_FAT32) {
 800aedc:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 800aee0:	2b03      	cmp	r3, #3
 800aee2:	d12d      	bne.n	800af40 <f_mkfs+0x600>
			st_dword(buf + BS_VolID32, vsn);			/* VSN */
 800aee4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aee6:	3343      	adds	r3, #67	@ 0x43
 800aee8:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800aeea:	4618      	mov	r0, r3
 800aeec:	f7fd fa75 	bl	80083da <st_dword>
			st_dword(buf + BPB_FATSz32, sz_fat);		/* FAT size [sector] */
 800aef0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aef2:	3324      	adds	r3, #36	@ 0x24
 800aef4:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800aef6:	4618      	mov	r0, r3
 800aef8:	f7fd fa6f 	bl	80083da <st_dword>
			st_dword(buf + BPB_RootClus32, 2);			/* Root directory cluster # (2) */
 800aefc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aefe:	332c      	adds	r3, #44	@ 0x2c
 800af00:	2102      	movs	r1, #2
 800af02:	4618      	mov	r0, r3
 800af04:	f7fd fa69 	bl	80083da <st_dword>
			st_word(buf + BPB_FSInfo32, 1);				/* Offset of FSINFO sector (VBR + 1) */
 800af08:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800af0a:	3330      	adds	r3, #48	@ 0x30
 800af0c:	2101      	movs	r1, #1
 800af0e:	4618      	mov	r0, r3
 800af10:	f7fd fa48 	bl	80083a4 <st_word>
			st_word(buf + BPB_BkBootSec32, 6);			/* Offset of backup VBR (VBR + 6) */
 800af14:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800af16:	3332      	adds	r3, #50	@ 0x32
 800af18:	2106      	movs	r1, #6
 800af1a:	4618      	mov	r0, r3
 800af1c:	f7fd fa42 	bl	80083a4 <st_word>
			buf[BS_DrvNum32] = 0x80;					/* Drive number (for int13) */
 800af20:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800af22:	3340      	adds	r3, #64	@ 0x40
 800af24:	2280      	movs	r2, #128	@ 0x80
 800af26:	701a      	strb	r2, [r3, #0]
			buf[BS_BootSig32] = 0x29;					/* Extended boot signature */
 800af28:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800af2a:	3342      	adds	r3, #66	@ 0x42
 800af2c:	2229      	movs	r2, #41	@ 0x29
 800af2e:	701a      	strb	r2, [r3, #0]
			memcpy(buf + BS_VolLab32, "NO NAME    " "FAT32   ", 19);	/* Volume label, FAT signature */
 800af30:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800af32:	3347      	adds	r3, #71	@ 0x47
 800af34:	2213      	movs	r2, #19
 800af36:	4971      	ldr	r1, [pc, #452]	@ (800b0fc <f_mkfs+0x7bc>)
 800af38:	4618      	mov	r0, r3
 800af3a:	f00b fb2f 	bl	801659c <memcpy>
 800af3e:	e01c      	b.n	800af7a <f_mkfs+0x63a>
		} else {
			st_dword(buf + BS_VolID, vsn);				/* VSN */
 800af40:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800af42:	3327      	adds	r3, #39	@ 0x27
 800af44:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800af46:	4618      	mov	r0, r3
 800af48:	f7fd fa47 	bl	80083da <st_dword>
			st_word(buf + BPB_FATSz16, (WORD)sz_fat);	/* FAT size [sector] */
 800af4c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800af4e:	3316      	adds	r3, #22
 800af50:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800af52:	b292      	uxth	r2, r2
 800af54:	4611      	mov	r1, r2
 800af56:	4618      	mov	r0, r3
 800af58:	f7fd fa24 	bl	80083a4 <st_word>
			buf[BS_DrvNum] = 0x80;						/* Drive number (for int13) */
 800af5c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800af5e:	3324      	adds	r3, #36	@ 0x24
 800af60:	2280      	movs	r2, #128	@ 0x80
 800af62:	701a      	strb	r2, [r3, #0]
			buf[BS_BootSig] = 0x29;						/* Extended boot signature */
 800af64:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800af66:	3326      	adds	r3, #38	@ 0x26
 800af68:	2229      	movs	r2, #41	@ 0x29
 800af6a:	701a      	strb	r2, [r3, #0]
			memcpy(buf + BS_VolLab, "NO NAME    " "FAT     ", 19);	/* Volume label, FAT signature */
 800af6c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800af6e:	332b      	adds	r3, #43	@ 0x2b
 800af70:	2213      	movs	r2, #19
 800af72:	4963      	ldr	r1, [pc, #396]	@ (800b100 <f_mkfs+0x7c0>)
 800af74:	4618      	mov	r0, r3
 800af76:	f00b fb11 	bl	801659c <memcpy>
		}
		st_word(buf + BS_55AA, 0xAA55);					/* Signature (offset is fixed here regardless of sector size) */
 800af7a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800af7c:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 800af80:	f64a 2155 	movw	r1, #43605	@ 0xaa55
 800af84:	4618      	mov	r0, r3
 800af86:	f7fd fa0d 	bl	80083a4 <st_word>
		if (disk_write(pdrv, buf, b_vol, 1) != RES_OK) LEAVE_MKFS(FR_DISK_ERR);	/* Write it to the VBR sector */
 800af8a:	f897 0043 	ldrb.w	r0, [r7, #67]	@ 0x43
 800af8e:	2301      	movs	r3, #1
 800af90:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800af92:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800af94:	f7fd f914 	bl	80081c0 <disk_write>
 800af98:	4603      	mov	r3, r0
 800af9a:	2b00      	cmp	r3, #0
 800af9c:	d001      	beq.n	800afa2 <f_mkfs+0x662>
 800af9e:	2301      	movs	r3, #1
 800afa0:	e11a      	b.n	800b1d8 <f_mkfs+0x898>

		/* Create FSINFO record if needed */
		if (fsty == FS_FAT32) {
 800afa2:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 800afa6:	2b03      	cmp	r3, #3
 800afa8:	d140      	bne.n	800b02c <f_mkfs+0x6ec>
			disk_write(pdrv, buf, b_vol + 6, 1);		/* Write backup VBR (VBR + 6) */
 800afaa:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800afac:	1d9a      	adds	r2, r3, #6
 800afae:	f897 0043 	ldrb.w	r0, [r7, #67]	@ 0x43
 800afb2:	2301      	movs	r3, #1
 800afb4:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800afb6:	f7fd f903 	bl	80081c0 <disk_write>
			memset(buf, 0, ss);
 800afba:	8c3b      	ldrh	r3, [r7, #32]
 800afbc:	461a      	mov	r2, r3
 800afbe:	2100      	movs	r1, #0
 800afc0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800afc2:	f00b fa67 	bl	8016494 <memset>
			st_dword(buf + FSI_LeadSig, 0x41615252);
 800afc6:	494f      	ldr	r1, [pc, #316]	@ (800b104 <f_mkfs+0x7c4>)
 800afc8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800afca:	f7fd fa06 	bl	80083da <st_dword>
			st_dword(buf + FSI_StrucSig, 0x61417272);
 800afce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800afd0:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 800afd4:	494c      	ldr	r1, [pc, #304]	@ (800b108 <f_mkfs+0x7c8>)
 800afd6:	4618      	mov	r0, r3
 800afd8:	f7fd f9ff 	bl	80083da <st_dword>
			st_dword(buf + FSI_Free_Count, n_clst - 1);	/* Number of free clusters */
 800afdc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800afde:	f503 72f4 	add.w	r2, r3, #488	@ 0x1e8
 800afe2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800afe4:	3b01      	subs	r3, #1
 800afe6:	4619      	mov	r1, r3
 800afe8:	4610      	mov	r0, r2
 800afea:	f7fd f9f6 	bl	80083da <st_dword>
			st_dword(buf + FSI_Nxt_Free, 2);			/* Last allocated cluster# */
 800afee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aff0:	f503 73f6 	add.w	r3, r3, #492	@ 0x1ec
 800aff4:	2102      	movs	r1, #2
 800aff6:	4618      	mov	r0, r3
 800aff8:	f7fd f9ef 	bl	80083da <st_dword>
			st_word(buf + BS_55AA, 0xAA55);
 800affc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800affe:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 800b002:	f64a 2155 	movw	r1, #43605	@ 0xaa55
 800b006:	4618      	mov	r0, r3
 800b008:	f7fd f9cc 	bl	80083a4 <st_word>
			disk_write(pdrv, buf, b_vol + 7, 1);		/* Write backup FSINFO (VBR + 7) */
 800b00c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b00e:	1dda      	adds	r2, r3, #7
 800b010:	f897 0043 	ldrb.w	r0, [r7, #67]	@ 0x43
 800b014:	2301      	movs	r3, #1
 800b016:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800b018:	f7fd f8d2 	bl	80081c0 <disk_write>
			disk_write(pdrv, buf, b_vol + 1, 1);		/* Write original FSINFO (VBR + 1) */
 800b01c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b01e:	1c5a      	adds	r2, r3, #1
 800b020:	f897 0043 	ldrb.w	r0, [r7, #67]	@ 0x43
 800b024:	2301      	movs	r3, #1
 800b026:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800b028:	f7fd f8ca 	bl	80081c0 <disk_write>
		}

		/* Initialize FAT area */
		memset(buf, 0, sz_buf * ss);
 800b02c:	8c3b      	ldrh	r3, [r7, #32]
 800b02e:	461a      	mov	r2, r3
 800b030:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b032:	fb02 f303 	mul.w	r3, r2, r3
 800b036:	461a      	mov	r2, r3
 800b038:	2100      	movs	r1, #0
 800b03a:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800b03c:	f00b fa2a 	bl	8016494 <memset>
		sect = b_fat;		/* FAT start sector */
 800b040:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800b042:	673b      	str	r3, [r7, #112]	@ 0x70
		for (i = 0; i < n_fat; i++) {			/* Initialize FATs each */
 800b044:	2300      	movs	r3, #0
 800b046:	64bb      	str	r3, [r7, #72]	@ 0x48
 800b048:	e04b      	b.n	800b0e2 <f_mkfs+0x7a2>
			if (fsty == FS_FAT32) {
 800b04a:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 800b04e:	2b03      	cmp	r3, #3
 800b050:	d113      	bne.n	800b07a <f_mkfs+0x73a>
				st_dword(buf + 0, 0xFFFFFFF8);	/* FAT[0] */
 800b052:	f06f 0107 	mvn.w	r1, #7
 800b056:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800b058:	f7fd f9bf 	bl	80083da <st_dword>
				st_dword(buf + 4, 0xFFFFFFFF);	/* FAT[1] */
 800b05c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b05e:	3304      	adds	r3, #4
 800b060:	f04f 31ff 	mov.w	r1, #4294967295
 800b064:	4618      	mov	r0, r3
 800b066:	f7fd f9b8 	bl	80083da <st_dword>
				st_dword(buf + 8, 0x0FFFFFFF);	/* FAT[2] (root directory) */
 800b06a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b06c:	3308      	adds	r3, #8
 800b06e:	f06f 4170 	mvn.w	r1, #4026531840	@ 0xf0000000
 800b072:	4618      	mov	r0, r3
 800b074:	f7fd f9b1 	bl	80083da <st_dword>
 800b078:	e00b      	b.n	800b092 <f_mkfs+0x752>
			} else {
				st_dword(buf + 0, (fsty == FS_FAT12) ? 0xFFFFF8 : 0xFFFFFFF8);	/* FAT[0] and FAT[1] */
 800b07a:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 800b07e:	2b01      	cmp	r3, #1
 800b080:	d101      	bne.n	800b086 <f_mkfs+0x746>
 800b082:	4b22      	ldr	r3, [pc, #136]	@ (800b10c <f_mkfs+0x7cc>)
 800b084:	e001      	b.n	800b08a <f_mkfs+0x74a>
 800b086:	f06f 0307 	mvn.w	r3, #7
 800b08a:	4619      	mov	r1, r3
 800b08c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800b08e:	f7fd f9a4 	bl	80083da <st_dword>
			}
			nsect = sz_fat;		/* Number of FAT sectors */
 800b092:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800b094:	65fb      	str	r3, [r7, #92]	@ 0x5c
			do {	/* Fill FAT sectors */
				n = (nsect > sz_buf) ? sz_buf : nsect;
 800b096:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800b098:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b09a:	4293      	cmp	r3, r2
 800b09c:	bf28      	it	cs
 800b09e:	4613      	movcs	r3, r2
 800b0a0:	667b      	str	r3, [r7, #100]	@ 0x64
				if (disk_write(pdrv, buf, sect, (UINT)n) != RES_OK) LEAVE_MKFS(FR_DISK_ERR);
 800b0a2:	f897 0043 	ldrb.w	r0, [r7, #67]	@ 0x43
 800b0a6:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800b0a8:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 800b0aa:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800b0ac:	f7fd f888 	bl	80081c0 <disk_write>
 800b0b0:	4603      	mov	r3, r0
 800b0b2:	2b00      	cmp	r3, #0
 800b0b4:	d001      	beq.n	800b0ba <f_mkfs+0x77a>
 800b0b6:	2301      	movs	r3, #1
 800b0b8:	e08e      	b.n	800b1d8 <f_mkfs+0x898>
				memset(buf, 0, ss);	/* Rest of FAT all are cleared */
 800b0ba:	8c3b      	ldrh	r3, [r7, #32]
 800b0bc:	461a      	mov	r2, r3
 800b0be:	2100      	movs	r1, #0
 800b0c0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800b0c2:	f00b f9e7 	bl	8016494 <memset>
				sect += n; nsect -= n;
 800b0c6:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 800b0c8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800b0ca:	4413      	add	r3, r2
 800b0cc:	673b      	str	r3, [r7, #112]	@ 0x70
 800b0ce:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800b0d0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800b0d2:	1ad3      	subs	r3, r2, r3
 800b0d4:	65fb      	str	r3, [r7, #92]	@ 0x5c
			} while (nsect);
 800b0d6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800b0d8:	2b00      	cmp	r3, #0
 800b0da:	d1dc      	bne.n	800b096 <f_mkfs+0x756>
		for (i = 0; i < n_fat; i++) {			/* Initialize FATs each */
 800b0dc:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800b0de:	3301      	adds	r3, #1
 800b0e0:	64bb      	str	r3, [r7, #72]	@ 0x48
 800b0e2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800b0e4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b0e6:	429a      	cmp	r2, r3
 800b0e8:	d3af      	bcc.n	800b04a <f_mkfs+0x70a>
		}

		/* Initialize root directory (fill with zero) */
		nsect = (fsty == FS_FAT32) ? pau : sz_dir;	/* Number of root directory sectors */
 800b0ea:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 800b0ee:	2b03      	cmp	r3, #3
 800b0f0:	d10e      	bne.n	800b110 <f_mkfs+0x7d0>
 800b0f2:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800b0f4:	e00d      	b.n	800b112 <f_mkfs+0x7d2>
 800b0f6:	bf00      	nop
 800b0f8:	08017ae0 	.word	0x08017ae0
 800b0fc:	08017aec 	.word	0x08017aec
 800b100:	08017b00 	.word	0x08017b00
 800b104:	41615252 	.word	0x41615252
 800b108:	61417272 	.word	0x61417272
 800b10c:	00fffff8 	.word	0x00fffff8
 800b110:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800b112:	65fb      	str	r3, [r7, #92]	@ 0x5c
		do {
			n = (nsect > sz_buf) ? sz_buf : nsect;
 800b114:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800b116:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b118:	4293      	cmp	r3, r2
 800b11a:	bf28      	it	cs
 800b11c:	4613      	movcs	r3, r2
 800b11e:	667b      	str	r3, [r7, #100]	@ 0x64
			if (disk_write(pdrv, buf, sect, (UINT)n) != RES_OK) LEAVE_MKFS(FR_DISK_ERR);
 800b120:	f897 0043 	ldrb.w	r0, [r7, #67]	@ 0x43
 800b124:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800b126:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 800b128:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800b12a:	f7fd f849 	bl	80081c0 <disk_write>
 800b12e:	4603      	mov	r3, r0
 800b130:	2b00      	cmp	r3, #0
 800b132:	d001      	beq.n	800b138 <f_mkfs+0x7f8>
 800b134:	2301      	movs	r3, #1
 800b136:	e04f      	b.n	800b1d8 <f_mkfs+0x898>
			sect += n; nsect -= n;
 800b138:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 800b13a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800b13c:	4413      	add	r3, r2
 800b13e:	673b      	str	r3, [r7, #112]	@ 0x70
 800b140:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800b142:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800b144:	1ad3      	subs	r3, r2, r3
 800b146:	65fb      	str	r3, [r7, #92]	@ 0x5c
		} while (nsect);
 800b148:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800b14a:	2b00      	cmp	r3, #0
 800b14c:	d1e2      	bne.n	800b114 <f_mkfs+0x7d4>
	/* A FAT volume has been created here */

	/* Determine system ID in the MBR partition table */
	if (FF_FS_EXFAT && fsty == FS_EXFAT) {
		sys = 0x07;		/* exFAT */
	} else if (fsty == FS_FAT32) {
 800b14e:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 800b152:	2b03      	cmp	r3, #3
 800b154:	d103      	bne.n	800b15e <f_mkfs+0x81e>
		sys = 0x0C;		/* FAT32X */
 800b156:	230c      	movs	r3, #12
 800b158:	f887 305a 	strb.w	r3, [r7, #90]	@ 0x5a
 800b15c:	e012      	b.n	800b184 <f_mkfs+0x844>
	} else if (sz_vol >= 0x10000) {
 800b15e:	69bb      	ldr	r3, [r7, #24]
 800b160:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800b164:	d303      	bcc.n	800b16e <f_mkfs+0x82e>
		sys = 0x06;		/* FAT12/16 (large) */
 800b166:	2306      	movs	r3, #6
 800b168:	f887 305a 	strb.w	r3, [r7, #90]	@ 0x5a
 800b16c:	e00a      	b.n	800b184 <f_mkfs+0x844>
	} else if (fsty == FS_FAT16) {
 800b16e:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 800b172:	2b02      	cmp	r3, #2
 800b174:	d103      	bne.n	800b17e <f_mkfs+0x83e>
		sys = 0x04;		/* FAT16 */
 800b176:	2304      	movs	r3, #4
 800b178:	f887 305a 	strb.w	r3, [r7, #90]	@ 0x5a
 800b17c:	e002      	b.n	800b184 <f_mkfs+0x844>
	} else {
		sys = 0x01;		/* FAT12 */
 800b17e:	2301      	movs	r3, #1
 800b180:	f887 305a 	strb.w	r3, [r7, #90]	@ 0x5a
			if (disk_read(pdrv, buf, 0, 1) != RES_OK) LEAVE_MKFS(FR_DISK_ERR);	/* Read the MBR */
			buf[MBR_Table + (ipart - 1) * SZ_PTE + PTE_System] = sys;			/* Set system ID */
			if (disk_write(pdrv, buf, 0, 1) != RES_OK) LEAVE_MKFS(FR_DISK_ERR);	/* Write it back to the MBR */
		}
	} else {								/* Volume as a new single partition */
		if (!(fsopt & FM_SFD)) {			/* Create partition table if not in SFD format */
 800b184:	f897 3040 	ldrb.w	r3, [r7, #64]	@ 0x40
 800b188:	f003 0308 	and.w	r3, r3, #8
 800b18c:	2b00      	cmp	r3, #0
 800b18e:	d116      	bne.n	800b1be <f_mkfs+0x87e>
			lba[0] = sz_vol; lba[1] = 0;
 800b190:	69bb      	ldr	r3, [r7, #24]
 800b192:	613b      	str	r3, [r7, #16]
 800b194:	2300      	movs	r3, #0
 800b196:	617b      	str	r3, [r7, #20]
			res = create_partition(pdrv, lba, sys, buf);
 800b198:	f897 205a 	ldrb.w	r2, [r7, #90]	@ 0x5a
 800b19c:	f107 0110 	add.w	r1, r7, #16
 800b1a0:	f897 0043 	ldrb.w	r0, [r7, #67]	@ 0x43
 800b1a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b1a6:	f7ff faa7 	bl	800a6f8 <create_partition>
 800b1aa:	4603      	mov	r3, r0
 800b1ac:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
			if (res != FR_OK) LEAVE_MKFS(res);
 800b1b0:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800b1b4:	2b00      	cmp	r3, #0
 800b1b6:	d002      	beq.n	800b1be <f_mkfs+0x87e>
 800b1b8:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800b1bc:	e00c      	b.n	800b1d8 <f_mkfs+0x898>
		}
	}

	if (disk_ioctl(pdrv, CTRL_SYNC, 0) != RES_OK) LEAVE_MKFS(FR_DISK_ERR);
 800b1be:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800b1c2:	2200      	movs	r2, #0
 800b1c4:	2100      	movs	r1, #0
 800b1c6:	4618      	mov	r0, r3
 800b1c8:	f7fd f82e 	bl	8008228 <disk_ioctl>
 800b1cc:	4603      	mov	r3, r0
 800b1ce:	2b00      	cmp	r3, #0
 800b1d0:	d001      	beq.n	800b1d6 <f_mkfs+0x896>
 800b1d2:	2301      	movs	r3, #1
 800b1d4:	e000      	b.n	800b1d8 <f_mkfs+0x898>

	LEAVE_MKFS(FR_OK);
 800b1d6:	2300      	movs	r3, #0
}
 800b1d8:	4618      	mov	r0, r3
 800b1da:	3778      	adds	r7, #120	@ 0x78
 800b1dc:	46bd      	mov	sp, r7
 800b1de:	bd80      	pop	{r7, pc}

0800b1e0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 800b1e0:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800b218 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 800b1e4:	f7fc ff58 	bl	8008098 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800b1e8:	480c      	ldr	r0, [pc, #48]	@ (800b21c <LoopForever+0x6>)
  ldr r1, =_edata
 800b1ea:	490d      	ldr	r1, [pc, #52]	@ (800b220 <LoopForever+0xa>)
  ldr r2, =_sidata
 800b1ec:	4a0d      	ldr	r2, [pc, #52]	@ (800b224 <LoopForever+0xe>)
  movs r3, #0
 800b1ee:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800b1f0:	e002      	b.n	800b1f8 <LoopCopyDataInit>

0800b1f2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800b1f2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800b1f4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800b1f6:	3304      	adds	r3, #4

0800b1f8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800b1f8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800b1fa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800b1fc:	d3f9      	bcc.n	800b1f2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800b1fe:	4a0a      	ldr	r2, [pc, #40]	@ (800b228 <LoopForever+0x12>)
  ldr r4, =_ebss
 800b200:	4c0a      	ldr	r4, [pc, #40]	@ (800b22c <LoopForever+0x16>)
  movs r3, #0
 800b202:	2300      	movs	r3, #0
  b LoopFillZerobss
 800b204:	e001      	b.n	800b20a <LoopFillZerobss>

0800b206 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800b206:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800b208:	3204      	adds	r2, #4

0800b20a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800b20a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800b20c:	d3fb      	bcc.n	800b206 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800b20e:	f00b f997 	bl	8016540 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800b212:	f7f9 f84f 	bl	80042b4 <main>

0800b216 <LoopForever>:

LoopForever:
    b LoopForever
 800b216:	e7fe      	b.n	800b216 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 800b218:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 800b21c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800b220:	20000084 	.word	0x20000084
  ldr r2, =_sidata
 800b224:	08018020 	.word	0x08018020
  ldr r2, =_sbss
 800b228:	20000088 	.word	0x20000088
  ldr r4, =_ebss
 800b22c:	20005da8 	.word	0x20005da8

0800b230 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800b230:	e7fe      	b.n	800b230 <ADC1_2_IRQHandler>

0800b232 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800b232:	b580      	push	{r7, lr}
 800b234:	b082      	sub	sp, #8
 800b236:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800b238:	2300      	movs	r3, #0
 800b23a:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800b23c:	2003      	movs	r0, #3
 800b23e:	f001 fd11 	bl	800cc64 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800b242:	200f      	movs	r0, #15
 800b244:	f000 f80e 	bl	800b264 <HAL_InitTick>
 800b248:	4603      	mov	r3, r0
 800b24a:	2b00      	cmp	r3, #0
 800b24c:	d002      	beq.n	800b254 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800b24e:	2301      	movs	r3, #1
 800b250:	71fb      	strb	r3, [r7, #7]
 800b252:	e001      	b.n	800b258 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800b254:	f7fc fa56 	bl	8007704 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800b258:	79fb      	ldrb	r3, [r7, #7]
}
 800b25a:	4618      	mov	r0, r3
 800b25c:	3708      	adds	r7, #8
 800b25e:	46bd      	mov	sp, r7
 800b260:	bd80      	pop	{r7, pc}
	...

0800b264 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800b264:	b580      	push	{r7, lr}
 800b266:	b084      	sub	sp, #16
 800b268:	af00      	add	r7, sp, #0
 800b26a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 800b26c:	2300      	movs	r3, #0
 800b26e:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 800b270:	4b17      	ldr	r3, [pc, #92]	@ (800b2d0 <HAL_InitTick+0x6c>)
 800b272:	781b      	ldrb	r3, [r3, #0]
 800b274:	2b00      	cmp	r3, #0
 800b276:	d023      	beq.n	800b2c0 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 800b278:	4b16      	ldr	r3, [pc, #88]	@ (800b2d4 <HAL_InitTick+0x70>)
 800b27a:	681a      	ldr	r2, [r3, #0]
 800b27c:	4b14      	ldr	r3, [pc, #80]	@ (800b2d0 <HAL_InitTick+0x6c>)
 800b27e:	781b      	ldrb	r3, [r3, #0]
 800b280:	4619      	mov	r1, r3
 800b282:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800b286:	fbb3 f3f1 	udiv	r3, r3, r1
 800b28a:	fbb2 f3f3 	udiv	r3, r2, r3
 800b28e:	4618      	mov	r0, r3
 800b290:	f001 fd21 	bl	800ccd6 <HAL_SYSTICK_Config>
 800b294:	4603      	mov	r3, r0
 800b296:	2b00      	cmp	r3, #0
 800b298:	d10f      	bne.n	800b2ba <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800b29a:	687b      	ldr	r3, [r7, #4]
 800b29c:	2b0f      	cmp	r3, #15
 800b29e:	d809      	bhi.n	800b2b4 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800b2a0:	2200      	movs	r2, #0
 800b2a2:	6879      	ldr	r1, [r7, #4]
 800b2a4:	f04f 30ff 	mov.w	r0, #4294967295
 800b2a8:	f001 fce7 	bl	800cc7a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800b2ac:	4a0a      	ldr	r2, [pc, #40]	@ (800b2d8 <HAL_InitTick+0x74>)
 800b2ae:	687b      	ldr	r3, [r7, #4]
 800b2b0:	6013      	str	r3, [r2, #0]
 800b2b2:	e007      	b.n	800b2c4 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 800b2b4:	2301      	movs	r3, #1
 800b2b6:	73fb      	strb	r3, [r7, #15]
 800b2b8:	e004      	b.n	800b2c4 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 800b2ba:	2301      	movs	r3, #1
 800b2bc:	73fb      	strb	r3, [r7, #15]
 800b2be:	e001      	b.n	800b2c4 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 800b2c0:	2301      	movs	r3, #1
 800b2c2:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800b2c4:	7bfb      	ldrb	r3, [r7, #15]
}
 800b2c6:	4618      	mov	r0, r3
 800b2c8:	3710      	adds	r7, #16
 800b2ca:	46bd      	mov	sp, r7
 800b2cc:	bd80      	pop	{r7, pc}
 800b2ce:	bf00      	nop
 800b2d0:	20000010 	.word	0x20000010
 800b2d4:	20000000 	.word	0x20000000
 800b2d8:	2000000c 	.word	0x2000000c

0800b2dc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800b2dc:	b480      	push	{r7}
 800b2de:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800b2e0:	4b06      	ldr	r3, [pc, #24]	@ (800b2fc <HAL_IncTick+0x20>)
 800b2e2:	781b      	ldrb	r3, [r3, #0]
 800b2e4:	461a      	mov	r2, r3
 800b2e6:	4b06      	ldr	r3, [pc, #24]	@ (800b300 <HAL_IncTick+0x24>)
 800b2e8:	681b      	ldr	r3, [r3, #0]
 800b2ea:	4413      	add	r3, r2
 800b2ec:	4a04      	ldr	r2, [pc, #16]	@ (800b300 <HAL_IncTick+0x24>)
 800b2ee:	6013      	str	r3, [r2, #0]
}
 800b2f0:	bf00      	nop
 800b2f2:	46bd      	mov	sp, r7
 800b2f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2f8:	4770      	bx	lr
 800b2fa:	bf00      	nop
 800b2fc:	20000010 	.word	0x20000010
 800b300:	20005c5c 	.word	0x20005c5c

0800b304 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800b304:	b480      	push	{r7}
 800b306:	af00      	add	r7, sp, #0
  return uwTick;
 800b308:	4b03      	ldr	r3, [pc, #12]	@ (800b318 <HAL_GetTick+0x14>)
 800b30a:	681b      	ldr	r3, [r3, #0]
}
 800b30c:	4618      	mov	r0, r3
 800b30e:	46bd      	mov	sp, r7
 800b310:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b314:	4770      	bx	lr
 800b316:	bf00      	nop
 800b318:	20005c5c 	.word	0x20005c5c

0800b31c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800b31c:	b580      	push	{r7, lr}
 800b31e:	b084      	sub	sp, #16
 800b320:	af00      	add	r7, sp, #0
 800b322:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800b324:	f7ff ffee 	bl	800b304 <HAL_GetTick>
 800b328:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800b32a:	687b      	ldr	r3, [r7, #4]
 800b32c:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 800b32e:	68fb      	ldr	r3, [r7, #12]
 800b330:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b334:	d005      	beq.n	800b342 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 800b336:	4b0a      	ldr	r3, [pc, #40]	@ (800b360 <HAL_Delay+0x44>)
 800b338:	781b      	ldrb	r3, [r3, #0]
 800b33a:	461a      	mov	r2, r3
 800b33c:	68fb      	ldr	r3, [r7, #12]
 800b33e:	4413      	add	r3, r2
 800b340:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800b342:	bf00      	nop
 800b344:	f7ff ffde 	bl	800b304 <HAL_GetTick>
 800b348:	4602      	mov	r2, r0
 800b34a:	68bb      	ldr	r3, [r7, #8]
 800b34c:	1ad3      	subs	r3, r2, r3
 800b34e:	68fa      	ldr	r2, [r7, #12]
 800b350:	429a      	cmp	r2, r3
 800b352:	d8f7      	bhi.n	800b344 <HAL_Delay+0x28>
  {
  }
}
 800b354:	bf00      	nop
 800b356:	bf00      	nop
 800b358:	3710      	adds	r7, #16
 800b35a:	46bd      	mov	sp, r7
 800b35c:	bd80      	pop	{r7, pc}
 800b35e:	bf00      	nop
 800b360:	20000010 	.word	0x20000010

0800b364 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 800b364:	b480      	push	{r7}
 800b366:	b083      	sub	sp, #12
 800b368:	af00      	add	r7, sp, #0
 800b36a:	6078      	str	r0, [r7, #4]
 800b36c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 800b36e:	687b      	ldr	r3, [r7, #4]
 800b370:	689b      	ldr	r3, [r3, #8]
 800b372:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 800b376:	683b      	ldr	r3, [r7, #0]
 800b378:	431a      	orrs	r2, r3
 800b37a:	687b      	ldr	r3, [r7, #4]
 800b37c:	609a      	str	r2, [r3, #8]
}
 800b37e:	bf00      	nop
 800b380:	370c      	adds	r7, #12
 800b382:	46bd      	mov	sp, r7
 800b384:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b388:	4770      	bx	lr

0800b38a <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 800b38a:	b480      	push	{r7}
 800b38c:	b083      	sub	sp, #12
 800b38e:	af00      	add	r7, sp, #0
 800b390:	6078      	str	r0, [r7, #4]
 800b392:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 800b394:	687b      	ldr	r3, [r7, #4]
 800b396:	689b      	ldr	r3, [r3, #8]
 800b398:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 800b39c:	683b      	ldr	r3, [r7, #0]
 800b39e:	431a      	orrs	r2, r3
 800b3a0:	687b      	ldr	r3, [r7, #4]
 800b3a2:	609a      	str	r2, [r3, #8]
}
 800b3a4:	bf00      	nop
 800b3a6:	370c      	adds	r7, #12
 800b3a8:	46bd      	mov	sp, r7
 800b3aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3ae:	4770      	bx	lr

0800b3b0 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 800b3b0:	b480      	push	{r7}
 800b3b2:	b083      	sub	sp, #12
 800b3b4:	af00      	add	r7, sp, #0
 800b3b6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 800b3b8:	687b      	ldr	r3, [r7, #4]
 800b3ba:	689b      	ldr	r3, [r3, #8]
 800b3bc:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 800b3c0:	4618      	mov	r0, r3
 800b3c2:	370c      	adds	r7, #12
 800b3c4:	46bd      	mov	sp, r7
 800b3c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3ca:	4770      	bx	lr

0800b3cc <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 800b3cc:	b480      	push	{r7}
 800b3ce:	b087      	sub	sp, #28
 800b3d0:	af00      	add	r7, sp, #0
 800b3d2:	60f8      	str	r0, [r7, #12]
 800b3d4:	60b9      	str	r1, [r7, #8]
 800b3d6:	607a      	str	r2, [r7, #4]
 800b3d8:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800b3da:	68fb      	ldr	r3, [r7, #12]
 800b3dc:	3360      	adds	r3, #96	@ 0x60
 800b3de:	461a      	mov	r2, r3
 800b3e0:	68bb      	ldr	r3, [r7, #8]
 800b3e2:	009b      	lsls	r3, r3, #2
 800b3e4:	4413      	add	r3, r2
 800b3e6:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800b3e8:	697b      	ldr	r3, [r7, #20]
 800b3ea:	681a      	ldr	r2, [r3, #0]
 800b3ec:	4b08      	ldr	r3, [pc, #32]	@ (800b410 <LL_ADC_SetOffset+0x44>)
 800b3ee:	4013      	ands	r3, r2
 800b3f0:	687a      	ldr	r2, [r7, #4]
 800b3f2:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 800b3f6:	683a      	ldr	r2, [r7, #0]
 800b3f8:	430a      	orrs	r2, r1
 800b3fa:	4313      	orrs	r3, r2
 800b3fc:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 800b400:	697b      	ldr	r3, [r7, #20]
 800b402:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 800b404:	bf00      	nop
 800b406:	371c      	adds	r7, #28
 800b408:	46bd      	mov	sp, r7
 800b40a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b40e:	4770      	bx	lr
 800b410:	03fff000 	.word	0x03fff000

0800b414 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 800b414:	b480      	push	{r7}
 800b416:	b085      	sub	sp, #20
 800b418:	af00      	add	r7, sp, #0
 800b41a:	6078      	str	r0, [r7, #4]
 800b41c:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800b41e:	687b      	ldr	r3, [r7, #4]
 800b420:	3360      	adds	r3, #96	@ 0x60
 800b422:	461a      	mov	r2, r3
 800b424:	683b      	ldr	r3, [r7, #0]
 800b426:	009b      	lsls	r3, r3, #2
 800b428:	4413      	add	r3, r2
 800b42a:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 800b42c:	68fb      	ldr	r3, [r7, #12]
 800b42e:	681b      	ldr	r3, [r3, #0]
 800b430:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 800b434:	4618      	mov	r0, r3
 800b436:	3714      	adds	r7, #20
 800b438:	46bd      	mov	sp, r7
 800b43a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b43e:	4770      	bx	lr

0800b440 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 800b440:	b480      	push	{r7}
 800b442:	b087      	sub	sp, #28
 800b444:	af00      	add	r7, sp, #0
 800b446:	60f8      	str	r0, [r7, #12]
 800b448:	60b9      	str	r1, [r7, #8]
 800b44a:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800b44c:	68fb      	ldr	r3, [r7, #12]
 800b44e:	3360      	adds	r3, #96	@ 0x60
 800b450:	461a      	mov	r2, r3
 800b452:	68bb      	ldr	r3, [r7, #8]
 800b454:	009b      	lsls	r3, r3, #2
 800b456:	4413      	add	r3, r2
 800b458:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800b45a:	697b      	ldr	r3, [r7, #20]
 800b45c:	681b      	ldr	r3, [r3, #0]
 800b45e:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800b462:	687b      	ldr	r3, [r7, #4]
 800b464:	431a      	orrs	r2, r3
 800b466:	697b      	ldr	r3, [r7, #20]
 800b468:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 800b46a:	bf00      	nop
 800b46c:	371c      	adds	r7, #28
 800b46e:	46bd      	mov	sp, r7
 800b470:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b474:	4770      	bx	lr

0800b476 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 800b476:	b480      	push	{r7}
 800b478:	b083      	sub	sp, #12
 800b47a:	af00      	add	r7, sp, #0
 800b47c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 800b47e:	687b      	ldr	r3, [r7, #4]
 800b480:	68db      	ldr	r3, [r3, #12]
 800b482:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800b486:	2b00      	cmp	r3, #0
 800b488:	d101      	bne.n	800b48e <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 800b48a:	2301      	movs	r3, #1
 800b48c:	e000      	b.n	800b490 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 800b48e:	2300      	movs	r3, #0
}
 800b490:	4618      	mov	r0, r3
 800b492:	370c      	adds	r7, #12
 800b494:	46bd      	mov	sp, r7
 800b496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b49a:	4770      	bx	lr

0800b49c <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 800b49c:	b480      	push	{r7}
 800b49e:	b087      	sub	sp, #28
 800b4a0:	af00      	add	r7, sp, #0
 800b4a2:	60f8      	str	r0, [r7, #12]
 800b4a4:	60b9      	str	r1, [r7, #8]
 800b4a6:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 800b4a8:	68fb      	ldr	r3, [r7, #12]
 800b4aa:	3330      	adds	r3, #48	@ 0x30
 800b4ac:	461a      	mov	r2, r3
 800b4ae:	68bb      	ldr	r3, [r7, #8]
 800b4b0:	0a1b      	lsrs	r3, r3, #8
 800b4b2:	009b      	lsls	r3, r3, #2
 800b4b4:	f003 030c 	and.w	r3, r3, #12
 800b4b8:	4413      	add	r3, r2
 800b4ba:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 800b4bc:	697b      	ldr	r3, [r7, #20]
 800b4be:	681a      	ldr	r2, [r3, #0]
 800b4c0:	68bb      	ldr	r3, [r7, #8]
 800b4c2:	f003 031f 	and.w	r3, r3, #31
 800b4c6:	211f      	movs	r1, #31
 800b4c8:	fa01 f303 	lsl.w	r3, r1, r3
 800b4cc:	43db      	mvns	r3, r3
 800b4ce:	401a      	ands	r2, r3
 800b4d0:	687b      	ldr	r3, [r7, #4]
 800b4d2:	0e9b      	lsrs	r3, r3, #26
 800b4d4:	f003 011f 	and.w	r1, r3, #31
 800b4d8:	68bb      	ldr	r3, [r7, #8]
 800b4da:	f003 031f 	and.w	r3, r3, #31
 800b4de:	fa01 f303 	lsl.w	r3, r1, r3
 800b4e2:	431a      	orrs	r2, r3
 800b4e4:	697b      	ldr	r3, [r7, #20]
 800b4e6:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 800b4e8:	bf00      	nop
 800b4ea:	371c      	adds	r7, #28
 800b4ec:	46bd      	mov	sp, r7
 800b4ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4f2:	4770      	bx	lr

0800b4f4 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 800b4f4:	b480      	push	{r7}
 800b4f6:	b087      	sub	sp, #28
 800b4f8:	af00      	add	r7, sp, #0
 800b4fa:	60f8      	str	r0, [r7, #12]
 800b4fc:	60b9      	str	r1, [r7, #8]
 800b4fe:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 800b500:	68fb      	ldr	r3, [r7, #12]
 800b502:	3314      	adds	r3, #20
 800b504:	461a      	mov	r2, r3
 800b506:	68bb      	ldr	r3, [r7, #8]
 800b508:	0e5b      	lsrs	r3, r3, #25
 800b50a:	009b      	lsls	r3, r3, #2
 800b50c:	f003 0304 	and.w	r3, r3, #4
 800b510:	4413      	add	r3, r2
 800b512:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 800b514:	697b      	ldr	r3, [r7, #20]
 800b516:	681a      	ldr	r2, [r3, #0]
 800b518:	68bb      	ldr	r3, [r7, #8]
 800b51a:	0d1b      	lsrs	r3, r3, #20
 800b51c:	f003 031f 	and.w	r3, r3, #31
 800b520:	2107      	movs	r1, #7
 800b522:	fa01 f303 	lsl.w	r3, r1, r3
 800b526:	43db      	mvns	r3, r3
 800b528:	401a      	ands	r2, r3
 800b52a:	68bb      	ldr	r3, [r7, #8]
 800b52c:	0d1b      	lsrs	r3, r3, #20
 800b52e:	f003 031f 	and.w	r3, r3, #31
 800b532:	6879      	ldr	r1, [r7, #4]
 800b534:	fa01 f303 	lsl.w	r3, r1, r3
 800b538:	431a      	orrs	r2, r3
 800b53a:	697b      	ldr	r3, [r7, #20]
 800b53c:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 800b53e:	bf00      	nop
 800b540:	371c      	adds	r7, #28
 800b542:	46bd      	mov	sp, r7
 800b544:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b548:	4770      	bx	lr
	...

0800b54c <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 800b54c:	b480      	push	{r7}
 800b54e:	b085      	sub	sp, #20
 800b550:	af00      	add	r7, sp, #0
 800b552:	60f8      	str	r0, [r7, #12]
 800b554:	60b9      	str	r1, [r7, #8]
 800b556:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 800b558:	68fb      	ldr	r3, [r7, #12]
 800b55a:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 800b55e:	68bb      	ldr	r3, [r7, #8]
 800b560:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800b564:	43db      	mvns	r3, r3
 800b566:	401a      	ands	r2, r3
 800b568:	687b      	ldr	r3, [r7, #4]
 800b56a:	f003 0318 	and.w	r3, r3, #24
 800b56e:	4908      	ldr	r1, [pc, #32]	@ (800b590 <LL_ADC_SetChannelSingleDiff+0x44>)
 800b570:	40d9      	lsrs	r1, r3
 800b572:	68bb      	ldr	r3, [r7, #8]
 800b574:	400b      	ands	r3, r1
 800b576:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800b57a:	431a      	orrs	r2, r3
 800b57c:	68fb      	ldr	r3, [r7, #12]
 800b57e:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 800b582:	bf00      	nop
 800b584:	3714      	adds	r7, #20
 800b586:	46bd      	mov	sp, r7
 800b588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b58c:	4770      	bx	lr
 800b58e:	bf00      	nop
 800b590:	0007ffff 	.word	0x0007ffff

0800b594 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 800b594:	b480      	push	{r7}
 800b596:	b083      	sub	sp, #12
 800b598:	af00      	add	r7, sp, #0
 800b59a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 800b59c:	687b      	ldr	r3, [r7, #4]
 800b59e:	689b      	ldr	r3, [r3, #8]
 800b5a0:	f003 031f 	and.w	r3, r3, #31
}
 800b5a4:	4618      	mov	r0, r3
 800b5a6:	370c      	adds	r7, #12
 800b5a8:	46bd      	mov	sp, r7
 800b5aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5ae:	4770      	bx	lr

0800b5b0 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 800b5b0:	b480      	push	{r7}
 800b5b2:	b083      	sub	sp, #12
 800b5b4:	af00      	add	r7, sp, #0
 800b5b6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 800b5b8:	687b      	ldr	r3, [r7, #4]
 800b5ba:	689b      	ldr	r3, [r3, #8]
 800b5bc:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 800b5c0:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800b5c4:	687a      	ldr	r2, [r7, #4]
 800b5c6:	6093      	str	r3, [r2, #8]
}
 800b5c8:	bf00      	nop
 800b5ca:	370c      	adds	r7, #12
 800b5cc:	46bd      	mov	sp, r7
 800b5ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5d2:	4770      	bx	lr

0800b5d4 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 800b5d4:	b480      	push	{r7}
 800b5d6:	b083      	sub	sp, #12
 800b5d8:	af00      	add	r7, sp, #0
 800b5da:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 800b5dc:	687b      	ldr	r3, [r7, #4]
 800b5de:	689b      	ldr	r3, [r3, #8]
 800b5e0:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800b5e4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800b5e8:	d101      	bne.n	800b5ee <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 800b5ea:	2301      	movs	r3, #1
 800b5ec:	e000      	b.n	800b5f0 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 800b5ee:	2300      	movs	r3, #0
}
 800b5f0:	4618      	mov	r0, r3
 800b5f2:	370c      	adds	r7, #12
 800b5f4:	46bd      	mov	sp, r7
 800b5f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5fa:	4770      	bx	lr

0800b5fc <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 800b5fc:	b480      	push	{r7}
 800b5fe:	b083      	sub	sp, #12
 800b600:	af00      	add	r7, sp, #0
 800b602:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800b604:	687b      	ldr	r3, [r7, #4]
 800b606:	689b      	ldr	r3, [r3, #8]
 800b608:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 800b60c:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800b610:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 800b614:	687b      	ldr	r3, [r7, #4]
 800b616:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 800b618:	bf00      	nop
 800b61a:	370c      	adds	r7, #12
 800b61c:	46bd      	mov	sp, r7
 800b61e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b622:	4770      	bx	lr

0800b624 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 800b624:	b480      	push	{r7}
 800b626:	b083      	sub	sp, #12
 800b628:	af00      	add	r7, sp, #0
 800b62a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 800b62c:	687b      	ldr	r3, [r7, #4]
 800b62e:	689b      	ldr	r3, [r3, #8]
 800b630:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800b634:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800b638:	d101      	bne.n	800b63e <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 800b63a:	2301      	movs	r3, #1
 800b63c:	e000      	b.n	800b640 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 800b63e:	2300      	movs	r3, #0
}
 800b640:	4618      	mov	r0, r3
 800b642:	370c      	adds	r7, #12
 800b644:	46bd      	mov	sp, r7
 800b646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b64a:	4770      	bx	lr

0800b64c <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 800b64c:	b480      	push	{r7}
 800b64e:	b083      	sub	sp, #12
 800b650:	af00      	add	r7, sp, #0
 800b652:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800b654:	687b      	ldr	r3, [r7, #4]
 800b656:	689b      	ldr	r3, [r3, #8]
 800b658:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800b65c:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800b660:	f043 0201 	orr.w	r2, r3, #1
 800b664:	687b      	ldr	r3, [r7, #4]
 800b666:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 800b668:	bf00      	nop
 800b66a:	370c      	adds	r7, #12
 800b66c:	46bd      	mov	sp, r7
 800b66e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b672:	4770      	bx	lr

0800b674 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 800b674:	b480      	push	{r7}
 800b676:	b083      	sub	sp, #12
 800b678:	af00      	add	r7, sp, #0
 800b67a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800b67c:	687b      	ldr	r3, [r7, #4]
 800b67e:	689b      	ldr	r3, [r3, #8]
 800b680:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800b684:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800b688:	f043 0202 	orr.w	r2, r3, #2
 800b68c:	687b      	ldr	r3, [r7, #4]
 800b68e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 800b690:	bf00      	nop
 800b692:	370c      	adds	r7, #12
 800b694:	46bd      	mov	sp, r7
 800b696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b69a:	4770      	bx	lr

0800b69c <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 800b69c:	b480      	push	{r7}
 800b69e:	b083      	sub	sp, #12
 800b6a0:	af00      	add	r7, sp, #0
 800b6a2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800b6a4:	687b      	ldr	r3, [r7, #4]
 800b6a6:	689b      	ldr	r3, [r3, #8]
 800b6a8:	f003 0301 	and.w	r3, r3, #1
 800b6ac:	2b01      	cmp	r3, #1
 800b6ae:	d101      	bne.n	800b6b4 <LL_ADC_IsEnabled+0x18>
 800b6b0:	2301      	movs	r3, #1
 800b6b2:	e000      	b.n	800b6b6 <LL_ADC_IsEnabled+0x1a>
 800b6b4:	2300      	movs	r3, #0
}
 800b6b6:	4618      	mov	r0, r3
 800b6b8:	370c      	adds	r7, #12
 800b6ba:	46bd      	mov	sp, r7
 800b6bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6c0:	4770      	bx	lr

0800b6c2 <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(const ADC_TypeDef *ADCx)
{
 800b6c2:	b480      	push	{r7}
 800b6c4:	b083      	sub	sp, #12
 800b6c6:	af00      	add	r7, sp, #0
 800b6c8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 800b6ca:	687b      	ldr	r3, [r7, #4]
 800b6cc:	689b      	ldr	r3, [r3, #8]
 800b6ce:	f003 0302 	and.w	r3, r3, #2
 800b6d2:	2b02      	cmp	r3, #2
 800b6d4:	d101      	bne.n	800b6da <LL_ADC_IsDisableOngoing+0x18>
 800b6d6:	2301      	movs	r3, #1
 800b6d8:	e000      	b.n	800b6dc <LL_ADC_IsDisableOngoing+0x1a>
 800b6da:	2300      	movs	r3, #0
}
 800b6dc:	4618      	mov	r0, r3
 800b6de:	370c      	adds	r7, #12
 800b6e0:	46bd      	mov	sp, r7
 800b6e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6e6:	4770      	bx	lr

0800b6e8 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 800b6e8:	b480      	push	{r7}
 800b6ea:	b083      	sub	sp, #12
 800b6ec:	af00      	add	r7, sp, #0
 800b6ee:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800b6f0:	687b      	ldr	r3, [r7, #4]
 800b6f2:	689b      	ldr	r3, [r3, #8]
 800b6f4:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800b6f8:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800b6fc:	f043 0204 	orr.w	r2, r3, #4
 800b700:	687b      	ldr	r3, [r7, #4]
 800b702:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 800b704:	bf00      	nop
 800b706:	370c      	adds	r7, #12
 800b708:	46bd      	mov	sp, r7
 800b70a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b70e:	4770      	bx	lr

0800b710 <LL_ADC_REG_StopConversion>:
  * @rmtoll CR       ADSTP          LL_ADC_REG_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StopConversion(ADC_TypeDef *ADCx)
{
 800b710:	b480      	push	{r7}
 800b712:	b083      	sub	sp, #12
 800b714:	af00      	add	r7, sp, #0
 800b716:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800b718:	687b      	ldr	r3, [r7, #4]
 800b71a:	689b      	ldr	r3, [r3, #8]
 800b71c:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800b720:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800b724:	f043 0210 	orr.w	r2, r3, #16
 800b728:	687b      	ldr	r3, [r7, #4]
 800b72a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTP);
}
 800b72c:	bf00      	nop
 800b72e:	370c      	adds	r7, #12
 800b730:	46bd      	mov	sp, r7
 800b732:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b736:	4770      	bx	lr

0800b738 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 800b738:	b480      	push	{r7}
 800b73a:	b083      	sub	sp, #12
 800b73c:	af00      	add	r7, sp, #0
 800b73e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800b740:	687b      	ldr	r3, [r7, #4]
 800b742:	689b      	ldr	r3, [r3, #8]
 800b744:	f003 0304 	and.w	r3, r3, #4
 800b748:	2b04      	cmp	r3, #4
 800b74a:	d101      	bne.n	800b750 <LL_ADC_REG_IsConversionOngoing+0x18>
 800b74c:	2301      	movs	r3, #1
 800b74e:	e000      	b.n	800b752 <LL_ADC_REG_IsConversionOngoing+0x1a>
 800b750:	2300      	movs	r3, #0
}
 800b752:	4618      	mov	r0, r3
 800b754:	370c      	adds	r7, #12
 800b756:	46bd      	mov	sp, r7
 800b758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b75c:	4770      	bx	lr

0800b75e <LL_ADC_INJ_StopConversion>:
  * @rmtoll CR       JADSTP         LL_ADC_INJ_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_INJ_StopConversion(ADC_TypeDef *ADCx)
{
 800b75e:	b480      	push	{r7}
 800b760:	b083      	sub	sp, #12
 800b762:	af00      	add	r7, sp, #0
 800b764:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800b766:	687b      	ldr	r3, [r7, #4]
 800b768:	689b      	ldr	r3, [r3, #8]
 800b76a:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800b76e:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800b772:	f043 0220 	orr.w	r2, r3, #32
 800b776:	687b      	ldr	r3, [r7, #4]
 800b778:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_JADSTP);
}
 800b77a:	bf00      	nop
 800b77c:	370c      	adds	r7, #12
 800b77e:	46bd      	mov	sp, r7
 800b780:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b784:	4770      	bx	lr

0800b786 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 800b786:	b480      	push	{r7}
 800b788:	b083      	sub	sp, #12
 800b78a:	af00      	add	r7, sp, #0
 800b78c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 800b78e:	687b      	ldr	r3, [r7, #4]
 800b790:	689b      	ldr	r3, [r3, #8]
 800b792:	f003 0308 	and.w	r3, r3, #8
 800b796:	2b08      	cmp	r3, #8
 800b798:	d101      	bne.n	800b79e <LL_ADC_INJ_IsConversionOngoing+0x18>
 800b79a:	2301      	movs	r3, #1
 800b79c:	e000      	b.n	800b7a0 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 800b79e:	2300      	movs	r3, #0
}
 800b7a0:	4618      	mov	r0, r3
 800b7a2:	370c      	adds	r7, #12
 800b7a4:	46bd      	mov	sp, r7
 800b7a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7aa:	4770      	bx	lr

0800b7ac <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 800b7ac:	b590      	push	{r4, r7, lr}
 800b7ae:	b089      	sub	sp, #36	@ 0x24
 800b7b0:	af00      	add	r7, sp, #0
 800b7b2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800b7b4:	2300      	movs	r3, #0
 800b7b6:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 800b7b8:	2300      	movs	r3, #0
 800b7ba:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 800b7bc:	687b      	ldr	r3, [r7, #4]
 800b7be:	2b00      	cmp	r3, #0
 800b7c0:	d101      	bne.n	800b7c6 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 800b7c2:	2301      	movs	r3, #1
 800b7c4:	e130      	b.n	800ba28 <HAL_ADC_Init+0x27c>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800b7c6:	687b      	ldr	r3, [r7, #4]
 800b7c8:	691b      	ldr	r3, [r3, #16]
 800b7ca:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800b7cc:	687b      	ldr	r3, [r7, #4]
 800b7ce:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b7d0:	2b00      	cmp	r3, #0
 800b7d2:	d109      	bne.n	800b7e8 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800b7d4:	6878      	ldr	r0, [r7, #4]
 800b7d6:	f7fb ffb9 	bl	800774c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800b7da:	687b      	ldr	r3, [r7, #4]
 800b7dc:	2200      	movs	r2, #0
 800b7de:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 800b7e0:	687b      	ldr	r3, [r7, #4]
 800b7e2:	2200      	movs	r2, #0
 800b7e4:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 800b7e8:	687b      	ldr	r3, [r7, #4]
 800b7ea:	681b      	ldr	r3, [r3, #0]
 800b7ec:	4618      	mov	r0, r3
 800b7ee:	f7ff fef1 	bl	800b5d4 <LL_ADC_IsDeepPowerDownEnabled>
 800b7f2:	4603      	mov	r3, r0
 800b7f4:	2b00      	cmp	r3, #0
 800b7f6:	d004      	beq.n	800b802 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 800b7f8:	687b      	ldr	r3, [r7, #4]
 800b7fa:	681b      	ldr	r3, [r3, #0]
 800b7fc:	4618      	mov	r0, r3
 800b7fe:	f7ff fed7 	bl	800b5b0 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800b802:	687b      	ldr	r3, [r7, #4]
 800b804:	681b      	ldr	r3, [r3, #0]
 800b806:	4618      	mov	r0, r3
 800b808:	f7ff ff0c 	bl	800b624 <LL_ADC_IsInternalRegulatorEnabled>
 800b80c:	4603      	mov	r3, r0
 800b80e:	2b00      	cmp	r3, #0
 800b810:	d115      	bne.n	800b83e <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 800b812:	687b      	ldr	r3, [r7, #4]
 800b814:	681b      	ldr	r3, [r3, #0]
 800b816:	4618      	mov	r0, r3
 800b818:	f7ff fef0 	bl	800b5fc <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800b81c:	4b84      	ldr	r3, [pc, #528]	@ (800ba30 <HAL_ADC_Init+0x284>)
 800b81e:	681b      	ldr	r3, [r3, #0]
 800b820:	099b      	lsrs	r3, r3, #6
 800b822:	4a84      	ldr	r2, [pc, #528]	@ (800ba34 <HAL_ADC_Init+0x288>)
 800b824:	fba2 2303 	umull	r2, r3, r2, r3
 800b828:	099b      	lsrs	r3, r3, #6
 800b82a:	3301      	adds	r3, #1
 800b82c:	005b      	lsls	r3, r3, #1
 800b82e:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 800b830:	e002      	b.n	800b838 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 800b832:	68fb      	ldr	r3, [r7, #12]
 800b834:	3b01      	subs	r3, #1
 800b836:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 800b838:	68fb      	ldr	r3, [r7, #12]
 800b83a:	2b00      	cmp	r3, #0
 800b83c:	d1f9      	bne.n	800b832 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800b83e:	687b      	ldr	r3, [r7, #4]
 800b840:	681b      	ldr	r3, [r3, #0]
 800b842:	4618      	mov	r0, r3
 800b844:	f7ff feee 	bl	800b624 <LL_ADC_IsInternalRegulatorEnabled>
 800b848:	4603      	mov	r3, r0
 800b84a:	2b00      	cmp	r3, #0
 800b84c:	d10d      	bne.n	800b86a <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800b84e:	687b      	ldr	r3, [r7, #4]
 800b850:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b852:	f043 0210 	orr.w	r2, r3, #16
 800b856:	687b      	ldr	r3, [r7, #4]
 800b858:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800b85a:	687b      	ldr	r3, [r7, #4]
 800b85c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800b85e:	f043 0201 	orr.w	r2, r3, #1
 800b862:	687b      	ldr	r3, [r7, #4]
 800b864:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 800b866:	2301      	movs	r3, #1
 800b868:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800b86a:	687b      	ldr	r3, [r7, #4]
 800b86c:	681b      	ldr	r3, [r3, #0]
 800b86e:	4618      	mov	r0, r3
 800b870:	f7ff ff62 	bl	800b738 <LL_ADC_REG_IsConversionOngoing>
 800b874:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800b876:	687b      	ldr	r3, [r7, #4]
 800b878:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b87a:	f003 0310 	and.w	r3, r3, #16
 800b87e:	2b00      	cmp	r3, #0
 800b880:	f040 80c9 	bne.w	800ba16 <HAL_ADC_Init+0x26a>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 800b884:	697b      	ldr	r3, [r7, #20]
 800b886:	2b00      	cmp	r3, #0
 800b888:	f040 80c5 	bne.w	800ba16 <HAL_ADC_Init+0x26a>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800b88c:	687b      	ldr	r3, [r7, #4]
 800b88e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b890:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 800b894:	f043 0202 	orr.w	r2, r3, #2
 800b898:	687b      	ldr	r3, [r7, #4]
 800b89a:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800b89c:	687b      	ldr	r3, [r7, #4]
 800b89e:	681b      	ldr	r3, [r3, #0]
 800b8a0:	4618      	mov	r0, r3
 800b8a2:	f7ff fefb 	bl	800b69c <LL_ADC_IsEnabled>
 800b8a6:	4603      	mov	r3, r0
 800b8a8:	2b00      	cmp	r3, #0
 800b8aa:	d115      	bne.n	800b8d8 <HAL_ADC_Init+0x12c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800b8ac:	4862      	ldr	r0, [pc, #392]	@ (800ba38 <HAL_ADC_Init+0x28c>)
 800b8ae:	f7ff fef5 	bl	800b69c <LL_ADC_IsEnabled>
 800b8b2:	4604      	mov	r4, r0
 800b8b4:	4861      	ldr	r0, [pc, #388]	@ (800ba3c <HAL_ADC_Init+0x290>)
 800b8b6:	f7ff fef1 	bl	800b69c <LL_ADC_IsEnabled>
 800b8ba:	4603      	mov	r3, r0
 800b8bc:	431c      	orrs	r4, r3
 800b8be:	4860      	ldr	r0, [pc, #384]	@ (800ba40 <HAL_ADC_Init+0x294>)
 800b8c0:	f7ff feec 	bl	800b69c <LL_ADC_IsEnabled>
 800b8c4:	4603      	mov	r3, r0
 800b8c6:	4323      	orrs	r3, r4
 800b8c8:	2b00      	cmp	r3, #0
 800b8ca:	d105      	bne.n	800b8d8 <HAL_ADC_Init+0x12c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 800b8cc:	687b      	ldr	r3, [r7, #4]
 800b8ce:	685b      	ldr	r3, [r3, #4]
 800b8d0:	4619      	mov	r1, r3
 800b8d2:	485c      	ldr	r0, [pc, #368]	@ (800ba44 <HAL_ADC_Init+0x298>)
 800b8d4:	f7ff fd46 	bl	800b364 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800b8d8:	687b      	ldr	r3, [r7, #4]
 800b8da:	7e5b      	ldrb	r3, [r3, #25]
 800b8dc:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 800b8de:	687b      	ldr	r3, [r7, #4]
 800b8e0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800b8e2:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 800b8e4:	687b      	ldr	r3, [r7, #4]
 800b8e6:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 800b8e8:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 800b8ea:	687b      	ldr	r3, [r7, #4]
 800b8ec:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 800b8ee:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 800b8f0:	687b      	ldr	r3, [r7, #4]
 800b8f2:	f893 3020 	ldrb.w	r3, [r3, #32]
 800b8f6:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800b8f8:	4313      	orrs	r3, r2
 800b8fa:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800b8fc:	687b      	ldr	r3, [r7, #4]
 800b8fe:	f893 3020 	ldrb.w	r3, [r3, #32]
 800b902:	2b01      	cmp	r3, #1
 800b904:	d106      	bne.n	800b914 <HAL_ADC_Init+0x168>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 800b906:	687b      	ldr	r3, [r7, #4]
 800b908:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b90a:	3b01      	subs	r3, #1
 800b90c:	045b      	lsls	r3, r3, #17
 800b90e:	69ba      	ldr	r2, [r7, #24]
 800b910:	4313      	orrs	r3, r2
 800b912:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800b914:	687b      	ldr	r3, [r7, #4]
 800b916:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b918:	2b00      	cmp	r3, #0
 800b91a:	d009      	beq.n	800b930 <HAL_ADC_Init+0x184>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800b91c:	687b      	ldr	r3, [r7, #4]
 800b91e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b920:	f403 7270 	and.w	r2, r3, #960	@ 0x3c0
                   | hadc->Init.ExternalTrigConvEdge
 800b924:	687b      	ldr	r3, [r7, #4]
 800b926:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b928:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800b92a:	69ba      	ldr	r2, [r7, #24]
 800b92c:	4313      	orrs	r3, r2
 800b92e:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 800b930:	687b      	ldr	r3, [r7, #4]
 800b932:	681b      	ldr	r3, [r3, #0]
 800b934:	68da      	ldr	r2, [r3, #12]
 800b936:	4b44      	ldr	r3, [pc, #272]	@ (800ba48 <HAL_ADC_Init+0x29c>)
 800b938:	4013      	ands	r3, r2
 800b93a:	687a      	ldr	r2, [r7, #4]
 800b93c:	6812      	ldr	r2, [r2, #0]
 800b93e:	69b9      	ldr	r1, [r7, #24]
 800b940:	430b      	orrs	r3, r1
 800b942:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800b944:	687b      	ldr	r3, [r7, #4]
 800b946:	681b      	ldr	r3, [r3, #0]
 800b948:	4618      	mov	r0, r3
 800b94a:	f7ff ff1c 	bl	800b786 <LL_ADC_INJ_IsConversionOngoing>
 800b94e:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800b950:	697b      	ldr	r3, [r7, #20]
 800b952:	2b00      	cmp	r3, #0
 800b954:	d13d      	bne.n	800b9d2 <HAL_ADC_Init+0x226>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800b956:	693b      	ldr	r3, [r7, #16]
 800b958:	2b00      	cmp	r3, #0
 800b95a:	d13a      	bne.n	800b9d2 <HAL_ADC_Init+0x226>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800b95c:	687b      	ldr	r3, [r7, #4]
 800b95e:	7e1b      	ldrb	r3, [r3, #24]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 800b960:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 800b962:	687b      	ldr	r3, [r7, #4]
 800b964:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800b968:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 800b96a:	4313      	orrs	r3, r2
 800b96c:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 800b96e:	687b      	ldr	r3, [r7, #4]
 800b970:	681b      	ldr	r3, [r3, #0]
 800b972:	68db      	ldr	r3, [r3, #12]
 800b974:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800b978:	f023 0302 	bic.w	r3, r3, #2
 800b97c:	687a      	ldr	r2, [r7, #4]
 800b97e:	6812      	ldr	r2, [r2, #0]
 800b980:	69b9      	ldr	r1, [r7, #24]
 800b982:	430b      	orrs	r3, r1
 800b984:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 800b986:	687b      	ldr	r3, [r7, #4]
 800b988:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800b98c:	2b01      	cmp	r3, #1
 800b98e:	d118      	bne.n	800b9c2 <HAL_ADC_Init+0x216>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 800b990:	687b      	ldr	r3, [r7, #4]
 800b992:	681b      	ldr	r3, [r3, #0]
 800b994:	691b      	ldr	r3, [r3, #16]
 800b996:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 800b99a:	f023 0304 	bic.w	r3, r3, #4
 800b99e:	687a      	ldr	r2, [r7, #4]
 800b9a0:	6bd1      	ldr	r1, [r2, #60]	@ 0x3c
 800b9a2:	687a      	ldr	r2, [r7, #4]
 800b9a4:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 800b9a6:	4311      	orrs	r1, r2
 800b9a8:	687a      	ldr	r2, [r7, #4]
 800b9aa:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 800b9ac:	4311      	orrs	r1, r2
 800b9ae:	687a      	ldr	r2, [r7, #4]
 800b9b0:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800b9b2:	430a      	orrs	r2, r1
 800b9b4:	431a      	orrs	r2, r3
 800b9b6:	687b      	ldr	r3, [r7, #4]
 800b9b8:	681b      	ldr	r3, [r3, #0]
 800b9ba:	f042 0201 	orr.w	r2, r2, #1
 800b9be:	611a      	str	r2, [r3, #16]
 800b9c0:	e007      	b.n	800b9d2 <HAL_ADC_Init+0x226>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 800b9c2:	687b      	ldr	r3, [r7, #4]
 800b9c4:	681b      	ldr	r3, [r3, #0]
 800b9c6:	691a      	ldr	r2, [r3, #16]
 800b9c8:	687b      	ldr	r3, [r7, #4]
 800b9ca:	681b      	ldr	r3, [r3, #0]
 800b9cc:	f022 0201 	bic.w	r2, r2, #1
 800b9d0:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 800b9d2:	687b      	ldr	r3, [r7, #4]
 800b9d4:	691b      	ldr	r3, [r3, #16]
 800b9d6:	2b01      	cmp	r3, #1
 800b9d8:	d10c      	bne.n	800b9f4 <HAL_ADC_Init+0x248>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 800b9da:	687b      	ldr	r3, [r7, #4]
 800b9dc:	681b      	ldr	r3, [r3, #0]
 800b9de:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b9e0:	f023 010f 	bic.w	r1, r3, #15
 800b9e4:	687b      	ldr	r3, [r7, #4]
 800b9e6:	69db      	ldr	r3, [r3, #28]
 800b9e8:	1e5a      	subs	r2, r3, #1
 800b9ea:	687b      	ldr	r3, [r7, #4]
 800b9ec:	681b      	ldr	r3, [r3, #0]
 800b9ee:	430a      	orrs	r2, r1
 800b9f0:	631a      	str	r2, [r3, #48]	@ 0x30
 800b9f2:	e007      	b.n	800ba04 <HAL_ADC_Init+0x258>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 800b9f4:	687b      	ldr	r3, [r7, #4]
 800b9f6:	681b      	ldr	r3, [r3, #0]
 800b9f8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800b9fa:	687b      	ldr	r3, [r7, #4]
 800b9fc:	681b      	ldr	r3, [r3, #0]
 800b9fe:	f022 020f 	bic.w	r2, r2, #15
 800ba02:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 800ba04:	687b      	ldr	r3, [r7, #4]
 800ba06:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ba08:	f023 0303 	bic.w	r3, r3, #3
 800ba0c:	f043 0201 	orr.w	r2, r3, #1
 800ba10:	687b      	ldr	r3, [r7, #4]
 800ba12:	655a      	str	r2, [r3, #84]	@ 0x54
 800ba14:	e007      	b.n	800ba26 <HAL_ADC_Init+0x27a>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800ba16:	687b      	ldr	r3, [r7, #4]
 800ba18:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ba1a:	f043 0210 	orr.w	r2, r3, #16
 800ba1e:	687b      	ldr	r3, [r7, #4]
 800ba20:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 800ba22:	2301      	movs	r3, #1
 800ba24:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 800ba26:	7ffb      	ldrb	r3, [r7, #31]
}
 800ba28:	4618      	mov	r0, r3
 800ba2a:	3724      	adds	r7, #36	@ 0x24
 800ba2c:	46bd      	mov	sp, r7
 800ba2e:	bd90      	pop	{r4, r7, pc}
 800ba30:	20000000 	.word	0x20000000
 800ba34:	053e2d63 	.word	0x053e2d63
 800ba38:	50040000 	.word	0x50040000
 800ba3c:	50040100 	.word	0x50040100
 800ba40:	50040200 	.word	0x50040200
 800ba44:	50040300 	.word	0x50040300
 800ba48:	fff0c007 	.word	0xfff0c007

0800ba4c <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 800ba4c:	b580      	push	{r7, lr}
 800ba4e:	b086      	sub	sp, #24
 800ba50:	af00      	add	r7, sp, #0
 800ba52:	60f8      	str	r0, [r7, #12]
 800ba54:	60b9      	str	r1, [r7, #8]
 800ba56:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800ba58:	4853      	ldr	r0, [pc, #332]	@ (800bba8 <HAL_ADC_Start_DMA+0x15c>)
 800ba5a:	f7ff fd9b 	bl	800b594 <LL_ADC_GetMultimode>
 800ba5e:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800ba60:	68fb      	ldr	r3, [r7, #12]
 800ba62:	681b      	ldr	r3, [r3, #0]
 800ba64:	4618      	mov	r0, r3
 800ba66:	f7ff fe67 	bl	800b738 <LL_ADC_REG_IsConversionOngoing>
 800ba6a:	4603      	mov	r3, r0
 800ba6c:	2b00      	cmp	r3, #0
 800ba6e:	f040 8093 	bne.w	800bb98 <HAL_ADC_Start_DMA+0x14c>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 800ba72:	68fb      	ldr	r3, [r7, #12]
 800ba74:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800ba78:	2b01      	cmp	r3, #1
 800ba7a:	d101      	bne.n	800ba80 <HAL_ADC_Start_DMA+0x34>
 800ba7c:	2302      	movs	r3, #2
 800ba7e:	e08e      	b.n	800bb9e <HAL_ADC_Start_DMA+0x152>
 800ba80:	68fb      	ldr	r3, [r7, #12]
 800ba82:	2201      	movs	r2, #1
 800ba84:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

#if defined(ADC_MULTIMODE_SUPPORT)
    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((ADC_IS_INDEPENDENT(hadc) != RESET)
 800ba88:	68fb      	ldr	r3, [r7, #12]
 800ba8a:	681b      	ldr	r3, [r3, #0]
 800ba8c:	4a47      	ldr	r2, [pc, #284]	@ (800bbac <HAL_ADC_Start_DMA+0x160>)
 800ba8e:	4293      	cmp	r3, r2
 800ba90:	d008      	beq.n	800baa4 <HAL_ADC_Start_DMA+0x58>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800ba92:	693b      	ldr	r3, [r7, #16]
 800ba94:	2b00      	cmp	r3, #0
 800ba96:	d005      	beq.n	800baa4 <HAL_ADC_Start_DMA+0x58>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 800ba98:	693b      	ldr	r3, [r7, #16]
 800ba9a:	2b05      	cmp	r3, #5
 800ba9c:	d002      	beq.n	800baa4 <HAL_ADC_Start_DMA+0x58>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 800ba9e:	693b      	ldr	r3, [r7, #16]
 800baa0:	2b09      	cmp	r3, #9
 800baa2:	d172      	bne.n	800bb8a <HAL_ADC_Start_DMA+0x13e>
       )
#endif /* ADC_MULTIMODE_SUPPORT */
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 800baa4:	68f8      	ldr	r0, [r7, #12]
 800baa6:	f000 fda7 	bl	800c5f8 <ADC_Enable>
 800baaa:	4603      	mov	r3, r0
 800baac:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 800baae:	7dfb      	ldrb	r3, [r7, #23]
 800bab0:	2b00      	cmp	r3, #0
 800bab2:	d165      	bne.n	800bb80 <HAL_ADC_Start_DMA+0x134>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 800bab4:	68fb      	ldr	r3, [r7, #12]
 800bab6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800bab8:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 800babc:	f023 0301 	bic.w	r3, r3, #1
 800bac0:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800bac4:	68fb      	ldr	r3, [r7, #12]
 800bac6:	655a      	str	r2, [r3, #84]	@ 0x54

#if defined(ADC_MULTIMODE_SUPPORT)
        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800bac8:	68fb      	ldr	r3, [r7, #12]
 800baca:	681b      	ldr	r3, [r3, #0]
 800bacc:	4a38      	ldr	r2, [pc, #224]	@ (800bbb0 <HAL_ADC_Start_DMA+0x164>)
 800bace:	4293      	cmp	r3, r2
 800bad0:	d002      	beq.n	800bad8 <HAL_ADC_Start_DMA+0x8c>
 800bad2:	68fb      	ldr	r3, [r7, #12]
 800bad4:	681b      	ldr	r3, [r3, #0]
 800bad6:	e000      	b.n	800bada <HAL_ADC_Start_DMA+0x8e>
 800bad8:	4b36      	ldr	r3, [pc, #216]	@ (800bbb4 <HAL_ADC_Start_DMA+0x168>)
 800bada:	68fa      	ldr	r2, [r7, #12]
 800badc:	6812      	ldr	r2, [r2, #0]
 800bade:	4293      	cmp	r3, r2
 800bae0:	d002      	beq.n	800bae8 <HAL_ADC_Start_DMA+0x9c>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800bae2:	693b      	ldr	r3, [r7, #16]
 800bae4:	2b00      	cmp	r3, #0
 800bae6:	d105      	bne.n	800baf4 <HAL_ADC_Start_DMA+0xa8>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800bae8:	68fb      	ldr	r3, [r7, #12]
 800baea:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800baec:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 800baf0:	68fb      	ldr	r3, [r7, #12]
 800baf2:	655a      	str	r2, [r3, #84]	@ 0x54
        }
#endif /* ADC_MULTIMODE_SUPPORT */

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 800baf4:	68fb      	ldr	r3, [r7, #12]
 800baf6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800baf8:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800bafc:	2b00      	cmp	r3, #0
 800bafe:	d006      	beq.n	800bb0e <HAL_ADC_Start_DMA+0xc2>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 800bb00:	68fb      	ldr	r3, [r7, #12]
 800bb02:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800bb04:	f023 0206 	bic.w	r2, r3, #6
 800bb08:	68fb      	ldr	r3, [r7, #12]
 800bb0a:	659a      	str	r2, [r3, #88]	@ 0x58
 800bb0c:	e002      	b.n	800bb14 <HAL_ADC_Start_DMA+0xc8>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 800bb0e:	68fb      	ldr	r3, [r7, #12]
 800bb10:	2200      	movs	r2, #0
 800bb12:	659a      	str	r2, [r3, #88]	@ 0x58
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800bb14:	68fb      	ldr	r3, [r7, #12]
 800bb16:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800bb18:	4a27      	ldr	r2, [pc, #156]	@ (800bbb8 <HAL_ADC_Start_DMA+0x16c>)
 800bb1a:	62da      	str	r2, [r3, #44]	@ 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 800bb1c:	68fb      	ldr	r3, [r7, #12]
 800bb1e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800bb20:	4a26      	ldr	r2, [pc, #152]	@ (800bbbc <HAL_ADC_Start_DMA+0x170>)
 800bb22:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800bb24:	68fb      	ldr	r3, [r7, #12]
 800bb26:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800bb28:	4a25      	ldr	r2, [pc, #148]	@ (800bbc0 <HAL_ADC_Start_DMA+0x174>)
 800bb2a:	635a      	str	r2, [r3, #52]	@ 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 800bb2c:	68fb      	ldr	r3, [r7, #12]
 800bb2e:	681b      	ldr	r3, [r3, #0]
 800bb30:	221c      	movs	r2, #28
 800bb32:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 800bb34:	68fb      	ldr	r3, [r7, #12]
 800bb36:	2200      	movs	r2, #0
 800bb38:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 800bb3c:	68fb      	ldr	r3, [r7, #12]
 800bb3e:	681b      	ldr	r3, [r3, #0]
 800bb40:	685a      	ldr	r2, [r3, #4]
 800bb42:	68fb      	ldr	r3, [r7, #12]
 800bb44:	681b      	ldr	r3, [r3, #0]
 800bb46:	f042 0210 	orr.w	r2, r2, #16
 800bb4a:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 800bb4c:	68fb      	ldr	r3, [r7, #12]
 800bb4e:	681b      	ldr	r3, [r3, #0]
 800bb50:	68da      	ldr	r2, [r3, #12]
 800bb52:	68fb      	ldr	r3, [r7, #12]
 800bb54:	681b      	ldr	r3, [r3, #0]
 800bb56:	f042 0201 	orr.w	r2, r2, #1
 800bb5a:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 800bb5c:	68fb      	ldr	r3, [r7, #12]
 800bb5e:	6cd8      	ldr	r0, [r3, #76]	@ 0x4c
 800bb60:	68fb      	ldr	r3, [r7, #12]
 800bb62:	681b      	ldr	r3, [r3, #0]
 800bb64:	3340      	adds	r3, #64	@ 0x40
 800bb66:	4619      	mov	r1, r3
 800bb68:	68ba      	ldr	r2, [r7, #8]
 800bb6a:	687b      	ldr	r3, [r7, #4]
 800bb6c:	f001 fbb0 	bl	800d2d0 <HAL_DMA_Start_IT>
 800bb70:	4603      	mov	r3, r0
 800bb72:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 800bb74:	68fb      	ldr	r3, [r7, #12]
 800bb76:	681b      	ldr	r3, [r3, #0]
 800bb78:	4618      	mov	r0, r3
 800bb7a:	f7ff fdb5 	bl	800b6e8 <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 800bb7e:	e00d      	b.n	800bb9c <HAL_ADC_Start_DMA+0x150>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 800bb80:	68fb      	ldr	r3, [r7, #12]
 800bb82:	2200      	movs	r2, #0
 800bb84:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
      if (tmp_hal_status == HAL_OK)
 800bb88:	e008      	b.n	800bb9c <HAL_ADC_Start_DMA+0x150>

    }
#if defined(ADC_MULTIMODE_SUPPORT)
    else
    {
      tmp_hal_status = HAL_ERROR;
 800bb8a:	2301      	movs	r3, #1
 800bb8c:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 800bb8e:	68fb      	ldr	r3, [r7, #12]
 800bb90:	2200      	movs	r2, #0
 800bb92:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
 800bb96:	e001      	b.n	800bb9c <HAL_ADC_Start_DMA+0x150>
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 800bb98:	2302      	movs	r3, #2
 800bb9a:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 800bb9c:	7dfb      	ldrb	r3, [r7, #23]
}
 800bb9e:	4618      	mov	r0, r3
 800bba0:	3718      	adds	r7, #24
 800bba2:	46bd      	mov	sp, r7
 800bba4:	bd80      	pop	{r7, pc}
 800bba6:	bf00      	nop
 800bba8:	50040300 	.word	0x50040300
 800bbac:	50040200 	.word	0x50040200
 800bbb0:	50040100 	.word	0x50040100
 800bbb4:	50040000 	.word	0x50040000
 800bbb8:	0800c7c3 	.word	0x0800c7c3
 800bbbc:	0800c89b 	.word	0x0800c89b
 800bbc0:	0800c8b7 	.word	0x0800c8b7

0800bbc4 <HAL_ADC_Stop_DMA>:
  *         For multimode, the dedicated HAL_ADCEx_MultiModeStop_DMA() API must be used.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop_DMA(ADC_HandleTypeDef *hadc)
{
 800bbc4:	b580      	push	{r7, lr}
 800bbc6:	b084      	sub	sp, #16
 800bbc8:	af00      	add	r7, sp, #0
 800bbca:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 800bbcc:	687b      	ldr	r3, [r7, #4]
 800bbce:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800bbd2:	2b01      	cmp	r3, #1
 800bbd4:	d101      	bne.n	800bbda <HAL_ADC_Stop_DMA+0x16>
 800bbd6:	2302      	movs	r3, #2
 800bbd8:	e051      	b.n	800bc7e <HAL_ADC_Stop_DMA+0xba>
 800bbda:	687b      	ldr	r3, [r7, #4]
 800bbdc:	2201      	movs	r2, #1
 800bbde:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* 1. Stop potential ADC group regular conversion on going */
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 800bbe2:	2103      	movs	r1, #3
 800bbe4:	6878      	ldr	r0, [r7, #4]
 800bbe6:	f000 fc4b 	bl	800c480 <ADC_ConversionStop>
 800bbea:	4603      	mov	r3, r0
 800bbec:	73fb      	strb	r3, [r7, #15]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 800bbee:	7bfb      	ldrb	r3, [r7, #15]
 800bbf0:	2b00      	cmp	r3, #0
 800bbf2:	d13f      	bne.n	800bc74 <HAL_ADC_Stop_DMA+0xb0>
  {
    /* Disable ADC DMA (ADC DMA configuration of continuous requests is kept) */
    CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 800bbf4:	687b      	ldr	r3, [r7, #4]
 800bbf6:	681b      	ldr	r3, [r3, #0]
 800bbf8:	68da      	ldr	r2, [r3, #12]
 800bbfa:	687b      	ldr	r3, [r7, #4]
 800bbfc:	681b      	ldr	r3, [r3, #0]
 800bbfe:	f022 0201 	bic.w	r2, r2, #1
 800bc02:	60da      	str	r2, [r3, #12]

    /* Disable the DMA channel (in case of DMA in circular mode or stop       */
    /* while DMA transfer is on going)                                        */
    if (hadc->DMA_Handle->State == HAL_DMA_STATE_BUSY)
 800bc04:	687b      	ldr	r3, [r7, #4]
 800bc06:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800bc08:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 800bc0c:	b2db      	uxtb	r3, r3
 800bc0e:	2b02      	cmp	r3, #2
 800bc10:	d10f      	bne.n	800bc32 <HAL_ADC_Stop_DMA+0x6e>
    {
      tmp_hal_status = HAL_DMA_Abort(hadc->DMA_Handle);
 800bc12:	687b      	ldr	r3, [r7, #4]
 800bc14:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800bc16:	4618      	mov	r0, r3
 800bc18:	f001 fbba 	bl	800d390 <HAL_DMA_Abort>
 800bc1c:	4603      	mov	r3, r0
 800bc1e:	73fb      	strb	r3, [r7, #15]

      /* Check if DMA channel effectively disabled */
      if (tmp_hal_status != HAL_OK)
 800bc20:	7bfb      	ldrb	r3, [r7, #15]
 800bc22:	2b00      	cmp	r3, #0
 800bc24:	d005      	beq.n	800bc32 <HAL_ADC_Stop_DMA+0x6e>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 800bc26:	687b      	ldr	r3, [r7, #4]
 800bc28:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800bc2a:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800bc2e:	687b      	ldr	r3, [r7, #4]
 800bc30:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }

    /* Disable ADC overrun interrupt */
    __HAL_ADC_DISABLE_IT(hadc, ADC_IT_OVR);
 800bc32:	687b      	ldr	r3, [r7, #4]
 800bc34:	681b      	ldr	r3, [r3, #0]
 800bc36:	685a      	ldr	r2, [r3, #4]
 800bc38:	687b      	ldr	r3, [r7, #4]
 800bc3a:	681b      	ldr	r3, [r3, #0]
 800bc3c:	f022 0210 	bic.w	r2, r2, #16
 800bc40:	605a      	str	r2, [r3, #4]

    /* 2. Disable the ADC peripheral */
    /* Update "tmp_hal_status" only if DMA channel disabling passed,          */
    /* to keep in memory a potential failing status.                          */
    if (tmp_hal_status == HAL_OK)
 800bc42:	7bfb      	ldrb	r3, [r7, #15]
 800bc44:	2b00      	cmp	r3, #0
 800bc46:	d105      	bne.n	800bc54 <HAL_ADC_Stop_DMA+0x90>
    {
      tmp_hal_status = ADC_Disable(hadc);
 800bc48:	6878      	ldr	r0, [r7, #4]
 800bc4a:	f000 fd5b 	bl	800c704 <ADC_Disable>
 800bc4e:	4603      	mov	r3, r0
 800bc50:	73fb      	strb	r3, [r7, #15]
 800bc52:	e002      	b.n	800bc5a <HAL_ADC_Stop_DMA+0x96>
    }
    else
    {
      (void)ADC_Disable(hadc);
 800bc54:	6878      	ldr	r0, [r7, #4]
 800bc56:	f000 fd55 	bl	800c704 <ADC_Disable>
    }

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 800bc5a:	7bfb      	ldrb	r3, [r7, #15]
 800bc5c:	2b00      	cmp	r3, #0
 800bc5e:	d109      	bne.n	800bc74 <HAL_ADC_Stop_DMA+0xb0>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 800bc60:	687b      	ldr	r3, [r7, #4]
 800bc62:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800bc64:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 800bc68:	f023 0301 	bic.w	r3, r3, #1
 800bc6c:	f043 0201 	orr.w	r2, r3, #1
 800bc70:	687b      	ldr	r3, [r7, #4]
 800bc72:	655a      	str	r2, [r3, #84]	@ 0x54
    }

  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800bc74:	687b      	ldr	r3, [r7, #4]
 800bc76:	2200      	movs	r2, #0
 800bc78:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 800bc7c:	7bfb      	ldrb	r3, [r7, #15]
}
 800bc7e:	4618      	mov	r0, r3
 800bc80:	3710      	adds	r7, #16
 800bc82:	46bd      	mov	sp, r7
 800bc84:	bd80      	pop	{r7, pc}

0800bc86 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 800bc86:	b480      	push	{r7}
 800bc88:	b083      	sub	sp, #12
 800bc8a:	af00      	add	r7, sp, #0
 800bc8c:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 800bc8e:	bf00      	nop
 800bc90:	370c      	adds	r7, #12
 800bc92:	46bd      	mov	sp, r7
 800bc94:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc98:	4770      	bx	lr
	...

0800bc9c <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 800bc9c:	b580      	push	{r7, lr}
 800bc9e:	b0b6      	sub	sp, #216	@ 0xd8
 800bca0:	af00      	add	r7, sp, #0
 800bca2:	6078      	str	r0, [r7, #4]
 800bca4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800bca6:	2300      	movs	r3, #0
 800bca8:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 800bcac:	2300      	movs	r3, #0
 800bcae:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 800bcb0:	687b      	ldr	r3, [r7, #4]
 800bcb2:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800bcb6:	2b01      	cmp	r3, #1
 800bcb8:	d101      	bne.n	800bcbe <HAL_ADC_ConfigChannel+0x22>
 800bcba:	2302      	movs	r3, #2
 800bcbc:	e3c9      	b.n	800c452 <HAL_ADC_ConfigChannel+0x7b6>
 800bcbe:	687b      	ldr	r3, [r7, #4]
 800bcc0:	2201      	movs	r2, #1
 800bcc2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800bcc6:	687b      	ldr	r3, [r7, #4]
 800bcc8:	681b      	ldr	r3, [r3, #0]
 800bcca:	4618      	mov	r0, r3
 800bccc:	f7ff fd34 	bl	800b738 <LL_ADC_REG_IsConversionOngoing>
 800bcd0:	4603      	mov	r3, r0
 800bcd2:	2b00      	cmp	r3, #0
 800bcd4:	f040 83aa 	bne.w	800c42c <HAL_ADC_ConfigChannel+0x790>
  {
#if !defined (USE_FULL_ASSERT)
    uint32_t config_rank = pConfig->Rank;
 800bcd8:	683b      	ldr	r3, [r7, #0]
 800bcda:	685b      	ldr	r3, [r3, #4]
 800bcdc:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (pConfig->Rank <= 5U)
 800bce0:	683b      	ldr	r3, [r7, #0]
 800bce2:	685b      	ldr	r3, [r3, #4]
 800bce4:	2b05      	cmp	r3, #5
 800bce6:	d824      	bhi.n	800bd32 <HAL_ADC_ConfigChannel+0x96>
    {
      switch (pConfig->Rank)
 800bce8:	683b      	ldr	r3, [r7, #0]
 800bcea:	685b      	ldr	r3, [r3, #4]
 800bcec:	3b02      	subs	r3, #2
 800bcee:	2b03      	cmp	r3, #3
 800bcf0:	d81b      	bhi.n	800bd2a <HAL_ADC_ConfigChannel+0x8e>
 800bcf2:	a201      	add	r2, pc, #4	@ (adr r2, 800bcf8 <HAL_ADC_ConfigChannel+0x5c>)
 800bcf4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bcf8:	0800bd09 	.word	0x0800bd09
 800bcfc:	0800bd11 	.word	0x0800bd11
 800bd00:	0800bd19 	.word	0x0800bd19
 800bd04:	0800bd21 	.word	0x0800bd21
      {
        case 2U:
          config_rank = ADC_REGULAR_RANK_2;
 800bd08:	230c      	movs	r3, #12
 800bd0a:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 800bd0e:	e010      	b.n	800bd32 <HAL_ADC_ConfigChannel+0x96>
        case 3U:
          config_rank = ADC_REGULAR_RANK_3;
 800bd10:	2312      	movs	r3, #18
 800bd12:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 800bd16:	e00c      	b.n	800bd32 <HAL_ADC_ConfigChannel+0x96>
        case 4U:
          config_rank = ADC_REGULAR_RANK_4;
 800bd18:	2318      	movs	r3, #24
 800bd1a:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 800bd1e:	e008      	b.n	800bd32 <HAL_ADC_ConfigChannel+0x96>
        case 5U:
          config_rank = ADC_REGULAR_RANK_5;
 800bd20:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800bd24:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 800bd28:	e003      	b.n	800bd32 <HAL_ADC_ConfigChannel+0x96>
        /* case 1U */
        default:
          config_rank = ADC_REGULAR_RANK_1;
 800bd2a:	2306      	movs	r3, #6
 800bd2c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 800bd30:	bf00      	nop
      }
    }
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, config_rank, pConfig->Channel);
 800bd32:	687b      	ldr	r3, [r7, #4]
 800bd34:	6818      	ldr	r0, [r3, #0]
 800bd36:	683b      	ldr	r3, [r7, #0]
 800bd38:	681b      	ldr	r3, [r3, #0]
 800bd3a:	461a      	mov	r2, r3
 800bd3c:	f8d7 10d0 	ldr.w	r1, [r7, #208]	@ 0xd0
 800bd40:	f7ff fbac 	bl	800b49c <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800bd44:	687b      	ldr	r3, [r7, #4]
 800bd46:	681b      	ldr	r3, [r3, #0]
 800bd48:	4618      	mov	r0, r3
 800bd4a:	f7ff fcf5 	bl	800b738 <LL_ADC_REG_IsConversionOngoing>
 800bd4e:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800bd52:	687b      	ldr	r3, [r7, #4]
 800bd54:	681b      	ldr	r3, [r3, #0]
 800bd56:	4618      	mov	r0, r3
 800bd58:	f7ff fd15 	bl	800b786 <LL_ADC_INJ_IsConversionOngoing>
 800bd5c:	f8c7 00c8 	str.w	r0, [r7, #200]	@ 0xc8
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800bd60:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800bd64:	2b00      	cmp	r3, #0
 800bd66:	f040 81a4 	bne.w	800c0b2 <HAL_ADC_ConfigChannel+0x416>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800bd6a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800bd6e:	2b00      	cmp	r3, #0
 800bd70:	f040 819f 	bne.w	800c0b2 <HAL_ADC_ConfigChannel+0x416>
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 800bd74:	687b      	ldr	r3, [r7, #4]
 800bd76:	6818      	ldr	r0, [r3, #0]
 800bd78:	683b      	ldr	r3, [r7, #0]
 800bd7a:	6819      	ldr	r1, [r3, #0]
 800bd7c:	683b      	ldr	r3, [r7, #0]
 800bd7e:	689b      	ldr	r3, [r3, #8]
 800bd80:	461a      	mov	r2, r3
 800bd82:	f7ff fbb7 	bl	800b4f4 <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 800bd86:	683b      	ldr	r3, [r7, #0]
 800bd88:	695a      	ldr	r2, [r3, #20]
 800bd8a:	687b      	ldr	r3, [r7, #4]
 800bd8c:	681b      	ldr	r3, [r3, #0]
 800bd8e:	68db      	ldr	r3, [r3, #12]
 800bd90:	08db      	lsrs	r3, r3, #3
 800bd92:	f003 0303 	and.w	r3, r3, #3
 800bd96:	005b      	lsls	r3, r3, #1
 800bd98:	fa02 f303 	lsl.w	r3, r2, r3
 800bd9c:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 800bda0:	683b      	ldr	r3, [r7, #0]
 800bda2:	691b      	ldr	r3, [r3, #16]
 800bda4:	2b04      	cmp	r3, #4
 800bda6:	d00a      	beq.n	800bdbe <HAL_ADC_ConfigChannel+0x122>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 800bda8:	687b      	ldr	r3, [r7, #4]
 800bdaa:	6818      	ldr	r0, [r3, #0]
 800bdac:	683b      	ldr	r3, [r7, #0]
 800bdae:	6919      	ldr	r1, [r3, #16]
 800bdb0:	683b      	ldr	r3, [r7, #0]
 800bdb2:	681a      	ldr	r2, [r3, #0]
 800bdb4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800bdb8:	f7ff fb08 	bl	800b3cc <LL_ADC_SetOffset>
 800bdbc:	e179      	b.n	800c0b2 <HAL_ADC_ConfigChannel+0x416>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 800bdbe:	687b      	ldr	r3, [r7, #4]
 800bdc0:	681b      	ldr	r3, [r3, #0]
 800bdc2:	2100      	movs	r1, #0
 800bdc4:	4618      	mov	r0, r3
 800bdc6:	f7ff fb25 	bl	800b414 <LL_ADC_GetOffsetChannel>
 800bdca:	4603      	mov	r3, r0
 800bdcc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800bdd0:	2b00      	cmp	r3, #0
 800bdd2:	d10a      	bne.n	800bdea <HAL_ADC_ConfigChannel+0x14e>
 800bdd4:	687b      	ldr	r3, [r7, #4]
 800bdd6:	681b      	ldr	r3, [r3, #0]
 800bdd8:	2100      	movs	r1, #0
 800bdda:	4618      	mov	r0, r3
 800bddc:	f7ff fb1a 	bl	800b414 <LL_ADC_GetOffsetChannel>
 800bde0:	4603      	mov	r3, r0
 800bde2:	0e9b      	lsrs	r3, r3, #26
 800bde4:	f003 021f 	and.w	r2, r3, #31
 800bde8:	e01e      	b.n	800be28 <HAL_ADC_ConfigChannel+0x18c>
 800bdea:	687b      	ldr	r3, [r7, #4]
 800bdec:	681b      	ldr	r3, [r3, #0]
 800bdee:	2100      	movs	r1, #0
 800bdf0:	4618      	mov	r0, r3
 800bdf2:	f7ff fb0f 	bl	800b414 <LL_ADC_GetOffsetChannel>
 800bdf6:	4603      	mov	r3, r0
 800bdf8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800bdfc:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800be00:	fa93 f3a3 	rbit	r3, r3
 800be04:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800be08:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 800be0c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 800be10:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800be14:	2b00      	cmp	r3, #0
 800be16:	d101      	bne.n	800be1c <HAL_ADC_ConfigChannel+0x180>
  {
    return 32U;
 800be18:	2320      	movs	r3, #32
 800be1a:	e004      	b.n	800be26 <HAL_ADC_ConfigChannel+0x18a>
  }
  return __builtin_clz(value);
 800be1c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800be20:	fab3 f383 	clz	r3, r3
 800be24:	b2db      	uxtb	r3, r3
 800be26:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800be28:	683b      	ldr	r3, [r7, #0]
 800be2a:	681b      	ldr	r3, [r3, #0]
 800be2c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800be30:	2b00      	cmp	r3, #0
 800be32:	d105      	bne.n	800be40 <HAL_ADC_ConfigChannel+0x1a4>
 800be34:	683b      	ldr	r3, [r7, #0]
 800be36:	681b      	ldr	r3, [r3, #0]
 800be38:	0e9b      	lsrs	r3, r3, #26
 800be3a:	f003 031f 	and.w	r3, r3, #31
 800be3e:	e018      	b.n	800be72 <HAL_ADC_ConfigChannel+0x1d6>
 800be40:	683b      	ldr	r3, [r7, #0]
 800be42:	681b      	ldr	r3, [r3, #0]
 800be44:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800be48:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800be4c:	fa93 f3a3 	rbit	r3, r3
 800be50:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  return result;
 800be54:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800be58:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
  if (value == 0U)
 800be5c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 800be60:	2b00      	cmp	r3, #0
 800be62:	d101      	bne.n	800be68 <HAL_ADC_ConfigChannel+0x1cc>
    return 32U;
 800be64:	2320      	movs	r3, #32
 800be66:	e004      	b.n	800be72 <HAL_ADC_ConfigChannel+0x1d6>
  return __builtin_clz(value);
 800be68:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 800be6c:	fab3 f383 	clz	r3, r3
 800be70:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 800be72:	429a      	cmp	r2, r3
 800be74:	d106      	bne.n	800be84 <HAL_ADC_ConfigChannel+0x1e8>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 800be76:	687b      	ldr	r3, [r7, #4]
 800be78:	681b      	ldr	r3, [r3, #0]
 800be7a:	2200      	movs	r2, #0
 800be7c:	2100      	movs	r1, #0
 800be7e:	4618      	mov	r0, r3
 800be80:	f7ff fade 	bl	800b440 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 800be84:	687b      	ldr	r3, [r7, #4]
 800be86:	681b      	ldr	r3, [r3, #0]
 800be88:	2101      	movs	r1, #1
 800be8a:	4618      	mov	r0, r3
 800be8c:	f7ff fac2 	bl	800b414 <LL_ADC_GetOffsetChannel>
 800be90:	4603      	mov	r3, r0
 800be92:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800be96:	2b00      	cmp	r3, #0
 800be98:	d10a      	bne.n	800beb0 <HAL_ADC_ConfigChannel+0x214>
 800be9a:	687b      	ldr	r3, [r7, #4]
 800be9c:	681b      	ldr	r3, [r3, #0]
 800be9e:	2101      	movs	r1, #1
 800bea0:	4618      	mov	r0, r3
 800bea2:	f7ff fab7 	bl	800b414 <LL_ADC_GetOffsetChannel>
 800bea6:	4603      	mov	r3, r0
 800bea8:	0e9b      	lsrs	r3, r3, #26
 800beaa:	f003 021f 	and.w	r2, r3, #31
 800beae:	e01e      	b.n	800beee <HAL_ADC_ConfigChannel+0x252>
 800beb0:	687b      	ldr	r3, [r7, #4]
 800beb2:	681b      	ldr	r3, [r3, #0]
 800beb4:	2101      	movs	r1, #1
 800beb6:	4618      	mov	r0, r3
 800beb8:	f7ff faac 	bl	800b414 <LL_ADC_GetOffsetChannel>
 800bebc:	4603      	mov	r3, r0
 800bebe:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800bec2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800bec6:	fa93 f3a3 	rbit	r3, r3
 800beca:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  return result;
 800bece:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800bed2:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  if (value == 0U)
 800bed6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800beda:	2b00      	cmp	r3, #0
 800bedc:	d101      	bne.n	800bee2 <HAL_ADC_ConfigChannel+0x246>
    return 32U;
 800bede:	2320      	movs	r3, #32
 800bee0:	e004      	b.n	800beec <HAL_ADC_ConfigChannel+0x250>
  return __builtin_clz(value);
 800bee2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800bee6:	fab3 f383 	clz	r3, r3
 800beea:	b2db      	uxtb	r3, r3
 800beec:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800beee:	683b      	ldr	r3, [r7, #0]
 800bef0:	681b      	ldr	r3, [r3, #0]
 800bef2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800bef6:	2b00      	cmp	r3, #0
 800bef8:	d105      	bne.n	800bf06 <HAL_ADC_ConfigChannel+0x26a>
 800befa:	683b      	ldr	r3, [r7, #0]
 800befc:	681b      	ldr	r3, [r3, #0]
 800befe:	0e9b      	lsrs	r3, r3, #26
 800bf00:	f003 031f 	and.w	r3, r3, #31
 800bf04:	e018      	b.n	800bf38 <HAL_ADC_ConfigChannel+0x29c>
 800bf06:	683b      	ldr	r3, [r7, #0]
 800bf08:	681b      	ldr	r3, [r3, #0]
 800bf0a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800bf0e:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800bf12:	fa93 f3a3 	rbit	r3, r3
 800bf16:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  return result;
 800bf1a:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800bf1e:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
  if (value == 0U)
 800bf22:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800bf26:	2b00      	cmp	r3, #0
 800bf28:	d101      	bne.n	800bf2e <HAL_ADC_ConfigChannel+0x292>
    return 32U;
 800bf2a:	2320      	movs	r3, #32
 800bf2c:	e004      	b.n	800bf38 <HAL_ADC_ConfigChannel+0x29c>
  return __builtin_clz(value);
 800bf2e:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800bf32:	fab3 f383 	clz	r3, r3
 800bf36:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 800bf38:	429a      	cmp	r2, r3
 800bf3a:	d106      	bne.n	800bf4a <HAL_ADC_ConfigChannel+0x2ae>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 800bf3c:	687b      	ldr	r3, [r7, #4]
 800bf3e:	681b      	ldr	r3, [r3, #0]
 800bf40:	2200      	movs	r2, #0
 800bf42:	2101      	movs	r1, #1
 800bf44:	4618      	mov	r0, r3
 800bf46:	f7ff fa7b 	bl	800b440 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 800bf4a:	687b      	ldr	r3, [r7, #4]
 800bf4c:	681b      	ldr	r3, [r3, #0]
 800bf4e:	2102      	movs	r1, #2
 800bf50:	4618      	mov	r0, r3
 800bf52:	f7ff fa5f 	bl	800b414 <LL_ADC_GetOffsetChannel>
 800bf56:	4603      	mov	r3, r0
 800bf58:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800bf5c:	2b00      	cmp	r3, #0
 800bf5e:	d10a      	bne.n	800bf76 <HAL_ADC_ConfigChannel+0x2da>
 800bf60:	687b      	ldr	r3, [r7, #4]
 800bf62:	681b      	ldr	r3, [r3, #0]
 800bf64:	2102      	movs	r1, #2
 800bf66:	4618      	mov	r0, r3
 800bf68:	f7ff fa54 	bl	800b414 <LL_ADC_GetOffsetChannel>
 800bf6c:	4603      	mov	r3, r0
 800bf6e:	0e9b      	lsrs	r3, r3, #26
 800bf70:	f003 021f 	and.w	r2, r3, #31
 800bf74:	e01e      	b.n	800bfb4 <HAL_ADC_ConfigChannel+0x318>
 800bf76:	687b      	ldr	r3, [r7, #4]
 800bf78:	681b      	ldr	r3, [r3, #0]
 800bf7a:	2102      	movs	r1, #2
 800bf7c:	4618      	mov	r0, r3
 800bf7e:	f7ff fa49 	bl	800b414 <LL_ADC_GetOffsetChannel>
 800bf82:	4603      	mov	r3, r0
 800bf84:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800bf88:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800bf8c:	fa93 f3a3 	rbit	r3, r3
 800bf90:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  return result;
 800bf94:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800bf98:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  if (value == 0U)
 800bf9c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800bfa0:	2b00      	cmp	r3, #0
 800bfa2:	d101      	bne.n	800bfa8 <HAL_ADC_ConfigChannel+0x30c>
    return 32U;
 800bfa4:	2320      	movs	r3, #32
 800bfa6:	e004      	b.n	800bfb2 <HAL_ADC_ConfigChannel+0x316>
  return __builtin_clz(value);
 800bfa8:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800bfac:	fab3 f383 	clz	r3, r3
 800bfb0:	b2db      	uxtb	r3, r3
 800bfb2:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800bfb4:	683b      	ldr	r3, [r7, #0]
 800bfb6:	681b      	ldr	r3, [r3, #0]
 800bfb8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800bfbc:	2b00      	cmp	r3, #0
 800bfbe:	d105      	bne.n	800bfcc <HAL_ADC_ConfigChannel+0x330>
 800bfc0:	683b      	ldr	r3, [r7, #0]
 800bfc2:	681b      	ldr	r3, [r3, #0]
 800bfc4:	0e9b      	lsrs	r3, r3, #26
 800bfc6:	f003 031f 	and.w	r3, r3, #31
 800bfca:	e014      	b.n	800bff6 <HAL_ADC_ConfigChannel+0x35a>
 800bfcc:	683b      	ldr	r3, [r7, #0]
 800bfce:	681b      	ldr	r3, [r3, #0]
 800bfd0:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800bfd2:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800bfd4:	fa93 f3a3 	rbit	r3, r3
 800bfd8:	67bb      	str	r3, [r7, #120]	@ 0x78
  return result;
 800bfda:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800bfdc:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  if (value == 0U)
 800bfe0:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800bfe4:	2b00      	cmp	r3, #0
 800bfe6:	d101      	bne.n	800bfec <HAL_ADC_ConfigChannel+0x350>
    return 32U;
 800bfe8:	2320      	movs	r3, #32
 800bfea:	e004      	b.n	800bff6 <HAL_ADC_ConfigChannel+0x35a>
  return __builtin_clz(value);
 800bfec:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800bff0:	fab3 f383 	clz	r3, r3
 800bff4:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 800bff6:	429a      	cmp	r2, r3
 800bff8:	d106      	bne.n	800c008 <HAL_ADC_ConfigChannel+0x36c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 800bffa:	687b      	ldr	r3, [r7, #4]
 800bffc:	681b      	ldr	r3, [r3, #0]
 800bffe:	2200      	movs	r2, #0
 800c000:	2102      	movs	r1, #2
 800c002:	4618      	mov	r0, r3
 800c004:	f7ff fa1c 	bl	800b440 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800c008:	687b      	ldr	r3, [r7, #4]
 800c00a:	681b      	ldr	r3, [r3, #0]
 800c00c:	2103      	movs	r1, #3
 800c00e:	4618      	mov	r0, r3
 800c010:	f7ff fa00 	bl	800b414 <LL_ADC_GetOffsetChannel>
 800c014:	4603      	mov	r3, r0
 800c016:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800c01a:	2b00      	cmp	r3, #0
 800c01c:	d10a      	bne.n	800c034 <HAL_ADC_ConfigChannel+0x398>
 800c01e:	687b      	ldr	r3, [r7, #4]
 800c020:	681b      	ldr	r3, [r3, #0]
 800c022:	2103      	movs	r1, #3
 800c024:	4618      	mov	r0, r3
 800c026:	f7ff f9f5 	bl	800b414 <LL_ADC_GetOffsetChannel>
 800c02a:	4603      	mov	r3, r0
 800c02c:	0e9b      	lsrs	r3, r3, #26
 800c02e:	f003 021f 	and.w	r2, r3, #31
 800c032:	e017      	b.n	800c064 <HAL_ADC_ConfigChannel+0x3c8>
 800c034:	687b      	ldr	r3, [r7, #4]
 800c036:	681b      	ldr	r3, [r3, #0]
 800c038:	2103      	movs	r1, #3
 800c03a:	4618      	mov	r0, r3
 800c03c:	f7ff f9ea 	bl	800b414 <LL_ADC_GetOffsetChannel>
 800c040:	4603      	mov	r3, r0
 800c042:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800c044:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800c046:	fa93 f3a3 	rbit	r3, r3
 800c04a:	66fb      	str	r3, [r7, #108]	@ 0x6c
  return result;
 800c04c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800c04e:	677b      	str	r3, [r7, #116]	@ 0x74
  if (value == 0U)
 800c050:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800c052:	2b00      	cmp	r3, #0
 800c054:	d101      	bne.n	800c05a <HAL_ADC_ConfigChannel+0x3be>
    return 32U;
 800c056:	2320      	movs	r3, #32
 800c058:	e003      	b.n	800c062 <HAL_ADC_ConfigChannel+0x3c6>
  return __builtin_clz(value);
 800c05a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800c05c:	fab3 f383 	clz	r3, r3
 800c060:	b2db      	uxtb	r3, r3
 800c062:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800c064:	683b      	ldr	r3, [r7, #0]
 800c066:	681b      	ldr	r3, [r3, #0]
 800c068:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800c06c:	2b00      	cmp	r3, #0
 800c06e:	d105      	bne.n	800c07c <HAL_ADC_ConfigChannel+0x3e0>
 800c070:	683b      	ldr	r3, [r7, #0]
 800c072:	681b      	ldr	r3, [r3, #0]
 800c074:	0e9b      	lsrs	r3, r3, #26
 800c076:	f003 031f 	and.w	r3, r3, #31
 800c07a:	e011      	b.n	800c0a0 <HAL_ADC_ConfigChannel+0x404>
 800c07c:	683b      	ldr	r3, [r7, #0]
 800c07e:	681b      	ldr	r3, [r3, #0]
 800c080:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800c082:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800c084:	fa93 f3a3 	rbit	r3, r3
 800c088:	663b      	str	r3, [r7, #96]	@ 0x60
  return result;
 800c08a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800c08c:	66bb      	str	r3, [r7, #104]	@ 0x68
  if (value == 0U)
 800c08e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800c090:	2b00      	cmp	r3, #0
 800c092:	d101      	bne.n	800c098 <HAL_ADC_ConfigChannel+0x3fc>
    return 32U;
 800c094:	2320      	movs	r3, #32
 800c096:	e003      	b.n	800c0a0 <HAL_ADC_ConfigChannel+0x404>
  return __builtin_clz(value);
 800c098:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800c09a:	fab3 f383 	clz	r3, r3
 800c09e:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800c0a0:	429a      	cmp	r2, r3
 800c0a2:	d106      	bne.n	800c0b2 <HAL_ADC_ConfigChannel+0x416>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 800c0a4:	687b      	ldr	r3, [r7, #4]
 800c0a6:	681b      	ldr	r3, [r3, #0]
 800c0a8:	2200      	movs	r2, #0
 800c0aa:	2103      	movs	r1, #3
 800c0ac:	4618      	mov	r0, r3
 800c0ae:	f7ff f9c7 	bl	800b440 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800c0b2:	687b      	ldr	r3, [r7, #4]
 800c0b4:	681b      	ldr	r3, [r3, #0]
 800c0b6:	4618      	mov	r0, r3
 800c0b8:	f7ff faf0 	bl	800b69c <LL_ADC_IsEnabled>
 800c0bc:	4603      	mov	r3, r0
 800c0be:	2b00      	cmp	r3, #0
 800c0c0:	f040 8140 	bne.w	800c344 <HAL_ADC_ConfigChannel+0x6a8>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 800c0c4:	687b      	ldr	r3, [r7, #4]
 800c0c6:	6818      	ldr	r0, [r3, #0]
 800c0c8:	683b      	ldr	r3, [r7, #0]
 800c0ca:	6819      	ldr	r1, [r3, #0]
 800c0cc:	683b      	ldr	r3, [r7, #0]
 800c0ce:	68db      	ldr	r3, [r3, #12]
 800c0d0:	461a      	mov	r2, r3
 800c0d2:	f7ff fa3b 	bl	800b54c <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 800c0d6:	683b      	ldr	r3, [r7, #0]
 800c0d8:	68db      	ldr	r3, [r3, #12]
 800c0da:	4a8f      	ldr	r2, [pc, #572]	@ (800c318 <HAL_ADC_ConfigChannel+0x67c>)
 800c0dc:	4293      	cmp	r3, r2
 800c0de:	f040 8131 	bne.w	800c344 <HAL_ADC_ConfigChannel+0x6a8>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800c0e2:	687b      	ldr	r3, [r7, #4]
 800c0e4:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 800c0e6:	683b      	ldr	r3, [r7, #0]
 800c0e8:	681b      	ldr	r3, [r3, #0]
 800c0ea:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800c0ee:	2b00      	cmp	r3, #0
 800c0f0:	d10b      	bne.n	800c10a <HAL_ADC_ConfigChannel+0x46e>
 800c0f2:	683b      	ldr	r3, [r7, #0]
 800c0f4:	681b      	ldr	r3, [r3, #0]
 800c0f6:	0e9b      	lsrs	r3, r3, #26
 800c0f8:	3301      	adds	r3, #1
 800c0fa:	f003 031f 	and.w	r3, r3, #31
 800c0fe:	2b09      	cmp	r3, #9
 800c100:	bf94      	ite	ls
 800c102:	2301      	movls	r3, #1
 800c104:	2300      	movhi	r3, #0
 800c106:	b2db      	uxtb	r3, r3
 800c108:	e019      	b.n	800c13e <HAL_ADC_ConfigChannel+0x4a2>
 800c10a:	683b      	ldr	r3, [r7, #0]
 800c10c:	681b      	ldr	r3, [r3, #0]
 800c10e:	65bb      	str	r3, [r7, #88]	@ 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800c110:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800c112:	fa93 f3a3 	rbit	r3, r3
 800c116:	657b      	str	r3, [r7, #84]	@ 0x54
  return result;
 800c118:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800c11a:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (value == 0U)
 800c11c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800c11e:	2b00      	cmp	r3, #0
 800c120:	d101      	bne.n	800c126 <HAL_ADC_ConfigChannel+0x48a>
    return 32U;
 800c122:	2320      	movs	r3, #32
 800c124:	e003      	b.n	800c12e <HAL_ADC_ConfigChannel+0x492>
  return __builtin_clz(value);
 800c126:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800c128:	fab3 f383 	clz	r3, r3
 800c12c:	b2db      	uxtb	r3, r3
 800c12e:	3301      	adds	r3, #1
 800c130:	f003 031f 	and.w	r3, r3, #31
 800c134:	2b09      	cmp	r3, #9
 800c136:	bf94      	ite	ls
 800c138:	2301      	movls	r3, #1
 800c13a:	2300      	movhi	r3, #0
 800c13c:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800c13e:	2b00      	cmp	r3, #0
 800c140:	d079      	beq.n	800c236 <HAL_ADC_ConfigChannel+0x59a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 800c142:	683b      	ldr	r3, [r7, #0]
 800c144:	681b      	ldr	r3, [r3, #0]
 800c146:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800c14a:	2b00      	cmp	r3, #0
 800c14c:	d107      	bne.n	800c15e <HAL_ADC_ConfigChannel+0x4c2>
 800c14e:	683b      	ldr	r3, [r7, #0]
 800c150:	681b      	ldr	r3, [r3, #0]
 800c152:	0e9b      	lsrs	r3, r3, #26
 800c154:	3301      	adds	r3, #1
 800c156:	069b      	lsls	r3, r3, #26
 800c158:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800c15c:	e015      	b.n	800c18a <HAL_ADC_ConfigChannel+0x4ee>
 800c15e:	683b      	ldr	r3, [r7, #0]
 800c160:	681b      	ldr	r3, [r3, #0]
 800c162:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800c164:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800c166:	fa93 f3a3 	rbit	r3, r3
 800c16a:	64bb      	str	r3, [r7, #72]	@ 0x48
  return result;
 800c16c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800c16e:	653b      	str	r3, [r7, #80]	@ 0x50
  if (value == 0U)
 800c170:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c172:	2b00      	cmp	r3, #0
 800c174:	d101      	bne.n	800c17a <HAL_ADC_ConfigChannel+0x4de>
    return 32U;
 800c176:	2320      	movs	r3, #32
 800c178:	e003      	b.n	800c182 <HAL_ADC_ConfigChannel+0x4e6>
  return __builtin_clz(value);
 800c17a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c17c:	fab3 f383 	clz	r3, r3
 800c180:	b2db      	uxtb	r3, r3
 800c182:	3301      	adds	r3, #1
 800c184:	069b      	lsls	r3, r3, #26
 800c186:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800c18a:	683b      	ldr	r3, [r7, #0]
 800c18c:	681b      	ldr	r3, [r3, #0]
 800c18e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800c192:	2b00      	cmp	r3, #0
 800c194:	d109      	bne.n	800c1aa <HAL_ADC_ConfigChannel+0x50e>
 800c196:	683b      	ldr	r3, [r7, #0]
 800c198:	681b      	ldr	r3, [r3, #0]
 800c19a:	0e9b      	lsrs	r3, r3, #26
 800c19c:	3301      	adds	r3, #1
 800c19e:	f003 031f 	and.w	r3, r3, #31
 800c1a2:	2101      	movs	r1, #1
 800c1a4:	fa01 f303 	lsl.w	r3, r1, r3
 800c1a8:	e017      	b.n	800c1da <HAL_ADC_ConfigChannel+0x53e>
 800c1aa:	683b      	ldr	r3, [r7, #0]
 800c1ac:	681b      	ldr	r3, [r3, #0]
 800c1ae:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800c1b0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800c1b2:	fa93 f3a3 	rbit	r3, r3
 800c1b6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return result;
 800c1b8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c1ba:	647b      	str	r3, [r7, #68]	@ 0x44
  if (value == 0U)
 800c1bc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800c1be:	2b00      	cmp	r3, #0
 800c1c0:	d101      	bne.n	800c1c6 <HAL_ADC_ConfigChannel+0x52a>
    return 32U;
 800c1c2:	2320      	movs	r3, #32
 800c1c4:	e003      	b.n	800c1ce <HAL_ADC_ConfigChannel+0x532>
  return __builtin_clz(value);
 800c1c6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800c1c8:	fab3 f383 	clz	r3, r3
 800c1cc:	b2db      	uxtb	r3, r3
 800c1ce:	3301      	adds	r3, #1
 800c1d0:	f003 031f 	and.w	r3, r3, #31
 800c1d4:	2101      	movs	r1, #1
 800c1d6:	fa01 f303 	lsl.w	r3, r1, r3
 800c1da:	ea42 0103 	orr.w	r1, r2, r3
 800c1de:	683b      	ldr	r3, [r7, #0]
 800c1e0:	681b      	ldr	r3, [r3, #0]
 800c1e2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800c1e6:	2b00      	cmp	r3, #0
 800c1e8:	d10a      	bne.n	800c200 <HAL_ADC_ConfigChannel+0x564>
 800c1ea:	683b      	ldr	r3, [r7, #0]
 800c1ec:	681b      	ldr	r3, [r3, #0]
 800c1ee:	0e9b      	lsrs	r3, r3, #26
 800c1f0:	3301      	adds	r3, #1
 800c1f2:	f003 021f 	and.w	r2, r3, #31
 800c1f6:	4613      	mov	r3, r2
 800c1f8:	005b      	lsls	r3, r3, #1
 800c1fa:	4413      	add	r3, r2
 800c1fc:	051b      	lsls	r3, r3, #20
 800c1fe:	e018      	b.n	800c232 <HAL_ADC_ConfigChannel+0x596>
 800c200:	683b      	ldr	r3, [r7, #0]
 800c202:	681b      	ldr	r3, [r3, #0]
 800c204:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800c206:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c208:	fa93 f3a3 	rbit	r3, r3
 800c20c:	633b      	str	r3, [r7, #48]	@ 0x30
  return result;
 800c20e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c210:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (value == 0U)
 800c212:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c214:	2b00      	cmp	r3, #0
 800c216:	d101      	bne.n	800c21c <HAL_ADC_ConfigChannel+0x580>
    return 32U;
 800c218:	2320      	movs	r3, #32
 800c21a:	e003      	b.n	800c224 <HAL_ADC_ConfigChannel+0x588>
  return __builtin_clz(value);
 800c21c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c21e:	fab3 f383 	clz	r3, r3
 800c222:	b2db      	uxtb	r3, r3
 800c224:	3301      	adds	r3, #1
 800c226:	f003 021f 	and.w	r2, r3, #31
 800c22a:	4613      	mov	r3, r2
 800c22c:	005b      	lsls	r3, r3, #1
 800c22e:	4413      	add	r3, r2
 800c230:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800c232:	430b      	orrs	r3, r1
 800c234:	e081      	b.n	800c33a <HAL_ADC_ConfigChannel+0x69e>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 800c236:	683b      	ldr	r3, [r7, #0]
 800c238:	681b      	ldr	r3, [r3, #0]
 800c23a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800c23e:	2b00      	cmp	r3, #0
 800c240:	d107      	bne.n	800c252 <HAL_ADC_ConfigChannel+0x5b6>
 800c242:	683b      	ldr	r3, [r7, #0]
 800c244:	681b      	ldr	r3, [r3, #0]
 800c246:	0e9b      	lsrs	r3, r3, #26
 800c248:	3301      	adds	r3, #1
 800c24a:	069b      	lsls	r3, r3, #26
 800c24c:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800c250:	e015      	b.n	800c27e <HAL_ADC_ConfigChannel+0x5e2>
 800c252:	683b      	ldr	r3, [r7, #0]
 800c254:	681b      	ldr	r3, [r3, #0]
 800c256:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800c258:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c25a:	fa93 f3a3 	rbit	r3, r3
 800c25e:	627b      	str	r3, [r7, #36]	@ 0x24
  return result;
 800c260:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c262:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (value == 0U)
 800c264:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c266:	2b00      	cmp	r3, #0
 800c268:	d101      	bne.n	800c26e <HAL_ADC_ConfigChannel+0x5d2>
    return 32U;
 800c26a:	2320      	movs	r3, #32
 800c26c:	e003      	b.n	800c276 <HAL_ADC_ConfigChannel+0x5da>
  return __builtin_clz(value);
 800c26e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c270:	fab3 f383 	clz	r3, r3
 800c274:	b2db      	uxtb	r3, r3
 800c276:	3301      	adds	r3, #1
 800c278:	069b      	lsls	r3, r3, #26
 800c27a:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800c27e:	683b      	ldr	r3, [r7, #0]
 800c280:	681b      	ldr	r3, [r3, #0]
 800c282:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800c286:	2b00      	cmp	r3, #0
 800c288:	d109      	bne.n	800c29e <HAL_ADC_ConfigChannel+0x602>
 800c28a:	683b      	ldr	r3, [r7, #0]
 800c28c:	681b      	ldr	r3, [r3, #0]
 800c28e:	0e9b      	lsrs	r3, r3, #26
 800c290:	3301      	adds	r3, #1
 800c292:	f003 031f 	and.w	r3, r3, #31
 800c296:	2101      	movs	r1, #1
 800c298:	fa01 f303 	lsl.w	r3, r1, r3
 800c29c:	e017      	b.n	800c2ce <HAL_ADC_ConfigChannel+0x632>
 800c29e:	683b      	ldr	r3, [r7, #0]
 800c2a0:	681b      	ldr	r3, [r3, #0]
 800c2a2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800c2a4:	69fb      	ldr	r3, [r7, #28]
 800c2a6:	fa93 f3a3 	rbit	r3, r3
 800c2aa:	61bb      	str	r3, [r7, #24]
  return result;
 800c2ac:	69bb      	ldr	r3, [r7, #24]
 800c2ae:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 800c2b0:	6a3b      	ldr	r3, [r7, #32]
 800c2b2:	2b00      	cmp	r3, #0
 800c2b4:	d101      	bne.n	800c2ba <HAL_ADC_ConfigChannel+0x61e>
    return 32U;
 800c2b6:	2320      	movs	r3, #32
 800c2b8:	e003      	b.n	800c2c2 <HAL_ADC_ConfigChannel+0x626>
  return __builtin_clz(value);
 800c2ba:	6a3b      	ldr	r3, [r7, #32]
 800c2bc:	fab3 f383 	clz	r3, r3
 800c2c0:	b2db      	uxtb	r3, r3
 800c2c2:	3301      	adds	r3, #1
 800c2c4:	f003 031f 	and.w	r3, r3, #31
 800c2c8:	2101      	movs	r1, #1
 800c2ca:	fa01 f303 	lsl.w	r3, r1, r3
 800c2ce:	ea42 0103 	orr.w	r1, r2, r3
 800c2d2:	683b      	ldr	r3, [r7, #0]
 800c2d4:	681b      	ldr	r3, [r3, #0]
 800c2d6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800c2da:	2b00      	cmp	r3, #0
 800c2dc:	d10d      	bne.n	800c2fa <HAL_ADC_ConfigChannel+0x65e>
 800c2de:	683b      	ldr	r3, [r7, #0]
 800c2e0:	681b      	ldr	r3, [r3, #0]
 800c2e2:	0e9b      	lsrs	r3, r3, #26
 800c2e4:	3301      	adds	r3, #1
 800c2e6:	f003 021f 	and.w	r2, r3, #31
 800c2ea:	4613      	mov	r3, r2
 800c2ec:	005b      	lsls	r3, r3, #1
 800c2ee:	4413      	add	r3, r2
 800c2f0:	3b1e      	subs	r3, #30
 800c2f2:	051b      	lsls	r3, r3, #20
 800c2f4:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800c2f8:	e01e      	b.n	800c338 <HAL_ADC_ConfigChannel+0x69c>
 800c2fa:	683b      	ldr	r3, [r7, #0]
 800c2fc:	681b      	ldr	r3, [r3, #0]
 800c2fe:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800c300:	693b      	ldr	r3, [r7, #16]
 800c302:	fa93 f3a3 	rbit	r3, r3
 800c306:	60fb      	str	r3, [r7, #12]
  return result;
 800c308:	68fb      	ldr	r3, [r7, #12]
 800c30a:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 800c30c:	697b      	ldr	r3, [r7, #20]
 800c30e:	2b00      	cmp	r3, #0
 800c310:	d104      	bne.n	800c31c <HAL_ADC_ConfigChannel+0x680>
    return 32U;
 800c312:	2320      	movs	r3, #32
 800c314:	e006      	b.n	800c324 <HAL_ADC_ConfigChannel+0x688>
 800c316:	bf00      	nop
 800c318:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 800c31c:	697b      	ldr	r3, [r7, #20]
 800c31e:	fab3 f383 	clz	r3, r3
 800c322:	b2db      	uxtb	r3, r3
 800c324:	3301      	adds	r3, #1
 800c326:	f003 021f 	and.w	r2, r3, #31
 800c32a:	4613      	mov	r3, r2
 800c32c:	005b      	lsls	r3, r3, #1
 800c32e:	4413      	add	r3, r2
 800c330:	3b1e      	subs	r3, #30
 800c332:	051b      	lsls	r3, r3, #20
 800c334:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800c338:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 800c33a:	683a      	ldr	r2, [r7, #0]
 800c33c:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800c33e:	4619      	mov	r1, r3
 800c340:	f7ff f8d8 	bl	800b4f4 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 800c344:	683b      	ldr	r3, [r7, #0]
 800c346:	681a      	ldr	r2, [r3, #0]
 800c348:	4b44      	ldr	r3, [pc, #272]	@ (800c45c <HAL_ADC_ConfigChannel+0x7c0>)
 800c34a:	4013      	ands	r3, r2
 800c34c:	2b00      	cmp	r3, #0
 800c34e:	d07a      	beq.n	800c446 <HAL_ADC_ConfigChannel+0x7aa>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800c350:	4843      	ldr	r0, [pc, #268]	@ (800c460 <HAL_ADC_ConfigChannel+0x7c4>)
 800c352:	f7ff f82d 	bl	800b3b0 <LL_ADC_GetCommonPathInternalCh>
 800c356:	f8c7 00c0 	str.w	r0, [r7, #192]	@ 0xc0

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800c35a:	683b      	ldr	r3, [r7, #0]
 800c35c:	681b      	ldr	r3, [r3, #0]
 800c35e:	4a41      	ldr	r2, [pc, #260]	@ (800c464 <HAL_ADC_ConfigChannel+0x7c8>)
 800c360:	4293      	cmp	r3, r2
 800c362:	d12c      	bne.n	800c3be <HAL_ADC_ConfigChannel+0x722>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 800c364:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800c368:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800c36c:	2b00      	cmp	r3, #0
 800c36e:	d126      	bne.n	800c3be <HAL_ADC_ConfigChannel+0x722>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800c370:	687b      	ldr	r3, [r7, #4]
 800c372:	681b      	ldr	r3, [r3, #0]
 800c374:	4a3c      	ldr	r2, [pc, #240]	@ (800c468 <HAL_ADC_ConfigChannel+0x7cc>)
 800c376:	4293      	cmp	r3, r2
 800c378:	d004      	beq.n	800c384 <HAL_ADC_ConfigChannel+0x6e8>
 800c37a:	687b      	ldr	r3, [r7, #4]
 800c37c:	681b      	ldr	r3, [r3, #0]
 800c37e:	4a3b      	ldr	r2, [pc, #236]	@ (800c46c <HAL_ADC_ConfigChannel+0x7d0>)
 800c380:	4293      	cmp	r3, r2
 800c382:	d15d      	bne.n	800c440 <HAL_ADC_ConfigChannel+0x7a4>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800c384:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800c388:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800c38c:	4619      	mov	r1, r3
 800c38e:	4834      	ldr	r0, [pc, #208]	@ (800c460 <HAL_ADC_ConfigChannel+0x7c4>)
 800c390:	f7fe fffb 	bl	800b38a <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800c394:	4b36      	ldr	r3, [pc, #216]	@ (800c470 <HAL_ADC_ConfigChannel+0x7d4>)
 800c396:	681b      	ldr	r3, [r3, #0]
 800c398:	099b      	lsrs	r3, r3, #6
 800c39a:	4a36      	ldr	r2, [pc, #216]	@ (800c474 <HAL_ADC_ConfigChannel+0x7d8>)
 800c39c:	fba2 2303 	umull	r2, r3, r2, r3
 800c3a0:	099b      	lsrs	r3, r3, #6
 800c3a2:	1c5a      	adds	r2, r3, #1
 800c3a4:	4613      	mov	r3, r2
 800c3a6:	005b      	lsls	r3, r3, #1
 800c3a8:	4413      	add	r3, r2
 800c3aa:	009b      	lsls	r3, r3, #2
 800c3ac:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 800c3ae:	e002      	b.n	800c3b6 <HAL_ADC_ConfigChannel+0x71a>
          {
            wait_loop_index--;
 800c3b0:	68bb      	ldr	r3, [r7, #8]
 800c3b2:	3b01      	subs	r3, #1
 800c3b4:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 800c3b6:	68bb      	ldr	r3, [r7, #8]
 800c3b8:	2b00      	cmp	r3, #0
 800c3ba:	d1f9      	bne.n	800c3b0 <HAL_ADC_ConfigChannel+0x714>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800c3bc:	e040      	b.n	800c440 <HAL_ADC_ConfigChannel+0x7a4>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 800c3be:	683b      	ldr	r3, [r7, #0]
 800c3c0:	681b      	ldr	r3, [r3, #0]
 800c3c2:	4a2d      	ldr	r2, [pc, #180]	@ (800c478 <HAL_ADC_ConfigChannel+0x7dc>)
 800c3c4:	4293      	cmp	r3, r2
 800c3c6:	d118      	bne.n	800c3fa <HAL_ADC_ConfigChannel+0x75e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 800c3c8:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800c3cc:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800c3d0:	2b00      	cmp	r3, #0
 800c3d2:	d112      	bne.n	800c3fa <HAL_ADC_ConfigChannel+0x75e>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800c3d4:	687b      	ldr	r3, [r7, #4]
 800c3d6:	681b      	ldr	r3, [r3, #0]
 800c3d8:	4a23      	ldr	r2, [pc, #140]	@ (800c468 <HAL_ADC_ConfigChannel+0x7cc>)
 800c3da:	4293      	cmp	r3, r2
 800c3dc:	d004      	beq.n	800c3e8 <HAL_ADC_ConfigChannel+0x74c>
 800c3de:	687b      	ldr	r3, [r7, #4]
 800c3e0:	681b      	ldr	r3, [r3, #0]
 800c3e2:	4a22      	ldr	r2, [pc, #136]	@ (800c46c <HAL_ADC_ConfigChannel+0x7d0>)
 800c3e4:	4293      	cmp	r3, r2
 800c3e6:	d12d      	bne.n	800c444 <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800c3e8:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800c3ec:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800c3f0:	4619      	mov	r1, r3
 800c3f2:	481b      	ldr	r0, [pc, #108]	@ (800c460 <HAL_ADC_ConfigChannel+0x7c4>)
 800c3f4:	f7fe ffc9 	bl	800b38a <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800c3f8:	e024      	b.n	800c444 <HAL_ADC_ConfigChannel+0x7a8>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 800c3fa:	683b      	ldr	r3, [r7, #0]
 800c3fc:	681b      	ldr	r3, [r3, #0]
 800c3fe:	4a1f      	ldr	r2, [pc, #124]	@ (800c47c <HAL_ADC_ConfigChannel+0x7e0>)
 800c400:	4293      	cmp	r3, r2
 800c402:	d120      	bne.n	800c446 <HAL_ADC_ConfigChannel+0x7aa>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 800c404:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800c408:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800c40c:	2b00      	cmp	r3, #0
 800c40e:	d11a      	bne.n	800c446 <HAL_ADC_ConfigChannel+0x7aa>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 800c410:	687b      	ldr	r3, [r7, #4]
 800c412:	681b      	ldr	r3, [r3, #0]
 800c414:	4a14      	ldr	r2, [pc, #80]	@ (800c468 <HAL_ADC_ConfigChannel+0x7cc>)
 800c416:	4293      	cmp	r3, r2
 800c418:	d115      	bne.n	800c446 <HAL_ADC_ConfigChannel+0x7aa>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800c41a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800c41e:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800c422:	4619      	mov	r1, r3
 800c424:	480e      	ldr	r0, [pc, #56]	@ (800c460 <HAL_ADC_ConfigChannel+0x7c4>)
 800c426:	f7fe ffb0 	bl	800b38a <LL_ADC_SetCommonPathInternalCh>
 800c42a:	e00c      	b.n	800c446 <HAL_ADC_ConfigChannel+0x7aa>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800c42c:	687b      	ldr	r3, [r7, #4]
 800c42e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c430:	f043 0220 	orr.w	r2, r3, #32
 800c434:	687b      	ldr	r3, [r7, #4]
 800c436:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 800c438:	2301      	movs	r3, #1
 800c43a:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
 800c43e:	e002      	b.n	800c446 <HAL_ADC_ConfigChannel+0x7aa>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800c440:	bf00      	nop
 800c442:	e000      	b.n	800c446 <HAL_ADC_ConfigChannel+0x7aa>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800c444:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800c446:	687b      	ldr	r3, [r7, #4]
 800c448:	2200      	movs	r2, #0
 800c44a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 800c44e:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 800c452:	4618      	mov	r0, r3
 800c454:	37d8      	adds	r7, #216	@ 0xd8
 800c456:	46bd      	mov	sp, r7
 800c458:	bd80      	pop	{r7, pc}
 800c45a:	bf00      	nop
 800c45c:	80080000 	.word	0x80080000
 800c460:	50040300 	.word	0x50040300
 800c464:	c7520000 	.word	0xc7520000
 800c468:	50040000 	.word	0x50040000
 800c46c:	50040200 	.word	0x50040200
 800c470:	20000000 	.word	0x20000000
 800c474:	053e2d63 	.word	0x053e2d63
 800c478:	cb840000 	.word	0xcb840000
 800c47c:	80000001 	.word	0x80000001

0800c480 <ADC_ConversionStop>:
  *            @arg @ref ADC_INJECTED_GROUP          ADC injected conversion type.
  *            @arg @ref ADC_REGULAR_INJECTED_GROUP  ADC regular and injected conversion type.
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc, uint32_t ConversionGroup)
{
 800c480:	b580      	push	{r7, lr}
 800c482:	b088      	sub	sp, #32
 800c484:	af00      	add	r7, sp, #0
 800c486:	6078      	str	r0, [r7, #4]
 800c488:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t Conversion_Timeout_CPU_cycles = 0UL;
 800c48a:	2300      	movs	r3, #0
 800c48c:	61fb      	str	r3, [r7, #28]
  uint32_t conversion_group_reassigned = ConversionGroup;
 800c48e:	683b      	ldr	r3, [r7, #0]
 800c490:	61bb      	str	r3, [r7, #24]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CONVERSION_GROUP(ConversionGroup));

  /* Verification if ADC is not already stopped (on regular and injected      */
  /* groups) to bypass this function if not needed.                           */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800c492:	687b      	ldr	r3, [r7, #4]
 800c494:	681b      	ldr	r3, [r3, #0]
 800c496:	4618      	mov	r0, r3
 800c498:	f7ff f94e 	bl	800b738 <LL_ADC_REG_IsConversionOngoing>
 800c49c:	6138      	str	r0, [r7, #16]
  tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800c49e:	687b      	ldr	r3, [r7, #4]
 800c4a0:	681b      	ldr	r3, [r3, #0]
 800c4a2:	4618      	mov	r0, r3
 800c4a4:	f7ff f96f 	bl	800b786 <LL_ADC_INJ_IsConversionOngoing>
 800c4a8:	60f8      	str	r0, [r7, #12]
  if ((tmp_adc_is_conversion_on_going_regular != 0UL)
 800c4aa:	693b      	ldr	r3, [r7, #16]
 800c4ac:	2b00      	cmp	r3, #0
 800c4ae:	d103      	bne.n	800c4b8 <ADC_ConversionStop+0x38>
      || (tmp_adc_is_conversion_on_going_injected != 0UL)
 800c4b0:	68fb      	ldr	r3, [r7, #12]
 800c4b2:	2b00      	cmp	r3, #0
 800c4b4:	f000 8098 	beq.w	800c5e8 <ADC_ConversionStop+0x168>
    /* auto-delay mode.                                                       */
    /* In auto-injection mode, regular group stop ADC_CR_ADSTP is used (not   */
    /* injected group stop ADC_CR_JADSTP).                                    */
    /* Procedure to be followed: Wait until JEOS=1, clear JEOS, set ADSTP=1   */
    /* (see reference manual).                                                */
    if (((hadc->Instance->CFGR & ADC_CFGR_JAUTO) != 0UL)
 800c4b8:	687b      	ldr	r3, [r7, #4]
 800c4ba:	681b      	ldr	r3, [r3, #0]
 800c4bc:	68db      	ldr	r3, [r3, #12]
 800c4be:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800c4c2:	2b00      	cmp	r3, #0
 800c4c4:	d02a      	beq.n	800c51c <ADC_ConversionStop+0x9c>
        && (hadc->Init.ContinuousConvMode == ENABLE)
 800c4c6:	687b      	ldr	r3, [r7, #4]
 800c4c8:	7e5b      	ldrb	r3, [r3, #25]
 800c4ca:	2b01      	cmp	r3, #1
 800c4cc:	d126      	bne.n	800c51c <ADC_ConversionStop+0x9c>
        && (hadc->Init.LowPowerAutoWait == ENABLE)
 800c4ce:	687b      	ldr	r3, [r7, #4]
 800c4d0:	7e1b      	ldrb	r3, [r3, #24]
 800c4d2:	2b01      	cmp	r3, #1
 800c4d4:	d122      	bne.n	800c51c <ADC_ConversionStop+0x9c>
       )
    {
      /* Use stop of regular group */
      conversion_group_reassigned = ADC_REGULAR_GROUP;
 800c4d6:	2301      	movs	r3, #1
 800c4d8:	61bb      	str	r3, [r7, #24]

      /* Wait until JEOS=1 (maximum Timeout: 4 injected conversions) */
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 800c4da:	e014      	b.n	800c506 <ADC_ConversionStop+0x86>
      {
        if (Conversion_Timeout_CPU_cycles >= (ADC_CONVERSION_TIME_MAX_CPU_CYCLES * 4UL))
 800c4dc:	69fb      	ldr	r3, [r7, #28]
 800c4de:	4a45      	ldr	r2, [pc, #276]	@ (800c5f4 <ADC_ConversionStop+0x174>)
 800c4e0:	4293      	cmp	r3, r2
 800c4e2:	d90d      	bls.n	800c500 <ADC_ConversionStop+0x80>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800c4e4:	687b      	ldr	r3, [r7, #4]
 800c4e6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c4e8:	f043 0210 	orr.w	r2, r3, #16
 800c4ec:	687b      	ldr	r3, [r7, #4]
 800c4ee:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800c4f0:	687b      	ldr	r3, [r7, #4]
 800c4f2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800c4f4:	f043 0201 	orr.w	r2, r3, #1
 800c4f8:	687b      	ldr	r3, [r7, #4]
 800c4fa:	659a      	str	r2, [r3, #88]	@ 0x58

          return HAL_ERROR;
 800c4fc:	2301      	movs	r3, #1
 800c4fe:	e074      	b.n	800c5ea <ADC_ConversionStop+0x16a>
        }
        Conversion_Timeout_CPU_cycles ++;
 800c500:	69fb      	ldr	r3, [r7, #28]
 800c502:	3301      	adds	r3, #1
 800c504:	61fb      	str	r3, [r7, #28]
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 800c506:	687b      	ldr	r3, [r7, #4]
 800c508:	681b      	ldr	r3, [r3, #0]
 800c50a:	681b      	ldr	r3, [r3, #0]
 800c50c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c510:	2b40      	cmp	r3, #64	@ 0x40
 800c512:	d1e3      	bne.n	800c4dc <ADC_ConversionStop+0x5c>
      }

      /* Clear JEOS */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
 800c514:	687b      	ldr	r3, [r7, #4]
 800c516:	681b      	ldr	r3, [r3, #0]
 800c518:	2240      	movs	r2, #64	@ 0x40
 800c51a:	601a      	str	r2, [r3, #0]
    }

    /* Stop potential conversion on going on ADC group regular */
    if (conversion_group_reassigned != ADC_INJECTED_GROUP)
 800c51c:	69bb      	ldr	r3, [r7, #24]
 800c51e:	2b02      	cmp	r3, #2
 800c520:	d014      	beq.n	800c54c <ADC_ConversionStop+0xcc>
    {
      /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 800c522:	687b      	ldr	r3, [r7, #4]
 800c524:	681b      	ldr	r3, [r3, #0]
 800c526:	4618      	mov	r0, r3
 800c528:	f7ff f906 	bl	800b738 <LL_ADC_REG_IsConversionOngoing>
 800c52c:	4603      	mov	r3, r0
 800c52e:	2b00      	cmp	r3, #0
 800c530:	d00c      	beq.n	800c54c <ADC_ConversionStop+0xcc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 800c532:	687b      	ldr	r3, [r7, #4]
 800c534:	681b      	ldr	r3, [r3, #0]
 800c536:	4618      	mov	r0, r3
 800c538:	f7ff f8c3 	bl	800b6c2 <LL_ADC_IsDisableOngoing>
 800c53c:	4603      	mov	r3, r0
 800c53e:	2b00      	cmp	r3, #0
 800c540:	d104      	bne.n	800c54c <ADC_ConversionStop+0xcc>
        {
          /* Stop ADC group regular conversion */
          LL_ADC_REG_StopConversion(hadc->Instance);
 800c542:	687b      	ldr	r3, [r7, #4]
 800c544:	681b      	ldr	r3, [r3, #0]
 800c546:	4618      	mov	r0, r3
 800c548:	f7ff f8e2 	bl	800b710 <LL_ADC_REG_StopConversion>
        }
      }
    }

    /* Stop potential conversion on going on ADC group injected */
    if (conversion_group_reassigned != ADC_REGULAR_GROUP)
 800c54c:	69bb      	ldr	r3, [r7, #24]
 800c54e:	2b01      	cmp	r3, #1
 800c550:	d014      	beq.n	800c57c <ADC_ConversionStop+0xfc>
    {
      /* Software is allowed to set JADSTP only when JADSTART=1 and ADDIS=0 */
      if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) != 0UL)
 800c552:	687b      	ldr	r3, [r7, #4]
 800c554:	681b      	ldr	r3, [r3, #0]
 800c556:	4618      	mov	r0, r3
 800c558:	f7ff f915 	bl	800b786 <LL_ADC_INJ_IsConversionOngoing>
 800c55c:	4603      	mov	r3, r0
 800c55e:	2b00      	cmp	r3, #0
 800c560:	d00c      	beq.n	800c57c <ADC_ConversionStop+0xfc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 800c562:	687b      	ldr	r3, [r7, #4]
 800c564:	681b      	ldr	r3, [r3, #0]
 800c566:	4618      	mov	r0, r3
 800c568:	f7ff f8ab 	bl	800b6c2 <LL_ADC_IsDisableOngoing>
 800c56c:	4603      	mov	r3, r0
 800c56e:	2b00      	cmp	r3, #0
 800c570:	d104      	bne.n	800c57c <ADC_ConversionStop+0xfc>
        {
          /* Stop ADC group injected conversion */
          LL_ADC_INJ_StopConversion(hadc->Instance);
 800c572:	687b      	ldr	r3, [r7, #4]
 800c574:	681b      	ldr	r3, [r3, #0]
 800c576:	4618      	mov	r0, r3
 800c578:	f7ff f8f1 	bl	800b75e <LL_ADC_INJ_StopConversion>
        }
      }
    }

    /* Selection of start and stop bits with respect to the regular or injected group */
    switch (conversion_group_reassigned)
 800c57c:	69bb      	ldr	r3, [r7, #24]
 800c57e:	2b02      	cmp	r3, #2
 800c580:	d005      	beq.n	800c58e <ADC_ConversionStop+0x10e>
 800c582:	69bb      	ldr	r3, [r7, #24]
 800c584:	2b03      	cmp	r3, #3
 800c586:	d105      	bne.n	800c594 <ADC_ConversionStop+0x114>
    {
      case ADC_REGULAR_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = (ADC_CR_ADSTART | ADC_CR_JADSTART);
 800c588:	230c      	movs	r3, #12
 800c58a:	617b      	str	r3, [r7, #20]
        break;
 800c58c:	e005      	b.n	800c59a <ADC_ConversionStop+0x11a>
      case ADC_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_JADSTART;
 800c58e:	2308      	movs	r3, #8
 800c590:	617b      	str	r3, [r7, #20]
        break;
 800c592:	e002      	b.n	800c59a <ADC_ConversionStop+0x11a>
      /* Case ADC_REGULAR_GROUP only*/
      default:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
 800c594:	2304      	movs	r3, #4
 800c596:	617b      	str	r3, [r7, #20]
        break;
 800c598:	bf00      	nop
    }

    /* Wait for conversion effectively stopped */
    tickstart = HAL_GetTick();
 800c59a:	f7fe feb3 	bl	800b304 <HAL_GetTick>
 800c59e:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 800c5a0:	e01b      	b.n	800c5da <ADC_ConversionStop+0x15a>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 800c5a2:	f7fe feaf 	bl	800b304 <HAL_GetTick>
 800c5a6:	4602      	mov	r2, r0
 800c5a8:	68bb      	ldr	r3, [r7, #8]
 800c5aa:	1ad3      	subs	r3, r2, r3
 800c5ac:	2b05      	cmp	r3, #5
 800c5ae:	d914      	bls.n	800c5da <ADC_ConversionStop+0x15a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 800c5b0:	687b      	ldr	r3, [r7, #4]
 800c5b2:	681b      	ldr	r3, [r3, #0]
 800c5b4:	689a      	ldr	r2, [r3, #8]
 800c5b6:	697b      	ldr	r3, [r7, #20]
 800c5b8:	4013      	ands	r3, r2
 800c5ba:	2b00      	cmp	r3, #0
 800c5bc:	d00d      	beq.n	800c5da <ADC_ConversionStop+0x15a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800c5be:	687b      	ldr	r3, [r7, #4]
 800c5c0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c5c2:	f043 0210 	orr.w	r2, r3, #16
 800c5c6:	687b      	ldr	r3, [r7, #4]
 800c5c8:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800c5ca:	687b      	ldr	r3, [r7, #4]
 800c5cc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800c5ce:	f043 0201 	orr.w	r2, r3, #1
 800c5d2:	687b      	ldr	r3, [r7, #4]
 800c5d4:	659a      	str	r2, [r3, #88]	@ 0x58

          return HAL_ERROR;
 800c5d6:	2301      	movs	r3, #1
 800c5d8:	e007      	b.n	800c5ea <ADC_ConversionStop+0x16a>
    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 800c5da:	687b      	ldr	r3, [r7, #4]
 800c5dc:	681b      	ldr	r3, [r3, #0]
 800c5de:	689a      	ldr	r2, [r3, #8]
 800c5e0:	697b      	ldr	r3, [r7, #20]
 800c5e2:	4013      	ands	r3, r2
 800c5e4:	2b00      	cmp	r3, #0
 800c5e6:	d1dc      	bne.n	800c5a2 <ADC_ConversionStop+0x122>
    }

  }

  /* Return HAL status */
  return HAL_OK;
 800c5e8:	2300      	movs	r3, #0
}
 800c5ea:	4618      	mov	r0, r3
 800c5ec:	3720      	adds	r7, #32
 800c5ee:	46bd      	mov	sp, r7
 800c5f0:	bd80      	pop	{r7, pc}
 800c5f2:	bf00      	nop
 800c5f4:	a33fffff 	.word	0xa33fffff

0800c5f8 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 800c5f8:	b580      	push	{r7, lr}
 800c5fa:	b084      	sub	sp, #16
 800c5fc:	af00      	add	r7, sp, #0
 800c5fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 800c600:	2300      	movs	r3, #0
 800c602:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800c604:	687b      	ldr	r3, [r7, #4]
 800c606:	681b      	ldr	r3, [r3, #0]
 800c608:	4618      	mov	r0, r3
 800c60a:	f7ff f847 	bl	800b69c <LL_ADC_IsEnabled>
 800c60e:	4603      	mov	r3, r0
 800c610:	2b00      	cmp	r3, #0
 800c612:	d169      	bne.n	800c6e8 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 800c614:	687b      	ldr	r3, [r7, #4]
 800c616:	681b      	ldr	r3, [r3, #0]
 800c618:	689a      	ldr	r2, [r3, #8]
 800c61a:	4b36      	ldr	r3, [pc, #216]	@ (800c6f4 <ADC_Enable+0xfc>)
 800c61c:	4013      	ands	r3, r2
 800c61e:	2b00      	cmp	r3, #0
 800c620:	d00d      	beq.n	800c63e <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800c622:	687b      	ldr	r3, [r7, #4]
 800c624:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c626:	f043 0210 	orr.w	r2, r3, #16
 800c62a:	687b      	ldr	r3, [r7, #4]
 800c62c:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800c62e:	687b      	ldr	r3, [r7, #4]
 800c630:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800c632:	f043 0201 	orr.w	r2, r3, #1
 800c636:	687b      	ldr	r3, [r7, #4]
 800c638:	659a      	str	r2, [r3, #88]	@ 0x58

      return HAL_ERROR;
 800c63a:	2301      	movs	r3, #1
 800c63c:	e055      	b.n	800c6ea <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 800c63e:	687b      	ldr	r3, [r7, #4]
 800c640:	681b      	ldr	r3, [r3, #0]
 800c642:	4618      	mov	r0, r3
 800c644:	f7ff f802 	bl	800b64c <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 800c648:	482b      	ldr	r0, [pc, #172]	@ (800c6f8 <ADC_Enable+0x100>)
 800c64a:	f7fe feb1 	bl	800b3b0 <LL_ADC_GetCommonPathInternalCh>
 800c64e:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 800c650:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 800c654:	2b00      	cmp	r3, #0
 800c656:	d013      	beq.n	800c680 <ADC_Enable+0x88>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800c658:	4b28      	ldr	r3, [pc, #160]	@ (800c6fc <ADC_Enable+0x104>)
 800c65a:	681b      	ldr	r3, [r3, #0]
 800c65c:	099b      	lsrs	r3, r3, #6
 800c65e:	4a28      	ldr	r2, [pc, #160]	@ (800c700 <ADC_Enable+0x108>)
 800c660:	fba2 2303 	umull	r2, r3, r2, r3
 800c664:	099b      	lsrs	r3, r3, #6
 800c666:	1c5a      	adds	r2, r3, #1
 800c668:	4613      	mov	r3, r2
 800c66a:	005b      	lsls	r3, r3, #1
 800c66c:	4413      	add	r3, r2
 800c66e:	009b      	lsls	r3, r3, #2
 800c670:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 800c672:	e002      	b.n	800c67a <ADC_Enable+0x82>
      {
        wait_loop_index--;
 800c674:	68bb      	ldr	r3, [r7, #8]
 800c676:	3b01      	subs	r3, #1
 800c678:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 800c67a:	68bb      	ldr	r3, [r7, #8]
 800c67c:	2b00      	cmp	r3, #0
 800c67e:	d1f9      	bne.n	800c674 <ADC_Enable+0x7c>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 800c680:	f7fe fe40 	bl	800b304 <HAL_GetTick>
 800c684:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800c686:	e028      	b.n	800c6da <ADC_Enable+0xe2>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800c688:	687b      	ldr	r3, [r7, #4]
 800c68a:	681b      	ldr	r3, [r3, #0]
 800c68c:	4618      	mov	r0, r3
 800c68e:	f7ff f805 	bl	800b69c <LL_ADC_IsEnabled>
 800c692:	4603      	mov	r3, r0
 800c694:	2b00      	cmp	r3, #0
 800c696:	d104      	bne.n	800c6a2 <ADC_Enable+0xaa>
      {
        LL_ADC_Enable(hadc->Instance);
 800c698:	687b      	ldr	r3, [r7, #4]
 800c69a:	681b      	ldr	r3, [r3, #0]
 800c69c:	4618      	mov	r0, r3
 800c69e:	f7fe ffd5 	bl	800b64c <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800c6a2:	f7fe fe2f 	bl	800b304 <HAL_GetTick>
 800c6a6:	4602      	mov	r2, r0
 800c6a8:	68fb      	ldr	r3, [r7, #12]
 800c6aa:	1ad3      	subs	r3, r2, r3
 800c6ac:	2b02      	cmp	r3, #2
 800c6ae:	d914      	bls.n	800c6da <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800c6b0:	687b      	ldr	r3, [r7, #4]
 800c6b2:	681b      	ldr	r3, [r3, #0]
 800c6b4:	681b      	ldr	r3, [r3, #0]
 800c6b6:	f003 0301 	and.w	r3, r3, #1
 800c6ba:	2b01      	cmp	r3, #1
 800c6bc:	d00d      	beq.n	800c6da <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800c6be:	687b      	ldr	r3, [r7, #4]
 800c6c0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c6c2:	f043 0210 	orr.w	r2, r3, #16
 800c6c6:	687b      	ldr	r3, [r7, #4]
 800c6c8:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800c6ca:	687b      	ldr	r3, [r7, #4]
 800c6cc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800c6ce:	f043 0201 	orr.w	r2, r3, #1
 800c6d2:	687b      	ldr	r3, [r7, #4]
 800c6d4:	659a      	str	r2, [r3, #88]	@ 0x58

          return HAL_ERROR;
 800c6d6:	2301      	movs	r3, #1
 800c6d8:	e007      	b.n	800c6ea <ADC_Enable+0xf2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800c6da:	687b      	ldr	r3, [r7, #4]
 800c6dc:	681b      	ldr	r3, [r3, #0]
 800c6de:	681b      	ldr	r3, [r3, #0]
 800c6e0:	f003 0301 	and.w	r3, r3, #1
 800c6e4:	2b01      	cmp	r3, #1
 800c6e6:	d1cf      	bne.n	800c688 <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 800c6e8:	2300      	movs	r3, #0
}
 800c6ea:	4618      	mov	r0, r3
 800c6ec:	3710      	adds	r7, #16
 800c6ee:	46bd      	mov	sp, r7
 800c6f0:	bd80      	pop	{r7, pc}
 800c6f2:	bf00      	nop
 800c6f4:	8000003f 	.word	0x8000003f
 800c6f8:	50040300 	.word	0x50040300
 800c6fc:	20000000 	.word	0x20000000
 800c700:	053e2d63 	.word	0x053e2d63

0800c704 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 800c704:	b580      	push	{r7, lr}
 800c706:	b084      	sub	sp, #16
 800c708:	af00      	add	r7, sp, #0
 800c70a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 800c70c:	687b      	ldr	r3, [r7, #4]
 800c70e:	681b      	ldr	r3, [r3, #0]
 800c710:	4618      	mov	r0, r3
 800c712:	f7fe ffd6 	bl	800b6c2 <LL_ADC_IsDisableOngoing>
 800c716:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 800c718:	687b      	ldr	r3, [r7, #4]
 800c71a:	681b      	ldr	r3, [r3, #0]
 800c71c:	4618      	mov	r0, r3
 800c71e:	f7fe ffbd 	bl	800b69c <LL_ADC_IsEnabled>
 800c722:	4603      	mov	r3, r0
 800c724:	2b00      	cmp	r3, #0
 800c726:	d047      	beq.n	800c7b8 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 800c728:	68fb      	ldr	r3, [r7, #12]
 800c72a:	2b00      	cmp	r3, #0
 800c72c:	d144      	bne.n	800c7b8 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 800c72e:	687b      	ldr	r3, [r7, #4]
 800c730:	681b      	ldr	r3, [r3, #0]
 800c732:	689b      	ldr	r3, [r3, #8]
 800c734:	f003 030d 	and.w	r3, r3, #13
 800c738:	2b01      	cmp	r3, #1
 800c73a:	d10c      	bne.n	800c756 <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 800c73c:	687b      	ldr	r3, [r7, #4]
 800c73e:	681b      	ldr	r3, [r3, #0]
 800c740:	4618      	mov	r0, r3
 800c742:	f7fe ff97 	bl	800b674 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 800c746:	687b      	ldr	r3, [r7, #4]
 800c748:	681b      	ldr	r3, [r3, #0]
 800c74a:	2203      	movs	r2, #3
 800c74c:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 800c74e:	f7fe fdd9 	bl	800b304 <HAL_GetTick>
 800c752:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 800c754:	e029      	b.n	800c7aa <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800c756:	687b      	ldr	r3, [r7, #4]
 800c758:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c75a:	f043 0210 	orr.w	r2, r3, #16
 800c75e:	687b      	ldr	r3, [r7, #4]
 800c760:	655a      	str	r2, [r3, #84]	@ 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800c762:	687b      	ldr	r3, [r7, #4]
 800c764:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800c766:	f043 0201 	orr.w	r2, r3, #1
 800c76a:	687b      	ldr	r3, [r7, #4]
 800c76c:	659a      	str	r2, [r3, #88]	@ 0x58
      return HAL_ERROR;
 800c76e:	2301      	movs	r3, #1
 800c770:	e023      	b.n	800c7ba <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800c772:	f7fe fdc7 	bl	800b304 <HAL_GetTick>
 800c776:	4602      	mov	r2, r0
 800c778:	68bb      	ldr	r3, [r7, #8]
 800c77a:	1ad3      	subs	r3, r2, r3
 800c77c:	2b02      	cmp	r3, #2
 800c77e:	d914      	bls.n	800c7aa <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 800c780:	687b      	ldr	r3, [r7, #4]
 800c782:	681b      	ldr	r3, [r3, #0]
 800c784:	689b      	ldr	r3, [r3, #8]
 800c786:	f003 0301 	and.w	r3, r3, #1
 800c78a:	2b00      	cmp	r3, #0
 800c78c:	d00d      	beq.n	800c7aa <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800c78e:	687b      	ldr	r3, [r7, #4]
 800c790:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c792:	f043 0210 	orr.w	r2, r3, #16
 800c796:	687b      	ldr	r3, [r7, #4]
 800c798:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800c79a:	687b      	ldr	r3, [r7, #4]
 800c79c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800c79e:	f043 0201 	orr.w	r2, r3, #1
 800c7a2:	687b      	ldr	r3, [r7, #4]
 800c7a4:	659a      	str	r2, [r3, #88]	@ 0x58

          return HAL_ERROR;
 800c7a6:	2301      	movs	r3, #1
 800c7a8:	e007      	b.n	800c7ba <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 800c7aa:	687b      	ldr	r3, [r7, #4]
 800c7ac:	681b      	ldr	r3, [r3, #0]
 800c7ae:	689b      	ldr	r3, [r3, #8]
 800c7b0:	f003 0301 	and.w	r3, r3, #1
 800c7b4:	2b00      	cmp	r3, #0
 800c7b6:	d1dc      	bne.n	800c772 <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 800c7b8:	2300      	movs	r3, #0
}
 800c7ba:	4618      	mov	r0, r3
 800c7bc:	3710      	adds	r7, #16
 800c7be:	46bd      	mov	sp, r7
 800c7c0:	bd80      	pop	{r7, pc}

0800c7c2 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 800c7c2:	b580      	push	{r7, lr}
 800c7c4:	b084      	sub	sp, #16
 800c7c6:	af00      	add	r7, sp, #0
 800c7c8:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800c7ca:	687b      	ldr	r3, [r7, #4]
 800c7cc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c7ce:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 800c7d0:	68fb      	ldr	r3, [r7, #12]
 800c7d2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c7d4:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800c7d8:	2b00      	cmp	r3, #0
 800c7da:	d14b      	bne.n	800c874 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800c7dc:	68fb      	ldr	r3, [r7, #12]
 800c7de:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c7e0:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 800c7e4:	68fb      	ldr	r3, [r7, #12]
 800c7e6:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 800c7e8:	68fb      	ldr	r3, [r7, #12]
 800c7ea:	681b      	ldr	r3, [r3, #0]
 800c7ec:	681b      	ldr	r3, [r3, #0]
 800c7ee:	f003 0308 	and.w	r3, r3, #8
 800c7f2:	2b00      	cmp	r3, #0
 800c7f4:	d021      	beq.n	800c83a <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 800c7f6:	68fb      	ldr	r3, [r7, #12]
 800c7f8:	681b      	ldr	r3, [r3, #0]
 800c7fa:	4618      	mov	r0, r3
 800c7fc:	f7fe fe3b 	bl	800b476 <LL_ADC_REG_IsTriggerSourceSWStart>
 800c800:	4603      	mov	r3, r0
 800c802:	2b00      	cmp	r3, #0
 800c804:	d032      	beq.n	800c86c <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 800c806:	68fb      	ldr	r3, [r7, #12]
 800c808:	681b      	ldr	r3, [r3, #0]
 800c80a:	68db      	ldr	r3, [r3, #12]
 800c80c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800c810:	2b00      	cmp	r3, #0
 800c812:	d12b      	bne.n	800c86c <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800c814:	68fb      	ldr	r3, [r7, #12]
 800c816:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c818:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800c81c:	68fb      	ldr	r3, [r7, #12]
 800c81e:	655a      	str	r2, [r3, #84]	@ 0x54
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 800c820:	68fb      	ldr	r3, [r7, #12]
 800c822:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c824:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800c828:	2b00      	cmp	r3, #0
 800c82a:	d11f      	bne.n	800c86c <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800c82c:	68fb      	ldr	r3, [r7, #12]
 800c82e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c830:	f043 0201 	orr.w	r2, r3, #1
 800c834:	68fb      	ldr	r3, [r7, #12]
 800c836:	655a      	str	r2, [r3, #84]	@ 0x54
 800c838:	e018      	b.n	800c86c <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 800c83a:	68fb      	ldr	r3, [r7, #12]
 800c83c:	681b      	ldr	r3, [r3, #0]
 800c83e:	68db      	ldr	r3, [r3, #12]
 800c840:	f003 0302 	and.w	r3, r3, #2
 800c844:	2b00      	cmp	r3, #0
 800c846:	d111      	bne.n	800c86c <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800c848:	68fb      	ldr	r3, [r7, #12]
 800c84a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c84c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800c850:	68fb      	ldr	r3, [r7, #12]
 800c852:	655a      	str	r2, [r3, #84]	@ 0x54
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 800c854:	68fb      	ldr	r3, [r7, #12]
 800c856:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c858:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800c85c:	2b00      	cmp	r3, #0
 800c85e:	d105      	bne.n	800c86c <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800c860:	68fb      	ldr	r3, [r7, #12]
 800c862:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c864:	f043 0201 	orr.w	r2, r3, #1
 800c868:	68fb      	ldr	r3, [r7, #12]
 800c86a:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800c86c:	68f8      	ldr	r0, [r7, #12]
 800c86e:	f7f6 f98b 	bl	8002b88 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 800c872:	e00e      	b.n	800c892 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 800c874:	68fb      	ldr	r3, [r7, #12]
 800c876:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c878:	f003 0310 	and.w	r3, r3, #16
 800c87c:	2b00      	cmp	r3, #0
 800c87e:	d003      	beq.n	800c888 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 800c880:	68f8      	ldr	r0, [r7, #12]
 800c882:	f7ff fa00 	bl	800bc86 <HAL_ADC_ErrorCallback>
}
 800c886:	e004      	b.n	800c892 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 800c888:	68fb      	ldr	r3, [r7, #12]
 800c88a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800c88c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c88e:	6878      	ldr	r0, [r7, #4]
 800c890:	4798      	blx	r3
}
 800c892:	bf00      	nop
 800c894:	3710      	adds	r7, #16
 800c896:	46bd      	mov	sp, r7
 800c898:	bd80      	pop	{r7, pc}

0800c89a <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 800c89a:	b580      	push	{r7, lr}
 800c89c:	b084      	sub	sp, #16
 800c89e:	af00      	add	r7, sp, #0
 800c8a0:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800c8a2:	687b      	ldr	r3, [r7, #4]
 800c8a4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c8a6:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 800c8a8:	68f8      	ldr	r0, [r7, #12]
 800c8aa:	f7f6 f951 	bl	8002b50 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800c8ae:	bf00      	nop
 800c8b0:	3710      	adds	r7, #16
 800c8b2:	46bd      	mov	sp, r7
 800c8b4:	bd80      	pop	{r7, pc}

0800c8b6 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 800c8b6:	b580      	push	{r7, lr}
 800c8b8:	b084      	sub	sp, #16
 800c8ba:	af00      	add	r7, sp, #0
 800c8bc:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800c8be:	687b      	ldr	r3, [r7, #4]
 800c8c0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c8c2:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 800c8c4:	68fb      	ldr	r3, [r7, #12]
 800c8c6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c8c8:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800c8cc:	68fb      	ldr	r3, [r7, #12]
 800c8ce:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 800c8d0:	68fb      	ldr	r3, [r7, #12]
 800c8d2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800c8d4:	f043 0204 	orr.w	r2, r3, #4
 800c8d8:	68fb      	ldr	r3, [r7, #12]
 800c8da:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 800c8dc:	68f8      	ldr	r0, [r7, #12]
 800c8de:	f7ff f9d2 	bl	800bc86 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800c8e2:	bf00      	nop
 800c8e4:	3710      	adds	r7, #16
 800c8e6:	46bd      	mov	sp, r7
 800c8e8:	bd80      	pop	{r7, pc}

0800c8ea <LL_ADC_IsEnabled>:
{
 800c8ea:	b480      	push	{r7}
 800c8ec:	b083      	sub	sp, #12
 800c8ee:	af00      	add	r7, sp, #0
 800c8f0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800c8f2:	687b      	ldr	r3, [r7, #4]
 800c8f4:	689b      	ldr	r3, [r3, #8]
 800c8f6:	f003 0301 	and.w	r3, r3, #1
 800c8fa:	2b01      	cmp	r3, #1
 800c8fc:	d101      	bne.n	800c902 <LL_ADC_IsEnabled+0x18>
 800c8fe:	2301      	movs	r3, #1
 800c900:	e000      	b.n	800c904 <LL_ADC_IsEnabled+0x1a>
 800c902:	2300      	movs	r3, #0
}
 800c904:	4618      	mov	r0, r3
 800c906:	370c      	adds	r7, #12
 800c908:	46bd      	mov	sp, r7
 800c90a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c90e:	4770      	bx	lr

0800c910 <LL_ADC_REG_IsConversionOngoing>:
{
 800c910:	b480      	push	{r7}
 800c912:	b083      	sub	sp, #12
 800c914:	af00      	add	r7, sp, #0
 800c916:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800c918:	687b      	ldr	r3, [r7, #4]
 800c91a:	689b      	ldr	r3, [r3, #8]
 800c91c:	f003 0304 	and.w	r3, r3, #4
 800c920:	2b04      	cmp	r3, #4
 800c922:	d101      	bne.n	800c928 <LL_ADC_REG_IsConversionOngoing+0x18>
 800c924:	2301      	movs	r3, #1
 800c926:	e000      	b.n	800c92a <LL_ADC_REG_IsConversionOngoing+0x1a>
 800c928:	2300      	movs	r3, #0
}
 800c92a:	4618      	mov	r0, r3
 800c92c:	370c      	adds	r7, #12
 800c92e:	46bd      	mov	sp, r7
 800c930:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c934:	4770      	bx	lr
	...

0800c938 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 800c938:	b590      	push	{r4, r7, lr}
 800c93a:	b09f      	sub	sp, #124	@ 0x7c
 800c93c:	af00      	add	r7, sp, #0
 800c93e:	6078      	str	r0, [r7, #4]
 800c940:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800c942:	2300      	movs	r3, #0
 800c944:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 800c948:	687b      	ldr	r3, [r7, #4]
 800c94a:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800c94e:	2b01      	cmp	r3, #1
 800c950:	d101      	bne.n	800c956 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 800c952:	2302      	movs	r3, #2
 800c954:	e093      	b.n	800ca7e <HAL_ADCEx_MultiModeConfigChannel+0x146>
 800c956:	687b      	ldr	r3, [r7, #4]
 800c958:	2201      	movs	r2, #1
 800c95a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 800c95e:	2300      	movs	r3, #0
 800c960:	65fb      	str	r3, [r7, #92]	@ 0x5c
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 800c962:	2300      	movs	r3, #0
 800c964:	663b      	str	r3, [r7, #96]	@ 0x60

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 800c966:	687b      	ldr	r3, [r7, #4]
 800c968:	681b      	ldr	r3, [r3, #0]
 800c96a:	4a47      	ldr	r2, [pc, #284]	@ (800ca88 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 800c96c:	4293      	cmp	r3, r2
 800c96e:	d102      	bne.n	800c976 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 800c970:	4b46      	ldr	r3, [pc, #280]	@ (800ca8c <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 800c972:	60bb      	str	r3, [r7, #8]
 800c974:	e001      	b.n	800c97a <HAL_ADCEx_MultiModeConfigChannel+0x42>
 800c976:	2300      	movs	r3, #0
 800c978:	60bb      	str	r3, [r7, #8]

  if (tmp_hadc_slave.Instance == NULL)
 800c97a:	68bb      	ldr	r3, [r7, #8]
 800c97c:	2b00      	cmp	r3, #0
 800c97e:	d10b      	bne.n	800c998 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800c980:	687b      	ldr	r3, [r7, #4]
 800c982:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c984:	f043 0220 	orr.w	r2, r3, #32
 800c988:	687b      	ldr	r3, [r7, #4]
 800c98a:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800c98c:	687b      	ldr	r3, [r7, #4]
 800c98e:	2200      	movs	r2, #0
 800c990:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    return HAL_ERROR;
 800c994:	2301      	movs	r3, #1
 800c996:	e072      	b.n	800ca7e <HAL_ADCEx_MultiModeConfigChannel+0x146>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 800c998:	68bb      	ldr	r3, [r7, #8]
 800c99a:	4618      	mov	r0, r3
 800c99c:	f7ff ffb8 	bl	800c910 <LL_ADC_REG_IsConversionOngoing>
 800c9a0:	6738      	str	r0, [r7, #112]	@ 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800c9a2:	687b      	ldr	r3, [r7, #4]
 800c9a4:	681b      	ldr	r3, [r3, #0]
 800c9a6:	4618      	mov	r0, r3
 800c9a8:	f7ff ffb2 	bl	800c910 <LL_ADC_REG_IsConversionOngoing>
 800c9ac:	4603      	mov	r3, r0
 800c9ae:	2b00      	cmp	r3, #0
 800c9b0:	d154      	bne.n	800ca5c <HAL_ADCEx_MultiModeConfigChannel+0x124>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 800c9b2:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800c9b4:	2b00      	cmp	r3, #0
 800c9b6:	d151      	bne.n	800ca5c <HAL_ADCEx_MultiModeConfigChannel+0x124>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 800c9b8:	4b35      	ldr	r3, [pc, #212]	@ (800ca90 <HAL_ADCEx_MultiModeConfigChannel+0x158>)
 800c9ba:	66fb      	str	r3, [r7, #108]	@ 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 800c9bc:	683b      	ldr	r3, [r7, #0]
 800c9be:	681b      	ldr	r3, [r3, #0]
 800c9c0:	2b00      	cmp	r3, #0
 800c9c2:	d02c      	beq.n	800ca1e <HAL_ADCEx_MultiModeConfigChannel+0xe6>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 800c9c4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800c9c6:	689b      	ldr	r3, [r3, #8]
 800c9c8:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800c9cc:	683b      	ldr	r3, [r7, #0]
 800c9ce:	6859      	ldr	r1, [r3, #4]
 800c9d0:	687b      	ldr	r3, [r7, #4]
 800c9d2:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800c9d6:	035b      	lsls	r3, r3, #13
 800c9d8:	430b      	orrs	r3, r1
 800c9da:	431a      	orrs	r2, r3
 800c9dc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800c9de:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800c9e0:	4829      	ldr	r0, [pc, #164]	@ (800ca88 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 800c9e2:	f7ff ff82 	bl	800c8ea <LL_ADC_IsEnabled>
 800c9e6:	4604      	mov	r4, r0
 800c9e8:	4828      	ldr	r0, [pc, #160]	@ (800ca8c <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 800c9ea:	f7ff ff7e 	bl	800c8ea <LL_ADC_IsEnabled>
 800c9ee:	4603      	mov	r3, r0
 800c9f0:	431c      	orrs	r4, r3
 800c9f2:	4828      	ldr	r0, [pc, #160]	@ (800ca94 <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 800c9f4:	f7ff ff79 	bl	800c8ea <LL_ADC_IsEnabled>
 800c9f8:	4603      	mov	r3, r0
 800c9fa:	4323      	orrs	r3, r4
 800c9fc:	2b00      	cmp	r3, #0
 800c9fe:	d137      	bne.n	800ca70 <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 800ca00:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800ca02:	689b      	ldr	r3, [r3, #8]
 800ca04:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 800ca08:	f023 030f 	bic.w	r3, r3, #15
 800ca0c:	683a      	ldr	r2, [r7, #0]
 800ca0e:	6811      	ldr	r1, [r2, #0]
 800ca10:	683a      	ldr	r2, [r7, #0]
 800ca12:	6892      	ldr	r2, [r2, #8]
 800ca14:	430a      	orrs	r2, r1
 800ca16:	431a      	orrs	r2, r3
 800ca18:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800ca1a:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 800ca1c:	e028      	b.n	800ca70 <HAL_ADCEx_MultiModeConfigChannel+0x138>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 800ca1e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800ca20:	689b      	ldr	r3, [r3, #8]
 800ca22:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800ca26:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800ca28:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800ca2a:	4817      	ldr	r0, [pc, #92]	@ (800ca88 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 800ca2c:	f7ff ff5d 	bl	800c8ea <LL_ADC_IsEnabled>
 800ca30:	4604      	mov	r4, r0
 800ca32:	4816      	ldr	r0, [pc, #88]	@ (800ca8c <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 800ca34:	f7ff ff59 	bl	800c8ea <LL_ADC_IsEnabled>
 800ca38:	4603      	mov	r3, r0
 800ca3a:	431c      	orrs	r4, r3
 800ca3c:	4815      	ldr	r0, [pc, #84]	@ (800ca94 <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 800ca3e:	f7ff ff54 	bl	800c8ea <LL_ADC_IsEnabled>
 800ca42:	4603      	mov	r3, r0
 800ca44:	4323      	orrs	r3, r4
 800ca46:	2b00      	cmp	r3, #0
 800ca48:	d112      	bne.n	800ca70 <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 800ca4a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800ca4c:	689b      	ldr	r3, [r3, #8]
 800ca4e:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 800ca52:	f023 030f 	bic.w	r3, r3, #15
 800ca56:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800ca58:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 800ca5a:	e009      	b.n	800ca70 <HAL_ADCEx_MultiModeConfigChannel+0x138>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800ca5c:	687b      	ldr	r3, [r7, #4]
 800ca5e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ca60:	f043 0220 	orr.w	r2, r3, #32
 800ca64:	687b      	ldr	r3, [r7, #4]
 800ca66:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 800ca68:	2301      	movs	r3, #1
 800ca6a:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
 800ca6e:	e000      	b.n	800ca72 <HAL_ADCEx_MultiModeConfigChannel+0x13a>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 800ca70:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800ca72:	687b      	ldr	r3, [r7, #4]
 800ca74:	2200      	movs	r2, #0
 800ca76:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 800ca7a:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
}
 800ca7e:	4618      	mov	r0, r3
 800ca80:	377c      	adds	r7, #124	@ 0x7c
 800ca82:	46bd      	mov	sp, r7
 800ca84:	bd90      	pop	{r4, r7, pc}
 800ca86:	bf00      	nop
 800ca88:	50040000 	.word	0x50040000
 800ca8c:	50040100 	.word	0x50040100
 800ca90:	50040300 	.word	0x50040300
 800ca94:	50040200 	.word	0x50040200

0800ca98 <__NVIC_SetPriorityGrouping>:
{
 800ca98:	b480      	push	{r7}
 800ca9a:	b085      	sub	sp, #20
 800ca9c:	af00      	add	r7, sp, #0
 800ca9e:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800caa0:	687b      	ldr	r3, [r7, #4]
 800caa2:	f003 0307 	and.w	r3, r3, #7
 800caa6:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800caa8:	4b0c      	ldr	r3, [pc, #48]	@ (800cadc <__NVIC_SetPriorityGrouping+0x44>)
 800caaa:	68db      	ldr	r3, [r3, #12]
 800caac:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800caae:	68ba      	ldr	r2, [r7, #8]
 800cab0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800cab4:	4013      	ands	r3, r2
 800cab6:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800cab8:	68fb      	ldr	r3, [r7, #12]
 800caba:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800cabc:	68bb      	ldr	r3, [r7, #8]
 800cabe:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800cac0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800cac4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800cac8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800caca:	4a04      	ldr	r2, [pc, #16]	@ (800cadc <__NVIC_SetPriorityGrouping+0x44>)
 800cacc:	68bb      	ldr	r3, [r7, #8]
 800cace:	60d3      	str	r3, [r2, #12]
}
 800cad0:	bf00      	nop
 800cad2:	3714      	adds	r7, #20
 800cad4:	46bd      	mov	sp, r7
 800cad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cada:	4770      	bx	lr
 800cadc:	e000ed00 	.word	0xe000ed00

0800cae0 <__NVIC_GetPriorityGrouping>:
{
 800cae0:	b480      	push	{r7}
 800cae2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800cae4:	4b04      	ldr	r3, [pc, #16]	@ (800caf8 <__NVIC_GetPriorityGrouping+0x18>)
 800cae6:	68db      	ldr	r3, [r3, #12]
 800cae8:	0a1b      	lsrs	r3, r3, #8
 800caea:	f003 0307 	and.w	r3, r3, #7
}
 800caee:	4618      	mov	r0, r3
 800caf0:	46bd      	mov	sp, r7
 800caf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800caf6:	4770      	bx	lr
 800caf8:	e000ed00 	.word	0xe000ed00

0800cafc <__NVIC_EnableIRQ>:
{
 800cafc:	b480      	push	{r7}
 800cafe:	b083      	sub	sp, #12
 800cb00:	af00      	add	r7, sp, #0
 800cb02:	4603      	mov	r3, r0
 800cb04:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800cb06:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800cb0a:	2b00      	cmp	r3, #0
 800cb0c:	db0b      	blt.n	800cb26 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800cb0e:	79fb      	ldrb	r3, [r7, #7]
 800cb10:	f003 021f 	and.w	r2, r3, #31
 800cb14:	4907      	ldr	r1, [pc, #28]	@ (800cb34 <__NVIC_EnableIRQ+0x38>)
 800cb16:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800cb1a:	095b      	lsrs	r3, r3, #5
 800cb1c:	2001      	movs	r0, #1
 800cb1e:	fa00 f202 	lsl.w	r2, r0, r2
 800cb22:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800cb26:	bf00      	nop
 800cb28:	370c      	adds	r7, #12
 800cb2a:	46bd      	mov	sp, r7
 800cb2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb30:	4770      	bx	lr
 800cb32:	bf00      	nop
 800cb34:	e000e100 	.word	0xe000e100

0800cb38 <__NVIC_SetPriority>:
{
 800cb38:	b480      	push	{r7}
 800cb3a:	b083      	sub	sp, #12
 800cb3c:	af00      	add	r7, sp, #0
 800cb3e:	4603      	mov	r3, r0
 800cb40:	6039      	str	r1, [r7, #0]
 800cb42:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800cb44:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800cb48:	2b00      	cmp	r3, #0
 800cb4a:	db0a      	blt.n	800cb62 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800cb4c:	683b      	ldr	r3, [r7, #0]
 800cb4e:	b2da      	uxtb	r2, r3
 800cb50:	490c      	ldr	r1, [pc, #48]	@ (800cb84 <__NVIC_SetPriority+0x4c>)
 800cb52:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800cb56:	0112      	lsls	r2, r2, #4
 800cb58:	b2d2      	uxtb	r2, r2
 800cb5a:	440b      	add	r3, r1
 800cb5c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 800cb60:	e00a      	b.n	800cb78 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800cb62:	683b      	ldr	r3, [r7, #0]
 800cb64:	b2da      	uxtb	r2, r3
 800cb66:	4908      	ldr	r1, [pc, #32]	@ (800cb88 <__NVIC_SetPriority+0x50>)
 800cb68:	79fb      	ldrb	r3, [r7, #7]
 800cb6a:	f003 030f 	and.w	r3, r3, #15
 800cb6e:	3b04      	subs	r3, #4
 800cb70:	0112      	lsls	r2, r2, #4
 800cb72:	b2d2      	uxtb	r2, r2
 800cb74:	440b      	add	r3, r1
 800cb76:	761a      	strb	r2, [r3, #24]
}
 800cb78:	bf00      	nop
 800cb7a:	370c      	adds	r7, #12
 800cb7c:	46bd      	mov	sp, r7
 800cb7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb82:	4770      	bx	lr
 800cb84:	e000e100 	.word	0xe000e100
 800cb88:	e000ed00 	.word	0xe000ed00

0800cb8c <NVIC_EncodePriority>:
{
 800cb8c:	b480      	push	{r7}
 800cb8e:	b089      	sub	sp, #36	@ 0x24
 800cb90:	af00      	add	r7, sp, #0
 800cb92:	60f8      	str	r0, [r7, #12]
 800cb94:	60b9      	str	r1, [r7, #8]
 800cb96:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800cb98:	68fb      	ldr	r3, [r7, #12]
 800cb9a:	f003 0307 	and.w	r3, r3, #7
 800cb9e:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800cba0:	69fb      	ldr	r3, [r7, #28]
 800cba2:	f1c3 0307 	rsb	r3, r3, #7
 800cba6:	2b04      	cmp	r3, #4
 800cba8:	bf28      	it	cs
 800cbaa:	2304      	movcs	r3, #4
 800cbac:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800cbae:	69fb      	ldr	r3, [r7, #28]
 800cbb0:	3304      	adds	r3, #4
 800cbb2:	2b06      	cmp	r3, #6
 800cbb4:	d902      	bls.n	800cbbc <NVIC_EncodePriority+0x30>
 800cbb6:	69fb      	ldr	r3, [r7, #28]
 800cbb8:	3b03      	subs	r3, #3
 800cbba:	e000      	b.n	800cbbe <NVIC_EncodePriority+0x32>
 800cbbc:	2300      	movs	r3, #0
 800cbbe:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800cbc0:	f04f 32ff 	mov.w	r2, #4294967295
 800cbc4:	69bb      	ldr	r3, [r7, #24]
 800cbc6:	fa02 f303 	lsl.w	r3, r2, r3
 800cbca:	43da      	mvns	r2, r3
 800cbcc:	68bb      	ldr	r3, [r7, #8]
 800cbce:	401a      	ands	r2, r3
 800cbd0:	697b      	ldr	r3, [r7, #20]
 800cbd2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800cbd4:	f04f 31ff 	mov.w	r1, #4294967295
 800cbd8:	697b      	ldr	r3, [r7, #20]
 800cbda:	fa01 f303 	lsl.w	r3, r1, r3
 800cbde:	43d9      	mvns	r1, r3
 800cbe0:	687b      	ldr	r3, [r7, #4]
 800cbe2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800cbe4:	4313      	orrs	r3, r2
}
 800cbe6:	4618      	mov	r0, r3
 800cbe8:	3724      	adds	r7, #36	@ 0x24
 800cbea:	46bd      	mov	sp, r7
 800cbec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbf0:	4770      	bx	lr
	...

0800cbf4 <__NVIC_SystemReset>:
{
 800cbf4:	b480      	push	{r7}
 800cbf6:	af00      	add	r7, sp, #0
  __ASM volatile ("dsb 0xF":::"memory");
 800cbf8:	f3bf 8f4f 	dsb	sy
}
 800cbfc:	bf00      	nop
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 800cbfe:	4b06      	ldr	r3, [pc, #24]	@ (800cc18 <__NVIC_SystemReset+0x24>)
 800cc00:	68db      	ldr	r3, [r3, #12]
 800cc02:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 800cc06:	4904      	ldr	r1, [pc, #16]	@ (800cc18 <__NVIC_SystemReset+0x24>)
 800cc08:	4b04      	ldr	r3, [pc, #16]	@ (800cc1c <__NVIC_SystemReset+0x28>)
 800cc0a:	4313      	orrs	r3, r2
 800cc0c:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 800cc0e:	f3bf 8f4f 	dsb	sy
}
 800cc12:	bf00      	nop
    __NOP();
 800cc14:	bf00      	nop
 800cc16:	e7fd      	b.n	800cc14 <__NVIC_SystemReset+0x20>
 800cc18:	e000ed00 	.word	0xe000ed00
 800cc1c:	05fa0004 	.word	0x05fa0004

0800cc20 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800cc20:	b580      	push	{r7, lr}
 800cc22:	b082      	sub	sp, #8
 800cc24:	af00      	add	r7, sp, #0
 800cc26:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800cc28:	687b      	ldr	r3, [r7, #4]
 800cc2a:	3b01      	subs	r3, #1
 800cc2c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800cc30:	d301      	bcc.n	800cc36 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800cc32:	2301      	movs	r3, #1
 800cc34:	e00f      	b.n	800cc56 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800cc36:	4a0a      	ldr	r2, [pc, #40]	@ (800cc60 <SysTick_Config+0x40>)
 800cc38:	687b      	ldr	r3, [r7, #4]
 800cc3a:	3b01      	subs	r3, #1
 800cc3c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800cc3e:	210f      	movs	r1, #15
 800cc40:	f04f 30ff 	mov.w	r0, #4294967295
 800cc44:	f7ff ff78 	bl	800cb38 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800cc48:	4b05      	ldr	r3, [pc, #20]	@ (800cc60 <SysTick_Config+0x40>)
 800cc4a:	2200      	movs	r2, #0
 800cc4c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800cc4e:	4b04      	ldr	r3, [pc, #16]	@ (800cc60 <SysTick_Config+0x40>)
 800cc50:	2207      	movs	r2, #7
 800cc52:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800cc54:	2300      	movs	r3, #0
}
 800cc56:	4618      	mov	r0, r3
 800cc58:	3708      	adds	r7, #8
 800cc5a:	46bd      	mov	sp, r7
 800cc5c:	bd80      	pop	{r7, pc}
 800cc5e:	bf00      	nop
 800cc60:	e000e010 	.word	0xe000e010

0800cc64 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800cc64:	b580      	push	{r7, lr}
 800cc66:	b082      	sub	sp, #8
 800cc68:	af00      	add	r7, sp, #0
 800cc6a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800cc6c:	6878      	ldr	r0, [r7, #4]
 800cc6e:	f7ff ff13 	bl	800ca98 <__NVIC_SetPriorityGrouping>
}
 800cc72:	bf00      	nop
 800cc74:	3708      	adds	r7, #8
 800cc76:	46bd      	mov	sp, r7
 800cc78:	bd80      	pop	{r7, pc}

0800cc7a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800cc7a:	b580      	push	{r7, lr}
 800cc7c:	b086      	sub	sp, #24
 800cc7e:	af00      	add	r7, sp, #0
 800cc80:	4603      	mov	r3, r0
 800cc82:	60b9      	str	r1, [r7, #8]
 800cc84:	607a      	str	r2, [r7, #4]
 800cc86:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800cc88:	2300      	movs	r3, #0
 800cc8a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800cc8c:	f7ff ff28 	bl	800cae0 <__NVIC_GetPriorityGrouping>
 800cc90:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800cc92:	687a      	ldr	r2, [r7, #4]
 800cc94:	68b9      	ldr	r1, [r7, #8]
 800cc96:	6978      	ldr	r0, [r7, #20]
 800cc98:	f7ff ff78 	bl	800cb8c <NVIC_EncodePriority>
 800cc9c:	4602      	mov	r2, r0
 800cc9e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800cca2:	4611      	mov	r1, r2
 800cca4:	4618      	mov	r0, r3
 800cca6:	f7ff ff47 	bl	800cb38 <__NVIC_SetPriority>
}
 800ccaa:	bf00      	nop
 800ccac:	3718      	adds	r7, #24
 800ccae:	46bd      	mov	sp, r7
 800ccb0:	bd80      	pop	{r7, pc}

0800ccb2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800ccb2:	b580      	push	{r7, lr}
 800ccb4:	b082      	sub	sp, #8
 800ccb6:	af00      	add	r7, sp, #0
 800ccb8:	4603      	mov	r3, r0
 800ccba:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800ccbc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800ccc0:	4618      	mov	r0, r3
 800ccc2:	f7ff ff1b 	bl	800cafc <__NVIC_EnableIRQ>
}
 800ccc6:	bf00      	nop
 800ccc8:	3708      	adds	r7, #8
 800ccca:	46bd      	mov	sp, r7
 800cccc:	bd80      	pop	{r7, pc}

0800ccce <HAL_NVIC_SystemReset>:
/**
  * @brief  Initiate a system reset request to reset the MCU.
  * @retval None
  */
void HAL_NVIC_SystemReset(void)
{
 800ccce:	b580      	push	{r7, lr}
 800ccd0:	af00      	add	r7, sp, #0
  /* System Reset */
  NVIC_SystemReset();
 800ccd2:	f7ff ff8f 	bl	800cbf4 <__NVIC_SystemReset>

0800ccd6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800ccd6:	b580      	push	{r7, lr}
 800ccd8:	b082      	sub	sp, #8
 800ccda:	af00      	add	r7, sp, #0
 800ccdc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800ccde:	6878      	ldr	r0, [r7, #4]
 800cce0:	f7ff ff9e 	bl	800cc20 <SysTick_Config>
 800cce4:	4603      	mov	r3, r0
}
 800cce6:	4618      	mov	r0, r3
 800cce8:	3708      	adds	r7, #8
 800ccea:	46bd      	mov	sp, r7
 800ccec:	bd80      	pop	{r7, pc}
	...

0800ccf0 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 800ccf0:	b580      	push	{r7, lr}
 800ccf2:	b082      	sub	sp, #8
 800ccf4:	af00      	add	r7, sp, #0
 800ccf6:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 800ccf8:	687b      	ldr	r3, [r7, #4]
 800ccfa:	2b00      	cmp	r3, #0
 800ccfc:	d101      	bne.n	800cd02 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 800ccfe:	2301      	movs	r3, #1
 800cd00:	e054      	b.n	800cdac <HAL_CRC_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 800cd02:	687b      	ldr	r3, [r7, #4]
 800cd04:	7f5b      	ldrb	r3, [r3, #29]
 800cd06:	b2db      	uxtb	r3, r3
 800cd08:	2b00      	cmp	r3, #0
 800cd0a:	d105      	bne.n	800cd18 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 800cd0c:	687b      	ldr	r3, [r7, #4]
 800cd0e:	2200      	movs	r2, #0
 800cd10:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 800cd12:	6878      	ldr	r0, [r7, #4]
 800cd14:	f7fa fdb2 	bl	800787c <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 800cd18:	687b      	ldr	r3, [r7, #4]
 800cd1a:	2202      	movs	r2, #2
 800cd1c:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 800cd1e:	687b      	ldr	r3, [r7, #4]
 800cd20:	791b      	ldrb	r3, [r3, #4]
 800cd22:	2b00      	cmp	r3, #0
 800cd24:	d10c      	bne.n	800cd40 <HAL_CRC_Init+0x50>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 800cd26:	687b      	ldr	r3, [r7, #4]
 800cd28:	681b      	ldr	r3, [r3, #0]
 800cd2a:	4a22      	ldr	r2, [pc, #136]	@ (800cdb4 <HAL_CRC_Init+0xc4>)
 800cd2c:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 800cd2e:	687b      	ldr	r3, [r7, #4]
 800cd30:	681b      	ldr	r3, [r3, #0]
 800cd32:	689a      	ldr	r2, [r3, #8]
 800cd34:	687b      	ldr	r3, [r7, #4]
 800cd36:	681b      	ldr	r3, [r3, #0]
 800cd38:	f022 0218 	bic.w	r2, r2, #24
 800cd3c:	609a      	str	r2, [r3, #8]
 800cd3e:	e00c      	b.n	800cd5a <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 800cd40:	687b      	ldr	r3, [r7, #4]
 800cd42:	6899      	ldr	r1, [r3, #8]
 800cd44:	687b      	ldr	r3, [r7, #4]
 800cd46:	68db      	ldr	r3, [r3, #12]
 800cd48:	461a      	mov	r2, r3
 800cd4a:	6878      	ldr	r0, [r7, #4]
 800cd4c:	f000 f942 	bl	800cfd4 <HAL_CRCEx_Polynomial_Set>
 800cd50:	4603      	mov	r3, r0
 800cd52:	2b00      	cmp	r3, #0
 800cd54:	d001      	beq.n	800cd5a <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 800cd56:	2301      	movs	r3, #1
 800cd58:	e028      	b.n	800cdac <HAL_CRC_Init+0xbc>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 800cd5a:	687b      	ldr	r3, [r7, #4]
 800cd5c:	795b      	ldrb	r3, [r3, #5]
 800cd5e:	2b00      	cmp	r3, #0
 800cd60:	d105      	bne.n	800cd6e <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 800cd62:	687b      	ldr	r3, [r7, #4]
 800cd64:	681b      	ldr	r3, [r3, #0]
 800cd66:	f04f 32ff 	mov.w	r2, #4294967295
 800cd6a:	611a      	str	r2, [r3, #16]
 800cd6c:	e004      	b.n	800cd78 <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 800cd6e:	687b      	ldr	r3, [r7, #4]
 800cd70:	681b      	ldr	r3, [r3, #0]
 800cd72:	687a      	ldr	r2, [r7, #4]
 800cd74:	6912      	ldr	r2, [r2, #16]
 800cd76:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 800cd78:	687b      	ldr	r3, [r7, #4]
 800cd7a:	681b      	ldr	r3, [r3, #0]
 800cd7c:	689b      	ldr	r3, [r3, #8]
 800cd7e:	f023 0160 	bic.w	r1, r3, #96	@ 0x60
 800cd82:	687b      	ldr	r3, [r7, #4]
 800cd84:	695a      	ldr	r2, [r3, #20]
 800cd86:	687b      	ldr	r3, [r7, #4]
 800cd88:	681b      	ldr	r3, [r3, #0]
 800cd8a:	430a      	orrs	r2, r1
 800cd8c:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 800cd8e:	687b      	ldr	r3, [r7, #4]
 800cd90:	681b      	ldr	r3, [r3, #0]
 800cd92:	689b      	ldr	r3, [r3, #8]
 800cd94:	f023 0180 	bic.w	r1, r3, #128	@ 0x80
 800cd98:	687b      	ldr	r3, [r7, #4]
 800cd9a:	699a      	ldr	r2, [r3, #24]
 800cd9c:	687b      	ldr	r3, [r7, #4]
 800cd9e:	681b      	ldr	r3, [r3, #0]
 800cda0:	430a      	orrs	r2, r1
 800cda2:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 800cda4:	687b      	ldr	r3, [r7, #4]
 800cda6:	2201      	movs	r2, #1
 800cda8:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 800cdaa:	2300      	movs	r3, #0
}
 800cdac:	4618      	mov	r0, r3
 800cdae:	3708      	adds	r7, #8
 800cdb0:	46bd      	mov	sp, r7
 800cdb2:	bd80      	pop	{r7, pc}
 800cdb4:	04c11db7 	.word	0x04c11db7

0800cdb8 <HAL_CRC_Accumulate>:
  *        and the API will internally adjust its input data processing based on the
  *        handle field hcrc->InputDataFormat.
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
uint32_t HAL_CRC_Accumulate(CRC_HandleTypeDef *hcrc, uint32_t pBuffer[], uint32_t BufferLength)
{
 800cdb8:	b580      	push	{r7, lr}
 800cdba:	b086      	sub	sp, #24
 800cdbc:	af00      	add	r7, sp, #0
 800cdbe:	60f8      	str	r0, [r7, #12]
 800cdc0:	60b9      	str	r1, [r7, #8]
 800cdc2:	607a      	str	r2, [r7, #4]
  uint32_t index;      /* CRC input data buffer index */
  uint32_t temp = 0U;  /* CRC output (read from hcrc->Instance->DR register) */
 800cdc4:	2300      	movs	r3, #0
 800cdc6:	613b      	str	r3, [r7, #16]

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_BUSY;
 800cdc8:	68fb      	ldr	r3, [r7, #12]
 800cdca:	2202      	movs	r2, #2
 800cdcc:	775a      	strb	r2, [r3, #29]

  switch (hcrc->InputDataFormat)
 800cdce:	68fb      	ldr	r3, [r7, #12]
 800cdd0:	6a1b      	ldr	r3, [r3, #32]
 800cdd2:	2b03      	cmp	r3, #3
 800cdd4:	d006      	beq.n	800cde4 <HAL_CRC_Accumulate+0x2c>
 800cdd6:	2b03      	cmp	r3, #3
 800cdd8:	d829      	bhi.n	800ce2e <HAL_CRC_Accumulate+0x76>
 800cdda:	2b01      	cmp	r3, #1
 800cddc:	d019      	beq.n	800ce12 <HAL_CRC_Accumulate+0x5a>
 800cdde:	2b02      	cmp	r3, #2
 800cde0:	d01e      	beq.n	800ce20 <HAL_CRC_Accumulate+0x68>

    case CRC_INPUTDATA_FORMAT_HALFWORDS:
      temp = CRC_Handle_16(hcrc, (uint16_t *)(void *)pBuffer, BufferLength);    /* Derogation MisraC2012 R.11.5 */
      break;
    default:
      break;
 800cde2:	e024      	b.n	800ce2e <HAL_CRC_Accumulate+0x76>
      for (index = 0U; index < BufferLength; index++)
 800cde4:	2300      	movs	r3, #0
 800cde6:	617b      	str	r3, [r7, #20]
 800cde8:	e00a      	b.n	800ce00 <HAL_CRC_Accumulate+0x48>
        hcrc->Instance->DR = pBuffer[index];
 800cdea:	697b      	ldr	r3, [r7, #20]
 800cdec:	009b      	lsls	r3, r3, #2
 800cdee:	68ba      	ldr	r2, [r7, #8]
 800cdf0:	441a      	add	r2, r3
 800cdf2:	68fb      	ldr	r3, [r7, #12]
 800cdf4:	681b      	ldr	r3, [r3, #0]
 800cdf6:	6812      	ldr	r2, [r2, #0]
 800cdf8:	601a      	str	r2, [r3, #0]
      for (index = 0U; index < BufferLength; index++)
 800cdfa:	697b      	ldr	r3, [r7, #20]
 800cdfc:	3301      	adds	r3, #1
 800cdfe:	617b      	str	r3, [r7, #20]
 800ce00:	697a      	ldr	r2, [r7, #20]
 800ce02:	687b      	ldr	r3, [r7, #4]
 800ce04:	429a      	cmp	r2, r3
 800ce06:	d3f0      	bcc.n	800cdea <HAL_CRC_Accumulate+0x32>
      temp = hcrc->Instance->DR;
 800ce08:	68fb      	ldr	r3, [r7, #12]
 800ce0a:	681b      	ldr	r3, [r3, #0]
 800ce0c:	681b      	ldr	r3, [r3, #0]
 800ce0e:	613b      	str	r3, [r7, #16]
      break;
 800ce10:	e00e      	b.n	800ce30 <HAL_CRC_Accumulate+0x78>
      temp = CRC_Handle_8(hcrc, (uint8_t *)pBuffer, BufferLength);
 800ce12:	687a      	ldr	r2, [r7, #4]
 800ce14:	68b9      	ldr	r1, [r7, #8]
 800ce16:	68f8      	ldr	r0, [r7, #12]
 800ce18:	f000 f812 	bl	800ce40 <CRC_Handle_8>
 800ce1c:	6138      	str	r0, [r7, #16]
      break;
 800ce1e:	e007      	b.n	800ce30 <HAL_CRC_Accumulate+0x78>
      temp = CRC_Handle_16(hcrc, (uint16_t *)(void *)pBuffer, BufferLength);    /* Derogation MisraC2012 R.11.5 */
 800ce20:	687a      	ldr	r2, [r7, #4]
 800ce22:	68b9      	ldr	r1, [r7, #8]
 800ce24:	68f8      	ldr	r0, [r7, #12]
 800ce26:	f000 f89b 	bl	800cf60 <CRC_Handle_16>
 800ce2a:	6138      	str	r0, [r7, #16]
      break;
 800ce2c:	e000      	b.n	800ce30 <HAL_CRC_Accumulate+0x78>
      break;
 800ce2e:	bf00      	nop
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 800ce30:	68fb      	ldr	r3, [r7, #12]
 800ce32:	2201      	movs	r2, #1
 800ce34:	775a      	strb	r2, [r3, #29]

  /* Return the CRC computed value */
  return temp;
 800ce36:	693b      	ldr	r3, [r7, #16]
}
 800ce38:	4618      	mov	r0, r3
 800ce3a:	3718      	adds	r7, #24
 800ce3c:	46bd      	mov	sp, r7
 800ce3e:	bd80      	pop	{r7, pc}

0800ce40 <CRC_Handle_8>:
  * @param  pBuffer pointer to the input data buffer
  * @param  BufferLength input data buffer length
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
static uint32_t CRC_Handle_8(CRC_HandleTypeDef *hcrc, uint8_t pBuffer[], uint32_t BufferLength)
{
 800ce40:	b480      	push	{r7}
 800ce42:	b089      	sub	sp, #36	@ 0x24
 800ce44:	af00      	add	r7, sp, #0
 800ce46:	60f8      	str	r0, [r7, #12]
 800ce48:	60b9      	str	r1, [r7, #8]
 800ce4a:	607a      	str	r2, [r7, #4]
  __IO uint16_t *pReg;

  /* Processing time optimization: 4 bytes are entered in a row with a single word write,
   * last bytes must be carefully fed to the CRC calculator to ensure a correct type
   * handling by the peripheral */
  for (i = 0U; i < (BufferLength / 4U); i++)
 800ce4c:	2300      	movs	r3, #0
 800ce4e:	61fb      	str	r3, [r7, #28]
 800ce50:	e023      	b.n	800ce9a <CRC_Handle_8+0x5a>
  {
    hcrc->Instance->DR = ((uint32_t)pBuffer[4U * i] << 24U) | \
 800ce52:	69fb      	ldr	r3, [r7, #28]
 800ce54:	009b      	lsls	r3, r3, #2
 800ce56:	68ba      	ldr	r2, [r7, #8]
 800ce58:	4413      	add	r3, r2
 800ce5a:	781b      	ldrb	r3, [r3, #0]
 800ce5c:	061a      	lsls	r2, r3, #24
                         ((uint32_t)pBuffer[(4U * i) + 1U] << 16U) | \
 800ce5e:	69fb      	ldr	r3, [r7, #28]
 800ce60:	009b      	lsls	r3, r3, #2
 800ce62:	3301      	adds	r3, #1
 800ce64:	68b9      	ldr	r1, [r7, #8]
 800ce66:	440b      	add	r3, r1
 800ce68:	781b      	ldrb	r3, [r3, #0]
 800ce6a:	041b      	lsls	r3, r3, #16
    hcrc->Instance->DR = ((uint32_t)pBuffer[4U * i] << 24U) | \
 800ce6c:	431a      	orrs	r2, r3
                         ((uint32_t)pBuffer[(4U * i) + 2U] << 8U)  | \
 800ce6e:	69fb      	ldr	r3, [r7, #28]
 800ce70:	009b      	lsls	r3, r3, #2
 800ce72:	3302      	adds	r3, #2
 800ce74:	68b9      	ldr	r1, [r7, #8]
 800ce76:	440b      	add	r3, r1
 800ce78:	781b      	ldrb	r3, [r3, #0]
 800ce7a:	021b      	lsls	r3, r3, #8
                         ((uint32_t)pBuffer[(4U * i) + 1U] << 16U) | \
 800ce7c:	431a      	orrs	r2, r3
                         (uint32_t)pBuffer[(4U * i) + 3U];
 800ce7e:	69fb      	ldr	r3, [r7, #28]
 800ce80:	009b      	lsls	r3, r3, #2
 800ce82:	3303      	adds	r3, #3
 800ce84:	68b9      	ldr	r1, [r7, #8]
 800ce86:	440b      	add	r3, r1
 800ce88:	781b      	ldrb	r3, [r3, #0]
 800ce8a:	4619      	mov	r1, r3
    hcrc->Instance->DR = ((uint32_t)pBuffer[4U * i] << 24U) | \
 800ce8c:	68fb      	ldr	r3, [r7, #12]
 800ce8e:	681b      	ldr	r3, [r3, #0]
                         ((uint32_t)pBuffer[(4U * i) + 2U] << 8U)  | \
 800ce90:	430a      	orrs	r2, r1
    hcrc->Instance->DR = ((uint32_t)pBuffer[4U * i] << 24U) | \
 800ce92:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < (BufferLength / 4U); i++)
 800ce94:	69fb      	ldr	r3, [r7, #28]
 800ce96:	3301      	adds	r3, #1
 800ce98:	61fb      	str	r3, [r7, #28]
 800ce9a:	687b      	ldr	r3, [r7, #4]
 800ce9c:	089b      	lsrs	r3, r3, #2
 800ce9e:	69fa      	ldr	r2, [r7, #28]
 800cea0:	429a      	cmp	r2, r3
 800cea2:	d3d6      	bcc.n	800ce52 <CRC_Handle_8+0x12>
  }
  /* last bytes specific handling */
  if ((BufferLength % 4U) != 0U)
 800cea4:	687b      	ldr	r3, [r7, #4]
 800cea6:	f003 0303 	and.w	r3, r3, #3
 800ceaa:	2b00      	cmp	r3, #0
 800ceac:	d04f      	beq.n	800cf4e <CRC_Handle_8+0x10e>
  {
    if ((BufferLength % 4U) == 1U)
 800ceae:	687b      	ldr	r3, [r7, #4]
 800ceb0:	f003 0303 	and.w	r3, r3, #3
 800ceb4:	2b01      	cmp	r3, #1
 800ceb6:	d107      	bne.n	800cec8 <CRC_Handle_8+0x88>
    {
      *(__IO uint8_t *)(__IO void *)(&hcrc->Instance->DR) = pBuffer[4U * i];         /* Derogation MisraC2012 R.11.5 */
 800ceb8:	69fb      	ldr	r3, [r7, #28]
 800ceba:	009b      	lsls	r3, r3, #2
 800cebc:	68ba      	ldr	r2, [r7, #8]
 800cebe:	4413      	add	r3, r2
 800cec0:	68fa      	ldr	r2, [r7, #12]
 800cec2:	6812      	ldr	r2, [r2, #0]
 800cec4:	781b      	ldrb	r3, [r3, #0]
 800cec6:	7013      	strb	r3, [r2, #0]
    }
    if ((BufferLength % 4U) == 2U)
 800cec8:	687b      	ldr	r3, [r7, #4]
 800ceca:	f003 0303 	and.w	r3, r3, #3
 800cece:	2b02      	cmp	r3, #2
 800ced0:	d117      	bne.n	800cf02 <CRC_Handle_8+0xc2>
    {
      data = ((uint16_t)(pBuffer[4U * i]) << 8U) | (uint16_t)pBuffer[(4U * i) + 1U];
 800ced2:	69fb      	ldr	r3, [r7, #28]
 800ced4:	009b      	lsls	r3, r3, #2
 800ced6:	68ba      	ldr	r2, [r7, #8]
 800ced8:	4413      	add	r3, r2
 800ceda:	781b      	ldrb	r3, [r3, #0]
 800cedc:	b21b      	sxth	r3, r3
 800cede:	021b      	lsls	r3, r3, #8
 800cee0:	b21a      	sxth	r2, r3
 800cee2:	69fb      	ldr	r3, [r7, #28]
 800cee4:	009b      	lsls	r3, r3, #2
 800cee6:	3301      	adds	r3, #1
 800cee8:	68b9      	ldr	r1, [r7, #8]
 800ceea:	440b      	add	r3, r1
 800ceec:	781b      	ldrb	r3, [r3, #0]
 800ceee:	b21b      	sxth	r3, r3
 800cef0:	4313      	orrs	r3, r2
 800cef2:	b21b      	sxth	r3, r3
 800cef4:	837b      	strh	r3, [r7, #26]
      pReg = (__IO uint16_t *)(__IO void *)(&hcrc->Instance->DR);                    /* Derogation MisraC2012 R.11.5 */
 800cef6:	68fb      	ldr	r3, [r7, #12]
 800cef8:	681b      	ldr	r3, [r3, #0]
 800cefa:	617b      	str	r3, [r7, #20]
      *pReg = data;
 800cefc:	697b      	ldr	r3, [r7, #20]
 800cefe:	8b7a      	ldrh	r2, [r7, #26]
 800cf00:	801a      	strh	r2, [r3, #0]
    }
    if ((BufferLength % 4U) == 3U)
 800cf02:	687b      	ldr	r3, [r7, #4]
 800cf04:	f003 0303 	and.w	r3, r3, #3
 800cf08:	2b03      	cmp	r3, #3
 800cf0a:	d120      	bne.n	800cf4e <CRC_Handle_8+0x10e>
    {
      data = ((uint16_t)(pBuffer[4U * i]) << 8U) | (uint16_t)pBuffer[(4U * i) + 1U];
 800cf0c:	69fb      	ldr	r3, [r7, #28]
 800cf0e:	009b      	lsls	r3, r3, #2
 800cf10:	68ba      	ldr	r2, [r7, #8]
 800cf12:	4413      	add	r3, r2
 800cf14:	781b      	ldrb	r3, [r3, #0]
 800cf16:	b21b      	sxth	r3, r3
 800cf18:	021b      	lsls	r3, r3, #8
 800cf1a:	b21a      	sxth	r2, r3
 800cf1c:	69fb      	ldr	r3, [r7, #28]
 800cf1e:	009b      	lsls	r3, r3, #2
 800cf20:	3301      	adds	r3, #1
 800cf22:	68b9      	ldr	r1, [r7, #8]
 800cf24:	440b      	add	r3, r1
 800cf26:	781b      	ldrb	r3, [r3, #0]
 800cf28:	b21b      	sxth	r3, r3
 800cf2a:	4313      	orrs	r3, r2
 800cf2c:	b21b      	sxth	r3, r3
 800cf2e:	837b      	strh	r3, [r7, #26]
      pReg = (__IO uint16_t *)(__IO void *)(&hcrc->Instance->DR);                    /* Derogation MisraC2012 R.11.5 */
 800cf30:	68fb      	ldr	r3, [r7, #12]
 800cf32:	681b      	ldr	r3, [r3, #0]
 800cf34:	617b      	str	r3, [r7, #20]
      *pReg = data;
 800cf36:	697b      	ldr	r3, [r7, #20]
 800cf38:	8b7a      	ldrh	r2, [r7, #26]
 800cf3a:	801a      	strh	r2, [r3, #0]

      *(__IO uint8_t *)(__IO void *)(&hcrc->Instance->DR) = pBuffer[(4U * i) + 2U];  /* Derogation MisraC2012 R.11.5 */
 800cf3c:	69fb      	ldr	r3, [r7, #28]
 800cf3e:	009b      	lsls	r3, r3, #2
 800cf40:	3302      	adds	r3, #2
 800cf42:	68ba      	ldr	r2, [r7, #8]
 800cf44:	4413      	add	r3, r2
 800cf46:	68fa      	ldr	r2, [r7, #12]
 800cf48:	6812      	ldr	r2, [r2, #0]
 800cf4a:	781b      	ldrb	r3, [r3, #0]
 800cf4c:	7013      	strb	r3, [r2, #0]
    }
  }

  /* Return the CRC computed value */
  return hcrc->Instance->DR;
 800cf4e:	68fb      	ldr	r3, [r7, #12]
 800cf50:	681b      	ldr	r3, [r3, #0]
 800cf52:	681b      	ldr	r3, [r3, #0]
}
 800cf54:	4618      	mov	r0, r3
 800cf56:	3724      	adds	r7, #36	@ 0x24
 800cf58:	46bd      	mov	sp, r7
 800cf5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf5e:	4770      	bx	lr

0800cf60 <CRC_Handle_16>:
  * @param  pBuffer pointer to the input data buffer
  * @param  BufferLength input data buffer length
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
static uint32_t CRC_Handle_16(CRC_HandleTypeDef *hcrc, uint16_t pBuffer[], uint32_t BufferLength)
{
 800cf60:	b480      	push	{r7}
 800cf62:	b087      	sub	sp, #28
 800cf64:	af00      	add	r7, sp, #0
 800cf66:	60f8      	str	r0, [r7, #12]
 800cf68:	60b9      	str	r1, [r7, #8]
 800cf6a:	607a      	str	r2, [r7, #4]
  __IO uint16_t *pReg;

  /* Processing time optimization: 2 HalfWords are entered in a row with a single word write,
   * in case of odd length, last HalfWord must be carefully fed to the CRC calculator to ensure
   * a correct type handling by the peripheral */
  for (i = 0U; i < (BufferLength / 2U); i++)
 800cf6c:	2300      	movs	r3, #0
 800cf6e:	617b      	str	r3, [r7, #20]
 800cf70:	e013      	b.n	800cf9a <CRC_Handle_16+0x3a>
  {
    hcrc->Instance->DR = ((uint32_t)pBuffer[2U * i] << 16U) | (uint32_t)pBuffer[(2U * i) + 1U];
 800cf72:	697b      	ldr	r3, [r7, #20]
 800cf74:	009b      	lsls	r3, r3, #2
 800cf76:	68ba      	ldr	r2, [r7, #8]
 800cf78:	4413      	add	r3, r2
 800cf7a:	881b      	ldrh	r3, [r3, #0]
 800cf7c:	041a      	lsls	r2, r3, #16
 800cf7e:	697b      	ldr	r3, [r7, #20]
 800cf80:	009b      	lsls	r3, r3, #2
 800cf82:	3302      	adds	r3, #2
 800cf84:	68b9      	ldr	r1, [r7, #8]
 800cf86:	440b      	add	r3, r1
 800cf88:	881b      	ldrh	r3, [r3, #0]
 800cf8a:	4619      	mov	r1, r3
 800cf8c:	68fb      	ldr	r3, [r7, #12]
 800cf8e:	681b      	ldr	r3, [r3, #0]
 800cf90:	430a      	orrs	r2, r1
 800cf92:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < (BufferLength / 2U); i++)
 800cf94:	697b      	ldr	r3, [r7, #20]
 800cf96:	3301      	adds	r3, #1
 800cf98:	617b      	str	r3, [r7, #20]
 800cf9a:	687b      	ldr	r3, [r7, #4]
 800cf9c:	085b      	lsrs	r3, r3, #1
 800cf9e:	697a      	ldr	r2, [r7, #20]
 800cfa0:	429a      	cmp	r2, r3
 800cfa2:	d3e6      	bcc.n	800cf72 <CRC_Handle_16+0x12>
  }
  if ((BufferLength % 2U) != 0U)
 800cfa4:	687b      	ldr	r3, [r7, #4]
 800cfa6:	f003 0301 	and.w	r3, r3, #1
 800cfaa:	2b00      	cmp	r3, #0
 800cfac:	d009      	beq.n	800cfc2 <CRC_Handle_16+0x62>
  {
    pReg = (__IO uint16_t *)(__IO void *)(&hcrc->Instance->DR);                 /* Derogation MisraC2012 R.11.5 */
 800cfae:	68fb      	ldr	r3, [r7, #12]
 800cfb0:	681b      	ldr	r3, [r3, #0]
 800cfb2:	613b      	str	r3, [r7, #16]
    *pReg = pBuffer[2U * i];
 800cfb4:	697b      	ldr	r3, [r7, #20]
 800cfb6:	009b      	lsls	r3, r3, #2
 800cfb8:	68ba      	ldr	r2, [r7, #8]
 800cfba:	4413      	add	r3, r2
 800cfbc:	881a      	ldrh	r2, [r3, #0]
 800cfbe:	693b      	ldr	r3, [r7, #16]
 800cfc0:	801a      	strh	r2, [r3, #0]
  }

  /* Return the CRC computed value */
  return hcrc->Instance->DR;
 800cfc2:	68fb      	ldr	r3, [r7, #12]
 800cfc4:	681b      	ldr	r3, [r3, #0]
 800cfc6:	681b      	ldr	r3, [r3, #0]
}
 800cfc8:	4618      	mov	r0, r3
 800cfca:	371c      	adds	r7, #28
 800cfcc:	46bd      	mov	sp, r7
 800cfce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfd2:	4770      	bx	lr

0800cfd4 <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 800cfd4:	b480      	push	{r7}
 800cfd6:	b087      	sub	sp, #28
 800cfd8:	af00      	add	r7, sp, #0
 800cfda:	60f8      	str	r0, [r7, #12]
 800cfdc:	60b9      	str	r1, [r7, #8]
 800cfde:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800cfe0:	2300      	movs	r3, #0
 800cfe2:	75fb      	strb	r3, [r7, #23]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 800cfe4:	231f      	movs	r3, #31
 800cfe6:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_CRC_POL_LENGTH(PolyLength));

  /* Ensure that the generating polynomial is odd */
  if ((Pol & (uint32_t)(0x1U)) ==  0U)
 800cfe8:	68bb      	ldr	r3, [r7, #8]
 800cfea:	f003 0301 	and.w	r3, r3, #1
 800cfee:	2b00      	cmp	r3, #0
 800cff0:	d102      	bne.n	800cff8 <HAL_CRCEx_Polynomial_Set+0x24>
  {
    status =  HAL_ERROR;
 800cff2:	2301      	movs	r3, #1
 800cff4:	75fb      	strb	r3, [r7, #23]
 800cff6:	e063      	b.n	800d0c0 <HAL_CRCEx_Polynomial_Set+0xec>
     * definition. HAL_ERROR is reported if Pol degree is
     * larger than that indicated by PolyLength.
     * Look for MSB position: msb will contain the degree of
     *  the second to the largest polynomial member. E.g., for
     *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
    while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 800cff8:	bf00      	nop
 800cffa:	693b      	ldr	r3, [r7, #16]
 800cffc:	1e5a      	subs	r2, r3, #1
 800cffe:	613a      	str	r2, [r7, #16]
 800d000:	2b00      	cmp	r3, #0
 800d002:	d009      	beq.n	800d018 <HAL_CRCEx_Polynomial_Set+0x44>
 800d004:	693b      	ldr	r3, [r7, #16]
 800d006:	f003 031f 	and.w	r3, r3, #31
 800d00a:	68ba      	ldr	r2, [r7, #8]
 800d00c:	fa22 f303 	lsr.w	r3, r2, r3
 800d010:	f003 0301 	and.w	r3, r3, #1
 800d014:	2b00      	cmp	r3, #0
 800d016:	d0f0      	beq.n	800cffa <HAL_CRCEx_Polynomial_Set+0x26>
    {
    }

    switch (PolyLength)
 800d018:	687b      	ldr	r3, [r7, #4]
 800d01a:	2b18      	cmp	r3, #24
 800d01c:	d846      	bhi.n	800d0ac <HAL_CRCEx_Polynomial_Set+0xd8>
 800d01e:	a201      	add	r2, pc, #4	@ (adr r2, 800d024 <HAL_CRCEx_Polynomial_Set+0x50>)
 800d020:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d024:	0800d0b3 	.word	0x0800d0b3
 800d028:	0800d0ad 	.word	0x0800d0ad
 800d02c:	0800d0ad 	.word	0x0800d0ad
 800d030:	0800d0ad 	.word	0x0800d0ad
 800d034:	0800d0ad 	.word	0x0800d0ad
 800d038:	0800d0ad 	.word	0x0800d0ad
 800d03c:	0800d0ad 	.word	0x0800d0ad
 800d040:	0800d0ad 	.word	0x0800d0ad
 800d044:	0800d0a1 	.word	0x0800d0a1
 800d048:	0800d0ad 	.word	0x0800d0ad
 800d04c:	0800d0ad 	.word	0x0800d0ad
 800d050:	0800d0ad 	.word	0x0800d0ad
 800d054:	0800d0ad 	.word	0x0800d0ad
 800d058:	0800d0ad 	.word	0x0800d0ad
 800d05c:	0800d0ad 	.word	0x0800d0ad
 800d060:	0800d0ad 	.word	0x0800d0ad
 800d064:	0800d095 	.word	0x0800d095
 800d068:	0800d0ad 	.word	0x0800d0ad
 800d06c:	0800d0ad 	.word	0x0800d0ad
 800d070:	0800d0ad 	.word	0x0800d0ad
 800d074:	0800d0ad 	.word	0x0800d0ad
 800d078:	0800d0ad 	.word	0x0800d0ad
 800d07c:	0800d0ad 	.word	0x0800d0ad
 800d080:	0800d0ad 	.word	0x0800d0ad
 800d084:	0800d089 	.word	0x0800d089
    {

      case CRC_POLYLENGTH_7B:
        if (msb >= HAL_CRC_LENGTH_7B)
 800d088:	693b      	ldr	r3, [r7, #16]
 800d08a:	2b06      	cmp	r3, #6
 800d08c:	d913      	bls.n	800d0b6 <HAL_CRCEx_Polynomial_Set+0xe2>
        {
          status =   HAL_ERROR;
 800d08e:	2301      	movs	r3, #1
 800d090:	75fb      	strb	r3, [r7, #23]
        }
        break;
 800d092:	e010      	b.n	800d0b6 <HAL_CRCEx_Polynomial_Set+0xe2>
      case CRC_POLYLENGTH_8B:
        if (msb >= HAL_CRC_LENGTH_8B)
 800d094:	693b      	ldr	r3, [r7, #16]
 800d096:	2b07      	cmp	r3, #7
 800d098:	d90f      	bls.n	800d0ba <HAL_CRCEx_Polynomial_Set+0xe6>
        {
          status =   HAL_ERROR;
 800d09a:	2301      	movs	r3, #1
 800d09c:	75fb      	strb	r3, [r7, #23]
        }
        break;
 800d09e:	e00c      	b.n	800d0ba <HAL_CRCEx_Polynomial_Set+0xe6>
      case CRC_POLYLENGTH_16B:
        if (msb >= HAL_CRC_LENGTH_16B)
 800d0a0:	693b      	ldr	r3, [r7, #16]
 800d0a2:	2b0f      	cmp	r3, #15
 800d0a4:	d90b      	bls.n	800d0be <HAL_CRCEx_Polynomial_Set+0xea>
        {
          status =   HAL_ERROR;
 800d0a6:	2301      	movs	r3, #1
 800d0a8:	75fb      	strb	r3, [r7, #23]
        }
        break;
 800d0aa:	e008      	b.n	800d0be <HAL_CRCEx_Polynomial_Set+0xea>

      case CRC_POLYLENGTH_32B:
        /* no polynomial definition vs. polynomial length issue possible */
        break;
      default:
        status =  HAL_ERROR;
 800d0ac:	2301      	movs	r3, #1
 800d0ae:	75fb      	strb	r3, [r7, #23]
        break;
 800d0b0:	e006      	b.n	800d0c0 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 800d0b2:	bf00      	nop
 800d0b4:	e004      	b.n	800d0c0 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 800d0b6:	bf00      	nop
 800d0b8:	e002      	b.n	800d0c0 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 800d0ba:	bf00      	nop
 800d0bc:	e000      	b.n	800d0c0 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 800d0be:	bf00      	nop
    }
  }
  if (status == HAL_OK)
 800d0c0:	7dfb      	ldrb	r3, [r7, #23]
 800d0c2:	2b00      	cmp	r3, #0
 800d0c4:	d10d      	bne.n	800d0e2 <HAL_CRCEx_Polynomial_Set+0x10e>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 800d0c6:	68fb      	ldr	r3, [r7, #12]
 800d0c8:	681b      	ldr	r3, [r3, #0]
 800d0ca:	68ba      	ldr	r2, [r7, #8]
 800d0cc:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 800d0ce:	68fb      	ldr	r3, [r7, #12]
 800d0d0:	681b      	ldr	r3, [r3, #0]
 800d0d2:	689b      	ldr	r3, [r3, #8]
 800d0d4:	f023 0118 	bic.w	r1, r3, #24
 800d0d8:	68fb      	ldr	r3, [r7, #12]
 800d0da:	681b      	ldr	r3, [r3, #0]
 800d0dc:	687a      	ldr	r2, [r7, #4]
 800d0de:	430a      	orrs	r2, r1
 800d0e0:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 800d0e2:	7dfb      	ldrb	r3, [r7, #23]
}
 800d0e4:	4618      	mov	r0, r3
 800d0e6:	371c      	adds	r7, #28
 800d0e8:	46bd      	mov	sp, r7
 800d0ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0ee:	4770      	bx	lr

0800d0f0 <HAL_CRCEx_Input_Data_Reverse>:
  *          @arg @ref CRC_INPUTDATA_INVERSION_HALFWORD HalfWord-wise bit reversal
  *          @arg @ref CRC_INPUTDATA_INVERSION_WORD     Word-wise bit reversal
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Input_Data_Reverse(CRC_HandleTypeDef *hcrc, uint32_t InputReverseMode)
{
 800d0f0:	b480      	push	{r7}
 800d0f2:	b083      	sub	sp, #12
 800d0f4:	af00      	add	r7, sp, #0
 800d0f6:	6078      	str	r0, [r7, #4]
 800d0f8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(InputReverseMode));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_BUSY;
 800d0fa:	687b      	ldr	r3, [r7, #4]
 800d0fc:	2202      	movs	r2, #2
 800d0fe:	775a      	strb	r2, [r3, #29]

  /* set input data inversion mode */
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, InputReverseMode);
 800d100:	687b      	ldr	r3, [r7, #4]
 800d102:	681b      	ldr	r3, [r3, #0]
 800d104:	689b      	ldr	r3, [r3, #8]
 800d106:	f023 0160 	bic.w	r1, r3, #96	@ 0x60
 800d10a:	687b      	ldr	r3, [r7, #4]
 800d10c:	681b      	ldr	r3, [r3, #0]
 800d10e:	683a      	ldr	r2, [r7, #0]
 800d110:	430a      	orrs	r2, r1
 800d112:	609a      	str	r2, [r3, #8]
  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 800d114:	687b      	ldr	r3, [r7, #4]
 800d116:	2201      	movs	r2, #1
 800d118:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 800d11a:	2300      	movs	r3, #0
}
 800d11c:	4618      	mov	r0, r3
 800d11e:	370c      	adds	r7, #12
 800d120:	46bd      	mov	sp, r7
 800d122:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d126:	4770      	bx	lr

0800d128 <HAL_CRCEx_Output_Data_Reverse>:
  *          @arg @ref CRC_OUTPUTDATA_INVERSION_DISABLE no CRC inversion (default value)
  *          @arg @ref CRC_OUTPUTDATA_INVERSION_ENABLE  bit-level inversion (e.g. for a 8-bit CRC: 0xB5 becomes 0xAD)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Output_Data_Reverse(CRC_HandleTypeDef *hcrc, uint32_t OutputReverseMode)
{
 800d128:	b480      	push	{r7}
 800d12a:	b083      	sub	sp, #12
 800d12c:	af00      	add	r7, sp, #0
 800d12e:	6078      	str	r0, [r7, #4]
 800d130:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(OutputReverseMode));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_BUSY;
 800d132:	687b      	ldr	r3, [r7, #4]
 800d134:	2202      	movs	r2, #2
 800d136:	775a      	strb	r2, [r3, #29]

  /* set output data inversion mode */
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, OutputReverseMode);
 800d138:	687b      	ldr	r3, [r7, #4]
 800d13a:	681b      	ldr	r3, [r3, #0]
 800d13c:	689b      	ldr	r3, [r3, #8]
 800d13e:	f023 0180 	bic.w	r1, r3, #128	@ 0x80
 800d142:	687b      	ldr	r3, [r7, #4]
 800d144:	681b      	ldr	r3, [r3, #0]
 800d146:	683a      	ldr	r2, [r7, #0]
 800d148:	430a      	orrs	r2, r1
 800d14a:	609a      	str	r2, [r3, #8]

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 800d14c:	687b      	ldr	r3, [r7, #4]
 800d14e:	2201      	movs	r2, #1
 800d150:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 800d152:	2300      	movs	r3, #0
}
 800d154:	4618      	mov	r0, r3
 800d156:	370c      	adds	r7, #12
 800d158:	46bd      	mov	sp, r7
 800d15a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d15e:	4770      	bx	lr

0800d160 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800d160:	b480      	push	{r7}
 800d162:	b085      	sub	sp, #20
 800d164:	af00      	add	r7, sp, #0
 800d166:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 800d168:	687b      	ldr	r3, [r7, #4]
 800d16a:	2b00      	cmp	r3, #0
 800d16c:	d101      	bne.n	800d172 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 800d16e:	2301      	movs	r3, #1
 800d170:	e098      	b.n	800d2a4 <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 800d172:	687b      	ldr	r3, [r7, #4]
 800d174:	681b      	ldr	r3, [r3, #0]
 800d176:	461a      	mov	r2, r3
 800d178:	4b4d      	ldr	r3, [pc, #308]	@ (800d2b0 <HAL_DMA_Init+0x150>)
 800d17a:	429a      	cmp	r2, r3
 800d17c:	d80f      	bhi.n	800d19e <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 800d17e:	687b      	ldr	r3, [r7, #4]
 800d180:	681b      	ldr	r3, [r3, #0]
 800d182:	461a      	mov	r2, r3
 800d184:	4b4b      	ldr	r3, [pc, #300]	@ (800d2b4 <HAL_DMA_Init+0x154>)
 800d186:	4413      	add	r3, r2
 800d188:	4a4b      	ldr	r2, [pc, #300]	@ (800d2b8 <HAL_DMA_Init+0x158>)
 800d18a:	fba2 2303 	umull	r2, r3, r2, r3
 800d18e:	091b      	lsrs	r3, r3, #4
 800d190:	009a      	lsls	r2, r3, #2
 800d192:	687b      	ldr	r3, [r7, #4]
 800d194:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 800d196:	687b      	ldr	r3, [r7, #4]
 800d198:	4a48      	ldr	r2, [pc, #288]	@ (800d2bc <HAL_DMA_Init+0x15c>)
 800d19a:	641a      	str	r2, [r3, #64]	@ 0x40
 800d19c:	e00e      	b.n	800d1bc <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 800d19e:	687b      	ldr	r3, [r7, #4]
 800d1a0:	681b      	ldr	r3, [r3, #0]
 800d1a2:	461a      	mov	r2, r3
 800d1a4:	4b46      	ldr	r3, [pc, #280]	@ (800d2c0 <HAL_DMA_Init+0x160>)
 800d1a6:	4413      	add	r3, r2
 800d1a8:	4a43      	ldr	r2, [pc, #268]	@ (800d2b8 <HAL_DMA_Init+0x158>)
 800d1aa:	fba2 2303 	umull	r2, r3, r2, r3
 800d1ae:	091b      	lsrs	r3, r3, #4
 800d1b0:	009a      	lsls	r2, r3, #2
 800d1b2:	687b      	ldr	r3, [r7, #4]
 800d1b4:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 800d1b6:	687b      	ldr	r3, [r7, #4]
 800d1b8:	4a42      	ldr	r2, [pc, #264]	@ (800d2c4 <HAL_DMA_Init+0x164>)
 800d1ba:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800d1bc:	687b      	ldr	r3, [r7, #4]
 800d1be:	2202      	movs	r2, #2
 800d1c0:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 800d1c4:	687b      	ldr	r3, [r7, #4]
 800d1c6:	681b      	ldr	r3, [r3, #0]
 800d1c8:	681b      	ldr	r3, [r3, #0]
 800d1ca:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 800d1cc:	68fb      	ldr	r3, [r7, #12]
 800d1ce:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 800d1d2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800d1d6:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 800d1d8:	687b      	ldr	r3, [r7, #4]
 800d1da:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800d1dc:	687b      	ldr	r3, [r7, #4]
 800d1de:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 800d1e0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800d1e2:	687b      	ldr	r3, [r7, #4]
 800d1e4:	691b      	ldr	r3, [r3, #16]
 800d1e6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800d1e8:	687b      	ldr	r3, [r7, #4]
 800d1ea:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800d1ec:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800d1ee:	687b      	ldr	r3, [r7, #4]
 800d1f0:	699b      	ldr	r3, [r3, #24]
 800d1f2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800d1f4:	687b      	ldr	r3, [r7, #4]
 800d1f6:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800d1f8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800d1fa:	687b      	ldr	r3, [r7, #4]
 800d1fc:	6a1b      	ldr	r3, [r3, #32]
 800d1fe:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 800d200:	68fa      	ldr	r2, [r7, #12]
 800d202:	4313      	orrs	r3, r2
 800d204:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800d206:	687b      	ldr	r3, [r7, #4]
 800d208:	681b      	ldr	r3, [r3, #0]
 800d20a:	68fa      	ldr	r2, [r7, #12]
 800d20c:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if (hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 800d20e:	687b      	ldr	r3, [r7, #4]
 800d210:	689b      	ldr	r3, [r3, #8]
 800d212:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800d216:	d039      	beq.n	800d28c <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 800d218:	687b      	ldr	r3, [r7, #4]
 800d21a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d21c:	4a27      	ldr	r2, [pc, #156]	@ (800d2bc <HAL_DMA_Init+0x15c>)
 800d21e:	4293      	cmp	r3, r2
 800d220:	d11a      	bne.n	800d258 <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 800d222:	4b29      	ldr	r3, [pc, #164]	@ (800d2c8 <HAL_DMA_Init+0x168>)
 800d224:	681a      	ldr	r2, [r3, #0]
 800d226:	687b      	ldr	r3, [r7, #4]
 800d228:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800d22a:	f003 031c 	and.w	r3, r3, #28
 800d22e:	210f      	movs	r1, #15
 800d230:	fa01 f303 	lsl.w	r3, r1, r3
 800d234:	43db      	mvns	r3, r3
 800d236:	4924      	ldr	r1, [pc, #144]	@ (800d2c8 <HAL_DMA_Init+0x168>)
 800d238:	4013      	ands	r3, r2
 800d23a:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 800d23c:	4b22      	ldr	r3, [pc, #136]	@ (800d2c8 <HAL_DMA_Init+0x168>)
 800d23e:	681a      	ldr	r2, [r3, #0]
 800d240:	687b      	ldr	r3, [r7, #4]
 800d242:	6859      	ldr	r1, [r3, #4]
 800d244:	687b      	ldr	r3, [r7, #4]
 800d246:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800d248:	f003 031c 	and.w	r3, r3, #28
 800d24c:	fa01 f303 	lsl.w	r3, r1, r3
 800d250:	491d      	ldr	r1, [pc, #116]	@ (800d2c8 <HAL_DMA_Init+0x168>)
 800d252:	4313      	orrs	r3, r2
 800d254:	600b      	str	r3, [r1, #0]
 800d256:	e019      	b.n	800d28c <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 800d258:	4b1c      	ldr	r3, [pc, #112]	@ (800d2cc <HAL_DMA_Init+0x16c>)
 800d25a:	681a      	ldr	r2, [r3, #0]
 800d25c:	687b      	ldr	r3, [r7, #4]
 800d25e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800d260:	f003 031c 	and.w	r3, r3, #28
 800d264:	210f      	movs	r1, #15
 800d266:	fa01 f303 	lsl.w	r3, r1, r3
 800d26a:	43db      	mvns	r3, r3
 800d26c:	4917      	ldr	r1, [pc, #92]	@ (800d2cc <HAL_DMA_Init+0x16c>)
 800d26e:	4013      	ands	r3, r2
 800d270:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 800d272:	4b16      	ldr	r3, [pc, #88]	@ (800d2cc <HAL_DMA_Init+0x16c>)
 800d274:	681a      	ldr	r2, [r3, #0]
 800d276:	687b      	ldr	r3, [r7, #4]
 800d278:	6859      	ldr	r1, [r3, #4]
 800d27a:	687b      	ldr	r3, [r7, #4]
 800d27c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800d27e:	f003 031c 	and.w	r3, r3, #28
 800d282:	fa01 f303 	lsl.w	r3, r1, r3
 800d286:	4911      	ldr	r1, [pc, #68]	@ (800d2cc <HAL_DMA_Init+0x16c>)
 800d288:	4313      	orrs	r3, r2
 800d28a:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
  /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
  /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800d28c:	687b      	ldr	r3, [r7, #4]
 800d28e:	2200      	movs	r2, #0
 800d290:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 800d292:	687b      	ldr	r3, [r7, #4]
 800d294:	2201      	movs	r2, #1
 800d296:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 800d29a:	687b      	ldr	r3, [r7, #4]
 800d29c:	2200      	movs	r2, #0
 800d29e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 800d2a2:	2300      	movs	r3, #0
}
 800d2a4:	4618      	mov	r0, r3
 800d2a6:	3714      	adds	r7, #20
 800d2a8:	46bd      	mov	sp, r7
 800d2aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2ae:	4770      	bx	lr
 800d2b0:	40020407 	.word	0x40020407
 800d2b4:	bffdfff8 	.word	0xbffdfff8
 800d2b8:	cccccccd 	.word	0xcccccccd
 800d2bc:	40020000 	.word	0x40020000
 800d2c0:	bffdfbf8 	.word	0xbffdfbf8
 800d2c4:	40020400 	.word	0x40020400
 800d2c8:	400200a8 	.word	0x400200a8
 800d2cc:	400204a8 	.word	0x400204a8

0800d2d0 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800d2d0:	b580      	push	{r7, lr}
 800d2d2:	b086      	sub	sp, #24
 800d2d4:	af00      	add	r7, sp, #0
 800d2d6:	60f8      	str	r0, [r7, #12]
 800d2d8:	60b9      	str	r1, [r7, #8]
 800d2da:	607a      	str	r2, [r7, #4]
 800d2dc:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800d2de:	2300      	movs	r3, #0
 800d2e0:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800d2e2:	68fb      	ldr	r3, [r7, #12]
 800d2e4:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800d2e8:	2b01      	cmp	r3, #1
 800d2ea:	d101      	bne.n	800d2f0 <HAL_DMA_Start_IT+0x20>
 800d2ec:	2302      	movs	r3, #2
 800d2ee:	e04b      	b.n	800d388 <HAL_DMA_Start_IT+0xb8>
 800d2f0:	68fb      	ldr	r3, [r7, #12]
 800d2f2:	2201      	movs	r2, #1
 800d2f4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 800d2f8:	68fb      	ldr	r3, [r7, #12]
 800d2fa:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 800d2fe:	b2db      	uxtb	r3, r3
 800d300:	2b01      	cmp	r3, #1
 800d302:	d13a      	bne.n	800d37a <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800d304:	68fb      	ldr	r3, [r7, #12]
 800d306:	2202      	movs	r2, #2
 800d308:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800d30c:	68fb      	ldr	r3, [r7, #12]
 800d30e:	2200      	movs	r2, #0
 800d310:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800d312:	68fb      	ldr	r3, [r7, #12]
 800d314:	681b      	ldr	r3, [r3, #0]
 800d316:	681a      	ldr	r2, [r3, #0]
 800d318:	68fb      	ldr	r3, [r7, #12]
 800d31a:	681b      	ldr	r3, [r3, #0]
 800d31c:	f022 0201 	bic.w	r2, r2, #1
 800d320:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800d322:	683b      	ldr	r3, [r7, #0]
 800d324:	687a      	ldr	r2, [r7, #4]
 800d326:	68b9      	ldr	r1, [r7, #8]
 800d328:	68f8      	ldr	r0, [r7, #12]
 800d32a:	f000 f92a 	bl	800d582 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 800d32e:	68fb      	ldr	r3, [r7, #12]
 800d330:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d332:	2b00      	cmp	r3, #0
 800d334:	d008      	beq.n	800d348 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800d336:	68fb      	ldr	r3, [r7, #12]
 800d338:	681b      	ldr	r3, [r3, #0]
 800d33a:	681a      	ldr	r2, [r3, #0]
 800d33c:	68fb      	ldr	r3, [r7, #12]
 800d33e:	681b      	ldr	r3, [r3, #0]
 800d340:	f042 020e 	orr.w	r2, r2, #14
 800d344:	601a      	str	r2, [r3, #0]
 800d346:	e00f      	b.n	800d368 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800d348:	68fb      	ldr	r3, [r7, #12]
 800d34a:	681b      	ldr	r3, [r3, #0]
 800d34c:	681a      	ldr	r2, [r3, #0]
 800d34e:	68fb      	ldr	r3, [r7, #12]
 800d350:	681b      	ldr	r3, [r3, #0]
 800d352:	f022 0204 	bic.w	r2, r2, #4
 800d356:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 800d358:	68fb      	ldr	r3, [r7, #12]
 800d35a:	681b      	ldr	r3, [r3, #0]
 800d35c:	681a      	ldr	r2, [r3, #0]
 800d35e:	68fb      	ldr	r3, [r7, #12]
 800d360:	681b      	ldr	r3, [r3, #0]
 800d362:	f042 020a 	orr.w	r2, r2, #10
 800d366:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800d368:	68fb      	ldr	r3, [r7, #12]
 800d36a:	681b      	ldr	r3, [r3, #0]
 800d36c:	681a      	ldr	r2, [r3, #0]
 800d36e:	68fb      	ldr	r3, [r7, #12]
 800d370:	681b      	ldr	r3, [r3, #0]
 800d372:	f042 0201 	orr.w	r2, r2, #1
 800d376:	601a      	str	r2, [r3, #0]
 800d378:	e005      	b.n	800d386 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800d37a:	68fb      	ldr	r3, [r7, #12]
 800d37c:	2200      	movs	r2, #0
 800d37e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 800d382:	2302      	movs	r3, #2
 800d384:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 800d386:	7dfb      	ldrb	r3, [r7, #23]
}
 800d388:	4618      	mov	r0, r3
 800d38a:	3718      	adds	r7, #24
 800d38c:	46bd      	mov	sp, r7
 800d38e:	bd80      	pop	{r7, pc}

0800d390 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800d390:	b480      	push	{r7}
 800d392:	b085      	sub	sp, #20
 800d394:	af00      	add	r7, sp, #0
 800d396:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800d398:	2300      	movs	r3, #0
 800d39a:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 800d39c:	687b      	ldr	r3, [r7, #4]
 800d39e:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 800d3a2:	b2db      	uxtb	r3, r3
 800d3a4:	2b02      	cmp	r3, #2
 800d3a6:	d008      	beq.n	800d3ba <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800d3a8:	687b      	ldr	r3, [r7, #4]
 800d3aa:	2204      	movs	r2, #4
 800d3ac:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800d3ae:	687b      	ldr	r3, [r7, #4]
 800d3b0:	2200      	movs	r2, #0
 800d3b2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 800d3b6:	2301      	movs	r3, #1
 800d3b8:	e022      	b.n	800d400 <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800d3ba:	687b      	ldr	r3, [r7, #4]
 800d3bc:	681b      	ldr	r3, [r3, #0]
 800d3be:	681a      	ldr	r2, [r3, #0]
 800d3c0:	687b      	ldr	r3, [r7, #4]
 800d3c2:	681b      	ldr	r3, [r3, #0]
 800d3c4:	f022 020e 	bic.w	r2, r2, #14
 800d3c8:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800d3ca:	687b      	ldr	r3, [r7, #4]
 800d3cc:	681b      	ldr	r3, [r3, #0]
 800d3ce:	681a      	ldr	r2, [r3, #0]
 800d3d0:	687b      	ldr	r3, [r7, #4]
 800d3d2:	681b      	ldr	r3, [r3, #0]
 800d3d4:	f022 0201 	bic.w	r2, r2, #1
 800d3d8:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800d3da:	687b      	ldr	r3, [r7, #4]
 800d3dc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800d3de:	f003 021c 	and.w	r2, r3, #28
 800d3e2:	687b      	ldr	r3, [r7, #4]
 800d3e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d3e6:	2101      	movs	r1, #1
 800d3e8:	fa01 f202 	lsl.w	r2, r1, r2
 800d3ec:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800d3ee:	687b      	ldr	r3, [r7, #4]
 800d3f0:	2201      	movs	r2, #1
 800d3f2:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800d3f6:	687b      	ldr	r3, [r7, #4]
 800d3f8:	2200      	movs	r2, #0
 800d3fa:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return status;
 800d3fe:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 800d400:	4618      	mov	r0, r3
 800d402:	3714      	adds	r7, #20
 800d404:	46bd      	mov	sp, r7
 800d406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d40a:	4770      	bx	lr

0800d40c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800d40c:	b580      	push	{r7, lr}
 800d40e:	b084      	sub	sp, #16
 800d410:	af00      	add	r7, sp, #0
 800d412:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800d414:	687b      	ldr	r3, [r7, #4]
 800d416:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d418:	681b      	ldr	r3, [r3, #0]
 800d41a:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800d41c:	687b      	ldr	r3, [r7, #4]
 800d41e:	681b      	ldr	r3, [r3, #0]
 800d420:	681b      	ldr	r3, [r3, #0]
 800d422:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 800d424:	687b      	ldr	r3, [r7, #4]
 800d426:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800d428:	f003 031c 	and.w	r3, r3, #28
 800d42c:	2204      	movs	r2, #4
 800d42e:	409a      	lsls	r2, r3
 800d430:	68fb      	ldr	r3, [r7, #12]
 800d432:	4013      	ands	r3, r2
 800d434:	2b00      	cmp	r3, #0
 800d436:	d026      	beq.n	800d486 <HAL_DMA_IRQHandler+0x7a>
 800d438:	68bb      	ldr	r3, [r7, #8]
 800d43a:	f003 0304 	and.w	r3, r3, #4
 800d43e:	2b00      	cmp	r3, #0
 800d440:	d021      	beq.n	800d486 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800d442:	687b      	ldr	r3, [r7, #4]
 800d444:	681b      	ldr	r3, [r3, #0]
 800d446:	681b      	ldr	r3, [r3, #0]
 800d448:	f003 0320 	and.w	r3, r3, #32
 800d44c:	2b00      	cmp	r3, #0
 800d44e:	d107      	bne.n	800d460 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800d450:	687b      	ldr	r3, [r7, #4]
 800d452:	681b      	ldr	r3, [r3, #0]
 800d454:	681a      	ldr	r2, [r3, #0]
 800d456:	687b      	ldr	r3, [r7, #4]
 800d458:	681b      	ldr	r3, [r3, #0]
 800d45a:	f022 0204 	bic.w	r2, r2, #4
 800d45e:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 800d460:	687b      	ldr	r3, [r7, #4]
 800d462:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800d464:	f003 021c 	and.w	r2, r3, #28
 800d468:	687b      	ldr	r3, [r7, #4]
 800d46a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d46c:	2104      	movs	r1, #4
 800d46e:	fa01 f202 	lsl.w	r2, r1, r2
 800d472:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 800d474:	687b      	ldr	r3, [r7, #4]
 800d476:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d478:	2b00      	cmp	r3, #0
 800d47a:	d071      	beq.n	800d560 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 800d47c:	687b      	ldr	r3, [r7, #4]
 800d47e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d480:	6878      	ldr	r0, [r7, #4]
 800d482:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 800d484:	e06c      	b.n	800d560 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 800d486:	687b      	ldr	r3, [r7, #4]
 800d488:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800d48a:	f003 031c 	and.w	r3, r3, #28
 800d48e:	2202      	movs	r2, #2
 800d490:	409a      	lsls	r2, r3
 800d492:	68fb      	ldr	r3, [r7, #12]
 800d494:	4013      	ands	r3, r2
 800d496:	2b00      	cmp	r3, #0
 800d498:	d02e      	beq.n	800d4f8 <HAL_DMA_IRQHandler+0xec>
 800d49a:	68bb      	ldr	r3, [r7, #8]
 800d49c:	f003 0302 	and.w	r3, r3, #2
 800d4a0:	2b00      	cmp	r3, #0
 800d4a2:	d029      	beq.n	800d4f8 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800d4a4:	687b      	ldr	r3, [r7, #4]
 800d4a6:	681b      	ldr	r3, [r3, #0]
 800d4a8:	681b      	ldr	r3, [r3, #0]
 800d4aa:	f003 0320 	and.w	r3, r3, #32
 800d4ae:	2b00      	cmp	r3, #0
 800d4b0:	d10b      	bne.n	800d4ca <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800d4b2:	687b      	ldr	r3, [r7, #4]
 800d4b4:	681b      	ldr	r3, [r3, #0]
 800d4b6:	681a      	ldr	r2, [r3, #0]
 800d4b8:	687b      	ldr	r3, [r7, #4]
 800d4ba:	681b      	ldr	r3, [r3, #0]
 800d4bc:	f022 020a 	bic.w	r2, r2, #10
 800d4c0:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800d4c2:	687b      	ldr	r3, [r7, #4]
 800d4c4:	2201      	movs	r2, #1
 800d4c6:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 800d4ca:	687b      	ldr	r3, [r7, #4]
 800d4cc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800d4ce:	f003 021c 	and.w	r2, r3, #28
 800d4d2:	687b      	ldr	r3, [r7, #4]
 800d4d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d4d6:	2102      	movs	r1, #2
 800d4d8:	fa01 f202 	lsl.w	r2, r1, r2
 800d4dc:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800d4de:	687b      	ldr	r3, [r7, #4]
 800d4e0:	2200      	movs	r2, #0
 800d4e2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 800d4e6:	687b      	ldr	r3, [r7, #4]
 800d4e8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d4ea:	2b00      	cmp	r3, #0
 800d4ec:	d038      	beq.n	800d560 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 800d4ee:	687b      	ldr	r3, [r7, #4]
 800d4f0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d4f2:	6878      	ldr	r0, [r7, #4]
 800d4f4:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 800d4f6:	e033      	b.n	800d560 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 800d4f8:	687b      	ldr	r3, [r7, #4]
 800d4fa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800d4fc:	f003 031c 	and.w	r3, r3, #28
 800d500:	2208      	movs	r2, #8
 800d502:	409a      	lsls	r2, r3
 800d504:	68fb      	ldr	r3, [r7, #12]
 800d506:	4013      	ands	r3, r2
 800d508:	2b00      	cmp	r3, #0
 800d50a:	d02a      	beq.n	800d562 <HAL_DMA_IRQHandler+0x156>
 800d50c:	68bb      	ldr	r3, [r7, #8]
 800d50e:	f003 0308 	and.w	r3, r3, #8
 800d512:	2b00      	cmp	r3, #0
 800d514:	d025      	beq.n	800d562 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800d516:	687b      	ldr	r3, [r7, #4]
 800d518:	681b      	ldr	r3, [r3, #0]
 800d51a:	681a      	ldr	r2, [r3, #0]
 800d51c:	687b      	ldr	r3, [r7, #4]
 800d51e:	681b      	ldr	r3, [r3, #0]
 800d520:	f022 020e 	bic.w	r2, r2, #14
 800d524:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800d526:	687b      	ldr	r3, [r7, #4]
 800d528:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800d52a:	f003 021c 	and.w	r2, r3, #28
 800d52e:	687b      	ldr	r3, [r7, #4]
 800d530:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d532:	2101      	movs	r1, #1
 800d534:	fa01 f202 	lsl.w	r2, r1, r2
 800d538:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800d53a:	687b      	ldr	r3, [r7, #4]
 800d53c:	2201      	movs	r2, #1
 800d53e:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800d540:	687b      	ldr	r3, [r7, #4]
 800d542:	2201      	movs	r2, #1
 800d544:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800d548:	687b      	ldr	r3, [r7, #4]
 800d54a:	2200      	movs	r2, #0
 800d54c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 800d550:	687b      	ldr	r3, [r7, #4]
 800d552:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d554:	2b00      	cmp	r3, #0
 800d556:	d004      	beq.n	800d562 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800d558:	687b      	ldr	r3, [r7, #4]
 800d55a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d55c:	6878      	ldr	r0, [r7, #4]
 800d55e:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 800d560:	bf00      	nop
 800d562:	bf00      	nop
}
 800d564:	3710      	adds	r7, #16
 800d566:	46bd      	mov	sp, r7
 800d568:	bd80      	pop	{r7, pc}

0800d56a <HAL_DMA_GetError>:
  * @param  hdma : pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 800d56a:	b480      	push	{r7}
 800d56c:	b083      	sub	sp, #12
 800d56e:	af00      	add	r7, sp, #0
 800d570:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 800d572:	687b      	ldr	r3, [r7, #4]
 800d574:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
}
 800d576:	4618      	mov	r0, r3
 800d578:	370c      	adds	r7, #12
 800d57a:	46bd      	mov	sp, r7
 800d57c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d580:	4770      	bx	lr

0800d582 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800d582:	b480      	push	{r7}
 800d584:	b085      	sub	sp, #20
 800d586:	af00      	add	r7, sp, #0
 800d588:	60f8      	str	r0, [r7, #12]
 800d58a:	60b9      	str	r1, [r7, #8]
 800d58c:	607a      	str	r2, [r7, #4]
 800d58e:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800d590:	68fb      	ldr	r3, [r7, #12]
 800d592:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800d594:	f003 021c 	and.w	r2, r3, #28
 800d598:	68fb      	ldr	r3, [r7, #12]
 800d59a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d59c:	2101      	movs	r1, #1
 800d59e:	fa01 f202 	lsl.w	r2, r1, r2
 800d5a2:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800d5a4:	68fb      	ldr	r3, [r7, #12]
 800d5a6:	681b      	ldr	r3, [r3, #0]
 800d5a8:	683a      	ldr	r2, [r7, #0]
 800d5aa:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800d5ac:	68fb      	ldr	r3, [r7, #12]
 800d5ae:	689b      	ldr	r3, [r3, #8]
 800d5b0:	2b10      	cmp	r3, #16
 800d5b2:	d108      	bne.n	800d5c6 <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800d5b4:	68fb      	ldr	r3, [r7, #12]
 800d5b6:	681b      	ldr	r3, [r3, #0]
 800d5b8:	687a      	ldr	r2, [r7, #4]
 800d5ba:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800d5bc:	68fb      	ldr	r3, [r7, #12]
 800d5be:	681b      	ldr	r3, [r3, #0]
 800d5c0:	68ba      	ldr	r2, [r7, #8]
 800d5c2:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800d5c4:	e007      	b.n	800d5d6 <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 800d5c6:	68fb      	ldr	r3, [r7, #12]
 800d5c8:	681b      	ldr	r3, [r3, #0]
 800d5ca:	68ba      	ldr	r2, [r7, #8]
 800d5cc:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 800d5ce:	68fb      	ldr	r3, [r7, #12]
 800d5d0:	681b      	ldr	r3, [r3, #0]
 800d5d2:	687a      	ldr	r2, [r7, #4]
 800d5d4:	60da      	str	r2, [r3, #12]
}
 800d5d6:	bf00      	nop
 800d5d8:	3714      	adds	r7, #20
 800d5da:	46bd      	mov	sp, r7
 800d5dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5e0:	4770      	bx	lr
	...

0800d5e4 <HAL_FLASH_Program>:
  *                are stored the data for the row fast program
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 800d5e4:	b580      	push	{r7, lr}
 800d5e6:	b086      	sub	sp, #24
 800d5e8:	af00      	add	r7, sp, #0
 800d5ea:	60f8      	str	r0, [r7, #12]
 800d5ec:	60b9      	str	r1, [r7, #8]
 800d5ee:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status;
  uint32_t prog_bit = 0;
 800d5f2:	2300      	movs	r3, #0
 800d5f4:	613b      	str	r3, [r7, #16]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 800d5f6:	4b2f      	ldr	r3, [pc, #188]	@ (800d6b4 <HAL_FLASH_Program+0xd0>)
 800d5f8:	781b      	ldrb	r3, [r3, #0]
 800d5fa:	2b01      	cmp	r3, #1
 800d5fc:	d101      	bne.n	800d602 <HAL_FLASH_Program+0x1e>
 800d5fe:	2302      	movs	r3, #2
 800d600:	e053      	b.n	800d6aa <HAL_FLASH_Program+0xc6>
 800d602:	4b2c      	ldr	r3, [pc, #176]	@ (800d6b4 <HAL_FLASH_Program+0xd0>)
 800d604:	2201      	movs	r2, #1
 800d606:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800d608:	f24c 3050 	movw	r0, #50000	@ 0xc350
 800d60c:	f000 f8c6 	bl	800d79c <FLASH_WaitForLastOperation>
 800d610:	4603      	mov	r3, r0
 800d612:	75fb      	strb	r3, [r7, #23]

  if(status == HAL_OK)
 800d614:	7dfb      	ldrb	r3, [r7, #23]
 800d616:	2b00      	cmp	r3, #0
 800d618:	d143      	bne.n	800d6a2 <HAL_FLASH_Program+0xbe>
  {
    pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 800d61a:	4b26      	ldr	r3, [pc, #152]	@ (800d6b4 <HAL_FLASH_Program+0xd0>)
 800d61c:	2200      	movs	r2, #0
 800d61e:	605a      	str	r2, [r3, #4]

    /* Deactivate the data cache if they are activated to avoid data misbehavior */
    if(READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != 0U)
 800d620:	4b25      	ldr	r3, [pc, #148]	@ (800d6b8 <HAL_FLASH_Program+0xd4>)
 800d622:	681b      	ldr	r3, [r3, #0]
 800d624:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800d628:	2b00      	cmp	r3, #0
 800d62a:	d009      	beq.n	800d640 <HAL_FLASH_Program+0x5c>
    {
      /* Disable data cache  */
      __HAL_FLASH_DATA_CACHE_DISABLE();
 800d62c:	4b22      	ldr	r3, [pc, #136]	@ (800d6b8 <HAL_FLASH_Program+0xd4>)
 800d62e:	681b      	ldr	r3, [r3, #0]
 800d630:	4a21      	ldr	r2, [pc, #132]	@ (800d6b8 <HAL_FLASH_Program+0xd4>)
 800d632:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800d636:	6013      	str	r3, [r2, #0]
      pFlash.CacheToReactivate = FLASH_CACHE_DCACHE_ENABLED;
 800d638:	4b1e      	ldr	r3, [pc, #120]	@ (800d6b4 <HAL_FLASH_Program+0xd0>)
 800d63a:	2202      	movs	r2, #2
 800d63c:	771a      	strb	r2, [r3, #28]
 800d63e:	e002      	b.n	800d646 <HAL_FLASH_Program+0x62>
    }
    else
    {
      pFlash.CacheToReactivate = FLASH_CACHE_DISABLED;
 800d640:	4b1c      	ldr	r3, [pc, #112]	@ (800d6b4 <HAL_FLASH_Program+0xd0>)
 800d642:	2200      	movs	r2, #0
 800d644:	771a      	strb	r2, [r3, #28]
    }

    if(TypeProgram == FLASH_TYPEPROGRAM_DOUBLEWORD)
 800d646:	68fb      	ldr	r3, [r7, #12]
 800d648:	2b00      	cmp	r3, #0
 800d64a:	d107      	bne.n	800d65c <HAL_FLASH_Program+0x78>
    {
      /* Program double-word (64-bit) at a specified address */
      FLASH_Program_DoubleWord(Address, Data);
 800d64c:	e9d7 2300 	ldrd	r2, r3, [r7]
 800d650:	68b8      	ldr	r0, [r7, #8]
 800d652:	f000 f8f9 	bl	800d848 <FLASH_Program_DoubleWord>
      prog_bit = FLASH_CR_PG;
 800d656:	2301      	movs	r3, #1
 800d658:	613b      	str	r3, [r7, #16]
 800d65a:	e010      	b.n	800d67e <HAL_FLASH_Program+0x9a>
    }
    else if((TypeProgram == FLASH_TYPEPROGRAM_FAST) || (TypeProgram == FLASH_TYPEPROGRAM_FAST_AND_LAST))
 800d65c:	68fb      	ldr	r3, [r7, #12]
 800d65e:	2b01      	cmp	r3, #1
 800d660:	d002      	beq.n	800d668 <HAL_FLASH_Program+0x84>
 800d662:	68fb      	ldr	r3, [r7, #12]
 800d664:	2b02      	cmp	r3, #2
 800d666:	d10a      	bne.n	800d67e <HAL_FLASH_Program+0x9a>
    {
      /* Fast program a 32 row double-word (64-bit) at a specified address */
      FLASH_Program_Fast(Address, (uint32_t)Data);
 800d668:	683b      	ldr	r3, [r7, #0]
 800d66a:	4619      	mov	r1, r3
 800d66c:	68b8      	ldr	r0, [r7, #8]
 800d66e:	f000 f911 	bl	800d894 <FLASH_Program_Fast>

      /* If it is the last row, the bit will be cleared at the end of the operation */
      if(TypeProgram == FLASH_TYPEPROGRAM_FAST_AND_LAST)
 800d672:	68fb      	ldr	r3, [r7, #12]
 800d674:	2b02      	cmp	r3, #2
 800d676:	d102      	bne.n	800d67e <HAL_FLASH_Program+0x9a>
      {
        prog_bit = FLASH_CR_FSTPG;
 800d678:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 800d67c:	613b      	str	r3, [r7, #16]
    {
      /* Nothing to do */
    }

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800d67e:	f24c 3050 	movw	r0, #50000	@ 0xc350
 800d682:	f000 f88b 	bl	800d79c <FLASH_WaitForLastOperation>
 800d686:	4603      	mov	r3, r0
 800d688:	75fb      	strb	r3, [r7, #23]

    /* If the program operation is completed, disable the PG or FSTPG Bit */
    if (prog_bit != 0U)
 800d68a:	693b      	ldr	r3, [r7, #16]
 800d68c:	2b00      	cmp	r3, #0
 800d68e:	d006      	beq.n	800d69e <HAL_FLASH_Program+0xba>
    {
      CLEAR_BIT(FLASH->CR, prog_bit);
 800d690:	4b09      	ldr	r3, [pc, #36]	@ (800d6b8 <HAL_FLASH_Program+0xd4>)
 800d692:	695a      	ldr	r2, [r3, #20]
 800d694:	693b      	ldr	r3, [r7, #16]
 800d696:	43db      	mvns	r3, r3
 800d698:	4907      	ldr	r1, [pc, #28]	@ (800d6b8 <HAL_FLASH_Program+0xd4>)
 800d69a:	4013      	ands	r3, r2
 800d69c:	614b      	str	r3, [r1, #20]
    }

    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();
 800d69e:	f000 fae5 	bl	800dc6c <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 800d6a2:	4b04      	ldr	r3, [pc, #16]	@ (800d6b4 <HAL_FLASH_Program+0xd0>)
 800d6a4:	2200      	movs	r2, #0
 800d6a6:	701a      	strb	r2, [r3, #0]

  return status;
 800d6a8:	7dfb      	ldrb	r3, [r7, #23]
}
 800d6aa:	4618      	mov	r0, r3
 800d6ac:	3718      	adds	r7, #24
 800d6ae:	46bd      	mov	sp, r7
 800d6b0:	bd80      	pop	{r7, pc}
 800d6b2:	bf00      	nop
 800d6b4:	20000014 	.word	0x20000014
 800d6b8:	40022000 	.word	0x40022000

0800d6bc <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 800d6bc:	b480      	push	{r7}
 800d6be:	b083      	sub	sp, #12
 800d6c0:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 800d6c2:	2300      	movs	r3, #0
 800d6c4:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 800d6c6:	4b0b      	ldr	r3, [pc, #44]	@ (800d6f4 <HAL_FLASH_Unlock+0x38>)
 800d6c8:	695b      	ldr	r3, [r3, #20]
 800d6ca:	2b00      	cmp	r3, #0
 800d6cc:	da0b      	bge.n	800d6e6 <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 800d6ce:	4b09      	ldr	r3, [pc, #36]	@ (800d6f4 <HAL_FLASH_Unlock+0x38>)
 800d6d0:	4a09      	ldr	r2, [pc, #36]	@ (800d6f8 <HAL_FLASH_Unlock+0x3c>)
 800d6d2:	609a      	str	r2, [r3, #8]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 800d6d4:	4b07      	ldr	r3, [pc, #28]	@ (800d6f4 <HAL_FLASH_Unlock+0x38>)
 800d6d6:	4a09      	ldr	r2, [pc, #36]	@ (800d6fc <HAL_FLASH_Unlock+0x40>)
 800d6d8:	609a      	str	r2, [r3, #8]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 800d6da:	4b06      	ldr	r3, [pc, #24]	@ (800d6f4 <HAL_FLASH_Unlock+0x38>)
 800d6dc:	695b      	ldr	r3, [r3, #20]
 800d6de:	2b00      	cmp	r3, #0
 800d6e0:	da01      	bge.n	800d6e6 <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 800d6e2:	2301      	movs	r3, #1
 800d6e4:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 800d6e6:	79fb      	ldrb	r3, [r7, #7]
}
 800d6e8:	4618      	mov	r0, r3
 800d6ea:	370c      	adds	r7, #12
 800d6ec:	46bd      	mov	sp, r7
 800d6ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6f2:	4770      	bx	lr
 800d6f4:	40022000 	.word	0x40022000
 800d6f8:	45670123 	.word	0x45670123
 800d6fc:	cdef89ab 	.word	0xcdef89ab

0800d700 <HAL_FLASH_Lock>:
/**
  * @brief  Lock the FLASH control register access.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 800d700:	b480      	push	{r7}
 800d702:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 800d704:	4b05      	ldr	r3, [pc, #20]	@ (800d71c <HAL_FLASH_Lock+0x1c>)
 800d706:	695b      	ldr	r3, [r3, #20]
 800d708:	4a04      	ldr	r2, [pc, #16]	@ (800d71c <HAL_FLASH_Lock+0x1c>)
 800d70a:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800d70e:	6153      	str	r3, [r2, #20]

  return HAL_OK;
 800d710:	2300      	movs	r3, #0
}
 800d712:	4618      	mov	r0, r3
 800d714:	46bd      	mov	sp, r7
 800d716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d71a:	4770      	bx	lr
 800d71c:	40022000 	.word	0x40022000

0800d720 <HAL_FLASH_OB_Unlock>:
/**
  * @brief  Unlock the FLASH Option Bytes Registers access.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_OB_Unlock(void)
{
 800d720:	b480      	push	{r7}
 800d722:	af00      	add	r7, sp, #0
  if(READ_BIT(FLASH->CR, FLASH_CR_OPTLOCK) != 0U)
 800d724:	4b09      	ldr	r3, [pc, #36]	@ (800d74c <HAL_FLASH_OB_Unlock+0x2c>)
 800d726:	695b      	ldr	r3, [r3, #20]
 800d728:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800d72c:	2b00      	cmp	r3, #0
 800d72e:	d007      	beq.n	800d740 <HAL_FLASH_OB_Unlock+0x20>
  {
    /* Authorizes the Option Byte register programming */
    WRITE_REG(FLASH->OPTKEYR, FLASH_OPTKEY1);
 800d730:	4b06      	ldr	r3, [pc, #24]	@ (800d74c <HAL_FLASH_OB_Unlock+0x2c>)
 800d732:	4a07      	ldr	r2, [pc, #28]	@ (800d750 <HAL_FLASH_OB_Unlock+0x30>)
 800d734:	60da      	str	r2, [r3, #12]
    WRITE_REG(FLASH->OPTKEYR, FLASH_OPTKEY2);
 800d736:	4b05      	ldr	r3, [pc, #20]	@ (800d74c <HAL_FLASH_OB_Unlock+0x2c>)
 800d738:	4a06      	ldr	r2, [pc, #24]	@ (800d754 <HAL_FLASH_OB_Unlock+0x34>)
 800d73a:	60da      	str	r2, [r3, #12]
  else
  {
    return HAL_ERROR;
  }

  return HAL_OK;
 800d73c:	2300      	movs	r3, #0
 800d73e:	e000      	b.n	800d742 <HAL_FLASH_OB_Unlock+0x22>
    return HAL_ERROR;
 800d740:	2301      	movs	r3, #1
}
 800d742:	4618      	mov	r0, r3
 800d744:	46bd      	mov	sp, r7
 800d746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d74a:	4770      	bx	lr
 800d74c:	40022000 	.word	0x40022000
 800d750:	08192a3b 	.word	0x08192a3b
 800d754:	4c5d6e7f 	.word	0x4c5d6e7f

0800d758 <HAL_FLASH_OB_Lock>:
/**
  * @brief  Lock the FLASH Option Bytes Registers access.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_OB_Lock(void)
{
 800d758:	b480      	push	{r7}
 800d75a:	af00      	add	r7, sp, #0
  /* Set the OPTLOCK Bit to lock the FLASH Option Byte Registers access */
  SET_BIT(FLASH->CR, FLASH_CR_OPTLOCK);
 800d75c:	4b05      	ldr	r3, [pc, #20]	@ (800d774 <HAL_FLASH_OB_Lock+0x1c>)
 800d75e:	695b      	ldr	r3, [r3, #20]
 800d760:	4a04      	ldr	r2, [pc, #16]	@ (800d774 <HAL_FLASH_OB_Lock+0x1c>)
 800d762:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800d766:	6153      	str	r3, [r2, #20]

  return HAL_OK;
 800d768:	2300      	movs	r3, #0
}
 800d76a:	4618      	mov	r0, r3
 800d76c:	46bd      	mov	sp, r7
 800d76e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d772:	4770      	bx	lr
 800d774:	40022000 	.word	0x40022000

0800d778 <HAL_FLASH_OB_Launch>:
/**
  * @brief  Launch the option byte loading.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_OB_Launch(void)
{
 800d778:	b580      	push	{r7, lr}
 800d77a:	af00      	add	r7, sp, #0
  /* Set the bit to force the option byte reloading */
  SET_BIT(FLASH->CR, FLASH_CR_OBL_LAUNCH);
 800d77c:	4b06      	ldr	r3, [pc, #24]	@ (800d798 <HAL_FLASH_OB_Launch+0x20>)
 800d77e:	695b      	ldr	r3, [r3, #20]
 800d780:	4a05      	ldr	r2, [pc, #20]	@ (800d798 <HAL_FLASH_OB_Launch+0x20>)
 800d782:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800d786:	6153      	str	r3, [r2, #20]

  /* Wait for last operation to be completed */
  return(FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE));
 800d788:	f24c 3050 	movw	r0, #50000	@ 0xc350
 800d78c:	f000 f806 	bl	800d79c <FLASH_WaitForLastOperation>
 800d790:	4603      	mov	r3, r0
}
 800d792:	4618      	mov	r0, r3
 800d794:	bd80      	pop	{r7, pc}
 800d796:	bf00      	nop
 800d798:	40022000 	.word	0x40022000

0800d79c <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operation timeout
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 800d79c:	b580      	push	{r7, lr}
 800d79e:	b084      	sub	sp, #16
 800d7a0:	af00      	add	r7, sp, #0
 800d7a2:	6078      	str	r0, [r7, #4]
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */

  uint32_t tickstart = HAL_GetTick();
 800d7a4:	f7fd fdae 	bl	800b304 <HAL_GetTick>
 800d7a8:	60f8      	str	r0, [r7, #12]
  uint32_t error;

  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY))
 800d7aa:	e00d      	b.n	800d7c8 <FLASH_WaitForLastOperation+0x2c>
  {
    if(Timeout != HAL_MAX_DELAY)
 800d7ac:	687b      	ldr	r3, [r7, #4]
 800d7ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d7b2:	d009      	beq.n	800d7c8 <FLASH_WaitForLastOperation+0x2c>
    {
      if((HAL_GetTick() - tickstart) >= Timeout)
 800d7b4:	f7fd fda6 	bl	800b304 <HAL_GetTick>
 800d7b8:	4602      	mov	r2, r0
 800d7ba:	68fb      	ldr	r3, [r7, #12]
 800d7bc:	1ad3      	subs	r3, r2, r3
 800d7be:	687a      	ldr	r2, [r7, #4]
 800d7c0:	429a      	cmp	r2, r3
 800d7c2:	d801      	bhi.n	800d7c8 <FLASH_WaitForLastOperation+0x2c>
      {
        return HAL_TIMEOUT;
 800d7c4:	2303      	movs	r3, #3
 800d7c6:	e036      	b.n	800d836 <FLASH_WaitForLastOperation+0x9a>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY))
 800d7c8:	4b1d      	ldr	r3, [pc, #116]	@ (800d840 <FLASH_WaitForLastOperation+0xa4>)
 800d7ca:	691b      	ldr	r3, [r3, #16]
 800d7cc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800d7d0:	2b00      	cmp	r3, #0
 800d7d2:	d1eb      	bne.n	800d7ac <FLASH_WaitForLastOperation+0x10>
      }
    }
  }

  error = (FLASH->SR & FLASH_FLAG_SR_ERRORS);
 800d7d4:	4b1a      	ldr	r3, [pc, #104]	@ (800d840 <FLASH_WaitForLastOperation+0xa4>)
 800d7d6:	691a      	ldr	r2, [r3, #16]
 800d7d8:	f24c 33fa 	movw	r3, #50170	@ 0xc3fa
 800d7dc:	4013      	ands	r3, r2
 800d7de:	60bb      	str	r3, [r7, #8]

  if(error != 0u)
 800d7e0:	68bb      	ldr	r3, [r7, #8]
 800d7e2:	2b00      	cmp	r3, #0
 800d7e4:	d01d      	beq.n	800d822 <FLASH_WaitForLastOperation+0x86>
  {
    /*Save the error code*/
    pFlash.ErrorCode |= error;
 800d7e6:	4b17      	ldr	r3, [pc, #92]	@ (800d844 <FLASH_WaitForLastOperation+0xa8>)
 800d7e8:	685a      	ldr	r2, [r3, #4]
 800d7ea:	68bb      	ldr	r3, [r7, #8]
 800d7ec:	4313      	orrs	r3, r2
 800d7ee:	4a15      	ldr	r2, [pc, #84]	@ (800d844 <FLASH_WaitForLastOperation+0xa8>)
 800d7f0:	6053      	str	r3, [r2, #4]

    /* Clear error programming flags */
    __HAL_FLASH_CLEAR_FLAG(error);
 800d7f2:	68bb      	ldr	r3, [r7, #8]
 800d7f4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800d7f8:	d307      	bcc.n	800d80a <FLASH_WaitForLastOperation+0x6e>
 800d7fa:	4b11      	ldr	r3, [pc, #68]	@ (800d840 <FLASH_WaitForLastOperation+0xa4>)
 800d7fc:	699a      	ldr	r2, [r3, #24]
 800d7fe:	68bb      	ldr	r3, [r7, #8]
 800d800:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 800d804:	490e      	ldr	r1, [pc, #56]	@ (800d840 <FLASH_WaitForLastOperation+0xa4>)
 800d806:	4313      	orrs	r3, r2
 800d808:	618b      	str	r3, [r1, #24]
 800d80a:	68bb      	ldr	r3, [r7, #8]
 800d80c:	f023 4340 	bic.w	r3, r3, #3221225472	@ 0xc0000000
 800d810:	2b00      	cmp	r3, #0
 800d812:	d004      	beq.n	800d81e <FLASH_WaitForLastOperation+0x82>
 800d814:	4a0a      	ldr	r2, [pc, #40]	@ (800d840 <FLASH_WaitForLastOperation+0xa4>)
 800d816:	68bb      	ldr	r3, [r7, #8]
 800d818:	f023 4340 	bic.w	r3, r3, #3221225472	@ 0xc0000000
 800d81c:	6113      	str	r3, [r2, #16]

    return HAL_ERROR;
 800d81e:	2301      	movs	r3, #1
 800d820:	e009      	b.n	800d836 <FLASH_WaitForLastOperation+0x9a>
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 800d822:	4b07      	ldr	r3, [pc, #28]	@ (800d840 <FLASH_WaitForLastOperation+0xa4>)
 800d824:	691b      	ldr	r3, [r3, #16]
 800d826:	f003 0301 	and.w	r3, r3, #1
 800d82a:	2b00      	cmp	r3, #0
 800d82c:	d002      	beq.n	800d834 <FLASH_WaitForLastOperation+0x98>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 800d82e:	4b04      	ldr	r3, [pc, #16]	@ (800d840 <FLASH_WaitForLastOperation+0xa4>)
 800d830:	2201      	movs	r2, #1
 800d832:	611a      	str	r2, [r3, #16]
  }

  /* If there is an error flag set */
  return HAL_OK;
 800d834:	2300      	movs	r3, #0
}
 800d836:	4618      	mov	r0, r3
 800d838:	3710      	adds	r7, #16
 800d83a:	46bd      	mov	sp, r7
 800d83c:	bd80      	pop	{r7, pc}
 800d83e:	bf00      	nop
 800d840:	40022000 	.word	0x40022000
 800d844:	20000014 	.word	0x20000014

0800d848 <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 800d848:	b480      	push	{r7}
 800d84a:	b085      	sub	sp, #20
 800d84c:	af00      	add	r7, sp, #0
 800d84e:	60f8      	str	r0, [r7, #12]
 800d850:	e9c7 2300 	strd	r2, r3, [r7]
  /* Check the parameters */
  assert_param(IS_FLASH_PROGRAM_ADDRESS(Address));

  /* Set PG bit */
  SET_BIT(FLASH->CR, FLASH_CR_PG);
 800d854:	4b0e      	ldr	r3, [pc, #56]	@ (800d890 <FLASH_Program_DoubleWord+0x48>)
 800d856:	695b      	ldr	r3, [r3, #20]
 800d858:	4a0d      	ldr	r2, [pc, #52]	@ (800d890 <FLASH_Program_DoubleWord+0x48>)
 800d85a:	f043 0301 	orr.w	r3, r3, #1
 800d85e:	6153      	str	r3, [r2, #20]

  /* Program first word */
  *(__IO uint32_t*)Address = (uint32_t)Data;
 800d860:	68fb      	ldr	r3, [r7, #12]
 800d862:	683a      	ldr	r2, [r7, #0]
 800d864:	601a      	str	r2, [r3, #0]
  __ASM volatile ("isb 0xF":::"memory");
 800d866:	f3bf 8f6f 	isb	sy
}
 800d86a:	bf00      	nop
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(__IO uint32_t*)(Address+4U) = (uint32_t)(Data >> 32);
 800d86c:	e9d7 0100 	ldrd	r0, r1, [r7]
 800d870:	f04f 0200 	mov.w	r2, #0
 800d874:	f04f 0300 	mov.w	r3, #0
 800d878:	000a      	movs	r2, r1
 800d87a:	2300      	movs	r3, #0
 800d87c:	68f9      	ldr	r1, [r7, #12]
 800d87e:	3104      	adds	r1, #4
 800d880:	4613      	mov	r3, r2
 800d882:	600b      	str	r3, [r1, #0]
}
 800d884:	bf00      	nop
 800d886:	3714      	adds	r7, #20
 800d888:	46bd      	mov	sp, r7
 800d88a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d88e:	4770      	bx	lr
 800d890:	40022000 	.word	0x40022000

0800d894 <FLASH_Program_Fast>:
  * @param  Address specifies the address to be programmed.
  * @param  DataAddress specifies the address where the data are stored.
  * @retval None
  */
static void FLASH_Program_Fast(uint32_t Address, uint32_t DataAddress)
{
 800d894:	b480      	push	{r7}
 800d896:	b089      	sub	sp, #36	@ 0x24
 800d898:	af00      	add	r7, sp, #0
 800d89a:	6078      	str	r0, [r7, #4]
 800d89c:	6039      	str	r1, [r7, #0]
  uint32_t primask_bit;
  uint8_t row_index = (2*FLASH_NB_DOUBLE_WORDS_IN_ROW);
 800d89e:	2340      	movs	r3, #64	@ 0x40
 800d8a0:	77fb      	strb	r3, [r7, #31]
  __IO uint32_t *dest_addr = (__IO uint32_t*)Address;
 800d8a2:	687b      	ldr	r3, [r7, #4]
 800d8a4:	61bb      	str	r3, [r7, #24]
  __IO uint32_t *src_addr = (__IO uint32_t*)DataAddress;
 800d8a6:	683b      	ldr	r3, [r7, #0]
 800d8a8:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_FLASH_MAIN_MEM_ADDRESS(Address));

  /* Set FSTPG bit */
  SET_BIT(FLASH->CR, FLASH_CR_FSTPG);
 800d8aa:	4b14      	ldr	r3, [pc, #80]	@ (800d8fc <FLASH_Program_Fast+0x68>)
 800d8ac:	695b      	ldr	r3, [r3, #20]
 800d8ae:	4a13      	ldr	r2, [pc, #76]	@ (800d8fc <FLASH_Program_Fast+0x68>)
 800d8b0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800d8b4:	6153      	str	r3, [r2, #20]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800d8b6:	f3ef 8310 	mrs	r3, PRIMASK
 800d8ba:	60fb      	str	r3, [r7, #12]
  return(result);
 800d8bc:	68fb      	ldr	r3, [r7, #12]

  /* Disable interrupts to avoid any interruption during the loop */
  primask_bit = __get_PRIMASK();
 800d8be:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 800d8c0:	b672      	cpsid	i
}
 800d8c2:	bf00      	nop
  __disable_irq();

  /* Program the double word of the row */
  do
  {
    *dest_addr = *src_addr;
 800d8c4:	697b      	ldr	r3, [r7, #20]
 800d8c6:	681a      	ldr	r2, [r3, #0]
 800d8c8:	69bb      	ldr	r3, [r7, #24]
 800d8ca:	601a      	str	r2, [r3, #0]
    dest_addr++;
 800d8cc:	69bb      	ldr	r3, [r7, #24]
 800d8ce:	3304      	adds	r3, #4
 800d8d0:	61bb      	str	r3, [r7, #24]
    src_addr++;
 800d8d2:	697b      	ldr	r3, [r7, #20]
 800d8d4:	3304      	adds	r3, #4
 800d8d6:	617b      	str	r3, [r7, #20]
    row_index--;
 800d8d8:	7ffb      	ldrb	r3, [r7, #31]
 800d8da:	3b01      	subs	r3, #1
 800d8dc:	77fb      	strb	r3, [r7, #31]
  } while (row_index != 0U);
 800d8de:	7ffb      	ldrb	r3, [r7, #31]
 800d8e0:	2b00      	cmp	r3, #0
 800d8e2:	d1ef      	bne.n	800d8c4 <FLASH_Program_Fast+0x30>
 800d8e4:	693b      	ldr	r3, [r7, #16]
 800d8e6:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800d8e8:	68bb      	ldr	r3, [r7, #8]
 800d8ea:	f383 8810 	msr	PRIMASK, r3
}
 800d8ee:	bf00      	nop

  /* Re-enable the interrupts */
  __set_PRIMASK(primask_bit);
}
 800d8f0:	bf00      	nop
 800d8f2:	3724      	adds	r7, #36	@ 0x24
 800d8f4:	46bd      	mov	sp, r7
 800d8f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8fa:	4770      	bx	lr
 800d8fc:	40022000 	.word	0x40022000

0800d900 <HAL_FLASHEx_Erase>:
  *         the pages have been correctly erased)
  *
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *PageError)
{
 800d900:	b580      	push	{r7, lr}
 800d902:	b084      	sub	sp, #16
 800d904:	af00      	add	r7, sp, #0
 800d906:	6078      	str	r0, [r7, #4]
 800d908:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t page_index;

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 800d90a:	4b49      	ldr	r3, [pc, #292]	@ (800da30 <HAL_FLASHEx_Erase+0x130>)
 800d90c:	781b      	ldrb	r3, [r3, #0]
 800d90e:	2b01      	cmp	r3, #1
 800d910:	d101      	bne.n	800d916 <HAL_FLASHEx_Erase+0x16>
 800d912:	2302      	movs	r3, #2
 800d914:	e087      	b.n	800da26 <HAL_FLASHEx_Erase+0x126>
 800d916:	4b46      	ldr	r3, [pc, #280]	@ (800da30 <HAL_FLASHEx_Erase+0x130>)
 800d918:	2201      	movs	r2, #1
 800d91a:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800d91c:	f24c 3050 	movw	r0, #50000	@ 0xc350
 800d920:	f7ff ff3c 	bl	800d79c <FLASH_WaitForLastOperation>
 800d924:	4603      	mov	r3, r0
 800d926:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 800d928:	7bfb      	ldrb	r3, [r7, #15]
 800d92a:	2b00      	cmp	r3, #0
 800d92c:	d177      	bne.n	800da1e <HAL_FLASHEx_Erase+0x11e>
  {
    pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 800d92e:	4b40      	ldr	r3, [pc, #256]	@ (800da30 <HAL_FLASHEx_Erase+0x130>)
 800d930:	2200      	movs	r2, #0
 800d932:	605a      	str	r2, [r3, #4]

    /* Deactivate the cache if they are activated to avoid data misbehavior */
    if(READ_BIT(FLASH->ACR, FLASH_ACR_ICEN) != 0U)
 800d934:	4b3f      	ldr	r3, [pc, #252]	@ (800da34 <HAL_FLASHEx_Erase+0x134>)
 800d936:	681b      	ldr	r3, [r3, #0]
 800d938:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800d93c:	2b00      	cmp	r3, #0
 800d93e:	d013      	beq.n	800d968 <HAL_FLASHEx_Erase+0x68>
    {
      if(READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != 0U)
 800d940:	4b3c      	ldr	r3, [pc, #240]	@ (800da34 <HAL_FLASHEx_Erase+0x134>)
 800d942:	681b      	ldr	r3, [r3, #0]
 800d944:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800d948:	2b00      	cmp	r3, #0
 800d94a:	d009      	beq.n	800d960 <HAL_FLASHEx_Erase+0x60>
      {
        /* Disable data cache  */
        __HAL_FLASH_DATA_CACHE_DISABLE();
 800d94c:	4b39      	ldr	r3, [pc, #228]	@ (800da34 <HAL_FLASHEx_Erase+0x134>)
 800d94e:	681b      	ldr	r3, [r3, #0]
 800d950:	4a38      	ldr	r2, [pc, #224]	@ (800da34 <HAL_FLASHEx_Erase+0x134>)
 800d952:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800d956:	6013      	str	r3, [r2, #0]
        pFlash.CacheToReactivate = FLASH_CACHE_ICACHE_DCACHE_ENABLED;
 800d958:	4b35      	ldr	r3, [pc, #212]	@ (800da30 <HAL_FLASHEx_Erase+0x130>)
 800d95a:	2203      	movs	r2, #3
 800d95c:	771a      	strb	r2, [r3, #28]
 800d95e:	e016      	b.n	800d98e <HAL_FLASHEx_Erase+0x8e>
      }
      else
      {
        pFlash.CacheToReactivate = FLASH_CACHE_ICACHE_ENABLED;
 800d960:	4b33      	ldr	r3, [pc, #204]	@ (800da30 <HAL_FLASHEx_Erase+0x130>)
 800d962:	2201      	movs	r2, #1
 800d964:	771a      	strb	r2, [r3, #28]
 800d966:	e012      	b.n	800d98e <HAL_FLASHEx_Erase+0x8e>
      }
    }
    else if(READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != 0U)
 800d968:	4b32      	ldr	r3, [pc, #200]	@ (800da34 <HAL_FLASHEx_Erase+0x134>)
 800d96a:	681b      	ldr	r3, [r3, #0]
 800d96c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800d970:	2b00      	cmp	r3, #0
 800d972:	d009      	beq.n	800d988 <HAL_FLASHEx_Erase+0x88>
    {
      /* Disable data cache  */
      __HAL_FLASH_DATA_CACHE_DISABLE();
 800d974:	4b2f      	ldr	r3, [pc, #188]	@ (800da34 <HAL_FLASHEx_Erase+0x134>)
 800d976:	681b      	ldr	r3, [r3, #0]
 800d978:	4a2e      	ldr	r2, [pc, #184]	@ (800da34 <HAL_FLASHEx_Erase+0x134>)
 800d97a:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800d97e:	6013      	str	r3, [r2, #0]
      pFlash.CacheToReactivate = FLASH_CACHE_DCACHE_ENABLED;
 800d980:	4b2b      	ldr	r3, [pc, #172]	@ (800da30 <HAL_FLASHEx_Erase+0x130>)
 800d982:	2202      	movs	r2, #2
 800d984:	771a      	strb	r2, [r3, #28]
 800d986:	e002      	b.n	800d98e <HAL_FLASHEx_Erase+0x8e>
    }
    else
    {
      pFlash.CacheToReactivate = FLASH_CACHE_DISABLED;
 800d988:	4b29      	ldr	r3, [pc, #164]	@ (800da30 <HAL_FLASHEx_Erase+0x130>)
 800d98a:	2200      	movs	r2, #0
 800d98c:	771a      	strb	r2, [r3, #28]
    }

    if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 800d98e:	687b      	ldr	r3, [r7, #4]
 800d990:	681b      	ldr	r3, [r3, #0]
 800d992:	2b01      	cmp	r3, #1
 800d994:	d113      	bne.n	800d9be <HAL_FLASHEx_Erase+0xbe>
    {
      /* Mass erase to be done */
      FLASH_MassErase(pEraseInit->Banks);
 800d996:	687b      	ldr	r3, [r7, #4]
 800d998:	685b      	ldr	r3, [r3, #4]
 800d99a:	4618      	mov	r0, r3
 800d99c:	f000 f908 	bl	800dbb0 <FLASH_MassErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800d9a0:	f24c 3050 	movw	r0, #50000	@ 0xc350
 800d9a4:	f7ff fefa 	bl	800d79c <FLASH_WaitForLastOperation>
 800d9a8:	4603      	mov	r3, r0
 800d9aa:	73fb      	strb	r3, [r7, #15]
#if defined (STM32L471xx) || defined (STM32L475xx) || defined (STM32L476xx) || defined (STM32L485xx) || defined (STM32L486xx) || \
    defined (STM32L496xx) || defined (STM32L4A6xx) || \
    defined (STM32L4P5xx) || defined (STM32L4Q5xx) || \
    defined (STM32L4R5xx) || defined (STM32L4R7xx) || defined (STM32L4R9xx) || defined (STM32L4S5xx) || defined (STM32L4S7xx) || defined (STM32L4S9xx)
      /* If the erase operation is completed, disable the MER1 and MER2 Bits */
      CLEAR_BIT(FLASH->CR, (FLASH_CR_MER1 | FLASH_CR_MER2));
 800d9ac:	4b21      	ldr	r3, [pc, #132]	@ (800da34 <HAL_FLASHEx_Erase+0x134>)
 800d9ae:	695b      	ldr	r3, [r3, #20]
 800d9b0:	4a20      	ldr	r2, [pc, #128]	@ (800da34 <HAL_FLASHEx_Erase+0x134>)
 800d9b2:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800d9b6:	f023 0304 	bic.w	r3, r3, #4
 800d9ba:	6153      	str	r3, [r2, #20]
 800d9bc:	e02d      	b.n	800da1a <HAL_FLASHEx_Erase+0x11a>
#endif
    }
    else
    {
      /*Initialization of PageError variable*/
      *PageError = 0xFFFFFFFFU;
 800d9be:	683b      	ldr	r3, [r7, #0]
 800d9c0:	f04f 32ff 	mov.w	r2, #4294967295
 800d9c4:	601a      	str	r2, [r3, #0]

      for(page_index = pEraseInit->Page; page_index < (pEraseInit->Page + pEraseInit->NbPages); page_index++)
 800d9c6:	687b      	ldr	r3, [r7, #4]
 800d9c8:	689b      	ldr	r3, [r3, #8]
 800d9ca:	60bb      	str	r3, [r7, #8]
 800d9cc:	e01d      	b.n	800da0a <HAL_FLASHEx_Erase+0x10a>
      {
        FLASH_PageErase(page_index, pEraseInit->Banks);
 800d9ce:	687b      	ldr	r3, [r7, #4]
 800d9d0:	685b      	ldr	r3, [r3, #4]
 800d9d2:	4619      	mov	r1, r3
 800d9d4:	68b8      	ldr	r0, [r7, #8]
 800d9d6:	f000 f913 	bl	800dc00 <FLASH_PageErase>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800d9da:	f24c 3050 	movw	r0, #50000	@ 0xc350
 800d9de:	f7ff fedd 	bl	800d79c <FLASH_WaitForLastOperation>
 800d9e2:	4603      	mov	r3, r0
 800d9e4:	73fb      	strb	r3, [r7, #15]

        /* If the erase operation is completed, disable the PER Bit */
        CLEAR_BIT(FLASH->CR, (FLASH_CR_PER | FLASH_CR_PNB));
 800d9e6:	4b13      	ldr	r3, [pc, #76]	@ (800da34 <HAL_FLASHEx_Erase+0x134>)
 800d9e8:	695b      	ldr	r3, [r3, #20]
 800d9ea:	4a12      	ldr	r2, [pc, #72]	@ (800da34 <HAL_FLASHEx_Erase+0x134>)
 800d9ec:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 800d9f0:	f023 0302 	bic.w	r3, r3, #2
 800d9f4:	6153      	str	r3, [r2, #20]

        if (status != HAL_OK)
 800d9f6:	7bfb      	ldrb	r3, [r7, #15]
 800d9f8:	2b00      	cmp	r3, #0
 800d9fa:	d003      	beq.n	800da04 <HAL_FLASHEx_Erase+0x104>
        {
          /* In case of error, stop erase procedure and return the faulty address */
          *PageError = page_index;
 800d9fc:	683b      	ldr	r3, [r7, #0]
 800d9fe:	68ba      	ldr	r2, [r7, #8]
 800da00:	601a      	str	r2, [r3, #0]
          break;
 800da02:	e00a      	b.n	800da1a <HAL_FLASHEx_Erase+0x11a>
      for(page_index = pEraseInit->Page; page_index < (pEraseInit->Page + pEraseInit->NbPages); page_index++)
 800da04:	68bb      	ldr	r3, [r7, #8]
 800da06:	3301      	adds	r3, #1
 800da08:	60bb      	str	r3, [r7, #8]
 800da0a:	687b      	ldr	r3, [r7, #4]
 800da0c:	689a      	ldr	r2, [r3, #8]
 800da0e:	687b      	ldr	r3, [r7, #4]
 800da10:	68db      	ldr	r3, [r3, #12]
 800da12:	4413      	add	r3, r2
 800da14:	68ba      	ldr	r2, [r7, #8]
 800da16:	429a      	cmp	r2, r3
 800da18:	d3d9      	bcc.n	800d9ce <HAL_FLASHEx_Erase+0xce>
        }
      }
    }

    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();
 800da1a:	f000 f927 	bl	800dc6c <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 800da1e:	4b04      	ldr	r3, [pc, #16]	@ (800da30 <HAL_FLASHEx_Erase+0x130>)
 800da20:	2200      	movs	r2, #0
 800da22:	701a      	strb	r2, [r3, #0]

  return status;
 800da24:	7bfb      	ldrb	r3, [r7, #15]
}
 800da26:	4618      	mov	r0, r3
 800da28:	3710      	adds	r7, #16
 800da2a:	46bd      	mov	sp, r7
 800da2c:	bd80      	pop	{r7, pc}
 800da2e:	bf00      	nop
 800da30:	20000014 	.word	0x20000014
 800da34:	40022000 	.word	0x40022000

0800da38 <HAL_FLASHEx_OBProgram>:
  *         contains the configuration information for the programming.
  *
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_OBProgram(FLASH_OBProgramInitTypeDef *pOBInit)
{
 800da38:	b580      	push	{r7, lr}
 800da3a:	b084      	sub	sp, #16
 800da3c:	af00      	add	r7, sp, #0
 800da3e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800da40:	2300      	movs	r3, #0
 800da42:	73fb      	strb	r3, [r7, #15]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 800da44:	4b32      	ldr	r3, [pc, #200]	@ (800db10 <HAL_FLASHEx_OBProgram+0xd8>)
 800da46:	781b      	ldrb	r3, [r3, #0]
 800da48:	2b01      	cmp	r3, #1
 800da4a:	d101      	bne.n	800da50 <HAL_FLASHEx_OBProgram+0x18>
 800da4c:	2302      	movs	r3, #2
 800da4e:	e05a      	b.n	800db06 <HAL_FLASHEx_OBProgram+0xce>
 800da50:	4b2f      	ldr	r3, [pc, #188]	@ (800db10 <HAL_FLASHEx_OBProgram+0xd8>)
 800da52:	2201      	movs	r2, #1
 800da54:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_OPTIONBYTE(pOBInit->OptionType));

  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 800da56:	4b2e      	ldr	r3, [pc, #184]	@ (800db10 <HAL_FLASHEx_OBProgram+0xd8>)
 800da58:	2200      	movs	r2, #0
 800da5a:	605a      	str	r2, [r3, #4]

  /* Write protection configuration */
  if((pOBInit->OptionType & OPTIONBYTE_WRP) != 0U)
 800da5c:	687b      	ldr	r3, [r7, #4]
 800da5e:	681b      	ldr	r3, [r3, #0]
 800da60:	f003 0301 	and.w	r3, r3, #1
 800da64:	2b00      	cmp	r3, #0
 800da66:	d00d      	beq.n	800da84 <HAL_FLASHEx_OBProgram+0x4c>
  {
    /* Configure of Write protection on the selected area */
    if(FLASH_OB_WRPConfig(pOBInit->WRPArea, pOBInit->WRPStartOffset, pOBInit->WRPEndOffset) != HAL_OK)
 800da68:	687b      	ldr	r3, [r7, #4]
 800da6a:	6858      	ldr	r0, [r3, #4]
 800da6c:	687b      	ldr	r3, [r7, #4]
 800da6e:	6899      	ldr	r1, [r3, #8]
 800da70:	687b      	ldr	r3, [r7, #4]
 800da72:	68db      	ldr	r3, [r3, #12]
 800da74:	461a      	mov	r2, r3
 800da76:	f000 f943 	bl	800dd00 <FLASH_OB_WRPConfig>
 800da7a:	4603      	mov	r3, r0
 800da7c:	2b00      	cmp	r3, #0
 800da7e:	d001      	beq.n	800da84 <HAL_FLASHEx_OBProgram+0x4c>
    {
      status = HAL_ERROR;
 800da80:	2301      	movs	r3, #1
 800da82:	73fb      	strb	r3, [r7, #15]
    }

  }

  /* Read protection configuration */
  if((pOBInit->OptionType & OPTIONBYTE_RDP) != 0U)
 800da84:	687b      	ldr	r3, [r7, #4]
 800da86:	681b      	ldr	r3, [r3, #0]
 800da88:	f003 0302 	and.w	r3, r3, #2
 800da8c:	2b00      	cmp	r3, #0
 800da8e:	d009      	beq.n	800daa4 <HAL_FLASHEx_OBProgram+0x6c>
  {
    /* Configure the Read protection level */
    if(FLASH_OB_RDPConfig(pOBInit->RDPLevel) != HAL_OK)
 800da90:	687b      	ldr	r3, [r7, #4]
 800da92:	691b      	ldr	r3, [r3, #16]
 800da94:	4618      	mov	r0, r3
 800da96:	f000 f997 	bl	800ddc8 <FLASH_OB_RDPConfig>
 800da9a:	4603      	mov	r3, r0
 800da9c:	2b00      	cmp	r3, #0
 800da9e:	d001      	beq.n	800daa4 <HAL_FLASHEx_OBProgram+0x6c>
    {
      status = HAL_ERROR;
 800daa0:	2301      	movs	r3, #1
 800daa2:	73fb      	strb	r3, [r7, #15]
    }
  }

  /* User Configuration */
  if((pOBInit->OptionType & OPTIONBYTE_USER) != 0U)
 800daa4:	687b      	ldr	r3, [r7, #4]
 800daa6:	681b      	ldr	r3, [r3, #0]
 800daa8:	f003 0304 	and.w	r3, r3, #4
 800daac:	2b00      	cmp	r3, #0
 800daae:	d00c      	beq.n	800daca <HAL_FLASHEx_OBProgram+0x92>
  {
    /* Configure the user option bytes */
    if(FLASH_OB_UserConfig(pOBInit->USERType, pOBInit->USERConfig) != HAL_OK)
 800dab0:	687b      	ldr	r3, [r7, #4]
 800dab2:	695a      	ldr	r2, [r3, #20]
 800dab4:	687b      	ldr	r3, [r7, #4]
 800dab6:	699b      	ldr	r3, [r3, #24]
 800dab8:	4619      	mov	r1, r3
 800daba:	4610      	mov	r0, r2
 800dabc:	f000 f9b2 	bl	800de24 <FLASH_OB_UserConfig>
 800dac0:	4603      	mov	r3, r0
 800dac2:	2b00      	cmp	r3, #0
 800dac4:	d001      	beq.n	800daca <HAL_FLASHEx_OBProgram+0x92>
    {
      status = HAL_ERROR;
 800dac6:	2301      	movs	r3, #1
 800dac8:	73fb      	strb	r3, [r7, #15]
    }
  }

  /* PCROP Configuration */
  if((pOBInit->OptionType & OPTIONBYTE_PCROP) != 0U)
 800daca:	687b      	ldr	r3, [r7, #4]
 800dacc:	681b      	ldr	r3, [r3, #0]
 800dace:	f003 0308 	and.w	r3, r3, #8
 800dad2:	2b00      	cmp	r3, #0
 800dad4:	d013      	beq.n	800dafe <HAL_FLASHEx_OBProgram+0xc6>
  {
    if (pOBInit->PCROPStartAddr != pOBInit->PCROPEndAddr)
 800dad6:	687b      	ldr	r3, [r7, #4]
 800dad8:	6a1a      	ldr	r2, [r3, #32]
 800dada:	687b      	ldr	r3, [r7, #4]
 800dadc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800dade:	429a      	cmp	r2, r3
 800dae0:	d00d      	beq.n	800dafe <HAL_FLASHEx_OBProgram+0xc6>
    {
      /* Configure the Proprietary code readout protection */
      if(FLASH_OB_PCROPConfig(pOBInit->PCROPConfig, pOBInit->PCROPStartAddr, pOBInit->PCROPEndAddr) != HAL_OK)
 800dae2:	687b      	ldr	r3, [r7, #4]
 800dae4:	69d8      	ldr	r0, [r3, #28]
 800dae6:	687b      	ldr	r3, [r7, #4]
 800dae8:	6a19      	ldr	r1, [r3, #32]
 800daea:	687b      	ldr	r3, [r7, #4]
 800daec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800daee:	461a      	mov	r2, r3
 800daf0:	f000 fa90 	bl	800e014 <FLASH_OB_PCROPConfig>
 800daf4:	4603      	mov	r3, r0
 800daf6:	2b00      	cmp	r3, #0
 800daf8:	d001      	beq.n	800dafe <HAL_FLASHEx_OBProgram+0xc6>
      {
        status = HAL_ERROR;
 800dafa:	2301      	movs	r3, #1
 800dafc:	73fb      	strb	r3, [r7, #15]
      }
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 800dafe:	4b04      	ldr	r3, [pc, #16]	@ (800db10 <HAL_FLASHEx_OBProgram+0xd8>)
 800db00:	2200      	movs	r2, #0
 800db02:	701a      	strb	r2, [r3, #0]

  return status;
 800db04:	7bfb      	ldrb	r3, [r7, #15]
}
 800db06:	4618      	mov	r0, r3
 800db08:	3710      	adds	r7, #16
 800db0a:	46bd      	mov	sp, r7
 800db0c:	bd80      	pop	{r7, pc}
 800db0e:	bf00      	nop
 800db10:	20000014 	.word	0x20000014

0800db14 <HAL_FLASHEx_OBGetConfig>:
  *         which area is requested for the WRP and PCROP, else no information will be returned
  *
  * @retval None
  */
void HAL_FLASHEx_OBGetConfig(FLASH_OBProgramInitTypeDef *pOBInit)
{
 800db14:	b580      	push	{r7, lr}
 800db16:	b082      	sub	sp, #8
 800db18:	af00      	add	r7, sp, #0
 800db1a:	6078      	str	r0, [r7, #4]
  pOBInit->OptionType = (OPTIONBYTE_RDP | OPTIONBYTE_USER);
 800db1c:	687b      	ldr	r3, [r7, #4]
 800db1e:	2206      	movs	r2, #6
 800db20:	601a      	str	r2, [r3, #0]

#if defined (STM32L471xx) || defined (STM32L475xx) || defined (STM32L476xx) || defined (STM32L485xx) || defined (STM32L486xx) || \
    defined (STM32L496xx) || defined (STM32L4A6xx) || \
    defined (STM32L4P5xx) || defined (STM32L4Q5xx) || \
    defined (STM32L4R5xx) || defined (STM32L4R7xx) || defined (STM32L4R9xx) || defined (STM32L4S5xx) || defined (STM32L4S7xx) || defined (STM32L4S9xx)
  if((pOBInit->WRPArea == OB_WRPAREA_BANK1_AREAA) || (pOBInit->WRPArea == OB_WRPAREA_BANK1_AREAB) ||
 800db22:	687b      	ldr	r3, [r7, #4]
 800db24:	685b      	ldr	r3, [r3, #4]
 800db26:	2b00      	cmp	r3, #0
 800db28:	d00b      	beq.n	800db42 <HAL_FLASHEx_OBGetConfig+0x2e>
 800db2a:	687b      	ldr	r3, [r7, #4]
 800db2c:	685b      	ldr	r3, [r3, #4]
 800db2e:	2b01      	cmp	r3, #1
 800db30:	d007      	beq.n	800db42 <HAL_FLASHEx_OBGetConfig+0x2e>
     (pOBInit->WRPArea == OB_WRPAREA_BANK2_AREAA) || (pOBInit->WRPArea == OB_WRPAREA_BANK2_AREAB))
 800db32:	687b      	ldr	r3, [r7, #4]
 800db34:	685b      	ldr	r3, [r3, #4]
  if((pOBInit->WRPArea == OB_WRPAREA_BANK1_AREAA) || (pOBInit->WRPArea == OB_WRPAREA_BANK1_AREAB) ||
 800db36:	2b02      	cmp	r3, #2
 800db38:	d003      	beq.n	800db42 <HAL_FLASHEx_OBGetConfig+0x2e>
     (pOBInit->WRPArea == OB_WRPAREA_BANK2_AREAA) || (pOBInit->WRPArea == OB_WRPAREA_BANK2_AREAB))
 800db3a:	687b      	ldr	r3, [r7, #4]
 800db3c:	685b      	ldr	r3, [r3, #4]
 800db3e:	2b04      	cmp	r3, #4
 800db40:	d10f      	bne.n	800db62 <HAL_FLASHEx_OBGetConfig+0x4e>
#else
  if((pOBInit->WRPArea == OB_WRPAREA_BANK1_AREAA) || (pOBInit->WRPArea == OB_WRPAREA_BANK1_AREAB))
#endif
  {
    pOBInit->OptionType |= OPTIONBYTE_WRP;
 800db42:	687b      	ldr	r3, [r7, #4]
 800db44:	681b      	ldr	r3, [r3, #0]
 800db46:	f043 0201 	orr.w	r2, r3, #1
 800db4a:	687b      	ldr	r3, [r7, #4]
 800db4c:	601a      	str	r2, [r3, #0]
    /* Get write protection on the selected area */
    FLASH_OB_GetWRP(pOBInit->WRPArea, &(pOBInit->WRPStartOffset), &(pOBInit->WRPEndOffset));
 800db4e:	687b      	ldr	r3, [r7, #4]
 800db50:	6858      	ldr	r0, [r3, #4]
 800db52:	687b      	ldr	r3, [r7, #4]
 800db54:	f103 0108 	add.w	r1, r3, #8
 800db58:	687b      	ldr	r3, [r7, #4]
 800db5a:	330c      	adds	r3, #12
 800db5c:	461a      	mov	r2, r3
 800db5e:	f000 fb05 	bl	800e16c <FLASH_OB_GetWRP>
  }

  /* Get Read protection level */
  pOBInit->RDPLevel = FLASH_OB_GetRDP();
 800db62:	f000 fb4d 	bl	800e200 <FLASH_OB_GetRDP>
 800db66:	4602      	mov	r2, r0
 800db68:	687b      	ldr	r3, [r7, #4]
 800db6a:	611a      	str	r2, [r3, #16]

  /* Get the user option bytes */
  pOBInit->USERConfig = FLASH_OB_GetUser();
 800db6c:	f000 fb62 	bl	800e234 <FLASH_OB_GetUser>
 800db70:	4602      	mov	r2, r0
 800db72:	687b      	ldr	r3, [r7, #4]
 800db74:	619a      	str	r2, [r3, #24]

#if defined (STM32L471xx) || defined (STM32L475xx) || defined (STM32L476xx) || defined (STM32L485xx) || defined (STM32L486xx) || \
    defined (STM32L496xx) || defined (STM32L4A6xx) || \
    defined (STM32L4P5xx) || defined (STM32L4Q5xx) || \
    defined (STM32L4R5xx) || defined (STM32L4R7xx) || defined (STM32L4R9xx) || defined (STM32L4S5xx) || defined (STM32L4S7xx) || defined (STM32L4S9xx)
  if((pOBInit->PCROPConfig == FLASH_BANK_1) || (pOBInit->PCROPConfig == FLASH_BANK_2))
 800db76:	687b      	ldr	r3, [r7, #4]
 800db78:	69db      	ldr	r3, [r3, #28]
 800db7a:	2b01      	cmp	r3, #1
 800db7c:	d003      	beq.n	800db86 <HAL_FLASHEx_OBGetConfig+0x72>
 800db7e:	687b      	ldr	r3, [r7, #4]
 800db80:	69db      	ldr	r3, [r3, #28]
 800db82:	2b02      	cmp	r3, #2
 800db84:	d110      	bne.n	800dba8 <HAL_FLASHEx_OBGetConfig+0x94>
#else
  if(pOBInit->PCROPConfig == FLASH_BANK_1)
#endif
  {
    pOBInit->OptionType |= OPTIONBYTE_PCROP;
 800db86:	687b      	ldr	r3, [r7, #4]
 800db88:	681b      	ldr	r3, [r3, #0]
 800db8a:	f043 0208 	orr.w	r2, r3, #8
 800db8e:	687b      	ldr	r3, [r7, #4]
 800db90:	601a      	str	r2, [r3, #0]
    /* Get the Proprietary code readout protection */
    FLASH_OB_GetPCROP(&(pOBInit->PCROPConfig), &(pOBInit->PCROPStartAddr), &(pOBInit->PCROPEndAddr));
 800db92:	687b      	ldr	r3, [r7, #4]
 800db94:	f103 001c 	add.w	r0, r3, #28
 800db98:	687b      	ldr	r3, [r7, #4]
 800db9a:	f103 0120 	add.w	r1, r3, #32
 800db9e:	687b      	ldr	r3, [r7, #4]
 800dba0:	3324      	adds	r3, #36	@ 0x24
 800dba2:	461a      	mov	r2, r3
 800dba4:	f000 fb5a 	bl	800e25c <FLASH_OB_GetPCROP>
  }
}
 800dba8:	bf00      	nop
 800dbaa:	3708      	adds	r7, #8
 800dbac:	46bd      	mov	sp, r7
 800dbae:	bd80      	pop	{r7, pc}

0800dbb0 <FLASH_MassErase>:
  *            @arg FLASH_BANK_2: Bank2 to be erased
  *            @arg FLASH_BANK_BOTH: Bank1 and Bank2 to be erased
  * @retval None
  */
static void FLASH_MassErase(uint32_t Banks)
{
 800dbb0:	b480      	push	{r7}
 800dbb2:	b083      	sub	sp, #12
 800dbb4:	af00      	add	r7, sp, #0
 800dbb6:	6078      	str	r0, [r7, #4]
  {
    /* Check the parameters */
    assert_param(IS_FLASH_BANK(Banks));

    /* Set the Mass Erase Bit for the bank 1 if requested */
    if((Banks & FLASH_BANK_1) != 0U)
 800dbb8:	687b      	ldr	r3, [r7, #4]
 800dbba:	f003 0301 	and.w	r3, r3, #1
 800dbbe:	2b00      	cmp	r3, #0
 800dbc0:	d005      	beq.n	800dbce <FLASH_MassErase+0x1e>
    {
      SET_BIT(FLASH->CR, FLASH_CR_MER1);
 800dbc2:	4b0e      	ldr	r3, [pc, #56]	@ (800dbfc <FLASH_MassErase+0x4c>)
 800dbc4:	695b      	ldr	r3, [r3, #20]
 800dbc6:	4a0d      	ldr	r2, [pc, #52]	@ (800dbfc <FLASH_MassErase+0x4c>)
 800dbc8:	f043 0304 	orr.w	r3, r3, #4
 800dbcc:	6153      	str	r3, [r2, #20]
#if defined (STM32L471xx) || defined (STM32L475xx) || defined (STM32L476xx) || defined (STM32L485xx) || defined (STM32L486xx) || \
    defined (STM32L496xx) || defined (STM32L4A6xx) || \
    defined (STM32L4P5xx) || defined (STM32L4Q5xx) || \
    defined (STM32L4R5xx) || defined (STM32L4R7xx) || defined (STM32L4R9xx) || defined (STM32L4S5xx) || defined (STM32L4S7xx) || defined (STM32L4S9xx)
    /* Set the Mass Erase Bit for the bank 2 if requested */
    if((Banks & FLASH_BANK_2) != 0U)
 800dbce:	687b      	ldr	r3, [r7, #4]
 800dbd0:	f003 0302 	and.w	r3, r3, #2
 800dbd4:	2b00      	cmp	r3, #0
 800dbd6:	d005      	beq.n	800dbe4 <FLASH_MassErase+0x34>
    {
      SET_BIT(FLASH->CR, FLASH_CR_MER2);
 800dbd8:	4b08      	ldr	r3, [pc, #32]	@ (800dbfc <FLASH_MassErase+0x4c>)
 800dbda:	695b      	ldr	r3, [r3, #20]
 800dbdc:	4a07      	ldr	r2, [pc, #28]	@ (800dbfc <FLASH_MassErase+0x4c>)
 800dbde:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800dbe2:	6153      	str	r3, [r2, #20]
    SET_BIT(FLASH->CR, (FLASH_CR_MER1 | FLASH_CR_MER2));
  }
#endif

  /* Proceed to erase all sectors */
  SET_BIT(FLASH->CR, FLASH_CR_STRT);
 800dbe4:	4b05      	ldr	r3, [pc, #20]	@ (800dbfc <FLASH_MassErase+0x4c>)
 800dbe6:	695b      	ldr	r3, [r3, #20]
 800dbe8:	4a04      	ldr	r2, [pc, #16]	@ (800dbfc <FLASH_MassErase+0x4c>)
 800dbea:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800dbee:	6153      	str	r3, [r2, #20]
}
 800dbf0:	bf00      	nop
 800dbf2:	370c      	adds	r7, #12
 800dbf4:	46bd      	mov	sp, r7
 800dbf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dbfa:	4770      	bx	lr
 800dbfc:	40022000 	.word	0x40022000

0800dc00 <FLASH_PageErase>:
  *            @arg FLASH_BANK_1: Page in bank 1 to be erased
  *            @arg FLASH_BANK_2: Page in bank 2 to be erased
  * @retval None
  */
void FLASH_PageErase(uint32_t Page, uint32_t Banks)
{
 800dc00:	b480      	push	{r7}
 800dc02:	b083      	sub	sp, #12
 800dc04:	af00      	add	r7, sp, #0
 800dc06:	6078      	str	r0, [r7, #4]
 800dc08:	6039      	str	r1, [r7, #0]
  else
#endif
  {
    assert_param(IS_FLASH_BANK_EXCLUSIVE(Banks));

    if((Banks & FLASH_BANK_1) != 0U)
 800dc0a:	683b      	ldr	r3, [r7, #0]
 800dc0c:	f003 0301 	and.w	r3, r3, #1
 800dc10:	2b00      	cmp	r3, #0
 800dc12:	d006      	beq.n	800dc22 <FLASH_PageErase+0x22>
    {
      CLEAR_BIT(FLASH->CR, FLASH_CR_BKER);
 800dc14:	4b14      	ldr	r3, [pc, #80]	@ (800dc68 <FLASH_PageErase+0x68>)
 800dc16:	695b      	ldr	r3, [r3, #20]
 800dc18:	4a13      	ldr	r2, [pc, #76]	@ (800dc68 <FLASH_PageErase+0x68>)
 800dc1a:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800dc1e:	6153      	str	r3, [r2, #20]
 800dc20:	e005      	b.n	800dc2e <FLASH_PageErase+0x2e>
    }
    else
    {
      SET_BIT(FLASH->CR, FLASH_CR_BKER);
 800dc22:	4b11      	ldr	r3, [pc, #68]	@ (800dc68 <FLASH_PageErase+0x68>)
 800dc24:	695b      	ldr	r3, [r3, #20]
 800dc26:	4a10      	ldr	r2, [pc, #64]	@ (800dc68 <FLASH_PageErase+0x68>)
 800dc28:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 800dc2c:	6153      	str	r3, [r2, #20]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Banks);
#endif

  /* Proceed to erase the page */
  MODIFY_REG(FLASH->CR, FLASH_CR_PNB, ((Page & 0xFFU) << FLASH_CR_PNB_Pos));
 800dc2e:	4b0e      	ldr	r3, [pc, #56]	@ (800dc68 <FLASH_PageErase+0x68>)
 800dc30:	695b      	ldr	r3, [r3, #20]
 800dc32:	f423 62ff 	bic.w	r2, r3, #2040	@ 0x7f8
 800dc36:	687b      	ldr	r3, [r7, #4]
 800dc38:	00db      	lsls	r3, r3, #3
 800dc3a:	f403 63ff 	and.w	r3, r3, #2040	@ 0x7f8
 800dc3e:	490a      	ldr	r1, [pc, #40]	@ (800dc68 <FLASH_PageErase+0x68>)
 800dc40:	4313      	orrs	r3, r2
 800dc42:	614b      	str	r3, [r1, #20]
  SET_BIT(FLASH->CR, FLASH_CR_PER);
 800dc44:	4b08      	ldr	r3, [pc, #32]	@ (800dc68 <FLASH_PageErase+0x68>)
 800dc46:	695b      	ldr	r3, [r3, #20]
 800dc48:	4a07      	ldr	r2, [pc, #28]	@ (800dc68 <FLASH_PageErase+0x68>)
 800dc4a:	f043 0302 	orr.w	r3, r3, #2
 800dc4e:	6153      	str	r3, [r2, #20]
  SET_BIT(FLASH->CR, FLASH_CR_STRT);
 800dc50:	4b05      	ldr	r3, [pc, #20]	@ (800dc68 <FLASH_PageErase+0x68>)
 800dc52:	695b      	ldr	r3, [r3, #20]
 800dc54:	4a04      	ldr	r2, [pc, #16]	@ (800dc68 <FLASH_PageErase+0x68>)
 800dc56:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800dc5a:	6153      	str	r3, [r2, #20]
}
 800dc5c:	bf00      	nop
 800dc5e:	370c      	adds	r7, #12
 800dc60:	46bd      	mov	sp, r7
 800dc62:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc66:	4770      	bx	lr
 800dc68:	40022000 	.word	0x40022000

0800dc6c <FLASH_FlushCaches>:
/**
  * @brief  Flush the instruction and data caches.
  * @retval None
  */
void FLASH_FlushCaches(void)
{
 800dc6c:	b480      	push	{r7}
 800dc6e:	b083      	sub	sp, #12
 800dc70:	af00      	add	r7, sp, #0
  FLASH_CacheTypeDef cache = pFlash.CacheToReactivate;
 800dc72:	4b21      	ldr	r3, [pc, #132]	@ (800dcf8 <FLASH_FlushCaches+0x8c>)
 800dc74:	7f1b      	ldrb	r3, [r3, #28]
 800dc76:	71fb      	strb	r3, [r7, #7]

  /* Flush instruction cache  */
  if((cache == FLASH_CACHE_ICACHE_ENABLED) ||
 800dc78:	79fb      	ldrb	r3, [r7, #7]
 800dc7a:	2b01      	cmp	r3, #1
 800dc7c:	d002      	beq.n	800dc84 <FLASH_FlushCaches+0x18>
 800dc7e:	79fb      	ldrb	r3, [r7, #7]
 800dc80:	2b03      	cmp	r3, #3
 800dc82:	d117      	bne.n	800dcb4 <FLASH_FlushCaches+0x48>
     (cache == FLASH_CACHE_ICACHE_DCACHE_ENABLED))
  {
    /* Disable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 800dc84:	4b1d      	ldr	r3, [pc, #116]	@ (800dcfc <FLASH_FlushCaches+0x90>)
 800dc86:	681b      	ldr	r3, [r3, #0]
 800dc88:	4a1c      	ldr	r2, [pc, #112]	@ (800dcfc <FLASH_FlushCaches+0x90>)
 800dc8a:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800dc8e:	6013      	str	r3, [r2, #0]
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 800dc90:	4b1a      	ldr	r3, [pc, #104]	@ (800dcfc <FLASH_FlushCaches+0x90>)
 800dc92:	681b      	ldr	r3, [r3, #0]
 800dc94:	4a19      	ldr	r2, [pc, #100]	@ (800dcfc <FLASH_FlushCaches+0x90>)
 800dc96:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 800dc9a:	6013      	str	r3, [r2, #0]
 800dc9c:	4b17      	ldr	r3, [pc, #92]	@ (800dcfc <FLASH_FlushCaches+0x90>)
 800dc9e:	681b      	ldr	r3, [r3, #0]
 800dca0:	4a16      	ldr	r2, [pc, #88]	@ (800dcfc <FLASH_FlushCaches+0x90>)
 800dca2:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800dca6:	6013      	str	r3, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800dca8:	4b14      	ldr	r3, [pc, #80]	@ (800dcfc <FLASH_FlushCaches+0x90>)
 800dcaa:	681b      	ldr	r3, [r3, #0]
 800dcac:	4a13      	ldr	r2, [pc, #76]	@ (800dcfc <FLASH_FlushCaches+0x90>)
 800dcae:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800dcb2:	6013      	str	r3, [r2, #0]
  }

  /* Flush data cache */
  if((cache == FLASH_CACHE_DCACHE_ENABLED) ||
 800dcb4:	79fb      	ldrb	r3, [r7, #7]
 800dcb6:	2b02      	cmp	r3, #2
 800dcb8:	d002      	beq.n	800dcc0 <FLASH_FlushCaches+0x54>
 800dcba:	79fb      	ldrb	r3, [r7, #7]
 800dcbc:	2b03      	cmp	r3, #3
 800dcbe:	d111      	bne.n	800dce4 <FLASH_FlushCaches+0x78>
     (cache == FLASH_CACHE_ICACHE_DCACHE_ENABLED))
  {
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 800dcc0:	4b0e      	ldr	r3, [pc, #56]	@ (800dcfc <FLASH_FlushCaches+0x90>)
 800dcc2:	681b      	ldr	r3, [r3, #0]
 800dcc4:	4a0d      	ldr	r2, [pc, #52]	@ (800dcfc <FLASH_FlushCaches+0x90>)
 800dcc6:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800dcca:	6013      	str	r3, [r2, #0]
 800dccc:	4b0b      	ldr	r3, [pc, #44]	@ (800dcfc <FLASH_FlushCaches+0x90>)
 800dcce:	681b      	ldr	r3, [r3, #0]
 800dcd0:	4a0a      	ldr	r2, [pc, #40]	@ (800dcfc <FLASH_FlushCaches+0x90>)
 800dcd2:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800dcd6:	6013      	str	r3, [r2, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 800dcd8:	4b08      	ldr	r3, [pc, #32]	@ (800dcfc <FLASH_FlushCaches+0x90>)
 800dcda:	681b      	ldr	r3, [r3, #0]
 800dcdc:	4a07      	ldr	r2, [pc, #28]	@ (800dcfc <FLASH_FlushCaches+0x90>)
 800dcde:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800dce2:	6013      	str	r3, [r2, #0]
  }

  /* Reset internal variable */
  pFlash.CacheToReactivate = FLASH_CACHE_DISABLED;
 800dce4:	4b04      	ldr	r3, [pc, #16]	@ (800dcf8 <FLASH_FlushCaches+0x8c>)
 800dce6:	2200      	movs	r2, #0
 800dce8:	771a      	strb	r2, [r3, #28]
}
 800dcea:	bf00      	nop
 800dcec:	370c      	adds	r7, #12
 800dcee:	46bd      	mov	sp, r7
 800dcf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dcf4:	4770      	bx	lr
 800dcf6:	bf00      	nop
 800dcf8:	20000014 	.word	0x20000014
 800dcfc:	40022000 	.word	0x40022000

0800dd00 <FLASH_OB_WRPConfig>:
  *          This parameter can be page number between WRPStartOffset and (max number of pages in the bank - 1)
  *
  * @retval HAL Status
  */
static HAL_StatusTypeDef FLASH_OB_WRPConfig(uint32_t WRPArea, uint32_t WRPStartOffset, uint32_t WRDPEndOffset)
{
 800dd00:	b580      	push	{r7, lr}
 800dd02:	b086      	sub	sp, #24
 800dd04:	af00      	add	r7, sp, #0
 800dd06:	60f8      	str	r0, [r7, #12]
 800dd08:	60b9      	str	r1, [r7, #8]
 800dd0a:	607a      	str	r2, [r7, #4]
  assert_param(IS_OB_WRPAREA(WRPArea));
  assert_param(IS_FLASH_PAGE(WRPStartOffset));
  assert_param(IS_FLASH_PAGE(WRDPEndOffset));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800dd0c:	f24c 3050 	movw	r0, #50000	@ 0xc350
 800dd10:	f7ff fd44 	bl	800d79c <FLASH_WaitForLastOperation>
 800dd14:	4603      	mov	r3, r0
 800dd16:	75fb      	strb	r3, [r7, #23]

  if(status == HAL_OK)
 800dd18:	7dfb      	ldrb	r3, [r7, #23]
 800dd1a:	2b00      	cmp	r3, #0
 800dd1c:	d14c      	bne.n	800ddb8 <FLASH_OB_WRPConfig+0xb8>
  {
    /* Configure the write protected area */
    if(WRPArea == OB_WRPAREA_BANK1_AREAA)
 800dd1e:	68fb      	ldr	r3, [r7, #12]
 800dd20:	2b00      	cmp	r3, #0
 800dd22:	d10b      	bne.n	800dd3c <FLASH_OB_WRPConfig+0x3c>
    {
      MODIFY_REG(FLASH->WRP1AR, (FLASH_WRP1AR_WRP1A_STRT | FLASH_WRP1AR_WRP1A_END),
 800dd24:	4b27      	ldr	r3, [pc, #156]	@ (800ddc4 <FLASH_OB_WRPConfig+0xc4>)
 800dd26:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800dd28:	f003 22ff 	and.w	r2, r3, #4278255360	@ 0xff00ff00
 800dd2c:	687b      	ldr	r3, [r7, #4]
 800dd2e:	0419      	lsls	r1, r3, #16
 800dd30:	68bb      	ldr	r3, [r7, #8]
 800dd32:	430b      	orrs	r3, r1
 800dd34:	4923      	ldr	r1, [pc, #140]	@ (800ddc4 <FLASH_OB_WRPConfig+0xc4>)
 800dd36:	4313      	orrs	r3, r2
 800dd38:	62cb      	str	r3, [r1, #44]	@ 0x2c
 800dd3a:	e02b      	b.n	800dd94 <FLASH_OB_WRPConfig+0x94>
                 (WRPStartOffset | (WRDPEndOffset << 16)));
    }
    else if(WRPArea == OB_WRPAREA_BANK1_AREAB)
 800dd3c:	68fb      	ldr	r3, [r7, #12]
 800dd3e:	2b01      	cmp	r3, #1
 800dd40:	d10b      	bne.n	800dd5a <FLASH_OB_WRPConfig+0x5a>
    {
      MODIFY_REG(FLASH->WRP1BR, (FLASH_WRP1BR_WRP1B_STRT | FLASH_WRP1BR_WRP1B_END),
 800dd42:	4b20      	ldr	r3, [pc, #128]	@ (800ddc4 <FLASH_OB_WRPConfig+0xc4>)
 800dd44:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800dd46:	f003 22ff 	and.w	r2, r3, #4278255360	@ 0xff00ff00
 800dd4a:	687b      	ldr	r3, [r7, #4]
 800dd4c:	0419      	lsls	r1, r3, #16
 800dd4e:	68bb      	ldr	r3, [r7, #8]
 800dd50:	430b      	orrs	r3, r1
 800dd52:	491c      	ldr	r1, [pc, #112]	@ (800ddc4 <FLASH_OB_WRPConfig+0xc4>)
 800dd54:	4313      	orrs	r3, r2
 800dd56:	630b      	str	r3, [r1, #48]	@ 0x30
 800dd58:	e01c      	b.n	800dd94 <FLASH_OB_WRPConfig+0x94>
    }
#if defined (STM32L471xx) || defined (STM32L475xx) || defined (STM32L476xx) || defined (STM32L485xx) || defined (STM32L486xx) || \
    defined (STM32L496xx) || defined (STM32L4A6xx) || \
    defined (STM32L4P5xx) || defined (STM32L4Q5xx) || \
    defined (STM32L4R5xx) || defined (STM32L4R7xx) || defined (STM32L4R9xx) || defined (STM32L4S5xx) || defined (STM32L4S7xx) || defined (STM32L4S9xx)
    else if(WRPArea == OB_WRPAREA_BANK2_AREAA)
 800dd5a:	68fb      	ldr	r3, [r7, #12]
 800dd5c:	2b02      	cmp	r3, #2
 800dd5e:	d10b      	bne.n	800dd78 <FLASH_OB_WRPConfig+0x78>
    {
      MODIFY_REG(FLASH->WRP2AR, (FLASH_WRP2AR_WRP2A_STRT | FLASH_WRP2AR_WRP2A_END),
 800dd60:	4b18      	ldr	r3, [pc, #96]	@ (800ddc4 <FLASH_OB_WRPConfig+0xc4>)
 800dd62:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800dd64:	f003 22ff 	and.w	r2, r3, #4278255360	@ 0xff00ff00
 800dd68:	687b      	ldr	r3, [r7, #4]
 800dd6a:	0419      	lsls	r1, r3, #16
 800dd6c:	68bb      	ldr	r3, [r7, #8]
 800dd6e:	430b      	orrs	r3, r1
 800dd70:	4914      	ldr	r1, [pc, #80]	@ (800ddc4 <FLASH_OB_WRPConfig+0xc4>)
 800dd72:	4313      	orrs	r3, r2
 800dd74:	64cb      	str	r3, [r1, #76]	@ 0x4c
 800dd76:	e00d      	b.n	800dd94 <FLASH_OB_WRPConfig+0x94>
                 (WRPStartOffset | (WRDPEndOffset << 16)));
    }
    else if(WRPArea == OB_WRPAREA_BANK2_AREAB)
 800dd78:	68fb      	ldr	r3, [r7, #12]
 800dd7a:	2b04      	cmp	r3, #4
 800dd7c:	d10a      	bne.n	800dd94 <FLASH_OB_WRPConfig+0x94>
    {
      MODIFY_REG(FLASH->WRP2BR, (FLASH_WRP2BR_WRP2B_STRT | FLASH_WRP2BR_WRP2B_END),
 800dd7e:	4b11      	ldr	r3, [pc, #68]	@ (800ddc4 <FLASH_OB_WRPConfig+0xc4>)
 800dd80:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800dd82:	f003 22ff 	and.w	r2, r3, #4278255360	@ 0xff00ff00
 800dd86:	687b      	ldr	r3, [r7, #4]
 800dd88:	0419      	lsls	r1, r3, #16
 800dd8a:	68bb      	ldr	r3, [r7, #8]
 800dd8c:	430b      	orrs	r3, r1
 800dd8e:	490d      	ldr	r1, [pc, #52]	@ (800ddc4 <FLASH_OB_WRPConfig+0xc4>)
 800dd90:	4313      	orrs	r3, r2
 800dd92:	650b      	str	r3, [r1, #80]	@ 0x50
    {
      /* Nothing to do */
    }

    /* Set OPTSTRT Bit */
    SET_BIT(FLASH->CR, FLASH_CR_OPTSTRT);
 800dd94:	4b0b      	ldr	r3, [pc, #44]	@ (800ddc4 <FLASH_OB_WRPConfig+0xc4>)
 800dd96:	695b      	ldr	r3, [r3, #20]
 800dd98:	4a0a      	ldr	r2, [pc, #40]	@ (800ddc4 <FLASH_OB_WRPConfig+0xc4>)
 800dd9a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800dd9e:	6153      	str	r3, [r2, #20]

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800dda0:	f24c 3050 	movw	r0, #50000	@ 0xc350
 800dda4:	f7ff fcfa 	bl	800d79c <FLASH_WaitForLastOperation>
 800dda8:	4603      	mov	r3, r0
 800ddaa:	75fb      	strb	r3, [r7, #23]

    /* If the option byte program operation is completed, disable the OPTSTRT Bit */
    CLEAR_BIT(FLASH->CR, FLASH_CR_OPTSTRT);
 800ddac:	4b05      	ldr	r3, [pc, #20]	@ (800ddc4 <FLASH_OB_WRPConfig+0xc4>)
 800ddae:	695b      	ldr	r3, [r3, #20]
 800ddb0:	4a04      	ldr	r2, [pc, #16]	@ (800ddc4 <FLASH_OB_WRPConfig+0xc4>)
 800ddb2:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 800ddb6:	6153      	str	r3, [r2, #20]
  }

  return status;
 800ddb8:	7dfb      	ldrb	r3, [r7, #23]
}
 800ddba:	4618      	mov	r0, r3
 800ddbc:	3718      	adds	r7, #24
 800ddbe:	46bd      	mov	sp, r7
 800ddc0:	bd80      	pop	{r7, pc}
 800ddc2:	bf00      	nop
 800ddc4:	40022000 	.word	0x40022000

0800ddc8 <FLASH_OB_RDPConfig>:
  *            @arg OB_RDP_LEVEL_2: Full chip protection
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef FLASH_OB_RDPConfig(uint32_t RDPLevel)
{
 800ddc8:	b580      	push	{r7, lr}
 800ddca:	b084      	sub	sp, #16
 800ddcc:	af00      	add	r7, sp, #0
 800ddce:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_OB_RDP_LEVEL(RDPLevel));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800ddd0:	f24c 3050 	movw	r0, #50000	@ 0xc350
 800ddd4:	f7ff fce2 	bl	800d79c <FLASH_WaitForLastOperation>
 800ddd8:	4603      	mov	r3, r0
 800ddda:	73fb      	strb	r3, [r7, #15]

  if(status == HAL_OK)
 800dddc:	7bfb      	ldrb	r3, [r7, #15]
 800ddde:	2b00      	cmp	r3, #0
 800dde0:	d119      	bne.n	800de16 <FLASH_OB_RDPConfig+0x4e>
  {
    /* Configure the RDP level in the option bytes register */
    MODIFY_REG(FLASH->OPTR, FLASH_OPTR_RDP, RDPLevel);
 800dde2:	4b0f      	ldr	r3, [pc, #60]	@ (800de20 <FLASH_OB_RDPConfig+0x58>)
 800dde4:	6a1b      	ldr	r3, [r3, #32]
 800dde6:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 800ddea:	490d      	ldr	r1, [pc, #52]	@ (800de20 <FLASH_OB_RDPConfig+0x58>)
 800ddec:	687b      	ldr	r3, [r7, #4]
 800ddee:	4313      	orrs	r3, r2
 800ddf0:	620b      	str	r3, [r1, #32]

    /* Set OPTSTRT Bit */
    SET_BIT(FLASH->CR, FLASH_CR_OPTSTRT);
 800ddf2:	4b0b      	ldr	r3, [pc, #44]	@ (800de20 <FLASH_OB_RDPConfig+0x58>)
 800ddf4:	695b      	ldr	r3, [r3, #20]
 800ddf6:	4a0a      	ldr	r2, [pc, #40]	@ (800de20 <FLASH_OB_RDPConfig+0x58>)
 800ddf8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800ddfc:	6153      	str	r3, [r2, #20]

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800ddfe:	f24c 3050 	movw	r0, #50000	@ 0xc350
 800de02:	f7ff fccb 	bl	800d79c <FLASH_WaitForLastOperation>
 800de06:	4603      	mov	r3, r0
 800de08:	73fb      	strb	r3, [r7, #15]

    /* If the option byte program operation is completed, disable the OPTSTRT Bit */
    CLEAR_BIT(FLASH->CR, FLASH_CR_OPTSTRT);
 800de0a:	4b05      	ldr	r3, [pc, #20]	@ (800de20 <FLASH_OB_RDPConfig+0x58>)
 800de0c:	695b      	ldr	r3, [r3, #20]
 800de0e:	4a04      	ldr	r2, [pc, #16]	@ (800de20 <FLASH_OB_RDPConfig+0x58>)
 800de10:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 800de14:	6153      	str	r3, [r2, #20]
  }

  return status;
 800de16:	7bfb      	ldrb	r3, [r7, #15]
}
 800de18:	4618      	mov	r0, r3
 800de1a:	3710      	adds	r7, #16
 800de1c:	46bd      	mov	sp, r7
 800de1e:	bd80      	pop	{r7, pc}
 800de20:	40022000 	.word	0x40022000

0800de24 <FLASH_OB_UserConfig>:
  *         DUALBANK(Bit21), nBOOT1(Bit23), SRAM2_PE(Bit24) and SRAM2_RST(Bit25).
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef FLASH_OB_UserConfig(uint32_t UserType, uint32_t UserConfig)
{
 800de24:	b580      	push	{r7, lr}
 800de26:	b086      	sub	sp, #24
 800de28:	af00      	add	r7, sp, #0
 800de2a:	6078      	str	r0, [r7, #4]
 800de2c:	6039      	str	r1, [r7, #0]
  uint32_t optr_reg_val = 0;
 800de2e:	2300      	movs	r3, #0
 800de30:	617b      	str	r3, [r7, #20]
  uint32_t optr_reg_mask = 0;
 800de32:	2300      	movs	r3, #0
 800de34:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_OB_USER_TYPE(UserType));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800de36:	f24c 3050 	movw	r0, #50000	@ 0xc350
 800de3a:	f7ff fcaf 	bl	800d79c <FLASH_WaitForLastOperation>
 800de3e:	4603      	mov	r3, r0
 800de40:	73fb      	strb	r3, [r7, #15]

  if(status == HAL_OK)
 800de42:	7bfb      	ldrb	r3, [r7, #15]
 800de44:	2b00      	cmp	r3, #0
 800de46:	f040 80de 	bne.w	800e006 <FLASH_OB_UserConfig+0x1e2>
  {
    if((UserType & OB_USER_BOR_LEV) != 0U)
 800de4a:	687b      	ldr	r3, [r7, #4]
 800de4c:	f003 0301 	and.w	r3, r3, #1
 800de50:	2b00      	cmp	r3, #0
 800de52:	d009      	beq.n	800de68 <FLASH_OB_UserConfig+0x44>
    {
      /* BOR level option byte should be modified */
      assert_param(IS_OB_USER_BOR_LEVEL(UserConfig & FLASH_OPTR_BOR_LEV));

      /* Set value and mask for BOR level option byte */
      optr_reg_val |= (UserConfig & FLASH_OPTR_BOR_LEV);
 800de54:	683b      	ldr	r3, [r7, #0]
 800de56:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800de5a:	697a      	ldr	r2, [r7, #20]
 800de5c:	4313      	orrs	r3, r2
 800de5e:	617b      	str	r3, [r7, #20]
      optr_reg_mask |= FLASH_OPTR_BOR_LEV;
 800de60:	693b      	ldr	r3, [r7, #16]
 800de62:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800de66:	613b      	str	r3, [r7, #16]
    }

    if((UserType & OB_USER_nRST_STOP) != 0U)
 800de68:	687b      	ldr	r3, [r7, #4]
 800de6a:	f003 0302 	and.w	r3, r3, #2
 800de6e:	2b00      	cmp	r3, #0
 800de70:	d009      	beq.n	800de86 <FLASH_OB_UserConfig+0x62>
    {
      /* nRST_STOP option byte should be modified */
      assert_param(IS_OB_USER_STOP(UserConfig & FLASH_OPTR_nRST_STOP));

      /* Set value and mask for nRST_STOP option byte */
      optr_reg_val |= (UserConfig & FLASH_OPTR_nRST_STOP);
 800de72:	683b      	ldr	r3, [r7, #0]
 800de74:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800de78:	697a      	ldr	r2, [r7, #20]
 800de7a:	4313      	orrs	r3, r2
 800de7c:	617b      	str	r3, [r7, #20]
      optr_reg_mask |= FLASH_OPTR_nRST_STOP;
 800de7e:	693b      	ldr	r3, [r7, #16]
 800de80:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800de84:	613b      	str	r3, [r7, #16]
    }

    if((UserType & OB_USER_nRST_STDBY) != 0U)
 800de86:	687b      	ldr	r3, [r7, #4]
 800de88:	f003 0304 	and.w	r3, r3, #4
 800de8c:	2b00      	cmp	r3, #0
 800de8e:	d009      	beq.n	800dea4 <FLASH_OB_UserConfig+0x80>
    {
      /* nRST_STDBY option byte should be modified */
      assert_param(IS_OB_USER_STANDBY(UserConfig & FLASH_OPTR_nRST_STDBY));

      /* Set value and mask for nRST_STDBY option byte */
      optr_reg_val |= (UserConfig & FLASH_OPTR_nRST_STDBY);
 800de90:	683b      	ldr	r3, [r7, #0]
 800de92:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800de96:	697a      	ldr	r2, [r7, #20]
 800de98:	4313      	orrs	r3, r2
 800de9a:	617b      	str	r3, [r7, #20]
      optr_reg_mask |= FLASH_OPTR_nRST_STDBY;
 800de9c:	693b      	ldr	r3, [r7, #16]
 800de9e:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 800dea2:	613b      	str	r3, [r7, #16]
    }

    if((UserType & OB_USER_nRST_SHDW) != 0U)
 800dea4:	687b      	ldr	r3, [r7, #4]
 800dea6:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800deaa:	2b00      	cmp	r3, #0
 800deac:	d009      	beq.n	800dec2 <FLASH_OB_UserConfig+0x9e>
    {
      /* nRST_SHDW option byte should be modified */
      assert_param(IS_OB_USER_SHUTDOWN(UserConfig & FLASH_OPTR_nRST_SHDW));

      /* Set value and mask for nRST_SHDW option byte */
      optr_reg_val |= (UserConfig & FLASH_OPTR_nRST_SHDW);
 800deae:	683b      	ldr	r3, [r7, #0]
 800deb0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800deb4:	697a      	ldr	r2, [r7, #20]
 800deb6:	4313      	orrs	r3, r2
 800deb8:	617b      	str	r3, [r7, #20]
      optr_reg_mask |= FLASH_OPTR_nRST_SHDW;
 800deba:	693b      	ldr	r3, [r7, #16]
 800debc:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800dec0:	613b      	str	r3, [r7, #16]
    }

    if((UserType & OB_USER_IWDG_SW) != 0U)
 800dec2:	687b      	ldr	r3, [r7, #4]
 800dec4:	f003 0308 	and.w	r3, r3, #8
 800dec8:	2b00      	cmp	r3, #0
 800deca:	d009      	beq.n	800dee0 <FLASH_OB_UserConfig+0xbc>
    {
      /* IWDG_SW option byte should be modified */
      assert_param(IS_OB_USER_IWDG(UserConfig & FLASH_OPTR_IWDG_SW));

      /* Set value and mask for IWDG_SW option byte */
      optr_reg_val |= (UserConfig & FLASH_OPTR_IWDG_SW);
 800decc:	683b      	ldr	r3, [r7, #0]
 800dece:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800ded2:	697a      	ldr	r2, [r7, #20]
 800ded4:	4313      	orrs	r3, r2
 800ded6:	617b      	str	r3, [r7, #20]
      optr_reg_mask |= FLASH_OPTR_IWDG_SW;
 800ded8:	693b      	ldr	r3, [r7, #16]
 800deda:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800dede:	613b      	str	r3, [r7, #16]
    }

    if((UserType & OB_USER_IWDG_STOP) != 0U)
 800dee0:	687b      	ldr	r3, [r7, #4]
 800dee2:	f003 0310 	and.w	r3, r3, #16
 800dee6:	2b00      	cmp	r3, #0
 800dee8:	d009      	beq.n	800defe <FLASH_OB_UserConfig+0xda>
    {
      /* IWDG_STOP option byte should be modified */
      assert_param(IS_OB_USER_IWDG_STOP(UserConfig & FLASH_OPTR_IWDG_STOP));

      /* Set value and mask for IWDG_STOP option byte */
      optr_reg_val |= (UserConfig & FLASH_OPTR_IWDG_STOP);
 800deea:	683b      	ldr	r3, [r7, #0]
 800deec:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800def0:	697a      	ldr	r2, [r7, #20]
 800def2:	4313      	orrs	r3, r2
 800def4:	617b      	str	r3, [r7, #20]
      optr_reg_mask |= FLASH_OPTR_IWDG_STOP;
 800def6:	693b      	ldr	r3, [r7, #16]
 800def8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800defc:	613b      	str	r3, [r7, #16]
    }

    if((UserType & OB_USER_IWDG_STDBY) != 0U)
 800defe:	687b      	ldr	r3, [r7, #4]
 800df00:	f003 0320 	and.w	r3, r3, #32
 800df04:	2b00      	cmp	r3, #0
 800df06:	d009      	beq.n	800df1c <FLASH_OB_UserConfig+0xf8>
    {
      /* IWDG_STDBY option byte should be modified */
      assert_param(IS_OB_USER_IWDG_STDBY(UserConfig & FLASH_OPTR_IWDG_STDBY));

      /* Set value and mask for IWDG_STDBY option byte */
      optr_reg_val |= (UserConfig & FLASH_OPTR_IWDG_STDBY);
 800df08:	683b      	ldr	r3, [r7, #0]
 800df0a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800df0e:	697a      	ldr	r2, [r7, #20]
 800df10:	4313      	orrs	r3, r2
 800df12:	617b      	str	r3, [r7, #20]
      optr_reg_mask |= FLASH_OPTR_IWDG_STDBY;
 800df14:	693b      	ldr	r3, [r7, #16]
 800df16:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800df1a:	613b      	str	r3, [r7, #16]
    }

    if((UserType & OB_USER_WWDG_SW) != 0U)
 800df1c:	687b      	ldr	r3, [r7, #4]
 800df1e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800df22:	2b00      	cmp	r3, #0
 800df24:	d009      	beq.n	800df3a <FLASH_OB_UserConfig+0x116>
    {
      /* WWDG_SW option byte should be modified */
      assert_param(IS_OB_USER_WWDG(UserConfig & FLASH_OPTR_WWDG_SW));

      /* Set value and mask for WWDG_SW option byte */
      optr_reg_val |= (UserConfig & FLASH_OPTR_WWDG_SW);
 800df26:	683b      	ldr	r3, [r7, #0]
 800df28:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800df2c:	697a      	ldr	r2, [r7, #20]
 800df2e:	4313      	orrs	r3, r2
 800df30:	617b      	str	r3, [r7, #20]
      optr_reg_mask |= FLASH_OPTR_WWDG_SW;
 800df32:	693b      	ldr	r3, [r7, #16]
 800df34:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800df38:	613b      	str	r3, [r7, #16]

#if defined (STM32L471xx) || defined (STM32L475xx) || defined (STM32L476xx) || defined (STM32L485xx) || defined (STM32L486xx) || \
    defined (STM32L496xx) || defined (STM32L4A6xx) || \
    defined (STM32L4P5xx) || defined (STM32L4Q5xx) || \
    defined (STM32L4R5xx) || defined (STM32L4R7xx) || defined (STM32L4R9xx) || defined (STM32L4S5xx) || defined (STM32L4S7xx) || defined (STM32L4S9xx)
    if((UserType & OB_USER_BFB2) != 0U)
 800df3a:	687b      	ldr	r3, [r7, #4]
 800df3c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800df40:	2b00      	cmp	r3, #0
 800df42:	d009      	beq.n	800df58 <FLASH_OB_UserConfig+0x134>
    {
      /* BFB2 option byte should be modified */
      assert_param(IS_OB_USER_BFB2(UserConfig & FLASH_OPTR_BFB2));

      /* Set value and mask for BFB2 option byte */
      optr_reg_val |= (UserConfig & FLASH_OPTR_BFB2);
 800df44:	683b      	ldr	r3, [r7, #0]
 800df46:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800df4a:	697a      	ldr	r2, [r7, #20]
 800df4c:	4313      	orrs	r3, r2
 800df4e:	617b      	str	r3, [r7, #20]
      optr_reg_mask |= FLASH_OPTR_BFB2;
 800df50:	693b      	ldr	r3, [r7, #16]
 800df52:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800df56:	613b      	str	r3, [r7, #16]
    }

    if((UserType & OB_USER_DUALBANK) != 0U)
 800df58:	687b      	ldr	r3, [r7, #4]
 800df5a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800df5e:	2b00      	cmp	r3, #0
 800df60:	d009      	beq.n	800df76 <FLASH_OB_UserConfig+0x152>
#else
      /* DUALBANK option byte should be modified */
      assert_param(IS_OB_USER_DUALBANK(UserConfig & FLASH_OPTR_DUALBANK));

      /* Set value and mask for DUALBANK option byte */
      optr_reg_val |= (UserConfig & FLASH_OPTR_DUALBANK);
 800df62:	683b      	ldr	r3, [r7, #0]
 800df64:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800df68:	697a      	ldr	r2, [r7, #20]
 800df6a:	4313      	orrs	r3, r2
 800df6c:	617b      	str	r3, [r7, #20]
      optr_reg_mask |= FLASH_OPTR_DUALBANK;
 800df6e:	693b      	ldr	r3, [r7, #16]
 800df70:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800df74:	613b      	str	r3, [r7, #16]
#endif
    }
#endif

    if((UserType & OB_USER_nBOOT1) != 0U)
 800df76:	687b      	ldr	r3, [r7, #4]
 800df78:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800df7c:	2b00      	cmp	r3, #0
 800df7e:	d009      	beq.n	800df94 <FLASH_OB_UserConfig+0x170>
    {
      /* nBOOT1 option byte should be modified */
      assert_param(IS_OB_USER_BOOT1(UserConfig & FLASH_OPTR_nBOOT1));

      /* Set value and mask for nBOOT1 option byte */
      optr_reg_val |= (UserConfig & FLASH_OPTR_nBOOT1);
 800df80:	683b      	ldr	r3, [r7, #0]
 800df82:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800df86:	697a      	ldr	r2, [r7, #20]
 800df88:	4313      	orrs	r3, r2
 800df8a:	617b      	str	r3, [r7, #20]
      optr_reg_mask |= FLASH_OPTR_nBOOT1;
 800df8c:	693b      	ldr	r3, [r7, #16]
 800df8e:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800df92:	613b      	str	r3, [r7, #16]
    }

    if((UserType & OB_USER_SRAM2_PE) != 0U)
 800df94:	687b      	ldr	r3, [r7, #4]
 800df96:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800df9a:	2b00      	cmp	r3, #0
 800df9c:	d009      	beq.n	800dfb2 <FLASH_OB_UserConfig+0x18e>
    {
      /* SRAM2_PE option byte should be modified */
      assert_param(IS_OB_USER_SRAM2_PARITY(UserConfig & FLASH_OPTR_SRAM2_PE));

      /* Set value and mask for SRAM2_PE option byte */
      optr_reg_val |= (UserConfig & FLASH_OPTR_SRAM2_PE);
 800df9e:	683b      	ldr	r3, [r7, #0]
 800dfa0:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800dfa4:	697a      	ldr	r2, [r7, #20]
 800dfa6:	4313      	orrs	r3, r2
 800dfa8:	617b      	str	r3, [r7, #20]
      optr_reg_mask |= FLASH_OPTR_SRAM2_PE;
 800dfaa:	693b      	ldr	r3, [r7, #16]
 800dfac:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800dfb0:	613b      	str	r3, [r7, #16]
    }

    if((UserType & OB_USER_SRAM2_RST) != 0U)
 800dfb2:	687b      	ldr	r3, [r7, #4]
 800dfb4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800dfb8:	2b00      	cmp	r3, #0
 800dfba:	d009      	beq.n	800dfd0 <FLASH_OB_UserConfig+0x1ac>
    {
      /* SRAM2_RST option byte should be modified */
      assert_param(IS_OB_USER_SRAM2_RST(UserConfig & FLASH_OPTR_SRAM2_RST));

      /* Set value and mask for SRAM2_RST option byte */
      optr_reg_val |= (UserConfig & FLASH_OPTR_SRAM2_RST);
 800dfbc:	683b      	ldr	r3, [r7, #0]
 800dfbe:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800dfc2:	697a      	ldr	r2, [r7, #20]
 800dfc4:	4313      	orrs	r3, r2
 800dfc6:	617b      	str	r3, [r7, #20]
      optr_reg_mask |= FLASH_OPTR_SRAM2_RST;
 800dfc8:	693b      	ldr	r3, [r7, #16]
 800dfca:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800dfce:	613b      	str	r3, [r7, #16]
      optr_reg_mask |= FLASH_OPTR_nBOOT0;
    }
#endif

    /* Configure the option bytes register */
    MODIFY_REG(FLASH->OPTR, optr_reg_mask, optr_reg_val);
 800dfd0:	4b0f      	ldr	r3, [pc, #60]	@ (800e010 <FLASH_OB_UserConfig+0x1ec>)
 800dfd2:	6a1a      	ldr	r2, [r3, #32]
 800dfd4:	693b      	ldr	r3, [r7, #16]
 800dfd6:	43db      	mvns	r3, r3
 800dfd8:	401a      	ands	r2, r3
 800dfda:	490d      	ldr	r1, [pc, #52]	@ (800e010 <FLASH_OB_UserConfig+0x1ec>)
 800dfdc:	697b      	ldr	r3, [r7, #20]
 800dfde:	4313      	orrs	r3, r2
 800dfe0:	620b      	str	r3, [r1, #32]

    /* Set OPTSTRT Bit */
    SET_BIT(FLASH->CR, FLASH_CR_OPTSTRT);
 800dfe2:	4b0b      	ldr	r3, [pc, #44]	@ (800e010 <FLASH_OB_UserConfig+0x1ec>)
 800dfe4:	695b      	ldr	r3, [r3, #20]
 800dfe6:	4a0a      	ldr	r2, [pc, #40]	@ (800e010 <FLASH_OB_UserConfig+0x1ec>)
 800dfe8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800dfec:	6153      	str	r3, [r2, #20]

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800dfee:	f24c 3050 	movw	r0, #50000	@ 0xc350
 800dff2:	f7ff fbd3 	bl	800d79c <FLASH_WaitForLastOperation>
 800dff6:	4603      	mov	r3, r0
 800dff8:	73fb      	strb	r3, [r7, #15]

    /* If the option byte program operation is completed, disable the OPTSTRT Bit */
    CLEAR_BIT(FLASH->CR, FLASH_CR_OPTSTRT);
 800dffa:	4b05      	ldr	r3, [pc, #20]	@ (800e010 <FLASH_OB_UserConfig+0x1ec>)
 800dffc:	695b      	ldr	r3, [r3, #20]
 800dffe:	4a04      	ldr	r2, [pc, #16]	@ (800e010 <FLASH_OB_UserConfig+0x1ec>)
 800e000:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 800e004:	6153      	str	r3, [r2, #20]
  }

  return status;
 800e006:	7bfb      	ldrb	r3, [r7, #15]
}
 800e008:	4618      	mov	r0, r3
 800e00a:	3718      	adds	r7, #24
 800e00c:	46bd      	mov	sp, r7
 800e00e:	bd80      	pop	{r7, pc}
 800e010:	40022000 	.word	0x40022000

0800e014 <FLASH_OB_PCROPConfig>:
  *          This parameter can be an address between PCROPStartAddr and end of the bank
  *
  * @retval HAL Status
  */
static HAL_StatusTypeDef FLASH_OB_PCROPConfig(uint32_t PCROPConfig, uint32_t PCROPStartAddr, uint32_t PCROPEndAddr)
{
 800e014:	b580      	push	{r7, lr}
 800e016:	b088      	sub	sp, #32
 800e018:	af00      	add	r7, sp, #0
 800e01a:	60f8      	str	r0, [r7, #12]
 800e01c:	60b9      	str	r1, [r7, #8]
 800e01e:	607a      	str	r2, [r7, #4]
  assert_param(IS_OB_PCROP_RDP(PCROPConfig & FLASH_PCROP1ER_PCROP_RDP));
  assert_param(IS_FLASH_MAIN_MEM_ADDRESS(PCROPStartAddr));
  assert_param(IS_FLASH_MAIN_MEM_ADDRESS(PCROPEndAddr));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800e020:	f24c 3050 	movw	r0, #50000	@ 0xc350
 800e024:	f7ff fbba 	bl	800d79c <FLASH_WaitForLastOperation>
 800e028:	4603      	mov	r3, r0
 800e02a:	77fb      	strb	r3, [r7, #31]

  if(status == HAL_OK)
 800e02c:	7ffb      	ldrb	r3, [r7, #31]
 800e02e:	2b00      	cmp	r3, #0
 800e030:	f040 808c 	bne.w	800e14c <FLASH_OB_PCROPConfig+0x138>
#if defined (STM32L471xx) || defined (STM32L475xx) || defined (STM32L476xx) || defined (STM32L485xx) || defined (STM32L486xx) || \
    defined (STM32L496xx) || defined (STM32L4A6xx) || \
    defined (STM32L4P5xx) || defined (STM32L4Q5xx) || \
    defined (STM32L4R5xx) || defined (STM32L4R7xx) || defined (STM32L4R9xx) || defined (STM32L4S5xx) || defined (STM32L4S7xx) || defined (STM32L4S9xx)
    /* Get the information about the bank swapping */
    if (READ_BIT(SYSCFG->MEMRMP, SYSCFG_MEMRMP_FB_MODE) == 0U)
 800e034:	4b48      	ldr	r3, [pc, #288]	@ (800e158 <FLASH_OB_PCROPConfig+0x144>)
 800e036:	681b      	ldr	r3, [r3, #0]
 800e038:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800e03c:	2b00      	cmp	r3, #0
 800e03e:	d115      	bne.n	800e06c <FLASH_OB_PCROPConfig+0x58>
    {
      bank1_addr = FLASH_BASE;
 800e040:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800e044:	61bb      	str	r3, [r7, #24]
      bank2_addr = FLASH_BASE + FLASH_BANK_SIZE;
 800e046:	4b45      	ldr	r3, [pc, #276]	@ (800e15c <FLASH_OB_PCROPConfig+0x148>)
 800e048:	681b      	ldr	r3, [r3, #0]
 800e04a:	b29b      	uxth	r3, r3
 800e04c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800e050:	4293      	cmp	r3, r2
 800e052:	d008      	beq.n	800e066 <FLASH_OB_PCROPConfig+0x52>
 800e054:	4b41      	ldr	r3, [pc, #260]	@ (800e15c <FLASH_OB_PCROPConfig+0x148>)
 800e056:	681b      	ldr	r3, [r3, #0]
 800e058:	029b      	lsls	r3, r3, #10
 800e05a:	085a      	lsrs	r2, r3, #1
 800e05c:	4b40      	ldr	r3, [pc, #256]	@ (800e160 <FLASH_OB_PCROPConfig+0x14c>)
 800e05e:	4013      	ands	r3, r2
 800e060:	f103 6300 	add.w	r3, r3, #134217728	@ 0x8000000
 800e064:	e000      	b.n	800e068 <FLASH_OB_PCROPConfig+0x54>
 800e066:	4b3f      	ldr	r3, [pc, #252]	@ (800e164 <FLASH_OB_PCROPConfig+0x150>)
 800e068:	617b      	str	r3, [r7, #20]
 800e06a:	e014      	b.n	800e096 <FLASH_OB_PCROPConfig+0x82>
    }
    else
    {
      bank1_addr = FLASH_BASE + FLASH_BANK_SIZE;
 800e06c:	4b3b      	ldr	r3, [pc, #236]	@ (800e15c <FLASH_OB_PCROPConfig+0x148>)
 800e06e:	681b      	ldr	r3, [r3, #0]
 800e070:	b29b      	uxth	r3, r3
 800e072:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800e076:	4293      	cmp	r3, r2
 800e078:	d008      	beq.n	800e08c <FLASH_OB_PCROPConfig+0x78>
 800e07a:	4b38      	ldr	r3, [pc, #224]	@ (800e15c <FLASH_OB_PCROPConfig+0x148>)
 800e07c:	681b      	ldr	r3, [r3, #0]
 800e07e:	029b      	lsls	r3, r3, #10
 800e080:	085a      	lsrs	r2, r3, #1
 800e082:	4b37      	ldr	r3, [pc, #220]	@ (800e160 <FLASH_OB_PCROPConfig+0x14c>)
 800e084:	4013      	ands	r3, r2
 800e086:	f103 6300 	add.w	r3, r3, #134217728	@ 0x8000000
 800e08a:	e000      	b.n	800e08e <FLASH_OB_PCROPConfig+0x7a>
 800e08c:	4b35      	ldr	r3, [pc, #212]	@ (800e164 <FLASH_OB_PCROPConfig+0x150>)
 800e08e:	61bb      	str	r3, [r7, #24]
      bank2_addr = FLASH_BASE;
 800e090:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800e094:	617b      	str	r3, [r7, #20]
    }
    else
#endif
    {
      /* Configure the Proprietary code readout protection */
      if((PCROPConfig & FLASH_BANK_BOTH) == FLASH_BANK_1)
 800e096:	68fb      	ldr	r3, [r7, #12]
 800e098:	f003 0303 	and.w	r3, r3, #3
 800e09c:	2b01      	cmp	r3, #1
 800e09e:	d11a      	bne.n	800e0d6 <FLASH_OB_PCROPConfig+0xc2>
      {
        reg_value = ((PCROPStartAddr - bank1_addr) >> 3);
 800e0a0:	68ba      	ldr	r2, [r7, #8]
 800e0a2:	69bb      	ldr	r3, [r7, #24]
 800e0a4:	1ad3      	subs	r3, r2, r3
 800e0a6:	08db      	lsrs	r3, r3, #3
 800e0a8:	613b      	str	r3, [r7, #16]
        MODIFY_REG(FLASH->PCROP1SR, FLASH_PCROP1SR_PCROP1_STRT, reg_value);
 800e0aa:	4b2f      	ldr	r3, [pc, #188]	@ (800e168 <FLASH_OB_PCROPConfig+0x154>)
 800e0ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e0ae:	0c1b      	lsrs	r3, r3, #16
 800e0b0:	041b      	lsls	r3, r3, #16
 800e0b2:	492d      	ldr	r1, [pc, #180]	@ (800e168 <FLASH_OB_PCROPConfig+0x154>)
 800e0b4:	693a      	ldr	r2, [r7, #16]
 800e0b6:	4313      	orrs	r3, r2
 800e0b8:	624b      	str	r3, [r1, #36]	@ 0x24

        reg_value = ((PCROPEndAddr - bank1_addr) >> 3);
 800e0ba:	687a      	ldr	r2, [r7, #4]
 800e0bc:	69bb      	ldr	r3, [r7, #24]
 800e0be:	1ad3      	subs	r3, r2, r3
 800e0c0:	08db      	lsrs	r3, r3, #3
 800e0c2:	613b      	str	r3, [r7, #16]
        MODIFY_REG(FLASH->PCROP1ER, FLASH_PCROP1ER_PCROP1_END, reg_value);
 800e0c4:	4b28      	ldr	r3, [pc, #160]	@ (800e168 <FLASH_OB_PCROPConfig+0x154>)
 800e0c6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e0c8:	0c1b      	lsrs	r3, r3, #16
 800e0ca:	041b      	lsls	r3, r3, #16
 800e0cc:	4926      	ldr	r1, [pc, #152]	@ (800e168 <FLASH_OB_PCROPConfig+0x154>)
 800e0ce:	693a      	ldr	r2, [r7, #16]
 800e0d0:	4313      	orrs	r3, r2
 800e0d2:	628b      	str	r3, [r1, #40]	@ 0x28
 800e0d4:	e01e      	b.n	800e114 <FLASH_OB_PCROPConfig+0x100>
      }
#if defined (STM32L471xx) || defined (STM32L475xx) || defined (STM32L476xx) || defined (STM32L485xx) || defined (STM32L486xx) || \
    defined (STM32L496xx) || defined (STM32L4A6xx) || \
    defined (STM32L4P5xx) || defined (STM32L4Q5xx) || \
    defined (STM32L4R5xx) || defined (STM32L4R7xx) || defined (STM32L4R9xx) || defined (STM32L4S5xx) || defined (STM32L4S7xx) || defined (STM32L4S9xx)
      else if((PCROPConfig & FLASH_BANK_BOTH) == FLASH_BANK_2)
 800e0d6:	68fb      	ldr	r3, [r7, #12]
 800e0d8:	f003 0303 	and.w	r3, r3, #3
 800e0dc:	2b02      	cmp	r3, #2
 800e0de:	d119      	bne.n	800e114 <FLASH_OB_PCROPConfig+0x100>
      {
        reg_value = ((PCROPStartAddr - bank2_addr) >> 3);
 800e0e0:	68ba      	ldr	r2, [r7, #8]
 800e0e2:	697b      	ldr	r3, [r7, #20]
 800e0e4:	1ad3      	subs	r3, r2, r3
 800e0e6:	08db      	lsrs	r3, r3, #3
 800e0e8:	613b      	str	r3, [r7, #16]
        MODIFY_REG(FLASH->PCROP2SR, FLASH_PCROP2SR_PCROP2_STRT, reg_value);
 800e0ea:	4b1f      	ldr	r3, [pc, #124]	@ (800e168 <FLASH_OB_PCROPConfig+0x154>)
 800e0ec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800e0ee:	0c1b      	lsrs	r3, r3, #16
 800e0f0:	041b      	lsls	r3, r3, #16
 800e0f2:	491d      	ldr	r1, [pc, #116]	@ (800e168 <FLASH_OB_PCROPConfig+0x154>)
 800e0f4:	693a      	ldr	r2, [r7, #16]
 800e0f6:	4313      	orrs	r3, r2
 800e0f8:	644b      	str	r3, [r1, #68]	@ 0x44

        reg_value = ((PCROPEndAddr - bank2_addr) >> 3);
 800e0fa:	687a      	ldr	r2, [r7, #4]
 800e0fc:	697b      	ldr	r3, [r7, #20]
 800e0fe:	1ad3      	subs	r3, r2, r3
 800e100:	08db      	lsrs	r3, r3, #3
 800e102:	613b      	str	r3, [r7, #16]
        MODIFY_REG(FLASH->PCROP2ER, FLASH_PCROP2ER_PCROP2_END, reg_value);
 800e104:	4b18      	ldr	r3, [pc, #96]	@ (800e168 <FLASH_OB_PCROPConfig+0x154>)
 800e106:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800e108:	0c1b      	lsrs	r3, r3, #16
 800e10a:	041b      	lsls	r3, r3, #16
 800e10c:	4916      	ldr	r1, [pc, #88]	@ (800e168 <FLASH_OB_PCROPConfig+0x154>)
 800e10e:	693a      	ldr	r2, [r7, #16]
 800e110:	4313      	orrs	r3, r2
 800e112:	648b      	str	r3, [r1, #72]	@ 0x48
      {
        /* Nothing to do */
      }
    }

    MODIFY_REG(FLASH->PCROP1ER, FLASH_PCROP1ER_PCROP_RDP, (PCROPConfig & FLASH_PCROP1ER_PCROP_RDP));
 800e114:	4b14      	ldr	r3, [pc, #80]	@ (800e168 <FLASH_OB_PCROPConfig+0x154>)
 800e116:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e118:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800e11c:	68fb      	ldr	r3, [r7, #12]
 800e11e:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800e122:	4911      	ldr	r1, [pc, #68]	@ (800e168 <FLASH_OB_PCROPConfig+0x154>)
 800e124:	4313      	orrs	r3, r2
 800e126:	628b      	str	r3, [r1, #40]	@ 0x28

    /* Set OPTSTRT Bit */
    SET_BIT(FLASH->CR, FLASH_CR_OPTSTRT);
 800e128:	4b0f      	ldr	r3, [pc, #60]	@ (800e168 <FLASH_OB_PCROPConfig+0x154>)
 800e12a:	695b      	ldr	r3, [r3, #20]
 800e12c:	4a0e      	ldr	r2, [pc, #56]	@ (800e168 <FLASH_OB_PCROPConfig+0x154>)
 800e12e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800e132:	6153      	str	r3, [r2, #20]

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800e134:	f24c 3050 	movw	r0, #50000	@ 0xc350
 800e138:	f7ff fb30 	bl	800d79c <FLASH_WaitForLastOperation>
 800e13c:	4603      	mov	r3, r0
 800e13e:	77fb      	strb	r3, [r7, #31]

    /* If the option byte program operation is completed, disable the OPTSTRT Bit */
    CLEAR_BIT(FLASH->CR, FLASH_CR_OPTSTRT);
 800e140:	4b09      	ldr	r3, [pc, #36]	@ (800e168 <FLASH_OB_PCROPConfig+0x154>)
 800e142:	695b      	ldr	r3, [r3, #20]
 800e144:	4a08      	ldr	r2, [pc, #32]	@ (800e168 <FLASH_OB_PCROPConfig+0x154>)
 800e146:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 800e14a:	6153      	str	r3, [r2, #20]
  }

  return status;
 800e14c:	7ffb      	ldrb	r3, [r7, #31]
}
 800e14e:	4618      	mov	r0, r3
 800e150:	3720      	adds	r7, #32
 800e152:	46bd      	mov	sp, r7
 800e154:	bd80      	pop	{r7, pc}
 800e156:	bf00      	nop
 800e158:	40010000 	.word	0x40010000
 800e15c:	1fff75e0 	.word	0x1fff75e0
 800e160:	01fffe00 	.word	0x01fffe00
 800e164:	08080000 	.word	0x08080000
 800e168:	40022000 	.word	0x40022000

0800e16c <FLASH_OB_GetWRP>:
  *                        the write protected area
  *
  * @retval None
  */
static void FLASH_OB_GetWRP(uint32_t WRPArea, uint32_t * WRPStartOffset, uint32_t * WRDPEndOffset)
{
 800e16c:	b480      	push	{r7}
 800e16e:	b085      	sub	sp, #20
 800e170:	af00      	add	r7, sp, #0
 800e172:	60f8      	str	r0, [r7, #12]
 800e174:	60b9      	str	r1, [r7, #8]
 800e176:	607a      	str	r2, [r7, #4]
  /* Get the configuration of the write protected area */
  if(WRPArea == OB_WRPAREA_BANK1_AREAA)
 800e178:	68fb      	ldr	r3, [r7, #12]
 800e17a:	2b00      	cmp	r3, #0
 800e17c:	d10b      	bne.n	800e196 <FLASH_OB_GetWRP+0x2a>
  {
    *WRPStartOffset = READ_BIT(FLASH->WRP1AR, FLASH_WRP1AR_WRP1A_STRT);
 800e17e:	4b1f      	ldr	r3, [pc, #124]	@ (800e1fc <FLASH_OB_GetWRP+0x90>)
 800e180:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e182:	b2da      	uxtb	r2, r3
 800e184:	68bb      	ldr	r3, [r7, #8]
 800e186:	601a      	str	r2, [r3, #0]
    *WRDPEndOffset = (READ_BIT(FLASH->WRP1AR, FLASH_WRP1AR_WRP1A_END) >> 16);
 800e188:	4b1c      	ldr	r3, [pc, #112]	@ (800e1fc <FLASH_OB_GetWRP+0x90>)
 800e18a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e18c:	0c1b      	lsrs	r3, r3, #16
 800e18e:	b2da      	uxtb	r2, r3
 800e190:	687b      	ldr	r3, [r7, #4]
 800e192:	601a      	str	r2, [r3, #0]
#endif
  else
  {
    /* Nothing to do */
  }
}
 800e194:	e02b      	b.n	800e1ee <FLASH_OB_GetWRP+0x82>
  else if(WRPArea == OB_WRPAREA_BANK1_AREAB)
 800e196:	68fb      	ldr	r3, [r7, #12]
 800e198:	2b01      	cmp	r3, #1
 800e19a:	d10b      	bne.n	800e1b4 <FLASH_OB_GetWRP+0x48>
    *WRPStartOffset = READ_BIT(FLASH->WRP1BR, FLASH_WRP1BR_WRP1B_STRT);
 800e19c:	4b17      	ldr	r3, [pc, #92]	@ (800e1fc <FLASH_OB_GetWRP+0x90>)
 800e19e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800e1a0:	b2da      	uxtb	r2, r3
 800e1a2:	68bb      	ldr	r3, [r7, #8]
 800e1a4:	601a      	str	r2, [r3, #0]
    *WRDPEndOffset = (READ_BIT(FLASH->WRP1BR, FLASH_WRP1BR_WRP1B_END) >> 16);
 800e1a6:	4b15      	ldr	r3, [pc, #84]	@ (800e1fc <FLASH_OB_GetWRP+0x90>)
 800e1a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800e1aa:	0c1b      	lsrs	r3, r3, #16
 800e1ac:	b2da      	uxtb	r2, r3
 800e1ae:	687b      	ldr	r3, [r7, #4]
 800e1b0:	601a      	str	r2, [r3, #0]
}
 800e1b2:	e01c      	b.n	800e1ee <FLASH_OB_GetWRP+0x82>
  else if(WRPArea == OB_WRPAREA_BANK2_AREAA)
 800e1b4:	68fb      	ldr	r3, [r7, #12]
 800e1b6:	2b02      	cmp	r3, #2
 800e1b8:	d10b      	bne.n	800e1d2 <FLASH_OB_GetWRP+0x66>
    *WRPStartOffset = READ_BIT(FLASH->WRP2AR, FLASH_WRP2AR_WRP2A_STRT);
 800e1ba:	4b10      	ldr	r3, [pc, #64]	@ (800e1fc <FLASH_OB_GetWRP+0x90>)
 800e1bc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800e1be:	b2da      	uxtb	r2, r3
 800e1c0:	68bb      	ldr	r3, [r7, #8]
 800e1c2:	601a      	str	r2, [r3, #0]
    *WRDPEndOffset = (READ_BIT(FLASH->WRP2AR, FLASH_WRP2AR_WRP2A_END) >> 16);
 800e1c4:	4b0d      	ldr	r3, [pc, #52]	@ (800e1fc <FLASH_OB_GetWRP+0x90>)
 800e1c6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800e1c8:	0c1b      	lsrs	r3, r3, #16
 800e1ca:	b2da      	uxtb	r2, r3
 800e1cc:	687b      	ldr	r3, [r7, #4]
 800e1ce:	601a      	str	r2, [r3, #0]
}
 800e1d0:	e00d      	b.n	800e1ee <FLASH_OB_GetWRP+0x82>
  else if(WRPArea == OB_WRPAREA_BANK2_AREAB)
 800e1d2:	68fb      	ldr	r3, [r7, #12]
 800e1d4:	2b04      	cmp	r3, #4
 800e1d6:	d10a      	bne.n	800e1ee <FLASH_OB_GetWRP+0x82>
    *WRPStartOffset = READ_BIT(FLASH->WRP2BR, FLASH_WRP2BR_WRP2B_STRT);
 800e1d8:	4b08      	ldr	r3, [pc, #32]	@ (800e1fc <FLASH_OB_GetWRP+0x90>)
 800e1da:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800e1dc:	b2da      	uxtb	r2, r3
 800e1de:	68bb      	ldr	r3, [r7, #8]
 800e1e0:	601a      	str	r2, [r3, #0]
    *WRDPEndOffset = (READ_BIT(FLASH->WRP2BR, FLASH_WRP2BR_WRP2B_END) >> 16);
 800e1e2:	4b06      	ldr	r3, [pc, #24]	@ (800e1fc <FLASH_OB_GetWRP+0x90>)
 800e1e4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800e1e6:	0c1b      	lsrs	r3, r3, #16
 800e1e8:	b2da      	uxtb	r2, r3
 800e1ea:	687b      	ldr	r3, [r7, #4]
 800e1ec:	601a      	str	r2, [r3, #0]
}
 800e1ee:	bf00      	nop
 800e1f0:	3714      	adds	r7, #20
 800e1f2:	46bd      	mov	sp, r7
 800e1f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e1f8:	4770      	bx	lr
 800e1fa:	bf00      	nop
 800e1fc:	40022000 	.word	0x40022000

0800e200 <FLASH_OB_GetRDP>:
  *            @arg OB_RDP_LEVEL_0: No protection
  *            @arg OB_RDP_LEVEL_1: Read protection of the memory
  *            @arg OB_RDP_LEVEL_2: Full chip protection
  */
static uint32_t FLASH_OB_GetRDP(void)
{
 800e200:	b480      	push	{r7}
 800e202:	b083      	sub	sp, #12
 800e204:	af00      	add	r7, sp, #0
  uint32_t rdp_level = READ_BIT(FLASH->OPTR, FLASH_OPTR_RDP);
 800e206:	4b0a      	ldr	r3, [pc, #40]	@ (800e230 <FLASH_OB_GetRDP+0x30>)
 800e208:	6a1b      	ldr	r3, [r3, #32]
 800e20a:	b2db      	uxtb	r3, r3
 800e20c:	607b      	str	r3, [r7, #4]

  if ((rdp_level != OB_RDP_LEVEL_0) && (rdp_level != OB_RDP_LEVEL_2))
 800e20e:	687b      	ldr	r3, [r7, #4]
 800e210:	2baa      	cmp	r3, #170	@ 0xaa
 800e212:	d004      	beq.n	800e21e <FLASH_OB_GetRDP+0x1e>
 800e214:	687b      	ldr	r3, [r7, #4]
 800e216:	2bcc      	cmp	r3, #204	@ 0xcc
 800e218:	d001      	beq.n	800e21e <FLASH_OB_GetRDP+0x1e>
  {
    return (OB_RDP_LEVEL_1);
 800e21a:	23bb      	movs	r3, #187	@ 0xbb
 800e21c:	e002      	b.n	800e224 <FLASH_OB_GetRDP+0x24>
  }
  else
  {
    return (READ_BIT(FLASH->OPTR, FLASH_OPTR_RDP));
 800e21e:	4b04      	ldr	r3, [pc, #16]	@ (800e230 <FLASH_OB_GetRDP+0x30>)
 800e220:	6a1b      	ldr	r3, [r3, #32]
 800e222:	b2db      	uxtb	r3, r3
  }
}
 800e224:	4618      	mov	r0, r3
 800e226:	370c      	adds	r7, #12
 800e228:	46bd      	mov	sp, r7
 800e22a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e22e:	4770      	bx	lr
 800e230:	40022000 	.word	0x40022000

0800e234 <FLASH_OB_GetUser>:
  *         BOR_LEV(Bit8-10), nRST_STOP(Bit12), nRST_STDBY(Bit13), nRST_SHDW(Bit14),
  *         IWDG_SW(Bit16), IWDG_STOP(Bit17), IWDG_STDBY(Bit18), WWDG_SW(Bit19),
  *         nBOOT1(Bit23), SRAM2_PE(Bit24), SRAM2_RST(Bit25), nSWBOOT0(Bit26) and nBOOT0(Bit27).
  */
static uint32_t FLASH_OB_GetUser(void)
{
 800e234:	b480      	push	{r7}
 800e236:	b083      	sub	sp, #12
 800e238:	af00      	add	r7, sp, #0
  uint32_t user_config = READ_REG(FLASH->OPTR);
 800e23a:	4b07      	ldr	r3, [pc, #28]	@ (800e258 <FLASH_OB_GetUser+0x24>)
 800e23c:	6a1b      	ldr	r3, [r3, #32]
 800e23e:	607b      	str	r3, [r7, #4]
  CLEAR_BIT(user_config, FLASH_OPTR_RDP);
 800e240:	687b      	ldr	r3, [r7, #4]
 800e242:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800e246:	607b      	str	r3, [r7, #4]

  return user_config;
 800e248:	687b      	ldr	r3, [r7, #4]
}
 800e24a:	4618      	mov	r0, r3
 800e24c:	370c      	adds	r7, #12
 800e24e:	46bd      	mov	sp, r7
 800e250:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e254:	4770      	bx	lr
 800e256:	bf00      	nop
 800e258:	40022000 	.word	0x40022000

0800e25c <FLASH_OB_GetPCROP>:
  *                       the Proprietary code readout protection
  *
  * @retval None
  */
static void FLASH_OB_GetPCROP(uint32_t * PCROPConfig, uint32_t * PCROPStartAddr, uint32_t * PCROPEndAddr)
{
 800e25c:	b480      	push	{r7}
 800e25e:	b089      	sub	sp, #36	@ 0x24
 800e260:	af00      	add	r7, sp, #0
 800e262:	60f8      	str	r0, [r7, #12]
 800e264:	60b9      	str	r1, [r7, #8]
 800e266:	607a      	str	r2, [r7, #4]
#if defined (STM32L471xx) || defined (STM32L475xx) || defined (STM32L476xx) || defined (STM32L485xx) || defined (STM32L486xx) || \
    defined (STM32L496xx) || defined (STM32L4A6xx) || \
    defined (STM32L4P5xx) || defined (STM32L4Q5xx) || \
    defined (STM32L4R5xx) || defined (STM32L4R7xx) || defined (STM32L4R9xx) || defined (STM32L4S5xx) || defined (STM32L4S7xx) || defined (STM32L4S9xx)
  /* Get the information about the bank swapping */
  if (READ_BIT(SYSCFG->MEMRMP, SYSCFG_MEMRMP_FB_MODE) == 0U)
 800e268:	4b3b      	ldr	r3, [pc, #236]	@ (800e358 <FLASH_OB_GetPCROP+0xfc>)
 800e26a:	681b      	ldr	r3, [r3, #0]
 800e26c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800e270:	2b00      	cmp	r3, #0
 800e272:	d115      	bne.n	800e2a0 <FLASH_OB_GetPCROP+0x44>
  {
    bank1_addr = FLASH_BASE;
 800e274:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800e278:	61fb      	str	r3, [r7, #28]
    bank2_addr = FLASH_BASE + FLASH_BANK_SIZE;
 800e27a:	4b38      	ldr	r3, [pc, #224]	@ (800e35c <FLASH_OB_GetPCROP+0x100>)
 800e27c:	681b      	ldr	r3, [r3, #0]
 800e27e:	b29b      	uxth	r3, r3
 800e280:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800e284:	4293      	cmp	r3, r2
 800e286:	d008      	beq.n	800e29a <FLASH_OB_GetPCROP+0x3e>
 800e288:	4b34      	ldr	r3, [pc, #208]	@ (800e35c <FLASH_OB_GetPCROP+0x100>)
 800e28a:	681b      	ldr	r3, [r3, #0]
 800e28c:	029b      	lsls	r3, r3, #10
 800e28e:	085a      	lsrs	r2, r3, #1
 800e290:	4b33      	ldr	r3, [pc, #204]	@ (800e360 <FLASH_OB_GetPCROP+0x104>)
 800e292:	4013      	ands	r3, r2
 800e294:	f103 6300 	add.w	r3, r3, #134217728	@ 0x8000000
 800e298:	e000      	b.n	800e29c <FLASH_OB_GetPCROP+0x40>
 800e29a:	4b32      	ldr	r3, [pc, #200]	@ (800e364 <FLASH_OB_GetPCROP+0x108>)
 800e29c:	61bb      	str	r3, [r7, #24]
 800e29e:	e014      	b.n	800e2ca <FLASH_OB_GetPCROP+0x6e>
  }
  else
  {
    bank1_addr = FLASH_BASE + FLASH_BANK_SIZE;
 800e2a0:	4b2e      	ldr	r3, [pc, #184]	@ (800e35c <FLASH_OB_GetPCROP+0x100>)
 800e2a2:	681b      	ldr	r3, [r3, #0]
 800e2a4:	b29b      	uxth	r3, r3
 800e2a6:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800e2aa:	4293      	cmp	r3, r2
 800e2ac:	d008      	beq.n	800e2c0 <FLASH_OB_GetPCROP+0x64>
 800e2ae:	4b2b      	ldr	r3, [pc, #172]	@ (800e35c <FLASH_OB_GetPCROP+0x100>)
 800e2b0:	681b      	ldr	r3, [r3, #0]
 800e2b2:	029b      	lsls	r3, r3, #10
 800e2b4:	085a      	lsrs	r2, r3, #1
 800e2b6:	4b2a      	ldr	r3, [pc, #168]	@ (800e360 <FLASH_OB_GetPCROP+0x104>)
 800e2b8:	4013      	ands	r3, r2
 800e2ba:	f103 6300 	add.w	r3, r3, #134217728	@ 0x8000000
 800e2be:	e000      	b.n	800e2c2 <FLASH_OB_GetPCROP+0x66>
 800e2c0:	4b28      	ldr	r3, [pc, #160]	@ (800e364 <FLASH_OB_GetPCROP+0x108>)
 800e2c2:	61fb      	str	r3, [r7, #28]
    bank2_addr = FLASH_BASE;
 800e2c4:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800e2c8:	61bb      	str	r3, [r7, #24]
    }
  }
  else
#endif
  {
    if(((*PCROPConfig) & FLASH_BANK_BOTH) == FLASH_BANK_1)
 800e2ca:	68fb      	ldr	r3, [r7, #12]
 800e2cc:	681b      	ldr	r3, [r3, #0]
 800e2ce:	f003 0303 	and.w	r3, r3, #3
 800e2d2:	2b01      	cmp	r3, #1
 800e2d4:	d115      	bne.n	800e302 <FLASH_OB_GetPCROP+0xa6>
    {
      reg_value       = (READ_REG(FLASH->PCROP1SR) & FLASH_PCROP1SR_PCROP1_STRT);
 800e2d6:	4b24      	ldr	r3, [pc, #144]	@ (800e368 <FLASH_OB_GetPCROP+0x10c>)
 800e2d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e2da:	b29b      	uxth	r3, r3
 800e2dc:	617b      	str	r3, [r7, #20]
      *PCROPStartAddr = (reg_value << 3) + bank1_addr;
 800e2de:	697b      	ldr	r3, [r7, #20]
 800e2e0:	00da      	lsls	r2, r3, #3
 800e2e2:	69fb      	ldr	r3, [r7, #28]
 800e2e4:	441a      	add	r2, r3
 800e2e6:	68bb      	ldr	r3, [r7, #8]
 800e2e8:	601a      	str	r2, [r3, #0]

      reg_value     = (READ_REG(FLASH->PCROP1ER) & FLASH_PCROP1ER_PCROP1_END);
 800e2ea:	4b1f      	ldr	r3, [pc, #124]	@ (800e368 <FLASH_OB_GetPCROP+0x10c>)
 800e2ec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e2ee:	b29b      	uxth	r3, r3
 800e2f0:	617b      	str	r3, [r7, #20]
      *PCROPEndAddr = (reg_value << 3) + bank1_addr + 0x7U;
 800e2f2:	697b      	ldr	r3, [r7, #20]
 800e2f4:	00da      	lsls	r2, r3, #3
 800e2f6:	69fb      	ldr	r3, [r7, #28]
 800e2f8:	4413      	add	r3, r2
 800e2fa:	1dda      	adds	r2, r3, #7
 800e2fc:	687b      	ldr	r3, [r7, #4]
 800e2fe:	601a      	str	r2, [r3, #0]
 800e300:	e01a      	b.n	800e338 <FLASH_OB_GetPCROP+0xdc>
    }
#if defined (STM32L471xx) || defined (STM32L475xx) || defined (STM32L476xx) || defined (STM32L485xx) || defined (STM32L486xx) || \
    defined (STM32L496xx) || defined (STM32L4A6xx) || \
    defined (STM32L4P5xx) || defined (STM32L4Q5xx) || \
    defined (STM32L4R5xx) || defined (STM32L4R7xx) || defined (STM32L4R9xx) || defined (STM32L4S5xx) || defined (STM32L4S7xx) || defined (STM32L4S9xx)
    else if(((*PCROPConfig) & FLASH_BANK_BOTH) == FLASH_BANK_2)
 800e302:	68fb      	ldr	r3, [r7, #12]
 800e304:	681b      	ldr	r3, [r3, #0]
 800e306:	f003 0303 	and.w	r3, r3, #3
 800e30a:	2b02      	cmp	r3, #2
 800e30c:	d114      	bne.n	800e338 <FLASH_OB_GetPCROP+0xdc>
    {
      reg_value       = (READ_REG(FLASH->PCROP2SR) & FLASH_PCROP2SR_PCROP2_STRT);
 800e30e:	4b16      	ldr	r3, [pc, #88]	@ (800e368 <FLASH_OB_GetPCROP+0x10c>)
 800e310:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800e312:	b29b      	uxth	r3, r3
 800e314:	617b      	str	r3, [r7, #20]
      *PCROPStartAddr = (reg_value << 3) + bank2_addr;
 800e316:	697b      	ldr	r3, [r7, #20]
 800e318:	00da      	lsls	r2, r3, #3
 800e31a:	69bb      	ldr	r3, [r7, #24]
 800e31c:	441a      	add	r2, r3
 800e31e:	68bb      	ldr	r3, [r7, #8]
 800e320:	601a      	str	r2, [r3, #0]

      reg_value     = (READ_REG(FLASH->PCROP2ER) & FLASH_PCROP2ER_PCROP2_END);
 800e322:	4b11      	ldr	r3, [pc, #68]	@ (800e368 <FLASH_OB_GetPCROP+0x10c>)
 800e324:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800e326:	b29b      	uxth	r3, r3
 800e328:	617b      	str	r3, [r7, #20]
      *PCROPEndAddr = (reg_value << 3) + bank2_addr + 0x7U;
 800e32a:	697b      	ldr	r3, [r7, #20]
 800e32c:	00da      	lsls	r2, r3, #3
 800e32e:	69bb      	ldr	r3, [r7, #24]
 800e330:	4413      	add	r3, r2
 800e332:	1dda      	adds	r2, r3, #7
 800e334:	687b      	ldr	r3, [r7, #4]
 800e336:	601a      	str	r2, [r3, #0]
    {
      /* Nothing to do */
    }
  }

  *PCROPConfig |= (READ_REG(FLASH->PCROP1ER) & FLASH_PCROP1ER_PCROP_RDP);
 800e338:	4b0b      	ldr	r3, [pc, #44]	@ (800e368 <FLASH_OB_GetPCROP+0x10c>)
 800e33a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e33c:	f003 4200 	and.w	r2, r3, #2147483648	@ 0x80000000
 800e340:	68fb      	ldr	r3, [r7, #12]
 800e342:	681b      	ldr	r3, [r3, #0]
 800e344:	431a      	orrs	r2, r3
 800e346:	68fb      	ldr	r3, [r7, #12]
 800e348:	601a      	str	r2, [r3, #0]
}
 800e34a:	bf00      	nop
 800e34c:	3724      	adds	r7, #36	@ 0x24
 800e34e:	46bd      	mov	sp, r7
 800e350:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e354:	4770      	bx	lr
 800e356:	bf00      	nop
 800e358:	40010000 	.word	0x40010000
 800e35c:	1fff75e0 	.word	0x1fff75e0
 800e360:	01fffe00 	.word	0x01fffe00
 800e364:	08080000 	.word	0x08080000
 800e368:	40022000 	.word	0x40022000

0800e36c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800e36c:	b480      	push	{r7}
 800e36e:	b087      	sub	sp, #28
 800e370:	af00      	add	r7, sp, #0
 800e372:	6078      	str	r0, [r7, #4]
 800e374:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800e376:	2300      	movs	r3, #0
 800e378:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800e37a:	e17f      	b.n	800e67c <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800e37c:	683b      	ldr	r3, [r7, #0]
 800e37e:	681a      	ldr	r2, [r3, #0]
 800e380:	2101      	movs	r1, #1
 800e382:	697b      	ldr	r3, [r7, #20]
 800e384:	fa01 f303 	lsl.w	r3, r1, r3
 800e388:	4013      	ands	r3, r2
 800e38a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800e38c:	68fb      	ldr	r3, [r7, #12]
 800e38e:	2b00      	cmp	r3, #0
 800e390:	f000 8171 	beq.w	800e676 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800e394:	683b      	ldr	r3, [r7, #0]
 800e396:	685b      	ldr	r3, [r3, #4]
 800e398:	f003 0303 	and.w	r3, r3, #3
 800e39c:	2b01      	cmp	r3, #1
 800e39e:	d005      	beq.n	800e3ac <HAL_GPIO_Init+0x40>
 800e3a0:	683b      	ldr	r3, [r7, #0]
 800e3a2:	685b      	ldr	r3, [r3, #4]
 800e3a4:	f003 0303 	and.w	r3, r3, #3
 800e3a8:	2b02      	cmp	r3, #2
 800e3aa:	d130      	bne.n	800e40e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800e3ac:	687b      	ldr	r3, [r7, #4]
 800e3ae:	689b      	ldr	r3, [r3, #8]
 800e3b0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800e3b2:	697b      	ldr	r3, [r7, #20]
 800e3b4:	005b      	lsls	r3, r3, #1
 800e3b6:	2203      	movs	r2, #3
 800e3b8:	fa02 f303 	lsl.w	r3, r2, r3
 800e3bc:	43db      	mvns	r3, r3
 800e3be:	693a      	ldr	r2, [r7, #16]
 800e3c0:	4013      	ands	r3, r2
 800e3c2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800e3c4:	683b      	ldr	r3, [r7, #0]
 800e3c6:	68da      	ldr	r2, [r3, #12]
 800e3c8:	697b      	ldr	r3, [r7, #20]
 800e3ca:	005b      	lsls	r3, r3, #1
 800e3cc:	fa02 f303 	lsl.w	r3, r2, r3
 800e3d0:	693a      	ldr	r2, [r7, #16]
 800e3d2:	4313      	orrs	r3, r2
 800e3d4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800e3d6:	687b      	ldr	r3, [r7, #4]
 800e3d8:	693a      	ldr	r2, [r7, #16]
 800e3da:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800e3dc:	687b      	ldr	r3, [r7, #4]
 800e3de:	685b      	ldr	r3, [r3, #4]
 800e3e0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800e3e2:	2201      	movs	r2, #1
 800e3e4:	697b      	ldr	r3, [r7, #20]
 800e3e6:	fa02 f303 	lsl.w	r3, r2, r3
 800e3ea:	43db      	mvns	r3, r3
 800e3ec:	693a      	ldr	r2, [r7, #16]
 800e3ee:	4013      	ands	r3, r2
 800e3f0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800e3f2:	683b      	ldr	r3, [r7, #0]
 800e3f4:	685b      	ldr	r3, [r3, #4]
 800e3f6:	091b      	lsrs	r3, r3, #4
 800e3f8:	f003 0201 	and.w	r2, r3, #1
 800e3fc:	697b      	ldr	r3, [r7, #20]
 800e3fe:	fa02 f303 	lsl.w	r3, r2, r3
 800e402:	693a      	ldr	r2, [r7, #16]
 800e404:	4313      	orrs	r3, r2
 800e406:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800e408:	687b      	ldr	r3, [r7, #4]
 800e40a:	693a      	ldr	r2, [r7, #16]
 800e40c:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 800e40e:	683b      	ldr	r3, [r7, #0]
 800e410:	685b      	ldr	r3, [r3, #4]
 800e412:	f003 0303 	and.w	r3, r3, #3
 800e416:	2b03      	cmp	r3, #3
 800e418:	d118      	bne.n	800e44c <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 800e41a:	687b      	ldr	r3, [r7, #4]
 800e41c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e41e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 800e420:	2201      	movs	r2, #1
 800e422:	697b      	ldr	r3, [r7, #20]
 800e424:	fa02 f303 	lsl.w	r3, r2, r3
 800e428:	43db      	mvns	r3, r3
 800e42a:	693a      	ldr	r2, [r7, #16]
 800e42c:	4013      	ands	r3, r2
 800e42e:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 800e430:	683b      	ldr	r3, [r7, #0]
 800e432:	685b      	ldr	r3, [r3, #4]
 800e434:	08db      	lsrs	r3, r3, #3
 800e436:	f003 0201 	and.w	r2, r3, #1
 800e43a:	697b      	ldr	r3, [r7, #20]
 800e43c:	fa02 f303 	lsl.w	r3, r2, r3
 800e440:	693a      	ldr	r2, [r7, #16]
 800e442:	4313      	orrs	r3, r2
 800e444:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 800e446:	687b      	ldr	r3, [r7, #4]
 800e448:	693a      	ldr	r2, [r7, #16]
 800e44a:	62da      	str	r2, [r3, #44]	@ 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800e44c:	683b      	ldr	r3, [r7, #0]
 800e44e:	685b      	ldr	r3, [r3, #4]
 800e450:	f003 0303 	and.w	r3, r3, #3
 800e454:	2b03      	cmp	r3, #3
 800e456:	d017      	beq.n	800e488 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 800e458:	687b      	ldr	r3, [r7, #4]
 800e45a:	68db      	ldr	r3, [r3, #12]
 800e45c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800e45e:	697b      	ldr	r3, [r7, #20]
 800e460:	005b      	lsls	r3, r3, #1
 800e462:	2203      	movs	r2, #3
 800e464:	fa02 f303 	lsl.w	r3, r2, r3
 800e468:	43db      	mvns	r3, r3
 800e46a:	693a      	ldr	r2, [r7, #16]
 800e46c:	4013      	ands	r3, r2
 800e46e:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800e470:	683b      	ldr	r3, [r7, #0]
 800e472:	689a      	ldr	r2, [r3, #8]
 800e474:	697b      	ldr	r3, [r7, #20]
 800e476:	005b      	lsls	r3, r3, #1
 800e478:	fa02 f303 	lsl.w	r3, r2, r3
 800e47c:	693a      	ldr	r2, [r7, #16]
 800e47e:	4313      	orrs	r3, r2
 800e480:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800e482:	687b      	ldr	r3, [r7, #4]
 800e484:	693a      	ldr	r2, [r7, #16]
 800e486:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800e488:	683b      	ldr	r3, [r7, #0]
 800e48a:	685b      	ldr	r3, [r3, #4]
 800e48c:	f003 0303 	and.w	r3, r3, #3
 800e490:	2b02      	cmp	r3, #2
 800e492:	d123      	bne.n	800e4dc <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800e494:	697b      	ldr	r3, [r7, #20]
 800e496:	08da      	lsrs	r2, r3, #3
 800e498:	687b      	ldr	r3, [r7, #4]
 800e49a:	3208      	adds	r2, #8
 800e49c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e4a0:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800e4a2:	697b      	ldr	r3, [r7, #20]
 800e4a4:	f003 0307 	and.w	r3, r3, #7
 800e4a8:	009b      	lsls	r3, r3, #2
 800e4aa:	220f      	movs	r2, #15
 800e4ac:	fa02 f303 	lsl.w	r3, r2, r3
 800e4b0:	43db      	mvns	r3, r3
 800e4b2:	693a      	ldr	r2, [r7, #16]
 800e4b4:	4013      	ands	r3, r2
 800e4b6:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800e4b8:	683b      	ldr	r3, [r7, #0]
 800e4ba:	691a      	ldr	r2, [r3, #16]
 800e4bc:	697b      	ldr	r3, [r7, #20]
 800e4be:	f003 0307 	and.w	r3, r3, #7
 800e4c2:	009b      	lsls	r3, r3, #2
 800e4c4:	fa02 f303 	lsl.w	r3, r2, r3
 800e4c8:	693a      	ldr	r2, [r7, #16]
 800e4ca:	4313      	orrs	r3, r2
 800e4cc:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800e4ce:	697b      	ldr	r3, [r7, #20]
 800e4d0:	08da      	lsrs	r2, r3, #3
 800e4d2:	687b      	ldr	r3, [r7, #4]
 800e4d4:	3208      	adds	r2, #8
 800e4d6:	6939      	ldr	r1, [r7, #16]
 800e4d8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800e4dc:	687b      	ldr	r3, [r7, #4]
 800e4de:	681b      	ldr	r3, [r3, #0]
 800e4e0:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800e4e2:	697b      	ldr	r3, [r7, #20]
 800e4e4:	005b      	lsls	r3, r3, #1
 800e4e6:	2203      	movs	r2, #3
 800e4e8:	fa02 f303 	lsl.w	r3, r2, r3
 800e4ec:	43db      	mvns	r3, r3
 800e4ee:	693a      	ldr	r2, [r7, #16]
 800e4f0:	4013      	ands	r3, r2
 800e4f2:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800e4f4:	683b      	ldr	r3, [r7, #0]
 800e4f6:	685b      	ldr	r3, [r3, #4]
 800e4f8:	f003 0203 	and.w	r2, r3, #3
 800e4fc:	697b      	ldr	r3, [r7, #20]
 800e4fe:	005b      	lsls	r3, r3, #1
 800e500:	fa02 f303 	lsl.w	r3, r2, r3
 800e504:	693a      	ldr	r2, [r7, #16]
 800e506:	4313      	orrs	r3, r2
 800e508:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800e50a:	687b      	ldr	r3, [r7, #4]
 800e50c:	693a      	ldr	r2, [r7, #16]
 800e50e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800e510:	683b      	ldr	r3, [r7, #0]
 800e512:	685b      	ldr	r3, [r3, #4]
 800e514:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800e518:	2b00      	cmp	r3, #0
 800e51a:	f000 80ac 	beq.w	800e676 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800e51e:	4b5f      	ldr	r3, [pc, #380]	@ (800e69c <HAL_GPIO_Init+0x330>)
 800e520:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800e522:	4a5e      	ldr	r2, [pc, #376]	@ (800e69c <HAL_GPIO_Init+0x330>)
 800e524:	f043 0301 	orr.w	r3, r3, #1
 800e528:	6613      	str	r3, [r2, #96]	@ 0x60
 800e52a:	4b5c      	ldr	r3, [pc, #368]	@ (800e69c <HAL_GPIO_Init+0x330>)
 800e52c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800e52e:	f003 0301 	and.w	r3, r3, #1
 800e532:	60bb      	str	r3, [r7, #8]
 800e534:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800e536:	4a5a      	ldr	r2, [pc, #360]	@ (800e6a0 <HAL_GPIO_Init+0x334>)
 800e538:	697b      	ldr	r3, [r7, #20]
 800e53a:	089b      	lsrs	r3, r3, #2
 800e53c:	3302      	adds	r3, #2
 800e53e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e542:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800e544:	697b      	ldr	r3, [r7, #20]
 800e546:	f003 0303 	and.w	r3, r3, #3
 800e54a:	009b      	lsls	r3, r3, #2
 800e54c:	220f      	movs	r2, #15
 800e54e:	fa02 f303 	lsl.w	r3, r2, r3
 800e552:	43db      	mvns	r3, r3
 800e554:	693a      	ldr	r2, [r7, #16]
 800e556:	4013      	ands	r3, r2
 800e558:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800e55a:	687b      	ldr	r3, [r7, #4]
 800e55c:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 800e560:	d025      	beq.n	800e5ae <HAL_GPIO_Init+0x242>
 800e562:	687b      	ldr	r3, [r7, #4]
 800e564:	4a4f      	ldr	r2, [pc, #316]	@ (800e6a4 <HAL_GPIO_Init+0x338>)
 800e566:	4293      	cmp	r3, r2
 800e568:	d01f      	beq.n	800e5aa <HAL_GPIO_Init+0x23e>
 800e56a:	687b      	ldr	r3, [r7, #4]
 800e56c:	4a4e      	ldr	r2, [pc, #312]	@ (800e6a8 <HAL_GPIO_Init+0x33c>)
 800e56e:	4293      	cmp	r3, r2
 800e570:	d019      	beq.n	800e5a6 <HAL_GPIO_Init+0x23a>
 800e572:	687b      	ldr	r3, [r7, #4]
 800e574:	4a4d      	ldr	r2, [pc, #308]	@ (800e6ac <HAL_GPIO_Init+0x340>)
 800e576:	4293      	cmp	r3, r2
 800e578:	d013      	beq.n	800e5a2 <HAL_GPIO_Init+0x236>
 800e57a:	687b      	ldr	r3, [r7, #4]
 800e57c:	4a4c      	ldr	r2, [pc, #304]	@ (800e6b0 <HAL_GPIO_Init+0x344>)
 800e57e:	4293      	cmp	r3, r2
 800e580:	d00d      	beq.n	800e59e <HAL_GPIO_Init+0x232>
 800e582:	687b      	ldr	r3, [r7, #4]
 800e584:	4a4b      	ldr	r2, [pc, #300]	@ (800e6b4 <HAL_GPIO_Init+0x348>)
 800e586:	4293      	cmp	r3, r2
 800e588:	d007      	beq.n	800e59a <HAL_GPIO_Init+0x22e>
 800e58a:	687b      	ldr	r3, [r7, #4]
 800e58c:	4a4a      	ldr	r2, [pc, #296]	@ (800e6b8 <HAL_GPIO_Init+0x34c>)
 800e58e:	4293      	cmp	r3, r2
 800e590:	d101      	bne.n	800e596 <HAL_GPIO_Init+0x22a>
 800e592:	2306      	movs	r3, #6
 800e594:	e00c      	b.n	800e5b0 <HAL_GPIO_Init+0x244>
 800e596:	2307      	movs	r3, #7
 800e598:	e00a      	b.n	800e5b0 <HAL_GPIO_Init+0x244>
 800e59a:	2305      	movs	r3, #5
 800e59c:	e008      	b.n	800e5b0 <HAL_GPIO_Init+0x244>
 800e59e:	2304      	movs	r3, #4
 800e5a0:	e006      	b.n	800e5b0 <HAL_GPIO_Init+0x244>
 800e5a2:	2303      	movs	r3, #3
 800e5a4:	e004      	b.n	800e5b0 <HAL_GPIO_Init+0x244>
 800e5a6:	2302      	movs	r3, #2
 800e5a8:	e002      	b.n	800e5b0 <HAL_GPIO_Init+0x244>
 800e5aa:	2301      	movs	r3, #1
 800e5ac:	e000      	b.n	800e5b0 <HAL_GPIO_Init+0x244>
 800e5ae:	2300      	movs	r3, #0
 800e5b0:	697a      	ldr	r2, [r7, #20]
 800e5b2:	f002 0203 	and.w	r2, r2, #3
 800e5b6:	0092      	lsls	r2, r2, #2
 800e5b8:	4093      	lsls	r3, r2
 800e5ba:	693a      	ldr	r2, [r7, #16]
 800e5bc:	4313      	orrs	r3, r2
 800e5be:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800e5c0:	4937      	ldr	r1, [pc, #220]	@ (800e6a0 <HAL_GPIO_Init+0x334>)
 800e5c2:	697b      	ldr	r3, [r7, #20]
 800e5c4:	089b      	lsrs	r3, r3, #2
 800e5c6:	3302      	adds	r3, #2
 800e5c8:	693a      	ldr	r2, [r7, #16]
 800e5ca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800e5ce:	4b3b      	ldr	r3, [pc, #236]	@ (800e6bc <HAL_GPIO_Init+0x350>)
 800e5d0:	689b      	ldr	r3, [r3, #8]
 800e5d2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800e5d4:	68fb      	ldr	r3, [r7, #12]
 800e5d6:	43db      	mvns	r3, r3
 800e5d8:	693a      	ldr	r2, [r7, #16]
 800e5da:	4013      	ands	r3, r2
 800e5dc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800e5de:	683b      	ldr	r3, [r7, #0]
 800e5e0:	685b      	ldr	r3, [r3, #4]
 800e5e2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800e5e6:	2b00      	cmp	r3, #0
 800e5e8:	d003      	beq.n	800e5f2 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 800e5ea:	693a      	ldr	r2, [r7, #16]
 800e5ec:	68fb      	ldr	r3, [r7, #12]
 800e5ee:	4313      	orrs	r3, r2
 800e5f0:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800e5f2:	4a32      	ldr	r2, [pc, #200]	@ (800e6bc <HAL_GPIO_Init+0x350>)
 800e5f4:	693b      	ldr	r3, [r7, #16]
 800e5f6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800e5f8:	4b30      	ldr	r3, [pc, #192]	@ (800e6bc <HAL_GPIO_Init+0x350>)
 800e5fa:	68db      	ldr	r3, [r3, #12]
 800e5fc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800e5fe:	68fb      	ldr	r3, [r7, #12]
 800e600:	43db      	mvns	r3, r3
 800e602:	693a      	ldr	r2, [r7, #16]
 800e604:	4013      	ands	r3, r2
 800e606:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800e608:	683b      	ldr	r3, [r7, #0]
 800e60a:	685b      	ldr	r3, [r3, #4]
 800e60c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800e610:	2b00      	cmp	r3, #0
 800e612:	d003      	beq.n	800e61c <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 800e614:	693a      	ldr	r2, [r7, #16]
 800e616:	68fb      	ldr	r3, [r7, #12]
 800e618:	4313      	orrs	r3, r2
 800e61a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800e61c:	4a27      	ldr	r2, [pc, #156]	@ (800e6bc <HAL_GPIO_Init+0x350>)
 800e61e:	693b      	ldr	r3, [r7, #16]
 800e620:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 800e622:	4b26      	ldr	r3, [pc, #152]	@ (800e6bc <HAL_GPIO_Init+0x350>)
 800e624:	685b      	ldr	r3, [r3, #4]
 800e626:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800e628:	68fb      	ldr	r3, [r7, #12]
 800e62a:	43db      	mvns	r3, r3
 800e62c:	693a      	ldr	r2, [r7, #16]
 800e62e:	4013      	ands	r3, r2
 800e630:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800e632:	683b      	ldr	r3, [r7, #0]
 800e634:	685b      	ldr	r3, [r3, #4]
 800e636:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800e63a:	2b00      	cmp	r3, #0
 800e63c:	d003      	beq.n	800e646 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 800e63e:	693a      	ldr	r2, [r7, #16]
 800e640:	68fb      	ldr	r3, [r7, #12]
 800e642:	4313      	orrs	r3, r2
 800e644:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800e646:	4a1d      	ldr	r2, [pc, #116]	@ (800e6bc <HAL_GPIO_Init+0x350>)
 800e648:	693b      	ldr	r3, [r7, #16]
 800e64a:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 800e64c:	4b1b      	ldr	r3, [pc, #108]	@ (800e6bc <HAL_GPIO_Init+0x350>)
 800e64e:	681b      	ldr	r3, [r3, #0]
 800e650:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800e652:	68fb      	ldr	r3, [r7, #12]
 800e654:	43db      	mvns	r3, r3
 800e656:	693a      	ldr	r2, [r7, #16]
 800e658:	4013      	ands	r3, r2
 800e65a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800e65c:	683b      	ldr	r3, [r7, #0]
 800e65e:	685b      	ldr	r3, [r3, #4]
 800e660:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800e664:	2b00      	cmp	r3, #0
 800e666:	d003      	beq.n	800e670 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 800e668:	693a      	ldr	r2, [r7, #16]
 800e66a:	68fb      	ldr	r3, [r7, #12]
 800e66c:	4313      	orrs	r3, r2
 800e66e:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800e670:	4a12      	ldr	r2, [pc, #72]	@ (800e6bc <HAL_GPIO_Init+0x350>)
 800e672:	693b      	ldr	r3, [r7, #16]
 800e674:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800e676:	697b      	ldr	r3, [r7, #20]
 800e678:	3301      	adds	r3, #1
 800e67a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800e67c:	683b      	ldr	r3, [r7, #0]
 800e67e:	681a      	ldr	r2, [r3, #0]
 800e680:	697b      	ldr	r3, [r7, #20]
 800e682:	fa22 f303 	lsr.w	r3, r2, r3
 800e686:	2b00      	cmp	r3, #0
 800e688:	f47f ae78 	bne.w	800e37c <HAL_GPIO_Init+0x10>
  }
}
 800e68c:	bf00      	nop
 800e68e:	bf00      	nop
 800e690:	371c      	adds	r7, #28
 800e692:	46bd      	mov	sp, r7
 800e694:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e698:	4770      	bx	lr
 800e69a:	bf00      	nop
 800e69c:	40021000 	.word	0x40021000
 800e6a0:	40010000 	.word	0x40010000
 800e6a4:	48000400 	.word	0x48000400
 800e6a8:	48000800 	.word	0x48000800
 800e6ac:	48000c00 	.word	0x48000c00
 800e6b0:	48001000 	.word	0x48001000
 800e6b4:	48001400 	.word	0x48001400
 800e6b8:	48001800 	.word	0x48001800
 800e6bc:	40010400 	.word	0x40010400

0800e6c0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800e6c0:	b480      	push	{r7}
 800e6c2:	b085      	sub	sp, #20
 800e6c4:	af00      	add	r7, sp, #0
 800e6c6:	6078      	str	r0, [r7, #4]
 800e6c8:	460b      	mov	r3, r1
 800e6ca:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 800e6cc:	687b      	ldr	r3, [r7, #4]
 800e6ce:	691a      	ldr	r2, [r3, #16]
 800e6d0:	887b      	ldrh	r3, [r7, #2]
 800e6d2:	4013      	ands	r3, r2
 800e6d4:	2b00      	cmp	r3, #0
 800e6d6:	d002      	beq.n	800e6de <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800e6d8:	2301      	movs	r3, #1
 800e6da:	73fb      	strb	r3, [r7, #15]
 800e6dc:	e001      	b.n	800e6e2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800e6de:	2300      	movs	r3, #0
 800e6e0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800e6e2:	7bfb      	ldrb	r3, [r7, #15]
}
 800e6e4:	4618      	mov	r0, r3
 800e6e6:	3714      	adds	r7, #20
 800e6e8:	46bd      	mov	sp, r7
 800e6ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e6ee:	4770      	bx	lr

0800e6f0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800e6f0:	b480      	push	{r7}
 800e6f2:	b083      	sub	sp, #12
 800e6f4:	af00      	add	r7, sp, #0
 800e6f6:	6078      	str	r0, [r7, #4]
 800e6f8:	460b      	mov	r3, r1
 800e6fa:	807b      	strh	r3, [r7, #2]
 800e6fc:	4613      	mov	r3, r2
 800e6fe:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800e700:	787b      	ldrb	r3, [r7, #1]
 800e702:	2b00      	cmp	r3, #0
 800e704:	d003      	beq.n	800e70e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800e706:	887a      	ldrh	r2, [r7, #2]
 800e708:	687b      	ldr	r3, [r7, #4]
 800e70a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800e70c:	e002      	b.n	800e714 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800e70e:	887a      	ldrh	r2, [r7, #2]
 800e710:	687b      	ldr	r3, [r7, #4]
 800e712:	629a      	str	r2, [r3, #40]	@ 0x28
}
 800e714:	bf00      	nop
 800e716:	370c      	adds	r7, #12
 800e718:	46bd      	mov	sp, r7
 800e71a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e71e:	4770      	bx	lr

0800e720 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800e720:	b580      	push	{r7, lr}
 800e722:	b082      	sub	sp, #8
 800e724:	af00      	add	r7, sp, #0
 800e726:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800e728:	687b      	ldr	r3, [r7, #4]
 800e72a:	2b00      	cmp	r3, #0
 800e72c:	d101      	bne.n	800e732 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800e72e:	2301      	movs	r3, #1
 800e730:	e08d      	b.n	800e84e <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800e732:	687b      	ldr	r3, [r7, #4]
 800e734:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800e738:	b2db      	uxtb	r3, r3
 800e73a:	2b00      	cmp	r3, #0
 800e73c:	d106      	bne.n	800e74c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800e73e:	687b      	ldr	r3, [r7, #4]
 800e740:	2200      	movs	r2, #0
 800e742:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800e746:	6878      	ldr	r0, [r7, #4]
 800e748:	f7f9 f8b8 	bl	80078bc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800e74c:	687b      	ldr	r3, [r7, #4]
 800e74e:	2224      	movs	r2, #36	@ 0x24
 800e750:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800e754:	687b      	ldr	r3, [r7, #4]
 800e756:	681b      	ldr	r3, [r3, #0]
 800e758:	681a      	ldr	r2, [r3, #0]
 800e75a:	687b      	ldr	r3, [r7, #4]
 800e75c:	681b      	ldr	r3, [r3, #0]
 800e75e:	f022 0201 	bic.w	r2, r2, #1
 800e762:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800e764:	687b      	ldr	r3, [r7, #4]
 800e766:	685a      	ldr	r2, [r3, #4]
 800e768:	687b      	ldr	r3, [r7, #4]
 800e76a:	681b      	ldr	r3, [r3, #0]
 800e76c:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 800e770:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800e772:	687b      	ldr	r3, [r7, #4]
 800e774:	681b      	ldr	r3, [r3, #0]
 800e776:	689a      	ldr	r2, [r3, #8]
 800e778:	687b      	ldr	r3, [r7, #4]
 800e77a:	681b      	ldr	r3, [r3, #0]
 800e77c:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800e780:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800e782:	687b      	ldr	r3, [r7, #4]
 800e784:	68db      	ldr	r3, [r3, #12]
 800e786:	2b01      	cmp	r3, #1
 800e788:	d107      	bne.n	800e79a <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800e78a:	687b      	ldr	r3, [r7, #4]
 800e78c:	689a      	ldr	r2, [r3, #8]
 800e78e:	687b      	ldr	r3, [r7, #4]
 800e790:	681b      	ldr	r3, [r3, #0]
 800e792:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800e796:	609a      	str	r2, [r3, #8]
 800e798:	e006      	b.n	800e7a8 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800e79a:	687b      	ldr	r3, [r7, #4]
 800e79c:	689a      	ldr	r2, [r3, #8]
 800e79e:	687b      	ldr	r3, [r7, #4]
 800e7a0:	681b      	ldr	r3, [r3, #0]
 800e7a2:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 800e7a6:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800e7a8:	687b      	ldr	r3, [r7, #4]
 800e7aa:	68db      	ldr	r3, [r3, #12]
 800e7ac:	2b02      	cmp	r3, #2
 800e7ae:	d108      	bne.n	800e7c2 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800e7b0:	687b      	ldr	r3, [r7, #4]
 800e7b2:	681b      	ldr	r3, [r3, #0]
 800e7b4:	685a      	ldr	r2, [r3, #4]
 800e7b6:	687b      	ldr	r3, [r7, #4]
 800e7b8:	681b      	ldr	r3, [r3, #0]
 800e7ba:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800e7be:	605a      	str	r2, [r3, #4]
 800e7c0:	e007      	b.n	800e7d2 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800e7c2:	687b      	ldr	r3, [r7, #4]
 800e7c4:	681b      	ldr	r3, [r3, #0]
 800e7c6:	685a      	ldr	r2, [r3, #4]
 800e7c8:	687b      	ldr	r3, [r7, #4]
 800e7ca:	681b      	ldr	r3, [r3, #0]
 800e7cc:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800e7d0:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800e7d2:	687b      	ldr	r3, [r7, #4]
 800e7d4:	681b      	ldr	r3, [r3, #0]
 800e7d6:	685b      	ldr	r3, [r3, #4]
 800e7d8:	687a      	ldr	r2, [r7, #4]
 800e7da:	6812      	ldr	r2, [r2, #0]
 800e7dc:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800e7e0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800e7e4:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800e7e6:	687b      	ldr	r3, [r7, #4]
 800e7e8:	681b      	ldr	r3, [r3, #0]
 800e7ea:	68da      	ldr	r2, [r3, #12]
 800e7ec:	687b      	ldr	r3, [r7, #4]
 800e7ee:	681b      	ldr	r3, [r3, #0]
 800e7f0:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800e7f4:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800e7f6:	687b      	ldr	r3, [r7, #4]
 800e7f8:	691a      	ldr	r2, [r3, #16]
 800e7fa:	687b      	ldr	r3, [r7, #4]
 800e7fc:	695b      	ldr	r3, [r3, #20]
 800e7fe:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800e802:	687b      	ldr	r3, [r7, #4]
 800e804:	699b      	ldr	r3, [r3, #24]
 800e806:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800e808:	687b      	ldr	r3, [r7, #4]
 800e80a:	681b      	ldr	r3, [r3, #0]
 800e80c:	430a      	orrs	r2, r1
 800e80e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800e810:	687b      	ldr	r3, [r7, #4]
 800e812:	69d9      	ldr	r1, [r3, #28]
 800e814:	687b      	ldr	r3, [r7, #4]
 800e816:	6a1a      	ldr	r2, [r3, #32]
 800e818:	687b      	ldr	r3, [r7, #4]
 800e81a:	681b      	ldr	r3, [r3, #0]
 800e81c:	430a      	orrs	r2, r1
 800e81e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800e820:	687b      	ldr	r3, [r7, #4]
 800e822:	681b      	ldr	r3, [r3, #0]
 800e824:	681a      	ldr	r2, [r3, #0]
 800e826:	687b      	ldr	r3, [r7, #4]
 800e828:	681b      	ldr	r3, [r3, #0]
 800e82a:	f042 0201 	orr.w	r2, r2, #1
 800e82e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800e830:	687b      	ldr	r3, [r7, #4]
 800e832:	2200      	movs	r2, #0
 800e834:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800e836:	687b      	ldr	r3, [r7, #4]
 800e838:	2220      	movs	r2, #32
 800e83a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800e83e:	687b      	ldr	r3, [r7, #4]
 800e840:	2200      	movs	r2, #0
 800e842:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800e844:	687b      	ldr	r3, [r7, #4]
 800e846:	2200      	movs	r2, #0
 800e848:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 800e84c:	2300      	movs	r3, #0
}
 800e84e:	4618      	mov	r0, r3
 800e850:	3708      	adds	r7, #8
 800e852:	46bd      	mov	sp, r7
 800e854:	bd80      	pop	{r7, pc}
	...

0800e858 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 800e858:	b580      	push	{r7, lr}
 800e85a:	b088      	sub	sp, #32
 800e85c:	af02      	add	r7, sp, #8
 800e85e:	60f8      	str	r0, [r7, #12]
 800e860:	607a      	str	r2, [r7, #4]
 800e862:	461a      	mov	r2, r3
 800e864:	460b      	mov	r3, r1
 800e866:	817b      	strh	r3, [r7, #10]
 800e868:	4613      	mov	r3, r2
 800e86a:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800e86c:	68fb      	ldr	r3, [r7, #12]
 800e86e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800e872:	b2db      	uxtb	r3, r3
 800e874:	2b20      	cmp	r3, #32
 800e876:	f040 80fd 	bne.w	800ea74 <HAL_I2C_Master_Transmit+0x21c>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800e87a:	68fb      	ldr	r3, [r7, #12]
 800e87c:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800e880:	2b01      	cmp	r3, #1
 800e882:	d101      	bne.n	800e888 <HAL_I2C_Master_Transmit+0x30>
 800e884:	2302      	movs	r3, #2
 800e886:	e0f6      	b.n	800ea76 <HAL_I2C_Master_Transmit+0x21e>
 800e888:	68fb      	ldr	r3, [r7, #12]
 800e88a:	2201      	movs	r2, #1
 800e88c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800e890:	f7fc fd38 	bl	800b304 <HAL_GetTick>
 800e894:	6138      	str	r0, [r7, #16]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800e896:	693b      	ldr	r3, [r7, #16]
 800e898:	9300      	str	r3, [sp, #0]
 800e89a:	2319      	movs	r3, #25
 800e89c:	2201      	movs	r2, #1
 800e89e:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800e8a2:	68f8      	ldr	r0, [r7, #12]
 800e8a4:	f000 fa0a 	bl	800ecbc <I2C_WaitOnFlagUntilTimeout>
 800e8a8:	4603      	mov	r3, r0
 800e8aa:	2b00      	cmp	r3, #0
 800e8ac:	d001      	beq.n	800e8b2 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 800e8ae:	2301      	movs	r3, #1
 800e8b0:	e0e1      	b.n	800ea76 <HAL_I2C_Master_Transmit+0x21e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800e8b2:	68fb      	ldr	r3, [r7, #12]
 800e8b4:	2221      	movs	r2, #33	@ 0x21
 800e8b6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800e8ba:	68fb      	ldr	r3, [r7, #12]
 800e8bc:	2210      	movs	r2, #16
 800e8be:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800e8c2:	68fb      	ldr	r3, [r7, #12]
 800e8c4:	2200      	movs	r2, #0
 800e8c6:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800e8c8:	68fb      	ldr	r3, [r7, #12]
 800e8ca:	687a      	ldr	r2, [r7, #4]
 800e8cc:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 800e8ce:	68fb      	ldr	r3, [r7, #12]
 800e8d0:	893a      	ldrh	r2, [r7, #8]
 800e8d2:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 800e8d4:	68fb      	ldr	r3, [r7, #12]
 800e8d6:	2200      	movs	r2, #0
 800e8d8:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800e8da:	68fb      	ldr	r3, [r7, #12]
 800e8dc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800e8de:	b29b      	uxth	r3, r3
 800e8e0:	2bff      	cmp	r3, #255	@ 0xff
 800e8e2:	d906      	bls.n	800e8f2 <HAL_I2C_Master_Transmit+0x9a>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800e8e4:	68fb      	ldr	r3, [r7, #12]
 800e8e6:	22ff      	movs	r2, #255	@ 0xff
 800e8e8:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 800e8ea:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800e8ee:	617b      	str	r3, [r7, #20]
 800e8f0:	e007      	b.n	800e902 <HAL_I2C_Master_Transmit+0xaa>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800e8f2:	68fb      	ldr	r3, [r7, #12]
 800e8f4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800e8f6:	b29a      	uxth	r2, r3
 800e8f8:	68fb      	ldr	r3, [r7, #12]
 800e8fa:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 800e8fc:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800e900:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 800e902:	68fb      	ldr	r3, [r7, #12]
 800e904:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800e906:	2b00      	cmp	r3, #0
 800e908:	d024      	beq.n	800e954 <HAL_I2C_Master_Transmit+0xfc>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800e90a:	68fb      	ldr	r3, [r7, #12]
 800e90c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e90e:	781a      	ldrb	r2, [r3, #0]
 800e910:	68fb      	ldr	r3, [r7, #12]
 800e912:	681b      	ldr	r3, [r3, #0]
 800e914:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800e916:	68fb      	ldr	r3, [r7, #12]
 800e918:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e91a:	1c5a      	adds	r2, r3, #1
 800e91c:	68fb      	ldr	r3, [r7, #12]
 800e91e:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 800e920:	68fb      	ldr	r3, [r7, #12]
 800e922:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800e924:	b29b      	uxth	r3, r3
 800e926:	3b01      	subs	r3, #1
 800e928:	b29a      	uxth	r2, r3
 800e92a:	68fb      	ldr	r3, [r7, #12]
 800e92c:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 800e92e:	68fb      	ldr	r3, [r7, #12]
 800e930:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800e932:	3b01      	subs	r3, #1
 800e934:	b29a      	uxth	r2, r3
 800e936:	68fb      	ldr	r3, [r7, #12]
 800e938:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U), xfermode,
 800e93a:	68fb      	ldr	r3, [r7, #12]
 800e93c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800e93e:	b2db      	uxtb	r3, r3
 800e940:	3301      	adds	r3, #1
 800e942:	b2da      	uxtb	r2, r3
 800e944:	8979      	ldrh	r1, [r7, #10]
 800e946:	4b4e      	ldr	r3, [pc, #312]	@ (800ea80 <HAL_I2C_Master_Transmit+0x228>)
 800e948:	9300      	str	r3, [sp, #0]
 800e94a:	697b      	ldr	r3, [r7, #20]
 800e94c:	68f8      	ldr	r0, [r7, #12]
 800e94e:	f000 fc05 	bl	800f15c <I2C_TransferConfig>
 800e952:	e066      	b.n	800ea22 <HAL_I2C_Master_Transmit+0x1ca>
    }
    else
    {
      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode,
 800e954:	68fb      	ldr	r3, [r7, #12]
 800e956:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800e958:	b2da      	uxtb	r2, r3
 800e95a:	8979      	ldrh	r1, [r7, #10]
 800e95c:	4b48      	ldr	r3, [pc, #288]	@ (800ea80 <HAL_I2C_Master_Transmit+0x228>)
 800e95e:	9300      	str	r3, [sp, #0]
 800e960:	697b      	ldr	r3, [r7, #20]
 800e962:	68f8      	ldr	r0, [r7, #12]
 800e964:	f000 fbfa 	bl	800f15c <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 800e968:	e05b      	b.n	800ea22 <HAL_I2C_Master_Transmit+0x1ca>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800e96a:	693a      	ldr	r2, [r7, #16]
 800e96c:	6a39      	ldr	r1, [r7, #32]
 800e96e:	68f8      	ldr	r0, [r7, #12]
 800e970:	f000 f9fd 	bl	800ed6e <I2C_WaitOnTXISFlagUntilTimeout>
 800e974:	4603      	mov	r3, r0
 800e976:	2b00      	cmp	r3, #0
 800e978:	d001      	beq.n	800e97e <HAL_I2C_Master_Transmit+0x126>
      {
        return HAL_ERROR;
 800e97a:	2301      	movs	r3, #1
 800e97c:	e07b      	b.n	800ea76 <HAL_I2C_Master_Transmit+0x21e>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800e97e:	68fb      	ldr	r3, [r7, #12]
 800e980:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e982:	781a      	ldrb	r2, [r3, #0]
 800e984:	68fb      	ldr	r3, [r7, #12]
 800e986:	681b      	ldr	r3, [r3, #0]
 800e988:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800e98a:	68fb      	ldr	r3, [r7, #12]
 800e98c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e98e:	1c5a      	adds	r2, r3, #1
 800e990:	68fb      	ldr	r3, [r7, #12]
 800e992:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 800e994:	68fb      	ldr	r3, [r7, #12]
 800e996:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800e998:	b29b      	uxth	r3, r3
 800e99a:	3b01      	subs	r3, #1
 800e99c:	b29a      	uxth	r2, r3
 800e99e:	68fb      	ldr	r3, [r7, #12]
 800e9a0:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 800e9a2:	68fb      	ldr	r3, [r7, #12]
 800e9a4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800e9a6:	3b01      	subs	r3, #1
 800e9a8:	b29a      	uxth	r2, r3
 800e9aa:	68fb      	ldr	r3, [r7, #12]
 800e9ac:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800e9ae:	68fb      	ldr	r3, [r7, #12]
 800e9b0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800e9b2:	b29b      	uxth	r3, r3
 800e9b4:	2b00      	cmp	r3, #0
 800e9b6:	d034      	beq.n	800ea22 <HAL_I2C_Master_Transmit+0x1ca>
 800e9b8:	68fb      	ldr	r3, [r7, #12]
 800e9ba:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800e9bc:	2b00      	cmp	r3, #0
 800e9be:	d130      	bne.n	800ea22 <HAL_I2C_Master_Transmit+0x1ca>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800e9c0:	693b      	ldr	r3, [r7, #16]
 800e9c2:	9300      	str	r3, [sp, #0]
 800e9c4:	6a3b      	ldr	r3, [r7, #32]
 800e9c6:	2200      	movs	r2, #0
 800e9c8:	2180      	movs	r1, #128	@ 0x80
 800e9ca:	68f8      	ldr	r0, [r7, #12]
 800e9cc:	f000 f976 	bl	800ecbc <I2C_WaitOnFlagUntilTimeout>
 800e9d0:	4603      	mov	r3, r0
 800e9d2:	2b00      	cmp	r3, #0
 800e9d4:	d001      	beq.n	800e9da <HAL_I2C_Master_Transmit+0x182>
        {
          return HAL_ERROR;
 800e9d6:	2301      	movs	r3, #1
 800e9d8:	e04d      	b.n	800ea76 <HAL_I2C_Master_Transmit+0x21e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800e9da:	68fb      	ldr	r3, [r7, #12]
 800e9dc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800e9de:	b29b      	uxth	r3, r3
 800e9e0:	2bff      	cmp	r3, #255	@ 0xff
 800e9e2:	d90e      	bls.n	800ea02 <HAL_I2C_Master_Transmit+0x1aa>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800e9e4:	68fb      	ldr	r3, [r7, #12]
 800e9e6:	22ff      	movs	r2, #255	@ 0xff
 800e9e8:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800e9ea:	68fb      	ldr	r3, [r7, #12]
 800e9ec:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800e9ee:	b2da      	uxtb	r2, r3
 800e9f0:	8979      	ldrh	r1, [r7, #10]
 800e9f2:	2300      	movs	r3, #0
 800e9f4:	9300      	str	r3, [sp, #0]
 800e9f6:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800e9fa:	68f8      	ldr	r0, [r7, #12]
 800e9fc:	f000 fbae 	bl	800f15c <I2C_TransferConfig>
 800ea00:	e00f      	b.n	800ea22 <HAL_I2C_Master_Transmit+0x1ca>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800ea02:	68fb      	ldr	r3, [r7, #12]
 800ea04:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800ea06:	b29a      	uxth	r2, r3
 800ea08:	68fb      	ldr	r3, [r7, #12]
 800ea0a:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800ea0c:	68fb      	ldr	r3, [r7, #12]
 800ea0e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800ea10:	b2da      	uxtb	r2, r3
 800ea12:	8979      	ldrh	r1, [r7, #10]
 800ea14:	2300      	movs	r3, #0
 800ea16:	9300      	str	r3, [sp, #0]
 800ea18:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800ea1c:	68f8      	ldr	r0, [r7, #12]
 800ea1e:	f000 fb9d 	bl	800f15c <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 800ea22:	68fb      	ldr	r3, [r7, #12]
 800ea24:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800ea26:	b29b      	uxth	r3, r3
 800ea28:	2b00      	cmp	r3, #0
 800ea2a:	d19e      	bne.n	800e96a <HAL_I2C_Master_Transmit+0x112>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800ea2c:	693a      	ldr	r2, [r7, #16]
 800ea2e:	6a39      	ldr	r1, [r7, #32]
 800ea30:	68f8      	ldr	r0, [r7, #12]
 800ea32:	f000 f9e3 	bl	800edfc <I2C_WaitOnSTOPFlagUntilTimeout>
 800ea36:	4603      	mov	r3, r0
 800ea38:	2b00      	cmp	r3, #0
 800ea3a:	d001      	beq.n	800ea40 <HAL_I2C_Master_Transmit+0x1e8>
    {
      return HAL_ERROR;
 800ea3c:	2301      	movs	r3, #1
 800ea3e:	e01a      	b.n	800ea76 <HAL_I2C_Master_Transmit+0x21e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800ea40:	68fb      	ldr	r3, [r7, #12]
 800ea42:	681b      	ldr	r3, [r3, #0]
 800ea44:	2220      	movs	r2, #32
 800ea46:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800ea48:	68fb      	ldr	r3, [r7, #12]
 800ea4a:	681b      	ldr	r3, [r3, #0]
 800ea4c:	6859      	ldr	r1, [r3, #4]
 800ea4e:	68fb      	ldr	r3, [r7, #12]
 800ea50:	681a      	ldr	r2, [r3, #0]
 800ea52:	4b0c      	ldr	r3, [pc, #48]	@ (800ea84 <HAL_I2C_Master_Transmit+0x22c>)
 800ea54:	400b      	ands	r3, r1
 800ea56:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800ea58:	68fb      	ldr	r3, [r7, #12]
 800ea5a:	2220      	movs	r2, #32
 800ea5c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800ea60:	68fb      	ldr	r3, [r7, #12]
 800ea62:	2200      	movs	r2, #0
 800ea64:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800ea68:	68fb      	ldr	r3, [r7, #12]
 800ea6a:	2200      	movs	r2, #0
 800ea6c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800ea70:	2300      	movs	r3, #0
 800ea72:	e000      	b.n	800ea76 <HAL_I2C_Master_Transmit+0x21e>
  }
  else
  {
    return HAL_BUSY;
 800ea74:	2302      	movs	r3, #2
  }
}
 800ea76:	4618      	mov	r0, r3
 800ea78:	3718      	adds	r7, #24
 800ea7a:	46bd      	mov	sp, r7
 800ea7c:	bd80      	pop	{r7, pc}
 800ea7e:	bf00      	nop
 800ea80:	80002000 	.word	0x80002000
 800ea84:	fe00e800 	.word	0xfe00e800

0800ea88 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 800ea88:	b580      	push	{r7, lr}
 800ea8a:	b088      	sub	sp, #32
 800ea8c:	af02      	add	r7, sp, #8
 800ea8e:	60f8      	str	r0, [r7, #12]
 800ea90:	607a      	str	r2, [r7, #4]
 800ea92:	461a      	mov	r2, r3
 800ea94:	460b      	mov	r3, r1
 800ea96:	817b      	strh	r3, [r7, #10]
 800ea98:	4613      	mov	r3, r2
 800ea9a:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800ea9c:	68fb      	ldr	r3, [r7, #12]
 800ea9e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800eaa2:	b2db      	uxtb	r3, r3
 800eaa4:	2b20      	cmp	r3, #32
 800eaa6:	f040 80db 	bne.w	800ec60 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800eaaa:	68fb      	ldr	r3, [r7, #12]
 800eaac:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800eab0:	2b01      	cmp	r3, #1
 800eab2:	d101      	bne.n	800eab8 <HAL_I2C_Master_Receive+0x30>
 800eab4:	2302      	movs	r3, #2
 800eab6:	e0d4      	b.n	800ec62 <HAL_I2C_Master_Receive+0x1da>
 800eab8:	68fb      	ldr	r3, [r7, #12]
 800eaba:	2201      	movs	r2, #1
 800eabc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800eac0:	f7fc fc20 	bl	800b304 <HAL_GetTick>
 800eac4:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800eac6:	697b      	ldr	r3, [r7, #20]
 800eac8:	9300      	str	r3, [sp, #0]
 800eaca:	2319      	movs	r3, #25
 800eacc:	2201      	movs	r2, #1
 800eace:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800ead2:	68f8      	ldr	r0, [r7, #12]
 800ead4:	f000 f8f2 	bl	800ecbc <I2C_WaitOnFlagUntilTimeout>
 800ead8:	4603      	mov	r3, r0
 800eada:	2b00      	cmp	r3, #0
 800eadc:	d001      	beq.n	800eae2 <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 800eade:	2301      	movs	r3, #1
 800eae0:	e0bf      	b.n	800ec62 <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800eae2:	68fb      	ldr	r3, [r7, #12]
 800eae4:	2222      	movs	r2, #34	@ 0x22
 800eae6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800eaea:	68fb      	ldr	r3, [r7, #12]
 800eaec:	2210      	movs	r2, #16
 800eaee:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800eaf2:	68fb      	ldr	r3, [r7, #12]
 800eaf4:	2200      	movs	r2, #0
 800eaf6:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800eaf8:	68fb      	ldr	r3, [r7, #12]
 800eafa:	687a      	ldr	r2, [r7, #4]
 800eafc:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 800eafe:	68fb      	ldr	r3, [r7, #12]
 800eb00:	893a      	ldrh	r2, [r7, #8]
 800eb02:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 800eb04:	68fb      	ldr	r3, [r7, #12]
 800eb06:	2200      	movs	r2, #0
 800eb08:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800eb0a:	68fb      	ldr	r3, [r7, #12]
 800eb0c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800eb0e:	b29b      	uxth	r3, r3
 800eb10:	2bff      	cmp	r3, #255	@ 0xff
 800eb12:	d90e      	bls.n	800eb32 <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = 1U;
 800eb14:	68fb      	ldr	r3, [r7, #12]
 800eb16:	2201      	movs	r2, #1
 800eb18:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800eb1a:	68fb      	ldr	r3, [r7, #12]
 800eb1c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800eb1e:	b2da      	uxtb	r2, r3
 800eb20:	8979      	ldrh	r1, [r7, #10]
 800eb22:	4b52      	ldr	r3, [pc, #328]	@ (800ec6c <HAL_I2C_Master_Receive+0x1e4>)
 800eb24:	9300      	str	r3, [sp, #0]
 800eb26:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800eb2a:	68f8      	ldr	r0, [r7, #12]
 800eb2c:	f000 fb16 	bl	800f15c <I2C_TransferConfig>
 800eb30:	e06d      	b.n	800ec0e <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800eb32:	68fb      	ldr	r3, [r7, #12]
 800eb34:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800eb36:	b29a      	uxth	r2, r3
 800eb38:	68fb      	ldr	r3, [r7, #12]
 800eb3a:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800eb3c:	68fb      	ldr	r3, [r7, #12]
 800eb3e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800eb40:	b2da      	uxtb	r2, r3
 800eb42:	8979      	ldrh	r1, [r7, #10]
 800eb44:	4b49      	ldr	r3, [pc, #292]	@ (800ec6c <HAL_I2C_Master_Receive+0x1e4>)
 800eb46:	9300      	str	r3, [sp, #0]
 800eb48:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800eb4c:	68f8      	ldr	r0, [r7, #12]
 800eb4e:	f000 fb05 	bl	800f15c <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 800eb52:	e05c      	b.n	800ec0e <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800eb54:	697a      	ldr	r2, [r7, #20]
 800eb56:	6a39      	ldr	r1, [r7, #32]
 800eb58:	68f8      	ldr	r0, [r7, #12]
 800eb5a:	f000 f993 	bl	800ee84 <I2C_WaitOnRXNEFlagUntilTimeout>
 800eb5e:	4603      	mov	r3, r0
 800eb60:	2b00      	cmp	r3, #0
 800eb62:	d001      	beq.n	800eb68 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 800eb64:	2301      	movs	r3, #1
 800eb66:	e07c      	b.n	800ec62 <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800eb68:	68fb      	ldr	r3, [r7, #12]
 800eb6a:	681b      	ldr	r3, [r3, #0]
 800eb6c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800eb6e:	68fb      	ldr	r3, [r7, #12]
 800eb70:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800eb72:	b2d2      	uxtb	r2, r2
 800eb74:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800eb76:	68fb      	ldr	r3, [r7, #12]
 800eb78:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800eb7a:	1c5a      	adds	r2, r3, #1
 800eb7c:	68fb      	ldr	r3, [r7, #12]
 800eb7e:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 800eb80:	68fb      	ldr	r3, [r7, #12]
 800eb82:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800eb84:	3b01      	subs	r3, #1
 800eb86:	b29a      	uxth	r2, r3
 800eb88:	68fb      	ldr	r3, [r7, #12]
 800eb8a:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 800eb8c:	68fb      	ldr	r3, [r7, #12]
 800eb8e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800eb90:	b29b      	uxth	r3, r3
 800eb92:	3b01      	subs	r3, #1
 800eb94:	b29a      	uxth	r2, r3
 800eb96:	68fb      	ldr	r3, [r7, #12]
 800eb98:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800eb9a:	68fb      	ldr	r3, [r7, #12]
 800eb9c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800eb9e:	b29b      	uxth	r3, r3
 800eba0:	2b00      	cmp	r3, #0
 800eba2:	d034      	beq.n	800ec0e <HAL_I2C_Master_Receive+0x186>
 800eba4:	68fb      	ldr	r3, [r7, #12]
 800eba6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800eba8:	2b00      	cmp	r3, #0
 800ebaa:	d130      	bne.n	800ec0e <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800ebac:	697b      	ldr	r3, [r7, #20]
 800ebae:	9300      	str	r3, [sp, #0]
 800ebb0:	6a3b      	ldr	r3, [r7, #32]
 800ebb2:	2200      	movs	r2, #0
 800ebb4:	2180      	movs	r1, #128	@ 0x80
 800ebb6:	68f8      	ldr	r0, [r7, #12]
 800ebb8:	f000 f880 	bl	800ecbc <I2C_WaitOnFlagUntilTimeout>
 800ebbc:	4603      	mov	r3, r0
 800ebbe:	2b00      	cmp	r3, #0
 800ebc0:	d001      	beq.n	800ebc6 <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 800ebc2:	2301      	movs	r3, #1
 800ebc4:	e04d      	b.n	800ec62 <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800ebc6:	68fb      	ldr	r3, [r7, #12]
 800ebc8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800ebca:	b29b      	uxth	r3, r3
 800ebcc:	2bff      	cmp	r3, #255	@ 0xff
 800ebce:	d90e      	bls.n	800ebee <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800ebd0:	68fb      	ldr	r3, [r7, #12]
 800ebd2:	22ff      	movs	r2, #255	@ 0xff
 800ebd4:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800ebd6:	68fb      	ldr	r3, [r7, #12]
 800ebd8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800ebda:	b2da      	uxtb	r2, r3
 800ebdc:	8979      	ldrh	r1, [r7, #10]
 800ebde:	2300      	movs	r3, #0
 800ebe0:	9300      	str	r3, [sp, #0]
 800ebe2:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800ebe6:	68f8      	ldr	r0, [r7, #12]
 800ebe8:	f000 fab8 	bl	800f15c <I2C_TransferConfig>
 800ebec:	e00f      	b.n	800ec0e <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800ebee:	68fb      	ldr	r3, [r7, #12]
 800ebf0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800ebf2:	b29a      	uxth	r2, r3
 800ebf4:	68fb      	ldr	r3, [r7, #12]
 800ebf6:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800ebf8:	68fb      	ldr	r3, [r7, #12]
 800ebfa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800ebfc:	b2da      	uxtb	r2, r3
 800ebfe:	8979      	ldrh	r1, [r7, #10]
 800ec00:	2300      	movs	r3, #0
 800ec02:	9300      	str	r3, [sp, #0]
 800ec04:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800ec08:	68f8      	ldr	r0, [r7, #12]
 800ec0a:	f000 faa7 	bl	800f15c <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 800ec0e:	68fb      	ldr	r3, [r7, #12]
 800ec10:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800ec12:	b29b      	uxth	r3, r3
 800ec14:	2b00      	cmp	r3, #0
 800ec16:	d19d      	bne.n	800eb54 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800ec18:	697a      	ldr	r2, [r7, #20]
 800ec1a:	6a39      	ldr	r1, [r7, #32]
 800ec1c:	68f8      	ldr	r0, [r7, #12]
 800ec1e:	f000 f8ed 	bl	800edfc <I2C_WaitOnSTOPFlagUntilTimeout>
 800ec22:	4603      	mov	r3, r0
 800ec24:	2b00      	cmp	r3, #0
 800ec26:	d001      	beq.n	800ec2c <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 800ec28:	2301      	movs	r3, #1
 800ec2a:	e01a      	b.n	800ec62 <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800ec2c:	68fb      	ldr	r3, [r7, #12]
 800ec2e:	681b      	ldr	r3, [r3, #0]
 800ec30:	2220      	movs	r2, #32
 800ec32:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800ec34:	68fb      	ldr	r3, [r7, #12]
 800ec36:	681b      	ldr	r3, [r3, #0]
 800ec38:	6859      	ldr	r1, [r3, #4]
 800ec3a:	68fb      	ldr	r3, [r7, #12]
 800ec3c:	681a      	ldr	r2, [r3, #0]
 800ec3e:	4b0c      	ldr	r3, [pc, #48]	@ (800ec70 <HAL_I2C_Master_Receive+0x1e8>)
 800ec40:	400b      	ands	r3, r1
 800ec42:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800ec44:	68fb      	ldr	r3, [r7, #12]
 800ec46:	2220      	movs	r2, #32
 800ec48:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800ec4c:	68fb      	ldr	r3, [r7, #12]
 800ec4e:	2200      	movs	r2, #0
 800ec50:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800ec54:	68fb      	ldr	r3, [r7, #12]
 800ec56:	2200      	movs	r2, #0
 800ec58:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800ec5c:	2300      	movs	r3, #0
 800ec5e:	e000      	b.n	800ec62 <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 800ec60:	2302      	movs	r3, #2
  }
}
 800ec62:	4618      	mov	r0, r3
 800ec64:	3718      	adds	r7, #24
 800ec66:	46bd      	mov	sp, r7
 800ec68:	bd80      	pop	{r7, pc}
 800ec6a:	bf00      	nop
 800ec6c:	80002400 	.word	0x80002400
 800ec70:	fe00e800 	.word	0xfe00e800

0800ec74 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 800ec74:	b480      	push	{r7}
 800ec76:	b083      	sub	sp, #12
 800ec78:	af00      	add	r7, sp, #0
 800ec7a:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800ec7c:	687b      	ldr	r3, [r7, #4]
 800ec7e:	681b      	ldr	r3, [r3, #0]
 800ec80:	699b      	ldr	r3, [r3, #24]
 800ec82:	f003 0302 	and.w	r3, r3, #2
 800ec86:	2b02      	cmp	r3, #2
 800ec88:	d103      	bne.n	800ec92 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800ec8a:	687b      	ldr	r3, [r7, #4]
 800ec8c:	681b      	ldr	r3, [r3, #0]
 800ec8e:	2200      	movs	r2, #0
 800ec90:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800ec92:	687b      	ldr	r3, [r7, #4]
 800ec94:	681b      	ldr	r3, [r3, #0]
 800ec96:	699b      	ldr	r3, [r3, #24]
 800ec98:	f003 0301 	and.w	r3, r3, #1
 800ec9c:	2b01      	cmp	r3, #1
 800ec9e:	d007      	beq.n	800ecb0 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800eca0:	687b      	ldr	r3, [r7, #4]
 800eca2:	681b      	ldr	r3, [r3, #0]
 800eca4:	699a      	ldr	r2, [r3, #24]
 800eca6:	687b      	ldr	r3, [r7, #4]
 800eca8:	681b      	ldr	r3, [r3, #0]
 800ecaa:	f042 0201 	orr.w	r2, r2, #1
 800ecae:	619a      	str	r2, [r3, #24]
  }
}
 800ecb0:	bf00      	nop
 800ecb2:	370c      	adds	r7, #12
 800ecb4:	46bd      	mov	sp, r7
 800ecb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ecba:	4770      	bx	lr

0800ecbc <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 800ecbc:	b580      	push	{r7, lr}
 800ecbe:	b084      	sub	sp, #16
 800ecc0:	af00      	add	r7, sp, #0
 800ecc2:	60f8      	str	r0, [r7, #12]
 800ecc4:	60b9      	str	r1, [r7, #8]
 800ecc6:	603b      	str	r3, [r7, #0]
 800ecc8:	4613      	mov	r3, r2
 800ecca:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800eccc:	e03b      	b.n	800ed46 <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800ecce:	69ba      	ldr	r2, [r7, #24]
 800ecd0:	6839      	ldr	r1, [r7, #0]
 800ecd2:	68f8      	ldr	r0, [r7, #12]
 800ecd4:	f000 f962 	bl	800ef9c <I2C_IsErrorOccurred>
 800ecd8:	4603      	mov	r3, r0
 800ecda:	2b00      	cmp	r3, #0
 800ecdc:	d001      	beq.n	800ece2 <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 800ecde:	2301      	movs	r3, #1
 800ece0:	e041      	b.n	800ed66 <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800ece2:	683b      	ldr	r3, [r7, #0]
 800ece4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ece8:	d02d      	beq.n	800ed46 <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800ecea:	f7fc fb0b 	bl	800b304 <HAL_GetTick>
 800ecee:	4602      	mov	r2, r0
 800ecf0:	69bb      	ldr	r3, [r7, #24]
 800ecf2:	1ad3      	subs	r3, r2, r3
 800ecf4:	683a      	ldr	r2, [r7, #0]
 800ecf6:	429a      	cmp	r2, r3
 800ecf8:	d302      	bcc.n	800ed00 <I2C_WaitOnFlagUntilTimeout+0x44>
 800ecfa:	683b      	ldr	r3, [r7, #0]
 800ecfc:	2b00      	cmp	r3, #0
 800ecfe:	d122      	bne.n	800ed46 <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 800ed00:	68fb      	ldr	r3, [r7, #12]
 800ed02:	681b      	ldr	r3, [r3, #0]
 800ed04:	699a      	ldr	r2, [r3, #24]
 800ed06:	68bb      	ldr	r3, [r7, #8]
 800ed08:	4013      	ands	r3, r2
 800ed0a:	68ba      	ldr	r2, [r7, #8]
 800ed0c:	429a      	cmp	r2, r3
 800ed0e:	bf0c      	ite	eq
 800ed10:	2301      	moveq	r3, #1
 800ed12:	2300      	movne	r3, #0
 800ed14:	b2db      	uxtb	r3, r3
 800ed16:	461a      	mov	r2, r3
 800ed18:	79fb      	ldrb	r3, [r7, #7]
 800ed1a:	429a      	cmp	r2, r3
 800ed1c:	d113      	bne.n	800ed46 <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800ed1e:	68fb      	ldr	r3, [r7, #12]
 800ed20:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800ed22:	f043 0220 	orr.w	r2, r3, #32
 800ed26:	68fb      	ldr	r3, [r7, #12]
 800ed28:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800ed2a:	68fb      	ldr	r3, [r7, #12]
 800ed2c:	2220      	movs	r2, #32
 800ed2e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800ed32:	68fb      	ldr	r3, [r7, #12]
 800ed34:	2200      	movs	r2, #0
 800ed36:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800ed3a:	68fb      	ldr	r3, [r7, #12]
 800ed3c:	2200      	movs	r2, #0
 800ed3e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 800ed42:	2301      	movs	r3, #1
 800ed44:	e00f      	b.n	800ed66 <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800ed46:	68fb      	ldr	r3, [r7, #12]
 800ed48:	681b      	ldr	r3, [r3, #0]
 800ed4a:	699a      	ldr	r2, [r3, #24]
 800ed4c:	68bb      	ldr	r3, [r7, #8]
 800ed4e:	4013      	ands	r3, r2
 800ed50:	68ba      	ldr	r2, [r7, #8]
 800ed52:	429a      	cmp	r2, r3
 800ed54:	bf0c      	ite	eq
 800ed56:	2301      	moveq	r3, #1
 800ed58:	2300      	movne	r3, #0
 800ed5a:	b2db      	uxtb	r3, r3
 800ed5c:	461a      	mov	r2, r3
 800ed5e:	79fb      	ldrb	r3, [r7, #7]
 800ed60:	429a      	cmp	r2, r3
 800ed62:	d0b4      	beq.n	800ecce <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800ed64:	2300      	movs	r3, #0
}
 800ed66:	4618      	mov	r0, r3
 800ed68:	3710      	adds	r7, #16
 800ed6a:	46bd      	mov	sp, r7
 800ed6c:	bd80      	pop	{r7, pc}

0800ed6e <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800ed6e:	b580      	push	{r7, lr}
 800ed70:	b084      	sub	sp, #16
 800ed72:	af00      	add	r7, sp, #0
 800ed74:	60f8      	str	r0, [r7, #12]
 800ed76:	60b9      	str	r1, [r7, #8]
 800ed78:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800ed7a:	e033      	b.n	800ede4 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800ed7c:	687a      	ldr	r2, [r7, #4]
 800ed7e:	68b9      	ldr	r1, [r7, #8]
 800ed80:	68f8      	ldr	r0, [r7, #12]
 800ed82:	f000 f90b 	bl	800ef9c <I2C_IsErrorOccurred>
 800ed86:	4603      	mov	r3, r0
 800ed88:	2b00      	cmp	r3, #0
 800ed8a:	d001      	beq.n	800ed90 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800ed8c:	2301      	movs	r3, #1
 800ed8e:	e031      	b.n	800edf4 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800ed90:	68bb      	ldr	r3, [r7, #8]
 800ed92:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ed96:	d025      	beq.n	800ede4 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800ed98:	f7fc fab4 	bl	800b304 <HAL_GetTick>
 800ed9c:	4602      	mov	r2, r0
 800ed9e:	687b      	ldr	r3, [r7, #4]
 800eda0:	1ad3      	subs	r3, r2, r3
 800eda2:	68ba      	ldr	r2, [r7, #8]
 800eda4:	429a      	cmp	r2, r3
 800eda6:	d302      	bcc.n	800edae <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 800eda8:	68bb      	ldr	r3, [r7, #8]
 800edaa:	2b00      	cmp	r3, #0
 800edac:	d11a      	bne.n	800ede4 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 800edae:	68fb      	ldr	r3, [r7, #12]
 800edb0:	681b      	ldr	r3, [r3, #0]
 800edb2:	699b      	ldr	r3, [r3, #24]
 800edb4:	f003 0302 	and.w	r3, r3, #2
 800edb8:	2b02      	cmp	r3, #2
 800edba:	d013      	beq.n	800ede4 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800edbc:	68fb      	ldr	r3, [r7, #12]
 800edbe:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800edc0:	f043 0220 	orr.w	r2, r3, #32
 800edc4:	68fb      	ldr	r3, [r7, #12]
 800edc6:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800edc8:	68fb      	ldr	r3, [r7, #12]
 800edca:	2220      	movs	r2, #32
 800edcc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800edd0:	68fb      	ldr	r3, [r7, #12]
 800edd2:	2200      	movs	r2, #0
 800edd4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800edd8:	68fb      	ldr	r3, [r7, #12]
 800edda:	2200      	movs	r2, #0
 800eddc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 800ede0:	2301      	movs	r3, #1
 800ede2:	e007      	b.n	800edf4 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800ede4:	68fb      	ldr	r3, [r7, #12]
 800ede6:	681b      	ldr	r3, [r3, #0]
 800ede8:	699b      	ldr	r3, [r3, #24]
 800edea:	f003 0302 	and.w	r3, r3, #2
 800edee:	2b02      	cmp	r3, #2
 800edf0:	d1c4      	bne.n	800ed7c <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800edf2:	2300      	movs	r3, #0
}
 800edf4:	4618      	mov	r0, r3
 800edf6:	3710      	adds	r7, #16
 800edf8:	46bd      	mov	sp, r7
 800edfa:	bd80      	pop	{r7, pc}

0800edfc <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800edfc:	b580      	push	{r7, lr}
 800edfe:	b084      	sub	sp, #16
 800ee00:	af00      	add	r7, sp, #0
 800ee02:	60f8      	str	r0, [r7, #12]
 800ee04:	60b9      	str	r1, [r7, #8]
 800ee06:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800ee08:	e02f      	b.n	800ee6a <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800ee0a:	687a      	ldr	r2, [r7, #4]
 800ee0c:	68b9      	ldr	r1, [r7, #8]
 800ee0e:	68f8      	ldr	r0, [r7, #12]
 800ee10:	f000 f8c4 	bl	800ef9c <I2C_IsErrorOccurred>
 800ee14:	4603      	mov	r3, r0
 800ee16:	2b00      	cmp	r3, #0
 800ee18:	d001      	beq.n	800ee1e <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800ee1a:	2301      	movs	r3, #1
 800ee1c:	e02d      	b.n	800ee7a <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800ee1e:	f7fc fa71 	bl	800b304 <HAL_GetTick>
 800ee22:	4602      	mov	r2, r0
 800ee24:	687b      	ldr	r3, [r7, #4]
 800ee26:	1ad3      	subs	r3, r2, r3
 800ee28:	68ba      	ldr	r2, [r7, #8]
 800ee2a:	429a      	cmp	r2, r3
 800ee2c:	d302      	bcc.n	800ee34 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800ee2e:	68bb      	ldr	r3, [r7, #8]
 800ee30:	2b00      	cmp	r3, #0
 800ee32:	d11a      	bne.n	800ee6a <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 800ee34:	68fb      	ldr	r3, [r7, #12]
 800ee36:	681b      	ldr	r3, [r3, #0]
 800ee38:	699b      	ldr	r3, [r3, #24]
 800ee3a:	f003 0320 	and.w	r3, r3, #32
 800ee3e:	2b20      	cmp	r3, #32
 800ee40:	d013      	beq.n	800ee6a <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800ee42:	68fb      	ldr	r3, [r7, #12]
 800ee44:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800ee46:	f043 0220 	orr.w	r2, r3, #32
 800ee4a:	68fb      	ldr	r3, [r7, #12]
 800ee4c:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800ee4e:	68fb      	ldr	r3, [r7, #12]
 800ee50:	2220      	movs	r2, #32
 800ee52:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800ee56:	68fb      	ldr	r3, [r7, #12]
 800ee58:	2200      	movs	r2, #0
 800ee5a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800ee5e:	68fb      	ldr	r3, [r7, #12]
 800ee60:	2200      	movs	r2, #0
 800ee62:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 800ee66:	2301      	movs	r3, #1
 800ee68:	e007      	b.n	800ee7a <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800ee6a:	68fb      	ldr	r3, [r7, #12]
 800ee6c:	681b      	ldr	r3, [r3, #0]
 800ee6e:	699b      	ldr	r3, [r3, #24]
 800ee70:	f003 0320 	and.w	r3, r3, #32
 800ee74:	2b20      	cmp	r3, #32
 800ee76:	d1c8      	bne.n	800ee0a <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800ee78:	2300      	movs	r3, #0
}
 800ee7a:	4618      	mov	r0, r3
 800ee7c:	3710      	adds	r7, #16
 800ee7e:	46bd      	mov	sp, r7
 800ee80:	bd80      	pop	{r7, pc}
	...

0800ee84 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800ee84:	b580      	push	{r7, lr}
 800ee86:	b086      	sub	sp, #24
 800ee88:	af00      	add	r7, sp, #0
 800ee8a:	60f8      	str	r0, [r7, #12]
 800ee8c:	60b9      	str	r1, [r7, #8]
 800ee8e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800ee90:	2300      	movs	r3, #0
 800ee92:	75fb      	strb	r3, [r7, #23]

  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 800ee94:	e071      	b.n	800ef7a <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800ee96:	687a      	ldr	r2, [r7, #4]
 800ee98:	68b9      	ldr	r1, [r7, #8]
 800ee9a:	68f8      	ldr	r0, [r7, #12]
 800ee9c:	f000 f87e 	bl	800ef9c <I2C_IsErrorOccurred>
 800eea0:	4603      	mov	r3, r0
 800eea2:	2b00      	cmp	r3, #0
 800eea4:	d001      	beq.n	800eeaa <I2C_WaitOnRXNEFlagUntilTimeout+0x26>
    {
      status = HAL_ERROR;
 800eea6:	2301      	movs	r3, #1
 800eea8:	75fb      	strb	r3, [r7, #23]
    }

    /* Check if a STOPF is detected */
    if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET) && (status == HAL_OK))
 800eeaa:	68fb      	ldr	r3, [r7, #12]
 800eeac:	681b      	ldr	r3, [r3, #0]
 800eeae:	699b      	ldr	r3, [r3, #24]
 800eeb0:	f003 0320 	and.w	r3, r3, #32
 800eeb4:	2b20      	cmp	r3, #32
 800eeb6:	d13b      	bne.n	800ef30 <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
 800eeb8:	7dfb      	ldrb	r3, [r7, #23]
 800eeba:	2b00      	cmp	r3, #0
 800eebc:	d138      	bne.n	800ef30 <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 800eebe:	68fb      	ldr	r3, [r7, #12]
 800eec0:	681b      	ldr	r3, [r3, #0]
 800eec2:	699b      	ldr	r3, [r3, #24]
 800eec4:	f003 0304 	and.w	r3, r3, #4
 800eec8:	2b04      	cmp	r3, #4
 800eeca:	d105      	bne.n	800eed8 <I2C_WaitOnRXNEFlagUntilTimeout+0x54>
 800eecc:	68fb      	ldr	r3, [r7, #12]
 800eece:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800eed0:	2b00      	cmp	r3, #0
 800eed2:	d001      	beq.n	800eed8 <I2C_WaitOnRXNEFlagUntilTimeout+0x54>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        status = HAL_OK;
 800eed4:	2300      	movs	r3, #0
 800eed6:	75fb      	strb	r3, [r7, #23]
      }

      /* Check a no-acknowledge have been detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800eed8:	68fb      	ldr	r3, [r7, #12]
 800eeda:	681b      	ldr	r3, [r3, #0]
 800eedc:	699b      	ldr	r3, [r3, #24]
 800eede:	f003 0310 	and.w	r3, r3, #16
 800eee2:	2b10      	cmp	r3, #16
 800eee4:	d121      	bne.n	800ef2a <I2C_WaitOnRXNEFlagUntilTimeout+0xa6>
      {
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800eee6:	68fb      	ldr	r3, [r7, #12]
 800eee8:	681b      	ldr	r3, [r3, #0]
 800eeea:	2210      	movs	r2, #16
 800eeec:	61da      	str	r2, [r3, #28]
        hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 800eeee:	68fb      	ldr	r3, [r7, #12]
 800eef0:	2204      	movs	r2, #4
 800eef2:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800eef4:	68fb      	ldr	r3, [r7, #12]
 800eef6:	681b      	ldr	r3, [r3, #0]
 800eef8:	2220      	movs	r2, #32
 800eefa:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 800eefc:	68fb      	ldr	r3, [r7, #12]
 800eefe:	681b      	ldr	r3, [r3, #0]
 800ef00:	6859      	ldr	r1, [r3, #4]
 800ef02:	68fb      	ldr	r3, [r7, #12]
 800ef04:	681a      	ldr	r2, [r3, #0]
 800ef06:	4b24      	ldr	r3, [pc, #144]	@ (800ef98 <I2C_WaitOnRXNEFlagUntilTimeout+0x114>)
 800ef08:	400b      	ands	r3, r1
 800ef0a:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 800ef0c:	68fb      	ldr	r3, [r7, #12]
 800ef0e:	2220      	movs	r2, #32
 800ef10:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800ef14:	68fb      	ldr	r3, [r7, #12]
 800ef16:	2200      	movs	r2, #0
 800ef18:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800ef1c:	68fb      	ldr	r3, [r7, #12]
 800ef1e:	2200      	movs	r2, #0
 800ef20:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        status = HAL_ERROR;
 800ef24:	2301      	movs	r3, #1
 800ef26:	75fb      	strb	r3, [r7, #23]
 800ef28:	e002      	b.n	800ef30 <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
      }
      else
      {
        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800ef2a:	68fb      	ldr	r3, [r7, #12]
 800ef2c:	2200      	movs	r2, #0
 800ef2e:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }

    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U)) && (status == HAL_OK))
 800ef30:	f7fc f9e8 	bl	800b304 <HAL_GetTick>
 800ef34:	4602      	mov	r2, r0
 800ef36:	687b      	ldr	r3, [r7, #4]
 800ef38:	1ad3      	subs	r3, r2, r3
 800ef3a:	68ba      	ldr	r2, [r7, #8]
 800ef3c:	429a      	cmp	r2, r3
 800ef3e:	d302      	bcc.n	800ef46 <I2C_WaitOnRXNEFlagUntilTimeout+0xc2>
 800ef40:	68bb      	ldr	r3, [r7, #8]
 800ef42:	2b00      	cmp	r3, #0
 800ef44:	d119      	bne.n	800ef7a <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
 800ef46:	7dfb      	ldrb	r3, [r7, #23]
 800ef48:	2b00      	cmp	r3, #0
 800ef4a:	d116      	bne.n	800ef7a <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 800ef4c:	68fb      	ldr	r3, [r7, #12]
 800ef4e:	681b      	ldr	r3, [r3, #0]
 800ef50:	699b      	ldr	r3, [r3, #24]
 800ef52:	f003 0304 	and.w	r3, r3, #4
 800ef56:	2b04      	cmp	r3, #4
 800ef58:	d00f      	beq.n	800ef7a <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800ef5a:	68fb      	ldr	r3, [r7, #12]
 800ef5c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800ef5e:	f043 0220 	orr.w	r2, r3, #32
 800ef62:	68fb      	ldr	r3, [r7, #12]
 800ef64:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800ef66:	68fb      	ldr	r3, [r7, #12]
 800ef68:	2220      	movs	r2, #32
 800ef6a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800ef6e:	68fb      	ldr	r3, [r7, #12]
 800ef70:	2200      	movs	r2, #0
 800ef72:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        status = HAL_ERROR;
 800ef76:	2301      	movs	r3, #1
 800ef78:	75fb      	strb	r3, [r7, #23]
  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 800ef7a:	68fb      	ldr	r3, [r7, #12]
 800ef7c:	681b      	ldr	r3, [r3, #0]
 800ef7e:	699b      	ldr	r3, [r3, #24]
 800ef80:	f003 0304 	and.w	r3, r3, #4
 800ef84:	2b04      	cmp	r3, #4
 800ef86:	d002      	beq.n	800ef8e <I2C_WaitOnRXNEFlagUntilTimeout+0x10a>
 800ef88:	7dfb      	ldrb	r3, [r7, #23]
 800ef8a:	2b00      	cmp	r3, #0
 800ef8c:	d083      	beq.n	800ee96 <I2C_WaitOnRXNEFlagUntilTimeout+0x12>
      }
    }
  }
  return status;
 800ef8e:	7dfb      	ldrb	r3, [r7, #23]
}
 800ef90:	4618      	mov	r0, r3
 800ef92:	3718      	adds	r7, #24
 800ef94:	46bd      	mov	sp, r7
 800ef96:	bd80      	pop	{r7, pc}
 800ef98:	fe00e800 	.word	0xfe00e800

0800ef9c <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800ef9c:	b580      	push	{r7, lr}
 800ef9e:	b08a      	sub	sp, #40	@ 0x28
 800efa0:	af00      	add	r7, sp, #0
 800efa2:	60f8      	str	r0, [r7, #12]
 800efa4:	60b9      	str	r1, [r7, #8]
 800efa6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800efa8:	2300      	movs	r3, #0
 800efaa:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 800efae:	68fb      	ldr	r3, [r7, #12]
 800efb0:	681b      	ldr	r3, [r3, #0]
 800efb2:	699b      	ldr	r3, [r3, #24]
 800efb4:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 800efb6:	2300      	movs	r3, #0
 800efb8:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 800efba:	687b      	ldr	r3, [r7, #4]
 800efbc:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 800efbe:	69bb      	ldr	r3, [r7, #24]
 800efc0:	f003 0310 	and.w	r3, r3, #16
 800efc4:	2b00      	cmp	r3, #0
 800efc6:	d068      	beq.n	800f09a <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800efc8:	68fb      	ldr	r3, [r7, #12]
 800efca:	681b      	ldr	r3, [r3, #0]
 800efcc:	2210      	movs	r2, #16
 800efce:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800efd0:	e049      	b.n	800f066 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800efd2:	68bb      	ldr	r3, [r7, #8]
 800efd4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800efd8:	d045      	beq.n	800f066 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800efda:	f7fc f993 	bl	800b304 <HAL_GetTick>
 800efde:	4602      	mov	r2, r0
 800efe0:	69fb      	ldr	r3, [r7, #28]
 800efe2:	1ad3      	subs	r3, r2, r3
 800efe4:	68ba      	ldr	r2, [r7, #8]
 800efe6:	429a      	cmp	r2, r3
 800efe8:	d302      	bcc.n	800eff0 <I2C_IsErrorOccurred+0x54>
 800efea:	68bb      	ldr	r3, [r7, #8]
 800efec:	2b00      	cmp	r3, #0
 800efee:	d13a      	bne.n	800f066 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 800eff0:	68fb      	ldr	r3, [r7, #12]
 800eff2:	681b      	ldr	r3, [r3, #0]
 800eff4:	685b      	ldr	r3, [r3, #4]
 800eff6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800effa:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 800effc:	68fb      	ldr	r3, [r7, #12]
 800effe:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800f002:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 800f004:	68fb      	ldr	r3, [r7, #12]
 800f006:	681b      	ldr	r3, [r3, #0]
 800f008:	699b      	ldr	r3, [r3, #24]
 800f00a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800f00e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800f012:	d121      	bne.n	800f058 <I2C_IsErrorOccurred+0xbc>
 800f014:	697b      	ldr	r3, [r7, #20]
 800f016:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800f01a:	d01d      	beq.n	800f058 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 800f01c:	7cfb      	ldrb	r3, [r7, #19]
 800f01e:	2b20      	cmp	r3, #32
 800f020:	d01a      	beq.n	800f058 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800f022:	68fb      	ldr	r3, [r7, #12]
 800f024:	681b      	ldr	r3, [r3, #0]
 800f026:	685a      	ldr	r2, [r3, #4]
 800f028:	68fb      	ldr	r3, [r7, #12]
 800f02a:	681b      	ldr	r3, [r3, #0]
 800f02c:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800f030:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 800f032:	f7fc f967 	bl	800b304 <HAL_GetTick>
 800f036:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800f038:	e00e      	b.n	800f058 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800f03a:	f7fc f963 	bl	800b304 <HAL_GetTick>
 800f03e:	4602      	mov	r2, r0
 800f040:	69fb      	ldr	r3, [r7, #28]
 800f042:	1ad3      	subs	r3, r2, r3
 800f044:	2b19      	cmp	r3, #25
 800f046:	d907      	bls.n	800f058 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 800f048:	6a3b      	ldr	r3, [r7, #32]
 800f04a:	f043 0320 	orr.w	r3, r3, #32
 800f04e:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 800f050:	2301      	movs	r3, #1
 800f052:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 800f056:	e006      	b.n	800f066 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800f058:	68fb      	ldr	r3, [r7, #12]
 800f05a:	681b      	ldr	r3, [r3, #0]
 800f05c:	699b      	ldr	r3, [r3, #24]
 800f05e:	f003 0320 	and.w	r3, r3, #32
 800f062:	2b20      	cmp	r3, #32
 800f064:	d1e9      	bne.n	800f03a <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800f066:	68fb      	ldr	r3, [r7, #12]
 800f068:	681b      	ldr	r3, [r3, #0]
 800f06a:	699b      	ldr	r3, [r3, #24]
 800f06c:	f003 0320 	and.w	r3, r3, #32
 800f070:	2b20      	cmp	r3, #32
 800f072:	d003      	beq.n	800f07c <I2C_IsErrorOccurred+0xe0>
 800f074:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800f078:	2b00      	cmp	r3, #0
 800f07a:	d0aa      	beq.n	800efd2 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 800f07c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800f080:	2b00      	cmp	r3, #0
 800f082:	d103      	bne.n	800f08c <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800f084:	68fb      	ldr	r3, [r7, #12]
 800f086:	681b      	ldr	r3, [r3, #0]
 800f088:	2220      	movs	r2, #32
 800f08a:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 800f08c:	6a3b      	ldr	r3, [r7, #32]
 800f08e:	f043 0304 	orr.w	r3, r3, #4
 800f092:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 800f094:	2301      	movs	r3, #1
 800f096:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 800f09a:	68fb      	ldr	r3, [r7, #12]
 800f09c:	681b      	ldr	r3, [r3, #0]
 800f09e:	699b      	ldr	r3, [r3, #24]
 800f0a0:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 800f0a2:	69bb      	ldr	r3, [r7, #24]
 800f0a4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800f0a8:	2b00      	cmp	r3, #0
 800f0aa:	d00b      	beq.n	800f0c4 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 800f0ac:	6a3b      	ldr	r3, [r7, #32]
 800f0ae:	f043 0301 	orr.w	r3, r3, #1
 800f0b2:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800f0b4:	68fb      	ldr	r3, [r7, #12]
 800f0b6:	681b      	ldr	r3, [r3, #0]
 800f0b8:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800f0bc:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800f0be:	2301      	movs	r3, #1
 800f0c0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 800f0c4:	69bb      	ldr	r3, [r7, #24]
 800f0c6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800f0ca:	2b00      	cmp	r3, #0
 800f0cc:	d00b      	beq.n	800f0e6 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 800f0ce:	6a3b      	ldr	r3, [r7, #32]
 800f0d0:	f043 0308 	orr.w	r3, r3, #8
 800f0d4:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800f0d6:	68fb      	ldr	r3, [r7, #12]
 800f0d8:	681b      	ldr	r3, [r3, #0]
 800f0da:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800f0de:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800f0e0:	2301      	movs	r3, #1
 800f0e2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 800f0e6:	69bb      	ldr	r3, [r7, #24]
 800f0e8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800f0ec:	2b00      	cmp	r3, #0
 800f0ee:	d00b      	beq.n	800f108 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 800f0f0:	6a3b      	ldr	r3, [r7, #32]
 800f0f2:	f043 0302 	orr.w	r3, r3, #2
 800f0f6:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800f0f8:	68fb      	ldr	r3, [r7, #12]
 800f0fa:	681b      	ldr	r3, [r3, #0]
 800f0fc:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800f100:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800f102:	2301      	movs	r3, #1
 800f104:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 800f108:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800f10c:	2b00      	cmp	r3, #0
 800f10e:	d01c      	beq.n	800f14a <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800f110:	68f8      	ldr	r0, [r7, #12]
 800f112:	f7ff fdaf 	bl	800ec74 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800f116:	68fb      	ldr	r3, [r7, #12]
 800f118:	681b      	ldr	r3, [r3, #0]
 800f11a:	6859      	ldr	r1, [r3, #4]
 800f11c:	68fb      	ldr	r3, [r7, #12]
 800f11e:	681a      	ldr	r2, [r3, #0]
 800f120:	4b0d      	ldr	r3, [pc, #52]	@ (800f158 <I2C_IsErrorOccurred+0x1bc>)
 800f122:	400b      	ands	r3, r1
 800f124:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 800f126:	68fb      	ldr	r3, [r7, #12]
 800f128:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800f12a:	6a3b      	ldr	r3, [r7, #32]
 800f12c:	431a      	orrs	r2, r3
 800f12e:	68fb      	ldr	r3, [r7, #12]
 800f130:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800f132:	68fb      	ldr	r3, [r7, #12]
 800f134:	2220      	movs	r2, #32
 800f136:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800f13a:	68fb      	ldr	r3, [r7, #12]
 800f13c:	2200      	movs	r2, #0
 800f13e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800f142:	68fb      	ldr	r3, [r7, #12]
 800f144:	2200      	movs	r2, #0
 800f146:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 800f14a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 800f14e:	4618      	mov	r0, r3
 800f150:	3728      	adds	r7, #40	@ 0x28
 800f152:	46bd      	mov	sp, r7
 800f154:	bd80      	pop	{r7, pc}
 800f156:	bf00      	nop
 800f158:	fe00e800 	.word	0xfe00e800

0800f15c <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 800f15c:	b480      	push	{r7}
 800f15e:	b087      	sub	sp, #28
 800f160:	af00      	add	r7, sp, #0
 800f162:	60f8      	str	r0, [r7, #12]
 800f164:	607b      	str	r3, [r7, #4]
 800f166:	460b      	mov	r3, r1
 800f168:	817b      	strh	r3, [r7, #10]
 800f16a:	4613      	mov	r3, r2
 800f16c:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800f16e:	897b      	ldrh	r3, [r7, #10]
 800f170:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800f174:	7a7b      	ldrb	r3, [r7, #9]
 800f176:	041b      	lsls	r3, r3, #16
 800f178:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800f17c:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800f17e:	687b      	ldr	r3, [r7, #4]
 800f180:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800f182:	6a3b      	ldr	r3, [r7, #32]
 800f184:	4313      	orrs	r3, r2
 800f186:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800f18a:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 800f18c:	68fb      	ldr	r3, [r7, #12]
 800f18e:	681b      	ldr	r3, [r3, #0]
 800f190:	685a      	ldr	r2, [r3, #4]
 800f192:	6a3b      	ldr	r3, [r7, #32]
 800f194:	0d5b      	lsrs	r3, r3, #21
 800f196:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 800f19a:	4b08      	ldr	r3, [pc, #32]	@ (800f1bc <I2C_TransferConfig+0x60>)
 800f19c:	430b      	orrs	r3, r1
 800f19e:	43db      	mvns	r3, r3
 800f1a0:	ea02 0103 	and.w	r1, r2, r3
 800f1a4:	68fb      	ldr	r3, [r7, #12]
 800f1a6:	681b      	ldr	r3, [r3, #0]
 800f1a8:	697a      	ldr	r2, [r7, #20]
 800f1aa:	430a      	orrs	r2, r1
 800f1ac:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800f1ae:	bf00      	nop
 800f1b0:	371c      	adds	r7, #28
 800f1b2:	46bd      	mov	sp, r7
 800f1b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f1b8:	4770      	bx	lr
 800f1ba:	bf00      	nop
 800f1bc:	03ff63ff 	.word	0x03ff63ff

0800f1c0 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800f1c0:	b480      	push	{r7}
 800f1c2:	b083      	sub	sp, #12
 800f1c4:	af00      	add	r7, sp, #0
 800f1c6:	6078      	str	r0, [r7, #4]
 800f1c8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800f1ca:	687b      	ldr	r3, [r7, #4]
 800f1cc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800f1d0:	b2db      	uxtb	r3, r3
 800f1d2:	2b20      	cmp	r3, #32
 800f1d4:	d138      	bne.n	800f248 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800f1d6:	687b      	ldr	r3, [r7, #4]
 800f1d8:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800f1dc:	2b01      	cmp	r3, #1
 800f1de:	d101      	bne.n	800f1e4 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800f1e0:	2302      	movs	r3, #2
 800f1e2:	e032      	b.n	800f24a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800f1e4:	687b      	ldr	r3, [r7, #4]
 800f1e6:	2201      	movs	r2, #1
 800f1e8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800f1ec:	687b      	ldr	r3, [r7, #4]
 800f1ee:	2224      	movs	r2, #36	@ 0x24
 800f1f0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800f1f4:	687b      	ldr	r3, [r7, #4]
 800f1f6:	681b      	ldr	r3, [r3, #0]
 800f1f8:	681a      	ldr	r2, [r3, #0]
 800f1fa:	687b      	ldr	r3, [r7, #4]
 800f1fc:	681b      	ldr	r3, [r3, #0]
 800f1fe:	f022 0201 	bic.w	r2, r2, #1
 800f202:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800f204:	687b      	ldr	r3, [r7, #4]
 800f206:	681b      	ldr	r3, [r3, #0]
 800f208:	681a      	ldr	r2, [r3, #0]
 800f20a:	687b      	ldr	r3, [r7, #4]
 800f20c:	681b      	ldr	r3, [r3, #0]
 800f20e:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800f212:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800f214:	687b      	ldr	r3, [r7, #4]
 800f216:	681b      	ldr	r3, [r3, #0]
 800f218:	6819      	ldr	r1, [r3, #0]
 800f21a:	687b      	ldr	r3, [r7, #4]
 800f21c:	681b      	ldr	r3, [r3, #0]
 800f21e:	683a      	ldr	r2, [r7, #0]
 800f220:	430a      	orrs	r2, r1
 800f222:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800f224:	687b      	ldr	r3, [r7, #4]
 800f226:	681b      	ldr	r3, [r3, #0]
 800f228:	681a      	ldr	r2, [r3, #0]
 800f22a:	687b      	ldr	r3, [r7, #4]
 800f22c:	681b      	ldr	r3, [r3, #0]
 800f22e:	f042 0201 	orr.w	r2, r2, #1
 800f232:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800f234:	687b      	ldr	r3, [r7, #4]
 800f236:	2220      	movs	r2, #32
 800f238:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800f23c:	687b      	ldr	r3, [r7, #4]
 800f23e:	2200      	movs	r2, #0
 800f240:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800f244:	2300      	movs	r3, #0
 800f246:	e000      	b.n	800f24a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800f248:	2302      	movs	r3, #2
  }
}
 800f24a:	4618      	mov	r0, r3
 800f24c:	370c      	adds	r7, #12
 800f24e:	46bd      	mov	sp, r7
 800f250:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f254:	4770      	bx	lr

0800f256 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800f256:	b480      	push	{r7}
 800f258:	b085      	sub	sp, #20
 800f25a:	af00      	add	r7, sp, #0
 800f25c:	6078      	str	r0, [r7, #4]
 800f25e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800f260:	687b      	ldr	r3, [r7, #4]
 800f262:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800f266:	b2db      	uxtb	r3, r3
 800f268:	2b20      	cmp	r3, #32
 800f26a:	d139      	bne.n	800f2e0 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800f26c:	687b      	ldr	r3, [r7, #4]
 800f26e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800f272:	2b01      	cmp	r3, #1
 800f274:	d101      	bne.n	800f27a <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800f276:	2302      	movs	r3, #2
 800f278:	e033      	b.n	800f2e2 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800f27a:	687b      	ldr	r3, [r7, #4]
 800f27c:	2201      	movs	r2, #1
 800f27e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800f282:	687b      	ldr	r3, [r7, #4]
 800f284:	2224      	movs	r2, #36	@ 0x24
 800f286:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800f28a:	687b      	ldr	r3, [r7, #4]
 800f28c:	681b      	ldr	r3, [r3, #0]
 800f28e:	681a      	ldr	r2, [r3, #0]
 800f290:	687b      	ldr	r3, [r7, #4]
 800f292:	681b      	ldr	r3, [r3, #0]
 800f294:	f022 0201 	bic.w	r2, r2, #1
 800f298:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800f29a:	687b      	ldr	r3, [r7, #4]
 800f29c:	681b      	ldr	r3, [r3, #0]
 800f29e:	681b      	ldr	r3, [r3, #0]
 800f2a0:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800f2a2:	68fb      	ldr	r3, [r7, #12]
 800f2a4:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 800f2a8:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800f2aa:	683b      	ldr	r3, [r7, #0]
 800f2ac:	021b      	lsls	r3, r3, #8
 800f2ae:	68fa      	ldr	r2, [r7, #12]
 800f2b0:	4313      	orrs	r3, r2
 800f2b2:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800f2b4:	687b      	ldr	r3, [r7, #4]
 800f2b6:	681b      	ldr	r3, [r3, #0]
 800f2b8:	68fa      	ldr	r2, [r7, #12]
 800f2ba:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800f2bc:	687b      	ldr	r3, [r7, #4]
 800f2be:	681b      	ldr	r3, [r3, #0]
 800f2c0:	681a      	ldr	r2, [r3, #0]
 800f2c2:	687b      	ldr	r3, [r7, #4]
 800f2c4:	681b      	ldr	r3, [r3, #0]
 800f2c6:	f042 0201 	orr.w	r2, r2, #1
 800f2ca:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800f2cc:	687b      	ldr	r3, [r7, #4]
 800f2ce:	2220      	movs	r2, #32
 800f2d0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800f2d4:	687b      	ldr	r3, [r7, #4]
 800f2d6:	2200      	movs	r2, #0
 800f2d8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800f2dc:	2300      	movs	r3, #0
 800f2de:	e000      	b.n	800f2e2 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800f2e0:	2302      	movs	r3, #2
  }
}
 800f2e2:	4618      	mov	r0, r3
 800f2e4:	3714      	adds	r7, #20
 800f2e6:	46bd      	mov	sp, r7
 800f2e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f2ec:	4770      	bx	lr
	...

0800f2f0 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 800f2f0:	b480      	push	{r7}
 800f2f2:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 800f2f4:	4b04      	ldr	r3, [pc, #16]	@ (800f308 <HAL_PWREx_GetVoltageRange+0x18>)
 800f2f6:	681b      	ldr	r3, [r3, #0]
 800f2f8:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 800f2fc:	4618      	mov	r0, r3
 800f2fe:	46bd      	mov	sp, r7
 800f300:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f304:	4770      	bx	lr
 800f306:	bf00      	nop
 800f308:	40007000 	.word	0x40007000

0800f30c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800f30c:	b480      	push	{r7}
 800f30e:	b085      	sub	sp, #20
 800f310:	af00      	add	r7, sp, #0
 800f312:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800f314:	687b      	ldr	r3, [r7, #4]
 800f316:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800f31a:	d130      	bne.n	800f37e <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 800f31c:	4b23      	ldr	r3, [pc, #140]	@ (800f3ac <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800f31e:	681b      	ldr	r3, [r3, #0]
 800f320:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800f324:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800f328:	d038      	beq.n	800f39c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800f32a:	4b20      	ldr	r3, [pc, #128]	@ (800f3ac <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800f32c:	681b      	ldr	r3, [r3, #0]
 800f32e:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800f332:	4a1e      	ldr	r2, [pc, #120]	@ (800f3ac <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800f334:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800f338:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800f33a:	4b1d      	ldr	r3, [pc, #116]	@ (800f3b0 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 800f33c:	681b      	ldr	r3, [r3, #0]
 800f33e:	2232      	movs	r2, #50	@ 0x32
 800f340:	fb02 f303 	mul.w	r3, r2, r3
 800f344:	4a1b      	ldr	r2, [pc, #108]	@ (800f3b4 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800f346:	fba2 2303 	umull	r2, r3, r2, r3
 800f34a:	0c9b      	lsrs	r3, r3, #18
 800f34c:	3301      	adds	r3, #1
 800f34e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800f350:	e002      	b.n	800f358 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800f352:	68fb      	ldr	r3, [r7, #12]
 800f354:	3b01      	subs	r3, #1
 800f356:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800f358:	4b14      	ldr	r3, [pc, #80]	@ (800f3ac <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800f35a:	695b      	ldr	r3, [r3, #20]
 800f35c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800f360:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800f364:	d102      	bne.n	800f36c <HAL_PWREx_ControlVoltageScaling+0x60>
 800f366:	68fb      	ldr	r3, [r7, #12]
 800f368:	2b00      	cmp	r3, #0
 800f36a:	d1f2      	bne.n	800f352 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800f36c:	4b0f      	ldr	r3, [pc, #60]	@ (800f3ac <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800f36e:	695b      	ldr	r3, [r3, #20]
 800f370:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800f374:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800f378:	d110      	bne.n	800f39c <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800f37a:	2303      	movs	r3, #3
 800f37c:	e00f      	b.n	800f39e <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800f37e:	4b0b      	ldr	r3, [pc, #44]	@ (800f3ac <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800f380:	681b      	ldr	r3, [r3, #0]
 800f382:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800f386:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800f38a:	d007      	beq.n	800f39c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800f38c:	4b07      	ldr	r3, [pc, #28]	@ (800f3ac <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800f38e:	681b      	ldr	r3, [r3, #0]
 800f390:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800f394:	4a05      	ldr	r2, [pc, #20]	@ (800f3ac <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800f396:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800f39a:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 800f39c:	2300      	movs	r3, #0
}
 800f39e:	4618      	mov	r0, r3
 800f3a0:	3714      	adds	r7, #20
 800f3a2:	46bd      	mov	sp, r7
 800f3a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f3a8:	4770      	bx	lr
 800f3aa:	bf00      	nop
 800f3ac:	40007000 	.word	0x40007000
 800f3b0:	20000000 	.word	0x20000000
 800f3b4:	431bde83 	.word	0x431bde83

0800f3b8 <HAL_QSPI_Init>:
  *        in the QSPI_InitTypeDef and initialize the associated handle.
  * @param hqspi QSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Init(QSPI_HandleTypeDef *hqspi)
{
 800f3b8:	b580      	push	{r7, lr}
 800f3ba:	b086      	sub	sp, #24
 800f3bc:	af02      	add	r7, sp, #8
 800f3be:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 800f3c0:	f7fb ffa0 	bl	800b304 <HAL_GetTick>
 800f3c4:	60f8      	str	r0, [r7, #12]

  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 800f3c6:	687b      	ldr	r3, [r7, #4]
 800f3c8:	2b00      	cmp	r3, #0
 800f3ca:	d101      	bne.n	800f3d0 <HAL_QSPI_Init+0x18>
  {
    return HAL_ERROR;
 800f3cc:	2301      	movs	r3, #1
 800f3ce:	e063      	b.n	800f498 <HAL_QSPI_Init+0xe0>
  {
    assert_param(IS_QSPI_FLASH_ID(hqspi->Init.FlashID));
  }
#endif

  if(hqspi->State == HAL_QSPI_STATE_RESET)
 800f3d0:	687b      	ldr	r3, [r7, #4]
 800f3d2:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 800f3d6:	b2db      	uxtb	r3, r3
 800f3d8:	2b00      	cmp	r3, #0
 800f3da:	d10b      	bne.n	800f3f4 <HAL_QSPI_Init+0x3c>
  {
    /* Allocate lock resource and initialize it */
    hqspi->Lock = HAL_UNLOCKED;
 800f3dc:	687b      	ldr	r3, [r7, #4]
 800f3de:	2200      	movs	r2, #0
 800f3e0:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

    /* Init the low level hardware */
    hqspi->MspInitCallback(hqspi);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_QSPI_MspInit(hqspi);
 800f3e4:	6878      	ldr	r0, [r7, #4]
 800f3e6:	f7f8 fac7 	bl	8007978 <HAL_QSPI_MspInit>
#endif

    /* Configure the default timeout for the QSPI memory access */
    HAL_QSPI_SetTimeout(hqspi, HAL_QSPI_TIMEOUT_DEFAULT_VALUE);
 800f3ea:	f241 3188 	movw	r1, #5000	@ 0x1388
 800f3ee:	6878      	ldr	r0, [r7, #4]
 800f3f0:	f000 fa68 	bl	800f8c4 <HAL_QSPI_SetTimeout>
  }

  /* Configure QSPI FIFO Threshold */
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 800f3f4:	687b      	ldr	r3, [r7, #4]
 800f3f6:	681b      	ldr	r3, [r3, #0]
 800f3f8:	681b      	ldr	r3, [r3, #0]
 800f3fa:	f423 6170 	bic.w	r1, r3, #3840	@ 0xf00
 800f3fe:	687b      	ldr	r3, [r7, #4]
 800f400:	689b      	ldr	r3, [r3, #8]
 800f402:	3b01      	subs	r3, #1
 800f404:	021a      	lsls	r2, r3, #8
 800f406:	687b      	ldr	r3, [r7, #4]
 800f408:	681b      	ldr	r3, [r3, #0]
 800f40a:	430a      	orrs	r2, r1
 800f40c:	601a      	str	r2, [r3, #0]
             ((hqspi->Init.FifoThreshold - 1U) << QUADSPI_CR_FTHRES_Pos));

  /* Wait till BUSY flag reset */
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 800f40e:	687b      	ldr	r3, [r7, #4]
 800f410:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800f412:	9300      	str	r3, [sp, #0]
 800f414:	68fb      	ldr	r3, [r7, #12]
 800f416:	2200      	movs	r2, #0
 800f418:	2120      	movs	r1, #32
 800f41a:	6878      	ldr	r0, [r7, #4]
 800f41c:	f000 fa60 	bl	800f8e0 <QSPI_WaitFlagStateUntilTimeout>
 800f420:	4603      	mov	r3, r0
 800f422:	72fb      	strb	r3, [r7, #11]

  if(status == HAL_OK)
 800f424:	7afb      	ldrb	r3, [r7, #11]
 800f426:	2b00      	cmp	r3, #0
 800f428:	d131      	bne.n	800f48e <HAL_QSPI_Init+0xd6>
#if defined(QUADSPI_CR_DFM)
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM),
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting  | hqspi->Init.FlashID | hqspi->Init.DualFlash));
#else
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT),
 800f42a:	687b      	ldr	r3, [r7, #4]
 800f42c:	681b      	ldr	r3, [r3, #0]
 800f42e:	681b      	ldr	r3, [r3, #0]
 800f430:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 800f434:	f023 0310 	bic.w	r3, r3, #16
 800f438:	687a      	ldr	r2, [r7, #4]
 800f43a:	6852      	ldr	r2, [r2, #4]
 800f43c:	0611      	lsls	r1, r2, #24
 800f43e:	687a      	ldr	r2, [r7, #4]
 800f440:	68d2      	ldr	r2, [r2, #12]
 800f442:	4311      	orrs	r1, r2
 800f444:	687a      	ldr	r2, [r7, #4]
 800f446:	6812      	ldr	r2, [r2, #0]
 800f448:	430b      	orrs	r3, r1
 800f44a:	6013      	str	r3, [r2, #0]
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting));
#endif

    /* Configure QSPI Flash Size, CS High Time and Clock Mode */
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
 800f44c:	687b      	ldr	r3, [r7, #4]
 800f44e:	681b      	ldr	r3, [r3, #0]
 800f450:	685a      	ldr	r2, [r3, #4]
 800f452:	4b13      	ldr	r3, [pc, #76]	@ (800f4a0 <HAL_QSPI_Init+0xe8>)
 800f454:	4013      	ands	r3, r2
 800f456:	687a      	ldr	r2, [r7, #4]
 800f458:	6912      	ldr	r2, [r2, #16]
 800f45a:	0411      	lsls	r1, r2, #16
 800f45c:	687a      	ldr	r2, [r7, #4]
 800f45e:	6952      	ldr	r2, [r2, #20]
 800f460:	4311      	orrs	r1, r2
 800f462:	687a      	ldr	r2, [r7, #4]
 800f464:	6992      	ldr	r2, [r2, #24]
 800f466:	4311      	orrs	r1, r2
 800f468:	687a      	ldr	r2, [r7, #4]
 800f46a:	6812      	ldr	r2, [r2, #0]
 800f46c:	430b      	orrs	r3, r1
 800f46e:	6053      	str	r3, [r2, #4]
               ((hqspi->Init.FlashSize << QUADSPI_DCR_FSIZE_Pos) |
                hqspi->Init.ChipSelectHighTime | hqspi->Init.ClockMode));

    /* Enable the QSPI peripheral */
    __HAL_QSPI_ENABLE(hqspi);
 800f470:	687b      	ldr	r3, [r7, #4]
 800f472:	681b      	ldr	r3, [r3, #0]
 800f474:	681a      	ldr	r2, [r3, #0]
 800f476:	687b      	ldr	r3, [r7, #4]
 800f478:	681b      	ldr	r3, [r3, #0]
 800f47a:	f042 0201 	orr.w	r2, r2, #1
 800f47e:	601a      	str	r2, [r3, #0]

    /* Set QSPI error code to none */
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 800f480:	687b      	ldr	r3, [r7, #4]
 800f482:	2200      	movs	r2, #0
 800f484:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Initialize the QSPI state */
    hqspi->State = HAL_QSPI_STATE_READY;
 800f486:	687b      	ldr	r3, [r7, #4]
 800f488:	2201      	movs	r2, #1
 800f48a:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
  }

  /* Release Lock */
  __HAL_UNLOCK(hqspi);
 800f48e:	687b      	ldr	r3, [r7, #4]
 800f490:	2200      	movs	r2, #0
 800f492:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  /* Return function status */
  return status;
 800f496:	7afb      	ldrb	r3, [r7, #11]
}
 800f498:	4618      	mov	r0, r3
 800f49a:	3710      	adds	r7, #16
 800f49c:	46bd      	mov	sp, r7
 800f49e:	bd80      	pop	{r7, pc}
 800f4a0:	ffe0f8fe 	.word	0xffe0f8fe

0800f4a4 <HAL_QSPI_Command>:
  * @param Timeout Timeout duration
  * @note   This function is used only in Indirect Read or Write Modes
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Command(QSPI_HandleTypeDef *hqspi, QSPI_CommandTypeDef *cmd, uint32_t Timeout)
{
 800f4a4:	b580      	push	{r7, lr}
 800f4a6:	b088      	sub	sp, #32
 800f4a8:	af02      	add	r7, sp, #8
 800f4aa:	60f8      	str	r0, [r7, #12]
 800f4ac:	60b9      	str	r1, [r7, #8]
 800f4ae:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 800f4b0:	f7fb ff28 	bl	800b304 <HAL_GetTick>
 800f4b4:	6138      	str	r0, [r7, #16]
  assert_param(IS_QSPI_DDR_MODE(cmd->DdrMode));
  assert_param(IS_QSPI_DDR_HHC(cmd->DdrHoldHalfCycle));
  assert_param(IS_QSPI_SIOO_MODE(cmd->SIOOMode));

  /* Process locked */
  __HAL_LOCK(hqspi);
 800f4b6:	68fb      	ldr	r3, [r7, #12]
 800f4b8:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800f4bc:	b2db      	uxtb	r3, r3
 800f4be:	2b01      	cmp	r3, #1
 800f4c0:	d101      	bne.n	800f4c6 <HAL_QSPI_Command+0x22>
 800f4c2:	2302      	movs	r3, #2
 800f4c4:	e048      	b.n	800f558 <HAL_QSPI_Command+0xb4>
 800f4c6:	68fb      	ldr	r3, [r7, #12]
 800f4c8:	2201      	movs	r2, #1
 800f4ca:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  if(hqspi->State == HAL_QSPI_STATE_READY)
 800f4ce:	68fb      	ldr	r3, [r7, #12]
 800f4d0:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 800f4d4:	b2db      	uxtb	r3, r3
 800f4d6:	2b01      	cmp	r3, #1
 800f4d8:	d137      	bne.n	800f54a <HAL_QSPI_Command+0xa6>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 800f4da:	68fb      	ldr	r3, [r7, #12]
 800f4dc:	2200      	movs	r2, #0
 800f4de:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Update QSPI state */
    hqspi->State = HAL_QSPI_STATE_BUSY;
 800f4e0:	68fb      	ldr	r3, [r7, #12]
 800f4e2:	2202      	movs	r2, #2
 800f4e4:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

    /* Wait till BUSY flag reset */
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 800f4e8:	687b      	ldr	r3, [r7, #4]
 800f4ea:	9300      	str	r3, [sp, #0]
 800f4ec:	693b      	ldr	r3, [r7, #16]
 800f4ee:	2200      	movs	r2, #0
 800f4f0:	2120      	movs	r1, #32
 800f4f2:	68f8      	ldr	r0, [r7, #12]
 800f4f4:	f000 f9f4 	bl	800f8e0 <QSPI_WaitFlagStateUntilTimeout>
 800f4f8:	4603      	mov	r3, r0
 800f4fa:	75fb      	strb	r3, [r7, #23]

    if (status == HAL_OK)
 800f4fc:	7dfb      	ldrb	r3, [r7, #23]
 800f4fe:	2b00      	cmp	r3, #0
 800f500:	d125      	bne.n	800f54e <HAL_QSPI_Command+0xaa>
    {
      /* Call the configuration function */
      QSPI_Config(hqspi, cmd, QSPI_FUNCTIONAL_MODE_INDIRECT_WRITE);
 800f502:	2200      	movs	r2, #0
 800f504:	68b9      	ldr	r1, [r7, #8]
 800f506:	68f8      	ldr	r0, [r7, #12]
 800f508:	f000 fa21 	bl	800f94e <QSPI_Config>

      if (cmd->DataMode == QSPI_DATA_NONE)
 800f50c:	68bb      	ldr	r3, [r7, #8]
 800f50e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f510:	2b00      	cmp	r3, #0
 800f512:	d115      	bne.n	800f540 <HAL_QSPI_Command+0x9c>
      {
        /* When there is no data phase, the transfer start as soon as the configuration is done
        so wait until TC flag is set to go back in idle state */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, Timeout);
 800f514:	687b      	ldr	r3, [r7, #4]
 800f516:	9300      	str	r3, [sp, #0]
 800f518:	693b      	ldr	r3, [r7, #16]
 800f51a:	2201      	movs	r2, #1
 800f51c:	2102      	movs	r1, #2
 800f51e:	68f8      	ldr	r0, [r7, #12]
 800f520:	f000 f9de 	bl	800f8e0 <QSPI_WaitFlagStateUntilTimeout>
 800f524:	4603      	mov	r3, r0
 800f526:	75fb      	strb	r3, [r7, #23]

        if (status == HAL_OK)
 800f528:	7dfb      	ldrb	r3, [r7, #23]
 800f52a:	2b00      	cmp	r3, #0
 800f52c:	d10f      	bne.n	800f54e <HAL_QSPI_Command+0xaa>
        {
          __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 800f52e:	68fb      	ldr	r3, [r7, #12]
 800f530:	681b      	ldr	r3, [r3, #0]
 800f532:	2202      	movs	r2, #2
 800f534:	60da      	str	r2, [r3, #12]

          /* Update QSPI state */
          hqspi->State = HAL_QSPI_STATE_READY;
 800f536:	68fb      	ldr	r3, [r7, #12]
 800f538:	2201      	movs	r2, #1
 800f53a:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
 800f53e:	e006      	b.n	800f54e <HAL_QSPI_Command+0xaa>
        }
      }
      else
      {
        /* Update QSPI state */
        hqspi->State = HAL_QSPI_STATE_READY;
 800f540:	68fb      	ldr	r3, [r7, #12]
 800f542:	2201      	movs	r2, #1
 800f544:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
 800f548:	e001      	b.n	800f54e <HAL_QSPI_Command+0xaa>
      }
    }
  }
  else
  {
    status = HAL_BUSY;
 800f54a:	2302      	movs	r3, #2
 800f54c:	75fb      	strb	r3, [r7, #23]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hqspi);
 800f54e:	68fb      	ldr	r3, [r7, #12]
 800f550:	2200      	movs	r2, #0
 800f552:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  /* Return function status */
  return status;
 800f556:	7dfb      	ldrb	r3, [r7, #23]
}
 800f558:	4618      	mov	r0, r3
 800f55a:	3718      	adds	r7, #24
 800f55c:	46bd      	mov	sp, r7
 800f55e:	bd80      	pop	{r7, pc}

0800f560 <HAL_QSPI_Transmit>:
  * @param Timeout Timeout duration
  * @note   This function is used only in Indirect Write Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Transmit(QSPI_HandleTypeDef *hqspi, uint8_t *pData, uint32_t Timeout)
{
 800f560:	b580      	push	{r7, lr}
 800f562:	b08a      	sub	sp, #40	@ 0x28
 800f564:	af02      	add	r7, sp, #8
 800f566:	60f8      	str	r0, [r7, #12]
 800f568:	60b9      	str	r1, [r7, #8]
 800f56a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800f56c:	2300      	movs	r3, #0
 800f56e:	77fb      	strb	r3, [r7, #31]
  uint32_t tickstart = HAL_GetTick();
 800f570:	f7fb fec8 	bl	800b304 <HAL_GetTick>
 800f574:	61b8      	str	r0, [r7, #24]
  __IO uint32_t *data_reg = &hqspi->Instance->DR;
 800f576:	68fb      	ldr	r3, [r7, #12]
 800f578:	681b      	ldr	r3, [r3, #0]
 800f57a:	3320      	adds	r3, #32
 800f57c:	617b      	str	r3, [r7, #20]

  /* Process locked */
  __HAL_LOCK(hqspi);
 800f57e:	68fb      	ldr	r3, [r7, #12]
 800f580:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800f584:	b2db      	uxtb	r3, r3
 800f586:	2b01      	cmp	r3, #1
 800f588:	d101      	bne.n	800f58e <HAL_QSPI_Transmit+0x2e>
 800f58a:	2302      	movs	r3, #2
 800f58c:	e07b      	b.n	800f686 <HAL_QSPI_Transmit+0x126>
 800f58e:	68fb      	ldr	r3, [r7, #12]
 800f590:	2201      	movs	r2, #1
 800f592:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  if(hqspi->State == HAL_QSPI_STATE_READY)
 800f596:	68fb      	ldr	r3, [r7, #12]
 800f598:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 800f59c:	b2db      	uxtb	r3, r3
 800f59e:	2b01      	cmp	r3, #1
 800f5a0:	d16a      	bne.n	800f678 <HAL_QSPI_Transmit+0x118>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 800f5a2:	68fb      	ldr	r3, [r7, #12]
 800f5a4:	2200      	movs	r2, #0
 800f5a6:	63da      	str	r2, [r3, #60]	@ 0x3c

    if(pData != NULL )
 800f5a8:	68bb      	ldr	r3, [r7, #8]
 800f5aa:	2b00      	cmp	r3, #0
 800f5ac:	d05b      	beq.n	800f666 <HAL_QSPI_Transmit+0x106>
    {
      /* Update state */
      hqspi->State = HAL_QSPI_STATE_BUSY_INDIRECT_TX;
 800f5ae:	68fb      	ldr	r3, [r7, #12]
 800f5b0:	2212      	movs	r2, #18
 800f5b2:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

      /* Configure counters and size of the handle */
      hqspi->TxXferCount = READ_REG(hqspi->Instance->DLR) + 1U;
 800f5b6:	68fb      	ldr	r3, [r7, #12]
 800f5b8:	681b      	ldr	r3, [r3, #0]
 800f5ba:	691b      	ldr	r3, [r3, #16]
 800f5bc:	1c5a      	adds	r2, r3, #1
 800f5be:	68fb      	ldr	r3, [r7, #12]
 800f5c0:	625a      	str	r2, [r3, #36]	@ 0x24
      hqspi->TxXferSize = READ_REG(hqspi->Instance->DLR) + 1U;
 800f5c2:	68fb      	ldr	r3, [r7, #12]
 800f5c4:	681b      	ldr	r3, [r3, #0]
 800f5c6:	691b      	ldr	r3, [r3, #16]
 800f5c8:	1c5a      	adds	r2, r3, #1
 800f5ca:	68fb      	ldr	r3, [r7, #12]
 800f5cc:	621a      	str	r2, [r3, #32]
      hqspi->pTxBuffPtr = pData;
 800f5ce:	68fb      	ldr	r3, [r7, #12]
 800f5d0:	68ba      	ldr	r2, [r7, #8]
 800f5d2:	61da      	str	r2, [r3, #28]

      /* Configure QSPI: CCR register with functional as indirect write */
      MODIFY_REG(hqspi->Instance->CCR, QUADSPI_CCR_FMODE, QSPI_FUNCTIONAL_MODE_INDIRECT_WRITE);
 800f5d4:	68fb      	ldr	r3, [r7, #12]
 800f5d6:	681b      	ldr	r3, [r3, #0]
 800f5d8:	695a      	ldr	r2, [r3, #20]
 800f5da:	68fb      	ldr	r3, [r7, #12]
 800f5dc:	681b      	ldr	r3, [r3, #0]
 800f5de:	f022 6240 	bic.w	r2, r2, #201326592	@ 0xc000000
 800f5e2:	615a      	str	r2, [r3, #20]

      while(hqspi->TxXferCount > 0U)
 800f5e4:	e01b      	b.n	800f61e <HAL_QSPI_Transmit+0xbe>
      {
        /* Wait until FT flag is set to send data */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_FT, SET, tickstart, Timeout);
 800f5e6:	687b      	ldr	r3, [r7, #4]
 800f5e8:	9300      	str	r3, [sp, #0]
 800f5ea:	69bb      	ldr	r3, [r7, #24]
 800f5ec:	2201      	movs	r2, #1
 800f5ee:	2104      	movs	r1, #4
 800f5f0:	68f8      	ldr	r0, [r7, #12]
 800f5f2:	f000 f975 	bl	800f8e0 <QSPI_WaitFlagStateUntilTimeout>
 800f5f6:	4603      	mov	r3, r0
 800f5f8:	77fb      	strb	r3, [r7, #31]

        if (status != HAL_OK)
 800f5fa:	7ffb      	ldrb	r3, [r7, #31]
 800f5fc:	2b00      	cmp	r3, #0
 800f5fe:	d113      	bne.n	800f628 <HAL_QSPI_Transmit+0xc8>
        {
          break;
        }

        *((__IO uint8_t *)data_reg) = *hqspi->pTxBuffPtr;
 800f600:	68fb      	ldr	r3, [r7, #12]
 800f602:	69db      	ldr	r3, [r3, #28]
 800f604:	781a      	ldrb	r2, [r3, #0]
 800f606:	697b      	ldr	r3, [r7, #20]
 800f608:	701a      	strb	r2, [r3, #0]
        hqspi->pTxBuffPtr++;
 800f60a:	68fb      	ldr	r3, [r7, #12]
 800f60c:	69db      	ldr	r3, [r3, #28]
 800f60e:	1c5a      	adds	r2, r3, #1
 800f610:	68fb      	ldr	r3, [r7, #12]
 800f612:	61da      	str	r2, [r3, #28]
        hqspi->TxXferCount--;
 800f614:	68fb      	ldr	r3, [r7, #12]
 800f616:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f618:	1e5a      	subs	r2, r3, #1
 800f61a:	68fb      	ldr	r3, [r7, #12]
 800f61c:	625a      	str	r2, [r3, #36]	@ 0x24
      while(hqspi->TxXferCount > 0U)
 800f61e:	68fb      	ldr	r3, [r7, #12]
 800f620:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f622:	2b00      	cmp	r3, #0
 800f624:	d1df      	bne.n	800f5e6 <HAL_QSPI_Transmit+0x86>
 800f626:	e000      	b.n	800f62a <HAL_QSPI_Transmit+0xca>
          break;
 800f628:	bf00      	nop
      }

      if (status == HAL_OK)
 800f62a:	7ffb      	ldrb	r3, [r7, #31]
 800f62c:	2b00      	cmp	r3, #0
 800f62e:	d115      	bne.n	800f65c <HAL_QSPI_Transmit+0xfc>
      {
        /* Wait until TC flag is set to go back in idle state */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, Timeout);
 800f630:	687b      	ldr	r3, [r7, #4]
 800f632:	9300      	str	r3, [sp, #0]
 800f634:	69bb      	ldr	r3, [r7, #24]
 800f636:	2201      	movs	r2, #1
 800f638:	2102      	movs	r1, #2
 800f63a:	68f8      	ldr	r0, [r7, #12]
 800f63c:	f000 f950 	bl	800f8e0 <QSPI_WaitFlagStateUntilTimeout>
 800f640:	4603      	mov	r3, r0
 800f642:	77fb      	strb	r3, [r7, #31]

        if (status == HAL_OK)
 800f644:	7ffb      	ldrb	r3, [r7, #31]
 800f646:	2b00      	cmp	r3, #0
 800f648:	d108      	bne.n	800f65c <HAL_QSPI_Transmit+0xfc>
        {
          /* Clear Transfer Complete bit */
          __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 800f64a:	68fb      	ldr	r3, [r7, #12]
 800f64c:	681b      	ldr	r3, [r3, #0]
 800f64e:	2202      	movs	r2, #2
 800f650:	60da      	str	r2, [r3, #12]

#if  (defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx))
          /* Clear Busy bit */
          status = HAL_QSPI_Abort(hqspi);
 800f652:	68f8      	ldr	r0, [r7, #12]
 800f654:	f000 f8bd 	bl	800f7d2 <HAL_QSPI_Abort>
 800f658:	4603      	mov	r3, r0
 800f65a:	77fb      	strb	r3, [r7, #31]
#endif
        }
      }

      /* Update QSPI state */
      hqspi->State = HAL_QSPI_STATE_READY;
 800f65c:	68fb      	ldr	r3, [r7, #12]
 800f65e:	2201      	movs	r2, #1
 800f660:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
 800f664:	e00a      	b.n	800f67c <HAL_QSPI_Transmit+0x11c>
    }
    else
    {
      hqspi->ErrorCode |= HAL_QSPI_ERROR_INVALID_PARAM;
 800f666:	68fb      	ldr	r3, [r7, #12]
 800f668:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800f66a:	f043 0208 	orr.w	r2, r3, #8
 800f66e:	68fb      	ldr	r3, [r7, #12]
 800f670:	63da      	str	r2, [r3, #60]	@ 0x3c
      status = HAL_ERROR;
 800f672:	2301      	movs	r3, #1
 800f674:	77fb      	strb	r3, [r7, #31]
 800f676:	e001      	b.n	800f67c <HAL_QSPI_Transmit+0x11c>
    }
  }
  else
  {
    status = HAL_BUSY;
 800f678:	2302      	movs	r3, #2
 800f67a:	77fb      	strb	r3, [r7, #31]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hqspi);
 800f67c:	68fb      	ldr	r3, [r7, #12]
 800f67e:	2200      	movs	r2, #0
 800f680:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  return status;
 800f684:	7ffb      	ldrb	r3, [r7, #31]
}
 800f686:	4618      	mov	r0, r3
 800f688:	3720      	adds	r7, #32
 800f68a:	46bd      	mov	sp, r7
 800f68c:	bd80      	pop	{r7, pc}

0800f68e <HAL_QSPI_Receive>:
  * @param Timeout Timeout duration
  * @note   This function is used only in Indirect Read Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Receive(QSPI_HandleTypeDef *hqspi, uint8_t *pData, uint32_t Timeout)
{
 800f68e:	b580      	push	{r7, lr}
 800f690:	b08a      	sub	sp, #40	@ 0x28
 800f692:	af02      	add	r7, sp, #8
 800f694:	60f8      	str	r0, [r7, #12]
 800f696:	60b9      	str	r1, [r7, #8]
 800f698:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800f69a:	2300      	movs	r3, #0
 800f69c:	77fb      	strb	r3, [r7, #31]
  uint32_t tickstart = HAL_GetTick();
 800f69e:	f7fb fe31 	bl	800b304 <HAL_GetTick>
 800f6a2:	61b8      	str	r0, [r7, #24]
  uint32_t addr_reg = READ_REG(hqspi->Instance->AR);
 800f6a4:	68fb      	ldr	r3, [r7, #12]
 800f6a6:	681b      	ldr	r3, [r3, #0]
 800f6a8:	699b      	ldr	r3, [r3, #24]
 800f6aa:	617b      	str	r3, [r7, #20]
  __IO uint32_t *data_reg = &hqspi->Instance->DR;
 800f6ac:	68fb      	ldr	r3, [r7, #12]
 800f6ae:	681b      	ldr	r3, [r3, #0]
 800f6b0:	3320      	adds	r3, #32
 800f6b2:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hqspi);
 800f6b4:	68fb      	ldr	r3, [r7, #12]
 800f6b6:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800f6ba:	b2db      	uxtb	r3, r3
 800f6bc:	2b01      	cmp	r3, #1
 800f6be:	d101      	bne.n	800f6c4 <HAL_QSPI_Receive+0x36>
 800f6c0:	2302      	movs	r3, #2
 800f6c2:	e082      	b.n	800f7ca <HAL_QSPI_Receive+0x13c>
 800f6c4:	68fb      	ldr	r3, [r7, #12]
 800f6c6:	2201      	movs	r2, #1
 800f6c8:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  if(hqspi->State == HAL_QSPI_STATE_READY)
 800f6cc:	68fb      	ldr	r3, [r7, #12]
 800f6ce:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 800f6d2:	b2db      	uxtb	r3, r3
 800f6d4:	2b01      	cmp	r3, #1
 800f6d6:	d171      	bne.n	800f7bc <HAL_QSPI_Receive+0x12e>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 800f6d8:	68fb      	ldr	r3, [r7, #12]
 800f6da:	2200      	movs	r2, #0
 800f6dc:	63da      	str	r2, [r3, #60]	@ 0x3c

    if(pData != NULL )
 800f6de:	68bb      	ldr	r3, [r7, #8]
 800f6e0:	2b00      	cmp	r3, #0
 800f6e2:	d062      	beq.n	800f7aa <HAL_QSPI_Receive+0x11c>
    {
      /* Update state */
      hqspi->State = HAL_QSPI_STATE_BUSY_INDIRECT_RX;
 800f6e4:	68fb      	ldr	r3, [r7, #12]
 800f6e6:	2222      	movs	r2, #34	@ 0x22
 800f6e8:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

      /* Configure counters and size of the handle */
      hqspi->RxXferCount = READ_REG(hqspi->Instance->DLR) + 1U;
 800f6ec:	68fb      	ldr	r3, [r7, #12]
 800f6ee:	681b      	ldr	r3, [r3, #0]
 800f6f0:	691b      	ldr	r3, [r3, #16]
 800f6f2:	1c5a      	adds	r2, r3, #1
 800f6f4:	68fb      	ldr	r3, [r7, #12]
 800f6f6:	631a      	str	r2, [r3, #48]	@ 0x30
      hqspi->RxXferSize = READ_REG(hqspi->Instance->DLR) + 1U;
 800f6f8:	68fb      	ldr	r3, [r7, #12]
 800f6fa:	681b      	ldr	r3, [r3, #0]
 800f6fc:	691b      	ldr	r3, [r3, #16]
 800f6fe:	1c5a      	adds	r2, r3, #1
 800f700:	68fb      	ldr	r3, [r7, #12]
 800f702:	62da      	str	r2, [r3, #44]	@ 0x2c
      hqspi->pRxBuffPtr = pData;
 800f704:	68fb      	ldr	r3, [r7, #12]
 800f706:	68ba      	ldr	r2, [r7, #8]
 800f708:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Configure QSPI: CCR register with functional as indirect read */
      MODIFY_REG(hqspi->Instance->CCR, QUADSPI_CCR_FMODE, QSPI_FUNCTIONAL_MODE_INDIRECT_READ);
 800f70a:	68fb      	ldr	r3, [r7, #12]
 800f70c:	681b      	ldr	r3, [r3, #0]
 800f70e:	695b      	ldr	r3, [r3, #20]
 800f710:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800f714:	68fb      	ldr	r3, [r7, #12]
 800f716:	681b      	ldr	r3, [r3, #0]
 800f718:	f042 6280 	orr.w	r2, r2, #67108864	@ 0x4000000
 800f71c:	615a      	str	r2, [r3, #20]

      /* Start the transfer by re-writing the address in AR register */
      WRITE_REG(hqspi->Instance->AR, addr_reg);
 800f71e:	68fb      	ldr	r3, [r7, #12]
 800f720:	681b      	ldr	r3, [r3, #0]
 800f722:	697a      	ldr	r2, [r7, #20]
 800f724:	619a      	str	r2, [r3, #24]

      while(hqspi->RxXferCount > 0U)
 800f726:	e01c      	b.n	800f762 <HAL_QSPI_Receive+0xd4>
      {
        /* Wait until FT or TC flag is set to read received data */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, (QSPI_FLAG_FT | QSPI_FLAG_TC), SET, tickstart, Timeout);
 800f728:	687b      	ldr	r3, [r7, #4]
 800f72a:	9300      	str	r3, [sp, #0]
 800f72c:	69bb      	ldr	r3, [r7, #24]
 800f72e:	2201      	movs	r2, #1
 800f730:	2106      	movs	r1, #6
 800f732:	68f8      	ldr	r0, [r7, #12]
 800f734:	f000 f8d4 	bl	800f8e0 <QSPI_WaitFlagStateUntilTimeout>
 800f738:	4603      	mov	r3, r0
 800f73a:	77fb      	strb	r3, [r7, #31]

        if  (status != HAL_OK)
 800f73c:	7ffb      	ldrb	r3, [r7, #31]
 800f73e:	2b00      	cmp	r3, #0
 800f740:	d114      	bne.n	800f76c <HAL_QSPI_Receive+0xde>
        {
          break;
        }

        *hqspi->pRxBuffPtr = *((__IO uint8_t *)data_reg);
 800f742:	68fb      	ldr	r3, [r7, #12]
 800f744:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f746:	693a      	ldr	r2, [r7, #16]
 800f748:	7812      	ldrb	r2, [r2, #0]
 800f74a:	b2d2      	uxtb	r2, r2
 800f74c:	701a      	strb	r2, [r3, #0]
        hqspi->pRxBuffPtr++;
 800f74e:	68fb      	ldr	r3, [r7, #12]
 800f750:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f752:	1c5a      	adds	r2, r3, #1
 800f754:	68fb      	ldr	r3, [r7, #12]
 800f756:	629a      	str	r2, [r3, #40]	@ 0x28
        hqspi->RxXferCount--;
 800f758:	68fb      	ldr	r3, [r7, #12]
 800f75a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800f75c:	1e5a      	subs	r2, r3, #1
 800f75e:	68fb      	ldr	r3, [r7, #12]
 800f760:	631a      	str	r2, [r3, #48]	@ 0x30
      while(hqspi->RxXferCount > 0U)
 800f762:	68fb      	ldr	r3, [r7, #12]
 800f764:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800f766:	2b00      	cmp	r3, #0
 800f768:	d1de      	bne.n	800f728 <HAL_QSPI_Receive+0x9a>
 800f76a:	e000      	b.n	800f76e <HAL_QSPI_Receive+0xe0>
          break;
 800f76c:	bf00      	nop
      }

      if (status == HAL_OK)
 800f76e:	7ffb      	ldrb	r3, [r7, #31]
 800f770:	2b00      	cmp	r3, #0
 800f772:	d115      	bne.n	800f7a0 <HAL_QSPI_Receive+0x112>
      {
        /* Wait until TC flag is set to go back in idle state */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, Timeout);
 800f774:	687b      	ldr	r3, [r7, #4]
 800f776:	9300      	str	r3, [sp, #0]
 800f778:	69bb      	ldr	r3, [r7, #24]
 800f77a:	2201      	movs	r2, #1
 800f77c:	2102      	movs	r1, #2
 800f77e:	68f8      	ldr	r0, [r7, #12]
 800f780:	f000 f8ae 	bl	800f8e0 <QSPI_WaitFlagStateUntilTimeout>
 800f784:	4603      	mov	r3, r0
 800f786:	77fb      	strb	r3, [r7, #31]

        if  (status == HAL_OK)
 800f788:	7ffb      	ldrb	r3, [r7, #31]
 800f78a:	2b00      	cmp	r3, #0
 800f78c:	d108      	bne.n	800f7a0 <HAL_QSPI_Receive+0x112>
        {
          /* Clear Transfer Complete bit */
          __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 800f78e:	68fb      	ldr	r3, [r7, #12]
 800f790:	681b      	ldr	r3, [r3, #0]
 800f792:	2202      	movs	r2, #2
 800f794:	60da      	str	r2, [r3, #12]

#if  (defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx))
          /* Workaround - Extra data written in the FIFO at the end of a read transfer */
          status = HAL_QSPI_Abort(hqspi);
 800f796:	68f8      	ldr	r0, [r7, #12]
 800f798:	f000 f81b 	bl	800f7d2 <HAL_QSPI_Abort>
 800f79c:	4603      	mov	r3, r0
 800f79e:	77fb      	strb	r3, [r7, #31]
#endif
        }
      }

      /* Update QSPI state */
      hqspi->State = HAL_QSPI_STATE_READY;
 800f7a0:	68fb      	ldr	r3, [r7, #12]
 800f7a2:	2201      	movs	r2, #1
 800f7a4:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
 800f7a8:	e00a      	b.n	800f7c0 <HAL_QSPI_Receive+0x132>
    }
    else
    {
      hqspi->ErrorCode |= HAL_QSPI_ERROR_INVALID_PARAM;
 800f7aa:	68fb      	ldr	r3, [r7, #12]
 800f7ac:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800f7ae:	f043 0208 	orr.w	r2, r3, #8
 800f7b2:	68fb      	ldr	r3, [r7, #12]
 800f7b4:	63da      	str	r2, [r3, #60]	@ 0x3c
      status = HAL_ERROR;
 800f7b6:	2301      	movs	r3, #1
 800f7b8:	77fb      	strb	r3, [r7, #31]
 800f7ba:	e001      	b.n	800f7c0 <HAL_QSPI_Receive+0x132>
    }
  }
  else
  {
    status = HAL_BUSY;
 800f7bc:	2302      	movs	r3, #2
 800f7be:	77fb      	strb	r3, [r7, #31]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hqspi);
 800f7c0:	68fb      	ldr	r3, [r7, #12]
 800f7c2:	2200      	movs	r2, #0
 800f7c4:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  return status;
 800f7c8:	7ffb      	ldrb	r3, [r7, #31]
}
 800f7ca:	4618      	mov	r0, r3
 800f7cc:	3720      	adds	r7, #32
 800f7ce:	46bd      	mov	sp, r7
 800f7d0:	bd80      	pop	{r7, pc}

0800f7d2 <HAL_QSPI_Abort>:
* @brief  Abort the current transmission.
* @param  hqspi QSPI handle
* @retval HAL status
*/
HAL_StatusTypeDef HAL_QSPI_Abort(QSPI_HandleTypeDef *hqspi)
{
 800f7d2:	b580      	push	{r7, lr}
 800f7d4:	b086      	sub	sp, #24
 800f7d6:	af02      	add	r7, sp, #8
 800f7d8:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800f7da:	2300      	movs	r3, #0
 800f7dc:	73fb      	strb	r3, [r7, #15]
  uint32_t tickstart = HAL_GetTick();
 800f7de:	f7fb fd91 	bl	800b304 <HAL_GetTick>
 800f7e2:	60b8      	str	r0, [r7, #8]

  /* Check if the state is in one of the busy states */
  if (((uint32_t)hqspi->State & 0x2U) != 0U)
 800f7e4:	687b      	ldr	r3, [r7, #4]
 800f7e6:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 800f7ea:	b2db      	uxtb	r3, r3
 800f7ec:	f003 0302 	and.w	r3, r3, #2
 800f7f0:	2b00      	cmp	r3, #0
 800f7f2:	d062      	beq.n	800f8ba <HAL_QSPI_Abort+0xe8>
  {
    /* Process unlocked */
    __HAL_UNLOCK(hqspi);
 800f7f4:	687b      	ldr	r3, [r7, #4]
 800f7f6:	2200      	movs	r2, #0
 800f7f8:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

    if ((hqspi->Instance->CR & QUADSPI_CR_DMAEN) != 0U)
 800f7fc:	687b      	ldr	r3, [r7, #4]
 800f7fe:	681b      	ldr	r3, [r3, #0]
 800f800:	681b      	ldr	r3, [r3, #0]
 800f802:	f003 0304 	and.w	r3, r3, #4
 800f806:	2b00      	cmp	r3, #0
 800f808:	d017      	beq.n	800f83a <HAL_QSPI_Abort+0x68>
    {
      /* Disable the DMA transfer by clearing the DMAEN bit in the QSPI CR register */
      CLEAR_BIT(hqspi->Instance->CR, QUADSPI_CR_DMAEN);
 800f80a:	687b      	ldr	r3, [r7, #4]
 800f80c:	681b      	ldr	r3, [r3, #0]
 800f80e:	681a      	ldr	r2, [r3, #0]
 800f810:	687b      	ldr	r3, [r7, #4]
 800f812:	681b      	ldr	r3, [r3, #0]
 800f814:	f022 0204 	bic.w	r2, r2, #4
 800f818:	601a      	str	r2, [r3, #0]

      /* Abort DMA channel */
      status = HAL_DMA_Abort(hqspi->hdma);
 800f81a:	687b      	ldr	r3, [r7, #4]
 800f81c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800f81e:	4618      	mov	r0, r3
 800f820:	f7fd fdb6 	bl	800d390 <HAL_DMA_Abort>
 800f824:	4603      	mov	r3, r0
 800f826:	73fb      	strb	r3, [r7, #15]
      if(status != HAL_OK)
 800f828:	7bfb      	ldrb	r3, [r7, #15]
 800f82a:	2b00      	cmp	r3, #0
 800f82c:	d005      	beq.n	800f83a <HAL_QSPI_Abort+0x68>
      {
        hqspi->ErrorCode |= HAL_QSPI_ERROR_DMA;
 800f82e:	687b      	ldr	r3, [r7, #4]
 800f830:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800f832:	f043 0204 	orr.w	r2, r3, #4
 800f836:	687b      	ldr	r3, [r7, #4]
 800f838:	63da      	str	r2, [r3, #60]	@ 0x3c
      }
    }

    if (__HAL_QSPI_GET_FLAG(hqspi, QSPI_FLAG_BUSY) != RESET)
 800f83a:	687b      	ldr	r3, [r7, #4]
 800f83c:	681b      	ldr	r3, [r3, #0]
 800f83e:	689b      	ldr	r3, [r3, #8]
 800f840:	f003 0320 	and.w	r3, r3, #32
 800f844:	2b00      	cmp	r3, #0
 800f846:	d034      	beq.n	800f8b2 <HAL_QSPI_Abort+0xe0>
    {
      /* Configure QSPI: CR register with Abort request */
      SET_BIT(hqspi->Instance->CR, QUADSPI_CR_ABORT);
 800f848:	687b      	ldr	r3, [r7, #4]
 800f84a:	681b      	ldr	r3, [r3, #0]
 800f84c:	681a      	ldr	r2, [r3, #0]
 800f84e:	687b      	ldr	r3, [r7, #4]
 800f850:	681b      	ldr	r3, [r3, #0]
 800f852:	f042 0202 	orr.w	r2, r2, #2
 800f856:	601a      	str	r2, [r3, #0]
      
      /* Wait until TC flag is set to go back in idle state */
      status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, hqspi->Timeout);
 800f858:	687b      	ldr	r3, [r7, #4]
 800f85a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800f85c:	9300      	str	r3, [sp, #0]
 800f85e:	68bb      	ldr	r3, [r7, #8]
 800f860:	2201      	movs	r2, #1
 800f862:	2102      	movs	r1, #2
 800f864:	6878      	ldr	r0, [r7, #4]
 800f866:	f000 f83b 	bl	800f8e0 <QSPI_WaitFlagStateUntilTimeout>
 800f86a:	4603      	mov	r3, r0
 800f86c:	73fb      	strb	r3, [r7, #15]
      
      if (status == HAL_OK)
 800f86e:	7bfb      	ldrb	r3, [r7, #15]
 800f870:	2b00      	cmp	r3, #0
 800f872:	d10e      	bne.n	800f892 <HAL_QSPI_Abort+0xc0>
      {
        __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 800f874:	687b      	ldr	r3, [r7, #4]
 800f876:	681b      	ldr	r3, [r3, #0]
 800f878:	2202      	movs	r2, #2
 800f87a:	60da      	str	r2, [r3, #12]
        
        /* Wait until BUSY flag is reset */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 800f87c:	687b      	ldr	r3, [r7, #4]
 800f87e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800f880:	9300      	str	r3, [sp, #0]
 800f882:	68bb      	ldr	r3, [r7, #8]
 800f884:	2200      	movs	r2, #0
 800f886:	2120      	movs	r1, #32
 800f888:	6878      	ldr	r0, [r7, #4]
 800f88a:	f000 f829 	bl	800f8e0 <QSPI_WaitFlagStateUntilTimeout>
 800f88e:	4603      	mov	r3, r0
 800f890:	73fb      	strb	r3, [r7, #15]
      }

      if (status == HAL_OK)
 800f892:	7bfb      	ldrb	r3, [r7, #15]
 800f894:	2b00      	cmp	r3, #0
 800f896:	d110      	bne.n	800f8ba <HAL_QSPI_Abort+0xe8>
      {
        /* Reset functional mode configuration to indirect write mode by default */
        CLEAR_BIT(hqspi->Instance->CCR, QUADSPI_CCR_FMODE);
 800f898:	687b      	ldr	r3, [r7, #4]
 800f89a:	681b      	ldr	r3, [r3, #0]
 800f89c:	695a      	ldr	r2, [r3, #20]
 800f89e:	687b      	ldr	r3, [r7, #4]
 800f8a0:	681b      	ldr	r3, [r3, #0]
 800f8a2:	f022 6240 	bic.w	r2, r2, #201326592	@ 0xc000000
 800f8a6:	615a      	str	r2, [r3, #20]
        
        /* Update state */
        hqspi->State = HAL_QSPI_STATE_READY;
 800f8a8:	687b      	ldr	r3, [r7, #4]
 800f8aa:	2201      	movs	r2, #1
 800f8ac:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
 800f8b0:	e003      	b.n	800f8ba <HAL_QSPI_Abort+0xe8>
      }
    }
    else
    {
      /* Update state */
      hqspi->State = HAL_QSPI_STATE_READY;
 800f8b2:	687b      	ldr	r3, [r7, #4]
 800f8b4:	2201      	movs	r2, #1
 800f8b6:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
    }
  }

  return status;
 800f8ba:	7bfb      	ldrb	r3, [r7, #15]
}
 800f8bc:	4618      	mov	r0, r3
 800f8be:	3710      	adds	r7, #16
 800f8c0:	46bd      	mov	sp, r7
 800f8c2:	bd80      	pop	{r7, pc}

0800f8c4 <HAL_QSPI_SetTimeout>:
  * @param  hqspi QSPI handle.
  * @param  Timeout Timeout for the QSPI memory access.
  * @retval None
  */
void HAL_QSPI_SetTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
{
 800f8c4:	b480      	push	{r7}
 800f8c6:	b083      	sub	sp, #12
 800f8c8:	af00      	add	r7, sp, #0
 800f8ca:	6078      	str	r0, [r7, #4]
 800f8cc:	6039      	str	r1, [r7, #0]
  hqspi->Timeout = Timeout;
 800f8ce:	687b      	ldr	r3, [r7, #4]
 800f8d0:	683a      	ldr	r2, [r7, #0]
 800f8d2:	641a      	str	r2, [r3, #64]	@ 0x40
}
 800f8d4:	bf00      	nop
 800f8d6:	370c      	adds	r7, #12
 800f8d8:	46bd      	mov	sp, r7
 800f8da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f8de:	4770      	bx	lr

0800f8e0 <QSPI_WaitFlagStateUntilTimeout>:
  * @param  Timeout Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef QSPI_WaitFlagStateUntilTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 800f8e0:	b580      	push	{r7, lr}
 800f8e2:	b084      	sub	sp, #16
 800f8e4:	af00      	add	r7, sp, #0
 800f8e6:	60f8      	str	r0, [r7, #12]
 800f8e8:	60b9      	str	r1, [r7, #8]
 800f8ea:	603b      	str	r3, [r7, #0]
 800f8ec:	4613      	mov	r3, r2
 800f8ee:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 800f8f0:	e01a      	b.n	800f928 <QSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800f8f2:	69bb      	ldr	r3, [r7, #24]
 800f8f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f8f8:	d016      	beq.n	800f928 <QSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800f8fa:	f7fb fd03 	bl	800b304 <HAL_GetTick>
 800f8fe:	4602      	mov	r2, r0
 800f900:	683b      	ldr	r3, [r7, #0]
 800f902:	1ad3      	subs	r3, r2, r3
 800f904:	69ba      	ldr	r2, [r7, #24]
 800f906:	429a      	cmp	r2, r3
 800f908:	d302      	bcc.n	800f910 <QSPI_WaitFlagStateUntilTimeout+0x30>
 800f90a:	69bb      	ldr	r3, [r7, #24]
 800f90c:	2b00      	cmp	r3, #0
 800f90e:	d10b      	bne.n	800f928 <QSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 800f910:	68fb      	ldr	r3, [r7, #12]
 800f912:	2204      	movs	r2, #4
 800f914:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 800f918:	68fb      	ldr	r3, [r7, #12]
 800f91a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800f91c:	f043 0201 	orr.w	r2, r3, #1
 800f920:	68fb      	ldr	r3, [r7, #12]
 800f922:	63da      	str	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 800f924:	2301      	movs	r3, #1
 800f926:	e00e      	b.n	800f946 <QSPI_WaitFlagStateUntilTimeout+0x66>
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 800f928:	68fb      	ldr	r3, [r7, #12]
 800f92a:	681b      	ldr	r3, [r3, #0]
 800f92c:	689a      	ldr	r2, [r3, #8]
 800f92e:	68bb      	ldr	r3, [r7, #8]
 800f930:	4013      	ands	r3, r2
 800f932:	2b00      	cmp	r3, #0
 800f934:	bf14      	ite	ne
 800f936:	2301      	movne	r3, #1
 800f938:	2300      	moveq	r3, #0
 800f93a:	b2db      	uxtb	r3, r3
 800f93c:	461a      	mov	r2, r3
 800f93e:	79fb      	ldrb	r3, [r7, #7]
 800f940:	429a      	cmp	r2, r3
 800f942:	d1d6      	bne.n	800f8f2 <QSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800f944:	2300      	movs	r3, #0
}
 800f946:	4618      	mov	r0, r3
 800f948:	3710      	adds	r7, #16
 800f94a:	46bd      	mov	sp, r7
 800f94c:	bd80      	pop	{r7, pc}

0800f94e <QSPI_Config>:
  *            @arg QSPI_FUNCTIONAL_MODE_AUTO_POLLING: Automatic polling mode
  *            @arg QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED: Memory-mapped mode
  * @retval None
  */
static void QSPI_Config(QSPI_HandleTypeDef *hqspi, QSPI_CommandTypeDef *cmd, uint32_t FunctionalMode)
{
 800f94e:	b480      	push	{r7}
 800f950:	b085      	sub	sp, #20
 800f952:	af00      	add	r7, sp, #0
 800f954:	60f8      	str	r0, [r7, #12]
 800f956:	60b9      	str	r1, [r7, #8]
 800f958:	607a      	str	r2, [r7, #4]
  assert_param(IS_QSPI_FUNCTIONAL_MODE(FunctionalMode));

  if ((cmd->DataMode != QSPI_DATA_NONE) && (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED))
 800f95a:	68bb      	ldr	r3, [r7, #8]
 800f95c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f95e:	2b00      	cmp	r3, #0
 800f960:	d009      	beq.n	800f976 <QSPI_Config+0x28>
 800f962:	687b      	ldr	r3, [r7, #4]
 800f964:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 800f968:	d005      	beq.n	800f976 <QSPI_Config+0x28>
  {
    /* Configure QSPI: DLR register with the number of data to read or write */
    WRITE_REG(hqspi->Instance->DLR, (cmd->NbData - 1U));
 800f96a:	68bb      	ldr	r3, [r7, #8]
 800f96c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800f96e:	68fb      	ldr	r3, [r7, #12]
 800f970:	681b      	ldr	r3, [r3, #0]
 800f972:	3a01      	subs	r2, #1
 800f974:	611a      	str	r2, [r3, #16]
  }

  if (cmd->InstructionMode != QSPI_INSTRUCTION_NONE)
 800f976:	68bb      	ldr	r3, [r7, #8]
 800f978:	699b      	ldr	r3, [r3, #24]
 800f97a:	2b00      	cmp	r3, #0
 800f97c:	f000 80c1 	beq.w	800fb02 <QSPI_Config+0x1b4>
  {
    if (cmd->AlternateByteMode != QSPI_ALTERNATE_BYTES_NONE)
 800f980:	68bb      	ldr	r3, [r7, #8]
 800f982:	6a1b      	ldr	r3, [r3, #32]
 800f984:	2b00      	cmp	r3, #0
 800f986:	d063      	beq.n	800fa50 <QSPI_Config+0x102>
    {
      /* Configure QSPI: ABR register with alternate bytes value */
      WRITE_REG(hqspi->Instance->ABR, cmd->AlternateBytes);
 800f988:	68fb      	ldr	r3, [r7, #12]
 800f98a:	681b      	ldr	r3, [r3, #0]
 800f98c:	68ba      	ldr	r2, [r7, #8]
 800f98e:	6892      	ldr	r2, [r2, #8]
 800f990:	61da      	str	r2, [r3, #28]

      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 800f992:	68bb      	ldr	r3, [r7, #8]
 800f994:	69db      	ldr	r3, [r3, #28]
 800f996:	2b00      	cmp	r3, #0
 800f998:	d031      	beq.n	800f9fe <QSPI_Config+0xb0>
      {
        /*---- Command with instruction, address and alternate bytes ----*/
        /* Configure QSPI: CCR register with all communications parameters */
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800f99a:	68bb      	ldr	r3, [r7, #8]
 800f99c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800f99e:	68bb      	ldr	r3, [r7, #8]
 800f9a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800f9a2:	431a      	orrs	r2, r3
 800f9a4:	68bb      	ldr	r3, [r7, #8]
 800f9a6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800f9a8:	431a      	orrs	r2, r3
 800f9aa:	68bb      	ldr	r3, [r7, #8]
 800f9ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f9ae:	431a      	orrs	r2, r3
 800f9b0:	68bb      	ldr	r3, [r7, #8]
 800f9b2:	695b      	ldr	r3, [r3, #20]
 800f9b4:	049b      	lsls	r3, r3, #18
 800f9b6:	431a      	orrs	r2, r3
 800f9b8:	68bb      	ldr	r3, [r7, #8]
 800f9ba:	691b      	ldr	r3, [r3, #16]
 800f9bc:	431a      	orrs	r2, r3
 800f9be:	68bb      	ldr	r3, [r7, #8]
 800f9c0:	6a1b      	ldr	r3, [r3, #32]
 800f9c2:	431a      	orrs	r2, r3
 800f9c4:	68bb      	ldr	r3, [r7, #8]
 800f9c6:	68db      	ldr	r3, [r3, #12]
 800f9c8:	431a      	orrs	r2, r3
 800f9ca:	68bb      	ldr	r3, [r7, #8]
 800f9cc:	69db      	ldr	r3, [r3, #28]
 800f9ce:	431a      	orrs	r2, r3
 800f9d0:	68bb      	ldr	r3, [r7, #8]
 800f9d2:	699b      	ldr	r3, [r3, #24]
 800f9d4:	431a      	orrs	r2, r3
 800f9d6:	68bb      	ldr	r3, [r7, #8]
 800f9d8:	681b      	ldr	r3, [r3, #0]
 800f9da:	ea42 0103 	orr.w	r1, r2, r3
 800f9de:	68fb      	ldr	r3, [r7, #12]
 800f9e0:	681b      	ldr	r3, [r3, #0]
 800f9e2:	687a      	ldr	r2, [r7, #4]
 800f9e4:	430a      	orrs	r2, r1
 800f9e6:	615a      	str	r2, [r3, #20]
                                         cmd->DataMode | (cmd->DummyCycles << QUADSPI_CCR_DCYC_Pos) |
                                         cmd->AlternateBytesSize | cmd->AlternateByteMode |
                                         cmd->AddressSize | cmd->AddressMode | cmd->InstructionMode |
                                         cmd->Instruction | FunctionalMode));

        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 800f9e8:	687b      	ldr	r3, [r7, #4]
 800f9ea:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 800f9ee:	f000 813f 	beq.w	800fc70 <QSPI_Config+0x322>
        {
          /* Configure QSPI: AR register with address value */
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 800f9f2:	68fb      	ldr	r3, [r7, #12]
 800f9f4:	681b      	ldr	r3, [r3, #0]
 800f9f6:	68ba      	ldr	r2, [r7, #8]
 800f9f8:	6852      	ldr	r2, [r2, #4]
 800f9fa:	619a      	str	r2, [r3, #24]
          CLEAR_REG(hqspi->Instance->AR);
        }
      }
    }
  }
}
 800f9fc:	e138      	b.n	800fc70 <QSPI_Config+0x322>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800f9fe:	68bb      	ldr	r3, [r7, #8]
 800fa00:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800fa02:	68bb      	ldr	r3, [r7, #8]
 800fa04:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800fa06:	431a      	orrs	r2, r3
 800fa08:	68bb      	ldr	r3, [r7, #8]
 800fa0a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800fa0c:	431a      	orrs	r2, r3
 800fa0e:	68bb      	ldr	r3, [r7, #8]
 800fa10:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800fa12:	431a      	orrs	r2, r3
 800fa14:	68bb      	ldr	r3, [r7, #8]
 800fa16:	695b      	ldr	r3, [r3, #20]
 800fa18:	049b      	lsls	r3, r3, #18
 800fa1a:	431a      	orrs	r2, r3
 800fa1c:	68bb      	ldr	r3, [r7, #8]
 800fa1e:	691b      	ldr	r3, [r3, #16]
 800fa20:	431a      	orrs	r2, r3
 800fa22:	68bb      	ldr	r3, [r7, #8]
 800fa24:	6a1b      	ldr	r3, [r3, #32]
 800fa26:	431a      	orrs	r2, r3
 800fa28:	68bb      	ldr	r3, [r7, #8]
 800fa2a:	69db      	ldr	r3, [r3, #28]
 800fa2c:	431a      	orrs	r2, r3
 800fa2e:	68bb      	ldr	r3, [r7, #8]
 800fa30:	699b      	ldr	r3, [r3, #24]
 800fa32:	431a      	orrs	r2, r3
 800fa34:	68bb      	ldr	r3, [r7, #8]
 800fa36:	681b      	ldr	r3, [r3, #0]
 800fa38:	ea42 0103 	orr.w	r1, r2, r3
 800fa3c:	68fb      	ldr	r3, [r7, #12]
 800fa3e:	681b      	ldr	r3, [r3, #0]
 800fa40:	687a      	ldr	r2, [r7, #4]
 800fa42:	430a      	orrs	r2, r1
 800fa44:	615a      	str	r2, [r3, #20]
        CLEAR_REG(hqspi->Instance->AR);
 800fa46:	68fb      	ldr	r3, [r7, #12]
 800fa48:	681b      	ldr	r3, [r3, #0]
 800fa4a:	2200      	movs	r2, #0
 800fa4c:	619a      	str	r2, [r3, #24]
}
 800fa4e:	e10f      	b.n	800fc70 <QSPI_Config+0x322>
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 800fa50:	68bb      	ldr	r3, [r7, #8]
 800fa52:	69db      	ldr	r3, [r3, #28]
 800fa54:	2b00      	cmp	r3, #0
 800fa56:	d02e      	beq.n	800fab6 <QSPI_Config+0x168>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800fa58:	68bb      	ldr	r3, [r7, #8]
 800fa5a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800fa5c:	68bb      	ldr	r3, [r7, #8]
 800fa5e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800fa60:	431a      	orrs	r2, r3
 800fa62:	68bb      	ldr	r3, [r7, #8]
 800fa64:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800fa66:	431a      	orrs	r2, r3
 800fa68:	68bb      	ldr	r3, [r7, #8]
 800fa6a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800fa6c:	431a      	orrs	r2, r3
 800fa6e:	68bb      	ldr	r3, [r7, #8]
 800fa70:	695b      	ldr	r3, [r3, #20]
 800fa72:	049b      	lsls	r3, r3, #18
 800fa74:	431a      	orrs	r2, r3
 800fa76:	68bb      	ldr	r3, [r7, #8]
 800fa78:	6a1b      	ldr	r3, [r3, #32]
 800fa7a:	431a      	orrs	r2, r3
 800fa7c:	68bb      	ldr	r3, [r7, #8]
 800fa7e:	68db      	ldr	r3, [r3, #12]
 800fa80:	431a      	orrs	r2, r3
 800fa82:	68bb      	ldr	r3, [r7, #8]
 800fa84:	69db      	ldr	r3, [r3, #28]
 800fa86:	431a      	orrs	r2, r3
 800fa88:	68bb      	ldr	r3, [r7, #8]
 800fa8a:	699b      	ldr	r3, [r3, #24]
 800fa8c:	431a      	orrs	r2, r3
 800fa8e:	68bb      	ldr	r3, [r7, #8]
 800fa90:	681b      	ldr	r3, [r3, #0]
 800fa92:	ea42 0103 	orr.w	r1, r2, r3
 800fa96:	68fb      	ldr	r3, [r7, #12]
 800fa98:	681b      	ldr	r3, [r3, #0]
 800fa9a:	687a      	ldr	r2, [r7, #4]
 800fa9c:	430a      	orrs	r2, r1
 800fa9e:	615a      	str	r2, [r3, #20]
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 800faa0:	687b      	ldr	r3, [r7, #4]
 800faa2:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 800faa6:	f000 80e3 	beq.w	800fc70 <QSPI_Config+0x322>
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 800faaa:	68fb      	ldr	r3, [r7, #12]
 800faac:	681b      	ldr	r3, [r3, #0]
 800faae:	68ba      	ldr	r2, [r7, #8]
 800fab0:	6852      	ldr	r2, [r2, #4]
 800fab2:	619a      	str	r2, [r3, #24]
}
 800fab4:	e0dc      	b.n	800fc70 <QSPI_Config+0x322>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800fab6:	68bb      	ldr	r3, [r7, #8]
 800fab8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800faba:	68bb      	ldr	r3, [r7, #8]
 800fabc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800fabe:	431a      	orrs	r2, r3
 800fac0:	68bb      	ldr	r3, [r7, #8]
 800fac2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800fac4:	431a      	orrs	r2, r3
 800fac6:	68bb      	ldr	r3, [r7, #8]
 800fac8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800faca:	431a      	orrs	r2, r3
 800facc:	68bb      	ldr	r3, [r7, #8]
 800face:	695b      	ldr	r3, [r3, #20]
 800fad0:	049b      	lsls	r3, r3, #18
 800fad2:	431a      	orrs	r2, r3
 800fad4:	68bb      	ldr	r3, [r7, #8]
 800fad6:	6a1b      	ldr	r3, [r3, #32]
 800fad8:	431a      	orrs	r2, r3
 800fada:	68bb      	ldr	r3, [r7, #8]
 800fadc:	69db      	ldr	r3, [r3, #28]
 800fade:	431a      	orrs	r2, r3
 800fae0:	68bb      	ldr	r3, [r7, #8]
 800fae2:	699b      	ldr	r3, [r3, #24]
 800fae4:	431a      	orrs	r2, r3
 800fae6:	68bb      	ldr	r3, [r7, #8]
 800fae8:	681b      	ldr	r3, [r3, #0]
 800faea:	ea42 0103 	orr.w	r1, r2, r3
 800faee:	68fb      	ldr	r3, [r7, #12]
 800faf0:	681b      	ldr	r3, [r3, #0]
 800faf2:	687a      	ldr	r2, [r7, #4]
 800faf4:	430a      	orrs	r2, r1
 800faf6:	615a      	str	r2, [r3, #20]
        CLEAR_REG(hqspi->Instance->AR);
 800faf8:	68fb      	ldr	r3, [r7, #12]
 800fafa:	681b      	ldr	r3, [r3, #0]
 800fafc:	2200      	movs	r2, #0
 800fafe:	619a      	str	r2, [r3, #24]
}
 800fb00:	e0b6      	b.n	800fc70 <QSPI_Config+0x322>
    if (cmd->AlternateByteMode != QSPI_ALTERNATE_BYTES_NONE)
 800fb02:	68bb      	ldr	r3, [r7, #8]
 800fb04:	6a1b      	ldr	r3, [r3, #32]
 800fb06:	2b00      	cmp	r3, #0
 800fb08:	d05d      	beq.n	800fbc6 <QSPI_Config+0x278>
      WRITE_REG(hqspi->Instance->ABR, cmd->AlternateBytes);
 800fb0a:	68fb      	ldr	r3, [r7, #12]
 800fb0c:	681b      	ldr	r3, [r3, #0]
 800fb0e:	68ba      	ldr	r2, [r7, #8]
 800fb10:	6892      	ldr	r2, [r2, #8]
 800fb12:	61da      	str	r2, [r3, #28]
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 800fb14:	68bb      	ldr	r3, [r7, #8]
 800fb16:	69db      	ldr	r3, [r3, #28]
 800fb18:	2b00      	cmp	r3, #0
 800fb1a:	d02e      	beq.n	800fb7a <QSPI_Config+0x22c>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800fb1c:	68bb      	ldr	r3, [r7, #8]
 800fb1e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800fb20:	68bb      	ldr	r3, [r7, #8]
 800fb22:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800fb24:	431a      	orrs	r2, r3
 800fb26:	68bb      	ldr	r3, [r7, #8]
 800fb28:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800fb2a:	431a      	orrs	r2, r3
 800fb2c:	68bb      	ldr	r3, [r7, #8]
 800fb2e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800fb30:	431a      	orrs	r2, r3
 800fb32:	68bb      	ldr	r3, [r7, #8]
 800fb34:	695b      	ldr	r3, [r3, #20]
 800fb36:	049b      	lsls	r3, r3, #18
 800fb38:	431a      	orrs	r2, r3
 800fb3a:	68bb      	ldr	r3, [r7, #8]
 800fb3c:	691b      	ldr	r3, [r3, #16]
 800fb3e:	431a      	orrs	r2, r3
 800fb40:	68bb      	ldr	r3, [r7, #8]
 800fb42:	6a1b      	ldr	r3, [r3, #32]
 800fb44:	431a      	orrs	r2, r3
 800fb46:	68bb      	ldr	r3, [r7, #8]
 800fb48:	68db      	ldr	r3, [r3, #12]
 800fb4a:	431a      	orrs	r2, r3
 800fb4c:	68bb      	ldr	r3, [r7, #8]
 800fb4e:	69db      	ldr	r3, [r3, #28]
 800fb50:	431a      	orrs	r2, r3
 800fb52:	68bb      	ldr	r3, [r7, #8]
 800fb54:	699b      	ldr	r3, [r3, #24]
 800fb56:	ea42 0103 	orr.w	r1, r2, r3
 800fb5a:	68fb      	ldr	r3, [r7, #12]
 800fb5c:	681b      	ldr	r3, [r3, #0]
 800fb5e:	687a      	ldr	r2, [r7, #4]
 800fb60:	430a      	orrs	r2, r1
 800fb62:	615a      	str	r2, [r3, #20]
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 800fb64:	687b      	ldr	r3, [r7, #4]
 800fb66:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 800fb6a:	f000 8081 	beq.w	800fc70 <QSPI_Config+0x322>
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 800fb6e:	68fb      	ldr	r3, [r7, #12]
 800fb70:	681b      	ldr	r3, [r3, #0]
 800fb72:	68ba      	ldr	r2, [r7, #8]
 800fb74:	6852      	ldr	r2, [r2, #4]
 800fb76:	619a      	str	r2, [r3, #24]
}
 800fb78:	e07a      	b.n	800fc70 <QSPI_Config+0x322>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800fb7a:	68bb      	ldr	r3, [r7, #8]
 800fb7c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800fb7e:	68bb      	ldr	r3, [r7, #8]
 800fb80:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800fb82:	431a      	orrs	r2, r3
 800fb84:	68bb      	ldr	r3, [r7, #8]
 800fb86:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800fb88:	431a      	orrs	r2, r3
 800fb8a:	68bb      	ldr	r3, [r7, #8]
 800fb8c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800fb8e:	431a      	orrs	r2, r3
 800fb90:	68bb      	ldr	r3, [r7, #8]
 800fb92:	695b      	ldr	r3, [r3, #20]
 800fb94:	049b      	lsls	r3, r3, #18
 800fb96:	431a      	orrs	r2, r3
 800fb98:	68bb      	ldr	r3, [r7, #8]
 800fb9a:	691b      	ldr	r3, [r3, #16]
 800fb9c:	431a      	orrs	r2, r3
 800fb9e:	68bb      	ldr	r3, [r7, #8]
 800fba0:	6a1b      	ldr	r3, [r3, #32]
 800fba2:	431a      	orrs	r2, r3
 800fba4:	68bb      	ldr	r3, [r7, #8]
 800fba6:	69db      	ldr	r3, [r3, #28]
 800fba8:	431a      	orrs	r2, r3
 800fbaa:	68bb      	ldr	r3, [r7, #8]
 800fbac:	699b      	ldr	r3, [r3, #24]
 800fbae:	ea42 0103 	orr.w	r1, r2, r3
 800fbb2:	68fb      	ldr	r3, [r7, #12]
 800fbb4:	681b      	ldr	r3, [r3, #0]
 800fbb6:	687a      	ldr	r2, [r7, #4]
 800fbb8:	430a      	orrs	r2, r1
 800fbba:	615a      	str	r2, [r3, #20]
        CLEAR_REG(hqspi->Instance->AR);
 800fbbc:	68fb      	ldr	r3, [r7, #12]
 800fbbe:	681b      	ldr	r3, [r3, #0]
 800fbc0:	2200      	movs	r2, #0
 800fbc2:	619a      	str	r2, [r3, #24]
}
 800fbc4:	e054      	b.n	800fc70 <QSPI_Config+0x322>
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 800fbc6:	68bb      	ldr	r3, [r7, #8]
 800fbc8:	69db      	ldr	r3, [r3, #28]
 800fbca:	2b00      	cmp	r3, #0
 800fbcc:	d02a      	beq.n	800fc24 <QSPI_Config+0x2d6>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800fbce:	68bb      	ldr	r3, [r7, #8]
 800fbd0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800fbd2:	68bb      	ldr	r3, [r7, #8]
 800fbd4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800fbd6:	431a      	orrs	r2, r3
 800fbd8:	68bb      	ldr	r3, [r7, #8]
 800fbda:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800fbdc:	431a      	orrs	r2, r3
 800fbde:	68bb      	ldr	r3, [r7, #8]
 800fbe0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800fbe2:	431a      	orrs	r2, r3
 800fbe4:	68bb      	ldr	r3, [r7, #8]
 800fbe6:	695b      	ldr	r3, [r3, #20]
 800fbe8:	049b      	lsls	r3, r3, #18
 800fbea:	431a      	orrs	r2, r3
 800fbec:	68bb      	ldr	r3, [r7, #8]
 800fbee:	6a1b      	ldr	r3, [r3, #32]
 800fbf0:	431a      	orrs	r2, r3
 800fbf2:	68bb      	ldr	r3, [r7, #8]
 800fbf4:	68db      	ldr	r3, [r3, #12]
 800fbf6:	431a      	orrs	r2, r3
 800fbf8:	68bb      	ldr	r3, [r7, #8]
 800fbfa:	69db      	ldr	r3, [r3, #28]
 800fbfc:	431a      	orrs	r2, r3
 800fbfe:	68bb      	ldr	r3, [r7, #8]
 800fc00:	699b      	ldr	r3, [r3, #24]
 800fc02:	ea42 0103 	orr.w	r1, r2, r3
 800fc06:	68fb      	ldr	r3, [r7, #12]
 800fc08:	681b      	ldr	r3, [r3, #0]
 800fc0a:	687a      	ldr	r2, [r7, #4]
 800fc0c:	430a      	orrs	r2, r1
 800fc0e:	615a      	str	r2, [r3, #20]
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 800fc10:	687b      	ldr	r3, [r7, #4]
 800fc12:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 800fc16:	d02b      	beq.n	800fc70 <QSPI_Config+0x322>
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 800fc18:	68fb      	ldr	r3, [r7, #12]
 800fc1a:	681b      	ldr	r3, [r3, #0]
 800fc1c:	68ba      	ldr	r2, [r7, #8]
 800fc1e:	6852      	ldr	r2, [r2, #4]
 800fc20:	619a      	str	r2, [r3, #24]
}
 800fc22:	e025      	b.n	800fc70 <QSPI_Config+0x322>
        if (cmd->DataMode != QSPI_DATA_NONE)
 800fc24:	68bb      	ldr	r3, [r7, #8]
 800fc26:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800fc28:	2b00      	cmp	r3, #0
 800fc2a:	d021      	beq.n	800fc70 <QSPI_Config+0x322>
          WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800fc2c:	68bb      	ldr	r3, [r7, #8]
 800fc2e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800fc30:	68bb      	ldr	r3, [r7, #8]
 800fc32:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800fc34:	431a      	orrs	r2, r3
 800fc36:	68bb      	ldr	r3, [r7, #8]
 800fc38:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800fc3a:	431a      	orrs	r2, r3
 800fc3c:	68bb      	ldr	r3, [r7, #8]
 800fc3e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800fc40:	431a      	orrs	r2, r3
 800fc42:	68bb      	ldr	r3, [r7, #8]
 800fc44:	695b      	ldr	r3, [r3, #20]
 800fc46:	049b      	lsls	r3, r3, #18
 800fc48:	431a      	orrs	r2, r3
 800fc4a:	68bb      	ldr	r3, [r7, #8]
 800fc4c:	6a1b      	ldr	r3, [r3, #32]
 800fc4e:	431a      	orrs	r2, r3
 800fc50:	68bb      	ldr	r3, [r7, #8]
 800fc52:	69db      	ldr	r3, [r3, #28]
 800fc54:	431a      	orrs	r2, r3
 800fc56:	68bb      	ldr	r3, [r7, #8]
 800fc58:	699b      	ldr	r3, [r3, #24]
 800fc5a:	ea42 0103 	orr.w	r1, r2, r3
 800fc5e:	68fb      	ldr	r3, [r7, #12]
 800fc60:	681b      	ldr	r3, [r3, #0]
 800fc62:	687a      	ldr	r2, [r7, #4]
 800fc64:	430a      	orrs	r2, r1
 800fc66:	615a      	str	r2, [r3, #20]
          CLEAR_REG(hqspi->Instance->AR);
 800fc68:	68fb      	ldr	r3, [r7, #12]
 800fc6a:	681b      	ldr	r3, [r3, #0]
 800fc6c:	2200      	movs	r2, #0
 800fc6e:	619a      	str	r2, [r3, #24]
}
 800fc70:	bf00      	nop
 800fc72:	3714      	adds	r7, #20
 800fc74:	46bd      	mov	sp, r7
 800fc76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc7a:	4770      	bx	lr

0800fc7c <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800fc7c:	b580      	push	{r7, lr}
 800fc7e:	b088      	sub	sp, #32
 800fc80:	af00      	add	r7, sp, #0
 800fc82:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800fc84:	687b      	ldr	r3, [r7, #4]
 800fc86:	2b00      	cmp	r3, #0
 800fc88:	d101      	bne.n	800fc8e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800fc8a:	2301      	movs	r3, #1
 800fc8c:	e3ca      	b.n	8010424 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800fc8e:	4b97      	ldr	r3, [pc, #604]	@ (800feec <HAL_RCC_OscConfig+0x270>)
 800fc90:	689b      	ldr	r3, [r3, #8]
 800fc92:	f003 030c 	and.w	r3, r3, #12
 800fc96:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800fc98:	4b94      	ldr	r3, [pc, #592]	@ (800feec <HAL_RCC_OscConfig+0x270>)
 800fc9a:	68db      	ldr	r3, [r3, #12]
 800fc9c:	f003 0303 	and.w	r3, r3, #3
 800fca0:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800fca2:	687b      	ldr	r3, [r7, #4]
 800fca4:	681b      	ldr	r3, [r3, #0]
 800fca6:	f003 0310 	and.w	r3, r3, #16
 800fcaa:	2b00      	cmp	r3, #0
 800fcac:	f000 80e4 	beq.w	800fe78 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800fcb0:	69bb      	ldr	r3, [r7, #24]
 800fcb2:	2b00      	cmp	r3, #0
 800fcb4:	d007      	beq.n	800fcc6 <HAL_RCC_OscConfig+0x4a>
 800fcb6:	69bb      	ldr	r3, [r7, #24]
 800fcb8:	2b0c      	cmp	r3, #12
 800fcba:	f040 808b 	bne.w	800fdd4 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800fcbe:	697b      	ldr	r3, [r7, #20]
 800fcc0:	2b01      	cmp	r3, #1
 800fcc2:	f040 8087 	bne.w	800fdd4 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800fcc6:	4b89      	ldr	r3, [pc, #548]	@ (800feec <HAL_RCC_OscConfig+0x270>)
 800fcc8:	681b      	ldr	r3, [r3, #0]
 800fcca:	f003 0302 	and.w	r3, r3, #2
 800fcce:	2b00      	cmp	r3, #0
 800fcd0:	d005      	beq.n	800fcde <HAL_RCC_OscConfig+0x62>
 800fcd2:	687b      	ldr	r3, [r7, #4]
 800fcd4:	699b      	ldr	r3, [r3, #24]
 800fcd6:	2b00      	cmp	r3, #0
 800fcd8:	d101      	bne.n	800fcde <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 800fcda:	2301      	movs	r3, #1
 800fcdc:	e3a2      	b.n	8010424 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800fcde:	687b      	ldr	r3, [r7, #4]
 800fce0:	6a1a      	ldr	r2, [r3, #32]
 800fce2:	4b82      	ldr	r3, [pc, #520]	@ (800feec <HAL_RCC_OscConfig+0x270>)
 800fce4:	681b      	ldr	r3, [r3, #0]
 800fce6:	f003 0308 	and.w	r3, r3, #8
 800fcea:	2b00      	cmp	r3, #0
 800fcec:	d004      	beq.n	800fcf8 <HAL_RCC_OscConfig+0x7c>
 800fcee:	4b7f      	ldr	r3, [pc, #508]	@ (800feec <HAL_RCC_OscConfig+0x270>)
 800fcf0:	681b      	ldr	r3, [r3, #0]
 800fcf2:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800fcf6:	e005      	b.n	800fd04 <HAL_RCC_OscConfig+0x88>
 800fcf8:	4b7c      	ldr	r3, [pc, #496]	@ (800feec <HAL_RCC_OscConfig+0x270>)
 800fcfa:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800fcfe:	091b      	lsrs	r3, r3, #4
 800fd00:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800fd04:	4293      	cmp	r3, r2
 800fd06:	d223      	bcs.n	800fd50 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800fd08:	687b      	ldr	r3, [r7, #4]
 800fd0a:	6a1b      	ldr	r3, [r3, #32]
 800fd0c:	4618      	mov	r0, r3
 800fd0e:	f000 fd55 	bl	80107bc <RCC_SetFlashLatencyFromMSIRange>
 800fd12:	4603      	mov	r3, r0
 800fd14:	2b00      	cmp	r3, #0
 800fd16:	d001      	beq.n	800fd1c <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 800fd18:	2301      	movs	r3, #1
 800fd1a:	e383      	b.n	8010424 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800fd1c:	4b73      	ldr	r3, [pc, #460]	@ (800feec <HAL_RCC_OscConfig+0x270>)
 800fd1e:	681b      	ldr	r3, [r3, #0]
 800fd20:	4a72      	ldr	r2, [pc, #456]	@ (800feec <HAL_RCC_OscConfig+0x270>)
 800fd22:	f043 0308 	orr.w	r3, r3, #8
 800fd26:	6013      	str	r3, [r2, #0]
 800fd28:	4b70      	ldr	r3, [pc, #448]	@ (800feec <HAL_RCC_OscConfig+0x270>)
 800fd2a:	681b      	ldr	r3, [r3, #0]
 800fd2c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800fd30:	687b      	ldr	r3, [r7, #4]
 800fd32:	6a1b      	ldr	r3, [r3, #32]
 800fd34:	496d      	ldr	r1, [pc, #436]	@ (800feec <HAL_RCC_OscConfig+0x270>)
 800fd36:	4313      	orrs	r3, r2
 800fd38:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800fd3a:	4b6c      	ldr	r3, [pc, #432]	@ (800feec <HAL_RCC_OscConfig+0x270>)
 800fd3c:	685b      	ldr	r3, [r3, #4]
 800fd3e:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 800fd42:	687b      	ldr	r3, [r7, #4]
 800fd44:	69db      	ldr	r3, [r3, #28]
 800fd46:	021b      	lsls	r3, r3, #8
 800fd48:	4968      	ldr	r1, [pc, #416]	@ (800feec <HAL_RCC_OscConfig+0x270>)
 800fd4a:	4313      	orrs	r3, r2
 800fd4c:	604b      	str	r3, [r1, #4]
 800fd4e:	e025      	b.n	800fd9c <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800fd50:	4b66      	ldr	r3, [pc, #408]	@ (800feec <HAL_RCC_OscConfig+0x270>)
 800fd52:	681b      	ldr	r3, [r3, #0]
 800fd54:	4a65      	ldr	r2, [pc, #404]	@ (800feec <HAL_RCC_OscConfig+0x270>)
 800fd56:	f043 0308 	orr.w	r3, r3, #8
 800fd5a:	6013      	str	r3, [r2, #0]
 800fd5c:	4b63      	ldr	r3, [pc, #396]	@ (800feec <HAL_RCC_OscConfig+0x270>)
 800fd5e:	681b      	ldr	r3, [r3, #0]
 800fd60:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800fd64:	687b      	ldr	r3, [r7, #4]
 800fd66:	6a1b      	ldr	r3, [r3, #32]
 800fd68:	4960      	ldr	r1, [pc, #384]	@ (800feec <HAL_RCC_OscConfig+0x270>)
 800fd6a:	4313      	orrs	r3, r2
 800fd6c:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800fd6e:	4b5f      	ldr	r3, [pc, #380]	@ (800feec <HAL_RCC_OscConfig+0x270>)
 800fd70:	685b      	ldr	r3, [r3, #4]
 800fd72:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 800fd76:	687b      	ldr	r3, [r7, #4]
 800fd78:	69db      	ldr	r3, [r3, #28]
 800fd7a:	021b      	lsls	r3, r3, #8
 800fd7c:	495b      	ldr	r1, [pc, #364]	@ (800feec <HAL_RCC_OscConfig+0x270>)
 800fd7e:	4313      	orrs	r3, r2
 800fd80:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 800fd82:	69bb      	ldr	r3, [r7, #24]
 800fd84:	2b00      	cmp	r3, #0
 800fd86:	d109      	bne.n	800fd9c <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800fd88:	687b      	ldr	r3, [r7, #4]
 800fd8a:	6a1b      	ldr	r3, [r3, #32]
 800fd8c:	4618      	mov	r0, r3
 800fd8e:	f000 fd15 	bl	80107bc <RCC_SetFlashLatencyFromMSIRange>
 800fd92:	4603      	mov	r3, r0
 800fd94:	2b00      	cmp	r3, #0
 800fd96:	d001      	beq.n	800fd9c <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 800fd98:	2301      	movs	r3, #1
 800fd9a:	e343      	b.n	8010424 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800fd9c:	f000 fc4a 	bl	8010634 <HAL_RCC_GetSysClockFreq>
 800fda0:	4602      	mov	r2, r0
 800fda2:	4b52      	ldr	r3, [pc, #328]	@ (800feec <HAL_RCC_OscConfig+0x270>)
 800fda4:	689b      	ldr	r3, [r3, #8]
 800fda6:	091b      	lsrs	r3, r3, #4
 800fda8:	f003 030f 	and.w	r3, r3, #15
 800fdac:	4950      	ldr	r1, [pc, #320]	@ (800fef0 <HAL_RCC_OscConfig+0x274>)
 800fdae:	5ccb      	ldrb	r3, [r1, r3]
 800fdb0:	f003 031f 	and.w	r3, r3, #31
 800fdb4:	fa22 f303 	lsr.w	r3, r2, r3
 800fdb8:	4a4e      	ldr	r2, [pc, #312]	@ (800fef4 <HAL_RCC_OscConfig+0x278>)
 800fdba:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800fdbc:	4b4e      	ldr	r3, [pc, #312]	@ (800fef8 <HAL_RCC_OscConfig+0x27c>)
 800fdbe:	681b      	ldr	r3, [r3, #0]
 800fdc0:	4618      	mov	r0, r3
 800fdc2:	f7fb fa4f 	bl	800b264 <HAL_InitTick>
 800fdc6:	4603      	mov	r3, r0
 800fdc8:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 800fdca:	7bfb      	ldrb	r3, [r7, #15]
 800fdcc:	2b00      	cmp	r3, #0
 800fdce:	d052      	beq.n	800fe76 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 800fdd0:	7bfb      	ldrb	r3, [r7, #15]
 800fdd2:	e327      	b.n	8010424 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800fdd4:	687b      	ldr	r3, [r7, #4]
 800fdd6:	699b      	ldr	r3, [r3, #24]
 800fdd8:	2b00      	cmp	r3, #0
 800fdda:	d032      	beq.n	800fe42 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800fddc:	4b43      	ldr	r3, [pc, #268]	@ (800feec <HAL_RCC_OscConfig+0x270>)
 800fdde:	681b      	ldr	r3, [r3, #0]
 800fde0:	4a42      	ldr	r2, [pc, #264]	@ (800feec <HAL_RCC_OscConfig+0x270>)
 800fde2:	f043 0301 	orr.w	r3, r3, #1
 800fde6:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800fde8:	f7fb fa8c 	bl	800b304 <HAL_GetTick>
 800fdec:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800fdee:	e008      	b.n	800fe02 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800fdf0:	f7fb fa88 	bl	800b304 <HAL_GetTick>
 800fdf4:	4602      	mov	r2, r0
 800fdf6:	693b      	ldr	r3, [r7, #16]
 800fdf8:	1ad3      	subs	r3, r2, r3
 800fdfa:	2b02      	cmp	r3, #2
 800fdfc:	d901      	bls.n	800fe02 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 800fdfe:	2303      	movs	r3, #3
 800fe00:	e310      	b.n	8010424 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800fe02:	4b3a      	ldr	r3, [pc, #232]	@ (800feec <HAL_RCC_OscConfig+0x270>)
 800fe04:	681b      	ldr	r3, [r3, #0]
 800fe06:	f003 0302 	and.w	r3, r3, #2
 800fe0a:	2b00      	cmp	r3, #0
 800fe0c:	d0f0      	beq.n	800fdf0 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800fe0e:	4b37      	ldr	r3, [pc, #220]	@ (800feec <HAL_RCC_OscConfig+0x270>)
 800fe10:	681b      	ldr	r3, [r3, #0]
 800fe12:	4a36      	ldr	r2, [pc, #216]	@ (800feec <HAL_RCC_OscConfig+0x270>)
 800fe14:	f043 0308 	orr.w	r3, r3, #8
 800fe18:	6013      	str	r3, [r2, #0]
 800fe1a:	4b34      	ldr	r3, [pc, #208]	@ (800feec <HAL_RCC_OscConfig+0x270>)
 800fe1c:	681b      	ldr	r3, [r3, #0]
 800fe1e:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800fe22:	687b      	ldr	r3, [r7, #4]
 800fe24:	6a1b      	ldr	r3, [r3, #32]
 800fe26:	4931      	ldr	r1, [pc, #196]	@ (800feec <HAL_RCC_OscConfig+0x270>)
 800fe28:	4313      	orrs	r3, r2
 800fe2a:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800fe2c:	4b2f      	ldr	r3, [pc, #188]	@ (800feec <HAL_RCC_OscConfig+0x270>)
 800fe2e:	685b      	ldr	r3, [r3, #4]
 800fe30:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 800fe34:	687b      	ldr	r3, [r7, #4]
 800fe36:	69db      	ldr	r3, [r3, #28]
 800fe38:	021b      	lsls	r3, r3, #8
 800fe3a:	492c      	ldr	r1, [pc, #176]	@ (800feec <HAL_RCC_OscConfig+0x270>)
 800fe3c:	4313      	orrs	r3, r2
 800fe3e:	604b      	str	r3, [r1, #4]
 800fe40:	e01a      	b.n	800fe78 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800fe42:	4b2a      	ldr	r3, [pc, #168]	@ (800feec <HAL_RCC_OscConfig+0x270>)
 800fe44:	681b      	ldr	r3, [r3, #0]
 800fe46:	4a29      	ldr	r2, [pc, #164]	@ (800feec <HAL_RCC_OscConfig+0x270>)
 800fe48:	f023 0301 	bic.w	r3, r3, #1
 800fe4c:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800fe4e:	f7fb fa59 	bl	800b304 <HAL_GetTick>
 800fe52:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800fe54:	e008      	b.n	800fe68 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800fe56:	f7fb fa55 	bl	800b304 <HAL_GetTick>
 800fe5a:	4602      	mov	r2, r0
 800fe5c:	693b      	ldr	r3, [r7, #16]
 800fe5e:	1ad3      	subs	r3, r2, r3
 800fe60:	2b02      	cmp	r3, #2
 800fe62:	d901      	bls.n	800fe68 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 800fe64:	2303      	movs	r3, #3
 800fe66:	e2dd      	b.n	8010424 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800fe68:	4b20      	ldr	r3, [pc, #128]	@ (800feec <HAL_RCC_OscConfig+0x270>)
 800fe6a:	681b      	ldr	r3, [r3, #0]
 800fe6c:	f003 0302 	and.w	r3, r3, #2
 800fe70:	2b00      	cmp	r3, #0
 800fe72:	d1f0      	bne.n	800fe56 <HAL_RCC_OscConfig+0x1da>
 800fe74:	e000      	b.n	800fe78 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800fe76:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800fe78:	687b      	ldr	r3, [r7, #4]
 800fe7a:	681b      	ldr	r3, [r3, #0]
 800fe7c:	f003 0301 	and.w	r3, r3, #1
 800fe80:	2b00      	cmp	r3, #0
 800fe82:	d074      	beq.n	800ff6e <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 800fe84:	69bb      	ldr	r3, [r7, #24]
 800fe86:	2b08      	cmp	r3, #8
 800fe88:	d005      	beq.n	800fe96 <HAL_RCC_OscConfig+0x21a>
 800fe8a:	69bb      	ldr	r3, [r7, #24]
 800fe8c:	2b0c      	cmp	r3, #12
 800fe8e:	d10e      	bne.n	800feae <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 800fe90:	697b      	ldr	r3, [r7, #20]
 800fe92:	2b03      	cmp	r3, #3
 800fe94:	d10b      	bne.n	800feae <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800fe96:	4b15      	ldr	r3, [pc, #84]	@ (800feec <HAL_RCC_OscConfig+0x270>)
 800fe98:	681b      	ldr	r3, [r3, #0]
 800fe9a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800fe9e:	2b00      	cmp	r3, #0
 800fea0:	d064      	beq.n	800ff6c <HAL_RCC_OscConfig+0x2f0>
 800fea2:	687b      	ldr	r3, [r7, #4]
 800fea4:	685b      	ldr	r3, [r3, #4]
 800fea6:	2b00      	cmp	r3, #0
 800fea8:	d160      	bne.n	800ff6c <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 800feaa:	2301      	movs	r3, #1
 800feac:	e2ba      	b.n	8010424 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800feae:	687b      	ldr	r3, [r7, #4]
 800feb0:	685b      	ldr	r3, [r3, #4]
 800feb2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800feb6:	d106      	bne.n	800fec6 <HAL_RCC_OscConfig+0x24a>
 800feb8:	4b0c      	ldr	r3, [pc, #48]	@ (800feec <HAL_RCC_OscConfig+0x270>)
 800feba:	681b      	ldr	r3, [r3, #0]
 800febc:	4a0b      	ldr	r2, [pc, #44]	@ (800feec <HAL_RCC_OscConfig+0x270>)
 800febe:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800fec2:	6013      	str	r3, [r2, #0]
 800fec4:	e026      	b.n	800ff14 <HAL_RCC_OscConfig+0x298>
 800fec6:	687b      	ldr	r3, [r7, #4]
 800fec8:	685b      	ldr	r3, [r3, #4]
 800feca:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800fece:	d115      	bne.n	800fefc <HAL_RCC_OscConfig+0x280>
 800fed0:	4b06      	ldr	r3, [pc, #24]	@ (800feec <HAL_RCC_OscConfig+0x270>)
 800fed2:	681b      	ldr	r3, [r3, #0]
 800fed4:	4a05      	ldr	r2, [pc, #20]	@ (800feec <HAL_RCC_OscConfig+0x270>)
 800fed6:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800feda:	6013      	str	r3, [r2, #0]
 800fedc:	4b03      	ldr	r3, [pc, #12]	@ (800feec <HAL_RCC_OscConfig+0x270>)
 800fede:	681b      	ldr	r3, [r3, #0]
 800fee0:	4a02      	ldr	r2, [pc, #8]	@ (800feec <HAL_RCC_OscConfig+0x270>)
 800fee2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800fee6:	6013      	str	r3, [r2, #0]
 800fee8:	e014      	b.n	800ff14 <HAL_RCC_OscConfig+0x298>
 800feea:	bf00      	nop
 800feec:	40021000 	.word	0x40021000
 800fef0:	08017dc8 	.word	0x08017dc8
 800fef4:	20000000 	.word	0x20000000
 800fef8:	2000000c 	.word	0x2000000c
 800fefc:	4ba0      	ldr	r3, [pc, #640]	@ (8010180 <HAL_RCC_OscConfig+0x504>)
 800fefe:	681b      	ldr	r3, [r3, #0]
 800ff00:	4a9f      	ldr	r2, [pc, #636]	@ (8010180 <HAL_RCC_OscConfig+0x504>)
 800ff02:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800ff06:	6013      	str	r3, [r2, #0]
 800ff08:	4b9d      	ldr	r3, [pc, #628]	@ (8010180 <HAL_RCC_OscConfig+0x504>)
 800ff0a:	681b      	ldr	r3, [r3, #0]
 800ff0c:	4a9c      	ldr	r2, [pc, #624]	@ (8010180 <HAL_RCC_OscConfig+0x504>)
 800ff0e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800ff12:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800ff14:	687b      	ldr	r3, [r7, #4]
 800ff16:	685b      	ldr	r3, [r3, #4]
 800ff18:	2b00      	cmp	r3, #0
 800ff1a:	d013      	beq.n	800ff44 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800ff1c:	f7fb f9f2 	bl	800b304 <HAL_GetTick>
 800ff20:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800ff22:	e008      	b.n	800ff36 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800ff24:	f7fb f9ee 	bl	800b304 <HAL_GetTick>
 800ff28:	4602      	mov	r2, r0
 800ff2a:	693b      	ldr	r3, [r7, #16]
 800ff2c:	1ad3      	subs	r3, r2, r3
 800ff2e:	2b64      	cmp	r3, #100	@ 0x64
 800ff30:	d901      	bls.n	800ff36 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800ff32:	2303      	movs	r3, #3
 800ff34:	e276      	b.n	8010424 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800ff36:	4b92      	ldr	r3, [pc, #584]	@ (8010180 <HAL_RCC_OscConfig+0x504>)
 800ff38:	681b      	ldr	r3, [r3, #0]
 800ff3a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800ff3e:	2b00      	cmp	r3, #0
 800ff40:	d0f0      	beq.n	800ff24 <HAL_RCC_OscConfig+0x2a8>
 800ff42:	e014      	b.n	800ff6e <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800ff44:	f7fb f9de 	bl	800b304 <HAL_GetTick>
 800ff48:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800ff4a:	e008      	b.n	800ff5e <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800ff4c:	f7fb f9da 	bl	800b304 <HAL_GetTick>
 800ff50:	4602      	mov	r2, r0
 800ff52:	693b      	ldr	r3, [r7, #16]
 800ff54:	1ad3      	subs	r3, r2, r3
 800ff56:	2b64      	cmp	r3, #100	@ 0x64
 800ff58:	d901      	bls.n	800ff5e <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800ff5a:	2303      	movs	r3, #3
 800ff5c:	e262      	b.n	8010424 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800ff5e:	4b88      	ldr	r3, [pc, #544]	@ (8010180 <HAL_RCC_OscConfig+0x504>)
 800ff60:	681b      	ldr	r3, [r3, #0]
 800ff62:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800ff66:	2b00      	cmp	r3, #0
 800ff68:	d1f0      	bne.n	800ff4c <HAL_RCC_OscConfig+0x2d0>
 800ff6a:	e000      	b.n	800ff6e <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800ff6c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800ff6e:	687b      	ldr	r3, [r7, #4]
 800ff70:	681b      	ldr	r3, [r3, #0]
 800ff72:	f003 0302 	and.w	r3, r3, #2
 800ff76:	2b00      	cmp	r3, #0
 800ff78:	d060      	beq.n	801003c <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800ff7a:	69bb      	ldr	r3, [r7, #24]
 800ff7c:	2b04      	cmp	r3, #4
 800ff7e:	d005      	beq.n	800ff8c <HAL_RCC_OscConfig+0x310>
 800ff80:	69bb      	ldr	r3, [r7, #24]
 800ff82:	2b0c      	cmp	r3, #12
 800ff84:	d119      	bne.n	800ffba <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800ff86:	697b      	ldr	r3, [r7, #20]
 800ff88:	2b02      	cmp	r3, #2
 800ff8a:	d116      	bne.n	800ffba <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800ff8c:	4b7c      	ldr	r3, [pc, #496]	@ (8010180 <HAL_RCC_OscConfig+0x504>)
 800ff8e:	681b      	ldr	r3, [r3, #0]
 800ff90:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800ff94:	2b00      	cmp	r3, #0
 800ff96:	d005      	beq.n	800ffa4 <HAL_RCC_OscConfig+0x328>
 800ff98:	687b      	ldr	r3, [r7, #4]
 800ff9a:	68db      	ldr	r3, [r3, #12]
 800ff9c:	2b00      	cmp	r3, #0
 800ff9e:	d101      	bne.n	800ffa4 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 800ffa0:	2301      	movs	r3, #1
 800ffa2:	e23f      	b.n	8010424 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800ffa4:	4b76      	ldr	r3, [pc, #472]	@ (8010180 <HAL_RCC_OscConfig+0x504>)
 800ffa6:	685b      	ldr	r3, [r3, #4]
 800ffa8:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 800ffac:	687b      	ldr	r3, [r7, #4]
 800ffae:	691b      	ldr	r3, [r3, #16]
 800ffb0:	061b      	lsls	r3, r3, #24
 800ffb2:	4973      	ldr	r1, [pc, #460]	@ (8010180 <HAL_RCC_OscConfig+0x504>)
 800ffb4:	4313      	orrs	r3, r2
 800ffb6:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800ffb8:	e040      	b.n	801003c <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800ffba:	687b      	ldr	r3, [r7, #4]
 800ffbc:	68db      	ldr	r3, [r3, #12]
 800ffbe:	2b00      	cmp	r3, #0
 800ffc0:	d023      	beq.n	801000a <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800ffc2:	4b6f      	ldr	r3, [pc, #444]	@ (8010180 <HAL_RCC_OscConfig+0x504>)
 800ffc4:	681b      	ldr	r3, [r3, #0]
 800ffc6:	4a6e      	ldr	r2, [pc, #440]	@ (8010180 <HAL_RCC_OscConfig+0x504>)
 800ffc8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800ffcc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800ffce:	f7fb f999 	bl	800b304 <HAL_GetTick>
 800ffd2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800ffd4:	e008      	b.n	800ffe8 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800ffd6:	f7fb f995 	bl	800b304 <HAL_GetTick>
 800ffda:	4602      	mov	r2, r0
 800ffdc:	693b      	ldr	r3, [r7, #16]
 800ffde:	1ad3      	subs	r3, r2, r3
 800ffe0:	2b02      	cmp	r3, #2
 800ffe2:	d901      	bls.n	800ffe8 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 800ffe4:	2303      	movs	r3, #3
 800ffe6:	e21d      	b.n	8010424 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800ffe8:	4b65      	ldr	r3, [pc, #404]	@ (8010180 <HAL_RCC_OscConfig+0x504>)
 800ffea:	681b      	ldr	r3, [r3, #0]
 800ffec:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800fff0:	2b00      	cmp	r3, #0
 800fff2:	d0f0      	beq.n	800ffd6 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800fff4:	4b62      	ldr	r3, [pc, #392]	@ (8010180 <HAL_RCC_OscConfig+0x504>)
 800fff6:	685b      	ldr	r3, [r3, #4]
 800fff8:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 800fffc:	687b      	ldr	r3, [r7, #4]
 800fffe:	691b      	ldr	r3, [r3, #16]
 8010000:	061b      	lsls	r3, r3, #24
 8010002:	495f      	ldr	r1, [pc, #380]	@ (8010180 <HAL_RCC_OscConfig+0x504>)
 8010004:	4313      	orrs	r3, r2
 8010006:	604b      	str	r3, [r1, #4]
 8010008:	e018      	b.n	801003c <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 801000a:	4b5d      	ldr	r3, [pc, #372]	@ (8010180 <HAL_RCC_OscConfig+0x504>)
 801000c:	681b      	ldr	r3, [r3, #0]
 801000e:	4a5c      	ldr	r2, [pc, #368]	@ (8010180 <HAL_RCC_OscConfig+0x504>)
 8010010:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8010014:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8010016:	f7fb f975 	bl	800b304 <HAL_GetTick>
 801001a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 801001c:	e008      	b.n	8010030 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 801001e:	f7fb f971 	bl	800b304 <HAL_GetTick>
 8010022:	4602      	mov	r2, r0
 8010024:	693b      	ldr	r3, [r7, #16]
 8010026:	1ad3      	subs	r3, r2, r3
 8010028:	2b02      	cmp	r3, #2
 801002a:	d901      	bls.n	8010030 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 801002c:	2303      	movs	r3, #3
 801002e:	e1f9      	b.n	8010424 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8010030:	4b53      	ldr	r3, [pc, #332]	@ (8010180 <HAL_RCC_OscConfig+0x504>)
 8010032:	681b      	ldr	r3, [r3, #0]
 8010034:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8010038:	2b00      	cmp	r3, #0
 801003a:	d1f0      	bne.n	801001e <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 801003c:	687b      	ldr	r3, [r7, #4]
 801003e:	681b      	ldr	r3, [r3, #0]
 8010040:	f003 0308 	and.w	r3, r3, #8
 8010044:	2b00      	cmp	r3, #0
 8010046:	d03c      	beq.n	80100c2 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8010048:	687b      	ldr	r3, [r7, #4]
 801004a:	695b      	ldr	r3, [r3, #20]
 801004c:	2b00      	cmp	r3, #0
 801004e:	d01c      	beq.n	801008a <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8010050:	4b4b      	ldr	r3, [pc, #300]	@ (8010180 <HAL_RCC_OscConfig+0x504>)
 8010052:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8010056:	4a4a      	ldr	r2, [pc, #296]	@ (8010180 <HAL_RCC_OscConfig+0x504>)
 8010058:	f043 0301 	orr.w	r3, r3, #1
 801005c:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8010060:	f7fb f950 	bl	800b304 <HAL_GetTick>
 8010064:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8010066:	e008      	b.n	801007a <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8010068:	f7fb f94c 	bl	800b304 <HAL_GetTick>
 801006c:	4602      	mov	r2, r0
 801006e:	693b      	ldr	r3, [r7, #16]
 8010070:	1ad3      	subs	r3, r2, r3
 8010072:	2b02      	cmp	r3, #2
 8010074:	d901      	bls.n	801007a <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8010076:	2303      	movs	r3, #3
 8010078:	e1d4      	b.n	8010424 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 801007a:	4b41      	ldr	r3, [pc, #260]	@ (8010180 <HAL_RCC_OscConfig+0x504>)
 801007c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8010080:	f003 0302 	and.w	r3, r3, #2
 8010084:	2b00      	cmp	r3, #0
 8010086:	d0ef      	beq.n	8010068 <HAL_RCC_OscConfig+0x3ec>
 8010088:	e01b      	b.n	80100c2 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 801008a:	4b3d      	ldr	r3, [pc, #244]	@ (8010180 <HAL_RCC_OscConfig+0x504>)
 801008c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8010090:	4a3b      	ldr	r2, [pc, #236]	@ (8010180 <HAL_RCC_OscConfig+0x504>)
 8010092:	f023 0301 	bic.w	r3, r3, #1
 8010096:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 801009a:	f7fb f933 	bl	800b304 <HAL_GetTick>
 801009e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80100a0:	e008      	b.n	80100b4 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80100a2:	f7fb f92f 	bl	800b304 <HAL_GetTick>
 80100a6:	4602      	mov	r2, r0
 80100a8:	693b      	ldr	r3, [r7, #16]
 80100aa:	1ad3      	subs	r3, r2, r3
 80100ac:	2b02      	cmp	r3, #2
 80100ae:	d901      	bls.n	80100b4 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80100b0:	2303      	movs	r3, #3
 80100b2:	e1b7      	b.n	8010424 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80100b4:	4b32      	ldr	r3, [pc, #200]	@ (8010180 <HAL_RCC_OscConfig+0x504>)
 80100b6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80100ba:	f003 0302 	and.w	r3, r3, #2
 80100be:	2b00      	cmp	r3, #0
 80100c0:	d1ef      	bne.n	80100a2 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80100c2:	687b      	ldr	r3, [r7, #4]
 80100c4:	681b      	ldr	r3, [r3, #0]
 80100c6:	f003 0304 	and.w	r3, r3, #4
 80100ca:	2b00      	cmp	r3, #0
 80100cc:	f000 80a6 	beq.w	801021c <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80100d0:	2300      	movs	r3, #0
 80100d2:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80100d4:	4b2a      	ldr	r3, [pc, #168]	@ (8010180 <HAL_RCC_OscConfig+0x504>)
 80100d6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80100d8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80100dc:	2b00      	cmp	r3, #0
 80100de:	d10d      	bne.n	80100fc <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80100e0:	4b27      	ldr	r3, [pc, #156]	@ (8010180 <HAL_RCC_OscConfig+0x504>)
 80100e2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80100e4:	4a26      	ldr	r2, [pc, #152]	@ (8010180 <HAL_RCC_OscConfig+0x504>)
 80100e6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80100ea:	6593      	str	r3, [r2, #88]	@ 0x58
 80100ec:	4b24      	ldr	r3, [pc, #144]	@ (8010180 <HAL_RCC_OscConfig+0x504>)
 80100ee:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80100f0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80100f4:	60bb      	str	r3, [r7, #8]
 80100f6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80100f8:	2301      	movs	r3, #1
 80100fa:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80100fc:	4b21      	ldr	r3, [pc, #132]	@ (8010184 <HAL_RCC_OscConfig+0x508>)
 80100fe:	681b      	ldr	r3, [r3, #0]
 8010100:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8010104:	2b00      	cmp	r3, #0
 8010106:	d118      	bne.n	801013a <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8010108:	4b1e      	ldr	r3, [pc, #120]	@ (8010184 <HAL_RCC_OscConfig+0x508>)
 801010a:	681b      	ldr	r3, [r3, #0]
 801010c:	4a1d      	ldr	r2, [pc, #116]	@ (8010184 <HAL_RCC_OscConfig+0x508>)
 801010e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8010112:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8010114:	f7fb f8f6 	bl	800b304 <HAL_GetTick>
 8010118:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 801011a:	e008      	b.n	801012e <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 801011c:	f7fb f8f2 	bl	800b304 <HAL_GetTick>
 8010120:	4602      	mov	r2, r0
 8010122:	693b      	ldr	r3, [r7, #16]
 8010124:	1ad3      	subs	r3, r2, r3
 8010126:	2b02      	cmp	r3, #2
 8010128:	d901      	bls.n	801012e <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 801012a:	2303      	movs	r3, #3
 801012c:	e17a      	b.n	8010424 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 801012e:	4b15      	ldr	r3, [pc, #84]	@ (8010184 <HAL_RCC_OscConfig+0x508>)
 8010130:	681b      	ldr	r3, [r3, #0]
 8010132:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8010136:	2b00      	cmp	r3, #0
 8010138:	d0f0      	beq.n	801011c <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 801013a:	687b      	ldr	r3, [r7, #4]
 801013c:	689b      	ldr	r3, [r3, #8]
 801013e:	2b01      	cmp	r3, #1
 8010140:	d108      	bne.n	8010154 <HAL_RCC_OscConfig+0x4d8>
 8010142:	4b0f      	ldr	r3, [pc, #60]	@ (8010180 <HAL_RCC_OscConfig+0x504>)
 8010144:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8010148:	4a0d      	ldr	r2, [pc, #52]	@ (8010180 <HAL_RCC_OscConfig+0x504>)
 801014a:	f043 0301 	orr.w	r3, r3, #1
 801014e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8010152:	e029      	b.n	80101a8 <HAL_RCC_OscConfig+0x52c>
 8010154:	687b      	ldr	r3, [r7, #4]
 8010156:	689b      	ldr	r3, [r3, #8]
 8010158:	2b05      	cmp	r3, #5
 801015a:	d115      	bne.n	8010188 <HAL_RCC_OscConfig+0x50c>
 801015c:	4b08      	ldr	r3, [pc, #32]	@ (8010180 <HAL_RCC_OscConfig+0x504>)
 801015e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8010162:	4a07      	ldr	r2, [pc, #28]	@ (8010180 <HAL_RCC_OscConfig+0x504>)
 8010164:	f043 0304 	orr.w	r3, r3, #4
 8010168:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 801016c:	4b04      	ldr	r3, [pc, #16]	@ (8010180 <HAL_RCC_OscConfig+0x504>)
 801016e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8010172:	4a03      	ldr	r2, [pc, #12]	@ (8010180 <HAL_RCC_OscConfig+0x504>)
 8010174:	f043 0301 	orr.w	r3, r3, #1
 8010178:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 801017c:	e014      	b.n	80101a8 <HAL_RCC_OscConfig+0x52c>
 801017e:	bf00      	nop
 8010180:	40021000 	.word	0x40021000
 8010184:	40007000 	.word	0x40007000
 8010188:	4b9c      	ldr	r3, [pc, #624]	@ (80103fc <HAL_RCC_OscConfig+0x780>)
 801018a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 801018e:	4a9b      	ldr	r2, [pc, #620]	@ (80103fc <HAL_RCC_OscConfig+0x780>)
 8010190:	f023 0301 	bic.w	r3, r3, #1
 8010194:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8010198:	4b98      	ldr	r3, [pc, #608]	@ (80103fc <HAL_RCC_OscConfig+0x780>)
 801019a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 801019e:	4a97      	ldr	r2, [pc, #604]	@ (80103fc <HAL_RCC_OscConfig+0x780>)
 80101a0:	f023 0304 	bic.w	r3, r3, #4
 80101a4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80101a8:	687b      	ldr	r3, [r7, #4]
 80101aa:	689b      	ldr	r3, [r3, #8]
 80101ac:	2b00      	cmp	r3, #0
 80101ae:	d016      	beq.n	80101de <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80101b0:	f7fb f8a8 	bl	800b304 <HAL_GetTick>
 80101b4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80101b6:	e00a      	b.n	80101ce <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80101b8:	f7fb f8a4 	bl	800b304 <HAL_GetTick>
 80101bc:	4602      	mov	r2, r0
 80101be:	693b      	ldr	r3, [r7, #16]
 80101c0:	1ad3      	subs	r3, r2, r3
 80101c2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80101c6:	4293      	cmp	r3, r2
 80101c8:	d901      	bls.n	80101ce <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 80101ca:	2303      	movs	r3, #3
 80101cc:	e12a      	b.n	8010424 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80101ce:	4b8b      	ldr	r3, [pc, #556]	@ (80103fc <HAL_RCC_OscConfig+0x780>)
 80101d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80101d4:	f003 0302 	and.w	r3, r3, #2
 80101d8:	2b00      	cmp	r3, #0
 80101da:	d0ed      	beq.n	80101b8 <HAL_RCC_OscConfig+0x53c>
 80101dc:	e015      	b.n	801020a <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80101de:	f7fb f891 	bl	800b304 <HAL_GetTick>
 80101e2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80101e4:	e00a      	b.n	80101fc <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80101e6:	f7fb f88d 	bl	800b304 <HAL_GetTick>
 80101ea:	4602      	mov	r2, r0
 80101ec:	693b      	ldr	r3, [r7, #16]
 80101ee:	1ad3      	subs	r3, r2, r3
 80101f0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80101f4:	4293      	cmp	r3, r2
 80101f6:	d901      	bls.n	80101fc <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80101f8:	2303      	movs	r3, #3
 80101fa:	e113      	b.n	8010424 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80101fc:	4b7f      	ldr	r3, [pc, #508]	@ (80103fc <HAL_RCC_OscConfig+0x780>)
 80101fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8010202:	f003 0302 	and.w	r3, r3, #2
 8010206:	2b00      	cmp	r3, #0
 8010208:	d1ed      	bne.n	80101e6 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 801020a:	7ffb      	ldrb	r3, [r7, #31]
 801020c:	2b01      	cmp	r3, #1
 801020e:	d105      	bne.n	801021c <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8010210:	4b7a      	ldr	r3, [pc, #488]	@ (80103fc <HAL_RCC_OscConfig+0x780>)
 8010212:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8010214:	4a79      	ldr	r2, [pc, #484]	@ (80103fc <HAL_RCC_OscConfig+0x780>)
 8010216:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 801021a:	6593      	str	r3, [r2, #88]	@ 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 801021c:	687b      	ldr	r3, [r7, #4]
 801021e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8010220:	2b00      	cmp	r3, #0
 8010222:	f000 80fe 	beq.w	8010422 <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8010226:	687b      	ldr	r3, [r7, #4]
 8010228:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801022a:	2b02      	cmp	r3, #2
 801022c:	f040 80d0 	bne.w	80103d0 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8010230:	4b72      	ldr	r3, [pc, #456]	@ (80103fc <HAL_RCC_OscConfig+0x780>)
 8010232:	68db      	ldr	r3, [r3, #12]
 8010234:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8010236:	697b      	ldr	r3, [r7, #20]
 8010238:	f003 0203 	and.w	r2, r3, #3
 801023c:	687b      	ldr	r3, [r7, #4]
 801023e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010240:	429a      	cmp	r2, r3
 8010242:	d130      	bne.n	80102a6 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8010244:	697b      	ldr	r3, [r7, #20]
 8010246:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 801024a:	687b      	ldr	r3, [r7, #4]
 801024c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801024e:	3b01      	subs	r3, #1
 8010250:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8010252:	429a      	cmp	r2, r3
 8010254:	d127      	bne.n	80102a6 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8010256:	697b      	ldr	r3, [r7, #20]
 8010258:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 801025c:	687b      	ldr	r3, [r7, #4]
 801025e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8010260:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8010262:	429a      	cmp	r2, r3
 8010264:	d11f      	bne.n	80102a6 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8010266:	697b      	ldr	r3, [r7, #20]
 8010268:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 801026c:	687a      	ldr	r2, [r7, #4]
 801026e:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8010270:	2a07      	cmp	r2, #7
 8010272:	bf14      	ite	ne
 8010274:	2201      	movne	r2, #1
 8010276:	2200      	moveq	r2, #0
 8010278:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 801027a:	4293      	cmp	r3, r2
 801027c:	d113      	bne.n	80102a6 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 801027e:	697b      	ldr	r3, [r7, #20]
 8010280:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8010284:	687b      	ldr	r3, [r7, #4]
 8010286:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8010288:	085b      	lsrs	r3, r3, #1
 801028a:	3b01      	subs	r3, #1
 801028c:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 801028e:	429a      	cmp	r2, r3
 8010290:	d109      	bne.n	80102a6 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8010292:	697b      	ldr	r3, [r7, #20]
 8010294:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8010298:	687b      	ldr	r3, [r7, #4]
 801029a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801029c:	085b      	lsrs	r3, r3, #1
 801029e:	3b01      	subs	r3, #1
 80102a0:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80102a2:	429a      	cmp	r2, r3
 80102a4:	d06e      	beq.n	8010384 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80102a6:	69bb      	ldr	r3, [r7, #24]
 80102a8:	2b0c      	cmp	r3, #12
 80102aa:	d069      	beq.n	8010380 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80102ac:	4b53      	ldr	r3, [pc, #332]	@ (80103fc <HAL_RCC_OscConfig+0x780>)
 80102ae:	681b      	ldr	r3, [r3, #0]
 80102b0:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80102b4:	2b00      	cmp	r3, #0
 80102b6:	d105      	bne.n	80102c4 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 80102b8:	4b50      	ldr	r3, [pc, #320]	@ (80103fc <HAL_RCC_OscConfig+0x780>)
 80102ba:	681b      	ldr	r3, [r3, #0]
 80102bc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80102c0:	2b00      	cmp	r3, #0
 80102c2:	d001      	beq.n	80102c8 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 80102c4:	2301      	movs	r3, #1
 80102c6:	e0ad      	b.n	8010424 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80102c8:	4b4c      	ldr	r3, [pc, #304]	@ (80103fc <HAL_RCC_OscConfig+0x780>)
 80102ca:	681b      	ldr	r3, [r3, #0]
 80102cc:	4a4b      	ldr	r2, [pc, #300]	@ (80103fc <HAL_RCC_OscConfig+0x780>)
 80102ce:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80102d2:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80102d4:	f7fb f816 	bl	800b304 <HAL_GetTick>
 80102d8:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80102da:	e008      	b.n	80102ee <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80102dc:	f7fb f812 	bl	800b304 <HAL_GetTick>
 80102e0:	4602      	mov	r2, r0
 80102e2:	693b      	ldr	r3, [r7, #16]
 80102e4:	1ad3      	subs	r3, r2, r3
 80102e6:	2b02      	cmp	r3, #2
 80102e8:	d901      	bls.n	80102ee <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 80102ea:	2303      	movs	r3, #3
 80102ec:	e09a      	b.n	8010424 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80102ee:	4b43      	ldr	r3, [pc, #268]	@ (80103fc <HAL_RCC_OscConfig+0x780>)
 80102f0:	681b      	ldr	r3, [r3, #0]
 80102f2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80102f6:	2b00      	cmp	r3, #0
 80102f8:	d1f0      	bne.n	80102dc <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80102fa:	4b40      	ldr	r3, [pc, #256]	@ (80103fc <HAL_RCC_OscConfig+0x780>)
 80102fc:	68da      	ldr	r2, [r3, #12]
 80102fe:	4b40      	ldr	r3, [pc, #256]	@ (8010400 <HAL_RCC_OscConfig+0x784>)
 8010300:	4013      	ands	r3, r2
 8010302:	687a      	ldr	r2, [r7, #4]
 8010304:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8010306:	687a      	ldr	r2, [r7, #4]
 8010308:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 801030a:	3a01      	subs	r2, #1
 801030c:	0112      	lsls	r2, r2, #4
 801030e:	4311      	orrs	r1, r2
 8010310:	687a      	ldr	r2, [r7, #4]
 8010312:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8010314:	0212      	lsls	r2, r2, #8
 8010316:	4311      	orrs	r1, r2
 8010318:	687a      	ldr	r2, [r7, #4]
 801031a:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 801031c:	0852      	lsrs	r2, r2, #1
 801031e:	3a01      	subs	r2, #1
 8010320:	0552      	lsls	r2, r2, #21
 8010322:	4311      	orrs	r1, r2
 8010324:	687a      	ldr	r2, [r7, #4]
 8010326:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8010328:	0852      	lsrs	r2, r2, #1
 801032a:	3a01      	subs	r2, #1
 801032c:	0652      	lsls	r2, r2, #25
 801032e:	4311      	orrs	r1, r2
 8010330:	687a      	ldr	r2, [r7, #4]
 8010332:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8010334:	0912      	lsrs	r2, r2, #4
 8010336:	0452      	lsls	r2, r2, #17
 8010338:	430a      	orrs	r2, r1
 801033a:	4930      	ldr	r1, [pc, #192]	@ (80103fc <HAL_RCC_OscConfig+0x780>)
 801033c:	4313      	orrs	r3, r2
 801033e:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8010340:	4b2e      	ldr	r3, [pc, #184]	@ (80103fc <HAL_RCC_OscConfig+0x780>)
 8010342:	681b      	ldr	r3, [r3, #0]
 8010344:	4a2d      	ldr	r2, [pc, #180]	@ (80103fc <HAL_RCC_OscConfig+0x780>)
 8010346:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 801034a:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 801034c:	4b2b      	ldr	r3, [pc, #172]	@ (80103fc <HAL_RCC_OscConfig+0x780>)
 801034e:	68db      	ldr	r3, [r3, #12]
 8010350:	4a2a      	ldr	r2, [pc, #168]	@ (80103fc <HAL_RCC_OscConfig+0x780>)
 8010352:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8010356:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8010358:	f7fa ffd4 	bl	800b304 <HAL_GetTick>
 801035c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 801035e:	e008      	b.n	8010372 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8010360:	f7fa ffd0 	bl	800b304 <HAL_GetTick>
 8010364:	4602      	mov	r2, r0
 8010366:	693b      	ldr	r3, [r7, #16]
 8010368:	1ad3      	subs	r3, r2, r3
 801036a:	2b02      	cmp	r3, #2
 801036c:	d901      	bls.n	8010372 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 801036e:	2303      	movs	r3, #3
 8010370:	e058      	b.n	8010424 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8010372:	4b22      	ldr	r3, [pc, #136]	@ (80103fc <HAL_RCC_OscConfig+0x780>)
 8010374:	681b      	ldr	r3, [r3, #0]
 8010376:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 801037a:	2b00      	cmp	r3, #0
 801037c:	d0f0      	beq.n	8010360 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 801037e:	e050      	b.n	8010422 <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8010380:	2301      	movs	r3, #1
 8010382:	e04f      	b.n	8010424 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8010384:	4b1d      	ldr	r3, [pc, #116]	@ (80103fc <HAL_RCC_OscConfig+0x780>)
 8010386:	681b      	ldr	r3, [r3, #0]
 8010388:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 801038c:	2b00      	cmp	r3, #0
 801038e:	d148      	bne.n	8010422 <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8010390:	4b1a      	ldr	r3, [pc, #104]	@ (80103fc <HAL_RCC_OscConfig+0x780>)
 8010392:	681b      	ldr	r3, [r3, #0]
 8010394:	4a19      	ldr	r2, [pc, #100]	@ (80103fc <HAL_RCC_OscConfig+0x780>)
 8010396:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 801039a:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 801039c:	4b17      	ldr	r3, [pc, #92]	@ (80103fc <HAL_RCC_OscConfig+0x780>)
 801039e:	68db      	ldr	r3, [r3, #12]
 80103a0:	4a16      	ldr	r2, [pc, #88]	@ (80103fc <HAL_RCC_OscConfig+0x780>)
 80103a2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80103a6:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80103a8:	f7fa ffac 	bl	800b304 <HAL_GetTick>
 80103ac:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80103ae:	e008      	b.n	80103c2 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80103b0:	f7fa ffa8 	bl	800b304 <HAL_GetTick>
 80103b4:	4602      	mov	r2, r0
 80103b6:	693b      	ldr	r3, [r7, #16]
 80103b8:	1ad3      	subs	r3, r2, r3
 80103ba:	2b02      	cmp	r3, #2
 80103bc:	d901      	bls.n	80103c2 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 80103be:	2303      	movs	r3, #3
 80103c0:	e030      	b.n	8010424 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80103c2:	4b0e      	ldr	r3, [pc, #56]	@ (80103fc <HAL_RCC_OscConfig+0x780>)
 80103c4:	681b      	ldr	r3, [r3, #0]
 80103c6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80103ca:	2b00      	cmp	r3, #0
 80103cc:	d0f0      	beq.n	80103b0 <HAL_RCC_OscConfig+0x734>
 80103ce:	e028      	b.n	8010422 <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80103d0:	69bb      	ldr	r3, [r7, #24]
 80103d2:	2b0c      	cmp	r3, #12
 80103d4:	d023      	beq.n	801041e <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80103d6:	4b09      	ldr	r3, [pc, #36]	@ (80103fc <HAL_RCC_OscConfig+0x780>)
 80103d8:	681b      	ldr	r3, [r3, #0]
 80103da:	4a08      	ldr	r2, [pc, #32]	@ (80103fc <HAL_RCC_OscConfig+0x780>)
 80103dc:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80103e0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80103e2:	f7fa ff8f 	bl	800b304 <HAL_GetTick>
 80103e6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80103e8:	e00c      	b.n	8010404 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80103ea:	f7fa ff8b 	bl	800b304 <HAL_GetTick>
 80103ee:	4602      	mov	r2, r0
 80103f0:	693b      	ldr	r3, [r7, #16]
 80103f2:	1ad3      	subs	r3, r2, r3
 80103f4:	2b02      	cmp	r3, #2
 80103f6:	d905      	bls.n	8010404 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 80103f8:	2303      	movs	r3, #3
 80103fa:	e013      	b.n	8010424 <HAL_RCC_OscConfig+0x7a8>
 80103fc:	40021000 	.word	0x40021000
 8010400:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8010404:	4b09      	ldr	r3, [pc, #36]	@ (801042c <HAL_RCC_OscConfig+0x7b0>)
 8010406:	681b      	ldr	r3, [r3, #0]
 8010408:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 801040c:	2b00      	cmp	r3, #0
 801040e:	d1ec      	bne.n	80103ea <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8010410:	4b06      	ldr	r3, [pc, #24]	@ (801042c <HAL_RCC_OscConfig+0x7b0>)
 8010412:	68da      	ldr	r2, [r3, #12]
 8010414:	4905      	ldr	r1, [pc, #20]	@ (801042c <HAL_RCC_OscConfig+0x7b0>)
 8010416:	4b06      	ldr	r3, [pc, #24]	@ (8010430 <HAL_RCC_OscConfig+0x7b4>)
 8010418:	4013      	ands	r3, r2
 801041a:	60cb      	str	r3, [r1, #12]
 801041c:	e001      	b.n	8010422 <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 801041e:	2301      	movs	r3, #1
 8010420:	e000      	b.n	8010424 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8010422:	2300      	movs	r3, #0
}
 8010424:	4618      	mov	r0, r3
 8010426:	3720      	adds	r7, #32
 8010428:	46bd      	mov	sp, r7
 801042a:	bd80      	pop	{r7, pc}
 801042c:	40021000 	.word	0x40021000
 8010430:	feeefffc 	.word	0xfeeefffc

08010434 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8010434:	b580      	push	{r7, lr}
 8010436:	b084      	sub	sp, #16
 8010438:	af00      	add	r7, sp, #0
 801043a:	6078      	str	r0, [r7, #4]
 801043c:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 801043e:	687b      	ldr	r3, [r7, #4]
 8010440:	2b00      	cmp	r3, #0
 8010442:	d101      	bne.n	8010448 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8010444:	2301      	movs	r3, #1
 8010446:	e0e7      	b.n	8010618 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8010448:	4b75      	ldr	r3, [pc, #468]	@ (8010620 <HAL_RCC_ClockConfig+0x1ec>)
 801044a:	681b      	ldr	r3, [r3, #0]
 801044c:	f003 0307 	and.w	r3, r3, #7
 8010450:	683a      	ldr	r2, [r7, #0]
 8010452:	429a      	cmp	r2, r3
 8010454:	d910      	bls.n	8010478 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8010456:	4b72      	ldr	r3, [pc, #456]	@ (8010620 <HAL_RCC_ClockConfig+0x1ec>)
 8010458:	681b      	ldr	r3, [r3, #0]
 801045a:	f023 0207 	bic.w	r2, r3, #7
 801045e:	4970      	ldr	r1, [pc, #448]	@ (8010620 <HAL_RCC_ClockConfig+0x1ec>)
 8010460:	683b      	ldr	r3, [r7, #0]
 8010462:	4313      	orrs	r3, r2
 8010464:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8010466:	4b6e      	ldr	r3, [pc, #440]	@ (8010620 <HAL_RCC_ClockConfig+0x1ec>)
 8010468:	681b      	ldr	r3, [r3, #0]
 801046a:	f003 0307 	and.w	r3, r3, #7
 801046e:	683a      	ldr	r2, [r7, #0]
 8010470:	429a      	cmp	r2, r3
 8010472:	d001      	beq.n	8010478 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8010474:	2301      	movs	r3, #1
 8010476:	e0cf      	b.n	8010618 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8010478:	687b      	ldr	r3, [r7, #4]
 801047a:	681b      	ldr	r3, [r3, #0]
 801047c:	f003 0302 	and.w	r3, r3, #2
 8010480:	2b00      	cmp	r3, #0
 8010482:	d010      	beq.n	80104a6 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8010484:	687b      	ldr	r3, [r7, #4]
 8010486:	689a      	ldr	r2, [r3, #8]
 8010488:	4b66      	ldr	r3, [pc, #408]	@ (8010624 <HAL_RCC_ClockConfig+0x1f0>)
 801048a:	689b      	ldr	r3, [r3, #8]
 801048c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8010490:	429a      	cmp	r2, r3
 8010492:	d908      	bls.n	80104a6 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8010494:	4b63      	ldr	r3, [pc, #396]	@ (8010624 <HAL_RCC_ClockConfig+0x1f0>)
 8010496:	689b      	ldr	r3, [r3, #8]
 8010498:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 801049c:	687b      	ldr	r3, [r7, #4]
 801049e:	689b      	ldr	r3, [r3, #8]
 80104a0:	4960      	ldr	r1, [pc, #384]	@ (8010624 <HAL_RCC_ClockConfig+0x1f0>)
 80104a2:	4313      	orrs	r3, r2
 80104a4:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80104a6:	687b      	ldr	r3, [r7, #4]
 80104a8:	681b      	ldr	r3, [r3, #0]
 80104aa:	f003 0301 	and.w	r3, r3, #1
 80104ae:	2b00      	cmp	r3, #0
 80104b0:	d04c      	beq.n	801054c <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80104b2:	687b      	ldr	r3, [r7, #4]
 80104b4:	685b      	ldr	r3, [r3, #4]
 80104b6:	2b03      	cmp	r3, #3
 80104b8:	d107      	bne.n	80104ca <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80104ba:	4b5a      	ldr	r3, [pc, #360]	@ (8010624 <HAL_RCC_ClockConfig+0x1f0>)
 80104bc:	681b      	ldr	r3, [r3, #0]
 80104be:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80104c2:	2b00      	cmp	r3, #0
 80104c4:	d121      	bne.n	801050a <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 80104c6:	2301      	movs	r3, #1
 80104c8:	e0a6      	b.n	8010618 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80104ca:	687b      	ldr	r3, [r7, #4]
 80104cc:	685b      	ldr	r3, [r3, #4]
 80104ce:	2b02      	cmp	r3, #2
 80104d0:	d107      	bne.n	80104e2 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80104d2:	4b54      	ldr	r3, [pc, #336]	@ (8010624 <HAL_RCC_ClockConfig+0x1f0>)
 80104d4:	681b      	ldr	r3, [r3, #0]
 80104d6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80104da:	2b00      	cmp	r3, #0
 80104dc:	d115      	bne.n	801050a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80104de:	2301      	movs	r3, #1
 80104e0:	e09a      	b.n	8010618 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80104e2:	687b      	ldr	r3, [r7, #4]
 80104e4:	685b      	ldr	r3, [r3, #4]
 80104e6:	2b00      	cmp	r3, #0
 80104e8:	d107      	bne.n	80104fa <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80104ea:	4b4e      	ldr	r3, [pc, #312]	@ (8010624 <HAL_RCC_ClockConfig+0x1f0>)
 80104ec:	681b      	ldr	r3, [r3, #0]
 80104ee:	f003 0302 	and.w	r3, r3, #2
 80104f2:	2b00      	cmp	r3, #0
 80104f4:	d109      	bne.n	801050a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80104f6:	2301      	movs	r3, #1
 80104f8:	e08e      	b.n	8010618 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80104fa:	4b4a      	ldr	r3, [pc, #296]	@ (8010624 <HAL_RCC_ClockConfig+0x1f0>)
 80104fc:	681b      	ldr	r3, [r3, #0]
 80104fe:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8010502:	2b00      	cmp	r3, #0
 8010504:	d101      	bne.n	801050a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8010506:	2301      	movs	r3, #1
 8010508:	e086      	b.n	8010618 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 801050a:	4b46      	ldr	r3, [pc, #280]	@ (8010624 <HAL_RCC_ClockConfig+0x1f0>)
 801050c:	689b      	ldr	r3, [r3, #8]
 801050e:	f023 0203 	bic.w	r2, r3, #3
 8010512:	687b      	ldr	r3, [r7, #4]
 8010514:	685b      	ldr	r3, [r3, #4]
 8010516:	4943      	ldr	r1, [pc, #268]	@ (8010624 <HAL_RCC_ClockConfig+0x1f0>)
 8010518:	4313      	orrs	r3, r2
 801051a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 801051c:	f7fa fef2 	bl	800b304 <HAL_GetTick>
 8010520:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8010522:	e00a      	b.n	801053a <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8010524:	f7fa feee 	bl	800b304 <HAL_GetTick>
 8010528:	4602      	mov	r2, r0
 801052a:	68fb      	ldr	r3, [r7, #12]
 801052c:	1ad3      	subs	r3, r2, r3
 801052e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8010532:	4293      	cmp	r3, r2
 8010534:	d901      	bls.n	801053a <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8010536:	2303      	movs	r3, #3
 8010538:	e06e      	b.n	8010618 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 801053a:	4b3a      	ldr	r3, [pc, #232]	@ (8010624 <HAL_RCC_ClockConfig+0x1f0>)
 801053c:	689b      	ldr	r3, [r3, #8]
 801053e:	f003 020c 	and.w	r2, r3, #12
 8010542:	687b      	ldr	r3, [r7, #4]
 8010544:	685b      	ldr	r3, [r3, #4]
 8010546:	009b      	lsls	r3, r3, #2
 8010548:	429a      	cmp	r2, r3
 801054a:	d1eb      	bne.n	8010524 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 801054c:	687b      	ldr	r3, [r7, #4]
 801054e:	681b      	ldr	r3, [r3, #0]
 8010550:	f003 0302 	and.w	r3, r3, #2
 8010554:	2b00      	cmp	r3, #0
 8010556:	d010      	beq.n	801057a <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8010558:	687b      	ldr	r3, [r7, #4]
 801055a:	689a      	ldr	r2, [r3, #8]
 801055c:	4b31      	ldr	r3, [pc, #196]	@ (8010624 <HAL_RCC_ClockConfig+0x1f0>)
 801055e:	689b      	ldr	r3, [r3, #8]
 8010560:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8010564:	429a      	cmp	r2, r3
 8010566:	d208      	bcs.n	801057a <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8010568:	4b2e      	ldr	r3, [pc, #184]	@ (8010624 <HAL_RCC_ClockConfig+0x1f0>)
 801056a:	689b      	ldr	r3, [r3, #8]
 801056c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8010570:	687b      	ldr	r3, [r7, #4]
 8010572:	689b      	ldr	r3, [r3, #8]
 8010574:	492b      	ldr	r1, [pc, #172]	@ (8010624 <HAL_RCC_ClockConfig+0x1f0>)
 8010576:	4313      	orrs	r3, r2
 8010578:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 801057a:	4b29      	ldr	r3, [pc, #164]	@ (8010620 <HAL_RCC_ClockConfig+0x1ec>)
 801057c:	681b      	ldr	r3, [r3, #0]
 801057e:	f003 0307 	and.w	r3, r3, #7
 8010582:	683a      	ldr	r2, [r7, #0]
 8010584:	429a      	cmp	r2, r3
 8010586:	d210      	bcs.n	80105aa <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8010588:	4b25      	ldr	r3, [pc, #148]	@ (8010620 <HAL_RCC_ClockConfig+0x1ec>)
 801058a:	681b      	ldr	r3, [r3, #0]
 801058c:	f023 0207 	bic.w	r2, r3, #7
 8010590:	4923      	ldr	r1, [pc, #140]	@ (8010620 <HAL_RCC_ClockConfig+0x1ec>)
 8010592:	683b      	ldr	r3, [r7, #0]
 8010594:	4313      	orrs	r3, r2
 8010596:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8010598:	4b21      	ldr	r3, [pc, #132]	@ (8010620 <HAL_RCC_ClockConfig+0x1ec>)
 801059a:	681b      	ldr	r3, [r3, #0]
 801059c:	f003 0307 	and.w	r3, r3, #7
 80105a0:	683a      	ldr	r2, [r7, #0]
 80105a2:	429a      	cmp	r2, r3
 80105a4:	d001      	beq.n	80105aa <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 80105a6:	2301      	movs	r3, #1
 80105a8:	e036      	b.n	8010618 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80105aa:	687b      	ldr	r3, [r7, #4]
 80105ac:	681b      	ldr	r3, [r3, #0]
 80105ae:	f003 0304 	and.w	r3, r3, #4
 80105b2:	2b00      	cmp	r3, #0
 80105b4:	d008      	beq.n	80105c8 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80105b6:	4b1b      	ldr	r3, [pc, #108]	@ (8010624 <HAL_RCC_ClockConfig+0x1f0>)
 80105b8:	689b      	ldr	r3, [r3, #8]
 80105ba:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80105be:	687b      	ldr	r3, [r7, #4]
 80105c0:	68db      	ldr	r3, [r3, #12]
 80105c2:	4918      	ldr	r1, [pc, #96]	@ (8010624 <HAL_RCC_ClockConfig+0x1f0>)
 80105c4:	4313      	orrs	r3, r2
 80105c6:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80105c8:	687b      	ldr	r3, [r7, #4]
 80105ca:	681b      	ldr	r3, [r3, #0]
 80105cc:	f003 0308 	and.w	r3, r3, #8
 80105d0:	2b00      	cmp	r3, #0
 80105d2:	d009      	beq.n	80105e8 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80105d4:	4b13      	ldr	r3, [pc, #76]	@ (8010624 <HAL_RCC_ClockConfig+0x1f0>)
 80105d6:	689b      	ldr	r3, [r3, #8]
 80105d8:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80105dc:	687b      	ldr	r3, [r7, #4]
 80105de:	691b      	ldr	r3, [r3, #16]
 80105e0:	00db      	lsls	r3, r3, #3
 80105e2:	4910      	ldr	r1, [pc, #64]	@ (8010624 <HAL_RCC_ClockConfig+0x1f0>)
 80105e4:	4313      	orrs	r3, r2
 80105e6:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80105e8:	f000 f824 	bl	8010634 <HAL_RCC_GetSysClockFreq>
 80105ec:	4602      	mov	r2, r0
 80105ee:	4b0d      	ldr	r3, [pc, #52]	@ (8010624 <HAL_RCC_ClockConfig+0x1f0>)
 80105f0:	689b      	ldr	r3, [r3, #8]
 80105f2:	091b      	lsrs	r3, r3, #4
 80105f4:	f003 030f 	and.w	r3, r3, #15
 80105f8:	490b      	ldr	r1, [pc, #44]	@ (8010628 <HAL_RCC_ClockConfig+0x1f4>)
 80105fa:	5ccb      	ldrb	r3, [r1, r3]
 80105fc:	f003 031f 	and.w	r3, r3, #31
 8010600:	fa22 f303 	lsr.w	r3, r2, r3
 8010604:	4a09      	ldr	r2, [pc, #36]	@ (801062c <HAL_RCC_ClockConfig+0x1f8>)
 8010606:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8010608:	4b09      	ldr	r3, [pc, #36]	@ (8010630 <HAL_RCC_ClockConfig+0x1fc>)
 801060a:	681b      	ldr	r3, [r3, #0]
 801060c:	4618      	mov	r0, r3
 801060e:	f7fa fe29 	bl	800b264 <HAL_InitTick>
 8010612:	4603      	mov	r3, r0
 8010614:	72fb      	strb	r3, [r7, #11]

  return status;
 8010616:	7afb      	ldrb	r3, [r7, #11]
}
 8010618:	4618      	mov	r0, r3
 801061a:	3710      	adds	r7, #16
 801061c:	46bd      	mov	sp, r7
 801061e:	bd80      	pop	{r7, pc}
 8010620:	40022000 	.word	0x40022000
 8010624:	40021000 	.word	0x40021000
 8010628:	08017dc8 	.word	0x08017dc8
 801062c:	20000000 	.word	0x20000000
 8010630:	2000000c 	.word	0x2000000c

08010634 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8010634:	b480      	push	{r7}
 8010636:	b089      	sub	sp, #36	@ 0x24
 8010638:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 801063a:	2300      	movs	r3, #0
 801063c:	61fb      	str	r3, [r7, #28]
 801063e:	2300      	movs	r3, #0
 8010640:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8010642:	4b3e      	ldr	r3, [pc, #248]	@ (801073c <HAL_RCC_GetSysClockFreq+0x108>)
 8010644:	689b      	ldr	r3, [r3, #8]
 8010646:	f003 030c 	and.w	r3, r3, #12
 801064a:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 801064c:	4b3b      	ldr	r3, [pc, #236]	@ (801073c <HAL_RCC_GetSysClockFreq+0x108>)
 801064e:	68db      	ldr	r3, [r3, #12]
 8010650:	f003 0303 	and.w	r3, r3, #3
 8010654:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8010656:	693b      	ldr	r3, [r7, #16]
 8010658:	2b00      	cmp	r3, #0
 801065a:	d005      	beq.n	8010668 <HAL_RCC_GetSysClockFreq+0x34>
 801065c:	693b      	ldr	r3, [r7, #16]
 801065e:	2b0c      	cmp	r3, #12
 8010660:	d121      	bne.n	80106a6 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8010662:	68fb      	ldr	r3, [r7, #12]
 8010664:	2b01      	cmp	r3, #1
 8010666:	d11e      	bne.n	80106a6 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8010668:	4b34      	ldr	r3, [pc, #208]	@ (801073c <HAL_RCC_GetSysClockFreq+0x108>)
 801066a:	681b      	ldr	r3, [r3, #0]
 801066c:	f003 0308 	and.w	r3, r3, #8
 8010670:	2b00      	cmp	r3, #0
 8010672:	d107      	bne.n	8010684 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8010674:	4b31      	ldr	r3, [pc, #196]	@ (801073c <HAL_RCC_GetSysClockFreq+0x108>)
 8010676:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 801067a:	0a1b      	lsrs	r3, r3, #8
 801067c:	f003 030f 	and.w	r3, r3, #15
 8010680:	61fb      	str	r3, [r7, #28]
 8010682:	e005      	b.n	8010690 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8010684:	4b2d      	ldr	r3, [pc, #180]	@ (801073c <HAL_RCC_GetSysClockFreq+0x108>)
 8010686:	681b      	ldr	r3, [r3, #0]
 8010688:	091b      	lsrs	r3, r3, #4
 801068a:	f003 030f 	and.w	r3, r3, #15
 801068e:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8010690:	4a2b      	ldr	r2, [pc, #172]	@ (8010740 <HAL_RCC_GetSysClockFreq+0x10c>)
 8010692:	69fb      	ldr	r3, [r7, #28]
 8010694:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8010698:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 801069a:	693b      	ldr	r3, [r7, #16]
 801069c:	2b00      	cmp	r3, #0
 801069e:	d10d      	bne.n	80106bc <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80106a0:	69fb      	ldr	r3, [r7, #28]
 80106a2:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80106a4:	e00a      	b.n	80106bc <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80106a6:	693b      	ldr	r3, [r7, #16]
 80106a8:	2b04      	cmp	r3, #4
 80106aa:	d102      	bne.n	80106b2 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80106ac:	4b25      	ldr	r3, [pc, #148]	@ (8010744 <HAL_RCC_GetSysClockFreq+0x110>)
 80106ae:	61bb      	str	r3, [r7, #24]
 80106b0:	e004      	b.n	80106bc <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80106b2:	693b      	ldr	r3, [r7, #16]
 80106b4:	2b08      	cmp	r3, #8
 80106b6:	d101      	bne.n	80106bc <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80106b8:	4b23      	ldr	r3, [pc, #140]	@ (8010748 <HAL_RCC_GetSysClockFreq+0x114>)
 80106ba:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80106bc:	693b      	ldr	r3, [r7, #16]
 80106be:	2b0c      	cmp	r3, #12
 80106c0:	d134      	bne.n	801072c <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80106c2:	4b1e      	ldr	r3, [pc, #120]	@ (801073c <HAL_RCC_GetSysClockFreq+0x108>)
 80106c4:	68db      	ldr	r3, [r3, #12]
 80106c6:	f003 0303 	and.w	r3, r3, #3
 80106ca:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80106cc:	68bb      	ldr	r3, [r7, #8]
 80106ce:	2b02      	cmp	r3, #2
 80106d0:	d003      	beq.n	80106da <HAL_RCC_GetSysClockFreq+0xa6>
 80106d2:	68bb      	ldr	r3, [r7, #8]
 80106d4:	2b03      	cmp	r3, #3
 80106d6:	d003      	beq.n	80106e0 <HAL_RCC_GetSysClockFreq+0xac>
 80106d8:	e005      	b.n	80106e6 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80106da:	4b1a      	ldr	r3, [pc, #104]	@ (8010744 <HAL_RCC_GetSysClockFreq+0x110>)
 80106dc:	617b      	str	r3, [r7, #20]
      break;
 80106de:	e005      	b.n	80106ec <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80106e0:	4b19      	ldr	r3, [pc, #100]	@ (8010748 <HAL_RCC_GetSysClockFreq+0x114>)
 80106e2:	617b      	str	r3, [r7, #20]
      break;
 80106e4:	e002      	b.n	80106ec <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80106e6:	69fb      	ldr	r3, [r7, #28]
 80106e8:	617b      	str	r3, [r7, #20]
      break;
 80106ea:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80106ec:	4b13      	ldr	r3, [pc, #76]	@ (801073c <HAL_RCC_GetSysClockFreq+0x108>)
 80106ee:	68db      	ldr	r3, [r3, #12]
 80106f0:	091b      	lsrs	r3, r3, #4
 80106f2:	f003 0307 	and.w	r3, r3, #7
 80106f6:	3301      	adds	r3, #1
 80106f8:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80106fa:	4b10      	ldr	r3, [pc, #64]	@ (801073c <HAL_RCC_GetSysClockFreq+0x108>)
 80106fc:	68db      	ldr	r3, [r3, #12]
 80106fe:	0a1b      	lsrs	r3, r3, #8
 8010700:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8010704:	697a      	ldr	r2, [r7, #20]
 8010706:	fb03 f202 	mul.w	r2, r3, r2
 801070a:	687b      	ldr	r3, [r7, #4]
 801070c:	fbb2 f3f3 	udiv	r3, r2, r3
 8010710:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8010712:	4b0a      	ldr	r3, [pc, #40]	@ (801073c <HAL_RCC_GetSysClockFreq+0x108>)
 8010714:	68db      	ldr	r3, [r3, #12]
 8010716:	0e5b      	lsrs	r3, r3, #25
 8010718:	f003 0303 	and.w	r3, r3, #3
 801071c:	3301      	adds	r3, #1
 801071e:	005b      	lsls	r3, r3, #1
 8010720:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8010722:	697a      	ldr	r2, [r7, #20]
 8010724:	683b      	ldr	r3, [r7, #0]
 8010726:	fbb2 f3f3 	udiv	r3, r2, r3
 801072a:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 801072c:	69bb      	ldr	r3, [r7, #24]
}
 801072e:	4618      	mov	r0, r3
 8010730:	3724      	adds	r7, #36	@ 0x24
 8010732:	46bd      	mov	sp, r7
 8010734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010738:	4770      	bx	lr
 801073a:	bf00      	nop
 801073c:	40021000 	.word	0x40021000
 8010740:	08017de0 	.word	0x08017de0
 8010744:	00f42400 	.word	0x00f42400
 8010748:	007a1200 	.word	0x007a1200

0801074c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 801074c:	b480      	push	{r7}
 801074e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8010750:	4b03      	ldr	r3, [pc, #12]	@ (8010760 <HAL_RCC_GetHCLKFreq+0x14>)
 8010752:	681b      	ldr	r3, [r3, #0]
}
 8010754:	4618      	mov	r0, r3
 8010756:	46bd      	mov	sp, r7
 8010758:	f85d 7b04 	ldr.w	r7, [sp], #4
 801075c:	4770      	bx	lr
 801075e:	bf00      	nop
 8010760:	20000000 	.word	0x20000000

08010764 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8010764:	b580      	push	{r7, lr}
 8010766:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8010768:	f7ff fff0 	bl	801074c <HAL_RCC_GetHCLKFreq>
 801076c:	4602      	mov	r2, r0
 801076e:	4b06      	ldr	r3, [pc, #24]	@ (8010788 <HAL_RCC_GetPCLK1Freq+0x24>)
 8010770:	689b      	ldr	r3, [r3, #8]
 8010772:	0a1b      	lsrs	r3, r3, #8
 8010774:	f003 0307 	and.w	r3, r3, #7
 8010778:	4904      	ldr	r1, [pc, #16]	@ (801078c <HAL_RCC_GetPCLK1Freq+0x28>)
 801077a:	5ccb      	ldrb	r3, [r1, r3]
 801077c:	f003 031f 	and.w	r3, r3, #31
 8010780:	fa22 f303 	lsr.w	r3, r2, r3
}
 8010784:	4618      	mov	r0, r3
 8010786:	bd80      	pop	{r7, pc}
 8010788:	40021000 	.word	0x40021000
 801078c:	08017dd8 	.word	0x08017dd8

08010790 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8010790:	b580      	push	{r7, lr}
 8010792:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8010794:	f7ff ffda 	bl	801074c <HAL_RCC_GetHCLKFreq>
 8010798:	4602      	mov	r2, r0
 801079a:	4b06      	ldr	r3, [pc, #24]	@ (80107b4 <HAL_RCC_GetPCLK2Freq+0x24>)
 801079c:	689b      	ldr	r3, [r3, #8]
 801079e:	0adb      	lsrs	r3, r3, #11
 80107a0:	f003 0307 	and.w	r3, r3, #7
 80107a4:	4904      	ldr	r1, [pc, #16]	@ (80107b8 <HAL_RCC_GetPCLK2Freq+0x28>)
 80107a6:	5ccb      	ldrb	r3, [r1, r3]
 80107a8:	f003 031f 	and.w	r3, r3, #31
 80107ac:	fa22 f303 	lsr.w	r3, r2, r3
}
 80107b0:	4618      	mov	r0, r3
 80107b2:	bd80      	pop	{r7, pc}
 80107b4:	40021000 	.word	0x40021000
 80107b8:	08017dd8 	.word	0x08017dd8

080107bc <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80107bc:	b580      	push	{r7, lr}
 80107be:	b086      	sub	sp, #24
 80107c0:	af00      	add	r7, sp, #0
 80107c2:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80107c4:	2300      	movs	r3, #0
 80107c6:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80107c8:	4b2a      	ldr	r3, [pc, #168]	@ (8010874 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80107ca:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80107cc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80107d0:	2b00      	cmp	r3, #0
 80107d2:	d003      	beq.n	80107dc <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80107d4:	f7fe fd8c 	bl	800f2f0 <HAL_PWREx_GetVoltageRange>
 80107d8:	6178      	str	r0, [r7, #20]
 80107da:	e014      	b.n	8010806 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80107dc:	4b25      	ldr	r3, [pc, #148]	@ (8010874 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80107de:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80107e0:	4a24      	ldr	r2, [pc, #144]	@ (8010874 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80107e2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80107e6:	6593      	str	r3, [r2, #88]	@ 0x58
 80107e8:	4b22      	ldr	r3, [pc, #136]	@ (8010874 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80107ea:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80107ec:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80107f0:	60fb      	str	r3, [r7, #12]
 80107f2:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80107f4:	f7fe fd7c 	bl	800f2f0 <HAL_PWREx_GetVoltageRange>
 80107f8:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80107fa:	4b1e      	ldr	r3, [pc, #120]	@ (8010874 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80107fc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80107fe:	4a1d      	ldr	r2, [pc, #116]	@ (8010874 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8010800:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8010804:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8010806:	697b      	ldr	r3, [r7, #20]
 8010808:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 801080c:	d10b      	bne.n	8010826 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 801080e:	687b      	ldr	r3, [r7, #4]
 8010810:	2b80      	cmp	r3, #128	@ 0x80
 8010812:	d919      	bls.n	8010848 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8010814:	687b      	ldr	r3, [r7, #4]
 8010816:	2ba0      	cmp	r3, #160	@ 0xa0
 8010818:	d902      	bls.n	8010820 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 801081a:	2302      	movs	r3, #2
 801081c:	613b      	str	r3, [r7, #16]
 801081e:	e013      	b.n	8010848 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8010820:	2301      	movs	r3, #1
 8010822:	613b      	str	r3, [r7, #16]
 8010824:	e010      	b.n	8010848 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8010826:	687b      	ldr	r3, [r7, #4]
 8010828:	2b80      	cmp	r3, #128	@ 0x80
 801082a:	d902      	bls.n	8010832 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 801082c:	2303      	movs	r3, #3
 801082e:	613b      	str	r3, [r7, #16]
 8010830:	e00a      	b.n	8010848 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8010832:	687b      	ldr	r3, [r7, #4]
 8010834:	2b80      	cmp	r3, #128	@ 0x80
 8010836:	d102      	bne.n	801083e <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8010838:	2302      	movs	r3, #2
 801083a:	613b      	str	r3, [r7, #16]
 801083c:	e004      	b.n	8010848 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 801083e:	687b      	ldr	r3, [r7, #4]
 8010840:	2b70      	cmp	r3, #112	@ 0x70
 8010842:	d101      	bne.n	8010848 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8010844:	2301      	movs	r3, #1
 8010846:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8010848:	4b0b      	ldr	r3, [pc, #44]	@ (8010878 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 801084a:	681b      	ldr	r3, [r3, #0]
 801084c:	f023 0207 	bic.w	r2, r3, #7
 8010850:	4909      	ldr	r1, [pc, #36]	@ (8010878 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8010852:	693b      	ldr	r3, [r7, #16]
 8010854:	4313      	orrs	r3, r2
 8010856:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8010858:	4b07      	ldr	r3, [pc, #28]	@ (8010878 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 801085a:	681b      	ldr	r3, [r3, #0]
 801085c:	f003 0307 	and.w	r3, r3, #7
 8010860:	693a      	ldr	r2, [r7, #16]
 8010862:	429a      	cmp	r2, r3
 8010864:	d001      	beq.n	801086a <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8010866:	2301      	movs	r3, #1
 8010868:	e000      	b.n	801086c <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 801086a:	2300      	movs	r3, #0
}
 801086c:	4618      	mov	r0, r3
 801086e:	3718      	adds	r7, #24
 8010870:	46bd      	mov	sp, r7
 8010872:	bd80      	pop	{r7, pc}
 8010874:	40021000 	.word	0x40021000
 8010878:	40022000 	.word	0x40022000

0801087c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 801087c:	b580      	push	{r7, lr}
 801087e:	b086      	sub	sp, #24
 8010880:	af00      	add	r7, sp, #0
 8010882:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8010884:	2300      	movs	r3, #0
 8010886:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8010888:	2300      	movs	r3, #0
 801088a:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 801088c:	687b      	ldr	r3, [r7, #4]
 801088e:	681b      	ldr	r3, [r3, #0]
 8010890:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8010894:	2b00      	cmp	r3, #0
 8010896:	d041      	beq.n	801091c <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8010898:	687b      	ldr	r3, [r7, #4]
 801089a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 801089c:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 80108a0:	d02a      	beq.n	80108f8 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 80108a2:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 80108a6:	d824      	bhi.n	80108f2 <HAL_RCCEx_PeriphCLKConfig+0x76>
 80108a8:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80108ac:	d008      	beq.n	80108c0 <HAL_RCCEx_PeriphCLKConfig+0x44>
 80108ae:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80108b2:	d81e      	bhi.n	80108f2 <HAL_RCCEx_PeriphCLKConfig+0x76>
 80108b4:	2b00      	cmp	r3, #0
 80108b6:	d00a      	beq.n	80108ce <HAL_RCCEx_PeriphCLKConfig+0x52>
 80108b8:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80108bc:	d010      	beq.n	80108e0 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80108be:	e018      	b.n	80108f2 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80108c0:	4b86      	ldr	r3, [pc, #536]	@ (8010adc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80108c2:	68db      	ldr	r3, [r3, #12]
 80108c4:	4a85      	ldr	r2, [pc, #532]	@ (8010adc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80108c6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80108ca:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80108cc:	e015      	b.n	80108fa <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80108ce:	687b      	ldr	r3, [r7, #4]
 80108d0:	3304      	adds	r3, #4
 80108d2:	2100      	movs	r1, #0
 80108d4:	4618      	mov	r0, r3
 80108d6:	f000 fabb 	bl	8010e50 <RCCEx_PLLSAI1_Config>
 80108da:	4603      	mov	r3, r0
 80108dc:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80108de:	e00c      	b.n	80108fa <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80108e0:	687b      	ldr	r3, [r7, #4]
 80108e2:	3320      	adds	r3, #32
 80108e4:	2100      	movs	r1, #0
 80108e6:	4618      	mov	r0, r3
 80108e8:	f000 fba6 	bl	8011038 <RCCEx_PLLSAI2_Config>
 80108ec:	4603      	mov	r3, r0
 80108ee:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80108f0:	e003      	b.n	80108fa <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80108f2:	2301      	movs	r3, #1
 80108f4:	74fb      	strb	r3, [r7, #19]
      break;
 80108f6:	e000      	b.n	80108fa <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 80108f8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80108fa:	7cfb      	ldrb	r3, [r7, #19]
 80108fc:	2b00      	cmp	r3, #0
 80108fe:	d10b      	bne.n	8010918 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8010900:	4b76      	ldr	r3, [pc, #472]	@ (8010adc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8010902:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8010906:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 801090a:	687b      	ldr	r3, [r7, #4]
 801090c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 801090e:	4973      	ldr	r1, [pc, #460]	@ (8010adc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8010910:	4313      	orrs	r3, r2
 8010912:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8010916:	e001      	b.n	801091c <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8010918:	7cfb      	ldrb	r3, [r7, #19]
 801091a:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 801091c:	687b      	ldr	r3, [r7, #4]
 801091e:	681b      	ldr	r3, [r3, #0]
 8010920:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8010924:	2b00      	cmp	r3, #0
 8010926:	d041      	beq.n	80109ac <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8010928:	687b      	ldr	r3, [r7, #4]
 801092a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 801092c:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8010930:	d02a      	beq.n	8010988 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8010932:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8010936:	d824      	bhi.n	8010982 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8010938:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 801093c:	d008      	beq.n	8010950 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 801093e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8010942:	d81e      	bhi.n	8010982 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8010944:	2b00      	cmp	r3, #0
 8010946:	d00a      	beq.n	801095e <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8010948:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 801094c:	d010      	beq.n	8010970 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 801094e:	e018      	b.n	8010982 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8010950:	4b62      	ldr	r3, [pc, #392]	@ (8010adc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8010952:	68db      	ldr	r3, [r3, #12]
 8010954:	4a61      	ldr	r2, [pc, #388]	@ (8010adc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8010956:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 801095a:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 801095c:	e015      	b.n	801098a <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 801095e:	687b      	ldr	r3, [r7, #4]
 8010960:	3304      	adds	r3, #4
 8010962:	2100      	movs	r1, #0
 8010964:	4618      	mov	r0, r3
 8010966:	f000 fa73 	bl	8010e50 <RCCEx_PLLSAI1_Config>
 801096a:	4603      	mov	r3, r0
 801096c:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 801096e:	e00c      	b.n	801098a <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8010970:	687b      	ldr	r3, [r7, #4]
 8010972:	3320      	adds	r3, #32
 8010974:	2100      	movs	r1, #0
 8010976:	4618      	mov	r0, r3
 8010978:	f000 fb5e 	bl	8011038 <RCCEx_PLLSAI2_Config>
 801097c:	4603      	mov	r3, r0
 801097e:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8010980:	e003      	b.n	801098a <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8010982:	2301      	movs	r3, #1
 8010984:	74fb      	strb	r3, [r7, #19]
      break;
 8010986:	e000      	b.n	801098a <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8010988:	bf00      	nop
    }

    if(ret == HAL_OK)
 801098a:	7cfb      	ldrb	r3, [r7, #19]
 801098c:	2b00      	cmp	r3, #0
 801098e:	d10b      	bne.n	80109a8 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8010990:	4b52      	ldr	r3, [pc, #328]	@ (8010adc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8010992:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8010996:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 801099a:	687b      	ldr	r3, [r7, #4]
 801099c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 801099e:	494f      	ldr	r1, [pc, #316]	@ (8010adc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80109a0:	4313      	orrs	r3, r2
 80109a2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 80109a6:	e001      	b.n	80109ac <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80109a8:	7cfb      	ldrb	r3, [r7, #19]
 80109aa:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80109ac:	687b      	ldr	r3, [r7, #4]
 80109ae:	681b      	ldr	r3, [r3, #0]
 80109b0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80109b4:	2b00      	cmp	r3, #0
 80109b6:	f000 80a0 	beq.w	8010afa <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80109ba:	2300      	movs	r3, #0
 80109bc:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80109be:	4b47      	ldr	r3, [pc, #284]	@ (8010adc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80109c0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80109c2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80109c6:	2b00      	cmp	r3, #0
 80109c8:	d101      	bne.n	80109ce <HAL_RCCEx_PeriphCLKConfig+0x152>
 80109ca:	2301      	movs	r3, #1
 80109cc:	e000      	b.n	80109d0 <HAL_RCCEx_PeriphCLKConfig+0x154>
 80109ce:	2300      	movs	r3, #0
 80109d0:	2b00      	cmp	r3, #0
 80109d2:	d00d      	beq.n	80109f0 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80109d4:	4b41      	ldr	r3, [pc, #260]	@ (8010adc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80109d6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80109d8:	4a40      	ldr	r2, [pc, #256]	@ (8010adc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80109da:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80109de:	6593      	str	r3, [r2, #88]	@ 0x58
 80109e0:	4b3e      	ldr	r3, [pc, #248]	@ (8010adc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80109e2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80109e4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80109e8:	60bb      	str	r3, [r7, #8]
 80109ea:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80109ec:	2301      	movs	r3, #1
 80109ee:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80109f0:	4b3b      	ldr	r3, [pc, #236]	@ (8010ae0 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80109f2:	681b      	ldr	r3, [r3, #0]
 80109f4:	4a3a      	ldr	r2, [pc, #232]	@ (8010ae0 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80109f6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80109fa:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80109fc:	f7fa fc82 	bl	800b304 <HAL_GetTick>
 8010a00:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8010a02:	e009      	b.n	8010a18 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8010a04:	f7fa fc7e 	bl	800b304 <HAL_GetTick>
 8010a08:	4602      	mov	r2, r0
 8010a0a:	68fb      	ldr	r3, [r7, #12]
 8010a0c:	1ad3      	subs	r3, r2, r3
 8010a0e:	2b02      	cmp	r3, #2
 8010a10:	d902      	bls.n	8010a18 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8010a12:	2303      	movs	r3, #3
 8010a14:	74fb      	strb	r3, [r7, #19]
        break;
 8010a16:	e005      	b.n	8010a24 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8010a18:	4b31      	ldr	r3, [pc, #196]	@ (8010ae0 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8010a1a:	681b      	ldr	r3, [r3, #0]
 8010a1c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8010a20:	2b00      	cmp	r3, #0
 8010a22:	d0ef      	beq.n	8010a04 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8010a24:	7cfb      	ldrb	r3, [r7, #19]
 8010a26:	2b00      	cmp	r3, #0
 8010a28:	d15c      	bne.n	8010ae4 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8010a2a:	4b2c      	ldr	r3, [pc, #176]	@ (8010adc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8010a2c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8010a30:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8010a34:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8010a36:	697b      	ldr	r3, [r7, #20]
 8010a38:	2b00      	cmp	r3, #0
 8010a3a:	d01f      	beq.n	8010a7c <HAL_RCCEx_PeriphCLKConfig+0x200>
 8010a3c:	687b      	ldr	r3, [r7, #4]
 8010a3e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8010a42:	697a      	ldr	r2, [r7, #20]
 8010a44:	429a      	cmp	r2, r3
 8010a46:	d019      	beq.n	8010a7c <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8010a48:	4b24      	ldr	r3, [pc, #144]	@ (8010adc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8010a4a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8010a4e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8010a52:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8010a54:	4b21      	ldr	r3, [pc, #132]	@ (8010adc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8010a56:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8010a5a:	4a20      	ldr	r2, [pc, #128]	@ (8010adc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8010a5c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8010a60:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8010a64:	4b1d      	ldr	r3, [pc, #116]	@ (8010adc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8010a66:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8010a6a:	4a1c      	ldr	r2, [pc, #112]	@ (8010adc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8010a6c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8010a70:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8010a74:	4a19      	ldr	r2, [pc, #100]	@ (8010adc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8010a76:	697b      	ldr	r3, [r7, #20]
 8010a78:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8010a7c:	697b      	ldr	r3, [r7, #20]
 8010a7e:	f003 0301 	and.w	r3, r3, #1
 8010a82:	2b00      	cmp	r3, #0
 8010a84:	d016      	beq.n	8010ab4 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8010a86:	f7fa fc3d 	bl	800b304 <HAL_GetTick>
 8010a8a:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8010a8c:	e00b      	b.n	8010aa6 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8010a8e:	f7fa fc39 	bl	800b304 <HAL_GetTick>
 8010a92:	4602      	mov	r2, r0
 8010a94:	68fb      	ldr	r3, [r7, #12]
 8010a96:	1ad3      	subs	r3, r2, r3
 8010a98:	f241 3288 	movw	r2, #5000	@ 0x1388
 8010a9c:	4293      	cmp	r3, r2
 8010a9e:	d902      	bls.n	8010aa6 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8010aa0:	2303      	movs	r3, #3
 8010aa2:	74fb      	strb	r3, [r7, #19]
            break;
 8010aa4:	e006      	b.n	8010ab4 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8010aa6:	4b0d      	ldr	r3, [pc, #52]	@ (8010adc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8010aa8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8010aac:	f003 0302 	and.w	r3, r3, #2
 8010ab0:	2b00      	cmp	r3, #0
 8010ab2:	d0ec      	beq.n	8010a8e <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8010ab4:	7cfb      	ldrb	r3, [r7, #19]
 8010ab6:	2b00      	cmp	r3, #0
 8010ab8:	d10c      	bne.n	8010ad4 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8010aba:	4b08      	ldr	r3, [pc, #32]	@ (8010adc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8010abc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8010ac0:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8010ac4:	687b      	ldr	r3, [r7, #4]
 8010ac6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8010aca:	4904      	ldr	r1, [pc, #16]	@ (8010adc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8010acc:	4313      	orrs	r3, r2
 8010ace:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8010ad2:	e009      	b.n	8010ae8 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8010ad4:	7cfb      	ldrb	r3, [r7, #19]
 8010ad6:	74bb      	strb	r3, [r7, #18]
 8010ad8:	e006      	b.n	8010ae8 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8010ada:	bf00      	nop
 8010adc:	40021000 	.word	0x40021000
 8010ae0:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8010ae4:	7cfb      	ldrb	r3, [r7, #19]
 8010ae6:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8010ae8:	7c7b      	ldrb	r3, [r7, #17]
 8010aea:	2b01      	cmp	r3, #1
 8010aec:	d105      	bne.n	8010afa <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8010aee:	4b9e      	ldr	r3, [pc, #632]	@ (8010d68 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8010af0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8010af2:	4a9d      	ldr	r2, [pc, #628]	@ (8010d68 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8010af4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8010af8:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8010afa:	687b      	ldr	r3, [r7, #4]
 8010afc:	681b      	ldr	r3, [r3, #0]
 8010afe:	f003 0301 	and.w	r3, r3, #1
 8010b02:	2b00      	cmp	r3, #0
 8010b04:	d00a      	beq.n	8010b1c <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8010b06:	4b98      	ldr	r3, [pc, #608]	@ (8010d68 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8010b08:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8010b0c:	f023 0203 	bic.w	r2, r3, #3
 8010b10:	687b      	ldr	r3, [r7, #4]
 8010b12:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8010b14:	4994      	ldr	r1, [pc, #592]	@ (8010d68 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8010b16:	4313      	orrs	r3, r2
 8010b18:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8010b1c:	687b      	ldr	r3, [r7, #4]
 8010b1e:	681b      	ldr	r3, [r3, #0]
 8010b20:	f003 0302 	and.w	r3, r3, #2
 8010b24:	2b00      	cmp	r3, #0
 8010b26:	d00a      	beq.n	8010b3e <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8010b28:	4b8f      	ldr	r3, [pc, #572]	@ (8010d68 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8010b2a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8010b2e:	f023 020c 	bic.w	r2, r3, #12
 8010b32:	687b      	ldr	r3, [r7, #4]
 8010b34:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8010b36:	498c      	ldr	r1, [pc, #560]	@ (8010d68 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8010b38:	4313      	orrs	r3, r2
 8010b3a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8010b3e:	687b      	ldr	r3, [r7, #4]
 8010b40:	681b      	ldr	r3, [r3, #0]
 8010b42:	f003 0304 	and.w	r3, r3, #4
 8010b46:	2b00      	cmp	r3, #0
 8010b48:	d00a      	beq.n	8010b60 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8010b4a:	4b87      	ldr	r3, [pc, #540]	@ (8010d68 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8010b4c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8010b50:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8010b54:	687b      	ldr	r3, [r7, #4]
 8010b56:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8010b58:	4983      	ldr	r1, [pc, #524]	@ (8010d68 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8010b5a:	4313      	orrs	r3, r2
 8010b5c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8010b60:	687b      	ldr	r3, [r7, #4]
 8010b62:	681b      	ldr	r3, [r3, #0]
 8010b64:	f003 0308 	and.w	r3, r3, #8
 8010b68:	2b00      	cmp	r3, #0
 8010b6a:	d00a      	beq.n	8010b82 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8010b6c:	4b7e      	ldr	r3, [pc, #504]	@ (8010d68 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8010b6e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8010b72:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8010b76:	687b      	ldr	r3, [r7, #4]
 8010b78:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8010b7a:	497b      	ldr	r1, [pc, #492]	@ (8010d68 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8010b7c:	4313      	orrs	r3, r2
 8010b7e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8010b82:	687b      	ldr	r3, [r7, #4]
 8010b84:	681b      	ldr	r3, [r3, #0]
 8010b86:	f003 0310 	and.w	r3, r3, #16
 8010b8a:	2b00      	cmp	r3, #0
 8010b8c:	d00a      	beq.n	8010ba4 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8010b8e:	4b76      	ldr	r3, [pc, #472]	@ (8010d68 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8010b90:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8010b94:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8010b98:	687b      	ldr	r3, [r7, #4]
 8010b9a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8010b9c:	4972      	ldr	r1, [pc, #456]	@ (8010d68 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8010b9e:	4313      	orrs	r3, r2
 8010ba0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8010ba4:	687b      	ldr	r3, [r7, #4]
 8010ba6:	681b      	ldr	r3, [r3, #0]
 8010ba8:	f003 0320 	and.w	r3, r3, #32
 8010bac:	2b00      	cmp	r3, #0
 8010bae:	d00a      	beq.n	8010bc6 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8010bb0:	4b6d      	ldr	r3, [pc, #436]	@ (8010d68 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8010bb2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8010bb6:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8010bba:	687b      	ldr	r3, [r7, #4]
 8010bbc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8010bbe:	496a      	ldr	r1, [pc, #424]	@ (8010d68 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8010bc0:	4313      	orrs	r3, r2
 8010bc2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8010bc6:	687b      	ldr	r3, [r7, #4]
 8010bc8:	681b      	ldr	r3, [r3, #0]
 8010bca:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8010bce:	2b00      	cmp	r3, #0
 8010bd0:	d00a      	beq.n	8010be8 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8010bd2:	4b65      	ldr	r3, [pc, #404]	@ (8010d68 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8010bd4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8010bd8:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8010bdc:	687b      	ldr	r3, [r7, #4]
 8010bde:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8010be0:	4961      	ldr	r1, [pc, #388]	@ (8010d68 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8010be2:	4313      	orrs	r3, r2
 8010be4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8010be8:	687b      	ldr	r3, [r7, #4]
 8010bea:	681b      	ldr	r3, [r3, #0]
 8010bec:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8010bf0:	2b00      	cmp	r3, #0
 8010bf2:	d00a      	beq.n	8010c0a <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8010bf4:	4b5c      	ldr	r3, [pc, #368]	@ (8010d68 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8010bf6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8010bfa:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8010bfe:	687b      	ldr	r3, [r7, #4]
 8010c00:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8010c02:	4959      	ldr	r1, [pc, #356]	@ (8010d68 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8010c04:	4313      	orrs	r3, r2
 8010c06:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8010c0a:	687b      	ldr	r3, [r7, #4]
 8010c0c:	681b      	ldr	r3, [r3, #0]
 8010c0e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8010c12:	2b00      	cmp	r3, #0
 8010c14:	d00a      	beq.n	8010c2c <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8010c16:	4b54      	ldr	r3, [pc, #336]	@ (8010d68 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8010c18:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8010c1c:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8010c20:	687b      	ldr	r3, [r7, #4]
 8010c22:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8010c24:	4950      	ldr	r1, [pc, #320]	@ (8010d68 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8010c26:	4313      	orrs	r3, r2
 8010c28:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8010c2c:	687b      	ldr	r3, [r7, #4]
 8010c2e:	681b      	ldr	r3, [r3, #0]
 8010c30:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8010c34:	2b00      	cmp	r3, #0
 8010c36:	d00a      	beq.n	8010c4e <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8010c38:	4b4b      	ldr	r3, [pc, #300]	@ (8010d68 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8010c3a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8010c3e:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8010c42:	687b      	ldr	r3, [r7, #4]
 8010c44:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8010c46:	4948      	ldr	r1, [pc, #288]	@ (8010d68 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8010c48:	4313      	orrs	r3, r2
 8010c4a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8010c4e:	687b      	ldr	r3, [r7, #4]
 8010c50:	681b      	ldr	r3, [r3, #0]
 8010c52:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8010c56:	2b00      	cmp	r3, #0
 8010c58:	d00a      	beq.n	8010c70 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8010c5a:	4b43      	ldr	r3, [pc, #268]	@ (8010d68 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8010c5c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8010c60:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8010c64:	687b      	ldr	r3, [r7, #4]
 8010c66:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8010c68:	493f      	ldr	r1, [pc, #252]	@ (8010d68 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8010c6a:	4313      	orrs	r3, r2
 8010c6c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8010c70:	687b      	ldr	r3, [r7, #4]
 8010c72:	681b      	ldr	r3, [r3, #0]
 8010c74:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8010c78:	2b00      	cmp	r3, #0
 8010c7a:	d028      	beq.n	8010cce <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8010c7c:	4b3a      	ldr	r3, [pc, #232]	@ (8010d68 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8010c7e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8010c82:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8010c86:	687b      	ldr	r3, [r7, #4]
 8010c88:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8010c8a:	4937      	ldr	r1, [pc, #220]	@ (8010d68 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8010c8c:	4313      	orrs	r3, r2
 8010c8e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8010c92:	687b      	ldr	r3, [r7, #4]
 8010c94:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8010c96:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8010c9a:	d106      	bne.n	8010caa <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8010c9c:	4b32      	ldr	r3, [pc, #200]	@ (8010d68 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8010c9e:	68db      	ldr	r3, [r3, #12]
 8010ca0:	4a31      	ldr	r2, [pc, #196]	@ (8010d68 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8010ca2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8010ca6:	60d3      	str	r3, [r2, #12]
 8010ca8:	e011      	b.n	8010cce <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8010caa:	687b      	ldr	r3, [r7, #4]
 8010cac:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8010cae:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8010cb2:	d10c      	bne.n	8010cce <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8010cb4:	687b      	ldr	r3, [r7, #4]
 8010cb6:	3304      	adds	r3, #4
 8010cb8:	2101      	movs	r1, #1
 8010cba:	4618      	mov	r0, r3
 8010cbc:	f000 f8c8 	bl	8010e50 <RCCEx_PLLSAI1_Config>
 8010cc0:	4603      	mov	r3, r0
 8010cc2:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8010cc4:	7cfb      	ldrb	r3, [r7, #19]
 8010cc6:	2b00      	cmp	r3, #0
 8010cc8:	d001      	beq.n	8010cce <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8010cca:	7cfb      	ldrb	r3, [r7, #19]
 8010ccc:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8010cce:	687b      	ldr	r3, [r7, #4]
 8010cd0:	681b      	ldr	r3, [r3, #0]
 8010cd2:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8010cd6:	2b00      	cmp	r3, #0
 8010cd8:	d028      	beq.n	8010d2c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8010cda:	4b23      	ldr	r3, [pc, #140]	@ (8010d68 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8010cdc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8010ce0:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8010ce4:	687b      	ldr	r3, [r7, #4]
 8010ce6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8010ce8:	491f      	ldr	r1, [pc, #124]	@ (8010d68 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8010cea:	4313      	orrs	r3, r2
 8010cec:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8010cf0:	687b      	ldr	r3, [r7, #4]
 8010cf2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8010cf4:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8010cf8:	d106      	bne.n	8010d08 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8010cfa:	4b1b      	ldr	r3, [pc, #108]	@ (8010d68 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8010cfc:	68db      	ldr	r3, [r3, #12]
 8010cfe:	4a1a      	ldr	r2, [pc, #104]	@ (8010d68 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8010d00:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8010d04:	60d3      	str	r3, [r2, #12]
 8010d06:	e011      	b.n	8010d2c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8010d08:	687b      	ldr	r3, [r7, #4]
 8010d0a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8010d0c:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8010d10:	d10c      	bne.n	8010d2c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8010d12:	687b      	ldr	r3, [r7, #4]
 8010d14:	3304      	adds	r3, #4
 8010d16:	2101      	movs	r1, #1
 8010d18:	4618      	mov	r0, r3
 8010d1a:	f000 f899 	bl	8010e50 <RCCEx_PLLSAI1_Config>
 8010d1e:	4603      	mov	r3, r0
 8010d20:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8010d22:	7cfb      	ldrb	r3, [r7, #19]
 8010d24:	2b00      	cmp	r3, #0
 8010d26:	d001      	beq.n	8010d2c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8010d28:	7cfb      	ldrb	r3, [r7, #19]
 8010d2a:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8010d2c:	687b      	ldr	r3, [r7, #4]
 8010d2e:	681b      	ldr	r3, [r3, #0]
 8010d30:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8010d34:	2b00      	cmp	r3, #0
 8010d36:	d02b      	beq.n	8010d90 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8010d38:	4b0b      	ldr	r3, [pc, #44]	@ (8010d68 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8010d3a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8010d3e:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8010d42:	687b      	ldr	r3, [r7, #4]
 8010d44:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8010d46:	4908      	ldr	r1, [pc, #32]	@ (8010d68 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8010d48:	4313      	orrs	r3, r2
 8010d4a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8010d4e:	687b      	ldr	r3, [r7, #4]
 8010d50:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8010d52:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8010d56:	d109      	bne.n	8010d6c <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8010d58:	4b03      	ldr	r3, [pc, #12]	@ (8010d68 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8010d5a:	68db      	ldr	r3, [r3, #12]
 8010d5c:	4a02      	ldr	r2, [pc, #8]	@ (8010d68 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8010d5e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8010d62:	60d3      	str	r3, [r2, #12]
 8010d64:	e014      	b.n	8010d90 <HAL_RCCEx_PeriphCLKConfig+0x514>
 8010d66:	bf00      	nop
 8010d68:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8010d6c:	687b      	ldr	r3, [r7, #4]
 8010d6e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8010d70:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8010d74:	d10c      	bne.n	8010d90 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8010d76:	687b      	ldr	r3, [r7, #4]
 8010d78:	3304      	adds	r3, #4
 8010d7a:	2101      	movs	r1, #1
 8010d7c:	4618      	mov	r0, r3
 8010d7e:	f000 f867 	bl	8010e50 <RCCEx_PLLSAI1_Config>
 8010d82:	4603      	mov	r3, r0
 8010d84:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8010d86:	7cfb      	ldrb	r3, [r7, #19]
 8010d88:	2b00      	cmp	r3, #0
 8010d8a:	d001      	beq.n	8010d90 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8010d8c:	7cfb      	ldrb	r3, [r7, #19]
 8010d8e:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8010d90:	687b      	ldr	r3, [r7, #4]
 8010d92:	681b      	ldr	r3, [r3, #0]
 8010d94:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8010d98:	2b00      	cmp	r3, #0
 8010d9a:	d02f      	beq.n	8010dfc <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8010d9c:	4b2b      	ldr	r3, [pc, #172]	@ (8010e4c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8010d9e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8010da2:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8010da6:	687b      	ldr	r3, [r7, #4]
 8010da8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8010daa:	4928      	ldr	r1, [pc, #160]	@ (8010e4c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8010dac:	4313      	orrs	r3, r2
 8010dae:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8010db2:	687b      	ldr	r3, [r7, #4]
 8010db4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8010db6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8010dba:	d10d      	bne.n	8010dd8 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8010dbc:	687b      	ldr	r3, [r7, #4]
 8010dbe:	3304      	adds	r3, #4
 8010dc0:	2102      	movs	r1, #2
 8010dc2:	4618      	mov	r0, r3
 8010dc4:	f000 f844 	bl	8010e50 <RCCEx_PLLSAI1_Config>
 8010dc8:	4603      	mov	r3, r0
 8010dca:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8010dcc:	7cfb      	ldrb	r3, [r7, #19]
 8010dce:	2b00      	cmp	r3, #0
 8010dd0:	d014      	beq.n	8010dfc <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8010dd2:	7cfb      	ldrb	r3, [r7, #19]
 8010dd4:	74bb      	strb	r3, [r7, #18]
 8010dd6:	e011      	b.n	8010dfc <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8010dd8:	687b      	ldr	r3, [r7, #4]
 8010dda:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8010ddc:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8010de0:	d10c      	bne.n	8010dfc <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8010de2:	687b      	ldr	r3, [r7, #4]
 8010de4:	3320      	adds	r3, #32
 8010de6:	2102      	movs	r1, #2
 8010de8:	4618      	mov	r0, r3
 8010dea:	f000 f925 	bl	8011038 <RCCEx_PLLSAI2_Config>
 8010dee:	4603      	mov	r3, r0
 8010df0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8010df2:	7cfb      	ldrb	r3, [r7, #19]
 8010df4:	2b00      	cmp	r3, #0
 8010df6:	d001      	beq.n	8010dfc <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8010df8:	7cfb      	ldrb	r3, [r7, #19]
 8010dfa:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8010dfc:	687b      	ldr	r3, [r7, #4]
 8010dfe:	681b      	ldr	r3, [r3, #0]
 8010e00:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8010e04:	2b00      	cmp	r3, #0
 8010e06:	d00a      	beq.n	8010e1e <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8010e08:	4b10      	ldr	r3, [pc, #64]	@ (8010e4c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8010e0a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8010e0e:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 8010e12:	687b      	ldr	r3, [r7, #4]
 8010e14:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8010e16:	490d      	ldr	r1, [pc, #52]	@ (8010e4c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8010e18:	4313      	orrs	r3, r2
 8010e1a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8010e1e:	687b      	ldr	r3, [r7, #4]
 8010e20:	681b      	ldr	r3, [r3, #0]
 8010e22:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8010e26:	2b00      	cmp	r3, #0
 8010e28:	d00b      	beq.n	8010e42 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8010e2a:	4b08      	ldr	r3, [pc, #32]	@ (8010e4c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8010e2c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8010e30:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8010e34:	687b      	ldr	r3, [r7, #4]
 8010e36:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8010e3a:	4904      	ldr	r1, [pc, #16]	@ (8010e4c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8010e3c:	4313      	orrs	r3, r2
 8010e3e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8010e42:	7cbb      	ldrb	r3, [r7, #18]
}
 8010e44:	4618      	mov	r0, r3
 8010e46:	3718      	adds	r7, #24
 8010e48:	46bd      	mov	sp, r7
 8010e4a:	bd80      	pop	{r7, pc}
 8010e4c:	40021000 	.word	0x40021000

08010e50 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8010e50:	b580      	push	{r7, lr}
 8010e52:	b084      	sub	sp, #16
 8010e54:	af00      	add	r7, sp, #0
 8010e56:	6078      	str	r0, [r7, #4]
 8010e58:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8010e5a:	2300      	movs	r3, #0
 8010e5c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8010e5e:	4b75      	ldr	r3, [pc, #468]	@ (8011034 <RCCEx_PLLSAI1_Config+0x1e4>)
 8010e60:	68db      	ldr	r3, [r3, #12]
 8010e62:	f003 0303 	and.w	r3, r3, #3
 8010e66:	2b00      	cmp	r3, #0
 8010e68:	d018      	beq.n	8010e9c <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8010e6a:	4b72      	ldr	r3, [pc, #456]	@ (8011034 <RCCEx_PLLSAI1_Config+0x1e4>)
 8010e6c:	68db      	ldr	r3, [r3, #12]
 8010e6e:	f003 0203 	and.w	r2, r3, #3
 8010e72:	687b      	ldr	r3, [r7, #4]
 8010e74:	681b      	ldr	r3, [r3, #0]
 8010e76:	429a      	cmp	r2, r3
 8010e78:	d10d      	bne.n	8010e96 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8010e7a:	687b      	ldr	r3, [r7, #4]
 8010e7c:	681b      	ldr	r3, [r3, #0]
       ||
 8010e7e:	2b00      	cmp	r3, #0
 8010e80:	d009      	beq.n	8010e96 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8010e82:	4b6c      	ldr	r3, [pc, #432]	@ (8011034 <RCCEx_PLLSAI1_Config+0x1e4>)
 8010e84:	68db      	ldr	r3, [r3, #12]
 8010e86:	091b      	lsrs	r3, r3, #4
 8010e88:	f003 0307 	and.w	r3, r3, #7
 8010e8c:	1c5a      	adds	r2, r3, #1
 8010e8e:	687b      	ldr	r3, [r7, #4]
 8010e90:	685b      	ldr	r3, [r3, #4]
       ||
 8010e92:	429a      	cmp	r2, r3
 8010e94:	d047      	beq.n	8010f26 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8010e96:	2301      	movs	r3, #1
 8010e98:	73fb      	strb	r3, [r7, #15]
 8010e9a:	e044      	b.n	8010f26 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8010e9c:	687b      	ldr	r3, [r7, #4]
 8010e9e:	681b      	ldr	r3, [r3, #0]
 8010ea0:	2b03      	cmp	r3, #3
 8010ea2:	d018      	beq.n	8010ed6 <RCCEx_PLLSAI1_Config+0x86>
 8010ea4:	2b03      	cmp	r3, #3
 8010ea6:	d825      	bhi.n	8010ef4 <RCCEx_PLLSAI1_Config+0xa4>
 8010ea8:	2b01      	cmp	r3, #1
 8010eaa:	d002      	beq.n	8010eb2 <RCCEx_PLLSAI1_Config+0x62>
 8010eac:	2b02      	cmp	r3, #2
 8010eae:	d009      	beq.n	8010ec4 <RCCEx_PLLSAI1_Config+0x74>
 8010eb0:	e020      	b.n	8010ef4 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8010eb2:	4b60      	ldr	r3, [pc, #384]	@ (8011034 <RCCEx_PLLSAI1_Config+0x1e4>)
 8010eb4:	681b      	ldr	r3, [r3, #0]
 8010eb6:	f003 0302 	and.w	r3, r3, #2
 8010eba:	2b00      	cmp	r3, #0
 8010ebc:	d11d      	bne.n	8010efa <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8010ebe:	2301      	movs	r3, #1
 8010ec0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8010ec2:	e01a      	b.n	8010efa <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8010ec4:	4b5b      	ldr	r3, [pc, #364]	@ (8011034 <RCCEx_PLLSAI1_Config+0x1e4>)
 8010ec6:	681b      	ldr	r3, [r3, #0]
 8010ec8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8010ecc:	2b00      	cmp	r3, #0
 8010ece:	d116      	bne.n	8010efe <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8010ed0:	2301      	movs	r3, #1
 8010ed2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8010ed4:	e013      	b.n	8010efe <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8010ed6:	4b57      	ldr	r3, [pc, #348]	@ (8011034 <RCCEx_PLLSAI1_Config+0x1e4>)
 8010ed8:	681b      	ldr	r3, [r3, #0]
 8010eda:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8010ede:	2b00      	cmp	r3, #0
 8010ee0:	d10f      	bne.n	8010f02 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8010ee2:	4b54      	ldr	r3, [pc, #336]	@ (8011034 <RCCEx_PLLSAI1_Config+0x1e4>)
 8010ee4:	681b      	ldr	r3, [r3, #0]
 8010ee6:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8010eea:	2b00      	cmp	r3, #0
 8010eec:	d109      	bne.n	8010f02 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8010eee:	2301      	movs	r3, #1
 8010ef0:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8010ef2:	e006      	b.n	8010f02 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8010ef4:	2301      	movs	r3, #1
 8010ef6:	73fb      	strb	r3, [r7, #15]
      break;
 8010ef8:	e004      	b.n	8010f04 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8010efa:	bf00      	nop
 8010efc:	e002      	b.n	8010f04 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8010efe:	bf00      	nop
 8010f00:	e000      	b.n	8010f04 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8010f02:	bf00      	nop
    }

    if(status == HAL_OK)
 8010f04:	7bfb      	ldrb	r3, [r7, #15]
 8010f06:	2b00      	cmp	r3, #0
 8010f08:	d10d      	bne.n	8010f26 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8010f0a:	4b4a      	ldr	r3, [pc, #296]	@ (8011034 <RCCEx_PLLSAI1_Config+0x1e4>)
 8010f0c:	68db      	ldr	r3, [r3, #12]
 8010f0e:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8010f12:	687b      	ldr	r3, [r7, #4]
 8010f14:	6819      	ldr	r1, [r3, #0]
 8010f16:	687b      	ldr	r3, [r7, #4]
 8010f18:	685b      	ldr	r3, [r3, #4]
 8010f1a:	3b01      	subs	r3, #1
 8010f1c:	011b      	lsls	r3, r3, #4
 8010f1e:	430b      	orrs	r3, r1
 8010f20:	4944      	ldr	r1, [pc, #272]	@ (8011034 <RCCEx_PLLSAI1_Config+0x1e4>)
 8010f22:	4313      	orrs	r3, r2
 8010f24:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8010f26:	7bfb      	ldrb	r3, [r7, #15]
 8010f28:	2b00      	cmp	r3, #0
 8010f2a:	d17d      	bne.n	8011028 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8010f2c:	4b41      	ldr	r3, [pc, #260]	@ (8011034 <RCCEx_PLLSAI1_Config+0x1e4>)
 8010f2e:	681b      	ldr	r3, [r3, #0]
 8010f30:	4a40      	ldr	r2, [pc, #256]	@ (8011034 <RCCEx_PLLSAI1_Config+0x1e4>)
 8010f32:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8010f36:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8010f38:	f7fa f9e4 	bl	800b304 <HAL_GetTick>
 8010f3c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8010f3e:	e009      	b.n	8010f54 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8010f40:	f7fa f9e0 	bl	800b304 <HAL_GetTick>
 8010f44:	4602      	mov	r2, r0
 8010f46:	68bb      	ldr	r3, [r7, #8]
 8010f48:	1ad3      	subs	r3, r2, r3
 8010f4a:	2b02      	cmp	r3, #2
 8010f4c:	d902      	bls.n	8010f54 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8010f4e:	2303      	movs	r3, #3
 8010f50:	73fb      	strb	r3, [r7, #15]
        break;
 8010f52:	e005      	b.n	8010f60 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8010f54:	4b37      	ldr	r3, [pc, #220]	@ (8011034 <RCCEx_PLLSAI1_Config+0x1e4>)
 8010f56:	681b      	ldr	r3, [r3, #0]
 8010f58:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8010f5c:	2b00      	cmp	r3, #0
 8010f5e:	d1ef      	bne.n	8010f40 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8010f60:	7bfb      	ldrb	r3, [r7, #15]
 8010f62:	2b00      	cmp	r3, #0
 8010f64:	d160      	bne.n	8011028 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8010f66:	683b      	ldr	r3, [r7, #0]
 8010f68:	2b00      	cmp	r3, #0
 8010f6a:	d111      	bne.n	8010f90 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8010f6c:	4b31      	ldr	r3, [pc, #196]	@ (8011034 <RCCEx_PLLSAI1_Config+0x1e4>)
 8010f6e:	691b      	ldr	r3, [r3, #16]
 8010f70:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8010f74:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8010f78:	687a      	ldr	r2, [r7, #4]
 8010f7a:	6892      	ldr	r2, [r2, #8]
 8010f7c:	0211      	lsls	r1, r2, #8
 8010f7e:	687a      	ldr	r2, [r7, #4]
 8010f80:	68d2      	ldr	r2, [r2, #12]
 8010f82:	0912      	lsrs	r2, r2, #4
 8010f84:	0452      	lsls	r2, r2, #17
 8010f86:	430a      	orrs	r2, r1
 8010f88:	492a      	ldr	r1, [pc, #168]	@ (8011034 <RCCEx_PLLSAI1_Config+0x1e4>)
 8010f8a:	4313      	orrs	r3, r2
 8010f8c:	610b      	str	r3, [r1, #16]
 8010f8e:	e027      	b.n	8010fe0 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8010f90:	683b      	ldr	r3, [r7, #0]
 8010f92:	2b01      	cmp	r3, #1
 8010f94:	d112      	bne.n	8010fbc <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8010f96:	4b27      	ldr	r3, [pc, #156]	@ (8011034 <RCCEx_PLLSAI1_Config+0x1e4>)
 8010f98:	691b      	ldr	r3, [r3, #16]
 8010f9a:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 8010f9e:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8010fa2:	687a      	ldr	r2, [r7, #4]
 8010fa4:	6892      	ldr	r2, [r2, #8]
 8010fa6:	0211      	lsls	r1, r2, #8
 8010fa8:	687a      	ldr	r2, [r7, #4]
 8010faa:	6912      	ldr	r2, [r2, #16]
 8010fac:	0852      	lsrs	r2, r2, #1
 8010fae:	3a01      	subs	r2, #1
 8010fb0:	0552      	lsls	r2, r2, #21
 8010fb2:	430a      	orrs	r2, r1
 8010fb4:	491f      	ldr	r1, [pc, #124]	@ (8011034 <RCCEx_PLLSAI1_Config+0x1e4>)
 8010fb6:	4313      	orrs	r3, r2
 8010fb8:	610b      	str	r3, [r1, #16]
 8010fba:	e011      	b.n	8010fe0 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8010fbc:	4b1d      	ldr	r3, [pc, #116]	@ (8011034 <RCCEx_PLLSAI1_Config+0x1e4>)
 8010fbe:	691b      	ldr	r3, [r3, #16]
 8010fc0:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8010fc4:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8010fc8:	687a      	ldr	r2, [r7, #4]
 8010fca:	6892      	ldr	r2, [r2, #8]
 8010fcc:	0211      	lsls	r1, r2, #8
 8010fce:	687a      	ldr	r2, [r7, #4]
 8010fd0:	6952      	ldr	r2, [r2, #20]
 8010fd2:	0852      	lsrs	r2, r2, #1
 8010fd4:	3a01      	subs	r2, #1
 8010fd6:	0652      	lsls	r2, r2, #25
 8010fd8:	430a      	orrs	r2, r1
 8010fda:	4916      	ldr	r1, [pc, #88]	@ (8011034 <RCCEx_PLLSAI1_Config+0x1e4>)
 8010fdc:	4313      	orrs	r3, r2
 8010fde:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8010fe0:	4b14      	ldr	r3, [pc, #80]	@ (8011034 <RCCEx_PLLSAI1_Config+0x1e4>)
 8010fe2:	681b      	ldr	r3, [r3, #0]
 8010fe4:	4a13      	ldr	r2, [pc, #76]	@ (8011034 <RCCEx_PLLSAI1_Config+0x1e4>)
 8010fe6:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8010fea:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8010fec:	f7fa f98a 	bl	800b304 <HAL_GetTick>
 8010ff0:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8010ff2:	e009      	b.n	8011008 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8010ff4:	f7fa f986 	bl	800b304 <HAL_GetTick>
 8010ff8:	4602      	mov	r2, r0
 8010ffa:	68bb      	ldr	r3, [r7, #8]
 8010ffc:	1ad3      	subs	r3, r2, r3
 8010ffe:	2b02      	cmp	r3, #2
 8011000:	d902      	bls.n	8011008 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8011002:	2303      	movs	r3, #3
 8011004:	73fb      	strb	r3, [r7, #15]
          break;
 8011006:	e005      	b.n	8011014 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8011008:	4b0a      	ldr	r3, [pc, #40]	@ (8011034 <RCCEx_PLLSAI1_Config+0x1e4>)
 801100a:	681b      	ldr	r3, [r3, #0]
 801100c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8011010:	2b00      	cmp	r3, #0
 8011012:	d0ef      	beq.n	8010ff4 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8011014:	7bfb      	ldrb	r3, [r7, #15]
 8011016:	2b00      	cmp	r3, #0
 8011018:	d106      	bne.n	8011028 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 801101a:	4b06      	ldr	r3, [pc, #24]	@ (8011034 <RCCEx_PLLSAI1_Config+0x1e4>)
 801101c:	691a      	ldr	r2, [r3, #16]
 801101e:	687b      	ldr	r3, [r7, #4]
 8011020:	699b      	ldr	r3, [r3, #24]
 8011022:	4904      	ldr	r1, [pc, #16]	@ (8011034 <RCCEx_PLLSAI1_Config+0x1e4>)
 8011024:	4313      	orrs	r3, r2
 8011026:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8011028:	7bfb      	ldrb	r3, [r7, #15]
}
 801102a:	4618      	mov	r0, r3
 801102c:	3710      	adds	r7, #16
 801102e:	46bd      	mov	sp, r7
 8011030:	bd80      	pop	{r7, pc}
 8011032:	bf00      	nop
 8011034:	40021000 	.word	0x40021000

08011038 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8011038:	b580      	push	{r7, lr}
 801103a:	b084      	sub	sp, #16
 801103c:	af00      	add	r7, sp, #0
 801103e:	6078      	str	r0, [r7, #4]
 8011040:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8011042:	2300      	movs	r3, #0
 8011044:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8011046:	4b6a      	ldr	r3, [pc, #424]	@ (80111f0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8011048:	68db      	ldr	r3, [r3, #12]
 801104a:	f003 0303 	and.w	r3, r3, #3
 801104e:	2b00      	cmp	r3, #0
 8011050:	d018      	beq.n	8011084 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8011052:	4b67      	ldr	r3, [pc, #412]	@ (80111f0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8011054:	68db      	ldr	r3, [r3, #12]
 8011056:	f003 0203 	and.w	r2, r3, #3
 801105a:	687b      	ldr	r3, [r7, #4]
 801105c:	681b      	ldr	r3, [r3, #0]
 801105e:	429a      	cmp	r2, r3
 8011060:	d10d      	bne.n	801107e <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8011062:	687b      	ldr	r3, [r7, #4]
 8011064:	681b      	ldr	r3, [r3, #0]
       ||
 8011066:	2b00      	cmp	r3, #0
 8011068:	d009      	beq.n	801107e <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 801106a:	4b61      	ldr	r3, [pc, #388]	@ (80111f0 <RCCEx_PLLSAI2_Config+0x1b8>)
 801106c:	68db      	ldr	r3, [r3, #12]
 801106e:	091b      	lsrs	r3, r3, #4
 8011070:	f003 0307 	and.w	r3, r3, #7
 8011074:	1c5a      	adds	r2, r3, #1
 8011076:	687b      	ldr	r3, [r7, #4]
 8011078:	685b      	ldr	r3, [r3, #4]
       ||
 801107a:	429a      	cmp	r2, r3
 801107c:	d047      	beq.n	801110e <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 801107e:	2301      	movs	r3, #1
 8011080:	73fb      	strb	r3, [r7, #15]
 8011082:	e044      	b.n	801110e <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8011084:	687b      	ldr	r3, [r7, #4]
 8011086:	681b      	ldr	r3, [r3, #0]
 8011088:	2b03      	cmp	r3, #3
 801108a:	d018      	beq.n	80110be <RCCEx_PLLSAI2_Config+0x86>
 801108c:	2b03      	cmp	r3, #3
 801108e:	d825      	bhi.n	80110dc <RCCEx_PLLSAI2_Config+0xa4>
 8011090:	2b01      	cmp	r3, #1
 8011092:	d002      	beq.n	801109a <RCCEx_PLLSAI2_Config+0x62>
 8011094:	2b02      	cmp	r3, #2
 8011096:	d009      	beq.n	80110ac <RCCEx_PLLSAI2_Config+0x74>
 8011098:	e020      	b.n	80110dc <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 801109a:	4b55      	ldr	r3, [pc, #340]	@ (80111f0 <RCCEx_PLLSAI2_Config+0x1b8>)
 801109c:	681b      	ldr	r3, [r3, #0]
 801109e:	f003 0302 	and.w	r3, r3, #2
 80110a2:	2b00      	cmp	r3, #0
 80110a4:	d11d      	bne.n	80110e2 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 80110a6:	2301      	movs	r3, #1
 80110a8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80110aa:	e01a      	b.n	80110e2 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80110ac:	4b50      	ldr	r3, [pc, #320]	@ (80111f0 <RCCEx_PLLSAI2_Config+0x1b8>)
 80110ae:	681b      	ldr	r3, [r3, #0]
 80110b0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80110b4:	2b00      	cmp	r3, #0
 80110b6:	d116      	bne.n	80110e6 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 80110b8:	2301      	movs	r3, #1
 80110ba:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80110bc:	e013      	b.n	80110e6 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80110be:	4b4c      	ldr	r3, [pc, #304]	@ (80111f0 <RCCEx_PLLSAI2_Config+0x1b8>)
 80110c0:	681b      	ldr	r3, [r3, #0]
 80110c2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80110c6:	2b00      	cmp	r3, #0
 80110c8:	d10f      	bne.n	80110ea <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80110ca:	4b49      	ldr	r3, [pc, #292]	@ (80111f0 <RCCEx_PLLSAI2_Config+0x1b8>)
 80110cc:	681b      	ldr	r3, [r3, #0]
 80110ce:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80110d2:	2b00      	cmp	r3, #0
 80110d4:	d109      	bne.n	80110ea <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 80110d6:	2301      	movs	r3, #1
 80110d8:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80110da:	e006      	b.n	80110ea <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 80110dc:	2301      	movs	r3, #1
 80110de:	73fb      	strb	r3, [r7, #15]
      break;
 80110e0:	e004      	b.n	80110ec <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80110e2:	bf00      	nop
 80110e4:	e002      	b.n	80110ec <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80110e6:	bf00      	nop
 80110e8:	e000      	b.n	80110ec <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80110ea:	bf00      	nop
    }

    if(status == HAL_OK)
 80110ec:	7bfb      	ldrb	r3, [r7, #15]
 80110ee:	2b00      	cmp	r3, #0
 80110f0:	d10d      	bne.n	801110e <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80110f2:	4b3f      	ldr	r3, [pc, #252]	@ (80111f0 <RCCEx_PLLSAI2_Config+0x1b8>)
 80110f4:	68db      	ldr	r3, [r3, #12]
 80110f6:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 80110fa:	687b      	ldr	r3, [r7, #4]
 80110fc:	6819      	ldr	r1, [r3, #0]
 80110fe:	687b      	ldr	r3, [r7, #4]
 8011100:	685b      	ldr	r3, [r3, #4]
 8011102:	3b01      	subs	r3, #1
 8011104:	011b      	lsls	r3, r3, #4
 8011106:	430b      	orrs	r3, r1
 8011108:	4939      	ldr	r1, [pc, #228]	@ (80111f0 <RCCEx_PLLSAI2_Config+0x1b8>)
 801110a:	4313      	orrs	r3, r2
 801110c:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 801110e:	7bfb      	ldrb	r3, [r7, #15]
 8011110:	2b00      	cmp	r3, #0
 8011112:	d167      	bne.n	80111e4 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8011114:	4b36      	ldr	r3, [pc, #216]	@ (80111f0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8011116:	681b      	ldr	r3, [r3, #0]
 8011118:	4a35      	ldr	r2, [pc, #212]	@ (80111f0 <RCCEx_PLLSAI2_Config+0x1b8>)
 801111a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 801111e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8011120:	f7fa f8f0 	bl	800b304 <HAL_GetTick>
 8011124:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8011126:	e009      	b.n	801113c <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8011128:	f7fa f8ec 	bl	800b304 <HAL_GetTick>
 801112c:	4602      	mov	r2, r0
 801112e:	68bb      	ldr	r3, [r7, #8]
 8011130:	1ad3      	subs	r3, r2, r3
 8011132:	2b02      	cmp	r3, #2
 8011134:	d902      	bls.n	801113c <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8011136:	2303      	movs	r3, #3
 8011138:	73fb      	strb	r3, [r7, #15]
        break;
 801113a:	e005      	b.n	8011148 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 801113c:	4b2c      	ldr	r3, [pc, #176]	@ (80111f0 <RCCEx_PLLSAI2_Config+0x1b8>)
 801113e:	681b      	ldr	r3, [r3, #0]
 8011140:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8011144:	2b00      	cmp	r3, #0
 8011146:	d1ef      	bne.n	8011128 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8011148:	7bfb      	ldrb	r3, [r7, #15]
 801114a:	2b00      	cmp	r3, #0
 801114c:	d14a      	bne.n	80111e4 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 801114e:	683b      	ldr	r3, [r7, #0]
 8011150:	2b00      	cmp	r3, #0
 8011152:	d111      	bne.n	8011178 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8011154:	4b26      	ldr	r3, [pc, #152]	@ (80111f0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8011156:	695b      	ldr	r3, [r3, #20]
 8011158:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 801115c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8011160:	687a      	ldr	r2, [r7, #4]
 8011162:	6892      	ldr	r2, [r2, #8]
 8011164:	0211      	lsls	r1, r2, #8
 8011166:	687a      	ldr	r2, [r7, #4]
 8011168:	68d2      	ldr	r2, [r2, #12]
 801116a:	0912      	lsrs	r2, r2, #4
 801116c:	0452      	lsls	r2, r2, #17
 801116e:	430a      	orrs	r2, r1
 8011170:	491f      	ldr	r1, [pc, #124]	@ (80111f0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8011172:	4313      	orrs	r3, r2
 8011174:	614b      	str	r3, [r1, #20]
 8011176:	e011      	b.n	801119c <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8011178:	4b1d      	ldr	r3, [pc, #116]	@ (80111f0 <RCCEx_PLLSAI2_Config+0x1b8>)
 801117a:	695b      	ldr	r3, [r3, #20]
 801117c:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8011180:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8011184:	687a      	ldr	r2, [r7, #4]
 8011186:	6892      	ldr	r2, [r2, #8]
 8011188:	0211      	lsls	r1, r2, #8
 801118a:	687a      	ldr	r2, [r7, #4]
 801118c:	6912      	ldr	r2, [r2, #16]
 801118e:	0852      	lsrs	r2, r2, #1
 8011190:	3a01      	subs	r2, #1
 8011192:	0652      	lsls	r2, r2, #25
 8011194:	430a      	orrs	r2, r1
 8011196:	4916      	ldr	r1, [pc, #88]	@ (80111f0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8011198:	4313      	orrs	r3, r2
 801119a:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 801119c:	4b14      	ldr	r3, [pc, #80]	@ (80111f0 <RCCEx_PLLSAI2_Config+0x1b8>)
 801119e:	681b      	ldr	r3, [r3, #0]
 80111a0:	4a13      	ldr	r2, [pc, #76]	@ (80111f0 <RCCEx_PLLSAI2_Config+0x1b8>)
 80111a2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80111a6:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80111a8:	f7fa f8ac 	bl	800b304 <HAL_GetTick>
 80111ac:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80111ae:	e009      	b.n	80111c4 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80111b0:	f7fa f8a8 	bl	800b304 <HAL_GetTick>
 80111b4:	4602      	mov	r2, r0
 80111b6:	68bb      	ldr	r3, [r7, #8]
 80111b8:	1ad3      	subs	r3, r2, r3
 80111ba:	2b02      	cmp	r3, #2
 80111bc:	d902      	bls.n	80111c4 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 80111be:	2303      	movs	r3, #3
 80111c0:	73fb      	strb	r3, [r7, #15]
          break;
 80111c2:	e005      	b.n	80111d0 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80111c4:	4b0a      	ldr	r3, [pc, #40]	@ (80111f0 <RCCEx_PLLSAI2_Config+0x1b8>)
 80111c6:	681b      	ldr	r3, [r3, #0]
 80111c8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80111cc:	2b00      	cmp	r3, #0
 80111ce:	d0ef      	beq.n	80111b0 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 80111d0:	7bfb      	ldrb	r3, [r7, #15]
 80111d2:	2b00      	cmp	r3, #0
 80111d4:	d106      	bne.n	80111e4 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 80111d6:	4b06      	ldr	r3, [pc, #24]	@ (80111f0 <RCCEx_PLLSAI2_Config+0x1b8>)
 80111d8:	695a      	ldr	r2, [r3, #20]
 80111da:	687b      	ldr	r3, [r7, #4]
 80111dc:	695b      	ldr	r3, [r3, #20]
 80111de:	4904      	ldr	r1, [pc, #16]	@ (80111f0 <RCCEx_PLLSAI2_Config+0x1b8>)
 80111e0:	4313      	orrs	r3, r2
 80111e2:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 80111e4:	7bfb      	ldrb	r3, [r7, #15]
}
 80111e6:	4618      	mov	r0, r3
 80111e8:	3710      	adds	r7, #16
 80111ea:	46bd      	mov	sp, r7
 80111ec:	bd80      	pop	{r7, pc}
 80111ee:	bf00      	nop
 80111f0:	40021000 	.word	0x40021000

080111f4 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 80111f4:	b580      	push	{r7, lr}
 80111f6:	b084      	sub	sp, #16
 80111f8:	af00      	add	r7, sp, #0
 80111fa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 80111fc:	2301      	movs	r3, #1
 80111fe:	73fb      	strb	r3, [r7, #15]

  /* Check the RTC peripheral state */
  if (hrtc != NULL)
 8011200:	687b      	ldr	r3, [r7, #4]
 8011202:	2b00      	cmp	r3, #0
 8011204:	d079      	beq.n	80112fa <HAL_RTC_Init+0x106>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else /* #if (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */
    if (hrtc->State == HAL_RTC_STATE_RESET)
 8011206:	687b      	ldr	r3, [r7, #4]
 8011208:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 801120c:	b2db      	uxtb	r3, r3
 801120e:	2b00      	cmp	r3, #0
 8011210:	d106      	bne.n	8011220 <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 8011212:	687b      	ldr	r3, [r7, #4]
 8011214:	2200      	movs	r2, #0
 8011216:	f883 2020 	strb.w	r2, [r3, #32]

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 801121a:	6878      	ldr	r0, [r7, #4]
 801121c:	f7f6 fc0e 	bl	8007a3c <HAL_RTC_MspInit>
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
    /* Process TAMP ip offset from RTC one */
    hrtc->TampOffset = (TAMP_BASE - RTC_BASE);
#endif
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 8011220:	687b      	ldr	r3, [r7, #4]
 8011222:	2202      	movs	r2, #2
 8011224:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Check whether the calendar needs to be initialized */
    if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 8011228:	687b      	ldr	r3, [r7, #4]
 801122a:	681b      	ldr	r3, [r3, #0]
 801122c:	68db      	ldr	r3, [r3, #12]
 801122e:	f003 0310 	and.w	r3, r3, #16
 8011232:	2b10      	cmp	r3, #16
 8011234:	d058      	beq.n	80112e8 <HAL_RTC_Init+0xf4>
    {
      /* Disable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8011236:	687b      	ldr	r3, [r7, #4]
 8011238:	681b      	ldr	r3, [r3, #0]
 801123a:	22ca      	movs	r2, #202	@ 0xca
 801123c:	625a      	str	r2, [r3, #36]	@ 0x24
 801123e:	687b      	ldr	r3, [r7, #4]
 8011240:	681b      	ldr	r3, [r3, #0]
 8011242:	2253      	movs	r2, #83	@ 0x53
 8011244:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Enter Initialization mode */
      status = RTC_EnterInitMode(hrtc);
 8011246:	6878      	ldr	r0, [r7, #4]
 8011248:	f000 fb82 	bl	8011950 <RTC_EnterInitMode>
 801124c:	4603      	mov	r3, r0
 801124e:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 8011250:	7bfb      	ldrb	r3, [r7, #15]
 8011252:	2b00      	cmp	r3, #0
 8011254:	d127      	bne.n	80112a6 <HAL_RTC_Init+0xb2>
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
        /* Clear RTC_CR FMT, OSEL, POL and TAMPOE Bits */
        hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
#else
        /* Clear RTC_CR FMT, OSEL and POL Bits */
        hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL);
 8011256:	687b      	ldr	r3, [r7, #4]
 8011258:	681b      	ldr	r3, [r3, #0]
 801125a:	689b      	ldr	r3, [r3, #8]
 801125c:	687a      	ldr	r2, [r7, #4]
 801125e:	6812      	ldr	r2, [r2, #0]
 8011260:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 8011264:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8011268:	6093      	str	r3, [r2, #8]
#endif
        /* Set RTC_CR register */
        hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 801126a:	687b      	ldr	r3, [r7, #4]
 801126c:	681b      	ldr	r3, [r3, #0]
 801126e:	6899      	ldr	r1, [r3, #8]
 8011270:	687b      	ldr	r3, [r7, #4]
 8011272:	685a      	ldr	r2, [r3, #4]
 8011274:	687b      	ldr	r3, [r7, #4]
 8011276:	691b      	ldr	r3, [r3, #16]
 8011278:	431a      	orrs	r2, r3
 801127a:	687b      	ldr	r3, [r7, #4]
 801127c:	699b      	ldr	r3, [r3, #24]
 801127e:	431a      	orrs	r2, r3
 8011280:	687b      	ldr	r3, [r7, #4]
 8011282:	681b      	ldr	r3, [r3, #0]
 8011284:	430a      	orrs	r2, r1
 8011286:	609a      	str	r2, [r3, #8]

        /* Configure the RTC PRER */
        hrtc->Instance->PRER = (hrtc->Init.SynchPrediv);
 8011288:	687b      	ldr	r3, [r7, #4]
 801128a:	681b      	ldr	r3, [r3, #0]
 801128c:	687a      	ldr	r2, [r7, #4]
 801128e:	68d2      	ldr	r2, [r2, #12]
 8011290:	611a      	str	r2, [r3, #16]
        hrtc->Instance->PRER |= (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8011292:	687b      	ldr	r3, [r7, #4]
 8011294:	681b      	ldr	r3, [r3, #0]
 8011296:	6919      	ldr	r1, [r3, #16]
 8011298:	687b      	ldr	r3, [r7, #4]
 801129a:	689b      	ldr	r3, [r3, #8]
 801129c:	041a      	lsls	r2, r3, #16
 801129e:	687b      	ldr	r3, [r7, #4]
 80112a0:	681b      	ldr	r3, [r3, #0]
 80112a2:	430a      	orrs	r2, r1
 80112a4:	611a      	str	r2, [r3, #16]
        MODIFY_REG(RTC->ICSR, RTC_ICSR_BIN | RTC_ICSR_BCDU, hrtc->Init.BinMode | hrtc->Init.BinMixBcdU);
#endif
      }

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 80112a6:	6878      	ldr	r0, [r7, #4]
 80112a8:	f000 fb86 	bl	80119b8 <RTC_ExitInitMode>
 80112ac:	4603      	mov	r3, r0
 80112ae:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 80112b0:	7bfb      	ldrb	r3, [r7, #15]
 80112b2:	2b00      	cmp	r3, #0
 80112b4:	d113      	bne.n	80112de <HAL_RTC_Init+0xea>
      {
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU | RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
#else
        hrtc->Instance->OR &= ~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 80112b6:	687b      	ldr	r3, [r7, #4]
 80112b8:	681b      	ldr	r3, [r3, #0]
 80112ba:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80112bc:	687b      	ldr	r3, [r7, #4]
 80112be:	681b      	ldr	r3, [r3, #0]
 80112c0:	f022 0203 	bic.w	r2, r2, #3
 80112c4:	64da      	str	r2, [r3, #76]	@ 0x4c
        hrtc->Instance->OR |= (hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 80112c6:	687b      	ldr	r3, [r7, #4]
 80112c8:	681b      	ldr	r3, [r3, #0]
 80112ca:	6cd9      	ldr	r1, [r3, #76]	@ 0x4c
 80112cc:	687b      	ldr	r3, [r7, #4]
 80112ce:	69da      	ldr	r2, [r3, #28]
 80112d0:	687b      	ldr	r3, [r7, #4]
 80112d2:	695b      	ldr	r3, [r3, #20]
 80112d4:	431a      	orrs	r2, r3
 80112d6:	687b      	ldr	r3, [r7, #4]
 80112d8:	681b      	ldr	r3, [r3, #0]
 80112da:	430a      	orrs	r2, r1
 80112dc:	64da      	str	r2, [r3, #76]	@ 0x4c
#endif
      }

      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80112de:	687b      	ldr	r3, [r7, #4]
 80112e0:	681b      	ldr	r3, [r3, #0]
 80112e2:	22ff      	movs	r2, #255	@ 0xff
 80112e4:	625a      	str	r2, [r3, #36]	@ 0x24
 80112e6:	e001      	b.n	80112ec <HAL_RTC_Init+0xf8>
    }
    else
    {
      /* The calendar is already initialized */
      status = HAL_OK;
 80112e8:	2300      	movs	r3, #0
 80112ea:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 80112ec:	7bfb      	ldrb	r3, [r7, #15]
 80112ee:	2b00      	cmp	r3, #0
 80112f0:	d103      	bne.n	80112fa <HAL_RTC_Init+0x106>
    {
        hrtc->State = HAL_RTC_STATE_READY;
 80112f2:	687b      	ldr	r3, [r7, #4]
 80112f4:	2201      	movs	r2, #1
 80112f6:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    }
  }

  return status;
 80112fa:	7bfb      	ldrb	r3, [r7, #15]
}
 80112fc:	4618      	mov	r0, r3
 80112fe:	3710      	adds	r7, #16
 8011300:	46bd      	mov	sp, r7
 8011302:	bd80      	pop	{r7, pc}

08011304 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8011304:	b590      	push	{r4, r7, lr}
 8011306:	b087      	sub	sp, #28
 8011308:	af00      	add	r7, sp, #0
 801130a:	60f8      	str	r0, [r7, #12]
 801130c:	60b9      	str	r1, [r7, #8]
 801130e:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8011310:	68fb      	ldr	r3, [r7, #12]
 8011312:	f893 3020 	ldrb.w	r3, [r3, #32]
 8011316:	2b01      	cmp	r3, #1
 8011318:	d101      	bne.n	801131e <HAL_RTC_SetTime+0x1a>
 801131a:	2302      	movs	r3, #2
 801131c:	e08b      	b.n	8011436 <HAL_RTC_SetTime+0x132>
 801131e:	68fb      	ldr	r3, [r7, #12]
 8011320:	2201      	movs	r2, #1
 8011322:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8011326:	68fb      	ldr	r3, [r7, #12]
 8011328:	2202      	movs	r2, #2
 801132a:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 801132e:	68fb      	ldr	r3, [r7, #12]
 8011330:	681b      	ldr	r3, [r3, #0]
 8011332:	22ca      	movs	r2, #202	@ 0xca
 8011334:	625a      	str	r2, [r3, #36]	@ 0x24
 8011336:	68fb      	ldr	r3, [r7, #12]
 8011338:	681b      	ldr	r3, [r3, #0]
 801133a:	2253      	movs	r2, #83	@ 0x53
 801133c:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 801133e:	68f8      	ldr	r0, [r7, #12]
 8011340:	f000 fb06 	bl	8011950 <RTC_EnterInitMode>
 8011344:	4603      	mov	r3, r0
 8011346:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 8011348:	7cfb      	ldrb	r3, [r7, #19]
 801134a:	2b00      	cmp	r3, #0
 801134c:	d163      	bne.n	8011416 <HAL_RTC_SetTime+0x112>
  {
    if (Format == RTC_FORMAT_BIN)
 801134e:	687b      	ldr	r3, [r7, #4]
 8011350:	2b00      	cmp	r3, #0
 8011352:	d126      	bne.n	80113a2 <HAL_RTC_SetTime+0x9e>
    {
      if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8011354:	68fb      	ldr	r3, [r7, #12]
 8011356:	681b      	ldr	r3, [r3, #0]
 8011358:	689b      	ldr	r3, [r3, #8]
 801135a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 801135e:	2b00      	cmp	r3, #0
 8011360:	d102      	bne.n	8011368 <HAL_RTC_SetTime+0x64>
        assert_param(IS_RTC_HOUR12(sTime->Hours));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 8011362:	68bb      	ldr	r3, [r7, #8]
 8011364:	2200      	movs	r2, #0
 8011366:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(sTime->Hours));
      }
      assert_param(IS_RTC_MINUTES(sTime->Minutes));
      assert_param(IS_RTC_SECONDS(sTime->Seconds));

      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8011368:	68bb      	ldr	r3, [r7, #8]
 801136a:	781b      	ldrb	r3, [r3, #0]
 801136c:	4618      	mov	r0, r3
 801136e:	f000 fb61 	bl	8011a34 <RTC_ByteToBcd2>
 8011372:	4603      	mov	r3, r0
 8011374:	041c      	lsls	r4, r3, #16
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8011376:	68bb      	ldr	r3, [r7, #8]
 8011378:	785b      	ldrb	r3, [r3, #1]
 801137a:	4618      	mov	r0, r3
 801137c:	f000 fb5a 	bl	8011a34 <RTC_ByteToBcd2>
 8011380:	4603      	mov	r3, r0
 8011382:	021b      	lsls	r3, r3, #8
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8011384:	431c      	orrs	r4, r3
                          ((uint32_t)RTC_ByteToBcd2(sTime->Seconds) << RTC_TR_SU_Pos) | \
 8011386:	68bb      	ldr	r3, [r7, #8]
 8011388:	789b      	ldrb	r3, [r3, #2]
 801138a:	4618      	mov	r0, r3
 801138c:	f000 fb52 	bl	8011a34 <RTC_ByteToBcd2>
 8011390:	4603      	mov	r3, r0
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8011392:	ea44 0203 	orr.w	r2, r4, r3
                          (((uint32_t)sTime->TimeFormat) << RTC_TR_PM_Pos));
 8011396:	68bb      	ldr	r3, [r7, #8]
 8011398:	78db      	ldrb	r3, [r3, #3]
 801139a:	059b      	lsls	r3, r3, #22
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 801139c:	4313      	orrs	r3, r2
 801139e:	617b      	str	r3, [r7, #20]
 80113a0:	e018      	b.n	80113d4 <HAL_RTC_SetTime+0xd0>
    }
    else
    {
      if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80113a2:	68fb      	ldr	r3, [r7, #12]
 80113a4:	681b      	ldr	r3, [r3, #0]
 80113a6:	689b      	ldr	r3, [r3, #8]
 80113a8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80113ac:	2b00      	cmp	r3, #0
 80113ae:	d102      	bne.n	80113b6 <HAL_RTC_SetTime+0xb2>
        assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 80113b0:	68bb      	ldr	r3, [r7, #8]
 80113b2:	2200      	movs	r2, #0
 80113b4:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
      }
      assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
      assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 80113b6:	68bb      	ldr	r3, [r7, #8]
 80113b8:	781b      	ldrb	r3, [r3, #0]
 80113ba:	041a      	lsls	r2, r3, #16
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80113bc:	68bb      	ldr	r3, [r7, #8]
 80113be:	785b      	ldrb	r3, [r3, #1]
 80113c0:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 80113c2:	4313      	orrs	r3, r2
                ((uint32_t)(sTime->Seconds) << RTC_TR_SU_Pos) | \
 80113c4:	68ba      	ldr	r2, [r7, #8]
 80113c6:	7892      	ldrb	r2, [r2, #2]
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80113c8:	431a      	orrs	r2, r3
                ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 80113ca:	68bb      	ldr	r3, [r7, #8]
 80113cc:	78db      	ldrb	r3, [r3, #3]
 80113ce:	059b      	lsls	r3, r3, #22
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 80113d0:	4313      	orrs	r3, r2
 80113d2:	617b      	str	r3, [r7, #20]
    }

    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 80113d4:	68fb      	ldr	r3, [r7, #12]
 80113d6:	681a      	ldr	r2, [r3, #0]
 80113d8:	697b      	ldr	r3, [r7, #20]
 80113da:	f003 337f 	and.w	r3, r3, #2139062143	@ 0x7f7f7f7f
 80113de:	f023 43fe 	bic.w	r3, r3, #2130706432	@ 0x7f000000
 80113e2:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured */
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 80113e4:	68fb      	ldr	r3, [r7, #12]
 80113e6:	681b      	ldr	r3, [r3, #0]
 80113e8:	689a      	ldr	r2, [r3, #8]
 80113ea:	68fb      	ldr	r3, [r7, #12]
 80113ec:	681b      	ldr	r3, [r3, #0]
 80113ee:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 80113f2:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 80113f4:	68fb      	ldr	r3, [r7, #12]
 80113f6:	681b      	ldr	r3, [r3, #0]
 80113f8:	6899      	ldr	r1, [r3, #8]
 80113fa:	68bb      	ldr	r3, [r7, #8]
 80113fc:	68da      	ldr	r2, [r3, #12]
 80113fe:	68bb      	ldr	r3, [r7, #8]
 8011400:	691b      	ldr	r3, [r3, #16]
 8011402:	431a      	orrs	r2, r3
 8011404:	68fb      	ldr	r3, [r7, #12]
 8011406:	681b      	ldr	r3, [r3, #0]
 8011408:	430a      	orrs	r2, r1
 801140a:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 801140c:	68f8      	ldr	r0, [r7, #12]
 801140e:	f000 fad3 	bl	80119b8 <RTC_ExitInitMode>
 8011412:	4603      	mov	r3, r0
 8011414:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8011416:	68fb      	ldr	r3, [r7, #12]
 8011418:	681b      	ldr	r3, [r3, #0]
 801141a:	22ff      	movs	r2, #255	@ 0xff
 801141c:	625a      	str	r2, [r3, #36]	@ 0x24

  if (status == HAL_OK)
 801141e:	7cfb      	ldrb	r3, [r7, #19]
 8011420:	2b00      	cmp	r3, #0
 8011422:	d103      	bne.n	801142c <HAL_RTC_SetTime+0x128>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8011424:	68fb      	ldr	r3, [r7, #12]
 8011426:	2201      	movs	r2, #1
 8011428:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 801142c:	68fb      	ldr	r3, [r7, #12]
 801142e:	2200      	movs	r2, #0
 8011430:	f883 2020 	strb.w	r2, [r3, #32]

  return status;
 8011434:	7cfb      	ldrb	r3, [r7, #19]
}
 8011436:	4618      	mov	r0, r3
 8011438:	371c      	adds	r7, #28
 801143a:	46bd      	mov	sp, r7
 801143c:	bd90      	pop	{r4, r7, pc}

0801143e <HAL_RTC_GetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 801143e:	b580      	push	{r7, lr}
 8011440:	b086      	sub	sp, #24
 8011442:	af00      	add	r7, sp, #0
 8011444:	60f8      	str	r0, [r7, #12]
 8011446:	60b9      	str	r1, [r7, #8]
 8011448:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds structure field from the corresponding register*/
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 801144a:	68fb      	ldr	r3, [r7, #12]
 801144c:	681b      	ldr	r3, [r3, #0]
 801144e:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8011450:	68bb      	ldr	r3, [r7, #8]
 8011452:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 8011454:	68fb      	ldr	r3, [r7, #12]
 8011456:	681b      	ldr	r3, [r3, #0]
 8011458:	691b      	ldr	r3, [r3, #16]
 801145a:	f3c3 020e 	ubfx	r2, r3, #0, #15
 801145e:	68bb      	ldr	r3, [r7, #8]
 8011460:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 8011462:	68fb      	ldr	r3, [r7, #12]
 8011464:	681b      	ldr	r3, [r3, #0]
 8011466:	681b      	ldr	r3, [r3, #0]
 8011468:	f003 337f 	and.w	r3, r3, #2139062143	@ 0x7f7f7f7f
 801146c:	f023 43fe 	bic.w	r3, r3, #2130706432	@ 0x7f000000
 8011470:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> RTC_TR_HU_Pos);
 8011472:	697b      	ldr	r3, [r7, #20]
 8011474:	0c1b      	lsrs	r3, r3, #16
 8011476:	b2db      	uxtb	r3, r3
 8011478:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 801147c:	b2da      	uxtb	r2, r3
 801147e:	68bb      	ldr	r3, [r7, #8]
 8011480:	701a      	strb	r2, [r3, #0]
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 8011482:	697b      	ldr	r3, [r7, #20]
 8011484:	0a1b      	lsrs	r3, r3, #8
 8011486:	b2db      	uxtb	r3, r3
 8011488:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 801148c:	b2da      	uxtb	r2, r3
 801148e:	68bb      	ldr	r3, [r7, #8]
 8011490:	705a      	strb	r2, [r3, #1]
  sTime->Seconds = (uint8_t)((tmpreg & (RTC_TR_ST | RTC_TR_SU)) >> RTC_TR_SU_Pos);
 8011492:	697b      	ldr	r3, [r7, #20]
 8011494:	b2db      	uxtb	r3, r3
 8011496:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 801149a:	b2da      	uxtb	r2, r3
 801149c:	68bb      	ldr	r3, [r7, #8]
 801149e:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> RTC_TR_PM_Pos);
 80114a0:	697b      	ldr	r3, [r7, #20]
 80114a2:	0d9b      	lsrs	r3, r3, #22
 80114a4:	b2db      	uxtb	r3, r3
 80114a6:	f003 0301 	and.w	r3, r3, #1
 80114aa:	b2da      	uxtb	r2, r3
 80114ac:	68bb      	ldr	r3, [r7, #8]
 80114ae:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 80114b0:	687b      	ldr	r3, [r7, #4]
 80114b2:	2b00      	cmp	r3, #0
 80114b4:	d11a      	bne.n	80114ec <HAL_RTC_GetTime+0xae>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 80114b6:	68bb      	ldr	r3, [r7, #8]
 80114b8:	781b      	ldrb	r3, [r3, #0]
 80114ba:	4618      	mov	r0, r3
 80114bc:	f000 fada 	bl	8011a74 <RTC_Bcd2ToByte>
 80114c0:	4603      	mov	r3, r0
 80114c2:	461a      	mov	r2, r3
 80114c4:	68bb      	ldr	r3, [r7, #8]
 80114c6:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 80114c8:	68bb      	ldr	r3, [r7, #8]
 80114ca:	785b      	ldrb	r3, [r3, #1]
 80114cc:	4618      	mov	r0, r3
 80114ce:	f000 fad1 	bl	8011a74 <RTC_Bcd2ToByte>
 80114d2:	4603      	mov	r3, r0
 80114d4:	461a      	mov	r2, r3
 80114d6:	68bb      	ldr	r3, [r7, #8]
 80114d8:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 80114da:	68bb      	ldr	r3, [r7, #8]
 80114dc:	789b      	ldrb	r3, [r3, #2]
 80114de:	4618      	mov	r0, r3
 80114e0:	f000 fac8 	bl	8011a74 <RTC_Bcd2ToByte>
 80114e4:	4603      	mov	r3, r0
 80114e6:	461a      	mov	r2, r3
 80114e8:	68bb      	ldr	r3, [r7, #8]
 80114ea:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 80114ec:	2300      	movs	r3, #0
}
 80114ee:	4618      	mov	r0, r3
 80114f0:	3718      	adds	r7, #24
 80114f2:	46bd      	mov	sp, r7
 80114f4:	bd80      	pop	{r7, pc}

080114f6 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 80114f6:	b590      	push	{r4, r7, lr}
 80114f8:	b087      	sub	sp, #28
 80114fa:	af00      	add	r7, sp, #0
 80114fc:	60f8      	str	r0, [r7, #12]
 80114fe:	60b9      	str	r1, [r7, #8]
 8011500:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8011502:	68fb      	ldr	r3, [r7, #12]
 8011504:	f893 3020 	ldrb.w	r3, [r3, #32]
 8011508:	2b01      	cmp	r3, #1
 801150a:	d101      	bne.n	8011510 <HAL_RTC_SetDate+0x1a>
 801150c:	2302      	movs	r3, #2
 801150e:	e075      	b.n	80115fc <HAL_RTC_SetDate+0x106>
 8011510:	68fb      	ldr	r3, [r7, #12]
 8011512:	2201      	movs	r2, #1
 8011514:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8011518:	68fb      	ldr	r3, [r7, #12]
 801151a:	2202      	movs	r2, #2
 801151c:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8011520:	687b      	ldr	r3, [r7, #4]
 8011522:	2b00      	cmp	r3, #0
 8011524:	d10e      	bne.n	8011544 <HAL_RTC_SetDate+0x4e>
 8011526:	68bb      	ldr	r3, [r7, #8]
 8011528:	785b      	ldrb	r3, [r3, #1]
 801152a:	f003 0310 	and.w	r3, r3, #16
 801152e:	2b00      	cmp	r3, #0
 8011530:	d008      	beq.n	8011544 <HAL_RTC_SetDate+0x4e>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8011532:	68bb      	ldr	r3, [r7, #8]
 8011534:	785b      	ldrb	r3, [r3, #1]
 8011536:	f023 0310 	bic.w	r3, r3, #16
 801153a:	b2db      	uxtb	r3, r3
 801153c:	330a      	adds	r3, #10
 801153e:	b2da      	uxtb	r2, r3
 8011540:	68bb      	ldr	r3, [r7, #8]
 8011542:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 8011544:	687b      	ldr	r3, [r7, #4]
 8011546:	2b00      	cmp	r3, #0
 8011548:	d11c      	bne.n	8011584 <HAL_RTC_SetDate+0x8e>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 801154a:	68bb      	ldr	r3, [r7, #8]
 801154c:	78db      	ldrb	r3, [r3, #3]
 801154e:	4618      	mov	r0, r3
 8011550:	f000 fa70 	bl	8011a34 <RTC_ByteToBcd2>
 8011554:	4603      	mov	r3, r0
 8011556:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8011558:	68bb      	ldr	r3, [r7, #8]
 801155a:	785b      	ldrb	r3, [r3, #1]
 801155c:	4618      	mov	r0, r3
 801155e:	f000 fa69 	bl	8011a34 <RTC_ByteToBcd2>
 8011562:	4603      	mov	r3, r0
 8011564:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 8011566:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date) << RTC_DR_DU_Pos) | \
 8011568:	68bb      	ldr	r3, [r7, #8]
 801156a:	789b      	ldrb	r3, [r3, #2]
 801156c:	4618      	mov	r0, r3
 801156e:	f000 fa61 	bl	8011a34 <RTC_ByteToBcd2>
 8011572:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8011574:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay << RTC_DR_WDU_Pos));
 8011578:	68bb      	ldr	r3, [r7, #8]
 801157a:	781b      	ldrb	r3, [r3, #0]
 801157c:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 801157e:	4313      	orrs	r3, r2
 8011580:	617b      	str	r3, [r7, #20]
 8011582:	e00e      	b.n	80115a2 <HAL_RTC_SetDate+0xac>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8011584:	68bb      	ldr	r3, [r7, #8]
 8011586:	78db      	ldrb	r3, [r3, #3]
 8011588:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 801158a:	68bb      	ldr	r3, [r7, #8]
 801158c:	785b      	ldrb	r3, [r3, #1]
 801158e:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8011590:	4313      	orrs	r3, r2
                  (((uint32_t)sDate->Date) << RTC_DR_DU_Pos) | \
 8011592:	68ba      	ldr	r2, [r7, #8]
 8011594:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 8011596:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 8011598:	68bb      	ldr	r3, [r7, #8]
 801159a:	781b      	ldrb	r3, [r3, #0]
 801159c:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 801159e:	4313      	orrs	r3, r2
 80115a0:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80115a2:	68fb      	ldr	r3, [r7, #12]
 80115a4:	681b      	ldr	r3, [r3, #0]
 80115a6:	22ca      	movs	r2, #202	@ 0xca
 80115a8:	625a      	str	r2, [r3, #36]	@ 0x24
 80115aa:	68fb      	ldr	r3, [r7, #12]
 80115ac:	681b      	ldr	r3, [r3, #0]
 80115ae:	2253      	movs	r2, #83	@ 0x53
 80115b0:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 80115b2:	68f8      	ldr	r0, [r7, #12]
 80115b4:	f000 f9cc 	bl	8011950 <RTC_EnterInitMode>
 80115b8:	4603      	mov	r3, r0
 80115ba:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 80115bc:	7cfb      	ldrb	r3, [r7, #19]
 80115be:	2b00      	cmp	r3, #0
 80115c0:	d10c      	bne.n	80115dc <HAL_RTC_SetDate+0xe6>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 80115c2:	68fb      	ldr	r3, [r7, #12]
 80115c4:	681a      	ldr	r2, [r3, #0]
 80115c6:	697b      	ldr	r3, [r7, #20]
 80115c8:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 80115cc:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 80115d0:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 80115d2:	68f8      	ldr	r0, [r7, #12]
 80115d4:	f000 f9f0 	bl	80119b8 <RTC_ExitInitMode>
 80115d8:	4603      	mov	r3, r0
 80115da:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80115dc:	68fb      	ldr	r3, [r7, #12]
 80115de:	681b      	ldr	r3, [r3, #0]
 80115e0:	22ff      	movs	r2, #255	@ 0xff
 80115e2:	625a      	str	r2, [r3, #36]	@ 0x24

  if (status == HAL_OK)
 80115e4:	7cfb      	ldrb	r3, [r7, #19]
 80115e6:	2b00      	cmp	r3, #0
 80115e8:	d103      	bne.n	80115f2 <HAL_RTC_SetDate+0xfc>
  {
    hrtc->State = HAL_RTC_STATE_READY ;
 80115ea:	68fb      	ldr	r3, [r7, #12]
 80115ec:	2201      	movs	r2, #1
 80115ee:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80115f2:	68fb      	ldr	r3, [r7, #12]
 80115f4:	2200      	movs	r2, #0
 80115f6:	f883 2020 	strb.w	r2, [r3, #32]

  return status;
 80115fa:	7cfb      	ldrb	r3, [r7, #19]
}
 80115fc:	4618      	mov	r0, r3
 80115fe:	371c      	adds	r7, #28
 8011600:	46bd      	mov	sp, r7
 8011602:	bd90      	pop	{r4, r7, pc}

08011604 <HAL_RTC_SetAlarm_IT>:
  *             @arg RTC_FORMAT_BIN: Binary data format
  *             @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm_IT(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 8011604:	b590      	push	{r4, r7, lr}
 8011606:	b089      	sub	sp, #36	@ 0x24
 8011608:	af00      	add	r7, sp, #0
 801160a:	60f8      	str	r0, [r7, #12]
 801160c:	60b9      	str	r1, [r7, #8]
 801160e:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_ALARM_DATE_WEEKDAY_SEL(sAlarm->AlarmDateWeekDaySel));
  assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(sAlarm->AlarmTime.SubSeconds));
  assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(sAlarm->AlarmSubSecondMask));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8011610:	68fb      	ldr	r3, [r7, #12]
 8011612:	f893 3020 	ldrb.w	r3, [r3, #32]
 8011616:	2b01      	cmp	r3, #1
 8011618:	d101      	bne.n	801161e <HAL_RTC_SetAlarm_IT+0x1a>
 801161a:	2302      	movs	r3, #2
 801161c:	e127      	b.n	801186e <HAL_RTC_SetAlarm_IT+0x26a>
 801161e:	68fb      	ldr	r3, [r7, #12]
 8011620:	2201      	movs	r2, #1
 8011622:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8011626:	68fb      	ldr	r3, [r7, #12]
 8011628:	2202      	movs	r2, #2
 801162a:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  if (Format == RTC_FORMAT_BIN)
 801162e:	687b      	ldr	r3, [r7, #4]
 8011630:	2b00      	cmp	r3, #0
 8011632:	d137      	bne.n	80116a4 <HAL_RTC_SetAlarm_IT+0xa0>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8011634:	68fb      	ldr	r3, [r7, #12]
 8011636:	681b      	ldr	r3, [r3, #0]
 8011638:	689b      	ldr	r3, [r3, #8]
 801163a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 801163e:	2b00      	cmp	r3, #0
 8011640:	d102      	bne.n	8011648 <HAL_RTC_SetAlarm_IT+0x44>
      assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 8011642:	68bb      	ldr	r3, [r7, #8]
 8011644:	2200      	movs	r2, #0
 8011646:	70da      	strb	r2, [r3, #3]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
    }

    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8011648:	68bb      	ldr	r3, [r7, #8]
 801164a:	781b      	ldrb	r3, [r3, #0]
 801164c:	4618      	mov	r0, r3
 801164e:	f000 f9f1 	bl	8011a34 <RTC_ByteToBcd2>
 8011652:	4603      	mov	r3, r0
 8011654:	041c      	lsls	r4, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8011656:	68bb      	ldr	r3, [r7, #8]
 8011658:	785b      	ldrb	r3, [r3, #1]
 801165a:	4618      	mov	r0, r3
 801165c:	f000 f9ea 	bl	8011a34 <RTC_ByteToBcd2>
 8011660:	4603      	mov	r3, r0
 8011662:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8011664:	431c      	orrs	r4, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8011666:	68bb      	ldr	r3, [r7, #8]
 8011668:	789b      	ldrb	r3, [r3, #2]
 801166a:	4618      	mov	r0, r3
 801166c:	f000 f9e2 	bl	8011a34 <RTC_ByteToBcd2>
 8011670:	4603      	mov	r3, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8011672:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8011676:	68bb      	ldr	r3, [r7, #8]
 8011678:	78db      	ldrb	r3, [r3, #3]
 801167a:	059b      	lsls	r3, r3, #22
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 801167c:	ea42 0403 	orr.w	r4, r2, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8011680:	68bb      	ldr	r3, [r7, #8]
 8011682:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8011686:	4618      	mov	r0, r3
 8011688:	f000 f9d4 	bl	8011a34 <RTC_ByteToBcd2>
 801168c:	4603      	mov	r3, r0
 801168e:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8011690:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 8011694:	68bb      	ldr	r3, [r7, #8]
 8011696:	6a1b      	ldr	r3, [r3, #32]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8011698:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 801169a:	68bb      	ldr	r3, [r7, #8]
 801169c:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 801169e:	4313      	orrs	r3, r2
 80116a0:	61fb      	str	r3, [r7, #28]
 80116a2:	e023      	b.n	80116ec <HAL_RTC_SetAlarm_IT+0xe8>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80116a4:	68fb      	ldr	r3, [r7, #12]
 80116a6:	681b      	ldr	r3, [r3, #0]
 80116a8:	689b      	ldr	r3, [r3, #8]
 80116aa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80116ae:	2b00      	cmp	r3, #0
 80116b0:	d102      	bne.n	80116b8 <HAL_RTC_SetAlarm_IT+0xb4>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 80116b2:	68bb      	ldr	r3, [r7, #8]
 80116b4:	2200      	movs	r2, #0
 80116b6:	70da      	strb	r2, [r3, #3]
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
    }

#endif /* USE_FULL_ASSERT */
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 80116b8:	68bb      	ldr	r3, [r7, #8]
 80116ba:	781b      	ldrb	r3, [r3, #0]
 80116bc:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 80116be:	68bb      	ldr	r3, [r7, #8]
 80116c0:	785b      	ldrb	r3, [r3, #1]
 80116c2:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 80116c4:	4313      	orrs	r3, r2
              ((uint32_t)(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 80116c6:	68ba      	ldr	r2, [r7, #8]
 80116c8:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 80116ca:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 80116cc:	68bb      	ldr	r3, [r7, #8]
 80116ce:	78db      	ldrb	r3, [r3, #3]
 80116d0:	059b      	lsls	r3, r3, #22
              ((uint32_t)(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 80116d2:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 80116d4:	68bb      	ldr	r3, [r7, #8]
 80116d6:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80116da:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 80116dc:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 80116de:	68bb      	ldr	r3, [r7, #8]
 80116e0:	6a1b      	ldr	r3, [r3, #32]
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 80116e2:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 80116e4:	68bb      	ldr	r3, [r7, #8]
 80116e6:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 80116e8:	4313      	orrs	r3, r2
 80116ea:	61fb      	str	r3, [r7, #28]
  }
  /* Configure the Alarm A or Alarm B Sub Second registers */
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | (uint32_t)(sAlarm->AlarmSubSecondMask));
 80116ec:	68bb      	ldr	r3, [r7, #8]
 80116ee:	685a      	ldr	r2, [r3, #4]
 80116f0:	68bb      	ldr	r3, [r7, #8]
 80116f2:	69db      	ldr	r3, [r3, #28]
 80116f4:	4313      	orrs	r3, r2
 80116f6:	61bb      	str	r3, [r7, #24]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80116f8:	68fb      	ldr	r3, [r7, #12]
 80116fa:	681b      	ldr	r3, [r3, #0]
 80116fc:	22ca      	movs	r2, #202	@ 0xca
 80116fe:	625a      	str	r2, [r3, #36]	@ 0x24
 8011700:	68fb      	ldr	r3, [r7, #12]
 8011702:	681b      	ldr	r3, [r3, #0]
 8011704:	2253      	movs	r2, #83	@ 0x53
 8011706:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Configure the Alarm register */
  if (sAlarm->Alarm == RTC_ALARM_A)
 8011708:	68bb      	ldr	r3, [r7, #8]
 801170a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801170c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8011710:	d14a      	bne.n	80117a8 <HAL_RTC_SetAlarm_IT+0x1a4>
  {
    /* Disable the Alarm A interrupt */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 8011712:	68fb      	ldr	r3, [r7, #12]
 8011714:	681b      	ldr	r3, [r3, #0]
 8011716:	689a      	ldr	r2, [r3, #8]
 8011718:	68fb      	ldr	r3, [r7, #12]
 801171a:	681b      	ldr	r3, [r3, #0]
 801171c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8011720:	609a      	str	r2, [r3, #8]

    /* Clear flag alarm A */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 8011722:	68fb      	ldr	r3, [r7, #12]
 8011724:	681b      	ldr	r3, [r3, #0]
 8011726:	68db      	ldr	r3, [r3, #12]
 8011728:	b2da      	uxtb	r2, r3
 801172a:	68fb      	ldr	r3, [r7, #12]
 801172c:	681b      	ldr	r3, [r3, #0]
 801172e:	f462 72c0 	orn	r2, r2, #384	@ 0x180
 8011732:	60da      	str	r2, [r3, #12]

#if defined (RTC_FLAG_ALRAWF)
    uint32_t tickstart = HAL_GetTick();
 8011734:	f7f9 fde6 	bl	800b304 <HAL_GetTick>
 8011738:	6138      	str	r0, [r7, #16]
    /* Wait till RTC ALRAWF flag is set and if Time out is reached exit */
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 801173a:	e015      	b.n	8011768 <HAL_RTC_SetAlarm_IT+0x164>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 801173c:	f7f9 fde2 	bl	800b304 <HAL_GetTick>
 8011740:	4602      	mov	r2, r0
 8011742:	693b      	ldr	r3, [r7, #16]
 8011744:	1ad3      	subs	r3, r2, r3
 8011746:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 801174a:	d90d      	bls.n	8011768 <HAL_RTC_SetAlarm_IT+0x164>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 801174c:	68fb      	ldr	r3, [r7, #12]
 801174e:	681b      	ldr	r3, [r3, #0]
 8011750:	22ff      	movs	r2, #255	@ 0xff
 8011752:	625a      	str	r2, [r3, #36]	@ 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8011754:	68fb      	ldr	r3, [r7, #12]
 8011756:	2203      	movs	r2, #3
 8011758:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 801175c:	68fb      	ldr	r3, [r7, #12]
 801175e:	2200      	movs	r2, #0
 8011760:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_TIMEOUT;
 8011764:	2303      	movs	r3, #3
 8011766:	e082      	b.n	801186e <HAL_RTC_SetAlarm_IT+0x26a>
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 8011768:	68fb      	ldr	r3, [r7, #12]
 801176a:	681b      	ldr	r3, [r3, #0]
 801176c:	68db      	ldr	r3, [r3, #12]
 801176e:	f003 0301 	and.w	r3, r3, #1
 8011772:	2b00      	cmp	r3, #0
 8011774:	d0e2      	beq.n	801173c <HAL_RTC_SetAlarm_IT+0x138>
      }
    }
#endif

    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 8011776:	68fb      	ldr	r3, [r7, #12]
 8011778:	681b      	ldr	r3, [r3, #0]
 801177a:	69fa      	ldr	r2, [r7, #28]
 801177c:	61da      	str	r2, [r3, #28]
    /* Configure the Alarm A Sub Second register */
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 801177e:	68fb      	ldr	r3, [r7, #12]
 8011780:	681b      	ldr	r3, [r3, #0]
 8011782:	69ba      	ldr	r2, [r7, #24]
 8011784:	645a      	str	r2, [r3, #68]	@ 0x44
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 8011786:	68fb      	ldr	r3, [r7, #12]
 8011788:	681b      	ldr	r3, [r3, #0]
 801178a:	689a      	ldr	r2, [r3, #8]
 801178c:	68fb      	ldr	r3, [r7, #12]
 801178e:	681b      	ldr	r3, [r3, #0]
 8011790:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8011794:	609a      	str	r2, [r3, #8]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRA);
 8011796:	68fb      	ldr	r3, [r7, #12]
 8011798:	681b      	ldr	r3, [r3, #0]
 801179a:	689a      	ldr	r2, [r3, #8]
 801179c:	68fb      	ldr	r3, [r7, #12]
 801179e:	681b      	ldr	r3, [r3, #0]
 80117a0:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80117a4:	609a      	str	r2, [r3, #8]
 80117a6:	e049      	b.n	801183c <HAL_RTC_SetAlarm_IT+0x238>
  }
  else
  {
    /* Disable the Alarm B interrupt */
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 80117a8:	68fb      	ldr	r3, [r7, #12]
 80117aa:	681b      	ldr	r3, [r3, #0]
 80117ac:	689a      	ldr	r2, [r3, #8]
 80117ae:	68fb      	ldr	r3, [r7, #12]
 80117b0:	681b      	ldr	r3, [r3, #0]
 80117b2:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 80117b6:	609a      	str	r2, [r3, #8]

    /* Clear flag alarm B */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 80117b8:	68fb      	ldr	r3, [r7, #12]
 80117ba:	681b      	ldr	r3, [r3, #0]
 80117bc:	68db      	ldr	r3, [r3, #12]
 80117be:	b2da      	uxtb	r2, r3
 80117c0:	68fb      	ldr	r3, [r7, #12]
 80117c2:	681b      	ldr	r3, [r3, #0]
 80117c4:	f462 7220 	orn	r2, r2, #640	@ 0x280
 80117c8:	60da      	str	r2, [r3, #12]

#if defined (RTC_FLAG_ALRBWF)
    uint32_t tickstart = HAL_GetTick();
 80117ca:	f7f9 fd9b 	bl	800b304 <HAL_GetTick>
 80117ce:	6178      	str	r0, [r7, #20]
    /* Wait till RTC ALRBWF flag is set and if Time out is reached exit */
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 80117d0:	e015      	b.n	80117fe <HAL_RTC_SetAlarm_IT+0x1fa>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80117d2:	f7f9 fd97 	bl	800b304 <HAL_GetTick>
 80117d6:	4602      	mov	r2, r0
 80117d8:	697b      	ldr	r3, [r7, #20]
 80117da:	1ad3      	subs	r3, r2, r3
 80117dc:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80117e0:	d90d      	bls.n	80117fe <HAL_RTC_SetAlarm_IT+0x1fa>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80117e2:	68fb      	ldr	r3, [r7, #12]
 80117e4:	681b      	ldr	r3, [r3, #0]
 80117e6:	22ff      	movs	r2, #255	@ 0xff
 80117e8:	625a      	str	r2, [r3, #36]	@ 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80117ea:	68fb      	ldr	r3, [r7, #12]
 80117ec:	2203      	movs	r2, #3
 80117ee:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 80117f2:	68fb      	ldr	r3, [r7, #12]
 80117f4:	2200      	movs	r2, #0
 80117f6:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_TIMEOUT;
 80117fa:	2303      	movs	r3, #3
 80117fc:	e037      	b.n	801186e <HAL_RTC_SetAlarm_IT+0x26a>
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 80117fe:	68fb      	ldr	r3, [r7, #12]
 8011800:	681b      	ldr	r3, [r3, #0]
 8011802:	68db      	ldr	r3, [r3, #12]
 8011804:	f003 0302 	and.w	r3, r3, #2
 8011808:	2b00      	cmp	r3, #0
 801180a:	d0e2      	beq.n	80117d2 <HAL_RTC_SetAlarm_IT+0x1ce>
      }
    }
#endif

    hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 801180c:	68fb      	ldr	r3, [r7, #12]
 801180e:	681b      	ldr	r3, [r3, #0]
 8011810:	69fa      	ldr	r2, [r7, #28]
 8011812:	621a      	str	r2, [r3, #32]
    /* Configure the Alarm B Sub Second register */
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 8011814:	68fb      	ldr	r3, [r7, #12]
 8011816:	681b      	ldr	r3, [r3, #0]
 8011818:	69ba      	ldr	r2, [r7, #24]
 801181a:	649a      	str	r2, [r3, #72]	@ 0x48
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMB_ENABLE(hrtc);
 801181c:	68fb      	ldr	r3, [r7, #12]
 801181e:	681b      	ldr	r3, [r3, #0]
 8011820:	689a      	ldr	r2, [r3, #8]
 8011822:	68fb      	ldr	r3, [r7, #12]
 8011824:	681b      	ldr	r3, [r3, #0]
 8011826:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 801182a:	609a      	str	r2, [r3, #8]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRB);
 801182c:	68fb      	ldr	r3, [r7, #12]
 801182e:	681b      	ldr	r3, [r3, #0]
 8011830:	689a      	ldr	r2, [r3, #8]
 8011832:	68fb      	ldr	r3, [r7, #12]
 8011834:	681b      	ldr	r3, [r3, #0]
 8011836:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 801183a:	609a      	str	r2, [r3, #8]
  }

  /* RTC Alarm Interrupt Configuration: EXTI configuration */
  __HAL_RTC_ALARM_EXTI_ENABLE_IT();
 801183c:	4b0e      	ldr	r3, [pc, #56]	@ (8011878 <HAL_RTC_SetAlarm_IT+0x274>)
 801183e:	681b      	ldr	r3, [r3, #0]
 8011840:	4a0d      	ldr	r2, [pc, #52]	@ (8011878 <HAL_RTC_SetAlarm_IT+0x274>)
 8011842:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8011846:	6013      	str	r3, [r2, #0]
  __HAL_RTC_ALARM_EXTI_ENABLE_RISING_EDGE();
 8011848:	4b0b      	ldr	r3, [pc, #44]	@ (8011878 <HAL_RTC_SetAlarm_IT+0x274>)
 801184a:	689b      	ldr	r3, [r3, #8]
 801184c:	4a0a      	ldr	r2, [pc, #40]	@ (8011878 <HAL_RTC_SetAlarm_IT+0x274>)
 801184e:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8011852:	6093      	str	r3, [r2, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8011854:	68fb      	ldr	r3, [r7, #12]
 8011856:	681b      	ldr	r3, [r3, #0]
 8011858:	22ff      	movs	r2, #255	@ 0xff
 801185a:	625a      	str	r2, [r3, #36]	@ 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 801185c:	68fb      	ldr	r3, [r7, #12]
 801185e:	2201      	movs	r2, #1
 8011860:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8011864:	68fb      	ldr	r3, [r7, #12]
 8011866:	2200      	movs	r2, #0
 8011868:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 801186c:	2300      	movs	r3, #0
}
 801186e:	4618      	mov	r0, r3
 8011870:	3724      	adds	r7, #36	@ 0x24
 8011872:	46bd      	mov	sp, r7
 8011874:	bd90      	pop	{r4, r7, pc}
 8011876:	bf00      	nop
 8011878:	40010400 	.word	0x40010400

0801187c <HAL_RTC_AlarmIRQHandler>:
  * @brief  Handle Alarm interrupt request.
  * @param  hrtc RTC handle
  * @retval None
  */
void HAL_RTC_AlarmIRQHandler(RTC_HandleTypeDef *hrtc)
{
 801187c:	b580      	push	{r7, lr}
 801187e:	b082      	sub	sp, #8
 8011880:	af00      	add	r7, sp, #0
 8011882:	6078      	str	r0, [r7, #4]
  /* Clear the EXTI's line Flag for RTC Alarm */
  __HAL_RTC_ALARM_EXTI_CLEAR_FLAG();
 8011884:	4b1f      	ldr	r3, [pc, #124]	@ (8011904 <HAL_RTC_AlarmIRQHandler+0x88>)
 8011886:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 801188a:	615a      	str	r2, [r3, #20]
  }

#else /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */

  /* Get the AlarmA interrupt source enable status */
  if (__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRA) != 0U)
 801188c:	687b      	ldr	r3, [r7, #4]
 801188e:	681b      	ldr	r3, [r3, #0]
 8011890:	689b      	ldr	r3, [r3, #8]
 8011892:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8011896:	2b00      	cmp	r3, #0
 8011898:	d012      	beq.n	80118c0 <HAL_RTC_AlarmIRQHandler+0x44>
  {
    /* Get the pending status of the AlarmA Interrupt */
    if (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAF) != 0U)
 801189a:	687b      	ldr	r3, [r7, #4]
 801189c:	681b      	ldr	r3, [r3, #0]
 801189e:	68db      	ldr	r3, [r3, #12]
 80118a0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80118a4:	2b00      	cmp	r3, #0
 80118a6:	d00b      	beq.n	80118c0 <HAL_RTC_AlarmIRQHandler+0x44>
    {
      /* Clear the AlarmA interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 80118a8:	687b      	ldr	r3, [r7, #4]
 80118aa:	681b      	ldr	r3, [r3, #0]
 80118ac:	68db      	ldr	r3, [r3, #12]
 80118ae:	b2da      	uxtb	r2, r3
 80118b0:	687b      	ldr	r3, [r7, #4]
 80118b2:	681b      	ldr	r3, [r3, #0]
 80118b4:	f462 72c0 	orn	r2, r2, #384	@ 0x180
 80118b8:	60da      	str	r2, [r3, #12]

#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->AlarmAEventCallback(hrtc);
#else
      HAL_RTC_AlarmAEventCallback(hrtc);
 80118ba:	6878      	ldr	r0, [r7, #4]
 80118bc:	f7f1 f980 	bl	8002bc0 <HAL_RTC_AlarmAEventCallback>
#endif
    }
  }

  /* Get the AlarmB interrupt source enable status */
  if (__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRB) != 0U)
 80118c0:	687b      	ldr	r3, [r7, #4]
 80118c2:	681b      	ldr	r3, [r3, #0]
 80118c4:	689b      	ldr	r3, [r3, #8]
 80118c6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80118ca:	2b00      	cmp	r3, #0
 80118cc:	d012      	beq.n	80118f4 <HAL_RTC_AlarmIRQHandler+0x78>
  {
    /* Get the pending status of the AlarmB Interrupt */
    if (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBF) != 0U)
 80118ce:	687b      	ldr	r3, [r7, #4]
 80118d0:	681b      	ldr	r3, [r3, #0]
 80118d2:	68db      	ldr	r3, [r3, #12]
 80118d4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80118d8:	2b00      	cmp	r3, #0
 80118da:	d00b      	beq.n	80118f4 <HAL_RTC_AlarmIRQHandler+0x78>
    {
      /* Clear the AlarmB interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 80118dc:	687b      	ldr	r3, [r7, #4]
 80118de:	681b      	ldr	r3, [r3, #0]
 80118e0:	68db      	ldr	r3, [r3, #12]
 80118e2:	b2da      	uxtb	r2, r3
 80118e4:	687b      	ldr	r3, [r7, #4]
 80118e6:	681b      	ldr	r3, [r3, #0]
 80118e8:	f462 7220 	orn	r2, r2, #640	@ 0x280
 80118ec:	60da      	str	r2, [r3, #12]

#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->AlarmBEventCallback(hrtc);
#else
      HAL_RTCEx_AlarmBEventCallback(hrtc);
 80118ee:	6878      	ldr	r0, [r7, #4]
 80118f0:	f000 f8da 	bl	8011aa8 <HAL_RTCEx_AlarmBEventCallback>
    }
  }
#endif /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 80118f4:	687b      	ldr	r3, [r7, #4]
 80118f6:	2201      	movs	r2, #1
 80118f8:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
}
 80118fc:	bf00      	nop
 80118fe:	3708      	adds	r7, #8
 8011900:	46bd      	mov	sp, r7
 8011902:	bd80      	pop	{r7, pc}
 8011904:	40010400 	.word	0x40010400

08011908 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8011908:	b580      	push	{r7, lr}
 801190a:	b084      	sub	sp, #16
 801190c:	af00      	add	r7, sp, #0
 801190e:	6078      	str	r0, [r7, #4]
#elif defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  /* Clear RSF flag (use a read-modify-write sequence to preserve the other read-write bits) */
  hrtc->Instance->ICSR &= (uint32_t)RTC_RSF_MASK;
#else
  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 8011910:	687b      	ldr	r3, [r7, #4]
 8011912:	681b      	ldr	r3, [r3, #0]
 8011914:	4a0d      	ldr	r2, [pc, #52]	@ (801194c <HAL_RTC_WaitForSynchro+0x44>)
 8011916:	60da      	str	r2, [r3, #12]
#endif

  tickstart = HAL_GetTick();
 8011918:	f7f9 fcf4 	bl	800b304 <HAL_GetTick>
 801191c:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  while ((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
#else
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 801191e:	e009      	b.n	8011934 <HAL_RTC_WaitForSynchro+0x2c>
#endif
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8011920:	f7f9 fcf0 	bl	800b304 <HAL_GetTick>
 8011924:	4602      	mov	r2, r0
 8011926:	68fb      	ldr	r3, [r7, #12]
 8011928:	1ad3      	subs	r3, r2, r3
 801192a:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 801192e:	d901      	bls.n	8011934 <HAL_RTC_WaitForSynchro+0x2c>
    {
      return HAL_TIMEOUT;
 8011930:	2303      	movs	r3, #3
 8011932:	e007      	b.n	8011944 <HAL_RTC_WaitForSynchro+0x3c>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8011934:	687b      	ldr	r3, [r7, #4]
 8011936:	681b      	ldr	r3, [r3, #0]
 8011938:	68db      	ldr	r3, [r3, #12]
 801193a:	f003 0320 	and.w	r3, r3, #32
 801193e:	2b00      	cmp	r3, #0
 8011940:	d0ee      	beq.n	8011920 <HAL_RTC_WaitForSynchro+0x18>
    }
  }

  return HAL_OK;
 8011942:	2300      	movs	r3, #0
}
 8011944:	4618      	mov	r0, r3
 8011946:	3710      	adds	r7, #16
 8011948:	46bd      	mov	sp, r7
 801194a:	bd80      	pop	{r7, pc}
 801194c:	0003ff5f 	.word	0x0003ff5f

08011950 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8011950:	b580      	push	{r7, lr}
 8011952:	b084      	sub	sp, #16
 8011954:	af00      	add	r7, sp, #0
 8011956:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8011958:	2300      	movs	r3, #0
 801195a:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
      }
    }
  }
#else /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 801195c:	687b      	ldr	r3, [r7, #4]
 801195e:	681b      	ldr	r3, [r3, #0]
 8011960:	68db      	ldr	r3, [r3, #12]
 8011962:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8011966:	2b00      	cmp	r3, #0
 8011968:	d120      	bne.n	80119ac <RTC_EnterInitMode+0x5c>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 801196a:	687b      	ldr	r3, [r7, #4]
 801196c:	681b      	ldr	r3, [r3, #0]
 801196e:	f04f 32ff 	mov.w	r2, #4294967295
 8011972:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8011974:	f7f9 fcc6 	bl	800b304 <HAL_GetTick>
 8011978:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 801197a:	e00d      	b.n	8011998 <RTC_EnterInitMode+0x48>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 801197c:	f7f9 fcc2 	bl	800b304 <HAL_GetTick>
 8011980:	4602      	mov	r2, r0
 8011982:	68bb      	ldr	r3, [r7, #8]
 8011984:	1ad3      	subs	r3, r2, r3
 8011986:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 801198a:	d905      	bls.n	8011998 <RTC_EnterInitMode+0x48>
      {
        status = HAL_TIMEOUT;
 801198c:	2303      	movs	r3, #3
 801198e:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8011990:	687b      	ldr	r3, [r7, #4]
 8011992:	2203      	movs	r2, #3
 8011994:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8011998:	687b      	ldr	r3, [r7, #4]
 801199a:	681b      	ldr	r3, [r3, #0]
 801199c:	68db      	ldr	r3, [r3, #12]
 801199e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80119a2:	2b00      	cmp	r3, #0
 80119a4:	d102      	bne.n	80119ac <RTC_EnterInitMode+0x5c>
 80119a6:	7bfb      	ldrb	r3, [r7, #15]
 80119a8:	2b03      	cmp	r3, #3
 80119aa:	d1e7      	bne.n	801197c <RTC_EnterInitMode+0x2c>
      }
    }
  }
#endif /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */

  return status;
 80119ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80119ae:	4618      	mov	r0, r3
 80119b0:	3710      	adds	r7, #16
 80119b2:	46bd      	mov	sp, r7
 80119b4:	bd80      	pop	{r7, pc}
	...

080119b8 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 80119b8:	b580      	push	{r7, lr}
 80119ba:	b084      	sub	sp, #16
 80119bc:	af00      	add	r7, sp, #0
 80119be:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80119c0:	2300      	movs	r3, #0
 80119c2:	73fb      	strb	r3, [r7, #15]
  /* Exit Initialization mode */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined(STM32L4P5xx) || defined(STM32L4Q5xx)
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
#else
  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ISR, RTC_ISR_INIT);
 80119c4:	4b1a      	ldr	r3, [pc, #104]	@ (8011a30 <RTC_ExitInitMode+0x78>)
 80119c6:	68db      	ldr	r3, [r3, #12]
 80119c8:	4a19      	ldr	r2, [pc, #100]	@ (8011a30 <RTC_ExitInitMode+0x78>)
 80119ca:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80119ce:	60d3      	str	r3, [r2, #12]
#endif

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 80119d0:	4b17      	ldr	r3, [pc, #92]	@ (8011a30 <RTC_ExitInitMode+0x78>)
 80119d2:	689b      	ldr	r3, [r3, #8]
 80119d4:	f003 0320 	and.w	r3, r3, #32
 80119d8:	2b00      	cmp	r3, #0
 80119da:	d10c      	bne.n	80119f6 <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80119dc:	6878      	ldr	r0, [r7, #4]
 80119de:	f7ff ff93 	bl	8011908 <HAL_RTC_WaitForSynchro>
 80119e2:	4603      	mov	r3, r0
 80119e4:	2b00      	cmp	r3, #0
 80119e6:	d01e      	beq.n	8011a26 <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80119e8:	687b      	ldr	r3, [r7, #4]
 80119ea:	2203      	movs	r2, #3
 80119ec:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
      status = HAL_TIMEOUT;
 80119f0:	2303      	movs	r3, #3
 80119f2:	73fb      	strb	r3, [r7, #15]
 80119f4:	e017      	b.n	8011a26 <RTC_ExitInitMode+0x6e>
    }
  }
  else /* WA 2.9.6 Calendar initialization may fail in case of consecutive INIT mode entry */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 80119f6:	4b0e      	ldr	r3, [pc, #56]	@ (8011a30 <RTC_ExitInitMode+0x78>)
 80119f8:	689b      	ldr	r3, [r3, #8]
 80119fa:	4a0d      	ldr	r2, [pc, #52]	@ (8011a30 <RTC_ExitInitMode+0x78>)
 80119fc:	f023 0320 	bic.w	r3, r3, #32
 8011a00:	6093      	str	r3, [r2, #8]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8011a02:	6878      	ldr	r0, [r7, #4]
 8011a04:	f7ff ff80 	bl	8011908 <HAL_RTC_WaitForSynchro>
 8011a08:	4603      	mov	r3, r0
 8011a0a:	2b00      	cmp	r3, #0
 8011a0c:	d005      	beq.n	8011a1a <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8011a0e:	687b      	ldr	r3, [r7, #4]
 8011a10:	2203      	movs	r2, #3
 8011a12:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
      status = HAL_TIMEOUT;
 8011a16:	2303      	movs	r3, #3
 8011a18:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8011a1a:	4b05      	ldr	r3, [pc, #20]	@ (8011a30 <RTC_ExitInitMode+0x78>)
 8011a1c:	689b      	ldr	r3, [r3, #8]
 8011a1e:	4a04      	ldr	r2, [pc, #16]	@ (8011a30 <RTC_ExitInitMode+0x78>)
 8011a20:	f043 0320 	orr.w	r3, r3, #32
 8011a24:	6093      	str	r3, [r2, #8]
  }

  return status;
 8011a26:	7bfb      	ldrb	r3, [r7, #15]
}
 8011a28:	4618      	mov	r0, r3
 8011a2a:	3710      	adds	r7, #16
 8011a2c:	46bd      	mov	sp, r7
 8011a2e:	bd80      	pop	{r7, pc}
 8011a30:	40002800 	.word	0x40002800

08011a34 <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8011a34:	b480      	push	{r7}
 8011a36:	b085      	sub	sp, #20
 8011a38:	af00      	add	r7, sp, #0
 8011a3a:	4603      	mov	r3, r0
 8011a3c:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 8011a3e:	2300      	movs	r3, #0
 8011a40:	60fb      	str	r3, [r7, #12]
  uint8_t temp = Value;
 8011a42:	79fb      	ldrb	r3, [r7, #7]
 8011a44:	72fb      	strb	r3, [r7, #11]

  while (temp >= 10U)
 8011a46:	e005      	b.n	8011a54 <RTC_ByteToBcd2+0x20>
  {
    bcdhigh++;
 8011a48:	68fb      	ldr	r3, [r7, #12]
 8011a4a:	3301      	adds	r3, #1
 8011a4c:	60fb      	str	r3, [r7, #12]
    temp -= 10U;
 8011a4e:	7afb      	ldrb	r3, [r7, #11]
 8011a50:	3b0a      	subs	r3, #10
 8011a52:	72fb      	strb	r3, [r7, #11]
  while (temp >= 10U)
 8011a54:	7afb      	ldrb	r3, [r7, #11]
 8011a56:	2b09      	cmp	r3, #9
 8011a58:	d8f6      	bhi.n	8011a48 <RTC_ByteToBcd2+0x14>
  }

  return ((uint8_t)(bcdhigh << 4U) | temp);
 8011a5a:	68fb      	ldr	r3, [r7, #12]
 8011a5c:	b2db      	uxtb	r3, r3
 8011a5e:	011b      	lsls	r3, r3, #4
 8011a60:	b2da      	uxtb	r2, r3
 8011a62:	7afb      	ldrb	r3, [r7, #11]
 8011a64:	4313      	orrs	r3, r2
 8011a66:	b2db      	uxtb	r3, r3
}
 8011a68:	4618      	mov	r0, r3
 8011a6a:	3714      	adds	r7, #20
 8011a6c:	46bd      	mov	sp, r7
 8011a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011a72:	4770      	bx	lr

08011a74 <RTC_Bcd2ToByte>:
  * @brief  Convert from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 8011a74:	b480      	push	{r7}
 8011a76:	b085      	sub	sp, #20
 8011a78:	af00      	add	r7, sp, #0
 8011a7a:	4603      	mov	r3, r0
 8011a7c:	71fb      	strb	r3, [r7, #7]
  uint8_t tmp;
  tmp = ((Value & 0xF0U) >> 4U) * 10U;
 8011a7e:	79fb      	ldrb	r3, [r7, #7]
 8011a80:	091b      	lsrs	r3, r3, #4
 8011a82:	b2db      	uxtb	r3, r3
 8011a84:	461a      	mov	r2, r3
 8011a86:	0092      	lsls	r2, r2, #2
 8011a88:	4413      	add	r3, r2
 8011a8a:	005b      	lsls	r3, r3, #1
 8011a8c:	73fb      	strb	r3, [r7, #15]
  return (tmp + (Value & 0x0FU));
 8011a8e:	79fb      	ldrb	r3, [r7, #7]
 8011a90:	f003 030f 	and.w	r3, r3, #15
 8011a94:	b2da      	uxtb	r2, r3
 8011a96:	7bfb      	ldrb	r3, [r7, #15]
 8011a98:	4413      	add	r3, r2
 8011a9a:	b2db      	uxtb	r3, r3
}
 8011a9c:	4618      	mov	r0, r3
 8011a9e:	3714      	adds	r7, #20
 8011aa0:	46bd      	mov	sp, r7
 8011aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011aa6:	4770      	bx	lr

08011aa8 <HAL_RTCEx_AlarmBEventCallback>:
  * @brief  Alarm B callback.
  * @param  hrtc RTC handle
  * @retval None
  */
__weak void HAL_RTCEx_AlarmBEventCallback(RTC_HandleTypeDef *hrtc)
{
 8011aa8:	b480      	push	{r7}
 8011aaa:	b083      	sub	sp, #12
 8011aac:	af00      	add	r7, sp, #0
 8011aae:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RTCEx_AlarmBEventCallback could be implemented in the user file
   */
}
 8011ab0:	bf00      	nop
 8011ab2:	370c      	adds	r7, #12
 8011ab4:	46bd      	mov	sp, r7
 8011ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011aba:	4770      	bx	lr

08011abc <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8011abc:	b580      	push	{r7, lr}
 8011abe:	b084      	sub	sp, #16
 8011ac0:	af00      	add	r7, sp, #0
 8011ac2:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8011ac4:	687b      	ldr	r3, [r7, #4]
 8011ac6:	2b00      	cmp	r3, #0
 8011ac8:	d101      	bne.n	8011ace <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8011aca:	2301      	movs	r3, #1
 8011acc:	e095      	b.n	8011bfa <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8011ace:	687b      	ldr	r3, [r7, #4]
 8011ad0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011ad2:	2b00      	cmp	r3, #0
 8011ad4:	d108      	bne.n	8011ae8 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8011ad6:	687b      	ldr	r3, [r7, #4]
 8011ad8:	685b      	ldr	r3, [r3, #4]
 8011ada:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8011ade:	d009      	beq.n	8011af4 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8011ae0:	687b      	ldr	r3, [r7, #4]
 8011ae2:	2200      	movs	r2, #0
 8011ae4:	61da      	str	r2, [r3, #28]
 8011ae6:	e005      	b.n	8011af4 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8011ae8:	687b      	ldr	r3, [r7, #4]
 8011aea:	2200      	movs	r2, #0
 8011aec:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8011aee:	687b      	ldr	r3, [r7, #4]
 8011af0:	2200      	movs	r2, #0
 8011af2:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8011af4:	687b      	ldr	r3, [r7, #4]
 8011af6:	2200      	movs	r2, #0
 8011af8:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8011afa:	687b      	ldr	r3, [r7, #4]
 8011afc:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8011b00:	b2db      	uxtb	r3, r3
 8011b02:	2b00      	cmp	r3, #0
 8011b04:	d106      	bne.n	8011b14 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8011b06:	687b      	ldr	r3, [r7, #4]
 8011b08:	2200      	movs	r2, #0
 8011b0a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8011b0e:	6878      	ldr	r0, [r7, #4]
 8011b10:	f7f5 ffce 	bl	8007ab0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8011b14:	687b      	ldr	r3, [r7, #4]
 8011b16:	2202      	movs	r2, #2
 8011b18:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8011b1c:	687b      	ldr	r3, [r7, #4]
 8011b1e:	681b      	ldr	r3, [r3, #0]
 8011b20:	681a      	ldr	r2, [r3, #0]
 8011b22:	687b      	ldr	r3, [r7, #4]
 8011b24:	681b      	ldr	r3, [r3, #0]
 8011b26:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8011b2a:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8011b2c:	687b      	ldr	r3, [r7, #4]
 8011b2e:	68db      	ldr	r3, [r3, #12]
 8011b30:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8011b34:	d902      	bls.n	8011b3c <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8011b36:	2300      	movs	r3, #0
 8011b38:	60fb      	str	r3, [r7, #12]
 8011b3a:	e002      	b.n	8011b42 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8011b3c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8011b40:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8011b42:	687b      	ldr	r3, [r7, #4]
 8011b44:	68db      	ldr	r3, [r3, #12]
 8011b46:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 8011b4a:	d007      	beq.n	8011b5c <HAL_SPI_Init+0xa0>
 8011b4c:	687b      	ldr	r3, [r7, #4]
 8011b4e:	68db      	ldr	r3, [r3, #12]
 8011b50:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8011b54:	d002      	beq.n	8011b5c <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8011b56:	687b      	ldr	r3, [r7, #4]
 8011b58:	2200      	movs	r2, #0
 8011b5a:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8011b5c:	687b      	ldr	r3, [r7, #4]
 8011b5e:	685b      	ldr	r3, [r3, #4]
 8011b60:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8011b64:	687b      	ldr	r3, [r7, #4]
 8011b66:	689b      	ldr	r3, [r3, #8]
 8011b68:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8011b6c:	431a      	orrs	r2, r3
 8011b6e:	687b      	ldr	r3, [r7, #4]
 8011b70:	691b      	ldr	r3, [r3, #16]
 8011b72:	f003 0302 	and.w	r3, r3, #2
 8011b76:	431a      	orrs	r2, r3
 8011b78:	687b      	ldr	r3, [r7, #4]
 8011b7a:	695b      	ldr	r3, [r3, #20]
 8011b7c:	f003 0301 	and.w	r3, r3, #1
 8011b80:	431a      	orrs	r2, r3
 8011b82:	687b      	ldr	r3, [r7, #4]
 8011b84:	699b      	ldr	r3, [r3, #24]
 8011b86:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8011b8a:	431a      	orrs	r2, r3
 8011b8c:	687b      	ldr	r3, [r7, #4]
 8011b8e:	69db      	ldr	r3, [r3, #28]
 8011b90:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8011b94:	431a      	orrs	r2, r3
 8011b96:	687b      	ldr	r3, [r7, #4]
 8011b98:	6a1b      	ldr	r3, [r3, #32]
 8011b9a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8011b9e:	ea42 0103 	orr.w	r1, r2, r3
 8011ba2:	687b      	ldr	r3, [r7, #4]
 8011ba4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8011ba6:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8011baa:	687b      	ldr	r3, [r7, #4]
 8011bac:	681b      	ldr	r3, [r3, #0]
 8011bae:	430a      	orrs	r2, r1
 8011bb0:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8011bb2:	687b      	ldr	r3, [r7, #4]
 8011bb4:	699b      	ldr	r3, [r3, #24]
 8011bb6:	0c1b      	lsrs	r3, r3, #16
 8011bb8:	f003 0204 	and.w	r2, r3, #4
 8011bbc:	687b      	ldr	r3, [r7, #4]
 8011bbe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011bc0:	f003 0310 	and.w	r3, r3, #16
 8011bc4:	431a      	orrs	r2, r3
 8011bc6:	687b      	ldr	r3, [r7, #4]
 8011bc8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8011bca:	f003 0308 	and.w	r3, r3, #8
 8011bce:	431a      	orrs	r2, r3
 8011bd0:	687b      	ldr	r3, [r7, #4]
 8011bd2:	68db      	ldr	r3, [r3, #12]
 8011bd4:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8011bd8:	ea42 0103 	orr.w	r1, r2, r3
 8011bdc:	68fb      	ldr	r3, [r7, #12]
 8011bde:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 8011be2:	687b      	ldr	r3, [r7, #4]
 8011be4:	681b      	ldr	r3, [r3, #0]
 8011be6:	430a      	orrs	r2, r1
 8011be8:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8011bea:	687b      	ldr	r3, [r7, #4]
 8011bec:	2200      	movs	r2, #0
 8011bee:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8011bf0:	687b      	ldr	r3, [r7, #4]
 8011bf2:	2201      	movs	r2, #1
 8011bf4:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 8011bf8:	2300      	movs	r3, #0
}
 8011bfa:	4618      	mov	r0, r3
 8011bfc:	3710      	adds	r7, #16
 8011bfe:	46bd      	mov	sp, r7
 8011c00:	bd80      	pop	{r7, pc}

08011c02 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8011c02:	b580      	push	{r7, lr}
 8011c04:	b088      	sub	sp, #32
 8011c06:	af00      	add	r7, sp, #0
 8011c08:	60f8      	str	r0, [r7, #12]
 8011c0a:	60b9      	str	r1, [r7, #8]
 8011c0c:	603b      	str	r3, [r7, #0]
 8011c0e:	4613      	mov	r3, r2
 8011c10:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8011c12:	f7f9 fb77 	bl	800b304 <HAL_GetTick>
 8011c16:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 8011c18:	88fb      	ldrh	r3, [r7, #6]
 8011c1a:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 8011c1c:	68fb      	ldr	r3, [r7, #12]
 8011c1e:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8011c22:	b2db      	uxtb	r3, r3
 8011c24:	2b01      	cmp	r3, #1
 8011c26:	d001      	beq.n	8011c2c <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 8011c28:	2302      	movs	r3, #2
 8011c2a:	e15c      	b.n	8011ee6 <HAL_SPI_Transmit+0x2e4>
  }

  if ((pData == NULL) || (Size == 0U))
 8011c2c:	68bb      	ldr	r3, [r7, #8]
 8011c2e:	2b00      	cmp	r3, #0
 8011c30:	d002      	beq.n	8011c38 <HAL_SPI_Transmit+0x36>
 8011c32:	88fb      	ldrh	r3, [r7, #6]
 8011c34:	2b00      	cmp	r3, #0
 8011c36:	d101      	bne.n	8011c3c <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 8011c38:	2301      	movs	r3, #1
 8011c3a:	e154      	b.n	8011ee6 <HAL_SPI_Transmit+0x2e4>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8011c3c:	68fb      	ldr	r3, [r7, #12]
 8011c3e:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8011c42:	2b01      	cmp	r3, #1
 8011c44:	d101      	bne.n	8011c4a <HAL_SPI_Transmit+0x48>
 8011c46:	2302      	movs	r3, #2
 8011c48:	e14d      	b.n	8011ee6 <HAL_SPI_Transmit+0x2e4>
 8011c4a:	68fb      	ldr	r3, [r7, #12]
 8011c4c:	2201      	movs	r2, #1
 8011c4e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8011c52:	68fb      	ldr	r3, [r7, #12]
 8011c54:	2203      	movs	r2, #3
 8011c56:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8011c5a:	68fb      	ldr	r3, [r7, #12]
 8011c5c:	2200      	movs	r2, #0
 8011c5e:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8011c60:	68fb      	ldr	r3, [r7, #12]
 8011c62:	68ba      	ldr	r2, [r7, #8]
 8011c64:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 8011c66:	68fb      	ldr	r3, [r7, #12]
 8011c68:	88fa      	ldrh	r2, [r7, #6]
 8011c6a:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 8011c6c:	68fb      	ldr	r3, [r7, #12]
 8011c6e:	88fa      	ldrh	r2, [r7, #6]
 8011c70:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8011c72:	68fb      	ldr	r3, [r7, #12]
 8011c74:	2200      	movs	r2, #0
 8011c76:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 8011c78:	68fb      	ldr	r3, [r7, #12]
 8011c7a:	2200      	movs	r2, #0
 8011c7c:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = 0U;
 8011c80:	68fb      	ldr	r3, [r7, #12]
 8011c82:	2200      	movs	r2, #0
 8011c84:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxISR       = NULL;
 8011c88:	68fb      	ldr	r3, [r7, #12]
 8011c8a:	2200      	movs	r2, #0
 8011c8c:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->RxISR       = NULL;
 8011c8e:	68fb      	ldr	r3, [r7, #12]
 8011c90:	2200      	movs	r2, #0
 8011c92:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8011c94:	68fb      	ldr	r3, [r7, #12]
 8011c96:	689b      	ldr	r3, [r3, #8]
 8011c98:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8011c9c:	d10f      	bne.n	8011cbe <HAL_SPI_Transmit+0xbc>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8011c9e:	68fb      	ldr	r3, [r7, #12]
 8011ca0:	681b      	ldr	r3, [r3, #0]
 8011ca2:	681a      	ldr	r2, [r3, #0]
 8011ca4:	68fb      	ldr	r3, [r7, #12]
 8011ca6:	681b      	ldr	r3, [r3, #0]
 8011ca8:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8011cac:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8011cae:	68fb      	ldr	r3, [r7, #12]
 8011cb0:	681b      	ldr	r3, [r3, #0]
 8011cb2:	681a      	ldr	r2, [r3, #0]
 8011cb4:	68fb      	ldr	r3, [r7, #12]
 8011cb6:	681b      	ldr	r3, [r3, #0]
 8011cb8:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8011cbc:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8011cbe:	68fb      	ldr	r3, [r7, #12]
 8011cc0:	681b      	ldr	r3, [r3, #0]
 8011cc2:	681b      	ldr	r3, [r3, #0]
 8011cc4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8011cc8:	2b40      	cmp	r3, #64	@ 0x40
 8011cca:	d007      	beq.n	8011cdc <HAL_SPI_Transmit+0xda>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8011ccc:	68fb      	ldr	r3, [r7, #12]
 8011cce:	681b      	ldr	r3, [r3, #0]
 8011cd0:	681a      	ldr	r2, [r3, #0]
 8011cd2:	68fb      	ldr	r3, [r7, #12]
 8011cd4:	681b      	ldr	r3, [r3, #0]
 8011cd6:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8011cda:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8011cdc:	68fb      	ldr	r3, [r7, #12]
 8011cde:	68db      	ldr	r3, [r3, #12]
 8011ce0:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8011ce4:	d952      	bls.n	8011d8c <HAL_SPI_Transmit+0x18a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8011ce6:	68fb      	ldr	r3, [r7, #12]
 8011ce8:	685b      	ldr	r3, [r3, #4]
 8011cea:	2b00      	cmp	r3, #0
 8011cec:	d002      	beq.n	8011cf4 <HAL_SPI_Transmit+0xf2>
 8011cee:	8b7b      	ldrh	r3, [r7, #26]
 8011cf0:	2b01      	cmp	r3, #1
 8011cf2:	d145      	bne.n	8011d80 <HAL_SPI_Transmit+0x17e>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8011cf4:	68fb      	ldr	r3, [r7, #12]
 8011cf6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8011cf8:	881a      	ldrh	r2, [r3, #0]
 8011cfa:	68fb      	ldr	r3, [r7, #12]
 8011cfc:	681b      	ldr	r3, [r3, #0]
 8011cfe:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8011d00:	68fb      	ldr	r3, [r7, #12]
 8011d02:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8011d04:	1c9a      	adds	r2, r3, #2
 8011d06:	68fb      	ldr	r3, [r7, #12]
 8011d08:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8011d0a:	68fb      	ldr	r3, [r7, #12]
 8011d0c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8011d0e:	b29b      	uxth	r3, r3
 8011d10:	3b01      	subs	r3, #1
 8011d12:	b29a      	uxth	r2, r3
 8011d14:	68fb      	ldr	r3, [r7, #12]
 8011d16:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8011d18:	e032      	b.n	8011d80 <HAL_SPI_Transmit+0x17e>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8011d1a:	68fb      	ldr	r3, [r7, #12]
 8011d1c:	681b      	ldr	r3, [r3, #0]
 8011d1e:	689b      	ldr	r3, [r3, #8]
 8011d20:	f003 0302 	and.w	r3, r3, #2
 8011d24:	2b02      	cmp	r3, #2
 8011d26:	d112      	bne.n	8011d4e <HAL_SPI_Transmit+0x14c>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8011d28:	68fb      	ldr	r3, [r7, #12]
 8011d2a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8011d2c:	881a      	ldrh	r2, [r3, #0]
 8011d2e:	68fb      	ldr	r3, [r7, #12]
 8011d30:	681b      	ldr	r3, [r3, #0]
 8011d32:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8011d34:	68fb      	ldr	r3, [r7, #12]
 8011d36:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8011d38:	1c9a      	adds	r2, r3, #2
 8011d3a:	68fb      	ldr	r3, [r7, #12]
 8011d3c:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8011d3e:	68fb      	ldr	r3, [r7, #12]
 8011d40:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8011d42:	b29b      	uxth	r3, r3
 8011d44:	3b01      	subs	r3, #1
 8011d46:	b29a      	uxth	r2, r3
 8011d48:	68fb      	ldr	r3, [r7, #12]
 8011d4a:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8011d4c:	e018      	b.n	8011d80 <HAL_SPI_Transmit+0x17e>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8011d4e:	f7f9 fad9 	bl	800b304 <HAL_GetTick>
 8011d52:	4602      	mov	r2, r0
 8011d54:	69fb      	ldr	r3, [r7, #28]
 8011d56:	1ad3      	subs	r3, r2, r3
 8011d58:	683a      	ldr	r2, [r7, #0]
 8011d5a:	429a      	cmp	r2, r3
 8011d5c:	d803      	bhi.n	8011d66 <HAL_SPI_Transmit+0x164>
 8011d5e:	683b      	ldr	r3, [r7, #0]
 8011d60:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011d64:	d102      	bne.n	8011d6c <HAL_SPI_Transmit+0x16a>
 8011d66:	683b      	ldr	r3, [r7, #0]
 8011d68:	2b00      	cmp	r3, #0
 8011d6a:	d109      	bne.n	8011d80 <HAL_SPI_Transmit+0x17e>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8011d6c:	68fb      	ldr	r3, [r7, #12]
 8011d6e:	2201      	movs	r2, #1
 8011d70:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 8011d74:	68fb      	ldr	r3, [r7, #12]
 8011d76:	2200      	movs	r2, #0
 8011d78:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 8011d7c:	2303      	movs	r3, #3
 8011d7e:	e0b2      	b.n	8011ee6 <HAL_SPI_Transmit+0x2e4>
    while (hspi->TxXferCount > 0U)
 8011d80:	68fb      	ldr	r3, [r7, #12]
 8011d82:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8011d84:	b29b      	uxth	r3, r3
 8011d86:	2b00      	cmp	r3, #0
 8011d88:	d1c7      	bne.n	8011d1a <HAL_SPI_Transmit+0x118>
 8011d8a:	e083      	b.n	8011e94 <HAL_SPI_Transmit+0x292>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8011d8c:	68fb      	ldr	r3, [r7, #12]
 8011d8e:	685b      	ldr	r3, [r3, #4]
 8011d90:	2b00      	cmp	r3, #0
 8011d92:	d002      	beq.n	8011d9a <HAL_SPI_Transmit+0x198>
 8011d94:	8b7b      	ldrh	r3, [r7, #26]
 8011d96:	2b01      	cmp	r3, #1
 8011d98:	d177      	bne.n	8011e8a <HAL_SPI_Transmit+0x288>
    {
      if (hspi->TxXferCount > 1U)
 8011d9a:	68fb      	ldr	r3, [r7, #12]
 8011d9c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8011d9e:	b29b      	uxth	r3, r3
 8011da0:	2b01      	cmp	r3, #1
 8011da2:	d912      	bls.n	8011dca <HAL_SPI_Transmit+0x1c8>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8011da4:	68fb      	ldr	r3, [r7, #12]
 8011da6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8011da8:	881a      	ldrh	r2, [r3, #0]
 8011daa:	68fb      	ldr	r3, [r7, #12]
 8011dac:	681b      	ldr	r3, [r3, #0]
 8011dae:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8011db0:	68fb      	ldr	r3, [r7, #12]
 8011db2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8011db4:	1c9a      	adds	r2, r3, #2
 8011db6:	68fb      	ldr	r3, [r7, #12]
 8011db8:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 8011dba:	68fb      	ldr	r3, [r7, #12]
 8011dbc:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8011dbe:	b29b      	uxth	r3, r3
 8011dc0:	3b02      	subs	r3, #2
 8011dc2:	b29a      	uxth	r2, r3
 8011dc4:	68fb      	ldr	r3, [r7, #12]
 8011dc6:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8011dc8:	e05f      	b.n	8011e8a <HAL_SPI_Transmit+0x288>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8011dca:	68fb      	ldr	r3, [r7, #12]
 8011dcc:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8011dce:	68fb      	ldr	r3, [r7, #12]
 8011dd0:	681b      	ldr	r3, [r3, #0]
 8011dd2:	330c      	adds	r3, #12
 8011dd4:	7812      	ldrb	r2, [r2, #0]
 8011dd6:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8011dd8:	68fb      	ldr	r3, [r7, #12]
 8011dda:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8011ddc:	1c5a      	adds	r2, r3, #1
 8011dde:	68fb      	ldr	r3, [r7, #12]
 8011de0:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8011de2:	68fb      	ldr	r3, [r7, #12]
 8011de4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8011de6:	b29b      	uxth	r3, r3
 8011de8:	3b01      	subs	r3, #1
 8011dea:	b29a      	uxth	r2, r3
 8011dec:	68fb      	ldr	r3, [r7, #12]
 8011dee:	87da      	strh	r2, [r3, #62]	@ 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8011df0:	e04b      	b.n	8011e8a <HAL_SPI_Transmit+0x288>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8011df2:	68fb      	ldr	r3, [r7, #12]
 8011df4:	681b      	ldr	r3, [r3, #0]
 8011df6:	689b      	ldr	r3, [r3, #8]
 8011df8:	f003 0302 	and.w	r3, r3, #2
 8011dfc:	2b02      	cmp	r3, #2
 8011dfe:	d12b      	bne.n	8011e58 <HAL_SPI_Transmit+0x256>
      {
        if (hspi->TxXferCount > 1U)
 8011e00:	68fb      	ldr	r3, [r7, #12]
 8011e02:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8011e04:	b29b      	uxth	r3, r3
 8011e06:	2b01      	cmp	r3, #1
 8011e08:	d912      	bls.n	8011e30 <HAL_SPI_Transmit+0x22e>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8011e0a:	68fb      	ldr	r3, [r7, #12]
 8011e0c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8011e0e:	881a      	ldrh	r2, [r3, #0]
 8011e10:	68fb      	ldr	r3, [r7, #12]
 8011e12:	681b      	ldr	r3, [r3, #0]
 8011e14:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8011e16:	68fb      	ldr	r3, [r7, #12]
 8011e18:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8011e1a:	1c9a      	adds	r2, r3, #2
 8011e1c:	68fb      	ldr	r3, [r7, #12]
 8011e1e:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 8011e20:	68fb      	ldr	r3, [r7, #12]
 8011e22:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8011e24:	b29b      	uxth	r3, r3
 8011e26:	3b02      	subs	r3, #2
 8011e28:	b29a      	uxth	r2, r3
 8011e2a:	68fb      	ldr	r3, [r7, #12]
 8011e2c:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8011e2e:	e02c      	b.n	8011e8a <HAL_SPI_Transmit+0x288>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8011e30:	68fb      	ldr	r3, [r7, #12]
 8011e32:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8011e34:	68fb      	ldr	r3, [r7, #12]
 8011e36:	681b      	ldr	r3, [r3, #0]
 8011e38:	330c      	adds	r3, #12
 8011e3a:	7812      	ldrb	r2, [r2, #0]
 8011e3c:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8011e3e:	68fb      	ldr	r3, [r7, #12]
 8011e40:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8011e42:	1c5a      	adds	r2, r3, #1
 8011e44:	68fb      	ldr	r3, [r7, #12]
 8011e46:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 8011e48:	68fb      	ldr	r3, [r7, #12]
 8011e4a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8011e4c:	b29b      	uxth	r3, r3
 8011e4e:	3b01      	subs	r3, #1
 8011e50:	b29a      	uxth	r2, r3
 8011e52:	68fb      	ldr	r3, [r7, #12]
 8011e54:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8011e56:	e018      	b.n	8011e8a <HAL_SPI_Transmit+0x288>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8011e58:	f7f9 fa54 	bl	800b304 <HAL_GetTick>
 8011e5c:	4602      	mov	r2, r0
 8011e5e:	69fb      	ldr	r3, [r7, #28]
 8011e60:	1ad3      	subs	r3, r2, r3
 8011e62:	683a      	ldr	r2, [r7, #0]
 8011e64:	429a      	cmp	r2, r3
 8011e66:	d803      	bhi.n	8011e70 <HAL_SPI_Transmit+0x26e>
 8011e68:	683b      	ldr	r3, [r7, #0]
 8011e6a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011e6e:	d102      	bne.n	8011e76 <HAL_SPI_Transmit+0x274>
 8011e70:	683b      	ldr	r3, [r7, #0]
 8011e72:	2b00      	cmp	r3, #0
 8011e74:	d109      	bne.n	8011e8a <HAL_SPI_Transmit+0x288>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8011e76:	68fb      	ldr	r3, [r7, #12]
 8011e78:	2201      	movs	r2, #1
 8011e7a:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 8011e7e:	68fb      	ldr	r3, [r7, #12]
 8011e80:	2200      	movs	r2, #0
 8011e82:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 8011e86:	2303      	movs	r3, #3
 8011e88:	e02d      	b.n	8011ee6 <HAL_SPI_Transmit+0x2e4>
    while (hspi->TxXferCount > 0U)
 8011e8a:	68fb      	ldr	r3, [r7, #12]
 8011e8c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8011e8e:	b29b      	uxth	r3, r3
 8011e90:	2b00      	cmp	r3, #0
 8011e92:	d1ae      	bne.n	8011df2 <HAL_SPI_Transmit+0x1f0>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8011e94:	69fa      	ldr	r2, [r7, #28]
 8011e96:	6839      	ldr	r1, [r7, #0]
 8011e98:	68f8      	ldr	r0, [r7, #12]
 8011e9a:	f000 fcf5 	bl	8012888 <SPI_EndRxTxTransaction>
 8011e9e:	4603      	mov	r3, r0
 8011ea0:	2b00      	cmp	r3, #0
 8011ea2:	d002      	beq.n	8011eaa <HAL_SPI_Transmit+0x2a8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8011ea4:	68fb      	ldr	r3, [r7, #12]
 8011ea6:	2220      	movs	r2, #32
 8011ea8:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8011eaa:	68fb      	ldr	r3, [r7, #12]
 8011eac:	689b      	ldr	r3, [r3, #8]
 8011eae:	2b00      	cmp	r3, #0
 8011eb0:	d10a      	bne.n	8011ec8 <HAL_SPI_Transmit+0x2c6>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8011eb2:	2300      	movs	r3, #0
 8011eb4:	617b      	str	r3, [r7, #20]
 8011eb6:	68fb      	ldr	r3, [r7, #12]
 8011eb8:	681b      	ldr	r3, [r3, #0]
 8011eba:	68db      	ldr	r3, [r3, #12]
 8011ebc:	617b      	str	r3, [r7, #20]
 8011ebe:	68fb      	ldr	r3, [r7, #12]
 8011ec0:	681b      	ldr	r3, [r3, #0]
 8011ec2:	689b      	ldr	r3, [r3, #8]
 8011ec4:	617b      	str	r3, [r7, #20]
 8011ec6:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8011ec8:	68fb      	ldr	r3, [r7, #12]
 8011eca:	2201      	movs	r2, #1
 8011ecc:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8011ed0:	68fb      	ldr	r3, [r7, #12]
 8011ed2:	2200      	movs	r2, #0
 8011ed4:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8011ed8:	68fb      	ldr	r3, [r7, #12]
 8011eda:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8011edc:	2b00      	cmp	r3, #0
 8011ede:	d001      	beq.n	8011ee4 <HAL_SPI_Transmit+0x2e2>
  {
    return HAL_ERROR;
 8011ee0:	2301      	movs	r3, #1
 8011ee2:	e000      	b.n	8011ee6 <HAL_SPI_Transmit+0x2e4>
  }
  else
  {
    return HAL_OK;
 8011ee4:	2300      	movs	r3, #0
  }
}
 8011ee6:	4618      	mov	r0, r3
 8011ee8:	3720      	adds	r7, #32
 8011eea:	46bd      	mov	sp, r7
 8011eec:	bd80      	pop	{r7, pc}

08011eee <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8011eee:	b580      	push	{r7, lr}
 8011ef0:	b088      	sub	sp, #32
 8011ef2:	af02      	add	r7, sp, #8
 8011ef4:	60f8      	str	r0, [r7, #12]
 8011ef6:	60b9      	str	r1, [r7, #8]
 8011ef8:	603b      	str	r3, [r7, #0]
 8011efa:	4613      	mov	r3, r2
 8011efc:	80fb      	strh	r3, [r7, #6]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;

  if (hspi->State != HAL_SPI_STATE_READY)
 8011efe:	68fb      	ldr	r3, [r7, #12]
 8011f00:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8011f04:	b2db      	uxtb	r3, r3
 8011f06:	2b01      	cmp	r3, #1
 8011f08:	d001      	beq.n	8011f0e <HAL_SPI_Receive+0x20>
  {
    return HAL_BUSY;
 8011f0a:	2302      	movs	r3, #2
 8011f0c:	e123      	b.n	8012156 <HAL_SPI_Receive+0x268>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8011f0e:	68fb      	ldr	r3, [r7, #12]
 8011f10:	685b      	ldr	r3, [r3, #4]
 8011f12:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8011f16:	d112      	bne.n	8011f3e <HAL_SPI_Receive+0x50>
 8011f18:	68fb      	ldr	r3, [r7, #12]
 8011f1a:	689b      	ldr	r3, [r3, #8]
 8011f1c:	2b00      	cmp	r3, #0
 8011f1e:	d10e      	bne.n	8011f3e <HAL_SPI_Receive+0x50>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8011f20:	68fb      	ldr	r3, [r7, #12]
 8011f22:	2204      	movs	r2, #4
 8011f24:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8011f28:	88fa      	ldrh	r2, [r7, #6]
 8011f2a:	683b      	ldr	r3, [r7, #0]
 8011f2c:	9300      	str	r3, [sp, #0]
 8011f2e:	4613      	mov	r3, r2
 8011f30:	68ba      	ldr	r2, [r7, #8]
 8011f32:	68b9      	ldr	r1, [r7, #8]
 8011f34:	68f8      	ldr	r0, [r7, #12]
 8011f36:	f000 f912 	bl	801215e <HAL_SPI_TransmitReceive>
 8011f3a:	4603      	mov	r3, r0
 8011f3c:	e10b      	b.n	8012156 <HAL_SPI_Receive+0x268>
  }

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8011f3e:	f7f9 f9e1 	bl	800b304 <HAL_GetTick>
 8011f42:	6178      	str	r0, [r7, #20]

  if ((pData == NULL) || (Size == 0U))
 8011f44:	68bb      	ldr	r3, [r7, #8]
 8011f46:	2b00      	cmp	r3, #0
 8011f48:	d002      	beq.n	8011f50 <HAL_SPI_Receive+0x62>
 8011f4a:	88fb      	ldrh	r3, [r7, #6]
 8011f4c:	2b00      	cmp	r3, #0
 8011f4e:	d101      	bne.n	8011f54 <HAL_SPI_Receive+0x66>
  {
    return HAL_ERROR;
 8011f50:	2301      	movs	r3, #1
 8011f52:	e100      	b.n	8012156 <HAL_SPI_Receive+0x268>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8011f54:	68fb      	ldr	r3, [r7, #12]
 8011f56:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8011f5a:	2b01      	cmp	r3, #1
 8011f5c:	d101      	bne.n	8011f62 <HAL_SPI_Receive+0x74>
 8011f5e:	2302      	movs	r3, #2
 8011f60:	e0f9      	b.n	8012156 <HAL_SPI_Receive+0x268>
 8011f62:	68fb      	ldr	r3, [r7, #12]
 8011f64:	2201      	movs	r2, #1
 8011f66:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8011f6a:	68fb      	ldr	r3, [r7, #12]
 8011f6c:	2204      	movs	r2, #4
 8011f6e:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8011f72:	68fb      	ldr	r3, [r7, #12]
 8011f74:	2200      	movs	r2, #0
 8011f76:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8011f78:	68fb      	ldr	r3, [r7, #12]
 8011f7a:	68ba      	ldr	r2, [r7, #8]
 8011f7c:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = Size;
 8011f7e:	68fb      	ldr	r3, [r7, #12]
 8011f80:	88fa      	ldrh	r2, [r7, #6]
 8011f82:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = Size;
 8011f86:	68fb      	ldr	r3, [r7, #12]
 8011f88:	88fa      	ldrh	r2, [r7, #6]
 8011f8a:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8011f8e:	68fb      	ldr	r3, [r7, #12]
 8011f90:	2200      	movs	r2, #0
 8011f92:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = 0U;
 8011f94:	68fb      	ldr	r3, [r7, #12]
 8011f96:	2200      	movs	r2, #0
 8011f98:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = 0U;
 8011f9a:	68fb      	ldr	r3, [r7, #12]
 8011f9c:	2200      	movs	r2, #0
 8011f9e:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxISR       = NULL;
 8011fa0:	68fb      	ldr	r3, [r7, #12]
 8011fa2:	2200      	movs	r2, #0
 8011fa4:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 8011fa6:	68fb      	ldr	r3, [r7, #12]
 8011fa8:	2200      	movs	r2, #0
 8011faa:	651a      	str	r2, [r3, #80]	@ 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8011fac:	68fb      	ldr	r3, [r7, #12]
 8011fae:	68db      	ldr	r3, [r3, #12]
 8011fb0:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8011fb4:	d908      	bls.n	8011fc8 <HAL_SPI_Receive+0xda>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8011fb6:	68fb      	ldr	r3, [r7, #12]
 8011fb8:	681b      	ldr	r3, [r3, #0]
 8011fba:	685a      	ldr	r2, [r3, #4]
 8011fbc:	68fb      	ldr	r3, [r7, #12]
 8011fbe:	681b      	ldr	r3, [r3, #0]
 8011fc0:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8011fc4:	605a      	str	r2, [r3, #4]
 8011fc6:	e007      	b.n	8011fd8 <HAL_SPI_Receive+0xea>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8011fc8:	68fb      	ldr	r3, [r7, #12]
 8011fca:	681b      	ldr	r3, [r3, #0]
 8011fcc:	685a      	ldr	r2, [r3, #4]
 8011fce:	68fb      	ldr	r3, [r7, #12]
 8011fd0:	681b      	ldr	r3, [r3, #0]
 8011fd2:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8011fd6:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8011fd8:	68fb      	ldr	r3, [r7, #12]
 8011fda:	689b      	ldr	r3, [r3, #8]
 8011fdc:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8011fe0:	d10f      	bne.n	8012002 <HAL_SPI_Receive+0x114>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8011fe2:	68fb      	ldr	r3, [r7, #12]
 8011fe4:	681b      	ldr	r3, [r3, #0]
 8011fe6:	681a      	ldr	r2, [r3, #0]
 8011fe8:	68fb      	ldr	r3, [r7, #12]
 8011fea:	681b      	ldr	r3, [r3, #0]
 8011fec:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8011ff0:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8011ff2:	68fb      	ldr	r3, [r7, #12]
 8011ff4:	681b      	ldr	r3, [r3, #0]
 8011ff6:	681a      	ldr	r2, [r3, #0]
 8011ff8:	68fb      	ldr	r3, [r7, #12]
 8011ffa:	681b      	ldr	r3, [r3, #0]
 8011ffc:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8012000:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8012002:	68fb      	ldr	r3, [r7, #12]
 8012004:	681b      	ldr	r3, [r3, #0]
 8012006:	681b      	ldr	r3, [r3, #0]
 8012008:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 801200c:	2b40      	cmp	r3, #64	@ 0x40
 801200e:	d007      	beq.n	8012020 <HAL_SPI_Receive+0x132>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8012010:	68fb      	ldr	r3, [r7, #12]
 8012012:	681b      	ldr	r3, [r3, #0]
 8012014:	681a      	ldr	r2, [r3, #0]
 8012016:	68fb      	ldr	r3, [r7, #12]
 8012018:	681b      	ldr	r3, [r3, #0]
 801201a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 801201e:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 8012020:	68fb      	ldr	r3, [r7, #12]
 8012022:	68db      	ldr	r3, [r3, #12]
 8012024:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8012028:	d875      	bhi.n	8012116 <HAL_SPI_Receive+0x228>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 801202a:	e037      	b.n	801209c <HAL_SPI_Receive+0x1ae>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 801202c:	68fb      	ldr	r3, [r7, #12]
 801202e:	681b      	ldr	r3, [r3, #0]
 8012030:	689b      	ldr	r3, [r3, #8]
 8012032:	f003 0301 	and.w	r3, r3, #1
 8012036:	2b01      	cmp	r3, #1
 8012038:	d117      	bne.n	801206a <HAL_SPI_Receive+0x17c>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 801203a:	68fb      	ldr	r3, [r7, #12]
 801203c:	681b      	ldr	r3, [r3, #0]
 801203e:	f103 020c 	add.w	r2, r3, #12
 8012042:	68fb      	ldr	r3, [r7, #12]
 8012044:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8012046:	7812      	ldrb	r2, [r2, #0]
 8012048:	b2d2      	uxtb	r2, r2
 801204a:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 801204c:	68fb      	ldr	r3, [r7, #12]
 801204e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8012050:	1c5a      	adds	r2, r3, #1
 8012052:	68fb      	ldr	r3, [r7, #12]
 8012054:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 8012056:	68fb      	ldr	r3, [r7, #12]
 8012058:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 801205c:	b29b      	uxth	r3, r3
 801205e:	3b01      	subs	r3, #1
 8012060:	b29a      	uxth	r2, r3
 8012062:	68fb      	ldr	r3, [r7, #12]
 8012064:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
 8012068:	e018      	b.n	801209c <HAL_SPI_Receive+0x1ae>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 801206a:	f7f9 f94b 	bl	800b304 <HAL_GetTick>
 801206e:	4602      	mov	r2, r0
 8012070:	697b      	ldr	r3, [r7, #20]
 8012072:	1ad3      	subs	r3, r2, r3
 8012074:	683a      	ldr	r2, [r7, #0]
 8012076:	429a      	cmp	r2, r3
 8012078:	d803      	bhi.n	8012082 <HAL_SPI_Receive+0x194>
 801207a:	683b      	ldr	r3, [r7, #0]
 801207c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012080:	d102      	bne.n	8012088 <HAL_SPI_Receive+0x19a>
 8012082:	683b      	ldr	r3, [r7, #0]
 8012084:	2b00      	cmp	r3, #0
 8012086:	d109      	bne.n	801209c <HAL_SPI_Receive+0x1ae>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8012088:	68fb      	ldr	r3, [r7, #12]
 801208a:	2201      	movs	r2, #1
 801208c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 8012090:	68fb      	ldr	r3, [r7, #12]
 8012092:	2200      	movs	r2, #0
 8012094:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 8012098:	2303      	movs	r3, #3
 801209a:	e05c      	b.n	8012156 <HAL_SPI_Receive+0x268>
    while (hspi->RxXferCount > 0U)
 801209c:	68fb      	ldr	r3, [r7, #12]
 801209e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80120a2:	b29b      	uxth	r3, r3
 80120a4:	2b00      	cmp	r3, #0
 80120a6:	d1c1      	bne.n	801202c <HAL_SPI_Receive+0x13e>
 80120a8:	e03b      	b.n	8012122 <HAL_SPI_Receive+0x234>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80120aa:	68fb      	ldr	r3, [r7, #12]
 80120ac:	681b      	ldr	r3, [r3, #0]
 80120ae:	689b      	ldr	r3, [r3, #8]
 80120b0:	f003 0301 	and.w	r3, r3, #1
 80120b4:	2b01      	cmp	r3, #1
 80120b6:	d115      	bne.n	80120e4 <HAL_SPI_Receive+0x1f6>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80120b8:	68fb      	ldr	r3, [r7, #12]
 80120ba:	681b      	ldr	r3, [r3, #0]
 80120bc:	68da      	ldr	r2, [r3, #12]
 80120be:	68fb      	ldr	r3, [r7, #12]
 80120c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80120c2:	b292      	uxth	r2, r2
 80120c4:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80120c6:	68fb      	ldr	r3, [r7, #12]
 80120c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80120ca:	1c9a      	adds	r2, r3, #2
 80120cc:	68fb      	ldr	r3, [r7, #12]
 80120ce:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 80120d0:	68fb      	ldr	r3, [r7, #12]
 80120d2:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80120d6:	b29b      	uxth	r3, r3
 80120d8:	3b01      	subs	r3, #1
 80120da:	b29a      	uxth	r2, r3
 80120dc:	68fb      	ldr	r3, [r7, #12]
 80120de:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
 80120e2:	e018      	b.n	8012116 <HAL_SPI_Receive+0x228>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80120e4:	f7f9 f90e 	bl	800b304 <HAL_GetTick>
 80120e8:	4602      	mov	r2, r0
 80120ea:	697b      	ldr	r3, [r7, #20]
 80120ec:	1ad3      	subs	r3, r2, r3
 80120ee:	683a      	ldr	r2, [r7, #0]
 80120f0:	429a      	cmp	r2, r3
 80120f2:	d803      	bhi.n	80120fc <HAL_SPI_Receive+0x20e>
 80120f4:	683b      	ldr	r3, [r7, #0]
 80120f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80120fa:	d102      	bne.n	8012102 <HAL_SPI_Receive+0x214>
 80120fc:	683b      	ldr	r3, [r7, #0]
 80120fe:	2b00      	cmp	r3, #0
 8012100:	d109      	bne.n	8012116 <HAL_SPI_Receive+0x228>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8012102:	68fb      	ldr	r3, [r7, #12]
 8012104:	2201      	movs	r2, #1
 8012106:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 801210a:	68fb      	ldr	r3, [r7, #12]
 801210c:	2200      	movs	r2, #0
 801210e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 8012112:	2303      	movs	r3, #3
 8012114:	e01f      	b.n	8012156 <HAL_SPI_Receive+0x268>
    while (hspi->RxXferCount > 0U)
 8012116:	68fb      	ldr	r3, [r7, #12]
 8012118:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 801211c:	b29b      	uxth	r3, r3
 801211e:	2b00      	cmp	r3, #0
 8012120:	d1c3      	bne.n	80120aa <HAL_SPI_Receive+0x1bc>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8012122:	697a      	ldr	r2, [r7, #20]
 8012124:	6839      	ldr	r1, [r7, #0]
 8012126:	68f8      	ldr	r0, [r7, #12]
 8012128:	f000 fb56 	bl	80127d8 <SPI_EndRxTransaction>
 801212c:	4603      	mov	r3, r0
 801212e:	2b00      	cmp	r3, #0
 8012130:	d002      	beq.n	8012138 <HAL_SPI_Receive+0x24a>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8012132:	68fb      	ldr	r3, [r7, #12]
 8012134:	2220      	movs	r2, #32
 8012136:	661a      	str	r2, [r3, #96]	@ 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  hspi->State = HAL_SPI_STATE_READY;
 8012138:	68fb      	ldr	r3, [r7, #12]
 801213a:	2201      	movs	r2, #1
 801213c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8012140:	68fb      	ldr	r3, [r7, #12]
 8012142:	2200      	movs	r2, #0
 8012144:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8012148:	68fb      	ldr	r3, [r7, #12]
 801214a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 801214c:	2b00      	cmp	r3, #0
 801214e:	d001      	beq.n	8012154 <HAL_SPI_Receive+0x266>
  {
    return HAL_ERROR;
 8012150:	2301      	movs	r3, #1
 8012152:	e000      	b.n	8012156 <HAL_SPI_Receive+0x268>
  }
  else
  {
    return HAL_OK;
 8012154:	2300      	movs	r3, #0
  }
}
 8012156:	4618      	mov	r0, r3
 8012158:	3718      	adds	r7, #24
 801215a:	46bd      	mov	sp, r7
 801215c:	bd80      	pop	{r7, pc}

0801215e <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 801215e:	b580      	push	{r7, lr}
 8012160:	b08a      	sub	sp, #40	@ 0x28
 8012162:	af00      	add	r7, sp, #0
 8012164:	60f8      	str	r0, [r7, #12]
 8012166:	60b9      	str	r1, [r7, #8]
 8012168:	607a      	str	r2, [r7, #4]
 801216a:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 801216c:	2301      	movs	r3, #1
 801216e:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8012170:	f7f9 f8c8 	bl	800b304 <HAL_GetTick>
 8012174:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8012176:	68fb      	ldr	r3, [r7, #12]
 8012178:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 801217c:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 801217e:	68fb      	ldr	r3, [r7, #12]
 8012180:	685b      	ldr	r3, [r3, #4]
 8012182:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8012184:	887b      	ldrh	r3, [r7, #2]
 8012186:	82fb      	strh	r3, [r7, #22]
  initial_RxXferCount = Size;
 8012188:	887b      	ldrh	r3, [r7, #2]
 801218a:	82bb      	strh	r3, [r7, #20]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 801218c:	7ffb      	ldrb	r3, [r7, #31]
 801218e:	2b01      	cmp	r3, #1
 8012190:	d00c      	beq.n	80121ac <HAL_SPI_TransmitReceive+0x4e>
 8012192:	69bb      	ldr	r3, [r7, #24]
 8012194:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8012198:	d106      	bne.n	80121a8 <HAL_SPI_TransmitReceive+0x4a>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) &&
 801219a:	68fb      	ldr	r3, [r7, #12]
 801219c:	689b      	ldr	r3, [r3, #8]
 801219e:	2b00      	cmp	r3, #0
 80121a0:	d102      	bne.n	80121a8 <HAL_SPI_TransmitReceive+0x4a>
 80121a2:	7ffb      	ldrb	r3, [r7, #31]
 80121a4:	2b04      	cmp	r3, #4
 80121a6:	d001      	beq.n	80121ac <HAL_SPI_TransmitReceive+0x4e>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    return HAL_BUSY;
 80121a8:	2302      	movs	r3, #2
 80121aa:	e1f3      	b.n	8012594 <HAL_SPI_TransmitReceive+0x436>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80121ac:	68bb      	ldr	r3, [r7, #8]
 80121ae:	2b00      	cmp	r3, #0
 80121b0:	d005      	beq.n	80121be <HAL_SPI_TransmitReceive+0x60>
 80121b2:	687b      	ldr	r3, [r7, #4]
 80121b4:	2b00      	cmp	r3, #0
 80121b6:	d002      	beq.n	80121be <HAL_SPI_TransmitReceive+0x60>
 80121b8:	887b      	ldrh	r3, [r7, #2]
 80121ba:	2b00      	cmp	r3, #0
 80121bc:	d101      	bne.n	80121c2 <HAL_SPI_TransmitReceive+0x64>
  {
    return HAL_ERROR;
 80121be:	2301      	movs	r3, #1
 80121c0:	e1e8      	b.n	8012594 <HAL_SPI_TransmitReceive+0x436>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80121c2:	68fb      	ldr	r3, [r7, #12]
 80121c4:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 80121c8:	2b01      	cmp	r3, #1
 80121ca:	d101      	bne.n	80121d0 <HAL_SPI_TransmitReceive+0x72>
 80121cc:	2302      	movs	r3, #2
 80121ce:	e1e1      	b.n	8012594 <HAL_SPI_TransmitReceive+0x436>
 80121d0:	68fb      	ldr	r3, [r7, #12]
 80121d2:	2201      	movs	r2, #1
 80121d4:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80121d8:	68fb      	ldr	r3, [r7, #12]
 80121da:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 80121de:	b2db      	uxtb	r3, r3
 80121e0:	2b04      	cmp	r3, #4
 80121e2:	d003      	beq.n	80121ec <HAL_SPI_TransmitReceive+0x8e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80121e4:	68fb      	ldr	r3, [r7, #12]
 80121e6:	2205      	movs	r2, #5
 80121e8:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80121ec:	68fb      	ldr	r3, [r7, #12]
 80121ee:	2200      	movs	r2, #0
 80121f0:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80121f2:	68fb      	ldr	r3, [r7, #12]
 80121f4:	687a      	ldr	r2, [r7, #4]
 80121f6:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferCount = Size;
 80121f8:	68fb      	ldr	r3, [r7, #12]
 80121fa:	887a      	ldrh	r2, [r7, #2]
 80121fc:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->RxXferSize  = Size;
 8012200:	68fb      	ldr	r3, [r7, #12]
 8012202:	887a      	ldrh	r2, [r7, #2]
 8012204:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 8012208:	68fb      	ldr	r3, [r7, #12]
 801220a:	68ba      	ldr	r2, [r7, #8]
 801220c:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferCount = Size;
 801220e:	68fb      	ldr	r3, [r7, #12]
 8012210:	887a      	ldrh	r2, [r7, #2]
 8012212:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferSize  = Size;
 8012214:	68fb      	ldr	r3, [r7, #12]
 8012216:	887a      	ldrh	r2, [r7, #2]
 8012218:	879a      	strh	r2, [r3, #60]	@ 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 801221a:	68fb      	ldr	r3, [r7, #12]
 801221c:	2200      	movs	r2, #0
 801221e:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 8012220:	68fb      	ldr	r3, [r7, #12]
 8012222:	2200      	movs	r2, #0
 8012224:	651a      	str	r2, [r3, #80]	@ 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8012226:	68fb      	ldr	r3, [r7, #12]
 8012228:	68db      	ldr	r3, [r3, #12]
 801222a:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 801222e:	d802      	bhi.n	8012236 <HAL_SPI_TransmitReceive+0xd8>
 8012230:	8abb      	ldrh	r3, [r7, #20]
 8012232:	2b01      	cmp	r3, #1
 8012234:	d908      	bls.n	8012248 <HAL_SPI_TransmitReceive+0xea>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8012236:	68fb      	ldr	r3, [r7, #12]
 8012238:	681b      	ldr	r3, [r3, #0]
 801223a:	685a      	ldr	r2, [r3, #4]
 801223c:	68fb      	ldr	r3, [r7, #12]
 801223e:	681b      	ldr	r3, [r3, #0]
 8012240:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8012244:	605a      	str	r2, [r3, #4]
 8012246:	e007      	b.n	8012258 <HAL_SPI_TransmitReceive+0xfa>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8012248:	68fb      	ldr	r3, [r7, #12]
 801224a:	681b      	ldr	r3, [r3, #0]
 801224c:	685a      	ldr	r2, [r3, #4]
 801224e:	68fb      	ldr	r3, [r7, #12]
 8012250:	681b      	ldr	r3, [r3, #0]
 8012252:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8012256:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8012258:	68fb      	ldr	r3, [r7, #12]
 801225a:	681b      	ldr	r3, [r3, #0]
 801225c:	681b      	ldr	r3, [r3, #0]
 801225e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8012262:	2b40      	cmp	r3, #64	@ 0x40
 8012264:	d007      	beq.n	8012276 <HAL_SPI_TransmitReceive+0x118>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8012266:	68fb      	ldr	r3, [r7, #12]
 8012268:	681b      	ldr	r3, [r3, #0]
 801226a:	681a      	ldr	r2, [r3, #0]
 801226c:	68fb      	ldr	r3, [r7, #12]
 801226e:	681b      	ldr	r3, [r3, #0]
 8012270:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8012274:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8012276:	68fb      	ldr	r3, [r7, #12]
 8012278:	68db      	ldr	r3, [r3, #12]
 801227a:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 801227e:	f240 8083 	bls.w	8012388 <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8012282:	68fb      	ldr	r3, [r7, #12]
 8012284:	685b      	ldr	r3, [r3, #4]
 8012286:	2b00      	cmp	r3, #0
 8012288:	d002      	beq.n	8012290 <HAL_SPI_TransmitReceive+0x132>
 801228a:	8afb      	ldrh	r3, [r7, #22]
 801228c:	2b01      	cmp	r3, #1
 801228e:	d16f      	bne.n	8012370 <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8012290:	68fb      	ldr	r3, [r7, #12]
 8012292:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8012294:	881a      	ldrh	r2, [r3, #0]
 8012296:	68fb      	ldr	r3, [r7, #12]
 8012298:	681b      	ldr	r3, [r3, #0]
 801229a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 801229c:	68fb      	ldr	r3, [r7, #12]
 801229e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80122a0:	1c9a      	adds	r2, r3, #2
 80122a2:	68fb      	ldr	r3, [r7, #12]
 80122a4:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 80122a6:	68fb      	ldr	r3, [r7, #12]
 80122a8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80122aa:	b29b      	uxth	r3, r3
 80122ac:	3b01      	subs	r3, #1
 80122ae:	b29a      	uxth	r2, r3
 80122b0:	68fb      	ldr	r3, [r7, #12]
 80122b2:	87da      	strh	r2, [r3, #62]	@ 0x3e
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80122b4:	e05c      	b.n	8012370 <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80122b6:	68fb      	ldr	r3, [r7, #12]
 80122b8:	681b      	ldr	r3, [r3, #0]
 80122ba:	689b      	ldr	r3, [r3, #8]
 80122bc:	f003 0302 	and.w	r3, r3, #2
 80122c0:	2b02      	cmp	r3, #2
 80122c2:	d11b      	bne.n	80122fc <HAL_SPI_TransmitReceive+0x19e>
 80122c4:	68fb      	ldr	r3, [r7, #12]
 80122c6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80122c8:	b29b      	uxth	r3, r3
 80122ca:	2b00      	cmp	r3, #0
 80122cc:	d016      	beq.n	80122fc <HAL_SPI_TransmitReceive+0x19e>
 80122ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80122d0:	2b01      	cmp	r3, #1
 80122d2:	d113      	bne.n	80122fc <HAL_SPI_TransmitReceive+0x19e>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80122d4:	68fb      	ldr	r3, [r7, #12]
 80122d6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80122d8:	881a      	ldrh	r2, [r3, #0]
 80122da:	68fb      	ldr	r3, [r7, #12]
 80122dc:	681b      	ldr	r3, [r3, #0]
 80122de:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80122e0:	68fb      	ldr	r3, [r7, #12]
 80122e2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80122e4:	1c9a      	adds	r2, r3, #2
 80122e6:	68fb      	ldr	r3, [r7, #12]
 80122e8:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 80122ea:	68fb      	ldr	r3, [r7, #12]
 80122ec:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80122ee:	b29b      	uxth	r3, r3
 80122f0:	3b01      	subs	r3, #1
 80122f2:	b29a      	uxth	r2, r3
 80122f4:	68fb      	ldr	r3, [r7, #12]
 80122f6:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80122f8:	2300      	movs	r3, #0
 80122fa:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80122fc:	68fb      	ldr	r3, [r7, #12]
 80122fe:	681b      	ldr	r3, [r3, #0]
 8012300:	689b      	ldr	r3, [r3, #8]
 8012302:	f003 0301 	and.w	r3, r3, #1
 8012306:	2b01      	cmp	r3, #1
 8012308:	d11c      	bne.n	8012344 <HAL_SPI_TransmitReceive+0x1e6>
 801230a:	68fb      	ldr	r3, [r7, #12]
 801230c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8012310:	b29b      	uxth	r3, r3
 8012312:	2b00      	cmp	r3, #0
 8012314:	d016      	beq.n	8012344 <HAL_SPI_TransmitReceive+0x1e6>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8012316:	68fb      	ldr	r3, [r7, #12]
 8012318:	681b      	ldr	r3, [r3, #0]
 801231a:	68da      	ldr	r2, [r3, #12]
 801231c:	68fb      	ldr	r3, [r7, #12]
 801231e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8012320:	b292      	uxth	r2, r2
 8012322:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8012324:	68fb      	ldr	r3, [r7, #12]
 8012326:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8012328:	1c9a      	adds	r2, r3, #2
 801232a:	68fb      	ldr	r3, [r7, #12]
 801232c:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 801232e:	68fb      	ldr	r3, [r7, #12]
 8012330:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8012334:	b29b      	uxth	r3, r3
 8012336:	3b01      	subs	r3, #1
 8012338:	b29a      	uxth	r2, r3
 801233a:	68fb      	ldr	r3, [r7, #12]
 801233c:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8012340:	2301      	movs	r3, #1
 8012342:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8012344:	f7f8 ffde 	bl	800b304 <HAL_GetTick>
 8012348:	4602      	mov	r2, r0
 801234a:	6a3b      	ldr	r3, [r7, #32]
 801234c:	1ad3      	subs	r3, r2, r3
 801234e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8012350:	429a      	cmp	r2, r3
 8012352:	d80d      	bhi.n	8012370 <HAL_SPI_TransmitReceive+0x212>
 8012354:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012356:	f1b3 3fff 	cmp.w	r3, #4294967295
 801235a:	d009      	beq.n	8012370 <HAL_SPI_TransmitReceive+0x212>
      {
        hspi->State = HAL_SPI_STATE_READY;
 801235c:	68fb      	ldr	r3, [r7, #12]
 801235e:	2201      	movs	r2, #1
 8012360:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        __HAL_UNLOCK(hspi);
 8012364:	68fb      	ldr	r3, [r7, #12]
 8012366:	2200      	movs	r2, #0
 8012368:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
        return HAL_TIMEOUT;
 801236c:	2303      	movs	r3, #3
 801236e:	e111      	b.n	8012594 <HAL_SPI_TransmitReceive+0x436>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8012370:	68fb      	ldr	r3, [r7, #12]
 8012372:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8012374:	b29b      	uxth	r3, r3
 8012376:	2b00      	cmp	r3, #0
 8012378:	d19d      	bne.n	80122b6 <HAL_SPI_TransmitReceive+0x158>
 801237a:	68fb      	ldr	r3, [r7, #12]
 801237c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8012380:	b29b      	uxth	r3, r3
 8012382:	2b00      	cmp	r3, #0
 8012384:	d197      	bne.n	80122b6 <HAL_SPI_TransmitReceive+0x158>
 8012386:	e0e5      	b.n	8012554 <HAL_SPI_TransmitReceive+0x3f6>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8012388:	68fb      	ldr	r3, [r7, #12]
 801238a:	685b      	ldr	r3, [r3, #4]
 801238c:	2b00      	cmp	r3, #0
 801238e:	d003      	beq.n	8012398 <HAL_SPI_TransmitReceive+0x23a>
 8012390:	8afb      	ldrh	r3, [r7, #22]
 8012392:	2b01      	cmp	r3, #1
 8012394:	f040 80d1 	bne.w	801253a <HAL_SPI_TransmitReceive+0x3dc>
    {
      if (hspi->TxXferCount > 1U)
 8012398:	68fb      	ldr	r3, [r7, #12]
 801239a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 801239c:	b29b      	uxth	r3, r3
 801239e:	2b01      	cmp	r3, #1
 80123a0:	d912      	bls.n	80123c8 <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80123a2:	68fb      	ldr	r3, [r7, #12]
 80123a4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80123a6:	881a      	ldrh	r2, [r3, #0]
 80123a8:	68fb      	ldr	r3, [r7, #12]
 80123aa:	681b      	ldr	r3, [r3, #0]
 80123ac:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80123ae:	68fb      	ldr	r3, [r7, #12]
 80123b0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80123b2:	1c9a      	adds	r2, r3, #2
 80123b4:	68fb      	ldr	r3, [r7, #12]
 80123b6:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 80123b8:	68fb      	ldr	r3, [r7, #12]
 80123ba:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80123bc:	b29b      	uxth	r3, r3
 80123be:	3b02      	subs	r3, #2
 80123c0:	b29a      	uxth	r2, r3
 80123c2:	68fb      	ldr	r3, [r7, #12]
 80123c4:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80123c6:	e0b8      	b.n	801253a <HAL_SPI_TransmitReceive+0x3dc>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 80123c8:	68fb      	ldr	r3, [r7, #12]
 80123ca:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80123cc:	68fb      	ldr	r3, [r7, #12]
 80123ce:	681b      	ldr	r3, [r3, #0]
 80123d0:	330c      	adds	r3, #12
 80123d2:	7812      	ldrb	r2, [r2, #0]
 80123d4:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80123d6:	68fb      	ldr	r3, [r7, #12]
 80123d8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80123da:	1c5a      	adds	r2, r3, #1
 80123dc:	68fb      	ldr	r3, [r7, #12]
 80123de:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 80123e0:	68fb      	ldr	r3, [r7, #12]
 80123e2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80123e4:	b29b      	uxth	r3, r3
 80123e6:	3b01      	subs	r3, #1
 80123e8:	b29a      	uxth	r2, r3
 80123ea:	68fb      	ldr	r3, [r7, #12]
 80123ec:	87da      	strh	r2, [r3, #62]	@ 0x3e
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
        }
#endif /* USE_SPI_CRC */
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80123ee:	e0a4      	b.n	801253a <HAL_SPI_TransmitReceive+0x3dc>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80123f0:	68fb      	ldr	r3, [r7, #12]
 80123f2:	681b      	ldr	r3, [r3, #0]
 80123f4:	689b      	ldr	r3, [r3, #8]
 80123f6:	f003 0302 	and.w	r3, r3, #2
 80123fa:	2b02      	cmp	r3, #2
 80123fc:	d134      	bne.n	8012468 <HAL_SPI_TransmitReceive+0x30a>
 80123fe:	68fb      	ldr	r3, [r7, #12]
 8012400:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8012402:	b29b      	uxth	r3, r3
 8012404:	2b00      	cmp	r3, #0
 8012406:	d02f      	beq.n	8012468 <HAL_SPI_TransmitReceive+0x30a>
 8012408:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801240a:	2b01      	cmp	r3, #1
 801240c:	d12c      	bne.n	8012468 <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 801240e:	68fb      	ldr	r3, [r7, #12]
 8012410:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8012412:	b29b      	uxth	r3, r3
 8012414:	2b01      	cmp	r3, #1
 8012416:	d912      	bls.n	801243e <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8012418:	68fb      	ldr	r3, [r7, #12]
 801241a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801241c:	881a      	ldrh	r2, [r3, #0]
 801241e:	68fb      	ldr	r3, [r7, #12]
 8012420:	681b      	ldr	r3, [r3, #0]
 8012422:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8012424:	68fb      	ldr	r3, [r7, #12]
 8012426:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8012428:	1c9a      	adds	r2, r3, #2
 801242a:	68fb      	ldr	r3, [r7, #12]
 801242c:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 801242e:	68fb      	ldr	r3, [r7, #12]
 8012430:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8012432:	b29b      	uxth	r3, r3
 8012434:	3b02      	subs	r3, #2
 8012436:	b29a      	uxth	r2, r3
 8012438:	68fb      	ldr	r3, [r7, #12]
 801243a:	87da      	strh	r2, [r3, #62]	@ 0x3e
 801243c:	e012      	b.n	8012464 <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 801243e:	68fb      	ldr	r3, [r7, #12]
 8012440:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8012442:	68fb      	ldr	r3, [r7, #12]
 8012444:	681b      	ldr	r3, [r3, #0]
 8012446:	330c      	adds	r3, #12
 8012448:	7812      	ldrb	r2, [r2, #0]
 801244a:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 801244c:	68fb      	ldr	r3, [r7, #12]
 801244e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8012450:	1c5a      	adds	r2, r3, #1
 8012452:	68fb      	ldr	r3, [r7, #12]
 8012454:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 8012456:	68fb      	ldr	r3, [r7, #12]
 8012458:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 801245a:	b29b      	uxth	r3, r3
 801245c:	3b01      	subs	r3, #1
 801245e:	b29a      	uxth	r2, r3
 8012460:	68fb      	ldr	r3, [r7, #12]
 8012462:	87da      	strh	r2, [r3, #62]	@ 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8012464:	2300      	movs	r3, #0
 8012466:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8012468:	68fb      	ldr	r3, [r7, #12]
 801246a:	681b      	ldr	r3, [r3, #0]
 801246c:	689b      	ldr	r3, [r3, #8]
 801246e:	f003 0301 	and.w	r3, r3, #1
 8012472:	2b01      	cmp	r3, #1
 8012474:	d148      	bne.n	8012508 <HAL_SPI_TransmitReceive+0x3aa>
 8012476:	68fb      	ldr	r3, [r7, #12]
 8012478:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 801247c:	b29b      	uxth	r3, r3
 801247e:	2b00      	cmp	r3, #0
 8012480:	d042      	beq.n	8012508 <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 8012482:	68fb      	ldr	r3, [r7, #12]
 8012484:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8012488:	b29b      	uxth	r3, r3
 801248a:	2b01      	cmp	r3, #1
 801248c:	d923      	bls.n	80124d6 <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 801248e:	68fb      	ldr	r3, [r7, #12]
 8012490:	681b      	ldr	r3, [r3, #0]
 8012492:	68da      	ldr	r2, [r3, #12]
 8012494:	68fb      	ldr	r3, [r7, #12]
 8012496:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8012498:	b292      	uxth	r2, r2
 801249a:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 801249c:	68fb      	ldr	r3, [r7, #12]
 801249e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80124a0:	1c9a      	adds	r2, r3, #2
 80124a2:	68fb      	ldr	r3, [r7, #12]
 80124a4:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount -= 2U;
 80124a6:	68fb      	ldr	r3, [r7, #12]
 80124a8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80124ac:	b29b      	uxth	r3, r3
 80124ae:	3b02      	subs	r3, #2
 80124b0:	b29a      	uxth	r2, r3
 80124b2:	68fb      	ldr	r3, [r7, #12]
 80124b4:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
          if (hspi->RxXferCount <= 1U)
 80124b8:	68fb      	ldr	r3, [r7, #12]
 80124ba:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80124be:	b29b      	uxth	r3, r3
 80124c0:	2b01      	cmp	r3, #1
 80124c2:	d81f      	bhi.n	8012504 <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80124c4:	68fb      	ldr	r3, [r7, #12]
 80124c6:	681b      	ldr	r3, [r3, #0]
 80124c8:	685a      	ldr	r2, [r3, #4]
 80124ca:	68fb      	ldr	r3, [r7, #12]
 80124cc:	681b      	ldr	r3, [r3, #0]
 80124ce:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80124d2:	605a      	str	r2, [r3, #4]
 80124d4:	e016      	b.n	8012504 <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80124d6:	68fb      	ldr	r3, [r7, #12]
 80124d8:	681b      	ldr	r3, [r3, #0]
 80124da:	f103 020c 	add.w	r2, r3, #12
 80124de:	68fb      	ldr	r3, [r7, #12]
 80124e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80124e2:	7812      	ldrb	r2, [r2, #0]
 80124e4:	b2d2      	uxtb	r2, r2
 80124e6:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 80124e8:	68fb      	ldr	r3, [r7, #12]
 80124ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80124ec:	1c5a      	adds	r2, r3, #1
 80124ee:	68fb      	ldr	r3, [r7, #12]
 80124f0:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount--;
 80124f2:	68fb      	ldr	r3, [r7, #12]
 80124f4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80124f8:	b29b      	uxth	r3, r3
 80124fa:	3b01      	subs	r3, #1
 80124fc:	b29a      	uxth	r2, r3
 80124fe:	68fb      	ldr	r3, [r7, #12]
 8012500:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8012504:	2301      	movs	r3, #1
 8012506:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8012508:	f7f8 fefc 	bl	800b304 <HAL_GetTick>
 801250c:	4602      	mov	r2, r0
 801250e:	6a3b      	ldr	r3, [r7, #32]
 8012510:	1ad3      	subs	r3, r2, r3
 8012512:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8012514:	429a      	cmp	r2, r3
 8012516:	d803      	bhi.n	8012520 <HAL_SPI_TransmitReceive+0x3c2>
 8012518:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801251a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801251e:	d102      	bne.n	8012526 <HAL_SPI_TransmitReceive+0x3c8>
 8012520:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012522:	2b00      	cmp	r3, #0
 8012524:	d109      	bne.n	801253a <HAL_SPI_TransmitReceive+0x3dc>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8012526:	68fb      	ldr	r3, [r7, #12]
 8012528:	2201      	movs	r2, #1
 801252a:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        __HAL_UNLOCK(hspi);
 801252e:	68fb      	ldr	r3, [r7, #12]
 8012530:	2200      	movs	r2, #0
 8012532:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
        return HAL_TIMEOUT;
 8012536:	2303      	movs	r3, #3
 8012538:	e02c      	b.n	8012594 <HAL_SPI_TransmitReceive+0x436>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 801253a:	68fb      	ldr	r3, [r7, #12]
 801253c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 801253e:	b29b      	uxth	r3, r3
 8012540:	2b00      	cmp	r3, #0
 8012542:	f47f af55 	bne.w	80123f0 <HAL_SPI_TransmitReceive+0x292>
 8012546:	68fb      	ldr	r3, [r7, #12]
 8012548:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 801254c:	b29b      	uxth	r3, r3
 801254e:	2b00      	cmp	r3, #0
 8012550:	f47f af4e 	bne.w	80123f0 <HAL_SPI_TransmitReceive+0x292>
    return HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8012554:	6a3a      	ldr	r2, [r7, #32]
 8012556:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8012558:	68f8      	ldr	r0, [r7, #12]
 801255a:	f000 f995 	bl	8012888 <SPI_EndRxTxTransaction>
 801255e:	4603      	mov	r3, r0
 8012560:	2b00      	cmp	r3, #0
 8012562:	d008      	beq.n	8012576 <HAL_SPI_TransmitReceive+0x418>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8012564:	68fb      	ldr	r3, [r7, #12]
 8012566:	2220      	movs	r2, #32
 8012568:	661a      	str	r2, [r3, #96]	@ 0x60
    __HAL_UNLOCK(hspi);
 801256a:	68fb      	ldr	r3, [r7, #12]
 801256c:	2200      	movs	r2, #0
 801256e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
    return HAL_ERROR;
 8012572:	2301      	movs	r3, #1
 8012574:	e00e      	b.n	8012594 <HAL_SPI_TransmitReceive+0x436>
  }


  hspi->State = HAL_SPI_STATE_READY;
 8012576:	68fb      	ldr	r3, [r7, #12]
 8012578:	2201      	movs	r2, #1
 801257a:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 801257e:	68fb      	ldr	r3, [r7, #12]
 8012580:	2200      	movs	r2, #0
 8012582:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8012586:	68fb      	ldr	r3, [r7, #12]
 8012588:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 801258a:	2b00      	cmp	r3, #0
 801258c:	d001      	beq.n	8012592 <HAL_SPI_TransmitReceive+0x434>
  {
    return HAL_ERROR;
 801258e:	2301      	movs	r3, #1
 8012590:	e000      	b.n	8012594 <HAL_SPI_TransmitReceive+0x436>
  }
  else
  {
    return HAL_OK;
 8012592:	2300      	movs	r3, #0
  }
}
 8012594:	4618      	mov	r0, r3
 8012596:	3728      	adds	r7, #40	@ 0x28
 8012598:	46bd      	mov	sp, r7
 801259a:	bd80      	pop	{r7, pc}

0801259c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 801259c:	b580      	push	{r7, lr}
 801259e:	b088      	sub	sp, #32
 80125a0:	af00      	add	r7, sp, #0
 80125a2:	60f8      	str	r0, [r7, #12]
 80125a4:	60b9      	str	r1, [r7, #8]
 80125a6:	603b      	str	r3, [r7, #0]
 80125a8:	4613      	mov	r3, r2
 80125aa:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80125ac:	f7f8 feaa 	bl	800b304 <HAL_GetTick>
 80125b0:	4602      	mov	r2, r0
 80125b2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80125b4:	1a9b      	subs	r3, r3, r2
 80125b6:	683a      	ldr	r2, [r7, #0]
 80125b8:	4413      	add	r3, r2
 80125ba:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80125bc:	f7f8 fea2 	bl	800b304 <HAL_GetTick>
 80125c0:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80125c2:	4b39      	ldr	r3, [pc, #228]	@ (80126a8 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80125c4:	681b      	ldr	r3, [r3, #0]
 80125c6:	015b      	lsls	r3, r3, #5
 80125c8:	0d1b      	lsrs	r3, r3, #20
 80125ca:	69fa      	ldr	r2, [r7, #28]
 80125cc:	fb02 f303 	mul.w	r3, r2, r3
 80125d0:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80125d2:	e054      	b.n	801267e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80125d4:	683b      	ldr	r3, [r7, #0]
 80125d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80125da:	d050      	beq.n	801267e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80125dc:	f7f8 fe92 	bl	800b304 <HAL_GetTick>
 80125e0:	4602      	mov	r2, r0
 80125e2:	69bb      	ldr	r3, [r7, #24]
 80125e4:	1ad3      	subs	r3, r2, r3
 80125e6:	69fa      	ldr	r2, [r7, #28]
 80125e8:	429a      	cmp	r2, r3
 80125ea:	d902      	bls.n	80125f2 <SPI_WaitFlagStateUntilTimeout+0x56>
 80125ec:	69fb      	ldr	r3, [r7, #28]
 80125ee:	2b00      	cmp	r3, #0
 80125f0:	d13d      	bne.n	801266e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80125f2:	68fb      	ldr	r3, [r7, #12]
 80125f4:	681b      	ldr	r3, [r3, #0]
 80125f6:	685a      	ldr	r2, [r3, #4]
 80125f8:	68fb      	ldr	r3, [r7, #12]
 80125fa:	681b      	ldr	r3, [r3, #0]
 80125fc:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8012600:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8012602:	68fb      	ldr	r3, [r7, #12]
 8012604:	685b      	ldr	r3, [r3, #4]
 8012606:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 801260a:	d111      	bne.n	8012630 <SPI_WaitFlagStateUntilTimeout+0x94>
 801260c:	68fb      	ldr	r3, [r7, #12]
 801260e:	689b      	ldr	r3, [r3, #8]
 8012610:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8012614:	d004      	beq.n	8012620 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8012616:	68fb      	ldr	r3, [r7, #12]
 8012618:	689b      	ldr	r3, [r3, #8]
 801261a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 801261e:	d107      	bne.n	8012630 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8012620:	68fb      	ldr	r3, [r7, #12]
 8012622:	681b      	ldr	r3, [r3, #0]
 8012624:	681a      	ldr	r2, [r3, #0]
 8012626:	68fb      	ldr	r3, [r7, #12]
 8012628:	681b      	ldr	r3, [r3, #0]
 801262a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 801262e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8012630:	68fb      	ldr	r3, [r7, #12]
 8012632:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8012634:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8012638:	d10f      	bne.n	801265a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 801263a:	68fb      	ldr	r3, [r7, #12]
 801263c:	681b      	ldr	r3, [r3, #0]
 801263e:	681a      	ldr	r2, [r3, #0]
 8012640:	68fb      	ldr	r3, [r7, #12]
 8012642:	681b      	ldr	r3, [r3, #0]
 8012644:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8012648:	601a      	str	r2, [r3, #0]
 801264a:	68fb      	ldr	r3, [r7, #12]
 801264c:	681b      	ldr	r3, [r3, #0]
 801264e:	681a      	ldr	r2, [r3, #0]
 8012650:	68fb      	ldr	r3, [r7, #12]
 8012652:	681b      	ldr	r3, [r3, #0]
 8012654:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8012658:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 801265a:	68fb      	ldr	r3, [r7, #12]
 801265c:	2201      	movs	r2, #1
 801265e:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8012662:	68fb      	ldr	r3, [r7, #12]
 8012664:	2200      	movs	r2, #0
 8012666:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 801266a:	2303      	movs	r3, #3
 801266c:	e017      	b.n	801269e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 801266e:	697b      	ldr	r3, [r7, #20]
 8012670:	2b00      	cmp	r3, #0
 8012672:	d101      	bne.n	8012678 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8012674:	2300      	movs	r3, #0
 8012676:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8012678:	697b      	ldr	r3, [r7, #20]
 801267a:	3b01      	subs	r3, #1
 801267c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 801267e:	68fb      	ldr	r3, [r7, #12]
 8012680:	681b      	ldr	r3, [r3, #0]
 8012682:	689a      	ldr	r2, [r3, #8]
 8012684:	68bb      	ldr	r3, [r7, #8]
 8012686:	4013      	ands	r3, r2
 8012688:	68ba      	ldr	r2, [r7, #8]
 801268a:	429a      	cmp	r2, r3
 801268c:	bf0c      	ite	eq
 801268e:	2301      	moveq	r3, #1
 8012690:	2300      	movne	r3, #0
 8012692:	b2db      	uxtb	r3, r3
 8012694:	461a      	mov	r2, r3
 8012696:	79fb      	ldrb	r3, [r7, #7]
 8012698:	429a      	cmp	r2, r3
 801269a:	d19b      	bne.n	80125d4 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 801269c:	2300      	movs	r3, #0
}
 801269e:	4618      	mov	r0, r3
 80126a0:	3720      	adds	r7, #32
 80126a2:	46bd      	mov	sp, r7
 80126a4:	bd80      	pop	{r7, pc}
 80126a6:	bf00      	nop
 80126a8:	20000000 	.word	0x20000000

080126ac <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80126ac:	b580      	push	{r7, lr}
 80126ae:	b08a      	sub	sp, #40	@ 0x28
 80126b0:	af00      	add	r7, sp, #0
 80126b2:	60f8      	str	r0, [r7, #12]
 80126b4:	60b9      	str	r1, [r7, #8]
 80126b6:	607a      	str	r2, [r7, #4]
 80126b8:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO const uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 80126ba:	2300      	movs	r3, #0
 80126bc:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 80126be:	f7f8 fe21 	bl	800b304 <HAL_GetTick>
 80126c2:	4602      	mov	r2, r0
 80126c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80126c6:	1a9b      	subs	r3, r3, r2
 80126c8:	683a      	ldr	r2, [r7, #0]
 80126ca:	4413      	add	r3, r2
 80126cc:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 80126ce:	f7f8 fe19 	bl	800b304 <HAL_GetTick>
 80126d2:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 80126d4:	68fb      	ldr	r3, [r7, #12]
 80126d6:	681b      	ldr	r3, [r3, #0]
 80126d8:	330c      	adds	r3, #12
 80126da:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 80126dc:	4b3d      	ldr	r3, [pc, #244]	@ (80127d4 <SPI_WaitFifoStateUntilTimeout+0x128>)
 80126de:	681a      	ldr	r2, [r3, #0]
 80126e0:	4613      	mov	r3, r2
 80126e2:	009b      	lsls	r3, r3, #2
 80126e4:	4413      	add	r3, r2
 80126e6:	00da      	lsls	r2, r3, #3
 80126e8:	1ad3      	subs	r3, r2, r3
 80126ea:	0d1b      	lsrs	r3, r3, #20
 80126ec:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80126ee:	fb02 f303 	mul.w	r3, r2, r3
 80126f2:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 80126f4:	e060      	b.n	80127b8 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 80126f6:	68bb      	ldr	r3, [r7, #8]
 80126f8:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 80126fc:	d107      	bne.n	801270e <SPI_WaitFifoStateUntilTimeout+0x62>
 80126fe:	687b      	ldr	r3, [r7, #4]
 8012700:	2b00      	cmp	r3, #0
 8012702:	d104      	bne.n	801270e <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8012704:	69fb      	ldr	r3, [r7, #28]
 8012706:	781b      	ldrb	r3, [r3, #0]
 8012708:	b2db      	uxtb	r3, r3
 801270a:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 801270c:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 801270e:	683b      	ldr	r3, [r7, #0]
 8012710:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012714:	d050      	beq.n	80127b8 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8012716:	f7f8 fdf5 	bl	800b304 <HAL_GetTick>
 801271a:	4602      	mov	r2, r0
 801271c:	6a3b      	ldr	r3, [r7, #32]
 801271e:	1ad3      	subs	r3, r2, r3
 8012720:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8012722:	429a      	cmp	r2, r3
 8012724:	d902      	bls.n	801272c <SPI_WaitFifoStateUntilTimeout+0x80>
 8012726:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012728:	2b00      	cmp	r3, #0
 801272a:	d13d      	bne.n	80127a8 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 801272c:	68fb      	ldr	r3, [r7, #12]
 801272e:	681b      	ldr	r3, [r3, #0]
 8012730:	685a      	ldr	r2, [r3, #4]
 8012732:	68fb      	ldr	r3, [r7, #12]
 8012734:	681b      	ldr	r3, [r3, #0]
 8012736:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 801273a:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 801273c:	68fb      	ldr	r3, [r7, #12]
 801273e:	685b      	ldr	r3, [r3, #4]
 8012740:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8012744:	d111      	bne.n	801276a <SPI_WaitFifoStateUntilTimeout+0xbe>
 8012746:	68fb      	ldr	r3, [r7, #12]
 8012748:	689b      	ldr	r3, [r3, #8]
 801274a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 801274e:	d004      	beq.n	801275a <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8012750:	68fb      	ldr	r3, [r7, #12]
 8012752:	689b      	ldr	r3, [r3, #8]
 8012754:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8012758:	d107      	bne.n	801276a <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 801275a:	68fb      	ldr	r3, [r7, #12]
 801275c:	681b      	ldr	r3, [r3, #0]
 801275e:	681a      	ldr	r2, [r3, #0]
 8012760:	68fb      	ldr	r3, [r7, #12]
 8012762:	681b      	ldr	r3, [r3, #0]
 8012764:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8012768:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 801276a:	68fb      	ldr	r3, [r7, #12]
 801276c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801276e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8012772:	d10f      	bne.n	8012794 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8012774:	68fb      	ldr	r3, [r7, #12]
 8012776:	681b      	ldr	r3, [r3, #0]
 8012778:	681a      	ldr	r2, [r3, #0]
 801277a:	68fb      	ldr	r3, [r7, #12]
 801277c:	681b      	ldr	r3, [r3, #0]
 801277e:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8012782:	601a      	str	r2, [r3, #0]
 8012784:	68fb      	ldr	r3, [r7, #12]
 8012786:	681b      	ldr	r3, [r3, #0]
 8012788:	681a      	ldr	r2, [r3, #0]
 801278a:	68fb      	ldr	r3, [r7, #12]
 801278c:	681b      	ldr	r3, [r3, #0]
 801278e:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8012792:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8012794:	68fb      	ldr	r3, [r7, #12]
 8012796:	2201      	movs	r2, #1
 8012798:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 801279c:	68fb      	ldr	r3, [r7, #12]
 801279e:	2200      	movs	r2, #0
 80127a0:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 80127a4:	2303      	movs	r3, #3
 80127a6:	e010      	b.n	80127ca <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80127a8:	69bb      	ldr	r3, [r7, #24]
 80127aa:	2b00      	cmp	r3, #0
 80127ac:	d101      	bne.n	80127b2 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 80127ae:	2300      	movs	r3, #0
 80127b0:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 80127b2:	69bb      	ldr	r3, [r7, #24]
 80127b4:	3b01      	subs	r3, #1
 80127b6:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 80127b8:	68fb      	ldr	r3, [r7, #12]
 80127ba:	681b      	ldr	r3, [r3, #0]
 80127bc:	689a      	ldr	r2, [r3, #8]
 80127be:	68bb      	ldr	r3, [r7, #8]
 80127c0:	4013      	ands	r3, r2
 80127c2:	687a      	ldr	r2, [r7, #4]
 80127c4:	429a      	cmp	r2, r3
 80127c6:	d196      	bne.n	80126f6 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 80127c8:	2300      	movs	r3, #0
}
 80127ca:	4618      	mov	r0, r3
 80127cc:	3728      	adds	r7, #40	@ 0x28
 80127ce:	46bd      	mov	sp, r7
 80127d0:	bd80      	pop	{r7, pc}
 80127d2:	bf00      	nop
 80127d4:	20000000 	.word	0x20000000

080127d8 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 80127d8:	b580      	push	{r7, lr}
 80127da:	b086      	sub	sp, #24
 80127dc:	af02      	add	r7, sp, #8
 80127de:	60f8      	str	r0, [r7, #12]
 80127e0:	60b9      	str	r1, [r7, #8]
 80127e2:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80127e4:	68fb      	ldr	r3, [r7, #12]
 80127e6:	685b      	ldr	r3, [r3, #4]
 80127e8:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80127ec:	d111      	bne.n	8012812 <SPI_EndRxTransaction+0x3a>
 80127ee:	68fb      	ldr	r3, [r7, #12]
 80127f0:	689b      	ldr	r3, [r3, #8]
 80127f2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80127f6:	d004      	beq.n	8012802 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80127f8:	68fb      	ldr	r3, [r7, #12]
 80127fa:	689b      	ldr	r3, [r3, #8]
 80127fc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8012800:	d107      	bne.n	8012812 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8012802:	68fb      	ldr	r3, [r7, #12]
 8012804:	681b      	ldr	r3, [r3, #0]
 8012806:	681a      	ldr	r2, [r3, #0]
 8012808:	68fb      	ldr	r3, [r7, #12]
 801280a:	681b      	ldr	r3, [r3, #0]
 801280c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8012810:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8012812:	687b      	ldr	r3, [r7, #4]
 8012814:	9300      	str	r3, [sp, #0]
 8012816:	68bb      	ldr	r3, [r7, #8]
 8012818:	2200      	movs	r2, #0
 801281a:	2180      	movs	r1, #128	@ 0x80
 801281c:	68f8      	ldr	r0, [r7, #12]
 801281e:	f7ff febd 	bl	801259c <SPI_WaitFlagStateUntilTimeout>
 8012822:	4603      	mov	r3, r0
 8012824:	2b00      	cmp	r3, #0
 8012826:	d007      	beq.n	8012838 <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8012828:	68fb      	ldr	r3, [r7, #12]
 801282a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 801282c:	f043 0220 	orr.w	r2, r3, #32
 8012830:	68fb      	ldr	r3, [r7, #12]
 8012832:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8012834:	2303      	movs	r3, #3
 8012836:	e023      	b.n	8012880 <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8012838:	68fb      	ldr	r3, [r7, #12]
 801283a:	685b      	ldr	r3, [r3, #4]
 801283c:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8012840:	d11d      	bne.n	801287e <SPI_EndRxTransaction+0xa6>
 8012842:	68fb      	ldr	r3, [r7, #12]
 8012844:	689b      	ldr	r3, [r3, #8]
 8012846:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 801284a:	d004      	beq.n	8012856 <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 801284c:	68fb      	ldr	r3, [r7, #12]
 801284e:	689b      	ldr	r3, [r3, #8]
 8012850:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8012854:	d113      	bne.n	801287e <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8012856:	687b      	ldr	r3, [r7, #4]
 8012858:	9300      	str	r3, [sp, #0]
 801285a:	68bb      	ldr	r3, [r7, #8]
 801285c:	2200      	movs	r2, #0
 801285e:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 8012862:	68f8      	ldr	r0, [r7, #12]
 8012864:	f7ff ff22 	bl	80126ac <SPI_WaitFifoStateUntilTimeout>
 8012868:	4603      	mov	r3, r0
 801286a:	2b00      	cmp	r3, #0
 801286c:	d007      	beq.n	801287e <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 801286e:	68fb      	ldr	r3, [r7, #12]
 8012870:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8012872:	f043 0220 	orr.w	r2, r3, #32
 8012876:	68fb      	ldr	r3, [r7, #12]
 8012878:	661a      	str	r2, [r3, #96]	@ 0x60
      return HAL_TIMEOUT;
 801287a:	2303      	movs	r3, #3
 801287c:	e000      	b.n	8012880 <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 801287e:	2300      	movs	r3, #0
}
 8012880:	4618      	mov	r0, r3
 8012882:	3710      	adds	r7, #16
 8012884:	46bd      	mov	sp, r7
 8012886:	bd80      	pop	{r7, pc}

08012888 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8012888:	b580      	push	{r7, lr}
 801288a:	b086      	sub	sp, #24
 801288c:	af02      	add	r7, sp, #8
 801288e:	60f8      	str	r0, [r7, #12]
 8012890:	60b9      	str	r1, [r7, #8]
 8012892:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8012894:	687b      	ldr	r3, [r7, #4]
 8012896:	9300      	str	r3, [sp, #0]
 8012898:	68bb      	ldr	r3, [r7, #8]
 801289a:	2200      	movs	r2, #0
 801289c:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 80128a0:	68f8      	ldr	r0, [r7, #12]
 80128a2:	f7ff ff03 	bl	80126ac <SPI_WaitFifoStateUntilTimeout>
 80128a6:	4603      	mov	r3, r0
 80128a8:	2b00      	cmp	r3, #0
 80128aa:	d007      	beq.n	80128bc <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80128ac:	68fb      	ldr	r3, [r7, #12]
 80128ae:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80128b0:	f043 0220 	orr.w	r2, r3, #32
 80128b4:	68fb      	ldr	r3, [r7, #12]
 80128b6:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 80128b8:	2303      	movs	r3, #3
 80128ba:	e027      	b.n	801290c <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80128bc:	687b      	ldr	r3, [r7, #4]
 80128be:	9300      	str	r3, [sp, #0]
 80128c0:	68bb      	ldr	r3, [r7, #8]
 80128c2:	2200      	movs	r2, #0
 80128c4:	2180      	movs	r1, #128	@ 0x80
 80128c6:	68f8      	ldr	r0, [r7, #12]
 80128c8:	f7ff fe68 	bl	801259c <SPI_WaitFlagStateUntilTimeout>
 80128cc:	4603      	mov	r3, r0
 80128ce:	2b00      	cmp	r3, #0
 80128d0:	d007      	beq.n	80128e2 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80128d2:	68fb      	ldr	r3, [r7, #12]
 80128d4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80128d6:	f043 0220 	orr.w	r2, r3, #32
 80128da:	68fb      	ldr	r3, [r7, #12]
 80128dc:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 80128de:	2303      	movs	r3, #3
 80128e0:	e014      	b.n	801290c <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80128e2:	687b      	ldr	r3, [r7, #4]
 80128e4:	9300      	str	r3, [sp, #0]
 80128e6:	68bb      	ldr	r3, [r7, #8]
 80128e8:	2200      	movs	r2, #0
 80128ea:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 80128ee:	68f8      	ldr	r0, [r7, #12]
 80128f0:	f7ff fedc 	bl	80126ac <SPI_WaitFifoStateUntilTimeout>
 80128f4:	4603      	mov	r3, r0
 80128f6:	2b00      	cmp	r3, #0
 80128f8:	d007      	beq.n	801290a <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80128fa:	68fb      	ldr	r3, [r7, #12]
 80128fc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80128fe:	f043 0220 	orr.w	r2, r3, #32
 8012902:	68fb      	ldr	r3, [r7, #12]
 8012904:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8012906:	2303      	movs	r3, #3
 8012908:	e000      	b.n	801290c <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 801290a:	2300      	movs	r3, #0
}
 801290c:	4618      	mov	r0, r3
 801290e:	3710      	adds	r7, #16
 8012910:	46bd      	mov	sp, r7
 8012912:	bd80      	pop	{r7, pc}

08012914 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8012914:	b580      	push	{r7, lr}
 8012916:	b082      	sub	sp, #8
 8012918:	af00      	add	r7, sp, #0
 801291a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 801291c:	687b      	ldr	r3, [r7, #4]
 801291e:	2b00      	cmp	r3, #0
 8012920:	d101      	bne.n	8012926 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8012922:	2301      	movs	r3, #1
 8012924:	e049      	b.n	80129ba <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8012926:	687b      	ldr	r3, [r7, #4]
 8012928:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 801292c:	b2db      	uxtb	r3, r3
 801292e:	2b00      	cmp	r3, #0
 8012930:	d106      	bne.n	8012940 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8012932:	687b      	ldr	r3, [r7, #4]
 8012934:	2200      	movs	r2, #0
 8012936:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 801293a:	6878      	ldr	r0, [r7, #4]
 801293c:	f7f5 f990 	bl	8007c60 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8012940:	687b      	ldr	r3, [r7, #4]
 8012942:	2202      	movs	r2, #2
 8012944:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8012948:	687b      	ldr	r3, [r7, #4]
 801294a:	681a      	ldr	r2, [r3, #0]
 801294c:	687b      	ldr	r3, [r7, #4]
 801294e:	3304      	adds	r3, #4
 8012950:	4619      	mov	r1, r3
 8012952:	4610      	mov	r0, r2
 8012954:	f001 fa58 	bl	8013e08 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8012958:	687b      	ldr	r3, [r7, #4]
 801295a:	2201      	movs	r2, #1
 801295c:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8012960:	687b      	ldr	r3, [r7, #4]
 8012962:	2201      	movs	r2, #1
 8012964:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8012968:	687b      	ldr	r3, [r7, #4]
 801296a:	2201      	movs	r2, #1
 801296c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8012970:	687b      	ldr	r3, [r7, #4]
 8012972:	2201      	movs	r2, #1
 8012974:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8012978:	687b      	ldr	r3, [r7, #4]
 801297a:	2201      	movs	r2, #1
 801297c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8012980:	687b      	ldr	r3, [r7, #4]
 8012982:	2201      	movs	r2, #1
 8012984:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8012988:	687b      	ldr	r3, [r7, #4]
 801298a:	2201      	movs	r2, #1
 801298c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8012990:	687b      	ldr	r3, [r7, #4]
 8012992:	2201      	movs	r2, #1
 8012994:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8012998:	687b      	ldr	r3, [r7, #4]
 801299a:	2201      	movs	r2, #1
 801299c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80129a0:	687b      	ldr	r3, [r7, #4]
 80129a2:	2201      	movs	r2, #1
 80129a4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80129a8:	687b      	ldr	r3, [r7, #4]
 80129aa:	2201      	movs	r2, #1
 80129ac:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80129b0:	687b      	ldr	r3, [r7, #4]
 80129b2:	2201      	movs	r2, #1
 80129b4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80129b8:	2300      	movs	r3, #0
}
 80129ba:	4618      	mov	r0, r3
 80129bc:	3708      	adds	r7, #8
 80129be:	46bd      	mov	sp, r7
 80129c0:	bd80      	pop	{r7, pc}

080129c2 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 80129c2:	b580      	push	{r7, lr}
 80129c4:	b082      	sub	sp, #8
 80129c6:	af00      	add	r7, sp, #0
 80129c8:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80129ca:	687b      	ldr	r3, [r7, #4]
 80129cc:	2b00      	cmp	r3, #0
 80129ce:	d101      	bne.n	80129d4 <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 80129d0:	2301      	movs	r3, #1
 80129d2:	e049      	b.n	8012a68 <HAL_TIM_OC_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80129d4:	687b      	ldr	r3, [r7, #4]
 80129d6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80129da:	b2db      	uxtb	r3, r3
 80129dc:	2b00      	cmp	r3, #0
 80129de:	d106      	bne.n	80129ee <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80129e0:	687b      	ldr	r3, [r7, #4]
 80129e2:	2200      	movs	r2, #0
 80129e4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 80129e8:	6878      	ldr	r0, [r7, #4]
 80129ea:	f000 f841 	bl	8012a70 <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80129ee:	687b      	ldr	r3, [r7, #4]
 80129f0:	2202      	movs	r2, #2
 80129f2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 80129f6:	687b      	ldr	r3, [r7, #4]
 80129f8:	681a      	ldr	r2, [r3, #0]
 80129fa:	687b      	ldr	r3, [r7, #4]
 80129fc:	3304      	adds	r3, #4
 80129fe:	4619      	mov	r1, r3
 8012a00:	4610      	mov	r0, r2
 8012a02:	f001 fa01 	bl	8013e08 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8012a06:	687b      	ldr	r3, [r7, #4]
 8012a08:	2201      	movs	r2, #1
 8012a0a:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8012a0e:	687b      	ldr	r3, [r7, #4]
 8012a10:	2201      	movs	r2, #1
 8012a12:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8012a16:	687b      	ldr	r3, [r7, #4]
 8012a18:	2201      	movs	r2, #1
 8012a1a:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8012a1e:	687b      	ldr	r3, [r7, #4]
 8012a20:	2201      	movs	r2, #1
 8012a22:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8012a26:	687b      	ldr	r3, [r7, #4]
 8012a28:	2201      	movs	r2, #1
 8012a2a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8012a2e:	687b      	ldr	r3, [r7, #4]
 8012a30:	2201      	movs	r2, #1
 8012a32:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8012a36:	687b      	ldr	r3, [r7, #4]
 8012a38:	2201      	movs	r2, #1
 8012a3a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8012a3e:	687b      	ldr	r3, [r7, #4]
 8012a40:	2201      	movs	r2, #1
 8012a42:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8012a46:	687b      	ldr	r3, [r7, #4]
 8012a48:	2201      	movs	r2, #1
 8012a4a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8012a4e:	687b      	ldr	r3, [r7, #4]
 8012a50:	2201      	movs	r2, #1
 8012a52:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8012a56:	687b      	ldr	r3, [r7, #4]
 8012a58:	2201      	movs	r2, #1
 8012a5a:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8012a5e:	687b      	ldr	r3, [r7, #4]
 8012a60:	2201      	movs	r2, #1
 8012a62:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8012a66:	2300      	movs	r3, #0
}
 8012a68:	4618      	mov	r0, r3
 8012a6a:	3708      	adds	r7, #8
 8012a6c:	46bd      	mov	sp, r7
 8012a6e:	bd80      	pop	{r7, pc}

08012a70 <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 8012a70:	b480      	push	{r7}
 8012a72:	b083      	sub	sp, #12
 8012a74:	af00      	add	r7, sp, #0
 8012a76:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 8012a78:	bf00      	nop
 8012a7a:	370c      	adds	r7, #12
 8012a7c:	46bd      	mov	sp, r7
 8012a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012a82:	4770      	bx	lr

08012a84 <HAL_TIM_OC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8012a84:	b580      	push	{r7, lr}
 8012a86:	b084      	sub	sp, #16
 8012a88:	af00      	add	r7, sp, #0
 8012a8a:	6078      	str	r0, [r7, #4]
 8012a8c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8012a8e:	2300      	movs	r3, #0
 8012a90:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_CHANNEL(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8012a92:	683b      	ldr	r3, [r7, #0]
 8012a94:	2b00      	cmp	r3, #0
 8012a96:	d109      	bne.n	8012aac <HAL_TIM_OC_Start_IT+0x28>
 8012a98:	687b      	ldr	r3, [r7, #4]
 8012a9a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8012a9e:	b2db      	uxtb	r3, r3
 8012aa0:	2b01      	cmp	r3, #1
 8012aa2:	bf14      	ite	ne
 8012aa4:	2301      	movne	r3, #1
 8012aa6:	2300      	moveq	r3, #0
 8012aa8:	b2db      	uxtb	r3, r3
 8012aaa:	e03c      	b.n	8012b26 <HAL_TIM_OC_Start_IT+0xa2>
 8012aac:	683b      	ldr	r3, [r7, #0]
 8012aae:	2b04      	cmp	r3, #4
 8012ab0:	d109      	bne.n	8012ac6 <HAL_TIM_OC_Start_IT+0x42>
 8012ab2:	687b      	ldr	r3, [r7, #4]
 8012ab4:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8012ab8:	b2db      	uxtb	r3, r3
 8012aba:	2b01      	cmp	r3, #1
 8012abc:	bf14      	ite	ne
 8012abe:	2301      	movne	r3, #1
 8012ac0:	2300      	moveq	r3, #0
 8012ac2:	b2db      	uxtb	r3, r3
 8012ac4:	e02f      	b.n	8012b26 <HAL_TIM_OC_Start_IT+0xa2>
 8012ac6:	683b      	ldr	r3, [r7, #0]
 8012ac8:	2b08      	cmp	r3, #8
 8012aca:	d109      	bne.n	8012ae0 <HAL_TIM_OC_Start_IT+0x5c>
 8012acc:	687b      	ldr	r3, [r7, #4]
 8012ace:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8012ad2:	b2db      	uxtb	r3, r3
 8012ad4:	2b01      	cmp	r3, #1
 8012ad6:	bf14      	ite	ne
 8012ad8:	2301      	movne	r3, #1
 8012ada:	2300      	moveq	r3, #0
 8012adc:	b2db      	uxtb	r3, r3
 8012ade:	e022      	b.n	8012b26 <HAL_TIM_OC_Start_IT+0xa2>
 8012ae0:	683b      	ldr	r3, [r7, #0]
 8012ae2:	2b0c      	cmp	r3, #12
 8012ae4:	d109      	bne.n	8012afa <HAL_TIM_OC_Start_IT+0x76>
 8012ae6:	687b      	ldr	r3, [r7, #4]
 8012ae8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8012aec:	b2db      	uxtb	r3, r3
 8012aee:	2b01      	cmp	r3, #1
 8012af0:	bf14      	ite	ne
 8012af2:	2301      	movne	r3, #1
 8012af4:	2300      	moveq	r3, #0
 8012af6:	b2db      	uxtb	r3, r3
 8012af8:	e015      	b.n	8012b26 <HAL_TIM_OC_Start_IT+0xa2>
 8012afa:	683b      	ldr	r3, [r7, #0]
 8012afc:	2b10      	cmp	r3, #16
 8012afe:	d109      	bne.n	8012b14 <HAL_TIM_OC_Start_IT+0x90>
 8012b00:	687b      	ldr	r3, [r7, #4]
 8012b02:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8012b06:	b2db      	uxtb	r3, r3
 8012b08:	2b01      	cmp	r3, #1
 8012b0a:	bf14      	ite	ne
 8012b0c:	2301      	movne	r3, #1
 8012b0e:	2300      	moveq	r3, #0
 8012b10:	b2db      	uxtb	r3, r3
 8012b12:	e008      	b.n	8012b26 <HAL_TIM_OC_Start_IT+0xa2>
 8012b14:	687b      	ldr	r3, [r7, #4]
 8012b16:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8012b1a:	b2db      	uxtb	r3, r3
 8012b1c:	2b01      	cmp	r3, #1
 8012b1e:	bf14      	ite	ne
 8012b20:	2301      	movne	r3, #1
 8012b22:	2300      	moveq	r3, #0
 8012b24:	b2db      	uxtb	r3, r3
 8012b26:	2b00      	cmp	r3, #0
 8012b28:	d001      	beq.n	8012b2e <HAL_TIM_OC_Start_IT+0xaa>
  {
    return HAL_ERROR;
 8012b2a:	2301      	movs	r3, #1
 8012b2c:	e0e7      	b.n	8012cfe <HAL_TIM_OC_Start_IT+0x27a>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8012b2e:	683b      	ldr	r3, [r7, #0]
 8012b30:	2b00      	cmp	r3, #0
 8012b32:	d104      	bne.n	8012b3e <HAL_TIM_OC_Start_IT+0xba>
 8012b34:	687b      	ldr	r3, [r7, #4]
 8012b36:	2202      	movs	r2, #2
 8012b38:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8012b3c:	e023      	b.n	8012b86 <HAL_TIM_OC_Start_IT+0x102>
 8012b3e:	683b      	ldr	r3, [r7, #0]
 8012b40:	2b04      	cmp	r3, #4
 8012b42:	d104      	bne.n	8012b4e <HAL_TIM_OC_Start_IT+0xca>
 8012b44:	687b      	ldr	r3, [r7, #4]
 8012b46:	2202      	movs	r2, #2
 8012b48:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8012b4c:	e01b      	b.n	8012b86 <HAL_TIM_OC_Start_IT+0x102>
 8012b4e:	683b      	ldr	r3, [r7, #0]
 8012b50:	2b08      	cmp	r3, #8
 8012b52:	d104      	bne.n	8012b5e <HAL_TIM_OC_Start_IT+0xda>
 8012b54:	687b      	ldr	r3, [r7, #4]
 8012b56:	2202      	movs	r2, #2
 8012b58:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8012b5c:	e013      	b.n	8012b86 <HAL_TIM_OC_Start_IT+0x102>
 8012b5e:	683b      	ldr	r3, [r7, #0]
 8012b60:	2b0c      	cmp	r3, #12
 8012b62:	d104      	bne.n	8012b6e <HAL_TIM_OC_Start_IT+0xea>
 8012b64:	687b      	ldr	r3, [r7, #4]
 8012b66:	2202      	movs	r2, #2
 8012b68:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8012b6c:	e00b      	b.n	8012b86 <HAL_TIM_OC_Start_IT+0x102>
 8012b6e:	683b      	ldr	r3, [r7, #0]
 8012b70:	2b10      	cmp	r3, #16
 8012b72:	d104      	bne.n	8012b7e <HAL_TIM_OC_Start_IT+0xfa>
 8012b74:	687b      	ldr	r3, [r7, #4]
 8012b76:	2202      	movs	r2, #2
 8012b78:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8012b7c:	e003      	b.n	8012b86 <HAL_TIM_OC_Start_IT+0x102>
 8012b7e:	687b      	ldr	r3, [r7, #4]
 8012b80:	2202      	movs	r2, #2
 8012b82:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  switch (Channel)
 8012b86:	683b      	ldr	r3, [r7, #0]
 8012b88:	2b0c      	cmp	r3, #12
 8012b8a:	d841      	bhi.n	8012c10 <HAL_TIM_OC_Start_IT+0x18c>
 8012b8c:	a201      	add	r2, pc, #4	@ (adr r2, 8012b94 <HAL_TIM_OC_Start_IT+0x110>)
 8012b8e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012b92:	bf00      	nop
 8012b94:	08012bc9 	.word	0x08012bc9
 8012b98:	08012c11 	.word	0x08012c11
 8012b9c:	08012c11 	.word	0x08012c11
 8012ba0:	08012c11 	.word	0x08012c11
 8012ba4:	08012bdb 	.word	0x08012bdb
 8012ba8:	08012c11 	.word	0x08012c11
 8012bac:	08012c11 	.word	0x08012c11
 8012bb0:	08012c11 	.word	0x08012c11
 8012bb4:	08012bed 	.word	0x08012bed
 8012bb8:	08012c11 	.word	0x08012c11
 8012bbc:	08012c11 	.word	0x08012c11
 8012bc0:	08012c11 	.word	0x08012c11
 8012bc4:	08012bff 	.word	0x08012bff
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8012bc8:	687b      	ldr	r3, [r7, #4]
 8012bca:	681b      	ldr	r3, [r3, #0]
 8012bcc:	68da      	ldr	r2, [r3, #12]
 8012bce:	687b      	ldr	r3, [r7, #4]
 8012bd0:	681b      	ldr	r3, [r3, #0]
 8012bd2:	f042 0202 	orr.w	r2, r2, #2
 8012bd6:	60da      	str	r2, [r3, #12]
      break;
 8012bd8:	e01d      	b.n	8012c16 <HAL_TIM_OC_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8012bda:	687b      	ldr	r3, [r7, #4]
 8012bdc:	681b      	ldr	r3, [r3, #0]
 8012bde:	68da      	ldr	r2, [r3, #12]
 8012be0:	687b      	ldr	r3, [r7, #4]
 8012be2:	681b      	ldr	r3, [r3, #0]
 8012be4:	f042 0204 	orr.w	r2, r2, #4
 8012be8:	60da      	str	r2, [r3, #12]
      break;
 8012bea:	e014      	b.n	8012c16 <HAL_TIM_OC_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8012bec:	687b      	ldr	r3, [r7, #4]
 8012bee:	681b      	ldr	r3, [r3, #0]
 8012bf0:	68da      	ldr	r2, [r3, #12]
 8012bf2:	687b      	ldr	r3, [r7, #4]
 8012bf4:	681b      	ldr	r3, [r3, #0]
 8012bf6:	f042 0208 	orr.w	r2, r2, #8
 8012bfa:	60da      	str	r2, [r3, #12]
      break;
 8012bfc:	e00b      	b.n	8012c16 <HAL_TIM_OC_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8012bfe:	687b      	ldr	r3, [r7, #4]
 8012c00:	681b      	ldr	r3, [r3, #0]
 8012c02:	68da      	ldr	r2, [r3, #12]
 8012c04:	687b      	ldr	r3, [r7, #4]
 8012c06:	681b      	ldr	r3, [r3, #0]
 8012c08:	f042 0210 	orr.w	r2, r2, #16
 8012c0c:	60da      	str	r2, [r3, #12]
      break;
 8012c0e:	e002      	b.n	8012c16 <HAL_TIM_OC_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 8012c10:	2301      	movs	r3, #1
 8012c12:	73fb      	strb	r3, [r7, #15]
      break;
 8012c14:	bf00      	nop
  }

  if (status == HAL_OK)
 8012c16:	7bfb      	ldrb	r3, [r7, #15]
 8012c18:	2b00      	cmp	r3, #0
 8012c1a:	d16f      	bne.n	8012cfc <HAL_TIM_OC_Start_IT+0x278>
  {
    /* Enable the Output compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8012c1c:	687b      	ldr	r3, [r7, #4]
 8012c1e:	681b      	ldr	r3, [r3, #0]
 8012c20:	2201      	movs	r2, #1
 8012c22:	6839      	ldr	r1, [r7, #0]
 8012c24:	4618      	mov	r0, r3
 8012c26:	f001 febd 	bl	80149a4 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8012c2a:	687b      	ldr	r3, [r7, #4]
 8012c2c:	681b      	ldr	r3, [r3, #0]
 8012c2e:	4a36      	ldr	r2, [pc, #216]	@ (8012d08 <HAL_TIM_OC_Start_IT+0x284>)
 8012c30:	4293      	cmp	r3, r2
 8012c32:	d013      	beq.n	8012c5c <HAL_TIM_OC_Start_IT+0x1d8>
 8012c34:	687b      	ldr	r3, [r7, #4]
 8012c36:	681b      	ldr	r3, [r3, #0]
 8012c38:	4a34      	ldr	r2, [pc, #208]	@ (8012d0c <HAL_TIM_OC_Start_IT+0x288>)
 8012c3a:	4293      	cmp	r3, r2
 8012c3c:	d00e      	beq.n	8012c5c <HAL_TIM_OC_Start_IT+0x1d8>
 8012c3e:	687b      	ldr	r3, [r7, #4]
 8012c40:	681b      	ldr	r3, [r3, #0]
 8012c42:	4a33      	ldr	r2, [pc, #204]	@ (8012d10 <HAL_TIM_OC_Start_IT+0x28c>)
 8012c44:	4293      	cmp	r3, r2
 8012c46:	d009      	beq.n	8012c5c <HAL_TIM_OC_Start_IT+0x1d8>
 8012c48:	687b      	ldr	r3, [r7, #4]
 8012c4a:	681b      	ldr	r3, [r3, #0]
 8012c4c:	4a31      	ldr	r2, [pc, #196]	@ (8012d14 <HAL_TIM_OC_Start_IT+0x290>)
 8012c4e:	4293      	cmp	r3, r2
 8012c50:	d004      	beq.n	8012c5c <HAL_TIM_OC_Start_IT+0x1d8>
 8012c52:	687b      	ldr	r3, [r7, #4]
 8012c54:	681b      	ldr	r3, [r3, #0]
 8012c56:	4a30      	ldr	r2, [pc, #192]	@ (8012d18 <HAL_TIM_OC_Start_IT+0x294>)
 8012c58:	4293      	cmp	r3, r2
 8012c5a:	d101      	bne.n	8012c60 <HAL_TIM_OC_Start_IT+0x1dc>
 8012c5c:	2301      	movs	r3, #1
 8012c5e:	e000      	b.n	8012c62 <HAL_TIM_OC_Start_IT+0x1de>
 8012c60:	2300      	movs	r3, #0
 8012c62:	2b00      	cmp	r3, #0
 8012c64:	d007      	beq.n	8012c76 <HAL_TIM_OC_Start_IT+0x1f2>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 8012c66:	687b      	ldr	r3, [r7, #4]
 8012c68:	681b      	ldr	r3, [r3, #0]
 8012c6a:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8012c6c:	687b      	ldr	r3, [r7, #4]
 8012c6e:	681b      	ldr	r3, [r3, #0]
 8012c70:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8012c74:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8012c76:	687b      	ldr	r3, [r7, #4]
 8012c78:	681b      	ldr	r3, [r3, #0]
 8012c7a:	4a23      	ldr	r2, [pc, #140]	@ (8012d08 <HAL_TIM_OC_Start_IT+0x284>)
 8012c7c:	4293      	cmp	r3, r2
 8012c7e:	d01d      	beq.n	8012cbc <HAL_TIM_OC_Start_IT+0x238>
 8012c80:	687b      	ldr	r3, [r7, #4]
 8012c82:	681b      	ldr	r3, [r3, #0]
 8012c84:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8012c88:	d018      	beq.n	8012cbc <HAL_TIM_OC_Start_IT+0x238>
 8012c8a:	687b      	ldr	r3, [r7, #4]
 8012c8c:	681b      	ldr	r3, [r3, #0]
 8012c8e:	4a23      	ldr	r2, [pc, #140]	@ (8012d1c <HAL_TIM_OC_Start_IT+0x298>)
 8012c90:	4293      	cmp	r3, r2
 8012c92:	d013      	beq.n	8012cbc <HAL_TIM_OC_Start_IT+0x238>
 8012c94:	687b      	ldr	r3, [r7, #4]
 8012c96:	681b      	ldr	r3, [r3, #0]
 8012c98:	4a21      	ldr	r2, [pc, #132]	@ (8012d20 <HAL_TIM_OC_Start_IT+0x29c>)
 8012c9a:	4293      	cmp	r3, r2
 8012c9c:	d00e      	beq.n	8012cbc <HAL_TIM_OC_Start_IT+0x238>
 8012c9e:	687b      	ldr	r3, [r7, #4]
 8012ca0:	681b      	ldr	r3, [r3, #0]
 8012ca2:	4a20      	ldr	r2, [pc, #128]	@ (8012d24 <HAL_TIM_OC_Start_IT+0x2a0>)
 8012ca4:	4293      	cmp	r3, r2
 8012ca6:	d009      	beq.n	8012cbc <HAL_TIM_OC_Start_IT+0x238>
 8012ca8:	687b      	ldr	r3, [r7, #4]
 8012caa:	681b      	ldr	r3, [r3, #0]
 8012cac:	4a17      	ldr	r2, [pc, #92]	@ (8012d0c <HAL_TIM_OC_Start_IT+0x288>)
 8012cae:	4293      	cmp	r3, r2
 8012cb0:	d004      	beq.n	8012cbc <HAL_TIM_OC_Start_IT+0x238>
 8012cb2:	687b      	ldr	r3, [r7, #4]
 8012cb4:	681b      	ldr	r3, [r3, #0]
 8012cb6:	4a16      	ldr	r2, [pc, #88]	@ (8012d10 <HAL_TIM_OC_Start_IT+0x28c>)
 8012cb8:	4293      	cmp	r3, r2
 8012cba:	d115      	bne.n	8012ce8 <HAL_TIM_OC_Start_IT+0x264>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8012cbc:	687b      	ldr	r3, [r7, #4]
 8012cbe:	681b      	ldr	r3, [r3, #0]
 8012cc0:	689a      	ldr	r2, [r3, #8]
 8012cc2:	4b19      	ldr	r3, [pc, #100]	@ (8012d28 <HAL_TIM_OC_Start_IT+0x2a4>)
 8012cc4:	4013      	ands	r3, r2
 8012cc6:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8012cc8:	68bb      	ldr	r3, [r7, #8]
 8012cca:	2b06      	cmp	r3, #6
 8012ccc:	d015      	beq.n	8012cfa <HAL_TIM_OC_Start_IT+0x276>
 8012cce:	68bb      	ldr	r3, [r7, #8]
 8012cd0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8012cd4:	d011      	beq.n	8012cfa <HAL_TIM_OC_Start_IT+0x276>
      {
        __HAL_TIM_ENABLE(htim);
 8012cd6:	687b      	ldr	r3, [r7, #4]
 8012cd8:	681b      	ldr	r3, [r3, #0]
 8012cda:	681a      	ldr	r2, [r3, #0]
 8012cdc:	687b      	ldr	r3, [r7, #4]
 8012cde:	681b      	ldr	r3, [r3, #0]
 8012ce0:	f042 0201 	orr.w	r2, r2, #1
 8012ce4:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8012ce6:	e008      	b.n	8012cfa <HAL_TIM_OC_Start_IT+0x276>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8012ce8:	687b      	ldr	r3, [r7, #4]
 8012cea:	681b      	ldr	r3, [r3, #0]
 8012cec:	681a      	ldr	r2, [r3, #0]
 8012cee:	687b      	ldr	r3, [r7, #4]
 8012cf0:	681b      	ldr	r3, [r3, #0]
 8012cf2:	f042 0201 	orr.w	r2, r2, #1
 8012cf6:	601a      	str	r2, [r3, #0]
 8012cf8:	e000      	b.n	8012cfc <HAL_TIM_OC_Start_IT+0x278>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8012cfa:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 8012cfc:	7bfb      	ldrb	r3, [r7, #15]
}
 8012cfe:	4618      	mov	r0, r3
 8012d00:	3710      	adds	r7, #16
 8012d02:	46bd      	mov	sp, r7
 8012d04:	bd80      	pop	{r7, pc}
 8012d06:	bf00      	nop
 8012d08:	40012c00 	.word	0x40012c00
 8012d0c:	40013400 	.word	0x40013400
 8012d10:	40014000 	.word	0x40014000
 8012d14:	40014400 	.word	0x40014400
 8012d18:	40014800 	.word	0x40014800
 8012d1c:	40000400 	.word	0x40000400
 8012d20:	40000800 	.word	0x40000800
 8012d24:	40000c00 	.word	0x40000c00
 8012d28:	00010007 	.word	0x00010007

08012d2c <HAL_TIM_OC_Stop_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Stop_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8012d2c:	b580      	push	{r7, lr}
 8012d2e:	b084      	sub	sp, #16
 8012d30:	af00      	add	r7, sp, #0
 8012d32:	6078      	str	r0, [r7, #4]
 8012d34:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8012d36:	2300      	movs	r3, #0
 8012d38:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_CHANNEL(htim->Instance, Channel));

  switch (Channel)
 8012d3a:	683b      	ldr	r3, [r7, #0]
 8012d3c:	2b0c      	cmp	r3, #12
 8012d3e:	d841      	bhi.n	8012dc4 <HAL_TIM_OC_Stop_IT+0x98>
 8012d40:	a201      	add	r2, pc, #4	@ (adr r2, 8012d48 <HAL_TIM_OC_Stop_IT+0x1c>)
 8012d42:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012d46:	bf00      	nop
 8012d48:	08012d7d 	.word	0x08012d7d
 8012d4c:	08012dc5 	.word	0x08012dc5
 8012d50:	08012dc5 	.word	0x08012dc5
 8012d54:	08012dc5 	.word	0x08012dc5
 8012d58:	08012d8f 	.word	0x08012d8f
 8012d5c:	08012dc5 	.word	0x08012dc5
 8012d60:	08012dc5 	.word	0x08012dc5
 8012d64:	08012dc5 	.word	0x08012dc5
 8012d68:	08012da1 	.word	0x08012da1
 8012d6c:	08012dc5 	.word	0x08012dc5
 8012d70:	08012dc5 	.word	0x08012dc5
 8012d74:	08012dc5 	.word	0x08012dc5
 8012d78:	08012db3 	.word	0x08012db3
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 8012d7c:	687b      	ldr	r3, [r7, #4]
 8012d7e:	681b      	ldr	r3, [r3, #0]
 8012d80:	68da      	ldr	r2, [r3, #12]
 8012d82:	687b      	ldr	r3, [r7, #4]
 8012d84:	681b      	ldr	r3, [r3, #0]
 8012d86:	f022 0202 	bic.w	r2, r2, #2
 8012d8a:	60da      	str	r2, [r3, #12]
      break;
 8012d8c:	e01d      	b.n	8012dca <HAL_TIM_OC_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 8012d8e:	687b      	ldr	r3, [r7, #4]
 8012d90:	681b      	ldr	r3, [r3, #0]
 8012d92:	68da      	ldr	r2, [r3, #12]
 8012d94:	687b      	ldr	r3, [r7, #4]
 8012d96:	681b      	ldr	r3, [r3, #0]
 8012d98:	f022 0204 	bic.w	r2, r2, #4
 8012d9c:	60da      	str	r2, [r3, #12]
      break;
 8012d9e:	e014      	b.n	8012dca <HAL_TIM_OC_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC3);
 8012da0:	687b      	ldr	r3, [r7, #4]
 8012da2:	681b      	ldr	r3, [r3, #0]
 8012da4:	68da      	ldr	r2, [r3, #12]
 8012da6:	687b      	ldr	r3, [r7, #4]
 8012da8:	681b      	ldr	r3, [r3, #0]
 8012daa:	f022 0208 	bic.w	r2, r2, #8
 8012dae:	60da      	str	r2, [r3, #12]
      break;
 8012db0:	e00b      	b.n	8012dca <HAL_TIM_OC_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC4);
 8012db2:	687b      	ldr	r3, [r7, #4]
 8012db4:	681b      	ldr	r3, [r3, #0]
 8012db6:	68da      	ldr	r2, [r3, #12]
 8012db8:	687b      	ldr	r3, [r7, #4]
 8012dba:	681b      	ldr	r3, [r3, #0]
 8012dbc:	f022 0210 	bic.w	r2, r2, #16
 8012dc0:	60da      	str	r2, [r3, #12]
      break;
 8012dc2:	e002      	b.n	8012dca <HAL_TIM_OC_Stop_IT+0x9e>
    }

    default:
      status = HAL_ERROR;
 8012dc4:	2301      	movs	r3, #1
 8012dc6:	73fb      	strb	r3, [r7, #15]
      break;
 8012dc8:	bf00      	nop
  }

  if (status == HAL_OK)
 8012dca:	7bfb      	ldrb	r3, [r7, #15]
 8012dcc:	2b00      	cmp	r3, #0
 8012dce:	f040 8081 	bne.w	8012ed4 <HAL_TIM_OC_Stop_IT+0x1a8>
  {
    /* Disable the Output compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8012dd2:	687b      	ldr	r3, [r7, #4]
 8012dd4:	681b      	ldr	r3, [r3, #0]
 8012dd6:	2200      	movs	r2, #0
 8012dd8:	6839      	ldr	r1, [r7, #0]
 8012dda:	4618      	mov	r0, r3
 8012ddc:	f001 fde2 	bl	80149a4 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8012de0:	687b      	ldr	r3, [r7, #4]
 8012de2:	681b      	ldr	r3, [r3, #0]
 8012de4:	4a3e      	ldr	r2, [pc, #248]	@ (8012ee0 <HAL_TIM_OC_Stop_IT+0x1b4>)
 8012de6:	4293      	cmp	r3, r2
 8012de8:	d013      	beq.n	8012e12 <HAL_TIM_OC_Stop_IT+0xe6>
 8012dea:	687b      	ldr	r3, [r7, #4]
 8012dec:	681b      	ldr	r3, [r3, #0]
 8012dee:	4a3d      	ldr	r2, [pc, #244]	@ (8012ee4 <HAL_TIM_OC_Stop_IT+0x1b8>)
 8012df0:	4293      	cmp	r3, r2
 8012df2:	d00e      	beq.n	8012e12 <HAL_TIM_OC_Stop_IT+0xe6>
 8012df4:	687b      	ldr	r3, [r7, #4]
 8012df6:	681b      	ldr	r3, [r3, #0]
 8012df8:	4a3b      	ldr	r2, [pc, #236]	@ (8012ee8 <HAL_TIM_OC_Stop_IT+0x1bc>)
 8012dfa:	4293      	cmp	r3, r2
 8012dfc:	d009      	beq.n	8012e12 <HAL_TIM_OC_Stop_IT+0xe6>
 8012dfe:	687b      	ldr	r3, [r7, #4]
 8012e00:	681b      	ldr	r3, [r3, #0]
 8012e02:	4a3a      	ldr	r2, [pc, #232]	@ (8012eec <HAL_TIM_OC_Stop_IT+0x1c0>)
 8012e04:	4293      	cmp	r3, r2
 8012e06:	d004      	beq.n	8012e12 <HAL_TIM_OC_Stop_IT+0xe6>
 8012e08:	687b      	ldr	r3, [r7, #4]
 8012e0a:	681b      	ldr	r3, [r3, #0]
 8012e0c:	4a38      	ldr	r2, [pc, #224]	@ (8012ef0 <HAL_TIM_OC_Stop_IT+0x1c4>)
 8012e0e:	4293      	cmp	r3, r2
 8012e10:	d101      	bne.n	8012e16 <HAL_TIM_OC_Stop_IT+0xea>
 8012e12:	2301      	movs	r3, #1
 8012e14:	e000      	b.n	8012e18 <HAL_TIM_OC_Stop_IT+0xec>
 8012e16:	2300      	movs	r3, #0
 8012e18:	2b00      	cmp	r3, #0
 8012e1a:	d017      	beq.n	8012e4c <HAL_TIM_OC_Stop_IT+0x120>
    {
      /* Disable the Main Output */
      __HAL_TIM_MOE_DISABLE(htim);
 8012e1c:	687b      	ldr	r3, [r7, #4]
 8012e1e:	681b      	ldr	r3, [r3, #0]
 8012e20:	6a1a      	ldr	r2, [r3, #32]
 8012e22:	f241 1311 	movw	r3, #4369	@ 0x1111
 8012e26:	4013      	ands	r3, r2
 8012e28:	2b00      	cmp	r3, #0
 8012e2a:	d10f      	bne.n	8012e4c <HAL_TIM_OC_Stop_IT+0x120>
 8012e2c:	687b      	ldr	r3, [r7, #4]
 8012e2e:	681b      	ldr	r3, [r3, #0]
 8012e30:	6a1a      	ldr	r2, [r3, #32]
 8012e32:	f240 4344 	movw	r3, #1092	@ 0x444
 8012e36:	4013      	ands	r3, r2
 8012e38:	2b00      	cmp	r3, #0
 8012e3a:	d107      	bne.n	8012e4c <HAL_TIM_OC_Stop_IT+0x120>
 8012e3c:	687b      	ldr	r3, [r7, #4]
 8012e3e:	681b      	ldr	r3, [r3, #0]
 8012e40:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8012e42:	687b      	ldr	r3, [r7, #4]
 8012e44:	681b      	ldr	r3, [r3, #0]
 8012e46:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8012e4a:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 8012e4c:	687b      	ldr	r3, [r7, #4]
 8012e4e:	681b      	ldr	r3, [r3, #0]
 8012e50:	6a1a      	ldr	r2, [r3, #32]
 8012e52:	f241 1311 	movw	r3, #4369	@ 0x1111
 8012e56:	4013      	ands	r3, r2
 8012e58:	2b00      	cmp	r3, #0
 8012e5a:	d10f      	bne.n	8012e7c <HAL_TIM_OC_Stop_IT+0x150>
 8012e5c:	687b      	ldr	r3, [r7, #4]
 8012e5e:	681b      	ldr	r3, [r3, #0]
 8012e60:	6a1a      	ldr	r2, [r3, #32]
 8012e62:	f240 4344 	movw	r3, #1092	@ 0x444
 8012e66:	4013      	ands	r3, r2
 8012e68:	2b00      	cmp	r3, #0
 8012e6a:	d107      	bne.n	8012e7c <HAL_TIM_OC_Stop_IT+0x150>
 8012e6c:	687b      	ldr	r3, [r7, #4]
 8012e6e:	681b      	ldr	r3, [r3, #0]
 8012e70:	681a      	ldr	r2, [r3, #0]
 8012e72:	687b      	ldr	r3, [r7, #4]
 8012e74:	681b      	ldr	r3, [r3, #0]
 8012e76:	f022 0201 	bic.w	r2, r2, #1
 8012e7a:	601a      	str	r2, [r3, #0]

    /* Set the TIM channel state */
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8012e7c:	683b      	ldr	r3, [r7, #0]
 8012e7e:	2b00      	cmp	r3, #0
 8012e80:	d104      	bne.n	8012e8c <HAL_TIM_OC_Stop_IT+0x160>
 8012e82:	687b      	ldr	r3, [r7, #4]
 8012e84:	2201      	movs	r2, #1
 8012e86:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8012e8a:	e023      	b.n	8012ed4 <HAL_TIM_OC_Stop_IT+0x1a8>
 8012e8c:	683b      	ldr	r3, [r7, #0]
 8012e8e:	2b04      	cmp	r3, #4
 8012e90:	d104      	bne.n	8012e9c <HAL_TIM_OC_Stop_IT+0x170>
 8012e92:	687b      	ldr	r3, [r7, #4]
 8012e94:	2201      	movs	r2, #1
 8012e96:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8012e9a:	e01b      	b.n	8012ed4 <HAL_TIM_OC_Stop_IT+0x1a8>
 8012e9c:	683b      	ldr	r3, [r7, #0]
 8012e9e:	2b08      	cmp	r3, #8
 8012ea0:	d104      	bne.n	8012eac <HAL_TIM_OC_Stop_IT+0x180>
 8012ea2:	687b      	ldr	r3, [r7, #4]
 8012ea4:	2201      	movs	r2, #1
 8012ea6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8012eaa:	e013      	b.n	8012ed4 <HAL_TIM_OC_Stop_IT+0x1a8>
 8012eac:	683b      	ldr	r3, [r7, #0]
 8012eae:	2b0c      	cmp	r3, #12
 8012eb0:	d104      	bne.n	8012ebc <HAL_TIM_OC_Stop_IT+0x190>
 8012eb2:	687b      	ldr	r3, [r7, #4]
 8012eb4:	2201      	movs	r2, #1
 8012eb6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8012eba:	e00b      	b.n	8012ed4 <HAL_TIM_OC_Stop_IT+0x1a8>
 8012ebc:	683b      	ldr	r3, [r7, #0]
 8012ebe:	2b10      	cmp	r3, #16
 8012ec0:	d104      	bne.n	8012ecc <HAL_TIM_OC_Stop_IT+0x1a0>
 8012ec2:	687b      	ldr	r3, [r7, #4]
 8012ec4:	2201      	movs	r2, #1
 8012ec6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8012eca:	e003      	b.n	8012ed4 <HAL_TIM_OC_Stop_IT+0x1a8>
 8012ecc:	687b      	ldr	r3, [r7, #4]
 8012ece:	2201      	movs	r2, #1
 8012ed0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  }

  /* Return function status */
  return status;
 8012ed4:	7bfb      	ldrb	r3, [r7, #15]
}
 8012ed6:	4618      	mov	r0, r3
 8012ed8:	3710      	adds	r7, #16
 8012eda:	46bd      	mov	sp, r7
 8012edc:	bd80      	pop	{r7, pc}
 8012ede:	bf00      	nop
 8012ee0:	40012c00 	.word	0x40012c00
 8012ee4:	40013400 	.word	0x40013400
 8012ee8:	40014000 	.word	0x40014000
 8012eec:	40014400 	.word	0x40014400
 8012ef0:	40014800 	.word	0x40014800

08012ef4 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8012ef4:	b580      	push	{r7, lr}
 8012ef6:	b082      	sub	sp, #8
 8012ef8:	af00      	add	r7, sp, #0
 8012efa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8012efc:	687b      	ldr	r3, [r7, #4]
 8012efe:	2b00      	cmp	r3, #0
 8012f00:	d101      	bne.n	8012f06 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8012f02:	2301      	movs	r3, #1
 8012f04:	e049      	b.n	8012f9a <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8012f06:	687b      	ldr	r3, [r7, #4]
 8012f08:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8012f0c:	b2db      	uxtb	r3, r3
 8012f0e:	2b00      	cmp	r3, #0
 8012f10:	d106      	bne.n	8012f20 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8012f12:	687b      	ldr	r3, [r7, #4]
 8012f14:	2200      	movs	r2, #0
 8012f16:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8012f1a:	6878      	ldr	r0, [r7, #4]
 8012f1c:	f7f4 fe40 	bl	8007ba0 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8012f20:	687b      	ldr	r3, [r7, #4]
 8012f22:	2202      	movs	r2, #2
 8012f24:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8012f28:	687b      	ldr	r3, [r7, #4]
 8012f2a:	681a      	ldr	r2, [r3, #0]
 8012f2c:	687b      	ldr	r3, [r7, #4]
 8012f2e:	3304      	adds	r3, #4
 8012f30:	4619      	mov	r1, r3
 8012f32:	4610      	mov	r0, r2
 8012f34:	f000 ff68 	bl	8013e08 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8012f38:	687b      	ldr	r3, [r7, #4]
 8012f3a:	2201      	movs	r2, #1
 8012f3c:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8012f40:	687b      	ldr	r3, [r7, #4]
 8012f42:	2201      	movs	r2, #1
 8012f44:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8012f48:	687b      	ldr	r3, [r7, #4]
 8012f4a:	2201      	movs	r2, #1
 8012f4c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8012f50:	687b      	ldr	r3, [r7, #4]
 8012f52:	2201      	movs	r2, #1
 8012f54:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8012f58:	687b      	ldr	r3, [r7, #4]
 8012f5a:	2201      	movs	r2, #1
 8012f5c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8012f60:	687b      	ldr	r3, [r7, #4]
 8012f62:	2201      	movs	r2, #1
 8012f64:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8012f68:	687b      	ldr	r3, [r7, #4]
 8012f6a:	2201      	movs	r2, #1
 8012f6c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8012f70:	687b      	ldr	r3, [r7, #4]
 8012f72:	2201      	movs	r2, #1
 8012f74:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8012f78:	687b      	ldr	r3, [r7, #4]
 8012f7a:	2201      	movs	r2, #1
 8012f7c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8012f80:	687b      	ldr	r3, [r7, #4]
 8012f82:	2201      	movs	r2, #1
 8012f84:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8012f88:	687b      	ldr	r3, [r7, #4]
 8012f8a:	2201      	movs	r2, #1
 8012f8c:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8012f90:	687b      	ldr	r3, [r7, #4]
 8012f92:	2201      	movs	r2, #1
 8012f94:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8012f98:	2300      	movs	r3, #0
}
 8012f9a:	4618      	mov	r0, r3
 8012f9c:	3708      	adds	r7, #8
 8012f9e:	46bd      	mov	sp, r7
 8012fa0:	bd80      	pop	{r7, pc}
	...

08012fa4 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8012fa4:	b580      	push	{r7, lr}
 8012fa6:	b084      	sub	sp, #16
 8012fa8:	af00      	add	r7, sp, #0
 8012faa:	6078      	str	r0, [r7, #4]
 8012fac:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8012fae:	683b      	ldr	r3, [r7, #0]
 8012fb0:	2b00      	cmp	r3, #0
 8012fb2:	d109      	bne.n	8012fc8 <HAL_TIM_PWM_Start+0x24>
 8012fb4:	687b      	ldr	r3, [r7, #4]
 8012fb6:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8012fba:	b2db      	uxtb	r3, r3
 8012fbc:	2b01      	cmp	r3, #1
 8012fbe:	bf14      	ite	ne
 8012fc0:	2301      	movne	r3, #1
 8012fc2:	2300      	moveq	r3, #0
 8012fc4:	b2db      	uxtb	r3, r3
 8012fc6:	e03c      	b.n	8013042 <HAL_TIM_PWM_Start+0x9e>
 8012fc8:	683b      	ldr	r3, [r7, #0]
 8012fca:	2b04      	cmp	r3, #4
 8012fcc:	d109      	bne.n	8012fe2 <HAL_TIM_PWM_Start+0x3e>
 8012fce:	687b      	ldr	r3, [r7, #4]
 8012fd0:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8012fd4:	b2db      	uxtb	r3, r3
 8012fd6:	2b01      	cmp	r3, #1
 8012fd8:	bf14      	ite	ne
 8012fda:	2301      	movne	r3, #1
 8012fdc:	2300      	moveq	r3, #0
 8012fde:	b2db      	uxtb	r3, r3
 8012fe0:	e02f      	b.n	8013042 <HAL_TIM_PWM_Start+0x9e>
 8012fe2:	683b      	ldr	r3, [r7, #0]
 8012fe4:	2b08      	cmp	r3, #8
 8012fe6:	d109      	bne.n	8012ffc <HAL_TIM_PWM_Start+0x58>
 8012fe8:	687b      	ldr	r3, [r7, #4]
 8012fea:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8012fee:	b2db      	uxtb	r3, r3
 8012ff0:	2b01      	cmp	r3, #1
 8012ff2:	bf14      	ite	ne
 8012ff4:	2301      	movne	r3, #1
 8012ff6:	2300      	moveq	r3, #0
 8012ff8:	b2db      	uxtb	r3, r3
 8012ffa:	e022      	b.n	8013042 <HAL_TIM_PWM_Start+0x9e>
 8012ffc:	683b      	ldr	r3, [r7, #0]
 8012ffe:	2b0c      	cmp	r3, #12
 8013000:	d109      	bne.n	8013016 <HAL_TIM_PWM_Start+0x72>
 8013002:	687b      	ldr	r3, [r7, #4]
 8013004:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8013008:	b2db      	uxtb	r3, r3
 801300a:	2b01      	cmp	r3, #1
 801300c:	bf14      	ite	ne
 801300e:	2301      	movne	r3, #1
 8013010:	2300      	moveq	r3, #0
 8013012:	b2db      	uxtb	r3, r3
 8013014:	e015      	b.n	8013042 <HAL_TIM_PWM_Start+0x9e>
 8013016:	683b      	ldr	r3, [r7, #0]
 8013018:	2b10      	cmp	r3, #16
 801301a:	d109      	bne.n	8013030 <HAL_TIM_PWM_Start+0x8c>
 801301c:	687b      	ldr	r3, [r7, #4]
 801301e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8013022:	b2db      	uxtb	r3, r3
 8013024:	2b01      	cmp	r3, #1
 8013026:	bf14      	ite	ne
 8013028:	2301      	movne	r3, #1
 801302a:	2300      	moveq	r3, #0
 801302c:	b2db      	uxtb	r3, r3
 801302e:	e008      	b.n	8013042 <HAL_TIM_PWM_Start+0x9e>
 8013030:	687b      	ldr	r3, [r7, #4]
 8013032:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8013036:	b2db      	uxtb	r3, r3
 8013038:	2b01      	cmp	r3, #1
 801303a:	bf14      	ite	ne
 801303c:	2301      	movne	r3, #1
 801303e:	2300      	moveq	r3, #0
 8013040:	b2db      	uxtb	r3, r3
 8013042:	2b00      	cmp	r3, #0
 8013044:	d001      	beq.n	801304a <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8013046:	2301      	movs	r3, #1
 8013048:	e09c      	b.n	8013184 <HAL_TIM_PWM_Start+0x1e0>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 801304a:	683b      	ldr	r3, [r7, #0]
 801304c:	2b00      	cmp	r3, #0
 801304e:	d104      	bne.n	801305a <HAL_TIM_PWM_Start+0xb6>
 8013050:	687b      	ldr	r3, [r7, #4]
 8013052:	2202      	movs	r2, #2
 8013054:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8013058:	e023      	b.n	80130a2 <HAL_TIM_PWM_Start+0xfe>
 801305a:	683b      	ldr	r3, [r7, #0]
 801305c:	2b04      	cmp	r3, #4
 801305e:	d104      	bne.n	801306a <HAL_TIM_PWM_Start+0xc6>
 8013060:	687b      	ldr	r3, [r7, #4]
 8013062:	2202      	movs	r2, #2
 8013064:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8013068:	e01b      	b.n	80130a2 <HAL_TIM_PWM_Start+0xfe>
 801306a:	683b      	ldr	r3, [r7, #0]
 801306c:	2b08      	cmp	r3, #8
 801306e:	d104      	bne.n	801307a <HAL_TIM_PWM_Start+0xd6>
 8013070:	687b      	ldr	r3, [r7, #4]
 8013072:	2202      	movs	r2, #2
 8013074:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8013078:	e013      	b.n	80130a2 <HAL_TIM_PWM_Start+0xfe>
 801307a:	683b      	ldr	r3, [r7, #0]
 801307c:	2b0c      	cmp	r3, #12
 801307e:	d104      	bne.n	801308a <HAL_TIM_PWM_Start+0xe6>
 8013080:	687b      	ldr	r3, [r7, #4]
 8013082:	2202      	movs	r2, #2
 8013084:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8013088:	e00b      	b.n	80130a2 <HAL_TIM_PWM_Start+0xfe>
 801308a:	683b      	ldr	r3, [r7, #0]
 801308c:	2b10      	cmp	r3, #16
 801308e:	d104      	bne.n	801309a <HAL_TIM_PWM_Start+0xf6>
 8013090:	687b      	ldr	r3, [r7, #4]
 8013092:	2202      	movs	r2, #2
 8013094:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8013098:	e003      	b.n	80130a2 <HAL_TIM_PWM_Start+0xfe>
 801309a:	687b      	ldr	r3, [r7, #4]
 801309c:	2202      	movs	r2, #2
 801309e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80130a2:	687b      	ldr	r3, [r7, #4]
 80130a4:	681b      	ldr	r3, [r3, #0]
 80130a6:	2201      	movs	r2, #1
 80130a8:	6839      	ldr	r1, [r7, #0]
 80130aa:	4618      	mov	r0, r3
 80130ac:	f001 fc7a 	bl	80149a4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80130b0:	687b      	ldr	r3, [r7, #4]
 80130b2:	681b      	ldr	r3, [r3, #0]
 80130b4:	4a35      	ldr	r2, [pc, #212]	@ (801318c <HAL_TIM_PWM_Start+0x1e8>)
 80130b6:	4293      	cmp	r3, r2
 80130b8:	d013      	beq.n	80130e2 <HAL_TIM_PWM_Start+0x13e>
 80130ba:	687b      	ldr	r3, [r7, #4]
 80130bc:	681b      	ldr	r3, [r3, #0]
 80130be:	4a34      	ldr	r2, [pc, #208]	@ (8013190 <HAL_TIM_PWM_Start+0x1ec>)
 80130c0:	4293      	cmp	r3, r2
 80130c2:	d00e      	beq.n	80130e2 <HAL_TIM_PWM_Start+0x13e>
 80130c4:	687b      	ldr	r3, [r7, #4]
 80130c6:	681b      	ldr	r3, [r3, #0]
 80130c8:	4a32      	ldr	r2, [pc, #200]	@ (8013194 <HAL_TIM_PWM_Start+0x1f0>)
 80130ca:	4293      	cmp	r3, r2
 80130cc:	d009      	beq.n	80130e2 <HAL_TIM_PWM_Start+0x13e>
 80130ce:	687b      	ldr	r3, [r7, #4]
 80130d0:	681b      	ldr	r3, [r3, #0]
 80130d2:	4a31      	ldr	r2, [pc, #196]	@ (8013198 <HAL_TIM_PWM_Start+0x1f4>)
 80130d4:	4293      	cmp	r3, r2
 80130d6:	d004      	beq.n	80130e2 <HAL_TIM_PWM_Start+0x13e>
 80130d8:	687b      	ldr	r3, [r7, #4]
 80130da:	681b      	ldr	r3, [r3, #0]
 80130dc:	4a2f      	ldr	r2, [pc, #188]	@ (801319c <HAL_TIM_PWM_Start+0x1f8>)
 80130de:	4293      	cmp	r3, r2
 80130e0:	d101      	bne.n	80130e6 <HAL_TIM_PWM_Start+0x142>
 80130e2:	2301      	movs	r3, #1
 80130e4:	e000      	b.n	80130e8 <HAL_TIM_PWM_Start+0x144>
 80130e6:	2300      	movs	r3, #0
 80130e8:	2b00      	cmp	r3, #0
 80130ea:	d007      	beq.n	80130fc <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80130ec:	687b      	ldr	r3, [r7, #4]
 80130ee:	681b      	ldr	r3, [r3, #0]
 80130f0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80130f2:	687b      	ldr	r3, [r7, #4]
 80130f4:	681b      	ldr	r3, [r3, #0]
 80130f6:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80130fa:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80130fc:	687b      	ldr	r3, [r7, #4]
 80130fe:	681b      	ldr	r3, [r3, #0]
 8013100:	4a22      	ldr	r2, [pc, #136]	@ (801318c <HAL_TIM_PWM_Start+0x1e8>)
 8013102:	4293      	cmp	r3, r2
 8013104:	d01d      	beq.n	8013142 <HAL_TIM_PWM_Start+0x19e>
 8013106:	687b      	ldr	r3, [r7, #4]
 8013108:	681b      	ldr	r3, [r3, #0]
 801310a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 801310e:	d018      	beq.n	8013142 <HAL_TIM_PWM_Start+0x19e>
 8013110:	687b      	ldr	r3, [r7, #4]
 8013112:	681b      	ldr	r3, [r3, #0]
 8013114:	4a22      	ldr	r2, [pc, #136]	@ (80131a0 <HAL_TIM_PWM_Start+0x1fc>)
 8013116:	4293      	cmp	r3, r2
 8013118:	d013      	beq.n	8013142 <HAL_TIM_PWM_Start+0x19e>
 801311a:	687b      	ldr	r3, [r7, #4]
 801311c:	681b      	ldr	r3, [r3, #0]
 801311e:	4a21      	ldr	r2, [pc, #132]	@ (80131a4 <HAL_TIM_PWM_Start+0x200>)
 8013120:	4293      	cmp	r3, r2
 8013122:	d00e      	beq.n	8013142 <HAL_TIM_PWM_Start+0x19e>
 8013124:	687b      	ldr	r3, [r7, #4]
 8013126:	681b      	ldr	r3, [r3, #0]
 8013128:	4a1f      	ldr	r2, [pc, #124]	@ (80131a8 <HAL_TIM_PWM_Start+0x204>)
 801312a:	4293      	cmp	r3, r2
 801312c:	d009      	beq.n	8013142 <HAL_TIM_PWM_Start+0x19e>
 801312e:	687b      	ldr	r3, [r7, #4]
 8013130:	681b      	ldr	r3, [r3, #0]
 8013132:	4a17      	ldr	r2, [pc, #92]	@ (8013190 <HAL_TIM_PWM_Start+0x1ec>)
 8013134:	4293      	cmp	r3, r2
 8013136:	d004      	beq.n	8013142 <HAL_TIM_PWM_Start+0x19e>
 8013138:	687b      	ldr	r3, [r7, #4]
 801313a:	681b      	ldr	r3, [r3, #0]
 801313c:	4a15      	ldr	r2, [pc, #84]	@ (8013194 <HAL_TIM_PWM_Start+0x1f0>)
 801313e:	4293      	cmp	r3, r2
 8013140:	d115      	bne.n	801316e <HAL_TIM_PWM_Start+0x1ca>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8013142:	687b      	ldr	r3, [r7, #4]
 8013144:	681b      	ldr	r3, [r3, #0]
 8013146:	689a      	ldr	r2, [r3, #8]
 8013148:	4b18      	ldr	r3, [pc, #96]	@ (80131ac <HAL_TIM_PWM_Start+0x208>)
 801314a:	4013      	ands	r3, r2
 801314c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 801314e:	68fb      	ldr	r3, [r7, #12]
 8013150:	2b06      	cmp	r3, #6
 8013152:	d015      	beq.n	8013180 <HAL_TIM_PWM_Start+0x1dc>
 8013154:	68fb      	ldr	r3, [r7, #12]
 8013156:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 801315a:	d011      	beq.n	8013180 <HAL_TIM_PWM_Start+0x1dc>
    {
      __HAL_TIM_ENABLE(htim);
 801315c:	687b      	ldr	r3, [r7, #4]
 801315e:	681b      	ldr	r3, [r3, #0]
 8013160:	681a      	ldr	r2, [r3, #0]
 8013162:	687b      	ldr	r3, [r7, #4]
 8013164:	681b      	ldr	r3, [r3, #0]
 8013166:	f042 0201 	orr.w	r2, r2, #1
 801316a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 801316c:	e008      	b.n	8013180 <HAL_TIM_PWM_Start+0x1dc>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 801316e:	687b      	ldr	r3, [r7, #4]
 8013170:	681b      	ldr	r3, [r3, #0]
 8013172:	681a      	ldr	r2, [r3, #0]
 8013174:	687b      	ldr	r3, [r7, #4]
 8013176:	681b      	ldr	r3, [r3, #0]
 8013178:	f042 0201 	orr.w	r2, r2, #1
 801317c:	601a      	str	r2, [r3, #0]
 801317e:	e000      	b.n	8013182 <HAL_TIM_PWM_Start+0x1de>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8013180:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8013182:	2300      	movs	r3, #0
}
 8013184:	4618      	mov	r0, r3
 8013186:	3710      	adds	r7, #16
 8013188:	46bd      	mov	sp, r7
 801318a:	bd80      	pop	{r7, pc}
 801318c:	40012c00 	.word	0x40012c00
 8013190:	40013400 	.word	0x40013400
 8013194:	40014000 	.word	0x40014000
 8013198:	40014400 	.word	0x40014400
 801319c:	40014800 	.word	0x40014800
 80131a0:	40000400 	.word	0x40000400
 80131a4:	40000800 	.word	0x40000800
 80131a8:	40000c00 	.word	0x40000c00
 80131ac:	00010007 	.word	0x00010007

080131b0 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80131b0:	b580      	push	{r7, lr}
 80131b2:	b082      	sub	sp, #8
 80131b4:	af00      	add	r7, sp, #0
 80131b6:	6078      	str	r0, [r7, #4]
 80131b8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 80131ba:	687b      	ldr	r3, [r7, #4]
 80131bc:	681b      	ldr	r3, [r3, #0]
 80131be:	2200      	movs	r2, #0
 80131c0:	6839      	ldr	r1, [r7, #0]
 80131c2:	4618      	mov	r0, r3
 80131c4:	f001 fbee 	bl	80149a4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80131c8:	687b      	ldr	r3, [r7, #4]
 80131ca:	681b      	ldr	r3, [r3, #0]
 80131cc:	4a3e      	ldr	r2, [pc, #248]	@ (80132c8 <HAL_TIM_PWM_Stop+0x118>)
 80131ce:	4293      	cmp	r3, r2
 80131d0:	d013      	beq.n	80131fa <HAL_TIM_PWM_Stop+0x4a>
 80131d2:	687b      	ldr	r3, [r7, #4]
 80131d4:	681b      	ldr	r3, [r3, #0]
 80131d6:	4a3d      	ldr	r2, [pc, #244]	@ (80132cc <HAL_TIM_PWM_Stop+0x11c>)
 80131d8:	4293      	cmp	r3, r2
 80131da:	d00e      	beq.n	80131fa <HAL_TIM_PWM_Stop+0x4a>
 80131dc:	687b      	ldr	r3, [r7, #4]
 80131de:	681b      	ldr	r3, [r3, #0]
 80131e0:	4a3b      	ldr	r2, [pc, #236]	@ (80132d0 <HAL_TIM_PWM_Stop+0x120>)
 80131e2:	4293      	cmp	r3, r2
 80131e4:	d009      	beq.n	80131fa <HAL_TIM_PWM_Stop+0x4a>
 80131e6:	687b      	ldr	r3, [r7, #4]
 80131e8:	681b      	ldr	r3, [r3, #0]
 80131ea:	4a3a      	ldr	r2, [pc, #232]	@ (80132d4 <HAL_TIM_PWM_Stop+0x124>)
 80131ec:	4293      	cmp	r3, r2
 80131ee:	d004      	beq.n	80131fa <HAL_TIM_PWM_Stop+0x4a>
 80131f0:	687b      	ldr	r3, [r7, #4]
 80131f2:	681b      	ldr	r3, [r3, #0]
 80131f4:	4a38      	ldr	r2, [pc, #224]	@ (80132d8 <HAL_TIM_PWM_Stop+0x128>)
 80131f6:	4293      	cmp	r3, r2
 80131f8:	d101      	bne.n	80131fe <HAL_TIM_PWM_Stop+0x4e>
 80131fa:	2301      	movs	r3, #1
 80131fc:	e000      	b.n	8013200 <HAL_TIM_PWM_Stop+0x50>
 80131fe:	2300      	movs	r3, #0
 8013200:	2b00      	cmp	r3, #0
 8013202:	d017      	beq.n	8013234 <HAL_TIM_PWM_Stop+0x84>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8013204:	687b      	ldr	r3, [r7, #4]
 8013206:	681b      	ldr	r3, [r3, #0]
 8013208:	6a1a      	ldr	r2, [r3, #32]
 801320a:	f241 1311 	movw	r3, #4369	@ 0x1111
 801320e:	4013      	ands	r3, r2
 8013210:	2b00      	cmp	r3, #0
 8013212:	d10f      	bne.n	8013234 <HAL_TIM_PWM_Stop+0x84>
 8013214:	687b      	ldr	r3, [r7, #4]
 8013216:	681b      	ldr	r3, [r3, #0]
 8013218:	6a1a      	ldr	r2, [r3, #32]
 801321a:	f240 4344 	movw	r3, #1092	@ 0x444
 801321e:	4013      	ands	r3, r2
 8013220:	2b00      	cmp	r3, #0
 8013222:	d107      	bne.n	8013234 <HAL_TIM_PWM_Stop+0x84>
 8013224:	687b      	ldr	r3, [r7, #4]
 8013226:	681b      	ldr	r3, [r3, #0]
 8013228:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 801322a:	687b      	ldr	r3, [r7, #4]
 801322c:	681b      	ldr	r3, [r3, #0]
 801322e:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8013232:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8013234:	687b      	ldr	r3, [r7, #4]
 8013236:	681b      	ldr	r3, [r3, #0]
 8013238:	6a1a      	ldr	r2, [r3, #32]
 801323a:	f241 1311 	movw	r3, #4369	@ 0x1111
 801323e:	4013      	ands	r3, r2
 8013240:	2b00      	cmp	r3, #0
 8013242:	d10f      	bne.n	8013264 <HAL_TIM_PWM_Stop+0xb4>
 8013244:	687b      	ldr	r3, [r7, #4]
 8013246:	681b      	ldr	r3, [r3, #0]
 8013248:	6a1a      	ldr	r2, [r3, #32]
 801324a:	f240 4344 	movw	r3, #1092	@ 0x444
 801324e:	4013      	ands	r3, r2
 8013250:	2b00      	cmp	r3, #0
 8013252:	d107      	bne.n	8013264 <HAL_TIM_PWM_Stop+0xb4>
 8013254:	687b      	ldr	r3, [r7, #4]
 8013256:	681b      	ldr	r3, [r3, #0]
 8013258:	681a      	ldr	r2, [r3, #0]
 801325a:	687b      	ldr	r3, [r7, #4]
 801325c:	681b      	ldr	r3, [r3, #0]
 801325e:	f022 0201 	bic.w	r2, r2, #1
 8013262:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8013264:	683b      	ldr	r3, [r7, #0]
 8013266:	2b00      	cmp	r3, #0
 8013268:	d104      	bne.n	8013274 <HAL_TIM_PWM_Stop+0xc4>
 801326a:	687b      	ldr	r3, [r7, #4]
 801326c:	2201      	movs	r2, #1
 801326e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8013272:	e023      	b.n	80132bc <HAL_TIM_PWM_Stop+0x10c>
 8013274:	683b      	ldr	r3, [r7, #0]
 8013276:	2b04      	cmp	r3, #4
 8013278:	d104      	bne.n	8013284 <HAL_TIM_PWM_Stop+0xd4>
 801327a:	687b      	ldr	r3, [r7, #4]
 801327c:	2201      	movs	r2, #1
 801327e:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8013282:	e01b      	b.n	80132bc <HAL_TIM_PWM_Stop+0x10c>
 8013284:	683b      	ldr	r3, [r7, #0]
 8013286:	2b08      	cmp	r3, #8
 8013288:	d104      	bne.n	8013294 <HAL_TIM_PWM_Stop+0xe4>
 801328a:	687b      	ldr	r3, [r7, #4]
 801328c:	2201      	movs	r2, #1
 801328e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8013292:	e013      	b.n	80132bc <HAL_TIM_PWM_Stop+0x10c>
 8013294:	683b      	ldr	r3, [r7, #0]
 8013296:	2b0c      	cmp	r3, #12
 8013298:	d104      	bne.n	80132a4 <HAL_TIM_PWM_Stop+0xf4>
 801329a:	687b      	ldr	r3, [r7, #4]
 801329c:	2201      	movs	r2, #1
 801329e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80132a2:	e00b      	b.n	80132bc <HAL_TIM_PWM_Stop+0x10c>
 80132a4:	683b      	ldr	r3, [r7, #0]
 80132a6:	2b10      	cmp	r3, #16
 80132a8:	d104      	bne.n	80132b4 <HAL_TIM_PWM_Stop+0x104>
 80132aa:	687b      	ldr	r3, [r7, #4]
 80132ac:	2201      	movs	r2, #1
 80132ae:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80132b2:	e003      	b.n	80132bc <HAL_TIM_PWM_Stop+0x10c>
 80132b4:	687b      	ldr	r3, [r7, #4]
 80132b6:	2201      	movs	r2, #1
 80132b8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Return function status */
  return HAL_OK;
 80132bc:	2300      	movs	r3, #0
}
 80132be:	4618      	mov	r0, r3
 80132c0:	3708      	adds	r7, #8
 80132c2:	46bd      	mov	sp, r7
 80132c4:	bd80      	pop	{r7, pc}
 80132c6:	bf00      	nop
 80132c8:	40012c00 	.word	0x40012c00
 80132cc:	40013400 	.word	0x40013400
 80132d0:	40014000 	.word	0x40014000
 80132d4:	40014400 	.word	0x40014400
 80132d8:	40014800 	.word	0x40014800

080132dc <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 80132dc:	b580      	push	{r7, lr}
 80132de:	b082      	sub	sp, #8
 80132e0:	af00      	add	r7, sp, #0
 80132e2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80132e4:	687b      	ldr	r3, [r7, #4]
 80132e6:	2b00      	cmp	r3, #0
 80132e8:	d101      	bne.n	80132ee <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 80132ea:	2301      	movs	r3, #1
 80132ec:	e049      	b.n	8013382 <HAL_TIM_IC_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80132ee:	687b      	ldr	r3, [r7, #4]
 80132f0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80132f4:	b2db      	uxtb	r3, r3
 80132f6:	2b00      	cmp	r3, #0
 80132f8:	d106      	bne.n	8013308 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80132fa:	687b      	ldr	r3, [r7, #4]
 80132fc:	2200      	movs	r2, #0
 80132fe:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8013302:	6878      	ldr	r0, [r7, #4]
 8013304:	f7f4 fc6c 	bl	8007be0 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8013308:	687b      	ldr	r3, [r7, #4]
 801330a:	2202      	movs	r2, #2
 801330c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8013310:	687b      	ldr	r3, [r7, #4]
 8013312:	681a      	ldr	r2, [r3, #0]
 8013314:	687b      	ldr	r3, [r7, #4]
 8013316:	3304      	adds	r3, #4
 8013318:	4619      	mov	r1, r3
 801331a:	4610      	mov	r0, r2
 801331c:	f000 fd74 	bl	8013e08 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8013320:	687b      	ldr	r3, [r7, #4]
 8013322:	2201      	movs	r2, #1
 8013324:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8013328:	687b      	ldr	r3, [r7, #4]
 801332a:	2201      	movs	r2, #1
 801332c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8013330:	687b      	ldr	r3, [r7, #4]
 8013332:	2201      	movs	r2, #1
 8013334:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8013338:	687b      	ldr	r3, [r7, #4]
 801333a:	2201      	movs	r2, #1
 801333c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8013340:	687b      	ldr	r3, [r7, #4]
 8013342:	2201      	movs	r2, #1
 8013344:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8013348:	687b      	ldr	r3, [r7, #4]
 801334a:	2201      	movs	r2, #1
 801334c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8013350:	687b      	ldr	r3, [r7, #4]
 8013352:	2201      	movs	r2, #1
 8013354:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8013358:	687b      	ldr	r3, [r7, #4]
 801335a:	2201      	movs	r2, #1
 801335c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8013360:	687b      	ldr	r3, [r7, #4]
 8013362:	2201      	movs	r2, #1
 8013364:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8013368:	687b      	ldr	r3, [r7, #4]
 801336a:	2201      	movs	r2, #1
 801336c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8013370:	687b      	ldr	r3, [r7, #4]
 8013372:	2201      	movs	r2, #1
 8013374:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8013378:	687b      	ldr	r3, [r7, #4]
 801337a:	2201      	movs	r2, #1
 801337c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8013380:	2300      	movs	r3, #0
}
 8013382:	4618      	mov	r0, r3
 8013384:	3708      	adds	r7, #8
 8013386:	46bd      	mov	sp, r7
 8013388:	bd80      	pop	{r7, pc}
	...

0801338c <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 801338c:	b580      	push	{r7, lr}
 801338e:	b084      	sub	sp, #16
 8013390:	af00      	add	r7, sp, #0
 8013392:	6078      	str	r0, [r7, #4]
 8013394:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8013396:	2300      	movs	r3, #0
 8013398:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 801339a:	683b      	ldr	r3, [r7, #0]
 801339c:	2b00      	cmp	r3, #0
 801339e:	d104      	bne.n	80133aa <HAL_TIM_IC_Start_IT+0x1e>
 80133a0:	687b      	ldr	r3, [r7, #4]
 80133a2:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80133a6:	b2db      	uxtb	r3, r3
 80133a8:	e023      	b.n	80133f2 <HAL_TIM_IC_Start_IT+0x66>
 80133aa:	683b      	ldr	r3, [r7, #0]
 80133ac:	2b04      	cmp	r3, #4
 80133ae:	d104      	bne.n	80133ba <HAL_TIM_IC_Start_IT+0x2e>
 80133b0:	687b      	ldr	r3, [r7, #4]
 80133b2:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80133b6:	b2db      	uxtb	r3, r3
 80133b8:	e01b      	b.n	80133f2 <HAL_TIM_IC_Start_IT+0x66>
 80133ba:	683b      	ldr	r3, [r7, #0]
 80133bc:	2b08      	cmp	r3, #8
 80133be:	d104      	bne.n	80133ca <HAL_TIM_IC_Start_IT+0x3e>
 80133c0:	687b      	ldr	r3, [r7, #4]
 80133c2:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80133c6:	b2db      	uxtb	r3, r3
 80133c8:	e013      	b.n	80133f2 <HAL_TIM_IC_Start_IT+0x66>
 80133ca:	683b      	ldr	r3, [r7, #0]
 80133cc:	2b0c      	cmp	r3, #12
 80133ce:	d104      	bne.n	80133da <HAL_TIM_IC_Start_IT+0x4e>
 80133d0:	687b      	ldr	r3, [r7, #4]
 80133d2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80133d6:	b2db      	uxtb	r3, r3
 80133d8:	e00b      	b.n	80133f2 <HAL_TIM_IC_Start_IT+0x66>
 80133da:	683b      	ldr	r3, [r7, #0]
 80133dc:	2b10      	cmp	r3, #16
 80133de:	d104      	bne.n	80133ea <HAL_TIM_IC_Start_IT+0x5e>
 80133e0:	687b      	ldr	r3, [r7, #4]
 80133e2:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80133e6:	b2db      	uxtb	r3, r3
 80133e8:	e003      	b.n	80133f2 <HAL_TIM_IC_Start_IT+0x66>
 80133ea:	687b      	ldr	r3, [r7, #4]
 80133ec:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 80133f0:	b2db      	uxtb	r3, r3
 80133f2:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 80133f4:	683b      	ldr	r3, [r7, #0]
 80133f6:	2b00      	cmp	r3, #0
 80133f8:	d104      	bne.n	8013404 <HAL_TIM_IC_Start_IT+0x78>
 80133fa:	687b      	ldr	r3, [r7, #4]
 80133fc:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8013400:	b2db      	uxtb	r3, r3
 8013402:	e013      	b.n	801342c <HAL_TIM_IC_Start_IT+0xa0>
 8013404:	683b      	ldr	r3, [r7, #0]
 8013406:	2b04      	cmp	r3, #4
 8013408:	d104      	bne.n	8013414 <HAL_TIM_IC_Start_IT+0x88>
 801340a:	687b      	ldr	r3, [r7, #4]
 801340c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8013410:	b2db      	uxtb	r3, r3
 8013412:	e00b      	b.n	801342c <HAL_TIM_IC_Start_IT+0xa0>
 8013414:	683b      	ldr	r3, [r7, #0]
 8013416:	2b08      	cmp	r3, #8
 8013418:	d104      	bne.n	8013424 <HAL_TIM_IC_Start_IT+0x98>
 801341a:	687b      	ldr	r3, [r7, #4]
 801341c:	f893 3046 	ldrb.w	r3, [r3, #70]	@ 0x46
 8013420:	b2db      	uxtb	r3, r3
 8013422:	e003      	b.n	801342c <HAL_TIM_IC_Start_IT+0xa0>
 8013424:	687b      	ldr	r3, [r7, #4]
 8013426:	f893 3047 	ldrb.w	r3, [r3, #71]	@ 0x47
 801342a:	b2db      	uxtb	r3, r3
 801342c:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_CHANNEL(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 801342e:	7bbb      	ldrb	r3, [r7, #14]
 8013430:	2b01      	cmp	r3, #1
 8013432:	d102      	bne.n	801343a <HAL_TIM_IC_Start_IT+0xae>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8013434:	7b7b      	ldrb	r3, [r7, #13]
 8013436:	2b01      	cmp	r3, #1
 8013438:	d001      	beq.n	801343e <HAL_TIM_IC_Start_IT+0xb2>
  {
    return HAL_ERROR;
 801343a:	2301      	movs	r3, #1
 801343c:	e0dd      	b.n	80135fa <HAL_TIM_IC_Start_IT+0x26e>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 801343e:	683b      	ldr	r3, [r7, #0]
 8013440:	2b00      	cmp	r3, #0
 8013442:	d104      	bne.n	801344e <HAL_TIM_IC_Start_IT+0xc2>
 8013444:	687b      	ldr	r3, [r7, #4]
 8013446:	2202      	movs	r2, #2
 8013448:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 801344c:	e023      	b.n	8013496 <HAL_TIM_IC_Start_IT+0x10a>
 801344e:	683b      	ldr	r3, [r7, #0]
 8013450:	2b04      	cmp	r3, #4
 8013452:	d104      	bne.n	801345e <HAL_TIM_IC_Start_IT+0xd2>
 8013454:	687b      	ldr	r3, [r7, #4]
 8013456:	2202      	movs	r2, #2
 8013458:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 801345c:	e01b      	b.n	8013496 <HAL_TIM_IC_Start_IT+0x10a>
 801345e:	683b      	ldr	r3, [r7, #0]
 8013460:	2b08      	cmp	r3, #8
 8013462:	d104      	bne.n	801346e <HAL_TIM_IC_Start_IT+0xe2>
 8013464:	687b      	ldr	r3, [r7, #4]
 8013466:	2202      	movs	r2, #2
 8013468:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 801346c:	e013      	b.n	8013496 <HAL_TIM_IC_Start_IT+0x10a>
 801346e:	683b      	ldr	r3, [r7, #0]
 8013470:	2b0c      	cmp	r3, #12
 8013472:	d104      	bne.n	801347e <HAL_TIM_IC_Start_IT+0xf2>
 8013474:	687b      	ldr	r3, [r7, #4]
 8013476:	2202      	movs	r2, #2
 8013478:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 801347c:	e00b      	b.n	8013496 <HAL_TIM_IC_Start_IT+0x10a>
 801347e:	683b      	ldr	r3, [r7, #0]
 8013480:	2b10      	cmp	r3, #16
 8013482:	d104      	bne.n	801348e <HAL_TIM_IC_Start_IT+0x102>
 8013484:	687b      	ldr	r3, [r7, #4]
 8013486:	2202      	movs	r2, #2
 8013488:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 801348c:	e003      	b.n	8013496 <HAL_TIM_IC_Start_IT+0x10a>
 801348e:	687b      	ldr	r3, [r7, #4]
 8013490:	2202      	movs	r2, #2
 8013492:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8013496:	683b      	ldr	r3, [r7, #0]
 8013498:	2b00      	cmp	r3, #0
 801349a:	d104      	bne.n	80134a6 <HAL_TIM_IC_Start_IT+0x11a>
 801349c:	687b      	ldr	r3, [r7, #4]
 801349e:	2202      	movs	r2, #2
 80134a0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80134a4:	e013      	b.n	80134ce <HAL_TIM_IC_Start_IT+0x142>
 80134a6:	683b      	ldr	r3, [r7, #0]
 80134a8:	2b04      	cmp	r3, #4
 80134aa:	d104      	bne.n	80134b6 <HAL_TIM_IC_Start_IT+0x12a>
 80134ac:	687b      	ldr	r3, [r7, #4]
 80134ae:	2202      	movs	r2, #2
 80134b0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80134b4:	e00b      	b.n	80134ce <HAL_TIM_IC_Start_IT+0x142>
 80134b6:	683b      	ldr	r3, [r7, #0]
 80134b8:	2b08      	cmp	r3, #8
 80134ba:	d104      	bne.n	80134c6 <HAL_TIM_IC_Start_IT+0x13a>
 80134bc:	687b      	ldr	r3, [r7, #4]
 80134be:	2202      	movs	r2, #2
 80134c0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80134c4:	e003      	b.n	80134ce <HAL_TIM_IC_Start_IT+0x142>
 80134c6:	687b      	ldr	r3, [r7, #4]
 80134c8:	2202      	movs	r2, #2
 80134ca:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  switch (Channel)
 80134ce:	683b      	ldr	r3, [r7, #0]
 80134d0:	2b0c      	cmp	r3, #12
 80134d2:	d841      	bhi.n	8013558 <HAL_TIM_IC_Start_IT+0x1cc>
 80134d4:	a201      	add	r2, pc, #4	@ (adr r2, 80134dc <HAL_TIM_IC_Start_IT+0x150>)
 80134d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80134da:	bf00      	nop
 80134dc:	08013511 	.word	0x08013511
 80134e0:	08013559 	.word	0x08013559
 80134e4:	08013559 	.word	0x08013559
 80134e8:	08013559 	.word	0x08013559
 80134ec:	08013523 	.word	0x08013523
 80134f0:	08013559 	.word	0x08013559
 80134f4:	08013559 	.word	0x08013559
 80134f8:	08013559 	.word	0x08013559
 80134fc:	08013535 	.word	0x08013535
 8013500:	08013559 	.word	0x08013559
 8013504:	08013559 	.word	0x08013559
 8013508:	08013559 	.word	0x08013559
 801350c:	08013547 	.word	0x08013547
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8013510:	687b      	ldr	r3, [r7, #4]
 8013512:	681b      	ldr	r3, [r3, #0]
 8013514:	68da      	ldr	r2, [r3, #12]
 8013516:	687b      	ldr	r3, [r7, #4]
 8013518:	681b      	ldr	r3, [r3, #0]
 801351a:	f042 0202 	orr.w	r2, r2, #2
 801351e:	60da      	str	r2, [r3, #12]
      break;
 8013520:	e01d      	b.n	801355e <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8013522:	687b      	ldr	r3, [r7, #4]
 8013524:	681b      	ldr	r3, [r3, #0]
 8013526:	68da      	ldr	r2, [r3, #12]
 8013528:	687b      	ldr	r3, [r7, #4]
 801352a:	681b      	ldr	r3, [r3, #0]
 801352c:	f042 0204 	orr.w	r2, r2, #4
 8013530:	60da      	str	r2, [r3, #12]
      break;
 8013532:	e014      	b.n	801355e <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8013534:	687b      	ldr	r3, [r7, #4]
 8013536:	681b      	ldr	r3, [r3, #0]
 8013538:	68da      	ldr	r2, [r3, #12]
 801353a:	687b      	ldr	r3, [r7, #4]
 801353c:	681b      	ldr	r3, [r3, #0]
 801353e:	f042 0208 	orr.w	r2, r2, #8
 8013542:	60da      	str	r2, [r3, #12]
      break;
 8013544:	e00b      	b.n	801355e <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8013546:	687b      	ldr	r3, [r7, #4]
 8013548:	681b      	ldr	r3, [r3, #0]
 801354a:	68da      	ldr	r2, [r3, #12]
 801354c:	687b      	ldr	r3, [r7, #4]
 801354e:	681b      	ldr	r3, [r3, #0]
 8013550:	f042 0210 	orr.w	r2, r2, #16
 8013554:	60da      	str	r2, [r3, #12]
      break;
 8013556:	e002      	b.n	801355e <HAL_TIM_IC_Start_IT+0x1d2>
    }

    default:
      status = HAL_ERROR;
 8013558:	2301      	movs	r3, #1
 801355a:	73fb      	strb	r3, [r7, #15]
      break;
 801355c:	bf00      	nop
  }

  if (status == HAL_OK)
 801355e:	7bfb      	ldrb	r3, [r7, #15]
 8013560:	2b00      	cmp	r3, #0
 8013562:	d149      	bne.n	80135f8 <HAL_TIM_IC_Start_IT+0x26c>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8013564:	687b      	ldr	r3, [r7, #4]
 8013566:	681b      	ldr	r3, [r3, #0]
 8013568:	2201      	movs	r2, #1
 801356a:	6839      	ldr	r1, [r7, #0]
 801356c:	4618      	mov	r0, r3
 801356e:	f001 fa19 	bl	80149a4 <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8013572:	687b      	ldr	r3, [r7, #4]
 8013574:	681b      	ldr	r3, [r3, #0]
 8013576:	4a23      	ldr	r2, [pc, #140]	@ (8013604 <HAL_TIM_IC_Start_IT+0x278>)
 8013578:	4293      	cmp	r3, r2
 801357a:	d01d      	beq.n	80135b8 <HAL_TIM_IC_Start_IT+0x22c>
 801357c:	687b      	ldr	r3, [r7, #4]
 801357e:	681b      	ldr	r3, [r3, #0]
 8013580:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8013584:	d018      	beq.n	80135b8 <HAL_TIM_IC_Start_IT+0x22c>
 8013586:	687b      	ldr	r3, [r7, #4]
 8013588:	681b      	ldr	r3, [r3, #0]
 801358a:	4a1f      	ldr	r2, [pc, #124]	@ (8013608 <HAL_TIM_IC_Start_IT+0x27c>)
 801358c:	4293      	cmp	r3, r2
 801358e:	d013      	beq.n	80135b8 <HAL_TIM_IC_Start_IT+0x22c>
 8013590:	687b      	ldr	r3, [r7, #4]
 8013592:	681b      	ldr	r3, [r3, #0]
 8013594:	4a1d      	ldr	r2, [pc, #116]	@ (801360c <HAL_TIM_IC_Start_IT+0x280>)
 8013596:	4293      	cmp	r3, r2
 8013598:	d00e      	beq.n	80135b8 <HAL_TIM_IC_Start_IT+0x22c>
 801359a:	687b      	ldr	r3, [r7, #4]
 801359c:	681b      	ldr	r3, [r3, #0]
 801359e:	4a1c      	ldr	r2, [pc, #112]	@ (8013610 <HAL_TIM_IC_Start_IT+0x284>)
 80135a0:	4293      	cmp	r3, r2
 80135a2:	d009      	beq.n	80135b8 <HAL_TIM_IC_Start_IT+0x22c>
 80135a4:	687b      	ldr	r3, [r7, #4]
 80135a6:	681b      	ldr	r3, [r3, #0]
 80135a8:	4a1a      	ldr	r2, [pc, #104]	@ (8013614 <HAL_TIM_IC_Start_IT+0x288>)
 80135aa:	4293      	cmp	r3, r2
 80135ac:	d004      	beq.n	80135b8 <HAL_TIM_IC_Start_IT+0x22c>
 80135ae:	687b      	ldr	r3, [r7, #4]
 80135b0:	681b      	ldr	r3, [r3, #0]
 80135b2:	4a19      	ldr	r2, [pc, #100]	@ (8013618 <HAL_TIM_IC_Start_IT+0x28c>)
 80135b4:	4293      	cmp	r3, r2
 80135b6:	d115      	bne.n	80135e4 <HAL_TIM_IC_Start_IT+0x258>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80135b8:	687b      	ldr	r3, [r7, #4]
 80135ba:	681b      	ldr	r3, [r3, #0]
 80135bc:	689a      	ldr	r2, [r3, #8]
 80135be:	4b17      	ldr	r3, [pc, #92]	@ (801361c <HAL_TIM_IC_Start_IT+0x290>)
 80135c0:	4013      	ands	r3, r2
 80135c2:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80135c4:	68bb      	ldr	r3, [r7, #8]
 80135c6:	2b06      	cmp	r3, #6
 80135c8:	d015      	beq.n	80135f6 <HAL_TIM_IC_Start_IT+0x26a>
 80135ca:	68bb      	ldr	r3, [r7, #8]
 80135cc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80135d0:	d011      	beq.n	80135f6 <HAL_TIM_IC_Start_IT+0x26a>
      {
        __HAL_TIM_ENABLE(htim);
 80135d2:	687b      	ldr	r3, [r7, #4]
 80135d4:	681b      	ldr	r3, [r3, #0]
 80135d6:	681a      	ldr	r2, [r3, #0]
 80135d8:	687b      	ldr	r3, [r7, #4]
 80135da:	681b      	ldr	r3, [r3, #0]
 80135dc:	f042 0201 	orr.w	r2, r2, #1
 80135e0:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80135e2:	e008      	b.n	80135f6 <HAL_TIM_IC_Start_IT+0x26a>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 80135e4:	687b      	ldr	r3, [r7, #4]
 80135e6:	681b      	ldr	r3, [r3, #0]
 80135e8:	681a      	ldr	r2, [r3, #0]
 80135ea:	687b      	ldr	r3, [r7, #4]
 80135ec:	681b      	ldr	r3, [r3, #0]
 80135ee:	f042 0201 	orr.w	r2, r2, #1
 80135f2:	601a      	str	r2, [r3, #0]
 80135f4:	e000      	b.n	80135f8 <HAL_TIM_IC_Start_IT+0x26c>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80135f6:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 80135f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80135fa:	4618      	mov	r0, r3
 80135fc:	3710      	adds	r7, #16
 80135fe:	46bd      	mov	sp, r7
 8013600:	bd80      	pop	{r7, pc}
 8013602:	bf00      	nop
 8013604:	40012c00 	.word	0x40012c00
 8013608:	40000400 	.word	0x40000400
 801360c:	40000800 	.word	0x40000800
 8013610:	40000c00 	.word	0x40000c00
 8013614:	40013400 	.word	0x40013400
 8013618:	40014000 	.word	0x40014000
 801361c:	00010007 	.word	0x00010007

08013620 <HAL_TIM_IC_Stop_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Stop_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8013620:	b580      	push	{r7, lr}
 8013622:	b084      	sub	sp, #16
 8013624:	af00      	add	r7, sp, #0
 8013626:	6078      	str	r0, [r7, #4]
 8013628:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 801362a:	2300      	movs	r3, #0
 801362c:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_CHANNEL(htim->Instance, Channel));

  switch (Channel)
 801362e:	683b      	ldr	r3, [r7, #0]
 8013630:	2b0c      	cmp	r3, #12
 8013632:	d841      	bhi.n	80136b8 <HAL_TIM_IC_Stop_IT+0x98>
 8013634:	a201      	add	r2, pc, #4	@ (adr r2, 801363c <HAL_TIM_IC_Stop_IT+0x1c>)
 8013636:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801363a:	bf00      	nop
 801363c:	08013671 	.word	0x08013671
 8013640:	080136b9 	.word	0x080136b9
 8013644:	080136b9 	.word	0x080136b9
 8013648:	080136b9 	.word	0x080136b9
 801364c:	08013683 	.word	0x08013683
 8013650:	080136b9 	.word	0x080136b9
 8013654:	080136b9 	.word	0x080136b9
 8013658:	080136b9 	.word	0x080136b9
 801365c:	08013695 	.word	0x08013695
 8013660:	080136b9 	.word	0x080136b9
 8013664:	080136b9 	.word	0x080136b9
 8013668:	080136b9 	.word	0x080136b9
 801366c:	080136a7 	.word	0x080136a7
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 8013670:	687b      	ldr	r3, [r7, #4]
 8013672:	681b      	ldr	r3, [r3, #0]
 8013674:	68da      	ldr	r2, [r3, #12]
 8013676:	687b      	ldr	r3, [r7, #4]
 8013678:	681b      	ldr	r3, [r3, #0]
 801367a:	f022 0202 	bic.w	r2, r2, #2
 801367e:	60da      	str	r2, [r3, #12]
      break;
 8013680:	e01d      	b.n	80136be <HAL_TIM_IC_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 8013682:	687b      	ldr	r3, [r7, #4]
 8013684:	681b      	ldr	r3, [r3, #0]
 8013686:	68da      	ldr	r2, [r3, #12]
 8013688:	687b      	ldr	r3, [r7, #4]
 801368a:	681b      	ldr	r3, [r3, #0]
 801368c:	f022 0204 	bic.w	r2, r2, #4
 8013690:	60da      	str	r2, [r3, #12]
      break;
 8013692:	e014      	b.n	80136be <HAL_TIM_IC_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC3);
 8013694:	687b      	ldr	r3, [r7, #4]
 8013696:	681b      	ldr	r3, [r3, #0]
 8013698:	68da      	ldr	r2, [r3, #12]
 801369a:	687b      	ldr	r3, [r7, #4]
 801369c:	681b      	ldr	r3, [r3, #0]
 801369e:	f022 0208 	bic.w	r2, r2, #8
 80136a2:	60da      	str	r2, [r3, #12]
      break;
 80136a4:	e00b      	b.n	80136be <HAL_TIM_IC_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC4);
 80136a6:	687b      	ldr	r3, [r7, #4]
 80136a8:	681b      	ldr	r3, [r3, #0]
 80136aa:	68da      	ldr	r2, [r3, #12]
 80136ac:	687b      	ldr	r3, [r7, #4]
 80136ae:	681b      	ldr	r3, [r3, #0]
 80136b0:	f022 0210 	bic.w	r2, r2, #16
 80136b4:	60da      	str	r2, [r3, #12]
      break;
 80136b6:	e002      	b.n	80136be <HAL_TIM_IC_Stop_IT+0x9e>
    }

    default:
      status = HAL_ERROR;
 80136b8:	2301      	movs	r3, #1
 80136ba:	73fb      	strb	r3, [r7, #15]
      break;
 80136bc:	bf00      	nop
  }

  if (status == HAL_OK)
 80136be:	7bfb      	ldrb	r3, [r7, #15]
 80136c0:	2b00      	cmp	r3, #0
 80136c2:	d166      	bne.n	8013792 <HAL_TIM_IC_Stop_IT+0x172>
  {
    /* Disable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 80136c4:	687b      	ldr	r3, [r7, #4]
 80136c6:	681b      	ldr	r3, [r3, #0]
 80136c8:	2200      	movs	r2, #0
 80136ca:	6839      	ldr	r1, [r7, #0]
 80136cc:	4618      	mov	r0, r3
 80136ce:	f001 f969 	bl	80149a4 <TIM_CCxChannelCmd>

    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 80136d2:	687b      	ldr	r3, [r7, #4]
 80136d4:	681b      	ldr	r3, [r3, #0]
 80136d6:	6a1a      	ldr	r2, [r3, #32]
 80136d8:	f241 1311 	movw	r3, #4369	@ 0x1111
 80136dc:	4013      	ands	r3, r2
 80136de:	2b00      	cmp	r3, #0
 80136e0:	d10f      	bne.n	8013702 <HAL_TIM_IC_Stop_IT+0xe2>
 80136e2:	687b      	ldr	r3, [r7, #4]
 80136e4:	681b      	ldr	r3, [r3, #0]
 80136e6:	6a1a      	ldr	r2, [r3, #32]
 80136e8:	f240 4344 	movw	r3, #1092	@ 0x444
 80136ec:	4013      	ands	r3, r2
 80136ee:	2b00      	cmp	r3, #0
 80136f0:	d107      	bne.n	8013702 <HAL_TIM_IC_Stop_IT+0xe2>
 80136f2:	687b      	ldr	r3, [r7, #4]
 80136f4:	681b      	ldr	r3, [r3, #0]
 80136f6:	681a      	ldr	r2, [r3, #0]
 80136f8:	687b      	ldr	r3, [r7, #4]
 80136fa:	681b      	ldr	r3, [r3, #0]
 80136fc:	f022 0201 	bic.w	r2, r2, #1
 8013700:	601a      	str	r2, [r3, #0]

    /* Set the TIM channel state */
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8013702:	683b      	ldr	r3, [r7, #0]
 8013704:	2b00      	cmp	r3, #0
 8013706:	d104      	bne.n	8013712 <HAL_TIM_IC_Stop_IT+0xf2>
 8013708:	687b      	ldr	r3, [r7, #4]
 801370a:	2201      	movs	r2, #1
 801370c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8013710:	e023      	b.n	801375a <HAL_TIM_IC_Stop_IT+0x13a>
 8013712:	683b      	ldr	r3, [r7, #0]
 8013714:	2b04      	cmp	r3, #4
 8013716:	d104      	bne.n	8013722 <HAL_TIM_IC_Stop_IT+0x102>
 8013718:	687b      	ldr	r3, [r7, #4]
 801371a:	2201      	movs	r2, #1
 801371c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8013720:	e01b      	b.n	801375a <HAL_TIM_IC_Stop_IT+0x13a>
 8013722:	683b      	ldr	r3, [r7, #0]
 8013724:	2b08      	cmp	r3, #8
 8013726:	d104      	bne.n	8013732 <HAL_TIM_IC_Stop_IT+0x112>
 8013728:	687b      	ldr	r3, [r7, #4]
 801372a:	2201      	movs	r2, #1
 801372c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8013730:	e013      	b.n	801375a <HAL_TIM_IC_Stop_IT+0x13a>
 8013732:	683b      	ldr	r3, [r7, #0]
 8013734:	2b0c      	cmp	r3, #12
 8013736:	d104      	bne.n	8013742 <HAL_TIM_IC_Stop_IT+0x122>
 8013738:	687b      	ldr	r3, [r7, #4]
 801373a:	2201      	movs	r2, #1
 801373c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8013740:	e00b      	b.n	801375a <HAL_TIM_IC_Stop_IT+0x13a>
 8013742:	683b      	ldr	r3, [r7, #0]
 8013744:	2b10      	cmp	r3, #16
 8013746:	d104      	bne.n	8013752 <HAL_TIM_IC_Stop_IT+0x132>
 8013748:	687b      	ldr	r3, [r7, #4]
 801374a:	2201      	movs	r2, #1
 801374c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8013750:	e003      	b.n	801375a <HAL_TIM_IC_Stop_IT+0x13a>
 8013752:	687b      	ldr	r3, [r7, #4]
 8013754:	2201      	movs	r2, #1
 8013756:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
    TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 801375a:	683b      	ldr	r3, [r7, #0]
 801375c:	2b00      	cmp	r3, #0
 801375e:	d104      	bne.n	801376a <HAL_TIM_IC_Stop_IT+0x14a>
 8013760:	687b      	ldr	r3, [r7, #4]
 8013762:	2201      	movs	r2, #1
 8013764:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8013768:	e013      	b.n	8013792 <HAL_TIM_IC_Stop_IT+0x172>
 801376a:	683b      	ldr	r3, [r7, #0]
 801376c:	2b04      	cmp	r3, #4
 801376e:	d104      	bne.n	801377a <HAL_TIM_IC_Stop_IT+0x15a>
 8013770:	687b      	ldr	r3, [r7, #4]
 8013772:	2201      	movs	r2, #1
 8013774:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8013778:	e00b      	b.n	8013792 <HAL_TIM_IC_Stop_IT+0x172>
 801377a:	683b      	ldr	r3, [r7, #0]
 801377c:	2b08      	cmp	r3, #8
 801377e:	d104      	bne.n	801378a <HAL_TIM_IC_Stop_IT+0x16a>
 8013780:	687b      	ldr	r3, [r7, #4]
 8013782:	2201      	movs	r2, #1
 8013784:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8013788:	e003      	b.n	8013792 <HAL_TIM_IC_Stop_IT+0x172>
 801378a:	687b      	ldr	r3, [r7, #4]
 801378c:	2201      	movs	r2, #1
 801378e:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47
  }

  /* Return function status */
  return status;
 8013792:	7bfb      	ldrb	r3, [r7, #15]
}
 8013794:	4618      	mov	r0, r3
 8013796:	3710      	adds	r7, #16
 8013798:	46bd      	mov	sp, r7
 801379a:	bd80      	pop	{r7, pc}

0801379c <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           const TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 801379c:	b580      	push	{r7, lr}
 801379e:	b086      	sub	sp, #24
 80137a0:	af00      	add	r7, sp, #0
 80137a2:	60f8      	str	r0, [r7, #12]
 80137a4:	60b9      	str	r1, [r7, #8]
 80137a6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80137a8:	2300      	movs	r3, #0
 80137aa:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 80137ac:	68fb      	ldr	r3, [r7, #12]
 80137ae:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80137b2:	2b01      	cmp	r3, #1
 80137b4:	d101      	bne.n	80137ba <HAL_TIM_OC_ConfigChannel+0x1e>
 80137b6:	2302      	movs	r3, #2
 80137b8:	e066      	b.n	8013888 <HAL_TIM_OC_ConfigChannel+0xec>
 80137ba:	68fb      	ldr	r3, [r7, #12]
 80137bc:	2201      	movs	r2, #1
 80137be:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 80137c2:	687b      	ldr	r3, [r7, #4]
 80137c4:	2b14      	cmp	r3, #20
 80137c6:	d857      	bhi.n	8013878 <HAL_TIM_OC_ConfigChannel+0xdc>
 80137c8:	a201      	add	r2, pc, #4	@ (adr r2, 80137d0 <HAL_TIM_OC_ConfigChannel+0x34>)
 80137ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80137ce:	bf00      	nop
 80137d0:	08013825 	.word	0x08013825
 80137d4:	08013879 	.word	0x08013879
 80137d8:	08013879 	.word	0x08013879
 80137dc:	08013879 	.word	0x08013879
 80137e0:	08013833 	.word	0x08013833
 80137e4:	08013879 	.word	0x08013879
 80137e8:	08013879 	.word	0x08013879
 80137ec:	08013879 	.word	0x08013879
 80137f0:	08013841 	.word	0x08013841
 80137f4:	08013879 	.word	0x08013879
 80137f8:	08013879 	.word	0x08013879
 80137fc:	08013879 	.word	0x08013879
 8013800:	0801384f 	.word	0x0801384f
 8013804:	08013879 	.word	0x08013879
 8013808:	08013879 	.word	0x08013879
 801380c:	08013879 	.word	0x08013879
 8013810:	0801385d 	.word	0x0801385d
 8013814:	08013879 	.word	0x08013879
 8013818:	08013879 	.word	0x08013879
 801381c:	08013879 	.word	0x08013879
 8013820:	0801386b 	.word	0x0801386b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8013824:	68fb      	ldr	r3, [r7, #12]
 8013826:	681b      	ldr	r3, [r3, #0]
 8013828:	68b9      	ldr	r1, [r7, #8]
 801382a:	4618      	mov	r0, r3
 801382c:	f000 fb92 	bl	8013f54 <TIM_OC1_SetConfig>
      break;
 8013830:	e025      	b.n	801387e <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8013832:	68fb      	ldr	r3, [r7, #12]
 8013834:	681b      	ldr	r3, [r3, #0]
 8013836:	68b9      	ldr	r1, [r7, #8]
 8013838:	4618      	mov	r0, r3
 801383a:	f000 fc1b 	bl	8014074 <TIM_OC2_SetConfig>
      break;
 801383e:	e01e      	b.n	801387e <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8013840:	68fb      	ldr	r3, [r7, #12]
 8013842:	681b      	ldr	r3, [r3, #0]
 8013844:	68b9      	ldr	r1, [r7, #8]
 8013846:	4618      	mov	r0, r3
 8013848:	f000 fc9e 	bl	8014188 <TIM_OC3_SetConfig>
      break;
 801384c:	e017      	b.n	801387e <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 801384e:	68fb      	ldr	r3, [r7, #12]
 8013850:	681b      	ldr	r3, [r3, #0]
 8013852:	68b9      	ldr	r1, [r7, #8]
 8013854:	4618      	mov	r0, r3
 8013856:	f000 fd1f 	bl	8014298 <TIM_OC4_SetConfig>
      break;
 801385a:	e010      	b.n	801387e <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 5 in Output Compare */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 801385c:	68fb      	ldr	r3, [r7, #12]
 801385e:	681b      	ldr	r3, [r3, #0]
 8013860:	68b9      	ldr	r1, [r7, #8]
 8013862:	4618      	mov	r0, r3
 8013864:	f000 fd82 	bl	801436c <TIM_OC5_SetConfig>
      break;
 8013868:	e009      	b.n	801387e <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 6 in Output Compare */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 801386a:	68fb      	ldr	r3, [r7, #12]
 801386c:	681b      	ldr	r3, [r3, #0]
 801386e:	68b9      	ldr	r1, [r7, #8]
 8013870:	4618      	mov	r0, r3
 8013872:	f000 fddf 	bl	8014434 <TIM_OC6_SetConfig>
      break;
 8013876:	e002      	b.n	801387e <HAL_TIM_OC_ConfigChannel+0xe2>
    }

    default:
      status = HAL_ERROR;
 8013878:	2301      	movs	r3, #1
 801387a:	75fb      	strb	r3, [r7, #23]
      break;
 801387c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 801387e:	68fb      	ldr	r3, [r7, #12]
 8013880:	2200      	movs	r2, #0
 8013882:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8013886:	7dfb      	ldrb	r3, [r7, #23]
}
 8013888:	4618      	mov	r0, r3
 801388a:	3718      	adds	r7, #24
 801388c:	46bd      	mov	sp, r7
 801388e:	bd80      	pop	{r7, pc}

08013890 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8013890:	b580      	push	{r7, lr}
 8013892:	b086      	sub	sp, #24
 8013894:	af00      	add	r7, sp, #0
 8013896:	60f8      	str	r0, [r7, #12]
 8013898:	60b9      	str	r1, [r7, #8]
 801389a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 801389c:	2300      	movs	r3, #0
 801389e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 80138a0:	68fb      	ldr	r3, [r7, #12]
 80138a2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80138a6:	2b01      	cmp	r3, #1
 80138a8:	d101      	bne.n	80138ae <HAL_TIM_IC_ConfigChannel+0x1e>
 80138aa:	2302      	movs	r3, #2
 80138ac:	e088      	b.n	80139c0 <HAL_TIM_IC_ConfigChannel+0x130>
 80138ae:	68fb      	ldr	r3, [r7, #12]
 80138b0:	2201      	movs	r2, #1
 80138b2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  if (Channel == TIM_CHANNEL_1)
 80138b6:	687b      	ldr	r3, [r7, #4]
 80138b8:	2b00      	cmp	r3, #0
 80138ba:	d11b      	bne.n	80138f4 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 80138bc:	68fb      	ldr	r3, [r7, #12]
 80138be:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 80138c0:	68bb      	ldr	r3, [r7, #8]
 80138c2:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 80138c4:	68bb      	ldr	r3, [r7, #8]
 80138c6:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 80138c8:	68bb      	ldr	r3, [r7, #8]
 80138ca:	68db      	ldr	r3, [r3, #12]
    TIM_TI1_SetConfig(htim->Instance,
 80138cc:	f000 feac 	bl	8014628 <TIM_TI1_SetConfig>

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 80138d0:	68fb      	ldr	r3, [r7, #12]
 80138d2:	681b      	ldr	r3, [r3, #0]
 80138d4:	699a      	ldr	r2, [r3, #24]
 80138d6:	68fb      	ldr	r3, [r7, #12]
 80138d8:	681b      	ldr	r3, [r3, #0]
 80138da:	f022 020c 	bic.w	r2, r2, #12
 80138de:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 80138e0:	68fb      	ldr	r3, [r7, #12]
 80138e2:	681b      	ldr	r3, [r3, #0]
 80138e4:	6999      	ldr	r1, [r3, #24]
 80138e6:	68bb      	ldr	r3, [r7, #8]
 80138e8:	689a      	ldr	r2, [r3, #8]
 80138ea:	68fb      	ldr	r3, [r7, #12]
 80138ec:	681b      	ldr	r3, [r3, #0]
 80138ee:	430a      	orrs	r2, r1
 80138f0:	619a      	str	r2, [r3, #24]
 80138f2:	e060      	b.n	80139b6 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 80138f4:	687b      	ldr	r3, [r7, #4]
 80138f6:	2b04      	cmp	r3, #4
 80138f8:	d11c      	bne.n	8013934 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 80138fa:	68fb      	ldr	r3, [r7, #12]
 80138fc:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 80138fe:	68bb      	ldr	r3, [r7, #8]
 8013900:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8013902:	68bb      	ldr	r3, [r7, #8]
 8013904:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8013906:	68bb      	ldr	r3, [r7, #8]
 8013908:	68db      	ldr	r3, [r3, #12]
    TIM_TI2_SetConfig(htim->Instance,
 801390a:	f000 ff2a 	bl	8014762 <TIM_TI2_SetConfig>

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 801390e:	68fb      	ldr	r3, [r7, #12]
 8013910:	681b      	ldr	r3, [r3, #0]
 8013912:	699a      	ldr	r2, [r3, #24]
 8013914:	68fb      	ldr	r3, [r7, #12]
 8013916:	681b      	ldr	r3, [r3, #0]
 8013918:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 801391c:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 801391e:	68fb      	ldr	r3, [r7, #12]
 8013920:	681b      	ldr	r3, [r3, #0]
 8013922:	6999      	ldr	r1, [r3, #24]
 8013924:	68bb      	ldr	r3, [r7, #8]
 8013926:	689b      	ldr	r3, [r3, #8]
 8013928:	021a      	lsls	r2, r3, #8
 801392a:	68fb      	ldr	r3, [r7, #12]
 801392c:	681b      	ldr	r3, [r3, #0]
 801392e:	430a      	orrs	r2, r1
 8013930:	619a      	str	r2, [r3, #24]
 8013932:	e040      	b.n	80139b6 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8013934:	687b      	ldr	r3, [r7, #4]
 8013936:	2b08      	cmp	r3, #8
 8013938:	d11b      	bne.n	8013972 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 801393a:	68fb      	ldr	r3, [r7, #12]
 801393c:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 801393e:	68bb      	ldr	r3, [r7, #8]
 8013940:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8013942:	68bb      	ldr	r3, [r7, #8]
 8013944:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8013946:	68bb      	ldr	r3, [r7, #8]
 8013948:	68db      	ldr	r3, [r3, #12]
    TIM_TI3_SetConfig(htim->Instance,
 801394a:	f000 ff77 	bl	801483c <TIM_TI3_SetConfig>

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 801394e:	68fb      	ldr	r3, [r7, #12]
 8013950:	681b      	ldr	r3, [r3, #0]
 8013952:	69da      	ldr	r2, [r3, #28]
 8013954:	68fb      	ldr	r3, [r7, #12]
 8013956:	681b      	ldr	r3, [r3, #0]
 8013958:	f022 020c 	bic.w	r2, r2, #12
 801395c:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 801395e:	68fb      	ldr	r3, [r7, #12]
 8013960:	681b      	ldr	r3, [r3, #0]
 8013962:	69d9      	ldr	r1, [r3, #28]
 8013964:	68bb      	ldr	r3, [r7, #8]
 8013966:	689a      	ldr	r2, [r3, #8]
 8013968:	68fb      	ldr	r3, [r7, #12]
 801396a:	681b      	ldr	r3, [r3, #0]
 801396c:	430a      	orrs	r2, r1
 801396e:	61da      	str	r2, [r3, #28]
 8013970:	e021      	b.n	80139b6 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8013972:	687b      	ldr	r3, [r7, #4]
 8013974:	2b0c      	cmp	r3, #12
 8013976:	d11c      	bne.n	80139b2 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8013978:	68fb      	ldr	r3, [r7, #12]
 801397a:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 801397c:	68bb      	ldr	r3, [r7, #8]
 801397e:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8013980:	68bb      	ldr	r3, [r7, #8]
 8013982:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8013984:	68bb      	ldr	r3, [r7, #8]
 8013986:	68db      	ldr	r3, [r3, #12]
    TIM_TI4_SetConfig(htim->Instance,
 8013988:	f000 ff94 	bl	80148b4 <TIM_TI4_SetConfig>

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 801398c:	68fb      	ldr	r3, [r7, #12]
 801398e:	681b      	ldr	r3, [r3, #0]
 8013990:	69da      	ldr	r2, [r3, #28]
 8013992:	68fb      	ldr	r3, [r7, #12]
 8013994:	681b      	ldr	r3, [r3, #0]
 8013996:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 801399a:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 801399c:	68fb      	ldr	r3, [r7, #12]
 801399e:	681b      	ldr	r3, [r3, #0]
 80139a0:	69d9      	ldr	r1, [r3, #28]
 80139a2:	68bb      	ldr	r3, [r7, #8]
 80139a4:	689b      	ldr	r3, [r3, #8]
 80139a6:	021a      	lsls	r2, r3, #8
 80139a8:	68fb      	ldr	r3, [r7, #12]
 80139aa:	681b      	ldr	r3, [r3, #0]
 80139ac:	430a      	orrs	r2, r1
 80139ae:	61da      	str	r2, [r3, #28]
 80139b0:	e001      	b.n	80139b6 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 80139b2:	2301      	movs	r3, #1
 80139b4:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 80139b6:	68fb      	ldr	r3, [r7, #12]
 80139b8:	2200      	movs	r2, #0
 80139ba:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80139be:	7dfb      	ldrb	r3, [r7, #23]
}
 80139c0:	4618      	mov	r0, r3
 80139c2:	3718      	adds	r7, #24
 80139c4:	46bd      	mov	sp, r7
 80139c6:	bd80      	pop	{r7, pc}

080139c8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80139c8:	b580      	push	{r7, lr}
 80139ca:	b086      	sub	sp, #24
 80139cc:	af00      	add	r7, sp, #0
 80139ce:	60f8      	str	r0, [r7, #12]
 80139d0:	60b9      	str	r1, [r7, #8]
 80139d2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80139d4:	2300      	movs	r3, #0
 80139d6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80139d8:	68fb      	ldr	r3, [r7, #12]
 80139da:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80139de:	2b01      	cmp	r3, #1
 80139e0:	d101      	bne.n	80139e6 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80139e2:	2302      	movs	r3, #2
 80139e4:	e0ff      	b.n	8013be6 <HAL_TIM_PWM_ConfigChannel+0x21e>
 80139e6:	68fb      	ldr	r3, [r7, #12]
 80139e8:	2201      	movs	r2, #1
 80139ea:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 80139ee:	687b      	ldr	r3, [r7, #4]
 80139f0:	2b14      	cmp	r3, #20
 80139f2:	f200 80f0 	bhi.w	8013bd6 <HAL_TIM_PWM_ConfigChannel+0x20e>
 80139f6:	a201      	add	r2, pc, #4	@ (adr r2, 80139fc <HAL_TIM_PWM_ConfigChannel+0x34>)
 80139f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80139fc:	08013a51 	.word	0x08013a51
 8013a00:	08013bd7 	.word	0x08013bd7
 8013a04:	08013bd7 	.word	0x08013bd7
 8013a08:	08013bd7 	.word	0x08013bd7
 8013a0c:	08013a91 	.word	0x08013a91
 8013a10:	08013bd7 	.word	0x08013bd7
 8013a14:	08013bd7 	.word	0x08013bd7
 8013a18:	08013bd7 	.word	0x08013bd7
 8013a1c:	08013ad3 	.word	0x08013ad3
 8013a20:	08013bd7 	.word	0x08013bd7
 8013a24:	08013bd7 	.word	0x08013bd7
 8013a28:	08013bd7 	.word	0x08013bd7
 8013a2c:	08013b13 	.word	0x08013b13
 8013a30:	08013bd7 	.word	0x08013bd7
 8013a34:	08013bd7 	.word	0x08013bd7
 8013a38:	08013bd7 	.word	0x08013bd7
 8013a3c:	08013b55 	.word	0x08013b55
 8013a40:	08013bd7 	.word	0x08013bd7
 8013a44:	08013bd7 	.word	0x08013bd7
 8013a48:	08013bd7 	.word	0x08013bd7
 8013a4c:	08013b95 	.word	0x08013b95
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8013a50:	68fb      	ldr	r3, [r7, #12]
 8013a52:	681b      	ldr	r3, [r3, #0]
 8013a54:	68b9      	ldr	r1, [r7, #8]
 8013a56:	4618      	mov	r0, r3
 8013a58:	f000 fa7c 	bl	8013f54 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8013a5c:	68fb      	ldr	r3, [r7, #12]
 8013a5e:	681b      	ldr	r3, [r3, #0]
 8013a60:	699a      	ldr	r2, [r3, #24]
 8013a62:	68fb      	ldr	r3, [r7, #12]
 8013a64:	681b      	ldr	r3, [r3, #0]
 8013a66:	f042 0208 	orr.w	r2, r2, #8
 8013a6a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8013a6c:	68fb      	ldr	r3, [r7, #12]
 8013a6e:	681b      	ldr	r3, [r3, #0]
 8013a70:	699a      	ldr	r2, [r3, #24]
 8013a72:	68fb      	ldr	r3, [r7, #12]
 8013a74:	681b      	ldr	r3, [r3, #0]
 8013a76:	f022 0204 	bic.w	r2, r2, #4
 8013a7a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8013a7c:	68fb      	ldr	r3, [r7, #12]
 8013a7e:	681b      	ldr	r3, [r3, #0]
 8013a80:	6999      	ldr	r1, [r3, #24]
 8013a82:	68bb      	ldr	r3, [r7, #8]
 8013a84:	691a      	ldr	r2, [r3, #16]
 8013a86:	68fb      	ldr	r3, [r7, #12]
 8013a88:	681b      	ldr	r3, [r3, #0]
 8013a8a:	430a      	orrs	r2, r1
 8013a8c:	619a      	str	r2, [r3, #24]
      break;
 8013a8e:	e0a5      	b.n	8013bdc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8013a90:	68fb      	ldr	r3, [r7, #12]
 8013a92:	681b      	ldr	r3, [r3, #0]
 8013a94:	68b9      	ldr	r1, [r7, #8]
 8013a96:	4618      	mov	r0, r3
 8013a98:	f000 faec 	bl	8014074 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8013a9c:	68fb      	ldr	r3, [r7, #12]
 8013a9e:	681b      	ldr	r3, [r3, #0]
 8013aa0:	699a      	ldr	r2, [r3, #24]
 8013aa2:	68fb      	ldr	r3, [r7, #12]
 8013aa4:	681b      	ldr	r3, [r3, #0]
 8013aa6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8013aaa:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8013aac:	68fb      	ldr	r3, [r7, #12]
 8013aae:	681b      	ldr	r3, [r3, #0]
 8013ab0:	699a      	ldr	r2, [r3, #24]
 8013ab2:	68fb      	ldr	r3, [r7, #12]
 8013ab4:	681b      	ldr	r3, [r3, #0]
 8013ab6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8013aba:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8013abc:	68fb      	ldr	r3, [r7, #12]
 8013abe:	681b      	ldr	r3, [r3, #0]
 8013ac0:	6999      	ldr	r1, [r3, #24]
 8013ac2:	68bb      	ldr	r3, [r7, #8]
 8013ac4:	691b      	ldr	r3, [r3, #16]
 8013ac6:	021a      	lsls	r2, r3, #8
 8013ac8:	68fb      	ldr	r3, [r7, #12]
 8013aca:	681b      	ldr	r3, [r3, #0]
 8013acc:	430a      	orrs	r2, r1
 8013ace:	619a      	str	r2, [r3, #24]
      break;
 8013ad0:	e084      	b.n	8013bdc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8013ad2:	68fb      	ldr	r3, [r7, #12]
 8013ad4:	681b      	ldr	r3, [r3, #0]
 8013ad6:	68b9      	ldr	r1, [r7, #8]
 8013ad8:	4618      	mov	r0, r3
 8013ada:	f000 fb55 	bl	8014188 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8013ade:	68fb      	ldr	r3, [r7, #12]
 8013ae0:	681b      	ldr	r3, [r3, #0]
 8013ae2:	69da      	ldr	r2, [r3, #28]
 8013ae4:	68fb      	ldr	r3, [r7, #12]
 8013ae6:	681b      	ldr	r3, [r3, #0]
 8013ae8:	f042 0208 	orr.w	r2, r2, #8
 8013aec:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8013aee:	68fb      	ldr	r3, [r7, #12]
 8013af0:	681b      	ldr	r3, [r3, #0]
 8013af2:	69da      	ldr	r2, [r3, #28]
 8013af4:	68fb      	ldr	r3, [r7, #12]
 8013af6:	681b      	ldr	r3, [r3, #0]
 8013af8:	f022 0204 	bic.w	r2, r2, #4
 8013afc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8013afe:	68fb      	ldr	r3, [r7, #12]
 8013b00:	681b      	ldr	r3, [r3, #0]
 8013b02:	69d9      	ldr	r1, [r3, #28]
 8013b04:	68bb      	ldr	r3, [r7, #8]
 8013b06:	691a      	ldr	r2, [r3, #16]
 8013b08:	68fb      	ldr	r3, [r7, #12]
 8013b0a:	681b      	ldr	r3, [r3, #0]
 8013b0c:	430a      	orrs	r2, r1
 8013b0e:	61da      	str	r2, [r3, #28]
      break;
 8013b10:	e064      	b.n	8013bdc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8013b12:	68fb      	ldr	r3, [r7, #12]
 8013b14:	681b      	ldr	r3, [r3, #0]
 8013b16:	68b9      	ldr	r1, [r7, #8]
 8013b18:	4618      	mov	r0, r3
 8013b1a:	f000 fbbd 	bl	8014298 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8013b1e:	68fb      	ldr	r3, [r7, #12]
 8013b20:	681b      	ldr	r3, [r3, #0]
 8013b22:	69da      	ldr	r2, [r3, #28]
 8013b24:	68fb      	ldr	r3, [r7, #12]
 8013b26:	681b      	ldr	r3, [r3, #0]
 8013b28:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8013b2c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8013b2e:	68fb      	ldr	r3, [r7, #12]
 8013b30:	681b      	ldr	r3, [r3, #0]
 8013b32:	69da      	ldr	r2, [r3, #28]
 8013b34:	68fb      	ldr	r3, [r7, #12]
 8013b36:	681b      	ldr	r3, [r3, #0]
 8013b38:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8013b3c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8013b3e:	68fb      	ldr	r3, [r7, #12]
 8013b40:	681b      	ldr	r3, [r3, #0]
 8013b42:	69d9      	ldr	r1, [r3, #28]
 8013b44:	68bb      	ldr	r3, [r7, #8]
 8013b46:	691b      	ldr	r3, [r3, #16]
 8013b48:	021a      	lsls	r2, r3, #8
 8013b4a:	68fb      	ldr	r3, [r7, #12]
 8013b4c:	681b      	ldr	r3, [r3, #0]
 8013b4e:	430a      	orrs	r2, r1
 8013b50:	61da      	str	r2, [r3, #28]
      break;
 8013b52:	e043      	b.n	8013bdc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8013b54:	68fb      	ldr	r3, [r7, #12]
 8013b56:	681b      	ldr	r3, [r3, #0]
 8013b58:	68b9      	ldr	r1, [r7, #8]
 8013b5a:	4618      	mov	r0, r3
 8013b5c:	f000 fc06 	bl	801436c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8013b60:	68fb      	ldr	r3, [r7, #12]
 8013b62:	681b      	ldr	r3, [r3, #0]
 8013b64:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8013b66:	68fb      	ldr	r3, [r7, #12]
 8013b68:	681b      	ldr	r3, [r3, #0]
 8013b6a:	f042 0208 	orr.w	r2, r2, #8
 8013b6e:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8013b70:	68fb      	ldr	r3, [r7, #12]
 8013b72:	681b      	ldr	r3, [r3, #0]
 8013b74:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8013b76:	68fb      	ldr	r3, [r7, #12]
 8013b78:	681b      	ldr	r3, [r3, #0]
 8013b7a:	f022 0204 	bic.w	r2, r2, #4
 8013b7e:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8013b80:	68fb      	ldr	r3, [r7, #12]
 8013b82:	681b      	ldr	r3, [r3, #0]
 8013b84:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8013b86:	68bb      	ldr	r3, [r7, #8]
 8013b88:	691a      	ldr	r2, [r3, #16]
 8013b8a:	68fb      	ldr	r3, [r7, #12]
 8013b8c:	681b      	ldr	r3, [r3, #0]
 8013b8e:	430a      	orrs	r2, r1
 8013b90:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8013b92:	e023      	b.n	8013bdc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8013b94:	68fb      	ldr	r3, [r7, #12]
 8013b96:	681b      	ldr	r3, [r3, #0]
 8013b98:	68b9      	ldr	r1, [r7, #8]
 8013b9a:	4618      	mov	r0, r3
 8013b9c:	f000 fc4a 	bl	8014434 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8013ba0:	68fb      	ldr	r3, [r7, #12]
 8013ba2:	681b      	ldr	r3, [r3, #0]
 8013ba4:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8013ba6:	68fb      	ldr	r3, [r7, #12]
 8013ba8:	681b      	ldr	r3, [r3, #0]
 8013baa:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8013bae:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8013bb0:	68fb      	ldr	r3, [r7, #12]
 8013bb2:	681b      	ldr	r3, [r3, #0]
 8013bb4:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8013bb6:	68fb      	ldr	r3, [r7, #12]
 8013bb8:	681b      	ldr	r3, [r3, #0]
 8013bba:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8013bbe:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8013bc0:	68fb      	ldr	r3, [r7, #12]
 8013bc2:	681b      	ldr	r3, [r3, #0]
 8013bc4:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8013bc6:	68bb      	ldr	r3, [r7, #8]
 8013bc8:	691b      	ldr	r3, [r3, #16]
 8013bca:	021a      	lsls	r2, r3, #8
 8013bcc:	68fb      	ldr	r3, [r7, #12]
 8013bce:	681b      	ldr	r3, [r3, #0]
 8013bd0:	430a      	orrs	r2, r1
 8013bd2:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8013bd4:	e002      	b.n	8013bdc <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8013bd6:	2301      	movs	r3, #1
 8013bd8:	75fb      	strb	r3, [r7, #23]
      break;
 8013bda:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8013bdc:	68fb      	ldr	r3, [r7, #12]
 8013bde:	2200      	movs	r2, #0
 8013be0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8013be4:	7dfb      	ldrb	r3, [r7, #23]
}
 8013be6:	4618      	mov	r0, r3
 8013be8:	3718      	adds	r7, #24
 8013bea:	46bd      	mov	sp, r7
 8013bec:	bd80      	pop	{r7, pc}
 8013bee:	bf00      	nop

08013bf0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8013bf0:	b580      	push	{r7, lr}
 8013bf2:	b084      	sub	sp, #16
 8013bf4:	af00      	add	r7, sp, #0
 8013bf6:	6078      	str	r0, [r7, #4]
 8013bf8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8013bfa:	2300      	movs	r3, #0
 8013bfc:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8013bfe:	687b      	ldr	r3, [r7, #4]
 8013c00:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8013c04:	2b01      	cmp	r3, #1
 8013c06:	d101      	bne.n	8013c0c <HAL_TIM_ConfigClockSource+0x1c>
 8013c08:	2302      	movs	r3, #2
 8013c0a:	e0b6      	b.n	8013d7a <HAL_TIM_ConfigClockSource+0x18a>
 8013c0c:	687b      	ldr	r3, [r7, #4]
 8013c0e:	2201      	movs	r2, #1
 8013c10:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8013c14:	687b      	ldr	r3, [r7, #4]
 8013c16:	2202      	movs	r2, #2
 8013c18:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8013c1c:	687b      	ldr	r3, [r7, #4]
 8013c1e:	681b      	ldr	r3, [r3, #0]
 8013c20:	689b      	ldr	r3, [r3, #8]
 8013c22:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8013c24:	68bb      	ldr	r3, [r7, #8]
 8013c26:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8013c2a:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8013c2e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8013c30:	68bb      	ldr	r3, [r7, #8]
 8013c32:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8013c36:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8013c38:	687b      	ldr	r3, [r7, #4]
 8013c3a:	681b      	ldr	r3, [r3, #0]
 8013c3c:	68ba      	ldr	r2, [r7, #8]
 8013c3e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8013c40:	683b      	ldr	r3, [r7, #0]
 8013c42:	681b      	ldr	r3, [r3, #0]
 8013c44:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8013c48:	d03e      	beq.n	8013cc8 <HAL_TIM_ConfigClockSource+0xd8>
 8013c4a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8013c4e:	f200 8087 	bhi.w	8013d60 <HAL_TIM_ConfigClockSource+0x170>
 8013c52:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8013c56:	f000 8086 	beq.w	8013d66 <HAL_TIM_ConfigClockSource+0x176>
 8013c5a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8013c5e:	d87f      	bhi.n	8013d60 <HAL_TIM_ConfigClockSource+0x170>
 8013c60:	2b70      	cmp	r3, #112	@ 0x70
 8013c62:	d01a      	beq.n	8013c9a <HAL_TIM_ConfigClockSource+0xaa>
 8013c64:	2b70      	cmp	r3, #112	@ 0x70
 8013c66:	d87b      	bhi.n	8013d60 <HAL_TIM_ConfigClockSource+0x170>
 8013c68:	2b60      	cmp	r3, #96	@ 0x60
 8013c6a:	d050      	beq.n	8013d0e <HAL_TIM_ConfigClockSource+0x11e>
 8013c6c:	2b60      	cmp	r3, #96	@ 0x60
 8013c6e:	d877      	bhi.n	8013d60 <HAL_TIM_ConfigClockSource+0x170>
 8013c70:	2b50      	cmp	r3, #80	@ 0x50
 8013c72:	d03c      	beq.n	8013cee <HAL_TIM_ConfigClockSource+0xfe>
 8013c74:	2b50      	cmp	r3, #80	@ 0x50
 8013c76:	d873      	bhi.n	8013d60 <HAL_TIM_ConfigClockSource+0x170>
 8013c78:	2b40      	cmp	r3, #64	@ 0x40
 8013c7a:	d058      	beq.n	8013d2e <HAL_TIM_ConfigClockSource+0x13e>
 8013c7c:	2b40      	cmp	r3, #64	@ 0x40
 8013c7e:	d86f      	bhi.n	8013d60 <HAL_TIM_ConfigClockSource+0x170>
 8013c80:	2b30      	cmp	r3, #48	@ 0x30
 8013c82:	d064      	beq.n	8013d4e <HAL_TIM_ConfigClockSource+0x15e>
 8013c84:	2b30      	cmp	r3, #48	@ 0x30
 8013c86:	d86b      	bhi.n	8013d60 <HAL_TIM_ConfigClockSource+0x170>
 8013c88:	2b20      	cmp	r3, #32
 8013c8a:	d060      	beq.n	8013d4e <HAL_TIM_ConfigClockSource+0x15e>
 8013c8c:	2b20      	cmp	r3, #32
 8013c8e:	d867      	bhi.n	8013d60 <HAL_TIM_ConfigClockSource+0x170>
 8013c90:	2b00      	cmp	r3, #0
 8013c92:	d05c      	beq.n	8013d4e <HAL_TIM_ConfigClockSource+0x15e>
 8013c94:	2b10      	cmp	r3, #16
 8013c96:	d05a      	beq.n	8013d4e <HAL_TIM_ConfigClockSource+0x15e>
 8013c98:	e062      	b.n	8013d60 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8013c9a:	687b      	ldr	r3, [r7, #4]
 8013c9c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8013c9e:	683b      	ldr	r3, [r7, #0]
 8013ca0:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8013ca2:	683b      	ldr	r3, [r7, #0]
 8013ca4:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8013ca6:	683b      	ldr	r3, [r7, #0]
 8013ca8:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8013caa:	f000 fe5b 	bl	8014964 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8013cae:	687b      	ldr	r3, [r7, #4]
 8013cb0:	681b      	ldr	r3, [r3, #0]
 8013cb2:	689b      	ldr	r3, [r3, #8]
 8013cb4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8013cb6:	68bb      	ldr	r3, [r7, #8]
 8013cb8:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8013cbc:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8013cbe:	687b      	ldr	r3, [r7, #4]
 8013cc0:	681b      	ldr	r3, [r3, #0]
 8013cc2:	68ba      	ldr	r2, [r7, #8]
 8013cc4:	609a      	str	r2, [r3, #8]
      break;
 8013cc6:	e04f      	b.n	8013d68 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8013cc8:	687b      	ldr	r3, [r7, #4]
 8013cca:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8013ccc:	683b      	ldr	r3, [r7, #0]
 8013cce:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8013cd0:	683b      	ldr	r3, [r7, #0]
 8013cd2:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8013cd4:	683b      	ldr	r3, [r7, #0]
 8013cd6:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8013cd8:	f000 fe44 	bl	8014964 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8013cdc:	687b      	ldr	r3, [r7, #4]
 8013cde:	681b      	ldr	r3, [r3, #0]
 8013ce0:	689a      	ldr	r2, [r3, #8]
 8013ce2:	687b      	ldr	r3, [r7, #4]
 8013ce4:	681b      	ldr	r3, [r3, #0]
 8013ce6:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8013cea:	609a      	str	r2, [r3, #8]
      break;
 8013cec:	e03c      	b.n	8013d68 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8013cee:	687b      	ldr	r3, [r7, #4]
 8013cf0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8013cf2:	683b      	ldr	r3, [r7, #0]
 8013cf4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8013cf6:	683b      	ldr	r3, [r7, #0]
 8013cf8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8013cfa:	461a      	mov	r2, r3
 8013cfc:	f000 fd02 	bl	8014704 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8013d00:	687b      	ldr	r3, [r7, #4]
 8013d02:	681b      	ldr	r3, [r3, #0]
 8013d04:	2150      	movs	r1, #80	@ 0x50
 8013d06:	4618      	mov	r0, r3
 8013d08:	f000 fe11 	bl	801492e <TIM_ITRx_SetConfig>
      break;
 8013d0c:	e02c      	b.n	8013d68 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8013d0e:	687b      	ldr	r3, [r7, #4]
 8013d10:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8013d12:	683b      	ldr	r3, [r7, #0]
 8013d14:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8013d16:	683b      	ldr	r3, [r7, #0]
 8013d18:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8013d1a:	461a      	mov	r2, r3
 8013d1c:	f000 fd5e 	bl	80147dc <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8013d20:	687b      	ldr	r3, [r7, #4]
 8013d22:	681b      	ldr	r3, [r3, #0]
 8013d24:	2160      	movs	r1, #96	@ 0x60
 8013d26:	4618      	mov	r0, r3
 8013d28:	f000 fe01 	bl	801492e <TIM_ITRx_SetConfig>
      break;
 8013d2c:	e01c      	b.n	8013d68 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8013d2e:	687b      	ldr	r3, [r7, #4]
 8013d30:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8013d32:	683b      	ldr	r3, [r7, #0]
 8013d34:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8013d36:	683b      	ldr	r3, [r7, #0]
 8013d38:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8013d3a:	461a      	mov	r2, r3
 8013d3c:	f000 fce2 	bl	8014704 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8013d40:	687b      	ldr	r3, [r7, #4]
 8013d42:	681b      	ldr	r3, [r3, #0]
 8013d44:	2140      	movs	r1, #64	@ 0x40
 8013d46:	4618      	mov	r0, r3
 8013d48:	f000 fdf1 	bl	801492e <TIM_ITRx_SetConfig>
      break;
 8013d4c:	e00c      	b.n	8013d68 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8013d4e:	687b      	ldr	r3, [r7, #4]
 8013d50:	681a      	ldr	r2, [r3, #0]
 8013d52:	683b      	ldr	r3, [r7, #0]
 8013d54:	681b      	ldr	r3, [r3, #0]
 8013d56:	4619      	mov	r1, r3
 8013d58:	4610      	mov	r0, r2
 8013d5a:	f000 fde8 	bl	801492e <TIM_ITRx_SetConfig>
      break;
 8013d5e:	e003      	b.n	8013d68 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8013d60:	2301      	movs	r3, #1
 8013d62:	73fb      	strb	r3, [r7, #15]
      break;
 8013d64:	e000      	b.n	8013d68 <HAL_TIM_ConfigClockSource+0x178>
      break;
 8013d66:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8013d68:	687b      	ldr	r3, [r7, #4]
 8013d6a:	2201      	movs	r2, #1
 8013d6c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8013d70:	687b      	ldr	r3, [r7, #4]
 8013d72:	2200      	movs	r2, #0
 8013d74:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8013d78:	7bfb      	ldrb	r3, [r7, #15]
}
 8013d7a:	4618      	mov	r0, r3
 8013d7c:	3710      	adds	r7, #16
 8013d7e:	46bd      	mov	sp, r7
 8013d80:	bd80      	pop	{r7, pc}

08013d82 <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8013d82:	b580      	push	{r7, lr}
 8013d84:	b082      	sub	sp, #8
 8013d86:	af00      	add	r7, sp, #0
 8013d88:	6078      	str	r0, [r7, #4]
 8013d8a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 8013d8c:	687b      	ldr	r3, [r7, #4]
 8013d8e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8013d92:	2b01      	cmp	r3, #1
 8013d94:	d101      	bne.n	8013d9a <HAL_TIM_SlaveConfigSynchro+0x18>
 8013d96:	2302      	movs	r3, #2
 8013d98:	e031      	b.n	8013dfe <HAL_TIM_SlaveConfigSynchro+0x7c>
 8013d9a:	687b      	ldr	r3, [r7, #4]
 8013d9c:	2201      	movs	r2, #1
 8013d9e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8013da2:	687b      	ldr	r3, [r7, #4]
 8013da4:	2202      	movs	r2, #2
 8013da6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 8013daa:	6839      	ldr	r1, [r7, #0]
 8013dac:	6878      	ldr	r0, [r7, #4]
 8013dae:	f000 fba7 	bl	8014500 <TIM_SlaveTimer_SetConfig>
 8013db2:	4603      	mov	r3, r0
 8013db4:	2b00      	cmp	r3, #0
 8013db6:	d009      	beq.n	8013dcc <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 8013db8:	687b      	ldr	r3, [r7, #4]
 8013dba:	2201      	movs	r2, #1
 8013dbc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    __HAL_UNLOCK(htim);
 8013dc0:	687b      	ldr	r3, [r7, #4]
 8013dc2:	2200      	movs	r2, #0
 8013dc4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    return HAL_ERROR;
 8013dc8:	2301      	movs	r3, #1
 8013dca:	e018      	b.n	8013dfe <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 8013dcc:	687b      	ldr	r3, [r7, #4]
 8013dce:	681b      	ldr	r3, [r3, #0]
 8013dd0:	68da      	ldr	r2, [r3, #12]
 8013dd2:	687b      	ldr	r3, [r7, #4]
 8013dd4:	681b      	ldr	r3, [r3, #0]
 8013dd6:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8013dda:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 8013ddc:	687b      	ldr	r3, [r7, #4]
 8013dde:	681b      	ldr	r3, [r3, #0]
 8013de0:	68da      	ldr	r2, [r3, #12]
 8013de2:	687b      	ldr	r3, [r7, #4]
 8013de4:	681b      	ldr	r3, [r3, #0]
 8013de6:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8013dea:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 8013dec:	687b      	ldr	r3, [r7, #4]
 8013dee:	2201      	movs	r2, #1
 8013df0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8013df4:	687b      	ldr	r3, [r7, #4]
 8013df6:	2200      	movs	r2, #0
 8013df8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8013dfc:	2300      	movs	r3, #0
}
 8013dfe:	4618      	mov	r0, r3
 8013e00:	3708      	adds	r7, #8
 8013e02:	46bd      	mov	sp, r7
 8013e04:	bd80      	pop	{r7, pc}
	...

08013e08 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8013e08:	b480      	push	{r7}
 8013e0a:	b085      	sub	sp, #20
 8013e0c:	af00      	add	r7, sp, #0
 8013e0e:	6078      	str	r0, [r7, #4]
 8013e10:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8013e12:	687b      	ldr	r3, [r7, #4]
 8013e14:	681b      	ldr	r3, [r3, #0]
 8013e16:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8013e18:	687b      	ldr	r3, [r7, #4]
 8013e1a:	4a46      	ldr	r2, [pc, #280]	@ (8013f34 <TIM_Base_SetConfig+0x12c>)
 8013e1c:	4293      	cmp	r3, r2
 8013e1e:	d013      	beq.n	8013e48 <TIM_Base_SetConfig+0x40>
 8013e20:	687b      	ldr	r3, [r7, #4]
 8013e22:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8013e26:	d00f      	beq.n	8013e48 <TIM_Base_SetConfig+0x40>
 8013e28:	687b      	ldr	r3, [r7, #4]
 8013e2a:	4a43      	ldr	r2, [pc, #268]	@ (8013f38 <TIM_Base_SetConfig+0x130>)
 8013e2c:	4293      	cmp	r3, r2
 8013e2e:	d00b      	beq.n	8013e48 <TIM_Base_SetConfig+0x40>
 8013e30:	687b      	ldr	r3, [r7, #4]
 8013e32:	4a42      	ldr	r2, [pc, #264]	@ (8013f3c <TIM_Base_SetConfig+0x134>)
 8013e34:	4293      	cmp	r3, r2
 8013e36:	d007      	beq.n	8013e48 <TIM_Base_SetConfig+0x40>
 8013e38:	687b      	ldr	r3, [r7, #4]
 8013e3a:	4a41      	ldr	r2, [pc, #260]	@ (8013f40 <TIM_Base_SetConfig+0x138>)
 8013e3c:	4293      	cmp	r3, r2
 8013e3e:	d003      	beq.n	8013e48 <TIM_Base_SetConfig+0x40>
 8013e40:	687b      	ldr	r3, [r7, #4]
 8013e42:	4a40      	ldr	r2, [pc, #256]	@ (8013f44 <TIM_Base_SetConfig+0x13c>)
 8013e44:	4293      	cmp	r3, r2
 8013e46:	d108      	bne.n	8013e5a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8013e48:	68fb      	ldr	r3, [r7, #12]
 8013e4a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8013e4e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8013e50:	683b      	ldr	r3, [r7, #0]
 8013e52:	685b      	ldr	r3, [r3, #4]
 8013e54:	68fa      	ldr	r2, [r7, #12]
 8013e56:	4313      	orrs	r3, r2
 8013e58:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8013e5a:	687b      	ldr	r3, [r7, #4]
 8013e5c:	4a35      	ldr	r2, [pc, #212]	@ (8013f34 <TIM_Base_SetConfig+0x12c>)
 8013e5e:	4293      	cmp	r3, r2
 8013e60:	d01f      	beq.n	8013ea2 <TIM_Base_SetConfig+0x9a>
 8013e62:	687b      	ldr	r3, [r7, #4]
 8013e64:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8013e68:	d01b      	beq.n	8013ea2 <TIM_Base_SetConfig+0x9a>
 8013e6a:	687b      	ldr	r3, [r7, #4]
 8013e6c:	4a32      	ldr	r2, [pc, #200]	@ (8013f38 <TIM_Base_SetConfig+0x130>)
 8013e6e:	4293      	cmp	r3, r2
 8013e70:	d017      	beq.n	8013ea2 <TIM_Base_SetConfig+0x9a>
 8013e72:	687b      	ldr	r3, [r7, #4]
 8013e74:	4a31      	ldr	r2, [pc, #196]	@ (8013f3c <TIM_Base_SetConfig+0x134>)
 8013e76:	4293      	cmp	r3, r2
 8013e78:	d013      	beq.n	8013ea2 <TIM_Base_SetConfig+0x9a>
 8013e7a:	687b      	ldr	r3, [r7, #4]
 8013e7c:	4a30      	ldr	r2, [pc, #192]	@ (8013f40 <TIM_Base_SetConfig+0x138>)
 8013e7e:	4293      	cmp	r3, r2
 8013e80:	d00f      	beq.n	8013ea2 <TIM_Base_SetConfig+0x9a>
 8013e82:	687b      	ldr	r3, [r7, #4]
 8013e84:	4a2f      	ldr	r2, [pc, #188]	@ (8013f44 <TIM_Base_SetConfig+0x13c>)
 8013e86:	4293      	cmp	r3, r2
 8013e88:	d00b      	beq.n	8013ea2 <TIM_Base_SetConfig+0x9a>
 8013e8a:	687b      	ldr	r3, [r7, #4]
 8013e8c:	4a2e      	ldr	r2, [pc, #184]	@ (8013f48 <TIM_Base_SetConfig+0x140>)
 8013e8e:	4293      	cmp	r3, r2
 8013e90:	d007      	beq.n	8013ea2 <TIM_Base_SetConfig+0x9a>
 8013e92:	687b      	ldr	r3, [r7, #4]
 8013e94:	4a2d      	ldr	r2, [pc, #180]	@ (8013f4c <TIM_Base_SetConfig+0x144>)
 8013e96:	4293      	cmp	r3, r2
 8013e98:	d003      	beq.n	8013ea2 <TIM_Base_SetConfig+0x9a>
 8013e9a:	687b      	ldr	r3, [r7, #4]
 8013e9c:	4a2c      	ldr	r2, [pc, #176]	@ (8013f50 <TIM_Base_SetConfig+0x148>)
 8013e9e:	4293      	cmp	r3, r2
 8013ea0:	d108      	bne.n	8013eb4 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8013ea2:	68fb      	ldr	r3, [r7, #12]
 8013ea4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8013ea8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8013eaa:	683b      	ldr	r3, [r7, #0]
 8013eac:	68db      	ldr	r3, [r3, #12]
 8013eae:	68fa      	ldr	r2, [r7, #12]
 8013eb0:	4313      	orrs	r3, r2
 8013eb2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8013eb4:	68fb      	ldr	r3, [r7, #12]
 8013eb6:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8013eba:	683b      	ldr	r3, [r7, #0]
 8013ebc:	695b      	ldr	r3, [r3, #20]
 8013ebe:	4313      	orrs	r3, r2
 8013ec0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8013ec2:	687b      	ldr	r3, [r7, #4]
 8013ec4:	68fa      	ldr	r2, [r7, #12]
 8013ec6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8013ec8:	683b      	ldr	r3, [r7, #0]
 8013eca:	689a      	ldr	r2, [r3, #8]
 8013ecc:	687b      	ldr	r3, [r7, #4]
 8013ece:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8013ed0:	683b      	ldr	r3, [r7, #0]
 8013ed2:	681a      	ldr	r2, [r3, #0]
 8013ed4:	687b      	ldr	r3, [r7, #4]
 8013ed6:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8013ed8:	687b      	ldr	r3, [r7, #4]
 8013eda:	4a16      	ldr	r2, [pc, #88]	@ (8013f34 <TIM_Base_SetConfig+0x12c>)
 8013edc:	4293      	cmp	r3, r2
 8013ede:	d00f      	beq.n	8013f00 <TIM_Base_SetConfig+0xf8>
 8013ee0:	687b      	ldr	r3, [r7, #4]
 8013ee2:	4a18      	ldr	r2, [pc, #96]	@ (8013f44 <TIM_Base_SetConfig+0x13c>)
 8013ee4:	4293      	cmp	r3, r2
 8013ee6:	d00b      	beq.n	8013f00 <TIM_Base_SetConfig+0xf8>
 8013ee8:	687b      	ldr	r3, [r7, #4]
 8013eea:	4a17      	ldr	r2, [pc, #92]	@ (8013f48 <TIM_Base_SetConfig+0x140>)
 8013eec:	4293      	cmp	r3, r2
 8013eee:	d007      	beq.n	8013f00 <TIM_Base_SetConfig+0xf8>
 8013ef0:	687b      	ldr	r3, [r7, #4]
 8013ef2:	4a16      	ldr	r2, [pc, #88]	@ (8013f4c <TIM_Base_SetConfig+0x144>)
 8013ef4:	4293      	cmp	r3, r2
 8013ef6:	d003      	beq.n	8013f00 <TIM_Base_SetConfig+0xf8>
 8013ef8:	687b      	ldr	r3, [r7, #4]
 8013efa:	4a15      	ldr	r2, [pc, #84]	@ (8013f50 <TIM_Base_SetConfig+0x148>)
 8013efc:	4293      	cmp	r3, r2
 8013efe:	d103      	bne.n	8013f08 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8013f00:	683b      	ldr	r3, [r7, #0]
 8013f02:	691a      	ldr	r2, [r3, #16]
 8013f04:	687b      	ldr	r3, [r7, #4]
 8013f06:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8013f08:	687b      	ldr	r3, [r7, #4]
 8013f0a:	2201      	movs	r2, #1
 8013f0c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8013f0e:	687b      	ldr	r3, [r7, #4]
 8013f10:	691b      	ldr	r3, [r3, #16]
 8013f12:	f003 0301 	and.w	r3, r3, #1
 8013f16:	2b01      	cmp	r3, #1
 8013f18:	d105      	bne.n	8013f26 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8013f1a:	687b      	ldr	r3, [r7, #4]
 8013f1c:	691b      	ldr	r3, [r3, #16]
 8013f1e:	f023 0201 	bic.w	r2, r3, #1
 8013f22:	687b      	ldr	r3, [r7, #4]
 8013f24:	611a      	str	r2, [r3, #16]
  }
}
 8013f26:	bf00      	nop
 8013f28:	3714      	adds	r7, #20
 8013f2a:	46bd      	mov	sp, r7
 8013f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013f30:	4770      	bx	lr
 8013f32:	bf00      	nop
 8013f34:	40012c00 	.word	0x40012c00
 8013f38:	40000400 	.word	0x40000400
 8013f3c:	40000800 	.word	0x40000800
 8013f40:	40000c00 	.word	0x40000c00
 8013f44:	40013400 	.word	0x40013400
 8013f48:	40014000 	.word	0x40014000
 8013f4c:	40014400 	.word	0x40014400
 8013f50:	40014800 	.word	0x40014800

08013f54 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8013f54:	b480      	push	{r7}
 8013f56:	b087      	sub	sp, #28
 8013f58:	af00      	add	r7, sp, #0
 8013f5a:	6078      	str	r0, [r7, #4]
 8013f5c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8013f5e:	687b      	ldr	r3, [r7, #4]
 8013f60:	6a1b      	ldr	r3, [r3, #32]
 8013f62:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8013f64:	687b      	ldr	r3, [r7, #4]
 8013f66:	6a1b      	ldr	r3, [r3, #32]
 8013f68:	f023 0201 	bic.w	r2, r3, #1
 8013f6c:	687b      	ldr	r3, [r7, #4]
 8013f6e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8013f70:	687b      	ldr	r3, [r7, #4]
 8013f72:	685b      	ldr	r3, [r3, #4]
 8013f74:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8013f76:	687b      	ldr	r3, [r7, #4]
 8013f78:	699b      	ldr	r3, [r3, #24]
 8013f7a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8013f7c:	68fb      	ldr	r3, [r7, #12]
 8013f7e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8013f82:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8013f86:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8013f88:	68fb      	ldr	r3, [r7, #12]
 8013f8a:	f023 0303 	bic.w	r3, r3, #3
 8013f8e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8013f90:	683b      	ldr	r3, [r7, #0]
 8013f92:	681b      	ldr	r3, [r3, #0]
 8013f94:	68fa      	ldr	r2, [r7, #12]
 8013f96:	4313      	orrs	r3, r2
 8013f98:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8013f9a:	697b      	ldr	r3, [r7, #20]
 8013f9c:	f023 0302 	bic.w	r3, r3, #2
 8013fa0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8013fa2:	683b      	ldr	r3, [r7, #0]
 8013fa4:	689b      	ldr	r3, [r3, #8]
 8013fa6:	697a      	ldr	r2, [r7, #20]
 8013fa8:	4313      	orrs	r3, r2
 8013faa:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8013fac:	687b      	ldr	r3, [r7, #4]
 8013fae:	4a2c      	ldr	r2, [pc, #176]	@ (8014060 <TIM_OC1_SetConfig+0x10c>)
 8013fb0:	4293      	cmp	r3, r2
 8013fb2:	d00f      	beq.n	8013fd4 <TIM_OC1_SetConfig+0x80>
 8013fb4:	687b      	ldr	r3, [r7, #4]
 8013fb6:	4a2b      	ldr	r2, [pc, #172]	@ (8014064 <TIM_OC1_SetConfig+0x110>)
 8013fb8:	4293      	cmp	r3, r2
 8013fba:	d00b      	beq.n	8013fd4 <TIM_OC1_SetConfig+0x80>
 8013fbc:	687b      	ldr	r3, [r7, #4]
 8013fbe:	4a2a      	ldr	r2, [pc, #168]	@ (8014068 <TIM_OC1_SetConfig+0x114>)
 8013fc0:	4293      	cmp	r3, r2
 8013fc2:	d007      	beq.n	8013fd4 <TIM_OC1_SetConfig+0x80>
 8013fc4:	687b      	ldr	r3, [r7, #4]
 8013fc6:	4a29      	ldr	r2, [pc, #164]	@ (801406c <TIM_OC1_SetConfig+0x118>)
 8013fc8:	4293      	cmp	r3, r2
 8013fca:	d003      	beq.n	8013fd4 <TIM_OC1_SetConfig+0x80>
 8013fcc:	687b      	ldr	r3, [r7, #4]
 8013fce:	4a28      	ldr	r2, [pc, #160]	@ (8014070 <TIM_OC1_SetConfig+0x11c>)
 8013fd0:	4293      	cmp	r3, r2
 8013fd2:	d10c      	bne.n	8013fee <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8013fd4:	697b      	ldr	r3, [r7, #20]
 8013fd6:	f023 0308 	bic.w	r3, r3, #8
 8013fda:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8013fdc:	683b      	ldr	r3, [r7, #0]
 8013fde:	68db      	ldr	r3, [r3, #12]
 8013fe0:	697a      	ldr	r2, [r7, #20]
 8013fe2:	4313      	orrs	r3, r2
 8013fe4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8013fe6:	697b      	ldr	r3, [r7, #20]
 8013fe8:	f023 0304 	bic.w	r3, r3, #4
 8013fec:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8013fee:	687b      	ldr	r3, [r7, #4]
 8013ff0:	4a1b      	ldr	r2, [pc, #108]	@ (8014060 <TIM_OC1_SetConfig+0x10c>)
 8013ff2:	4293      	cmp	r3, r2
 8013ff4:	d00f      	beq.n	8014016 <TIM_OC1_SetConfig+0xc2>
 8013ff6:	687b      	ldr	r3, [r7, #4]
 8013ff8:	4a1a      	ldr	r2, [pc, #104]	@ (8014064 <TIM_OC1_SetConfig+0x110>)
 8013ffa:	4293      	cmp	r3, r2
 8013ffc:	d00b      	beq.n	8014016 <TIM_OC1_SetConfig+0xc2>
 8013ffe:	687b      	ldr	r3, [r7, #4]
 8014000:	4a19      	ldr	r2, [pc, #100]	@ (8014068 <TIM_OC1_SetConfig+0x114>)
 8014002:	4293      	cmp	r3, r2
 8014004:	d007      	beq.n	8014016 <TIM_OC1_SetConfig+0xc2>
 8014006:	687b      	ldr	r3, [r7, #4]
 8014008:	4a18      	ldr	r2, [pc, #96]	@ (801406c <TIM_OC1_SetConfig+0x118>)
 801400a:	4293      	cmp	r3, r2
 801400c:	d003      	beq.n	8014016 <TIM_OC1_SetConfig+0xc2>
 801400e:	687b      	ldr	r3, [r7, #4]
 8014010:	4a17      	ldr	r2, [pc, #92]	@ (8014070 <TIM_OC1_SetConfig+0x11c>)
 8014012:	4293      	cmp	r3, r2
 8014014:	d111      	bne.n	801403a <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8014016:	693b      	ldr	r3, [r7, #16]
 8014018:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 801401c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 801401e:	693b      	ldr	r3, [r7, #16]
 8014020:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8014024:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8014026:	683b      	ldr	r3, [r7, #0]
 8014028:	695b      	ldr	r3, [r3, #20]
 801402a:	693a      	ldr	r2, [r7, #16]
 801402c:	4313      	orrs	r3, r2
 801402e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8014030:	683b      	ldr	r3, [r7, #0]
 8014032:	699b      	ldr	r3, [r3, #24]
 8014034:	693a      	ldr	r2, [r7, #16]
 8014036:	4313      	orrs	r3, r2
 8014038:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 801403a:	687b      	ldr	r3, [r7, #4]
 801403c:	693a      	ldr	r2, [r7, #16]
 801403e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8014040:	687b      	ldr	r3, [r7, #4]
 8014042:	68fa      	ldr	r2, [r7, #12]
 8014044:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8014046:	683b      	ldr	r3, [r7, #0]
 8014048:	685a      	ldr	r2, [r3, #4]
 801404a:	687b      	ldr	r3, [r7, #4]
 801404c:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 801404e:	687b      	ldr	r3, [r7, #4]
 8014050:	697a      	ldr	r2, [r7, #20]
 8014052:	621a      	str	r2, [r3, #32]
}
 8014054:	bf00      	nop
 8014056:	371c      	adds	r7, #28
 8014058:	46bd      	mov	sp, r7
 801405a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801405e:	4770      	bx	lr
 8014060:	40012c00 	.word	0x40012c00
 8014064:	40013400 	.word	0x40013400
 8014068:	40014000 	.word	0x40014000
 801406c:	40014400 	.word	0x40014400
 8014070:	40014800 	.word	0x40014800

08014074 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8014074:	b480      	push	{r7}
 8014076:	b087      	sub	sp, #28
 8014078:	af00      	add	r7, sp, #0
 801407a:	6078      	str	r0, [r7, #4]
 801407c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 801407e:	687b      	ldr	r3, [r7, #4]
 8014080:	6a1b      	ldr	r3, [r3, #32]
 8014082:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8014084:	687b      	ldr	r3, [r7, #4]
 8014086:	6a1b      	ldr	r3, [r3, #32]
 8014088:	f023 0210 	bic.w	r2, r3, #16
 801408c:	687b      	ldr	r3, [r7, #4]
 801408e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8014090:	687b      	ldr	r3, [r7, #4]
 8014092:	685b      	ldr	r3, [r3, #4]
 8014094:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8014096:	687b      	ldr	r3, [r7, #4]
 8014098:	699b      	ldr	r3, [r3, #24]
 801409a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 801409c:	68fb      	ldr	r3, [r7, #12]
 801409e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80140a2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80140a6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80140a8:	68fb      	ldr	r3, [r7, #12]
 80140aa:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80140ae:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80140b0:	683b      	ldr	r3, [r7, #0]
 80140b2:	681b      	ldr	r3, [r3, #0]
 80140b4:	021b      	lsls	r3, r3, #8
 80140b6:	68fa      	ldr	r2, [r7, #12]
 80140b8:	4313      	orrs	r3, r2
 80140ba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80140bc:	697b      	ldr	r3, [r7, #20]
 80140be:	f023 0320 	bic.w	r3, r3, #32
 80140c2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80140c4:	683b      	ldr	r3, [r7, #0]
 80140c6:	689b      	ldr	r3, [r3, #8]
 80140c8:	011b      	lsls	r3, r3, #4
 80140ca:	697a      	ldr	r2, [r7, #20]
 80140cc:	4313      	orrs	r3, r2
 80140ce:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80140d0:	687b      	ldr	r3, [r7, #4]
 80140d2:	4a28      	ldr	r2, [pc, #160]	@ (8014174 <TIM_OC2_SetConfig+0x100>)
 80140d4:	4293      	cmp	r3, r2
 80140d6:	d003      	beq.n	80140e0 <TIM_OC2_SetConfig+0x6c>
 80140d8:	687b      	ldr	r3, [r7, #4]
 80140da:	4a27      	ldr	r2, [pc, #156]	@ (8014178 <TIM_OC2_SetConfig+0x104>)
 80140dc:	4293      	cmp	r3, r2
 80140de:	d10d      	bne.n	80140fc <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80140e0:	697b      	ldr	r3, [r7, #20]
 80140e2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80140e6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80140e8:	683b      	ldr	r3, [r7, #0]
 80140ea:	68db      	ldr	r3, [r3, #12]
 80140ec:	011b      	lsls	r3, r3, #4
 80140ee:	697a      	ldr	r2, [r7, #20]
 80140f0:	4313      	orrs	r3, r2
 80140f2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80140f4:	697b      	ldr	r3, [r7, #20]
 80140f6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80140fa:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80140fc:	687b      	ldr	r3, [r7, #4]
 80140fe:	4a1d      	ldr	r2, [pc, #116]	@ (8014174 <TIM_OC2_SetConfig+0x100>)
 8014100:	4293      	cmp	r3, r2
 8014102:	d00f      	beq.n	8014124 <TIM_OC2_SetConfig+0xb0>
 8014104:	687b      	ldr	r3, [r7, #4]
 8014106:	4a1c      	ldr	r2, [pc, #112]	@ (8014178 <TIM_OC2_SetConfig+0x104>)
 8014108:	4293      	cmp	r3, r2
 801410a:	d00b      	beq.n	8014124 <TIM_OC2_SetConfig+0xb0>
 801410c:	687b      	ldr	r3, [r7, #4]
 801410e:	4a1b      	ldr	r2, [pc, #108]	@ (801417c <TIM_OC2_SetConfig+0x108>)
 8014110:	4293      	cmp	r3, r2
 8014112:	d007      	beq.n	8014124 <TIM_OC2_SetConfig+0xb0>
 8014114:	687b      	ldr	r3, [r7, #4]
 8014116:	4a1a      	ldr	r2, [pc, #104]	@ (8014180 <TIM_OC2_SetConfig+0x10c>)
 8014118:	4293      	cmp	r3, r2
 801411a:	d003      	beq.n	8014124 <TIM_OC2_SetConfig+0xb0>
 801411c:	687b      	ldr	r3, [r7, #4]
 801411e:	4a19      	ldr	r2, [pc, #100]	@ (8014184 <TIM_OC2_SetConfig+0x110>)
 8014120:	4293      	cmp	r3, r2
 8014122:	d113      	bne.n	801414c <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8014124:	693b      	ldr	r3, [r7, #16]
 8014126:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 801412a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 801412c:	693b      	ldr	r3, [r7, #16]
 801412e:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8014132:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8014134:	683b      	ldr	r3, [r7, #0]
 8014136:	695b      	ldr	r3, [r3, #20]
 8014138:	009b      	lsls	r3, r3, #2
 801413a:	693a      	ldr	r2, [r7, #16]
 801413c:	4313      	orrs	r3, r2
 801413e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8014140:	683b      	ldr	r3, [r7, #0]
 8014142:	699b      	ldr	r3, [r3, #24]
 8014144:	009b      	lsls	r3, r3, #2
 8014146:	693a      	ldr	r2, [r7, #16]
 8014148:	4313      	orrs	r3, r2
 801414a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 801414c:	687b      	ldr	r3, [r7, #4]
 801414e:	693a      	ldr	r2, [r7, #16]
 8014150:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8014152:	687b      	ldr	r3, [r7, #4]
 8014154:	68fa      	ldr	r2, [r7, #12]
 8014156:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8014158:	683b      	ldr	r3, [r7, #0]
 801415a:	685a      	ldr	r2, [r3, #4]
 801415c:	687b      	ldr	r3, [r7, #4]
 801415e:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8014160:	687b      	ldr	r3, [r7, #4]
 8014162:	697a      	ldr	r2, [r7, #20]
 8014164:	621a      	str	r2, [r3, #32]
}
 8014166:	bf00      	nop
 8014168:	371c      	adds	r7, #28
 801416a:	46bd      	mov	sp, r7
 801416c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014170:	4770      	bx	lr
 8014172:	bf00      	nop
 8014174:	40012c00 	.word	0x40012c00
 8014178:	40013400 	.word	0x40013400
 801417c:	40014000 	.word	0x40014000
 8014180:	40014400 	.word	0x40014400
 8014184:	40014800 	.word	0x40014800

08014188 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8014188:	b480      	push	{r7}
 801418a:	b087      	sub	sp, #28
 801418c:	af00      	add	r7, sp, #0
 801418e:	6078      	str	r0, [r7, #4]
 8014190:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8014192:	687b      	ldr	r3, [r7, #4]
 8014194:	6a1b      	ldr	r3, [r3, #32]
 8014196:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8014198:	687b      	ldr	r3, [r7, #4]
 801419a:	6a1b      	ldr	r3, [r3, #32]
 801419c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80141a0:	687b      	ldr	r3, [r7, #4]
 80141a2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80141a4:	687b      	ldr	r3, [r7, #4]
 80141a6:	685b      	ldr	r3, [r3, #4]
 80141a8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80141aa:	687b      	ldr	r3, [r7, #4]
 80141ac:	69db      	ldr	r3, [r3, #28]
 80141ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80141b0:	68fb      	ldr	r3, [r7, #12]
 80141b2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80141b6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80141ba:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80141bc:	68fb      	ldr	r3, [r7, #12]
 80141be:	f023 0303 	bic.w	r3, r3, #3
 80141c2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80141c4:	683b      	ldr	r3, [r7, #0]
 80141c6:	681b      	ldr	r3, [r3, #0]
 80141c8:	68fa      	ldr	r2, [r7, #12]
 80141ca:	4313      	orrs	r3, r2
 80141cc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80141ce:	697b      	ldr	r3, [r7, #20]
 80141d0:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80141d4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80141d6:	683b      	ldr	r3, [r7, #0]
 80141d8:	689b      	ldr	r3, [r3, #8]
 80141da:	021b      	lsls	r3, r3, #8
 80141dc:	697a      	ldr	r2, [r7, #20]
 80141de:	4313      	orrs	r3, r2
 80141e0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80141e2:	687b      	ldr	r3, [r7, #4]
 80141e4:	4a27      	ldr	r2, [pc, #156]	@ (8014284 <TIM_OC3_SetConfig+0xfc>)
 80141e6:	4293      	cmp	r3, r2
 80141e8:	d003      	beq.n	80141f2 <TIM_OC3_SetConfig+0x6a>
 80141ea:	687b      	ldr	r3, [r7, #4]
 80141ec:	4a26      	ldr	r2, [pc, #152]	@ (8014288 <TIM_OC3_SetConfig+0x100>)
 80141ee:	4293      	cmp	r3, r2
 80141f0:	d10d      	bne.n	801420e <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80141f2:	697b      	ldr	r3, [r7, #20]
 80141f4:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80141f8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80141fa:	683b      	ldr	r3, [r7, #0]
 80141fc:	68db      	ldr	r3, [r3, #12]
 80141fe:	021b      	lsls	r3, r3, #8
 8014200:	697a      	ldr	r2, [r7, #20]
 8014202:	4313      	orrs	r3, r2
 8014204:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8014206:	697b      	ldr	r3, [r7, #20]
 8014208:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 801420c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 801420e:	687b      	ldr	r3, [r7, #4]
 8014210:	4a1c      	ldr	r2, [pc, #112]	@ (8014284 <TIM_OC3_SetConfig+0xfc>)
 8014212:	4293      	cmp	r3, r2
 8014214:	d00f      	beq.n	8014236 <TIM_OC3_SetConfig+0xae>
 8014216:	687b      	ldr	r3, [r7, #4]
 8014218:	4a1b      	ldr	r2, [pc, #108]	@ (8014288 <TIM_OC3_SetConfig+0x100>)
 801421a:	4293      	cmp	r3, r2
 801421c:	d00b      	beq.n	8014236 <TIM_OC3_SetConfig+0xae>
 801421e:	687b      	ldr	r3, [r7, #4]
 8014220:	4a1a      	ldr	r2, [pc, #104]	@ (801428c <TIM_OC3_SetConfig+0x104>)
 8014222:	4293      	cmp	r3, r2
 8014224:	d007      	beq.n	8014236 <TIM_OC3_SetConfig+0xae>
 8014226:	687b      	ldr	r3, [r7, #4]
 8014228:	4a19      	ldr	r2, [pc, #100]	@ (8014290 <TIM_OC3_SetConfig+0x108>)
 801422a:	4293      	cmp	r3, r2
 801422c:	d003      	beq.n	8014236 <TIM_OC3_SetConfig+0xae>
 801422e:	687b      	ldr	r3, [r7, #4]
 8014230:	4a18      	ldr	r2, [pc, #96]	@ (8014294 <TIM_OC3_SetConfig+0x10c>)
 8014232:	4293      	cmp	r3, r2
 8014234:	d113      	bne.n	801425e <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8014236:	693b      	ldr	r3, [r7, #16]
 8014238:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 801423c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 801423e:	693b      	ldr	r3, [r7, #16]
 8014240:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8014244:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8014246:	683b      	ldr	r3, [r7, #0]
 8014248:	695b      	ldr	r3, [r3, #20]
 801424a:	011b      	lsls	r3, r3, #4
 801424c:	693a      	ldr	r2, [r7, #16]
 801424e:	4313      	orrs	r3, r2
 8014250:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8014252:	683b      	ldr	r3, [r7, #0]
 8014254:	699b      	ldr	r3, [r3, #24]
 8014256:	011b      	lsls	r3, r3, #4
 8014258:	693a      	ldr	r2, [r7, #16]
 801425a:	4313      	orrs	r3, r2
 801425c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 801425e:	687b      	ldr	r3, [r7, #4]
 8014260:	693a      	ldr	r2, [r7, #16]
 8014262:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8014264:	687b      	ldr	r3, [r7, #4]
 8014266:	68fa      	ldr	r2, [r7, #12]
 8014268:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 801426a:	683b      	ldr	r3, [r7, #0]
 801426c:	685a      	ldr	r2, [r3, #4]
 801426e:	687b      	ldr	r3, [r7, #4]
 8014270:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8014272:	687b      	ldr	r3, [r7, #4]
 8014274:	697a      	ldr	r2, [r7, #20]
 8014276:	621a      	str	r2, [r3, #32]
}
 8014278:	bf00      	nop
 801427a:	371c      	adds	r7, #28
 801427c:	46bd      	mov	sp, r7
 801427e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014282:	4770      	bx	lr
 8014284:	40012c00 	.word	0x40012c00
 8014288:	40013400 	.word	0x40013400
 801428c:	40014000 	.word	0x40014000
 8014290:	40014400 	.word	0x40014400
 8014294:	40014800 	.word	0x40014800

08014298 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8014298:	b480      	push	{r7}
 801429a:	b087      	sub	sp, #28
 801429c:	af00      	add	r7, sp, #0
 801429e:	6078      	str	r0, [r7, #4]
 80142a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80142a2:	687b      	ldr	r3, [r7, #4]
 80142a4:	6a1b      	ldr	r3, [r3, #32]
 80142a6:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80142a8:	687b      	ldr	r3, [r7, #4]
 80142aa:	6a1b      	ldr	r3, [r3, #32]
 80142ac:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80142b0:	687b      	ldr	r3, [r7, #4]
 80142b2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80142b4:	687b      	ldr	r3, [r7, #4]
 80142b6:	685b      	ldr	r3, [r3, #4]
 80142b8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80142ba:	687b      	ldr	r3, [r7, #4]
 80142bc:	69db      	ldr	r3, [r3, #28]
 80142be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80142c0:	68fb      	ldr	r3, [r7, #12]
 80142c2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80142c6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80142ca:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80142cc:	68fb      	ldr	r3, [r7, #12]
 80142ce:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80142d2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80142d4:	683b      	ldr	r3, [r7, #0]
 80142d6:	681b      	ldr	r3, [r3, #0]
 80142d8:	021b      	lsls	r3, r3, #8
 80142da:	68fa      	ldr	r2, [r7, #12]
 80142dc:	4313      	orrs	r3, r2
 80142de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80142e0:	693b      	ldr	r3, [r7, #16]
 80142e2:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80142e6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80142e8:	683b      	ldr	r3, [r7, #0]
 80142ea:	689b      	ldr	r3, [r3, #8]
 80142ec:	031b      	lsls	r3, r3, #12
 80142ee:	693a      	ldr	r2, [r7, #16]
 80142f0:	4313      	orrs	r3, r2
 80142f2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80142f4:	687b      	ldr	r3, [r7, #4]
 80142f6:	4a18      	ldr	r2, [pc, #96]	@ (8014358 <TIM_OC4_SetConfig+0xc0>)
 80142f8:	4293      	cmp	r3, r2
 80142fa:	d00f      	beq.n	801431c <TIM_OC4_SetConfig+0x84>
 80142fc:	687b      	ldr	r3, [r7, #4]
 80142fe:	4a17      	ldr	r2, [pc, #92]	@ (801435c <TIM_OC4_SetConfig+0xc4>)
 8014300:	4293      	cmp	r3, r2
 8014302:	d00b      	beq.n	801431c <TIM_OC4_SetConfig+0x84>
 8014304:	687b      	ldr	r3, [r7, #4]
 8014306:	4a16      	ldr	r2, [pc, #88]	@ (8014360 <TIM_OC4_SetConfig+0xc8>)
 8014308:	4293      	cmp	r3, r2
 801430a:	d007      	beq.n	801431c <TIM_OC4_SetConfig+0x84>
 801430c:	687b      	ldr	r3, [r7, #4]
 801430e:	4a15      	ldr	r2, [pc, #84]	@ (8014364 <TIM_OC4_SetConfig+0xcc>)
 8014310:	4293      	cmp	r3, r2
 8014312:	d003      	beq.n	801431c <TIM_OC4_SetConfig+0x84>
 8014314:	687b      	ldr	r3, [r7, #4]
 8014316:	4a14      	ldr	r2, [pc, #80]	@ (8014368 <TIM_OC4_SetConfig+0xd0>)
 8014318:	4293      	cmp	r3, r2
 801431a:	d109      	bne.n	8014330 <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 801431c:	697b      	ldr	r3, [r7, #20]
 801431e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8014322:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8014324:	683b      	ldr	r3, [r7, #0]
 8014326:	695b      	ldr	r3, [r3, #20]
 8014328:	019b      	lsls	r3, r3, #6
 801432a:	697a      	ldr	r2, [r7, #20]
 801432c:	4313      	orrs	r3, r2
 801432e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8014330:	687b      	ldr	r3, [r7, #4]
 8014332:	697a      	ldr	r2, [r7, #20]
 8014334:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8014336:	687b      	ldr	r3, [r7, #4]
 8014338:	68fa      	ldr	r2, [r7, #12]
 801433a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 801433c:	683b      	ldr	r3, [r7, #0]
 801433e:	685a      	ldr	r2, [r3, #4]
 8014340:	687b      	ldr	r3, [r7, #4]
 8014342:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8014344:	687b      	ldr	r3, [r7, #4]
 8014346:	693a      	ldr	r2, [r7, #16]
 8014348:	621a      	str	r2, [r3, #32]
}
 801434a:	bf00      	nop
 801434c:	371c      	adds	r7, #28
 801434e:	46bd      	mov	sp, r7
 8014350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014354:	4770      	bx	lr
 8014356:	bf00      	nop
 8014358:	40012c00 	.word	0x40012c00
 801435c:	40013400 	.word	0x40013400
 8014360:	40014000 	.word	0x40014000
 8014364:	40014400 	.word	0x40014400
 8014368:	40014800 	.word	0x40014800

0801436c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 801436c:	b480      	push	{r7}
 801436e:	b087      	sub	sp, #28
 8014370:	af00      	add	r7, sp, #0
 8014372:	6078      	str	r0, [r7, #4]
 8014374:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8014376:	687b      	ldr	r3, [r7, #4]
 8014378:	6a1b      	ldr	r3, [r3, #32]
 801437a:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 801437c:	687b      	ldr	r3, [r7, #4]
 801437e:	6a1b      	ldr	r3, [r3, #32]
 8014380:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8014384:	687b      	ldr	r3, [r7, #4]
 8014386:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8014388:	687b      	ldr	r3, [r7, #4]
 801438a:	685b      	ldr	r3, [r3, #4]
 801438c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 801438e:	687b      	ldr	r3, [r7, #4]
 8014390:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8014392:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8014394:	68fb      	ldr	r3, [r7, #12]
 8014396:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 801439a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 801439e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80143a0:	683b      	ldr	r3, [r7, #0]
 80143a2:	681b      	ldr	r3, [r3, #0]
 80143a4:	68fa      	ldr	r2, [r7, #12]
 80143a6:	4313      	orrs	r3, r2
 80143a8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80143aa:	693b      	ldr	r3, [r7, #16]
 80143ac:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 80143b0:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80143b2:	683b      	ldr	r3, [r7, #0]
 80143b4:	689b      	ldr	r3, [r3, #8]
 80143b6:	041b      	lsls	r3, r3, #16
 80143b8:	693a      	ldr	r2, [r7, #16]
 80143ba:	4313      	orrs	r3, r2
 80143bc:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80143be:	687b      	ldr	r3, [r7, #4]
 80143c0:	4a17      	ldr	r2, [pc, #92]	@ (8014420 <TIM_OC5_SetConfig+0xb4>)
 80143c2:	4293      	cmp	r3, r2
 80143c4:	d00f      	beq.n	80143e6 <TIM_OC5_SetConfig+0x7a>
 80143c6:	687b      	ldr	r3, [r7, #4]
 80143c8:	4a16      	ldr	r2, [pc, #88]	@ (8014424 <TIM_OC5_SetConfig+0xb8>)
 80143ca:	4293      	cmp	r3, r2
 80143cc:	d00b      	beq.n	80143e6 <TIM_OC5_SetConfig+0x7a>
 80143ce:	687b      	ldr	r3, [r7, #4]
 80143d0:	4a15      	ldr	r2, [pc, #84]	@ (8014428 <TIM_OC5_SetConfig+0xbc>)
 80143d2:	4293      	cmp	r3, r2
 80143d4:	d007      	beq.n	80143e6 <TIM_OC5_SetConfig+0x7a>
 80143d6:	687b      	ldr	r3, [r7, #4]
 80143d8:	4a14      	ldr	r2, [pc, #80]	@ (801442c <TIM_OC5_SetConfig+0xc0>)
 80143da:	4293      	cmp	r3, r2
 80143dc:	d003      	beq.n	80143e6 <TIM_OC5_SetConfig+0x7a>
 80143de:	687b      	ldr	r3, [r7, #4]
 80143e0:	4a13      	ldr	r2, [pc, #76]	@ (8014430 <TIM_OC5_SetConfig+0xc4>)
 80143e2:	4293      	cmp	r3, r2
 80143e4:	d109      	bne.n	80143fa <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80143e6:	697b      	ldr	r3, [r7, #20]
 80143e8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80143ec:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80143ee:	683b      	ldr	r3, [r7, #0]
 80143f0:	695b      	ldr	r3, [r3, #20]
 80143f2:	021b      	lsls	r3, r3, #8
 80143f4:	697a      	ldr	r2, [r7, #20]
 80143f6:	4313      	orrs	r3, r2
 80143f8:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80143fa:	687b      	ldr	r3, [r7, #4]
 80143fc:	697a      	ldr	r2, [r7, #20]
 80143fe:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8014400:	687b      	ldr	r3, [r7, #4]
 8014402:	68fa      	ldr	r2, [r7, #12]
 8014404:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8014406:	683b      	ldr	r3, [r7, #0]
 8014408:	685a      	ldr	r2, [r3, #4]
 801440a:	687b      	ldr	r3, [r7, #4]
 801440c:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 801440e:	687b      	ldr	r3, [r7, #4]
 8014410:	693a      	ldr	r2, [r7, #16]
 8014412:	621a      	str	r2, [r3, #32]
}
 8014414:	bf00      	nop
 8014416:	371c      	adds	r7, #28
 8014418:	46bd      	mov	sp, r7
 801441a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801441e:	4770      	bx	lr
 8014420:	40012c00 	.word	0x40012c00
 8014424:	40013400 	.word	0x40013400
 8014428:	40014000 	.word	0x40014000
 801442c:	40014400 	.word	0x40014400
 8014430:	40014800 	.word	0x40014800

08014434 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8014434:	b480      	push	{r7}
 8014436:	b087      	sub	sp, #28
 8014438:	af00      	add	r7, sp, #0
 801443a:	6078      	str	r0, [r7, #4]
 801443c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 801443e:	687b      	ldr	r3, [r7, #4]
 8014440:	6a1b      	ldr	r3, [r3, #32]
 8014442:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8014444:	687b      	ldr	r3, [r7, #4]
 8014446:	6a1b      	ldr	r3, [r3, #32]
 8014448:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 801444c:	687b      	ldr	r3, [r7, #4]
 801444e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8014450:	687b      	ldr	r3, [r7, #4]
 8014452:	685b      	ldr	r3, [r3, #4]
 8014454:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8014456:	687b      	ldr	r3, [r7, #4]
 8014458:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801445a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 801445c:	68fb      	ldr	r3, [r7, #12]
 801445e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8014462:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8014466:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8014468:	683b      	ldr	r3, [r7, #0]
 801446a:	681b      	ldr	r3, [r3, #0]
 801446c:	021b      	lsls	r3, r3, #8
 801446e:	68fa      	ldr	r2, [r7, #12]
 8014470:	4313      	orrs	r3, r2
 8014472:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8014474:	693b      	ldr	r3, [r7, #16]
 8014476:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 801447a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 801447c:	683b      	ldr	r3, [r7, #0]
 801447e:	689b      	ldr	r3, [r3, #8]
 8014480:	051b      	lsls	r3, r3, #20
 8014482:	693a      	ldr	r2, [r7, #16]
 8014484:	4313      	orrs	r3, r2
 8014486:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8014488:	687b      	ldr	r3, [r7, #4]
 801448a:	4a18      	ldr	r2, [pc, #96]	@ (80144ec <TIM_OC6_SetConfig+0xb8>)
 801448c:	4293      	cmp	r3, r2
 801448e:	d00f      	beq.n	80144b0 <TIM_OC6_SetConfig+0x7c>
 8014490:	687b      	ldr	r3, [r7, #4]
 8014492:	4a17      	ldr	r2, [pc, #92]	@ (80144f0 <TIM_OC6_SetConfig+0xbc>)
 8014494:	4293      	cmp	r3, r2
 8014496:	d00b      	beq.n	80144b0 <TIM_OC6_SetConfig+0x7c>
 8014498:	687b      	ldr	r3, [r7, #4]
 801449a:	4a16      	ldr	r2, [pc, #88]	@ (80144f4 <TIM_OC6_SetConfig+0xc0>)
 801449c:	4293      	cmp	r3, r2
 801449e:	d007      	beq.n	80144b0 <TIM_OC6_SetConfig+0x7c>
 80144a0:	687b      	ldr	r3, [r7, #4]
 80144a2:	4a15      	ldr	r2, [pc, #84]	@ (80144f8 <TIM_OC6_SetConfig+0xc4>)
 80144a4:	4293      	cmp	r3, r2
 80144a6:	d003      	beq.n	80144b0 <TIM_OC6_SetConfig+0x7c>
 80144a8:	687b      	ldr	r3, [r7, #4]
 80144aa:	4a14      	ldr	r2, [pc, #80]	@ (80144fc <TIM_OC6_SetConfig+0xc8>)
 80144ac:	4293      	cmp	r3, r2
 80144ae:	d109      	bne.n	80144c4 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80144b0:	697b      	ldr	r3, [r7, #20]
 80144b2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80144b6:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80144b8:	683b      	ldr	r3, [r7, #0]
 80144ba:	695b      	ldr	r3, [r3, #20]
 80144bc:	029b      	lsls	r3, r3, #10
 80144be:	697a      	ldr	r2, [r7, #20]
 80144c0:	4313      	orrs	r3, r2
 80144c2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80144c4:	687b      	ldr	r3, [r7, #4]
 80144c6:	697a      	ldr	r2, [r7, #20]
 80144c8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80144ca:	687b      	ldr	r3, [r7, #4]
 80144cc:	68fa      	ldr	r2, [r7, #12]
 80144ce:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80144d0:	683b      	ldr	r3, [r7, #0]
 80144d2:	685a      	ldr	r2, [r3, #4]
 80144d4:	687b      	ldr	r3, [r7, #4]
 80144d6:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80144d8:	687b      	ldr	r3, [r7, #4]
 80144da:	693a      	ldr	r2, [r7, #16]
 80144dc:	621a      	str	r2, [r3, #32]
}
 80144de:	bf00      	nop
 80144e0:	371c      	adds	r7, #28
 80144e2:	46bd      	mov	sp, r7
 80144e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80144e8:	4770      	bx	lr
 80144ea:	bf00      	nop
 80144ec:	40012c00 	.word	0x40012c00
 80144f0:	40013400 	.word	0x40013400
 80144f4:	40014000 	.word	0x40014000
 80144f8:	40014400 	.word	0x40014400
 80144fc:	40014800 	.word	0x40014800

08014500 <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8014500:	b580      	push	{r7, lr}
 8014502:	b086      	sub	sp, #24
 8014504:	af00      	add	r7, sp, #0
 8014506:	6078      	str	r0, [r7, #4]
 8014508:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 801450a:	2300      	movs	r3, #0
 801450c:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 801450e:	687b      	ldr	r3, [r7, #4]
 8014510:	681b      	ldr	r3, [r3, #0]
 8014512:	689b      	ldr	r3, [r3, #8]
 8014514:	613b      	str	r3, [r7, #16]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8014516:	693b      	ldr	r3, [r7, #16]
 8014518:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 801451c:	613b      	str	r3, [r7, #16]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 801451e:	683b      	ldr	r3, [r7, #0]
 8014520:	685b      	ldr	r3, [r3, #4]
 8014522:	693a      	ldr	r2, [r7, #16]
 8014524:	4313      	orrs	r3, r2
 8014526:	613b      	str	r3, [r7, #16]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 8014528:	693b      	ldr	r3, [r7, #16]
 801452a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 801452e:	f023 0307 	bic.w	r3, r3, #7
 8014532:	613b      	str	r3, [r7, #16]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 8014534:	683b      	ldr	r3, [r7, #0]
 8014536:	681b      	ldr	r3, [r3, #0]
 8014538:	693a      	ldr	r2, [r7, #16]
 801453a:	4313      	orrs	r3, r2
 801453c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 801453e:	687b      	ldr	r3, [r7, #4]
 8014540:	681b      	ldr	r3, [r3, #0]
 8014542:	693a      	ldr	r2, [r7, #16]
 8014544:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 8014546:	683b      	ldr	r3, [r7, #0]
 8014548:	685b      	ldr	r3, [r3, #4]
 801454a:	2b70      	cmp	r3, #112	@ 0x70
 801454c:	d01a      	beq.n	8014584 <TIM_SlaveTimer_SetConfig+0x84>
 801454e:	2b70      	cmp	r3, #112	@ 0x70
 8014550:	d860      	bhi.n	8014614 <TIM_SlaveTimer_SetConfig+0x114>
 8014552:	2b60      	cmp	r3, #96	@ 0x60
 8014554:	d054      	beq.n	8014600 <TIM_SlaveTimer_SetConfig+0x100>
 8014556:	2b60      	cmp	r3, #96	@ 0x60
 8014558:	d85c      	bhi.n	8014614 <TIM_SlaveTimer_SetConfig+0x114>
 801455a:	2b50      	cmp	r3, #80	@ 0x50
 801455c:	d046      	beq.n	80145ec <TIM_SlaveTimer_SetConfig+0xec>
 801455e:	2b50      	cmp	r3, #80	@ 0x50
 8014560:	d858      	bhi.n	8014614 <TIM_SlaveTimer_SetConfig+0x114>
 8014562:	2b40      	cmp	r3, #64	@ 0x40
 8014564:	d019      	beq.n	801459a <TIM_SlaveTimer_SetConfig+0x9a>
 8014566:	2b40      	cmp	r3, #64	@ 0x40
 8014568:	d854      	bhi.n	8014614 <TIM_SlaveTimer_SetConfig+0x114>
 801456a:	2b30      	cmp	r3, #48	@ 0x30
 801456c:	d055      	beq.n	801461a <TIM_SlaveTimer_SetConfig+0x11a>
 801456e:	2b30      	cmp	r3, #48	@ 0x30
 8014570:	d850      	bhi.n	8014614 <TIM_SlaveTimer_SetConfig+0x114>
 8014572:	2b20      	cmp	r3, #32
 8014574:	d051      	beq.n	801461a <TIM_SlaveTimer_SetConfig+0x11a>
 8014576:	2b20      	cmp	r3, #32
 8014578:	d84c      	bhi.n	8014614 <TIM_SlaveTimer_SetConfig+0x114>
 801457a:	2b00      	cmp	r3, #0
 801457c:	d04d      	beq.n	801461a <TIM_SlaveTimer_SetConfig+0x11a>
 801457e:	2b10      	cmp	r3, #16
 8014580:	d04b      	beq.n	801461a <TIM_SlaveTimer_SetConfig+0x11a>
 8014582:	e047      	b.n	8014614 <TIM_SlaveTimer_SetConfig+0x114>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPRESCALER(sSlaveConfig->TriggerPrescaler));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
      /* Configure the ETR Trigger source */
      TIM_ETR_SetConfig(htim->Instance,
 8014584:	687b      	ldr	r3, [r7, #4]
 8014586:	6818      	ldr	r0, [r3, #0]
                        sSlaveConfig->TriggerPrescaler,
 8014588:	683b      	ldr	r3, [r7, #0]
 801458a:	68d9      	ldr	r1, [r3, #12]
                        sSlaveConfig->TriggerPolarity,
 801458c:	683b      	ldr	r3, [r7, #0]
 801458e:	689a      	ldr	r2, [r3, #8]
                        sSlaveConfig->TriggerFilter);
 8014590:	683b      	ldr	r3, [r7, #0]
 8014592:	691b      	ldr	r3, [r3, #16]
      TIM_ETR_SetConfig(htim->Instance,
 8014594:	f000 f9e6 	bl	8014964 <TIM_ETR_SetConfig>
      break;
 8014598:	e040      	b.n	801461c <TIM_SlaveTimer_SetConfig+0x11c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      if (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 801459a:	683b      	ldr	r3, [r7, #0]
 801459c:	681b      	ldr	r3, [r3, #0]
 801459e:	2b05      	cmp	r3, #5
 80145a0:	d101      	bne.n	80145a6 <TIM_SlaveTimer_SetConfig+0xa6>
      {
        return HAL_ERROR;
 80145a2:	2301      	movs	r3, #1
 80145a4:	e03b      	b.n	801461e <TIM_SlaveTimer_SetConfig+0x11e>
      }

      /* Disable the Channel 1: Reset the CC1E Bit */
      tmpccer = htim->Instance->CCER;
 80145a6:	687b      	ldr	r3, [r7, #4]
 80145a8:	681b      	ldr	r3, [r3, #0]
 80145aa:	6a1b      	ldr	r3, [r3, #32]
 80145ac:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 80145ae:	687b      	ldr	r3, [r7, #4]
 80145b0:	681b      	ldr	r3, [r3, #0]
 80145b2:	6a1a      	ldr	r2, [r3, #32]
 80145b4:	687b      	ldr	r3, [r7, #4]
 80145b6:	681b      	ldr	r3, [r3, #0]
 80145b8:	f022 0201 	bic.w	r2, r2, #1
 80145bc:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 80145be:	687b      	ldr	r3, [r7, #4]
 80145c0:	681b      	ldr	r3, [r3, #0]
 80145c2:	699b      	ldr	r3, [r3, #24]
 80145c4:	60bb      	str	r3, [r7, #8]

      /* Set the filter */
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80145c6:	68bb      	ldr	r3, [r7, #8]
 80145c8:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80145cc:	60bb      	str	r3, [r7, #8]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 80145ce:	683b      	ldr	r3, [r7, #0]
 80145d0:	691b      	ldr	r3, [r3, #16]
 80145d2:	011b      	lsls	r3, r3, #4
 80145d4:	68ba      	ldr	r2, [r7, #8]
 80145d6:	4313      	orrs	r3, r2
 80145d8:	60bb      	str	r3, [r7, #8]

      /* Write to TIMx CCMR1 and CCER registers */
      htim->Instance->CCMR1 = tmpccmr1;
 80145da:	687b      	ldr	r3, [r7, #4]
 80145dc:	681b      	ldr	r3, [r3, #0]
 80145de:	68ba      	ldr	r2, [r7, #8]
 80145e0:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 80145e2:	687b      	ldr	r3, [r7, #4]
 80145e4:	681b      	ldr	r3, [r3, #0]
 80145e6:	68fa      	ldr	r2, [r7, #12]
 80145e8:	621a      	str	r2, [r3, #32]
      break;
 80145ea:	e017      	b.n	801461c <TIM_SlaveTimer_SetConfig+0x11c>
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI1 Filter and Polarity */
      TIM_TI1_ConfigInputStage(htim->Instance,
 80145ec:	687b      	ldr	r3, [r7, #4]
 80145ee:	6818      	ldr	r0, [r3, #0]
                               sSlaveConfig->TriggerPolarity,
 80145f0:	683b      	ldr	r3, [r7, #0]
 80145f2:	6899      	ldr	r1, [r3, #8]
                               sSlaveConfig->TriggerFilter);
 80145f4:	683b      	ldr	r3, [r7, #0]
 80145f6:	691b      	ldr	r3, [r3, #16]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80145f8:	461a      	mov	r2, r3
 80145fa:	f000 f883 	bl	8014704 <TIM_TI1_ConfigInputStage>
      break;
 80145fe:	e00d      	b.n	801461c <TIM_SlaveTimer_SetConfig+0x11c>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI2 Filter and Polarity */
      TIM_TI2_ConfigInputStage(htim->Instance,
 8014600:	687b      	ldr	r3, [r7, #4]
 8014602:	6818      	ldr	r0, [r3, #0]
                               sSlaveConfig->TriggerPolarity,
 8014604:	683b      	ldr	r3, [r7, #0]
 8014606:	6899      	ldr	r1, [r3, #8]
                               sSlaveConfig->TriggerFilter);
 8014608:	683b      	ldr	r3, [r7, #0]
 801460a:	691b      	ldr	r3, [r3, #16]
      TIM_TI2_ConfigInputStage(htim->Instance,
 801460c:	461a      	mov	r2, r3
 801460e:	f000 f8e5 	bl	80147dc <TIM_TI2_ConfigInputStage>
      break;
 8014612:	e003      	b.n	801461c <TIM_SlaveTimer_SetConfig+0x11c>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      break;
    }

    default:
      status = HAL_ERROR;
 8014614:	2301      	movs	r3, #1
 8014616:	75fb      	strb	r3, [r7, #23]
      break;
 8014618:	e000      	b.n	801461c <TIM_SlaveTimer_SetConfig+0x11c>
      break;
 801461a:	bf00      	nop
  }

  return status;
 801461c:	7dfb      	ldrb	r3, [r7, #23]
}
 801461e:	4618      	mov	r0, r3
 8014620:	3718      	adds	r7, #24
 8014622:	46bd      	mov	sp, r7
 8014624:	bd80      	pop	{r7, pc}
	...

08014628 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8014628:	b480      	push	{r7}
 801462a:	b087      	sub	sp, #28
 801462c:	af00      	add	r7, sp, #0
 801462e:	60f8      	str	r0, [r7, #12]
 8014630:	60b9      	str	r1, [r7, #8]
 8014632:	607a      	str	r2, [r7, #4]
 8014634:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8014636:	68fb      	ldr	r3, [r7, #12]
 8014638:	6a1b      	ldr	r3, [r3, #32]
 801463a:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 801463c:	68fb      	ldr	r3, [r7, #12]
 801463e:	6a1b      	ldr	r3, [r3, #32]
 8014640:	f023 0201 	bic.w	r2, r3, #1
 8014644:	68fb      	ldr	r3, [r7, #12]
 8014646:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8014648:	68fb      	ldr	r3, [r7, #12]
 801464a:	699b      	ldr	r3, [r3, #24]
 801464c:	617b      	str	r3, [r7, #20]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 801464e:	68fb      	ldr	r3, [r7, #12]
 8014650:	4a26      	ldr	r2, [pc, #152]	@ (80146ec <TIM_TI1_SetConfig+0xc4>)
 8014652:	4293      	cmp	r3, r2
 8014654:	d017      	beq.n	8014686 <TIM_TI1_SetConfig+0x5e>
 8014656:	68fb      	ldr	r3, [r7, #12]
 8014658:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 801465c:	d013      	beq.n	8014686 <TIM_TI1_SetConfig+0x5e>
 801465e:	68fb      	ldr	r3, [r7, #12]
 8014660:	4a23      	ldr	r2, [pc, #140]	@ (80146f0 <TIM_TI1_SetConfig+0xc8>)
 8014662:	4293      	cmp	r3, r2
 8014664:	d00f      	beq.n	8014686 <TIM_TI1_SetConfig+0x5e>
 8014666:	68fb      	ldr	r3, [r7, #12]
 8014668:	4a22      	ldr	r2, [pc, #136]	@ (80146f4 <TIM_TI1_SetConfig+0xcc>)
 801466a:	4293      	cmp	r3, r2
 801466c:	d00b      	beq.n	8014686 <TIM_TI1_SetConfig+0x5e>
 801466e:	68fb      	ldr	r3, [r7, #12]
 8014670:	4a21      	ldr	r2, [pc, #132]	@ (80146f8 <TIM_TI1_SetConfig+0xd0>)
 8014672:	4293      	cmp	r3, r2
 8014674:	d007      	beq.n	8014686 <TIM_TI1_SetConfig+0x5e>
 8014676:	68fb      	ldr	r3, [r7, #12]
 8014678:	4a20      	ldr	r2, [pc, #128]	@ (80146fc <TIM_TI1_SetConfig+0xd4>)
 801467a:	4293      	cmp	r3, r2
 801467c:	d003      	beq.n	8014686 <TIM_TI1_SetConfig+0x5e>
 801467e:	68fb      	ldr	r3, [r7, #12]
 8014680:	4a1f      	ldr	r2, [pc, #124]	@ (8014700 <TIM_TI1_SetConfig+0xd8>)
 8014682:	4293      	cmp	r3, r2
 8014684:	d101      	bne.n	801468a <TIM_TI1_SetConfig+0x62>
 8014686:	2301      	movs	r3, #1
 8014688:	e000      	b.n	801468c <TIM_TI1_SetConfig+0x64>
 801468a:	2300      	movs	r3, #0
 801468c:	2b00      	cmp	r3, #0
 801468e:	d008      	beq.n	80146a2 <TIM_TI1_SetConfig+0x7a>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8014690:	697b      	ldr	r3, [r7, #20]
 8014692:	f023 0303 	bic.w	r3, r3, #3
 8014696:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8014698:	697a      	ldr	r2, [r7, #20]
 801469a:	687b      	ldr	r3, [r7, #4]
 801469c:	4313      	orrs	r3, r2
 801469e:	617b      	str	r3, [r7, #20]
 80146a0:	e003      	b.n	80146aa <TIM_TI1_SetConfig+0x82>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 80146a2:	697b      	ldr	r3, [r7, #20]
 80146a4:	f043 0301 	orr.w	r3, r3, #1
 80146a8:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80146aa:	697b      	ldr	r3, [r7, #20]
 80146ac:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80146b0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 80146b2:	683b      	ldr	r3, [r7, #0]
 80146b4:	011b      	lsls	r3, r3, #4
 80146b6:	b2db      	uxtb	r3, r3
 80146b8:	697a      	ldr	r2, [r7, #20]
 80146ba:	4313      	orrs	r3, r2
 80146bc:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80146be:	693b      	ldr	r3, [r7, #16]
 80146c0:	f023 030a 	bic.w	r3, r3, #10
 80146c4:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 80146c6:	68bb      	ldr	r3, [r7, #8]
 80146c8:	f003 030a 	and.w	r3, r3, #10
 80146cc:	693a      	ldr	r2, [r7, #16]
 80146ce:	4313      	orrs	r3, r2
 80146d0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80146d2:	68fb      	ldr	r3, [r7, #12]
 80146d4:	697a      	ldr	r2, [r7, #20]
 80146d6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80146d8:	68fb      	ldr	r3, [r7, #12]
 80146da:	693a      	ldr	r2, [r7, #16]
 80146dc:	621a      	str	r2, [r3, #32]
}
 80146de:	bf00      	nop
 80146e0:	371c      	adds	r7, #28
 80146e2:	46bd      	mov	sp, r7
 80146e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80146e8:	4770      	bx	lr
 80146ea:	bf00      	nop
 80146ec:	40012c00 	.word	0x40012c00
 80146f0:	40000400 	.word	0x40000400
 80146f4:	40000800 	.word	0x40000800
 80146f8:	40000c00 	.word	0x40000c00
 80146fc:	40013400 	.word	0x40013400
 8014700:	40014000 	.word	0x40014000

08014704 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8014704:	b480      	push	{r7}
 8014706:	b087      	sub	sp, #28
 8014708:	af00      	add	r7, sp, #0
 801470a:	60f8      	str	r0, [r7, #12]
 801470c:	60b9      	str	r1, [r7, #8]
 801470e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8014710:	68fb      	ldr	r3, [r7, #12]
 8014712:	6a1b      	ldr	r3, [r3, #32]
 8014714:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8014716:	68fb      	ldr	r3, [r7, #12]
 8014718:	6a1b      	ldr	r3, [r3, #32]
 801471a:	f023 0201 	bic.w	r2, r3, #1
 801471e:	68fb      	ldr	r3, [r7, #12]
 8014720:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8014722:	68fb      	ldr	r3, [r7, #12]
 8014724:	699b      	ldr	r3, [r3, #24]
 8014726:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8014728:	693b      	ldr	r3, [r7, #16]
 801472a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 801472e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8014730:	687b      	ldr	r3, [r7, #4]
 8014732:	011b      	lsls	r3, r3, #4
 8014734:	693a      	ldr	r2, [r7, #16]
 8014736:	4313      	orrs	r3, r2
 8014738:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 801473a:	697b      	ldr	r3, [r7, #20]
 801473c:	f023 030a 	bic.w	r3, r3, #10
 8014740:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8014742:	697a      	ldr	r2, [r7, #20]
 8014744:	68bb      	ldr	r3, [r7, #8]
 8014746:	4313      	orrs	r3, r2
 8014748:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 801474a:	68fb      	ldr	r3, [r7, #12]
 801474c:	693a      	ldr	r2, [r7, #16]
 801474e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8014750:	68fb      	ldr	r3, [r7, #12]
 8014752:	697a      	ldr	r2, [r7, #20]
 8014754:	621a      	str	r2, [r3, #32]
}
 8014756:	bf00      	nop
 8014758:	371c      	adds	r7, #28
 801475a:	46bd      	mov	sp, r7
 801475c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014760:	4770      	bx	lr

08014762 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8014762:	b480      	push	{r7}
 8014764:	b087      	sub	sp, #28
 8014766:	af00      	add	r7, sp, #0
 8014768:	60f8      	str	r0, [r7, #12]
 801476a:	60b9      	str	r1, [r7, #8]
 801476c:	607a      	str	r2, [r7, #4]
 801476e:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8014770:	68fb      	ldr	r3, [r7, #12]
 8014772:	6a1b      	ldr	r3, [r3, #32]
 8014774:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8014776:	68fb      	ldr	r3, [r7, #12]
 8014778:	6a1b      	ldr	r3, [r3, #32]
 801477a:	f023 0210 	bic.w	r2, r3, #16
 801477e:	68fb      	ldr	r3, [r7, #12]
 8014780:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8014782:	68fb      	ldr	r3, [r7, #12]
 8014784:	699b      	ldr	r3, [r3, #24]
 8014786:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8014788:	693b      	ldr	r3, [r7, #16]
 801478a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 801478e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8014790:	687b      	ldr	r3, [r7, #4]
 8014792:	021b      	lsls	r3, r3, #8
 8014794:	693a      	ldr	r2, [r7, #16]
 8014796:	4313      	orrs	r3, r2
 8014798:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 801479a:	693b      	ldr	r3, [r7, #16]
 801479c:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80147a0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 80147a2:	683b      	ldr	r3, [r7, #0]
 80147a4:	031b      	lsls	r3, r3, #12
 80147a6:	b29b      	uxth	r3, r3
 80147a8:	693a      	ldr	r2, [r7, #16]
 80147aa:	4313      	orrs	r3, r2
 80147ac:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80147ae:	697b      	ldr	r3, [r7, #20]
 80147b0:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80147b4:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 80147b6:	68bb      	ldr	r3, [r7, #8]
 80147b8:	011b      	lsls	r3, r3, #4
 80147ba:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
 80147be:	697a      	ldr	r2, [r7, #20]
 80147c0:	4313      	orrs	r3, r2
 80147c2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80147c4:	68fb      	ldr	r3, [r7, #12]
 80147c6:	693a      	ldr	r2, [r7, #16]
 80147c8:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80147ca:	68fb      	ldr	r3, [r7, #12]
 80147cc:	697a      	ldr	r2, [r7, #20]
 80147ce:	621a      	str	r2, [r3, #32]
}
 80147d0:	bf00      	nop
 80147d2:	371c      	adds	r7, #28
 80147d4:	46bd      	mov	sp, r7
 80147d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80147da:	4770      	bx	lr

080147dc <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80147dc:	b480      	push	{r7}
 80147de:	b087      	sub	sp, #28
 80147e0:	af00      	add	r7, sp, #0
 80147e2:	60f8      	str	r0, [r7, #12]
 80147e4:	60b9      	str	r1, [r7, #8]
 80147e6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80147e8:	68fb      	ldr	r3, [r7, #12]
 80147ea:	6a1b      	ldr	r3, [r3, #32]
 80147ec:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80147ee:	68fb      	ldr	r3, [r7, #12]
 80147f0:	6a1b      	ldr	r3, [r3, #32]
 80147f2:	f023 0210 	bic.w	r2, r3, #16
 80147f6:	68fb      	ldr	r3, [r7, #12]
 80147f8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80147fa:	68fb      	ldr	r3, [r7, #12]
 80147fc:	699b      	ldr	r3, [r3, #24]
 80147fe:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8014800:	693b      	ldr	r3, [r7, #16]
 8014802:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8014806:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8014808:	687b      	ldr	r3, [r7, #4]
 801480a:	031b      	lsls	r3, r3, #12
 801480c:	693a      	ldr	r2, [r7, #16]
 801480e:	4313      	orrs	r3, r2
 8014810:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8014812:	697b      	ldr	r3, [r7, #20]
 8014814:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8014818:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 801481a:	68bb      	ldr	r3, [r7, #8]
 801481c:	011b      	lsls	r3, r3, #4
 801481e:	697a      	ldr	r2, [r7, #20]
 8014820:	4313      	orrs	r3, r2
 8014822:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8014824:	68fb      	ldr	r3, [r7, #12]
 8014826:	693a      	ldr	r2, [r7, #16]
 8014828:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 801482a:	68fb      	ldr	r3, [r7, #12]
 801482c:	697a      	ldr	r2, [r7, #20]
 801482e:	621a      	str	r2, [r3, #32]
}
 8014830:	bf00      	nop
 8014832:	371c      	adds	r7, #28
 8014834:	46bd      	mov	sp, r7
 8014836:	f85d 7b04 	ldr.w	r7, [sp], #4
 801483a:	4770      	bx	lr

0801483c <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 801483c:	b480      	push	{r7}
 801483e:	b087      	sub	sp, #28
 8014840:	af00      	add	r7, sp, #0
 8014842:	60f8      	str	r0, [r7, #12]
 8014844:	60b9      	str	r1, [r7, #8]
 8014846:	607a      	str	r2, [r7, #4]
 8014848:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  tmpccer = TIMx->CCER;
 801484a:	68fb      	ldr	r3, [r7, #12]
 801484c:	6a1b      	ldr	r3, [r3, #32]
 801484e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8014850:	68fb      	ldr	r3, [r7, #12]
 8014852:	6a1b      	ldr	r3, [r3, #32]
 8014854:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8014858:	68fb      	ldr	r3, [r7, #12]
 801485a:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 801485c:	68fb      	ldr	r3, [r7, #12]
 801485e:	69db      	ldr	r3, [r3, #28]
 8014860:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8014862:	693b      	ldr	r3, [r7, #16]
 8014864:	f023 0303 	bic.w	r3, r3, #3
 8014868:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= TIM_ICSelection;
 801486a:	693a      	ldr	r2, [r7, #16]
 801486c:	687b      	ldr	r3, [r7, #4]
 801486e:	4313      	orrs	r3, r2
 8014870:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8014872:	693b      	ldr	r3, [r7, #16]
 8014874:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8014878:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 801487a:	683b      	ldr	r3, [r7, #0]
 801487c:	011b      	lsls	r3, r3, #4
 801487e:	b2db      	uxtb	r3, r3
 8014880:	693a      	ldr	r2, [r7, #16]
 8014882:	4313      	orrs	r3, r2
 8014884:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8014886:	697b      	ldr	r3, [r7, #20]
 8014888:	f423 6320 	bic.w	r3, r3, #2560	@ 0xa00
 801488c:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 801488e:	68bb      	ldr	r3, [r7, #8]
 8014890:	021b      	lsls	r3, r3, #8
 8014892:	f403 6320 	and.w	r3, r3, #2560	@ 0xa00
 8014896:	697a      	ldr	r2, [r7, #20]
 8014898:	4313      	orrs	r3, r2
 801489a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 801489c:	68fb      	ldr	r3, [r7, #12]
 801489e:	693a      	ldr	r2, [r7, #16]
 80148a0:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 80148a2:	68fb      	ldr	r3, [r7, #12]
 80148a4:	697a      	ldr	r2, [r7, #20]
 80148a6:	621a      	str	r2, [r3, #32]
}
 80148a8:	bf00      	nop
 80148aa:	371c      	adds	r7, #28
 80148ac:	46bd      	mov	sp, r7
 80148ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80148b2:	4770      	bx	lr

080148b4 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80148b4:	b480      	push	{r7}
 80148b6:	b087      	sub	sp, #28
 80148b8:	af00      	add	r7, sp, #0
 80148ba:	60f8      	str	r0, [r7, #12]
 80148bc:	60b9      	str	r1, [r7, #8]
 80148be:	607a      	str	r2, [r7, #4]
 80148c0:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  tmpccer = TIMx->CCER;
 80148c2:	68fb      	ldr	r3, [r7, #12]
 80148c4:	6a1b      	ldr	r3, [r3, #32]
 80148c6:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80148c8:	68fb      	ldr	r3, [r7, #12]
 80148ca:	6a1b      	ldr	r3, [r3, #32]
 80148cc:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80148d0:	68fb      	ldr	r3, [r7, #12]
 80148d2:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80148d4:	68fb      	ldr	r3, [r7, #12]
 80148d6:	69db      	ldr	r3, [r3, #28]
 80148d8:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 80148da:	693b      	ldr	r3, [r7, #16]
 80148dc:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80148e0:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 80148e2:	687b      	ldr	r3, [r7, #4]
 80148e4:	021b      	lsls	r3, r3, #8
 80148e6:	693a      	ldr	r2, [r7, #16]
 80148e8:	4313      	orrs	r3, r2
 80148ea:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 80148ec:	693b      	ldr	r3, [r7, #16]
 80148ee:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80148f2:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 80148f4:	683b      	ldr	r3, [r7, #0]
 80148f6:	031b      	lsls	r3, r3, #12
 80148f8:	b29b      	uxth	r3, r3
 80148fa:	693a      	ldr	r2, [r7, #16]
 80148fc:	4313      	orrs	r3, r2
 80148fe:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8014900:	697b      	ldr	r3, [r7, #20]
 8014902:	f423 4320 	bic.w	r3, r3, #40960	@ 0xa000
 8014906:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8014908:	68bb      	ldr	r3, [r7, #8]
 801490a:	031b      	lsls	r3, r3, #12
 801490c:	f403 4320 	and.w	r3, r3, #40960	@ 0xa000
 8014910:	697a      	ldr	r2, [r7, #20]
 8014912:	4313      	orrs	r3, r2
 8014914:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8014916:	68fb      	ldr	r3, [r7, #12]
 8014918:	693a      	ldr	r2, [r7, #16]
 801491a:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 801491c:	68fb      	ldr	r3, [r7, #12]
 801491e:	697a      	ldr	r2, [r7, #20]
 8014920:	621a      	str	r2, [r3, #32]
}
 8014922:	bf00      	nop
 8014924:	371c      	adds	r7, #28
 8014926:	46bd      	mov	sp, r7
 8014928:	f85d 7b04 	ldr.w	r7, [sp], #4
 801492c:	4770      	bx	lr

0801492e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 801492e:	b480      	push	{r7}
 8014930:	b085      	sub	sp, #20
 8014932:	af00      	add	r7, sp, #0
 8014934:	6078      	str	r0, [r7, #4]
 8014936:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8014938:	687b      	ldr	r3, [r7, #4]
 801493a:	689b      	ldr	r3, [r3, #8]
 801493c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 801493e:	68fb      	ldr	r3, [r7, #12]
 8014940:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8014944:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8014946:	683a      	ldr	r2, [r7, #0]
 8014948:	68fb      	ldr	r3, [r7, #12]
 801494a:	4313      	orrs	r3, r2
 801494c:	f043 0307 	orr.w	r3, r3, #7
 8014950:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8014952:	687b      	ldr	r3, [r7, #4]
 8014954:	68fa      	ldr	r2, [r7, #12]
 8014956:	609a      	str	r2, [r3, #8]
}
 8014958:	bf00      	nop
 801495a:	3714      	adds	r7, #20
 801495c:	46bd      	mov	sp, r7
 801495e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014962:	4770      	bx	lr

08014964 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8014964:	b480      	push	{r7}
 8014966:	b087      	sub	sp, #28
 8014968:	af00      	add	r7, sp, #0
 801496a:	60f8      	str	r0, [r7, #12]
 801496c:	60b9      	str	r1, [r7, #8]
 801496e:	607a      	str	r2, [r7, #4]
 8014970:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8014972:	68fb      	ldr	r3, [r7, #12]
 8014974:	689b      	ldr	r3, [r3, #8]
 8014976:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8014978:	697b      	ldr	r3, [r7, #20]
 801497a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 801497e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8014980:	683b      	ldr	r3, [r7, #0]
 8014982:	021a      	lsls	r2, r3, #8
 8014984:	687b      	ldr	r3, [r7, #4]
 8014986:	431a      	orrs	r2, r3
 8014988:	68bb      	ldr	r3, [r7, #8]
 801498a:	4313      	orrs	r3, r2
 801498c:	697a      	ldr	r2, [r7, #20]
 801498e:	4313      	orrs	r3, r2
 8014990:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8014992:	68fb      	ldr	r3, [r7, #12]
 8014994:	697a      	ldr	r2, [r7, #20]
 8014996:	609a      	str	r2, [r3, #8]
}
 8014998:	bf00      	nop
 801499a:	371c      	adds	r7, #28
 801499c:	46bd      	mov	sp, r7
 801499e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80149a2:	4770      	bx	lr

080149a4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80149a4:	b480      	push	{r7}
 80149a6:	b087      	sub	sp, #28
 80149a8:	af00      	add	r7, sp, #0
 80149aa:	60f8      	str	r0, [r7, #12]
 80149ac:	60b9      	str	r1, [r7, #8]
 80149ae:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80149b0:	68bb      	ldr	r3, [r7, #8]
 80149b2:	f003 031f 	and.w	r3, r3, #31
 80149b6:	2201      	movs	r2, #1
 80149b8:	fa02 f303 	lsl.w	r3, r2, r3
 80149bc:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80149be:	68fb      	ldr	r3, [r7, #12]
 80149c0:	6a1a      	ldr	r2, [r3, #32]
 80149c2:	697b      	ldr	r3, [r7, #20]
 80149c4:	43db      	mvns	r3, r3
 80149c6:	401a      	ands	r2, r3
 80149c8:	68fb      	ldr	r3, [r7, #12]
 80149ca:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80149cc:	68fb      	ldr	r3, [r7, #12]
 80149ce:	6a1a      	ldr	r2, [r3, #32]
 80149d0:	68bb      	ldr	r3, [r7, #8]
 80149d2:	f003 031f 	and.w	r3, r3, #31
 80149d6:	6879      	ldr	r1, [r7, #4]
 80149d8:	fa01 f303 	lsl.w	r3, r1, r3
 80149dc:	431a      	orrs	r2, r3
 80149de:	68fb      	ldr	r3, [r7, #12]
 80149e0:	621a      	str	r2, [r3, #32]
}
 80149e2:	bf00      	nop
 80149e4:	371c      	adds	r7, #28
 80149e6:	46bd      	mov	sp, r7
 80149e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80149ec:	4770      	bx	lr
	...

080149f0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80149f0:	b480      	push	{r7}
 80149f2:	b085      	sub	sp, #20
 80149f4:	af00      	add	r7, sp, #0
 80149f6:	6078      	str	r0, [r7, #4]
 80149f8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80149fa:	687b      	ldr	r3, [r7, #4]
 80149fc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8014a00:	2b01      	cmp	r3, #1
 8014a02:	d101      	bne.n	8014a08 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8014a04:	2302      	movs	r3, #2
 8014a06:	e068      	b.n	8014ada <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8014a08:	687b      	ldr	r3, [r7, #4]
 8014a0a:	2201      	movs	r2, #1
 8014a0c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8014a10:	687b      	ldr	r3, [r7, #4]
 8014a12:	2202      	movs	r2, #2
 8014a14:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8014a18:	687b      	ldr	r3, [r7, #4]
 8014a1a:	681b      	ldr	r3, [r3, #0]
 8014a1c:	685b      	ldr	r3, [r3, #4]
 8014a1e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8014a20:	687b      	ldr	r3, [r7, #4]
 8014a22:	681b      	ldr	r3, [r3, #0]
 8014a24:	689b      	ldr	r3, [r3, #8]
 8014a26:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8014a28:	687b      	ldr	r3, [r7, #4]
 8014a2a:	681b      	ldr	r3, [r3, #0]
 8014a2c:	4a2e      	ldr	r2, [pc, #184]	@ (8014ae8 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8014a2e:	4293      	cmp	r3, r2
 8014a30:	d004      	beq.n	8014a3c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8014a32:	687b      	ldr	r3, [r7, #4]
 8014a34:	681b      	ldr	r3, [r3, #0]
 8014a36:	4a2d      	ldr	r2, [pc, #180]	@ (8014aec <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8014a38:	4293      	cmp	r3, r2
 8014a3a:	d108      	bne.n	8014a4e <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8014a3c:	68fb      	ldr	r3, [r7, #12]
 8014a3e:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8014a42:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8014a44:	683b      	ldr	r3, [r7, #0]
 8014a46:	685b      	ldr	r3, [r3, #4]
 8014a48:	68fa      	ldr	r2, [r7, #12]
 8014a4a:	4313      	orrs	r3, r2
 8014a4c:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8014a4e:	68fb      	ldr	r3, [r7, #12]
 8014a50:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8014a54:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8014a56:	683b      	ldr	r3, [r7, #0]
 8014a58:	681b      	ldr	r3, [r3, #0]
 8014a5a:	68fa      	ldr	r2, [r7, #12]
 8014a5c:	4313      	orrs	r3, r2
 8014a5e:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8014a60:	687b      	ldr	r3, [r7, #4]
 8014a62:	681b      	ldr	r3, [r3, #0]
 8014a64:	68fa      	ldr	r2, [r7, #12]
 8014a66:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8014a68:	687b      	ldr	r3, [r7, #4]
 8014a6a:	681b      	ldr	r3, [r3, #0]
 8014a6c:	4a1e      	ldr	r2, [pc, #120]	@ (8014ae8 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8014a6e:	4293      	cmp	r3, r2
 8014a70:	d01d      	beq.n	8014aae <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8014a72:	687b      	ldr	r3, [r7, #4]
 8014a74:	681b      	ldr	r3, [r3, #0]
 8014a76:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8014a7a:	d018      	beq.n	8014aae <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8014a7c:	687b      	ldr	r3, [r7, #4]
 8014a7e:	681b      	ldr	r3, [r3, #0]
 8014a80:	4a1b      	ldr	r2, [pc, #108]	@ (8014af0 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8014a82:	4293      	cmp	r3, r2
 8014a84:	d013      	beq.n	8014aae <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8014a86:	687b      	ldr	r3, [r7, #4]
 8014a88:	681b      	ldr	r3, [r3, #0]
 8014a8a:	4a1a      	ldr	r2, [pc, #104]	@ (8014af4 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8014a8c:	4293      	cmp	r3, r2
 8014a8e:	d00e      	beq.n	8014aae <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8014a90:	687b      	ldr	r3, [r7, #4]
 8014a92:	681b      	ldr	r3, [r3, #0]
 8014a94:	4a18      	ldr	r2, [pc, #96]	@ (8014af8 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8014a96:	4293      	cmp	r3, r2
 8014a98:	d009      	beq.n	8014aae <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8014a9a:	687b      	ldr	r3, [r7, #4]
 8014a9c:	681b      	ldr	r3, [r3, #0]
 8014a9e:	4a13      	ldr	r2, [pc, #76]	@ (8014aec <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8014aa0:	4293      	cmp	r3, r2
 8014aa2:	d004      	beq.n	8014aae <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8014aa4:	687b      	ldr	r3, [r7, #4]
 8014aa6:	681b      	ldr	r3, [r3, #0]
 8014aa8:	4a14      	ldr	r2, [pc, #80]	@ (8014afc <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8014aaa:	4293      	cmp	r3, r2
 8014aac:	d10c      	bne.n	8014ac8 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8014aae:	68bb      	ldr	r3, [r7, #8]
 8014ab0:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8014ab4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8014ab6:	683b      	ldr	r3, [r7, #0]
 8014ab8:	689b      	ldr	r3, [r3, #8]
 8014aba:	68ba      	ldr	r2, [r7, #8]
 8014abc:	4313      	orrs	r3, r2
 8014abe:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8014ac0:	687b      	ldr	r3, [r7, #4]
 8014ac2:	681b      	ldr	r3, [r3, #0]
 8014ac4:	68ba      	ldr	r2, [r7, #8]
 8014ac6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8014ac8:	687b      	ldr	r3, [r7, #4]
 8014aca:	2201      	movs	r2, #1
 8014acc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8014ad0:	687b      	ldr	r3, [r7, #4]
 8014ad2:	2200      	movs	r2, #0
 8014ad4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8014ad8:	2300      	movs	r3, #0
}
 8014ada:	4618      	mov	r0, r3
 8014adc:	3714      	adds	r7, #20
 8014ade:	46bd      	mov	sp, r7
 8014ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014ae4:	4770      	bx	lr
 8014ae6:	bf00      	nop
 8014ae8:	40012c00 	.word	0x40012c00
 8014aec:	40013400 	.word	0x40013400
 8014af0:	40000400 	.word	0x40000400
 8014af4:	40000800 	.word	0x40000800
 8014af8:	40000c00 	.word	0x40000c00
 8014afc:	40014000 	.word	0x40014000

08014b00 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8014b00:	b480      	push	{r7}
 8014b02:	b085      	sub	sp, #20
 8014b04:	af00      	add	r7, sp, #0
 8014b06:	6078      	str	r0, [r7, #4]
 8014b08:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8014b0a:	2300      	movs	r3, #0
 8014b0c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8014b0e:	687b      	ldr	r3, [r7, #4]
 8014b10:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8014b14:	2b01      	cmp	r3, #1
 8014b16:	d101      	bne.n	8014b1c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8014b18:	2302      	movs	r3, #2
 8014b1a:	e065      	b.n	8014be8 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 8014b1c:	687b      	ldr	r3, [r7, #4]
 8014b1e:	2201      	movs	r2, #1
 8014b20:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8014b24:	68fb      	ldr	r3, [r7, #12]
 8014b26:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8014b2a:	683b      	ldr	r3, [r7, #0]
 8014b2c:	68db      	ldr	r3, [r3, #12]
 8014b2e:	4313      	orrs	r3, r2
 8014b30:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8014b32:	68fb      	ldr	r3, [r7, #12]
 8014b34:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8014b38:	683b      	ldr	r3, [r7, #0]
 8014b3a:	689b      	ldr	r3, [r3, #8]
 8014b3c:	4313      	orrs	r3, r2
 8014b3e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8014b40:	68fb      	ldr	r3, [r7, #12]
 8014b42:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8014b46:	683b      	ldr	r3, [r7, #0]
 8014b48:	685b      	ldr	r3, [r3, #4]
 8014b4a:	4313      	orrs	r3, r2
 8014b4c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8014b4e:	68fb      	ldr	r3, [r7, #12]
 8014b50:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8014b54:	683b      	ldr	r3, [r7, #0]
 8014b56:	681b      	ldr	r3, [r3, #0]
 8014b58:	4313      	orrs	r3, r2
 8014b5a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8014b5c:	68fb      	ldr	r3, [r7, #12]
 8014b5e:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8014b62:	683b      	ldr	r3, [r7, #0]
 8014b64:	691b      	ldr	r3, [r3, #16]
 8014b66:	4313      	orrs	r3, r2
 8014b68:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8014b6a:	68fb      	ldr	r3, [r7, #12]
 8014b6c:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8014b70:	683b      	ldr	r3, [r7, #0]
 8014b72:	695b      	ldr	r3, [r3, #20]
 8014b74:	4313      	orrs	r3, r2
 8014b76:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8014b78:	68fb      	ldr	r3, [r7, #12]
 8014b7a:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8014b7e:	683b      	ldr	r3, [r7, #0]
 8014b80:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8014b82:	4313      	orrs	r3, r2
 8014b84:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8014b86:	68fb      	ldr	r3, [r7, #12]
 8014b88:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 8014b8c:	683b      	ldr	r3, [r7, #0]
 8014b8e:	699b      	ldr	r3, [r3, #24]
 8014b90:	041b      	lsls	r3, r3, #16
 8014b92:	4313      	orrs	r3, r2
 8014b94:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8014b96:	687b      	ldr	r3, [r7, #4]
 8014b98:	681b      	ldr	r3, [r3, #0]
 8014b9a:	4a16      	ldr	r2, [pc, #88]	@ (8014bf4 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 8014b9c:	4293      	cmp	r3, r2
 8014b9e:	d004      	beq.n	8014baa <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 8014ba0:	687b      	ldr	r3, [r7, #4]
 8014ba2:	681b      	ldr	r3, [r3, #0]
 8014ba4:	4a14      	ldr	r2, [pc, #80]	@ (8014bf8 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 8014ba6:	4293      	cmp	r3, r2
 8014ba8:	d115      	bne.n	8014bd6 <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8014baa:	68fb      	ldr	r3, [r7, #12]
 8014bac:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 8014bb0:	683b      	ldr	r3, [r7, #0]
 8014bb2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8014bb4:	051b      	lsls	r3, r3, #20
 8014bb6:	4313      	orrs	r3, r2
 8014bb8:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8014bba:	68fb      	ldr	r3, [r7, #12]
 8014bbc:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8014bc0:	683b      	ldr	r3, [r7, #0]
 8014bc2:	69db      	ldr	r3, [r3, #28]
 8014bc4:	4313      	orrs	r3, r2
 8014bc6:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8014bc8:	68fb      	ldr	r3, [r7, #12]
 8014bca:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8014bce:	683b      	ldr	r3, [r7, #0]
 8014bd0:	6a1b      	ldr	r3, [r3, #32]
 8014bd2:	4313      	orrs	r3, r2
 8014bd4:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8014bd6:	687b      	ldr	r3, [r7, #4]
 8014bd8:	681b      	ldr	r3, [r3, #0]
 8014bda:	68fa      	ldr	r2, [r7, #12]
 8014bdc:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8014bde:	687b      	ldr	r3, [r7, #4]
 8014be0:	2200      	movs	r2, #0
 8014be2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8014be6:	2300      	movs	r3, #0
}
 8014be8:	4618      	mov	r0, r3
 8014bea:	3714      	adds	r7, #20
 8014bec:	46bd      	mov	sp, r7
 8014bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014bf2:	4770      	bx	lr
 8014bf4:	40012c00 	.word	0x40012c00
 8014bf8:	40013400 	.word	0x40013400

08014bfc <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8014bfc:	b580      	push	{r7, lr}
 8014bfe:	b082      	sub	sp, #8
 8014c00:	af00      	add	r7, sp, #0
 8014c02:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8014c04:	687b      	ldr	r3, [r7, #4]
 8014c06:	2b00      	cmp	r3, #0
 8014c08:	d101      	bne.n	8014c0e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8014c0a:	2301      	movs	r3, #1
 8014c0c:	e040      	b.n	8014c90 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8014c0e:	687b      	ldr	r3, [r7, #4]
 8014c10:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8014c12:	2b00      	cmp	r3, #0
 8014c14:	d106      	bne.n	8014c24 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8014c16:	687b      	ldr	r3, [r7, #4]
 8014c18:	2200      	movs	r2, #0
 8014c1a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8014c1e:	6878      	ldr	r0, [r7, #4]
 8014c20:	f7f3 f8b0 	bl	8007d84 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8014c24:	687b      	ldr	r3, [r7, #4]
 8014c26:	2224      	movs	r2, #36	@ 0x24
 8014c28:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8014c2a:	687b      	ldr	r3, [r7, #4]
 8014c2c:	681b      	ldr	r3, [r3, #0]
 8014c2e:	681a      	ldr	r2, [r3, #0]
 8014c30:	687b      	ldr	r3, [r7, #4]
 8014c32:	681b      	ldr	r3, [r3, #0]
 8014c34:	f022 0201 	bic.w	r2, r2, #1
 8014c38:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8014c3a:	687b      	ldr	r3, [r7, #4]
 8014c3c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8014c3e:	2b00      	cmp	r3, #0
 8014c40:	d002      	beq.n	8014c48 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8014c42:	6878      	ldr	r0, [r7, #4]
 8014c44:	f000 fdb4 	bl	80157b0 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8014c48:	6878      	ldr	r0, [r7, #4]
 8014c4a:	f000 faf9 	bl	8015240 <UART_SetConfig>
 8014c4e:	4603      	mov	r3, r0
 8014c50:	2b01      	cmp	r3, #1
 8014c52:	d101      	bne.n	8014c58 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8014c54:	2301      	movs	r3, #1
 8014c56:	e01b      	b.n	8014c90 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8014c58:	687b      	ldr	r3, [r7, #4]
 8014c5a:	681b      	ldr	r3, [r3, #0]
 8014c5c:	685a      	ldr	r2, [r3, #4]
 8014c5e:	687b      	ldr	r3, [r7, #4]
 8014c60:	681b      	ldr	r3, [r3, #0]
 8014c62:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8014c66:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8014c68:	687b      	ldr	r3, [r7, #4]
 8014c6a:	681b      	ldr	r3, [r3, #0]
 8014c6c:	689a      	ldr	r2, [r3, #8]
 8014c6e:	687b      	ldr	r3, [r7, #4]
 8014c70:	681b      	ldr	r3, [r3, #0]
 8014c72:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8014c76:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8014c78:	687b      	ldr	r3, [r7, #4]
 8014c7a:	681b      	ldr	r3, [r3, #0]
 8014c7c:	681a      	ldr	r2, [r3, #0]
 8014c7e:	687b      	ldr	r3, [r7, #4]
 8014c80:	681b      	ldr	r3, [r3, #0]
 8014c82:	f042 0201 	orr.w	r2, r2, #1
 8014c86:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8014c88:	6878      	ldr	r0, [r7, #4]
 8014c8a:	f000 fe33 	bl	80158f4 <UART_CheckIdleState>
 8014c8e:	4603      	mov	r3, r0
}
 8014c90:	4618      	mov	r0, r3
 8014c92:	3708      	adds	r7, #8
 8014c94:	46bd      	mov	sp, r7
 8014c96:	bd80      	pop	{r7, pc}

08014c98 <HAL_HalfDuplex_Init>:
  *        parameters in the UART_InitTypeDef and creates the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HalfDuplex_Init(UART_HandleTypeDef *huart)
{
 8014c98:	b580      	push	{r7, lr}
 8014c9a:	b082      	sub	sp, #8
 8014c9c:	af00      	add	r7, sp, #0
 8014c9e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8014ca0:	687b      	ldr	r3, [r7, #4]
 8014ca2:	2b00      	cmp	r3, #0
 8014ca4:	d101      	bne.n	8014caa <HAL_HalfDuplex_Init+0x12>
  {
    return HAL_ERROR;
 8014ca6:	2301      	movs	r3, #1
 8014ca8:	e048      	b.n	8014d3c <HAL_HalfDuplex_Init+0xa4>
  }

  /* Check UART instance */
  assert_param(IS_UART_HALFDUPLEX_INSTANCE(huart->Instance));

  if (huart->gState == HAL_UART_STATE_RESET)
 8014caa:	687b      	ldr	r3, [r7, #4]
 8014cac:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8014cae:	2b00      	cmp	r3, #0
 8014cb0:	d106      	bne.n	8014cc0 <HAL_HalfDuplex_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8014cb2:	687b      	ldr	r3, [r7, #4]
 8014cb4:	2200      	movs	r2, #0
 8014cb6:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8014cba:	6878      	ldr	r0, [r7, #4]
 8014cbc:	f7f3 f862 	bl	8007d84 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8014cc0:	687b      	ldr	r3, [r7, #4]
 8014cc2:	2224      	movs	r2, #36	@ 0x24
 8014cc4:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8014cc6:	687b      	ldr	r3, [r7, #4]
 8014cc8:	681b      	ldr	r3, [r3, #0]
 8014cca:	681a      	ldr	r2, [r3, #0]
 8014ccc:	687b      	ldr	r3, [r7, #4]
 8014cce:	681b      	ldr	r3, [r3, #0]
 8014cd0:	f022 0201 	bic.w	r2, r2, #1
 8014cd4:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8014cd6:	687b      	ldr	r3, [r7, #4]
 8014cd8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8014cda:	2b00      	cmp	r3, #0
 8014cdc:	d002      	beq.n	8014ce4 <HAL_HalfDuplex_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8014cde:	6878      	ldr	r0, [r7, #4]
 8014ce0:	f000 fd66 	bl	80157b0 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8014ce4:	6878      	ldr	r0, [r7, #4]
 8014ce6:	f000 faab 	bl	8015240 <UART_SetConfig>
 8014cea:	4603      	mov	r3, r0
 8014cec:	2b01      	cmp	r3, #1
 8014cee:	d101      	bne.n	8014cf4 <HAL_HalfDuplex_Init+0x5c>
  {
    return HAL_ERROR;
 8014cf0:	2301      	movs	r3, #1
 8014cf2:	e023      	b.n	8014d3c <HAL_HalfDuplex_Init+0xa4>
  }

  /* In half-duplex mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN and IREN bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8014cf4:	687b      	ldr	r3, [r7, #4]
 8014cf6:	681b      	ldr	r3, [r3, #0]
 8014cf8:	685a      	ldr	r2, [r3, #4]
 8014cfa:	687b      	ldr	r3, [r7, #4]
 8014cfc:	681b      	ldr	r3, [r3, #0]
 8014cfe:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8014d02:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_IREN | USART_CR3_SCEN));
 8014d04:	687b      	ldr	r3, [r7, #4]
 8014d06:	681b      	ldr	r3, [r3, #0]
 8014d08:	689a      	ldr	r2, [r3, #8]
 8014d0a:	687b      	ldr	r3, [r7, #4]
 8014d0c:	681b      	ldr	r3, [r3, #0]
 8014d0e:	f022 0222 	bic.w	r2, r2, #34	@ 0x22
 8014d12:	609a      	str	r2, [r3, #8]

  /* Enable the Half-Duplex mode by setting the HDSEL bit in the CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
 8014d14:	687b      	ldr	r3, [r7, #4]
 8014d16:	681b      	ldr	r3, [r3, #0]
 8014d18:	689a      	ldr	r2, [r3, #8]
 8014d1a:	687b      	ldr	r3, [r7, #4]
 8014d1c:	681b      	ldr	r3, [r3, #0]
 8014d1e:	f042 0208 	orr.w	r2, r2, #8
 8014d22:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8014d24:	687b      	ldr	r3, [r7, #4]
 8014d26:	681b      	ldr	r3, [r3, #0]
 8014d28:	681a      	ldr	r2, [r3, #0]
 8014d2a:	687b      	ldr	r3, [r7, #4]
 8014d2c:	681b      	ldr	r3, [r3, #0]
 8014d2e:	f042 0201 	orr.w	r2, r2, #1
 8014d32:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8014d34:	6878      	ldr	r0, [r7, #4]
 8014d36:	f000 fddd 	bl	80158f4 <UART_CheckIdleState>
 8014d3a:	4603      	mov	r3, r0
}
 8014d3c:	4618      	mov	r0, r3
 8014d3e:	3708      	adds	r7, #8
 8014d40:	46bd      	mov	sp, r7
 8014d42:	bd80      	pop	{r7, pc}

08014d44 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8014d44:	b580      	push	{r7, lr}
 8014d46:	b08a      	sub	sp, #40	@ 0x28
 8014d48:	af02      	add	r7, sp, #8
 8014d4a:	60f8      	str	r0, [r7, #12]
 8014d4c:	60b9      	str	r1, [r7, #8]
 8014d4e:	603b      	str	r3, [r7, #0]
 8014d50:	4613      	mov	r3, r2
 8014d52:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8014d54:	68fb      	ldr	r3, [r7, #12]
 8014d56:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8014d58:	2b20      	cmp	r3, #32
 8014d5a:	d177      	bne.n	8014e4c <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 8014d5c:	68bb      	ldr	r3, [r7, #8]
 8014d5e:	2b00      	cmp	r3, #0
 8014d60:	d002      	beq.n	8014d68 <HAL_UART_Transmit+0x24>
 8014d62:	88fb      	ldrh	r3, [r7, #6]
 8014d64:	2b00      	cmp	r3, #0
 8014d66:	d101      	bne.n	8014d6c <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8014d68:	2301      	movs	r3, #1
 8014d6a:	e070      	b.n	8014e4e <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8014d6c:	68fb      	ldr	r3, [r7, #12]
 8014d6e:	2200      	movs	r2, #0
 8014d70:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8014d74:	68fb      	ldr	r3, [r7, #12]
 8014d76:	2221      	movs	r2, #33	@ 0x21
 8014d78:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8014d7a:	f7f6 fac3 	bl	800b304 <HAL_GetTick>
 8014d7e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8014d80:	68fb      	ldr	r3, [r7, #12]
 8014d82:	88fa      	ldrh	r2, [r7, #6]
 8014d84:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 8014d88:	68fb      	ldr	r3, [r7, #12]
 8014d8a:	88fa      	ldrh	r2, [r7, #6]
 8014d8c:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8014d90:	68fb      	ldr	r3, [r7, #12]
 8014d92:	689b      	ldr	r3, [r3, #8]
 8014d94:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8014d98:	d108      	bne.n	8014dac <HAL_UART_Transmit+0x68>
 8014d9a:	68fb      	ldr	r3, [r7, #12]
 8014d9c:	691b      	ldr	r3, [r3, #16]
 8014d9e:	2b00      	cmp	r3, #0
 8014da0:	d104      	bne.n	8014dac <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8014da2:	2300      	movs	r3, #0
 8014da4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8014da6:	68bb      	ldr	r3, [r7, #8]
 8014da8:	61bb      	str	r3, [r7, #24]
 8014daa:	e003      	b.n	8014db4 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8014dac:	68bb      	ldr	r3, [r7, #8]
 8014dae:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8014db0:	2300      	movs	r3, #0
 8014db2:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8014db4:	e02f      	b.n	8014e16 <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8014db6:	683b      	ldr	r3, [r7, #0]
 8014db8:	9300      	str	r3, [sp, #0]
 8014dba:	697b      	ldr	r3, [r7, #20]
 8014dbc:	2200      	movs	r2, #0
 8014dbe:	2180      	movs	r1, #128	@ 0x80
 8014dc0:	68f8      	ldr	r0, [r7, #12]
 8014dc2:	f000 fe3f 	bl	8015a44 <UART_WaitOnFlagUntilTimeout>
 8014dc6:	4603      	mov	r3, r0
 8014dc8:	2b00      	cmp	r3, #0
 8014dca:	d004      	beq.n	8014dd6 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8014dcc:	68fb      	ldr	r3, [r7, #12]
 8014dce:	2220      	movs	r2, #32
 8014dd0:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 8014dd2:	2303      	movs	r3, #3
 8014dd4:	e03b      	b.n	8014e4e <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 8014dd6:	69fb      	ldr	r3, [r7, #28]
 8014dd8:	2b00      	cmp	r3, #0
 8014dda:	d10b      	bne.n	8014df4 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8014ddc:	69bb      	ldr	r3, [r7, #24]
 8014dde:	881a      	ldrh	r2, [r3, #0]
 8014de0:	68fb      	ldr	r3, [r7, #12]
 8014de2:	681b      	ldr	r3, [r3, #0]
 8014de4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8014de8:	b292      	uxth	r2, r2
 8014dea:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8014dec:	69bb      	ldr	r3, [r7, #24]
 8014dee:	3302      	adds	r3, #2
 8014df0:	61bb      	str	r3, [r7, #24]
 8014df2:	e007      	b.n	8014e04 <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8014df4:	69fb      	ldr	r3, [r7, #28]
 8014df6:	781a      	ldrb	r2, [r3, #0]
 8014df8:	68fb      	ldr	r3, [r7, #12]
 8014dfa:	681b      	ldr	r3, [r3, #0]
 8014dfc:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8014dfe:	69fb      	ldr	r3, [r7, #28]
 8014e00:	3301      	adds	r3, #1
 8014e02:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8014e04:	68fb      	ldr	r3, [r7, #12]
 8014e06:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8014e0a:	b29b      	uxth	r3, r3
 8014e0c:	3b01      	subs	r3, #1
 8014e0e:	b29a      	uxth	r2, r3
 8014e10:	68fb      	ldr	r3, [r7, #12]
 8014e12:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 8014e16:	68fb      	ldr	r3, [r7, #12]
 8014e18:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8014e1c:	b29b      	uxth	r3, r3
 8014e1e:	2b00      	cmp	r3, #0
 8014e20:	d1c9      	bne.n	8014db6 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8014e22:	683b      	ldr	r3, [r7, #0]
 8014e24:	9300      	str	r3, [sp, #0]
 8014e26:	697b      	ldr	r3, [r7, #20]
 8014e28:	2200      	movs	r2, #0
 8014e2a:	2140      	movs	r1, #64	@ 0x40
 8014e2c:	68f8      	ldr	r0, [r7, #12]
 8014e2e:	f000 fe09 	bl	8015a44 <UART_WaitOnFlagUntilTimeout>
 8014e32:	4603      	mov	r3, r0
 8014e34:	2b00      	cmp	r3, #0
 8014e36:	d004      	beq.n	8014e42 <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 8014e38:	68fb      	ldr	r3, [r7, #12]
 8014e3a:	2220      	movs	r2, #32
 8014e3c:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 8014e3e:	2303      	movs	r3, #3
 8014e40:	e005      	b.n	8014e4e <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8014e42:	68fb      	ldr	r3, [r7, #12]
 8014e44:	2220      	movs	r2, #32
 8014e46:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8014e48:	2300      	movs	r3, #0
 8014e4a:	e000      	b.n	8014e4e <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 8014e4c:	2302      	movs	r3, #2
  }
}
 8014e4e:	4618      	mov	r0, r3
 8014e50:	3720      	adds	r7, #32
 8014e52:	46bd      	mov	sp, r7
 8014e54:	bd80      	pop	{r7, pc}

08014e56 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8014e56:	b580      	push	{r7, lr}
 8014e58:	b08a      	sub	sp, #40	@ 0x28
 8014e5a:	af02      	add	r7, sp, #8
 8014e5c:	60f8      	str	r0, [r7, #12]
 8014e5e:	60b9      	str	r1, [r7, #8]
 8014e60:	603b      	str	r3, [r7, #0]
 8014e62:	4613      	mov	r3, r2
 8014e64:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8014e66:	68fb      	ldr	r3, [r7, #12]
 8014e68:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8014e6c:	2b20      	cmp	r3, #32
 8014e6e:	f040 80b6 	bne.w	8014fde <HAL_UART_Receive+0x188>
  {
    if ((pData == NULL) || (Size == 0U))
 8014e72:	68bb      	ldr	r3, [r7, #8]
 8014e74:	2b00      	cmp	r3, #0
 8014e76:	d002      	beq.n	8014e7e <HAL_UART_Receive+0x28>
 8014e78:	88fb      	ldrh	r3, [r7, #6]
 8014e7a:	2b00      	cmp	r3, #0
 8014e7c:	d101      	bne.n	8014e82 <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 8014e7e:	2301      	movs	r3, #1
 8014e80:	e0ae      	b.n	8014fe0 <HAL_UART_Receive+0x18a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8014e82:	68fb      	ldr	r3, [r7, #12]
 8014e84:	2200      	movs	r2, #0
 8014e86:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8014e8a:	68fb      	ldr	r3, [r7, #12]
 8014e8c:	2222      	movs	r2, #34	@ 0x22
 8014e8e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8014e92:	68fb      	ldr	r3, [r7, #12]
 8014e94:	2200      	movs	r2, #0
 8014e96:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8014e98:	f7f6 fa34 	bl	800b304 <HAL_GetTick>
 8014e9c:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 8014e9e:	68fb      	ldr	r3, [r7, #12]
 8014ea0:	88fa      	ldrh	r2, [r7, #6]
 8014ea2:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58
    huart->RxXferCount = Size;
 8014ea6:	68fb      	ldr	r3, [r7, #12]
 8014ea8:	88fa      	ldrh	r2, [r7, #6]
 8014eaa:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8014eae:	68fb      	ldr	r3, [r7, #12]
 8014eb0:	689b      	ldr	r3, [r3, #8]
 8014eb2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8014eb6:	d10e      	bne.n	8014ed6 <HAL_UART_Receive+0x80>
 8014eb8:	68fb      	ldr	r3, [r7, #12]
 8014eba:	691b      	ldr	r3, [r3, #16]
 8014ebc:	2b00      	cmp	r3, #0
 8014ebe:	d105      	bne.n	8014ecc <HAL_UART_Receive+0x76>
 8014ec0:	68fb      	ldr	r3, [r7, #12]
 8014ec2:	f240 12ff 	movw	r2, #511	@ 0x1ff
 8014ec6:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8014eca:	e02d      	b.n	8014f28 <HAL_UART_Receive+0xd2>
 8014ecc:	68fb      	ldr	r3, [r7, #12]
 8014ece:	22ff      	movs	r2, #255	@ 0xff
 8014ed0:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8014ed4:	e028      	b.n	8014f28 <HAL_UART_Receive+0xd2>
 8014ed6:	68fb      	ldr	r3, [r7, #12]
 8014ed8:	689b      	ldr	r3, [r3, #8]
 8014eda:	2b00      	cmp	r3, #0
 8014edc:	d10d      	bne.n	8014efa <HAL_UART_Receive+0xa4>
 8014ede:	68fb      	ldr	r3, [r7, #12]
 8014ee0:	691b      	ldr	r3, [r3, #16]
 8014ee2:	2b00      	cmp	r3, #0
 8014ee4:	d104      	bne.n	8014ef0 <HAL_UART_Receive+0x9a>
 8014ee6:	68fb      	ldr	r3, [r7, #12]
 8014ee8:	22ff      	movs	r2, #255	@ 0xff
 8014eea:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8014eee:	e01b      	b.n	8014f28 <HAL_UART_Receive+0xd2>
 8014ef0:	68fb      	ldr	r3, [r7, #12]
 8014ef2:	227f      	movs	r2, #127	@ 0x7f
 8014ef4:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8014ef8:	e016      	b.n	8014f28 <HAL_UART_Receive+0xd2>
 8014efa:	68fb      	ldr	r3, [r7, #12]
 8014efc:	689b      	ldr	r3, [r3, #8]
 8014efe:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8014f02:	d10d      	bne.n	8014f20 <HAL_UART_Receive+0xca>
 8014f04:	68fb      	ldr	r3, [r7, #12]
 8014f06:	691b      	ldr	r3, [r3, #16]
 8014f08:	2b00      	cmp	r3, #0
 8014f0a:	d104      	bne.n	8014f16 <HAL_UART_Receive+0xc0>
 8014f0c:	68fb      	ldr	r3, [r7, #12]
 8014f0e:	227f      	movs	r2, #127	@ 0x7f
 8014f10:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8014f14:	e008      	b.n	8014f28 <HAL_UART_Receive+0xd2>
 8014f16:	68fb      	ldr	r3, [r7, #12]
 8014f18:	223f      	movs	r2, #63	@ 0x3f
 8014f1a:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8014f1e:	e003      	b.n	8014f28 <HAL_UART_Receive+0xd2>
 8014f20:	68fb      	ldr	r3, [r7, #12]
 8014f22:	2200      	movs	r2, #0
 8014f24:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
    uhMask = huart->Mask;
 8014f28:	68fb      	ldr	r3, [r7, #12]
 8014f2a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8014f2e:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8014f30:	68fb      	ldr	r3, [r7, #12]
 8014f32:	689b      	ldr	r3, [r3, #8]
 8014f34:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8014f38:	d108      	bne.n	8014f4c <HAL_UART_Receive+0xf6>
 8014f3a:	68fb      	ldr	r3, [r7, #12]
 8014f3c:	691b      	ldr	r3, [r3, #16]
 8014f3e:	2b00      	cmp	r3, #0
 8014f40:	d104      	bne.n	8014f4c <HAL_UART_Receive+0xf6>
    {
      pdata8bits  = NULL;
 8014f42:	2300      	movs	r3, #0
 8014f44:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8014f46:	68bb      	ldr	r3, [r7, #8]
 8014f48:	61bb      	str	r3, [r7, #24]
 8014f4a:	e003      	b.n	8014f54 <HAL_UART_Receive+0xfe>
    }
    else
    {
      pdata8bits  = pData;
 8014f4c:	68bb      	ldr	r3, [r7, #8]
 8014f4e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8014f50:	2300      	movs	r3, #0
 8014f52:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8014f54:	e037      	b.n	8014fc6 <HAL_UART_Receive+0x170>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8014f56:	683b      	ldr	r3, [r7, #0]
 8014f58:	9300      	str	r3, [sp, #0]
 8014f5a:	697b      	ldr	r3, [r7, #20]
 8014f5c:	2200      	movs	r2, #0
 8014f5e:	2120      	movs	r1, #32
 8014f60:	68f8      	ldr	r0, [r7, #12]
 8014f62:	f000 fd6f 	bl	8015a44 <UART_WaitOnFlagUntilTimeout>
 8014f66:	4603      	mov	r3, r0
 8014f68:	2b00      	cmp	r3, #0
 8014f6a:	d005      	beq.n	8014f78 <HAL_UART_Receive+0x122>
      {
        huart->RxState = HAL_UART_STATE_READY;
 8014f6c:	68fb      	ldr	r3, [r7, #12]
 8014f6e:	2220      	movs	r2, #32
 8014f70:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

        return HAL_TIMEOUT;
 8014f74:	2303      	movs	r3, #3
 8014f76:	e033      	b.n	8014fe0 <HAL_UART_Receive+0x18a>
      }
      if (pdata8bits == NULL)
 8014f78:	69fb      	ldr	r3, [r7, #28]
 8014f7a:	2b00      	cmp	r3, #0
 8014f7c:	d10c      	bne.n	8014f98 <HAL_UART_Receive+0x142>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8014f7e:	68fb      	ldr	r3, [r7, #12]
 8014f80:	681b      	ldr	r3, [r3, #0]
 8014f82:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8014f84:	b29a      	uxth	r2, r3
 8014f86:	8a7b      	ldrh	r3, [r7, #18]
 8014f88:	4013      	ands	r3, r2
 8014f8a:	b29a      	uxth	r2, r3
 8014f8c:	69bb      	ldr	r3, [r7, #24]
 8014f8e:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8014f90:	69bb      	ldr	r3, [r7, #24]
 8014f92:	3302      	adds	r3, #2
 8014f94:	61bb      	str	r3, [r7, #24]
 8014f96:	e00d      	b.n	8014fb4 <HAL_UART_Receive+0x15e>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8014f98:	68fb      	ldr	r3, [r7, #12]
 8014f9a:	681b      	ldr	r3, [r3, #0]
 8014f9c:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8014f9e:	b29b      	uxth	r3, r3
 8014fa0:	b2da      	uxtb	r2, r3
 8014fa2:	8a7b      	ldrh	r3, [r7, #18]
 8014fa4:	b2db      	uxtb	r3, r3
 8014fa6:	4013      	ands	r3, r2
 8014fa8:	b2da      	uxtb	r2, r3
 8014faa:	69fb      	ldr	r3, [r7, #28]
 8014fac:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8014fae:	69fb      	ldr	r3, [r7, #28]
 8014fb0:	3301      	adds	r3, #1
 8014fb2:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8014fb4:	68fb      	ldr	r3, [r7, #12]
 8014fb6:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8014fba:	b29b      	uxth	r3, r3
 8014fbc:	3b01      	subs	r3, #1
 8014fbe:	b29a      	uxth	r2, r3
 8014fc0:	68fb      	ldr	r3, [r7, #12]
 8014fc2:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
    while (huart->RxXferCount > 0U)
 8014fc6:	68fb      	ldr	r3, [r7, #12]
 8014fc8:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8014fcc:	b29b      	uxth	r3, r3
 8014fce:	2b00      	cmp	r3, #0
 8014fd0:	d1c1      	bne.n	8014f56 <HAL_UART_Receive+0x100>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8014fd2:	68fb      	ldr	r3, [r7, #12]
 8014fd4:	2220      	movs	r2, #32
 8014fd6:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

    return HAL_OK;
 8014fda:	2300      	movs	r3, #0
 8014fdc:	e000      	b.n	8014fe0 <HAL_UART_Receive+0x18a>
  }
  else
  {
    return HAL_BUSY;
 8014fde:	2302      	movs	r3, #2
  }
}
 8014fe0:	4618      	mov	r0, r3
 8014fe2:	3720      	adds	r7, #32
 8014fe4:	46bd      	mov	sp, r7
 8014fe6:	bd80      	pop	{r7, pc}

08014fe8 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8014fe8:	b580      	push	{r7, lr}
 8014fea:	b08a      	sub	sp, #40	@ 0x28
 8014fec:	af00      	add	r7, sp, #0
 8014fee:	60f8      	str	r0, [r7, #12]
 8014ff0:	60b9      	str	r1, [r7, #8]
 8014ff2:	4613      	mov	r3, r2
 8014ff4:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8014ff6:	68fb      	ldr	r3, [r7, #12]
 8014ff8:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8014ffa:	2b20      	cmp	r3, #32
 8014ffc:	d165      	bne.n	80150ca <HAL_UART_Transmit_DMA+0xe2>
  {
    if ((pData == NULL) || (Size == 0U))
 8014ffe:	68bb      	ldr	r3, [r7, #8]
 8015000:	2b00      	cmp	r3, #0
 8015002:	d002      	beq.n	801500a <HAL_UART_Transmit_DMA+0x22>
 8015004:	88fb      	ldrh	r3, [r7, #6]
 8015006:	2b00      	cmp	r3, #0
 8015008:	d101      	bne.n	801500e <HAL_UART_Transmit_DMA+0x26>
    {
      return HAL_ERROR;
 801500a:	2301      	movs	r3, #1
 801500c:	e05e      	b.n	80150cc <HAL_UART_Transmit_DMA+0xe4>
    }

    huart->pTxBuffPtr  = pData;
 801500e:	68fb      	ldr	r3, [r7, #12]
 8015010:	68ba      	ldr	r2, [r7, #8]
 8015012:	64da      	str	r2, [r3, #76]	@ 0x4c
    huart->TxXferSize  = Size;
 8015014:	68fb      	ldr	r3, [r7, #12]
 8015016:	88fa      	ldrh	r2, [r7, #6]
 8015018:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 801501c:	68fb      	ldr	r3, [r7, #12]
 801501e:	88fa      	ldrh	r2, [r7, #6]
 8015020:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8015024:	68fb      	ldr	r3, [r7, #12]
 8015026:	2200      	movs	r2, #0
 8015028:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 801502c:	68fb      	ldr	r3, [r7, #12]
 801502e:	2221      	movs	r2, #33	@ 0x21
 8015030:	67da      	str	r2, [r3, #124]	@ 0x7c

    if (huart->hdmatx != NULL)
 8015032:	68fb      	ldr	r3, [r7, #12]
 8015034:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8015036:	2b00      	cmp	r3, #0
 8015038:	d027      	beq.n	801508a <HAL_UART_Transmit_DMA+0xa2>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 801503a:	68fb      	ldr	r3, [r7, #12]
 801503c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801503e:	4a25      	ldr	r2, [pc, #148]	@ (80150d4 <HAL_UART_Transmit_DMA+0xec>)
 8015040:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8015042:	68fb      	ldr	r3, [r7, #12]
 8015044:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8015046:	4a24      	ldr	r2, [pc, #144]	@ (80150d8 <HAL_UART_Transmit_DMA+0xf0>)
 8015048:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 801504a:	68fb      	ldr	r3, [r7, #12]
 801504c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801504e:	4a23      	ldr	r2, [pc, #140]	@ (80150dc <HAL_UART_Transmit_DMA+0xf4>)
 8015050:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 8015052:	68fb      	ldr	r3, [r7, #12]
 8015054:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8015056:	2200      	movs	r2, #0
 8015058:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 801505a:	68fb      	ldr	r3, [r7, #12]
 801505c:	6f18      	ldr	r0, [r3, #112]	@ 0x70
 801505e:	68fb      	ldr	r3, [r7, #12]
 8015060:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8015062:	4619      	mov	r1, r3
 8015064:	68fb      	ldr	r3, [r7, #12]
 8015066:	681b      	ldr	r3, [r3, #0]
 8015068:	3328      	adds	r3, #40	@ 0x28
 801506a:	461a      	mov	r2, r3
 801506c:	88fb      	ldrh	r3, [r7, #6]
 801506e:	f7f8 f92f 	bl	800d2d0 <HAL_DMA_Start_IT>
 8015072:	4603      	mov	r3, r0
 8015074:	2b00      	cmp	r3, #0
 8015076:	d008      	beq.n	801508a <HAL_UART_Transmit_DMA+0xa2>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 8015078:	68fb      	ldr	r3, [r7, #12]
 801507a:	2210      	movs	r2, #16
 801507c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 8015080:	68fb      	ldr	r3, [r7, #12]
 8015082:	2220      	movs	r2, #32
 8015084:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_ERROR;
 8015086:	2301      	movs	r3, #1
 8015088:	e020      	b.n	80150cc <HAL_UART_Transmit_DMA+0xe4>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 801508a:	68fb      	ldr	r3, [r7, #12]
 801508c:	681b      	ldr	r3, [r3, #0]
 801508e:	2240      	movs	r2, #64	@ 0x40
 8015090:	621a      	str	r2, [r3, #32]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8015092:	68fb      	ldr	r3, [r7, #12]
 8015094:	681b      	ldr	r3, [r3, #0]
 8015096:	3308      	adds	r3, #8
 8015098:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801509a:	697b      	ldr	r3, [r7, #20]
 801509c:	e853 3f00 	ldrex	r3, [r3]
 80150a0:	613b      	str	r3, [r7, #16]
   return(result);
 80150a2:	693b      	ldr	r3, [r7, #16]
 80150a4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80150a8:	627b      	str	r3, [r7, #36]	@ 0x24
 80150aa:	68fb      	ldr	r3, [r7, #12]
 80150ac:	681b      	ldr	r3, [r3, #0]
 80150ae:	3308      	adds	r3, #8
 80150b0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80150b2:	623a      	str	r2, [r7, #32]
 80150b4:	61fb      	str	r3, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80150b6:	69f9      	ldr	r1, [r7, #28]
 80150b8:	6a3a      	ldr	r2, [r7, #32]
 80150ba:	e841 2300 	strex	r3, r2, [r1]
 80150be:	61bb      	str	r3, [r7, #24]
   return(result);
 80150c0:	69bb      	ldr	r3, [r7, #24]
 80150c2:	2b00      	cmp	r3, #0
 80150c4:	d1e5      	bne.n	8015092 <HAL_UART_Transmit_DMA+0xaa>

    return HAL_OK;
 80150c6:	2300      	movs	r3, #0
 80150c8:	e000      	b.n	80150cc <HAL_UART_Transmit_DMA+0xe4>
  }
  else
  {
    return HAL_BUSY;
 80150ca:	2302      	movs	r3, #2
  }
}
 80150cc:	4618      	mov	r0, r3
 80150ce:	3728      	adds	r7, #40	@ 0x28
 80150d0:	46bd      	mov	sp, r7
 80150d2:	bd80      	pop	{r7, pc}
 80150d4:	08015d75 	.word	0x08015d75
 80150d8:	08015e0f 	.word	0x08015e0f
 80150dc:	08015f95 	.word	0x08015f95

080150e0 <HAL_UART_DMAStop>:
  * @brief Stop the DMA Transfer.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DMAStop(UART_HandleTypeDef *huart)
{
 80150e0:	b580      	push	{r7, lr}
 80150e2:	b090      	sub	sp, #64	@ 0x40
 80150e4:	af00      	add	r7, sp, #0
 80150e6:	6078      	str	r0, [r7, #4]
     HAL_UART_TxHalfCpltCallback / HAL_UART_RxHalfCpltCallback:
     indeed, when HAL_DMA_Abort() API is called, the DMA TX/RX Transfer or Half Transfer complete
     interrupt is generated if the DMA transfer interruption occurs at the middle or at the end of
     the stream and the corresponding call back is executed. */

  const HAL_UART_StateTypeDef gstate = huart->gState;
 80150e8:	687b      	ldr	r3, [r7, #4]
 80150ea:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80150ec:	63fb      	str	r3, [r7, #60]	@ 0x3c
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 80150ee:	687b      	ldr	r3, [r7, #4]
 80150f0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80150f4:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 80150f6:	687b      	ldr	r3, [r7, #4]
 80150f8:	681b      	ldr	r3, [r3, #0]
 80150fa:	689b      	ldr	r3, [r3, #8]
 80150fc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8015100:	2b80      	cmp	r3, #128	@ 0x80
 8015102:	d139      	bne.n	8015178 <HAL_UART_DMAStop+0x98>
 8015104:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8015106:	2b21      	cmp	r3, #33	@ 0x21
 8015108:	d136      	bne.n	8015178 <HAL_UART_DMAStop+0x98>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 801510a:	687b      	ldr	r3, [r7, #4]
 801510c:	681b      	ldr	r3, [r3, #0]
 801510e:	3308      	adds	r3, #8
 8015110:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8015112:	6a3b      	ldr	r3, [r7, #32]
 8015114:	e853 3f00 	ldrex	r3, [r3]
 8015118:	61fb      	str	r3, [r7, #28]
   return(result);
 801511a:	69fb      	ldr	r3, [r7, #28]
 801511c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8015120:	637b      	str	r3, [r7, #52]	@ 0x34
 8015122:	687b      	ldr	r3, [r7, #4]
 8015124:	681b      	ldr	r3, [r3, #0]
 8015126:	3308      	adds	r3, #8
 8015128:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 801512a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 801512c:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801512e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8015130:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8015132:	e841 2300 	strex	r3, r2, [r1]
 8015136:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8015138:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801513a:	2b00      	cmp	r3, #0
 801513c:	d1e5      	bne.n	801510a <HAL_UART_DMAStop+0x2a>

    /* Abort the UART DMA Tx channel */
    if (huart->hdmatx != NULL)
 801513e:	687b      	ldr	r3, [r7, #4]
 8015140:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8015142:	2b00      	cmp	r3, #0
 8015144:	d015      	beq.n	8015172 <HAL_UART_DMAStop+0x92>
    {
      if (HAL_DMA_Abort(huart->hdmatx) != HAL_OK)
 8015146:	687b      	ldr	r3, [r7, #4]
 8015148:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801514a:	4618      	mov	r0, r3
 801514c:	f7f8 f920 	bl	800d390 <HAL_DMA_Abort>
 8015150:	4603      	mov	r3, r0
 8015152:	2b00      	cmp	r3, #0
 8015154:	d00d      	beq.n	8015172 <HAL_UART_DMAStop+0x92>
      {
        if (HAL_DMA_GetError(huart->hdmatx) == HAL_DMA_ERROR_TIMEOUT)
 8015156:	687b      	ldr	r3, [r7, #4]
 8015158:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801515a:	4618      	mov	r0, r3
 801515c:	f7f8 fa05 	bl	800d56a <HAL_DMA_GetError>
 8015160:	4603      	mov	r3, r0
 8015162:	2b20      	cmp	r3, #32
 8015164:	d105      	bne.n	8015172 <HAL_UART_DMAStop+0x92>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 8015166:	687b      	ldr	r3, [r7, #4]
 8015168:	2210      	movs	r2, #16
 801516a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 801516e:	2303      	movs	r3, #3
 8015170:	e044      	b.n	80151fc <HAL_UART_DMAStop+0x11c>
        }
      }
    }

    UART_EndTxTransfer(huart);
 8015172:	6878      	ldr	r0, [r7, #4]
 8015174:	f000 fd74 	bl	8015c60 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8015178:	687b      	ldr	r3, [r7, #4]
 801517a:	681b      	ldr	r3, [r3, #0]
 801517c:	689b      	ldr	r3, [r3, #8]
 801517e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8015182:	2b40      	cmp	r3, #64	@ 0x40
 8015184:	d139      	bne.n	80151fa <HAL_UART_DMAStop+0x11a>
 8015186:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8015188:	2b22      	cmp	r3, #34	@ 0x22
 801518a:	d136      	bne.n	80151fa <HAL_UART_DMAStop+0x11a>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 801518c:	687b      	ldr	r3, [r7, #4]
 801518e:	681b      	ldr	r3, [r3, #0]
 8015190:	3308      	adds	r3, #8
 8015192:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8015194:	68fb      	ldr	r3, [r7, #12]
 8015196:	e853 3f00 	ldrex	r3, [r3]
 801519a:	60bb      	str	r3, [r7, #8]
   return(result);
 801519c:	68bb      	ldr	r3, [r7, #8]
 801519e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80151a2:	633b      	str	r3, [r7, #48]	@ 0x30
 80151a4:	687b      	ldr	r3, [r7, #4]
 80151a6:	681b      	ldr	r3, [r3, #0]
 80151a8:	3308      	adds	r3, #8
 80151aa:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80151ac:	61ba      	str	r2, [r7, #24]
 80151ae:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80151b0:	6979      	ldr	r1, [r7, #20]
 80151b2:	69ba      	ldr	r2, [r7, #24]
 80151b4:	e841 2300 	strex	r3, r2, [r1]
 80151b8:	613b      	str	r3, [r7, #16]
   return(result);
 80151ba:	693b      	ldr	r3, [r7, #16]
 80151bc:	2b00      	cmp	r3, #0
 80151be:	d1e5      	bne.n	801518c <HAL_UART_DMAStop+0xac>

    /* Abort the UART DMA Rx channel */
    if (huart->hdmarx != NULL)
 80151c0:	687b      	ldr	r3, [r7, #4]
 80151c2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80151c4:	2b00      	cmp	r3, #0
 80151c6:	d015      	beq.n	80151f4 <HAL_UART_DMAStop+0x114>
    {
      if (HAL_DMA_Abort(huart->hdmarx) != HAL_OK)
 80151c8:	687b      	ldr	r3, [r7, #4]
 80151ca:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80151cc:	4618      	mov	r0, r3
 80151ce:	f7f8 f8df 	bl	800d390 <HAL_DMA_Abort>
 80151d2:	4603      	mov	r3, r0
 80151d4:	2b00      	cmp	r3, #0
 80151d6:	d00d      	beq.n	80151f4 <HAL_UART_DMAStop+0x114>
      {
        if (HAL_DMA_GetError(huart->hdmarx) == HAL_DMA_ERROR_TIMEOUT)
 80151d8:	687b      	ldr	r3, [r7, #4]
 80151da:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80151dc:	4618      	mov	r0, r3
 80151de:	f7f8 f9c4 	bl	800d56a <HAL_DMA_GetError>
 80151e2:	4603      	mov	r3, r0
 80151e4:	2b20      	cmp	r3, #32
 80151e6:	d105      	bne.n	80151f4 <HAL_UART_DMAStop+0x114>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 80151e8:	687b      	ldr	r3, [r7, #4]
 80151ea:	2210      	movs	r2, #16
 80151ec:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 80151f0:	2303      	movs	r3, #3
 80151f2:	e003      	b.n	80151fc <HAL_UART_DMAStop+0x11c>
        }
      }
    }

    UART_EndRxTransfer(huart);
 80151f4:	6878      	ldr	r0, [r7, #4]
 80151f6:	f000 fd59 	bl	8015cac <UART_EndRxTransfer>
  }

  return HAL_OK;
 80151fa:	2300      	movs	r3, #0
}
 80151fc:	4618      	mov	r0, r3
 80151fe:	3740      	adds	r7, #64	@ 0x40
 8015200:	46bd      	mov	sp, r7
 8015202:	bd80      	pop	{r7, pc}

08015204 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8015204:	b480      	push	{r7}
 8015206:	b083      	sub	sp, #12
 8015208:	af00      	add	r7, sp, #0
 801520a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 801520c:	bf00      	nop
 801520e:	370c      	adds	r7, #12
 8015210:	46bd      	mov	sp, r7
 8015212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015216:	4770      	bx	lr

08015218 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8015218:	b480      	push	{r7}
 801521a:	b083      	sub	sp, #12
 801521c:	af00      	add	r7, sp, #0
 801521e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 8015220:	bf00      	nop
 8015222:	370c      	adds	r7, #12
 8015224:	46bd      	mov	sp, r7
 8015226:	f85d 7b04 	ldr.w	r7, [sp], #4
 801522a:	4770      	bx	lr

0801522c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 801522c:	b480      	push	{r7}
 801522e:	b083      	sub	sp, #12
 8015230:	af00      	add	r7, sp, #0
 8015232:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8015234:	bf00      	nop
 8015236:	370c      	adds	r7, #12
 8015238:	46bd      	mov	sp, r7
 801523a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801523e:	4770      	bx	lr

08015240 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8015240:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8015244:	b08a      	sub	sp, #40	@ 0x28
 8015246:	af00      	add	r7, sp, #0
 8015248:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 801524a:	2300      	movs	r3, #0
 801524c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8015250:	68fb      	ldr	r3, [r7, #12]
 8015252:	689a      	ldr	r2, [r3, #8]
 8015254:	68fb      	ldr	r3, [r7, #12]
 8015256:	691b      	ldr	r3, [r3, #16]
 8015258:	431a      	orrs	r2, r3
 801525a:	68fb      	ldr	r3, [r7, #12]
 801525c:	695b      	ldr	r3, [r3, #20]
 801525e:	431a      	orrs	r2, r3
 8015260:	68fb      	ldr	r3, [r7, #12]
 8015262:	69db      	ldr	r3, [r3, #28]
 8015264:	4313      	orrs	r3, r2
 8015266:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8015268:	68fb      	ldr	r3, [r7, #12]
 801526a:	681b      	ldr	r3, [r3, #0]
 801526c:	681a      	ldr	r2, [r3, #0]
 801526e:	4ba4      	ldr	r3, [pc, #656]	@ (8015500 <UART_SetConfig+0x2c0>)
 8015270:	4013      	ands	r3, r2
 8015272:	68fa      	ldr	r2, [r7, #12]
 8015274:	6812      	ldr	r2, [r2, #0]
 8015276:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8015278:	430b      	orrs	r3, r1
 801527a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 801527c:	68fb      	ldr	r3, [r7, #12]
 801527e:	681b      	ldr	r3, [r3, #0]
 8015280:	685b      	ldr	r3, [r3, #4]
 8015282:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8015286:	68fb      	ldr	r3, [r7, #12]
 8015288:	68da      	ldr	r2, [r3, #12]
 801528a:	68fb      	ldr	r3, [r7, #12]
 801528c:	681b      	ldr	r3, [r3, #0]
 801528e:	430a      	orrs	r2, r1
 8015290:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8015292:	68fb      	ldr	r3, [r7, #12]
 8015294:	699b      	ldr	r3, [r3, #24]
 8015296:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8015298:	68fb      	ldr	r3, [r7, #12]
 801529a:	681b      	ldr	r3, [r3, #0]
 801529c:	4a99      	ldr	r2, [pc, #612]	@ (8015504 <UART_SetConfig+0x2c4>)
 801529e:	4293      	cmp	r3, r2
 80152a0:	d004      	beq.n	80152ac <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80152a2:	68fb      	ldr	r3, [r7, #12]
 80152a4:	6a1b      	ldr	r3, [r3, #32]
 80152a6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80152a8:	4313      	orrs	r3, r2
 80152aa:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80152ac:	68fb      	ldr	r3, [r7, #12]
 80152ae:	681b      	ldr	r3, [r3, #0]
 80152b0:	689b      	ldr	r3, [r3, #8]
 80152b2:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 80152b6:	68fb      	ldr	r3, [r7, #12]
 80152b8:	681b      	ldr	r3, [r3, #0]
 80152ba:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80152bc:	430a      	orrs	r2, r1
 80152be:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80152c0:	68fb      	ldr	r3, [r7, #12]
 80152c2:	681b      	ldr	r3, [r3, #0]
 80152c4:	4a90      	ldr	r2, [pc, #576]	@ (8015508 <UART_SetConfig+0x2c8>)
 80152c6:	4293      	cmp	r3, r2
 80152c8:	d126      	bne.n	8015318 <UART_SetConfig+0xd8>
 80152ca:	4b90      	ldr	r3, [pc, #576]	@ (801550c <UART_SetConfig+0x2cc>)
 80152cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80152d0:	f003 0303 	and.w	r3, r3, #3
 80152d4:	2b03      	cmp	r3, #3
 80152d6:	d81b      	bhi.n	8015310 <UART_SetConfig+0xd0>
 80152d8:	a201      	add	r2, pc, #4	@ (adr r2, 80152e0 <UART_SetConfig+0xa0>)
 80152da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80152de:	bf00      	nop
 80152e0:	080152f1 	.word	0x080152f1
 80152e4:	08015301 	.word	0x08015301
 80152e8:	080152f9 	.word	0x080152f9
 80152ec:	08015309 	.word	0x08015309
 80152f0:	2301      	movs	r3, #1
 80152f2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80152f6:	e116      	b.n	8015526 <UART_SetConfig+0x2e6>
 80152f8:	2302      	movs	r3, #2
 80152fa:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80152fe:	e112      	b.n	8015526 <UART_SetConfig+0x2e6>
 8015300:	2304      	movs	r3, #4
 8015302:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8015306:	e10e      	b.n	8015526 <UART_SetConfig+0x2e6>
 8015308:	2308      	movs	r3, #8
 801530a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 801530e:	e10a      	b.n	8015526 <UART_SetConfig+0x2e6>
 8015310:	2310      	movs	r3, #16
 8015312:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8015316:	e106      	b.n	8015526 <UART_SetConfig+0x2e6>
 8015318:	68fb      	ldr	r3, [r7, #12]
 801531a:	681b      	ldr	r3, [r3, #0]
 801531c:	4a7c      	ldr	r2, [pc, #496]	@ (8015510 <UART_SetConfig+0x2d0>)
 801531e:	4293      	cmp	r3, r2
 8015320:	d138      	bne.n	8015394 <UART_SetConfig+0x154>
 8015322:	4b7a      	ldr	r3, [pc, #488]	@ (801550c <UART_SetConfig+0x2cc>)
 8015324:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8015328:	f003 030c 	and.w	r3, r3, #12
 801532c:	2b0c      	cmp	r3, #12
 801532e:	d82d      	bhi.n	801538c <UART_SetConfig+0x14c>
 8015330:	a201      	add	r2, pc, #4	@ (adr r2, 8015338 <UART_SetConfig+0xf8>)
 8015332:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8015336:	bf00      	nop
 8015338:	0801536d 	.word	0x0801536d
 801533c:	0801538d 	.word	0x0801538d
 8015340:	0801538d 	.word	0x0801538d
 8015344:	0801538d 	.word	0x0801538d
 8015348:	0801537d 	.word	0x0801537d
 801534c:	0801538d 	.word	0x0801538d
 8015350:	0801538d 	.word	0x0801538d
 8015354:	0801538d 	.word	0x0801538d
 8015358:	08015375 	.word	0x08015375
 801535c:	0801538d 	.word	0x0801538d
 8015360:	0801538d 	.word	0x0801538d
 8015364:	0801538d 	.word	0x0801538d
 8015368:	08015385 	.word	0x08015385
 801536c:	2300      	movs	r3, #0
 801536e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8015372:	e0d8      	b.n	8015526 <UART_SetConfig+0x2e6>
 8015374:	2302      	movs	r3, #2
 8015376:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 801537a:	e0d4      	b.n	8015526 <UART_SetConfig+0x2e6>
 801537c:	2304      	movs	r3, #4
 801537e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8015382:	e0d0      	b.n	8015526 <UART_SetConfig+0x2e6>
 8015384:	2308      	movs	r3, #8
 8015386:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 801538a:	e0cc      	b.n	8015526 <UART_SetConfig+0x2e6>
 801538c:	2310      	movs	r3, #16
 801538e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8015392:	e0c8      	b.n	8015526 <UART_SetConfig+0x2e6>
 8015394:	68fb      	ldr	r3, [r7, #12]
 8015396:	681b      	ldr	r3, [r3, #0]
 8015398:	4a5e      	ldr	r2, [pc, #376]	@ (8015514 <UART_SetConfig+0x2d4>)
 801539a:	4293      	cmp	r3, r2
 801539c:	d125      	bne.n	80153ea <UART_SetConfig+0x1aa>
 801539e:	4b5b      	ldr	r3, [pc, #364]	@ (801550c <UART_SetConfig+0x2cc>)
 80153a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80153a4:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 80153a8:	2b30      	cmp	r3, #48	@ 0x30
 80153aa:	d016      	beq.n	80153da <UART_SetConfig+0x19a>
 80153ac:	2b30      	cmp	r3, #48	@ 0x30
 80153ae:	d818      	bhi.n	80153e2 <UART_SetConfig+0x1a2>
 80153b0:	2b20      	cmp	r3, #32
 80153b2:	d00a      	beq.n	80153ca <UART_SetConfig+0x18a>
 80153b4:	2b20      	cmp	r3, #32
 80153b6:	d814      	bhi.n	80153e2 <UART_SetConfig+0x1a2>
 80153b8:	2b00      	cmp	r3, #0
 80153ba:	d002      	beq.n	80153c2 <UART_SetConfig+0x182>
 80153bc:	2b10      	cmp	r3, #16
 80153be:	d008      	beq.n	80153d2 <UART_SetConfig+0x192>
 80153c0:	e00f      	b.n	80153e2 <UART_SetConfig+0x1a2>
 80153c2:	2300      	movs	r3, #0
 80153c4:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80153c8:	e0ad      	b.n	8015526 <UART_SetConfig+0x2e6>
 80153ca:	2302      	movs	r3, #2
 80153cc:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80153d0:	e0a9      	b.n	8015526 <UART_SetConfig+0x2e6>
 80153d2:	2304      	movs	r3, #4
 80153d4:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80153d8:	e0a5      	b.n	8015526 <UART_SetConfig+0x2e6>
 80153da:	2308      	movs	r3, #8
 80153dc:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80153e0:	e0a1      	b.n	8015526 <UART_SetConfig+0x2e6>
 80153e2:	2310      	movs	r3, #16
 80153e4:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80153e8:	e09d      	b.n	8015526 <UART_SetConfig+0x2e6>
 80153ea:	68fb      	ldr	r3, [r7, #12]
 80153ec:	681b      	ldr	r3, [r3, #0]
 80153ee:	4a4a      	ldr	r2, [pc, #296]	@ (8015518 <UART_SetConfig+0x2d8>)
 80153f0:	4293      	cmp	r3, r2
 80153f2:	d125      	bne.n	8015440 <UART_SetConfig+0x200>
 80153f4:	4b45      	ldr	r3, [pc, #276]	@ (801550c <UART_SetConfig+0x2cc>)
 80153f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80153fa:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 80153fe:	2bc0      	cmp	r3, #192	@ 0xc0
 8015400:	d016      	beq.n	8015430 <UART_SetConfig+0x1f0>
 8015402:	2bc0      	cmp	r3, #192	@ 0xc0
 8015404:	d818      	bhi.n	8015438 <UART_SetConfig+0x1f8>
 8015406:	2b80      	cmp	r3, #128	@ 0x80
 8015408:	d00a      	beq.n	8015420 <UART_SetConfig+0x1e0>
 801540a:	2b80      	cmp	r3, #128	@ 0x80
 801540c:	d814      	bhi.n	8015438 <UART_SetConfig+0x1f8>
 801540e:	2b00      	cmp	r3, #0
 8015410:	d002      	beq.n	8015418 <UART_SetConfig+0x1d8>
 8015412:	2b40      	cmp	r3, #64	@ 0x40
 8015414:	d008      	beq.n	8015428 <UART_SetConfig+0x1e8>
 8015416:	e00f      	b.n	8015438 <UART_SetConfig+0x1f8>
 8015418:	2300      	movs	r3, #0
 801541a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 801541e:	e082      	b.n	8015526 <UART_SetConfig+0x2e6>
 8015420:	2302      	movs	r3, #2
 8015422:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8015426:	e07e      	b.n	8015526 <UART_SetConfig+0x2e6>
 8015428:	2304      	movs	r3, #4
 801542a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 801542e:	e07a      	b.n	8015526 <UART_SetConfig+0x2e6>
 8015430:	2308      	movs	r3, #8
 8015432:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8015436:	e076      	b.n	8015526 <UART_SetConfig+0x2e6>
 8015438:	2310      	movs	r3, #16
 801543a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 801543e:	e072      	b.n	8015526 <UART_SetConfig+0x2e6>
 8015440:	68fb      	ldr	r3, [r7, #12]
 8015442:	681b      	ldr	r3, [r3, #0]
 8015444:	4a35      	ldr	r2, [pc, #212]	@ (801551c <UART_SetConfig+0x2dc>)
 8015446:	4293      	cmp	r3, r2
 8015448:	d12a      	bne.n	80154a0 <UART_SetConfig+0x260>
 801544a:	4b30      	ldr	r3, [pc, #192]	@ (801550c <UART_SetConfig+0x2cc>)
 801544c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8015450:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8015454:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8015458:	d01a      	beq.n	8015490 <UART_SetConfig+0x250>
 801545a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 801545e:	d81b      	bhi.n	8015498 <UART_SetConfig+0x258>
 8015460:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8015464:	d00c      	beq.n	8015480 <UART_SetConfig+0x240>
 8015466:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 801546a:	d815      	bhi.n	8015498 <UART_SetConfig+0x258>
 801546c:	2b00      	cmp	r3, #0
 801546e:	d003      	beq.n	8015478 <UART_SetConfig+0x238>
 8015470:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8015474:	d008      	beq.n	8015488 <UART_SetConfig+0x248>
 8015476:	e00f      	b.n	8015498 <UART_SetConfig+0x258>
 8015478:	2300      	movs	r3, #0
 801547a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 801547e:	e052      	b.n	8015526 <UART_SetConfig+0x2e6>
 8015480:	2302      	movs	r3, #2
 8015482:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8015486:	e04e      	b.n	8015526 <UART_SetConfig+0x2e6>
 8015488:	2304      	movs	r3, #4
 801548a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 801548e:	e04a      	b.n	8015526 <UART_SetConfig+0x2e6>
 8015490:	2308      	movs	r3, #8
 8015492:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8015496:	e046      	b.n	8015526 <UART_SetConfig+0x2e6>
 8015498:	2310      	movs	r3, #16
 801549a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 801549e:	e042      	b.n	8015526 <UART_SetConfig+0x2e6>
 80154a0:	68fb      	ldr	r3, [r7, #12]
 80154a2:	681b      	ldr	r3, [r3, #0]
 80154a4:	4a17      	ldr	r2, [pc, #92]	@ (8015504 <UART_SetConfig+0x2c4>)
 80154a6:	4293      	cmp	r3, r2
 80154a8:	d13a      	bne.n	8015520 <UART_SetConfig+0x2e0>
 80154aa:	4b18      	ldr	r3, [pc, #96]	@ (801550c <UART_SetConfig+0x2cc>)
 80154ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80154b0:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80154b4:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80154b8:	d01a      	beq.n	80154f0 <UART_SetConfig+0x2b0>
 80154ba:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80154be:	d81b      	bhi.n	80154f8 <UART_SetConfig+0x2b8>
 80154c0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80154c4:	d00c      	beq.n	80154e0 <UART_SetConfig+0x2a0>
 80154c6:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80154ca:	d815      	bhi.n	80154f8 <UART_SetConfig+0x2b8>
 80154cc:	2b00      	cmp	r3, #0
 80154ce:	d003      	beq.n	80154d8 <UART_SetConfig+0x298>
 80154d0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80154d4:	d008      	beq.n	80154e8 <UART_SetConfig+0x2a8>
 80154d6:	e00f      	b.n	80154f8 <UART_SetConfig+0x2b8>
 80154d8:	2300      	movs	r3, #0
 80154da:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80154de:	e022      	b.n	8015526 <UART_SetConfig+0x2e6>
 80154e0:	2302      	movs	r3, #2
 80154e2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80154e6:	e01e      	b.n	8015526 <UART_SetConfig+0x2e6>
 80154e8:	2304      	movs	r3, #4
 80154ea:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80154ee:	e01a      	b.n	8015526 <UART_SetConfig+0x2e6>
 80154f0:	2308      	movs	r3, #8
 80154f2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80154f6:	e016      	b.n	8015526 <UART_SetConfig+0x2e6>
 80154f8:	2310      	movs	r3, #16
 80154fa:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80154fe:	e012      	b.n	8015526 <UART_SetConfig+0x2e6>
 8015500:	efff69f3 	.word	0xefff69f3
 8015504:	40008000 	.word	0x40008000
 8015508:	40013800 	.word	0x40013800
 801550c:	40021000 	.word	0x40021000
 8015510:	40004400 	.word	0x40004400
 8015514:	40004800 	.word	0x40004800
 8015518:	40004c00 	.word	0x40004c00
 801551c:	40005000 	.word	0x40005000
 8015520:	2310      	movs	r3, #16
 8015522:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8015526:	68fb      	ldr	r3, [r7, #12]
 8015528:	681b      	ldr	r3, [r3, #0]
 801552a:	4a9f      	ldr	r2, [pc, #636]	@ (80157a8 <UART_SetConfig+0x568>)
 801552c:	4293      	cmp	r3, r2
 801552e:	d17a      	bne.n	8015626 <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8015530:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8015534:	2b08      	cmp	r3, #8
 8015536:	d824      	bhi.n	8015582 <UART_SetConfig+0x342>
 8015538:	a201      	add	r2, pc, #4	@ (adr r2, 8015540 <UART_SetConfig+0x300>)
 801553a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801553e:	bf00      	nop
 8015540:	08015565 	.word	0x08015565
 8015544:	08015583 	.word	0x08015583
 8015548:	0801556d 	.word	0x0801556d
 801554c:	08015583 	.word	0x08015583
 8015550:	08015573 	.word	0x08015573
 8015554:	08015583 	.word	0x08015583
 8015558:	08015583 	.word	0x08015583
 801555c:	08015583 	.word	0x08015583
 8015560:	0801557b 	.word	0x0801557b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8015564:	f7fb f8fe 	bl	8010764 <HAL_RCC_GetPCLK1Freq>
 8015568:	61f8      	str	r0, [r7, #28]
        break;
 801556a:	e010      	b.n	801558e <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 801556c:	4b8f      	ldr	r3, [pc, #572]	@ (80157ac <UART_SetConfig+0x56c>)
 801556e:	61fb      	str	r3, [r7, #28]
        break;
 8015570:	e00d      	b.n	801558e <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8015572:	f7fb f85f 	bl	8010634 <HAL_RCC_GetSysClockFreq>
 8015576:	61f8      	str	r0, [r7, #28]
        break;
 8015578:	e009      	b.n	801558e <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 801557a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 801557e:	61fb      	str	r3, [r7, #28]
        break;
 8015580:	e005      	b.n	801558e <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 8015582:	2300      	movs	r3, #0
 8015584:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8015586:	2301      	movs	r3, #1
 8015588:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 801558c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 801558e:	69fb      	ldr	r3, [r7, #28]
 8015590:	2b00      	cmp	r3, #0
 8015592:	f000 80fb 	beq.w	801578c <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8015596:	68fb      	ldr	r3, [r7, #12]
 8015598:	685a      	ldr	r2, [r3, #4]
 801559a:	4613      	mov	r3, r2
 801559c:	005b      	lsls	r3, r3, #1
 801559e:	4413      	add	r3, r2
 80155a0:	69fa      	ldr	r2, [r7, #28]
 80155a2:	429a      	cmp	r2, r3
 80155a4:	d305      	bcc.n	80155b2 <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 80155a6:	68fb      	ldr	r3, [r7, #12]
 80155a8:	685b      	ldr	r3, [r3, #4]
 80155aa:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80155ac:	69fa      	ldr	r2, [r7, #28]
 80155ae:	429a      	cmp	r2, r3
 80155b0:	d903      	bls.n	80155ba <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 80155b2:	2301      	movs	r3, #1
 80155b4:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 80155b8:	e0e8      	b.n	801578c <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 80155ba:	69fb      	ldr	r3, [r7, #28]
 80155bc:	2200      	movs	r2, #0
 80155be:	461c      	mov	r4, r3
 80155c0:	4615      	mov	r5, r2
 80155c2:	f04f 0200 	mov.w	r2, #0
 80155c6:	f04f 0300 	mov.w	r3, #0
 80155ca:	022b      	lsls	r3, r5, #8
 80155cc:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 80155d0:	0222      	lsls	r2, r4, #8
 80155d2:	68f9      	ldr	r1, [r7, #12]
 80155d4:	6849      	ldr	r1, [r1, #4]
 80155d6:	0849      	lsrs	r1, r1, #1
 80155d8:	2000      	movs	r0, #0
 80155da:	4688      	mov	r8, r1
 80155dc:	4681      	mov	r9, r0
 80155de:	eb12 0a08 	adds.w	sl, r2, r8
 80155e2:	eb43 0b09 	adc.w	fp, r3, r9
 80155e6:	68fb      	ldr	r3, [r7, #12]
 80155e8:	685b      	ldr	r3, [r3, #4]
 80155ea:	2200      	movs	r2, #0
 80155ec:	603b      	str	r3, [r7, #0]
 80155ee:	607a      	str	r2, [r7, #4]
 80155f0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80155f4:	4650      	mov	r0, sl
 80155f6:	4659      	mov	r1, fp
 80155f8:	f7eb fa40 	bl	8000a7c <__aeabi_uldivmod>
 80155fc:	4602      	mov	r2, r0
 80155fe:	460b      	mov	r3, r1
 8015600:	4613      	mov	r3, r2
 8015602:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8015604:	69bb      	ldr	r3, [r7, #24]
 8015606:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 801560a:	d308      	bcc.n	801561e <UART_SetConfig+0x3de>
 801560c:	69bb      	ldr	r3, [r7, #24]
 801560e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8015612:	d204      	bcs.n	801561e <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8015614:	68fb      	ldr	r3, [r7, #12]
 8015616:	681b      	ldr	r3, [r3, #0]
 8015618:	69ba      	ldr	r2, [r7, #24]
 801561a:	60da      	str	r2, [r3, #12]
 801561c:	e0b6      	b.n	801578c <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 801561e:	2301      	movs	r3, #1
 8015620:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8015624:	e0b2      	b.n	801578c <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8015626:	68fb      	ldr	r3, [r7, #12]
 8015628:	69db      	ldr	r3, [r3, #28]
 801562a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 801562e:	d15e      	bne.n	80156ee <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8015630:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8015634:	2b08      	cmp	r3, #8
 8015636:	d828      	bhi.n	801568a <UART_SetConfig+0x44a>
 8015638:	a201      	add	r2, pc, #4	@ (adr r2, 8015640 <UART_SetConfig+0x400>)
 801563a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801563e:	bf00      	nop
 8015640:	08015665 	.word	0x08015665
 8015644:	0801566d 	.word	0x0801566d
 8015648:	08015675 	.word	0x08015675
 801564c:	0801568b 	.word	0x0801568b
 8015650:	0801567b 	.word	0x0801567b
 8015654:	0801568b 	.word	0x0801568b
 8015658:	0801568b 	.word	0x0801568b
 801565c:	0801568b 	.word	0x0801568b
 8015660:	08015683 	.word	0x08015683
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8015664:	f7fb f87e 	bl	8010764 <HAL_RCC_GetPCLK1Freq>
 8015668:	61f8      	str	r0, [r7, #28]
        break;
 801566a:	e014      	b.n	8015696 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 801566c:	f7fb f890 	bl	8010790 <HAL_RCC_GetPCLK2Freq>
 8015670:	61f8      	str	r0, [r7, #28]
        break;
 8015672:	e010      	b.n	8015696 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8015674:	4b4d      	ldr	r3, [pc, #308]	@ (80157ac <UART_SetConfig+0x56c>)
 8015676:	61fb      	str	r3, [r7, #28]
        break;
 8015678:	e00d      	b.n	8015696 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 801567a:	f7fa ffdb 	bl	8010634 <HAL_RCC_GetSysClockFreq>
 801567e:	61f8      	str	r0, [r7, #28]
        break;
 8015680:	e009      	b.n	8015696 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8015682:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8015686:	61fb      	str	r3, [r7, #28]
        break;
 8015688:	e005      	b.n	8015696 <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 801568a:	2300      	movs	r3, #0
 801568c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 801568e:	2301      	movs	r3, #1
 8015690:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8015694:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8015696:	69fb      	ldr	r3, [r7, #28]
 8015698:	2b00      	cmp	r3, #0
 801569a:	d077      	beq.n	801578c <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 801569c:	69fb      	ldr	r3, [r7, #28]
 801569e:	005a      	lsls	r2, r3, #1
 80156a0:	68fb      	ldr	r3, [r7, #12]
 80156a2:	685b      	ldr	r3, [r3, #4]
 80156a4:	085b      	lsrs	r3, r3, #1
 80156a6:	441a      	add	r2, r3
 80156a8:	68fb      	ldr	r3, [r7, #12]
 80156aa:	685b      	ldr	r3, [r3, #4]
 80156ac:	fbb2 f3f3 	udiv	r3, r2, r3
 80156b0:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80156b2:	69bb      	ldr	r3, [r7, #24]
 80156b4:	2b0f      	cmp	r3, #15
 80156b6:	d916      	bls.n	80156e6 <UART_SetConfig+0x4a6>
 80156b8:	69bb      	ldr	r3, [r7, #24]
 80156ba:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80156be:	d212      	bcs.n	80156e6 <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80156c0:	69bb      	ldr	r3, [r7, #24]
 80156c2:	b29b      	uxth	r3, r3
 80156c4:	f023 030f 	bic.w	r3, r3, #15
 80156c8:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80156ca:	69bb      	ldr	r3, [r7, #24]
 80156cc:	085b      	lsrs	r3, r3, #1
 80156ce:	b29b      	uxth	r3, r3
 80156d0:	f003 0307 	and.w	r3, r3, #7
 80156d4:	b29a      	uxth	r2, r3
 80156d6:	8afb      	ldrh	r3, [r7, #22]
 80156d8:	4313      	orrs	r3, r2
 80156da:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 80156dc:	68fb      	ldr	r3, [r7, #12]
 80156de:	681b      	ldr	r3, [r3, #0]
 80156e0:	8afa      	ldrh	r2, [r7, #22]
 80156e2:	60da      	str	r2, [r3, #12]
 80156e4:	e052      	b.n	801578c <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 80156e6:	2301      	movs	r3, #1
 80156e8:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 80156ec:	e04e      	b.n	801578c <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 80156ee:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80156f2:	2b08      	cmp	r3, #8
 80156f4:	d827      	bhi.n	8015746 <UART_SetConfig+0x506>
 80156f6:	a201      	add	r2, pc, #4	@ (adr r2, 80156fc <UART_SetConfig+0x4bc>)
 80156f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80156fc:	08015721 	.word	0x08015721
 8015700:	08015729 	.word	0x08015729
 8015704:	08015731 	.word	0x08015731
 8015708:	08015747 	.word	0x08015747
 801570c:	08015737 	.word	0x08015737
 8015710:	08015747 	.word	0x08015747
 8015714:	08015747 	.word	0x08015747
 8015718:	08015747 	.word	0x08015747
 801571c:	0801573f 	.word	0x0801573f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8015720:	f7fb f820 	bl	8010764 <HAL_RCC_GetPCLK1Freq>
 8015724:	61f8      	str	r0, [r7, #28]
        break;
 8015726:	e014      	b.n	8015752 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8015728:	f7fb f832 	bl	8010790 <HAL_RCC_GetPCLK2Freq>
 801572c:	61f8      	str	r0, [r7, #28]
        break;
 801572e:	e010      	b.n	8015752 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8015730:	4b1e      	ldr	r3, [pc, #120]	@ (80157ac <UART_SetConfig+0x56c>)
 8015732:	61fb      	str	r3, [r7, #28]
        break;
 8015734:	e00d      	b.n	8015752 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8015736:	f7fa ff7d 	bl	8010634 <HAL_RCC_GetSysClockFreq>
 801573a:	61f8      	str	r0, [r7, #28]
        break;
 801573c:	e009      	b.n	8015752 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 801573e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8015742:	61fb      	str	r3, [r7, #28]
        break;
 8015744:	e005      	b.n	8015752 <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 8015746:	2300      	movs	r3, #0
 8015748:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 801574a:	2301      	movs	r3, #1
 801574c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8015750:	bf00      	nop
    }

    if (pclk != 0U)
 8015752:	69fb      	ldr	r3, [r7, #28]
 8015754:	2b00      	cmp	r3, #0
 8015756:	d019      	beq.n	801578c <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8015758:	68fb      	ldr	r3, [r7, #12]
 801575a:	685b      	ldr	r3, [r3, #4]
 801575c:	085a      	lsrs	r2, r3, #1
 801575e:	69fb      	ldr	r3, [r7, #28]
 8015760:	441a      	add	r2, r3
 8015762:	68fb      	ldr	r3, [r7, #12]
 8015764:	685b      	ldr	r3, [r3, #4]
 8015766:	fbb2 f3f3 	udiv	r3, r2, r3
 801576a:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 801576c:	69bb      	ldr	r3, [r7, #24]
 801576e:	2b0f      	cmp	r3, #15
 8015770:	d909      	bls.n	8015786 <UART_SetConfig+0x546>
 8015772:	69bb      	ldr	r3, [r7, #24]
 8015774:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8015778:	d205      	bcs.n	8015786 <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 801577a:	69bb      	ldr	r3, [r7, #24]
 801577c:	b29a      	uxth	r2, r3
 801577e:	68fb      	ldr	r3, [r7, #12]
 8015780:	681b      	ldr	r3, [r3, #0]
 8015782:	60da      	str	r2, [r3, #12]
 8015784:	e002      	b.n	801578c <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8015786:	2301      	movs	r3, #1
 8015788:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 801578c:	68fb      	ldr	r3, [r7, #12]
 801578e:	2200      	movs	r2, #0
 8015790:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8015792:	68fb      	ldr	r3, [r7, #12]
 8015794:	2200      	movs	r2, #0
 8015796:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8015798:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 801579c:	4618      	mov	r0, r3
 801579e:	3728      	adds	r7, #40	@ 0x28
 80157a0:	46bd      	mov	sp, r7
 80157a2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80157a6:	bf00      	nop
 80157a8:	40008000 	.word	0x40008000
 80157ac:	00f42400 	.word	0x00f42400

080157b0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80157b0:	b480      	push	{r7}
 80157b2:	b083      	sub	sp, #12
 80157b4:	af00      	add	r7, sp, #0
 80157b6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80157b8:	687b      	ldr	r3, [r7, #4]
 80157ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80157bc:	f003 0308 	and.w	r3, r3, #8
 80157c0:	2b00      	cmp	r3, #0
 80157c2:	d00a      	beq.n	80157da <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80157c4:	687b      	ldr	r3, [r7, #4]
 80157c6:	681b      	ldr	r3, [r3, #0]
 80157c8:	685b      	ldr	r3, [r3, #4]
 80157ca:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 80157ce:	687b      	ldr	r3, [r7, #4]
 80157d0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80157d2:	687b      	ldr	r3, [r7, #4]
 80157d4:	681b      	ldr	r3, [r3, #0]
 80157d6:	430a      	orrs	r2, r1
 80157d8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80157da:	687b      	ldr	r3, [r7, #4]
 80157dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80157de:	f003 0301 	and.w	r3, r3, #1
 80157e2:	2b00      	cmp	r3, #0
 80157e4:	d00a      	beq.n	80157fc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80157e6:	687b      	ldr	r3, [r7, #4]
 80157e8:	681b      	ldr	r3, [r3, #0]
 80157ea:	685b      	ldr	r3, [r3, #4]
 80157ec:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 80157f0:	687b      	ldr	r3, [r7, #4]
 80157f2:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80157f4:	687b      	ldr	r3, [r7, #4]
 80157f6:	681b      	ldr	r3, [r3, #0]
 80157f8:	430a      	orrs	r2, r1
 80157fa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80157fc:	687b      	ldr	r3, [r7, #4]
 80157fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8015800:	f003 0302 	and.w	r3, r3, #2
 8015804:	2b00      	cmp	r3, #0
 8015806:	d00a      	beq.n	801581e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8015808:	687b      	ldr	r3, [r7, #4]
 801580a:	681b      	ldr	r3, [r3, #0]
 801580c:	685b      	ldr	r3, [r3, #4]
 801580e:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8015812:	687b      	ldr	r3, [r7, #4]
 8015814:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8015816:	687b      	ldr	r3, [r7, #4]
 8015818:	681b      	ldr	r3, [r3, #0]
 801581a:	430a      	orrs	r2, r1
 801581c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 801581e:	687b      	ldr	r3, [r7, #4]
 8015820:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8015822:	f003 0304 	and.w	r3, r3, #4
 8015826:	2b00      	cmp	r3, #0
 8015828:	d00a      	beq.n	8015840 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 801582a:	687b      	ldr	r3, [r7, #4]
 801582c:	681b      	ldr	r3, [r3, #0]
 801582e:	685b      	ldr	r3, [r3, #4]
 8015830:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8015834:	687b      	ldr	r3, [r7, #4]
 8015836:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8015838:	687b      	ldr	r3, [r7, #4]
 801583a:	681b      	ldr	r3, [r3, #0]
 801583c:	430a      	orrs	r2, r1
 801583e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8015840:	687b      	ldr	r3, [r7, #4]
 8015842:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8015844:	f003 0310 	and.w	r3, r3, #16
 8015848:	2b00      	cmp	r3, #0
 801584a:	d00a      	beq.n	8015862 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 801584c:	687b      	ldr	r3, [r7, #4]
 801584e:	681b      	ldr	r3, [r3, #0]
 8015850:	689b      	ldr	r3, [r3, #8]
 8015852:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8015856:	687b      	ldr	r3, [r7, #4]
 8015858:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 801585a:	687b      	ldr	r3, [r7, #4]
 801585c:	681b      	ldr	r3, [r3, #0]
 801585e:	430a      	orrs	r2, r1
 8015860:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8015862:	687b      	ldr	r3, [r7, #4]
 8015864:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8015866:	f003 0320 	and.w	r3, r3, #32
 801586a:	2b00      	cmp	r3, #0
 801586c:	d00a      	beq.n	8015884 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 801586e:	687b      	ldr	r3, [r7, #4]
 8015870:	681b      	ldr	r3, [r3, #0]
 8015872:	689b      	ldr	r3, [r3, #8]
 8015874:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8015878:	687b      	ldr	r3, [r7, #4]
 801587a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 801587c:	687b      	ldr	r3, [r7, #4]
 801587e:	681b      	ldr	r3, [r3, #0]
 8015880:	430a      	orrs	r2, r1
 8015882:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8015884:	687b      	ldr	r3, [r7, #4]
 8015886:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8015888:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 801588c:	2b00      	cmp	r3, #0
 801588e:	d01a      	beq.n	80158c6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8015890:	687b      	ldr	r3, [r7, #4]
 8015892:	681b      	ldr	r3, [r3, #0]
 8015894:	685b      	ldr	r3, [r3, #4]
 8015896:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 801589a:	687b      	ldr	r3, [r7, #4]
 801589c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 801589e:	687b      	ldr	r3, [r7, #4]
 80158a0:	681b      	ldr	r3, [r3, #0]
 80158a2:	430a      	orrs	r2, r1
 80158a4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80158a6:	687b      	ldr	r3, [r7, #4]
 80158a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80158aa:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80158ae:	d10a      	bne.n	80158c6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80158b0:	687b      	ldr	r3, [r7, #4]
 80158b2:	681b      	ldr	r3, [r3, #0]
 80158b4:	685b      	ldr	r3, [r3, #4]
 80158b6:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 80158ba:	687b      	ldr	r3, [r7, #4]
 80158bc:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80158be:	687b      	ldr	r3, [r7, #4]
 80158c0:	681b      	ldr	r3, [r3, #0]
 80158c2:	430a      	orrs	r2, r1
 80158c4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80158c6:	687b      	ldr	r3, [r7, #4]
 80158c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80158ca:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80158ce:	2b00      	cmp	r3, #0
 80158d0:	d00a      	beq.n	80158e8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80158d2:	687b      	ldr	r3, [r7, #4]
 80158d4:	681b      	ldr	r3, [r3, #0]
 80158d6:	685b      	ldr	r3, [r3, #4]
 80158d8:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 80158dc:	687b      	ldr	r3, [r7, #4]
 80158de:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80158e0:	687b      	ldr	r3, [r7, #4]
 80158e2:	681b      	ldr	r3, [r3, #0]
 80158e4:	430a      	orrs	r2, r1
 80158e6:	605a      	str	r2, [r3, #4]
  }
}
 80158e8:	bf00      	nop
 80158ea:	370c      	adds	r7, #12
 80158ec:	46bd      	mov	sp, r7
 80158ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80158f2:	4770      	bx	lr

080158f4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80158f4:	b580      	push	{r7, lr}
 80158f6:	b098      	sub	sp, #96	@ 0x60
 80158f8:	af02      	add	r7, sp, #8
 80158fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80158fc:	687b      	ldr	r3, [r7, #4]
 80158fe:	2200      	movs	r2, #0
 8015900:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8015904:	f7f5 fcfe 	bl	800b304 <HAL_GetTick>
 8015908:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 801590a:	687b      	ldr	r3, [r7, #4]
 801590c:	681b      	ldr	r3, [r3, #0]
 801590e:	681b      	ldr	r3, [r3, #0]
 8015910:	f003 0308 	and.w	r3, r3, #8
 8015914:	2b08      	cmp	r3, #8
 8015916:	d12e      	bne.n	8015976 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8015918:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 801591c:	9300      	str	r3, [sp, #0]
 801591e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8015920:	2200      	movs	r2, #0
 8015922:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8015926:	6878      	ldr	r0, [r7, #4]
 8015928:	f000 f88c 	bl	8015a44 <UART_WaitOnFlagUntilTimeout>
 801592c:	4603      	mov	r3, r0
 801592e:	2b00      	cmp	r3, #0
 8015930:	d021      	beq.n	8015976 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8015932:	687b      	ldr	r3, [r7, #4]
 8015934:	681b      	ldr	r3, [r3, #0]
 8015936:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8015938:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801593a:	e853 3f00 	ldrex	r3, [r3]
 801593e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8015940:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8015942:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8015946:	653b      	str	r3, [r7, #80]	@ 0x50
 8015948:	687b      	ldr	r3, [r7, #4]
 801594a:	681b      	ldr	r3, [r3, #0]
 801594c:	461a      	mov	r2, r3
 801594e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8015950:	647b      	str	r3, [r7, #68]	@ 0x44
 8015952:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8015954:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8015956:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8015958:	e841 2300 	strex	r3, r2, [r1]
 801595c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 801595e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8015960:	2b00      	cmp	r3, #0
 8015962:	d1e6      	bne.n	8015932 <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8015964:	687b      	ldr	r3, [r7, #4]
 8015966:	2220      	movs	r2, #32
 8015968:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 801596a:	687b      	ldr	r3, [r7, #4]
 801596c:	2200      	movs	r2, #0
 801596e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8015972:	2303      	movs	r3, #3
 8015974:	e062      	b.n	8015a3c <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8015976:	687b      	ldr	r3, [r7, #4]
 8015978:	681b      	ldr	r3, [r3, #0]
 801597a:	681b      	ldr	r3, [r3, #0]
 801597c:	f003 0304 	and.w	r3, r3, #4
 8015980:	2b04      	cmp	r3, #4
 8015982:	d149      	bne.n	8015a18 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8015984:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8015988:	9300      	str	r3, [sp, #0]
 801598a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801598c:	2200      	movs	r2, #0
 801598e:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8015992:	6878      	ldr	r0, [r7, #4]
 8015994:	f000 f856 	bl	8015a44 <UART_WaitOnFlagUntilTimeout>
 8015998:	4603      	mov	r3, r0
 801599a:	2b00      	cmp	r3, #0
 801599c:	d03c      	beq.n	8015a18 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 801599e:	687b      	ldr	r3, [r7, #4]
 80159a0:	681b      	ldr	r3, [r3, #0]
 80159a2:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80159a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80159a6:	e853 3f00 	ldrex	r3, [r3]
 80159aa:	623b      	str	r3, [r7, #32]
   return(result);
 80159ac:	6a3b      	ldr	r3, [r7, #32]
 80159ae:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80159b2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80159b4:	687b      	ldr	r3, [r7, #4]
 80159b6:	681b      	ldr	r3, [r3, #0]
 80159b8:	461a      	mov	r2, r3
 80159ba:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80159bc:	633b      	str	r3, [r7, #48]	@ 0x30
 80159be:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80159c0:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80159c2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80159c4:	e841 2300 	strex	r3, r2, [r1]
 80159c8:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80159ca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80159cc:	2b00      	cmp	r3, #0
 80159ce:	d1e6      	bne.n	801599e <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80159d0:	687b      	ldr	r3, [r7, #4]
 80159d2:	681b      	ldr	r3, [r3, #0]
 80159d4:	3308      	adds	r3, #8
 80159d6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80159d8:	693b      	ldr	r3, [r7, #16]
 80159da:	e853 3f00 	ldrex	r3, [r3]
 80159de:	60fb      	str	r3, [r7, #12]
   return(result);
 80159e0:	68fb      	ldr	r3, [r7, #12]
 80159e2:	f023 0301 	bic.w	r3, r3, #1
 80159e6:	64bb      	str	r3, [r7, #72]	@ 0x48
 80159e8:	687b      	ldr	r3, [r7, #4]
 80159ea:	681b      	ldr	r3, [r3, #0]
 80159ec:	3308      	adds	r3, #8
 80159ee:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80159f0:	61fa      	str	r2, [r7, #28]
 80159f2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80159f4:	69b9      	ldr	r1, [r7, #24]
 80159f6:	69fa      	ldr	r2, [r7, #28]
 80159f8:	e841 2300 	strex	r3, r2, [r1]
 80159fc:	617b      	str	r3, [r7, #20]
   return(result);
 80159fe:	697b      	ldr	r3, [r7, #20]
 8015a00:	2b00      	cmp	r3, #0
 8015a02:	d1e5      	bne.n	80159d0 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8015a04:	687b      	ldr	r3, [r7, #4]
 8015a06:	2220      	movs	r2, #32
 8015a08:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8015a0c:	687b      	ldr	r3, [r7, #4]
 8015a0e:	2200      	movs	r2, #0
 8015a10:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8015a14:	2303      	movs	r3, #3
 8015a16:	e011      	b.n	8015a3c <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8015a18:	687b      	ldr	r3, [r7, #4]
 8015a1a:	2220      	movs	r2, #32
 8015a1c:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8015a1e:	687b      	ldr	r3, [r7, #4]
 8015a20:	2220      	movs	r2, #32
 8015a22:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8015a26:	687b      	ldr	r3, [r7, #4]
 8015a28:	2200      	movs	r2, #0
 8015a2a:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8015a2c:	687b      	ldr	r3, [r7, #4]
 8015a2e:	2200      	movs	r2, #0
 8015a30:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8015a32:	687b      	ldr	r3, [r7, #4]
 8015a34:	2200      	movs	r2, #0
 8015a36:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8015a3a:	2300      	movs	r3, #0
}
 8015a3c:	4618      	mov	r0, r3
 8015a3e:	3758      	adds	r7, #88	@ 0x58
 8015a40:	46bd      	mov	sp, r7
 8015a42:	bd80      	pop	{r7, pc}

08015a44 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8015a44:	b580      	push	{r7, lr}
 8015a46:	b084      	sub	sp, #16
 8015a48:	af00      	add	r7, sp, #0
 8015a4a:	60f8      	str	r0, [r7, #12]
 8015a4c:	60b9      	str	r1, [r7, #8]
 8015a4e:	603b      	str	r3, [r7, #0]
 8015a50:	4613      	mov	r3, r2
 8015a52:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8015a54:	e04f      	b.n	8015af6 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8015a56:	69bb      	ldr	r3, [r7, #24]
 8015a58:	f1b3 3fff 	cmp.w	r3, #4294967295
 8015a5c:	d04b      	beq.n	8015af6 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8015a5e:	f7f5 fc51 	bl	800b304 <HAL_GetTick>
 8015a62:	4602      	mov	r2, r0
 8015a64:	683b      	ldr	r3, [r7, #0]
 8015a66:	1ad3      	subs	r3, r2, r3
 8015a68:	69ba      	ldr	r2, [r7, #24]
 8015a6a:	429a      	cmp	r2, r3
 8015a6c:	d302      	bcc.n	8015a74 <UART_WaitOnFlagUntilTimeout+0x30>
 8015a6e:	69bb      	ldr	r3, [r7, #24]
 8015a70:	2b00      	cmp	r3, #0
 8015a72:	d101      	bne.n	8015a78 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8015a74:	2303      	movs	r3, #3
 8015a76:	e04e      	b.n	8015b16 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8015a78:	68fb      	ldr	r3, [r7, #12]
 8015a7a:	681b      	ldr	r3, [r3, #0]
 8015a7c:	681b      	ldr	r3, [r3, #0]
 8015a7e:	f003 0304 	and.w	r3, r3, #4
 8015a82:	2b00      	cmp	r3, #0
 8015a84:	d037      	beq.n	8015af6 <UART_WaitOnFlagUntilTimeout+0xb2>
 8015a86:	68bb      	ldr	r3, [r7, #8]
 8015a88:	2b80      	cmp	r3, #128	@ 0x80
 8015a8a:	d034      	beq.n	8015af6 <UART_WaitOnFlagUntilTimeout+0xb2>
 8015a8c:	68bb      	ldr	r3, [r7, #8]
 8015a8e:	2b40      	cmp	r3, #64	@ 0x40
 8015a90:	d031      	beq.n	8015af6 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8015a92:	68fb      	ldr	r3, [r7, #12]
 8015a94:	681b      	ldr	r3, [r3, #0]
 8015a96:	69db      	ldr	r3, [r3, #28]
 8015a98:	f003 0308 	and.w	r3, r3, #8
 8015a9c:	2b08      	cmp	r3, #8
 8015a9e:	d110      	bne.n	8015ac2 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8015aa0:	68fb      	ldr	r3, [r7, #12]
 8015aa2:	681b      	ldr	r3, [r3, #0]
 8015aa4:	2208      	movs	r2, #8
 8015aa6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8015aa8:	68f8      	ldr	r0, [r7, #12]
 8015aaa:	f000 f8ff 	bl	8015cac <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8015aae:	68fb      	ldr	r3, [r7, #12]
 8015ab0:	2208      	movs	r2, #8
 8015ab2:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8015ab6:	68fb      	ldr	r3, [r7, #12]
 8015ab8:	2200      	movs	r2, #0
 8015aba:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8015abe:	2301      	movs	r3, #1
 8015ac0:	e029      	b.n	8015b16 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8015ac2:	68fb      	ldr	r3, [r7, #12]
 8015ac4:	681b      	ldr	r3, [r3, #0]
 8015ac6:	69db      	ldr	r3, [r3, #28]
 8015ac8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8015acc:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8015ad0:	d111      	bne.n	8015af6 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8015ad2:	68fb      	ldr	r3, [r7, #12]
 8015ad4:	681b      	ldr	r3, [r3, #0]
 8015ad6:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8015ada:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8015adc:	68f8      	ldr	r0, [r7, #12]
 8015ade:	f000 f8e5 	bl	8015cac <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8015ae2:	68fb      	ldr	r3, [r7, #12]
 8015ae4:	2220      	movs	r2, #32
 8015ae6:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8015aea:	68fb      	ldr	r3, [r7, #12]
 8015aec:	2200      	movs	r2, #0
 8015aee:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8015af2:	2303      	movs	r3, #3
 8015af4:	e00f      	b.n	8015b16 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8015af6:	68fb      	ldr	r3, [r7, #12]
 8015af8:	681b      	ldr	r3, [r3, #0]
 8015afa:	69da      	ldr	r2, [r3, #28]
 8015afc:	68bb      	ldr	r3, [r7, #8]
 8015afe:	4013      	ands	r3, r2
 8015b00:	68ba      	ldr	r2, [r7, #8]
 8015b02:	429a      	cmp	r2, r3
 8015b04:	bf0c      	ite	eq
 8015b06:	2301      	moveq	r3, #1
 8015b08:	2300      	movne	r3, #0
 8015b0a:	b2db      	uxtb	r3, r3
 8015b0c:	461a      	mov	r2, r3
 8015b0e:	79fb      	ldrb	r3, [r7, #7]
 8015b10:	429a      	cmp	r2, r3
 8015b12:	d0a0      	beq.n	8015a56 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8015b14:	2300      	movs	r3, #0
}
 8015b16:	4618      	mov	r0, r3
 8015b18:	3710      	adds	r7, #16
 8015b1a:	46bd      	mov	sp, r7
 8015b1c:	bd80      	pop	{r7, pc}
	...

08015b20 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8015b20:	b580      	push	{r7, lr}
 8015b22:	b096      	sub	sp, #88	@ 0x58
 8015b24:	af00      	add	r7, sp, #0
 8015b26:	60f8      	str	r0, [r7, #12]
 8015b28:	60b9      	str	r1, [r7, #8]
 8015b2a:	4613      	mov	r3, r2
 8015b2c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8015b2e:	68fb      	ldr	r3, [r7, #12]
 8015b30:	68ba      	ldr	r2, [r7, #8]
 8015b32:	655a      	str	r2, [r3, #84]	@ 0x54
  huart->RxXferSize = Size;
 8015b34:	68fb      	ldr	r3, [r7, #12]
 8015b36:	88fa      	ldrh	r2, [r7, #6]
 8015b38:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8015b3c:	68fb      	ldr	r3, [r7, #12]
 8015b3e:	2200      	movs	r2, #0
 8015b40:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8015b44:	68fb      	ldr	r3, [r7, #12]
 8015b46:	2222      	movs	r2, #34	@ 0x22
 8015b48:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  if (huart->hdmarx != NULL)
 8015b4c:	68fb      	ldr	r3, [r7, #12]
 8015b4e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8015b50:	2b00      	cmp	r3, #0
 8015b52:	d028      	beq.n	8015ba6 <UART_Start_Receive_DMA+0x86>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8015b54:	68fb      	ldr	r3, [r7, #12]
 8015b56:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8015b58:	4a3e      	ldr	r2, [pc, #248]	@ (8015c54 <UART_Start_Receive_DMA+0x134>)
 8015b5a:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8015b5c:	68fb      	ldr	r3, [r7, #12]
 8015b5e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8015b60:	4a3d      	ldr	r2, [pc, #244]	@ (8015c58 <UART_Start_Receive_DMA+0x138>)
 8015b62:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8015b64:	68fb      	ldr	r3, [r7, #12]
 8015b66:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8015b68:	4a3c      	ldr	r2, [pc, #240]	@ (8015c5c <UART_Start_Receive_DMA+0x13c>)
 8015b6a:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 8015b6c:	68fb      	ldr	r3, [r7, #12]
 8015b6e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8015b70:	2200      	movs	r2, #0
 8015b72:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 8015b74:	68fb      	ldr	r3, [r7, #12]
 8015b76:	6f58      	ldr	r0, [r3, #116]	@ 0x74
 8015b78:	68fb      	ldr	r3, [r7, #12]
 8015b7a:	681b      	ldr	r3, [r3, #0]
 8015b7c:	3324      	adds	r3, #36	@ 0x24
 8015b7e:	4619      	mov	r1, r3
 8015b80:	68fb      	ldr	r3, [r7, #12]
 8015b82:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8015b84:	461a      	mov	r2, r3
 8015b86:	88fb      	ldrh	r3, [r7, #6]
 8015b88:	f7f7 fba2 	bl	800d2d0 <HAL_DMA_Start_IT>
 8015b8c:	4603      	mov	r3, r0
 8015b8e:	2b00      	cmp	r3, #0
 8015b90:	d009      	beq.n	8015ba6 <UART_Start_Receive_DMA+0x86>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 8015b92:	68fb      	ldr	r3, [r7, #12]
 8015b94:	2210      	movs	r2, #16
 8015b96:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 8015b9a:	68fb      	ldr	r3, [r7, #12]
 8015b9c:	2220      	movs	r2, #32
 8015b9e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      return HAL_ERROR;
 8015ba2:	2301      	movs	r3, #1
 8015ba4:	e051      	b.n	8015c4a <UART_Start_Receive_DMA+0x12a>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8015ba6:	68fb      	ldr	r3, [r7, #12]
 8015ba8:	691b      	ldr	r3, [r3, #16]
 8015baa:	2b00      	cmp	r3, #0
 8015bac:	d018      	beq.n	8015be0 <UART_Start_Receive_DMA+0xc0>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8015bae:	68fb      	ldr	r3, [r7, #12]
 8015bb0:	681b      	ldr	r3, [r3, #0]
 8015bb2:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8015bb4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8015bb6:	e853 3f00 	ldrex	r3, [r3]
 8015bba:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8015bbc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8015bbe:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8015bc2:	657b      	str	r3, [r7, #84]	@ 0x54
 8015bc4:	68fb      	ldr	r3, [r7, #12]
 8015bc6:	681b      	ldr	r3, [r3, #0]
 8015bc8:	461a      	mov	r2, r3
 8015bca:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8015bcc:	64bb      	str	r3, [r7, #72]	@ 0x48
 8015bce:	647a      	str	r2, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8015bd0:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8015bd2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8015bd4:	e841 2300 	strex	r3, r2, [r1]
 8015bd8:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 8015bda:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8015bdc:	2b00      	cmp	r3, #0
 8015bde:	d1e6      	bne.n	8015bae <UART_Start_Receive_DMA+0x8e>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8015be0:	68fb      	ldr	r3, [r7, #12]
 8015be2:	681b      	ldr	r3, [r3, #0]
 8015be4:	3308      	adds	r3, #8
 8015be6:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8015be8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015bea:	e853 3f00 	ldrex	r3, [r3]
 8015bee:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8015bf0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015bf2:	f043 0301 	orr.w	r3, r3, #1
 8015bf6:	653b      	str	r3, [r7, #80]	@ 0x50
 8015bf8:	68fb      	ldr	r3, [r7, #12]
 8015bfa:	681b      	ldr	r3, [r3, #0]
 8015bfc:	3308      	adds	r3, #8
 8015bfe:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8015c00:	637a      	str	r2, [r7, #52]	@ 0x34
 8015c02:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8015c04:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8015c06:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8015c08:	e841 2300 	strex	r3, r2, [r1]
 8015c0c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8015c0e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015c10:	2b00      	cmp	r3, #0
 8015c12:	d1e5      	bne.n	8015be0 <UART_Start_Receive_DMA+0xc0>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8015c14:	68fb      	ldr	r3, [r7, #12]
 8015c16:	681b      	ldr	r3, [r3, #0]
 8015c18:	3308      	adds	r3, #8
 8015c1a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8015c1c:	697b      	ldr	r3, [r7, #20]
 8015c1e:	e853 3f00 	ldrex	r3, [r3]
 8015c22:	613b      	str	r3, [r7, #16]
   return(result);
 8015c24:	693b      	ldr	r3, [r7, #16]
 8015c26:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8015c2a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8015c2c:	68fb      	ldr	r3, [r7, #12]
 8015c2e:	681b      	ldr	r3, [r3, #0]
 8015c30:	3308      	adds	r3, #8
 8015c32:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8015c34:	623a      	str	r2, [r7, #32]
 8015c36:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8015c38:	69f9      	ldr	r1, [r7, #28]
 8015c3a:	6a3a      	ldr	r2, [r7, #32]
 8015c3c:	e841 2300 	strex	r3, r2, [r1]
 8015c40:	61bb      	str	r3, [r7, #24]
   return(result);
 8015c42:	69bb      	ldr	r3, [r7, #24]
 8015c44:	2b00      	cmp	r3, #0
 8015c46:	d1e5      	bne.n	8015c14 <UART_Start_Receive_DMA+0xf4>

  return HAL_OK;
 8015c48:	2300      	movs	r3, #0
}
 8015c4a:	4618      	mov	r0, r3
 8015c4c:	3758      	adds	r7, #88	@ 0x58
 8015c4e:	46bd      	mov	sp, r7
 8015c50:	bd80      	pop	{r7, pc}
 8015c52:	bf00      	nop
 8015c54:	08015e2b 	.word	0x08015e2b
 8015c58:	08015f57 	.word	0x08015f57
 8015c5c:	08015f95 	.word	0x08015f95

08015c60 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8015c60:	b480      	push	{r7}
 8015c62:	b089      	sub	sp, #36	@ 0x24
 8015c64:	af00      	add	r7, sp, #0
 8015c66:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
#else
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8015c68:	687b      	ldr	r3, [r7, #4]
 8015c6a:	681b      	ldr	r3, [r3, #0]
 8015c6c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8015c6e:	68fb      	ldr	r3, [r7, #12]
 8015c70:	e853 3f00 	ldrex	r3, [r3]
 8015c74:	60bb      	str	r3, [r7, #8]
   return(result);
 8015c76:	68bb      	ldr	r3, [r7, #8]
 8015c78:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8015c7c:	61fb      	str	r3, [r7, #28]
 8015c7e:	687b      	ldr	r3, [r7, #4]
 8015c80:	681b      	ldr	r3, [r3, #0]
 8015c82:	461a      	mov	r2, r3
 8015c84:	69fb      	ldr	r3, [r7, #28]
 8015c86:	61bb      	str	r3, [r7, #24]
 8015c88:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8015c8a:	6979      	ldr	r1, [r7, #20]
 8015c8c:	69ba      	ldr	r2, [r7, #24]
 8015c8e:	e841 2300 	strex	r3, r2, [r1]
 8015c92:	613b      	str	r3, [r7, #16]
   return(result);
 8015c94:	693b      	ldr	r3, [r7, #16]
 8015c96:	2b00      	cmp	r3, #0
 8015c98:	d1e6      	bne.n	8015c68 <UART_EndTxTransfer+0x8>
#endif /* USART_CR1_FIFOEN */

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8015c9a:	687b      	ldr	r3, [r7, #4]
 8015c9c:	2220      	movs	r2, #32
 8015c9e:	67da      	str	r2, [r3, #124]	@ 0x7c
}
 8015ca0:	bf00      	nop
 8015ca2:	3724      	adds	r7, #36	@ 0x24
 8015ca4:	46bd      	mov	sp, r7
 8015ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015caa:	4770      	bx	lr

08015cac <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8015cac:	b480      	push	{r7}
 8015cae:	b095      	sub	sp, #84	@ 0x54
 8015cb0:	af00      	add	r7, sp, #0
 8015cb2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8015cb4:	687b      	ldr	r3, [r7, #4]
 8015cb6:	681b      	ldr	r3, [r3, #0]
 8015cb8:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8015cba:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8015cbc:	e853 3f00 	ldrex	r3, [r3]
 8015cc0:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8015cc2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015cc4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8015cc8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8015cca:	687b      	ldr	r3, [r7, #4]
 8015ccc:	681b      	ldr	r3, [r3, #0]
 8015cce:	461a      	mov	r2, r3
 8015cd0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8015cd2:	643b      	str	r3, [r7, #64]	@ 0x40
 8015cd4:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8015cd6:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8015cd8:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8015cda:	e841 2300 	strex	r3, r2, [r1]
 8015cde:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8015ce0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8015ce2:	2b00      	cmp	r3, #0
 8015ce4:	d1e6      	bne.n	8015cb4 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8015ce6:	687b      	ldr	r3, [r7, #4]
 8015ce8:	681b      	ldr	r3, [r3, #0]
 8015cea:	3308      	adds	r3, #8
 8015cec:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8015cee:	6a3b      	ldr	r3, [r7, #32]
 8015cf0:	e853 3f00 	ldrex	r3, [r3]
 8015cf4:	61fb      	str	r3, [r7, #28]
   return(result);
 8015cf6:	69fb      	ldr	r3, [r7, #28]
 8015cf8:	f023 0301 	bic.w	r3, r3, #1
 8015cfc:	64bb      	str	r3, [r7, #72]	@ 0x48
 8015cfe:	687b      	ldr	r3, [r7, #4]
 8015d00:	681b      	ldr	r3, [r3, #0]
 8015d02:	3308      	adds	r3, #8
 8015d04:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8015d06:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8015d08:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8015d0a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8015d0c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8015d0e:	e841 2300 	strex	r3, r2, [r1]
 8015d12:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8015d14:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015d16:	2b00      	cmp	r3, #0
 8015d18:	d1e5      	bne.n	8015ce6 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8015d1a:	687b      	ldr	r3, [r7, #4]
 8015d1c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8015d1e:	2b01      	cmp	r3, #1
 8015d20:	d118      	bne.n	8015d54 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8015d22:	687b      	ldr	r3, [r7, #4]
 8015d24:	681b      	ldr	r3, [r3, #0]
 8015d26:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8015d28:	68fb      	ldr	r3, [r7, #12]
 8015d2a:	e853 3f00 	ldrex	r3, [r3]
 8015d2e:	60bb      	str	r3, [r7, #8]
   return(result);
 8015d30:	68bb      	ldr	r3, [r7, #8]
 8015d32:	f023 0310 	bic.w	r3, r3, #16
 8015d36:	647b      	str	r3, [r7, #68]	@ 0x44
 8015d38:	687b      	ldr	r3, [r7, #4]
 8015d3a:	681b      	ldr	r3, [r3, #0]
 8015d3c:	461a      	mov	r2, r3
 8015d3e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8015d40:	61bb      	str	r3, [r7, #24]
 8015d42:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8015d44:	6979      	ldr	r1, [r7, #20]
 8015d46:	69ba      	ldr	r2, [r7, #24]
 8015d48:	e841 2300 	strex	r3, r2, [r1]
 8015d4c:	613b      	str	r3, [r7, #16]
   return(result);
 8015d4e:	693b      	ldr	r3, [r7, #16]
 8015d50:	2b00      	cmp	r3, #0
 8015d52:	d1e6      	bne.n	8015d22 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8015d54:	687b      	ldr	r3, [r7, #4]
 8015d56:	2220      	movs	r2, #32
 8015d58:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8015d5c:	687b      	ldr	r3, [r7, #4]
 8015d5e:	2200      	movs	r2, #0
 8015d60:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8015d62:	687b      	ldr	r3, [r7, #4]
 8015d64:	2200      	movs	r2, #0
 8015d66:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8015d68:	bf00      	nop
 8015d6a:	3754      	adds	r7, #84	@ 0x54
 8015d6c:	46bd      	mov	sp, r7
 8015d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015d72:	4770      	bx	lr

08015d74 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8015d74:	b580      	push	{r7, lr}
 8015d76:	b090      	sub	sp, #64	@ 0x40
 8015d78:	af00      	add	r7, sp, #0
 8015d7a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8015d7c:	687b      	ldr	r3, [r7, #4]
 8015d7e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8015d80:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8015d82:	687b      	ldr	r3, [r7, #4]
 8015d84:	681b      	ldr	r3, [r3, #0]
 8015d86:	681b      	ldr	r3, [r3, #0]
 8015d88:	f003 0320 	and.w	r3, r3, #32
 8015d8c:	2b00      	cmp	r3, #0
 8015d8e:	d137      	bne.n	8015e00 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0U;
 8015d90:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8015d92:	2200      	movs	r2, #0
 8015d94:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8015d98:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8015d9a:	681b      	ldr	r3, [r3, #0]
 8015d9c:	3308      	adds	r3, #8
 8015d9e:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8015da0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015da2:	e853 3f00 	ldrex	r3, [r3]
 8015da6:	623b      	str	r3, [r7, #32]
   return(result);
 8015da8:	6a3b      	ldr	r3, [r7, #32]
 8015daa:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8015dae:	63bb      	str	r3, [r7, #56]	@ 0x38
 8015db0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8015db2:	681b      	ldr	r3, [r3, #0]
 8015db4:	3308      	adds	r3, #8
 8015db6:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8015db8:	633a      	str	r2, [r7, #48]	@ 0x30
 8015dba:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8015dbc:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8015dbe:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8015dc0:	e841 2300 	strex	r3, r2, [r1]
 8015dc4:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8015dc6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015dc8:	2b00      	cmp	r3, #0
 8015dca:	d1e5      	bne.n	8015d98 <UART_DMATransmitCplt+0x24>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8015dcc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8015dce:	681b      	ldr	r3, [r3, #0]
 8015dd0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8015dd2:	693b      	ldr	r3, [r7, #16]
 8015dd4:	e853 3f00 	ldrex	r3, [r3]
 8015dd8:	60fb      	str	r3, [r7, #12]
   return(result);
 8015dda:	68fb      	ldr	r3, [r7, #12]
 8015ddc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8015de0:	637b      	str	r3, [r7, #52]	@ 0x34
 8015de2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8015de4:	681b      	ldr	r3, [r3, #0]
 8015de6:	461a      	mov	r2, r3
 8015de8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8015dea:	61fb      	str	r3, [r7, #28]
 8015dec:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8015dee:	69b9      	ldr	r1, [r7, #24]
 8015df0:	69fa      	ldr	r2, [r7, #28]
 8015df2:	e841 2300 	strex	r3, r2, [r1]
 8015df6:	617b      	str	r3, [r7, #20]
   return(result);
 8015df8:	697b      	ldr	r3, [r7, #20]
 8015dfa:	2b00      	cmp	r3, #0
 8015dfc:	d1e6      	bne.n	8015dcc <UART_DMATransmitCplt+0x58>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8015dfe:	e002      	b.n	8015e06 <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 8015e00:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8015e02:	f7ec fe9b 	bl	8002b3c <HAL_UART_TxCpltCallback>
}
 8015e06:	bf00      	nop
 8015e08:	3740      	adds	r7, #64	@ 0x40
 8015e0a:	46bd      	mov	sp, r7
 8015e0c:	bd80      	pop	{r7, pc}

08015e0e <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8015e0e:	b580      	push	{r7, lr}
 8015e10:	b084      	sub	sp, #16
 8015e12:	af00      	add	r7, sp, #0
 8015e14:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8015e16:	687b      	ldr	r3, [r7, #4]
 8015e18:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8015e1a:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8015e1c:	68f8      	ldr	r0, [r7, #12]
 8015e1e:	f7ff f9f1 	bl	8015204 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8015e22:	bf00      	nop
 8015e24:	3710      	adds	r7, #16
 8015e26:	46bd      	mov	sp, r7
 8015e28:	bd80      	pop	{r7, pc}

08015e2a <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8015e2a:	b580      	push	{r7, lr}
 8015e2c:	b09c      	sub	sp, #112	@ 0x70
 8015e2e:	af00      	add	r7, sp, #0
 8015e30:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8015e32:	687b      	ldr	r3, [r7, #4]
 8015e34:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8015e36:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8015e38:	687b      	ldr	r3, [r7, #4]
 8015e3a:	681b      	ldr	r3, [r3, #0]
 8015e3c:	681b      	ldr	r3, [r3, #0]
 8015e3e:	f003 0320 	and.w	r3, r3, #32
 8015e42:	2b00      	cmp	r3, #0
 8015e44:	d171      	bne.n	8015f2a <UART_DMAReceiveCplt+0x100>
  {
    huart->RxXferCount = 0U;
 8015e46:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8015e48:	2200      	movs	r2, #0
 8015e4a:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8015e4e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8015e50:	681b      	ldr	r3, [r3, #0]
 8015e52:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8015e54:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8015e56:	e853 3f00 	ldrex	r3, [r3]
 8015e5a:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8015e5c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8015e5e:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8015e62:	66bb      	str	r3, [r7, #104]	@ 0x68
 8015e64:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8015e66:	681b      	ldr	r3, [r3, #0]
 8015e68:	461a      	mov	r2, r3
 8015e6a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8015e6c:	65bb      	str	r3, [r7, #88]	@ 0x58
 8015e6e:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8015e70:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8015e72:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8015e74:	e841 2300 	strex	r3, r2, [r1]
 8015e78:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8015e7a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8015e7c:	2b00      	cmp	r3, #0
 8015e7e:	d1e6      	bne.n	8015e4e <UART_DMAReceiveCplt+0x24>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8015e80:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8015e82:	681b      	ldr	r3, [r3, #0]
 8015e84:	3308      	adds	r3, #8
 8015e86:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8015e88:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8015e8a:	e853 3f00 	ldrex	r3, [r3]
 8015e8e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8015e90:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8015e92:	f023 0301 	bic.w	r3, r3, #1
 8015e96:	667b      	str	r3, [r7, #100]	@ 0x64
 8015e98:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8015e9a:	681b      	ldr	r3, [r3, #0]
 8015e9c:	3308      	adds	r3, #8
 8015e9e:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8015ea0:	647a      	str	r2, [r7, #68]	@ 0x44
 8015ea2:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8015ea4:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8015ea6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8015ea8:	e841 2300 	strex	r3, r2, [r1]
 8015eac:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8015eae:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8015eb0:	2b00      	cmp	r3, #0
 8015eb2:	d1e5      	bne.n	8015e80 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8015eb4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8015eb6:	681b      	ldr	r3, [r3, #0]
 8015eb8:	3308      	adds	r3, #8
 8015eba:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8015ebc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015ebe:	e853 3f00 	ldrex	r3, [r3]
 8015ec2:	623b      	str	r3, [r7, #32]
   return(result);
 8015ec4:	6a3b      	ldr	r3, [r7, #32]
 8015ec6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8015eca:	663b      	str	r3, [r7, #96]	@ 0x60
 8015ecc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8015ece:	681b      	ldr	r3, [r3, #0]
 8015ed0:	3308      	adds	r3, #8
 8015ed2:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8015ed4:	633a      	str	r2, [r7, #48]	@ 0x30
 8015ed6:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8015ed8:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8015eda:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8015edc:	e841 2300 	strex	r3, r2, [r1]
 8015ee0:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8015ee2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015ee4:	2b00      	cmp	r3, #0
 8015ee6:	d1e5      	bne.n	8015eb4 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8015ee8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8015eea:	2220      	movs	r2, #32
 8015eec:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8015ef0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8015ef2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8015ef4:	2b01      	cmp	r3, #1
 8015ef6:	d118      	bne.n	8015f2a <UART_DMAReceiveCplt+0x100>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8015ef8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8015efa:	681b      	ldr	r3, [r3, #0]
 8015efc:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8015efe:	693b      	ldr	r3, [r7, #16]
 8015f00:	e853 3f00 	ldrex	r3, [r3]
 8015f04:	60fb      	str	r3, [r7, #12]
   return(result);
 8015f06:	68fb      	ldr	r3, [r7, #12]
 8015f08:	f023 0310 	bic.w	r3, r3, #16
 8015f0c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8015f0e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8015f10:	681b      	ldr	r3, [r3, #0]
 8015f12:	461a      	mov	r2, r3
 8015f14:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8015f16:	61fb      	str	r3, [r7, #28]
 8015f18:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8015f1a:	69b9      	ldr	r1, [r7, #24]
 8015f1c:	69fa      	ldr	r2, [r7, #28]
 8015f1e:	e841 2300 	strex	r3, r2, [r1]
 8015f22:	617b      	str	r3, [r7, #20]
   return(result);
 8015f24:	697b      	ldr	r3, [r7, #20]
 8015f26:	2b00      	cmp	r3, #0
 8015f28:	d1e6      	bne.n	8015ef8 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8015f2a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8015f2c:	2200      	movs	r2, #0
 8015f2e:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8015f30:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8015f32:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8015f34:	2b01      	cmp	r3, #1
 8015f36:	d107      	bne.n	8015f48 <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8015f38:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8015f3a:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8015f3e:	4619      	mov	r1, r3
 8015f40:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8015f42:	f7ec fd5d 	bl	8002a00 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8015f46:	e002      	b.n	8015f4e <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 8015f48:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8015f4a:	f7ec fded 	bl	8002b28 <HAL_UART_RxCpltCallback>
}
 8015f4e:	bf00      	nop
 8015f50:	3770      	adds	r7, #112	@ 0x70
 8015f52:	46bd      	mov	sp, r7
 8015f54:	bd80      	pop	{r7, pc}

08015f56 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8015f56:	b580      	push	{r7, lr}
 8015f58:	b084      	sub	sp, #16
 8015f5a:	af00      	add	r7, sp, #0
 8015f5c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8015f5e:	687b      	ldr	r3, [r7, #4]
 8015f60:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8015f62:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8015f64:	68fb      	ldr	r3, [r7, #12]
 8015f66:	2201      	movs	r2, #1
 8015f68:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8015f6a:	68fb      	ldr	r3, [r7, #12]
 8015f6c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8015f6e:	2b01      	cmp	r3, #1
 8015f70:	d109      	bne.n	8015f86 <UART_DMARxHalfCplt+0x30>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8015f72:	68fb      	ldr	r3, [r7, #12]
 8015f74:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8015f78:	085b      	lsrs	r3, r3, #1
 8015f7a:	b29b      	uxth	r3, r3
 8015f7c:	4619      	mov	r1, r3
 8015f7e:	68f8      	ldr	r0, [r7, #12]
 8015f80:	f7ec fd3e 	bl	8002a00 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8015f84:	e002      	b.n	8015f8c <UART_DMARxHalfCplt+0x36>
    HAL_UART_RxHalfCpltCallback(huart);
 8015f86:	68f8      	ldr	r0, [r7, #12]
 8015f88:	f7ff f946 	bl	8015218 <HAL_UART_RxHalfCpltCallback>
}
 8015f8c:	bf00      	nop
 8015f8e:	3710      	adds	r7, #16
 8015f90:	46bd      	mov	sp, r7
 8015f92:	bd80      	pop	{r7, pc}

08015f94 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8015f94:	b580      	push	{r7, lr}
 8015f96:	b086      	sub	sp, #24
 8015f98:	af00      	add	r7, sp, #0
 8015f9a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8015f9c:	687b      	ldr	r3, [r7, #4]
 8015f9e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8015fa0:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8015fa2:	697b      	ldr	r3, [r7, #20]
 8015fa4:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8015fa6:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8015fa8:	697b      	ldr	r3, [r7, #20]
 8015faa:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8015fae:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8015fb0:	697b      	ldr	r3, [r7, #20]
 8015fb2:	681b      	ldr	r3, [r3, #0]
 8015fb4:	689b      	ldr	r3, [r3, #8]
 8015fb6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8015fba:	2b80      	cmp	r3, #128	@ 0x80
 8015fbc:	d109      	bne.n	8015fd2 <UART_DMAError+0x3e>
 8015fbe:	693b      	ldr	r3, [r7, #16]
 8015fc0:	2b21      	cmp	r3, #33	@ 0x21
 8015fc2:	d106      	bne.n	8015fd2 <UART_DMAError+0x3e>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8015fc4:	697b      	ldr	r3, [r7, #20]
 8015fc6:	2200      	movs	r2, #0
 8015fc8:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    UART_EndTxTransfer(huart);
 8015fcc:	6978      	ldr	r0, [r7, #20]
 8015fce:	f7ff fe47 	bl	8015c60 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8015fd2:	697b      	ldr	r3, [r7, #20]
 8015fd4:	681b      	ldr	r3, [r3, #0]
 8015fd6:	689b      	ldr	r3, [r3, #8]
 8015fd8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8015fdc:	2b40      	cmp	r3, #64	@ 0x40
 8015fde:	d109      	bne.n	8015ff4 <UART_DMAError+0x60>
 8015fe0:	68fb      	ldr	r3, [r7, #12]
 8015fe2:	2b22      	cmp	r3, #34	@ 0x22
 8015fe4:	d106      	bne.n	8015ff4 <UART_DMAError+0x60>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8015fe6:	697b      	ldr	r3, [r7, #20]
 8015fe8:	2200      	movs	r2, #0
 8015fea:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
    UART_EndRxTransfer(huart);
 8015fee:	6978      	ldr	r0, [r7, #20]
 8015ff0:	f7ff fe5c 	bl	8015cac <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8015ff4:	697b      	ldr	r3, [r7, #20]
 8015ff6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8015ffa:	f043 0210 	orr.w	r2, r3, #16
 8015ffe:	697b      	ldr	r3, [r7, #20]
 8016000:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8016004:	6978      	ldr	r0, [r7, #20]
 8016006:	f7ff f911 	bl	801522c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 801600a:	bf00      	nop
 801600c:	3718      	adds	r7, #24
 801600e:	46bd      	mov	sp, r7
 8016010:	bd80      	pop	{r7, pc}

08016012 <HAL_UARTEx_ReceiveToIdle>:
  * @param Timeout Timeout duration expressed in ms (covers the whole reception sequence).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint16_t *RxLen,
                                           uint32_t Timeout)
{
 8016012:	b580      	push	{r7, lr}
 8016014:	b088      	sub	sp, #32
 8016016:	af00      	add	r7, sp, #0
 8016018:	60f8      	str	r0, [r7, #12]
 801601a:	60b9      	str	r1, [r7, #8]
 801601c:	603b      	str	r3, [r7, #0]
 801601e:	4613      	mov	r3, r2
 8016020:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8016022:	68fb      	ldr	r3, [r7, #12]
 8016024:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8016028:	2b20      	cmp	r3, #32
 801602a:	f040 80f0 	bne.w	801620e <HAL_UARTEx_ReceiveToIdle+0x1fc>
  {
    if ((pData == NULL) || (Size == 0U))
 801602e:	68bb      	ldr	r3, [r7, #8]
 8016030:	2b00      	cmp	r3, #0
 8016032:	d002      	beq.n	801603a <HAL_UARTEx_ReceiveToIdle+0x28>
 8016034:	88fb      	ldrh	r3, [r7, #6]
 8016036:	2b00      	cmp	r3, #0
 8016038:	d101      	bne.n	801603e <HAL_UARTEx_ReceiveToIdle+0x2c>
    {
      return  HAL_ERROR;
 801603a:	2301      	movs	r3, #1
 801603c:	e0e8      	b.n	8016210 <HAL_UARTEx_ReceiveToIdle+0x1fe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 801603e:	68fb      	ldr	r3, [r7, #12]
 8016040:	2200      	movs	r2, #0
 8016042:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8016046:	68fb      	ldr	r3, [r7, #12]
 8016048:	2222      	movs	r2, #34	@ 0x22
 801604a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 801604e:	68fb      	ldr	r3, [r7, #12]
 8016050:	2201      	movs	r2, #1
 8016052:	661a      	str	r2, [r3, #96]	@ 0x60
    huart->RxEventType = HAL_UART_RXEVENT_TC;
 8016054:	68fb      	ldr	r3, [r7, #12]
 8016056:	2200      	movs	r2, #0
 8016058:	665a      	str	r2, [r3, #100]	@ 0x64

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 801605a:	f7f5 f953 	bl	800b304 <HAL_GetTick>
 801605e:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 8016060:	68fb      	ldr	r3, [r7, #12]
 8016062:	88fa      	ldrh	r2, [r7, #6]
 8016064:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58
    huart->RxXferCount = Size;
 8016068:	68fb      	ldr	r3, [r7, #12]
 801606a:	88fa      	ldrh	r2, [r7, #6]
 801606c:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8016070:	68fb      	ldr	r3, [r7, #12]
 8016072:	689b      	ldr	r3, [r3, #8]
 8016074:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8016078:	d10e      	bne.n	8016098 <HAL_UARTEx_ReceiveToIdle+0x86>
 801607a:	68fb      	ldr	r3, [r7, #12]
 801607c:	691b      	ldr	r3, [r3, #16]
 801607e:	2b00      	cmp	r3, #0
 8016080:	d105      	bne.n	801608e <HAL_UARTEx_ReceiveToIdle+0x7c>
 8016082:	68fb      	ldr	r3, [r7, #12]
 8016084:	f240 12ff 	movw	r2, #511	@ 0x1ff
 8016088:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 801608c:	e02d      	b.n	80160ea <HAL_UARTEx_ReceiveToIdle+0xd8>
 801608e:	68fb      	ldr	r3, [r7, #12]
 8016090:	22ff      	movs	r2, #255	@ 0xff
 8016092:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8016096:	e028      	b.n	80160ea <HAL_UARTEx_ReceiveToIdle+0xd8>
 8016098:	68fb      	ldr	r3, [r7, #12]
 801609a:	689b      	ldr	r3, [r3, #8]
 801609c:	2b00      	cmp	r3, #0
 801609e:	d10d      	bne.n	80160bc <HAL_UARTEx_ReceiveToIdle+0xaa>
 80160a0:	68fb      	ldr	r3, [r7, #12]
 80160a2:	691b      	ldr	r3, [r3, #16]
 80160a4:	2b00      	cmp	r3, #0
 80160a6:	d104      	bne.n	80160b2 <HAL_UARTEx_ReceiveToIdle+0xa0>
 80160a8:	68fb      	ldr	r3, [r7, #12]
 80160aa:	22ff      	movs	r2, #255	@ 0xff
 80160ac:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 80160b0:	e01b      	b.n	80160ea <HAL_UARTEx_ReceiveToIdle+0xd8>
 80160b2:	68fb      	ldr	r3, [r7, #12]
 80160b4:	227f      	movs	r2, #127	@ 0x7f
 80160b6:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 80160ba:	e016      	b.n	80160ea <HAL_UARTEx_ReceiveToIdle+0xd8>
 80160bc:	68fb      	ldr	r3, [r7, #12]
 80160be:	689b      	ldr	r3, [r3, #8]
 80160c0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80160c4:	d10d      	bne.n	80160e2 <HAL_UARTEx_ReceiveToIdle+0xd0>
 80160c6:	68fb      	ldr	r3, [r7, #12]
 80160c8:	691b      	ldr	r3, [r3, #16]
 80160ca:	2b00      	cmp	r3, #0
 80160cc:	d104      	bne.n	80160d8 <HAL_UARTEx_ReceiveToIdle+0xc6>
 80160ce:	68fb      	ldr	r3, [r7, #12]
 80160d0:	227f      	movs	r2, #127	@ 0x7f
 80160d2:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 80160d6:	e008      	b.n	80160ea <HAL_UARTEx_ReceiveToIdle+0xd8>
 80160d8:	68fb      	ldr	r3, [r7, #12]
 80160da:	223f      	movs	r2, #63	@ 0x3f
 80160dc:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 80160e0:	e003      	b.n	80160ea <HAL_UARTEx_ReceiveToIdle+0xd8>
 80160e2:	68fb      	ldr	r3, [r7, #12]
 80160e4:	2200      	movs	r2, #0
 80160e6:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
    uhMask = huart->Mask;
 80160ea:	68fb      	ldr	r3, [r7, #12]
 80160ec:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80160f0:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80160f2:	68fb      	ldr	r3, [r7, #12]
 80160f4:	689b      	ldr	r3, [r3, #8]
 80160f6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80160fa:	d108      	bne.n	801610e <HAL_UARTEx_ReceiveToIdle+0xfc>
 80160fc:	68fb      	ldr	r3, [r7, #12]
 80160fe:	691b      	ldr	r3, [r3, #16]
 8016100:	2b00      	cmp	r3, #0
 8016102:	d104      	bne.n	801610e <HAL_UARTEx_ReceiveToIdle+0xfc>
    {
      pdata8bits  = NULL;
 8016104:	2300      	movs	r3, #0
 8016106:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8016108:	68bb      	ldr	r3, [r7, #8]
 801610a:	61bb      	str	r3, [r7, #24]
 801610c:	e003      	b.n	8016116 <HAL_UARTEx_ReceiveToIdle+0x104>
    }
    else
    {
      pdata8bits  = pData;
 801610e:	68bb      	ldr	r3, [r7, #8]
 8016110:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8016112:	2300      	movs	r3, #0
 8016114:	61bb      	str	r3, [r7, #24]
    }

    /* Initialize output number of received elements */
    *RxLen = 0U;
 8016116:	683b      	ldr	r3, [r7, #0]
 8016118:	2200      	movs	r2, #0
 801611a:	801a      	strh	r2, [r3, #0]

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 801611c:	e060      	b.n	80161e0 <HAL_UARTEx_ReceiveToIdle+0x1ce>
    {
      /* Check if IDLE flag is set */
      if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 801611e:	68fb      	ldr	r3, [r7, #12]
 8016120:	681b      	ldr	r3, [r3, #0]
 8016122:	69db      	ldr	r3, [r3, #28]
 8016124:	f003 0310 	and.w	r3, r3, #16
 8016128:	2b10      	cmp	r3, #16
 801612a:	d110      	bne.n	801614e <HAL_UARTEx_ReceiveToIdle+0x13c>
      {
        /* Clear IDLE flag in ISR */
        __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 801612c:	68fb      	ldr	r3, [r7, #12]
 801612e:	681b      	ldr	r3, [r3, #0]
 8016130:	2210      	movs	r2, #16
 8016132:	621a      	str	r2, [r3, #32]

        /* If Set, but no data ever received, clear flag without exiting loop */
        /* If Set, and data has already been received, this means Idle Event is valid : End reception */
        if (*RxLen > 0U)
 8016134:	683b      	ldr	r3, [r7, #0]
 8016136:	881b      	ldrh	r3, [r3, #0]
 8016138:	2b00      	cmp	r3, #0
 801613a:	d008      	beq.n	801614e <HAL_UARTEx_ReceiveToIdle+0x13c>
        {
          huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 801613c:	68fb      	ldr	r3, [r7, #12]
 801613e:	2202      	movs	r2, #2
 8016140:	665a      	str	r2, [r3, #100]	@ 0x64
          huart->RxState = HAL_UART_STATE_READY;
 8016142:	68fb      	ldr	r3, [r7, #12]
 8016144:	2220      	movs	r2, #32
 8016146:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

          return HAL_OK;
 801614a:	2300      	movs	r3, #0
 801614c:	e060      	b.n	8016210 <HAL_UARTEx_ReceiveToIdle+0x1fe>
        }
      }

      /* Check if RXNE flag is set */
      if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RXNE))
 801614e:	68fb      	ldr	r3, [r7, #12]
 8016150:	681b      	ldr	r3, [r3, #0]
 8016152:	69db      	ldr	r3, [r3, #28]
 8016154:	f003 0320 	and.w	r3, r3, #32
 8016158:	2b20      	cmp	r3, #32
 801615a:	d12c      	bne.n	80161b6 <HAL_UARTEx_ReceiveToIdle+0x1a4>
      {
        if (pdata8bits == NULL)
 801615c:	69fb      	ldr	r3, [r7, #28]
 801615e:	2b00      	cmp	r3, #0
 8016160:	d10c      	bne.n	801617c <HAL_UARTEx_ReceiveToIdle+0x16a>
        {
          *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8016162:	68fb      	ldr	r3, [r7, #12]
 8016164:	681b      	ldr	r3, [r3, #0]
 8016166:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8016168:	b29a      	uxth	r2, r3
 801616a:	8a7b      	ldrh	r3, [r7, #18]
 801616c:	4013      	ands	r3, r2
 801616e:	b29a      	uxth	r2, r3
 8016170:	69bb      	ldr	r3, [r7, #24]
 8016172:	801a      	strh	r2, [r3, #0]
          pdata16bits++;
 8016174:	69bb      	ldr	r3, [r7, #24]
 8016176:	3302      	adds	r3, #2
 8016178:	61bb      	str	r3, [r7, #24]
 801617a:	e00d      	b.n	8016198 <HAL_UARTEx_ReceiveToIdle+0x186>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 801617c:	68fb      	ldr	r3, [r7, #12]
 801617e:	681b      	ldr	r3, [r3, #0]
 8016180:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8016182:	b29b      	uxth	r3, r3
 8016184:	b2da      	uxtb	r2, r3
 8016186:	8a7b      	ldrh	r3, [r7, #18]
 8016188:	b2db      	uxtb	r3, r3
 801618a:	4013      	ands	r3, r2
 801618c:	b2da      	uxtb	r2, r3
 801618e:	69fb      	ldr	r3, [r7, #28]
 8016190:	701a      	strb	r2, [r3, #0]
          pdata8bits++;
 8016192:	69fb      	ldr	r3, [r7, #28]
 8016194:	3301      	adds	r3, #1
 8016196:	61fb      	str	r3, [r7, #28]
        }
        /* Increment number of received elements */
        *RxLen += 1U;
 8016198:	683b      	ldr	r3, [r7, #0]
 801619a:	881b      	ldrh	r3, [r3, #0]
 801619c:	3301      	adds	r3, #1
 801619e:	b29a      	uxth	r2, r3
 80161a0:	683b      	ldr	r3, [r7, #0]
 80161a2:	801a      	strh	r2, [r3, #0]
        huart->RxXferCount--;
 80161a4:	68fb      	ldr	r3, [r7, #12]
 80161a6:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 80161aa:	b29b      	uxth	r3, r3
 80161ac:	3b01      	subs	r3, #1
 80161ae:	b29a      	uxth	r2, r3
 80161b0:	68fb      	ldr	r3, [r7, #12]
 80161b2:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
      }

      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80161b6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80161b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80161bc:	d010      	beq.n	80161e0 <HAL_UARTEx_ReceiveToIdle+0x1ce>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80161be:	f7f5 f8a1 	bl	800b304 <HAL_GetTick>
 80161c2:	4602      	mov	r2, r0
 80161c4:	697b      	ldr	r3, [r7, #20]
 80161c6:	1ad3      	subs	r3, r2, r3
 80161c8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80161ca:	429a      	cmp	r2, r3
 80161cc:	d302      	bcc.n	80161d4 <HAL_UARTEx_ReceiveToIdle+0x1c2>
 80161ce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80161d0:	2b00      	cmp	r3, #0
 80161d2:	d105      	bne.n	80161e0 <HAL_UARTEx_ReceiveToIdle+0x1ce>
        {
          huart->RxState = HAL_UART_STATE_READY;
 80161d4:	68fb      	ldr	r3, [r7, #12]
 80161d6:	2220      	movs	r2, #32
 80161d8:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 80161dc:	2303      	movs	r3, #3
 80161de:	e017      	b.n	8016210 <HAL_UARTEx_ReceiveToIdle+0x1fe>
    while (huart->RxXferCount > 0U)
 80161e0:	68fb      	ldr	r3, [r7, #12]
 80161e2:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 80161e6:	b29b      	uxth	r3, r3
 80161e8:	2b00      	cmp	r3, #0
 80161ea:	d198      	bne.n	801611e <HAL_UARTEx_ReceiveToIdle+0x10c>
        }
      }
    }

    /* Set number of received elements in output parameter : RxLen */
    *RxLen = huart->RxXferSize - huart->RxXferCount;
 80161ec:	68fb      	ldr	r3, [r7, #12]
 80161ee:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 80161f2:	68fb      	ldr	r3, [r7, #12]
 80161f4:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 80161f8:	b29b      	uxth	r3, r3
 80161fa:	1ad3      	subs	r3, r2, r3
 80161fc:	b29a      	uxth	r2, r3
 80161fe:	683b      	ldr	r3, [r7, #0]
 8016200:	801a      	strh	r2, [r3, #0]
    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8016202:	68fb      	ldr	r3, [r7, #12]
 8016204:	2220      	movs	r2, #32
 8016206:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

    return HAL_OK;
 801620a:	2300      	movs	r3, #0
 801620c:	e000      	b.n	8016210 <HAL_UARTEx_ReceiveToIdle+0x1fe>
  }
  else
  {
    return HAL_BUSY;
 801620e:	2302      	movs	r3, #2
  }
}
 8016210:	4618      	mov	r0, r3
 8016212:	3720      	adds	r7, #32
 8016214:	46bd      	mov	sp, r7
 8016216:	bd80      	pop	{r7, pc}

08016218 <HAL_UARTEx_ReceiveToIdle_DMA>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8016218:	b580      	push	{r7, lr}
 801621a:	b08c      	sub	sp, #48	@ 0x30
 801621c:	af00      	add	r7, sp, #0
 801621e:	60f8      	str	r0, [r7, #12]
 8016220:	60b9      	str	r1, [r7, #8]
 8016222:	4613      	mov	r3, r2
 8016224:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8016226:	68fb      	ldr	r3, [r7, #12]
 8016228:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 801622c:	2b20      	cmp	r3, #32
 801622e:	d142      	bne.n	80162b6 <HAL_UARTEx_ReceiveToIdle_DMA+0x9e>
  {
    if ((pData == NULL) || (Size == 0U))
 8016230:	68bb      	ldr	r3, [r7, #8]
 8016232:	2b00      	cmp	r3, #0
 8016234:	d002      	beq.n	801623c <HAL_UARTEx_ReceiveToIdle_DMA+0x24>
 8016236:	88fb      	ldrh	r3, [r7, #6]
 8016238:	2b00      	cmp	r3, #0
 801623a:	d101      	bne.n	8016240 <HAL_UARTEx_ReceiveToIdle_DMA+0x28>
    {
      return HAL_ERROR;
 801623c:	2301      	movs	r3, #1
 801623e:	e03b      	b.n	80162b8 <HAL_UARTEx_ReceiveToIdle_DMA+0xa0>
    }

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 8016240:	68fb      	ldr	r3, [r7, #12]
 8016242:	2201      	movs	r2, #1
 8016244:	661a      	str	r2, [r3, #96]	@ 0x60
    huart->RxEventType = HAL_UART_RXEVENT_TC;
 8016246:	68fb      	ldr	r3, [r7, #12]
 8016248:	2200      	movs	r2, #0
 801624a:	665a      	str	r2, [r3, #100]	@ 0x64

    status =  UART_Start_Receive_DMA(huart, pData, Size);
 801624c:	88fb      	ldrh	r3, [r7, #6]
 801624e:	461a      	mov	r2, r3
 8016250:	68b9      	ldr	r1, [r7, #8]
 8016252:	68f8      	ldr	r0, [r7, #12]
 8016254:	f7ff fc64 	bl	8015b20 <UART_Start_Receive_DMA>
 8016258:	4603      	mov	r3, r0
 801625a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 801625e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8016262:	2b00      	cmp	r3, #0
 8016264:	d124      	bne.n	80162b0 <HAL_UARTEx_ReceiveToIdle_DMA+0x98>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8016266:	68fb      	ldr	r3, [r7, #12]
 8016268:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 801626a:	2b01      	cmp	r3, #1
 801626c:	d11d      	bne.n	80162aa <HAL_UARTEx_ReceiveToIdle_DMA+0x92>
      {
        __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 801626e:	68fb      	ldr	r3, [r7, #12]
 8016270:	681b      	ldr	r3, [r3, #0]
 8016272:	2210      	movs	r2, #16
 8016274:	621a      	str	r2, [r3, #32]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8016276:	68fb      	ldr	r3, [r7, #12]
 8016278:	681b      	ldr	r3, [r3, #0]
 801627a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801627c:	69bb      	ldr	r3, [r7, #24]
 801627e:	e853 3f00 	ldrex	r3, [r3]
 8016282:	617b      	str	r3, [r7, #20]
   return(result);
 8016284:	697b      	ldr	r3, [r7, #20]
 8016286:	f043 0310 	orr.w	r3, r3, #16
 801628a:	62bb      	str	r3, [r7, #40]	@ 0x28
 801628c:	68fb      	ldr	r3, [r7, #12]
 801628e:	681b      	ldr	r3, [r3, #0]
 8016290:	461a      	mov	r2, r3
 8016292:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8016294:	627b      	str	r3, [r7, #36]	@ 0x24
 8016296:	623a      	str	r2, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8016298:	6a39      	ldr	r1, [r7, #32]
 801629a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801629c:	e841 2300 	strex	r3, r2, [r1]
 80162a0:	61fb      	str	r3, [r7, #28]
   return(result);
 80162a2:	69fb      	ldr	r3, [r7, #28]
 80162a4:	2b00      	cmp	r3, #0
 80162a6:	d1e6      	bne.n	8016276 <HAL_UARTEx_ReceiveToIdle_DMA+0x5e>
 80162a8:	e002      	b.n	80162b0 <HAL_UARTEx_ReceiveToIdle_DMA+0x98>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 80162aa:	2301      	movs	r3, #1
 80162ac:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }

    return status;
 80162b0:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80162b4:	e000      	b.n	80162b8 <HAL_UARTEx_ReceiveToIdle_DMA+0xa0>
  }
  else
  {
    return HAL_BUSY;
 80162b6:	2302      	movs	r3, #2
  }
}
 80162b8:	4618      	mov	r0, r3
 80162ba:	3730      	adds	r7, #48	@ 0x30
 80162bc:	46bd      	mov	sp, r7
 80162be:	bd80      	pop	{r7, pc}

080162c0 <atoi>:
 80162c0:	220a      	movs	r2, #10
 80162c2:	2100      	movs	r1, #0
 80162c4:	f000 b87c 	b.w	80163c0 <strtol>

080162c8 <_strtol_l.isra.0>:
 80162c8:	2b24      	cmp	r3, #36	@ 0x24
 80162ca:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80162ce:	4686      	mov	lr, r0
 80162d0:	4690      	mov	r8, r2
 80162d2:	d801      	bhi.n	80162d8 <_strtol_l.isra.0+0x10>
 80162d4:	2b01      	cmp	r3, #1
 80162d6:	d106      	bne.n	80162e6 <_strtol_l.isra.0+0x1e>
 80162d8:	f000 f92c 	bl	8016534 <__errno>
 80162dc:	2316      	movs	r3, #22
 80162de:	6003      	str	r3, [r0, #0]
 80162e0:	2000      	movs	r0, #0
 80162e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80162e6:	4834      	ldr	r0, [pc, #208]	@ (80163b8 <_strtol_l.isra.0+0xf0>)
 80162e8:	460d      	mov	r5, r1
 80162ea:	462a      	mov	r2, r5
 80162ec:	f815 4b01 	ldrb.w	r4, [r5], #1
 80162f0:	5d06      	ldrb	r6, [r0, r4]
 80162f2:	f016 0608 	ands.w	r6, r6, #8
 80162f6:	d1f8      	bne.n	80162ea <_strtol_l.isra.0+0x22>
 80162f8:	2c2d      	cmp	r4, #45	@ 0x2d
 80162fa:	d110      	bne.n	801631e <_strtol_l.isra.0+0x56>
 80162fc:	782c      	ldrb	r4, [r5, #0]
 80162fe:	2601      	movs	r6, #1
 8016300:	1c95      	adds	r5, r2, #2
 8016302:	f033 0210 	bics.w	r2, r3, #16
 8016306:	d115      	bne.n	8016334 <_strtol_l.isra.0+0x6c>
 8016308:	2c30      	cmp	r4, #48	@ 0x30
 801630a:	d10d      	bne.n	8016328 <_strtol_l.isra.0+0x60>
 801630c:	782a      	ldrb	r2, [r5, #0]
 801630e:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8016312:	2a58      	cmp	r2, #88	@ 0x58
 8016314:	d108      	bne.n	8016328 <_strtol_l.isra.0+0x60>
 8016316:	786c      	ldrb	r4, [r5, #1]
 8016318:	3502      	adds	r5, #2
 801631a:	2310      	movs	r3, #16
 801631c:	e00a      	b.n	8016334 <_strtol_l.isra.0+0x6c>
 801631e:	2c2b      	cmp	r4, #43	@ 0x2b
 8016320:	bf04      	itt	eq
 8016322:	782c      	ldrbeq	r4, [r5, #0]
 8016324:	1c95      	addeq	r5, r2, #2
 8016326:	e7ec      	b.n	8016302 <_strtol_l.isra.0+0x3a>
 8016328:	2b00      	cmp	r3, #0
 801632a:	d1f6      	bne.n	801631a <_strtol_l.isra.0+0x52>
 801632c:	2c30      	cmp	r4, #48	@ 0x30
 801632e:	bf14      	ite	ne
 8016330:	230a      	movne	r3, #10
 8016332:	2308      	moveq	r3, #8
 8016334:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 8016338:	f10c 3cff 	add.w	ip, ip, #4294967295
 801633c:	2200      	movs	r2, #0
 801633e:	fbbc f9f3 	udiv	r9, ip, r3
 8016342:	4610      	mov	r0, r2
 8016344:	fb03 ca19 	mls	sl, r3, r9, ip
 8016348:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 801634c:	2f09      	cmp	r7, #9
 801634e:	d80f      	bhi.n	8016370 <_strtol_l.isra.0+0xa8>
 8016350:	463c      	mov	r4, r7
 8016352:	42a3      	cmp	r3, r4
 8016354:	dd1b      	ble.n	801638e <_strtol_l.isra.0+0xc6>
 8016356:	1c57      	adds	r7, r2, #1
 8016358:	d007      	beq.n	801636a <_strtol_l.isra.0+0xa2>
 801635a:	4581      	cmp	r9, r0
 801635c:	d314      	bcc.n	8016388 <_strtol_l.isra.0+0xc0>
 801635e:	d101      	bne.n	8016364 <_strtol_l.isra.0+0x9c>
 8016360:	45a2      	cmp	sl, r4
 8016362:	db11      	blt.n	8016388 <_strtol_l.isra.0+0xc0>
 8016364:	fb00 4003 	mla	r0, r0, r3, r4
 8016368:	2201      	movs	r2, #1
 801636a:	f815 4b01 	ldrb.w	r4, [r5], #1
 801636e:	e7eb      	b.n	8016348 <_strtol_l.isra.0+0x80>
 8016370:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8016374:	2f19      	cmp	r7, #25
 8016376:	d801      	bhi.n	801637c <_strtol_l.isra.0+0xb4>
 8016378:	3c37      	subs	r4, #55	@ 0x37
 801637a:	e7ea      	b.n	8016352 <_strtol_l.isra.0+0x8a>
 801637c:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 8016380:	2f19      	cmp	r7, #25
 8016382:	d804      	bhi.n	801638e <_strtol_l.isra.0+0xc6>
 8016384:	3c57      	subs	r4, #87	@ 0x57
 8016386:	e7e4      	b.n	8016352 <_strtol_l.isra.0+0x8a>
 8016388:	f04f 32ff 	mov.w	r2, #4294967295
 801638c:	e7ed      	b.n	801636a <_strtol_l.isra.0+0xa2>
 801638e:	1c53      	adds	r3, r2, #1
 8016390:	d108      	bne.n	80163a4 <_strtol_l.isra.0+0xdc>
 8016392:	2322      	movs	r3, #34	@ 0x22
 8016394:	f8ce 3000 	str.w	r3, [lr]
 8016398:	4660      	mov	r0, ip
 801639a:	f1b8 0f00 	cmp.w	r8, #0
 801639e:	d0a0      	beq.n	80162e2 <_strtol_l.isra.0+0x1a>
 80163a0:	1e69      	subs	r1, r5, #1
 80163a2:	e006      	b.n	80163b2 <_strtol_l.isra.0+0xea>
 80163a4:	b106      	cbz	r6, 80163a8 <_strtol_l.isra.0+0xe0>
 80163a6:	4240      	negs	r0, r0
 80163a8:	f1b8 0f00 	cmp.w	r8, #0
 80163ac:	d099      	beq.n	80162e2 <_strtol_l.isra.0+0x1a>
 80163ae:	2a00      	cmp	r2, #0
 80163b0:	d1f6      	bne.n	80163a0 <_strtol_l.isra.0+0xd8>
 80163b2:	f8c8 1000 	str.w	r1, [r8]
 80163b6:	e794      	b.n	80162e2 <_strtol_l.isra.0+0x1a>
 80163b8:	08017ebf 	.word	0x08017ebf

080163bc <_strtol_r>:
 80163bc:	f7ff bf84 	b.w	80162c8 <_strtol_l.isra.0>

080163c0 <strtol>:
 80163c0:	4613      	mov	r3, r2
 80163c2:	460a      	mov	r2, r1
 80163c4:	4601      	mov	r1, r0
 80163c6:	4802      	ldr	r0, [pc, #8]	@ (80163d0 <strtol+0x10>)
 80163c8:	6800      	ldr	r0, [r0, #0]
 80163ca:	f7ff bf7d 	b.w	80162c8 <_strtol_l.isra.0>
 80163ce:	bf00      	nop
 80163d0:	20000034 	.word	0x20000034

080163d4 <siprintf>:
 80163d4:	b40e      	push	{r1, r2, r3}
 80163d6:	b510      	push	{r4, lr}
 80163d8:	b09d      	sub	sp, #116	@ 0x74
 80163da:	ab1f      	add	r3, sp, #124	@ 0x7c
 80163dc:	9002      	str	r0, [sp, #8]
 80163de:	9006      	str	r0, [sp, #24]
 80163e0:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 80163e4:	480a      	ldr	r0, [pc, #40]	@ (8016410 <siprintf+0x3c>)
 80163e6:	9107      	str	r1, [sp, #28]
 80163e8:	9104      	str	r1, [sp, #16]
 80163ea:	490a      	ldr	r1, [pc, #40]	@ (8016414 <siprintf+0x40>)
 80163ec:	f853 2b04 	ldr.w	r2, [r3], #4
 80163f0:	9105      	str	r1, [sp, #20]
 80163f2:	2400      	movs	r4, #0
 80163f4:	a902      	add	r1, sp, #8
 80163f6:	6800      	ldr	r0, [r0, #0]
 80163f8:	9301      	str	r3, [sp, #4]
 80163fa:	941b      	str	r4, [sp, #108]	@ 0x6c
 80163fc:	f000 fa30 	bl	8016860 <_svfiprintf_r>
 8016400:	9b02      	ldr	r3, [sp, #8]
 8016402:	701c      	strb	r4, [r3, #0]
 8016404:	b01d      	add	sp, #116	@ 0x74
 8016406:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801640a:	b003      	add	sp, #12
 801640c:	4770      	bx	lr
 801640e:	bf00      	nop
 8016410:	20000034 	.word	0x20000034
 8016414:	ffff0208 	.word	0xffff0208

08016418 <siscanf>:
 8016418:	b40e      	push	{r1, r2, r3}
 801641a:	b570      	push	{r4, r5, r6, lr}
 801641c:	b09d      	sub	sp, #116	@ 0x74
 801641e:	ac21      	add	r4, sp, #132	@ 0x84
 8016420:	2500      	movs	r5, #0
 8016422:	f44f 7201 	mov.w	r2, #516	@ 0x204
 8016426:	f854 6b04 	ldr.w	r6, [r4], #4
 801642a:	f8ad 2014 	strh.w	r2, [sp, #20]
 801642e:	951b      	str	r5, [sp, #108]	@ 0x6c
 8016430:	9002      	str	r0, [sp, #8]
 8016432:	9006      	str	r0, [sp, #24]
 8016434:	f7e9 fed6 	bl	80001e4 <strlen>
 8016438:	4b0b      	ldr	r3, [pc, #44]	@ (8016468 <siscanf+0x50>)
 801643a:	9003      	str	r0, [sp, #12]
 801643c:	9007      	str	r0, [sp, #28]
 801643e:	480b      	ldr	r0, [pc, #44]	@ (801646c <siscanf+0x54>)
 8016440:	930b      	str	r3, [sp, #44]	@ 0x2c
 8016442:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8016446:	f8ad 3016 	strh.w	r3, [sp, #22]
 801644a:	4632      	mov	r2, r6
 801644c:	4623      	mov	r3, r4
 801644e:	a902      	add	r1, sp, #8
 8016450:	6800      	ldr	r0, [r0, #0]
 8016452:	950f      	str	r5, [sp, #60]	@ 0x3c
 8016454:	9514      	str	r5, [sp, #80]	@ 0x50
 8016456:	9401      	str	r4, [sp, #4]
 8016458:	f000 fb58 	bl	8016b0c <__ssvfiscanf_r>
 801645c:	b01d      	add	sp, #116	@ 0x74
 801645e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8016462:	b003      	add	sp, #12
 8016464:	4770      	bx	lr
 8016466:	bf00      	nop
 8016468:	08016471 	.word	0x08016471
 801646c:	20000034 	.word	0x20000034

08016470 <__seofread>:
 8016470:	2000      	movs	r0, #0
 8016472:	4770      	bx	lr

08016474 <memcmp>:
 8016474:	b510      	push	{r4, lr}
 8016476:	3901      	subs	r1, #1
 8016478:	4402      	add	r2, r0
 801647a:	4290      	cmp	r0, r2
 801647c:	d101      	bne.n	8016482 <memcmp+0xe>
 801647e:	2000      	movs	r0, #0
 8016480:	e005      	b.n	801648e <memcmp+0x1a>
 8016482:	7803      	ldrb	r3, [r0, #0]
 8016484:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8016488:	42a3      	cmp	r3, r4
 801648a:	d001      	beq.n	8016490 <memcmp+0x1c>
 801648c:	1b18      	subs	r0, r3, r4
 801648e:	bd10      	pop	{r4, pc}
 8016490:	3001      	adds	r0, #1
 8016492:	e7f2      	b.n	801647a <memcmp+0x6>

08016494 <memset>:
 8016494:	4402      	add	r2, r0
 8016496:	4603      	mov	r3, r0
 8016498:	4293      	cmp	r3, r2
 801649a:	d100      	bne.n	801649e <memset+0xa>
 801649c:	4770      	bx	lr
 801649e:	f803 1b01 	strb.w	r1, [r3], #1
 80164a2:	e7f9      	b.n	8016498 <memset+0x4>

080164a4 <strchr>:
 80164a4:	b2c9      	uxtb	r1, r1
 80164a6:	4603      	mov	r3, r0
 80164a8:	4618      	mov	r0, r3
 80164aa:	f813 2b01 	ldrb.w	r2, [r3], #1
 80164ae:	b112      	cbz	r2, 80164b6 <strchr+0x12>
 80164b0:	428a      	cmp	r2, r1
 80164b2:	d1f9      	bne.n	80164a8 <strchr+0x4>
 80164b4:	4770      	bx	lr
 80164b6:	2900      	cmp	r1, #0
 80164b8:	bf18      	it	ne
 80164ba:	2000      	movne	r0, #0
 80164bc:	4770      	bx	lr

080164be <strncmp>:
 80164be:	b510      	push	{r4, lr}
 80164c0:	b16a      	cbz	r2, 80164de <strncmp+0x20>
 80164c2:	3901      	subs	r1, #1
 80164c4:	1884      	adds	r4, r0, r2
 80164c6:	f810 2b01 	ldrb.w	r2, [r0], #1
 80164ca:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 80164ce:	429a      	cmp	r2, r3
 80164d0:	d103      	bne.n	80164da <strncmp+0x1c>
 80164d2:	42a0      	cmp	r0, r4
 80164d4:	d001      	beq.n	80164da <strncmp+0x1c>
 80164d6:	2a00      	cmp	r2, #0
 80164d8:	d1f5      	bne.n	80164c6 <strncmp+0x8>
 80164da:	1ad0      	subs	r0, r2, r3
 80164dc:	bd10      	pop	{r4, pc}
 80164de:	4610      	mov	r0, r2
 80164e0:	e7fc      	b.n	80164dc <strncmp+0x1e>

080164e2 <strncpy>:
 80164e2:	b510      	push	{r4, lr}
 80164e4:	3901      	subs	r1, #1
 80164e6:	4603      	mov	r3, r0
 80164e8:	b132      	cbz	r2, 80164f8 <strncpy+0x16>
 80164ea:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 80164ee:	f803 4b01 	strb.w	r4, [r3], #1
 80164f2:	3a01      	subs	r2, #1
 80164f4:	2c00      	cmp	r4, #0
 80164f6:	d1f7      	bne.n	80164e8 <strncpy+0x6>
 80164f8:	441a      	add	r2, r3
 80164fa:	2100      	movs	r1, #0
 80164fc:	4293      	cmp	r3, r2
 80164fe:	d100      	bne.n	8016502 <strncpy+0x20>
 8016500:	bd10      	pop	{r4, pc}
 8016502:	f803 1b01 	strb.w	r1, [r3], #1
 8016506:	e7f9      	b.n	80164fc <strncpy+0x1a>

08016508 <strstr>:
 8016508:	780a      	ldrb	r2, [r1, #0]
 801650a:	b570      	push	{r4, r5, r6, lr}
 801650c:	b96a      	cbnz	r2, 801652a <strstr+0x22>
 801650e:	bd70      	pop	{r4, r5, r6, pc}
 8016510:	429a      	cmp	r2, r3
 8016512:	d109      	bne.n	8016528 <strstr+0x20>
 8016514:	460c      	mov	r4, r1
 8016516:	4605      	mov	r5, r0
 8016518:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 801651c:	2b00      	cmp	r3, #0
 801651e:	d0f6      	beq.n	801650e <strstr+0x6>
 8016520:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 8016524:	429e      	cmp	r6, r3
 8016526:	d0f7      	beq.n	8016518 <strstr+0x10>
 8016528:	3001      	adds	r0, #1
 801652a:	7803      	ldrb	r3, [r0, #0]
 801652c:	2b00      	cmp	r3, #0
 801652e:	d1ef      	bne.n	8016510 <strstr+0x8>
 8016530:	4618      	mov	r0, r3
 8016532:	e7ec      	b.n	801650e <strstr+0x6>

08016534 <__errno>:
 8016534:	4b01      	ldr	r3, [pc, #4]	@ (801653c <__errno+0x8>)
 8016536:	6818      	ldr	r0, [r3, #0]
 8016538:	4770      	bx	lr
 801653a:	bf00      	nop
 801653c:	20000034 	.word	0x20000034

08016540 <__libc_init_array>:
 8016540:	b570      	push	{r4, r5, r6, lr}
 8016542:	4d0d      	ldr	r5, [pc, #52]	@ (8016578 <__libc_init_array+0x38>)
 8016544:	4c0d      	ldr	r4, [pc, #52]	@ (801657c <__libc_init_array+0x3c>)
 8016546:	1b64      	subs	r4, r4, r5
 8016548:	10a4      	asrs	r4, r4, #2
 801654a:	2600      	movs	r6, #0
 801654c:	42a6      	cmp	r6, r4
 801654e:	d109      	bne.n	8016564 <__libc_init_array+0x24>
 8016550:	4d0b      	ldr	r5, [pc, #44]	@ (8016580 <__libc_init_array+0x40>)
 8016552:	4c0c      	ldr	r4, [pc, #48]	@ (8016584 <__libc_init_array+0x44>)
 8016554:	f001 f86e 	bl	8017634 <_init>
 8016558:	1b64      	subs	r4, r4, r5
 801655a:	10a4      	asrs	r4, r4, #2
 801655c:	2600      	movs	r6, #0
 801655e:	42a6      	cmp	r6, r4
 8016560:	d105      	bne.n	801656e <__libc_init_array+0x2e>
 8016562:	bd70      	pop	{r4, r5, r6, pc}
 8016564:	f855 3b04 	ldr.w	r3, [r5], #4
 8016568:	4798      	blx	r3
 801656a:	3601      	adds	r6, #1
 801656c:	e7ee      	b.n	801654c <__libc_init_array+0xc>
 801656e:	f855 3b04 	ldr.w	r3, [r5], #4
 8016572:	4798      	blx	r3
 8016574:	3601      	adds	r6, #1
 8016576:	e7f2      	b.n	801655e <__libc_init_array+0x1e>
 8016578:	08018018 	.word	0x08018018
 801657c:	08018018 	.word	0x08018018
 8016580:	08018018 	.word	0x08018018
 8016584:	0801801c 	.word	0x0801801c

08016588 <__retarget_lock_acquire_recursive>:
 8016588:	4770      	bx	lr

0801658a <__retarget_lock_release_recursive>:
 801658a:	4770      	bx	lr

0801658c <strcpy>:
 801658c:	4603      	mov	r3, r0
 801658e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8016592:	f803 2b01 	strb.w	r2, [r3], #1
 8016596:	2a00      	cmp	r2, #0
 8016598:	d1f9      	bne.n	801658e <strcpy+0x2>
 801659a:	4770      	bx	lr

0801659c <memcpy>:
 801659c:	440a      	add	r2, r1
 801659e:	4291      	cmp	r1, r2
 80165a0:	f100 33ff 	add.w	r3, r0, #4294967295
 80165a4:	d100      	bne.n	80165a8 <memcpy+0xc>
 80165a6:	4770      	bx	lr
 80165a8:	b510      	push	{r4, lr}
 80165aa:	f811 4b01 	ldrb.w	r4, [r1], #1
 80165ae:	f803 4f01 	strb.w	r4, [r3, #1]!
 80165b2:	4291      	cmp	r1, r2
 80165b4:	d1f9      	bne.n	80165aa <memcpy+0xe>
 80165b6:	bd10      	pop	{r4, pc}

080165b8 <_free_r>:
 80165b8:	b538      	push	{r3, r4, r5, lr}
 80165ba:	4605      	mov	r5, r0
 80165bc:	2900      	cmp	r1, #0
 80165be:	d041      	beq.n	8016644 <_free_r+0x8c>
 80165c0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80165c4:	1f0c      	subs	r4, r1, #4
 80165c6:	2b00      	cmp	r3, #0
 80165c8:	bfb8      	it	lt
 80165ca:	18e4      	addlt	r4, r4, r3
 80165cc:	f000 f8e0 	bl	8016790 <__malloc_lock>
 80165d0:	4a1d      	ldr	r2, [pc, #116]	@ (8016648 <_free_r+0x90>)
 80165d2:	6813      	ldr	r3, [r2, #0]
 80165d4:	b933      	cbnz	r3, 80165e4 <_free_r+0x2c>
 80165d6:	6063      	str	r3, [r4, #4]
 80165d8:	6014      	str	r4, [r2, #0]
 80165da:	4628      	mov	r0, r5
 80165dc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80165e0:	f000 b8dc 	b.w	801679c <__malloc_unlock>
 80165e4:	42a3      	cmp	r3, r4
 80165e6:	d908      	bls.n	80165fa <_free_r+0x42>
 80165e8:	6820      	ldr	r0, [r4, #0]
 80165ea:	1821      	adds	r1, r4, r0
 80165ec:	428b      	cmp	r3, r1
 80165ee:	bf01      	itttt	eq
 80165f0:	6819      	ldreq	r1, [r3, #0]
 80165f2:	685b      	ldreq	r3, [r3, #4]
 80165f4:	1809      	addeq	r1, r1, r0
 80165f6:	6021      	streq	r1, [r4, #0]
 80165f8:	e7ed      	b.n	80165d6 <_free_r+0x1e>
 80165fa:	461a      	mov	r2, r3
 80165fc:	685b      	ldr	r3, [r3, #4]
 80165fe:	b10b      	cbz	r3, 8016604 <_free_r+0x4c>
 8016600:	42a3      	cmp	r3, r4
 8016602:	d9fa      	bls.n	80165fa <_free_r+0x42>
 8016604:	6811      	ldr	r1, [r2, #0]
 8016606:	1850      	adds	r0, r2, r1
 8016608:	42a0      	cmp	r0, r4
 801660a:	d10b      	bne.n	8016624 <_free_r+0x6c>
 801660c:	6820      	ldr	r0, [r4, #0]
 801660e:	4401      	add	r1, r0
 8016610:	1850      	adds	r0, r2, r1
 8016612:	4283      	cmp	r3, r0
 8016614:	6011      	str	r1, [r2, #0]
 8016616:	d1e0      	bne.n	80165da <_free_r+0x22>
 8016618:	6818      	ldr	r0, [r3, #0]
 801661a:	685b      	ldr	r3, [r3, #4]
 801661c:	6053      	str	r3, [r2, #4]
 801661e:	4408      	add	r0, r1
 8016620:	6010      	str	r0, [r2, #0]
 8016622:	e7da      	b.n	80165da <_free_r+0x22>
 8016624:	d902      	bls.n	801662c <_free_r+0x74>
 8016626:	230c      	movs	r3, #12
 8016628:	602b      	str	r3, [r5, #0]
 801662a:	e7d6      	b.n	80165da <_free_r+0x22>
 801662c:	6820      	ldr	r0, [r4, #0]
 801662e:	1821      	adds	r1, r4, r0
 8016630:	428b      	cmp	r3, r1
 8016632:	bf04      	itt	eq
 8016634:	6819      	ldreq	r1, [r3, #0]
 8016636:	685b      	ldreq	r3, [r3, #4]
 8016638:	6063      	str	r3, [r4, #4]
 801663a:	bf04      	itt	eq
 801663c:	1809      	addeq	r1, r1, r0
 801663e:	6021      	streq	r1, [r4, #0]
 8016640:	6054      	str	r4, [r2, #4]
 8016642:	e7ca      	b.n	80165da <_free_r+0x22>
 8016644:	bd38      	pop	{r3, r4, r5, pc}
 8016646:	bf00      	nop
 8016648:	20005da4 	.word	0x20005da4

0801664c <sbrk_aligned>:
 801664c:	b570      	push	{r4, r5, r6, lr}
 801664e:	4e0f      	ldr	r6, [pc, #60]	@ (801668c <sbrk_aligned+0x40>)
 8016650:	460c      	mov	r4, r1
 8016652:	6831      	ldr	r1, [r6, #0]
 8016654:	4605      	mov	r5, r0
 8016656:	b911      	cbnz	r1, 801665e <sbrk_aligned+0x12>
 8016658:	f000 ff36 	bl	80174c8 <_sbrk_r>
 801665c:	6030      	str	r0, [r6, #0]
 801665e:	4621      	mov	r1, r4
 8016660:	4628      	mov	r0, r5
 8016662:	f000 ff31 	bl	80174c8 <_sbrk_r>
 8016666:	1c43      	adds	r3, r0, #1
 8016668:	d103      	bne.n	8016672 <sbrk_aligned+0x26>
 801666a:	f04f 34ff 	mov.w	r4, #4294967295
 801666e:	4620      	mov	r0, r4
 8016670:	bd70      	pop	{r4, r5, r6, pc}
 8016672:	1cc4      	adds	r4, r0, #3
 8016674:	f024 0403 	bic.w	r4, r4, #3
 8016678:	42a0      	cmp	r0, r4
 801667a:	d0f8      	beq.n	801666e <sbrk_aligned+0x22>
 801667c:	1a21      	subs	r1, r4, r0
 801667e:	4628      	mov	r0, r5
 8016680:	f000 ff22 	bl	80174c8 <_sbrk_r>
 8016684:	3001      	adds	r0, #1
 8016686:	d1f2      	bne.n	801666e <sbrk_aligned+0x22>
 8016688:	e7ef      	b.n	801666a <sbrk_aligned+0x1e>
 801668a:	bf00      	nop
 801668c:	20005da0 	.word	0x20005da0

08016690 <_malloc_r>:
 8016690:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8016694:	1ccd      	adds	r5, r1, #3
 8016696:	f025 0503 	bic.w	r5, r5, #3
 801669a:	3508      	adds	r5, #8
 801669c:	2d0c      	cmp	r5, #12
 801669e:	bf38      	it	cc
 80166a0:	250c      	movcc	r5, #12
 80166a2:	2d00      	cmp	r5, #0
 80166a4:	4606      	mov	r6, r0
 80166a6:	db01      	blt.n	80166ac <_malloc_r+0x1c>
 80166a8:	42a9      	cmp	r1, r5
 80166aa:	d904      	bls.n	80166b6 <_malloc_r+0x26>
 80166ac:	230c      	movs	r3, #12
 80166ae:	6033      	str	r3, [r6, #0]
 80166b0:	2000      	movs	r0, #0
 80166b2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80166b6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 801678c <_malloc_r+0xfc>
 80166ba:	f000 f869 	bl	8016790 <__malloc_lock>
 80166be:	f8d8 3000 	ldr.w	r3, [r8]
 80166c2:	461c      	mov	r4, r3
 80166c4:	bb44      	cbnz	r4, 8016718 <_malloc_r+0x88>
 80166c6:	4629      	mov	r1, r5
 80166c8:	4630      	mov	r0, r6
 80166ca:	f7ff ffbf 	bl	801664c <sbrk_aligned>
 80166ce:	1c43      	adds	r3, r0, #1
 80166d0:	4604      	mov	r4, r0
 80166d2:	d158      	bne.n	8016786 <_malloc_r+0xf6>
 80166d4:	f8d8 4000 	ldr.w	r4, [r8]
 80166d8:	4627      	mov	r7, r4
 80166da:	2f00      	cmp	r7, #0
 80166dc:	d143      	bne.n	8016766 <_malloc_r+0xd6>
 80166de:	2c00      	cmp	r4, #0
 80166e0:	d04b      	beq.n	801677a <_malloc_r+0xea>
 80166e2:	6823      	ldr	r3, [r4, #0]
 80166e4:	4639      	mov	r1, r7
 80166e6:	4630      	mov	r0, r6
 80166e8:	eb04 0903 	add.w	r9, r4, r3
 80166ec:	f000 feec 	bl	80174c8 <_sbrk_r>
 80166f0:	4581      	cmp	r9, r0
 80166f2:	d142      	bne.n	801677a <_malloc_r+0xea>
 80166f4:	6821      	ldr	r1, [r4, #0]
 80166f6:	1a6d      	subs	r5, r5, r1
 80166f8:	4629      	mov	r1, r5
 80166fa:	4630      	mov	r0, r6
 80166fc:	f7ff ffa6 	bl	801664c <sbrk_aligned>
 8016700:	3001      	adds	r0, #1
 8016702:	d03a      	beq.n	801677a <_malloc_r+0xea>
 8016704:	6823      	ldr	r3, [r4, #0]
 8016706:	442b      	add	r3, r5
 8016708:	6023      	str	r3, [r4, #0]
 801670a:	f8d8 3000 	ldr.w	r3, [r8]
 801670e:	685a      	ldr	r2, [r3, #4]
 8016710:	bb62      	cbnz	r2, 801676c <_malloc_r+0xdc>
 8016712:	f8c8 7000 	str.w	r7, [r8]
 8016716:	e00f      	b.n	8016738 <_malloc_r+0xa8>
 8016718:	6822      	ldr	r2, [r4, #0]
 801671a:	1b52      	subs	r2, r2, r5
 801671c:	d420      	bmi.n	8016760 <_malloc_r+0xd0>
 801671e:	2a0b      	cmp	r2, #11
 8016720:	d917      	bls.n	8016752 <_malloc_r+0xc2>
 8016722:	1961      	adds	r1, r4, r5
 8016724:	42a3      	cmp	r3, r4
 8016726:	6025      	str	r5, [r4, #0]
 8016728:	bf18      	it	ne
 801672a:	6059      	strne	r1, [r3, #4]
 801672c:	6863      	ldr	r3, [r4, #4]
 801672e:	bf08      	it	eq
 8016730:	f8c8 1000 	streq.w	r1, [r8]
 8016734:	5162      	str	r2, [r4, r5]
 8016736:	604b      	str	r3, [r1, #4]
 8016738:	4630      	mov	r0, r6
 801673a:	f000 f82f 	bl	801679c <__malloc_unlock>
 801673e:	f104 000b 	add.w	r0, r4, #11
 8016742:	1d23      	adds	r3, r4, #4
 8016744:	f020 0007 	bic.w	r0, r0, #7
 8016748:	1ac2      	subs	r2, r0, r3
 801674a:	bf1c      	itt	ne
 801674c:	1a1b      	subne	r3, r3, r0
 801674e:	50a3      	strne	r3, [r4, r2]
 8016750:	e7af      	b.n	80166b2 <_malloc_r+0x22>
 8016752:	6862      	ldr	r2, [r4, #4]
 8016754:	42a3      	cmp	r3, r4
 8016756:	bf0c      	ite	eq
 8016758:	f8c8 2000 	streq.w	r2, [r8]
 801675c:	605a      	strne	r2, [r3, #4]
 801675e:	e7eb      	b.n	8016738 <_malloc_r+0xa8>
 8016760:	4623      	mov	r3, r4
 8016762:	6864      	ldr	r4, [r4, #4]
 8016764:	e7ae      	b.n	80166c4 <_malloc_r+0x34>
 8016766:	463c      	mov	r4, r7
 8016768:	687f      	ldr	r7, [r7, #4]
 801676a:	e7b6      	b.n	80166da <_malloc_r+0x4a>
 801676c:	461a      	mov	r2, r3
 801676e:	685b      	ldr	r3, [r3, #4]
 8016770:	42a3      	cmp	r3, r4
 8016772:	d1fb      	bne.n	801676c <_malloc_r+0xdc>
 8016774:	2300      	movs	r3, #0
 8016776:	6053      	str	r3, [r2, #4]
 8016778:	e7de      	b.n	8016738 <_malloc_r+0xa8>
 801677a:	230c      	movs	r3, #12
 801677c:	6033      	str	r3, [r6, #0]
 801677e:	4630      	mov	r0, r6
 8016780:	f000 f80c 	bl	801679c <__malloc_unlock>
 8016784:	e794      	b.n	80166b0 <_malloc_r+0x20>
 8016786:	6005      	str	r5, [r0, #0]
 8016788:	e7d6      	b.n	8016738 <_malloc_r+0xa8>
 801678a:	bf00      	nop
 801678c:	20005da4 	.word	0x20005da4

08016790 <__malloc_lock>:
 8016790:	4801      	ldr	r0, [pc, #4]	@ (8016798 <__malloc_lock+0x8>)
 8016792:	f7ff bef9 	b.w	8016588 <__retarget_lock_acquire_recursive>
 8016796:	bf00      	nop
 8016798:	20005d9c 	.word	0x20005d9c

0801679c <__malloc_unlock>:
 801679c:	4801      	ldr	r0, [pc, #4]	@ (80167a4 <__malloc_unlock+0x8>)
 801679e:	f7ff bef4 	b.w	801658a <__retarget_lock_release_recursive>
 80167a2:	bf00      	nop
 80167a4:	20005d9c 	.word	0x20005d9c

080167a8 <__ssputs_r>:
 80167a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80167ac:	688e      	ldr	r6, [r1, #8]
 80167ae:	461f      	mov	r7, r3
 80167b0:	42be      	cmp	r6, r7
 80167b2:	680b      	ldr	r3, [r1, #0]
 80167b4:	4682      	mov	sl, r0
 80167b6:	460c      	mov	r4, r1
 80167b8:	4690      	mov	r8, r2
 80167ba:	d82d      	bhi.n	8016818 <__ssputs_r+0x70>
 80167bc:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80167c0:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80167c4:	d026      	beq.n	8016814 <__ssputs_r+0x6c>
 80167c6:	6965      	ldr	r5, [r4, #20]
 80167c8:	6909      	ldr	r1, [r1, #16]
 80167ca:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80167ce:	eba3 0901 	sub.w	r9, r3, r1
 80167d2:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80167d6:	1c7b      	adds	r3, r7, #1
 80167d8:	444b      	add	r3, r9
 80167da:	106d      	asrs	r5, r5, #1
 80167dc:	429d      	cmp	r5, r3
 80167de:	bf38      	it	cc
 80167e0:	461d      	movcc	r5, r3
 80167e2:	0553      	lsls	r3, r2, #21
 80167e4:	d527      	bpl.n	8016836 <__ssputs_r+0x8e>
 80167e6:	4629      	mov	r1, r5
 80167e8:	f7ff ff52 	bl	8016690 <_malloc_r>
 80167ec:	4606      	mov	r6, r0
 80167ee:	b360      	cbz	r0, 801684a <__ssputs_r+0xa2>
 80167f0:	6921      	ldr	r1, [r4, #16]
 80167f2:	464a      	mov	r2, r9
 80167f4:	f7ff fed2 	bl	801659c <memcpy>
 80167f8:	89a3      	ldrh	r3, [r4, #12]
 80167fa:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80167fe:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8016802:	81a3      	strh	r3, [r4, #12]
 8016804:	6126      	str	r6, [r4, #16]
 8016806:	6165      	str	r5, [r4, #20]
 8016808:	444e      	add	r6, r9
 801680a:	eba5 0509 	sub.w	r5, r5, r9
 801680e:	6026      	str	r6, [r4, #0]
 8016810:	60a5      	str	r5, [r4, #8]
 8016812:	463e      	mov	r6, r7
 8016814:	42be      	cmp	r6, r7
 8016816:	d900      	bls.n	801681a <__ssputs_r+0x72>
 8016818:	463e      	mov	r6, r7
 801681a:	6820      	ldr	r0, [r4, #0]
 801681c:	4632      	mov	r2, r6
 801681e:	4641      	mov	r1, r8
 8016820:	f000 fe37 	bl	8017492 <memmove>
 8016824:	68a3      	ldr	r3, [r4, #8]
 8016826:	1b9b      	subs	r3, r3, r6
 8016828:	60a3      	str	r3, [r4, #8]
 801682a:	6823      	ldr	r3, [r4, #0]
 801682c:	4433      	add	r3, r6
 801682e:	6023      	str	r3, [r4, #0]
 8016830:	2000      	movs	r0, #0
 8016832:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8016836:	462a      	mov	r2, r5
 8016838:	f000 fe56 	bl	80174e8 <_realloc_r>
 801683c:	4606      	mov	r6, r0
 801683e:	2800      	cmp	r0, #0
 8016840:	d1e0      	bne.n	8016804 <__ssputs_r+0x5c>
 8016842:	6921      	ldr	r1, [r4, #16]
 8016844:	4650      	mov	r0, sl
 8016846:	f7ff feb7 	bl	80165b8 <_free_r>
 801684a:	230c      	movs	r3, #12
 801684c:	f8ca 3000 	str.w	r3, [sl]
 8016850:	89a3      	ldrh	r3, [r4, #12]
 8016852:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8016856:	81a3      	strh	r3, [r4, #12]
 8016858:	f04f 30ff 	mov.w	r0, #4294967295
 801685c:	e7e9      	b.n	8016832 <__ssputs_r+0x8a>
	...

08016860 <_svfiprintf_r>:
 8016860:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016864:	4698      	mov	r8, r3
 8016866:	898b      	ldrh	r3, [r1, #12]
 8016868:	061b      	lsls	r3, r3, #24
 801686a:	b09d      	sub	sp, #116	@ 0x74
 801686c:	4607      	mov	r7, r0
 801686e:	460d      	mov	r5, r1
 8016870:	4614      	mov	r4, r2
 8016872:	d510      	bpl.n	8016896 <_svfiprintf_r+0x36>
 8016874:	690b      	ldr	r3, [r1, #16]
 8016876:	b973      	cbnz	r3, 8016896 <_svfiprintf_r+0x36>
 8016878:	2140      	movs	r1, #64	@ 0x40
 801687a:	f7ff ff09 	bl	8016690 <_malloc_r>
 801687e:	6028      	str	r0, [r5, #0]
 8016880:	6128      	str	r0, [r5, #16]
 8016882:	b930      	cbnz	r0, 8016892 <_svfiprintf_r+0x32>
 8016884:	230c      	movs	r3, #12
 8016886:	603b      	str	r3, [r7, #0]
 8016888:	f04f 30ff 	mov.w	r0, #4294967295
 801688c:	b01d      	add	sp, #116	@ 0x74
 801688e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016892:	2340      	movs	r3, #64	@ 0x40
 8016894:	616b      	str	r3, [r5, #20]
 8016896:	2300      	movs	r3, #0
 8016898:	9309      	str	r3, [sp, #36]	@ 0x24
 801689a:	2320      	movs	r3, #32
 801689c:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80168a0:	f8cd 800c 	str.w	r8, [sp, #12]
 80168a4:	2330      	movs	r3, #48	@ 0x30
 80168a6:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8016a44 <_svfiprintf_r+0x1e4>
 80168aa:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80168ae:	f04f 0901 	mov.w	r9, #1
 80168b2:	4623      	mov	r3, r4
 80168b4:	469a      	mov	sl, r3
 80168b6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80168ba:	b10a      	cbz	r2, 80168c0 <_svfiprintf_r+0x60>
 80168bc:	2a25      	cmp	r2, #37	@ 0x25
 80168be:	d1f9      	bne.n	80168b4 <_svfiprintf_r+0x54>
 80168c0:	ebba 0b04 	subs.w	fp, sl, r4
 80168c4:	d00b      	beq.n	80168de <_svfiprintf_r+0x7e>
 80168c6:	465b      	mov	r3, fp
 80168c8:	4622      	mov	r2, r4
 80168ca:	4629      	mov	r1, r5
 80168cc:	4638      	mov	r0, r7
 80168ce:	f7ff ff6b 	bl	80167a8 <__ssputs_r>
 80168d2:	3001      	adds	r0, #1
 80168d4:	f000 80a7 	beq.w	8016a26 <_svfiprintf_r+0x1c6>
 80168d8:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80168da:	445a      	add	r2, fp
 80168dc:	9209      	str	r2, [sp, #36]	@ 0x24
 80168de:	f89a 3000 	ldrb.w	r3, [sl]
 80168e2:	2b00      	cmp	r3, #0
 80168e4:	f000 809f 	beq.w	8016a26 <_svfiprintf_r+0x1c6>
 80168e8:	2300      	movs	r3, #0
 80168ea:	f04f 32ff 	mov.w	r2, #4294967295
 80168ee:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80168f2:	f10a 0a01 	add.w	sl, sl, #1
 80168f6:	9304      	str	r3, [sp, #16]
 80168f8:	9307      	str	r3, [sp, #28]
 80168fa:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80168fe:	931a      	str	r3, [sp, #104]	@ 0x68
 8016900:	4654      	mov	r4, sl
 8016902:	2205      	movs	r2, #5
 8016904:	f814 1b01 	ldrb.w	r1, [r4], #1
 8016908:	484e      	ldr	r0, [pc, #312]	@ (8016a44 <_svfiprintf_r+0x1e4>)
 801690a:	f7e9 fc79 	bl	8000200 <memchr>
 801690e:	9a04      	ldr	r2, [sp, #16]
 8016910:	b9d8      	cbnz	r0, 801694a <_svfiprintf_r+0xea>
 8016912:	06d0      	lsls	r0, r2, #27
 8016914:	bf44      	itt	mi
 8016916:	2320      	movmi	r3, #32
 8016918:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801691c:	0711      	lsls	r1, r2, #28
 801691e:	bf44      	itt	mi
 8016920:	232b      	movmi	r3, #43	@ 0x2b
 8016922:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8016926:	f89a 3000 	ldrb.w	r3, [sl]
 801692a:	2b2a      	cmp	r3, #42	@ 0x2a
 801692c:	d015      	beq.n	801695a <_svfiprintf_r+0xfa>
 801692e:	9a07      	ldr	r2, [sp, #28]
 8016930:	4654      	mov	r4, sl
 8016932:	2000      	movs	r0, #0
 8016934:	f04f 0c0a 	mov.w	ip, #10
 8016938:	4621      	mov	r1, r4
 801693a:	f811 3b01 	ldrb.w	r3, [r1], #1
 801693e:	3b30      	subs	r3, #48	@ 0x30
 8016940:	2b09      	cmp	r3, #9
 8016942:	d94b      	bls.n	80169dc <_svfiprintf_r+0x17c>
 8016944:	b1b0      	cbz	r0, 8016974 <_svfiprintf_r+0x114>
 8016946:	9207      	str	r2, [sp, #28]
 8016948:	e014      	b.n	8016974 <_svfiprintf_r+0x114>
 801694a:	eba0 0308 	sub.w	r3, r0, r8
 801694e:	fa09 f303 	lsl.w	r3, r9, r3
 8016952:	4313      	orrs	r3, r2
 8016954:	9304      	str	r3, [sp, #16]
 8016956:	46a2      	mov	sl, r4
 8016958:	e7d2      	b.n	8016900 <_svfiprintf_r+0xa0>
 801695a:	9b03      	ldr	r3, [sp, #12]
 801695c:	1d19      	adds	r1, r3, #4
 801695e:	681b      	ldr	r3, [r3, #0]
 8016960:	9103      	str	r1, [sp, #12]
 8016962:	2b00      	cmp	r3, #0
 8016964:	bfbb      	ittet	lt
 8016966:	425b      	neglt	r3, r3
 8016968:	f042 0202 	orrlt.w	r2, r2, #2
 801696c:	9307      	strge	r3, [sp, #28]
 801696e:	9307      	strlt	r3, [sp, #28]
 8016970:	bfb8      	it	lt
 8016972:	9204      	strlt	r2, [sp, #16]
 8016974:	7823      	ldrb	r3, [r4, #0]
 8016976:	2b2e      	cmp	r3, #46	@ 0x2e
 8016978:	d10a      	bne.n	8016990 <_svfiprintf_r+0x130>
 801697a:	7863      	ldrb	r3, [r4, #1]
 801697c:	2b2a      	cmp	r3, #42	@ 0x2a
 801697e:	d132      	bne.n	80169e6 <_svfiprintf_r+0x186>
 8016980:	9b03      	ldr	r3, [sp, #12]
 8016982:	1d1a      	adds	r2, r3, #4
 8016984:	681b      	ldr	r3, [r3, #0]
 8016986:	9203      	str	r2, [sp, #12]
 8016988:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 801698c:	3402      	adds	r4, #2
 801698e:	9305      	str	r3, [sp, #20]
 8016990:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8016a54 <_svfiprintf_r+0x1f4>
 8016994:	7821      	ldrb	r1, [r4, #0]
 8016996:	2203      	movs	r2, #3
 8016998:	4650      	mov	r0, sl
 801699a:	f7e9 fc31 	bl	8000200 <memchr>
 801699e:	b138      	cbz	r0, 80169b0 <_svfiprintf_r+0x150>
 80169a0:	9b04      	ldr	r3, [sp, #16]
 80169a2:	eba0 000a 	sub.w	r0, r0, sl
 80169a6:	2240      	movs	r2, #64	@ 0x40
 80169a8:	4082      	lsls	r2, r0
 80169aa:	4313      	orrs	r3, r2
 80169ac:	3401      	adds	r4, #1
 80169ae:	9304      	str	r3, [sp, #16]
 80169b0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80169b4:	4824      	ldr	r0, [pc, #144]	@ (8016a48 <_svfiprintf_r+0x1e8>)
 80169b6:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80169ba:	2206      	movs	r2, #6
 80169bc:	f7e9 fc20 	bl	8000200 <memchr>
 80169c0:	2800      	cmp	r0, #0
 80169c2:	d036      	beq.n	8016a32 <_svfiprintf_r+0x1d2>
 80169c4:	4b21      	ldr	r3, [pc, #132]	@ (8016a4c <_svfiprintf_r+0x1ec>)
 80169c6:	bb1b      	cbnz	r3, 8016a10 <_svfiprintf_r+0x1b0>
 80169c8:	9b03      	ldr	r3, [sp, #12]
 80169ca:	3307      	adds	r3, #7
 80169cc:	f023 0307 	bic.w	r3, r3, #7
 80169d0:	3308      	adds	r3, #8
 80169d2:	9303      	str	r3, [sp, #12]
 80169d4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80169d6:	4433      	add	r3, r6
 80169d8:	9309      	str	r3, [sp, #36]	@ 0x24
 80169da:	e76a      	b.n	80168b2 <_svfiprintf_r+0x52>
 80169dc:	fb0c 3202 	mla	r2, ip, r2, r3
 80169e0:	460c      	mov	r4, r1
 80169e2:	2001      	movs	r0, #1
 80169e4:	e7a8      	b.n	8016938 <_svfiprintf_r+0xd8>
 80169e6:	2300      	movs	r3, #0
 80169e8:	3401      	adds	r4, #1
 80169ea:	9305      	str	r3, [sp, #20]
 80169ec:	4619      	mov	r1, r3
 80169ee:	f04f 0c0a 	mov.w	ip, #10
 80169f2:	4620      	mov	r0, r4
 80169f4:	f810 2b01 	ldrb.w	r2, [r0], #1
 80169f8:	3a30      	subs	r2, #48	@ 0x30
 80169fa:	2a09      	cmp	r2, #9
 80169fc:	d903      	bls.n	8016a06 <_svfiprintf_r+0x1a6>
 80169fe:	2b00      	cmp	r3, #0
 8016a00:	d0c6      	beq.n	8016990 <_svfiprintf_r+0x130>
 8016a02:	9105      	str	r1, [sp, #20]
 8016a04:	e7c4      	b.n	8016990 <_svfiprintf_r+0x130>
 8016a06:	fb0c 2101 	mla	r1, ip, r1, r2
 8016a0a:	4604      	mov	r4, r0
 8016a0c:	2301      	movs	r3, #1
 8016a0e:	e7f0      	b.n	80169f2 <_svfiprintf_r+0x192>
 8016a10:	ab03      	add	r3, sp, #12
 8016a12:	9300      	str	r3, [sp, #0]
 8016a14:	462a      	mov	r2, r5
 8016a16:	4b0e      	ldr	r3, [pc, #56]	@ (8016a50 <_svfiprintf_r+0x1f0>)
 8016a18:	a904      	add	r1, sp, #16
 8016a1a:	4638      	mov	r0, r7
 8016a1c:	f3af 8000 	nop.w
 8016a20:	1c42      	adds	r2, r0, #1
 8016a22:	4606      	mov	r6, r0
 8016a24:	d1d6      	bne.n	80169d4 <_svfiprintf_r+0x174>
 8016a26:	89ab      	ldrh	r3, [r5, #12]
 8016a28:	065b      	lsls	r3, r3, #25
 8016a2a:	f53f af2d 	bmi.w	8016888 <_svfiprintf_r+0x28>
 8016a2e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8016a30:	e72c      	b.n	801688c <_svfiprintf_r+0x2c>
 8016a32:	ab03      	add	r3, sp, #12
 8016a34:	9300      	str	r3, [sp, #0]
 8016a36:	462a      	mov	r2, r5
 8016a38:	4b05      	ldr	r3, [pc, #20]	@ (8016a50 <_svfiprintf_r+0x1f0>)
 8016a3a:	a904      	add	r1, sp, #16
 8016a3c:	4638      	mov	r0, r7
 8016a3e:	f000 fa49 	bl	8016ed4 <_printf_i>
 8016a42:	e7ed      	b.n	8016a20 <_svfiprintf_r+0x1c0>
 8016a44:	08017fbf 	.word	0x08017fbf
 8016a48:	08017fc9 	.word	0x08017fc9
 8016a4c:	00000000 	.word	0x00000000
 8016a50:	080167a9 	.word	0x080167a9
 8016a54:	08017fc5 	.word	0x08017fc5

08016a58 <_sungetc_r>:
 8016a58:	b538      	push	{r3, r4, r5, lr}
 8016a5a:	1c4b      	adds	r3, r1, #1
 8016a5c:	4614      	mov	r4, r2
 8016a5e:	d103      	bne.n	8016a68 <_sungetc_r+0x10>
 8016a60:	f04f 35ff 	mov.w	r5, #4294967295
 8016a64:	4628      	mov	r0, r5
 8016a66:	bd38      	pop	{r3, r4, r5, pc}
 8016a68:	8993      	ldrh	r3, [r2, #12]
 8016a6a:	f023 0320 	bic.w	r3, r3, #32
 8016a6e:	8193      	strh	r3, [r2, #12]
 8016a70:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8016a72:	6852      	ldr	r2, [r2, #4]
 8016a74:	b2cd      	uxtb	r5, r1
 8016a76:	b18b      	cbz	r3, 8016a9c <_sungetc_r+0x44>
 8016a78:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8016a7a:	4293      	cmp	r3, r2
 8016a7c:	dd08      	ble.n	8016a90 <_sungetc_r+0x38>
 8016a7e:	6823      	ldr	r3, [r4, #0]
 8016a80:	1e5a      	subs	r2, r3, #1
 8016a82:	6022      	str	r2, [r4, #0]
 8016a84:	f803 5c01 	strb.w	r5, [r3, #-1]
 8016a88:	6863      	ldr	r3, [r4, #4]
 8016a8a:	3301      	adds	r3, #1
 8016a8c:	6063      	str	r3, [r4, #4]
 8016a8e:	e7e9      	b.n	8016a64 <_sungetc_r+0xc>
 8016a90:	4621      	mov	r1, r4
 8016a92:	f000 fcc4 	bl	801741e <__submore>
 8016a96:	2800      	cmp	r0, #0
 8016a98:	d0f1      	beq.n	8016a7e <_sungetc_r+0x26>
 8016a9a:	e7e1      	b.n	8016a60 <_sungetc_r+0x8>
 8016a9c:	6921      	ldr	r1, [r4, #16]
 8016a9e:	6823      	ldr	r3, [r4, #0]
 8016aa0:	b151      	cbz	r1, 8016ab8 <_sungetc_r+0x60>
 8016aa2:	4299      	cmp	r1, r3
 8016aa4:	d208      	bcs.n	8016ab8 <_sungetc_r+0x60>
 8016aa6:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 8016aaa:	42a9      	cmp	r1, r5
 8016aac:	d104      	bne.n	8016ab8 <_sungetc_r+0x60>
 8016aae:	3b01      	subs	r3, #1
 8016ab0:	3201      	adds	r2, #1
 8016ab2:	6023      	str	r3, [r4, #0]
 8016ab4:	6062      	str	r2, [r4, #4]
 8016ab6:	e7d5      	b.n	8016a64 <_sungetc_r+0xc>
 8016ab8:	e9c4 320f 	strd	r3, r2, [r4, #60]	@ 0x3c
 8016abc:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8016ac0:	6363      	str	r3, [r4, #52]	@ 0x34
 8016ac2:	2303      	movs	r3, #3
 8016ac4:	63a3      	str	r3, [r4, #56]	@ 0x38
 8016ac6:	4623      	mov	r3, r4
 8016ac8:	f803 5f46 	strb.w	r5, [r3, #70]!
 8016acc:	6023      	str	r3, [r4, #0]
 8016ace:	2301      	movs	r3, #1
 8016ad0:	e7dc      	b.n	8016a8c <_sungetc_r+0x34>

08016ad2 <__ssrefill_r>:
 8016ad2:	b510      	push	{r4, lr}
 8016ad4:	460c      	mov	r4, r1
 8016ad6:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 8016ad8:	b169      	cbz	r1, 8016af6 <__ssrefill_r+0x24>
 8016ada:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8016ade:	4299      	cmp	r1, r3
 8016ae0:	d001      	beq.n	8016ae6 <__ssrefill_r+0x14>
 8016ae2:	f7ff fd69 	bl	80165b8 <_free_r>
 8016ae6:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8016ae8:	6063      	str	r3, [r4, #4]
 8016aea:	2000      	movs	r0, #0
 8016aec:	6360      	str	r0, [r4, #52]	@ 0x34
 8016aee:	b113      	cbz	r3, 8016af6 <__ssrefill_r+0x24>
 8016af0:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8016af2:	6023      	str	r3, [r4, #0]
 8016af4:	bd10      	pop	{r4, pc}
 8016af6:	6923      	ldr	r3, [r4, #16]
 8016af8:	6023      	str	r3, [r4, #0]
 8016afa:	2300      	movs	r3, #0
 8016afc:	6063      	str	r3, [r4, #4]
 8016afe:	89a3      	ldrh	r3, [r4, #12]
 8016b00:	f043 0320 	orr.w	r3, r3, #32
 8016b04:	81a3      	strh	r3, [r4, #12]
 8016b06:	f04f 30ff 	mov.w	r0, #4294967295
 8016b0a:	e7f3      	b.n	8016af4 <__ssrefill_r+0x22>

08016b0c <__ssvfiscanf_r>:
 8016b0c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016b10:	460c      	mov	r4, r1
 8016b12:	f5ad 7d23 	sub.w	sp, sp, #652	@ 0x28c
 8016b16:	2100      	movs	r1, #0
 8016b18:	e9cd 1144 	strd	r1, r1, [sp, #272]	@ 0x110
 8016b1c:	49a6      	ldr	r1, [pc, #664]	@ (8016db8 <__ssvfiscanf_r+0x2ac>)
 8016b1e:	91a0      	str	r1, [sp, #640]	@ 0x280
 8016b20:	f10d 0804 	add.w	r8, sp, #4
 8016b24:	49a5      	ldr	r1, [pc, #660]	@ (8016dbc <__ssvfiscanf_r+0x2b0>)
 8016b26:	4fa6      	ldr	r7, [pc, #664]	@ (8016dc0 <__ssvfiscanf_r+0x2b4>)
 8016b28:	f8cd 8118 	str.w	r8, [sp, #280]	@ 0x118
 8016b2c:	4606      	mov	r6, r0
 8016b2e:	91a1      	str	r1, [sp, #644]	@ 0x284
 8016b30:	9300      	str	r3, [sp, #0]
 8016b32:	f892 9000 	ldrb.w	r9, [r2]
 8016b36:	f1b9 0f00 	cmp.w	r9, #0
 8016b3a:	f000 8158 	beq.w	8016dee <__ssvfiscanf_r+0x2e2>
 8016b3e:	f817 3009 	ldrb.w	r3, [r7, r9]
 8016b42:	f013 0308 	ands.w	r3, r3, #8
 8016b46:	f102 0501 	add.w	r5, r2, #1
 8016b4a:	d019      	beq.n	8016b80 <__ssvfiscanf_r+0x74>
 8016b4c:	6863      	ldr	r3, [r4, #4]
 8016b4e:	2b00      	cmp	r3, #0
 8016b50:	dd0f      	ble.n	8016b72 <__ssvfiscanf_r+0x66>
 8016b52:	6823      	ldr	r3, [r4, #0]
 8016b54:	781a      	ldrb	r2, [r3, #0]
 8016b56:	5cba      	ldrb	r2, [r7, r2]
 8016b58:	0712      	lsls	r2, r2, #28
 8016b5a:	d401      	bmi.n	8016b60 <__ssvfiscanf_r+0x54>
 8016b5c:	462a      	mov	r2, r5
 8016b5e:	e7e8      	b.n	8016b32 <__ssvfiscanf_r+0x26>
 8016b60:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 8016b62:	3201      	adds	r2, #1
 8016b64:	9245      	str	r2, [sp, #276]	@ 0x114
 8016b66:	6862      	ldr	r2, [r4, #4]
 8016b68:	3301      	adds	r3, #1
 8016b6a:	3a01      	subs	r2, #1
 8016b6c:	6062      	str	r2, [r4, #4]
 8016b6e:	6023      	str	r3, [r4, #0]
 8016b70:	e7ec      	b.n	8016b4c <__ssvfiscanf_r+0x40>
 8016b72:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 8016b74:	4621      	mov	r1, r4
 8016b76:	4630      	mov	r0, r6
 8016b78:	4798      	blx	r3
 8016b7a:	2800      	cmp	r0, #0
 8016b7c:	d0e9      	beq.n	8016b52 <__ssvfiscanf_r+0x46>
 8016b7e:	e7ed      	b.n	8016b5c <__ssvfiscanf_r+0x50>
 8016b80:	f1b9 0f25 	cmp.w	r9, #37	@ 0x25
 8016b84:	f040 8085 	bne.w	8016c92 <__ssvfiscanf_r+0x186>
 8016b88:	9341      	str	r3, [sp, #260]	@ 0x104
 8016b8a:	9343      	str	r3, [sp, #268]	@ 0x10c
 8016b8c:	7853      	ldrb	r3, [r2, #1]
 8016b8e:	2b2a      	cmp	r3, #42	@ 0x2a
 8016b90:	bf02      	ittt	eq
 8016b92:	2310      	moveq	r3, #16
 8016b94:	1c95      	addeq	r5, r2, #2
 8016b96:	9341      	streq	r3, [sp, #260]	@ 0x104
 8016b98:	220a      	movs	r2, #10
 8016b9a:	46aa      	mov	sl, r5
 8016b9c:	f81a 1b01 	ldrb.w	r1, [sl], #1
 8016ba0:	f1a1 0330 	sub.w	r3, r1, #48	@ 0x30
 8016ba4:	2b09      	cmp	r3, #9
 8016ba6:	d91e      	bls.n	8016be6 <__ssvfiscanf_r+0xda>
 8016ba8:	f8df b218 	ldr.w	fp, [pc, #536]	@ 8016dc4 <__ssvfiscanf_r+0x2b8>
 8016bac:	2203      	movs	r2, #3
 8016bae:	4658      	mov	r0, fp
 8016bb0:	f7e9 fb26 	bl	8000200 <memchr>
 8016bb4:	b138      	cbz	r0, 8016bc6 <__ssvfiscanf_r+0xba>
 8016bb6:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 8016bb8:	eba0 000b 	sub.w	r0, r0, fp
 8016bbc:	2301      	movs	r3, #1
 8016bbe:	4083      	lsls	r3, r0
 8016bc0:	4313      	orrs	r3, r2
 8016bc2:	9341      	str	r3, [sp, #260]	@ 0x104
 8016bc4:	4655      	mov	r5, sl
 8016bc6:	f815 3b01 	ldrb.w	r3, [r5], #1
 8016bca:	2b78      	cmp	r3, #120	@ 0x78
 8016bcc:	d806      	bhi.n	8016bdc <__ssvfiscanf_r+0xd0>
 8016bce:	2b57      	cmp	r3, #87	@ 0x57
 8016bd0:	d810      	bhi.n	8016bf4 <__ssvfiscanf_r+0xe8>
 8016bd2:	2b25      	cmp	r3, #37	@ 0x25
 8016bd4:	d05d      	beq.n	8016c92 <__ssvfiscanf_r+0x186>
 8016bd6:	d857      	bhi.n	8016c88 <__ssvfiscanf_r+0x17c>
 8016bd8:	2b00      	cmp	r3, #0
 8016bda:	d075      	beq.n	8016cc8 <__ssvfiscanf_r+0x1bc>
 8016bdc:	2303      	movs	r3, #3
 8016bde:	9347      	str	r3, [sp, #284]	@ 0x11c
 8016be0:	230a      	movs	r3, #10
 8016be2:	9342      	str	r3, [sp, #264]	@ 0x108
 8016be4:	e088      	b.n	8016cf8 <__ssvfiscanf_r+0x1ec>
 8016be6:	9b43      	ldr	r3, [sp, #268]	@ 0x10c
 8016be8:	fb02 1103 	mla	r1, r2, r3, r1
 8016bec:	3930      	subs	r1, #48	@ 0x30
 8016bee:	9143      	str	r1, [sp, #268]	@ 0x10c
 8016bf0:	4655      	mov	r5, sl
 8016bf2:	e7d2      	b.n	8016b9a <__ssvfiscanf_r+0x8e>
 8016bf4:	f1a3 0258 	sub.w	r2, r3, #88	@ 0x58
 8016bf8:	2a20      	cmp	r2, #32
 8016bfa:	d8ef      	bhi.n	8016bdc <__ssvfiscanf_r+0xd0>
 8016bfc:	a101      	add	r1, pc, #4	@ (adr r1, 8016c04 <__ssvfiscanf_r+0xf8>)
 8016bfe:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8016c02:	bf00      	nop
 8016c04:	08016cd7 	.word	0x08016cd7
 8016c08:	08016bdd 	.word	0x08016bdd
 8016c0c:	08016bdd 	.word	0x08016bdd
 8016c10:	08016d31 	.word	0x08016d31
 8016c14:	08016bdd 	.word	0x08016bdd
 8016c18:	08016bdd 	.word	0x08016bdd
 8016c1c:	08016bdd 	.word	0x08016bdd
 8016c20:	08016bdd 	.word	0x08016bdd
 8016c24:	08016bdd 	.word	0x08016bdd
 8016c28:	08016bdd 	.word	0x08016bdd
 8016c2c:	08016bdd 	.word	0x08016bdd
 8016c30:	08016d47 	.word	0x08016d47
 8016c34:	08016d2d 	.word	0x08016d2d
 8016c38:	08016c8f 	.word	0x08016c8f
 8016c3c:	08016c8f 	.word	0x08016c8f
 8016c40:	08016c8f 	.word	0x08016c8f
 8016c44:	08016bdd 	.word	0x08016bdd
 8016c48:	08016ce9 	.word	0x08016ce9
 8016c4c:	08016bdd 	.word	0x08016bdd
 8016c50:	08016bdd 	.word	0x08016bdd
 8016c54:	08016bdd 	.word	0x08016bdd
 8016c58:	08016bdd 	.word	0x08016bdd
 8016c5c:	08016d57 	.word	0x08016d57
 8016c60:	08016cf1 	.word	0x08016cf1
 8016c64:	08016ccf 	.word	0x08016ccf
 8016c68:	08016bdd 	.word	0x08016bdd
 8016c6c:	08016bdd 	.word	0x08016bdd
 8016c70:	08016d53 	.word	0x08016d53
 8016c74:	08016bdd 	.word	0x08016bdd
 8016c78:	08016d2d 	.word	0x08016d2d
 8016c7c:	08016bdd 	.word	0x08016bdd
 8016c80:	08016bdd 	.word	0x08016bdd
 8016c84:	08016cd7 	.word	0x08016cd7
 8016c88:	3b45      	subs	r3, #69	@ 0x45
 8016c8a:	2b02      	cmp	r3, #2
 8016c8c:	d8a6      	bhi.n	8016bdc <__ssvfiscanf_r+0xd0>
 8016c8e:	2305      	movs	r3, #5
 8016c90:	e031      	b.n	8016cf6 <__ssvfiscanf_r+0x1ea>
 8016c92:	6863      	ldr	r3, [r4, #4]
 8016c94:	2b00      	cmp	r3, #0
 8016c96:	dd0d      	ble.n	8016cb4 <__ssvfiscanf_r+0x1a8>
 8016c98:	6823      	ldr	r3, [r4, #0]
 8016c9a:	781a      	ldrb	r2, [r3, #0]
 8016c9c:	454a      	cmp	r2, r9
 8016c9e:	f040 80a6 	bne.w	8016dee <__ssvfiscanf_r+0x2e2>
 8016ca2:	3301      	adds	r3, #1
 8016ca4:	6862      	ldr	r2, [r4, #4]
 8016ca6:	6023      	str	r3, [r4, #0]
 8016ca8:	9b45      	ldr	r3, [sp, #276]	@ 0x114
 8016caa:	3a01      	subs	r2, #1
 8016cac:	3301      	adds	r3, #1
 8016cae:	6062      	str	r2, [r4, #4]
 8016cb0:	9345      	str	r3, [sp, #276]	@ 0x114
 8016cb2:	e753      	b.n	8016b5c <__ssvfiscanf_r+0x50>
 8016cb4:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 8016cb6:	4621      	mov	r1, r4
 8016cb8:	4630      	mov	r0, r6
 8016cba:	4798      	blx	r3
 8016cbc:	2800      	cmp	r0, #0
 8016cbe:	d0eb      	beq.n	8016c98 <__ssvfiscanf_r+0x18c>
 8016cc0:	9844      	ldr	r0, [sp, #272]	@ 0x110
 8016cc2:	2800      	cmp	r0, #0
 8016cc4:	f040 808b 	bne.w	8016dde <__ssvfiscanf_r+0x2d2>
 8016cc8:	f04f 30ff 	mov.w	r0, #4294967295
 8016ccc:	e08b      	b.n	8016de6 <__ssvfiscanf_r+0x2da>
 8016cce:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 8016cd0:	f042 0220 	orr.w	r2, r2, #32
 8016cd4:	9241      	str	r2, [sp, #260]	@ 0x104
 8016cd6:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 8016cd8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8016cdc:	9241      	str	r2, [sp, #260]	@ 0x104
 8016cde:	2210      	movs	r2, #16
 8016ce0:	2b6e      	cmp	r3, #110	@ 0x6e
 8016ce2:	9242      	str	r2, [sp, #264]	@ 0x108
 8016ce4:	d902      	bls.n	8016cec <__ssvfiscanf_r+0x1e0>
 8016ce6:	e005      	b.n	8016cf4 <__ssvfiscanf_r+0x1e8>
 8016ce8:	2300      	movs	r3, #0
 8016cea:	9342      	str	r3, [sp, #264]	@ 0x108
 8016cec:	2303      	movs	r3, #3
 8016cee:	e002      	b.n	8016cf6 <__ssvfiscanf_r+0x1ea>
 8016cf0:	2308      	movs	r3, #8
 8016cf2:	9342      	str	r3, [sp, #264]	@ 0x108
 8016cf4:	2304      	movs	r3, #4
 8016cf6:	9347      	str	r3, [sp, #284]	@ 0x11c
 8016cf8:	6863      	ldr	r3, [r4, #4]
 8016cfa:	2b00      	cmp	r3, #0
 8016cfc:	dd39      	ble.n	8016d72 <__ssvfiscanf_r+0x266>
 8016cfe:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 8016d00:	0659      	lsls	r1, r3, #25
 8016d02:	d404      	bmi.n	8016d0e <__ssvfiscanf_r+0x202>
 8016d04:	6823      	ldr	r3, [r4, #0]
 8016d06:	781a      	ldrb	r2, [r3, #0]
 8016d08:	5cba      	ldrb	r2, [r7, r2]
 8016d0a:	0712      	lsls	r2, r2, #28
 8016d0c:	d438      	bmi.n	8016d80 <__ssvfiscanf_r+0x274>
 8016d0e:	9b47      	ldr	r3, [sp, #284]	@ 0x11c
 8016d10:	2b02      	cmp	r3, #2
 8016d12:	dc47      	bgt.n	8016da4 <__ssvfiscanf_r+0x298>
 8016d14:	466b      	mov	r3, sp
 8016d16:	4622      	mov	r2, r4
 8016d18:	a941      	add	r1, sp, #260	@ 0x104
 8016d1a:	4630      	mov	r0, r6
 8016d1c:	f000 f9f8 	bl	8017110 <_scanf_chars>
 8016d20:	2801      	cmp	r0, #1
 8016d22:	d064      	beq.n	8016dee <__ssvfiscanf_r+0x2e2>
 8016d24:	2802      	cmp	r0, #2
 8016d26:	f47f af19 	bne.w	8016b5c <__ssvfiscanf_r+0x50>
 8016d2a:	e7c9      	b.n	8016cc0 <__ssvfiscanf_r+0x1b4>
 8016d2c:	220a      	movs	r2, #10
 8016d2e:	e7d7      	b.n	8016ce0 <__ssvfiscanf_r+0x1d4>
 8016d30:	4629      	mov	r1, r5
 8016d32:	4640      	mov	r0, r8
 8016d34:	f000 fb3a 	bl	80173ac <__sccl>
 8016d38:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 8016d3a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8016d3e:	9341      	str	r3, [sp, #260]	@ 0x104
 8016d40:	4605      	mov	r5, r0
 8016d42:	2301      	movs	r3, #1
 8016d44:	e7d7      	b.n	8016cf6 <__ssvfiscanf_r+0x1ea>
 8016d46:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 8016d48:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8016d4c:	9341      	str	r3, [sp, #260]	@ 0x104
 8016d4e:	2300      	movs	r3, #0
 8016d50:	e7d1      	b.n	8016cf6 <__ssvfiscanf_r+0x1ea>
 8016d52:	2302      	movs	r3, #2
 8016d54:	e7cf      	b.n	8016cf6 <__ssvfiscanf_r+0x1ea>
 8016d56:	9841      	ldr	r0, [sp, #260]	@ 0x104
 8016d58:	06c3      	lsls	r3, r0, #27
 8016d5a:	f53f aeff 	bmi.w	8016b5c <__ssvfiscanf_r+0x50>
 8016d5e:	9b00      	ldr	r3, [sp, #0]
 8016d60:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 8016d62:	1d19      	adds	r1, r3, #4
 8016d64:	9100      	str	r1, [sp, #0]
 8016d66:	681b      	ldr	r3, [r3, #0]
 8016d68:	07c0      	lsls	r0, r0, #31
 8016d6a:	bf4c      	ite	mi
 8016d6c:	801a      	strhmi	r2, [r3, #0]
 8016d6e:	601a      	strpl	r2, [r3, #0]
 8016d70:	e6f4      	b.n	8016b5c <__ssvfiscanf_r+0x50>
 8016d72:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 8016d74:	4621      	mov	r1, r4
 8016d76:	4630      	mov	r0, r6
 8016d78:	4798      	blx	r3
 8016d7a:	2800      	cmp	r0, #0
 8016d7c:	d0bf      	beq.n	8016cfe <__ssvfiscanf_r+0x1f2>
 8016d7e:	e79f      	b.n	8016cc0 <__ssvfiscanf_r+0x1b4>
 8016d80:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 8016d82:	3201      	adds	r2, #1
 8016d84:	9245      	str	r2, [sp, #276]	@ 0x114
 8016d86:	6862      	ldr	r2, [r4, #4]
 8016d88:	3a01      	subs	r2, #1
 8016d8a:	2a00      	cmp	r2, #0
 8016d8c:	6062      	str	r2, [r4, #4]
 8016d8e:	dd02      	ble.n	8016d96 <__ssvfiscanf_r+0x28a>
 8016d90:	3301      	adds	r3, #1
 8016d92:	6023      	str	r3, [r4, #0]
 8016d94:	e7b6      	b.n	8016d04 <__ssvfiscanf_r+0x1f8>
 8016d96:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 8016d98:	4621      	mov	r1, r4
 8016d9a:	4630      	mov	r0, r6
 8016d9c:	4798      	blx	r3
 8016d9e:	2800      	cmp	r0, #0
 8016da0:	d0b0      	beq.n	8016d04 <__ssvfiscanf_r+0x1f8>
 8016da2:	e78d      	b.n	8016cc0 <__ssvfiscanf_r+0x1b4>
 8016da4:	2b04      	cmp	r3, #4
 8016da6:	dc0f      	bgt.n	8016dc8 <__ssvfiscanf_r+0x2bc>
 8016da8:	466b      	mov	r3, sp
 8016daa:	4622      	mov	r2, r4
 8016dac:	a941      	add	r1, sp, #260	@ 0x104
 8016dae:	4630      	mov	r0, r6
 8016db0:	f000 fa08 	bl	80171c4 <_scanf_i>
 8016db4:	e7b4      	b.n	8016d20 <__ssvfiscanf_r+0x214>
 8016db6:	bf00      	nop
 8016db8:	08016a59 	.word	0x08016a59
 8016dbc:	08016ad3 	.word	0x08016ad3
 8016dc0:	08017ebf 	.word	0x08017ebf
 8016dc4:	08017fc5 	.word	0x08017fc5
 8016dc8:	4b0a      	ldr	r3, [pc, #40]	@ (8016df4 <__ssvfiscanf_r+0x2e8>)
 8016dca:	2b00      	cmp	r3, #0
 8016dcc:	f43f aec6 	beq.w	8016b5c <__ssvfiscanf_r+0x50>
 8016dd0:	466b      	mov	r3, sp
 8016dd2:	4622      	mov	r2, r4
 8016dd4:	a941      	add	r1, sp, #260	@ 0x104
 8016dd6:	4630      	mov	r0, r6
 8016dd8:	f3af 8000 	nop.w
 8016ddc:	e7a0      	b.n	8016d20 <__ssvfiscanf_r+0x214>
 8016dde:	89a3      	ldrh	r3, [r4, #12]
 8016de0:	065b      	lsls	r3, r3, #25
 8016de2:	f53f af71 	bmi.w	8016cc8 <__ssvfiscanf_r+0x1bc>
 8016de6:	f50d 7d23 	add.w	sp, sp, #652	@ 0x28c
 8016dea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016dee:	9844      	ldr	r0, [sp, #272]	@ 0x110
 8016df0:	e7f9      	b.n	8016de6 <__ssvfiscanf_r+0x2da>
 8016df2:	bf00      	nop
 8016df4:	00000000 	.word	0x00000000

08016df8 <_printf_common>:
 8016df8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8016dfc:	4616      	mov	r6, r2
 8016dfe:	4698      	mov	r8, r3
 8016e00:	688a      	ldr	r2, [r1, #8]
 8016e02:	690b      	ldr	r3, [r1, #16]
 8016e04:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8016e08:	4293      	cmp	r3, r2
 8016e0a:	bfb8      	it	lt
 8016e0c:	4613      	movlt	r3, r2
 8016e0e:	6033      	str	r3, [r6, #0]
 8016e10:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8016e14:	4607      	mov	r7, r0
 8016e16:	460c      	mov	r4, r1
 8016e18:	b10a      	cbz	r2, 8016e1e <_printf_common+0x26>
 8016e1a:	3301      	adds	r3, #1
 8016e1c:	6033      	str	r3, [r6, #0]
 8016e1e:	6823      	ldr	r3, [r4, #0]
 8016e20:	0699      	lsls	r1, r3, #26
 8016e22:	bf42      	ittt	mi
 8016e24:	6833      	ldrmi	r3, [r6, #0]
 8016e26:	3302      	addmi	r3, #2
 8016e28:	6033      	strmi	r3, [r6, #0]
 8016e2a:	6825      	ldr	r5, [r4, #0]
 8016e2c:	f015 0506 	ands.w	r5, r5, #6
 8016e30:	d106      	bne.n	8016e40 <_printf_common+0x48>
 8016e32:	f104 0a19 	add.w	sl, r4, #25
 8016e36:	68e3      	ldr	r3, [r4, #12]
 8016e38:	6832      	ldr	r2, [r6, #0]
 8016e3a:	1a9b      	subs	r3, r3, r2
 8016e3c:	42ab      	cmp	r3, r5
 8016e3e:	dc26      	bgt.n	8016e8e <_printf_common+0x96>
 8016e40:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8016e44:	6822      	ldr	r2, [r4, #0]
 8016e46:	3b00      	subs	r3, #0
 8016e48:	bf18      	it	ne
 8016e4a:	2301      	movne	r3, #1
 8016e4c:	0692      	lsls	r2, r2, #26
 8016e4e:	d42b      	bmi.n	8016ea8 <_printf_common+0xb0>
 8016e50:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8016e54:	4641      	mov	r1, r8
 8016e56:	4638      	mov	r0, r7
 8016e58:	47c8      	blx	r9
 8016e5a:	3001      	adds	r0, #1
 8016e5c:	d01e      	beq.n	8016e9c <_printf_common+0xa4>
 8016e5e:	6823      	ldr	r3, [r4, #0]
 8016e60:	6922      	ldr	r2, [r4, #16]
 8016e62:	f003 0306 	and.w	r3, r3, #6
 8016e66:	2b04      	cmp	r3, #4
 8016e68:	bf02      	ittt	eq
 8016e6a:	68e5      	ldreq	r5, [r4, #12]
 8016e6c:	6833      	ldreq	r3, [r6, #0]
 8016e6e:	1aed      	subeq	r5, r5, r3
 8016e70:	68a3      	ldr	r3, [r4, #8]
 8016e72:	bf0c      	ite	eq
 8016e74:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8016e78:	2500      	movne	r5, #0
 8016e7a:	4293      	cmp	r3, r2
 8016e7c:	bfc4      	itt	gt
 8016e7e:	1a9b      	subgt	r3, r3, r2
 8016e80:	18ed      	addgt	r5, r5, r3
 8016e82:	2600      	movs	r6, #0
 8016e84:	341a      	adds	r4, #26
 8016e86:	42b5      	cmp	r5, r6
 8016e88:	d11a      	bne.n	8016ec0 <_printf_common+0xc8>
 8016e8a:	2000      	movs	r0, #0
 8016e8c:	e008      	b.n	8016ea0 <_printf_common+0xa8>
 8016e8e:	2301      	movs	r3, #1
 8016e90:	4652      	mov	r2, sl
 8016e92:	4641      	mov	r1, r8
 8016e94:	4638      	mov	r0, r7
 8016e96:	47c8      	blx	r9
 8016e98:	3001      	adds	r0, #1
 8016e9a:	d103      	bne.n	8016ea4 <_printf_common+0xac>
 8016e9c:	f04f 30ff 	mov.w	r0, #4294967295
 8016ea0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8016ea4:	3501      	adds	r5, #1
 8016ea6:	e7c6      	b.n	8016e36 <_printf_common+0x3e>
 8016ea8:	18e1      	adds	r1, r4, r3
 8016eaa:	1c5a      	adds	r2, r3, #1
 8016eac:	2030      	movs	r0, #48	@ 0x30
 8016eae:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8016eb2:	4422      	add	r2, r4
 8016eb4:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8016eb8:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8016ebc:	3302      	adds	r3, #2
 8016ebe:	e7c7      	b.n	8016e50 <_printf_common+0x58>
 8016ec0:	2301      	movs	r3, #1
 8016ec2:	4622      	mov	r2, r4
 8016ec4:	4641      	mov	r1, r8
 8016ec6:	4638      	mov	r0, r7
 8016ec8:	47c8      	blx	r9
 8016eca:	3001      	adds	r0, #1
 8016ecc:	d0e6      	beq.n	8016e9c <_printf_common+0xa4>
 8016ece:	3601      	adds	r6, #1
 8016ed0:	e7d9      	b.n	8016e86 <_printf_common+0x8e>
	...

08016ed4 <_printf_i>:
 8016ed4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8016ed8:	7e0f      	ldrb	r7, [r1, #24]
 8016eda:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8016edc:	2f78      	cmp	r7, #120	@ 0x78
 8016ede:	4691      	mov	r9, r2
 8016ee0:	4680      	mov	r8, r0
 8016ee2:	460c      	mov	r4, r1
 8016ee4:	469a      	mov	sl, r3
 8016ee6:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8016eea:	d807      	bhi.n	8016efc <_printf_i+0x28>
 8016eec:	2f62      	cmp	r7, #98	@ 0x62
 8016eee:	d80a      	bhi.n	8016f06 <_printf_i+0x32>
 8016ef0:	2f00      	cmp	r7, #0
 8016ef2:	f000 80d1 	beq.w	8017098 <_printf_i+0x1c4>
 8016ef6:	2f58      	cmp	r7, #88	@ 0x58
 8016ef8:	f000 80b8 	beq.w	801706c <_printf_i+0x198>
 8016efc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8016f00:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8016f04:	e03a      	b.n	8016f7c <_printf_i+0xa8>
 8016f06:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8016f0a:	2b15      	cmp	r3, #21
 8016f0c:	d8f6      	bhi.n	8016efc <_printf_i+0x28>
 8016f0e:	a101      	add	r1, pc, #4	@ (adr r1, 8016f14 <_printf_i+0x40>)
 8016f10:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8016f14:	08016f6d 	.word	0x08016f6d
 8016f18:	08016f81 	.word	0x08016f81
 8016f1c:	08016efd 	.word	0x08016efd
 8016f20:	08016efd 	.word	0x08016efd
 8016f24:	08016efd 	.word	0x08016efd
 8016f28:	08016efd 	.word	0x08016efd
 8016f2c:	08016f81 	.word	0x08016f81
 8016f30:	08016efd 	.word	0x08016efd
 8016f34:	08016efd 	.word	0x08016efd
 8016f38:	08016efd 	.word	0x08016efd
 8016f3c:	08016efd 	.word	0x08016efd
 8016f40:	0801707f 	.word	0x0801707f
 8016f44:	08016fab 	.word	0x08016fab
 8016f48:	08017039 	.word	0x08017039
 8016f4c:	08016efd 	.word	0x08016efd
 8016f50:	08016efd 	.word	0x08016efd
 8016f54:	080170a1 	.word	0x080170a1
 8016f58:	08016efd 	.word	0x08016efd
 8016f5c:	08016fab 	.word	0x08016fab
 8016f60:	08016efd 	.word	0x08016efd
 8016f64:	08016efd 	.word	0x08016efd
 8016f68:	08017041 	.word	0x08017041
 8016f6c:	6833      	ldr	r3, [r6, #0]
 8016f6e:	1d1a      	adds	r2, r3, #4
 8016f70:	681b      	ldr	r3, [r3, #0]
 8016f72:	6032      	str	r2, [r6, #0]
 8016f74:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8016f78:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8016f7c:	2301      	movs	r3, #1
 8016f7e:	e09c      	b.n	80170ba <_printf_i+0x1e6>
 8016f80:	6833      	ldr	r3, [r6, #0]
 8016f82:	6820      	ldr	r0, [r4, #0]
 8016f84:	1d19      	adds	r1, r3, #4
 8016f86:	6031      	str	r1, [r6, #0]
 8016f88:	0606      	lsls	r6, r0, #24
 8016f8a:	d501      	bpl.n	8016f90 <_printf_i+0xbc>
 8016f8c:	681d      	ldr	r5, [r3, #0]
 8016f8e:	e003      	b.n	8016f98 <_printf_i+0xc4>
 8016f90:	0645      	lsls	r5, r0, #25
 8016f92:	d5fb      	bpl.n	8016f8c <_printf_i+0xb8>
 8016f94:	f9b3 5000 	ldrsh.w	r5, [r3]
 8016f98:	2d00      	cmp	r5, #0
 8016f9a:	da03      	bge.n	8016fa4 <_printf_i+0xd0>
 8016f9c:	232d      	movs	r3, #45	@ 0x2d
 8016f9e:	426d      	negs	r5, r5
 8016fa0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8016fa4:	4858      	ldr	r0, [pc, #352]	@ (8017108 <_printf_i+0x234>)
 8016fa6:	230a      	movs	r3, #10
 8016fa8:	e011      	b.n	8016fce <_printf_i+0xfa>
 8016faa:	6821      	ldr	r1, [r4, #0]
 8016fac:	6833      	ldr	r3, [r6, #0]
 8016fae:	0608      	lsls	r0, r1, #24
 8016fb0:	f853 5b04 	ldr.w	r5, [r3], #4
 8016fb4:	d402      	bmi.n	8016fbc <_printf_i+0xe8>
 8016fb6:	0649      	lsls	r1, r1, #25
 8016fb8:	bf48      	it	mi
 8016fba:	b2ad      	uxthmi	r5, r5
 8016fbc:	2f6f      	cmp	r7, #111	@ 0x6f
 8016fbe:	4852      	ldr	r0, [pc, #328]	@ (8017108 <_printf_i+0x234>)
 8016fc0:	6033      	str	r3, [r6, #0]
 8016fc2:	bf14      	ite	ne
 8016fc4:	230a      	movne	r3, #10
 8016fc6:	2308      	moveq	r3, #8
 8016fc8:	2100      	movs	r1, #0
 8016fca:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8016fce:	6866      	ldr	r6, [r4, #4]
 8016fd0:	60a6      	str	r6, [r4, #8]
 8016fd2:	2e00      	cmp	r6, #0
 8016fd4:	db05      	blt.n	8016fe2 <_printf_i+0x10e>
 8016fd6:	6821      	ldr	r1, [r4, #0]
 8016fd8:	432e      	orrs	r6, r5
 8016fda:	f021 0104 	bic.w	r1, r1, #4
 8016fde:	6021      	str	r1, [r4, #0]
 8016fe0:	d04b      	beq.n	801707a <_printf_i+0x1a6>
 8016fe2:	4616      	mov	r6, r2
 8016fe4:	fbb5 f1f3 	udiv	r1, r5, r3
 8016fe8:	fb03 5711 	mls	r7, r3, r1, r5
 8016fec:	5dc7      	ldrb	r7, [r0, r7]
 8016fee:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8016ff2:	462f      	mov	r7, r5
 8016ff4:	42bb      	cmp	r3, r7
 8016ff6:	460d      	mov	r5, r1
 8016ff8:	d9f4      	bls.n	8016fe4 <_printf_i+0x110>
 8016ffa:	2b08      	cmp	r3, #8
 8016ffc:	d10b      	bne.n	8017016 <_printf_i+0x142>
 8016ffe:	6823      	ldr	r3, [r4, #0]
 8017000:	07df      	lsls	r7, r3, #31
 8017002:	d508      	bpl.n	8017016 <_printf_i+0x142>
 8017004:	6923      	ldr	r3, [r4, #16]
 8017006:	6861      	ldr	r1, [r4, #4]
 8017008:	4299      	cmp	r1, r3
 801700a:	bfde      	ittt	le
 801700c:	2330      	movle	r3, #48	@ 0x30
 801700e:	f806 3c01 	strble.w	r3, [r6, #-1]
 8017012:	f106 36ff 	addle.w	r6, r6, #4294967295
 8017016:	1b92      	subs	r2, r2, r6
 8017018:	6122      	str	r2, [r4, #16]
 801701a:	f8cd a000 	str.w	sl, [sp]
 801701e:	464b      	mov	r3, r9
 8017020:	aa03      	add	r2, sp, #12
 8017022:	4621      	mov	r1, r4
 8017024:	4640      	mov	r0, r8
 8017026:	f7ff fee7 	bl	8016df8 <_printf_common>
 801702a:	3001      	adds	r0, #1
 801702c:	d14a      	bne.n	80170c4 <_printf_i+0x1f0>
 801702e:	f04f 30ff 	mov.w	r0, #4294967295
 8017032:	b004      	add	sp, #16
 8017034:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8017038:	6823      	ldr	r3, [r4, #0]
 801703a:	f043 0320 	orr.w	r3, r3, #32
 801703e:	6023      	str	r3, [r4, #0]
 8017040:	4832      	ldr	r0, [pc, #200]	@ (801710c <_printf_i+0x238>)
 8017042:	2778      	movs	r7, #120	@ 0x78
 8017044:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8017048:	6823      	ldr	r3, [r4, #0]
 801704a:	6831      	ldr	r1, [r6, #0]
 801704c:	061f      	lsls	r7, r3, #24
 801704e:	f851 5b04 	ldr.w	r5, [r1], #4
 8017052:	d402      	bmi.n	801705a <_printf_i+0x186>
 8017054:	065f      	lsls	r7, r3, #25
 8017056:	bf48      	it	mi
 8017058:	b2ad      	uxthmi	r5, r5
 801705a:	6031      	str	r1, [r6, #0]
 801705c:	07d9      	lsls	r1, r3, #31
 801705e:	bf44      	itt	mi
 8017060:	f043 0320 	orrmi.w	r3, r3, #32
 8017064:	6023      	strmi	r3, [r4, #0]
 8017066:	b11d      	cbz	r5, 8017070 <_printf_i+0x19c>
 8017068:	2310      	movs	r3, #16
 801706a:	e7ad      	b.n	8016fc8 <_printf_i+0xf4>
 801706c:	4826      	ldr	r0, [pc, #152]	@ (8017108 <_printf_i+0x234>)
 801706e:	e7e9      	b.n	8017044 <_printf_i+0x170>
 8017070:	6823      	ldr	r3, [r4, #0]
 8017072:	f023 0320 	bic.w	r3, r3, #32
 8017076:	6023      	str	r3, [r4, #0]
 8017078:	e7f6      	b.n	8017068 <_printf_i+0x194>
 801707a:	4616      	mov	r6, r2
 801707c:	e7bd      	b.n	8016ffa <_printf_i+0x126>
 801707e:	6833      	ldr	r3, [r6, #0]
 8017080:	6825      	ldr	r5, [r4, #0]
 8017082:	6961      	ldr	r1, [r4, #20]
 8017084:	1d18      	adds	r0, r3, #4
 8017086:	6030      	str	r0, [r6, #0]
 8017088:	062e      	lsls	r6, r5, #24
 801708a:	681b      	ldr	r3, [r3, #0]
 801708c:	d501      	bpl.n	8017092 <_printf_i+0x1be>
 801708e:	6019      	str	r1, [r3, #0]
 8017090:	e002      	b.n	8017098 <_printf_i+0x1c4>
 8017092:	0668      	lsls	r0, r5, #25
 8017094:	d5fb      	bpl.n	801708e <_printf_i+0x1ba>
 8017096:	8019      	strh	r1, [r3, #0]
 8017098:	2300      	movs	r3, #0
 801709a:	6123      	str	r3, [r4, #16]
 801709c:	4616      	mov	r6, r2
 801709e:	e7bc      	b.n	801701a <_printf_i+0x146>
 80170a0:	6833      	ldr	r3, [r6, #0]
 80170a2:	1d1a      	adds	r2, r3, #4
 80170a4:	6032      	str	r2, [r6, #0]
 80170a6:	681e      	ldr	r6, [r3, #0]
 80170a8:	6862      	ldr	r2, [r4, #4]
 80170aa:	2100      	movs	r1, #0
 80170ac:	4630      	mov	r0, r6
 80170ae:	f7e9 f8a7 	bl	8000200 <memchr>
 80170b2:	b108      	cbz	r0, 80170b8 <_printf_i+0x1e4>
 80170b4:	1b80      	subs	r0, r0, r6
 80170b6:	6060      	str	r0, [r4, #4]
 80170b8:	6863      	ldr	r3, [r4, #4]
 80170ba:	6123      	str	r3, [r4, #16]
 80170bc:	2300      	movs	r3, #0
 80170be:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80170c2:	e7aa      	b.n	801701a <_printf_i+0x146>
 80170c4:	6923      	ldr	r3, [r4, #16]
 80170c6:	4632      	mov	r2, r6
 80170c8:	4649      	mov	r1, r9
 80170ca:	4640      	mov	r0, r8
 80170cc:	47d0      	blx	sl
 80170ce:	3001      	adds	r0, #1
 80170d0:	d0ad      	beq.n	801702e <_printf_i+0x15a>
 80170d2:	6823      	ldr	r3, [r4, #0]
 80170d4:	079b      	lsls	r3, r3, #30
 80170d6:	d413      	bmi.n	8017100 <_printf_i+0x22c>
 80170d8:	68e0      	ldr	r0, [r4, #12]
 80170da:	9b03      	ldr	r3, [sp, #12]
 80170dc:	4298      	cmp	r0, r3
 80170de:	bfb8      	it	lt
 80170e0:	4618      	movlt	r0, r3
 80170e2:	e7a6      	b.n	8017032 <_printf_i+0x15e>
 80170e4:	2301      	movs	r3, #1
 80170e6:	4632      	mov	r2, r6
 80170e8:	4649      	mov	r1, r9
 80170ea:	4640      	mov	r0, r8
 80170ec:	47d0      	blx	sl
 80170ee:	3001      	adds	r0, #1
 80170f0:	d09d      	beq.n	801702e <_printf_i+0x15a>
 80170f2:	3501      	adds	r5, #1
 80170f4:	68e3      	ldr	r3, [r4, #12]
 80170f6:	9903      	ldr	r1, [sp, #12]
 80170f8:	1a5b      	subs	r3, r3, r1
 80170fa:	42ab      	cmp	r3, r5
 80170fc:	dcf2      	bgt.n	80170e4 <_printf_i+0x210>
 80170fe:	e7eb      	b.n	80170d8 <_printf_i+0x204>
 8017100:	2500      	movs	r5, #0
 8017102:	f104 0619 	add.w	r6, r4, #25
 8017106:	e7f5      	b.n	80170f4 <_printf_i+0x220>
 8017108:	08017fd0 	.word	0x08017fd0
 801710c:	08017fe1 	.word	0x08017fe1

08017110 <_scanf_chars>:
 8017110:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8017114:	4615      	mov	r5, r2
 8017116:	688a      	ldr	r2, [r1, #8]
 8017118:	4680      	mov	r8, r0
 801711a:	460c      	mov	r4, r1
 801711c:	b932      	cbnz	r2, 801712c <_scanf_chars+0x1c>
 801711e:	698a      	ldr	r2, [r1, #24]
 8017120:	2a00      	cmp	r2, #0
 8017122:	bf14      	ite	ne
 8017124:	f04f 32ff 	movne.w	r2, #4294967295
 8017128:	2201      	moveq	r2, #1
 801712a:	608a      	str	r2, [r1, #8]
 801712c:	6822      	ldr	r2, [r4, #0]
 801712e:	f8df 9090 	ldr.w	r9, [pc, #144]	@ 80171c0 <_scanf_chars+0xb0>
 8017132:	06d1      	lsls	r1, r2, #27
 8017134:	bf5f      	itttt	pl
 8017136:	681a      	ldrpl	r2, [r3, #0]
 8017138:	1d11      	addpl	r1, r2, #4
 801713a:	6019      	strpl	r1, [r3, #0]
 801713c:	6816      	ldrpl	r6, [r2, #0]
 801713e:	2700      	movs	r7, #0
 8017140:	69a0      	ldr	r0, [r4, #24]
 8017142:	b188      	cbz	r0, 8017168 <_scanf_chars+0x58>
 8017144:	2801      	cmp	r0, #1
 8017146:	d107      	bne.n	8017158 <_scanf_chars+0x48>
 8017148:	682b      	ldr	r3, [r5, #0]
 801714a:	781a      	ldrb	r2, [r3, #0]
 801714c:	6963      	ldr	r3, [r4, #20]
 801714e:	5c9b      	ldrb	r3, [r3, r2]
 8017150:	b953      	cbnz	r3, 8017168 <_scanf_chars+0x58>
 8017152:	2f00      	cmp	r7, #0
 8017154:	d031      	beq.n	80171ba <_scanf_chars+0xaa>
 8017156:	e022      	b.n	801719e <_scanf_chars+0x8e>
 8017158:	2802      	cmp	r0, #2
 801715a:	d120      	bne.n	801719e <_scanf_chars+0x8e>
 801715c:	682b      	ldr	r3, [r5, #0]
 801715e:	781b      	ldrb	r3, [r3, #0]
 8017160:	f819 3003 	ldrb.w	r3, [r9, r3]
 8017164:	071b      	lsls	r3, r3, #28
 8017166:	d41a      	bmi.n	801719e <_scanf_chars+0x8e>
 8017168:	6823      	ldr	r3, [r4, #0]
 801716a:	06da      	lsls	r2, r3, #27
 801716c:	bf5e      	ittt	pl
 801716e:	682b      	ldrpl	r3, [r5, #0]
 8017170:	781b      	ldrbpl	r3, [r3, #0]
 8017172:	f806 3b01 	strbpl.w	r3, [r6], #1
 8017176:	682a      	ldr	r2, [r5, #0]
 8017178:	686b      	ldr	r3, [r5, #4]
 801717a:	3201      	adds	r2, #1
 801717c:	602a      	str	r2, [r5, #0]
 801717e:	68a2      	ldr	r2, [r4, #8]
 8017180:	3b01      	subs	r3, #1
 8017182:	3a01      	subs	r2, #1
 8017184:	606b      	str	r3, [r5, #4]
 8017186:	3701      	adds	r7, #1
 8017188:	60a2      	str	r2, [r4, #8]
 801718a:	b142      	cbz	r2, 801719e <_scanf_chars+0x8e>
 801718c:	2b00      	cmp	r3, #0
 801718e:	dcd7      	bgt.n	8017140 <_scanf_chars+0x30>
 8017190:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 8017194:	4629      	mov	r1, r5
 8017196:	4640      	mov	r0, r8
 8017198:	4798      	blx	r3
 801719a:	2800      	cmp	r0, #0
 801719c:	d0d0      	beq.n	8017140 <_scanf_chars+0x30>
 801719e:	6823      	ldr	r3, [r4, #0]
 80171a0:	f013 0310 	ands.w	r3, r3, #16
 80171a4:	d105      	bne.n	80171b2 <_scanf_chars+0xa2>
 80171a6:	68e2      	ldr	r2, [r4, #12]
 80171a8:	3201      	adds	r2, #1
 80171aa:	60e2      	str	r2, [r4, #12]
 80171ac:	69a2      	ldr	r2, [r4, #24]
 80171ae:	b102      	cbz	r2, 80171b2 <_scanf_chars+0xa2>
 80171b0:	7033      	strb	r3, [r6, #0]
 80171b2:	6923      	ldr	r3, [r4, #16]
 80171b4:	443b      	add	r3, r7
 80171b6:	6123      	str	r3, [r4, #16]
 80171b8:	2000      	movs	r0, #0
 80171ba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80171be:	bf00      	nop
 80171c0:	08017ebf 	.word	0x08017ebf

080171c4 <_scanf_i>:
 80171c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80171c8:	4698      	mov	r8, r3
 80171ca:	4b74      	ldr	r3, [pc, #464]	@ (801739c <_scanf_i+0x1d8>)
 80171cc:	460c      	mov	r4, r1
 80171ce:	4682      	mov	sl, r0
 80171d0:	4616      	mov	r6, r2
 80171d2:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80171d6:	b087      	sub	sp, #28
 80171d8:	ab03      	add	r3, sp, #12
 80171da:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80171de:	4b70      	ldr	r3, [pc, #448]	@ (80173a0 <_scanf_i+0x1dc>)
 80171e0:	69a1      	ldr	r1, [r4, #24]
 80171e2:	4a70      	ldr	r2, [pc, #448]	@ (80173a4 <_scanf_i+0x1e0>)
 80171e4:	2903      	cmp	r1, #3
 80171e6:	bf08      	it	eq
 80171e8:	461a      	moveq	r2, r3
 80171ea:	68a3      	ldr	r3, [r4, #8]
 80171ec:	9201      	str	r2, [sp, #4]
 80171ee:	1e5a      	subs	r2, r3, #1
 80171f0:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 80171f4:	bf88      	it	hi
 80171f6:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 80171fa:	4627      	mov	r7, r4
 80171fc:	bf82      	ittt	hi
 80171fe:	eb03 0905 	addhi.w	r9, r3, r5
 8017202:	f240 135d 	movwhi	r3, #349	@ 0x15d
 8017206:	60a3      	strhi	r3, [r4, #8]
 8017208:	f857 3b1c 	ldr.w	r3, [r7], #28
 801720c:	f443 6350 	orr.w	r3, r3, #3328	@ 0xd00
 8017210:	bf98      	it	ls
 8017212:	f04f 0900 	movls.w	r9, #0
 8017216:	6023      	str	r3, [r4, #0]
 8017218:	463d      	mov	r5, r7
 801721a:	f04f 0b00 	mov.w	fp, #0
 801721e:	6831      	ldr	r1, [r6, #0]
 8017220:	ab03      	add	r3, sp, #12
 8017222:	7809      	ldrb	r1, [r1, #0]
 8017224:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 8017228:	2202      	movs	r2, #2
 801722a:	f7e8 ffe9 	bl	8000200 <memchr>
 801722e:	b328      	cbz	r0, 801727c <_scanf_i+0xb8>
 8017230:	f1bb 0f01 	cmp.w	fp, #1
 8017234:	d159      	bne.n	80172ea <_scanf_i+0x126>
 8017236:	6862      	ldr	r2, [r4, #4]
 8017238:	b92a      	cbnz	r2, 8017246 <_scanf_i+0x82>
 801723a:	6822      	ldr	r2, [r4, #0]
 801723c:	2108      	movs	r1, #8
 801723e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8017242:	6061      	str	r1, [r4, #4]
 8017244:	6022      	str	r2, [r4, #0]
 8017246:	6822      	ldr	r2, [r4, #0]
 8017248:	f422 62a0 	bic.w	r2, r2, #1280	@ 0x500
 801724c:	6022      	str	r2, [r4, #0]
 801724e:	68a2      	ldr	r2, [r4, #8]
 8017250:	1e51      	subs	r1, r2, #1
 8017252:	60a1      	str	r1, [r4, #8]
 8017254:	b192      	cbz	r2, 801727c <_scanf_i+0xb8>
 8017256:	6832      	ldr	r2, [r6, #0]
 8017258:	1c51      	adds	r1, r2, #1
 801725a:	6031      	str	r1, [r6, #0]
 801725c:	7812      	ldrb	r2, [r2, #0]
 801725e:	f805 2b01 	strb.w	r2, [r5], #1
 8017262:	6872      	ldr	r2, [r6, #4]
 8017264:	3a01      	subs	r2, #1
 8017266:	2a00      	cmp	r2, #0
 8017268:	6072      	str	r2, [r6, #4]
 801726a:	dc07      	bgt.n	801727c <_scanf_i+0xb8>
 801726c:	f8d4 2180 	ldr.w	r2, [r4, #384]	@ 0x180
 8017270:	4631      	mov	r1, r6
 8017272:	4650      	mov	r0, sl
 8017274:	4790      	blx	r2
 8017276:	2800      	cmp	r0, #0
 8017278:	f040 8085 	bne.w	8017386 <_scanf_i+0x1c2>
 801727c:	f10b 0b01 	add.w	fp, fp, #1
 8017280:	f1bb 0f03 	cmp.w	fp, #3
 8017284:	d1cb      	bne.n	801721e <_scanf_i+0x5a>
 8017286:	6863      	ldr	r3, [r4, #4]
 8017288:	b90b      	cbnz	r3, 801728e <_scanf_i+0xca>
 801728a:	230a      	movs	r3, #10
 801728c:	6063      	str	r3, [r4, #4]
 801728e:	6863      	ldr	r3, [r4, #4]
 8017290:	4945      	ldr	r1, [pc, #276]	@ (80173a8 <_scanf_i+0x1e4>)
 8017292:	6960      	ldr	r0, [r4, #20]
 8017294:	1ac9      	subs	r1, r1, r3
 8017296:	f000 f889 	bl	80173ac <__sccl>
 801729a:	f04f 0b00 	mov.w	fp, #0
 801729e:	68a3      	ldr	r3, [r4, #8]
 80172a0:	6822      	ldr	r2, [r4, #0]
 80172a2:	2b00      	cmp	r3, #0
 80172a4:	d03d      	beq.n	8017322 <_scanf_i+0x15e>
 80172a6:	6831      	ldr	r1, [r6, #0]
 80172a8:	6960      	ldr	r0, [r4, #20]
 80172aa:	f891 c000 	ldrb.w	ip, [r1]
 80172ae:	f810 000c 	ldrb.w	r0, [r0, ip]
 80172b2:	2800      	cmp	r0, #0
 80172b4:	d035      	beq.n	8017322 <_scanf_i+0x15e>
 80172b6:	f1bc 0f30 	cmp.w	ip, #48	@ 0x30
 80172ba:	d124      	bne.n	8017306 <_scanf_i+0x142>
 80172bc:	0510      	lsls	r0, r2, #20
 80172be:	d522      	bpl.n	8017306 <_scanf_i+0x142>
 80172c0:	f10b 0b01 	add.w	fp, fp, #1
 80172c4:	f1b9 0f00 	cmp.w	r9, #0
 80172c8:	d003      	beq.n	80172d2 <_scanf_i+0x10e>
 80172ca:	3301      	adds	r3, #1
 80172cc:	f109 39ff 	add.w	r9, r9, #4294967295
 80172d0:	60a3      	str	r3, [r4, #8]
 80172d2:	6873      	ldr	r3, [r6, #4]
 80172d4:	3b01      	subs	r3, #1
 80172d6:	2b00      	cmp	r3, #0
 80172d8:	6073      	str	r3, [r6, #4]
 80172da:	dd1b      	ble.n	8017314 <_scanf_i+0x150>
 80172dc:	6833      	ldr	r3, [r6, #0]
 80172de:	3301      	adds	r3, #1
 80172e0:	6033      	str	r3, [r6, #0]
 80172e2:	68a3      	ldr	r3, [r4, #8]
 80172e4:	3b01      	subs	r3, #1
 80172e6:	60a3      	str	r3, [r4, #8]
 80172e8:	e7d9      	b.n	801729e <_scanf_i+0xda>
 80172ea:	f1bb 0f02 	cmp.w	fp, #2
 80172ee:	d1ae      	bne.n	801724e <_scanf_i+0x8a>
 80172f0:	6822      	ldr	r2, [r4, #0]
 80172f2:	f402 61c0 	and.w	r1, r2, #1536	@ 0x600
 80172f6:	f5b1 7f00 	cmp.w	r1, #512	@ 0x200
 80172fa:	d1c4      	bne.n	8017286 <_scanf_i+0xc2>
 80172fc:	2110      	movs	r1, #16
 80172fe:	6061      	str	r1, [r4, #4]
 8017300:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8017304:	e7a2      	b.n	801724c <_scanf_i+0x88>
 8017306:	f422 6210 	bic.w	r2, r2, #2304	@ 0x900
 801730a:	6022      	str	r2, [r4, #0]
 801730c:	780b      	ldrb	r3, [r1, #0]
 801730e:	f805 3b01 	strb.w	r3, [r5], #1
 8017312:	e7de      	b.n	80172d2 <_scanf_i+0x10e>
 8017314:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 8017318:	4631      	mov	r1, r6
 801731a:	4650      	mov	r0, sl
 801731c:	4798      	blx	r3
 801731e:	2800      	cmp	r0, #0
 8017320:	d0df      	beq.n	80172e2 <_scanf_i+0x11e>
 8017322:	6823      	ldr	r3, [r4, #0]
 8017324:	05d9      	lsls	r1, r3, #23
 8017326:	d50d      	bpl.n	8017344 <_scanf_i+0x180>
 8017328:	42bd      	cmp	r5, r7
 801732a:	d909      	bls.n	8017340 <_scanf_i+0x17c>
 801732c:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 8017330:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8017334:	4632      	mov	r2, r6
 8017336:	4650      	mov	r0, sl
 8017338:	4798      	blx	r3
 801733a:	f105 39ff 	add.w	r9, r5, #4294967295
 801733e:	464d      	mov	r5, r9
 8017340:	42bd      	cmp	r5, r7
 8017342:	d028      	beq.n	8017396 <_scanf_i+0x1d2>
 8017344:	6822      	ldr	r2, [r4, #0]
 8017346:	f012 0210 	ands.w	r2, r2, #16
 801734a:	d113      	bne.n	8017374 <_scanf_i+0x1b0>
 801734c:	702a      	strb	r2, [r5, #0]
 801734e:	6863      	ldr	r3, [r4, #4]
 8017350:	9e01      	ldr	r6, [sp, #4]
 8017352:	4639      	mov	r1, r7
 8017354:	4650      	mov	r0, sl
 8017356:	47b0      	blx	r6
 8017358:	f8d8 3000 	ldr.w	r3, [r8]
 801735c:	6821      	ldr	r1, [r4, #0]
 801735e:	1d1a      	adds	r2, r3, #4
 8017360:	f8c8 2000 	str.w	r2, [r8]
 8017364:	f011 0f20 	tst.w	r1, #32
 8017368:	681b      	ldr	r3, [r3, #0]
 801736a:	d00f      	beq.n	801738c <_scanf_i+0x1c8>
 801736c:	6018      	str	r0, [r3, #0]
 801736e:	68e3      	ldr	r3, [r4, #12]
 8017370:	3301      	adds	r3, #1
 8017372:	60e3      	str	r3, [r4, #12]
 8017374:	6923      	ldr	r3, [r4, #16]
 8017376:	1bed      	subs	r5, r5, r7
 8017378:	445d      	add	r5, fp
 801737a:	442b      	add	r3, r5
 801737c:	6123      	str	r3, [r4, #16]
 801737e:	2000      	movs	r0, #0
 8017380:	b007      	add	sp, #28
 8017382:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017386:	f04f 0b00 	mov.w	fp, #0
 801738a:	e7ca      	b.n	8017322 <_scanf_i+0x15e>
 801738c:	07ca      	lsls	r2, r1, #31
 801738e:	bf4c      	ite	mi
 8017390:	8018      	strhmi	r0, [r3, #0]
 8017392:	6018      	strpl	r0, [r3, #0]
 8017394:	e7eb      	b.n	801736e <_scanf_i+0x1aa>
 8017396:	2001      	movs	r0, #1
 8017398:	e7f2      	b.n	8017380 <_scanf_i+0x1bc>
 801739a:	bf00      	nop
 801739c:	08017b14 	.word	0x08017b14
 80173a0:	080163bd 	.word	0x080163bd
 80173a4:	08017621 	.word	0x08017621
 80173a8:	08018002 	.word	0x08018002

080173ac <__sccl>:
 80173ac:	b570      	push	{r4, r5, r6, lr}
 80173ae:	780b      	ldrb	r3, [r1, #0]
 80173b0:	4604      	mov	r4, r0
 80173b2:	2b5e      	cmp	r3, #94	@ 0x5e
 80173b4:	bf0b      	itete	eq
 80173b6:	784b      	ldrbeq	r3, [r1, #1]
 80173b8:	1c4a      	addne	r2, r1, #1
 80173ba:	1c8a      	addeq	r2, r1, #2
 80173bc:	2100      	movne	r1, #0
 80173be:	bf08      	it	eq
 80173c0:	2101      	moveq	r1, #1
 80173c2:	3801      	subs	r0, #1
 80173c4:	f104 05ff 	add.w	r5, r4, #255	@ 0xff
 80173c8:	f800 1f01 	strb.w	r1, [r0, #1]!
 80173cc:	42a8      	cmp	r0, r5
 80173ce:	d1fb      	bne.n	80173c8 <__sccl+0x1c>
 80173d0:	b90b      	cbnz	r3, 80173d6 <__sccl+0x2a>
 80173d2:	1e50      	subs	r0, r2, #1
 80173d4:	bd70      	pop	{r4, r5, r6, pc}
 80173d6:	f081 0101 	eor.w	r1, r1, #1
 80173da:	54e1      	strb	r1, [r4, r3]
 80173dc:	4610      	mov	r0, r2
 80173de:	4602      	mov	r2, r0
 80173e0:	f812 5b01 	ldrb.w	r5, [r2], #1
 80173e4:	2d2d      	cmp	r5, #45	@ 0x2d
 80173e6:	d005      	beq.n	80173f4 <__sccl+0x48>
 80173e8:	2d5d      	cmp	r5, #93	@ 0x5d
 80173ea:	d016      	beq.n	801741a <__sccl+0x6e>
 80173ec:	2d00      	cmp	r5, #0
 80173ee:	d0f1      	beq.n	80173d4 <__sccl+0x28>
 80173f0:	462b      	mov	r3, r5
 80173f2:	e7f2      	b.n	80173da <__sccl+0x2e>
 80173f4:	7846      	ldrb	r6, [r0, #1]
 80173f6:	2e5d      	cmp	r6, #93	@ 0x5d
 80173f8:	d0fa      	beq.n	80173f0 <__sccl+0x44>
 80173fa:	42b3      	cmp	r3, r6
 80173fc:	dcf8      	bgt.n	80173f0 <__sccl+0x44>
 80173fe:	3002      	adds	r0, #2
 8017400:	461a      	mov	r2, r3
 8017402:	3201      	adds	r2, #1
 8017404:	4296      	cmp	r6, r2
 8017406:	54a1      	strb	r1, [r4, r2]
 8017408:	dcfb      	bgt.n	8017402 <__sccl+0x56>
 801740a:	1af2      	subs	r2, r6, r3
 801740c:	3a01      	subs	r2, #1
 801740e:	1c5d      	adds	r5, r3, #1
 8017410:	42b3      	cmp	r3, r6
 8017412:	bfa8      	it	ge
 8017414:	2200      	movge	r2, #0
 8017416:	18ab      	adds	r3, r5, r2
 8017418:	e7e1      	b.n	80173de <__sccl+0x32>
 801741a:	4610      	mov	r0, r2
 801741c:	e7da      	b.n	80173d4 <__sccl+0x28>

0801741e <__submore>:
 801741e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017422:	460c      	mov	r4, r1
 8017424:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 8017426:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 801742a:	4299      	cmp	r1, r3
 801742c:	d11d      	bne.n	801746a <__submore+0x4c>
 801742e:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8017432:	f7ff f92d 	bl	8016690 <_malloc_r>
 8017436:	b918      	cbnz	r0, 8017440 <__submore+0x22>
 8017438:	f04f 30ff 	mov.w	r0, #4294967295
 801743c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017440:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8017444:	63a3      	str	r3, [r4, #56]	@ 0x38
 8017446:	f894 3046 	ldrb.w	r3, [r4, #70]	@ 0x46
 801744a:	6360      	str	r0, [r4, #52]	@ 0x34
 801744c:	f880 33ff 	strb.w	r3, [r0, #1023]	@ 0x3ff
 8017450:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 8017454:	f880 33fe 	strb.w	r3, [r0, #1022]	@ 0x3fe
 8017458:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 801745c:	f880 33fd 	strb.w	r3, [r0, #1021]	@ 0x3fd
 8017460:	f200 30fd 	addw	r0, r0, #1021	@ 0x3fd
 8017464:	6020      	str	r0, [r4, #0]
 8017466:	2000      	movs	r0, #0
 8017468:	e7e8      	b.n	801743c <__submore+0x1e>
 801746a:	6ba6      	ldr	r6, [r4, #56]	@ 0x38
 801746c:	0077      	lsls	r7, r6, #1
 801746e:	463a      	mov	r2, r7
 8017470:	f000 f83a 	bl	80174e8 <_realloc_r>
 8017474:	4605      	mov	r5, r0
 8017476:	2800      	cmp	r0, #0
 8017478:	d0de      	beq.n	8017438 <__submore+0x1a>
 801747a:	eb00 0806 	add.w	r8, r0, r6
 801747e:	4601      	mov	r1, r0
 8017480:	4632      	mov	r2, r6
 8017482:	4640      	mov	r0, r8
 8017484:	f7ff f88a 	bl	801659c <memcpy>
 8017488:	e9c4 570d 	strd	r5, r7, [r4, #52]	@ 0x34
 801748c:	f8c4 8000 	str.w	r8, [r4]
 8017490:	e7e9      	b.n	8017466 <__submore+0x48>

08017492 <memmove>:
 8017492:	4288      	cmp	r0, r1
 8017494:	b510      	push	{r4, lr}
 8017496:	eb01 0402 	add.w	r4, r1, r2
 801749a:	d902      	bls.n	80174a2 <memmove+0x10>
 801749c:	4284      	cmp	r4, r0
 801749e:	4623      	mov	r3, r4
 80174a0:	d807      	bhi.n	80174b2 <memmove+0x20>
 80174a2:	1e43      	subs	r3, r0, #1
 80174a4:	42a1      	cmp	r1, r4
 80174a6:	d008      	beq.n	80174ba <memmove+0x28>
 80174a8:	f811 2b01 	ldrb.w	r2, [r1], #1
 80174ac:	f803 2f01 	strb.w	r2, [r3, #1]!
 80174b0:	e7f8      	b.n	80174a4 <memmove+0x12>
 80174b2:	4402      	add	r2, r0
 80174b4:	4601      	mov	r1, r0
 80174b6:	428a      	cmp	r2, r1
 80174b8:	d100      	bne.n	80174bc <memmove+0x2a>
 80174ba:	bd10      	pop	{r4, pc}
 80174bc:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80174c0:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80174c4:	e7f7      	b.n	80174b6 <memmove+0x24>
	...

080174c8 <_sbrk_r>:
 80174c8:	b538      	push	{r3, r4, r5, lr}
 80174ca:	4d06      	ldr	r5, [pc, #24]	@ (80174e4 <_sbrk_r+0x1c>)
 80174cc:	2300      	movs	r3, #0
 80174ce:	4604      	mov	r4, r0
 80174d0:	4608      	mov	r0, r1
 80174d2:	602b      	str	r3, [r5, #0]
 80174d4:	f7f0 fdaa 	bl	800802c <_sbrk>
 80174d8:	1c43      	adds	r3, r0, #1
 80174da:	d102      	bne.n	80174e2 <_sbrk_r+0x1a>
 80174dc:	682b      	ldr	r3, [r5, #0]
 80174de:	b103      	cbz	r3, 80174e2 <_sbrk_r+0x1a>
 80174e0:	6023      	str	r3, [r4, #0]
 80174e2:	bd38      	pop	{r3, r4, r5, pc}
 80174e4:	20005d98 	.word	0x20005d98

080174e8 <_realloc_r>:
 80174e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80174ec:	4607      	mov	r7, r0
 80174ee:	4614      	mov	r4, r2
 80174f0:	460d      	mov	r5, r1
 80174f2:	b921      	cbnz	r1, 80174fe <_realloc_r+0x16>
 80174f4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80174f8:	4611      	mov	r1, r2
 80174fa:	f7ff b8c9 	b.w	8016690 <_malloc_r>
 80174fe:	b92a      	cbnz	r2, 801750c <_realloc_r+0x24>
 8017500:	f7ff f85a 	bl	80165b8 <_free_r>
 8017504:	4625      	mov	r5, r4
 8017506:	4628      	mov	r0, r5
 8017508:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801750c:	f000 f88a 	bl	8017624 <_malloc_usable_size_r>
 8017510:	4284      	cmp	r4, r0
 8017512:	4606      	mov	r6, r0
 8017514:	d802      	bhi.n	801751c <_realloc_r+0x34>
 8017516:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 801751a:	d8f4      	bhi.n	8017506 <_realloc_r+0x1e>
 801751c:	4621      	mov	r1, r4
 801751e:	4638      	mov	r0, r7
 8017520:	f7ff f8b6 	bl	8016690 <_malloc_r>
 8017524:	4680      	mov	r8, r0
 8017526:	b908      	cbnz	r0, 801752c <_realloc_r+0x44>
 8017528:	4645      	mov	r5, r8
 801752a:	e7ec      	b.n	8017506 <_realloc_r+0x1e>
 801752c:	42b4      	cmp	r4, r6
 801752e:	4622      	mov	r2, r4
 8017530:	4629      	mov	r1, r5
 8017532:	bf28      	it	cs
 8017534:	4632      	movcs	r2, r6
 8017536:	f7ff f831 	bl	801659c <memcpy>
 801753a:	4629      	mov	r1, r5
 801753c:	4638      	mov	r0, r7
 801753e:	f7ff f83b 	bl	80165b8 <_free_r>
 8017542:	e7f1      	b.n	8017528 <_realloc_r+0x40>

08017544 <_strtoul_l.isra.0>:
 8017544:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8017548:	4e34      	ldr	r6, [pc, #208]	@ (801761c <_strtoul_l.isra.0+0xd8>)
 801754a:	4686      	mov	lr, r0
 801754c:	460d      	mov	r5, r1
 801754e:	4628      	mov	r0, r5
 8017550:	f815 4b01 	ldrb.w	r4, [r5], #1
 8017554:	5d37      	ldrb	r7, [r6, r4]
 8017556:	f017 0708 	ands.w	r7, r7, #8
 801755a:	d1f8      	bne.n	801754e <_strtoul_l.isra.0+0xa>
 801755c:	2c2d      	cmp	r4, #45	@ 0x2d
 801755e:	d110      	bne.n	8017582 <_strtoul_l.isra.0+0x3e>
 8017560:	782c      	ldrb	r4, [r5, #0]
 8017562:	2701      	movs	r7, #1
 8017564:	1c85      	adds	r5, r0, #2
 8017566:	f033 0010 	bics.w	r0, r3, #16
 801756a:	d115      	bne.n	8017598 <_strtoul_l.isra.0+0x54>
 801756c:	2c30      	cmp	r4, #48	@ 0x30
 801756e:	d10d      	bne.n	801758c <_strtoul_l.isra.0+0x48>
 8017570:	7828      	ldrb	r0, [r5, #0]
 8017572:	f000 00df 	and.w	r0, r0, #223	@ 0xdf
 8017576:	2858      	cmp	r0, #88	@ 0x58
 8017578:	d108      	bne.n	801758c <_strtoul_l.isra.0+0x48>
 801757a:	786c      	ldrb	r4, [r5, #1]
 801757c:	3502      	adds	r5, #2
 801757e:	2310      	movs	r3, #16
 8017580:	e00a      	b.n	8017598 <_strtoul_l.isra.0+0x54>
 8017582:	2c2b      	cmp	r4, #43	@ 0x2b
 8017584:	bf04      	itt	eq
 8017586:	782c      	ldrbeq	r4, [r5, #0]
 8017588:	1c85      	addeq	r5, r0, #2
 801758a:	e7ec      	b.n	8017566 <_strtoul_l.isra.0+0x22>
 801758c:	2b00      	cmp	r3, #0
 801758e:	d1f6      	bne.n	801757e <_strtoul_l.isra.0+0x3a>
 8017590:	2c30      	cmp	r4, #48	@ 0x30
 8017592:	bf14      	ite	ne
 8017594:	230a      	movne	r3, #10
 8017596:	2308      	moveq	r3, #8
 8017598:	f04f 38ff 	mov.w	r8, #4294967295
 801759c:	2600      	movs	r6, #0
 801759e:	fbb8 f8f3 	udiv	r8, r8, r3
 80175a2:	fb03 f908 	mul.w	r9, r3, r8
 80175a6:	ea6f 0909 	mvn.w	r9, r9
 80175aa:	4630      	mov	r0, r6
 80175ac:	f1a4 0c30 	sub.w	ip, r4, #48	@ 0x30
 80175b0:	f1bc 0f09 	cmp.w	ip, #9
 80175b4:	d810      	bhi.n	80175d8 <_strtoul_l.isra.0+0x94>
 80175b6:	4664      	mov	r4, ip
 80175b8:	42a3      	cmp	r3, r4
 80175ba:	dd1e      	ble.n	80175fa <_strtoul_l.isra.0+0xb6>
 80175bc:	f1b6 3fff 	cmp.w	r6, #4294967295
 80175c0:	d007      	beq.n	80175d2 <_strtoul_l.isra.0+0x8e>
 80175c2:	4580      	cmp	r8, r0
 80175c4:	d316      	bcc.n	80175f4 <_strtoul_l.isra.0+0xb0>
 80175c6:	d101      	bne.n	80175cc <_strtoul_l.isra.0+0x88>
 80175c8:	45a1      	cmp	r9, r4
 80175ca:	db13      	blt.n	80175f4 <_strtoul_l.isra.0+0xb0>
 80175cc:	fb00 4003 	mla	r0, r0, r3, r4
 80175d0:	2601      	movs	r6, #1
 80175d2:	f815 4b01 	ldrb.w	r4, [r5], #1
 80175d6:	e7e9      	b.n	80175ac <_strtoul_l.isra.0+0x68>
 80175d8:	f1a4 0c41 	sub.w	ip, r4, #65	@ 0x41
 80175dc:	f1bc 0f19 	cmp.w	ip, #25
 80175e0:	d801      	bhi.n	80175e6 <_strtoul_l.isra.0+0xa2>
 80175e2:	3c37      	subs	r4, #55	@ 0x37
 80175e4:	e7e8      	b.n	80175b8 <_strtoul_l.isra.0+0x74>
 80175e6:	f1a4 0c61 	sub.w	ip, r4, #97	@ 0x61
 80175ea:	f1bc 0f19 	cmp.w	ip, #25
 80175ee:	d804      	bhi.n	80175fa <_strtoul_l.isra.0+0xb6>
 80175f0:	3c57      	subs	r4, #87	@ 0x57
 80175f2:	e7e1      	b.n	80175b8 <_strtoul_l.isra.0+0x74>
 80175f4:	f04f 36ff 	mov.w	r6, #4294967295
 80175f8:	e7eb      	b.n	80175d2 <_strtoul_l.isra.0+0x8e>
 80175fa:	1c73      	adds	r3, r6, #1
 80175fc:	d106      	bne.n	801760c <_strtoul_l.isra.0+0xc8>
 80175fe:	2322      	movs	r3, #34	@ 0x22
 8017600:	f8ce 3000 	str.w	r3, [lr]
 8017604:	4630      	mov	r0, r6
 8017606:	b932      	cbnz	r2, 8017616 <_strtoul_l.isra.0+0xd2>
 8017608:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801760c:	b107      	cbz	r7, 8017610 <_strtoul_l.isra.0+0xcc>
 801760e:	4240      	negs	r0, r0
 8017610:	2a00      	cmp	r2, #0
 8017612:	d0f9      	beq.n	8017608 <_strtoul_l.isra.0+0xc4>
 8017614:	b106      	cbz	r6, 8017618 <_strtoul_l.isra.0+0xd4>
 8017616:	1e69      	subs	r1, r5, #1
 8017618:	6011      	str	r1, [r2, #0]
 801761a:	e7f5      	b.n	8017608 <_strtoul_l.isra.0+0xc4>
 801761c:	08017ebf 	.word	0x08017ebf

08017620 <_strtoul_r>:
 8017620:	f7ff bf90 	b.w	8017544 <_strtoul_l.isra.0>

08017624 <_malloc_usable_size_r>:
 8017624:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8017628:	1f18      	subs	r0, r3, #4
 801762a:	2b00      	cmp	r3, #0
 801762c:	bfbc      	itt	lt
 801762e:	580b      	ldrlt	r3, [r1, r0]
 8017630:	18c0      	addlt	r0, r0, r3
 8017632:	4770      	bx	lr

08017634 <_init>:
 8017634:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017636:	bf00      	nop
 8017638:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801763a:	bc08      	pop	{r3}
 801763c:	469e      	mov	lr, r3
 801763e:	4770      	bx	lr

08017640 <_fini>:
 8017640:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017642:	bf00      	nop
 8017644:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8017646:	bc08      	pop	{r3}
 8017648:	469e      	mov	lr, r3
 801764a:	4770      	bx	lr
